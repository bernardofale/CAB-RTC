
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 2c 00 20 a1 39 00 00 4b 92 00 00 75 39 00 00     .,. .9..K...u9..
  10:	75 39 00 00 75 39 00 00 75 39 00 00 00 00 00 00     u9..u9..u9......
	...
  2c:	69 32 00 00 75 39 00 00 00 00 00 00 15 32 00 00     i2..u9.......2..
  3c:	75 39 00 00                                         u9..

00000040 <_irq_vector_table>:
  40:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  50:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  60:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  70:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  80:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  90:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  a0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  b0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  c0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  d0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  e0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..
  f0:	19 33 00 00 19 33 00 00 19 33 00 00 19 33 00 00     .3...3...3...3..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_ldivmod>:
     4c4:	b97b      	cbnz	r3, 4e6 <__aeabi_ldivmod+0x22>
     4c6:	b972      	cbnz	r2, 4e6 <__aeabi_ldivmod+0x22>
     4c8:	2900      	cmp	r1, #0
     4ca:	bfbe      	ittt	lt
     4cc:	2000      	movlt	r0, #0
     4ce:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     4d2:	e006      	blt.n	4e2 <__aeabi_ldivmod+0x1e>
     4d4:	bf08      	it	eq
     4d6:	2800      	cmpeq	r0, #0
     4d8:	bf1c      	itt	ne
     4da:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     4de:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4e2:	f000 b857 	b.w	594 <__aeabi_idiv0>
     4e6:	f1ad 0c08 	sub.w	ip, sp, #8
     4ea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4ee:	2900      	cmp	r1, #0
     4f0:	db09      	blt.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
     4f2:	2b00      	cmp	r3, #0
     4f4:	db1a      	blt.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4f6:	f000 f84f 	bl	598 <__udivmoddi4>
     4fa:	f8dd e004 	ldr.w	lr, [sp, #4]
     4fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     502:	b004      	add	sp, #16
     504:	4770      	bx	lr
     506:	4240      	negs	r0, r0
     508:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     50c:	2b00      	cmp	r3, #0
     50e:	db1b      	blt.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     510:	f000 f842 	bl	598 <__udivmoddi4>
     514:	f8dd e004 	ldr.w	lr, [sp, #4]
     518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     51c:	b004      	add	sp, #16
     51e:	4240      	negs	r0, r0
     520:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     524:	4252      	negs	r2, r2
     526:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     52a:	4770      	bx	lr
     52c:	4252      	negs	r2, r2
     52e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     532:	f000 f831 	bl	598 <__udivmoddi4>
     536:	f8dd e004 	ldr.w	lr, [sp, #4]
     53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     53e:	b004      	add	sp, #16
     540:	4240      	negs	r0, r0
     542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     546:	4770      	bx	lr
     548:	4252      	negs	r2, r2
     54a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     54e:	f000 f823 	bl	598 <__udivmoddi4>
     552:	f8dd e004 	ldr.w	lr, [sp, #4]
     556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     55a:	b004      	add	sp, #16
     55c:	4252      	negs	r2, r2
     55e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     562:	4770      	bx	lr

00000564 <__aeabi_uldivmod>:
     564:	b953      	cbnz	r3, 57c <__aeabi_uldivmod+0x18>
     566:	b94a      	cbnz	r2, 57c <__aeabi_uldivmod+0x18>
     568:	2900      	cmp	r1, #0
     56a:	bf08      	it	eq
     56c:	2800      	cmpeq	r0, #0
     56e:	bf1c      	itt	ne
     570:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     574:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     578:	f000 b80c 	b.w	594 <__aeabi_idiv0>
     57c:	f1ad 0c08 	sub.w	ip, sp, #8
     580:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     584:	f000 f808 	bl	598 <__udivmoddi4>
     588:	f8dd e004 	ldr.w	lr, [sp, #4]
     58c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     590:	b004      	add	sp, #16
     592:	4770      	bx	lr

00000594 <__aeabi_idiv0>:
     594:	4770      	bx	lr
     596:	bf00      	nop

00000598 <__udivmoddi4>:
     598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     59c:	4686      	mov	lr, r0
     59e:	468c      	mov	ip, r1
     5a0:	4608      	mov	r0, r1
     5a2:	9e08      	ldr	r6, [sp, #32]
     5a4:	4615      	mov	r5, r2
     5a6:	4674      	mov	r4, lr
     5a8:	4619      	mov	r1, r3
     5aa:	2b00      	cmp	r3, #0
     5ac:	f040 80c2 	bne.w	734 <__udivmoddi4+0x19c>
     5b0:	4285      	cmp	r5, r0
     5b2:	fab2 f282 	clz	r2, r2
     5b6:	d945      	bls.n	644 <__udivmoddi4+0xac>
     5b8:	b14a      	cbz	r2, 5ce <__udivmoddi4+0x36>
     5ba:	f1c2 0320 	rsb	r3, r2, #32
     5be:	fa00 fc02 	lsl.w	ip, r0, r2
     5c2:	fa2e f303 	lsr.w	r3, lr, r3
     5c6:	4095      	lsls	r5, r2
     5c8:	ea43 0c0c 	orr.w	ip, r3, ip
     5cc:	4094      	lsls	r4, r2
     5ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5d2:	b2a8      	uxth	r0, r5
     5d4:	fbbc f8fe 	udiv	r8, ip, lr
     5d8:	0c23      	lsrs	r3, r4, #16
     5da:	fb0e cc18 	mls	ip, lr, r8, ip
     5de:	fb08 f900 	mul.w	r9, r8, r0
     5e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     5e6:	4599      	cmp	r9, r3
     5e8:	d928      	bls.n	63c <__udivmoddi4+0xa4>
     5ea:	18eb      	adds	r3, r5, r3
     5ec:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     5f0:	d204      	bcs.n	5fc <__udivmoddi4+0x64>
     5f2:	4599      	cmp	r9, r3
     5f4:	d902      	bls.n	5fc <__udivmoddi4+0x64>
     5f6:	f1a8 0702 	sub.w	r7, r8, #2
     5fa:	442b      	add	r3, r5
     5fc:	eba3 0309 	sub.w	r3, r3, r9
     600:	b2a4      	uxth	r4, r4
     602:	fbb3 fcfe 	udiv	ip, r3, lr
     606:	fb0e 331c 	mls	r3, lr, ip, r3
     60a:	fb0c f000 	mul.w	r0, ip, r0
     60e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     612:	42a0      	cmp	r0, r4
     614:	d914      	bls.n	640 <__udivmoddi4+0xa8>
     616:	192c      	adds	r4, r5, r4
     618:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     61c:	d204      	bcs.n	628 <__udivmoddi4+0x90>
     61e:	42a0      	cmp	r0, r4
     620:	d902      	bls.n	628 <__udivmoddi4+0x90>
     622:	f1ac 0302 	sub.w	r3, ip, #2
     626:	442c      	add	r4, r5
     628:	1a24      	subs	r4, r4, r0
     62a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     62e:	b11e      	cbz	r6, 638 <__udivmoddi4+0xa0>
     630:	40d4      	lsrs	r4, r2
     632:	2300      	movs	r3, #0
     634:	6034      	str	r4, [r6, #0]
     636:	6073      	str	r3, [r6, #4]
     638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     63c:	4647      	mov	r7, r8
     63e:	e7dd      	b.n	5fc <__udivmoddi4+0x64>
     640:	4663      	mov	r3, ip
     642:	e7f1      	b.n	628 <__udivmoddi4+0x90>
     644:	bb92      	cbnz	r2, 6ac <__udivmoddi4+0x114>
     646:	1b43      	subs	r3, r0, r5
     648:	2101      	movs	r1, #1
     64a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     64e:	b2af      	uxth	r7, r5
     650:	fbb3 fcfe 	udiv	ip, r3, lr
     654:	0c20      	lsrs	r0, r4, #16
     656:	fb0e 331c 	mls	r3, lr, ip, r3
     65a:	fb0c f807 	mul.w	r8, ip, r7
     65e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     662:	4598      	cmp	r8, r3
     664:	d962      	bls.n	72c <__udivmoddi4+0x194>
     666:	18eb      	adds	r3, r5, r3
     668:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     66c:	d204      	bcs.n	678 <__udivmoddi4+0xe0>
     66e:	4598      	cmp	r8, r3
     670:	d902      	bls.n	678 <__udivmoddi4+0xe0>
     672:	f1ac 0002 	sub.w	r0, ip, #2
     676:	442b      	add	r3, r5
     678:	eba3 0308 	sub.w	r3, r3, r8
     67c:	b2a4      	uxth	r4, r4
     67e:	fbb3 fcfe 	udiv	ip, r3, lr
     682:	fb0e 331c 	mls	r3, lr, ip, r3
     686:	fb0c f707 	mul.w	r7, ip, r7
     68a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     68e:	42a7      	cmp	r7, r4
     690:	d94e      	bls.n	730 <__udivmoddi4+0x198>
     692:	192c      	adds	r4, r5, r4
     694:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     698:	d204      	bcs.n	6a4 <__udivmoddi4+0x10c>
     69a:	42a7      	cmp	r7, r4
     69c:	d902      	bls.n	6a4 <__udivmoddi4+0x10c>
     69e:	f1ac 0302 	sub.w	r3, ip, #2
     6a2:	442c      	add	r4, r5
     6a4:	1be4      	subs	r4, r4, r7
     6a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     6aa:	e7c0      	b.n	62e <__udivmoddi4+0x96>
     6ac:	f1c2 0320 	rsb	r3, r2, #32
     6b0:	fa20 f103 	lsr.w	r1, r0, r3
     6b4:	4095      	lsls	r5, r2
     6b6:	4090      	lsls	r0, r2
     6b8:	fa2e f303 	lsr.w	r3, lr, r3
     6bc:	4303      	orrs	r3, r0
     6be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     6c2:	b2af      	uxth	r7, r5
     6c4:	fbb1 fcfe 	udiv	ip, r1, lr
     6c8:	fb0e 101c 	mls	r0, lr, ip, r1
     6cc:	0c19      	lsrs	r1, r3, #16
     6ce:	fb0c f807 	mul.w	r8, ip, r7
     6d2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     6d6:	4588      	cmp	r8, r1
     6d8:	fa04 f402 	lsl.w	r4, r4, r2
     6dc:	d922      	bls.n	724 <__udivmoddi4+0x18c>
     6de:	1869      	adds	r1, r5, r1
     6e0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     6e4:	d204      	bcs.n	6f0 <__udivmoddi4+0x158>
     6e6:	4588      	cmp	r8, r1
     6e8:	d902      	bls.n	6f0 <__udivmoddi4+0x158>
     6ea:	f1ac 0002 	sub.w	r0, ip, #2
     6ee:	4429      	add	r1, r5
     6f0:	eba1 0108 	sub.w	r1, r1, r8
     6f4:	b29b      	uxth	r3, r3
     6f6:	fbb1 fcfe 	udiv	ip, r1, lr
     6fa:	fb0e 111c 	mls	r1, lr, ip, r1
     6fe:	fb0c f707 	mul.w	r7, ip, r7
     702:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     706:	429f      	cmp	r7, r3
     708:	d90e      	bls.n	728 <__udivmoddi4+0x190>
     70a:	18eb      	adds	r3, r5, r3
     70c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     710:	d204      	bcs.n	71c <__udivmoddi4+0x184>
     712:	429f      	cmp	r7, r3
     714:	d902      	bls.n	71c <__udivmoddi4+0x184>
     716:	f1ac 0102 	sub.w	r1, ip, #2
     71a:	442b      	add	r3, r5
     71c:	1bdb      	subs	r3, r3, r7
     71e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     722:	e792      	b.n	64a <__udivmoddi4+0xb2>
     724:	4660      	mov	r0, ip
     726:	e7e3      	b.n	6f0 <__udivmoddi4+0x158>
     728:	4661      	mov	r1, ip
     72a:	e7f7      	b.n	71c <__udivmoddi4+0x184>
     72c:	4660      	mov	r0, ip
     72e:	e7a3      	b.n	678 <__udivmoddi4+0xe0>
     730:	4663      	mov	r3, ip
     732:	e7b7      	b.n	6a4 <__udivmoddi4+0x10c>
     734:	4283      	cmp	r3, r0
     736:	d906      	bls.n	746 <__udivmoddi4+0x1ae>
     738:	b916      	cbnz	r6, 740 <__udivmoddi4+0x1a8>
     73a:	2100      	movs	r1, #0
     73c:	4608      	mov	r0, r1
     73e:	e77b      	b.n	638 <__udivmoddi4+0xa0>
     740:	e9c6 e000 	strd	lr, r0, [r6]
     744:	e7f9      	b.n	73a <__udivmoddi4+0x1a2>
     746:	fab3 f783 	clz	r7, r3
     74a:	b98f      	cbnz	r7, 770 <__udivmoddi4+0x1d8>
     74c:	4283      	cmp	r3, r0
     74e:	d301      	bcc.n	754 <__udivmoddi4+0x1bc>
     750:	4572      	cmp	r2, lr
     752:	d808      	bhi.n	766 <__udivmoddi4+0x1ce>
     754:	ebbe 0402 	subs.w	r4, lr, r2
     758:	eb60 0303 	sbc.w	r3, r0, r3
     75c:	2001      	movs	r0, #1
     75e:	469c      	mov	ip, r3
     760:	b91e      	cbnz	r6, 76a <__udivmoddi4+0x1d2>
     762:	2100      	movs	r1, #0
     764:	e768      	b.n	638 <__udivmoddi4+0xa0>
     766:	4638      	mov	r0, r7
     768:	e7fa      	b.n	760 <__udivmoddi4+0x1c8>
     76a:	e9c6 4c00 	strd	r4, ip, [r6]
     76e:	e7f8      	b.n	762 <__udivmoddi4+0x1ca>
     770:	f1c7 0c20 	rsb	ip, r7, #32
     774:	40bb      	lsls	r3, r7
     776:	fa22 f40c 	lsr.w	r4, r2, ip
     77a:	431c      	orrs	r4, r3
     77c:	fa2e f10c 	lsr.w	r1, lr, ip
     780:	fa20 f30c 	lsr.w	r3, r0, ip
     784:	40b8      	lsls	r0, r7
     786:	4301      	orrs	r1, r0
     788:	ea4f 4914 	mov.w	r9, r4, lsr #16
     78c:	fa0e f507 	lsl.w	r5, lr, r7
     790:	fbb3 f8f9 	udiv	r8, r3, r9
     794:	fa1f fe84 	uxth.w	lr, r4
     798:	fb09 3018 	mls	r0, r9, r8, r3
     79c:	0c0b      	lsrs	r3, r1, #16
     79e:	fb08 fa0e 	mul.w	sl, r8, lr
     7a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     7a6:	459a      	cmp	sl, r3
     7a8:	fa02 f207 	lsl.w	r2, r2, r7
     7ac:	d940      	bls.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7ae:	18e3      	adds	r3, r4, r3
     7b0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     7b4:	d204      	bcs.n	7c0 <__udivmoddi4+0x228>
     7b6:	459a      	cmp	sl, r3
     7b8:	d902      	bls.n	7c0 <__udivmoddi4+0x228>
     7ba:	f1a8 0002 	sub.w	r0, r8, #2
     7be:	4423      	add	r3, r4
     7c0:	eba3 030a 	sub.w	r3, r3, sl
     7c4:	b289      	uxth	r1, r1
     7c6:	fbb3 f8f9 	udiv	r8, r3, r9
     7ca:	fb09 3318 	mls	r3, r9, r8, r3
     7ce:	fb08 fe0e 	mul.w	lr, r8, lr
     7d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     7d6:	458e      	cmp	lr, r1
     7d8:	d92c      	bls.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     7da:	1861      	adds	r1, r4, r1
     7dc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     7e0:	d204      	bcs.n	7ec <__udivmoddi4+0x254>
     7e2:	458e      	cmp	lr, r1
     7e4:	d902      	bls.n	7ec <__udivmoddi4+0x254>
     7e6:	f1a8 0302 	sub.w	r3, r8, #2
     7ea:	4421      	add	r1, r4
     7ec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     7f0:	fba0 9802 	umull	r9, r8, r0, r2
     7f4:	eba1 010e 	sub.w	r1, r1, lr
     7f8:	4541      	cmp	r1, r8
     7fa:	46ce      	mov	lr, r9
     7fc:	4643      	mov	r3, r8
     7fe:	d302      	bcc.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     800:	d106      	bne.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     802:	454d      	cmp	r5, r9
     804:	d204      	bcs.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
     806:	ebb9 0e02 	subs.w	lr, r9, r2
     80a:	eb68 0304 	sbc.w	r3, r8, r4
     80e:	3801      	subs	r0, #1
     810:	2e00      	cmp	r6, #0
     812:	d0a6      	beq.n	762 <__udivmoddi4+0x1ca>
     814:	ebb5 020e 	subs.w	r2, r5, lr
     818:	eb61 0103 	sbc.w	r1, r1, r3
     81c:	fa01 fc0c 	lsl.w	ip, r1, ip
     820:	fa22 f307 	lsr.w	r3, r2, r7
     824:	ea4c 0303 	orr.w	r3, ip, r3
     828:	40f9      	lsrs	r1, r7
     82a:	e9c6 3100 	strd	r3, r1, [r6]
     82e:	e798      	b.n	762 <__udivmoddi4+0x1ca>
     830:	4640      	mov	r0, r8
     832:	e7c5      	b.n	7c0 <__udivmoddi4+0x228>
     834:	4643      	mov	r3, r8
     836:	e7d9      	b.n	7ec <__udivmoddi4+0x254>

00000838 <button_pressed>:
static uint16_t distance;

/* Interrupt Handler */

gpio_callback_handler_t button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
	test_flag = true;
     838:	4b01      	ldr	r3, [pc, #4]	; (840 <button_pressed+0x8>)
     83a:	2201      	movs	r2, #1
     83c:	701a      	strb	r2, [r3, #0]
	return;
}
     83e:	4770      	bx	lr
     840:	20000eae 	.word	0x20000eae

00000844 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
     844:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     848:	88c4      	ldrh	r4, [r0, #6]
	return gpio_pin_configure(spec->port,
     84a:	6805      	ldr	r5, [r0, #0]
				  spec->pin,
     84c:	7906      	ldrb	r6, [r0, #4]
	return gpio_pin_configure(spec->port,
     84e:	430c      	orrs	r4, r1
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     850:	f004 0330 	and.w	r3, r4, #48	; 0x30
     854:	2b30      	cmp	r3, #48	; 0x30
	const struct gpio_driver_config *const cfg =
     856:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
     85a:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     85c:	d10e      	bne.n	87c <gpio_pin_configure_dt+0x38>
     85e:	493d      	ldr	r1, [pc, #244]	; (954 <gpio_pin_configure_dt+0x110>)
     860:	4a3d      	ldr	r2, [pc, #244]	; (958 <gpio_pin_configure_dt+0x114>)
     862:	483e      	ldr	r0, [pc, #248]	; (95c <gpio_pin_configure_dt+0x118>)
     864:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     868:	f008 fc5d 	bl	9126 <assert_print>
     86c:	483c      	ldr	r0, [pc, #240]	; (960 <gpio_pin_configure_dt+0x11c>)
     86e:	f008 fc5a 	bl	9126 <assert_print>
     872:	4839      	ldr	r0, [pc, #228]	; (958 <gpio_pin_configure_dt+0x114>)
     874:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     878:	f008 fc4e 	bl	9118 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     87c:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     880:	2b02      	cmp	r3, #2
     882:	d10e      	bne.n	8a2 <gpio_pin_configure_dt+0x5e>
     884:	4937      	ldr	r1, [pc, #220]	; (964 <gpio_pin_configure_dt+0x120>)
     886:	4a34      	ldr	r2, [pc, #208]	; (958 <gpio_pin_configure_dt+0x114>)
     888:	4834      	ldr	r0, [pc, #208]	; (95c <gpio_pin_configure_dt+0x118>)
     88a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     88e:	f008 fc4a 	bl	9126 <assert_print>
     892:	4835      	ldr	r0, [pc, #212]	; (968 <gpio_pin_configure_dt+0x124>)
     894:	f008 fc47 	bl	9126 <assert_print>
     898:	482f      	ldr	r0, [pc, #188]	; (958 <gpio_pin_configure_dt+0x114>)
     89a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     89e:	f008 fc3b 	bl	9118 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     8a2:	f004 0306 	and.w	r3, r4, #6
     8a6:	2b04      	cmp	r3, #4
     8a8:	d10b      	bne.n	8c2 <gpio_pin_configure_dt+0x7e>
     8aa:	4930      	ldr	r1, [pc, #192]	; (96c <gpio_pin_configure_dt+0x128>)
     8ac:	482b      	ldr	r0, [pc, #172]	; (95c <gpio_pin_configure_dt+0x118>)
     8ae:	4a2a      	ldr	r2, [pc, #168]	; (958 <gpio_pin_configure_dt+0x114>)
     8b0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     8b4:	f008 fc37 	bl	9126 <assert_print>
     8b8:	4827      	ldr	r0, [pc, #156]	; (958 <gpio_pin_configure_dt+0x114>)
     8ba:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     8be:	f008 fc2b 	bl	9118 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     8c2:	f414 2f40 	tst.w	r4, #786432	; 0xc0000
     8c6:	d019      	beq.n	8fc <gpio_pin_configure_dt+0xb8>
     8c8:	03a0      	lsls	r0, r4, #14
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     8ca:	f404 1880 	and.w	r8, r4, #1048576	; 0x100000
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     8ce:	d40e      	bmi.n	8ee <gpio_pin_configure_dt+0xaa>
     8d0:	4927      	ldr	r1, [pc, #156]	; (970 <gpio_pin_configure_dt+0x12c>)
     8d2:	4a21      	ldr	r2, [pc, #132]	; (958 <gpio_pin_configure_dt+0x114>)
     8d4:	4821      	ldr	r0, [pc, #132]	; (95c <gpio_pin_configure_dt+0x118>)
     8d6:	f240 23c3 	movw	r3, #707	; 0x2c3
     8da:	f008 fc24 	bl	9126 <assert_print>
     8de:	4825      	ldr	r0, [pc, #148]	; (974 <gpio_pin_configure_dt+0x130>)
     8e0:	f008 fc21 	bl	9126 <assert_print>
     8e4:	481c      	ldr	r0, [pc, #112]	; (958 <gpio_pin_configure_dt+0x114>)
     8e6:	f240 21c3 	movw	r1, #707	; 0x2c3
     8ea:	f008 fc15 	bl	9118 <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     8ee:	f1b8 0f00 	cmp.w	r8, #0
     8f2:	d003      	beq.n	8fc <gpio_pin_configure_dt+0xb8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     8f4:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     8f6:	bf48      	it	mi
     8f8:	f484 2440 	eormi.w	r4, r4, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     8fc:	f8db 3000 	ldr.w	r3, [fp]
     900:	f04f 0a01 	mov.w	sl, #1
     904:	fa0a fa06 	lsl.w	sl, sl, r6
     908:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     90c:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     910:	d10e      	bne.n	930 <gpio_pin_configure_dt+0xec>
     912:	4919      	ldr	r1, [pc, #100]	; (978 <gpio_pin_configure_dt+0x134>)
     914:	4a10      	ldr	r2, [pc, #64]	; (958 <gpio_pin_configure_dt+0x114>)
     916:	4811      	ldr	r0, [pc, #68]	; (95c <gpio_pin_configure_dt+0x118>)
     918:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     91c:	f008 fc03 	bl	9126 <assert_print>
     920:	4816      	ldr	r0, [pc, #88]	; (97c <gpio_pin_configure_dt+0x138>)
     922:	f008 fc00 	bl	9126 <assert_print>
     926:	480c      	ldr	r0, [pc, #48]	; (958 <gpio_pin_configure_dt+0x114>)
     928:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     92c:	f008 fbf4 	bl	9118 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     930:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     932:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     934:	bf4c      	ite	mi
     936:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     93a:	ea23 030a 	bicpl.w	r3, r3, sl
     93e:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     940:	f8d9 3000 	ldr.w	r3, [r9]
     944:	4642      	mov	r2, r8
     946:	4631      	mov	r1, r6
     948:	4628      	mov	r0, r5
}
     94a:	b001      	add	sp, #4
     94c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
     950:	4718      	bx	r3
     952:	bf00      	nop
     954:	0000a059 	.word	0x0000a059
     958:	0000a028 	.word	0x0000a028
     95c:	0000a092 	.word	0x0000a092
     960:	0000a0af 	.word	0x0000a0af
     964:	0000a0ec 	.word	0x0000a0ec
     968:	0000a121 	.word	0x0000a121
     96c:	0000a173 	.word	0x0000a173
     970:	0000a1a6 	.word	0x0000a1a6
     974:	0000a1ec 	.word	0x0000a1ec
     978:	0000a227 	.word	0x0000a227
     97c:	0000a265 	.word	0x0000a265

00000980 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
     980:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_toggle(spec->port, spec->pin);
     982:	6805      	ldr	r5, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     984:	7903      	ldrb	r3, [r0, #4]
     986:	2401      	movs	r4, #1
     988:	409c      	lsls	r4, r3
     98a:	686b      	ldr	r3, [r5, #4]
     98c:	681b      	ldr	r3, [r3, #0]
     98e:	421c      	tst	r4, r3
     990:	d10e      	bne.n	9b0 <gpio_pin_toggle_dt+0x30>
     992:	490b      	ldr	r1, [pc, #44]	; (9c0 <gpio_pin_toggle_dt+0x40>)
     994:	4a0b      	ldr	r2, [pc, #44]	; (9c4 <gpio_pin_toggle_dt+0x44>)
     996:	480c      	ldr	r0, [pc, #48]	; (9c8 <gpio_pin_toggle_dt+0x48>)
     998:	f240 43bc 	movw	r3, #1212	; 0x4bc
     99c:	f008 fbc3 	bl	9126 <assert_print>
     9a0:	480a      	ldr	r0, [pc, #40]	; (9cc <gpio_pin_toggle_dt+0x4c>)
     9a2:	f008 fbc0 	bl	9126 <assert_print>
     9a6:	4807      	ldr	r0, [pc, #28]	; (9c4 <gpio_pin_toggle_dt+0x44>)
     9a8:	f240 41bc 	movw	r1, #1212	; 0x4bc
     9ac:	f008 fbb4 	bl	9118 <assert_post_action>
	return api->port_toggle_bits(port, pins);
     9b0:	68ab      	ldr	r3, [r5, #8]
     9b2:	4621      	mov	r1, r4
     9b4:	4628      	mov	r0, r5
     9b6:	695b      	ldr	r3, [r3, #20]
}
     9b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_toggle_bits(port, pins);
     9bc:	4718      	bx	r3
     9be:	bf00      	nop
     9c0:	0000a227 	.word	0x0000a227
     9c4:	0000a028 	.word	0x0000a028
     9c8:	0000a092 	.word	0x0000a092
     9cc:	0000a265 	.word	0x0000a265

000009d0 <gpio_pin_set_dt>:
{
     9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
     9d4:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9d6:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
     9d8:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9da:	2501      	movs	r5, #1
     9dc:	409d      	lsls	r5, r3
     9de:	6863      	ldr	r3, [r4, #4]
     9e0:	681b      	ldr	r3, [r3, #0]
     9e2:	421d      	tst	r5, r3
{
     9e4:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9e6:	d10e      	bne.n	a06 <gpio_pin_set_dt+0x36>
     9e8:	4918      	ldr	r1, [pc, #96]	; (a4c <gpio_pin_set_dt+0x7c>)
     9ea:	4a19      	ldr	r2, [pc, #100]	; (a50 <gpio_pin_set_dt+0x80>)
     9ec:	4819      	ldr	r0, [pc, #100]	; (a54 <gpio_pin_set_dt+0x84>)
     9ee:	f240 4392 	movw	r3, #1170	; 0x492
     9f2:	f008 fb98 	bl	9126 <assert_print>
     9f6:	4818      	ldr	r0, [pc, #96]	; (a58 <gpio_pin_set_dt+0x88>)
     9f8:	f008 fb95 	bl	9126 <assert_print>
     9fc:	4814      	ldr	r0, [pc, #80]	; (a50 <gpio_pin_set_dt+0x80>)
     9fe:	f240 4192 	movw	r1, #1170	; 0x492
     a02:	f008 fb89 	bl	9118 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     a06:	683b      	ldr	r3, [r7, #0]
     a08:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     a0a:	6863      	ldr	r3, [r4, #4]
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	bf18      	it	ne
     a10:	f086 0601 	eorne.w	r6, r6, #1
     a14:	421d      	tst	r5, r3
     a16:	d10e      	bne.n	a36 <gpio_pin_set_dt+0x66>
     a18:	490c      	ldr	r1, [pc, #48]	; (a4c <gpio_pin_set_dt+0x7c>)
     a1a:	4a0d      	ldr	r2, [pc, #52]	; (a50 <gpio_pin_set_dt+0x80>)
     a1c:	480d      	ldr	r0, [pc, #52]	; (a54 <gpio_pin_set_dt+0x84>)
     a1e:	f44f 638d 	mov.w	r3, #1128	; 0x468
     a22:	f008 fb80 	bl	9126 <assert_print>
     a26:	480c      	ldr	r0, [pc, #48]	; (a58 <gpio_pin_set_dt+0x88>)
     a28:	f008 fb7d 	bl	9126 <assert_print>
     a2c:	4808      	ldr	r0, [pc, #32]	; (a50 <gpio_pin_set_dt+0x80>)
     a2e:	f44f 618d 	mov.w	r1, #1128	; 0x468
     a32:	f008 fb71 	bl	9118 <assert_post_action>
	if (value != 0)	{
     a36:	b136      	cbz	r6, a46 <gpio_pin_set_dt+0x76>
	return api->port_set_bits_raw(port, pins);
     a38:	68a3      	ldr	r3, [r4, #8]
     a3a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     a3c:	4629      	mov	r1, r5
     a3e:	4620      	mov	r0, r4
}
     a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     a44:	4718      	bx	r3
     a46:	68a3      	ldr	r3, [r4, #8]
     a48:	691b      	ldr	r3, [r3, #16]
     a4a:	e7f7      	b.n	a3c <gpio_pin_set_dt+0x6c>
     a4c:	0000a227 	.word	0x0000a227
     a50:	0000a028 	.word	0x0000a028
     a54:	0000a092 	.word	0x0000a092
     a58:	0000a265 	.word	0x0000a265

00000a5c <thread_OUTPUT_code>:
		printk("MIN_IAT : %4u\n", min_iat);
  	}
}

void thread_OUTPUT_code(void *argA , void *argB, void *argC)
{	
     a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     a60:	f8df 9104 	ldr.w	r9, [pc, #260]	; b68 <thread_OUTPUT_code+0x10c>
	uint16_t min_iat = 100000;
    while(1) {

		k_sem_take(&sem_filter_output, K_FOREVER); //takes the semaphore given by the filter task
		start = k_uptime_get();
		printk("Thread OUTPUT released\n");
     a64:	f8df a104 	ldr.w	sl, [pc, #260]	; b6c <thread_OUTPUT_code+0x110>
		printk("Distance after filter ->%4u m \n", distance);
     a68:	f8df 8104 	ldr.w	r8, [pc, #260]	; b70 <thread_OUTPUT_code+0x114>
	uint16_t min_iat = 100000;
     a6c:	f248 66a0 	movw	r6, #34464	; 0x86a0
	uint16_t last = 5000;
     a70:	f241 3588 	movw	r5, #5000	; 0x1388
	uint16_t wc_exec_time = 1000;
     a74:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
     a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     a80:	4648      	mov	r0, r9
     a82:	f006 f9b1 	bl	6de8 <z_impl_k_sem_take>
		start = k_uptime_get();
     a86:	f008 fa02 	bl	8e8e <k_uptime_get>
     a8a:	b284      	uxth	r4, r0
		printk("Thread OUTPUT released\n");
     a8c:	4650      	mov	r0, sl
     a8e:	f008 fa4e 	bl	8f2e <printk>
		printk("Distance after filter ->%4u m \n", distance);
     a92:	f8b8 1000 	ldrh.w	r1, [r8]
     a96:	4837      	ldr	r0, [pc, #220]	; (b74 <thread_OUTPUT_code+0x118>)
     a98:	f008 fa49 	bl	8f2e <printk>
		if(distance >= 30){
     a9c:	f8b8 3000 	ldrh.w	r3, [r8]
     aa0:	2b1d      	cmp	r3, #29
     aa2:	d92d      	bls.n	b00 <thread_OUTPUT_code+0xa4>
			/* LED1 ON */
			ret = gpio_pin_set_dt(&led1, 1);
     aa4:	4834      	ldr	r0, [pc, #208]	; (b78 <thread_OUTPUT_code+0x11c>)
     aa6:	2101      	movs	r1, #1
     aa8:	f7ff ff92 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     aac:	2800      	cmp	r0, #0
     aae:	db59      	blt.n	b64 <thread_OUTPUT_code+0x108>
				return;
			}
			ret = gpio_pin_set_dt(&led2, 0);
     ab0:	2100      	movs	r1, #0
			/* LEDS1,2 ON */
			ret = gpio_pin_set_dt(&led1, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led2, 1);
     ab2:	4832      	ldr	r0, [pc, #200]	; (b7c <thread_OUTPUT_code+0x120>)
     ab4:	f7ff ff8c 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     ab8:	2800      	cmp	r0, #0
     aba:	db53      	blt.n	b64 <thread_OUTPUT_code+0x108>
				return;
			}
			ret = gpio_pin_set_dt(&led3, 0);
     abc:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led2, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led3, 1);
     abe:	4830      	ldr	r0, [pc, #192]	; (b80 <thread_OUTPUT_code+0x124>)
     ac0:	f7ff ff86 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     ac4:	2800      	cmp	r0, #0
     ac6:	db4d      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led4, 0);
     ac8:	2100      	movs	r1, #0
     aca:	482e      	ldr	r0, [pc, #184]	; (b84 <thread_OUTPUT_code+0x128>)
     acc:	f7ff ff80 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     ad0:	2800      	cmp	r0, #0
     ad2:	db47      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led4, 1);
			if (ret < 0) {
				return;
			}
		}
		end = k_uptime_get();
     ad4:	f008 f9db 	bl	8e8e <k_uptime_get>
     ad8:	fa1f fb80 	uxth.w	fp, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
     adc:	ebab 0304 	sub.w	r3, fp, r4
     ae0:	429f      	cmp	r7, r3
     ae2:	dc3d      	bgt.n	b60 <thread_OUTPUT_code+0x104>
		if(min_iat > last) min_iat = start - last;
     ae4:	42b5      	cmp	r5, r6
     ae6:	bf3c      	itt	cc
     ae8:	1b64      	subcc	r4, r4, r5
     aea:	b2a6      	uxthcc	r6, r4
		last = end;
		printk("Ci : %4u\n", wc_exec_time);
     aec:	4826      	ldr	r0, [pc, #152]	; (b88 <thread_OUTPUT_code+0x12c>)
     aee:	4639      	mov	r1, r7
     af0:	f008 fa1d 	bl	8f2e <printk>
		printk("MIN_IAT : %4u\n", min_iat);
     af4:	4825      	ldr	r0, [pc, #148]	; (b8c <thread_OUTPUT_code+0x130>)
     af6:	4631      	mov	r1, r6
     af8:	f008 fa19 	bl	8f2e <printk>
		last = end;
     afc:	465d      	mov	r5, fp
    while(1) {
     afe:	e7bb      	b.n	a78 <thread_OUTPUT_code+0x1c>
		}else if((distance >= 20) & (distance < 30)){
     b00:	f1a3 0214 	sub.w	r2, r3, #20
     b04:	2a09      	cmp	r2, #9
     b06:	d807      	bhi.n	b18 <thread_OUTPUT_code+0xbc>
			ret = gpio_pin_set_dt(&led1, 1);
     b08:	481b      	ldr	r0, [pc, #108]	; (b78 <thread_OUTPUT_code+0x11c>)
     b0a:	2101      	movs	r1, #1
     b0c:	f7ff ff60 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b10:	2800      	cmp	r0, #0
     b12:	db27      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led2, 1);
     b14:	2101      	movs	r1, #1
     b16:	e7cc      	b.n	ab2 <thread_OUTPUT_code+0x56>
		}else if((distance >=  10) & (distance < 20)){
     b18:	3b0a      	subs	r3, #10
     b1a:	2b09      	cmp	r3, #9
			ret = gpio_pin_set_dt(&led1, 1);
     b1c:	4816      	ldr	r0, [pc, #88]	; (b78 <thread_OUTPUT_code+0x11c>)
     b1e:	f04f 0101 	mov.w	r1, #1
		}else if((distance >=  10) & (distance < 20)){
     b22:	d80b      	bhi.n	b3c <thread_OUTPUT_code+0xe0>
			ret = gpio_pin_set_dt(&led1, 1);
     b24:	f7ff ff54 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b28:	2800      	cmp	r0, #0
     b2a:	db1b      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led2, 1);
     b2c:	4813      	ldr	r0, [pc, #76]	; (b7c <thread_OUTPUT_code+0x120>)
     b2e:	2101      	movs	r1, #1
     b30:	f7ff ff4e 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b34:	2800      	cmp	r0, #0
     b36:	db15      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led3, 1);
     b38:	2101      	movs	r1, #1
     b3a:	e7c0      	b.n	abe <thread_OUTPUT_code+0x62>
			ret = gpio_pin_set_dt(&led1, 1);
     b3c:	f7ff ff48 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b40:	2800      	cmp	r0, #0
     b42:	db0f      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led2, 1);
     b44:	480d      	ldr	r0, [pc, #52]	; (b7c <thread_OUTPUT_code+0x120>)
     b46:	2101      	movs	r1, #1
     b48:	f7ff ff42 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b4c:	2800      	cmp	r0, #0
     b4e:	db09      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led3, 1);
     b50:	480b      	ldr	r0, [pc, #44]	; (b80 <thread_OUTPUT_code+0x124>)
     b52:	2101      	movs	r1, #1
     b54:	f7ff ff3c 	bl	9d0 <gpio_pin_set_dt>
			if (ret < 0) {
     b58:	2800      	cmp	r0, #0
     b5a:	db03      	blt.n	b64 <thread_OUTPUT_code+0x108>
			ret = gpio_pin_set_dt(&led4, 1);
     b5c:	2101      	movs	r1, #1
     b5e:	e7b4      	b.n	aca <thread_OUTPUT_code+0x6e>
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
     b60:	b29f      	uxth	r7, r3
     b62:	e7bf      	b.n	ae4 <thread_OUTPUT_code+0x88>
		
  	}
}
     b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b68:	20000550 	.word	0x20000550
     b6c:	0000a277 	.word	0x0000a277
     b70:	20000e98 	.word	0x20000e98
     b74:	0000a28f 	.word	0x0000a28f
     b78:	00009d68 	.word	0x00009d68
     b7c:	00009d60 	.word	0x00009d60
     b80:	00009d58 	.word	0x00009d58
     b84:	00009d50 	.word	0x00009d50
     b88:	0000a2af 	.word	0x0000a2af
     b8c:	0000a2b9 	.word	0x0000a2b9

00000b90 <thread_SENSOR_code>:
{
     b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if(test_flag){
     b94:	4e3e      	ldr	r6, [pc, #248]	; (c90 <thread_SENSOR_code+0x100>)
		printk("Thread SENSOR released\n");
     b96:	4f3f      	ldr	r7, [pc, #252]	; (c94 <thread_SENSOR_code+0x104>)
{
     b98:	b088      	sub	sp, #32
	uint16_t wc_exec_time = 10000;
     b9a:	f242 7510 	movw	r5, #10000	; 0x2710
		if(test_flag){
     b9e:	7833      	ldrb	r3, [r6, #0]
     ba0:	b3a3      	cbz	r3, c0c <thread_SENSOR_code+0x7c>
	z_impl_k_timer_start(timer, duration, period);
     ba2:	2200      	movs	r2, #0
     ba4:	2300      	movs	r3, #0
     ba6:	e9cd 2300 	strd	r2, r3, [sp]
     baa:	483b      	ldr	r0, [pc, #236]	; (c98 <thread_SENSOR_code+0x108>)
	return z_impl_k_timer_status_get(timer);
     bac:	4c3a      	ldr	r4, [pc, #232]	; (c98 <thread_SENSOR_code+0x108>)
	z_impl_k_timer_start(timer, duration, period);
     bae:	f44f 3220 	mov.w	r2, #163840	; 0x28000
     bb2:	2300      	movs	r3, #0
     bb4:	f007 fec4 	bl	8940 <z_impl_k_timer_start>
	return z_impl_k_timer_status_get(timer);
     bb8:	4620      	mov	r0, r4
     bba:	f007 ff0d 	bl	89d8 <z_impl_k_timer_status_get>
			while(k_timer_status_get(&my_timer) <= 0){
     bbe:	b110      	cbz	r0, bc6 <thread_SENSOR_code+0x36>
			test_flag = 0;
     bc0:	2300      	movs	r3, #0
     bc2:	7033      	strb	r3, [r6, #0]
     bc4:	e7eb      	b.n	b9e <thread_SENSOR_code+0xe>
				if(k_uptime_get() % 500 == 0){
     bc6:	f008 f962 	bl	8e8e <k_uptime_get>
     bca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     bce:	2300      	movs	r3, #0
     bd0:	f7ff fc78 	bl	4c4 <__aeabi_ldivmod>
     bd4:	431a      	orrs	r2, r3
     bd6:	d1ef      	bne.n	bb8 <thread_SENSOR_code+0x28>
					printk("BLINK\n");
     bd8:	4830      	ldr	r0, [pc, #192]	; (c9c <thread_SENSOR_code+0x10c>)
     bda:	f008 f9a8 	bl	8f2e <printk>
					err = gpio_pin_toggle_dt(&led1);
     bde:	4830      	ldr	r0, [pc, #192]	; (ca0 <thread_SENSOR_code+0x110>)
     be0:	f7ff fece 	bl	980 <gpio_pin_toggle_dt>
					if (err < 0) {
     be4:	2800      	cmp	r0, #0
     be6:	db0e      	blt.n	c06 <thread_SENSOR_code+0x76>
					err = gpio_pin_toggle_dt(&led2);
     be8:	482e      	ldr	r0, [pc, #184]	; (ca4 <thread_SENSOR_code+0x114>)
     bea:	f7ff fec9 	bl	980 <gpio_pin_toggle_dt>
					if (err < 0) {
     bee:	2800      	cmp	r0, #0
     bf0:	db09      	blt.n	c06 <thread_SENSOR_code+0x76>
					err = gpio_pin_toggle_dt(&led3);
     bf2:	482d      	ldr	r0, [pc, #180]	; (ca8 <thread_SENSOR_code+0x118>)
     bf4:	f7ff fec4 	bl	980 <gpio_pin_toggle_dt>
					if (err < 0) {
     bf8:	2800      	cmp	r0, #0
     bfa:	db04      	blt.n	c06 <thread_SENSOR_code+0x76>
					err = gpio_pin_toggle_dt(&led4);
     bfc:	482b      	ldr	r0, [pc, #172]	; (cac <thread_SENSOR_code+0x11c>)
     bfe:	f7ff febf 	bl	980 <gpio_pin_toggle_dt>
					if (err < 0) {
     c02:	2800      	cmp	r0, #0
     c04:	dad8      	bge.n	bb8 <thread_SENSOR_code+0x28>
}
     c06:	b008      	add	sp, #32
     c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		start = k_uptime_get(); /* start calculating exec times */
     c0c:	f008 f93f 	bl	8e8e <k_uptime_get>
     c10:	fa1f f880 	uxth.w	r8, r0
		printk("Thread SENSOR released\n");
     c14:	4638      	mov	r0, r7
     c16:	f008 f98a 	bl	8f2e <printk>
		NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     c1a:	4b25      	ldr	r3, [pc, #148]	; (cb0 <thread_SENSOR_code+0x120>)
     c1c:	2201      	movs	r2, #1
     c1e:	60da      	str	r2, [r3, #12]
	const struct adc_sequence sequence = {
     c20:	4b24      	ldr	r3, [pc, #144]	; (cb4 <thread_SENSOR_code+0x124>)
     c22:	9303      	str	r3, [sp, #12]
     c24:	2302      	movs	r3, #2
     c26:	9304      	str	r3, [sp, #16]
     c28:	4b23      	ldr	r3, [pc, #140]	; (cb8 <thread_SENSOR_code+0x128>)
     c2a:	9305      	str	r3, [sp, #20]
     c2c:	2214      	movs	r2, #20
     c2e:	230a      	movs	r3, #10
     c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if (adc_dev == NULL) {
     c34:	4b21      	ldr	r3, [pc, #132]	; (cbc <thread_SENSOR_code+0x12c>)
     c36:	6818      	ldr	r0, [r3, #0]
     c38:	b9e8      	cbnz	r0, c76 <thread_SENSOR_code+0xe6>
            printk("adc_sample(): error, must bind to adc first \n\r");
     c3a:	4821      	ldr	r0, [pc, #132]	; (cc0 <thread_SENSOR_code+0x130>)
     c3c:	f008 f977 	bl	8f2e <printk>
            return -1;
     c40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			printk("adc_sample() failed with error code %d\n\r",err);
     c44:	481f      	ldr	r0, [pc, #124]	; (cc4 <thread_SENSOR_code+0x134>)
     c46:	4621      	mov	r1, r4
     c48:	f008 f971 	bl	8f2e <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     c4c:	481e      	ldr	r0, [pc, #120]	; (cc8 <thread_SENSOR_code+0x138>)
     c4e:	f006 f88d 	bl	6d6c <z_impl_k_sem_give>
		end = k_uptime_get();
     c52:	f008 f91c 	bl	8e8e <k_uptime_get>
     c56:	b280      	uxth	r0, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
     c58:	eba0 0008 	sub.w	r0, r0, r8
     c5c:	4285      	cmp	r5, r0
     c5e:	bfc8      	it	gt
     c60:	b285      	uxthgt	r5, r0
		printk("Ci : %4u\n", wc_exec_time);
     c62:	4629      	mov	r1, r5
     c64:	4819      	ldr	r0, [pc, #100]	; (ccc <thread_SENSOR_code+0x13c>)
     c66:	f008 f962 	bl	8f2e <printk>
	return z_impl_k_sleep(timeout);
     c6a:	2100      	movs	r1, #0
     c6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     c70:	f007 f99c 	bl	7fac <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     c74:	e793      	b.n	b9e <thread_SENSOR_code+0xe>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     c76:	6883      	ldr	r3, [r0, #8]
     c78:	a903      	add	r1, sp, #12
     c7a:	685b      	ldr	r3, [r3, #4]
     c7c:	4798      	blx	r3
	if (ret) {
     c7e:	4604      	mov	r4, r0
     c80:	2800      	cmp	r0, #0
     c82:	d0e3      	beq.n	c4c <thread_SENSOR_code+0xbc>
            printk("adc_read() failed with code %d\n", ret);
     c84:	4601      	mov	r1, r0
     c86:	4812      	ldr	r0, [pc, #72]	; (cd0 <thread_SENSOR_code+0x140>)
     c88:	f008 f951 	bl	8f2e <printk>
		if(err) {
     c8c:	e7da      	b.n	c44 <thread_SENSOR_code+0xb4>
     c8e:	bf00      	nop
     c90:	20000eae 	.word	0x20000eae
     c94:	0000a2cf 	.word	0x0000a2cf
     c98:	20000260 	.word	0x20000260
     c9c:	0000a2c8 	.word	0x0000a2c8
     ca0:	00009d68 	.word	0x00009d68
     ca4:	00009d60 	.word	0x00009d60
     ca8:	00009d58 	.word	0x00009d58
     cac:	00009d50 	.word	0x00009d50
     cb0:	40007000 	.word	0x40007000
     cb4:	00009d70 	.word	0x00009d70
     cb8:	20000e9a 	.word	0x20000e9a
     cbc:	2000054c 	.word	0x2000054c
     cc0:	0000a2e7 	.word	0x0000a2e7
     cc4:	0000a336 	.word	0x0000a336
     cc8:	20000560 	.word	0x20000560
     ccc:	0000a2af 	.word	0x0000a2af
     cd0:	0000a316 	.word	0x0000a316

00000cd4 <main>:
{
     cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd6:	b08d      	sub	sp, #52	; 0x34
	int arg1=0, arg2=0, arg3=0; // Input args of tasks (actually not used in this case)
     cd8:	2300      	movs	r3, #0
     cda:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
     cde:	930b      	str	r3, [sp, #44]	; 0x2c
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     ce0:	4c65      	ldr	r4, [pc, #404]	; (e78 <main+0x1a4>)
     ce2:	4620      	mov	r0, r4
     ce4:	f008 fde3 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(button.port)) {
     ce8:	b928      	cbnz	r0, cf6 <main+0x22>
		printk("Error: button device %s is not ready\n",
     cea:	6821      	ldr	r1, [r4, #0]
     cec:	4863      	ldr	r0, [pc, #396]	; (e7c <main+0x1a8>)
     cee:	f008 f91e 	bl	8f2e <printk>
}
     cf2:	b00d      	add	sp, #52	; 0x34
     cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_INT_DEBOUNCE );
     cf6:	4962      	ldr	r1, [pc, #392]	; (e80 <main+0x1ac>)
     cf8:	4862      	ldr	r0, [pc, #392]	; (e84 <main+0x1b0>)
     cfa:	f7ff fda3 	bl	844 <gpio_pin_configure_dt>
	if (err < 0) {
     cfe:	2800      	cmp	r0, #0
     d00:	dbf7      	blt.n	cf2 <main+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d02:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
     d04:	68a5      	ldr	r5, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d06:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     d08:	6926      	ldr	r6, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     d0a:	051b      	lsls	r3, r3, #20
     d0c:	d40e      	bmi.n	d2c <main+0x58>
     d0e:	495e      	ldr	r1, [pc, #376]	; (e88 <main+0x1b4>)
     d10:	4a5e      	ldr	r2, [pc, #376]	; (e8c <main+0x1b8>)
     d12:	485f      	ldr	r0, [pc, #380]	; (e90 <main+0x1bc>)
     d14:	f240 2375 	movw	r3, #629	; 0x275
     d18:	f008 fa05 	bl	9126 <assert_print>
     d1c:	485d      	ldr	r0, [pc, #372]	; (e94 <main+0x1c0>)
     d1e:	f008 fa02 	bl	9126 <assert_print>
     d22:	485a      	ldr	r0, [pc, #360]	; (e8c <main+0x1b8>)
     d24:	f240 2175 	movw	r1, #629	; 0x275
     d28:	f008 f9f6 	bl	9118 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     d2c:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     d2e:	69ac      	ldr	r4, [r5, #24]
     d30:	4851      	ldr	r0, [pc, #324]	; (e78 <main+0x1a4>)
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     d32:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
     d36:	bf14      	ite	ne
     d38:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     d3c:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     d40:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     d44:	210b      	movs	r1, #11
     d46:	47a0      	blx	r4
	if (err < 0) {
     d48:	2800      	cmp	r0, #0
     d4a:	dbd2      	blt.n	cf2 <main+0x1e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     d4c:	4952      	ldr	r1, [pc, #328]	; (e98 <main+0x1c4>)
     d4e:	4b53      	ldr	r3, [pc, #332]	; (e9c <main+0x1c8>)
     d50:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
     d56:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     d58:	69eb      	ldr	r3, [r5, #28]
     d5a:	b113      	cbz	r3, d62 <main+0x8e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     d5c:	4846      	ldr	r0, [pc, #280]	; (e78 <main+0x1a4>)
     d5e:	2201      	movs	r2, #1
     d60:	4798      	blx	r3
	k_timer_init(&my_timer, NULL, NULL);
     d62:	2200      	movs	r2, #0
     d64:	484e      	ldr	r0, [pc, #312]	; (ea0 <main+0x1cc>)
     d66:	4611      	mov	r1, r2
     d68:	f008 fe25 	bl	99b6 <k_timer_init>
     d6c:	4842      	ldr	r0, [pc, #264]	; (e78 <main+0x1a4>)
     d6e:	f008 fd9e 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(led1.port)) {
     d72:	2800      	cmp	r0, #0
     d74:	d0bd      	beq.n	cf2 <main+0x1e>
     d76:	4840      	ldr	r0, [pc, #256]	; (e78 <main+0x1a4>)
     d78:	f008 fd99 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(led2.port)) {
     d7c:	2800      	cmp	r0, #0
     d7e:	d0b8      	beq.n	cf2 <main+0x1e>
     d80:	483d      	ldr	r0, [pc, #244]	; (e78 <main+0x1a4>)
     d82:	f008 fd94 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(led3.port)) {
     d86:	2800      	cmp	r0, #0
     d88:	d0b3      	beq.n	cf2 <main+0x1e>
     d8a:	483b      	ldr	r0, [pc, #236]	; (e78 <main+0x1a4>)
     d8c:	f008 fd8f 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(led4.port)) {
     d90:	2800      	cmp	r0, #0
     d92:	d0ae      	beq.n	cf2 <main+0x1e>
	err = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     d94:	4843      	ldr	r0, [pc, #268]	; (ea4 <main+0x1d0>)
     d96:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     d9a:	f7ff fd53 	bl	844 <gpio_pin_configure_dt>
	if (err < 0) {
     d9e:	2800      	cmp	r0, #0
     da0:	dba7      	blt.n	cf2 <main+0x1e>
	err = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     da2:	4841      	ldr	r0, [pc, #260]	; (ea8 <main+0x1d4>)
     da4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     da8:	f7ff fd4c 	bl	844 <gpio_pin_configure_dt>
	if (err < 0) {
     dac:	2800      	cmp	r0, #0
     dae:	dba0      	blt.n	cf2 <main+0x1e>
	err = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_ACTIVE);
     db0:	483e      	ldr	r0, [pc, #248]	; (eac <main+0x1d8>)
     db2:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     db6:	f7ff fd45 	bl	844 <gpio_pin_configure_dt>
	if (err < 0) {
     dba:	2800      	cmp	r0, #0
     dbc:	db99      	blt.n	cf2 <main+0x1e>
	err = gpio_pin_configure_dt(&led4, GPIO_OUTPUT_ACTIVE);
     dbe:	483c      	ldr	r0, [pc, #240]	; (eb0 <main+0x1dc>)
     dc0:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     dc4:	f7ff fd3e 	bl	844 <gpio_pin_configure_dt>
	if (err < 0) {
     dc8:	2800      	cmp	r0, #0
     dca:	db92      	blt.n	cf2 <main+0x1e>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     dcc:	4839      	ldr	r0, [pc, #228]	; (eb4 <main+0x1e0>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     dce:	4c3a      	ldr	r4, [pc, #232]	; (eb8 <main+0x1e4>)
     dd0:	f005 f9fe 	bl	61d0 <z_impl_device_get_binding>
     dd4:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     dd6:	b910      	cbnz	r0, dde <main+0x10a>
        printk("ADC device_get_binding() failed\n");
     dd8:	4838      	ldr	r0, [pc, #224]	; (ebc <main+0x1e8>)
     dda:	f008 f8a8 	bl	8f2e <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     dde:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     de0:	6883      	ldr	r3, [r0, #8]
     de2:	4937      	ldr	r1, [pc, #220]	; (ec0 <main+0x1ec>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	4798      	blx	r3
    if (err) {
     de8:	4601      	mov	r1, r0
     dea:	b110      	cbz	r0, df2 <main+0x11e>
        printk("adc_channel_setup() failed with error code %d\n", err);
     dec:	4835      	ldr	r0, [pc, #212]	; (ec4 <main+0x1f0>)
     dee:	f008 f89e 	bl	8f2e <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
     df2:	2201      	movs	r2, #1
     df4:	2100      	movs	r1, #0
     df6:	4834      	ldr	r0, [pc, #208]	; (ec8 <main+0x1f4>)
     df8:	f008 fdb1 	bl	995e <z_impl_k_sem_init>
     dfc:	2201      	movs	r2, #1
     dfe:	2100      	movs	r1, #0
     e00:	4832      	ldr	r0, [pc, #200]	; (ecc <main+0x1f8>)
     e02:	f008 fdac 	bl	995e <z_impl_k_sem_init>
    thread_SENSOR_tid = k_thread_create(&thread_SENSOR_data, thread_SENSOR_stack,
     e06:	2600      	movs	r6, #0
     e08:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     e0a:	ab0b      	add	r3, sp, #44	; 0x2c
     e0c:	9302      	str	r3, [sp, #8]
     e0e:	ab0a      	add	r3, sp, #40	; 0x28
     e10:	9301      	str	r3, [sp, #4]
     e12:	2501      	movs	r5, #1
     e14:	ab09      	add	r3, sp, #36	; 0x24
     e16:	2400      	movs	r4, #0
     e18:	9300      	str	r3, [sp, #0]
     e1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     e1e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     e22:	4b2b      	ldr	r3, [pc, #172]	; (ed0 <main+0x1fc>)
     e24:	492b      	ldr	r1, [pc, #172]	; (ed4 <main+0x200>)
     e26:	482c      	ldr	r0, [pc, #176]	; (ed8 <main+0x204>)
     e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e2c:	f005 fcb0 	bl	6790 <z_impl_k_thread_create>
     e30:	4b2a      	ldr	r3, [pc, #168]	; (edc <main+0x208>)
     e32:	6018      	str	r0, [r3, #0]
     e34:	4b2a      	ldr	r3, [pc, #168]	; (ee0 <main+0x20c>)
     e36:	492b      	ldr	r1, [pc, #172]	; (ee4 <main+0x210>)
     e38:	9400      	str	r4, [sp, #0]
     e3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     e3e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     e42:	e9cd 4401 	strd	r4, r4, [sp, #4]
     e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e4a:	4827      	ldr	r0, [pc, #156]	; (ee8 <main+0x214>)
     e4c:	f005 fca0 	bl	6790 <z_impl_k_thread_create>
    thread_FILTER_tid = k_thread_create(&thread_FILTER_data, thread_FILTER_stack,
     e50:	4b26      	ldr	r3, [pc, #152]	; (eec <main+0x218>)
     e52:	6018      	str	r0, [r3, #0]
     e54:	4b26      	ldr	r3, [pc, #152]	; (ef0 <main+0x21c>)
     e56:	4927      	ldr	r1, [pc, #156]	; (ef4 <main+0x220>)
     e58:	4827      	ldr	r0, [pc, #156]	; (ef8 <main+0x224>)
     e5a:	9400      	str	r4, [sp, #0]
     e5c:	e9cd 6706 	strd	r6, r7, [sp, #24]
     e60:	e9cd 5403 	strd	r5, r4, [sp, #12]
     e64:	e9cd 4401 	strd	r4, r4, [sp, #4]
     e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
     e6c:	f005 fc90 	bl	6790 <z_impl_k_thread_create>
    thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
     e70:	4b22      	ldr	r3, [pc, #136]	; (efc <main+0x228>)
     e72:	6018      	str	r0, [r3, #0]
    return;
     e74:	e73d      	b.n	cf2 <main+0x1e>
     e76:	bf00      	nop
     e78:	00009acc 	.word	0x00009acc
     e7c:	0000a35f 	.word	0x0000a35f
     e80:	00010100 	.word	0x00010100
     e84:	00009d48 	.word	0x00009d48
     e88:	0000a227 	.word	0x0000a227
     e8c:	0000a028 	.word	0x0000a028
     e90:	0000a092 	.word	0x0000a092
     e94:	0000a265 	.word	0x0000a265
     e98:	20000540 	.word	0x20000540
     e9c:	00000839 	.word	0x00000839
     ea0:	20000260 	.word	0x20000260
     ea4:	00009d68 	.word	0x00009d68
     ea8:	00009d60 	.word	0x00009d60
     eac:	00009d58 	.word	0x00009d58
     eb0:	00009d50 	.word	0x00009d50
     eb4:	0000a385 	.word	0x0000a385
     eb8:	2000054c 	.word	0x2000054c
     ebc:	0000a38b 	.word	0x0000a38b
     ec0:	0000a020 	.word	0x0000a020
     ec4:	0000a3ac 	.word	0x0000a3ac
     ec8:	20000560 	.word	0x20000560
     ecc:	20000550 	.word	0x20000550
     ed0:	00000b91 	.word	0x00000b91
     ed4:	20001b20 	.word	0x20001b20
     ed8:	20000398 	.word	0x20000398
     edc:	20000578 	.word	0x20000578
     ee0:	00000f45 	.word	0x00000f45
     ee4:	20001700 	.word	0x20001700
     ee8:	20000318 	.word	0x20000318
     eec:	20000574 	.word	0x20000574
     ef0:	00000a5d 	.word	0x00000a5d
     ef4:	200012e0 	.word	0x200012e0
     ef8:	20000298 	.word	0x20000298
     efc:	20000570 	.word	0x20000570

00000f00 <filter>:

void filter(uint16_t *arr){
     f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t sum = 0;
	uint16_t v;
	for (int i = 1; i < N_SAMPLES + 1; i++){
		v = (uint16_t)(10*arr[i]*((float)3/1023));
     f04:	f8df 8034 	ldr.w	r8, [pc, #52]	; f3c <filter+0x3c>
void filter(uint16_t *arr){
     f08:	4605      	mov	r5, r0
     f0a:	f100 0714 	add.w	r7, r0, #20
	uint16_t sum = 0;
     f0e:	2400      	movs	r4, #0
		v = (uint16_t)(10*arr[i]*((float)3/1023));
     f10:	260a      	movs	r6, #10
     f12:	f835 0f02 	ldrh.w	r0, [r5, #2]!
     f16:	4370      	muls	r0, r6
     f18:	f7ff fa60 	bl	3dc <__aeabi_i2f>
     f1c:	4641      	mov	r1, r8
     f1e:	f7ff f8ef 	bl	100 <__aeabi_fmul>
     f22:	f7ff faaf 	bl	484 <__aeabi_f2uiz>
	for (int i = 1; i < N_SAMPLES + 1; i++){
     f26:	42af      	cmp	r7, r5
		if(v != 0){
			sum += v;
     f28:	4404      	add	r4, r0
     f2a:	b2a4      	uxth	r4, r4
	for (int i = 1; i < N_SAMPLES + 1; i++){
     f2c:	d1f1      	bne.n	f12 <filter+0x12>
		}
	}
	uint16_t avg=(uint16_t)sum/N_SAMPLES;
	distance = avg;
     f2e:	4b04      	ldr	r3, [pc, #16]	; (f40 <filter+0x40>)
	uint16_t avg=(uint16_t)sum/N_SAMPLES;
     f30:	fbb4 f4f6 	udiv	r4, r4, r6
	distance = avg;
     f34:	801c      	strh	r4, [r3, #0]
     f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f3a:	bf00      	nop
     f3c:	3b40300c 	.word	0x3b40300c
     f40:	20000e98 	.word	0x20000e98

00000f44 <thread_FILTER_code>:
{	
     f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t min_iat = 10000;
     f48:	f242 7610 	movw	r6, #10000	; 0x2710
					printk("Sensor %d :%4u m \n\r", i, (uint16_t)(10*adc_sample_buffer[i]*((float)3/1023)));
     f4c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; ff0 <thread_FILTER_code+0xac>
	uint16_t last = 5000; 
     f50:	f241 3788 	movw	r7, #5000	; 0x1388
	uint16_t wc_exec_time = 10000;
     f54:	46b0      	mov	r8, r6
	return z_impl_k_sem_take(sem, timeout);
     f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f5e:	4825      	ldr	r0, [pc, #148]	; (ff4 <thread_FILTER_code+0xb0>)
     f60:	f8df a094 	ldr.w	sl, [pc, #148]	; ff8 <thread_FILTER_code+0xb4>
     f64:	f005 ff40 	bl	6de8 <z_impl_k_sem_take>
		start = k_uptime_get(); /* start calculating exec times */
     f68:	f007 ff91 	bl	8e8e <k_uptime_get>
     f6c:	b284      	uxth	r4, r0
		printk("Thread FILTER released\n");
     f6e:	4823      	ldr	r0, [pc, #140]	; (ffc <thread_FILTER_code+0xb8>)
     f70:	f007 ffdd 	bl	8f2e <printk>
		for(int i = 1; i < BUFFER_SIZE ; i++){
     f74:	2501      	movs	r5, #1
				if(adc_sample_buffer[i] > 1023) {
     f76:	f83a 2f02 	ldrh.w	r2, [sl, #2]!
     f7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
     f7e:	46ab      	mov	fp, r5
					printk("Sensor reading %d out of range: %d\n\r", i+1, (uint16_t)adc_sample_buffer[i]);
     f80:	f105 0501 	add.w	r5, r5, #1
				if(adc_sample_buffer[i] > 1023) {
     f84:	d324      	bcc.n	fd0 <thread_FILTER_code+0x8c>
					printk("Sensor reading %d out of range: %d\n\r", i+1, (uint16_t)adc_sample_buffer[i]);
     f86:	481e      	ldr	r0, [pc, #120]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f88:	4629      	mov	r1, r5
     f8a:	f007 ffd0 	bl	8f2e <printk>
					adc_sample_buffer[i] = 0;
     f8e:	2200      	movs	r2, #0
     f90:	f8aa 2000 	strh.w	r2, [sl]
		for(int i = 1; i < BUFFER_SIZE ; i++){
     f94:	2d0a      	cmp	r5, #10
     f96:	d1ee      	bne.n	f76 <thread_FILTER_code+0x32>
		filter(adc_sample_buffer);
     f98:	4817      	ldr	r0, [pc, #92]	; (ff8 <thread_FILTER_code+0xb4>)
     f9a:	f7ff ffb1 	bl	f00 <filter>
	z_impl_k_sem_give(sem);
     f9e:	4819      	ldr	r0, [pc, #100]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fa0:	f005 fee4 	bl	6d6c <z_impl_k_sem_give>
		end = k_uptime_get();
     fa4:	f007 ff73 	bl	8e8e <k_uptime_get>
     fa8:	b285      	uxth	r5, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
     faa:	1b2b      	subs	r3, r5, r4
     fac:	4598      	cmp	r8, r3
     fae:	bfc8      	it	gt
     fb0:	fa1f f883 	uxthgt.w	r8, r3
		if(min_iat > last) min_iat = start - last;
     fb4:	42b7      	cmp	r7, r6
     fb6:	bf3c      	itt	cc
     fb8:	1be4      	subcc	r4, r4, r7
     fba:	b2a6      	uxthcc	r6, r4
		printk("Ci : %4u\n", wc_exec_time);
     fbc:	4812      	ldr	r0, [pc, #72]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fbe:	4641      	mov	r1, r8
     fc0:	f007 ffb5 	bl	8f2e <printk>
		printk("MIN_IAT : %4u\n", min_iat);
     fc4:	4811      	ldr	r0, [pc, #68]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fc6:	4631      	mov	r1, r6
     fc8:	f007 ffb1 	bl	8f2e <printk>
		last = end;
     fcc:	462f      	mov	r7, r5
    while(1) {
     fce:	e7c2      	b.n	f56 <thread_FILTER_code+0x12>
					printk("Sensor %d :%4u m \n\r", i, (uint16_t)(10*adc_sample_buffer[i]*((float)3/1023)));
     fd0:	200a      	movs	r0, #10
     fd2:	4350      	muls	r0, r2
     fd4:	f7ff fa02 	bl	3dc <__aeabi_i2f>
     fd8:	4649      	mov	r1, r9
     fda:	f7ff f891 	bl	100 <__aeabi_fmul>
     fde:	f7ff fa51 	bl	484 <__aeabi_f2uiz>
     fe2:	4659      	mov	r1, fp
     fe4:	b282      	uxth	r2, r0
     fe6:	480a      	ldr	r0, [pc, #40]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fe8:	f007 ffa1 	bl	8f2e <printk>
     fec:	e7d2      	b.n	f94 <thread_FILTER_code+0x50>
     fee:	bf00      	nop
     ff0:	3b40300c 	.word	0x3b40300c
     ff4:	20000560 	.word	0x20000560
     ff8:	20000e9a 	.word	0x20000e9a
     ffc:	0000a3db 	.word	0x0000a3db
    1000:	0000a3f3 	.word	0x0000a3f3
    1004:	20000550 	.word	0x20000550
    1008:	0000a2af 	.word	0x0000a2af
    100c:	0000a2b9 	.word	0x0000a2b9
    1010:	0000a418 	.word	0x0000a418

00001014 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1018:	b08d      	sub	sp, #52	; 0x34
    101a:	461f      	mov	r7, r3
    101c:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    101e:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1022:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1026:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1028:	1c53      	adds	r3, r2, #1
    102a:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    102c:	0783      	lsls	r3, r0, #30
    102e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    1032:	4605      	mov	r5, r0
    1034:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    1036:	f040 8228 	bne.w	148a <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    103a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    103c:	b130      	cbz	r0, 104c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    103e:	2907      	cmp	r1, #7
    1040:	d809      	bhi.n	1056 <cbvprintf_package+0x42>
		return -ENOSPC;
    1042:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1046:	b00d      	add	sp, #52	; 0x34
    1048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    104c:	f001 0607 	and.w	r6, r1, #7
    1050:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1052:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1056:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    105a:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    105e:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1060:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1064:	4652      	mov	r2, sl
	bool parsing = false;
    1066:	4651      	mov	r1, sl
	size = sizeof(char *);
    1068:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    106a:	b105      	cbz	r5, 106e <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    106c:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    106e:	9804      	ldr	r0, [sp, #16]
    1070:	2800      	cmp	r0, #0
    1072:	f300 812a 	bgt.w	12ca <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1076:	48bc      	ldr	r0, [pc, #752]	; (1368 <cbvprintf_package+0x354>)
    1078:	4287      	cmp	r7, r0
    107a:	d303      	bcc.n	1084 <cbvprintf_package+0x70>
    107c:	48bb      	ldr	r0, [pc, #748]	; (136c <cbvprintf_package+0x358>)
    107e:	4287      	cmp	r7, r0
    1080:	f0c0 8123 	bcc.w	12ca <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1084:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1088:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    108c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1090:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1094:	f000 8137 	beq.w	1306 <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1098:	f04f 0c00 	mov.w	ip, #0
    109c:	e11e      	b.n	12dc <cbvprintf_package+0x2c8>
		if (!parsing) {
    109e:	b931      	cbnz	r1, 10ae <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    10a0:	2825      	cmp	r0, #37	; 0x25
    10a2:	d116      	bne.n	10d2 <cbvprintf_package+0xbe>
				parsing = true;
    10a4:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    10a6:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    10aa:	46cb      	mov	fp, r9
    10ac:	e011      	b.n	10d2 <cbvprintf_package+0xbe>
		switch (*fmt) {
    10ae:	286c      	cmp	r0, #108	; 0x6c
    10b0:	f200 809f 	bhi.w	11f2 <cbvprintf_package+0x1de>
    10b4:	284b      	cmp	r0, #75	; 0x4b
    10b6:	d822      	bhi.n	10fe <cbvprintf_package+0xea>
    10b8:	2847      	cmp	r0, #71	; 0x47
    10ba:	f200 80b1 	bhi.w	1220 <cbvprintf_package+0x20c>
    10be:	2829      	cmp	r0, #41	; 0x29
    10c0:	d86a      	bhi.n	1198 <cbvprintf_package+0x184>
    10c2:	2820      	cmp	r0, #32
    10c4:	d005      	beq.n	10d2 <cbvprintf_package+0xbe>
    10c6:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    10ca:	f1dc 0100 	rsbs	r1, ip, #0
    10ce:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    10d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    10d6:	2800      	cmp	r0, #0
    10d8:	d1e1      	bne.n	109e <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    10da:	1b61      	subs	r1, r4, r5
    10dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    10e0:	f0c0 8173 	bcc.w	13ca <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    10e4:	49a2      	ldr	r1, [pc, #648]	; (1370 <cbvprintf_package+0x35c>)
    10e6:	4aa3      	ldr	r2, [pc, #652]	; (1374 <cbvprintf_package+0x360>)
    10e8:	48a3      	ldr	r0, [pc, #652]	; (1378 <cbvprintf_package+0x364>)
    10ea:	f240 233d 	movw	r3, #573	; 0x23d
    10ee:	f008 f81a 	bl	9126 <assert_print>
    10f2:	48a2      	ldr	r0, [pc, #648]	; (137c <cbvprintf_package+0x368>)
    10f4:	f008 f817 	bl	9126 <assert_print>
    10f8:	f240 213d 	movw	r1, #573	; 0x23d
    10fc:	e0fd      	b.n	12fa <cbvprintf_package+0x2e6>
		switch (*fmt) {
    10fe:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1102:	f1bc 0f20 	cmp.w	ip, #32
    1106:	f200 808b 	bhi.w	1220 <cbvprintf_package+0x20c>
    110a:	f20f 0e08 	addw	lr, pc, #8
    110e:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    1112:	bf00      	nop
    1114:	000010d3 	.word	0x000010d3
    1118:	00001221 	.word	0x00001221
    111c:	00001221 	.word	0x00001221
    1120:	00001221 	.word	0x00001221
    1124:	00001221 	.word	0x00001221
    1128:	00001221 	.word	0x00001221
    112c:	00001221 	.word	0x00001221
    1130:	00001221 	.word	0x00001221
    1134:	00001221 	.word	0x00001221
    1138:	00001221 	.word	0x00001221
    113c:	00001221 	.word	0x00001221
    1140:	00001221 	.word	0x00001221
    1144:	00001225 	.word	0x00001225
    1148:	00001221 	.word	0x00001221
    114c:	00001221 	.word	0x00001221
    1150:	00001221 	.word	0x00001221
    1154:	00001221 	.word	0x00001221
    1158:	00001221 	.word	0x00001221
    115c:	00001221 	.word	0x00001221
    1160:	00001221 	.word	0x00001221
    1164:	00001221 	.word	0x00001221
    1168:	00001241 	.word	0x00001241
    116c:	00001221 	.word	0x00001221
    1170:	00001225 	.word	0x00001225
    1174:	00001225 	.word	0x00001225
    1178:	00001241 	.word	0x00001241
    117c:	00001241 	.word	0x00001241
    1180:	00001241 	.word	0x00001241
    1184:	000010d3 	.word	0x000010d3
    1188:	00001225 	.word	0x00001225
    118c:	00001269 	.word	0x00001269
    1190:	00001221 	.word	0x00001221
    1194:	000010d3 	.word	0x000010d3
    1198:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    119c:	f04f 0e01 	mov.w	lr, #1
    11a0:	fa5f fc8c 	uxtb.w	ip, ip
    11a4:	fa0e fc0c 	lsl.w	ip, lr, ip
    11a8:	f64f 7eda 	movw	lr, #65498	; 0xffda
    11ac:	ea1c 0f0e 	tst.w	ip, lr
    11b0:	d18f      	bne.n	10d2 <cbvprintf_package+0xbe>
    11b2:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    11b6:	d143      	bne.n	1240 <cbvprintf_package+0x22c>
    11b8:	f01c 0101 	ands.w	r1, ip, #1
    11bc:	d089      	beq.n	10d2 <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    11be:	3c01      	subs	r4, #1
    11c0:	444c      	add	r4, r9
    11c2:	f1c9 0c00 	rsb	ip, r9, #0
    11c6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    11ca:	2d00      	cmp	r5, #0
    11cc:	d065      	beq.n	129a <cbvprintf_package+0x286>
    11ce:	ebab 0c05 	sub.w	ip, fp, r5
    11d2:	44a4      	add	ip, r4
    11d4:	45b4      	cmp	ip, r6
    11d6:	f63f af34 	bhi.w	1042 <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    11da:	2873      	cmp	r0, #115	; 0x73
    11dc:	d06f      	beq.n	12be <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    11de:	f1bb 0f04 	cmp.w	fp, #4
    11e2:	d14a      	bne.n	127a <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    11e4:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    11e8:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    11ea:	3404      	adds	r4, #4
    11ec:	f04f 0b04 	mov.w	fp, #4
    11f0:	e76f      	b.n	10d2 <cbvprintf_package+0xbe>
		switch (*fmt) {
    11f2:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    11f6:	fa5f fc8c 	uxtb.w	ip, ip
    11fa:	f1bc 0f0c 	cmp.w	ip, #12
    11fe:	d80f      	bhi.n	1220 <cbvprintf_package+0x20c>
    1200:	f04f 0e01 	mov.w	lr, #1
    1204:	fa0e fc0c 	lsl.w	ip, lr, ip
    1208:	f01c 0f25 	tst.w	ip, #37	; 0x25
    120c:	d12f      	bne.n	126e <cbvprintf_package+0x25a>
    120e:	f240 4e82 	movw	lr, #1154	; 0x482
    1212:	ea1c 0f0e 	tst.w	ip, lr
    1216:	d105      	bne.n	1224 <cbvprintf_package+0x210>
    1218:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    121c:	f47f af43 	bne.w	10a6 <cbvprintf_package+0x92>
			parsing = false;
    1220:	2100      	movs	r1, #0
    1222:	e756      	b.n	10d2 <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    1224:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    1228:	296c      	cmp	r1, #108	; 0x6c
    122a:	d124      	bne.n	1276 <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    122c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1230:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    1232:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    1236:	d11b      	bne.n	1270 <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    1238:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    123c:	46cb      	mov	fp, r9
    123e:	e7be      	b.n	11be <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    1240:	f108 0807 	add.w	r8, r8, #7
    1244:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    1248:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    124a:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    124e:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    1252:	b13d      	cbz	r5, 1264 <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    1254:	f8dd e014 	ldr.w	lr, [sp, #20]
    1258:	44a6      	add	lr, r4
    125a:	45b6      	cmp	lr, r6
    125c:	f63f aef1 	bhi.w	1042 <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    1260:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1264:	3408      	adds	r4, #8
			parsing = false;
    1266:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1268:	f04f 0908 	mov.w	r9, #8
    126c:	e71d      	b.n	10aa <cbvprintf_package+0x96>
			parsing = false;
    126e:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    1270:	f04f 0904 	mov.w	r9, #4
    1274:	e7e2      	b.n	123c <cbvprintf_package+0x228>
			parsing = false;
    1276:	2100      	movs	r1, #0
    1278:	e7a1      	b.n	11be <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    127a:	f1bb 0f08 	cmp.w	fp, #8
    127e:	f040 8096 	bne.w	13ae <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1282:	f108 0807 	add.w	r8, r8, #7
    1286:	f028 0807 	bic.w	r8, r8, #7
    128a:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    128e:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1292:	3408      	adds	r4, #8
    1294:	f04f 0b08 	mov.w	fp, #8
    1298:	e71b      	b.n	10d2 <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    129a:	2873      	cmp	r0, #115	; 0x73
    129c:	d00f      	beq.n	12be <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    129e:	f1bb 0f04 	cmp.w	fp, #4
    12a2:	d102      	bne.n	12aa <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    12a4:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    12a8:	e79f      	b.n	11ea <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    12aa:	f1bb 0f08 	cmp.w	fp, #8
    12ae:	d17e      	bne.n	13ae <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    12b0:	f108 0807 	add.w	r8, r8, #7
    12b4:	f028 0807 	bic.w	r8, r8, #7
    12b8:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    12bc:	e7e9      	b.n	1292 <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12be:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    12c0:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12c4:	3801      	subs	r0, #1
    12c6:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    12c8:	e6cf      	b.n	106a <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    12ca:	9802      	ldr	r0, [sp, #8]
    12cc:	0780      	lsls	r0, r0, #30
    12ce:	d546      	bpl.n	135e <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    12d0:	eba4 0e05 	sub.w	lr, r4, r5
    12d4:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12d8:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    12dc:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    12e0:	d31f      	bcc.n	1322 <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    12e2:	4923      	ldr	r1, [pc, #140]	; (1370 <cbvprintf_package+0x35c>)
    12e4:	4a23      	ldr	r2, [pc, #140]	; (1374 <cbvprintf_package+0x360>)
    12e6:	4824      	ldr	r0, [pc, #144]	; (1378 <cbvprintf_package+0x364>)
    12e8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    12ec:	f007 ff1b 	bl	9126 <assert_print>
    12f0:	4823      	ldr	r0, [pc, #140]	; (1380 <cbvprintf_package+0x36c>)
    12f2:	f007 ff18 	bl	9126 <assert_print>
    12f6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    12fa:	481e      	ldr	r0, [pc, #120]	; (1374 <cbvprintf_package+0x360>)
    12fc:	f007 ff0c 	bl	9118 <assert_post_action>
					return -EINVAL;
    1300:	f06f 0015 	mvn.w	r0, #21
    1304:	e69f      	b.n	1046 <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1306:	2a0f      	cmp	r2, #15
    1308:	d80d      	bhi.n	1326 <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    130a:	2d00      	cmp	r5, #0
    130c:	d03f      	beq.n	138e <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    130e:	b2c0      	uxtb	r0, r0
    1310:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1314:	44ec      	add	ip, sp
    1316:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    131a:	9803      	ldr	r0, [sp, #12]
    131c:	3001      	adds	r0, #1
    131e:	9003      	str	r0, [sp, #12]
    1320:	e01c      	b.n	135c <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1322:	2a0f      	cmp	r2, #15
    1324:	d90c      	bls.n	1340 <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    1326:	4912      	ldr	r1, [pc, #72]	; (1370 <cbvprintf_package+0x35c>)
    1328:	4a12      	ldr	r2, [pc, #72]	; (1374 <cbvprintf_package+0x360>)
    132a:	4813      	ldr	r0, [pc, #76]	; (1378 <cbvprintf_package+0x364>)
    132c:	f240 13f5 	movw	r3, #501	; 0x1f5
    1330:	f007 fef9 	bl	9126 <assert_print>
    1334:	4813      	ldr	r0, [pc, #76]	; (1384 <cbvprintf_package+0x370>)
    1336:	f007 fef6 	bl	9126 <assert_print>
    133a:	f240 11f5 	movw	r1, #501	; 0x1f5
    133e:	e7dc      	b.n	12fa <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    1340:	b315      	cbz	r5, 1388 <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1342:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    1344:	f1bc 0f00 	cmp.w	ip, #0
    1348:	d0e2      	beq.n	1310 <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    134a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    134e:	44ec      	add	ip, sp
    1350:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1354:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    1358:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    135c:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    135e:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    1362:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1364:	9005      	str	r0, [sp, #20]
    1366:	e6b4      	b.n	10d2 <cbvprintf_package+0xbe>
    1368:	00009a24 	.word	0x00009a24
    136c:	0000bc94 	.word	0x0000bc94
    1370:	0000a1ea 	.word	0x0000a1ea
    1374:	0000a42c 	.word	0x0000a42c
    1378:	0000a092 	.word	0x0000a092
    137c:	0000a4aa 	.word	0x0000a4aa
    1380:	0000a45a 	.word	0x0000a45a
    1384:	0000a47b 	.word	0x0000a47b
				} else if (is_ro || rws_pos_en) {
    1388:	f1bc 0f00 	cmp.w	ip, #0
    138c:	d101      	bne.n	1392 <cbvprintf_package+0x37e>
    138e:	9801      	ldr	r0, [sp, #4]
    1390:	b108      	cbz	r0, 1396 <cbvprintf_package+0x382>
					len += 1;
    1392:	3601      	adds	r6, #1
    1394:	e7e2      	b.n	135c <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1396:	4638      	mov	r0, r7
    1398:	e9cd 2106 	strd	r2, r1, [sp, #24]
    139c:	9305      	str	r3, [sp, #20]
    139e:	f007 ff85 	bl	92ac <strlen>
    13a2:	3602      	adds	r6, #2
    13a4:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    13a8:	9b05      	ldr	r3, [sp, #20]
    13aa:	4406      	add	r6, r0
    13ac:	e7d6      	b.n	135c <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    13ae:	4a38      	ldr	r2, [pc, #224]	; (1490 <cbvprintf_package+0x47c>)
    13b0:	4938      	ldr	r1, [pc, #224]	; (1494 <cbvprintf_package+0x480>)
    13b2:	4839      	ldr	r0, [pc, #228]	; (1498 <cbvprintf_package+0x484>)
    13b4:	f240 2331 	movw	r3, #561	; 0x231
    13b8:	f007 feb5 	bl	9126 <assert_print>
    13bc:	4659      	mov	r1, fp
    13be:	4837      	ldr	r0, [pc, #220]	; (149c <cbvprintf_package+0x488>)
    13c0:	f007 feb1 	bl	9126 <assert_print>
    13c4:	f240 2131 	movw	r1, #561	; 0x231
    13c8:	e797      	b.n	12fa <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    13ca:	b91d      	cbnz	r5, 13d4 <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    13cc:	f1a6 0408 	sub.w	r4, r6, #8
    13d0:	1860      	adds	r0, r4, r1
    13d2:	e638      	b.n	1046 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    13d4:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    13d6:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    13da:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    13de:	b90b      	cbnz	r3, 13e4 <cbvprintf_package+0x3d0>
    13e0:	4608      	mov	r0, r1
    13e2:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    13e4:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    13e8:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    13ea:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    13ec:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    13f0:	f1ba 0f00 	cmp.w	sl, #0
    13f4:	d006      	beq.n	1404 <cbvprintf_package+0x3f0>
    13f6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    13f8:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    13fc:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1400:	4562      	cmp	r2, ip
    1402:	d109      	bne.n	1418 <cbvprintf_package+0x404>
    1404:	f10d 0820 	add.w	r8, sp, #32
    1408:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    140c:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    1410:	45c1      	cmp	r9, r8
    1412:	d111      	bne.n	1438 <cbvprintf_package+0x424>
	return BUF_OFFSET;
    1414:	1b60      	subs	r0, r4, r5
    1416:	e616      	b.n	1046 <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1418:	f810 1b01 	ldrb.w	r1, [r0], #1
    141c:	060b      	lsls	r3, r1, #24
    141e:	d508      	bpl.n	1432 <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    1420:	eb04 080e 	add.w	r8, r4, lr
    1424:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1426:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    142a:	f63f ae0a 	bhi.w	1042 <cbvprintf_package+0x2e>
			*buf++ = pos;
    142e:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1432:	f10c 0c01 	add.w	ip, ip, #1
    1436:	e7e3      	b.n	1400 <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1438:	f1ba 0f00 	cmp.w	sl, #0
    143c:	d003      	beq.n	1446 <cbvprintf_package+0x432>
    143e:	f998 2000 	ldrsb.w	r2, [r8]
    1442:	2a00      	cmp	r2, #0
    1444:	db1c      	blt.n	1480 <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    1446:	9b01      	ldr	r3, [sp, #4]
    1448:	b9eb      	cbnz	r3, 1486 <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    144a:	f898 2000 	ldrb.w	r2, [r8]
    144e:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1452:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1456:	4638      	mov	r0, r7
    1458:	f007 ff28 	bl	92ac <strlen>
    145c:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    145e:	eb04 010b 	add.w	r1, r4, fp
    1462:	4411      	add	r1, r2
    1464:	42b1      	cmp	r1, r6
    1466:	f63f adec 	bhi.w	1042 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    146a:	f898 1000 	ldrb.w	r1, [r8]
    146e:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
    1472:	4639      	mov	r1, r7
    1474:	4620      	mov	r0, r4
    1476:	9202      	str	r2, [sp, #8]
    1478:	f007 ff34 	bl	92e4 <memcpy>
		buf += size;
    147c:	9a02      	ldr	r2, [sp, #8]
    147e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1480:	f108 0801 	add.w	r8, r8, #1
    1484:	e7c4      	b.n	1410 <cbvprintf_package+0x3fc>
			size = 0;
    1486:	2200      	movs	r2, #0
    1488:	e7e9      	b.n	145e <cbvprintf_package+0x44a>
		return -EFAULT;
    148a:	f06f 000d 	mvn.w	r0, #13
    148e:	e5da      	b.n	1046 <cbvprintf_package+0x32>
    1490:	0000a42c 	.word	0x0000a42c
    1494:	0000a1ea 	.word	0x0000a1ea
    1498:	0000a092 	.word	0x0000a092
    149c:	0000a495 	.word	0x0000a495

000014a0 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    14a0:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    14a2:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    14a6:	2b03      	cmp	r3, #3
{
    14a8:	b510      	push	{r4, lr}
    14aa:	4604      	mov	r4, r0
	notify->result = res;
    14ac:	6081      	str	r1, [r0, #8]
	switch (method) {
    14ae:	d002      	beq.n	14b6 <sys_notify_finalize+0x16>
    14b0:	b12b      	cbz	r3, 14be <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    14b2:	2000      	movs	r0, #0
    14b4:	e000      	b.n	14b8 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    14b6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    14b8:	2300      	movs	r3, #0
    14ba:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    14bc:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    14be:	4a05      	ldr	r2, [pc, #20]	; (14d4 <sys_notify_finalize+0x34>)
    14c0:	4905      	ldr	r1, [pc, #20]	; (14d8 <sys_notify_finalize+0x38>)
    14c2:	4806      	ldr	r0, [pc, #24]	; (14dc <sys_notify_finalize+0x3c>)
    14c4:	2345      	movs	r3, #69	; 0x45
    14c6:	f007 fe2e 	bl	9126 <assert_print>
    14ca:	4802      	ldr	r0, [pc, #8]	; (14d4 <sys_notify_finalize+0x34>)
    14cc:	2145      	movs	r1, #69	; 0x45
    14ce:	f007 fe23 	bl	9118 <assert_post_action>
    14d2:	e7ee      	b.n	14b2 <sys_notify_finalize+0x12>
    14d4:	0000a4c1 	.word	0x0000a4c1
    14d8:	0000a1ea 	.word	0x0000a1ea
    14dc:	0000a092 	.word	0x0000a092

000014e0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    14e0:	4b01      	ldr	r3, [pc, #4]	; (14e8 <__printk_hook_install+0x8>)
    14e2:	6018      	str	r0, [r3, #0]
}
    14e4:	4770      	bx	lr
    14e6:	bf00      	nop
    14e8:	20000098 	.word	0x20000098

000014ec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    14ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14f0:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    14f2:	072b      	lsls	r3, r5, #28
{
    14f4:	4604      	mov	r4, r0
    14f6:	4691      	mov	r9, r2
	if (processing) {
    14f8:	d469      	bmi.n	15ce <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    14fa:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14fc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1500:	f000 81ee 	beq.w	18e0 <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    1504:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    1506:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    150a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    150c:	f1b8 0f00 	cmp.w	r8, #0
    1510:	da7d      	bge.n	160e <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1512:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1514:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1516:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    151a:	e9c4 2200 	strd	r2, r2, [r4]
    151e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1522:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1524:	8ba3      	ldrh	r3, [r4, #28]
    1526:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    152a:	4555      	cmp	r5, sl
    152c:	f04f 0700 	mov.w	r7, #0
    1530:	f040 81a5 	bne.w	187e <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1534:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    1538:	2e00      	cmp	r6, #0
    153a:	f000 80f2 	beq.w	1722 <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    153e:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    1542:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    1546:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1548:	4658      	mov	r0, fp
    154a:	f005 fa07 	bl	695c <z_spin_unlock_valid>
    154e:	b968      	cbnz	r0, 156c <process_event+0x80>
    1550:	4a93      	ldr	r2, [pc, #588]	; (17a0 <process_event+0x2b4>)
    1552:	4994      	ldr	r1, [pc, #592]	; (17a4 <process_event+0x2b8>)
    1554:	4894      	ldr	r0, [pc, #592]	; (17a8 <process_event+0x2bc>)
    1556:	23b9      	movs	r3, #185	; 0xb9
    1558:	f007 fde5 	bl	9126 <assert_print>
    155c:	4893      	ldr	r0, [pc, #588]	; (17ac <process_event+0x2c0>)
    155e:	4659      	mov	r1, fp
    1560:	f007 fde1 	bl	9126 <assert_print>
    1564:	488e      	ldr	r0, [pc, #568]	; (17a0 <process_event+0x2b4>)
    1566:	21b9      	movs	r1, #185	; 0xb9
    1568:	f007 fdd6 	bl	9118 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    156c:	f389 8811 	msr	BASEPRI, r9
    1570:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    1574:	f1ba 0f00 	cmp.w	sl, #0
    1578:	f040 8188 	bne.w	188c <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    157c:	2e00      	cmp	r6, #0
    157e:	f040 819e 	bne.w	18be <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    1582:	b117      	cbz	r7, 158a <process_event+0x9e>
				transit(mgr, transition_complete);
    1584:	498a      	ldr	r1, [pc, #552]	; (17b0 <process_event+0x2c4>)
    1586:	4620      	mov	r0, r4
    1588:	47b8      	blx	r7
	__asm__ volatile(
    158a:	f04f 0340 	mov.w	r3, #64	; 0x40
    158e:	f3ef 8911 	mrs	r9, BASEPRI
    1592:	f383 8812 	msr	BASEPRI_MAX, r3
    1596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    159a:	4658      	mov	r0, fp
    159c:	f005 f9d0 	bl	6940 <z_spin_lock_valid>
    15a0:	b968      	cbnz	r0, 15be <process_event+0xd2>
    15a2:	4a7f      	ldr	r2, [pc, #508]	; (17a0 <process_event+0x2b4>)
    15a4:	4983      	ldr	r1, [pc, #524]	; (17b4 <process_event+0x2c8>)
    15a6:	4880      	ldr	r0, [pc, #512]	; (17a8 <process_event+0x2bc>)
    15a8:	238e      	movs	r3, #142	; 0x8e
    15aa:	f007 fdbc 	bl	9126 <assert_print>
    15ae:	4882      	ldr	r0, [pc, #520]	; (17b8 <process_event+0x2cc>)
    15b0:	4659      	mov	r1, fp
    15b2:	f007 fdb8 	bl	9126 <assert_print>
    15b6:	487a      	ldr	r0, [pc, #488]	; (17a0 <process_event+0x2b4>)
    15b8:	218e      	movs	r1, #142	; 0x8e
    15ba:	f007 fdad 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    15be:	4658      	mov	r0, fp
    15c0:	f005 f9dc 	bl	697c <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    15c4:	8ba3      	ldrh	r3, [r4, #28]
    15c6:	f023 0308 	bic.w	r3, r3, #8
    15ca:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    15cc:	e05a      	b.n	1684 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    15ce:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    15d0:	bf0c      	ite	eq
    15d2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    15d6:	f045 0520 	orrne.w	r5, r5, #32
    15da:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    15dc:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    15de:	4620      	mov	r0, r4
    15e0:	f005 f9bc 	bl	695c <z_spin_unlock_valid>
    15e4:	b968      	cbnz	r0, 1602 <process_event+0x116>
    15e6:	4a6e      	ldr	r2, [pc, #440]	; (17a0 <process_event+0x2b4>)
    15e8:	496e      	ldr	r1, [pc, #440]	; (17a4 <process_event+0x2b8>)
    15ea:	486f      	ldr	r0, [pc, #444]	; (17a8 <process_event+0x2bc>)
    15ec:	23b9      	movs	r3, #185	; 0xb9
    15ee:	f007 fd9a 	bl	9126 <assert_print>
    15f2:	486e      	ldr	r0, [pc, #440]	; (17ac <process_event+0x2c0>)
    15f4:	4621      	mov	r1, r4
    15f6:	f007 fd96 	bl	9126 <assert_print>
    15fa:	4869      	ldr	r0, [pc, #420]	; (17a0 <process_event+0x2b4>)
    15fc:	21b9      	movs	r1, #185	; 0xb9
    15fe:	f007 fd8b 	bl	9118 <assert_post_action>
	__asm__ volatile(
    1602:	f389 8811 	msr	BASEPRI, r9
    1606:	f3bf 8f6f 	isb	sy
}
    160a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    160e:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1612:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1614:	2901      	cmp	r1, #1
    1616:	d820      	bhi.n	165a <process_event+0x16e>
	list->head = NULL;
    1618:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    161a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    161c:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    161e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1622:	d116      	bne.n	1652 <process_event+0x166>
		*clients = mgr->clients;
    1624:	4632      	mov	r2, r6
    1626:	e003      	b.n	1630 <process_event+0x144>
				mgr->refs += 1U;
    1628:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    162a:	6812      	ldr	r2, [r2, #0]
    162c:	3101      	adds	r1, #1
    162e:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1630:	2a00      	cmp	r2, #0
    1632:	d1f9      	bne.n	1628 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1634:	f023 0307 	bic.w	r3, r3, #7
    1638:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    163c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    163e:	4620      	mov	r0, r4
    1640:	f007 fc82 	bl	8f48 <process_recheck>
    1644:	2800      	cmp	r0, #0
    1646:	f43f af6d 	beq.w	1524 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    164a:	f042 0220 	orr.w	r2, r2, #32
    164e:	83a2      	strh	r2, [r4, #28]
    1650:	e768      	b.n	1524 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1652:	f023 0307 	bic.w	r3, r3, #7
    1656:	b29a      	uxth	r2, r3
}
    1658:	e7f0      	b.n	163c <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    165a:	2a04      	cmp	r2, #4
    165c:	d11e      	bne.n	169c <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    165e:	f023 0307 	bic.w	r3, r3, #7
    1662:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1664:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1666:	4620      	mov	r0, r4
    1668:	f007 fc6e 	bl	8f48 <process_recheck>
    166c:	b110      	cbz	r0, 1674 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    166e:	f042 0220 	orr.w	r2, r2, #32
    1672:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1674:	8ba3      	ldrh	r3, [r4, #28]
    1676:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    167a:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    167c:	4555      	cmp	r5, sl
    167e:	463e      	mov	r6, r7
    1680:	f040 80fd 	bne.w	187e <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1684:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    1688:	f01a 0f10 	tst.w	sl, #16
    168c:	f000 811f 	beq.w	18ce <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1690:	f02a 0310 	bic.w	r3, sl, #16
    1694:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1696:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    169a:	e734      	b.n	1506 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    169c:	4a47      	ldr	r2, [pc, #284]	; (17bc <process_event+0x2d0>)
    169e:	4948      	ldr	r1, [pc, #288]	; (17c0 <process_event+0x2d4>)
    16a0:	4841      	ldr	r0, [pc, #260]	; (17a8 <process_event+0x2bc>)
    16a2:	f240 131b 	movw	r3, #283	; 0x11b
    16a6:	f007 fd3e 	bl	9126 <assert_print>
    16aa:	4844      	ldr	r0, [pc, #272]	; (17bc <process_event+0x2d0>)
    16ac:	f240 111b 	movw	r1, #283	; 0x11b
    16b0:	f007 fd32 	bl	9118 <assert_post_action>
    16b4:	e7de      	b.n	1674 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    16b6:	b15d      	cbz	r5, 16d0 <process_event+0x1e4>
    16b8:	4942      	ldr	r1, [pc, #264]	; (17c4 <process_event+0x2d8>)
    16ba:	483b      	ldr	r0, [pc, #236]	; (17a8 <process_event+0x2bc>)
    16bc:	4a3f      	ldr	r2, [pc, #252]	; (17bc <process_event+0x2d0>)
    16be:	f44f 73ab 	mov.w	r3, #342	; 0x156
    16c2:	f007 fd30 	bl	9126 <assert_print>
    16c6:	483d      	ldr	r0, [pc, #244]	; (17bc <process_event+0x2d0>)
    16c8:	f44f 71ab 	mov.w	r1, #342	; 0x156
    16cc:	f007 fd24 	bl	9118 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    16d0:	6823      	ldr	r3, [r4, #0]
    16d2:	b95b      	cbnz	r3, 16ec <process_event+0x200>
    16d4:	493c      	ldr	r1, [pc, #240]	; (17c8 <process_event+0x2dc>)
    16d6:	4834      	ldr	r0, [pc, #208]	; (17a8 <process_event+0x2bc>)
    16d8:	4a38      	ldr	r2, [pc, #224]	; (17bc <process_event+0x2d0>)
    16da:	f240 1357 	movw	r3, #343	; 0x157
    16de:	f007 fd22 	bl	9126 <assert_print>
    16e2:	4836      	ldr	r0, [pc, #216]	; (17bc <process_event+0x2d0>)
    16e4:	f240 1157 	movw	r1, #343	; 0x157
    16e8:	f007 fd16 	bl	9118 <assert_post_action>
			transit = mgr->transitions->start;
    16ec:	6923      	ldr	r3, [r4, #16]
    16ee:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    16f0:	b95f      	cbnz	r7, 170a <process_event+0x21e>
    16f2:	4936      	ldr	r1, [pc, #216]	; (17cc <process_event+0x2e0>)
    16f4:	482c      	ldr	r0, [pc, #176]	; (17a8 <process_event+0x2bc>)
    16f6:	4a31      	ldr	r2, [pc, #196]	; (17bc <process_event+0x2d0>)
    16f8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    16fc:	f007 fd13 	bl	9126 <assert_print>
    1700:	482e      	ldr	r0, [pc, #184]	; (17bc <process_event+0x2d0>)
    1702:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1706:	f007 fd07 	bl	9118 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    170a:	8ba3      	ldrh	r3, [r4, #28]
    170c:	f023 0307 	bic.w	r3, r3, #7
    1710:	f043 0306 	orr.w	r3, r3, #6
    1714:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1716:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1718:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    171a:	f040 80ad 	bne.w	1878 <process_event+0x38c>
		res = 0;
    171e:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1722:	f04f 0a00 	mov.w	sl, #0
    1726:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    1728:	2f00      	cmp	r7, #0
    172a:	f47f af08 	bne.w	153e <process_event+0x52>
    172e:	e7a9      	b.n	1684 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1730:	2d02      	cmp	r5, #2
    1732:	d00b      	beq.n	174c <process_event+0x260>
    1734:	4926      	ldr	r1, [pc, #152]	; (17d0 <process_event+0x2e4>)
    1736:	481c      	ldr	r0, [pc, #112]	; (17a8 <process_event+0x2bc>)
    1738:	4a20      	ldr	r2, [pc, #128]	; (17bc <process_event+0x2d0>)
    173a:	f240 135d 	movw	r3, #349	; 0x15d
    173e:	f007 fcf2 	bl	9126 <assert_print>
    1742:	481e      	ldr	r0, [pc, #120]	; (17bc <process_event+0x2d0>)
    1744:	f240 115d 	movw	r1, #349	; 0x15d
    1748:	f007 fce6 	bl	9118 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    174c:	8be3      	ldrh	r3, [r4, #30]
    174e:	b15b      	cbz	r3, 1768 <process_event+0x27c>
    1750:	4920      	ldr	r1, [pc, #128]	; (17d4 <process_event+0x2e8>)
    1752:	4815      	ldr	r0, [pc, #84]	; (17a8 <process_event+0x2bc>)
    1754:	4a19      	ldr	r2, [pc, #100]	; (17bc <process_event+0x2d0>)
    1756:	f44f 73af 	mov.w	r3, #350	; 0x15e
    175a:	f007 fce4 	bl	9126 <assert_print>
    175e:	4817      	ldr	r0, [pc, #92]	; (17bc <process_event+0x2d0>)
    1760:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1764:	f007 fcd8 	bl	9118 <assert_post_action>
			transit = mgr->transitions->stop;
    1768:	6923      	ldr	r3, [r4, #16]
    176a:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    176c:	b95f      	cbnz	r7, 1786 <process_event+0x29a>
    176e:	4917      	ldr	r1, [pc, #92]	; (17cc <process_event+0x2e0>)
    1770:	480d      	ldr	r0, [pc, #52]	; (17a8 <process_event+0x2bc>)
    1772:	4a12      	ldr	r2, [pc, #72]	; (17bc <process_event+0x2d0>)
    1774:	f240 1361 	movw	r3, #353	; 0x161
    1778:	f007 fcd5 	bl	9126 <assert_print>
    177c:	480f      	ldr	r0, [pc, #60]	; (17bc <process_event+0x2d0>)
    177e:	f240 1161 	movw	r1, #353	; 0x161
    1782:	f007 fcc9 	bl	9118 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1786:	8ba3      	ldrh	r3, [r4, #28]
    1788:	f023 0307 	bic.w	r3, r3, #7
    178c:	f043 0304 	orr.w	r3, r3, #4
    1790:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1792:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1794:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1796:	d0c2      	beq.n	171e <process_event+0x232>
    1798:	2600      	movs	r6, #0
		res = 0;
    179a:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    179c:	2504      	movs	r5, #4
    179e:	e06e      	b.n	187e <process_event+0x392>
    17a0:	0000a587 	.word	0x0000a587
    17a4:	0000a5b4 	.word	0x0000a5b4
    17a8:	0000a092 	.word	0x0000a092
    17ac:	0000a5cb 	.word	0x0000a5cb
    17b0:	00001925 	.word	0x00001925
    17b4:	0000a5e0 	.word	0x0000a5e0
    17b8:	0000a5f5 	.word	0x0000a5f5
    17bc:	0000a4e4 	.word	0x0000a4e4
    17c0:	0000a1ea 	.word	0x0000a1ea
    17c4:	0000a506 	.word	0x0000a506
    17c8:	0000a512 	.word	0x0000a512
    17cc:	0000a535 	.word	0x0000a535
    17d0:	0000a54c 	.word	0x0000a54c
    17d4:	0000a562 	.word	0x0000a562
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    17d8:	2d01      	cmp	r5, #1
    17da:	d00b      	beq.n	17f4 <process_event+0x308>
    17dc:	494b      	ldr	r1, [pc, #300]	; (190c <process_event+0x420>)
    17de:	484c      	ldr	r0, [pc, #304]	; (1910 <process_event+0x424>)
    17e0:	4a4c      	ldr	r2, [pc, #304]	; (1914 <process_event+0x428>)
    17e2:	f44f 73b2 	mov.w	r3, #356	; 0x164
    17e6:	f007 fc9e 	bl	9126 <assert_print>
    17ea:	484a      	ldr	r0, [pc, #296]	; (1914 <process_event+0x428>)
    17ec:	f44f 71b2 	mov.w	r1, #356	; 0x164
    17f0:	f007 fc92 	bl	9118 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    17f4:	6823      	ldr	r3, [r4, #0]
    17f6:	b95b      	cbnz	r3, 1810 <process_event+0x324>
    17f8:	4947      	ldr	r1, [pc, #284]	; (1918 <process_event+0x42c>)
    17fa:	4845      	ldr	r0, [pc, #276]	; (1910 <process_event+0x424>)
    17fc:	4a45      	ldr	r2, [pc, #276]	; (1914 <process_event+0x428>)
    17fe:	f240 1365 	movw	r3, #357	; 0x165
    1802:	f007 fc90 	bl	9126 <assert_print>
    1806:	4843      	ldr	r0, [pc, #268]	; (1914 <process_event+0x428>)
    1808:	f240 1165 	movw	r1, #357	; 0x165
    180c:	f007 fc84 	bl	9118 <assert_post_action>
			transit = mgr->transitions->reset;
    1810:	6923      	ldr	r3, [r4, #16]
    1812:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1814:	b95f      	cbnz	r7, 182e <process_event+0x342>
    1816:	4941      	ldr	r1, [pc, #260]	; (191c <process_event+0x430>)
    1818:	483d      	ldr	r0, [pc, #244]	; (1910 <process_event+0x424>)
    181a:	4a3e      	ldr	r2, [pc, #248]	; (1914 <process_event+0x428>)
    181c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1820:	f007 fc81 	bl	9126 <assert_print>
    1824:	483b      	ldr	r0, [pc, #236]	; (1914 <process_event+0x428>)
    1826:	f44f 71b4 	mov.w	r1, #360	; 0x168
    182a:	f007 fc75 	bl	9118 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    182e:	8ba3      	ldrh	r3, [r4, #28]
    1830:	f023 0307 	bic.w	r3, r3, #7
    1834:	f043 0305 	orr.w	r3, r3, #5
    1838:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    183a:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    183c:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    183e:	f43f af6e 	beq.w	171e <process_event+0x232>
    1842:	2600      	movs	r6, #0
		res = 0;
    1844:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1846:	2505      	movs	r5, #5
    1848:	e019      	b.n	187e <process_event+0x392>
			__ASSERT_NO_MSG(false);
    184a:	4a32      	ldr	r2, [pc, #200]	; (1914 <process_event+0x428>)
    184c:	4934      	ldr	r1, [pc, #208]	; (1920 <process_event+0x434>)
    184e:	4830      	ldr	r0, [pc, #192]	; (1910 <process_event+0x424>)
    1850:	f240 136b 	movw	r3, #363	; 0x16b
    1854:	f007 fc67 	bl	9126 <assert_print>
    1858:	482e      	ldr	r0, [pc, #184]	; (1914 <process_event+0x428>)
    185a:	f240 116b 	movw	r1, #363	; 0x16b
    185e:	f007 fc5b 	bl	9118 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1862:	8ba3      	ldrh	r3, [r4, #28]
    1864:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1868:	42aa      	cmp	r2, r5
    186a:	f43f af0b 	beq.w	1684 <process_event+0x198>
    186e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1870:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    1872:	4637      	mov	r7, r6
		res = 0;
    1874:	46b0      	mov	r8, r6
    1876:	e002      	b.n	187e <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    1878:	2600      	movs	r6, #0
		res = 0;
    187a:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    187c:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    187e:	68a2      	ldr	r2, [r4, #8]
    1880:	2a00      	cmp	r2, #0
    1882:	f43f ae57 	beq.w	1534 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1886:	f04f 0a01 	mov.w	sl, #1
    188a:	e658      	b.n	153e <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    188c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    188e:	2900      	cmp	r1, #0
    1890:	f43f ae74 	beq.w	157c <process_event+0x90>
	return node->next;
    1894:	f8d1 9000 	ldr.w	r9, [r1]
    1898:	2900      	cmp	r1, #0
    189a:	f43f ae6f 	beq.w	157c <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    189e:	f8d1 a004 	ldr.w	sl, [r1, #4]
    18a2:	4643      	mov	r3, r8
    18a4:	462a      	mov	r2, r5
    18a6:	4620      	mov	r0, r4
    18a8:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18aa:	f1b9 0f00 	cmp.w	r9, #0
    18ae:	d004      	beq.n	18ba <process_event+0x3ce>
    18b0:	f8d9 3000 	ldr.w	r3, [r9]
    18b4:	4649      	mov	r1, r9
    18b6:	4699      	mov	r9, r3
    18b8:	e7ee      	b.n	1898 <process_event+0x3ac>
    18ba:	464b      	mov	r3, r9
    18bc:	e7fa      	b.n	18b4 <process_event+0x3c8>
    18be:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    18c0:	4643      	mov	r3, r8
    18c2:	462a      	mov	r2, r5
    18c4:	4620      	mov	r0, r4
    18c6:	6836      	ldr	r6, [r6, #0]
    18c8:	f007 fb6a 	bl	8fa0 <notify_one>
    18cc:	e656      	b.n	157c <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18ce:	f01a 0f20 	tst.w	sl, #32
    18d2:	f43f ae83 	beq.w	15dc <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18d6:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18da:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    18dc:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    18e0:	4620      	mov	r0, r4
    18e2:	f007 fb31 	bl	8f48 <process_recheck>
		if (evt == EVT_NOP) {
    18e6:	2800      	cmp	r0, #0
    18e8:	f43f ae78 	beq.w	15dc <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    18ec:	3801      	subs	r0, #1
    18ee:	2804      	cmp	r0, #4
    18f0:	d8ab      	bhi.n	184a <process_event+0x35e>
    18f2:	a301      	add	r3, pc, #4	; (adr r3, 18f8 <process_event+0x40c>)
    18f4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    18f8:	00001505 	.word	0x00001505
    18fc:	0000184b 	.word	0x0000184b
    1900:	000016b7 	.word	0x000016b7
    1904:	00001731 	.word	0x00001731
    1908:	000017d9 	.word	0x000017d9
    190c:	0000a571 	.word	0x0000a571
    1910:	0000a092 	.word	0x0000a092
    1914:	0000a4e4 	.word	0x0000a4e4
    1918:	0000a512 	.word	0x0000a512
    191c:	0000a535 	.word	0x0000a535
    1920:	0000a1ea 	.word	0x0000a1ea

00001924 <transition_complete>:
{
    1924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1926:	4604      	mov	r4, r0
    1928:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    192a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    192e:	f04f 0340 	mov.w	r3, #64	; 0x40
    1932:	f3ef 8711 	mrs	r7, BASEPRI
    1936:	f383 8812 	msr	BASEPRI_MAX, r3
    193a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    193e:	4630      	mov	r0, r6
    1940:	f004 fffe 	bl	6940 <z_spin_lock_valid>
    1944:	b968      	cbnz	r0, 1962 <transition_complete+0x3e>
    1946:	4a0c      	ldr	r2, [pc, #48]	; (1978 <transition_complete+0x54>)
    1948:	490c      	ldr	r1, [pc, #48]	; (197c <transition_complete+0x58>)
    194a:	480d      	ldr	r0, [pc, #52]	; (1980 <transition_complete+0x5c>)
    194c:	238e      	movs	r3, #142	; 0x8e
    194e:	f007 fbea 	bl	9126 <assert_print>
    1952:	480c      	ldr	r0, [pc, #48]	; (1984 <transition_complete+0x60>)
    1954:	4631      	mov	r1, r6
    1956:	f007 fbe6 	bl	9126 <assert_print>
    195a:	4807      	ldr	r0, [pc, #28]	; (1978 <transition_complete+0x54>)
    195c:	218e      	movs	r1, #142	; 0x8e
    195e:	f007 fbdb 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    1962:	4630      	mov	r0, r6
    1964:	f005 f80a 	bl	697c <z_spin_lock_set_owner>
	mgr->last_res = res;
    1968:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    196a:	463a      	mov	r2, r7
    196c:	4620      	mov	r0, r4
    196e:	2101      	movs	r1, #1
}
    1970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1974:	f7ff bdba 	b.w	14ec <process_event>
    1978:	0000a587 	.word	0x0000a587
    197c:	0000a5e0 	.word	0x0000a5e0
    1980:	0000a092 	.word	0x0000a092
    1984:	0000a5f5 	.word	0x0000a5f5

00001988 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    198c:	4604      	mov	r4, r0
    198e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1990:	f007 faf6 	bl	8f80 <validate_args>

	if (rv < 0) {
    1994:	1e05      	subs	r5, r0, #0
    1996:	db78      	blt.n	1a8a <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1998:	f104 0914 	add.w	r9, r4, #20
    199c:	f04f 0340 	mov.w	r3, #64	; 0x40
    19a0:	f3ef 8a11 	mrs	sl, BASEPRI
    19a4:	f383 8812 	msr	BASEPRI_MAX, r3
    19a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    19ac:	4648      	mov	r0, r9
    19ae:	f004 ffc7 	bl	6940 <z_spin_lock_valid>
    19b2:	b968      	cbnz	r0, 19d0 <onoff_request+0x48>
    19b4:	4a39      	ldr	r2, [pc, #228]	; (1a9c <onoff_request+0x114>)
    19b6:	493a      	ldr	r1, [pc, #232]	; (1aa0 <onoff_request+0x118>)
    19b8:	483a      	ldr	r0, [pc, #232]	; (1aa4 <onoff_request+0x11c>)
    19ba:	238e      	movs	r3, #142	; 0x8e
    19bc:	f007 fbb3 	bl	9126 <assert_print>
    19c0:	4839      	ldr	r0, [pc, #228]	; (1aa8 <onoff_request+0x120>)
    19c2:	4649      	mov	r1, r9
    19c4:	f007 fbaf 	bl	9126 <assert_print>
    19c8:	4834      	ldr	r0, [pc, #208]	; (1a9c <onoff_request+0x114>)
    19ca:	218e      	movs	r1, #142	; 0x8e
    19cc:	f007 fba4 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    19d0:	4648      	mov	r0, r9
    19d2:	f004 ffd3 	bl	697c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    19d6:	8be3      	ldrh	r3, [r4, #30]
    19d8:	8ba6      	ldrh	r6, [r4, #28]
    19da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    19de:	4293      	cmp	r3, r2
    19e0:	f006 0607 	and.w	r6, r6, #7
    19e4:	d054      	beq.n	1a90 <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    19e6:	2e02      	cmp	r6, #2
    19e8:	d124      	bne.n	1a34 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    19ea:	3301      	adds	r3, #1
    19ec:	83e3      	strh	r3, [r4, #30]
	rv = state;
    19ee:	4635      	mov	r5, r6
		notify = true;
    19f0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19f4:	4648      	mov	r0, r9
    19f6:	f004 ffb1 	bl	695c <z_spin_unlock_valid>
    19fa:	b968      	cbnz	r0, 1a18 <onoff_request+0x90>
    19fc:	4a27      	ldr	r2, [pc, #156]	; (1a9c <onoff_request+0x114>)
    19fe:	492b      	ldr	r1, [pc, #172]	; (1aac <onoff_request+0x124>)
    1a00:	4828      	ldr	r0, [pc, #160]	; (1aa4 <onoff_request+0x11c>)
    1a02:	23b9      	movs	r3, #185	; 0xb9
    1a04:	f007 fb8f 	bl	9126 <assert_print>
    1a08:	4829      	ldr	r0, [pc, #164]	; (1ab0 <onoff_request+0x128>)
    1a0a:	4649      	mov	r1, r9
    1a0c:	f007 fb8b 	bl	9126 <assert_print>
    1a10:	4822      	ldr	r0, [pc, #136]	; (1a9c <onoff_request+0x114>)
    1a12:	21b9      	movs	r1, #185	; 0xb9
    1a14:	f007 fb80 	bl	9118 <assert_post_action>
	__asm__ volatile(
    1a18:	f38a 8811 	msr	BASEPRI, sl
    1a1c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1a20:	f1b8 0f00 	cmp.w	r8, #0
    1a24:	d031      	beq.n	1a8a <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    1a26:	2300      	movs	r3, #0
    1a28:	4632      	mov	r2, r6
    1a2a:	4639      	mov	r1, r7
    1a2c:	4620      	mov	r0, r4
    1a2e:	f007 fab7 	bl	8fa0 <notify_one>
    1a32:	e02a      	b.n	1a8a <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    1a34:	2e06      	cmp	r6, #6
    1a36:	d80e      	bhi.n	1a56 <onoff_request+0xce>
    1a38:	e8df f006 	tbb	[pc, r6]
    1a3c:	0d0d1904 	.word	0x0d0d1904
    1a40:	2d04      	.short	0x2d04
    1a42:	04          	.byte	0x04
    1a43:	00          	.byte	0x00
	parent->next = child;
    1a44:	2300      	movs	r3, #0
    1a46:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1a48:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1a4a:	b9ab      	cbnz	r3, 1a78 <onoff_request+0xf0>
	list->head = node;
    1a4c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1a50:	b1ae      	cbz	r6, 1a7e <onoff_request+0xf6>
	rv = state;
    1a52:	4635      	mov	r5, r6
    1a54:	e00d      	b.n	1a72 <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1a56:	4917      	ldr	r1, [pc, #92]	; (1ab4 <onoff_request+0x12c>)
    1a58:	4812      	ldr	r0, [pc, #72]	; (1aa4 <onoff_request+0x11c>)
    1a5a:	4a17      	ldr	r2, [pc, #92]	; (1ab8 <onoff_request+0x130>)
    1a5c:	f240 13c9 	movw	r3, #457	; 0x1c9
    1a60:	f007 fb61 	bl	9126 <assert_print>
    1a64:	4814      	ldr	r0, [pc, #80]	; (1ab8 <onoff_request+0x130>)
    1a66:	f240 11c9 	movw	r1, #457	; 0x1c9
    1a6a:	f007 fb55 	bl	9118 <assert_post_action>
		rv = -EIO;
    1a6e:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    1a72:	f04f 0800 	mov.w	r8, #0
    1a76:	e7bd      	b.n	19f4 <onoff_request+0x6c>
	parent->next = child;
    1a78:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1a7a:	6067      	str	r7, [r4, #4]
}
    1a7c:	e7e8      	b.n	1a50 <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    1a7e:	4652      	mov	r2, sl
    1a80:	2102      	movs	r1, #2
    1a82:	4620      	mov	r0, r4
    1a84:	f7ff fd32 	bl	14ec <process_event>
    1a88:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    1a8a:	4628      	mov	r0, r5
    1a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    1a90:	f06f 050a 	mvn.w	r5, #10
    1a94:	e7ed      	b.n	1a72 <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    1a96:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1a9a:	e7ea      	b.n	1a72 <onoff_request+0xea>
    1a9c:	0000a587 	.word	0x0000a587
    1aa0:	0000a5e0 	.word	0x0000a5e0
    1aa4:	0000a092 	.word	0x0000a092
    1aa8:	0000a5f5 	.word	0x0000a5f5
    1aac:	0000a5b4 	.word	0x0000a5b4
    1ab0:	0000a5cb 	.word	0x0000a5cb
    1ab4:	0000a571 	.word	0x0000a571
    1ab8:	0000a4e4 	.word	0x0000a4e4

00001abc <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1abc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    1ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ac4:	4604      	mov	r4, r0
    1ac6:	460e      	mov	r6, r1
    1ac8:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1aca:	d36c      	bcc.n	1ba6 <sys_heap_init+0xea>
    1acc:	493d      	ldr	r1, [pc, #244]	; (1bc4 <sys_heap_init+0x108>)
    1ace:	4a3e      	ldr	r2, [pc, #248]	; (1bc8 <sys_heap_init+0x10c>)
    1ad0:	483e      	ldr	r0, [pc, #248]	; (1bcc <sys_heap_init+0x110>)
    1ad2:	f240 13e3 	movw	r3, #483	; 0x1e3
    1ad6:	f007 fb26 	bl	9126 <assert_print>
    1ada:	483d      	ldr	r0, [pc, #244]	; (1bd0 <sys_heap_init+0x114>)
    1adc:	f007 fb23 	bl	9126 <assert_print>
    1ae0:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1ae4:	4838      	ldr	r0, [pc, #224]	; (1bc8 <sys_heap_init+0x10c>)
    1ae6:	f007 fb17 	bl	9118 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    1aea:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1aec:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1aee:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1af0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1af4:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1af8:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1afa:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1afc:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1b00:	d80e      	bhi.n	1b20 <sys_heap_init+0x64>
    1b02:	4934      	ldr	r1, [pc, #208]	; (1bd4 <sys_heap_init+0x118>)
    1b04:	4a30      	ldr	r2, [pc, #192]	; (1bc8 <sys_heap_init+0x10c>)
    1b06:	4831      	ldr	r0, [pc, #196]	; (1bcc <sys_heap_init+0x110>)
    1b08:	f240 13f3 	movw	r3, #499	; 0x1f3
    1b0c:	f007 fb0b 	bl	9126 <assert_print>
    1b10:	4831      	ldr	r0, [pc, #196]	; (1bd8 <sys_heap_init+0x11c>)
    1b12:	f007 fb08 	bl	9126 <assert_print>
    1b16:	482c      	ldr	r0, [pc, #176]	; (1bc8 <sys_heap_init+0x10c>)
    1b18:	f240 11f3 	movw	r1, #499	; 0x1f3
    1b1c:	f007 fafc 	bl	9118 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1b20:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1b22:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1b26:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1b2a:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    1b2e:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1b30:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    1b32:	2300      	movs	r3, #0
    1b34:	08e4      	lsrs	r4, r4, #3
    1b36:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1b38:	1c63      	adds	r3, r4, #1
    1b3a:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    1b3c:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1b3e:	d90e      	bls.n	1b5e <sys_heap_init+0xa2>
    1b40:	4926      	ldr	r1, [pc, #152]	; (1bdc <sys_heap_init+0x120>)
    1b42:	4a21      	ldr	r2, [pc, #132]	; (1bc8 <sys_heap_init+0x10c>)
    1b44:	4821      	ldr	r0, [pc, #132]	; (1bcc <sys_heap_init+0x110>)
    1b46:	f44f 7301 	mov.w	r3, #516	; 0x204
    1b4a:	f007 faec 	bl	9126 <assert_print>
    1b4e:	4822      	ldr	r0, [pc, #136]	; (1bd8 <sys_heap_init+0x11c>)
    1b50:	f007 fae9 	bl	9126 <assert_print>
    1b54:	481c      	ldr	r0, [pc, #112]	; (1bc8 <sys_heap_init+0x10c>)
    1b56:	f44f 7101 	mov.w	r1, #516	; 0x204
    1b5a:	f007 fadd 	bl	9118 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    1b5e:	f105 030c 	add.w	r3, r5, #12
    1b62:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    1b66:	2200      	movs	r2, #0
    1b68:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    1b6c:	4543      	cmp	r3, r8
    1b6e:	d1fb      	bne.n	1b68 <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1b70:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1b72:	f043 0301 	orr.w	r3, r3, #1
    1b76:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    1b78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1b7c:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1b7e:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    1b80:	802a      	strh	r2, [r5, #0]
    1b82:	8048      	strh	r0, [r1, #2]
    1b84:	19a9      	adds	r1, r5, r6
    1b86:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    1b8a:	804a      	strh	r2, [r1, #2]
    1b8c:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    1b8e:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1b92:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1b94:	885a      	ldrh	r2, [r3, #2]
    1b96:	f042 0201 	orr.w	r2, r2, #1
    1b9a:	4628      	mov	r0, r5
    1b9c:	805a      	strh	r2, [r3, #2]
}
    1b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    1ba2:	f007 ba35 	b.w	9010 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1ba6:	2a04      	cmp	r2, #4
    1ba8:	d89f      	bhi.n	1aea <sys_heap_init+0x2e>
    1baa:	490d      	ldr	r1, [pc, #52]	; (1be0 <sys_heap_init+0x124>)
    1bac:	4a06      	ldr	r2, [pc, #24]	; (1bc8 <sys_heap_init+0x10c>)
    1bae:	4807      	ldr	r0, [pc, #28]	; (1bcc <sys_heap_init+0x110>)
    1bb0:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1bb4:	f007 fab7 	bl	9126 <assert_print>
    1bb8:	4807      	ldr	r0, [pc, #28]	; (1bd8 <sys_heap_init+0x11c>)
    1bba:	f007 fab4 	bl	9126 <assert_print>
    1bbe:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1bc2:	e78f      	b.n	1ae4 <sys_heap_init+0x28>
    1bc4:	0000a6d9 	.word	0x0000a6d9
    1bc8:	0000a60d 	.word	0x0000a60d
    1bcc:	0000a092 	.word	0x0000a092
    1bd0:	0000a6ef 	.word	0x0000a6ef
    1bd4:	0000a740 	.word	0x0000a740
    1bd8:	0000a727 	.word	0x0000a727
    1bdc:	0000a769 	.word	0x0000a769
    1be0:	0000a706 	.word	0x0000a706

00001be4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1be8:	4681      	mov	r9, r0
    1bea:	b095      	sub	sp, #84	; 0x54
    1bec:	468b      	mov	fp, r1
    1bee:	4617      	mov	r7, r2
    1bf0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1bf2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1bf4:	7838      	ldrb	r0, [r7, #0]
    1bf6:	b908      	cbnz	r0, 1bfc <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1bf8:	4628      	mov	r0, r5
    1bfa:	e358      	b.n	22ae <cbvprintf+0x6ca>
			OUTC(*fp++);
    1bfc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    1bfe:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1c00:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1c02:	d006      	beq.n	1c12 <cbvprintf+0x2e>
			OUTC('%');
    1c04:	4659      	mov	r1, fp
    1c06:	47c8      	blx	r9
    1c08:	2800      	cmp	r0, #0
    1c0a:	f2c0 8350 	blt.w	22ae <cbvprintf+0x6ca>
    1c0e:	3501      	adds	r5, #1
		if (bps == NULL) {
    1c10:	e204      	b.n	201c <cbvprintf+0x438>
		} state = {
    1c12:	2218      	movs	r2, #24
    1c14:	2100      	movs	r1, #0
    1c16:	a80e      	add	r0, sp, #56	; 0x38
    1c18:	f007 fb6f 	bl	92fa <memset>
	if (*sp == '%') {
    1c1c:	787b      	ldrb	r3, [r7, #1]
    1c1e:	2b25      	cmp	r3, #37	; 0x25
    1c20:	d07d      	beq.n	1d1e <cbvprintf+0x13a>
    1c22:	2300      	movs	r3, #0
    1c24:	1c78      	adds	r0, r7, #1
    1c26:	4698      	mov	r8, r3
    1c28:	469e      	mov	lr, r3
    1c2a:	469c      	mov	ip, r3
    1c2c:	461e      	mov	r6, r3
    1c2e:	4601      	mov	r1, r0
		switch (*sp) {
    1c30:	f810 2b01 	ldrb.w	r2, [r0], #1
    1c34:	2a2b      	cmp	r2, #43	; 0x2b
    1c36:	f000 80a1 	beq.w	1d7c <cbvprintf+0x198>
    1c3a:	f200 8098 	bhi.w	1d6e <cbvprintf+0x18a>
    1c3e:	2a20      	cmp	r2, #32
    1c40:	f000 809f 	beq.w	1d82 <cbvprintf+0x19e>
    1c44:	2a23      	cmp	r2, #35	; 0x23
    1c46:	f000 809f 	beq.w	1d88 <cbvprintf+0x1a4>
    1c4a:	b12b      	cbz	r3, 1c58 <cbvprintf+0x74>
    1c4c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c54:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c58:	f1b8 0f00 	cmp.w	r8, #0
    1c5c:	d005      	beq.n	1c6a <cbvprintf+0x86>
    1c5e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c62:	f043 0320 	orr.w	r3, r3, #32
    1c66:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c6a:	f1be 0f00 	cmp.w	lr, #0
    1c6e:	d005      	beq.n	1c7c <cbvprintf+0x98>
    1c70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c74:	f043 0310 	orr.w	r3, r3, #16
    1c78:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c7c:	f1bc 0f00 	cmp.w	ip, #0
    1c80:	d005      	beq.n	1c8e <cbvprintf+0xaa>
    1c82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c86:	f043 0308 	orr.w	r3, r3, #8
    1c8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c8e:	b12e      	cbz	r6, 1c9c <cbvprintf+0xb8>
    1c90:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c94:	f043 0304 	orr.w	r3, r3, #4
    1c98:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1c9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ca0:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1ca4:	2844      	cmp	r0, #68	; 0x44
    1ca6:	d103      	bne.n	1cb0 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1ca8:	f36f 1386 	bfc	r3, #6, #1
    1cac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1cb0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1cb4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1cba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1cbe:	d17f      	bne.n	1dc0 <cbvprintf+0x1dc>
		conv->width_star = true;
    1cc0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1cc4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1cc8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1cca:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1cce:	781a      	ldrb	r2, [r3, #0]
    1cd0:	2a2e      	cmp	r2, #46	; 0x2e
    1cd2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1cd6:	bf0c      	ite	eq
    1cd8:	2101      	moveq	r1, #1
    1cda:	2100      	movne	r1, #0
    1cdc:	f361 0241 	bfi	r2, r1, #1, #1
    1ce0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1ce4:	d178      	bne.n	1dd8 <cbvprintf+0x1f4>
	if (*sp == '*') {
    1ce6:	785a      	ldrb	r2, [r3, #1]
    1ce8:	2a2a      	cmp	r2, #42	; 0x2a
    1cea:	d06e      	beq.n	1dca <cbvprintf+0x1e6>
	++sp;
    1cec:	3301      	adds	r3, #1
	size_t val = 0;
    1cee:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1cf0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1cf4:	4619      	mov	r1, r3
    1cf6:	f811 0b01 	ldrb.w	r0, [r1], #1
    1cfa:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1cfe:	2e09      	cmp	r6, #9
    1d00:	f240 8095 	bls.w	1e2e <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    1d04:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1d08:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1d0a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1d0e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1d12:	460a      	mov	r2, r1
    1d14:	f360 0241 	bfi	r2, r0, #1, #1
    1d18:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1d1c:	e05c      	b.n	1dd8 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    1d1e:	1cba      	adds	r2, r7, #2
    1d20:	9203      	str	r2, [sp, #12]
    1d22:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1d26:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1d2a:	07da      	lsls	r2, r3, #31
    1d2c:	f140 812e 	bpl.w	1f8c <cbvprintf+0x3a8>
			width = va_arg(ap, int);
    1d30:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1d34:	f1b8 0f00 	cmp.w	r8, #0
    1d38:	da07      	bge.n	1d4a <cbvprintf+0x166>
				conv->flag_dash = true;
    1d3a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1d3e:	f042 0204 	orr.w	r2, r2, #4
    1d42:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1d46:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1d4a:	075e      	lsls	r6, r3, #29
    1d4c:	f140 8127 	bpl.w	1f9e <cbvprintf+0x3ba>
			int arg = va_arg(ap, int);
    1d50:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1d54:	f1ba 0f00 	cmp.w	sl, #0
    1d58:	f280 8126 	bge.w	1fa8 <cbvprintf+0x3c4>
				conv->prec_present = false;
    1d5c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1d60:	f36f 0341 	bfc	r3, #1, #1
    1d64:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1d68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1d6c:	e11c      	b.n	1fa8 <cbvprintf+0x3c4>
		switch (*sp) {
    1d6e:	2a2d      	cmp	r2, #45	; 0x2d
    1d70:	d00d      	beq.n	1d8e <cbvprintf+0x1aa>
    1d72:	2a30      	cmp	r2, #48	; 0x30
    1d74:	f47f af69 	bne.w	1c4a <cbvprintf+0x66>
    1d78:	2301      	movs	r3, #1
	} while (loop);
    1d7a:	e758      	b.n	1c2e <cbvprintf+0x4a>
		switch (*sp) {
    1d7c:	f04f 0c01 	mov.w	ip, #1
    1d80:	e755      	b.n	1c2e <cbvprintf+0x4a>
    1d82:	f04f 0e01 	mov.w	lr, #1
    1d86:	e752      	b.n	1c2e <cbvprintf+0x4a>
    1d88:	f04f 0801 	mov.w	r8, #1
    1d8c:	e74f      	b.n	1c2e <cbvprintf+0x4a>
    1d8e:	2601      	movs	r6, #1
    1d90:	e74d      	b.n	1c2e <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
    1d92:	fb0e 6202 	mla	r2, lr, r2, r6
    1d96:	3a30      	subs	r2, #48	; 0x30
    1d98:	4603      	mov	r3, r0
    1d9a:	4618      	mov	r0, r3
    1d9c:	f810 6b01 	ldrb.w	r6, [r0], #1
    1da0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1da4:	f1bc 0f09 	cmp.w	ip, #9
    1da8:	d9f3      	bls.n	1d92 <cbvprintf+0x1ae>
	if (sp != wp) {
    1daa:	4299      	cmp	r1, r3
    1dac:	d08f      	beq.n	1cce <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1dae:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1db2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1db4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1db6:	f362 0141 	bfi	r1, r2, #1, #1
    1dba:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1dbe:	e786      	b.n	1cce <cbvprintf+0xea>
    1dc0:	460b      	mov	r3, r1
	size_t val = 0;
    1dc2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1dc4:	f04f 0e0a 	mov.w	lr, #10
    1dc8:	e7e7      	b.n	1d9a <cbvprintf+0x1b6>
		conv->prec_star = true;
    1dca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1dce:	f042 0204 	orr.w	r2, r2, #4
    1dd2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1dd6:	3302      	adds	r3, #2
	switch (*sp) {
    1dd8:	781a      	ldrb	r2, [r3, #0]
    1dda:	2a6c      	cmp	r2, #108	; 0x6c
    1ddc:	d047      	beq.n	1e6e <cbvprintf+0x28a>
    1dde:	d82b      	bhi.n	1e38 <cbvprintf+0x254>
    1de0:	2a68      	cmp	r2, #104	; 0x68
    1de2:	d031      	beq.n	1e48 <cbvprintf+0x264>
    1de4:	2a6a      	cmp	r2, #106	; 0x6a
    1de6:	d04b      	beq.n	1e80 <cbvprintf+0x29c>
    1de8:	2a4c      	cmp	r2, #76	; 0x4c
    1dea:	d051      	beq.n	1e90 <cbvprintf+0x2ac>
	conv->specifier = *sp++;
    1dec:	461a      	mov	r2, r3
    1dee:	f812 3b01 	ldrb.w	r3, [r2], #1
    1df2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1df4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1df6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1dfa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1dfe:	f200 80be 	bhi.w	1f7e <cbvprintf+0x39a>
    1e02:	2b6d      	cmp	r3, #109	; 0x6d
    1e04:	d851      	bhi.n	1eaa <cbvprintf+0x2c6>
    1e06:	2b69      	cmp	r3, #105	; 0x69
    1e08:	f200 80b9 	bhi.w	1f7e <cbvprintf+0x39a>
    1e0c:	2b57      	cmp	r3, #87	; 0x57
    1e0e:	d867      	bhi.n	1ee0 <cbvprintf+0x2fc>
    1e10:	2b41      	cmp	r3, #65	; 0x41
    1e12:	d003      	beq.n	1e1c <cbvprintf+0x238>
    1e14:	3b45      	subs	r3, #69	; 0x45
    1e16:	2b02      	cmp	r3, #2
    1e18:	f200 80b1 	bhi.w	1f7e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    1e1c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1e20:	2204      	movs	r2, #4
    1e22:	f362 0302 	bfi	r3, r2, #0, #3
    1e26:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1e2a:	2301      	movs	r3, #1
			break;
    1e2c:	e073      	b.n	1f16 <cbvprintf+0x332>
		val = 10U * val + *sp++ - '0';
    1e2e:	fb0c 0202 	mla	r2, ip, r2, r0
    1e32:	3a30      	subs	r2, #48	; 0x30
    1e34:	460b      	mov	r3, r1
    1e36:	e75d      	b.n	1cf4 <cbvprintf+0x110>
	switch (*sp) {
    1e38:	2a74      	cmp	r2, #116	; 0x74
    1e3a:	d025      	beq.n	1e88 <cbvprintf+0x2a4>
    1e3c:	2a7a      	cmp	r2, #122	; 0x7a
    1e3e:	d1d5      	bne.n	1dec <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
    1e40:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e44:	2106      	movs	r1, #6
    1e46:	e00c      	b.n	1e62 <cbvprintf+0x27e>
		if (*++sp == 'h') {
    1e48:	785a      	ldrb	r2, [r3, #1]
    1e4a:	2a68      	cmp	r2, #104	; 0x68
    1e4c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e50:	d106      	bne.n	1e60 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_HH;
    1e52:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1e54:	f361 02c6 	bfi	r2, r1, #3, #4
    1e58:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1e5c:	3302      	adds	r3, #2
    1e5e:	e7c5      	b.n	1dec <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
    1e60:	2102      	movs	r1, #2
    1e62:	f361 02c6 	bfi	r2, r1, #3, #4
    1e66:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1e6a:	3301      	adds	r3, #1
    1e6c:	e7be      	b.n	1dec <cbvprintf+0x208>
		if (*++sp == 'l') {
    1e6e:	785a      	ldrb	r2, [r3, #1]
    1e70:	2a6c      	cmp	r2, #108	; 0x6c
    1e72:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e76:	d101      	bne.n	1e7c <cbvprintf+0x298>
			conv->length_mod = LENGTH_LL;
    1e78:	2104      	movs	r1, #4
    1e7a:	e7eb      	b.n	1e54 <cbvprintf+0x270>
			conv->length_mod = LENGTH_L;
    1e7c:	2103      	movs	r1, #3
    1e7e:	e7f0      	b.n	1e62 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_J;
    1e80:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e84:	2105      	movs	r1, #5
    1e86:	e7ec      	b.n	1e62 <cbvprintf+0x27e>
		conv->length_mod = LENGTH_T;
    1e88:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e8c:	2107      	movs	r1, #7
    1e8e:	e7e8      	b.n	1e62 <cbvprintf+0x27e>
		conv->unsupported = true;
    1e90:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1e94:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1e98:	f022 0202 	bic.w	r2, r2, #2
    1e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1ea0:	f042 0202 	orr.w	r2, r2, #2
    1ea4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1ea8:	e7df      	b.n	1e6a <cbvprintf+0x286>
	switch (conv->specifier) {
    1eaa:	3b6e      	subs	r3, #110	; 0x6e
    1eac:	b2d9      	uxtb	r1, r3
    1eae:	2301      	movs	r3, #1
    1eb0:	408b      	lsls	r3, r1
    1eb2:	f240 4182 	movw	r1, #1154	; 0x482
    1eb6:	420b      	tst	r3, r1
    1eb8:	d137      	bne.n	1f2a <cbvprintf+0x346>
    1eba:	f013 0f24 	tst.w	r3, #36	; 0x24
    1ebe:	d151      	bne.n	1f64 <cbvprintf+0x380>
    1ec0:	07d8      	lsls	r0, r3, #31
    1ec2:	d55c      	bpl.n	1f7e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1ec4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1ec8:	2103      	movs	r1, #3
    1eca:	f361 0302 	bfi	r3, r1, #0, #3
    1ece:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ed2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1ed6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1eda:	424b      	negs	r3, r1
    1edc:	414b      	adcs	r3, r1
    1ede:	e01a      	b.n	1f16 <cbvprintf+0x332>
	switch (conv->specifier) {
    1ee0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1ee4:	b2c9      	uxtb	r1, r1
    1ee6:	2001      	movs	r0, #1
    1ee8:	fa00 f101 	lsl.w	r1, r0, r1
    1eec:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1ef0:	d194      	bne.n	1e1c <cbvprintf+0x238>
    1ef2:	f640 0601 	movw	r6, #2049	; 0x801
    1ef6:	4231      	tst	r1, r6
    1ef8:	d11d      	bne.n	1f36 <cbvprintf+0x352>
    1efa:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1efe:	d03e      	beq.n	1f7e <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    1f00:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1f04:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f08:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1f0c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1f0e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f12:	d034      	beq.n	1f7e <cbvprintf+0x39a>
	bool unsupported = false;
    1f14:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1f16:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1f1a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1f1e:	430b      	orrs	r3, r1
    1f20:	f363 0241 	bfi	r2, r3, #1, #1
    1f24:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1f28:	e6fd      	b.n	1d26 <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    1f2a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1f2e:	2102      	movs	r1, #2
    1f30:	f361 0302 	bfi	r3, r1, #0, #3
    1f34:	e7e8      	b.n	1f08 <cbvprintf+0x324>
    1f36:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1f3a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f3c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1f40:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f44:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1f46:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1f4a:	bf02      	ittt	eq
    1f4c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1f50:	f041 0101 	orreq.w	r1, r1, #1
    1f54:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1f58:	2b63      	cmp	r3, #99	; 0x63
    1f5a:	d1db      	bne.n	1f14 <cbvprintf+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1f5c:	1e13      	subs	r3, r2, #0
    1f5e:	bf18      	it	ne
    1f60:	2301      	movne	r3, #1
    1f62:	e7d8      	b.n	1f16 <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1f64:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1f68:	2103      	movs	r1, #3
    1f6a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1f6e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1f72:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1f76:	bf14      	ite	ne
    1f78:	2301      	movne	r3, #1
    1f7a:	2300      	moveq	r3, #0
    1f7c:	e7cb      	b.n	1f16 <cbvprintf+0x332>
		conv->invalid = true;
    1f7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1f82:	f043 0301 	orr.w	r3, r3, #1
    1f86:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1f8a:	e7c3      	b.n	1f14 <cbvprintf+0x330>
		} else if (conv->width_present) {
    1f8c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1f90:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1f92:	bfb4      	ite	lt
    1f94:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1f98:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1f9c:	e6d5      	b.n	1d4a <cbvprintf+0x166>
		} else if (conv->prec_present) {
    1f9e:	0798      	lsls	r0, r3, #30
    1fa0:	f57f aee2 	bpl.w	1d68 <cbvprintf+0x184>
			precision = conv->prec_value;
    1fa4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1fa8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1fac:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1fae:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1fb2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1fb6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1fba:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1fbc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1fc0:	d133      	bne.n	202a <cbvprintf+0x446>
			switch (length_mod) {
    1fc2:	1ecb      	subs	r3, r1, #3
    1fc4:	2b04      	cmp	r3, #4
    1fc6:	d804      	bhi.n	1fd2 <cbvprintf+0x3ee>
    1fc8:	e8df f003 	tbb	[pc, r3]
    1fcc:	10464610 	.word	0x10464610
    1fd0:	10          	.byte	0x10
    1fd1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1fd2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1fd4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1fd6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1fda:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1fde:	d10b      	bne.n	1ff8 <cbvprintf+0x414>
				value->sint = (char)value->sint;
    1fe0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    1fe4:	930e      	str	r3, [sp, #56]	; 0x38
    1fe6:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    1fe8:	930f      	str	r3, [sp, #60]	; 0x3c
    1fea:	e007      	b.n	1ffc <cbvprintf+0x418>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1fec:	f854 3b04 	ldr.w	r3, [r4], #4
    1ff0:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1ff2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1ff6:	e002      	b.n	1ffe <cbvprintf+0x41a>
			} else if (length_mod == LENGTH_H) {
    1ff8:	2902      	cmp	r1, #2
    1ffa:	d011      	beq.n	2020 <cbvprintf+0x43c>
				value->sint = va_arg(ap, int);
    1ffc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1ffe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2002:	f013 0603 	ands.w	r6, r3, #3
    2006:	d047      	beq.n	2098 <cbvprintf+0x4b4>
			OUTS(sp, fp);
    2008:	9b03      	ldr	r3, [sp, #12]
    200a:	463a      	mov	r2, r7
    200c:	4659      	mov	r1, fp
    200e:	4648      	mov	r0, r9
    2010:	f007 f86b 	bl	90ea <outs>
    2014:	2800      	cmp	r0, #0
    2016:	f2c0 814a 	blt.w	22ae <cbvprintf+0x6ca>
    201a:	4405      	add	r5, r0
			continue;
    201c:	9f03      	ldr	r7, [sp, #12]
    201e:	e5e9      	b.n	1bf4 <cbvprintf+0x10>
				value->sint = (short)value->sint;
    2020:	b21a      	sxth	r2, r3
    2022:	920e      	str	r2, [sp, #56]	; 0x38
    2024:	f343 33c0 	sbfx	r3, r3, #15, #1
    2028:	e7de      	b.n	1fe8 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_UINT) {
    202a:	2b02      	cmp	r3, #2
    202c:	d124      	bne.n	2078 <cbvprintf+0x494>
			switch (length_mod) {
    202e:	1ecb      	subs	r3, r1, #3
    2030:	2b04      	cmp	r3, #4
    2032:	d804      	bhi.n	203e <cbvprintf+0x45a>
    2034:	e8df f003 	tbb	[pc, r3]
    2038:	18101018 	.word	0x18101018
    203c:	18          	.byte	0x18
    203d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    203e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2040:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2044:	f04f 0200 	mov.w	r2, #0
    2048:	d014      	beq.n	2074 <cbvprintf+0x490>
			} else if (length_mod == LENGTH_H) {
    204a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    204c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    2050:	d1d5      	bne.n	1ffe <cbvprintf+0x41a>
				value->uint = (unsigned short)value->uint;
    2052:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2054:	930e      	str	r3, [sp, #56]	; 0x38
    2056:	e7d2      	b.n	1ffe <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap,
    2058:	3407      	adds	r4, #7
    205a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    205e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2062:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    2066:	e7ca      	b.n	1ffe <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap, size_t);
    2068:	f854 3b04 	ldr.w	r3, [r4], #4
    206c:	930e      	str	r3, [sp, #56]	; 0x38
    206e:	2300      	movs	r3, #0
    2070:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    2072:	e7c4      	b.n	1ffe <cbvprintf+0x41a>
				value->uint = (unsigned char)value->uint;
    2074:	b2db      	uxtb	r3, r3
    2076:	e7bc      	b.n	1ff2 <cbvprintf+0x40e>
		} else if (specifier_cat == SPECIFIER_FP) {
    2078:	2b04      	cmp	r3, #4
    207a:	d108      	bne.n	208e <cbvprintf+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    207c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    207e:	f024 0407 	bic.w	r4, r4, #7
    2082:	e9d4 2300 	ldrd	r2, r3, [r4]
    2086:	3408      	adds	r4, #8
    2088:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    208c:	e7b7      	b.n	1ffe <cbvprintf+0x41a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    208e:	2b03      	cmp	r3, #3
    2090:	d1b5      	bne.n	1ffe <cbvprintf+0x41a>
			value->ptr = va_arg(ap, void *);
    2092:	f854 3b04 	ldr.w	r3, [r4], #4
    2096:	e7dd      	b.n	2054 <cbvprintf+0x470>
		switch (conv->specifier) {
    2098:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    209c:	2878      	cmp	r0, #120	; 0x78
    209e:	d8bd      	bhi.n	201c <cbvprintf+0x438>
    20a0:	2862      	cmp	r0, #98	; 0x62
    20a2:	d81c      	bhi.n	20de <cbvprintf+0x4fa>
    20a4:	2825      	cmp	r0, #37	; 0x25
    20a6:	f43f adad 	beq.w	1c04 <cbvprintf+0x20>
    20aa:	2858      	cmp	r0, #88	; 0x58
    20ac:	d1b6      	bne.n	201c <cbvprintf+0x438>
			bps = encode_uint(value->uint, conv, buf, bpe);
    20ae:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    20b2:	9300      	str	r3, [sp, #0]
    20b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    20b8:	ab08      	add	r3, sp, #32
    20ba:	aa10      	add	r2, sp, #64	; 0x40
    20bc:	f006 ffcf 	bl	905e <encode_uint>
			if (precision >= 0) {
    20c0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    20c4:	4607      	mov	r7, r0
			if (precision >= 0) {
    20c6:	f280 809a 	bge.w	21fe <cbvprintf+0x61a>
		if (bps == NULL) {
    20ca:	2f00      	cmp	r7, #0
    20cc:	d0a6      	beq.n	201c <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
    20ce:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    20d2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    20d4:	2e00      	cmp	r6, #0
    20d6:	f000 80c1 	beq.w	225c <cbvprintf+0x678>
			nj_len += 1U;
    20da:	3001      	adds	r0, #1
    20dc:	e0be      	b.n	225c <cbvprintf+0x678>
		switch (conv->specifier) {
    20de:	3863      	subs	r0, #99	; 0x63
    20e0:	2815      	cmp	r0, #21
    20e2:	d89b      	bhi.n	201c <cbvprintf+0x438>
    20e4:	a201      	add	r2, pc, #4	; (adr r2, 20ec <cbvprintf+0x508>)
    20e6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    20ea:	bf00      	nop
    20ec:	000021c1 	.word	0x000021c1
    20f0:	000021d3 	.word	0x000021d3
    20f4:	0000201d 	.word	0x0000201d
    20f8:	0000201d 	.word	0x0000201d
    20fc:	0000201d 	.word	0x0000201d
    2100:	0000201d 	.word	0x0000201d
    2104:	000021d3 	.word	0x000021d3
    2108:	0000201d 	.word	0x0000201d
    210c:	0000201d 	.word	0x0000201d
    2110:	0000201d 	.word	0x0000201d
    2114:	0000201d 	.word	0x0000201d
    2118:	00002261 	.word	0x00002261
    211c:	000021f9 	.word	0x000021f9
    2120:	0000221f 	.word	0x0000221f
    2124:	0000201d 	.word	0x0000201d
    2128:	0000201d 	.word	0x0000201d
    212c:	00002145 	.word	0x00002145
    2130:	0000201d 	.word	0x0000201d
    2134:	000021f9 	.word	0x000021f9
    2138:	0000201d 	.word	0x0000201d
    213c:	0000201d 	.word	0x0000201d
    2140:	000021f9 	.word	0x000021f9
			if (precision >= 0) {
    2144:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    2148:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    214a:	db35      	blt.n	21b8 <cbvprintf+0x5d4>
				len = strnlen(bps, precision);
    214c:	4651      	mov	r1, sl
    214e:	4638      	mov	r0, r7
    2150:	f007 f8b3 	bl	92ba <strnlen>
			bpe = bps + len;
    2154:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    2158:	2f00      	cmp	r7, #0
    215a:	f43f af5f 	beq.w	201c <cbvprintf+0x438>
		char sign = 0;
    215e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    2160:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2164:	f013 0210 	ands.w	r2, r3, #16
    2168:	9205      	str	r2, [sp, #20]
    216a:	f000 8093 	beq.w	2294 <cbvprintf+0x6b0>
			nj_len += 2U;
    216e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2170:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    2172:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    2174:	bf48      	it	mi
    2176:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    2178:	9204      	str	r2, [sp, #16]
    217a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    217c:	bf48      	it	mi
    217e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    2180:	f1b8 0f00 	cmp.w	r8, #0
    2184:	f340 80a0 	ble.w	22c8 <cbvprintf+0x6e4>
			if (!conv->flag_dash) {
    2188:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    218c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    2190:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2194:	0750      	lsls	r0, r2, #29
    2196:	9306      	str	r3, [sp, #24]
    2198:	f100 8096 	bmi.w	22c8 <cbvprintf+0x6e4>
				if (conv->flag_zero) {
    219c:	0651      	lsls	r1, r2, #25
    219e:	f140 8089 	bpl.w	22b4 <cbvprintf+0x6d0>
					if (sign != 0) {
    21a2:	b13e      	cbz	r6, 21b4 <cbvprintf+0x5d0>
						OUTC(sign);
    21a4:	4659      	mov	r1, fp
    21a6:	4630      	mov	r0, r6
    21a8:	47c8      	blx	r9
    21aa:	2800      	cmp	r0, #0
    21ac:	db7f      	blt.n	22ae <cbvprintf+0x6ca>
    21ae:	9b06      	ldr	r3, [sp, #24]
    21b0:	3501      	adds	r5, #1
    21b2:	461e      	mov	r6, r3
					pad = '0';
    21b4:	2230      	movs	r2, #48	; 0x30
    21b6:	e07e      	b.n	22b6 <cbvprintf+0x6d2>
				len = strlen(bps);
    21b8:	4638      	mov	r0, r7
    21ba:	f007 f877 	bl	92ac <strlen>
    21be:	e7c9      	b.n	2154 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    21c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    21c2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    21c6:	2600      	movs	r6, #0
			bps = buf;
    21c8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    21ca:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    21ce:	2001      	movs	r0, #1
    21d0:	e7c6      	b.n	2160 <cbvprintf+0x57c>
			if (conv->flag_plus) {
    21d2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    21d4:	bf5c      	itt	pl
    21d6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    21da:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    21dc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    21e0:	bf48      	it	mi
    21e2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    21e4:	2b00      	cmp	r3, #0
    21e6:	f6bf af62 	bge.w	20ae <cbvprintf+0x4ca>
				value->uint = (uint_value_type)-sint;
    21ea:	4252      	negs	r2, r2
    21ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    21f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    21f4:	262d      	movs	r6, #45	; 0x2d
    21f6:	e75a      	b.n	20ae <cbvprintf+0x4ca>
		switch (conv->specifier) {
    21f8:	2600      	movs	r6, #0
    21fa:	e758      	b.n	20ae <cbvprintf+0x4ca>
		char sign = 0;
    21fc:	2600      	movs	r6, #0
				conv->flag_zero = false;
    21fe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    2202:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2206:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2208:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    220c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    220e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    2212:	f67f af5a 	bls.w	20ca <cbvprintf+0x4e6>
					conv->pad0_value = precision - (int)len;
    2216:	ebaa 0303 	sub.w	r3, sl, r3
    221a:	9311      	str	r3, [sp, #68]	; 0x44
    221c:	e755      	b.n	20ca <cbvprintf+0x4e6>
			if (value->ptr != NULL) {
    221e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2220:	b390      	cbz	r0, 2288 <cbvprintf+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2222:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2226:	9300      	str	r3, [sp, #0]
    2228:	aa10      	add	r2, sp, #64	; 0x40
    222a:	ab08      	add	r3, sp, #32
    222c:	2100      	movs	r1, #0
    222e:	f006 ff16 	bl	905e <encode_uint>
				conv->altform_0c = true;
    2232:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    2236:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    223a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    223e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    2242:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2246:	4607      	mov	r7, r0
				conv->altform_0c = true;
    2248:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    224c:	dad6      	bge.n	21fc <cbvprintf+0x618>
		if (bps == NULL) {
    224e:	2800      	cmp	r0, #0
    2250:	f43f aee4 	beq.w	201c <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
    2254:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2258:	1a18      	subs	r0, r3, r0
		char sign = 0;
    225a:	2600      	movs	r6, #0
    225c:	469a      	mov	sl, r3
    225e:	e77f      	b.n	2160 <cbvprintf+0x57c>
				store_count(conv, value->ptr, count);
    2260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    2262:	2907      	cmp	r1, #7
    2264:	f63f aeda 	bhi.w	201c <cbvprintf+0x438>
    2268:	e8df f001 	tbb	[pc, r1]
    226c:	0c06040c 	.word	0x0c06040c
    2270:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2274:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    2276:	e6d1      	b.n	201c <cbvprintf+0x438>
		*(short *)dp = (short)count;
    2278:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    227a:	e6cf      	b.n	201c <cbvprintf+0x438>
		*(intmax_t *)dp = (intmax_t)count;
    227c:	17ea      	asrs	r2, r5, #31
    227e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2282:	e6cb      	b.n	201c <cbvprintf+0x438>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2284:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    2286:	e6c9      	b.n	201c <cbvprintf+0x438>
    2288:	4f2e      	ldr	r7, [pc, #184]	; (2344 <cbvprintf+0x760>)
		char sign = 0;
    228a:	4606      	mov	r6, r0
			bpe = bps + 5;
    228c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    2290:	2005      	movs	r0, #5
    2292:	e765      	b.n	2160 <cbvprintf+0x57c>
		} else if (conv->altform_0) {
    2294:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2296:	bf48      	it	mi
    2298:	3001      	addmi	r0, #1
    229a:	e769      	b.n	2170 <cbvprintf+0x58c>
    229c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    229e:	4610      	mov	r0, r2
    22a0:	9206      	str	r2, [sp, #24]
    22a2:	4659      	mov	r1, fp
    22a4:	47c8      	blx	r9
    22a6:	2800      	cmp	r0, #0
    22a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    22ac:	da04      	bge.n	22b8 <cbvprintf+0x6d4>
#undef OUTS
#undef OUTC
}
    22ae:	b015      	add	sp, #84	; 0x54
    22b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    22b4:	2220      	movs	r2, #32
					pad = '0';
    22b6:	4643      	mov	r3, r8
				while (width-- > 0) {
    22b8:	4619      	mov	r1, r3
    22ba:	2900      	cmp	r1, #0
    22bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    22c0:	dcec      	bgt.n	229c <cbvprintf+0x6b8>
    22c2:	4445      	add	r5, r8
    22c4:	1a6d      	subs	r5, r5, r1
    22c6:	4698      	mov	r8, r3
		if (sign != 0) {
    22c8:	b12e      	cbz	r6, 22d6 <cbvprintf+0x6f2>
			OUTC(sign);
    22ca:	4659      	mov	r1, fp
    22cc:	4630      	mov	r0, r6
    22ce:	47c8      	blx	r9
    22d0:	2800      	cmp	r0, #0
    22d2:	dbec      	blt.n	22ae <cbvprintf+0x6ca>
    22d4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    22d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    22da:	06da      	lsls	r2, r3, #27
    22dc:	d401      	bmi.n	22e2 <cbvprintf+0x6fe>
    22de:	071b      	lsls	r3, r3, #28
    22e0:	d505      	bpl.n	22ee <cbvprintf+0x70a>
				OUTC('0');
    22e2:	4659      	mov	r1, fp
    22e4:	2030      	movs	r0, #48	; 0x30
    22e6:	47c8      	blx	r9
    22e8:	2800      	cmp	r0, #0
    22ea:	dbe0      	blt.n	22ae <cbvprintf+0x6ca>
    22ec:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    22ee:	9b05      	ldr	r3, [sp, #20]
    22f0:	b133      	cbz	r3, 2300 <cbvprintf+0x71c>
				OUTC(conv->specifier);
    22f2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    22f6:	4659      	mov	r1, fp
    22f8:	47c8      	blx	r9
    22fa:	2800      	cmp	r0, #0
    22fc:	dbd7      	blt.n	22ae <cbvprintf+0x6ca>
    22fe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2300:	9e04      	ldr	r6, [sp, #16]
    2302:	442e      	add	r6, r5
    2304:	e005      	b.n	2312 <cbvprintf+0x72e>
				OUTC('0');
    2306:	4659      	mov	r1, fp
    2308:	2030      	movs	r0, #48	; 0x30
    230a:	47c8      	blx	r9
    230c:	2800      	cmp	r0, #0
    230e:	dbce      	blt.n	22ae <cbvprintf+0x6ca>
    2310:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2312:	1b73      	subs	r3, r6, r5
    2314:	2b00      	cmp	r3, #0
    2316:	dcf6      	bgt.n	2306 <cbvprintf+0x722>
			OUTS(bps, bpe);
    2318:	4653      	mov	r3, sl
    231a:	463a      	mov	r2, r7
    231c:	4659      	mov	r1, fp
    231e:	4648      	mov	r0, r9
    2320:	f006 fee3 	bl	90ea <outs>
    2324:	2800      	cmp	r0, #0
    2326:	dbc2      	blt.n	22ae <cbvprintf+0x6ca>
    2328:	4405      	add	r5, r0
		while (width > 0) {
    232a:	44a8      	add	r8, r5
    232c:	eba8 0305 	sub.w	r3, r8, r5
    2330:	2b00      	cmp	r3, #0
    2332:	f77f ae73 	ble.w	201c <cbvprintf+0x438>
			OUTC(' ');
    2336:	4659      	mov	r1, fp
    2338:	2020      	movs	r0, #32
    233a:	47c8      	blx	r9
    233c:	2800      	cmp	r0, #0
    233e:	dbb6      	blt.n	22ae <cbvprintf+0x6ca>
    2340:	3501      	adds	r5, #1
			--width;
    2342:	e7f3      	b.n	232c <cbvprintf+0x748>
    2344:	0000a794 	.word	0x0000a794

00002348 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2348:	b508      	push	{r3, lr}
	__asm__ volatile(
    234a:	f04f 0240 	mov.w	r2, #64	; 0x40
    234e:	f3ef 8311 	mrs	r3, BASEPRI
    2352:	f382 8812 	msr	BASEPRI_MAX, r2
    2356:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    235a:	f001 fd27 	bl	3dac <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    235e:	4803      	ldr	r0, [pc, #12]	; (236c <sys_reboot+0x24>)
    2360:	f006 fde5 	bl	8f2e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2364:	f000 fe60 	bl	3028 <arch_cpu_idle>
    2368:	e7fc      	b.n	2364 <sys_reboot+0x1c>
    236a:	bf00      	nop
    236c:	0000a79a 	.word	0x0000a79a

00002370 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2372:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2374:	460c      	mov	r4, r1
    2376:	b929      	cbnz	r1, 2384 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2378:	4d0e      	ldr	r5, [pc, #56]	; (23b4 <msg_process+0x44>)
    237a:	4b0f      	ldr	r3, [pc, #60]	; (23b8 <msg_process+0x48>)
    237c:	1b5b      	subs	r3, r3, r5
    237e:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2380:	42bc      	cmp	r4, r7
    2382:	db00      	blt.n	2386 <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2386:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    2388:	795b      	ldrb	r3, [r3, #5]
    238a:	b17b      	cbz	r3, 23ac <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    238c:	b94e      	cbnz	r6, 23a2 <msg_process+0x32>
    238e:	490b      	ldr	r1, [pc, #44]	; (23bc <msg_process+0x4c>)
    2390:	480b      	ldr	r0, [pc, #44]	; (23c0 <msg_process+0x50>)
    2392:	4a0c      	ldr	r2, [pc, #48]	; (23c4 <msg_process+0x54>)
    2394:	2386      	movs	r3, #134	; 0x86
    2396:	f006 fec6 	bl	9126 <assert_print>
    239a:	480a      	ldr	r0, [pc, #40]	; (23c4 <msg_process+0x54>)
    239c:	2186      	movs	r1, #134	; 0x86
    239e:	f006 febb 	bl	9118 <assert_post_action>
	backend->api->process(backend, msg);
    23a2:	682b      	ldr	r3, [r5, #0]
    23a4:	4631      	mov	r1, r6
    23a6:	681b      	ldr	r3, [r3, #0]
    23a8:	4628      	mov	r0, r5
    23aa:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    23ac:	3401      	adds	r4, #1
    23ae:	3510      	adds	r5, #16
    23b0:	e7e6      	b.n	2380 <msg_process+0x10>
    23b2:	bf00      	nop
    23b4:	00009cfc 	.word	0x00009cfc
    23b8:	00009d1c 	.word	0x00009d1c
    23bc:	0000a7fb 	.word	0x0000a7fb
    23c0:	0000a092 	.word	0x0000a092
    23c4:	0000a7c3 	.word	0x0000a7c3

000023c8 <log_format_func_t_get>:
}
    23c8:	4b01      	ldr	r3, [pc, #4]	; (23d0 <log_format_func_t_get+0x8>)
    23ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    23ce:	4770      	bx	lr
    23d0:	00009d80 	.word	0x00009d80

000023d4 <log_core_init>:
	panic_mode = false;
    23d4:	4a05      	ldr	r2, [pc, #20]	; (23ec <log_core_init+0x18>)
    23d6:	2300      	movs	r3, #0
    23d8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    23da:	4a05      	ldr	r2, [pc, #20]	; (23f0 <log_core_init+0x1c>)
    23dc:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    23de:	4b05      	ldr	r3, [pc, #20]	; (23f4 <log_core_init+0x20>)
    23e0:	4a05      	ldr	r2, [pc, #20]	; (23f8 <log_core_init+0x24>)
    23e2:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    23e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    23e8:	f000 ba94 	b.w	2914 <log_output_timestamp_freq_set>
    23ec:	20000eb0 	.word	0x20000eb0
    23f0:	2000057c 	.word	0x2000057c
    23f4:	2000009c 	.word	0x2000009c
    23f8:	00009143 	.word	0x00009143

000023fc <log_init>:
{
    23fc:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <log_init+0x68>)
    2400:	4c19      	ldr	r4, [pc, #100]	; (2468 <log_init+0x6c>)
    2402:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2404:	2c90      	cmp	r4, #144	; 0x90
    2406:	d90b      	bls.n	2420 <log_init+0x24>
    2408:	4918      	ldr	r1, [pc, #96]	; (246c <log_init+0x70>)
    240a:	4819      	ldr	r0, [pc, #100]	; (2470 <log_init+0x74>)
    240c:	4a19      	ldr	r2, [pc, #100]	; (2474 <log_init+0x78>)
    240e:	f240 2373 	movw	r3, #627	; 0x273
    2412:	f006 fe88 	bl	9126 <assert_print>
    2416:	4817      	ldr	r0, [pc, #92]	; (2474 <log_init+0x78>)
    2418:	f240 2173 	movw	r1, #627	; 0x273
    241c:	f006 fe7c 	bl	9118 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2420:	f3bf 8f5b 	dmb	ish
    2424:	4b14      	ldr	r3, [pc, #80]	; (2478 <log_init+0x7c>)
    2426:	e853 6f00 	ldrex	r6, [r3]
    242a:	1c72      	adds	r2, r6, #1
    242c:	e843 2100 	strex	r1, r2, [r3]
    2430:	2900      	cmp	r1, #0
    2432:	d1f8      	bne.n	2426 <log_init+0x2a>
    2434:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2438:	b91e      	cbnz	r6, 2442 <log_init+0x46>
    243a:	1125      	asrs	r5, r4, #4
    243c:	4c09      	ldr	r4, [pc, #36]	; (2464 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    243e:	42ae      	cmp	r6, r5
    2440:	db00      	blt.n	2444 <log_init+0x48>
}
    2442:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2444:	7b23      	ldrb	r3, [r4, #12]
    2446:	b153      	cbz	r3, 245e <log_init+0x62>
			if (backend->api->init != NULL) {
    2448:	6823      	ldr	r3, [r4, #0]
    244a:	699b      	ldr	r3, [r3, #24]
    244c:	b10b      	cbz	r3, 2452 <log_init+0x56>
				backend->api->init(backend);
    244e:	4620      	mov	r0, r4
    2450:	4798      	blx	r3
			log_backend_enable(backend,
    2452:	6863      	ldr	r3, [r4, #4]
    2454:	2204      	movs	r2, #4
    2456:	6819      	ldr	r1, [r3, #0]
    2458:	4620      	mov	r0, r4
    245a:	f000 f86f 	bl	253c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    245e:	3601      	adds	r6, #1
    2460:	3410      	adds	r4, #16
    2462:	e7ec      	b.n	243e <log_init+0x42>
    2464:	00009cfc 	.word	0x00009cfc
    2468:	00009d1c 	.word	0x00009d1c
    246c:	0000a853 	.word	0x0000a853
    2470:	0000a092 	.word	0x0000a092
    2474:	0000a80e 	.word	0x0000a80e
    2478:	20000584 	.word	0x20000584

0000247c <z_impl_log_panic>:
{
    247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    247e:	4f0c      	ldr	r7, [pc, #48]	; (24b0 <z_impl_log_panic+0x34>)
    2480:	783d      	ldrb	r5, [r7, #0]
    2482:	b94d      	cbnz	r5, 2498 <z_impl_log_panic+0x1c>
    2484:	4c0b      	ldr	r4, [pc, #44]	; (24b4 <z_impl_log_panic+0x38>)
    2486:	4e0c      	ldr	r6, [pc, #48]	; (24b8 <z_impl_log_panic+0x3c>)
	log_init();
    2488:	f7ff ffb8 	bl	23fc <log_init>
    248c:	1b36      	subs	r6, r6, r4
    248e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2490:	42b5      	cmp	r5, r6
    2492:	db02      	blt.n	249a <z_impl_log_panic+0x1e>
	panic_mode = true;
    2494:	2301      	movs	r3, #1
    2496:	703b      	strb	r3, [r7, #0]
}
    2498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    249a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    249c:	795b      	ldrb	r3, [r3, #5]
    249e:	b11b      	cbz	r3, 24a8 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    24a0:	6823      	ldr	r3, [r4, #0]
    24a2:	4620      	mov	r0, r4
    24a4:	695b      	ldr	r3, [r3, #20]
    24a6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    24a8:	3501      	adds	r5, #1
    24aa:	3410      	adds	r4, #16
    24ac:	e7f0      	b.n	2490 <z_impl_log_panic+0x14>
    24ae:	bf00      	nop
    24b0:	20000eb0 	.word	0x20000eb0
    24b4:	00009cfc 	.word	0x00009cfc
    24b8:	00009d1c 	.word	0x00009d1c

000024bc <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    24bc:	4b01      	ldr	r3, [pc, #4]	; (24c4 <z_log_notify_backend_enabled+0x8>)
    24be:	2201      	movs	r2, #1
    24c0:	701a      	strb	r2, [r3, #0]
}
    24c2:	4770      	bx	lr
    24c4:	20000eaf 	.word	0x20000eaf

000024c8 <z_log_dropped>:
    24c8:	4b0c      	ldr	r3, [pc, #48]	; (24fc <z_log_dropped+0x34>)
    24ca:	f3bf 8f5b 	dmb	ish
    24ce:	e853 1f00 	ldrex	r1, [r3]
    24d2:	3101      	adds	r1, #1
    24d4:	e843 1200 	strex	r2, r1, [r3]
    24d8:	2a00      	cmp	r2, #0
    24da:	d1f8      	bne.n	24ce <z_log_dropped+0x6>
    24dc:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    24e0:	b158      	cbz	r0, 24fa <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    24e2:	f3bf 8f5b 	dmb	ish
    24e6:	4b06      	ldr	r3, [pc, #24]	; (2500 <z_log_dropped+0x38>)
    24e8:	e853 1f00 	ldrex	r1, [r3]
    24ec:	3901      	subs	r1, #1
    24ee:	e843 1200 	strex	r2, r1, [r3]
    24f2:	2a00      	cmp	r2, #0
    24f4:	d1f8      	bne.n	24e8 <z_log_dropped+0x20>
    24f6:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    24fa:	4770      	bx	lr
    24fc:	2000057c 	.word	0x2000057c
    2500:	20000580 	.word	0x20000580

00002504 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    2504:	4b05      	ldr	r3, [pc, #20]	; (251c <z_log_msg2_commit+0x18>)
{
    2506:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2508:	681b      	ldr	r3, [r3, #0]
{
    250a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    250c:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    250e:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    2510:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    2512:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    2518:	f7ff bf2a 	b.w	2370 <msg_process>
    251c:	2000009c 	.word	0x2000009c

00002520 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2520:	4a04      	ldr	r2, [pc, #16]	; (2534 <log_source_name_get+0x14>)
    2522:	4b05      	ldr	r3, [pc, #20]	; (2538 <log_source_name_get+0x18>)
    2524:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2526:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    252a:	bf34      	ite	cc
    252c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2530:	2000      	movcs	r0, #0
}
    2532:	4770      	bx	lr
    2534:	00009cac 	.word	0x00009cac
    2538:	00009cfc 	.word	0x00009cfc

0000253c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    253c:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    253e:	4c10      	ldr	r4, [pc, #64]	; (2580 <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2540:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    2542:	1b04      	subs	r4, r0, r4
    2544:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2546:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    2548:	3401      	adds	r4, #1
{
    254a:	4605      	mov	r5, r0
    254c:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    254e:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2550:	b963      	cbnz	r3, 256c <log_backend_enable+0x30>
    2552:	490c      	ldr	r1, [pc, #48]	; (2584 <log_backend_enable+0x48>)
    2554:	4a0c      	ldr	r2, [pc, #48]	; (2588 <log_backend_enable+0x4c>)
    2556:	480d      	ldr	r0, [pc, #52]	; (258c <log_backend_enable+0x50>)
    2558:	23bb      	movs	r3, #187	; 0xbb
    255a:	f006 fde4 	bl	9126 <assert_print>
    255e:	480c      	ldr	r0, [pc, #48]	; (2590 <log_backend_enable+0x54>)
    2560:	f006 fde1 	bl	9126 <assert_print>
    2564:	4808      	ldr	r0, [pc, #32]	; (2588 <log_backend_enable+0x4c>)
    2566:	21bb      	movs	r1, #187	; 0xbb
    2568:	f006 fdd6 	bl	9118 <assert_post_action>
	backend->cb->id = id;
    256c:	686b      	ldr	r3, [r5, #4]
    256e:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    2570:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    2572:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    2574:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    2576:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    257c:	f7ff bf9e 	b.w	24bc <z_log_notify_backend_enabled>
    2580:	00009cfc 	.word	0x00009cfc
    2584:	0000a8d3 	.word	0x0000a8d3
    2588:	0000a87b 	.word	0x0000a87b
    258c:	0000a092 	.word	0x0000a092
    2590:	0000a8e9 	.word	0x0000a8e9

00002594 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2594:	b40e      	push	{r1, r2, r3}
    2596:	b503      	push	{r0, r1, lr}
    2598:	ab03      	add	r3, sp, #12
    259a:	4601      	mov	r1, r0
    259c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    25a0:	4804      	ldr	r0, [pc, #16]	; (25b4 <print_formatted+0x20>)
	va_start(args, fmt);
    25a2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    25a4:	f7ff fb1e 	bl	1be4 <cbvprintf>
	va_end(args);

	return length;
}
    25a8:	b002      	add	sp, #8
    25aa:	f85d eb04 	ldr.w	lr, [sp], #4
    25ae:	b003      	add	sp, #12
    25b0:	4770      	bx	lr
    25b2:	bf00      	nop
    25b4:	00009175 	.word	0x00009175

000025b8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    25b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25bc:	b087      	sub	sp, #28
    25be:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    25c0:	f001 0301 	and.w	r3, r1, #1
{
    25c4:	9205      	str	r2, [sp, #20]
    25c6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    25ca:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    25ce:	9304      	str	r3, [sp, #16]
{
    25d0:	4607      	mov	r7, r0
    25d2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    25d4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    25d8:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    25dc:	f006 fdc8 	bl	9170 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    25e0:	4602      	mov	r2, r0
    25e2:	2800      	cmp	r0, #0
    25e4:	d040      	beq.n	2668 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    25e6:	4937      	ldr	r1, [pc, #220]	; (26c4 <prefix_print+0x10c>)
    25e8:	4638      	mov	r0, r7
    25ea:	f7ff ffd3 	bl	2594 <print_formatted>
    25ee:	4605      	mov	r5, r0
	}

	if (stamp) {
    25f0:	f1bb 0f00 	cmp.w	fp, #0
    25f4:	d008      	beq.n	2608 <prefix_print+0x50>
	if (!format) {
    25f6:	f018 0f44 	tst.w	r8, #68	; 0x44
    25fa:	d137      	bne.n	266c <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    25fc:	4932      	ldr	r1, [pc, #200]	; (26c8 <prefix_print+0x110>)
    25fe:	4622      	mov	r2, r4
    2600:	4638      	mov	r0, r7
    2602:	f7ff ffc7 	bl	2594 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2606:	4405      	add	r5, r0
	if (color) {
    2608:	9b04      	ldr	r3, [sp, #16]
    260a:	b153      	cbz	r3, 2622 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    260c:	4b2f      	ldr	r3, [pc, #188]	; (26cc <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    260e:	4930      	ldr	r1, [pc, #192]	; (26d0 <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    2610:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    2614:	4b2f      	ldr	r3, [pc, #188]	; (26d4 <prefix_print+0x11c>)
    2616:	4638      	mov	r0, r7
    2618:	2a00      	cmp	r2, #0
    261a:	bf08      	it	eq
    261c:	461a      	moveq	r2, r3
    261e:	f7ff ffb9 	bl	2594 <print_formatted>
	if (level_on) {
    2622:	b13e      	cbz	r6, 2634 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2624:	4b2c      	ldr	r3, [pc, #176]	; (26d8 <prefix_print+0x120>)
    2626:	492d      	ldr	r1, [pc, #180]	; (26dc <prefix_print+0x124>)
    2628:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    262c:	4638      	mov	r0, r7
    262e:	f7ff ffb1 	bl	2594 <print_formatted>
    2632:	4606      	mov	r6, r0
	if (source_id >= 0) {
    2634:	f1ba 0f00 	cmp.w	sl, #0
    2638:	db12      	blt.n	2660 <prefix_print+0xa8>
		total += print_formatted(output,
    263a:	9b05      	ldr	r3, [sp, #20]
    263c:	4c28      	ldr	r4, [pc, #160]	; (26e0 <prefix_print+0x128>)
    263e:	b123      	cbz	r3, 264a <prefix_print+0x92>
    2640:	4b28      	ldr	r3, [pc, #160]	; (26e4 <prefix_print+0x12c>)
    2642:	f1b9 0f04 	cmp.w	r9, #4
    2646:	bf08      	it	eq
    2648:	461c      	moveq	r4, r3
    264a:	4651      	mov	r1, sl
    264c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2650:	f7ff ff66 	bl	2520 <log_source_name_get>
    2654:	4621      	mov	r1, r4
    2656:	4602      	mov	r2, r0
    2658:	4638      	mov	r0, r7
    265a:	f7ff ff9b 	bl	2594 <print_formatted>
    265e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2660:	1970      	adds	r0, r6, r5
    2662:	b007      	add	sp, #28
    2664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2668:	4605      	mov	r5, r0
    266a:	e7c1      	b.n	25f0 <prefix_print+0x38>
	} else if (freq != 0U) {
    266c:	4b1e      	ldr	r3, [pc, #120]	; (26e8 <prefix_print+0x130>)
    266e:	6818      	ldr	r0, [r3, #0]
    2670:	2800      	cmp	r0, #0
    2672:	d0c8      	beq.n	2606 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    2674:	4b1d      	ldr	r3, [pc, #116]	; (26ec <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    2676:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    267a:	681b      	ldr	r3, [r3, #0]
    267c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    2680:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2684:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    2688:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    268c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    2690:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    2694:	fbb3 f2f1 	udiv	r2, r3, r1
    2698:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    269c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    26a0:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26a4:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    26a8:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26ac:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    26b0:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26b2:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    26b6:	490e      	ldr	r1, [pc, #56]	; (26f0 <prefix_print+0x138>)
    26b8:	e9cd e401 	strd	lr, r4, [sp, #4]
    26bc:	4638      	mov	r0, r7
    26be:	f7ff ff69 	bl	2594 <print_formatted>
    26c2:	e7a0      	b.n	2606 <prefix_print+0x4e>
    26c4:	0000a919 	.word	0x0000a919
    26c8:	0000a91d 	.word	0x0000a91d
    26cc:	00009d8c 	.word	0x00009d8c
    26d0:	0000a942 	.word	0x0000a942
    26d4:	0000a90b 	.word	0x0000a90b
    26d8:	00009da0 	.word	0x00009da0
    26dc:	0000a945 	.word	0x0000a945
    26e0:	0000a914 	.word	0x0000a914
    26e4:	0000a910 	.word	0x0000a910
    26e8:	2000058c 	.word	0x2000058c
    26ec:	20000588 	.word	0x20000588
    26f0:	0000a926 	.word	0x0000a926

000026f4 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    26f4:	06ca      	lsls	r2, r1, #27
    26f6:	d405      	bmi.n	2704 <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    26f8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    26fa:	bf4c      	ite	mi
    26fc:	4902      	ldrmi	r1, [pc, #8]	; (2708 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    26fe:	4903      	ldrpl	r1, [pc, #12]	; (270c <newline_print+0x18>)
    2700:	f7ff bf48 	b.w	2594 <print_formatted>
}
    2704:	4770      	bx	lr
    2706:	bf00      	nop
    2708:	0000ba2e 	.word	0x0000ba2e
    270c:	0000a94b 	.word	0x0000a94b

00002710 <hexdump_line_print>:
{
    2710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2714:	460f      	mov	r7, r1
	newline_print(output, flags);
    2716:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    2718:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 27d4 <hexdump_line_print+0xc4>
{
    271c:	4604      	mov	r4, r0
    271e:	4616      	mov	r6, r2
    2720:	461d      	mov	r5, r3
	newline_print(output, flags);
    2722:	f7ff ffe7 	bl	26f4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2726:	f04f 0800 	mov.w	r8, #0
    272a:	45a8      	cmp	r8, r5
    272c:	db28      	blt.n	2780 <hexdump_line_print+0x70>
		if (i < length) {
    272e:	b376      	cbz	r6, 278e <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    2730:	783a      	ldrb	r2, [r7, #0]
    2732:	4929      	ldr	r1, [pc, #164]	; (27d8 <hexdump_line_print+0xc8>)
    2734:	4620      	mov	r0, r4
    2736:	f7ff ff2d 	bl	2594 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    273a:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    273c:	076a      	lsls	r2, r5, #29
    273e:	d103      	bne.n	2748 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    2740:	4924      	ldr	r1, [pc, #144]	; (27d4 <hexdump_line_print+0xc4>)
    2742:	4620      	mov	r0, r4
    2744:	f7ff ff26 	bl	2594 <print_formatted>
		if (i < length) {
    2748:	42b5      	cmp	r5, r6
    274a:	d225      	bcs.n	2798 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    274c:	5d7a      	ldrb	r2, [r7, r5]
    274e:	4922      	ldr	r1, [pc, #136]	; (27d8 <hexdump_line_print+0xc8>)
    2750:	4620      	mov	r0, r4
    2752:	f7ff ff1f 	bl	2594 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2756:	3501      	adds	r5, #1
    2758:	2d10      	cmp	r5, #16
    275a:	d1ef      	bne.n	273c <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    275c:	491f      	ldr	r1, [pc, #124]	; (27dc <hexdump_line_print+0xcc>)
    275e:	4620      	mov	r0, r4
    2760:	f7ff ff18 	bl	2594 <print_formatted>
		if (i < length) {
    2764:	b9ee      	cbnz	r6, 27a2 <hexdump_line_print+0x92>
			print_formatted(output, " ");
    2766:	491b      	ldr	r1, [pc, #108]	; (27d4 <hexdump_line_print+0xc4>)
    2768:	4620      	mov	r0, r4
    276a:	f7ff ff13 	bl	2594 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    276e:	2501      	movs	r5, #1
		if (i < length) {
    2770:	42b5      	cmp	r5, r6
    2772:	462b      	mov	r3, r5
    2774:	d317      	bcc.n	27a6 <hexdump_line_print+0x96>
			print_formatted(output, " ");
    2776:	4917      	ldr	r1, [pc, #92]	; (27d4 <hexdump_line_print+0xc4>)
    2778:	4620      	mov	r0, r4
    277a:	f7ff ff0b 	bl	2594 <print_formatted>
    277e:	e01c      	b.n	27ba <hexdump_line_print+0xaa>
		print_formatted(output, " ");
    2780:	4649      	mov	r1, r9
    2782:	4620      	mov	r0, r4
    2784:	f7ff ff06 	bl	2594 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2788:	f108 0801 	add.w	r8, r8, #1
    278c:	e7cd      	b.n	272a <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    278e:	4914      	ldr	r1, [pc, #80]	; (27e0 <hexdump_line_print+0xd0>)
    2790:	4620      	mov	r0, r4
    2792:	f7ff feff 	bl	2594 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2796:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    2798:	4911      	ldr	r1, [pc, #68]	; (27e0 <hexdump_line_print+0xd0>)
    279a:	4620      	mov	r0, r4
    279c:	f7ff fefa 	bl	2594 <print_formatted>
    27a0:	e7d9      	b.n	2756 <hexdump_line_print+0x46>
		if (i < length) {
    27a2:	2500      	movs	r5, #0
    27a4:	462b      	mov	r3, r5
			char c = (char)data[i];
    27a6:	5cfa      	ldrb	r2, [r7, r3]
			print_formatted(output, "%c",
    27a8:	490e      	ldr	r1, [pc, #56]	; (27e4 <hexdump_line_print+0xd4>)
	return (int)((((unsigned)c) >= ' ') &&
    27aa:	f1a2 0320 	sub.w	r3, r2, #32
    27ae:	2b5f      	cmp	r3, #95	; 0x5f
    27b0:	bf28      	it	cs
    27b2:	222e      	movcs	r2, #46	; 0x2e
    27b4:	4620      	mov	r0, r4
    27b6:	f7ff feed 	bl	2594 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    27ba:	3501      	adds	r5, #1
    27bc:	2d10      	cmp	r5, #16
    27be:	d006      	beq.n	27ce <hexdump_line_print+0xbe>
		if (i > 0 && !(i % 8)) {
    27c0:	076b      	lsls	r3, r5, #29
    27c2:	d1d5      	bne.n	2770 <hexdump_line_print+0x60>
			print_formatted(output, " ");
    27c4:	4903      	ldr	r1, [pc, #12]	; (27d4 <hexdump_line_print+0xc4>)
    27c6:	4620      	mov	r0, r4
    27c8:	f7ff fee4 	bl	2594 <print_formatted>
    27cc:	e7d0      	b.n	2770 <hexdump_line_print+0x60>
}
    27ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    27d2:	bf00      	nop
    27d4:	0000a956 	.word	0x0000a956
    27d8:	0000a94e 	.word	0x0000a94e
    27dc:	0000a958 	.word	0x0000a958
    27e0:	0000a954 	.word	0x0000a954
    27e4:	0000a95a 	.word	0x0000a95a

000027e8 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    27e8:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    27ea:	07cb      	lsls	r3, r1, #31
{
    27ec:	4605      	mov	r5, r0
    27ee:	460c      	mov	r4, r1
	if (color) {
    27f0:	d503      	bpl.n	27fa <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    27f2:	4a05      	ldr	r2, [pc, #20]	; (2808 <postfix_print+0x20>)
    27f4:	4905      	ldr	r1, [pc, #20]	; (280c <postfix_print+0x24>)
    27f6:	f7ff fecd 	bl	2594 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    27fa:	4621      	mov	r1, r4
    27fc:	4628      	mov	r0, r5
}
    27fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    2802:	f7ff bf77 	b.w	26f4 <newline_print>
    2806:	bf00      	nop
    2808:	0000a90b 	.word	0x0000a90b
    280c:	0000a942 	.word	0x0000a942

00002810 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    2814:	460e      	mov	r6, r1
    2816:	4690      	mov	r8, r2
    2818:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    281c:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    281e:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    2822:	4607      	mov	r7, r0
    2824:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    2826:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    282a:	d023      	beq.n	2874 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    282c:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    282e:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    2830:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2834:	b1d8      	cbz	r0, 286e <log_output_msg2_process+0x5e>
    2836:	4930      	ldr	r1, [pc, #192]	; (28f8 <log_output_msg2_process+0xe8>)
    2838:	1a40      	subs	r0, r0, r1
    283a:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    283e:	e9cd 2001 	strd	r2, r0, [sp, #4]
    2842:	f8cd 9000 	str.w	r9, [sp]
    2846:	2200      	movs	r2, #0
    2848:	4641      	mov	r1, r8
    284a:	4638      	mov	r0, r7
    284c:	f7ff feb4 	bl	25b8 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2850:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2852:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2856:	4682      	mov	sl, r0
	if (len) {
    2858:	b9b3      	cbnz	r3, 2888 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    285a:	886c      	ldrh	r4, [r5, #2]
    285c:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2860:	b9f4      	cbnz	r4, 28a0 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    2862:	464a      	mov	r2, r9
    2864:	4641      	mov	r1, r8
    2866:	4638      	mov	r0, r7
    2868:	f7ff ffbe 	bl	27e8 <postfix_print>
    286c:	e02e      	b.n	28cc <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    286e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2872:	e7e4      	b.n	283e <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    2874:	680b      	ldr	r3, [r1, #0]
	if (len) {
    2876:	f3c3 2349 	ubfx	r3, r3, #9, #10
    287a:	bb6b      	cbnz	r3, 28d8 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    287c:	884c      	ldrh	r4, [r1, #2]
    287e:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    2882:	b31c      	cbz	r4, 28cc <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    2884:	46ca      	mov	sl, r9
    2886:	e00b      	b.n	28a0 <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2888:	481c      	ldr	r0, [pc, #112]	; (28fc <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    288a:	491d      	ldr	r1, [pc, #116]	; (2900 <log_output_msg2_process+0xf0>)
    288c:	4633      	mov	r3, r6
    288e:	463a      	mov	r2, r7
    2890:	f006 fb0b 	bl	8eaa <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    2894:	2800      	cmp	r0, #0
    2896:	db22      	blt.n	28de <log_output_msg2_process+0xce>
    2898:	886c      	ldrh	r4, [r5, #2]
    289a:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    289e:	b194      	cbz	r4, 28c6 <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    28a0:	682b      	ldr	r3, [r5, #0]
    28a2:	f3c3 2349 	ubfx	r3, r3, #9, #10
    28a6:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    28a8:	2c10      	cmp	r4, #16
    28aa:	4625      	mov	r5, r4
    28ac:	bf28      	it	cs
    28ae:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    28b0:	4631      	mov	r1, r6
    28b2:	f8cd 8000 	str.w	r8, [sp]
    28b6:	4653      	mov	r3, sl
    28b8:	462a      	mov	r2, r5
    28ba:	4638      	mov	r0, r7
    28bc:	f7ff ff28 	bl	2710 <hexdump_line_print>
	} while (len);
    28c0:	1b64      	subs	r4, r4, r5
		data += length;
    28c2:	442e      	add	r6, r5
	} while (len);
    28c4:	d1f0      	bne.n	28a8 <log_output_msg2_process+0x98>
	if (!raw_string) {
    28c6:	f1b9 0f00 	cmp.w	r9, #0
    28ca:	d1ca      	bne.n	2862 <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    28cc:	4638      	mov	r0, r7
}
    28ce:	b004      	add	sp, #16
    28d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    28d4:	f006 bc76 	b.w	91c4 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    28d8:	480a      	ldr	r0, [pc, #40]	; (2904 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    28da:	46ca      	mov	sl, r9
    28dc:	e7d5      	b.n	288a <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    28de:	4a0a      	ldr	r2, [pc, #40]	; (2908 <log_output_msg2_process+0xf8>)
    28e0:	490a      	ldr	r1, [pc, #40]	; (290c <log_output_msg2_process+0xfc>)
    28e2:	480b      	ldr	r0, [pc, #44]	; (2910 <log_output_msg2_process+0x100>)
    28e4:	f240 23b7 	movw	r3, #695	; 0x2b7
    28e8:	f006 fc1d 	bl	9126 <assert_print>
    28ec:	4806      	ldr	r0, [pc, #24]	; (2908 <log_output_msg2_process+0xf8>)
    28ee:	f240 21b7 	movw	r1, #695	; 0x2b7
    28f2:	f006 fc11 	bl	9118 <assert_post_action>
    28f6:	e7cf      	b.n	2898 <log_output_msg2_process+0x88>
    28f8:	00009cac 	.word	0x00009cac
    28fc:	00009175 	.word	0x00009175
    2900:	00001be5 	.word	0x00001be5
    2904:	00009191 	.word	0x00009191
    2908:	0000a95d 	.word	0x0000a95d
    290c:	0000a999 	.word	0x0000a999
    2910:	0000a092 	.word	0x0000a092

00002914 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2914:	4a07      	ldr	r2, [pc, #28]	; (2934 <log_output_timestamp_freq_set+0x20>)
    2916:	2100      	movs	r1, #0
    2918:	2301      	movs	r3, #1
    291a:	4290      	cmp	r0, r2
    291c:	d806      	bhi.n	292c <log_output_timestamp_freq_set+0x18>
    291e:	4a06      	ldr	r2, [pc, #24]	; (2938 <log_output_timestamp_freq_set+0x24>)
    2920:	b901      	cbnz	r1, 2924 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2922:	2301      	movs	r3, #1
    2924:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2926:	4b05      	ldr	r3, [pc, #20]	; (293c <log_output_timestamp_freq_set+0x28>)
    2928:	6018      	str	r0, [r3, #0]
}
    292a:	4770      	bx	lr
		frequency /= 2U;
    292c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    292e:	005b      	lsls	r3, r3, #1
    2930:	2101      	movs	r1, #1
    2932:	e7f2      	b.n	291a <log_output_timestamp_freq_set+0x6>
    2934:	000f4240 	.word	0x000f4240
    2938:	20000588 	.word	0x20000588
    293c:	2000058c 	.word	0x2000058c

00002940 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2944:	b085      	sub	sp, #20
    2946:	af02      	add	r7, sp, #8
    2948:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    294c:	4604      	mov	r4, r0
    294e:	4688      	mov	r8, r1
    2950:	4693      	mov	fp, r2
    2952:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    2954:	2e00      	cmp	r6, #0
    2956:	d04e      	beq.n	29f6 <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    2958:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    295c:	f8cd a000 	str.w	sl, [sp]
    2960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2962:	4633      	mov	r3, r6
    2964:	2110      	movs	r1, #16
    2966:	2000      	movs	r0, #0
    2968:	f7fe fb54 	bl	1014 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    296c:	1e05      	subs	r5, r0, #0
    296e:	da09      	bge.n	2984 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    2970:	4922      	ldr	r1, [pc, #136]	; (29fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    2972:	4823      	ldr	r0, [pc, #140]	; (2a00 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    2974:	4a23      	ldr	r2, [pc, #140]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    2976:	2367      	movs	r3, #103	; 0x67
    2978:	f006 fbd5 	bl	9126 <assert_print>
    297c:	4821      	ldr	r0, [pc, #132]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    297e:	2167      	movs	r1, #103	; 0x67
    2980:	f006 fbca 	bl	9118 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2984:	4b20      	ldr	r3, [pc, #128]	; (2a08 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    2986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2988:	f004 0407 	and.w	r4, r4, #7
    298c:	f00b 0b07 	and.w	fp, fp, #7
    2990:	00e4      	lsls	r4, r4, #3
    2992:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    2996:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    299a:	431c      	orrs	r4, r3
    299c:	4b1b      	ldr	r3, [pc, #108]	; (2a0c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    299e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    29a2:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    29a4:	4613      	mov	r3, r2
    29a6:	3317      	adds	r3, #23
    29a8:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    29aa:	f023 0307 	bic.w	r3, r3, #7
    29ae:	ebad 0d03 	sub.w	sp, sp, r3
    29b2:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    29b6:	b1a6      	cbz	r6, 29e2 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    29b8:	f8cd a000 	str.w	sl, [sp]
    29bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    29be:	4633      	mov	r3, r6
    29c0:	4629      	mov	r1, r5
    29c2:	f10b 0010 	add.w	r0, fp, #16
    29c6:	f7fe fb25 	bl	1014 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    29ca:	2800      	cmp	r0, #0
    29cc:	da09      	bge.n	29e2 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    29ce:	490b      	ldr	r1, [pc, #44]	; (29fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    29d0:	480b      	ldr	r0, [pc, #44]	; (2a00 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    29d2:	4a0c      	ldr	r2, [pc, #48]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    29d4:	2381      	movs	r3, #129	; 0x81
    29d6:	f006 fba6 	bl	9126 <assert_print>
    29da:	480a      	ldr	r0, [pc, #40]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    29dc:	2181      	movs	r1, #129	; 0x81
    29de:	f006 fb9b 	bl	9118 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    29e2:	464b      	mov	r3, r9
    29e4:	4622      	mov	r2, r4
    29e6:	4641      	mov	r1, r8
    29e8:	4658      	mov	r0, fp
    29ea:	f006 fbf8 	bl	91de <z_log_msg2_finalize>
	}
}
    29ee:	370c      	adds	r7, #12
    29f0:	46bd      	mov	sp, r7
    29f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    29f6:	4635      	mov	r5, r6
    29f8:	e7c4      	b.n	2984 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    29fa:	bf00      	nop
    29fc:	0000a9ef 	.word	0x0000a9ef
    2a00:	0000a092 	.word	0x0000a092
    2a04:	0000a9c2 	.word	0x0000a9c2
    2a08:	0007fe00 	.word	0x0007fe00
    2a0c:	7ff80000 	.word	0x7ff80000

00002a10 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    2a12:	4f07      	ldr	r7, [pc, #28]	; (2a30 <char_out+0x20>)
{
    2a14:	460d      	mov	r5, r1
    2a16:	4604      	mov	r4, r0
    2a18:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2a1a:	42b4      	cmp	r4, r6
    2a1c:	d101      	bne.n	2a22 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2a1e:	4628      	mov	r0, r5
    2a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a28:	6883      	ldr	r3, [r0, #8]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2a2e:	e7f4      	b.n	2a1a <char_out+0xa>
    2a30:	200005a8 	.word	0x200005a8

00002a34 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2a34:	4b01      	ldr	r3, [pc, #4]	; (2a3c <format_set+0x8>)
	return 0;
}
    2a36:	2000      	movs	r0, #0
	log_format_current = log_type;
    2a38:	6019      	str	r1, [r3, #0]
}
    2a3a:	4770      	bx	lr
    2a3c:	200005a4 	.word	0x200005a4

00002a40 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2a40:	4b02      	ldr	r3, [pc, #8]	; (2a4c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2a42:	4803      	ldr	r0, [pc, #12]	; (2a50 <panic+0x10>)
    2a44:	2201      	movs	r2, #1
    2a46:	701a      	strb	r2, [r3, #0]
    2a48:	f006 bbbc 	b.w	91c4 <log_output_flush>
    2a4c:	20000eb2 	.word	0x20000eb2
    2a50:	00009dd4 	.word	0x00009dd4

00002a54 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a54:	4b06      	ldr	r3, [pc, #24]	; (2a70 <process+0x1c>)
{
    2a56:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a58:	6818      	ldr	r0, [r3, #0]
{
    2a5a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a5c:	f7ff fcb4 	bl	23c8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2a60:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a62:	4603      	mov	r3, r0
}
    2a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    2a68:	4802      	ldr	r0, [pc, #8]	; (2a74 <process+0x20>)
    2a6a:	220f      	movs	r2, #15
    2a6c:	4718      	bx	r3
    2a6e:	bf00      	nop
    2a70:	200005a4 	.word	0x200005a4
    2a74:	00009dd4 	.word	0x00009dd4

00002a78 <log_backend_uart_init>:
{
    2a78:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <log_backend_uart_init+0x28>)
    2a7c:	4809      	ldr	r0, [pc, #36]	; (2aa4 <log_backend_uart_init+0x2c>)
    2a7e:	6018      	str	r0, [r3, #0]
    2a80:	f006 ff15 	bl	98ae <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2a84:	b958      	cbnz	r0, 2a9e <log_backend_uart_init+0x26>
    2a86:	4908      	ldr	r1, [pc, #32]	; (2aa8 <log_backend_uart_init+0x30>)
    2a88:	4808      	ldr	r0, [pc, #32]	; (2aac <log_backend_uart_init+0x34>)
    2a8a:	4a09      	ldr	r2, [pc, #36]	; (2ab0 <log_backend_uart_init+0x38>)
    2a8c:	2379      	movs	r3, #121	; 0x79
    2a8e:	f006 fb4a 	bl	9126 <assert_print>
}
    2a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2a96:	4806      	ldr	r0, [pc, #24]	; (2ab0 <log_backend_uart_init+0x38>)
    2a98:	2179      	movs	r1, #121	; 0x79
    2a9a:	f006 bb3d 	b.w	9118 <assert_post_action>
}
    2a9e:	bd08      	pop	{r3, pc}
    2aa0:	200005a8 	.word	0x200005a8
    2aa4:	00009afc 	.word	0x00009afc
    2aa8:	0000aa2e 	.word	0x0000aa2e
    2aac:	0000a092 	.word	0x0000a092
    2ab0:	0000a9f9 	.word	0x0000a9f9

00002ab4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2ab4:	4b01      	ldr	r3, [pc, #4]	; (2abc <log_backend_rtt_init+0x8>)
    2ab6:	2201      	movs	r2, #1
    2ab8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2aba:	4770      	bx	lr
    2abc:	20000eb3 	.word	0x20000eb3

00002ac0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2ac0:	4b01      	ldr	r3, [pc, #4]	; (2ac8 <format_set+0x8>)
	return 0;
}
    2ac2:	2000      	movs	r0, #0
	log_format_current = log_type;
    2ac4:	6019      	str	r1, [r3, #0]
}
    2ac6:	4770      	bx	lr
    2ac8:	200005c0 	.word	0x200005c0

00002acc <panic>:
	panic_mode = true;
    2acc:	4b02      	ldr	r3, [pc, #8]	; (2ad8 <panic+0xc>)
    2ace:	4803      	ldr	r0, [pc, #12]	; (2adc <panic+0x10>)
    2ad0:	2201      	movs	r2, #1
    2ad2:	701a      	strb	r2, [r3, #0]
    2ad4:	f006 bb76 	b.w	91c4 <log_output_flush>
    2ad8:	20000eb4 	.word	0x20000eb4
    2adc:	00009e04 	.word	0x00009e04

00002ae0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae0:	4b06      	ldr	r3, [pc, #24]	; (2afc <process+0x1c>)
{
    2ae2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae4:	6818      	ldr	r0, [r3, #0]
{
    2ae6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae8:	f7ff fc6e 	bl	23c8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2aec:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2aee:	4603      	mov	r3, r0
}
    2af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2af4:	4802      	ldr	r0, [pc, #8]	; (2b00 <process+0x20>)
    2af6:	220f      	movs	r2, #15
    2af8:	4718      	bx	r3
    2afa:	bf00      	nop
    2afc:	200005c0 	.word	0x200005c0
    2b00:	00009e04 	.word	0x00009e04

00002b04 <data_out_block_mode>:
{
    2b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b06:	4d19      	ldr	r5, [pc, #100]	; (2b6c <data_out_block_mode+0x68>)
    2b08:	4607      	mov	r7, r0
    2b0a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2b0c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2b0e:	4632      	mov	r2, r6
    2b10:	4639      	mov	r1, r7
    2b12:	2000      	movs	r0, #0
    2b14:	f003 faea 	bl	60ec <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2b18:	b1c8      	cbz	r0, 2b4e <data_out_block_mode+0x4a>
	host_present = true;
    2b1a:	2301      	movs	r3, #1
    2b1c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2b1e:	4b14      	ldr	r3, [pc, #80]	; (2b70 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	b92b      	cbnz	r3, 2b30 <data_out_block_mode+0x2c>
}
    2b24:	4630      	mov	r0, r6
    2b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    2b28:	b95c      	cbnz	r4, 2b42 <data_out_block_mode+0x3e>
		host_present = false;
    2b2a:	702c      	strb	r4, [r5, #0]
    2b2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2b30:	2000      	movs	r0, #0
    2b32:	f003 fb23 	bl	617c <SEGGER_RTT_HasDataUp>
    2b36:	2800      	cmp	r0, #0
    2b38:	d0f4      	beq.n	2b24 <data_out_block_mode+0x20>
    2b3a:	782b      	ldrb	r3, [r5, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d1f3      	bne.n	2b28 <data_out_block_mode+0x24>
    2b40:	e7f0      	b.n	2b24 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2b42:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2b44:	f241 3088 	movw	r0, #5000	; 0x1388
    2b48:	f006 ff31 	bl	99ae <z_impl_k_busy_wait>
}
    2b4c:	e7f0      	b.n	2b30 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2b4e:	782b      	ldrb	r3, [r5, #0]
    2b50:	b113      	cbz	r3, 2b58 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2b52:	3c01      	subs	r4, #1
    2b54:	d104      	bne.n	2b60 <data_out_block_mode+0x5c>
		host_present = false;
    2b56:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2b58:	782b      	ldrb	r3, [r5, #0]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d1d7      	bne.n	2b0e <data_out_block_mode+0xa>
    2b5e:	e7e1      	b.n	2b24 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2b60:	f241 3088 	movw	r0, #5000	; 0x1388
    2b64:	f006 ff23 	bl	99ae <z_impl_k_busy_wait>
    2b68:	e7f6      	b.n	2b58 <data_out_block_mode+0x54>
    2b6a:	bf00      	nop
    2b6c:	20000eb3 	.word	0x20000eb3
    2b70:	20000eb4 	.word	0x20000eb4

00002b74 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b78:	4605      	mov	r5, r0
    2b7a:	f04f 0340 	mov.w	r3, #64	; 0x40
    2b7e:	f3ef 8611 	mrs	r6, BASEPRI
    2b82:	f383 8812 	msr	BASEPRI_MAX, r3
    2b86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b8a:	4821      	ldr	r0, [pc, #132]	; (2c10 <pm_state_notify+0x9c>)
    2b8c:	f003 fed8 	bl	6940 <z_spin_lock_valid>
    2b90:	b968      	cbnz	r0, 2bae <pm_state_notify+0x3a>
    2b92:	4a20      	ldr	r2, [pc, #128]	; (2c14 <pm_state_notify+0xa0>)
    2b94:	4920      	ldr	r1, [pc, #128]	; (2c18 <pm_state_notify+0xa4>)
    2b96:	4821      	ldr	r0, [pc, #132]	; (2c1c <pm_state_notify+0xa8>)
    2b98:	238e      	movs	r3, #142	; 0x8e
    2b9a:	f006 fac4 	bl	9126 <assert_print>
    2b9e:	491c      	ldr	r1, [pc, #112]	; (2c10 <pm_state_notify+0x9c>)
    2ba0:	481f      	ldr	r0, [pc, #124]	; (2c20 <pm_state_notify+0xac>)
    2ba2:	f006 fac0 	bl	9126 <assert_print>
    2ba6:	481b      	ldr	r0, [pc, #108]	; (2c14 <pm_state_notify+0xa0>)
    2ba8:	218e      	movs	r1, #142	; 0x8e
    2baa:	f006 fab5 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    2bae:	4818      	ldr	r0, [pc, #96]	; (2c10 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2bb0:	4f1c      	ldr	r7, [pc, #112]	; (2c24 <pm_state_notify+0xb0>)
    2bb2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c28 <pm_state_notify+0xb4>
    2bb6:	f003 fee1 	bl	697c <z_spin_lock_set_owner>
	return list->head;
    2bba:	4b1c      	ldr	r3, [pc, #112]	; (2c2c <pm_state_notify+0xb8>)
    2bbc:	681c      	ldr	r4, [r3, #0]
    2bbe:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2bc2:	b9bc      	cbnz	r4, 2bf4 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2bc4:	4812      	ldr	r0, [pc, #72]	; (2c10 <pm_state_notify+0x9c>)
    2bc6:	f003 fec9 	bl	695c <z_spin_unlock_valid>
    2bca:	b968      	cbnz	r0, 2be8 <pm_state_notify+0x74>
    2bcc:	4a11      	ldr	r2, [pc, #68]	; (2c14 <pm_state_notify+0xa0>)
    2bce:	4918      	ldr	r1, [pc, #96]	; (2c30 <pm_state_notify+0xbc>)
    2bd0:	4812      	ldr	r0, [pc, #72]	; (2c1c <pm_state_notify+0xa8>)
    2bd2:	23b9      	movs	r3, #185	; 0xb9
    2bd4:	f006 faa7 	bl	9126 <assert_print>
    2bd8:	490d      	ldr	r1, [pc, #52]	; (2c10 <pm_state_notify+0x9c>)
    2bda:	4816      	ldr	r0, [pc, #88]	; (2c34 <pm_state_notify+0xc0>)
    2bdc:	f006 faa3 	bl	9126 <assert_print>
    2be0:	480c      	ldr	r0, [pc, #48]	; (2c14 <pm_state_notify+0xa0>)
    2be2:	21b9      	movs	r1, #185	; 0xb9
    2be4:	f006 fa98 	bl	9118 <assert_post_action>
	__asm__ volatile(
    2be8:	f386 8811 	msr	BASEPRI, r6
    2bec:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    2bf4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    2bf8:	2d00      	cmp	r5, #0
    2bfa:	bf18      	it	ne
    2bfc:	4613      	movne	r3, r2
		if (callback) {
    2bfe:	b12b      	cbz	r3, 2c0c <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2c00:	f898 2014 	ldrb.w	r2, [r8, #20]
    2c04:	fb09 f202 	mul.w	r2, r9, r2
    2c08:	5cb8      	ldrb	r0, [r7, r2]
    2c0a:	4798      	blx	r3
	return node->next;
    2c0c:	6824      	ldr	r4, [r4, #0]
    2c0e:	e7d8      	b.n	2bc2 <pm_state_notify+0x4e>
    2c10:	200005c4 	.word	0x200005c4
    2c14:	0000a587 	.word	0x0000a587
    2c18:	0000a5e0 	.word	0x0000a5e0
    2c1c:	0000a092 	.word	0x0000a092
    2c20:	0000a5f5 	.word	0x0000a5f5
    2c24:	200005cc 	.word	0x200005cc
    2c28:	20000c74 	.word	0x20000c74
    2c2c:	200005d8 	.word	0x200005d8
    2c30:	0000a5b4 	.word	0x0000a5b4
    2c34:	0000a5cb 	.word	0x0000a5cb

00002c38 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c38:	4a0a      	ldr	r2, [pc, #40]	; (2c64 <atomic_clear_bit.constprop.0+0x2c>)
    2c3a:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c3e:	0943      	lsrs	r3, r0, #5
    2c40:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c44:	f000 001f 	and.w	r0, r0, #31
    2c48:	2301      	movs	r3, #1
    2c4a:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c4c:	43db      	mvns	r3, r3
    2c4e:	e852 0f00 	ldrex	r0, [r2]
    2c52:	4018      	ands	r0, r3
    2c54:	e842 0100 	strex	r1, r0, [r2]
    2c58:	2900      	cmp	r1, #0
    2c5a:	d1f8      	bne.n	2c4e <atomic_clear_bit.constprop.0+0x16>
    2c5c:	f3bf 8f5b 	dmb	ish
}
    2c60:	4770      	bx	lr
    2c62:	bf00      	nop
    2c64:	200005c8 	.word	0x200005c8

00002c68 <pm_system_resume>:

void pm_system_resume(void)
{
    2c68:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    2c6a:	4b19      	ldr	r3, [pc, #100]	; (2cd0 <pm_system_resume+0x68>)
    2c6c:	7d1c      	ldrb	r4, [r3, #20]
    2c6e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c72:	f004 031f 	and.w	r3, r4, #31
    2c76:	2201      	movs	r2, #1
    2c78:	409a      	lsls	r2, r3
    2c7a:	4b16      	ldr	r3, [pc, #88]	; (2cd4 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c7c:	0961      	lsrs	r1, r4, #5
    2c7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2c82:	43d0      	mvns	r0, r2
    2c84:	e853 1f00 	ldrex	r1, [r3]
    2c88:	ea01 0500 	and.w	r5, r1, r0
    2c8c:	e843 5600 	strex	r6, r5, [r3]
    2c90:	2e00      	cmp	r6, #0
    2c92:	d1f7      	bne.n	2c84 <pm_system_resume+0x1c>
    2c94:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2c98:	420a      	tst	r2, r1
    2c9a:	d013      	beq.n	2cc4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2c9c:	4b0e      	ldr	r3, [pc, #56]	; (2cd8 <pm_system_resume+0x70>)
    2c9e:	4d0f      	ldr	r5, [pc, #60]	; (2cdc <pm_system_resume+0x74>)
    2ca0:	b18b      	cbz	r3, 2cc6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2ca2:	230c      	movs	r3, #12
    2ca4:	4363      	muls	r3, r4
    2ca6:	18ea      	adds	r2, r5, r3
    2ca8:	5ce8      	ldrb	r0, [r5, r3]
    2caa:	7851      	ldrb	r1, [r2, #1]
    2cac:	f006 fb3d 	bl	932a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2cb0:	2000      	movs	r0, #0
    2cb2:	f7ff ff5f 	bl	2b74 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2cb6:	230c      	movs	r3, #12
    2cb8:	435c      	muls	r4, r3
    2cba:	192a      	adds	r2, r5, r4
    2cbc:	2300      	movs	r3, #0
    2cbe:	512b      	str	r3, [r5, r4]
    2cc0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2cc4:	bd70      	pop	{r4, r5, r6, pc}
    2cc6:	f383 8811 	msr	BASEPRI, r3
    2cca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2cce:	e7ef      	b.n	2cb0 <pm_system_resume+0x48>
    2cd0:	20000c74 	.word	0x20000c74
    2cd4:	200005e0 	.word	0x200005e0
    2cd8:	0000932b 	.word	0x0000932b
    2cdc:	200005cc 	.word	0x200005cc

00002ce0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2ce4:	4b32      	ldr	r3, [pc, #200]	; (2db0 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2ce6:	4a33      	ldr	r2, [pc, #204]	; (2db4 <pm_system_suspend+0xd4>)
    2ce8:	7d1c      	ldrb	r4, [r3, #20]
    2cea:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2cee:	0963      	lsrs	r3, r4, #5
    2cf0:	ea4f 0883 	mov.w	r8, r3, lsl #2
    2cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cf8:	4e2f      	ldr	r6, [pc, #188]	; (2db8 <pm_system_suspend+0xd8>)
    2cfa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2cfe:	f004 091f 	and.w	r9, r4, #31
    2d02:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2d06:	f013 0f01 	tst.w	r3, #1
{
    2d0a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2d0c:	d10a      	bne.n	2d24 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2d0e:	4601      	mov	r1, r0
    2d10:	4620      	mov	r0, r4
    2d12:	f000 f869 	bl	2de8 <pm_policy_next_state>
		if (info != NULL) {
    2d16:	b128      	cbz	r0, 2d24 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2d18:	c807      	ldmia	r0, {r0, r1, r2}
    2d1a:	230c      	movs	r3, #12
    2d1c:	fb03 6304 	mla	r3, r3, r4, r6
    2d20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2d24:	230c      	movs	r3, #12
    2d26:	4363      	muls	r3, r4
    2d28:	18f2      	adds	r2, r6, r3
    2d2a:	5cf5      	ldrb	r5, [r6, r3]
    2d2c:	b92d      	cbnz	r5, 2d3a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2d2e:	4620      	mov	r0, r4
    2d30:	f7ff ff82 	bl	2c38 <atomic_clear_bit.constprop.0>
		ret = false;
    2d34:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2d3a:	1c7b      	adds	r3, r7, #1
    2d3c:	d010      	beq.n	2d60 <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d3e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2d42:	4d1e      	ldr	r5, [pc, #120]	; (2dbc <pm_system_suspend+0xdc>)
    2d44:	4a1e      	ldr	r2, [pc, #120]	; (2dc0 <pm_system_suspend+0xe0>)
    2d46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2d4a:	2100      	movs	r1, #0
    2d4c:	fbec 5100 	umlal	r5, r1, ip, r0
    2d50:	2300      	movs	r3, #0
    2d52:	4628      	mov	r0, r5
    2d54:	f7fd fc06 	bl	564 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2d58:	2101      	movs	r1, #1
    2d5a:	1a38      	subs	r0, r7, r0
    2d5c:	f005 fbde 	bl	851c <z_set_timeout_expiry>
	k_sched_lock();
    2d60:	f004 faf2 	bl	7348 <k_sched_lock>
	pm_state_notify(true);
    2d64:	2001      	movs	r0, #1
    2d66:	f7ff ff05 	bl	2b74 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d6a:	f3bf 8f5b 	dmb	ish
    2d6e:	4b15      	ldr	r3, [pc, #84]	; (2dc4 <pm_system_suspend+0xe4>)
    2d70:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d72:	2301      	movs	r3, #1
    2d74:	fa03 f309 	lsl.w	r3, r3, r9
    2d78:	e858 2f00 	ldrex	r2, [r8]
    2d7c:	431a      	orrs	r2, r3
    2d7e:	e848 2100 	strex	r1, r2, [r8]
    2d82:	2900      	cmp	r1, #0
    2d84:	d1f8      	bne.n	2d78 <pm_system_suspend+0x98>
    2d86:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2d8a:	4b0f      	ldr	r3, [pc, #60]	; (2dc8 <pm_system_suspend+0xe8>)
    2d8c:	b133      	cbz	r3, 2d9c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2d8e:	230c      	movs	r3, #12
    2d90:	4363      	muls	r3, r4
    2d92:	18f2      	adds	r2, r6, r3
    2d94:	5cf0      	ldrb	r0, [r6, r3]
    2d96:	7851      	ldrb	r1, [r2, #1]
    2d98:	f006 fabb 	bl	9312 <pm_state_set>
	pm_system_resume();
    2d9c:	f7ff ff64 	bl	2c68 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2da0:	4620      	mov	r0, r4
    2da2:	f7ff ff49 	bl	2c38 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2da6:	f004 fb43 	bl	7430 <k_sched_unlock>
	bool ret = true;
    2daa:	2001      	movs	r0, #1
    2dac:	e7c3      	b.n	2d36 <pm_system_suspend+0x56>
    2dae:	bf00      	nop
    2db0:	20000c74 	.word	0x20000c74
    2db4:	200005c8 	.word	0x200005c8
    2db8:	200005cc 	.word	0x200005cc
    2dbc:	000f423f 	.word	0x000f423f
    2dc0:	000f4240 	.word	0x000f4240
    2dc4:	200005e0 	.word	0x200005e0
    2dc8:	00009313 	.word	0x00009313

00002dcc <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2dcc:	4b05      	ldr	r3, [pc, #20]	; (2de4 <pm_policy_state_lock_is_active+0x18>)
    2dce:	f3bf 8f5b 	dmb	ish
    2dd2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2dd6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2dda:	3800      	subs	r0, #0
    2ddc:	bf18      	it	ne
    2dde:	2001      	movne	r0, #1
    2de0:	4770      	bx	lr
    2de2:	bf00      	nop
    2de4:	200005e4 	.word	0x200005e4

00002de8 <pm_policy_next_state>:
{
    2de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dec:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2dee:	a901      	add	r1, sp, #4
    2df0:	f000 f842 	bl	2e78 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2df4:	1e44      	subs	r4, r0, #1
    2df6:	b224      	sxth	r4, r4
    2df8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2dfc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2e6c <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2e00:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e02:	00a4      	lsls	r4, r4, #2
    2e04:	b925      	cbnz	r5, 2e10 <pm_policy_next_state+0x28>
	return NULL;
    2e06:	462f      	mov	r7, r5
}
    2e08:	4638      	mov	r0, r7
    2e0a:	b003      	add	sp, #12
    2e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2e10:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    2e12:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    2e14:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    2e16:	f7ff ffd9 	bl	2dcc <pm_policy_state_lock_is_active>
    2e1a:	4606      	mov	r6, r0
    2e1c:	bb10      	cbnz	r0, 2e64 <pm_policy_next_state+0x7c>
    2e1e:	6878      	ldr	r0, [r7, #4]
    2e20:	4a13      	ldr	r2, [pc, #76]	; (2e70 <pm_policy_next_state+0x88>)
    2e22:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    2e26:	46cc      	mov	ip, r9
    2e28:	4631      	mov	r1, r6
    2e2a:	fbe0 c10a 	umlal	ip, r1, r0, sl
    2e2e:	2300      	movs	r3, #0
    2e30:	4660      	mov	r0, ip
    2e32:	f7fd fb97 	bl	564 <__aeabi_uldivmod>
    2e36:	4683      	mov	fp, r0
    2e38:	68b8      	ldr	r0, [r7, #8]
    2e3a:	4a0d      	ldr	r2, [pc, #52]	; (2e70 <pm_policy_next_state+0x88>)
    2e3c:	46cc      	mov	ip, r9
    2e3e:	4631      	mov	r1, r6
    2e40:	fbe0 c10a 	umlal	ip, r1, r0, sl
    2e44:	2300      	movs	r3, #0
    2e46:	4660      	mov	r0, ip
    2e48:	f7fd fb8c 	bl	564 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2e4c:	4b09      	ldr	r3, [pc, #36]	; (2e74 <pm_policy_next_state+0x8c>)
    2e4e:	681b      	ldr	r3, [r3, #0]
    2e50:	1c5a      	adds	r2, r3, #1
    2e52:	d001      	beq.n	2e58 <pm_policy_next_state+0x70>
    2e54:	4283      	cmp	r3, r0
    2e56:	d905      	bls.n	2e64 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    2e58:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2e5c:	d0d4      	beq.n	2e08 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    2e5e:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    2e60:	4540      	cmp	r0, r8
    2e62:	d9d1      	bls.n	2e08 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e64:	3d01      	subs	r5, #1
    2e66:	b2ad      	uxth	r5, r5
    2e68:	3c0c      	subs	r4, #12
    2e6a:	e7cb      	b.n	2e04 <pm_policy_next_state+0x1c>
    2e6c:	000f423f 	.word	0x000f423f
    2e70:	000f4240 	.word	0x000f4240
    2e74:	200000a0 	.word	0x200000a0

00002e78 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2e78:	b908      	cbnz	r0, 2e7e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2e7a:	4b02      	ldr	r3, [pc, #8]	; (2e84 <pm_state_cpu_get_all+0xc>)
    2e7c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2e7e:	2000      	movs	r0, #0
    2e80:	4770      	bx	lr
    2e82:	bf00      	nop
    2e84:	00009e14 	.word	0x00009e14

00002e88 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2e88:	4801      	ldr	r0, [pc, #4]	; (2e90 <nrf_cc3xx_platform_abort_init+0x8>)
    2e8a:	f005 be71 	b.w	8b70 <nrf_cc3xx_platform_set_abort>
    2e8e:	bf00      	nop
    2e90:	00009e14 	.word	0x00009e14

00002e94 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2e94:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2e96:	4604      	mov	r4, r0
    2e98:	b918      	cbnz	r0, 2ea2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2e9a:	4b0d      	ldr	r3, [pc, #52]	; (2ed0 <mutex_free_platform+0x3c>)
    2e9c:	480d      	ldr	r0, [pc, #52]	; (2ed4 <mutex_free_platform+0x40>)
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2ea2:	6861      	ldr	r1, [r4, #4]
    2ea4:	f031 0304 	bics.w	r3, r1, #4
    2ea8:	d00c      	beq.n	2ec4 <mutex_free_platform+0x30>
    2eaa:	2908      	cmp	r1, #8
    2eac:	d00a      	beq.n	2ec4 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2eae:	f011 0102 	ands.w	r1, r1, #2
    2eb2:	d008      	beq.n	2ec6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2eb4:	4808      	ldr	r0, [pc, #32]	; (2ed8 <mutex_free_platform+0x44>)
    2eb6:	4621      	mov	r1, r4
    2eb8:	f003 fba2 	bl	6600 <k_mem_slab_free>
        mutex->mutex = NULL;
    2ebc:	2300      	movs	r3, #0
    2ebe:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2ec0:	2300      	movs	r3, #0
    2ec2:	6063      	str	r3, [r4, #4]
}
    2ec4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2ec6:	6820      	ldr	r0, [r4, #0]
    2ec8:	2214      	movs	r2, #20
    2eca:	f006 fa16 	bl	92fa <memset>
    2ece:	e7f7      	b.n	2ec0 <mutex_free_platform+0x2c>
    2ed0:	2000017c 	.word	0x2000017c
    2ed4:	0000aa75 	.word	0x0000aa75
    2ed8:	20000b00 	.word	0x20000b00

00002edc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2edc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ede:	b308      	cbz	r0, 2f24 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2ee0:	6843      	ldr	r3, [r0, #4]
    2ee2:	2b04      	cmp	r3, #4
    2ee4:	d110      	bne.n	2f08 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2ee6:	2201      	movs	r2, #1
    2ee8:	6803      	ldr	r3, [r0, #0]
    2eea:	f3bf 8f5b 	dmb	ish
    2eee:	e853 1f00 	ldrex	r1, [r3]
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d103      	bne.n	2efe <mutex_lock_platform+0x22>
    2ef6:	e843 2000 	strex	r0, r2, [r3]
    2efa:	2800      	cmp	r0, #0
    2efc:	d1f7      	bne.n	2eee <mutex_lock_platform+0x12>
    2efe:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f02:	d10b      	bne.n	2f1c <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    2f04:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2f06:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f08:	b153      	cbz	r3, 2f20 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2f0a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f14:	f003 fd6c 	bl	69f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2f18:	2800      	cmp	r0, #0
    2f1a:	d0f3      	beq.n	2f04 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f1c:	4803      	ldr	r0, [pc, #12]	; (2f2c <mutex_lock_platform+0x50>)
    2f1e:	e7f2      	b.n	2f06 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f20:	4803      	ldr	r0, [pc, #12]	; (2f30 <mutex_lock_platform+0x54>)
    2f22:	e7f0      	b.n	2f06 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f24:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2f28:	e7ed      	b.n	2f06 <mutex_lock_platform+0x2a>
    2f2a:	bf00      	nop
    2f2c:	ffff8fe9 	.word	0xffff8fe9
    2f30:	ffff8fea 	.word	0xffff8fea

00002f34 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f34:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2f36:	b1c0      	cbz	r0, 2f6a <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2f38:	6843      	ldr	r3, [r0, #4]
    2f3a:	2b04      	cmp	r3, #4
    2f3c:	d110      	bne.n	2f60 <mutex_unlock_platform+0x2c>
    2f3e:	2200      	movs	r2, #0
    2f40:	6803      	ldr	r3, [r0, #0]
    2f42:	f3bf 8f5b 	dmb	ish
    2f46:	e853 1f00 	ldrex	r1, [r3]
    2f4a:	2901      	cmp	r1, #1
    2f4c:	d103      	bne.n	2f56 <mutex_unlock_platform+0x22>
    2f4e:	e843 2000 	strex	r0, r2, [r3]
    2f52:	2800      	cmp	r0, #0
    2f54:	d1f7      	bne.n	2f46 <mutex_unlock_platform+0x12>
    2f56:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f5a:	d109      	bne.n	2f70 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2f5c:	2000      	movs	r0, #0
    }
}
    2f5e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f60:	b143      	cbz	r3, 2f74 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2f62:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2f64:	f003 fe3e 	bl	6be4 <z_impl_k_mutex_unlock>
    2f68:	e7f8      	b.n	2f5c <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2f6e:	e7f6      	b.n	2f5e <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f70:	4801      	ldr	r0, [pc, #4]	; (2f78 <mutex_unlock_platform+0x44>)
    2f72:	e7f4      	b.n	2f5e <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f74:	4801      	ldr	r0, [pc, #4]	; (2f7c <mutex_unlock_platform+0x48>)
    2f76:	e7f2      	b.n	2f5e <mutex_unlock_platform+0x2a>
    2f78:	ffff8fe9 	.word	0xffff8fe9
    2f7c:	ffff8fea 	.word	0xffff8fea

00002f80 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f80:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2f82:	4604      	mov	r4, r0
    2f84:	b918      	cbnz	r0, 2f8e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2f86:	4b16      	ldr	r3, [pc, #88]	; (2fe0 <mutex_init_platform+0x60>)
    2f88:	4816      	ldr	r0, [pc, #88]	; (2fe4 <mutex_init_platform+0x64>)
    2f8a:	685b      	ldr	r3, [r3, #4]
    2f8c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2f8e:	6863      	ldr	r3, [r4, #4]
    2f90:	2b04      	cmp	r3, #4
    2f92:	d023      	beq.n	2fdc <mutex_init_platform+0x5c>
    2f94:	2b08      	cmp	r3, #8
    2f96:	d021      	beq.n	2fdc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2f98:	b9cb      	cbnz	r3, 2fce <mutex_init_platform+0x4e>
    2f9a:	6823      	ldr	r3, [r4, #0]
    2f9c:	b9bb      	cbnz	r3, 2fce <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2f9e:	4812      	ldr	r0, [pc, #72]	; (2fe8 <mutex_init_platform+0x68>)
    2fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fa8:	4621      	mov	r1, r4
    2faa:	f003 fabd 	bl	6528 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2fae:	b908      	cbnz	r0, 2fb4 <mutex_init_platform+0x34>
    2fb0:	6823      	ldr	r3, [r4, #0]
    2fb2:	b91b      	cbnz	r3, 2fbc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2fb4:	4b0a      	ldr	r3, [pc, #40]	; (2fe0 <mutex_init_platform+0x60>)
    2fb6:	480d      	ldr	r0, [pc, #52]	; (2fec <mutex_init_platform+0x6c>)
    2fb8:	685b      	ldr	r3, [r3, #4]
    2fba:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2fbc:	6820      	ldr	r0, [r4, #0]
    2fbe:	2214      	movs	r2, #20
    2fc0:	2100      	movs	r1, #0
    2fc2:	f006 f99a 	bl	92fa <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2fc6:	6863      	ldr	r3, [r4, #4]
    2fc8:	f043 0302 	orr.w	r3, r3, #2
    2fcc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2fce:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2fd0:	f006 fcbe 	bl	9950 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2fd4:	6863      	ldr	r3, [r4, #4]
    2fd6:	f043 0301 	orr.w	r3, r3, #1
    2fda:	6063      	str	r3, [r4, #4]
}
    2fdc:	bd10      	pop	{r4, pc}
    2fde:	bf00      	nop
    2fe0:	2000017c 	.word	0x2000017c
    2fe4:	0000aa75 	.word	0x0000aa75
    2fe8:	20000b00 	.word	0x20000b00
    2fec:	0000aa9b 	.word	0x0000aa9b

00002ff0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2ff0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2ff2:	4906      	ldr	r1, [pc, #24]	; (300c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2ff4:	4806      	ldr	r0, [pc, #24]	; (3010 <nrf_cc3xx_platform_mutex_init+0x20>)
    2ff6:	2340      	movs	r3, #64	; 0x40
    2ff8:	2214      	movs	r2, #20
    2ffa:	f006 fc76 	bl	98ea <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3002:	4904      	ldr	r1, [pc, #16]	; (3014 <nrf_cc3xx_platform_mutex_init+0x24>)
    3004:	4804      	ldr	r0, [pc, #16]	; (3018 <nrf_cc3xx_platform_mutex_init+0x28>)
    3006:	f005 be13 	b.w	8c30 <nrf_cc3xx_platform_set_mutexes>
    300a:	bf00      	nop
    300c:	20000600 	.word	0x20000600
    3010:	20000b00 	.word	0x20000b00
    3014:	00009e1c 	.word	0x00009e1c
    3018:	00009e30 	.word	0x00009e30

0000301c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    301c:	4901      	ldr	r1, [pc, #4]	; (3024 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    301e:	2210      	movs	r2, #16
	str	r2, [r1]
    3020:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3022:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3024:	e000ed10 	.word	0xe000ed10

00003028 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3028:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    302a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    302c:	f380 8811 	msr	BASEPRI, r0
	isb
    3030:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3034:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3038:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    303a:	b662      	cpsie	i
	isb
    303c:	f3bf 8f6f 	isb	sy

	bx	lr
    3040:	4770      	bx	lr
    3042:	bf00      	nop

00003044 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3044:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3046:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3048:	f381 8811 	msr	BASEPRI, r1

	wfe
    304c:	bf20      	wfe

	msr	BASEPRI, r0
    304e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3052:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3054:	4770      	bx	lr
    3056:	bf00      	nop

00003058 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3058:	b570      	push	{r4, r5, r6, lr}
    305a:	4606      	mov	r6, r0
    305c:	b086      	sub	sp, #24

	if (esf != NULL) {
    305e:	460d      	mov	r5, r1
    3060:	2900      	cmp	r1, #0
    3062:	d038      	beq.n	30d6 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3064:	688b      	ldr	r3, [r1, #8]
    3066:	9305      	str	r3, [sp, #20]
    3068:	684b      	ldr	r3, [r1, #4]
    306a:	9304      	str	r3, [sp, #16]
    306c:	680b      	ldr	r3, [r1, #0]
    306e:	9303      	str	r3, [sp, #12]
    3070:	2400      	movs	r4, #0
    3072:	4b1c      	ldr	r3, [pc, #112]	; (30e4 <z_arm_fatal_error+0x8c>)
    3074:	491c      	ldr	r1, [pc, #112]	; (30e8 <z_arm_fatal_error+0x90>)
    3076:	9302      	str	r3, [sp, #8]
    3078:	2201      	movs	r2, #1
    307a:	4623      	mov	r3, r4
    307c:	4620      	mov	r0, r4
    307e:	e9cd 4400 	strd	r4, r4, [sp]
    3082:	f006 f8ca 	bl	921a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3086:	696b      	ldr	r3, [r5, #20]
    3088:	9305      	str	r3, [sp, #20]
    308a:	692b      	ldr	r3, [r5, #16]
    308c:	9304      	str	r3, [sp, #16]
    308e:	68eb      	ldr	r3, [r5, #12]
    3090:	9303      	str	r3, [sp, #12]
    3092:	4b16      	ldr	r3, [pc, #88]	; (30ec <z_arm_fatal_error+0x94>)
    3094:	4914      	ldr	r1, [pc, #80]	; (30e8 <z_arm_fatal_error+0x90>)
    3096:	9400      	str	r4, [sp, #0]
    3098:	e9cd 4301 	strd	r4, r3, [sp, #4]
    309c:	2201      	movs	r2, #1
    309e:	4623      	mov	r3, r4
    30a0:	4620      	mov	r0, r4
    30a2:	f006 f8ba 	bl	921a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    30a6:	69eb      	ldr	r3, [r5, #28]
    30a8:	9303      	str	r3, [sp, #12]
    30aa:	4b11      	ldr	r3, [pc, #68]	; (30f0 <z_arm_fatal_error+0x98>)
    30ac:	490e      	ldr	r1, [pc, #56]	; (30e8 <z_arm_fatal_error+0x90>)
    30ae:	9400      	str	r4, [sp, #0]
    30b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30b4:	2201      	movs	r2, #1
    30b6:	4623      	mov	r3, r4
    30b8:	4620      	mov	r0, r4
    30ba:	f006 f8ae 	bl	921a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    30be:	69ab      	ldr	r3, [r5, #24]
    30c0:	9303      	str	r3, [sp, #12]
    30c2:	4b0c      	ldr	r3, [pc, #48]	; (30f4 <z_arm_fatal_error+0x9c>)
    30c4:	4908      	ldr	r1, [pc, #32]	; (30e8 <z_arm_fatal_error+0x90>)
    30c6:	9400      	str	r4, [sp, #0]
    30c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30cc:	2201      	movs	r2, #1
    30ce:	4623      	mov	r3, r4
    30d0:	4620      	mov	r0, r4
    30d2:	f006 f8a2 	bl	921a <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    30d6:	4629      	mov	r1, r5
    30d8:	4630      	mov	r0, r6
}
    30da:	b006      	add	sp, #24
    30dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    30e0:	f003 b8a0 	b.w	6224 <z_fatal_error>
    30e4:	0000aac8 	.word	0x0000aac8
    30e8:	00009cdc 	.word	0x00009cdc
    30ec:	0000aaf7 	.word	0x0000aaf7
    30f0:	0000ab26 	.word	0x0000ab26
    30f4:	0000ab35 	.word	0x0000ab35

000030f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    30f8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    30fa:	2800      	cmp	r0, #0
    30fc:	db07      	blt.n	310e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30fe:	4a04      	ldr	r2, [pc, #16]	; (3110 <arch_irq_enable+0x18>)
    3100:	0941      	lsrs	r1, r0, #5
    3102:	2301      	movs	r3, #1
    3104:	f000 001f 	and.w	r0, r0, #31
    3108:	4083      	lsls	r3, r0
    310a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    310e:	4770      	bx	lr
    3110:	e000e100 	.word	0xe000e100

00003114 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <arch_irq_is_enabled+0x18>)
    3116:	0942      	lsrs	r2, r0, #5
    3118:	f000 001f 	and.w	r0, r0, #31
    311c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3120:	2301      	movs	r3, #1
    3122:	fa03 f000 	lsl.w	r0, r3, r0
}
    3126:	4010      	ands	r0, r2
    3128:	4770      	bx	lr
    312a:	bf00      	nop
    312c:	e000e100 	.word	0xe000e100

00003130 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    3130:	07d3      	lsls	r3, r2, #31
{
    3132:	b570      	push	{r4, r5, r6, lr}
    3134:	4604      	mov	r4, r0
    3136:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    3138:	d425      	bmi.n	3186 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    313a:	1c8d      	adds	r5, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    313c:	2d07      	cmp	r5, #7
    313e:	d90f      	bls.n	3160 <z_arm_irq_priority_set+0x30>
    3140:	4a12      	ldr	r2, [pc, #72]	; (318c <z_arm_irq_priority_set+0x5c>)
    3142:	4913      	ldr	r1, [pc, #76]	; (3190 <z_arm_irq_priority_set+0x60>)
    3144:	4813      	ldr	r0, [pc, #76]	; (3194 <z_arm_irq_priority_set+0x64>)
    3146:	2357      	movs	r3, #87	; 0x57
    3148:	f005 ffed 	bl	9126 <assert_print>
    314c:	4812      	ldr	r0, [pc, #72]	; (3198 <z_arm_irq_priority_set+0x68>)
    314e:	4631      	mov	r1, r6
    3150:	2306      	movs	r3, #6
    3152:	4622      	mov	r2, r4
    3154:	f005 ffe7 	bl	9126 <assert_print>
    3158:	480c      	ldr	r0, [pc, #48]	; (318c <z_arm_irq_priority_set+0x5c>)
    315a:	2157      	movs	r1, #87	; 0x57
    315c:	f005 ffdc 	bl	9118 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3160:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3162:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3164:	bfac      	ite	ge
    3166:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    316a:	4b0c      	ldrlt	r3, [pc, #48]	; (319c <z_arm_irq_priority_set+0x6c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    316c:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3170:	bfb8      	it	lt
    3172:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3176:	b2ed      	uxtb	r5, r5
    3178:	bfaa      	itet	ge
    317a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    317e:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3180:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3184:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    3186:	2500      	movs	r5, #0
    3188:	e7ea      	b.n	3160 <z_arm_irq_priority_set+0x30>
    318a:	bf00      	nop
    318c:	0000ab63 	.word	0x0000ab63
    3190:	0000ab99 	.word	0x0000ab99
    3194:	0000a092 	.word	0x0000a092
    3198:	0000abb4 	.word	0x0000abb4
    319c:	e000ed14 	.word	0xe000ed14

000031a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    31a0:	bf30      	wfi
    b z_SysNmiOnReset
    31a2:	f7ff bffd 	b.w	31a0 <z_SysNmiOnReset>
    31a6:	bf00      	nop

000031a8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31a8:	4a0b      	ldr	r2, [pc, #44]	; (31d8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    31aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31ac:	4b0b      	ldr	r3, [pc, #44]	; (31dc <z_arm_prep_c+0x34>)
    31ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    31b2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    31b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    31bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    31c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    31c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    31c8:	f003 f8c0 	bl	634c <z_bss_zero>
	z_data_copy();
    31cc:	f004 ffe0 	bl	8190 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    31d0:	f000 fbda 	bl	3988 <z_arm_interrupt_init>
	z_cstart();
    31d4:	f003 f8fe 	bl	63d4 <z_cstart>
    31d8:	00000000 	.word	0x00000000
    31dc:	e000ed00 	.word	0xe000ed00

000031e0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    31e0:	4a09      	ldr	r2, [pc, #36]	; (3208 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    31e2:	490a      	ldr	r1, [pc, #40]	; (320c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    31e4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    31e6:	6809      	ldr	r1, [r1, #0]
    31e8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    31ea:	4909      	ldr	r1, [pc, #36]	; (3210 <arch_swap+0x30>)
	_current->arch.basepri = key;
    31ec:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    31ee:	684b      	ldr	r3, [r1, #4]
    31f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    31f4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    31f6:	2300      	movs	r3, #0
    31f8:	f383 8811 	msr	BASEPRI, r3
    31fc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3200:	6893      	ldr	r3, [r2, #8]
}
    3202:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3204:	4770      	bx	lr
    3206:	bf00      	nop
    3208:	20000c74 	.word	0x20000c74
    320c:	00009f80 	.word	0x00009f80
    3210:	e000ed00 	.word	0xe000ed00

00003214 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3214:	4912      	ldr	r1, [pc, #72]	; (3260 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3216:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3218:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    321c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    321e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3222:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3226:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    3228:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    322c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3230:	4f0c      	ldr	r7, [pc, #48]	; (3264 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3232:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3236:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3238:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    323a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    323c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    323e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3240:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3242:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3246:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3248:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    324a:	f000 fc39 	bl	3ac0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    324e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3252:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3256:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    325a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    325e:	4770      	bx	lr
    ldr r1, =_kernel
    3260:	20000c74 	.word	0x20000c74
    ldr v4, =_SCS_ICSR
    3264:	e000ed04 	.word	0xe000ed04

00003268 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3268:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    326c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    326e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3272:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3276:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3278:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    327c:	2902      	cmp	r1, #2
    beq _oops
    327e:	d0ff      	beq.n	3280 <_oops>

00003280 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3280:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3282:	f005 ffda 	bl	923a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3286:	bd01      	pop	{r0, pc}

00003288 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3288:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    328c:	9b00      	ldr	r3, [sp, #0]
    328e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3292:	490a      	ldr	r1, [pc, #40]	; (32bc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3294:	9b01      	ldr	r3, [sp, #4]
    3296:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    329a:	9b02      	ldr	r3, [sp, #8]
    329c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    32a0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    32a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    32a8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    32ac:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    32b0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    32b2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    32b4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    32b6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    32b8:	4770      	bx	lr
    32ba:	bf00      	nop
    32bc:	00008ff3 	.word	0x00008ff3

000032c0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    32c0:	4a09      	ldr	r2, [pc, #36]	; (32e8 <z_check_thread_stack_fail+0x28>)
{
    32c2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    32c4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    32c6:	b170      	cbz	r0, 32e6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    32c8:	f113 0f16 	cmn.w	r3, #22
    32cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    32ce:	d005      	beq.n	32dc <z_check_thread_stack_fail+0x1c>
    32d0:	f1a0 0220 	sub.w	r2, r0, #32
    32d4:	429a      	cmp	r2, r3
    32d6:	d805      	bhi.n	32e4 <z_check_thread_stack_fail+0x24>
    32d8:	4283      	cmp	r3, r0
    32da:	d203      	bcs.n	32e4 <z_check_thread_stack_fail+0x24>
		return 0;
    32dc:	4281      	cmp	r1, r0
    32de:	bf28      	it	cs
    32e0:	2000      	movcs	r0, #0
    32e2:	4770      	bx	lr
    32e4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    32e6:	4770      	bx	lr
    32e8:	20000c74 	.word	0x20000c74

000032ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    32ec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    32ee:	4b09      	ldr	r3, [pc, #36]	; (3314 <arch_switch_to_main_thread+0x28>)
    32f0:	6098      	str	r0, [r3, #8]
{
    32f2:	460d      	mov	r5, r1
    32f4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    32f6:	f000 fbe3 	bl	3ac0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    32fa:	4620      	mov	r0, r4
    32fc:	f385 8809 	msr	PSP, r5
    3300:	2100      	movs	r1, #0
    3302:	b663      	cpsie	if
    3304:	f381 8811 	msr	BASEPRI, r1
    3308:	f3bf 8f6f 	isb	sy
    330c:	2200      	movs	r2, #0
    330e:	2300      	movs	r3, #0
    3310:	f005 fe6f 	bl	8ff2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3314:	20000c74 	.word	0x20000c74

00003318 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3318:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    331a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    331c:	4a0b      	ldr	r2, [pc, #44]	; (334c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    331e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3320:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3322:	bf1e      	ittt	ne
	movne	r1, #0
    3324:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3326:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3328:	f006 fb03 	blne	9932 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    332c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    332e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3332:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3336:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    333a:	4905      	ldr	r1, [pc, #20]	; (3350 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    333c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    333e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3340:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3346:	4903      	ldr	r1, [pc, #12]	; (3354 <_isr_wrapper+0x3c>)
	bx r1
    3348:	4708      	bx	r1
    334a:	0000      	.short	0x0000
	ldr r2, =_kernel
    334c:	20000c74 	.word	0x20000c74
	ldr r1, =_sw_isr_table
    3350:	00009b2c 	.word	0x00009b2c
	ldr r1, =z_arm_int_exit
    3354:	00003359 	.word	0x00003359

00003358 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3358:	4b04      	ldr	r3, [pc, #16]	; (336c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    335a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    335c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    335e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3360:	d003      	beq.n	336a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3362:	4903      	ldr	r1, [pc, #12]	; (3370 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3368:	600a      	str	r2, [r1, #0]

0000336a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    336a:	4770      	bx	lr
	ldr r3, =_kernel
    336c:	20000c74 	.word	0x20000c74
	ldr r1, =_SCS_ICSR
    3370:	e000ed04 	.word	0xe000ed04

00003374 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3374:	b5f0      	push	{r4, r5, r6, r7, lr}
    3376:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3378:	2400      	movs	r4, #0
    337a:	4b3b      	ldr	r3, [pc, #236]	; (3468 <bus_fault.constprop.0+0xf4>)
    337c:	9302      	str	r3, [sp, #8]
    337e:	e9cd 4400 	strd	r4, r4, [sp]
    3382:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3384:	4607      	mov	r7, r0
    3386:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3388:	2201      	movs	r2, #1
    338a:	4938      	ldr	r1, [pc, #224]	; (346c <bus_fault.constprop.0+0xf8>)
    338c:	4620      	mov	r0, r4
    338e:	f005 ff63 	bl	9258 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3392:	4b37      	ldr	r3, [pc, #220]	; (3470 <bus_fault.constprop.0+0xfc>)
    3394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3396:	04db      	lsls	r3, r3, #19
    3398:	d509      	bpl.n	33ae <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    339a:	4b36      	ldr	r3, [pc, #216]	; (3474 <bus_fault.constprop.0+0x100>)
    339c:	4933      	ldr	r1, [pc, #204]	; (346c <bus_fault.constprop.0+0xf8>)
    339e:	9400      	str	r4, [sp, #0]
    33a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    33a4:	2201      	movs	r2, #1
    33a6:	4623      	mov	r3, r4
    33a8:	4620      	mov	r0, r4
    33aa:	f005 ff55 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    33ae:	4b30      	ldr	r3, [pc, #192]	; (3470 <bus_fault.constprop.0+0xfc>)
    33b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33b2:	051d      	lsls	r5, r3, #20
    33b4:	d509      	bpl.n	33ca <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    33b6:	4b30      	ldr	r3, [pc, #192]	; (3478 <bus_fault.constprop.0+0x104>)
    33b8:	9302      	str	r3, [sp, #8]
    33ba:	2300      	movs	r3, #0
    33bc:	e9cd 3300 	strd	r3, r3, [sp]
    33c0:	492a      	ldr	r1, [pc, #168]	; (346c <bus_fault.constprop.0+0xf8>)
    33c2:	2201      	movs	r2, #1
    33c4:	4618      	mov	r0, r3
    33c6:	f005 ff47 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    33ca:	4d29      	ldr	r5, [pc, #164]	; (3470 <bus_fault.constprop.0+0xfc>)
    33cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33ce:	059c      	lsls	r4, r3, #22
    33d0:	d51e      	bpl.n	3410 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    33d2:	2400      	movs	r4, #0
    33d4:	4b29      	ldr	r3, [pc, #164]	; (347c <bus_fault.constprop.0+0x108>)
    33d6:	9302      	str	r3, [sp, #8]
    33d8:	2201      	movs	r2, #1
    33da:	4623      	mov	r3, r4
    33dc:	4620      	mov	r0, r4
    33de:	e9cd 4400 	strd	r4, r4, [sp]
    33e2:	4922      	ldr	r1, [pc, #136]	; (346c <bus_fault.constprop.0+0xf8>)
    33e4:	f005 ff38 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    33e8:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    33ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    33ec:	0410      	lsls	r0, r2, #16
    33ee:	d50f      	bpl.n	3410 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    33f0:	9303      	str	r3, [sp, #12]
    33f2:	4b23      	ldr	r3, [pc, #140]	; (3480 <bus_fault.constprop.0+0x10c>)
    33f4:	491d      	ldr	r1, [pc, #116]	; (346c <bus_fault.constprop.0+0xf8>)
    33f6:	9400      	str	r4, [sp, #0]
    33f8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    33fc:	2201      	movs	r2, #1
    33fe:	4623      	mov	r3, r4
    3400:	4620      	mov	r0, r4
    3402:	f005 ff29 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3406:	b11f      	cbz	r7, 3410 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3408:	6aab      	ldr	r3, [r5, #40]	; 0x28
    340a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    340e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3410:	4b17      	ldr	r3, [pc, #92]	; (3470 <bus_fault.constprop.0+0xfc>)
    3412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3414:	0559      	lsls	r1, r3, #21
    3416:	d509      	bpl.n	342c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    3418:	4b1a      	ldr	r3, [pc, #104]	; (3484 <bus_fault.constprop.0+0x110>)
    341a:	9302      	str	r3, [sp, #8]
    341c:	2300      	movs	r3, #0
    341e:	e9cd 3300 	strd	r3, r3, [sp]
    3422:	4912      	ldr	r1, [pc, #72]	; (346c <bus_fault.constprop.0+0xf8>)
    3424:	2201      	movs	r2, #1
    3426:	4618      	mov	r0, r3
    3428:	f005 ff16 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    342c:	4a10      	ldr	r2, [pc, #64]	; (3470 <bus_fault.constprop.0+0xfc>)
    342e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3430:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    3434:	d012      	beq.n	345c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    3436:	4b14      	ldr	r3, [pc, #80]	; (3488 <bus_fault.constprop.0+0x114>)
    3438:	9302      	str	r3, [sp, #8]
    343a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    343c:	e9cd 3300 	strd	r3, r3, [sp]
    3440:	490a      	ldr	r1, [pc, #40]	; (346c <bus_fault.constprop.0+0xf8>)
    3442:	2201      	movs	r2, #1
    3444:	4618      	mov	r0, r3
    3446:	f005 ff07 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    344a:	4a09      	ldr	r2, [pc, #36]	; (3470 <bus_fault.constprop.0+0xfc>)
    344c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    344e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3450:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3454:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3456:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3458:	b005      	add	sp, #20
    345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    345c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    345e:	0492      	lsls	r2, r2, #18
    3460:	d5f3      	bpl.n	344a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3462:	4a0a      	ldr	r2, [pc, #40]	; (348c <bus_fault.constprop.0+0x118>)
    3464:	9202      	str	r2, [sp, #8]
    3466:	e7e9      	b.n	343c <bus_fault.constprop.0+0xc8>
    3468:	0000abf4 	.word	0x0000abf4
    346c:	00009cdc 	.word	0x00009cdc
    3470:	e000ed00 	.word	0xe000ed00
    3474:	0000ac0a 	.word	0x0000ac0a
    3478:	0000ac1b 	.word	0x0000ac1b
    347c:	0000ac2e 	.word	0x0000ac2e
    3480:	0000ac47 	.word	0x0000ac47
    3484:	0000ac5c 	.word	0x0000ac5c
    3488:	0000ac77 	.word	0x0000ac77
    348c:	0000ac8f 	.word	0x0000ac8f

00003490 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3492:	2400      	movs	r4, #0
    3494:	4b33      	ldr	r3, [pc, #204]	; (3564 <usage_fault.constprop.0+0xd4>)
    3496:	9302      	str	r3, [sp, #8]
    3498:	e9cd 4400 	strd	r4, r4, [sp]
    349c:	4623      	mov	r3, r4
    349e:	4932      	ldr	r1, [pc, #200]	; (3568 <usage_fault.constprop.0+0xd8>)
    34a0:	2201      	movs	r2, #1
    34a2:	4620      	mov	r0, r4
    34a4:	f005 fed8 	bl	9258 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    34a8:	4b30      	ldr	r3, [pc, #192]	; (356c <usage_fault.constprop.0+0xdc>)
    34aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34ac:	019b      	lsls	r3, r3, #6
    34ae:	d509      	bpl.n	34c4 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    34b0:	4b2f      	ldr	r3, [pc, #188]	; (3570 <usage_fault.constprop.0+0xe0>)
    34b2:	492d      	ldr	r1, [pc, #180]	; (3568 <usage_fault.constprop.0+0xd8>)
    34b4:	9400      	str	r4, [sp, #0]
    34b6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    34ba:	2201      	movs	r2, #1
    34bc:	4623      	mov	r3, r4
    34be:	4620      	mov	r0, r4
    34c0:	f005 feca 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    34c4:	4b29      	ldr	r3, [pc, #164]	; (356c <usage_fault.constprop.0+0xdc>)
    34c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34c8:	01dc      	lsls	r4, r3, #7
    34ca:	d509      	bpl.n	34e0 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    34cc:	4b29      	ldr	r3, [pc, #164]	; (3574 <usage_fault.constprop.0+0xe4>)
    34ce:	9302      	str	r3, [sp, #8]
    34d0:	2300      	movs	r3, #0
    34d2:	e9cd 3300 	strd	r3, r3, [sp]
    34d6:	4924      	ldr	r1, [pc, #144]	; (3568 <usage_fault.constprop.0+0xd8>)
    34d8:	2201      	movs	r2, #1
    34da:	4618      	mov	r0, r3
    34dc:	f005 febc 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    34e0:	4b22      	ldr	r3, [pc, #136]	; (356c <usage_fault.constprop.0+0xdc>)
    34e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34e4:	0318      	lsls	r0, r3, #12
    34e6:	d509      	bpl.n	34fc <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    34e8:	4b23      	ldr	r3, [pc, #140]	; (3578 <usage_fault.constprop.0+0xe8>)
    34ea:	9302      	str	r3, [sp, #8]
    34ec:	2300      	movs	r3, #0
    34ee:	e9cd 3300 	strd	r3, r3, [sp]
    34f2:	491d      	ldr	r1, [pc, #116]	; (3568 <usage_fault.constprop.0+0xd8>)
    34f4:	2201      	movs	r2, #1
    34f6:	4618      	mov	r0, r3
    34f8:	f005 feae 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    34fc:	4b1b      	ldr	r3, [pc, #108]	; (356c <usage_fault.constprop.0+0xdc>)
    34fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3500:	0359      	lsls	r1, r3, #13
    3502:	d509      	bpl.n	3518 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3504:	4b1d      	ldr	r3, [pc, #116]	; (357c <usage_fault.constprop.0+0xec>)
    3506:	9302      	str	r3, [sp, #8]
    3508:	2300      	movs	r3, #0
    350a:	e9cd 3300 	strd	r3, r3, [sp]
    350e:	4916      	ldr	r1, [pc, #88]	; (3568 <usage_fault.constprop.0+0xd8>)
    3510:	2201      	movs	r2, #1
    3512:	4618      	mov	r0, r3
    3514:	f005 fea0 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3518:	4b14      	ldr	r3, [pc, #80]	; (356c <usage_fault.constprop.0+0xdc>)
    351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    351c:	039a      	lsls	r2, r3, #14
    351e:	d509      	bpl.n	3534 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3520:	4b17      	ldr	r3, [pc, #92]	; (3580 <usage_fault.constprop.0+0xf0>)
    3522:	9302      	str	r3, [sp, #8]
    3524:	2300      	movs	r3, #0
    3526:	e9cd 3300 	strd	r3, r3, [sp]
    352a:	490f      	ldr	r1, [pc, #60]	; (3568 <usage_fault.constprop.0+0xd8>)
    352c:	2201      	movs	r2, #1
    352e:	4618      	mov	r0, r3
    3530:	f005 fe92 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3534:	4b0d      	ldr	r3, [pc, #52]	; (356c <usage_fault.constprop.0+0xdc>)
    3536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3538:	03db      	lsls	r3, r3, #15
    353a:	d509      	bpl.n	3550 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    353c:	4b11      	ldr	r3, [pc, #68]	; (3584 <usage_fault.constprop.0+0xf4>)
    353e:	9302      	str	r3, [sp, #8]
    3540:	2300      	movs	r3, #0
    3542:	e9cd 3300 	strd	r3, r3, [sp]
    3546:	4908      	ldr	r1, [pc, #32]	; (3568 <usage_fault.constprop.0+0xd8>)
    3548:	2201      	movs	r2, #1
    354a:	4618      	mov	r0, r3
    354c:	f005 fe84 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3550:	4a06      	ldr	r2, [pc, #24]	; (356c <usage_fault.constprop.0+0xdc>)
    3552:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3554:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3558:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    355c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    355e:	6293      	str	r3, [r2, #40]	; 0x28
}
    3560:	b004      	add	sp, #16
    3562:	bd10      	pop	{r4, pc}
    3564:	0000acbe 	.word	0x0000acbe
    3568:	00009cdc 	.word	0x00009cdc
    356c:	e000ed00 	.word	0xe000ed00
    3570:	0000acd6 	.word	0x0000acd6
    3574:	0000ace9 	.word	0x0000ace9
    3578:	0000ad03 	.word	0x0000ad03
    357c:	0000ad21 	.word	0x0000ad21
    3580:	0000ad46 	.word	0x0000ad46
    3584:	0000ad60 	.word	0x0000ad60

00003588 <mem_manage_fault>:
{
    3588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    358c:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    358e:	2400      	movs	r4, #0
    3590:	4b52      	ldr	r3, [pc, #328]	; (36dc <mem_manage_fault+0x154>)
    3592:	9302      	str	r3, [sp, #8]
    3594:	e9cd 4400 	strd	r4, r4, [sp]
    3598:	4623      	mov	r3, r4
{
    359a:	4680      	mov	r8, r0
    359c:	4689      	mov	r9, r1
    359e:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    35a0:	494f      	ldr	r1, [pc, #316]	; (36e0 <mem_manage_fault+0x158>)
    35a2:	2201      	movs	r2, #1
    35a4:	4620      	mov	r0, r4
    35a6:	f005 fe57 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    35aa:	4b4e      	ldr	r3, [pc, #312]	; (36e4 <mem_manage_fault+0x15c>)
    35ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35ae:	06df      	lsls	r7, r3, #27
    35b0:	d509      	bpl.n	35c6 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    35b2:	4b4d      	ldr	r3, [pc, #308]	; (36e8 <mem_manage_fault+0x160>)
    35b4:	494a      	ldr	r1, [pc, #296]	; (36e0 <mem_manage_fault+0x158>)
    35b6:	9400      	str	r4, [sp, #0]
    35b8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    35bc:	2201      	movs	r2, #1
    35be:	4623      	mov	r3, r4
    35c0:	4620      	mov	r0, r4
    35c2:	f005 fe49 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    35c6:	4b47      	ldr	r3, [pc, #284]	; (36e4 <mem_manage_fault+0x15c>)
    35c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35ca:	071d      	lsls	r5, r3, #28
    35cc:	d509      	bpl.n	35e2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    35ce:	4b47      	ldr	r3, [pc, #284]	; (36ec <mem_manage_fault+0x164>)
    35d0:	9302      	str	r3, [sp, #8]
    35d2:	2300      	movs	r3, #0
    35d4:	e9cd 3300 	strd	r3, r3, [sp]
    35d8:	4941      	ldr	r1, [pc, #260]	; (36e0 <mem_manage_fault+0x158>)
    35da:	2201      	movs	r2, #1
    35dc:	4618      	mov	r0, r3
    35de:	f005 fe3b 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    35e2:	4d40      	ldr	r5, [pc, #256]	; (36e4 <mem_manage_fault+0x15c>)
    35e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    35e6:	079c      	lsls	r4, r3, #30
    35e8:	d441      	bmi.n	366e <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    35ea:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    35ee:	4b3d      	ldr	r3, [pc, #244]	; (36e4 <mem_manage_fault+0x15c>)
    35f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35f2:	07d9      	lsls	r1, r3, #31
    35f4:	d509      	bpl.n	360a <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    35f6:	4b3e      	ldr	r3, [pc, #248]	; (36f0 <mem_manage_fault+0x168>)
    35f8:	9302      	str	r3, [sp, #8]
    35fa:	2300      	movs	r3, #0
    35fc:	e9cd 3300 	strd	r3, r3, [sp]
    3600:	4937      	ldr	r1, [pc, #220]	; (36e0 <mem_manage_fault+0x158>)
    3602:	2201      	movs	r2, #1
    3604:	4618      	mov	r0, r3
    3606:	f005 fe27 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    360a:	4b36      	ldr	r3, [pc, #216]	; (36e4 <mem_manage_fault+0x15c>)
    360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    360e:	069a      	lsls	r2, r3, #26
    3610:	d509      	bpl.n	3626 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    3612:	4b38      	ldr	r3, [pc, #224]	; (36f4 <mem_manage_fault+0x16c>)
    3614:	9302      	str	r3, [sp, #8]
    3616:	2300      	movs	r3, #0
    3618:	e9cd 3300 	strd	r3, r3, [sp]
    361c:	4930      	ldr	r1, [pc, #192]	; (36e0 <mem_manage_fault+0x158>)
    361e:	2201      	movs	r2, #1
    3620:	4618      	mov	r0, r3
    3622:	f005 fe19 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3626:	4c2f      	ldr	r4, [pc, #188]	; (36e4 <mem_manage_fault+0x15c>)
    3628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    362a:	06db      	lsls	r3, r3, #27
    362c:	d402      	bmi.n	3634 <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    362e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3630:	079d      	lsls	r5, r3, #30
    3632:	d550      	bpl.n	36d6 <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3634:	6863      	ldr	r3, [r4, #4]
    3636:	0518      	lsls	r0, r3, #20
    3638:	d54d      	bpl.n	36d6 <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    363a:	4641      	mov	r1, r8
    363c:	4638      	mov	r0, r7
    363e:	f7ff fe3f 	bl	32c0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3642:	2800      	cmp	r0, #0
    3644:	d035      	beq.n	36b2 <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3646:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    364a:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    364c:	4b25      	ldr	r3, [pc, #148]	; (36e4 <mem_manage_fault+0x15c>)
    364e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3650:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3652:	bf42      	ittt	mi
    3654:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3656:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    365a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    365c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    365e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3662:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3664:	2300      	movs	r3, #0
    3666:	7033      	strb	r3, [r6, #0]
}
    3668:	b005      	add	sp, #20
    366a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    366e:	2400      	movs	r4, #0
    3670:	4b21      	ldr	r3, [pc, #132]	; (36f8 <mem_manage_fault+0x170>)
    3672:	9302      	str	r3, [sp, #8]
    3674:	4620      	mov	r0, r4
    3676:	4623      	mov	r3, r4
    3678:	e9cd 4400 	strd	r4, r4, [sp]
    367c:	4918      	ldr	r1, [pc, #96]	; (36e0 <mem_manage_fault+0x158>)
    367e:	2201      	movs	r2, #1
    3680:	f005 fdea 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3684:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3686:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3688:	0618      	lsls	r0, r3, #24
    368a:	d5ae      	bpl.n	35ea <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    368c:	4b1b      	ldr	r3, [pc, #108]	; (36fc <mem_manage_fault+0x174>)
    368e:	4914      	ldr	r1, [pc, #80]	; (36e0 <mem_manage_fault+0x158>)
    3690:	9703      	str	r7, [sp, #12]
    3692:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3696:	9400      	str	r4, [sp, #0]
    3698:	4623      	mov	r3, r4
    369a:	2201      	movs	r2, #1
    369c:	4620      	mov	r0, r4
    369e:	f005 fddb 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    36a2:	f1b9 0f00 	cmp.w	r9, #0
    36a6:	d0a2      	beq.n	35ee <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    36a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    36aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    36ae:	62ab      	str	r3, [r5, #40]	; 0x28
    36b0:	e79d      	b.n	35ee <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    36b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    36b4:	06d9      	lsls	r1, r3, #27
    36b6:	d50e      	bpl.n	36d6 <mem_manage_fault+0x14e>
    36b8:	4911      	ldr	r1, [pc, #68]	; (3700 <mem_manage_fault+0x178>)
    36ba:	4a12      	ldr	r2, [pc, #72]	; (3704 <mem_manage_fault+0x17c>)
    36bc:	4812      	ldr	r0, [pc, #72]	; (3708 <mem_manage_fault+0x180>)
    36be:	f240 1349 	movw	r3, #329	; 0x149
    36c2:	f005 fd30 	bl	9126 <assert_print>
    36c6:	4811      	ldr	r0, [pc, #68]	; (370c <mem_manage_fault+0x184>)
    36c8:	f005 fd2d 	bl	9126 <assert_print>
    36cc:	480d      	ldr	r0, [pc, #52]	; (3704 <mem_manage_fault+0x17c>)
    36ce:	f240 1149 	movw	r1, #329	; 0x149
    36d2:	f005 fd21 	bl	9118 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    36d6:	2000      	movs	r0, #0
    36d8:	e7b8      	b.n	364c <mem_manage_fault+0xc4>
    36da:	bf00      	nop
    36dc:	0000ad8b 	.word	0x0000ad8b
    36e0:	00009cdc 	.word	0x00009cdc
    36e4:	e000ed00 	.word	0xe000ed00
    36e8:	0000ada1 	.word	0x0000ada1
    36ec:	0000ac1b 	.word	0x0000ac1b
    36f0:	0000ae02 	.word	0x0000ae02
    36f4:	0000ac8f 	.word	0x0000ac8f
    36f8:	0000add4 	.word	0x0000add4
    36fc:	0000adec 	.word	0x0000adec
    3700:	0000ae5b 	.word	0x0000ae5b
    3704:	0000ae21 	.word	0x0000ae21
    3708:	0000a092 	.word	0x0000a092
    370c:	0000aea5 	.word	0x0000aea5

00003710 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3714:	4b80      	ldr	r3, [pc, #512]	; (3918 <z_arm_fault+0x208>)
    3716:	685f      	ldr	r7, [r3, #4]
{
    3718:	b090      	sub	sp, #64	; 0x40
    371a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    371c:	f3c7 0408 	ubfx	r4, r7, #0, #9
    3720:	2300      	movs	r3, #0
    3722:	f383 8811 	msr	BASEPRI, r3
    3726:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    372a:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    372e:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3732:	d10c      	bne.n	374e <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3734:	f002 000c 	and.w	r0, r2, #12
    3738:	2808      	cmp	r0, #8
    373a:	d11a      	bne.n	3772 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    373c:	4a77      	ldr	r2, [pc, #476]	; (391c <z_arm_fault+0x20c>)
    373e:	4978      	ldr	r1, [pc, #480]	; (3920 <z_arm_fault+0x210>)
    3740:	9300      	str	r3, [sp, #0]
    3742:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3746:	4618      	mov	r0, r3
    3748:	2201      	movs	r2, #1
    374a:	f005 fd85 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    374e:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3750:	4a74      	ldr	r2, [pc, #464]	; (3924 <z_arm_fault+0x214>)
    3752:	4975      	ldr	r1, [pc, #468]	; (3928 <z_arm_fault+0x218>)
    3754:	4875      	ldr	r0, [pc, #468]	; (392c <z_arm_fault+0x21c>)
    3756:	f240 33fb 	movw	r3, #1019	; 0x3fb
    375a:	f005 fce4 	bl	9126 <assert_print>
    375e:	4874      	ldr	r0, [pc, #464]	; (3930 <z_arm_fault+0x220>)
    3760:	f005 fce1 	bl	9126 <assert_print>
    3764:	486f      	ldr	r0, [pc, #444]	; (3924 <z_arm_fault+0x214>)
    3766:	f240 31fb 	movw	r1, #1019	; 0x3fb
    376a:	f005 fcd5 	bl	9118 <assert_post_action>
    376e:	2500      	movs	r5, #0
    3770:	e006      	b.n	3780 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3772:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3774:	bf46      	itte	mi
    3776:	460d      	movmi	r5, r1
	*nested_exc = false;
    3778:	461e      	movmi	r6, r3
			*nested_exc = true;
    377a:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    377c:	2d00      	cmp	r5, #0
    377e:	d0e7      	beq.n	3750 <z_arm_fault+0x40>
	*recoverable = false;
    3780:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    3784:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    3786:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    378a:	2b09      	cmp	r3, #9
    378c:	f200 80ab 	bhi.w	38e6 <z_arm_fault+0x1d6>
    3790:	e8df f003 	tbb	[pc, r3]
    3794:	7ea39f05 	.word	0x7ea39f05
    3798:	a9a9a9a9 	.word	0xa9a9a9a9
    379c:	a7a9      	.short	0xa7a9
	PR_FAULT_INFO("***** HARD FAULT *****");
    379e:	4b65      	ldr	r3, [pc, #404]	; (3934 <z_arm_fault+0x224>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37a0:	4f5d      	ldr	r7, [pc, #372]	; (3918 <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    37a2:	495f      	ldr	r1, [pc, #380]	; (3920 <z_arm_fault+0x210>)
    37a4:	f8cd 8000 	str.w	r8, [sp]
    37a8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    37ac:	2300      	movs	r3, #0
    37ae:	2201      	movs	r2, #1
    37b0:	4618      	mov	r0, r3
    37b2:	f005 fd51 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37b6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
    37b8:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37bc:	f014 0402 	ands.w	r4, r4, #2
    37c0:	d00c      	beq.n	37dc <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    37c2:	4b5d      	ldr	r3, [pc, #372]	; (3938 <z_arm_fault+0x228>)
    37c4:	f8cd 8000 	str.w	r8, [sp]
    37c8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    37cc:	2300      	movs	r3, #0
    37ce:	4954      	ldr	r1, [pc, #336]	; (3920 <z_arm_fault+0x210>)
    37d0:	2201      	movs	r2, #1
    37d2:	4618      	mov	r0, r3
    37d4:	f005 fd40 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    37d8:	2400      	movs	r4, #0
    37da:	e028      	b.n	382e <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    37dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37de:	2b00      	cmp	r3, #0
    37e0:	da04      	bge.n	37ec <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    37e2:	4b56      	ldr	r3, [pc, #344]	; (393c <z_arm_fault+0x22c>)
    37e4:	9400      	str	r4, [sp, #0]
    37e6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    37ea:	e7ef      	b.n	37cc <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    37ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37ee:	005b      	lsls	r3, r3, #1
    37f0:	d562      	bpl.n	38b8 <z_arm_fault+0x1a8>
		PR_EXC("  Fault escalation (see below)");
    37f2:	4b53      	ldr	r3, [pc, #332]	; (3940 <z_arm_fault+0x230>)
    37f4:	494a      	ldr	r1, [pc, #296]	; (3920 <z_arm_fault+0x210>)
    37f6:	9400      	str	r4, [sp, #0]
    37f8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    37fc:	2201      	movs	r2, #1
    37fe:	4623      	mov	r3, r4
    3800:	4620      	mov	r0, r4
    3802:	f005 fd29 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    3806:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3808:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    380c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3810:	429a      	cmp	r2, r3
    3812:	d127      	bne.n	3864 <z_arm_fault+0x154>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3814:	682b      	ldr	r3, [r5, #0]
    3816:	9303      	str	r3, [sp, #12]
    3818:	4b4a      	ldr	r3, [pc, #296]	; (3944 <z_arm_fault+0x234>)
    381a:	9400      	str	r4, [sp, #0]
    381c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3820:	4620      	mov	r0, r4
    3822:	4623      	mov	r3, r4
    3824:	493e      	ldr	r1, [pc, #248]	; (3920 <z_arm_fault+0x210>)
    3826:	2201      	movs	r2, #1
    3828:	f005 fd16 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    382c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    382e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3832:	b9a3      	cbnz	r3, 385e <z_arm_fault+0x14e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3834:	2220      	movs	r2, #32
    3836:	4629      	mov	r1, r5
    3838:	eb0d 0002 	add.w	r0, sp, r2
    383c:	f005 fd52 	bl	92e4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3842:	2e00      	cmp	r6, #0
    3844:	d063      	beq.n	390e <z_arm_fault+0x1fe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3846:	f3c3 0208 	ubfx	r2, r3, #0, #9
    384a:	b922      	cbnz	r2, 3856 <z_arm_fault+0x146>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    384c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3850:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3854:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    3856:	a908      	add	r1, sp, #32
    3858:	4620      	mov	r0, r4
    385a:	f7ff fbfd 	bl	3058 <z_arm_fatal_error>
}
    385e:	b010      	add	sp, #64	; 0x40
    3860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    3864:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3868:	b133      	cbz	r3, 3878 <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
    386a:	f10d 021f 	add.w	r2, sp, #31
    386e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3870:	4628      	mov	r0, r5
    3872:	f7ff fe89 	bl	3588 <mem_manage_fault>
    3876:	e00d      	b.n	3894 <z_arm_fault+0x184>
		} else if (SCB_BFSR != 0) {
    3878:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    387c:	b12b      	cbz	r3, 388a <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    387e:	f10d 011f 	add.w	r1, sp, #31
    3882:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3884:	f7ff fd76 	bl	3374 <bus_fault.constprop.0>
    3888:	e004      	b.n	3894 <z_arm_fault+0x184>
		} else if (SCB_UFSR != 0) {
    388a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    388c:	b29b      	uxth	r3, r3
    388e:	b11b      	cbz	r3, 3898 <z_arm_fault+0x188>
			reason = usage_fault(esf);
    3890:	f7ff fdfe 	bl	3490 <usage_fault.constprop.0>
    3894:	4604      	mov	r4, r0
    3896:	e7ca      	b.n	382e <z_arm_fault+0x11e>
			__ASSERT(0,
    3898:	492b      	ldr	r1, [pc, #172]	; (3948 <z_arm_fault+0x238>)
    389a:	4a22      	ldr	r2, [pc, #136]	; (3924 <z_arm_fault+0x214>)
    389c:	4823      	ldr	r0, [pc, #140]	; (392c <z_arm_fault+0x21c>)
    389e:	f240 23cd 	movw	r3, #717	; 0x2cd
    38a2:	f005 fc40 	bl	9126 <assert_print>
    38a6:	4829      	ldr	r0, [pc, #164]	; (394c <z_arm_fault+0x23c>)
    38a8:	f005 fc3d 	bl	9126 <assert_print>
    38ac:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    38b0:	481c      	ldr	r0, [pc, #112]	; (3924 <z_arm_fault+0x214>)
    38b2:	f005 fc31 	bl	9118 <assert_post_action>
    38b6:	e78f      	b.n	37d8 <z_arm_fault+0xc8>
    38b8:	4923      	ldr	r1, [pc, #140]	; (3948 <z_arm_fault+0x238>)
    38ba:	4a1a      	ldr	r2, [pc, #104]	; (3924 <z_arm_fault+0x214>)
    38bc:	481b      	ldr	r0, [pc, #108]	; (392c <z_arm_fault+0x21c>)
    38be:	f240 23d1 	movw	r3, #721	; 0x2d1
    38c2:	f005 fc30 	bl	9126 <assert_print>
    38c6:	4822      	ldr	r0, [pc, #136]	; (3950 <z_arm_fault+0x240>)
    38c8:	f005 fc2d 	bl	9126 <assert_print>
    38cc:	f240 21d1 	movw	r1, #721	; 0x2d1
    38d0:	e7ee      	b.n	38b0 <z_arm_fault+0x1a0>
		reason = mem_manage_fault(esf, 0, recoverable);
    38d2:	f10d 021f 	add.w	r2, sp, #31
    38d6:	2100      	movs	r1, #0
    38d8:	e7ca      	b.n	3870 <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    38da:	f10d 011f 	add.w	r1, sp, #31
    38de:	2000      	movs	r0, #0
    38e0:	e7d0      	b.n	3884 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    38e2:	4b1c      	ldr	r3, [pc, #112]	; (3954 <z_arm_fault+0x244>)
    38e4:	e76e      	b.n	37c4 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    38e6:	4a1c      	ldr	r2, [pc, #112]	; (3958 <z_arm_fault+0x248>)
    38e8:	4b1c      	ldr	r3, [pc, #112]	; (395c <z_arm_fault+0x24c>)
    38ea:	490d      	ldr	r1, [pc, #52]	; (3920 <z_arm_fault+0x210>)
    38ec:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    38f0:	bf18      	it	ne
    38f2:	4613      	movne	r3, r2
    38f4:	3c10      	subs	r4, #16
    38f6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    38fa:	4b19      	ldr	r3, [pc, #100]	; (3960 <z_arm_fault+0x250>)
    38fc:	9302      	str	r3, [sp, #8]
    38fe:	2300      	movs	r3, #0
    3900:	e9cd 3300 	strd	r3, r3, [sp]
    3904:	2201      	movs	r2, #1
    3906:	4618      	mov	r0, r3
    3908:	f005 fca6 	bl	9258 <z_log_msg2_runtime_create.constprop.0>
}
    390c:	e764      	b.n	37d8 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    390e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3912:	f023 0301 	bic.w	r3, r3, #1
    3916:	e79d      	b.n	3854 <z_arm_fault+0x144>
    3918:	e000ed00 	.word	0xe000ed00
    391c:	0000aef6 	.word	0x0000aef6
    3920:	00009cdc 	.word	0x00009cdc
    3924:	0000ae21 	.word	0x0000ae21
    3928:	0000af21 	.word	0x0000af21
    392c:	0000a092 	.word	0x0000a092
    3930:	0000af34 	.word	0x0000af34
    3934:	0000af72 	.word	0x0000af72
    3938:	0000af89 	.word	0x0000af89
    393c:	0000afaa 	.word	0x0000afaa
    3940:	0000afb8 	.word	0x0000afb8
    3944:	0000afd7 	.word	0x0000afd7
    3948:	0000a1ea 	.word	0x0000a1ea
    394c:	0000aff3 	.word	0x0000aff3
    3950:	0000b017 	.word	0x0000b017
    3954:	0000b047 	.word	0x0000b047
    3958:	0000aedd 	.word	0x0000aedd
    395c:	0000aec8 	.word	0x0000aec8
    3960:	0000b06b 	.word	0x0000b06b

00003964 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3964:	4a02      	ldr	r2, [pc, #8]	; (3970 <z_arm_fault_init+0xc>)
    3966:	6953      	ldr	r3, [r2, #20]
    3968:	f043 0310 	orr.w	r3, r3, #16
    396c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    396e:	4770      	bx	lr
    3970:	e000ed00 	.word	0xe000ed00

00003974 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3974:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3978:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    397c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    397e:	4672      	mov	r2, lr
	bl z_arm_fault
    3980:	f7ff fec6 	bl	3710 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3984:	bd01      	pop	{r0, pc}
    3986:	bf00      	nop

00003988 <z_arm_interrupt_init>:
    3988:	4804      	ldr	r0, [pc, #16]	; (399c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    398a:	2300      	movs	r3, #0
    398c:	2140      	movs	r1, #64	; 0x40
    398e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3990:	3301      	adds	r3, #1
    3992:	2b30      	cmp	r3, #48	; 0x30
    3994:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3998:	d1f9      	bne.n	398e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    399a:	4770      	bx	lr
    399c:	e000e100 	.word	0xe000e100

000039a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    39a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    39a2:	f380 8814 	msr	CONTROL, r0
    isb
    39a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    39aa:	f006 f835 	bl	9a18 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    39ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    39b0:	490d      	ldr	r1, [pc, #52]	; (39e8 <__start+0x48>)
    str r0, [r1]
    39b2:	6008      	str	r0, [r1, #0]
    dsb
    39b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39b8:	480c      	ldr	r0, [pc, #48]	; (39ec <__start+0x4c>)
    msr msp, r0
    39ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    39be:	f000 f82b 	bl	3a18 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    39c2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    39c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    39c8:	4809      	ldr	r0, [pc, #36]	; (39f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    39ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    39ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    39d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    39d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    39d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    39da:	4308      	orrs	r0, r1
    msr CONTROL, r0
    39dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    39e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    39e4:	f7ff fbe0 	bl	31a8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    39e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39ec:	20002cc0 	.word	0x20002cc0
    ldr r0, =z_interrupt_stacks
    39f0:	20001f40 	.word	0x20001f40

000039f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    39f4:	4907      	ldr	r1, [pc, #28]	; (3a14 <z_arm_clear_arm_mpu_config+0x20>)
    39f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    39fa:	2300      	movs	r3, #0
	int num_regions =
    39fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3a00:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3a02:	4293      	cmp	r3, r2
    3a04:	db00      	blt.n	3a08 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3a06:	4770      	bx	lr
  MPU->RNR = rnr;
    3a08:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3a0c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3a10:	3301      	adds	r3, #1
    3a12:	e7f6      	b.n	3a02 <z_arm_clear_arm_mpu_config+0xe>
    3a14:	e000ed00 	.word	0xe000ed00

00003a18 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3a18:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3a1a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3a1c:	2300      	movs	r3, #0
    3a1e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3a22:	f7ff ffe7 	bl	39f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3a26:	4b14      	ldr	r3, [pc, #80]	; (3a78 <z_arm_init_arch_hw_at_boot+0x60>)
    3a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3a3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3a40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3a44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3a48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3a4c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3a50:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3a54:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3a58:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3a5c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3a60:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3a64:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3a68:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3a6c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3a6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a72:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3a76:	bd08      	pop	{r3, pc}
    3a78:	e000e100 	.word	0xe000e100

00003a7c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3a7c:	4b08      	ldr	r3, [pc, #32]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a7e:	689b      	ldr	r3, [r3, #8]
    3a80:	4283      	cmp	r3, r0
    3a82:	d10b      	bne.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3a84:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3a88:	b143      	cbz	r3, 3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3a8a:	4b06      	ldr	r3, [pc, #24]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a8c:	685a      	ldr	r2, [r3, #4]
    3a8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3a92:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3a9a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3a9c:	f004 bac4 	b.w	8028 <z_thread_abort>
    3aa0:	20000c74 	.word	0x20000c74
    3aa4:	e000ed00 	.word	0xe000ed00

00003aa8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3aa8:	4b02      	ldr	r3, [pc, #8]	; (3ab4 <z_arm_configure_static_mpu_regions+0xc>)
    3aaa:	4a03      	ldr	r2, [pc, #12]	; (3ab8 <z_arm_configure_static_mpu_regions+0x10>)
    3aac:	4803      	ldr	r0, [pc, #12]	; (3abc <z_arm_configure_static_mpu_regions+0x14>)
    3aae:	2101      	movs	r1, #1
    3ab0:	f000 b886 	b.w	3bc0 <arm_core_mpu_configure_static_mpu_regions>
    3ab4:	20040000 	.word	0x20040000
    3ab8:	20000000 	.word	0x20000000
    3abc:	00009e40 	.word	0x00009e40

00003ac0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3ac0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3ac2:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3ac4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3ac6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3ac8:	4a04      	ldr	r2, [pc, #16]	; (3adc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3aca:	2120      	movs	r1, #32
    3acc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3ad0:	4618      	mov	r0, r3
    3ad2:	2101      	movs	r1, #1
    3ad4:	f000 b89c 	b.w	3c10 <arm_core_mpu_configure_dynamic_mpu_regions>
    3ad8:	20000b20 	.word	0x20000b20
    3adc:	150b0000 	.word	0x150b0000

00003ae0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3ae2:	4e28      	ldr	r6, [pc, #160]	; (3b84 <mpu_configure_regions+0xa4>)
    3ae4:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3ae6:	2500      	movs	r5, #0
    3ae8:	428d      	cmp	r5, r1
    3aea:	da15      	bge.n	3b18 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    3aec:	6844      	ldr	r4, [r0, #4]
    3aee:	2c00      	cmp	r4, #0
    3af0:	d045      	beq.n	3b7e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3af2:	b1d3      	cbz	r3, 3b2a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3af4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3af8:	ea14 0f0c 	tst.w	r4, ip
    3afc:	d00f      	beq.n	3b1e <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3afe:	4b22      	ldr	r3, [pc, #136]	; (3b88 <mpu_configure_regions+0xa8>)
    3b00:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b02:	9302      	str	r3, [sp, #8]
    3b04:	2300      	movs	r3, #0
    3b06:	2201      	movs	r2, #1
    3b08:	e9cd 3300 	strd	r3, r3, [sp]
    3b0c:	491f      	ldr	r1, [pc, #124]	; (3b8c <mpu_configure_regions+0xac>)
    3b0e:	4618      	mov	r0, r3
    3b10:	f005 fbb2 	bl	9278 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    3b14:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3b18:	4610      	mov	r0, r2
    3b1a:	b005      	add	sp, #20
    3b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    3b1e:	2c1f      	cmp	r4, #31
    3b20:	d9ed      	bls.n	3afe <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3b22:	6807      	ldr	r7, [r0, #0]
		&&
    3b24:	ea1c 0f07 	tst.w	ip, r7
    3b28:	d1e9      	bne.n	3afe <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3b2a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3b2c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b2e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b32:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3b36:	d910      	bls.n	3b5a <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    3b38:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3b3c:	d80f      	bhi.n	3b5e <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3b3e:	3c01      	subs	r4, #1
    3b40:	fab4 f484 	clz	r4, r4
    3b44:	f1c4 041f 	rsb	r4, r4, #31
    3b48:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3b4a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b4e:	ea4c 0c04 	orr.w	ip, ip, r4
    3b52:	d906      	bls.n	3b62 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b54:	4b0e      	ldr	r3, [pc, #56]	; (3b90 <mpu_configure_regions+0xb0>)
    3b56:	9203      	str	r2, [sp, #12]
    3b58:	e7d3      	b.n	3b02 <mpu_configure_regions+0x22>
		return REGION_32B;
    3b5a:	2408      	movs	r4, #8
    3b5c:	e7f5      	b.n	3b4a <mpu_configure_regions+0x6a>
		return REGION_4G;
    3b5e:	243e      	movs	r4, #62	; 0x3e
    3b60:	e7f3      	b.n	3b4a <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b62:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3b66:	4314      	orrs	r4, r2
    3b68:	f044 0410 	orr.w	r4, r4, #16
    3b6c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b70:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3b74:	f04c 0401 	orr.w	r4, ip, #1
    3b78:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    3b7c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    3b7e:	3501      	adds	r5, #1
    3b80:	300c      	adds	r0, #12
    3b82:	e7b1      	b.n	3ae8 <mpu_configure_regions+0x8>
    3b84:	e000ed00 	.word	0xe000ed00
    3b88:	0000b082 	.word	0x0000b082
    3b8c:	00009cd4 	.word	0x00009cd4
    3b90:	0000b0a5 	.word	0x0000b0a5

00003b94 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3b94:	4b04      	ldr	r3, [pc, #16]	; (3ba8 <arm_core_mpu_enable+0x14>)
    3b96:	2205      	movs	r2, #5
    3b98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ba0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3ba4:	4770      	bx	lr
    3ba6:	bf00      	nop
    3ba8:	e000ed00 	.word	0xe000ed00

00003bac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3bac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3bb0:	4b02      	ldr	r3, [pc, #8]	; (3bbc <arm_core_mpu_disable+0x10>)
    3bb2:	2200      	movs	r2, #0
    3bb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3bb8:	4770      	bx	lr
    3bba:	bf00      	nop
    3bbc:	e000ed00 	.word	0xe000ed00

00003bc0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3bc0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3bc2:	4d0e      	ldr	r5, [pc, #56]	; (3bfc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3bc4:	2301      	movs	r3, #1
    3bc6:	782a      	ldrb	r2, [r5, #0]
    3bc8:	460c      	mov	r4, r1
    3bca:	f7ff ff89 	bl	3ae0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3bce:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3bd0:	3016      	adds	r0, #22
    3bd2:	d111      	bne.n	3bf8 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3bd4:	f240 1311 	movw	r3, #273	; 0x111
    3bd8:	4a09      	ldr	r2, [pc, #36]	; (3c00 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3bda:	490a      	ldr	r1, [pc, #40]	; (3c04 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3bdc:	480a      	ldr	r0, [pc, #40]	; (3c08 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3bde:	f005 faa2 	bl	9126 <assert_print>
    3be2:	4621      	mov	r1, r4
    3be4:	4809      	ldr	r0, [pc, #36]	; (3c0c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    3be6:	f005 fa9e 	bl	9126 <assert_print>
			regions_num);
	}
}
    3bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3bee:	4804      	ldr	r0, [pc, #16]	; (3c00 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3bf0:	f240 1111 	movw	r1, #273	; 0x111
    3bf4:	f005 ba90 	b.w	9118 <assert_post_action>
}
    3bf8:	bd38      	pop	{r3, r4, r5, pc}
    3bfa:	bf00      	nop
    3bfc:	20000eb6 	.word	0x20000eb6
    3c00:	0000b0cb 	.word	0x0000b0cb
    3c04:	0000a1ea 	.word	0x0000a1ea
    3c08:	0000a092 	.word	0x0000a092
    3c0c:	0000b102 	.word	0x0000b102

00003c10 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3c10:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3c12:	4a13      	ldr	r2, [pc, #76]	; (3c60 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3c14:	2300      	movs	r3, #0
    3c16:	7812      	ldrb	r2, [r2, #0]
    3c18:	460c      	mov	r4, r1
    3c1a:	f7ff ff61 	bl	3ae0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3c1e:	f110 0f16 	cmn.w	r0, #22
    3c22:	d004      	beq.n	3c2e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    3c24:	4b0f      	ldr	r3, [pc, #60]	; (3c64 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    3c26:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3c28:	2807      	cmp	r0, #7
    3c2a:	dd12      	ble.n	3c52 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3c2c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3c2e:	4a0e      	ldr	r2, [pc, #56]	; (3c68 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3c30:	490e      	ldr	r1, [pc, #56]	; (3c6c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    3c32:	480f      	ldr	r0, [pc, #60]	; (3c70 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    3c34:	f44f 7398 	mov.w	r3, #304	; 0x130
    3c38:	f005 fa75 	bl	9126 <assert_print>
    3c3c:	4621      	mov	r1, r4
    3c3e:	480d      	ldr	r0, [pc, #52]	; (3c74 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    3c40:	f005 fa71 	bl	9126 <assert_print>
}
    3c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3c48:	4807      	ldr	r0, [pc, #28]	; (3c68 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3c4a:	f44f 7198 	mov.w	r1, #304	; 0x130
    3c4e:	f005 ba63 	b.w	9118 <assert_post_action>
  MPU->RNR = rnr;
    3c52:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3c56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3c5a:	3001      	adds	r0, #1
    3c5c:	e7e4      	b.n	3c28 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    3c5e:	bf00      	nop
    3c60:	20000eb6 	.word	0x20000eb6
    3c64:	e000ed00 	.word	0xe000ed00
    3c68:	0000b0cb 	.word	0x0000b0cb
    3c6c:	0000a1ea 	.word	0x0000a1ea
    3c70:	0000a092 	.word	0x0000a092
    3c74:	0000b12e 	.word	0x0000b12e

00003c78 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3c78:	4928      	ldr	r1, [pc, #160]	; (3d1c <z_arm_mpu_init+0xa4>)
{
    3c7a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3c7c:	680c      	ldr	r4, [r1, #0]
    3c7e:	2c08      	cmp	r4, #8
    3c80:	d913      	bls.n	3caa <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    3c82:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3c86:	4a26      	ldr	r2, [pc, #152]	; (3d20 <z_arm_mpu_init+0xa8>)
    3c88:	4926      	ldr	r1, [pc, #152]	; (3d24 <z_arm_mpu_init+0xac>)
    3c8a:	4827      	ldr	r0, [pc, #156]	; (3d28 <z_arm_mpu_init+0xb0>)
    3c8c:	f005 fa4b 	bl	9126 <assert_print>
    3c90:	4826      	ldr	r0, [pc, #152]	; (3d2c <z_arm_mpu_init+0xb4>)
    3c92:	2208      	movs	r2, #8
    3c94:	4621      	mov	r1, r4
    3c96:	f005 fa46 	bl	9126 <assert_print>
    3c9a:	4821      	ldr	r0, [pc, #132]	; (3d20 <z_arm_mpu_init+0xa8>)
    3c9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3ca0:	f005 fa3a 	bl	9118 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    3ca8:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    3caa:	f7ff ff7f 	bl	3bac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3cae:	6848      	ldr	r0, [r1, #4]
    3cb0:	491f      	ldr	r1, [pc, #124]	; (3d30 <z_arm_mpu_init+0xb8>)
    3cb2:	2200      	movs	r2, #0
    3cb4:	4294      	cmp	r4, r2
    3cb6:	f100 000c 	add.w	r0, r0, #12
    3cba:	d10b      	bne.n	3cd4 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    3cbc:	4b1d      	ldr	r3, [pc, #116]	; (3d34 <z_arm_mpu_init+0xbc>)
    3cbe:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3cc0:	f7ff ff68 	bl	3b94 <arm_core_mpu_enable>
	__ASSERT(
    3cc4:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    3cc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3ccc:	2b08      	cmp	r3, #8
    3cce:	d114      	bne.n	3cfa <z_arm_mpu_init+0x82>
	return 0;
    3cd0:	2000      	movs	r0, #0
    3cd2:	e7e9      	b.n	3ca8 <z_arm_mpu_init+0x30>
    3cd4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3cd8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    3cdc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3ce0:	4313      	orrs	r3, r2
    3ce2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3ce6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3cea:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3cee:	f043 0301 	orr.w	r3, r3, #1
    3cf2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3cf6:	3201      	adds	r2, #1
    3cf8:	e7dc      	b.n	3cb4 <z_arm_mpu_init+0x3c>
	__ASSERT(
    3cfa:	4a09      	ldr	r2, [pc, #36]	; (3d20 <z_arm_mpu_init+0xa8>)
    3cfc:	490e      	ldr	r1, [pc, #56]	; (3d38 <z_arm_mpu_init+0xc0>)
    3cfe:	480a      	ldr	r0, [pc, #40]	; (3d28 <z_arm_mpu_init+0xb0>)
    3d00:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3d04:	f005 fa0f 	bl	9126 <assert_print>
    3d08:	480c      	ldr	r0, [pc, #48]	; (3d3c <z_arm_mpu_init+0xc4>)
    3d0a:	f005 fa0c 	bl	9126 <assert_print>
    3d0e:	4804      	ldr	r0, [pc, #16]	; (3d20 <z_arm_mpu_init+0xa8>)
    3d10:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3d14:	f005 fa00 	bl	9118 <assert_post_action>
    3d18:	e7da      	b.n	3cd0 <z_arm_mpu_init+0x58>
    3d1a:	bf00      	nop
    3d1c:	00009e4c 	.word	0x00009e4c
    3d20:	0000b0cb 	.word	0x0000b0cb
    3d24:	0000a1ea 	.word	0x0000a1ea
    3d28:	0000a092 	.word	0x0000a092
    3d2c:	0000b15b 	.word	0x0000b15b
    3d30:	e000ed00 	.word	0xe000ed00
    3d34:	20000eb6 	.word	0x20000eb6
    3d38:	0000b18f 	.word	0x0000b18f
    3d3c:	0000b1df 	.word	0x0000b1df

00003d40 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3d40:	4b01      	ldr	r3, [pc, #4]	; (3d48 <__stdout_hook_install+0x8>)
    3d42:	6018      	str	r0, [r3, #0]
}
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop
    3d48:	200000c4 	.word	0x200000c4

00003d4c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3d4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d4e:	f04f 0340 	mov.w	r3, #64	; 0x40
    3d52:	f3ef 8011 	mrs	r0, BASEPRI
    3d56:	f383 8812 	msr	BASEPRI_MAX, r3
    3d5a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3d5e:	4a11      	ldr	r2, [pc, #68]	; (3da4 <nordicsemi_nrf52_init+0x58>)
    3d60:	2301      	movs	r3, #1
    3d62:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3d6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3d6e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3d72:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    3d76:	2c08      	cmp	r4, #8
    3d78:	d108      	bne.n	3d8c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3d7a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    3d7e:	2905      	cmp	r1, #5
    3d80:	d804      	bhi.n	3d8c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3d82:	4c09      	ldr	r4, [pc, #36]	; (3da8 <nordicsemi_nrf52_init+0x5c>)
    3d84:	5c61      	ldrb	r1, [r4, r1]
    3d86:	b109      	cbz	r1, 3d8c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3d88:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d90:	2201      	movs	r2, #1
    3d92:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3d96:	f380 8811 	msr	BASEPRI, r0
    3d9a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3d9e:	2000      	movs	r0, #0
    3da0:	bd10      	pop	{r4, pc}
    3da2:	bf00      	nop
    3da4:	4001e000 	.word	0x4001e000
    3da8:	0000b20f 	.word	0x0000b20f

00003dac <sys_arch_reboot>:
    *p_gpregret = val;
    3dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3db0:	b2c0      	uxtb	r0, r0
    3db2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3db6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3dba:	4905      	ldr	r1, [pc, #20]	; (3dd0 <sys_arch_reboot+0x24>)
    3dbc:	4b05      	ldr	r3, [pc, #20]	; (3dd4 <sys_arch_reboot+0x28>)
    3dbe:	68ca      	ldr	r2, [r1, #12]
    3dc0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3dc4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3dc6:	60cb      	str	r3, [r1, #12]
    3dc8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3dcc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3dce:	e7fd      	b.n	3dcc <sys_arch_reboot+0x20>
    3dd0:	e000ed00 	.word	0xe000ed00
    3dd4:	05fa0004 	.word	0x05fa0004

00003dd8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3dd8:	b120      	cbz	r0, 3de4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3dda:	4b03      	ldr	r3, [pc, #12]	; (3de8 <arch_busy_wait+0x10>)
    3ddc:	0180      	lsls	r0, r0, #6
    3dde:	f043 0301 	orr.w	r3, r3, #1
    3de2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3de4:	4770      	bx	lr
    3de6:	bf00      	nop
    3de8:	00009d40 	.word	0x00009d40

00003dec <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    3dec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    3dee:	790d      	ldrb	r5, [r1, #4]
    3df0:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    3df4:	2c07      	cmp	r4, #7
    3df6:	d822      	bhi.n	3e3e <adc_nrfx_channel_setup+0x52>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3df8:	780a      	ldrb	r2, [r1, #0]
    3dfa:	2a09      	cmp	r2, #9
    3dfc:	d815      	bhi.n	3e2a <adc_nrfx_channel_setup+0x3e>
    3dfe:	e8df f002 	tbb	[pc, r2]
    3e02:	0606      	.short	0x0606
    3e04:	14060606 	.word	0x14060606
    3e08:	12141005 	.word	0x12141005
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    3e0c:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    3e0e:	784b      	ldrb	r3, [r1, #1]
    3e10:	2b03      	cmp	r3, #3
    3e12:	d018      	beq.n	3e46 <adc_nrfx_channel_setup+0x5a>
    3e14:	2b04      	cmp	r3, #4
    3e16:	f04f 0300 	mov.w	r3, #0
    3e1a:	d015      	beq.n	3e48 <adc_nrfx_channel_setup+0x5c>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    3e1c:	4a2f      	ldr	r2, [pc, #188]	; (3edc <adc_nrfx_channel_setup+0xf0>)
    3e1e:	9202      	str	r2, [sp, #8]
    3e20:	e006      	b.n	3e30 <adc_nrfx_channel_setup+0x44>
		config.gain = NRF_SAADC_GAIN2;
    3e22:	2206      	movs	r2, #6
		break;
    3e24:	e7f3      	b.n	3e0e <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3e26:	2207      	movs	r2, #7
		break;
    3e28:	e7f1      	b.n	3e0e <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    3e2a:	4b2d      	ldr	r3, [pc, #180]	; (3ee0 <adc_nrfx_channel_setup+0xf4>)
    3e2c:	9302      	str	r3, [sp, #8]
    3e2e:	2300      	movs	r3, #0
    3e30:	e9cd 3300 	strd	r3, r3, [sp]
    3e34:	492b      	ldr	r1, [pc, #172]	; (3ee4 <adc_nrfx_channel_setup+0xf8>)
    3e36:	2201      	movs	r2, #1
    3e38:	4618      	mov	r0, r3
    3e3a:	f005 fa7c 	bl	9336 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3e3e:	f06f 0015 	mvn.w	r0, #21
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;

	return 0;
}
    3e42:	b004      	add	sp, #16
    3e44:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->reference) {
    3e46:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
    3e48:	8848      	ldrh	r0, [r1, #2]
    3e4a:	f244 060a 	movw	r6, #16394	; 0x400a
    3e4e:	42b0      	cmp	r0, r6
    3e50:	d03d      	beq.n	3ece <adc_nrfx_channel_setup+0xe2>
    3e52:	d80a      	bhi.n	3e6a <adc_nrfx_channel_setup+0x7e>
    3e54:	f244 0603 	movw	r6, #16387	; 0x4003
    3e58:	42b0      	cmp	r0, r6
    3e5a:	d014      	beq.n	3e86 <adc_nrfx_channel_setup+0x9a>
    3e5c:	f244 0605 	movw	r6, #16389	; 0x4005
    3e60:	42b0      	cmp	r0, r6
    3e62:	d032      	beq.n	3eca <adc_nrfx_channel_setup+0xde>
    3e64:	b398      	cbz	r0, 3ece <adc_nrfx_channel_setup+0xe2>
		LOG_ERR("Selected ADC acquisition time is not valid");
    3e66:	4b20      	ldr	r3, [pc, #128]	; (3ee8 <adc_nrfx_channel_setup+0xfc>)
    3e68:	e7e0      	b.n	3e2c <adc_nrfx_channel_setup+0x40>
	switch (channel_cfg->acquisition_time) {
    3e6a:	f244 0614 	movw	r6, #16404	; 0x4014
    3e6e:	42b0      	cmp	r0, r6
    3e70:	d02f      	beq.n	3ed2 <adc_nrfx_channel_setup+0xe6>
    3e72:	f244 0628 	movw	r6, #16424	; 0x4028
    3e76:	42b0      	cmp	r0, r6
    3e78:	d02d      	beq.n	3ed6 <adc_nrfx_channel_setup+0xea>
    3e7a:	f244 060f 	movw	r6, #16399	; 0x400f
    3e7e:	42b0      	cmp	r0, r6
    3e80:	d1f1      	bne.n	3e66 <adc_nrfx_channel_setup+0x7a>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    3e82:	2003      	movs	r0, #3
    3e84:	e000      	b.n	3e88 <adc_nrfx_channel_setup+0x9c>
	nrf_saadc_channel_config_t config = {
    3e86:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3e88:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    3e8c:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3e8e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
    3e92:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    p_reg->CH[channel].CONFIG =
    3e96:	0123      	lsls	r3, r4, #4
    3e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e9c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3ea0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    3ea4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    3ea8:	0123      	lsls	r3, r4, #4
    3eaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3eae:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3eb2:	798a      	ldrb	r2, [r1, #6]
    3eb4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    3eb8:	2000      	movs	r0, #0
    3eba:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    3ebe:	4b0b      	ldr	r3, [pc, #44]	; (3eec <adc_nrfx_channel_setup+0x100>)
    3ec0:	794a      	ldrb	r2, [r1, #5]
    3ec2:	4423      	add	r3, r4
    3ec4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	return 0;
    3ec8:	e7bb      	b.n	3e42 <adc_nrfx_channel_setup+0x56>
	switch (channel_cfg->acquisition_time) {
    3eca:	2001      	movs	r0, #1
    3ecc:	e7dc      	b.n	3e88 <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3ece:	2002      	movs	r0, #2
    3ed0:	e7da      	b.n	3e88 <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3ed2:	2004      	movs	r0, #4
    3ed4:	e7d8      	b.n	3e88 <adc_nrfx_channel_setup+0x9c>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3ed6:	2005      	movs	r0, #5
    3ed8:	e7d6      	b.n	3e88 <adc_nrfx_channel_setup+0x9c>
    3eda:	bf00      	nop
    3edc:	0000b238 	.word	0x0000b238
    3ee0:	0000b219 	.word	0x0000b219
    3ee4:	00009cac 	.word	0x00009cac
    3ee8:	0000b25c 	.word	0x0000b25c
    3eec:	20000000 	.word	0x20000000

00003ef0 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <adc_context_start_sampling.isra.0+0x14>)
    3ef2:	2201      	movs	r2, #1
    3ef4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3ef8:	b108      	cbz	r0, 3efe <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3efa:	60da      	str	r2, [r3, #12]
}
    3efc:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3efe:	601a      	str	r2, [r3, #0]
    3f00:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3f02:	4770      	bx	lr
    3f04:	40007000 	.word	0x40007000

00003f08 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f0a:	460c      	mov	r4, r1
    3f0c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
    3f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f12:	4870      	ldr	r0, [pc, #448]	; (40d4 <adc_nrfx_read+0x1cc>)
    3f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f18:	f002 ff66 	bl	6de8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    3f1c:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
    3f1e:	1e73      	subs	r3, r6, #1
    3f20:	2bfe      	cmp	r3, #254	; 0xfe
    3f22:	f04f 0300 	mov.w	r3, #0
    3f26:	d909      	bls.n	3f3c <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    3f28:	4a6b      	ldr	r2, [pc, #428]	; (40d8 <adc_nrfx_read+0x1d0>)
    3f2a:	9202      	str	r2, [sp, #8]
		LOG_ERR(
    3f2c:	e9cd 3300 	strd	r3, r3, [sp]
    3f30:	496a      	ldr	r1, [pc, #424]	; (40dc <adc_nrfx_read+0x1d4>)
    3f32:	2201      	movs	r2, #1
    3f34:	4618      	mov	r0, r3
    3f36:	f005 f9fe 	bl	9336 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    3f3a:	e014      	b.n	3f66 <adc_nrfx_read+0x5e>
    p_reg->CH[channel].PSELP = pselp;
    3f3c:	4d68      	ldr	r5, [pc, #416]	; (40e0 <adc_nrfx_read+0x1d8>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3f3e:	4f69      	ldr	r7, [pc, #420]	; (40e4 <adc_nrfx_read+0x1dc>)
    3f40:	461a      	mov	r2, r3
	active_channels = 0U;
    3f42:	4618      	mov	r0, r3
		if (selected_channels & BIT(channel_id)) {
    3f44:	fa26 f302 	lsr.w	r3, r6, r2
    3f48:	f013 0301 	ands.w	r3, r3, #1
    3f4c:	d039      	beq.n	3fc2 <adc_nrfx_read+0xba>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3f4e:	5cbb      	ldrb	r3, [r7, r2]
    3f50:	b98b      	cbnz	r3, 3f76 <adc_nrfx_read+0x6e>
				LOG_ERR("Channel %u not configured",
    3f52:	9203      	str	r2, [sp, #12]
    3f54:	4a64      	ldr	r2, [pc, #400]	; (40e8 <adc_nrfx_read+0x1e0>)
    3f56:	9202      	str	r2, [sp, #8]
    3f58:	e9cd 3300 	strd	r3, r3, [sp]
    3f5c:	495f      	ldr	r1, [pc, #380]	; (40dc <adc_nrfx_read+0x1d4>)
    3f5e:	2201      	movs	r2, #1
    3f60:	4618      	mov	r0, r3
    3f62:	f005 f9e8 	bl	9336 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3f66:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    3f6a:	485a      	ldr	r0, [pc, #360]	; (40d4 <adc_nrfx_read+0x1cc>)
    3f6c:	f002 fefe 	bl	6d6c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3f70:	4620      	mov	r0, r4
    3f72:	b007      	add	sp, #28
    3f74:	bdf0      	pop	{r4, r5, r6, r7, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3f76:	eb05 1e02 	add.w	lr, r5, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3f7a:	f894 c011 	ldrb.w	ip, [r4, #17]
    3f7e:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
    3f82:	f1bc 0c00 	subs.w	ip, ip, #0
    3f86:	bf18      	it	ne
    3f88:	f04f 0c01 	movne.w	ip, #1
    3f8c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
    3f90:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
    3f94:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    3f98:	f102 0151 	add.w	r1, r2, #81	; 0x51
    3f9c:	0109      	lsls	r1, r1, #4
			++active_channels;
    3f9e:	3001      	adds	r0, #1
    3fa0:	506b      	str	r3, [r5, r1]
    3fa2:	b2c0      	uxtb	r0, r0
	} while (++channel_id < SAADC_CH_NUM);
    3fa4:	3201      	adds	r2, #1
    3fa6:	2a08      	cmp	r2, #8
    3fa8:	d1cc      	bne.n	3f44 <adc_nrfx_read+0x3c>
	error = set_resolution(sequence);
    3faa:	7c22      	ldrb	r2, [r4, #16]
	switch (sequence->resolution) {
    3fac:	f1a2 0108 	sub.w	r1, r2, #8
    3fb0:	2300      	movs	r3, #0
    3fb2:	2906      	cmp	r1, #6
    3fb4:	d818      	bhi.n	3fe8 <adc_nrfx_read+0xe0>
    3fb6:	e8df f001 	tbb	[pc, r1]
    3fba:	171e      	.short	0x171e
    3fbc:	17091720 	.word	0x17091720
    3fc0:	15          	.byte	0x15
    3fc1:	00          	.byte	0x00
    3fc2:	f102 0151 	add.w	r1, r2, #81	; 0x51
    3fc6:	0109      	lsls	r1, r1, #4
    3fc8:	506b      	str	r3, [r5, r1]
}
    3fca:	e7eb      	b.n	3fa4 <adc_nrfx_read+0x9c>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3fcc:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
    3fce:	4a44      	ldr	r2, [pc, #272]	; (40e0 <adc_nrfx_read+0x1d8>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3fd0:	2801      	cmp	r0, #1
    3fd2:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3fd6:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3fd8:	d911      	bls.n	3ffe <adc_nrfx_read+0xf6>
    3fda:	b193      	cbz	r3, 4002 <adc_nrfx_read+0xfa>
		LOG_ERR(
    3fdc:	4b43      	ldr	r3, [pc, #268]	; (40ec <adc_nrfx_read+0x1e4>)
    3fde:	9302      	str	r3, [sp, #8]
    3fe0:	2300      	movs	r3, #0
    3fe2:	e7a3      	b.n	3f2c <adc_nrfx_read+0x24>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3fe4:	2303      	movs	r3, #3
		break;
    3fe6:	e7f2      	b.n	3fce <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
    3fe8:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    3fea:	4a41      	ldr	r2, [pc, #260]	; (40f0 <adc_nrfx_read+0x1e8>)
    3fec:	9300      	str	r3, [sp, #0]
    3fee:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3ff2:	2300      	movs	r3, #0
    3ff4:	e7b2      	b.n	3f5c <adc_nrfx_read+0x54>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3ff6:	2300      	movs	r3, #0
    3ff8:	e7e9      	b.n	3fce <adc_nrfx_read+0xc6>
	switch (sequence->resolution) {
    3ffa:	2301      	movs	r3, #1
    3ffc:	e7e7      	b.n	3fce <adc_nrfx_read+0xc6>
	switch (sequence->oversampling) {
    3ffe:	2b08      	cmp	r3, #8
    4000:	d816      	bhi.n	4030 <adc_nrfx_read+0x128>
    p_reg->OVERSAMPLE = oversample;
    4002:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    4006:	6822      	ldr	r2, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    4008:	0043      	lsls	r3, r0, #1
	if (sequence->options) {
    400a:	b9b2      	cbnz	r2, 403a <adc_nrfx_read+0x132>
	if (sequence->buffer_size < needed_buffer_size) {
    400c:	68e2      	ldr	r2, [r4, #12]
    400e:	429a      	cmp	r2, r3
    4010:	d217      	bcs.n	4042 <adc_nrfx_read+0x13a>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    4012:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4016:	4b37      	ldr	r3, [pc, #220]	; (40f4 <adc_nrfx_read+0x1ec>)
    4018:	9302      	str	r3, [sp, #8]
    401a:	2300      	movs	r3, #0
    401c:	e9cd 3300 	strd	r3, r3, [sp]
    4020:	492e      	ldr	r1, [pc, #184]	; (40dc <adc_nrfx_read+0x1d4>)
    4022:	2201      	movs	r2, #1
    4024:	4618      	mov	r0, r3
    4026:	f005 f986 	bl	9336 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    402a:	f06f 040b 	mvn.w	r4, #11
    402e:	e79c      	b.n	3f6a <adc_nrfx_read+0x62>
	switch (sequence->oversampling) {
    4030:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    4032:	4b31      	ldr	r3, [pc, #196]	; (40f8 <adc_nrfx_read+0x1f0>)
    4034:	9302      	str	r3, [sp, #8]
    4036:	2300      	movs	r3, #0
    4038:	e78e      	b.n	3f58 <adc_nrfx_read+0x50>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    403a:	8992      	ldrh	r2, [r2, #12]
    403c:	fb02 3303 	mla	r3, r2, r3, r3
    4040:	e7e4      	b.n	400c <adc_nrfx_read+0x104>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    4042:	4b27      	ldr	r3, [pc, #156]	; (40e0 <adc_nrfx_read+0x1d8>)
    4044:	68a2      	ldr	r2, [r4, #8]
    4046:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    404a:	4626      	mov	r6, r4
    p_reg->RESULT.MAXCNT = size;
    404c:	f8c3 0630 	str.w	r0, [r3, #1584]	; 0x630
    4050:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4052:	4f2a      	ldr	r7, [pc, #168]	; (40fc <adc_nrfx_read+0x1f4>)
    4054:	f107 0564 	add.w	r5, r7, #100	; 0x64
    4058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    405a:	6833      	ldr	r3, [r6, #0]
    405c:	602b      	str	r3, [r5, #0]
	ctx->status = 0;

	if (sequence->options) {
    405e:	6823      	ldr	r3, [r4, #0]
	ctx->status = 0;
    4060:	2500      	movs	r5, #0
    4062:	663d      	str	r5, [r7, #96]	; 0x60
	if (sequence->options) {
    4064:	463e      	mov	r6, r7
    4066:	b383      	cbz	r3, 40ca <adc_nrfx_read+0x1c2>
		ctx->options = *sequence->options;
    4068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    406a:	f107 0478 	add.w	r4, r7, #120	; 0x78
    406e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    4072:	667c      	str	r4, [r7, #100]	; 0x64
		ctx->sampling_index = 0U;
    4074:	f8a7 5088 	strh.w	r5, [r7, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    4078:	b338      	cbz	r0, 40ca <adc_nrfx_read+0x1c2>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    407a:	f3bf 8f5b 	dmb	ish
    407e:	e856 3f00 	ldrex	r3, [r6]
    4082:	e846 5200 	strex	r2, r5, [r6]
    4086:	2a00      	cmp	r2, #0
    4088:	d1f9      	bne.n	407e <adc_nrfx_read+0x176>
    408a:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    408e:	491c      	ldr	r1, [pc, #112]	; (4100 <adc_nrfx_read+0x1f8>)
    4090:	6fbc      	ldr	r4, [r7, #120]	; 0x78
    4092:	4a1c      	ldr	r2, [pc, #112]	; (4104 <adc_nrfx_read+0x1fc>)
    4094:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4098:	460e      	mov	r6, r1
    409a:	4629      	mov	r1, r5
    409c:	fbe4 6100 	umlal	r6, r1, r4, r0
    40a0:	2300      	movs	r3, #0
    40a2:	4630      	mov	r0, r6
    40a4:	f7fc fa5e 	bl	564 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    40a8:	2200      	movs	r2, #0
    40aa:	e9cd 0100 	strd	r0, r1, [sp]
    40ae:	2300      	movs	r3, #0
    40b0:	f107 0008 	add.w	r0, r7, #8
    40b4:	f004 fc44 	bl	8940 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    40b8:	4813      	ldr	r0, [pc, #76]	; (4108 <adc_nrfx_read+0x200>)
    40ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    40be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40c2:	f002 fe91 	bl	6de8 <z_impl_k_sem_take>
	return ctx->status;
    40c6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
	return error;
    40c8:	e74f      	b.n	3f6a <adc_nrfx_read+0x62>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    40ca:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
    40ce:	f7ff ff0f 	bl	3ef0 <adc_context_start_sampling.isra.0>
    40d2:	e7f1      	b.n	40b8 <adc_nrfx_read+0x1b0>
    40d4:	20000040 	.word	0x20000040
    40d8:	0000b287 	.word	0x0000b287
    40dc:	00009cac 	.word	0x00009cac
    40e0:	40007000 	.word	0x40007000
    40e4:	20000090 	.word	0x20000090
    40e8:	0000b2a5 	.word	0x0000b2a5
    40ec:	0000b2e4 	.word	0x0000b2e4
    40f0:	0000b2bf 	.word	0x0000b2bf
    40f4:	0000b339 	.word	0x0000b339
    40f8:	0000b316 	.word	0x0000b316
    40fc:	20000000 	.word	0x20000000
    4100:	000f423f 	.word	0x000f423f
    4104:	000f4240 	.word	0x000f4240
    4108:	20000050 	.word	0x20000050

0000410c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    410c:	4b0e      	ldr	r3, [pc, #56]	; (4148 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    410e:	b510      	push	{r4, lr}
    4110:	2400      	movs	r4, #0
    4112:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4116:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    411a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    411e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    4122:	2212      	movs	r2, #18
    4124:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    4128:	2007      	movs	r0, #7
    412a:	f7fe ffe5 	bl	30f8 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    412e:	4622      	mov	r2, r4
    4130:	2101      	movs	r1, #1
    4132:	2007      	movs	r0, #7
    4134:	f7fe fffc 	bl	3130 <z_arm_irq_priority_set>
	return sem->count;
    4138:	4804      	ldr	r0, [pc, #16]	; (414c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    413a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    413c:	b913      	cbnz	r3, 4144 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    413e:	3040      	adds	r0, #64	; 0x40
    4140:	f002 fe14 	bl	6d6c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    4144:	2000      	movs	r0, #0
    4146:	bd10      	pop	{r4, pc}
    4148:	40007000 	.word	0x40007000
    414c:	20000000 	.word	0x20000000

00004150 <saadc_irq_handler>:
{
    4150:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4152:	4b2e      	ldr	r3, [pc, #184]	; (420c <saadc_irq_handler+0xbc>)
    4154:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    4158:	2a00      	cmp	r2, #0
    415a:	d04a      	beq.n	41f2 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    415c:	2200      	movs	r2, #0
    415e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    4162:	4c2b      	ldr	r4, [pc, #172]	; (4210 <saadc_irq_handler+0xc0>)
    4164:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4168:	2101      	movs	r1, #1
    416a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    416c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    4170:	6e63      	ldr	r3, [r4, #100]	; 0x64
    4172:	4625      	mov	r5, r4
    4174:	b3c3      	cbz	r3, 41e8 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    4176:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    4178:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
    417c:	b133      	cbz	r3, 418c <saadc_irq_handler+0x3c>
			action = callback(dev,
    417e:	f104 0164 	add.w	r1, r4, #100	; 0x64
    4182:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    4184:	2801      	cmp	r0, #1
    4186:	d014      	beq.n	41b2 <saadc_irq_handler+0x62>
    4188:	2802      	cmp	r0, #2
    418a:	d028      	beq.n	41de <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    418c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    4190:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    4194:	429a      	cmp	r2, r3
    4196:	d922      	bls.n	41de <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    4198:	3301      	adds	r3, #1
    419a:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    419e:	4b1b      	ldr	r3, [pc, #108]	; (420c <saadc_irq_handler+0xbc>)
    41a0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    41a4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    41a8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    41aa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    41ae:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    41b2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    41b4:	b92b      	cbnz	r3, 41c2 <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    41b6:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    41ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41be:	f7ff be97 	b.w	3ef0 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    41c2:	f3bf 8f5b 	dmb	ish
    41c6:	e855 3f00 	ldrex	r3, [r5]
    41ca:	1e5a      	subs	r2, r3, #1
    41cc:	e845 2100 	strex	r1, r2, [r5]
    41d0:	2900      	cmp	r1, #0
    41d2:	d1f8      	bne.n	41c6 <saadc_irq_handler+0x76>
    41d4:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    41d8:	2b01      	cmp	r3, #1
    41da:	dcec      	bgt.n	41b6 <saadc_irq_handler+0x66>
    41dc:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    41de:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    41e0:	b113      	cbz	r3, 41e8 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    41e2:	480c      	ldr	r0, [pc, #48]	; (4214 <saadc_irq_handler+0xc4>)
    41e4:	f005 fbf3 	bl	99ce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    41e8:	480b      	ldr	r0, [pc, #44]	; (4218 <saadc_irq_handler+0xc8>)
    41ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41ee:	f002 bdbd 	b.w	6d6c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41f2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    41f6:	2900      	cmp	r1, #0
    41f8:	d0f0      	beq.n	41dc <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41fa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    41fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4202:	2201      	movs	r2, #1
    4204:	609a      	str	r2, [r3, #8]
    4206:	601a      	str	r2, [r3, #0]
    4208:	605a      	str	r2, [r3, #4]
}
    420a:	e7e7      	b.n	41dc <saadc_irq_handler+0x8c>
    420c:	40007000 	.word	0x40007000
    4210:	20000000 	.word	0x20000000
    4214:	20000008 	.word	0x20000008
    4218:	20000050 	.word	0x20000050

0000421c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    421c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    421e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4220:	490a      	ldr	r1, [pc, #40]	; (424c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4222:	4a0b      	ldr	r2, [pc, #44]	; (4250 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4224:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4226:	2340      	movs	r3, #64	; 0x40
    4228:	9300      	str	r3, [sp, #0]
    422a:	1149      	asrs	r1, r1, #5
{
    422c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    422e:	4623      	mov	r3, r4
    4230:	4808      	ldr	r0, [pc, #32]	; (4254 <onoff_start+0x38>)
    4232:	f005 f8bc 	bl	93ae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4236:	1e01      	subs	r1, r0, #0
    4238:	da05      	bge.n	4246 <onoff_start+0x2a>
		notify(mgr, err);
    423a:	4628      	mov	r0, r5
    423c:	4623      	mov	r3, r4
	}
}
    423e:	b003      	add	sp, #12
    4240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4244:	4718      	bx	r3
}
    4246:	b003      	add	sp, #12
    4248:	bd30      	pop	{r4, r5, pc}
    424a:	bf00      	nop
    424c:	20000b40 	.word	0x20000b40
    4250:	00009419 	.word	0x00009419
    4254:	00009a9c 	.word	0x00009a9c

00004258 <get_status>:
{
    4258:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    425a:	b2cc      	uxtb	r4, r1
    425c:	2c01      	cmp	r4, #1
{
    425e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4260:	d909      	bls.n	4276 <get_status+0x1e>
    4262:	4909      	ldr	r1, [pc, #36]	; (4288 <get_status+0x30>)
    4264:	4809      	ldr	r0, [pc, #36]	; (428c <get_status+0x34>)
    4266:	4a0a      	ldr	r2, [pc, #40]	; (4290 <get_status+0x38>)
    4268:	2379      	movs	r3, #121	; 0x79
    426a:	f004 ff5c 	bl	9126 <assert_print>
    426e:	4808      	ldr	r0, [pc, #32]	; (4290 <get_status+0x38>)
    4270:	2179      	movs	r1, #121	; 0x79
    4272:	f004 ff51 	bl	9118 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4276:	692b      	ldr	r3, [r5, #16]
    4278:	220c      	movs	r2, #12
    427a:	fb04 3302 	mla	r3, r4, r2, r3
    427e:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    4280:	f000 0007 	and.w	r0, r0, #7
    4284:	bd38      	pop	{r3, r4, r5, pc}
    4286:	bf00      	nop
    4288:	0000b3aa 	.word	0x0000b3aa
    428c:	0000a092 	.word	0x0000a092
    4290:	0000b36d 	.word	0x0000b36d

00004294 <stop>:
{
    4294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4296:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4298:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    429a:	6906      	ldr	r6, [r0, #16]
{
    429c:	4605      	mov	r5, r0
    429e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    42a0:	d90b      	bls.n	42ba <stop+0x26>
    42a2:	4919      	ldr	r1, [pc, #100]	; (4308 <stop+0x74>)
    42a4:	4819      	ldr	r0, [pc, #100]	; (430c <stop+0x78>)
    42a6:	4a1a      	ldr	r2, [pc, #104]	; (4310 <stop+0x7c>)
    42a8:	f240 134d 	movw	r3, #333	; 0x14d
    42ac:	f004 ff3b 	bl	9126 <assert_print>
    42b0:	4817      	ldr	r0, [pc, #92]	; (4310 <stop+0x7c>)
    42b2:	f240 114d 	movw	r1, #333	; 0x14d
    42b6:	f004 ff2f 	bl	9118 <assert_post_action>
	__asm__ volatile(
    42ba:	f04f 0340 	mov.w	r3, #64	; 0x40
    42be:	f3ef 8211 	mrs	r2, BASEPRI
    42c2:	f383 8812 	msr	BASEPRI_MAX, r3
    42c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    42ca:	210c      	movs	r1, #12
    42cc:	fb01 6304 	mla	r3, r1, r4, r6
    42d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    42d2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    42d6:	d008      	beq.n	42ea <stop+0x56>
    42d8:	429f      	cmp	r7, r3
    42da:	d006      	beq.n	42ea <stop+0x56>
	__asm__ volatile(
    42dc:	f382 8811 	msr	BASEPRI, r2
    42e0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    42e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    42e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    42ea:	434c      	muls	r4, r1
    42ec:	4426      	add	r6, r4
    42ee:	2301      	movs	r3, #1
    42f0:	64b3      	str	r3, [r6, #72]	; 0x48
    42f2:	f382 8811 	msr	BASEPRI, r2
    42f6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    42fa:	686b      	ldr	r3, [r5, #4]
    42fc:	4423      	add	r3, r4
    42fe:	685b      	ldr	r3, [r3, #4]
    4300:	4798      	blx	r3
	return 0;
    4302:	2000      	movs	r0, #0
    4304:	e7f0      	b.n	42e8 <stop+0x54>
    4306:	bf00      	nop
    4308:	0000b3aa 	.word	0x0000b3aa
    430c:	0000a092 	.word	0x0000a092
    4310:	0000b36d 	.word	0x0000b36d

00004314 <onoff_stop>:
{
    4314:	b570      	push	{r4, r5, r6, lr}
    4316:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4318:	4906      	ldr	r1, [pc, #24]	; (4334 <onoff_stop+0x20>)
    431a:	1a41      	subs	r1, r0, r1
{
    431c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    431e:	1149      	asrs	r1, r1, #5
    4320:	4805      	ldr	r0, [pc, #20]	; (4338 <onoff_stop+0x24>)
    4322:	2240      	movs	r2, #64	; 0x40
    4324:	f7ff ffb6 	bl	4294 <stop>
	notify(mgr, res);
    4328:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    432a:	4601      	mov	r1, r0
	notify(mgr, res);
    432c:	4620      	mov	r0, r4
}
    432e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4332:	4718      	bx	r3
    4334:	20000b40 	.word	0x20000b40
    4338:	00009a9c 	.word	0x00009a9c

0000433c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    433c:	2200      	movs	r2, #0
{
    433e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4340:	2101      	movs	r1, #1
{
    4342:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4344:	4610      	mov	r0, r2
    4346:	f7fe fef3 	bl	3130 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    434a:	480f      	ldr	r0, [pc, #60]	; (4388 <clk_init+0x4c>)
    434c:	f001 f9a0 	bl	5690 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4350:	4b0e      	ldr	r3, [pc, #56]	; (438c <clk_init+0x50>)
    4352:	4298      	cmp	r0, r3
    4354:	d115      	bne.n	4382 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4356:	f001 f9c1 	bl	56dc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    435a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    435c:	490c      	ldr	r1, [pc, #48]	; (4390 <clk_init+0x54>)
    435e:	4630      	mov	r0, r6
    4360:	f004 fe34 	bl	8fcc <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4364:	2800      	cmp	r0, #0
    4366:	db0b      	blt.n	4380 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4368:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    436a:	4909      	ldr	r1, [pc, #36]	; (4390 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    436c:	2501      	movs	r5, #1
    436e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4370:	f104 0020 	add.w	r0, r4, #32
    4374:	f004 fe2a 	bl	8fcc <onoff_manager_init>
		if (err < 0) {
    4378:	2800      	cmp	r0, #0
    437a:	db01      	blt.n	4380 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    437c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    437e:	2000      	movs	r0, #0
}
    4380:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4382:	f06f 0004 	mvn.w	r0, #4
    4386:	e7fb      	b.n	4380 <clk_init+0x44>
    4388:	000043c9 	.word	0x000043c9
    438c:	0bad0000 	.word	0x0bad0000
    4390:	00009e78 	.word	0x00009e78

00004394 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4394:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4396:	230c      	movs	r3, #12
    4398:	4809      	ldr	r0, [pc, #36]	; (43c0 <clkstarted_handle.constprop.0+0x2c>)
    439a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    439c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    439e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    43a0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    43a4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    43a6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    43a8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    43aa:	4418      	add	r0, r3
    43ac:	f004 ffec 	bl	9388 <set_on_state>
	if (callback) {
    43b0:	b12d      	cbz	r5, 43be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    43b2:	4632      	mov	r2, r6
    43b4:	462b      	mov	r3, r5
    43b6:	4803      	ldr	r0, [pc, #12]	; (43c4 <clkstarted_handle.constprop.0+0x30>)
}
    43b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    43bc:	4718      	bx	r3
}
    43be:	bd70      	pop	{r4, r5, r6, pc}
    43c0:	20000b40 	.word	0x20000b40
    43c4:	00009a9c 	.word	0x00009a9c

000043c8 <clock_event_handler>:
	switch (event) {
    43c8:	2801      	cmp	r0, #1
{
    43ca:	b508      	push	{r3, lr}
	switch (event) {
    43cc:	d006      	beq.n	43dc <clock_event_handler+0x14>
    43ce:	2803      	cmp	r0, #3
    43d0:	d008      	beq.n	43e4 <clock_event_handler+0x1c>
    43d2:	b9a8      	cbnz	r0, 4400 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    43d4:	4b10      	ldr	r3, [pc, #64]	; (4418 <clock_event_handler+0x50>)
    43d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43d8:	075b      	lsls	r3, r3, #29
    43da:	d11b      	bne.n	4414 <clock_event_handler+0x4c>
}
    43dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    43e0:	f7ff bfd8 	b.w	4394 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    43e4:	490d      	ldr	r1, [pc, #52]	; (441c <clock_event_handler+0x54>)
    43e6:	4a0e      	ldr	r2, [pc, #56]	; (4420 <clock_event_handler+0x58>)
    43e8:	480e      	ldr	r0, [pc, #56]	; (4424 <clock_event_handler+0x5c>)
    43ea:	f240 235e 	movw	r3, #606	; 0x25e
    43ee:	f004 fe9a 	bl	9126 <assert_print>
    43f2:	f240 215e 	movw	r1, #606	; 0x25e
}
    43f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    43fa:	4809      	ldr	r0, [pc, #36]	; (4420 <clock_event_handler+0x58>)
    43fc:	f004 be8c 	b.w	9118 <assert_post_action>
    4400:	4906      	ldr	r1, [pc, #24]	; (441c <clock_event_handler+0x54>)
    4402:	4a07      	ldr	r2, [pc, #28]	; (4420 <clock_event_handler+0x58>)
    4404:	4807      	ldr	r0, [pc, #28]	; (4424 <clock_event_handler+0x5c>)
    4406:	f240 2362 	movw	r3, #610	; 0x262
    440a:	f004 fe8c 	bl	9126 <assert_print>
    440e:	f240 2162 	movw	r1, #610	; 0x262
    4412:	e7f0      	b.n	43f6 <clock_event_handler+0x2e>
}
    4414:	bd08      	pop	{r3, pc}
    4416:	bf00      	nop
    4418:	20000b40 	.word	0x20000b40
    441c:	0000a1ea 	.word	0x0000a1ea
    4420:	0000b36d 	.word	0x0000b36d
    4424:	0000a092 	.word	0x0000a092

00004428 <generic_hfclk_start>:
{
    4428:	b508      	push	{r3, lr}
	__asm__ volatile(
    442a:	f04f 0340 	mov.w	r3, #64	; 0x40
    442e:	f3ef 8111 	mrs	r1, BASEPRI
    4432:	f383 8812 	msr	BASEPRI_MAX, r3
    4436:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    443a:	4a12      	ldr	r2, [pc, #72]	; (4484 <generic_hfclk_start+0x5c>)
    443c:	6813      	ldr	r3, [r2, #0]
    443e:	f043 0002 	orr.w	r0, r3, #2
    4442:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4444:	07da      	lsls	r2, r3, #31
    4446:	d408      	bmi.n	445a <generic_hfclk_start+0x32>
	__asm__ volatile(
    4448:	f381 8811 	msr	BASEPRI, r1
    444c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4450:	2001      	movs	r0, #1
}
    4452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4456:	f001 b965 	b.w	5724 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    445a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    445e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4462:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4466:	07d3      	lsls	r3, r2, #31
    4468:	d5ee      	bpl.n	4448 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    446a:	4807      	ldr	r0, [pc, #28]	; (4488 <generic_hfclk_start+0x60>)
    446c:	f004 ff8c 	bl	9388 <set_on_state>
    4470:	f381 8811 	msr	BASEPRI, r1
    4474:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4478:	2000      	movs	r0, #0
}
    447a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    447e:	f7ff bf89 	b.w	4394 <clkstarted_handle.constprop.0>
    4482:	bf00      	nop
    4484:	20000b98 	.word	0x20000b98
    4488:	20000b88 	.word	0x20000b88

0000448c <api_blocking_start>:
{
    448c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    448e:	2200      	movs	r2, #0
    4490:	2301      	movs	r3, #1
    4492:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4496:	4a09      	ldr	r2, [pc, #36]	; (44bc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4498:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    449c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    449e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    44a2:	f004 ffb2 	bl	940a <api_start>
	if (err < 0) {
    44a6:	2800      	cmp	r0, #0
    44a8:	db05      	blt.n	44b6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    44aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    44ae:	2300      	movs	r3, #0
    44b0:	4668      	mov	r0, sp
    44b2:	f002 fc99 	bl	6de8 <z_impl_k_sem_take>
}
    44b6:	b005      	add	sp, #20
    44b8:	f85d fb04 	ldr.w	pc, [sp], #4
    44bc:	00009437 	.word	0x00009437

000044c0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    44c0:	4b09      	ldr	r3, [pc, #36]	; (44e8 <generic_hfclk_stop+0x28>)
    44c2:	f3bf 8f5b 	dmb	ish
    44c6:	e853 2f00 	ldrex	r2, [r3]
    44ca:	f022 0102 	bic.w	r1, r2, #2
    44ce:	e843 1000 	strex	r0, r1, [r3]
    44d2:	2800      	cmp	r0, #0
    44d4:	d1f7      	bne.n	44c6 <generic_hfclk_stop+0x6>
    44d6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    44da:	07d3      	lsls	r3, r2, #31
    44dc:	d402      	bmi.n	44e4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    44de:	2001      	movs	r0, #1
    44e0:	f001 b984 	b.w	57ec <nrfx_clock_stop>
}
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop
    44e8:	20000b98 	.word	0x20000b98

000044ec <z_nrf_clock_control_lf_on>:
{
    44ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    44f0:	4947      	ldr	r1, [pc, #284]	; (4610 <z_nrf_clock_control_lf_on+0x124>)
    44f2:	f3bf 8f5b 	dmb	ish
    44f6:	4606      	mov	r6, r0
    44f8:	2201      	movs	r2, #1
    44fa:	e851 3f00 	ldrex	r3, [r1]
    44fe:	e841 2000 	strex	r0, r2, [r1]
    4502:	2800      	cmp	r0, #0
    4504:	d1f9      	bne.n	44fa <z_nrf_clock_control_lf_on+0xe>
    4506:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    450a:	b9a3      	cbnz	r3, 4536 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    450c:	4941      	ldr	r1, [pc, #260]	; (4614 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    450e:	4842      	ldr	r0, [pc, #264]	; (4618 <z_nrf_clock_control_lf_on+0x12c>)
    4510:	604b      	str	r3, [r1, #4]
    4512:	60cb      	str	r3, [r1, #12]
    4514:	608a      	str	r2, [r1, #8]
    4516:	f7fd fa37 	bl	1988 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    451a:	2800      	cmp	r0, #0
    451c:	da0b      	bge.n	4536 <z_nrf_clock_control_lf_on+0x4a>
    451e:	493f      	ldr	r1, [pc, #252]	; (461c <z_nrf_clock_control_lf_on+0x130>)
    4520:	483f      	ldr	r0, [pc, #252]	; (4620 <z_nrf_clock_control_lf_on+0x134>)
    4522:	4a40      	ldr	r2, [pc, #256]	; (4624 <z_nrf_clock_control_lf_on+0x138>)
    4524:	f44f 7308 	mov.w	r3, #544	; 0x220
    4528:	f004 fdfd 	bl	9126 <assert_print>
    452c:	483d      	ldr	r0, [pc, #244]	; (4624 <z_nrf_clock_control_lf_on+0x138>)
    452e:	f44f 7108 	mov.w	r1, #544	; 0x220
    4532:	f004 fdf1 	bl	9118 <assert_post_action>
	switch (start_mode) {
    4536:	b376      	cbz	r6, 4596 <z_nrf_clock_control_lf_on+0xaa>
    4538:	1e73      	subs	r3, r6, #1
    453a:	2b01      	cmp	r3, #1
    453c:	d859      	bhi.n	45f2 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    453e:	2e01      	cmp	r6, #1
    4540:	d107      	bne.n	4552 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4546:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    454a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    454e:	2b01      	cmp	r3, #1
    4550:	d021      	beq.n	4596 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4552:	f005 f9e6 	bl	9922 <k_is_in_isr>
    4556:	4605      	mov	r5, r0
    4558:	b9f8      	cbnz	r0, 459a <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    455a:	4b33      	ldr	r3, [pc, #204]	; (4628 <z_nrf_clock_control_lf_on+0x13c>)
    455c:	781b      	ldrb	r3, [r3, #0]
    455e:	b1e3      	cbz	r3, 459a <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4564:	2202      	movs	r2, #2
    4566:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    456a:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    456c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 462c <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4570:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4574:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4578:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    457c:	03d2      	lsls	r2, r2, #15
    457e:	d516      	bpl.n	45ae <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4580:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4584:	2b01      	cmp	r3, #1
    4586:	d001      	beq.n	458c <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4588:	2e01      	cmp	r6, #1
    458a:	d110      	bne.n	45ae <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    458c:	b35d      	cbz	r5, 45e6 <z_nrf_clock_control_lf_on+0xfa>
    458e:	f387 8811 	msr	BASEPRI, r7
    4592:	f3bf 8f6f 	isb	sy
}
    4596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    459a:	f04f 0340 	mov.w	r3, #64	; 0x40
    459e:	f3ef 8711 	mrs	r7, BASEPRI
    45a2:	f383 8812 	msr	BASEPRI_MAX, r3
    45a6:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    45aa:	2501      	movs	r5, #1
    45ac:	e7de      	b.n	456c <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    45ae:	b1ad      	cbz	r5, 45dc <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    45b0:	4638      	mov	r0, r7
    45b2:	f7fe fd47 	bl	3044 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    45b6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    45ba:	2b00      	cmp	r3, #0
    45bc:	d1da      	bne.n	4574 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45be:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    45c2:	2a00      	cmp	r2, #0
    45c4:	d0d6      	beq.n	4574 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45c6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    45ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    45ce:	2301      	movs	r3, #1
    45d0:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    45d4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45d8:	60a3      	str	r3, [r4, #8]
}
    45da:	e7cb      	b.n	4574 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    45dc:	2100      	movs	r1, #0
    45de:	2021      	movs	r0, #33	; 0x21
    45e0:	f003 fce4 	bl	7fac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    45e4:	e7e7      	b.n	45b6 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    45e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45ea:	2202      	movs	r2, #2
    45ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    45f0:	e7d1      	b.n	4596 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    45f2:	490f      	ldr	r1, [pc, #60]	; (4630 <z_nrf_clock_control_lf_on+0x144>)
    45f4:	480a      	ldr	r0, [pc, #40]	; (4620 <z_nrf_clock_control_lf_on+0x134>)
    45f6:	4a0b      	ldr	r2, [pc, #44]	; (4624 <z_nrf_clock_control_lf_on+0x138>)
    45f8:	f240 2332 	movw	r3, #562	; 0x232
    45fc:	f004 fd93 	bl	9126 <assert_print>
}
    4600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4604:	4807      	ldr	r0, [pc, #28]	; (4624 <z_nrf_clock_control_lf_on+0x138>)
    4606:	f240 2132 	movw	r1, #562	; 0x232
    460a:	f004 bd85 	b.w	9118 <assert_post_action>
    460e:	bf00      	nop
    4610:	20000b3c 	.word	0x20000b3c
    4614:	20000b2c 	.word	0x20000b2c
    4618:	20000b60 	.word	0x20000b60
    461c:	0000a999 	.word	0x0000a999
    4620:	0000a092 	.word	0x0000a092
    4624:	0000b36d 	.word	0x0000b36d
    4628:	200012c7 	.word	0x200012c7
    462c:	e000e100 	.word	0xe000e100
    4630:	0000a1ea 	.word	0x0000a1ea

00004634 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4634:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4636:	4b08      	ldr	r3, [pc, #32]	; (4658 <uart_console_init+0x24>)
    4638:	4808      	ldr	r0, [pc, #32]	; (465c <uart_console_init+0x28>)
    463a:	6018      	str	r0, [r3, #0]
    463c:	f005 f937 	bl	98ae <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4640:	b138      	cbz	r0, 4652 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4642:	4807      	ldr	r0, [pc, #28]	; (4660 <uart_console_init+0x2c>)
    4644:	f7ff fb7c 	bl	3d40 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4648:	4805      	ldr	r0, [pc, #20]	; (4660 <uart_console_init+0x2c>)
    464a:	f7fc ff49 	bl	14e0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    464e:	2000      	movs	r0, #0
}
    4650:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4652:	f06f 0012 	mvn.w	r0, #18
    4656:	e7fb      	b.n	4650 <uart_console_init+0x1c>
    4658:	20000b9c 	.word	0x20000b9c
    465c:	00009afc 	.word	0x00009afc
    4660:	00004665 	.word	0x00004665

00004664 <console_out>:
	if ('\n' == c) {
    4664:	280a      	cmp	r0, #10
{
    4666:	b538      	push	{r3, r4, r5, lr}
    4668:	4d07      	ldr	r5, [pc, #28]	; (4688 <console_out+0x24>)
    466a:	4604      	mov	r4, r0
	if ('\n' == c) {
    466c:	d104      	bne.n	4678 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    466e:	6828      	ldr	r0, [r5, #0]
    4670:	6883      	ldr	r3, [r0, #8]
    4672:	210d      	movs	r1, #13
    4674:	685b      	ldr	r3, [r3, #4]
    4676:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4678:	6828      	ldr	r0, [r5, #0]
    467a:	6883      	ldr	r3, [r0, #8]
    467c:	b2e1      	uxtb	r1, r4
    467e:	685b      	ldr	r3, [r3, #4]
    4680:	4798      	blx	r3
}
    4682:	4620      	mov	r0, r4
    4684:	bd38      	pop	{r3, r4, r5, pc}
    4686:	bf00      	nop
    4688:	20000b9c 	.word	0x20000b9c

0000468c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    468c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    468e:	6905      	ldr	r5, [r0, #16]
{
    4690:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4692:	460c      	mov	r4, r1
    4694:	b961      	cbnz	r1, 46b0 <gpio_nrfx_manage_callback+0x24>
    4696:	4922      	ldr	r1, [pc, #136]	; (4720 <gpio_nrfx_manage_callback+0x94>)
    4698:	4a22      	ldr	r2, [pc, #136]	; (4724 <gpio_nrfx_manage_callback+0x98>)
    469a:	4823      	ldr	r0, [pc, #140]	; (4728 <gpio_nrfx_manage_callback+0x9c>)
    469c:	2324      	movs	r3, #36	; 0x24
    469e:	f004 fd42 	bl	9126 <assert_print>
    46a2:	4822      	ldr	r0, [pc, #136]	; (472c <gpio_nrfx_manage_callback+0xa0>)
    46a4:	f004 fd3f 	bl	9126 <assert_print>
    46a8:	481e      	ldr	r0, [pc, #120]	; (4724 <gpio_nrfx_manage_callback+0x98>)
    46aa:	2124      	movs	r1, #36	; 0x24
    46ac:	f004 fd34 	bl	9118 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    46b0:	6863      	ldr	r3, [r4, #4]
    46b2:	b963      	cbnz	r3, 46ce <gpio_nrfx_manage_callback+0x42>
    46b4:	491e      	ldr	r1, [pc, #120]	; (4730 <gpio_nrfx_manage_callback+0xa4>)
    46b6:	4a1b      	ldr	r2, [pc, #108]	; (4724 <gpio_nrfx_manage_callback+0x98>)
    46b8:	481b      	ldr	r0, [pc, #108]	; (4728 <gpio_nrfx_manage_callback+0x9c>)
    46ba:	2325      	movs	r3, #37	; 0x25
    46bc:	f004 fd33 	bl	9126 <assert_print>
    46c0:	481c      	ldr	r0, [pc, #112]	; (4734 <gpio_nrfx_manage_callback+0xa8>)
    46c2:	f004 fd30 	bl	9126 <assert_print>
    46c6:	4817      	ldr	r0, [pc, #92]	; (4724 <gpio_nrfx_manage_callback+0x98>)
    46c8:	2125      	movs	r1, #37	; 0x25
    46ca:	f004 fd25 	bl	9118 <assert_post_action>
	return list->head;
    46ce:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    46d0:	b14b      	cbz	r3, 46e6 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46d2:	42a3      	cmp	r3, r4
    46d4:	d113      	bne.n	46fe <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    46d6:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    46d8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    46da:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    46dc:	4294      	cmp	r4, r2
    46de:	d100      	bne.n	46e2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    46e0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    46e2:	2300      	movs	r3, #0
    46e4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    46e6:	b97e      	cbnz	r6, 4708 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    46e8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    46ea:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46ec:	429c      	cmp	r4, r3
    46ee:	d106      	bne.n	46fe <gpio_nrfx_manage_callback+0x72>
	return node->next;
    46f0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    46f2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    46f4:	68ab      	ldr	r3, [r5, #8]
    46f6:	429c      	cmp	r4, r3
    46f8:	d1f3      	bne.n	46e2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    46fa:	60aa      	str	r2, [r5, #8]
}
    46fc:	e7f1      	b.n	46e2 <gpio_nrfx_manage_callback+0x56>
	return node->next;
    46fe:	461a      	mov	r2, r3
    4700:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4702:	2b00      	cmp	r3, #0
    4704:	d1f2      	bne.n	46ec <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    4706:	b13e      	cbz	r6, 4718 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    4708:	686b      	ldr	r3, [r5, #4]
    470a:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    470c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    470e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4710:	2b00      	cmp	r3, #0
    4712:	d1e9      	bne.n	46e8 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    4714:	60ac      	str	r4, [r5, #8]
}
    4716:	e7e7      	b.n	46e8 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    4718:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    471c:	e7e5      	b.n	46ea <gpio_nrfx_manage_callback+0x5e>
    471e:	bf00      	nop
    4720:	0000b41b 	.word	0x0000b41b
    4724:	0000b3ee 	.word	0x0000b3ee
    4728:	0000a092 	.word	0x0000a092
    472c:	0000b424 	.word	0x0000b424
    4730:	0000b433 	.word	0x0000b433
    4734:	0000b445 	.word	0x0000b445

00004738 <gpio_nrfx_pin_interrupt_configure>:
{
    4738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    473a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    473c:	7b05      	ldrb	r5, [r0, #12]
    473e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4742:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4746:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    474a:	d104      	bne.n	4756 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    474c:	4620      	mov	r0, r4
    474e:	f001 fb69 	bl	5e24 <nrfx_gpiote_trigger_disable>
		return 0;
    4752:	2000      	movs	r0, #0
    4754:	e05d      	b.n	4812 <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4756:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4758:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    475c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4760:	d114      	bne.n	478c <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4766:	bf0c      	ite	eq
    4768:	2304      	moveq	r3, #4
    476a:	2305      	movne	r3, #5
    476c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4770:	2300      	movs	r3, #0
    4772:	4619      	mov	r1, r3
    4774:	aa02      	add	r2, sp, #8
    4776:	4620      	mov	r0, r4
    4778:	f001 f95a 	bl	5a30 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    477c:	4b34      	ldr	r3, [pc, #208]	; (4850 <gpio_nrfx_pin_interrupt_configure+0x118>)
    477e:	4298      	cmp	r0, r3
    4780:	d162      	bne.n	4848 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4782:	2101      	movs	r1, #1
    4784:	4620      	mov	r0, r4
    4786:	f001 fadd 	bl	5d44 <nrfx_gpiote_trigger_enable>
	return 0;
    478a:	e7e2      	b.n	4752 <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    478c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4790:	d041      	beq.n	4816 <gpio_nrfx_pin_interrupt_configure+0xde>
    4792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4796:	bf14      	ite	ne
    4798:	2301      	movne	r3, #1
    479a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    479c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    47a0:	6883      	ldr	r3, [r0, #8]
    47a2:	40cb      	lsrs	r3, r1
    47a4:	07d8      	lsls	r0, r3, #31
    47a6:	d4e3      	bmi.n	4770 <gpio_nrfx_pin_interrupt_configure+0x38>
    47a8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    47ac:	d1e0      	bne.n	4770 <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    47ae:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    47b0:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    47b4:	d031      	beq.n	481a <gpio_nrfx_pin_interrupt_configure+0xe2>
    47b6:	2e01      	cmp	r6, #1
    47b8:	d104      	bne.n	47c4 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    47ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    47be:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    47c0:	07d9      	lsls	r1, r3, #31
    47c2:	d40e      	bmi.n	47e2 <gpio_nrfx_pin_interrupt_configure+0xaa>
    47c4:	4923      	ldr	r1, [pc, #140]	; (4854 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    47c6:	4824      	ldr	r0, [pc, #144]	; (4858 <gpio_nrfx_pin_interrupt_configure+0x120>)
    47c8:	4a24      	ldr	r2, [pc, #144]	; (485c <gpio_nrfx_pin_interrupt_configure+0x124>)
    47ca:	f240 2329 	movw	r3, #553	; 0x229
    47ce:	f004 fcaa 	bl	9126 <assert_print>
    47d2:	4822      	ldr	r0, [pc, #136]	; (485c <gpio_nrfx_pin_interrupt_configure+0x124>)
    47d4:	f240 2129 	movw	r1, #553	; 0x229
    47d8:	f004 fc9e 	bl	9118 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47dc:	b316      	cbz	r6, 4824 <gpio_nrfx_pin_interrupt_configure+0xec>
    47de:	2e01      	cmp	r6, #1
    47e0:	d123      	bne.n	482a <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    47e2:	4b1f      	ldr	r3, [pc, #124]	; (4860 <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    47e4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    47e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    47ec:	07db      	lsls	r3, r3, #31
    47ee:	d4bf      	bmi.n	4770 <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    47f0:	f10d 0507 	add.w	r5, sp, #7
    47f4:	4629      	mov	r1, r5
    47f6:	4620      	mov	r0, r4
    47f8:	f001 fa3c 	bl	5c74 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    47fc:	4b19      	ldr	r3, [pc, #100]	; (4864 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    47fe:	4298      	cmp	r0, r3
    4800:	d120      	bne.n	4844 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    4802:	4628      	mov	r0, r5
    4804:	f001 fa98 	bl	5d38 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4808:	4b11      	ldr	r3, [pc, #68]	; (4850 <gpio_nrfx_pin_interrupt_configure+0x118>)
    480a:	4298      	cmp	r0, r3
    480c:	d01a      	beq.n	4844 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    480e:	f06f 000b 	mvn.w	r0, #11
}
    4812:	b004      	add	sp, #16
    4814:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4816:	2303      	movs	r3, #3
    4818:	e7c0      	b.n	479c <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    481a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    481e:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4820:	07da      	lsls	r2, r3, #31
    4822:	d5cf      	bpl.n	47c4 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    4824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4828:	e7dc      	b.n	47e4 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    482a:	4a0c      	ldr	r2, [pc, #48]	; (485c <gpio_nrfx_pin_interrupt_configure+0x124>)
    482c:	490e      	ldr	r1, [pc, #56]	; (4868 <gpio_nrfx_pin_interrupt_configure+0x130>)
    482e:	480a      	ldr	r0, [pc, #40]	; (4858 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4830:	f240 232e 	movw	r3, #558	; 0x22e
    4834:	f004 fc77 	bl	9126 <assert_print>
    4838:	4808      	ldr	r0, [pc, #32]	; (485c <gpio_nrfx_pin_interrupt_configure+0x124>)
    483a:	f240 212e 	movw	r1, #558	; 0x22e
    483e:	f004 fc6b 	bl	9118 <assert_post_action>
    4842:	e7ef      	b.n	4824 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    4844:	9503      	str	r5, [sp, #12]
    4846:	e793      	b.n	4770 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    4848:	f06f 0004 	mvn.w	r0, #4
    484c:	e7e1      	b.n	4812 <gpio_nrfx_pin_interrupt_configure+0xda>
    484e:	bf00      	nop
    4850:	0bad0000 	.word	0x0bad0000
    4854:	0000b48f 	.word	0x0000b48f
    4858:	0000a092 	.word	0x0000a092
    485c:	0000b45c 	.word	0x0000b45c
    4860:	50000300 	.word	0x50000300
    4864:	0bad0004 	.word	0x0bad0004
    4868:	0000a1ea 	.word	0x0000a1ea

0000486c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    486c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    486e:	f001 fa53 	bl	5d18 <nrfx_gpiote_is_init>
    4872:	4604      	mov	r4, r0
    4874:	b968      	cbnz	r0, 4892 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4876:	f001 fa27 	bl	5cc8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    487a:	4b08      	ldr	r3, [pc, #32]	; (489c <gpio_nrfx_init+0x30>)
    487c:	4298      	cmp	r0, r3
    487e:	d10a      	bne.n	4896 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4880:	4807      	ldr	r0, [pc, #28]	; (48a0 <gpio_nrfx_init+0x34>)
    4882:	4621      	mov	r1, r4
    4884:	f001 f9f0 	bl	5c68 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4888:	4622      	mov	r2, r4
    488a:	2105      	movs	r1, #5
    488c:	2006      	movs	r0, #6
    488e:	f7fe fc4f 	bl	3130 <z_arm_irq_priority_set>
		return 0;
    4892:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4894:	bd10      	pop	{r4, pc}
		return -EIO;
    4896:	f06f 0004 	mvn.w	r0, #4
    489a:	e7fb      	b.n	4894 <gpio_nrfx_init+0x28>
    489c:	0bad0000 	.word	0x0bad0000
    48a0:	000048a5 	.word	0x000048a5

000048a4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48a4:	0943      	lsrs	r3, r0, #5
{
    48a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48aa:	d003      	beq.n	48b4 <nrfx_gpio_handler+0x10>
    48ac:	2b01      	cmp	r3, #1
    48ae:	d030      	beq.n	4912 <nrfx_gpio_handler+0x6e>
}
    48b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48b4:	4f19      	ldr	r7, [pc, #100]	; (491c <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    48b6:	693b      	ldr	r3, [r7, #16]
    48b8:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    48ba:	2c00      	cmp	r4, #0
    48bc:	d0f8      	beq.n	48b0 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    48be:	f000 001f 	and.w	r0, r0, #31
    48c2:	2601      	movs	r6, #1
	return node->next;
    48c4:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    48c6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4920 <nrfx_gpio_handler+0x7c>
    48ca:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4924 <nrfx_gpio_handler+0x80>
    48ce:	f8df a058 	ldr.w	sl, [pc, #88]	; 4928 <nrfx_gpio_handler+0x84>
    48d2:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    48d4:	2c00      	cmp	r4, #0
    48d6:	d0eb      	beq.n	48b0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    48d8:	68a3      	ldr	r3, [r4, #8]
    48da:	421e      	tst	r6, r3
    48dc:	d014      	beq.n	4908 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    48de:	6863      	ldr	r3, [r4, #4]
    48e0:	b963      	cbnz	r3, 48fc <nrfx_gpio_handler+0x58>
    48e2:	4649      	mov	r1, r9
    48e4:	2345      	movs	r3, #69	; 0x45
    48e6:	4642      	mov	r2, r8
    48e8:	4650      	mov	r0, sl
    48ea:	f004 fc1c 	bl	9126 <assert_print>
    48ee:	480f      	ldr	r0, [pc, #60]	; (492c <nrfx_gpio_handler+0x88>)
    48f0:	f004 fc19 	bl	9126 <assert_print>
    48f4:	2145      	movs	r1, #69	; 0x45
    48f6:	4640      	mov	r0, r8
    48f8:	f004 fc0e 	bl	9118 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    48fc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4900:	4621      	mov	r1, r4
    4902:	4032      	ands	r2, r6
    4904:	4638      	mov	r0, r7
    4906:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4908:	b12d      	cbz	r5, 4916 <nrfx_gpio_handler+0x72>
    490a:	682b      	ldr	r3, [r5, #0]
    490c:	462c      	mov	r4, r5
    490e:	461d      	mov	r5, r3
    4910:	e7e0      	b.n	48d4 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4912:	4f07      	ldr	r7, [pc, #28]	; (4930 <nrfx_gpio_handler+0x8c>)
    4914:	e7cf      	b.n	48b6 <nrfx_gpio_handler+0x12>
    4916:	462b      	mov	r3, r5
    4918:	e7f8      	b.n	490c <nrfx_gpio_handler+0x68>
    491a:	bf00      	nop
    491c:	00009acc 	.word	0x00009acc
    4920:	0000b3ee 	.word	0x0000b3ee
    4924:	0000b4b2 	.word	0x0000b4b2
    4928:	0000a092 	.word	0x0000a092
    492c:	0000b445 	.word	0x0000b445
    4930:	00009ab4 	.word	0x00009ab4

00004934 <gpio_nrfx_pin_configure>:
{
    4934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4938:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    493a:	7b3b      	ldrb	r3, [r7, #12]
    493c:	f001 051f 	and.w	r5, r1, #31
{
    4940:	b085      	sub	sp, #20
    4942:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4944:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4948:	4614      	mov	r4, r2
    494a:	b9d2      	cbnz	r2, 4982 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    494c:	a902      	add	r1, sp, #8
    494e:	4628      	mov	r0, r5
    4950:	f001 f990 	bl	5c74 <nrfx_gpiote_channel_get>
    4954:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4956:	4628      	mov	r0, r5
    4958:	f001 fa8e 	bl	5e78 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    495c:	4b46      	ldr	r3, [pc, #280]	; (4a78 <gpio_nrfx_pin_configure+0x144>)
    495e:	4298      	cmp	r0, r3
    4960:	d004      	beq.n	496c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4962:	f06f 0004 	mvn.w	r0, #4
}
    4966:	b005      	add	sp, #20
    4968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    496c:	4284      	cmp	r4, r0
    496e:	d001      	beq.n	4974 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4970:	2000      	movs	r0, #0
    4972:	e7f8      	b.n	4966 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    4974:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4978:	f001 f9d8 	bl	5d2c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    497c:	42a0      	cmp	r0, r4
    497e:	d0f7      	beq.n	4970 <gpio_nrfx_pin_configure+0x3c>
    4980:	e7ef      	b.n	4962 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4982:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4986:	f10d 0103 	add.w	r1, sp, #3
    498a:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    498c:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4990:	f001 f970 	bl	5c74 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4994:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4996:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4998:	aa02      	add	r2, sp, #8
    499a:	4649      	mov	r1, r9
    499c:	4628      	mov	r0, r5
    499e:	f001 f847 	bl	5a30 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    49a2:	4b35      	ldr	r3, [pc, #212]	; (4a78 <gpio_nrfx_pin_configure+0x144>)
    49a4:	4298      	cmp	r0, r3
    49a6:	d002      	beq.n	49ae <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    49a8:	f06f 0015 	mvn.w	r0, #21
    49ac:	e7db      	b.n	4966 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    49ae:	4580      	cmp	r8, r0
    49b0:	d103      	bne.n	49ba <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    49b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    49b6:	f001 f9b9 	bl	5d2c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    49ba:	03a3      	lsls	r3, r4, #14
    49bc:	d54c      	bpl.n	4a58 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    49be:	f240 6306 	movw	r3, #1542	; 0x606
    49c2:	4023      	ands	r3, r4
    49c4:	f240 2206 	movw	r2, #518	; 0x206
    49c8:	4293      	cmp	r3, r2
    49ca:	d019      	beq.n	4a00 <gpio_nrfx_pin_configure+0xcc>
    49cc:	d80c      	bhi.n	49e8 <gpio_nrfx_pin_configure+0xb4>
    49ce:	2b06      	cmp	r3, #6
    49d0:	d017      	beq.n	4a02 <gpio_nrfx_pin_configure+0xce>
    49d2:	d804      	bhi.n	49de <gpio_nrfx_pin_configure+0xaa>
    49d4:	b1ab      	cbz	r3, 4a02 <gpio_nrfx_pin_configure+0xce>
    49d6:	2b02      	cmp	r3, #2
    49d8:	d1e6      	bne.n	49a8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    49da:	2304      	movs	r3, #4
    49dc:	e011      	b.n	4a02 <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    49de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    49e2:	d1e1      	bne.n	49a8 <gpio_nrfx_pin_configure+0x74>
    49e4:	2301      	movs	r3, #1
    49e6:	e00c      	b.n	4a02 <gpio_nrfx_pin_configure+0xce>
    49e8:	f240 4202 	movw	r2, #1026	; 0x402
    49ec:	4293      	cmp	r3, r2
    49ee:	d027      	beq.n	4a40 <gpio_nrfx_pin_configure+0x10c>
    49f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    49f4:	d026      	beq.n	4a44 <gpio_nrfx_pin_configure+0x110>
    49f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    49fa:	d1d5      	bne.n	49a8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    49fc:	2302      	movs	r3, #2
    49fe:	e000      	b.n	4a02 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    4a00:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4a02:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4a06:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4a0a:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4a0e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4a10:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4a14:	bf54      	ite	pl
    4a16:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4a1a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4a1c:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4a1e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4a22:	d511      	bpl.n	4a48 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4a24:	687a      	ldr	r2, [r7, #4]
    4a26:	2301      	movs	r3, #1
    4a28:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4a2a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4a2e:	2200      	movs	r2, #0
    4a30:	a901      	add	r1, sp, #4
    4a32:	4628      	mov	r0, r5
    4a34:	f001 f8a4 	bl	5b80 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4a38:	4b0f      	ldr	r3, [pc, #60]	; (4a78 <gpio_nrfx_pin_configure+0x144>)
    4a3a:	4298      	cmp	r0, r3
    4a3c:	d098      	beq.n	4970 <gpio_nrfx_pin_configure+0x3c>
    4a3e:	e7b3      	b.n	49a8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    4a40:	2305      	movs	r3, #5
    4a42:	e7de      	b.n	4a02 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    4a44:	2303      	movs	r3, #3
    4a46:	e7dc      	b.n	4a02 <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4a48:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4a4a:	bf41      	itttt	mi
    4a4c:	2301      	movmi	r3, #1
    4a4e:	687a      	ldrmi	r2, [r7, #4]
    4a50:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4a52:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4a56:	e7ea      	b.n	4a2e <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    4a58:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a5a:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4a5e:	bf54      	ite	pl
    4a60:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4a64:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a66:	461a      	mov	r2, r3
    4a68:	a901      	add	r1, sp, #4
    4a6a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4a6c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a70:	f000 ffde 	bl	5a30 <nrfx_gpiote_input_configure>
    4a74:	e7e0      	b.n	4a38 <gpio_nrfx_pin_configure+0x104>
    4a76:	bf00      	nop
    4a78:	0bad0000 	.word	0x0bad0000

00004a7c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4a7e:	ab0b      	add	r3, sp, #44	; 0x2c
    4a80:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    4a82:	9303      	str	r3, [sp, #12]
    4a84:	4b05      	ldr	r3, [pc, #20]	; (4a9c <z_log_msg2_runtime_create.constprop.0+0x20>)
    4a86:	9302      	str	r3, [sp, #8]
    4a88:	2300      	movs	r3, #0
    4a8a:	e9cd 3300 	strd	r3, r3, [sp]
    4a8e:	2201      	movs	r2, #1
    4a90:	4618      	mov	r0, r3
    4a92:	f7fd ff55 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    4a96:	b007      	add	sp, #28
    4a98:	f85d fb04 	ldr.w	pc, [sp], #4
    4a9c:	0000b4cc 	.word	0x0000b4cc

00004aa0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4aa2:	794b      	ldrb	r3, [r1, #5]
    4aa4:	2b01      	cmp	r3, #1
    4aa6:	d026      	beq.n	4af6 <uarte_nrfx_configure+0x56>
    4aa8:	2b03      	cmp	r3, #3
    4aaa:	d121      	bne.n	4af0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4aac:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4aae:	798b      	ldrb	r3, [r1, #6]
    4ab0:	2b03      	cmp	r3, #3
    4ab2:	d11d      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4ab4:	79cc      	ldrb	r4, [r1, #7]
    4ab6:	b10c      	cbz	r4, 4abc <uarte_nrfx_configure+0x1c>
    4ab8:	2c01      	cmp	r4, #1
    4aba:	d119      	bne.n	4af0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4abc:	790a      	ldrb	r2, [r1, #4]
    4abe:	b112      	cbz	r2, 4ac6 <uarte_nrfx_configure+0x26>
    4ac0:	2a02      	cmp	r2, #2
    4ac2:	d115      	bne.n	4af0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4ac4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4ac6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4ac8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4aca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4ace:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4ad0:	d065      	beq.n	4b9e <uarte_nrfx_configure+0xfe>
    4ad2:	d82d      	bhi.n	4b30 <uarte_nrfx_configure+0x90>
    4ad4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4ad8:	d064      	beq.n	4ba4 <uarte_nrfx_configure+0x104>
    4ada:	d816      	bhi.n	4b0a <uarte_nrfx_configure+0x6a>
    4adc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4ae0:	d062      	beq.n	4ba8 <uarte_nrfx_configure+0x108>
    4ae2:	d80a      	bhi.n	4afa <uarte_nrfx_configure+0x5a>
    4ae4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4ae8:	d061      	beq.n	4bae <uarte_nrfx_configure+0x10e>
    4aea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4aee:	d061      	beq.n	4bb4 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    4af0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4af4:	e052      	b.n	4b9c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    4af6:	2600      	movs	r6, #0
    4af8:	e7d9      	b.n	4aae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4afa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4afe:	d05c      	beq.n	4bba <uarte_nrfx_configure+0x11a>
    4b00:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4b04:	d1f4      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4b06:	4b37      	ldr	r3, [pc, #220]	; (4be4 <uarte_nrfx_configure+0x144>)
    4b08:	e03c      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b0a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4b0e:	d057      	beq.n	4bc0 <uarte_nrfx_configure+0x120>
    4b10:	d807      	bhi.n	4b22 <uarte_nrfx_configure+0x82>
    4b12:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4b16:	d055      	beq.n	4bc4 <uarte_nrfx_configure+0x124>
    4b18:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4b1c:	d1e8      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4b1e:	4b32      	ldr	r3, [pc, #200]	; (4be8 <uarte_nrfx_configure+0x148>)
    4b20:	e030      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b22:	f647 2712 	movw	r7, #31250	; 0x7a12
    4b26:	42bb      	cmp	r3, r7
    4b28:	d1e2      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4b2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4b2e:	e029      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b30:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4b34:	d048      	beq.n	4bc8 <uarte_nrfx_configure+0x128>
    4b36:	d813      	bhi.n	4b60 <uarte_nrfx_configure+0xc0>
    4b38:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4b3c:	d047      	beq.n	4bce <uarte_nrfx_configure+0x12e>
    4b3e:	d809      	bhi.n	4b54 <uarte_nrfx_configure+0xb4>
    4b40:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4b44:	42bb      	cmp	r3, r7
    4b46:	d044      	beq.n	4bd2 <uarte_nrfx_configure+0x132>
    4b48:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4b4c:	d1d0      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4b4e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4b52:	e017      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b54:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4b58:	d1ca      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4b5a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4b5e:	e011      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b60:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4b64:	d038      	beq.n	4bd8 <uarte_nrfx_configure+0x138>
    4b66:	d808      	bhi.n	4b7a <uarte_nrfx_configure+0xda>
    4b68:	4f20      	ldr	r7, [pc, #128]	; (4bec <uarte_nrfx_configure+0x14c>)
    4b6a:	42bb      	cmp	r3, r7
    4b6c:	d037      	beq.n	4bde <uarte_nrfx_configure+0x13e>
    4b6e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4b72:	d1bd      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4b74:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4b78:	e004      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b7a:	4f1d      	ldr	r7, [pc, #116]	; (4bf0 <uarte_nrfx_configure+0x150>)
    4b7c:	42bb      	cmp	r3, r7
    4b7e:	d1b7      	bne.n	4af0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4b80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    4b84:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4b86:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    4b8a:	1d03      	adds	r3, r0, #4
    4b8c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    4b8e:	4334      	orrs	r4, r6
    4b90:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4b92:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4b96:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4b9a:	2000      	movs	r0, #0
}
    4b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4b9e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4ba2:	e7ef      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4ba4:	4b13      	ldr	r3, [pc, #76]	; (4bf4 <uarte_nrfx_configure+0x154>)
    4ba6:	e7ed      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4ba8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4bac:	e7ea      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    4bae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4bb2:	e7e7      	b.n	4b84 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4bb4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4bb8:	e7e4      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4bba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4bbe:	e7e1      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4bc0:	4b0d      	ldr	r3, [pc, #52]	; (4bf8 <uarte_nrfx_configure+0x158>)
    4bc2:	e7df      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4bc4:	4b0d      	ldr	r3, [pc, #52]	; (4bfc <uarte_nrfx_configure+0x15c>)
    4bc6:	e7dd      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4bc8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4bcc:	e7da      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4bce:	4b0c      	ldr	r3, [pc, #48]	; (4c00 <uarte_nrfx_configure+0x160>)
    4bd0:	e7d8      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4bd2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4bd6:	e7d5      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4bd8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4bdc:	e7d2      	b.n	4b84 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4bde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4be2:	e7cf      	b.n	4b84 <uarte_nrfx_configure+0xe4>
    4be4:	0013b000 	.word	0x0013b000
    4be8:	004ea000 	.word	0x004ea000
    4bec:	0003d090 	.word	0x0003d090
    4bf0:	000f4240 	.word	0x000f4240
    4bf4:	00275000 	.word	0x00275000
    4bf8:	0075c000 	.word	0x0075c000
    4bfc:	003af000 	.word	0x003af000
    4c00:	013a9000 	.word	0x013a9000

00004c04 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4c08:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4c0c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4c0e:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    4c12:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    4c16:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4c18:	2100      	movs	r1, #0
    4c1a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    4c1e:	4607      	mov	r7, r0
	data->dev = dev;
    4c20:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4c22:	aa05      	add	r2, sp, #20
    4c24:	4648      	mov	r0, r9
    4c26:	f004 fcbe 	bl	95a6 <pinctrl_lookup_state>
	if (ret < 0) {
    4c2a:	1e04      	subs	r4, r0, #0
    4c2c:	db25      	blt.n	4c7a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4c2e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4c30:	f8d9 2000 	ldr.w	r2, [r9]
    4c34:	7919      	ldrb	r1, [r3, #4]
    4c36:	6818      	ldr	r0, [r3, #0]
    4c38:	f004 fd0c 	bl	9654 <pinctrl_configure_pins>
	if (err < 0) {
    4c3c:	1e04      	subs	r4, r0, #0
    4c3e:	db1c      	blt.n	4c7a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4c40:	1d31      	adds	r1, r6, #4
    4c42:	4638      	mov	r0, r7
    4c44:	f7ff ff2c 	bl	4aa0 <uarte_nrfx_configure>
	if (err) {
    4c48:	4604      	mov	r4, r0
    4c4a:	b9b0      	cbnz	r0, 4c7a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4c4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4c50:	0799      	lsls	r1, r3, #30
    4c52:	d529      	bpl.n	4ca8 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4c54:	f106 0012 	add.w	r0, r6, #18
    4c58:	f001 fa12 	bl	6080 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4c5c:	4b27      	ldr	r3, [pc, #156]	; (4cfc <uarte_instance_init.constprop.0+0xf8>)
    4c5e:	4298      	cmp	r0, r3
    4c60:	d00f      	beq.n	4c82 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    4c62:	4b27      	ldr	r3, [pc, #156]	; (4d00 <uarte_instance_init.constprop.0+0xfc>)
    4c64:	9400      	str	r4, [sp, #0]
    4c66:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4c6a:	4620      	mov	r0, r4
    4c6c:	4623      	mov	r3, r4
    4c6e:	4925      	ldr	r1, [pc, #148]	; (4d04 <uarte_instance_init.constprop.0+0x100>)
    4c70:	2201      	movs	r2, #1
    4c72:	f7ff ff03 	bl	4a7c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    4c76:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4c7a:	4620      	mov	r0, r4
    4c7c:	b007      	add	sp, #28
    4c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4c82:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4c84:	00c3      	lsls	r3, r0, #3
    4c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4c8a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4c8e:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4c92:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4c96:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4c9a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4c9e:	4a1a      	ldr	r2, [pc, #104]	; (4d08 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4ca0:	2301      	movs	r3, #1
    4ca2:	4083      	lsls	r3, r0
    4ca4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4ca8:	2308      	movs	r3, #8
    4caa:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4cae:	f898 3008 	ldrb.w	r3, [r8, #8]
    4cb2:	b95b      	cbnz	r3, 4ccc <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cb4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4cb8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4cbc:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4cc0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4cc4:	2301      	movs	r3, #1
    4cc6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cca:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4ccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4cd0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4cd2:	bf5c      	itt	pl
    4cd4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4cd8:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4cdc:	06db      	lsls	r3, r3, #27
    4cde:	bf44      	itt	mi
    4ce0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4ce4:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4ce8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    4cea:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4cec:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4cf0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cf4:	2301      	movs	r3, #1
    4cf6:	60ab      	str	r3, [r5, #8]
    4cf8:	60eb      	str	r3, [r5, #12]
	return 0;
    4cfa:	e7be      	b.n	4c7a <uarte_instance_init.constprop.0+0x76>
    4cfc:	0bad0000 	.word	0x0bad0000
    4d00:	0000b4cc 	.word	0x0000b4cc
    4d04:	00009cf4 	.word	0x00009cf4
    4d08:	4001f000 	.word	0x4001f000

00004d0c <uarte_nrfx_poll_out>:
{
    4d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    4d0e:	6906      	ldr	r6, [r0, #16]
{
    4d10:	4605      	mov	r5, r0
    4d12:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d14:	f004 fe05 	bl	9922 <k_is_in_isr>
    4d18:	b9b0      	cbnz	r0, 4d48 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    4d1a:	4b2c      	ldr	r3, [pc, #176]	; (4dcc <uarte_nrfx_poll_out+0xc0>)
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	b19b      	cbz	r3, 4d48 <uarte_nrfx_poll_out+0x3c>
{
    4d20:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4d22:	6868      	ldr	r0, [r5, #4]
    4d24:	f004 fbd3 	bl	94ce <is_tx_ready.isra.0>
    4d28:	b9f8      	cbnz	r0, 4d6a <uarte_nrfx_poll_out+0x5e>
    4d2a:	2001      	movs	r0, #1
    4d2c:	f004 fd3d 	bl	97aa <nrfx_busy_wait>
    4d30:	3c01      	subs	r4, #1
    4d32:	d1f6      	bne.n	4d22 <uarte_nrfx_poll_out+0x16>
    4d34:	2100      	movs	r1, #0
    4d36:	2021      	movs	r0, #33	; 0x21
    4d38:	f003 f938 	bl	7fac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d3c:	e7f0      	b.n	4d20 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    4d3e:	f384 8811 	msr	BASEPRI, r4
    4d42:	f3bf 8f6f 	isb	sy
}
    4d46:	e7f5      	b.n	4d34 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    4d48:	f04f 0340 	mov.w	r3, #64	; 0x40
    4d4c:	f3ef 8411 	mrs	r4, BASEPRI
    4d50:	f383 8812 	msr	BASEPRI_MAX, r3
    4d54:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4d58:	6868      	ldr	r0, [r5, #4]
    4d5a:	f004 fbb8 	bl	94ce <is_tx_ready.isra.0>
    4d5e:	b988      	cbnz	r0, 4d84 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4d60:	f384 8811 	msr	BASEPRI, r4
    4d64:	f3bf 8f6f 	isb	sy
}
    4d68:	e7ee      	b.n	4d48 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    4d6a:	f04f 0340 	mov.w	r3, #64	; 0x40
    4d6e:	f3ef 8411 	mrs	r4, BASEPRI
    4d72:	f383 8812 	msr	BASEPRI_MAX, r3
    4d76:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4d7a:	6868      	ldr	r0, [r5, #4]
    4d7c:	f004 fba7 	bl	94ce <is_tx_ready.isra.0>
    4d80:	2800      	cmp	r0, #0
    4d82:	d0dc      	beq.n	4d3e <uarte_nrfx_poll_out+0x32>
	data->char_out = c;
    4d84:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    4d88:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    4d8a:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    4d8c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4d8e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4d92:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d96:	2200      	movs	r2, #0
    4d98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4d9c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    4da0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    4da4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4da8:	684a      	ldr	r2, [r1, #4]
    4daa:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4dac:	bf41      	itttt	mi
    4dae:	2208      	movmi	r2, #8
    4db0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    4db4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    4db8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4dbc:	2201      	movs	r2, #1
    4dbe:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4dc0:	f384 8811 	msr	BASEPRI, r4
    4dc4:	f3bf 8f6f 	isb	sy
}
    4dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dca:	bf00      	nop
    4dcc:	200012c7 	.word	0x200012c7

00004dd0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4dd0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4dd2:	2301      	movs	r3, #1
    4dd4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4dd6:	4a0e      	ldr	r2, [pc, #56]	; (4e10 <compare_int_lock+0x40>)
    4dd8:	f3bf 8f5b 	dmb	ish
    4ddc:	43dc      	mvns	r4, r3
    4dde:	e852 1f00 	ldrex	r1, [r2]
    4de2:	ea01 0504 	and.w	r5, r1, r4
    4de6:	e842 5600 	strex	r6, r5, [r2]
    4dea:	2e00      	cmp	r6, #0
    4dec:	d1f7      	bne.n	4dde <compare_int_lock+0xe>
    4dee:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4df2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4df6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4df8:	4806      	ldr	r0, [pc, #24]	; (4e14 <compare_int_lock+0x44>)
    4dfa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4dfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e02:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4e06:	420b      	tst	r3, r1
}
    4e08:	bf14      	ite	ne
    4e0a:	2001      	movne	r0, #1
    4e0c:	2000      	moveq	r0, #0
    4e0e:	bd70      	pop	{r4, r5, r6, pc}
    4e10:	20000bbc 	.word	0x20000bbc
    4e14:	40011000 	.word	0x40011000

00004e18 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e18:	491b      	ldr	r1, [pc, #108]	; (4e88 <sys_clock_timeout_handler+0x70>)
{
    4e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e1c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4e1e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e22:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4e24:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4e28:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e2c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4e2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4e32:	d30f      	bcc.n	4e54 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4e34:	f003 fbc4 	bl	85c0 <sys_clock_announce>
    return p_reg->CC[ch];
    4e38:	00a3      	lsls	r3, r4, #2
    4e3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e3e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4e42:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4e46:	4295      	cmp	r5, r2
    4e48:	d11d      	bne.n	4e86 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    4e4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4e4e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    4e52:	e012      	b.n	4e7a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4e54:	4b0d      	ldr	r3, [pc, #52]	; (4e8c <sys_clock_timeout_handler+0x74>)
    4e56:	681b      	ldr	r3, [r3, #0]
    4e58:	0a1a      	lsrs	r2, r3, #8
    4e5a:	061b      	lsls	r3, r3, #24
    4e5c:	195e      	adds	r6, r3, r5
    4e5e:	4b0c      	ldr	r3, [pc, #48]	; (4e90 <sys_clock_timeout_handler+0x78>)
    4e60:	f142 0700 	adc.w	r7, r2, #0
    4e64:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4e68:	f003 fbaa 	bl	85c0 <sys_clock_announce>
    return p_reg->CC[ch];
    4e6c:	4a09      	ldr	r2, [pc, #36]	; (4e94 <sys_clock_timeout_handler+0x7c>)
    4e6e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    4e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    4e76:	429d      	cmp	r5, r3
    4e78:	d105      	bne.n	4e86 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4e7a:	4a06      	ldr	r2, [pc, #24]	; (4e94 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4e80:	40a3      	lsls	r3, r4
    4e82:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e88:	20000428 	.word	0x20000428
    4e8c:	20000bc0 	.word	0x20000bc0
    4e90:	20000430 	.word	0x20000430
    4e94:	40011000 	.word	0x40011000

00004e98 <compare_int_unlock>:
	if (key) {
    4e98:	b311      	cbz	r1, 4ee0 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e9a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    4e9e:	2301      	movs	r3, #1
    4ea0:	4a10      	ldr	r2, [pc, #64]	; (4ee4 <compare_int_unlock+0x4c>)
    4ea2:	4083      	lsls	r3, r0
    4ea4:	e852 cf00 	ldrex	ip, [r2]
    4ea8:	ea4c 0c03 	orr.w	ip, ip, r3
    4eac:	e842 c100 	strex	r1, ip, [r2]
    4eb0:	2900      	cmp	r1, #0
    4eb2:	d1f7      	bne.n	4ea4 <compare_int_unlock+0xc>
    4eb4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4eb8:	4a0b      	ldr	r2, [pc, #44]	; (4ee8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ebe:	4083      	lsls	r3, r0
    4ec0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ec4:	4b09      	ldr	r3, [pc, #36]	; (4eec <compare_int_unlock+0x54>)
    4ec6:	f3bf 8f5b 	dmb	ish
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4ed0:	40c3      	lsrs	r3, r0
    4ed2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ed4:	bf42      	ittt	mi
    4ed6:	4b06      	ldrmi	r3, [pc, #24]	; (4ef0 <compare_int_unlock+0x58>)
    4ed8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4edc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4ee0:	4770      	bx	lr
    4ee2:	bf00      	nop
    4ee4:	20000bbc 	.word	0x20000bbc
    4ee8:	40011000 	.word	0x40011000
    4eec:	20000bb8 	.word	0x20000bb8
    4ef0:	e000e100 	.word	0xe000e100

00004ef4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4ef4:	4b0d      	ldr	r3, [pc, #52]	; (4f2c <z_nrf_rtc_timer_read+0x38>)
    4ef6:	6818      	ldr	r0, [r3, #0]
    4ef8:	0a01      	lsrs	r1, r0, #8
    4efa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4efc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4f00:	4b0b      	ldr	r3, [pc, #44]	; (4f30 <z_nrf_rtc_timer_read+0x3c>)
    4f02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4f06:	1818      	adds	r0, r3, r0
    4f08:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f10:	d20a      	bcs.n	4f28 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4f12:	4b08      	ldr	r3, [pc, #32]	; (4f34 <z_nrf_rtc_timer_read+0x40>)
    4f14:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f18:	4290      	cmp	r0, r2
    4f1a:	eb71 0303 	sbcs.w	r3, r1, r3
    4f1e:	d203      	bcs.n	4f28 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4f20:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4f24:	f141 0100 	adc.w	r1, r1, #0
}
    4f28:	4770      	bx	lr
    4f2a:	bf00      	nop
    4f2c:	20000bc0 	.word	0x20000bc0
    4f30:	40011000 	.word	0x40011000
    4f34:	20000430 	.word	0x20000430

00004f38 <compare_set>:
{
    4f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f3c:	4614      	mov	r4, r2
    4f3e:	461d      	mov	r5, r3
    4f40:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    4f42:	f7ff ff45 	bl	4dd0 <compare_int_lock>
    4f46:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4f48:	f7ff ffd4 	bl	4ef4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4f4c:	42a0      	cmp	r0, r4
    4f4e:	eb71 0305 	sbcs.w	r3, r1, r5
    4f52:	d27a      	bcs.n	504a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    4f54:	4b46      	ldr	r3, [pc, #280]	; (5070 <compare_set+0x138>)
    4f56:	1a20      	subs	r0, r4, r0
    4f58:	eb65 0101 	sbc.w	r1, r5, r1
    4f5c:	4298      	cmp	r0, r3
    4f5e:	f171 0100 	sbcs.w	r1, r1, #0
    4f62:	f080 8081 	bcs.w	5068 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    4f66:	4b43      	ldr	r3, [pc, #268]	; (5074 <compare_set+0x13c>)
    4f68:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4f6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4f70:	429d      	cmp	r5, r3
    4f72:	bf08      	it	eq
    4f74:	4294      	cmpeq	r4, r2
    4f76:	d053      	beq.n	5020 <compare_set+0xe8>
    4f78:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    4f7c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4f80:	f107 0950 	add.w	r9, r7, #80	; 0x50
    4f84:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    4f88:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f8c:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    4f90:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    4f94:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    4f9c:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    4fa0:	4a35      	ldr	r2, [pc, #212]	; (5078 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4fa2:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    4fa6:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4fa8:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    4faa:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4fae:	eba0 000b 	sub.w	r0, r0, fp
    4fb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4fb6:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4fba:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4fbc:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    4fc0:	d105      	bne.n	4fce <compare_set+0x96>
    4fc2:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    4fc4:	2013      	movs	r0, #19
    4fc6:	f004 fcf2 	bl	99ae <z_impl_k_busy_wait>
    4fca:	4a2b      	ldr	r2, [pc, #172]	; (5078 <compare_set+0x140>)
    4fcc:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4fce:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    4fd2:	eba6 000c 	sub.w	r0, r6, ip
    4fd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4fda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4fde:	bf88      	it	hi
    4fe0:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4fe2:	2000      	movs	r0, #0
    4fe4:	f8c9 0000 	str.w	r0, [r9]
    4fe8:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    4fec:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4ff0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4ff4:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    4ff8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    4ffc:	4583      	cmp	fp, r0
    4ffe:	d006      	beq.n	500e <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    5000:	1a30      	subs	r0, r6, r0
    5002:	3802      	subs	r0, #2
    5004:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5008:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    500c:	d81b      	bhi.n	5046 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    500e:	eba6 0608 	sub.w	r6, r6, r8
    5012:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5016:	1936      	adds	r6, r6, r4
    5018:	f145 0300 	adc.w	r3, r5, #0
    501c:	4634      	mov	r4, r6
    501e:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    5020:	4914      	ldr	r1, [pc, #80]	; (5074 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5022:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5024:	013b      	lsls	r3, r7, #4
    5026:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    502a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    502c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    502e:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    5030:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    5034:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5036:	4638      	mov	r0, r7
    5038:	9900      	ldr	r1, [sp, #0]
    503a:	f7ff ff2d 	bl	4e98 <compare_int_unlock>
}
    503e:	4620      	mov	r0, r4
    5040:	b003      	add	sp, #12
    5042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5046:	4630      	mov	r0, r6
    5048:	e7af      	b.n	4faa <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    504a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    504c:	4a0b      	ldr	r2, [pc, #44]	; (507c <compare_set+0x144>)
    504e:	f3bf 8f5b 	dmb	ish
    5052:	40bb      	lsls	r3, r7
    5054:	e852 0f00 	ldrex	r0, [r2]
    5058:	4318      	orrs	r0, r3
    505a:	e842 0100 	strex	r1, r0, [r2]
    505e:	2900      	cmp	r1, #0
    5060:	d1f8      	bne.n	5054 <compare_set+0x11c>
    5062:	f3bf 8f5b 	dmb	ish
    5066:	e7db      	b.n	5020 <compare_set+0xe8>
			return -EINVAL;
    5068:	f06f 0415 	mvn.w	r4, #21
    506c:	e7e3      	b.n	5036 <compare_set+0xfe>
    506e:	bf00      	nop
    5070:	01000001 	.word	0x01000001
    5074:	20000418 	.word	0x20000418
    5078:	40011000 	.word	0x40011000
    507c:	20000bb8 	.word	0x20000bb8

00005080 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5080:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5082:	4b19      	ldr	r3, [pc, #100]	; (50e8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5084:	4d19      	ldr	r5, [pc, #100]	; (50ec <sys_clock_driver_init+0x6c>)
    5086:	2400      	movs	r4, #0
    5088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    508c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5090:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5094:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    509c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50a0:	4b13      	ldr	r3, [pc, #76]	; (50f0 <sys_clock_driver_init+0x70>)
    50a2:	2602      	movs	r6, #2
    50a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    50a8:	2101      	movs	r1, #1
    50aa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    50ae:	2011      	movs	r0, #17
    50b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    50b4:	4622      	mov	r2, r4
    50b6:	f7fe f83b 	bl	3130 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    50ba:	2011      	movs	r0, #17
    50bc:	f7fe f81c 	bl	30f8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    50c0:	4a0c      	ldr	r2, [pc, #48]	; (50f4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    50c2:	2301      	movs	r3, #1
    50c4:	60ab      	str	r3, [r5, #8]
    50c6:	602b      	str	r3, [r5, #0]
    50c8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    50ca:	4b0b      	ldr	r3, [pc, #44]	; (50f8 <sys_clock_driver_init+0x78>)
    50cc:	4a0b      	ldr	r2, [pc, #44]	; (50fc <sys_clock_driver_init+0x7c>)
    50ce:	9300      	str	r3, [sp, #0]
    50d0:	9401      	str	r4, [sp, #4]
    50d2:	2300      	movs	r3, #0
    50d4:	4620      	mov	r0, r4
    50d6:	f7ff ff2f 	bl	4f38 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    50da:	4630      	mov	r0, r6
    50dc:	f7ff fa06 	bl	44ec <z_nrf_clock_control_lf_on>

	return 0;
}
    50e0:	4620      	mov	r0, r4
    50e2:	b002      	add	sp, #8
    50e4:	bd70      	pop	{r4, r5, r6, pc}
    50e6:	bf00      	nop
    50e8:	20000418 	.word	0x20000418
    50ec:	40011000 	.word	0x40011000
    50f0:	e000e100 	.word	0xe000e100
    50f4:	20000bbc 	.word	0x20000bbc
    50f8:	00004e19 	.word	0x00004e19
    50fc:	007fffff 	.word	0x007fffff

00005100 <rtc_nrf_isr>:
{
    5100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5104:	4c2b      	ldr	r4, [pc, #172]	; (51b4 <rtc_nrf_isr+0xb4>)
    5106:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    510a:	079a      	lsls	r2, r3, #30
    510c:	d50b      	bpl.n	5126 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    510e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5112:	b143      	cbz	r3, 5126 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5114:	4a28      	ldr	r2, [pc, #160]	; (51b8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5116:	2300      	movs	r3, #0
    5118:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    511c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5120:	6813      	ldr	r3, [r2, #0]
    5122:	3301      	adds	r3, #1
    5124:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5126:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    512a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    512c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5130:	03db      	lsls	r3, r3, #15
    5132:	d522      	bpl.n	517a <rtc_nrf_isr+0x7a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5134:	f3bf 8f5b 	dmb	ish
    5138:	4b20      	ldr	r3, [pc, #128]	; (51bc <rtc_nrf_isr+0xbc>)
    513a:	e853 1f00 	ldrex	r1, [r3]
    513e:	f021 0001 	bic.w	r0, r1, #1
    5142:	e843 0500 	strex	r5, r0, [r3]
    5146:	2d00      	cmp	r5, #0
    5148:	d1f7      	bne.n	513a <rtc_nrf_isr+0x3a>
    514a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    514e:	b911      	cbnz	r1, 5156 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5150:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5154:	b18b      	cbz	r3, 517a <rtc_nrf_isr+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5156:	2500      	movs	r5, #0
    5158:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    515c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    5160:	f382 8810 	msr	PRIMASK, r2
		curr_time = z_nrf_rtc_timer_read();
    5164:	f7ff fec6 	bl	4ef4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5168:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    516c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    516e:	4b14      	ldr	r3, [pc, #80]	; (51c0 <rtc_nrf_isr+0xc0>)
    5170:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5174:	42b0      	cmp	r0, r6
    5176:	41b9      	sbcs	r1, r7
    5178:	d204      	bcs.n	5184 <rtc_nrf_isr+0x84>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    517a:	f382 8810 	msr	PRIMASK, r2
}
    517e:	b003      	add	sp, #12
    5180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5184:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5188:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    518c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5190:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    5194:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    519a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    519e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    51a2:	2900      	cmp	r1, #0
    51a4:	d0eb      	beq.n	517e <rtc_nrf_isr+0x7e>
			handler(chan, expire_time, user_context);
    51a6:	9000      	str	r0, [sp, #0]
    51a8:	4632      	mov	r2, r6
    51aa:	463b      	mov	r3, r7
    51ac:	4628      	mov	r0, r5
    51ae:	4788      	blx	r1
}
    51b0:	e7e5      	b.n	517e <rtc_nrf_isr+0x7e>
    51b2:	bf00      	nop
    51b4:	40011000 	.word	0x40011000
    51b8:	20000bc0 	.word	0x20000bc0
    51bc:	20000bb8 	.word	0x20000bb8
    51c0:	20000418 	.word	0x20000418

000051c4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    51c4:	1c43      	adds	r3, r0, #1
{
    51c6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    51c8:	d021      	beq.n	520e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    51ca:	2801      	cmp	r0, #1
    51cc:	dd21      	ble.n	5212 <sys_clock_set_timeout+0x4e>
    51ce:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    51d2:	da20      	bge.n	5216 <sys_clock_set_timeout+0x52>
    51d4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    51d6:	f7ff fe8d 	bl	4ef4 <z_nrf_rtc_timer_read>
    51da:	4b10      	ldr	r3, [pc, #64]	; (521c <sys_clock_set_timeout+0x58>)
    51dc:	e9d3 1300 	ldrd	r1, r3, [r3]
    51e0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    51e2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    51e6:	480e      	ldr	r0, [pc, #56]	; (5220 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    51e8:	bf28      	it	cs
    51ea:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    51ec:	3201      	adds	r2, #1
    51ee:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    51f0:	4282      	cmp	r2, r0
    51f2:	bf28      	it	cs
    51f4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    51f6:	1852      	adds	r2, r2, r1
    51f8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    51fc:	4909      	ldr	r1, [pc, #36]	; (5224 <sys_clock_set_timeout+0x60>)
    51fe:	9001      	str	r0, [sp, #4]
    5200:	9100      	str	r1, [sp, #0]
    5202:	f143 0300 	adc.w	r3, r3, #0
    5206:	f7ff fe97 	bl	4f38 <compare_set>
}
    520a:	b002      	add	sp, #8
    520c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    520e:	4804      	ldr	r0, [pc, #16]	; (5220 <sys_clock_set_timeout+0x5c>)
    5210:	e7e0      	b.n	51d4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5212:	2400      	movs	r4, #0
    5214:	e7df      	b.n	51d6 <sys_clock_set_timeout+0x12>
    5216:	4c02      	ldr	r4, [pc, #8]	; (5220 <sys_clock_set_timeout+0x5c>)
    5218:	e7dd      	b.n	51d6 <sys_clock_set_timeout+0x12>
    521a:	bf00      	nop
    521c:	20000428 	.word	0x20000428
    5220:	007fffff 	.word	0x007fffff
    5224:	00004e19 	.word	0x00004e19

00005228 <sys_clock_elapsed>:
{
    5228:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    522a:	f7ff fe63 	bl	4ef4 <z_nrf_rtc_timer_read>
    522e:	4b02      	ldr	r3, [pc, #8]	; (5238 <sys_clock_elapsed+0x10>)
    5230:	681b      	ldr	r3, [r3, #0]
}
    5232:	1ac0      	subs	r0, r0, r3
    5234:	bd08      	pop	{r3, pc}
    5236:	bf00      	nop
    5238:	20000428 	.word	0x20000428

0000523c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    523c:	6803      	ldr	r3, [r0, #0]
    switch (port)
    523e:	095a      	lsrs	r2, r3, #5
{
    5240:	b510      	push	{r4, lr}
    5242:	4604      	mov	r4, r0
    switch (port)
    5244:	d01d      	beq.n	5282 <nrf_gpio_pin_port_decode+0x46>
    5246:	2a01      	cmp	r2, #1
    5248:	d106      	bne.n	5258 <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    524a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    524e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5252:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5254:	07d3      	lsls	r3, r2, #31
    5256:	d40b      	bmi.n	5270 <nrf_gpio_pin_port_decode+0x34>
    5258:	4914      	ldr	r1, [pc, #80]	; (52ac <nrf_gpio_pin_port_decode+0x70>)
    525a:	4815      	ldr	r0, [pc, #84]	; (52b0 <nrf_gpio_pin_port_decode+0x74>)
    525c:	4a15      	ldr	r2, [pc, #84]	; (52b4 <nrf_gpio_pin_port_decode+0x78>)
    525e:	f240 2329 	movw	r3, #553	; 0x229
    5262:	f003 ff60 	bl	9126 <assert_print>
    5266:	4813      	ldr	r0, [pc, #76]	; (52b4 <nrf_gpio_pin_port_decode+0x78>)
    5268:	f240 2129 	movw	r1, #553	; 0x229
    526c:	f003 ff54 	bl	9118 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5270:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5272:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5276:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5278:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    527a:	d105      	bne.n	5288 <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    527c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5280:	bd10      	pop	{r4, pc}
    switch (port)
    5282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5286:	e7e2      	b.n	524e <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5288:	2b01      	cmp	r3, #1
    528a:	d00c      	beq.n	52a6 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    528c:	4a09      	ldr	r2, [pc, #36]	; (52b4 <nrf_gpio_pin_port_decode+0x78>)
    528e:	490a      	ldr	r1, [pc, #40]	; (52b8 <nrf_gpio_pin_port_decode+0x7c>)
    5290:	4807      	ldr	r0, [pc, #28]	; (52b0 <nrf_gpio_pin_port_decode+0x74>)
    5292:	f240 232e 	movw	r3, #558	; 0x22e
    5296:	f003 ff46 	bl	9126 <assert_print>
    529a:	4806      	ldr	r0, [pc, #24]	; (52b4 <nrf_gpio_pin_port_decode+0x78>)
    529c:	f240 212e 	movw	r1, #558	; 0x22e
    52a0:	f003 ff3a 	bl	9118 <assert_post_action>
    52a4:	e7ea      	b.n	527c <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    52a6:	4805      	ldr	r0, [pc, #20]	; (52bc <nrf_gpio_pin_port_decode+0x80>)
    52a8:	e7ea      	b.n	5280 <nrf_gpio_pin_port_decode+0x44>
    52aa:	bf00      	nop
    52ac:	0000b48f 	.word	0x0000b48f
    52b0:	0000a092 	.word	0x0000a092
    52b4:	0000b45c 	.word	0x0000b45c
    52b8:	0000a1ea 	.word	0x0000a1ea
    52bc:	50000300 	.word	0x50000300

000052c0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    52c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    52c2:	ab0b      	add	r3, sp, #44	; 0x2c
    52c4:	9305      	str	r3, [sp, #20]
    52c6:	9303      	str	r3, [sp, #12]
    52c8:	4b05      	ldr	r3, [pc, #20]	; (52e0 <z_log_msg2_runtime_create.constprop.0+0x20>)
    52ca:	9302      	str	r3, [sp, #8]
    52cc:	2300      	movs	r3, #0
    52ce:	e9cd 3300 	strd	r3, r3, [sp]
    52d2:	2201      	movs	r2, #1
    52d4:	4618      	mov	r0, r3
    52d6:	f7fd fb33 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    52da:	b007      	add	sp, #28
    52dc:	f85d fb04 	ldr.w	pc, [sp], #4
    52e0:	0000b509 	.word	0x0000b509

000052e4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    52e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    52e6:	f7fd f8c9 	bl	247c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    52ea:	2400      	movs	r4, #0
    52ec:	4b06      	ldr	r3, [pc, #24]	; (5308 <k_sys_fatal_error_handler+0x24>)
    52ee:	9302      	str	r3, [sp, #8]
    52f0:	4620      	mov	r0, r4
    52f2:	e9cd 4400 	strd	r4, r4, [sp]
    52f6:	4905      	ldr	r1, [pc, #20]	; (530c <k_sys_fatal_error_handler+0x28>)
    52f8:	4623      	mov	r3, r4
    52fa:	2201      	movs	r2, #1
    52fc:	f7ff ffe0 	bl	52c0 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    5300:	4620      	mov	r0, r4
    5302:	f7fe fd53 	bl	3dac <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5306:	bf00      	nop
    5308:	0000b509 	.word	0x0000b509
    530c:	00009cbc 	.word	0x00009cbc

00005310 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5310:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5314:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5318:	2a08      	cmp	r2, #8
    531a:	d106      	bne.n	532a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    531c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5320:	2b05      	cmp	r3, #5
    5322:	d802      	bhi.n	532a <nrf52_errata_103+0x1a>
    5324:	4a02      	ldr	r2, [pc, #8]	; (5330 <nrf52_errata_103+0x20>)
    5326:	5cd0      	ldrb	r0, [r2, r3]
    5328:	4770      	bx	lr
                        return false;
    532a:	2000      	movs	r0, #0
}
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	0000b52c 	.word	0x0000b52c

00005334 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5334:	4a02      	ldr	r2, [pc, #8]	; (5340 <nvmc_wait+0xc>)
    5336:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    533a:	2b00      	cmp	r3, #0
    533c:	d0fb      	beq.n	5336 <nvmc_wait+0x2>
}
    533e:	4770      	bx	lr
    5340:	4001e000 	.word	0x4001e000

00005344 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5348:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    534a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    534e:	2a08      	cmp	r2, #8
    5350:	d14e      	bne.n	53f0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    5352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5356:	2100      	movs	r1, #0
    5358:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    535c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5360:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5364:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5368:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    536c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5370:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    5374:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5378:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    537c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5380:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    5384:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5388:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    538c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5390:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5394:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5398:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    539c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    53a0:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    53a4:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    53a8:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    53ac:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    53b0:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    53b4:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    53b8:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    53bc:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    53c0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    53c4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    53c8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    53cc:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    53d0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    53d4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    53d8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    53dc:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    53e0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    53e4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    53e8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    53ec:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    53f0:	f7ff ff8e 	bl	5310 <nrf52_errata_103>
    53f4:	b118      	cbz	r0, 53fe <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    53f6:	4b3b      	ldr	r3, [pc, #236]	; (54e4 <SystemInit+0x1a0>)
    53f8:	4a3b      	ldr	r2, [pc, #236]	; (54e8 <SystemInit+0x1a4>)
    53fa:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    53fe:	f7ff ff87 	bl	5310 <nrf52_errata_103>
    5402:	b118      	cbz	r0, 540c <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5404:	4b39      	ldr	r3, [pc, #228]	; (54ec <SystemInit+0x1a8>)
    5406:	22fb      	movs	r2, #251	; 0xfb
    5408:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    540c:	f7ff ff80 	bl	5310 <nrf52_errata_103>
    5410:	b170      	cbz	r0, 5430 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    541a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    541e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5422:	f022 020f 	bic.w	r2, r2, #15
    5426:	f003 030f 	and.w	r3, r3, #15
    542a:	4313      	orrs	r3, r2
    542c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5430:	f7ff ff6e 	bl	5310 <nrf52_errata_103>
    5434:	b120      	cbz	r0, 5440 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5436:	4b2e      	ldr	r3, [pc, #184]	; (54f0 <SystemInit+0x1ac>)
    5438:	f44f 7200 	mov.w	r2, #512	; 0x200
    543c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5444:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5448:	2b08      	cmp	r3, #8
    544a:	d11a      	bne.n	5482 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    544c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5450:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5454:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5456:	bf44      	itt	mi
    5458:	f06f 0201 	mvnmi.w	r2, #1
    545c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5464:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5468:	2b05      	cmp	r3, #5
    546a:	d802      	bhi.n	5472 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    546c:	4a21      	ldr	r2, [pc, #132]	; (54f4 <SystemInit+0x1b0>)
    546e:	5cd3      	ldrb	r3, [r2, r3]
    5470:	b13b      	cbz	r3, 5482 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5472:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5476:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    547a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    547e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5482:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5486:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    548a:	2a00      	cmp	r2, #0
    548c:	db03      	blt.n	5496 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    548e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5492:	2b00      	cmp	r3, #0
    5494:	da22      	bge.n	54dc <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5496:	4918      	ldr	r1, [pc, #96]	; (54f8 <SystemInit+0x1b4>)
    5498:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    549a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    549e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    54a2:	2412      	movs	r4, #18
    nvmc_wait();
    54a4:	f7ff ff46 	bl	5334 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    54a8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    54ac:	f7ff ff42 	bl	5334 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    54b0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    54b4:	f7ff ff3e 	bl	5334 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    54b8:	2300      	movs	r3, #0
    54ba:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    54be:	f7ff ff39 	bl	5334 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    54c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    54c6:	490d      	ldr	r1, [pc, #52]	; (54fc <SystemInit+0x1b8>)
    54c8:	4b0d      	ldr	r3, [pc, #52]	; (5500 <SystemInit+0x1bc>)
    54ca:	68ca      	ldr	r2, [r1, #12]
    54cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    54d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    54d2:	60cb      	str	r3, [r1, #12]
    54d4:	f3bf 8f4f 	dsb	sy
    __NOP();
    54d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    54da:	e7fd      	b.n	54d8 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    54dc:	4b09      	ldr	r3, [pc, #36]	; (5504 <SystemInit+0x1c0>)
    54de:	4a0a      	ldr	r2, [pc, #40]	; (5508 <SystemInit+0x1c4>)
    54e0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    54e2:	bd10      	pop	{r4, pc}
    54e4:	40005000 	.word	0x40005000
    54e8:	00038148 	.word	0x00038148
    54ec:	4000f000 	.word	0x4000f000
    54f0:	40029000 	.word	0x40029000
    54f4:	0000b526 	.word	0x0000b526
    54f8:	4001e000 	.word	0x4001e000
    54fc:	e000ed00 	.word	0xe000ed00
    5500:	05fa0004 	.word	0x05fa0004
    5504:	200000f0 	.word	0x200000f0
    5508:	03d09000 	.word	0x03d09000

0000550c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    550c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    550e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5510:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5512:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5516:	fab2 f382 	clz	r3, r2
    551a:	f1c3 031f 	rsb	r3, r3, #31
    551e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5520:	fa05 f403 	lsl.w	r4, r5, r3
    5524:	ea22 0404 	bic.w	r4, r2, r4
    5528:	e850 6f00 	ldrex	r6, [r0]
    552c:	4296      	cmp	r6, r2
    552e:	d104      	bne.n	553a <nrfx_flag32_alloc+0x2e>
    5530:	e840 4c00 	strex	ip, r4, [r0]
    5534:	f1bc 0f00 	cmp.w	ip, #0
    5538:	d1f6      	bne.n	5528 <nrfx_flag32_alloc+0x1c>
    553a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    553e:	d1e7      	bne.n	5510 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5540:	4801      	ldr	r0, [pc, #4]	; (5548 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5542:	700b      	strb	r3, [r1, #0]
}
    5544:	bd70      	pop	{r4, r5, r6, pc}
    5546:	bf00      	nop
    5548:	0bad0000 	.word	0x0bad0000

0000554c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    554c:	6803      	ldr	r3, [r0, #0]
    554e:	40cb      	lsrs	r3, r1
    5550:	07db      	lsls	r3, r3, #31
{
    5552:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5554:	d414      	bmi.n	5580 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5556:	2301      	movs	r3, #1
    5558:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    555a:	6802      	ldr	r2, [r0, #0]
    555c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5560:	ea43 0102 	orr.w	r1, r3, r2
    5564:	e850 4f00 	ldrex	r4, [r0]
    5568:	4294      	cmp	r4, r2
    556a:	d104      	bne.n	5576 <nrfx_flag32_free+0x2a>
    556c:	e840 1c00 	strex	ip, r1, [r0]
    5570:	f1bc 0f00 	cmp.w	ip, #0
    5574:	d1f6      	bne.n	5564 <nrfx_flag32_free+0x18>
    5576:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    557a:	d1ee      	bne.n	555a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    557c:	4801      	ldr	r0, [pc, #4]	; (5584 <nrfx_flag32_free+0x38>)
}
    557e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5580:	4801      	ldr	r0, [pc, #4]	; (5588 <nrfx_flag32_free+0x3c>)
    5582:	e7fc      	b.n	557e <nrfx_flag32_free+0x32>
    5584:	0bad0000 	.word	0x0bad0000
    5588:	0bad0004 	.word	0x0bad0004

0000558c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    558e:	4604      	mov	r4, r0
    5590:	b170      	cbz	r0, 55b0 <clock_stop+0x24>
    5592:	2801      	cmp	r0, #1
    5594:	d02d      	beq.n	55f2 <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5596:	4939      	ldr	r1, [pc, #228]	; (567c <clock_stop+0xf0>)
    5598:	4839      	ldr	r0, [pc, #228]	; (5680 <clock_stop+0xf4>)
    559a:	4a3a      	ldr	r2, [pc, #232]	; (5684 <clock_stop+0xf8>)
    559c:	23d8      	movs	r3, #216	; 0xd8
    559e:	f003 fdc2 	bl	9126 <assert_print>
    55a2:	4838      	ldr	r0, [pc, #224]	; (5684 <clock_stop+0xf8>)
    55a4:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    55a6:	b003      	add	sp, #12
    55a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    55ac:	f003 bdb4 	b.w	9118 <assert_post_action>
    p_reg->INTENCLR = mask;
    55b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55b4:	2202      	movs	r2, #2
    55b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55ba:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    55be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55c2:	2201      	movs	r2, #1
    55c4:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    55c6:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    55c8:	2301      	movs	r3, #1
    55ca:	f88d 3007 	strb.w	r3, [sp, #7]
    55ce:	f242 7510 	movw	r5, #10000	; 0x2710
    55d2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    55d6:	b1cc      	cbz	r4, 560c <clock_stop+0x80>
    55d8:	2c01      	cmp	r4, #1
    55da:	d037      	beq.n	564c <clock_stop+0xc0>
            NRFX_ASSERT(0);
    55dc:	4927      	ldr	r1, [pc, #156]	; (567c <clock_stop+0xf0>)
    55de:	4828      	ldr	r0, [pc, #160]	; (5680 <clock_stop+0xf4>)
    55e0:	4a29      	ldr	r2, [pc, #164]	; (5688 <clock_stop+0xfc>)
    55e2:	f44f 734f 	mov.w	r3, #828	; 0x33c
    55e6:	f003 fd9e 	bl	9126 <assert_print>
    55ea:	4827      	ldr	r0, [pc, #156]	; (5688 <clock_stop+0xfc>)
    55ec:	f44f 714f 	mov.w	r1, #828	; 0x33c
    55f0:	e7d9      	b.n	55a6 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    55f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55f6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    55f8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5600:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5604:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5606:	f10d 0707 	add.w	r7, sp, #7
    560a:	e7dd      	b.n	55c8 <clock_stop+0x3c>
            if (p_clk_src != NULL)
    560c:	b19f      	cbz	r7, 5636 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    560e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5612:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5616:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5618:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    561c:	03d8      	lsls	r0, r3, #15
    561e:	d513      	bpl.n	5648 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5620:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5624:	2801      	cmp	r0, #1
    5626:	d103      	bne.n	5630 <clock_stop+0xa4>
    5628:	f004 f8bf 	bl	97aa <nrfx_busy_wait>
    562c:	3d01      	subs	r5, #1
    562e:	d1d2      	bne.n	55d6 <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5630:	2c01      	cmp	r4, #1
    5632:	d015      	beq.n	5660 <clock_stop+0xd4>
    5634:	e008      	b.n	5648 <clock_stop+0xbc>
    5636:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    563a:	03d9      	lsls	r1, r3, #15
    563c:	d504      	bpl.n	5648 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    563e:	2001      	movs	r0, #1
    5640:	f004 f8b3 	bl	97aa <nrfx_busy_wait>
    5644:	3d01      	subs	r5, #1
    5646:	d1f6      	bne.n	5636 <clock_stop+0xaa>
}
    5648:	b003      	add	sp, #12
    564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    564c:	b167      	cbz	r7, 5668 <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    564e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5652:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5656:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5658:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    565c:	03da      	lsls	r2, r3, #15
    565e:	d4df      	bmi.n	5620 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    5660:	4b0a      	ldr	r3, [pc, #40]	; (568c <clock_stop+0x100>)
    5662:	2200      	movs	r2, #0
    5664:	715a      	strb	r2, [r3, #5]
    5666:	e7ef      	b.n	5648 <clock_stop+0xbc>
    5668:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    566c:	03db      	lsls	r3, r3, #15
    566e:	d5f7      	bpl.n	5660 <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5670:	2001      	movs	r0, #1
    5672:	f004 f89a 	bl	97aa <nrfx_busy_wait>
    5676:	3d01      	subs	r5, #1
    5678:	d1f6      	bne.n	5668 <clock_stop+0xdc>
    567a:	e7f1      	b.n	5660 <clock_stop+0xd4>
    567c:	0000a1ea 	.word	0x0000a1ea
    5680:	0000a092 	.word	0x0000a092
    5684:	0000b532 	.word	0x0000b532
    5688:	0000b56f 	.word	0x0000b56f
    568c:	20000bc4 	.word	0x20000bc4

00005690 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5690:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    5692:	4604      	mov	r4, r0
    5694:	b958      	cbnz	r0, 56ae <nrfx_clock_init+0x1e>
    5696:	490b      	ldr	r1, [pc, #44]	; (56c4 <nrfx_clock_init+0x34>)
    5698:	480b      	ldr	r0, [pc, #44]	; (56c8 <nrfx_clock_init+0x38>)
    569a:	4a0c      	ldr	r2, [pc, #48]	; (56cc <nrfx_clock_init+0x3c>)
    569c:	f240 1315 	movw	r3, #277	; 0x115
    56a0:	f003 fd41 	bl	9126 <assert_print>
    56a4:	4809      	ldr	r0, [pc, #36]	; (56cc <nrfx_clock_init+0x3c>)
    56a6:	f240 1115 	movw	r1, #277	; 0x115
    56aa:	f003 fd35 	bl	9118 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    56ae:	4b08      	ldr	r3, [pc, #32]	; (56d0 <nrfx_clock_init+0x40>)
    56b0:	791a      	ldrb	r2, [r3, #4]
    56b2:	b922      	cbnz	r2, 56be <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    56b4:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    56b6:	4807      	ldr	r0, [pc, #28]	; (56d4 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    56b8:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    56ba:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    56bc:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    56be:	4806      	ldr	r0, [pc, #24]	; (56d8 <nrfx_clock_init+0x48>)
    return err_code;
    56c0:	e7fc      	b.n	56bc <nrfx_clock_init+0x2c>
    56c2:	bf00      	nop
    56c4:	0000b5a3 	.word	0x0000b5a3
    56c8:	0000a092 	.word	0x0000a092
    56cc:	0000b532 	.word	0x0000b532
    56d0:	20000bc4 	.word	0x20000bc4
    56d4:	0bad0000 	.word	0x0bad0000
    56d8:	0bad000c 	.word	0x0bad000c

000056dc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    56dc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    56de:	4b0d      	ldr	r3, [pc, #52]	; (5714 <nrfx_clock_enable+0x38>)
    56e0:	791b      	ldrb	r3, [r3, #4]
    56e2:	b95b      	cbnz	r3, 56fc <nrfx_clock_enable+0x20>
    56e4:	490c      	ldr	r1, [pc, #48]	; (5718 <nrfx_clock_enable+0x3c>)
    56e6:	480d      	ldr	r0, [pc, #52]	; (571c <nrfx_clock_enable+0x40>)
    56e8:	4a0d      	ldr	r2, [pc, #52]	; (5720 <nrfx_clock_enable+0x44>)
    56ea:	f44f 7397 	mov.w	r3, #302	; 0x12e
    56ee:	f003 fd1a 	bl	9126 <assert_print>
    56f2:	480b      	ldr	r0, [pc, #44]	; (5720 <nrfx_clock_enable+0x44>)
    56f4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    56f8:	f003 fd0e 	bl	9118 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    56fc:	2000      	movs	r0, #0
    56fe:	f7fd fd09 	bl	3114 <arch_irq_is_enabled>
    5702:	b908      	cbnz	r0, 5708 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5704:	f7fd fcf8 	bl	30f8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    570c:	2200      	movs	r2, #0
    570e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5712:	bd08      	pop	{r3, pc}
    5714:	20000bc4 	.word	0x20000bc4
    5718:	0000b5b1 	.word	0x0000b5b1
    571c:	0000a092 	.word	0x0000a092
    5720:	0000b532 	.word	0x0000b532

00005724 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5724:	4b2c      	ldr	r3, [pc, #176]	; (57d8 <nrfx_clock_start+0xb4>)
    5726:	791b      	ldrb	r3, [r3, #4]
{
    5728:	b510      	push	{r4, lr}
    572a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    572c:	b95b      	cbnz	r3, 5746 <nrfx_clock_start+0x22>
    572e:	492b      	ldr	r1, [pc, #172]	; (57dc <nrfx_clock_start+0xb8>)
    5730:	482b      	ldr	r0, [pc, #172]	; (57e0 <nrfx_clock_start+0xbc>)
    5732:	4a2c      	ldr	r2, [pc, #176]	; (57e4 <nrfx_clock_start+0xc0>)
    5734:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5738:	f003 fcf5 	bl	9126 <assert_print>
    573c:	4829      	ldr	r0, [pc, #164]	; (57e4 <nrfx_clock_start+0xc0>)
    573e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5742:	f003 fce9 	bl	9118 <assert_post_action>
    switch (domain)
    5746:	b17c      	cbz	r4, 5768 <nrfx_clock_start+0x44>
    5748:	2c01      	cmp	r4, #1
    574a:	d03a      	beq.n	57c2 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    574c:	4926      	ldr	r1, [pc, #152]	; (57e8 <nrfx_clock_start+0xc4>)
    574e:	4824      	ldr	r0, [pc, #144]	; (57e0 <nrfx_clock_start+0xbc>)
    5750:	4a24      	ldr	r2, [pc, #144]	; (57e4 <nrfx_clock_start+0xc0>)
    5752:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5756:	f003 fce6 	bl	9126 <assert_print>
            break;
    }
}
    575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    575e:	4821      	ldr	r0, [pc, #132]	; (57e4 <nrfx_clock_start+0xc0>)
    5760:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5764:	f003 bcd8 	b.w	9118 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    576c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5770:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5774:	03c8      	lsls	r0, r1, #15
    5776:	d512      	bpl.n	579e <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5778:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    577c:	2b01      	cmp	r3, #1
    577e:	d11a      	bne.n	57b6 <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5784:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5788:	2300      	movs	r3, #0
    578a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    578e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    5792:	2302      	movs	r3, #2
    5794:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5798:	2301      	movs	r3, #1
    579a:	6093      	str	r3, [r2, #8]
}
    579c:	e00a      	b.n	57b4 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    579e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    57a2:	07d9      	lsls	r1, r3, #31
    57a4:	d50b      	bpl.n	57be <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    57a6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    57aa:	079b      	lsls	r3, r3, #30
    57ac:	d404      	bmi.n	57b8 <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    57ae:	2302      	movs	r3, #2
    57b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    57b4:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    57b6:	b113      	cbz	r3, 57be <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    57b8:	2000      	movs	r0, #0
    57ba:	f7ff fee7 	bl	558c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    57be:	2300      	movs	r3, #0
    57c0:	e7de      	b.n	5780 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57c6:	2200      	movs	r2, #0
    57c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    57cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    57d0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57d4:	601c      	str	r4, [r3, #0]
}
    57d6:	e7ed      	b.n	57b4 <nrfx_clock_start+0x90>
    57d8:	20000bc4 	.word	0x20000bc4
    57dc:	0000b5b1 	.word	0x0000b5b1
    57e0:	0000a092 	.word	0x0000a092
    57e4:	0000b532 	.word	0x0000b532
    57e8:	0000a1ea 	.word	0x0000a1ea

000057ec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    57ec:	4b0a      	ldr	r3, [pc, #40]	; (5818 <nrfx_clock_stop+0x2c>)
    57ee:	791b      	ldrb	r3, [r3, #4]
{
    57f0:	b510      	push	{r4, lr}
    57f2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    57f4:	b95b      	cbnz	r3, 580e <nrfx_clock_stop+0x22>
    57f6:	4909      	ldr	r1, [pc, #36]	; (581c <nrfx_clock_stop+0x30>)
    57f8:	4809      	ldr	r0, [pc, #36]	; (5820 <nrfx_clock_stop+0x34>)
    57fa:	4a0a      	ldr	r2, [pc, #40]	; (5824 <nrfx_clock_stop+0x38>)
    57fc:	f240 13ad 	movw	r3, #429	; 0x1ad
    5800:	f003 fc91 	bl	9126 <assert_print>
    5804:	4807      	ldr	r0, [pc, #28]	; (5824 <nrfx_clock_stop+0x38>)
    5806:	f240 11ad 	movw	r1, #429	; 0x1ad
    580a:	f003 fc85 	bl	9118 <assert_post_action>
    clock_stop(domain);
    580e:	4620      	mov	r0, r4
}
    5810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    5814:	f7ff beba 	b.w	558c <clock_stop>
    5818:	20000bc4 	.word	0x20000bc4
    581c:	0000b5b1 	.word	0x0000b5b1
    5820:	0000a092 	.word	0x0000a092
    5824:	0000b532 	.word	0x0000b532

00005828 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    582c:	b510      	push	{r4, lr}
    582e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5832:	b16a      	cbz	r2, 5850 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5834:	2200      	movs	r2, #0
    5836:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    583a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    583e:	2201      	movs	r2, #1
    5840:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5844:	4b11      	ldr	r3, [pc, #68]	; (588c <nrfx_power_clock_irq_handler+0x64>)
    5846:	7958      	ldrb	r0, [r3, #5]
    5848:	b910      	cbnz	r0, 5850 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    584a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    584c:	681b      	ldr	r3, [r3, #0]
    584e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5850:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5854:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5858:	b172      	cbz	r2, 5878 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    585a:	2200      	movs	r2, #0
    585c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5860:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5864:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5868:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    586c:	0792      	lsls	r2, r2, #30
    586e:	d104      	bne.n	587a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5870:	2201      	movs	r2, #1
    5872:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5876:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5878:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    587a:	2202      	movs	r2, #2
    587c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5880:	4b02      	ldr	r3, [pc, #8]	; (588c <nrfx_power_clock_irq_handler+0x64>)
}
    5882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5886:	681b      	ldr	r3, [r3, #0]
    5888:	2001      	movs	r0, #1
    588a:	4718      	bx	r3
    588c:	20000bc4 	.word	0x20000bc4

00005890 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5890:	4b03      	ldr	r3, [pc, #12]	; (58a0 <pin_in_use_by_te+0x10>)
    5892:	3008      	adds	r0, #8
    5894:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5898:	f3c0 1040 	ubfx	r0, r0, #5, #1
    589c:	4770      	bx	lr
    589e:	bf00      	nop
    58a0:	200000f4 	.word	0x200000f4

000058a4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    58a4:	4b04      	ldr	r3, [pc, #16]	; (58b8 <pin_has_trigger+0x14>)
    58a6:	3008      	adds	r0, #8
    58a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58ac:	f010 001c 	ands.w	r0, r0, #28
    58b0:	bf18      	it	ne
    58b2:	2001      	movne	r0, #1
    58b4:	4770      	bx	lr
    58b6:	bf00      	nop
    58b8:	200000f4 	.word	0x200000f4

000058bc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    58bc:	4b03      	ldr	r3, [pc, #12]	; (58cc <pin_is_output+0x10>)
    58be:	3008      	adds	r0, #8
    58c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    58c8:	4770      	bx	lr
    58ca:	bf00      	nop
    58cc:	200000f4 	.word	0x200000f4

000058d0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    58d0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    58d2:	f100 0308 	add.w	r3, r0, #8
    58d6:	4c0c      	ldr	r4, [pc, #48]	; (5908 <call_handler+0x38>)
    58d8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    58dc:	05da      	lsls	r2, r3, #23
{
    58de:	4605      	mov	r5, r0
    58e0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    58e2:	d507      	bpl.n	58f4 <call_handler+0x24>
    58e4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    58e8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    58ec:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    58f0:	6852      	ldr	r2, [r2, #4]
    58f2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    58f4:	68a3      	ldr	r3, [r4, #8]
    58f6:	b12b      	cbz	r3, 5904 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    58f8:	68e2      	ldr	r2, [r4, #12]
    58fa:	4631      	mov	r1, r6
    58fc:	4628      	mov	r0, r5
    }
}
    58fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5902:	4718      	bx	r3
}
    5904:	bd70      	pop	{r4, r5, r6, pc}
    5906:	bf00      	nop
    5908:	200000f4 	.word	0x200000f4

0000590c <nrf_gpio_pin_port_decode>:
{
    590c:	b510      	push	{r4, lr}
    590e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5910:	6800      	ldr	r0, [r0, #0]
    5912:	f003 ff4c 	bl	97ae <nrf_gpio_pin_present_check>
    5916:	b958      	cbnz	r0, 5930 <nrf_gpio_pin_port_decode+0x24>
    5918:	4912      	ldr	r1, [pc, #72]	; (5964 <nrf_gpio_pin_port_decode+0x58>)
    591a:	4813      	ldr	r0, [pc, #76]	; (5968 <nrf_gpio_pin_port_decode+0x5c>)
    591c:	4a13      	ldr	r2, [pc, #76]	; (596c <nrf_gpio_pin_port_decode+0x60>)
    591e:	f240 2329 	movw	r3, #553	; 0x229
    5922:	f003 fc00 	bl	9126 <assert_print>
    5926:	4811      	ldr	r0, [pc, #68]	; (596c <nrf_gpio_pin_port_decode+0x60>)
    5928:	f240 2129 	movw	r1, #553	; 0x229
    592c:	f003 fbf4 	bl	9118 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5930:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5932:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5936:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5938:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    593a:	d102      	bne.n	5942 <nrf_gpio_pin_port_decode+0x36>
{
    593c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5940:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5942:	2b01      	cmp	r3, #1
    5944:	d00c      	beq.n	5960 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    5946:	4a09      	ldr	r2, [pc, #36]	; (596c <nrf_gpio_pin_port_decode+0x60>)
    5948:	4909      	ldr	r1, [pc, #36]	; (5970 <nrf_gpio_pin_port_decode+0x64>)
    594a:	4807      	ldr	r0, [pc, #28]	; (5968 <nrf_gpio_pin_port_decode+0x5c>)
    594c:	f240 232e 	movw	r3, #558	; 0x22e
    5950:	f003 fbe9 	bl	9126 <assert_print>
    5954:	4805      	ldr	r0, [pc, #20]	; (596c <nrf_gpio_pin_port_decode+0x60>)
    5956:	f240 212e 	movw	r1, #558	; 0x22e
    595a:	f003 fbdd 	bl	9118 <assert_post_action>
    595e:	e7ed      	b.n	593c <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    5960:	4804      	ldr	r0, [pc, #16]	; (5974 <nrf_gpio_pin_port_decode+0x68>)
    5962:	e7ed      	b.n	5940 <nrf_gpio_pin_port_decode+0x34>
    5964:	0000b48f 	.word	0x0000b48f
    5968:	0000a092 	.word	0x0000a092
    596c:	0000b45c 	.word	0x0000b45c
    5970:	0000a1ea 	.word	0x0000a1ea
    5974:	50000300 	.word	0x50000300

00005978 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5978:	4a19      	ldr	r2, [pc, #100]	; (59e0 <release_handler+0x68>)
    597a:	3008      	adds	r0, #8
{
    597c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    597e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5982:	05d9      	lsls	r1, r3, #23
    5984:	d51d      	bpl.n	59c2 <release_handler+0x4a>
    5986:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    598a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    598e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5992:	f102 040e 	add.w	r4, r2, #14
    5996:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5998:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    599c:	f413 7f80 	tst.w	r3, #256	; 0x100
    59a0:	d003      	beq.n	59aa <release_handler+0x32>
    59a2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    59a6:	4299      	cmp	r1, r3
    59a8:	d00b      	beq.n	59c2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    59aa:	3001      	adds	r0, #1
    59ac:	2830      	cmp	r0, #48	; 0x30
    59ae:	d1f3      	bne.n	5998 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    59b0:	2300      	movs	r3, #0
    59b2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    59b6:	480b      	ldr	r0, [pc, #44]	; (59e4 <release_handler+0x6c>)
    59b8:	f7ff fdc8 	bl	554c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    59bc:	4b0a      	ldr	r3, [pc, #40]	; (59e8 <release_handler+0x70>)
    59be:	4298      	cmp	r0, r3
    59c0:	d100      	bne.n	59c4 <release_handler+0x4c>
}
    59c2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    59c4:	4909      	ldr	r1, [pc, #36]	; (59ec <release_handler+0x74>)
    59c6:	480a      	ldr	r0, [pc, #40]	; (59f0 <release_handler+0x78>)
    59c8:	4a0a      	ldr	r2, [pc, #40]	; (59f4 <release_handler+0x7c>)
    59ca:	f44f 7399 	mov.w	r3, #306	; 0x132
    59ce:	f003 fbaa 	bl	9126 <assert_print>
}
    59d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    59d6:	4807      	ldr	r0, [pc, #28]	; (59f4 <release_handler+0x7c>)
    59d8:	f44f 7199 	mov.w	r1, #306	; 0x132
    59dc:	f003 bb9c 	b.w	9118 <assert_post_action>
    59e0:	200000f4 	.word	0x200000f4
    59e4:	20000168 	.word	0x20000168
    59e8:	0bad0000 	.word	0x0bad0000
    59ec:	0000b633 	.word	0x0000b633
    59f0:	0000a092 	.word	0x0000a092
    59f4:	0000b5cf 	.word	0x0000b5cf

000059f8 <pin_handler_trigger_uninit>:
{
    59f8:	b538      	push	{r3, r4, r5, lr}
    59fa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    59fc:	f7ff ff48 	bl	5890 <pin_in_use_by_te>
    5a00:	4c09      	ldr	r4, [pc, #36]	; (5a28 <pin_handler_trigger_uninit+0x30>)
    5a02:	f102 0508 	add.w	r5, r2, #8
    5a06:	b140      	cbz	r0, 5a1a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a08:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5a0c:	4907      	ldr	r1, [pc, #28]	; (5a2c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5a0e:	0b5b      	lsrs	r3, r3, #13
    5a10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5a14:	2000      	movs	r0, #0
    5a16:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    5a1a:	4610      	mov	r0, r2
    5a1c:	f7ff ffac 	bl	5978 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5a20:	2300      	movs	r3, #0
    5a22:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5a26:	bd38      	pop	{r3, r4, r5, pc}
    5a28:	200000f4 	.word	0x200000f4
    5a2c:	40006000 	.word	0x40006000

00005a30 <nrfx_gpiote_input_configure>:
{
    5a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a32:	4604      	mov	r4, r0
    5a34:	b085      	sub	sp, #20
    5a36:	4617      	mov	r7, r2
    5a38:	461d      	mov	r5, r3
    if (p_input_config)
    5a3a:	b1d9      	cbz	r1, 5a74 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    5a3c:	f003 fec8 	bl	97d0 <pin_is_task_output>
    5a40:	bb00      	cbnz	r0, 5a84 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a42:	460b      	mov	r3, r1
    5a44:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a48:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5a4c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a50:	f10d 020f 	add.w	r2, sp, #15
    5a54:	f10d 010e 	add.w	r1, sp, #14
    5a58:	4620      	mov	r0, r4
    5a5a:	f003 fec4 	bl	97e6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5a5e:	4a43      	ldr	r2, [pc, #268]	; (5b6c <nrfx_gpiote_input_configure+0x13c>)
    5a60:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5a64:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5a68:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5a6c:	f043 0301 	orr.w	r3, r3, #1
    5a70:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    5a74:	b347      	cbz	r7, 5ac8 <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    5a76:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5a78:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5a7a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    5a7c:	f7ff ff1e 	bl	58bc <pin_is_output>
    5a80:	b110      	cbz	r0, 5a88 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    5a82:	b1b2      	cbz	r2, 5ab2 <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    5a84:	483a      	ldr	r0, [pc, #232]	; (5b70 <nrfx_gpiote_input_configure+0x140>)
    5a86:	e021      	b.n	5acc <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5a88:	4f38      	ldr	r7, [pc, #224]	; (5b6c <nrfx_gpiote_input_configure+0x13c>)
    5a8a:	f104 0c08 	add.w	ip, r4, #8
    5a8e:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    5a92:	f021 0120 	bic.w	r1, r1, #32
    5a96:	04c9      	lsls	r1, r1, #19
    5a98:	0cc9      	lsrs	r1, r1, #19
    5a9a:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    5a9e:	b142      	cbz	r2, 5ab2 <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    5aa0:	2e03      	cmp	r6, #3
    5aa2:	d8ef      	bhi.n	5a84 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5aa4:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5aa6:	b99e      	cbnz	r6, 5ad0 <nrfx_gpiote_input_configure+0xa0>
    5aa8:	4a32      	ldr	r2, [pc, #200]	; (5b74 <nrfx_gpiote_input_configure+0x144>)
    5aaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5aae:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5ab2:	4a2e      	ldr	r2, [pc, #184]	; (5b6c <nrfx_gpiote_input_configure+0x13c>)
    5ab4:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5ab8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5abc:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5ac0:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    5ac4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    5ac8:	bb3d      	cbnz	r5, 5b1a <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    5aca:	482b      	ldr	r0, [pc, #172]	; (5b78 <nrfx_gpiote_input_configure+0x148>)
}
    5acc:	b005      	add	sp, #20
    5ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5ad0:	009a      	lsls	r2, r3, #2
    5ad2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5ad6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5ada:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    5ade:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5ae2:	f020 0003 	bic.w	r0, r0, #3
    5ae6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5aea:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5aee:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5af2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5af6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5afa:	0220      	lsls	r0, r4, #8
    5afc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5b00:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5b04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    5b08:	ea40 000e 	orr.w	r0, r0, lr
    5b0c:	f041 0120 	orr.w	r1, r1, #32
    5b10:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    5b14:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5b18:	e7cb      	b.n	5ab2 <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5b1a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5b1e:	4620      	mov	r0, r4
    5b20:	f7ff ff2a 	bl	5978 <release_handler>
    if (!handler)
    5b24:	2e00      	cmp	r6, #0
    5b26:	d0d0      	beq.n	5aca <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b28:	4d10      	ldr	r5, [pc, #64]	; (5b6c <nrfx_gpiote_input_configure+0x13c>)
    5b2a:	e9d5 2300 	ldrd	r2, r3, [r5]
    5b2e:	4296      	cmp	r6, r2
    5b30:	d101      	bne.n	5b36 <nrfx_gpiote_input_configure+0x106>
    5b32:	429f      	cmp	r7, r3
    5b34:	d018      	beq.n	5b68 <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b36:	4811      	ldr	r0, [pc, #68]	; (5b7c <nrfx_gpiote_input_configure+0x14c>)
    5b38:	f10d 010f 	add.w	r1, sp, #15
    5b3c:	f7ff fce6 	bl	550c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b40:	4b0d      	ldr	r3, [pc, #52]	; (5b78 <nrfx_gpiote_input_configure+0x148>)
    5b42:	4298      	cmp	r0, r3
    5b44:	d1c2      	bne.n	5acc <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    5b46:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5b4a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5b4e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b52:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5b54:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b56:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5b5a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b62:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5b66:	e7b0      	b.n	5aca <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b68:	2200      	movs	r2, #0
    5b6a:	e7ee      	b.n	5b4a <nrfx_gpiote_input_configure+0x11a>
    5b6c:	200000f4 	.word	0x200000f4
    5b70:	0bad0004 	.word	0x0bad0004
    5b74:	40006000 	.word	0x40006000
    5b78:	0bad0000 	.word	0x0bad0000
    5b7c:	20000168 	.word	0x20000168

00005b80 <nrfx_gpiote_output_configure>:
{
    5b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b82:	4604      	mov	r4, r0
    5b84:	b085      	sub	sp, #20
    5b86:	4615      	mov	r5, r2
    if (p_config)
    5b88:	b321      	cbz	r1, 5bd4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    5b8a:	f7ff fe97 	bl	58bc <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5b8e:	b920      	cbnz	r0, 5b9a <nrfx_gpiote_output_configure+0x1a>
    5b90:	4620      	mov	r0, r4
    5b92:	f7ff fe7d 	bl	5890 <pin_in_use_by_te>
    5b96:	2800      	cmp	r0, #0
    5b98:	d15e      	bne.n	5c58 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5b9a:	4620      	mov	r0, r4
    5b9c:	f7ff fe82 	bl	58a4 <pin_has_trigger>
    5ba0:	b110      	cbz	r0, 5ba8 <nrfx_gpiote_output_configure+0x28>
    5ba2:	784b      	ldrb	r3, [r1, #1]
    5ba4:	2b01      	cmp	r3, #1
    5ba6:	d057      	beq.n	5c58 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5ba8:	2301      	movs	r3, #1
    5baa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5bae:	2300      	movs	r3, #0
    5bb0:	e9cd 1300 	strd	r1, r3, [sp]
    5bb4:	1c4a      	adds	r2, r1, #1
    5bb6:	1c8b      	adds	r3, r1, #2
    5bb8:	4620      	mov	r0, r4
    5bba:	f10d 010f 	add.w	r1, sp, #15
    5bbe:	f003 fe12 	bl	97e6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5bc2:	4a26      	ldr	r2, [pc, #152]	; (5c5c <nrfx_gpiote_output_configure+0xdc>)
    5bc4:	f104 0108 	add.w	r1, r4, #8
    5bc8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5bcc:	f043 0303 	orr.w	r3, r3, #3
    5bd0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5bd4:	b915      	cbnz	r5, 5bdc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    5bd6:	4822      	ldr	r0, [pc, #136]	; (5c60 <nrfx_gpiote_output_configure+0xe0>)
}
    5bd8:	b005      	add	sp, #20
    5bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    5bdc:	4620      	mov	r0, r4
    5bde:	f7ff fe6d 	bl	58bc <pin_is_output>
        if (pin_is_input(pin))
    5be2:	b3c8      	cbz	r0, 5c58 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5be4:	4e1d      	ldr	r6, [pc, #116]	; (5c5c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    5be6:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5bea:	f104 0708 	add.w	r7, r4, #8
    5bee:	4661      	mov	r1, ip
    5bf0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5bf4:	0089      	lsls	r1, r1, #2
    5bf6:	f020 0020 	bic.w	r0, r0, #32
    5bfa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5bfe:	04c0      	lsls	r0, r0, #19
    5c00:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5c04:	0cc0      	lsrs	r0, r0, #19
    5c06:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    5c0a:	2300      	movs	r3, #0
    5c0c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5c10:	786a      	ldrb	r2, [r5, #1]
    5c12:	2a00      	cmp	r2, #0
    5c14:	d0df      	beq.n	5bd6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c16:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5c1a:	78ad      	ldrb	r5, [r5, #2]
    5c1c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5c20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5c24:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c28:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5c2c:	0223      	lsls	r3, r4, #8
    5c2e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c32:	0412      	lsls	r2, r2, #16
    5c34:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c38:	ea43 030e 	orr.w	r3, r3, lr
    5c3c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c3e:	052a      	lsls	r2, r5, #20
    5c40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c44:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c48:	4313      	orrs	r3, r2
    5c4a:	f040 0020 	orr.w	r0, r0, #32
    5c4e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c52:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5c56:	e7be      	b.n	5bd6 <nrfx_gpiote_output_configure+0x56>
{
    5c58:	4802      	ldr	r0, [pc, #8]	; (5c64 <nrfx_gpiote_output_configure+0xe4>)
    5c5a:	e7bd      	b.n	5bd8 <nrfx_gpiote_output_configure+0x58>
    5c5c:	200000f4 	.word	0x200000f4
    5c60:	0bad0000 	.word	0x0bad0000
    5c64:	0bad0004 	.word	0x0bad0004

00005c68 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5c68:	4b01      	ldr	r3, [pc, #4]	; (5c70 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5c6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5c6e:	4770      	bx	lr
    5c70:	200000f4 	.word	0x200000f4

00005c74 <nrfx_gpiote_channel_get>:
{
    5c74:	b538      	push	{r3, r4, r5, lr}
    5c76:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5c78:	460d      	mov	r5, r1
    5c7a:	b959      	cbnz	r1, 5c94 <nrfx_gpiote_channel_get+0x20>
    5c7c:	490c      	ldr	r1, [pc, #48]	; (5cb0 <nrfx_gpiote_channel_get+0x3c>)
    5c7e:	480d      	ldr	r0, [pc, #52]	; (5cb4 <nrfx_gpiote_channel_get+0x40>)
    5c80:	4a0d      	ldr	r2, [pc, #52]	; (5cb8 <nrfx_gpiote_channel_get+0x44>)
    5c82:	f240 2335 	movw	r3, #565	; 0x235
    5c86:	f003 fa4e 	bl	9126 <assert_print>
    5c8a:	480b      	ldr	r0, [pc, #44]	; (5cb8 <nrfx_gpiote_channel_get+0x44>)
    5c8c:	f240 2135 	movw	r1, #565	; 0x235
    5c90:	f003 fa42 	bl	9118 <assert_post_action>
    if (pin_in_use_by_te(pin))
    5c94:	4620      	mov	r0, r4
    5c96:	f7ff fdfb 	bl	5890 <pin_in_use_by_te>
    5c9a:	b138      	cbz	r0, 5cac <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5c9c:	4b07      	ldr	r3, [pc, #28]	; (5cbc <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    5c9e:	4808      	ldr	r0, [pc, #32]	; (5cc0 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5ca0:	3408      	adds	r4, #8
    5ca2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5ca6:	0b5b      	lsrs	r3, r3, #13
    5ca8:	702b      	strb	r3, [r5, #0]
}
    5caa:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5cac:	4805      	ldr	r0, [pc, #20]	; (5cc4 <nrfx_gpiote_channel_get+0x50>)
    5cae:	e7fc      	b.n	5caa <nrfx_gpiote_channel_get+0x36>
    5cb0:	0000b647 	.word	0x0000b647
    5cb4:	0000a092 	.word	0x0000a092
    5cb8:	0000b5cf 	.word	0x0000b5cf
    5cbc:	200000f4 	.word	0x200000f4
    5cc0:	0bad0000 	.word	0x0bad0000
    5cc4:	0bad0004 	.word	0x0bad0004

00005cc8 <nrfx_gpiote_init>:
{
    5cc8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5cca:	4c0f      	ldr	r4, [pc, #60]	; (5d08 <nrfx_gpiote_init+0x40>)
    5ccc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5cd0:	b9bd      	cbnz	r5, 5d02 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5cd2:	2260      	movs	r2, #96	; 0x60
    5cd4:	4629      	mov	r1, r5
    5cd6:	f104 0010 	add.w	r0, r4, #16
    5cda:	f003 fb0e 	bl	92fa <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5cde:	2006      	movs	r0, #6
    5ce0:	f7fd fa0a 	bl	30f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ce4:	4b09      	ldr	r3, [pc, #36]	; (5d0c <nrfx_gpiote_init+0x44>)
    return err_code;
    5ce6:	480a      	ldr	r0, [pc, #40]	; (5d10 <nrfx_gpiote_init+0x48>)
    5ce8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5cec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5cf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5cf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5cf8:	2301      	movs	r3, #1
    5cfa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5cfe:	6763      	str	r3, [r4, #116]	; 0x74
}
    5d00:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5d02:	4804      	ldr	r0, [pc, #16]	; (5d14 <nrfx_gpiote_init+0x4c>)
    5d04:	e7fc      	b.n	5d00 <nrfx_gpiote_init+0x38>
    5d06:	bf00      	nop
    5d08:	200000f4 	.word	0x200000f4
    5d0c:	40006000 	.word	0x40006000
    5d10:	0bad0000 	.word	0x0bad0000
    5d14:	0bad0005 	.word	0x0bad0005

00005d18 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5d18:	4b03      	ldr	r3, [pc, #12]	; (5d28 <nrfx_gpiote_is_init+0x10>)
    5d1a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5d1e:	3800      	subs	r0, #0
    5d20:	bf18      	it	ne
    5d22:	2001      	movne	r0, #1
    5d24:	4770      	bx	lr
    5d26:	bf00      	nop
    5d28:	200000f4 	.word	0x200000f4

00005d2c <nrfx_gpiote_channel_free>:
{
    5d2c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5d2e:	4801      	ldr	r0, [pc, #4]	; (5d34 <nrfx_gpiote_channel_free+0x8>)
    5d30:	f7ff bc0c 	b.w	554c <nrfx_flag32_free>
    5d34:	20000164 	.word	0x20000164

00005d38 <nrfx_gpiote_channel_alloc>:
{
    5d38:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5d3a:	4801      	ldr	r0, [pc, #4]	; (5d40 <nrfx_gpiote_channel_alloc+0x8>)
    5d3c:	f7ff bbe6 	b.w	550c <nrfx_flag32_alloc>
    5d40:	20000164 	.word	0x20000164

00005d44 <nrfx_gpiote_trigger_enable>:
{
    5d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d46:	4604      	mov	r4, r0
    5d48:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5d4a:	f7ff fdab 	bl	58a4 <pin_has_trigger>
    5d4e:	b958      	cbnz	r0, 5d68 <nrfx_gpiote_trigger_enable+0x24>
    5d50:	492e      	ldr	r1, [pc, #184]	; (5e0c <nrfx_gpiote_trigger_enable+0xc8>)
    5d52:	482f      	ldr	r0, [pc, #188]	; (5e10 <nrfx_gpiote_trigger_enable+0xcc>)
    5d54:	4a2f      	ldr	r2, [pc, #188]	; (5e14 <nrfx_gpiote_trigger_enable+0xd0>)
    5d56:	f240 33df 	movw	r3, #991	; 0x3df
    5d5a:	f003 f9e4 	bl	9126 <assert_print>
    5d5e:	482d      	ldr	r0, [pc, #180]	; (5e14 <nrfx_gpiote_trigger_enable+0xd0>)
    5d60:	f240 31df 	movw	r1, #991	; 0x3df
    5d64:	f003 f9d8 	bl	9118 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d68:	4620      	mov	r0, r4
    5d6a:	f7ff fd91 	bl	5890 <pin_in_use_by_te>
    5d6e:	4e2a      	ldr	r6, [pc, #168]	; (5e18 <nrfx_gpiote_trigger_enable+0xd4>)
    5d70:	f104 0708 	add.w	r7, r4, #8
    5d74:	b1f8      	cbz	r0, 5db6 <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    5d76:	4620      	mov	r0, r4
    5d78:	f7ff fda0 	bl	58bc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d7c:	b9d8      	cbnz	r0, 5db6 <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5d7e:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    5d82:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5d84:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    5d86:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    5d8a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    5d8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5d92:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d96:	6008      	str	r0, [r1, #0]
    5d98:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5d9a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    5d9e:	f041 0101 	orr.w	r1, r1, #1
    5da2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    5da6:	b125      	cbz	r5, 5db2 <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5da8:	2301      	movs	r3, #1
    5daa:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    5dac:	4a1b      	ldr	r2, [pc, #108]	; (5e1c <nrfx_gpiote_trigger_enable+0xd8>)
    5dae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5db2:	b003      	add	sp, #12
    5db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5db6:	b95d      	cbnz	r5, 5dd0 <nrfx_gpiote_trigger_enable+0x8c>
    5db8:	4919      	ldr	r1, [pc, #100]	; (5e20 <nrfx_gpiote_trigger_enable+0xdc>)
    5dba:	4815      	ldr	r0, [pc, #84]	; (5e10 <nrfx_gpiote_trigger_enable+0xcc>)
    5dbc:	4a15      	ldr	r2, [pc, #84]	; (5e14 <nrfx_gpiote_trigger_enable+0xd0>)
    5dbe:	f240 33ee 	movw	r3, #1006	; 0x3ee
    5dc2:	f003 f9b0 	bl	9126 <assert_print>
    5dc6:	4813      	ldr	r0, [pc, #76]	; (5e14 <nrfx_gpiote_trigger_enable+0xd0>)
    5dc8:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5dcc:	f003 f9a4 	bl	9118 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5dd0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5dd4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5dd8:	2b04      	cmp	r3, #4
    5dda:	d012      	beq.n	5e02 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5ddc:	2b05      	cmp	r3, #5
    5dde:	d012      	beq.n	5e06 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5de0:	a801      	add	r0, sp, #4
    5de2:	9401      	str	r4, [sp, #4]
    5de4:	f7ff fd92 	bl	590c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5de8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5dea:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5dee:	40d9      	lsrs	r1, r3
    5df0:	f001 0101 	and.w	r1, r1, #1
    5df4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5df6:	4620      	mov	r0, r4
}
    5df8:	b003      	add	sp, #12
    5dfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5dfe:	f003 bd3f 	b.w	9880 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5e02:	2103      	movs	r1, #3
    5e04:	e7f7      	b.n	5df6 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5e06:	2102      	movs	r1, #2
    5e08:	e7f5      	b.n	5df6 <nrfx_gpiote_trigger_enable+0xb2>
    5e0a:	bf00      	nop
    5e0c:	0000b651 	.word	0x0000b651
    5e10:	0000a092 	.word	0x0000a092
    5e14:	0000b5cf 	.word	0x0000b5cf
    5e18:	200000f4 	.word	0x200000f4
    5e1c:	40006000 	.word	0x40006000
    5e20:	0000b666 	.word	0x0000b666

00005e24 <nrfx_gpiote_trigger_disable>:
{
    5e24:	b508      	push	{r3, lr}
    5e26:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e28:	f7ff fd32 	bl	5890 <pin_in_use_by_te>
    5e2c:	b1c8      	cbz	r0, 5e62 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    5e2e:	4610      	mov	r0, r2
    5e30:	f7ff fd44 	bl	58bc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e34:	b9a8      	cbnz	r0, 5e62 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e36:	3208      	adds	r2, #8
    5e38:	4b0d      	ldr	r3, [pc, #52]	; (5e70 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    5e3a:	490e      	ldr	r1, [pc, #56]	; (5e74 <nrfx_gpiote_trigger_disable+0x50>)
    5e3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5e40:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e42:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5e44:	409a      	lsls	r2, r3
    5e46:	009b      	lsls	r3, r3, #2
    5e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5e50:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5e54:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5e58:	f022 0203 	bic.w	r2, r2, #3
    5e5c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5e60:	bd08      	pop	{r3, pc}
    5e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5e66:	2100      	movs	r1, #0
    5e68:	4610      	mov	r0, r2
    5e6a:	f003 bd09 	b.w	9880 <nrf_gpio_cfg_sense_set>
    5e6e:	bf00      	nop
    5e70:	200000f4 	.word	0x200000f4
    5e74:	40006000 	.word	0x40006000

00005e78 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e78:	4b0e      	ldr	r3, [pc, #56]	; (5eb4 <nrfx_gpiote_pin_uninit+0x3c>)
    5e7a:	f100 0208 	add.w	r2, r0, #8
{
    5e7e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5e84:	07db      	lsls	r3, r3, #31
{
    5e86:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5e88:	d511      	bpl.n	5eae <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5e8a:	f7ff ffcb 	bl	5e24 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5e8e:	4620      	mov	r0, r4
    5e90:	f7ff fdb2 	bl	59f8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e94:	a801      	add	r0, sp, #4
    5e96:	9401      	str	r4, [sp, #4]
    5e98:	f7ff fd38 	bl	590c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5e9c:	9b01      	ldr	r3, [sp, #4]
    5e9e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5ea2:	2202      	movs	r2, #2
    5ea4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5ea8:	4803      	ldr	r0, [pc, #12]	; (5eb8 <nrfx_gpiote_pin_uninit+0x40>)
}
    5eaa:	b002      	add	sp, #8
    5eac:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5eae:	4803      	ldr	r0, [pc, #12]	; (5ebc <nrfx_gpiote_pin_uninit+0x44>)
    5eb0:	e7fb      	b.n	5eaa <nrfx_gpiote_pin_uninit+0x32>
    5eb2:	bf00      	nop
    5eb4:	200000f4 	.word	0x200000f4
    5eb8:	0bad0000 	.word	0x0bad0000
    5ebc:	0bad0004 	.word	0x0bad0004

00005ec0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ec4:	4b69      	ldr	r3, [pc, #420]	; (606c <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    5ec6:	486a      	ldr	r0, [pc, #424]	; (6070 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ec8:	496a      	ldr	r1, [pc, #424]	; (6074 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    5eca:	2600      	movs	r6, #0
{
    5ecc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5ece:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ed0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ed2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5ed4:	b135      	cbz	r5, 5ee4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5ed6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5eda:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5edc:	bf1e      	ittt	ne
    5ede:	601c      	strne	r4, [r3, #0]
    5ee0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5ee2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ee4:	3304      	adds	r3, #4
    5ee6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5ee8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5eec:	d1f1      	bne.n	5ed2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eee:	f8df 9180 	ldr.w	r9, [pc, #384]	; 6070 <nrfx_gpiote_irq_handler+0x1b0>
    5ef2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	f000 809b 	beq.w	6032 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    5efc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5f00:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5f04:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5f06:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5f0a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    5f0e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5f10:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5f14:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    5f18:	f10d 0a10 	add.w	sl, sp, #16
    5f1c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5f20:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5f22:	f04f 0b01 	mov.w	fp, #1
    5f26:	e04b      	b.n	5fc0 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    5f28:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f2a:	4a53      	ldr	r2, [pc, #332]	; (6078 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5f2c:	fa94 f4a4 	rbit	r4, r4
    5f30:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5f34:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5f36:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f38:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    5f3c:	f004 0107 	and.w	r1, r4, #7
    5f40:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5f44:	f81a 3000 	ldrb.w	r3, [sl, r0]
    5f48:	9403      	str	r4, [sp, #12]
    5f4a:	fa0b f101 	lsl.w	r1, fp, r1
    5f4e:	ea23 0301 	bic.w	r3, r3, r1
    5f52:	08ba      	lsrs	r2, r7, #2
    5f54:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f58:	a803      	add	r0, sp, #12
    5f5a:	9201      	str	r2, [sp, #4]
    5f5c:	f7ff fcd6 	bl	590c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f60:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    5f62:	9a01      	ldr	r2, [sp, #4]
    5f64:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f68:	f3c7 0582 	ubfx	r5, r7, #2, #3
    5f6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    5f70:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f72:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5f74:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    5f78:	d52c      	bpl.n	5fd4 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    5f7a:	4639      	mov	r1, r7
    5f7c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f7e:	b2dd      	uxtb	r5, r3
    5f80:	f7ff fca6 	bl	58d0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5f84:	a803      	add	r0, sp, #12
    5f86:	9403      	str	r4, [sp, #12]
    5f88:	f7ff fcc0 	bl	590c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f8c:	9b03      	ldr	r3, [sp, #12]
    5f8e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5f92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5f96:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5f9a:	429d      	cmp	r5, r3
    5f9c:	d107      	bne.n	5fae <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5f9e:	2100      	movs	r1, #0
    5fa0:	4620      	mov	r0, r4
    5fa2:	f003 fc6d 	bl	9880 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5fa6:	4629      	mov	r1, r5
    5fa8:	4620      	mov	r0, r4
    5faa:	f003 fc69 	bl	9880 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5fae:	a803      	add	r0, sp, #12
    5fb0:	9403      	str	r4, [sp, #12]
    5fb2:	f7ff fcab 	bl	590c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5fb6:	9b03      	ldr	r3, [sp, #12]
    5fb8:	fa0b f303 	lsl.w	r3, fp, r3
    5fbc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5fc0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    5fc4:	2c00      	cmp	r4, #0
    5fc6:	d1af      	bne.n	5f28 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5fc8:	f1b8 0f00 	cmp.w	r8, #0
    5fcc:	d11d      	bne.n	600a <nrfx_gpiote_irq_handler+0x14a>
    5fce:	f04f 0801 	mov.w	r8, #1
    5fd2:	e7a3      	b.n	5f1c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5fd4:	2b02      	cmp	r3, #2
    5fd6:	d10c      	bne.n	5ff2 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5fd8:	2103      	movs	r1, #3
    5fda:	4620      	mov	r0, r4
    5fdc:	f003 fc50 	bl	9880 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5fe0:	f005 0305 	and.w	r3, r5, #5
    5fe4:	2b01      	cmp	r3, #1
    5fe6:	d1e2      	bne.n	5fae <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    5fe8:	4639      	mov	r1, r7
    5fea:	4620      	mov	r0, r4
    5fec:	f7ff fc70 	bl	58d0 <call_handler>
    5ff0:	e7dd      	b.n	5fae <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5ff2:	2102      	movs	r1, #2
    5ff4:	4620      	mov	r0, r4
    5ff6:	9301      	str	r3, [sp, #4]
    5ff8:	f003 fc42 	bl	9880 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5ffc:	2d03      	cmp	r5, #3
    5ffe:	d0f3      	beq.n	5fe8 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6000:	9b01      	ldr	r3, [sp, #4]
    6002:	2b03      	cmp	r3, #3
    6004:	d1d3      	bne.n	5fae <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6006:	2d02      	cmp	r5, #2
    6008:	e7ed      	b.n	5fe6 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    600a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    600e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    6012:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6016:	4919      	ldr	r1, [pc, #100]	; (607c <nrfx_gpiote_irq_handler+0x1bc>)
    6018:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    601c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    601e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6022:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6026:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6028:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    602a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    602e:	f47f af71 	bne.w	5f14 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    6032:	2401      	movs	r4, #1
    while (mask)
    6034:	b916      	cbnz	r6, 603c <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6036:	b007      	add	sp, #28
    6038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    603c:	fa96 f3a6 	rbit	r3, r6
    6040:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6044:	fa04 f203 	lsl.w	r2, r4, r3
    6048:	009b      	lsls	r3, r3, #2
    604a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    604e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6052:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6056:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    605a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    605e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6062:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6066:	f7ff fc33 	bl	58d0 <call_handler>
    606a:	e7e3      	b.n	6034 <nrfx_gpiote_irq_handler+0x174>
    606c:	40006100 	.word	0x40006100
    6070:	40006000 	.word	0x40006000
    6074:	40006120 	.word	0x40006120
    6078:	200000f4 	.word	0x200000f4
    607c:	50000300 	.word	0x50000300

00006080 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6080:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6082:	4801      	ldr	r0, [pc, #4]	; (6088 <nrfx_ppi_channel_alloc+0x8>)
    6084:	f7ff ba42 	b.w	550c <nrfx_flag32_alloc>
    6088:	20000170 	.word	0x20000170

0000608c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    608c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    608e:	4c11      	ldr	r4, [pc, #68]	; (60d4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6090:	4a11      	ldr	r2, [pc, #68]	; (60d8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6092:	4912      	ldr	r1, [pc, #72]	; (60dc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6094:	2303      	movs	r3, #3
    6096:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6098:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    609a:	4b11      	ldr	r3, [pc, #68]	; (60e0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    609c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    609e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    60a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    60a4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    60a6:	2300      	movs	r3, #0
    60a8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    60aa:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    60ac:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    60ae:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    60b0:	4a0c      	ldr	r2, [pc, #48]	; (60e4 <_DoInit+0x58>)
    60b2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    60b4:	2210      	movs	r2, #16
    60b6:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    60b8:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    60ba:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    60bc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    60be:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    60c0:	f003 f8ea 	bl	9298 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    60c4:	4908      	ldr	r1, [pc, #32]	; (60e8 <_DoInit+0x5c>)
    60c6:	4620      	mov	r0, r4
    60c8:	f003 f8e6 	bl	9298 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    60cc:	2320      	movs	r3, #32
    60ce:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    60d0:	bd10      	pop	{r4, pc}
    60d2:	bf00      	nop
    60d4:	20000bcc 	.word	0x20000bcc
    60d8:	0000b671 	.word	0x0000b671
    60dc:	0000b67a 	.word	0x0000b67a
    60e0:	20000ec7 	.word	0x20000ec7
    60e4:	20000eb7 	.word	0x20000eb7
    60e8:	0000b67e 	.word	0x0000b67e

000060ec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    60ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    60f0:	4f21      	ldr	r7, [pc, #132]	; (6178 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    60f2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    60f6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    60f8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    60fc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    60fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6100:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6102:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6104:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6106:	d831      	bhi.n	616c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6108:	f8d2 a020 	ldr.w	sl, [r2, #32]
    610c:	ebaa 0905 	sub.w	r9, sl, r5
    6110:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6114:	4294      	cmp	r4, r2
    6116:	d811      	bhi.n	613c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6118:	2318      	movs	r3, #24
    611a:	fb06 3303 	mla	r3, r6, r3, r3
    611e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    6120:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6122:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    6124:	4641      	mov	r1, r8
    6126:	4428      	add	r0, r5
    6128:	f003 f8dc 	bl	92e4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    612c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    612e:	2318      	movs	r3, #24
    6130:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    6134:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    6136:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    613c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    613e:	429c      	cmp	r4, r3
    6140:	d818      	bhi.n	6174 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6142:	fb00 bb0b 	mla	fp, r0, fp, fp
    6146:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6148:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    614a:	f8db 0004 	ldr.w	r0, [fp, #4]
    614e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6150:	4428      	add	r0, r5
    6152:	f003 f8c7 	bl	92e4 <memcpy>
      if (NumBytes) {
    6156:	ebb4 040a 	subs.w	r4, r4, sl
    615a:	d0e8      	beq.n	612e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    615c:	f8db 0004 	ldr.w	r0, [fp, #4]
    6160:	4622      	mov	r2, r4
    6162:	eb08 0109 	add.w	r1, r8, r9
    6166:	f003 f8bd 	bl	92e4 <memcpy>
      return 1;
    616a:	e7e0      	b.n	612e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    616c:	3b01      	subs	r3, #1
    616e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6170:	42a3      	cmp	r3, r4
    6172:	d2d1      	bcs.n	6118 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6174:	2000      	movs	r0, #0
    6176:	e7df      	b.n	6138 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6178:	20000bcc 	.word	0x20000bcc

0000617c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    617c:	4b03      	ldr	r3, [pc, #12]	; (618c <SEGGER_RTT_HasDataUp+0x10>)
    617e:	2218      	movs	r2, #24
    6180:	fb02 3300 	mla	r3, r2, r0, r3
    6184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    6186:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6188:	1a80      	subs	r0, r0, r2
    618a:	4770      	bx	lr
    618c:	20000bcc 	.word	0x20000bcc

00006190 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6190:	4b0e      	ldr	r3, [pc, #56]	; (61cc <z_sys_init_run_level+0x3c>)
{
    6192:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6194:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6198:	3001      	adds	r0, #1
    619a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    619e:	42a6      	cmp	r6, r4
    61a0:	d800      	bhi.n	61a4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    61a2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    61a4:	e9d4 3500 	ldrd	r3, r5, [r4]
    61a8:	4628      	mov	r0, r5
    61aa:	4798      	blx	r3
		if (dev != NULL) {
    61ac:	b165      	cbz	r5, 61c8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    61ae:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    61b0:	b130      	cbz	r0, 61c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    61b2:	2800      	cmp	r0, #0
    61b4:	bfb8      	it	lt
    61b6:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    61b8:	28ff      	cmp	r0, #255	; 0xff
    61ba:	bfa8      	it	ge
    61bc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    61be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    61c0:	785a      	ldrb	r2, [r3, #1]
    61c2:	f042 0201 	orr.w	r2, r2, #1
    61c6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    61c8:	3408      	adds	r4, #8
    61ca:	e7e8      	b.n	619e <z_sys_init_run_level+0xe>
    61cc:	00009f6c 	.word	0x00009f6c

000061d0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    61d0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    61d2:	4605      	mov	r5, r0
    61d4:	b910      	cbnz	r0, 61dc <z_impl_device_get_binding+0xc>
		return NULL;
    61d6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    61d8:	4620      	mov	r0, r4
    61da:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    61dc:	7803      	ldrb	r3, [r0, #0]
    61de:	2b00      	cmp	r3, #0
    61e0:	d0f9      	beq.n	61d6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    61e2:	4c0e      	ldr	r4, [pc, #56]	; (621c <z_impl_device_get_binding+0x4c>)
    61e4:	4e0e      	ldr	r6, [pc, #56]	; (6220 <z_impl_device_get_binding+0x50>)
    61e6:	42b4      	cmp	r4, r6
    61e8:	d108      	bne.n	61fc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    61ea:	4c0c      	ldr	r4, [pc, #48]	; (621c <z_impl_device_get_binding+0x4c>)
    61ec:	42b4      	cmp	r4, r6
    61ee:	d0f2      	beq.n	61d6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    61f0:	4620      	mov	r0, r4
    61f2:	f003 fb5c 	bl	98ae <z_device_is_ready>
    61f6:	b950      	cbnz	r0, 620e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    61f8:	3418      	adds	r4, #24
    61fa:	e7f7      	b.n	61ec <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    61fc:	4620      	mov	r0, r4
    61fe:	f003 fb56 	bl	98ae <z_device_is_ready>
    6202:	b110      	cbz	r0, 620a <z_impl_device_get_binding+0x3a>
    6204:	6823      	ldr	r3, [r4, #0]
    6206:	42ab      	cmp	r3, r5
    6208:	d0e6      	beq.n	61d8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    620a:	3418      	adds	r4, #24
    620c:	e7eb      	b.n	61e6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    620e:	6821      	ldr	r1, [r4, #0]
    6210:	4628      	mov	r0, r5
    6212:	f003 f85b 	bl	92cc <strcmp>
    6216:	2800      	cmp	r0, #0
    6218:	d1ee      	bne.n	61f8 <z_impl_device_get_binding+0x28>
    621a:	e7dd      	b.n	61d8 <z_impl_device_get_binding+0x8>
    621c:	00009a9c 	.word	0x00009a9c
    6220:	00009b2c 	.word	0x00009b2c

00006224 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6228:	4605      	mov	r5, r0
    622a:	b086      	sub	sp, #24
    622c:	460f      	mov	r7, r1
	__asm__ volatile(
    622e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6232:	f3ef 8811 	mrs	r8, BASEPRI
    6236:	f383 8812 	msr	BASEPRI_MAX, r3
    623a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    623e:	f001 feed 	bl	801c <z_impl_z_current_get>
    6242:	2d04      	cmp	r5, #4
    6244:	bf96      	itet	ls
    6246:	4b29      	ldrls	r3, [pc, #164]	; (62ec <z_fatal_error+0xc8>)
    6248:	4b29      	ldrhi	r3, [pc, #164]	; (62f0 <z_fatal_error+0xcc>)
    624a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    624e:	4929      	ldr	r1, [pc, #164]	; (62f4 <z_fatal_error+0xd0>)
    6250:	9503      	str	r5, [sp, #12]
    6252:	2400      	movs	r4, #0
    6254:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6258:	4b27      	ldr	r3, [pc, #156]	; (62f8 <z_fatal_error+0xd4>)
    625a:	9400      	str	r4, [sp, #0]
    625c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6260:	4606      	mov	r6, r0
    6262:	4623      	mov	r3, r4
    6264:	2201      	movs	r2, #1
    6266:	4620      	mov	r0, r4
    6268:	f003 fb2b 	bl	98c2 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    626c:	b16f      	cbz	r7, 628a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    626e:	69fb      	ldr	r3, [r7, #28]
    6270:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6274:	b14b      	cbz	r3, 628a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    6276:	4b21      	ldr	r3, [pc, #132]	; (62fc <z_fatal_error+0xd8>)
    6278:	491e      	ldr	r1, [pc, #120]	; (62f4 <z_fatal_error+0xd0>)
    627a:	9400      	str	r4, [sp, #0]
    627c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6280:	2201      	movs	r2, #1
    6282:	4623      	mov	r3, r4
    6284:	4620      	mov	r0, r4
    6286:	f003 fb1c 	bl	98c2 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    628a:	b12e      	cbz	r6, 6298 <z_fatal_error+0x74>
    628c:	4630      	mov	r0, r6
    628e:	f003 fb4e 	bl	992e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6292:	b108      	cbz	r0, 6298 <z_fatal_error+0x74>
    6294:	7803      	ldrb	r3, [r0, #0]
    6296:	b903      	cbnz	r3, 629a <z_fatal_error+0x76>
		thread_name = "unknown";
    6298:	4819      	ldr	r0, [pc, #100]	; (6300 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    629a:	4b1a      	ldr	r3, [pc, #104]	; (6304 <z_fatal_error+0xe0>)
    629c:	9302      	str	r3, [sp, #8]
    629e:	2300      	movs	r3, #0
    62a0:	e9cd 6003 	strd	r6, r0, [sp, #12]
    62a4:	e9cd 3300 	strd	r3, r3, [sp]
    62a8:	4618      	mov	r0, r3
    62aa:	4912      	ldr	r1, [pc, #72]	; (62f4 <z_fatal_error+0xd0>)
    62ac:	2201      	movs	r2, #1
    62ae:	f003 fb08 	bl	98c2 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    62b2:	4639      	mov	r1, r7
    62b4:	4628      	mov	r0, r5
    62b6:	f7ff f815 	bl	52e4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    62ba:	2d04      	cmp	r5, #4
    62bc:	d10c      	bne.n	62d8 <z_fatal_error+0xb4>
    62be:	4912      	ldr	r1, [pc, #72]	; (6308 <z_fatal_error+0xe4>)
    62c0:	4a12      	ldr	r2, [pc, #72]	; (630c <z_fatal_error+0xe8>)
    62c2:	4813      	ldr	r0, [pc, #76]	; (6310 <z_fatal_error+0xec>)
    62c4:	238f      	movs	r3, #143	; 0x8f
    62c6:	f002 ff2e 	bl	9126 <assert_print>
    62ca:	4812      	ldr	r0, [pc, #72]	; (6314 <z_fatal_error+0xf0>)
    62cc:	f002 ff2b 	bl	9126 <assert_print>
    62d0:	480e      	ldr	r0, [pc, #56]	; (630c <z_fatal_error+0xe8>)
    62d2:	218f      	movs	r1, #143	; 0x8f
    62d4:	f002 ff20 	bl	9118 <assert_post_action>
	__asm__ volatile(
    62d8:	f388 8811 	msr	BASEPRI, r8
    62dc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    62e0:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    62e2:	b006      	add	sp, #24
    62e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62e8:	f7fd bbc8 	b.w	3a7c <z_impl_k_thread_abort>
    62ec:	00009f84 	.word	0x00009f84
    62f0:	0000b685 	.word	0x0000b685
    62f4:	00009cdc 	.word	0x00009cdc
    62f8:	0000b69b 	.word	0x0000b69b
    62fc:	0000b6c3 	.word	0x0000b6c3
    6300:	0000b693 	.word	0x0000b693
    6304:	0000b6e4 	.word	0x0000b6e4
    6308:	0000b71e 	.word	0x0000b71e
    630c:	0000b6fc 	.word	0x0000b6fc
    6310:	0000a092 	.word	0x0000a092
    6314:	0000b73b 	.word	0x0000b73b

00006318 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    6318:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    631a:	4b0a      	ldr	r3, [pc, #40]	; (6344 <bg_thread_main+0x2c>)
    631c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    631e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6320:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6322:	f7ff ff35 	bl	6190 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    6326:	f002 fba5 	bl	8a74 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    632a:	2003      	movs	r0, #3
    632c:	f7ff ff30 	bl	6190 <z_sys_init_run_level>

	z_init_static_threads();
    6330:	f000 fa7e 	bl	6830 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    6334:	f7fa fcce 	bl	cd4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6338:	4a03      	ldr	r2, [pc, #12]	; (6348 <bg_thread_main+0x30>)
    633a:	7b13      	ldrb	r3, [r2, #12]
    633c:	f023 0301 	bic.w	r3, r3, #1
    6340:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6342:	bd08      	pop	{r3, pc}
    6344:	200012c7 	.word	0x200012c7
    6348:	200004b8 	.word	0x200004b8

0000634c <z_bss_zero>:
{
    634c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    634e:	4803      	ldr	r0, [pc, #12]	; (635c <z_bss_zero+0x10>)
    6350:	4a03      	ldr	r2, [pc, #12]	; (6360 <z_bss_zero+0x14>)
    6352:	2100      	movs	r1, #0
    6354:	1a12      	subs	r2, r2, r0
    6356:	f003 fac4 	bl	98e2 <z_early_memset>
}
    635a:	bd08      	pop	{r3, pc}
    635c:	20000260 	.word	0x20000260
    6360:	200012c8 	.word	0x200012c8

00006364 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    6364:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    6366:	2300      	movs	r3, #0
{
    6368:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    636a:	2201      	movs	r2, #1
    636c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    6370:	4e13      	ldr	r6, [pc, #76]	; (63c0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6372:	4d14      	ldr	r5, [pc, #80]	; (63c4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    6374:	9301      	str	r3, [sp, #4]
    6376:	220f      	movs	r2, #15
    6378:	e9cd 3202 	strd	r3, r2, [sp, #8]
    637c:	4912      	ldr	r1, [pc, #72]	; (63c8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    637e:	2318      	movs	r3, #24
    6380:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    6384:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    6388:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    638a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    638e:	fb00 1104 	mla	r1, r0, r4, r1
    6392:	4b0e      	ldr	r3, [pc, #56]	; (63cc <z_init_cpu+0x68>)
    6394:	9500      	str	r5, [sp, #0]
    6396:	f44f 72a0 	mov.w	r2, #320	; 0x140
    639a:	4630      	mov	r0, r6
    639c:	f000 f994 	bl	66c8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    63a0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    63a2:	4a0b      	ldr	r2, [pc, #44]	; (63d0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    63a4:	60ee      	str	r6, [r5, #12]
    63a6:	f023 0304 	bic.w	r3, r3, #4
    63aa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    63ac:	f44f 6302 	mov.w	r3, #2080	; 0x820
    63b0:	fb04 3303 	mla	r3, r4, r3, r3
    63b4:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    63b6:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    63b8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    63ba:	b006      	add	sp, #24
    63bc:	bd70      	pop	{r4, r5, r6, pc}
    63be:	bf00      	nop
    63c0:	20000438 	.word	0x20000438
    63c4:	20000c74 	.word	0x20000c74
    63c8:	20002760 	.word	0x20002760
    63cc:	0000698d 	.word	0x0000698d
    63d0:	20001f40 	.word	0x20001f40

000063d4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    63d4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    63d6:	4b30      	ldr	r3, [pc, #192]	; (6498 <z_cstart+0xc4>)
    63d8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    63da:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    63de:	4d2f      	ldr	r5, [pc, #188]	; (649c <z_cstart+0xc8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    63e0:	4e2f      	ldr	r6, [pc, #188]	; (64a0 <z_cstart+0xcc>)
    63e2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    63e4:	4f2f      	ldr	r7, [pc, #188]	; (64a4 <z_cstart+0xd0>)
    63e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    63ea:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    63ec:	23e0      	movs	r3, #224	; 0xe0
    63ee:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    63f2:	2400      	movs	r4, #0
    63f4:	2320      	movs	r3, #32
    63f6:	77eb      	strb	r3, [r5, #31]
    63f8:	762c      	strb	r4, [r5, #24]
    63fa:	766c      	strb	r4, [r5, #25]
    63fc:	76ac      	strb	r4, [r5, #26]
    63fe:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6404:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6408:	626b      	str	r3, [r5, #36]	; 0x24
    640a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    640e:	f7fd faa9 	bl	3964 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6412:	f7fc fe03 	bl	301c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    641a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    641c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    641e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6420:	f7fd fc2a 	bl	3c78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6424:	f7fd fb40 	bl	3aa8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6428:	f7fb ffd4 	bl	23d4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    642c:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    6430:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    6432:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6436:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    643a:	f002 fb15 	bl	8a68 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    643e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6440:	f003 fa34 	bl	98ac <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6444:	4620      	mov	r0, r4
    6446:	f7ff fea3 	bl	6190 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    644a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    644c:	4d16      	ldr	r5, [pc, #88]	; (64a8 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    644e:	f7ff fe9f 	bl	6190 <z_sys_init_run_level>
	z_sched_init();
    6452:	f001 fc59 	bl	7d08 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6456:	4b15      	ldr	r3, [pc, #84]	; (64ac <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    6458:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    645a:	9305      	str	r3, [sp, #20]
    645c:	2301      	movs	r3, #1
    645e:	4914      	ldr	r1, [pc, #80]	; (64b0 <z_cstart+0xdc>)
    6460:	9400      	str	r4, [sp, #0]
    6462:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6466:	f44f 6280 	mov.w	r2, #1024	; 0x400
    646a:	463b      	mov	r3, r7
    646c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6470:	4628      	mov	r0, r5
    6472:	f000 f929 	bl	66c8 <z_setup_new_thread>
    6476:	7b6a      	ldrb	r2, [r5, #13]
    6478:	4606      	mov	r6, r0
    647a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    647e:	4628      	mov	r0, r5
    6480:	736a      	strb	r2, [r5, #13]
    6482:	f000 fe39 	bl	70f8 <z_ready_thread>
	z_init_cpu(0);
    6486:	4620      	mov	r0, r4
    6488:	f7ff ff6c 	bl	6364 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    648c:	463a      	mov	r2, r7
    648e:	4631      	mov	r1, r6
    6490:	4628      	mov	r0, r5
    6492:	f7fc ff2b 	bl	32ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6496:	bf00      	nop
    6498:	20002760 	.word	0x20002760
    649c:	e000ed00 	.word	0xe000ed00
    64a0:	20000c74 	.word	0x20000c74
    64a4:	00006319 	.word	0x00006319
    64a8:	200004b8 	.word	0x200004b8
    64ac:	0000b7ba 	.word	0x0000b7ba
    64b0:	200028c0 	.word	0x200028c0

000064b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    64b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    64b6:	4c16      	ldr	r4, [pc, #88]	; (6510 <init_mem_slab_module+0x5c>)
    64b8:	4d16      	ldr	r5, [pc, #88]	; (6514 <init_mem_slab_module+0x60>)
    64ba:	4e17      	ldr	r6, [pc, #92]	; (6518 <init_mem_slab_module+0x64>)
    64bc:	42ac      	cmp	r4, r5
    64be:	d90c      	bls.n	64da <init_mem_slab_module+0x26>
    64c0:	4916      	ldr	r1, [pc, #88]	; (651c <init_mem_slab_module+0x68>)
    64c2:	4817      	ldr	r0, [pc, #92]	; (6520 <init_mem_slab_module+0x6c>)
    64c4:	233d      	movs	r3, #61	; 0x3d
    64c6:	4632      	mov	r2, r6
    64c8:	f002 fe2d 	bl	9126 <assert_print>
    64cc:	4815      	ldr	r0, [pc, #84]	; (6524 <init_mem_slab_module+0x70>)
    64ce:	f002 fe2a 	bl	9126 <assert_print>
    64d2:	213d      	movs	r1, #61	; 0x3d
    64d4:	4630      	mov	r0, r6
    64d6:	f002 fe1f 	bl	9118 <assert_post_action>
    64da:	42ac      	cmp	r4, r5
    64dc:	d301      	bcc.n	64e2 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    64de:	2000      	movs	r0, #0
	return rc;
}
    64e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    64e2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    64e6:	ea42 0301 	orr.w	r3, r2, r1
    64ea:	f013 0303 	ands.w	r3, r3, #3
    64ee:	d10b      	bne.n	6508 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    64f0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    64f2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    64f4:	4283      	cmp	r3, r0
    64f6:	d101      	bne.n	64fc <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    64f8:	3420      	adds	r4, #32
    64fa:	e7df      	b.n	64bc <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    64fc:	69a7      	ldr	r7, [r4, #24]
    64fe:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6500:	3301      	adds	r3, #1
		slab->free_list = p;
    6502:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    6504:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6506:	e7f5      	b.n	64f4 <init_mem_slab_module+0x40>
	return rc;
    6508:	f06f 0015 	mvn.w	r0, #21
    650c:	e7e8      	b.n	64e0 <init_mem_slab_module+0x2c>
    650e:	bf00      	nop
    6510:	200001f4 	.word	0x200001f4
    6514:	200001f4 	.word	0x200001f4
    6518:	0000b7c2 	.word	0x0000b7c2
    651c:	0000b7e7 	.word	0x0000b7e7
    6520:	0000a092 	.word	0x0000a092
    6524:	0000b804 	.word	0x0000b804

00006528 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    652c:	4604      	mov	r4, r0
    652e:	460e      	mov	r6, r1
    6530:	4690      	mov	r8, r2
    6532:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6534:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6538:	f04f 0340 	mov.w	r3, #64	; 0x40
    653c:	f3ef 8911 	mrs	r9, BASEPRI
    6540:	f383 8812 	msr	BASEPRI_MAX, r3
    6544:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6548:	4628      	mov	r0, r5
    654a:	f000 f9f9 	bl	6940 <z_spin_lock_valid>
    654e:	b968      	cbnz	r0, 656c <k_mem_slab_alloc+0x44>
    6550:	4a24      	ldr	r2, [pc, #144]	; (65e4 <k_mem_slab_alloc+0xbc>)
    6552:	4925      	ldr	r1, [pc, #148]	; (65e8 <k_mem_slab_alloc+0xc0>)
    6554:	4825      	ldr	r0, [pc, #148]	; (65ec <k_mem_slab_alloc+0xc4>)
    6556:	238e      	movs	r3, #142	; 0x8e
    6558:	f002 fde5 	bl	9126 <assert_print>
    655c:	4824      	ldr	r0, [pc, #144]	; (65f0 <k_mem_slab_alloc+0xc8>)
    655e:	4629      	mov	r1, r5
    6560:	f002 fde1 	bl	9126 <assert_print>
    6564:	481f      	ldr	r0, [pc, #124]	; (65e4 <k_mem_slab_alloc+0xbc>)
    6566:	218e      	movs	r1, #142	; 0x8e
    6568:	f002 fdd6 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    656c:	4628      	mov	r0, r5
    656e:	f000 fa05 	bl	697c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6572:	69a3      	ldr	r3, [r4, #24]
    6574:	b1eb      	cbz	r3, 65b2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    6576:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    657c:	69e3      	ldr	r3, [r4, #28]
    657e:	3301      	adds	r3, #1
    6580:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6582:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6584:	4628      	mov	r0, r5
    6586:	f000 f9e9 	bl	695c <z_spin_unlock_valid>
    658a:	b968      	cbnz	r0, 65a8 <k_mem_slab_alloc+0x80>
    658c:	4a15      	ldr	r2, [pc, #84]	; (65e4 <k_mem_slab_alloc+0xbc>)
    658e:	4919      	ldr	r1, [pc, #100]	; (65f4 <k_mem_slab_alloc+0xcc>)
    6590:	4816      	ldr	r0, [pc, #88]	; (65ec <k_mem_slab_alloc+0xc4>)
    6592:	23b9      	movs	r3, #185	; 0xb9
    6594:	f002 fdc7 	bl	9126 <assert_print>
    6598:	4817      	ldr	r0, [pc, #92]	; (65f8 <k_mem_slab_alloc+0xd0>)
    659a:	4629      	mov	r1, r5
    659c:	f002 fdc3 	bl	9126 <assert_print>
    65a0:	4810      	ldr	r0, [pc, #64]	; (65e4 <k_mem_slab_alloc+0xbc>)
    65a2:	21b9      	movs	r1, #185	; 0xb9
    65a4:	f002 fdb8 	bl	9118 <assert_post_action>
	__asm__ volatile(
    65a8:	f389 8811 	msr	BASEPRI, r9
    65ac:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    65b0:	e013      	b.n	65da <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    65b2:	ea58 0207 	orrs.w	r2, r8, r7
    65b6:	d103      	bne.n	65c0 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    65b8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    65ba:	f06f 040b 	mvn.w	r4, #11
    65be:	e7e1      	b.n	6584 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    65c0:	4622      	mov	r2, r4
    65c2:	e9cd 8700 	strd	r8, r7, [sp]
    65c6:	4649      	mov	r1, r9
    65c8:	4628      	mov	r0, r5
    65ca:	f001 f951 	bl	7870 <z_pend_curr>
		if (result == 0) {
    65ce:	4604      	mov	r4, r0
    65d0:	b918      	cbnz	r0, 65da <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    65d2:	4b0a      	ldr	r3, [pc, #40]	; (65fc <k_mem_slab_alloc+0xd4>)
    65d4:	689b      	ldr	r3, [r3, #8]
    65d6:	695b      	ldr	r3, [r3, #20]
    65d8:	6033      	str	r3, [r6, #0]
}
    65da:	4620      	mov	r0, r4
    65dc:	b003      	add	sp, #12
    65de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65e2:	bf00      	nop
    65e4:	0000a587 	.word	0x0000a587
    65e8:	0000a5e0 	.word	0x0000a5e0
    65ec:	0000a092 	.word	0x0000a092
    65f0:	0000a5f5 	.word	0x0000a5f5
    65f4:	0000a5b4 	.word	0x0000a5b4
    65f8:	0000a5cb 	.word	0x0000a5cb
    65fc:	20000c74 	.word	0x20000c74

00006600 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6604:	4604      	mov	r4, r0
    6606:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6608:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    660c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6610:	f3ef 8711 	mrs	r7, BASEPRI
    6614:	f383 8812 	msr	BASEPRI_MAX, r3
    6618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    661c:	4628      	mov	r0, r5
    661e:	f000 f98f 	bl	6940 <z_spin_lock_valid>
    6622:	b968      	cbnz	r0, 6640 <k_mem_slab_free+0x40>
    6624:	4a22      	ldr	r2, [pc, #136]	; (66b0 <k_mem_slab_free+0xb0>)
    6626:	4923      	ldr	r1, [pc, #140]	; (66b4 <k_mem_slab_free+0xb4>)
    6628:	4823      	ldr	r0, [pc, #140]	; (66b8 <k_mem_slab_free+0xb8>)
    662a:	238e      	movs	r3, #142	; 0x8e
    662c:	f002 fd7b 	bl	9126 <assert_print>
    6630:	4822      	ldr	r0, [pc, #136]	; (66bc <k_mem_slab_free+0xbc>)
    6632:	4629      	mov	r1, r5
    6634:	f002 fd77 	bl	9126 <assert_print>
    6638:	481d      	ldr	r0, [pc, #116]	; (66b0 <k_mem_slab_free+0xb0>)
    663a:	218e      	movs	r1, #142	; 0x8e
    663c:	f002 fd6c 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6640:	4628      	mov	r0, r5
    6642:	f000 f99b 	bl	697c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6646:	f8d4 8018 	ldr.w	r8, [r4, #24]
    664a:	f1b8 0f00 	cmp.w	r8, #0
    664e:	d10f      	bne.n	6670 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6650:	4620      	mov	r0, r4
    6652:	f001 fb07 	bl	7c64 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6656:	b158      	cbz	r0, 6670 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6658:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    665a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    665c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6660:	f000 fd4a 	bl	70f8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6664:	4639      	mov	r1, r7
    6666:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    666c:	f000 bdd4 	b.w	7218 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6670:	6833      	ldr	r3, [r6, #0]
    6672:	69a2      	ldr	r2, [r4, #24]
    6674:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6676:	6833      	ldr	r3, [r6, #0]
    6678:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    667a:	69e3      	ldr	r3, [r4, #28]
    667c:	3b01      	subs	r3, #1
    667e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6680:	4628      	mov	r0, r5
    6682:	f000 f96b 	bl	695c <z_spin_unlock_valid>
    6686:	b968      	cbnz	r0, 66a4 <k_mem_slab_free+0xa4>
    6688:	4a09      	ldr	r2, [pc, #36]	; (66b0 <k_mem_slab_free+0xb0>)
    668a:	490d      	ldr	r1, [pc, #52]	; (66c0 <k_mem_slab_free+0xc0>)
    668c:	480a      	ldr	r0, [pc, #40]	; (66b8 <k_mem_slab_free+0xb8>)
    668e:	23b9      	movs	r3, #185	; 0xb9
    6690:	f002 fd49 	bl	9126 <assert_print>
    6694:	480b      	ldr	r0, [pc, #44]	; (66c4 <k_mem_slab_free+0xc4>)
    6696:	4629      	mov	r1, r5
    6698:	f002 fd45 	bl	9126 <assert_print>
    669c:	4804      	ldr	r0, [pc, #16]	; (66b0 <k_mem_slab_free+0xb0>)
    669e:	21b9      	movs	r1, #185	; 0xb9
    66a0:	f002 fd3a 	bl	9118 <assert_post_action>
	__asm__ volatile(
    66a4:	f387 8811 	msr	BASEPRI, r7
    66a8:	f3bf 8f6f 	isb	sy
}
    66ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66b0:	0000a587 	.word	0x0000a587
    66b4:	0000a5e0 	.word	0x0000a5e0
    66b8:	0000a092 	.word	0x0000a092
    66bc:	0000a5f5 	.word	0x0000a5f5
    66c0:	0000a5b4 	.word	0x0000a5b4
    66c4:	0000a5cb 	.word	0x0000a5cb

000066c8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    66c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66cc:	b085      	sub	sp, #20
    66ce:	4604      	mov	r4, r0
    66d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    66d4:	f1b8 0f0f 	cmp.w	r8, #15
{
    66d8:	460f      	mov	r7, r1
    66da:	4615      	mov	r5, r2
    66dc:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    66de:	d132      	bne.n	6746 <z_setup_new_thread+0x7e>
    66e0:	4b25      	ldr	r3, [pc, #148]	; (6778 <z_setup_new_thread+0xb0>)
    66e2:	4599      	cmp	r9, r3
    66e4:	d133      	bne.n	674e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    66e6:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    66ea:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    66ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    66f0:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    66f2:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    66f4:	2304      	movs	r3, #4
    66f6:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    66f8:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    66fc:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6700:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    6704:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6706:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6708:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    670c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6710:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6712:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6714:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6716:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    671a:	9302      	str	r3, [sp, #8]
    671c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    671e:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    6720:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6724:	9300      	str	r3, [sp, #0]
    6726:	4642      	mov	r2, r8
    6728:	464b      	mov	r3, r9
    672a:	4639      	mov	r1, r7
    672c:	4620      	mov	r0, r4
    672e:	f7fc fdab 	bl	3288 <arch_new_thread>
	if (!_current) {
    6732:	4b12      	ldr	r3, [pc, #72]	; (677c <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6734:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6736:	689b      	ldr	r3, [r3, #8]
    6738:	b103      	cbz	r3, 673c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    673c:	6723      	str	r3, [r4, #112]	; 0x70
}
    673e:	4640      	mov	r0, r8
    6740:	b005      	add	sp, #20
    6742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6746:	f108 0310 	add.w	r3, r8, #16
    674a:	2b1e      	cmp	r3, #30
    674c:	d9cb      	bls.n	66e6 <z_setup_new_thread+0x1e>
    674e:	4a0c      	ldr	r2, [pc, #48]	; (6780 <z_setup_new_thread+0xb8>)
    6750:	490c      	ldr	r1, [pc, #48]	; (6784 <z_setup_new_thread+0xbc>)
    6752:	480d      	ldr	r0, [pc, #52]	; (6788 <z_setup_new_thread+0xc0>)
    6754:	f240 13ff 	movw	r3, #511	; 0x1ff
    6758:	f002 fce5 	bl	9126 <assert_print>
    675c:	4641      	mov	r1, r8
    675e:	480b      	ldr	r0, [pc, #44]	; (678c <z_setup_new_thread+0xc4>)
    6760:	f06f 030f 	mvn.w	r3, #15
    6764:	220e      	movs	r2, #14
    6766:	f002 fcde 	bl	9126 <assert_print>
    676a:	4805      	ldr	r0, [pc, #20]	; (6780 <z_setup_new_thread+0xb8>)
    676c:	f240 11ff 	movw	r1, #511	; 0x1ff
    6770:	f002 fcd2 	bl	9118 <assert_post_action>
    6774:	e7b7      	b.n	66e6 <z_setup_new_thread+0x1e>
    6776:	bf00      	nop
    6778:	0000698d 	.word	0x0000698d
    677c:	20000c74 	.word	0x20000c74
    6780:	0000b823 	.word	0x0000b823
    6784:	0000b846 	.word	0x0000b846
    6788:	0000a092 	.word	0x0000a092
    678c:	0000b8c6 	.word	0x0000b8c6

00006790 <z_impl_k_thread_create>:
{
    6790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6794:	b087      	sub	sp, #28
    6796:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    679a:	4604      	mov	r4, r0
    679c:	460f      	mov	r7, r1
    679e:	4690      	mov	r8, r2
    67a0:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    67a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    67a6:	b173      	cbz	r3, 67c6 <z_impl_k_thread_create+0x36>
    67a8:	491c      	ldr	r1, [pc, #112]	; (681c <z_impl_k_thread_create+0x8c>)
    67aa:	4a1d      	ldr	r2, [pc, #116]	; (6820 <z_impl_k_thread_create+0x90>)
    67ac:	481d      	ldr	r0, [pc, #116]	; (6824 <z_impl_k_thread_create+0x94>)
    67ae:	f240 236e 	movw	r3, #622	; 0x26e
    67b2:	f002 fcb8 	bl	9126 <assert_print>
    67b6:	481c      	ldr	r0, [pc, #112]	; (6828 <z_impl_k_thread_create+0x98>)
    67b8:	f002 fcb5 	bl	9126 <assert_print>
    67bc:	4818      	ldr	r0, [pc, #96]	; (6820 <z_impl_k_thread_create+0x90>)
    67be:	f240 216e 	movw	r1, #622	; 0x26e
    67c2:	f002 fca9 	bl	9118 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    67c6:	2300      	movs	r3, #0
    67c8:	9305      	str	r3, [sp, #20]
    67ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    67cc:	9304      	str	r3, [sp, #16]
    67ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    67d0:	9303      	str	r3, [sp, #12]
    67d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    67d4:	9302      	str	r3, [sp, #8]
    67d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67d8:	9301      	str	r3, [sp, #4]
    67da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    67dc:	9300      	str	r3, [sp, #0]
    67de:	4642      	mov	r2, r8
    67e0:	464b      	mov	r3, r9
    67e2:	4639      	mov	r1, r7
    67e4:	4620      	mov	r0, r4
    67e6:	f7ff ff6f 	bl	66c8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    67ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    67ee:	bf08      	it	eq
    67f0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    67f4:	d005      	beq.n	6802 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    67f6:	ea55 0306 	orrs.w	r3, r5, r6
    67fa:	d106      	bne.n	680a <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    67fc:	4620      	mov	r0, r4
    67fe:	f000 fd4f 	bl	72a0 <z_sched_start>
}
    6802:	4620      	mov	r0, r4
    6804:	b007      	add	sp, #28
    6806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    680a:	4908      	ldr	r1, [pc, #32]	; (682c <z_impl_k_thread_create+0x9c>)
    680c:	4632      	mov	r2, r6
    680e:	462b      	mov	r3, r5
    6810:	f104 0018 	add.w	r0, r4, #24
    6814:	f001 fd22 	bl	825c <z_add_timeout>
    6818:	e7f3      	b.n	6802 <z_impl_k_thread_create+0x72>
    681a:	bf00      	nop
    681c:	0000b8f7 	.word	0x0000b8f7
    6820:	0000b823 	.word	0x0000b823
    6824:	0000a092 	.word	0x0000a092
    6828:	0000b909 	.word	0x0000b909
    682c:	00007b15 	.word	0x00007b15

00006830 <z_init_static_threads>:
{
    6830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6834:	4c3b      	ldr	r4, [pc, #236]	; (6924 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    6836:	4d3c      	ldr	r5, [pc, #240]	; (6928 <z_init_static_threads+0xf8>)
    6838:	4f3c      	ldr	r7, [pc, #240]	; (692c <z_init_static_threads+0xfc>)
{
    683a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    683c:	42ac      	cmp	r4, r5
    683e:	4626      	mov	r6, r4
    6840:	d90e      	bls.n	6860 <z_init_static_threads+0x30>
    6842:	493b      	ldr	r1, [pc, #236]	; (6930 <z_init_static_threads+0x100>)
    6844:	483b      	ldr	r0, [pc, #236]	; (6934 <z_init_static_threads+0x104>)
    6846:	f240 23d5 	movw	r3, #725	; 0x2d5
    684a:	463a      	mov	r2, r7
    684c:	f002 fc6b 	bl	9126 <assert_print>
    6850:	4839      	ldr	r0, [pc, #228]	; (6938 <z_init_static_threads+0x108>)
    6852:	f002 fc68 	bl	9126 <assert_print>
    6856:	f240 21d5 	movw	r1, #725	; 0x2d5
    685a:	4638      	mov	r0, r7
    685c:	f002 fc5c 	bl	9118 <assert_post_action>
    6860:	42ae      	cmp	r6, r5
    6862:	f104 0430 	add.w	r4, r4, #48	; 0x30
    6866:	d31f      	bcc.n	68a8 <z_init_static_threads+0x78>
	k_sched_lock();
    6868:	f000 fd6e 	bl	7348 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    686c:	4c2d      	ldr	r4, [pc, #180]	; (6924 <z_init_static_threads+0xf4>)
    686e:	4e2f      	ldr	r6, [pc, #188]	; (692c <z_init_static_threads+0xfc>)
    6870:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6930 <z_init_static_threads+0x100>
    6874:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 6934 <z_init_static_threads+0x104>
    6878:	42ac      	cmp	r4, r5
    687a:	d90e      	bls.n	689a <z_init_static_threads+0x6a>
    687c:	4641      	mov	r1, r8
    687e:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    6882:	4632      	mov	r2, r6
    6884:	4648      	mov	r0, r9
    6886:	f002 fc4e 	bl	9126 <assert_print>
    688a:	482b      	ldr	r0, [pc, #172]	; (6938 <z_init_static_threads+0x108>)
    688c:	f002 fc4b 	bl	9126 <assert_print>
    6890:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    6894:	4630      	mov	r0, r6
    6896:	f002 fc3f 	bl	9118 <assert_post_action>
    689a:	42ac      	cmp	r4, r5
    689c:	d320      	bcc.n	68e0 <z_init_static_threads+0xb0>
}
    689e:	b007      	add	sp, #28
    68a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    68a4:	f000 bdc4 	b.w	7430 <k_sched_unlock>
		z_setup_new_thread(
    68a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    68ac:	9305      	str	r3, [sp, #20]
    68ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
    68b2:	9304      	str	r3, [sp, #16]
    68b4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    68b8:	9303      	str	r3, [sp, #12]
    68ba:	f854 3c18 	ldr.w	r3, [r4, #-24]
    68be:	9302      	str	r3, [sp, #8]
    68c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    68c4:	9301      	str	r3, [sp, #4]
    68c6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    68ca:	9300      	str	r3, [sp, #0]
    68cc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    68d0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    68d4:	f7ff fef8 	bl	66c8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    68d8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    68dc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    68de:	e7ad      	b.n	683c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    68e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    68e2:	1c5a      	adds	r2, r3, #1
    68e4:	d00f      	beq.n	6906 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    68e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    68ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    68ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    68f2:	2100      	movs	r1, #0
    68f4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    68f8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    68fc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    68fe:	d104      	bne.n	690a <z_init_static_threads+0xda>
	z_sched_start(thread);
    6900:	4638      	mov	r0, r7
    6902:	f000 fccd 	bl	72a0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6906:	3430      	adds	r4, #48	; 0x30
    6908:	e7b6      	b.n	6878 <z_init_static_threads+0x48>
    690a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    690e:	2300      	movs	r3, #0
    6910:	f7f9 fe28 	bl	564 <__aeabi_uldivmod>
    6914:	4602      	mov	r2, r0
    6916:	460b      	mov	r3, r1
    6918:	f107 0018 	add.w	r0, r7, #24
    691c:	4907      	ldr	r1, [pc, #28]	; (693c <z_init_static_threads+0x10c>)
    691e:	f001 fc9d 	bl	825c <z_add_timeout>
    6922:	e7f0      	b.n	6906 <z_init_static_threads+0xd6>
    6924:	200001f4 	.word	0x200001f4
    6928:	200001f4 	.word	0x200001f4
    692c:	0000b823 	.word	0x0000b823
    6930:	0000b92e 	.word	0x0000b92e
    6934:	0000a092 	.word	0x0000a092
    6938:	0000b804 	.word	0x0000b804
    693c:	00007b15 	.word	0x00007b15

00006940 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6940:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6942:	b138      	cbz	r0, 6954 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6944:	4b04      	ldr	r3, [pc, #16]	; (6958 <z_spin_lock_valid+0x18>)
    6946:	7d1b      	ldrb	r3, [r3, #20]
    6948:	f000 0003 	and.w	r0, r0, #3
    694c:	1ac0      	subs	r0, r0, r3
    694e:	bf18      	it	ne
    6950:	2001      	movne	r0, #1
    6952:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6954:	2001      	movs	r0, #1
}
    6956:	4770      	bx	lr
    6958:	20000c74 	.word	0x20000c74

0000695c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    695c:	4a06      	ldr	r2, [pc, #24]	; (6978 <z_spin_unlock_valid+0x1c>)
    695e:	7d11      	ldrb	r1, [r2, #20]
    6960:	6892      	ldr	r2, [r2, #8]
    6962:	430a      	orrs	r2, r1
    6964:	6801      	ldr	r1, [r0, #0]
{
    6966:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6968:	4291      	cmp	r1, r2
    696a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    696e:	bf04      	itt	eq
    6970:	6018      	streq	r0, [r3, #0]
	return true;
    6972:	2001      	moveq	r0, #1
}
    6974:	4770      	bx	lr
    6976:	bf00      	nop
    6978:	20000c74 	.word	0x20000c74

0000697c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    697c:	4b02      	ldr	r3, [pc, #8]	; (6988 <z_spin_lock_set_owner+0xc>)
    697e:	7d1a      	ldrb	r2, [r3, #20]
    6980:	689b      	ldr	r3, [r3, #8]
    6982:	4313      	orrs	r3, r2
    6984:	6003      	str	r3, [r0, #0]
}
    6986:	4770      	bx	lr
    6988:	20000c74 	.word	0x20000c74

0000698c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    698c:	4c13      	ldr	r4, [pc, #76]	; (69dc <idle+0x50>)
{
    698e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6990:	68a3      	ldr	r3, [r4, #8]
    6992:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6996:	2b00      	cmp	r3, #0
    6998:	da09      	bge.n	69ae <idle+0x22>
    699a:	4911      	ldr	r1, [pc, #68]	; (69e0 <idle+0x54>)
    699c:	4811      	ldr	r0, [pc, #68]	; (69e4 <idle+0x58>)
    699e:	4a12      	ldr	r2, [pc, #72]	; (69e8 <idle+0x5c>)
    69a0:	2327      	movs	r3, #39	; 0x27
    69a2:	f002 fbc0 	bl	9126 <assert_print>
    69a6:	4810      	ldr	r0, [pc, #64]	; (69e8 <idle+0x5c>)
    69a8:	2127      	movs	r1, #39	; 0x27
    69aa:	f002 fbb5 	bl	9118 <assert_post_action>
	return !z_sys_post_kernel;
    69ae:	4d0f      	ldr	r5, [pc, #60]	; (69ec <idle+0x60>)
	__asm__ volatile(
    69b0:	f04f 0240 	mov.w	r2, #64	; 0x40
    69b4:	f3ef 8311 	mrs	r3, BASEPRI
    69b8:	f382 8812 	msr	BASEPRI_MAX, r2
    69bc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    69c0:	f001 fd64 	bl	848c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    69c4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    69c6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    69c8:	b913      	cbnz	r3, 69d0 <idle+0x44>
	arch_cpu_idle();
    69ca:	f7fc fb2d 	bl	3028 <arch_cpu_idle>
}
    69ce:	e7ef      	b.n	69b0 <idle+0x24>
    69d0:	f7fc f986 	bl	2ce0 <pm_system_suspend>
    69d4:	2800      	cmp	r0, #0
    69d6:	d1eb      	bne.n	69b0 <idle+0x24>
    69d8:	e7f7      	b.n	69ca <idle+0x3e>
    69da:	bf00      	nop
    69dc:	20000c74 	.word	0x20000c74
    69e0:	0000b97c 	.word	0x0000b97c
    69e4:	0000a092 	.word	0x0000a092
    69e8:	0000b95b 	.word	0x0000b95b
    69ec:	200012c7 	.word	0x200012c7

000069f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    69f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    69f4:	4604      	mov	r4, r0
    69f6:	4617      	mov	r7, r2
    69f8:	461e      	mov	r6, r3
    69fa:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    69fe:	b163      	cbz	r3, 6a1a <z_impl_k_mutex_lock+0x2a>
    6a00:	496d      	ldr	r1, [pc, #436]	; (6bb8 <z_impl_k_mutex_lock+0x1c8>)
    6a02:	4a6e      	ldr	r2, [pc, #440]	; (6bbc <z_impl_k_mutex_lock+0x1cc>)
    6a04:	486e      	ldr	r0, [pc, #440]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6a06:	2365      	movs	r3, #101	; 0x65
    6a08:	f002 fb8d 	bl	9126 <assert_print>
    6a0c:	486d      	ldr	r0, [pc, #436]	; (6bc4 <z_impl_k_mutex_lock+0x1d4>)
    6a0e:	f002 fb8a 	bl	9126 <assert_print>
    6a12:	486a      	ldr	r0, [pc, #424]	; (6bbc <z_impl_k_mutex_lock+0x1cc>)
    6a14:	2165      	movs	r1, #101	; 0x65
    6a16:	f002 fb7f 	bl	9118 <assert_post_action>
    6a1a:	f04f 0340 	mov.w	r3, #64	; 0x40
    6a1e:	f3ef 8811 	mrs	r8, BASEPRI
    6a22:	f383 8812 	msr	BASEPRI_MAX, r3
    6a26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a2a:	4867      	ldr	r0, [pc, #412]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6a2c:	f7ff ff88 	bl	6940 <z_spin_lock_valid>
    6a30:	b968      	cbnz	r0, 6a4e <z_impl_k_mutex_lock+0x5e>
    6a32:	4a66      	ldr	r2, [pc, #408]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6a34:	4966      	ldr	r1, [pc, #408]	; (6bd0 <z_impl_k_mutex_lock+0x1e0>)
    6a36:	4862      	ldr	r0, [pc, #392]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6a38:	238e      	movs	r3, #142	; 0x8e
    6a3a:	f002 fb74 	bl	9126 <assert_print>
    6a3e:	4962      	ldr	r1, [pc, #392]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6a40:	4864      	ldr	r0, [pc, #400]	; (6bd4 <z_impl_k_mutex_lock+0x1e4>)
    6a42:	f002 fb70 	bl	9126 <assert_print>
    6a46:	4861      	ldr	r0, [pc, #388]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6a48:	218e      	movs	r1, #142	; 0x8e
    6a4a:	f002 fb65 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a4e:	485e      	ldr	r0, [pc, #376]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6a50:	f7ff ff94 	bl	697c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6a54:	68e3      	ldr	r3, [r4, #12]
    6a56:	4a60      	ldr	r2, [pc, #384]	; (6bd8 <z_impl_k_mutex_lock+0x1e8>)
    6a58:	b30b      	cbz	r3, 6a9e <z_impl_k_mutex_lock+0xae>
    6a5a:	68a0      	ldr	r0, [r4, #8]
    6a5c:	6891      	ldr	r1, [r2, #8]
    6a5e:	4288      	cmp	r0, r1
    6a60:	d03d      	beq.n	6ade <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6a62:	ea57 0306 	orrs.w	r3, r7, r6
    6a66:	d13c      	bne.n	6ae2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a68:	4857      	ldr	r0, [pc, #348]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6a6a:	f7ff ff77 	bl	695c <z_spin_unlock_valid>
    6a6e:	b968      	cbnz	r0, 6a8c <z_impl_k_mutex_lock+0x9c>
    6a70:	4a56      	ldr	r2, [pc, #344]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6a72:	495a      	ldr	r1, [pc, #360]	; (6bdc <z_impl_k_mutex_lock+0x1ec>)
    6a74:	4852      	ldr	r0, [pc, #328]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6a76:	23b9      	movs	r3, #185	; 0xb9
    6a78:	f002 fb55 	bl	9126 <assert_print>
    6a7c:	4952      	ldr	r1, [pc, #328]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6a7e:	4858      	ldr	r0, [pc, #352]	; (6be0 <z_impl_k_mutex_lock+0x1f0>)
    6a80:	f002 fb51 	bl	9126 <assert_print>
    6a84:	4851      	ldr	r0, [pc, #324]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6a86:	21b9      	movs	r1, #185	; 0xb9
    6a88:	f002 fb46 	bl	9118 <assert_post_action>
	__asm__ volatile(
    6a8c:	f388 8811 	msr	BASEPRI, r8
    6a90:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6a94:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6a98:	b002      	add	sp, #8
    6a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6a9e:	6891      	ldr	r1, [r2, #8]
    6aa0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6aa4:	4848      	ldr	r0, [pc, #288]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6aa6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6aa8:	3301      	adds	r3, #1
    6aaa:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6aac:	6893      	ldr	r3, [r2, #8]
    6aae:	60a3      	str	r3, [r4, #8]
    6ab0:	f7ff ff54 	bl	695c <z_spin_unlock_valid>
    6ab4:	b968      	cbnz	r0, 6ad2 <z_impl_k_mutex_lock+0xe2>
    6ab6:	4a45      	ldr	r2, [pc, #276]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6ab8:	4948      	ldr	r1, [pc, #288]	; (6bdc <z_impl_k_mutex_lock+0x1ec>)
    6aba:	4841      	ldr	r0, [pc, #260]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6abc:	23b9      	movs	r3, #185	; 0xb9
    6abe:	f002 fb32 	bl	9126 <assert_print>
    6ac2:	4941      	ldr	r1, [pc, #260]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6ac4:	4846      	ldr	r0, [pc, #280]	; (6be0 <z_impl_k_mutex_lock+0x1f0>)
    6ac6:	f002 fb2e 	bl	9126 <assert_print>
    6aca:	4840      	ldr	r0, [pc, #256]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6acc:	21b9      	movs	r1, #185	; 0xb9
    6ace:	f002 fb23 	bl	9118 <assert_post_action>
    6ad2:	f388 8811 	msr	BASEPRI, r8
    6ad6:	f3bf 8f6f 	isb	sy
		return 0;
    6ada:	2000      	movs	r0, #0
    6adc:	e7dc      	b.n	6a98 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    6ade:	6921      	ldr	r1, [r4, #16]
    6ae0:	e7e0      	b.n	6aa4 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6ae2:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6ae6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6aea:	4299      	cmp	r1, r3
    6aec:	bfa8      	it	ge
    6aee:	4619      	movge	r1, r3
    6af0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6af4:	4291      	cmp	r1, r2
    6af6:	bfb8      	it	lt
    6af8:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6afa:	4299      	cmp	r1, r3
    6afc:	da53      	bge.n	6ba6 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    6afe:	f002 ff1f 	bl	9940 <adjust_owner_prio.isra.0>
    6b02:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6b04:	e9cd 7600 	strd	r7, r6, [sp]
    6b08:	482f      	ldr	r0, [pc, #188]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b0a:	4622      	mov	r2, r4
    6b0c:	4641      	mov	r1, r8
    6b0e:	f000 feaf 	bl	7870 <z_pend_curr>
	if (got_mutex == 0) {
    6b12:	2800      	cmp	r0, #0
    6b14:	d0e1      	beq.n	6ada <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    6b16:	f04f 0340 	mov.w	r3, #64	; 0x40
    6b1a:	f3ef 8611 	mrs	r6, BASEPRI
    6b1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b26:	4828      	ldr	r0, [pc, #160]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b28:	f7ff ff0a 	bl	6940 <z_spin_lock_valid>
    6b2c:	b968      	cbnz	r0, 6b4a <z_impl_k_mutex_lock+0x15a>
    6b2e:	4a27      	ldr	r2, [pc, #156]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6b30:	4927      	ldr	r1, [pc, #156]	; (6bd0 <z_impl_k_mutex_lock+0x1e0>)
    6b32:	4823      	ldr	r0, [pc, #140]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6b34:	238e      	movs	r3, #142	; 0x8e
    6b36:	f002 faf6 	bl	9126 <assert_print>
    6b3a:	4923      	ldr	r1, [pc, #140]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b3c:	4825      	ldr	r0, [pc, #148]	; (6bd4 <z_impl_k_mutex_lock+0x1e4>)
    6b3e:	f002 faf2 	bl	9126 <assert_print>
    6b42:	4822      	ldr	r0, [pc, #136]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6b44:	218e      	movs	r1, #142	; 0x8e
    6b46:	f002 fae7 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b4a:	481f      	ldr	r0, [pc, #124]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b4c:	f7ff ff16 	bl	697c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6b50:	6823      	ldr	r3, [r4, #0]
    6b52:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b54:	42a3      	cmp	r3, r4
    6b56:	d00a      	beq.n	6b6e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6b58:	b14b      	cbz	r3, 6b6e <z_impl_k_mutex_lock+0x17e>
    6b5a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6b5e:	4299      	cmp	r1, r3
    6b60:	bfa8      	it	ge
    6b62:	4619      	movge	r1, r3
    6b64:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6b68:	4299      	cmp	r1, r3
    6b6a:	bfb8      	it	lt
    6b6c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6b6e:	68a0      	ldr	r0, [r4, #8]
    6b70:	f002 fee6 	bl	9940 <adjust_owner_prio.isra.0>
    6b74:	b9c8      	cbnz	r0, 6baa <z_impl_k_mutex_lock+0x1ba>
    6b76:	b9c5      	cbnz	r5, 6baa <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b78:	4813      	ldr	r0, [pc, #76]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b7a:	f7ff feef 	bl	695c <z_spin_unlock_valid>
    6b7e:	b968      	cbnz	r0, 6b9c <z_impl_k_mutex_lock+0x1ac>
    6b80:	4a12      	ldr	r2, [pc, #72]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6b82:	4916      	ldr	r1, [pc, #88]	; (6bdc <z_impl_k_mutex_lock+0x1ec>)
    6b84:	480e      	ldr	r0, [pc, #56]	; (6bc0 <z_impl_k_mutex_lock+0x1d0>)
    6b86:	23b9      	movs	r3, #185	; 0xb9
    6b88:	f002 facd 	bl	9126 <assert_print>
    6b8c:	490e      	ldr	r1, [pc, #56]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6b8e:	4814      	ldr	r0, [pc, #80]	; (6be0 <z_impl_k_mutex_lock+0x1f0>)
    6b90:	f002 fac9 	bl	9126 <assert_print>
    6b94:	480d      	ldr	r0, [pc, #52]	; (6bcc <z_impl_k_mutex_lock+0x1dc>)
    6b96:	21b9      	movs	r1, #185	; 0xb9
    6b98:	f002 fabe 	bl	9118 <assert_post_action>
	__asm__ volatile(
    6b9c:	f386 8811 	msr	BASEPRI, r6
    6ba0:	f3bf 8f6f 	isb	sy
    6ba4:	e005      	b.n	6bb2 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    6ba6:	2500      	movs	r5, #0
    6ba8:	e7ac      	b.n	6b04 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    6baa:	4807      	ldr	r0, [pc, #28]	; (6bc8 <z_impl_k_mutex_lock+0x1d8>)
    6bac:	4631      	mov	r1, r6
    6bae:	f000 fb33 	bl	7218 <z_reschedule>
	return -EAGAIN;
    6bb2:	f06f 000a 	mvn.w	r0, #10
    6bb6:	e76f      	b.n	6a98 <z_impl_k_mutex_lock+0xa8>
    6bb8:	0000b8f7 	.word	0x0000b8f7
    6bbc:	0000b9a4 	.word	0x0000b9a4
    6bc0:	0000a092 	.word	0x0000a092
    6bc4:	0000b9c6 	.word	0x0000b9c6
    6bc8:	20000c9c 	.word	0x20000c9c
    6bcc:	0000a587 	.word	0x0000a587
    6bd0:	0000a5e0 	.word	0x0000a5e0
    6bd4:	0000a5f5 	.word	0x0000a5f5
    6bd8:	20000c74 	.word	0x20000c74
    6bdc:	0000a5b4 	.word	0x0000a5b4
    6be0:	0000a5cb 	.word	0x0000a5cb

00006be4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6be4:	b538      	push	{r3, r4, r5, lr}
    6be6:	4604      	mov	r4, r0
    6be8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6bec:	b163      	cbz	r3, 6c08 <z_impl_k_mutex_unlock+0x24>
    6bee:	4950      	ldr	r1, [pc, #320]	; (6d30 <z_impl_k_mutex_unlock+0x14c>)
    6bf0:	4a50      	ldr	r2, [pc, #320]	; (6d34 <z_impl_k_mutex_unlock+0x150>)
    6bf2:	4851      	ldr	r0, [pc, #324]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6bf4:	23c7      	movs	r3, #199	; 0xc7
    6bf6:	f002 fa96 	bl	9126 <assert_print>
    6bfa:	4850      	ldr	r0, [pc, #320]	; (6d3c <z_impl_k_mutex_unlock+0x158>)
    6bfc:	f002 fa93 	bl	9126 <assert_print>
    6c00:	484c      	ldr	r0, [pc, #304]	; (6d34 <z_impl_k_mutex_unlock+0x150>)
    6c02:	21c7      	movs	r1, #199	; 0xc7
    6c04:	f002 fa88 	bl	9118 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6c08:	68a3      	ldr	r3, [r4, #8]
    6c0a:	2b00      	cmp	r3, #0
    6c0c:	f000 8089 	beq.w	6d22 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6c10:	4d4b      	ldr	r5, [pc, #300]	; (6d40 <z_impl_k_mutex_unlock+0x15c>)
    6c12:	68aa      	ldr	r2, [r5, #8]
    6c14:	4293      	cmp	r3, r2
    6c16:	f040 8087 	bne.w	6d28 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6c1a:	68e3      	ldr	r3, [r4, #12]
    6c1c:	b94b      	cbnz	r3, 6c32 <z_impl_k_mutex_unlock+0x4e>
    6c1e:	4949      	ldr	r1, [pc, #292]	; (6d44 <z_impl_k_mutex_unlock+0x160>)
    6c20:	4845      	ldr	r0, [pc, #276]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6c22:	4a44      	ldr	r2, [pc, #272]	; (6d34 <z_impl_k_mutex_unlock+0x150>)
    6c24:	23df      	movs	r3, #223	; 0xdf
    6c26:	f002 fa7e 	bl	9126 <assert_print>
    6c2a:	4842      	ldr	r0, [pc, #264]	; (6d34 <z_impl_k_mutex_unlock+0x150>)
    6c2c:	21df      	movs	r1, #223	; 0xdf
    6c2e:	f002 fa73 	bl	9118 <assert_post_action>
    6c32:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    6c36:	b163      	cbz	r3, 6c52 <z_impl_k_mutex_unlock+0x6e>
    6c38:	493d      	ldr	r1, [pc, #244]	; (6d30 <z_impl_k_mutex_unlock+0x14c>)
    6c3a:	4a43      	ldr	r2, [pc, #268]	; (6d48 <z_impl_k_mutex_unlock+0x164>)
    6c3c:	483e      	ldr	r0, [pc, #248]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6c3e:	23fd      	movs	r3, #253	; 0xfd
    6c40:	f002 fa71 	bl	9126 <assert_print>
    6c44:	4841      	ldr	r0, [pc, #260]	; (6d4c <z_impl_k_mutex_unlock+0x168>)
    6c46:	f002 fa6e 	bl	9126 <assert_print>
    6c4a:	483f      	ldr	r0, [pc, #252]	; (6d48 <z_impl_k_mutex_unlock+0x164>)
    6c4c:	21fd      	movs	r1, #253	; 0xfd
    6c4e:	f002 fa63 	bl	9118 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6c52:	68ab      	ldr	r3, [r5, #8]
    6c54:	7bdb      	ldrb	r3, [r3, #15]
    6c56:	2b01      	cmp	r3, #1
    6c58:	d10c      	bne.n	6c74 <z_impl_k_mutex_unlock+0x90>
    6c5a:	493d      	ldr	r1, [pc, #244]	; (6d50 <z_impl_k_mutex_unlock+0x16c>)
    6c5c:	4a3a      	ldr	r2, [pc, #232]	; (6d48 <z_impl_k_mutex_unlock+0x164>)
    6c5e:	4836      	ldr	r0, [pc, #216]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6c60:	23fe      	movs	r3, #254	; 0xfe
    6c62:	f002 fa60 	bl	9126 <assert_print>
    6c66:	4839      	ldr	r0, [pc, #228]	; (6d4c <z_impl_k_mutex_unlock+0x168>)
    6c68:	f002 fa5d 	bl	9126 <assert_print>
    6c6c:	4836      	ldr	r0, [pc, #216]	; (6d48 <z_impl_k_mutex_unlock+0x164>)
    6c6e:	21fe      	movs	r1, #254	; 0xfe
    6c70:	f002 fa52 	bl	9118 <assert_post_action>

	--_current->base.sched_locked;
    6c74:	68aa      	ldr	r2, [r5, #8]
    6c76:	7bd3      	ldrb	r3, [r2, #15]
    6c78:	3b01      	subs	r3, #1
    6c7a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6c7c:	68e3      	ldr	r3, [r4, #12]
    6c7e:	2b01      	cmp	r3, #1
    6c80:	d905      	bls.n	6c8e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    6c82:	3b01      	subs	r3, #1
    6c84:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6c86:	f000 fbd3 	bl	7430 <k_sched_unlock>

	return 0;
    6c8a:	2000      	movs	r0, #0
}
    6c8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6c8e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6c92:	f3ef 8511 	mrs	r5, BASEPRI
    6c96:	f383 8812 	msr	BASEPRI_MAX, r3
    6c9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c9e:	482d      	ldr	r0, [pc, #180]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6ca0:	f7ff fe4e 	bl	6940 <z_spin_lock_valid>
    6ca4:	b968      	cbnz	r0, 6cc2 <z_impl_k_mutex_unlock+0xde>
    6ca6:	4a2c      	ldr	r2, [pc, #176]	; (6d58 <z_impl_k_mutex_unlock+0x174>)
    6ca8:	492c      	ldr	r1, [pc, #176]	; (6d5c <z_impl_k_mutex_unlock+0x178>)
    6caa:	4823      	ldr	r0, [pc, #140]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6cac:	238e      	movs	r3, #142	; 0x8e
    6cae:	f002 fa3a 	bl	9126 <assert_print>
    6cb2:	4928      	ldr	r1, [pc, #160]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6cb4:	482a      	ldr	r0, [pc, #168]	; (6d60 <z_impl_k_mutex_unlock+0x17c>)
    6cb6:	f002 fa36 	bl	9126 <assert_print>
    6cba:	4827      	ldr	r0, [pc, #156]	; (6d58 <z_impl_k_mutex_unlock+0x174>)
    6cbc:	218e      	movs	r1, #142	; 0x8e
    6cbe:	f002 fa2b 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6cc2:	4824      	ldr	r0, [pc, #144]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6cc4:	f7ff fe5a 	bl	697c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6cc8:	6921      	ldr	r1, [r4, #16]
    6cca:	68a0      	ldr	r0, [r4, #8]
    6ccc:	f002 fe38 	bl	9940 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6cd0:	4620      	mov	r0, r4
    6cd2:	f000 ffc7 	bl	7c64 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6cd6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6cd8:	b158      	cbz	r0, 6cf2 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    6cda:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6cde:	6122      	str	r2, [r4, #16]
    6ce0:	2200      	movs	r2, #0
    6ce2:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    6ce4:	f000 fa08 	bl	70f8 <z_ready_thread>
		z_reschedule(&lock, key);
    6ce8:	481a      	ldr	r0, [pc, #104]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6cea:	4629      	mov	r1, r5
    6cec:	f000 fa94 	bl	7218 <z_reschedule>
    6cf0:	e7c9      	b.n	6c86 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    6cf2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cf4:	4817      	ldr	r0, [pc, #92]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6cf6:	f7ff fe31 	bl	695c <z_spin_unlock_valid>
    6cfa:	b968      	cbnz	r0, 6d18 <z_impl_k_mutex_unlock+0x134>
    6cfc:	4a16      	ldr	r2, [pc, #88]	; (6d58 <z_impl_k_mutex_unlock+0x174>)
    6cfe:	4919      	ldr	r1, [pc, #100]	; (6d64 <z_impl_k_mutex_unlock+0x180>)
    6d00:	480d      	ldr	r0, [pc, #52]	; (6d38 <z_impl_k_mutex_unlock+0x154>)
    6d02:	23b9      	movs	r3, #185	; 0xb9
    6d04:	f002 fa0f 	bl	9126 <assert_print>
    6d08:	4912      	ldr	r1, [pc, #72]	; (6d54 <z_impl_k_mutex_unlock+0x170>)
    6d0a:	4817      	ldr	r0, [pc, #92]	; (6d68 <z_impl_k_mutex_unlock+0x184>)
    6d0c:	f002 fa0b 	bl	9126 <assert_print>
    6d10:	4811      	ldr	r0, [pc, #68]	; (6d58 <z_impl_k_mutex_unlock+0x174>)
    6d12:	21b9      	movs	r1, #185	; 0xb9
    6d14:	f002 fa00 	bl	9118 <assert_post_action>
	__asm__ volatile(
    6d18:	f385 8811 	msr	BASEPRI, r5
    6d1c:	f3bf 8f6f 	isb	sy
    6d20:	e7b1      	b.n	6c86 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6d22:	f06f 0015 	mvn.w	r0, #21
    6d26:	e7b1      	b.n	6c8c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d2c:	e7ae      	b.n	6c8c <z_impl_k_mutex_unlock+0xa8>
    6d2e:	bf00      	nop
    6d30:	0000b8f7 	.word	0x0000b8f7
    6d34:	0000b9a4 	.word	0x0000b9a4
    6d38:	0000a092 	.word	0x0000a092
    6d3c:	0000b9c6 	.word	0x0000b9c6
    6d40:	20000c74 	.word	0x20000c74
    6d44:	0000b9eb 	.word	0x0000b9eb
    6d48:	0000ba02 	.word	0x0000ba02
    6d4c:	0000ba2d 	.word	0x0000ba2d
    6d50:	0000ba30 	.word	0x0000ba30
    6d54:	20000c9c 	.word	0x20000c9c
    6d58:	0000a587 	.word	0x0000a587
    6d5c:	0000a5e0 	.word	0x0000a5e0
    6d60:	0000a5f5 	.word	0x0000a5f5
    6d64:	0000a5b4 	.word	0x0000a5b4
    6d68:	0000a5cb 	.word	0x0000a5cb

00006d6c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6d6c:	b538      	push	{r3, r4, r5, lr}
    6d6e:	4604      	mov	r4, r0
	__asm__ volatile(
    6d70:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d74:	f3ef 8511 	mrs	r5, BASEPRI
    6d78:	f383 8812 	msr	BASEPRI_MAX, r3
    6d7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d80:	4814      	ldr	r0, [pc, #80]	; (6dd4 <z_impl_k_sem_give+0x68>)
    6d82:	f7ff fddd 	bl	6940 <z_spin_lock_valid>
    6d86:	b968      	cbnz	r0, 6da4 <z_impl_k_sem_give+0x38>
    6d88:	4a13      	ldr	r2, [pc, #76]	; (6dd8 <z_impl_k_sem_give+0x6c>)
    6d8a:	4914      	ldr	r1, [pc, #80]	; (6ddc <z_impl_k_sem_give+0x70>)
    6d8c:	4814      	ldr	r0, [pc, #80]	; (6de0 <z_impl_k_sem_give+0x74>)
    6d8e:	238e      	movs	r3, #142	; 0x8e
    6d90:	f002 f9c9 	bl	9126 <assert_print>
    6d94:	490f      	ldr	r1, [pc, #60]	; (6dd4 <z_impl_k_sem_give+0x68>)
    6d96:	4813      	ldr	r0, [pc, #76]	; (6de4 <z_impl_k_sem_give+0x78>)
    6d98:	f002 f9c5 	bl	9126 <assert_print>
    6d9c:	480e      	ldr	r0, [pc, #56]	; (6dd8 <z_impl_k_sem_give+0x6c>)
    6d9e:	218e      	movs	r1, #142	; 0x8e
    6da0:	f002 f9ba 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6da4:	480b      	ldr	r0, [pc, #44]	; (6dd4 <z_impl_k_sem_give+0x68>)
    6da6:	f7ff fde9 	bl	697c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6daa:	4620      	mov	r0, r4
    6dac:	f000 ff5a 	bl	7c64 <z_unpend_first_thread>

	if (thread != NULL) {
    6db0:	b148      	cbz	r0, 6dc6 <z_impl_k_sem_give+0x5a>
    6db2:	2200      	movs	r2, #0
    6db4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6db6:	f000 f99f 	bl	70f8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6dba:	4629      	mov	r1, r5
    6dbc:	4805      	ldr	r0, [pc, #20]	; (6dd4 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6dc2:	f000 ba29 	b.w	7218 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6dc6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6dca:	429a      	cmp	r2, r3
    6dcc:	bf18      	it	ne
    6dce:	3301      	addne	r3, #1
    6dd0:	60a3      	str	r3, [r4, #8]
}
    6dd2:	e7f2      	b.n	6dba <z_impl_k_sem_give+0x4e>
    6dd4:	20000ca0 	.word	0x20000ca0
    6dd8:	0000a587 	.word	0x0000a587
    6ddc:	0000a5e0 	.word	0x0000a5e0
    6de0:	0000a092 	.word	0x0000a092
    6de4:	0000a5f5 	.word	0x0000a5f5

00006de8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6dea:	4604      	mov	r4, r0
    6dec:	4617      	mov	r7, r2
    6dee:	461d      	mov	r5, r3
    6df0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6df4:	b17b      	cbz	r3, 6e16 <z_impl_k_sem_take+0x2e>
    6df6:	ea52 0305 	orrs.w	r3, r2, r5
    6dfa:	d00c      	beq.n	6e16 <z_impl_k_sem_take+0x2e>
    6dfc:	4935      	ldr	r1, [pc, #212]	; (6ed4 <z_impl_k_sem_take+0xec>)
    6dfe:	4a36      	ldr	r2, [pc, #216]	; (6ed8 <z_impl_k_sem_take+0xf0>)
    6e00:	4836      	ldr	r0, [pc, #216]	; (6edc <z_impl_k_sem_take+0xf4>)
    6e02:	2379      	movs	r3, #121	; 0x79
    6e04:	f002 f98f 	bl	9126 <assert_print>
    6e08:	4835      	ldr	r0, [pc, #212]	; (6ee0 <z_impl_k_sem_take+0xf8>)
    6e0a:	f002 f98c 	bl	9126 <assert_print>
    6e0e:	4832      	ldr	r0, [pc, #200]	; (6ed8 <z_impl_k_sem_take+0xf0>)
    6e10:	2179      	movs	r1, #121	; 0x79
    6e12:	f002 f981 	bl	9118 <assert_post_action>
    6e16:	f04f 0340 	mov.w	r3, #64	; 0x40
    6e1a:	f3ef 8611 	mrs	r6, BASEPRI
    6e1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e26:	482f      	ldr	r0, [pc, #188]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e28:	f7ff fd8a 	bl	6940 <z_spin_lock_valid>
    6e2c:	b968      	cbnz	r0, 6e4a <z_impl_k_sem_take+0x62>
    6e2e:	4a2e      	ldr	r2, [pc, #184]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6e30:	492e      	ldr	r1, [pc, #184]	; (6eec <z_impl_k_sem_take+0x104>)
    6e32:	482a      	ldr	r0, [pc, #168]	; (6edc <z_impl_k_sem_take+0xf4>)
    6e34:	238e      	movs	r3, #142	; 0x8e
    6e36:	f002 f976 	bl	9126 <assert_print>
    6e3a:	492a      	ldr	r1, [pc, #168]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e3c:	482c      	ldr	r0, [pc, #176]	; (6ef0 <z_impl_k_sem_take+0x108>)
    6e3e:	f002 f972 	bl	9126 <assert_print>
    6e42:	4829      	ldr	r0, [pc, #164]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6e44:	218e      	movs	r1, #142	; 0x8e
    6e46:	f002 f967 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e4a:	4826      	ldr	r0, [pc, #152]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e4c:	f7ff fd96 	bl	697c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6e50:	68a3      	ldr	r3, [r4, #8]
    6e52:	b1d3      	cbz	r3, 6e8a <z_impl_k_sem_take+0xa2>
		sem->count--;
    6e54:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e56:	4823      	ldr	r0, [pc, #140]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e58:	60a3      	str	r3, [r4, #8]
    6e5a:	f7ff fd7f 	bl	695c <z_spin_unlock_valid>
    6e5e:	b968      	cbnz	r0, 6e7c <z_impl_k_sem_take+0x94>
    6e60:	4a21      	ldr	r2, [pc, #132]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6e62:	4924      	ldr	r1, [pc, #144]	; (6ef4 <z_impl_k_sem_take+0x10c>)
    6e64:	481d      	ldr	r0, [pc, #116]	; (6edc <z_impl_k_sem_take+0xf4>)
    6e66:	23b9      	movs	r3, #185	; 0xb9
    6e68:	f002 f95d 	bl	9126 <assert_print>
    6e6c:	491d      	ldr	r1, [pc, #116]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e6e:	4822      	ldr	r0, [pc, #136]	; (6ef8 <z_impl_k_sem_take+0x110>)
    6e70:	f002 f959 	bl	9126 <assert_print>
    6e74:	481c      	ldr	r0, [pc, #112]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6e76:	21b9      	movs	r1, #185	; 0xb9
    6e78:	f002 f94e 	bl	9118 <assert_post_action>
	__asm__ volatile(
    6e7c:	f386 8811 	msr	BASEPRI, r6
    6e80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6e84:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6e86:	b003      	add	sp, #12
    6e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6e8a:	ea57 0305 	orrs.w	r3, r7, r5
    6e8e:	d118      	bne.n	6ec2 <z_impl_k_sem_take+0xda>
    6e90:	4814      	ldr	r0, [pc, #80]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6e92:	f7ff fd63 	bl	695c <z_spin_unlock_valid>
    6e96:	b968      	cbnz	r0, 6eb4 <z_impl_k_sem_take+0xcc>
    6e98:	4a13      	ldr	r2, [pc, #76]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6e9a:	4916      	ldr	r1, [pc, #88]	; (6ef4 <z_impl_k_sem_take+0x10c>)
    6e9c:	480f      	ldr	r0, [pc, #60]	; (6edc <z_impl_k_sem_take+0xf4>)
    6e9e:	23b9      	movs	r3, #185	; 0xb9
    6ea0:	f002 f941 	bl	9126 <assert_print>
    6ea4:	490f      	ldr	r1, [pc, #60]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6ea6:	4814      	ldr	r0, [pc, #80]	; (6ef8 <z_impl_k_sem_take+0x110>)
    6ea8:	f002 f93d 	bl	9126 <assert_print>
    6eac:	480e      	ldr	r0, [pc, #56]	; (6ee8 <z_impl_k_sem_take+0x100>)
    6eae:	21b9      	movs	r1, #185	; 0xb9
    6eb0:	f002 f932 	bl	9118 <assert_post_action>
    6eb4:	f386 8811 	msr	BASEPRI, r6
    6eb8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6ebc:	f06f 000f 	mvn.w	r0, #15
    6ec0:	e7e1      	b.n	6e86 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6ec2:	e9cd 7500 	strd	r7, r5, [sp]
    6ec6:	4622      	mov	r2, r4
    6ec8:	4631      	mov	r1, r6
    6eca:	4806      	ldr	r0, [pc, #24]	; (6ee4 <z_impl_k_sem_take+0xfc>)
    6ecc:	f000 fcd0 	bl	7870 <z_pend_curr>
	return ret;
    6ed0:	e7d9      	b.n	6e86 <z_impl_k_sem_take+0x9e>
    6ed2:	bf00      	nop
    6ed4:	0000ba81 	.word	0x0000ba81
    6ed8:	0000ba61 	.word	0x0000ba61
    6edc:	0000a092 	.word	0x0000a092
    6ee0:	0000ba2d 	.word	0x0000ba2d
    6ee4:	20000ca0 	.word	0x20000ca0
    6ee8:	0000a587 	.word	0x0000a587
    6eec:	0000a5e0 	.word	0x0000a5e0
    6ef0:	0000a5f5 	.word	0x0000a5f5
    6ef4:	0000a5b4 	.word	0x0000a5b4
    6ef8:	0000a5cb 	.word	0x0000a5cb

00006efc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6efc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6efe:	4d07      	ldr	r5, [pc, #28]	; (6f1c <z_reset_time_slice+0x20>)
    6f00:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    6f02:	b154      	cbz	r4, 6f1a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6f04:	f7fe f990 	bl	5228 <sys_clock_elapsed>
    6f08:	4b05      	ldr	r3, [pc, #20]	; (6f20 <z_reset_time_slice+0x24>)
    6f0a:	4404      	add	r4, r0
    6f0c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6f0e:	6828      	ldr	r0, [r5, #0]
    6f10:	2100      	movs	r1, #0
	}
}
    6f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    6f16:	f001 bb01 	b.w	851c <z_set_timeout_expiry>
}
    6f1a:	bd38      	pop	{r3, r4, r5, pc}
    6f1c:	20000cac 	.word	0x20000cac
    6f20:	20000c74 	.word	0x20000c74

00006f24 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    6f24:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    6f26:	4d16      	ldr	r5, [pc, #88]	; (6f80 <update_cache+0x5c>)
    6f28:	462b      	mov	r3, r5
    6f2a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f2e:	429c      	cmp	r4, r3
    6f30:	d000      	beq.n	6f34 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6f32:	b904      	cbnz	r4, 6f36 <update_cache+0x12>
    6f34:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    6f36:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6f38:	b120      	cbz	r0, 6f44 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    6f3a:	68ab      	ldr	r3, [r5, #8]
    6f3c:	42a3      	cmp	r3, r4
    6f3e:	d11b      	bne.n	6f78 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    6f40:	4623      	mov	r3, r4
    6f42:	e017      	b.n	6f74 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    6f44:	b963      	cbnz	r3, 6f60 <update_cache+0x3c>
    6f46:	490f      	ldr	r1, [pc, #60]	; (6f84 <update_cache+0x60>)
    6f48:	4a0f      	ldr	r2, [pc, #60]	; (6f88 <update_cache+0x64>)
    6f4a:	4810      	ldr	r0, [pc, #64]	; (6f8c <update_cache+0x68>)
    6f4c:	2389      	movs	r3, #137	; 0x89
    6f4e:	f002 f8ea 	bl	9126 <assert_print>
    6f52:	480f      	ldr	r0, [pc, #60]	; (6f90 <update_cache+0x6c>)
    6f54:	f002 f8e7 	bl	9126 <assert_print>
    6f58:	480b      	ldr	r0, [pc, #44]	; (6f88 <update_cache+0x64>)
    6f5a:	2189      	movs	r1, #137	; 0x89
    6f5c:	f002 f8dc 	bl	9118 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6f60:	68ab      	ldr	r3, [r5, #8]
    6f62:	7b5a      	ldrb	r2, [r3, #13]
    6f64:	06d2      	lsls	r2, r2, #27
    6f66:	d1e8      	bne.n	6f3a <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6f68:	69a2      	ldr	r2, [r4, #24]
    6f6a:	2a00      	cmp	r2, #0
    6f6c:	d1e5      	bne.n	6f3a <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    6f6e:	89da      	ldrh	r2, [r3, #14]
    6f70:	2a7f      	cmp	r2, #127	; 0x7f
    6f72:	d9e2      	bls.n	6f3a <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    6f74:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    6f76:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    6f78:	4620      	mov	r0, r4
    6f7a:	f7ff ffbf 	bl	6efc <z_reset_time_slice>
    6f7e:	e7df      	b.n	6f40 <update_cache+0x1c>
    6f80:	20000c74 	.word	0x20000c74
    6f84:	0000baf1 	.word	0x0000baf1
    6f88:	0000bacf 	.word	0x0000bacf
    6f8c:	0000a092 	.word	0x0000a092
    6f90:	0000ba2d 	.word	0x0000ba2d

00006f94 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    6f94:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6f96:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    6f9a:	7b43      	ldrb	r3, [r0, #13]
    6f9c:	2a00      	cmp	r2, #0
{
    6f9e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6fa0:	db38      	blt.n	7014 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6fa2:	06da      	lsls	r2, r3, #27
    6fa4:	d136      	bne.n	7014 <ready_thread+0x80>
	return node->next != NULL;
    6fa6:	6985      	ldr	r5, [r0, #24]
    6fa8:	2d00      	cmp	r5, #0
    6faa:	d133      	bne.n	7014 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    6fac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6fb0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6fb2:	4b19      	ldr	r3, [pc, #100]	; (7018 <ready_thread+0x84>)
    6fb4:	4298      	cmp	r0, r3
    6fb6:	d109      	bne.n	6fcc <ready_thread+0x38>
    6fb8:	4918      	ldr	r1, [pc, #96]	; (701c <ready_thread+0x88>)
    6fba:	4819      	ldr	r0, [pc, #100]	; (7020 <ready_thread+0x8c>)
    6fbc:	4a19      	ldr	r2, [pc, #100]	; (7024 <ready_thread+0x90>)
    6fbe:	23ba      	movs	r3, #186	; 0xba
    6fc0:	f002 f8b1 	bl	9126 <assert_print>
    6fc4:	4817      	ldr	r0, [pc, #92]	; (7024 <ready_thread+0x90>)
    6fc6:	21ba      	movs	r1, #186	; 0xba
    6fc8:	f002 f8a6 	bl	9118 <assert_post_action>
	return list->head == list;
    6fcc:	4a16      	ldr	r2, [pc, #88]	; (7028 <ready_thread+0x94>)
    6fce:	4613      	mov	r3, r2
    6fd0:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fd4:	4299      	cmp	r1, r3
    6fd6:	bf18      	it	ne
    6fd8:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    6fda:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6fdc:	b925      	cbnz	r5, 6fe8 <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    6fde:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    6fe2:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6fe4:	6254      	str	r4, [r2, #36]	; 0x24
}
    6fe6:	e00c      	b.n	7002 <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    6fe8:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6fec:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    6ff0:	42b0      	cmp	r0, r6
    6ff2:	d00b      	beq.n	700c <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6ff4:	4286      	cmp	r6, r0
    6ff6:	dd09      	ble.n	700c <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6ff8:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    6ffa:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    6ffe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7000:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    7002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7006:	2000      	movs	r0, #0
    7008:	f7ff bf8c 	b.w	6f24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    700c:	428d      	cmp	r5, r1
    700e:	d0e6      	beq.n	6fde <ready_thread+0x4a>
    7010:	682d      	ldr	r5, [r5, #0]
    7012:	e7e3      	b.n	6fdc <ready_thread+0x48>
}
    7014:	bd70      	pop	{r4, r5, r6, pc}
    7016:	bf00      	nop
    7018:	20000438 	.word	0x20000438
    701c:	0000bb18 	.word	0x0000bb18
    7020:	0000a092 	.word	0x0000a092
    7024:	0000bacf 	.word	0x0000bacf
    7028:	20000c74 	.word	0x20000c74

0000702c <k_sched_time_slice_set>:
{
    702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    702e:	4604      	mov	r4, r0
    7030:	460d      	mov	r5, r1
	__asm__ volatile(
    7032:	f04f 0340 	mov.w	r3, #64	; 0x40
    7036:	f3ef 8711 	mrs	r7, BASEPRI
    703a:	f383 8812 	msr	BASEPRI_MAX, r3
    703e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7042:	4823      	ldr	r0, [pc, #140]	; (70d0 <k_sched_time_slice_set+0xa4>)
    7044:	f7ff fc7c 	bl	6940 <z_spin_lock_valid>
    7048:	b968      	cbnz	r0, 7066 <k_sched_time_slice_set+0x3a>
    704a:	4a22      	ldr	r2, [pc, #136]	; (70d4 <k_sched_time_slice_set+0xa8>)
    704c:	4922      	ldr	r1, [pc, #136]	; (70d8 <k_sched_time_slice_set+0xac>)
    704e:	4823      	ldr	r0, [pc, #140]	; (70dc <k_sched_time_slice_set+0xb0>)
    7050:	238e      	movs	r3, #142	; 0x8e
    7052:	f002 f868 	bl	9126 <assert_print>
    7056:	491e      	ldr	r1, [pc, #120]	; (70d0 <k_sched_time_slice_set+0xa4>)
    7058:	4821      	ldr	r0, [pc, #132]	; (70e0 <k_sched_time_slice_set+0xb4>)
    705a:	f002 f864 	bl	9126 <assert_print>
    705e:	481d      	ldr	r0, [pc, #116]	; (70d4 <k_sched_time_slice_set+0xa8>)
    7060:	218e      	movs	r1, #142	; 0x8e
    7062:	f002 f859 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7066:	481a      	ldr	r0, [pc, #104]	; (70d0 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    7068:	2600      	movs	r6, #0
    706a:	f7ff fc87 	bl	697c <z_spin_lock_set_owner>
    706e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    7072:	f240 30e7 	movw	r0, #999	; 0x3e7
    7076:	4631      	mov	r1, r6
    7078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    707c:	2300      	movs	r3, #0
    707e:	fbe4 010c 	umlal	r0, r1, r4, ip
    7082:	f7f9 fa6f 	bl	564 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7086:	42b4      	cmp	r4, r6
    7088:	dd02      	ble.n	7090 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    708a:	2802      	cmp	r0, #2
    708c:	bfb8      	it	lt
    708e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7090:	4a14      	ldr	r2, [pc, #80]	; (70e4 <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    7092:	4b15      	ldr	r3, [pc, #84]	; (70e8 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7094:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    7096:	4a15      	ldr	r2, [pc, #84]	; (70ec <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    7098:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    709a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    709c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    709e:	f7ff ff2d 	bl	6efc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70a2:	480b      	ldr	r0, [pc, #44]	; (70d0 <k_sched_time_slice_set+0xa4>)
    70a4:	f7ff fc5a 	bl	695c <z_spin_unlock_valid>
    70a8:	b968      	cbnz	r0, 70c6 <k_sched_time_slice_set+0x9a>
    70aa:	4a0a      	ldr	r2, [pc, #40]	; (70d4 <k_sched_time_slice_set+0xa8>)
    70ac:	4910      	ldr	r1, [pc, #64]	; (70f0 <k_sched_time_slice_set+0xc4>)
    70ae:	480b      	ldr	r0, [pc, #44]	; (70dc <k_sched_time_slice_set+0xb0>)
    70b0:	23b9      	movs	r3, #185	; 0xb9
    70b2:	f002 f838 	bl	9126 <assert_print>
    70b6:	4906      	ldr	r1, [pc, #24]	; (70d0 <k_sched_time_slice_set+0xa4>)
    70b8:	480e      	ldr	r0, [pc, #56]	; (70f4 <k_sched_time_slice_set+0xc8>)
    70ba:	f002 f834 	bl	9126 <assert_print>
    70be:	4805      	ldr	r0, [pc, #20]	; (70d4 <k_sched_time_slice_set+0xa8>)
    70c0:	21b9      	movs	r1, #185	; 0xb9
    70c2:	f002 f829 	bl	9118 <assert_post_action>
	__asm__ volatile(
    70c6:	f387 8811 	msr	BASEPRI, r7
    70ca:	f3bf 8f6f 	isb	sy
}
    70ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70d0:	20000cb0 	.word	0x20000cb0
    70d4:	0000a587 	.word	0x0000a587
    70d8:	0000a5e0 	.word	0x0000a5e0
    70dc:	0000a092 	.word	0x0000a092
    70e0:	0000a5f5 	.word	0x0000a5f5
    70e4:	20000cac 	.word	0x20000cac
    70e8:	20000c74 	.word	0x20000c74
    70ec:	20000ca8 	.word	0x20000ca8
    70f0:	0000a5b4 	.word	0x0000a5b4
    70f4:	0000a5cb 	.word	0x0000a5cb

000070f8 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    70f8:	b538      	push	{r3, r4, r5, lr}
    70fa:	4604      	mov	r4, r0
	__asm__ volatile(
    70fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    7100:	f3ef 8511 	mrs	r5, BASEPRI
    7104:	f383 8812 	msr	BASEPRI_MAX, r3
    7108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    710c:	4817      	ldr	r0, [pc, #92]	; (716c <z_ready_thread+0x74>)
    710e:	f7ff fc17 	bl	6940 <z_spin_lock_valid>
    7112:	b968      	cbnz	r0, 7130 <z_ready_thread+0x38>
    7114:	4a16      	ldr	r2, [pc, #88]	; (7170 <z_ready_thread+0x78>)
    7116:	4917      	ldr	r1, [pc, #92]	; (7174 <z_ready_thread+0x7c>)
    7118:	4817      	ldr	r0, [pc, #92]	; (7178 <z_ready_thread+0x80>)
    711a:	238e      	movs	r3, #142	; 0x8e
    711c:	f002 f803 	bl	9126 <assert_print>
    7120:	4912      	ldr	r1, [pc, #72]	; (716c <z_ready_thread+0x74>)
    7122:	4816      	ldr	r0, [pc, #88]	; (717c <z_ready_thread+0x84>)
    7124:	f001 ffff 	bl	9126 <assert_print>
    7128:	4811      	ldr	r0, [pc, #68]	; (7170 <z_ready_thread+0x78>)
    712a:	218e      	movs	r1, #142	; 0x8e
    712c:	f001 fff4 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7130:	480e      	ldr	r0, [pc, #56]	; (716c <z_ready_thread+0x74>)
    7132:	f7ff fc23 	bl	697c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    7136:	4620      	mov	r0, r4
    7138:	f7ff ff2c 	bl	6f94 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    713c:	480b      	ldr	r0, [pc, #44]	; (716c <z_ready_thread+0x74>)
    713e:	f7ff fc0d 	bl	695c <z_spin_unlock_valid>
    7142:	b968      	cbnz	r0, 7160 <z_ready_thread+0x68>
    7144:	4a0a      	ldr	r2, [pc, #40]	; (7170 <z_ready_thread+0x78>)
    7146:	490e      	ldr	r1, [pc, #56]	; (7180 <z_ready_thread+0x88>)
    7148:	480b      	ldr	r0, [pc, #44]	; (7178 <z_ready_thread+0x80>)
    714a:	23b9      	movs	r3, #185	; 0xb9
    714c:	f001 ffeb 	bl	9126 <assert_print>
    7150:	4906      	ldr	r1, [pc, #24]	; (716c <z_ready_thread+0x74>)
    7152:	480c      	ldr	r0, [pc, #48]	; (7184 <z_ready_thread+0x8c>)
    7154:	f001 ffe7 	bl	9126 <assert_print>
    7158:	4805      	ldr	r0, [pc, #20]	; (7170 <z_ready_thread+0x78>)
    715a:	21b9      	movs	r1, #185	; 0xb9
    715c:	f001 ffdc 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7160:	f385 8811 	msr	BASEPRI, r5
    7164:	f3bf 8f6f 	isb	sy
		}
	}
}
    7168:	bd38      	pop	{r3, r4, r5, pc}
    716a:	bf00      	nop
    716c:	20000cb0 	.word	0x20000cb0
    7170:	0000a587 	.word	0x0000a587
    7174:	0000a5e0 	.word	0x0000a5e0
    7178:	0000a092 	.word	0x0000a092
    717c:	0000a5f5 	.word	0x0000a5f5
    7180:	0000a5b4 	.word	0x0000a5b4
    7184:	0000a5cb 	.word	0x0000a5cb

00007188 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    7188:	b538      	push	{r3, r4, r5, lr}
    718a:	4604      	mov	r4, r0
	__asm__ volatile(
    718c:	f04f 0340 	mov.w	r3, #64	; 0x40
    7190:	f3ef 8511 	mrs	r5, BASEPRI
    7194:	f383 8812 	msr	BASEPRI_MAX, r3
    7198:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    719c:	4817      	ldr	r0, [pc, #92]	; (71fc <z_unpend_thread_no_timeout+0x74>)
    719e:	f7ff fbcf 	bl	6940 <z_spin_lock_valid>
    71a2:	b968      	cbnz	r0, 71c0 <z_unpend_thread_no_timeout+0x38>
    71a4:	4a16      	ldr	r2, [pc, #88]	; (7200 <z_unpend_thread_no_timeout+0x78>)
    71a6:	4917      	ldr	r1, [pc, #92]	; (7204 <z_unpend_thread_no_timeout+0x7c>)
    71a8:	4817      	ldr	r0, [pc, #92]	; (7208 <z_unpend_thread_no_timeout+0x80>)
    71aa:	238e      	movs	r3, #142	; 0x8e
    71ac:	f001 ffbb 	bl	9126 <assert_print>
    71b0:	4912      	ldr	r1, [pc, #72]	; (71fc <z_unpend_thread_no_timeout+0x74>)
    71b2:	4816      	ldr	r0, [pc, #88]	; (720c <z_unpend_thread_no_timeout+0x84>)
    71b4:	f001 ffb7 	bl	9126 <assert_print>
    71b8:	4811      	ldr	r0, [pc, #68]	; (7200 <z_unpend_thread_no_timeout+0x78>)
    71ba:	218e      	movs	r1, #142	; 0x8e
    71bc:	f001 ffac 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    71c0:	480e      	ldr	r0, [pc, #56]	; (71fc <z_unpend_thread_no_timeout+0x74>)
    71c2:	f7ff fbdb 	bl	697c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    71c6:	4620      	mov	r0, r4
    71c8:	f000 fc82 	bl	7ad0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71cc:	480b      	ldr	r0, [pc, #44]	; (71fc <z_unpend_thread_no_timeout+0x74>)
    71ce:	f7ff fbc5 	bl	695c <z_spin_unlock_valid>
    71d2:	b968      	cbnz	r0, 71f0 <z_unpend_thread_no_timeout+0x68>
    71d4:	4a0a      	ldr	r2, [pc, #40]	; (7200 <z_unpend_thread_no_timeout+0x78>)
    71d6:	490e      	ldr	r1, [pc, #56]	; (7210 <z_unpend_thread_no_timeout+0x88>)
    71d8:	480b      	ldr	r0, [pc, #44]	; (7208 <z_unpend_thread_no_timeout+0x80>)
    71da:	23b9      	movs	r3, #185	; 0xb9
    71dc:	f001 ffa3 	bl	9126 <assert_print>
    71e0:	4906      	ldr	r1, [pc, #24]	; (71fc <z_unpend_thread_no_timeout+0x74>)
    71e2:	480c      	ldr	r0, [pc, #48]	; (7214 <z_unpend_thread_no_timeout+0x8c>)
    71e4:	f001 ff9f 	bl	9126 <assert_print>
    71e8:	4805      	ldr	r0, [pc, #20]	; (7200 <z_unpend_thread_no_timeout+0x78>)
    71ea:	21b9      	movs	r1, #185	; 0xb9
    71ec:	f001 ff94 	bl	9118 <assert_post_action>
	__asm__ volatile(
    71f0:	f385 8811 	msr	BASEPRI, r5
    71f4:	f3bf 8f6f 	isb	sy
	}
}
    71f8:	bd38      	pop	{r3, r4, r5, pc}
    71fa:	bf00      	nop
    71fc:	20000cb0 	.word	0x20000cb0
    7200:	0000a587 	.word	0x0000a587
    7204:	0000a5e0 	.word	0x0000a5e0
    7208:	0000a092 	.word	0x0000a092
    720c:	0000a5f5 	.word	0x0000a5f5
    7210:	0000a5b4 	.word	0x0000a5b4
    7214:	0000a5cb 	.word	0x0000a5cb

00007218 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7218:	b538      	push	{r3, r4, r5, lr}
    721a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    721c:	460d      	mov	r5, r1
    721e:	b9e9      	cbnz	r1, 725c <z_reschedule+0x44>
    7220:	f3ef 8305 	mrs	r3, IPSR
    7224:	b9d3      	cbnz	r3, 725c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    7226:	4b19      	ldr	r3, [pc, #100]	; (728c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    7228:	69da      	ldr	r2, [r3, #28]
    722a:	689b      	ldr	r3, [r3, #8]
    722c:	429a      	cmp	r2, r3
    722e:	d015      	beq.n	725c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7230:	f7ff fb94 	bl	695c <z_spin_unlock_valid>
    7234:	b968      	cbnz	r0, 7252 <z_reschedule+0x3a>
    7236:	4a16      	ldr	r2, [pc, #88]	; (7290 <z_reschedule+0x78>)
    7238:	4916      	ldr	r1, [pc, #88]	; (7294 <z_reschedule+0x7c>)
    723a:	4817      	ldr	r0, [pc, #92]	; (7298 <z_reschedule+0x80>)
    723c:	23d0      	movs	r3, #208	; 0xd0
    723e:	f001 ff72 	bl	9126 <assert_print>
    7242:	4816      	ldr	r0, [pc, #88]	; (729c <z_reschedule+0x84>)
    7244:	4621      	mov	r1, r4
    7246:	f001 ff6e 	bl	9126 <assert_print>
    724a:	4811      	ldr	r0, [pc, #68]	; (7290 <z_reschedule+0x78>)
    724c:	21d0      	movs	r1, #208	; 0xd0
    724e:	f001 ff63 	bl	9118 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    7256:	2000      	movs	r0, #0
    7258:	f7fb bfc2 	b.w	31e0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    725c:	4620      	mov	r0, r4
    725e:	f7ff fb7d 	bl	695c <z_spin_unlock_valid>
    7262:	b968      	cbnz	r0, 7280 <z_reschedule+0x68>
    7264:	4a0a      	ldr	r2, [pc, #40]	; (7290 <z_reschedule+0x78>)
    7266:	490b      	ldr	r1, [pc, #44]	; (7294 <z_reschedule+0x7c>)
    7268:	480b      	ldr	r0, [pc, #44]	; (7298 <z_reschedule+0x80>)
    726a:	23b9      	movs	r3, #185	; 0xb9
    726c:	f001 ff5b 	bl	9126 <assert_print>
    7270:	480a      	ldr	r0, [pc, #40]	; (729c <z_reschedule+0x84>)
    7272:	4621      	mov	r1, r4
    7274:	f001 ff57 	bl	9126 <assert_print>
    7278:	4805      	ldr	r0, [pc, #20]	; (7290 <z_reschedule+0x78>)
    727a:	21b9      	movs	r1, #185	; 0xb9
    727c:	f001 ff4c 	bl	9118 <assert_post_action>
    7280:	f385 8811 	msr	BASEPRI, r5
    7284:	f3bf 8f6f 	isb	sy
    7288:	bd38      	pop	{r3, r4, r5, pc}
    728a:	bf00      	nop
    728c:	20000c74 	.word	0x20000c74
    7290:	0000a587 	.word	0x0000a587
    7294:	0000a5b4 	.word	0x0000a5b4
    7298:	0000a092 	.word	0x0000a092
    729c:	0000a5cb 	.word	0x0000a5cb

000072a0 <z_sched_start>:
{
    72a0:	b538      	push	{r3, r4, r5, lr}
    72a2:	4604      	mov	r4, r0
	__asm__ volatile(
    72a4:	f04f 0340 	mov.w	r3, #64	; 0x40
    72a8:	f3ef 8511 	mrs	r5, BASEPRI
    72ac:	f383 8812 	msr	BASEPRI_MAX, r3
    72b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72b4:	481d      	ldr	r0, [pc, #116]	; (732c <z_sched_start+0x8c>)
    72b6:	f7ff fb43 	bl	6940 <z_spin_lock_valid>
    72ba:	b968      	cbnz	r0, 72d8 <z_sched_start+0x38>
    72bc:	4a1c      	ldr	r2, [pc, #112]	; (7330 <z_sched_start+0x90>)
    72be:	491d      	ldr	r1, [pc, #116]	; (7334 <z_sched_start+0x94>)
    72c0:	481d      	ldr	r0, [pc, #116]	; (7338 <z_sched_start+0x98>)
    72c2:	238e      	movs	r3, #142	; 0x8e
    72c4:	f001 ff2f 	bl	9126 <assert_print>
    72c8:	4918      	ldr	r1, [pc, #96]	; (732c <z_sched_start+0x8c>)
    72ca:	481c      	ldr	r0, [pc, #112]	; (733c <z_sched_start+0x9c>)
    72cc:	f001 ff2b 	bl	9126 <assert_print>
    72d0:	4817      	ldr	r0, [pc, #92]	; (7330 <z_sched_start+0x90>)
    72d2:	218e      	movs	r1, #142	; 0x8e
    72d4:	f001 ff20 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    72d8:	4814      	ldr	r0, [pc, #80]	; (732c <z_sched_start+0x8c>)
    72da:	f7ff fb4f 	bl	697c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    72de:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    72e0:	075a      	lsls	r2, r3, #29
    72e2:	d416      	bmi.n	7312 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72e4:	4811      	ldr	r0, [pc, #68]	; (732c <z_sched_start+0x8c>)
    72e6:	f7ff fb39 	bl	695c <z_spin_unlock_valid>
    72ea:	b968      	cbnz	r0, 7308 <z_sched_start+0x68>
    72ec:	4a10      	ldr	r2, [pc, #64]	; (7330 <z_sched_start+0x90>)
    72ee:	4914      	ldr	r1, [pc, #80]	; (7340 <z_sched_start+0xa0>)
    72f0:	4811      	ldr	r0, [pc, #68]	; (7338 <z_sched_start+0x98>)
    72f2:	23b9      	movs	r3, #185	; 0xb9
    72f4:	f001 ff17 	bl	9126 <assert_print>
    72f8:	490c      	ldr	r1, [pc, #48]	; (732c <z_sched_start+0x8c>)
    72fa:	4812      	ldr	r0, [pc, #72]	; (7344 <z_sched_start+0xa4>)
    72fc:	f001 ff13 	bl	9126 <assert_print>
    7300:	480b      	ldr	r0, [pc, #44]	; (7330 <z_sched_start+0x90>)
    7302:	21b9      	movs	r1, #185	; 0xb9
    7304:	f001 ff08 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7308:	f385 8811 	msr	BASEPRI, r5
    730c:	f3bf 8f6f 	isb	sy
}
    7310:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7312:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    7316:	4620      	mov	r0, r4
    7318:	7363      	strb	r3, [r4, #13]
    731a:	f7ff fe3b 	bl	6f94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    731e:	4629      	mov	r1, r5
    7320:	4802      	ldr	r0, [pc, #8]	; (732c <z_sched_start+0x8c>)
}
    7322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    7326:	f7ff bf77 	b.w	7218 <z_reschedule>
    732a:	bf00      	nop
    732c:	20000cb0 	.word	0x20000cb0
    7330:	0000a587 	.word	0x0000a587
    7334:	0000a5e0 	.word	0x0000a5e0
    7338:	0000a092 	.word	0x0000a092
    733c:	0000a5f5 	.word	0x0000a5f5
    7340:	0000a5b4 	.word	0x0000a5b4
    7344:	0000a5cb 	.word	0x0000a5cb

00007348 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7348:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    734a:	f04f 0340 	mov.w	r3, #64	; 0x40
    734e:	f3ef 8511 	mrs	r5, BASEPRI
    7352:	f383 8812 	msr	BASEPRI_MAX, r3
    7356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    735a:	4829      	ldr	r0, [pc, #164]	; (7400 <k_sched_lock+0xb8>)
    735c:	f7ff faf0 	bl	6940 <z_spin_lock_valid>
    7360:	b968      	cbnz	r0, 737e <k_sched_lock+0x36>
    7362:	4a28      	ldr	r2, [pc, #160]	; (7404 <k_sched_lock+0xbc>)
    7364:	4928      	ldr	r1, [pc, #160]	; (7408 <k_sched_lock+0xc0>)
    7366:	4829      	ldr	r0, [pc, #164]	; (740c <k_sched_lock+0xc4>)
    7368:	238e      	movs	r3, #142	; 0x8e
    736a:	f001 fedc 	bl	9126 <assert_print>
    736e:	4924      	ldr	r1, [pc, #144]	; (7400 <k_sched_lock+0xb8>)
    7370:	4827      	ldr	r0, [pc, #156]	; (7410 <k_sched_lock+0xc8>)
    7372:	f001 fed8 	bl	9126 <assert_print>
    7376:	4823      	ldr	r0, [pc, #140]	; (7404 <k_sched_lock+0xbc>)
    7378:	218e      	movs	r1, #142	; 0x8e
    737a:	f001 fecd 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    737e:	4820      	ldr	r0, [pc, #128]	; (7400 <k_sched_lock+0xb8>)
    7380:	f7ff fafc 	bl	697c <z_spin_lock_set_owner>
    7384:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7388:	b163      	cbz	r3, 73a4 <k_sched_lock+0x5c>
    738a:	4922      	ldr	r1, [pc, #136]	; (7414 <k_sched_lock+0xcc>)
    738c:	4a22      	ldr	r2, [pc, #136]	; (7418 <k_sched_lock+0xd0>)
    738e:	481f      	ldr	r0, [pc, #124]	; (740c <k_sched_lock+0xc4>)
    7390:	23fd      	movs	r3, #253	; 0xfd
    7392:	f001 fec8 	bl	9126 <assert_print>
    7396:	4821      	ldr	r0, [pc, #132]	; (741c <k_sched_lock+0xd4>)
    7398:	f001 fec5 	bl	9126 <assert_print>
    739c:	481e      	ldr	r0, [pc, #120]	; (7418 <k_sched_lock+0xd0>)
    739e:	21fd      	movs	r1, #253	; 0xfd
    73a0:	f001 feba 	bl	9118 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    73a4:	4c1e      	ldr	r4, [pc, #120]	; (7420 <k_sched_lock+0xd8>)
    73a6:	68a3      	ldr	r3, [r4, #8]
    73a8:	7bdb      	ldrb	r3, [r3, #15]
    73aa:	2b01      	cmp	r3, #1
    73ac:	d10c      	bne.n	73c8 <k_sched_lock+0x80>
    73ae:	491d      	ldr	r1, [pc, #116]	; (7424 <k_sched_lock+0xdc>)
    73b0:	4a19      	ldr	r2, [pc, #100]	; (7418 <k_sched_lock+0xd0>)
    73b2:	4816      	ldr	r0, [pc, #88]	; (740c <k_sched_lock+0xc4>)
    73b4:	23fe      	movs	r3, #254	; 0xfe
    73b6:	f001 feb6 	bl	9126 <assert_print>
    73ba:	4818      	ldr	r0, [pc, #96]	; (741c <k_sched_lock+0xd4>)
    73bc:	f001 feb3 	bl	9126 <assert_print>
    73c0:	4815      	ldr	r0, [pc, #84]	; (7418 <k_sched_lock+0xd0>)
    73c2:	21fe      	movs	r1, #254	; 0xfe
    73c4:	f001 fea8 	bl	9118 <assert_post_action>
	--_current->base.sched_locked;
    73c8:	68a2      	ldr	r2, [r4, #8]
    73ca:	7bd3      	ldrb	r3, [r2, #15]
    73cc:	3b01      	subs	r3, #1
    73ce:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73d0:	480b      	ldr	r0, [pc, #44]	; (7400 <k_sched_lock+0xb8>)
    73d2:	f7ff fac3 	bl	695c <z_spin_unlock_valid>
    73d6:	b968      	cbnz	r0, 73f4 <k_sched_lock+0xac>
    73d8:	4a0a      	ldr	r2, [pc, #40]	; (7404 <k_sched_lock+0xbc>)
    73da:	4913      	ldr	r1, [pc, #76]	; (7428 <k_sched_lock+0xe0>)
    73dc:	480b      	ldr	r0, [pc, #44]	; (740c <k_sched_lock+0xc4>)
    73de:	23b9      	movs	r3, #185	; 0xb9
    73e0:	f001 fea1 	bl	9126 <assert_print>
    73e4:	4906      	ldr	r1, [pc, #24]	; (7400 <k_sched_lock+0xb8>)
    73e6:	4811      	ldr	r0, [pc, #68]	; (742c <k_sched_lock+0xe4>)
    73e8:	f001 fe9d 	bl	9126 <assert_print>
    73ec:	4805      	ldr	r0, [pc, #20]	; (7404 <k_sched_lock+0xbc>)
    73ee:	21b9      	movs	r1, #185	; 0xb9
    73f0:	f001 fe92 	bl	9118 <assert_post_action>
	__asm__ volatile(
    73f4:	f385 8811 	msr	BASEPRI, r5
    73f8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    73fc:	bd38      	pop	{r3, r4, r5, pc}
    73fe:	bf00      	nop
    7400:	20000cb0 	.word	0x20000cb0
    7404:	0000a587 	.word	0x0000a587
    7408:	0000a5e0 	.word	0x0000a5e0
    740c:	0000a092 	.word	0x0000a092
    7410:	0000a5f5 	.word	0x0000a5f5
    7414:	0000b8f7 	.word	0x0000b8f7
    7418:	0000ba02 	.word	0x0000ba02
    741c:	0000ba2d 	.word	0x0000ba2d
    7420:	20000c74 	.word	0x20000c74
    7424:	0000ba30 	.word	0x0000ba30
    7428:	0000a5b4 	.word	0x0000a5b4
    742c:	0000a5cb 	.word	0x0000a5cb

00007430 <k_sched_unlock>:

void k_sched_unlock(void)
{
    7430:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7432:	f04f 0340 	mov.w	r3, #64	; 0x40
    7436:	f3ef 8511 	mrs	r5, BASEPRI
    743a:	f383 8812 	msr	BASEPRI_MAX, r3
    743e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7442:	482d      	ldr	r0, [pc, #180]	; (74f8 <k_sched_unlock+0xc8>)
    7444:	f7ff fa7c 	bl	6940 <z_spin_lock_valid>
    7448:	b968      	cbnz	r0, 7466 <k_sched_unlock+0x36>
    744a:	4a2c      	ldr	r2, [pc, #176]	; (74fc <k_sched_unlock+0xcc>)
    744c:	492c      	ldr	r1, [pc, #176]	; (7500 <k_sched_unlock+0xd0>)
    744e:	482d      	ldr	r0, [pc, #180]	; (7504 <k_sched_unlock+0xd4>)
    7450:	238e      	movs	r3, #142	; 0x8e
    7452:	f001 fe68 	bl	9126 <assert_print>
    7456:	4928      	ldr	r1, [pc, #160]	; (74f8 <k_sched_unlock+0xc8>)
    7458:	482b      	ldr	r0, [pc, #172]	; (7508 <k_sched_unlock+0xd8>)
    745a:	f001 fe64 	bl	9126 <assert_print>
    745e:	4827      	ldr	r0, [pc, #156]	; (74fc <k_sched_unlock+0xcc>)
    7460:	218e      	movs	r1, #142	; 0x8e
    7462:	f001 fe59 	bl	9118 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    7466:	4c29      	ldr	r4, [pc, #164]	; (750c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7468:	4823      	ldr	r0, [pc, #140]	; (74f8 <k_sched_unlock+0xc8>)
    746a:	f7ff fa87 	bl	697c <z_spin_lock_set_owner>
    746e:	68a3      	ldr	r3, [r4, #8]
    7470:	7bdb      	ldrb	r3, [r3, #15]
    7472:	b973      	cbnz	r3, 7492 <k_sched_unlock+0x62>
    7474:	4926      	ldr	r1, [pc, #152]	; (7510 <k_sched_unlock+0xe0>)
    7476:	4a27      	ldr	r2, [pc, #156]	; (7514 <k_sched_unlock+0xe4>)
    7478:	4822      	ldr	r0, [pc, #136]	; (7504 <k_sched_unlock+0xd4>)
    747a:	f240 33bb 	movw	r3, #955	; 0x3bb
    747e:	f001 fe52 	bl	9126 <assert_print>
    7482:	4825      	ldr	r0, [pc, #148]	; (7518 <k_sched_unlock+0xe8>)
    7484:	f001 fe4f 	bl	9126 <assert_print>
    7488:	4822      	ldr	r0, [pc, #136]	; (7514 <k_sched_unlock+0xe4>)
    748a:	f240 31bb 	movw	r1, #955	; 0x3bb
    748e:	f001 fe43 	bl	9118 <assert_post_action>
    7492:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7496:	b173      	cbz	r3, 74b6 <k_sched_unlock+0x86>
    7498:	4920      	ldr	r1, [pc, #128]	; (751c <k_sched_unlock+0xec>)
    749a:	4a1e      	ldr	r2, [pc, #120]	; (7514 <k_sched_unlock+0xe4>)
    749c:	4819      	ldr	r0, [pc, #100]	; (7504 <k_sched_unlock+0xd4>)
    749e:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    74a2:	f001 fe40 	bl	9126 <assert_print>
    74a6:	481c      	ldr	r0, [pc, #112]	; (7518 <k_sched_unlock+0xe8>)
    74a8:	f001 fe3d 	bl	9126 <assert_print>
    74ac:	4819      	ldr	r0, [pc, #100]	; (7514 <k_sched_unlock+0xe4>)
    74ae:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    74b2:	f001 fe31 	bl	9118 <assert_post_action>

		++_current->base.sched_locked;
    74b6:	68a2      	ldr	r2, [r4, #8]
    74b8:	7bd3      	ldrb	r3, [r2, #15]
    74ba:	3301      	adds	r3, #1
		update_cache(0);
    74bc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    74be:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    74c0:	f7ff fd30 	bl	6f24 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74c4:	480c      	ldr	r0, [pc, #48]	; (74f8 <k_sched_unlock+0xc8>)
    74c6:	f7ff fa49 	bl	695c <z_spin_unlock_valid>
    74ca:	b968      	cbnz	r0, 74e8 <k_sched_unlock+0xb8>
    74cc:	4a0b      	ldr	r2, [pc, #44]	; (74fc <k_sched_unlock+0xcc>)
    74ce:	4914      	ldr	r1, [pc, #80]	; (7520 <k_sched_unlock+0xf0>)
    74d0:	480c      	ldr	r0, [pc, #48]	; (7504 <k_sched_unlock+0xd4>)
    74d2:	23b9      	movs	r3, #185	; 0xb9
    74d4:	f001 fe27 	bl	9126 <assert_print>
    74d8:	4907      	ldr	r1, [pc, #28]	; (74f8 <k_sched_unlock+0xc8>)
    74da:	4812      	ldr	r0, [pc, #72]	; (7524 <k_sched_unlock+0xf4>)
    74dc:	f001 fe23 	bl	9126 <assert_print>
    74e0:	4806      	ldr	r0, [pc, #24]	; (74fc <k_sched_unlock+0xcc>)
    74e2:	21b9      	movs	r1, #185	; 0xb9
    74e4:	f001 fe18 	bl	9118 <assert_post_action>
	__asm__ volatile(
    74e8:	f385 8811 	msr	BASEPRI, r5
    74ec:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    74f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    74f4:	f002 ba4b 	b.w	998e <z_reschedule_unlocked>
    74f8:	20000cb0 	.word	0x20000cb0
    74fc:	0000a587 	.word	0x0000a587
    7500:	0000a5e0 	.word	0x0000a5e0
    7504:	0000a092 	.word	0x0000a092
    7508:	0000a5f5 	.word	0x0000a5f5
    750c:	20000c74 	.word	0x20000c74
    7510:	0000bb39 	.word	0x0000bb39
    7514:	0000bacf 	.word	0x0000bacf
    7518:	0000ba2d 	.word	0x0000ba2d
    751c:	0000b8f7 	.word	0x0000b8f7
    7520:	0000a5b4 	.word	0x0000a5b4
    7524:	0000a5cb 	.word	0x0000a5cb

00007528 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7528:	4b0c      	ldr	r3, [pc, #48]	; (755c <z_priq_dumb_remove+0x34>)
    752a:	4299      	cmp	r1, r3
{
    752c:	b510      	push	{r4, lr}
    752e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7530:	d10b      	bne.n	754a <z_priq_dumb_remove+0x22>
    7532:	490b      	ldr	r1, [pc, #44]	; (7560 <z_priq_dumb_remove+0x38>)
    7534:	480b      	ldr	r0, [pc, #44]	; (7564 <z_priq_dumb_remove+0x3c>)
    7536:	4a0c      	ldr	r2, [pc, #48]	; (7568 <z_priq_dumb_remove+0x40>)
    7538:	f240 433d 	movw	r3, #1085	; 0x43d
    753c:	f001 fdf3 	bl	9126 <assert_print>
    7540:	4809      	ldr	r0, [pc, #36]	; (7568 <z_priq_dumb_remove+0x40>)
    7542:	f240 413d 	movw	r1, #1085	; 0x43d
    7546:	f001 fde7 	bl	9118 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    754a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    754e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7550:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7552:	2300      	movs	r3, #0
	node->prev = NULL;
    7554:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7558:	bd10      	pop	{r4, pc}
    755a:	bf00      	nop
    755c:	20000438 	.word	0x20000438
    7560:	0000bb18 	.word	0x0000bb18
    7564:	0000a092 	.word	0x0000a092
    7568:	0000bacf 	.word	0x0000bacf

0000756c <move_thread_to_end_of_prio_q>:
{
    756c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    756e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7572:	7b43      	ldrb	r3, [r0, #13]
    7574:	2a00      	cmp	r2, #0
{
    7576:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7578:	da06      	bge.n	7588 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    757a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    757e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7580:	4601      	mov	r1, r0
    7582:	481d      	ldr	r0, [pc, #116]	; (75f8 <move_thread_to_end_of_prio_q+0x8c>)
    7584:	f7ff ffd0 	bl	7528 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7588:	7b63      	ldrb	r3, [r4, #13]
    758a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    758e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7590:	4b1a      	ldr	r3, [pc, #104]	; (75fc <move_thread_to_end_of_prio_q+0x90>)
    7592:	429c      	cmp	r4, r3
    7594:	d109      	bne.n	75aa <move_thread_to_end_of_prio_q+0x3e>
    7596:	491a      	ldr	r1, [pc, #104]	; (7600 <move_thread_to_end_of_prio_q+0x94>)
    7598:	481a      	ldr	r0, [pc, #104]	; (7604 <move_thread_to_end_of_prio_q+0x98>)
    759a:	4a1b      	ldr	r2, [pc, #108]	; (7608 <move_thread_to_end_of_prio_q+0x9c>)
    759c:	23ba      	movs	r3, #186	; 0xba
    759e:	f001 fdc2 	bl	9126 <assert_print>
    75a2:	4819      	ldr	r0, [pc, #100]	; (7608 <move_thread_to_end_of_prio_q+0x9c>)
    75a4:	21ba      	movs	r1, #186	; 0xba
    75a6:	f001 fdb7 	bl	9118 <assert_post_action>
	return list->head == list;
    75aa:	4a18      	ldr	r2, [pc, #96]	; (760c <move_thread_to_end_of_prio_q+0xa0>)
    75ac:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    75ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    75b0:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75b4:	428b      	cmp	r3, r1
    75b6:	bf08      	it	eq
    75b8:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    75ba:	b923      	cbnz	r3, 75c6 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    75bc:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    75c0:	6004      	str	r4, [r0, #0]
	list->tail = node;
    75c2:	6254      	str	r4, [r2, #36]	; 0x24
}
    75c4:	e00c      	b.n	75e0 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    75c6:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    75ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    75ce:	42b5      	cmp	r5, r6
    75d0:	d00e      	beq.n	75f0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    75d2:	42ae      	cmp	r6, r5
    75d4:	dd0c      	ble.n	75f0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    75d6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    75d8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    75dc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    75de:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    75e0:	6890      	ldr	r0, [r2, #8]
    75e2:	1b03      	subs	r3, r0, r4
    75e4:	4258      	negs	r0, r3
}
    75e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    75ea:	4158      	adcs	r0, r3
    75ec:	f7ff bc9a 	b.w	6f24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    75f0:	4298      	cmp	r0, r3
    75f2:	d0e3      	beq.n	75bc <move_thread_to_end_of_prio_q+0x50>
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	e7e0      	b.n	75ba <move_thread_to_end_of_prio_q+0x4e>
    75f8:	20000c94 	.word	0x20000c94
    75fc:	20000438 	.word	0x20000438
    7600:	0000bb18 	.word	0x0000bb18
    7604:	0000a092 	.word	0x0000a092
    7608:	0000bacf 	.word	0x0000bacf
    760c:	20000c74 	.word	0x20000c74

00007610 <z_time_slice>:
{
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	4605      	mov	r5, r0
	__asm__ volatile(
    7614:	f04f 0340 	mov.w	r3, #64	; 0x40
    7618:	f3ef 8611 	mrs	r6, BASEPRI
    761c:	f383 8812 	msr	BASEPRI_MAX, r3
    7620:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7624:	482a      	ldr	r0, [pc, #168]	; (76d0 <z_time_slice+0xc0>)
    7626:	f7ff f98b 	bl	6940 <z_spin_lock_valid>
    762a:	b968      	cbnz	r0, 7648 <z_time_slice+0x38>
    762c:	4a29      	ldr	r2, [pc, #164]	; (76d4 <z_time_slice+0xc4>)
    762e:	492a      	ldr	r1, [pc, #168]	; (76d8 <z_time_slice+0xc8>)
    7630:	482a      	ldr	r0, [pc, #168]	; (76dc <z_time_slice+0xcc>)
    7632:	238e      	movs	r3, #142	; 0x8e
    7634:	f001 fd77 	bl	9126 <assert_print>
    7638:	4925      	ldr	r1, [pc, #148]	; (76d0 <z_time_slice+0xc0>)
    763a:	4829      	ldr	r0, [pc, #164]	; (76e0 <z_time_slice+0xd0>)
    763c:	f001 fd73 	bl	9126 <assert_print>
    7640:	4824      	ldr	r0, [pc, #144]	; (76d4 <z_time_slice+0xc4>)
    7642:	218e      	movs	r1, #142	; 0x8e
    7644:	f001 fd68 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7648:	4821      	ldr	r0, [pc, #132]	; (76d0 <z_time_slice+0xc0>)
    764a:	f7ff f997 	bl	697c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    764e:	4b25      	ldr	r3, [pc, #148]	; (76e4 <z_time_slice+0xd4>)
    7650:	4a25      	ldr	r2, [pc, #148]	; (76e8 <z_time_slice+0xd8>)
    7652:	689c      	ldr	r4, [r3, #8]
    7654:	6811      	ldr	r1, [r2, #0]
    7656:	428c      	cmp	r4, r1
    7658:	d119      	bne.n	768e <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    765a:	4620      	mov	r0, r4
    765c:	f7ff fc4e 	bl	6efc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7660:	481b      	ldr	r0, [pc, #108]	; (76d0 <z_time_slice+0xc0>)
    7662:	f7ff f97b 	bl	695c <z_spin_unlock_valid>
    7666:	b968      	cbnz	r0, 7684 <z_time_slice+0x74>
    7668:	4a1a      	ldr	r2, [pc, #104]	; (76d4 <z_time_slice+0xc4>)
    766a:	4920      	ldr	r1, [pc, #128]	; (76ec <z_time_slice+0xdc>)
    766c:	481b      	ldr	r0, [pc, #108]	; (76dc <z_time_slice+0xcc>)
    766e:	23b9      	movs	r3, #185	; 0xb9
    7670:	f001 fd59 	bl	9126 <assert_print>
    7674:	4916      	ldr	r1, [pc, #88]	; (76d0 <z_time_slice+0xc0>)
    7676:	481e      	ldr	r0, [pc, #120]	; (76f0 <z_time_slice+0xe0>)
    7678:	f001 fd55 	bl	9126 <assert_print>
    767c:	4815      	ldr	r0, [pc, #84]	; (76d4 <z_time_slice+0xc4>)
    767e:	21b9      	movs	r1, #185	; 0xb9
    7680:	f001 fd4a 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7684:	f386 8811 	msr	BASEPRI, r6
    7688:	f3bf 8f6f 	isb	sy
}
    768c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    768e:	2100      	movs	r1, #0
    7690:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    7692:	4a18      	ldr	r2, [pc, #96]	; (76f4 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    7694:	6812      	ldr	r2, [r2, #0]
    7696:	b1c2      	cbz	r2, 76ca <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    7698:	89e2      	ldrh	r2, [r4, #14]
    769a:	2a7f      	cmp	r2, #127	; 0x7f
    769c:	d815      	bhi.n	76ca <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    769e:	7b62      	ldrb	r2, [r4, #13]
    76a0:	06d2      	lsls	r2, r2, #27
    76a2:	d112      	bne.n	76ca <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    76a4:	4a14      	ldr	r2, [pc, #80]	; (76f8 <z_time_slice+0xe8>)
    76a6:	f994 100e 	ldrsb.w	r1, [r4, #14]
    76aa:	6812      	ldr	r2, [r2, #0]
    76ac:	4291      	cmp	r1, r2
    76ae:	db0c      	blt.n	76ca <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    76b0:	4a12      	ldr	r2, [pc, #72]	; (76fc <z_time_slice+0xec>)
    76b2:	4294      	cmp	r4, r2
    76b4:	d009      	beq.n	76ca <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    76b6:	691a      	ldr	r2, [r3, #16]
    76b8:	42aa      	cmp	r2, r5
    76ba:	dc03      	bgt.n	76c4 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    76bc:	4620      	mov	r0, r4
    76be:	f7ff ff55 	bl	756c <move_thread_to_end_of_prio_q>
    76c2:	e7ca      	b.n	765a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    76c4:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    76c6:	611a      	str	r2, [r3, #16]
    76c8:	e7ca      	b.n	7660 <z_time_slice+0x50>
    76ca:	2200      	movs	r2, #0
    76cc:	e7fb      	b.n	76c6 <z_time_slice+0xb6>
    76ce:	bf00      	nop
    76d0:	20000cb0 	.word	0x20000cb0
    76d4:	0000a587 	.word	0x0000a587
    76d8:	0000a5e0 	.word	0x0000a5e0
    76dc:	0000a092 	.word	0x0000a092
    76e0:	0000a5f5 	.word	0x0000a5f5
    76e4:	20000c74 	.word	0x20000c74
    76e8:	20000ca4 	.word	0x20000ca4
    76ec:	0000a5b4 	.word	0x0000a5b4
    76f0:	0000a5cb 	.word	0x0000a5cb
    76f4:	20000cac 	.word	0x20000cac
    76f8:	20000ca8 	.word	0x20000ca8
    76fc:	20000438 	.word	0x20000438

00007700 <unready_thread>:
{
    7700:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    7702:	f990 200d 	ldrsb.w	r2, [r0, #13]
    7706:	7b43      	ldrb	r3, [r0, #13]
    7708:	2a00      	cmp	r2, #0
{
    770a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    770c:	da06      	bge.n	771c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    770e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7712:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7714:	4601      	mov	r1, r0
    7716:	4806      	ldr	r0, [pc, #24]	; (7730 <unready_thread+0x30>)
    7718:	f7ff ff06 	bl	7528 <z_priq_dumb_remove>
	update_cache(thread == _current);
    771c:	4b05      	ldr	r3, [pc, #20]	; (7734 <unready_thread+0x34>)
    771e:	6898      	ldr	r0, [r3, #8]
    7720:	1b03      	subs	r3, r0, r4
    7722:	4258      	negs	r0, r3
}
    7724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7728:	4158      	adcs	r0, r3
    772a:	f7ff bbfb 	b.w	6f24 <update_cache>
    772e:	bf00      	nop
    7730:	20000c94 	.word	0x20000c94
    7734:	20000c74 	.word	0x20000c74

00007738 <add_to_waitq_locked>:
{
    7738:	b538      	push	{r3, r4, r5, lr}
    773a:	4604      	mov	r4, r0
    773c:	460d      	mov	r5, r1
	unready_thread(thread);
    773e:	f7ff ffdf 	bl	7700 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7742:	7b63      	ldrb	r3, [r4, #13]
    7744:	f043 0302 	orr.w	r3, r3, #2
    7748:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    774a:	b34d      	cbz	r5, 77a0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    774c:	4b15      	ldr	r3, [pc, #84]	; (77a4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    774e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7750:	429c      	cmp	r4, r3
    7752:	d109      	bne.n	7768 <add_to_waitq_locked+0x30>
    7754:	4914      	ldr	r1, [pc, #80]	; (77a8 <add_to_waitq_locked+0x70>)
    7756:	4815      	ldr	r0, [pc, #84]	; (77ac <add_to_waitq_locked+0x74>)
    7758:	4a15      	ldr	r2, [pc, #84]	; (77b0 <add_to_waitq_locked+0x78>)
    775a:	23ba      	movs	r3, #186	; 0xba
    775c:	f001 fce3 	bl	9126 <assert_print>
    7760:	4813      	ldr	r0, [pc, #76]	; (77b0 <add_to_waitq_locked+0x78>)
    7762:	21ba      	movs	r1, #186	; 0xba
    7764:	f001 fcd8 	bl	9118 <assert_post_action>
	return list->head == list;
    7768:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    776a:	429d      	cmp	r5, r3
    776c:	d109      	bne.n	7782 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    776e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7770:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7774:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7776:	606c      	str	r4, [r5, #4]
}
    7778:	e012      	b.n	77a0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    777a:	686a      	ldr	r2, [r5, #4]
    777c:	4293      	cmp	r3, r2
    777e:	d0f6      	beq.n	776e <add_to_waitq_locked+0x36>
    7780:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7782:	2b00      	cmp	r3, #0
    7784:	d0f3      	beq.n	776e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    7786:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    778a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    778e:	428a      	cmp	r2, r1
    7790:	d0f3      	beq.n	777a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7792:	4291      	cmp	r1, r2
    7794:	ddf1      	ble.n	777a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    7796:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7798:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    779c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    779e:	605c      	str	r4, [r3, #4]
}
    77a0:	bd38      	pop	{r3, r4, r5, pc}
    77a2:	bf00      	nop
    77a4:	20000438 	.word	0x20000438
    77a8:	0000bb18 	.word	0x0000bb18
    77ac:	0000a092 	.word	0x0000a092
    77b0:	0000bacf 	.word	0x0000bacf

000077b4 <pend>:
{
    77b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77b8:	4604      	mov	r4, r0
    77ba:	4688      	mov	r8, r1
    77bc:	4616      	mov	r6, r2
    77be:	461d      	mov	r5, r3
	__asm__ volatile(
    77c0:	f04f 0340 	mov.w	r3, #64	; 0x40
    77c4:	f3ef 8711 	mrs	r7, BASEPRI
    77c8:	f383 8812 	msr	BASEPRI_MAX, r3
    77cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77d0:	481f      	ldr	r0, [pc, #124]	; (7850 <pend+0x9c>)
    77d2:	f7ff f8b5 	bl	6940 <z_spin_lock_valid>
    77d6:	b968      	cbnz	r0, 77f4 <pend+0x40>
    77d8:	4a1e      	ldr	r2, [pc, #120]	; (7854 <pend+0xa0>)
    77da:	491f      	ldr	r1, [pc, #124]	; (7858 <pend+0xa4>)
    77dc:	481f      	ldr	r0, [pc, #124]	; (785c <pend+0xa8>)
    77de:	238e      	movs	r3, #142	; 0x8e
    77e0:	f001 fca1 	bl	9126 <assert_print>
    77e4:	491a      	ldr	r1, [pc, #104]	; (7850 <pend+0x9c>)
    77e6:	481e      	ldr	r0, [pc, #120]	; (7860 <pend+0xac>)
    77e8:	f001 fc9d 	bl	9126 <assert_print>
    77ec:	4819      	ldr	r0, [pc, #100]	; (7854 <pend+0xa0>)
    77ee:	218e      	movs	r1, #142	; 0x8e
    77f0:	f001 fc92 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    77f4:	4816      	ldr	r0, [pc, #88]	; (7850 <pend+0x9c>)
    77f6:	f7ff f8c1 	bl	697c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    77fa:	4620      	mov	r0, r4
    77fc:	4641      	mov	r1, r8
    77fe:	f7ff ff9b 	bl	7738 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7802:	4813      	ldr	r0, [pc, #76]	; (7850 <pend+0x9c>)
    7804:	f7ff f8aa 	bl	695c <z_spin_unlock_valid>
    7808:	b968      	cbnz	r0, 7826 <pend+0x72>
    780a:	4a12      	ldr	r2, [pc, #72]	; (7854 <pend+0xa0>)
    780c:	4915      	ldr	r1, [pc, #84]	; (7864 <pend+0xb0>)
    780e:	4813      	ldr	r0, [pc, #76]	; (785c <pend+0xa8>)
    7810:	23b9      	movs	r3, #185	; 0xb9
    7812:	f001 fc88 	bl	9126 <assert_print>
    7816:	490e      	ldr	r1, [pc, #56]	; (7850 <pend+0x9c>)
    7818:	4813      	ldr	r0, [pc, #76]	; (7868 <pend+0xb4>)
    781a:	f001 fc84 	bl	9126 <assert_print>
    781e:	480d      	ldr	r0, [pc, #52]	; (7854 <pend+0xa0>)
    7820:	21b9      	movs	r1, #185	; 0xb9
    7822:	f001 fc79 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7826:	f387 8811 	msr	BASEPRI, r7
    782a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    782e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7832:	bf08      	it	eq
    7834:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7838:	d008      	beq.n	784c <pend+0x98>
    783a:	4632      	mov	r2, r6
    783c:	462b      	mov	r3, r5
    783e:	f104 0018 	add.w	r0, r4, #24
    7842:	490a      	ldr	r1, [pc, #40]	; (786c <pend+0xb8>)
}
    7844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7848:	f000 bd08 	b.w	825c <z_add_timeout>
    784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7850:	20000cb0 	.word	0x20000cb0
    7854:	0000a587 	.word	0x0000a587
    7858:	0000a5e0 	.word	0x0000a5e0
    785c:	0000a092 	.word	0x0000a092
    7860:	0000a5f5 	.word	0x0000a5f5
    7864:	0000a5b4 	.word	0x0000a5b4
    7868:	0000a5cb 	.word	0x0000a5cb
    786c:	00007b15 	.word	0x00007b15

00007870 <z_pend_curr>:
{
    7870:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    7872:	4b11      	ldr	r3, [pc, #68]	; (78b8 <z_pend_curr+0x48>)
{
    7874:	4604      	mov	r4, r0
	pending_current = _current;
    7876:	6898      	ldr	r0, [r3, #8]
    7878:	4b10      	ldr	r3, [pc, #64]	; (78bc <z_pend_curr+0x4c>)
{
    787a:	460d      	mov	r5, r1
	pending_current = _current;
    787c:	6018      	str	r0, [r3, #0]
{
    787e:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7884:	f7ff ff96 	bl	77b4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7888:	4620      	mov	r0, r4
    788a:	f7ff f867 	bl	695c <z_spin_unlock_valid>
    788e:	b968      	cbnz	r0, 78ac <z_pend_curr+0x3c>
    7890:	4a0b      	ldr	r2, [pc, #44]	; (78c0 <z_pend_curr+0x50>)
    7892:	490c      	ldr	r1, [pc, #48]	; (78c4 <z_pend_curr+0x54>)
    7894:	480c      	ldr	r0, [pc, #48]	; (78c8 <z_pend_curr+0x58>)
    7896:	23d0      	movs	r3, #208	; 0xd0
    7898:	f001 fc45 	bl	9126 <assert_print>
    789c:	480b      	ldr	r0, [pc, #44]	; (78cc <z_pend_curr+0x5c>)
    789e:	4621      	mov	r1, r4
    78a0:	f001 fc41 	bl	9126 <assert_print>
    78a4:	4806      	ldr	r0, [pc, #24]	; (78c0 <z_pend_curr+0x50>)
    78a6:	21d0      	movs	r1, #208	; 0xd0
    78a8:	f001 fc36 	bl	9118 <assert_post_action>
    78ac:	4628      	mov	r0, r5
}
    78ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    78b2:	f7fb bc95 	b.w	31e0 <arch_swap>
    78b6:	bf00      	nop
    78b8:	20000c74 	.word	0x20000c74
    78bc:	20000ca4 	.word	0x20000ca4
    78c0:	0000a587 	.word	0x0000a587
    78c4:	0000a5b4 	.word	0x0000a5b4
    78c8:	0000a092 	.word	0x0000a092
    78cc:	0000a5cb 	.word	0x0000a5cb

000078d0 <z_set_prio>:
{
    78d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78d2:	4604      	mov	r4, r0
    78d4:	460e      	mov	r6, r1
	__asm__ volatile(
    78d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    78da:	f3ef 8711 	mrs	r7, BASEPRI
    78de:	f383 8812 	msr	BASEPRI_MAX, r3
    78e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78e6:	4839      	ldr	r0, [pc, #228]	; (79cc <z_set_prio+0xfc>)
    78e8:	f7ff f82a 	bl	6940 <z_spin_lock_valid>
    78ec:	b968      	cbnz	r0, 790a <z_set_prio+0x3a>
    78ee:	4a38      	ldr	r2, [pc, #224]	; (79d0 <z_set_prio+0x100>)
    78f0:	4938      	ldr	r1, [pc, #224]	; (79d4 <z_set_prio+0x104>)
    78f2:	4839      	ldr	r0, [pc, #228]	; (79d8 <z_set_prio+0x108>)
    78f4:	238e      	movs	r3, #142	; 0x8e
    78f6:	f001 fc16 	bl	9126 <assert_print>
    78fa:	4934      	ldr	r1, [pc, #208]	; (79cc <z_set_prio+0xfc>)
    78fc:	4837      	ldr	r0, [pc, #220]	; (79dc <z_set_prio+0x10c>)
    78fe:	f001 fc12 	bl	9126 <assert_print>
    7902:	4833      	ldr	r0, [pc, #204]	; (79d0 <z_set_prio+0x100>)
    7904:	218e      	movs	r1, #142	; 0x8e
    7906:	f001 fc07 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    790a:	4830      	ldr	r0, [pc, #192]	; (79cc <z_set_prio+0xfc>)
    790c:	f7ff f836 	bl	697c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    7910:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7912:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7914:	b276      	sxtb	r6, r6
    7916:	d128      	bne.n	796a <z_set_prio+0x9a>
	return node->next != NULL;
    7918:	69a5      	ldr	r5, [r4, #24]
    791a:	bb35      	cbnz	r5, 796a <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    791c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7920:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7922:	482f      	ldr	r0, [pc, #188]	; (79e0 <z_set_prio+0x110>)
    7924:	4621      	mov	r1, r4
    7926:	f7ff fdff 	bl	7528 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    792a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    792c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    792e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7932:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7934:	4b2b      	ldr	r3, [pc, #172]	; (79e4 <z_set_prio+0x114>)
    7936:	429c      	cmp	r4, r3
    7938:	d109      	bne.n	794e <z_set_prio+0x7e>
    793a:	492b      	ldr	r1, [pc, #172]	; (79e8 <z_set_prio+0x118>)
    793c:	4826      	ldr	r0, [pc, #152]	; (79d8 <z_set_prio+0x108>)
    793e:	4a2b      	ldr	r2, [pc, #172]	; (79ec <z_set_prio+0x11c>)
    7940:	23ba      	movs	r3, #186	; 0xba
    7942:	f001 fbf0 	bl	9126 <assert_print>
    7946:	4829      	ldr	r0, [pc, #164]	; (79ec <z_set_prio+0x11c>)
    7948:	21ba      	movs	r1, #186	; 0xba
    794a:	f001 fbe5 	bl	9118 <assert_post_action>
	return list->head == list;
    794e:	4a28      	ldr	r2, [pc, #160]	; (79f0 <z_set_prio+0x120>)
    7950:	4613      	mov	r3, r2
    7952:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7956:	4299      	cmp	r1, r3
    7958:	bf18      	it	ne
    795a:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    795c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    795e:	b9f5      	cbnz	r5, 799e <z_set_prio+0xce>
	node->prev = tail;
    7960:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    7964:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7966:	6254      	str	r4, [r2, #36]	; 0x24
}
    7968:	e026      	b.n	79b8 <z_set_prio+0xe8>
			thread->base.prio = prio;
    796a:	73a6      	strb	r6, [r4, #14]
    796c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    796e:	4817      	ldr	r0, [pc, #92]	; (79cc <z_set_prio+0xfc>)
    7970:	f7fe fff4 	bl	695c <z_spin_unlock_valid>
    7974:	b968      	cbnz	r0, 7992 <z_set_prio+0xc2>
    7976:	4a16      	ldr	r2, [pc, #88]	; (79d0 <z_set_prio+0x100>)
    7978:	491e      	ldr	r1, [pc, #120]	; (79f4 <z_set_prio+0x124>)
    797a:	4817      	ldr	r0, [pc, #92]	; (79d8 <z_set_prio+0x108>)
    797c:	23b9      	movs	r3, #185	; 0xb9
    797e:	f001 fbd2 	bl	9126 <assert_print>
    7982:	4912      	ldr	r1, [pc, #72]	; (79cc <z_set_prio+0xfc>)
    7984:	481c      	ldr	r0, [pc, #112]	; (79f8 <z_set_prio+0x128>)
    7986:	f001 fbce 	bl	9126 <assert_print>
    798a:	4811      	ldr	r0, [pc, #68]	; (79d0 <z_set_prio+0x100>)
    798c:	21b9      	movs	r1, #185	; 0xb9
    798e:	f001 fbc3 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7992:	f387 8811 	msr	BASEPRI, r7
    7996:	f3bf 8f6f 	isb	sy
}
    799a:	4620      	mov	r0, r4
    799c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    799e:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    79a2:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    79a6:	42b0      	cmp	r0, r6
    79a8:	d00b      	beq.n	79c2 <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    79aa:	4286      	cmp	r6, r0
    79ac:	dd09      	ble.n	79c2 <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    79ae:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    79b0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    79b4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    79b6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    79b8:	2001      	movs	r0, #1
    79ba:	f7ff fab3 	bl	6f24 <update_cache>
    79be:	2401      	movs	r4, #1
    79c0:	e7d5      	b.n	796e <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    79c2:	42a9      	cmp	r1, r5
    79c4:	d0cc      	beq.n	7960 <z_set_prio+0x90>
    79c6:	682d      	ldr	r5, [r5, #0]
    79c8:	e7c9      	b.n	795e <z_set_prio+0x8e>
    79ca:	bf00      	nop
    79cc:	20000cb0 	.word	0x20000cb0
    79d0:	0000a587 	.word	0x0000a587
    79d4:	0000a5e0 	.word	0x0000a5e0
    79d8:	0000a092 	.word	0x0000a092
    79dc:	0000a5f5 	.word	0x0000a5f5
    79e0:	20000c94 	.word	0x20000c94
    79e4:	20000438 	.word	0x20000438
    79e8:	0000bb18 	.word	0x0000bb18
    79ec:	0000bacf 	.word	0x0000bacf
    79f0:	20000c74 	.word	0x20000c74
    79f4:	0000a5b4 	.word	0x0000a5b4
    79f8:	0000a5cb 	.word	0x0000a5cb

000079fc <z_impl_k_thread_suspend>:
{
    79fc:	b570      	push	{r4, r5, r6, lr}
    79fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7a00:	3018      	adds	r0, #24
    7a02:	f000 fcf5 	bl	83f0 <z_abort_timeout>
	__asm__ volatile(
    7a06:	f04f 0340 	mov.w	r3, #64	; 0x40
    7a0a:	f3ef 8611 	mrs	r6, BASEPRI
    7a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a16:	4825      	ldr	r0, [pc, #148]	; (7aac <z_impl_k_thread_suspend+0xb0>)
    7a18:	f7fe ff92 	bl	6940 <z_spin_lock_valid>
    7a1c:	b968      	cbnz	r0, 7a3a <z_impl_k_thread_suspend+0x3e>
    7a1e:	4a24      	ldr	r2, [pc, #144]	; (7ab0 <z_impl_k_thread_suspend+0xb4>)
    7a20:	4924      	ldr	r1, [pc, #144]	; (7ab4 <z_impl_k_thread_suspend+0xb8>)
    7a22:	4825      	ldr	r0, [pc, #148]	; (7ab8 <z_impl_k_thread_suspend+0xbc>)
    7a24:	238e      	movs	r3, #142	; 0x8e
    7a26:	f001 fb7e 	bl	9126 <assert_print>
    7a2a:	4920      	ldr	r1, [pc, #128]	; (7aac <z_impl_k_thread_suspend+0xb0>)
    7a2c:	4823      	ldr	r0, [pc, #140]	; (7abc <z_impl_k_thread_suspend+0xc0>)
    7a2e:	f001 fb7a 	bl	9126 <assert_print>
    7a32:	481f      	ldr	r0, [pc, #124]	; (7ab0 <z_impl_k_thread_suspend+0xb4>)
    7a34:	218e      	movs	r1, #142	; 0x8e
    7a36:	f001 fb6f 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a3a:	481c      	ldr	r0, [pc, #112]	; (7aac <z_impl_k_thread_suspend+0xb0>)
    7a3c:	f7fe ff9e 	bl	697c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7a40:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    7a44:	7b63      	ldrb	r3, [r4, #13]
    7a46:	2a00      	cmp	r2, #0
    7a48:	da06      	bge.n	7a58 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7a4e:	481c      	ldr	r0, [pc, #112]	; (7ac0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a50:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7a52:	4621      	mov	r1, r4
    7a54:	f7ff fd68 	bl	7528 <z_priq_dumb_remove>
		update_cache(thread == _current);
    7a58:	4d1a      	ldr	r5, [pc, #104]	; (7ac4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7a5a:	7b63      	ldrb	r3, [r4, #13]
    7a5c:	68a8      	ldr	r0, [r5, #8]
    7a5e:	f043 0310 	orr.w	r3, r3, #16
    7a62:	7363      	strb	r3, [r4, #13]
    7a64:	1b03      	subs	r3, r0, r4
    7a66:	4258      	negs	r0, r3
    7a68:	4158      	adcs	r0, r3
    7a6a:	f7ff fa5b 	bl	6f24 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a6e:	480f      	ldr	r0, [pc, #60]	; (7aac <z_impl_k_thread_suspend+0xb0>)
    7a70:	f7fe ff74 	bl	695c <z_spin_unlock_valid>
    7a74:	b968      	cbnz	r0, 7a92 <z_impl_k_thread_suspend+0x96>
    7a76:	4a0e      	ldr	r2, [pc, #56]	; (7ab0 <z_impl_k_thread_suspend+0xb4>)
    7a78:	4913      	ldr	r1, [pc, #76]	; (7ac8 <z_impl_k_thread_suspend+0xcc>)
    7a7a:	480f      	ldr	r0, [pc, #60]	; (7ab8 <z_impl_k_thread_suspend+0xbc>)
    7a7c:	23b9      	movs	r3, #185	; 0xb9
    7a7e:	f001 fb52 	bl	9126 <assert_print>
    7a82:	490a      	ldr	r1, [pc, #40]	; (7aac <z_impl_k_thread_suspend+0xb0>)
    7a84:	4811      	ldr	r0, [pc, #68]	; (7acc <z_impl_k_thread_suspend+0xd0>)
    7a86:	f001 fb4e 	bl	9126 <assert_print>
    7a8a:	4809      	ldr	r0, [pc, #36]	; (7ab0 <z_impl_k_thread_suspend+0xb4>)
    7a8c:	21b9      	movs	r1, #185	; 0xb9
    7a8e:	f001 fb43 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7a92:	f386 8811 	msr	BASEPRI, r6
    7a96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7a9a:	68ab      	ldr	r3, [r5, #8]
    7a9c:	42a3      	cmp	r3, r4
    7a9e:	d103      	bne.n	7aa8 <z_impl_k_thread_suspend+0xac>
}
    7aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7aa4:	f001 bf73 	b.w	998e <z_reschedule_unlocked>
}
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
    7aaa:	bf00      	nop
    7aac:	20000cb0 	.word	0x20000cb0
    7ab0:	0000a587 	.word	0x0000a587
    7ab4:	0000a5e0 	.word	0x0000a5e0
    7ab8:	0000a092 	.word	0x0000a092
    7abc:	0000a5f5 	.word	0x0000a5f5
    7ac0:	20000c94 	.word	0x20000c94
    7ac4:	20000c74 	.word	0x20000c74
    7ac8:	0000a5b4 	.word	0x0000a5b4
    7acc:	0000a5cb 	.word	0x0000a5cb

00007ad0 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    7ad0:	6883      	ldr	r3, [r0, #8]
{
    7ad2:	b510      	push	{r4, lr}
    7ad4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    7ad6:	b95b      	cbnz	r3, 7af0 <unpend_thread_no_timeout+0x20>
    7ad8:	490b      	ldr	r1, [pc, #44]	; (7b08 <unpend_thread_no_timeout+0x38>)
    7ada:	480c      	ldr	r0, [pc, #48]	; (7b0c <unpend_thread_no_timeout+0x3c>)
    7adc:	4a0c      	ldr	r2, [pc, #48]	; (7b10 <unpend_thread_no_timeout+0x40>)
    7ade:	f240 23b9 	movw	r3, #697	; 0x2b9
    7ae2:	f001 fb20 	bl	9126 <assert_print>
    7ae6:	480a      	ldr	r0, [pc, #40]	; (7b10 <unpend_thread_no_timeout+0x40>)
    7ae8:	f240 21b9 	movw	r1, #697	; 0x2b9
    7aec:	f001 fb14 	bl	9118 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    7af0:	68a0      	ldr	r0, [r4, #8]
    7af2:	4621      	mov	r1, r4
    7af4:	f7ff fd18 	bl	7528 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7af8:	7b63      	ldrb	r3, [r4, #13]
    7afa:	f023 0302 	bic.w	r3, r3, #2
    7afe:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    7b00:	2300      	movs	r3, #0
    7b02:	60a3      	str	r3, [r4, #8]
}
    7b04:	bd10      	pop	{r4, pc}
    7b06:	bf00      	nop
    7b08:	0000bb6a 	.word	0x0000bb6a
    7b0c:	0000a092 	.word	0x0000a092
    7b10:	0000bacf 	.word	0x0000bacf

00007b14 <z_thread_timeout>:
{
    7b14:	b570      	push	{r4, r5, r6, lr}
    7b16:	4604      	mov	r4, r0
	__asm__ volatile(
    7b18:	f04f 0340 	mov.w	r3, #64	; 0x40
    7b1c:	f3ef 8611 	mrs	r6, BASEPRI
    7b20:	f383 8812 	msr	BASEPRI_MAX, r3
    7b24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b28:	4820      	ldr	r0, [pc, #128]	; (7bac <z_thread_timeout+0x98>)
    7b2a:	f7fe ff09 	bl	6940 <z_spin_lock_valid>
    7b2e:	b968      	cbnz	r0, 7b4c <z_thread_timeout+0x38>
    7b30:	4a1f      	ldr	r2, [pc, #124]	; (7bb0 <z_thread_timeout+0x9c>)
    7b32:	4920      	ldr	r1, [pc, #128]	; (7bb4 <z_thread_timeout+0xa0>)
    7b34:	4820      	ldr	r0, [pc, #128]	; (7bb8 <z_thread_timeout+0xa4>)
    7b36:	238e      	movs	r3, #142	; 0x8e
    7b38:	f001 faf5 	bl	9126 <assert_print>
    7b3c:	491b      	ldr	r1, [pc, #108]	; (7bac <z_thread_timeout+0x98>)
    7b3e:	481f      	ldr	r0, [pc, #124]	; (7bbc <z_thread_timeout+0xa8>)
    7b40:	f001 faf1 	bl	9126 <assert_print>
    7b44:	481a      	ldr	r0, [pc, #104]	; (7bb0 <z_thread_timeout+0x9c>)
    7b46:	218e      	movs	r1, #142	; 0x8e
    7b48:	f001 fae6 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b4c:	4817      	ldr	r0, [pc, #92]	; (7bac <z_thread_timeout+0x98>)
    7b4e:	f7fe ff15 	bl	697c <z_spin_lock_set_owner>
		if (!killed) {
    7b52:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7b56:	f013 0f28 	tst.w	r3, #40	; 0x28
    7b5a:	d110      	bne.n	7b7e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    7b5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7b60:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    7b64:	b113      	cbz	r3, 7b6c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    7b66:	4628      	mov	r0, r5
    7b68:	f7ff ffb2 	bl	7ad0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7b6c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7b70:	f023 0314 	bic.w	r3, r3, #20
    7b74:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    7b78:	4628      	mov	r0, r5
    7b7a:	f7ff fa0b 	bl	6f94 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b7e:	480b      	ldr	r0, [pc, #44]	; (7bac <z_thread_timeout+0x98>)
    7b80:	f7fe feec 	bl	695c <z_spin_unlock_valid>
    7b84:	b968      	cbnz	r0, 7ba2 <z_thread_timeout+0x8e>
    7b86:	4a0a      	ldr	r2, [pc, #40]	; (7bb0 <z_thread_timeout+0x9c>)
    7b88:	490d      	ldr	r1, [pc, #52]	; (7bc0 <z_thread_timeout+0xac>)
    7b8a:	480b      	ldr	r0, [pc, #44]	; (7bb8 <z_thread_timeout+0xa4>)
    7b8c:	23b9      	movs	r3, #185	; 0xb9
    7b8e:	f001 faca 	bl	9126 <assert_print>
    7b92:	4906      	ldr	r1, [pc, #24]	; (7bac <z_thread_timeout+0x98>)
    7b94:	480b      	ldr	r0, [pc, #44]	; (7bc4 <z_thread_timeout+0xb0>)
    7b96:	f001 fac6 	bl	9126 <assert_print>
    7b9a:	4805      	ldr	r0, [pc, #20]	; (7bb0 <z_thread_timeout+0x9c>)
    7b9c:	21b9      	movs	r1, #185	; 0xb9
    7b9e:	f001 fabb 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7ba2:	f386 8811 	msr	BASEPRI, r6
    7ba6:	f3bf 8f6f 	isb	sy
}
    7baa:	bd70      	pop	{r4, r5, r6, pc}
    7bac:	20000cb0 	.word	0x20000cb0
    7bb0:	0000a587 	.word	0x0000a587
    7bb4:	0000a5e0 	.word	0x0000a5e0
    7bb8:	0000a092 	.word	0x0000a092
    7bbc:	0000a5f5 	.word	0x0000a5f5
    7bc0:	0000a5b4 	.word	0x0000a5b4
    7bc4:	0000a5cb 	.word	0x0000a5cb

00007bc8 <z_unpend1_no_timeout>:
{
    7bc8:	b570      	push	{r4, r5, r6, lr}
    7bca:	4605      	mov	r5, r0
	__asm__ volatile(
    7bcc:	f04f 0340 	mov.w	r3, #64	; 0x40
    7bd0:	f3ef 8611 	mrs	r6, BASEPRI
    7bd4:	f383 8812 	msr	BASEPRI_MAX, r3
    7bd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bdc:	481a      	ldr	r0, [pc, #104]	; (7c48 <z_unpend1_no_timeout+0x80>)
    7bde:	f7fe feaf 	bl	6940 <z_spin_lock_valid>
    7be2:	b968      	cbnz	r0, 7c00 <z_unpend1_no_timeout+0x38>
    7be4:	4a19      	ldr	r2, [pc, #100]	; (7c4c <z_unpend1_no_timeout+0x84>)
    7be6:	491a      	ldr	r1, [pc, #104]	; (7c50 <z_unpend1_no_timeout+0x88>)
    7be8:	481a      	ldr	r0, [pc, #104]	; (7c54 <z_unpend1_no_timeout+0x8c>)
    7bea:	238e      	movs	r3, #142	; 0x8e
    7bec:	f001 fa9b 	bl	9126 <assert_print>
    7bf0:	4915      	ldr	r1, [pc, #84]	; (7c48 <z_unpend1_no_timeout+0x80>)
    7bf2:	4819      	ldr	r0, [pc, #100]	; (7c58 <z_unpend1_no_timeout+0x90>)
    7bf4:	f001 fa97 	bl	9126 <assert_print>
    7bf8:	4814      	ldr	r0, [pc, #80]	; (7c4c <z_unpend1_no_timeout+0x84>)
    7bfa:	218e      	movs	r1, #142	; 0x8e
    7bfc:	f001 fa8c 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c00:	4811      	ldr	r0, [pc, #68]	; (7c48 <z_unpend1_no_timeout+0x80>)
    7c02:	f7fe febb 	bl	697c <z_spin_lock_set_owner>
	return list->head == list;
    7c06:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c08:	42a5      	cmp	r5, r4
    7c0a:	d01b      	beq.n	7c44 <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
    7c0c:	b114      	cbz	r4, 7c14 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7c0e:	4620      	mov	r0, r4
    7c10:	f7ff ff5e 	bl	7ad0 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c14:	480c      	ldr	r0, [pc, #48]	; (7c48 <z_unpend1_no_timeout+0x80>)
    7c16:	f7fe fea1 	bl	695c <z_spin_unlock_valid>
    7c1a:	b968      	cbnz	r0, 7c38 <z_unpend1_no_timeout+0x70>
    7c1c:	4a0b      	ldr	r2, [pc, #44]	; (7c4c <z_unpend1_no_timeout+0x84>)
    7c1e:	490f      	ldr	r1, [pc, #60]	; (7c5c <z_unpend1_no_timeout+0x94>)
    7c20:	480c      	ldr	r0, [pc, #48]	; (7c54 <z_unpend1_no_timeout+0x8c>)
    7c22:	23b9      	movs	r3, #185	; 0xb9
    7c24:	f001 fa7f 	bl	9126 <assert_print>
    7c28:	4907      	ldr	r1, [pc, #28]	; (7c48 <z_unpend1_no_timeout+0x80>)
    7c2a:	480d      	ldr	r0, [pc, #52]	; (7c60 <z_unpend1_no_timeout+0x98>)
    7c2c:	f001 fa7b 	bl	9126 <assert_print>
    7c30:	4806      	ldr	r0, [pc, #24]	; (7c4c <z_unpend1_no_timeout+0x84>)
    7c32:	21b9      	movs	r1, #185	; 0xb9
    7c34:	f001 fa70 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7c38:	f386 8811 	msr	BASEPRI, r6
    7c3c:	f3bf 8f6f 	isb	sy
}
    7c40:	4620      	mov	r0, r4
    7c42:	bd70      	pop	{r4, r5, r6, pc}
    7c44:	2400      	movs	r4, #0
    7c46:	e7e5      	b.n	7c14 <z_unpend1_no_timeout+0x4c>
    7c48:	20000cb0 	.word	0x20000cb0
    7c4c:	0000a587 	.word	0x0000a587
    7c50:	0000a5e0 	.word	0x0000a5e0
    7c54:	0000a092 	.word	0x0000a092
    7c58:	0000a5f5 	.word	0x0000a5f5
    7c5c:	0000a5b4 	.word	0x0000a5b4
    7c60:	0000a5cb 	.word	0x0000a5cb

00007c64 <z_unpend_first_thread>:
{
    7c64:	b570      	push	{r4, r5, r6, lr}
    7c66:	4605      	mov	r5, r0
	__asm__ volatile(
    7c68:	f04f 0340 	mov.w	r3, #64	; 0x40
    7c6c:	f3ef 8611 	mrs	r6, BASEPRI
    7c70:	f383 8812 	msr	BASEPRI_MAX, r3
    7c74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c78:	481c      	ldr	r0, [pc, #112]	; (7cec <z_unpend_first_thread+0x88>)
    7c7a:	f7fe fe61 	bl	6940 <z_spin_lock_valid>
    7c7e:	b968      	cbnz	r0, 7c9c <z_unpend_first_thread+0x38>
    7c80:	4a1b      	ldr	r2, [pc, #108]	; (7cf0 <z_unpend_first_thread+0x8c>)
    7c82:	491c      	ldr	r1, [pc, #112]	; (7cf4 <z_unpend_first_thread+0x90>)
    7c84:	481c      	ldr	r0, [pc, #112]	; (7cf8 <z_unpend_first_thread+0x94>)
    7c86:	238e      	movs	r3, #142	; 0x8e
    7c88:	f001 fa4d 	bl	9126 <assert_print>
    7c8c:	4917      	ldr	r1, [pc, #92]	; (7cec <z_unpend_first_thread+0x88>)
    7c8e:	481b      	ldr	r0, [pc, #108]	; (7cfc <z_unpend_first_thread+0x98>)
    7c90:	f001 fa49 	bl	9126 <assert_print>
    7c94:	4816      	ldr	r0, [pc, #88]	; (7cf0 <z_unpend_first_thread+0x8c>)
    7c96:	218e      	movs	r1, #142	; 0x8e
    7c98:	f001 fa3e 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c9c:	4813      	ldr	r0, [pc, #76]	; (7cec <z_unpend_first_thread+0x88>)
    7c9e:	f7fe fe6d 	bl	697c <z_spin_lock_set_owner>
	return list->head == list;
    7ca2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ca4:	42a5      	cmp	r5, r4
    7ca6:	d01f      	beq.n	7ce8 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    7ca8:	b134      	cbz	r4, 7cb8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7caa:	4620      	mov	r0, r4
    7cac:	f7ff ff10 	bl	7ad0 <unpend_thread_no_timeout>
    7cb0:	f104 0018 	add.w	r0, r4, #24
    7cb4:	f000 fb9c 	bl	83f0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cb8:	480c      	ldr	r0, [pc, #48]	; (7cec <z_unpend_first_thread+0x88>)
    7cba:	f7fe fe4f 	bl	695c <z_spin_unlock_valid>
    7cbe:	b968      	cbnz	r0, 7cdc <z_unpend_first_thread+0x78>
    7cc0:	4a0b      	ldr	r2, [pc, #44]	; (7cf0 <z_unpend_first_thread+0x8c>)
    7cc2:	490f      	ldr	r1, [pc, #60]	; (7d00 <z_unpend_first_thread+0x9c>)
    7cc4:	480c      	ldr	r0, [pc, #48]	; (7cf8 <z_unpend_first_thread+0x94>)
    7cc6:	23b9      	movs	r3, #185	; 0xb9
    7cc8:	f001 fa2d 	bl	9126 <assert_print>
    7ccc:	4907      	ldr	r1, [pc, #28]	; (7cec <z_unpend_first_thread+0x88>)
    7cce:	480d      	ldr	r0, [pc, #52]	; (7d04 <z_unpend_first_thread+0xa0>)
    7cd0:	f001 fa29 	bl	9126 <assert_print>
    7cd4:	4806      	ldr	r0, [pc, #24]	; (7cf0 <z_unpend_first_thread+0x8c>)
    7cd6:	21b9      	movs	r1, #185	; 0xb9
    7cd8:	f001 fa1e 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7cdc:	f386 8811 	msr	BASEPRI, r6
    7ce0:	f3bf 8f6f 	isb	sy
}
    7ce4:	4620      	mov	r0, r4
    7ce6:	bd70      	pop	{r4, r5, r6, pc}
    7ce8:	2400      	movs	r4, #0
    7cea:	e7e5      	b.n	7cb8 <z_unpend_first_thread+0x54>
    7cec:	20000cb0 	.word	0x20000cb0
    7cf0:	0000a587 	.word	0x0000a587
    7cf4:	0000a5e0 	.word	0x0000a5e0
    7cf8:	0000a092 	.word	0x0000a092
    7cfc:	0000a5f5 	.word	0x0000a5f5
    7d00:	0000a5b4 	.word	0x0000a5b4
    7d04:	0000a5cb 	.word	0x0000a5cb

00007d08 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7d08:	4b04      	ldr	r3, [pc, #16]	; (7d1c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7d0a:	2100      	movs	r1, #0
    7d0c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7d10:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7d14:	4608      	mov	r0, r1
    7d16:	f7ff b989 	b.w	702c <k_sched_time_slice_set>
    7d1a:	bf00      	nop
    7d1c:	20000c74 	.word	0x20000c74

00007d20 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d22:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7d26:	b173      	cbz	r3, 7d46 <z_impl_k_yield+0x26>
    7d28:	493f      	ldr	r1, [pc, #252]	; (7e28 <z_impl_k_yield+0x108>)
    7d2a:	4a40      	ldr	r2, [pc, #256]	; (7e2c <z_impl_k_yield+0x10c>)
    7d2c:	4840      	ldr	r0, [pc, #256]	; (7e30 <z_impl_k_yield+0x110>)
    7d2e:	f240 5332 	movw	r3, #1330	; 0x532
    7d32:	f001 f9f8 	bl	9126 <assert_print>
    7d36:	483f      	ldr	r0, [pc, #252]	; (7e34 <z_impl_k_yield+0x114>)
    7d38:	f001 f9f5 	bl	9126 <assert_print>
    7d3c:	483b      	ldr	r0, [pc, #236]	; (7e2c <z_impl_k_yield+0x10c>)
    7d3e:	f240 5132 	movw	r1, #1330	; 0x532
    7d42:	f001 f9e9 	bl	9118 <assert_post_action>
	__asm__ volatile(
    7d46:	f04f 0340 	mov.w	r3, #64	; 0x40
    7d4a:	f3ef 8611 	mrs	r6, BASEPRI
    7d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    7d52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d56:	4838      	ldr	r0, [pc, #224]	; (7e38 <z_impl_k_yield+0x118>)
    7d58:	f7fe fdf2 	bl	6940 <z_spin_lock_valid>
    7d5c:	b968      	cbnz	r0, 7d7a <z_impl_k_yield+0x5a>
    7d5e:	4a37      	ldr	r2, [pc, #220]	; (7e3c <z_impl_k_yield+0x11c>)
    7d60:	4937      	ldr	r1, [pc, #220]	; (7e40 <z_impl_k_yield+0x120>)
    7d62:	4833      	ldr	r0, [pc, #204]	; (7e30 <z_impl_k_yield+0x110>)
    7d64:	238e      	movs	r3, #142	; 0x8e
    7d66:	f001 f9de 	bl	9126 <assert_print>
    7d6a:	4933      	ldr	r1, [pc, #204]	; (7e38 <z_impl_k_yield+0x118>)
    7d6c:	4835      	ldr	r0, [pc, #212]	; (7e44 <z_impl_k_yield+0x124>)
    7d6e:	f001 f9da 	bl	9126 <assert_print>
    7d72:	4832      	ldr	r0, [pc, #200]	; (7e3c <z_impl_k_yield+0x11c>)
    7d74:	218e      	movs	r1, #142	; 0x8e
    7d76:	f001 f9cf 	bl	9118 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7d7a:	4d33      	ldr	r5, [pc, #204]	; (7e48 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    7d7c:	482e      	ldr	r0, [pc, #184]	; (7e38 <z_impl_k_yield+0x118>)
    7d7e:	f7fe fdfd 	bl	697c <z_spin_lock_set_owner>
    7d82:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d84:	7b4b      	ldrb	r3, [r1, #13]
    7d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d8a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7d8c:	f105 0020 	add.w	r0, r5, #32
    7d90:	f7ff fbca 	bl	7528 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    7d94:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7d96:	7b63      	ldrb	r3, [r4, #13]
    7d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d9c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7d9e:	4b2b      	ldr	r3, [pc, #172]	; (7e4c <z_impl_k_yield+0x12c>)
    7da0:	429c      	cmp	r4, r3
    7da2:	d109      	bne.n	7db8 <z_impl_k_yield+0x98>
    7da4:	492a      	ldr	r1, [pc, #168]	; (7e50 <z_impl_k_yield+0x130>)
    7da6:	4822      	ldr	r0, [pc, #136]	; (7e30 <z_impl_k_yield+0x110>)
    7da8:	4a20      	ldr	r2, [pc, #128]	; (7e2c <z_impl_k_yield+0x10c>)
    7daa:	23ba      	movs	r3, #186	; 0xba
    7dac:	f001 f9bb 	bl	9126 <assert_print>
    7db0:	481e      	ldr	r0, [pc, #120]	; (7e2c <z_impl_k_yield+0x10c>)
    7db2:	21ba      	movs	r1, #186	; 0xba
    7db4:	f001 f9b0 	bl	9118 <assert_post_action>
	return list->head == list;
    7db8:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7dba:	4926      	ldr	r1, [pc, #152]	; (7e54 <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    7dbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7dbe:	428b      	cmp	r3, r1
    7dc0:	bf08      	it	eq
    7dc2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7dc4:	b923      	cbnz	r3, 7dd0 <z_impl_k_yield+0xb0>
	node->prev = tail;
    7dc6:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    7dca:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7dcc:	626c      	str	r4, [r5, #36]	; 0x24
}
    7dce:	e00c      	b.n	7dea <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    7dd0:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7dd4:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    7dd8:	42b8      	cmp	r0, r7
    7dda:	d020      	beq.n	7e1e <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ddc:	4287      	cmp	r7, r0
    7dde:	dd1e      	ble.n	7e1e <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    7de0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7de2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7de6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7de8:	605c      	str	r4, [r3, #4]
	update_cache(1);
    7dea:	2001      	movs	r0, #1
    7dec:	f7ff f89a 	bl	6f24 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7df0:	4811      	ldr	r0, [pc, #68]	; (7e38 <z_impl_k_yield+0x118>)
    7df2:	f7fe fdb3 	bl	695c <z_spin_unlock_valid>
    7df6:	b968      	cbnz	r0, 7e14 <z_impl_k_yield+0xf4>
    7df8:	4a10      	ldr	r2, [pc, #64]	; (7e3c <z_impl_k_yield+0x11c>)
    7dfa:	4917      	ldr	r1, [pc, #92]	; (7e58 <z_impl_k_yield+0x138>)
    7dfc:	480c      	ldr	r0, [pc, #48]	; (7e30 <z_impl_k_yield+0x110>)
    7dfe:	23d0      	movs	r3, #208	; 0xd0
    7e00:	f001 f991 	bl	9126 <assert_print>
    7e04:	490c      	ldr	r1, [pc, #48]	; (7e38 <z_impl_k_yield+0x118>)
    7e06:	4815      	ldr	r0, [pc, #84]	; (7e5c <z_impl_k_yield+0x13c>)
    7e08:	f001 f98d 	bl	9126 <assert_print>
    7e0c:	480b      	ldr	r0, [pc, #44]	; (7e3c <z_impl_k_yield+0x11c>)
    7e0e:	21d0      	movs	r1, #208	; 0xd0
    7e10:	f001 f982 	bl	9118 <assert_post_action>
    7e14:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    7e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7e1a:	f7fb b9e1 	b.w	31e0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7e1e:	4293      	cmp	r3, r2
    7e20:	d0d1      	beq.n	7dc6 <z_impl_k_yield+0xa6>
    7e22:	681b      	ldr	r3, [r3, #0]
    7e24:	e7ce      	b.n	7dc4 <z_impl_k_yield+0xa4>
    7e26:	bf00      	nop
    7e28:	0000b8f7 	.word	0x0000b8f7
    7e2c:	0000bacf 	.word	0x0000bacf
    7e30:	0000a092 	.word	0x0000a092
    7e34:	0000ba2d 	.word	0x0000ba2d
    7e38:	20000cb0 	.word	0x20000cb0
    7e3c:	0000a587 	.word	0x0000a587
    7e40:	0000a5e0 	.word	0x0000a5e0
    7e44:	0000a5f5 	.word	0x0000a5f5
    7e48:	20000c74 	.word	0x20000c74
    7e4c:	20000438 	.word	0x20000438
    7e50:	0000bb18 	.word	0x0000bb18
    7e54:	20000c94 	.word	0x20000c94
    7e58:	0000a5b4 	.word	0x0000a5b4
    7e5c:	0000a5cb 	.word	0x0000a5cb

00007e60 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e64:	4605      	mov	r5, r0
    7e66:	460e      	mov	r6, r1
    7e68:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7e6c:	b173      	cbz	r3, 7e8c <z_tick_sleep+0x2c>
    7e6e:	4941      	ldr	r1, [pc, #260]	; (7f74 <z_tick_sleep+0x114>)
    7e70:	4a41      	ldr	r2, [pc, #260]	; (7f78 <z_tick_sleep+0x118>)
    7e72:	4842      	ldr	r0, [pc, #264]	; (7f7c <z_tick_sleep+0x11c>)
    7e74:	f240 534e 	movw	r3, #1358	; 0x54e
    7e78:	f001 f955 	bl	9126 <assert_print>
    7e7c:	4840      	ldr	r0, [pc, #256]	; (7f80 <z_tick_sleep+0x120>)
    7e7e:	f001 f952 	bl	9126 <assert_print>
    7e82:	483d      	ldr	r0, [pc, #244]	; (7f78 <z_tick_sleep+0x118>)
    7e84:	f240 514e 	movw	r1, #1358	; 0x54e
    7e88:	f001 f946 	bl	9118 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7e8c:	ea55 0306 	orrs.w	r3, r5, r6
    7e90:	d103      	bne.n	7e9a <z_tick_sleep+0x3a>
	z_impl_k_yield();
    7e92:	f7ff ff45 	bl	7d20 <z_impl_k_yield>
		k_yield();
		return 0;
    7e96:	2000      	movs	r0, #0
    7e98:	e066      	b.n	7f68 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    7e9a:	1caa      	adds	r2, r5, #2
    7e9c:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    7ea0:	db64      	blt.n	7f6c <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7ea2:	f001 fd7e 	bl	99a2 <sys_clock_tick_get_32>
    7ea6:	1944      	adds	r4, r0, r5
    7ea8:	f04f 0340 	mov.w	r3, #64	; 0x40
    7eac:	f3ef 8811 	mrs	r8, BASEPRI
    7eb0:	f383 8812 	msr	BASEPRI_MAX, r3
    7eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7eb8:	4832      	ldr	r0, [pc, #200]	; (7f84 <z_tick_sleep+0x124>)
    7eba:	f7fe fd41 	bl	6940 <z_spin_lock_valid>
    7ebe:	b968      	cbnz	r0, 7edc <z_tick_sleep+0x7c>
    7ec0:	4a31      	ldr	r2, [pc, #196]	; (7f88 <z_tick_sleep+0x128>)
    7ec2:	4932      	ldr	r1, [pc, #200]	; (7f8c <z_tick_sleep+0x12c>)
    7ec4:	482d      	ldr	r0, [pc, #180]	; (7f7c <z_tick_sleep+0x11c>)
    7ec6:	238e      	movs	r3, #142	; 0x8e
    7ec8:	f001 f92d 	bl	9126 <assert_print>
    7ecc:	492d      	ldr	r1, [pc, #180]	; (7f84 <z_tick_sleep+0x124>)
    7ece:	4830      	ldr	r0, [pc, #192]	; (7f90 <z_tick_sleep+0x130>)
    7ed0:	f001 f929 	bl	9126 <assert_print>
    7ed4:	482c      	ldr	r0, [pc, #176]	; (7f88 <z_tick_sleep+0x128>)
    7ed6:	218e      	movs	r1, #142	; 0x8e
    7ed8:	f001 f91e 	bl	9118 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    7edc:	4f2d      	ldr	r7, [pc, #180]	; (7f94 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    7ede:	4829      	ldr	r0, [pc, #164]	; (7f84 <z_tick_sleep+0x124>)
    7ee0:	f7fe fd4c 	bl	697c <z_spin_lock_set_owner>
    7ee4:	4b2c      	ldr	r3, [pc, #176]	; (7f98 <z_tick_sleep+0x138>)
    7ee6:	68b8      	ldr	r0, [r7, #8]
    7ee8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    7eea:	f7ff fc09 	bl	7700 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7eee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7ef0:	492a      	ldr	r1, [pc, #168]	; (7f9c <z_tick_sleep+0x13c>)
    7ef2:	462a      	mov	r2, r5
    7ef4:	4633      	mov	r3, r6
    7ef6:	3018      	adds	r0, #24
    7ef8:	f000 f9b0 	bl	825c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7efc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7efe:	4821      	ldr	r0, [pc, #132]	; (7f84 <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7f00:	7b53      	ldrb	r3, [r2, #13]
    7f02:	f043 0310 	orr.w	r3, r3, #16
    7f06:	7353      	strb	r3, [r2, #13]
    7f08:	f7fe fd28 	bl	695c <z_spin_unlock_valid>
    7f0c:	b968      	cbnz	r0, 7f2a <z_tick_sleep+0xca>
    7f0e:	4a1e      	ldr	r2, [pc, #120]	; (7f88 <z_tick_sleep+0x128>)
    7f10:	4923      	ldr	r1, [pc, #140]	; (7fa0 <z_tick_sleep+0x140>)
    7f12:	481a      	ldr	r0, [pc, #104]	; (7f7c <z_tick_sleep+0x11c>)
    7f14:	23d0      	movs	r3, #208	; 0xd0
    7f16:	f001 f906 	bl	9126 <assert_print>
    7f1a:	491a      	ldr	r1, [pc, #104]	; (7f84 <z_tick_sleep+0x124>)
    7f1c:	4821      	ldr	r0, [pc, #132]	; (7fa4 <z_tick_sleep+0x144>)
    7f1e:	f001 f902 	bl	9126 <assert_print>
    7f22:	4819      	ldr	r0, [pc, #100]	; (7f88 <z_tick_sleep+0x128>)
    7f24:	21d0      	movs	r1, #208	; 0xd0
    7f26:	f001 f8f7 	bl	9118 <assert_post_action>
    7f2a:	4640      	mov	r0, r8
    7f2c:	f7fb f958 	bl	31e0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    7f30:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7f32:	7b5b      	ldrb	r3, [r3, #13]
    7f34:	06db      	lsls	r3, r3, #27
    7f36:	d50e      	bpl.n	7f56 <z_tick_sleep+0xf6>
    7f38:	491b      	ldr	r1, [pc, #108]	; (7fa8 <z_tick_sleep+0x148>)
    7f3a:	4a0f      	ldr	r2, [pc, #60]	; (7f78 <z_tick_sleep+0x118>)
    7f3c:	480f      	ldr	r0, [pc, #60]	; (7f7c <z_tick_sleep+0x11c>)
    7f3e:	f240 536f 	movw	r3, #1391	; 0x56f
    7f42:	f001 f8f0 	bl	9126 <assert_print>
    7f46:	480e      	ldr	r0, [pc, #56]	; (7f80 <z_tick_sleep+0x120>)
    7f48:	f001 f8ed 	bl	9126 <assert_print>
    7f4c:	480a      	ldr	r0, [pc, #40]	; (7f78 <z_tick_sleep+0x118>)
    7f4e:	f240 516f 	movw	r1, #1391	; 0x56f
    7f52:	f001 f8e1 	bl	9118 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7f56:	f001 fd24 	bl	99a2 <sys_clock_tick_get_32>
    7f5a:	1a20      	subs	r0, r4, r0
    7f5c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7f60:	2801      	cmp	r0, #1
    7f62:	f173 0300 	sbcs.w	r3, r3, #0
    7f66:	db96      	blt.n	7e96 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    7f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7f6c:	f06f 0401 	mvn.w	r4, #1
    7f70:	1b64      	subs	r4, r4, r5
    7f72:	e799      	b.n	7ea8 <z_tick_sleep+0x48>
    7f74:	0000b8f7 	.word	0x0000b8f7
    7f78:	0000bacf 	.word	0x0000bacf
    7f7c:	0000a092 	.word	0x0000a092
    7f80:	0000ba2d 	.word	0x0000ba2d
    7f84:	20000cb0 	.word	0x20000cb0
    7f88:	0000a587 	.word	0x0000a587
    7f8c:	0000a5e0 	.word	0x0000a5e0
    7f90:	0000a5f5 	.word	0x0000a5f5
    7f94:	20000c74 	.word	0x20000c74
    7f98:	20000ca4 	.word	0x20000ca4
    7f9c:	00007b15 	.word	0x00007b15
    7fa0:	0000a5b4 	.word	0x0000a5b4
    7fa4:	0000a5cb 	.word	0x0000a5cb
    7fa8:	0000bb81 	.word	0x0000bb81

00007fac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4605      	mov	r5, r0
    7fb0:	460c      	mov	r4, r1
    7fb2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7fb6:	b173      	cbz	r3, 7fd6 <z_impl_k_sleep+0x2a>
    7fb8:	4913      	ldr	r1, [pc, #76]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fba:	4a14      	ldr	r2, [pc, #80]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fbc:	4814      	ldr	r0, [pc, #80]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fbe:	f240 537e 	movw	r3, #1406	; 0x57e
    7fc2:	f001 f8b0 	bl	9126 <assert_print>
    7fc6:	4813      	ldr	r0, [pc, #76]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fc8:	f001 f8ad 	bl	9126 <assert_print>
    7fcc:	480f      	ldr	r0, [pc, #60]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fce:	f240 517e 	movw	r1, #1406	; 0x57e
    7fd2:	f001 f8a1 	bl	9118 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7fd6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    7fda:	bf08      	it	eq
    7fdc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    7fe0:	d106      	bne.n	7ff0 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    7fe2:	4b0d      	ldr	r3, [pc, #52]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7fe4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7fe6:	f7ff fd09 	bl	79fc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7fea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7fee:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7ff0:	4628      	mov	r0, r5
    7ff2:	4621      	mov	r1, r4
    7ff4:	f7ff ff34 	bl	7e60 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    7ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7ffc:	fb80 0303 	smull	r0, r3, r0, r3
    8000:	0bc0      	lsrs	r0, r0, #15
    8002:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8006:	e7f2      	b.n	7fee <z_impl_k_sleep+0x42>
    8008:	0000b8f7 	.word	0x0000b8f7
    800c:	0000bacf 	.word	0x0000bacf
    8010:	0000a092 	.word	0x0000a092
    8014:	0000ba2d 	.word	0x0000ba2d
    8018:	20000c74 	.word	0x20000c74

0000801c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    801c:	4b01      	ldr	r3, [pc, #4]	; (8024 <z_impl_z_current_get+0x8>)
    801e:	6898      	ldr	r0, [r3, #8]
    8020:	4770      	bx	lr
    8022:	bf00      	nop
    8024:	20000c74 	.word	0x20000c74

00008028 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    802c:	4604      	mov	r4, r0
    802e:	f04f 0340 	mov.w	r3, #64	; 0x40
    8032:	f3ef 8611 	mrs	r6, BASEPRI
    8036:	f383 8812 	msr	BASEPRI_MAX, r3
    803a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    803e:	4848      	ldr	r0, [pc, #288]	; (8160 <z_thread_abort+0x138>)
    8040:	f7fe fc7e 	bl	6940 <z_spin_lock_valid>
    8044:	b968      	cbnz	r0, 8062 <z_thread_abort+0x3a>
    8046:	4a47      	ldr	r2, [pc, #284]	; (8164 <z_thread_abort+0x13c>)
    8048:	4947      	ldr	r1, [pc, #284]	; (8168 <z_thread_abort+0x140>)
    804a:	4848      	ldr	r0, [pc, #288]	; (816c <z_thread_abort+0x144>)
    804c:	238e      	movs	r3, #142	; 0x8e
    804e:	f001 f86a 	bl	9126 <assert_print>
    8052:	4943      	ldr	r1, [pc, #268]	; (8160 <z_thread_abort+0x138>)
    8054:	4846      	ldr	r0, [pc, #280]	; (8170 <z_thread_abort+0x148>)
    8056:	f001 f866 	bl	9126 <assert_print>
    805a:	4842      	ldr	r0, [pc, #264]	; (8164 <z_thread_abort+0x13c>)
    805c:	218e      	movs	r1, #142	; 0x8e
    805e:	f001 f85b 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    8062:	483f      	ldr	r0, [pc, #252]	; (8160 <z_thread_abort+0x138>)
    8064:	f7fe fc8a 	bl	697c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8068:	7b63      	ldrb	r3, [r4, #13]
    806a:	071a      	lsls	r2, r3, #28
    806c:	d517      	bpl.n	809e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    806e:	483c      	ldr	r0, [pc, #240]	; (8160 <z_thread_abort+0x138>)
    8070:	f7fe fc74 	bl	695c <z_spin_unlock_valid>
    8074:	b968      	cbnz	r0, 8092 <z_thread_abort+0x6a>
    8076:	4a3b      	ldr	r2, [pc, #236]	; (8164 <z_thread_abort+0x13c>)
    8078:	493e      	ldr	r1, [pc, #248]	; (8174 <z_thread_abort+0x14c>)
    807a:	483c      	ldr	r0, [pc, #240]	; (816c <z_thread_abort+0x144>)
    807c:	23b9      	movs	r3, #185	; 0xb9
    807e:	f001 f852 	bl	9126 <assert_print>
    8082:	4937      	ldr	r1, [pc, #220]	; (8160 <z_thread_abort+0x138>)
    8084:	483c      	ldr	r0, [pc, #240]	; (8178 <z_thread_abort+0x150>)
    8086:	f001 f84e 	bl	9126 <assert_print>
    808a:	4836      	ldr	r0, [pc, #216]	; (8164 <z_thread_abort+0x13c>)
    808c:	21b9      	movs	r1, #185	; 0xb9
    808e:	f001 f843 	bl	9118 <assert_post_action>
	__asm__ volatile(
    8092:	f386 8811 	msr	BASEPRI, r6
    8096:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    809a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    809e:	f023 0220 	bic.w	r2, r3, #32
    80a2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    80a6:	09d2      	lsrs	r2, r2, #7
    80a8:	d142      	bne.n	8130 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    80aa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    80ac:	68a3      	ldr	r3, [r4, #8]
    80ae:	b113      	cbz	r3, 80b6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    80b0:	4620      	mov	r0, r4
    80b2:	f7ff fd0d 	bl	7ad0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    80b6:	f104 0018 	add.w	r0, r4, #24
    80ba:	f000 f999 	bl	83f0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    80be:	f104 0758 	add.w	r7, r4, #88	; 0x58
    80c2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    80c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80c8:	42bd      	cmp	r5, r7
    80ca:	d001      	beq.n	80d0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    80cc:	2d00      	cmp	r5, #0
    80ce:	d139      	bne.n	8144 <z_thread_abort+0x11c>
		update_cache(1);
    80d0:	2001      	movs	r0, #1
    80d2:	f7fe ff27 	bl	6f24 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    80d6:	4b29      	ldr	r3, [pc, #164]	; (817c <z_thread_abort+0x154>)
    80d8:	689b      	ldr	r3, [r3, #8]
    80da:	42a3      	cmp	r3, r4
    80dc:	d1c7      	bne.n	806e <z_thread_abort+0x46>
    80de:	f3ef 8305 	mrs	r3, IPSR
    80e2:	2b00      	cmp	r3, #0
    80e4:	d1c3      	bne.n	806e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80e6:	481e      	ldr	r0, [pc, #120]	; (8160 <z_thread_abort+0x138>)
    80e8:	f7fe fc38 	bl	695c <z_spin_unlock_valid>
    80ec:	b968      	cbnz	r0, 810a <z_thread_abort+0xe2>
    80ee:	4a1d      	ldr	r2, [pc, #116]	; (8164 <z_thread_abort+0x13c>)
    80f0:	4920      	ldr	r1, [pc, #128]	; (8174 <z_thread_abort+0x14c>)
    80f2:	481e      	ldr	r0, [pc, #120]	; (816c <z_thread_abort+0x144>)
    80f4:	23d0      	movs	r3, #208	; 0xd0
    80f6:	f001 f816 	bl	9126 <assert_print>
    80fa:	4919      	ldr	r1, [pc, #100]	; (8160 <z_thread_abort+0x138>)
    80fc:	481e      	ldr	r0, [pc, #120]	; (8178 <z_thread_abort+0x150>)
    80fe:	f001 f812 	bl	9126 <assert_print>
    8102:	4818      	ldr	r0, [pc, #96]	; (8164 <z_thread_abort+0x13c>)
    8104:	21d0      	movs	r1, #208	; 0xd0
    8106:	f001 f807 	bl	9118 <assert_post_action>
    810a:	4630      	mov	r0, r6
    810c:	f7fb f868 	bl	31e0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8110:	4a1b      	ldr	r2, [pc, #108]	; (8180 <z_thread_abort+0x158>)
    8112:	491c      	ldr	r1, [pc, #112]	; (8184 <z_thread_abort+0x15c>)
    8114:	4815      	ldr	r0, [pc, #84]	; (816c <z_thread_abort+0x144>)
    8116:	f240 63ac 	movw	r3, #1708	; 0x6ac
    811a:	f001 f804 	bl	9126 <assert_print>
    811e:	481a      	ldr	r0, [pc, #104]	; (8188 <z_thread_abort+0x160>)
    8120:	f001 f801 	bl	9126 <assert_print>
    8124:	4816      	ldr	r0, [pc, #88]	; (8180 <z_thread_abort+0x158>)
    8126:	f240 61ac 	movw	r1, #1708	; 0x6ac
    812a:	f000 fff5 	bl	9118 <assert_post_action>
    812e:	e79e      	b.n	806e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8130:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8134:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    8138:	4814      	ldr	r0, [pc, #80]	; (818c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    813a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    813c:	4621      	mov	r1, r4
    813e:	f7ff f9f3 	bl	7528 <z_priq_dumb_remove>
}
    8142:	e7b3      	b.n	80ac <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    8144:	4628      	mov	r0, r5
    8146:	f7ff fcc3 	bl	7ad0 <unpend_thread_no_timeout>
    814a:	f105 0018 	add.w	r0, r5, #24
    814e:	f000 f94f 	bl	83f0 <z_abort_timeout>
    8152:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8156:	4628      	mov	r0, r5
    8158:	f7fe ff1c 	bl	6f94 <ready_thread>
    815c:	e7b3      	b.n	80c6 <z_thread_abort+0x9e>
    815e:	bf00      	nop
    8160:	20000cb0 	.word	0x20000cb0
    8164:	0000a587 	.word	0x0000a587
    8168:	0000a5e0 	.word	0x0000a5e0
    816c:	0000a092 	.word	0x0000a092
    8170:	0000a5f5 	.word	0x0000a5f5
    8174:	0000a5b4 	.word	0x0000a5b4
    8178:	0000a5cb 	.word	0x0000a5cb
    817c:	20000c74 	.word	0x20000c74
    8180:	0000bacf 	.word	0x0000bacf
    8184:	0000a1ea 	.word	0x0000a1ea
    8188:	0000bbc1 	.word	0x0000bbc1
    818c:	20000c94 	.word	0x20000c94

00008190 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8190:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8192:	4806      	ldr	r0, [pc, #24]	; (81ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8194:	4a06      	ldr	r2, [pc, #24]	; (81b0 <z_data_copy+0x20>)
    8196:	4907      	ldr	r1, [pc, #28]	; (81b4 <z_data_copy+0x24>)
    8198:	1a12      	subs	r2, r2, r0
    819a:	f001 fba4 	bl	98e6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    819e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    81a2:	4a05      	ldr	r2, [pc, #20]	; (81b8 <z_data_copy+0x28>)
    81a4:	4905      	ldr	r1, [pc, #20]	; (81bc <z_data_copy+0x2c>)
    81a6:	4806      	ldr	r0, [pc, #24]	; (81c0 <z_data_copy+0x30>)
    81a8:	f001 bb9d 	b.w	98e6 <z_early_memcpy>
    81ac:	20000000 	.word	0x20000000
    81b0:	2000025c 	.word	0x2000025c
    81b4:	0000bc94 	.word	0x0000bc94
    81b8:	00000000 	.word	0x00000000
    81bc:	0000bc94 	.word	0x0000bc94
    81c0:	20000000 	.word	0x20000000

000081c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    81c4:	4b03      	ldr	r3, [pc, #12]	; (81d4 <elapsed+0x10>)
    81c6:	681b      	ldr	r3, [r3, #0]
    81c8:	b90b      	cbnz	r3, 81ce <elapsed+0xa>
    81ca:	f7fd b82d 	b.w	5228 <sys_clock_elapsed>
}
    81ce:	2000      	movs	r0, #0
    81d0:	4770      	bx	lr
    81d2:	bf00      	nop
    81d4:	20000cb4 	.word	0x20000cb4

000081d8 <next_timeout>:
	return list->head == list;
    81d8:	4b11      	ldr	r3, [pc, #68]	; (8220 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    81da:	b510      	push	{r4, lr}
    81dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81de:	429c      	cmp	r4, r3
    81e0:	d10a      	bne.n	81f8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    81e2:	f7ff ffef 	bl	81c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    81e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    81ea:	4b0e      	ldr	r3, [pc, #56]	; (8224 <next_timeout+0x4c>)
    81ec:	691b      	ldr	r3, [r3, #16]
    81ee:	b113      	cbz	r3, 81f6 <next_timeout+0x1e>
    81f0:	4298      	cmp	r0, r3
    81f2:	bfa8      	it	ge
    81f4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    81f6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    81f8:	f7ff ffe4 	bl	81c4 <elapsed>
	if ((to == NULL) ||
    81fc:	2c00      	cmp	r4, #0
    81fe:	d0f2      	beq.n	81e6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8200:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8204:	1a1b      	subs	r3, r3, r0
    8206:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    820a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    820e:	f172 0100 	sbcs.w	r1, r2, #0
    8212:	dae8      	bge.n	81e6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8214:	2a00      	cmp	r2, #0
    8216:	bfac      	ite	ge
    8218:	4618      	movge	r0, r3
    821a:	2000      	movlt	r0, #0
    821c:	e7e5      	b.n	81ea <next_timeout+0x12>
    821e:	bf00      	nop
    8220:	20000174 	.word	0x20000174
    8224:	20000c74 	.word	0x20000c74

00008228 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    8228:	4a0b      	ldr	r2, [pc, #44]	; (8258 <remove_timeout+0x30>)
    822a:	6803      	ldr	r3, [r0, #0]
    822c:	6852      	ldr	r2, [r2, #4]
    822e:	4290      	cmp	r0, r2
{
    8230:	b530      	push	{r4, r5, lr}
    8232:	d009      	beq.n	8248 <remove_timeout+0x20>
	if (next(t) != NULL) {
    8234:	b143      	cbz	r3, 8248 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    8236:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    823a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    823e:	1912      	adds	r2, r2, r4
    8240:	eb41 0105 	adc.w	r1, r1, r5
    8244:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8248:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    824a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    824c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    824e:	2300      	movs	r3, #0
	node->prev = NULL;
    8250:	e9c0 3300 	strd	r3, r3, [r0]
}
    8254:	bd30      	pop	{r4, r5, pc}
    8256:	bf00      	nop
    8258:	20000174 	.word	0x20000174

0000825c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    825c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8260:	bf08      	it	eq
    8262:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8266:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    826a:	4604      	mov	r4, r0
    826c:	460e      	mov	r6, r1
    826e:	4691      	mov	r9, r2
    8270:	461d      	mov	r5, r3
    8272:	4617      	mov	r7, r2
    8274:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8276:	f000 8095 	beq.w	83a4 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    827a:	6803      	ldr	r3, [r0, #0]
    827c:	b163      	cbz	r3, 8298 <z_add_timeout+0x3c>
    827e:	494f      	ldr	r1, [pc, #316]	; (83bc <z_add_timeout+0x160>)
    8280:	4a4f      	ldr	r2, [pc, #316]	; (83c0 <z_add_timeout+0x164>)
    8282:	4850      	ldr	r0, [pc, #320]	; (83c4 <z_add_timeout+0x168>)
    8284:	2363      	movs	r3, #99	; 0x63
    8286:	f000 ff4e 	bl	9126 <assert_print>
    828a:	484f      	ldr	r0, [pc, #316]	; (83c8 <z_add_timeout+0x16c>)
    828c:	f000 ff4b 	bl	9126 <assert_print>
    8290:	484b      	ldr	r0, [pc, #300]	; (83c0 <z_add_timeout+0x164>)
    8292:	2163      	movs	r1, #99	; 0x63
    8294:	f000 ff40 	bl	9118 <assert_post_action>
	to->fn = fn;
    8298:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    829a:	f04f 0340 	mov.w	r3, #64	; 0x40
    829e:	f3ef 8611 	mrs	r6, BASEPRI
    82a2:	f383 8812 	msr	BASEPRI_MAX, r3
    82a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82aa:	4848      	ldr	r0, [pc, #288]	; (83cc <z_add_timeout+0x170>)
    82ac:	f7fe fb48 	bl	6940 <z_spin_lock_valid>
    82b0:	b968      	cbnz	r0, 82ce <z_add_timeout+0x72>
    82b2:	4a47      	ldr	r2, [pc, #284]	; (83d0 <z_add_timeout+0x174>)
    82b4:	4947      	ldr	r1, [pc, #284]	; (83d4 <z_add_timeout+0x178>)
    82b6:	4843      	ldr	r0, [pc, #268]	; (83c4 <z_add_timeout+0x168>)
    82b8:	238e      	movs	r3, #142	; 0x8e
    82ba:	f000 ff34 	bl	9126 <assert_print>
    82be:	4943      	ldr	r1, [pc, #268]	; (83cc <z_add_timeout+0x170>)
    82c0:	4845      	ldr	r0, [pc, #276]	; (83d8 <z_add_timeout+0x17c>)
    82c2:	f000 ff30 	bl	9126 <assert_print>
    82c6:	4842      	ldr	r0, [pc, #264]	; (83d0 <z_add_timeout+0x174>)
    82c8:	218e      	movs	r1, #142	; 0x8e
    82ca:	f000 ff25 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    82ce:	483f      	ldr	r0, [pc, #252]	; (83cc <z_add_timeout+0x170>)
    82d0:	f7fe fb54 	bl	697c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    82d4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    82d8:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    82dc:	da22      	bge.n	8324 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    82de:	493f      	ldr	r1, [pc, #252]	; (83dc <z_add_timeout+0x180>)
    82e0:	e9d1 2000 	ldrd	r2, r0, [r1]
    82e4:	f06f 0301 	mvn.w	r3, #1
    82e8:	1a9b      	subs	r3, r3, r2
    82ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82ee:	eb62 0000 	sbc.w	r0, r2, r0
    82f2:	1bdf      	subs	r7, r3, r7
    82f4:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    82f8:	2f01      	cmp	r7, #1
    82fa:	f170 0300 	sbcs.w	r3, r0, #0
    82fe:	da01      	bge.n	8304 <z_add_timeout+0xa8>
    8300:	2701      	movs	r7, #1
    8302:	2000      	movs	r0, #0
	return list->head == list;
    8304:	4a36      	ldr	r2, [pc, #216]	; (83e0 <z_add_timeout+0x184>)
    8306:	e9c4 7004 	strd	r7, r0, [r4, #16]
    830a:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    830c:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8310:	4293      	cmp	r3, r2
    8312:	bf08      	it	eq
    8314:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8316:	b973      	cbnz	r3, 8336 <z_add_timeout+0xda>
	node->prev = tail;
    8318:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    831c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8320:	6054      	str	r4, [r2, #4]
}
    8322:	e01a      	b.n	835a <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    8324:	f7ff ff4e 	bl	81c4 <elapsed>
    8328:	3701      	adds	r7, #1
    832a:	f145 0500 	adc.w	r5, r5, #0
    832e:	183f      	adds	r7, r7, r0
    8330:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8334:	e7e6      	b.n	8304 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    8336:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    833a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    833e:	4281      	cmp	r1, r0
    8340:	eb75 0e07 	sbcs.w	lr, r5, r7
    8344:	da30      	bge.n	83a8 <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    8346:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    8348:	6859      	ldr	r1, [r3, #4]
    834a:	eb67 0705 	sbc.w	r7, r7, r5
    834e:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    8352:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8356:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8358:	605c      	str	r4, [r3, #4]
	return list->head == list;
    835a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    835c:	4293      	cmp	r3, r2
    835e:	d00b      	beq.n	8378 <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8360:	429c      	cmp	r4, r3
    8362:	d109      	bne.n	8378 <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8364:	f7ff ff38 	bl	81d8 <next_timeout>

			if (next_time == 0 ||
    8368:	b118      	cbz	r0, 8372 <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    836a:	4b1e      	ldr	r3, [pc, #120]	; (83e4 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    836c:	691b      	ldr	r3, [r3, #16]
    836e:	4283      	cmp	r3, r0
    8370:	d002      	beq.n	8378 <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    8372:	2100      	movs	r1, #0
    8374:	f7fc ff26 	bl	51c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8378:	4814      	ldr	r0, [pc, #80]	; (83cc <z_add_timeout+0x170>)
    837a:	f7fe faef 	bl	695c <z_spin_unlock_valid>
    837e:	b968      	cbnz	r0, 839c <z_add_timeout+0x140>
    8380:	4a13      	ldr	r2, [pc, #76]	; (83d0 <z_add_timeout+0x174>)
    8382:	4919      	ldr	r1, [pc, #100]	; (83e8 <z_add_timeout+0x18c>)
    8384:	480f      	ldr	r0, [pc, #60]	; (83c4 <z_add_timeout+0x168>)
    8386:	23b9      	movs	r3, #185	; 0xb9
    8388:	f000 fecd 	bl	9126 <assert_print>
    838c:	490f      	ldr	r1, [pc, #60]	; (83cc <z_add_timeout+0x170>)
    838e:	4817      	ldr	r0, [pc, #92]	; (83ec <z_add_timeout+0x190>)
    8390:	f000 fec9 	bl	9126 <assert_print>
    8394:	480e      	ldr	r0, [pc, #56]	; (83d0 <z_add_timeout+0x174>)
    8396:	21b9      	movs	r1, #185	; 0xb9
    8398:	f000 febe 	bl	9118 <assert_post_action>
	__asm__ volatile(
    839c:	f386 8811 	msr	BASEPRI, r6
    83a0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    83a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    83a8:	1a09      	subs	r1, r1, r0
    83aa:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    83ae:	4563      	cmp	r3, ip
    83b0:	e9c4 1504 	strd	r1, r5, [r4, #16]
    83b4:	d0b0      	beq.n	8318 <z_add_timeout+0xbc>
    83b6:	681b      	ldr	r3, [r3, #0]
    83b8:	e7ad      	b.n	8316 <z_add_timeout+0xba>
    83ba:	bf00      	nop
    83bc:	0000bc07 	.word	0x0000bc07
    83c0:	0000bbe3 	.word	0x0000bbe3
    83c4:	0000a092 	.word	0x0000a092
    83c8:	0000ba2d 	.word	0x0000ba2d
    83cc:	20000cb8 	.word	0x20000cb8
    83d0:	0000a587 	.word	0x0000a587
    83d4:	0000a5e0 	.word	0x0000a5e0
    83d8:	0000a5f5 	.word	0x0000a5f5
    83dc:	20000538 	.word	0x20000538
    83e0:	20000174 	.word	0x20000174
    83e4:	20000c74 	.word	0x20000c74
    83e8:	0000a5b4 	.word	0x0000a5b4
    83ec:	0000a5cb 	.word	0x0000a5cb

000083f0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    83f0:	b538      	push	{r3, r4, r5, lr}
    83f2:	4604      	mov	r4, r0
	__asm__ volatile(
    83f4:	f04f 0340 	mov.w	r3, #64	; 0x40
    83f8:	f3ef 8511 	mrs	r5, BASEPRI
    83fc:	f383 8812 	msr	BASEPRI_MAX, r3
    8400:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8404:	481a      	ldr	r0, [pc, #104]	; (8470 <z_abort_timeout+0x80>)
    8406:	f7fe fa9b 	bl	6940 <z_spin_lock_valid>
    840a:	b968      	cbnz	r0, 8428 <z_abort_timeout+0x38>
    840c:	4a19      	ldr	r2, [pc, #100]	; (8474 <z_abort_timeout+0x84>)
    840e:	491a      	ldr	r1, [pc, #104]	; (8478 <z_abort_timeout+0x88>)
    8410:	481a      	ldr	r0, [pc, #104]	; (847c <z_abort_timeout+0x8c>)
    8412:	238e      	movs	r3, #142	; 0x8e
    8414:	f000 fe87 	bl	9126 <assert_print>
    8418:	4915      	ldr	r1, [pc, #84]	; (8470 <z_abort_timeout+0x80>)
    841a:	4819      	ldr	r0, [pc, #100]	; (8480 <z_abort_timeout+0x90>)
    841c:	f000 fe83 	bl	9126 <assert_print>
    8420:	4814      	ldr	r0, [pc, #80]	; (8474 <z_abort_timeout+0x84>)
    8422:	218e      	movs	r1, #142	; 0x8e
    8424:	f000 fe78 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    8428:	4811      	ldr	r0, [pc, #68]	; (8470 <z_abort_timeout+0x80>)
    842a:	f7fe faa7 	bl	697c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    842e:	6823      	ldr	r3, [r4, #0]
    8430:	b1db      	cbz	r3, 846a <z_abort_timeout+0x7a>
			remove_timeout(to);
    8432:	4620      	mov	r0, r4
    8434:	f7ff fef8 	bl	8228 <remove_timeout>
			ret = 0;
    8438:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    843a:	480d      	ldr	r0, [pc, #52]	; (8470 <z_abort_timeout+0x80>)
    843c:	f7fe fa8e 	bl	695c <z_spin_unlock_valid>
    8440:	b968      	cbnz	r0, 845e <z_abort_timeout+0x6e>
    8442:	4a0c      	ldr	r2, [pc, #48]	; (8474 <z_abort_timeout+0x84>)
    8444:	490f      	ldr	r1, [pc, #60]	; (8484 <z_abort_timeout+0x94>)
    8446:	480d      	ldr	r0, [pc, #52]	; (847c <z_abort_timeout+0x8c>)
    8448:	23b9      	movs	r3, #185	; 0xb9
    844a:	f000 fe6c 	bl	9126 <assert_print>
    844e:	4908      	ldr	r1, [pc, #32]	; (8470 <z_abort_timeout+0x80>)
    8450:	480d      	ldr	r0, [pc, #52]	; (8488 <z_abort_timeout+0x98>)
    8452:	f000 fe68 	bl	9126 <assert_print>
    8456:	4807      	ldr	r0, [pc, #28]	; (8474 <z_abort_timeout+0x84>)
    8458:	21b9      	movs	r1, #185	; 0xb9
    845a:	f000 fe5d 	bl	9118 <assert_post_action>
	__asm__ volatile(
    845e:	f385 8811 	msr	BASEPRI, r5
    8462:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8466:	4620      	mov	r0, r4
    8468:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    846a:	f06f 0415 	mvn.w	r4, #21
    846e:	e7e4      	b.n	843a <z_abort_timeout+0x4a>
    8470:	20000cb8 	.word	0x20000cb8
    8474:	0000a587 	.word	0x0000a587
    8478:	0000a5e0 	.word	0x0000a5e0
    847c:	0000a092 	.word	0x0000a092
    8480:	0000a5f5 	.word	0x0000a5f5
    8484:	0000a5b4 	.word	0x0000a5b4
    8488:	0000a5cb 	.word	0x0000a5cb

0000848c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    848c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    848e:	f04f 0340 	mov.w	r3, #64	; 0x40
    8492:	f3ef 8511 	mrs	r5, BASEPRI
    8496:	f383 8812 	msr	BASEPRI_MAX, r3
    849a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    849e:	4818      	ldr	r0, [pc, #96]	; (8500 <z_get_next_timeout_expiry+0x74>)
    84a0:	f7fe fa4e 	bl	6940 <z_spin_lock_valid>
    84a4:	b968      	cbnz	r0, 84c2 <z_get_next_timeout_expiry+0x36>
    84a6:	4a17      	ldr	r2, [pc, #92]	; (8504 <z_get_next_timeout_expiry+0x78>)
    84a8:	4917      	ldr	r1, [pc, #92]	; (8508 <z_get_next_timeout_expiry+0x7c>)
    84aa:	4818      	ldr	r0, [pc, #96]	; (850c <z_get_next_timeout_expiry+0x80>)
    84ac:	238e      	movs	r3, #142	; 0x8e
    84ae:	f000 fe3a 	bl	9126 <assert_print>
    84b2:	4913      	ldr	r1, [pc, #76]	; (8500 <z_get_next_timeout_expiry+0x74>)
    84b4:	4816      	ldr	r0, [pc, #88]	; (8510 <z_get_next_timeout_expiry+0x84>)
    84b6:	f000 fe36 	bl	9126 <assert_print>
    84ba:	4812      	ldr	r0, [pc, #72]	; (8504 <z_get_next_timeout_expiry+0x78>)
    84bc:	218e      	movs	r1, #142	; 0x8e
    84be:	f000 fe2b 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    84c2:	480f      	ldr	r0, [pc, #60]	; (8500 <z_get_next_timeout_expiry+0x74>)
    84c4:	f7fe fa5a 	bl	697c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    84c8:	f7ff fe86 	bl	81d8 <next_timeout>
    84cc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84ce:	480c      	ldr	r0, [pc, #48]	; (8500 <z_get_next_timeout_expiry+0x74>)
    84d0:	f7fe fa44 	bl	695c <z_spin_unlock_valid>
    84d4:	b968      	cbnz	r0, 84f2 <z_get_next_timeout_expiry+0x66>
    84d6:	4a0b      	ldr	r2, [pc, #44]	; (8504 <z_get_next_timeout_expiry+0x78>)
    84d8:	490e      	ldr	r1, [pc, #56]	; (8514 <z_get_next_timeout_expiry+0x88>)
    84da:	480c      	ldr	r0, [pc, #48]	; (850c <z_get_next_timeout_expiry+0x80>)
    84dc:	23b9      	movs	r3, #185	; 0xb9
    84de:	f000 fe22 	bl	9126 <assert_print>
    84e2:	4907      	ldr	r1, [pc, #28]	; (8500 <z_get_next_timeout_expiry+0x74>)
    84e4:	480c      	ldr	r0, [pc, #48]	; (8518 <z_get_next_timeout_expiry+0x8c>)
    84e6:	f000 fe1e 	bl	9126 <assert_print>
    84ea:	4806      	ldr	r0, [pc, #24]	; (8504 <z_get_next_timeout_expiry+0x78>)
    84ec:	21b9      	movs	r1, #185	; 0xb9
    84ee:	f000 fe13 	bl	9118 <assert_post_action>
	__asm__ volatile(
    84f2:	f385 8811 	msr	BASEPRI, r5
    84f6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    84fa:	4620      	mov	r0, r4
    84fc:	bd38      	pop	{r3, r4, r5, pc}
    84fe:	bf00      	nop
    8500:	20000cb8 	.word	0x20000cb8
    8504:	0000a587 	.word	0x0000a587
    8508:	0000a5e0 	.word	0x0000a5e0
    850c:	0000a092 	.word	0x0000a092
    8510:	0000a5f5 	.word	0x0000a5f5
    8514:	0000a5b4 	.word	0x0000a5b4
    8518:	0000a5cb 	.word	0x0000a5cb

0000851c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    851c:	b570      	push	{r4, r5, r6, lr}
    851e:	4604      	mov	r4, r0
    8520:	460d      	mov	r5, r1
	__asm__ volatile(
    8522:	f04f 0340 	mov.w	r3, #64	; 0x40
    8526:	f3ef 8611 	mrs	r6, BASEPRI
    852a:	f383 8812 	msr	BASEPRI_MAX, r3
    852e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8532:	481c      	ldr	r0, [pc, #112]	; (85a4 <z_set_timeout_expiry+0x88>)
    8534:	f7fe fa04 	bl	6940 <z_spin_lock_valid>
    8538:	b968      	cbnz	r0, 8556 <z_set_timeout_expiry+0x3a>
    853a:	4a1b      	ldr	r2, [pc, #108]	; (85a8 <z_set_timeout_expiry+0x8c>)
    853c:	491b      	ldr	r1, [pc, #108]	; (85ac <z_set_timeout_expiry+0x90>)
    853e:	481c      	ldr	r0, [pc, #112]	; (85b0 <z_set_timeout_expiry+0x94>)
    8540:	238e      	movs	r3, #142	; 0x8e
    8542:	f000 fdf0 	bl	9126 <assert_print>
    8546:	4917      	ldr	r1, [pc, #92]	; (85a4 <z_set_timeout_expiry+0x88>)
    8548:	481a      	ldr	r0, [pc, #104]	; (85b4 <z_set_timeout_expiry+0x98>)
    854a:	f000 fdec 	bl	9126 <assert_print>
    854e:	4816      	ldr	r0, [pc, #88]	; (85a8 <z_set_timeout_expiry+0x8c>)
    8550:	218e      	movs	r1, #142	; 0x8e
    8552:	f000 fde1 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    8556:	4813      	ldr	r0, [pc, #76]	; (85a4 <z_set_timeout_expiry+0x88>)
    8558:	f7fe fa10 	bl	697c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    855c:	f7ff fe3c 	bl	81d8 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    8560:	2801      	cmp	r0, #1
    8562:	dd07      	ble.n	8574 <z_set_timeout_expiry+0x58>
    8564:	42a0      	cmp	r0, r4
    8566:	db05      	blt.n	8574 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8568:	42a0      	cmp	r0, r4
    856a:	4629      	mov	r1, r5
    856c:	bfa8      	it	ge
    856e:	4620      	movge	r0, r4
    8570:	f7fc fe28 	bl	51c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8574:	480b      	ldr	r0, [pc, #44]	; (85a4 <z_set_timeout_expiry+0x88>)
    8576:	f7fe f9f1 	bl	695c <z_spin_unlock_valid>
    857a:	b968      	cbnz	r0, 8598 <z_set_timeout_expiry+0x7c>
    857c:	4a0a      	ldr	r2, [pc, #40]	; (85a8 <z_set_timeout_expiry+0x8c>)
    857e:	490e      	ldr	r1, [pc, #56]	; (85b8 <z_set_timeout_expiry+0x9c>)
    8580:	480b      	ldr	r0, [pc, #44]	; (85b0 <z_set_timeout_expiry+0x94>)
    8582:	23b9      	movs	r3, #185	; 0xb9
    8584:	f000 fdcf 	bl	9126 <assert_print>
    8588:	4906      	ldr	r1, [pc, #24]	; (85a4 <z_set_timeout_expiry+0x88>)
    858a:	480c      	ldr	r0, [pc, #48]	; (85bc <z_set_timeout_expiry+0xa0>)
    858c:	f000 fdcb 	bl	9126 <assert_print>
    8590:	4805      	ldr	r0, [pc, #20]	; (85a8 <z_set_timeout_expiry+0x8c>)
    8592:	21b9      	movs	r1, #185	; 0xb9
    8594:	f000 fdc0 	bl	9118 <assert_post_action>
	__asm__ volatile(
    8598:	f386 8811 	msr	BASEPRI, r6
    859c:	f3bf 8f6f 	isb	sy
		}
	}
}
    85a0:	bd70      	pop	{r4, r5, r6, pc}
    85a2:	bf00      	nop
    85a4:	20000cb8 	.word	0x20000cb8
    85a8:	0000a587 	.word	0x0000a587
    85ac:	0000a5e0 	.word	0x0000a5e0
    85b0:	0000a092 	.word	0x0000a092
    85b4:	0000a5f5 	.word	0x0000a5f5
    85b8:	0000a5b4 	.word	0x0000a5b4
    85bc:	0000a5cb 	.word	0x0000a5cb

000085c0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    85c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85c4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    85c6:	f7ff f823 	bl	7610 <z_time_slice>
	__asm__ volatile(
    85ca:	f04f 0340 	mov.w	r3, #64	; 0x40
    85ce:	f3ef 8511 	mrs	r5, BASEPRI
    85d2:	f383 8812 	msr	BASEPRI_MAX, r3
    85d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85da:	484c      	ldr	r0, [pc, #304]	; (870c <sys_clock_announce+0x14c>)
    85dc:	f7fe f9b0 	bl	6940 <z_spin_lock_valid>
    85e0:	b968      	cbnz	r0, 85fe <sys_clock_announce+0x3e>
    85e2:	4a4b      	ldr	r2, [pc, #300]	; (8710 <sys_clock_announce+0x150>)
    85e4:	494b      	ldr	r1, [pc, #300]	; (8714 <sys_clock_announce+0x154>)
    85e6:	484c      	ldr	r0, [pc, #304]	; (8718 <sys_clock_announce+0x158>)
    85e8:	238e      	movs	r3, #142	; 0x8e
    85ea:	f000 fd9c 	bl	9126 <assert_print>
    85ee:	4947      	ldr	r1, [pc, #284]	; (870c <sys_clock_announce+0x14c>)
    85f0:	484a      	ldr	r0, [pc, #296]	; (871c <sys_clock_announce+0x15c>)
    85f2:	f000 fd98 	bl	9126 <assert_print>
    85f6:	4846      	ldr	r0, [pc, #280]	; (8710 <sys_clock_announce+0x150>)
    85f8:	218e      	movs	r1, #142	; 0x8e
    85fa:	f000 fd8d 	bl	9118 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    85fe:	4f48      	ldr	r7, [pc, #288]	; (8720 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    8600:	4842      	ldr	r0, [pc, #264]	; (870c <sys_clock_announce+0x14c>)
	return list->head == list;
    8602:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8724 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    8606:	4e48      	ldr	r6, [pc, #288]	; (8728 <sys_clock_announce+0x168>)
    8608:	f7fe f9b8 	bl	697c <z_spin_lock_set_owner>
	announce_remaining = ticks;
    860c:	603c      	str	r4, [r7, #0]
    860e:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8612:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8614:	4544      	cmp	r4, r8
		curr_tick += dt;
    8616:	e9d6 1e00 	ldrd	r1, lr, [r6]
    861a:	ea4f 70e2 	mov.w	r0, r2, asr #31
    861e:	d00b      	beq.n	8638 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8620:	b154      	cbz	r4, 8638 <sys_clock_announce+0x78>
    8622:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    8626:	429a      	cmp	r2, r3
    8628:	eb70 090c 	sbcs.w	r9, r0, ip
    862c:	da28      	bge.n	8680 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    862e:	1a9b      	subs	r3, r3, r2
    8630:	eb6c 0c00 	sbc.w	ip, ip, r0
    8634:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    8638:	1851      	adds	r1, r2, r1
    863a:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    863e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8640:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    8644:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8646:	f7ff fdc7 	bl	81d8 <next_timeout>
    864a:	4621      	mov	r1, r4
    864c:	f7fc fdba 	bl	51c4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8650:	482e      	ldr	r0, [pc, #184]	; (870c <sys_clock_announce+0x14c>)
    8652:	f7fe f983 	bl	695c <z_spin_unlock_valid>
    8656:	b968      	cbnz	r0, 8674 <sys_clock_announce+0xb4>
    8658:	4a2d      	ldr	r2, [pc, #180]	; (8710 <sys_clock_announce+0x150>)
    865a:	4934      	ldr	r1, [pc, #208]	; (872c <sys_clock_announce+0x16c>)
    865c:	482e      	ldr	r0, [pc, #184]	; (8718 <sys_clock_announce+0x158>)
    865e:	23b9      	movs	r3, #185	; 0xb9
    8660:	f000 fd61 	bl	9126 <assert_print>
    8664:	4929      	ldr	r1, [pc, #164]	; (870c <sys_clock_announce+0x14c>)
    8666:	4832      	ldr	r0, [pc, #200]	; (8730 <sys_clock_announce+0x170>)
    8668:	f000 fd5d 	bl	9126 <assert_print>
    866c:	4828      	ldr	r0, [pc, #160]	; (8710 <sys_clock_announce+0x150>)
    866e:	21b9      	movs	r1, #185	; 0xb9
    8670:	f000 fd52 	bl	9118 <assert_post_action>
	__asm__ volatile(
    8674:	f385 8811 	msr	BASEPRI, r5
    8678:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    867c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8680:	1859      	adds	r1, r3, r1
    8682:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    8686:	1ad3      	subs	r3, r2, r3
    8688:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    868a:	2200      	movs	r2, #0
    868c:	2300      	movs	r3, #0
		curr_tick += dt;
    868e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    8692:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8696:	4620      	mov	r0, r4
    8698:	f7ff fdc6 	bl	8228 <remove_timeout>
    869c:	481b      	ldr	r0, [pc, #108]	; (870c <sys_clock_announce+0x14c>)
    869e:	f7fe f95d 	bl	695c <z_spin_unlock_valid>
    86a2:	b968      	cbnz	r0, 86c0 <sys_clock_announce+0x100>
    86a4:	4a1a      	ldr	r2, [pc, #104]	; (8710 <sys_clock_announce+0x150>)
    86a6:	4921      	ldr	r1, [pc, #132]	; (872c <sys_clock_announce+0x16c>)
    86a8:	481b      	ldr	r0, [pc, #108]	; (8718 <sys_clock_announce+0x158>)
    86aa:	23b9      	movs	r3, #185	; 0xb9
    86ac:	f000 fd3b 	bl	9126 <assert_print>
    86b0:	4916      	ldr	r1, [pc, #88]	; (870c <sys_clock_announce+0x14c>)
    86b2:	481f      	ldr	r0, [pc, #124]	; (8730 <sys_clock_announce+0x170>)
    86b4:	f000 fd37 	bl	9126 <assert_print>
    86b8:	4815      	ldr	r0, [pc, #84]	; (8710 <sys_clock_announce+0x150>)
    86ba:	21b9      	movs	r1, #185	; 0xb9
    86bc:	f000 fd2c 	bl	9118 <assert_post_action>
    86c0:	f385 8811 	msr	BASEPRI, r5
    86c4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    86c8:	68a3      	ldr	r3, [r4, #8]
    86ca:	4620      	mov	r0, r4
    86cc:	4798      	blx	r3
	__asm__ volatile(
    86ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    86d2:	f3ef 8511 	mrs	r5, BASEPRI
    86d6:	f383 8812 	msr	BASEPRI_MAX, r3
    86da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86de:	480b      	ldr	r0, [pc, #44]	; (870c <sys_clock_announce+0x14c>)
    86e0:	f7fe f92e 	bl	6940 <z_spin_lock_valid>
    86e4:	b968      	cbnz	r0, 8702 <sys_clock_announce+0x142>
    86e6:	4a0a      	ldr	r2, [pc, #40]	; (8710 <sys_clock_announce+0x150>)
    86e8:	490a      	ldr	r1, [pc, #40]	; (8714 <sys_clock_announce+0x154>)
    86ea:	480b      	ldr	r0, [pc, #44]	; (8718 <sys_clock_announce+0x158>)
    86ec:	238e      	movs	r3, #142	; 0x8e
    86ee:	f000 fd1a 	bl	9126 <assert_print>
    86f2:	4906      	ldr	r1, [pc, #24]	; (870c <sys_clock_announce+0x14c>)
    86f4:	4809      	ldr	r0, [pc, #36]	; (871c <sys_clock_announce+0x15c>)
    86f6:	f000 fd16 	bl	9126 <assert_print>
    86fa:	4805      	ldr	r0, [pc, #20]	; (8710 <sys_clock_announce+0x150>)
    86fc:	218e      	movs	r1, #142	; 0x8e
    86fe:	f000 fd0b 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    8702:	4802      	ldr	r0, [pc, #8]	; (870c <sys_clock_announce+0x14c>)
    8704:	f7fe f93a 	bl	697c <z_spin_lock_set_owner>
	return k;
    8708:	e781      	b.n	860e <sys_clock_announce+0x4e>
    870a:	bf00      	nop
    870c:	20000cb8 	.word	0x20000cb8
    8710:	0000a587 	.word	0x0000a587
    8714:	0000a5e0 	.word	0x0000a5e0
    8718:	0000a092 	.word	0x0000a092
    871c:	0000a5f5 	.word	0x0000a5f5
    8720:	20000cb4 	.word	0x20000cb4
    8724:	20000174 	.word	0x20000174
    8728:	20000538 	.word	0x20000538
    872c:	0000a5b4 	.word	0x0000a5b4
    8730:	0000a5cb 	.word	0x0000a5cb

00008734 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8734:	b570      	push	{r4, r5, r6, lr}
    8736:	f04f 0340 	mov.w	r3, #64	; 0x40
    873a:	f3ef 8611 	mrs	r6, BASEPRI
    873e:	f383 8812 	msr	BASEPRI_MAX, r3
    8742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8746:	481b      	ldr	r0, [pc, #108]	; (87b4 <sys_clock_tick_get+0x80>)
    8748:	f7fe f8fa 	bl	6940 <z_spin_lock_valid>
    874c:	b968      	cbnz	r0, 876a <sys_clock_tick_get+0x36>
    874e:	4a1a      	ldr	r2, [pc, #104]	; (87b8 <sys_clock_tick_get+0x84>)
    8750:	491a      	ldr	r1, [pc, #104]	; (87bc <sys_clock_tick_get+0x88>)
    8752:	481b      	ldr	r0, [pc, #108]	; (87c0 <sys_clock_tick_get+0x8c>)
    8754:	238e      	movs	r3, #142	; 0x8e
    8756:	f000 fce6 	bl	9126 <assert_print>
    875a:	4916      	ldr	r1, [pc, #88]	; (87b4 <sys_clock_tick_get+0x80>)
    875c:	4819      	ldr	r0, [pc, #100]	; (87c4 <sys_clock_tick_get+0x90>)
    875e:	f000 fce2 	bl	9126 <assert_print>
    8762:	4815      	ldr	r0, [pc, #84]	; (87b8 <sys_clock_tick_get+0x84>)
    8764:	218e      	movs	r1, #142	; 0x8e
    8766:	f000 fcd7 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    876a:	4812      	ldr	r0, [pc, #72]	; (87b4 <sys_clock_tick_get+0x80>)
    876c:	f7fe f906 	bl	697c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8770:	f7fc fd5a 	bl	5228 <sys_clock_elapsed>
    8774:	4a14      	ldr	r2, [pc, #80]	; (87c8 <sys_clock_tick_get+0x94>)
    8776:	e9d2 4500 	ldrd	r4, r5, [r2]
    877a:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    877c:	480d      	ldr	r0, [pc, #52]	; (87b4 <sys_clock_tick_get+0x80>)
    877e:	f145 0500 	adc.w	r5, r5, #0
    8782:	f7fe f8eb 	bl	695c <z_spin_unlock_valid>
    8786:	b968      	cbnz	r0, 87a4 <sys_clock_tick_get+0x70>
    8788:	4a0b      	ldr	r2, [pc, #44]	; (87b8 <sys_clock_tick_get+0x84>)
    878a:	4910      	ldr	r1, [pc, #64]	; (87cc <sys_clock_tick_get+0x98>)
    878c:	480c      	ldr	r0, [pc, #48]	; (87c0 <sys_clock_tick_get+0x8c>)
    878e:	23b9      	movs	r3, #185	; 0xb9
    8790:	f000 fcc9 	bl	9126 <assert_print>
    8794:	4907      	ldr	r1, [pc, #28]	; (87b4 <sys_clock_tick_get+0x80>)
    8796:	480e      	ldr	r0, [pc, #56]	; (87d0 <sys_clock_tick_get+0x9c>)
    8798:	f000 fcc5 	bl	9126 <assert_print>
    879c:	4806      	ldr	r0, [pc, #24]	; (87b8 <sys_clock_tick_get+0x84>)
    879e:	21b9      	movs	r1, #185	; 0xb9
    87a0:	f000 fcba 	bl	9118 <assert_post_action>
	__asm__ volatile(
    87a4:	f386 8811 	msr	BASEPRI, r6
    87a8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    87ac:	4620      	mov	r0, r4
    87ae:	4629      	mov	r1, r5
    87b0:	bd70      	pop	{r4, r5, r6, pc}
    87b2:	bf00      	nop
    87b4:	20000cb8 	.word	0x20000cb8
    87b8:	0000a587 	.word	0x0000a587
    87bc:	0000a5e0 	.word	0x0000a5e0
    87c0:	0000a092 	.word	0x0000a092
    87c4:	0000a5f5 	.word	0x0000a5f5
    87c8:	20000538 	.word	0x20000538
    87cc:	0000a5b4 	.word	0x0000a5b4
    87d0:	0000a5cb 	.word	0x0000a5cb

000087d4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    87d4:	b570      	push	{r4, r5, r6, lr}
    87d6:	4604      	mov	r4, r0
	__asm__ volatile(
    87d8:	f04f 0340 	mov.w	r3, #64	; 0x40
    87dc:	f3ef 8511 	mrs	r5, BASEPRI
    87e0:	f383 8812 	msr	BASEPRI_MAX, r3
    87e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87e8:	484d      	ldr	r0, [pc, #308]	; (8920 <z_timer_expiration_handler+0x14c>)
    87ea:	f7fe f8a9 	bl	6940 <z_spin_lock_valid>
    87ee:	b968      	cbnz	r0, 880c <z_timer_expiration_handler+0x38>
    87f0:	4a4c      	ldr	r2, [pc, #304]	; (8924 <z_timer_expiration_handler+0x150>)
    87f2:	494d      	ldr	r1, [pc, #308]	; (8928 <z_timer_expiration_handler+0x154>)
    87f4:	484d      	ldr	r0, [pc, #308]	; (892c <z_timer_expiration_handler+0x158>)
    87f6:	238e      	movs	r3, #142	; 0x8e
    87f8:	f000 fc95 	bl	9126 <assert_print>
    87fc:	4948      	ldr	r1, [pc, #288]	; (8920 <z_timer_expiration_handler+0x14c>)
    87fe:	484c      	ldr	r0, [pc, #304]	; (8930 <z_timer_expiration_handler+0x15c>)
    8800:	f000 fc91 	bl	9126 <assert_print>
    8804:	4847      	ldr	r0, [pc, #284]	; (8924 <z_timer_expiration_handler+0x150>)
    8806:	218e      	movs	r1, #142	; 0x8e
    8808:	f000 fc86 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    880c:	4844      	ldr	r0, [pc, #272]	; (8920 <z_timer_expiration_handler+0x14c>)
    880e:	f7fe f8b5 	bl	697c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8812:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    8816:	3301      	adds	r3, #1
    8818:	f142 0200 	adc.w	r2, r2, #0
    881c:	2b02      	cmp	r3, #2
    881e:	f172 0200 	sbcs.w	r2, r2, #0
    8822:	d305      	bcc.n	8830 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8824:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    8828:	4942      	ldr	r1, [pc, #264]	; (8934 <z_timer_expiration_handler+0x160>)
    882a:	4620      	mov	r0, r4
    882c:	f7ff fd16 	bl	825c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8830:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8832:	3301      	adds	r3, #1
    8834:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8836:	6a23      	ldr	r3, [r4, #32]
    8838:	2b00      	cmp	r3, #0
    883a:	d035      	beq.n	88a8 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    883c:	4838      	ldr	r0, [pc, #224]	; (8920 <z_timer_expiration_handler+0x14c>)
    883e:	f7fe f88d 	bl	695c <z_spin_unlock_valid>
    8842:	b968      	cbnz	r0, 8860 <z_timer_expiration_handler+0x8c>
    8844:	4a37      	ldr	r2, [pc, #220]	; (8924 <z_timer_expiration_handler+0x150>)
    8846:	493c      	ldr	r1, [pc, #240]	; (8938 <z_timer_expiration_handler+0x164>)
    8848:	4838      	ldr	r0, [pc, #224]	; (892c <z_timer_expiration_handler+0x158>)
    884a:	23b9      	movs	r3, #185	; 0xb9
    884c:	f000 fc6b 	bl	9126 <assert_print>
    8850:	4933      	ldr	r1, [pc, #204]	; (8920 <z_timer_expiration_handler+0x14c>)
    8852:	483a      	ldr	r0, [pc, #232]	; (893c <z_timer_expiration_handler+0x168>)
    8854:	f000 fc67 	bl	9126 <assert_print>
    8858:	4832      	ldr	r0, [pc, #200]	; (8924 <z_timer_expiration_handler+0x150>)
    885a:	21b9      	movs	r1, #185	; 0xb9
    885c:	f000 fc5c 	bl	9118 <assert_post_action>
	__asm__ volatile(
    8860:	f385 8811 	msr	BASEPRI, r5
    8864:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    8868:	6a23      	ldr	r3, [r4, #32]
    886a:	4620      	mov	r0, r4
    886c:	4798      	blx	r3
	__asm__ volatile(
    886e:	f04f 0340 	mov.w	r3, #64	; 0x40
    8872:	f3ef 8511 	mrs	r5, BASEPRI
    8876:	f383 8812 	msr	BASEPRI_MAX, r3
    887a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    887e:	4828      	ldr	r0, [pc, #160]	; (8920 <z_timer_expiration_handler+0x14c>)
    8880:	f7fe f85e 	bl	6940 <z_spin_lock_valid>
    8884:	b968      	cbnz	r0, 88a2 <z_timer_expiration_handler+0xce>
    8886:	4a27      	ldr	r2, [pc, #156]	; (8924 <z_timer_expiration_handler+0x150>)
    8888:	4927      	ldr	r1, [pc, #156]	; (8928 <z_timer_expiration_handler+0x154>)
    888a:	4828      	ldr	r0, [pc, #160]	; (892c <z_timer_expiration_handler+0x158>)
    888c:	238e      	movs	r3, #142	; 0x8e
    888e:	f000 fc4a 	bl	9126 <assert_print>
    8892:	4923      	ldr	r1, [pc, #140]	; (8920 <z_timer_expiration_handler+0x14c>)
    8894:	4826      	ldr	r0, [pc, #152]	; (8930 <z_timer_expiration_handler+0x15c>)
    8896:	f000 fc46 	bl	9126 <assert_print>
    889a:	4822      	ldr	r0, [pc, #136]	; (8924 <z_timer_expiration_handler+0x150>)
    889c:	218e      	movs	r1, #142	; 0x8e
    889e:	f000 fc3b 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    88a2:	481f      	ldr	r0, [pc, #124]	; (8920 <z_timer_expiration_handler+0x14c>)
    88a4:	f7fe f86a 	bl	697c <z_spin_lock_set_owner>
	return list->head == list;
    88a8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    88ac:	42a6      	cmp	r6, r4
    88ae:	d000      	beq.n	88b2 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    88b0:	b9b6      	cbnz	r6, 88e0 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88b2:	481b      	ldr	r0, [pc, #108]	; (8920 <z_timer_expiration_handler+0x14c>)
    88b4:	f7fe f852 	bl	695c <z_spin_unlock_valid>
    88b8:	b968      	cbnz	r0, 88d6 <z_timer_expiration_handler+0x102>
    88ba:	4a1a      	ldr	r2, [pc, #104]	; (8924 <z_timer_expiration_handler+0x150>)
    88bc:	491e      	ldr	r1, [pc, #120]	; (8938 <z_timer_expiration_handler+0x164>)
    88be:	481b      	ldr	r0, [pc, #108]	; (892c <z_timer_expiration_handler+0x158>)
    88c0:	23b9      	movs	r3, #185	; 0xb9
    88c2:	f000 fc30 	bl	9126 <assert_print>
    88c6:	4916      	ldr	r1, [pc, #88]	; (8920 <z_timer_expiration_handler+0x14c>)
    88c8:	481c      	ldr	r0, [pc, #112]	; (893c <z_timer_expiration_handler+0x168>)
    88ca:	f000 fc2c 	bl	9126 <assert_print>
    88ce:	4815      	ldr	r0, [pc, #84]	; (8924 <z_timer_expiration_handler+0x150>)
    88d0:	21b9      	movs	r1, #185	; 0xb9
    88d2:	f000 fc21 	bl	9118 <assert_post_action>
	__asm__ volatile(
    88d6:	f385 8811 	msr	BASEPRI, r5
    88da:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    88de:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    88e0:	4630      	mov	r0, r6
    88e2:	f7fe fc51 	bl	7188 <z_unpend_thread_no_timeout>
    88e6:	2300      	movs	r3, #0
    88e8:	480d      	ldr	r0, [pc, #52]	; (8920 <z_timer_expiration_handler+0x14c>)
    88ea:	67b3      	str	r3, [r6, #120]	; 0x78
    88ec:	f7fe f836 	bl	695c <z_spin_unlock_valid>
    88f0:	b968      	cbnz	r0, 890e <z_timer_expiration_handler+0x13a>
    88f2:	4a0c      	ldr	r2, [pc, #48]	; (8924 <z_timer_expiration_handler+0x150>)
    88f4:	4910      	ldr	r1, [pc, #64]	; (8938 <z_timer_expiration_handler+0x164>)
    88f6:	480d      	ldr	r0, [pc, #52]	; (892c <z_timer_expiration_handler+0x158>)
    88f8:	23b9      	movs	r3, #185	; 0xb9
    88fa:	f000 fc14 	bl	9126 <assert_print>
    88fe:	4908      	ldr	r1, [pc, #32]	; (8920 <z_timer_expiration_handler+0x14c>)
    8900:	480e      	ldr	r0, [pc, #56]	; (893c <z_timer_expiration_handler+0x168>)
    8902:	f000 fc10 	bl	9126 <assert_print>
    8906:	4807      	ldr	r0, [pc, #28]	; (8924 <z_timer_expiration_handler+0x150>)
    8908:	21b9      	movs	r1, #185	; 0xb9
    890a:	f000 fc05 	bl	9118 <assert_post_action>
    890e:	f385 8811 	msr	BASEPRI, r5
    8912:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8916:	4630      	mov	r0, r6
}
    8918:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    891c:	f7fe bbec 	b.w	70f8 <z_ready_thread>
    8920:	20000cbc 	.word	0x20000cbc
    8924:	0000a587 	.word	0x0000a587
    8928:	0000a5e0 	.word	0x0000a5e0
    892c:	0000a092 	.word	0x0000a092
    8930:	0000a5f5 	.word	0x0000a5f5
    8934:	000087d5 	.word	0x000087d5
    8938:	0000a5b4 	.word	0x0000a5b4
    893c:	0000a5cb 	.word	0x0000a5cb

00008940 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8948:	bf08      	it	eq
    894a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    894e:	4605      	mov	r5, r0
    8950:	4614      	mov	r4, r2
    8952:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    8956:	4619      	mov	r1, r3
    8958:	4691      	mov	r9, r2
    895a:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    895c:	d037      	beq.n	89ce <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    895e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8962:	bf08      	it	eq
    8964:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8968:	4637      	mov	r7, r6
    896a:	4682      	mov	sl, r0
    896c:	d011      	beq.n	8992 <z_impl_k_timer_start+0x52>
    896e:	ea50 0306 	orrs.w	r3, r0, r6
    8972:	d00e      	beq.n	8992 <z_impl_k_timer_start+0x52>
    8974:	1c72      	adds	r2, r6, #1
    8976:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    897a:	db0a      	blt.n	8992 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    897c:	2e02      	cmp	r6, #2
    897e:	4684      	mov	ip, r0
    8980:	f170 0000 	sbcs.w	r0, r0, #0
    8984:	bfbc      	itt	lt
    8986:	2702      	movlt	r7, #2
    8988:	f04f 0c00 	movlt.w	ip, #0
    898c:	3f01      	subs	r7, #1
    898e:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8992:	1c63      	adds	r3, r4, #1
    8994:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    8998:	db0a      	blt.n	89b0 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    899a:	2c01      	cmp	r4, #1
    899c:	f171 0300 	sbcs.w	r3, r1, #0
    89a0:	4622      	mov	r2, r4
    89a2:	bfbc      	itt	lt
    89a4:	2201      	movlt	r2, #1
    89a6:	2100      	movlt	r1, #0
    89a8:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    89ac:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    89b0:	4628      	mov	r0, r5
    89b2:	f7ff fd1d 	bl	83f0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    89b6:	2300      	movs	r3, #0
    89b8:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    89ba:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    89be:	464a      	mov	r2, r9
    89c0:	4643      	mov	r3, r8
    89c2:	4628      	mov	r0, r5
    89c4:	4903      	ldr	r1, [pc, #12]	; (89d4 <z_impl_k_timer_start+0x94>)
		     duration);
}
    89c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    89ca:	f7ff bc47 	b.w	825c <z_add_timeout>
}
    89ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89d2:	bf00      	nop
    89d4:	000087d5 	.word	0x000087d5

000089d8 <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
    89d8:	b570      	push	{r4, r5, r6, lr}
    89da:	4604      	mov	r4, r0
	__asm__ volatile(
    89dc:	f04f 0340 	mov.w	r3, #64	; 0x40
    89e0:	f3ef 8611 	mrs	r6, BASEPRI
    89e4:	f383 8812 	msr	BASEPRI_MAX, r3
    89e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    89ec:	4817      	ldr	r0, [pc, #92]	; (8a4c <z_impl_k_timer_status_get+0x74>)
    89ee:	f7fd ffa7 	bl	6940 <z_spin_lock_valid>
    89f2:	b968      	cbnz	r0, 8a10 <z_impl_k_timer_status_get+0x38>
    89f4:	4a16      	ldr	r2, [pc, #88]	; (8a50 <z_impl_k_timer_status_get+0x78>)
    89f6:	4917      	ldr	r1, [pc, #92]	; (8a54 <z_impl_k_timer_status_get+0x7c>)
    89f8:	4817      	ldr	r0, [pc, #92]	; (8a58 <z_impl_k_timer_status_get+0x80>)
    89fa:	238e      	movs	r3, #142	; 0x8e
    89fc:	f000 fb93 	bl	9126 <assert_print>
    8a00:	4912      	ldr	r1, [pc, #72]	; (8a4c <z_impl_k_timer_status_get+0x74>)
    8a02:	4816      	ldr	r0, [pc, #88]	; (8a5c <z_impl_k_timer_status_get+0x84>)
    8a04:	f000 fb8f 	bl	9126 <assert_print>
    8a08:	4811      	ldr	r0, [pc, #68]	; (8a50 <z_impl_k_timer_status_get+0x78>)
    8a0a:	218e      	movs	r1, #142	; 0x8e
    8a0c:	f000 fb84 	bl	9118 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a10:	480e      	ldr	r0, [pc, #56]	; (8a4c <z_impl_k_timer_status_get+0x74>)
    8a12:	f7fd ffb3 	bl	697c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
    8a16:	2300      	movs	r3, #0
	uint32_t result = timer->status;
    8a18:	6b25      	ldr	r5, [r4, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a1a:	480c      	ldr	r0, [pc, #48]	; (8a4c <z_impl_k_timer_status_get+0x74>)
	timer->status = 0U;
    8a1c:	6323      	str	r3, [r4, #48]	; 0x30
    8a1e:	f7fd ff9d 	bl	695c <z_spin_unlock_valid>
    8a22:	b968      	cbnz	r0, 8a40 <z_impl_k_timer_status_get+0x68>
    8a24:	4a0a      	ldr	r2, [pc, #40]	; (8a50 <z_impl_k_timer_status_get+0x78>)
    8a26:	490e      	ldr	r1, [pc, #56]	; (8a60 <z_impl_k_timer_status_get+0x88>)
    8a28:	480b      	ldr	r0, [pc, #44]	; (8a58 <z_impl_k_timer_status_get+0x80>)
    8a2a:	23b9      	movs	r3, #185	; 0xb9
    8a2c:	f000 fb7b 	bl	9126 <assert_print>
    8a30:	4906      	ldr	r1, [pc, #24]	; (8a4c <z_impl_k_timer_status_get+0x74>)
    8a32:	480c      	ldr	r0, [pc, #48]	; (8a64 <z_impl_k_timer_status_get+0x8c>)
    8a34:	f000 fb77 	bl	9126 <assert_print>
    8a38:	4805      	ldr	r0, [pc, #20]	; (8a50 <z_impl_k_timer_status_get+0x78>)
    8a3a:	21b9      	movs	r1, #185	; 0xb9
    8a3c:	f000 fb6c 	bl	9118 <assert_post_action>
	__asm__ volatile(
    8a40:	f386 8811 	msr	BASEPRI, r6
    8a44:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
    8a48:	4628      	mov	r0, r5
    8a4a:	bd70      	pop	{r4, r5, r6, pc}
    8a4c:	20000cbc 	.word	0x20000cbc
    8a50:	0000a587 	.word	0x0000a587
    8a54:	0000a5e0 	.word	0x0000a5e0
    8a58:	0000a092 	.word	0x0000a092
    8a5c:	0000a5f5 	.word	0x0000a5f5
    8a60:	0000a5b4 	.word	0x0000a5b4
    8a64:	0000a5cb 	.word	0x0000a5cb

00008a68 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    8a68:	4b01      	ldr	r3, [pc, #4]	; (8a70 <k_thread_system_pool_assign+0x8>)
    8a6a:	6703      	str	r3, [r0, #112]	; 0x70
}
    8a6c:	4770      	bx	lr
    8a6e:	bf00      	nop
    8a70:	200001f4 	.word	0x200001f4

00008a74 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8a74:	4a02      	ldr	r2, [pc, #8]	; (8a80 <boot_banner+0xc>)
    8a76:	4903      	ldr	r1, [pc, #12]	; (8a84 <boot_banner+0x10>)
    8a78:	4803      	ldr	r0, [pc, #12]	; (8a88 <boot_banner+0x14>)
    8a7a:	f000 ba58 	b.w	8f2e <printk>
    8a7e:	bf00      	nop
    8a80:	0000ba2f 	.word	0x0000ba2f
    8a84:	0000bc27 	.word	0x0000bc27
    8a88:	0000bc34 	.word	0x0000bc34

00008a8c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8a8c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8a8e:	4c0e      	ldr	r4, [pc, #56]	; (8ac8 <statics_init+0x3c>)
    8a90:	4d0e      	ldr	r5, [pc, #56]	; (8acc <statics_init+0x40>)
    8a92:	4e0f      	ldr	r6, [pc, #60]	; (8ad0 <statics_init+0x44>)
    8a94:	42ac      	cmp	r4, r5
    8a96:	d90c      	bls.n	8ab2 <statics_init+0x26>
    8a98:	490e      	ldr	r1, [pc, #56]	; (8ad4 <statics_init+0x48>)
    8a9a:	480f      	ldr	r0, [pc, #60]	; (8ad8 <statics_init+0x4c>)
    8a9c:	2318      	movs	r3, #24
    8a9e:	4632      	mov	r2, r6
    8aa0:	f000 fb41 	bl	9126 <assert_print>
    8aa4:	480d      	ldr	r0, [pc, #52]	; (8adc <statics_init+0x50>)
    8aa6:	f000 fb3e 	bl	9126 <assert_print>
    8aaa:	2118      	movs	r1, #24
    8aac:	4630      	mov	r0, r6
    8aae:	f000 fb33 	bl	9118 <assert_post_action>
    8ab2:	42ac      	cmp	r4, r5
    8ab4:	d301      	bcc.n	8aba <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8ab6:	2000      	movs	r0, #0
    8ab8:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8aba:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8abe:	4620      	mov	r0, r4
    8ac0:	f000 ffa2 	bl	9a08 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8ac4:	3418      	adds	r4, #24
    8ac6:	e7e5      	b.n	8a94 <statics_init+0x8>
    8ac8:	200001f4 	.word	0x200001f4
    8acc:	2000020c 	.word	0x2000020c
    8ad0:	0000bc5b 	.word	0x0000bc5b
    8ad4:	0000bc7d 	.word	0x0000bc7d
    8ad8:	0000a092 	.word	0x0000a092
    8adc:	0000b804 	.word	0x0000b804

00008ae0 <nrf_cc3xx_platform_init_no_rng>:
    8ae0:	b510      	push	{r4, lr}
    8ae2:	4c0a      	ldr	r4, [pc, #40]	; (8b0c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8ae4:	6823      	ldr	r3, [r4, #0]
    8ae6:	b11b      	cbz	r3, 8af0 <nrf_cc3xx_platform_init_no_rng+0x10>
    8ae8:	2301      	movs	r3, #1
    8aea:	6023      	str	r3, [r4, #0]
    8aec:	2000      	movs	r0, #0
    8aee:	bd10      	pop	{r4, pc}
    8af0:	f000 f8ce 	bl	8c90 <CC_LibInitNoRng>
    8af4:	2800      	cmp	r0, #0
    8af6:	d0f7      	beq.n	8ae8 <nrf_cc3xx_platform_init_no_rng+0x8>
    8af8:	3801      	subs	r0, #1
    8afa:	2806      	cmp	r0, #6
    8afc:	d803      	bhi.n	8b06 <nrf_cc3xx_platform_init_no_rng+0x26>
    8afe:	4b04      	ldr	r3, [pc, #16]	; (8b10 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8b00:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8b04:	bd10      	pop	{r4, pc}
    8b06:	4803      	ldr	r0, [pc, #12]	; (8b14 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8b08:	bd10      	pop	{r4, pc}
    8b0a:	bf00      	nop
    8b0c:	20000cc0 	.word	0x20000cc0
    8b10:	00009f98 	.word	0x00009f98
    8b14:	ffff8ffe 	.word	0xffff8ffe

00008b18 <nrf_cc3xx_platform_abort>:
    8b18:	f3bf 8f4f 	dsb	sy
    8b1c:	4905      	ldr	r1, [pc, #20]	; (8b34 <nrf_cc3xx_platform_abort+0x1c>)
    8b1e:	4b06      	ldr	r3, [pc, #24]	; (8b38 <nrf_cc3xx_platform_abort+0x20>)
    8b20:	68ca      	ldr	r2, [r1, #12]
    8b22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8b26:	4313      	orrs	r3, r2
    8b28:	60cb      	str	r3, [r1, #12]
    8b2a:	f3bf 8f4f 	dsb	sy
    8b2e:	bf00      	nop
    8b30:	e7fd      	b.n	8b2e <nrf_cc3xx_platform_abort+0x16>
    8b32:	bf00      	nop
    8b34:	e000ed00 	.word	0xe000ed00
    8b38:	05fa0004 	.word	0x05fa0004

00008b3c <CC_PalAbort>:
    8b3c:	b410      	push	{r4}
    8b3e:	4b09      	ldr	r3, [pc, #36]	; (8b64 <CC_PalAbort+0x28>)
    8b40:	4909      	ldr	r1, [pc, #36]	; (8b68 <CC_PalAbort+0x2c>)
    8b42:	4c0a      	ldr	r4, [pc, #40]	; (8b6c <CC_PalAbort+0x30>)
    8b44:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8b48:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8b4c:	6849      	ldr	r1, [r1, #4]
    8b4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8b52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8b56:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8b5a:	2300      	movs	r3, #0
    8b5c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8b60:	bc10      	pop	{r4}
    8b62:	4708      	bx	r1
    8b64:	5002b000 	.word	0x5002b000
    8b68:	2000017c 	.word	0x2000017c
    8b6c:	5002a000 	.word	0x5002a000

00008b70 <nrf_cc3xx_platform_set_abort>:
    8b70:	e9d0 1200 	ldrd	r1, r2, [r0]
    8b74:	4b01      	ldr	r3, [pc, #4]	; (8b7c <nrf_cc3xx_platform_set_abort+0xc>)
    8b76:	e9c3 1200 	strd	r1, r2, [r3]
    8b7a:	4770      	bx	lr
    8b7c:	2000017c 	.word	0x2000017c

00008b80 <mutex_free>:
    8b80:	b510      	push	{r4, lr}
    8b82:	4604      	mov	r4, r0
    8b84:	b130      	cbz	r0, 8b94 <mutex_free+0x14>
    8b86:	6863      	ldr	r3, [r4, #4]
    8b88:	06db      	lsls	r3, r3, #27
    8b8a:	d502      	bpl.n	8b92 <mutex_free+0x12>
    8b8c:	2300      	movs	r3, #0
    8b8e:	6023      	str	r3, [r4, #0]
    8b90:	6063      	str	r3, [r4, #4]
    8b92:	bd10      	pop	{r4, pc}
    8b94:	4b02      	ldr	r3, [pc, #8]	; (8ba0 <mutex_free+0x20>)
    8b96:	4803      	ldr	r0, [pc, #12]	; (8ba4 <mutex_free+0x24>)
    8b98:	685b      	ldr	r3, [r3, #4]
    8b9a:	4798      	blx	r3
    8b9c:	e7f3      	b.n	8b86 <mutex_free+0x6>
    8b9e:	bf00      	nop
    8ba0:	2000017c 	.word	0x2000017c
    8ba4:	00009fb4 	.word	0x00009fb4

00008ba8 <mutex_lock>:
    8ba8:	b1b0      	cbz	r0, 8bd8 <mutex_lock+0x30>
    8baa:	6843      	ldr	r3, [r0, #4]
    8bac:	b193      	cbz	r3, 8bd4 <mutex_lock+0x2c>
    8bae:	06db      	lsls	r3, r3, #27
    8bb0:	d50e      	bpl.n	8bd0 <mutex_lock+0x28>
    8bb2:	2301      	movs	r3, #1
    8bb4:	e850 2f00 	ldrex	r2, [r0]
    8bb8:	4619      	mov	r1, r3
    8bba:	e840 1c00 	strex	ip, r1, [r0]
    8bbe:	f09c 0f00 	teq	ip, #0
    8bc2:	d1f7      	bne.n	8bb4 <mutex_lock+0xc>
    8bc4:	2a01      	cmp	r2, #1
    8bc6:	d0f5      	beq.n	8bb4 <mutex_lock+0xc>
    8bc8:	f3bf 8f5f 	dmb	sy
    8bcc:	2000      	movs	r0, #0
    8bce:	4770      	bx	lr
    8bd0:	4803      	ldr	r0, [pc, #12]	; (8be0 <mutex_lock+0x38>)
    8bd2:	4770      	bx	lr
    8bd4:	4803      	ldr	r0, [pc, #12]	; (8be4 <mutex_lock+0x3c>)
    8bd6:	4770      	bx	lr
    8bd8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8bdc:	4770      	bx	lr
    8bde:	bf00      	nop
    8be0:	ffff8fe9 	.word	0xffff8fe9
    8be4:	ffff8fea 	.word	0xffff8fea

00008be8 <mutex_unlock>:
    8be8:	b168      	cbz	r0, 8c06 <mutex_unlock+0x1e>
    8bea:	6843      	ldr	r3, [r0, #4]
    8bec:	b13b      	cbz	r3, 8bfe <mutex_unlock+0x16>
    8bee:	06db      	lsls	r3, r3, #27
    8bf0:	d507      	bpl.n	8c02 <mutex_unlock+0x1a>
    8bf2:	f3bf 8f5f 	dmb	sy
    8bf6:	2300      	movs	r3, #0
    8bf8:	6003      	str	r3, [r0, #0]
    8bfa:	4618      	mov	r0, r3
    8bfc:	4770      	bx	lr
    8bfe:	4803      	ldr	r0, [pc, #12]	; (8c0c <mutex_unlock+0x24>)
    8c00:	4770      	bx	lr
    8c02:	4803      	ldr	r0, [pc, #12]	; (8c10 <mutex_unlock+0x28>)
    8c04:	4770      	bx	lr
    8c06:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8c0a:	4770      	bx	lr
    8c0c:	ffff8fea 	.word	0xffff8fea
    8c10:	ffff8fe9 	.word	0xffff8fe9

00008c14 <mutex_init>:
    8c14:	b510      	push	{r4, lr}
    8c16:	4604      	mov	r4, r0
    8c18:	b120      	cbz	r0, 8c24 <mutex_init+0x10>
    8c1a:	2200      	movs	r2, #0
    8c1c:	2311      	movs	r3, #17
    8c1e:	6022      	str	r2, [r4, #0]
    8c20:	6063      	str	r3, [r4, #4]
    8c22:	bd10      	pop	{r4, pc}
    8c24:	4801      	ldr	r0, [pc, #4]	; (8c2c <mutex_init+0x18>)
    8c26:	f7ff ff89 	bl	8b3c <CC_PalAbort>
    8c2a:	e7f6      	b.n	8c1a <mutex_init+0x6>
    8c2c:	00009fdc 	.word	0x00009fdc

00008c30 <nrf_cc3xx_platform_set_mutexes>:
    8c30:	b570      	push	{r4, r5, r6, lr}
    8c32:	e9d0 2300 	ldrd	r2, r3, [r0]
    8c36:	4c13      	ldr	r4, [pc, #76]	; (8c84 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8c38:	4d13      	ldr	r5, [pc, #76]	; (8c88 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8c3a:	6063      	str	r3, [r4, #4]
    8c3c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8c40:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8c44:	6022      	str	r2, [r4, #0]
    8c46:	4b11      	ldr	r3, [pc, #68]	; (8c8c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8c48:	6808      	ldr	r0, [r1, #0]
    8c4a:	6018      	str	r0, [r3, #0]
    8c4c:	6848      	ldr	r0, [r1, #4]
    8c4e:	6058      	str	r0, [r3, #4]
    8c50:	6888      	ldr	r0, [r1, #8]
    8c52:	6098      	str	r0, [r3, #8]
    8c54:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8c58:	60d8      	str	r0, [r3, #12]
    8c5a:	6119      	str	r1, [r3, #16]
    8c5c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    8c60:	06db      	lsls	r3, r3, #27
    8c62:	d50d      	bpl.n	8c80 <nrf_cc3xx_platform_set_mutexes+0x50>
    8c64:	2300      	movs	r3, #0
    8c66:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    8c6a:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    8c6e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8c72:	4790      	blx	r2
    8c74:	6823      	ldr	r3, [r4, #0]
    8c76:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c7e:	4718      	bx	r3
    8c80:	bd70      	pop	{r4, r5, r6, pc}
    8c82:	bf00      	nop
    8c84:	2000018c 	.word	0x2000018c
    8c88:	20000cd8 	.word	0x20000cd8
    8c8c:	2000019c 	.word	0x2000019c

00008c90 <CC_LibInitNoRng>:
    8c90:	b538      	push	{r3, r4, r5, lr}
    8c92:	f000 f82f 	bl	8cf4 <CC_HalInit>
    8c96:	b120      	cbz	r0, 8ca2 <CC_LibInitNoRng+0x12>
    8c98:	2403      	movs	r4, #3
    8c9a:	f000 f863 	bl	8d64 <CC_PalTerminate>
    8c9e:	4620      	mov	r0, r4
    8ca0:	bd38      	pop	{r3, r4, r5, pc}
    8ca2:	f000 f831 	bl	8d08 <CC_PalInit>
    8ca6:	b998      	cbnz	r0, 8cd0 <CC_LibInitNoRng+0x40>
    8ca8:	f000 f8ac 	bl	8e04 <CC_PalPowerSaveModeSelect>
    8cac:	b998      	cbnz	r0, 8cd6 <CC_LibInitNoRng+0x46>
    8cae:	4d0f      	ldr	r5, [pc, #60]	; (8cec <CC_LibInitNoRng+0x5c>)
    8cb0:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8cb4:	0e1b      	lsrs	r3, r3, #24
    8cb6:	2bf0      	cmp	r3, #240	; 0xf0
    8cb8:	d108      	bne.n	8ccc <CC_LibInitNoRng+0x3c>
    8cba:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8cbe:	4b0c      	ldr	r3, [pc, #48]	; (8cf0 <CC_LibInitNoRng+0x60>)
    8cc0:	429a      	cmp	r2, r3
    8cc2:	d00a      	beq.n	8cda <CC_LibInitNoRng+0x4a>
    8cc4:	2407      	movs	r4, #7
    8cc6:	f000 f817 	bl	8cf8 <CC_HalTerminate>
    8cca:	e7e6      	b.n	8c9a <CC_LibInitNoRng+0xa>
    8ccc:	2406      	movs	r4, #6
    8cce:	e7fa      	b.n	8cc6 <CC_LibInitNoRng+0x36>
    8cd0:	2404      	movs	r4, #4
    8cd2:	4620      	mov	r0, r4
    8cd4:	bd38      	pop	{r3, r4, r5, pc}
    8cd6:	2400      	movs	r4, #0
    8cd8:	e7f5      	b.n	8cc6 <CC_LibInitNoRng+0x36>
    8cda:	2001      	movs	r0, #1
    8cdc:	f000 f892 	bl	8e04 <CC_PalPowerSaveModeSelect>
    8ce0:	4604      	mov	r4, r0
    8ce2:	2800      	cmp	r0, #0
    8ce4:	d1f7      	bne.n	8cd6 <CC_LibInitNoRng+0x46>
    8ce6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8cea:	e7d8      	b.n	8c9e <CC_LibInitNoRng+0xe>
    8cec:	5002b000 	.word	0x5002b000
    8cf0:	20e00000 	.word	0x20e00000

00008cf4 <CC_HalInit>:
    8cf4:	2000      	movs	r0, #0
    8cf6:	4770      	bx	lr

00008cf8 <CC_HalTerminate>:
    8cf8:	2000      	movs	r0, #0
    8cfa:	4770      	bx	lr

00008cfc <CC_HalMaskInterrupt>:
    8cfc:	4b01      	ldr	r3, [pc, #4]	; (8d04 <CC_HalMaskInterrupt+0x8>)
    8cfe:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    8d02:	4770      	bx	lr
    8d04:	5002b000 	.word	0x5002b000

00008d08 <CC_PalInit>:
    8d08:	b510      	push	{r4, lr}
    8d0a:	4811      	ldr	r0, [pc, #68]	; (8d50 <CC_PalInit+0x48>)
    8d0c:	f000 f848 	bl	8da0 <CC_PalMutexCreate>
    8d10:	b100      	cbz	r0, 8d14 <CC_PalInit+0xc>
    8d12:	bd10      	pop	{r4, pc}
    8d14:	480f      	ldr	r0, [pc, #60]	; (8d54 <CC_PalInit+0x4c>)
    8d16:	f000 f843 	bl	8da0 <CC_PalMutexCreate>
    8d1a:	2800      	cmp	r0, #0
    8d1c:	d1f9      	bne.n	8d12 <CC_PalInit+0xa>
    8d1e:	4c0e      	ldr	r4, [pc, #56]	; (8d58 <CC_PalInit+0x50>)
    8d20:	4620      	mov	r0, r4
    8d22:	f000 f83d 	bl	8da0 <CC_PalMutexCreate>
    8d26:	2800      	cmp	r0, #0
    8d28:	d1f3      	bne.n	8d12 <CC_PalInit+0xa>
    8d2a:	4b0c      	ldr	r3, [pc, #48]	; (8d5c <CC_PalInit+0x54>)
    8d2c:	480c      	ldr	r0, [pc, #48]	; (8d60 <CC_PalInit+0x58>)
    8d2e:	601c      	str	r4, [r3, #0]
    8d30:	f000 f836 	bl	8da0 <CC_PalMutexCreate>
    8d34:	4601      	mov	r1, r0
    8d36:	2800      	cmp	r0, #0
    8d38:	d1eb      	bne.n	8d12 <CC_PalInit+0xa>
    8d3a:	f000 f82d 	bl	8d98 <CC_PalDmaInit>
    8d3e:	4604      	mov	r4, r0
    8d40:	b108      	cbz	r0, 8d46 <CC_PalInit+0x3e>
    8d42:	4620      	mov	r0, r4
    8d44:	bd10      	pop	{r4, pc}
    8d46:	f000 f83f 	bl	8dc8 <CC_PalPowerSaveModeInit>
    8d4a:	4620      	mov	r0, r4
    8d4c:	e7fa      	b.n	8d44 <CC_PalInit+0x3c>
    8d4e:	bf00      	nop
    8d50:	200001d4 	.word	0x200001d4
    8d54:	200001c8 	.word	0x200001c8
    8d58:	200001d0 	.word	0x200001d0
    8d5c:	200001d8 	.word	0x200001d8
    8d60:	200001cc 	.word	0x200001cc

00008d64 <CC_PalTerminate>:
    8d64:	b508      	push	{r3, lr}
    8d66:	4808      	ldr	r0, [pc, #32]	; (8d88 <CC_PalTerminate+0x24>)
    8d68:	f000 f824 	bl	8db4 <CC_PalMutexDestroy>
    8d6c:	4807      	ldr	r0, [pc, #28]	; (8d8c <CC_PalTerminate+0x28>)
    8d6e:	f000 f821 	bl	8db4 <CC_PalMutexDestroy>
    8d72:	4807      	ldr	r0, [pc, #28]	; (8d90 <CC_PalTerminate+0x2c>)
    8d74:	f000 f81e 	bl	8db4 <CC_PalMutexDestroy>
    8d78:	4806      	ldr	r0, [pc, #24]	; (8d94 <CC_PalTerminate+0x30>)
    8d7a:	f000 f81b 	bl	8db4 <CC_PalMutexDestroy>
    8d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8d82:	f000 b80b 	b.w	8d9c <CC_PalDmaTerminate>
    8d86:	bf00      	nop
    8d88:	200001d4 	.word	0x200001d4
    8d8c:	200001c8 	.word	0x200001c8
    8d90:	200001d0 	.word	0x200001d0
    8d94:	200001cc 	.word	0x200001cc

00008d98 <CC_PalDmaInit>:
    8d98:	2000      	movs	r0, #0
    8d9a:	4770      	bx	lr

00008d9c <CC_PalDmaTerminate>:
    8d9c:	4770      	bx	lr
    8d9e:	bf00      	nop

00008da0 <CC_PalMutexCreate>:
    8da0:	b508      	push	{r3, lr}
    8da2:	4b03      	ldr	r3, [pc, #12]	; (8db0 <CC_PalMutexCreate+0x10>)
    8da4:	6802      	ldr	r2, [r0, #0]
    8da6:	681b      	ldr	r3, [r3, #0]
    8da8:	6810      	ldr	r0, [r2, #0]
    8daa:	4798      	blx	r3
    8dac:	2000      	movs	r0, #0
    8dae:	bd08      	pop	{r3, pc}
    8db0:	2000018c 	.word	0x2000018c

00008db4 <CC_PalMutexDestroy>:
    8db4:	b508      	push	{r3, lr}
    8db6:	4b03      	ldr	r3, [pc, #12]	; (8dc4 <CC_PalMutexDestroy+0x10>)
    8db8:	6802      	ldr	r2, [r0, #0]
    8dba:	685b      	ldr	r3, [r3, #4]
    8dbc:	6810      	ldr	r0, [r2, #0]
    8dbe:	4798      	blx	r3
    8dc0:	2000      	movs	r0, #0
    8dc2:	bd08      	pop	{r3, pc}
    8dc4:	2000018c 	.word	0x2000018c

00008dc8 <CC_PalPowerSaveModeInit>:
    8dc8:	b570      	push	{r4, r5, r6, lr}
    8dca:	4c09      	ldr	r4, [pc, #36]	; (8df0 <CC_PalPowerSaveModeInit+0x28>)
    8dcc:	4d09      	ldr	r5, [pc, #36]	; (8df4 <CC_PalPowerSaveModeInit+0x2c>)
    8dce:	6920      	ldr	r0, [r4, #16]
    8dd0:	68ab      	ldr	r3, [r5, #8]
    8dd2:	4798      	blx	r3
    8dd4:	b118      	cbz	r0, 8dde <CC_PalPowerSaveModeInit+0x16>
    8dd6:	4b08      	ldr	r3, [pc, #32]	; (8df8 <CC_PalPowerSaveModeInit+0x30>)
    8dd8:	4808      	ldr	r0, [pc, #32]	; (8dfc <CC_PalPowerSaveModeInit+0x34>)
    8dda:	685b      	ldr	r3, [r3, #4]
    8ddc:	4798      	blx	r3
    8dde:	4a08      	ldr	r2, [pc, #32]	; (8e00 <CC_PalPowerSaveModeInit+0x38>)
    8de0:	68eb      	ldr	r3, [r5, #12]
    8de2:	6920      	ldr	r0, [r4, #16]
    8de4:	2100      	movs	r1, #0
    8de6:	6011      	str	r1, [r2, #0]
    8de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8dec:	4718      	bx	r3
    8dee:	bf00      	nop
    8df0:	2000019c 	.word	0x2000019c
    8df4:	2000018c 	.word	0x2000018c
    8df8:	2000017c 	.word	0x2000017c
    8dfc:	0000a000 	.word	0x0000a000
    8e00:	20000cd4 	.word	0x20000cd4

00008e04 <CC_PalPowerSaveModeSelect>:
    8e04:	b570      	push	{r4, r5, r6, lr}
    8e06:	4d1b      	ldr	r5, [pc, #108]	; (8e74 <CC_PalPowerSaveModeSelect+0x70>)
    8e08:	4e1b      	ldr	r6, [pc, #108]	; (8e78 <CC_PalPowerSaveModeSelect+0x74>)
    8e0a:	4604      	mov	r4, r0
    8e0c:	68b2      	ldr	r2, [r6, #8]
    8e0e:	6928      	ldr	r0, [r5, #16]
    8e10:	4790      	blx	r2
    8e12:	b9f8      	cbnz	r0, 8e54 <CC_PalPowerSaveModeSelect+0x50>
    8e14:	b15c      	cbz	r4, 8e2e <CC_PalPowerSaveModeSelect+0x2a>
    8e16:	4c19      	ldr	r4, [pc, #100]	; (8e7c <CC_PalPowerSaveModeSelect+0x78>)
    8e18:	6823      	ldr	r3, [r4, #0]
    8e1a:	b1b3      	cbz	r3, 8e4a <CC_PalPowerSaveModeSelect+0x46>
    8e1c:	2b01      	cmp	r3, #1
    8e1e:	d01b      	beq.n	8e58 <CC_PalPowerSaveModeSelect+0x54>
    8e20:	3b01      	subs	r3, #1
    8e22:	6023      	str	r3, [r4, #0]
    8e24:	6928      	ldr	r0, [r5, #16]
    8e26:	68f3      	ldr	r3, [r6, #12]
    8e28:	4798      	blx	r3
    8e2a:	2000      	movs	r0, #0
    8e2c:	bd70      	pop	{r4, r5, r6, pc}
    8e2e:	4c13      	ldr	r4, [pc, #76]	; (8e7c <CC_PalPowerSaveModeSelect+0x78>)
    8e30:	6821      	ldr	r1, [r4, #0]
    8e32:	b941      	cbnz	r1, 8e46 <CC_PalPowerSaveModeSelect+0x42>
    8e34:	4b12      	ldr	r3, [pc, #72]	; (8e80 <CC_PalPowerSaveModeSelect+0x7c>)
    8e36:	2201      	movs	r2, #1
    8e38:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8e3c:	4a11      	ldr	r2, [pc, #68]	; (8e84 <CC_PalPowerSaveModeSelect+0x80>)
    8e3e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8e42:	2b00      	cmp	r3, #0
    8e44:	d1fb      	bne.n	8e3e <CC_PalPowerSaveModeSelect+0x3a>
    8e46:	3101      	adds	r1, #1
    8e48:	6021      	str	r1, [r4, #0]
    8e4a:	68f3      	ldr	r3, [r6, #12]
    8e4c:	6928      	ldr	r0, [r5, #16]
    8e4e:	4798      	blx	r3
    8e50:	2000      	movs	r0, #0
    8e52:	bd70      	pop	{r4, r5, r6, pc}
    8e54:	480c      	ldr	r0, [pc, #48]	; (8e88 <CC_PalPowerSaveModeSelect+0x84>)
    8e56:	bd70      	pop	{r4, r5, r6, pc}
    8e58:	4a0a      	ldr	r2, [pc, #40]	; (8e84 <CC_PalPowerSaveModeSelect+0x80>)
    8e5a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d1fb      	bne.n	8e5a <CC_PalPowerSaveModeSelect+0x56>
    8e62:	4a07      	ldr	r2, [pc, #28]	; (8e80 <CC_PalPowerSaveModeSelect+0x7c>)
    8e64:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8e68:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8e6c:	f7ff ff46 	bl	8cfc <CC_HalMaskInterrupt>
    8e70:	6823      	ldr	r3, [r4, #0]
    8e72:	e7d5      	b.n	8e20 <CC_PalPowerSaveModeSelect+0x1c>
    8e74:	2000019c 	.word	0x2000019c
    8e78:	2000018c 	.word	0x2000018c
    8e7c:	20000cd4 	.word	0x20000cd4
    8e80:	5002a000 	.word	0x5002a000
    8e84:	5002b000 	.word	0x5002b000
    8e88:	ffff8fe9 	.word	0xffff8fe9

00008e8c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8e8c:	4770      	bx	lr

00008e8e <k_uptime_get>:
{
    8e8e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    8e90:	f000 fd8b 	bl	99aa <z_impl_k_uptime_ticks>
    8e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8e98:	fba0 0302 	umull	r0, r3, r0, r2
    8e9c:	fb02 3101 	mla	r1, r2, r1, r3
    8ea0:	0bc0      	lsrs	r0, r0, #15
}
    8ea2:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    8ea6:	0bc9      	lsrs	r1, r1, #15
    8ea8:	bd08      	pop	{r3, pc}

00008eaa <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    8eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8eae:	4607      	mov	r7, r0
    8eb0:	460e      	mov	r6, r1
    8eb2:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8eb4:	461d      	mov	r5, r3
    8eb6:	b30b      	cbz	r3, 8efc <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    8eb8:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    8eba:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    8ebc:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	4414      	add	r4, r2
    8ec4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8ec8:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8eca:	f04f 0900 	mov.w	r9, #0
    8ece:	45d1      	cmp	r9, sl
    8ed0:	d308      	bcc.n	8ee4 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    8ed2:	686a      	ldr	r2, [r5, #4]
    8ed4:	f105 0308 	add.w	r3, r5, #8
    8ed8:	4641      	mov	r1, r8
    8eda:	4638      	mov	r0, r7
    8edc:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    8ede:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8ee2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8ee4:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8ee8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    8eec:	4620      	mov	r0, r4
    8eee:	f000 f9dd 	bl	92ac <strlen>
    8ef2:	3001      	adds	r0, #1
    8ef4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8ef6:	f109 0901 	add.w	r9, r9, #1
    8efa:	e7e8      	b.n	8ece <cbpprintf_external+0x24>
}
    8efc:	f06f 0015 	mvn.w	r0, #21
    8f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008f04 <sys_notify_validate>:
	if (notify == NULL) {
    8f04:	4603      	mov	r3, r0
    8f06:	b158      	cbz	r0, 8f20 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8f08:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8f0a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8f0e:	2a01      	cmp	r2, #1
    8f10:	d003      	beq.n	8f1a <sys_notify_validate+0x16>
    8f12:	2a03      	cmp	r2, #3
    8f14:	d104      	bne.n	8f20 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8f16:	6802      	ldr	r2, [r0, #0]
    8f18:	b112      	cbz	r2, 8f20 <sys_notify_validate+0x1c>
		notify->result = 0;
    8f1a:	2000      	movs	r0, #0
    8f1c:	6098      	str	r0, [r3, #8]
    8f1e:	4770      	bx	lr
    8f20:	f06f 0015 	mvn.w	r0, #21
}
    8f24:	4770      	bx	lr

00008f26 <arch_printk_char_out>:
}
    8f26:	2000      	movs	r0, #0
    8f28:	4770      	bx	lr

00008f2a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    8f2a:	f000 b90e 	b.w	914a <z_log_vprintk>

00008f2e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8f2e:	b40f      	push	{r0, r1, r2, r3}
    8f30:	b507      	push	{r0, r1, r2, lr}
    8f32:	a904      	add	r1, sp, #16
    8f34:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8f38:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8f3a:	f000 f906 	bl	914a <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8f3e:	b003      	add	sp, #12
    8f40:	f85d eb04 	ldr.w	lr, [sp], #4
    8f44:	b004      	add	sp, #16
    8f46:	4770      	bx	lr

00008f48 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8f48:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8f4a:	f013 0307 	ands.w	r3, r3, #7
    8f4e:	d105      	bne.n	8f5c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8f50:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8f52:	2b00      	cmp	r3, #0
    8f54:	bf0c      	ite	eq
    8f56:	2000      	moveq	r0, #0
    8f58:	2003      	movne	r0, #3
    8f5a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8f5c:	2b02      	cmp	r3, #2
    8f5e:	d105      	bne.n	8f6c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8f60:	8bc0      	ldrh	r0, [r0, #30]
    8f62:	fab0 f080 	clz	r0, r0
    8f66:	0940      	lsrs	r0, r0, #5
    8f68:	0080      	lsls	r0, r0, #2
    8f6a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8f6c:	2b01      	cmp	r3, #1
    8f6e:	d105      	bne.n	8f7c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8f70:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8f72:	2b00      	cmp	r3, #0
    8f74:	bf0c      	ite	eq
    8f76:	2000      	moveq	r0, #0
    8f78:	2005      	movne	r0, #5
    8f7a:	4770      	bx	lr
	int evt = EVT_NOP;
    8f7c:	2000      	movs	r0, #0
}
    8f7e:	4770      	bx	lr

00008f80 <validate_args>:
{
    8f80:	b510      	push	{r4, lr}
    8f82:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8f84:	b100      	cbz	r0, 8f88 <validate_args+0x8>
    8f86:	b911      	cbnz	r1, 8f8e <validate_args+0xe>
		return -EINVAL;
    8f88:	f06f 0015 	mvn.w	r0, #21
}
    8f8c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    8f8e:	1d08      	adds	r0, r1, #4
    8f90:	f7ff ffb8 	bl	8f04 <sys_notify_validate>
	if ((rv == 0)
    8f94:	2800      	cmp	r0, #0
    8f96:	d1f9      	bne.n	8f8c <validate_args+0xc>
	    && ((cli->notify.flags
    8f98:	68a3      	ldr	r3, [r4, #8]
    8f9a:	2b03      	cmp	r3, #3
    8f9c:	d9f6      	bls.n	8f8c <validate_args+0xc>
    8f9e:	e7f3      	b.n	8f88 <validate_args+0x8>

00008fa0 <notify_one>:
{
    8fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fa4:	460d      	mov	r5, r1
    8fa6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8fa8:	4619      	mov	r1, r3
    8faa:	1d28      	adds	r0, r5, #4
{
    8fac:	4690      	mov	r8, r2
    8fae:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8fb0:	f7f8 fa76 	bl	14a0 <sys_notify_finalize>
	if (cb) {
    8fb4:	4604      	mov	r4, r0
    8fb6:	b138      	cbz	r0, 8fc8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8fb8:	4633      	mov	r3, r6
    8fba:	4642      	mov	r2, r8
    8fbc:	4629      	mov	r1, r5
    8fbe:	4638      	mov	r0, r7
    8fc0:	46a4      	mov	ip, r4
}
    8fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8fc6:	4760      	bx	ip
}
    8fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008fcc <onoff_manager_init>:
{
    8fcc:	b538      	push	{r3, r4, r5, lr}
    8fce:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8fd0:	4605      	mov	r5, r0
    8fd2:	b158      	cbz	r0, 8fec <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8fd4:	b151      	cbz	r1, 8fec <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8fd6:	680b      	ldr	r3, [r1, #0]
    8fd8:	b143      	cbz	r3, 8fec <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8fda:	684b      	ldr	r3, [r1, #4]
    8fdc:	b133      	cbz	r3, 8fec <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8fde:	2220      	movs	r2, #32
    8fe0:	2100      	movs	r1, #0
    8fe2:	f000 f98a 	bl	92fa <memset>
    8fe6:	612c      	str	r4, [r5, #16]
	return 0;
    8fe8:	2000      	movs	r0, #0
}
    8fea:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8fec:	f06f 0015 	mvn.w	r0, #21
    8ff0:	e7fb      	b.n	8fea <onoff_manager_init+0x1e>

00008ff2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8ff2:	4604      	mov	r4, r0
    8ff4:	b508      	push	{r3, lr}
    8ff6:	4608      	mov	r0, r1
    8ff8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8ffa:	461a      	mov	r2, r3
    8ffc:	47a0      	blx	r4
	return z_impl_z_current_get();
    8ffe:	f7ff f80d 	bl	801c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9002:	f7fa fd3b 	bl	3a7c <z_impl_k_thread_abort>

00009006 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    9006:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    900a:	8840      	ldrh	r0, [r0, #2]
}
    900c:	0840      	lsrs	r0, r0, #1
    900e:	4770      	bx	lr

00009010 <free_list_add>:
{
    9010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9012:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9014:	f7ff fff7 	bl	9006 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9018:	fab0 f080 	clz	r0, r0
    901c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    9020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9024:	00ca      	lsls	r2, r1, #3
    9026:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    902a:	1d17      	adds	r7, r2, #4
{
    902c:	460c      	mov	r4, r1
    902e:	3206      	adds	r2, #6
    9030:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    9032:	b956      	cbnz	r6, 904a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    9034:	2101      	movs	r1, #1
    9036:	fa01 f000 	lsl.w	r0, r1, r0
    903a:	68d9      	ldr	r1, [r3, #12]
    903c:	4301      	orrs	r1, r0
    903e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    9040:	f8cc 4010 	str.w	r4, [ip, #16]
    9044:	53dd      	strh	r5, [r3, r7]
    9046:	529d      	strh	r5, [r3, r2]
}
    9048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    904a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    904c:	3104      	adds	r1, #4
    904e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9050:	53d8      	strh	r0, [r3, r7]
    9052:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9056:	529e      	strh	r6, [r3, r2]
    9058:	80c5      	strh	r5, [r0, #6]
    905a:	525d      	strh	r5, [r3, r1]
    905c:	e7f4      	b.n	9048 <free_list_add+0x38>

0000905e <encode_uint>:
{
    905e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9062:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    9064:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    9066:	2b6f      	cmp	r3, #111	; 0x6f
{
    9068:	4680      	mov	r8, r0
    906a:	460f      	mov	r7, r1
    906c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    906e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    9072:	d029      	beq.n	90c8 <encode_uint+0x6a>
    9074:	d824      	bhi.n	90c0 <encode_uint+0x62>
		return 10;
    9076:	2b58      	cmp	r3, #88	; 0x58
    9078:	bf0c      	ite	eq
    907a:	2610      	moveq	r6, #16
    907c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    907e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    9082:	4632      	mov	r2, r6
    9084:	2300      	movs	r3, #0
    9086:	4640      	mov	r0, r8
    9088:	4639      	mov	r1, r7
    908a:	f7f7 fa6b 	bl	564 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    908e:	2a09      	cmp	r2, #9
    9090:	b2d4      	uxtb	r4, r2
    9092:	d81e      	bhi.n	90d2 <encode_uint+0x74>
    9094:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    9096:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9098:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    909a:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    909e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    90a2:	d301      	bcc.n	90a8 <encode_uint+0x4a>
    90a4:	45d1      	cmp	r9, sl
    90a6:	d811      	bhi.n	90cc <encode_uint+0x6e>
	if (conv->flag_hash) {
    90a8:	782b      	ldrb	r3, [r5, #0]
    90aa:	069b      	lsls	r3, r3, #26
    90ac:	d505      	bpl.n	90ba <encode_uint+0x5c>
		if (radix == 8) {
    90ae:	2e08      	cmp	r6, #8
    90b0:	d115      	bne.n	90de <encode_uint+0x80>
			conv->altform_0 = true;
    90b2:	78ab      	ldrb	r3, [r5, #2]
    90b4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    90b8:	70ab      	strb	r3, [r5, #2]
}
    90ba:	4648      	mov	r0, r9
    90bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    90c0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    90c4:	2b70      	cmp	r3, #112	; 0x70
    90c6:	e7d7      	b.n	9078 <encode_uint+0x1a>
	switch (specifier) {
    90c8:	2608      	movs	r6, #8
    90ca:	e7d8      	b.n	907e <encode_uint+0x20>
		value /= radix;
    90cc:	4680      	mov	r8, r0
    90ce:	460f      	mov	r7, r1
    90d0:	e7d7      	b.n	9082 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    90d2:	f1bb 0f19 	cmp.w	fp, #25
    90d6:	bf94      	ite	ls
    90d8:	3437      	addls	r4, #55	; 0x37
    90da:	3457      	addhi	r4, #87	; 0x57
    90dc:	e7db      	b.n	9096 <encode_uint+0x38>
		} else if (radix == 16) {
    90de:	2e10      	cmp	r6, #16
    90e0:	d1eb      	bne.n	90ba <encode_uint+0x5c>
			conv->altform_0c = true;
    90e2:	78ab      	ldrb	r3, [r5, #2]
    90e4:	f043 0310 	orr.w	r3, r3, #16
    90e8:	e7e6      	b.n	90b8 <encode_uint+0x5a>

000090ea <outs>:
{
    90ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90ee:	4607      	mov	r7, r0
    90f0:	4688      	mov	r8, r1
    90f2:	4615      	mov	r5, r2
    90f4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    90f6:	4614      	mov	r4, r2
    90f8:	42b4      	cmp	r4, r6
    90fa:	d305      	bcc.n	9108 <outs+0x1e>
    90fc:	b10e      	cbz	r6, 9102 <outs+0x18>
	return (int)count;
    90fe:	1b60      	subs	r0, r4, r5
    9100:	e008      	b.n	9114 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9102:	7823      	ldrb	r3, [r4, #0]
    9104:	2b00      	cmp	r3, #0
    9106:	d0fa      	beq.n	90fe <outs+0x14>
		int rc = out((int)*sp++, ctx);
    9108:	f814 0b01 	ldrb.w	r0, [r4], #1
    910c:	4641      	mov	r1, r8
    910e:	47b8      	blx	r7
		if (rc < 0) {
    9110:	2800      	cmp	r0, #0
    9112:	daf1      	bge.n	90f8 <outs+0xe>
}
    9114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009118 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9118:	4040      	eors	r0, r0
    911a:	f380 8811 	msr	BASEPRI, r0
    911e:	f04f 0004 	mov.w	r0, #4
    9122:	df02      	svc	2
}
    9124:	4770      	bx	lr

00009126 <assert_print>:

void assert_print(const char *fmt, ...)
{
    9126:	b40f      	push	{r0, r1, r2, r3}
    9128:	b507      	push	{r0, r1, r2, lr}
    912a:	a904      	add	r1, sp, #16
    912c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9130:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9132:	f7ff fefa 	bl	8f2a <vprintk>

	va_end(ap);
}
    9136:	b003      	add	sp, #12
    9138:	f85d eb04 	ldr.w	lr, [sp], #4
    913c:	b004      	add	sp, #16
    913e:	4770      	bx	lr

00009140 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    9140:	4770      	bx	lr

00009142 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9142:	f000 ba2c 	b.w	959e <sys_clock_cycle_get_32>

00009146 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    9146:	2000      	movs	r0, #0
    9148:	4770      	bx	lr

0000914a <z_log_vprintk>:
{
    914a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    914c:	2300      	movs	r3, #0
    914e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9152:	e9cd 3300 	strd	r3, r3, [sp]
    9156:	461a      	mov	r2, r3
    9158:	4619      	mov	r1, r3
    915a:	4618      	mov	r0, r3
    915c:	f7f9 fbf0 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9160:	b005      	add	sp, #20
    9162:	f85d fb04 	ldr.w	pc, [sp], #4

00009166 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9166:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    9168:	f7f9 f948 	bl	23fc <log_init>
	}

	return 0;
}
    916c:	2000      	movs	r0, #0
    916e:	bd08      	pop	{r3, pc}

00009170 <z_log_get_tag>:
}
    9170:	2000      	movs	r0, #0
    9172:	4770      	bx	lr

00009174 <out_func>:
{
    9174:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    9176:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    917a:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    917e:	6852      	ldr	r2, [r2, #4]
    9180:	2101      	movs	r1, #1
    9182:	f10d 0007 	add.w	r0, sp, #7
    9186:	4798      	blx	r3
}
    9188:	2000      	movs	r0, #0
    918a:	b003      	add	sp, #12
    918c:	f85d fb04 	ldr.w	pc, [sp], #4

00009190 <cr_out_func>:
{
    9190:	b538      	push	{r3, r4, r5, lr}
    9192:	4605      	mov	r5, r0
    9194:	460c      	mov	r4, r1
	out_func(c, ctx);
    9196:	f7ff ffed 	bl	9174 <out_func>
	if (c == '\n') {
    919a:	2d0a      	cmp	r5, #10
    919c:	d103      	bne.n	91a6 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    919e:	4621      	mov	r1, r4
    91a0:	200d      	movs	r0, #13
    91a2:	f7ff ffe7 	bl	9174 <out_func>
}
    91a6:	2000      	movs	r0, #0
    91a8:	bd38      	pop	{r3, r4, r5, pc}

000091aa <buffer_write>:
{
    91aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91ac:	4606      	mov	r6, r0
    91ae:	460d      	mov	r5, r1
    91b0:	4614      	mov	r4, r2
    91b2:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    91b4:	4621      	mov	r1, r4
    91b6:	4628      	mov	r0, r5
    91b8:	463a      	mov	r2, r7
    91ba:	47b0      	blx	r6
	} while (len != 0);
    91bc:	1a24      	subs	r4, r4, r0
		buf += processed;
    91be:	4405      	add	r5, r0
	} while (len != 0);
    91c0:	d1f8      	bne.n	91b4 <buffer_write+0xa>
}
    91c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000091c4 <log_output_flush>:
		     output->control_block->offset,
    91c4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    91c6:	6881      	ldr	r1, [r0, #8]
{
    91c8:	b510      	push	{r4, lr}
    91ca:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    91cc:	e9d2 2300 	ldrd	r2, r3, [r2]
    91d0:	6800      	ldr	r0, [r0, #0]
    91d2:	f7ff ffea 	bl	91aa <buffer_write>
	output->control_block->offset = 0;
    91d6:	6863      	ldr	r3, [r4, #4]
    91d8:	2200      	movs	r2, #0
    91da:	601a      	str	r2, [r3, #0]
}
    91dc:	bd10      	pop	{r4, pc}

000091de <z_log_msg2_finalize>:
{
    91de:	b570      	push	{r4, r5, r6, lr}
    91e0:	460e      	mov	r6, r1
    91e2:	4615      	mov	r5, r2
    91e4:	4619      	mov	r1, r3
	if (!msg) {
    91e6:	4604      	mov	r4, r0
    91e8:	b918      	cbnz	r0, 91f2 <z_log_msg2_finalize+0x14>
}
    91ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    91ee:	f7f9 b96b 	b.w	24c8 <z_log_dropped>
	if (data) {
    91f2:	b13b      	cbz	r3, 9204 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    91f4:	f3c2 2349 	ubfx	r3, r2, #9, #10
    91f8:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    91fa:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    91fe:	4418      	add	r0, r3
    9200:	f000 f870 	bl	92e4 <memcpy>
	msg->hdr.source = source;
    9204:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    9208:	4620      	mov	r0, r4
}
    920a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    920e:	f7f9 b979 	b.w	2504 <z_log_msg2_commit>

00009212 <abort_function>:
{
    9212:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9214:	2000      	movs	r0, #0
    9216:	f7f9 f897 	bl	2348 <sys_reboot>

0000921a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    921a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    921c:	ab0b      	add	r3, sp, #44	; 0x2c
    921e:	9305      	str	r3, [sp, #20]
    9220:	9303      	str	r3, [sp, #12]
    9222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9224:	9302      	str	r3, [sp, #8]
    9226:	2300      	movs	r3, #0
    9228:	e9cd 3300 	strd	r3, r3, [sp]
    922c:	2201      	movs	r2, #1
    922e:	4618      	mov	r0, r3
    9230:	f7f9 fb86 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9234:	b007      	add	sp, #28
    9236:	f85d fb04 	ldr.w	pc, [sp], #4

0000923a <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    923a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    923c:	6800      	ldr	r0, [r0, #0]
    923e:	f7f9 bf0b 	b.w	3058 <z_arm_fatal_error>

00009242 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9242:	2100      	movs	r1, #0
    9244:	2001      	movs	r0, #1
    9246:	f7f9 bf07 	b.w	3058 <z_arm_fatal_error>

0000924a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    924a:	b508      	push	{r3, lr}
	handler();
    924c:	f7f9 ffa8 	bl	31a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    9250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9254:	f7fa b880 	b.w	3358 <z_arm_exc_exit>

00009258 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    925a:	ab0b      	add	r3, sp, #44	; 0x2c
    925c:	9305      	str	r3, [sp, #20]
    925e:	9303      	str	r3, [sp, #12]
    9260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9262:	9302      	str	r3, [sp, #8]
    9264:	2300      	movs	r3, #0
    9266:	e9cd 3300 	strd	r3, r3, [sp]
    926a:	2201      	movs	r2, #1
    926c:	4618      	mov	r0, r3
    926e:	f7f9 fb67 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9272:	b007      	add	sp, #28
    9274:	f85d fb04 	ldr.w	pc, [sp], #4

00009278 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9278:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    927a:	ab0b      	add	r3, sp, #44	; 0x2c
    927c:	9305      	str	r3, [sp, #20]
    927e:	9303      	str	r3, [sp, #12]
    9280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9282:	9302      	str	r3, [sp, #8]
    9284:	2300      	movs	r3, #0
    9286:	e9cd 3300 	strd	r3, r3, [sp]
    928a:	2201      	movs	r2, #1
    928c:	4618      	mov	r0, r3
    928e:	f7f9 fb57 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9292:	b007      	add	sp, #28
    9294:	f85d fb04 	ldr.w	pc, [sp], #4

00009298 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    9298:	3901      	subs	r1, #1
    929a:	4603      	mov	r3, r0
    929c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    92a0:	b90a      	cbnz	r2, 92a6 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    92a2:	701a      	strb	r2, [r3, #0]

	return dest;
}
    92a4:	4770      	bx	lr
		*d = *s;
    92a6:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    92aa:	e7f7      	b.n	929c <strcpy+0x4>

000092ac <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    92ac:	4603      	mov	r3, r0
	size_t n = 0;
    92ae:	2000      	movs	r0, #0

	while (*s != '\0') {
    92b0:	5c1a      	ldrb	r2, [r3, r0]
    92b2:	b902      	cbnz	r2, 92b6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    92b4:	4770      	bx	lr
		n++;
    92b6:	3001      	adds	r0, #1
    92b8:	e7fa      	b.n	92b0 <strlen+0x4>

000092ba <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    92ba:	4603      	mov	r3, r0
	size_t n = 0;
    92bc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    92be:	5c1a      	ldrb	r2, [r3, r0]
    92c0:	b10a      	cbz	r2, 92c6 <strnlen+0xc>
    92c2:	4288      	cmp	r0, r1
    92c4:	d100      	bne.n	92c8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    92c6:	4770      	bx	lr
		n++;
    92c8:	3001      	adds	r0, #1
    92ca:	e7f8      	b.n	92be <strnlen+0x4>

000092cc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    92cc:	1e43      	subs	r3, r0, #1
    92ce:	3901      	subs	r1, #1
    92d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    92d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    92d8:	4282      	cmp	r2, r0
    92da:	d101      	bne.n	92e0 <strcmp+0x14>
    92dc:	2a00      	cmp	r2, #0
    92de:	d1f7      	bne.n	92d0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    92e0:	1a10      	subs	r0, r2, r0
    92e2:	4770      	bx	lr

000092e4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    92e4:	b510      	push	{r4, lr}
    92e6:	1e43      	subs	r3, r0, #1
    92e8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    92ea:	4291      	cmp	r1, r2
    92ec:	d100      	bne.n	92f0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    92ee:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    92f0:	f811 4b01 	ldrb.w	r4, [r1], #1
    92f4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    92f8:	e7f7      	b.n	92ea <memcpy+0x6>

000092fa <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    92fa:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    92fc:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    92fe:	4603      	mov	r3, r0
	while (n > 0) {
    9300:	4293      	cmp	r3, r2
    9302:	d100      	bne.n	9306 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9304:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9306:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    930a:	e7f9      	b.n	9300 <memset+0x6>

0000930c <_stdout_hook_default>:
}
    930c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9310:	4770      	bx	lr

00009312 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9312:	2806      	cmp	r0, #6
    9314:	d108      	bne.n	9328 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    931a:	2201      	movs	r2, #1
    931c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9320:	f3bf 8f4f 	dsb	sy
        __WFE();
    9324:	bf20      	wfe
    while (true)
    9326:	e7fd      	b.n	9324 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9328:	4770      	bx	lr

0000932a <pm_state_exit_post_ops>:
    932a:	2300      	movs	r3, #0
    932c:	f383 8811 	msr	BASEPRI, r3
    9330:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9334:	4770      	bx	lr

00009336 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9336:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9338:	ab0b      	add	r3, sp, #44	; 0x2c
    933a:	9305      	str	r3, [sp, #20]
    933c:	9303      	str	r3, [sp, #12]
    933e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9340:	9302      	str	r3, [sp, #8]
    9342:	2300      	movs	r3, #0
    9344:	e9cd 3300 	strd	r3, r3, [sp]
    9348:	2201      	movs	r2, #1
    934a:	4618      	mov	r0, r3
    934c:	f7f9 faf8 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9350:	b007      	add	sp, #28
    9352:	f85d fb04 	ldr.w	pc, [sp], #4

00009356 <adc_context_on_timer_expired>:
{
    9356:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9358:	f1a0 0308 	sub.w	r3, r0, #8
    935c:	f3bf 8f5b 	dmb	ish
    9360:	e853 2f00 	ldrex	r2, [r3]
    9364:	1c51      	adds	r1, r2, #1
    9366:	e843 1400 	strex	r4, r1, [r3]
    936a:	2c00      	cmp	r4, #0
    936c:	d1f8      	bne.n	9360 <adc_context_on_timer_expired+0xa>
    936e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    9372:	b922      	cbnz	r2, 937e <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
    9374:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
}
    9378:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
    937a:	f7fa bdb9 	b.w	3ef0 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    937e:	f06f 030f 	mvn.w	r3, #15
}
    9382:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
    9384:	6583      	str	r3, [r0, #88]	; 0x58
}
    9386:	4770      	bx	lr

00009388 <set_on_state>:
	__asm__ volatile(
    9388:	f04f 0340 	mov.w	r3, #64	; 0x40
    938c:	f3ef 8211 	mrs	r2, BASEPRI
    9390:	f383 8812 	msr	BASEPRI_MAX, r3
    9394:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9398:	6803      	ldr	r3, [r0, #0]
    939a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    939e:	f043 0302 	orr.w	r3, r3, #2
    93a2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    93a4:	f382 8811 	msr	BASEPRI, r2
    93a8:	f3bf 8f6f 	isb	sy
}
    93ac:	4770      	bx	lr

000093ae <async_start>:
{
    93ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93b0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    93b2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    93b4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    93b6:	f04f 0540 	mov.w	r5, #64	; 0x40
    93ba:	f3ef 8611 	mrs	r6, BASEPRI
    93be:	f385 8812 	msr	BASEPRI_MAX, r5
    93c2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    93c6:	250c      	movs	r5, #12
    93c8:	4369      	muls	r1, r5
    93ca:	440c      	add	r4, r1
    93cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    93ce:	f005 0c07 	and.w	ip, r5, #7
    93d2:	f1bc 0f01 	cmp.w	ip, #1
    93d6:	d10b      	bne.n	93f0 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    93d8:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    93da:	f386 8811 	msr	BASEPRI, r6
    93de:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    93e2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    93e6:	6843      	ldr	r3, [r0, #4]
    93e8:	585b      	ldr	r3, [r3, r1]
    93ea:	4798      	blx	r3
	return 0;
    93ec:	2000      	movs	r0, #0
}
    93ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    93f0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    93f4:	42af      	cmp	r7, r5
    93f6:	f386 8811 	msr	BASEPRI, r6
    93fa:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    93fe:	bf0c      	ite	eq
    9400:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9404:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9408:	e7f1      	b.n	93ee <async_start+0x40>

0000940a <api_start>:
{
    940a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    940c:	2480      	movs	r4, #128	; 0x80
    940e:	9400      	str	r4, [sp, #0]
    9410:	f7ff ffcd 	bl	93ae <async_start>
}
    9414:	b002      	add	sp, #8
    9416:	bd10      	pop	{r4, pc}

00009418 <onoff_started_callback>:
	return &data->mgr[type];
    9418:	6900      	ldr	r0, [r0, #16]
    941a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    941c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9420:	2100      	movs	r1, #0
    9422:	4710      	bx	r2

00009424 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9424:	2000      	movs	r0, #0
    9426:	f7fc b97d 	b.w	5724 <nrfx_clock_start>

0000942a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    942a:	2000      	movs	r0, #0
    942c:	f7fc b9de 	b.w	57ec <nrfx_clock_stop>

00009430 <api_stop>:
	return stop(dev, subsys, CTX_API);
    9430:	2280      	movs	r2, #128	; 0x80
    9432:	f7fa bf2f 	b.w	4294 <stop>

00009436 <blocking_start_callback>:
{
    9436:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9438:	f7fd bc98 	b.w	6d6c <z_impl_k_sem_give>

0000943c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    943c:	6843      	ldr	r3, [r0, #4]
    943e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9440:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9444:	600b      	str	r3, [r1, #0]
}
    9446:	2000      	movs	r0, #0
    9448:	4770      	bx	lr

0000944a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    944a:	6843      	ldr	r3, [r0, #4]
    944c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    944e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9452:	4042      	eors	r2, r0
    9454:	400a      	ands	r2, r1
    9456:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9458:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    945c:	2000      	movs	r0, #0
    945e:	4770      	bx	lr

00009460 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9460:	6843      	ldr	r3, [r0, #4]
    9462:	685b      	ldr	r3, [r3, #4]
}
    9464:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9466:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    946a:	4770      	bx	lr

0000946c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    946c:	6843      	ldr	r3, [r0, #4]
    946e:	685b      	ldr	r3, [r3, #4]
}
    9470:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9472:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9476:	4770      	bx	lr

00009478 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9478:	6843      	ldr	r3, [r0, #4]
    947a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    947c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9480:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9482:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9486:	2000      	movs	r0, #0
    9488:	4770      	bx	lr

0000948a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    948a:	6902      	ldr	r2, [r0, #16]
{
    948c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    948e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9492:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9496:	2000      	movs	r0, #0
    9498:	4770      	bx	lr

0000949a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    949a:	6843      	ldr	r3, [r0, #4]
    949c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    949e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    94a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    94a6:	4770      	bx	lr

000094a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    94a8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    94aa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    94ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    94b2:	b148      	cbz	r0, 94c8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    94b4:	7c52      	ldrb	r2, [r2, #17]
    94b6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    94b8:	2000      	movs	r0, #0
    94ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    94be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    94c2:	2201      	movs	r2, #1
    94c4:	601a      	str	r2, [r3, #0]
	return 0;
    94c6:	4770      	bx	lr
		return -1;
    94c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    94cc:	4770      	bx	lr

000094ce <is_tx_ready.isra.0>:
	return config->uarte_regs;
    94ce:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    94d0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94d2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    94d6:	b940      	cbnz	r0, 94ea <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    94d8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    94da:	079b      	lsls	r3, r3, #30
    94dc:	d406      	bmi.n	94ec <is_tx_ready.isra.0+0x1e>
    94de:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    94e2:	3800      	subs	r0, #0
    94e4:	bf18      	it	ne
    94e6:	2001      	movne	r0, #1
    94e8:	4770      	bx	lr
    94ea:	2001      	movs	r0, #1
}
    94ec:	4770      	bx	lr

000094ee <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    94ee:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    94f0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    94f2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    94f6:	05c9      	lsls	r1, r1, #23
    94f8:	d518      	bpl.n	952c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    94fe:	b1a9      	cbz	r1, 952c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9500:	f04f 0040 	mov.w	r0, #64	; 0x40
    9504:	f3ef 8111 	mrs	r1, BASEPRI
    9508:	f380 8812 	msr	BASEPRI_MAX, r0
    950c:	f3bf 8f6f 	isb	sy
    9510:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9514:	b130      	cbz	r0, 9524 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9516:	2000      	movs	r0, #0
    9518:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    951c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9520:	2001      	movs	r0, #1
    9522:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    9524:	f381 8811 	msr	BASEPRI, r1
    9528:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    952c:	6852      	ldr	r2, [r2, #4]
    952e:	06d2      	lsls	r2, r2, #27
    9530:	d515      	bpl.n	955e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    9532:	f04f 0140 	mov.w	r1, #64	; 0x40
    9536:	f3ef 8211 	mrs	r2, BASEPRI
    953a:	f381 8812 	msr	BASEPRI_MAX, r1
    953e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9542:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9546:	b111      	cbz	r1, 954e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9548:	2100      	movs	r1, #0
    954a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    954e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9552:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    9556:	f382 8811 	msr	BASEPRI, r2
    955a:	f3bf 8f6f 	isb	sy
}
    955e:	4770      	bx	lr

00009560 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9560:	b510      	push	{r4, lr}
    9562:	2200      	movs	r2, #0
    9564:	4604      	mov	r4, r0
    9566:	2101      	movs	r1, #1
    9568:	2028      	movs	r0, #40	; 0x28
    956a:	f7f9 fde1 	bl	3130 <z_arm_irq_priority_set>
    956e:	2028      	movs	r0, #40	; 0x28
    9570:	f7f9 fdc2 	bl	30f8 <arch_irq_enable>
    9574:	4620      	mov	r0, r4
    9576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    957a:	f7fb bb43 	b.w	4c04 <uarte_instance_init.constprop.0>

0000957e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    957e:	b510      	push	{r4, lr}
    9580:	2200      	movs	r2, #0
    9582:	4604      	mov	r4, r0
    9584:	2101      	movs	r1, #1
    9586:	2002      	movs	r0, #2
    9588:	f7f9 fdd2 	bl	3130 <z_arm_irq_priority_set>
    958c:	2002      	movs	r0, #2
    958e:	f7f9 fdb3 	bl	30f8 <arch_irq_enable>
    9592:	4620      	mov	r0, r4
    9594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9598:	f7fb bb34 	b.w	4c04 <uarte_instance_init.constprop.0>

0000959c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    959c:	4770      	bx	lr

0000959e <sys_clock_cycle_get_32>:
{
    959e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    95a0:	f7fb fca8 	bl	4ef4 <z_nrf_rtc_timer_read>
}
    95a4:	bd08      	pop	{r3, pc}

000095a6 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    95a6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    95a8:	6843      	ldr	r3, [r0, #4]
    95aa:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    95ac:	7a03      	ldrb	r3, [r0, #8]
    95ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    95b2:	3b01      	subs	r3, #1
    95b4:	00db      	lsls	r3, r3, #3
    95b6:	6845      	ldr	r5, [r0, #4]
    95b8:	6814      	ldr	r4, [r2, #0]
    95ba:	441d      	add	r5, r3
    95bc:	42ac      	cmp	r4, r5
    95be:	d902      	bls.n	95c6 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    95c0:	f06f 0001 	mvn.w	r0, #1
}
    95c4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    95c6:	7965      	ldrb	r5, [r4, #5]
    95c8:	428d      	cmp	r5, r1
    95ca:	d002      	beq.n	95d2 <pinctrl_lookup_state+0x2c>
		(*state)++;
    95cc:	3408      	adds	r4, #8
    95ce:	6014      	str	r4, [r2, #0]
    95d0:	e7f1      	b.n	95b6 <pinctrl_lookup_state+0x10>
			return 0;
    95d2:	2000      	movs	r0, #0
    95d4:	e7f6      	b.n	95c4 <pinctrl_lookup_state+0x1e>

000095d6 <nrf_gpio_pin_clear>:
{
    95d6:	b507      	push	{r0, r1, r2, lr}
    95d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    95da:	a801      	add	r0, sp, #4
    95dc:	f7fb fe2e 	bl	523c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    95e0:	9a01      	ldr	r2, [sp, #4]
    95e2:	2301      	movs	r3, #1
    95e4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    95e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    95ea:	b003      	add	sp, #12
    95ec:	f85d fb04 	ldr.w	pc, [sp], #4

000095f0 <nrf_gpio_pin_set>:
{
    95f0:	b507      	push	{r0, r1, r2, lr}
    95f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    95f4:	a801      	add	r0, sp, #4
    95f6:	f7fb fe21 	bl	523c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    95fa:	9a01      	ldr	r2, [sp, #4]
    95fc:	2301      	movs	r3, #1
    95fe:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9600:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9604:	b003      	add	sp, #12
    9606:	f85d fb04 	ldr.w	pc, [sp], #4

0000960a <nrf_gpio_pin_write>:
    if (value == 0)
    960a:	b909      	cbnz	r1, 9610 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    960c:	f7ff bfe3 	b.w	95d6 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    9610:	f7ff bfee 	b.w	95f0 <nrf_gpio_pin_set>

00009614 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    9614:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    9616:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    961a:	2b00      	cmp	r3, #0
{
    961c:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    961e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9622:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9624:	bf0b      	itete	eq
    9626:	4615      	moveq	r5, r2
    9628:	2501      	movne	r5, #1
    962a:	460e      	moveq	r6, r1
    962c:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    962e:	9301      	str	r3, [sp, #4]
    9630:	f7fb fe04 	bl	523c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9634:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    9638:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    963c:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9640:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9642:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    9644:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9648:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    964c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    9650:	b002      	add	sp, #8
    9652:	bd70      	pop	{r4, r5, r6, pc}

00009654 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    9654:	b570      	push	{r4, r5, r6, lr}
    9656:	4615      	mov	r5, r2
    9658:	4604      	mov	r4, r0
    965a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    965e:	42a6      	cmp	r6, r4
    9660:	d101      	bne.n	9666 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    9662:	2000      	movs	r0, #0
}
    9664:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    9666:	6823      	ldr	r3, [r4, #0]
    9668:	0c1a      	lsrs	r2, r3, #16
    966a:	2a22      	cmp	r2, #34	; 0x22
    966c:	f200 808e 	bhi.w	978c <pinctrl_configure_pins+0x138>
    9670:	e8df f002 	tbb	[pc, r2]
    9674:	43241d12 	.word	0x43241d12
    9678:	8c433929 	.word	0x8c433929
    967c:	488c8c8c 	.word	0x488c8c8c
    9680:	8c8c8c4d 	.word	0x8c8c8c4d
    9684:	8c8c8c8c 	.word	0x8c8c8c8c
    9688:	5e528c8c 	.word	0x5e528c8c
    968c:	8c8c6863 	.word	0x8c8c6863
    9690:	78736d8c 	.word	0x78736d8c
    9694:	827d      	.short	0x827d
    9696:	87          	.byte	0x87
    9697:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    9698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    969c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    96a0:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    96a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    96a6:	f7ff ffa3 	bl	95f0 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    96aa:	2201      	movs	r2, #1
    96ac:	e015      	b.n	96da <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    96ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    96b2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    96b6:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    96b8:	2100      	movs	r1, #0
    96ba:	e00f      	b.n	96dc <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    96bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    96c0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    96c4:	e7ec      	b.n	96a0 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    96c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    96ca:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    96ce:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    96d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    96d4:	f7ff ff7f 	bl	95d6 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    96d8:	2200      	movs	r2, #0
    96da:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    96dc:	6820      	ldr	r0, [r4, #0]
    96de:	f7ff ff99 	bl	9614 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    96e2:	3404      	adds	r4, #4
    96e4:	e7bb      	b.n	965e <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    96e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    96ea:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    96ee:	6820      	ldr	r0, [r4, #0]
    96f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    96f4:	f7ff ff6f 	bl	95d6 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    96f8:	e7d7      	b.n	96aa <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    96fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    96fe:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9702:	e7d8      	b.n	96b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    9704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9708:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    970c:	e7d3      	b.n	96b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    970e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9712:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    9716:	e7ce      	b.n	96b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    9718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    971c:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9720:	6820      	ldr	r0, [r4, #0]
    9722:	f3c0 3140 	ubfx	r1, r0, #13, #1
    9726:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    972a:	f7ff ff6e 	bl	960a <nrf_gpio_pin_write>
    972e:	e7bc      	b.n	96aa <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    9730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9734:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9738:	e7f2      	b.n	9720 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    973a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    973e:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9742:	e7ed      	b.n	9720 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    9744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9748:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    974c:	e7e8      	b.n	9720 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    974e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9752:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9756:	2201      	movs	r2, #1
    9758:	e7ae      	b.n	96b8 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    975a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    975e:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9762:	e7f8      	b.n	9756 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    9764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9768:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    976c:	e7f3      	b.n	9756 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    976e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9772:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9776:	e7ee      	b.n	9756 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    9778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    977c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9780:	e7e9      	b.n	9756 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    9782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9786:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    978a:	e7e4      	b.n	9756 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    978c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9790:	e768      	b.n	9664 <pinctrl_configure_pins+0x10>

00009792 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9792:	f7ff b9a5 	b.w	8ae0 <nrf_cc3xx_platform_init_no_rng>

00009796 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    9796:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9798:	f7f9 fb76 	bl	2e88 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    979c:	f7f9 fc28 	bl	2ff0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    97a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    97a4:	f7ff b99c 	b.w	8ae0 <nrf_cc3xx_platform_init_no_rng>

000097a8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    97a8:	4700      	bx	r0

000097aa <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    97aa:	f000 b900 	b.w	99ae <z_impl_k_busy_wait>

000097ae <nrf_gpio_pin_present_check>:
    switch (port)
    97ae:	0943      	lsrs	r3, r0, #5
    97b0:	d00b      	beq.n	97ca <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    97b2:	2b01      	cmp	r3, #1
    97b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    97b8:	bf18      	it	ne
    97ba:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    97bc:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    97c0:	fa23 f000 	lsr.w	r0, r3, r0
}
    97c4:	f000 0001 	and.w	r0, r0, #1
    97c8:	4770      	bx	lr
    switch (port)
    97ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    97ce:	e7f5      	b.n	97bc <nrf_gpio_pin_present_check+0xe>

000097d0 <pin_is_task_output>:
{
    97d0:	b508      	push	{r3, lr}
    97d2:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    97d4:	f7fc f872 	bl	58bc <pin_is_output>
    97d8:	b110      	cbz	r0, 97e0 <pin_is_task_output+0x10>
    97da:	4610      	mov	r0, r2
    97dc:	f7fc f858 	bl	5890 <pin_in_use_by_te>
}
    97e0:	f000 0001 	and.w	r0, r0, #1
    97e4:	bd08      	pop	{r3, pc}

000097e6 <nrf_gpio_reconfigure>:
{
    97e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    97ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    97ec:	a801      	add	r0, sp, #4
{
    97ee:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    97f2:	460c      	mov	r4, r1
    97f4:	4617      	mov	r7, r2
    97f6:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    97f8:	f7fc f888 	bl	590c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    97fc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    97fe:	1e39      	subs	r1, r7, #0
    9800:	bf18      	it	ne
    9802:	2101      	movne	r1, #1
    9804:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9808:	1e23      	subs	r3, r4, #0
    980a:	bf18      	it	ne
    980c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    980e:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9810:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9814:	bf14      	ite	ne
    9816:	210c      	movne	r1, #12
    9818:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    981a:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    981c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9820:	bf14      	ite	ne
    9822:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9826:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9828:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    982c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9830:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9834:	bf14      	ite	ne
    9836:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    983a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    983c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    983e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9842:	b104      	cbz	r4, 9846 <nrf_gpio_reconfigure+0x60>
    9844:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9846:	b10f      	cbz	r7, 984c <nrf_gpio_reconfigure+0x66>
    9848:	783f      	ldrb	r7, [r7, #0]
    984a:	007f      	lsls	r7, r7, #1
    984c:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    984e:	b10e      	cbz	r6, 9854 <nrf_gpio_reconfigure+0x6e>
    9850:	7836      	ldrb	r6, [r6, #0]
    9852:	00b6      	lsls	r6, r6, #2
    9854:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9856:	b18d      	cbz	r5, 987c <nrf_gpio_reconfigure+0x96>
    9858:	7829      	ldrb	r1, [r5, #0]
    985a:	0209      	lsls	r1, r1, #8
    985c:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    985e:	f1b8 0f00 	cmp.w	r8, #0
    9862:	d003      	beq.n	986c <nrf_gpio_reconfigure+0x86>
    9864:	f898 8000 	ldrb.w	r8, [r8]
    9868:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    986c:	4321      	orrs	r1, r4
    986e:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    9872:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    9876:	b002      	add	sp, #8
    9878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    987c:	4629      	mov	r1, r5
    987e:	e7ed      	b.n	985c <nrf_gpio_reconfigure+0x76>

00009880 <nrf_gpio_cfg_sense_set>:
{
    9880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9882:	f10d 030f 	add.w	r3, sp, #15
    9886:	9301      	str	r3, [sp, #4]
    9888:	2300      	movs	r3, #0
{
    988a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    988e:	9300      	str	r3, [sp, #0]
    9890:	461a      	mov	r2, r3
    9892:	4619      	mov	r1, r3
    9894:	f7ff ffa7 	bl	97e6 <nrf_gpio_reconfigure>
}
    9898:	b005      	add	sp, #20
    989a:	f85d fb04 	ldr.w	pc, [sp], #4

0000989e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    989e:	f7fc bbf5 	b.w	608c <_DoInit>

000098a2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    98a2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    98a4:	f7ff fffb 	bl	989e <SEGGER_RTT_Init>

	return 0;
}
    98a8:	2000      	movs	r0, #0
    98aa:	bd08      	pop	{r3, pc}

000098ac <z_device_state_init>:
}
    98ac:	4770      	bx	lr

000098ae <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    98ae:	b138      	cbz	r0, 98c0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    98b0:	68c3      	ldr	r3, [r0, #12]
    98b2:	8818      	ldrh	r0, [r3, #0]
    98b4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    98b8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    98bc:	4258      	negs	r0, r3
    98be:	4158      	adcs	r0, r3
}
    98c0:	4770      	bx	lr

000098c2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    98c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    98c4:	ab0b      	add	r3, sp, #44	; 0x2c
    98c6:	9305      	str	r3, [sp, #20]
    98c8:	9303      	str	r3, [sp, #12]
    98ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    98cc:	9302      	str	r3, [sp, #8]
    98ce:	2300      	movs	r3, #0
    98d0:	e9cd 3300 	strd	r3, r3, [sp]
    98d4:	2201      	movs	r2, #1
    98d6:	4618      	mov	r0, r3
    98d8:	f7f9 f832 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    98dc:	b007      	add	sp, #28
    98de:	f85d fb04 	ldr.w	pc, [sp], #4

000098e2 <z_early_memset>:
	(void) memset(dst, c, n);
    98e2:	f7ff bd0a 	b.w	92fa <memset>

000098e6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    98e6:	f7ff bcfd 	b.w	92e4 <memcpy>

000098ea <k_mem_slab_init>:
{
    98ea:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    98ec:	2400      	movs	r4, #0
    98ee:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    98f0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    98f2:	ea41 0402 	orr.w	r4, r1, r2
    98f6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    98fa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    98fe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9900:	d10c      	bne.n	991c <k_mem_slab_init+0x32>
    9902:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    9904:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    9906:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9908:	d103      	bne.n	9912 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    990a:	e9c0 0000 	strd	r0, r0, [r0]
}
    990e:	2000      	movs	r0, #0
}
    9910:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9912:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9914:	3401      	adds	r4, #1
    9916:	460d      	mov	r5, r1
		p += slab->block_size;
    9918:	4411      	add	r1, r2
    991a:	e7f3      	b.n	9904 <k_mem_slab_init+0x1a>
		return -EINVAL;
    991c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9920:	e7f6      	b.n	9910 <k_mem_slab_init+0x26>

00009922 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9922:	f3ef 8005 	mrs	r0, IPSR
}
    9926:	3800      	subs	r0, #0
    9928:	bf18      	it	ne
    992a:	2001      	movne	r0, #1
    992c:	4770      	bx	lr

0000992e <k_thread_name_get>:
}
    992e:	2000      	movs	r0, #0
    9930:	4770      	bx	lr

00009932 <z_pm_save_idle_exit>:
{
    9932:	b508      	push	{r3, lr}
	pm_system_resume();
    9934:	f7f9 f998 	bl	2c68 <pm_system_resume>
}
    9938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    993c:	f7ff be2e 	b.w	959c <sys_clock_idle_exit>

00009940 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9940:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9944:	428b      	cmp	r3, r1
    9946:	d001      	beq.n	994c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    9948:	f7fd bfc2 	b.w	78d0 <z_set_prio>
}
    994c:	2000      	movs	r0, #0
    994e:	4770      	bx	lr

00009950 <z_impl_k_mutex_init>:
{
    9950:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9952:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9954:	e9c3 0002 	strd	r0, r0, [r3, #8]
    9958:	e9c3 3300 	strd	r3, r3, [r3]
}
    995c:	4770      	bx	lr

0000995e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    995e:	b13a      	cbz	r2, 9970 <z_impl_k_sem_init+0x12>
    9960:	428a      	cmp	r2, r1
    9962:	d305      	bcc.n	9970 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    9964:	e9c0 1202 	strd	r1, r2, [r0, #8]
    9968:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    996c:	2000      	movs	r0, #0
    996e:	4770      	bx	lr
		return -EINVAL;
    9970:	f06f 0015 	mvn.w	r0, #21
}
    9974:	4770      	bx	lr

00009976 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9976:	4603      	mov	r3, r0
    9978:	b920      	cbnz	r0, 9984 <z_reschedule_irqlock+0xe>
    997a:	f3ef 8205 	mrs	r2, IPSR
    997e:	b90a      	cbnz	r2, 9984 <z_reschedule_irqlock+0xe>
    9980:	f7f9 bc2e 	b.w	31e0 <arch_swap>
    9984:	f383 8811 	msr	BASEPRI, r3
    9988:	f3bf 8f6f 	isb	sy
}
    998c:	4770      	bx	lr

0000998e <z_reschedule_unlocked>:
	__asm__ volatile(
    998e:	f04f 0340 	mov.w	r3, #64	; 0x40
    9992:	f3ef 8011 	mrs	r0, BASEPRI
    9996:	f383 8812 	msr	BASEPRI_MAX, r3
    999a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    999e:	f7ff bfea 	b.w	9976 <z_reschedule_irqlock>

000099a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    99a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    99a4:	f7fe fec6 	bl	8734 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    99a8:	bd08      	pop	{r3, pc}

000099aa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    99aa:	f7fe bec3 	b.w	8734 <sys_clock_tick_get>

000099ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    99ae:	b108      	cbz	r0, 99b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    99b0:	f7fa ba12 	b.w	3dd8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    99b4:	4770      	bx	lr

000099b6 <k_timer_init>:
	timer->status = 0U;
    99b6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    99b8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    99bc:	f100 0218 	add.w	r2, r0, #24
    99c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    99c4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    99c8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    99ca:	6343      	str	r3, [r0, #52]	; 0x34
}
    99cc:	4770      	bx	lr

000099ce <z_impl_k_timer_stop>:
{
    99ce:	b510      	push	{r4, lr}
    99d0:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    99d2:	f7fe fd0d 	bl	83f0 <z_abort_timeout>
	if (inactive) {
    99d6:	b9b0      	cbnz	r0, 9a06 <z_impl_k_timer_stop+0x38>
	if (timer->stop_fn != NULL) {
    99d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    99da:	b10b      	cbz	r3, 99e0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    99dc:	4620      	mov	r0, r4
    99de:	4798      	blx	r3
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    99e0:	f104 0018 	add.w	r0, r4, #24
    99e4:	f7fe f8f0 	bl	7bc8 <z_unpend1_no_timeout>
		if (pending_thread != NULL) {
    99e8:	b168      	cbz	r0, 9a06 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    99ea:	f7fd fb85 	bl	70f8 <z_ready_thread>
    99ee:	f04f 0340 	mov.w	r3, #64	; 0x40
    99f2:	f3ef 8011 	mrs	r0, BASEPRI
    99f6:	f383 8812 	msr	BASEPRI_MAX, r3
    99fa:	f3bf 8f6f 	isb	sy
}
    99fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a02:	f7ff bfb8 	b.w	9976 <z_reschedule_irqlock>
    9a06:	bd10      	pop	{r4, pc}

00009a08 <k_heap_init>:
{
    9a08:	b410      	push	{r4}
    9a0a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    9a0e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9a12:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9a14:	f7f8 b852 	b.w	1abc <sys_heap_init>

00009a18 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9a18:	f7fb bc94 	b.w	5344 <SystemInit>
