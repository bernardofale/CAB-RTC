
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 23 00 20 09 33 00 00 9d 8d 00 00 dd 32 00 00     .#. .3.......2..
  10:	dd 32 00 00 dd 32 00 00 dd 32 00 00 00 00 00 00     .2...2...2......
	...
  2c:	b9 2b 00 00 dd 32 00 00 00 00 00 00 65 2b 00 00     .+...2......e+..
  3c:	dd 32 00 00                                         .2..

00000040 <_irq_vector_table>:
  40:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  50:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  60:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  70:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  80:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  90:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  a0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  b0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  c0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  d0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  e0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..
  f0:	69 2c 00 00 69 2c 00 00 69 2c 00 00 69 2c 00 00     i,..i,..i,..i,..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f007 ff4e 	bl	8384 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
     4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
     4fc:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4fe:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
     500:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     502:	2501      	movs	r5, #1
     504:	409d      	lsls	r5, r3
     506:	6863      	ldr	r3, [r4, #4]
     508:	681b      	ldr	r3, [r3, #0]
     50a:	421d      	tst	r5, r3
{
     50c:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     50e:	d10e      	bne.n	52e <gpio_pin_set_dt+0x36>
     510:	4918      	ldr	r1, [pc, #96]	; (574 <gpio_pin_set_dt+0x7c>)
     512:	4a19      	ldr	r2, [pc, #100]	; (578 <gpio_pin_set_dt+0x80>)
     514:	4819      	ldr	r0, [pc, #100]	; (57c <gpio_pin_set_dt+0x84>)
     516:	f240 4392 	movw	r3, #1170	; 0x492
     51a:	f008 fbaa 	bl	8c72 <assert_print>
     51e:	4818      	ldr	r0, [pc, #96]	; (580 <gpio_pin_set_dt+0x88>)
     520:	f008 fba7 	bl	8c72 <assert_print>
     524:	4814      	ldr	r0, [pc, #80]	; (578 <gpio_pin_set_dt+0x80>)
     526:	f240 4192 	movw	r1, #1170	; 0x492
     52a:	f008 fb9b 	bl	8c64 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     52e:	683b      	ldr	r3, [r7, #0]
     530:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     532:	6863      	ldr	r3, [r4, #4]
     534:	681b      	ldr	r3, [r3, #0]
     536:	bf18      	it	ne
     538:	f086 0601 	eorne.w	r6, r6, #1
     53c:	421d      	tst	r5, r3
     53e:	d10e      	bne.n	55e <gpio_pin_set_dt+0x66>
     540:	490c      	ldr	r1, [pc, #48]	; (574 <gpio_pin_set_dt+0x7c>)
     542:	4a0d      	ldr	r2, [pc, #52]	; (578 <gpio_pin_set_dt+0x80>)
     544:	480d      	ldr	r0, [pc, #52]	; (57c <gpio_pin_set_dt+0x84>)
     546:	f44f 638d 	mov.w	r3, #1128	; 0x468
     54a:	f008 fb92 	bl	8c72 <assert_print>
     54e:	480c      	ldr	r0, [pc, #48]	; (580 <gpio_pin_set_dt+0x88>)
     550:	f008 fb8f 	bl	8c72 <assert_print>
     554:	4808      	ldr	r0, [pc, #32]	; (578 <gpio_pin_set_dt+0x80>)
     556:	f44f 618d 	mov.w	r1, #1128	; 0x468
     55a:	f008 fb83 	bl	8c64 <assert_post_action>
	if (value != 0)	{
     55e:	b136      	cbz	r6, 56e <gpio_pin_set_dt+0x76>
	return api->port_set_bits_raw(port, pins);
     560:	68a3      	ldr	r3, [r4, #8]
     562:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     564:	4629      	mov	r1, r5
     566:	4620      	mov	r0, r4
}
     568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     56c:	4718      	bx	r3
     56e:	68a3      	ldr	r3, [r4, #8]
     570:	691b      	ldr	r3, [r3, #16]
     572:	e7f7      	b.n	564 <gpio_pin_set_dt+0x6c>
     574:	00009bb1 	.word	0x00009bb1
     578:	00009b80 	.word	0x00009b80
     57c:	00009bef 	.word	0x00009bef
     580:	00009c0c 	.word	0x00009c0c

00000584 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
     584:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gpio_pin_configure(spec->port,
     588:	6805      	ldr	r5, [r0, #0]
				  spec->pin,
     58a:	7906      	ldrb	r6, [r0, #4]
				  spec->dt_flags | extra_flags);
     58c:	88c4      	ldrh	r4, [r0, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     58e:	f004 0330 	and.w	r3, r4, #48	; 0x30
     592:	2b30      	cmp	r3, #48	; 0x30
	const struct gpio_driver_config *const cfg =
     594:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
     598:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     59a:	d10e      	bne.n	5ba <gpio_pin_configure_dt.constprop.0+0x36>
     59c:	4927      	ldr	r1, [pc, #156]	; (63c <gpio_pin_configure_dt.constprop.0+0xb8>)
     59e:	4a28      	ldr	r2, [pc, #160]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5a0:	4828      	ldr	r0, [pc, #160]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     5a2:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     5a6:	f008 fb64 	bl	8c72 <assert_print>
     5aa:	4827      	ldr	r0, [pc, #156]	; (648 <gpio_pin_configure_dt.constprop.0+0xc4>)
     5ac:	f008 fb61 	bl	8c72 <assert_print>
     5b0:	4823      	ldr	r0, [pc, #140]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5b2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     5b6:	f008 fb55 	bl	8c64 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     5ba:	f004 0306 	and.w	r3, r4, #6
     5be:	2b04      	cmp	r3, #4
     5c0:	d10b      	bne.n	5da <gpio_pin_configure_dt.constprop.0+0x56>
     5c2:	4922      	ldr	r1, [pc, #136]	; (64c <gpio_pin_configure_dt.constprop.0+0xc8>)
     5c4:	481f      	ldr	r0, [pc, #124]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     5c6:	4a1e      	ldr	r2, [pc, #120]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     5cc:	f008 fb51 	bl	8c72 <assert_print>
     5d0:	481b      	ldr	r0, [pc, #108]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5d2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     5d6:	f008 fb45 	bl	8c64 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5da:	f8db 3000 	ldr.w	r3, [fp]
     5de:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     5e2:	07e1      	lsls	r1, r4, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5e4:	fa0a fa06 	lsl.w	sl, sl, r6
	return gpio_pin_configure(spec->port,
     5e8:	bf54      	ite	pl
     5ea:	f444 14d0 	orrpl.w	r4, r4, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     5ee:	f484 14b0 	eormi.w	r4, r4, #1441792	; 0x160000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5f2:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     5f6:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5fa:	d10e      	bne.n	61a <gpio_pin_configure_dt.constprop.0+0x96>
     5fc:	4914      	ldr	r1, [pc, #80]	; (650 <gpio_pin_configure_dt.constprop.0+0xcc>)
     5fe:	4a10      	ldr	r2, [pc, #64]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     600:	4810      	ldr	r0, [pc, #64]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     602:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     606:	f008 fb34 	bl	8c72 <assert_print>
     60a:	4812      	ldr	r0, [pc, #72]	; (654 <gpio_pin_configure_dt.constprop.0+0xd0>)
     60c:	f008 fb31 	bl	8c72 <assert_print>
     610:	480b      	ldr	r0, [pc, #44]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     612:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     616:	f008 fb25 	bl	8c64 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     61a:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     61c:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     61e:	bf4c      	ite	mi
     620:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     624:	ea23 030a 	bicpl.w	r3, r3, sl
     628:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     62a:	f8d9 3000 	ldr.w	r3, [r9]
     62e:	4642      	mov	r2, r8
     630:	4631      	mov	r1, r6
     632:	4628      	mov	r0, r5
}
     634:	b001      	add	sp, #4
     636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
     63a:	4718      	bx	r3
     63c:	00009c1e 	.word	0x00009c1e
     640:	00009b80 	.word	0x00009b80
     644:	00009bef 	.word	0x00009bef
     648:	00009c57 	.word	0x00009c57
     64c:	00009c94 	.word	0x00009c94
     650:	00009bb1 	.word	0x00009bb1
     654:	00009c0c 	.word	0x00009c0c

00000658 <thread_OUTPUT_code>:
		k_sem_give(&sem_filter_output); //ready to be taken, count increases (unless it's not max)
  	}
}

void thread_OUTPUT_code(void *argA , void *argB, void *argC)
{	
     658:	b570      	push	{r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     65a:	4d2e      	ldr	r5, [pc, #184]	; (714 <thread_OUTPUT_code+0xbc>)
	int ret;

    while(1) {
		k_sem_take(&sem_filter_output, K_FOREVER); //takes the semaphore given by the filter task
		printk("Thread OUTPUT released\n");
     65c:	4e2e      	ldr	r6, [pc, #184]	; (718 <thread_OUTPUT_code+0xc0>)
		printk("Distance after filter ->%4u m \n", distance);
     65e:	4c2f      	ldr	r4, [pc, #188]	; (71c <thread_OUTPUT_code+0xc4>)
     660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     668:	4628      	mov	r0, r5
     66a:	f006 f861 	bl	6730 <z_impl_k_sem_take>
		printk("Thread OUTPUT released\n");
     66e:	4630      	mov	r0, r6
     670:	f008 fa05 	bl	8a7e <printk>
		printk("Distance after filter ->%4u m \n", distance);
     674:	8821      	ldrh	r1, [r4, #0]
     676:	482a      	ldr	r0, [pc, #168]	; (720 <thread_OUTPUT_code+0xc8>)
     678:	f008 fa01 	bl	8a7e <printk>
		if(distance >= 30){
     67c:	8823      	ldrh	r3, [r4, #0]
     67e:	2b1d      	cmp	r3, #29
     680:	d918      	bls.n	6b4 <thread_OUTPUT_code+0x5c>
			/* LED1 ON */
			ret = gpio_pin_set_dt(&led1, 1);
     682:	4828      	ldr	r0, [pc, #160]	; (724 <thread_OUTPUT_code+0xcc>)
     684:	2101      	movs	r1, #1
     686:	f7ff ff37 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     68a:	2800      	cmp	r0, #0
     68c:	db11      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
				return;
			}
			ret = gpio_pin_set_dt(&led2, 0);
     68e:	2100      	movs	r1, #0
			/* LEDS1,2 ON */
			ret = gpio_pin_set_dt(&led1, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led2, 1);
     690:	4825      	ldr	r0, [pc, #148]	; (728 <thread_OUTPUT_code+0xd0>)
     692:	f7ff ff31 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     696:	2800      	cmp	r0, #0
     698:	db0b      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
				return;
			}
			ret = gpio_pin_set_dt(&led3, 0);
     69a:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led2, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led3, 1);
     69c:	4823      	ldr	r0, [pc, #140]	; (72c <thread_OUTPUT_code+0xd4>)
     69e:	f7ff ff2b 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6a2:	2800      	cmp	r0, #0
     6a4:	db05      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
				return;
			}
			ret = gpio_pin_set_dt(&led4, 0);
     6a6:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led3, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led4, 1);
     6a8:	4821      	ldr	r0, [pc, #132]	; (730 <thread_OUTPUT_code+0xd8>)
     6aa:	f7ff ff25 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6ae:	2800      	cmp	r0, #0
     6b0:	dad6      	bge.n	660 <thread_OUTPUT_code+0x8>
				return;
			}
		}
  	}
}
     6b2:	bd70      	pop	{r4, r5, r6, pc}
		}else if((distance >= 20) & (distance < 30)){
     6b4:	f1a3 0214 	sub.w	r2, r3, #20
     6b8:	2a09      	cmp	r2, #9
     6ba:	d807      	bhi.n	6cc <thread_OUTPUT_code+0x74>
			ret = gpio_pin_set_dt(&led1, 1);
     6bc:	4819      	ldr	r0, [pc, #100]	; (724 <thread_OUTPUT_code+0xcc>)
     6be:	2101      	movs	r1, #1
     6c0:	f7ff ff1a 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6c4:	2800      	cmp	r0, #0
     6c6:	dbf4      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led2, 1);
     6c8:	2101      	movs	r1, #1
     6ca:	e7e1      	b.n	690 <thread_OUTPUT_code+0x38>
		}else if((distance >=  10) & (distance < 20)){
     6cc:	3b0a      	subs	r3, #10
     6ce:	2b09      	cmp	r3, #9
			ret = gpio_pin_set_dt(&led1, 1);
     6d0:	4814      	ldr	r0, [pc, #80]	; (724 <thread_OUTPUT_code+0xcc>)
     6d2:	f04f 0101 	mov.w	r1, #1
		}else if((distance >=  10) & (distance < 20)){
     6d6:	d80b      	bhi.n	6f0 <thread_OUTPUT_code+0x98>
			ret = gpio_pin_set_dt(&led1, 1);
     6d8:	f7ff ff0e 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6dc:	2800      	cmp	r0, #0
     6de:	dbe8      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led2, 1);
     6e0:	4811      	ldr	r0, [pc, #68]	; (728 <thread_OUTPUT_code+0xd0>)
     6e2:	2101      	movs	r1, #1
     6e4:	f7ff ff08 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6e8:	2800      	cmp	r0, #0
     6ea:	dbe2      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led3, 1);
     6ec:	2101      	movs	r1, #1
     6ee:	e7d5      	b.n	69c <thread_OUTPUT_code+0x44>
			ret = gpio_pin_set_dt(&led1, 1);
     6f0:	f7ff ff02 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     6f4:	2800      	cmp	r0, #0
     6f6:	dbdc      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led2, 1);
     6f8:	480b      	ldr	r0, [pc, #44]	; (728 <thread_OUTPUT_code+0xd0>)
     6fa:	2101      	movs	r1, #1
     6fc:	f7ff fefc 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     700:	2800      	cmp	r0, #0
     702:	dbd6      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led3, 1);
     704:	4809      	ldr	r0, [pc, #36]	; (72c <thread_OUTPUT_code+0xd4>)
     706:	2101      	movs	r1, #1
     708:	f7ff fef6 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     70c:	2800      	cmp	r0, #0
     70e:	dbd0      	blt.n	6b2 <thread_OUTPUT_code+0x5a>
			ret = gpio_pin_set_dt(&led4, 1);
     710:	2101      	movs	r1, #1
     712:	e7c9      	b.n	6a8 <thread_OUTPUT_code+0x50>
     714:	2000050c 	.word	0x2000050c
     718:	00009cc7 	.word	0x00009cc7
     71c:	20000e68 	.word	0x20000e68
     720:	00009cdf 	.word	0x00009cdf
     724:	000098a8 	.word	0x000098a8
     728:	000098b0 	.word	0x000098b0
     72c:	000098b8 	.word	0x000098b8
     730:	000098c0 	.word	0x000098c0

00000734 <thread_SENSOR_code>:
{
     734:	b5f0      	push	{r4, r5, r6, r7, lr}
		printk("Thread SENSOR released\n");
     736:	4f19      	ldr	r7, [pc, #100]	; (79c <thread_SENSOR_code+0x68>)
    	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     738:	4d19      	ldr	r5, [pc, #100]	; (7a0 <thread_SENSOR_code+0x6c>)
	const struct adc_sequence sequence = {
     73a:	4e1a      	ldr	r6, [pc, #104]	; (7a4 <thread_SENSOR_code+0x70>)
{
     73c:	b087      	sub	sp, #28
		printk("Thread SENSOR released\n");
     73e:	4638      	mov	r0, r7
     740:	f008 f99d 	bl	8a7e <printk>
    	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     744:	2301      	movs	r3, #1
     746:	60eb      	str	r3, [r5, #12]
	const struct adc_sequence sequence = {
     748:	2302      	movs	r3, #2
     74a:	9302      	str	r3, [sp, #8]
     74c:	4b16      	ldr	r3, [pc, #88]	; (7a8 <thread_SENSOR_code+0x74>)
     74e:	9303      	str	r3, [sp, #12]
     750:	2214      	movs	r2, #20
     752:	230a      	movs	r3, #10
     754:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (adc_dev == NULL) {
     758:	4b14      	ldr	r3, [pc, #80]	; (7ac <thread_SENSOR_code+0x78>)
	const struct adc_sequence sequence = {
     75a:	9601      	str	r6, [sp, #4]
	if (adc_dev == NULL) {
     75c:	6818      	ldr	r0, [r3, #0]
     75e:	b988      	cbnz	r0, 784 <thread_SENSOR_code+0x50>
            printk("adc_sample(): error, must bind to adc first \n\r");
     760:	4813      	ldr	r0, [pc, #76]	; (7b0 <thread_SENSOR_code+0x7c>)
     762:	f008 f98c 	bl	8a7e <printk>
            return -1;
     766:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            printk("adc_sample() failed with error code %d\n\r",err);
     76a:	4812      	ldr	r0, [pc, #72]	; (7b4 <thread_SENSOR_code+0x80>)
     76c:	4621      	mov	r1, r4
     76e:	f008 f986 	bl	8a7e <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     772:	4811      	ldr	r0, [pc, #68]	; (7b8 <thread_SENSOR_code+0x84>)
     774:	f005 ff9e 	bl	66b4 <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
     778:	2100      	movs	r1, #0
     77a:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
     77e:	f007 f8b5 	bl	78ec <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     782:	e7dc      	b.n	73e <thread_SENSOR_code+0xa>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     784:	6883      	ldr	r3, [r0, #8]
     786:	a901      	add	r1, sp, #4
     788:	685b      	ldr	r3, [r3, #4]
     78a:	4798      	blx	r3
	if (ret) {
     78c:	4604      	mov	r4, r0
     78e:	2800      	cmp	r0, #0
     790:	d0ef      	beq.n	772 <thread_SENSOR_code+0x3e>
            printk("adc_read() failed with code %d\n", ret);
     792:	4601      	mov	r1, r0
     794:	4809      	ldr	r0, [pc, #36]	; (7bc <thread_SENSOR_code+0x88>)
     796:	f008 f972 	bl	8a7e <printk>
        if(err) {
     79a:	e7e6      	b.n	76a <thread_SENSOR_code+0x36>
     79c:	00009cff 	.word	0x00009cff
     7a0:	40007000 	.word	0x40007000
     7a4:	000098c8 	.word	0x000098c8
     7a8:	20000e54 	.word	0x20000e54
     7ac:	20000508 	.word	0x20000508
     7b0:	00009d17 	.word	0x00009d17
     7b4:	00009d66 	.word	0x00009d66
     7b8:	2000051c 	.word	0x2000051c
     7bc:	00009d46 	.word	0x00009d46

000007c0 <main>:
{
     7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7c2:	b08d      	sub	sp, #52	; 0x34
	int arg1=0, arg2=0, arg3=0; // Input args of tasks (actually not used in this case)
     7c4:	2300      	movs	r3, #0
     7c6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
     7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     7cc:	483e      	ldr	r0, [pc, #248]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7ce:	f008 fe26 	bl	941e <z_device_is_ready>
	if (!device_is_ready(led1.port)) {
     7d2:	2800      	cmp	r0, #0
     7d4:	d076      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     7d6:	483c      	ldr	r0, [pc, #240]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7d8:	f008 fe21 	bl	941e <z_device_is_ready>
	if (!device_is_ready(led2.port)) {
     7dc:	2800      	cmp	r0, #0
     7de:	d071      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     7e0:	4839      	ldr	r0, [pc, #228]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7e2:	f008 fe1c 	bl	941e <z_device_is_ready>
	if (!device_is_ready(led3.port)) {
     7e6:	2800      	cmp	r0, #0
     7e8:	d06c      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     7ea:	4837      	ldr	r0, [pc, #220]	; (8c8 <CONFIG_ISR_STACK_SIZE+0xc8>)
     7ec:	f008 fe17 	bl	941e <z_device_is_ready>
	if (!device_is_ready(led4.port)) {
     7f0:	2800      	cmp	r0, #0
     7f2:	d067      	beq.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
	err = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     7f4:	4835      	ldr	r0, [pc, #212]	; (8cc <CONFIG_ISR_STACK_SIZE+0xcc>)
     7f6:	f7ff fec5 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (err < 0) {
     7fa:	2800      	cmp	r0, #0
     7fc:	db62      	blt.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
	err = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     7fe:	4834      	ldr	r0, [pc, #208]	; (8d0 <CONFIG_ISR_STACK_SIZE+0xd0>)
     800:	f7ff fec0 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (err < 0) {
     804:	2800      	cmp	r0, #0
     806:	db5d      	blt.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
	err = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_ACTIVE);
     808:	4832      	ldr	r0, [pc, #200]	; (8d4 <CONFIG_ISR_STACK_SIZE+0xd4>)
     80a:	f7ff febb 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (err < 0) {
     80e:	2800      	cmp	r0, #0
     810:	db58      	blt.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
	err = gpio_pin_configure_dt(&led4, GPIO_OUTPUT_ACTIVE);
     812:	4831      	ldr	r0, [pc, #196]	; (8d8 <CONFIG_ISR_STACK_SIZE+0xd8>)
     814:	f7ff feb6 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (err < 0) {
     818:	2800      	cmp	r0, #0
     81a:	db53      	blt.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     81c:	482f      	ldr	r0, [pc, #188]	; (8dc <CONFIG_ISR_STACK_SIZE+0xdc>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     81e:	4c30      	ldr	r4, [pc, #192]	; (8e0 <CONFIG_ISR_STACK_SIZE+0xe0>)
     820:	f005 f97a 	bl	5b18 <z_impl_device_get_binding>
     824:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     826:	b910      	cbnz	r0, 82e <CONFIG_ISR_STACK_SIZE+0x2e>
        printk("ADC device_get_binding() failed\n");
     828:	482e      	ldr	r0, [pc, #184]	; (8e4 <CONFIG_ISR_STACK_SIZE+0xe4>)
     82a:	f008 f928 	bl	8a7e <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     82e:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     830:	6883      	ldr	r3, [r0, #8]
     832:	492d      	ldr	r1, [pc, #180]	; (8e8 <CONFIG_ISR_STACK_SIZE+0xe8>)
     834:	681b      	ldr	r3, [r3, #0]
     836:	4798      	blx	r3
    if (err) {
     838:	4601      	mov	r1, r0
     83a:	b110      	cbz	r0, 842 <CONFIG_ISR_STACK_SIZE+0x42>
        printk("adc_channel_setup() failed with error code %d\n", err);
     83c:	482b      	ldr	r0, [pc, #172]	; (8ec <CONFIG_ISR_STACK_SIZE+0xec>)
     83e:	f008 f91e 	bl	8a7e <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
     842:	2201      	movs	r2, #1
     844:	2100      	movs	r1, #0
     846:	482a      	ldr	r0, [pc, #168]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     848:	f008 fe41 	bl	94ce <z_impl_k_sem_init>
     84c:	2201      	movs	r2, #1
     84e:	2100      	movs	r1, #0
     850:	4828      	ldr	r0, [pc, #160]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     852:	f008 fe3c 	bl	94ce <z_impl_k_sem_init>
    thread_SENSOR_tid = k_thread_create(&thread_SENSOR_data, thread_SENSOR_stack,
     856:	2600      	movs	r6, #0
     858:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     85a:	ab0b      	add	r3, sp, #44	; 0x2c
     85c:	9302      	str	r3, [sp, #8]
     85e:	ab0a      	add	r3, sp, #40	; 0x28
     860:	9301      	str	r3, [sp, #4]
     862:	2501      	movs	r5, #1
     864:	ab09      	add	r3, sp, #36	; 0x24
     866:	2400      	movs	r4, #0
     868:	9300      	str	r3, [sp, #0]
     86a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     86e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     872:	4b21      	ldr	r3, [pc, #132]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     874:	4921      	ldr	r1, [pc, #132]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     876:	4822      	ldr	r0, [pc, #136]	; (900 <CONFIG_ISR_STACK_SIZE+0x100>)
     878:	f44f 6280 	mov.w	r2, #1024	; 0x400
     87c:	f005 fc2c 	bl	60d8 <z_impl_k_thread_create>
     880:	4b20      	ldr	r3, [pc, #128]	; (904 <CONFIG_ISR_STACK_SIZE+0x104>)
     882:	6018      	str	r0, [r3, #0]
     884:	4b20      	ldr	r3, [pc, #128]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     886:	4921      	ldr	r1, [pc, #132]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     888:	9400      	str	r4, [sp, #0]
     88a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     88e:	e9cd 5403 	strd	r5, r4, [sp, #12]
     892:	e9cd 4401 	strd	r4, r4, [sp, #4]
     896:	f44f 6280 	mov.w	r2, #1024	; 0x400
     89a:	481d      	ldr	r0, [pc, #116]	; (910 <CONFIG_ISR_STACK_SIZE+0x110>)
     89c:	f005 fc1c 	bl	60d8 <z_impl_k_thread_create>
    thread_FILTER_tid = k_thread_create(&thread_FILTER_data, thread_FILTER_stack,
     8a0:	4b1c      	ldr	r3, [pc, #112]	; (914 <CONFIG_ISR_STACK_SIZE+0x114>)
     8a2:	6018      	str	r0, [r3, #0]
     8a4:	4b1c      	ldr	r3, [pc, #112]	; (918 <CONFIG_ISR_STACK_SIZE+0x118>)
     8a6:	491d      	ldr	r1, [pc, #116]	; (91c <CONFIG_ISR_STACK_SIZE+0x11c>)
     8a8:	481d      	ldr	r0, [pc, #116]	; (920 <CONFIG_ISR_STACK_SIZE+0x120>)
     8aa:	9400      	str	r4, [sp, #0]
     8ac:	e9cd 6706 	strd	r6, r7, [sp, #24]
     8b0:	e9cd 5403 	strd	r5, r4, [sp, #12]
     8b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
     8b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8bc:	f005 fc0c 	bl	60d8 <z_impl_k_thread_create>
    thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
     8c0:	4b18      	ldr	r3, [pc, #96]	; (924 <CONFIG_ISR_STACK_SIZE+0x124>)
     8c2:	6018      	str	r0, [r3, #0]
}
     8c4:	b00d      	add	sp, #52	; 0x34
     8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8c8:	0000962c 	.word	0x0000962c
     8cc:	000098a8 	.word	0x000098a8
     8d0:	000098b0 	.word	0x000098b0
     8d4:	000098b8 	.word	0x000098b8
     8d8:	000098c0 	.word	0x000098c0
     8dc:	00009d8f 	.word	0x00009d8f
     8e0:	20000508 	.word	0x20000508
     8e4:	00009d95 	.word	0x00009d95
     8e8:	00009b78 	.word	0x00009b78
     8ec:	00009db6 	.word	0x00009db6
     8f0:	2000051c 	.word	0x2000051c
     8f4:	2000050c 	.word	0x2000050c
     8f8:	00000735 	.word	0x00000735
     8fc:	200012a0 	.word	0x200012a0
     900:	20000360 	.word	0x20000360
     904:	20000534 	.word	0x20000534
     908:	00000971 	.word	0x00000971
     90c:	200016c0 	.word	0x200016c0
     910:	20000260 	.word	0x20000260
     914:	2000052c 	.word	0x2000052c
     918:	00000659 	.word	0x00000659
     91c:	20001ae0 	.word	0x20001ae0
     920:	200002e0 	.word	0x200002e0
     924:	20000530 	.word	0x20000530

00000928 <filter>:

void filter(uint16_t *arr){
     928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t sum = 0;
	uint16_t v;
	for (int i = 0; i < N_SAMPLES; i++){
		v = (uint16_t)(100*arr[i]*((float)3/1023));
     92c:	4f0e      	ldr	r7, [pc, #56]	; (968 <filter+0x40>)
     92e:	1e86      	subs	r6, r0, #2
     930:	f100 0512 	add.w	r5, r0, #18
	uint16_t sum = 0;
     934:	2400      	movs	r4, #0
		v = (uint16_t)(100*arr[i]*((float)3/1023));
     936:	f04f 0864 	mov.w	r8, #100	; 0x64
     93a:	f836 0f02 	ldrh.w	r0, [r6, #2]!
     93e:	fb08 f000 	mul.w	r0, r8, r0
     942:	f7ff fd4b 	bl	3dc <__aeabi_i2f>
     946:	4639      	mov	r1, r7
     948:	f7ff fbda 	bl	100 <__aeabi_fmul>
     94c:	f7ff fd9a 	bl	484 <__aeabi_f2uiz>
	for (int i = 0; i < N_SAMPLES; i++){
     950:	42b5      	cmp	r5, r6
		if(v != 0){
			sum += v;
     952:	4404      	add	r4, r0
     954:	b2a4      	uxth	r4, r4
	for (int i = 0; i < N_SAMPLES; i++){
     956:	d1f0      	bne.n	93a <filter+0x12>
		}
	}
	uint16_t avg=(uint16_t)sum/N_SAMPLES;
     958:	230a      	movs	r3, #10
     95a:	fbb4 f4f3 	udiv	r4, r4, r3
	distance = avg;
     95e:	4b03      	ldr	r3, [pc, #12]	; (96c <filter+0x44>)
     960:	801c      	strh	r4, [r3, #0]
}
     962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     966:	bf00      	nop
     968:	3b40300c 	.word	0x3b40300c
     96c:	20000e68 	.word	0x20000e68

00000970 <thread_FILTER_code>:
{	
     970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_sem_take(sem, timeout);
     974:	4f1b      	ldr	r7, [pc, #108]	; (9e4 <thread_FILTER_code+0x74>)
		printk("Thread FILTER released\n");
     976:	f8df 8070 	ldr.w	r8, [pc, #112]	; 9e8 <thread_FILTER_code+0x78>
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     97a:	4e1c      	ldr	r6, [pc, #112]	; (9ec <thread_FILTER_code+0x7c>)
     97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     984:	4638      	mov	r0, r7
     986:	f005 fed3 	bl	6730 <z_impl_k_sem_take>
		printk("Thread FILTER released\n");
     98a:	4640      	mov	r0, r8
     98c:	f008 f877 	bl	8a7e <printk>
		for(int i = 0; i < BUFFER_SIZE; i++){
     990:	4d17      	ldr	r5, [pc, #92]	; (9f0 <thread_FILTER_code+0x80>)
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     992:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9f4 <thread_FILTER_code+0x84>
					printk("Sensor reading %d out of range\n\r", i+1);
     996:	f8df a060 	ldr.w	sl, [pc, #96]	; 9f8 <thread_FILTER_code+0x88>
		for(int i = 0; i < BUFFER_SIZE; i++){
     99a:	2400      	movs	r4, #0
				if(adc_sample_buffer[i] > 1023) {
     99c:	f835 3b02 	ldrh.w	r3, [r5], #2
     9a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					printk("Sensor reading %d out of range\n\r", i+1);
     9a4:	f104 0401 	add.w	r4, r4, #1
				if(adc_sample_buffer[i] > 1023) {
     9a8:	d30f      	bcc.n	9ca <thread_FILTER_code+0x5a>
					adc_sample_buffer[i] = 0;
     9aa:	2300      	movs	r3, #0
     9ac:	f825 3c02 	strh.w	r3, [r5, #-2]
					printk("Sensor reading %d out of range\n\r", i+1);
     9b0:	4621      	mov	r1, r4
     9b2:	4650      	mov	r0, sl
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     9b4:	f008 f863 	bl	8a7e <printk>
		for(int i = 0; i < BUFFER_SIZE; i++){
     9b8:	2c0a      	cmp	r4, #10
     9ba:	d1ef      	bne.n	99c <thread_FILTER_code+0x2c>
		filter(adc_sample_buffer);
     9bc:	480c      	ldr	r0, [pc, #48]	; (9f0 <thread_FILTER_code+0x80>)
     9be:	f7ff ffb3 	bl	928 <filter>
	z_impl_k_sem_give(sem);
     9c2:	480e      	ldr	r0, [pc, #56]	; (9fc <thread_FILTER_code+0x8c>)
     9c4:	f005 fe76 	bl	66b4 <z_impl_k_sem_give>
    while(1) {
     9c8:	e7d8      	b.n	97c <thread_FILTER_code+0xc>
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     9ca:	2064      	movs	r0, #100	; 0x64
     9cc:	4358      	muls	r0, r3
     9ce:	f7ff fd05 	bl	3dc <__aeabi_i2f>
     9d2:	4631      	mov	r1, r6
     9d4:	f7ff fb94 	bl	100 <__aeabi_fmul>
     9d8:	f7ff fd54 	bl	484 <__aeabi_f2uiz>
     9dc:	b281      	uxth	r1, r0
     9de:	4648      	mov	r0, r9
     9e0:	e7e8      	b.n	9b4 <thread_FILTER_code+0x44>
     9e2:	bf00      	nop
     9e4:	2000051c 	.word	0x2000051c
     9e8:	00009de5 	.word	0x00009de5
     9ec:	3b40300c 	.word	0x3b40300c
     9f0:	20000e54 	.word	0x20000e54
     9f4:	00009e1e 	.word	0x00009e1e
     9f8:	00009dfd 	.word	0x00009dfd
     9fc:	2000050c 	.word	0x2000050c

00000a00 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a04:	b08d      	sub	sp, #52	; 0x34
     a06:	461f      	mov	r7, r3
     a08:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     a0a:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     a0e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     a12:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     a14:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     a16:	0782      	lsls	r2, r0, #30
     a18:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     a1c:	9304      	str	r3, [sp, #16]
{
     a1e:	4605      	mov	r5, r0
     a20:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     a22:	f040 8217 	bne.w	e54 <cbvprintf_package+0x454>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     a26:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     a28:	2800      	cmp	r0, #0
     a2a:	f040 8216 	bne.w	e5a <cbvprintf_package+0x45a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     a2e:	f001 0607 	and.w	r6, r1, #7
     a32:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     a34:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     a38:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     a3c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     a40:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     a42:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     a46:	4652      	mov	r2, sl
	bool parsing = false;
     a48:	4651      	mov	r1, sl
	size = sizeof(char *);
     a4a:	f8cd 8000 	str.w	r8, [sp]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     a4e:	b105      	cbz	r5, a52 <cbvprintf_package+0x52>
				*(const char **)buf = s;
     a50:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a52:	9804      	ldr	r0, [sp, #16]
     a54:	2800      	cmp	r0, #0
     a56:	dc07      	bgt.n	a68 <cbvprintf_package+0x68>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     a58:	48be      	ldr	r0, [pc, #760]	; (d54 <cbvprintf_package+0x354>)
     a5a:	4287      	cmp	r7, r0
     a5c:	f0c0 811a 	bcc.w	c94 <cbvprintf_package+0x294>
     a60:	48bd      	ldr	r0, [pc, #756]	; (d58 <cbvprintf_package+0x358>)
     a62:	4287      	cmp	r7, r0
     a64:	f080 8116 	bcs.w	c94 <cbvprintf_package+0x294>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     a68:	9802      	ldr	r0, [sp, #8]
     a6a:	f010 0e02 	ands.w	lr, r0, #2
     a6e:	f000 8136 	beq.w	cde <cbvprintf_package+0x2de>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a72:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a76:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a78:	f1be 0f00 	cmp.w	lr, #0
     a7c:	f000 8110 	beq.w	ca0 <cbvprintf_package+0x2a0>
     a80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     a84:	f0c0 810c 	bcc.w	ca0 <cbvprintf_package+0x2a0>
					__ASSERT(false, "String with too many arguments");
     a88:	49b4      	ldr	r1, [pc, #720]	; (d5c <cbvprintf_package+0x35c>)
     a8a:	4ab5      	ldr	r2, [pc, #724]	; (d60 <cbvprintf_package+0x360>)
     a8c:	48b5      	ldr	r0, [pc, #724]	; (d64 <cbvprintf_package+0x364>)
     a8e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     a92:	f008 f8ee 	bl	8c72 <assert_print>
     a96:	48b4      	ldr	r0, [pc, #720]	; (d68 <cbvprintf_package+0x368>)
     a98:	f008 f8eb 	bl	8c72 <assert_print>
     a9c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
     aa0:	48af      	ldr	r0, [pc, #700]	; (d60 <cbvprintf_package+0x360>)
     aa2:	f008 f8df 	bl	8c64 <assert_post_action>
					return -EINVAL;
     aa6:	f06f 0015 	mvn.w	r0, #21
     aaa:	e0e2      	b.n	c72 <cbvprintf_package+0x272>
		if (!parsing) {
     aac:	b939      	cbnz	r1, abe <cbvprintf_package+0xbe>
			if (*fmt == '%') {
     aae:	2825      	cmp	r0, #37	; 0x25
     ab0:	d115      	bne.n	ade <cbvprintf_package+0xde>
				parsing = true;
     ab2:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     ab4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     ab8:	f8cd 8000 	str.w	r8, [sp]
     abc:	e00f      	b.n	ade <cbvprintf_package+0xde>
		switch (*fmt) {
     abe:	287a      	cmp	r0, #122	; 0x7a
     ac0:	f200 8166 	bhi.w	d90 <cbvprintf_package+0x390>
     ac4:	284b      	cmp	r0, #75	; 0x4b
     ac6:	d820      	bhi.n	b0a <cbvprintf_package+0x10a>
     ac8:	2847      	cmp	r0, #71	; 0x47
     aca:	f200 8161 	bhi.w	d90 <cbvprintf_package+0x390>
     ace:	2829      	cmp	r0, #41	; 0x29
     ad0:	f200 8084 	bhi.w	bdc <cbvprintf_package+0x1dc>
     ad4:	2820      	cmp	r0, #32
     ad6:	d002      	beq.n	ade <cbvprintf_package+0xde>
			parsing = false;
     ad8:	2823      	cmp	r0, #35	; 0x23
     ada:	bf18      	it	ne
     adc:	2100      	movne	r1, #0
	while (*++fmt != '\0') {
     ade:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     ae2:	2800      	cmp	r0, #0
     ae4:	d1e2      	bne.n	aac <cbvprintf_package+0xac>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     ae6:	1b61      	subs	r1, r4, r5
     ae8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     aec:	f0c0 8152 	bcc.w	d94 <cbvprintf_package+0x394>
		__ASSERT(false, "too many format args");
     af0:	499a      	ldr	r1, [pc, #616]	; (d5c <cbvprintf_package+0x35c>)
     af2:	4a9b      	ldr	r2, [pc, #620]	; (d60 <cbvprintf_package+0x360>)
     af4:	489b      	ldr	r0, [pc, #620]	; (d64 <cbvprintf_package+0x364>)
     af6:	f240 233d 	movw	r3, #573	; 0x23d
     afa:	f008 f8ba 	bl	8c72 <assert_print>
     afe:	489b      	ldr	r0, [pc, #620]	; (d6c <cbvprintf_package+0x36c>)
     b00:	f008 f8b7 	bl	8c72 <assert_print>
     b04:	f240 213d 	movw	r1, #573	; 0x23d
     b08:	e7ca      	b.n	aa0 <cbvprintf_package+0xa0>
		switch (*fmt) {
     b0a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     b0e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     b12:	f200 813d 	bhi.w	d90 <cbvprintf_package+0x390>
     b16:	f20f 0e08 	addw	lr, pc, #8
     b1a:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     b1e:	bf00      	nop
     b20:	00000adf 	.word	0x00000adf
     b24:	00000d91 	.word	0x00000d91
     b28:	00000d91 	.word	0x00000d91
     b2c:	00000d91 	.word	0x00000d91
     b30:	00000d91 	.word	0x00000d91
     b34:	00000d91 	.word	0x00000d91
     b38:	00000d91 	.word	0x00000d91
     b3c:	00000d91 	.word	0x00000d91
     b40:	00000d91 	.word	0x00000d91
     b44:	00000d91 	.word	0x00000d91
     b48:	00000d91 	.word	0x00000d91
     b4c:	00000d91 	.word	0x00000d91
     b50:	00000c33 	.word	0x00000c33
     b54:	00000d91 	.word	0x00000d91
     b58:	00000d91 	.word	0x00000d91
     b5c:	00000d91 	.word	0x00000d91
     b60:	00000d91 	.word	0x00000d91
     b64:	00000d91 	.word	0x00000d91
     b68:	00000d91 	.word	0x00000d91
     b6c:	00000d91 	.word	0x00000d91
     b70:	00000d91 	.word	0x00000d91
     b74:	00000c51 	.word	0x00000c51
     b78:	00000d91 	.word	0x00000d91
     b7c:	00000c33 	.word	0x00000c33
     b80:	00000c33 	.word	0x00000c33
     b84:	00000c51 	.word	0x00000c51
     b88:	00000c51 	.word	0x00000c51
     b8c:	00000c51 	.word	0x00000c51
     b90:	00000adf 	.word	0x00000adf
     b94:	00000c33 	.word	0x00000c33
     b98:	00000c81 	.word	0x00000c81
     b9c:	00000d91 	.word	0x00000d91
     ba0:	00000adf 	.word	0x00000adf
     ba4:	00000d91 	.word	0x00000d91
     ba8:	00000c87 	.word	0x00000c87
     bac:	00000c33 	.word	0x00000c33
     bb0:	00000c87 	.word	0x00000c87
     bb4:	00000d91 	.word	0x00000d91
     bb8:	00000d91 	.word	0x00000d91
     bbc:	00000c87 	.word	0x00000c87
     bc0:	00000ab5 	.word	0x00000ab5
     bc4:	00000c33 	.word	0x00000c33
     bc8:	00000d91 	.word	0x00000d91
     bcc:	00000d91 	.word	0x00000d91
     bd0:	00000c33 	.word	0x00000c33
     bd4:	00000d91 	.word	0x00000d91
     bd8:	00000ab5 	.word	0x00000ab5
     bdc:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     be0:	f04f 0e01 	mov.w	lr, #1
     be4:	fa5f fc8c 	uxtb.w	ip, ip
     be8:	fa0e fc0c 	lsl.w	ip, lr, ip
     bec:	f64f 7eda 	movw	lr, #65498	; 0xffda
     bf0:	ea1c 0f0e 	tst.w	ip, lr
     bf4:	f47f af73 	bne.w	ade <cbvprintf_package+0xde>
     bf8:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
     bfc:	d128      	bne.n	c50 <cbvprintf_package+0x250>
     bfe:	f01c 0101 	ands.w	r1, ip, #1
     c02:	f43f af6c 	beq.w	ade <cbvprintf_package+0xde>
		buf = (void *) ROUND_UP(buf, align);
     c06:	3c01      	subs	r4, #1
     c08:	4444      	add	r4, r8
     c0a:	f1c8 0c00 	rsb	ip, r8, #0
     c0e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     c12:	b135      	cbz	r5, c22 <cbvprintf_package+0x222>
     c14:	f8dd c000 	ldr.w	ip, [sp]
     c18:	ebac 0c05 	sub.w	ip, ip, r5
     c1c:	44a4      	add	ip, r4
     c1e:	45b4      	cmp	ip, r6
     c20:	d825      	bhi.n	c6e <cbvprintf_package+0x26e>
		if (*fmt == 's') {
     c22:	2873      	cmp	r0, #115	; 0x73
     c24:	d179      	bne.n	d1a <cbvprintf_package+0x31a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c26:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     c28:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c2c:	3801      	subs	r0, #1
     c2e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     c30:	e70d      	b.n	a4e <cbvprintf_package+0x4e>
			if (fmt[-1] == 'l') {
     c32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
     c36:	296c      	cmp	r1, #108	; 0x6c
     c38:	d127      	bne.n	c8a <cbvprintf_package+0x28a>
				if (fmt[-2] == 'l') {
     c3a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     c3e:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     c40:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
     c44:	d023      	beq.n	c8e <cbvprintf_package+0x28e>
			align = VA_STACK_ALIGN(void *);
     c46:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     c4a:	f8cd 8000 	str.w	r8, [sp]
     c4e:	e7da      	b.n	c06 <cbvprintf_package+0x206>
				v.ld = va_arg(ap, long double);
     c50:	f109 0907 	add.w	r9, r9, #7
     c54:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
     c58:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     c5a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
			buf = (void *) ROUND_UP(buf, align);
     c5e:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     c62:	b15d      	cbz	r5, c7c <cbvprintf_package+0x27c>
				if (BUF_OFFSET + size > len) {
     c64:	f8dd e014 	ldr.w	lr, [sp, #20]
     c68:	44a6      	add	lr, r4
     c6a:	45b6      	cmp	lr, r6
     c6c:	d904      	bls.n	c78 <cbvprintf_package+0x278>
					return -ENOSPC;
     c6e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     c72:	b00d      	add	sp, #52	; 0x34
     c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     c78:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
     c7c:	3408      	adds	r4, #8
			parsing = false;
     c7e:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
     c80:	f04f 0808 	mov.w	r8, #8
     c84:	e718      	b.n	ab8 <cbvprintf_package+0xb8>
			parsing = false;
     c86:	2100      	movs	r1, #0
     c88:	e7dd      	b.n	c46 <cbvprintf_package+0x246>
			parsing = false;
     c8a:	2100      	movs	r1, #0
     c8c:	e7bb      	b.n	c06 <cbvprintf_package+0x206>
					align = VA_STACK_ALIGN(long long);
     c8e:	f04f 0808 	mov.w	r8, #8
     c92:	e7da      	b.n	c4a <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     c94:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c96:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     c9a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     c9e:	e6ea      	b.n	a76 <cbvprintf_package+0x76>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     ca0:	2a0f      	cmp	r2, #15
     ca2:	d90c      	bls.n	cbe <cbvprintf_package+0x2be>
					__ASSERT(false, "str_ptr_pos[] too small");
     ca4:	492d      	ldr	r1, [pc, #180]	; (d5c <cbvprintf_package+0x35c>)
     ca6:	4a2e      	ldr	r2, [pc, #184]	; (d60 <cbvprintf_package+0x360>)
     ca8:	482e      	ldr	r0, [pc, #184]	; (d64 <cbvprintf_package+0x364>)
     caa:	f240 13f5 	movw	r3, #501	; 0x1f5
     cae:	f007 ffe0 	bl	8c72 <assert_print>
     cb2:	482f      	ldr	r0, [pc, #188]	; (d70 <cbvprintf_package+0x370>)
     cb4:	f007 ffdd 	bl	8c72 <assert_print>
     cb8:	f240 11f5 	movw	r1, #501	; 0x1f5
     cbc:	e6f0      	b.n	aa0 <cbvprintf_package+0xa0>
				if (buf0 != NULL) {
     cbe:	b1cd      	cbz	r5, cf4 <cbvprintf_package+0x2f4>
					str_ptr_pos[s_idx] = s_ptr_idx;
     cc0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
     cc4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     cc8:	44ee      	add	lr, sp
     cca:	f1bc 0f00 	cmp.w	ip, #0
     cce:	d00b      	beq.n	ce8 <cbvprintf_package+0x2e8>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     cd0:	f060 007f 	orn	r0, r0, #127	; 0x7f
     cd4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     cd8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     cdc:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     cde:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     ce2:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     ce4:	9005      	str	r0, [sp, #20]
     ce6:	e6fa      	b.n	ade <cbvprintf_package+0xde>
					str_ptr_pos[s_idx] = s_ptr_idx;
     ce8:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     cec:	9803      	ldr	r0, [sp, #12]
     cee:	3001      	adds	r0, #1
     cf0:	9003      	str	r0, [sp, #12]
     cf2:	e7f3      	b.n	cdc <cbvprintf_package+0x2dc>
				} else if (is_ro || rws_pos_en) {
     cf4:	f1bc 0f00 	cmp.w	ip, #0
     cf8:	d101      	bne.n	cfe <cbvprintf_package+0x2fe>
     cfa:	9801      	ldr	r0, [sp, #4]
     cfc:	b108      	cbz	r0, d02 <cbvprintf_package+0x302>
					len += 1;
     cfe:	3601      	adds	r6, #1
     d00:	e7ec      	b.n	cdc <cbvprintf_package+0x2dc>
					len += strlen(s) + 1 + 1;
     d02:	4638      	mov	r0, r7
     d04:	e9cd 3206 	strd	r3, r2, [sp, #24]
     d08:	9105      	str	r1, [sp, #20]
     d0a:	f008 f878 	bl	8dfe <strlen>
     d0e:	3602      	adds	r6, #2
     d10:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     d14:	9905      	ldr	r1, [sp, #20]
     d16:	4406      	add	r6, r0
     d18:	e7e0      	b.n	cdc <cbvprintf_package+0x2dc>
		} else if (size == sizeof(int)) {
     d1a:	9800      	ldr	r0, [sp, #0]
     d1c:	2804      	cmp	r0, #4
     d1e:	d109      	bne.n	d34 <cbvprintf_package+0x334>
			int v = va_arg(ap, int);
     d20:	f109 0004 	add.w	r0, r9, #4
			if (buf0 != NULL) {
     d24:	b11d      	cbz	r5, d2e <cbvprintf_package+0x32e>
			int v = va_arg(ap, int);
     d26:	f8d9 c000 	ldr.w	ip, [r9]
     d2a:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
     d2e:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     d30:	4681      	mov	r9, r0
     d32:	e6d4      	b.n	ade <cbvprintf_package+0xde>
		} else if (size == sizeof(long long)) {
     d34:	9800      	ldr	r0, [sp, #0]
     d36:	2808      	cmp	r0, #8
     d38:	d11c      	bne.n	d74 <cbvprintf_package+0x374>
			long long v = va_arg(ap, long long);
     d3a:	f109 0007 	add.w	r0, r9, #7
     d3e:	f020 0007 	bic.w	r0, r0, #7
     d42:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
     d46:	b11d      	cbz	r5, d50 <cbvprintf_package+0x350>
			long long v = va_arg(ap, long long);
     d48:	e9d0 bc00 	ldrd	fp, ip, [r0]
     d4c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     d50:	3408      	adds	r4, #8
     d52:	e6c4      	b.n	ade <cbvprintf_package+0xde>
     d54:	00009584 	.word	0x00009584
     d58:	0000b698 	.word	0x0000b698
     d5c:	00009cc5 	.word	0x00009cc5
     d60:	00009e2f 	.word	0x00009e2f
     d64:	00009bef 	.word	0x00009bef
     d68:	00009e5d 	.word	0x00009e5d
     d6c:	00009ead 	.word	0x00009ead
     d70:	00009e7e 	.word	0x00009e7e
			__ASSERT(false, "unexpected size %u", size);
     d74:	4a3b      	ldr	r2, [pc, #236]	; (e64 <cbvprintf_package+0x464>)
     d76:	493c      	ldr	r1, [pc, #240]	; (e68 <cbvprintf_package+0x468>)
     d78:	483c      	ldr	r0, [pc, #240]	; (e6c <cbvprintf_package+0x46c>)
     d7a:	f240 2331 	movw	r3, #561	; 0x231
     d7e:	f007 ff78 	bl	8c72 <assert_print>
     d82:	9900      	ldr	r1, [sp, #0]
     d84:	483a      	ldr	r0, [pc, #232]	; (e70 <cbvprintf_package+0x470>)
     d86:	f007 ff74 	bl	8c72 <assert_print>
     d8a:	f240 2131 	movw	r1, #561	; 0x231
     d8e:	e687      	b.n	aa0 <cbvprintf_package+0xa0>
			parsing = false;
     d90:	2100      	movs	r1, #0
     d92:	e6a4      	b.n	ade <cbvprintf_package+0xde>
	if (buf0 == NULL) {
     d94:	b91d      	cbnz	r5, d9e <cbvprintf_package+0x39e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     d96:	f1a6 0408 	sub.w	r4, r6, #8
     d9a:	1860      	adds	r0, r4, r1
     d9c:	e769      	b.n	c72 <cbvprintf_package+0x272>
	if (rws_pos_en) {
     d9e:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
     da0:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
     da4:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     da8:	b90b      	cbnz	r3, dae <cbvprintf_package+0x3ae>
     daa:	4608      	mov	r0, r1
     dac:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
     dae:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
     db2:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     db4:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     db6:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     dba:	f1ba 0f00 	cmp.w	sl, #0
     dbe:	d006      	beq.n	dce <cbvprintf_package+0x3ce>
     dc0:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     dc2:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     dc6:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     dca:	4562      	cmp	r2, ip
     dcc:	d106      	bne.n	ddc <cbvprintf_package+0x3dc>
     dce:	f10d 0820 	add.w	r8, sp, #32
     dd2:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     dd6:	f1c5 0b01 	rsb	fp, r5, #1
     dda:	e035      	b.n	e48 <cbvprintf_package+0x448>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     ddc:	f810 1b01 	ldrb.w	r1, [r0], #1
     de0:	060b      	lsls	r3, r1, #24
     de2:	d508      	bpl.n	df6 <cbvprintf_package+0x3f6>
			if (BUF_OFFSET + 1 > len) {
     de4:	eb04 080e 	add.w	r8, r4, lr
     de8:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     dea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     dee:	f63f af3e 	bhi.w	c6e <cbvprintf_package+0x26e>
			*buf++ = pos;
     df2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     df6:	f10c 0c01 	add.w	ip, ip, #1
     dfa:	e7e6      	b.n	dca <cbvprintf_package+0x3ca>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     dfc:	f1ba 0f00 	cmp.w	sl, #0
     e00:	d003      	beq.n	e0a <cbvprintf_package+0x40a>
     e02:	f998 2000 	ldrsb.w	r2, [r8]
     e06:	2a00      	cmp	r2, #0
     e08:	db1c      	blt.n	e44 <cbvprintf_package+0x444>
		if (rws_pos_en) {
     e0a:	9b01      	ldr	r3, [sp, #4]
     e0c:	bb03      	cbnz	r3, e50 <cbvprintf_package+0x450>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     e0e:	f898 2000 	ldrb.w	r2, [r8]
     e12:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     e16:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     e1a:	4638      	mov	r0, r7
     e1c:	f007 ffef 	bl	8dfe <strlen>
     e20:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     e22:	eb04 010b 	add.w	r1, r4, fp
     e26:	4411      	add	r1, r2
     e28:	42b1      	cmp	r1, r6
     e2a:	f63f af20 	bhi.w	c6e <cbvprintf_package+0x26e>
		*buf++ = str_ptr_pos[i];
     e2e:	f898 1000 	ldrb.w	r1, [r8]
     e32:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     e36:	4639      	mov	r1, r7
     e38:	4620      	mov	r0, r4
     e3a:	9200      	str	r2, [sp, #0]
     e3c:	f007 fffb 	bl	8e36 <memcpy>
		buf += size;
     e40:	9a00      	ldr	r2, [sp, #0]
     e42:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     e44:	f108 0801 	add.w	r8, r8, #1
     e48:	45c8      	cmp	r8, r9
     e4a:	d1d7      	bne.n	dfc <cbvprintf_package+0x3fc>
	return BUF_OFFSET;
     e4c:	1b60      	subs	r0, r4, r5
     e4e:	e710      	b.n	c72 <cbvprintf_package+0x272>
			size = 0;
     e50:	2200      	movs	r2, #0
     e52:	e7e6      	b.n	e22 <cbvprintf_package+0x422>
		return -EFAULT;
     e54:	f06f 000d 	mvn.w	r0, #13
     e58:	e70b      	b.n	c72 <cbvprintf_package+0x272>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     e5a:	2907      	cmp	r1, #7
     e5c:	f63f adec 	bhi.w	a38 <cbvprintf_package+0x38>
     e60:	e705      	b.n	c6e <cbvprintf_package+0x26e>
     e62:	bf00      	nop
     e64:	00009e2f 	.word	0x00009e2f
     e68:	00009cc5 	.word	0x00009cc5
     e6c:	00009bef 	.word	0x00009bef
     e70:	00009e98 	.word	0x00009e98

00000e74 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     e74:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     e76:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     e78:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     e7a:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     e7e:	2c03      	cmp	r4, #3
{
     e80:	4605      	mov	r5, r0
	switch (method) {
     e82:	d002      	beq.n	e8a <sys_notify_finalize+0x16>
     e84:	b12c      	cbz	r4, e92 <sys_notify_finalize+0x1e>
     e86:	2000      	movs	r0, #0
     e88:	e000      	b.n	e8c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     e8a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     e8c:	2300      	movs	r3, #0
     e8e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     e90:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     e92:	4a05      	ldr	r2, [pc, #20]	; (ea8 <sys_notify_finalize+0x34>)
     e94:	4905      	ldr	r1, [pc, #20]	; (eac <sys_notify_finalize+0x38>)
     e96:	4806      	ldr	r0, [pc, #24]	; (eb0 <sys_notify_finalize+0x3c>)
     e98:	2345      	movs	r3, #69	; 0x45
     e9a:	f007 feea 	bl	8c72 <assert_print>
     e9e:	4802      	ldr	r0, [pc, #8]	; (ea8 <sys_notify_finalize+0x34>)
     ea0:	2145      	movs	r1, #69	; 0x45
     ea2:	f007 fedf 	bl	8c64 <assert_post_action>
     ea6:	e7ee      	b.n	e86 <sys_notify_finalize+0x12>
     ea8:	00009ec4 	.word	0x00009ec4
     eac:	00009cc5 	.word	0x00009cc5
     eb0:	00009bef 	.word	0x00009bef

00000eb4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     eb4:	4b01      	ldr	r3, [pc, #4]	; (ebc <__printk_hook_install+0x8>)
     eb6:	6018      	str	r0, [r3, #0]
}
     eb8:	4770      	bx	lr
     eba:	bf00      	nop
     ebc:	20000098 	.word	0x20000098

00000ec0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     ec4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     ec8:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     eca:	f019 0f08 	tst.w	r9, #8
{
     ece:	4604      	mov	r4, r0
	if (processing) {
     ed0:	d022      	beq.n	f18 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
     ed2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ed4:	bf0c      	ite	eq
     ed6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     eda:	f049 0920 	orrne.w	r9, r9, #32
     ede:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     ee2:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     ee4:	4620      	mov	r0, r4
     ee6:	f005 f9dd 	bl	62a4 <z_spin_unlock_valid>
     eea:	b968      	cbnz	r0, f08 <process_event+0x48>
     eec:	4a9c      	ldr	r2, [pc, #624]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
     eee:	499d      	ldr	r1, [pc, #628]	; (1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
     ef0:	489d      	ldr	r0, [pc, #628]	; (1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
     ef2:	23b9      	movs	r3, #185	; 0xb9
     ef4:	f007 febd 	bl	8c72 <assert_print>
     ef8:	489c      	ldr	r0, [pc, #624]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
     efa:	4621      	mov	r1, r4
     efc:	f007 feb9 	bl	8c72 <assert_print>
     f00:	4897      	ldr	r0, [pc, #604]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
     f02:	21b9      	movs	r1, #185	; 0xb9
     f04:	f007 feae 	bl	8c64 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     f08:	9b00      	ldr	r3, [sp, #0]
     f0a:	f383 8811 	msr	BASEPRI, r3
     f0e:	f3bf 8f6f 	isb	sy
}
     f12:	b003      	add	sp, #12
     f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     f18:	4f95      	ldr	r7, [pc, #596]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
     f1a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f1e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     f22:	2902      	cmp	r1, #2
     f24:	d10f      	bne.n	f46 <process_event+0x86>
			evt = process_recheck(mgr);
     f26:	4620      	mov	r0, r4
     f28:	f007 fdb6 	bl	8a98 <process_recheck>
		if (evt == EVT_NOP) {
     f2c:	2800      	cmp	r0, #0
     f2e:	d0d8      	beq.n	ee2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     f30:	3801      	subs	r0, #1
     f32:	2804      	cmp	r0, #4
     f34:	f200 8104 	bhi.w	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
     f38:	e8df f010 	tbh	[pc, r0, lsl #1]
     f3c:	01020005 	.word	0x01020005
     f40:	009e0069 	.word	0x009e0069
     f44:	00d0      	.short	0x00d0
			res = mgr->last_res;
     f46:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f4a:	8ba2      	ldrh	r2, [r4, #28]
	if (res < 0) {
     f4c:	f1bb 0f00 	cmp.w	fp, #0
     f50:	da19      	bge.n	f86 <process_event+0xc6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     f52:	2600      	movs	r6, #0
		*clients = mgr->clients;
     f54:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f56:	f022 0207 	bic.w	r2, r2, #7
	list->tail = NULL;
     f5a:	e9c4 6600 	strd	r6, r6, [r4]
     f5e:	f042 0201 	orr.w	r2, r2, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f62:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f64:	8ba3      	ldrh	r3, [r4, #28]
     f66:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f6a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f6c:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
     f6e:	d003      	beq.n	f78 <process_event+0xb8>
		if (do_monitors
     f70:	68a2      	ldr	r2, [r4, #8]
     f72:	2a00      	cmp	r2, #0
     f74:	f040 810c 	bne.w	1190 <CONFIG_FPROTECT_BLOCK_SIZE+0x190>
		    || !sys_slist_is_empty(&clients)
     f78:	b915      	cbnz	r5, f80 <process_event+0xc0>
		    || (transit != NULL)) {
     f7a:	2e00      	cmp	r6, #0
     f7c:	f000 8151 	beq.w	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
     f80:	f04f 0a00 	mov.w	sl, #0
     f84:	e106      	b.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f86:	f002 0307 	and.w	r3, r2, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     f8a:	1f59      	subs	r1, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     f8c:	2901      	cmp	r1, #1
     f8e:	d81f      	bhi.n	fd0 <process_event+0x110>
	list->head = NULL;
     f90:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f92:	f022 0207 	bic.w	r2, r2, #7
		if (state == ONOFF_STATE_TO_ON) {
     f96:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     f98:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f9a:	b292      	uxth	r2, r2
	list->tail = NULL;
     f9c:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     fa0:	d10a      	bne.n	fb8 <process_event+0xf8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     fa2:	b13d      	cbz	r5, fb4 <process_event+0xf4>
     fa4:	8be3      	ldrh	r3, [r4, #30]
     fa6:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     fa8:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     faa:	3301      	adds	r3, #1
     fac:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     fae:	2900      	cmp	r1, #0
     fb0:	d1fa      	bne.n	fa8 <process_event+0xe8>
     fb2:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fb4:	f042 0202 	orr.w	r2, r2, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     fb8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     fba:	4620      	mov	r0, r4
     fbc:	f007 fd6c 	bl	8a98 <process_recheck>
     fc0:	4606      	mov	r6, r0
     fc2:	2800      	cmp	r0, #0
     fc4:	d0ce      	beq.n	f64 <process_event+0xa4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fc6:	f042 0220 	orr.w	r2, r2, #32
     fca:	83a2      	strh	r2, [r4, #28]
		onoff_transition_fn transit = NULL;
     fcc:	2600      	movs	r6, #0
     fce:	e7c9      	b.n	f64 <process_event+0xa4>
	} else if (state == ONOFF_STATE_TO_OFF) {
     fd0:	2b04      	cmp	r3, #4
     fd2:	d10d      	bne.n	ff0 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fd4:	f022 0207 	bic.w	r2, r2, #7
     fd8:	b292      	uxth	r2, r2
	mgr->flags = (state & ONOFF_STATE_MASK)
     fda:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     fdc:	4620      	mov	r0, r4
     fde:	f007 fd5b 	bl	8a98 <process_recheck>
     fe2:	4605      	mov	r5, r0
     fe4:	b188      	cbz	r0, 100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fe6:	f042 0220 	orr.w	r2, r2, #32
     fea:	83a2      	strh	r2, [r4, #28]
     fec:	2500      	movs	r5, #0
     fee:	e7ed      	b.n	fcc <process_event+0x10c>
		__ASSERT_NO_MSG(false);
     ff0:	4960      	ldr	r1, [pc, #384]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
     ff2:	f240 131b 	movw	r3, #283	; 0x11b
     ff6:	463a      	mov	r2, r7
     ff8:	4640      	mov	r0, r8
     ffa:	f007 fe3a 	bl	8c72 <assert_print>
     ffe:	f240 111b 	movw	r1, #283	; 0x11b
    1002:	4638      	mov	r0, r7
    1004:	f007 fe2e 	bl	8c64 <assert_post_action>
    1008:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    100a:	462e      	mov	r6, r5
    100c:	e7aa      	b.n	f64 <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    100e:	f1b9 0f00 	cmp.w	r9, #0
    1012:	d00b      	beq.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1014:	4958      	ldr	r1, [pc, #352]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
    1016:	4640      	mov	r0, r8
    1018:	f44f 73ab 	mov.w	r3, #342	; 0x156
    101c:	463a      	mov	r2, r7
    101e:	f007 fe28 	bl	8c72 <assert_print>
    1022:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1026:	4638      	mov	r0, r7
    1028:	f007 fe1c 	bl	8c64 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    102c:	6823      	ldr	r3, [r4, #0]
    102e:	b95b      	cbnz	r3, 1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    1030:	4952      	ldr	r1, [pc, #328]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    1032:	4640      	mov	r0, r8
    1034:	f240 1357 	movw	r3, #343	; 0x157
    1038:	463a      	mov	r2, r7
    103a:	f007 fe1a 	bl	8c72 <assert_print>
    103e:	f240 1157 	movw	r1, #343	; 0x157
    1042:	4638      	mov	r0, r7
    1044:	f007 fe0e 	bl	8c64 <assert_post_action>
			transit = mgr->transitions->start;
    1048:	6923      	ldr	r3, [r4, #16]
    104a:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    104c:	b95e      	cbnz	r6, 1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    104e:	494c      	ldr	r1, [pc, #304]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    1050:	4640      	mov	r0, r8
    1052:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1056:	463a      	mov	r2, r7
    1058:	f007 fe0b 	bl	8c72 <assert_print>
    105c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1060:	4638      	mov	r0, r7
    1062:	f007 fdff 	bl	8c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1066:	8ba3      	ldrh	r3, [r4, #28]
    1068:	f023 0307 	bic.w	r3, r3, #7
    106c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1070:	83a3      	strh	r3, [r4, #28]
}
    1072:	2500      	movs	r5, #0
		res = 0;
    1074:	46ab      	mov	fp, r5
}
    1076:	e775      	b.n	f64 <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1078:	f1b9 0f02 	cmp.w	r9, #2
    107c:	d00b      	beq.n	1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
    107e:	4941      	ldr	r1, [pc, #260]	; (1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>)
    1080:	4640      	mov	r0, r8
    1082:	f240 135d 	movw	r3, #349	; 0x15d
    1086:	463a      	mov	r2, r7
    1088:	f007 fdf3 	bl	8c72 <assert_print>
    108c:	f240 115d 	movw	r1, #349	; 0x15d
    1090:	4638      	mov	r0, r7
    1092:	f007 fde7 	bl	8c64 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1096:	8be3      	ldrh	r3, [r4, #30]
    1098:	b15b      	cbz	r3, 10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
    109a:	493b      	ldr	r1, [pc, #236]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
    109c:	4640      	mov	r0, r8
    109e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    10a2:	463a      	mov	r2, r7
    10a4:	f007 fde5 	bl	8c72 <assert_print>
    10a8:	f44f 71af 	mov.w	r1, #350	; 0x15e
    10ac:	4638      	mov	r0, r7
    10ae:	f007 fdd9 	bl	8c64 <assert_post_action>
			transit = mgr->transitions->stop;
    10b2:	6923      	ldr	r3, [r4, #16]
    10b4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    10b6:	b95e      	cbnz	r6, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>
    10b8:	4931      	ldr	r1, [pc, #196]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    10ba:	4640      	mov	r0, r8
    10bc:	f240 1361 	movw	r3, #353	; 0x161
    10c0:	463a      	mov	r2, r7
    10c2:	f007 fdd6 	bl	8c72 <assert_print>
    10c6:	f240 1161 	movw	r1, #353	; 0x161
    10ca:	4638      	mov	r0, r7
    10cc:	f007 fdca 	bl	8c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10d0:	8ba3      	ldrh	r3, [r4, #28]
    10d2:	f023 0307 	bic.w	r3, r3, #7
    10d6:	f043 0304 	orr.w	r3, r3, #4
    10da:	e7c9      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10dc:	f1b9 0f01 	cmp.w	r9, #1
    10e0:	d00b      	beq.n	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
    10e2:	492a      	ldr	r1, [pc, #168]	; (118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>)
    10e4:	4640      	mov	r0, r8
    10e6:	f44f 73b2 	mov.w	r3, #356	; 0x164
    10ea:	463a      	mov	r2, r7
    10ec:	f007 fdc1 	bl	8c72 <assert_print>
    10f0:	f44f 71b2 	mov.w	r1, #356	; 0x164
    10f4:	4638      	mov	r0, r7
    10f6:	f007 fdb5 	bl	8c64 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    10fa:	6823      	ldr	r3, [r4, #0]
    10fc:	b95b      	cbnz	r3, 1116 <CONFIG_FPROTECT_BLOCK_SIZE+0x116>
    10fe:	491f      	ldr	r1, [pc, #124]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    1100:	4640      	mov	r0, r8
    1102:	f240 1365 	movw	r3, #357	; 0x165
    1106:	463a      	mov	r2, r7
    1108:	f007 fdb3 	bl	8c72 <assert_print>
    110c:	f240 1165 	movw	r1, #357	; 0x165
    1110:	4638      	mov	r0, r7
    1112:	f007 fda7 	bl	8c64 <assert_post_action>
			transit = mgr->transitions->reset;
    1116:	6923      	ldr	r3, [r4, #16]
    1118:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    111a:	b95e      	cbnz	r6, 1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    111c:	4918      	ldr	r1, [pc, #96]	; (1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>)
    111e:	4640      	mov	r0, r8
    1120:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1124:	463a      	mov	r2, r7
    1126:	f007 fda4 	bl	8c72 <assert_print>
    112a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    112e:	4638      	mov	r0, r7
    1130:	f007 fd98 	bl	8c64 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1134:	8ba3      	ldrh	r3, [r4, #28]
    1136:	f023 0307 	bic.w	r3, r3, #7
    113a:	f043 0305 	orr.w	r3, r3, #5
    113e:	e797      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
			__ASSERT_NO_MSG(false);
    1140:	490c      	ldr	r1, [pc, #48]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
    1142:	f240 136b 	movw	r3, #363	; 0x16b
    1146:	463a      	mov	r2, r7
    1148:	4640      	mov	r0, r8
    114a:	f007 fd92 	bl	8c72 <assert_print>
    114e:	2500      	movs	r5, #0
    1150:	f240 116b 	movw	r1, #363	; 0x16b
    1154:	4638      	mov	r0, r7
    1156:	f007 fd85 	bl	8c64 <assert_post_action>
		onoff_transition_fn transit = NULL;
    115a:	462e      	mov	r6, r5
    115c:	e78a      	b.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
    115e:	bf00      	nop
    1160:	00009f8a 	.word	0x00009f8a
    1164:	00009fb7 	.word	0x00009fb7
    1168:	00009bef 	.word	0x00009bef
    116c:	00009fce 	.word	0x00009fce
    1170:	00009ee7 	.word	0x00009ee7
    1174:	00009cc5 	.word	0x00009cc5
    1178:	00009f09 	.word	0x00009f09
    117c:	00009f15 	.word	0x00009f15
    1180:	00009f38 	.word	0x00009f38
    1184:	00009f4f 	.word	0x00009f4f
    1188:	00009f65 	.word	0x00009f65
    118c:	00009f74 	.word	0x00009f74
				   && !sys_slist_is_empty(&mgr->monitors);
    1190:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1194:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1198:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    119c:	83a3      	strh	r3, [r4, #28]
    119e:	4648      	mov	r0, r9
    11a0:	f005 f880 	bl	62a4 <z_spin_unlock_valid>
    11a4:	b968      	cbnz	r0, 11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
    11a6:	4a37      	ldr	r2, [pc, #220]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    11a8:	4937      	ldr	r1, [pc, #220]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    11aa:	23b9      	movs	r3, #185	; 0xb9
    11ac:	4640      	mov	r0, r8
    11ae:	f007 fd60 	bl	8c72 <assert_print>
    11b2:	4836      	ldr	r0, [pc, #216]	; (128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>)
    11b4:	4649      	mov	r1, r9
    11b6:	f007 fd5c 	bl	8c72 <assert_print>
    11ba:	4832      	ldr	r0, [pc, #200]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    11bc:	21b9      	movs	r1, #185	; 0xb9
    11be:	f007 fd51 	bl	8c64 <assert_post_action>
    11c2:	9b00      	ldr	r3, [sp, #0]
    11c4:	f383 8811 	msr	BASEPRI, r3
    11c8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    11cc:	f1ba 0f00 	cmp.w	sl, #0
    11d0:	d136      	bne.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
	while (!sys_slist_is_empty(list)) {
    11d2:	2d00      	cmp	r5, #0
    11d4:	d146      	bne.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
			if (transit != NULL) {
    11d6:	b116      	cbz	r6, 11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
				transit(mgr, transition_complete);
    11d8:	492d      	ldr	r1, [pc, #180]	; (1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    11da:	4620      	mov	r0, r4
    11dc:	47b0      	blx	r6
	__asm__ volatile(
    11de:	f04f 0240 	mov.w	r2, #64	; 0x40
    11e2:	f3ef 8311 	mrs	r3, BASEPRI
    11e6:	f382 8812 	msr	BASEPRI_MAX, r2
    11ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    11ee:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    11f0:	9300      	str	r3, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    11f2:	f005 f849 	bl	6288 <z_spin_lock_valid>
    11f6:	b968      	cbnz	r0, 1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    11f8:	4a22      	ldr	r2, [pc, #136]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    11fa:	4926      	ldr	r1, [pc, #152]	; (1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>)
    11fc:	238e      	movs	r3, #142	; 0x8e
    11fe:	4640      	mov	r0, r8
    1200:	f007 fd37 	bl	8c72 <assert_print>
    1204:	4824      	ldr	r0, [pc, #144]	; (1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    1206:	4649      	mov	r1, r9
    1208:	f007 fd33 	bl	8c72 <assert_print>
    120c:	481d      	ldr	r0, [pc, #116]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    120e:	218e      	movs	r1, #142	; 0x8e
    1210:	f007 fd28 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    1214:	4648      	mov	r0, r9
    1216:	f005 f855 	bl	62c4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    121a:	8ba3      	ldrh	r3, [r4, #28]
    121c:	f023 0308 	bic.w	r3, r3, #8
    1220:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1222:	8ba3      	ldrh	r3, [r4, #28]
    1224:	06da      	lsls	r2, r3, #27
    1226:	d525      	bpl.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1228:	f023 0310 	bic.w	r3, r3, #16
    122c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    122e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1230:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1234:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1238:	2900      	cmp	r1, #0
    123a:	f47f ae72 	bne.w	f22 <process_event+0x62>
out:
    123e:	e650      	b.n	ee2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1240:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1242:	2900      	cmp	r1, #0
    1244:	d0c5      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
	return node->next;
    1246:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    124a:	684b      	ldr	r3, [r1, #4]
    124c:	9a01      	ldr	r2, [sp, #4]
    124e:	469c      	mov	ip, r3
    1250:	4620      	mov	r0, r4
    1252:	465b      	mov	r3, fp
    1254:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1256:	f1ba 0f00 	cmp.w	sl, #0
    125a:	d0ba      	beq.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
    125c:	4651      	mov	r1, sl
    125e:	f8da a000 	ldr.w	sl, [sl]
    1262:	e7f2      	b.n	124a <CONFIG_FPROTECT_BLOCK_SIZE+0x24a>
    1264:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1266:	9a01      	ldr	r2, [sp, #4]
    1268:	682d      	ldr	r5, [r5, #0]
    126a:	465b      	mov	r3, fp
    126c:	4620      	mov	r0, r4
    126e:	f007 fc2f 	bl	8ad0 <notify_one>
    1272:	e7ae      	b.n	11d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1274:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1278:	bf1e      	ittt	ne
    127a:	f023 0320 	bicne.w	r3, r3, #32
    127e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1280:	2102      	movne	r1, #2
    1282:	e7d5      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
    1284:	00009f8a 	.word	0x00009f8a
    1288:	00009fb7 	.word	0x00009fb7
    128c:	00009fce 	.word	0x00009fce
    1290:	0000129d 	.word	0x0000129d
    1294:	00009fe3 	.word	0x00009fe3
    1298:	00009ff8 	.word	0x00009ff8

0000129c <transition_complete>:
{
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	4604      	mov	r4, r0
    12a0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    12a2:	f100 0614 	add.w	r6, r0, #20
    12a6:	f04f 0340 	mov.w	r3, #64	; 0x40
    12aa:	f3ef 8711 	mrs	r7, BASEPRI
    12ae:	f383 8812 	msr	BASEPRI_MAX, r3
    12b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12b6:	4630      	mov	r0, r6
    12b8:	f004 ffe6 	bl	6288 <z_spin_lock_valid>
    12bc:	b968      	cbnz	r0, 12da <transition_complete+0x3e>
    12be:	4a0c      	ldr	r2, [pc, #48]	; (12f0 <transition_complete+0x54>)
    12c0:	490c      	ldr	r1, [pc, #48]	; (12f4 <transition_complete+0x58>)
    12c2:	480d      	ldr	r0, [pc, #52]	; (12f8 <transition_complete+0x5c>)
    12c4:	238e      	movs	r3, #142	; 0x8e
    12c6:	f007 fcd4 	bl	8c72 <assert_print>
    12ca:	480c      	ldr	r0, [pc, #48]	; (12fc <transition_complete+0x60>)
    12cc:	4631      	mov	r1, r6
    12ce:	f007 fcd0 	bl	8c72 <assert_print>
    12d2:	4807      	ldr	r0, [pc, #28]	; (12f0 <transition_complete+0x54>)
    12d4:	218e      	movs	r1, #142	; 0x8e
    12d6:	f007 fcc5 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    12da:	4630      	mov	r0, r6
    12dc:	f004 fff2 	bl	62c4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    12e0:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    12e2:	463a      	mov	r2, r7
    12e4:	4620      	mov	r0, r4
    12e6:	2101      	movs	r1, #1
}
    12e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    12ec:	f7ff bde8 	b.w	ec0 <process_event>
    12f0:	00009f8a 	.word	0x00009f8a
    12f4:	00009fe3 	.word	0x00009fe3
    12f8:	00009bef 	.word	0x00009bef
    12fc:	00009ff8 	.word	0x00009ff8

00001300 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1304:	4604      	mov	r4, r0
    1306:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1308:	f007 fbf8 	bl	8afc <validate_args>

	if (rv < 0) {
    130c:	1e05      	subs	r5, r0, #0
    130e:	db61      	blt.n	13d4 <onoff_request+0xd4>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1310:	f104 0914 	add.w	r9, r4, #20
    1314:	f04f 0340 	mov.w	r3, #64	; 0x40
    1318:	f3ef 8a11 	mrs	sl, BASEPRI
    131c:	f383 8812 	msr	BASEPRI_MAX, r3
    1320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1324:	4648      	mov	r0, r9
    1326:	f004 ffaf 	bl	6288 <z_spin_lock_valid>
    132a:	b968      	cbnz	r0, 1348 <onoff_request+0x48>
    132c:	4a38      	ldr	r2, [pc, #224]	; (1410 <onoff_request+0x110>)
    132e:	4939      	ldr	r1, [pc, #228]	; (1414 <onoff_request+0x114>)
    1330:	4839      	ldr	r0, [pc, #228]	; (1418 <onoff_request+0x118>)
    1332:	238e      	movs	r3, #142	; 0x8e
    1334:	f007 fc9d 	bl	8c72 <assert_print>
    1338:	4838      	ldr	r0, [pc, #224]	; (141c <onoff_request+0x11c>)
    133a:	4649      	mov	r1, r9
    133c:	f007 fc99 	bl	8c72 <assert_print>
    1340:	4833      	ldr	r0, [pc, #204]	; (1410 <onoff_request+0x110>)
    1342:	218e      	movs	r1, #142	; 0x8e
    1344:	f007 fc8e 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    1348:	4648      	mov	r0, r9
    134a:	f004 ffbb 	bl	62c4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    134e:	8be3      	ldrh	r3, [r4, #30]
    1350:	8ba6      	ldrh	r6, [r4, #28]
    1352:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1356:	4293      	cmp	r3, r2
    1358:	f006 0607 	and.w	r6, r6, #7
    135c:	d051      	beq.n	1402 <onoff_request+0x102>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    135e:	2e02      	cmp	r6, #2
	rv = state;
    1360:	4635      	mov	r5, r6
	if (state == ONOFF_STATE_ON) {
    1362:	d123      	bne.n	13ac <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1364:	3301      	adds	r3, #1
    1366:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1368:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    136c:	4648      	mov	r0, r9
    136e:	f004 ff99 	bl	62a4 <z_spin_unlock_valid>
    1372:	b968      	cbnz	r0, 1390 <onoff_request+0x90>
    1374:	4a26      	ldr	r2, [pc, #152]	; (1410 <onoff_request+0x110>)
    1376:	492a      	ldr	r1, [pc, #168]	; (1420 <onoff_request+0x120>)
    1378:	4827      	ldr	r0, [pc, #156]	; (1418 <onoff_request+0x118>)
    137a:	23b9      	movs	r3, #185	; 0xb9
    137c:	f007 fc79 	bl	8c72 <assert_print>
    1380:	4828      	ldr	r0, [pc, #160]	; (1424 <onoff_request+0x124>)
    1382:	4649      	mov	r1, r9
    1384:	f007 fc75 	bl	8c72 <assert_print>
    1388:	4821      	ldr	r0, [pc, #132]	; (1410 <onoff_request+0x110>)
    138a:	21b9      	movs	r1, #185	; 0xb9
    138c:	f007 fc6a 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    1390:	f38a 8811 	msr	BASEPRI, sl
    1394:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1398:	f1b8 0f00 	cmp.w	r8, #0
    139c:	d01a      	beq.n	13d4 <onoff_request+0xd4>
			notify_one(mgr, cli, state, 0);
    139e:	2300      	movs	r3, #0
    13a0:	4632      	mov	r2, r6
    13a2:	4639      	mov	r1, r7
    13a4:	4620      	mov	r0, r4
    13a6:	f007 fb93 	bl	8ad0 <notify_one>
    13aa:	e013      	b.n	13d4 <onoff_request+0xd4>
	} else if ((state == ONOFF_STATE_OFF)
    13ac:	2e06      	cmp	r6, #6
    13ae:	d814      	bhi.n	13da <onoff_request+0xda>
    13b0:	e8df f006 	tbb	[pc, r6]
    13b4:	13131f04 	.word	0x13131f04
    13b8:	2a04      	.short	0x2a04
    13ba:	04          	.byte	0x04
    13bb:	00          	.byte	0x00
	parent->next = child;
    13bc:	2300      	movs	r3, #0
    13be:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    13c0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    13c2:	b9db      	cbnz	r3, 13fc <onoff_request+0xfc>
	list->head = node;
    13c4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    13c8:	b9ae      	cbnz	r6, 13f6 <onoff_request+0xf6>
		process_event(mgr, EVT_RECHECK, key);
    13ca:	4652      	mov	r2, sl
    13cc:	2102      	movs	r1, #2
    13ce:	4620      	mov	r0, r4
    13d0:	f7ff fd76 	bl	ec0 <process_event>
		}
	}

	return rv;
}
    13d4:	4628      	mov	r0, r5
    13d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    13da:	4913      	ldr	r1, [pc, #76]	; (1428 <onoff_request+0x128>)
    13dc:	480e      	ldr	r0, [pc, #56]	; (1418 <onoff_request+0x118>)
    13de:	4a13      	ldr	r2, [pc, #76]	; (142c <onoff_request+0x12c>)
    13e0:	f240 13c9 	movw	r3, #457	; 0x1c9
    13e4:	f007 fc45 	bl	8c72 <assert_print>
    13e8:	4810      	ldr	r0, [pc, #64]	; (142c <onoff_request+0x12c>)
    13ea:	f240 11c9 	movw	r1, #457	; 0x1c9
    13ee:	f007 fc39 	bl	8c64 <assert_post_action>
	if (state == ONOFF_STATE_ON) {
    13f2:	f06f 0504 	mvn.w	r5, #4
    13f6:	f04f 0800 	mov.w	r8, #0
    13fa:	e7b7      	b.n	136c <onoff_request+0x6c>
	parent->next = child;
    13fc:	601f      	str	r7, [r3, #0]
	list->tail = node;
    13fe:	6067      	str	r7, [r4, #4]
}
    1400:	e7e2      	b.n	13c8 <onoff_request+0xc8>
		rv = -EAGAIN;
    1402:	f06f 050a 	mvn.w	r5, #10
    1406:	e7f6      	b.n	13f6 <onoff_request+0xf6>
	if (state == ONOFF_STATE_ON) {
    1408:	f06f 0585 	mvn.w	r5, #133	; 0x85
    140c:	e7f3      	b.n	13f6 <onoff_request+0xf6>
    140e:	bf00      	nop
    1410:	00009f8a 	.word	0x00009f8a
    1414:	00009fe3 	.word	0x00009fe3
    1418:	00009bef 	.word	0x00009bef
    141c:	00009ff8 	.word	0x00009ff8
    1420:	00009fb7 	.word	0x00009fb7
    1424:	00009fce 	.word	0x00009fce
    1428:	00009f74 	.word	0x00009f74
    142c:	00009ee7 	.word	0x00009ee7

00001430 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1430:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    1434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1438:	4604      	mov	r4, r0
    143a:	460e      	mov	r6, r1
    143c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    143e:	d36c      	bcc.n	151a <sys_heap_init+0xea>
    1440:	493d      	ldr	r1, [pc, #244]	; (1538 <sys_heap_init+0x108>)
    1442:	4a3e      	ldr	r2, [pc, #248]	; (153c <sys_heap_init+0x10c>)
    1444:	483e      	ldr	r0, [pc, #248]	; (1540 <sys_heap_init+0x110>)
    1446:	f240 13e3 	movw	r3, #483	; 0x1e3
    144a:	f007 fc12 	bl	8c72 <assert_print>
    144e:	483d      	ldr	r0, [pc, #244]	; (1544 <sys_heap_init+0x114>)
    1450:	f007 fc0f 	bl	8c72 <assert_print>
    1454:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1458:	4838      	ldr	r0, [pc, #224]	; (153c <sys_heap_init+0x10c>)
    145a:	f007 fc03 	bl	8c64 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    145e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1460:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1462:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1464:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1468:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    146c:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    146e:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1470:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1474:	d80e      	bhi.n	1494 <sys_heap_init+0x64>
    1476:	4934      	ldr	r1, [pc, #208]	; (1548 <sys_heap_init+0x118>)
    1478:	4a30      	ldr	r2, [pc, #192]	; (153c <sys_heap_init+0x10c>)
    147a:	4831      	ldr	r0, [pc, #196]	; (1540 <sys_heap_init+0x110>)
    147c:	f240 13f3 	movw	r3, #499	; 0x1f3
    1480:	f007 fbf7 	bl	8c72 <assert_print>
    1484:	4831      	ldr	r0, [pc, #196]	; (154c <sys_heap_init+0x11c>)
    1486:	f007 fbf4 	bl	8c72 <assert_print>
    148a:	482c      	ldr	r0, [pc, #176]	; (153c <sys_heap_init+0x10c>)
    148c:	f240 11f3 	movw	r1, #499	; 0x1f3
    1490:	f007 fbe8 	bl	8c64 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1494:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1496:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    149a:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    149e:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    14a2:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    14a4:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    14a6:	2300      	movs	r3, #0
    14a8:	08e4      	lsrs	r4, r4, #3
    14aa:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    14ac:	1c63      	adds	r3, r4, #1
    14ae:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    14b0:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    14b2:	d90e      	bls.n	14d2 <sys_heap_init+0xa2>
    14b4:	4926      	ldr	r1, [pc, #152]	; (1550 <sys_heap_init+0x120>)
    14b6:	4a21      	ldr	r2, [pc, #132]	; (153c <sys_heap_init+0x10c>)
    14b8:	4821      	ldr	r0, [pc, #132]	; (1540 <sys_heap_init+0x110>)
    14ba:	f44f 7301 	mov.w	r3, #516	; 0x204
    14be:	f007 fbd8 	bl	8c72 <assert_print>
    14c2:	4822      	ldr	r0, [pc, #136]	; (154c <sys_heap_init+0x11c>)
    14c4:	f007 fbd5 	bl	8c72 <assert_print>
    14c8:	481c      	ldr	r0, [pc, #112]	; (153c <sys_heap_init+0x10c>)
    14ca:	f44f 7101 	mov.w	r1, #516	; 0x204
    14ce:	f007 fbc9 	bl	8c64 <assert_post_action>
    14d2:	f105 030c 	add.w	r3, r5, #12
    14d6:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    14da:	2200      	movs	r2, #0
    14dc:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    14e0:	4543      	cmp	r3, r8
    14e2:	d1fb      	bne.n	14dc <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    14e4:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    14e6:	f043 0301 	orr.w	r3, r3, #1
    14ea:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    14ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    14f0:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    14f2:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    14f4:	802a      	strh	r2, [r5, #0]
    14f6:	8048      	strh	r0, [r1, #2]
    14f8:	19a9      	adds	r1, r5, r6
    14fa:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    14fe:	804a      	strh	r2, [r1, #2]
    1500:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    1502:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1506:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1508:	885a      	ldrh	r2, [r3, #2]
    150a:	f042 0201 	orr.w	r2, r2, #1
    150e:	4628      	mov	r0, r5
    1510:	805a      	strh	r2, [r3, #2]
}
    1512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    1516:	f007 bb22 	b.w	8b5e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    151a:	2a04      	cmp	r2, #4
    151c:	d89f      	bhi.n	145e <sys_heap_init+0x2e>
    151e:	490d      	ldr	r1, [pc, #52]	; (1554 <sys_heap_init+0x124>)
    1520:	4a06      	ldr	r2, [pc, #24]	; (153c <sys_heap_init+0x10c>)
    1522:	4807      	ldr	r0, [pc, #28]	; (1540 <sys_heap_init+0x110>)
    1524:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1528:	f007 fba3 	bl	8c72 <assert_print>
    152c:	4807      	ldr	r0, [pc, #28]	; (154c <sys_heap_init+0x11c>)
    152e:	f007 fba0 	bl	8c72 <assert_print>
    1532:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1536:	e78f      	b.n	1458 <sys_heap_init+0x28>
    1538:	0000a0dc 	.word	0x0000a0dc
    153c:	0000a010 	.word	0x0000a010
    1540:	00009bef 	.word	0x00009bef
    1544:	0000a0f2 	.word	0x0000a0f2
    1548:	0000a143 	.word	0x0000a143
    154c:	0000a12a 	.word	0x0000a12a
    1550:	0000a16c 	.word	0x0000a16c
    1554:	0000a109 	.word	0x0000a109

00001558 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    155c:	b091      	sub	sp, #68	; 0x44
    155e:	468b      	mov	fp, r1
    1560:	9002      	str	r0, [sp, #8]
    1562:	4692      	mov	sl, r2
    1564:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1566:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1568:	f89a 0000 	ldrb.w	r0, [sl]
    156c:	b908      	cbnz	r0, 1572 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    156e:	4628      	mov	r0, r5
    1570:	e338      	b.n	1be4 <cbvprintf+0x68c>
		if (*fp != '%') {
    1572:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1574:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1578:	d007      	beq.n	158a <cbvprintf+0x32>
			OUTC('%');
    157a:	9b02      	ldr	r3, [sp, #8]
    157c:	4659      	mov	r1, fp
    157e:	4798      	blx	r3
    1580:	2800      	cmp	r0, #0
    1582:	f2c0 832f 	blt.w	1be4 <cbvprintf+0x68c>
    1586:	3501      	adds	r5, #1
			break;
    1588:	e200      	b.n	198c <cbvprintf+0x434>
		} state = {
    158a:	2218      	movs	r2, #24
    158c:	2100      	movs	r1, #0
    158e:	a80a      	add	r0, sp, #40	; 0x28
    1590:	f007 fc5c 	bl	8e4c <memset>
	if (*sp == '%') {
    1594:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1598:	2b25      	cmp	r3, #37	; 0x25
    159a:	d078      	beq.n	168e <cbvprintf+0x136>
    159c:	2200      	movs	r2, #0
    159e:	4696      	mov	lr, r2
    15a0:	4694      	mov	ip, r2
    15a2:	4616      	mov	r6, r2
    15a4:	4610      	mov	r0, r2
    15a6:	4639      	mov	r1, r7
		switch (*sp) {
    15a8:	f817 3b01 	ldrb.w	r3, [r7], #1
    15ac:	2b2b      	cmp	r3, #43	; 0x2b
    15ae:	f000 809d 	beq.w	16ec <cbvprintf+0x194>
    15b2:	f200 8094 	bhi.w	16de <cbvprintf+0x186>
    15b6:	2b20      	cmp	r3, #32
    15b8:	f000 809a 	beq.w	16f0 <cbvprintf+0x198>
    15bc:	2b23      	cmp	r3, #35	; 0x23
    15be:	f000 809a 	beq.w	16f6 <cbvprintf+0x19e>
    15c2:	b12a      	cbz	r2, 15d0 <cbvprintf+0x78>
    15c4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    15cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15d0:	f1be 0f00 	cmp.w	lr, #0
    15d4:	d005      	beq.n	15e2 <cbvprintf+0x8a>
    15d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15da:	f042 0220 	orr.w	r2, r2, #32
    15de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15e2:	f1bc 0f00 	cmp.w	ip, #0
    15e6:	d005      	beq.n	15f4 <cbvprintf+0x9c>
    15e8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15ec:	f042 0210 	orr.w	r2, r2, #16
    15f0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15f4:	b12e      	cbz	r6, 1602 <cbvprintf+0xaa>
    15f6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15fa:	f042 0208 	orr.w	r2, r2, #8
    15fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    1602:	b128      	cbz	r0, 1610 <cbvprintf+0xb8>
    1604:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1608:	f042 0204 	orr.w	r2, r2, #4
    160c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1610:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1614:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1618:	2844      	cmp	r0, #68	; 0x44
    161a:	d103      	bne.n	1624 <cbvprintf+0xcc>
		conv->flag_zero = false;
    161c:	f36f 1286 	bfc	r2, #6, #1
    1620:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1624:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1628:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    162a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    162e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1632:	d17b      	bne.n	172c <cbvprintf+0x1d4>
		conv->width_star = true;
    1634:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1638:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    163c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    163e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1642:	781a      	ldrb	r2, [r3, #0]
    1644:	2a2e      	cmp	r2, #46	; 0x2e
    1646:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    164a:	bf0c      	ite	eq
    164c:	2101      	moveq	r1, #1
    164e:	2100      	movne	r1, #0
    1650:	f361 0241 	bfi	r2, r1, #1, #1
    1654:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1658:	d174      	bne.n	1744 <cbvprintf+0x1ec>
	if (*sp == '*') {
    165a:	785a      	ldrb	r2, [r3, #1]
    165c:	2a2a      	cmp	r2, #42	; 0x2a
    165e:	d06a      	beq.n	1736 <cbvprintf+0x1de>
	++sp;
    1660:	3301      	adds	r3, #1
	size_t val = 0;
    1662:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1664:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1666:	4618      	mov	r0, r3
    1668:	f810 2b01 	ldrb.w	r2, [r0], #1
    166c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1670:	2f09      	cmp	r7, #9
    1672:	f240 8093 	bls.w	179c <cbvprintf+0x244>
	conv->unsupported |= ((conv->prec_value < 0)
    1676:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    167a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    167c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1680:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1684:	f361 0241 	bfi	r2, r1, #1, #1
    1688:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    168c:	e05a      	b.n	1744 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    168e:	f10a 0702 	add.w	r7, sl, #2
    1692:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1696:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    169a:	07d9      	lsls	r1, r3, #31
    169c:	f140 8122 	bpl.w	18e4 <cbvprintf+0x38c>
			width = va_arg(ap, int);
    16a0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    16a4:	f1b9 0f00 	cmp.w	r9, #0
    16a8:	da07      	bge.n	16ba <cbvprintf+0x162>
				conv->flag_dash = true;
    16aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    16ae:	f042 0204 	orr.w	r2, r2, #4
    16b2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    16b6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    16ba:	075a      	lsls	r2, r3, #29
    16bc:	f140 811b 	bpl.w	18f6 <cbvprintf+0x39e>
			int arg = va_arg(ap, int);
    16c0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    16c4:	f1b8 0f00 	cmp.w	r8, #0
    16c8:	f280 811a 	bge.w	1900 <cbvprintf+0x3a8>
				conv->prec_present = false;
    16cc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    16d0:	f36f 0341 	bfc	r3, #1, #1
    16d4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    16d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    16dc:	e110      	b.n	1900 <cbvprintf+0x3a8>
		switch (*sp) {
    16de:	2b2d      	cmp	r3, #45	; 0x2d
    16e0:	d00c      	beq.n	16fc <cbvprintf+0x1a4>
    16e2:	2b30      	cmp	r3, #48	; 0x30
    16e4:	f47f af6d 	bne.w	15c2 <cbvprintf+0x6a>
    16e8:	2201      	movs	r2, #1
	} while (loop);
    16ea:	e75c      	b.n	15a6 <cbvprintf+0x4e>
		switch (*sp) {
    16ec:	2601      	movs	r6, #1
    16ee:	e75a      	b.n	15a6 <cbvprintf+0x4e>
    16f0:	f04f 0c01 	mov.w	ip, #1
    16f4:	e757      	b.n	15a6 <cbvprintf+0x4e>
    16f6:	f04f 0e01 	mov.w	lr, #1
    16fa:	e754      	b.n	15a6 <cbvprintf+0x4e>
    16fc:	2001      	movs	r0, #1
    16fe:	e752      	b.n	15a6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1700:	fb0c 6202 	mla	r2, ip, r2, r6
    1704:	3a30      	subs	r2, #48	; 0x30
    1706:	4603      	mov	r3, r0
    1708:	4618      	mov	r0, r3
    170a:	f810 6b01 	ldrb.w	r6, [r0], #1
    170e:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1712:	2f09      	cmp	r7, #9
    1714:	d9f4      	bls.n	1700 <cbvprintf+0x1a8>
	if (sp != wp) {
    1716:	4299      	cmp	r1, r3
    1718:	d093      	beq.n	1642 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    171a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    171e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1720:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1722:	f362 0141 	bfi	r1, r2, #1, #1
    1726:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    172a:	e78a      	b.n	1642 <cbvprintf+0xea>
    172c:	460b      	mov	r3, r1
	size_t val = 0;
    172e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1730:	f04f 0c0a 	mov.w	ip, #10
    1734:	e7e8      	b.n	1708 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1736:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    173a:	f042 0204 	orr.w	r2, r2, #4
    173e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1742:	3302      	adds	r3, #2
	switch (*sp) {
    1744:	461f      	mov	r7, r3
    1746:	f817 2b01 	ldrb.w	r2, [r7], #1
    174a:	2a6c      	cmp	r2, #108	; 0x6c
    174c:	d047      	beq.n	17de <cbvprintf+0x286>
    174e:	d82b      	bhi.n	17a8 <cbvprintf+0x250>
    1750:	2a68      	cmp	r2, #104	; 0x68
    1752:	d031      	beq.n	17b8 <cbvprintf+0x260>
    1754:	2a6a      	cmp	r2, #106	; 0x6a
    1756:	d04c      	beq.n	17f2 <cbvprintf+0x29a>
    1758:	2a4c      	cmp	r2, #76	; 0x4c
    175a:	d052      	beq.n	1802 <cbvprintf+0x2aa>
    175c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    175e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1762:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1766:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    176a:	2a78      	cmp	r2, #120	; 0x78
    176c:	f200 80b2 	bhi.w	18d4 <cbvprintf+0x37c>
    1770:	2a6d      	cmp	r2, #109	; 0x6d
    1772:	d853      	bhi.n	181c <cbvprintf+0x2c4>
    1774:	2a69      	cmp	r2, #105	; 0x69
    1776:	f200 80ad 	bhi.w	18d4 <cbvprintf+0x37c>
    177a:	2a57      	cmp	r2, #87	; 0x57
    177c:	d86a      	bhi.n	1854 <cbvprintf+0x2fc>
    177e:	2a41      	cmp	r2, #65	; 0x41
    1780:	d003      	beq.n	178a <cbvprintf+0x232>
    1782:	3a45      	subs	r2, #69	; 0x45
    1784:	2a02      	cmp	r2, #2
    1786:	f200 80a5 	bhi.w	18d4 <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_FP;
    178a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    178e:	2204      	movs	r2, #4
    1790:	f362 0302 	bfi	r3, r2, #0, #3
    1794:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1798:	2301      	movs	r3, #1
			break;
    179a:	e082      	b.n	18a2 <cbvprintf+0x34a>
		val = 10U * val + *sp++ - '0';
    179c:	fb06 2201 	mla	r2, r6, r1, r2
    17a0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    17a4:	4603      	mov	r3, r0
    17a6:	e75e      	b.n	1666 <cbvprintf+0x10e>
	switch (*sp) {
    17a8:	2a74      	cmp	r2, #116	; 0x74
    17aa:	d026      	beq.n	17fa <cbvprintf+0x2a2>
    17ac:	2a7a      	cmp	r2, #122	; 0x7a
    17ae:	d1d5      	bne.n	175c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    17b0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17b4:	2206      	movs	r2, #6
    17b6:	e00d      	b.n	17d4 <cbvprintf+0x27c>
		if (*++sp == 'h') {
    17b8:	785a      	ldrb	r2, [r3, #1]
    17ba:	2a68      	cmp	r2, #104	; 0x68
    17bc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    17c0:	d106      	bne.n	17d0 <cbvprintf+0x278>
			conv->length_mod = LENGTH_HH;
    17c2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    17c4:	f361 02c6 	bfi	r2, r1, #3, #4
    17c8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    17cc:	1c9f      	adds	r7, r3, #2
    17ce:	e7c6      	b.n	175e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    17d0:	4613      	mov	r3, r2
    17d2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    17d4:	f362 03c6 	bfi	r3, r2, #3, #4
    17d8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    17dc:	e7bf      	b.n	175e <cbvprintf+0x206>
		if (*++sp == 'l') {
    17de:	785a      	ldrb	r2, [r3, #1]
    17e0:	2a6c      	cmp	r2, #108	; 0x6c
    17e2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    17e6:	d101      	bne.n	17ec <cbvprintf+0x294>
			conv->length_mod = LENGTH_LL;
    17e8:	2104      	movs	r1, #4
    17ea:	e7eb      	b.n	17c4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_L;
    17ec:	4613      	mov	r3, r2
    17ee:	2203      	movs	r2, #3
    17f0:	e7f0      	b.n	17d4 <cbvprintf+0x27c>
		conv->length_mod = LENGTH_J;
    17f2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17f6:	2205      	movs	r2, #5
    17f8:	e7ec      	b.n	17d4 <cbvprintf+0x27c>
		conv->length_mod = LENGTH_T;
    17fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17fe:	2207      	movs	r2, #7
    1800:	e7e8      	b.n	17d4 <cbvprintf+0x27c>
		conv->unsupported = true;
    1802:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1806:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    180a:	f023 0302 	bic.w	r3, r3, #2
    180e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1812:	f043 0302 	orr.w	r3, r3, #2
    1816:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    181a:	e7a0      	b.n	175e <cbvprintf+0x206>
	switch (conv->specifier) {
    181c:	f1a2 006e 	sub.w	r0, r2, #110	; 0x6e
    1820:	b2c0      	uxtb	r0, r0
    1822:	2101      	movs	r1, #1
    1824:	4081      	lsls	r1, r0
    1826:	f240 4082 	movw	r0, #1154	; 0x482
    182a:	4201      	tst	r1, r0
    182c:	d122      	bne.n	1874 <cbvprintf+0x31c>
    182e:	f011 0f24 	tst.w	r1, #36	; 0x24
    1832:	d142      	bne.n	18ba <cbvprintf+0x362>
    1834:	07ce      	lsls	r6, r1, #31
    1836:	d54d      	bpl.n	18d4 <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_PTR;
    1838:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    183c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1840:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1844:	2103      	movs	r1, #3
    1846:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    184a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    184c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1850:	4143      	adcs	r3, r0
    1852:	e026      	b.n	18a2 <cbvprintf+0x34a>
	switch (conv->specifier) {
    1854:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1858:	b2c9      	uxtb	r1, r1
    185a:	2001      	movs	r0, #1
    185c:	fa00 f101 	lsl.w	r1, r0, r1
    1860:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1864:	d191      	bne.n	178a <cbvprintf+0x232>
    1866:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    186a:	d124      	bne.n	18b6 <cbvprintf+0x35e>
    186c:	f640 0001 	movw	r0, #2049	; 0x801
    1870:	4201      	tst	r1, r0
    1872:	d02f      	beq.n	18d4 <cbvprintf+0x37c>
    1874:	2102      	movs	r1, #2
		conv->specifier_cat = SPECIFIER_SINT;
    1876:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    187a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    187e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1880:	f361 0002 	bfi	r0, r1, #0, #3
			conv->invalid = true;
    1884:	bf08      	it	eq
    1886:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
		conv->specifier_cat = SPECIFIER_SINT;
    188a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
			conv->invalid = true;
    188e:	bf04      	itt	eq
    1890:	f041 0101 	orreq.w	r1, r1, #1
    1894:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1898:	2a63      	cmp	r2, #99	; 0x63
    189a:	d121      	bne.n	18e0 <cbvprintf+0x388>
			unsupported = (conv->length_mod != LENGTH_NONE);
    189c:	3b00      	subs	r3, #0
    189e:	bf18      	it	ne
    18a0:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    18a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    18a6:	f3c2 0140 	ubfx	r1, r2, #1, #1
    18aa:	430b      	orrs	r3, r1
    18ac:	f363 0241 	bfi	r2, r3, #1, #1
    18b0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    18b4:	e6ef      	b.n	1696 <cbvprintf+0x13e>
	switch (conv->specifier) {
    18b6:	4601      	mov	r1, r0
    18b8:	e7dd      	b.n	1876 <cbvprintf+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    18ba:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    18be:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    18c0:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    18c4:	f361 0202 	bfi	r2, r1, #0, #3
    18c8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    18cc:	bf14      	ite	ne
    18ce:	2301      	movne	r3, #1
    18d0:	2300      	moveq	r3, #0
    18d2:	e7e6      	b.n	18a2 <cbvprintf+0x34a>
		conv->invalid = true;
    18d4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    18d8:	f043 0301 	orr.w	r3, r3, #1
    18dc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    18e0:	2300      	movs	r3, #0
    18e2:	e7de      	b.n	18a2 <cbvprintf+0x34a>
		} else if (conv->width_present) {
    18e4:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    18e8:	2a00      	cmp	r2, #0
			width = conv->width_value;
    18ea:	bfb4      	ite	lt
    18ec:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    18f0:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    18f4:	e6e1      	b.n	16ba <cbvprintf+0x162>
		} else if (conv->prec_present) {
    18f6:	079b      	lsls	r3, r3, #30
    18f8:	f57f aeee 	bpl.w	16d8 <cbvprintf+0x180>
			precision = conv->prec_value;
    18fc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1900:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1904:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1906:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    190a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    190e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1912:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1914:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1918:	d13a      	bne.n	1990 <cbvprintf+0x438>
			switch (length_mod) {
    191a:	1ecb      	subs	r3, r1, #3
    191c:	2b04      	cmp	r3, #4
    191e:	d812      	bhi.n	1946 <cbvprintf+0x3ee>
    1920:	e8df f003 	tbb	[pc, r3]
    1924:	11090903 	.word	0x11090903
    1928:	11          	.byte	0x11
    1929:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    192a:	f854 3b04 	ldr.w	r3, [r4], #4
    192e:	17da      	asrs	r2, r3, #31
    1930:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			} else if (length_mod == LENGTH_H) {
    1934:	e01b      	b.n	196e <cbvprintf+0x416>
					(sint_value_type)va_arg(ap, intmax_t);
    1936:	1de2      	adds	r2, r4, #7
    1938:	f022 0207 	bic.w	r2, r2, #7
    193c:	4614      	mov	r4, r2
    193e:	6852      	ldr	r2, [r2, #4]
    1940:	f854 3b08 	ldr.w	r3, [r4], #8
				break;
    1944:	e7f4      	b.n	1930 <cbvprintf+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1946:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    194a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    194c:	ea4f 72e3 	mov.w	r2, r3, asr #31
				value->sint = va_arg(ap, int);
    1950:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1954:	d104      	bne.n	1960 <cbvprintf+0x408>
				value->uint = (unsigned char)value->uint;
    1956:	f003 03ff 	and.w	r3, r3, #255	; 0xff
				value->uint = (unsigned short)value->uint;
    195a:	930a      	str	r3, [sp, #40]	; 0x28
    195c:	2300      	movs	r3, #0
    195e:	e005      	b.n	196c <cbvprintf+0x414>
			} else if (length_mod == LENGTH_H) {
    1960:	2902      	cmp	r1, #2
    1962:	d104      	bne.n	196e <cbvprintf+0x416>
				value->sint = (short)value->sint;
    1964:	b21a      	sxth	r2, r3
    1966:	920a      	str	r2, [sp, #40]	; 0x28
    1968:	f343 33c0 	sbfx	r3, r3, #15, #1
    196c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (conv->invalid || conv->unsupported) {
    196e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1972:	f013 0603 	ands.w	r6, r3, #3
    1976:	d041      	beq.n	19fc <cbvprintf+0x4a4>
			OUTS(sp, fp);
    1978:	9802      	ldr	r0, [sp, #8]
    197a:	463b      	mov	r3, r7
    197c:	4652      	mov	r2, sl
    197e:	4659      	mov	r1, fp
    1980:	f007 f95a 	bl	8c38 <outs>
    1984:	2800      	cmp	r0, #0
    1986:	f2c0 812d 	blt.w	1be4 <cbvprintf+0x68c>
    198a:	4405      	add	r5, r0
			continue;
    198c:	46ba      	mov	sl, r7
    198e:	e5eb      	b.n	1568 <cbvprintf+0x10>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1990:	2b02      	cmp	r3, #2
    1992:	d121      	bne.n	19d8 <cbvprintf+0x480>
			switch (length_mod) {
    1994:	1ecb      	subs	r3, r1, #3
    1996:	2b04      	cmp	r3, #4
    1998:	d813      	bhi.n	19c2 <cbvprintf+0x46a>
    199a:	e8df f003 	tbb	[pc, r3]
    199e:	0a03      	.short	0x0a03
    19a0:	120a      	.short	0x120a
    19a2:	12          	.byte	0x12
    19a3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    19a4:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
    19a6:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    19a8:	2200      	movs	r2, #0
				value->uint =
    19aa:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    19ae:	461c      	mov	r4, r3
    19b0:	e7dd      	b.n	196e <cbvprintf+0x416>
					(uint_value_type)va_arg(ap,
    19b2:	3407      	adds	r4, #7
    19b4:	f024 0407 	bic.w	r4, r4, #7
    19b8:	4623      	mov	r3, r4
    19ba:	6862      	ldr	r2, [r4, #4]
    19bc:	f853 0b08 	ldr.w	r0, [r3], #8
				break;
    19c0:	e7f3      	b.n	19aa <cbvprintf+0x452>
					(uint_value_type)va_arg(ap, size_t);
    19c2:	f854 3b04 	ldr.w	r3, [r4], #4
    19c6:	2200      	movs	r2, #0
			if (length_mod == LENGTH_HH) {
    19c8:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    19ca:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    19ce:	d0c2      	beq.n	1956 <cbvprintf+0x3fe>
			} else if (length_mod == LENGTH_H) {
    19d0:	2902      	cmp	r1, #2
    19d2:	d1cc      	bne.n	196e <cbvprintf+0x416>
				value->uint = (unsigned short)value->uint;
    19d4:	b29b      	uxth	r3, r3
    19d6:	e7c0      	b.n	195a <cbvprintf+0x402>
		} else if (specifier_cat == SPECIFIER_FP) {
    19d8:	2b04      	cmp	r3, #4
    19da:	d109      	bne.n	19f0 <cbvprintf+0x498>
					(sint_value_type)va_arg(ap, long long);
    19dc:	1de3      	adds	r3, r4, #7
    19de:	f023 0307 	bic.w	r3, r3, #7
    19e2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    19e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    19ee:	e7be      	b.n	196e <cbvprintf+0x416>
		} else if (specifier_cat == SPECIFIER_PTR) {
    19f0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    19f2:	bf04      	itt	eq
    19f4:	f854 3b04 	ldreq.w	r3, [r4], #4
    19f8:	930a      	streq	r3, [sp, #40]	; 0x28
    19fa:	e7b8      	b.n	196e <cbvprintf+0x416>
		switch (conv->specifier) {
    19fc:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1a00:	2878      	cmp	r0, #120	; 0x78
    1a02:	d8c3      	bhi.n	198c <cbvprintf+0x434>
    1a04:	2862      	cmp	r0, #98	; 0x62
    1a06:	d822      	bhi.n	1a4e <cbvprintf+0x4f6>
    1a08:	2825      	cmp	r0, #37	; 0x25
    1a0a:	f43f adb6 	beq.w	157a <cbvprintf+0x22>
    1a0e:	2858      	cmp	r0, #88	; 0x58
    1a10:	d1bc      	bne.n	198c <cbvprintf+0x434>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a12:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a16:	9300      	str	r3, [sp, #0]
    1a18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1a1c:	ab04      	add	r3, sp, #16
    1a1e:	aa0c      	add	r2, sp, #48	; 0x30
    1a20:	f007 f8c4 	bl	8bac <encode_uint>
    1a24:	4682      	mov	sl, r0
			if (precision >= 0) {
    1a26:	f1b8 0f00 	cmp.w	r8, #0
    1a2a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a2e:	db0c      	blt.n	1a4a <cbvprintf+0x4f2>
				conv->flag_zero = false;
    1a30:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1a34:	eba3 020a 	sub.w	r2, r3, sl
				conv->flag_zero = false;
    1a38:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1a3c:	4590      	cmp	r8, r2
				conv->flag_zero = false;
    1a3e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1a42:	d902      	bls.n	1a4a <cbvprintf+0x4f2>
					conv->pad0_value = precision - (int)len;
    1a44:	eba8 0202 	sub.w	r2, r8, r2
    1a48:	920d      	str	r2, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1a4a:	4698      	mov	r8, r3
    1a4c:	e03e      	b.n	1acc <cbvprintf+0x574>
		switch (conv->specifier) {
    1a4e:	3863      	subs	r0, #99	; 0x63
    1a50:	2815      	cmp	r0, #21
    1a52:	d89b      	bhi.n	198c <cbvprintf+0x434>
    1a54:	a201      	add	r2, pc, #4	; (adr r2, 1a5c <cbvprintf+0x504>)
    1a56:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1a5a:	bf00      	nop
    1a5c:	00001add 	.word	0x00001add
    1a60:	00001b41 	.word	0x00001b41
    1a64:	0000198d 	.word	0x0000198d
    1a68:	0000198d 	.word	0x0000198d
    1a6c:	0000198d 	.word	0x0000198d
    1a70:	0000198d 	.word	0x0000198d
    1a74:	00001b41 	.word	0x00001b41
    1a78:	0000198d 	.word	0x0000198d
    1a7c:	0000198d 	.word	0x0000198d
    1a80:	0000198d 	.word	0x0000198d
    1a84:	0000198d 	.word	0x0000198d
    1a88:	00001b99 	.word	0x00001b99
    1a8c:	00001b67 	.word	0x00001b67
    1a90:	00001b6b 	.word	0x00001b6b
    1a94:	0000198d 	.word	0x0000198d
    1a98:	0000198d 	.word	0x0000198d
    1a9c:	00001ab5 	.word	0x00001ab5
    1aa0:	0000198d 	.word	0x0000198d
    1aa4:	00001b67 	.word	0x00001b67
    1aa8:	0000198d 	.word	0x0000198d
    1aac:	0000198d 	.word	0x0000198d
    1ab0:	00001b67 	.word	0x00001b67
			if (precision >= 0) {
    1ab4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1ab8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1abc:	db0a      	blt.n	1ad4 <cbvprintf+0x57c>
				len = strnlen(bps, precision);
    1abe:	4641      	mov	r1, r8
    1ac0:	4650      	mov	r0, sl
    1ac2:	f007 f9a3 	bl	8e0c <strnlen>
			bpe = bps + len;
    1ac6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1aca:	2600      	movs	r6, #0
		if (bps == NULL) {
    1acc:	f1ba 0f00 	cmp.w	sl, #0
    1ad0:	d10c      	bne.n	1aec <cbvprintf+0x594>
    1ad2:	e75b      	b.n	198c <cbvprintf+0x434>
				len = strlen(bps);
    1ad4:	4650      	mov	r0, sl
    1ad6:	f007 f992 	bl	8dfe <strlen>
    1ada:	e7f4      	b.n	1ac6 <cbvprintf+0x56e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ade:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1ae2:	2600      	movs	r6, #0
			bps = buf;
    1ae4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1ae8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1aec:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1af0:	b106      	cbz	r6, 1af4 <cbvprintf+0x59c>
			nj_len += 1U;
    1af2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1af4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1af8:	06d0      	lsls	r0, r2, #27
    1afa:	d567      	bpl.n	1bcc <cbvprintf+0x674>
			nj_len += 2U;
    1afc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1afe:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1b00:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1b02:	bf48      	it	mi
    1b04:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1b06:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1b08:	bf48      	it	mi
    1b0a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1b0c:	f1b9 0f00 	cmp.w	r9, #0
    1b10:	dd75      	ble.n	1bfe <cbvprintf+0x6a6>
			if (!conv->flag_dash) {
    1b12:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1b16:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1b1a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1b1e:	9303      	str	r3, [sp, #12]
    1b20:	0753      	lsls	r3, r2, #29
    1b22:	d46c      	bmi.n	1bfe <cbvprintf+0x6a6>
				if (conv->flag_zero) {
    1b24:	0650      	lsls	r0, r2, #25
    1b26:	d560      	bpl.n	1bea <cbvprintf+0x692>
					if (sign != 0) {
    1b28:	b146      	cbz	r6, 1b3c <cbvprintf+0x5e4>
						OUTC(sign);
    1b2a:	9b02      	ldr	r3, [sp, #8]
    1b2c:	4659      	mov	r1, fp
    1b2e:	4630      	mov	r0, r6
    1b30:	4798      	blx	r3
    1b32:	2800      	cmp	r0, #0
    1b34:	db56      	blt.n	1be4 <cbvprintf+0x68c>
    1b36:	9b03      	ldr	r3, [sp, #12]
    1b38:	3501      	adds	r5, #1
    1b3a:	461e      	mov	r6, r3
					pad = '0';
    1b3c:	2330      	movs	r3, #48	; 0x30
    1b3e:	e055      	b.n	1bec <cbvprintf+0x694>
			if (conv->flag_plus) {
    1b40:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    1b42:	bf5c      	itt	pl
    1b44:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1b48:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1b4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				sign = '+';
    1b4e:	bf48      	it	mi
    1b50:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1b52:	2b00      	cmp	r3, #0
    1b54:	f6bf af5d 	bge.w	1a12 <cbvprintf+0x4ba>
				value->uint = (uint_value_type)-sint;
    1b58:	4252      	negs	r2, r2
    1b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1b62:	262d      	movs	r6, #45	; 0x2d
    1b64:	e755      	b.n	1a12 <cbvprintf+0x4ba>
		switch (conv->specifier) {
    1b66:	2600      	movs	r6, #0
    1b68:	e753      	b.n	1a12 <cbvprintf+0x4ba>
			if (value->ptr != NULL) {
    1b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b6c:	b340      	cbz	r0, 1bc0 <cbvprintf+0x668>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	aa0c      	add	r2, sp, #48	; 0x30
    1b76:	ab04      	add	r3, sp, #16
    1b78:	2100      	movs	r1, #0
    1b7a:	f007 f817 	bl	8bac <encode_uint>
				conv->altform_0c = true;
    1b7e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1b82:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1b86:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1b8a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b8e:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1b90:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1b94:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1b96:	e746      	b.n	1a26 <cbvprintf+0x4ce>
				store_count(conv, value->ptr, count);
    1b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1b9a:	2907      	cmp	r1, #7
    1b9c:	f63f aef6 	bhi.w	198c <cbvprintf+0x434>
    1ba0:	e8df f001 	tbb	[pc, r1]
    1ba4:	0c06040c 	.word	0x0c06040c
    1ba8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1bac:	701d      	strb	r5, [r3, #0]
		break;
    1bae:	e6ed      	b.n	198c <cbvprintf+0x434>
		*(short *)dp = (short)count;
    1bb0:	801d      	strh	r5, [r3, #0]
		break;
    1bb2:	e6eb      	b.n	198c <cbvprintf+0x434>
		*(intmax_t *)dp = (intmax_t)count;
    1bb4:	17ea      	asrs	r2, r5, #31
    1bb6:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1bba:	e6e7      	b.n	198c <cbvprintf+0x434>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1bbc:	601d      	str	r5, [r3, #0]
		break;
    1bbe:	e6e5      	b.n	198c <cbvprintf+0x434>
			bps = "(nil)";
    1bc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c88 <cbvprintf+0x730>
    1bc4:	4606      	mov	r6, r0
			bpe = bps + 5;
    1bc6:	f10a 0805 	add.w	r8, sl, #5
    1bca:	e78f      	b.n	1aec <cbvprintf+0x594>
		} else if (conv->altform_0) {
    1bcc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1bce:	bf48      	it	mi
    1bd0:	3301      	addmi	r3, #1
    1bd2:	e794      	b.n	1afe <cbvprintf+0x5a6>
					OUTC(pad);
    1bd4:	4618      	mov	r0, r3
    1bd6:	9303      	str	r3, [sp, #12]
    1bd8:	4659      	mov	r1, fp
    1bda:	9b02      	ldr	r3, [sp, #8]
    1bdc:	4798      	blx	r3
    1bde:	2800      	cmp	r0, #0
    1be0:	9b03      	ldr	r3, [sp, #12]
    1be2:	da04      	bge.n	1bee <cbvprintf+0x696>
#undef OUTS
#undef OUTC
}
    1be4:	b011      	add	sp, #68	; 0x44
    1be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1bea:	2320      	movs	r3, #32
    1bec:	444d      	add	r5, r9
    1bee:	464a      	mov	r2, r9
				while (width-- > 0) {
    1bf0:	2a00      	cmp	r2, #0
    1bf2:	eba5 0109 	sub.w	r1, r5, r9
    1bf6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1bfa:	dceb      	bgt.n	1bd4 <cbvprintf+0x67c>
    1bfc:	460d      	mov	r5, r1
		if (sign != 0) {
    1bfe:	b136      	cbz	r6, 1c0e <cbvprintf+0x6b6>
			OUTC(sign);
    1c00:	9b02      	ldr	r3, [sp, #8]
    1c02:	4659      	mov	r1, fp
    1c04:	4630      	mov	r0, r6
    1c06:	4798      	blx	r3
    1c08:	2800      	cmp	r0, #0
    1c0a:	dbeb      	blt.n	1be4 <cbvprintf+0x68c>
    1c0c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1c0e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c12:	06d9      	lsls	r1, r3, #27
    1c14:	d401      	bmi.n	1c1a <cbvprintf+0x6c2>
    1c16:	071a      	lsls	r2, r3, #28
    1c18:	d506      	bpl.n	1c28 <cbvprintf+0x6d0>
				OUTC('0');
    1c1a:	9b02      	ldr	r3, [sp, #8]
    1c1c:	4659      	mov	r1, fp
    1c1e:	2030      	movs	r0, #48	; 0x30
    1c20:	4798      	blx	r3
    1c22:	2800      	cmp	r0, #0
    1c24:	dbde      	blt.n	1be4 <cbvprintf+0x68c>
    1c26:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1c28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c2c:	06db      	lsls	r3, r3, #27
    1c2e:	d507      	bpl.n	1c40 <cbvprintf+0x6e8>
				OUTC(conv->specifier);
    1c30:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1c34:	9b02      	ldr	r3, [sp, #8]
    1c36:	4659      	mov	r1, fp
    1c38:	4798      	blx	r3
    1c3a:	2800      	cmp	r0, #0
    1c3c:	dbd2      	blt.n	1be4 <cbvprintf+0x68c>
    1c3e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1c40:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1c42:	442e      	add	r6, r5
    1c44:	1b73      	subs	r3, r6, r5
    1c46:	2b00      	cmp	r3, #0
    1c48:	dc16      	bgt.n	1c78 <cbvprintf+0x720>
			OUTS(bps, bpe);
    1c4a:	9802      	ldr	r0, [sp, #8]
    1c4c:	4643      	mov	r3, r8
    1c4e:	4652      	mov	r2, sl
    1c50:	4659      	mov	r1, fp
    1c52:	f006 fff1 	bl	8c38 <outs>
    1c56:	2800      	cmp	r0, #0
    1c58:	dbc4      	blt.n	1be4 <cbvprintf+0x68c>
    1c5a:	4405      	add	r5, r0
		while (width > 0) {
    1c5c:	44a9      	add	r9, r5
    1c5e:	eba9 0305 	sub.w	r3, r9, r5
    1c62:	2b00      	cmp	r3, #0
    1c64:	f77f ae92 	ble.w	198c <cbvprintf+0x434>
			OUTC(' ');
    1c68:	9b02      	ldr	r3, [sp, #8]
    1c6a:	4659      	mov	r1, fp
    1c6c:	2020      	movs	r0, #32
    1c6e:	4798      	blx	r3
    1c70:	2800      	cmp	r0, #0
    1c72:	dbb7      	blt.n	1be4 <cbvprintf+0x68c>
    1c74:	3501      	adds	r5, #1
			--width;
    1c76:	e7f2      	b.n	1c5e <cbvprintf+0x706>
				OUTC('0');
    1c78:	9b02      	ldr	r3, [sp, #8]
    1c7a:	4659      	mov	r1, fp
    1c7c:	2030      	movs	r0, #48	; 0x30
    1c7e:	4798      	blx	r3
    1c80:	2800      	cmp	r0, #0
    1c82:	dbaf      	blt.n	1be4 <cbvprintf+0x68c>
    1c84:	3501      	adds	r5, #1
    1c86:	e7dd      	b.n	1c44 <cbvprintf+0x6ec>
    1c88:	0000a197 	.word	0x0000a197

00001c8c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c8c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c8e:	f04f 0240 	mov.w	r2, #64	; 0x40
    1c92:	f3ef 8311 	mrs	r3, BASEPRI
    1c96:	f382 8812 	msr	BASEPRI_MAX, r2
    1c9a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c9e:	f001 fd35 	bl	370c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1ca2:	4803      	ldr	r0, [pc, #12]	; (1cb0 <sys_reboot+0x24>)
    1ca4:	f006 feeb 	bl	8a7e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1ca8:	f000 fe66 	bl	2978 <arch_cpu_idle>
    1cac:	e7fc      	b.n	1ca8 <sys_reboot+0x1c>
    1cae:	bf00      	nop
    1cb0:	0000a19d 	.word	0x0000a19d

00001cb4 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    1cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1cb8:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    1cba:	460c      	mov	r4, r1
    1cbc:	b959      	cbnz	r1, 1cd6 <msg_process+0x22>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1cbe:	4d12      	ldr	r5, [pc, #72]	; (1d08 <msg_process+0x54>)
    1cc0:	4b12      	ldr	r3, [pc, #72]	; (1d0c <msg_process+0x58>)
	__ASSERT_NO_MSG(msg != NULL);
    1cc2:	4f13      	ldr	r7, [pc, #76]	; (1d10 <msg_process+0x5c>)
    1cc4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1d14 <msg_process+0x60>
    1cc8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 1d18 <msg_process+0x64>
	return __log_backends_end - __log_backends_start;
    1ccc:	1b5b      	subs	r3, r3, r5
    1cce:	ea4f 1823 	mov.w	r8, r3, asr #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1cd2:	4544      	cmp	r4, r8
    1cd4:	db01      	blt.n	1cda <msg_process+0x26>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (log_backend_is_active(backend) &&
    1cda:	4628      	mov	r0, r5
    1cdc:	f006 ffd7 	bl	8c8e <log_backend_is_active>
    1ce0:	b178      	cbz	r0, 1d02 <msg_process+0x4e>
	__ASSERT_NO_MSG(msg != NULL);
    1ce2:	b94e      	cbnz	r6, 1cf8 <msg_process+0x44>
    1ce4:	4649      	mov	r1, r9
    1ce6:	4650      	mov	r0, sl
    1ce8:	2386      	movs	r3, #134	; 0x86
    1cea:	463a      	mov	r2, r7
    1cec:	f006 ffc1 	bl	8c72 <assert_print>
    1cf0:	2186      	movs	r1, #134	; 0x86
    1cf2:	4638      	mov	r0, r7
    1cf4:	f006 ffb6 	bl	8c64 <assert_post_action>
	backend->api->process(backend, msg);
    1cf8:	682b      	ldr	r3, [r5, #0]
    1cfa:	4631      	mov	r1, r6
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	4628      	mov	r0, r5
    1d00:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1d02:	3401      	adds	r4, #1
    1d04:	3510      	adds	r5, #16
    1d06:	e7e4      	b.n	1cd2 <msg_process+0x1e>
    1d08:	0000985c 	.word	0x0000985c
    1d0c:	0000987c 	.word	0x0000987c
    1d10:	0000a1c6 	.word	0x0000a1c6
    1d14:	0000a1fe 	.word	0x0000a1fe
    1d18:	00009bef 	.word	0x00009bef

00001d1c <log_format_func_t_get>:
}
    1d1c:	4b01      	ldr	r3, [pc, #4]	; (1d24 <log_format_func_t_get+0x8>)
    1d1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1d22:	4770      	bx	lr
    1d24:	000098d8 	.word	0x000098d8

00001d28 <log_core_init>:
	panic_mode = false;
    1d28:	4a05      	ldr	r2, [pc, #20]	; (1d40 <log_core_init+0x18>)
    1d2a:	2300      	movs	r3, #0
    1d2c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1d2e:	4a05      	ldr	r2, [pc, #20]	; (1d44 <log_core_init+0x1c>)
    1d30:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1d32:	4b05      	ldr	r3, [pc, #20]	; (1d48 <log_core_init+0x20>)
    1d34:	4a05      	ldr	r2, [pc, #20]	; (1d4c <log_core_init+0x24>)
    1d36:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1d38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1d3c:	f000 ba8c 	b.w	2258 <log_output_timestamp_freq_set>
    1d40:	20000e6b 	.word	0x20000e6b
    1d44:	2000053c 	.word	0x2000053c
    1d48:	2000009c 	.word	0x2000009c
    1d4c:	00008c95 	.word	0x00008c95

00001d50 <log_init>:
{
    1d50:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    1d52:	4b19      	ldr	r3, [pc, #100]	; (1db8 <log_init+0x68>)
    1d54:	4c19      	ldr	r4, [pc, #100]	; (1dbc <log_init+0x6c>)
    1d56:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d58:	2c90      	cmp	r4, #144	; 0x90
    1d5a:	d90b      	bls.n	1d74 <log_init+0x24>
    1d5c:	4918      	ldr	r1, [pc, #96]	; (1dc0 <log_init+0x70>)
    1d5e:	4819      	ldr	r0, [pc, #100]	; (1dc4 <log_init+0x74>)
    1d60:	4a19      	ldr	r2, [pc, #100]	; (1dc8 <log_init+0x78>)
    1d62:	f240 2373 	movw	r3, #627	; 0x273
    1d66:	f006 ff84 	bl	8c72 <assert_print>
    1d6a:	4817      	ldr	r0, [pc, #92]	; (1dc8 <log_init+0x78>)
    1d6c:	f240 2173 	movw	r1, #627	; 0x273
    1d70:	f006 ff78 	bl	8c64 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1d74:	f3bf 8f5b 	dmb	ish
    1d78:	4b14      	ldr	r3, [pc, #80]	; (1dcc <log_init+0x7c>)
    1d7a:	e853 6f00 	ldrex	r6, [r3]
    1d7e:	1c72      	adds	r2, r6, #1
    1d80:	e843 2100 	strex	r1, r2, [r3]
    1d84:	2900      	cmp	r1, #0
    1d86:	d1f8      	bne.n	1d7a <log_init+0x2a>
    1d88:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1d8c:	b91e      	cbnz	r6, 1d96 <log_init+0x46>
    1d8e:	1125      	asrs	r5, r4, #4
    1d90:	4c09      	ldr	r4, [pc, #36]	; (1db8 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    1d92:	42ae      	cmp	r6, r5
    1d94:	db00      	blt.n	1d98 <log_init+0x48>
}
    1d96:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1d98:	7b23      	ldrb	r3, [r4, #12]
    1d9a:	b153      	cbz	r3, 1db2 <log_init+0x62>
			if (backend->api->init != NULL) {
    1d9c:	6823      	ldr	r3, [r4, #0]
    1d9e:	699b      	ldr	r3, [r3, #24]
    1da0:	b10b      	cbz	r3, 1da6 <log_init+0x56>
				backend->api->init(backend);
    1da2:	4620      	mov	r0, r4
    1da4:	4798      	blx	r3
			log_backend_enable(backend,
    1da6:	6863      	ldr	r3, [r4, #4]
    1da8:	2204      	movs	r2, #4
    1daa:	6819      	ldr	r1, [r3, #0]
    1dac:	4620      	mov	r0, r4
    1dae:	f000 f86f 	bl	1e90 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1db2:	3601      	adds	r6, #1
    1db4:	3410      	adds	r4, #16
    1db6:	e7ec      	b.n	1d92 <log_init+0x42>
    1db8:	0000985c 	.word	0x0000985c
    1dbc:	0000987c 	.word	0x0000987c
    1dc0:	0000a256 	.word	0x0000a256
    1dc4:	00009bef 	.word	0x00009bef
    1dc8:	0000a211 	.word	0x0000a211
    1dcc:	20000540 	.word	0x20000540

00001dd0 <z_impl_log_panic>:
{
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1dd2:	4f0c      	ldr	r7, [pc, #48]	; (1e04 <z_impl_log_panic+0x34>)
    1dd4:	783d      	ldrb	r5, [r7, #0]
    1dd6:	b94d      	cbnz	r5, 1dec <z_impl_log_panic+0x1c>
    1dd8:	4c0b      	ldr	r4, [pc, #44]	; (1e08 <z_impl_log_panic+0x38>)
    1dda:	4e0c      	ldr	r6, [pc, #48]	; (1e0c <z_impl_log_panic+0x3c>)
	log_init();
    1ddc:	f7ff ffb8 	bl	1d50 <log_init>
    1de0:	1b36      	subs	r6, r6, r4
    1de2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1de4:	42b5      	cmp	r5, r6
    1de6:	db02      	blt.n	1dee <z_impl_log_panic+0x1e>
	panic_mode = true;
    1de8:	2301      	movs	r3, #1
    1dea:	703b      	strb	r3, [r7, #0]
}
    1dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    1dee:	4620      	mov	r0, r4
    1df0:	f006 ff4d 	bl	8c8e <log_backend_is_active>
    1df4:	b118      	cbz	r0, 1dfe <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    1df6:	6823      	ldr	r3, [r4, #0]
    1df8:	4620      	mov	r0, r4
    1dfa:	695b      	ldr	r3, [r3, #20]
    1dfc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dfe:	3501      	adds	r5, #1
    1e00:	3410      	adds	r4, #16
    1e02:	e7ef      	b.n	1de4 <z_impl_log_panic+0x14>
    1e04:	20000e6b 	.word	0x20000e6b
    1e08:	0000985c 	.word	0x0000985c
    1e0c:	0000987c 	.word	0x0000987c

00001e10 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1e10:	4b01      	ldr	r3, [pc, #4]	; (1e18 <z_log_notify_backend_enabled+0x8>)
    1e12:	2201      	movs	r2, #1
    1e14:	701a      	strb	r2, [r3, #0]
}
    1e16:	4770      	bx	lr
    1e18:	20000e6a 	.word	0x20000e6a

00001e1c <z_log_dropped>:
    1e1c:	4b0c      	ldr	r3, [pc, #48]	; (1e50 <z_log_dropped+0x34>)
    1e1e:	f3bf 8f5b 	dmb	ish
    1e22:	e853 1f00 	ldrex	r1, [r3]
    1e26:	3101      	adds	r1, #1
    1e28:	e843 1200 	strex	r2, r1, [r3]
    1e2c:	2a00      	cmp	r2, #0
    1e2e:	d1f8      	bne.n	1e22 <z_log_dropped+0x6>
    1e30:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1e34:	b158      	cbz	r0, 1e4e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1e36:	f3bf 8f5b 	dmb	ish
    1e3a:	4b06      	ldr	r3, [pc, #24]	; (1e54 <z_log_dropped+0x38>)
    1e3c:	e853 1f00 	ldrex	r1, [r3]
    1e40:	3901      	subs	r1, #1
    1e42:	e843 1200 	strex	r2, r1, [r3]
    1e46:	2a00      	cmp	r2, #0
    1e48:	d1f8      	bne.n	1e3c <z_log_dropped+0x20>
    1e4a:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    1e4e:	4770      	bx	lr
    1e50:	2000053c 	.word	0x2000053c
    1e54:	20000538 	.word	0x20000538

00001e58 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    1e58:	4b05      	ldr	r3, [pc, #20]	; (1e70 <z_log_msg2_commit+0x18>)
{
    1e5a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1e5c:	681b      	ldr	r3, [r3, #0]
{
    1e5e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1e60:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1e62:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    1e64:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    1e66:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    1e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    1e6c:	f7ff bf22 	b.w	1cb4 <msg_process>
    1e70:	2000009c 	.word	0x2000009c

00001e74 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1e74:	4a04      	ldr	r2, [pc, #16]	; (1e88 <log_source_name_get+0x14>)
    1e76:	4b05      	ldr	r3, [pc, #20]	; (1e8c <log_source_name_get+0x18>)
    1e78:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1e7a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1e7e:	bf34      	ite	cc
    1e80:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1e84:	2000      	movcs	r0, #0
}
    1e86:	4770      	bx	lr
    1e88:	0000980c 	.word	0x0000980c
    1e8c:	0000985c 	.word	0x0000985c

00001e90 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1e90:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1e92:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    1e94:	4c0e      	ldr	r4, [pc, #56]	; (1ed0 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1e96:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    1e98:	1b04      	subs	r4, r0, r4
    1e9a:	1124      	asrs	r4, r4, #4
{
    1e9c:	4605      	mov	r5, r0
    1e9e:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    1ea0:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1ea2:	b963      	cbnz	r3, 1ebe <log_backend_enable+0x2e>
    1ea4:	490b      	ldr	r1, [pc, #44]	; (1ed4 <log_backend_enable+0x44>)
    1ea6:	4a0c      	ldr	r2, [pc, #48]	; (1ed8 <log_backend_enable+0x48>)
    1ea8:	480c      	ldr	r0, [pc, #48]	; (1edc <log_backend_enable+0x4c>)
    1eaa:	23bb      	movs	r3, #187	; 0xbb
    1eac:	f006 fee1 	bl	8c72 <assert_print>
    1eb0:	480b      	ldr	r0, [pc, #44]	; (1ee0 <log_backend_enable+0x50>)
    1eb2:	f006 fede 	bl	8c72 <assert_print>
    1eb6:	4808      	ldr	r0, [pc, #32]	; (1ed8 <log_backend_enable+0x48>)
    1eb8:	21bb      	movs	r1, #187	; 0xbb
    1eba:	f006 fed3 	bl	8c64 <assert_post_action>
	backend->cb->id = id;
    1ebe:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    1ec0:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    1ec2:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    1ec4:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    1ec6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    1ecc:	f7ff bfa0 	b.w	1e10 <z_log_notify_backend_enabled>
    1ed0:	0000985c 	.word	0x0000985c
    1ed4:	0000a2d6 	.word	0x0000a2d6
    1ed8:	0000a27e 	.word	0x0000a27e
    1edc:	00009bef 	.word	0x00009bef
    1ee0:	0000a2ec 	.word	0x0000a2ec

00001ee4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1ee4:	b40e      	push	{r1, r2, r3}
    1ee6:	b503      	push	{r0, r1, lr}
    1ee8:	ab03      	add	r3, sp, #12
    1eea:	4601      	mov	r1, r0
    1eec:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ef0:	4804      	ldr	r0, [pc, #16]	; (1f04 <print_formatted+0x20>)
	va_start(args, fmt);
    1ef2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ef4:	f7ff fb30 	bl	1558 <cbvprintf>
	va_end(args);

	return length;
}
    1ef8:	b002      	add	sp, #8
    1efa:	f85d eb04 	ldr.w	lr, [sp], #4
    1efe:	b003      	add	sp, #12
    1f00:	4770      	bx	lr
    1f02:	bf00      	nop
    1f04:	00008cc7 	.word	0x00008cc7

00001f08 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f0c:	b087      	sub	sp, #28
    1f0e:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f10:	f001 0301 	and.w	r3, r1, #1
{
    1f14:	9205      	str	r2, [sp, #20]
    1f16:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1f1a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f1e:	9304      	str	r3, [sp, #16]
{
    1f20:	4607      	mov	r7, r0
    1f22:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1f24:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1f28:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1f2c:	f006 fec9 	bl	8cc2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1f30:	4602      	mov	r2, r0
    1f32:	2800      	cmp	r0, #0
    1f34:	d044      	beq.n	1fc0 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1f36:	493a      	ldr	r1, [pc, #232]	; (2020 <prefix_print+0x118>)
    1f38:	4638      	mov	r0, r7
    1f3a:	f7ff ffd3 	bl	1ee4 <print_formatted>
    1f3e:	4605      	mov	r5, r0
	}

	if (stamp) {
    1f40:	f1bb 0f00 	cmp.w	fp, #0
    1f44:	d008      	beq.n	1f58 <prefix_print+0x50>
	if (!format) {
    1f46:	f018 0f44 	tst.w	r8, #68	; 0x44
    1f4a:	d13b      	bne.n	1fc4 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1f4c:	4935      	ldr	r1, [pc, #212]	; (2024 <prefix_print+0x11c>)
    1f4e:	4622      	mov	r2, r4
    1f50:	4638      	mov	r0, r7
    1f52:	f7ff ffc7 	bl	1ee4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1f56:	4405      	add	r5, r0
	if (color) {
    1f58:	9b04      	ldr	r3, [sp, #16]
    1f5a:	b153      	cbz	r3, 1f72 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1f5c:	4b32      	ldr	r3, [pc, #200]	; (2028 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1f5e:	4933      	ldr	r1, [pc, #204]	; (202c <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1f60:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1f64:	4b32      	ldr	r3, [pc, #200]	; (2030 <prefix_print+0x128>)
    1f66:	4638      	mov	r0, r7
    1f68:	2a00      	cmp	r2, #0
    1f6a:	bf08      	it	eq
    1f6c:	461a      	moveq	r2, r3
    1f6e:	f7ff ffb9 	bl	1ee4 <print_formatted>
	if (level_on) {
    1f72:	b13e      	cbz	r6, 1f84 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1f74:	4b2f      	ldr	r3, [pc, #188]	; (2034 <prefix_print+0x12c>)
    1f76:	4930      	ldr	r1, [pc, #192]	; (2038 <prefix_print+0x130>)
    1f78:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1f7c:	4638      	mov	r0, r7
    1f7e:	f7ff ffb1 	bl	1ee4 <print_formatted>
    1f82:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1f84:	f1ba 0f00 	cmp.w	sl, #0
    1f88:	db16      	blt.n	1fb8 <prefix_print+0xb0>
		total += print_formatted(output,
    1f8a:	9b05      	ldr	r3, [sp, #20]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d045      	beq.n	201c <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1f90:	2301      	movs	r3, #1
    1f92:	fa03 f309 	lsl.w	r3, r3, r9
		total += print_formatted(output,
    1f96:	f013 0f10 	tst.w	r3, #16
    1f9a:	4b28      	ldr	r3, [pc, #160]	; (203c <prefix_print+0x134>)
    1f9c:	4c28      	ldr	r4, [pc, #160]	; (2040 <prefix_print+0x138>)
    1f9e:	bf18      	it	ne
    1fa0:	461c      	movne	r4, r3
    1fa2:	4651      	mov	r1, sl
    1fa4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1fa8:	f7ff ff64 	bl	1e74 <log_source_name_get>
    1fac:	4621      	mov	r1, r4
    1fae:	4602      	mov	r2, r0
    1fb0:	4638      	mov	r0, r7
    1fb2:	f7ff ff97 	bl	1ee4 <print_formatted>
    1fb6:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1fb8:	1970      	adds	r0, r6, r5
    1fba:	b007      	add	sp, #28
    1fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1fc0:	4605      	mov	r5, r0
    1fc2:	e7bd      	b.n	1f40 <prefix_print+0x38>
	} else if (freq != 0U) {
    1fc4:	4b1f      	ldr	r3, [pc, #124]	; (2044 <prefix_print+0x13c>)
    1fc6:	6818      	ldr	r0, [r3, #0]
    1fc8:	2800      	cmp	r0, #0
    1fca:	d0c4      	beq.n	1f56 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1fcc:	4b1e      	ldr	r3, [pc, #120]	; (2048 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1fce:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1fd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1fdc:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1fe0:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1fe4:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1fe8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1fec:	fbb3 f2f1 	udiv	r2, r3, r1
    1ff0:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ff4:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1ff8:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ffc:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    2000:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2004:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    2008:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    200a:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    200e:	490f      	ldr	r1, [pc, #60]	; (204c <prefix_print+0x144>)
    2010:	e9cd e401 	strd	lr, r4, [sp, #4]
    2014:	4638      	mov	r0, r7
    2016:	f7ff ff65 	bl	1ee4 <print_formatted>
    201a:	e79c      	b.n	1f56 <prefix_print+0x4e>
		total += print_formatted(output,
    201c:	4c08      	ldr	r4, [pc, #32]	; (2040 <prefix_print+0x138>)
    201e:	e7c0      	b.n	1fa2 <prefix_print+0x9a>
    2020:	0000a31c 	.word	0x0000a31c
    2024:	0000a320 	.word	0x0000a320
    2028:	000098e4 	.word	0x000098e4
    202c:	0000a345 	.word	0x0000a345
    2030:	0000a30e 	.word	0x0000a30e
    2034:	000098f8 	.word	0x000098f8
    2038:	0000a348 	.word	0x0000a348
    203c:	0000a313 	.word	0x0000a313
    2040:	0000a317 	.word	0x0000a317
    2044:	20000544 	.word	0x20000544
    2048:	20000548 	.word	0x20000548
    204c:	0000a329 	.word	0x0000a329

00002050 <hexdump_line_print>:
{
    2050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2054:	461d      	mov	r5, r3
    2056:	9b08      	ldr	r3, [sp, #32]
    2058:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    205a:	06da      	lsls	r2, r3, #27
{
    205c:	4604      	mov	r4, r0
    205e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2060:	d405      	bmi.n	206e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2062:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2064:	bf4c      	ite	mi
    2066:	492a      	ldrmi	r1, [pc, #168]	; (2110 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2068:	492a      	ldrpl	r1, [pc, #168]	; (2114 <hexdump_line_print+0xc4>)
    206a:	f7ff ff3b 	bl	1ee4 <print_formatted>
		print_formatted(output, " ");
    206e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2118 <hexdump_line_print+0xc8>
{
    2072:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2076:	45a8      	cmp	r8, r5
    2078:	db2a      	blt.n	20d0 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    207a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 211c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    207e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2120 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2082:	f8df a094 	ldr.w	sl, [pc, #148]	; 2118 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2086:	2500      	movs	r5, #0
		if (i < length) {
    2088:	42bd      	cmp	r5, r7
    208a:	d22f      	bcs.n	20ec <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    208c:	5d72      	ldrb	r2, [r6, r5]
    208e:	4649      	mov	r1, r9
    2090:	4620      	mov	r0, r4
    2092:	f7ff ff27 	bl	1ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2096:	3501      	adds	r5, #1
    2098:	2d10      	cmp	r5, #16
    209a:	d120      	bne.n	20de <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    209c:	4921      	ldr	r1, [pc, #132]	; (2124 <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    209e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2118 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    20a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2128 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    20a6:	4620      	mov	r0, r4
    20a8:	f7ff ff1c 	bl	1ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    20ac:	2500      	movs	r5, #0
		if (i < length) {
    20ae:	42af      	cmp	r7, r5
    20b0:	d928      	bls.n	2104 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    20b2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    20b4:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    20b8:	2b5f      	cmp	r3, #95	; 0x5f
    20ba:	bf28      	it	cs
    20bc:	222e      	movcs	r2, #46	; 0x2e
    20be:	4649      	mov	r1, r9
    20c0:	4620      	mov	r0, r4
    20c2:	f7ff ff0f 	bl	1ee4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    20c6:	3501      	adds	r5, #1
    20c8:	2d10      	cmp	r5, #16
    20ca:	d114      	bne.n	20f6 <hexdump_line_print+0xa6>
}
    20cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    20d0:	4649      	mov	r1, r9
    20d2:	4620      	mov	r0, r4
    20d4:	f7ff ff06 	bl	1ee4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    20d8:	f108 0801 	add.w	r8, r8, #1
    20dc:	e7cb      	b.n	2076 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    20de:	076a      	lsls	r2, r5, #29
    20e0:	d1d2      	bne.n	2088 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    20e2:	4651      	mov	r1, sl
    20e4:	4620      	mov	r0, r4
    20e6:	f7ff fefd 	bl	1ee4 <print_formatted>
    20ea:	e7cd      	b.n	2088 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    20ec:	4641      	mov	r1, r8
    20ee:	4620      	mov	r0, r4
    20f0:	f7ff fef8 	bl	1ee4 <print_formatted>
    20f4:	e7cf      	b.n	2096 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    20f6:	076b      	lsls	r3, r5, #29
    20f8:	d1d9      	bne.n	20ae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    20fa:	4641      	mov	r1, r8
    20fc:	4620      	mov	r0, r4
    20fe:	f7ff fef1 	bl	1ee4 <print_formatted>
    2102:	e7d4      	b.n	20ae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2104:	4641      	mov	r1, r8
    2106:	4620      	mov	r0, r4
    2108:	f7ff feec 	bl	1ee4 <print_formatted>
    210c:	e7db      	b.n	20c6 <hexdump_line_print+0x76>
    210e:	bf00      	nop
    2110:	0000b431 	.word	0x0000b431
    2114:	0000a34e 	.word	0x0000a34e
    2118:	0000a359 	.word	0x0000a359
    211c:	0000a357 	.word	0x0000a357
    2120:	0000a351 	.word	0x0000a351
    2124:	0000a35b 	.word	0x0000a35b
    2128:	0000a35d 	.word	0x0000a35d

0000212c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    212c:	b538      	push	{r3, r4, r5, lr}
    212e:	460c      	mov	r4, r1
	if (color) {
    2130:	07e1      	lsls	r1, r4, #31
{
    2132:	4605      	mov	r5, r0
	if (color) {
    2134:	d503      	bpl.n	213e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2136:	4a08      	ldr	r2, [pc, #32]	; (2158 <postfix_print+0x2c>)
    2138:	4908      	ldr	r1, [pc, #32]	; (215c <postfix_print+0x30>)
    213a:	f7ff fed3 	bl	1ee4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    213e:	06e2      	lsls	r2, r4, #27
    2140:	d408      	bmi.n	2154 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2142:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2144:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2146:	bf4c      	ite	mi
    2148:	4905      	ldrmi	r1, [pc, #20]	; (2160 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    214a:	4906      	ldrpl	r1, [pc, #24]	; (2164 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    214c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2150:	f7ff bec8 	b.w	1ee4 <print_formatted>
}
    2154:	bd38      	pop	{r3, r4, r5, pc}
    2156:	bf00      	nop
    2158:	0000a30e 	.word	0x0000a30e
    215c:	0000a345 	.word	0x0000a345
    2160:	0000b431 	.word	0x0000b431
    2164:	0000a34e 	.word	0x0000a34e

00002168 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    216c:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    216e:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    2172:	4606      	mov	r6, r0
    2174:	460c      	mov	r4, r1
    2176:	4690      	mov	r8, r2
    2178:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    217c:	d05b      	beq.n	2236 <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    217e:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    2180:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    2182:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2186:	2b00      	cmp	r3, #0
    2188:	d052      	beq.n	2230 <log_output_msg2_process+0xc8>
    218a:	492c      	ldr	r1, [pc, #176]	; (223c <log_output_msg2_process+0xd4>)
    218c:	1a5b      	subs	r3, r3, r1
    218e:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2192:	e9cd 2301 	strd	r2, r3, [sp, #4]
    2196:	f8cd 9000 	str.w	r9, [sp]
    219a:	68a3      	ldr	r3, [r4, #8]
    219c:	2200      	movs	r2, #0
    219e:	4641      	mov	r1, r8
    21a0:	4630      	mov	r0, r6
    21a2:	f7ff feb1 	bl	1f08 <prefix_print>
    21a6:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    21a8:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    21aa:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    21ae:	f3c3 2349 	ubfx	r3, r3, #9, #10
    21b2:	b1c3      	cbz	r3, 21e6 <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    21b4:	4f22      	ldr	r7, [pc, #136]	; (2240 <log_output_msg2_process+0xd8>)
    21b6:	4823      	ldr	r0, [pc, #140]	; (2244 <log_output_msg2_process+0xdc>)
    21b8:	4923      	ldr	r1, [pc, #140]	; (2248 <log_output_msg2_process+0xe0>)
    21ba:	f1b9 0f00 	cmp.w	r9, #0
    21be:	bf08      	it	eq
    21c0:	4638      	moveq	r0, r7
    21c2:	462b      	mov	r3, r5
    21c4:	4632      	mov	r2, r6
    21c6:	f006 fc18 	bl	89fa <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    21ca:	2800      	cmp	r0, #0
    21cc:	da0b      	bge.n	21e6 <log_output_msg2_process+0x7e>
    21ce:	491f      	ldr	r1, [pc, #124]	; (224c <log_output_msg2_process+0xe4>)
    21d0:	481f      	ldr	r0, [pc, #124]	; (2250 <log_output_msg2_process+0xe8>)
    21d2:	4a20      	ldr	r2, [pc, #128]	; (2254 <log_output_msg2_process+0xec>)
    21d4:	f240 23b7 	movw	r3, #695	; 0x2b7
    21d8:	f006 fd4b 	bl	8c72 <assert_print>
    21dc:	481d      	ldr	r0, [pc, #116]	; (2254 <log_output_msg2_process+0xec>)
    21de:	f240 21b7 	movw	r1, #695	; 0x2b7
    21e2:	f006 fd3f 	bl	8c64 <assert_post_action>
	*len = msg->hdr.desc.data_len;
    21e6:	8867      	ldrh	r7, [r4, #2]
    21e8:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    21ec:	b197      	cbz	r7, 2214 <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    21ee:	6823      	ldr	r3, [r4, #0]
    21f0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    21f4:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    21f6:	2f10      	cmp	r7, #16
    21f8:	463c      	mov	r4, r7
    21fa:	bf28      	it	cs
    21fc:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    21fe:	4629      	mov	r1, r5
    2200:	f8cd 8000 	str.w	r8, [sp]
    2204:	4653      	mov	r3, sl
    2206:	4622      	mov	r2, r4
    2208:	4630      	mov	r0, r6
    220a:	f7ff ff21 	bl	2050 <hexdump_line_print>
	} while (len);
    220e:	1b3f      	subs	r7, r7, r4
		data += length;
    2210:	4425      	add	r5, r4
	} while (len);
    2212:	d1f0      	bne.n	21f6 <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2214:	f1b9 0f00 	cmp.w	r9, #0
    2218:	d004      	beq.n	2224 <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    221a:	464a      	mov	r2, r9
    221c:	4641      	mov	r1, r8
    221e:	4630      	mov	r0, r6
    2220:	f7ff ff84 	bl	212c <postfix_print>
	}

	log_output_flush(output);
    2224:	4630      	mov	r0, r6
}
    2226:	b004      	add	sp, #16
    2228:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    222c:	f006 bd73 	b.w	8d16 <log_output_flush>
		int16_t source_id = source ?
    2230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2234:	e7ad      	b.n	2192 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    2236:	46ca      	mov	sl, r9
    2238:	e7b6      	b.n	21a8 <log_output_msg2_process+0x40>
    223a:	bf00      	nop
    223c:	0000980c 	.word	0x0000980c
    2240:	00008ce3 	.word	0x00008ce3
    2244:	00008cc7 	.word	0x00008cc7
    2248:	00001559 	.word	0x00001559
    224c:	0000a39c 	.word	0x0000a39c
    2250:	00009bef 	.word	0x00009bef
    2254:	0000a360 	.word	0x0000a360

00002258 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2258:	4a08      	ldr	r2, [pc, #32]	; (227c <log_output_timestamp_freq_set+0x24>)
{
    225a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    225c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    225e:	4c08      	ldr	r4, [pc, #32]	; (2280 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2260:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2262:	2100      	movs	r1, #0
    2264:	42a0      	cmp	r0, r4
    2266:	d804      	bhi.n	2272 <log_output_timestamp_freq_set+0x1a>
    2268:	b101      	cbz	r1, 226c <log_output_timestamp_freq_set+0x14>
    226a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    226c:	4b05      	ldr	r3, [pc, #20]	; (2284 <log_output_timestamp_freq_set+0x2c>)
    226e:	6018      	str	r0, [r3, #0]
}
    2270:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2272:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2274:	005b      	lsls	r3, r3, #1
    2276:	2101      	movs	r1, #1
    2278:	e7f4      	b.n	2264 <log_output_timestamp_freq_set+0xc>
    227a:	bf00      	nop
    227c:	20000548 	.word	0x20000548
    2280:	000f4240 	.word	0x000f4240
    2284:	20000544 	.word	0x20000544

00002288 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    228c:	b085      	sub	sp, #20
    228e:	af02      	add	r7, sp, #8
    2290:	e9d7 a60d 	ldrd	sl, r6, [r7, #52]	; 0x34
    2294:	4604      	mov	r4, r0
    2296:	4688      	mov	r8, r1
    2298:	4693      	mov	fp, r2
    229a:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    229c:	2e00      	cmp	r6, #0
    229e:	d04d      	beq.n	233c <z_impl_z_log_msg2_runtime_vcreate+0xb4>
		va_list ap2;

		va_copy(ap2, ap);
    22a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22a2:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    22a4:	9300      	str	r3, [sp, #0]
    22a6:	4652      	mov	r2, sl
    22a8:	4633      	mov	r3, r6
    22aa:	2110      	movs	r1, #16
    22ac:	2000      	movs	r0, #0
    22ae:	f7fe fba7 	bl	a00 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    22b2:	1e05      	subs	r5, r0, #0
    22b4:	da09      	bge.n	22ca <z_impl_z_log_msg2_runtime_vcreate+0x42>
    22b6:	4922      	ldr	r1, [pc, #136]	; (2340 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    22b8:	4822      	ldr	r0, [pc, #136]	; (2344 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    22ba:	4a23      	ldr	r2, [pc, #140]	; (2348 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    22bc:	2367      	movs	r3, #103	; 0x67
    22be:	f006 fcd8 	bl	8c72 <assert_print>
    22c2:	4821      	ldr	r0, [pc, #132]	; (2348 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    22c4:	2167      	movs	r1, #103	; 0x67
    22c6:	f006 fccd 	bl	8c64 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    22ca:	4b20      	ldr	r3, [pc, #128]	; (234c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    22cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    22ce:	f004 0407 	and.w	r4, r4, #7
    22d2:	f00b 0b07 	and.w	fp, fp, #7
    22d6:	00e4      	lsls	r4, r4, #3
    22d8:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    22dc:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    22e0:	431c      	orrs	r4, r3
    22e2:	4b1b      	ldr	r3, [pc, #108]	; (2350 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    22e4:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    22e8:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    22ea:	4613      	mov	r3, r2
    22ec:	3317      	adds	r3, #23
    22ee:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    22f0:	f023 0307 	bic.w	r3, r3, #7
    22f4:	ebad 0d03 	sub.w	sp, sp, r3
    22f8:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    22fc:	b1a6      	cbz	r6, 2328 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    22fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2300:	9300      	str	r3, [sp, #0]
    2302:	4652      	mov	r2, sl
    2304:	4633      	mov	r3, r6
    2306:	4629      	mov	r1, r5
    2308:	f10b 0010 	add.w	r0, fp, #16
    230c:	f7fe fb78 	bl	a00 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2310:	2800      	cmp	r0, #0
    2312:	da09      	bge.n	2328 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
    2314:	490a      	ldr	r1, [pc, #40]	; (2340 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    2316:	480b      	ldr	r0, [pc, #44]	; (2344 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    2318:	4a0b      	ldr	r2, [pc, #44]	; (2348 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    231a:	2381      	movs	r3, #129	; 0x81
    231c:	f006 fca9 	bl	8c72 <assert_print>
    2320:	4809      	ldr	r0, [pc, #36]	; (2348 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    2322:	2181      	movs	r1, #129	; 0x81
    2324:	f006 fc9e 	bl	8c64 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2328:	464b      	mov	r3, r9
    232a:	4622      	mov	r2, r4
    232c:	4641      	mov	r1, r8
    232e:	4658      	mov	r0, fp
    2330:	f006 fcfe 	bl	8d30 <z_log_msg2_finalize>
	}
}
    2334:	370c      	adds	r7, #12
    2336:	46bd      	mov	sp, r7
    2338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    233c:	4635      	mov	r5, r6
    233e:	e7c4      	b.n	22ca <z_impl_z_log_msg2_runtime_vcreate+0x42>
    2340:	0000a3f2 	.word	0x0000a3f2
    2344:	00009bef 	.word	0x00009bef
    2348:	0000a3c5 	.word	0x0000a3c5
    234c:	0007fe00 	.word	0x0007fe00
    2350:	7ff80000 	.word	0x7ff80000

00002354 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    2356:	4f07      	ldr	r7, [pc, #28]	; (2374 <char_out+0x20>)
{
    2358:	460d      	mov	r5, r1
    235a:	4604      	mov	r4, r0
    235c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    235e:	42b4      	cmp	r4, r6
    2360:	d101      	bne.n	2366 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2362:	4628      	mov	r0, r5
    2364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2366:	6838      	ldr	r0, [r7, #0]
    2368:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    236c:	6883      	ldr	r3, [r0, #8]
    236e:	685b      	ldr	r3, [r3, #4]
    2370:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2372:	e7f4      	b.n	235e <char_out+0xa>
    2374:	20000564 	.word	0x20000564

00002378 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2378:	4b01      	ldr	r3, [pc, #4]	; (2380 <format_set+0x8>)
	return 0;
}
    237a:	2000      	movs	r0, #0
	log_format_current = log_type;
    237c:	6019      	str	r1, [r3, #0]
}
    237e:	4770      	bx	lr
    2380:	20000554 	.word	0x20000554

00002384 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2384:	4b02      	ldr	r3, [pc, #8]	; (2390 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2386:	4803      	ldr	r0, [pc, #12]	; (2394 <panic+0x10>)
    2388:	2201      	movs	r2, #1
    238a:	701a      	strb	r2, [r3, #0]
    238c:	f006 bcc3 	b.w	8d16 <log_output_flush>
    2390:	20000e6c 	.word	0x20000e6c
    2394:	0000992c 	.word	0x0000992c

00002398 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2398:	4b06      	ldr	r3, [pc, #24]	; (23b4 <process+0x1c>)
{
    239a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    239c:	6818      	ldr	r0, [r3, #0]
{
    239e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    23a0:	f7ff fcbc 	bl	1d1c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    23a4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    23a6:	4603      	mov	r3, r0
}
    23a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    23ac:	4802      	ldr	r0, [pc, #8]	; (23b8 <process+0x20>)
    23ae:	220f      	movs	r2, #15
    23b0:	4718      	bx	r3
    23b2:	bf00      	nop
    23b4:	20000554 	.word	0x20000554
    23b8:	0000992c 	.word	0x0000992c

000023bc <log_backend_uart_init>:
{
    23bc:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    23be:	4b09      	ldr	r3, [pc, #36]	; (23e4 <log_backend_uart_init+0x28>)
    23c0:	4809      	ldr	r0, [pc, #36]	; (23e8 <log_backend_uart_init+0x2c>)
    23c2:	6018      	str	r0, [r3, #0]
    23c4:	f007 f82b 	bl	941e <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    23c8:	b958      	cbnz	r0, 23e2 <log_backend_uart_init+0x26>
    23ca:	4908      	ldr	r1, [pc, #32]	; (23ec <log_backend_uart_init+0x30>)
    23cc:	4808      	ldr	r0, [pc, #32]	; (23f0 <log_backend_uart_init+0x34>)
    23ce:	4a09      	ldr	r2, [pc, #36]	; (23f4 <log_backend_uart_init+0x38>)
    23d0:	2379      	movs	r3, #121	; 0x79
    23d2:	f006 fc4e 	bl	8c72 <assert_print>
}
    23d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    23da:	4806      	ldr	r0, [pc, #24]	; (23f4 <log_backend_uart_init+0x38>)
    23dc:	2179      	movs	r1, #121	; 0x79
    23de:	f006 bc41 	b.w	8c64 <assert_post_action>
}
    23e2:	bd08      	pop	{r3, pc}
    23e4:	20000564 	.word	0x20000564
    23e8:	0000965c 	.word	0x0000965c
    23ec:	0000a431 	.word	0x0000a431
    23f0:	00009bef 	.word	0x00009bef
    23f4:	0000a3fc 	.word	0x0000a3fc

000023f8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    23f8:	4b01      	ldr	r3, [pc, #4]	; (2400 <log_backend_rtt_init+0x8>)
    23fa:	2201      	movs	r2, #1
    23fc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    23fe:	4770      	bx	lr
    2400:	20000e6f 	.word	0x20000e6f

00002404 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2404:	4b01      	ldr	r3, [pc, #4]	; (240c <format_set+0x8>)
	return 0;
}
    2406:	2000      	movs	r0, #0
	log_format_current = log_type;
    2408:	6019      	str	r1, [r3, #0]
}
    240a:	4770      	bx	lr
    240c:	20000570 	.word	0x20000570

00002410 <panic>:
	panic_mode = true;
    2410:	4b02      	ldr	r3, [pc, #8]	; (241c <panic+0xc>)
    2412:	4803      	ldr	r0, [pc, #12]	; (2420 <panic+0x10>)
    2414:	2201      	movs	r2, #1
    2416:	701a      	strb	r2, [r3, #0]
    2418:	f006 bc7d 	b.w	8d16 <log_output_flush>
    241c:	20000e70 	.word	0x20000e70
    2420:	0000995c 	.word	0x0000995c

00002424 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2424:	4b06      	ldr	r3, [pc, #24]	; (2440 <process+0x1c>)
{
    2426:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2428:	6818      	ldr	r0, [r3, #0]
{
    242a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    242c:	f7ff fc76 	bl	1d1c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2430:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2432:	4603      	mov	r3, r0
}
    2434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2438:	4802      	ldr	r0, [pc, #8]	; (2444 <process+0x20>)
    243a:	220f      	movs	r2, #15
    243c:	4718      	bx	r3
    243e:	bf00      	nop
    2440:	20000570 	.word	0x20000570
    2444:	0000995c 	.word	0x0000995c

00002448 <data_out_block_mode>:
{
    2448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    244a:	4d19      	ldr	r5, [pc, #100]	; (24b0 <data_out_block_mode+0x68>)
    244c:	4607      	mov	r7, r0
    244e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2450:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2452:	4632      	mov	r2, r6
    2454:	4639      	mov	r1, r7
    2456:	2000      	movs	r0, #0
    2458:	f003 fae6 	bl	5a28 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    245c:	b1c8      	cbz	r0, 2492 <data_out_block_mode+0x4a>
	host_present = true;
    245e:	2301      	movs	r3, #1
    2460:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2462:	4b14      	ldr	r3, [pc, #80]	; (24b4 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	b92b      	cbnz	r3, 2474 <data_out_block_mode+0x2c>
}
    2468:	4630      	mov	r0, r6
    246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    246c:	b95c      	cbnz	r4, 2486 <data_out_block_mode+0x3e>
		host_present = false;
    246e:	702c      	strb	r4, [r5, #0]
    2470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2474:	2000      	movs	r0, #0
    2476:	f003 fb25 	bl	5ac4 <SEGGER_RTT_HasDataUp>
    247a:	2800      	cmp	r0, #0
    247c:	d0f4      	beq.n	2468 <data_out_block_mode+0x20>
    247e:	782b      	ldrb	r3, [r5, #0]
    2480:	2b00      	cmp	r3, #0
    2482:	d1f3      	bne.n	246c <data_out_block_mode+0x24>
    2484:	e7f0      	b.n	2468 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2486:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2488:	f241 3088 	movw	r0, #5000	; 0x1388
    248c:	f007 f84b 	bl	9526 <z_impl_k_busy_wait>
}
    2490:	e7f0      	b.n	2474 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2492:	782b      	ldrb	r3, [r5, #0]
    2494:	b113      	cbz	r3, 249c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2496:	3c01      	subs	r4, #1
    2498:	d104      	bne.n	24a4 <data_out_block_mode+0x5c>
		host_present = false;
    249a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    249c:	782b      	ldrb	r3, [r5, #0]
    249e:	2b00      	cmp	r3, #0
    24a0:	d1d7      	bne.n	2452 <data_out_block_mode+0xa>
    24a2:	e7e1      	b.n	2468 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    24a4:	f241 3088 	movw	r0, #5000	; 0x1388
    24a8:	f007 f83d 	bl	9526 <z_impl_k_busy_wait>
}
    24ac:	e7f6      	b.n	249c <data_out_block_mode+0x54>
    24ae:	bf00      	nop
    24b0:	20000e6f 	.word	0x20000e6f
    24b4:	20000e70 	.word	0x20000e70

000024b8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    24b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24bc:	4605      	mov	r5, r0
    24be:	f04f 0340 	mov.w	r3, #64	; 0x40
    24c2:	f3ef 8611 	mrs	r6, BASEPRI
    24c6:	f383 8812 	msr	BASEPRI_MAX, r3
    24ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    24ce:	4822      	ldr	r0, [pc, #136]	; (2558 <pm_state_notify+0xa0>)
    24d0:	f003 feda 	bl	6288 <z_spin_lock_valid>
    24d4:	b968      	cbnz	r0, 24f2 <pm_state_notify+0x3a>
    24d6:	4a21      	ldr	r2, [pc, #132]	; (255c <pm_state_notify+0xa4>)
    24d8:	4921      	ldr	r1, [pc, #132]	; (2560 <pm_state_notify+0xa8>)
    24da:	4822      	ldr	r0, [pc, #136]	; (2564 <pm_state_notify+0xac>)
    24dc:	238e      	movs	r3, #142	; 0x8e
    24de:	f006 fbc8 	bl	8c72 <assert_print>
    24e2:	491d      	ldr	r1, [pc, #116]	; (2558 <pm_state_notify+0xa0>)
    24e4:	4820      	ldr	r0, [pc, #128]	; (2568 <pm_state_notify+0xb0>)
    24e6:	f006 fbc4 	bl	8c72 <assert_print>
    24ea:	481c      	ldr	r0, [pc, #112]	; (255c <pm_state_notify+0xa4>)
    24ec:	218e      	movs	r1, #142	; 0x8e
    24ee:	f006 fbb9 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    24f2:	4819      	ldr	r0, [pc, #100]	; (2558 <pm_state_notify+0xa0>)
    24f4:	f003 fee6 	bl	62c4 <z_spin_lock_set_owner>
	return list->head;
    24f8:	4b1c      	ldr	r3, [pc, #112]	; (256c <pm_state_notify+0xb4>)
    24fa:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24fc:	b19c      	cbz	r4, 2526 <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    24fe:	4f1c      	ldr	r7, [pc, #112]	; (2570 <pm_state_notify+0xb8>)
    2500:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2574 <pm_state_notify+0xbc>
    2504:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2508:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    250c:	2d00      	cmp	r5, #0
    250e:	bf08      	it	eq
    2510:	4613      	moveq	r3, r2
		if (callback) {
    2512:	b12b      	cbz	r3, 2520 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2514:	f898 2014 	ldrb.w	r2, [r8, #20]
    2518:	fb09 f202 	mul.w	r2, r9, r2
    251c:	5cb8      	ldrb	r0, [r7, r2]
    251e:	4798      	blx	r3
	return node->next;
    2520:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2522:	2c00      	cmp	r4, #0
    2524:	d1f0      	bne.n	2508 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2526:	480c      	ldr	r0, [pc, #48]	; (2558 <pm_state_notify+0xa0>)
    2528:	f003 febc 	bl	62a4 <z_spin_unlock_valid>
    252c:	b968      	cbnz	r0, 254a <pm_state_notify+0x92>
    252e:	4a0b      	ldr	r2, [pc, #44]	; (255c <pm_state_notify+0xa4>)
    2530:	4911      	ldr	r1, [pc, #68]	; (2578 <pm_state_notify+0xc0>)
    2532:	480c      	ldr	r0, [pc, #48]	; (2564 <pm_state_notify+0xac>)
    2534:	23b9      	movs	r3, #185	; 0xb9
    2536:	f006 fb9c 	bl	8c72 <assert_print>
    253a:	4907      	ldr	r1, [pc, #28]	; (2558 <pm_state_notify+0xa0>)
    253c:	480f      	ldr	r0, [pc, #60]	; (257c <pm_state_notify+0xc4>)
    253e:	f006 fb98 	bl	8c72 <assert_print>
    2542:	4806      	ldr	r0, [pc, #24]	; (255c <pm_state_notify+0xa4>)
    2544:	21b9      	movs	r1, #185	; 0xb9
    2546:	f006 fb8d 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    254a:	f386 8811 	msr	BASEPRI, r6
    254e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2556:	bf00      	nop
    2558:	20000580 	.word	0x20000580
    255c:	00009f8a 	.word	0x00009f8a
    2560:	00009fe3 	.word	0x00009fe3
    2564:	00009bef 	.word	0x00009bef
    2568:	00009ff8 	.word	0x00009ff8
    256c:	20000584 	.word	0x20000584
    2570:	2000058c 	.word	0x2000058c
    2574:	20000c30 	.word	0x20000c30
    2578:	00009fb7 	.word	0x00009fb7
    257c:	00009fce 	.word	0x00009fce

00002580 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2580:	0941      	lsrs	r1, r0, #5
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2582:	4a0a      	ldr	r2, [pc, #40]	; (25ac <atomic_clear_bit.constprop.0+0x2c>)
    2584:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2588:	f000 001f 	and.w	r0, r0, #31
    258c:	2301      	movs	r3, #1
    258e:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2590:	43db      	mvns	r3, r3
    2592:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2596:	e852 0f00 	ldrex	r0, [r2]
    259a:	4018      	ands	r0, r3
    259c:	e842 0100 	strex	r1, r0, [r2]
    25a0:	2900      	cmp	r1, #0
    25a2:	d1f8      	bne.n	2596 <atomic_clear_bit.constprop.0+0x16>
    25a4:	f3bf 8f5b 	dmb	ish
}
    25a8:	4770      	bx	lr
    25aa:	bf00      	nop
    25ac:	20000598 	.word	0x20000598

000025b0 <pm_system_resume>:

void pm_system_resume(void)
{
    25b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    25b2:	4b19      	ldr	r3, [pc, #100]	; (2618 <pm_system_resume+0x68>)
    25b4:	7d1c      	ldrb	r4, [r3, #20]
    25b6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    25ba:	f004 031f 	and.w	r3, r4, #31
    25be:	2201      	movs	r2, #1
    25c0:	409a      	lsls	r2, r3
    25c2:	4b16      	ldr	r3, [pc, #88]	; (261c <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    25c4:	0961      	lsrs	r1, r4, #5
    25c6:	43d0      	mvns	r0, r2
    25c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    25cc:	e853 1f00 	ldrex	r1, [r3]
    25d0:	ea01 0500 	and.w	r5, r1, r0
    25d4:	e843 5600 	strex	r6, r5, [r3]
    25d8:	2e00      	cmp	r6, #0
    25da:	d1f7      	bne.n	25cc <pm_system_resume+0x1c>
    25dc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    25e0:	4211      	tst	r1, r2
    25e2:	d013      	beq.n	260c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    25e4:	4b0e      	ldr	r3, [pc, #56]	; (2620 <pm_system_resume+0x70>)
    25e6:	4d0f      	ldr	r5, [pc, #60]	; (2624 <pm_system_resume+0x74>)
    25e8:	b18b      	cbz	r3, 260e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    25ea:	230c      	movs	r3, #12
    25ec:	4363      	muls	r3, r4
    25ee:	18ea      	adds	r2, r5, r3
    25f0:	5ce8      	ldrb	r0, [r5, r3]
    25f2:	7851      	ldrb	r1, [r2, #1]
    25f4:	f006 fc42 	bl	8e7c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    25f8:	2000      	movs	r0, #0
    25fa:	f7ff ff5d 	bl	24b8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    25fe:	230c      	movs	r3, #12
    2600:	435c      	muls	r4, r3
    2602:	192a      	adds	r2, r5, r4
    2604:	2300      	movs	r3, #0
    2606:	512b      	str	r3, [r5, r4]
    2608:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    260c:	bd70      	pop	{r4, r5, r6, pc}
    260e:	f383 8811 	msr	BASEPRI, r3
    2612:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2616:	e7ef      	b.n	25f8 <pm_system_resume+0x48>
    2618:	20000c30 	.word	0x20000c30
    261c:	2000059c 	.word	0x2000059c
    2620:	00008e7d 	.word	0x00008e7d
    2624:	2000058c 	.word	0x2000058c

00002628 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    262c:	4b31      	ldr	r3, [pc, #196]	; (26f4 <pm_system_suspend+0xcc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    262e:	4a32      	ldr	r2, [pc, #200]	; (26f8 <pm_system_suspend+0xd0>)
    2630:	7d1c      	ldrb	r4, [r3, #20]
    2632:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2636:	0963      	lsrs	r3, r4, #5
    2638:	ea4f 0983 	mov.w	r9, r3, lsl #2
    263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2640:	4e2e      	ldr	r6, [pc, #184]	; (26fc <pm_system_suspend+0xd4>)
    2642:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2646:	f004 081f 	and.w	r8, r4, #31
    264a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    264e:	f013 0f01 	tst.w	r3, #1
{
    2652:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2654:	d10a      	bne.n	266c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2656:	4601      	mov	r1, r0
    2658:	4620      	mov	r0, r4
    265a:	f000 f867 	bl	272c <pm_policy_next_state>
		if (info != NULL) {
    265e:	b128      	cbz	r0, 266c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2660:	c807      	ldmia	r0, {r0, r1, r2}
    2662:	230c      	movs	r3, #12
    2664:	fb03 6304 	mla	r3, r3, r4, r6
    2668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    266c:	230c      	movs	r3, #12
    266e:	4363      	muls	r3, r4
    2670:	18f2      	adds	r2, r6, r3
    2672:	5cf5      	ldrb	r5, [r6, r3]
    2674:	b92d      	cbnz	r5, 2682 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2676:	4620      	mov	r0, r4
    2678:	f7ff ff82 	bl	2580 <atomic_clear_bit.constprop.0>
		ret = false;
    267c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    267e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2682:	1c7b      	adds	r3, r7, #1
    2684:	d00f      	beq.n	26a6 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2686:	f8d2 c008 	ldr.w	ip, [r2, #8]
    268a:	481d      	ldr	r0, [pc, #116]	; (2700 <pm_system_suspend+0xd8>)
    268c:	4a1d      	ldr	r2, [pc, #116]	; (2704 <pm_system_suspend+0xdc>)
    268e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2692:	2100      	movs	r1, #0
    2694:	2300      	movs	r3, #0
    2696:	fbec 0105 	umlal	r0, r1, ip, r5
    269a:	f7fd ff13 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    269e:	2101      	movs	r1, #1
    26a0:	1a38      	subs	r0, r7, r0
    26a2:	f005 fbd7 	bl	7e54 <z_set_timeout_expiry>
	k_sched_lock();
    26a6:	f004 f9d3 	bl	6a50 <k_sched_lock>
	pm_state_notify(true);
    26aa:	2001      	movs	r0, #1
    26ac:	f7ff ff04 	bl	24b8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26b0:	f3bf 8f5b 	dmb	ish
    26b4:	4b14      	ldr	r3, [pc, #80]	; (2708 <pm_system_suspend+0xe0>)
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26b6:	2201      	movs	r2, #1
    26b8:	fa02 f208 	lsl.w	r2, r2, r8
    26bc:	444b      	add	r3, r9
    26be:	e853 0f00 	ldrex	r0, [r3]
    26c2:	4310      	orrs	r0, r2
    26c4:	e843 0100 	strex	r1, r0, [r3]
    26c8:	2900      	cmp	r1, #0
    26ca:	d1f8      	bne.n	26be <pm_system_suspend+0x96>
    26cc:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    26d0:	4b0e      	ldr	r3, [pc, #56]	; (270c <pm_system_suspend+0xe4>)
    26d2:	b133      	cbz	r3, 26e2 <pm_system_suspend+0xba>
		pm_state_set(info->state, info->substate_id);
    26d4:	230c      	movs	r3, #12
    26d6:	4363      	muls	r3, r4
    26d8:	18f2      	adds	r2, r6, r3
    26da:	5cf0      	ldrb	r0, [r6, r3]
    26dc:	7851      	ldrb	r1, [r2, #1]
    26de:	f006 fbc1 	bl	8e64 <pm_state_set>
	pm_system_resume();
    26e2:	f7ff ff65 	bl	25b0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    26e6:	4620      	mov	r0, r4
    26e8:	f7ff ff4a 	bl	2580 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    26ec:	f004 fe94 	bl	7418 <k_sched_unlock>
	bool ret = true;
    26f0:	2001      	movs	r0, #1
    26f2:	e7c4      	b.n	267e <pm_system_suspend+0x56>
    26f4:	20000c30 	.word	0x20000c30
    26f8:	20000598 	.word	0x20000598
    26fc:	2000058c 	.word	0x2000058c
    2700:	000f423f 	.word	0x000f423f
    2704:	000f4240 	.word	0x000f4240
    2708:	2000059c 	.word	0x2000059c
    270c:	00008e65 	.word	0x00008e65

00002710 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2710:	4b05      	ldr	r3, [pc, #20]	; (2728 <pm_policy_state_lock_is_active+0x18>)
    2712:	f3bf 8f5b 	dmb	ish
    2716:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    271a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    271e:	3800      	subs	r0, #0
    2720:	bf18      	it	ne
    2722:	2001      	movne	r0, #1
    2724:	4770      	bx	lr
    2726:	bf00      	nop
    2728:	200005a0 	.word	0x200005a0

0000272c <pm_policy_next_state>:
{
    272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2730:	b085      	sub	sp, #20
    2732:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2734:	a903      	add	r1, sp, #12
    2736:	f000 f847 	bl	27c8 <pm_state_cpu_get_all>
    273a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 27bc <pm_policy_next_state+0x90>
    273e:	f8df a080 	ldr.w	sl, [pc, #128]	; 27c0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2742:	1e44      	subs	r4, r0, #1
    2744:	b224      	sxth	r4, r4
    2746:	f04f 0b00 	mov.w	fp, #0
    274a:	1c63      	adds	r3, r4, #1
    274c:	d104      	bne.n	2758 <pm_policy_next_state+0x2c>
	return NULL;
    274e:	2600      	movs	r6, #0
}
    2750:	4630      	mov	r0, r6
    2752:	b005      	add	sp, #20
    2754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2758:	9a03      	ldr	r2, [sp, #12]
    275a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    275e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2762:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2766:	f7ff ffd3 	bl	2710 <pm_policy_state_lock_is_active>
    276a:	4605      	mov	r5, r0
    276c:	bb10      	cbnz	r0, 27b4 <pm_policy_next_state+0x88>
    276e:	6870      	ldr	r0, [r6, #4]
    2770:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2774:	46c4      	mov	ip, r8
    2776:	4629      	mov	r1, r5
    2778:	fbe0 c109 	umlal	ip, r1, r0, r9
    277c:	4652      	mov	r2, sl
    277e:	465b      	mov	r3, fp
    2780:	4660      	mov	r0, ip
    2782:	f7fd fe9f 	bl	4c4 <__aeabi_uldivmod>
    2786:	9001      	str	r0, [sp, #4]
    2788:	68b0      	ldr	r0, [r6, #8]
    278a:	46c4      	mov	ip, r8
    278c:	4629      	mov	r1, r5
    278e:	fbe0 c109 	umlal	ip, r1, r0, r9
    2792:	465b      	mov	r3, fp
    2794:	4652      	mov	r2, sl
    2796:	4660      	mov	r0, ip
    2798:	f7fd fe94 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    279c:	4b09      	ldr	r3, [pc, #36]	; (27c4 <pm_policy_next_state+0x98>)
    279e:	681b      	ldr	r3, [r3, #0]
    27a0:	1c59      	adds	r1, r3, #1
    27a2:	d001      	beq.n	27a8 <pm_policy_next_state+0x7c>
    27a4:	4283      	cmp	r3, r0
    27a6:	d905      	bls.n	27b4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    27a8:	1c7a      	adds	r2, r7, #1
    27aa:	d0d1      	beq.n	2750 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    27ac:	9b01      	ldr	r3, [sp, #4]
    27ae:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    27b0:	42b8      	cmp	r0, r7
    27b2:	d9cd      	bls.n	2750 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    27b4:	3c01      	subs	r4, #1
    27b6:	b224      	sxth	r4, r4
    27b8:	e7c7      	b.n	274a <pm_policy_next_state+0x1e>
    27ba:	bf00      	nop
    27bc:	000f423f 	.word	0x000f423f
    27c0:	000f4240 	.word	0x000f4240
    27c4:	200000a0 	.word	0x200000a0

000027c8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    27c8:	b908      	cbnz	r0, 27ce <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    27ca:	4b02      	ldr	r3, [pc, #8]	; (27d4 <pm_state_cpu_get_all+0xc>)
    27cc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    27ce:	2000      	movs	r0, #0
    27d0:	4770      	bx	lr
    27d2:	bf00      	nop
    27d4:	0000996c 	.word	0x0000996c

000027d8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    27d8:	4801      	ldr	r0, [pc, #4]	; (27e0 <nrf_cc3xx_platform_abort_init+0x8>)
    27da:	f005 bf7f 	b.w	86dc <nrf_cc3xx_platform_set_abort>
    27de:	bf00      	nop
    27e0:	0000996c 	.word	0x0000996c

000027e4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    27e4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    27e6:	4604      	mov	r4, r0
    27e8:	b918      	cbnz	r0, 27f2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    27ea:	4b0d      	ldr	r3, [pc, #52]	; (2820 <mutex_free_platform+0x3c>)
    27ec:	480d      	ldr	r0, [pc, #52]	; (2824 <mutex_free_platform+0x40>)
    27ee:	685b      	ldr	r3, [r3, #4]
    27f0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    27f2:	6861      	ldr	r1, [r4, #4]
    27f4:	2908      	cmp	r1, #8
    27f6:	d00d      	beq.n	2814 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    27f8:	f031 0304 	bics.w	r3, r1, #4
    27fc:	d00a      	beq.n	2814 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    27fe:	f011 0102 	ands.w	r1, r1, #2
    2802:	d008      	beq.n	2816 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2804:	4808      	ldr	r0, [pc, #32]	; (2828 <mutex_free_platform+0x44>)
    2806:	4621      	mov	r1, r4
    2808:	f003 fb9e 	bl	5f48 <k_mem_slab_free>
        mutex->mutex = NULL;
    280c:	2300      	movs	r3, #0
    280e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2810:	2300      	movs	r3, #0
    2812:	6063      	str	r3, [r4, #4]
}
    2814:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2816:	6820      	ldr	r0, [r4, #0]
    2818:	2214      	movs	r2, #20
    281a:	f006 fb17 	bl	8e4c <memset>
    281e:	e7f7      	b.n	2810 <mutex_free_platform+0x2c>
    2820:	2000017c 	.word	0x2000017c
    2824:	0000a478 	.word	0x0000a478
    2828:	200005bc 	.word	0x200005bc

0000282c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    282c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    282e:	b308      	cbz	r0, 2874 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2830:	6843      	ldr	r3, [r0, #4]
    2832:	2b04      	cmp	r3, #4
    2834:	d110      	bne.n	2858 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2836:	2201      	movs	r2, #1
    2838:	6803      	ldr	r3, [r0, #0]
    283a:	f3bf 8f5b 	dmb	ish
    283e:	e853 1f00 	ldrex	r1, [r3]
    2842:	2900      	cmp	r1, #0
    2844:	d103      	bne.n	284e <mutex_lock_platform+0x22>
    2846:	e843 2000 	strex	r0, r2, [r3]
    284a:	2800      	cmp	r0, #0
    284c:	d1f7      	bne.n	283e <mutex_lock_platform+0x12>
    284e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2852:	d10b      	bne.n	286c <mutex_lock_platform+0x40>
    2854:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2856:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2858:	b153      	cbz	r3, 2870 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    285a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    285c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2864:	f003 fd68 	bl	6338 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2868:	2800      	cmp	r0, #0
    286a:	d0f3      	beq.n	2854 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    286c:	4803      	ldr	r0, [pc, #12]	; (287c <mutex_lock_platform+0x50>)
    286e:	e7f2      	b.n	2856 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2870:	4803      	ldr	r0, [pc, #12]	; (2880 <mutex_lock_platform+0x54>)
    2872:	e7f0      	b.n	2856 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2874:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2878:	e7ed      	b.n	2856 <mutex_lock_platform+0x2a>
    287a:	bf00      	nop
    287c:	ffff8fe9 	.word	0xffff8fe9
    2880:	ffff8fea 	.word	0xffff8fea

00002884 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2884:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2886:	b1d0      	cbz	r0, 28be <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2888:	6843      	ldr	r3, [r0, #4]
    288a:	2b04      	cmp	r3, #4
    288c:	d111      	bne.n	28b2 <mutex_unlock_platform+0x2e>
    288e:	2200      	movs	r2, #0
    2890:	6803      	ldr	r3, [r0, #0]
    2892:	f3bf 8f5b 	dmb	ish
    2896:	e853 1f00 	ldrex	r1, [r3]
    289a:	2901      	cmp	r1, #1
    289c:	d103      	bne.n	28a6 <mutex_unlock_platform+0x22>
    289e:	e843 2000 	strex	r0, r2, [r3]
    28a2:	2800      	cmp	r0, #0
    28a4:	d1f7      	bne.n	2896 <mutex_unlock_platform+0x12>
    28a6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    28aa:	4807      	ldr	r0, [pc, #28]	; (28c8 <mutex_unlock_platform+0x44>)
    28ac:	bf08      	it	eq
    28ae:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    28b0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    28b2:	b13b      	cbz	r3, 28c4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    28b4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    28b6:	f003 fe39 	bl	652c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    28ba:	2000      	movs	r0, #0
    28bc:	e7f8      	b.n	28b0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    28be:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    28c2:	e7f5      	b.n	28b0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    28c4:	4801      	ldr	r0, [pc, #4]	; (28cc <mutex_unlock_platform+0x48>)
    28c6:	e7f3      	b.n	28b0 <mutex_unlock_platform+0x2c>
    28c8:	ffff8fe9 	.word	0xffff8fe9
    28cc:	ffff8fea 	.word	0xffff8fea

000028d0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    28d0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    28d2:	4604      	mov	r4, r0
    28d4:	b918      	cbnz	r0, 28de <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    28d6:	4b16      	ldr	r3, [pc, #88]	; (2930 <mutex_init_platform+0x60>)
    28d8:	4816      	ldr	r0, [pc, #88]	; (2934 <mutex_init_platform+0x64>)
    28da:	685b      	ldr	r3, [r3, #4]
    28dc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    28de:	6863      	ldr	r3, [r4, #4]
    28e0:	2b04      	cmp	r3, #4
    28e2:	d023      	beq.n	292c <mutex_init_platform+0x5c>
    28e4:	2b08      	cmp	r3, #8
    28e6:	d021      	beq.n	292c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    28e8:	b9cb      	cbnz	r3, 291e <mutex_init_platform+0x4e>
    28ea:	6823      	ldr	r3, [r4, #0]
    28ec:	b9bb      	cbnz	r3, 291e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    28ee:	4812      	ldr	r0, [pc, #72]	; (2938 <mutex_init_platform+0x68>)
    28f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28f8:	4621      	mov	r1, r4
    28fa:	f003 fab9 	bl	5e70 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    28fe:	b908      	cbnz	r0, 2904 <mutex_init_platform+0x34>
    2900:	6823      	ldr	r3, [r4, #0]
    2902:	b91b      	cbnz	r3, 290c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2904:	4b0a      	ldr	r3, [pc, #40]	; (2930 <mutex_init_platform+0x60>)
    2906:	480d      	ldr	r0, [pc, #52]	; (293c <mutex_init_platform+0x6c>)
    2908:	685b      	ldr	r3, [r3, #4]
    290a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    290c:	6820      	ldr	r0, [r4, #0]
    290e:	2214      	movs	r2, #20
    2910:	2100      	movs	r1, #0
    2912:	f006 fa9b 	bl	8e4c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2916:	6863      	ldr	r3, [r4, #4]
    2918:	f043 0302 	orr.w	r3, r3, #2
    291c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    291e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2920:	f006 fdce 	bl	94c0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2924:	6863      	ldr	r3, [r4, #4]
    2926:	f043 0301 	orr.w	r3, r3, #1
    292a:	6063      	str	r3, [r4, #4]
}
    292c:	bd10      	pop	{r4, pc}
    292e:	bf00      	nop
    2930:	2000017c 	.word	0x2000017c
    2934:	0000a478 	.word	0x0000a478
    2938:	200005bc 	.word	0x200005bc
    293c:	0000a49e 	.word	0x0000a49e

00002940 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2940:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2942:	4906      	ldr	r1, [pc, #24]	; (295c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2944:	4806      	ldr	r0, [pc, #24]	; (2960 <nrf_cc3xx_platform_mutex_init+0x20>)
    2946:	2340      	movs	r3, #64	; 0x40
    2948:	2214      	movs	r2, #20
    294a:	f006 fd86 	bl	945a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    294e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2952:	4904      	ldr	r1, [pc, #16]	; (2964 <nrf_cc3xx_platform_mutex_init+0x24>)
    2954:	4804      	ldr	r0, [pc, #16]	; (2968 <nrf_cc3xx_platform_mutex_init+0x28>)
    2956:	f005 bf21 	b.w	879c <nrf_cc3xx_platform_set_mutexes>
    295a:	bf00      	nop
    295c:	200005dc 	.word	0x200005dc
    2960:	200005bc 	.word	0x200005bc
    2964:	00009984 	.word	0x00009984
    2968:	00009974 	.word	0x00009974

0000296c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    296c:	4901      	ldr	r1, [pc, #4]	; (2974 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    296e:	2210      	movs	r2, #16
	str	r2, [r1]
    2970:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2972:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2974:	e000ed10 	.word	0xe000ed10

00002978 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2978:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    297a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    297c:	f380 8811 	msr	BASEPRI, r0
	isb
    2980:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2984:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2988:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    298a:	b662      	cpsie	i
	isb
    298c:	f3bf 8f6f 	isb	sy

	bx	lr
    2990:	4770      	bx	lr
    2992:	bf00      	nop

00002994 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2994:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2996:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2998:	f381 8811 	msr	BASEPRI, r1

	wfe
    299c:	bf20      	wfe

	msr	BASEPRI, r0
    299e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    29a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    29a4:	4770      	bx	lr
    29a6:	bf00      	nop

000029a8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    29a8:	b570      	push	{r4, r5, r6, lr}
    29aa:	4606      	mov	r6, r0
    29ac:	b086      	sub	sp, #24

	if (esf != NULL) {
    29ae:	460d      	mov	r5, r1
    29b0:	2900      	cmp	r1, #0
    29b2:	d038      	beq.n	2a26 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    29b4:	688b      	ldr	r3, [r1, #8]
    29b6:	9305      	str	r3, [sp, #20]
    29b8:	684b      	ldr	r3, [r1, #4]
    29ba:	9304      	str	r3, [sp, #16]
    29bc:	680b      	ldr	r3, [r1, #0]
    29be:	9303      	str	r3, [sp, #12]
    29c0:	2400      	movs	r4, #0
    29c2:	4b1c      	ldr	r3, [pc, #112]	; (2a34 <z_arm_fatal_error+0x8c>)
    29c4:	491c      	ldr	r1, [pc, #112]	; (2a38 <z_arm_fatal_error+0x90>)
    29c6:	9302      	str	r3, [sp, #8]
    29c8:	2201      	movs	r2, #1
    29ca:	4623      	mov	r3, r4
    29cc:	4620      	mov	r0, r4
    29ce:	e9cd 4400 	strd	r4, r4, [sp]
    29d2:	f006 f9cb 	bl	8d6c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    29d6:	696b      	ldr	r3, [r5, #20]
    29d8:	9305      	str	r3, [sp, #20]
    29da:	692b      	ldr	r3, [r5, #16]
    29dc:	9304      	str	r3, [sp, #16]
    29de:	68eb      	ldr	r3, [r5, #12]
    29e0:	9303      	str	r3, [sp, #12]
    29e2:	4b16      	ldr	r3, [pc, #88]	; (2a3c <z_arm_fatal_error+0x94>)
    29e4:	4914      	ldr	r1, [pc, #80]	; (2a38 <z_arm_fatal_error+0x90>)
    29e6:	9400      	str	r4, [sp, #0]
    29e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    29ec:	2201      	movs	r2, #1
    29ee:	4623      	mov	r3, r4
    29f0:	4620      	mov	r0, r4
    29f2:	f006 f9bb 	bl	8d6c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    29f6:	69eb      	ldr	r3, [r5, #28]
    29f8:	9303      	str	r3, [sp, #12]
    29fa:	4b11      	ldr	r3, [pc, #68]	; (2a40 <z_arm_fatal_error+0x98>)
    29fc:	490e      	ldr	r1, [pc, #56]	; (2a38 <z_arm_fatal_error+0x90>)
    29fe:	9400      	str	r4, [sp, #0]
    2a00:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2a04:	2201      	movs	r2, #1
    2a06:	4623      	mov	r3, r4
    2a08:	4620      	mov	r0, r4
    2a0a:	f006 f9af 	bl	8d6c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2a0e:	69ab      	ldr	r3, [r5, #24]
    2a10:	9303      	str	r3, [sp, #12]
    2a12:	4b0c      	ldr	r3, [pc, #48]	; (2a44 <z_arm_fatal_error+0x9c>)
    2a14:	4908      	ldr	r1, [pc, #32]	; (2a38 <z_arm_fatal_error+0x90>)
    2a16:	9400      	str	r4, [sp, #0]
    2a18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2a1c:	2201      	movs	r2, #1
    2a1e:	4623      	mov	r3, r4
    2a20:	4620      	mov	r0, r4
    2a22:	f006 f9a3 	bl	8d6c <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2a26:	4629      	mov	r1, r5
    2a28:	4630      	mov	r0, r6
}
    2a2a:	b006      	add	sp, #24
    2a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2a30:	f003 b89c 	b.w	5b6c <z_fatal_error>
    2a34:	0000a4cb 	.word	0x0000a4cb
    2a38:	0000983c 	.word	0x0000983c
    2a3c:	0000a4fa 	.word	0x0000a4fa
    2a40:	0000a529 	.word	0x0000a529
    2a44:	0000a538 	.word	0x0000a538

00002a48 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2a48:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a4a:	2b00      	cmp	r3, #0
    2a4c:	db07      	blt.n	2a5e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a4e:	4904      	ldr	r1, [pc, #16]	; (2a60 <arch_irq_enable+0x18>)
    2a50:	095b      	lsrs	r3, r3, #5
    2a52:	f000 001f 	and.w	r0, r0, #31
    2a56:	2201      	movs	r2, #1
    2a58:	4082      	lsls	r2, r0
    2a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2a5e:	4770      	bx	lr
    2a60:	e000e100 	.word	0xe000e100

00002a64 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a64:	4b05      	ldr	r3, [pc, #20]	; (2a7c <arch_irq_is_enabled+0x18>)
    2a66:	0942      	lsrs	r2, r0, #5
    2a68:	f000 001f 	and.w	r0, r0, #31
    2a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a70:	2301      	movs	r3, #1
    2a72:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a76:	4010      	ands	r0, r2
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	e000e100 	.word	0xe000e100

00002a80 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2a80:	07d3      	lsls	r3, r2, #31
{
    2a82:	b570      	push	{r4, r5, r6, lr}
    2a84:	4605      	mov	r5, r0
    2a86:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2a88:	d425      	bmi.n	2ad6 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2a8a:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2a8c:	2c07      	cmp	r4, #7
    2a8e:	d90f      	bls.n	2ab0 <z_arm_irq_priority_set+0x30>
    2a90:	4a12      	ldr	r2, [pc, #72]	; (2adc <z_arm_irq_priority_set+0x5c>)
    2a92:	4913      	ldr	r1, [pc, #76]	; (2ae0 <z_arm_irq_priority_set+0x60>)
    2a94:	4813      	ldr	r0, [pc, #76]	; (2ae4 <z_arm_irq_priority_set+0x64>)
    2a96:	2357      	movs	r3, #87	; 0x57
    2a98:	f006 f8eb 	bl	8c72 <assert_print>
    2a9c:	4812      	ldr	r0, [pc, #72]	; (2ae8 <z_arm_irq_priority_set+0x68>)
    2a9e:	4631      	mov	r1, r6
    2aa0:	2306      	movs	r3, #6
    2aa2:	462a      	mov	r2, r5
    2aa4:	f006 f8e5 	bl	8c72 <assert_print>
    2aa8:	480c      	ldr	r0, [pc, #48]	; (2adc <z_arm_irq_priority_set+0x5c>)
    2aaa:	2157      	movs	r1, #87	; 0x57
    2aac:	f006 f8da 	bl	8c64 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2ab0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2ab2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ab4:	bfac      	ite	ge
    2ab6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aba:	4b0c      	ldrlt	r3, [pc, #48]	; (2aec <z_arm_irq_priority_set+0x6c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2abc:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ac0:	bfb8      	it	lt
    2ac2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ac6:	b2e4      	uxtb	r4, r4
    2ac8:	bfaa      	itet	ge
    2aca:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ace:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ad0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2ad4:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    2ad6:	2400      	movs	r4, #0
    2ad8:	e7ea      	b.n	2ab0 <z_arm_irq_priority_set+0x30>
    2ada:	bf00      	nop
    2adc:	0000a566 	.word	0x0000a566
    2ae0:	0000a59c 	.word	0x0000a59c
    2ae4:	00009bef 	.word	0x00009bef
    2ae8:	0000a5b7 	.word	0x0000a5b7
    2aec:	e000ed14 	.word	0xe000ed14

00002af0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2af0:	bf30      	wfi
    b z_SysNmiOnReset
    2af2:	f7ff bffd 	b.w	2af0 <z_SysNmiOnReset>
    2af6:	bf00      	nop

00002af8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2af8:	4a0b      	ldr	r2, [pc, #44]	; (2b28 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2afa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2afc:	4b0b      	ldr	r3, [pc, #44]	; (2b2c <z_arm_prep_c+0x34>)
    2afe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2b02:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b08:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2b0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2b10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2b18:	f003 f8bc 	bl	5c94 <z_bss_zero>
	z_data_copy();
    2b1c:	f004 ffd8 	bl	7ad0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2b20:	f000 fbe6 	bl	32f0 <z_arm_interrupt_init>
	z_cstart();
    2b24:	f003 f8fa 	bl	5d1c <z_cstart>
    2b28:	00000000 	.word	0x00000000
    2b2c:	e000ed00 	.word	0xe000ed00

00002b30 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2b30:	4a09      	ldr	r2, [pc, #36]	; (2b58 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2b32:	490a      	ldr	r1, [pc, #40]	; (2b5c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2b34:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2b36:	6809      	ldr	r1, [r1, #0]
    2b38:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b3a:	4909      	ldr	r1, [pc, #36]	; (2b60 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2b3c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b3e:	684b      	ldr	r3, [r1, #4]
    2b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2b44:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2b46:	2300      	movs	r3, #0
    2b48:	f383 8811 	msr	BASEPRI, r3
    2b4c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2b50:	6893      	ldr	r3, [r2, #8]
}
    2b52:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2b54:	4770      	bx	lr
    2b56:	bf00      	nop
    2b58:	20000c30 	.word	0x20000c30
    2b5c:	00009ad8 	.word	0x00009ad8
    2b60:	e000ed00 	.word	0xe000ed00

00002b64 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b64:	4912      	ldr	r1, [pc, #72]	; (2bb0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b66:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b68:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2b6c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b6e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b72:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b76:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    2b78:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b7c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b80:	4f0c      	ldr	r7, [pc, #48]	; (2bb4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b82:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b86:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2b88:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b8a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b8c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2b8e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b90:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b92:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2b96:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2b98:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2b9a:	f000 fc45 	bl	3428 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2b9e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ba2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2ba6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2baa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2bae:	4770      	bx	lr
    ldr r1, =_kernel
    2bb0:	20000c30 	.word	0x20000c30
    ldr v4, =_SCS_ICSR
    2bb4:	e000ed04 	.word	0xe000ed04

00002bb8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2bb8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2bbc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2bbe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2bc2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2bc6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2bc8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2bcc:	2902      	cmp	r1, #2
    beq _oops
    2bce:	d0ff      	beq.n	2bd0 <_oops>

00002bd0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2bd0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2bd2:	f006 f8db 	bl	8d8c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2bd6:	bd01      	pop	{r0, pc}

00002bd8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2bd8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2bdc:	9b00      	ldr	r3, [sp, #0]
    2bde:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2be2:	490a      	ldr	r1, [pc, #40]	; (2c0c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2bea:	9b02      	ldr	r3, [sp, #8]
    2bec:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2bf0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2bf8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2bfc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2c00:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2c02:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2c04:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2c06:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2c08:	4770      	bx	lr
    2c0a:	bf00      	nop
    2c0c:	00008b41 	.word	0x00008b41

00002c10 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2c10:	4a09      	ldr	r2, [pc, #36]	; (2c38 <z_check_thread_stack_fail+0x28>)
{
    2c12:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2c14:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2c16:	b170      	cbz	r0, 2c36 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2c18:	f113 0f16 	cmn.w	r3, #22
    2c1c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2c1e:	d005      	beq.n	2c2c <z_check_thread_stack_fail+0x1c>
    2c20:	f1a0 0220 	sub.w	r2, r0, #32
    2c24:	429a      	cmp	r2, r3
    2c26:	d805      	bhi.n	2c34 <z_check_thread_stack_fail+0x24>
    2c28:	4283      	cmp	r3, r0
    2c2a:	d203      	bcs.n	2c34 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2c2c:	4281      	cmp	r1, r0
    2c2e:	bf28      	it	cs
    2c30:	2000      	movcs	r0, #0
    2c32:	4770      	bx	lr
    2c34:	2000      	movs	r0, #0
}
    2c36:	4770      	bx	lr
    2c38:	20000c30 	.word	0x20000c30

00002c3c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2c3c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2c3e:	4b09      	ldr	r3, [pc, #36]	; (2c64 <arch_switch_to_main_thread+0x28>)
    2c40:	6098      	str	r0, [r3, #8]
{
    2c42:	460d      	mov	r5, r1
    2c44:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2c46:	f000 fbef 	bl	3428 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2c4a:	4620      	mov	r0, r4
    2c4c:	f385 8809 	msr	PSP, r5
    2c50:	2100      	movs	r1, #0
    2c52:	b663      	cpsie	if
    2c54:	f381 8811 	msr	BASEPRI, r1
    2c58:	f3bf 8f6f 	isb	sy
    2c5c:	2200      	movs	r2, #0
    2c5e:	2300      	movs	r3, #0
    2c60:	f005 ff6e 	bl	8b40 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2c64:	20000c30 	.word	0x20000c30

00002c68 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2c68:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2c6a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2c6c:	4a0b      	ldr	r2, [pc, #44]	; (2c9c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2c6e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2c70:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2c72:	bf1e      	ittt	ne
	movne	r1, #0
    2c74:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2c76:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2c78:	f006 fc13 	blne	94a2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c7c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c8a:	4905      	ldr	r1, [pc, #20]	; (2ca0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c8e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c92:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c96:	4903      	ldr	r1, [pc, #12]	; (2ca4 <_isr_wrapper+0x3c>)
	bx r1
    2c98:	4708      	bx	r1
    2c9a:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c9c:	20000c30 	.word	0x20000c30
	ldr r1, =_sw_isr_table
    2ca0:	0000968c 	.word	0x0000968c
	ldr r1, =z_arm_int_exit
    2ca4:	00002ca9 	.word	0x00002ca9

00002ca8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2ca8:	4b04      	ldr	r3, [pc, #16]	; (2cbc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2caa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2cac:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2cae:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2cb0:	d003      	beq.n	2cba <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2cb2:	4903      	ldr	r1, [pc, #12]	; (2cc0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2cb8:	600a      	str	r2, [r1, #0]

00002cba <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2cba:	4770      	bx	lr
	ldr r3, =_kernel
    2cbc:	20000c30 	.word	0x20000c30
	ldr r1, =_SCS_ICSR
    2cc0:	e000ed04 	.word	0xe000ed04

00002cc4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc6:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2cc8:	2400      	movs	r4, #0
    2cca:	4b3b      	ldr	r3, [pc, #236]	; (2db8 <bus_fault.constprop.0+0xf4>)
    2ccc:	9302      	str	r3, [sp, #8]
    2cce:	e9cd 4400 	strd	r4, r4, [sp]
    2cd2:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2cd4:	4607      	mov	r7, r0
    2cd6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2cd8:	2201      	movs	r2, #1
    2cda:	4938      	ldr	r1, [pc, #224]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2cdc:	4620      	mov	r0, r4
    2cde:	f006 f864 	bl	8daa <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ce2:	4b37      	ldr	r3, [pc, #220]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ce6:	04db      	lsls	r3, r3, #19
    2ce8:	d509      	bpl.n	2cfe <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    2cea:	4b36      	ldr	r3, [pc, #216]	; (2dc4 <bus_fault.constprop.0+0x100>)
    2cec:	4933      	ldr	r1, [pc, #204]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2cee:	9400      	str	r4, [sp, #0]
    2cf0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2cf4:	2201      	movs	r2, #1
    2cf6:	4623      	mov	r3, r4
    2cf8:	4620      	mov	r0, r4
    2cfa:	f006 f856 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2cfe:	4b30      	ldr	r3, [pc, #192]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d02:	051d      	lsls	r5, r3, #20
    2d04:	d509      	bpl.n	2d1a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    2d06:	4b30      	ldr	r3, [pc, #192]	; (2dc8 <bus_fault.constprop.0+0x104>)
    2d08:	9302      	str	r3, [sp, #8]
    2d0a:	2300      	movs	r3, #0
    2d0c:	e9cd 3300 	strd	r3, r3, [sp]
    2d10:	492a      	ldr	r1, [pc, #168]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2d12:	2201      	movs	r2, #1
    2d14:	4618      	mov	r0, r3
    2d16:	f006 f848 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2d1a:	4d29      	ldr	r5, [pc, #164]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2d1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d1e:	059c      	lsls	r4, r3, #22
    2d20:	d51e      	bpl.n	2d60 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    2d22:	2400      	movs	r4, #0
    2d24:	4b29      	ldr	r3, [pc, #164]	; (2dcc <bus_fault.constprop.0+0x108>)
    2d26:	9302      	str	r3, [sp, #8]
    2d28:	2201      	movs	r2, #1
    2d2a:	4623      	mov	r3, r4
    2d2c:	4620      	mov	r0, r4
    2d2e:	e9cd 4400 	strd	r4, r4, [sp]
    2d32:	4922      	ldr	r1, [pc, #136]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2d34:	f006 f839 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2d38:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2d3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2d3c:	0410      	lsls	r0, r2, #16
    2d3e:	d50f      	bpl.n	2d60 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2d40:	9303      	str	r3, [sp, #12]
    2d42:	4b23      	ldr	r3, [pc, #140]	; (2dd0 <bus_fault.constprop.0+0x10c>)
    2d44:	491d      	ldr	r1, [pc, #116]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2d46:	9400      	str	r4, [sp, #0]
    2d48:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2d4c:	2201      	movs	r2, #1
    2d4e:	4623      	mov	r3, r4
    2d50:	4620      	mov	r0, r4
    2d52:	f006 f82a 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2d56:	b11f      	cbz	r7, 2d60 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2d58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2d5e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2d60:	4b17      	ldr	r3, [pc, #92]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d64:	0559      	lsls	r1, r3, #21
    2d66:	d509      	bpl.n	2d7c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2d68:	4b1a      	ldr	r3, [pc, #104]	; (2dd4 <bus_fault.constprop.0+0x110>)
    2d6a:	9302      	str	r3, [sp, #8]
    2d6c:	2300      	movs	r3, #0
    2d6e:	e9cd 3300 	strd	r3, r3, [sp]
    2d72:	4912      	ldr	r1, [pc, #72]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2d74:	2201      	movs	r2, #1
    2d76:	4618      	mov	r0, r3
    2d78:	f006 f817 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2d7c:	4a10      	ldr	r2, [pc, #64]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2d7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d80:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    2d84:	d012      	beq.n	2dac <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    2d86:	4b14      	ldr	r3, [pc, #80]	; (2dd8 <bus_fault.constprop.0+0x114>)
    2d88:	9302      	str	r3, [sp, #8]
    2d8a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2d8c:	e9cd 3300 	strd	r3, r3, [sp]
    2d90:	490a      	ldr	r1, [pc, #40]	; (2dbc <bus_fault.constprop.0+0xf8>)
    2d92:	2201      	movs	r2, #1
    2d94:	4618      	mov	r0, r3
    2d96:	f006 f808 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2d9a:	4a09      	ldr	r2, [pc, #36]	; (2dc0 <bus_fault.constprop.0+0xfc>)
    2d9c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2d9e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2da0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2da4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2da6:	7030      	strb	r0, [r6, #0]

	return reason;
}
    2da8:	b005      	add	sp, #20
    2daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2dac:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2dae:	0492      	lsls	r2, r2, #18
    2db0:	d5f3      	bpl.n	2d9a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2db2:	4a0a      	ldr	r2, [pc, #40]	; (2ddc <bus_fault.constprop.0+0x118>)
    2db4:	9202      	str	r2, [sp, #8]
    2db6:	e7e9      	b.n	2d8c <bus_fault.constprop.0+0xc8>
    2db8:	0000a5f7 	.word	0x0000a5f7
    2dbc:	0000983c 	.word	0x0000983c
    2dc0:	e000ed00 	.word	0xe000ed00
    2dc4:	0000a60d 	.word	0x0000a60d
    2dc8:	0000a61e 	.word	0x0000a61e
    2dcc:	0000a631 	.word	0x0000a631
    2dd0:	0000a64a 	.word	0x0000a64a
    2dd4:	0000a65f 	.word	0x0000a65f
    2dd8:	0000a67a 	.word	0x0000a67a
    2ddc:	0000a692 	.word	0x0000a692

00002de0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2de2:	2400      	movs	r4, #0
    2de4:	4b33      	ldr	r3, [pc, #204]	; (2eb4 <usage_fault.constprop.0+0xd4>)
    2de6:	9302      	str	r3, [sp, #8]
    2de8:	e9cd 4400 	strd	r4, r4, [sp]
    2dec:	4623      	mov	r3, r4
    2dee:	4932      	ldr	r1, [pc, #200]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2df0:	2201      	movs	r2, #1
    2df2:	4620      	mov	r0, r4
    2df4:	f005 ffd9 	bl	8daa <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2df8:	4b30      	ldr	r3, [pc, #192]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dfc:	019b      	lsls	r3, r3, #6
    2dfe:	d509      	bpl.n	2e14 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    2e00:	4b2f      	ldr	r3, [pc, #188]	; (2ec0 <usage_fault.constprop.0+0xe0>)
    2e02:	492d      	ldr	r1, [pc, #180]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e04:	9400      	str	r4, [sp, #0]
    2e06:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2e0a:	2201      	movs	r2, #1
    2e0c:	4623      	mov	r3, r4
    2e0e:	4620      	mov	r0, r4
    2e10:	f005 ffcb 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2e14:	4b29      	ldr	r3, [pc, #164]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e18:	01dc      	lsls	r4, r3, #7
    2e1a:	d509      	bpl.n	2e30 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    2e1c:	4b29      	ldr	r3, [pc, #164]	; (2ec4 <usage_fault.constprop.0+0xe4>)
    2e1e:	9302      	str	r3, [sp, #8]
    2e20:	2300      	movs	r3, #0
    2e22:	e9cd 3300 	strd	r3, r3, [sp]
    2e26:	4924      	ldr	r1, [pc, #144]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e28:	2201      	movs	r2, #1
    2e2a:	4618      	mov	r0, r3
    2e2c:	f005 ffbd 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2e30:	4b22      	ldr	r3, [pc, #136]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e34:	0318      	lsls	r0, r3, #12
    2e36:	d509      	bpl.n	2e4c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    2e38:	4b23      	ldr	r3, [pc, #140]	; (2ec8 <usage_fault.constprop.0+0xe8>)
    2e3a:	9302      	str	r3, [sp, #8]
    2e3c:	2300      	movs	r3, #0
    2e3e:	e9cd 3300 	strd	r3, r3, [sp]
    2e42:	491d      	ldr	r1, [pc, #116]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e44:	2201      	movs	r2, #1
    2e46:	4618      	mov	r0, r3
    2e48:	f005 ffaf 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2e4c:	4b1b      	ldr	r3, [pc, #108]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e50:	0359      	lsls	r1, r3, #13
    2e52:	d509      	bpl.n	2e68 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2e54:	4b1d      	ldr	r3, [pc, #116]	; (2ecc <usage_fault.constprop.0+0xec>)
    2e56:	9302      	str	r3, [sp, #8]
    2e58:	2300      	movs	r3, #0
    2e5a:	e9cd 3300 	strd	r3, r3, [sp]
    2e5e:	4916      	ldr	r1, [pc, #88]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e60:	2201      	movs	r2, #1
    2e62:	4618      	mov	r0, r3
    2e64:	f005 ffa1 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2e68:	4b14      	ldr	r3, [pc, #80]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e6c:	039a      	lsls	r2, r3, #14
    2e6e:	d509      	bpl.n	2e84 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2e70:	4b17      	ldr	r3, [pc, #92]	; (2ed0 <usage_fault.constprop.0+0xf0>)
    2e72:	9302      	str	r3, [sp, #8]
    2e74:	2300      	movs	r3, #0
    2e76:	e9cd 3300 	strd	r3, r3, [sp]
    2e7a:	490f      	ldr	r1, [pc, #60]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e7c:	2201      	movs	r2, #1
    2e7e:	4618      	mov	r0, r3
    2e80:	f005 ff93 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2e84:	4b0d      	ldr	r3, [pc, #52]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e88:	03db      	lsls	r3, r3, #15
    2e8a:	d509      	bpl.n	2ea0 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2e8c:	4b11      	ldr	r3, [pc, #68]	; (2ed4 <usage_fault.constprop.0+0xf4>)
    2e8e:	9302      	str	r3, [sp, #8]
    2e90:	2300      	movs	r3, #0
    2e92:	e9cd 3300 	strd	r3, r3, [sp]
    2e96:	4908      	ldr	r1, [pc, #32]	; (2eb8 <usage_fault.constprop.0+0xd8>)
    2e98:	2201      	movs	r2, #1
    2e9a:	4618      	mov	r0, r3
    2e9c:	f005 ff85 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2ea0:	4a06      	ldr	r2, [pc, #24]	; (2ebc <usage_fault.constprop.0+0xdc>)
    2ea2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ea4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2ea8:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2eac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2eae:	6293      	str	r3, [r2, #40]	; 0x28
}
    2eb0:	b004      	add	sp, #16
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	0000a6c1 	.word	0x0000a6c1
    2eb8:	0000983c 	.word	0x0000983c
    2ebc:	e000ed00 	.word	0xe000ed00
    2ec0:	0000a6d9 	.word	0x0000a6d9
    2ec4:	0000a6ec 	.word	0x0000a6ec
    2ec8:	0000a706 	.word	0x0000a706
    2ecc:	0000a724 	.word	0x0000a724
    2ed0:	0000a749 	.word	0x0000a749
    2ed4:	0000a763 	.word	0x0000a763

00002ed8 <mem_manage_fault>:
{
    2ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2edc:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ede:	2400      	movs	r4, #0
    2ee0:	4b53      	ldr	r3, [pc, #332]	; (3030 <mem_manage_fault+0x158>)
    2ee2:	9302      	str	r3, [sp, #8]
    2ee4:	e9cd 4400 	strd	r4, r4, [sp]
    2ee8:	4623      	mov	r3, r4
{
    2eea:	4680      	mov	r8, r0
    2eec:	4689      	mov	r9, r1
    2eee:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ef0:	4950      	ldr	r1, [pc, #320]	; (3034 <mem_manage_fault+0x15c>)
    2ef2:	2201      	movs	r2, #1
    2ef4:	4620      	mov	r0, r4
    2ef6:	f005 ff58 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2efa:	4b4f      	ldr	r3, [pc, #316]	; (3038 <mem_manage_fault+0x160>)
    2efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2efe:	06df      	lsls	r7, r3, #27
    2f00:	d509      	bpl.n	2f16 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2f02:	4b4e      	ldr	r3, [pc, #312]	; (303c <mem_manage_fault+0x164>)
    2f04:	494b      	ldr	r1, [pc, #300]	; (3034 <mem_manage_fault+0x15c>)
    2f06:	9400      	str	r4, [sp, #0]
    2f08:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2f0c:	2201      	movs	r2, #1
    2f0e:	4623      	mov	r3, r4
    2f10:	4620      	mov	r0, r4
    2f12:	f005 ff4a 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2f16:	4b48      	ldr	r3, [pc, #288]	; (3038 <mem_manage_fault+0x160>)
    2f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f1a:	071d      	lsls	r5, r3, #28
    2f1c:	d509      	bpl.n	2f32 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    2f1e:	4b48      	ldr	r3, [pc, #288]	; (3040 <mem_manage_fault+0x168>)
    2f20:	9302      	str	r3, [sp, #8]
    2f22:	2300      	movs	r3, #0
    2f24:	e9cd 3300 	strd	r3, r3, [sp]
    2f28:	4942      	ldr	r1, [pc, #264]	; (3034 <mem_manage_fault+0x15c>)
    2f2a:	2201      	movs	r2, #1
    2f2c:	4618      	mov	r0, r3
    2f2e:	f005 ff3c 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2f32:	4d41      	ldr	r5, [pc, #260]	; (3038 <mem_manage_fault+0x160>)
    2f34:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f36:	079c      	lsls	r4, r3, #30
    2f38:	d437      	bmi.n	2faa <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
    2f3a:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2f3e:	4b3e      	ldr	r3, [pc, #248]	; (3038 <mem_manage_fault+0x160>)
    2f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f42:	07d9      	lsls	r1, r3, #31
    2f44:	d509      	bpl.n	2f5a <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    2f46:	4b3f      	ldr	r3, [pc, #252]	; (3044 <mem_manage_fault+0x16c>)
    2f48:	9302      	str	r3, [sp, #8]
    2f4a:	2300      	movs	r3, #0
    2f4c:	e9cd 3300 	strd	r3, r3, [sp]
    2f50:	4938      	ldr	r1, [pc, #224]	; (3034 <mem_manage_fault+0x15c>)
    2f52:	2201      	movs	r2, #1
    2f54:	4618      	mov	r0, r3
    2f56:	f005 ff28 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f5a:	4b37      	ldr	r3, [pc, #220]	; (3038 <mem_manage_fault+0x160>)
    2f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f5e:	069a      	lsls	r2, r3, #26
    2f60:	d509      	bpl.n	2f76 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    2f62:	4b39      	ldr	r3, [pc, #228]	; (3048 <mem_manage_fault+0x170>)
    2f64:	9302      	str	r3, [sp, #8]
    2f66:	2300      	movs	r3, #0
    2f68:	e9cd 3300 	strd	r3, r3, [sp]
    2f6c:	4931      	ldr	r1, [pc, #196]	; (3034 <mem_manage_fault+0x15c>)
    2f6e:	2201      	movs	r2, #1
    2f70:	4618      	mov	r0, r3
    2f72:	f005 ff1a 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f76:	4d30      	ldr	r5, [pc, #192]	; (3038 <mem_manage_fault+0x160>)
    2f78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f7a:	06db      	lsls	r3, r3, #27
    2f7c:	d437      	bmi.n	2fee <mem_manage_fault+0x116>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f80:	079c      	lsls	r4, r3, #30
    2f82:	d434      	bmi.n	2fee <mem_manage_fault+0x116>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f84:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f86:	4b2c      	ldr	r3, [pc, #176]	; (3038 <mem_manage_fault+0x160>)
    2f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f8a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2f8c:	bf42      	ittt	mi
    2f8e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2f90:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2f94:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f98:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2f9c:	629a      	str	r2, [r3, #40]	; 0x28
}
    2f9e:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    2fa0:	2300      	movs	r3, #0
    2fa2:	7033      	strb	r3, [r6, #0]
}
    2fa4:	b005      	add	sp, #20
    2fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2faa:	2400      	movs	r4, #0
    2fac:	4b27      	ldr	r3, [pc, #156]	; (304c <mem_manage_fault+0x174>)
    2fae:	9302      	str	r3, [sp, #8]
    2fb0:	4620      	mov	r0, r4
    2fb2:	4623      	mov	r3, r4
    2fb4:	e9cd 4400 	strd	r4, r4, [sp]
    2fb8:	491e      	ldr	r1, [pc, #120]	; (3034 <mem_manage_fault+0x15c>)
    2fba:	2201      	movs	r2, #1
    2fbc:	f005 fef5 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2fc0:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2fc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fc4:	0618      	lsls	r0, r3, #24
    2fc6:	d5b8      	bpl.n	2f3a <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2fc8:	4b21      	ldr	r3, [pc, #132]	; (3050 <mem_manage_fault+0x178>)
    2fca:	491a      	ldr	r1, [pc, #104]	; (3034 <mem_manage_fault+0x15c>)
    2fcc:	9703      	str	r7, [sp, #12]
    2fce:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2fd2:	9400      	str	r4, [sp, #0]
    2fd4:	4623      	mov	r3, r4
    2fd6:	2201      	movs	r2, #1
    2fd8:	4620      	mov	r0, r4
    2fda:	f005 fee6 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2fde:	f1b9 0f00 	cmp.w	r9, #0
    2fe2:	d0ac      	beq.n	2f3e <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2fe4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2fea:	62ab      	str	r3, [r5, #40]	; 0x28
    2fec:	e7a7      	b.n	2f3e <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2fee:	686b      	ldr	r3, [r5, #4]
    2ff0:	0518      	lsls	r0, r3, #20
    2ff2:	d5c7      	bpl.n	2f84 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2ff4:	4641      	mov	r1, r8
    2ff6:	4638      	mov	r0, r7
    2ff8:	f7ff fe0a 	bl	2c10 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2ffc:	4604      	mov	r4, r0
    2ffe:	b118      	cbz	r0, 3008 <mem_manage_fault+0x130>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3000:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3004:	2402      	movs	r4, #2
    3006:	e7be      	b.n	2f86 <mem_manage_fault+0xae>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3008:	6aab      	ldr	r3, [r5, #40]	; 0x28
    300a:	06d9      	lsls	r1, r3, #27
    300c:	d5ba      	bpl.n	2f84 <mem_manage_fault+0xac>
    300e:	4a11      	ldr	r2, [pc, #68]	; (3054 <mem_manage_fault+0x17c>)
    3010:	4911      	ldr	r1, [pc, #68]	; (3058 <mem_manage_fault+0x180>)
    3012:	4812      	ldr	r0, [pc, #72]	; (305c <mem_manage_fault+0x184>)
    3014:	f240 1349 	movw	r3, #329	; 0x149
    3018:	f005 fe2b 	bl	8c72 <assert_print>
    301c:	4810      	ldr	r0, [pc, #64]	; (3060 <mem_manage_fault+0x188>)
    301e:	f005 fe28 	bl	8c72 <assert_print>
    3022:	480c      	ldr	r0, [pc, #48]	; (3054 <mem_manage_fault+0x17c>)
    3024:	f240 1149 	movw	r1, #329	; 0x149
    3028:	f005 fe1c 	bl	8c64 <assert_post_action>
    302c:	e7ab      	b.n	2f86 <mem_manage_fault+0xae>
    302e:	bf00      	nop
    3030:	0000a78e 	.word	0x0000a78e
    3034:	0000983c 	.word	0x0000983c
    3038:	e000ed00 	.word	0xe000ed00
    303c:	0000a7a4 	.word	0x0000a7a4
    3040:	0000a61e 	.word	0x0000a61e
    3044:	0000a805 	.word	0x0000a805
    3048:	0000a692 	.word	0x0000a692
    304c:	0000a7d7 	.word	0x0000a7d7
    3050:	0000a7ef 	.word	0x0000a7ef
    3054:	0000a824 	.word	0x0000a824
    3058:	0000a85e 	.word	0x0000a85e
    305c:	00009bef 	.word	0x00009bef
    3060:	0000a8a8 	.word	0x0000a8a8

00003064 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3068:	4b85      	ldr	r3, [pc, #532]	; (3280 <z_arm_fault+0x21c>)
    306a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    306e:	b091      	sub	sp, #68	; 0x44
    3070:	4680      	mov	r8, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3072:	f3c9 0608 	ubfx	r6, r9, #0, #9
    3076:	2700      	movs	r7, #0
    3078:	f387 8811 	msr	BASEPRI, r7
    307c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3080:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3084:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3088:	d10d      	bne.n	30a6 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    308a:	f002 030c 	and.w	r3, r2, #12
    308e:	2b08      	cmp	r3, #8
    3090:	d11b      	bne.n	30ca <z_arm_fault+0x66>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3092:	4b7c      	ldr	r3, [pc, #496]	; (3284 <z_arm_fault+0x220>)
    3094:	497c      	ldr	r1, [pc, #496]	; (3288 <z_arm_fault+0x224>)
    3096:	9700      	str	r7, [sp, #0]
    3098:	e9cd 7301 	strd	r7, r3, [sp, #4]
    309c:	2201      	movs	r2, #1
    309e:	463b      	mov	r3, r7
    30a0:	4638      	mov	r0, r7
    30a2:	f005 fe82 	bl	8daa <z_log_msg2_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    30a6:	4a79      	ldr	r2, [pc, #484]	; (328c <z_arm_fault+0x228>)
    30a8:	4979      	ldr	r1, [pc, #484]	; (3290 <z_arm_fault+0x22c>)
    30aa:	487a      	ldr	r0, [pc, #488]	; (3294 <z_arm_fault+0x230>)
    30ac:	f240 33fb 	movw	r3, #1019	; 0x3fb
    30b0:	f005 fddf 	bl	8c72 <assert_print>
    30b4:	4878      	ldr	r0, [pc, #480]	; (3298 <z_arm_fault+0x234>)
    30b6:	f005 fddc 	bl	8c72 <assert_print>
    30ba:	4874      	ldr	r0, [pc, #464]	; (328c <z_arm_fault+0x228>)
    30bc:	f240 31fb 	movw	r1, #1019	; 0x3fb
    30c0:	f005 fdd0 	bl	8c64 <assert_post_action>
    30c4:	f04f 0800 	mov.w	r8, #0
    30c8:	e006      	b.n	30d8 <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    30ca:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    30cc:	bf4c      	ite	mi
    30ce:	4688      	movmi	r8, r1
			*nested_exc = true;
    30d0:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    30d2:	f1b8 0f00 	cmp.w	r8, #0
    30d6:	d0e6      	beq.n	30a6 <z_arm_fault+0x42>
	*recoverable = false;
    30d8:	2500      	movs	r5, #0
	switch (fault) {
    30da:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    30dc:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    30e0:	2b09      	cmp	r3, #9
    30e2:	f200 80b3 	bhi.w	324c <z_arm_fault+0x1e8>
    30e6:	e8df f003 	tbb	[pc, r3]
    30ea:	a705      	.short	0xa705
    30ec:	b1b187ab 	.word	0xb1b187ab
    30f0:	afb1b1b1 	.word	0xafb1b1b1
	PR_FAULT_INFO("***** HARD FAULT *****");
    30f4:	4b69      	ldr	r3, [pc, #420]	; (329c <z_arm_fault+0x238>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30f6:	4e62      	ldr	r6, [pc, #392]	; (3280 <z_arm_fault+0x21c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    30f8:	4963      	ldr	r1, [pc, #396]	; (3288 <z_arm_fault+0x224>)
    30fa:	9500      	str	r5, [sp, #0]
    30fc:	e9cd 5301 	strd	r5, r3, [sp, #4]
    3100:	2300      	movs	r3, #0
    3102:	2201      	movs	r2, #1
    3104:	4618      	mov	r0, r3
    3106:	f005 fe50 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    310a:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    310c:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3110:	f014 0402 	ands.w	r4, r4, #2
    3114:	d00b      	beq.n	312e <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    3116:	4b62      	ldr	r3, [pc, #392]	; (32a0 <z_arm_fault+0x23c>)
	PR_FAULT_INFO(
    3118:	495b      	ldr	r1, [pc, #364]	; (3288 <z_arm_fault+0x224>)
    311a:	9500      	str	r5, [sp, #0]
    311c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    3120:	2300      	movs	r3, #0
    3122:	2201      	movs	r2, #1
    3124:	4618      	mov	r0, r3
    3126:	f005 fe40 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    312a:	2400      	movs	r4, #0
}
    312c:	e00c      	b.n	3148 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    312e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3130:	2b00      	cmp	r3, #0
    3132:	da25      	bge.n	3180 <z_arm_fault+0x11c>
		PR_EXC("  Debug event");
    3134:	4b5b      	ldr	r3, [pc, #364]	; (32a4 <z_arm_fault+0x240>)
    3136:	4954      	ldr	r1, [pc, #336]	; (3288 <z_arm_fault+0x224>)
    3138:	9400      	str	r4, [sp, #0]
    313a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    313e:	2201      	movs	r2, #1
    3140:	4623      	mov	r3, r4
    3142:	4620      	mov	r0, r4
    3144:	f005 fe31 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3148:	f89d 301f 	ldrb.w	r3, [sp, #31]
    314c:	b9ab      	cbnz	r3, 317a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    314e:	2220      	movs	r2, #32
    3150:	4641      	mov	r1, r8
    3152:	eb0d 0002 	add.w	r0, sp, r2
    3156:	f005 fe6e 	bl	8e36 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    315a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    315c:	2f00      	cmp	r7, #0
    315e:	f000 808a 	beq.w	3276 <z_arm_fault+0x212>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3162:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3166:	b922      	cbnz	r2, 3172 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3168:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    316c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3170:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    3172:	a908      	add	r1, sp, #32
    3174:	4620      	mov	r0, r4
    3176:	f7ff fc17 	bl	29a8 <z_arm_fatal_error>
}
    317a:	b011      	add	sp, #68	; 0x44
    317c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3180:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3182:	005b      	lsls	r3, r3, #1
    3184:	d54b      	bpl.n	321e <z_arm_fault+0x1ba>
		PR_EXC("  Fault escalation (see below)");
    3186:	4b48      	ldr	r3, [pc, #288]	; (32a8 <z_arm_fault+0x244>)
    3188:	493f      	ldr	r1, [pc, #252]	; (3288 <z_arm_fault+0x224>)
    318a:	9400      	str	r4, [sp, #0]
    318c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3190:	2201      	movs	r2, #1
    3192:	4623      	mov	r3, r4
    3194:	4620      	mov	r0, r4
    3196:	f005 fe08 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    319a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    319e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    31a2:	f64d 7302 	movw	r3, #57090	; 0xdf02
    31a6:	429a      	cmp	r2, r3
    31a8:	d10f      	bne.n	31ca <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    31aa:	f8d8 3000 	ldr.w	r3, [r8]
    31ae:	9303      	str	r3, [sp, #12]
    31b0:	4b3e      	ldr	r3, [pc, #248]	; (32ac <z_arm_fault+0x248>)
    31b2:	9400      	str	r4, [sp, #0]
    31b4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    31b8:	4620      	mov	r0, r4
    31ba:	4623      	mov	r3, r4
    31bc:	4932      	ldr	r1, [pc, #200]	; (3288 <z_arm_fault+0x224>)
    31be:	2201      	movs	r2, #1
    31c0:	f005 fdf3 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    31c4:	f8d8 4000 	ldr.w	r4, [r8]
    31c8:	e7be      	b.n	3148 <z_arm_fault+0xe4>
		} else if (SCB_MMFSR != 0) {
    31ca:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    31ce:	b13b      	cbz	r3, 31e0 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
    31d0:	f10d 021f 	add.w	r2, sp, #31
    31d4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    31d6:	4640      	mov	r0, r8
    31d8:	f7ff fe7e 	bl	2ed8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    31dc:	4604      	mov	r4, r0
		break;
    31de:	e7b3      	b.n	3148 <z_arm_fault+0xe4>
		} else if (SCB_BFSR != 0) {
    31e0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    31e4:	b12b      	cbz	r3, 31f2 <z_arm_fault+0x18e>
			reason = bus_fault(esf, 1, recoverable);
    31e6:	f10d 011f 	add.w	r1, sp, #31
    31ea:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    31ec:	f7ff fd6a 	bl	2cc4 <bus_fault.constprop.0>
    31f0:	e7f4      	b.n	31dc <z_arm_fault+0x178>
		} else if (SCB_UFSR != 0) {
    31f2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    31f4:	b29b      	uxth	r3, r3
    31f6:	b113      	cbz	r3, 31fe <z_arm_fault+0x19a>
		reason = usage_fault(esf);
    31f8:	f7ff fdf2 	bl	2de0 <usage_fault.constprop.0>
    31fc:	e7ee      	b.n	31dc <z_arm_fault+0x178>
			__ASSERT(0,
    31fe:	492c      	ldr	r1, [pc, #176]	; (32b0 <z_arm_fault+0x24c>)
    3200:	4a22      	ldr	r2, [pc, #136]	; (328c <z_arm_fault+0x228>)
    3202:	4824      	ldr	r0, [pc, #144]	; (3294 <z_arm_fault+0x230>)
    3204:	f240 23cd 	movw	r3, #717	; 0x2cd
    3208:	f005 fd33 	bl	8c72 <assert_print>
    320c:	4829      	ldr	r0, [pc, #164]	; (32b4 <z_arm_fault+0x250>)
    320e:	f005 fd30 	bl	8c72 <assert_print>
    3212:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    3216:	481d      	ldr	r0, [pc, #116]	; (328c <z_arm_fault+0x228>)
    3218:	f005 fd24 	bl	8c64 <assert_post_action>
    321c:	e794      	b.n	3148 <z_arm_fault+0xe4>
    321e:	4924      	ldr	r1, [pc, #144]	; (32b0 <z_arm_fault+0x24c>)
    3220:	4a1a      	ldr	r2, [pc, #104]	; (328c <z_arm_fault+0x228>)
    3222:	481c      	ldr	r0, [pc, #112]	; (3294 <z_arm_fault+0x230>)
    3224:	f240 23d1 	movw	r3, #721	; 0x2d1
    3228:	f005 fd23 	bl	8c72 <assert_print>
    322c:	4822      	ldr	r0, [pc, #136]	; (32b8 <z_arm_fault+0x254>)
    322e:	f005 fd20 	bl	8c72 <assert_print>
    3232:	f240 21d1 	movw	r1, #721	; 0x2d1
    3236:	e7ee      	b.n	3216 <z_arm_fault+0x1b2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3238:	f10d 021f 	add.w	r2, sp, #31
    323c:	2100      	movs	r1, #0
    323e:	e7ca      	b.n	31d6 <z_arm_fault+0x172>
		reason = bus_fault(esf, 0, recoverable);
    3240:	f10d 011f 	add.w	r1, sp, #31
    3244:	2000      	movs	r0, #0
    3246:	e7d1      	b.n	31ec <z_arm_fault+0x188>
	PR_FAULT_INFO(
    3248:	4b1c      	ldr	r3, [pc, #112]	; (32bc <z_arm_fault+0x258>)
    324a:	e765      	b.n	3118 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    324c:	4a1c      	ldr	r2, [pc, #112]	; (32c0 <z_arm_fault+0x25c>)
    324e:	4b1d      	ldr	r3, [pc, #116]	; (32c4 <z_arm_fault+0x260>)
    3250:	490d      	ldr	r1, [pc, #52]	; (3288 <z_arm_fault+0x224>)
    3252:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    3256:	bf18      	it	ne
    3258:	4613      	movne	r3, r2
    325a:	3e10      	subs	r6, #16
    325c:	2400      	movs	r4, #0
    325e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    3262:	4b19      	ldr	r3, [pc, #100]	; (32c8 <z_arm_fault+0x264>)
    3264:	9302      	str	r3, [sp, #8]
    3266:	e9cd 4400 	strd	r4, r4, [sp]
    326a:	4623      	mov	r3, r4
    326c:	2201      	movs	r2, #1
    326e:	4620      	mov	r0, r4
    3270:	f005 fd9b 	bl	8daa <z_log_msg2_runtime_create.constprop.0>
}
    3274:	e768      	b.n	3148 <z_arm_fault+0xe4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3276:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    327a:	f023 0301 	bic.w	r3, r3, #1
    327e:	e777      	b.n	3170 <z_arm_fault+0x10c>
    3280:	e000ed00 	.word	0xe000ed00
    3284:	0000a8f9 	.word	0x0000a8f9
    3288:	0000983c 	.word	0x0000983c
    328c:	0000a824 	.word	0x0000a824
    3290:	0000a924 	.word	0x0000a924
    3294:	00009bef 	.word	0x00009bef
    3298:	0000a937 	.word	0x0000a937
    329c:	0000a975 	.word	0x0000a975
    32a0:	0000a98c 	.word	0x0000a98c
    32a4:	0000a9ad 	.word	0x0000a9ad
    32a8:	0000a9bb 	.word	0x0000a9bb
    32ac:	0000a9da 	.word	0x0000a9da
    32b0:	00009cc5 	.word	0x00009cc5
    32b4:	0000a9f6 	.word	0x0000a9f6
    32b8:	0000aa1a 	.word	0x0000aa1a
    32bc:	0000aa4a 	.word	0x0000aa4a
    32c0:	0000a8e0 	.word	0x0000a8e0
    32c4:	0000a8cb 	.word	0x0000a8cb
    32c8:	0000aa6e 	.word	0x0000aa6e

000032cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    32cc:	4a02      	ldr	r2, [pc, #8]	; (32d8 <z_arm_fault_init+0xc>)
    32ce:	6953      	ldr	r3, [r2, #20]
    32d0:	f043 0310 	orr.w	r3, r3, #16
    32d4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    32d6:	4770      	bx	lr
    32d8:	e000ed00 	.word	0xe000ed00

000032dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    32dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    32e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    32e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    32e6:	4672      	mov	r2, lr
	bl z_arm_fault
    32e8:	f7ff febc 	bl	3064 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    32ec:	bd01      	pop	{r0, pc}
    32ee:	bf00      	nop

000032f0 <z_arm_interrupt_init>:
    32f0:	4804      	ldr	r0, [pc, #16]	; (3304 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    32f2:	2300      	movs	r3, #0
    32f4:	2140      	movs	r1, #64	; 0x40
    32f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    32f8:	3301      	adds	r3, #1
    32fa:	2b30      	cmp	r3, #48	; 0x30
    32fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3300:	d1f9      	bne.n	32f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3302:	4770      	bx	lr
    3304:	e000e100 	.word	0xe000e100

00003308 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3308:	2000      	movs	r0, #0
    msr CONTROL, r0
    330a:	f380 8814 	msr	CONTROL, r0
    isb
    330e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3312:	f006 f931 	bl	9578 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3316:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3318:	490d      	ldr	r1, [pc, #52]	; (3350 <__start+0x48>)
    str r0, [r1]
    331a:	6008      	str	r0, [r1, #0]
    dsb
    331c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3320:	480c      	ldr	r0, [pc, #48]	; (3354 <__start+0x4c>)
    msr msp, r0
    3322:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3326:	f000 f82b 	bl	3380 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    332a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    332c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3330:	4809      	ldr	r0, [pc, #36]	; (3358 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3332:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3336:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3338:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    333c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3340:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3342:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3344:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3348:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    334c:	f7ff fbd4 	bl	2af8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3350:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3354:	20002300 	.word	0x20002300
    ldr r0, =z_interrupt_stacks
    3358:	20002480 	.word	0x20002480

0000335c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    335c:	4907      	ldr	r1, [pc, #28]	; (337c <z_arm_clear_arm_mpu_config+0x20>)
    335e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3362:	2300      	movs	r3, #0
	int num_regions =
    3364:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3368:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    336a:	4293      	cmp	r3, r2
    336c:	d100      	bne.n	3370 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    336e:	4770      	bx	lr
  MPU->RNR = rnr;
    3370:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3374:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3378:	3301      	adds	r3, #1
    337a:	e7f6      	b.n	336a <z_arm_clear_arm_mpu_config+0xe>
    337c:	e000ed00 	.word	0xe000ed00

00003380 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3380:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3382:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3384:	2300      	movs	r3, #0
    3386:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    338a:	f7ff ffe7 	bl	335c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    338e:	4b14      	ldr	r3, [pc, #80]	; (33e0 <z_arm_init_arch_hw_at_boot+0x60>)
    3390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    339c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    33a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    33a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    33a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    33ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    33b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    33b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    33b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    33bc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    33c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    33c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    33c8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    33cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    33d0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    33d4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    33d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33da:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    33de:	bd08      	pop	{r3, pc}
    33e0:	e000e100 	.word	0xe000e100

000033e4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    33e4:	4b08      	ldr	r3, [pc, #32]	; (3408 <z_impl_k_thread_abort+0x24>)
    33e6:	689b      	ldr	r3, [r3, #8]
    33e8:	4283      	cmp	r3, r0
    33ea:	d10b      	bne.n	3404 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    33ec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    33f0:	b143      	cbz	r3, 3404 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    33f2:	4b06      	ldr	r3, [pc, #24]	; (340c <z_impl_k_thread_abort+0x28>)
    33f4:	685a      	ldr	r2, [r3, #4]
    33f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    33fa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    33fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    33fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3402:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3404:	f004 bab0 	b.w	7968 <z_thread_abort>
    3408:	20000c30 	.word	0x20000c30
    340c:	e000ed00 	.word	0xe000ed00

00003410 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3410:	4b02      	ldr	r3, [pc, #8]	; (341c <z_arm_configure_static_mpu_regions+0xc>)
    3412:	4a03      	ldr	r2, [pc, #12]	; (3420 <z_arm_configure_static_mpu_regions+0x10>)
    3414:	4803      	ldr	r0, [pc, #12]	; (3424 <z_arm_configure_static_mpu_regions+0x14>)
    3416:	2101      	movs	r1, #1
    3418:	f000 b884 	b.w	3524 <arm_core_mpu_configure_static_mpu_regions>
    341c:	20040000 	.word	0x20040000
    3420:	20000000 	.word	0x20000000
    3424:	00009998 	.word	0x00009998

00003428 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3428:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    342a:	4b05      	ldr	r3, [pc, #20]	; (3440 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    342c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    342e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3430:	4a04      	ldr	r2, [pc, #16]	; (3444 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3432:	2120      	movs	r1, #32
    3434:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3438:	4618      	mov	r0, r3
    343a:	2101      	movs	r1, #1
    343c:	f000 b89a 	b.w	3574 <arm_core_mpu_configure_dynamic_mpu_regions>
    3440:	20000adc 	.word	0x20000adc
    3444:	150b0000 	.word	0x150b0000

00003448 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3448:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    344a:	4e27      	ldr	r6, [pc, #156]	; (34e8 <mpu_configure_regions+0xa0>)
    344c:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    344e:	2500      	movs	r5, #0
    3450:	428d      	cmp	r5, r1
    3452:	da15      	bge.n	3480 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    3454:	6844      	ldr	r4, [r0, #4]
    3456:	2c00      	cmp	r4, #0
    3458:	d043      	beq.n	34e2 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    345a:	b1d3      	cbz	r3, 3492 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    345c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3460:	ea14 0f0c 	tst.w	r4, ip
    3464:	d00f      	beq.n	3486 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3466:	4b21      	ldr	r3, [pc, #132]	; (34ec <mpu_configure_regions+0xa4>)
    3468:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    346a:	9302      	str	r3, [sp, #8]
    346c:	2300      	movs	r3, #0
    346e:	2201      	movs	r2, #1
    3470:	e9cd 3300 	strd	r3, r3, [sp]
    3474:	491e      	ldr	r1, [pc, #120]	; (34f0 <mpu_configure_regions+0xa8>)
    3476:	4618      	mov	r0, r3
    3478:	f005 fca7 	bl	8dca <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    347c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3480:	4610      	mov	r0, r2
    3482:	b005      	add	sp, #20
    3484:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    3486:	2c1f      	cmp	r4, #31
    3488:	d9ed      	bls.n	3466 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    348a:	6807      	ldr	r7, [r0, #0]
		&&
    348c:	ea1c 0f07 	tst.w	ip, r7
    3490:	d1e9      	bne.n	3466 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3492:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3494:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3496:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    349a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    349c:	d90f      	bls.n	34be <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    349e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    34a2:	d80e      	bhi.n	34c2 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    34a4:	3c01      	subs	r4, #1
    34a6:	fab4 f484 	clz	r4, r4
    34aa:	f1c4 041f 	rsb	r4, r4, #31
    34ae:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    34b0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    34b2:	ea4c 0c04 	orr.w	ip, ip, r4
    34b6:	d906      	bls.n	34c6 <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    34b8:	4b0e      	ldr	r3, [pc, #56]	; (34f4 <mpu_configure_regions+0xac>)
    34ba:	9203      	str	r2, [sp, #12]
    34bc:	e7d5      	b.n	346a <mpu_configure_regions+0x22>
		return REGION_32B;
    34be:	2408      	movs	r4, #8
    34c0:	e7f6      	b.n	34b0 <mpu_configure_regions+0x68>
		return REGION_4G;
    34c2:	243e      	movs	r4, #62	; 0x3e
    34c4:	e7f4      	b.n	34b0 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34c6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    34ca:	4314      	orrs	r4, r2
    34cc:	f044 0410 	orr.w	r4, r4, #16
    34d0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34d4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34d8:	f04c 0401 	orr.w	r4, ip, #1
    34dc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    34e0:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    34e2:	3501      	adds	r5, #1
    34e4:	300c      	adds	r0, #12
    34e6:	e7b3      	b.n	3450 <mpu_configure_regions+0x8>
    34e8:	e000ed00 	.word	0xe000ed00
    34ec:	0000aa85 	.word	0x0000aa85
    34f0:	00009834 	.word	0x00009834
    34f4:	0000aaa8 	.word	0x0000aaa8

000034f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    34f8:	4b04      	ldr	r3, [pc, #16]	; (350c <arm_core_mpu_enable+0x14>)
    34fa:	2205      	movs	r2, #5
    34fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3500:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3504:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3508:	4770      	bx	lr
    350a:	bf00      	nop
    350c:	e000ed00 	.word	0xe000ed00

00003510 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3510:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3514:	4b02      	ldr	r3, [pc, #8]	; (3520 <arm_core_mpu_disable+0x10>)
    3516:	2200      	movs	r2, #0
    3518:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    351c:	4770      	bx	lr
    351e:	bf00      	nop
    3520:	e000ed00 	.word	0xe000ed00

00003524 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3524:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3526:	4d0e      	ldr	r5, [pc, #56]	; (3560 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3528:	2301      	movs	r3, #1
    352a:	782a      	ldrb	r2, [r5, #0]
    352c:	460c      	mov	r4, r1
    352e:	f7ff ff8b 	bl	3448 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3532:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3534:	3016      	adds	r0, #22
    3536:	d111      	bne.n	355c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3538:	f240 1311 	movw	r3, #273	; 0x111
    353c:	4a09      	ldr	r2, [pc, #36]	; (3564 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    353e:	490a      	ldr	r1, [pc, #40]	; (3568 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3540:	480a      	ldr	r0, [pc, #40]	; (356c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3542:	f005 fb96 	bl	8c72 <assert_print>
    3546:	4621      	mov	r1, r4
    3548:	4809      	ldr	r0, [pc, #36]	; (3570 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    354a:	f005 fb92 	bl	8c72 <assert_print>
			regions_num);
	}
}
    354e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3552:	4804      	ldr	r0, [pc, #16]	; (3564 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3554:	f240 1111 	movw	r1, #273	; 0x111
    3558:	f005 bb84 	b.w	8c64 <assert_post_action>
}
    355c:	bd38      	pop	{r3, r4, r5, pc}
    355e:	bf00      	nop
    3560:	20000e71 	.word	0x20000e71
    3564:	0000aace 	.word	0x0000aace
    3568:	00009cc5 	.word	0x00009cc5
    356c:	00009bef 	.word	0x00009bef
    3570:	0000ab05 	.word	0x0000ab05

00003574 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3574:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3576:	4a13      	ldr	r2, [pc, #76]	; (35c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3578:	2300      	movs	r3, #0
    357a:	7812      	ldrb	r2, [r2, #0]
    357c:	460c      	mov	r4, r1
    357e:	f7ff ff63 	bl	3448 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3582:	f110 0f16 	cmn.w	r0, #22
    3586:	d00a      	beq.n	359e <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    3588:	4b0f      	ldr	r3, [pc, #60]	; (35c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    358a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    358c:	2807      	cmp	r0, #7
    358e:	dd00      	ble.n	3592 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3590:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    3592:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3596:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    359a:	3001      	adds	r0, #1
    359c:	e7f6      	b.n	358c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    359e:	4a0b      	ldr	r2, [pc, #44]	; (35cc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    35a0:	490b      	ldr	r1, [pc, #44]	; (35d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    35a2:	480c      	ldr	r0, [pc, #48]	; (35d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    35a4:	f44f 7398 	mov.w	r3, #304	; 0x130
    35a8:	f005 fb63 	bl	8c72 <assert_print>
    35ac:	4621      	mov	r1, r4
    35ae:	480a      	ldr	r0, [pc, #40]	; (35d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    35b0:	f005 fb5f 	bl	8c72 <assert_print>
}
    35b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35b8:	4804      	ldr	r0, [pc, #16]	; (35cc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    35ba:	f44f 7198 	mov.w	r1, #304	; 0x130
    35be:	f005 bb51 	b.w	8c64 <assert_post_action>
    35c2:	bf00      	nop
    35c4:	20000e71 	.word	0x20000e71
    35c8:	e000ed00 	.word	0xe000ed00
    35cc:	0000aace 	.word	0x0000aace
    35d0:	00009cc5 	.word	0x00009cc5
    35d4:	00009bef 	.word	0x00009bef
    35d8:	0000ab31 	.word	0x0000ab31

000035dc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    35dc:	4927      	ldr	r1, [pc, #156]	; (367c <z_arm_mpu_init+0xa0>)
{
    35de:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    35e0:	680c      	ldr	r4, [r1, #0]
    35e2:	2c08      	cmp	r4, #8
    35e4:	d913      	bls.n	360e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    35e6:	f44f 73a4 	mov.w	r3, #328	; 0x148
    35ea:	4a25      	ldr	r2, [pc, #148]	; (3680 <z_arm_mpu_init+0xa4>)
    35ec:	4925      	ldr	r1, [pc, #148]	; (3684 <z_arm_mpu_init+0xa8>)
    35ee:	4826      	ldr	r0, [pc, #152]	; (3688 <z_arm_mpu_init+0xac>)
    35f0:	f005 fb3f 	bl	8c72 <assert_print>
    35f4:	4825      	ldr	r0, [pc, #148]	; (368c <z_arm_mpu_init+0xb0>)
    35f6:	2208      	movs	r2, #8
    35f8:	4621      	mov	r1, r4
    35fa:	f005 fb3a 	bl	8c72 <assert_print>
    35fe:	4820      	ldr	r0, [pc, #128]	; (3680 <z_arm_mpu_init+0xa4>)
    3600:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3604:	f005 fb2e 	bl	8c64 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    360c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    360e:	f7ff ff7f 	bl	3510 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3612:	6848      	ldr	r0, [r1, #4]
    3614:	491e      	ldr	r1, [pc, #120]	; (3690 <z_arm_mpu_init+0xb4>)
    3616:	2200      	movs	r2, #0
    3618:	4294      	cmp	r4, r2
    361a:	f100 000c 	add.w	r0, r0, #12
    361e:	d11a      	bne.n	3656 <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    3620:	4b1c      	ldr	r3, [pc, #112]	; (3694 <z_arm_mpu_init+0xb8>)
    3622:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3624:	f7ff ff68 	bl	34f8 <arm_core_mpu_enable>
	__ASSERT(
    3628:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    362c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3630:	2b08      	cmp	r3, #8
    3632:	d00e      	beq.n	3652 <z_arm_mpu_init+0x76>
    3634:	4918      	ldr	r1, [pc, #96]	; (3698 <z_arm_mpu_init+0xbc>)
    3636:	4a12      	ldr	r2, [pc, #72]	; (3680 <z_arm_mpu_init+0xa4>)
    3638:	4813      	ldr	r0, [pc, #76]	; (3688 <z_arm_mpu_init+0xac>)
    363a:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    363e:	f005 fb18 	bl	8c72 <assert_print>
    3642:	4816      	ldr	r0, [pc, #88]	; (369c <z_arm_mpu_init+0xc0>)
    3644:	f005 fb15 	bl	8c72 <assert_print>
    3648:	480d      	ldr	r0, [pc, #52]	; (3680 <z_arm_mpu_init+0xa4>)
    364a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    364e:	f005 fb09 	bl	8c64 <assert_post_action>
	return 0;
    3652:	2000      	movs	r0, #0
    3654:	e7da      	b.n	360c <z_arm_mpu_init+0x30>
    3656:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    365a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    365e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3662:	4313      	orrs	r3, r2
    3664:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3668:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    366c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3670:	f043 0301 	orr.w	r3, r3, #1
    3674:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3678:	3201      	adds	r2, #1
    367a:	e7cd      	b.n	3618 <z_arm_mpu_init+0x3c>
    367c:	000099a4 	.word	0x000099a4
    3680:	0000aace 	.word	0x0000aace
    3684:	00009cc5 	.word	0x00009cc5
    3688:	00009bef 	.word	0x00009bef
    368c:	0000ab5e 	.word	0x0000ab5e
    3690:	e000ed00 	.word	0xe000ed00
    3694:	20000e71 	.word	0x20000e71
    3698:	0000ab92 	.word	0x0000ab92
    369c:	0000abe2 	.word	0x0000abe2

000036a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    36a0:	4b01      	ldr	r3, [pc, #4]	; (36a8 <__stdout_hook_install+0x8>)
    36a2:	6018      	str	r0, [r3, #0]
}
    36a4:	4770      	bx	lr
    36a6:	bf00      	nop
    36a8:	200000c4 	.word	0x200000c4

000036ac <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    36ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    36ae:	f04f 0340 	mov.w	r3, #64	; 0x40
    36b2:	f3ef 8011 	mrs	r0, BASEPRI
    36b6:	f383 8812 	msr	BASEPRI_MAX, r3
    36ba:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36be:	4a11      	ldr	r2, [pc, #68]	; (3704 <nordicsemi_nrf52_init+0x58>)
    36c0:	2301      	movs	r3, #1
    36c2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    36c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    36ce:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    36d2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    36d6:	2c08      	cmp	r4, #8
    36d8:	d108      	bne.n	36ec <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36da:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    36de:	2905      	cmp	r1, #5
    36e0:	d804      	bhi.n	36ec <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    36e2:	4c09      	ldr	r4, [pc, #36]	; (3708 <nordicsemi_nrf52_init+0x5c>)
    36e4:	5c61      	ldrb	r1, [r4, r1]
    36e6:	b109      	cbz	r1, 36ec <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    36e8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    36ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36f0:	2201      	movs	r2, #1
    36f2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    36f6:	f380 8811 	msr	BASEPRI, r0
    36fa:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    36fe:	2000      	movs	r0, #0
    3700:	bd10      	pop	{r4, pc}
    3702:	bf00      	nop
    3704:	4001e000 	.word	0x4001e000
    3708:	0000ac16 	.word	0x0000ac16

0000370c <sys_arch_reboot>:
    *p_gpregret = val;
    370c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3710:	b2c0      	uxtb	r0, r0
    3712:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3716:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    371a:	4905      	ldr	r1, [pc, #20]	; (3730 <sys_arch_reboot+0x24>)
    371c:	4b05      	ldr	r3, [pc, #20]	; (3734 <sys_arch_reboot+0x28>)
    371e:	68ca      	ldr	r2, [r1, #12]
    3720:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3724:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3726:	60cb      	str	r3, [r1, #12]
    3728:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    372c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    372e:	e7fd      	b.n	372c <sys_arch_reboot+0x20>
    3730:	e000ed00 	.word	0xe000ed00
    3734:	05fa0004 	.word	0x05fa0004

00003738 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3738:	b120      	cbz	r0, 3744 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    373a:	4b03      	ldr	r3, [pc, #12]	; (3748 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    373c:	0180      	lsls	r0, r0, #6
    373e:	f043 0301 	orr.w	r3, r3, #1
    3742:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3744:	4770      	bx	lr
    3746:	bf00      	nop
    3748:	000098a0 	.word	0x000098a0

0000374c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    374c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    374e:	790d      	ldrb	r5, [r1, #4]
    3750:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    3754:	2c07      	cmp	r4, #7
    3756:	d81a      	bhi.n	378e <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3758:	780a      	ldrb	r2, [r1, #0]
    375a:	2a09      	cmp	r2, #9
    375c:	d81e      	bhi.n	379c <adc_nrfx_channel_setup+0x50>
    375e:	e8df f002 	tbb	[pc, r2]
    3762:	0606      	.short	0x0606
    3764:	1d060606 	.word	0x1d060606
    3768:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    376c:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    376e:	784b      	ldrb	r3, [r1, #1]
    3770:	2b03      	cmp	r3, #3
    3772:	d017      	beq.n	37a4 <adc_nrfx_channel_setup+0x58>
    3774:	2b04      	cmp	r3, #4
    3776:	f04f 0300 	mov.w	r3, #0
    377a:	d014      	beq.n	37a6 <adc_nrfx_channel_setup+0x5a>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    377c:	4a2f      	ldr	r2, [pc, #188]	; (383c <adc_nrfx_channel_setup+0xf0>)
    377e:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    3780:	e9cd 3300 	strd	r3, r3, [sp]
    3784:	492e      	ldr	r1, [pc, #184]	; (3840 <adc_nrfx_channel_setup+0xf4>)
    3786:	2201      	movs	r2, #1
    3788:	4618      	mov	r0, r3
    378a:	f005 fb7d 	bl	8e88 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    378e:	f06f 0015 	mvn.w	r0, #21
    3792:	e048      	b.n	3826 <adc_nrfx_channel_setup+0xda>
		config.gain = NRF_SAADC_GAIN2;
    3794:	2206      	movs	r2, #6
		break;
    3796:	e7ea      	b.n	376e <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3798:	2207      	movs	r2, #7
		break;
    379a:	e7e8      	b.n	376e <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    379c:	4b29      	ldr	r3, [pc, #164]	; (3844 <adc_nrfx_channel_setup+0xf8>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    379e:	9302      	str	r3, [sp, #8]
    37a0:	2300      	movs	r3, #0
    37a2:	e7ed      	b.n	3780 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    37a4:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
    37a6:	8848      	ldrh	r0, [r1, #2]
    37a8:	f244 060a 	movw	r6, #16394	; 0x400a
    37ac:	42b0      	cmp	r0, r6
    37ae:	d03e      	beq.n	382e <adc_nrfx_channel_setup+0xe2>
    37b0:	d80a      	bhi.n	37c8 <adc_nrfx_channel_setup+0x7c>
    37b2:	f244 0603 	movw	r6, #16387	; 0x4003
    37b6:	42b0      	cmp	r0, r6
    37b8:	d014      	beq.n	37e4 <adc_nrfx_channel_setup+0x98>
    37ba:	f244 0605 	movw	r6, #16389	; 0x4005
    37be:	42b0      	cmp	r0, r6
    37c0:	d033      	beq.n	382a <adc_nrfx_channel_setup+0xde>
    37c2:	b3a0      	cbz	r0, 382e <adc_nrfx_channel_setup+0xe2>
		LOG_ERR("Selected ADC acquisition time is not valid");
    37c4:	4b20      	ldr	r3, [pc, #128]	; (3848 <adc_nrfx_channel_setup+0xfc>)
    37c6:	e7ea      	b.n	379e <adc_nrfx_channel_setup+0x52>
	switch (channel_cfg->acquisition_time) {
    37c8:	f244 0614 	movw	r6, #16404	; 0x4014
    37cc:	42b0      	cmp	r0, r6
    37ce:	d030      	beq.n	3832 <adc_nrfx_channel_setup+0xe6>
    37d0:	f244 0628 	movw	r6, #16424	; 0x4028
    37d4:	42b0      	cmp	r0, r6
    37d6:	d02e      	beq.n	3836 <adc_nrfx_channel_setup+0xea>
    37d8:	f244 060f 	movw	r6, #16399	; 0x400f
    37dc:	42b0      	cmp	r0, r6
    37de:	d1f1      	bne.n	37c4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    37e0:	2003      	movs	r0, #3
    37e2:	e000      	b.n	37e6 <adc_nrfx_channel_setup+0x9a>
	nrf_saadc_channel_config_t config = {
    37e4:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37e6:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    37ea:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37ec:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
    37f0:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    p_reg->CH[channel].CONFIG =
    37f4:	0123      	lsls	r3, r4, #4
    37f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37fa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    3802:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    3806:	0123      	lsls	r3, r4, #4
    3808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    380c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3810:	798a      	ldrb	r2, [r1, #6]
    3812:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    3816:	2000      	movs	r0, #0
    3818:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    381c:	4b0b      	ldr	r3, [pc, #44]	; (384c <adc_nrfx_channel_setup+0x100>)
    381e:	794a      	ldrb	r2, [r1, #5]
    3820:	4423      	add	r3, r4
    3822:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	return 0;
}
    3826:	b004      	add	sp, #16
    3828:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    382a:	2001      	movs	r0, #1
    382c:	e7db      	b.n	37e6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    382e:	2002      	movs	r0, #2
    3830:	e7d9      	b.n	37e6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3832:	2004      	movs	r0, #4
    3834:	e7d7      	b.n	37e6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3836:	2005      	movs	r0, #5
    3838:	e7d5      	b.n	37e6 <adc_nrfx_channel_setup+0x9a>
    383a:	bf00      	nop
    383c:	0000ac3b 	.word	0x0000ac3b
    3840:	0000980c 	.word	0x0000980c
    3844:	0000ac1c 	.word	0x0000ac1c
    3848:	0000ac5f 	.word	0x0000ac5f
    384c:	20000000 	.word	0x20000000

00003850 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3850:	4b04      	ldr	r3, [pc, #16]	; (3864 <adc_context_start_sampling.isra.0+0x14>)
    3852:	2201      	movs	r2, #1
    3854:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3858:	b108      	cbz	r0, 385e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    385a:	60da      	str	r2, [r3, #12]
}
    385c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    385e:	601a      	str	r2, [r3, #0]
    3860:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3862:	4770      	bx	lr
    3864:	40007000 	.word	0x40007000

00003868 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3868:	b5f0      	push	{r4, r5, r6, r7, lr}
    386a:	460d      	mov	r5, r1
    386c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
    386e:	4870      	ldr	r0, [pc, #448]	; (3a30 <adc_nrfx_read+0x1c8>)
    3870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3878:	f002 ff5a 	bl	6730 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    387c:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    387e:	b114      	cbz	r4, 3886 <adc_nrfx_read+0x1e>
    3880:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    3884:	d00a      	beq.n	389c <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    3886:	4b6b      	ldr	r3, [pc, #428]	; (3a34 <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    3888:	9302      	str	r3, [sp, #8]
    388a:	2300      	movs	r3, #0
    388c:	e9cd 3300 	strd	r3, r3, [sp]
    3890:	4969      	ldr	r1, [pc, #420]	; (3a38 <adc_nrfx_read+0x1d0>)
    3892:	2201      	movs	r2, #1
    3894:	4618      	mov	r0, r3
    3896:	f005 faf7 	bl	8e88 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    389a:	e053      	b.n	3944 <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    389c:	4e67      	ldr	r6, [pc, #412]	; (3a3c <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    389e:	4f68      	ldr	r7, [pc, #416]	; (3a40 <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    38a0:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    38a2:	fa24 f302 	lsr.w	r3, r4, r2
    38a6:	f013 0301 	ands.w	r3, r3, #1
    38aa:	d02f      	beq.n	390c <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    38ac:	18bb      	adds	r3, r7, r2
    38ae:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    38b2:	b92b      	cbnz	r3, 38c0 <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    38b4:	9203      	str	r2, [sp, #12]
    38b6:	4a63      	ldr	r2, [pc, #396]	; (3a44 <adc_nrfx_read+0x1dc>)
    38b8:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    38ba:	e9cd 3300 	strd	r3, r3, [sp]
    38be:	e03c      	b.n	393a <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    38c0:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    38c4:	f895 c011 	ldrb.w	ip, [r5, #17]
    38c8:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    38cc:	f1bc 0c00 	subs.w	ip, ip, #0
    38d0:	bf18      	it	ne
    38d2:	f04f 0c01 	movne.w	ip, #1
    38d6:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    38da:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    38de:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    38e2:	f102 0051 	add.w	r0, r2, #81	; 0x51
    38e6:	0100      	lsls	r0, r0, #4
			++active_channels;
    38e8:	3101      	adds	r1, #1
    38ea:	5033      	str	r3, [r6, r0]
    38ec:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    38ee:	3201      	adds	r2, #1
    38f0:	2a08      	cmp	r2, #8
    38f2:	d1d6      	bne.n	38a2 <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    38f4:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    38f6:	f1a2 0008 	sub.w	r0, r2, #8
    38fa:	2300      	movs	r3, #0
    38fc:	2806      	cmp	r0, #6
    38fe:	d816      	bhi.n	392e <adc_nrfx_read+0xc6>
    3900:	e8df f000 	tbb	[pc, r0]
    3904:	15091528 	.word	0x15091528
    3908:	152a      	.short	0x152a
    390a:	13          	.byte	0x13
    390b:	00          	.byte	0x00
    390c:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3910:	0100      	lsls	r0, r0, #4
    3912:	5033      	str	r3, [r6, r0]
}
    3914:	e7eb      	b.n	38ee <adc_nrfx_read+0x86>
    3916:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    3918:	4a48      	ldr	r2, [pc, #288]	; (3a3c <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    391a:	2901      	cmp	r1, #1
    391c:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3920:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3922:	d91b      	bls.n	395c <adc_nrfx_read+0xf4>
    3924:	b1e3      	cbz	r3, 3960 <adc_nrfx_read+0xf8>
		LOG_ERR(
    3926:	4b48      	ldr	r3, [pc, #288]	; (3a48 <adc_nrfx_read+0x1e0>)
    3928:	e7ae      	b.n	3888 <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    392a:	2303      	movs	r3, #3
		break;
    392c:	e7f4      	b.n	3918 <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    392e:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    3930:	4a46      	ldr	r2, [pc, #280]	; (3a4c <adc_nrfx_read+0x1e4>)
    3932:	9300      	str	r3, [sp, #0]
    3934:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3938:	2300      	movs	r3, #0
    393a:	493f      	ldr	r1, [pc, #252]	; (3a38 <adc_nrfx_read+0x1d0>)
    393c:	2201      	movs	r2, #1
    393e:	4618      	mov	r0, r3
    3940:	f005 faa2 	bl	8e88 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3944:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    3948:	4839      	ldr	r0, [pc, #228]	; (3a30 <adc_nrfx_read+0x1c8>)
    394a:	f002 feb3 	bl	66b4 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    394e:	4620      	mov	r0, r4
    3950:	b007      	add	sp, #28
    3952:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3954:	2300      	movs	r3, #0
    3956:	e7df      	b.n	3918 <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3958:	2302      	movs	r3, #2
    395a:	e7dd      	b.n	3918 <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    395c:	2b08      	cmp	r3, #8
    395e:	d816      	bhi.n	398e <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    3960:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    3964:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3966:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3968:	b9b2      	cbnz	r2, 3998 <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    396a:	68ea      	ldr	r2, [r5, #12]
    396c:	429a      	cmp	r2, r3
    396e:	d217      	bcs.n	39a0 <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    3970:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3974:	4b36      	ldr	r3, [pc, #216]	; (3a50 <adc_nrfx_read+0x1e8>)
    3976:	9302      	str	r3, [sp, #8]
    3978:	2300      	movs	r3, #0
    397a:	e9cd 3300 	strd	r3, r3, [sp]
    397e:	492e      	ldr	r1, [pc, #184]	; (3a38 <adc_nrfx_read+0x1d0>)
    3980:	2201      	movs	r2, #1
    3982:	4618      	mov	r0, r3
    3984:	f005 fa80 	bl	8e88 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    3988:	f06f 040b 	mvn.w	r4, #11
    398c:	e7dc      	b.n	3948 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    398e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    3990:	4b30      	ldr	r3, [pc, #192]	; (3a54 <adc_nrfx_read+0x1ec>)
    3992:	9302      	str	r3, [sp, #8]
    3994:	2300      	movs	r3, #0
    3996:	e790      	b.n	38ba <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3998:	8992      	ldrh	r2, [r2, #12]
    399a:	fb02 3303 	mla	r3, r2, r3, r3
    399e:	e7e4      	b.n	396a <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    39a0:	4b26      	ldr	r3, [pc, #152]	; (3a3c <adc_nrfx_read+0x1d4>)
    39a2:	68aa      	ldr	r2, [r5, #8]
    39a4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    39a8:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    39aa:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    39ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    39b0:	4c23      	ldr	r4, [pc, #140]	; (3a40 <adc_nrfx_read+0x1d8>)
    39b2:	f104 0664 	add.w	r6, r4, #100	; 0x64
    39b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    39b8:	683b      	ldr	r3, [r7, #0]
    39ba:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    39bc:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    39be:	2600      	movs	r6, #0
    39c0:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    39c2:	4627      	mov	r7, r4
    39c4:	b373      	cbz	r3, 3a24 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    39c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    39c8:	f104 0578 	add.w	r5, r4, #120	; 0x78
    39cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    39d0:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    39d2:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    39d6:	b328      	cbz	r0, 3a24 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    39d8:	f3bf 8f5b 	dmb	ish
    39dc:	e857 3f00 	ldrex	r3, [r7]
    39e0:	e847 6200 	strex	r2, r6, [r7]
    39e4:	2a00      	cmp	r2, #0
    39e6:	d1f9      	bne.n	39dc <adc_nrfx_read+0x174>
    39e8:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    39ec:	481a      	ldr	r0, [pc, #104]	; (3a58 <adc_nrfx_read+0x1f0>)
    39ee:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    39f0:	4a1a      	ldr	r2, [pc, #104]	; (3a5c <adc_nrfx_read+0x1f4>)
    39f2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    39f6:	4631      	mov	r1, r6
    39f8:	2300      	movs	r3, #0
    39fa:	fbe7 0105 	umlal	r0, r1, r7, r5
    39fe:	f7fc fd61 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3a02:	2200      	movs	r2, #0
    3a04:	e9cd 0100 	strd	r0, r1, [sp]
    3a08:	2300      	movs	r3, #0
    3a0a:	f104 0008 	add.w	r0, r4, #8
    3a0e:	f004 fc31 	bl	8274 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    3a12:	4813      	ldr	r0, [pc, #76]	; (3a60 <adc_nrfx_read+0x1f8>)
    3a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a1c:	f002 fe88 	bl	6730 <z_impl_k_sem_take>
	return ctx->status;
    3a20:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    3a22:	e791      	b.n	3948 <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3a24:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    3a28:	f7ff ff12 	bl	3850 <adc_context_start_sampling.isra.0>
    3a2c:	e7f1      	b.n	3a12 <adc_nrfx_read+0x1aa>
    3a2e:	bf00      	nop
    3a30:	20000040 	.word	0x20000040
    3a34:	0000ac8a 	.word	0x0000ac8a
    3a38:	0000980c 	.word	0x0000980c
    3a3c:	40007000 	.word	0x40007000
    3a40:	20000000 	.word	0x20000000
    3a44:	0000aca8 	.word	0x0000aca8
    3a48:	0000ace7 	.word	0x0000ace7
    3a4c:	0000acc2 	.word	0x0000acc2
    3a50:	0000ad3c 	.word	0x0000ad3c
    3a54:	0000ad19 	.word	0x0000ad19
    3a58:	000f423f 	.word	0x000f423f
    3a5c:	000f4240 	.word	0x000f4240
    3a60:	20000050 	.word	0x20000050

00003a64 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a64:	4b0e      	ldr	r3, [pc, #56]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3a66:	b510      	push	{r4, lr}
    3a68:	2400      	movs	r4, #0
    3a6a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3a6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3a72:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    3a76:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    3a7a:	2212      	movs	r2, #18
    3a7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3a80:	2007      	movs	r0, #7
    3a82:	f7fe ffe1 	bl	2a48 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3a86:	4622      	mov	r2, r4
    3a88:	2101      	movs	r1, #1
    3a8a:	2007      	movs	r0, #7
    3a8c:	f7fe fff8 	bl	2a80 <z_arm_irq_priority_set>
	return sem->count;
    3a90:	4804      	ldr	r0, [pc, #16]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
	if (!k_sem_count_get(&ctx->lock)) {
    3a92:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3a94:	b913      	cbnz	r3, 3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
	z_impl_k_sem_give(sem);
    3a96:	3040      	adds	r0, #64	; 0x40
    3a98:	f002 fe0c 	bl	66b4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3a9c:	2000      	movs	r0, #0
    3a9e:	bd10      	pop	{r4, pc}
    3aa0:	40007000 	.word	0x40007000
    3aa4:	20000000 	.word	0x20000000

00003aa8 <saadc_irq_handler>:
{
    3aa8:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3aaa:	4b2e      	ldr	r3, [pc, #184]	; (3b64 <saadc_irq_handler+0xbc>)
    3aac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3ab0:	2a00      	cmp	r2, #0
    3ab2:	d04a      	beq.n	3b4a <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ab4:	2200      	movs	r2, #0
    3ab6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3aba:	4c2b      	ldr	r4, [pc, #172]	; (3b68 <saadc_irq_handler+0xc0>)
    3abc:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ac0:	2101      	movs	r1, #1
    3ac2:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3ac4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    3ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3aca:	4625      	mov	r5, r4
    3acc:	b3c3      	cbz	r3, 3b40 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3ace:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    3ad0:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
    3ad4:	b133      	cbz	r3, 3ae4 <saadc_irq_handler+0x3c>
			action = callback(dev,
    3ad6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3ada:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3adc:	2801      	cmp	r0, #1
    3ade:	d014      	beq.n	3b0a <saadc_irq_handler+0x62>
    3ae0:	2802      	cmp	r0, #2
    3ae2:	d028      	beq.n	3b36 <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3ae4:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    3ae8:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    3aec:	429a      	cmp	r2, r3
    3aee:	d922      	bls.n	3b36 <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3af0:	3301      	adds	r3, #1
    3af2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3af6:	4b1b      	ldr	r3, [pc, #108]	; (3b64 <saadc_irq_handler+0xbc>)
    3af8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3afc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3b00:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3b02:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3b06:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3b0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3b0c:	b92b      	cbnz	r3, 3b1a <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3b0e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    3b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3b16:	f7ff be9b 	b.w	3850 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b1a:	f3bf 8f5b 	dmb	ish
    3b1e:	e855 3f00 	ldrex	r3, [r5]
    3b22:	1e5a      	subs	r2, r3, #1
    3b24:	e845 2100 	strex	r1, r2, [r5]
    3b28:	2900      	cmp	r1, #0
    3b2a:	d1f8      	bne.n	3b1e <saadc_irq_handler+0x76>
    3b2c:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3b30:	2b01      	cmp	r3, #1
    3b32:	dcec      	bgt.n	3b0e <saadc_irq_handler+0x66>
    3b34:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3b36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3b38:	b113      	cbz	r3, 3b40 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3b3a:	480c      	ldr	r0, [pc, #48]	; (3b6c <saadc_irq_handler+0xc4>)
    3b3c:	f005 fcf7 	bl	952e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3b40:	480b      	ldr	r0, [pc, #44]	; (3b70 <saadc_irq_handler+0xc8>)
    3b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3b46:	f002 bdb5 	b.w	66b4 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b4a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3b4e:	2900      	cmp	r1, #0
    3b50:	d0f0      	beq.n	3b34 <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    3b56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b5a:	2201      	movs	r2, #1
    3b5c:	609a      	str	r2, [r3, #8]
    3b5e:	601a      	str	r2, [r3, #0]
    3b60:	605a      	str	r2, [r3, #4]
}
    3b62:	e7e7      	b.n	3b34 <saadc_irq_handler+0x8c>
    3b64:	40007000 	.word	0x40007000
    3b68:	20000000 	.word	0x20000000
    3b6c:	20000008 	.word	0x20000008
    3b70:	20000050 	.word	0x20000050

00003b74 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3b76:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3b78:	490a      	ldr	r1, [pc, #40]	; (3ba4 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b7a:	4a0b      	ldr	r2, [pc, #44]	; (3ba8 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    3b7c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b7e:	2340      	movs	r3, #64	; 0x40
    3b80:	9300      	str	r3, [sp, #0]
    3b82:	1149      	asrs	r1, r1, #5
{
    3b84:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b86:	4623      	mov	r3, r4
    3b88:	4808      	ldr	r0, [pc, #32]	; (3bac <onoff_start+0x38>)
    3b8a:	f005 f9b9 	bl	8f00 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3b8e:	1e01      	subs	r1, r0, #0
    3b90:	da05      	bge.n	3b9e <onoff_start+0x2a>
		notify(mgr, err);
    3b92:	4628      	mov	r0, r5
    3b94:	4623      	mov	r3, r4
	}
}
    3b96:	b003      	add	sp, #12
    3b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    3b9c:	4718      	bx	r3
}
    3b9e:	b003      	add	sp, #12
    3ba0:	bd30      	pop	{r4, r5, pc}
    3ba2:	bf00      	nop
    3ba4:	20000af8 	.word	0x20000af8
    3ba8:	00008f6f 	.word	0x00008f6f
    3bac:	000095fc 	.word	0x000095fc

00003bb0 <get_status>:
{
    3bb0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bb2:	b2cc      	uxtb	r4, r1
    3bb4:	2c01      	cmp	r4, #1
{
    3bb6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bb8:	d909      	bls.n	3bce <get_status+0x1e>
    3bba:	4909      	ldr	r1, [pc, #36]	; (3be0 <get_status+0x30>)
    3bbc:	4809      	ldr	r0, [pc, #36]	; (3be4 <get_status+0x34>)
    3bbe:	4a0a      	ldr	r2, [pc, #40]	; (3be8 <get_status+0x38>)
    3bc0:	2379      	movs	r3, #121	; 0x79
    3bc2:	f005 f856 	bl	8c72 <assert_print>
    3bc6:	4808      	ldr	r0, [pc, #32]	; (3be8 <get_status+0x38>)
    3bc8:	2179      	movs	r1, #121	; 0x79
    3bca:	f005 f84b 	bl	8c64 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3bce:	692b      	ldr	r3, [r5, #16]
    3bd0:	220c      	movs	r2, #12
    3bd2:	fb04 3302 	mla	r3, r4, r2, r3
    3bd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    3bd8:	f000 0007 	and.w	r0, r0, #7
    3bdc:	bd38      	pop	{r3, r4, r5, pc}
    3bde:	bf00      	nop
    3be0:	0000adad 	.word	0x0000adad
    3be4:	00009bef 	.word	0x00009bef
    3be8:	0000ad70 	.word	0x0000ad70

00003bec <stop>:
{
    3bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bee:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bf0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    3bf2:	6906      	ldr	r6, [r0, #16]
{
    3bf4:	4605      	mov	r5, r0
    3bf6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bf8:	d90b      	bls.n	3c12 <stop+0x26>
    3bfa:	4919      	ldr	r1, [pc, #100]	; (3c60 <stop+0x74>)
    3bfc:	4819      	ldr	r0, [pc, #100]	; (3c64 <stop+0x78>)
    3bfe:	4a1a      	ldr	r2, [pc, #104]	; (3c68 <stop+0x7c>)
    3c00:	f240 134d 	movw	r3, #333	; 0x14d
    3c04:	f005 f835 	bl	8c72 <assert_print>
    3c08:	4817      	ldr	r0, [pc, #92]	; (3c68 <stop+0x7c>)
    3c0a:	f240 114d 	movw	r1, #333	; 0x14d
    3c0e:	f005 f829 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    3c12:	f04f 0340 	mov.w	r3, #64	; 0x40
    3c16:	f3ef 8111 	mrs	r1, BASEPRI
    3c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c1e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3c22:	220c      	movs	r2, #12
    3c24:	fb02 6304 	mla	r3, r2, r4, r6
    3c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3c2a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    3c2e:	d001      	beq.n	3c34 <stop+0x48>
    3c30:	429f      	cmp	r7, r3
    3c32:	d111      	bne.n	3c58 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3c34:	fb02 6604 	mla	r6, r2, r4, r6
    3c38:	2301      	movs	r3, #1
    3c3a:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    3c3c:	2000      	movs	r0, #0
	__asm__ volatile(
    3c3e:	f381 8811 	msr	BASEPRI, r1
    3c42:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3c46:	b930      	cbnz	r0, 3c56 <stop+0x6a>
	get_sub_config(dev, type)->stop();
    3c48:	686b      	ldr	r3, [r5, #4]
    3c4a:	220c      	movs	r2, #12
    3c4c:	fb02 3304 	mla	r3, r2, r4, r3
    3c50:	685b      	ldr	r3, [r3, #4]
    3c52:	4798      	blx	r3
	return 0;
    3c54:	2000      	movs	r0, #0
}
    3c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c5c:	e7ef      	b.n	3c3e <stop+0x52>
    3c5e:	bf00      	nop
    3c60:	0000adad 	.word	0x0000adad
    3c64:	00009bef 	.word	0x00009bef
    3c68:	0000ad70 	.word	0x0000ad70

00003c6c <onoff_stop>:
{
    3c6c:	b570      	push	{r4, r5, r6, lr}
    3c6e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3c70:	4906      	ldr	r1, [pc, #24]	; (3c8c <onoff_stop+0x20>)
    3c72:	1a41      	subs	r1, r0, r1
{
    3c74:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3c76:	1149      	asrs	r1, r1, #5
    3c78:	4805      	ldr	r0, [pc, #20]	; (3c90 <onoff_stop+0x24>)
    3c7a:	2240      	movs	r2, #64	; 0x40
    3c7c:	f7ff ffb6 	bl	3bec <stop>
	notify(mgr, res);
    3c80:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3c82:	4601      	mov	r1, r0
	notify(mgr, res);
    3c84:	4620      	mov	r0, r4
}
    3c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3c8a:	4718      	bx	r3
    3c8c:	20000af8 	.word	0x20000af8
    3c90:	000095fc 	.word	0x000095fc

00003c94 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c94:	2200      	movs	r2, #0
{
    3c96:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c98:	2101      	movs	r1, #1
{
    3c9a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c9c:	4610      	mov	r0, r2
    3c9e:	f7fe feef 	bl	2a80 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3ca2:	480f      	ldr	r0, [pc, #60]	; (3ce0 <clk_init+0x4c>)
    3ca4:	f001 f990 	bl	4fc8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3ca8:	4b0e      	ldr	r3, [pc, #56]	; (3ce4 <clk_init+0x50>)
    3caa:	4298      	cmp	r0, r3
    3cac:	d115      	bne.n	3cda <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3cae:	f001 f9b1 	bl	5014 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3cb2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cb4:	490c      	ldr	r1, [pc, #48]	; (3ce8 <clk_init+0x54>)
    3cb6:	4630      	mov	r0, r6
    3cb8:	f004 ff2f 	bl	8b1a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3cbc:	2800      	cmp	r0, #0
    3cbe:	db0b      	blt.n	3cd8 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    3cc0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cc2:	4909      	ldr	r1, [pc, #36]	; (3ce8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cc4:	2501      	movs	r5, #1
    3cc6:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cc8:	f104 0020 	add.w	r0, r4, #32
    3ccc:	f004 ff25 	bl	8b1a <onoff_manager_init>
		if (err < 0) {
    3cd0:	2800      	cmp	r0, #0
    3cd2:	db01      	blt.n	3cd8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cd4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3cd6:	2000      	movs	r0, #0
}
    3cd8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3cda:	f06f 0004 	mvn.w	r0, #4
    3cde:	e7fb      	b.n	3cd8 <clk_init+0x44>
    3ce0:	00003d21 	.word	0x00003d21
    3ce4:	0bad0000 	.word	0x0bad0000
    3ce8:	00009a00 	.word	0x00009a00

00003cec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3cec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3cee:	230c      	movs	r3, #12
    3cf0:	4809      	ldr	r0, [pc, #36]	; (3d18 <clkstarted_handle.constprop.0+0x2c>)
    3cf2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3cf4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3cf6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3cf8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3cfc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3cfe:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3d00:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3d02:	4418      	add	r0, r3
    3d04:	f005 f8e9 	bl	8eda <set_on_state>
	if (callback) {
    3d08:	b12d      	cbz	r5, 3d16 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d0a:	4632      	mov	r2, r6
    3d0c:	462b      	mov	r3, r5
    3d0e:	4803      	ldr	r0, [pc, #12]	; (3d1c <clkstarted_handle.constprop.0+0x30>)
}
    3d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d14:	4718      	bx	r3
}
    3d16:	bd70      	pop	{r4, r5, r6, pc}
    3d18:	20000af8 	.word	0x20000af8
    3d1c:	000095fc 	.word	0x000095fc

00003d20 <clock_event_handler>:
	switch (event) {
    3d20:	2801      	cmp	r0, #1
{
    3d22:	b508      	push	{r3, lr}
	switch (event) {
    3d24:	d006      	beq.n	3d34 <clock_event_handler+0x14>
    3d26:	2803      	cmp	r0, #3
    3d28:	d008      	beq.n	3d3c <clock_event_handler+0x1c>
    3d2a:	b9a8      	cbnz	r0, 3d58 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3d2c:	4b10      	ldr	r3, [pc, #64]	; (3d70 <clock_event_handler+0x50>)
    3d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d30:	075b      	lsls	r3, r3, #29
    3d32:	d11b      	bne.n	3d6c <clock_event_handler+0x4c>
}
    3d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3d38:	f7ff bfd8 	b.w	3cec <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3d3c:	490d      	ldr	r1, [pc, #52]	; (3d74 <clock_event_handler+0x54>)
    3d3e:	4a0e      	ldr	r2, [pc, #56]	; (3d78 <clock_event_handler+0x58>)
    3d40:	480e      	ldr	r0, [pc, #56]	; (3d7c <clock_event_handler+0x5c>)
    3d42:	f240 235e 	movw	r3, #606	; 0x25e
    3d46:	f004 ff94 	bl	8c72 <assert_print>
    3d4a:	f240 215e 	movw	r1, #606	; 0x25e
}
    3d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3d52:	4809      	ldr	r0, [pc, #36]	; (3d78 <clock_event_handler+0x58>)
    3d54:	f004 bf86 	b.w	8c64 <assert_post_action>
    3d58:	4906      	ldr	r1, [pc, #24]	; (3d74 <clock_event_handler+0x54>)
    3d5a:	4a07      	ldr	r2, [pc, #28]	; (3d78 <clock_event_handler+0x58>)
    3d5c:	4807      	ldr	r0, [pc, #28]	; (3d7c <clock_event_handler+0x5c>)
    3d5e:	f240 2362 	movw	r3, #610	; 0x262
    3d62:	f004 ff86 	bl	8c72 <assert_print>
    3d66:	f240 2162 	movw	r1, #610	; 0x262
    3d6a:	e7f0      	b.n	3d4e <clock_event_handler+0x2e>
}
    3d6c:	bd08      	pop	{r3, pc}
    3d6e:	bf00      	nop
    3d70:	20000af8 	.word	0x20000af8
    3d74:	00009cc5 	.word	0x00009cc5
    3d78:	0000ad70 	.word	0x0000ad70
    3d7c:	00009bef 	.word	0x00009bef

00003d80 <generic_hfclk_start>:
{
    3d80:	b508      	push	{r3, lr}
	__asm__ volatile(
    3d82:	f04f 0340 	mov.w	r3, #64	; 0x40
    3d86:	f3ef 8111 	mrs	r1, BASEPRI
    3d8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d8e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3d92:	4a12      	ldr	r2, [pc, #72]	; (3ddc <generic_hfclk_start+0x5c>)
    3d94:	6813      	ldr	r3, [r2, #0]
    3d96:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3d9a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3d9e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3da0:	d00c      	beq.n	3dbc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3da6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3daa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3dae:	f013 0301 	ands.w	r3, r3, #1
    3db2:	d003      	beq.n	3dbc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3db4:	480a      	ldr	r0, [pc, #40]	; (3de0 <generic_hfclk_start+0x60>)
    3db6:	f005 f890 	bl	8eda <set_on_state>
			already_started = true;
    3dba:	2301      	movs	r3, #1
	__asm__ volatile(
    3dbc:	f381 8811 	msr	BASEPRI, r1
    3dc0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3dc4:	b123      	cbz	r3, 3dd0 <generic_hfclk_start+0x50>
}
    3dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3dca:	2000      	movs	r0, #0
    3dcc:	f7ff bf8e 	b.w	3cec <clkstarted_handle.constprop.0>
}
    3dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3dd4:	2001      	movs	r0, #1
    3dd6:	f001 b941 	b.w	505c <nrfx_clock_start>
    3dda:	bf00      	nop
    3ddc:	20000b50 	.word	0x20000b50
    3de0:	20000b40 	.word	0x20000b40

00003de4 <api_blocking_start>:
{
    3de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3de6:	2200      	movs	r2, #0
    3de8:	2301      	movs	r3, #1
    3dea:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3dee:	4a09      	ldr	r2, [pc, #36]	; (3e14 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3df0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3df4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3df6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3dfa:	f005 f8b1 	bl	8f60 <api_start>
	if (err < 0) {
    3dfe:	2800      	cmp	r0, #0
    3e00:	db05      	blt.n	3e0e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3e06:	2300      	movs	r3, #0
    3e08:	4668      	mov	r0, sp
    3e0a:	f002 fc91 	bl	6730 <z_impl_k_sem_take>
}
    3e0e:	b005      	add	sp, #20
    3e10:	f85d fb04 	ldr.w	pc, [sp], #4
    3e14:	00008f8d 	.word	0x00008f8d

00003e18 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e18:	4b09      	ldr	r3, [pc, #36]	; (3e40 <generic_hfclk_stop+0x28>)
    3e1a:	f3bf 8f5b 	dmb	ish
    3e1e:	e853 2f00 	ldrex	r2, [r3]
    3e22:	f022 0102 	bic.w	r1, r2, #2
    3e26:	e843 1000 	strex	r0, r1, [r3]
    3e2a:	2800      	cmp	r0, #0
    3e2c:	d1f7      	bne.n	3e1e <generic_hfclk_stop+0x6>
    3e2e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3e32:	07d3      	lsls	r3, r2, #31
    3e34:	d402      	bmi.n	3e3c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3e36:	2001      	movs	r0, #1
    3e38:	f001 b974 	b.w	5124 <nrfx_clock_stop>
}
    3e3c:	4770      	bx	lr
    3e3e:	bf00      	nop
    3e40:	20000b50 	.word	0x20000b50

00003e44 <z_nrf_clock_control_lf_on>:
{
    3e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e48:	4947      	ldr	r1, [pc, #284]	; (3f68 <z_nrf_clock_control_lf_on+0x124>)
    3e4a:	f3bf 8f5b 	dmb	ish
    3e4e:	4606      	mov	r6, r0
    3e50:	2201      	movs	r2, #1
    3e52:	e851 3f00 	ldrex	r3, [r1]
    3e56:	e841 2000 	strex	r0, r2, [r1]
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d1f9      	bne.n	3e52 <z_nrf_clock_control_lf_on+0xe>
    3e5e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3e62:	b9a3      	cbnz	r3, 3e8e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3e64:	4941      	ldr	r1, [pc, #260]	; (3f6c <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    3e66:	4842      	ldr	r0, [pc, #264]	; (3f70 <z_nrf_clock_control_lf_on+0x12c>)
    3e68:	604b      	str	r3, [r1, #4]
    3e6a:	60cb      	str	r3, [r1, #12]
    3e6c:	608a      	str	r2, [r1, #8]
    3e6e:	f7fd fa47 	bl	1300 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3e72:	2800      	cmp	r0, #0
    3e74:	da0b      	bge.n	3e8e <z_nrf_clock_control_lf_on+0x4a>
    3e76:	493f      	ldr	r1, [pc, #252]	; (3f74 <z_nrf_clock_control_lf_on+0x130>)
    3e78:	483f      	ldr	r0, [pc, #252]	; (3f78 <z_nrf_clock_control_lf_on+0x134>)
    3e7a:	4a40      	ldr	r2, [pc, #256]	; (3f7c <z_nrf_clock_control_lf_on+0x138>)
    3e7c:	f44f 7308 	mov.w	r3, #544	; 0x220
    3e80:	f004 fef7 	bl	8c72 <assert_print>
    3e84:	483d      	ldr	r0, [pc, #244]	; (3f7c <z_nrf_clock_control_lf_on+0x138>)
    3e86:	f44f 7108 	mov.w	r1, #544	; 0x220
    3e8a:	f004 feeb 	bl	8c64 <assert_post_action>
	switch (start_mode) {
    3e8e:	b396      	cbz	r6, 3ef6 <z_nrf_clock_control_lf_on+0xb2>
    3e90:	1e73      	subs	r3, r6, #1
    3e92:	2b01      	cmp	r3, #1
    3e94:	d853      	bhi.n	3f3e <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3e96:	2e01      	cmp	r6, #1
    3e98:	d107      	bne.n	3eaa <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e9e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3ea2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3ea6:	2b01      	cmp	r3, #1
    3ea8:	d025      	beq.n	3ef6 <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3eaa:	f005 faf2 	bl	9492 <k_is_in_isr>
    3eae:	4604      	mov	r4, r0
    3eb0:	b918      	cbnz	r0, 3eba <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    3eb2:	4b33      	ldr	r3, [pc, #204]	; (3f80 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    3eb4:	781b      	ldrb	r3, [r3, #0]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d14f      	bne.n	3f5a <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    3eba:	f04f 0340 	mov.w	r3, #64	; 0x40
    3ebe:	f3ef 8711 	mrs	r7, BASEPRI
    3ec2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ec6:	f3bf 8f6f 	isb	sy
    3eca:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ecc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3f84 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3ed0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ed4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ed8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3edc:	03d2      	lsls	r2, r2, #15
    3ede:	d50c      	bpl.n	3efa <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3ee0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3ee4:	2b01      	cmp	r3, #1
    3ee6:	d001      	beq.n	3eec <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3ee8:	2e01      	cmp	r6, #1
    3eea:	d106      	bne.n	3efa <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    3eec:	b30c      	cbz	r4, 3f32 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    3eee:	f387 8811 	msr	BASEPRI, r7
    3ef2:	f3bf 8f6f 	isb	sy
}
    3ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3efa:	b1ac      	cbz	r4, 3f28 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3efc:	4638      	mov	r0, r7
    3efe:	f7fe fd49 	bl	2994 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3f02:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3f06:	2b00      	cmp	r3, #0
    3f08:	d1e4      	bne.n	3ed4 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f0a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3f0e:	2a00      	cmp	r2, #0
    3f10:	d0e0      	beq.n	3ed4 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f12:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    3f16:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f1a:	2301      	movs	r3, #1
    3f1c:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    3f20:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f24:	60ab      	str	r3, [r5, #8]
}
    3f26:	e7d5      	b.n	3ed4 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    3f28:	2100      	movs	r1, #0
    3f2a:	2021      	movs	r0, #33	; 0x21
    3f2c:	f003 fcde 	bl	78ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3f30:	e7e7      	b.n	3f02 <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    3f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f36:	2202      	movs	r2, #2
    3f38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3f3c:	e7db      	b.n	3ef6 <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    3f3e:	4912      	ldr	r1, [pc, #72]	; (3f88 <z_nrf_clock_control_lf_on+0x144>)
    3f40:	480d      	ldr	r0, [pc, #52]	; (3f78 <z_nrf_clock_control_lf_on+0x134>)
    3f42:	4a0e      	ldr	r2, [pc, #56]	; (3f7c <z_nrf_clock_control_lf_on+0x138>)
    3f44:	f240 2332 	movw	r3, #562	; 0x232
    3f48:	f004 fe93 	bl	8c72 <assert_print>
}
    3f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    3f50:	480a      	ldr	r0, [pc, #40]	; (3f7c <z_nrf_clock_control_lf_on+0x138>)
    3f52:	f240 2132 	movw	r1, #562	; 0x232
    3f56:	f004 be85 	b.w	8c64 <assert_post_action>
    p_reg->INTENCLR = mask;
    3f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f5e:	2202      	movs	r2, #2
    3f60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3f64:	4607      	mov	r7, r0
}
    3f66:	e7b1      	b.n	3ecc <z_nrf_clock_control_lf_on+0x88>
    3f68:	20000b54 	.word	0x20000b54
    3f6c:	20000ae8 	.word	0x20000ae8
    3f70:	20000b18 	.word	0x20000b18
    3f74:	0000a39c 	.word	0x0000a39c
    3f78:	00009bef 	.word	0x00009bef
    3f7c:	0000ad70 	.word	0x0000ad70
    3f80:	20001282 	.word	0x20001282
    3f84:	e000e100 	.word	0xe000e100
    3f88:	00009cc5 	.word	0x00009cc5

00003f8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3f8c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3f8e:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <uart_console_init+0x24>)
    3f90:	4808      	ldr	r0, [pc, #32]	; (3fb4 <uart_console_init+0x28>)
    3f92:	6018      	str	r0, [r3, #0]
    3f94:	f005 fa43 	bl	941e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3f98:	b138      	cbz	r0, 3faa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3f9a:	4807      	ldr	r0, [pc, #28]	; (3fb8 <uart_console_init+0x2c>)
    3f9c:	f7ff fb80 	bl	36a0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3fa0:	4805      	ldr	r0, [pc, #20]	; (3fb8 <uart_console_init+0x2c>)
    3fa2:	f7fc ff87 	bl	eb4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3fa6:	2000      	movs	r0, #0
}
    3fa8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3faa:	f06f 0012 	mvn.w	r0, #18
    3fae:	e7fb      	b.n	3fa8 <uart_console_init+0x1c>
    3fb0:	20000b58 	.word	0x20000b58
    3fb4:	0000965c 	.word	0x0000965c
    3fb8:	00003fbd 	.word	0x00003fbd

00003fbc <console_out>:
	if ('\n' == c) {
    3fbc:	280a      	cmp	r0, #10
{
    3fbe:	b538      	push	{r3, r4, r5, lr}
    3fc0:	4d07      	ldr	r5, [pc, #28]	; (3fe0 <console_out+0x24>)
    3fc2:	4604      	mov	r4, r0
	if ('\n' == c) {
    3fc4:	d104      	bne.n	3fd0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    3fc6:	6828      	ldr	r0, [r5, #0]
    3fc8:	6883      	ldr	r3, [r0, #8]
    3fca:	210d      	movs	r1, #13
    3fcc:	685b      	ldr	r3, [r3, #4]
    3fce:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3fd0:	6828      	ldr	r0, [r5, #0]
    3fd2:	6883      	ldr	r3, [r0, #8]
    3fd4:	b2e1      	uxtb	r1, r4
    3fd6:	685b      	ldr	r3, [r3, #4]
    3fd8:	4798      	blx	r3
}
    3fda:	4620      	mov	r0, r4
    3fdc:	bd38      	pop	{r3, r4, r5, pc}
    3fde:	bf00      	nop
    3fe0:	20000b58 	.word	0x20000b58

00003fe4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    3fe4:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    3fe6:	6905      	ldr	r5, [r0, #16]
{
    3fe8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3fea:	460c      	mov	r4, r1
    3fec:	b961      	cbnz	r1, 4008 <gpio_nrfx_manage_callback+0x24>
    3fee:	4922      	ldr	r1, [pc, #136]	; (4078 <gpio_nrfx_manage_callback+0x94>)
    3ff0:	4a22      	ldr	r2, [pc, #136]	; (407c <gpio_nrfx_manage_callback+0x98>)
    3ff2:	4823      	ldr	r0, [pc, #140]	; (4080 <gpio_nrfx_manage_callback+0x9c>)
    3ff4:	2324      	movs	r3, #36	; 0x24
    3ff6:	f004 fe3c 	bl	8c72 <assert_print>
    3ffa:	4822      	ldr	r0, [pc, #136]	; (4084 <gpio_nrfx_manage_callback+0xa0>)
    3ffc:	f004 fe39 	bl	8c72 <assert_print>
    4000:	481e      	ldr	r0, [pc, #120]	; (407c <gpio_nrfx_manage_callback+0x98>)
    4002:	2124      	movs	r1, #36	; 0x24
    4004:	f004 fe2e 	bl	8c64 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4008:	6863      	ldr	r3, [r4, #4]
    400a:	b963      	cbnz	r3, 4026 <gpio_nrfx_manage_callback+0x42>
    400c:	491e      	ldr	r1, [pc, #120]	; (4088 <gpio_nrfx_manage_callback+0xa4>)
    400e:	4a1b      	ldr	r2, [pc, #108]	; (407c <gpio_nrfx_manage_callback+0x98>)
    4010:	481b      	ldr	r0, [pc, #108]	; (4080 <gpio_nrfx_manage_callback+0x9c>)
    4012:	2325      	movs	r3, #37	; 0x25
    4014:	f004 fe2d 	bl	8c72 <assert_print>
    4018:	481c      	ldr	r0, [pc, #112]	; (408c <gpio_nrfx_manage_callback+0xa8>)
    401a:	f004 fe2a 	bl	8c72 <assert_print>
    401e:	4817      	ldr	r0, [pc, #92]	; (407c <gpio_nrfx_manage_callback+0x98>)
    4020:	2125      	movs	r1, #37	; 0x25
    4022:	f004 fe1f 	bl	8c64 <assert_post_action>
	return list->head;
    4026:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4028:	b15b      	cbz	r3, 4042 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    402a:	2200      	movs	r2, #0
    402c:	429c      	cmp	r4, r3
    402e:	d112      	bne.n	4056 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    4030:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    4032:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    4034:	b952      	cbnz	r2, 404c <gpio_nrfx_manage_callback+0x68>
    4036:	42a1      	cmp	r1, r4
	list->head = node;
    4038:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    403a:	d100      	bne.n	403e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    403c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    403e:	2300      	movs	r3, #0
    4040:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4042:	b96e      	cbnz	r6, 4060 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4044:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    4046:	bd70      	pop	{r4, r5, r6, pc}
    4048:	460b      	mov	r3, r1
    404a:	e7ef      	b.n	402c <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    404c:	42a1      	cmp	r1, r4
	parent->next = child;
    404e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4050:	bf08      	it	eq
    4052:	60aa      	streq	r2, [r5, #8]
}
    4054:	e7f3      	b.n	403e <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    4056:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4058:	461a      	mov	r2, r3
    405a:	2900      	cmp	r1, #0
    405c:	d1f4      	bne.n	4048 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    405e:	b13e      	cbz	r6, 4070 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    4060:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    4062:	686b      	ldr	r3, [r5, #4]
    4064:	6023      	str	r3, [r4, #0]
	list->head = node;
    4066:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4068:	2800      	cmp	r0, #0
    406a:	d1eb      	bne.n	4044 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    406c:	60ac      	str	r4, [r5, #8]
}
    406e:	e7ea      	b.n	4046 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    4070:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4074:	e7e7      	b.n	4046 <gpio_nrfx_manage_callback+0x62>
    4076:	bf00      	nop
    4078:	0000ae1e 	.word	0x0000ae1e
    407c:	0000adf1 	.word	0x0000adf1
    4080:	00009bef 	.word	0x00009bef
    4084:	0000ae27 	.word	0x0000ae27
    4088:	0000ae36 	.word	0x0000ae36
    408c:	0000ae48 	.word	0x0000ae48

00004090 <gpio_nrfx_pin_interrupt_configure>:
{
    4090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4092:	460e      	mov	r6, r1
	return port->config;
    4094:	6841      	ldr	r1, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4096:	7b08      	ldrb	r0, [r1, #12]
    4098:	f006 041f 	and.w	r4, r6, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    409c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    40a0:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    40a4:	f04f 0500 	mov.w	r5, #0
    40a8:	d104      	bne.n	40b4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    40aa:	4620      	mov	r0, r4
    40ac:	f001 fb60 	bl	5770 <nrfx_gpiote_trigger_disable>
	return 0;
    40b0:	2000      	movs	r0, #0
    40b2:	e053      	b.n	415c <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    40b4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    40b8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    40bc:	d150      	bne.n	4160 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    40be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    40c2:	bf0c      	ite	eq
    40c4:	2304      	moveq	r3, #4
    40c6:	2305      	movne	r3, #5
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    40c8:	6889      	ldr	r1, [r1, #8]
	nrfx_gpiote_trigger_config_t trigger_config = {
    40ca:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    40ce:	40f1      	lsrs	r1, r6
    40d0:	f011 0101 	ands.w	r1, r1, #1
    40d4:	d155      	bne.n	4182 <gpio_nrfx_pin_interrupt_configure+0xf2>
    40d6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    40da:	d152      	bne.n	4182 <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    40dc:	0966      	lsrs	r6, r4, #5
    40de:	d04a      	beq.n	4176 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    40e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    40e4:	2e01      	cmp	r6, #1
    40e6:	bf08      	it	eq
    40e8:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    40ea:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    40ee:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40f0:	07ca      	lsls	r2, r1, #31
    40f2:	d40b      	bmi.n	410c <gpio_nrfx_pin_interrupt_configure+0x7c>
    40f4:	492b      	ldr	r1, [pc, #172]	; (41a4 <gpio_nrfx_pin_interrupt_configure+0x114>)
    40f6:	482c      	ldr	r0, [pc, #176]	; (41a8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    40f8:	4a2c      	ldr	r2, [pc, #176]	; (41ac <gpio_nrfx_pin_interrupt_configure+0x11c>)
    40fa:	f240 2329 	movw	r3, #553	; 0x229
    40fe:	f004 fdb8 	bl	8c72 <assert_print>
    4102:	482a      	ldr	r0, [pc, #168]	; (41ac <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4104:	f240 2129 	movw	r1, #553	; 0x229
    4108:	f004 fdac 	bl	8c64 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    410c:	b16e      	cbz	r6, 412a <gpio_nrfx_pin_interrupt_configure+0x9a>
    410e:	2e01      	cmp	r6, #1
    4110:	d034      	beq.n	417c <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    4112:	4927      	ldr	r1, [pc, #156]	; (41b0 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4114:	4824      	ldr	r0, [pc, #144]	; (41a8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4116:	4a25      	ldr	r2, [pc, #148]	; (41ac <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4118:	f240 232e 	movw	r3, #558	; 0x22e
    411c:	f004 fda9 	bl	8c72 <assert_print>
    4120:	4822      	ldr	r0, [pc, #136]	; (41ac <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4122:	f240 212e 	movw	r1, #558	; 0x22e
    4126:	f004 fd9d 	bl	8c64 <assert_post_action>
        case 0: return NRF_P0;
    412a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    412e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4132:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4136:	07db      	lsls	r3, r3, #31
    4138:	d423      	bmi.n	4182 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    413a:	f10d 0507 	add.w	r5, sp, #7
    413e:	4629      	mov	r1, r5
    4140:	4620      	mov	r0, r4
    4142:	f001 fa39 	bl	55b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4146:	4b1b      	ldr	r3, [pc, #108]	; (41b4 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4148:	4298      	cmp	r0, r3
    414a:	d119      	bne.n	4180 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    414c:	4628      	mov	r0, r5
    414e:	f001 fa95 	bl	567c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4152:	4b19      	ldr	r3, [pc, #100]	; (41b8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4154:	4298      	cmp	r0, r3
    4156:	d013      	beq.n	4180 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    4158:	f06f 000b 	mvn.w	r0, #11
}
    415c:	b004      	add	sp, #16
    415e:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4160:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4164:	d005      	beq.n	4172 <gpio_nrfx_pin_interrupt_configure+0xe2>
    4166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    416a:	bf0c      	ite	eq
    416c:	2302      	moveq	r3, #2
    416e:	2301      	movne	r3, #1
    4170:	e7aa      	b.n	40c8 <gpio_nrfx_pin_interrupt_configure+0x38>
    4172:	2303      	movs	r3, #3
    4174:	e7a8      	b.n	40c8 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
    4176:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    417a:	e7b6      	b.n	40ea <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    417c:	4b0f      	ldr	r3, [pc, #60]	; (41bc <gpio_nrfx_pin_interrupt_configure+0x12c>)
    417e:	e7d6      	b.n	412e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4180:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4182:	2300      	movs	r3, #0
    4184:	4619      	mov	r1, r3
    4186:	aa02      	add	r2, sp, #8
    4188:	4620      	mov	r0, r4
    418a:	f001 f8ed 	bl	5368 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    418e:	4b0a      	ldr	r3, [pc, #40]	; (41b8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4190:	4298      	cmp	r0, r3
    4192:	d104      	bne.n	419e <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4194:	2101      	movs	r1, #1
    4196:	4620      	mov	r0, r4
    4198:	f001 fa76 	bl	5688 <nrfx_gpiote_trigger_enable>
    419c:	e788      	b.n	40b0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    419e:	f06f 0004 	mvn.w	r0, #4
    41a2:	e7db      	b.n	415c <gpio_nrfx_pin_interrupt_configure+0xcc>
    41a4:	0000ae92 	.word	0x0000ae92
    41a8:	00009bef 	.word	0x00009bef
    41ac:	0000ae5f 	.word	0x0000ae5f
    41b0:	00009cc5 	.word	0x00009cc5
    41b4:	0bad0004 	.word	0x0bad0004
    41b8:	0bad0000 	.word	0x0bad0000
    41bc:	50000300 	.word	0x50000300

000041c0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    41c0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    41c2:	f001 fa4b 	bl	565c <nrfx_gpiote_is_init>
    41c6:	4604      	mov	r4, r0
    41c8:	b968      	cbnz	r0, 41e6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    41ca:	f001 fa1f 	bl	560c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    41ce:	4b08      	ldr	r3, [pc, #32]	; (41f0 <gpio_nrfx_init+0x30>)
    41d0:	4298      	cmp	r0, r3
    41d2:	d10a      	bne.n	41ea <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    41d4:	4807      	ldr	r0, [pc, #28]	; (41f4 <gpio_nrfx_init+0x34>)
    41d6:	4621      	mov	r1, r4
    41d8:	f001 f9e8 	bl	55ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    41dc:	4622      	mov	r2, r4
    41de:	2105      	movs	r1, #5
    41e0:	2006      	movs	r0, #6
    41e2:	f7fe fc4d 	bl	2a80 <z_arm_irq_priority_set>
		return 0;
    41e6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    41e8:	bd10      	pop	{r4, pc}
		return -EIO;
    41ea:	f06f 0004 	mvn.w	r0, #4
    41ee:	e7fb      	b.n	41e8 <gpio_nrfx_init+0x28>
    41f0:	0bad0000 	.word	0x0bad0000
    41f4:	000041f9 	.word	0x000041f9

000041f8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41f8:	0943      	lsrs	r3, r0, #5
{
    41fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41fe:	d003      	beq.n	4208 <nrfx_gpio_handler+0x10>
    4200:	2b01      	cmp	r3, #1
    4202:	d02e      	beq.n	4262 <nrfx_gpio_handler+0x6a>
}
    4204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4208:	4f17      	ldr	r7, [pc, #92]	; (4268 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    420a:	693b      	ldr	r3, [r7, #16]
    420c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    420e:	2c00      	cmp	r4, #0
    4210:	d0f8      	beq.n	4204 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4212:	f000 001f 	and.w	r0, r0, #31
    4216:	2601      	movs	r6, #1
	return node->next;
    4218:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    421a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 426c <nrfx_gpio_handler+0x74>
    421e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4270 <nrfx_gpio_handler+0x78>
    4222:	f8df a050 	ldr.w	sl, [pc, #80]	; 4274 <nrfx_gpio_handler+0x7c>
    4226:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    4228:	68a3      	ldr	r3, [r4, #8]
    422a:	421e      	tst	r6, r3
    422c:	d014      	beq.n	4258 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    422e:	6863      	ldr	r3, [r4, #4]
    4230:	b963      	cbnz	r3, 424c <nrfx_gpio_handler+0x54>
    4232:	4649      	mov	r1, r9
    4234:	2345      	movs	r3, #69	; 0x45
    4236:	4642      	mov	r2, r8
    4238:	4650      	mov	r0, sl
    423a:	f004 fd1a 	bl	8c72 <assert_print>
    423e:	480e      	ldr	r0, [pc, #56]	; (4278 <nrfx_gpio_handler+0x80>)
    4240:	f004 fd17 	bl	8c72 <assert_print>
    4244:	2145      	movs	r1, #69	; 0x45
    4246:	4640      	mov	r0, r8
    4248:	f004 fd0c 	bl	8c64 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    424c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4250:	4621      	mov	r1, r4
    4252:	4032      	ands	r2, r6
    4254:	4638      	mov	r0, r7
    4256:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4258:	2d00      	cmp	r5, #0
    425a:	d0d3      	beq.n	4204 <nrfx_gpio_handler+0xc>
    425c:	462c      	mov	r4, r5
    425e:	682d      	ldr	r5, [r5, #0]
    4260:	e7e2      	b.n	4228 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4262:	4f06      	ldr	r7, [pc, #24]	; (427c <nrfx_gpio_handler+0x84>)
    4264:	e7d1      	b.n	420a <nrfx_gpio_handler+0x12>
    4266:	bf00      	nop
    4268:	0000962c 	.word	0x0000962c
    426c:	0000adf1 	.word	0x0000adf1
    4270:	0000aeb5 	.word	0x0000aeb5
    4274:	00009bef 	.word	0x00009bef
    4278:	0000ae48 	.word	0x0000ae48
    427c:	00009614 	.word	0x00009614

00004280 <gpio_nrfx_pin_configure>:
{
    4280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4284:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4286:	7b3b      	ldrb	r3, [r7, #12]
    4288:	f001 051f 	and.w	r5, r1, #31
{
    428c:	b085      	sub	sp, #20
    428e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4290:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4294:	4614      	mov	r4, r2
    4296:	b9ca      	cbnz	r2, 42cc <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4298:	a902      	add	r1, sp, #8
    429a:	4628      	mov	r0, r5
    429c:	f001 f98c 	bl	55b8 <nrfx_gpiote_channel_get>
    42a0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    42a2:	4628      	mov	r0, r5
    42a4:	f001 fa8e 	bl	57c4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    42a8:	4b49      	ldr	r3, [pc, #292]	; (43d0 <gpio_nrfx_pin_configure+0x150>)
    42aa:	4298      	cmp	r0, r3
    42ac:	d004      	beq.n	42b8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    42ae:	f06f 0004 	mvn.w	r0, #4
}
    42b2:	b005      	add	sp, #20
    42b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    42b8:	4284      	cmp	r4, r0
    42ba:	d105      	bne.n	42c8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    42bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    42c0:	f001 f9d6 	bl	5670 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    42c4:	42a0      	cmp	r0, r4
    42c6:	d1f2      	bne.n	42ae <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    42c8:	2000      	movs	r0, #0
    42ca:	e7f2      	b.n	42b2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    42cc:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    42d0:	f10d 0103 	add.w	r1, sp, #3
    42d4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    42d6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    42da:	f001 f96d 	bl	55b8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    42de:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    42e0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    42e2:	aa02      	add	r2, sp, #8
    42e4:	4649      	mov	r1, r9
    42e6:	4628      	mov	r0, r5
    42e8:	f001 f83e 	bl	5368 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    42ec:	4b38      	ldr	r3, [pc, #224]	; (43d0 <gpio_nrfx_pin_configure+0x150>)
    42ee:	4298      	cmp	r0, r3
    42f0:	d002      	beq.n	42f8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    42f2:	f06f 0015 	mvn.w	r0, #21
    42f6:	e7dc      	b.n	42b2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    42f8:	4580      	cmp	r8, r0
    42fa:	d103      	bne.n	4304 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    42fc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4300:	f001 f9b6 	bl	5670 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4304:	03a3      	lsls	r3, r4, #14
    4306:	d54f      	bpl.n	43a8 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4308:	f240 6306 	movw	r3, #1542	; 0x606
    430c:	4023      	ands	r3, r4
    430e:	f240 2206 	movw	r2, #518	; 0x206
    4312:	4293      	cmp	r3, r2
    4314:	d03a      	beq.n	438c <gpio_nrfx_pin_configure+0x10c>
    4316:	d80c      	bhi.n	4332 <gpio_nrfx_pin_configure+0xb2>
    4318:	2b06      	cmp	r3, #6
    431a:	d015      	beq.n	4348 <gpio_nrfx_pin_configure+0xc8>
    431c:	d804      	bhi.n	4328 <gpio_nrfx_pin_configure+0xa8>
    431e:	b19b      	cbz	r3, 4348 <gpio_nrfx_pin_configure+0xc8>
    4320:	2b02      	cmp	r3, #2
    4322:	d1e6      	bne.n	42f2 <gpio_nrfx_pin_configure+0x72>
    4324:	2304      	movs	r3, #4
    4326:	e00f      	b.n	4348 <gpio_nrfx_pin_configure+0xc8>
    4328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    432c:	d1e1      	bne.n	42f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    432e:	2301      	movs	r3, #1
    4330:	e00a      	b.n	4348 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4332:	f240 4202 	movw	r2, #1026	; 0x402
    4336:	4293      	cmp	r3, r2
    4338:	d02a      	beq.n	4390 <gpio_nrfx_pin_configure+0x110>
    433a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    433e:	d029      	beq.n	4394 <gpio_nrfx_pin_configure+0x114>
    4340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4344:	d1d5      	bne.n	42f2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4346:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4348:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    434c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4350:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4354:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4356:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    435a:	bf54      	ite	pl
    435c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
    4360:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4362:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4364:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4368:	d516      	bpl.n	4398 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    436a:	687a      	ldr	r2, [r7, #4]
    436c:	2301      	movs	r3, #1
    436e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4370:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4374:	2200      	movs	r2, #0
    4376:	a901      	add	r1, sp, #4
    4378:	4628      	mov	r0, r5
    437a:	f001 f8a3 	bl	54c4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    437e:	4b14      	ldr	r3, [pc, #80]	; (43d0 <gpio_nrfx_pin_configure+0x150>)
    4380:	4298      	cmp	r0, r3
    4382:	bf14      	ite	ne
    4384:	f06f 0015 	mvnne.w	r0, #21
    4388:	2000      	moveq	r0, #0
    438a:	e792      	b.n	42b2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    438c:	2307      	movs	r3, #7
    438e:	e7db      	b.n	4348 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4390:	2305      	movs	r3, #5
    4392:	e7d9      	b.n	4348 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4394:	2303      	movs	r3, #3
    4396:	e7d7      	b.n	4348 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4398:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    439a:	bf41      	itttt	mi
    439c:	2301      	movmi	r3, #1
    439e:	687a      	ldrmi	r2, [r7, #4]
    43a0:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    43a2:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    43a6:	e7e5      	b.n	4374 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    43a8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    43aa:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    43ae:	bf54      	ite	pl
    43b0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    43b4:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    43b6:	461a      	mov	r2, r3
    43b8:	a901      	add	r1, sp, #4
    43ba:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    43bc:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    43c0:	f000 ffd2 	bl	5368 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    43c4:	4b02      	ldr	r3, [pc, #8]	; (43d0 <gpio_nrfx_pin_configure+0x150>)
    43c6:	4298      	cmp	r0, r3
    43c8:	f43f af7e 	beq.w	42c8 <gpio_nrfx_pin_configure+0x48>
    43cc:	e791      	b.n	42f2 <gpio_nrfx_pin_configure+0x72>
    43ce:	bf00      	nop
    43d0:	0bad0000 	.word	0x0bad0000

000043d4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    43d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    43d6:	ab0b      	add	r3, sp, #44	; 0x2c
    43d8:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    43da:	9303      	str	r3, [sp, #12]
    43dc:	4b05      	ldr	r3, [pc, #20]	; (43f4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    43de:	9302      	str	r3, [sp, #8]
    43e0:	2300      	movs	r3, #0
    43e2:	e9cd 3300 	strd	r3, r3, [sp]
    43e6:	2201      	movs	r2, #1
    43e8:	4618      	mov	r0, r3
    43ea:	f7fd ff4d 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    43ee:	b007      	add	sp, #28
    43f0:	f85d fb04 	ldr.w	pc, [sp], #4
    43f4:	0000aecf 	.word	0x0000aecf

000043f8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    43f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    43fa:	794b      	ldrb	r3, [r1, #5]
    43fc:	2b01      	cmp	r3, #1
    43fe:	d026      	beq.n	444e <uarte_nrfx_configure+0x56>
    4400:	2b03      	cmp	r3, #3
    4402:	d121      	bne.n	4448 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4404:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4406:	798b      	ldrb	r3, [r1, #6]
    4408:	2b03      	cmp	r3, #3
    440a:	d11d      	bne.n	4448 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    440c:	79cc      	ldrb	r4, [r1, #7]
    440e:	b10c      	cbz	r4, 4414 <uarte_nrfx_configure+0x1c>
    4410:	2c01      	cmp	r4, #1
    4412:	d119      	bne.n	4448 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4414:	790a      	ldrb	r2, [r1, #4]
    4416:	b112      	cbz	r2, 441e <uarte_nrfx_configure+0x26>
    4418:	2a02      	cmp	r2, #2
    441a:	d115      	bne.n	4448 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    441c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    441e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4420:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4422:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4426:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4428:	d065      	beq.n	44f6 <uarte_nrfx_configure+0xfe>
    442a:	d82d      	bhi.n	4488 <uarte_nrfx_configure+0x90>
    442c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4430:	d064      	beq.n	44fc <uarte_nrfx_configure+0x104>
    4432:	d816      	bhi.n	4462 <uarte_nrfx_configure+0x6a>
    4434:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4438:	d062      	beq.n	4500 <uarte_nrfx_configure+0x108>
    443a:	d80a      	bhi.n	4452 <uarte_nrfx_configure+0x5a>
    443c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4440:	d061      	beq.n	4506 <uarte_nrfx_configure+0x10e>
    4442:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4446:	d061      	beq.n	450c <uarte_nrfx_configure+0x114>
    4448:	f06f 0085 	mvn.w	r0, #133	; 0x85
    444c:	e052      	b.n	44f4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    444e:	2600      	movs	r6, #0
    4450:	e7d9      	b.n	4406 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4452:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4456:	d05c      	beq.n	4512 <uarte_nrfx_configure+0x11a>
    4458:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    445c:	d1f4      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    445e:	4b37      	ldr	r3, [pc, #220]	; (453c <uarte_nrfx_configure+0x144>)
    4460:	e03c      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4462:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4466:	d057      	beq.n	4518 <uarte_nrfx_configure+0x120>
    4468:	d807      	bhi.n	447a <uarte_nrfx_configure+0x82>
    446a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    446e:	d055      	beq.n	451c <uarte_nrfx_configure+0x124>
    4470:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4474:	d1e8      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4476:	4b32      	ldr	r3, [pc, #200]	; (4540 <uarte_nrfx_configure+0x148>)
    4478:	e030      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    447a:	f647 2712 	movw	r7, #31250	; 0x7a12
    447e:	42bb      	cmp	r3, r7
    4480:	d1e2      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4482:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4486:	e029      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4488:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    448c:	d048      	beq.n	4520 <uarte_nrfx_configure+0x128>
    448e:	d813      	bhi.n	44b8 <uarte_nrfx_configure+0xc0>
    4490:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4494:	d047      	beq.n	4526 <uarte_nrfx_configure+0x12e>
    4496:	d809      	bhi.n	44ac <uarte_nrfx_configure+0xb4>
    4498:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    449c:	42bb      	cmp	r3, r7
    449e:	d044      	beq.n	452a <uarte_nrfx_configure+0x132>
    44a0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    44a4:	d1d0      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    44a6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    44aa:	e017      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44ac:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    44b0:	d1ca      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    44b2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    44b6:	e011      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44b8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    44bc:	d038      	beq.n	4530 <uarte_nrfx_configure+0x138>
    44be:	d808      	bhi.n	44d2 <uarte_nrfx_configure+0xda>
    44c0:	4f20      	ldr	r7, [pc, #128]	; (4544 <uarte_nrfx_configure+0x14c>)
    44c2:	42bb      	cmp	r3, r7
    44c4:	d037      	beq.n	4536 <uarte_nrfx_configure+0x13e>
    44c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    44ca:	d1bd      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    44cc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    44d0:	e004      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44d2:	4f1d      	ldr	r7, [pc, #116]	; (4548 <uarte_nrfx_configure+0x150>)
    44d4:	42bb      	cmp	r3, r7
    44d6:	d1b7      	bne.n	4448 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    44d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    44dc:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    44de:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    44e2:	1d03      	adds	r3, r0, #4
    44e4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    44e6:	4334      	orrs	r4, r6
    44e8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    44ea:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    44ee:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    44f2:	2000      	movs	r0, #0
}
    44f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    44f6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    44fa:	e7ef      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    44fc:	4b13      	ldr	r3, [pc, #76]	; (454c <uarte_nrfx_configure+0x154>)
    44fe:	e7ed      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4500:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4504:	e7ea      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    4506:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    450a:	e7e7      	b.n	44dc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    450c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4510:	e7e4      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4512:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4516:	e7e1      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4518:	4b0d      	ldr	r3, [pc, #52]	; (4550 <uarte_nrfx_configure+0x158>)
    451a:	e7df      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    451c:	4b0d      	ldr	r3, [pc, #52]	; (4554 <uarte_nrfx_configure+0x15c>)
    451e:	e7dd      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4520:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4524:	e7da      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4526:	4b0c      	ldr	r3, [pc, #48]	; (4558 <uarte_nrfx_configure+0x160>)
    4528:	e7d8      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    452a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    452e:	e7d5      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4530:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4534:	e7d2      	b.n	44dc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    453a:	e7cf      	b.n	44dc <uarte_nrfx_configure+0xe4>
    453c:	0013b000 	.word	0x0013b000
    4540:	004ea000 	.word	0x004ea000
    4544:	0003d090 	.word	0x0003d090
    4548:	000f4240 	.word	0x000f4240
    454c:	00275000 	.word	0x00275000
    4550:	0075c000 	.word	0x0075c000
    4554:	003af000 	.word	0x003af000
    4558:	013a9000 	.word	0x013a9000

0000455c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    455c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4560:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4564:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4566:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    456a:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    456e:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4570:	2100      	movs	r1, #0
    4572:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    4576:	4607      	mov	r7, r0
	data->dev = dev;
    4578:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    457a:	aa05      	add	r2, sp, #20
    457c:	4648      	mov	r0, r9
    457e:	f004 fdbd 	bl	90fc <pinctrl_lookup_state>
	if (ret < 0) {
    4582:	1e04      	subs	r4, r0, #0
    4584:	db25      	blt.n	45d2 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4586:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4588:	f8d9 2000 	ldr.w	r2, [r9]
    458c:	7919      	ldrb	r1, [r3, #4]
    458e:	6818      	ldr	r0, [r3, #0]
    4590:	f004 fe0b 	bl	91aa <pinctrl_configure_pins>
	if (err < 0) {
    4594:	1e04      	subs	r4, r0, #0
    4596:	db1c      	blt.n	45d2 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4598:	1d31      	adds	r1, r6, #4
    459a:	4638      	mov	r0, r7
    459c:	f7ff ff2c 	bl	43f8 <uarte_nrfx_configure>
	if (err) {
    45a0:	4604      	mov	r4, r0
    45a2:	b9b0      	cbnz	r0, 45d2 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    45a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    45a8:	0799      	lsls	r1, r3, #30
    45aa:	d529      	bpl.n	4600 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    45ac:	f106 0012 	add.w	r0, r6, #18
    45b0:	f001 fa04 	bl	59bc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    45b4:	4b27      	ldr	r3, [pc, #156]	; (4654 <uarte_instance_init.constprop.0+0xf8>)
    45b6:	4298      	cmp	r0, r3
    45b8:	d00f      	beq.n	45da <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    45ba:	4b27      	ldr	r3, [pc, #156]	; (4658 <uarte_instance_init.constprop.0+0xfc>)
    45bc:	9400      	str	r4, [sp, #0]
    45be:	e9cd 4301 	strd	r4, r3, [sp, #4]
    45c2:	4620      	mov	r0, r4
    45c4:	4623      	mov	r3, r4
    45c6:	4925      	ldr	r1, [pc, #148]	; (465c <uarte_instance_init.constprop.0+0x100>)
    45c8:	2201      	movs	r2, #1
    45ca:	f7ff ff03 	bl	43d4 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    45ce:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    45d2:	4620      	mov	r0, r4
    45d4:	b007      	add	sp, #28
    45d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    45da:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    45dc:	00c3      	lsls	r3, r0, #3
    45de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    45e2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    45e6:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    45ea:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    45ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    45f2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    45f6:	4a1a      	ldr	r2, [pc, #104]	; (4660 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    45f8:	2301      	movs	r3, #1
    45fa:	4083      	lsls	r3, r0
    45fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4600:	2308      	movs	r3, #8
    4602:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4606:	f898 3008 	ldrb.w	r3, [r8, #8]
    460a:	b95b      	cbnz	r3, 4624 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    460c:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4610:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4614:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4618:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    461c:	2301      	movs	r3, #1
    461e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4622:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4624:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4628:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    462a:	bf5c      	itt	pl
    462c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4630:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4634:	06db      	lsls	r3, r3, #27
    4636:	bf44      	itt	mi
    4638:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    463c:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4640:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    4642:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4644:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4648:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    464c:	2301      	movs	r3, #1
    464e:	60ab      	str	r3, [r5, #8]
    4650:	60eb      	str	r3, [r5, #12]
	return 0;
    4652:	e7be      	b.n	45d2 <uarte_instance_init.constprop.0+0x76>
    4654:	0bad0000 	.word	0x0bad0000
    4658:	0000aecf 	.word	0x0000aecf
    465c:	00009854 	.word	0x00009854
    4660:	4001f000 	.word	0x4001f000

00004664 <uarte_nrfx_poll_out>:
{
    4664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    4666:	6906      	ldr	r6, [r0, #16]
{
    4668:	4605      	mov	r5, r0
    466a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    466c:	f004 ff11 	bl	9492 <k_is_in_isr>
    4670:	b910      	cbnz	r0, 4678 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4672:	4b2c      	ldr	r3, [pc, #176]	; (4724 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    4674:	781b      	ldrb	r3, [r3, #0]
    4676:	b983      	cbnz	r3, 469a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4678:	f04f 0340 	mov.w	r3, #64	; 0x40
    467c:	f3ef 8411 	mrs	r4, BASEPRI
    4680:	f383 8812 	msr	BASEPRI_MAX, r3
    4684:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4688:	6868      	ldr	r0, [r5, #4]
    468a:	f004 fccb 	bl	9024 <is_tx_ready.isra.0>
    468e:	bb28      	cbnz	r0, 46dc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4690:	f384 8811 	msr	BASEPRI, r4
    4694:	f3bf 8f6f 	isb	sy
}
    4698:	e7ee      	b.n	4678 <uarte_nrfx_poll_out+0x14>
{
    469a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    469c:	6868      	ldr	r0, [r5, #4]
    469e:	f004 fcc1 	bl	9024 <is_tx_ready.isra.0>
    46a2:	b970      	cbnz	r0, 46c2 <uarte_nrfx_poll_out+0x5e>
    46a4:	2001      	movs	r0, #1
    46a6:	f004 fe34 	bl	9312 <nrfx_busy_wait>
    46aa:	3c01      	subs	r4, #1
    46ac:	d1f6      	bne.n	469c <uarte_nrfx_poll_out+0x38>
    46ae:	2100      	movs	r1, #0
    46b0:	2021      	movs	r0, #33	; 0x21
    46b2:	f003 f91b 	bl	78ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    46b6:	e7f0      	b.n	469a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    46b8:	f384 8811 	msr	BASEPRI, r4
    46bc:	f3bf 8f6f 	isb	sy
}
    46c0:	e7f5      	b.n	46ae <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    46c2:	f04f 0340 	mov.w	r3, #64	; 0x40
    46c6:	f3ef 8411 	mrs	r4, BASEPRI
    46ca:	f383 8812 	msr	BASEPRI_MAX, r3
    46ce:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    46d2:	6868      	ldr	r0, [r5, #4]
    46d4:	f004 fca6 	bl	9024 <is_tx_ready.isra.0>
    46d8:	2800      	cmp	r0, #0
    46da:	d0ed      	beq.n	46b8 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    46dc:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    46e0:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    46e2:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    46e4:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    46e6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    46ea:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46ee:	2200      	movs	r2, #0
    46f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    46f4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    46f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    46fc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4700:	684a      	ldr	r2, [r1, #4]
    4702:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4704:	bf41      	itttt	mi
    4706:	2208      	movmi	r2, #8
    4708:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    470c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    4710:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4714:	2201      	movs	r2, #1
    4716:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4718:	f384 8811 	msr	BASEPRI, r4
    471c:	f3bf 8f6f 	isb	sy
}
    4720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4722:	bf00      	nop
    4724:	20001282 	.word	0x20001282

00004728 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4728:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    472a:	2301      	movs	r3, #1
    472c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    472e:	4a0e      	ldr	r2, [pc, #56]	; (4768 <compare_int_lock+0x40>)
    4730:	f3bf 8f5b 	dmb	ish
    4734:	43dc      	mvns	r4, r3
    4736:	e852 1f00 	ldrex	r1, [r2]
    473a:	ea01 0504 	and.w	r5, r1, r4
    473e:	e842 5600 	strex	r6, r5, [r2]
    4742:	2e00      	cmp	r6, #0
    4744:	d1f7      	bne.n	4736 <compare_int_lock+0xe>
    4746:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    474a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    474e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4750:	4806      	ldr	r0, [pc, #24]	; (476c <compare_int_lock+0x44>)
    4752:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4756:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    475a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    475e:	420b      	tst	r3, r1
}
    4760:	bf14      	ite	ne
    4762:	2001      	movne	r0, #1
    4764:	2000      	moveq	r0, #0
    4766:	bd70      	pop	{r4, r5, r6, pc}
    4768:	20000b78 	.word	0x20000b78
    476c:	40011000 	.word	0x40011000

00004770 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4770:	4918      	ldr	r1, [pc, #96]	; (47d4 <sys_clock_timeout_handler+0x64>)
{
    4772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4774:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4776:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    477a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    477c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4780:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4784:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4786:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    478a:	d221      	bcs.n	47d0 <sys_clock_timeout_handler+0x60>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    478c:	4b12      	ldr	r3, [pc, #72]	; (47d8 <sys_clock_timeout_handler+0x68>)
    478e:	681b      	ldr	r3, [r3, #0]
    4790:	0a1a      	lsrs	r2, r3, #8
    4792:	061b      	lsls	r3, r3, #24
    4794:	195e      	adds	r6, r3, r5
    4796:	4b11      	ldr	r3, [pc, #68]	; (47dc <sys_clock_timeout_handler+0x6c>)
    4798:	f142 0700 	adc.w	r7, r2, #0
    479c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    47a0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    47a2:	f003 fba7 	bl	7ef4 <sys_clock_announce>
    return p_reg->CC[ch];
    47a6:	00a3      	lsls	r3, r4, #2
    47a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    47ac:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    47b0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    47b4:	42aa      	cmp	r2, r5
    47b6:	d10a      	bne.n	47ce <sys_clock_timeout_handler+0x5e>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    47b8:	b91e      	cbnz	r6, 47c2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    47ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    47be:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    47c2:	4a07      	ldr	r2, [pc, #28]	; (47e0 <sys_clock_timeout_handler+0x70>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    47c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    47c8:	40a3      	lsls	r3, r4
    47ca:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    47ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    47d0:	2600      	movs	r6, #0
    47d2:	e7e6      	b.n	47a2 <sys_clock_timeout_handler+0x32>
    47d4:	200003f8 	.word	0x200003f8
    47d8:	20000b7c 	.word	0x20000b7c
    47dc:	200003e0 	.word	0x200003e0
    47e0:	40011000 	.word	0x40011000

000047e4 <compare_int_unlock>:
	if (key) {
    47e4:	b311      	cbz	r1, 482c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    47e6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    47ea:	2301      	movs	r3, #1
    47ec:	4a10      	ldr	r2, [pc, #64]	; (4830 <compare_int_unlock+0x4c>)
    47ee:	4083      	lsls	r3, r0
    47f0:	e852 cf00 	ldrex	ip, [r2]
    47f4:	ea4c 0c03 	orr.w	ip, ip, r3
    47f8:	e842 c100 	strex	r1, ip, [r2]
    47fc:	2900      	cmp	r1, #0
    47fe:	d1f7      	bne.n	47f0 <compare_int_unlock+0xc>
    4800:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4804:	4a0b      	ldr	r2, [pc, #44]	; (4834 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    480a:	4083      	lsls	r3, r0
    480c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4810:	4b09      	ldr	r3, [pc, #36]	; (4838 <compare_int_unlock+0x54>)
    4812:	f3bf 8f5b 	dmb	ish
    4816:	681b      	ldr	r3, [r3, #0]
    4818:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    481c:	40c3      	lsrs	r3, r0
    481e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4820:	bf42      	ittt	mi
    4822:	4b06      	ldrmi	r3, [pc, #24]	; (483c <compare_int_unlock+0x58>)
    4824:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4828:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    482c:	4770      	bx	lr
    482e:	bf00      	nop
    4830:	20000b78 	.word	0x20000b78
    4834:	40011000 	.word	0x40011000
    4838:	20000b74 	.word	0x20000b74
    483c:	e000e100 	.word	0xe000e100

00004840 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4840:	4b0d      	ldr	r3, [pc, #52]	; (4878 <z_nrf_rtc_timer_read+0x38>)
    4842:	6818      	ldr	r0, [r3, #0]
    4844:	0a01      	lsrs	r1, r0, #8
    4846:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4848:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    484c:	4b0b      	ldr	r3, [pc, #44]	; (487c <z_nrf_rtc_timer_read+0x3c>)
    484e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4852:	1818      	adds	r0, r3, r0
    4854:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    485c:	d20a      	bcs.n	4874 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <z_nrf_rtc_timer_read+0x40>)
    4860:	e9d3 2300 	ldrd	r2, r3, [r3]
    4864:	4290      	cmp	r0, r2
    4866:	eb71 0303 	sbcs.w	r3, r1, r3
    486a:	d203      	bcs.n	4874 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    486c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4870:	f141 0100 	adc.w	r1, r1, #0
}
    4874:	4770      	bx	lr
    4876:	bf00      	nop
    4878:	20000b7c 	.word	0x20000b7c
    487c:	40011000 	.word	0x40011000
    4880:	200003e0 	.word	0x200003e0

00004884 <compare_set>:
{
    4884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4888:	b085      	sub	sp, #20
    488a:	4616      	mov	r6, r2
    488c:	4698      	mov	r8, r3
    488e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4890:	f7ff ff4a 	bl	4728 <compare_int_lock>
    4894:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4896:	f7ff ffd3 	bl	4840 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    489a:	42b0      	cmp	r0, r6
    489c:	eb71 0308 	sbcs.w	r3, r1, r8
    48a0:	d276      	bcs.n	4990 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    48a2:	4b45      	ldr	r3, [pc, #276]	; (49b8 <compare_set+0x134>)
    48a4:	1a30      	subs	r0, r6, r0
    48a6:	eb68 0101 	sbc.w	r1, r8, r1
    48aa:	4298      	cmp	r0, r3
    48ac:	f171 0100 	sbcs.w	r1, r1, #0
    48b0:	d27f      	bcs.n	49b2 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    48b2:	4b42      	ldr	r3, [pc, #264]	; (49bc <compare_set+0x138>)
    48b4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    48b8:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    48bc:	45d8      	cmp	r8, fp
    48be:	bf08      	it	eq
    48c0:	4556      	cmpeq	r6, sl
    48c2:	d050      	beq.n	4966 <compare_set+0xe2>
    48c4:	ea4f 0985 	mov.w	r9, r5, lsl #2
    48c8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    48cc:	f105 0750 	add.w	r7, r5, #80	; 0x50
    48d0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    48d4:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    48da:	40ab      	lsls	r3, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48dc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    48de:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    48e2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48e6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    48e8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    48ec:	4b34      	ldr	r3, [pc, #208]	; (49c0 <compare_set+0x13c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48ee:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    48f2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    48f4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    48f8:	1a40      	subs	r0, r0, r1
    48fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    48fe:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4902:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4904:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    4908:	d107      	bne.n	491a <compare_set+0x96>
    490a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    490e:	2013      	movs	r0, #19
    4910:	f004 fe09 	bl	9526 <z_impl_k_busy_wait>
    4914:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4918:	4b29      	ldr	r3, [pc, #164]	; (49c0 <compare_set+0x13c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    491a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    491e:	eba4 000c 	sub.w	r0, r4, ip
    4922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4926:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    492a:	bf88      	it	hi
    492c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    492e:	2000      	movs	r0, #0
    4930:	6038      	str	r0, [r7, #0]
    4932:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    4934:	9801      	ldr	r0, [sp, #4]
    4936:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    493a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    493e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4942:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    4946:	4281      	cmp	r1, r0
    4948:	d006      	beq.n	4958 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    494a:	1a20      	subs	r0, r4, r0
    494c:	3802      	subs	r0, #2
    494e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4952:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4956:	d819      	bhi.n	498c <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    4958:	1aa4      	subs	r4, r4, r2
    495a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    495e:	eb14 0a06 	adds.w	sl, r4, r6
    4962:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4966:	4915      	ldr	r1, [pc, #84]	; (49bc <compare_set+0x138>)
	cc_data[chan].callback = handler;
    4968:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    496a:	012b      	lsls	r3, r5, #4
    496c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    4970:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4974:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4978:	6053      	str	r3, [r2, #4]
	return ret;
    497a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    497c:	4628      	mov	r0, r5
    497e:	9900      	ldr	r1, [sp, #0]
    4980:	f7ff ff30 	bl	47e4 <compare_int_unlock>
}
    4984:	4620      	mov	r0, r4
    4986:	b005      	add	sp, #20
    4988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    498c:	4620      	mov	r0, r4
    498e:	e7b1      	b.n	48f4 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    4990:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4992:	4a0c      	ldr	r2, [pc, #48]	; (49c4 <compare_set+0x140>)
    4994:	f3bf 8f5b 	dmb	ish
    4998:	40ab      	lsls	r3, r5
    499a:	e852 0f00 	ldrex	r0, [r2]
    499e:	4318      	orrs	r0, r3
    49a0:	e842 0100 	strex	r1, r0, [r2]
    49a4:	2900      	cmp	r1, #0
    49a6:	d1f8      	bne.n	499a <compare_set+0x116>
    49a8:	f3bf 8f5b 	dmb	ish
    49ac:	46b2      	mov	sl, r6
    49ae:	46c3      	mov	fp, r8
    49b0:	e7d9      	b.n	4966 <compare_set+0xe2>
			return -EINVAL;
    49b2:	f06f 0415 	mvn.w	r4, #21
    49b6:	e7e1      	b.n	497c <compare_set+0xf8>
    49b8:	01000001 	.word	0x01000001
    49bc:	200003e8 	.word	0x200003e8
    49c0:	40011000 	.word	0x40011000
    49c4:	20000b74 	.word	0x20000b74

000049c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    49c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    49ca:	4b19      	ldr	r3, [pc, #100]	; (4a30 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    49cc:	4d19      	ldr	r5, [pc, #100]	; (4a34 <sys_clock_driver_init+0x6c>)
    49ce:	2400      	movs	r4, #0
    49d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    49d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    49dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    49e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    49e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49e8:	4b13      	ldr	r3, [pc, #76]	; (4a38 <sys_clock_driver_init+0x70>)
    49ea:	2602      	movs	r6, #2
    49ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    49f0:	2101      	movs	r1, #1
    49f2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    49f6:	2011      	movs	r0, #17
    49f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    49fc:	4622      	mov	r2, r4
    49fe:	f7fe f83f 	bl	2a80 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4a02:	2011      	movs	r0, #17
    4a04:	f7fe f820 	bl	2a48 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4a08:	4a0c      	ldr	r2, [pc, #48]	; (4a3c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4a0a:	2301      	movs	r3, #1
    4a0c:	60ab      	str	r3, [r5, #8]
    4a0e:	602b      	str	r3, [r5, #0]
    4a10:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4a12:	4b0b      	ldr	r3, [pc, #44]	; (4a40 <sys_clock_driver_init+0x78>)
    4a14:	4a0b      	ldr	r2, [pc, #44]	; (4a44 <sys_clock_driver_init+0x7c>)
    4a16:	9300      	str	r3, [sp, #0]
    4a18:	9401      	str	r4, [sp, #4]
    4a1a:	2300      	movs	r3, #0
    4a1c:	4620      	mov	r0, r4
    4a1e:	f7ff ff31 	bl	4884 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4a22:	4630      	mov	r0, r6
    4a24:	f7ff fa0e 	bl	3e44 <z_nrf_clock_control_lf_on>

	return 0;
}
    4a28:	4620      	mov	r0, r4
    4a2a:	b002      	add	sp, #8
    4a2c:	bd70      	pop	{r4, r5, r6, pc}
    4a2e:	bf00      	nop
    4a30:	200003e8 	.word	0x200003e8
    4a34:	40011000 	.word	0x40011000
    4a38:	e000e100 	.word	0xe000e100
    4a3c:	20000b78 	.word	0x20000b78
    4a40:	00004771 	.word	0x00004771
    4a44:	007fffff 	.word	0x007fffff

00004a48 <rtc_nrf_isr>:
{
    4a48:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
    4a4c:	4c2c      	ldr	r4, [pc, #176]	; (4b00 <rtc_nrf_isr+0xb8>)
    4a4e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4a52:	0799      	lsls	r1, r3, #30
    4a54:	d50b      	bpl.n	4a6e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a56:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4a5a:	b143      	cbz	r3, 4a6e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4a5c:	4a29      	ldr	r2, [pc, #164]	; (4b04 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a5e:	2300      	movs	r3, #0
    4a60:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4a64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4a68:	6813      	ldr	r3, [r2, #0]
    4a6a:	3301      	adds	r3, #1
    4a6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a6e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4a72:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    4a74:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4a78:	03d2      	lsls	r2, r2, #15
    4a7a:	d52d      	bpl.n	4ad8 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a7c:	f3bf 8f5b 	dmb	ish
    4a80:	4a21      	ldr	r2, [pc, #132]	; (4b08 <rtc_nrf_isr+0xc0>)
    4a82:	e852 1f00 	ldrex	r1, [r2]
    4a86:	f021 0001 	bic.w	r0, r1, #1
    4a8a:	e842 0500 	strex	r5, r0, [r2]
    4a8e:	2d00      	cmp	r5, #0
    4a90:	d1f7      	bne.n	4a82 <rtc_nrf_isr+0x3a>
    4a92:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4a96:	b911      	cbnz	r1, 4a9e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a98:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
    4a9c:	b1e2      	cbz	r2, 4ad8 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a9e:	2500      	movs	r5, #0
    4aa0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4aa4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4aa8:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
    4aac:	f7ff fec8 	bl	4840 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4ab0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4ab4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    4ab6:	4b15      	ldr	r3, [pc, #84]	; (4b0c <rtc_nrf_isr+0xc4>)
    4ab8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4abc:	42b0      	cmp	r0, r6
    4abe:	41b9      	sbcs	r1, r7
    4ac0:	d20f      	bcs.n	4ae2 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4ac2:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4ac4:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    4ac8:	b141      	cbz	r1, 4adc <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    4aca:	f8cd 8000 	str.w	r8, [sp]
    4ace:	4632      	mov	r2, r6
    4ad0:	463b      	mov	r3, r7
    4ad2:	2000      	movs	r0, #0
    4ad4:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4ad6:	e001      	b.n	4adc <rtc_nrf_isr+0x94>
    4ad8:	f383 8810 	msr	PRIMASK, r3
}
    4adc:	b002      	add	sp, #8
    4ade:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4ae2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4ae6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4aea:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4aee:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
    4af2:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4af8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
    4afc:	e7e2      	b.n	4ac4 <rtc_nrf_isr+0x7c>
    4afe:	bf00      	nop
    4b00:	40011000 	.word	0x40011000
    4b04:	20000b7c 	.word	0x20000b7c
    4b08:	20000b74 	.word	0x20000b74
    4b0c:	200003e8 	.word	0x200003e8

00004b10 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b10:	1c43      	adds	r3, r0, #1
{
    4b12:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b14:	d021      	beq.n	4b5a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4b16:	2801      	cmp	r0, #1
    4b18:	dd21      	ble.n	4b5e <sys_clock_set_timeout+0x4e>
    4b1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4b1e:	da20      	bge.n	4b62 <sys_clock_set_timeout+0x52>
    4b20:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4b22:	f7ff fe8d 	bl	4840 <z_nrf_rtc_timer_read>
    4b26:	4b10      	ldr	r3, [pc, #64]	; (4b68 <sys_clock_set_timeout+0x58>)
    4b28:	e9d3 1300 	ldrd	r1, r3, [r3]
    4b2c:	1a42      	subs	r2, r0, r1
		ticks = 0;
    4b2e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	uint64_t target_time = cyc + last_count;
    4b32:	480e      	ldr	r0, [pc, #56]	; (4b6c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    4b34:	bf28      	it	cs
    4b36:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4b38:	3201      	adds	r2, #1
    4b3a:	4422      	add	r2, r4
	uint64_t target_time = cyc + last_count;
    4b3c:	4282      	cmp	r2, r0
    4b3e:	bf28      	it	cs
    4b40:	4602      	movcs	r2, r0
    4b42:	1852      	adds	r2, r2, r1
    4b44:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4b48:	4909      	ldr	r1, [pc, #36]	; (4b70 <sys_clock_set_timeout+0x60>)
    4b4a:	9001      	str	r0, [sp, #4]
    4b4c:	9100      	str	r1, [sp, #0]
    4b4e:	f143 0300 	adc.w	r3, r3, #0
    4b52:	f7ff fe97 	bl	4884 <compare_set>
}
    4b56:	b002      	add	sp, #8
    4b58:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b5a:	4804      	ldr	r0, [pc, #16]	; (4b6c <sys_clock_set_timeout+0x5c>)
    4b5c:	e7e0      	b.n	4b20 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4b5e:	2400      	movs	r4, #0
    4b60:	e7df      	b.n	4b22 <sys_clock_set_timeout+0x12>
    4b62:	4c02      	ldr	r4, [pc, #8]	; (4b6c <sys_clock_set_timeout+0x5c>)
    4b64:	e7dd      	b.n	4b22 <sys_clock_set_timeout+0x12>
    4b66:	bf00      	nop
    4b68:	200003f8 	.word	0x200003f8
    4b6c:	007fffff 	.word	0x007fffff
    4b70:	00004771 	.word	0x00004771

00004b74 <sys_clock_elapsed>:
{
    4b74:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4b76:	f7ff fe63 	bl	4840 <z_nrf_rtc_timer_read>
    4b7a:	4b02      	ldr	r3, [pc, #8]	; (4b84 <sys_clock_elapsed+0x10>)
    4b7c:	681b      	ldr	r3, [r3, #0]
}
    4b7e:	1ac0      	subs	r0, r0, r3
    4b80:	bd08      	pop	{r3, pc}
    4b82:	bf00      	nop
    4b84:	200003f8 	.word	0x200003f8

00004b88 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b88:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4b8a:	0953      	lsrs	r3, r2, #5
{
    4b8c:	b510      	push	{r4, lr}
    4b8e:	4604      	mov	r4, r0
    switch (port)
    4b90:	d02c      	beq.n	4bec <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    4b92:	2b01      	cmp	r3, #1
    4b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4b98:	bf18      	it	ne
    4b9a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4b9c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4ba0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ba2:	07db      	lsls	r3, r3, #31
    4ba4:	d40b      	bmi.n	4bbe <nrf_gpio_pin_port_decode+0x36>
    4ba6:	4914      	ldr	r1, [pc, #80]	; (4bf8 <nrf_gpio_pin_port_decode+0x70>)
    4ba8:	4814      	ldr	r0, [pc, #80]	; (4bfc <nrf_gpio_pin_port_decode+0x74>)
    4baa:	4a15      	ldr	r2, [pc, #84]	; (4c00 <nrf_gpio_pin_port_decode+0x78>)
    4bac:	f240 2329 	movw	r3, #553	; 0x229
    4bb0:	f004 f85f 	bl	8c72 <assert_print>
    4bb4:	4812      	ldr	r0, [pc, #72]	; (4c00 <nrf_gpio_pin_port_decode+0x78>)
    4bb6:	f240 2129 	movw	r1, #553	; 0x229
    4bba:	f004 f853 	bl	8c64 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4bbe:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4bc0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bc4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4bc6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bc8:	d00d      	beq.n	4be6 <nrf_gpio_pin_port_decode+0x5e>
    4bca:	2b01      	cmp	r3, #1
    4bcc:	d011      	beq.n	4bf2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4bce:	490d      	ldr	r1, [pc, #52]	; (4c04 <nrf_gpio_pin_port_decode+0x7c>)
    4bd0:	480a      	ldr	r0, [pc, #40]	; (4bfc <nrf_gpio_pin_port_decode+0x74>)
    4bd2:	4a0b      	ldr	r2, [pc, #44]	; (4c00 <nrf_gpio_pin_port_decode+0x78>)
    4bd4:	f240 232e 	movw	r3, #558	; 0x22e
    4bd8:	f004 f84b 	bl	8c72 <assert_print>
    4bdc:	4808      	ldr	r0, [pc, #32]	; (4c00 <nrf_gpio_pin_port_decode+0x78>)
    4bde:	f240 212e 	movw	r1, #558	; 0x22e
    4be2:	f004 f83f 	bl	8c64 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4be6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4bea:	bd10      	pop	{r4, pc}
    switch (port)
    4bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4bf0:	e7d4      	b.n	4b9c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4bf2:	4805      	ldr	r0, [pc, #20]	; (4c08 <nrf_gpio_pin_port_decode+0x80>)
    4bf4:	e7f9      	b.n	4bea <nrf_gpio_pin_port_decode+0x62>
    4bf6:	bf00      	nop
    4bf8:	0000ae92 	.word	0x0000ae92
    4bfc:	00009bef 	.word	0x00009bef
    4c00:	0000ae5f 	.word	0x0000ae5f
    4c04:	00009cc5 	.word	0x00009cc5
    4c08:	50000300 	.word	0x50000300

00004c0c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4c0e:	ab0b      	add	r3, sp, #44	; 0x2c
    4c10:	9305      	str	r3, [sp, #20]
    4c12:	9303      	str	r3, [sp, #12]
    4c14:	4b05      	ldr	r3, [pc, #20]	; (4c2c <z_log_msg2_runtime_create.constprop.0+0x20>)
    4c16:	9302      	str	r3, [sp, #8]
    4c18:	2300      	movs	r3, #0
    4c1a:	e9cd 3300 	strd	r3, r3, [sp]
    4c1e:	2201      	movs	r2, #1
    4c20:	4618      	mov	r0, r3
    4c22:	f7fd fb31 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    4c26:	b007      	add	sp, #28
    4c28:	f85d fb04 	ldr.w	pc, [sp], #4
    4c2c:	0000af0c 	.word	0x0000af0c

00004c30 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    4c32:	f7fd f8cd 	bl	1dd0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4c36:	2400      	movs	r4, #0
    4c38:	4b06      	ldr	r3, [pc, #24]	; (4c54 <k_sys_fatal_error_handler+0x24>)
    4c3a:	9302      	str	r3, [sp, #8]
    4c3c:	4620      	mov	r0, r4
    4c3e:	e9cd 4400 	strd	r4, r4, [sp]
    4c42:	4905      	ldr	r1, [pc, #20]	; (4c58 <k_sys_fatal_error_handler+0x28>)
    4c44:	4623      	mov	r3, r4
    4c46:	2201      	movs	r2, #1
    4c48:	f7ff ffe0 	bl	4c0c <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    4c4c:	4620      	mov	r0, r4
    4c4e:	f7fe fd5d 	bl	370c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4c52:	bf00      	nop
    4c54:	0000af0c 	.word	0x0000af0c
    4c58:	0000981c 	.word	0x0000981c

00004c5c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4c5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4c60:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4c64:	2a08      	cmp	r2, #8
    4c66:	d106      	bne.n	4c76 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4c68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4c6c:	2b05      	cmp	r3, #5
    4c6e:	d802      	bhi.n	4c76 <nrf52_errata_103+0x1a>
    4c70:	4a02      	ldr	r2, [pc, #8]	; (4c7c <nrf52_errata_103+0x20>)
    4c72:	5cd0      	ldrb	r0, [r2, r3]
    4c74:	4770      	bx	lr
        return false;
    4c76:	2000      	movs	r0, #0
}
    4c78:	4770      	bx	lr
    4c7a:	bf00      	nop
    4c7c:	0000af2f 	.word	0x0000af2f

00004c80 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4c80:	4a02      	ldr	r2, [pc, #8]	; (4c8c <nvmc_wait+0xc>)
    4c82:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4c86:	2b00      	cmp	r3, #0
    4c88:	d0fb      	beq.n	4c82 <nvmc_wait+0x2>
}
    4c8a:	4770      	bx	lr
    4c8c:	4001e000 	.word	0x4001e000

00004c90 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4c90:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4c92:	f004 fb34 	bl	92fe <nrf52_errata_136>
    4c96:	b140      	cbz	r0, 4caa <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c9c:	2200      	movs	r2, #0
    4c9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4ca2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4ca6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4caa:	f004 fb28 	bl	92fe <nrf52_errata_136>
    4cae:	2800      	cmp	r0, #0
    4cb0:	d046      	beq.n	4d40 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4cb6:	4b60      	ldr	r3, [pc, #384]	; (4e38 <SystemInit+0x1a8>)
    4cb8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4cbc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4cc0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4cc4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4cc8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4ccc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4cd0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4cd4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4cd8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4cdc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4ce0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4ce4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4ce8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4cec:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4cf0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4cf4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4cf8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4cfc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4d00:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4d04:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4d08:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4d0c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4d10:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4d14:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4d18:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4d1c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4d20:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4d24:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4d28:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4d2c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4d30:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4d34:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4d38:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4d3c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4d40:	f7ff ff8c 	bl	4c5c <nrf52_errata_103>
    4d44:	b118      	cbz	r0, 4d4e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4d46:	4b3d      	ldr	r3, [pc, #244]	; (4e3c <SystemInit+0x1ac>)
    4d48:	4a3d      	ldr	r2, [pc, #244]	; (4e40 <SystemInit+0x1b0>)
    4d4a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4d4e:	f7ff ff85 	bl	4c5c <nrf52_errata_103>
    4d52:	b118      	cbz	r0, 4d5c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4d54:	4b3b      	ldr	r3, [pc, #236]	; (4e44 <SystemInit+0x1b4>)
    4d56:	22fb      	movs	r2, #251	; 0xfb
    4d58:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4d5c:	f7ff ff7e 	bl	4c5c <nrf52_errata_103>
    4d60:	b170      	cbz	r0, 4d80 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4d6a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    4d6e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4d72:	f022 020f 	bic.w	r2, r2, #15
    4d76:	f003 030f 	and.w	r3, r3, #15
    4d7a:	4313      	orrs	r3, r2
    4d7c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4d80:	f7ff ff6c 	bl	4c5c <nrf52_errata_103>
    4d84:	b120      	cbz	r0, 4d90 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4d86:	4b30      	ldr	r3, [pc, #192]	; (4e48 <SystemInit+0x1b8>)
    4d88:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d8c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4d90:	f004 fab5 	bl	92fe <nrf52_errata_136>
    4d94:	b148      	cbz	r0, 4daa <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4d9e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4da0:	bf44      	itt	mi
    4da2:	f06f 0201 	mvnmi.w	r2, #1
    4da6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4daa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4dae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4db2:	2a08      	cmp	r2, #8
    4db4:	d10e      	bne.n	4dd4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4db6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    4dba:	2b05      	cmp	r3, #5
    4dbc:	d802      	bhi.n	4dc4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4dbe:	4a23      	ldr	r2, [pc, #140]	; (4e4c <SystemInit+0x1bc>)
    4dc0:	5cd3      	ldrb	r3, [r2, r3]
    4dc2:	b13b      	cbz	r3, 4dd4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4dc4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4dc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dd0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4dd4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4ddc:	2a00      	cmp	r2, #0
    4dde:	db03      	blt.n	4de8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4de0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4de4:	2b00      	cmp	r3, #0
    4de6:	da22      	bge.n	4e2e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4de8:	4919      	ldr	r1, [pc, #100]	; (4e50 <SystemInit+0x1c0>)
    4dea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4dec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4df0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4df4:	2412      	movs	r4, #18
    nvmc_wait();
    4df6:	f7ff ff43 	bl	4c80 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4dfa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4dfe:	f7ff ff3f 	bl	4c80 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4e02:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4e06:	f7ff ff3b 	bl	4c80 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4e0a:	2300      	movs	r3, #0
    4e0c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4e10:	f7ff ff36 	bl	4c80 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4e14:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4e18:	490e      	ldr	r1, [pc, #56]	; (4e54 <SystemInit+0x1c4>)
    4e1a:	4b0f      	ldr	r3, [pc, #60]	; (4e58 <SystemInit+0x1c8>)
    4e1c:	68ca      	ldr	r2, [r1, #12]
    4e1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4e24:	60cb      	str	r3, [r1, #12]
    4e26:	f3bf 8f4f 	dsb	sy
    __NOP();
    4e2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4e2c:	e7fd      	b.n	4e2a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4e2e:	4b0b      	ldr	r3, [pc, #44]	; (4e5c <SystemInit+0x1cc>)
    4e30:	4a0b      	ldr	r2, [pc, #44]	; (4e60 <SystemInit+0x1d0>)
    4e32:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4e34:	bd10      	pop	{r4, pc}
    4e36:	bf00      	nop
    4e38:	4000c000 	.word	0x4000c000
    4e3c:	40005000 	.word	0x40005000
    4e40:	00038148 	.word	0x00038148
    4e44:	4000f000 	.word	0x4000f000
    4e48:	40029000 	.word	0x40029000
    4e4c:	0000af29 	.word	0x0000af29
    4e50:	4001e000 	.word	0x4001e000
    4e54:	e000ed00 	.word	0xe000ed00
    4e58:	05fa0004 	.word	0x05fa0004
    4e5c:	200000f0 	.word	0x200000f0
    4e60:	03d09000 	.word	0x03d09000

00004e64 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4e64:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4e66:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4e68:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4e6a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    4e6e:	fab2 f382 	clz	r3, r2
    4e72:	f1c3 031f 	rsb	r3, r3, #31
    4e76:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4e78:	fa05 f403 	lsl.w	r4, r5, r3
    4e7c:	ea22 0404 	bic.w	r4, r2, r4
    4e80:	e850 6f00 	ldrex	r6, [r0]
    4e84:	4296      	cmp	r6, r2
    4e86:	d104      	bne.n	4e92 <nrfx_flag32_alloc+0x2e>
    4e88:	e840 4c00 	strex	ip, r4, [r0]
    4e8c:	f1bc 0f00 	cmp.w	ip, #0
    4e90:	d1f6      	bne.n	4e80 <nrfx_flag32_alloc+0x1c>
    4e92:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4e96:	d1e7      	bne.n	4e68 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4e98:	4801      	ldr	r0, [pc, #4]	; (4ea0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4e9a:	700b      	strb	r3, [r1, #0]
}
    4e9c:	bd70      	pop	{r4, r5, r6, pc}
    4e9e:	bf00      	nop
    4ea0:	0bad0000 	.word	0x0bad0000

00004ea4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4ea4:	6803      	ldr	r3, [r0, #0]
    4ea6:	40cb      	lsrs	r3, r1
    4ea8:	07db      	lsls	r3, r3, #31
{
    4eaa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4eac:	d414      	bmi.n	4ed8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4eae:	2301      	movs	r3, #1
    4eb0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4eb2:	6802      	ldr	r2, [r0, #0]
    4eb4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4eb8:	ea43 0102 	orr.w	r1, r3, r2
    4ebc:	e850 4f00 	ldrex	r4, [r0]
    4ec0:	4294      	cmp	r4, r2
    4ec2:	d104      	bne.n	4ece <nrfx_flag32_free+0x2a>
    4ec4:	e840 1c00 	strex	ip, r1, [r0]
    4ec8:	f1bc 0f00 	cmp.w	ip, #0
    4ecc:	d1f6      	bne.n	4ebc <nrfx_flag32_free+0x18>
    4ece:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4ed2:	d1ee      	bne.n	4eb2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4ed4:	4801      	ldr	r0, [pc, #4]	; (4edc <nrfx_flag32_free+0x38>)
}
    4ed6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4ed8:	4801      	ldr	r0, [pc, #4]	; (4ee0 <nrfx_flag32_free+0x3c>)
    4eda:	e7fc      	b.n	4ed6 <nrfx_flag32_free+0x32>
    4edc:	0bad0000 	.word	0x0bad0000
    4ee0:	0bad0004 	.word	0x0bad0004

00004ee4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4ee6:	4604      	mov	r4, r0
    4ee8:	b170      	cbz	r0, 4f08 <clock_stop+0x24>
    4eea:	2801      	cmp	r0, #1
    4eec:	d031      	beq.n	4f52 <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4eee:	4931      	ldr	r1, [pc, #196]	; (4fb4 <clock_stop+0xd0>)
    4ef0:	4831      	ldr	r0, [pc, #196]	; (4fb8 <clock_stop+0xd4>)
    4ef2:	4a32      	ldr	r2, [pc, #200]	; (4fbc <clock_stop+0xd8>)
    4ef4:	23d8      	movs	r3, #216	; 0xd8
    4ef6:	f003 febc 	bl	8c72 <assert_print>
    4efa:	4830      	ldr	r0, [pc, #192]	; (4fbc <clock_stop+0xd8>)
    4efc:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4efe:	b003      	add	sp, #12
    4f00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    4f04:	f003 beae 	b.w	8c64 <assert_post_action>
    p_reg->INTENCLR = mask;
    4f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f0c:	2202      	movs	r2, #2
    4f0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f12:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4f16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f1a:	2201      	movs	r2, #1
    4f1c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4f1e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4f20:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4f22:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4f26:	bf14      	ite	ne
    4f28:	2500      	movne	r5, #0
    4f2a:	f10d 0507 	addeq.w	r5, sp, #7
    4f2e:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f32:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4f36:	b1bc      	cbz	r4, 4f68 <clock_stop+0x84>
    4f38:	2c01      	cmp	r4, #1
    4f3a:	d02c      	beq.n	4f96 <clock_stop+0xb2>
            NRFX_ASSERT(0);
    4f3c:	491d      	ldr	r1, [pc, #116]	; (4fb4 <clock_stop+0xd0>)
    4f3e:	481e      	ldr	r0, [pc, #120]	; (4fb8 <clock_stop+0xd4>)
    4f40:	4a1f      	ldr	r2, [pc, #124]	; (4fc0 <clock_stop+0xdc>)
    4f42:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4f46:	f003 fe94 	bl	8c72 <assert_print>
    4f4a:	481d      	ldr	r0, [pc, #116]	; (4fc0 <clock_stop+0xdc>)
    4f4c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4f50:	e7d5      	b.n	4efe <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    4f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f56:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4f58:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4f60:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f64:	6058      	str	r0, [r3, #4]
}
    4f66:	e7da      	b.n	4f1e <clock_stop+0x3a>
            if (p_clk_src != NULL)
    4f68:	b125      	cbz	r5, 4f74 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4f6a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4f6e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4f72:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f74:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4f78:	03da      	lsls	r2, r3, #15
    4f7a:	d519      	bpl.n	4fb0 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4f7c:	b11d      	cbz	r5, 4f86 <clock_stop+0xa2>
    4f7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4f82:	2b01      	cmp	r3, #1
    4f84:	d104      	bne.n	4f90 <clock_stop+0xac>
    4f86:	2001      	movs	r0, #1
    4f88:	f004 f9c3 	bl	9312 <nrfx_busy_wait>
    4f8c:	3f01      	subs	r7, #1
    4f8e:	d1d2      	bne.n	4f36 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4f90:	2c01      	cmp	r4, #1
    4f92:	d00a      	beq.n	4faa <clock_stop+0xc6>
    4f94:	e00c      	b.n	4fb0 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    4f96:	b125      	cbz	r5, 4fa2 <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4f98:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4f9c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4fa0:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4fa2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4fa6:	03db      	lsls	r3, r3, #15
    4fa8:	d4e8      	bmi.n	4f7c <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    4faa:	4b06      	ldr	r3, [pc, #24]	; (4fc4 <clock_stop+0xe0>)
    4fac:	2200      	movs	r2, #0
    4fae:	715a      	strb	r2, [r3, #5]
}
    4fb0:	b003      	add	sp, #12
    4fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fb4:	00009cc5 	.word	0x00009cc5
    4fb8:	00009bef 	.word	0x00009bef
    4fbc:	0000af35 	.word	0x0000af35
    4fc0:	0000af72 	.word	0x0000af72
    4fc4:	20000b80 	.word	0x20000b80

00004fc8 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4fc8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4fca:	4604      	mov	r4, r0
    4fcc:	b958      	cbnz	r0, 4fe6 <nrfx_clock_init+0x1e>
    4fce:	490b      	ldr	r1, [pc, #44]	; (4ffc <nrfx_clock_init+0x34>)
    4fd0:	480b      	ldr	r0, [pc, #44]	; (5000 <nrfx_clock_init+0x38>)
    4fd2:	4a0c      	ldr	r2, [pc, #48]	; (5004 <nrfx_clock_init+0x3c>)
    4fd4:	f240 1315 	movw	r3, #277	; 0x115
    4fd8:	f003 fe4b 	bl	8c72 <assert_print>
    4fdc:	4809      	ldr	r0, [pc, #36]	; (5004 <nrfx_clock_init+0x3c>)
    4fde:	f240 1115 	movw	r1, #277	; 0x115
    4fe2:	f003 fe3f 	bl	8c64 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4fe6:	4b08      	ldr	r3, [pc, #32]	; (5008 <nrfx_clock_init+0x40>)
    4fe8:	791a      	ldrb	r2, [r3, #4]
    4fea:	b922      	cbnz	r2, 4ff6 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4fec:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4fee:	4807      	ldr	r0, [pc, #28]	; (500c <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    4ff0:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4ff2:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4ff4:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4ff6:	4806      	ldr	r0, [pc, #24]	; (5010 <nrfx_clock_init+0x48>)
    return err_code;
    4ff8:	e7fc      	b.n	4ff4 <nrfx_clock_init+0x2c>
    4ffa:	bf00      	nop
    4ffc:	0000afa6 	.word	0x0000afa6
    5000:	00009bef 	.word	0x00009bef
    5004:	0000af35 	.word	0x0000af35
    5008:	20000b80 	.word	0x20000b80
    500c:	0bad0000 	.word	0x0bad0000
    5010:	0bad000c 	.word	0x0bad000c

00005014 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5014:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5016:	4b0d      	ldr	r3, [pc, #52]	; (504c <nrfx_clock_enable+0x38>)
    5018:	791b      	ldrb	r3, [r3, #4]
    501a:	b95b      	cbnz	r3, 5034 <nrfx_clock_enable+0x20>
    501c:	490c      	ldr	r1, [pc, #48]	; (5050 <nrfx_clock_enable+0x3c>)
    501e:	480d      	ldr	r0, [pc, #52]	; (5054 <nrfx_clock_enable+0x40>)
    5020:	4a0d      	ldr	r2, [pc, #52]	; (5058 <nrfx_clock_enable+0x44>)
    5022:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5026:	f003 fe24 	bl	8c72 <assert_print>
    502a:	480b      	ldr	r0, [pc, #44]	; (5058 <nrfx_clock_enable+0x44>)
    502c:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5030:	f003 fe18 	bl	8c64 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5034:	2000      	movs	r0, #0
    5036:	f7fd fd15 	bl	2a64 <arch_irq_is_enabled>
    503a:	b908      	cbnz	r0, 5040 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    503c:	f7fd fd04 	bl	2a48 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5040:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5044:	2200      	movs	r2, #0
    5046:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    504a:	bd08      	pop	{r3, pc}
    504c:	20000b80 	.word	0x20000b80
    5050:	0000afb4 	.word	0x0000afb4
    5054:	00009bef 	.word	0x00009bef
    5058:	0000af35 	.word	0x0000af35

0000505c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    505c:	4b2c      	ldr	r3, [pc, #176]	; (5110 <nrfx_clock_start+0xb4>)
    505e:	791b      	ldrb	r3, [r3, #4]
{
    5060:	b510      	push	{r4, lr}
    5062:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5064:	b95b      	cbnz	r3, 507e <nrfx_clock_start+0x22>
    5066:	492b      	ldr	r1, [pc, #172]	; (5114 <nrfx_clock_start+0xb8>)
    5068:	482b      	ldr	r0, [pc, #172]	; (5118 <nrfx_clock_start+0xbc>)
    506a:	4a2c      	ldr	r2, [pc, #176]	; (511c <nrfx_clock_start+0xc0>)
    506c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5070:	f003 fdff 	bl	8c72 <assert_print>
    5074:	4829      	ldr	r0, [pc, #164]	; (511c <nrfx_clock_start+0xc0>)
    5076:	f44f 71b4 	mov.w	r1, #360	; 0x168
    507a:	f003 fdf3 	bl	8c64 <assert_post_action>
    switch (domain)
    507e:	b17c      	cbz	r4, 50a0 <nrfx_clock_start+0x44>
    5080:	2c01      	cmp	r4, #1
    5082:	d03a      	beq.n	50fa <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5084:	4926      	ldr	r1, [pc, #152]	; (5120 <nrfx_clock_start+0xc4>)
    5086:	4824      	ldr	r0, [pc, #144]	; (5118 <nrfx_clock_start+0xbc>)
    5088:	4a24      	ldr	r2, [pc, #144]	; (511c <nrfx_clock_start+0xc0>)
    508a:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    508e:	f003 fdf0 	bl	8c72 <assert_print>
            break;
    }
}
    5092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    5096:	4821      	ldr	r0, [pc, #132]	; (511c <nrfx_clock_start+0xc0>)
    5098:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    509c:	f003 bde2 	b.w	8c64 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    50a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    50a4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    50a8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    50ac:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    50b0:	d10b      	bne.n	50ca <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    50b2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    50b6:	07c9      	lsls	r1, r1, #31
    50b8:	d510      	bpl.n	50dc <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    50ba:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    50be:	079b      	lsls	r3, r3, #30
    50c0:	d408      	bmi.n	50d4 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    50c2:	2302      	movs	r3, #2
    50c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    50c8:	e016      	b.n	50f8 <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    50ca:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    50ce:	2b01      	cmp	r3, #1
    50d0:	d004      	beq.n	50dc <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    50d2:	b11b      	cbz	r3, 50dc <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    50d4:	2000      	movs	r0, #0
    50d6:	f7ff ff05 	bl	4ee4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    50da:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    50dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    50e0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50e4:	2300      	movs	r3, #0
    50e6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    50ea:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    50ee:	2302      	movs	r3, #2
    50f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50f4:	2301      	movs	r3, #1
    50f6:	6093      	str	r3, [r2, #8]
}
    50f8:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50fe:	2200      	movs	r2, #0
    5100:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5104:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5108:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    510c:	601c      	str	r4, [r3, #0]
}
    510e:	e7f3      	b.n	50f8 <nrfx_clock_start+0x9c>
    5110:	20000b80 	.word	0x20000b80
    5114:	0000afb4 	.word	0x0000afb4
    5118:	00009bef 	.word	0x00009bef
    511c:	0000af35 	.word	0x0000af35
    5120:	00009cc5 	.word	0x00009cc5

00005124 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5124:	4b0a      	ldr	r3, [pc, #40]	; (5150 <nrfx_clock_stop+0x2c>)
    5126:	791b      	ldrb	r3, [r3, #4]
{
    5128:	b510      	push	{r4, lr}
    512a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    512c:	b95b      	cbnz	r3, 5146 <nrfx_clock_stop+0x22>
    512e:	4909      	ldr	r1, [pc, #36]	; (5154 <nrfx_clock_stop+0x30>)
    5130:	4809      	ldr	r0, [pc, #36]	; (5158 <nrfx_clock_stop+0x34>)
    5132:	4a0a      	ldr	r2, [pc, #40]	; (515c <nrfx_clock_stop+0x38>)
    5134:	f240 13ad 	movw	r3, #429	; 0x1ad
    5138:	f003 fd9b 	bl	8c72 <assert_print>
    513c:	4807      	ldr	r0, [pc, #28]	; (515c <nrfx_clock_stop+0x38>)
    513e:	f240 11ad 	movw	r1, #429	; 0x1ad
    5142:	f003 fd8f 	bl	8c64 <assert_post_action>
    clock_stop(domain);
    5146:	4620      	mov	r0, r4
}
    5148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    514c:	f7ff beca 	b.w	4ee4 <clock_stop>
    5150:	20000b80 	.word	0x20000b80
    5154:	0000afb4 	.word	0x0000afb4
    5158:	00009bef 	.word	0x00009bef
    515c:	0000af35 	.word	0x0000af35

00005160 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5164:	b510      	push	{r4, lr}
    5166:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    516a:	b16a      	cbz	r2, 5188 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    516c:	2200      	movs	r2, #0
    516e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5172:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5176:	2201      	movs	r2, #1
    5178:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    517c:	4b11      	ldr	r3, [pc, #68]	; (51c4 <nrfx_power_clock_irq_handler+0x64>)
    517e:	7958      	ldrb	r0, [r3, #5]
    5180:	b910      	cbnz	r0, 5188 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5182:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5184:	681b      	ldr	r3, [r3, #0]
    5186:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    518c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5190:	b172      	cbz	r2, 51b0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5192:	2200      	movs	r2, #0
    5194:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5198:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    519c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    51a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    51a4:	0792      	lsls	r2, r2, #30
    51a6:	d104      	bne.n	51b2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    51a8:	2201      	movs	r2, #1
    51aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51ae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    51b0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    51b2:	2202      	movs	r2, #2
    51b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    51b8:	4b02      	ldr	r3, [pc, #8]	; (51c4 <nrfx_power_clock_irq_handler+0x64>)
}
    51ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	2001      	movs	r0, #1
    51c2:	4718      	bx	r3
    51c4:	20000b80 	.word	0x20000b80

000051c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    51c8:	4b03      	ldr	r3, [pc, #12]	; (51d8 <pin_in_use_by_te+0x10>)
    51ca:	3008      	adds	r0, #8
    51cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    51d4:	4770      	bx	lr
    51d6:	bf00      	nop
    51d8:	200000f4 	.word	0x200000f4

000051dc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    51dc:	4b04      	ldr	r3, [pc, #16]	; (51f0 <pin_has_trigger+0x14>)
    51de:	3008      	adds	r0, #8
    51e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51e4:	f010 001c 	ands.w	r0, r0, #28
    51e8:	bf18      	it	ne
    51ea:	2001      	movne	r0, #1
    51ec:	4770      	bx	lr
    51ee:	bf00      	nop
    51f0:	200000f4 	.word	0x200000f4

000051f4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    51f4:	4b03      	ldr	r3, [pc, #12]	; (5204 <pin_is_output+0x10>)
    51f6:	3008      	adds	r0, #8
    51f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5200:	4770      	bx	lr
    5202:	bf00      	nop
    5204:	200000f4 	.word	0x200000f4

00005208 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5208:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    520a:	f100 0308 	add.w	r3, r0, #8
    520e:	4c0c      	ldr	r4, [pc, #48]	; (5240 <call_handler+0x38>)
    5210:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5214:	05da      	lsls	r2, r3, #23
{
    5216:	4605      	mov	r5, r0
    5218:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    521a:	d507      	bpl.n	522c <call_handler+0x24>
    521c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5220:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5224:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5228:	6852      	ldr	r2, [r2, #4]
    522a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    522c:	68a3      	ldr	r3, [r4, #8]
    522e:	b12b      	cbz	r3, 523c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5230:	68e2      	ldr	r2, [r4, #12]
    5232:	4631      	mov	r1, r6
    5234:	4628      	mov	r0, r5
    }
}
    5236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    523a:	4718      	bx	r3
}
    523c:	bd70      	pop	{r4, r5, r6, pc}
    523e:	bf00      	nop
    5240:	200000f4 	.word	0x200000f4

00005244 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5244:	4a19      	ldr	r2, [pc, #100]	; (52ac <release_handler+0x68>)
    5246:	3008      	adds	r0, #8
{
    5248:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    524a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    524e:	05d9      	lsls	r1, r3, #23
    5250:	d51d      	bpl.n	528e <release_handler+0x4a>
    5252:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5256:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    525a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    525e:	f102 040e 	add.w	r4, r2, #14
    5262:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5264:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5268:	f413 7f80 	tst.w	r3, #256	; 0x100
    526c:	d003      	beq.n	5276 <release_handler+0x32>
    526e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5272:	4299      	cmp	r1, r3
    5274:	d00b      	beq.n	528e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5276:	3001      	adds	r0, #1
    5278:	2830      	cmp	r0, #48	; 0x30
    527a:	d1f3      	bne.n	5264 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    527c:	2300      	movs	r3, #0
    527e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5282:	480b      	ldr	r0, [pc, #44]	; (52b0 <release_handler+0x6c>)
    5284:	f7ff fe0e 	bl	4ea4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5288:	4b0a      	ldr	r3, [pc, #40]	; (52b4 <release_handler+0x70>)
    528a:	4298      	cmp	r0, r3
    528c:	d100      	bne.n	5290 <release_handler+0x4c>
}
    528e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5290:	4909      	ldr	r1, [pc, #36]	; (52b8 <release_handler+0x74>)
    5292:	480a      	ldr	r0, [pc, #40]	; (52bc <release_handler+0x78>)
    5294:	4a0a      	ldr	r2, [pc, #40]	; (52c0 <release_handler+0x7c>)
    5296:	f44f 7399 	mov.w	r3, #306	; 0x132
    529a:	f003 fcea 	bl	8c72 <assert_print>
}
    529e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    52a2:	4807      	ldr	r0, [pc, #28]	; (52c0 <release_handler+0x7c>)
    52a4:	f44f 7199 	mov.w	r1, #306	; 0x132
    52a8:	f003 bcdc 	b.w	8c64 <assert_post_action>
    52ac:	200000f4 	.word	0x200000f4
    52b0:	20000168 	.word	0x20000168
    52b4:	0bad0000 	.word	0x0bad0000
    52b8:	0000b036 	.word	0x0000b036
    52bc:	00009bef 	.word	0x00009bef
    52c0:	0000afd2 	.word	0x0000afd2

000052c4 <pin_handler_trigger_uninit>:
{
    52c4:	b538      	push	{r3, r4, r5, lr}
    52c6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    52c8:	f7ff ff7e 	bl	51c8 <pin_in_use_by_te>
    52cc:	4c09      	ldr	r4, [pc, #36]	; (52f4 <pin_handler_trigger_uninit+0x30>)
    52ce:	f102 0508 	add.w	r5, r2, #8
    52d2:	b140      	cbz	r0, 52e6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    52d4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    52d8:	4907      	ldr	r1, [pc, #28]	; (52f8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    52da:	0b5b      	lsrs	r3, r3, #13
    52dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    52e0:	2000      	movs	r0, #0
    52e2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    52e6:	4610      	mov	r0, r2
    52e8:	f7ff ffac 	bl	5244 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    52ec:	2300      	movs	r3, #0
    52ee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    52f2:	bd38      	pop	{r3, r4, r5, pc}
    52f4:	200000f4 	.word	0x200000f4
    52f8:	40006000 	.word	0x40006000

000052fc <nrf_gpio_pin_port_decode>:
{
    52fc:	b510      	push	{r4, lr}
    52fe:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5300:	6800      	ldr	r0, [r0, #0]
    5302:	f004 f808 	bl	9316 <nrf_gpio_pin_present_check>
    5306:	b958      	cbnz	r0, 5320 <nrf_gpio_pin_port_decode+0x24>
    5308:	4912      	ldr	r1, [pc, #72]	; (5354 <nrf_gpio_pin_port_decode+0x58>)
    530a:	4813      	ldr	r0, [pc, #76]	; (5358 <nrf_gpio_pin_port_decode+0x5c>)
    530c:	4a13      	ldr	r2, [pc, #76]	; (535c <nrf_gpio_pin_port_decode+0x60>)
    530e:	f240 2329 	movw	r3, #553	; 0x229
    5312:	f003 fcae 	bl	8c72 <assert_print>
    5316:	4811      	ldr	r0, [pc, #68]	; (535c <nrf_gpio_pin_port_decode+0x60>)
    5318:	f240 2129 	movw	r1, #553	; 0x229
    531c:	f003 fca2 	bl	8c64 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5320:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5322:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5326:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5328:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    532a:	d00d      	beq.n	5348 <nrf_gpio_pin_port_decode+0x4c>
    532c:	2b01      	cmp	r3, #1
    532e:	d00e      	beq.n	534e <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    5330:	490b      	ldr	r1, [pc, #44]	; (5360 <nrf_gpio_pin_port_decode+0x64>)
    5332:	4809      	ldr	r0, [pc, #36]	; (5358 <nrf_gpio_pin_port_decode+0x5c>)
    5334:	4a09      	ldr	r2, [pc, #36]	; (535c <nrf_gpio_pin_port_decode+0x60>)
    5336:	f240 232e 	movw	r3, #558	; 0x22e
    533a:	f003 fc9a 	bl	8c72 <assert_print>
    533e:	4807      	ldr	r0, [pc, #28]	; (535c <nrf_gpio_pin_port_decode+0x60>)
    5340:	f240 212e 	movw	r1, #558	; 0x22e
    5344:	f003 fc8e 	bl	8c64 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5348:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    534c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    534e:	4805      	ldr	r0, [pc, #20]	; (5364 <nrf_gpio_pin_port_decode+0x68>)
    5350:	e7fc      	b.n	534c <nrf_gpio_pin_port_decode+0x50>
    5352:	bf00      	nop
    5354:	0000ae92 	.word	0x0000ae92
    5358:	00009bef 	.word	0x00009bef
    535c:	0000ae5f 	.word	0x0000ae5f
    5360:	00009cc5 	.word	0x00009cc5
    5364:	50000300 	.word	0x50000300

00005368 <nrfx_gpiote_input_configure>:
{
    5368:	b5f0      	push	{r4, r5, r6, r7, lr}
    536a:	4604      	mov	r4, r0
    536c:	b085      	sub	sp, #20
    536e:	4617      	mov	r7, r2
    5370:	461d      	mov	r5, r3
    if (p_input_config)
    5372:	b1f1      	cbz	r1, 53b2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    5374:	f003 ffe0 	bl	9338 <pin_is_task_output>
    5378:	b110      	cbz	r0, 5380 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    537a:	484d      	ldr	r0, [pc, #308]	; (54b0 <nrfx_gpiote_input_configure+0x148>)
}
    537c:	b005      	add	sp, #20
    537e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5380:	460b      	mov	r3, r1
    5382:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5386:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    538a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    538e:	f10d 020f 	add.w	r2, sp, #15
    5392:	f10d 010e 	add.w	r1, sp, #14
    5396:	4620      	mov	r0, r4
    5398:	f003 ffdd 	bl	9356 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    539c:	4a45      	ldr	r2, [pc, #276]	; (54b4 <nrfx_gpiote_input_configure+0x14c>)
    539e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    53a2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    53a6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    53aa:	f043 0301 	orr.w	r3, r3, #1
    53ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    53b2:	b197      	cbz	r7, 53da <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    53b4:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    53b6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    53b8:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    53ba:	f7ff ff1b 	bl	51f4 <pin_is_output>
    53be:	b180      	cbz	r0, 53e2 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    53c0:	2a00      	cmp	r2, #0
    53c2:	d1da      	bne.n	537a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    53c4:	4a3b      	ldr	r2, [pc, #236]	; (54b4 <nrfx_gpiote_input_configure+0x14c>)
    53c6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    53ca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    53ce:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    53d2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    53d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    53da:	2d00      	cmp	r5, #0
    53dc:	d13d      	bne.n	545a <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    53de:	4836      	ldr	r0, [pc, #216]	; (54b8 <nrfx_gpiote_input_configure+0x150>)
    53e0:	e7cc      	b.n	537c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    53e2:	4f34      	ldr	r7, [pc, #208]	; (54b4 <nrfx_gpiote_input_configure+0x14c>)
    53e4:	f104 0c08 	add.w	ip, r4, #8
    53e8:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    53ec:	f021 0120 	bic.w	r1, r1, #32
    53f0:	04c9      	lsls	r1, r1, #19
    53f2:	0cc9      	lsrs	r1, r1, #19
    53f4:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    53f8:	2a00      	cmp	r2, #0
    53fa:	d0e3      	beq.n	53c4 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    53fc:	2e03      	cmp	r6, #3
    53fe:	d8bc      	bhi.n	537a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5400:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5402:	b92e      	cbnz	r6, 5410 <nrfx_gpiote_input_configure+0xa8>
    5404:	4a2d      	ldr	r2, [pc, #180]	; (54bc <nrfx_gpiote_input_configure+0x154>)
    5406:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    540a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    540e:	e7d9      	b.n	53c4 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5410:	009a      	lsls	r2, r3, #2
    5412:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5416:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    541a:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    541e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5422:	f020 0003 	bic.w	r0, r0, #3
    5426:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    542a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    542e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5432:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5436:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    543a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    543e:	0220      	lsls	r0, r4, #8
    5440:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5444:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5448:	ea40 000e 	orr.w	r0, r0, lr
    544c:	f041 0120 	orr.w	r1, r1, #32
    5450:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    5454:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5458:	e7b4      	b.n	53c4 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    545a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    545e:	4620      	mov	r0, r4
    5460:	f7ff fef0 	bl	5244 <release_handler>
    if (!handler)
    5464:	2e00      	cmp	r6, #0
    5466:	d0ba      	beq.n	53de <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5468:	4d12      	ldr	r5, [pc, #72]	; (54b4 <nrfx_gpiote_input_configure+0x14c>)
    546a:	682b      	ldr	r3, [r5, #0]
    546c:	429e      	cmp	r6, r3
    546e:	d104      	bne.n	547a <nrfx_gpiote_input_configure+0x112>
    5470:	686b      	ldr	r3, [r5, #4]
    5472:	429f      	cmp	r7, r3
    5474:	d101      	bne.n	547a <nrfx_gpiote_input_configure+0x112>
    5476:	2200      	movs	r2, #0
    5478:	e00a      	b.n	5490 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    547a:	4811      	ldr	r0, [pc, #68]	; (54c0 <nrfx_gpiote_input_configure+0x158>)
    547c:	f10d 010f 	add.w	r1, sp, #15
    5480:	f7ff fcf0 	bl	4e64 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5484:	4b0c      	ldr	r3, [pc, #48]	; (54b8 <nrfx_gpiote_input_configure+0x150>)
    5486:	4298      	cmp	r0, r3
    5488:	f47f af78 	bne.w	537c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    548c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5490:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5494:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5498:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    549a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    549c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    54a0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    54a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    54a8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    54ac:	e797      	b.n	53de <nrfx_gpiote_input_configure+0x76>
    54ae:	bf00      	nop
    54b0:	0bad0004 	.word	0x0bad0004
    54b4:	200000f4 	.word	0x200000f4
    54b8:	0bad0000 	.word	0x0bad0000
    54bc:	40006000 	.word	0x40006000
    54c0:	20000168 	.word	0x20000168

000054c4 <nrfx_gpiote_output_configure>:
{
    54c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54c6:	4604      	mov	r4, r0
    54c8:	b085      	sub	sp, #20
    54ca:	4615      	mov	r5, r2
    if (p_config)
    54cc:	b321      	cbz	r1, 5518 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    54ce:	f7ff fe91 	bl	51f4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    54d2:	b920      	cbnz	r0, 54de <nrfx_gpiote_output_configure+0x1a>
    54d4:	4620      	mov	r0, r4
    54d6:	f7ff fe77 	bl	51c8 <pin_in_use_by_te>
    54da:	2800      	cmp	r0, #0
    54dc:	d15e      	bne.n	559c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    54de:	4620      	mov	r0, r4
    54e0:	f7ff fe7c 	bl	51dc <pin_has_trigger>
    54e4:	b110      	cbz	r0, 54ec <nrfx_gpiote_output_configure+0x28>
    54e6:	784b      	ldrb	r3, [r1, #1]
    54e8:	2b01      	cmp	r3, #1
    54ea:	d057      	beq.n	559c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    54ec:	2301      	movs	r3, #1
    54ee:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    54f2:	2300      	movs	r3, #0
    54f4:	e9cd 1300 	strd	r1, r3, [sp]
    54f8:	1c4a      	adds	r2, r1, #1
    54fa:	1c8b      	adds	r3, r1, #2
    54fc:	4620      	mov	r0, r4
    54fe:	f10d 010f 	add.w	r1, sp, #15
    5502:	f003 ff28 	bl	9356 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5506:	4a26      	ldr	r2, [pc, #152]	; (55a0 <nrfx_gpiote_output_configure+0xdc>)
    5508:	f104 0108 	add.w	r1, r4, #8
    550c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5510:	f043 0303 	orr.w	r3, r3, #3
    5514:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5518:	b915      	cbnz	r5, 5520 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    551a:	4822      	ldr	r0, [pc, #136]	; (55a4 <nrfx_gpiote_output_configure+0xe0>)
}
    551c:	b005      	add	sp, #20
    551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    5520:	4620      	mov	r0, r4
    5522:	f7ff fe67 	bl	51f4 <pin_is_output>
        if (pin_is_input(pin))
    5526:	b3c8      	cbz	r0, 559c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5528:	4e1d      	ldr	r6, [pc, #116]	; (55a0 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    552a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    552e:	f104 0708 	add.w	r7, r4, #8
    5532:	4661      	mov	r1, ip
    5534:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5538:	0089      	lsls	r1, r1, #2
    553a:	f020 0020 	bic.w	r0, r0, #32
    553e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5542:	04c0      	lsls	r0, r0, #19
    5544:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5548:	0cc0      	lsrs	r0, r0, #19
    554a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    554e:	2300      	movs	r3, #0
    5550:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5554:	786a      	ldrb	r2, [r5, #1]
    5556:	2a00      	cmp	r2, #0
    5558:	d0df      	beq.n	551a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    555a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    555e:	78ad      	ldrb	r5, [r5, #2]
    5560:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5564:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5568:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    556c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5570:	0223      	lsls	r3, r4, #8
    5572:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5576:	0412      	lsls	r2, r2, #16
    5578:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    557c:	ea43 030e 	orr.w	r3, r3, lr
    5580:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5582:	052a      	lsls	r2, r5, #20
    5584:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5588:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    558c:	4313      	orrs	r3, r2
    558e:	f040 0020 	orr.w	r0, r0, #32
    5592:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5596:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    559a:	e7be      	b.n	551a <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    559c:	4802      	ldr	r0, [pc, #8]	; (55a8 <nrfx_gpiote_output_configure+0xe4>)
    559e:	e7bd      	b.n	551c <nrfx_gpiote_output_configure+0x58>
    55a0:	200000f4 	.word	0x200000f4
    55a4:	0bad0000 	.word	0x0bad0000
    55a8:	0bad0004 	.word	0x0bad0004

000055ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    55ac:	4b01      	ldr	r3, [pc, #4]	; (55b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    55ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    55b2:	4770      	bx	lr
    55b4:	200000f4 	.word	0x200000f4

000055b8 <nrfx_gpiote_channel_get>:
{
    55b8:	b538      	push	{r3, r4, r5, lr}
    55ba:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    55bc:	460d      	mov	r5, r1
    55be:	b959      	cbnz	r1, 55d8 <nrfx_gpiote_channel_get+0x20>
    55c0:	490c      	ldr	r1, [pc, #48]	; (55f4 <nrfx_gpiote_channel_get+0x3c>)
    55c2:	480d      	ldr	r0, [pc, #52]	; (55f8 <nrfx_gpiote_channel_get+0x40>)
    55c4:	4a0d      	ldr	r2, [pc, #52]	; (55fc <nrfx_gpiote_channel_get+0x44>)
    55c6:	f240 2335 	movw	r3, #565	; 0x235
    55ca:	f003 fb52 	bl	8c72 <assert_print>
    55ce:	480b      	ldr	r0, [pc, #44]	; (55fc <nrfx_gpiote_channel_get+0x44>)
    55d0:	f240 2135 	movw	r1, #565	; 0x235
    55d4:	f003 fb46 	bl	8c64 <assert_post_action>
    if (pin_in_use_by_te(pin))
    55d8:	4620      	mov	r0, r4
    55da:	f7ff fdf5 	bl	51c8 <pin_in_use_by_te>
    55de:	b138      	cbz	r0, 55f0 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    55e0:	4b07      	ldr	r3, [pc, #28]	; (5600 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    55e2:	4808      	ldr	r0, [pc, #32]	; (5604 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    55e4:	3408      	adds	r4, #8
    55e6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    55ea:	0b5b      	lsrs	r3, r3, #13
    55ec:	702b      	strb	r3, [r5, #0]
}
    55ee:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    55f0:	4805      	ldr	r0, [pc, #20]	; (5608 <nrfx_gpiote_channel_get+0x50>)
    55f2:	e7fc      	b.n	55ee <nrfx_gpiote_channel_get+0x36>
    55f4:	0000b04a 	.word	0x0000b04a
    55f8:	00009bef 	.word	0x00009bef
    55fc:	0000afd2 	.word	0x0000afd2
    5600:	200000f4 	.word	0x200000f4
    5604:	0bad0000 	.word	0x0bad0000
    5608:	0bad0004 	.word	0x0bad0004

0000560c <nrfx_gpiote_init>:
{
    560c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    560e:	4c0f      	ldr	r4, [pc, #60]	; (564c <nrfx_gpiote_init+0x40>)
    5610:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5614:	b9bd      	cbnz	r5, 5646 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5616:	2260      	movs	r2, #96	; 0x60
    5618:	4629      	mov	r1, r5
    561a:	f104 0010 	add.w	r0, r4, #16
    561e:	f003 fc15 	bl	8e4c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5622:	2006      	movs	r0, #6
    5624:	f7fd fa10 	bl	2a48 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5628:	4b09      	ldr	r3, [pc, #36]	; (5650 <nrfx_gpiote_init+0x44>)
    return err_code;
    562a:	480a      	ldr	r0, [pc, #40]	; (5654 <nrfx_gpiote_init+0x48>)
    562c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5630:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5634:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5638:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    563c:	2301      	movs	r3, #1
    563e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5642:	6763      	str	r3, [r4, #116]	; 0x74
}
    5644:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5646:	4804      	ldr	r0, [pc, #16]	; (5658 <nrfx_gpiote_init+0x4c>)
    5648:	e7fc      	b.n	5644 <nrfx_gpiote_init+0x38>
    564a:	bf00      	nop
    564c:	200000f4 	.word	0x200000f4
    5650:	40006000 	.word	0x40006000
    5654:	0bad0000 	.word	0x0bad0000
    5658:	0bad0005 	.word	0x0bad0005

0000565c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    565c:	4b03      	ldr	r3, [pc, #12]	; (566c <nrfx_gpiote_is_init+0x10>)
    565e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5662:	3800      	subs	r0, #0
    5664:	bf18      	it	ne
    5666:	2001      	movne	r0, #1
    5668:	4770      	bx	lr
    566a:	bf00      	nop
    566c:	200000f4 	.word	0x200000f4

00005670 <nrfx_gpiote_channel_free>:
{
    5670:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5672:	4801      	ldr	r0, [pc, #4]	; (5678 <nrfx_gpiote_channel_free+0x8>)
    5674:	f7ff bc16 	b.w	4ea4 <nrfx_flag32_free>
    5678:	20000164 	.word	0x20000164

0000567c <nrfx_gpiote_channel_alloc>:
{
    567c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    567e:	4801      	ldr	r0, [pc, #4]	; (5684 <nrfx_gpiote_channel_alloc+0x8>)
    5680:	f7ff bbf0 	b.w	4e64 <nrfx_flag32_alloc>
    5684:	20000164 	.word	0x20000164

00005688 <nrfx_gpiote_trigger_enable>:
{
    5688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    568a:	4604      	mov	r4, r0
    568c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    568e:	f7ff fda5 	bl	51dc <pin_has_trigger>
    5692:	b958      	cbnz	r0, 56ac <nrfx_gpiote_trigger_enable+0x24>
    5694:	4930      	ldr	r1, [pc, #192]	; (5758 <nrfx_gpiote_trigger_enable+0xd0>)
    5696:	4831      	ldr	r0, [pc, #196]	; (575c <nrfx_gpiote_trigger_enable+0xd4>)
    5698:	4a31      	ldr	r2, [pc, #196]	; (5760 <nrfx_gpiote_trigger_enable+0xd8>)
    569a:	f240 33df 	movw	r3, #991	; 0x3df
    569e:	f003 fae8 	bl	8c72 <assert_print>
    56a2:	482f      	ldr	r0, [pc, #188]	; (5760 <nrfx_gpiote_trigger_enable+0xd8>)
    56a4:	f240 31df 	movw	r1, #991	; 0x3df
    56a8:	f003 fadc 	bl	8c64 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56ac:	4620      	mov	r0, r4
    56ae:	f7ff fd8b 	bl	51c8 <pin_in_use_by_te>
    56b2:	4e2c      	ldr	r6, [pc, #176]	; (5764 <nrfx_gpiote_trigger_enable+0xdc>)
    56b4:	f104 0708 	add.w	r7, r4, #8
    56b8:	b318      	cbz	r0, 5702 <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    56ba:	4620      	mov	r0, r4
    56bc:	f7ff fd9a 	bl	51f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56c0:	4602      	mov	r2, r0
    56c2:	b9f0      	cbnz	r0, 5702 <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    56c4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    56c8:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    56ca:	4608      	mov	r0, r1
    56cc:	f003 fe3f 	bl	934e <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    56d0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    56d4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    56d8:	601a      	str	r2, [r3, #0]
    56da:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    56dc:	008b      	lsls	r3, r1, #2
    56de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    56e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    56e6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    56ea:	f042 0201 	orr.w	r2, r2, #1
    56ee:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    56f2:	b125      	cbz	r5, 56fe <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    56f4:	4a1c      	ldr	r2, [pc, #112]	; (5768 <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    56f6:	2301      	movs	r3, #1
    56f8:	408b      	lsls	r3, r1
    56fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    56fe:	b003      	add	sp, #12
    5700:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5702:	b95d      	cbnz	r5, 571c <nrfx_gpiote_trigger_enable+0x94>
    5704:	4919      	ldr	r1, [pc, #100]	; (576c <nrfx_gpiote_trigger_enable+0xe4>)
    5706:	4815      	ldr	r0, [pc, #84]	; (575c <nrfx_gpiote_trigger_enable+0xd4>)
    5708:	4a15      	ldr	r2, [pc, #84]	; (5760 <nrfx_gpiote_trigger_enable+0xd8>)
    570a:	f240 33ee 	movw	r3, #1006	; 0x3ee
    570e:	f003 fab0 	bl	8c72 <assert_print>
    5712:	4813      	ldr	r0, [pc, #76]	; (5760 <nrfx_gpiote_trigger_enable+0xd8>)
    5714:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5718:	f003 faa4 	bl	8c64 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    571c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5720:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5724:	2b04      	cmp	r3, #4
    5726:	d012      	beq.n	574e <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5728:	2b05      	cmp	r3, #5
    572a:	d012      	beq.n	5752 <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    572c:	a801      	add	r0, sp, #4
    572e:	9401      	str	r4, [sp, #4]
    5730:	f7ff fde4 	bl	52fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5734:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5736:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    573a:	40d9      	lsrs	r1, r3
    573c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5740:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5742:	4620      	mov	r0, r4
}
    5744:	b003      	add	sp, #12
    5746:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    574a:	f003 be51 	b.w	93f0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    574e:	2103      	movs	r1, #3
    5750:	e7f7      	b.n	5742 <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5752:	2102      	movs	r1, #2
    5754:	e7f5      	b.n	5742 <nrfx_gpiote_trigger_enable+0xba>
    5756:	bf00      	nop
    5758:	0000b054 	.word	0x0000b054
    575c:	00009bef 	.word	0x00009bef
    5760:	0000afd2 	.word	0x0000afd2
    5764:	200000f4 	.word	0x200000f4
    5768:	40006000 	.word	0x40006000
    576c:	0000b069 	.word	0x0000b069

00005770 <nrfx_gpiote_trigger_disable>:
{
    5770:	b508      	push	{r3, lr}
    5772:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5774:	f7ff fd28 	bl	51c8 <pin_in_use_by_te>
    5778:	b1c8      	cbz	r0, 57ae <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    577a:	4610      	mov	r0, r2
    577c:	f7ff fd3a 	bl	51f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5780:	b9a8      	cbnz	r0, 57ae <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5782:	3208      	adds	r2, #8
    5784:	4b0d      	ldr	r3, [pc, #52]	; (57bc <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    5786:	490e      	ldr	r1, [pc, #56]	; (57c0 <nrfx_gpiote_trigger_disable+0x50>)
    5788:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    578c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    578e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5790:	409a      	lsls	r2, r3
    5792:	009b      	lsls	r3, r3, #2
    5794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5798:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    579c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    57a0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    57a4:	f022 0203 	bic.w	r2, r2, #3
    57a8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    57ac:	bd08      	pop	{r3, pc}
    57ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    57b2:	2100      	movs	r1, #0
    57b4:	4610      	mov	r0, r2
    57b6:	f003 be1b 	b.w	93f0 <nrf_gpio_cfg_sense_set>
    57ba:	bf00      	nop
    57bc:	200000f4 	.word	0x200000f4
    57c0:	40006000 	.word	0x40006000

000057c4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    57c4:	4b0e      	ldr	r3, [pc, #56]	; (5800 <nrfx_gpiote_pin_uninit+0x3c>)
    57c6:	f100 0208 	add.w	r2, r0, #8
{
    57ca:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    57cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    57d0:	07db      	lsls	r3, r3, #31
{
    57d2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    57d4:	d511      	bpl.n	57fa <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    57d6:	f7ff ffcb 	bl	5770 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    57da:	4620      	mov	r0, r4
    57dc:	f7ff fd72 	bl	52c4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    57e0:	a801      	add	r0, sp, #4
    57e2:	9401      	str	r4, [sp, #4]
    57e4:	f7ff fd8a 	bl	52fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    57e8:	9b01      	ldr	r3, [sp, #4]
    57ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    57ee:	2202      	movs	r2, #2
    57f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    57f4:	4803      	ldr	r0, [pc, #12]	; (5804 <nrfx_gpiote_pin_uninit+0x40>)
}
    57f6:	b002      	add	sp, #8
    57f8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57fa:	4803      	ldr	r0, [pc, #12]	; (5808 <nrfx_gpiote_pin_uninit+0x44>)
    57fc:	e7fb      	b.n	57f6 <nrfx_gpiote_pin_uninit+0x32>
    57fe:	bf00      	nop
    5800:	200000f4 	.word	0x200000f4
    5804:	0bad0000 	.word	0x0bad0000
    5808:	0bad0004 	.word	0x0bad0004

0000580c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5810:	4b65      	ldr	r3, [pc, #404]	; (59a8 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5812:	4866      	ldr	r0, [pc, #408]	; (59ac <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5814:	4966      	ldr	r1, [pc, #408]	; (59b0 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5816:	2600      	movs	r6, #0
{
    5818:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    581a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    581c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    581e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5820:	b135      	cbz	r5, 5830 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5822:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5826:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5828:	bf1e      	ittt	ne
    582a:	601c      	strne	r4, [r3, #0]
    582c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    582e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5830:	3304      	adds	r3, #4
    5832:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5834:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5838:	d1f1      	bne.n	581e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    583a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 59ac <nrfx_gpiote_irq_handler+0x1a0>
    583e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5842:	2b00      	cmp	r3, #0
    5844:	f000 8093 	beq.w	596e <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    5848:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    584c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5850:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5852:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5856:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    585a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    585c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5860:	2700      	movs	r7, #0
            while (latch[i])
    5862:	f10d 0910 	add.w	r9, sp, #16
    5866:	017b      	lsls	r3, r7, #5
    5868:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    586a:	f04f 0a01 	mov.w	sl, #1
    586e:	e04b      	b.n	5908 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5870:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5872:	4a50      	ldr	r2, [pc, #320]	; (59b4 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5874:	fa94 f4a4 	rbit	r4, r4
    5878:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    587c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    587e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5880:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    5884:	f004 0c07 	and.w	ip, r4, #7
    5888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    588c:	f819 2000 	ldrb.w	r2, [r9, r0]
    5890:	9403      	str	r4, [sp, #12]
    5892:	fa0a fc0c 	lsl.w	ip, sl, ip
    5896:	ea22 020c 	bic.w	r2, r2, ip
    589a:	0899      	lsrs	r1, r3, #2
    589c:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    58a0:	a803      	add	r0, sp, #12
    58a2:	f3c3 0582 	ubfx	r5, r3, #2, #3
    58a6:	9101      	str	r1, [sp, #4]
    58a8:	f7ff fd28 	bl	52fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    58ac:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    58ae:	9901      	ldr	r1, [sp, #4]
    58b0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    58b4:	074b      	lsls	r3, r1, #29
    58b6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    58ba:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    58bc:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    58c0:	d529      	bpl.n	5916 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    58c2:	4659      	mov	r1, fp
    58c4:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    58c6:	b2d5      	uxtb	r5, r2
    58c8:	f7ff fc9e 	bl	5208 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    58cc:	a803      	add	r0, sp, #12
    58ce:	9403      	str	r4, [sp, #12]
    58d0:	f7ff fd14 	bl	52fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    58d4:	9b03      	ldr	r3, [sp, #12]
    58d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    58da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    58de:	f3c3 4301 	ubfx	r3, r3, #16, #2
    58e2:	429d      	cmp	r5, r3
    58e4:	d107      	bne.n	58f6 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    58e6:	2100      	movs	r1, #0
    58e8:	4620      	mov	r0, r4
    58ea:	f003 fd81 	bl	93f0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    58ee:	4629      	mov	r1, r5
    58f0:	4620      	mov	r0, r4
    58f2:	f003 fd7d 	bl	93f0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    58f6:	a803      	add	r0, sp, #12
    58f8:	9403      	str	r4, [sp, #12]
    58fa:	f7ff fcff 	bl	52fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    58fe:	9b03      	ldr	r3, [sp, #12]
    5900:	fa0a f303 	lsl.w	r3, sl, r3
    5904:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5908:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    590c:	2c00      	cmp	r4, #0
    590e:	d1af      	bne.n	5870 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5910:	b9cf      	cbnz	r7, 5946 <nrfx_gpiote_irq_handler+0x13a>
    5912:	2701      	movs	r7, #1
    5914:	e7a7      	b.n	5866 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5916:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5918:	bf0c      	ite	eq
    591a:	2103      	moveq	r1, #3
    591c:	2102      	movne	r1, #2
    591e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5920:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5922:	f003 fd65 	bl	93f0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5926:	2d03      	cmp	r5, #3
    5928:	d004      	beq.n	5934 <nrfx_gpiote_irq_handler+0x128>
    592a:	9a01      	ldr	r2, [sp, #4]
    592c:	2a02      	cmp	r2, #2
    592e:	d106      	bne.n	593e <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5930:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5932:	d1e0      	bne.n	58f6 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5934:	4659      	mov	r1, fp
    5936:	4620      	mov	r0, r4
    5938:	f7ff fc66 	bl	5208 <call_handler>
    593c:	e7db      	b.n	58f6 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    593e:	2a03      	cmp	r2, #3
    5940:	d1d9      	bne.n	58f6 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5942:	2d02      	cmp	r5, #2
    5944:	e7f5      	b.n	5932 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    5946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    594a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    594e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
    5952:	4919      	ldr	r1, [pc, #100]	; (59b8 <nrfx_gpiote_irq_handler+0x1ac>)
    5954:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5958:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    595a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    595e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5962:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5964:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5966:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    596a:	f47f af79 	bne.w	5860 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    596e:	2401      	movs	r4, #1
    while (mask)
    5970:	b916      	cbnz	r6, 5978 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5972:	b007      	add	sp, #28
    5974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5978:	fa96 f3a6 	rbit	r3, r6
    597c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5980:	fa04 f203 	lsl.w	r2, r4, r3
    5984:	009b      	lsls	r3, r3, #2
    5986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    598a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    598e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5992:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5996:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    599a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    599e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    59a2:	f7ff fc31 	bl	5208 <call_handler>
    59a6:	e7e3      	b.n	5970 <nrfx_gpiote_irq_handler+0x164>
    59a8:	40006100 	.word	0x40006100
    59ac:	40006000 	.word	0x40006000
    59b0:	40006120 	.word	0x40006120
    59b4:	200000f4 	.word	0x200000f4
    59b8:	50000300 	.word	0x50000300

000059bc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    59bc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    59be:	4801      	ldr	r0, [pc, #4]	; (59c4 <nrfx_ppi_channel_alloc+0x8>)
    59c0:	f7ff ba50 	b.w	4e64 <nrfx_flag32_alloc>
    59c4:	20000170 	.word	0x20000170

000059c8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    59c8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    59ca:	4c11      	ldr	r4, [pc, #68]	; (5a10 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    59cc:	4a11      	ldr	r2, [pc, #68]	; (5a14 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    59ce:	4912      	ldr	r1, [pc, #72]	; (5a18 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    59d0:	2303      	movs	r3, #3
    59d2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    59d4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    59d6:	4b11      	ldr	r3, [pc, #68]	; (5a1c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    59d8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    59da:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    59dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    59e0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    59e2:	2300      	movs	r3, #0
    59e4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    59e6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    59e8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    59ea:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    59ec:	4a0c      	ldr	r2, [pc, #48]	; (5a20 <_DoInit+0x58>)
    59ee:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    59f0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    59f2:	2210      	movs	r2, #16
    59f4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    59f6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    59f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    59fa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    59fc:	f003 f9f5 	bl	8dea <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5a00:	4908      	ldr	r1, [pc, #32]	; (5a24 <_DoInit+0x5c>)
    5a02:	4620      	mov	r0, r4
    5a04:	f003 f9f1 	bl	8dea <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5a08:	2320      	movs	r3, #32
    5a0a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5a0c:	bd10      	pop	{r4, pc}
    5a0e:	bf00      	nop
    5a10:	20000b88 	.word	0x20000b88
    5a14:	0000b074 	.word	0x0000b074
    5a18:	0000b07d 	.word	0x0000b07d
    5a1c:	20000e82 	.word	0x20000e82
    5a20:	20000e72 	.word	0x20000e72
    5a24:	0000b081 	.word	0x0000b081

00005a28 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5a2c:	4f24      	ldr	r7, [pc, #144]	; (5ac0 <SEGGER_RTT_WriteSkipNoLock+0x98>)
    5a2e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a32:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5a34:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a38:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5a3a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5a3c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5a3e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a40:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5a42:	d836      	bhi.n	5ab2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5a44:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5a48:	ebaa 0905 	sub.w	r9, sl, r5
    5a4c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5a50:	4294      	cmp	r4, r2
    5a52:	d812      	bhi.n	5a7a <SEGGER_RTT_WriteSkipNoLock+0x52>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a54:	f04f 0918 	mov.w	r9, #24
    5a58:	fb06 9309 	mla	r3, r6, r9, r9
    5a5c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    5a5e:	fb09 7906 	mla	r9, r9, r6, r7
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a62:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5a64:	4622      	mov	r2, r4
    5a66:	4641      	mov	r1, r8
    5a68:	4428      	add	r0, r5
      pRing->WrOff = WrOff + NumBytes;
    5a6a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, NumBytes);
    5a6c:	f003 f9e3 	bl	8e36 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5a70:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
    5a74:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5a7a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5a7c:	429c      	cmp	r4, r3
    5a7e:	d81c      	bhi.n	5aba <SEGGER_RTT_WriteSkipNoLock+0x92>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a80:	fb00 bb0b 	mla	fp, r0, fp, fp
    5a84:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5a86:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a88:	f8db 0004 	ldr.w	r0, [fp, #4]
    5a8c:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5a8e:	4428      	add	r0, r5
    5a90:	f003 f9d1 	bl	8e36 <memcpy>
      if (NumBytes) {
    5a94:	ebb4 040a 	subs.w	r4, r4, sl
    5a98:	d006      	beq.n	5aa8 <SEGGER_RTT_WriteSkipNoLock+0x80>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5a9a:	f8db 0004 	ldr.w	r0, [fp, #4]
    5a9e:	4622      	mov	r2, r4
    5aa0:	eb08 0109 	add.w	r1, r8, r9
    5aa4:	f003 f9c7 	bl	8e36 <memcpy>
      pRing->WrOff = NumBytes;
    5aa8:	2318      	movs	r3, #24
    5aaa:	fb03 7306 	mla	r3, r3, r6, r7
    5aae:	625c      	str	r4, [r3, #36]	; 0x24
    5ab0:	e7e0      	b.n	5a74 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    Avail = RdOff - WrOff - 1u;
    5ab2:	3b01      	subs	r3, #1
    5ab4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5ab6:	42a3      	cmp	r3, r4
    5ab8:	d2cc      	bcs.n	5a54 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5aba:	2000      	movs	r0, #0
    5abc:	e7db      	b.n	5a76 <SEGGER_RTT_WriteSkipNoLock+0x4e>
    5abe:	bf00      	nop
    5ac0:	20000b88 	.word	0x20000b88

00005ac4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5ac4:	4b03      	ldr	r3, [pc, #12]	; (5ad4 <SEGGER_RTT_HasDataUp+0x10>)
    5ac6:	2218      	movs	r2, #24
    5ac8:	fb02 3300 	mla	r3, r2, r0, r3
    5acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5ace:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5ad0:	1a80      	subs	r0, r0, r2
    5ad2:	4770      	bx	lr
    5ad4:	20000b88 	.word	0x20000b88

00005ad8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ad8:	4b0e      	ldr	r3, [pc, #56]	; (5b14 <z_sys_init_run_level+0x3c>)
{
    5ada:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5adc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5ae0:	3001      	adds	r0, #1
    5ae2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5ae6:	42a6      	cmp	r6, r4
    5ae8:	d800      	bhi.n	5aec <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5aea:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5aec:	e9d4 3500 	ldrd	r3, r5, [r4]
    5af0:	4628      	mov	r0, r5
    5af2:	4798      	blx	r3
		if (dev != NULL) {
    5af4:	b165      	cbz	r5, 5b10 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5af6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5af8:	b130      	cbz	r0, 5b08 <z_sys_init_run_level+0x30>
				dev->state->init_res = rc;
    5afa:	2800      	cmp	r0, #0
    5afc:	bfb8      	it	lt
    5afe:	4240      	neglt	r0, r0
    5b00:	28ff      	cmp	r0, #255	; 0xff
    5b02:	bfa8      	it	ge
    5b04:	20ff      	movge	r0, #255	; 0xff
    5b06:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5b08:	785a      	ldrb	r2, [r3, #1]
    5b0a:	f042 0201 	orr.w	r2, r2, #1
    5b0e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5b10:	3408      	adds	r4, #8
    5b12:	e7e8      	b.n	5ae6 <z_sys_init_run_level+0xe>
    5b14:	00009ac4 	.word	0x00009ac4

00005b18 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5b18:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5b1a:	4605      	mov	r5, r0
    5b1c:	b910      	cbnz	r0, 5b24 <z_impl_device_get_binding+0xc>
		return NULL;
    5b1e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5b20:	4620      	mov	r0, r4
    5b22:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5b24:	7803      	ldrb	r3, [r0, #0]
    5b26:	2b00      	cmp	r3, #0
    5b28:	d0f9      	beq.n	5b1e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b2a:	4c0e      	ldr	r4, [pc, #56]	; (5b64 <z_impl_device_get_binding+0x4c>)
    5b2c:	4e0e      	ldr	r6, [pc, #56]	; (5b68 <z_impl_device_get_binding+0x50>)
    5b2e:	42b4      	cmp	r4, r6
    5b30:	d108      	bne.n	5b44 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b32:	4c0c      	ldr	r4, [pc, #48]	; (5b64 <z_impl_device_get_binding+0x4c>)
    5b34:	42b4      	cmp	r4, r6
    5b36:	d0f2      	beq.n	5b1e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5b38:	4620      	mov	r0, r4
    5b3a:	f003 fc70 	bl	941e <z_device_is_ready>
    5b3e:	b950      	cbnz	r0, 5b56 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b40:	3418      	adds	r4, #24
    5b42:	e7f7      	b.n	5b34 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5b44:	4620      	mov	r0, r4
    5b46:	f003 fc6a 	bl	941e <z_device_is_ready>
    5b4a:	b110      	cbz	r0, 5b52 <z_impl_device_get_binding+0x3a>
    5b4c:	6823      	ldr	r3, [r4, #0]
    5b4e:	42ab      	cmp	r3, r5
    5b50:	d0e6      	beq.n	5b20 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b52:	3418      	adds	r4, #24
    5b54:	e7eb      	b.n	5b2e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5b56:	6821      	ldr	r1, [r4, #0]
    5b58:	4628      	mov	r0, r5
    5b5a:	f003 f960 	bl	8e1e <strcmp>
    5b5e:	2800      	cmp	r0, #0
    5b60:	d1ee      	bne.n	5b40 <z_impl_device_get_binding+0x28>
    5b62:	e7dd      	b.n	5b20 <z_impl_device_get_binding+0x8>
    5b64:	000095fc 	.word	0x000095fc
    5b68:	0000968c 	.word	0x0000968c

00005b6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b70:	4605      	mov	r5, r0
    5b72:	b086      	sub	sp, #24
    5b74:	460f      	mov	r7, r1
	__asm__ volatile(
    5b76:	f04f 0340 	mov.w	r3, #64	; 0x40
    5b7a:	f3ef 8811 	mrs	r8, BASEPRI
    5b7e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b82:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5b86:	f001 fee9 	bl	795c <z_impl_z_current_get>
    5b8a:	2d04      	cmp	r5, #4
    5b8c:	bf96      	itet	ls
    5b8e:	4b29      	ldrls	r3, [pc, #164]	; (5c34 <z_fatal_error+0xc8>)
    5b90:	4b29      	ldrhi	r3, [pc, #164]	; (5c38 <z_fatal_error+0xcc>)
    5b92:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5b96:	4929      	ldr	r1, [pc, #164]	; (5c3c <z_fatal_error+0xd0>)
    5b98:	9503      	str	r5, [sp, #12]
    5b9a:	2400      	movs	r4, #0
    5b9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5ba0:	4b27      	ldr	r3, [pc, #156]	; (5c40 <z_fatal_error+0xd4>)
    5ba2:	9400      	str	r4, [sp, #0]
    5ba4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5ba8:	4606      	mov	r6, r0
    5baa:	4623      	mov	r3, r4
    5bac:	2201      	movs	r2, #1
    5bae:	4620      	mov	r0, r4
    5bb0:	f003 fc3f 	bl	9432 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5bb4:	b16f      	cbz	r7, 5bd2 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5bb6:	69fb      	ldr	r3, [r7, #28]
    5bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5bbc:	b14b      	cbz	r3, 5bd2 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    5bbe:	4b21      	ldr	r3, [pc, #132]	; (5c44 <z_fatal_error+0xd8>)
    5bc0:	491e      	ldr	r1, [pc, #120]	; (5c3c <z_fatal_error+0xd0>)
    5bc2:	9400      	str	r4, [sp, #0]
    5bc4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5bc8:	2201      	movs	r2, #1
    5bca:	4623      	mov	r3, r4
    5bcc:	4620      	mov	r0, r4
    5bce:	f003 fc30 	bl	9432 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5bd2:	b12e      	cbz	r6, 5be0 <z_fatal_error+0x74>
    5bd4:	4630      	mov	r0, r6
    5bd6:	f003 fc62 	bl	949e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5bda:	b108      	cbz	r0, 5be0 <z_fatal_error+0x74>
    5bdc:	7803      	ldrb	r3, [r0, #0]
    5bde:	b903      	cbnz	r3, 5be2 <z_fatal_error+0x76>
		thread_name = "unknown";
    5be0:	4819      	ldr	r0, [pc, #100]	; (5c48 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5be2:	4b1a      	ldr	r3, [pc, #104]	; (5c4c <z_fatal_error+0xe0>)
    5be4:	9302      	str	r3, [sp, #8]
    5be6:	2300      	movs	r3, #0
    5be8:	e9cd 6003 	strd	r6, r0, [sp, #12]
    5bec:	e9cd 3300 	strd	r3, r3, [sp]
    5bf0:	4618      	mov	r0, r3
    5bf2:	4912      	ldr	r1, [pc, #72]	; (5c3c <z_fatal_error+0xd0>)
    5bf4:	2201      	movs	r2, #1
    5bf6:	f003 fc1c 	bl	9432 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5bfa:	4639      	mov	r1, r7
    5bfc:	4628      	mov	r0, r5
    5bfe:	f7ff f817 	bl	4c30 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5c02:	2d04      	cmp	r5, #4
    5c04:	d10c      	bne.n	5c20 <z_fatal_error+0xb4>
    5c06:	4912      	ldr	r1, [pc, #72]	; (5c50 <z_fatal_error+0xe4>)
    5c08:	4a12      	ldr	r2, [pc, #72]	; (5c54 <z_fatal_error+0xe8>)
    5c0a:	4813      	ldr	r0, [pc, #76]	; (5c58 <z_fatal_error+0xec>)
    5c0c:	238f      	movs	r3, #143	; 0x8f
    5c0e:	f003 f830 	bl	8c72 <assert_print>
    5c12:	4812      	ldr	r0, [pc, #72]	; (5c5c <z_fatal_error+0xf0>)
    5c14:	f003 f82d 	bl	8c72 <assert_print>
    5c18:	480e      	ldr	r0, [pc, #56]	; (5c54 <z_fatal_error+0xe8>)
    5c1a:	218f      	movs	r1, #143	; 0x8f
    5c1c:	f003 f822 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    5c20:	f388 8811 	msr	BASEPRI, r8
    5c24:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5c28:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5c2a:	b006      	add	sp, #24
    5c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5c30:	f7fd bbd8 	b.w	33e4 <z_impl_k_thread_abort>
    5c34:	00009adc 	.word	0x00009adc
    5c38:	0000b088 	.word	0x0000b088
    5c3c:	0000983c 	.word	0x0000983c
    5c40:	0000b09e 	.word	0x0000b09e
    5c44:	0000b0c6 	.word	0x0000b0c6
    5c48:	0000b096 	.word	0x0000b096
    5c4c:	0000b0e7 	.word	0x0000b0e7
    5c50:	0000b121 	.word	0x0000b121
    5c54:	0000b0ff 	.word	0x0000b0ff
    5c58:	00009bef 	.word	0x00009bef
    5c5c:	0000b13e 	.word	0x0000b13e

00005c60 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5c60:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5c62:	4b0a      	ldr	r3, [pc, #40]	; (5c8c <bg_thread_main+0x2c>)
    5c64:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5c66:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5c68:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5c6a:	f7ff ff35 	bl	5ad8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5c6e:	f002 fb53 	bl	8318 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5c72:	2003      	movs	r0, #3
    5c74:	f7ff ff30 	bl	5ad8 <z_sys_init_run_level>

	z_init_static_threads();
    5c78:	f000 fa7e 	bl	6178 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5c7c:	f7fa fda0 	bl	7c0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5c80:	4a03      	ldr	r2, [pc, #12]	; (5c90 <bg_thread_main+0x30>)
    5c82:	7b13      	ldrb	r3, [r2, #12]
    5c84:	f023 0301 	bic.w	r3, r3, #1
    5c88:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5c8a:	bd08      	pop	{r3, pc}
    5c8c:	20001282 	.word	0x20001282
    5c90:	20000480 	.word	0x20000480

00005c94 <z_bss_zero>:
{
    5c94:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5c96:	4803      	ldr	r0, [pc, #12]	; (5ca4 <z_bss_zero+0x10>)
    5c98:	4a03      	ldr	r2, [pc, #12]	; (5ca8 <z_bss_zero+0x14>)
    5c9a:	2100      	movs	r1, #0
    5c9c:	1a12      	subs	r2, r2, r0
    5c9e:	f003 fbd8 	bl	9452 <z_early_memset>
}
    5ca2:	bd08      	pop	{r3, pc}
    5ca4:	20000260 	.word	0x20000260
    5ca8:	20001284 	.word	0x20001284

00005cac <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5cac:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5cae:	2300      	movs	r3, #0
{
    5cb0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5cb2:	2201      	movs	r2, #1
    5cb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5cb8:	4e13      	ldr	r6, [pc, #76]	; (5d08 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5cba:	4d14      	ldr	r5, [pc, #80]	; (5d0c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5cbc:	9301      	str	r3, [sp, #4]
    5cbe:	220f      	movs	r2, #15
    5cc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5cc4:	4912      	ldr	r1, [pc, #72]	; (5d10 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5cc6:	2318      	movs	r3, #24
    5cc8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5ccc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5cd0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5cd2:	f44f 70b0 	mov.w	r0, #352	; 0x160
    5cd6:	fb00 1104 	mla	r1, r0, r4, r1
    5cda:	4b0e      	ldr	r3, [pc, #56]	; (5d14 <z_init_cpu+0x68>)
    5cdc:	9500      	str	r5, [sp, #0]
    5cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5ce2:	4630      	mov	r0, r6
    5ce4:	f000 f994 	bl	6010 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5ce8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5cea:	60ee      	str	r6, [r5, #12]
    5cec:	f023 0304 	bic.w	r3, r3, #4
    5cf0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5cf2:	4b09      	ldr	r3, [pc, #36]	; (5d18 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    5cf4:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5cf6:	f44f 6202 	mov.w	r2, #2080	; 0x820
    5cfa:	fb02 3304 	mla	r3, r2, r4, r3
    5cfe:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
    5d00:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5d02:	b006      	add	sp, #24
    5d04:	bd70      	pop	{r4, r5, r6, pc}
    5d06:	bf00      	nop
    5d08:	20000400 	.word	0x20000400
    5d0c:	20000c30 	.word	0x20000c30
    5d10:	20002320 	.word	0x20002320
    5d14:	000062d5 	.word	0x000062d5
    5d18:	20002480 	.word	0x20002480

00005d1c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5d1c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5d1e:	4b30      	ldr	r3, [pc, #192]	; (5de0 <z_cstart+0xc4>)
    5d20:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5d22:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5d26:	4d2f      	ldr	r5, [pc, #188]	; (5de4 <z_cstart+0xc8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5d28:	4e2f      	ldr	r6, [pc, #188]	; (5de8 <z_cstart+0xcc>)
    5d2a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d2c:	4f2f      	ldr	r7, [pc, #188]	; (5dec <z_cstart+0xd0>)
    5d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d32:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5d34:	23e0      	movs	r3, #224	; 0xe0
    5d36:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5d3a:	2400      	movs	r4, #0
    5d3c:	2320      	movs	r3, #32
    5d3e:	77eb      	strb	r3, [r5, #31]
    5d40:	762c      	strb	r4, [r5, #24]
    5d42:	766c      	strb	r4, [r5, #25]
    5d44:	76ac      	strb	r4, [r5, #26]
    5d46:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5d4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5d4c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5d50:	626b      	str	r3, [r5, #36]	; 0x24
    5d52:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5d56:	f7fd fab9 	bl	32cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5d5a:	f7fc fe07 	bl	296c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d62:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5d64:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    5d66:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5d68:	f7fd fc38 	bl	35dc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5d6c:	f7fd fb50 	bl	3410 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5d70:	f7fb ffda 	bl	1d28 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5d74:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    5d78:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    5d7a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    5d7e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    5d82:	f002 fac3 	bl	830c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    5d86:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5d88:	f003 fb48 	bl	941c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5d8c:	4620      	mov	r0, r4
    5d8e:	f7ff fea3 	bl	5ad8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5d92:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5d94:	4d16      	ldr	r5, [pc, #88]	; (5df0 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5d96:	f7ff fe9f 	bl	5ad8 <z_sys_init_run_level>
	z_sched_init();
    5d9a:	f001 fc55 	bl	7648 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d9e:	4b15      	ldr	r3, [pc, #84]	; (5df4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5da0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5da2:	9305      	str	r3, [sp, #20]
    5da4:	2301      	movs	r3, #1
    5da6:	4914      	ldr	r1, [pc, #80]	; (5df8 <z_cstart+0xdc>)
    5da8:	9400      	str	r4, [sp, #0]
    5daa:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5db2:	463b      	mov	r3, r7
    5db4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5db8:	4628      	mov	r0, r5
    5dba:	f000 f929 	bl	6010 <z_setup_new_thread>
    5dbe:	7b6a      	ldrb	r2, [r5, #13]
    5dc0:	4606      	mov	r6, r0
    5dc2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    5dc6:	4628      	mov	r0, r5
    5dc8:	736a      	strb	r2, [r5, #13]
    5dca:	f001 f847 	bl	6e5c <z_ready_thread>
	z_init_cpu(0);
    5dce:	4620      	mov	r0, r4
    5dd0:	f7ff ff6c 	bl	5cac <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5dd4:	463a      	mov	r2, r7
    5dd6:	4631      	mov	r1, r6
    5dd8:	4628      	mov	r0, r5
    5dda:	f7fc ff2f 	bl	2c3c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5dde:	bf00      	nop
    5de0:	20002ca0 	.word	0x20002ca0
    5de4:	e000ed00 	.word	0xe000ed00
    5de8:	20000c30 	.word	0x20000c30
    5dec:	00005c61 	.word	0x00005c61
    5df0:	20000480 	.word	0x20000480
    5df4:	0000b1bd 	.word	0x0000b1bd
    5df8:	20001f00 	.word	0x20001f00

00005dfc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5dfe:	4c16      	ldr	r4, [pc, #88]	; (5e58 <init_mem_slab_module+0x5c>)
    5e00:	4d16      	ldr	r5, [pc, #88]	; (5e5c <init_mem_slab_module+0x60>)
    5e02:	4e17      	ldr	r6, [pc, #92]	; (5e60 <init_mem_slab_module+0x64>)
    5e04:	42ac      	cmp	r4, r5
    5e06:	d90c      	bls.n	5e22 <init_mem_slab_module+0x26>
    5e08:	4916      	ldr	r1, [pc, #88]	; (5e64 <init_mem_slab_module+0x68>)
    5e0a:	4817      	ldr	r0, [pc, #92]	; (5e68 <init_mem_slab_module+0x6c>)
    5e0c:	233d      	movs	r3, #61	; 0x3d
    5e0e:	4632      	mov	r2, r6
    5e10:	f002 ff2f 	bl	8c72 <assert_print>
    5e14:	4815      	ldr	r0, [pc, #84]	; (5e6c <init_mem_slab_module+0x70>)
    5e16:	f002 ff2c 	bl	8c72 <assert_print>
    5e1a:	213d      	movs	r1, #61	; 0x3d
    5e1c:	4630      	mov	r0, r6
    5e1e:	f002 ff21 	bl	8c64 <assert_post_action>
    5e22:	42ac      	cmp	r4, r5
    5e24:	d301      	bcc.n	5e2a <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5e26:	2000      	movs	r0, #0
	return rc;
}
    5e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5e2a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5e2e:	ea41 0302 	orr.w	r3, r1, r2
    5e32:	f013 0303 	ands.w	r3, r3, #3
    5e36:	d10b      	bne.n	5e50 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    5e38:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5e3a:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5e3c:	4283      	cmp	r3, r0
    5e3e:	d101      	bne.n	5e44 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5e40:	3420      	adds	r4, #32
    5e42:	e7df      	b.n	5e04 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    5e44:	69a7      	ldr	r7, [r4, #24]
    5e46:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5e48:	3301      	adds	r3, #1
		slab->free_list = p;
    5e4a:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5e4c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5e4e:	e7f5      	b.n	5e3c <init_mem_slab_module+0x40>
	return rc;
    5e50:	f06f 0015 	mvn.w	r0, #21
    5e54:	e7e8      	b.n	5e28 <init_mem_slab_module+0x2c>
    5e56:	bf00      	nop
    5e58:	200001f4 	.word	0x200001f4
    5e5c:	200001f4 	.word	0x200001f4
    5e60:	0000b1c5 	.word	0x0000b1c5
    5e64:	0000b1ea 	.word	0x0000b1ea
    5e68:	00009bef 	.word	0x00009bef
    5e6c:	0000b207 	.word	0x0000b207

00005e70 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5e70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e74:	4604      	mov	r4, r0
    5e76:	460e      	mov	r6, r1
    5e78:	4690      	mov	r8, r2
    5e7a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5e7c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5e80:	f04f 0340 	mov.w	r3, #64	; 0x40
    5e84:	f3ef 8911 	mrs	r9, BASEPRI
    5e88:	f383 8812 	msr	BASEPRI_MAX, r3
    5e8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e90:	4628      	mov	r0, r5
    5e92:	f000 f9f9 	bl	6288 <z_spin_lock_valid>
    5e96:	b968      	cbnz	r0, 5eb4 <k_mem_slab_alloc+0x44>
    5e98:	4a24      	ldr	r2, [pc, #144]	; (5f2c <k_mem_slab_alloc+0xbc>)
    5e9a:	4925      	ldr	r1, [pc, #148]	; (5f30 <k_mem_slab_alloc+0xc0>)
    5e9c:	4825      	ldr	r0, [pc, #148]	; (5f34 <k_mem_slab_alloc+0xc4>)
    5e9e:	238e      	movs	r3, #142	; 0x8e
    5ea0:	f002 fee7 	bl	8c72 <assert_print>
    5ea4:	4824      	ldr	r0, [pc, #144]	; (5f38 <k_mem_slab_alloc+0xc8>)
    5ea6:	4629      	mov	r1, r5
    5ea8:	f002 fee3 	bl	8c72 <assert_print>
    5eac:	481f      	ldr	r0, [pc, #124]	; (5f2c <k_mem_slab_alloc+0xbc>)
    5eae:	218e      	movs	r1, #142	; 0x8e
    5eb0:	f002 fed8 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    5eb4:	4628      	mov	r0, r5
    5eb6:	f000 fa05 	bl	62c4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5eba:	69a3      	ldr	r3, [r4, #24]
    5ebc:	b1eb      	cbz	r3, 5efa <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5ebe:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5ec4:	69e3      	ldr	r3, [r4, #28]
    5ec6:	3301      	adds	r3, #1
    5ec8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5eca:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ecc:	4628      	mov	r0, r5
    5ece:	f000 f9e9 	bl	62a4 <z_spin_unlock_valid>
    5ed2:	b968      	cbnz	r0, 5ef0 <k_mem_slab_alloc+0x80>
    5ed4:	4a15      	ldr	r2, [pc, #84]	; (5f2c <k_mem_slab_alloc+0xbc>)
    5ed6:	4919      	ldr	r1, [pc, #100]	; (5f3c <k_mem_slab_alloc+0xcc>)
    5ed8:	4816      	ldr	r0, [pc, #88]	; (5f34 <k_mem_slab_alloc+0xc4>)
    5eda:	23b9      	movs	r3, #185	; 0xb9
    5edc:	f002 fec9 	bl	8c72 <assert_print>
    5ee0:	4817      	ldr	r0, [pc, #92]	; (5f40 <k_mem_slab_alloc+0xd0>)
    5ee2:	4629      	mov	r1, r5
    5ee4:	f002 fec5 	bl	8c72 <assert_print>
    5ee8:	4810      	ldr	r0, [pc, #64]	; (5f2c <k_mem_slab_alloc+0xbc>)
    5eea:	21b9      	movs	r1, #185	; 0xb9
    5eec:	f002 feba 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    5ef0:	f389 8811 	msr	BASEPRI, r9
    5ef4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5ef8:	e013      	b.n	5f22 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5efa:	ea58 0207 	orrs.w	r2, r8, r7
    5efe:	d103      	bne.n	5f08 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5f00:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5f02:	f06f 040b 	mvn.w	r4, #11
    5f06:	e7e1      	b.n	5ecc <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5f08:	4622      	mov	r2, r4
    5f0a:	e9cd 8700 	strd	r8, r7, [sp]
    5f0e:	4649      	mov	r1, r9
    5f10:	4628      	mov	r0, r5
    5f12:	f001 f951 	bl	71b8 <z_pend_curr>
		if (result == 0) {
    5f16:	4604      	mov	r4, r0
    5f18:	b918      	cbnz	r0, 5f22 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    5f1a:	4b0a      	ldr	r3, [pc, #40]	; (5f44 <k_mem_slab_alloc+0xd4>)
    5f1c:	689b      	ldr	r3, [r3, #8]
    5f1e:	695b      	ldr	r3, [r3, #20]
    5f20:	6033      	str	r3, [r6, #0]
}
    5f22:	4620      	mov	r0, r4
    5f24:	b003      	add	sp, #12
    5f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f2a:	bf00      	nop
    5f2c:	00009f8a 	.word	0x00009f8a
    5f30:	00009fe3 	.word	0x00009fe3
    5f34:	00009bef 	.word	0x00009bef
    5f38:	00009ff8 	.word	0x00009ff8
    5f3c:	00009fb7 	.word	0x00009fb7
    5f40:	00009fce 	.word	0x00009fce
    5f44:	20000c30 	.word	0x20000c30

00005f48 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f4c:	4604      	mov	r4, r0
    5f4e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5f50:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5f54:	f04f 0340 	mov.w	r3, #64	; 0x40
    5f58:	f3ef 8711 	mrs	r7, BASEPRI
    5f5c:	f383 8812 	msr	BASEPRI_MAX, r3
    5f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f64:	4628      	mov	r0, r5
    5f66:	f000 f98f 	bl	6288 <z_spin_lock_valid>
    5f6a:	b968      	cbnz	r0, 5f88 <k_mem_slab_free+0x40>
    5f6c:	4a22      	ldr	r2, [pc, #136]	; (5ff8 <k_mem_slab_free+0xb0>)
    5f6e:	4923      	ldr	r1, [pc, #140]	; (5ffc <k_mem_slab_free+0xb4>)
    5f70:	4823      	ldr	r0, [pc, #140]	; (6000 <k_mem_slab_free+0xb8>)
    5f72:	238e      	movs	r3, #142	; 0x8e
    5f74:	f002 fe7d 	bl	8c72 <assert_print>
    5f78:	4822      	ldr	r0, [pc, #136]	; (6004 <k_mem_slab_free+0xbc>)
    5f7a:	4629      	mov	r1, r5
    5f7c:	f002 fe79 	bl	8c72 <assert_print>
    5f80:	481d      	ldr	r0, [pc, #116]	; (5ff8 <k_mem_slab_free+0xb0>)
    5f82:	218e      	movs	r1, #142	; 0x8e
    5f84:	f002 fe6e 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f88:	4628      	mov	r0, r5
    5f8a:	f000 f99b 	bl	62c4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5f8e:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5f92:	f1b8 0f00 	cmp.w	r8, #0
    5f96:	d10f      	bne.n	5fb8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5f98:	4620      	mov	r0, r4
    5f9a:	f001 fb05 	bl	75a8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5f9e:	b158      	cbz	r0, 5fb8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5fa0:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5fa2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5fa4:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    5fa8:	f000 ff58 	bl	6e5c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5fac:	4639      	mov	r1, r7
    5fae:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5fb4:	f000 bd08 	b.w	69c8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5fb8:	6833      	ldr	r3, [r6, #0]
    5fba:	69a2      	ldr	r2, [r4, #24]
    5fbc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5fbe:	6833      	ldr	r3, [r6, #0]
    5fc0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5fc2:	69e3      	ldr	r3, [r4, #28]
    5fc4:	3b01      	subs	r3, #1
    5fc6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fc8:	4628      	mov	r0, r5
    5fca:	f000 f96b 	bl	62a4 <z_spin_unlock_valid>
    5fce:	b968      	cbnz	r0, 5fec <k_mem_slab_free+0xa4>
    5fd0:	4a09      	ldr	r2, [pc, #36]	; (5ff8 <k_mem_slab_free+0xb0>)
    5fd2:	490d      	ldr	r1, [pc, #52]	; (6008 <k_mem_slab_free+0xc0>)
    5fd4:	480a      	ldr	r0, [pc, #40]	; (6000 <k_mem_slab_free+0xb8>)
    5fd6:	23b9      	movs	r3, #185	; 0xb9
    5fd8:	f002 fe4b 	bl	8c72 <assert_print>
    5fdc:	480b      	ldr	r0, [pc, #44]	; (600c <k_mem_slab_free+0xc4>)
    5fde:	4629      	mov	r1, r5
    5fe0:	f002 fe47 	bl	8c72 <assert_print>
    5fe4:	4804      	ldr	r0, [pc, #16]	; (5ff8 <k_mem_slab_free+0xb0>)
    5fe6:	21b9      	movs	r1, #185	; 0xb9
    5fe8:	f002 fe3c 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    5fec:	f387 8811 	msr	BASEPRI, r7
    5ff0:	f3bf 8f6f 	isb	sy
}
    5ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ff8:	00009f8a 	.word	0x00009f8a
    5ffc:	00009fe3 	.word	0x00009fe3
    6000:	00009bef 	.word	0x00009bef
    6004:	00009ff8 	.word	0x00009ff8
    6008:	00009fb7 	.word	0x00009fb7
    600c:	00009fce 	.word	0x00009fce

00006010 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6014:	b085      	sub	sp, #20
    6016:	4604      	mov	r4, r0
    6018:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    601c:	f1b8 0f0f 	cmp.w	r8, #15
{
    6020:	460f      	mov	r7, r1
    6022:	4615      	mov	r5, r2
    6024:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6026:	d132      	bne.n	608e <z_setup_new_thread+0x7e>
    6028:	4b25      	ldr	r3, [pc, #148]	; (60c0 <z_setup_new_thread+0xb0>)
    602a:	4599      	cmp	r9, r3
    602c:	d133      	bne.n	6096 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    602e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6032:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6036:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6038:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    603a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    603c:	2304      	movs	r3, #4
    603e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6040:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6044:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6048:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    604c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    604e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6052:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6054:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    605a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    605c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    605e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6060:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6062:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6064:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    6066:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    606a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    606c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    606e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6070:	4642      	mov	r2, r8
    6072:	4639      	mov	r1, r7
    6074:	4620      	mov	r0, r4
    6076:	f7fc fdaf 	bl	2bd8 <arch_new_thread>
	if (!_current) {
    607a:	4b12      	ldr	r3, [pc, #72]	; (60c4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    607c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    607e:	689b      	ldr	r3, [r3, #8]
    6080:	b103      	cbz	r3, 6084 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6084:	6723      	str	r3, [r4, #112]	; 0x70
}
    6086:	4640      	mov	r0, r8
    6088:	b005      	add	sp, #20
    608a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    608e:	f108 0310 	add.w	r3, r8, #16
    6092:	2b1e      	cmp	r3, #30
    6094:	d9cb      	bls.n	602e <z_setup_new_thread+0x1e>
    6096:	4a0c      	ldr	r2, [pc, #48]	; (60c8 <z_setup_new_thread+0xb8>)
    6098:	490c      	ldr	r1, [pc, #48]	; (60cc <z_setup_new_thread+0xbc>)
    609a:	480d      	ldr	r0, [pc, #52]	; (60d0 <z_setup_new_thread+0xc0>)
    609c:	f240 13ff 	movw	r3, #511	; 0x1ff
    60a0:	f002 fde7 	bl	8c72 <assert_print>
    60a4:	4641      	mov	r1, r8
    60a6:	480b      	ldr	r0, [pc, #44]	; (60d4 <z_setup_new_thread+0xc4>)
    60a8:	f06f 030f 	mvn.w	r3, #15
    60ac:	220e      	movs	r2, #14
    60ae:	f002 fde0 	bl	8c72 <assert_print>
    60b2:	4805      	ldr	r0, [pc, #20]	; (60c8 <z_setup_new_thread+0xb8>)
    60b4:	f240 11ff 	movw	r1, #511	; 0x1ff
    60b8:	f002 fdd4 	bl	8c64 <assert_post_action>
    60bc:	e7b7      	b.n	602e <z_setup_new_thread+0x1e>
    60be:	bf00      	nop
    60c0:	000062d5 	.word	0x000062d5
    60c4:	20000c30 	.word	0x20000c30
    60c8:	0000b226 	.word	0x0000b226
    60cc:	0000b249 	.word	0x0000b249
    60d0:	00009bef 	.word	0x00009bef
    60d4:	0000b2c9 	.word	0x0000b2c9

000060d8 <z_impl_k_thread_create>:
{
    60d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60dc:	b087      	sub	sp, #28
    60de:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    60e2:	4604      	mov	r4, r0
    60e4:	460f      	mov	r7, r1
    60e6:	4690      	mov	r8, r2
    60e8:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    60ea:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    60ee:	b173      	cbz	r3, 610e <z_impl_k_thread_create+0x36>
    60f0:	491c      	ldr	r1, [pc, #112]	; (6164 <z_impl_k_thread_create+0x8c>)
    60f2:	4a1d      	ldr	r2, [pc, #116]	; (6168 <z_impl_k_thread_create+0x90>)
    60f4:	481d      	ldr	r0, [pc, #116]	; (616c <z_impl_k_thread_create+0x94>)
    60f6:	f240 236e 	movw	r3, #622	; 0x26e
    60fa:	f002 fdba 	bl	8c72 <assert_print>
    60fe:	481c      	ldr	r0, [pc, #112]	; (6170 <z_impl_k_thread_create+0x98>)
    6100:	f002 fdb7 	bl	8c72 <assert_print>
    6104:	4818      	ldr	r0, [pc, #96]	; (6168 <z_impl_k_thread_create+0x90>)
    6106:	f240 216e 	movw	r1, #622	; 0x26e
    610a:	f002 fdab 	bl	8c64 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    610e:	2300      	movs	r3, #0
    6110:	9305      	str	r3, [sp, #20]
    6112:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6114:	9304      	str	r3, [sp, #16]
    6116:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6118:	9303      	str	r3, [sp, #12]
    611a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    611c:	9302      	str	r3, [sp, #8]
    611e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6120:	9301      	str	r3, [sp, #4]
    6122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6124:	9300      	str	r3, [sp, #0]
    6126:	4642      	mov	r2, r8
    6128:	464b      	mov	r3, r9
    612a:	4639      	mov	r1, r7
    612c:	4620      	mov	r0, r4
    612e:	f7ff ff6f 	bl	6010 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6132:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    6136:	bf08      	it	eq
    6138:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    613c:	d005      	beq.n	614a <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    613e:	ea55 0306 	orrs.w	r3, r5, r6
    6142:	d106      	bne.n	6152 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    6144:	4620      	mov	r0, r4
    6146:	f000 fed1 	bl	6eec <z_sched_start>
}
    614a:	4620      	mov	r0, r4
    614c:	b007      	add	sp, #28
    614e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6152:	4908      	ldr	r1, [pc, #32]	; (6174 <z_impl_k_thread_create+0x9c>)
    6154:	4632      	mov	r2, r6
    6156:	462b      	mov	r3, r5
    6158:	f104 0018 	add.w	r0, r4, #24
    615c:	f001 fd1c 	bl	7b98 <z_add_timeout>
    6160:	e7f3      	b.n	614a <z_impl_k_thread_create+0x72>
    6162:	bf00      	nop
    6164:	0000b2fa 	.word	0x0000b2fa
    6168:	0000b226 	.word	0x0000b226
    616c:	00009bef 	.word	0x00009bef
    6170:	0000b30c 	.word	0x0000b30c
    6174:	00006f95 	.word	0x00006f95

00006178 <z_init_static_threads>:
{
    6178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    617c:	4c3b      	ldr	r4, [pc, #236]	; (626c <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    617e:	4d3c      	ldr	r5, [pc, #240]	; (6270 <z_init_static_threads+0xf8>)
    6180:	4f3c      	ldr	r7, [pc, #240]	; (6274 <z_init_static_threads+0xfc>)
{
    6182:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6184:	42ac      	cmp	r4, r5
    6186:	4626      	mov	r6, r4
    6188:	d90e      	bls.n	61a8 <z_init_static_threads+0x30>
    618a:	493b      	ldr	r1, [pc, #236]	; (6278 <z_init_static_threads+0x100>)
    618c:	483b      	ldr	r0, [pc, #236]	; (627c <z_init_static_threads+0x104>)
    618e:	f240 23d5 	movw	r3, #725	; 0x2d5
    6192:	463a      	mov	r2, r7
    6194:	f002 fd6d 	bl	8c72 <assert_print>
    6198:	4839      	ldr	r0, [pc, #228]	; (6280 <z_init_static_threads+0x108>)
    619a:	f002 fd6a 	bl	8c72 <assert_print>
    619e:	f240 21d5 	movw	r1, #725	; 0x2d5
    61a2:	4638      	mov	r0, r7
    61a4:	f002 fd5e 	bl	8c64 <assert_post_action>
    61a8:	42ae      	cmp	r6, r5
    61aa:	f104 0430 	add.w	r4, r4, #48	; 0x30
    61ae:	d31f      	bcc.n	61f0 <z_init_static_threads+0x78>
	k_sched_lock();
    61b0:	f000 fc4e 	bl	6a50 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    61b4:	4c2d      	ldr	r4, [pc, #180]	; (626c <z_init_static_threads+0xf4>)
    61b6:	4e2f      	ldr	r6, [pc, #188]	; (6274 <z_init_static_threads+0xfc>)
    61b8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6278 <z_init_static_threads+0x100>
    61bc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 627c <z_init_static_threads+0x104>
    61c0:	42ac      	cmp	r4, r5
    61c2:	d90e      	bls.n	61e2 <z_init_static_threads+0x6a>
    61c4:	4641      	mov	r1, r8
    61c6:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    61ca:	4632      	mov	r2, r6
    61cc:	4648      	mov	r0, r9
    61ce:	f002 fd50 	bl	8c72 <assert_print>
    61d2:	482b      	ldr	r0, [pc, #172]	; (6280 <z_init_static_threads+0x108>)
    61d4:	f002 fd4d 	bl	8c72 <assert_print>
    61d8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    61dc:	4630      	mov	r0, r6
    61de:	f002 fd41 	bl	8c64 <assert_post_action>
    61e2:	42ac      	cmp	r4, r5
    61e4:	d320      	bcc.n	6228 <z_init_static_threads+0xb0>
}
    61e6:	b007      	add	sp, #28
    61e8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    61ec:	f001 b914 	b.w	7418 <k_sched_unlock>
		z_setup_new_thread(
    61f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    61f4:	9305      	str	r3, [sp, #20]
    61f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    61fa:	9304      	str	r3, [sp, #16]
    61fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6200:	9303      	str	r3, [sp, #12]
    6202:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6206:	9302      	str	r3, [sp, #8]
    6208:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    620c:	9301      	str	r3, [sp, #4]
    620e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6212:	9300      	str	r3, [sp, #0]
    6214:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6218:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    621c:	f7ff fef8 	bl	6010 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6220:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6224:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6226:	e7ad      	b.n	6184 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6228:	6a63      	ldr	r3, [r4, #36]	; 0x24
    622a:	1c5a      	adds	r2, r3, #1
    622c:	d00f      	beq.n	624e <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    622e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6236:	f240 30e7 	movw	r0, #999	; 0x3e7
    623a:	2100      	movs	r1, #0
    623c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6240:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6244:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6246:	d104      	bne.n	6252 <z_init_static_threads+0xda>
	z_sched_start(thread);
    6248:	4638      	mov	r0, r7
    624a:	f000 fe4f 	bl	6eec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    624e:	3430      	adds	r4, #48	; 0x30
    6250:	e7b6      	b.n	61c0 <z_init_static_threads+0x48>
    6252:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6256:	2300      	movs	r3, #0
    6258:	f7fa f934 	bl	4c4 <__aeabi_uldivmod>
    625c:	4602      	mov	r2, r0
    625e:	460b      	mov	r3, r1
    6260:	f107 0018 	add.w	r0, r7, #24
    6264:	4907      	ldr	r1, [pc, #28]	; (6284 <z_init_static_threads+0x10c>)
    6266:	f001 fc97 	bl	7b98 <z_add_timeout>
    626a:	e7f0      	b.n	624e <z_init_static_threads+0xd6>
    626c:	200001f4 	.word	0x200001f4
    6270:	200001f4 	.word	0x200001f4
    6274:	0000b226 	.word	0x0000b226
    6278:	0000b331 	.word	0x0000b331
    627c:	00009bef 	.word	0x00009bef
    6280:	0000b207 	.word	0x0000b207
    6284:	00006f95 	.word	0x00006f95

00006288 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6288:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    628a:	b138      	cbz	r0, 629c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    628c:	4b04      	ldr	r3, [pc, #16]	; (62a0 <z_spin_lock_valid+0x18>)
    628e:	7d1b      	ldrb	r3, [r3, #20]
    6290:	f000 0003 	and.w	r0, r0, #3
    6294:	1ac0      	subs	r0, r0, r3
    6296:	bf18      	it	ne
    6298:	2001      	movne	r0, #1
    629a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    629c:	2001      	movs	r0, #1
}
    629e:	4770      	bx	lr
    62a0:	20000c30 	.word	0x20000c30

000062a4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    62a4:	4a06      	ldr	r2, [pc, #24]	; (62c0 <z_spin_unlock_valid+0x1c>)
    62a6:	7d11      	ldrb	r1, [r2, #20]
    62a8:	6892      	ldr	r2, [r2, #8]
    62aa:	430a      	orrs	r2, r1
    62ac:	6801      	ldr	r1, [r0, #0]
{
    62ae:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    62b0:	4291      	cmp	r1, r2
    62b2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    62b6:	bf04      	itt	eq
    62b8:	6018      	streq	r0, [r3, #0]
	return true;
    62ba:	2001      	moveq	r0, #1
}
    62bc:	4770      	bx	lr
    62be:	bf00      	nop
    62c0:	20000c30 	.word	0x20000c30

000062c4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    62c4:	4b02      	ldr	r3, [pc, #8]	; (62d0 <z_spin_lock_set_owner+0xc>)
    62c6:	7d1a      	ldrb	r2, [r3, #20]
    62c8:	689b      	ldr	r3, [r3, #8]
    62ca:	4313      	orrs	r3, r2
    62cc:	6003      	str	r3, [r0, #0]
}
    62ce:	4770      	bx	lr
    62d0:	20000c30 	.word	0x20000c30

000062d4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    62d4:	4c13      	ldr	r4, [pc, #76]	; (6324 <idle+0x50>)
{
    62d6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    62d8:	68a3      	ldr	r3, [r4, #8]
    62da:	f993 300e 	ldrsb.w	r3, [r3, #14]
    62de:	2b00      	cmp	r3, #0
    62e0:	da09      	bge.n	62f6 <idle+0x22>
    62e2:	4911      	ldr	r1, [pc, #68]	; (6328 <idle+0x54>)
    62e4:	4811      	ldr	r0, [pc, #68]	; (632c <idle+0x58>)
    62e6:	4a12      	ldr	r2, [pc, #72]	; (6330 <idle+0x5c>)
    62e8:	2327      	movs	r3, #39	; 0x27
    62ea:	f002 fcc2 	bl	8c72 <assert_print>
    62ee:	4810      	ldr	r0, [pc, #64]	; (6330 <idle+0x5c>)
    62f0:	2127      	movs	r1, #39	; 0x27
    62f2:	f002 fcb7 	bl	8c64 <assert_post_action>
	return !z_sys_post_kernel;
    62f6:	4d0f      	ldr	r5, [pc, #60]	; (6334 <idle+0x60>)
	__asm__ volatile(
    62f8:	f04f 0240 	mov.w	r2, #64	; 0x40
    62fc:	f3ef 8311 	mrs	r3, BASEPRI
    6300:	f382 8812 	msr	BASEPRI_MAX, r2
    6304:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6308:	f001 fd5c 	bl	7dc4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    630c:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    630e:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6310:	b913      	cbnz	r3, 6318 <idle+0x44>
	arch_cpu_idle();
    6312:	f7fc fb31 	bl	2978 <arch_cpu_idle>
}
    6316:	e7ef      	b.n	62f8 <idle+0x24>
    6318:	f7fc f986 	bl	2628 <pm_system_suspend>
    631c:	2800      	cmp	r0, #0
    631e:	d1eb      	bne.n	62f8 <idle+0x24>
    6320:	e7f7      	b.n	6312 <idle+0x3e>
    6322:	bf00      	nop
    6324:	20000c30 	.word	0x20000c30
    6328:	0000b37f 	.word	0x0000b37f
    632c:	00009bef 	.word	0x00009bef
    6330:	0000b35e 	.word	0x0000b35e
    6334:	20001282 	.word	0x20001282

00006338 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    633c:	4604      	mov	r4, r0
    633e:	4617      	mov	r7, r2
    6340:	461e      	mov	r6, r3
    6342:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6346:	b163      	cbz	r3, 6362 <z_impl_k_mutex_lock+0x2a>
    6348:	496d      	ldr	r1, [pc, #436]	; (6500 <z_impl_k_mutex_lock+0x1c8>)
    634a:	4a6e      	ldr	r2, [pc, #440]	; (6504 <z_impl_k_mutex_lock+0x1cc>)
    634c:	486e      	ldr	r0, [pc, #440]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    634e:	2365      	movs	r3, #101	; 0x65
    6350:	f002 fc8f 	bl	8c72 <assert_print>
    6354:	486d      	ldr	r0, [pc, #436]	; (650c <z_impl_k_mutex_lock+0x1d4>)
    6356:	f002 fc8c 	bl	8c72 <assert_print>
    635a:	486a      	ldr	r0, [pc, #424]	; (6504 <z_impl_k_mutex_lock+0x1cc>)
    635c:	2165      	movs	r1, #101	; 0x65
    635e:	f002 fc81 	bl	8c64 <assert_post_action>
    6362:	f04f 0340 	mov.w	r3, #64	; 0x40
    6366:	f3ef 8811 	mrs	r8, BASEPRI
    636a:	f383 8812 	msr	BASEPRI_MAX, r3
    636e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6372:	4867      	ldr	r0, [pc, #412]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6374:	f7ff ff88 	bl	6288 <z_spin_lock_valid>
    6378:	b968      	cbnz	r0, 6396 <z_impl_k_mutex_lock+0x5e>
    637a:	4a66      	ldr	r2, [pc, #408]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    637c:	4966      	ldr	r1, [pc, #408]	; (6518 <z_impl_k_mutex_lock+0x1e0>)
    637e:	4862      	ldr	r0, [pc, #392]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    6380:	238e      	movs	r3, #142	; 0x8e
    6382:	f002 fc76 	bl	8c72 <assert_print>
    6386:	4962      	ldr	r1, [pc, #392]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6388:	4864      	ldr	r0, [pc, #400]	; (651c <z_impl_k_mutex_lock+0x1e4>)
    638a:	f002 fc72 	bl	8c72 <assert_print>
    638e:	4861      	ldr	r0, [pc, #388]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    6390:	218e      	movs	r1, #142	; 0x8e
    6392:	f002 fc67 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6396:	485e      	ldr	r0, [pc, #376]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6398:	f7ff ff94 	bl	62c4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    639c:	68e3      	ldr	r3, [r4, #12]
    639e:	4a60      	ldr	r2, [pc, #384]	; (6520 <z_impl_k_mutex_lock+0x1e8>)
    63a0:	b1fb      	cbz	r3, 63e2 <z_impl_k_mutex_lock+0xaa>
    63a2:	68a0      	ldr	r0, [r4, #8]
    63a4:	6891      	ldr	r1, [r2, #8]
    63a6:	4288      	cmp	r0, r1
    63a8:	d03d      	beq.n	6426 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    63aa:	ea57 0306 	orrs.w	r3, r7, r6
    63ae:	d13c      	bne.n	642a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63b0:	4857      	ldr	r0, [pc, #348]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    63b2:	f7ff ff77 	bl	62a4 <z_spin_unlock_valid>
    63b6:	b968      	cbnz	r0, 63d4 <z_impl_k_mutex_lock+0x9c>
    63b8:	4a56      	ldr	r2, [pc, #344]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    63ba:	495a      	ldr	r1, [pc, #360]	; (6524 <z_impl_k_mutex_lock+0x1ec>)
    63bc:	4852      	ldr	r0, [pc, #328]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    63be:	23b9      	movs	r3, #185	; 0xb9
    63c0:	f002 fc57 	bl	8c72 <assert_print>
    63c4:	4952      	ldr	r1, [pc, #328]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    63c6:	4858      	ldr	r0, [pc, #352]	; (6528 <z_impl_k_mutex_lock+0x1f0>)
    63c8:	f002 fc53 	bl	8c72 <assert_print>
    63cc:	4851      	ldr	r0, [pc, #324]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    63ce:	21b9      	movs	r1, #185	; 0xb9
    63d0:	f002 fc48 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    63d4:	f388 8811 	msr	BASEPRI, r8
    63d8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    63dc:	f06f 000f 	mvn.w	r0, #15
    63e0:	e01e      	b.n	6420 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    63e2:	6891      	ldr	r1, [r2, #8]
    63e4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    63e8:	4849      	ldr	r0, [pc, #292]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    63ea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    63ec:	3301      	adds	r3, #1
    63ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    63f0:	6893      	ldr	r3, [r2, #8]
    63f2:	60a3      	str	r3, [r4, #8]
    63f4:	f7ff ff56 	bl	62a4 <z_spin_unlock_valid>
    63f8:	b968      	cbnz	r0, 6416 <z_impl_k_mutex_lock+0xde>
    63fa:	4a46      	ldr	r2, [pc, #280]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    63fc:	4949      	ldr	r1, [pc, #292]	; (6524 <z_impl_k_mutex_lock+0x1ec>)
    63fe:	4842      	ldr	r0, [pc, #264]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    6400:	23b9      	movs	r3, #185	; 0xb9
    6402:	f002 fc36 	bl	8c72 <assert_print>
    6406:	4942      	ldr	r1, [pc, #264]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6408:	4847      	ldr	r0, [pc, #284]	; (6528 <z_impl_k_mutex_lock+0x1f0>)
    640a:	f002 fc32 	bl	8c72 <assert_print>
    640e:	4841      	ldr	r0, [pc, #260]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    6410:	21b9      	movs	r1, #185	; 0xb9
    6412:	f002 fc27 	bl	8c64 <assert_post_action>
    6416:	f388 8811 	msr	BASEPRI, r8
    641a:	f3bf 8f6f 	isb	sy
		return 0;
    641e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6420:	b002      	add	sp, #8
    6422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6426:	6921      	ldr	r1, [r4, #16]
    6428:	e7de      	b.n	63e8 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    642a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    642e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6432:	4299      	cmp	r1, r3
    6434:	bfa8      	it	ge
    6436:	4619      	movge	r1, r3
    6438:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    643c:	4291      	cmp	r1, r2
    643e:	bfb8      	it	lt
    6440:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6442:	4299      	cmp	r1, r3
    6444:	da43      	bge.n	64ce <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    6446:	f003 f833 	bl	94b0 <adjust_owner_prio.isra.0>
    644a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    644c:	e9cd 7600 	strd	r7, r6, [sp]
    6450:	482f      	ldr	r0, [pc, #188]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6452:	4622      	mov	r2, r4
    6454:	4641      	mov	r1, r8
    6456:	f000 feaf 	bl	71b8 <z_pend_curr>
	if (got_mutex == 0) {
    645a:	2800      	cmp	r0, #0
    645c:	d0e0      	beq.n	6420 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    645e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6462:	f3ef 8611 	mrs	r6, BASEPRI
    6466:	f383 8812 	msr	BASEPRI_MAX, r3
    646a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    646e:	4828      	ldr	r0, [pc, #160]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6470:	f7ff ff0a 	bl	6288 <z_spin_lock_valid>
    6474:	b968      	cbnz	r0, 6492 <z_impl_k_mutex_lock+0x15a>
    6476:	4a27      	ldr	r2, [pc, #156]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    6478:	4927      	ldr	r1, [pc, #156]	; (6518 <z_impl_k_mutex_lock+0x1e0>)
    647a:	4823      	ldr	r0, [pc, #140]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    647c:	238e      	movs	r3, #142	; 0x8e
    647e:	f002 fbf8 	bl	8c72 <assert_print>
    6482:	4923      	ldr	r1, [pc, #140]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6484:	4825      	ldr	r0, [pc, #148]	; (651c <z_impl_k_mutex_lock+0x1e4>)
    6486:	f002 fbf4 	bl	8c72 <assert_print>
    648a:	4822      	ldr	r0, [pc, #136]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    648c:	218e      	movs	r1, #142	; 0x8e
    648e:	f002 fbe9 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6492:	481f      	ldr	r0, [pc, #124]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    6494:	f7ff ff16 	bl	62c4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6498:	6823      	ldr	r3, [r4, #0]
    649a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    649c:	42a3      	cmp	r3, r4
    649e:	d00a      	beq.n	64b6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    64a0:	b14b      	cbz	r3, 64b6 <z_impl_k_mutex_lock+0x17e>
    64a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    64a6:	4299      	cmp	r1, r3
    64a8:	bfa8      	it	ge
    64aa:	4619      	movge	r1, r3
    64ac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    64b0:	4299      	cmp	r1, r3
    64b2:	bfb8      	it	lt
    64b4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    64b6:	68a0      	ldr	r0, [r4, #8]
    64b8:	f002 fffa 	bl	94b0 <adjust_owner_prio.isra.0>
    64bc:	b900      	cbnz	r0, 64c0 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    64be:	b145      	cbz	r5, 64d2 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    64c0:	4813      	ldr	r0, [pc, #76]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    64c2:	4631      	mov	r1, r6
    64c4:	f000 fa80 	bl	69c8 <z_reschedule>
	return -EAGAIN;
    64c8:	f06f 000a 	mvn.w	r0, #10
    64cc:	e7a8      	b.n	6420 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    64ce:	2500      	movs	r5, #0
    64d0:	e7bc      	b.n	644c <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64d2:	480f      	ldr	r0, [pc, #60]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    64d4:	f7ff fee6 	bl	62a4 <z_spin_unlock_valid>
    64d8:	b968      	cbnz	r0, 64f6 <z_impl_k_mutex_lock+0x1be>
    64da:	4a0e      	ldr	r2, [pc, #56]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    64dc:	4911      	ldr	r1, [pc, #68]	; (6524 <z_impl_k_mutex_lock+0x1ec>)
    64de:	480a      	ldr	r0, [pc, #40]	; (6508 <z_impl_k_mutex_lock+0x1d0>)
    64e0:	23b9      	movs	r3, #185	; 0xb9
    64e2:	f002 fbc6 	bl	8c72 <assert_print>
    64e6:	490a      	ldr	r1, [pc, #40]	; (6510 <z_impl_k_mutex_lock+0x1d8>)
    64e8:	480f      	ldr	r0, [pc, #60]	; (6528 <z_impl_k_mutex_lock+0x1f0>)
    64ea:	f002 fbc2 	bl	8c72 <assert_print>
    64ee:	4809      	ldr	r0, [pc, #36]	; (6514 <z_impl_k_mutex_lock+0x1dc>)
    64f0:	21b9      	movs	r1, #185	; 0xb9
    64f2:	f002 fbb7 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    64f6:	f386 8811 	msr	BASEPRI, r6
    64fa:	f3bf 8f6f 	isb	sy
    64fe:	e7e3      	b.n	64c8 <z_impl_k_mutex_lock+0x190>
    6500:	0000b2fa 	.word	0x0000b2fa
    6504:	0000b3a7 	.word	0x0000b3a7
    6508:	00009bef 	.word	0x00009bef
    650c:	0000b3c9 	.word	0x0000b3c9
    6510:	20000c58 	.word	0x20000c58
    6514:	00009f8a 	.word	0x00009f8a
    6518:	00009fe3 	.word	0x00009fe3
    651c:	00009ff8 	.word	0x00009ff8
    6520:	20000c30 	.word	0x20000c30
    6524:	00009fb7 	.word	0x00009fb7
    6528:	00009fce 	.word	0x00009fce

0000652c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    652c:	b538      	push	{r3, r4, r5, lr}
    652e:	4604      	mov	r4, r0
    6530:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6534:	b163      	cbz	r3, 6550 <z_impl_k_mutex_unlock+0x24>
    6536:	4950      	ldr	r1, [pc, #320]	; (6678 <z_impl_k_mutex_unlock+0x14c>)
    6538:	4a50      	ldr	r2, [pc, #320]	; (667c <z_impl_k_mutex_unlock+0x150>)
    653a:	4851      	ldr	r0, [pc, #324]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    653c:	23c7      	movs	r3, #199	; 0xc7
    653e:	f002 fb98 	bl	8c72 <assert_print>
    6542:	4850      	ldr	r0, [pc, #320]	; (6684 <z_impl_k_mutex_unlock+0x158>)
    6544:	f002 fb95 	bl	8c72 <assert_print>
    6548:	484c      	ldr	r0, [pc, #304]	; (667c <z_impl_k_mutex_unlock+0x150>)
    654a:	21c7      	movs	r1, #199	; 0xc7
    654c:	f002 fb8a 	bl	8c64 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6550:	68a3      	ldr	r3, [r4, #8]
    6552:	2b00      	cmp	r3, #0
    6554:	f000 8089 	beq.w	666a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6558:	4d4b      	ldr	r5, [pc, #300]	; (6688 <z_impl_k_mutex_unlock+0x15c>)
    655a:	68aa      	ldr	r2, [r5, #8]
    655c:	4293      	cmp	r3, r2
    655e:	f040 8087 	bne.w	6670 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6562:	68e3      	ldr	r3, [r4, #12]
    6564:	b94b      	cbnz	r3, 657a <z_impl_k_mutex_unlock+0x4e>
    6566:	4949      	ldr	r1, [pc, #292]	; (668c <z_impl_k_mutex_unlock+0x160>)
    6568:	4845      	ldr	r0, [pc, #276]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    656a:	4a44      	ldr	r2, [pc, #272]	; (667c <z_impl_k_mutex_unlock+0x150>)
    656c:	23df      	movs	r3, #223	; 0xdf
    656e:	f002 fb80 	bl	8c72 <assert_print>
    6572:	4842      	ldr	r0, [pc, #264]	; (667c <z_impl_k_mutex_unlock+0x150>)
    6574:	21df      	movs	r1, #223	; 0xdf
    6576:	f002 fb75 	bl	8c64 <assert_post_action>
    657a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    657e:	b163      	cbz	r3, 659a <z_impl_k_mutex_unlock+0x6e>
    6580:	493d      	ldr	r1, [pc, #244]	; (6678 <z_impl_k_mutex_unlock+0x14c>)
    6582:	4a43      	ldr	r2, [pc, #268]	; (6690 <z_impl_k_mutex_unlock+0x164>)
    6584:	483e      	ldr	r0, [pc, #248]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    6586:	23fd      	movs	r3, #253	; 0xfd
    6588:	f002 fb73 	bl	8c72 <assert_print>
    658c:	4841      	ldr	r0, [pc, #260]	; (6694 <z_impl_k_mutex_unlock+0x168>)
    658e:	f002 fb70 	bl	8c72 <assert_print>
    6592:	483f      	ldr	r0, [pc, #252]	; (6690 <z_impl_k_mutex_unlock+0x164>)
    6594:	21fd      	movs	r1, #253	; 0xfd
    6596:	f002 fb65 	bl	8c64 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    659a:	68ab      	ldr	r3, [r5, #8]
    659c:	7bdb      	ldrb	r3, [r3, #15]
    659e:	2b01      	cmp	r3, #1
    65a0:	d10c      	bne.n	65bc <z_impl_k_mutex_unlock+0x90>
    65a2:	493d      	ldr	r1, [pc, #244]	; (6698 <z_impl_k_mutex_unlock+0x16c>)
    65a4:	4a3a      	ldr	r2, [pc, #232]	; (6690 <z_impl_k_mutex_unlock+0x164>)
    65a6:	4836      	ldr	r0, [pc, #216]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    65a8:	23fe      	movs	r3, #254	; 0xfe
    65aa:	f002 fb62 	bl	8c72 <assert_print>
    65ae:	4839      	ldr	r0, [pc, #228]	; (6694 <z_impl_k_mutex_unlock+0x168>)
    65b0:	f002 fb5f 	bl	8c72 <assert_print>
    65b4:	4836      	ldr	r0, [pc, #216]	; (6690 <z_impl_k_mutex_unlock+0x164>)
    65b6:	21fe      	movs	r1, #254	; 0xfe
    65b8:	f002 fb54 	bl	8c64 <assert_post_action>

	--_current->base.sched_locked;
    65bc:	68aa      	ldr	r2, [r5, #8]
    65be:	7bd3      	ldrb	r3, [r2, #15]
    65c0:	3b01      	subs	r3, #1
    65c2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    65c4:	68e3      	ldr	r3, [r4, #12]
    65c6:	2b01      	cmp	r3, #1
    65c8:	d905      	bls.n	65d6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    65ca:	3b01      	subs	r3, #1
    65cc:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    65ce:	f000 ff23 	bl	7418 <k_sched_unlock>

	return 0;
    65d2:	2000      	movs	r0, #0
}
    65d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    65d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    65da:	f3ef 8511 	mrs	r5, BASEPRI
    65de:	f383 8812 	msr	BASEPRI_MAX, r3
    65e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65e6:	482d      	ldr	r0, [pc, #180]	; (669c <z_impl_k_mutex_unlock+0x170>)
    65e8:	f7ff fe4e 	bl	6288 <z_spin_lock_valid>
    65ec:	b968      	cbnz	r0, 660a <z_impl_k_mutex_unlock+0xde>
    65ee:	4a2c      	ldr	r2, [pc, #176]	; (66a0 <z_impl_k_mutex_unlock+0x174>)
    65f0:	492c      	ldr	r1, [pc, #176]	; (66a4 <z_impl_k_mutex_unlock+0x178>)
    65f2:	4823      	ldr	r0, [pc, #140]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    65f4:	238e      	movs	r3, #142	; 0x8e
    65f6:	f002 fb3c 	bl	8c72 <assert_print>
    65fa:	4928      	ldr	r1, [pc, #160]	; (669c <z_impl_k_mutex_unlock+0x170>)
    65fc:	482a      	ldr	r0, [pc, #168]	; (66a8 <z_impl_k_mutex_unlock+0x17c>)
    65fe:	f002 fb38 	bl	8c72 <assert_print>
    6602:	4827      	ldr	r0, [pc, #156]	; (66a0 <z_impl_k_mutex_unlock+0x174>)
    6604:	218e      	movs	r1, #142	; 0x8e
    6606:	f002 fb2d 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    660a:	4824      	ldr	r0, [pc, #144]	; (669c <z_impl_k_mutex_unlock+0x170>)
    660c:	f7ff fe5a 	bl	62c4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6610:	6921      	ldr	r1, [r4, #16]
    6612:	68a0      	ldr	r0, [r4, #8]
    6614:	f002 ff4c 	bl	94b0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6618:	4620      	mov	r0, r4
    661a:	f000 ffc5 	bl	75a8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    661e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6620:	b158      	cbz	r0, 663a <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    6622:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6626:	6122      	str	r2, [r4, #16]
    6628:	2200      	movs	r2, #0
    662a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    662c:	f000 fc16 	bl	6e5c <z_ready_thread>
		z_reschedule(&lock, key);
    6630:	481a      	ldr	r0, [pc, #104]	; (669c <z_impl_k_mutex_unlock+0x170>)
    6632:	4629      	mov	r1, r5
    6634:	f000 f9c8 	bl	69c8 <z_reschedule>
    6638:	e7c9      	b.n	65ce <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    663a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    663c:	4817      	ldr	r0, [pc, #92]	; (669c <z_impl_k_mutex_unlock+0x170>)
    663e:	f7ff fe31 	bl	62a4 <z_spin_unlock_valid>
    6642:	b968      	cbnz	r0, 6660 <z_impl_k_mutex_unlock+0x134>
    6644:	4a16      	ldr	r2, [pc, #88]	; (66a0 <z_impl_k_mutex_unlock+0x174>)
    6646:	4919      	ldr	r1, [pc, #100]	; (66ac <z_impl_k_mutex_unlock+0x180>)
    6648:	480d      	ldr	r0, [pc, #52]	; (6680 <z_impl_k_mutex_unlock+0x154>)
    664a:	23b9      	movs	r3, #185	; 0xb9
    664c:	f002 fb11 	bl	8c72 <assert_print>
    6650:	4912      	ldr	r1, [pc, #72]	; (669c <z_impl_k_mutex_unlock+0x170>)
    6652:	4817      	ldr	r0, [pc, #92]	; (66b0 <z_impl_k_mutex_unlock+0x184>)
    6654:	f002 fb0d 	bl	8c72 <assert_print>
    6658:	4811      	ldr	r0, [pc, #68]	; (66a0 <z_impl_k_mutex_unlock+0x174>)
    665a:	21b9      	movs	r1, #185	; 0xb9
    665c:	f002 fb02 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    6660:	f385 8811 	msr	BASEPRI, r5
    6664:	f3bf 8f6f 	isb	sy
    6668:	e7b1      	b.n	65ce <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    666a:	f06f 0015 	mvn.w	r0, #21
    666e:	e7b1      	b.n	65d4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6674:	e7ae      	b.n	65d4 <z_impl_k_mutex_unlock+0xa8>
    6676:	bf00      	nop
    6678:	0000b2fa 	.word	0x0000b2fa
    667c:	0000b3a7 	.word	0x0000b3a7
    6680:	00009bef 	.word	0x00009bef
    6684:	0000b3c9 	.word	0x0000b3c9
    6688:	20000c30 	.word	0x20000c30
    668c:	0000b3ee 	.word	0x0000b3ee
    6690:	0000b405 	.word	0x0000b405
    6694:	0000b430 	.word	0x0000b430
    6698:	0000b433 	.word	0x0000b433
    669c:	20000c58 	.word	0x20000c58
    66a0:	00009f8a 	.word	0x00009f8a
    66a4:	00009fe3 	.word	0x00009fe3
    66a8:	00009ff8 	.word	0x00009ff8
    66ac:	00009fb7 	.word	0x00009fb7
    66b0:	00009fce 	.word	0x00009fce

000066b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    66b4:	b538      	push	{r3, r4, r5, lr}
    66b6:	4604      	mov	r4, r0
	__asm__ volatile(
    66b8:	f04f 0340 	mov.w	r3, #64	; 0x40
    66bc:	f3ef 8511 	mrs	r5, BASEPRI
    66c0:	f383 8812 	msr	BASEPRI_MAX, r3
    66c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66c8:	4814      	ldr	r0, [pc, #80]	; (671c <z_impl_k_sem_give+0x68>)
    66ca:	f7ff fddd 	bl	6288 <z_spin_lock_valid>
    66ce:	b968      	cbnz	r0, 66ec <z_impl_k_sem_give+0x38>
    66d0:	4a13      	ldr	r2, [pc, #76]	; (6720 <z_impl_k_sem_give+0x6c>)
    66d2:	4914      	ldr	r1, [pc, #80]	; (6724 <z_impl_k_sem_give+0x70>)
    66d4:	4814      	ldr	r0, [pc, #80]	; (6728 <z_impl_k_sem_give+0x74>)
    66d6:	238e      	movs	r3, #142	; 0x8e
    66d8:	f002 facb 	bl	8c72 <assert_print>
    66dc:	490f      	ldr	r1, [pc, #60]	; (671c <z_impl_k_sem_give+0x68>)
    66de:	4813      	ldr	r0, [pc, #76]	; (672c <z_impl_k_sem_give+0x78>)
    66e0:	f002 fac7 	bl	8c72 <assert_print>
    66e4:	480e      	ldr	r0, [pc, #56]	; (6720 <z_impl_k_sem_give+0x6c>)
    66e6:	218e      	movs	r1, #142	; 0x8e
    66e8:	f002 fabc 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    66ec:	480b      	ldr	r0, [pc, #44]	; (671c <z_impl_k_sem_give+0x68>)
    66ee:	f7ff fde9 	bl	62c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    66f2:	4620      	mov	r0, r4
    66f4:	f000 ff58 	bl	75a8 <z_unpend_first_thread>

	if (thread != NULL) {
    66f8:	b148      	cbz	r0, 670e <z_impl_k_sem_give+0x5a>
    66fa:	2200      	movs	r2, #0
    66fc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    66fe:	f000 fbad 	bl	6e5c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6702:	4629      	mov	r1, r5
    6704:	4805      	ldr	r0, [pc, #20]	; (671c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    670a:	f000 b95d 	b.w	69c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    670e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6712:	429a      	cmp	r2, r3
    6714:	bf18      	it	ne
    6716:	3301      	addne	r3, #1
    6718:	60a3      	str	r3, [r4, #8]
}
    671a:	e7f2      	b.n	6702 <z_impl_k_sem_give+0x4e>
    671c:	20000c5c 	.word	0x20000c5c
    6720:	00009f8a 	.word	0x00009f8a
    6724:	00009fe3 	.word	0x00009fe3
    6728:	00009bef 	.word	0x00009bef
    672c:	00009ff8 	.word	0x00009ff8

00006730 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6732:	4604      	mov	r4, r0
    6734:	4617      	mov	r7, r2
    6736:	461d      	mov	r5, r3
    6738:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    673c:	b17b      	cbz	r3, 675e <z_impl_k_sem_take+0x2e>
    673e:	ea52 0305 	orrs.w	r3, r2, r5
    6742:	d00c      	beq.n	675e <z_impl_k_sem_take+0x2e>
    6744:	4935      	ldr	r1, [pc, #212]	; (681c <z_impl_k_sem_take+0xec>)
    6746:	4a36      	ldr	r2, [pc, #216]	; (6820 <z_impl_k_sem_take+0xf0>)
    6748:	4836      	ldr	r0, [pc, #216]	; (6824 <z_impl_k_sem_take+0xf4>)
    674a:	2379      	movs	r3, #121	; 0x79
    674c:	f002 fa91 	bl	8c72 <assert_print>
    6750:	4835      	ldr	r0, [pc, #212]	; (6828 <z_impl_k_sem_take+0xf8>)
    6752:	f002 fa8e 	bl	8c72 <assert_print>
    6756:	4832      	ldr	r0, [pc, #200]	; (6820 <z_impl_k_sem_take+0xf0>)
    6758:	2179      	movs	r1, #121	; 0x79
    675a:	f002 fa83 	bl	8c64 <assert_post_action>
    675e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6762:	f3ef 8611 	mrs	r6, BASEPRI
    6766:	f383 8812 	msr	BASEPRI_MAX, r3
    676a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    676e:	482f      	ldr	r0, [pc, #188]	; (682c <z_impl_k_sem_take+0xfc>)
    6770:	f7ff fd8a 	bl	6288 <z_spin_lock_valid>
    6774:	b968      	cbnz	r0, 6792 <z_impl_k_sem_take+0x62>
    6776:	4a2e      	ldr	r2, [pc, #184]	; (6830 <z_impl_k_sem_take+0x100>)
    6778:	492e      	ldr	r1, [pc, #184]	; (6834 <z_impl_k_sem_take+0x104>)
    677a:	482a      	ldr	r0, [pc, #168]	; (6824 <z_impl_k_sem_take+0xf4>)
    677c:	238e      	movs	r3, #142	; 0x8e
    677e:	f002 fa78 	bl	8c72 <assert_print>
    6782:	492a      	ldr	r1, [pc, #168]	; (682c <z_impl_k_sem_take+0xfc>)
    6784:	482c      	ldr	r0, [pc, #176]	; (6838 <z_impl_k_sem_take+0x108>)
    6786:	f002 fa74 	bl	8c72 <assert_print>
    678a:	4829      	ldr	r0, [pc, #164]	; (6830 <z_impl_k_sem_take+0x100>)
    678c:	218e      	movs	r1, #142	; 0x8e
    678e:	f002 fa69 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6792:	4826      	ldr	r0, [pc, #152]	; (682c <z_impl_k_sem_take+0xfc>)
    6794:	f7ff fd96 	bl	62c4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6798:	68a3      	ldr	r3, [r4, #8]
    679a:	b1d3      	cbz	r3, 67d2 <z_impl_k_sem_take+0xa2>
		sem->count--;
    679c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    679e:	4823      	ldr	r0, [pc, #140]	; (682c <z_impl_k_sem_take+0xfc>)
    67a0:	60a3      	str	r3, [r4, #8]
    67a2:	f7ff fd7f 	bl	62a4 <z_spin_unlock_valid>
    67a6:	b968      	cbnz	r0, 67c4 <z_impl_k_sem_take+0x94>
    67a8:	4a21      	ldr	r2, [pc, #132]	; (6830 <z_impl_k_sem_take+0x100>)
    67aa:	4924      	ldr	r1, [pc, #144]	; (683c <z_impl_k_sem_take+0x10c>)
    67ac:	481d      	ldr	r0, [pc, #116]	; (6824 <z_impl_k_sem_take+0xf4>)
    67ae:	23b9      	movs	r3, #185	; 0xb9
    67b0:	f002 fa5f 	bl	8c72 <assert_print>
    67b4:	491d      	ldr	r1, [pc, #116]	; (682c <z_impl_k_sem_take+0xfc>)
    67b6:	4822      	ldr	r0, [pc, #136]	; (6840 <z_impl_k_sem_take+0x110>)
    67b8:	f002 fa5b 	bl	8c72 <assert_print>
    67bc:	481c      	ldr	r0, [pc, #112]	; (6830 <z_impl_k_sem_take+0x100>)
    67be:	21b9      	movs	r1, #185	; 0xb9
    67c0:	f002 fa50 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    67c4:	f386 8811 	msr	BASEPRI, r6
    67c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    67cc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    67ce:	b003      	add	sp, #12
    67d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    67d2:	ea57 0305 	orrs.w	r3, r7, r5
    67d6:	d118      	bne.n	680a <z_impl_k_sem_take+0xda>
    67d8:	4814      	ldr	r0, [pc, #80]	; (682c <z_impl_k_sem_take+0xfc>)
    67da:	f7ff fd63 	bl	62a4 <z_spin_unlock_valid>
    67de:	b968      	cbnz	r0, 67fc <z_impl_k_sem_take+0xcc>
    67e0:	4a13      	ldr	r2, [pc, #76]	; (6830 <z_impl_k_sem_take+0x100>)
    67e2:	4916      	ldr	r1, [pc, #88]	; (683c <z_impl_k_sem_take+0x10c>)
    67e4:	480f      	ldr	r0, [pc, #60]	; (6824 <z_impl_k_sem_take+0xf4>)
    67e6:	23b9      	movs	r3, #185	; 0xb9
    67e8:	f002 fa43 	bl	8c72 <assert_print>
    67ec:	490f      	ldr	r1, [pc, #60]	; (682c <z_impl_k_sem_take+0xfc>)
    67ee:	4814      	ldr	r0, [pc, #80]	; (6840 <z_impl_k_sem_take+0x110>)
    67f0:	f002 fa3f 	bl	8c72 <assert_print>
    67f4:	480e      	ldr	r0, [pc, #56]	; (6830 <z_impl_k_sem_take+0x100>)
    67f6:	21b9      	movs	r1, #185	; 0xb9
    67f8:	f002 fa34 	bl	8c64 <assert_post_action>
    67fc:	f386 8811 	msr	BASEPRI, r6
    6800:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6804:	f06f 000f 	mvn.w	r0, #15
    6808:	e7e1      	b.n	67ce <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    680a:	e9cd 7500 	strd	r7, r5, [sp]
    680e:	4622      	mov	r2, r4
    6810:	4631      	mov	r1, r6
    6812:	4806      	ldr	r0, [pc, #24]	; (682c <z_impl_k_sem_take+0xfc>)
    6814:	f000 fcd0 	bl	71b8 <z_pend_curr>
	return ret;
    6818:	e7d9      	b.n	67ce <z_impl_k_sem_take+0x9e>
    681a:	bf00      	nop
    681c:	0000b484 	.word	0x0000b484
    6820:	0000b464 	.word	0x0000b464
    6824:	00009bef 	.word	0x00009bef
    6828:	0000b430 	.word	0x0000b430
    682c:	20000c5c 	.word	0x20000c5c
    6830:	00009f8a 	.word	0x00009f8a
    6834:	00009fe3 	.word	0x00009fe3
    6838:	00009ff8 	.word	0x00009ff8
    683c:	00009fb7 	.word	0x00009fb7
    6840:	00009fce 	.word	0x00009fce

00006844 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6844:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6846:	4d07      	ldr	r5, [pc, #28]	; (6864 <z_reset_time_slice+0x20>)
    6848:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    684a:	b154      	cbz	r4, 6862 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    684c:	f7fe f992 	bl	4b74 <sys_clock_elapsed>
    6850:	4b05      	ldr	r3, [pc, #20]	; (6868 <z_reset_time_slice+0x24>)
    6852:	4404      	add	r4, r0
    6854:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6856:	6828      	ldr	r0, [r5, #0]
    6858:	2100      	movs	r1, #0
	}
}
    685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    685e:	f001 baf9 	b.w	7e54 <z_set_timeout_expiry>
}
    6862:	bd38      	pop	{r3, r4, r5, pc}
    6864:	20000c6c 	.word	0x20000c6c
    6868:	20000c30 	.word	0x20000c30

0000686c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    686e:	4604      	mov	r4, r0
    6870:	460d      	mov	r5, r1
	__asm__ volatile(
    6872:	f04f 0340 	mov.w	r3, #64	; 0x40
    6876:	f3ef 8711 	mrs	r7, BASEPRI
    687a:	f383 8812 	msr	BASEPRI_MAX, r3
    687e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6882:	4823      	ldr	r0, [pc, #140]	; (6910 <k_sched_time_slice_set+0xa4>)
    6884:	f7ff fd00 	bl	6288 <z_spin_lock_valid>
    6888:	b968      	cbnz	r0, 68a6 <k_sched_time_slice_set+0x3a>
    688a:	4a22      	ldr	r2, [pc, #136]	; (6914 <k_sched_time_slice_set+0xa8>)
    688c:	4922      	ldr	r1, [pc, #136]	; (6918 <k_sched_time_slice_set+0xac>)
    688e:	4823      	ldr	r0, [pc, #140]	; (691c <k_sched_time_slice_set+0xb0>)
    6890:	238e      	movs	r3, #142	; 0x8e
    6892:	f002 f9ee 	bl	8c72 <assert_print>
    6896:	491e      	ldr	r1, [pc, #120]	; (6910 <k_sched_time_slice_set+0xa4>)
    6898:	4821      	ldr	r0, [pc, #132]	; (6920 <k_sched_time_slice_set+0xb4>)
    689a:	f002 f9ea 	bl	8c72 <assert_print>
    689e:	481d      	ldr	r0, [pc, #116]	; (6914 <k_sched_time_slice_set+0xa8>)
    68a0:	218e      	movs	r1, #142	; 0x8e
    68a2:	f002 f9df 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    68a6:	481a      	ldr	r0, [pc, #104]	; (6910 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    68a8:	4e1e      	ldr	r6, [pc, #120]	; (6924 <k_sched_time_slice_set+0xb8>)
    68aa:	f7ff fd0b 	bl	62c4 <z_spin_lock_set_owner>
    68ae:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    68b0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    68b4:	f240 30e7 	movw	r0, #999	; 0x3e7
    68b8:	6131      	str	r1, [r6, #16]
    68ba:	2300      	movs	r3, #0
    68bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    68c0:	fbe4 010c 	umlal	r0, r1, r4, ip
    68c4:	f7f9 fdfe 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    68c8:	2c00      	cmp	r4, #0
    68ca:	4b17      	ldr	r3, [pc, #92]	; (6928 <k_sched_time_slice_set+0xbc>)
    68cc:	dc1c      	bgt.n	6908 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    68ce:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    68d0:	4b16      	ldr	r3, [pc, #88]	; (692c <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    68d2:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    68d4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    68d6:	f7ff ffb5 	bl	6844 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68da:	480d      	ldr	r0, [pc, #52]	; (6910 <k_sched_time_slice_set+0xa4>)
    68dc:	f7ff fce2 	bl	62a4 <z_spin_unlock_valid>
    68e0:	b968      	cbnz	r0, 68fe <k_sched_time_slice_set+0x92>
    68e2:	4a0c      	ldr	r2, [pc, #48]	; (6914 <k_sched_time_slice_set+0xa8>)
    68e4:	4912      	ldr	r1, [pc, #72]	; (6930 <k_sched_time_slice_set+0xc4>)
    68e6:	480d      	ldr	r0, [pc, #52]	; (691c <k_sched_time_slice_set+0xb0>)
    68e8:	23b9      	movs	r3, #185	; 0xb9
    68ea:	f002 f9c2 	bl	8c72 <assert_print>
    68ee:	4908      	ldr	r1, [pc, #32]	; (6910 <k_sched_time_slice_set+0xa4>)
    68f0:	4810      	ldr	r0, [pc, #64]	; (6934 <k_sched_time_slice_set+0xc8>)
    68f2:	f002 f9be 	bl	8c72 <assert_print>
    68f6:	4807      	ldr	r0, [pc, #28]	; (6914 <k_sched_time_slice_set+0xa8>)
    68f8:	21b9      	movs	r1, #185	; 0xb9
    68fa:	f002 f9b3 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    68fe:	f387 8811 	msr	BASEPRI, r7
    6902:	f3bf 8f6f 	isb	sy
	}
}
    6906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    6908:	2802      	cmp	r0, #2
    690a:	bfb8      	it	lt
    690c:	2002      	movlt	r0, #2
    690e:	e7de      	b.n	68ce <k_sched_time_slice_set+0x62>
    6910:	20000c64 	.word	0x20000c64
    6914:	00009f8a 	.word	0x00009f8a
    6918:	00009fe3 	.word	0x00009fe3
    691c:	00009bef 	.word	0x00009bef
    6920:	00009ff8 	.word	0x00009ff8
    6924:	20000c30 	.word	0x20000c30
    6928:	20000c6c 	.word	0x20000c6c
    692c:	20000c68 	.word	0x20000c68
    6930:	00009fb7 	.word	0x00009fb7
    6934:	00009fce 	.word	0x00009fce

00006938 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    6938:	b538      	push	{r3, r4, r5, lr}
    693a:	4604      	mov	r4, r0
	__asm__ volatile(
    693c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6940:	f3ef 8511 	mrs	r5, BASEPRI
    6944:	f383 8812 	msr	BASEPRI_MAX, r3
    6948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    694c:	4817      	ldr	r0, [pc, #92]	; (69ac <z_unpend_thread_no_timeout+0x74>)
    694e:	f7ff fc9b 	bl	6288 <z_spin_lock_valid>
    6952:	b968      	cbnz	r0, 6970 <z_unpend_thread_no_timeout+0x38>
    6954:	4a16      	ldr	r2, [pc, #88]	; (69b0 <z_unpend_thread_no_timeout+0x78>)
    6956:	4917      	ldr	r1, [pc, #92]	; (69b4 <z_unpend_thread_no_timeout+0x7c>)
    6958:	4817      	ldr	r0, [pc, #92]	; (69b8 <z_unpend_thread_no_timeout+0x80>)
    695a:	238e      	movs	r3, #142	; 0x8e
    695c:	f002 f989 	bl	8c72 <assert_print>
    6960:	4912      	ldr	r1, [pc, #72]	; (69ac <z_unpend_thread_no_timeout+0x74>)
    6962:	4816      	ldr	r0, [pc, #88]	; (69bc <z_unpend_thread_no_timeout+0x84>)
    6964:	f002 f985 	bl	8c72 <assert_print>
    6968:	4811      	ldr	r0, [pc, #68]	; (69b0 <z_unpend_thread_no_timeout+0x78>)
    696a:	218e      	movs	r1, #142	; 0x8e
    696c:	f002 f97a 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6970:	480e      	ldr	r0, [pc, #56]	; (69ac <z_unpend_thread_no_timeout+0x74>)
    6972:	f7ff fca7 	bl	62c4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    6976:	4620      	mov	r0, r4
    6978:	f000 f900 	bl	6b7c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    697c:	480b      	ldr	r0, [pc, #44]	; (69ac <z_unpend_thread_no_timeout+0x74>)
    697e:	f7ff fc91 	bl	62a4 <z_spin_unlock_valid>
    6982:	b968      	cbnz	r0, 69a0 <z_unpend_thread_no_timeout+0x68>
    6984:	4a0a      	ldr	r2, [pc, #40]	; (69b0 <z_unpend_thread_no_timeout+0x78>)
    6986:	490e      	ldr	r1, [pc, #56]	; (69c0 <z_unpend_thread_no_timeout+0x88>)
    6988:	480b      	ldr	r0, [pc, #44]	; (69b8 <z_unpend_thread_no_timeout+0x80>)
    698a:	23b9      	movs	r3, #185	; 0xb9
    698c:	f002 f971 	bl	8c72 <assert_print>
    6990:	4906      	ldr	r1, [pc, #24]	; (69ac <z_unpend_thread_no_timeout+0x74>)
    6992:	480c      	ldr	r0, [pc, #48]	; (69c4 <z_unpend_thread_no_timeout+0x8c>)
    6994:	f002 f96d 	bl	8c72 <assert_print>
    6998:	4805      	ldr	r0, [pc, #20]	; (69b0 <z_unpend_thread_no_timeout+0x78>)
    699a:	21b9      	movs	r1, #185	; 0xb9
    699c:	f002 f962 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    69a0:	f385 8811 	msr	BASEPRI, r5
    69a4:	f3bf 8f6f 	isb	sy
	}
}
    69a8:	bd38      	pop	{r3, r4, r5, pc}
    69aa:	bf00      	nop
    69ac:	20000c64 	.word	0x20000c64
    69b0:	00009f8a 	.word	0x00009f8a
    69b4:	00009fe3 	.word	0x00009fe3
    69b8:	00009bef 	.word	0x00009bef
    69bc:	00009ff8 	.word	0x00009ff8
    69c0:	00009fb7 	.word	0x00009fb7
    69c4:	00009fce 	.word	0x00009fce

000069c8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    69c8:	b538      	push	{r3, r4, r5, lr}
    69ca:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    69cc:	460d      	mov	r5, r1
    69ce:	b9e9      	cbnz	r1, 6a0c <z_reschedule+0x44>
    69d0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    69d4:	b9d3      	cbnz	r3, 6a0c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    69d6:	4b19      	ldr	r3, [pc, #100]	; (6a3c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    69d8:	69da      	ldr	r2, [r3, #28]
    69da:	689b      	ldr	r3, [r3, #8]
    69dc:	429a      	cmp	r2, r3
    69de:	d015      	beq.n	6a0c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69e0:	f7ff fc60 	bl	62a4 <z_spin_unlock_valid>
    69e4:	b968      	cbnz	r0, 6a02 <z_reschedule+0x3a>
    69e6:	4a16      	ldr	r2, [pc, #88]	; (6a40 <z_reschedule+0x78>)
    69e8:	4916      	ldr	r1, [pc, #88]	; (6a44 <z_reschedule+0x7c>)
    69ea:	4817      	ldr	r0, [pc, #92]	; (6a48 <z_reschedule+0x80>)
    69ec:	23d0      	movs	r3, #208	; 0xd0
    69ee:	f002 f940 	bl	8c72 <assert_print>
    69f2:	4816      	ldr	r0, [pc, #88]	; (6a4c <z_reschedule+0x84>)
    69f4:	4621      	mov	r1, r4
    69f6:	f002 f93c 	bl	8c72 <assert_print>
    69fa:	4811      	ldr	r0, [pc, #68]	; (6a40 <z_reschedule+0x78>)
    69fc:	21d0      	movs	r1, #208	; 0xd0
    69fe:	f002 f931 	bl	8c64 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    6a06:	2000      	movs	r0, #0
    6a08:	f7fc b892 	b.w	2b30 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a0c:	4620      	mov	r0, r4
    6a0e:	f7ff fc49 	bl	62a4 <z_spin_unlock_valid>
    6a12:	b968      	cbnz	r0, 6a30 <z_reschedule+0x68>
    6a14:	4a0a      	ldr	r2, [pc, #40]	; (6a40 <z_reschedule+0x78>)
    6a16:	490b      	ldr	r1, [pc, #44]	; (6a44 <z_reschedule+0x7c>)
    6a18:	480b      	ldr	r0, [pc, #44]	; (6a48 <z_reschedule+0x80>)
    6a1a:	23b9      	movs	r3, #185	; 0xb9
    6a1c:	f002 f929 	bl	8c72 <assert_print>
    6a20:	480a      	ldr	r0, [pc, #40]	; (6a4c <z_reschedule+0x84>)
    6a22:	4621      	mov	r1, r4
    6a24:	f002 f925 	bl	8c72 <assert_print>
    6a28:	4805      	ldr	r0, [pc, #20]	; (6a40 <z_reschedule+0x78>)
    6a2a:	21b9      	movs	r1, #185	; 0xb9
    6a2c:	f002 f91a 	bl	8c64 <assert_post_action>
    6a30:	f385 8811 	msr	BASEPRI, r5
    6a34:	f3bf 8f6f 	isb	sy
    6a38:	bd38      	pop	{r3, r4, r5, pc}
    6a3a:	bf00      	nop
    6a3c:	20000c30 	.word	0x20000c30
    6a40:	00009f8a 	.word	0x00009f8a
    6a44:	00009fb7 	.word	0x00009fb7
    6a48:	00009bef 	.word	0x00009bef
    6a4c:	00009fce 	.word	0x00009fce

00006a50 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6a50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a52:	f04f 0340 	mov.w	r3, #64	; 0x40
    6a56:	f3ef 8511 	mrs	r5, BASEPRI
    6a5a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a62:	4829      	ldr	r0, [pc, #164]	; (6b08 <k_sched_lock+0xb8>)
    6a64:	f7ff fc10 	bl	6288 <z_spin_lock_valid>
    6a68:	b968      	cbnz	r0, 6a86 <k_sched_lock+0x36>
    6a6a:	4a28      	ldr	r2, [pc, #160]	; (6b0c <k_sched_lock+0xbc>)
    6a6c:	4928      	ldr	r1, [pc, #160]	; (6b10 <k_sched_lock+0xc0>)
    6a6e:	4829      	ldr	r0, [pc, #164]	; (6b14 <k_sched_lock+0xc4>)
    6a70:	238e      	movs	r3, #142	; 0x8e
    6a72:	f002 f8fe 	bl	8c72 <assert_print>
    6a76:	4924      	ldr	r1, [pc, #144]	; (6b08 <k_sched_lock+0xb8>)
    6a78:	4827      	ldr	r0, [pc, #156]	; (6b18 <k_sched_lock+0xc8>)
    6a7a:	f002 f8fa 	bl	8c72 <assert_print>
    6a7e:	4823      	ldr	r0, [pc, #140]	; (6b0c <k_sched_lock+0xbc>)
    6a80:	218e      	movs	r1, #142	; 0x8e
    6a82:	f002 f8ef 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a86:	4820      	ldr	r0, [pc, #128]	; (6b08 <k_sched_lock+0xb8>)
    6a88:	f7ff fc1c 	bl	62c4 <z_spin_lock_set_owner>
    6a8c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6a90:	b163      	cbz	r3, 6aac <k_sched_lock+0x5c>
    6a92:	4922      	ldr	r1, [pc, #136]	; (6b1c <k_sched_lock+0xcc>)
    6a94:	4a22      	ldr	r2, [pc, #136]	; (6b20 <k_sched_lock+0xd0>)
    6a96:	481f      	ldr	r0, [pc, #124]	; (6b14 <k_sched_lock+0xc4>)
    6a98:	23fd      	movs	r3, #253	; 0xfd
    6a9a:	f002 f8ea 	bl	8c72 <assert_print>
    6a9e:	4821      	ldr	r0, [pc, #132]	; (6b24 <k_sched_lock+0xd4>)
    6aa0:	f002 f8e7 	bl	8c72 <assert_print>
    6aa4:	481e      	ldr	r0, [pc, #120]	; (6b20 <k_sched_lock+0xd0>)
    6aa6:	21fd      	movs	r1, #253	; 0xfd
    6aa8:	f002 f8dc 	bl	8c64 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6aac:	4c1e      	ldr	r4, [pc, #120]	; (6b28 <k_sched_lock+0xd8>)
    6aae:	68a3      	ldr	r3, [r4, #8]
    6ab0:	7bdb      	ldrb	r3, [r3, #15]
    6ab2:	2b01      	cmp	r3, #1
    6ab4:	d10c      	bne.n	6ad0 <k_sched_lock+0x80>
    6ab6:	491d      	ldr	r1, [pc, #116]	; (6b2c <k_sched_lock+0xdc>)
    6ab8:	4a19      	ldr	r2, [pc, #100]	; (6b20 <k_sched_lock+0xd0>)
    6aba:	4816      	ldr	r0, [pc, #88]	; (6b14 <k_sched_lock+0xc4>)
    6abc:	23fe      	movs	r3, #254	; 0xfe
    6abe:	f002 f8d8 	bl	8c72 <assert_print>
    6ac2:	4818      	ldr	r0, [pc, #96]	; (6b24 <k_sched_lock+0xd4>)
    6ac4:	f002 f8d5 	bl	8c72 <assert_print>
    6ac8:	4815      	ldr	r0, [pc, #84]	; (6b20 <k_sched_lock+0xd0>)
    6aca:	21fe      	movs	r1, #254	; 0xfe
    6acc:	f002 f8ca 	bl	8c64 <assert_post_action>
	--_current->base.sched_locked;
    6ad0:	68a2      	ldr	r2, [r4, #8]
    6ad2:	7bd3      	ldrb	r3, [r2, #15]
    6ad4:	3b01      	subs	r3, #1
    6ad6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ad8:	480b      	ldr	r0, [pc, #44]	; (6b08 <k_sched_lock+0xb8>)
    6ada:	f7ff fbe3 	bl	62a4 <z_spin_unlock_valid>
    6ade:	b968      	cbnz	r0, 6afc <k_sched_lock+0xac>
    6ae0:	4a0a      	ldr	r2, [pc, #40]	; (6b0c <k_sched_lock+0xbc>)
    6ae2:	4913      	ldr	r1, [pc, #76]	; (6b30 <k_sched_lock+0xe0>)
    6ae4:	480b      	ldr	r0, [pc, #44]	; (6b14 <k_sched_lock+0xc4>)
    6ae6:	23b9      	movs	r3, #185	; 0xb9
    6ae8:	f002 f8c3 	bl	8c72 <assert_print>
    6aec:	4906      	ldr	r1, [pc, #24]	; (6b08 <k_sched_lock+0xb8>)
    6aee:	4811      	ldr	r0, [pc, #68]	; (6b34 <k_sched_lock+0xe4>)
    6af0:	f002 f8bf 	bl	8c72 <assert_print>
    6af4:	4805      	ldr	r0, [pc, #20]	; (6b0c <k_sched_lock+0xbc>)
    6af6:	21b9      	movs	r1, #185	; 0xb9
    6af8:	f002 f8b4 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    6afc:	f385 8811 	msr	BASEPRI, r5
    6b00:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6b04:	bd38      	pop	{r3, r4, r5, pc}
    6b06:	bf00      	nop
    6b08:	20000c64 	.word	0x20000c64
    6b0c:	00009f8a 	.word	0x00009f8a
    6b10:	00009fe3 	.word	0x00009fe3
    6b14:	00009bef 	.word	0x00009bef
    6b18:	00009ff8 	.word	0x00009ff8
    6b1c:	0000b2fa 	.word	0x0000b2fa
    6b20:	0000b405 	.word	0x0000b405
    6b24:	0000b430 	.word	0x0000b430
    6b28:	20000c30 	.word	0x20000c30
    6b2c:	0000b433 	.word	0x0000b433
    6b30:	00009fb7 	.word	0x00009fb7
    6b34:	00009fce 	.word	0x00009fce

00006b38 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b38:	4b0c      	ldr	r3, [pc, #48]	; (6b6c <z_priq_dumb_remove+0x34>)
    6b3a:	4299      	cmp	r1, r3
{
    6b3c:	b510      	push	{r4, lr}
    6b3e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b40:	d10b      	bne.n	6b5a <z_priq_dumb_remove+0x22>
    6b42:	490b      	ldr	r1, [pc, #44]	; (6b70 <z_priq_dumb_remove+0x38>)
    6b44:	480b      	ldr	r0, [pc, #44]	; (6b74 <z_priq_dumb_remove+0x3c>)
    6b46:	4a0c      	ldr	r2, [pc, #48]	; (6b78 <z_priq_dumb_remove+0x40>)
    6b48:	f240 433d 	movw	r3, #1085	; 0x43d
    6b4c:	f002 f891 	bl	8c72 <assert_print>
    6b50:	4809      	ldr	r0, [pc, #36]	; (6b78 <z_priq_dumb_remove+0x40>)
    6b52:	f240 413d 	movw	r1, #1085	; 0x43d
    6b56:	f002 f885 	bl	8c64 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    6b5a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    6b5e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6b60:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6b62:	2300      	movs	r3, #0
	node->prev = NULL;
    6b64:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6b68:	bd10      	pop	{r4, pc}
    6b6a:	bf00      	nop
    6b6c:	20000400 	.word	0x20000400
    6b70:	0000b4f4 	.word	0x0000b4f4
    6b74:	00009bef 	.word	0x00009bef
    6b78:	0000b4d2 	.word	0x0000b4d2

00006b7c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    6b7c:	6883      	ldr	r3, [r0, #8]
{
    6b7e:	b510      	push	{r4, lr}
    6b80:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6b82:	b95b      	cbnz	r3, 6b9c <unpend_thread_no_timeout+0x20>
    6b84:	490b      	ldr	r1, [pc, #44]	; (6bb4 <unpend_thread_no_timeout+0x38>)
    6b86:	480c      	ldr	r0, [pc, #48]	; (6bb8 <unpend_thread_no_timeout+0x3c>)
    6b88:	4a0c      	ldr	r2, [pc, #48]	; (6bbc <unpend_thread_no_timeout+0x40>)
    6b8a:	f240 23b9 	movw	r3, #697	; 0x2b9
    6b8e:	f002 f870 	bl	8c72 <assert_print>
    6b92:	480a      	ldr	r0, [pc, #40]	; (6bbc <unpend_thread_no_timeout+0x40>)
    6b94:	f240 21b9 	movw	r1, #697	; 0x2b9
    6b98:	f002 f864 	bl	8c64 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6b9c:	68a0      	ldr	r0, [r4, #8]
    6b9e:	4621      	mov	r1, r4
    6ba0:	f7ff ffca 	bl	6b38 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6ba4:	7b63      	ldrb	r3, [r4, #13]
    6ba6:	f023 0302 	bic.w	r3, r3, #2
    6baa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6bac:	2300      	movs	r3, #0
    6bae:	60a3      	str	r3, [r4, #8]
}
    6bb0:	bd10      	pop	{r4, pc}
    6bb2:	bf00      	nop
    6bb4:	0000b515 	.word	0x0000b515
    6bb8:	00009bef 	.word	0x00009bef
    6bbc:	0000b4d2 	.word	0x0000b4d2

00006bc0 <update_cache>:
{
    6bc0:	b538      	push	{r3, r4, r5, lr}
    6bc2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    6bc4:	4814      	ldr	r0, [pc, #80]	; (6c18 <update_cache+0x58>)
    6bc6:	4d15      	ldr	r5, [pc, #84]	; (6c1c <update_cache+0x5c>)
    6bc8:	f002 fca3 	bl	9512 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6bcc:	4604      	mov	r4, r0
    6bce:	b900      	cbnz	r0, 6bd2 <update_cache+0x12>
    6bd0:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    6bd2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6bd4:	b9b2      	cbnz	r2, 6c04 <update_cache+0x44>
	__ASSERT(_current != NULL, "");
    6bd6:	b963      	cbnz	r3, 6bf2 <update_cache+0x32>
    6bd8:	4911      	ldr	r1, [pc, #68]	; (6c20 <update_cache+0x60>)
    6bda:	4a12      	ldr	r2, [pc, #72]	; (6c24 <update_cache+0x64>)
    6bdc:	4812      	ldr	r0, [pc, #72]	; (6c28 <update_cache+0x68>)
    6bde:	2389      	movs	r3, #137	; 0x89
    6be0:	f002 f847 	bl	8c72 <assert_print>
    6be4:	4811      	ldr	r0, [pc, #68]	; (6c2c <update_cache+0x6c>)
    6be6:	f002 f844 	bl	8c72 <assert_print>
    6bea:	480e      	ldr	r0, [pc, #56]	; (6c24 <update_cache+0x64>)
    6bec:	2189      	movs	r1, #137	; 0x89
    6bee:	f002 f839 	bl	8c64 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6bf2:	68ab      	ldr	r3, [r5, #8]
    6bf4:	7b5a      	ldrb	r2, [r3, #13]
    6bf6:	06d2      	lsls	r2, r2, #27
    6bf8:	d104      	bne.n	6c04 <update_cache+0x44>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6bfa:	69a2      	ldr	r2, [r4, #24]
    6bfc:	b912      	cbnz	r2, 6c04 <update_cache+0x44>
	if (is_preempt(_current) || is_metairq(thread)) {
    6bfe:	89da      	ldrh	r2, [r3, #14]
    6c00:	2a7f      	cmp	r2, #127	; 0x7f
    6c02:	d806      	bhi.n	6c12 <update_cache+0x52>
		if (thread != _current) {
    6c04:	68ab      	ldr	r3, [r5, #8]
    6c06:	42a3      	cmp	r3, r4
    6c08:	d002      	beq.n	6c10 <update_cache+0x50>
			z_reset_time_slice(thread);
    6c0a:	4620      	mov	r0, r4
    6c0c:	f7ff fe1a 	bl	6844 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6c10:	4623      	mov	r3, r4
    6c12:	61eb      	str	r3, [r5, #28]
}
    6c14:	bd38      	pop	{r3, r4, r5, pc}
    6c16:	bf00      	nop
    6c18:	20000c50 	.word	0x20000c50
    6c1c:	20000c30 	.word	0x20000c30
    6c20:	0000b52c 	.word	0x0000b52c
    6c24:	0000b4d2 	.word	0x0000b4d2
    6c28:	00009bef 	.word	0x00009bef
    6c2c:	0000b430 	.word	0x0000b430

00006c30 <move_thread_to_end_of_prio_q>:
{
    6c30:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6c32:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    6c36:	7b43      	ldrb	r3, [r0, #13]
    6c38:	2a00      	cmp	r2, #0
{
    6c3a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6c3c:	da06      	bge.n	6c4c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c42:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c44:	4601      	mov	r1, r0
    6c46:	481d      	ldr	r0, [pc, #116]	; (6cbc <move_thread_to_end_of_prio_q+0x8c>)
    6c48:	f7ff ff76 	bl	6b38 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6c4c:	7b63      	ldrb	r3, [r4, #13]
    6c4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c52:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6c54:	4b1a      	ldr	r3, [pc, #104]	; (6cc0 <move_thread_to_end_of_prio_q+0x90>)
    6c56:	429c      	cmp	r4, r3
    6c58:	d109      	bne.n	6c6e <move_thread_to_end_of_prio_q+0x3e>
    6c5a:	491a      	ldr	r1, [pc, #104]	; (6cc4 <move_thread_to_end_of_prio_q+0x94>)
    6c5c:	481a      	ldr	r0, [pc, #104]	; (6cc8 <move_thread_to_end_of_prio_q+0x98>)
    6c5e:	4a1b      	ldr	r2, [pc, #108]	; (6ccc <move_thread_to_end_of_prio_q+0x9c>)
    6c60:	23ba      	movs	r3, #186	; 0xba
    6c62:	f002 f806 	bl	8c72 <assert_print>
    6c66:	4819      	ldr	r0, [pc, #100]	; (6ccc <move_thread_to_end_of_prio_q+0x9c>)
    6c68:	21ba      	movs	r1, #186	; 0xba
    6c6a:	f001 fffb 	bl	8c64 <assert_post_action>
	return list->head == list;
    6c6e:	4a18      	ldr	r2, [pc, #96]	; (6cd0 <move_thread_to_end_of_prio_q+0xa0>)
	return (node == list->tail) ? NULL : node->next;
    6c70:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c74:	f102 0020 	add.w	r0, r2, #32
    6c78:	4283      	cmp	r3, r0
    6c7a:	d01a      	beq.n	6cb2 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c7c:	b1cb      	cbz	r3, 6cb2 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
    6c7e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6c82:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6c86:	42b5      	cmp	r5, r6
    6c88:	d00e      	beq.n	6ca8 <move_thread_to_end_of_prio_q+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c8a:	42ae      	cmp	r6, r5
    6c8c:	dd0c      	ble.n	6ca8 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
    6c8e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6c90:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6c94:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6c96:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6c98:	6890      	ldr	r0, [r2, #8]
    6c9a:	1b03      	subs	r3, r0, r4
    6c9c:	4258      	negs	r0, r3
}
    6c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6ca2:	4158      	adcs	r0, r3
    6ca4:	f7ff bf8c 	b.w	6bc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6ca8:	428b      	cmp	r3, r1
    6caa:	d002      	beq.n	6cb2 <move_thread_to_end_of_prio_q+0x82>
    6cac:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d1e7      	bne.n	6c82 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    6cb2:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6cb6:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6cb8:	6254      	str	r4, [r2, #36]	; 0x24
}
    6cba:	e7ed      	b.n	6c98 <move_thread_to_end_of_prio_q+0x68>
    6cbc:	20000c50 	.word	0x20000c50
    6cc0:	20000400 	.word	0x20000400
    6cc4:	0000b4f4 	.word	0x0000b4f4
    6cc8:	00009bef 	.word	0x00009bef
    6ccc:	0000b4d2 	.word	0x0000b4d2
    6cd0:	20000c30 	.word	0x20000c30

00006cd4 <z_time_slice>:
{
    6cd4:	b570      	push	{r4, r5, r6, lr}
    6cd6:	4605      	mov	r5, r0
	__asm__ volatile(
    6cd8:	f04f 0340 	mov.w	r3, #64	; 0x40
    6cdc:	f3ef 8611 	mrs	r6, BASEPRI
    6ce0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ce8:	482a      	ldr	r0, [pc, #168]	; (6d94 <z_time_slice+0xc0>)
    6cea:	f7ff facd 	bl	6288 <z_spin_lock_valid>
    6cee:	b968      	cbnz	r0, 6d0c <z_time_slice+0x38>
    6cf0:	4a29      	ldr	r2, [pc, #164]	; (6d98 <z_time_slice+0xc4>)
    6cf2:	492a      	ldr	r1, [pc, #168]	; (6d9c <z_time_slice+0xc8>)
    6cf4:	482a      	ldr	r0, [pc, #168]	; (6da0 <z_time_slice+0xcc>)
    6cf6:	238e      	movs	r3, #142	; 0x8e
    6cf8:	f001 ffbb 	bl	8c72 <assert_print>
    6cfc:	4925      	ldr	r1, [pc, #148]	; (6d94 <z_time_slice+0xc0>)
    6cfe:	4829      	ldr	r0, [pc, #164]	; (6da4 <z_time_slice+0xd0>)
    6d00:	f001 ffb7 	bl	8c72 <assert_print>
    6d04:	4824      	ldr	r0, [pc, #144]	; (6d98 <z_time_slice+0xc4>)
    6d06:	218e      	movs	r1, #142	; 0x8e
    6d08:	f001 ffac 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d0c:	4821      	ldr	r0, [pc, #132]	; (6d94 <z_time_slice+0xc0>)
    6d0e:	f7ff fad9 	bl	62c4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6d12:	4b25      	ldr	r3, [pc, #148]	; (6da8 <z_time_slice+0xd4>)
    6d14:	4a25      	ldr	r2, [pc, #148]	; (6dac <z_time_slice+0xd8>)
    6d16:	689c      	ldr	r4, [r3, #8]
    6d18:	6811      	ldr	r1, [r2, #0]
    6d1a:	428c      	cmp	r4, r1
    6d1c:	d119      	bne.n	6d52 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    6d1e:	4620      	mov	r0, r4
    6d20:	f7ff fd90 	bl	6844 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d24:	481b      	ldr	r0, [pc, #108]	; (6d94 <z_time_slice+0xc0>)
    6d26:	f7ff fabd 	bl	62a4 <z_spin_unlock_valid>
    6d2a:	b968      	cbnz	r0, 6d48 <z_time_slice+0x74>
    6d2c:	4a1a      	ldr	r2, [pc, #104]	; (6d98 <z_time_slice+0xc4>)
    6d2e:	4920      	ldr	r1, [pc, #128]	; (6db0 <z_time_slice+0xdc>)
    6d30:	481b      	ldr	r0, [pc, #108]	; (6da0 <z_time_slice+0xcc>)
    6d32:	23b9      	movs	r3, #185	; 0xb9
    6d34:	f001 ff9d 	bl	8c72 <assert_print>
    6d38:	4916      	ldr	r1, [pc, #88]	; (6d94 <z_time_slice+0xc0>)
    6d3a:	481e      	ldr	r0, [pc, #120]	; (6db4 <z_time_slice+0xe0>)
    6d3c:	f001 ff99 	bl	8c72 <assert_print>
    6d40:	4815      	ldr	r0, [pc, #84]	; (6d98 <z_time_slice+0xc4>)
    6d42:	21b9      	movs	r1, #185	; 0xb9
    6d44:	f001 ff8e 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    6d48:	f386 8811 	msr	BASEPRI, r6
    6d4c:	f3bf 8f6f 	isb	sy
}
    6d50:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6d52:	2100      	movs	r1, #0
    6d54:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    6d56:	4a18      	ldr	r2, [pc, #96]	; (6db8 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    6d58:	6812      	ldr	r2, [r2, #0]
    6d5a:	b1c2      	cbz	r2, 6d8e <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    6d5c:	89e2      	ldrh	r2, [r4, #14]
    6d5e:	2a7f      	cmp	r2, #127	; 0x7f
    6d60:	d815      	bhi.n	6d8e <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    6d62:	7b62      	ldrb	r2, [r4, #13]
    6d64:	06d2      	lsls	r2, r2, #27
    6d66:	d112      	bne.n	6d8e <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6d68:	4a14      	ldr	r2, [pc, #80]	; (6dbc <z_time_slice+0xe8>)
    6d6a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6d6e:	6812      	ldr	r2, [r2, #0]
    6d70:	4291      	cmp	r1, r2
    6d72:	db0c      	blt.n	6d8e <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    6d74:	4a12      	ldr	r2, [pc, #72]	; (6dc0 <z_time_slice+0xec>)
    6d76:	4294      	cmp	r4, r2
    6d78:	d009      	beq.n	6d8e <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    6d7a:	691a      	ldr	r2, [r3, #16]
    6d7c:	42aa      	cmp	r2, r5
    6d7e:	dc03      	bgt.n	6d88 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    6d80:	4620      	mov	r0, r4
    6d82:	f7ff ff55 	bl	6c30 <move_thread_to_end_of_prio_q>
    6d86:	e7ca      	b.n	6d1e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    6d88:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    6d8a:	611a      	str	r2, [r3, #16]
    6d8c:	e7ca      	b.n	6d24 <z_time_slice+0x50>
    6d8e:	2200      	movs	r2, #0
    6d90:	e7fb      	b.n	6d8a <z_time_slice+0xb6>
    6d92:	bf00      	nop
    6d94:	20000c64 	.word	0x20000c64
    6d98:	00009f8a 	.word	0x00009f8a
    6d9c:	00009fe3 	.word	0x00009fe3
    6da0:	00009bef 	.word	0x00009bef
    6da4:	00009ff8 	.word	0x00009ff8
    6da8:	20000c30 	.word	0x20000c30
    6dac:	20000c60 	.word	0x20000c60
    6db0:	00009fb7 	.word	0x00009fb7
    6db4:	00009fce 	.word	0x00009fce
    6db8:	20000c6c 	.word	0x20000c6c
    6dbc:	20000c68 	.word	0x20000c68
    6dc0:	20000400 	.word	0x20000400

00006dc4 <ready_thread>:
{
    6dc4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6dc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6dca:	7b43      	ldrb	r3, [r0, #13]
    6dcc:	2a00      	cmp	r2, #0
{
    6dce:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6dd0:	db38      	blt.n	6e44 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6dd2:	06da      	lsls	r2, r3, #27
    6dd4:	d136      	bne.n	6e44 <ready_thread+0x80>
    6dd6:	6982      	ldr	r2, [r0, #24]
    6dd8:	2a00      	cmp	r2, #0
    6dda:	d133      	bne.n	6e44 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    6ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6de0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6de2:	4b19      	ldr	r3, [pc, #100]	; (6e48 <ready_thread+0x84>)
    6de4:	4298      	cmp	r0, r3
    6de6:	d109      	bne.n	6dfc <ready_thread+0x38>
    6de8:	4918      	ldr	r1, [pc, #96]	; (6e4c <ready_thread+0x88>)
    6dea:	4819      	ldr	r0, [pc, #100]	; (6e50 <ready_thread+0x8c>)
    6dec:	4a19      	ldr	r2, [pc, #100]	; (6e54 <ready_thread+0x90>)
    6dee:	23ba      	movs	r3, #186	; 0xba
    6df0:	f001 ff3f 	bl	8c72 <assert_print>
    6df4:	4817      	ldr	r0, [pc, #92]	; (6e54 <ready_thread+0x90>)
    6df6:	21ba      	movs	r1, #186	; 0xba
    6df8:	f001 ff34 	bl	8c64 <assert_post_action>
	return list->head == list;
    6dfc:	4a16      	ldr	r2, [pc, #88]	; (6e58 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    6dfe:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e02:	f102 0020 	add.w	r0, r2, #32
    6e06:	4283      	cmp	r3, r0
    6e08:	d017      	beq.n	6e3a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e0a:	b1b3      	cbz	r3, 6e3a <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
    6e0c:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6e10:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6e14:	42b5      	cmp	r5, r6
    6e16:	d00b      	beq.n	6e30 <ready_thread+0x6c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e18:	42ae      	cmp	r6, r5
    6e1a:	dd09      	ble.n	6e30 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
    6e1c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6e1e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6e22:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6e24:	605c      	str	r4, [r3, #4]
}
    6e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    6e2a:	2000      	movs	r0, #0
    6e2c:	f7ff bec8 	b.w	6bc0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6e30:	4299      	cmp	r1, r3
    6e32:	d002      	beq.n	6e3a <ready_thread+0x76>
    6e34:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e36:	2b00      	cmp	r3, #0
    6e38:	d1ea      	bne.n	6e10 <ready_thread+0x4c>
	node->prev = tail;
    6e3a:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6e3e:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6e40:	6254      	str	r4, [r2, #36]	; 0x24
}
    6e42:	e7f0      	b.n	6e26 <ready_thread+0x62>
}
    6e44:	bd70      	pop	{r4, r5, r6, pc}
    6e46:	bf00      	nop
    6e48:	20000400 	.word	0x20000400
    6e4c:	0000b4f4 	.word	0x0000b4f4
    6e50:	00009bef 	.word	0x00009bef
    6e54:	0000b4d2 	.word	0x0000b4d2
    6e58:	20000c30 	.word	0x20000c30

00006e5c <z_ready_thread>:
{
    6e5c:	b538      	push	{r3, r4, r5, lr}
    6e5e:	4604      	mov	r4, r0
	__asm__ volatile(
    6e60:	f04f 0340 	mov.w	r3, #64	; 0x40
    6e64:	f3ef 8511 	mrs	r5, BASEPRI
    6e68:	f383 8812 	msr	BASEPRI_MAX, r3
    6e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e70:	4817      	ldr	r0, [pc, #92]	; (6ed0 <z_ready_thread+0x74>)
    6e72:	f7ff fa09 	bl	6288 <z_spin_lock_valid>
    6e76:	b968      	cbnz	r0, 6e94 <z_ready_thread+0x38>
    6e78:	4a16      	ldr	r2, [pc, #88]	; (6ed4 <z_ready_thread+0x78>)
    6e7a:	4917      	ldr	r1, [pc, #92]	; (6ed8 <z_ready_thread+0x7c>)
    6e7c:	4817      	ldr	r0, [pc, #92]	; (6edc <z_ready_thread+0x80>)
    6e7e:	238e      	movs	r3, #142	; 0x8e
    6e80:	f001 fef7 	bl	8c72 <assert_print>
    6e84:	4912      	ldr	r1, [pc, #72]	; (6ed0 <z_ready_thread+0x74>)
    6e86:	4816      	ldr	r0, [pc, #88]	; (6ee0 <z_ready_thread+0x84>)
    6e88:	f001 fef3 	bl	8c72 <assert_print>
    6e8c:	4811      	ldr	r0, [pc, #68]	; (6ed4 <z_ready_thread+0x78>)
    6e8e:	218e      	movs	r1, #142	; 0x8e
    6e90:	f001 fee8 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e94:	480e      	ldr	r0, [pc, #56]	; (6ed0 <z_ready_thread+0x74>)
    6e96:	f7ff fa15 	bl	62c4 <z_spin_lock_set_owner>
			ready_thread(thread);
    6e9a:	4620      	mov	r0, r4
    6e9c:	f7ff ff92 	bl	6dc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ea0:	480b      	ldr	r0, [pc, #44]	; (6ed0 <z_ready_thread+0x74>)
    6ea2:	f7ff f9ff 	bl	62a4 <z_spin_unlock_valid>
    6ea6:	b968      	cbnz	r0, 6ec4 <z_ready_thread+0x68>
    6ea8:	4a0a      	ldr	r2, [pc, #40]	; (6ed4 <z_ready_thread+0x78>)
    6eaa:	490e      	ldr	r1, [pc, #56]	; (6ee4 <z_ready_thread+0x88>)
    6eac:	480b      	ldr	r0, [pc, #44]	; (6edc <z_ready_thread+0x80>)
    6eae:	23b9      	movs	r3, #185	; 0xb9
    6eb0:	f001 fedf 	bl	8c72 <assert_print>
    6eb4:	4906      	ldr	r1, [pc, #24]	; (6ed0 <z_ready_thread+0x74>)
    6eb6:	480c      	ldr	r0, [pc, #48]	; (6ee8 <z_ready_thread+0x8c>)
    6eb8:	f001 fedb 	bl	8c72 <assert_print>
    6ebc:	4805      	ldr	r0, [pc, #20]	; (6ed4 <z_ready_thread+0x78>)
    6ebe:	21b9      	movs	r1, #185	; 0xb9
    6ec0:	f001 fed0 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    6ec4:	f385 8811 	msr	BASEPRI, r5
    6ec8:	f3bf 8f6f 	isb	sy
}
    6ecc:	bd38      	pop	{r3, r4, r5, pc}
    6ece:	bf00      	nop
    6ed0:	20000c64 	.word	0x20000c64
    6ed4:	00009f8a 	.word	0x00009f8a
    6ed8:	00009fe3 	.word	0x00009fe3
    6edc:	00009bef 	.word	0x00009bef
    6ee0:	00009ff8 	.word	0x00009ff8
    6ee4:	00009fb7 	.word	0x00009fb7
    6ee8:	00009fce 	.word	0x00009fce

00006eec <z_sched_start>:
{
    6eec:	b538      	push	{r3, r4, r5, lr}
    6eee:	4604      	mov	r4, r0
	__asm__ volatile(
    6ef0:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ef4:	f3ef 8511 	mrs	r5, BASEPRI
    6ef8:	f383 8812 	msr	BASEPRI_MAX, r3
    6efc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f00:	481d      	ldr	r0, [pc, #116]	; (6f78 <z_sched_start+0x8c>)
    6f02:	f7ff f9c1 	bl	6288 <z_spin_lock_valid>
    6f06:	b968      	cbnz	r0, 6f24 <z_sched_start+0x38>
    6f08:	4a1c      	ldr	r2, [pc, #112]	; (6f7c <z_sched_start+0x90>)
    6f0a:	491d      	ldr	r1, [pc, #116]	; (6f80 <z_sched_start+0x94>)
    6f0c:	481d      	ldr	r0, [pc, #116]	; (6f84 <z_sched_start+0x98>)
    6f0e:	238e      	movs	r3, #142	; 0x8e
    6f10:	f001 feaf 	bl	8c72 <assert_print>
    6f14:	4918      	ldr	r1, [pc, #96]	; (6f78 <z_sched_start+0x8c>)
    6f16:	481c      	ldr	r0, [pc, #112]	; (6f88 <z_sched_start+0x9c>)
    6f18:	f001 feab 	bl	8c72 <assert_print>
    6f1c:	4817      	ldr	r0, [pc, #92]	; (6f7c <z_sched_start+0x90>)
    6f1e:	218e      	movs	r1, #142	; 0x8e
    6f20:	f001 fea0 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f24:	4814      	ldr	r0, [pc, #80]	; (6f78 <z_sched_start+0x8c>)
    6f26:	f7ff f9cd 	bl	62c4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6f2a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    6f2c:	075a      	lsls	r2, r3, #29
    6f2e:	d416      	bmi.n	6f5e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f30:	4811      	ldr	r0, [pc, #68]	; (6f78 <z_sched_start+0x8c>)
    6f32:	f7ff f9b7 	bl	62a4 <z_spin_unlock_valid>
    6f36:	b968      	cbnz	r0, 6f54 <z_sched_start+0x68>
    6f38:	4a10      	ldr	r2, [pc, #64]	; (6f7c <z_sched_start+0x90>)
    6f3a:	4914      	ldr	r1, [pc, #80]	; (6f8c <z_sched_start+0xa0>)
    6f3c:	4811      	ldr	r0, [pc, #68]	; (6f84 <z_sched_start+0x98>)
    6f3e:	23b9      	movs	r3, #185	; 0xb9
    6f40:	f001 fe97 	bl	8c72 <assert_print>
    6f44:	490c      	ldr	r1, [pc, #48]	; (6f78 <z_sched_start+0x8c>)
    6f46:	4812      	ldr	r0, [pc, #72]	; (6f90 <z_sched_start+0xa4>)
    6f48:	f001 fe93 	bl	8c72 <assert_print>
    6f4c:	480b      	ldr	r0, [pc, #44]	; (6f7c <z_sched_start+0x90>)
    6f4e:	21b9      	movs	r1, #185	; 0xb9
    6f50:	f001 fe88 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    6f54:	f385 8811 	msr	BASEPRI, r5
    6f58:	f3bf 8f6f 	isb	sy
}
    6f5c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6f5e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6f62:	4620      	mov	r0, r4
    6f64:	7363      	strb	r3, [r4, #13]
    6f66:	f7ff ff2d 	bl	6dc4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6f6a:	4629      	mov	r1, r5
    6f6c:	4802      	ldr	r0, [pc, #8]	; (6f78 <z_sched_start+0x8c>)
}
    6f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6f72:	f7ff bd29 	b.w	69c8 <z_reschedule>
    6f76:	bf00      	nop
    6f78:	20000c64 	.word	0x20000c64
    6f7c:	00009f8a 	.word	0x00009f8a
    6f80:	00009fe3 	.word	0x00009fe3
    6f84:	00009bef 	.word	0x00009bef
    6f88:	00009ff8 	.word	0x00009ff8
    6f8c:	00009fb7 	.word	0x00009fb7
    6f90:	00009fce 	.word	0x00009fce

00006f94 <z_thread_timeout>:
{
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4604      	mov	r4, r0
	__asm__ volatile(
    6f98:	f04f 0340 	mov.w	r3, #64	; 0x40
    6f9c:	f3ef 8611 	mrs	r6, BASEPRI
    6fa0:	f383 8812 	msr	BASEPRI_MAX, r3
    6fa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fa8:	4820      	ldr	r0, [pc, #128]	; (702c <z_thread_timeout+0x98>)
    6faa:	f7ff f96d 	bl	6288 <z_spin_lock_valid>
    6fae:	b968      	cbnz	r0, 6fcc <z_thread_timeout+0x38>
    6fb0:	4a1f      	ldr	r2, [pc, #124]	; (7030 <z_thread_timeout+0x9c>)
    6fb2:	4920      	ldr	r1, [pc, #128]	; (7034 <z_thread_timeout+0xa0>)
    6fb4:	4820      	ldr	r0, [pc, #128]	; (7038 <z_thread_timeout+0xa4>)
    6fb6:	238e      	movs	r3, #142	; 0x8e
    6fb8:	f001 fe5b 	bl	8c72 <assert_print>
    6fbc:	491b      	ldr	r1, [pc, #108]	; (702c <z_thread_timeout+0x98>)
    6fbe:	481f      	ldr	r0, [pc, #124]	; (703c <z_thread_timeout+0xa8>)
    6fc0:	f001 fe57 	bl	8c72 <assert_print>
    6fc4:	481a      	ldr	r0, [pc, #104]	; (7030 <z_thread_timeout+0x9c>)
    6fc6:	218e      	movs	r1, #142	; 0x8e
    6fc8:	f001 fe4c 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fcc:	4817      	ldr	r0, [pc, #92]	; (702c <z_thread_timeout+0x98>)
    6fce:	f7ff f979 	bl	62c4 <z_spin_lock_set_owner>
		if (!killed) {
    6fd2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6fd6:	f013 0f28 	tst.w	r3, #40	; 0x28
    6fda:	d110      	bne.n	6ffe <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6fdc:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6fe0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6fe4:	b113      	cbz	r3, 6fec <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6fe6:	4628      	mov	r0, r5
    6fe8:	f7ff fdc8 	bl	6b7c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6fec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6ff0:	f023 0314 	bic.w	r3, r3, #20
    6ff4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6ff8:	4628      	mov	r0, r5
    6ffa:	f7ff fee3 	bl	6dc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ffe:	480b      	ldr	r0, [pc, #44]	; (702c <z_thread_timeout+0x98>)
    7000:	f7ff f950 	bl	62a4 <z_spin_unlock_valid>
    7004:	b968      	cbnz	r0, 7022 <z_thread_timeout+0x8e>
    7006:	4a0a      	ldr	r2, [pc, #40]	; (7030 <z_thread_timeout+0x9c>)
    7008:	490d      	ldr	r1, [pc, #52]	; (7040 <z_thread_timeout+0xac>)
    700a:	480b      	ldr	r0, [pc, #44]	; (7038 <z_thread_timeout+0xa4>)
    700c:	23b9      	movs	r3, #185	; 0xb9
    700e:	f001 fe30 	bl	8c72 <assert_print>
    7012:	4906      	ldr	r1, [pc, #24]	; (702c <z_thread_timeout+0x98>)
    7014:	480b      	ldr	r0, [pc, #44]	; (7044 <z_thread_timeout+0xb0>)
    7016:	f001 fe2c 	bl	8c72 <assert_print>
    701a:	4805      	ldr	r0, [pc, #20]	; (7030 <z_thread_timeout+0x9c>)
    701c:	21b9      	movs	r1, #185	; 0xb9
    701e:	f001 fe21 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7022:	f386 8811 	msr	BASEPRI, r6
    7026:	f3bf 8f6f 	isb	sy
}
    702a:	bd70      	pop	{r4, r5, r6, pc}
    702c:	20000c64 	.word	0x20000c64
    7030:	00009f8a 	.word	0x00009f8a
    7034:	00009fe3 	.word	0x00009fe3
    7038:	00009bef 	.word	0x00009bef
    703c:	00009ff8 	.word	0x00009ff8
    7040:	00009fb7 	.word	0x00009fb7
    7044:	00009fce 	.word	0x00009fce

00007048 <unready_thread>:
{
    7048:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    704a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    704e:	7b43      	ldrb	r3, [r0, #13]
    7050:	2a00      	cmp	r2, #0
{
    7052:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7054:	da06      	bge.n	7064 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    705a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    705c:	4601      	mov	r1, r0
    705e:	4806      	ldr	r0, [pc, #24]	; (7078 <unready_thread+0x30>)
    7060:	f7ff fd6a 	bl	6b38 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7064:	4b05      	ldr	r3, [pc, #20]	; (707c <unready_thread+0x34>)
    7066:	6898      	ldr	r0, [r3, #8]
    7068:	1b03      	subs	r3, r0, r4
    706a:	4258      	negs	r0, r3
}
    706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7070:	4158      	adcs	r0, r3
    7072:	f7ff bda5 	b.w	6bc0 <update_cache>
    7076:	bf00      	nop
    7078:	20000c50 	.word	0x20000c50
    707c:	20000c30 	.word	0x20000c30

00007080 <add_to_waitq_locked>:
{
    7080:	b538      	push	{r3, r4, r5, lr}
    7082:	4604      	mov	r4, r0
    7084:	460d      	mov	r5, r1
	unready_thread(thread);
    7086:	f7ff ffdf 	bl	7048 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    708a:	7b63      	ldrb	r3, [r4, #13]
    708c:	f043 0302 	orr.w	r3, r3, #2
    7090:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7092:	b1f5      	cbz	r5, 70d2 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7094:	4b15      	ldr	r3, [pc, #84]	; (70ec <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    7096:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7098:	429c      	cmp	r4, r3
    709a:	d109      	bne.n	70b0 <add_to_waitq_locked+0x30>
    709c:	4914      	ldr	r1, [pc, #80]	; (70f0 <add_to_waitq_locked+0x70>)
    709e:	4815      	ldr	r0, [pc, #84]	; (70f4 <add_to_waitq_locked+0x74>)
    70a0:	4a15      	ldr	r2, [pc, #84]	; (70f8 <add_to_waitq_locked+0x78>)
    70a2:	23ba      	movs	r3, #186	; 0xba
    70a4:	f001 fde5 	bl	8c72 <assert_print>
    70a8:	4813      	ldr	r0, [pc, #76]	; (70f8 <add_to_waitq_locked+0x78>)
    70aa:	21ba      	movs	r1, #186	; 0xba
    70ac:	f001 fdda 	bl	8c64 <assert_post_action>
	return list->head == list;
    70b0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70b2:	429d      	cmp	r5, r3
    70b4:	d014      	beq.n	70e0 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70b6:	b19b      	cbz	r3, 70e0 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
    70b8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    70bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    70c0:	428a      	cmp	r2, r1
    70c2:	d007      	beq.n	70d4 <add_to_waitq_locked+0x54>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70c4:	4291      	cmp	r1, r2
    70c6:	dd05      	ble.n	70d4 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
    70c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    70ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    70ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    70d0:	605c      	str	r4, [r3, #4]
}
    70d2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    70d4:	6869      	ldr	r1, [r5, #4]
    70d6:	428b      	cmp	r3, r1
    70d8:	d002      	beq.n	70e0 <add_to_waitq_locked+0x60>
    70da:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70dc:	2b00      	cmp	r3, #0
    70de:	d1ed      	bne.n	70bc <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    70e0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    70e2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    70e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    70e8:	606c      	str	r4, [r5, #4]
}
    70ea:	e7f2      	b.n	70d2 <add_to_waitq_locked+0x52>
    70ec:	20000400 	.word	0x20000400
    70f0:	0000b4f4 	.word	0x0000b4f4
    70f4:	00009bef 	.word	0x00009bef
    70f8:	0000b4d2 	.word	0x0000b4d2

000070fc <pend>:
{
    70fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7100:	4604      	mov	r4, r0
    7102:	4688      	mov	r8, r1
    7104:	4616      	mov	r6, r2
    7106:	461d      	mov	r5, r3
	__asm__ volatile(
    7108:	f04f 0340 	mov.w	r3, #64	; 0x40
    710c:	f3ef 8711 	mrs	r7, BASEPRI
    7110:	f383 8812 	msr	BASEPRI_MAX, r3
    7114:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7118:	481f      	ldr	r0, [pc, #124]	; (7198 <pend+0x9c>)
    711a:	f7ff f8b5 	bl	6288 <z_spin_lock_valid>
    711e:	b968      	cbnz	r0, 713c <pend+0x40>
    7120:	4a1e      	ldr	r2, [pc, #120]	; (719c <pend+0xa0>)
    7122:	491f      	ldr	r1, [pc, #124]	; (71a0 <pend+0xa4>)
    7124:	481f      	ldr	r0, [pc, #124]	; (71a4 <pend+0xa8>)
    7126:	238e      	movs	r3, #142	; 0x8e
    7128:	f001 fda3 	bl	8c72 <assert_print>
    712c:	491a      	ldr	r1, [pc, #104]	; (7198 <pend+0x9c>)
    712e:	481e      	ldr	r0, [pc, #120]	; (71a8 <pend+0xac>)
    7130:	f001 fd9f 	bl	8c72 <assert_print>
    7134:	4819      	ldr	r0, [pc, #100]	; (719c <pend+0xa0>)
    7136:	218e      	movs	r1, #142	; 0x8e
    7138:	f001 fd94 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    713c:	4816      	ldr	r0, [pc, #88]	; (7198 <pend+0x9c>)
    713e:	f7ff f8c1 	bl	62c4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    7142:	4620      	mov	r0, r4
    7144:	4641      	mov	r1, r8
    7146:	f7ff ff9b 	bl	7080 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    714a:	4813      	ldr	r0, [pc, #76]	; (7198 <pend+0x9c>)
    714c:	f7ff f8aa 	bl	62a4 <z_spin_unlock_valid>
    7150:	b968      	cbnz	r0, 716e <pend+0x72>
    7152:	4a12      	ldr	r2, [pc, #72]	; (719c <pend+0xa0>)
    7154:	4915      	ldr	r1, [pc, #84]	; (71ac <pend+0xb0>)
    7156:	4813      	ldr	r0, [pc, #76]	; (71a4 <pend+0xa8>)
    7158:	23b9      	movs	r3, #185	; 0xb9
    715a:	f001 fd8a 	bl	8c72 <assert_print>
    715e:	490e      	ldr	r1, [pc, #56]	; (7198 <pend+0x9c>)
    7160:	4813      	ldr	r0, [pc, #76]	; (71b0 <pend+0xb4>)
    7162:	f001 fd86 	bl	8c72 <assert_print>
    7166:	480d      	ldr	r0, [pc, #52]	; (719c <pend+0xa0>)
    7168:	21b9      	movs	r1, #185	; 0xb9
    716a:	f001 fd7b 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    716e:	f387 8811 	msr	BASEPRI, r7
    7172:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7176:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    717a:	bf08      	it	eq
    717c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7180:	d008      	beq.n	7194 <pend+0x98>
    7182:	4632      	mov	r2, r6
    7184:	462b      	mov	r3, r5
    7186:	f104 0018 	add.w	r0, r4, #24
    718a:	490a      	ldr	r1, [pc, #40]	; (71b4 <pend+0xb8>)
}
    718c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7190:	f000 bd02 	b.w	7b98 <z_add_timeout>
    7194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7198:	20000c64 	.word	0x20000c64
    719c:	00009f8a 	.word	0x00009f8a
    71a0:	00009fe3 	.word	0x00009fe3
    71a4:	00009bef 	.word	0x00009bef
    71a8:	00009ff8 	.word	0x00009ff8
    71ac:	00009fb7 	.word	0x00009fb7
    71b0:	00009fce 	.word	0x00009fce
    71b4:	00006f95 	.word	0x00006f95

000071b8 <z_pend_curr>:
{
    71b8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    71ba:	4b11      	ldr	r3, [pc, #68]	; (7200 <z_pend_curr+0x48>)
{
    71bc:	4604      	mov	r4, r0
	pending_current = _current;
    71be:	6898      	ldr	r0, [r3, #8]
    71c0:	4b10      	ldr	r3, [pc, #64]	; (7204 <z_pend_curr+0x4c>)
{
    71c2:	460d      	mov	r5, r1
	pending_current = _current;
    71c4:	6018      	str	r0, [r3, #0]
{
    71c6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    71c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    71cc:	f7ff ff96 	bl	70fc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71d0:	4620      	mov	r0, r4
    71d2:	f7ff f867 	bl	62a4 <z_spin_unlock_valid>
    71d6:	b968      	cbnz	r0, 71f4 <z_pend_curr+0x3c>
    71d8:	4a0b      	ldr	r2, [pc, #44]	; (7208 <z_pend_curr+0x50>)
    71da:	490c      	ldr	r1, [pc, #48]	; (720c <z_pend_curr+0x54>)
    71dc:	480c      	ldr	r0, [pc, #48]	; (7210 <z_pend_curr+0x58>)
    71de:	23d0      	movs	r3, #208	; 0xd0
    71e0:	f001 fd47 	bl	8c72 <assert_print>
    71e4:	480b      	ldr	r0, [pc, #44]	; (7214 <z_pend_curr+0x5c>)
    71e6:	4621      	mov	r1, r4
    71e8:	f001 fd43 	bl	8c72 <assert_print>
    71ec:	4806      	ldr	r0, [pc, #24]	; (7208 <z_pend_curr+0x50>)
    71ee:	21d0      	movs	r1, #208	; 0xd0
    71f0:	f001 fd38 	bl	8c64 <assert_post_action>
    71f4:	4628      	mov	r0, r5
}
    71f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    71fa:	f7fb bc99 	b.w	2b30 <arch_swap>
    71fe:	bf00      	nop
    7200:	20000c30 	.word	0x20000c30
    7204:	20000c60 	.word	0x20000c60
    7208:	00009f8a 	.word	0x00009f8a
    720c:	00009fb7 	.word	0x00009fb7
    7210:	00009bef 	.word	0x00009bef
    7214:	00009fce 	.word	0x00009fce

00007218 <z_set_prio>:
{
    7218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    721a:	4604      	mov	r4, r0
    721c:	460d      	mov	r5, r1
	__asm__ volatile(
    721e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7222:	f3ef 8611 	mrs	r6, BASEPRI
    7226:	f383 8812 	msr	BASEPRI_MAX, r3
    722a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    722e:	4839      	ldr	r0, [pc, #228]	; (7314 <z_set_prio+0xfc>)
    7230:	f7ff f82a 	bl	6288 <z_spin_lock_valid>
    7234:	b968      	cbnz	r0, 7252 <z_set_prio+0x3a>
    7236:	4a38      	ldr	r2, [pc, #224]	; (7318 <z_set_prio+0x100>)
    7238:	4938      	ldr	r1, [pc, #224]	; (731c <z_set_prio+0x104>)
    723a:	4839      	ldr	r0, [pc, #228]	; (7320 <z_set_prio+0x108>)
    723c:	238e      	movs	r3, #142	; 0x8e
    723e:	f001 fd18 	bl	8c72 <assert_print>
    7242:	4934      	ldr	r1, [pc, #208]	; (7314 <z_set_prio+0xfc>)
    7244:	4837      	ldr	r0, [pc, #220]	; (7324 <z_set_prio+0x10c>)
    7246:	f001 fd14 	bl	8c72 <assert_print>
    724a:	4833      	ldr	r0, [pc, #204]	; (7318 <z_set_prio+0x100>)
    724c:	218e      	movs	r1, #142	; 0x8e
    724e:	f001 fd09 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7252:	4830      	ldr	r0, [pc, #192]	; (7314 <z_set_prio+0xfc>)
    7254:	f7ff f836 	bl	62c4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    7258:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    725a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    725c:	b26d      	sxtb	r5, r5
    725e:	d156      	bne.n	730e <z_set_prio+0xf6>
		if (need_sched) {
    7260:	69a2      	ldr	r2, [r4, #24]
    7262:	2a00      	cmp	r2, #0
    7264:	d153      	bne.n	730e <z_set_prio+0xf6>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    726a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    726c:	482e      	ldr	r0, [pc, #184]	; (7328 <z_set_prio+0x110>)
    726e:	4621      	mov	r1, r4
    7270:	f7ff fc62 	bl	6b38 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7274:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    7276:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7278:	f063 037f 	orn	r3, r3, #127	; 0x7f
    727c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    727e:	4b2b      	ldr	r3, [pc, #172]	; (732c <z_set_prio+0x114>)
    7280:	429c      	cmp	r4, r3
    7282:	d109      	bne.n	7298 <z_set_prio+0x80>
    7284:	492a      	ldr	r1, [pc, #168]	; (7330 <z_set_prio+0x118>)
    7286:	4826      	ldr	r0, [pc, #152]	; (7320 <z_set_prio+0x108>)
    7288:	4a2a      	ldr	r2, [pc, #168]	; (7334 <z_set_prio+0x11c>)
    728a:	23ba      	movs	r3, #186	; 0xba
    728c:	f001 fcf1 	bl	8c72 <assert_print>
    7290:	4828      	ldr	r0, [pc, #160]	; (7334 <z_set_prio+0x11c>)
    7292:	21ba      	movs	r1, #186	; 0xba
    7294:	f001 fce6 	bl	8c64 <assert_post_action>
	return list->head == list;
    7298:	4a27      	ldr	r2, [pc, #156]	; (7338 <z_set_prio+0x120>)
	return (node == list->tail) ? NULL : node->next;
    729a:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    729e:	f102 0020 	add.w	r0, r2, #32
    72a2:	4283      	cmp	r3, r0
    72a4:	d02e      	beq.n	7304 <z_set_prio+0xec>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    72a6:	b36b      	cbz	r3, 7304 <z_set_prio+0xec>
	int32_t b1 = thread_1->base.prio;
    72a8:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    72ac:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    72b0:	42bd      	cmp	r5, r7
    72b2:	d022      	beq.n	72fa <z_set_prio+0xe2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    72b4:	42af      	cmp	r7, r5
    72b6:	dd20      	ble.n	72fa <z_set_prio+0xe2>
	sys_dnode_t *const prev = successor->prev;
    72b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    72ba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    72be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    72c0:	605c      	str	r4, [r3, #4]
			update_cache(1);
    72c2:	2001      	movs	r0, #1
    72c4:	f7ff fc7c 	bl	6bc0 <update_cache>
    72c8:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72ca:	4812      	ldr	r0, [pc, #72]	; (7314 <z_set_prio+0xfc>)
    72cc:	f7fe ffea 	bl	62a4 <z_spin_unlock_valid>
    72d0:	b968      	cbnz	r0, 72ee <z_set_prio+0xd6>
    72d2:	4a11      	ldr	r2, [pc, #68]	; (7318 <z_set_prio+0x100>)
    72d4:	4919      	ldr	r1, [pc, #100]	; (733c <z_set_prio+0x124>)
    72d6:	4812      	ldr	r0, [pc, #72]	; (7320 <z_set_prio+0x108>)
    72d8:	23b9      	movs	r3, #185	; 0xb9
    72da:	f001 fcca 	bl	8c72 <assert_print>
    72de:	490d      	ldr	r1, [pc, #52]	; (7314 <z_set_prio+0xfc>)
    72e0:	4817      	ldr	r0, [pc, #92]	; (7340 <z_set_prio+0x128>)
    72e2:	f001 fcc6 	bl	8c72 <assert_print>
    72e6:	480c      	ldr	r0, [pc, #48]	; (7318 <z_set_prio+0x100>)
    72e8:	21b9      	movs	r1, #185	; 0xb9
    72ea:	f001 fcbb 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    72ee:	f386 8811 	msr	BASEPRI, r6
    72f2:	f3bf 8f6f 	isb	sy
}
    72f6:	4620      	mov	r0, r4
    72f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    72fa:	428b      	cmp	r3, r1
    72fc:	d002      	beq.n	7304 <z_set_prio+0xec>
    72fe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7300:	2b00      	cmp	r3, #0
    7302:	d1d3      	bne.n	72ac <z_set_prio+0x94>
	node->prev = tail;
    7304:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    7308:	600c      	str	r4, [r1, #0]
	list->tail = node;
    730a:	6254      	str	r4, [r2, #36]	; 0x24
}
    730c:	e7d9      	b.n	72c2 <z_set_prio+0xaa>
			thread->base.prio = prio;
    730e:	73a5      	strb	r5, [r4, #14]
    7310:	2400      	movs	r4, #0
    7312:	e7da      	b.n	72ca <z_set_prio+0xb2>
    7314:	20000c64 	.word	0x20000c64
    7318:	00009f8a 	.word	0x00009f8a
    731c:	00009fe3 	.word	0x00009fe3
    7320:	00009bef 	.word	0x00009bef
    7324:	00009ff8 	.word	0x00009ff8
    7328:	20000c50 	.word	0x20000c50
    732c:	20000400 	.word	0x20000400
    7330:	0000b4f4 	.word	0x0000b4f4
    7334:	0000b4d2 	.word	0x0000b4d2
    7338:	20000c30 	.word	0x20000c30
    733c:	00009fb7 	.word	0x00009fb7
    7340:	00009fce 	.word	0x00009fce

00007344 <z_impl_k_thread_suspend>:
{
    7344:	b570      	push	{r4, r5, r6, lr}
    7346:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7348:	3018      	adds	r0, #24
    734a:	f000 fced 	bl	7d28 <z_abort_timeout>
	__asm__ volatile(
    734e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7352:	f3ef 8611 	mrs	r6, BASEPRI
    7356:	f383 8812 	msr	BASEPRI_MAX, r3
    735a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    735e:	4825      	ldr	r0, [pc, #148]	; (73f4 <z_impl_k_thread_suspend+0xb0>)
    7360:	f7fe ff92 	bl	6288 <z_spin_lock_valid>
    7364:	b968      	cbnz	r0, 7382 <z_impl_k_thread_suspend+0x3e>
    7366:	4a24      	ldr	r2, [pc, #144]	; (73f8 <z_impl_k_thread_suspend+0xb4>)
    7368:	4924      	ldr	r1, [pc, #144]	; (73fc <z_impl_k_thread_suspend+0xb8>)
    736a:	4825      	ldr	r0, [pc, #148]	; (7400 <z_impl_k_thread_suspend+0xbc>)
    736c:	238e      	movs	r3, #142	; 0x8e
    736e:	f001 fc80 	bl	8c72 <assert_print>
    7372:	4920      	ldr	r1, [pc, #128]	; (73f4 <z_impl_k_thread_suspend+0xb0>)
    7374:	4823      	ldr	r0, [pc, #140]	; (7404 <z_impl_k_thread_suspend+0xc0>)
    7376:	f001 fc7c 	bl	8c72 <assert_print>
    737a:	481f      	ldr	r0, [pc, #124]	; (73f8 <z_impl_k_thread_suspend+0xb4>)
    737c:	218e      	movs	r1, #142	; 0x8e
    737e:	f001 fc71 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7382:	481c      	ldr	r0, [pc, #112]	; (73f4 <z_impl_k_thread_suspend+0xb0>)
    7384:	f7fe ff9e 	bl	62c4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7388:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    738c:	7b63      	ldrb	r3, [r4, #13]
    738e:	2a00      	cmp	r2, #0
    7390:	da06      	bge.n	73a0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7396:	481c      	ldr	r0, [pc, #112]	; (7408 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7398:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    739a:	4621      	mov	r1, r4
    739c:	f7ff fbcc 	bl	6b38 <z_priq_dumb_remove>
		update_cache(thread == _current);
    73a0:	4d1a      	ldr	r5, [pc, #104]	; (740c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    73a2:	7b63      	ldrb	r3, [r4, #13]
    73a4:	68a8      	ldr	r0, [r5, #8]
    73a6:	f043 0310 	orr.w	r3, r3, #16
    73aa:	7363      	strb	r3, [r4, #13]
    73ac:	1b03      	subs	r3, r0, r4
    73ae:	4258      	negs	r0, r3
    73b0:	4158      	adcs	r0, r3
    73b2:	f7ff fc05 	bl	6bc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73b6:	480f      	ldr	r0, [pc, #60]	; (73f4 <z_impl_k_thread_suspend+0xb0>)
    73b8:	f7fe ff74 	bl	62a4 <z_spin_unlock_valid>
    73bc:	b968      	cbnz	r0, 73da <z_impl_k_thread_suspend+0x96>
    73be:	4a0e      	ldr	r2, [pc, #56]	; (73f8 <z_impl_k_thread_suspend+0xb4>)
    73c0:	4913      	ldr	r1, [pc, #76]	; (7410 <z_impl_k_thread_suspend+0xcc>)
    73c2:	480f      	ldr	r0, [pc, #60]	; (7400 <z_impl_k_thread_suspend+0xbc>)
    73c4:	23b9      	movs	r3, #185	; 0xb9
    73c6:	f001 fc54 	bl	8c72 <assert_print>
    73ca:	490a      	ldr	r1, [pc, #40]	; (73f4 <z_impl_k_thread_suspend+0xb0>)
    73cc:	4811      	ldr	r0, [pc, #68]	; (7414 <z_impl_k_thread_suspend+0xd0>)
    73ce:	f001 fc50 	bl	8c72 <assert_print>
    73d2:	4809      	ldr	r0, [pc, #36]	; (73f8 <z_impl_k_thread_suspend+0xb4>)
    73d4:	21b9      	movs	r1, #185	; 0xb9
    73d6:	f001 fc45 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    73da:	f386 8811 	msr	BASEPRI, r6
    73de:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    73e2:	68ab      	ldr	r3, [r5, #8]
    73e4:	42a3      	cmp	r3, r4
    73e6:	d103      	bne.n	73f0 <z_impl_k_thread_suspend+0xac>
}
    73e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    73ec:	f002 b887 	b.w	94fe <z_reschedule_unlocked>
}
    73f0:	bd70      	pop	{r4, r5, r6, pc}
    73f2:	bf00      	nop
    73f4:	20000c64 	.word	0x20000c64
    73f8:	00009f8a 	.word	0x00009f8a
    73fc:	00009fe3 	.word	0x00009fe3
    7400:	00009bef 	.word	0x00009bef
    7404:	00009ff8 	.word	0x00009ff8
    7408:	20000c50 	.word	0x20000c50
    740c:	20000c30 	.word	0x20000c30
    7410:	00009fb7 	.word	0x00009fb7
    7414:	00009fce 	.word	0x00009fce

00007418 <k_sched_unlock>:
{
    7418:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    741a:	f04f 0340 	mov.w	r3, #64	; 0x40
    741e:	f3ef 8511 	mrs	r5, BASEPRI
    7422:	f383 8812 	msr	BASEPRI_MAX, r3
    7426:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    742a:	482d      	ldr	r0, [pc, #180]	; (74e0 <k_sched_unlock+0xc8>)
    742c:	f7fe ff2c 	bl	6288 <z_spin_lock_valid>
    7430:	b968      	cbnz	r0, 744e <k_sched_unlock+0x36>
    7432:	4a2c      	ldr	r2, [pc, #176]	; (74e4 <k_sched_unlock+0xcc>)
    7434:	492c      	ldr	r1, [pc, #176]	; (74e8 <k_sched_unlock+0xd0>)
    7436:	482d      	ldr	r0, [pc, #180]	; (74ec <k_sched_unlock+0xd4>)
    7438:	238e      	movs	r3, #142	; 0x8e
    743a:	f001 fc1a 	bl	8c72 <assert_print>
    743e:	4928      	ldr	r1, [pc, #160]	; (74e0 <k_sched_unlock+0xc8>)
    7440:	482b      	ldr	r0, [pc, #172]	; (74f0 <k_sched_unlock+0xd8>)
    7442:	f001 fc16 	bl	8c72 <assert_print>
    7446:	4827      	ldr	r0, [pc, #156]	; (74e4 <k_sched_unlock+0xcc>)
    7448:	218e      	movs	r1, #142	; 0x8e
    744a:	f001 fc0b 	bl	8c64 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    744e:	4c29      	ldr	r4, [pc, #164]	; (74f4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7450:	4823      	ldr	r0, [pc, #140]	; (74e0 <k_sched_unlock+0xc8>)
    7452:	f7fe ff37 	bl	62c4 <z_spin_lock_set_owner>
    7456:	68a3      	ldr	r3, [r4, #8]
    7458:	7bdb      	ldrb	r3, [r3, #15]
    745a:	b973      	cbnz	r3, 747a <k_sched_unlock+0x62>
    745c:	4926      	ldr	r1, [pc, #152]	; (74f8 <k_sched_unlock+0xe0>)
    745e:	4a27      	ldr	r2, [pc, #156]	; (74fc <k_sched_unlock+0xe4>)
    7460:	4822      	ldr	r0, [pc, #136]	; (74ec <k_sched_unlock+0xd4>)
    7462:	f240 33bb 	movw	r3, #955	; 0x3bb
    7466:	f001 fc04 	bl	8c72 <assert_print>
    746a:	4825      	ldr	r0, [pc, #148]	; (7500 <k_sched_unlock+0xe8>)
    746c:	f001 fc01 	bl	8c72 <assert_print>
    7470:	4822      	ldr	r0, [pc, #136]	; (74fc <k_sched_unlock+0xe4>)
    7472:	f240 31bb 	movw	r1, #955	; 0x3bb
    7476:	f001 fbf5 	bl	8c64 <assert_post_action>
    747a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    747e:	b173      	cbz	r3, 749e <k_sched_unlock+0x86>
    7480:	4920      	ldr	r1, [pc, #128]	; (7504 <k_sched_unlock+0xec>)
    7482:	4a1e      	ldr	r2, [pc, #120]	; (74fc <k_sched_unlock+0xe4>)
    7484:	4819      	ldr	r0, [pc, #100]	; (74ec <k_sched_unlock+0xd4>)
    7486:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    748a:	f001 fbf2 	bl	8c72 <assert_print>
    748e:	481c      	ldr	r0, [pc, #112]	; (7500 <k_sched_unlock+0xe8>)
    7490:	f001 fbef 	bl	8c72 <assert_print>
    7494:	4819      	ldr	r0, [pc, #100]	; (74fc <k_sched_unlock+0xe4>)
    7496:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    749a:	f001 fbe3 	bl	8c64 <assert_post_action>
		++_current->base.sched_locked;
    749e:	68a2      	ldr	r2, [r4, #8]
    74a0:	7bd3      	ldrb	r3, [r2, #15]
    74a2:	3301      	adds	r3, #1
		update_cache(0);
    74a4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    74a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    74a8:	f7ff fb8a 	bl	6bc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74ac:	480c      	ldr	r0, [pc, #48]	; (74e0 <k_sched_unlock+0xc8>)
    74ae:	f7fe fef9 	bl	62a4 <z_spin_unlock_valid>
    74b2:	b968      	cbnz	r0, 74d0 <k_sched_unlock+0xb8>
    74b4:	4a0b      	ldr	r2, [pc, #44]	; (74e4 <k_sched_unlock+0xcc>)
    74b6:	4914      	ldr	r1, [pc, #80]	; (7508 <k_sched_unlock+0xf0>)
    74b8:	480c      	ldr	r0, [pc, #48]	; (74ec <k_sched_unlock+0xd4>)
    74ba:	23b9      	movs	r3, #185	; 0xb9
    74bc:	f001 fbd9 	bl	8c72 <assert_print>
    74c0:	4907      	ldr	r1, [pc, #28]	; (74e0 <k_sched_unlock+0xc8>)
    74c2:	4812      	ldr	r0, [pc, #72]	; (750c <k_sched_unlock+0xf4>)
    74c4:	f001 fbd5 	bl	8c72 <assert_print>
    74c8:	4806      	ldr	r0, [pc, #24]	; (74e4 <k_sched_unlock+0xcc>)
    74ca:	21b9      	movs	r1, #185	; 0xb9
    74cc:	f001 fbca 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    74d0:	f385 8811 	msr	BASEPRI, r5
    74d4:	f3bf 8f6f 	isb	sy
}
    74d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    74dc:	f002 b80f 	b.w	94fe <z_reschedule_unlocked>
    74e0:	20000c64 	.word	0x20000c64
    74e4:	00009f8a 	.word	0x00009f8a
    74e8:	00009fe3 	.word	0x00009fe3
    74ec:	00009bef 	.word	0x00009bef
    74f0:	00009ff8 	.word	0x00009ff8
    74f4:	20000c30 	.word	0x20000c30
    74f8:	0000b553 	.word	0x0000b553
    74fc:	0000b4d2 	.word	0x0000b4d2
    7500:	0000b430 	.word	0x0000b430
    7504:	0000b2fa 	.word	0x0000b2fa
    7508:	00009fb7 	.word	0x00009fb7
    750c:	00009fce 	.word	0x00009fce

00007510 <z_unpend1_no_timeout>:
{
    7510:	b538      	push	{r3, r4, r5, lr}
    7512:	4604      	mov	r4, r0
	__asm__ volatile(
    7514:	f04f 0340 	mov.w	r3, #64	; 0x40
    7518:	f3ef 8511 	mrs	r5, BASEPRI
    751c:	f383 8812 	msr	BASEPRI_MAX, r3
    7520:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7524:	4819      	ldr	r0, [pc, #100]	; (758c <z_unpend1_no_timeout+0x7c>)
    7526:	f7fe feaf 	bl	6288 <z_spin_lock_valid>
    752a:	b968      	cbnz	r0, 7548 <z_unpend1_no_timeout+0x38>
    752c:	4a18      	ldr	r2, [pc, #96]	; (7590 <z_unpend1_no_timeout+0x80>)
    752e:	4919      	ldr	r1, [pc, #100]	; (7594 <z_unpend1_no_timeout+0x84>)
    7530:	4819      	ldr	r0, [pc, #100]	; (7598 <z_unpend1_no_timeout+0x88>)
    7532:	238e      	movs	r3, #142	; 0x8e
    7534:	f001 fb9d 	bl	8c72 <assert_print>
    7538:	4914      	ldr	r1, [pc, #80]	; (758c <z_unpend1_no_timeout+0x7c>)
    753a:	4818      	ldr	r0, [pc, #96]	; (759c <z_unpend1_no_timeout+0x8c>)
    753c:	f001 fb99 	bl	8c72 <assert_print>
    7540:	4813      	ldr	r0, [pc, #76]	; (7590 <z_unpend1_no_timeout+0x80>)
    7542:	218e      	movs	r1, #142	; 0x8e
    7544:	f001 fb8e 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7548:	4810      	ldr	r0, [pc, #64]	; (758c <z_unpend1_no_timeout+0x7c>)
    754a:	f7fe febb 	bl	62c4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    754e:	4620      	mov	r0, r4
    7550:	f001 ffdf 	bl	9512 <z_priq_dumb_best>
		if (thread != NULL) {
    7554:	4604      	mov	r4, r0
    7556:	b108      	cbz	r0, 755c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7558:	f7ff fb10 	bl	6b7c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    755c:	480b      	ldr	r0, [pc, #44]	; (758c <z_unpend1_no_timeout+0x7c>)
    755e:	f7fe fea1 	bl	62a4 <z_spin_unlock_valid>
    7562:	b968      	cbnz	r0, 7580 <z_unpend1_no_timeout+0x70>
    7564:	4a0a      	ldr	r2, [pc, #40]	; (7590 <z_unpend1_no_timeout+0x80>)
    7566:	490e      	ldr	r1, [pc, #56]	; (75a0 <z_unpend1_no_timeout+0x90>)
    7568:	480b      	ldr	r0, [pc, #44]	; (7598 <z_unpend1_no_timeout+0x88>)
    756a:	23b9      	movs	r3, #185	; 0xb9
    756c:	f001 fb81 	bl	8c72 <assert_print>
    7570:	4906      	ldr	r1, [pc, #24]	; (758c <z_unpend1_no_timeout+0x7c>)
    7572:	480c      	ldr	r0, [pc, #48]	; (75a4 <z_unpend1_no_timeout+0x94>)
    7574:	f001 fb7d 	bl	8c72 <assert_print>
    7578:	4805      	ldr	r0, [pc, #20]	; (7590 <z_unpend1_no_timeout+0x80>)
    757a:	21b9      	movs	r1, #185	; 0xb9
    757c:	f001 fb72 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7580:	f385 8811 	msr	BASEPRI, r5
    7584:	f3bf 8f6f 	isb	sy
}
    7588:	4620      	mov	r0, r4
    758a:	bd38      	pop	{r3, r4, r5, pc}
    758c:	20000c64 	.word	0x20000c64
    7590:	00009f8a 	.word	0x00009f8a
    7594:	00009fe3 	.word	0x00009fe3
    7598:	00009bef 	.word	0x00009bef
    759c:	00009ff8 	.word	0x00009ff8
    75a0:	00009fb7 	.word	0x00009fb7
    75a4:	00009fce 	.word	0x00009fce

000075a8 <z_unpend_first_thread>:
{
    75a8:	b538      	push	{r3, r4, r5, lr}
    75aa:	4604      	mov	r4, r0
	__asm__ volatile(
    75ac:	f04f 0340 	mov.w	r3, #64	; 0x40
    75b0:	f3ef 8511 	mrs	r5, BASEPRI
    75b4:	f383 8812 	msr	BASEPRI_MAX, r3
    75b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75bc:	481b      	ldr	r0, [pc, #108]	; (762c <z_unpend_first_thread+0x84>)
    75be:	f7fe fe63 	bl	6288 <z_spin_lock_valid>
    75c2:	b968      	cbnz	r0, 75e0 <z_unpend_first_thread+0x38>
    75c4:	4a1a      	ldr	r2, [pc, #104]	; (7630 <z_unpend_first_thread+0x88>)
    75c6:	491b      	ldr	r1, [pc, #108]	; (7634 <z_unpend_first_thread+0x8c>)
    75c8:	481b      	ldr	r0, [pc, #108]	; (7638 <z_unpend_first_thread+0x90>)
    75ca:	238e      	movs	r3, #142	; 0x8e
    75cc:	f001 fb51 	bl	8c72 <assert_print>
    75d0:	4916      	ldr	r1, [pc, #88]	; (762c <z_unpend_first_thread+0x84>)
    75d2:	481a      	ldr	r0, [pc, #104]	; (763c <z_unpend_first_thread+0x94>)
    75d4:	f001 fb4d 	bl	8c72 <assert_print>
    75d8:	4815      	ldr	r0, [pc, #84]	; (7630 <z_unpend_first_thread+0x88>)
    75da:	218e      	movs	r1, #142	; 0x8e
    75dc:	f001 fb42 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    75e0:	4812      	ldr	r0, [pc, #72]	; (762c <z_unpend_first_thread+0x84>)
    75e2:	f7fe fe6f 	bl	62c4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    75e6:	4620      	mov	r0, r4
    75e8:	f001 ff93 	bl	9512 <z_priq_dumb_best>
		if (thread != NULL) {
    75ec:	4604      	mov	r4, r0
    75ee:	b128      	cbz	r0, 75fc <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    75f0:	f7ff fac4 	bl	6b7c <unpend_thread_no_timeout>
    75f4:	f104 0018 	add.w	r0, r4, #24
    75f8:	f000 fb96 	bl	7d28 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75fc:	480b      	ldr	r0, [pc, #44]	; (762c <z_unpend_first_thread+0x84>)
    75fe:	f7fe fe51 	bl	62a4 <z_spin_unlock_valid>
    7602:	b968      	cbnz	r0, 7620 <z_unpend_first_thread+0x78>
    7604:	4a0a      	ldr	r2, [pc, #40]	; (7630 <z_unpend_first_thread+0x88>)
    7606:	490e      	ldr	r1, [pc, #56]	; (7640 <z_unpend_first_thread+0x98>)
    7608:	480b      	ldr	r0, [pc, #44]	; (7638 <z_unpend_first_thread+0x90>)
    760a:	23b9      	movs	r3, #185	; 0xb9
    760c:	f001 fb31 	bl	8c72 <assert_print>
    7610:	4906      	ldr	r1, [pc, #24]	; (762c <z_unpend_first_thread+0x84>)
    7612:	480c      	ldr	r0, [pc, #48]	; (7644 <z_unpend_first_thread+0x9c>)
    7614:	f001 fb2d 	bl	8c72 <assert_print>
    7618:	4805      	ldr	r0, [pc, #20]	; (7630 <z_unpend_first_thread+0x88>)
    761a:	21b9      	movs	r1, #185	; 0xb9
    761c:	f001 fb22 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7620:	f385 8811 	msr	BASEPRI, r5
    7624:	f3bf 8f6f 	isb	sy
}
    7628:	4620      	mov	r0, r4
    762a:	bd38      	pop	{r3, r4, r5, pc}
    762c:	20000c64 	.word	0x20000c64
    7630:	00009f8a 	.word	0x00009f8a
    7634:	00009fe3 	.word	0x00009fe3
    7638:	00009bef 	.word	0x00009bef
    763c:	00009ff8 	.word	0x00009ff8
    7640:	00009fb7 	.word	0x00009fb7
    7644:	00009fce 	.word	0x00009fce

00007648 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7648:	4b04      	ldr	r3, [pc, #16]	; (765c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    764a:	2100      	movs	r1, #0
    764c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7650:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7654:	4608      	mov	r0, r1
    7656:	f7ff b909 	b.w	686c <k_sched_time_slice_set>
    765a:	bf00      	nop
    765c:	20000c30 	.word	0x20000c30

00007660 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7662:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7666:	b173      	cbz	r3, 7686 <z_impl_k_yield+0x26>
    7668:	493f      	ldr	r1, [pc, #252]	; (7768 <z_impl_k_yield+0x108>)
    766a:	4a40      	ldr	r2, [pc, #256]	; (776c <z_impl_k_yield+0x10c>)
    766c:	4840      	ldr	r0, [pc, #256]	; (7770 <z_impl_k_yield+0x110>)
    766e:	f240 5332 	movw	r3, #1330	; 0x532
    7672:	f001 fafe 	bl	8c72 <assert_print>
    7676:	483f      	ldr	r0, [pc, #252]	; (7774 <z_impl_k_yield+0x114>)
    7678:	f001 fafb 	bl	8c72 <assert_print>
    767c:	483b      	ldr	r0, [pc, #236]	; (776c <z_impl_k_yield+0x10c>)
    767e:	f240 5132 	movw	r1, #1330	; 0x532
    7682:	f001 faef 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7686:	f04f 0340 	mov.w	r3, #64	; 0x40
    768a:	f3ef 8611 	mrs	r6, BASEPRI
    768e:	f383 8812 	msr	BASEPRI_MAX, r3
    7692:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7696:	4838      	ldr	r0, [pc, #224]	; (7778 <z_impl_k_yield+0x118>)
    7698:	f7fe fdf6 	bl	6288 <z_spin_lock_valid>
    769c:	b968      	cbnz	r0, 76ba <z_impl_k_yield+0x5a>
    769e:	4a37      	ldr	r2, [pc, #220]	; (777c <z_impl_k_yield+0x11c>)
    76a0:	4937      	ldr	r1, [pc, #220]	; (7780 <z_impl_k_yield+0x120>)
    76a2:	4833      	ldr	r0, [pc, #204]	; (7770 <z_impl_k_yield+0x110>)
    76a4:	238e      	movs	r3, #142	; 0x8e
    76a6:	f001 fae4 	bl	8c72 <assert_print>
    76aa:	4933      	ldr	r1, [pc, #204]	; (7778 <z_impl_k_yield+0x118>)
    76ac:	4835      	ldr	r0, [pc, #212]	; (7784 <z_impl_k_yield+0x124>)
    76ae:	f001 fae0 	bl	8c72 <assert_print>
    76b2:	4832      	ldr	r0, [pc, #200]	; (777c <z_impl_k_yield+0x11c>)
    76b4:	218e      	movs	r1, #142	; 0x8e
    76b6:	f001 fad5 	bl	8c64 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    76ba:	4d33      	ldr	r5, [pc, #204]	; (7788 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    76bc:	482e      	ldr	r0, [pc, #184]	; (7778 <z_impl_k_yield+0x118>)
    76be:	f7fe fe01 	bl	62c4 <z_spin_lock_set_owner>
    76c2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76c4:	7b4b      	ldrb	r3, [r1, #13]
    76c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    76ca:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    76cc:	f105 0020 	add.w	r0, r5, #32
    76d0:	f7ff fa32 	bl	6b38 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    76d4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    76d6:	7b63      	ldrb	r3, [r4, #13]
    76d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76dc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    76de:	4b2b      	ldr	r3, [pc, #172]	; (778c <z_impl_k_yield+0x12c>)
    76e0:	429c      	cmp	r4, r3
    76e2:	d109      	bne.n	76f8 <z_impl_k_yield+0x98>
    76e4:	492a      	ldr	r1, [pc, #168]	; (7790 <z_impl_k_yield+0x130>)
    76e6:	4822      	ldr	r0, [pc, #136]	; (7770 <z_impl_k_yield+0x110>)
    76e8:	4a20      	ldr	r2, [pc, #128]	; (776c <z_impl_k_yield+0x10c>)
    76ea:	23ba      	movs	r3, #186	; 0xba
    76ec:	f001 fac1 	bl	8c72 <assert_print>
    76f0:	481e      	ldr	r0, [pc, #120]	; (776c <z_impl_k_yield+0x10c>)
    76f2:	21ba      	movs	r1, #186	; 0xba
    76f4:	f001 fab6 	bl	8c64 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    76f8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76fc:	4925      	ldr	r1, [pc, #148]	; (7794 <z_impl_k_yield+0x134>)
    76fe:	428b      	cmp	r3, r1
    7700:	d02c      	beq.n	775c <z_impl_k_yield+0xfc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7702:	b35b      	cbz	r3, 775c <z_impl_k_yield+0xfc>
	int32_t b1 = thread_1->base.prio;
    7704:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7708:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    770c:	42b8      	cmp	r0, r7
    770e:	d020      	beq.n	7752 <z_impl_k_yield+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7710:	4287      	cmp	r7, r0
    7712:	dd1e      	ble.n	7752 <z_impl_k_yield+0xf2>
	sys_dnode_t *const prev = successor->prev;
    7714:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7716:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    771a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    771c:	605c      	str	r4, [r3, #4]
	update_cache(1);
    771e:	2001      	movs	r0, #1
    7720:	f7ff fa4e 	bl	6bc0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7724:	4814      	ldr	r0, [pc, #80]	; (7778 <z_impl_k_yield+0x118>)
    7726:	f7fe fdbd 	bl	62a4 <z_spin_unlock_valid>
    772a:	b968      	cbnz	r0, 7748 <z_impl_k_yield+0xe8>
    772c:	4a13      	ldr	r2, [pc, #76]	; (777c <z_impl_k_yield+0x11c>)
    772e:	491a      	ldr	r1, [pc, #104]	; (7798 <z_impl_k_yield+0x138>)
    7730:	480f      	ldr	r0, [pc, #60]	; (7770 <z_impl_k_yield+0x110>)
    7732:	23d0      	movs	r3, #208	; 0xd0
    7734:	f001 fa9d 	bl	8c72 <assert_print>
    7738:	490f      	ldr	r1, [pc, #60]	; (7778 <z_impl_k_yield+0x118>)
    773a:	4818      	ldr	r0, [pc, #96]	; (779c <z_impl_k_yield+0x13c>)
    773c:	f001 fa99 	bl	8c72 <assert_print>
    7740:	480e      	ldr	r0, [pc, #56]	; (777c <z_impl_k_yield+0x11c>)
    7742:	21d0      	movs	r1, #208	; 0xd0
    7744:	f001 fa8e 	bl	8c64 <assert_post_action>
    7748:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    774a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    774e:	f7fb b9ef 	b.w	2b30 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7752:	4293      	cmp	r3, r2
    7754:	d002      	beq.n	775c <z_impl_k_yield+0xfc>
    7756:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7758:	2b00      	cmp	r3, #0
    775a:	d1d5      	bne.n	7708 <z_impl_k_yield+0xa8>
	node->prev = tail;
    775c:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    7760:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7762:	626c      	str	r4, [r5, #36]	; 0x24
}
    7764:	e7db      	b.n	771e <z_impl_k_yield+0xbe>
    7766:	bf00      	nop
    7768:	0000b2fa 	.word	0x0000b2fa
    776c:	0000b4d2 	.word	0x0000b4d2
    7770:	00009bef 	.word	0x00009bef
    7774:	0000b430 	.word	0x0000b430
    7778:	20000c64 	.word	0x20000c64
    777c:	00009f8a 	.word	0x00009f8a
    7780:	00009fe3 	.word	0x00009fe3
    7784:	00009ff8 	.word	0x00009ff8
    7788:	20000c30 	.word	0x20000c30
    778c:	20000400 	.word	0x20000400
    7790:	0000b4f4 	.word	0x0000b4f4
    7794:	20000c50 	.word	0x20000c50
    7798:	00009fb7 	.word	0x00009fb7
    779c:	00009fce 	.word	0x00009fce

000077a0 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    77a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77a4:	4605      	mov	r5, r0
    77a6:	460e      	mov	r6, r1
    77a8:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    77ac:	b173      	cbz	r3, 77cc <z_tick_sleep+0x2c>
    77ae:	4941      	ldr	r1, [pc, #260]	; (78b4 <z_tick_sleep+0x114>)
    77b0:	4a41      	ldr	r2, [pc, #260]	; (78b8 <z_tick_sleep+0x118>)
    77b2:	4842      	ldr	r0, [pc, #264]	; (78bc <z_tick_sleep+0x11c>)
    77b4:	f240 534e 	movw	r3, #1358	; 0x54e
    77b8:	f001 fa5b 	bl	8c72 <assert_print>
    77bc:	4840      	ldr	r0, [pc, #256]	; (78c0 <z_tick_sleep+0x120>)
    77be:	f001 fa58 	bl	8c72 <assert_print>
    77c2:	483d      	ldr	r0, [pc, #244]	; (78b8 <z_tick_sleep+0x118>)
    77c4:	f240 514e 	movw	r1, #1358	; 0x54e
    77c8:	f001 fa4c 	bl	8c64 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    77cc:	ea55 0306 	orrs.w	r3, r5, r6
    77d0:	d103      	bne.n	77da <z_tick_sleep+0x3a>
	z_impl_k_yield();
    77d2:	f7ff ff45 	bl	7660 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    77d6:	2000      	movs	r0, #0
    77d8:	e066      	b.n	78a8 <z_tick_sleep+0x108>
	if (Z_TICK_ABS(ticks) <= 0) {
    77da:	1caa      	adds	r2, r5, #2
    77dc:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    77e0:	db64      	blt.n	78ac <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    77e2:	f001 fe9c 	bl	951e <sys_clock_tick_get_32>
    77e6:	1944      	adds	r4, r0, r5
    77e8:	f04f 0340 	mov.w	r3, #64	; 0x40
    77ec:	f3ef 8811 	mrs	r8, BASEPRI
    77f0:	f383 8812 	msr	BASEPRI_MAX, r3
    77f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77f8:	4832      	ldr	r0, [pc, #200]	; (78c4 <z_tick_sleep+0x124>)
    77fa:	f7fe fd45 	bl	6288 <z_spin_lock_valid>
    77fe:	b968      	cbnz	r0, 781c <z_tick_sleep+0x7c>
    7800:	4a31      	ldr	r2, [pc, #196]	; (78c8 <z_tick_sleep+0x128>)
    7802:	4932      	ldr	r1, [pc, #200]	; (78cc <z_tick_sleep+0x12c>)
    7804:	482d      	ldr	r0, [pc, #180]	; (78bc <z_tick_sleep+0x11c>)
    7806:	238e      	movs	r3, #142	; 0x8e
    7808:	f001 fa33 	bl	8c72 <assert_print>
    780c:	492d      	ldr	r1, [pc, #180]	; (78c4 <z_tick_sleep+0x124>)
    780e:	4830      	ldr	r0, [pc, #192]	; (78d0 <z_tick_sleep+0x130>)
    7810:	f001 fa2f 	bl	8c72 <assert_print>
    7814:	482c      	ldr	r0, [pc, #176]	; (78c8 <z_tick_sleep+0x128>)
    7816:	218e      	movs	r1, #142	; 0x8e
    7818:	f001 fa24 	bl	8c64 <assert_post_action>
	pending_current = _current;
    781c:	4f2d      	ldr	r7, [pc, #180]	; (78d4 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    781e:	4829      	ldr	r0, [pc, #164]	; (78c4 <z_tick_sleep+0x124>)
    7820:	f7fe fd50 	bl	62c4 <z_spin_lock_set_owner>
    7824:	4b2c      	ldr	r3, [pc, #176]	; (78d8 <z_tick_sleep+0x138>)
    7826:	68b8      	ldr	r0, [r7, #8]
    7828:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    782a:	f7ff fc0d 	bl	7048 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    782e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7830:	492a      	ldr	r1, [pc, #168]	; (78dc <z_tick_sleep+0x13c>)
    7832:	462a      	mov	r2, r5
    7834:	4633      	mov	r3, r6
    7836:	3018      	adds	r0, #24
    7838:	f000 f9ae 	bl	7b98 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    783c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    783e:	4821      	ldr	r0, [pc, #132]	; (78c4 <z_tick_sleep+0x124>)
    7840:	7b53      	ldrb	r3, [r2, #13]
    7842:	f043 0310 	orr.w	r3, r3, #16
    7846:	7353      	strb	r3, [r2, #13]
    7848:	f7fe fd2c 	bl	62a4 <z_spin_unlock_valid>
    784c:	b968      	cbnz	r0, 786a <z_tick_sleep+0xca>
    784e:	4a1e      	ldr	r2, [pc, #120]	; (78c8 <z_tick_sleep+0x128>)
    7850:	4923      	ldr	r1, [pc, #140]	; (78e0 <z_tick_sleep+0x140>)
    7852:	481a      	ldr	r0, [pc, #104]	; (78bc <z_tick_sleep+0x11c>)
    7854:	23d0      	movs	r3, #208	; 0xd0
    7856:	f001 fa0c 	bl	8c72 <assert_print>
    785a:	491a      	ldr	r1, [pc, #104]	; (78c4 <z_tick_sleep+0x124>)
    785c:	4821      	ldr	r0, [pc, #132]	; (78e4 <z_tick_sleep+0x144>)
    785e:	f001 fa08 	bl	8c72 <assert_print>
    7862:	4819      	ldr	r0, [pc, #100]	; (78c8 <z_tick_sleep+0x128>)
    7864:	21d0      	movs	r1, #208	; 0xd0
    7866:	f001 f9fd 	bl	8c64 <assert_post_action>
    786a:	4640      	mov	r0, r8
    786c:	f7fb f960 	bl	2b30 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    7870:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7872:	7b5b      	ldrb	r3, [r3, #13]
    7874:	06db      	lsls	r3, r3, #27
    7876:	d50e      	bpl.n	7896 <z_tick_sleep+0xf6>
    7878:	491b      	ldr	r1, [pc, #108]	; (78e8 <z_tick_sleep+0x148>)
    787a:	4a0f      	ldr	r2, [pc, #60]	; (78b8 <z_tick_sleep+0x118>)
    787c:	480f      	ldr	r0, [pc, #60]	; (78bc <z_tick_sleep+0x11c>)
    787e:	f240 536f 	movw	r3, #1391	; 0x56f
    7882:	f001 f9f6 	bl	8c72 <assert_print>
    7886:	480e      	ldr	r0, [pc, #56]	; (78c0 <z_tick_sleep+0x120>)
    7888:	f001 f9f3 	bl	8c72 <assert_print>
    788c:	480a      	ldr	r0, [pc, #40]	; (78b8 <z_tick_sleep+0x118>)
    788e:	f240 516f 	movw	r1, #1391	; 0x56f
    7892:	f001 f9e7 	bl	8c64 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7896:	f001 fe42 	bl	951e <sys_clock_tick_get_32>
    789a:	1a20      	subs	r0, r4, r0
    789c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    78a0:	2801      	cmp	r0, #1
    78a2:	f173 0300 	sbcs.w	r3, r3, #0
    78a6:	db96      	blt.n	77d6 <z_tick_sleep+0x36>
}
    78a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    78ac:	f06f 0401 	mvn.w	r4, #1
    78b0:	1b64      	subs	r4, r4, r5
    78b2:	e799      	b.n	77e8 <z_tick_sleep+0x48>
    78b4:	0000b2fa 	.word	0x0000b2fa
    78b8:	0000b4d2 	.word	0x0000b4d2
    78bc:	00009bef 	.word	0x00009bef
    78c0:	0000b430 	.word	0x0000b430
    78c4:	20000c64 	.word	0x20000c64
    78c8:	00009f8a 	.word	0x00009f8a
    78cc:	00009fe3 	.word	0x00009fe3
    78d0:	00009ff8 	.word	0x00009ff8
    78d4:	20000c30 	.word	0x20000c30
    78d8:	20000c60 	.word	0x20000c60
    78dc:	00006f95 	.word	0x00006f95
    78e0:	00009fb7 	.word	0x00009fb7
    78e4:	00009fce 	.word	0x00009fce
    78e8:	0000b584 	.word	0x0000b584

000078ec <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    78ec:	b538      	push	{r3, r4, r5, lr}
    78ee:	4605      	mov	r5, r0
    78f0:	460c      	mov	r4, r1
    78f2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    78f6:	b173      	cbz	r3, 7916 <z_impl_k_sleep+0x2a>
    78f8:	4913      	ldr	r1, [pc, #76]	; (7948 <z_impl_k_sleep+0x5c>)
    78fa:	4a14      	ldr	r2, [pc, #80]	; (794c <z_impl_k_sleep+0x60>)
    78fc:	4814      	ldr	r0, [pc, #80]	; (7950 <z_impl_k_sleep+0x64>)
    78fe:	f240 537e 	movw	r3, #1406	; 0x57e
    7902:	f001 f9b6 	bl	8c72 <assert_print>
    7906:	4813      	ldr	r0, [pc, #76]	; (7954 <z_impl_k_sleep+0x68>)
    7908:	f001 f9b3 	bl	8c72 <assert_print>
    790c:	480f      	ldr	r0, [pc, #60]	; (794c <z_impl_k_sleep+0x60>)
    790e:	f240 517e 	movw	r1, #1406	; 0x57e
    7912:	f001 f9a7 	bl	8c64 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7916:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    791a:	bf08      	it	eq
    791c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    7920:	d106      	bne.n	7930 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    7922:	4b0d      	ldr	r3, [pc, #52]	; (7958 <z_impl_k_sleep+0x6c>)
    7924:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7926:	f7ff fd0d 	bl	7344 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    792a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    792e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7930:	4628      	mov	r0, r5
    7932:	4621      	mov	r1, r4
    7934:	f7ff ff34 	bl	77a0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    7938:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    793c:	fb80 0303 	smull	r0, r3, r0, r3
    7940:	0bc0      	lsrs	r0, r0, #15
    7942:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    7946:	e7f2      	b.n	792e <z_impl_k_sleep+0x42>
    7948:	0000b2fa 	.word	0x0000b2fa
    794c:	0000b4d2 	.word	0x0000b4d2
    7950:	00009bef 	.word	0x00009bef
    7954:	0000b430 	.word	0x0000b430
    7958:	20000c30 	.word	0x20000c30

0000795c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    795c:	4b01      	ldr	r3, [pc, #4]	; (7964 <z_impl_z_current_get+0x8>)
    795e:	6898      	ldr	r0, [r3, #8]
    7960:	4770      	bx	lr
    7962:	bf00      	nop
    7964:	20000c30 	.word	0x20000c30

00007968 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    796c:	4604      	mov	r4, r0
    796e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7972:	f3ef 8611 	mrs	r6, BASEPRI
    7976:	f383 8812 	msr	BASEPRI_MAX, r3
    797a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    797e:	4848      	ldr	r0, [pc, #288]	; (7aa0 <z_thread_abort+0x138>)
    7980:	f7fe fc82 	bl	6288 <z_spin_lock_valid>
    7984:	b968      	cbnz	r0, 79a2 <z_thread_abort+0x3a>
    7986:	4a47      	ldr	r2, [pc, #284]	; (7aa4 <z_thread_abort+0x13c>)
    7988:	4947      	ldr	r1, [pc, #284]	; (7aa8 <z_thread_abort+0x140>)
    798a:	4848      	ldr	r0, [pc, #288]	; (7aac <z_thread_abort+0x144>)
    798c:	238e      	movs	r3, #142	; 0x8e
    798e:	f001 f970 	bl	8c72 <assert_print>
    7992:	4943      	ldr	r1, [pc, #268]	; (7aa0 <z_thread_abort+0x138>)
    7994:	4846      	ldr	r0, [pc, #280]	; (7ab0 <z_thread_abort+0x148>)
    7996:	f001 f96c 	bl	8c72 <assert_print>
    799a:	4842      	ldr	r0, [pc, #264]	; (7aa4 <z_thread_abort+0x13c>)
    799c:	218e      	movs	r1, #142	; 0x8e
    799e:	f001 f961 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    79a2:	483f      	ldr	r0, [pc, #252]	; (7aa0 <z_thread_abort+0x138>)
    79a4:	f7fe fc8e 	bl	62c4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    79a8:	7b63      	ldrb	r3, [r4, #13]
    79aa:	071a      	lsls	r2, r3, #28
    79ac:	d517      	bpl.n	79de <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79ae:	483c      	ldr	r0, [pc, #240]	; (7aa0 <z_thread_abort+0x138>)
    79b0:	f7fe fc78 	bl	62a4 <z_spin_unlock_valid>
    79b4:	b968      	cbnz	r0, 79d2 <z_thread_abort+0x6a>
    79b6:	4a3b      	ldr	r2, [pc, #236]	; (7aa4 <z_thread_abort+0x13c>)
    79b8:	493e      	ldr	r1, [pc, #248]	; (7ab4 <z_thread_abort+0x14c>)
    79ba:	483c      	ldr	r0, [pc, #240]	; (7aac <z_thread_abort+0x144>)
    79bc:	23b9      	movs	r3, #185	; 0xb9
    79be:	f001 f958 	bl	8c72 <assert_print>
    79c2:	4937      	ldr	r1, [pc, #220]	; (7aa0 <z_thread_abort+0x138>)
    79c4:	483c      	ldr	r0, [pc, #240]	; (7ab8 <z_thread_abort+0x150>)
    79c6:	f001 f954 	bl	8c72 <assert_print>
    79ca:	4836      	ldr	r0, [pc, #216]	; (7aa4 <z_thread_abort+0x13c>)
    79cc:	21b9      	movs	r1, #185	; 0xb9
    79ce:	f001 f949 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    79d2:	f386 8811 	msr	BASEPRI, r6
    79d6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    79da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    79de:	f023 0220 	bic.w	r2, r3, #32
    79e2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    79e6:	09d2      	lsrs	r2, r2, #7
    79e8:	d142      	bne.n	7a70 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    79ea:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    79ec:	68a3      	ldr	r3, [r4, #8]
    79ee:	b113      	cbz	r3, 79f6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    79f0:	4620      	mov	r0, r4
    79f2:	f7ff f8c3 	bl	6b7c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    79f6:	f104 0018 	add.w	r0, r4, #24
    79fa:	f000 f995 	bl	7d28 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    79fe:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7a02:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7a06:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a08:	42bd      	cmp	r5, r7
    7a0a:	d001      	beq.n	7a10 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7a0c:	2d00      	cmp	r5, #0
    7a0e:	d139      	bne.n	7a84 <z_thread_abort+0x11c>
		update_cache(1);
    7a10:	2001      	movs	r0, #1
    7a12:	f7ff f8d5 	bl	6bc0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7a16:	4b29      	ldr	r3, [pc, #164]	; (7abc <z_thread_abort+0x154>)
    7a18:	689b      	ldr	r3, [r3, #8]
    7a1a:	42a3      	cmp	r3, r4
    7a1c:	d1c7      	bne.n	79ae <z_thread_abort+0x46>
    7a1e:	f3ef 8305 	mrs	r3, IPSR
    7a22:	2b00      	cmp	r3, #0
    7a24:	d1c3      	bne.n	79ae <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a26:	481e      	ldr	r0, [pc, #120]	; (7aa0 <z_thread_abort+0x138>)
    7a28:	f7fe fc3c 	bl	62a4 <z_spin_unlock_valid>
    7a2c:	b968      	cbnz	r0, 7a4a <z_thread_abort+0xe2>
    7a2e:	4a1d      	ldr	r2, [pc, #116]	; (7aa4 <z_thread_abort+0x13c>)
    7a30:	4920      	ldr	r1, [pc, #128]	; (7ab4 <z_thread_abort+0x14c>)
    7a32:	481e      	ldr	r0, [pc, #120]	; (7aac <z_thread_abort+0x144>)
    7a34:	23d0      	movs	r3, #208	; 0xd0
    7a36:	f001 f91c 	bl	8c72 <assert_print>
    7a3a:	4919      	ldr	r1, [pc, #100]	; (7aa0 <z_thread_abort+0x138>)
    7a3c:	481e      	ldr	r0, [pc, #120]	; (7ab8 <z_thread_abort+0x150>)
    7a3e:	f001 f918 	bl	8c72 <assert_print>
    7a42:	4818      	ldr	r0, [pc, #96]	; (7aa4 <z_thread_abort+0x13c>)
    7a44:	21d0      	movs	r1, #208	; 0xd0
    7a46:	f001 f90d 	bl	8c64 <assert_post_action>
    7a4a:	4630      	mov	r0, r6
    7a4c:	f7fb f870 	bl	2b30 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7a50:	4a1b      	ldr	r2, [pc, #108]	; (7ac0 <z_thread_abort+0x158>)
    7a52:	491c      	ldr	r1, [pc, #112]	; (7ac4 <z_thread_abort+0x15c>)
    7a54:	4815      	ldr	r0, [pc, #84]	; (7aac <z_thread_abort+0x144>)
    7a56:	f240 63ac 	movw	r3, #1708	; 0x6ac
    7a5a:	f001 f90a 	bl	8c72 <assert_print>
    7a5e:	481a      	ldr	r0, [pc, #104]	; (7ac8 <z_thread_abort+0x160>)
    7a60:	f001 f907 	bl	8c72 <assert_print>
    7a64:	4816      	ldr	r0, [pc, #88]	; (7ac0 <z_thread_abort+0x158>)
    7a66:	f240 61ac 	movw	r1, #1708	; 0x6ac
    7a6a:	f001 f8fb 	bl	8c64 <assert_post_action>
    7a6e:	e79e      	b.n	79ae <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a70:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    7a74:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    7a78:	4814      	ldr	r0, [pc, #80]	; (7acc <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a7a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7a7c:	4621      	mov	r1, r4
    7a7e:	f7ff f85b 	bl	6b38 <z_priq_dumb_remove>
}
    7a82:	e7b3      	b.n	79ec <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    7a84:	4628      	mov	r0, r5
    7a86:	f7ff f879 	bl	6b7c <unpend_thread_no_timeout>
    7a8a:	f105 0018 	add.w	r0, r5, #24
    7a8e:	f000 f94b 	bl	7d28 <z_abort_timeout>
    7a92:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7a96:	4628      	mov	r0, r5
    7a98:	f7ff f994 	bl	6dc4 <ready_thread>
    7a9c:	e7b3      	b.n	7a06 <z_thread_abort+0x9e>
    7a9e:	bf00      	nop
    7aa0:	20000c64 	.word	0x20000c64
    7aa4:	00009f8a 	.word	0x00009f8a
    7aa8:	00009fe3 	.word	0x00009fe3
    7aac:	00009bef 	.word	0x00009bef
    7ab0:	00009ff8 	.word	0x00009ff8
    7ab4:	00009fb7 	.word	0x00009fb7
    7ab8:	00009fce 	.word	0x00009fce
    7abc:	20000c30 	.word	0x20000c30
    7ac0:	0000b4d2 	.word	0x0000b4d2
    7ac4:	00009cc5 	.word	0x00009cc5
    7ac8:	0000b5c4 	.word	0x0000b5c4
    7acc:	20000c50 	.word	0x20000c50

00007ad0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7ad0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7ad2:	4806      	ldr	r0, [pc, #24]	; (7aec <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7ad4:	4a06      	ldr	r2, [pc, #24]	; (7af0 <z_data_copy+0x20>)
    7ad6:	4907      	ldr	r1, [pc, #28]	; (7af4 <z_data_copy+0x24>)
    7ad8:	1a12      	subs	r2, r2, r0
    7ada:	f001 fcbc 	bl	9456 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7ae2:	4a05      	ldr	r2, [pc, #20]	; (7af8 <z_data_copy+0x28>)
    7ae4:	4905      	ldr	r1, [pc, #20]	; (7afc <z_data_copy+0x2c>)
    7ae6:	4806      	ldr	r0, [pc, #24]	; (7b00 <z_data_copy+0x30>)
    7ae8:	f001 bcb5 	b.w	9456 <z_early_memcpy>
    7aec:	20000000 	.word	0x20000000
    7af0:	2000025c 	.word	0x2000025c
    7af4:	0000b698 	.word	0x0000b698
    7af8:	00000000 	.word	0x00000000
    7afc:	0000b698 	.word	0x0000b698
    7b00:	20000000 	.word	0x20000000

00007b04 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7b04:	4b03      	ldr	r3, [pc, #12]	; (7b14 <elapsed+0x10>)
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	b90b      	cbnz	r3, 7b0e <elapsed+0xa>
    7b0a:	f7fd b833 	b.w	4b74 <sys_clock_elapsed>
}
    7b0e:	2000      	movs	r0, #0
    7b10:	4770      	bx	lr
    7b12:	bf00      	nop
    7b14:	20000c70 	.word	0x20000c70

00007b18 <next_timeout>:
	return list->head == list;
    7b18:	4b10      	ldr	r3, [pc, #64]	; (7b5c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    7b1a:	b510      	push	{r4, lr}
    7b1c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b1e:	429c      	cmp	r4, r3
    7b20:	bf08      	it	eq
    7b22:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7b24:	f7ff ffee 	bl	7b04 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7b28:	b1a4      	cbz	r4, 7b54 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7b2a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    7b2e:	1a1b      	subs	r3, r3, r0
    7b30:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    7b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7b38:	f172 0100 	sbcs.w	r1, r2, #0
    7b3c:	da0a      	bge.n	7b54 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7b3e:	2a00      	cmp	r2, #0
    7b40:	bfac      	ite	ge
    7b42:	4618      	movge	r0, r3
    7b44:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7b46:	4b06      	ldr	r3, [pc, #24]	; (7b60 <next_timeout+0x48>)
    7b48:	691b      	ldr	r3, [r3, #16]
    7b4a:	b113      	cbz	r3, 7b52 <next_timeout+0x3a>
    7b4c:	4298      	cmp	r0, r3
    7b4e:	bfa8      	it	ge
    7b50:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7b52:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    7b54:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7b58:	e7f5      	b.n	7b46 <next_timeout+0x2e>
    7b5a:	bf00      	nop
    7b5c:	20000174 	.word	0x20000174
    7b60:	20000c30 	.word	0x20000c30

00007b64 <remove_timeout>:
{
    7b64:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    7b66:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7b68:	b168      	cbz	r0, 7b86 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    7b6a:	4a0a      	ldr	r2, [pc, #40]	; (7b94 <remove_timeout+0x30>)
    7b6c:	6852      	ldr	r2, [r2, #4]
    7b6e:	4290      	cmp	r0, r2
    7b70:	d009      	beq.n	7b86 <remove_timeout+0x22>
	if (next(t) != NULL) {
    7b72:	b143      	cbz	r3, 7b86 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7b74:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7b78:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7b7c:	1912      	adds	r2, r2, r4
    7b7e:	eb41 0105 	adc.w	r1, r1, r5
    7b82:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7b86:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7b88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7b8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7b8c:	2300      	movs	r3, #0
	node->prev = NULL;
    7b8e:	e9c0 3300 	strd	r3, r3, [r0]
}
    7b92:	bd30      	pop	{r4, r5, pc}
    7b94:	20000174 	.word	0x20000174

00007b98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7b9c:	bf08      	it	eq
    7b9e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7ba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ba6:	4604      	mov	r4, r0
    7ba8:	460f      	mov	r7, r1
    7baa:	4691      	mov	r9, r2
    7bac:	461d      	mov	r5, r3
    7bae:	4616      	mov	r6, r2
    7bb0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7bb2:	f000 809c 	beq.w	7cee <z_add_timeout+0x156>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7bb6:	6803      	ldr	r3, [r0, #0]
    7bb8:	b163      	cbz	r3, 7bd4 <z_add_timeout+0x3c>
    7bba:	494e      	ldr	r1, [pc, #312]	; (7cf4 <z_add_timeout+0x15c>)
    7bbc:	4a4e      	ldr	r2, [pc, #312]	; (7cf8 <z_add_timeout+0x160>)
    7bbe:	484f      	ldr	r0, [pc, #316]	; (7cfc <z_add_timeout+0x164>)
    7bc0:	2363      	movs	r3, #99	; 0x63
    7bc2:	f001 f856 	bl	8c72 <assert_print>
    7bc6:	484e      	ldr	r0, [pc, #312]	; (7d00 <z_add_timeout+0x168>)
    7bc8:	f001 f853 	bl	8c72 <assert_print>
    7bcc:	484a      	ldr	r0, [pc, #296]	; (7cf8 <z_add_timeout+0x160>)
    7bce:	2163      	movs	r1, #99	; 0x63
    7bd0:	f001 f848 	bl	8c64 <assert_post_action>
	to->fn = fn;
    7bd4:	60a7      	str	r7, [r4, #8]
	__asm__ volatile(
    7bd6:	f04f 0340 	mov.w	r3, #64	; 0x40
    7bda:	f3ef 8711 	mrs	r7, BASEPRI
    7bde:	f383 8812 	msr	BASEPRI_MAX, r3
    7be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7be6:	4847      	ldr	r0, [pc, #284]	; (7d04 <z_add_timeout+0x16c>)
    7be8:	f7fe fb4e 	bl	6288 <z_spin_lock_valid>
    7bec:	b968      	cbnz	r0, 7c0a <z_add_timeout+0x72>
    7bee:	4a46      	ldr	r2, [pc, #280]	; (7d08 <z_add_timeout+0x170>)
    7bf0:	4946      	ldr	r1, [pc, #280]	; (7d0c <z_add_timeout+0x174>)
    7bf2:	4842      	ldr	r0, [pc, #264]	; (7cfc <z_add_timeout+0x164>)
    7bf4:	238e      	movs	r3, #142	; 0x8e
    7bf6:	f001 f83c 	bl	8c72 <assert_print>
    7bfa:	4942      	ldr	r1, [pc, #264]	; (7d04 <z_add_timeout+0x16c>)
    7bfc:	4844      	ldr	r0, [pc, #272]	; (7d10 <z_add_timeout+0x178>)
    7bfe:	f001 f838 	bl	8c72 <assert_print>
    7c02:	4841      	ldr	r0, [pc, #260]	; (7d08 <z_add_timeout+0x170>)
    7c04:	218e      	movs	r1, #142	; 0x8e
    7c06:	f001 f82d 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c0a:	483e      	ldr	r0, [pc, #248]	; (7d04 <z_add_timeout+0x16c>)
    7c0c:	f7fe fb5a 	bl	62c4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7c10:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7c14:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    7c18:	da1f      	bge.n	7c5a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7c1a:	493e      	ldr	r1, [pc, #248]	; (7d14 <z_add_timeout+0x17c>)
    7c1c:	e9d1 2000 	ldrd	r2, r0, [r1]
    7c20:	f06f 0301 	mvn.w	r3, #1
    7c24:	1a9b      	subs	r3, r3, r2
    7c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c2a:	eb62 0000 	sbc.w	r0, r2, r0
    7c2e:	1b9e      	subs	r6, r3, r6
    7c30:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    7c34:	2e01      	cmp	r6, #1
    7c36:	f170 0300 	sbcs.w	r3, r0, #0
    7c3a:	da01      	bge.n	7c40 <z_add_timeout+0xa8>
    7c3c:	2601      	movs	r6, #1
    7c3e:	2000      	movs	r0, #0
	return list->head == list;
    7c40:	4a35      	ldr	r2, [pc, #212]	; (7d18 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    7c42:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c46:	4293      	cmp	r3, r2
    7c48:	e9c4 6004 	strd	r6, r0, [r4, #16]
    7c4c:	d116      	bne.n	7c7c <z_add_timeout+0xe4>
	node->prev = tail;
    7c4e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    7c52:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    7c56:	6054      	str	r4, [r2, #4]
}
    7c58:	e024      	b.n	7ca4 <z_add_timeout+0x10c>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7c5a:	f7ff ff53 	bl	7b04 <elapsed>
    7c5e:	3601      	adds	r6, #1
    7c60:	f145 0500 	adc.w	r5, r5, #0
    7c64:	1836      	adds	r6, r6, r0
    7c66:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    7c6a:	e7e9      	b.n	7c40 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7c6c:	1a09      	subs	r1, r1, r0
    7c6e:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
    7c72:	459c      	cmp	ip, r3
    7c74:	e9c4 1504 	strd	r1, r5, [r4, #16]
    7c78:	d0e9      	beq.n	7c4e <z_add_timeout+0xb6>
    7c7a:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	d0e6      	beq.n	7c4e <z_add_timeout+0xb6>
			if (t->dticks > to->dticks) {
    7c80:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
    7c84:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    7c88:	4281      	cmp	r1, r0
    7c8a:	eb75 0e06 	sbcs.w	lr, r5, r6
    7c8e:	daed      	bge.n	7c6c <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    7c90:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    7c92:	6859      	ldr	r1, [r3, #4]
    7c94:	eb66 0605 	sbc.w	r6, r6, r5
    7c98:	e9c3 0604 	strd	r0, r6, [r3, #16]
	node->next = successor;
    7c9c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7ca0:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7ca2:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7ca4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ca6:	4293      	cmp	r3, r2
    7ca8:	d00b      	beq.n	7cc2 <z_add_timeout+0x12a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7caa:	429c      	cmp	r4, r3
    7cac:	d109      	bne.n	7cc2 <z_add_timeout+0x12a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7cae:	f7ff ff33 	bl	7b18 <next_timeout>

			if (next_time == 0 ||
    7cb2:	b118      	cbz	r0, 7cbc <z_add_timeout+0x124>
			    _current_cpu->slice_ticks != next_time) {
    7cb4:	4b19      	ldr	r3, [pc, #100]	; (7d1c <z_add_timeout+0x184>)
			if (next_time == 0 ||
    7cb6:	691b      	ldr	r3, [r3, #16]
    7cb8:	4283      	cmp	r3, r0
    7cba:	d002      	beq.n	7cc2 <z_add_timeout+0x12a>
				sys_clock_set_timeout(next_time, false);
    7cbc:	2100      	movs	r1, #0
    7cbe:	f7fc ff27 	bl	4b10 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cc2:	4810      	ldr	r0, [pc, #64]	; (7d04 <z_add_timeout+0x16c>)
    7cc4:	f7fe faee 	bl	62a4 <z_spin_unlock_valid>
    7cc8:	b968      	cbnz	r0, 7ce6 <z_add_timeout+0x14e>
    7cca:	4a0f      	ldr	r2, [pc, #60]	; (7d08 <z_add_timeout+0x170>)
    7ccc:	4914      	ldr	r1, [pc, #80]	; (7d20 <z_add_timeout+0x188>)
    7cce:	480b      	ldr	r0, [pc, #44]	; (7cfc <z_add_timeout+0x164>)
    7cd0:	23b9      	movs	r3, #185	; 0xb9
    7cd2:	f000 ffce 	bl	8c72 <assert_print>
    7cd6:	490b      	ldr	r1, [pc, #44]	; (7d04 <z_add_timeout+0x16c>)
    7cd8:	4812      	ldr	r0, [pc, #72]	; (7d24 <z_add_timeout+0x18c>)
    7cda:	f000 ffca 	bl	8c72 <assert_print>
    7cde:	480a      	ldr	r0, [pc, #40]	; (7d08 <z_add_timeout+0x170>)
    7ce0:	21b9      	movs	r1, #185	; 0xb9
    7ce2:	f000 ffbf 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7ce6:	f387 8811 	msr	BASEPRI, r7
    7cea:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7cf2:	bf00      	nop
    7cf4:	0000b60a 	.word	0x0000b60a
    7cf8:	0000b5e6 	.word	0x0000b5e6
    7cfc:	00009bef 	.word	0x00009bef
    7d00:	0000b430 	.word	0x0000b430
    7d04:	20000c74 	.word	0x20000c74
    7d08:	00009f8a 	.word	0x00009f8a
    7d0c:	00009fe3 	.word	0x00009fe3
    7d10:	00009ff8 	.word	0x00009ff8
    7d14:	20000500 	.word	0x20000500
    7d18:	20000174 	.word	0x20000174
    7d1c:	20000c30 	.word	0x20000c30
    7d20:	00009fb7 	.word	0x00009fb7
    7d24:	00009fce 	.word	0x00009fce

00007d28 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7d28:	b538      	push	{r3, r4, r5, lr}
    7d2a:	4604      	mov	r4, r0
	__asm__ volatile(
    7d2c:	f04f 0340 	mov.w	r3, #64	; 0x40
    7d30:	f3ef 8511 	mrs	r5, BASEPRI
    7d34:	f383 8812 	msr	BASEPRI_MAX, r3
    7d38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d3c:	481a      	ldr	r0, [pc, #104]	; (7da8 <z_abort_timeout+0x80>)
    7d3e:	f7fe faa3 	bl	6288 <z_spin_lock_valid>
    7d42:	b968      	cbnz	r0, 7d60 <z_abort_timeout+0x38>
    7d44:	4a19      	ldr	r2, [pc, #100]	; (7dac <z_abort_timeout+0x84>)
    7d46:	491a      	ldr	r1, [pc, #104]	; (7db0 <z_abort_timeout+0x88>)
    7d48:	481a      	ldr	r0, [pc, #104]	; (7db4 <z_abort_timeout+0x8c>)
    7d4a:	238e      	movs	r3, #142	; 0x8e
    7d4c:	f000 ff91 	bl	8c72 <assert_print>
    7d50:	4915      	ldr	r1, [pc, #84]	; (7da8 <z_abort_timeout+0x80>)
    7d52:	4819      	ldr	r0, [pc, #100]	; (7db8 <z_abort_timeout+0x90>)
    7d54:	f000 ff8d 	bl	8c72 <assert_print>
    7d58:	4814      	ldr	r0, [pc, #80]	; (7dac <z_abort_timeout+0x84>)
    7d5a:	218e      	movs	r1, #142	; 0x8e
    7d5c:	f000 ff82 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d60:	4811      	ldr	r0, [pc, #68]	; (7da8 <z_abort_timeout+0x80>)
    7d62:	f7fe faaf 	bl	62c4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7d66:	6823      	ldr	r3, [r4, #0]
    7d68:	b1db      	cbz	r3, 7da2 <z_abort_timeout+0x7a>
			remove_timeout(to);
    7d6a:	4620      	mov	r0, r4
    7d6c:	f7ff fefa 	bl	7b64 <remove_timeout>
			ret = 0;
    7d70:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d72:	480d      	ldr	r0, [pc, #52]	; (7da8 <z_abort_timeout+0x80>)
    7d74:	f7fe fa96 	bl	62a4 <z_spin_unlock_valid>
    7d78:	b968      	cbnz	r0, 7d96 <z_abort_timeout+0x6e>
    7d7a:	4a0c      	ldr	r2, [pc, #48]	; (7dac <z_abort_timeout+0x84>)
    7d7c:	490f      	ldr	r1, [pc, #60]	; (7dbc <z_abort_timeout+0x94>)
    7d7e:	480d      	ldr	r0, [pc, #52]	; (7db4 <z_abort_timeout+0x8c>)
    7d80:	23b9      	movs	r3, #185	; 0xb9
    7d82:	f000 ff76 	bl	8c72 <assert_print>
    7d86:	4908      	ldr	r1, [pc, #32]	; (7da8 <z_abort_timeout+0x80>)
    7d88:	480d      	ldr	r0, [pc, #52]	; (7dc0 <z_abort_timeout+0x98>)
    7d8a:	f000 ff72 	bl	8c72 <assert_print>
    7d8e:	4807      	ldr	r0, [pc, #28]	; (7dac <z_abort_timeout+0x84>)
    7d90:	21b9      	movs	r1, #185	; 0xb9
    7d92:	f000 ff67 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7d96:	f385 8811 	msr	BASEPRI, r5
    7d9a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7d9e:	4620      	mov	r0, r4
    7da0:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7da2:	f06f 0415 	mvn.w	r4, #21
    7da6:	e7e4      	b.n	7d72 <z_abort_timeout+0x4a>
    7da8:	20000c74 	.word	0x20000c74
    7dac:	00009f8a 	.word	0x00009f8a
    7db0:	00009fe3 	.word	0x00009fe3
    7db4:	00009bef 	.word	0x00009bef
    7db8:	00009ff8 	.word	0x00009ff8
    7dbc:	00009fb7 	.word	0x00009fb7
    7dc0:	00009fce 	.word	0x00009fce

00007dc4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7dc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7dc6:	f04f 0340 	mov.w	r3, #64	; 0x40
    7dca:	f3ef 8511 	mrs	r5, BASEPRI
    7dce:	f383 8812 	msr	BASEPRI_MAX, r3
    7dd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dd6:	4818      	ldr	r0, [pc, #96]	; (7e38 <z_get_next_timeout_expiry+0x74>)
    7dd8:	f7fe fa56 	bl	6288 <z_spin_lock_valid>
    7ddc:	b968      	cbnz	r0, 7dfa <z_get_next_timeout_expiry+0x36>
    7dde:	4a17      	ldr	r2, [pc, #92]	; (7e3c <z_get_next_timeout_expiry+0x78>)
    7de0:	4917      	ldr	r1, [pc, #92]	; (7e40 <z_get_next_timeout_expiry+0x7c>)
    7de2:	4818      	ldr	r0, [pc, #96]	; (7e44 <z_get_next_timeout_expiry+0x80>)
    7de4:	238e      	movs	r3, #142	; 0x8e
    7de6:	f000 ff44 	bl	8c72 <assert_print>
    7dea:	4913      	ldr	r1, [pc, #76]	; (7e38 <z_get_next_timeout_expiry+0x74>)
    7dec:	4816      	ldr	r0, [pc, #88]	; (7e48 <z_get_next_timeout_expiry+0x84>)
    7dee:	f000 ff40 	bl	8c72 <assert_print>
    7df2:	4812      	ldr	r0, [pc, #72]	; (7e3c <z_get_next_timeout_expiry+0x78>)
    7df4:	218e      	movs	r1, #142	; 0x8e
    7df6:	f000 ff35 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7dfa:	480f      	ldr	r0, [pc, #60]	; (7e38 <z_get_next_timeout_expiry+0x74>)
    7dfc:	f7fe fa62 	bl	62c4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7e00:	f7ff fe8a 	bl	7b18 <next_timeout>
    7e04:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e06:	480c      	ldr	r0, [pc, #48]	; (7e38 <z_get_next_timeout_expiry+0x74>)
    7e08:	f7fe fa4c 	bl	62a4 <z_spin_unlock_valid>
    7e0c:	b968      	cbnz	r0, 7e2a <z_get_next_timeout_expiry+0x66>
    7e0e:	4a0b      	ldr	r2, [pc, #44]	; (7e3c <z_get_next_timeout_expiry+0x78>)
    7e10:	490e      	ldr	r1, [pc, #56]	; (7e4c <z_get_next_timeout_expiry+0x88>)
    7e12:	480c      	ldr	r0, [pc, #48]	; (7e44 <z_get_next_timeout_expiry+0x80>)
    7e14:	23b9      	movs	r3, #185	; 0xb9
    7e16:	f000 ff2c 	bl	8c72 <assert_print>
    7e1a:	4907      	ldr	r1, [pc, #28]	; (7e38 <z_get_next_timeout_expiry+0x74>)
    7e1c:	480c      	ldr	r0, [pc, #48]	; (7e50 <z_get_next_timeout_expiry+0x8c>)
    7e1e:	f000 ff28 	bl	8c72 <assert_print>
    7e22:	4806      	ldr	r0, [pc, #24]	; (7e3c <z_get_next_timeout_expiry+0x78>)
    7e24:	21b9      	movs	r1, #185	; 0xb9
    7e26:	f000 ff1d 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7e2a:	f385 8811 	msr	BASEPRI, r5
    7e2e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7e32:	4620      	mov	r0, r4
    7e34:	bd38      	pop	{r3, r4, r5, pc}
    7e36:	bf00      	nop
    7e38:	20000c74 	.word	0x20000c74
    7e3c:	00009f8a 	.word	0x00009f8a
    7e40:	00009fe3 	.word	0x00009fe3
    7e44:	00009bef 	.word	0x00009bef
    7e48:	00009ff8 	.word	0x00009ff8
    7e4c:	00009fb7 	.word	0x00009fb7
    7e50:	00009fce 	.word	0x00009fce

00007e54 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7e54:	b570      	push	{r4, r5, r6, lr}
    7e56:	4604      	mov	r4, r0
    7e58:	460d      	mov	r5, r1
	__asm__ volatile(
    7e5a:	f04f 0340 	mov.w	r3, #64	; 0x40
    7e5e:	f3ef 8611 	mrs	r6, BASEPRI
    7e62:	f383 8812 	msr	BASEPRI_MAX, r3
    7e66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e6a:	481b      	ldr	r0, [pc, #108]	; (7ed8 <z_set_timeout_expiry+0x84>)
    7e6c:	f7fe fa0c 	bl	6288 <z_spin_lock_valid>
    7e70:	b968      	cbnz	r0, 7e8e <z_set_timeout_expiry+0x3a>
    7e72:	4a1a      	ldr	r2, [pc, #104]	; (7edc <z_set_timeout_expiry+0x88>)
    7e74:	491a      	ldr	r1, [pc, #104]	; (7ee0 <z_set_timeout_expiry+0x8c>)
    7e76:	481b      	ldr	r0, [pc, #108]	; (7ee4 <z_set_timeout_expiry+0x90>)
    7e78:	238e      	movs	r3, #142	; 0x8e
    7e7a:	f000 fefa 	bl	8c72 <assert_print>
    7e7e:	4916      	ldr	r1, [pc, #88]	; (7ed8 <z_set_timeout_expiry+0x84>)
    7e80:	4819      	ldr	r0, [pc, #100]	; (7ee8 <z_set_timeout_expiry+0x94>)
    7e82:	f000 fef6 	bl	8c72 <assert_print>
    7e86:	4815      	ldr	r0, [pc, #84]	; (7edc <z_set_timeout_expiry+0x88>)
    7e88:	218e      	movs	r1, #142	; 0x8e
    7e8a:	f000 feeb 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e8e:	4812      	ldr	r0, [pc, #72]	; (7ed8 <z_set_timeout_expiry+0x84>)
    7e90:	f7fe fa18 	bl	62c4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7e94:	f7ff fe40 	bl	7b18 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7e98:	2801      	cmp	r0, #1
    7e9a:	dd05      	ble.n	7ea8 <z_set_timeout_expiry+0x54>
    7e9c:	42a0      	cmp	r0, r4
    7e9e:	db03      	blt.n	7ea8 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7ea0:	4629      	mov	r1, r5
    7ea2:	4620      	mov	r0, r4
    7ea4:	f7fc fe34 	bl	4b10 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ea8:	480b      	ldr	r0, [pc, #44]	; (7ed8 <z_set_timeout_expiry+0x84>)
    7eaa:	f7fe f9fb 	bl	62a4 <z_spin_unlock_valid>
    7eae:	b968      	cbnz	r0, 7ecc <z_set_timeout_expiry+0x78>
    7eb0:	4a0a      	ldr	r2, [pc, #40]	; (7edc <z_set_timeout_expiry+0x88>)
    7eb2:	490e      	ldr	r1, [pc, #56]	; (7eec <z_set_timeout_expiry+0x98>)
    7eb4:	480b      	ldr	r0, [pc, #44]	; (7ee4 <z_set_timeout_expiry+0x90>)
    7eb6:	23b9      	movs	r3, #185	; 0xb9
    7eb8:	f000 fedb 	bl	8c72 <assert_print>
    7ebc:	4906      	ldr	r1, [pc, #24]	; (7ed8 <z_set_timeout_expiry+0x84>)
    7ebe:	480c      	ldr	r0, [pc, #48]	; (7ef0 <z_set_timeout_expiry+0x9c>)
    7ec0:	f000 fed7 	bl	8c72 <assert_print>
    7ec4:	4805      	ldr	r0, [pc, #20]	; (7edc <z_set_timeout_expiry+0x88>)
    7ec6:	21b9      	movs	r1, #185	; 0xb9
    7ec8:	f000 fecc 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7ecc:	f386 8811 	msr	BASEPRI, r6
    7ed0:	f3bf 8f6f 	isb	sy
		}
	}
}
    7ed4:	bd70      	pop	{r4, r5, r6, pc}
    7ed6:	bf00      	nop
    7ed8:	20000c74 	.word	0x20000c74
    7edc:	00009f8a 	.word	0x00009f8a
    7ee0:	00009fe3 	.word	0x00009fe3
    7ee4:	00009bef 	.word	0x00009bef
    7ee8:	00009ff8 	.word	0x00009ff8
    7eec:	00009fb7 	.word	0x00009fb7
    7ef0:	00009fce 	.word	0x00009fce

00007ef4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ef8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7efa:	f7fe feeb 	bl	6cd4 <z_time_slice>
	__asm__ volatile(
    7efe:	f04f 0340 	mov.w	r3, #64	; 0x40
    7f02:	f3ef 8511 	mrs	r5, BASEPRI
    7f06:	f383 8812 	msr	BASEPRI_MAX, r3
    7f0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f0e:	484c      	ldr	r0, [pc, #304]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7f10:	f7fe f9ba 	bl	6288 <z_spin_lock_valid>
    7f14:	b968      	cbnz	r0, 7f32 <sys_clock_announce+0x3e>
    7f16:	4a4b      	ldr	r2, [pc, #300]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7f18:	494b      	ldr	r1, [pc, #300]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7f1a:	484c      	ldr	r0, [pc, #304]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7f1c:	238e      	movs	r3, #142	; 0x8e
    7f1e:	f000 fea8 	bl	8c72 <assert_print>
    7f22:	4947      	ldr	r1, [pc, #284]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7f24:	484a      	ldr	r0, [pc, #296]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7f26:	f000 fea4 	bl	8c72 <assert_print>
    7f2a:	4846      	ldr	r0, [pc, #280]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7f2c:	218e      	movs	r1, #142	; 0x8e
    7f2e:	f000 fe99 	bl	8c64 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    7f32:	4f48      	ldr	r7, [pc, #288]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
	z_spin_lock_set_owner(l);
    7f34:	4842      	ldr	r0, [pc, #264]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
	return list->head == list;
    7f36:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7f3a:	4e48      	ldr	r6, [pc, #288]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    7f3c:	f7fe f9c2 	bl	62c4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    7f40:	603c      	str	r4, [r7, #0]
    7f42:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7f46:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f48:	4544      	cmp	r4, r8
		curr_tick += dt;
    7f4a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    7f4e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    7f52:	d00b      	beq.n	7f6c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7f54:	b154      	cbz	r4, 7f6c <sys_clock_announce+0x78>
    7f56:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    7f5a:	429a      	cmp	r2, r3
    7f5c:	eb70 090c 	sbcs.w	r9, r0, ip
    7f60:	da28      	bge.n	7fb4 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7f62:	1a9b      	subs	r3, r3, r2
    7f64:	eb6c 0c00 	sbc.w	ip, ip, r0
    7f68:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    7f6c:	1851      	adds	r1, r2, r1
    7f6e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    7f72:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7f74:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    7f78:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7f7a:	f7ff fdcd 	bl	7b18 <next_timeout>
    7f7e:	4621      	mov	r1, r4
    7f80:	f7fc fdc6 	bl	4b10 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f84:	482e      	ldr	r0, [pc, #184]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7f86:	f7fe f98d 	bl	62a4 <z_spin_unlock_valid>
    7f8a:	b968      	cbnz	r0, 7fa8 <sys_clock_announce+0xb4>
    7f8c:	4a2d      	ldr	r2, [pc, #180]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7f8e:	4934      	ldr	r1, [pc, #208]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7f90:	482e      	ldr	r0, [pc, #184]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7f92:	23b9      	movs	r3, #185	; 0xb9
    7f94:	f000 fe6d 	bl	8c72 <assert_print>
    7f98:	4929      	ldr	r1, [pc, #164]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7f9a:	4832      	ldr	r0, [pc, #200]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    7f9c:	f000 fe69 	bl	8c72 <assert_print>
    7fa0:	4828      	ldr	r0, [pc, #160]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fa2:	21b9      	movs	r1, #185	; 0xb9
    7fa4:	f000 fe5e 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    7fa8:	f385 8811 	msr	BASEPRI, r5
    7fac:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7fb4:	1859      	adds	r1, r3, r1
    7fb6:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    7fba:	1ad3      	subs	r3, r2, r3
    7fbc:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    7fbe:	2200      	movs	r2, #0
    7fc0:	2300      	movs	r3, #0
		curr_tick += dt;
    7fc2:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    7fc6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    7fca:	4620      	mov	r0, r4
    7fcc:	f7ff fdca 	bl	7b64 <remove_timeout>
    7fd0:	481b      	ldr	r0, [pc, #108]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fd2:	f7fe f967 	bl	62a4 <z_spin_unlock_valid>
    7fd6:	b968      	cbnz	r0, 7ff4 <sys_clock_announce+0x100>
    7fd8:	4a1a      	ldr	r2, [pc, #104]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fda:	4921      	ldr	r1, [pc, #132]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7fdc:	481b      	ldr	r0, [pc, #108]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7fde:	23b9      	movs	r3, #185	; 0xb9
    7fe0:	f000 fe47 	bl	8c72 <assert_print>
    7fe4:	4916      	ldr	r1, [pc, #88]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fe6:	481f      	ldr	r0, [pc, #124]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    7fe8:	f000 fe43 	bl	8c72 <assert_print>
    7fec:	4815      	ldr	r0, [pc, #84]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fee:	21b9      	movs	r1, #185	; 0xb9
    7ff0:	f000 fe38 	bl	8c64 <assert_post_action>
    7ff4:	f385 8811 	msr	BASEPRI, r5
    7ff8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7ffc:	68a3      	ldr	r3, [r4, #8]
    7ffe:	4620      	mov	r0, r4
    8000:	4798      	blx	r3
	__asm__ volatile(
    8002:	f04f 0340 	mov.w	r3, #64	; 0x40
    8006:	f3ef 8511 	mrs	r5, BASEPRI
    800a:	f383 8812 	msr	BASEPRI_MAX, r3
    800e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8012:	480b      	ldr	r0, [pc, #44]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    8014:	f7fe f938 	bl	6288 <z_spin_lock_valid>
    8018:	b968      	cbnz	r0, 8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    801a:	4a0a      	ldr	r2, [pc, #40]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    801c:	490a      	ldr	r1, [pc, #40]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    801e:	480b      	ldr	r0, [pc, #44]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    8020:	238e      	movs	r3, #142	; 0x8e
    8022:	f000 fe26 	bl	8c72 <assert_print>
    8026:	4906      	ldr	r1, [pc, #24]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    8028:	4809      	ldr	r0, [pc, #36]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    802a:	f000 fe22 	bl	8c72 <assert_print>
    802e:	4805      	ldr	r0, [pc, #20]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8030:	218e      	movs	r1, #142	; 0x8e
    8032:	f000 fe17 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    8036:	4802      	ldr	r0, [pc, #8]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    8038:	f7fe f944 	bl	62c4 <z_spin_lock_set_owner>
	return k;
    803c:	e781      	b.n	7f42 <sys_clock_announce+0x4e>
    803e:	bf00      	nop
    8040:	20000c74 	.word	0x20000c74
    8044:	00009f8a 	.word	0x00009f8a
    8048:	00009fe3 	.word	0x00009fe3
    804c:	00009bef 	.word	0x00009bef
    8050:	00009ff8 	.word	0x00009ff8
    8054:	20000c70 	.word	0x20000c70
    8058:	20000174 	.word	0x20000174
    805c:	20000500 	.word	0x20000500
    8060:	00009fb7 	.word	0x00009fb7
    8064:	00009fce 	.word	0x00009fce

00008068 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8068:	b570      	push	{r4, r5, r6, lr}
    806a:	f04f 0340 	mov.w	r3, #64	; 0x40
    806e:	f3ef 8611 	mrs	r6, BASEPRI
    8072:	f383 8812 	msr	BASEPRI_MAX, r3
    8076:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    807a:	481b      	ldr	r0, [pc, #108]	; (80e8 <sys_clock_tick_get+0x80>)
    807c:	f7fe f904 	bl	6288 <z_spin_lock_valid>
    8080:	b968      	cbnz	r0, 809e <sys_clock_tick_get+0x36>
    8082:	4a1a      	ldr	r2, [pc, #104]	; (80ec <sys_clock_tick_get+0x84>)
    8084:	491a      	ldr	r1, [pc, #104]	; (80f0 <sys_clock_tick_get+0x88>)
    8086:	481b      	ldr	r0, [pc, #108]	; (80f4 <sys_clock_tick_get+0x8c>)
    8088:	238e      	movs	r3, #142	; 0x8e
    808a:	f000 fdf2 	bl	8c72 <assert_print>
    808e:	4916      	ldr	r1, [pc, #88]	; (80e8 <sys_clock_tick_get+0x80>)
    8090:	4819      	ldr	r0, [pc, #100]	; (80f8 <sys_clock_tick_get+0x90>)
    8092:	f000 fdee 	bl	8c72 <assert_print>
    8096:	4815      	ldr	r0, [pc, #84]	; (80ec <sys_clock_tick_get+0x84>)
    8098:	218e      	movs	r1, #142	; 0x8e
    809a:	f000 fde3 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    809e:	4812      	ldr	r0, [pc, #72]	; (80e8 <sys_clock_tick_get+0x80>)
    80a0:	f7fe f910 	bl	62c4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    80a4:	f7fc fd66 	bl	4b74 <sys_clock_elapsed>
    80a8:	4a14      	ldr	r2, [pc, #80]	; (80fc <sys_clock_tick_get+0x94>)
    80aa:	e9d2 4500 	ldrd	r4, r5, [r2]
    80ae:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80b0:	480d      	ldr	r0, [pc, #52]	; (80e8 <sys_clock_tick_get+0x80>)
    80b2:	f145 0500 	adc.w	r5, r5, #0
    80b6:	f7fe f8f5 	bl	62a4 <z_spin_unlock_valid>
    80ba:	b968      	cbnz	r0, 80d8 <sys_clock_tick_get+0x70>
    80bc:	4a0b      	ldr	r2, [pc, #44]	; (80ec <sys_clock_tick_get+0x84>)
    80be:	4910      	ldr	r1, [pc, #64]	; (8100 <sys_clock_tick_get+0x98>)
    80c0:	480c      	ldr	r0, [pc, #48]	; (80f4 <sys_clock_tick_get+0x8c>)
    80c2:	23b9      	movs	r3, #185	; 0xb9
    80c4:	f000 fdd5 	bl	8c72 <assert_print>
    80c8:	4907      	ldr	r1, [pc, #28]	; (80e8 <sys_clock_tick_get+0x80>)
    80ca:	480e      	ldr	r0, [pc, #56]	; (8104 <sys_clock_tick_get+0x9c>)
    80cc:	f000 fdd1 	bl	8c72 <assert_print>
    80d0:	4806      	ldr	r0, [pc, #24]	; (80ec <sys_clock_tick_get+0x84>)
    80d2:	21b9      	movs	r1, #185	; 0xb9
    80d4:	f000 fdc6 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    80d8:	f386 8811 	msr	BASEPRI, r6
    80dc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    80e0:	4620      	mov	r0, r4
    80e2:	4629      	mov	r1, r5
    80e4:	bd70      	pop	{r4, r5, r6, pc}
    80e6:	bf00      	nop
    80e8:	20000c74 	.word	0x20000c74
    80ec:	00009f8a 	.word	0x00009f8a
    80f0:	00009fe3 	.word	0x00009fe3
    80f4:	00009bef 	.word	0x00009bef
    80f8:	00009ff8 	.word	0x00009ff8
    80fc:	20000500 	.word	0x20000500
    8100:	00009fb7 	.word	0x00009fb7
    8104:	00009fce 	.word	0x00009fce

00008108 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8108:	b570      	push	{r4, r5, r6, lr}
    810a:	4604      	mov	r4, r0
	__asm__ volatile(
    810c:	f04f 0340 	mov.w	r3, #64	; 0x40
    8110:	f3ef 8511 	mrs	r5, BASEPRI
    8114:	f383 8812 	msr	BASEPRI_MAX, r3
    8118:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    811c:	484d      	ldr	r0, [pc, #308]	; (8254 <z_timer_expiration_handler+0x14c>)
    811e:	f7fe f8b3 	bl	6288 <z_spin_lock_valid>
    8122:	b968      	cbnz	r0, 8140 <z_timer_expiration_handler+0x38>
    8124:	4a4c      	ldr	r2, [pc, #304]	; (8258 <z_timer_expiration_handler+0x150>)
    8126:	494d      	ldr	r1, [pc, #308]	; (825c <z_timer_expiration_handler+0x154>)
    8128:	484d      	ldr	r0, [pc, #308]	; (8260 <z_timer_expiration_handler+0x158>)
    812a:	238e      	movs	r3, #142	; 0x8e
    812c:	f000 fda1 	bl	8c72 <assert_print>
    8130:	4948      	ldr	r1, [pc, #288]	; (8254 <z_timer_expiration_handler+0x14c>)
    8132:	484c      	ldr	r0, [pc, #304]	; (8264 <z_timer_expiration_handler+0x15c>)
    8134:	f000 fd9d 	bl	8c72 <assert_print>
    8138:	4847      	ldr	r0, [pc, #284]	; (8258 <z_timer_expiration_handler+0x150>)
    813a:	218e      	movs	r1, #142	; 0x8e
    813c:	f000 fd92 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    8140:	4844      	ldr	r0, [pc, #272]	; (8254 <z_timer_expiration_handler+0x14c>)
    8142:	f7fe f8bf 	bl	62c4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8146:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    814a:	3301      	adds	r3, #1
    814c:	f142 0200 	adc.w	r2, r2, #0
    8150:	2b02      	cmp	r3, #2
    8152:	f172 0200 	sbcs.w	r2, r2, #0
    8156:	d305      	bcc.n	8164 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8158:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    815c:	4942      	ldr	r1, [pc, #264]	; (8268 <z_timer_expiration_handler+0x160>)
    815e:	4620      	mov	r0, r4
    8160:	f7ff fd1a 	bl	7b98 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8164:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8166:	3301      	adds	r3, #1
    8168:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    816a:	6a23      	ldr	r3, [r4, #32]
    816c:	2b00      	cmp	r3, #0
    816e:	d035      	beq.n	81dc <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8170:	4838      	ldr	r0, [pc, #224]	; (8254 <z_timer_expiration_handler+0x14c>)
    8172:	f7fe f897 	bl	62a4 <z_spin_unlock_valid>
    8176:	b968      	cbnz	r0, 8194 <z_timer_expiration_handler+0x8c>
    8178:	4a37      	ldr	r2, [pc, #220]	; (8258 <z_timer_expiration_handler+0x150>)
    817a:	493c      	ldr	r1, [pc, #240]	; (826c <z_timer_expiration_handler+0x164>)
    817c:	4838      	ldr	r0, [pc, #224]	; (8260 <z_timer_expiration_handler+0x158>)
    817e:	23b9      	movs	r3, #185	; 0xb9
    8180:	f000 fd77 	bl	8c72 <assert_print>
    8184:	4933      	ldr	r1, [pc, #204]	; (8254 <z_timer_expiration_handler+0x14c>)
    8186:	483a      	ldr	r0, [pc, #232]	; (8270 <z_timer_expiration_handler+0x168>)
    8188:	f000 fd73 	bl	8c72 <assert_print>
    818c:	4832      	ldr	r0, [pc, #200]	; (8258 <z_timer_expiration_handler+0x150>)
    818e:	21b9      	movs	r1, #185	; 0xb9
    8190:	f000 fd68 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    8194:	f385 8811 	msr	BASEPRI, r5
    8198:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    819c:	6a23      	ldr	r3, [r4, #32]
    819e:	4620      	mov	r0, r4
    81a0:	4798      	blx	r3
	__asm__ volatile(
    81a2:	f04f 0340 	mov.w	r3, #64	; 0x40
    81a6:	f3ef 8511 	mrs	r5, BASEPRI
    81aa:	f383 8812 	msr	BASEPRI_MAX, r3
    81ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81b2:	4828      	ldr	r0, [pc, #160]	; (8254 <z_timer_expiration_handler+0x14c>)
    81b4:	f7fe f868 	bl	6288 <z_spin_lock_valid>
    81b8:	b968      	cbnz	r0, 81d6 <z_timer_expiration_handler+0xce>
    81ba:	4a27      	ldr	r2, [pc, #156]	; (8258 <z_timer_expiration_handler+0x150>)
    81bc:	4927      	ldr	r1, [pc, #156]	; (825c <z_timer_expiration_handler+0x154>)
    81be:	4828      	ldr	r0, [pc, #160]	; (8260 <z_timer_expiration_handler+0x158>)
    81c0:	238e      	movs	r3, #142	; 0x8e
    81c2:	f000 fd56 	bl	8c72 <assert_print>
    81c6:	4923      	ldr	r1, [pc, #140]	; (8254 <z_timer_expiration_handler+0x14c>)
    81c8:	4826      	ldr	r0, [pc, #152]	; (8264 <z_timer_expiration_handler+0x15c>)
    81ca:	f000 fd52 	bl	8c72 <assert_print>
    81ce:	4822      	ldr	r0, [pc, #136]	; (8258 <z_timer_expiration_handler+0x150>)
    81d0:	218e      	movs	r1, #142	; 0x8e
    81d2:	f000 fd47 	bl	8c64 <assert_post_action>
	z_spin_lock_set_owner(l);
    81d6:	481f      	ldr	r0, [pc, #124]	; (8254 <z_timer_expiration_handler+0x14c>)
    81d8:	f7fe f874 	bl	62c4 <z_spin_lock_set_owner>
	return list->head == list;
    81dc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81e0:	42a6      	cmp	r6, r4
    81e2:	d000      	beq.n	81e6 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    81e4:	b9b6      	cbnz	r6, 8214 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81e6:	481b      	ldr	r0, [pc, #108]	; (8254 <z_timer_expiration_handler+0x14c>)
    81e8:	f7fe f85c 	bl	62a4 <z_spin_unlock_valid>
    81ec:	b968      	cbnz	r0, 820a <z_timer_expiration_handler+0x102>
    81ee:	4a1a      	ldr	r2, [pc, #104]	; (8258 <z_timer_expiration_handler+0x150>)
    81f0:	491e      	ldr	r1, [pc, #120]	; (826c <z_timer_expiration_handler+0x164>)
    81f2:	481b      	ldr	r0, [pc, #108]	; (8260 <z_timer_expiration_handler+0x158>)
    81f4:	23b9      	movs	r3, #185	; 0xb9
    81f6:	f000 fd3c 	bl	8c72 <assert_print>
    81fa:	4916      	ldr	r1, [pc, #88]	; (8254 <z_timer_expiration_handler+0x14c>)
    81fc:	481c      	ldr	r0, [pc, #112]	; (8270 <z_timer_expiration_handler+0x168>)
    81fe:	f000 fd38 	bl	8c72 <assert_print>
    8202:	4815      	ldr	r0, [pc, #84]	; (8258 <z_timer_expiration_handler+0x150>)
    8204:	21b9      	movs	r1, #185	; 0xb9
    8206:	f000 fd2d 	bl	8c64 <assert_post_action>
	__asm__ volatile(
    820a:	f385 8811 	msr	BASEPRI, r5
    820e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    8212:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    8214:	4630      	mov	r0, r6
    8216:	f7fe fb8f 	bl	6938 <z_unpend_thread_no_timeout>
    821a:	2300      	movs	r3, #0
    821c:	480d      	ldr	r0, [pc, #52]	; (8254 <z_timer_expiration_handler+0x14c>)
    821e:	67b3      	str	r3, [r6, #120]	; 0x78
    8220:	f7fe f840 	bl	62a4 <z_spin_unlock_valid>
    8224:	b968      	cbnz	r0, 8242 <z_timer_expiration_handler+0x13a>
    8226:	4a0c      	ldr	r2, [pc, #48]	; (8258 <z_timer_expiration_handler+0x150>)
    8228:	4910      	ldr	r1, [pc, #64]	; (826c <z_timer_expiration_handler+0x164>)
    822a:	480d      	ldr	r0, [pc, #52]	; (8260 <z_timer_expiration_handler+0x158>)
    822c:	23b9      	movs	r3, #185	; 0xb9
    822e:	f000 fd20 	bl	8c72 <assert_print>
    8232:	4908      	ldr	r1, [pc, #32]	; (8254 <z_timer_expiration_handler+0x14c>)
    8234:	480e      	ldr	r0, [pc, #56]	; (8270 <z_timer_expiration_handler+0x168>)
    8236:	f000 fd1c 	bl	8c72 <assert_print>
    823a:	4807      	ldr	r0, [pc, #28]	; (8258 <z_timer_expiration_handler+0x150>)
    823c:	21b9      	movs	r1, #185	; 0xb9
    823e:	f000 fd11 	bl	8c64 <assert_post_action>
    8242:	f385 8811 	msr	BASEPRI, r5
    8246:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    824a:	4630      	mov	r0, r6
}
    824c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    8250:	f7fe be04 	b.w	6e5c <z_ready_thread>
    8254:	20000c78 	.word	0x20000c78
    8258:	00009f8a 	.word	0x00009f8a
    825c:	00009fe3 	.word	0x00009fe3
    8260:	00009bef 	.word	0x00009bef
    8264:	00009ff8 	.word	0x00009ff8
    8268:	00008109 	.word	0x00008109
    826c:	00009fb7 	.word	0x00009fb7
    8270:	00009fce 	.word	0x00009fce

00008274 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    827c:	bf08      	it	eq
    827e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8282:	4605      	mov	r5, r0
    8284:	4614      	mov	r4, r2
    8286:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    828a:	4619      	mov	r1, r3
    828c:	4691      	mov	r9, r2
    828e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8290:	d037      	beq.n	8302 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8292:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8296:	bf08      	it	eq
    8298:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    829c:	4637      	mov	r7, r6
    829e:	4682      	mov	sl, r0
    82a0:	d011      	beq.n	82c6 <z_impl_k_timer_start+0x52>
    82a2:	ea50 0306 	orrs.w	r3, r0, r6
    82a6:	d00e      	beq.n	82c6 <z_impl_k_timer_start+0x52>
    82a8:	1c72      	adds	r2, r6, #1
    82aa:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    82ae:	db0a      	blt.n	82c6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    82b0:	2e02      	cmp	r6, #2
    82b2:	4684      	mov	ip, r0
    82b4:	f170 0000 	sbcs.w	r0, r0, #0
    82b8:	bfbc      	itt	lt
    82ba:	2702      	movlt	r7, #2
    82bc:	f04f 0c00 	movlt.w	ip, #0
    82c0:	3f01      	subs	r7, #1
    82c2:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    82c6:	1c63      	adds	r3, r4, #1
    82c8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    82cc:	db0a      	blt.n	82e4 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    82ce:	2c01      	cmp	r4, #1
    82d0:	f171 0300 	sbcs.w	r3, r1, #0
    82d4:	4622      	mov	r2, r4
    82d6:	bfbc      	itt	lt
    82d8:	2201      	movlt	r2, #1
    82da:	2100      	movlt	r1, #0
    82dc:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    82e0:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    82e4:	4628      	mov	r0, r5
    82e6:	f7ff fd1f 	bl	7d28 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    82ea:	2300      	movs	r3, #0
    82ec:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    82ee:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    82f2:	464a      	mov	r2, r9
    82f4:	4643      	mov	r3, r8
    82f6:	4628      	mov	r0, r5
    82f8:	4903      	ldr	r1, [pc, #12]	; (8308 <z_impl_k_timer_start+0x94>)
		     duration);
}
    82fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    82fe:	f7ff bc4b 	b.w	7b98 <z_add_timeout>
}
    8302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8306:	bf00      	nop
    8308:	00008109 	.word	0x00008109

0000830c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    830c:	4b01      	ldr	r3, [pc, #4]	; (8314 <k_thread_system_pool_assign+0x8>)
    830e:	6703      	str	r3, [r0, #112]	; 0x70
}
    8310:	4770      	bx	lr
    8312:	bf00      	nop
    8314:	200001f4 	.word	0x200001f4

00008318 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8318:	4a02      	ldr	r2, [pc, #8]	; (8324 <boot_banner+0xc>)
    831a:	4903      	ldr	r1, [pc, #12]	; (8328 <boot_banner+0x10>)
    831c:	4803      	ldr	r0, [pc, #12]	; (832c <boot_banner+0x14>)
    831e:	f000 bbae 	b.w	8a7e <printk>
    8322:	bf00      	nop
    8324:	0000b432 	.word	0x0000b432
    8328:	0000b62a 	.word	0x0000b62a
    832c:	0000b637 	.word	0x0000b637

00008330 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8330:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8332:	4c0e      	ldr	r4, [pc, #56]	; (836c <statics_init+0x3c>)
    8334:	4d0e      	ldr	r5, [pc, #56]	; (8370 <statics_init+0x40>)
    8336:	4e0f      	ldr	r6, [pc, #60]	; (8374 <statics_init+0x44>)
    8338:	42ac      	cmp	r4, r5
    833a:	d90c      	bls.n	8356 <statics_init+0x26>
    833c:	490e      	ldr	r1, [pc, #56]	; (8378 <statics_init+0x48>)
    833e:	480f      	ldr	r0, [pc, #60]	; (837c <statics_init+0x4c>)
    8340:	2318      	movs	r3, #24
    8342:	4632      	mov	r2, r6
    8344:	f000 fc95 	bl	8c72 <assert_print>
    8348:	480d      	ldr	r0, [pc, #52]	; (8380 <statics_init+0x50>)
    834a:	f000 fc92 	bl	8c72 <assert_print>
    834e:	2118      	movs	r1, #24
    8350:	4630      	mov	r0, r6
    8352:	f000 fc87 	bl	8c64 <assert_post_action>
    8356:	42ac      	cmp	r4, r5
    8358:	d301      	bcc.n	835e <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    835a:	2000      	movs	r0, #0
    835c:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    835e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8362:	4620      	mov	r0, r4
    8364:	f001 f900 	bl	9568 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8368:	3418      	adds	r4, #24
    836a:	e7e5      	b.n	8338 <statics_init+0x8>
    836c:	200001f4 	.word	0x200001f4
    8370:	2000020c 	.word	0x2000020c
    8374:	0000b65e 	.word	0x0000b65e
    8378:	0000b680 	.word	0x0000b680
    837c:	00009bef 	.word	0x00009bef
    8380:	0000b207 	.word	0x0000b207

00008384 <__udivmoddi4>:
    8384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8388:	9e08      	ldr	r6, [sp, #32]
    838a:	460d      	mov	r5, r1
    838c:	4604      	mov	r4, r0
    838e:	460f      	mov	r7, r1
    8390:	2b00      	cmp	r3, #0
    8392:	d14a      	bne.n	842a <__udivmoddi4+0xa6>
    8394:	428a      	cmp	r2, r1
    8396:	4694      	mov	ip, r2
    8398:	d965      	bls.n	8466 <__udivmoddi4+0xe2>
    839a:	fab2 f382 	clz	r3, r2
    839e:	b143      	cbz	r3, 83b2 <__udivmoddi4+0x2e>
    83a0:	fa02 fc03 	lsl.w	ip, r2, r3
    83a4:	f1c3 0220 	rsb	r2, r3, #32
    83a8:	409f      	lsls	r7, r3
    83aa:	fa20 f202 	lsr.w	r2, r0, r2
    83ae:	4317      	orrs	r7, r2
    83b0:	409c      	lsls	r4, r3
    83b2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    83b6:	fa1f f58c 	uxth.w	r5, ip
    83ba:	fbb7 f1fe 	udiv	r1, r7, lr
    83be:	0c22      	lsrs	r2, r4, #16
    83c0:	fb0e 7711 	mls	r7, lr, r1, r7
    83c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    83c8:	fb01 f005 	mul.w	r0, r1, r5
    83cc:	4290      	cmp	r0, r2
    83ce:	d90a      	bls.n	83e6 <__udivmoddi4+0x62>
    83d0:	eb1c 0202 	adds.w	r2, ip, r2
    83d4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    83d8:	f080 811b 	bcs.w	8612 <__udivmoddi4+0x28e>
    83dc:	4290      	cmp	r0, r2
    83de:	f240 8118 	bls.w	8612 <__udivmoddi4+0x28e>
    83e2:	3902      	subs	r1, #2
    83e4:	4462      	add	r2, ip
    83e6:	1a12      	subs	r2, r2, r0
    83e8:	b2a4      	uxth	r4, r4
    83ea:	fbb2 f0fe 	udiv	r0, r2, lr
    83ee:	fb0e 2210 	mls	r2, lr, r0, r2
    83f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    83f6:	fb00 f505 	mul.w	r5, r0, r5
    83fa:	42a5      	cmp	r5, r4
    83fc:	d90a      	bls.n	8414 <__udivmoddi4+0x90>
    83fe:	eb1c 0404 	adds.w	r4, ip, r4
    8402:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    8406:	f080 8106 	bcs.w	8616 <__udivmoddi4+0x292>
    840a:	42a5      	cmp	r5, r4
    840c:	f240 8103 	bls.w	8616 <__udivmoddi4+0x292>
    8410:	4464      	add	r4, ip
    8412:	3802      	subs	r0, #2
    8414:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8418:	1b64      	subs	r4, r4, r5
    841a:	2100      	movs	r1, #0
    841c:	b11e      	cbz	r6, 8426 <__udivmoddi4+0xa2>
    841e:	40dc      	lsrs	r4, r3
    8420:	2300      	movs	r3, #0
    8422:	e9c6 4300 	strd	r4, r3, [r6]
    8426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    842a:	428b      	cmp	r3, r1
    842c:	d908      	bls.n	8440 <__udivmoddi4+0xbc>
    842e:	2e00      	cmp	r6, #0
    8430:	f000 80ec 	beq.w	860c <__udivmoddi4+0x288>
    8434:	2100      	movs	r1, #0
    8436:	e9c6 0500 	strd	r0, r5, [r6]
    843a:	4608      	mov	r0, r1
    843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8440:	fab3 f183 	clz	r1, r3
    8444:	2900      	cmp	r1, #0
    8446:	d149      	bne.n	84dc <__udivmoddi4+0x158>
    8448:	42ab      	cmp	r3, r5
    844a:	d302      	bcc.n	8452 <__udivmoddi4+0xce>
    844c:	4282      	cmp	r2, r0
    844e:	f200 80f7 	bhi.w	8640 <__udivmoddi4+0x2bc>
    8452:	1a84      	subs	r4, r0, r2
    8454:	eb65 0203 	sbc.w	r2, r5, r3
    8458:	2001      	movs	r0, #1
    845a:	4617      	mov	r7, r2
    845c:	2e00      	cmp	r6, #0
    845e:	d0e2      	beq.n	8426 <__udivmoddi4+0xa2>
    8460:	e9c6 4700 	strd	r4, r7, [r6]
    8464:	e7df      	b.n	8426 <__udivmoddi4+0xa2>
    8466:	b902      	cbnz	r2, 846a <__udivmoddi4+0xe6>
    8468:	deff      	udf	#255	; 0xff
    846a:	fab2 f382 	clz	r3, r2
    846e:	2b00      	cmp	r3, #0
    8470:	f040 808f 	bne.w	8592 <__udivmoddi4+0x20e>
    8474:	1a8a      	subs	r2, r1, r2
    8476:	ea4f 471c 	mov.w	r7, ip, lsr #16
    847a:	fa1f fe8c 	uxth.w	lr, ip
    847e:	2101      	movs	r1, #1
    8480:	fbb2 f5f7 	udiv	r5, r2, r7
    8484:	fb07 2015 	mls	r0, r7, r5, r2
    8488:	0c22      	lsrs	r2, r4, #16
    848a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    848e:	fb0e f005 	mul.w	r0, lr, r5
    8492:	4290      	cmp	r0, r2
    8494:	d908      	bls.n	84a8 <__udivmoddi4+0x124>
    8496:	eb1c 0202 	adds.w	r2, ip, r2
    849a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    849e:	d202      	bcs.n	84a6 <__udivmoddi4+0x122>
    84a0:	4290      	cmp	r0, r2
    84a2:	f200 80ca 	bhi.w	863a <__udivmoddi4+0x2b6>
    84a6:	4645      	mov	r5, r8
    84a8:	1a12      	subs	r2, r2, r0
    84aa:	b2a4      	uxth	r4, r4
    84ac:	fbb2 f0f7 	udiv	r0, r2, r7
    84b0:	fb07 2210 	mls	r2, r7, r0, r2
    84b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    84b8:	fb0e fe00 	mul.w	lr, lr, r0
    84bc:	45a6      	cmp	lr, r4
    84be:	d908      	bls.n	84d2 <__udivmoddi4+0x14e>
    84c0:	eb1c 0404 	adds.w	r4, ip, r4
    84c4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    84c8:	d202      	bcs.n	84d0 <__udivmoddi4+0x14c>
    84ca:	45a6      	cmp	lr, r4
    84cc:	f200 80ba 	bhi.w	8644 <__udivmoddi4+0x2c0>
    84d0:	4610      	mov	r0, r2
    84d2:	eba4 040e 	sub.w	r4, r4, lr
    84d6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    84da:	e79f      	b.n	841c <__udivmoddi4+0x98>
    84dc:	f1c1 0720 	rsb	r7, r1, #32
    84e0:	408b      	lsls	r3, r1
    84e2:	fa22 fc07 	lsr.w	ip, r2, r7
    84e6:	ea4c 0c03 	orr.w	ip, ip, r3
    84ea:	fa05 f401 	lsl.w	r4, r5, r1
    84ee:	fa20 f307 	lsr.w	r3, r0, r7
    84f2:	40fd      	lsrs	r5, r7
    84f4:	4323      	orrs	r3, r4
    84f6:	fa00 f901 	lsl.w	r9, r0, r1
    84fa:	ea4f 401c 	mov.w	r0, ip, lsr #16
    84fe:	fa1f fe8c 	uxth.w	lr, ip
    8502:	fbb5 f8f0 	udiv	r8, r5, r0
    8506:	0c1c      	lsrs	r4, r3, #16
    8508:	fb00 5518 	mls	r5, r0, r8, r5
    850c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8510:	fb08 f50e 	mul.w	r5, r8, lr
    8514:	42a5      	cmp	r5, r4
    8516:	fa02 f201 	lsl.w	r2, r2, r1
    851a:	d90b      	bls.n	8534 <__udivmoddi4+0x1b0>
    851c:	eb1c 0404 	adds.w	r4, ip, r4
    8520:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    8524:	f080 8087 	bcs.w	8636 <__udivmoddi4+0x2b2>
    8528:	42a5      	cmp	r5, r4
    852a:	f240 8084 	bls.w	8636 <__udivmoddi4+0x2b2>
    852e:	f1a8 0802 	sub.w	r8, r8, #2
    8532:	4464      	add	r4, ip
    8534:	1b64      	subs	r4, r4, r5
    8536:	b29d      	uxth	r5, r3
    8538:	fbb4 f3f0 	udiv	r3, r4, r0
    853c:	fb00 4413 	mls	r4, r0, r3, r4
    8540:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    8544:	fb03 fe0e 	mul.w	lr, r3, lr
    8548:	45a6      	cmp	lr, r4
    854a:	d908      	bls.n	855e <__udivmoddi4+0x1da>
    854c:	eb1c 0404 	adds.w	r4, ip, r4
    8550:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    8554:	d26b      	bcs.n	862e <__udivmoddi4+0x2aa>
    8556:	45a6      	cmp	lr, r4
    8558:	d969      	bls.n	862e <__udivmoddi4+0x2aa>
    855a:	3b02      	subs	r3, #2
    855c:	4464      	add	r4, ip
    855e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
    8562:	fba0 8302 	umull	r8, r3, r0, r2
    8566:	eba4 040e 	sub.w	r4, r4, lr
    856a:	429c      	cmp	r4, r3
    856c:	46c6      	mov	lr, r8
    856e:	461d      	mov	r5, r3
    8570:	d355      	bcc.n	861e <__udivmoddi4+0x29a>
    8572:	d052      	beq.n	861a <__udivmoddi4+0x296>
    8574:	b156      	cbz	r6, 858c <__udivmoddi4+0x208>
    8576:	ebb9 030e 	subs.w	r3, r9, lr
    857a:	eb64 0405 	sbc.w	r4, r4, r5
    857e:	fa04 f707 	lsl.w	r7, r4, r7
    8582:	40cb      	lsrs	r3, r1
    8584:	40cc      	lsrs	r4, r1
    8586:	431f      	orrs	r7, r3
    8588:	e9c6 7400 	strd	r7, r4, [r6]
    858c:	2100      	movs	r1, #0
    858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8592:	f1c3 0120 	rsb	r1, r3, #32
    8596:	fa02 fc03 	lsl.w	ip, r2, r3
    859a:	fa20 f201 	lsr.w	r2, r0, r1
    859e:	fa25 f101 	lsr.w	r1, r5, r1
    85a2:	409d      	lsls	r5, r3
    85a4:	432a      	orrs	r2, r5
    85a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
    85aa:	fa1f fe8c 	uxth.w	lr, ip
    85ae:	fbb1 f0f7 	udiv	r0, r1, r7
    85b2:	fb07 1510 	mls	r5, r7, r0, r1
    85b6:	0c11      	lsrs	r1, r2, #16
    85b8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    85bc:	fb00 f50e 	mul.w	r5, r0, lr
    85c0:	428d      	cmp	r5, r1
    85c2:	fa04 f403 	lsl.w	r4, r4, r3
    85c6:	d908      	bls.n	85da <__udivmoddi4+0x256>
    85c8:	eb1c 0101 	adds.w	r1, ip, r1
    85cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    85d0:	d22f      	bcs.n	8632 <__udivmoddi4+0x2ae>
    85d2:	428d      	cmp	r5, r1
    85d4:	d92d      	bls.n	8632 <__udivmoddi4+0x2ae>
    85d6:	3802      	subs	r0, #2
    85d8:	4461      	add	r1, ip
    85da:	1b49      	subs	r1, r1, r5
    85dc:	b292      	uxth	r2, r2
    85de:	fbb1 f5f7 	udiv	r5, r1, r7
    85e2:	fb07 1115 	mls	r1, r7, r5, r1
    85e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    85ea:	fb05 f10e 	mul.w	r1, r5, lr
    85ee:	4291      	cmp	r1, r2
    85f0:	d908      	bls.n	8604 <__udivmoddi4+0x280>
    85f2:	eb1c 0202 	adds.w	r2, ip, r2
    85f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    85fa:	d216      	bcs.n	862a <__udivmoddi4+0x2a6>
    85fc:	4291      	cmp	r1, r2
    85fe:	d914      	bls.n	862a <__udivmoddi4+0x2a6>
    8600:	3d02      	subs	r5, #2
    8602:	4462      	add	r2, ip
    8604:	1a52      	subs	r2, r2, r1
    8606:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    860a:	e739      	b.n	8480 <__udivmoddi4+0xfc>
    860c:	4631      	mov	r1, r6
    860e:	4630      	mov	r0, r6
    8610:	e709      	b.n	8426 <__udivmoddi4+0xa2>
    8612:	4639      	mov	r1, r7
    8614:	e6e7      	b.n	83e6 <__udivmoddi4+0x62>
    8616:	4610      	mov	r0, r2
    8618:	e6fc      	b.n	8414 <__udivmoddi4+0x90>
    861a:	45c1      	cmp	r9, r8
    861c:	d2aa      	bcs.n	8574 <__udivmoddi4+0x1f0>
    861e:	ebb8 0e02 	subs.w	lr, r8, r2
    8622:	eb63 050c 	sbc.w	r5, r3, ip
    8626:	3801      	subs	r0, #1
    8628:	e7a4      	b.n	8574 <__udivmoddi4+0x1f0>
    862a:	4645      	mov	r5, r8
    862c:	e7ea      	b.n	8604 <__udivmoddi4+0x280>
    862e:	4603      	mov	r3, r0
    8630:	e795      	b.n	855e <__udivmoddi4+0x1da>
    8632:	4640      	mov	r0, r8
    8634:	e7d1      	b.n	85da <__udivmoddi4+0x256>
    8636:	46d0      	mov	r8, sl
    8638:	e77c      	b.n	8534 <__udivmoddi4+0x1b0>
    863a:	3d02      	subs	r5, #2
    863c:	4462      	add	r2, ip
    863e:	e733      	b.n	84a8 <__udivmoddi4+0x124>
    8640:	4608      	mov	r0, r1
    8642:	e70b      	b.n	845c <__udivmoddi4+0xd8>
    8644:	4464      	add	r4, ip
    8646:	3802      	subs	r0, #2
    8648:	e743      	b.n	84d2 <__udivmoddi4+0x14e>
    864a:	bf00      	nop

0000864c <nrf_cc3xx_platform_init_no_rng>:
    864c:	b510      	push	{r4, lr}
    864e:	4c0a      	ldr	r4, [pc, #40]	; (8678 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8650:	6823      	ldr	r3, [r4, #0]
    8652:	b11b      	cbz	r3, 865c <nrf_cc3xx_platform_init_no_rng+0x10>
    8654:	2301      	movs	r3, #1
    8656:	6023      	str	r3, [r4, #0]
    8658:	2000      	movs	r0, #0
    865a:	bd10      	pop	{r4, pc}
    865c:	f000 f8ce 	bl	87fc <CC_LibInitNoRng>
    8660:	2800      	cmp	r0, #0
    8662:	d0f7      	beq.n	8654 <nrf_cc3xx_platform_init_no_rng+0x8>
    8664:	3801      	subs	r0, #1
    8666:	2806      	cmp	r0, #6
    8668:	d803      	bhi.n	8672 <nrf_cc3xx_platform_init_no_rng+0x26>
    866a:	4b04      	ldr	r3, [pc, #16]	; (867c <nrf_cc3xx_platform_init_no_rng+0x30>)
    866c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8670:	bd10      	pop	{r4, pc}
    8672:	4803      	ldr	r0, [pc, #12]	; (8680 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8674:	bd10      	pop	{r4, pc}
    8676:	bf00      	nop
    8678:	20000c7c 	.word	0x20000c7c
    867c:	00009af0 	.word	0x00009af0
    8680:	ffff8ffe 	.word	0xffff8ffe

00008684 <nrf_cc3xx_platform_abort>:
    8684:	f3bf 8f4f 	dsb	sy
    8688:	4905      	ldr	r1, [pc, #20]	; (86a0 <nrf_cc3xx_platform_abort+0x1c>)
    868a:	4b06      	ldr	r3, [pc, #24]	; (86a4 <nrf_cc3xx_platform_abort+0x20>)
    868c:	68ca      	ldr	r2, [r1, #12]
    868e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8692:	4313      	orrs	r3, r2
    8694:	60cb      	str	r3, [r1, #12]
    8696:	f3bf 8f4f 	dsb	sy
    869a:	bf00      	nop
    869c:	e7fd      	b.n	869a <nrf_cc3xx_platform_abort+0x16>
    869e:	bf00      	nop
    86a0:	e000ed00 	.word	0xe000ed00
    86a4:	05fa0004 	.word	0x05fa0004

000086a8 <CC_PalAbort>:
    86a8:	b410      	push	{r4}
    86aa:	4b09      	ldr	r3, [pc, #36]	; (86d0 <CC_PalAbort+0x28>)
    86ac:	4909      	ldr	r1, [pc, #36]	; (86d4 <CC_PalAbort+0x2c>)
    86ae:	4c0a      	ldr	r4, [pc, #40]	; (86d8 <CC_PalAbort+0x30>)
    86b0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    86b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    86b8:	6849      	ldr	r1, [r1, #4]
    86ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    86be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    86c2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    86c6:	2300      	movs	r3, #0
    86c8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    86cc:	bc10      	pop	{r4}
    86ce:	4708      	bx	r1
    86d0:	5002b000 	.word	0x5002b000
    86d4:	2000017c 	.word	0x2000017c
    86d8:	5002a000 	.word	0x5002a000

000086dc <nrf_cc3xx_platform_set_abort>:
    86dc:	e9d0 1200 	ldrd	r1, r2, [r0]
    86e0:	4b01      	ldr	r3, [pc, #4]	; (86e8 <nrf_cc3xx_platform_set_abort+0xc>)
    86e2:	e9c3 1200 	strd	r1, r2, [r3]
    86e6:	4770      	bx	lr
    86e8:	2000017c 	.word	0x2000017c

000086ec <mutex_free>:
    86ec:	b510      	push	{r4, lr}
    86ee:	4604      	mov	r4, r0
    86f0:	b130      	cbz	r0, 8700 <mutex_free+0x14>
    86f2:	6863      	ldr	r3, [r4, #4]
    86f4:	06db      	lsls	r3, r3, #27
    86f6:	d502      	bpl.n	86fe <mutex_free+0x12>
    86f8:	2300      	movs	r3, #0
    86fa:	6023      	str	r3, [r4, #0]
    86fc:	6063      	str	r3, [r4, #4]
    86fe:	bd10      	pop	{r4, pc}
    8700:	4b02      	ldr	r3, [pc, #8]	; (870c <mutex_free+0x20>)
    8702:	4803      	ldr	r0, [pc, #12]	; (8710 <mutex_free+0x24>)
    8704:	685b      	ldr	r3, [r3, #4]
    8706:	4798      	blx	r3
    8708:	e7f3      	b.n	86f2 <mutex_free+0x6>
    870a:	bf00      	nop
    870c:	2000017c 	.word	0x2000017c
    8710:	00009b0c 	.word	0x00009b0c

00008714 <mutex_lock>:
    8714:	b1b0      	cbz	r0, 8744 <mutex_lock+0x30>
    8716:	6843      	ldr	r3, [r0, #4]
    8718:	b193      	cbz	r3, 8740 <mutex_lock+0x2c>
    871a:	06db      	lsls	r3, r3, #27
    871c:	d50e      	bpl.n	873c <mutex_lock+0x28>
    871e:	2301      	movs	r3, #1
    8720:	e850 2f00 	ldrex	r2, [r0]
    8724:	4619      	mov	r1, r3
    8726:	e840 1c00 	strex	ip, r1, [r0]
    872a:	f09c 0f00 	teq	ip, #0
    872e:	d1f7      	bne.n	8720 <mutex_lock+0xc>
    8730:	2a01      	cmp	r2, #1
    8732:	d0f5      	beq.n	8720 <mutex_lock+0xc>
    8734:	f3bf 8f5f 	dmb	sy
    8738:	2000      	movs	r0, #0
    873a:	4770      	bx	lr
    873c:	4803      	ldr	r0, [pc, #12]	; (874c <mutex_lock+0x38>)
    873e:	4770      	bx	lr
    8740:	4803      	ldr	r0, [pc, #12]	; (8750 <mutex_lock+0x3c>)
    8742:	4770      	bx	lr
    8744:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8748:	4770      	bx	lr
    874a:	bf00      	nop
    874c:	ffff8fe9 	.word	0xffff8fe9
    8750:	ffff8fea 	.word	0xffff8fea

00008754 <mutex_unlock>:
    8754:	b168      	cbz	r0, 8772 <mutex_unlock+0x1e>
    8756:	6843      	ldr	r3, [r0, #4]
    8758:	b13b      	cbz	r3, 876a <mutex_unlock+0x16>
    875a:	06db      	lsls	r3, r3, #27
    875c:	d507      	bpl.n	876e <mutex_unlock+0x1a>
    875e:	f3bf 8f5f 	dmb	sy
    8762:	2300      	movs	r3, #0
    8764:	6003      	str	r3, [r0, #0]
    8766:	4618      	mov	r0, r3
    8768:	4770      	bx	lr
    876a:	4803      	ldr	r0, [pc, #12]	; (8778 <mutex_unlock+0x24>)
    876c:	4770      	bx	lr
    876e:	4803      	ldr	r0, [pc, #12]	; (877c <mutex_unlock+0x28>)
    8770:	4770      	bx	lr
    8772:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8776:	4770      	bx	lr
    8778:	ffff8fea 	.word	0xffff8fea
    877c:	ffff8fe9 	.word	0xffff8fe9

00008780 <mutex_init>:
    8780:	b510      	push	{r4, lr}
    8782:	4604      	mov	r4, r0
    8784:	b120      	cbz	r0, 8790 <mutex_init+0x10>
    8786:	2200      	movs	r2, #0
    8788:	2311      	movs	r3, #17
    878a:	6022      	str	r2, [r4, #0]
    878c:	6063      	str	r3, [r4, #4]
    878e:	bd10      	pop	{r4, pc}
    8790:	4801      	ldr	r0, [pc, #4]	; (8798 <mutex_init+0x18>)
    8792:	f7ff ff89 	bl	86a8 <CC_PalAbort>
    8796:	e7f6      	b.n	8786 <mutex_init+0x6>
    8798:	00009b34 	.word	0x00009b34

0000879c <nrf_cc3xx_platform_set_mutexes>:
    879c:	b570      	push	{r4, r5, r6, lr}
    879e:	e9d0 2300 	ldrd	r2, r3, [r0]
    87a2:	4c13      	ldr	r4, [pc, #76]	; (87f0 <nrf_cc3xx_platform_set_mutexes+0x54>)
    87a4:	4d13      	ldr	r5, [pc, #76]	; (87f4 <nrf_cc3xx_platform_set_mutexes+0x58>)
    87a6:	6063      	str	r3, [r4, #4]
    87a8:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    87ac:	e9c4 3002 	strd	r3, r0, [r4, #8]
    87b0:	6022      	str	r2, [r4, #0]
    87b2:	4b11      	ldr	r3, [pc, #68]	; (87f8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    87b4:	6808      	ldr	r0, [r1, #0]
    87b6:	6018      	str	r0, [r3, #0]
    87b8:	6848      	ldr	r0, [r1, #4]
    87ba:	6058      	str	r0, [r3, #4]
    87bc:	6888      	ldr	r0, [r1, #8]
    87be:	6098      	str	r0, [r3, #8]
    87c0:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    87c4:	60d8      	str	r0, [r3, #12]
    87c6:	6119      	str	r1, [r3, #16]
    87c8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    87cc:	06db      	lsls	r3, r3, #27
    87ce:	d50d      	bpl.n	87ec <nrf_cc3xx_platform_set_mutexes+0x50>
    87d0:	2300      	movs	r3, #0
    87d2:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    87d6:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    87da:	f505 708a 	add.w	r0, r5, #276	; 0x114
    87de:	4790      	blx	r2
    87e0:	6823      	ldr	r3, [r4, #0]
    87e2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    87e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87ea:	4718      	bx	r3
    87ec:	bd70      	pop	{r4, r5, r6, pc}
    87ee:	bf00      	nop
    87f0:	2000018c 	.word	0x2000018c
    87f4:	20000c94 	.word	0x20000c94
    87f8:	2000019c 	.word	0x2000019c

000087fc <CC_LibInitNoRng>:
    87fc:	b538      	push	{r3, r4, r5, lr}
    87fe:	f000 f82f 	bl	8860 <CC_HalInit>
    8802:	b120      	cbz	r0, 880e <CC_LibInitNoRng+0x12>
    8804:	2403      	movs	r4, #3
    8806:	f000 f863 	bl	88d0 <CC_PalTerminate>
    880a:	4620      	mov	r0, r4
    880c:	bd38      	pop	{r3, r4, r5, pc}
    880e:	f000 f831 	bl	8874 <CC_PalInit>
    8812:	b998      	cbnz	r0, 883c <CC_LibInitNoRng+0x40>
    8814:	f000 f8ac 	bl	8970 <CC_PalPowerSaveModeSelect>
    8818:	b998      	cbnz	r0, 8842 <CC_LibInitNoRng+0x46>
    881a:	4d0f      	ldr	r5, [pc, #60]	; (8858 <CC_LibInitNoRng+0x5c>)
    881c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8820:	0e1b      	lsrs	r3, r3, #24
    8822:	2bf0      	cmp	r3, #240	; 0xf0
    8824:	d108      	bne.n	8838 <CC_LibInitNoRng+0x3c>
    8826:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    882a:	4b0c      	ldr	r3, [pc, #48]	; (885c <CC_LibInitNoRng+0x60>)
    882c:	429a      	cmp	r2, r3
    882e:	d00a      	beq.n	8846 <CC_LibInitNoRng+0x4a>
    8830:	2407      	movs	r4, #7
    8832:	f000 f817 	bl	8864 <CC_HalTerminate>
    8836:	e7e6      	b.n	8806 <CC_LibInitNoRng+0xa>
    8838:	2406      	movs	r4, #6
    883a:	e7fa      	b.n	8832 <CC_LibInitNoRng+0x36>
    883c:	2404      	movs	r4, #4
    883e:	4620      	mov	r0, r4
    8840:	bd38      	pop	{r3, r4, r5, pc}
    8842:	2400      	movs	r4, #0
    8844:	e7f5      	b.n	8832 <CC_LibInitNoRng+0x36>
    8846:	2001      	movs	r0, #1
    8848:	f000 f892 	bl	8970 <CC_PalPowerSaveModeSelect>
    884c:	4604      	mov	r4, r0
    884e:	2800      	cmp	r0, #0
    8850:	d1f7      	bne.n	8842 <CC_LibInitNoRng+0x46>
    8852:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8856:	e7d8      	b.n	880a <CC_LibInitNoRng+0xe>
    8858:	5002b000 	.word	0x5002b000
    885c:	20e00000 	.word	0x20e00000

00008860 <CC_HalInit>:
    8860:	2000      	movs	r0, #0
    8862:	4770      	bx	lr

00008864 <CC_HalTerminate>:
    8864:	2000      	movs	r0, #0
    8866:	4770      	bx	lr

00008868 <CC_HalMaskInterrupt>:
    8868:	4b01      	ldr	r3, [pc, #4]	; (8870 <CC_HalMaskInterrupt+0x8>)
    886a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    886e:	4770      	bx	lr
    8870:	5002b000 	.word	0x5002b000

00008874 <CC_PalInit>:
    8874:	b510      	push	{r4, lr}
    8876:	4811      	ldr	r0, [pc, #68]	; (88bc <CC_PalInit+0x48>)
    8878:	f000 f848 	bl	890c <CC_PalMutexCreate>
    887c:	b100      	cbz	r0, 8880 <CC_PalInit+0xc>
    887e:	bd10      	pop	{r4, pc}
    8880:	480f      	ldr	r0, [pc, #60]	; (88c0 <CC_PalInit+0x4c>)
    8882:	f000 f843 	bl	890c <CC_PalMutexCreate>
    8886:	2800      	cmp	r0, #0
    8888:	d1f9      	bne.n	887e <CC_PalInit+0xa>
    888a:	4c0e      	ldr	r4, [pc, #56]	; (88c4 <CC_PalInit+0x50>)
    888c:	4620      	mov	r0, r4
    888e:	f000 f83d 	bl	890c <CC_PalMutexCreate>
    8892:	2800      	cmp	r0, #0
    8894:	d1f3      	bne.n	887e <CC_PalInit+0xa>
    8896:	4b0c      	ldr	r3, [pc, #48]	; (88c8 <CC_PalInit+0x54>)
    8898:	480c      	ldr	r0, [pc, #48]	; (88cc <CC_PalInit+0x58>)
    889a:	601c      	str	r4, [r3, #0]
    889c:	f000 f836 	bl	890c <CC_PalMutexCreate>
    88a0:	4601      	mov	r1, r0
    88a2:	2800      	cmp	r0, #0
    88a4:	d1eb      	bne.n	887e <CC_PalInit+0xa>
    88a6:	f000 f82d 	bl	8904 <CC_PalDmaInit>
    88aa:	4604      	mov	r4, r0
    88ac:	b108      	cbz	r0, 88b2 <CC_PalInit+0x3e>
    88ae:	4620      	mov	r0, r4
    88b0:	bd10      	pop	{r4, pc}
    88b2:	f000 f83f 	bl	8934 <CC_PalPowerSaveModeInit>
    88b6:	4620      	mov	r0, r4
    88b8:	e7fa      	b.n	88b0 <CC_PalInit+0x3c>
    88ba:	bf00      	nop
    88bc:	200001d4 	.word	0x200001d4
    88c0:	200001c8 	.word	0x200001c8
    88c4:	200001d0 	.word	0x200001d0
    88c8:	200001d8 	.word	0x200001d8
    88cc:	200001cc 	.word	0x200001cc

000088d0 <CC_PalTerminate>:
    88d0:	b508      	push	{r3, lr}
    88d2:	4808      	ldr	r0, [pc, #32]	; (88f4 <CC_PalTerminate+0x24>)
    88d4:	f000 f824 	bl	8920 <CC_PalMutexDestroy>
    88d8:	4807      	ldr	r0, [pc, #28]	; (88f8 <CC_PalTerminate+0x28>)
    88da:	f000 f821 	bl	8920 <CC_PalMutexDestroy>
    88de:	4807      	ldr	r0, [pc, #28]	; (88fc <CC_PalTerminate+0x2c>)
    88e0:	f000 f81e 	bl	8920 <CC_PalMutexDestroy>
    88e4:	4806      	ldr	r0, [pc, #24]	; (8900 <CC_PalTerminate+0x30>)
    88e6:	f000 f81b 	bl	8920 <CC_PalMutexDestroy>
    88ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    88ee:	f000 b80b 	b.w	8908 <CC_PalDmaTerminate>
    88f2:	bf00      	nop
    88f4:	200001d4 	.word	0x200001d4
    88f8:	200001c8 	.word	0x200001c8
    88fc:	200001d0 	.word	0x200001d0
    8900:	200001cc 	.word	0x200001cc

00008904 <CC_PalDmaInit>:
    8904:	2000      	movs	r0, #0
    8906:	4770      	bx	lr

00008908 <CC_PalDmaTerminate>:
    8908:	4770      	bx	lr
    890a:	bf00      	nop

0000890c <CC_PalMutexCreate>:
    890c:	b508      	push	{r3, lr}
    890e:	4b03      	ldr	r3, [pc, #12]	; (891c <CC_PalMutexCreate+0x10>)
    8910:	6802      	ldr	r2, [r0, #0]
    8912:	681b      	ldr	r3, [r3, #0]
    8914:	6810      	ldr	r0, [r2, #0]
    8916:	4798      	blx	r3
    8918:	2000      	movs	r0, #0
    891a:	bd08      	pop	{r3, pc}
    891c:	2000018c 	.word	0x2000018c

00008920 <CC_PalMutexDestroy>:
    8920:	b508      	push	{r3, lr}
    8922:	4b03      	ldr	r3, [pc, #12]	; (8930 <CC_PalMutexDestroy+0x10>)
    8924:	6802      	ldr	r2, [r0, #0]
    8926:	685b      	ldr	r3, [r3, #4]
    8928:	6810      	ldr	r0, [r2, #0]
    892a:	4798      	blx	r3
    892c:	2000      	movs	r0, #0
    892e:	bd08      	pop	{r3, pc}
    8930:	2000018c 	.word	0x2000018c

00008934 <CC_PalPowerSaveModeInit>:
    8934:	b570      	push	{r4, r5, r6, lr}
    8936:	4c09      	ldr	r4, [pc, #36]	; (895c <CC_PalPowerSaveModeInit+0x28>)
    8938:	4d09      	ldr	r5, [pc, #36]	; (8960 <CC_PalPowerSaveModeInit+0x2c>)
    893a:	6920      	ldr	r0, [r4, #16]
    893c:	68ab      	ldr	r3, [r5, #8]
    893e:	4798      	blx	r3
    8940:	b118      	cbz	r0, 894a <CC_PalPowerSaveModeInit+0x16>
    8942:	4b08      	ldr	r3, [pc, #32]	; (8964 <CC_PalPowerSaveModeInit+0x30>)
    8944:	4808      	ldr	r0, [pc, #32]	; (8968 <CC_PalPowerSaveModeInit+0x34>)
    8946:	685b      	ldr	r3, [r3, #4]
    8948:	4798      	blx	r3
    894a:	4a08      	ldr	r2, [pc, #32]	; (896c <CC_PalPowerSaveModeInit+0x38>)
    894c:	68eb      	ldr	r3, [r5, #12]
    894e:	6920      	ldr	r0, [r4, #16]
    8950:	2100      	movs	r1, #0
    8952:	6011      	str	r1, [r2, #0]
    8954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8958:	4718      	bx	r3
    895a:	bf00      	nop
    895c:	2000019c 	.word	0x2000019c
    8960:	2000018c 	.word	0x2000018c
    8964:	2000017c 	.word	0x2000017c
    8968:	00009b58 	.word	0x00009b58
    896c:	20000c90 	.word	0x20000c90

00008970 <CC_PalPowerSaveModeSelect>:
    8970:	b570      	push	{r4, r5, r6, lr}
    8972:	4d1b      	ldr	r5, [pc, #108]	; (89e0 <CC_PalPowerSaveModeSelect+0x70>)
    8974:	4e1b      	ldr	r6, [pc, #108]	; (89e4 <CC_PalPowerSaveModeSelect+0x74>)
    8976:	4604      	mov	r4, r0
    8978:	68b2      	ldr	r2, [r6, #8]
    897a:	6928      	ldr	r0, [r5, #16]
    897c:	4790      	blx	r2
    897e:	b9f8      	cbnz	r0, 89c0 <CC_PalPowerSaveModeSelect+0x50>
    8980:	b15c      	cbz	r4, 899a <CC_PalPowerSaveModeSelect+0x2a>
    8982:	4c19      	ldr	r4, [pc, #100]	; (89e8 <CC_PalPowerSaveModeSelect+0x78>)
    8984:	6823      	ldr	r3, [r4, #0]
    8986:	b1b3      	cbz	r3, 89b6 <CC_PalPowerSaveModeSelect+0x46>
    8988:	2b01      	cmp	r3, #1
    898a:	d01b      	beq.n	89c4 <CC_PalPowerSaveModeSelect+0x54>
    898c:	3b01      	subs	r3, #1
    898e:	6023      	str	r3, [r4, #0]
    8990:	6928      	ldr	r0, [r5, #16]
    8992:	68f3      	ldr	r3, [r6, #12]
    8994:	4798      	blx	r3
    8996:	2000      	movs	r0, #0
    8998:	bd70      	pop	{r4, r5, r6, pc}
    899a:	4c13      	ldr	r4, [pc, #76]	; (89e8 <CC_PalPowerSaveModeSelect+0x78>)
    899c:	6821      	ldr	r1, [r4, #0]
    899e:	b941      	cbnz	r1, 89b2 <CC_PalPowerSaveModeSelect+0x42>
    89a0:	4b12      	ldr	r3, [pc, #72]	; (89ec <CC_PalPowerSaveModeSelect+0x7c>)
    89a2:	2201      	movs	r2, #1
    89a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    89a8:	4a11      	ldr	r2, [pc, #68]	; (89f0 <CC_PalPowerSaveModeSelect+0x80>)
    89aa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    89ae:	2b00      	cmp	r3, #0
    89b0:	d1fb      	bne.n	89aa <CC_PalPowerSaveModeSelect+0x3a>
    89b2:	3101      	adds	r1, #1
    89b4:	6021      	str	r1, [r4, #0]
    89b6:	68f3      	ldr	r3, [r6, #12]
    89b8:	6928      	ldr	r0, [r5, #16]
    89ba:	4798      	blx	r3
    89bc:	2000      	movs	r0, #0
    89be:	bd70      	pop	{r4, r5, r6, pc}
    89c0:	480c      	ldr	r0, [pc, #48]	; (89f4 <CC_PalPowerSaveModeSelect+0x84>)
    89c2:	bd70      	pop	{r4, r5, r6, pc}
    89c4:	4a0a      	ldr	r2, [pc, #40]	; (89f0 <CC_PalPowerSaveModeSelect+0x80>)
    89c6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    89ca:	2b00      	cmp	r3, #0
    89cc:	d1fb      	bne.n	89c6 <CC_PalPowerSaveModeSelect+0x56>
    89ce:	4a07      	ldr	r2, [pc, #28]	; (89ec <CC_PalPowerSaveModeSelect+0x7c>)
    89d0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    89d4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    89d8:	f7ff ff46 	bl	8868 <CC_HalMaskInterrupt>
    89dc:	6823      	ldr	r3, [r4, #0]
    89de:	e7d5      	b.n	898c <CC_PalPowerSaveModeSelect+0x1c>
    89e0:	2000019c 	.word	0x2000019c
    89e4:	2000018c 	.word	0x2000018c
    89e8:	20000c90 	.word	0x20000c90
    89ec:	5002a000 	.word	0x5002a000
    89f0:	5002b000 	.word	0x5002b000
    89f4:	ffff8fe9 	.word	0xffff8fe9

000089f8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    89f8:	4770      	bx	lr

000089fa <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    89fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89fe:	4607      	mov	r7, r0
    8a00:	460e      	mov	r6, r1
    8a02:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8a04:	461d      	mov	r5, r3
    8a06:	b30b      	cbz	r3, 8a4c <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    8a08:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    8a0a:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    8a0c:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	4414      	add	r4, r2
    8a14:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8a18:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8a1a:	f04f 0900 	mov.w	r9, #0
    8a1e:	45d1      	cmp	r9, sl
    8a20:	d308      	bcc.n	8a34 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    8a22:	686a      	ldr	r2, [r5, #4]
    8a24:	f105 0308 	add.w	r3, r5, #8
    8a28:	4641      	mov	r1, r8
    8a2a:	4638      	mov	r0, r7
    8a2c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    8a2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8a32:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8a34:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8a38:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    8a3c:	4620      	mov	r0, r4
    8a3e:	f000 f9de 	bl	8dfe <strlen>
    8a42:	3001      	adds	r0, #1
    8a44:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8a46:	f109 0901 	add.w	r9, r9, #1
    8a4a:	e7e8      	b.n	8a1e <cbpprintf_external+0x24>
}
    8a4c:	f06f 0015 	mvn.w	r0, #21
    8a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008a54 <sys_notify_validate>:
	if (notify == NULL) {
    8a54:	4603      	mov	r3, r0
    8a56:	b158      	cbz	r0, 8a70 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8a58:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8a5a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8a5e:	2a01      	cmp	r2, #1
    8a60:	d003      	beq.n	8a6a <sys_notify_validate+0x16>
    8a62:	2a03      	cmp	r2, #3
    8a64:	d104      	bne.n	8a70 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8a66:	6802      	ldr	r2, [r0, #0]
    8a68:	b112      	cbz	r2, 8a70 <sys_notify_validate+0x1c>
		notify->result = 0;
    8a6a:	2000      	movs	r0, #0
    8a6c:	6098      	str	r0, [r3, #8]
    8a6e:	4770      	bx	lr
		return -EINVAL;
    8a70:	f06f 0015 	mvn.w	r0, #21
}
    8a74:	4770      	bx	lr

00008a76 <arch_printk_char_out>:
}
    8a76:	2000      	movs	r0, #0
    8a78:	4770      	bx	lr

00008a7a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    8a7a:	f000 b90f 	b.w	8c9c <z_log_vprintk>

00008a7e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8a7e:	b40f      	push	{r0, r1, r2, r3}
    8a80:	b507      	push	{r0, r1, r2, lr}
    8a82:	a904      	add	r1, sp, #16
    8a84:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8a88:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8a8a:	f000 f907 	bl	8c9c <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8a8e:	b003      	add	sp, #12
    8a90:	f85d eb04 	ldr.w	lr, [sp], #4
    8a94:	b004      	add	sp, #16
    8a96:	4770      	bx	lr

00008a98 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8a98:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8a9a:	f013 0307 	ands.w	r3, r3, #7
    8a9e:	d105      	bne.n	8aac <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8aa0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	bf0c      	ite	eq
    8aa6:	2000      	moveq	r0, #0
    8aa8:	2003      	movne	r0, #3
    8aaa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8aac:	2b02      	cmp	r3, #2
    8aae:	d105      	bne.n	8abc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8ab0:	8bc0      	ldrh	r0, [r0, #30]
    8ab2:	fab0 f080 	clz	r0, r0
    8ab6:	0940      	lsrs	r0, r0, #5
    8ab8:	0080      	lsls	r0, r0, #2
    8aba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8abc:	2b01      	cmp	r3, #1
    8abe:	d105      	bne.n	8acc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8ac0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	bf0c      	ite	eq
    8ac6:	2000      	moveq	r0, #0
    8ac8:	2005      	movne	r0, #5
    8aca:	4770      	bx	lr
	int evt = EVT_NOP;
    8acc:	2000      	movs	r0, #0
}
    8ace:	4770      	bx	lr

00008ad0 <notify_one>:
{
    8ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ad4:	460d      	mov	r5, r1
    8ad6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ad8:	4619      	mov	r1, r3
    8ada:	1d28      	adds	r0, r5, #4
{
    8adc:	4690      	mov	r8, r2
    8ade:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ae0:	f7f8 f9c8 	bl	e74 <sys_notify_finalize>
	if (cb) {
    8ae4:	4604      	mov	r4, r0
    8ae6:	b138      	cbz	r0, 8af8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8ae8:	4633      	mov	r3, r6
    8aea:	4642      	mov	r2, r8
    8aec:	4629      	mov	r1, r5
    8aee:	4638      	mov	r0, r7
    8af0:	46a4      	mov	ip, r4
}
    8af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8af6:	4760      	bx	ip
}
    8af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008afc <validate_args>:
{
    8afc:	b510      	push	{r4, lr}
    8afe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8b00:	b140      	cbz	r0, 8b14 <validate_args+0x18>
    8b02:	b139      	cbz	r1, 8b14 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8b04:	1d08      	adds	r0, r1, #4
    8b06:	f7ff ffa5 	bl	8a54 <sys_notify_validate>
	if ((rv == 0)
    8b0a:	b928      	cbnz	r0, 8b18 <validate_args+0x1c>
	    && ((cli->notify.flags
    8b0c:	68a3      	ldr	r3, [r4, #8]
    8b0e:	f033 0303 	bics.w	r3, r3, #3
    8b12:	d001      	beq.n	8b18 <validate_args+0x1c>
		rv = -EINVAL;
    8b14:	f06f 0015 	mvn.w	r0, #21
}
    8b18:	bd10      	pop	{r4, pc}

00008b1a <onoff_manager_init>:
{
    8b1a:	b538      	push	{r3, r4, r5, lr}
    8b1c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8b1e:	4605      	mov	r5, r0
    8b20:	b158      	cbz	r0, 8b3a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8b22:	b151      	cbz	r1, 8b3a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8b24:	680b      	ldr	r3, [r1, #0]
    8b26:	b143      	cbz	r3, 8b3a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8b28:	684b      	ldr	r3, [r1, #4]
    8b2a:	b133      	cbz	r3, 8b3a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8b2c:	2220      	movs	r2, #32
    8b2e:	2100      	movs	r1, #0
    8b30:	f000 f98c 	bl	8e4c <memset>
    8b34:	612c      	str	r4, [r5, #16]
	return 0;
    8b36:	2000      	movs	r0, #0
}
    8b38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8b3a:	f06f 0015 	mvn.w	r0, #21
    8b3e:	e7fb      	b.n	8b38 <onoff_manager_init+0x1e>

00008b40 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8b40:	4604      	mov	r4, r0
    8b42:	b508      	push	{r3, lr}
    8b44:	4608      	mov	r0, r1
    8b46:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8b48:	461a      	mov	r2, r3
    8b4a:	47a0      	blx	r4
	return z_impl_z_current_get();
    8b4c:	f7fe ff06 	bl	795c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8b50:	f7fa fc48 	bl	33e4 <z_impl_k_thread_abort>

00008b54 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    8b54:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8b58:	8840      	ldrh	r0, [r0, #2]
}
    8b5a:	0840      	lsrs	r0, r0, #1
    8b5c:	4770      	bx	lr

00008b5e <free_list_add>:
{
    8b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b60:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    8b62:	f7ff fff7 	bl	8b54 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8b66:	fab0 f080 	clz	r0, r0
    8b6a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8b6e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    8b72:	00ca      	lsls	r2, r1, #3
    8b74:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8b78:	1d17      	adds	r7, r2, #4
{
    8b7a:	460c      	mov	r4, r1
    8b7c:	3206      	adds	r2, #6
    8b7e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    8b80:	b956      	cbnz	r6, 8b98 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8b82:	2101      	movs	r1, #1
    8b84:	fa01 f000 	lsl.w	r0, r1, r0
    8b88:	68d9      	ldr	r1, [r3, #12]
    8b8a:	4301      	orrs	r1, r0
    8b8c:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8b8e:	f8cc 4010 	str.w	r4, [ip, #16]
    8b92:	53dd      	strh	r5, [r3, r7]
    8b94:	529d      	strh	r5, [r3, r2]
}
    8b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    8b98:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    8b9a:	3104      	adds	r1, #4
    8b9c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8b9e:	53d8      	strh	r0, [r3, r7]
    8ba0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8ba4:	529e      	strh	r6, [r3, r2]
    8ba6:	80c5      	strh	r5, [r0, #6]
    8ba8:	525d      	strh	r5, [r3, r1]
    8baa:	e7f4      	b.n	8b96 <free_list_add+0x38>

00008bac <encode_uint>:
{
    8bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bb0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    8bb2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    8bb4:	2b6f      	cmp	r3, #111	; 0x6f
{
    8bb6:	4680      	mov	r8, r0
    8bb8:	460f      	mov	r7, r1
    8bba:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8bbc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8bc0:	d029      	beq.n	8c16 <encode_uint+0x6a>
    8bc2:	d824      	bhi.n	8c0e <encode_uint+0x62>
		return 16;
    8bc4:	2b58      	cmp	r3, #88	; 0x58
    8bc6:	bf14      	ite	ne
    8bc8:	260a      	movne	r6, #10
    8bca:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    8bcc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    8bd0:	4632      	mov	r2, r6
    8bd2:	2300      	movs	r3, #0
    8bd4:	4640      	mov	r0, r8
    8bd6:	4639      	mov	r1, r7
    8bd8:	f7f7 fc74 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8bdc:	2a09      	cmp	r2, #9
    8bde:	b2d4      	uxtb	r4, r2
    8be0:	d81e      	bhi.n	8c20 <encode_uint+0x74>
    8be2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8be4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8be6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8be8:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8bec:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8bf0:	d301      	bcc.n	8bf6 <encode_uint+0x4a>
    8bf2:	45d1      	cmp	r9, sl
    8bf4:	d811      	bhi.n	8c1a <encode_uint+0x6e>
	if (conv->flag_hash) {
    8bf6:	782b      	ldrb	r3, [r5, #0]
    8bf8:	069b      	lsls	r3, r3, #26
    8bfa:	d505      	bpl.n	8c08 <encode_uint+0x5c>
		if (radix == 8) {
    8bfc:	2e08      	cmp	r6, #8
    8bfe:	d115      	bne.n	8c2c <encode_uint+0x80>
			conv->altform_0 = true;
    8c00:	78ab      	ldrb	r3, [r5, #2]
    8c02:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8c06:	70ab      	strb	r3, [r5, #2]
}
    8c08:	4648      	mov	r0, r9
    8c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8c0e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8c12:	2b70      	cmp	r3, #112	; 0x70
    8c14:	e7d7      	b.n	8bc6 <encode_uint+0x1a>
	switch (specifier) {
    8c16:	2608      	movs	r6, #8
    8c18:	e7d8      	b.n	8bcc <encode_uint+0x20>
		value /= radix;
    8c1a:	4680      	mov	r8, r0
    8c1c:	460f      	mov	r7, r1
    8c1e:	e7d7      	b.n	8bd0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8c20:	f1bb 0f19 	cmp.w	fp, #25
    8c24:	bf94      	ite	ls
    8c26:	3437      	addls	r4, #55	; 0x37
    8c28:	3457      	addhi	r4, #87	; 0x57
    8c2a:	e7db      	b.n	8be4 <encode_uint+0x38>
		} else if (radix == 16) {
    8c2c:	2e10      	cmp	r6, #16
    8c2e:	d1eb      	bne.n	8c08 <encode_uint+0x5c>
			conv->altform_0c = true;
    8c30:	78ab      	ldrb	r3, [r5, #2]
    8c32:	f043 0310 	orr.w	r3, r3, #16
    8c36:	e7e6      	b.n	8c06 <encode_uint+0x5a>

00008c38 <outs>:
{
    8c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c3c:	4607      	mov	r7, r0
    8c3e:	4688      	mov	r8, r1
    8c40:	4615      	mov	r5, r2
    8c42:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8c44:	4614      	mov	r4, r2
    8c46:	42b4      	cmp	r4, r6
    8c48:	eba4 0005 	sub.w	r0, r4, r5
    8c4c:	d302      	bcc.n	8c54 <outs+0x1c>
    8c4e:	b93e      	cbnz	r6, 8c60 <outs+0x28>
    8c50:	7823      	ldrb	r3, [r4, #0]
    8c52:	b12b      	cbz	r3, 8c60 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8c54:	f814 0b01 	ldrb.w	r0, [r4], #1
    8c58:	4641      	mov	r1, r8
    8c5a:	47b8      	blx	r7
		if (rc < 0) {
    8c5c:	2800      	cmp	r0, #0
    8c5e:	daf2      	bge.n	8c46 <outs+0xe>
}
    8c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c64 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8c64:	4040      	eors	r0, r0
    8c66:	f380 8811 	msr	BASEPRI, r0
    8c6a:	f04f 0004 	mov.w	r0, #4
    8c6e:	df02      	svc	2
}
    8c70:	4770      	bx	lr

00008c72 <assert_print>:

void assert_print(const char *fmt, ...)
{
    8c72:	b40f      	push	{r0, r1, r2, r3}
    8c74:	b507      	push	{r0, r1, r2, lr}
    8c76:	a904      	add	r1, sp, #16
    8c78:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8c7c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8c7e:	f7ff fefc 	bl	8a7a <vprintk>

	va_end(ap);
}
    8c82:	b003      	add	sp, #12
    8c84:	f85d eb04 	ldr.w	lr, [sp], #4
    8c88:	b004      	add	sp, #16
    8c8a:	4770      	bx	lr

00008c8c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8c8c:	4770      	bx	lr

00008c8e <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    8c8e:	6843      	ldr	r3, [r0, #4]
}
    8c90:	7958      	ldrb	r0, [r3, #5]
    8c92:	4770      	bx	lr

00008c94 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8c94:	f000 ba2e 	b.w	90f4 <sys_clock_cycle_get_32>

00008c98 <dummy_timestamp>:
    8c98:	2000      	movs	r0, #0
    8c9a:	4770      	bx	lr

00008c9c <z_log_vprintk>:
{
    8c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c9e:	2300      	movs	r3, #0
    8ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8ca4:	e9cd 3300 	strd	r3, r3, [sp]
    8ca8:	461a      	mov	r2, r3
    8caa:	4619      	mov	r1, r3
    8cac:	4618      	mov	r0, r3
    8cae:	f7f9 faeb 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    8cb2:	b005      	add	sp, #20
    8cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00008cb8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    8cb8:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    8cba:	f7f9 f849 	bl	1d50 <log_init>
	}

	return 0;
}
    8cbe:	2000      	movs	r0, #0
    8cc0:	bd08      	pop	{r3, pc}

00008cc2 <z_log_get_tag>:
}
    8cc2:	2000      	movs	r0, #0
    8cc4:	4770      	bx	lr

00008cc6 <out_func>:
{
    8cc6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8cc8:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    8ccc:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8cd0:	6852      	ldr	r2, [r2, #4]
    8cd2:	2101      	movs	r1, #1
    8cd4:	f10d 0007 	add.w	r0, sp, #7
    8cd8:	4798      	blx	r3
}
    8cda:	2000      	movs	r0, #0
    8cdc:	b003      	add	sp, #12
    8cde:	f85d fb04 	ldr.w	pc, [sp], #4

00008ce2 <cr_out_func>:
{
    8ce2:	b538      	push	{r3, r4, r5, lr}
    8ce4:	4605      	mov	r5, r0
    8ce6:	460c      	mov	r4, r1
	out_func(c, ctx);
    8ce8:	f7ff ffed 	bl	8cc6 <out_func>
	if (c == '\n') {
    8cec:	2d0a      	cmp	r5, #10
    8cee:	d103      	bne.n	8cf8 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    8cf0:	4621      	mov	r1, r4
    8cf2:	200d      	movs	r0, #13
    8cf4:	f7ff ffe7 	bl	8cc6 <out_func>
}
    8cf8:	2000      	movs	r0, #0
    8cfa:	bd38      	pop	{r3, r4, r5, pc}

00008cfc <buffer_write>:
{
    8cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cfe:	4606      	mov	r6, r0
    8d00:	460d      	mov	r5, r1
    8d02:	4614      	mov	r4, r2
    8d04:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    8d06:	4621      	mov	r1, r4
    8d08:	4628      	mov	r0, r5
    8d0a:	463a      	mov	r2, r7
    8d0c:	47b0      	blx	r6
	} while (len != 0);
    8d0e:	1a24      	subs	r4, r4, r0
		buf += processed;
    8d10:	4405      	add	r5, r0
	} while (len != 0);
    8d12:	d1f8      	bne.n	8d06 <buffer_write+0xa>
}
    8d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d16 <log_output_flush>:
		     output->control_block->offset,
    8d16:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8d18:	6881      	ldr	r1, [r0, #8]
{
    8d1a:	b510      	push	{r4, lr}
    8d1c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    8d1e:	e9d2 2300 	ldrd	r2, r3, [r2]
    8d22:	6800      	ldr	r0, [r0, #0]
    8d24:	f7ff ffea 	bl	8cfc <buffer_write>
	output->control_block->offset = 0;
    8d28:	6863      	ldr	r3, [r4, #4]
    8d2a:	2200      	movs	r2, #0
    8d2c:	601a      	str	r2, [r3, #0]
}
    8d2e:	bd10      	pop	{r4, pc}

00008d30 <z_log_msg2_finalize>:
{
    8d30:	b570      	push	{r4, r5, r6, lr}
    8d32:	460e      	mov	r6, r1
    8d34:	4615      	mov	r5, r2
    8d36:	4619      	mov	r1, r3
	if (!msg) {
    8d38:	4604      	mov	r4, r0
    8d3a:	b918      	cbnz	r0, 8d44 <z_log_msg2_finalize+0x14>
}
    8d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    8d40:	f7f9 b86c 	b.w	1e1c <z_log_dropped>
	if (data) {
    8d44:	b13b      	cbz	r3, 8d56 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    8d46:	f3c2 2349 	ubfx	r3, r2, #9, #10
    8d4a:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    8d4c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    8d50:	4418      	add	r0, r3
    8d52:	f000 f870 	bl	8e36 <memcpy>
	msg->hdr.source = source;
    8d56:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    8d5a:	4620      	mov	r0, r4
}
    8d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    8d60:	f7f9 b87a 	b.w	1e58 <z_log_msg2_commit>

00008d64 <abort_function>:
{
    8d64:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8d66:	2000      	movs	r0, #0
    8d68:	f7f8 ff90 	bl	1c8c <sys_reboot>

00008d6c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8d6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8d6e:	ab0b      	add	r3, sp, #44	; 0x2c
    8d70:	9305      	str	r3, [sp, #20]
    8d72:	9303      	str	r3, [sp, #12]
    8d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d76:	9302      	str	r3, [sp, #8]
    8d78:	2300      	movs	r3, #0
    8d7a:	e9cd 3300 	strd	r3, r3, [sp]
    8d7e:	2201      	movs	r2, #1
    8d80:	4618      	mov	r0, r3
    8d82:	f7f9 fa81 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    8d86:	b007      	add	sp, #28
    8d88:	f85d fb04 	ldr.w	pc, [sp], #4

00008d8c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8d8c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8d8e:	6800      	ldr	r0, [r0, #0]
    8d90:	f7f9 be0a 	b.w	29a8 <z_arm_fatal_error>

00008d94 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8d94:	2100      	movs	r1, #0
    8d96:	2001      	movs	r0, #1
    8d98:	f7f9 be06 	b.w	29a8 <z_arm_fatal_error>

00008d9c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8d9c:	b508      	push	{r3, lr}
	handler();
    8d9e:	f7f9 fea7 	bl	2af0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8da6:	f7f9 bf7f 	b.w	2ca8 <z_arm_exc_exit>

00008daa <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8daa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8dac:	ab0b      	add	r3, sp, #44	; 0x2c
    8dae:	9305      	str	r3, [sp, #20]
    8db0:	9303      	str	r3, [sp, #12]
    8db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8db4:	9302      	str	r3, [sp, #8]
    8db6:	2300      	movs	r3, #0
    8db8:	e9cd 3300 	strd	r3, r3, [sp]
    8dbc:	2201      	movs	r2, #1
    8dbe:	4618      	mov	r0, r3
    8dc0:	f7f9 fa62 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    8dc4:	b007      	add	sp, #28
    8dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dca <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8dca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8dcc:	ab0b      	add	r3, sp, #44	; 0x2c
    8dce:	9305      	str	r3, [sp, #20]
    8dd0:	9303      	str	r3, [sp, #12]
    8dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dd4:	9302      	str	r3, [sp, #8]
    8dd6:	2300      	movs	r3, #0
    8dd8:	e9cd 3300 	strd	r3, r3, [sp]
    8ddc:	2201      	movs	r2, #1
    8dde:	4618      	mov	r0, r3
    8de0:	f7f9 fa52 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    8de4:	b007      	add	sp, #28
    8de6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dea <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    8dea:	3901      	subs	r1, #1
    8dec:	4603      	mov	r3, r0
    8dee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8df2:	b90a      	cbnz	r2, 8df8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    8df4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    8df6:	4770      	bx	lr
		*d = *s;
    8df8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    8dfc:	e7f7      	b.n	8dee <strcpy+0x4>

00008dfe <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8dfe:	4603      	mov	r3, r0
	size_t n = 0;
    8e00:	2000      	movs	r0, #0

	while (*s != '\0') {
    8e02:	5c1a      	ldrb	r2, [r3, r0]
    8e04:	b902      	cbnz	r2, 8e08 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8e06:	4770      	bx	lr
		n++;
    8e08:	3001      	adds	r0, #1
    8e0a:	e7fa      	b.n	8e02 <strlen+0x4>

00008e0c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8e0c:	4603      	mov	r3, r0
	size_t n = 0;
    8e0e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8e10:	5c1a      	ldrb	r2, [r3, r0]
    8e12:	b10a      	cbz	r2, 8e18 <strnlen+0xc>
    8e14:	4288      	cmp	r0, r1
    8e16:	d100      	bne.n	8e1a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8e18:	4770      	bx	lr
		n++;
    8e1a:	3001      	adds	r0, #1
    8e1c:	e7f8      	b.n	8e10 <strnlen+0x4>

00008e1e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8e1e:	1e43      	subs	r3, r0, #1
    8e20:	3901      	subs	r1, #1
    8e22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8e26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8e2a:	4282      	cmp	r2, r0
    8e2c:	d101      	bne.n	8e32 <strcmp+0x14>
    8e2e:	2a00      	cmp	r2, #0
    8e30:	d1f7      	bne.n	8e22 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8e32:	1a10      	subs	r0, r2, r0
    8e34:	4770      	bx	lr

00008e36 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8e36:	b510      	push	{r4, lr}
    8e38:	1e43      	subs	r3, r0, #1
    8e3a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8e3c:	4291      	cmp	r1, r2
    8e3e:	d100      	bne.n	8e42 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8e40:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8e42:	f811 4b01 	ldrb.w	r4, [r1], #1
    8e46:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8e4a:	e7f7      	b.n	8e3c <memcpy+0x6>

00008e4c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8e4c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8e4e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8e50:	4603      	mov	r3, r0
	while (n > 0) {
    8e52:	4293      	cmp	r3, r2
    8e54:	d100      	bne.n	8e58 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8e56:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8e58:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8e5c:	e7f9      	b.n	8e52 <memset+0x6>

00008e5e <_stdout_hook_default>:
}
    8e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e62:	4770      	bx	lr

00008e64 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8e64:	2806      	cmp	r0, #6
    8e66:	d108      	bne.n	8e7a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e6c:	2201      	movs	r2, #1
    8e6e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8e72:	f3bf 8f4f 	dsb	sy
        __WFE();
    8e76:	bf20      	wfe
    while (true)
    8e78:	e7fd      	b.n	8e76 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    8e7a:	4770      	bx	lr

00008e7c <pm_state_exit_post_ops>:
    8e7c:	2300      	movs	r3, #0
    8e7e:	f383 8811 	msr	BASEPRI, r3
    8e82:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8e86:	4770      	bx	lr

00008e88 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8e8a:	ab0b      	add	r3, sp, #44	; 0x2c
    8e8c:	9305      	str	r3, [sp, #20]
    8e8e:	9303      	str	r3, [sp, #12]
    8e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e92:	9302      	str	r3, [sp, #8]
    8e94:	2300      	movs	r3, #0
    8e96:	e9cd 3300 	strd	r3, r3, [sp]
    8e9a:	2201      	movs	r2, #1
    8e9c:	4618      	mov	r0, r3
    8e9e:	f7f9 f9f3 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    8ea2:	b007      	add	sp, #28
    8ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00008ea8 <adc_context_on_timer_expired>:
{
    8ea8:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8eaa:	f1a0 0308 	sub.w	r3, r0, #8
    8eae:	f3bf 8f5b 	dmb	ish
    8eb2:	e853 2f00 	ldrex	r2, [r3]
    8eb6:	1c51      	adds	r1, r2, #1
    8eb8:	e843 1400 	strex	r4, r1, [r3]
    8ebc:	2c00      	cmp	r4, #0
    8ebe:	d1f8      	bne.n	8eb2 <adc_context_on_timer_expired+0xa>
    8ec0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    8ec4:	b922      	cbnz	r2, 8ed0 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
    8ec6:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
}
    8eca:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
    8ecc:	f7fa bcc0 	b.w	3850 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    8ed0:	f06f 030f 	mvn.w	r3, #15
}
    8ed4:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
    8ed6:	6583      	str	r3, [r0, #88]	; 0x58
}
    8ed8:	4770      	bx	lr

00008eda <set_on_state>:
	__asm__ volatile(
    8eda:	f04f 0340 	mov.w	r3, #64	; 0x40
    8ede:	f3ef 8211 	mrs	r2, BASEPRI
    8ee2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ee6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8eea:	6803      	ldr	r3, [r0, #0]
    8eec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8ef0:	f043 0302 	orr.w	r3, r3, #2
    8ef4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8ef6:	f382 8811 	msr	BASEPRI, r2
    8efa:	f3bf 8f6f 	isb	sy
}
    8efe:	4770      	bx	lr

00008f00 <async_start>:
{
    8f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f02:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    8f04:	6904      	ldr	r4, [r0, #16]
{
    8f06:	4605      	mov	r5, r0
    8f08:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    8f0a:	f04f 0040 	mov.w	r0, #64	; 0x40
    8f0e:	f3ef 8c11 	mrs	ip, BASEPRI
    8f12:	f380 8812 	msr	BASEPRI_MAX, r0
    8f16:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8f1a:	260c      	movs	r6, #12
    8f1c:	fb06 4601 	mla	r6, r6, r1, r4
    8f20:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8f22:	f000 0e07 	and.w	lr, r0, #7
    8f26:	f1be 0f01 	cmp.w	lr, #1
    8f2a:	d110      	bne.n	8f4e <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8f2c:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    8f2e:	2600      	movs	r6, #0
	__asm__ volatile(
    8f30:	f38c 8811 	msr	BASEPRI, ip
    8f34:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    8f38:	b93e      	cbnz	r6, 8f4a <async_start+0x4a>
	subdata->cb = cb;
    8f3a:	200c      	movs	r0, #12
    8f3c:	4341      	muls	r1, r0
    8f3e:	440c      	add	r4, r1
	subdata->user_data = user_data;
    8f40:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8f44:	686b      	ldr	r3, [r5, #4]
    8f46:	585b      	ldr	r3, [r3, r1]
    8f48:	4798      	blx	r3
}
    8f4a:	4630      	mov	r0, r6
    8f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8f4e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    8f52:	4287      	cmp	r7, r0
    8f54:	bf14      	ite	ne
    8f56:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    8f5a:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    8f5e:	e7e7      	b.n	8f30 <async_start+0x30>

00008f60 <api_start>:
{
    8f60:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8f62:	2480      	movs	r4, #128	; 0x80
    8f64:	9400      	str	r4, [sp, #0]
    8f66:	f7ff ffcb 	bl	8f00 <async_start>
}
    8f6a:	b002      	add	sp, #8
    8f6c:	bd10      	pop	{r4, pc}

00008f6e <onoff_started_callback>:
	return &data->mgr[type];
    8f6e:	6900      	ldr	r0, [r0, #16]
    8f70:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8f72:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8f76:	2100      	movs	r1, #0
    8f78:	4710      	bx	r2

00008f7a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8f7a:	2000      	movs	r0, #0
    8f7c:	f7fc b86e 	b.w	505c <nrfx_clock_start>

00008f80 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8f80:	2000      	movs	r0, #0
    8f82:	f7fc b8cf 	b.w	5124 <nrfx_clock_stop>

00008f86 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8f86:	2280      	movs	r2, #128	; 0x80
    8f88:	f7fa be30 	b.w	3bec <stop>

00008f8c <blocking_start_callback>:
{
    8f8c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8f8e:	f7fd bb91 	b.w	66b4 <z_impl_k_sem_give>

00008f92 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f92:	6843      	ldr	r3, [r0, #4]
    8f94:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8f96:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8f9a:	600b      	str	r3, [r1, #0]
}
    8f9c:	2000      	movs	r0, #0
    8f9e:	4770      	bx	lr

00008fa0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fa0:	6843      	ldr	r3, [r0, #4]
    8fa2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8fa4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8fa8:	4042      	eors	r2, r0
    8faa:	400a      	ands	r2, r1
    8fac:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8fae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8fb2:	2000      	movs	r0, #0
    8fb4:	4770      	bx	lr

00008fb6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fb6:	6843      	ldr	r3, [r0, #4]
    8fb8:	685b      	ldr	r3, [r3, #4]
}
    8fba:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8fbc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8fc0:	4770      	bx	lr

00008fc2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fc2:	6843      	ldr	r3, [r0, #4]
    8fc4:	685b      	ldr	r3, [r3, #4]
}
    8fc6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    8fc8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8fcc:	4770      	bx	lr

00008fce <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fce:	6843      	ldr	r3, [r0, #4]
    8fd0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8fd2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8fd6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8fd8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8fdc:	2000      	movs	r0, #0
    8fde:	4770      	bx	lr

00008fe0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    8fe0:	6902      	ldr	r2, [r0, #16]
{
    8fe2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    8fe4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8fe8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8fec:	2000      	movs	r0, #0
    8fee:	4770      	bx	lr

00008ff0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8ff0:	6843      	ldr	r3, [r0, #4]
    8ff2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8ff4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8ff8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8ffc:	4770      	bx	lr

00008ffe <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8ffe:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    9000:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9002:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9004:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9008:	b148      	cbz	r0, 901e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    900a:	7c52      	ldrb	r2, [r2, #17]
    900c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    900e:	2000      	movs	r0, #0
    9010:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9014:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9018:	2201      	movs	r2, #1
    901a:	601a      	str	r2, [r3, #0]
	return 0;
    901c:	4770      	bx	lr
		return -1;
    901e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9022:	4770      	bx	lr

00009024 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9024:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9026:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9028:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    902c:	b940      	cbnz	r0, 9040 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    902e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9030:	079b      	lsls	r3, r3, #30
    9032:	d406      	bmi.n	9042 <is_tx_ready.isra.0+0x1e>
    9034:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9038:	3800      	subs	r0, #0
    903a:	bf18      	it	ne
    903c:	2001      	movne	r0, #1
    903e:	4770      	bx	lr
    9040:	2001      	movs	r0, #1
}
    9042:	4770      	bx	lr

00009044 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9044:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9046:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9048:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    904c:	05c9      	lsls	r1, r1, #23
    904e:	d518      	bpl.n	9082 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9050:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9054:	b1a9      	cbz	r1, 9082 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9056:	f04f 0040 	mov.w	r0, #64	; 0x40
    905a:	f3ef 8111 	mrs	r1, BASEPRI
    905e:	f380 8812 	msr	BASEPRI_MAX, r0
    9062:	f3bf 8f6f 	isb	sy
    9066:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    906a:	b130      	cbz	r0, 907a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    906c:	2000      	movs	r0, #0
    906e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    9072:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9076:	2001      	movs	r0, #1
    9078:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    907a:	f381 8811 	msr	BASEPRI, r1
    907e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9082:	6852      	ldr	r2, [r2, #4]
    9084:	06d2      	lsls	r2, r2, #27
    9086:	d515      	bpl.n	90b4 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    9088:	f04f 0140 	mov.w	r1, #64	; 0x40
    908c:	f3ef 8211 	mrs	r2, BASEPRI
    9090:	f381 8812 	msr	BASEPRI_MAX, r1
    9094:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9098:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    909c:	b111      	cbz	r1, 90a4 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    909e:	2100      	movs	r1, #0
    90a0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    90a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    90a8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    90ac:	f382 8811 	msr	BASEPRI, r2
    90b0:	f3bf 8f6f 	isb	sy
}
    90b4:	4770      	bx	lr

000090b6 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    90b6:	b510      	push	{r4, lr}
    90b8:	2200      	movs	r2, #0
    90ba:	4604      	mov	r4, r0
    90bc:	2101      	movs	r1, #1
    90be:	2028      	movs	r0, #40	; 0x28
    90c0:	f7f9 fcde 	bl	2a80 <z_arm_irq_priority_set>
    90c4:	2028      	movs	r0, #40	; 0x28
    90c6:	f7f9 fcbf 	bl	2a48 <arch_irq_enable>
    90ca:	4620      	mov	r0, r4
    90cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90d0:	f7fb ba44 	b.w	455c <uarte_instance_init.constprop.0>

000090d4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    90d4:	b510      	push	{r4, lr}
    90d6:	2200      	movs	r2, #0
    90d8:	4604      	mov	r4, r0
    90da:	2101      	movs	r1, #1
    90dc:	2002      	movs	r0, #2
    90de:	f7f9 fccf 	bl	2a80 <z_arm_irq_priority_set>
    90e2:	2002      	movs	r0, #2
    90e4:	f7f9 fcb0 	bl	2a48 <arch_irq_enable>
    90e8:	4620      	mov	r0, r4
    90ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90ee:	f7fb ba35 	b.w	455c <uarte_instance_init.constprop.0>

000090f2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    90f2:	4770      	bx	lr

000090f4 <sys_clock_cycle_get_32>:
{
    90f4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    90f6:	f7fb fba3 	bl	4840 <z_nrf_rtc_timer_read>
}
    90fa:	bd08      	pop	{r3, pc}

000090fc <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    90fc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    90fe:	6843      	ldr	r3, [r0, #4]
    9100:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9102:	7a03      	ldrb	r3, [r0, #8]
    9104:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    9108:	3b01      	subs	r3, #1
    910a:	00db      	lsls	r3, r3, #3
    910c:	6845      	ldr	r5, [r0, #4]
    910e:	6814      	ldr	r4, [r2, #0]
    9110:	441d      	add	r5, r3
    9112:	42ac      	cmp	r4, r5
    9114:	d902      	bls.n	911c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    9116:	f06f 0001 	mvn.w	r0, #1
}
    911a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    911c:	7965      	ldrb	r5, [r4, #5]
    911e:	428d      	cmp	r5, r1
    9120:	d002      	beq.n	9128 <pinctrl_lookup_state+0x2c>
		(*state)++;
    9122:	3408      	adds	r4, #8
    9124:	6014      	str	r4, [r2, #0]
    9126:	e7f1      	b.n	910c <pinctrl_lookup_state+0x10>
			return 0;
    9128:	2000      	movs	r0, #0
    912a:	e7f6      	b.n	911a <pinctrl_lookup_state+0x1e>

0000912c <nrf_gpio_pin_clear>:
{
    912c:	b507      	push	{r0, r1, r2, lr}
    912e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9130:	a801      	add	r0, sp, #4
    9132:	f7fb fd29 	bl	4b88 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9136:	9a01      	ldr	r2, [sp, #4]
    9138:	2301      	movs	r3, #1
    913a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    913c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    9140:	b003      	add	sp, #12
    9142:	f85d fb04 	ldr.w	pc, [sp], #4

00009146 <nrf_gpio_pin_set>:
{
    9146:	b507      	push	{r0, r1, r2, lr}
    9148:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    914a:	a801      	add	r0, sp, #4
    914c:	f7fb fd1c 	bl	4b88 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9150:	9a01      	ldr	r2, [sp, #4]
    9152:	2301      	movs	r3, #1
    9154:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9156:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    915a:	b003      	add	sp, #12
    915c:	f85d fb04 	ldr.w	pc, [sp], #4

00009160 <nrf_gpio_pin_write>:
    if (value == 0)
    9160:	b909      	cbnz	r1, 9166 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    9162:	f7ff bfe3 	b.w	912c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    9166:	f7ff bfee 	b.w	9146 <nrf_gpio_pin_set>

0000916a <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    916a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    916c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9170:	2b00      	cmp	r3, #0
{
    9172:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9174:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9178:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    917a:	bf0b      	itete	eq
    917c:	4615      	moveq	r5, r2
    917e:	2501      	movne	r5, #1
    9180:	460e      	moveq	r6, r1
    9182:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9184:	9301      	str	r3, [sp, #4]
    9186:	f7fb fcff 	bl	4b88 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    918a:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    918e:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9192:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9196:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9198:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    919a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    919e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    91a2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    91a6:	b002      	add	sp, #8
    91a8:	bd70      	pop	{r4, r5, r6, pc}

000091aa <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    91aa:	b570      	push	{r4, r5, r6, lr}
    91ac:	4615      	mov	r5, r2
    91ae:	4604      	mov	r4, r0
    91b0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    91b4:	42a6      	cmp	r6, r4
    91b6:	d101      	bne.n	91bc <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    91b8:	2000      	movs	r0, #0
}
    91ba:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    91bc:	6823      	ldr	r3, [r4, #0]
    91be:	0c1a      	lsrs	r2, r3, #16
    91c0:	2a22      	cmp	r2, #34	; 0x22
    91c2:	f200 808e 	bhi.w	92e2 <pinctrl_configure_pins+0x138>
    91c6:	e8df f002 	tbb	[pc, r2]
    91ca:	1d12      	.short	0x1d12
    91cc:	39294324 	.word	0x39294324
    91d0:	8c8c8c43 	.word	0x8c8c8c43
    91d4:	8c4d488c 	.word	0x8c4d488c
    91d8:	8c8c8c8c 	.word	0x8c8c8c8c
    91dc:	8c8c8c8c 	.word	0x8c8c8c8c
    91e0:	68635e52 	.word	0x68635e52
    91e4:	6d8c8c8c 	.word	0x6d8c8c8c
    91e8:	827d7873 	.word	0x827d7873
    91ec:	87          	.byte	0x87
    91ed:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    91ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    91f2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    91f6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    91f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    91fc:	f7ff ffa3 	bl	9146 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    9200:	2201      	movs	r2, #1
    9202:	e015      	b.n	9230 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    9204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9208:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    920c:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    920e:	2100      	movs	r1, #0
    9210:	e00f      	b.n	9232 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    9212:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9216:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    921a:	e7ec      	b.n	91f6 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    921c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9220:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9224:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    9226:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    922a:	f7ff ff7f 	bl	912c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    922e:	2200      	movs	r2, #0
    9230:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9232:	6820      	ldr	r0, [r4, #0]
    9234:	f7ff ff99 	bl	916a <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    9238:	3404      	adds	r4, #4
    923a:	e7bb      	b.n	91b4 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    923c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9240:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9244:	6820      	ldr	r0, [r4, #0]
    9246:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    924a:	f7ff ff6f 	bl	912c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    924e:	e7d7      	b.n	9200 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    9250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9254:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9258:	e7d8      	b.n	920c <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    925a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    925e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9262:	e7d3      	b.n	920c <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    9264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9268:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    926c:	e7ce      	b.n	920c <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    926e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9272:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9276:	6820      	ldr	r0, [r4, #0]
    9278:	f3c0 3140 	ubfx	r1, r0, #13, #1
    927c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9280:	f7ff ff6e 	bl	9160 <nrf_gpio_pin_write>
    9284:	e7bc      	b.n	9200 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    9286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    928a:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    928e:	e7f2      	b.n	9276 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    9290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9294:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9298:	e7ed      	b.n	9276 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    929a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    929e:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    92a2:	e7e8      	b.n	9276 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    92a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92a8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92ac:	2201      	movs	r2, #1
    92ae:	e7ae      	b.n	920e <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    92b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92b4:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92b8:	e7f8      	b.n	92ac <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    92ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92be:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92c2:	e7f3      	b.n	92ac <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    92c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92c8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92cc:	e7ee      	b.n	92ac <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    92ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92d2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92d6:	e7e9      	b.n	92ac <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    92d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92dc:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    92e0:	e7e4      	b.n	92ac <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    92e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    92e6:	e768      	b.n	91ba <pinctrl_configure_pins+0x10>

000092e8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    92e8:	f7ff b9b0 	b.w	864c <nrf_cc3xx_platform_init_no_rng>

000092ec <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    92ec:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    92ee:	f7f9 fa73 	bl	27d8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    92f2:	f7f9 fb25 	bl	2940 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    92f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    92fa:	f7ff b9a7 	b.w	864c <nrf_cc3xx_platform_init_no_rng>

000092fe <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    92fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9302:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    9306:	f1a0 0308 	sub.w	r3, r0, #8
    930a:	4258      	negs	r0, r3
    930c:	4158      	adcs	r0, r3
    930e:	4770      	bx	lr

00009310 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9310:	4700      	bx	r0

00009312 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9312:	f000 b908 	b.w	9526 <z_impl_k_busy_wait>

00009316 <nrf_gpio_pin_present_check>:
    switch (port)
    9316:	0943      	lsrs	r3, r0, #5
    9318:	d00b      	beq.n	9332 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    931a:	2b01      	cmp	r3, #1
    931c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9320:	bf18      	it	ne
    9322:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9324:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9328:	fa23 f000 	lsr.w	r0, r3, r0
}
    932c:	f000 0001 	and.w	r0, r0, #1
    9330:	4770      	bx	lr
    switch (port)
    9332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9336:	e7f5      	b.n	9324 <nrf_gpio_pin_present_check+0xe>

00009338 <pin_is_task_output>:
{
    9338:	b508      	push	{r3, lr}
    933a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    933c:	f7fb ff5a 	bl	51f4 <pin_is_output>
    9340:	b110      	cbz	r0, 9348 <pin_is_task_output+0x10>
    9342:	4610      	mov	r0, r2
    9344:	f7fb ff40 	bl	51c8 <pin_in_use_by_te>
}
    9348:	f000 0001 	and.w	r0, r0, #1
    934c:	bd08      	pop	{r3, pc}

0000934e <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    934e:	0080      	lsls	r0, r0, #2
}
    9350:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9354:	4770      	bx	lr

00009356 <nrf_gpio_reconfigure>:
{
    9356:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    935a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    935c:	a801      	add	r0, sp, #4
{
    935e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    9362:	460c      	mov	r4, r1
    9364:	4617      	mov	r7, r2
    9366:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9368:	f7fb ffc8 	bl	52fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    936c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    936e:	1e39      	subs	r1, r7, #0
    9370:	bf18      	it	ne
    9372:	2101      	movne	r1, #1
    9374:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9378:	1e23      	subs	r3, r4, #0
    937a:	bf18      	it	ne
    937c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    937e:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9380:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9384:	bf14      	ite	ne
    9386:	210c      	movne	r1, #12
    9388:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    938a:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    938c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9390:	bf14      	ite	ne
    9392:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9396:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9398:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    939c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    93a0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    93a4:	bf14      	ite	ne
    93a6:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    93aa:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    93ac:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    93ae:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93b2:	b104      	cbz	r4, 93b6 <nrf_gpio_reconfigure+0x60>
    93b4:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    93b6:	b10f      	cbz	r7, 93bc <nrf_gpio_reconfigure+0x66>
    93b8:	783f      	ldrb	r7, [r7, #0]
    93ba:	007f      	lsls	r7, r7, #1
    93bc:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    93be:	b10e      	cbz	r6, 93c4 <nrf_gpio_reconfigure+0x6e>
    93c0:	7836      	ldrb	r6, [r6, #0]
    93c2:	00b6      	lsls	r6, r6, #2
    93c4:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    93c6:	b18d      	cbz	r5, 93ec <nrf_gpio_reconfigure+0x96>
    93c8:	7829      	ldrb	r1, [r5, #0]
    93ca:	0209      	lsls	r1, r1, #8
    93cc:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    93ce:	f1b8 0f00 	cmp.w	r8, #0
    93d2:	d003      	beq.n	93dc <nrf_gpio_reconfigure+0x86>
    93d4:	f898 8000 	ldrb.w	r8, [r8]
    93d8:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93dc:	4321      	orrs	r1, r4
    93de:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    93e2:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    93e6:	b002      	add	sp, #8
    93e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    93ec:	4629      	mov	r1, r5
    93ee:	e7ed      	b.n	93cc <nrf_gpio_reconfigure+0x76>

000093f0 <nrf_gpio_cfg_sense_set>:
{
    93f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    93f2:	f10d 030f 	add.w	r3, sp, #15
    93f6:	9301      	str	r3, [sp, #4]
    93f8:	2300      	movs	r3, #0
{
    93fa:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    93fe:	9300      	str	r3, [sp, #0]
    9400:	461a      	mov	r2, r3
    9402:	4619      	mov	r1, r3
    9404:	f7ff ffa7 	bl	9356 <nrf_gpio_reconfigure>
}
    9408:	b005      	add	sp, #20
    940a:	f85d fb04 	ldr.w	pc, [sp], #4

0000940e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    940e:	f7fc badb 	b.w	59c8 <_DoInit>

00009412 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9412:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9414:	f7ff fffb 	bl	940e <SEGGER_RTT_Init>

	return 0;
}
    9418:	2000      	movs	r0, #0
    941a:	bd08      	pop	{r3, pc}

0000941c <z_device_state_init>:
}
    941c:	4770      	bx	lr

0000941e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    941e:	b138      	cbz	r0, 9430 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9420:	68c3      	ldr	r3, [r0, #12]
    9422:	8818      	ldrh	r0, [r3, #0]
    9424:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9428:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    942c:	4258      	negs	r0, r3
    942e:	4158      	adcs	r0, r3
}
    9430:	4770      	bx	lr

00009432 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9432:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9434:	ab0b      	add	r3, sp, #44	; 0x2c
    9436:	9305      	str	r3, [sp, #20]
    9438:	9303      	str	r3, [sp, #12]
    943a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    943c:	9302      	str	r3, [sp, #8]
    943e:	2300      	movs	r3, #0
    9440:	e9cd 3300 	strd	r3, r3, [sp]
    9444:	2201      	movs	r2, #1
    9446:	4618      	mov	r0, r3
    9448:	f7f8 ff1e 	bl	2288 <z_impl_z_log_msg2_runtime_vcreate>
}
    944c:	b007      	add	sp, #28
    944e:	f85d fb04 	ldr.w	pc, [sp], #4

00009452 <z_early_memset>:
	(void) memset(dst, c, n);
    9452:	f7ff bcfb 	b.w	8e4c <memset>

00009456 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9456:	f7ff bcee 	b.w	8e36 <memcpy>

0000945a <k_mem_slab_init>:
{
    945a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    945c:	2400      	movs	r4, #0
    945e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9460:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9462:	ea41 0402 	orr.w	r4, r1, r2
    9466:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    946a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    946e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9470:	d10c      	bne.n	948c <k_mem_slab_init+0x32>
    9472:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    9474:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    9476:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9478:	d103      	bne.n	9482 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    947a:	e9c0 0000 	strd	r0, r0, [r0]
}
    947e:	2000      	movs	r0, #0
}
    9480:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9482:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9484:	3401      	adds	r4, #1
    9486:	460d      	mov	r5, r1
		p += slab->block_size;
    9488:	4411      	add	r1, r2
    948a:	e7f3      	b.n	9474 <k_mem_slab_init+0x1a>
		return -EINVAL;
    948c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9490:	e7f6      	b.n	9480 <k_mem_slab_init+0x26>

00009492 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9492:	f3ef 8005 	mrs	r0, IPSR
}
    9496:	3800      	subs	r0, #0
    9498:	bf18      	it	ne
    949a:	2001      	movne	r0, #1
    949c:	4770      	bx	lr

0000949e <k_thread_name_get>:
}
    949e:	2000      	movs	r0, #0
    94a0:	4770      	bx	lr

000094a2 <z_pm_save_idle_exit>:
{
    94a2:	b508      	push	{r3, lr}
	pm_system_resume();
    94a4:	f7f9 f884 	bl	25b0 <pm_system_resume>
}
    94a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    94ac:	f7ff be21 	b.w	90f2 <sys_clock_idle_exit>

000094b0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    94b0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    94b4:	428b      	cmp	r3, r1
    94b6:	d001      	beq.n	94bc <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    94b8:	f7fd beae 	b.w	7218 <z_set_prio>
}
    94bc:	2000      	movs	r0, #0
    94be:	4770      	bx	lr

000094c0 <z_impl_k_mutex_init>:
{
    94c0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    94c2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    94c4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    94c8:	e9c3 3300 	strd	r3, r3, [r3]
}
    94cc:	4770      	bx	lr

000094ce <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    94ce:	b13a      	cbz	r2, 94e0 <z_impl_k_sem_init+0x12>
    94d0:	428a      	cmp	r2, r1
    94d2:	d305      	bcc.n	94e0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    94d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
    94d8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    94dc:	2000      	movs	r0, #0
    94de:	4770      	bx	lr
		return -EINVAL;
    94e0:	f06f 0015 	mvn.w	r0, #21
}
    94e4:	4770      	bx	lr

000094e6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    94e6:	4603      	mov	r3, r0
    94e8:	b920      	cbnz	r0, 94f4 <z_reschedule_irqlock+0xe>
    94ea:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    94ee:	b90a      	cbnz	r2, 94f4 <z_reschedule_irqlock+0xe>
    94f0:	f7f9 bb1e 	b.w	2b30 <arch_swap>
    94f4:	f383 8811 	msr	BASEPRI, r3
    94f8:	f3bf 8f6f 	isb	sy
}
    94fc:	4770      	bx	lr

000094fe <z_reschedule_unlocked>:
	__asm__ volatile(
    94fe:	f04f 0340 	mov.w	r3, #64	; 0x40
    9502:	f3ef 8011 	mrs	r0, BASEPRI
    9506:	f383 8812 	msr	BASEPRI_MAX, r3
    950a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    950e:	f7ff bfea 	b.w	94e6 <z_reschedule_irqlock>

00009512 <z_priq_dumb_best>:
{
    9512:	4603      	mov	r3, r0
	return list->head == list;
    9514:	6800      	ldr	r0, [r0, #0]
}
    9516:	4283      	cmp	r3, r0
    9518:	bf08      	it	eq
    951a:	2000      	moveq	r0, #0
    951c:	4770      	bx	lr

0000951e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    951e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9520:	f7fe fda2 	bl	8068 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9524:	bd08      	pop	{r3, pc}

00009526 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9526:	b108      	cbz	r0, 952c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9528:	f7fa b906 	b.w	3738 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    952c:	4770      	bx	lr

0000952e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    952e:	b510      	push	{r4, lr}
    9530:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    9532:	f7fe fbf9 	bl	7d28 <z_abort_timeout>

	if (inactive) {
    9536:	b9b0      	cbnz	r0, 9566 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    9538:	6a63      	ldr	r3, [r4, #36]	; 0x24
    953a:	b10b      	cbz	r3, 9540 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    953c:	4620      	mov	r0, r4
    953e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    9540:	f104 0018 	add.w	r0, r4, #24
    9544:	f7fd ffe4 	bl	7510 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9548:	b168      	cbz	r0, 9566 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    954a:	f7fd fc87 	bl	6e5c <z_ready_thread>
    954e:	f04f 0340 	mov.w	r3, #64	; 0x40
    9552:	f3ef 8011 	mrs	r0, BASEPRI
    9556:	f383 8812 	msr	BASEPRI_MAX, r3
    955a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    955e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9562:	f7ff bfc0 	b.w	94e6 <z_reschedule_irqlock>
    9566:	bd10      	pop	{r4, pc}

00009568 <k_heap_init>:
{
    9568:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    956a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    956e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9572:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9574:	f7f7 bf5c 	b.w	1430 <sys_heap_init>

00009578 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9578:	f7fb bb8a 	b.w	4c90 <SystemInit>
