
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 23 00 20 c1 35 00 00 55 90 00 00 95 35 00 00     .#. .5..U....5..
  10:	95 35 00 00 95 35 00 00 95 35 00 00 00 00 00 00     .5...5...5......
	...
  2c:	71 2e 00 00 95 35 00 00 00 00 00 00 1d 2e 00 00     q....5..........
  3c:	95 35 00 00                                         .5..

00000040 <_irq_vector_table>:
  40:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  50:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  60:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  70:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  80:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  90:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  a0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  b0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  c0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  d0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  e0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..
  f0:	21 2f 00 00 21 2f 00 00 21 2f 00 00 21 2f 00 00     !/..!/..!/..!/..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_ldivmod>:
     4c4:	b97b      	cbnz	r3, 4e6 <__aeabi_ldivmod+0x22>
     4c6:	b972      	cbnz	r2, 4e6 <__aeabi_ldivmod+0x22>
     4c8:	2900      	cmp	r1, #0
     4ca:	bfbe      	ittt	lt
     4cc:	2000      	movlt	r0, #0
     4ce:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     4d2:	e006      	blt.n	4e2 <__aeabi_ldivmod+0x1e>
     4d4:	bf08      	it	eq
     4d6:	2800      	cmpeq	r0, #0
     4d8:	bf1c      	itt	ne
     4da:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     4de:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4e2:	f000 b857 	b.w	594 <__aeabi_idiv0>
     4e6:	f1ad 0c08 	sub.w	ip, sp, #8
     4ea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4ee:	2900      	cmp	r1, #0
     4f0:	db09      	blt.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
     4f2:	2b00      	cmp	r3, #0
     4f4:	db1a      	blt.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4f6:	f008 f8a1 	bl	863c <__udivmoddi4>
     4fa:	f8dd e004 	ldr.w	lr, [sp, #4]
     4fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     502:	b004      	add	sp, #16
     504:	4770      	bx	lr
     506:	4240      	negs	r0, r0
     508:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     50c:	2b00      	cmp	r3, #0
     50e:	db1b      	blt.n	548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>
     510:	f008 f894 	bl	863c <__udivmoddi4>
     514:	f8dd e004 	ldr.w	lr, [sp, #4]
     518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     51c:	b004      	add	sp, #16
     51e:	4240      	negs	r0, r0
     520:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     524:	4252      	negs	r2, r2
     526:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     52a:	4770      	bx	lr
     52c:	4252      	negs	r2, r2
     52e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     532:	f008 f883 	bl	863c <__udivmoddi4>
     536:	f8dd e004 	ldr.w	lr, [sp, #4]
     53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     53e:	b004      	add	sp, #16
     540:	4240      	negs	r0, r0
     542:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     546:	4770      	bx	lr
     548:	4252      	negs	r2, r2
     54a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     54e:	f008 f875 	bl	863c <__udivmoddi4>
     552:	f8dd e004 	ldr.w	lr, [sp, #4]
     556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     55a:	b004      	add	sp, #16
     55c:	4252      	negs	r2, r2
     55e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     562:	4770      	bx	lr

00000564 <__aeabi_uldivmod>:
     564:	b953      	cbnz	r3, 57c <__aeabi_uldivmod+0x18>
     566:	b94a      	cbnz	r2, 57c <__aeabi_uldivmod+0x18>
     568:	2900      	cmp	r1, #0
     56a:	bf08      	it	eq
     56c:	2800      	cmpeq	r0, #0
     56e:	bf1c      	itt	ne
     570:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     574:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     578:	f000 b80c 	b.w	594 <__aeabi_idiv0>
     57c:	f1ad 0c08 	sub.w	ip, sp, #8
     580:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     584:	f008 f85a 	bl	863c <__udivmoddi4>
     588:	f8dd e004 	ldr.w	lr, [sp, #4]
     58c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     590:	b004      	add	sp, #16
     592:	4770      	bx	lr

00000594 <__aeabi_idiv0>:
     594:	4770      	bx	lr
     596:	bf00      	nop

00000598 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
     598:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_toggle(spec->port, spec->pin);
     59a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     59c:	7903      	ldrb	r3, [r0, #4]
     59e:	2401      	movs	r4, #1
     5a0:	409c      	lsls	r4, r3
     5a2:	686b      	ldr	r3, [r5, #4]
     5a4:	681b      	ldr	r3, [r3, #0]
     5a6:	421c      	tst	r4, r3
     5a8:	d10e      	bne.n	5c8 <gpio_pin_toggle_dt+0x30>
     5aa:	490b      	ldr	r1, [pc, #44]	; (5d8 <gpio_pin_toggle_dt+0x40>)
     5ac:	4a0b      	ldr	r2, [pc, #44]	; (5dc <gpio_pin_toggle_dt+0x44>)
     5ae:	480c      	ldr	r0, [pc, #48]	; (5e0 <gpio_pin_toggle_dt+0x48>)
     5b0:	f240 43bc 	movw	r3, #1212	; 0x4bc
     5b4:	f008 fcb9 	bl	8f2a <assert_print>
     5b8:	480a      	ldr	r0, [pc, #40]	; (5e4 <gpio_pin_toggle_dt+0x4c>)
     5ba:	f008 fcb6 	bl	8f2a <assert_print>
     5be:	4807      	ldr	r0, [pc, #28]	; (5dc <gpio_pin_toggle_dt+0x44>)
     5c0:	f240 41bc 	movw	r1, #1212	; 0x4bc
     5c4:	f008 fcaa 	bl	8f1c <assert_post_action>
	return api->port_toggle_bits(port, pins);
     5c8:	68ab      	ldr	r3, [r5, #8]
     5ca:	4621      	mov	r1, r4
     5cc:	4628      	mov	r0, r5
     5ce:	695b      	ldr	r3, [r3, #20]
}
     5d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_toggle_bits(port, pins);
     5d4:	4718      	bx	r3
     5d6:	bf00      	nop
     5d8:	00009e79 	.word	0x00009e79
     5dc:	00009e48 	.word	0x00009e48
     5e0:	00009eb7 	.word	0x00009eb7
     5e4:	00009ed4 	.word	0x00009ed4

000005e8 <gpio_pin_configure_dt>:
{
     5e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				  spec->dt_flags | extra_flags);
     5ec:	88c4      	ldrh	r4, [r0, #6]
	return gpio_pin_configure(spec->port,
     5ee:	6805      	ldr	r5, [r0, #0]
				  spec->pin,
     5f0:	7906      	ldrb	r6, [r0, #4]
	return gpio_pin_configure(spec->port,
     5f2:	430c      	orrs	r4, r1
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     5f4:	f004 0330 	and.w	r3, r4, #48	; 0x30
     5f8:	2b30      	cmp	r3, #48	; 0x30
	const struct gpio_driver_config *const cfg =
     5fa:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
     5fe:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     600:	d10e      	bne.n	620 <gpio_pin_configure_dt+0x38>
     602:	493d      	ldr	r1, [pc, #244]	; (6f8 <gpio_pin_configure_dt+0x110>)
     604:	4a3d      	ldr	r2, [pc, #244]	; (6fc <gpio_pin_configure_dt+0x114>)
     606:	483e      	ldr	r0, [pc, #248]	; (700 <gpio_pin_configure_dt+0x118>)
     608:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     60c:	f008 fc8d 	bl	8f2a <assert_print>
     610:	483c      	ldr	r0, [pc, #240]	; (704 <gpio_pin_configure_dt+0x11c>)
     612:	f008 fc8a 	bl	8f2a <assert_print>
     616:	4839      	ldr	r0, [pc, #228]	; (6fc <gpio_pin_configure_dt+0x114>)
     618:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     61c:	f008 fc7e 	bl	8f1c <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     620:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     624:	2b02      	cmp	r3, #2
     626:	d10e      	bne.n	646 <gpio_pin_configure_dt+0x5e>
     628:	4937      	ldr	r1, [pc, #220]	; (708 <gpio_pin_configure_dt+0x120>)
     62a:	4a34      	ldr	r2, [pc, #208]	; (6fc <gpio_pin_configure_dt+0x114>)
     62c:	4834      	ldr	r0, [pc, #208]	; (700 <gpio_pin_configure_dt+0x118>)
     62e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     632:	f008 fc7a 	bl	8f2a <assert_print>
     636:	4835      	ldr	r0, [pc, #212]	; (70c <gpio_pin_configure_dt+0x124>)
     638:	f008 fc77 	bl	8f2a <assert_print>
     63c:	482f      	ldr	r0, [pc, #188]	; (6fc <gpio_pin_configure_dt+0x114>)
     63e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     642:	f008 fc6b 	bl	8f1c <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     646:	f004 0306 	and.w	r3, r4, #6
     64a:	2b04      	cmp	r3, #4
     64c:	d10b      	bne.n	666 <gpio_pin_configure_dt+0x7e>
     64e:	4930      	ldr	r1, [pc, #192]	; (710 <gpio_pin_configure_dt+0x128>)
     650:	482b      	ldr	r0, [pc, #172]	; (700 <gpio_pin_configure_dt+0x118>)
     652:	4a2a      	ldr	r2, [pc, #168]	; (6fc <gpio_pin_configure_dt+0x114>)
     654:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     658:	f008 fc67 	bl	8f2a <assert_print>
     65c:	4827      	ldr	r0, [pc, #156]	; (6fc <gpio_pin_configure_dt+0x114>)
     65e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     662:	f008 fc5b 	bl	8f1c <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     666:	f414 2840 	ands.w	r8, r4, #786432	; 0xc0000
     66a:	d010      	beq.n	68e <gpio_pin_configure_dt+0xa6>
     66c:	03a3      	lsls	r3, r4, #14
     66e:	d40e      	bmi.n	68e <gpio_pin_configure_dt+0xa6>
     670:	4928      	ldr	r1, [pc, #160]	; (714 <gpio_pin_configure_dt+0x12c>)
     672:	4a22      	ldr	r2, [pc, #136]	; (6fc <gpio_pin_configure_dt+0x114>)
     674:	4822      	ldr	r0, [pc, #136]	; (700 <gpio_pin_configure_dt+0x118>)
     676:	f240 23c3 	movw	r3, #707	; 0x2c3
     67a:	f008 fc56 	bl	8f2a <assert_print>
     67e:	4826      	ldr	r0, [pc, #152]	; (718 <gpio_pin_configure_dt+0x130>)
     680:	f008 fc53 	bl	8f2a <assert_print>
     684:	481d      	ldr	r0, [pc, #116]	; (6fc <gpio_pin_configure_dt+0x114>)
     686:	f240 21c3 	movw	r1, #707	; 0x2c3
     68a:	f008 fc47 	bl	8f1c <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     68e:	02e0      	lsls	r0, r4, #11
     690:	d506      	bpl.n	6a0 <gpio_pin_configure_dt+0xb8>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     692:	f1b8 0f00 	cmp.w	r8, #0
     696:	d003      	beq.n	6a0 <gpio_pin_configure_dt+0xb8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     698:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     69a:	bf48      	it	mi
     69c:	f484 2440 	eormi.w	r4, r4, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     6a0:	f8db 3000 	ldr.w	r3, [fp]
     6a4:	f04f 0a01 	mov.w	sl, #1
     6a8:	fa0a fa06 	lsl.w	sl, sl, r6
     6ac:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     6b0:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     6b4:	d10e      	bne.n	6d4 <gpio_pin_configure_dt+0xec>
     6b6:	4919      	ldr	r1, [pc, #100]	; (71c <gpio_pin_configure_dt+0x134>)
     6b8:	4a10      	ldr	r2, [pc, #64]	; (6fc <gpio_pin_configure_dt+0x114>)
     6ba:	4811      	ldr	r0, [pc, #68]	; (700 <gpio_pin_configure_dt+0x118>)
     6bc:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     6c0:	f008 fc33 	bl	8f2a <assert_print>
     6c4:	4816      	ldr	r0, [pc, #88]	; (720 <gpio_pin_configure_dt+0x138>)
     6c6:	f008 fc30 	bl	8f2a <assert_print>
     6ca:	480c      	ldr	r0, [pc, #48]	; (6fc <gpio_pin_configure_dt+0x114>)
     6cc:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     6d0:	f008 fc24 	bl	8f1c <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     6d4:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     6d6:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     6d8:	bf4c      	ite	mi
     6da:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     6de:	ea23 030a 	bicpl.w	r3, r3, sl
     6e2:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     6e4:	f8d9 3000 	ldr.w	r3, [r9]
     6e8:	4642      	mov	r2, r8
     6ea:	4631      	mov	r1, r6
     6ec:	4628      	mov	r0, r5
}
     6ee:	b001      	add	sp, #4
     6f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
     6f4:	4718      	bx	r3
     6f6:	bf00      	nop
     6f8:	00009ee6 	.word	0x00009ee6
     6fc:	00009e48 	.word	0x00009e48
     700:	00009eb7 	.word	0x00009eb7
     704:	00009f1f 	.word	0x00009f1f
     708:	00009f5c 	.word	0x00009f5c
     70c:	00009f91 	.word	0x00009f91
     710:	00009fe3 	.word	0x00009fe3
     714:	0000a016 	.word	0x0000a016
     718:	0000a05c 	.word	0x0000a05c
     71c:	00009e79 	.word	0x00009e79
     720:	00009ed4 	.word	0x00009ed4

00000724 <gpio_pin_set_dt>:
{
     724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
     728:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     72a:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
     72c:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     72e:	2501      	movs	r5, #1
     730:	409d      	lsls	r5, r3
     732:	6863      	ldr	r3, [r4, #4]
     734:	681b      	ldr	r3, [r3, #0]
     736:	421d      	tst	r5, r3
{
     738:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     73a:	d10e      	bne.n	75a <gpio_pin_set_dt+0x36>
     73c:	4918      	ldr	r1, [pc, #96]	; (7a0 <gpio_pin_set_dt+0x7c>)
     73e:	4a19      	ldr	r2, [pc, #100]	; (7a4 <gpio_pin_set_dt+0x80>)
     740:	4819      	ldr	r0, [pc, #100]	; (7a8 <gpio_pin_set_dt+0x84>)
     742:	f240 4392 	movw	r3, #1170	; 0x492
     746:	f008 fbf0 	bl	8f2a <assert_print>
     74a:	4818      	ldr	r0, [pc, #96]	; (7ac <gpio_pin_set_dt+0x88>)
     74c:	f008 fbed 	bl	8f2a <assert_print>
     750:	4814      	ldr	r0, [pc, #80]	; (7a4 <gpio_pin_set_dt+0x80>)
     752:	f240 4192 	movw	r1, #1170	; 0x492
     756:	f008 fbe1 	bl	8f1c <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     75a:	683b      	ldr	r3, [r7, #0]
     75c:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     75e:	6863      	ldr	r3, [r4, #4]
     760:	681b      	ldr	r3, [r3, #0]
     762:	bf18      	it	ne
     764:	f086 0601 	eorne.w	r6, r6, #1
     768:	421d      	tst	r5, r3
     76a:	d10e      	bne.n	78a <gpio_pin_set_dt+0x66>
     76c:	490c      	ldr	r1, [pc, #48]	; (7a0 <gpio_pin_set_dt+0x7c>)
     76e:	4a0d      	ldr	r2, [pc, #52]	; (7a4 <gpio_pin_set_dt+0x80>)
     770:	480d      	ldr	r0, [pc, #52]	; (7a8 <gpio_pin_set_dt+0x84>)
     772:	f44f 638d 	mov.w	r3, #1128	; 0x468
     776:	f008 fbd8 	bl	8f2a <assert_print>
     77a:	480c      	ldr	r0, [pc, #48]	; (7ac <gpio_pin_set_dt+0x88>)
     77c:	f008 fbd5 	bl	8f2a <assert_print>
     780:	4808      	ldr	r0, [pc, #32]	; (7a4 <gpio_pin_set_dt+0x80>)
     782:	f44f 618d 	mov.w	r1, #1128	; 0x468
     786:	f008 fbc9 	bl	8f1c <assert_post_action>
	if (value != 0)	{
     78a:	b136      	cbz	r6, 79a <gpio_pin_set_dt+0x76>
	return api->port_set_bits_raw(port, pins);
     78c:	68a3      	ldr	r3, [r4, #8]
     78e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     790:	4629      	mov	r1, r5
     792:	4620      	mov	r0, r4
}
     794:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     798:	4718      	bx	r3
     79a:	68a3      	ldr	r3, [r4, #8]
     79c:	691b      	ldr	r3, [r3, #16]
     79e:	e7f7      	b.n	790 <gpio_pin_set_dt+0x6c>
     7a0:	00009e79 	.word	0x00009e79
     7a4:	00009e48 	.word	0x00009e48
     7a8:	00009eb7 	.word	0x00009eb7
     7ac:	00009ed4 	.word	0x00009ed4

000007b0 <thread_OUTPUT_code>:
		k_sem_give(&sem_filter_output); //ready to be taken, count increases (unless it's not max)
  	}
}

void thread_OUTPUT_code(void *argA , void *argB, void *argC)
{	
     7b0:	b570      	push	{r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     7b2:	4d2e      	ldr	r5, [pc, #184]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
	int ret;

    while(1) {

		k_sem_take(&sem_filter_output, K_FOREVER); //takes the semaphore given by the filter task
		printk("Thread OUTPUT released\n");
     7b4:	4e2e      	ldr	r6, [pc, #184]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
		printk("Distance after filter ->%4u m \n", distance);
     7b6:	4c2f      	ldr	r4, [pc, #188]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     7bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7c0:	4628      	mov	r0, r5
     7c2:	f006 f911 	bl	69e8 <z_impl_k_sem_take>
		printk("Thread OUTPUT released\n");
     7c6:	4630      	mov	r0, r6
     7c8:	f008 fab5 	bl	8d36 <printk>
		printk("Distance after filter ->%4u m \n", distance);
     7cc:	8821      	ldrh	r1, [r4, #0]
     7ce:	482a      	ldr	r0, [pc, #168]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7d0:	f008 fab1 	bl	8d36 <printk>
		if(distance >= 30){
     7d4:	8823      	ldrh	r3, [r4, #0]
     7d6:	2b1d      	cmp	r3, #29
     7d8:	d918      	bls.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
			/* LED1 ON */
			ret = gpio_pin_set_dt(&led1, 1);
     7da:	4828      	ldr	r0, [pc, #160]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7dc:	2101      	movs	r1, #1
     7de:	f7ff ffa1 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     7e2:	2800      	cmp	r0, #0
     7e4:	db11      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
				return;
			}
			ret = gpio_pin_set_dt(&led2, 0);
     7e6:	2100      	movs	r1, #0
			/* LEDS1,2 ON */
			ret = gpio_pin_set_dt(&led1, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led2, 1);
     7e8:	4825      	ldr	r0, [pc, #148]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7ea:	f7ff ff9b 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     7ee:	2800      	cmp	r0, #0
     7f0:	db0b      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
				return;
			}
			ret = gpio_pin_set_dt(&led3, 0);
     7f2:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led2, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led3, 1);
     7f4:	4823      	ldr	r0, [pc, #140]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7f6:	f7ff ff95 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     7fa:	2800      	cmp	r0, #0
     7fc:	db05      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
				return;
			}
			ret = gpio_pin_set_dt(&led4, 0);
     7fe:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led3, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led4, 1);
     800:	4821      	ldr	r0, [pc, #132]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     802:	f7ff ff8f 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     806:	2800      	cmp	r0, #0
     808:	dad6      	bge.n	7b8 <thread_OUTPUT_code+0x8>
				return;
			}
		}
  	}
}
     80a:	bd70      	pop	{r4, r5, r6, pc}
		}else if((distance >= 20) & (distance < 30)){
     80c:	f1a3 0214 	sub.w	r2, r3, #20
     810:	2a09      	cmp	r2, #9
     812:	d807      	bhi.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
			ret = gpio_pin_set_dt(&led1, 1);
     814:	4819      	ldr	r0, [pc, #100]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     816:	2101      	movs	r1, #1
     818:	f7ff ff84 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     81c:	2800      	cmp	r0, #0
     81e:	dbf4      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led2, 1);
     820:	2101      	movs	r1, #1
     822:	e7e1      	b.n	7e8 <thread_OUTPUT_code+0x38>
		}else if((distance >=  10) & (distance < 20)){
     824:	3b0a      	subs	r3, #10
     826:	2b09      	cmp	r3, #9
			ret = gpio_pin_set_dt(&led1, 1);
     828:	4814      	ldr	r0, [pc, #80]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     82a:	f04f 0101 	mov.w	r1, #1
		}else if((distance >=  10) & (distance < 20)){
     82e:	d80b      	bhi.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
			ret = gpio_pin_set_dt(&led1, 1);
     830:	f7ff ff78 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     834:	2800      	cmp	r0, #0
     836:	dbe8      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led2, 1);
     838:	4811      	ldr	r0, [pc, #68]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     83a:	2101      	movs	r1, #1
     83c:	f7ff ff72 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     840:	2800      	cmp	r0, #0
     842:	dbe2      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led3, 1);
     844:	2101      	movs	r1, #1
     846:	e7d5      	b.n	7f4 <thread_OUTPUT_code+0x44>
			ret = gpio_pin_set_dt(&led1, 1);
     848:	f7ff ff6c 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     84c:	2800      	cmp	r0, #0
     84e:	dbdc      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led2, 1);
     850:	480b      	ldr	r0, [pc, #44]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     852:	2101      	movs	r1, #1
     854:	f7ff ff66 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     858:	2800      	cmp	r0, #0
     85a:	dbd6      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led3, 1);
     85c:	4809      	ldr	r0, [pc, #36]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     85e:	2101      	movs	r1, #1
     860:	f7ff ff60 	bl	724 <gpio_pin_set_dt>
			if (ret < 0) {
     864:	2800      	cmp	r0, #0
     866:	dbd0      	blt.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			ret = gpio_pin_set_dt(&led4, 1);
     868:	2101      	movs	r1, #1
     86a:	e7c9      	b.n	800 <CONFIG_ISR_STACK_SIZE>
     86c:	20000518 	.word	0x20000518
     870:	0000a097 	.word	0x0000a097
     874:	20000e76 	.word	0x20000e76
     878:	0000a0af 	.word	0x0000a0af
     87c:	00009b70 	.word	0x00009b70
     880:	00009b78 	.word	0x00009b78
     884:	00009b80 	.word	0x00009b80
     888:	00009b88 	.word	0x00009b88

0000088c <thread_SENSOR_code>:
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
			printk("Thread SENSOR released\n");
     88e:	4f19      	ldr	r7, [pc, #100]	; (8f4 <thread_SENSOR_code+0x68>)
			NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     890:	4d19      	ldr	r5, [pc, #100]	; (8f8 <thread_SENSOR_code+0x6c>)
	const struct adc_sequence sequence = {
     892:	4e1a      	ldr	r6, [pc, #104]	; (8fc <thread_SENSOR_code+0x70>)
{
     894:	b087      	sub	sp, #28
			printk("Thread SENSOR released\n");
     896:	4638      	mov	r0, r7
     898:	f008 fa4d 	bl	8d36 <printk>
			NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     89c:	2301      	movs	r3, #1
     89e:	60eb      	str	r3, [r5, #12]
	const struct adc_sequence sequence = {
     8a0:	2302      	movs	r3, #2
     8a2:	9302      	str	r3, [sp, #8]
     8a4:	4b16      	ldr	r3, [pc, #88]	; (900 <thread_SENSOR_code+0x74>)
     8a6:	9303      	str	r3, [sp, #12]
     8a8:	2216      	movs	r2, #22
     8aa:	230a      	movs	r3, #10
     8ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (adc_dev == NULL) {
     8b0:	4b14      	ldr	r3, [pc, #80]	; (904 <thread_SENSOR_code+0x78>)
	const struct adc_sequence sequence = {
     8b2:	9601      	str	r6, [sp, #4]
	if (adc_dev == NULL) {
     8b4:	6818      	ldr	r0, [r3, #0]
     8b6:	b988      	cbnz	r0, 8dc <thread_SENSOR_code+0x50>
            printk("adc_sample(): error, must bind to adc first \n\r");
     8b8:	4813      	ldr	r0, [pc, #76]	; (908 <thread_SENSOR_code+0x7c>)
     8ba:	f008 fa3c 	bl	8d36 <printk>
            return -1;
     8be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
				printk("adc_sample() failed with error code %d\n\r",err);
     8c2:	4812      	ldr	r0, [pc, #72]	; (90c <thread_SENSOR_code+0x80>)
     8c4:	4621      	mov	r1, r4
     8c6:	f008 fa36 	bl	8d36 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     8ca:	4811      	ldr	r0, [pc, #68]	; (910 <thread_SENSOR_code+0x84>)
     8cc:	f006 f84e 	bl	696c <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
     8d0:	2100      	movs	r1, #0
     8d2:	f44f 30c0 	mov.w	r0, #98304	; 0x18000
     8d6:	f007 f965 	bl	7ba4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     8da:	e7dc      	b.n	896 <thread_SENSOR_code+0xa>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     8dc:	6883      	ldr	r3, [r0, #8]
     8de:	a901      	add	r1, sp, #4
     8e0:	685b      	ldr	r3, [r3, #4]
     8e2:	4798      	blx	r3
	if (ret) {
     8e4:	4604      	mov	r4, r0
     8e6:	2800      	cmp	r0, #0
     8e8:	d0ef      	beq.n	8ca <thread_SENSOR_code+0x3e>
            printk("adc_read() failed with code %d\n", ret);
     8ea:	4601      	mov	r1, r0
     8ec:	4809      	ldr	r0, [pc, #36]	; (914 <thread_SENSOR_code+0x88>)
     8ee:	f008 fa22 	bl	8d36 <printk>
			if(err) {
     8f2:	e7e6      	b.n	8c2 <thread_SENSOR_code+0x36>
     8f4:	0000a0cf 	.word	0x0000a0cf
     8f8:	40007000 	.word	0x40007000
     8fc:	00009b90 	.word	0x00009b90
     900:	20000e60 	.word	0x20000e60
     904:	20000508 	.word	0x20000508
     908:	0000a0e7 	.word	0x0000a0e7
     90c:	0000a136 	.word	0x0000a136
     910:	20000528 	.word	0x20000528
     914:	0000a116 	.word	0x0000a116

00000918 <button_pressed>:
gpio_callback_handler_t button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins){
     918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_uptime_ticks();
     91c:	f008 ff5f 	bl	97de <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     920:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     924:	4344      	muls	r4, r0
     926:	0be4      	lsrs	r4, r4, #15
	uint16_t end =  k_uptime_get() + 5000; //blink 5 seconds
     928:	f504 549c 	add.w	r4, r4, #4992	; 0x1380
     92c:	3408      	adds	r4, #8
			printk("BLINK\n");
     92e:	4f20      	ldr	r7, [pc, #128]	; (9b0 <button_pressed+0x98>)
			err = gpio_pin_toggle_dt(&led1);
     930:	f8df 8080 	ldr.w	r8, [pc, #128]	; 9b4 <button_pressed+0x9c>
	uint16_t end =  k_uptime_get() + 5000; //blink 5 seconds
     934:	b2a4      	uxth	r4, r4
	while(k_uptime_get() <= end){
     936:	2600      	movs	r6, #0
     938:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
     93c:	f008 ff4f 	bl	97de <z_impl_k_uptime_ticks>
     940:	fba0 0305 	umull	r0, r3, r0, r5
     944:	fb05 3101 	mla	r1, r5, r1, r3
     948:	0bc3      	lsrs	r3, r0, #15
     94a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     94e:	429c      	cmp	r4, r3
     950:	ea4f 31d1 	mov.w	r1, r1, lsr #15
     954:	eb76 0101 	sbcs.w	r1, r6, r1
     958:	db27      	blt.n	9aa <button_pressed+0x92>
     95a:	f008 ff40 	bl	97de <z_impl_k_uptime_ticks>
     95e:	fba0 0305 	umull	r0, r3, r0, r5
     962:	fb05 3101 	mla	r1, r5, r1, r3
     966:	0bc0      	lsrs	r0, r0, #15
     968:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
     96c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     970:	2300      	movs	r3, #0
     972:	0bc9      	lsrs	r1, r1, #15
     974:	f7ff fda6 	bl	4c4 <__aeabi_ldivmod>
		if(k_uptime_get() % 500 == 0){
     978:	431a      	orrs	r2, r3
     97a:	d1df      	bne.n	93c <button_pressed+0x24>
			printk("BLINK\n");
     97c:	4638      	mov	r0, r7
     97e:	f008 f9da 	bl	8d36 <printk>
			err = gpio_pin_toggle_dt(&led1);
     982:	4640      	mov	r0, r8
     984:	f7ff fe08 	bl	598 <gpio_pin_toggle_dt>
			if (err < 0) {
     988:	2800      	cmp	r0, #0
     98a:	db0e      	blt.n	9aa <button_pressed+0x92>
			err = gpio_pin_toggle_dt(&led2);
     98c:	480a      	ldr	r0, [pc, #40]	; (9b8 <button_pressed+0xa0>)
     98e:	f7ff fe03 	bl	598 <gpio_pin_toggle_dt>
			if (err < 0) {
     992:	2800      	cmp	r0, #0
     994:	db09      	blt.n	9aa <button_pressed+0x92>
			err = gpio_pin_toggle_dt(&led3);
     996:	4809      	ldr	r0, [pc, #36]	; (9bc <button_pressed+0xa4>)
     998:	f7ff fdfe 	bl	598 <gpio_pin_toggle_dt>
			if (err < 0) {
     99c:	2800      	cmp	r0, #0
     99e:	db04      	blt.n	9aa <button_pressed+0x92>
			err = gpio_pin_toggle_dt(&led4);
     9a0:	4807      	ldr	r0, [pc, #28]	; (9c0 <button_pressed+0xa8>)
     9a2:	f7ff fdf9 	bl	598 <gpio_pin_toggle_dt>
			if (err < 0) {
     9a6:	2800      	cmp	r0, #0
     9a8:	dac5      	bge.n	936 <button_pressed+0x1e>
}
     9aa:	2000      	movs	r0, #0
     9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9b0:	0000a15f 	.word	0x0000a15f
     9b4:	00009b70 	.word	0x00009b70
     9b8:	00009b78 	.word	0x00009b78
     9bc:	00009b80 	.word	0x00009b80
     9c0:	00009b88 	.word	0x00009b88

000009c4 <main>:
{
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	b08d      	sub	sp, #52	; 0x34
	int arg1=0, arg2=0, arg3=0; // Input args of tasks (actually not used in this case)
     9c8:	2300      	movs	r3, #0
     9ca:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
     9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     9d0:	4c62      	ldr	r4, [pc, #392]	; (b5c <main+0x198>)
     9d2:	4620      	mov	r0, r4
     9d4:	f008 fe7f 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(button.port)) {
     9d8:	b928      	cbnz	r0, 9e6 <main+0x22>
		printk("Error: button device %s is not ready\n",
     9da:	6821      	ldr	r1, [r4, #0]
     9dc:	4860      	ldr	r0, [pc, #384]	; (b60 <main+0x19c>)
     9de:	f008 f9aa 	bl	8d36 <printk>
}
     9e2:	b00d      	add	sp, #52	; 0x34
     9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = gpio_pin_configure_dt(&button, GPIO_INPUT | GPIO_INT_DEBOUNCE );
     9e6:	495f      	ldr	r1, [pc, #380]	; (b64 <main+0x1a0>)
     9e8:	485f      	ldr	r0, [pc, #380]	; (b68 <main+0x1a4>)
     9ea:	f7ff fdfd 	bl	5e8 <gpio_pin_configure_dt>
	if (err < 0) {
     9ee:	2800      	cmp	r0, #0
     9f0:	dbf7      	blt.n	9e2 <main+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9f2:	6863      	ldr	r3, [r4, #4]
	const struct gpio_driver_api *api =
     9f4:	68a5      	ldr	r5, [r4, #8]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9f6:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_data *const data =
     9f8:	6926      	ldr	r6, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     9fa:	051b      	lsls	r3, r3, #20
     9fc:	d40e      	bmi.n	a1c <main+0x58>
     9fe:	495b      	ldr	r1, [pc, #364]	; (b6c <main+0x1a8>)
     a00:	4a5b      	ldr	r2, [pc, #364]	; (b70 <main+0x1ac>)
     a02:	485c      	ldr	r0, [pc, #368]	; (b74 <main+0x1b0>)
     a04:	f240 2375 	movw	r3, #629	; 0x275
     a08:	f008 fa8f 	bl	8f2a <assert_print>
     a0c:	485a      	ldr	r0, [pc, #360]	; (b78 <main+0x1b4>)
     a0e:	f008 fa8c 	bl	8f2a <assert_print>
     a12:	4857      	ldr	r0, [pc, #348]	; (b70 <main+0x1ac>)
     a14:	f240 2175 	movw	r1, #629	; 0x275
     a18:	f008 fa80 	bl	8f1c <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     a1c:	6833      	ldr	r3, [r6, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     a1e:	69ac      	ldr	r4, [r5, #24]
     a20:	484e      	ldr	r0, [pc, #312]	; (b5c <main+0x198>)
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     a22:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
     a26:	bf0c      	ite	eq
     a28:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     a2c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     a30:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     a34:	210b      	movs	r1, #11
     a36:	47a0      	blx	r4
	if (err < 0) {
     a38:	2800      	cmp	r0, #0
     a3a:	dbd2      	blt.n	9e2 <main+0x1e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     a3c:	494f      	ldr	r1, [pc, #316]	; (b7c <main+0x1b8>)
     a3e:	4b50      	ldr	r3, [pc, #320]	; (b80 <main+0x1bc>)
     a40:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     a42:	f44f 6300 	mov.w	r3, #2048	; 0x800
     a46:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     a48:	69eb      	ldr	r3, [r5, #28]
     a4a:	b113      	cbz	r3, a52 <main+0x8e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     a4c:	4843      	ldr	r0, [pc, #268]	; (b5c <main+0x198>)
     a4e:	2201      	movs	r2, #1
     a50:	4798      	blx	r3
     a52:	4842      	ldr	r0, [pc, #264]	; (b5c <main+0x198>)
     a54:	f008 fe3f 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(led1.port)) {
     a58:	2800      	cmp	r0, #0
     a5a:	d0c2      	beq.n	9e2 <main+0x1e>
     a5c:	483f      	ldr	r0, [pc, #252]	; (b5c <main+0x198>)
     a5e:	f008 fe3a 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(led2.port)) {
     a62:	2800      	cmp	r0, #0
     a64:	d0bd      	beq.n	9e2 <main+0x1e>
     a66:	483d      	ldr	r0, [pc, #244]	; (b5c <main+0x198>)
     a68:	f008 fe35 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(led3.port)) {
     a6c:	2800      	cmp	r0, #0
     a6e:	d0b8      	beq.n	9e2 <main+0x1e>
     a70:	483a      	ldr	r0, [pc, #232]	; (b5c <main+0x198>)
     a72:	f008 fe30 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(led4.port)) {
     a76:	2800      	cmp	r0, #0
     a78:	d0b3      	beq.n	9e2 <main+0x1e>
	err = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     a7a:	4842      	ldr	r0, [pc, #264]	; (b84 <main+0x1c0>)
     a7c:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     a80:	f7ff fdb2 	bl	5e8 <gpio_pin_configure_dt>
	if (err < 0) {
     a84:	2800      	cmp	r0, #0
     a86:	dbac      	blt.n	9e2 <main+0x1e>
	err = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     a88:	483f      	ldr	r0, [pc, #252]	; (b88 <main+0x1c4>)
     a8a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     a8e:	f7ff fdab 	bl	5e8 <gpio_pin_configure_dt>
	if (err < 0) {
     a92:	2800      	cmp	r0, #0
     a94:	dba5      	blt.n	9e2 <main+0x1e>
	err = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_ACTIVE);
     a96:	483d      	ldr	r0, [pc, #244]	; (b8c <main+0x1c8>)
     a98:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     a9c:	f7ff fda4 	bl	5e8 <gpio_pin_configure_dt>
	if (err < 0) {
     aa0:	2800      	cmp	r0, #0
     aa2:	db9e      	blt.n	9e2 <main+0x1e>
	err = gpio_pin_configure_dt(&led4, GPIO_OUTPUT_ACTIVE);
     aa4:	483a      	ldr	r0, [pc, #232]	; (b90 <main+0x1cc>)
     aa6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     aaa:	f7ff fd9d 	bl	5e8 <gpio_pin_configure_dt>
	if (err < 0) {
     aae:	2800      	cmp	r0, #0
     ab0:	db97      	blt.n	9e2 <main+0x1e>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     ab2:	4838      	ldr	r0, [pc, #224]	; (b94 <main+0x1d0>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     ab4:	4c38      	ldr	r4, [pc, #224]	; (b98 <main+0x1d4>)
     ab6:	f005 f98b 	bl	5dd0 <z_impl_device_get_binding>
     aba:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     abc:	b910      	cbnz	r0, ac4 <main+0x100>
        printk("ADC device_get_binding() failed\n");
     abe:	4837      	ldr	r0, [pc, #220]	; (b9c <main+0x1d8>)
     ac0:	f008 f939 	bl	8d36 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     ac4:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     ac6:	6883      	ldr	r3, [r0, #8]
     ac8:	4935      	ldr	r1, [pc, #212]	; (ba0 <main+0x1dc>)
     aca:	681b      	ldr	r3, [r3, #0]
     acc:	4798      	blx	r3
    if (err) {
     ace:	4601      	mov	r1, r0
     ad0:	b110      	cbz	r0, ad8 <main+0x114>
        printk("adc_channel_setup() failed with error code %d\n", err);
     ad2:	4834      	ldr	r0, [pc, #208]	; (ba4 <main+0x1e0>)
     ad4:	f008 f92f 	bl	8d36 <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
     ad8:	2201      	movs	r2, #1
     ada:	2100      	movs	r1, #0
     adc:	4832      	ldr	r0, [pc, #200]	; (ba8 <main+0x1e4>)
     ade:	f008 fe52 	bl	9786 <z_impl_k_sem_init>
     ae2:	2201      	movs	r2, #1
     ae4:	2100      	movs	r1, #0
     ae6:	4831      	ldr	r0, [pc, #196]	; (bac <main+0x1e8>)
     ae8:	f008 fe4d 	bl	9786 <z_impl_k_sem_init>
    thread_SENSOR_tid = k_thread_create(&thread_SENSOR_data, thread_SENSOR_stack,
     aec:	2600      	movs	r6, #0
     aee:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     af0:	ab0b      	add	r3, sp, #44	; 0x2c
     af2:	9302      	str	r3, [sp, #8]
     af4:	ab0a      	add	r3, sp, #40	; 0x28
     af6:	9301      	str	r3, [sp, #4]
     af8:	2501      	movs	r5, #1
     afa:	ab09      	add	r3, sp, #36	; 0x24
     afc:	2400      	movs	r4, #0
     afe:	9300      	str	r3, [sp, #0]
     b00:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b04:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b08:	4b29      	ldr	r3, [pc, #164]	; (bb0 <main+0x1ec>)
     b0a:	492a      	ldr	r1, [pc, #168]	; (bb4 <main+0x1f0>)
     b0c:	482a      	ldr	r0, [pc, #168]	; (bb8 <main+0x1f4>)
     b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b12:	f005 fc3d 	bl	6390 <z_impl_k_thread_create>
     b16:	4b29      	ldr	r3, [pc, #164]	; (bbc <main+0x1f8>)
     b18:	6018      	str	r0, [r3, #0]
     b1a:	4b29      	ldr	r3, [pc, #164]	; (bc0 <main+0x1fc>)
     b1c:	4929      	ldr	r1, [pc, #164]	; (bc4 <main+0x200>)
     b1e:	9400      	str	r4, [sp, #0]
     b20:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b24:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b28:	e9cd 4401 	strd	r4, r4, [sp, #4]
     b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b30:	4825      	ldr	r0, [pc, #148]	; (bc8 <main+0x204>)
     b32:	f005 fc2d 	bl	6390 <z_impl_k_thread_create>
    thread_FILTER_tid = k_thread_create(&thread_FILTER_data, thread_FILTER_stack,
     b36:	4b25      	ldr	r3, [pc, #148]	; (bcc <main+0x208>)
     b38:	6018      	str	r0, [r3, #0]
     b3a:	4b25      	ldr	r3, [pc, #148]	; (bd0 <main+0x20c>)
     b3c:	4925      	ldr	r1, [pc, #148]	; (bd4 <main+0x210>)
     b3e:	4826      	ldr	r0, [pc, #152]	; (bd8 <main+0x214>)
     b40:	9400      	str	r4, [sp, #0]
     b42:	e9cd 6706 	strd	r6, r7, [sp, #24]
     b46:	e9cd 5403 	strd	r5, r4, [sp, #12]
     b4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
     b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
     b52:	f005 fc1d 	bl	6390 <z_impl_k_thread_create>
    thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
     b56:	4b21      	ldr	r3, [pc, #132]	; (bdc <main+0x218>)
     b58:	6018      	str	r0, [r3, #0]
    return;
     b5a:	e742      	b.n	9e2 <main+0x1e>
     b5c:	000098e8 	.word	0x000098e8
     b60:	0000a166 	.word	0x0000a166
     b64:	00010100 	.word	0x00010100
     b68:	00009b68 	.word	0x00009b68
     b6c:	00009e79 	.word	0x00009e79
     b70:	00009e48 	.word	0x00009e48
     b74:	00009eb7 	.word	0x00009eb7
     b78:	00009ed4 	.word	0x00009ed4
     b7c:	2000050c 	.word	0x2000050c
     b80:	00000919 	.word	0x00000919
     b84:	00009b70 	.word	0x00009b70
     b88:	00009b78 	.word	0x00009b78
     b8c:	00009b80 	.word	0x00009b80
     b90:	00009b88 	.word	0x00009b88
     b94:	0000a18c 	.word	0x0000a18c
     b98:	20000508 	.word	0x20000508
     b9c:	0000a192 	.word	0x0000a192
     ba0:	00009e40 	.word	0x00009e40
     ba4:	0000a1b3 	.word	0x0000a1b3
     ba8:	20000528 	.word	0x20000528
     bac:	20000518 	.word	0x20000518
     bb0:	0000088d 	.word	0x0000088d
     bb4:	200012a0 	.word	0x200012a0
     bb8:	20000360 	.word	0x20000360
     bbc:	20000540 	.word	0x20000540
     bc0:	00000c25 	.word	0x00000c25
     bc4:	200016c0 	.word	0x200016c0
     bc8:	20000260 	.word	0x20000260
     bcc:	20000538 	.word	0x20000538
     bd0:	000007b1 	.word	0x000007b1
     bd4:	20001ae0 	.word	0x20001ae0
     bd8:	200002e0 	.word	0x200002e0
     bdc:	2000053c 	.word	0x2000053c

00000be0 <filter>:

void filter(uint16_t *arr){
     be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t sum = 0;
	uint16_t v;
	for (int i = 1; i < N_SAMPLES + 1; i++){
		v = (uint16_t)(10*arr[i]*((float)3/1023));
     be4:	f8df 8034 	ldr.w	r8, [pc, #52]	; c1c <filter+0x3c>
void filter(uint16_t *arr){
     be8:	4605      	mov	r5, r0
     bea:	f100 0714 	add.w	r7, r0, #20
	uint16_t sum = 0;
     bee:	2400      	movs	r4, #0
		v = (uint16_t)(10*arr[i]*((float)3/1023));
     bf0:	260a      	movs	r6, #10
     bf2:	f835 0f02 	ldrh.w	r0, [r5, #2]!
     bf6:	4370      	muls	r0, r6
     bf8:	f7ff fbf0 	bl	3dc <__aeabi_i2f>
     bfc:	4641      	mov	r1, r8
     bfe:	f7ff fa7f 	bl	100 <__aeabi_fmul>
     c02:	f7ff fc3f 	bl	484 <__aeabi_f2uiz>
	for (int i = 1; i < N_SAMPLES + 1; i++){
     c06:	42af      	cmp	r7, r5
		if(v != 0){
			sum += v;
     c08:	4404      	add	r4, r0
     c0a:	b2a4      	uxth	r4, r4
	for (int i = 1; i < N_SAMPLES + 1; i++){
     c0c:	d1f1      	bne.n	bf2 <filter+0x12>
		}
	}
	uint16_t avg=(uint16_t)sum/N_SAMPLES;
     c0e:	fbb4 f4f6 	udiv	r4, r4, r6
	distance = avg;
     c12:	4b03      	ldr	r3, [pc, #12]	; (c20 <filter+0x40>)
     c14:	801c      	strh	r4, [r3, #0]
     c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c1a:	bf00      	nop
     c1c:	3b40300c 	.word	0x3b40300c
     c20:	20000e76 	.word	0x20000e76

00000c24 <thread_FILTER_code>:
{	
     c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return z_impl_k_sem_take(sem, timeout);
     c28:	4f1c      	ldr	r7, [pc, #112]	; (c9c <thread_FILTER_code+0x78>)
		printk("Thread FILTER released\n");
     c2a:	f8df 8074 	ldr.w	r8, [pc, #116]	; ca0 <thread_FILTER_code+0x7c>
					printk("Sensor %d :%4u m \n\r", i, (uint16_t)(10*adc_sample_buffer[i]*((float)3/1023)));
     c2e:	4e1d      	ldr	r6, [pc, #116]	; (ca4 <thread_FILTER_code+0x80>)
     c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c38:	4638      	mov	r0, r7
     c3a:	f005 fed5 	bl	69e8 <z_impl_k_sem_take>
		printk("Thread FILTER released\n");
     c3e:	4640      	mov	r0, r8
     c40:	f008 f879 	bl	8d36 <printk>
		for(int i = 1; i < BUFFER_SIZE + 1; i++){
     c44:	4d18      	ldr	r5, [pc, #96]	; (ca8 <thread_FILTER_code+0x84>)
					printk("Sensor %d :%4u m \n\r", i, (uint16_t)(10*adc_sample_buffer[i]*((float)3/1023)));
     c46:	f8df 9064 	ldr.w	r9, [pc, #100]	; cac <thread_FILTER_code+0x88>
					printk("Sensor reading %d out of range: %d\n\r", i+1, (uint16_t)adc_sample_buffer[i]);
     c4a:	f8df a064 	ldr.w	sl, [pc, #100]	; cb0 <thread_FILTER_code+0x8c>
		for(int i = 1; i < BUFFER_SIZE + 1; i++){
     c4e:	2401      	movs	r4, #1
				if(adc_sample_buffer[i] > 1023) {
     c50:	f835 2f02 	ldrh.w	r2, [r5, #2]!
     c54:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
     c58:	46a3      	mov	fp, r4
					printk("Sensor reading %d out of range: %d\n\r", i+1, (uint16_t)adc_sample_buffer[i]);
     c5a:	f104 0401 	add.w	r4, r4, #1
				if(adc_sample_buffer[i] > 1023) {
     c5e:	d30e      	bcc.n	c7e <thread_FILTER_code+0x5a>
					printk("Sensor reading %d out of range: %d\n\r", i+1, (uint16_t)adc_sample_buffer[i]);
     c60:	4621      	mov	r1, r4
     c62:	4650      	mov	r0, sl
     c64:	f008 f867 	bl	8d36 <printk>
					adc_sample_buffer[i] = 0;
     c68:	2300      	movs	r3, #0
     c6a:	802b      	strh	r3, [r5, #0]
		for(int i = 1; i < BUFFER_SIZE + 1; i++){
     c6c:	2c0b      	cmp	r4, #11
     c6e:	d1ef      	bne.n	c50 <thread_FILTER_code+0x2c>
		filter(adc_sample_buffer);
     c70:	480d      	ldr	r0, [pc, #52]	; (ca8 <thread_FILTER_code+0x84>)
     c72:	f7ff ffb5 	bl	be0 <filter>
	z_impl_k_sem_give(sem);
     c76:	480f      	ldr	r0, [pc, #60]	; (cb4 <thread_FILTER_code+0x90>)
     c78:	f005 fe78 	bl	696c <z_impl_k_sem_give>
    while(1) {
     c7c:	e7d8      	b.n	c30 <thread_FILTER_code+0xc>
					printk("Sensor %d :%4u m \n\r", i, (uint16_t)(10*adc_sample_buffer[i]*((float)3/1023)));
     c7e:	200a      	movs	r0, #10
     c80:	4350      	muls	r0, r2
     c82:	f7ff fbab 	bl	3dc <__aeabi_i2f>
     c86:	4631      	mov	r1, r6
     c88:	f7ff fa3a 	bl	100 <__aeabi_fmul>
     c8c:	f7ff fbfa 	bl	484 <__aeabi_f2uiz>
     c90:	4659      	mov	r1, fp
     c92:	b282      	uxth	r2, r0
     c94:	4648      	mov	r0, r9
     c96:	f008 f84e 	bl	8d36 <printk>
     c9a:	e7e7      	b.n	c6c <thread_FILTER_code+0x48>
     c9c:	20000528 	.word	0x20000528
     ca0:	0000a1e2 	.word	0x0000a1e2
     ca4:	3b40300c 	.word	0x3b40300c
     ca8:	20000e60 	.word	0x20000e60
     cac:	0000a21f 	.word	0x0000a21f
     cb0:	0000a1fa 	.word	0x0000a1fa
     cb4:	20000518 	.word	0x20000518

00000cb8 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cbc:	b08d      	sub	sp, #52	; 0x34
     cbe:	461f      	mov	r7, r3
     cc0:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     cc2:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     cc6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     cca:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     ccc:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     cce:	0782      	lsls	r2, r0, #30
     cd0:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     cd4:	9304      	str	r3, [sp, #16]
{
     cd6:	4605      	mov	r5, r0
     cd8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     cda:	f040 8217 	bne.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     cde:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     ce0:	2800      	cmp	r0, #0
     ce2:	f040 8216 	bne.w	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     ce6:	f001 0607 	and.w	r6, r1, #7
     cea:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     cec:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     cf0:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     cf4:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     cf8:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     cfa:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     cfe:	4652      	mov	r2, sl
	bool parsing = false;
     d00:	4651      	mov	r1, sl
	size = sizeof(char *);
     d02:	f8cd 8000 	str.w	r8, [sp]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     d06:	b105      	cbz	r5, d0a <cbvprintf_package+0x52>
				*(const char **)buf = s;
     d08:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     d0a:	9804      	ldr	r0, [sp, #16]
     d0c:	2800      	cmp	r0, #0
     d0e:	dc07      	bgt.n	d20 <cbvprintf_package+0x68>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     d10:	48be      	ldr	r0, [pc, #760]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     d12:	4287      	cmp	r7, r0
     d14:	f0c0 811a 	bcc.w	f4c <cbvprintf_package+0x294>
     d18:	48bd      	ldr	r0, [pc, #756]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     d1a:	4287      	cmp	r7, r0
     d1c:	f080 8116 	bcs.w	f4c <cbvprintf_package+0x294>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     d20:	9802      	ldr	r0, [sp, #8]
     d22:	f010 0e02 	ands.w	lr, r0, #2
     d26:	f000 8136 	beq.w	f96 <cbvprintf_package+0x2de>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     d2a:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d2e:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d30:	f1be 0f00 	cmp.w	lr, #0
     d34:	f000 8110 	beq.w	f58 <cbvprintf_package+0x2a0>
     d38:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     d3c:	f0c0 810c 	bcc.w	f58 <cbvprintf_package+0x2a0>
					__ASSERT(false, "String with too many arguments");
     d40:	49b4      	ldr	r1, [pc, #720]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     d42:	4ab5      	ldr	r2, [pc, #724]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     d44:	48b5      	ldr	r0, [pc, #724]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     d46:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     d4a:	f008 f8ee 	bl	8f2a <assert_print>
     d4e:	48b4      	ldr	r0, [pc, #720]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     d50:	f008 f8eb 	bl	8f2a <assert_print>
     d54:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
     d58:	48af      	ldr	r0, [pc, #700]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     d5a:	f008 f8df 	bl	8f1c <assert_post_action>
					return -EINVAL;
     d5e:	f06f 0015 	mvn.w	r0, #21
     d62:	e0e2      	b.n	f2a <cbvprintf_package+0x272>
		if (!parsing) {
     d64:	b939      	cbnz	r1, d76 <cbvprintf_package+0xbe>
			if (*fmt == '%') {
     d66:	2825      	cmp	r0, #37	; 0x25
     d68:	d115      	bne.n	d96 <cbvprintf_package+0xde>
				parsing = true;
     d6a:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     d6c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     d70:	f8cd 8000 	str.w	r8, [sp]
     d74:	e00f      	b.n	d96 <cbvprintf_package+0xde>
		switch (*fmt) {
     d76:	287a      	cmp	r0, #122	; 0x7a
     d78:	f200 8166 	bhi.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     d7c:	284b      	cmp	r0, #75	; 0x4b
     d7e:	d820      	bhi.n	dc2 <cbvprintf_package+0x10a>
     d80:	2847      	cmp	r0, #71	; 0x47
     d82:	f200 8161 	bhi.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     d86:	2829      	cmp	r0, #41	; 0x29
     d88:	f200 8084 	bhi.w	e94 <cbvprintf_package+0x1dc>
     d8c:	2820      	cmp	r0, #32
     d8e:	d002      	beq.n	d96 <cbvprintf_package+0xde>
			parsing = false;
     d90:	2823      	cmp	r0, #35	; 0x23
     d92:	bf18      	it	ne
     d94:	2100      	movne	r1, #0
	while (*++fmt != '\0') {
     d96:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     d9a:	2800      	cmp	r0, #0
     d9c:	d1e2      	bne.n	d64 <cbvprintf_package+0xac>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     d9e:	1b61      	subs	r1, r4, r5
     da0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     da4:	f0c0 8152 	bcc.w	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
		__ASSERT(false, "too many format args");
     da8:	499a      	ldr	r1, [pc, #616]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     daa:	4a9b      	ldr	r2, [pc, #620]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     dac:	489b      	ldr	r0, [pc, #620]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     dae:	f240 233d 	movw	r3, #573	; 0x23d
     db2:	f008 f8ba 	bl	8f2a <assert_print>
     db6:	489b      	ldr	r0, [pc, #620]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     db8:	f008 f8b7 	bl	8f2a <assert_print>
     dbc:	f240 213d 	movw	r1, #573	; 0x23d
     dc0:	e7ca      	b.n	d58 <cbvprintf_package+0xa0>
		switch (*fmt) {
     dc2:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     dc6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     dca:	f200 813d 	bhi.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     dce:	f20f 0e08 	addw	lr, pc, #8
     dd2:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     dd6:	bf00      	nop
     dd8:	00000d97 	.word	0x00000d97
     ddc:	00001049 	.word	0x00001049
     de0:	00001049 	.word	0x00001049
     de4:	00001049 	.word	0x00001049
     de8:	00001049 	.word	0x00001049
     dec:	00001049 	.word	0x00001049
     df0:	00001049 	.word	0x00001049
     df4:	00001049 	.word	0x00001049
     df8:	00001049 	.word	0x00001049
     dfc:	00001049 	.word	0x00001049
     e00:	00001049 	.word	0x00001049
     e04:	00001049 	.word	0x00001049
     e08:	00000eeb 	.word	0x00000eeb
     e0c:	00001049 	.word	0x00001049
     e10:	00001049 	.word	0x00001049
     e14:	00001049 	.word	0x00001049
     e18:	00001049 	.word	0x00001049
     e1c:	00001049 	.word	0x00001049
     e20:	00001049 	.word	0x00001049
     e24:	00001049 	.word	0x00001049
     e28:	00001049 	.word	0x00001049
     e2c:	00000f09 	.word	0x00000f09
     e30:	00001049 	.word	0x00001049
     e34:	00000eeb 	.word	0x00000eeb
     e38:	00000eeb 	.word	0x00000eeb
     e3c:	00000f09 	.word	0x00000f09
     e40:	00000f09 	.word	0x00000f09
     e44:	00000f09 	.word	0x00000f09
     e48:	00000d97 	.word	0x00000d97
     e4c:	00000eeb 	.word	0x00000eeb
     e50:	00000f39 	.word	0x00000f39
     e54:	00001049 	.word	0x00001049
     e58:	00000d97 	.word	0x00000d97
     e5c:	00001049 	.word	0x00001049
     e60:	00000f3f 	.word	0x00000f3f
     e64:	00000eeb 	.word	0x00000eeb
     e68:	00000f3f 	.word	0x00000f3f
     e6c:	00001049 	.word	0x00001049
     e70:	00001049 	.word	0x00001049
     e74:	00000f3f 	.word	0x00000f3f
     e78:	00000d6d 	.word	0x00000d6d
     e7c:	00000eeb 	.word	0x00000eeb
     e80:	00001049 	.word	0x00001049
     e84:	00001049 	.word	0x00001049
     e88:	00000eeb 	.word	0x00000eeb
     e8c:	00001049 	.word	0x00001049
     e90:	00000d6d 	.word	0x00000d6d
     e94:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     e98:	f04f 0e01 	mov.w	lr, #1
     e9c:	fa5f fc8c 	uxtb.w	ip, ip
     ea0:	fa0e fc0c 	lsl.w	ip, lr, ip
     ea4:	f64f 7eda 	movw	lr, #65498	; 0xffda
     ea8:	ea1c 0f0e 	tst.w	ip, lr
     eac:	f47f af73 	bne.w	d96 <cbvprintf_package+0xde>
     eb0:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
     eb4:	d128      	bne.n	f08 <cbvprintf_package+0x250>
     eb6:	f01c 0101 	ands.w	r1, ip, #1
     eba:	f43f af6c 	beq.w	d96 <cbvprintf_package+0xde>
		buf = (void *) ROUND_UP(buf, align);
     ebe:	3c01      	subs	r4, #1
     ec0:	4444      	add	r4, r8
     ec2:	f1c8 0c00 	rsb	ip, r8, #0
     ec6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     eca:	b135      	cbz	r5, eda <cbvprintf_package+0x222>
     ecc:	f8dd c000 	ldr.w	ip, [sp]
     ed0:	ebac 0c05 	sub.w	ip, ip, r5
     ed4:	44a4      	add	ip, r4
     ed6:	45b4      	cmp	ip, r6
     ed8:	d825      	bhi.n	f26 <cbvprintf_package+0x26e>
		if (*fmt == 's') {
     eda:	2873      	cmp	r0, #115	; 0x73
     edc:	d179      	bne.n	fd2 <cbvprintf_package+0x31a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     ede:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     ee0:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     ee4:	3801      	subs	r0, #1
     ee6:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     ee8:	e70d      	b.n	d06 <cbvprintf_package+0x4e>
			if (fmt[-1] == 'l') {
     eea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
     eee:	296c      	cmp	r1, #108	; 0x6c
     ef0:	d127      	bne.n	f42 <cbvprintf_package+0x28a>
				if (fmt[-2] == 'l') {
     ef2:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     ef6:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     ef8:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
     efc:	d023      	beq.n	f46 <cbvprintf_package+0x28e>
			align = VA_STACK_ALIGN(void *);
     efe:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     f02:	f8cd 8000 	str.w	r8, [sp]
     f06:	e7da      	b.n	ebe <cbvprintf_package+0x206>
				v.ld = va_arg(ap, long double);
     f08:	f109 0907 	add.w	r9, r9, #7
     f0c:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
     f10:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     f12:	e8f9 0102 	ldrd	r0, r1, [r9], #8
			buf = (void *) ROUND_UP(buf, align);
     f16:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     f1a:	b15d      	cbz	r5, f34 <cbvprintf_package+0x27c>
				if (BUF_OFFSET + size > len) {
     f1c:	f8dd e014 	ldr.w	lr, [sp, #20]
     f20:	44a6      	add	lr, r4
     f22:	45b6      	cmp	lr, r6
     f24:	d904      	bls.n	f30 <cbvprintf_package+0x278>
					return -ENOSPC;
     f26:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     f2a:	b00d      	add	sp, #52	; 0x34
     f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     f30:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
     f34:	3408      	adds	r4, #8
			parsing = false;
     f36:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
     f38:	f04f 0808 	mov.w	r8, #8
     f3c:	e718      	b.n	d70 <cbvprintf_package+0xb8>
			parsing = false;
     f3e:	2100      	movs	r1, #0
     f40:	e7dd      	b.n	efe <cbvprintf_package+0x246>
			parsing = false;
     f42:	2100      	movs	r1, #0
     f44:	e7bb      	b.n	ebe <cbvprintf_package+0x206>
					align = VA_STACK_ALIGN(long long);
     f46:	f04f 0808 	mov.w	r8, #8
     f4a:	e7da      	b.n	f02 <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     f4c:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f4e:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     f52:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     f56:	e6ea      	b.n	d2e <cbvprintf_package+0x76>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     f58:	2a0f      	cmp	r2, #15
     f5a:	d90c      	bls.n	f76 <cbvprintf_package+0x2be>
					__ASSERT(false, "str_ptr_pos[] too small");
     f5c:	492d      	ldr	r1, [pc, #180]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f5e:	4a2e      	ldr	r2, [pc, #184]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f60:	482e      	ldr	r0, [pc, #184]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     f62:	f240 13f5 	movw	r3, #501	; 0x1f5
     f66:	f007 ffe0 	bl	8f2a <assert_print>
     f6a:	482f      	ldr	r0, [pc, #188]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     f6c:	f007 ffdd 	bl	8f2a <assert_print>
     f70:	f240 11f5 	movw	r1, #501	; 0x1f5
     f74:	e6f0      	b.n	d58 <cbvprintf_package+0xa0>
				if (buf0 != NULL) {
     f76:	b1cd      	cbz	r5, fac <cbvprintf_package+0x2f4>
					str_ptr_pos[s_idx] = s_ptr_idx;
     f78:	f102 0e30 	add.w	lr, r2, #48	; 0x30
     f7c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     f80:	44ee      	add	lr, sp
     f82:	f1bc 0f00 	cmp.w	ip, #0
     f86:	d00b      	beq.n	fa0 <cbvprintf_package+0x2e8>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     f88:	f060 007f 	orn	r0, r0, #127	; 0x7f
     f8c:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     f90:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     f94:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     f96:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     f9a:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     f9c:	9005      	str	r0, [sp, #20]
     f9e:	e6fa      	b.n	d96 <cbvprintf_package+0xde>
					str_ptr_pos[s_idx] = s_ptr_idx;
     fa0:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     fa4:	9803      	ldr	r0, [sp, #12]
     fa6:	3001      	adds	r0, #1
     fa8:	9003      	str	r0, [sp, #12]
     faa:	e7f3      	b.n	f94 <cbvprintf_package+0x2dc>
				} else if (is_ro || rws_pos_en) {
     fac:	f1bc 0f00 	cmp.w	ip, #0
     fb0:	d101      	bne.n	fb6 <cbvprintf_package+0x2fe>
     fb2:	9801      	ldr	r0, [sp, #4]
     fb4:	b108      	cbz	r0, fba <cbvprintf_package+0x302>
					len += 1;
     fb6:	3601      	adds	r6, #1
     fb8:	e7ec      	b.n	f94 <cbvprintf_package+0x2dc>
					len += strlen(s) + 1 + 1;
     fba:	4638      	mov	r0, r7
     fbc:	e9cd 3206 	strd	r3, r2, [sp, #24]
     fc0:	9105      	str	r1, [sp, #20]
     fc2:	f008 f878 	bl	90b6 <strlen>
     fc6:	3602      	adds	r6, #2
     fc8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     fcc:	9905      	ldr	r1, [sp, #20]
     fce:	4406      	add	r6, r0
     fd0:	e7e0      	b.n	f94 <cbvprintf_package+0x2dc>
		} else if (size == sizeof(int)) {
     fd2:	9800      	ldr	r0, [sp, #0]
     fd4:	2804      	cmp	r0, #4
     fd6:	d109      	bne.n	fec <cbvprintf_package+0x334>
			int v = va_arg(ap, int);
     fd8:	f109 0004 	add.w	r0, r9, #4
			if (buf0 != NULL) {
     fdc:	b11d      	cbz	r5, fe6 <cbvprintf_package+0x32e>
			int v = va_arg(ap, int);
     fde:	f8d9 c000 	ldr.w	ip, [r9]
     fe2:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
     fe6:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     fe8:	4681      	mov	r9, r0
     fea:	e6d4      	b.n	d96 <cbvprintf_package+0xde>
		} else if (size == sizeof(long long)) {
     fec:	9800      	ldr	r0, [sp, #0]
     fee:	2808      	cmp	r0, #8
     ff0:	d11c      	bne.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
			long long v = va_arg(ap, long long);
     ff2:	f109 0007 	add.w	r0, r9, #7
     ff6:	f020 0007 	bic.w	r0, r0, #7
     ffa:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
     ffe:	b11d      	cbz	r5, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
			long long v = va_arg(ap, long long);
    1000:	e9d0 bc00 	ldrd	fp, ip, [r0]
    1004:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1008:	3408      	adds	r4, #8
    100a:	e6c4      	b.n	d96 <cbvprintf_package+0xde>
    100c:	00009840 	.word	0x00009840
    1010:	0000ba9c 	.word	0x0000ba9c
    1014:	0000a05a 	.word	0x0000a05a
    1018:	0000a233 	.word	0x0000a233
    101c:	00009eb7 	.word	0x00009eb7
    1020:	0000a261 	.word	0x0000a261
    1024:	0000a2b1 	.word	0x0000a2b1
    1028:	0000a282 	.word	0x0000a282
			__ASSERT(false, "unexpected size %u", size);
    102c:	4a3b      	ldr	r2, [pc, #236]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    102e:	493c      	ldr	r1, [pc, #240]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1030:	483c      	ldr	r0, [pc, #240]	; (1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>)
    1032:	f240 2331 	movw	r3, #561	; 0x231
    1036:	f007 ff78 	bl	8f2a <assert_print>
    103a:	9900      	ldr	r1, [sp, #0]
    103c:	483a      	ldr	r0, [pc, #232]	; (1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    103e:	f007 ff74 	bl	8f2a <assert_print>
    1042:	f240 2131 	movw	r1, #561	; 0x231
    1046:	e687      	b.n	d58 <cbvprintf_package+0xa0>
			parsing = false;
    1048:	2100      	movs	r1, #0
    104a:	e6a4      	b.n	d96 <cbvprintf_package+0xde>
	if (buf0 == NULL) {
    104c:	b91d      	cbnz	r5, 1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    104e:	f1a6 0408 	sub.w	r4, r6, #8
    1052:	1860      	adds	r0, r4, r1
    1054:	e769      	b.n	f2a <cbvprintf_package+0x272>
	if (rws_pos_en) {
    1056:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1058:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    105c:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    1060:	b90b      	cbnz	r3, 1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
    1062:	4608      	mov	r0, r1
    1064:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    1066:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    106a:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    106c:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    106e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1072:	f1ba 0f00 	cmp.w	sl, #0
    1076:	d006      	beq.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    1078:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    107a:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    107e:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1082:	4562      	cmp	r2, ip
    1084:	d106      	bne.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
    1086:	f10d 0820 	add.w	r8, sp, #32
    108a:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    108e:	f1c5 0b01 	rsb	fp, r5, #1
    1092:	e035      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1094:	f810 1b01 	ldrb.w	r1, [r0], #1
    1098:	060b      	lsls	r3, r1, #24
    109a:	d508      	bpl.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
			if (BUF_OFFSET + 1 > len) {
    109c:	eb04 080e 	add.w	r8, r4, lr
    10a0:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    10a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    10a6:	f63f af3e 	bhi.w	f26 <cbvprintf_package+0x26e>
			*buf++ = pos;
    10aa:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    10ae:	f10c 0c01 	add.w	ip, ip, #1
    10b2:	e7e6      	b.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    10b4:	f1ba 0f00 	cmp.w	sl, #0
    10b8:	d003      	beq.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    10ba:	f998 2000 	ldrsb.w	r2, [r8]
    10be:	2a00      	cmp	r2, #0
    10c0:	db1c      	blt.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
		if (rws_pos_en) {
    10c2:	9b01      	ldr	r3, [sp, #4]
    10c4:	bb03      	cbnz	r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    10c6:	f898 2000 	ldrb.w	r2, [r8]
    10ca:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    10ce:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    10d2:	4638      	mov	r0, r7
    10d4:	f007 ffef 	bl	90b6 <strlen>
    10d8:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    10da:	eb04 010b 	add.w	r1, r4, fp
    10de:	4411      	add	r1, r2
    10e0:	42b1      	cmp	r1, r6
    10e2:	f63f af20 	bhi.w	f26 <cbvprintf_package+0x26e>
		*buf++ = str_ptr_pos[i];
    10e6:	f898 1000 	ldrb.w	r1, [r8]
    10ea:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
    10ee:	4639      	mov	r1, r7
    10f0:	4620      	mov	r0, r4
    10f2:	9200      	str	r2, [sp, #0]
    10f4:	f007 fffb 	bl	90ee <memcpy>
		buf += size;
    10f8:	9a00      	ldr	r2, [sp, #0]
    10fa:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    10fc:	f108 0801 	add.w	r8, r8, #1
    1100:	45c8      	cmp	r8, r9
    1102:	d1d7      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
	return BUF_OFFSET;
    1104:	1b60      	subs	r0, r4, r5
    1106:	e710      	b.n	f2a <cbvprintf_package+0x272>
			size = 0;
    1108:	2200      	movs	r2, #0
    110a:	e7e6      	b.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
		return -EFAULT;
    110c:	f06f 000d 	mvn.w	r0, #13
    1110:	e70b      	b.n	f2a <cbvprintf_package+0x272>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1112:	2907      	cmp	r1, #7
    1114:	f63f adec 	bhi.w	cf0 <cbvprintf_package+0x38>
    1118:	e705      	b.n	f26 <cbvprintf_package+0x26e>
    111a:	bf00      	nop
    111c:	0000a233 	.word	0x0000a233
    1120:	0000a05a 	.word	0x0000a05a
    1124:	00009eb7 	.word	0x00009eb7
    1128:	0000a29c 	.word	0x0000a29c

0000112c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    112c:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    112e:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    1130:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    1132:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    1136:	2c03      	cmp	r4, #3
{
    1138:	4605      	mov	r5, r0
	switch (method) {
    113a:	d002      	beq.n	1142 <sys_notify_finalize+0x16>
    113c:	b12c      	cbz	r4, 114a <sys_notify_finalize+0x1e>
    113e:	2000      	movs	r0, #0
    1140:	e000      	b.n	1144 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1142:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1144:	2300      	movs	r3, #0
    1146:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1148:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    114a:	4a05      	ldr	r2, [pc, #20]	; (1160 <sys_notify_finalize+0x34>)
    114c:	4905      	ldr	r1, [pc, #20]	; (1164 <sys_notify_finalize+0x38>)
    114e:	4806      	ldr	r0, [pc, #24]	; (1168 <sys_notify_finalize+0x3c>)
    1150:	2345      	movs	r3, #69	; 0x45
    1152:	f007 feea 	bl	8f2a <assert_print>
    1156:	4802      	ldr	r0, [pc, #8]	; (1160 <sys_notify_finalize+0x34>)
    1158:	2145      	movs	r1, #69	; 0x45
    115a:	f007 fedf 	bl	8f1c <assert_post_action>
    115e:	e7ee      	b.n	113e <sys_notify_finalize+0x12>
    1160:	0000a2c8 	.word	0x0000a2c8
    1164:	0000a05a 	.word	0x0000a05a
    1168:	00009eb7 	.word	0x00009eb7

0000116c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    116c:	4b01      	ldr	r3, [pc, #4]	; (1174 <__printk_hook_install+0x8>)
    116e:	6018      	str	r0, [r3, #0]
}
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	20000098 	.word	0x20000098

00001178 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    117c:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1180:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1182:	f019 0f08 	tst.w	r9, #8
{
    1186:	4604      	mov	r4, r0
	if (processing) {
    1188:	d022      	beq.n	11d0 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
    118a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    118c:	bf0c      	ite	eq
    118e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1192:	f049 0920 	orrne.w	r9, r9, #32
    1196:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    119a:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    119c:	4620      	mov	r0, r4
    119e:	f005 f9dd 	bl	655c <z_spin_unlock_valid>
    11a2:	b968      	cbnz	r0, 11c0 <process_event+0x48>
    11a4:	4a9c      	ldr	r2, [pc, #624]	; (1418 <process_event+0x2a0>)
    11a6:	499d      	ldr	r1, [pc, #628]	; (141c <process_event+0x2a4>)
    11a8:	489d      	ldr	r0, [pc, #628]	; (1420 <process_event+0x2a8>)
    11aa:	23b9      	movs	r3, #185	; 0xb9
    11ac:	f007 febd 	bl	8f2a <assert_print>
    11b0:	489c      	ldr	r0, [pc, #624]	; (1424 <process_event+0x2ac>)
    11b2:	4621      	mov	r1, r4
    11b4:	f007 feb9 	bl	8f2a <assert_print>
    11b8:	4897      	ldr	r0, [pc, #604]	; (1418 <process_event+0x2a0>)
    11ba:	21b9      	movs	r1, #185	; 0xb9
    11bc:	f007 feae 	bl	8f1c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    11c0:	9b00      	ldr	r3, [sp, #0]
    11c2:	f383 8811 	msr	BASEPRI, r3
    11c6:	f3bf 8f6f 	isb	sy
}
    11ca:	b003      	add	sp, #12
    11cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    11d0:	4f95      	ldr	r7, [pc, #596]	; (1428 <process_event+0x2b0>)
    11d2:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1420 <process_event+0x2a8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11d6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    11da:	2902      	cmp	r1, #2
    11dc:	d10f      	bne.n	11fe <process_event+0x86>
			evt = process_recheck(mgr);
    11de:	4620      	mov	r0, r4
    11e0:	f007 fdb6 	bl	8d50 <process_recheck>
		if (evt == EVT_NOP) {
    11e4:	2800      	cmp	r0, #0
    11e6:	d0d8      	beq.n	119a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    11e8:	3801      	subs	r0, #1
    11ea:	2804      	cmp	r0, #4
    11ec:	f200 8104 	bhi.w	13f8 <process_event+0x280>
    11f0:	e8df f010 	tbh	[pc, r0, lsl #1]
    11f4:	01020005 	.word	0x01020005
    11f8:	009e0069 	.word	0x009e0069
    11fc:	00d0      	.short	0x00d0
			res = mgr->last_res;
    11fe:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1202:	8ba2      	ldrh	r2, [r4, #28]
	if (res < 0) {
    1204:	f1bb 0f00 	cmp.w	fp, #0
    1208:	da19      	bge.n	123e <process_event+0xc6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    120a:	2600      	movs	r6, #0
		*clients = mgr->clients;
    120c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    120e:	f022 0207 	bic.w	r2, r2, #7
	list->tail = NULL;
    1212:	e9c4 6600 	strd	r6, r6, [r4]
    1216:	f042 0201 	orr.w	r2, r2, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    121a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    121c:	8ba3      	ldrh	r3, [r4, #28]
    121e:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1222:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1224:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
    1226:	d003      	beq.n	1230 <process_event+0xb8>
		if (do_monitors
    1228:	68a2      	ldr	r2, [r4, #8]
    122a:	2a00      	cmp	r2, #0
    122c:	f040 810c 	bne.w	1448 <process_event+0x2d0>
		    || !sys_slist_is_empty(&clients)
    1230:	b915      	cbnz	r5, 1238 <process_event+0xc0>
		    || (transit != NULL)) {
    1232:	2e00      	cmp	r6, #0
    1234:	f000 8151 	beq.w	14da <process_event+0x362>
    1238:	f04f 0a00 	mov.w	sl, #0
    123c:	e106      	b.n	144c <process_event+0x2d4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    123e:	f002 0307 	and.w	r3, r2, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1242:	1f59      	subs	r1, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1244:	2901      	cmp	r1, #1
    1246:	d81f      	bhi.n	1288 <process_event+0x110>
	list->head = NULL;
    1248:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    124a:	f022 0207 	bic.w	r2, r2, #7
		if (state == ONOFF_STATE_TO_ON) {
    124e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1250:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1252:	b292      	uxth	r2, r2
	list->tail = NULL;
    1254:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1258:	d10a      	bne.n	1270 <process_event+0xf8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    125a:	b13d      	cbz	r5, 126c <process_event+0xf4>
    125c:	8be3      	ldrh	r3, [r4, #30]
    125e:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1260:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    1262:	3301      	adds	r3, #1
    1264:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1266:	2900      	cmp	r1, #0
    1268:	d1fa      	bne.n	1260 <process_event+0xe8>
    126a:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    126c:	f042 0202 	orr.w	r2, r2, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1270:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1272:	4620      	mov	r0, r4
    1274:	f007 fd6c 	bl	8d50 <process_recheck>
    1278:	4606      	mov	r6, r0
    127a:	2800      	cmp	r0, #0
    127c:	d0ce      	beq.n	121c <process_event+0xa4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    127e:	f042 0220 	orr.w	r2, r2, #32
    1282:	83a2      	strh	r2, [r4, #28]
		onoff_transition_fn transit = NULL;
    1284:	2600      	movs	r6, #0
    1286:	e7c9      	b.n	121c <process_event+0xa4>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1288:	2b04      	cmp	r3, #4
    128a:	d10d      	bne.n	12a8 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    128c:	f022 0207 	bic.w	r2, r2, #7
    1290:	b292      	uxth	r2, r2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1292:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1294:	4620      	mov	r0, r4
    1296:	f007 fd5b 	bl	8d50 <process_recheck>
    129a:	4605      	mov	r5, r0
    129c:	b188      	cbz	r0, 12c2 <process_event+0x14a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    129e:	f042 0220 	orr.w	r2, r2, #32
    12a2:	83a2      	strh	r2, [r4, #28]
    12a4:	2500      	movs	r5, #0
    12a6:	e7ed      	b.n	1284 <process_event+0x10c>
		__ASSERT_NO_MSG(false);
    12a8:	4960      	ldr	r1, [pc, #384]	; (142c <process_event+0x2b4>)
    12aa:	f240 131b 	movw	r3, #283	; 0x11b
    12ae:	463a      	mov	r2, r7
    12b0:	4640      	mov	r0, r8
    12b2:	f007 fe3a 	bl	8f2a <assert_print>
    12b6:	f240 111b 	movw	r1, #283	; 0x11b
    12ba:	4638      	mov	r0, r7
    12bc:	f007 fe2e 	bl	8f1c <assert_post_action>
    12c0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    12c2:	462e      	mov	r6, r5
    12c4:	e7aa      	b.n	121c <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    12c6:	f1b9 0f00 	cmp.w	r9, #0
    12ca:	d00b      	beq.n	12e4 <process_event+0x16c>
    12cc:	4958      	ldr	r1, [pc, #352]	; (1430 <process_event+0x2b8>)
    12ce:	4640      	mov	r0, r8
    12d0:	f44f 73ab 	mov.w	r3, #342	; 0x156
    12d4:	463a      	mov	r2, r7
    12d6:	f007 fe28 	bl	8f2a <assert_print>
    12da:	f44f 71ab 	mov.w	r1, #342	; 0x156
    12de:	4638      	mov	r0, r7
    12e0:	f007 fe1c 	bl	8f1c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    12e4:	6823      	ldr	r3, [r4, #0]
    12e6:	b95b      	cbnz	r3, 1300 <process_event+0x188>
    12e8:	4952      	ldr	r1, [pc, #328]	; (1434 <process_event+0x2bc>)
    12ea:	4640      	mov	r0, r8
    12ec:	f240 1357 	movw	r3, #343	; 0x157
    12f0:	463a      	mov	r2, r7
    12f2:	f007 fe1a 	bl	8f2a <assert_print>
    12f6:	f240 1157 	movw	r1, #343	; 0x157
    12fa:	4638      	mov	r0, r7
    12fc:	f007 fe0e 	bl	8f1c <assert_post_action>
			transit = mgr->transitions->start;
    1300:	6923      	ldr	r3, [r4, #16]
    1302:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1304:	b95e      	cbnz	r6, 131e <process_event+0x1a6>
    1306:	494c      	ldr	r1, [pc, #304]	; (1438 <process_event+0x2c0>)
    1308:	4640      	mov	r0, r8
    130a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    130e:	463a      	mov	r2, r7
    1310:	f007 fe0b 	bl	8f2a <assert_print>
    1314:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1318:	4638      	mov	r0, r7
    131a:	f007 fdff 	bl	8f1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    131e:	8ba3      	ldrh	r3, [r4, #28]
    1320:	f023 0307 	bic.w	r3, r3, #7
    1324:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1328:	83a3      	strh	r3, [r4, #28]
}
    132a:	2500      	movs	r5, #0
		res = 0;
    132c:	46ab      	mov	fp, r5
}
    132e:	e775      	b.n	121c <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1330:	f1b9 0f02 	cmp.w	r9, #2
    1334:	d00b      	beq.n	134e <process_event+0x1d6>
    1336:	4941      	ldr	r1, [pc, #260]	; (143c <process_event+0x2c4>)
    1338:	4640      	mov	r0, r8
    133a:	f240 135d 	movw	r3, #349	; 0x15d
    133e:	463a      	mov	r2, r7
    1340:	f007 fdf3 	bl	8f2a <assert_print>
    1344:	f240 115d 	movw	r1, #349	; 0x15d
    1348:	4638      	mov	r0, r7
    134a:	f007 fde7 	bl	8f1c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    134e:	8be3      	ldrh	r3, [r4, #30]
    1350:	b15b      	cbz	r3, 136a <process_event+0x1f2>
    1352:	493b      	ldr	r1, [pc, #236]	; (1440 <process_event+0x2c8>)
    1354:	4640      	mov	r0, r8
    1356:	f44f 73af 	mov.w	r3, #350	; 0x15e
    135a:	463a      	mov	r2, r7
    135c:	f007 fde5 	bl	8f2a <assert_print>
    1360:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1364:	4638      	mov	r0, r7
    1366:	f007 fdd9 	bl	8f1c <assert_post_action>
			transit = mgr->transitions->stop;
    136a:	6923      	ldr	r3, [r4, #16]
    136c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    136e:	b95e      	cbnz	r6, 1388 <process_event+0x210>
    1370:	4931      	ldr	r1, [pc, #196]	; (1438 <process_event+0x2c0>)
    1372:	4640      	mov	r0, r8
    1374:	f240 1361 	movw	r3, #353	; 0x161
    1378:	463a      	mov	r2, r7
    137a:	f007 fdd6 	bl	8f2a <assert_print>
    137e:	f240 1161 	movw	r1, #353	; 0x161
    1382:	4638      	mov	r0, r7
    1384:	f007 fdca 	bl	8f1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1388:	8ba3      	ldrh	r3, [r4, #28]
    138a:	f023 0307 	bic.w	r3, r3, #7
    138e:	f043 0304 	orr.w	r3, r3, #4
    1392:	e7c9      	b.n	1328 <process_event+0x1b0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1394:	f1b9 0f01 	cmp.w	r9, #1
    1398:	d00b      	beq.n	13b2 <process_event+0x23a>
    139a:	492a      	ldr	r1, [pc, #168]	; (1444 <process_event+0x2cc>)
    139c:	4640      	mov	r0, r8
    139e:	f44f 73b2 	mov.w	r3, #356	; 0x164
    13a2:	463a      	mov	r2, r7
    13a4:	f007 fdc1 	bl	8f2a <assert_print>
    13a8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    13ac:	4638      	mov	r0, r7
    13ae:	f007 fdb5 	bl	8f1c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    13b2:	6823      	ldr	r3, [r4, #0]
    13b4:	b95b      	cbnz	r3, 13ce <process_event+0x256>
    13b6:	491f      	ldr	r1, [pc, #124]	; (1434 <process_event+0x2bc>)
    13b8:	4640      	mov	r0, r8
    13ba:	f240 1365 	movw	r3, #357	; 0x165
    13be:	463a      	mov	r2, r7
    13c0:	f007 fdb3 	bl	8f2a <assert_print>
    13c4:	f240 1165 	movw	r1, #357	; 0x165
    13c8:	4638      	mov	r0, r7
    13ca:	f007 fda7 	bl	8f1c <assert_post_action>
			transit = mgr->transitions->reset;
    13ce:	6923      	ldr	r3, [r4, #16]
    13d0:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    13d2:	b95e      	cbnz	r6, 13ec <process_event+0x274>
    13d4:	4918      	ldr	r1, [pc, #96]	; (1438 <process_event+0x2c0>)
    13d6:	4640      	mov	r0, r8
    13d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    13dc:	463a      	mov	r2, r7
    13de:	f007 fda4 	bl	8f2a <assert_print>
    13e2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    13e6:	4638      	mov	r0, r7
    13e8:	f007 fd98 	bl	8f1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13ec:	8ba3      	ldrh	r3, [r4, #28]
    13ee:	f023 0307 	bic.w	r3, r3, #7
    13f2:	f043 0305 	orr.w	r3, r3, #5
    13f6:	e797      	b.n	1328 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    13f8:	490c      	ldr	r1, [pc, #48]	; (142c <process_event+0x2b4>)
    13fa:	f240 136b 	movw	r3, #363	; 0x16b
    13fe:	463a      	mov	r2, r7
    1400:	4640      	mov	r0, r8
    1402:	f007 fd92 	bl	8f2a <assert_print>
    1406:	2500      	movs	r5, #0
    1408:	f240 116b 	movw	r1, #363	; 0x16b
    140c:	4638      	mov	r0, r7
    140e:	f007 fd85 	bl	8f1c <assert_post_action>
		onoff_transition_fn transit = NULL;
    1412:	462e      	mov	r6, r5
    1414:	e78a      	b.n	132c <process_event+0x1b4>
    1416:	bf00      	nop
    1418:	0000a38e 	.word	0x0000a38e
    141c:	0000a3bb 	.word	0x0000a3bb
    1420:	00009eb7 	.word	0x00009eb7
    1424:	0000a3d2 	.word	0x0000a3d2
    1428:	0000a2eb 	.word	0x0000a2eb
    142c:	0000a05a 	.word	0x0000a05a
    1430:	0000a30d 	.word	0x0000a30d
    1434:	0000a319 	.word	0x0000a319
    1438:	0000a33c 	.word	0x0000a33c
    143c:	0000a353 	.word	0x0000a353
    1440:	0000a369 	.word	0x0000a369
    1444:	0000a378 	.word	0x0000a378
				   && !sys_slist_is_empty(&mgr->monitors);
    1448:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    144c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1450:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    1454:	83a3      	strh	r3, [r4, #28]
    1456:	4648      	mov	r0, r9
    1458:	f005 f880 	bl	655c <z_spin_unlock_valid>
    145c:	b968      	cbnz	r0, 147a <process_event+0x302>
    145e:	4a37      	ldr	r2, [pc, #220]	; (153c <process_event+0x3c4>)
    1460:	4937      	ldr	r1, [pc, #220]	; (1540 <process_event+0x3c8>)
    1462:	23b9      	movs	r3, #185	; 0xb9
    1464:	4640      	mov	r0, r8
    1466:	f007 fd60 	bl	8f2a <assert_print>
    146a:	4836      	ldr	r0, [pc, #216]	; (1544 <process_event+0x3cc>)
    146c:	4649      	mov	r1, r9
    146e:	f007 fd5c 	bl	8f2a <assert_print>
    1472:	4832      	ldr	r0, [pc, #200]	; (153c <process_event+0x3c4>)
    1474:	21b9      	movs	r1, #185	; 0xb9
    1476:	f007 fd51 	bl	8f1c <assert_post_action>
    147a:	9b00      	ldr	r3, [sp, #0]
    147c:	f383 8811 	msr	BASEPRI, r3
    1480:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1484:	f1ba 0f00 	cmp.w	sl, #0
    1488:	d136      	bne.n	14f8 <process_event+0x380>
	while (!sys_slist_is_empty(list)) {
    148a:	2d00      	cmp	r5, #0
    148c:	d146      	bne.n	151c <process_event+0x3a4>
			if (transit != NULL) {
    148e:	b116      	cbz	r6, 1496 <process_event+0x31e>
				transit(mgr, transition_complete);
    1490:	492d      	ldr	r1, [pc, #180]	; (1548 <process_event+0x3d0>)
    1492:	4620      	mov	r0, r4
    1494:	47b0      	blx	r6
	__asm__ volatile(
    1496:	f04f 0240 	mov.w	r2, #64	; 0x40
    149a:	f3ef 8311 	mrs	r3, BASEPRI
    149e:	f382 8812 	msr	BASEPRI_MAX, r2
    14a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14a6:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    14a8:	9300      	str	r3, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14aa:	f005 f849 	bl	6540 <z_spin_lock_valid>
    14ae:	b968      	cbnz	r0, 14cc <process_event+0x354>
    14b0:	4a22      	ldr	r2, [pc, #136]	; (153c <process_event+0x3c4>)
    14b2:	4926      	ldr	r1, [pc, #152]	; (154c <process_event+0x3d4>)
    14b4:	238e      	movs	r3, #142	; 0x8e
    14b6:	4640      	mov	r0, r8
    14b8:	f007 fd37 	bl	8f2a <assert_print>
    14bc:	4824      	ldr	r0, [pc, #144]	; (1550 <process_event+0x3d8>)
    14be:	4649      	mov	r1, r9
    14c0:	f007 fd33 	bl	8f2a <assert_print>
    14c4:	481d      	ldr	r0, [pc, #116]	; (153c <process_event+0x3c4>)
    14c6:	218e      	movs	r1, #142	; 0x8e
    14c8:	f007 fd28 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    14cc:	4648      	mov	r0, r9
    14ce:	f005 f855 	bl	657c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    14d2:	8ba3      	ldrh	r3, [r4, #28]
    14d4:	f023 0308 	bic.w	r3, r3, #8
    14d8:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    14da:	8ba3      	ldrh	r3, [r4, #28]
    14dc:	06da      	lsls	r2, r3, #27
    14de:	d525      	bpl.n	152c <process_event+0x3b4>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14e0:	f023 0310 	bic.w	r3, r3, #16
    14e4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    14e6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    14e8:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    14ec:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    14f0:	2900      	cmp	r1, #0
    14f2:	f47f ae72 	bne.w	11da <process_event+0x62>
out:
    14f6:	e650      	b.n	119a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14f8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14fa:	2900      	cmp	r1, #0
    14fc:	d0c5      	beq.n	148a <process_event+0x312>
	return node->next;
    14fe:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    1502:	684b      	ldr	r3, [r1, #4]
    1504:	9a01      	ldr	r2, [sp, #4]
    1506:	469c      	mov	ip, r3
    1508:	4620      	mov	r0, r4
    150a:	465b      	mov	r3, fp
    150c:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    150e:	f1ba 0f00 	cmp.w	sl, #0
    1512:	d0ba      	beq.n	148a <process_event+0x312>
    1514:	4651      	mov	r1, sl
    1516:	f8da a000 	ldr.w	sl, [sl]
    151a:	e7f2      	b.n	1502 <process_event+0x38a>
    151c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    151e:	9a01      	ldr	r2, [sp, #4]
    1520:	682d      	ldr	r5, [r5, #0]
    1522:	465b      	mov	r3, fp
    1524:	4620      	mov	r0, r4
    1526:	f007 fc2f 	bl	8d88 <notify_one>
    152a:	e7ae      	b.n	148a <process_event+0x312>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    152c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1530:	bf1e      	ittt	ne
    1532:	f023 0320 	bicne.w	r3, r3, #32
    1536:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1538:	2102      	movne	r1, #2
    153a:	e7d5      	b.n	14e8 <process_event+0x370>
    153c:	0000a38e 	.word	0x0000a38e
    1540:	0000a3bb 	.word	0x0000a3bb
    1544:	0000a3d2 	.word	0x0000a3d2
    1548:	00001555 	.word	0x00001555
    154c:	0000a3e7 	.word	0x0000a3e7
    1550:	0000a3fc 	.word	0x0000a3fc

00001554 <transition_complete>:
{
    1554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1556:	4604      	mov	r4, r0
    1558:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    155a:	f100 0614 	add.w	r6, r0, #20
    155e:	f04f 0340 	mov.w	r3, #64	; 0x40
    1562:	f3ef 8711 	mrs	r7, BASEPRI
    1566:	f383 8812 	msr	BASEPRI_MAX, r3
    156a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    156e:	4630      	mov	r0, r6
    1570:	f004 ffe6 	bl	6540 <z_spin_lock_valid>
    1574:	b968      	cbnz	r0, 1592 <transition_complete+0x3e>
    1576:	4a0c      	ldr	r2, [pc, #48]	; (15a8 <transition_complete+0x54>)
    1578:	490c      	ldr	r1, [pc, #48]	; (15ac <transition_complete+0x58>)
    157a:	480d      	ldr	r0, [pc, #52]	; (15b0 <transition_complete+0x5c>)
    157c:	238e      	movs	r3, #142	; 0x8e
    157e:	f007 fcd4 	bl	8f2a <assert_print>
    1582:	480c      	ldr	r0, [pc, #48]	; (15b4 <transition_complete+0x60>)
    1584:	4631      	mov	r1, r6
    1586:	f007 fcd0 	bl	8f2a <assert_print>
    158a:	4807      	ldr	r0, [pc, #28]	; (15a8 <transition_complete+0x54>)
    158c:	218e      	movs	r1, #142	; 0x8e
    158e:	f007 fcc5 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    1592:	4630      	mov	r0, r6
    1594:	f004 fff2 	bl	657c <z_spin_lock_set_owner>
	mgr->last_res = res;
    1598:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    159a:	463a      	mov	r2, r7
    159c:	4620      	mov	r0, r4
    159e:	2101      	movs	r1, #1
}
    15a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    15a4:	f7ff bde8 	b.w	1178 <process_event>
    15a8:	0000a38e 	.word	0x0000a38e
    15ac:	0000a3e7 	.word	0x0000a3e7
    15b0:	00009eb7 	.word	0x00009eb7
    15b4:	0000a3fc 	.word	0x0000a3fc

000015b8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    15b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15bc:	4604      	mov	r4, r0
    15be:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    15c0:	f007 fbf8 	bl	8db4 <validate_args>

	if (rv < 0) {
    15c4:	1e05      	subs	r5, r0, #0
    15c6:	db61      	blt.n	168c <onoff_request+0xd4>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    15c8:	f104 0914 	add.w	r9, r4, #20
    15cc:	f04f 0340 	mov.w	r3, #64	; 0x40
    15d0:	f3ef 8a11 	mrs	sl, BASEPRI
    15d4:	f383 8812 	msr	BASEPRI_MAX, r3
    15d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    15dc:	4648      	mov	r0, r9
    15de:	f004 ffaf 	bl	6540 <z_spin_lock_valid>
    15e2:	b968      	cbnz	r0, 1600 <onoff_request+0x48>
    15e4:	4a38      	ldr	r2, [pc, #224]	; (16c8 <onoff_request+0x110>)
    15e6:	4939      	ldr	r1, [pc, #228]	; (16cc <onoff_request+0x114>)
    15e8:	4839      	ldr	r0, [pc, #228]	; (16d0 <onoff_request+0x118>)
    15ea:	238e      	movs	r3, #142	; 0x8e
    15ec:	f007 fc9d 	bl	8f2a <assert_print>
    15f0:	4838      	ldr	r0, [pc, #224]	; (16d4 <onoff_request+0x11c>)
    15f2:	4649      	mov	r1, r9
    15f4:	f007 fc99 	bl	8f2a <assert_print>
    15f8:	4833      	ldr	r0, [pc, #204]	; (16c8 <onoff_request+0x110>)
    15fa:	218e      	movs	r1, #142	; 0x8e
    15fc:	f007 fc8e 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    1600:	4648      	mov	r0, r9
    1602:	f004 ffbb 	bl	657c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1606:	8be3      	ldrh	r3, [r4, #30]
    1608:	8ba6      	ldrh	r6, [r4, #28]
    160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    160e:	4293      	cmp	r3, r2
    1610:	f006 0607 	and.w	r6, r6, #7
    1614:	d051      	beq.n	16ba <onoff_request+0x102>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1616:	2e02      	cmp	r6, #2
	rv = state;
    1618:	4635      	mov	r5, r6
	if (state == ONOFF_STATE_ON) {
    161a:	d123      	bne.n	1664 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    161c:	3301      	adds	r3, #1
    161e:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1620:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1624:	4648      	mov	r0, r9
    1626:	f004 ff99 	bl	655c <z_spin_unlock_valid>
    162a:	b968      	cbnz	r0, 1648 <onoff_request+0x90>
    162c:	4a26      	ldr	r2, [pc, #152]	; (16c8 <onoff_request+0x110>)
    162e:	492a      	ldr	r1, [pc, #168]	; (16d8 <onoff_request+0x120>)
    1630:	4827      	ldr	r0, [pc, #156]	; (16d0 <onoff_request+0x118>)
    1632:	23b9      	movs	r3, #185	; 0xb9
    1634:	f007 fc79 	bl	8f2a <assert_print>
    1638:	4828      	ldr	r0, [pc, #160]	; (16dc <onoff_request+0x124>)
    163a:	4649      	mov	r1, r9
    163c:	f007 fc75 	bl	8f2a <assert_print>
    1640:	4821      	ldr	r0, [pc, #132]	; (16c8 <onoff_request+0x110>)
    1642:	21b9      	movs	r1, #185	; 0xb9
    1644:	f007 fc6a 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    1648:	f38a 8811 	msr	BASEPRI, sl
    164c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1650:	f1b8 0f00 	cmp.w	r8, #0
    1654:	d01a      	beq.n	168c <onoff_request+0xd4>
			notify_one(mgr, cli, state, 0);
    1656:	2300      	movs	r3, #0
    1658:	4632      	mov	r2, r6
    165a:	4639      	mov	r1, r7
    165c:	4620      	mov	r0, r4
    165e:	f007 fb93 	bl	8d88 <notify_one>
    1662:	e013      	b.n	168c <onoff_request+0xd4>
	} else if ((state == ONOFF_STATE_OFF)
    1664:	2e06      	cmp	r6, #6
    1666:	d814      	bhi.n	1692 <onoff_request+0xda>
    1668:	e8df f006 	tbb	[pc, r6]
    166c:	13131f04 	.word	0x13131f04
    1670:	2a04      	.short	0x2a04
    1672:	04          	.byte	0x04
    1673:	00          	.byte	0x00
	parent->next = child;
    1674:	2300      	movs	r3, #0
    1676:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1678:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    167a:	b9db      	cbnz	r3, 16b4 <onoff_request+0xfc>
	list->head = node;
    167c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1680:	b9ae      	cbnz	r6, 16ae <onoff_request+0xf6>
		process_event(mgr, EVT_RECHECK, key);
    1682:	4652      	mov	r2, sl
    1684:	2102      	movs	r1, #2
    1686:	4620      	mov	r0, r4
    1688:	f7ff fd76 	bl	1178 <process_event>
		}
	}

	return rv;
}
    168c:	4628      	mov	r0, r5
    168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1692:	4913      	ldr	r1, [pc, #76]	; (16e0 <onoff_request+0x128>)
    1694:	480e      	ldr	r0, [pc, #56]	; (16d0 <onoff_request+0x118>)
    1696:	4a13      	ldr	r2, [pc, #76]	; (16e4 <onoff_request+0x12c>)
    1698:	f240 13c9 	movw	r3, #457	; 0x1c9
    169c:	f007 fc45 	bl	8f2a <assert_print>
    16a0:	4810      	ldr	r0, [pc, #64]	; (16e4 <onoff_request+0x12c>)
    16a2:	f240 11c9 	movw	r1, #457	; 0x1c9
    16a6:	f007 fc39 	bl	8f1c <assert_post_action>
	if (state == ONOFF_STATE_ON) {
    16aa:	f06f 0504 	mvn.w	r5, #4
    16ae:	f04f 0800 	mov.w	r8, #0
    16b2:	e7b7      	b.n	1624 <onoff_request+0x6c>
	parent->next = child;
    16b4:	601f      	str	r7, [r3, #0]
	list->tail = node;
    16b6:	6067      	str	r7, [r4, #4]
}
    16b8:	e7e2      	b.n	1680 <onoff_request+0xc8>
		rv = -EAGAIN;
    16ba:	f06f 050a 	mvn.w	r5, #10
    16be:	e7f6      	b.n	16ae <onoff_request+0xf6>
	if (state == ONOFF_STATE_ON) {
    16c0:	f06f 0585 	mvn.w	r5, #133	; 0x85
    16c4:	e7f3      	b.n	16ae <onoff_request+0xf6>
    16c6:	bf00      	nop
    16c8:	0000a38e 	.word	0x0000a38e
    16cc:	0000a3e7 	.word	0x0000a3e7
    16d0:	00009eb7 	.word	0x00009eb7
    16d4:	0000a3fc 	.word	0x0000a3fc
    16d8:	0000a3bb 	.word	0x0000a3bb
    16dc:	0000a3d2 	.word	0x0000a3d2
    16e0:	0000a378 	.word	0x0000a378
    16e4:	0000a2eb 	.word	0x0000a2eb

000016e8 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    16e8:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    16ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16f0:	4604      	mov	r4, r0
    16f2:	460e      	mov	r6, r1
    16f4:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    16f6:	d36c      	bcc.n	17d2 <sys_heap_init+0xea>
    16f8:	493d      	ldr	r1, [pc, #244]	; (17f0 <sys_heap_init+0x108>)
    16fa:	4a3e      	ldr	r2, [pc, #248]	; (17f4 <sys_heap_init+0x10c>)
    16fc:	483e      	ldr	r0, [pc, #248]	; (17f8 <sys_heap_init+0x110>)
    16fe:	f240 13e3 	movw	r3, #483	; 0x1e3
    1702:	f007 fc12 	bl	8f2a <assert_print>
    1706:	483d      	ldr	r0, [pc, #244]	; (17fc <sys_heap_init+0x114>)
    1708:	f007 fc0f 	bl	8f2a <assert_print>
    170c:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1710:	4838      	ldr	r0, [pc, #224]	; (17f4 <sys_heap_init+0x10c>)
    1712:	f007 fc03 	bl	8f1c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    1716:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1718:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    171a:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    171c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1720:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1724:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1726:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1728:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    172c:	d80e      	bhi.n	174c <sys_heap_init+0x64>
    172e:	4934      	ldr	r1, [pc, #208]	; (1800 <sys_heap_init+0x118>)
    1730:	4a30      	ldr	r2, [pc, #192]	; (17f4 <sys_heap_init+0x10c>)
    1732:	4831      	ldr	r0, [pc, #196]	; (17f8 <sys_heap_init+0x110>)
    1734:	f240 13f3 	movw	r3, #499	; 0x1f3
    1738:	f007 fbf7 	bl	8f2a <assert_print>
    173c:	4831      	ldr	r0, [pc, #196]	; (1804 <sys_heap_init+0x11c>)
    173e:	f007 fbf4 	bl	8f2a <assert_print>
    1742:	482c      	ldr	r0, [pc, #176]	; (17f4 <sys_heap_init+0x10c>)
    1744:	f240 11f3 	movw	r1, #499	; 0x1f3
    1748:	f007 fbe8 	bl	8f1c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    174c:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    174e:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1752:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1756:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    175a:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    175c:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    175e:	2300      	movs	r3, #0
    1760:	08e4      	lsrs	r4, r4, #3
    1762:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1764:	1c63      	adds	r3, r4, #1
    1766:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    1768:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    176a:	d90e      	bls.n	178a <sys_heap_init+0xa2>
    176c:	4926      	ldr	r1, [pc, #152]	; (1808 <sys_heap_init+0x120>)
    176e:	4a21      	ldr	r2, [pc, #132]	; (17f4 <sys_heap_init+0x10c>)
    1770:	4821      	ldr	r0, [pc, #132]	; (17f8 <sys_heap_init+0x110>)
    1772:	f44f 7301 	mov.w	r3, #516	; 0x204
    1776:	f007 fbd8 	bl	8f2a <assert_print>
    177a:	4822      	ldr	r0, [pc, #136]	; (1804 <sys_heap_init+0x11c>)
    177c:	f007 fbd5 	bl	8f2a <assert_print>
    1780:	481c      	ldr	r0, [pc, #112]	; (17f4 <sys_heap_init+0x10c>)
    1782:	f44f 7101 	mov.w	r1, #516	; 0x204
    1786:	f007 fbc9 	bl	8f1c <assert_post_action>
    178a:	f105 030c 	add.w	r3, r5, #12
    178e:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1792:	2200      	movs	r2, #0
    1794:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    1798:	4543      	cmp	r3, r8
    179a:	d1fb      	bne.n	1794 <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    179c:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    179e:	f043 0301 	orr.w	r3, r3, #1
    17a2:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    17a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    17a8:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    17aa:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    17ac:	802a      	strh	r2, [r5, #0]
    17ae:	8048      	strh	r0, [r1, #2]
    17b0:	19a9      	adds	r1, r5, r6
    17b2:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    17b6:	804a      	strh	r2, [r1, #2]
    17b8:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    17ba:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    17be:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    17c0:	885a      	ldrh	r2, [r3, #2]
    17c2:	f042 0201 	orr.w	r2, r2, #1
    17c6:	4628      	mov	r0, r5
    17c8:	805a      	strh	r2, [r3, #2]
}
    17ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    17ce:	f007 bb22 	b.w	8e16 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    17d2:	2a04      	cmp	r2, #4
    17d4:	d89f      	bhi.n	1716 <sys_heap_init+0x2e>
    17d6:	490d      	ldr	r1, [pc, #52]	; (180c <sys_heap_init+0x124>)
    17d8:	4a06      	ldr	r2, [pc, #24]	; (17f4 <sys_heap_init+0x10c>)
    17da:	4807      	ldr	r0, [pc, #28]	; (17f8 <sys_heap_init+0x110>)
    17dc:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    17e0:	f007 fba3 	bl	8f2a <assert_print>
    17e4:	4807      	ldr	r0, [pc, #28]	; (1804 <sys_heap_init+0x11c>)
    17e6:	f007 fba0 	bl	8f2a <assert_print>
    17ea:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    17ee:	e78f      	b.n	1710 <sys_heap_init+0x28>
    17f0:	0000a4e0 	.word	0x0000a4e0
    17f4:	0000a414 	.word	0x0000a414
    17f8:	00009eb7 	.word	0x00009eb7
    17fc:	0000a4f6 	.word	0x0000a4f6
    1800:	0000a547 	.word	0x0000a547
    1804:	0000a52e 	.word	0x0000a52e
    1808:	0000a570 	.word	0x0000a570
    180c:	0000a50d 	.word	0x0000a50d

00001810 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1814:	b091      	sub	sp, #68	; 0x44
    1816:	468b      	mov	fp, r1
    1818:	9002      	str	r0, [sp, #8]
    181a:	4692      	mov	sl, r2
    181c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    181e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1820:	f89a 0000 	ldrb.w	r0, [sl]
    1824:	b908      	cbnz	r0, 182a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1826:	4628      	mov	r0, r5
    1828:	e338      	b.n	1e9c <cbvprintf+0x68c>
		if (*fp != '%') {
    182a:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    182c:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1830:	d007      	beq.n	1842 <cbvprintf+0x32>
			OUTC('%');
    1832:	9b02      	ldr	r3, [sp, #8]
    1834:	4659      	mov	r1, fp
    1836:	4798      	blx	r3
    1838:	2800      	cmp	r0, #0
    183a:	f2c0 832f 	blt.w	1e9c <cbvprintf+0x68c>
    183e:	3501      	adds	r5, #1
			break;
    1840:	e200      	b.n	1c44 <cbvprintf+0x434>
		} state = {
    1842:	2218      	movs	r2, #24
    1844:	2100      	movs	r1, #0
    1846:	a80a      	add	r0, sp, #40	; 0x28
    1848:	f007 fc5c 	bl	9104 <memset>
	if (*sp == '%') {
    184c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1850:	2b25      	cmp	r3, #37	; 0x25
    1852:	d078      	beq.n	1946 <cbvprintf+0x136>
    1854:	2200      	movs	r2, #0
    1856:	4696      	mov	lr, r2
    1858:	4694      	mov	ip, r2
    185a:	4616      	mov	r6, r2
    185c:	4610      	mov	r0, r2
    185e:	4639      	mov	r1, r7
		switch (*sp) {
    1860:	f817 3b01 	ldrb.w	r3, [r7], #1
    1864:	2b2b      	cmp	r3, #43	; 0x2b
    1866:	f000 809d 	beq.w	19a4 <cbvprintf+0x194>
    186a:	f200 8094 	bhi.w	1996 <cbvprintf+0x186>
    186e:	2b20      	cmp	r3, #32
    1870:	f000 809a 	beq.w	19a8 <cbvprintf+0x198>
    1874:	2b23      	cmp	r3, #35	; 0x23
    1876:	f000 809a 	beq.w	19ae <cbvprintf+0x19e>
    187a:	b12a      	cbz	r2, 1888 <cbvprintf+0x78>
    187c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1884:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    1888:	f1be 0f00 	cmp.w	lr, #0
    188c:	d005      	beq.n	189a <cbvprintf+0x8a>
    188e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1892:	f042 0220 	orr.w	r2, r2, #32
    1896:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    189a:	f1bc 0f00 	cmp.w	ip, #0
    189e:	d005      	beq.n	18ac <cbvprintf+0x9c>
    18a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    18a4:	f042 0210 	orr.w	r2, r2, #16
    18a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    18ac:	b12e      	cbz	r6, 18ba <cbvprintf+0xaa>
    18ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    18b2:	f042 0208 	orr.w	r2, r2, #8
    18b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    18ba:	b128      	cbz	r0, 18c8 <cbvprintf+0xb8>
    18bc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    18c0:	f042 0204 	orr.w	r2, r2, #4
    18c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    18c8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    18cc:	f002 0044 	and.w	r0, r2, #68	; 0x44
    18d0:	2844      	cmp	r0, #68	; 0x44
    18d2:	d103      	bne.n	18dc <cbvprintf+0xcc>
		conv->flag_zero = false;
    18d4:	f36f 1286 	bfc	r2, #6, #1
    18d8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    18dc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    18e0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    18e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    18e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    18ea:	d17b      	bne.n	19e4 <cbvprintf+0x1d4>
		conv->width_star = true;
    18ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    18f0:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    18f4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    18f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    18fa:	781a      	ldrb	r2, [r3, #0]
    18fc:	2a2e      	cmp	r2, #46	; 0x2e
    18fe:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1902:	bf0c      	ite	eq
    1904:	2101      	moveq	r1, #1
    1906:	2100      	movne	r1, #0
    1908:	f361 0241 	bfi	r2, r1, #1, #1
    190c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1910:	d174      	bne.n	19fc <cbvprintf+0x1ec>
	if (*sp == '*') {
    1912:	785a      	ldrb	r2, [r3, #1]
    1914:	2a2a      	cmp	r2, #42	; 0x2a
    1916:	d06a      	beq.n	19ee <cbvprintf+0x1de>
	++sp;
    1918:	3301      	adds	r3, #1
	size_t val = 0;
    191a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    191c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    191e:	4618      	mov	r0, r3
    1920:	f810 2b01 	ldrb.w	r2, [r0], #1
    1924:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1928:	2f09      	cmp	r7, #9
    192a:	f240 8093 	bls.w	1a54 <cbvprintf+0x244>
	conv->unsupported |= ((conv->prec_value < 0)
    192e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1932:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1934:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1938:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    193c:	f361 0241 	bfi	r2, r1, #1, #1
    1940:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1944:	e05a      	b.n	19fc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1946:	f10a 0702 	add.w	r7, sl, #2
    194a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    194e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1952:	07d9      	lsls	r1, r3, #31
    1954:	f140 8122 	bpl.w	1b9c <cbvprintf+0x38c>
			width = va_arg(ap, int);
    1958:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    195c:	f1b9 0f00 	cmp.w	r9, #0
    1960:	da07      	bge.n	1972 <cbvprintf+0x162>
				conv->flag_dash = true;
    1962:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1966:	f042 0204 	orr.w	r2, r2, #4
    196a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    196e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1972:	075a      	lsls	r2, r3, #29
    1974:	f140 811b 	bpl.w	1bae <cbvprintf+0x39e>
			int arg = va_arg(ap, int);
    1978:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    197c:	f1b8 0f00 	cmp.w	r8, #0
    1980:	f280 811a 	bge.w	1bb8 <cbvprintf+0x3a8>
				conv->prec_present = false;
    1984:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1988:	f36f 0341 	bfc	r3, #1, #1
    198c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1990:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1994:	e110      	b.n	1bb8 <cbvprintf+0x3a8>
		switch (*sp) {
    1996:	2b2d      	cmp	r3, #45	; 0x2d
    1998:	d00c      	beq.n	19b4 <cbvprintf+0x1a4>
    199a:	2b30      	cmp	r3, #48	; 0x30
    199c:	f47f af6d 	bne.w	187a <cbvprintf+0x6a>
    19a0:	2201      	movs	r2, #1
	} while (loop);
    19a2:	e75c      	b.n	185e <cbvprintf+0x4e>
		switch (*sp) {
    19a4:	2601      	movs	r6, #1
    19a6:	e75a      	b.n	185e <cbvprintf+0x4e>
    19a8:	f04f 0c01 	mov.w	ip, #1
    19ac:	e757      	b.n	185e <cbvprintf+0x4e>
    19ae:	f04f 0e01 	mov.w	lr, #1
    19b2:	e754      	b.n	185e <cbvprintf+0x4e>
    19b4:	2001      	movs	r0, #1
    19b6:	e752      	b.n	185e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    19b8:	fb0c 6202 	mla	r2, ip, r2, r6
    19bc:	3a30      	subs	r2, #48	; 0x30
    19be:	4603      	mov	r3, r0
    19c0:	4618      	mov	r0, r3
    19c2:	f810 6b01 	ldrb.w	r6, [r0], #1
    19c6:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    19ca:	2f09      	cmp	r7, #9
    19cc:	d9f4      	bls.n	19b8 <cbvprintf+0x1a8>
	if (sp != wp) {
    19ce:	4299      	cmp	r1, r3
    19d0:	d093      	beq.n	18fa <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    19d2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    19d6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    19d8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    19da:	f362 0141 	bfi	r1, r2, #1, #1
    19de:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    19e2:	e78a      	b.n	18fa <cbvprintf+0xea>
    19e4:	460b      	mov	r3, r1
	size_t val = 0;
    19e6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    19e8:	f04f 0c0a 	mov.w	ip, #10
    19ec:	e7e8      	b.n	19c0 <cbvprintf+0x1b0>
		conv->prec_star = true;
    19ee:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    19f2:	f042 0204 	orr.w	r2, r2, #4
    19f6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    19fa:	3302      	adds	r3, #2
	switch (*sp) {
    19fc:	461f      	mov	r7, r3
    19fe:	f817 2b01 	ldrb.w	r2, [r7], #1
    1a02:	2a6c      	cmp	r2, #108	; 0x6c
    1a04:	d047      	beq.n	1a96 <cbvprintf+0x286>
    1a06:	d82b      	bhi.n	1a60 <cbvprintf+0x250>
    1a08:	2a68      	cmp	r2, #104	; 0x68
    1a0a:	d031      	beq.n	1a70 <cbvprintf+0x260>
    1a0c:	2a6a      	cmp	r2, #106	; 0x6a
    1a0e:	d04c      	beq.n	1aaa <cbvprintf+0x29a>
    1a10:	2a4c      	cmp	r2, #76	; 0x4c
    1a12:	d052      	beq.n	1aba <cbvprintf+0x2aa>
    1a14:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1a16:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a1a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1a1e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1a22:	2a78      	cmp	r2, #120	; 0x78
    1a24:	f200 80b2 	bhi.w	1b8c <cbvprintf+0x37c>
    1a28:	2a6d      	cmp	r2, #109	; 0x6d
    1a2a:	d853      	bhi.n	1ad4 <cbvprintf+0x2c4>
    1a2c:	2a69      	cmp	r2, #105	; 0x69
    1a2e:	f200 80ad 	bhi.w	1b8c <cbvprintf+0x37c>
    1a32:	2a57      	cmp	r2, #87	; 0x57
    1a34:	d86a      	bhi.n	1b0c <cbvprintf+0x2fc>
    1a36:	2a41      	cmp	r2, #65	; 0x41
    1a38:	d003      	beq.n	1a42 <cbvprintf+0x232>
    1a3a:	3a45      	subs	r2, #69	; 0x45
    1a3c:	2a02      	cmp	r2, #2
    1a3e:	f200 80a5 	bhi.w	1b8c <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_FP;
    1a42:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1a46:	2204      	movs	r2, #4
    1a48:	f362 0302 	bfi	r3, r2, #0, #3
    1a4c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1a50:	2301      	movs	r3, #1
			break;
    1a52:	e082      	b.n	1b5a <cbvprintf+0x34a>
		val = 10U * val + *sp++ - '0';
    1a54:	fb06 2201 	mla	r2, r6, r1, r2
    1a58:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    1a5c:	4603      	mov	r3, r0
    1a5e:	e75e      	b.n	191e <cbvprintf+0x10e>
	switch (*sp) {
    1a60:	2a74      	cmp	r2, #116	; 0x74
    1a62:	d026      	beq.n	1ab2 <cbvprintf+0x2a2>
    1a64:	2a7a      	cmp	r2, #122	; 0x7a
    1a66:	d1d5      	bne.n	1a14 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1a68:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a6c:	2206      	movs	r2, #6
    1a6e:	e00d      	b.n	1a8c <cbvprintf+0x27c>
		if (*++sp == 'h') {
    1a70:	785a      	ldrb	r2, [r3, #1]
    1a72:	2a68      	cmp	r2, #104	; 0x68
    1a74:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a78:	d106      	bne.n	1a88 <cbvprintf+0x278>
			conv->length_mod = LENGTH_HH;
    1a7a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1a7c:	f361 02c6 	bfi	r2, r1, #3, #4
    1a80:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1a84:	1c9f      	adds	r7, r3, #2
    1a86:	e7c6      	b.n	1a16 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1a88:	4613      	mov	r3, r2
    1a8a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1a8c:	f362 03c6 	bfi	r3, r2, #3, #4
    1a90:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1a94:	e7bf      	b.n	1a16 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1a96:	785a      	ldrb	r2, [r3, #1]
    1a98:	2a6c      	cmp	r2, #108	; 0x6c
    1a9a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a9e:	d101      	bne.n	1aa4 <cbvprintf+0x294>
			conv->length_mod = LENGTH_LL;
    1aa0:	2104      	movs	r1, #4
    1aa2:	e7eb      	b.n	1a7c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_L;
    1aa4:	4613      	mov	r3, r2
    1aa6:	2203      	movs	r2, #3
    1aa8:	e7f0      	b.n	1a8c <cbvprintf+0x27c>
		conv->length_mod = LENGTH_J;
    1aaa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1aae:	2205      	movs	r2, #5
    1ab0:	e7ec      	b.n	1a8c <cbvprintf+0x27c>
		conv->length_mod = LENGTH_T;
    1ab2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ab6:	2207      	movs	r2, #7
    1ab8:	e7e8      	b.n	1a8c <cbvprintf+0x27c>
		conv->unsupported = true;
    1aba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1abe:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1ac2:	f023 0302 	bic.w	r3, r3, #2
    1ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1aca:	f043 0302 	orr.w	r3, r3, #2
    1ace:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1ad2:	e7a0      	b.n	1a16 <cbvprintf+0x206>
	switch (conv->specifier) {
    1ad4:	f1a2 006e 	sub.w	r0, r2, #110	; 0x6e
    1ad8:	b2c0      	uxtb	r0, r0
    1ada:	2101      	movs	r1, #1
    1adc:	4081      	lsls	r1, r0
    1ade:	f240 4082 	movw	r0, #1154	; 0x482
    1ae2:	4201      	tst	r1, r0
    1ae4:	d122      	bne.n	1b2c <cbvprintf+0x31c>
    1ae6:	f011 0f24 	tst.w	r1, #36	; 0x24
    1aea:	d142      	bne.n	1b72 <cbvprintf+0x362>
    1aec:	07ce      	lsls	r6, r1, #31
    1aee:	d54d      	bpl.n	1b8c <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_PTR;
    1af0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1af4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1af8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1afc:	2103      	movs	r1, #3
    1afe:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b02:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1b04:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b08:	4143      	adcs	r3, r0
    1b0a:	e026      	b.n	1b5a <cbvprintf+0x34a>
	switch (conv->specifier) {
    1b0c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1b10:	b2c9      	uxtb	r1, r1
    1b12:	2001      	movs	r0, #1
    1b14:	fa00 f101 	lsl.w	r1, r0, r1
    1b18:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1b1c:	d191      	bne.n	1a42 <cbvprintf+0x232>
    1b1e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1b22:	d124      	bne.n	1b6e <cbvprintf+0x35e>
    1b24:	f640 0001 	movw	r0, #2049	; 0x801
    1b28:	4201      	tst	r1, r0
    1b2a:	d02f      	beq.n	1b8c <cbvprintf+0x37c>
    1b2c:	2102      	movs	r1, #2
		conv->specifier_cat = SPECIFIER_SINT;
    1b2e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1b32:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1b36:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1b38:	f361 0002 	bfi	r0, r1, #0, #3
			conv->invalid = true;
    1b3c:	bf08      	it	eq
    1b3e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
		conv->specifier_cat = SPECIFIER_SINT;
    1b42:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
			conv->invalid = true;
    1b46:	bf04      	itt	eq
    1b48:	f041 0101 	orreq.w	r1, r1, #1
    1b4c:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1b50:	2a63      	cmp	r2, #99	; 0x63
    1b52:	d121      	bne.n	1b98 <cbvprintf+0x388>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1b54:	3b00      	subs	r3, #0
    1b56:	bf18      	it	ne
    1b58:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1b5a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1b5e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1b62:	430b      	orrs	r3, r1
    1b64:	f363 0241 	bfi	r2, r3, #1, #1
    1b68:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1b6c:	e6ef      	b.n	194e <cbvprintf+0x13e>
	switch (conv->specifier) {
    1b6e:	4601      	mov	r1, r0
    1b70:	e7dd      	b.n	1b2e <cbvprintf+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    1b72:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1b76:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1b78:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1b7c:	f361 0202 	bfi	r2, r1, #0, #3
    1b80:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1b84:	bf14      	ite	ne
    1b86:	2301      	movne	r3, #1
    1b88:	2300      	moveq	r3, #0
    1b8a:	e7e6      	b.n	1b5a <cbvprintf+0x34a>
		conv->invalid = true;
    1b8c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1b90:	f043 0301 	orr.w	r3, r3, #1
    1b94:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1b98:	2300      	movs	r3, #0
    1b9a:	e7de      	b.n	1b5a <cbvprintf+0x34a>
		} else if (conv->width_present) {
    1b9c:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1ba0:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1ba2:	bfb4      	ite	lt
    1ba4:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1ba8:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1bac:	e6e1      	b.n	1972 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1bae:	079b      	lsls	r3, r3, #30
    1bb0:	f57f aeee 	bpl.w	1990 <cbvprintf+0x180>
			precision = conv->prec_value;
    1bb4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1bb8:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1bbc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1bbe:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1bc2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1bc6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1bca:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1bcc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1bd0:	d13a      	bne.n	1c48 <cbvprintf+0x438>
			switch (length_mod) {
    1bd2:	1ecb      	subs	r3, r1, #3
    1bd4:	2b04      	cmp	r3, #4
    1bd6:	d812      	bhi.n	1bfe <cbvprintf+0x3ee>
    1bd8:	e8df f003 	tbb	[pc, r3]
    1bdc:	11090903 	.word	0x11090903
    1be0:	11          	.byte	0x11
    1be1:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1be2:	f854 3b04 	ldr.w	r3, [r4], #4
    1be6:	17da      	asrs	r2, r3, #31
    1be8:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			} else if (length_mod == LENGTH_H) {
    1bec:	e01b      	b.n	1c26 <cbvprintf+0x416>
					(sint_value_type)va_arg(ap, intmax_t);
    1bee:	1de2      	adds	r2, r4, #7
    1bf0:	f022 0207 	bic.w	r2, r2, #7
    1bf4:	4614      	mov	r4, r2
    1bf6:	6852      	ldr	r2, [r2, #4]
    1bf8:	f854 3b08 	ldr.w	r3, [r4], #8
				break;
    1bfc:	e7f4      	b.n	1be8 <cbvprintf+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1bfe:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1c02:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1c04:	ea4f 72e3 	mov.w	r2, r3, asr #31
				value->sint = va_arg(ap, int);
    1c08:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1c0c:	d104      	bne.n	1c18 <cbvprintf+0x408>
				value->uint = (unsigned char)value->uint;
    1c0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
				value->uint = (unsigned short)value->uint;
    1c12:	930a      	str	r3, [sp, #40]	; 0x28
    1c14:	2300      	movs	r3, #0
    1c16:	e005      	b.n	1c24 <cbvprintf+0x414>
			} else if (length_mod == LENGTH_H) {
    1c18:	2902      	cmp	r1, #2
    1c1a:	d104      	bne.n	1c26 <cbvprintf+0x416>
				value->sint = (short)value->sint;
    1c1c:	b21a      	sxth	r2, r3
    1c1e:	920a      	str	r2, [sp, #40]	; 0x28
    1c20:	f343 33c0 	sbfx	r3, r3, #15, #1
    1c24:	930b      	str	r3, [sp, #44]	; 0x2c
		if (conv->invalid || conv->unsupported) {
    1c26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1c2a:	f013 0603 	ands.w	r6, r3, #3
    1c2e:	d041      	beq.n	1cb4 <cbvprintf+0x4a4>
			OUTS(sp, fp);
    1c30:	9802      	ldr	r0, [sp, #8]
    1c32:	463b      	mov	r3, r7
    1c34:	4652      	mov	r2, sl
    1c36:	4659      	mov	r1, fp
    1c38:	f007 f95a 	bl	8ef0 <outs>
    1c3c:	2800      	cmp	r0, #0
    1c3e:	f2c0 812d 	blt.w	1e9c <cbvprintf+0x68c>
    1c42:	4405      	add	r5, r0
			continue;
    1c44:	46ba      	mov	sl, r7
    1c46:	e5eb      	b.n	1820 <cbvprintf+0x10>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1c48:	2b02      	cmp	r3, #2
    1c4a:	d121      	bne.n	1c90 <cbvprintf+0x480>
			switch (length_mod) {
    1c4c:	1ecb      	subs	r3, r1, #3
    1c4e:	2b04      	cmp	r3, #4
    1c50:	d813      	bhi.n	1c7a <cbvprintf+0x46a>
    1c52:	e8df f003 	tbb	[pc, r3]
    1c56:	0a03      	.short	0x0a03
    1c58:	120a      	.short	0x120a
    1c5a:	12          	.byte	0x12
    1c5b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1c5c:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
    1c5e:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1c60:	2200      	movs	r2, #0
				value->uint =
    1c62:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    1c66:	461c      	mov	r4, r3
    1c68:	e7dd      	b.n	1c26 <cbvprintf+0x416>
					(uint_value_type)va_arg(ap,
    1c6a:	3407      	adds	r4, #7
    1c6c:	f024 0407 	bic.w	r4, r4, #7
    1c70:	4623      	mov	r3, r4
    1c72:	6862      	ldr	r2, [r4, #4]
    1c74:	f853 0b08 	ldr.w	r0, [r3], #8
				break;
    1c78:	e7f3      	b.n	1c62 <cbvprintf+0x452>
					(uint_value_type)va_arg(ap, size_t);
    1c7a:	f854 3b04 	ldr.w	r3, [r4], #4
    1c7e:	2200      	movs	r2, #0
			if (length_mod == LENGTH_HH) {
    1c80:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1c82:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1c86:	d0c2      	beq.n	1c0e <cbvprintf+0x3fe>
			} else if (length_mod == LENGTH_H) {
    1c88:	2902      	cmp	r1, #2
    1c8a:	d1cc      	bne.n	1c26 <cbvprintf+0x416>
				value->uint = (unsigned short)value->uint;
    1c8c:	b29b      	uxth	r3, r3
    1c8e:	e7c0      	b.n	1c12 <cbvprintf+0x402>
		} else if (specifier_cat == SPECIFIER_FP) {
    1c90:	2b04      	cmp	r3, #4
    1c92:	d109      	bne.n	1ca8 <cbvprintf+0x498>
					(sint_value_type)va_arg(ap, long long);
    1c94:	1de3      	adds	r3, r4, #7
    1c96:	f023 0307 	bic.w	r3, r3, #7
    1c9a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ca2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1ca6:	e7be      	b.n	1c26 <cbvprintf+0x416>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1ca8:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1caa:	bf04      	itt	eq
    1cac:	f854 3b04 	ldreq.w	r3, [r4], #4
    1cb0:	930a      	streq	r3, [sp, #40]	; 0x28
    1cb2:	e7b8      	b.n	1c26 <cbvprintf+0x416>
		switch (conv->specifier) {
    1cb4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1cb8:	2878      	cmp	r0, #120	; 0x78
    1cba:	d8c3      	bhi.n	1c44 <cbvprintf+0x434>
    1cbc:	2862      	cmp	r0, #98	; 0x62
    1cbe:	d822      	bhi.n	1d06 <cbvprintf+0x4f6>
    1cc0:	2825      	cmp	r0, #37	; 0x25
    1cc2:	f43f adb6 	beq.w	1832 <cbvprintf+0x22>
    1cc6:	2858      	cmp	r0, #88	; 0x58
    1cc8:	d1bc      	bne.n	1c44 <cbvprintf+0x434>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1cca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1cce:	9300      	str	r3, [sp, #0]
    1cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1cd4:	ab04      	add	r3, sp, #16
    1cd6:	aa0c      	add	r2, sp, #48	; 0x30
    1cd8:	f007 f8c4 	bl	8e64 <encode_uint>
    1cdc:	4682      	mov	sl, r0
			if (precision >= 0) {
    1cde:	f1b8 0f00 	cmp.w	r8, #0
    1ce2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1ce6:	db0c      	blt.n	1d02 <cbvprintf+0x4f2>
				conv->flag_zero = false;
    1ce8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1cec:	eba3 020a 	sub.w	r2, r3, sl
				conv->flag_zero = false;
    1cf0:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1cf4:	4590      	cmp	r8, r2
				conv->flag_zero = false;
    1cf6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1cfa:	d902      	bls.n	1d02 <cbvprintf+0x4f2>
					conv->pad0_value = precision - (int)len;
    1cfc:	eba8 0202 	sub.w	r2, r8, r2
    1d00:	920d      	str	r2, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1d02:	4698      	mov	r8, r3
    1d04:	e03e      	b.n	1d84 <cbvprintf+0x574>
		switch (conv->specifier) {
    1d06:	3863      	subs	r0, #99	; 0x63
    1d08:	2815      	cmp	r0, #21
    1d0a:	d89b      	bhi.n	1c44 <cbvprintf+0x434>
    1d0c:	a201      	add	r2, pc, #4	; (adr r2, 1d14 <cbvprintf+0x504>)
    1d0e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1d12:	bf00      	nop
    1d14:	00001d95 	.word	0x00001d95
    1d18:	00001df9 	.word	0x00001df9
    1d1c:	00001c45 	.word	0x00001c45
    1d20:	00001c45 	.word	0x00001c45
    1d24:	00001c45 	.word	0x00001c45
    1d28:	00001c45 	.word	0x00001c45
    1d2c:	00001df9 	.word	0x00001df9
    1d30:	00001c45 	.word	0x00001c45
    1d34:	00001c45 	.word	0x00001c45
    1d38:	00001c45 	.word	0x00001c45
    1d3c:	00001c45 	.word	0x00001c45
    1d40:	00001e51 	.word	0x00001e51
    1d44:	00001e1f 	.word	0x00001e1f
    1d48:	00001e23 	.word	0x00001e23
    1d4c:	00001c45 	.word	0x00001c45
    1d50:	00001c45 	.word	0x00001c45
    1d54:	00001d6d 	.word	0x00001d6d
    1d58:	00001c45 	.word	0x00001c45
    1d5c:	00001e1f 	.word	0x00001e1f
    1d60:	00001c45 	.word	0x00001c45
    1d64:	00001c45 	.word	0x00001c45
    1d68:	00001e1f 	.word	0x00001e1f
			if (precision >= 0) {
    1d6c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1d70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1d74:	db0a      	blt.n	1d8c <cbvprintf+0x57c>
				len = strnlen(bps, precision);
    1d76:	4641      	mov	r1, r8
    1d78:	4650      	mov	r0, sl
    1d7a:	f007 f9a3 	bl	90c4 <strnlen>
			bpe = bps + len;
    1d7e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1d82:	2600      	movs	r6, #0
		if (bps == NULL) {
    1d84:	f1ba 0f00 	cmp.w	sl, #0
    1d88:	d10c      	bne.n	1da4 <cbvprintf+0x594>
    1d8a:	e75b      	b.n	1c44 <cbvprintf+0x434>
				len = strlen(bps);
    1d8c:	4650      	mov	r0, sl
    1d8e:	f007 f992 	bl	90b6 <strlen>
    1d92:	e7f4      	b.n	1d7e <cbvprintf+0x56e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d96:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1d9a:	2600      	movs	r6, #0
			bps = buf;
    1d9c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1da0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1da4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1da8:	b106      	cbz	r6, 1dac <cbvprintf+0x59c>
			nj_len += 1U;
    1daa:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1dac:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1db0:	06d0      	lsls	r0, r2, #27
    1db2:	d567      	bpl.n	1e84 <cbvprintf+0x674>
			nj_len += 2U;
    1db4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1db6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1db8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1dba:	bf48      	it	mi
    1dbc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1dbe:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1dc0:	bf48      	it	mi
    1dc2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1dc4:	f1b9 0f00 	cmp.w	r9, #0
    1dc8:	dd75      	ble.n	1eb6 <cbvprintf+0x6a6>
			if (!conv->flag_dash) {
    1dca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1dce:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1dd2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1dd6:	9303      	str	r3, [sp, #12]
    1dd8:	0753      	lsls	r3, r2, #29
    1dda:	d46c      	bmi.n	1eb6 <cbvprintf+0x6a6>
				if (conv->flag_zero) {
    1ddc:	0650      	lsls	r0, r2, #25
    1dde:	d560      	bpl.n	1ea2 <cbvprintf+0x692>
					if (sign != 0) {
    1de0:	b146      	cbz	r6, 1df4 <cbvprintf+0x5e4>
						OUTC(sign);
    1de2:	9b02      	ldr	r3, [sp, #8]
    1de4:	4659      	mov	r1, fp
    1de6:	4630      	mov	r0, r6
    1de8:	4798      	blx	r3
    1dea:	2800      	cmp	r0, #0
    1dec:	db56      	blt.n	1e9c <cbvprintf+0x68c>
    1dee:	9b03      	ldr	r3, [sp, #12]
    1df0:	3501      	adds	r5, #1
    1df2:	461e      	mov	r6, r3
					pad = '0';
    1df4:	2330      	movs	r3, #48	; 0x30
    1df6:	e055      	b.n	1ea4 <cbvprintf+0x694>
			if (conv->flag_plus) {
    1df8:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    1dfa:	bf5c      	itt	pl
    1dfc:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1e00:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				sign = '+';
    1e06:	bf48      	it	mi
    1e08:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	f6bf af5d 	bge.w	1cca <cbvprintf+0x4ba>
				value->uint = (uint_value_type)-sint;
    1e10:	4252      	negs	r2, r2
    1e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1e16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1e1a:	262d      	movs	r6, #45	; 0x2d
    1e1c:	e755      	b.n	1cca <cbvprintf+0x4ba>
		switch (conv->specifier) {
    1e1e:	2600      	movs	r6, #0
    1e20:	e753      	b.n	1cca <cbvprintf+0x4ba>
			if (value->ptr != NULL) {
    1e22:	980a      	ldr	r0, [sp, #40]	; 0x28
    1e24:	b340      	cbz	r0, 1e78 <cbvprintf+0x668>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e26:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1e2a:	9300      	str	r3, [sp, #0]
    1e2c:	aa0c      	add	r2, sp, #48	; 0x30
    1e2e:	ab04      	add	r3, sp, #16
    1e30:	2100      	movs	r1, #0
    1e32:	f007 f817 	bl	8e64 <encode_uint>
				conv->altform_0c = true;
    1e36:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1e3a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1e3e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1e42:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1e46:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1e48:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1e4c:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1e4e:	e746      	b.n	1cde <cbvprintf+0x4ce>
				store_count(conv, value->ptr, count);
    1e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1e52:	2907      	cmp	r1, #7
    1e54:	f63f aef6 	bhi.w	1c44 <cbvprintf+0x434>
    1e58:	e8df f001 	tbb	[pc, r1]
    1e5c:	0c06040c 	.word	0x0c06040c
    1e60:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1e64:	701d      	strb	r5, [r3, #0]
		break;
    1e66:	e6ed      	b.n	1c44 <cbvprintf+0x434>
		*(short *)dp = (short)count;
    1e68:	801d      	strh	r5, [r3, #0]
		break;
    1e6a:	e6eb      	b.n	1c44 <cbvprintf+0x434>
		*(intmax_t *)dp = (intmax_t)count;
    1e6c:	17ea      	asrs	r2, r5, #31
    1e6e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1e72:	e6e7      	b.n	1c44 <cbvprintf+0x434>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1e74:	601d      	str	r5, [r3, #0]
		break;
    1e76:	e6e5      	b.n	1c44 <cbvprintf+0x434>
			bps = "(nil)";
    1e78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1f40 <cbvprintf+0x730>
    1e7c:	4606      	mov	r6, r0
			bpe = bps + 5;
    1e7e:	f10a 0805 	add.w	r8, sl, #5
    1e82:	e78f      	b.n	1da4 <cbvprintf+0x594>
		} else if (conv->altform_0) {
    1e84:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1e86:	bf48      	it	mi
    1e88:	3301      	addmi	r3, #1
    1e8a:	e794      	b.n	1db6 <cbvprintf+0x5a6>
					OUTC(pad);
    1e8c:	4618      	mov	r0, r3
    1e8e:	9303      	str	r3, [sp, #12]
    1e90:	4659      	mov	r1, fp
    1e92:	9b02      	ldr	r3, [sp, #8]
    1e94:	4798      	blx	r3
    1e96:	2800      	cmp	r0, #0
    1e98:	9b03      	ldr	r3, [sp, #12]
    1e9a:	da04      	bge.n	1ea6 <cbvprintf+0x696>
#undef OUTS
#undef OUTC
}
    1e9c:	b011      	add	sp, #68	; 0x44
    1e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1ea2:	2320      	movs	r3, #32
    1ea4:	444d      	add	r5, r9
    1ea6:	464a      	mov	r2, r9
				while (width-- > 0) {
    1ea8:	2a00      	cmp	r2, #0
    1eaa:	eba5 0109 	sub.w	r1, r5, r9
    1eae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1eb2:	dceb      	bgt.n	1e8c <cbvprintf+0x67c>
    1eb4:	460d      	mov	r5, r1
		if (sign != 0) {
    1eb6:	b136      	cbz	r6, 1ec6 <cbvprintf+0x6b6>
			OUTC(sign);
    1eb8:	9b02      	ldr	r3, [sp, #8]
    1eba:	4659      	mov	r1, fp
    1ebc:	4630      	mov	r0, r6
    1ebe:	4798      	blx	r3
    1ec0:	2800      	cmp	r0, #0
    1ec2:	dbeb      	blt.n	1e9c <cbvprintf+0x68c>
    1ec4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1ec6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1eca:	06d9      	lsls	r1, r3, #27
    1ecc:	d401      	bmi.n	1ed2 <cbvprintf+0x6c2>
    1ece:	071a      	lsls	r2, r3, #28
    1ed0:	d506      	bpl.n	1ee0 <cbvprintf+0x6d0>
				OUTC('0');
    1ed2:	9b02      	ldr	r3, [sp, #8]
    1ed4:	4659      	mov	r1, fp
    1ed6:	2030      	movs	r0, #48	; 0x30
    1ed8:	4798      	blx	r3
    1eda:	2800      	cmp	r0, #0
    1edc:	dbde      	blt.n	1e9c <cbvprintf+0x68c>
    1ede:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1ee0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ee4:	06db      	lsls	r3, r3, #27
    1ee6:	d507      	bpl.n	1ef8 <cbvprintf+0x6e8>
				OUTC(conv->specifier);
    1ee8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1eec:	9b02      	ldr	r3, [sp, #8]
    1eee:	4659      	mov	r1, fp
    1ef0:	4798      	blx	r3
    1ef2:	2800      	cmp	r0, #0
    1ef4:	dbd2      	blt.n	1e9c <cbvprintf+0x68c>
    1ef6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1ef8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1efa:	442e      	add	r6, r5
    1efc:	1b73      	subs	r3, r6, r5
    1efe:	2b00      	cmp	r3, #0
    1f00:	dc16      	bgt.n	1f30 <cbvprintf+0x720>
			OUTS(bps, bpe);
    1f02:	9802      	ldr	r0, [sp, #8]
    1f04:	4643      	mov	r3, r8
    1f06:	4652      	mov	r2, sl
    1f08:	4659      	mov	r1, fp
    1f0a:	f006 fff1 	bl	8ef0 <outs>
    1f0e:	2800      	cmp	r0, #0
    1f10:	dbc4      	blt.n	1e9c <cbvprintf+0x68c>
    1f12:	4405      	add	r5, r0
		while (width > 0) {
    1f14:	44a9      	add	r9, r5
    1f16:	eba9 0305 	sub.w	r3, r9, r5
    1f1a:	2b00      	cmp	r3, #0
    1f1c:	f77f ae92 	ble.w	1c44 <cbvprintf+0x434>
			OUTC(' ');
    1f20:	9b02      	ldr	r3, [sp, #8]
    1f22:	4659      	mov	r1, fp
    1f24:	2020      	movs	r0, #32
    1f26:	4798      	blx	r3
    1f28:	2800      	cmp	r0, #0
    1f2a:	dbb7      	blt.n	1e9c <cbvprintf+0x68c>
    1f2c:	3501      	adds	r5, #1
			--width;
    1f2e:	e7f2      	b.n	1f16 <cbvprintf+0x706>
				OUTC('0');
    1f30:	9b02      	ldr	r3, [sp, #8]
    1f32:	4659      	mov	r1, fp
    1f34:	2030      	movs	r0, #48	; 0x30
    1f36:	4798      	blx	r3
    1f38:	2800      	cmp	r0, #0
    1f3a:	dbaf      	blt.n	1e9c <cbvprintf+0x68c>
    1f3c:	3501      	adds	r5, #1
    1f3e:	e7dd      	b.n	1efc <cbvprintf+0x6ec>
    1f40:	0000a59b 	.word	0x0000a59b

00001f44 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1f44:	b508      	push	{r3, lr}
	__asm__ volatile(
    1f46:	f04f 0240 	mov.w	r2, #64	; 0x40
    1f4a:	f3ef 8311 	mrs	r3, BASEPRI
    1f4e:	f382 8812 	msr	BASEPRI_MAX, r2
    1f52:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1f56:	f001 fd35 	bl	39c4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1f5a:	4803      	ldr	r0, [pc, #12]	; (1f68 <sys_reboot+0x24>)
    1f5c:	f006 feeb 	bl	8d36 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1f60:	f000 fe66 	bl	2c30 <arch_cpu_idle>
    1f64:	e7fc      	b.n	1f60 <sys_reboot+0x1c>
    1f66:	bf00      	nop
    1f68:	0000a5a1 	.word	0x0000a5a1

00001f6c <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    1f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f70:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    1f72:	460c      	mov	r4, r1
    1f74:	b959      	cbnz	r1, 1f8e <msg_process+0x22>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1f76:	4d12      	ldr	r5, [pc, #72]	; (1fc0 <msg_process+0x54>)
    1f78:	4b12      	ldr	r3, [pc, #72]	; (1fc4 <msg_process+0x58>)
	__ASSERT_NO_MSG(msg != NULL);
    1f7a:	4f13      	ldr	r7, [pc, #76]	; (1fc8 <msg_process+0x5c>)
    1f7c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1fcc <msg_process+0x60>
    1f80:	f8df a04c 	ldr.w	sl, [pc, #76]	; 1fd0 <msg_process+0x64>
	return __log_backends_end - __log_backends_start;
    1f84:	1b5b      	subs	r3, r3, r5
    1f86:	ea4f 1823 	mov.w	r8, r3, asr #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1f8a:	4544      	cmp	r4, r8
    1f8c:	db01      	blt.n	1f92 <msg_process+0x26>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (log_backend_is_active(backend) &&
    1f92:	4628      	mov	r0, r5
    1f94:	f006 ffd7 	bl	8f46 <log_backend_is_active>
    1f98:	b178      	cbz	r0, 1fba <msg_process+0x4e>
	__ASSERT_NO_MSG(msg != NULL);
    1f9a:	b94e      	cbnz	r6, 1fb0 <msg_process+0x44>
    1f9c:	4649      	mov	r1, r9
    1f9e:	4650      	mov	r0, sl
    1fa0:	2386      	movs	r3, #134	; 0x86
    1fa2:	463a      	mov	r2, r7
    1fa4:	f006 ffc1 	bl	8f2a <assert_print>
    1fa8:	2186      	movs	r1, #134	; 0x86
    1faa:	4638      	mov	r0, r7
    1fac:	f006 ffb6 	bl	8f1c <assert_post_action>
	backend->api->process(backend, msg);
    1fb0:	682b      	ldr	r3, [r5, #0]
    1fb2:	4631      	mov	r1, r6
    1fb4:	681b      	ldr	r3, [r3, #0]
    1fb6:	4628      	mov	r0, r5
    1fb8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1fba:	3401      	adds	r4, #1
    1fbc:	3510      	adds	r5, #16
    1fbe:	e7e4      	b.n	1f8a <msg_process+0x1e>
    1fc0:	00009b18 	.word	0x00009b18
    1fc4:	00009b38 	.word	0x00009b38
    1fc8:	0000a5ca 	.word	0x0000a5ca
    1fcc:	0000a602 	.word	0x0000a602
    1fd0:	00009eb7 	.word	0x00009eb7

00001fd4 <log_format_func_t_get>:
}
    1fd4:	4b01      	ldr	r3, [pc, #4]	; (1fdc <log_format_func_t_get+0x8>)
    1fd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1fda:	4770      	bx	lr
    1fdc:	00009ba0 	.word	0x00009ba0

00001fe0 <log_core_init>:
	panic_mode = false;
    1fe0:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <log_core_init+0x18>)
    1fe2:	2300      	movs	r3, #0
    1fe4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1fe6:	4a05      	ldr	r2, [pc, #20]	; (1ffc <log_core_init+0x1c>)
    1fe8:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <log_core_init+0x20>)
    1fec:	4a05      	ldr	r2, [pc, #20]	; (2004 <log_core_init+0x24>)
    1fee:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1ff0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1ff4:	f000 ba8c 	b.w	2510 <log_output_timestamp_freq_set>
    1ff8:	20000e79 	.word	0x20000e79
    1ffc:	20000548 	.word	0x20000548
    2000:	2000009c 	.word	0x2000009c
    2004:	00008f4d 	.word	0x00008f4d

00002008 <log_init>:
{
    2008:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    200a:	4b19      	ldr	r3, [pc, #100]	; (2070 <log_init+0x68>)
    200c:	4c19      	ldr	r4, [pc, #100]	; (2074 <log_init+0x6c>)
    200e:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2010:	2c90      	cmp	r4, #144	; 0x90
    2012:	d90b      	bls.n	202c <log_init+0x24>
    2014:	4918      	ldr	r1, [pc, #96]	; (2078 <log_init+0x70>)
    2016:	4819      	ldr	r0, [pc, #100]	; (207c <log_init+0x74>)
    2018:	4a19      	ldr	r2, [pc, #100]	; (2080 <log_init+0x78>)
    201a:	f240 2373 	movw	r3, #627	; 0x273
    201e:	f006 ff84 	bl	8f2a <assert_print>
    2022:	4817      	ldr	r0, [pc, #92]	; (2080 <log_init+0x78>)
    2024:	f240 2173 	movw	r1, #627	; 0x273
    2028:	f006 ff78 	bl	8f1c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    202c:	f3bf 8f5b 	dmb	ish
    2030:	4b14      	ldr	r3, [pc, #80]	; (2084 <log_init+0x7c>)
    2032:	e853 6f00 	ldrex	r6, [r3]
    2036:	1c72      	adds	r2, r6, #1
    2038:	e843 2100 	strex	r1, r2, [r3]
    203c:	2900      	cmp	r1, #0
    203e:	d1f8      	bne.n	2032 <log_init+0x2a>
    2040:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2044:	b91e      	cbnz	r6, 204e <log_init+0x46>
    2046:	1125      	asrs	r5, r4, #4
    2048:	4c09      	ldr	r4, [pc, #36]	; (2070 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    204a:	42ae      	cmp	r6, r5
    204c:	db00      	blt.n	2050 <log_init+0x48>
}
    204e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2050:	7b23      	ldrb	r3, [r4, #12]
    2052:	b153      	cbz	r3, 206a <log_init+0x62>
			if (backend->api->init != NULL) {
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	699b      	ldr	r3, [r3, #24]
    2058:	b10b      	cbz	r3, 205e <log_init+0x56>
				backend->api->init(backend);
    205a:	4620      	mov	r0, r4
    205c:	4798      	blx	r3
			log_backend_enable(backend,
    205e:	6863      	ldr	r3, [r4, #4]
    2060:	2204      	movs	r2, #4
    2062:	6819      	ldr	r1, [r3, #0]
    2064:	4620      	mov	r0, r4
    2066:	f000 f86f 	bl	2148 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    206a:	3601      	adds	r6, #1
    206c:	3410      	adds	r4, #16
    206e:	e7ec      	b.n	204a <log_init+0x42>
    2070:	00009b18 	.word	0x00009b18
    2074:	00009b38 	.word	0x00009b38
    2078:	0000a65a 	.word	0x0000a65a
    207c:	00009eb7 	.word	0x00009eb7
    2080:	0000a615 	.word	0x0000a615
    2084:	2000054c 	.word	0x2000054c

00002088 <z_impl_log_panic>:
{
    2088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    208a:	4f0c      	ldr	r7, [pc, #48]	; (20bc <z_impl_log_panic+0x34>)
    208c:	783d      	ldrb	r5, [r7, #0]
    208e:	b94d      	cbnz	r5, 20a4 <z_impl_log_panic+0x1c>
    2090:	4c0b      	ldr	r4, [pc, #44]	; (20c0 <z_impl_log_panic+0x38>)
    2092:	4e0c      	ldr	r6, [pc, #48]	; (20c4 <z_impl_log_panic+0x3c>)
	log_init();
    2094:	f7ff ffb8 	bl	2008 <log_init>
    2098:	1b36      	subs	r6, r6, r4
    209a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    209c:	42b5      	cmp	r5, r6
    209e:	db02      	blt.n	20a6 <z_impl_log_panic+0x1e>
	panic_mode = true;
    20a0:	2301      	movs	r3, #1
    20a2:	703b      	strb	r3, [r7, #0]
}
    20a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    20a6:	4620      	mov	r0, r4
    20a8:	f006 ff4d 	bl	8f46 <log_backend_is_active>
    20ac:	b118      	cbz	r0, 20b6 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    20ae:	6823      	ldr	r3, [r4, #0]
    20b0:	4620      	mov	r0, r4
    20b2:	695b      	ldr	r3, [r3, #20]
    20b4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    20b6:	3501      	adds	r5, #1
    20b8:	3410      	adds	r4, #16
    20ba:	e7ef      	b.n	209c <z_impl_log_panic+0x14>
    20bc:	20000e79 	.word	0x20000e79
    20c0:	00009b18 	.word	0x00009b18
    20c4:	00009b38 	.word	0x00009b38

000020c8 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    20c8:	4b01      	ldr	r3, [pc, #4]	; (20d0 <z_log_notify_backend_enabled+0x8>)
    20ca:	2201      	movs	r2, #1
    20cc:	701a      	strb	r2, [r3, #0]
}
    20ce:	4770      	bx	lr
    20d0:	20000e78 	.word	0x20000e78

000020d4 <z_log_dropped>:
    20d4:	4b0c      	ldr	r3, [pc, #48]	; (2108 <z_log_dropped+0x34>)
    20d6:	f3bf 8f5b 	dmb	ish
    20da:	e853 1f00 	ldrex	r1, [r3]
    20de:	3101      	adds	r1, #1
    20e0:	e843 1200 	strex	r2, r1, [r3]
    20e4:	2a00      	cmp	r2, #0
    20e6:	d1f8      	bne.n	20da <z_log_dropped+0x6>
    20e8:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    20ec:	b158      	cbz	r0, 2106 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    20ee:	f3bf 8f5b 	dmb	ish
    20f2:	4b06      	ldr	r3, [pc, #24]	; (210c <z_log_dropped+0x38>)
    20f4:	e853 1f00 	ldrex	r1, [r3]
    20f8:	3901      	subs	r1, #1
    20fa:	e843 1200 	strex	r2, r1, [r3]
    20fe:	2a00      	cmp	r2, #0
    2100:	d1f8      	bne.n	20f4 <z_log_dropped+0x20>
    2102:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    2106:	4770      	bx	lr
    2108:	20000548 	.word	0x20000548
    210c:	20000544 	.word	0x20000544

00002110 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    2110:	4b05      	ldr	r3, [pc, #20]	; (2128 <z_log_msg2_commit+0x18>)
{
    2112:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2114:	681b      	ldr	r3, [r3, #0]
{
    2116:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2118:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    211a:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    211c:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    211e:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    2124:	f7ff bf22 	b.w	1f6c <msg_process>
    2128:	2000009c 	.word	0x2000009c

0000212c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    212c:	4a04      	ldr	r2, [pc, #16]	; (2140 <log_source_name_get+0x14>)
    212e:	4b05      	ldr	r3, [pc, #20]	; (2144 <log_source_name_get+0x18>)
    2130:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2132:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2136:	bf34      	ite	cc
    2138:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    213c:	2000      	movcs	r0, #0
}
    213e:	4770      	bx	lr
    2140:	00009ac8 	.word	0x00009ac8
    2144:	00009b18 	.word	0x00009b18

00002148 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2148:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    214a:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    214c:	4c0e      	ldr	r4, [pc, #56]	; (2188 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    214e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    2150:	1b04      	subs	r4, r0, r4
    2152:	1124      	asrs	r4, r4, #4
{
    2154:	4605      	mov	r5, r0
    2156:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    2158:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    215a:	b963      	cbnz	r3, 2176 <log_backend_enable+0x2e>
    215c:	490b      	ldr	r1, [pc, #44]	; (218c <log_backend_enable+0x44>)
    215e:	4a0c      	ldr	r2, [pc, #48]	; (2190 <log_backend_enable+0x48>)
    2160:	480c      	ldr	r0, [pc, #48]	; (2194 <log_backend_enable+0x4c>)
    2162:	23bb      	movs	r3, #187	; 0xbb
    2164:	f006 fee1 	bl	8f2a <assert_print>
    2168:	480b      	ldr	r0, [pc, #44]	; (2198 <log_backend_enable+0x50>)
    216a:	f006 fede 	bl	8f2a <assert_print>
    216e:	4808      	ldr	r0, [pc, #32]	; (2190 <log_backend_enable+0x48>)
    2170:	21bb      	movs	r1, #187	; 0xbb
    2172:	f006 fed3 	bl	8f1c <assert_post_action>
	backend->cb->id = id;
    2176:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    2178:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    217a:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    217c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    217e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    2184:	f7ff bfa0 	b.w	20c8 <z_log_notify_backend_enabled>
    2188:	00009b18 	.word	0x00009b18
    218c:	0000a6da 	.word	0x0000a6da
    2190:	0000a682 	.word	0x0000a682
    2194:	00009eb7 	.word	0x00009eb7
    2198:	0000a6f0 	.word	0x0000a6f0

0000219c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    219c:	b40e      	push	{r1, r2, r3}
    219e:	b503      	push	{r0, r1, lr}
    21a0:	ab03      	add	r3, sp, #12
    21a2:	4601      	mov	r1, r0
    21a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    21a8:	4804      	ldr	r0, [pc, #16]	; (21bc <print_formatted+0x20>)
	va_start(args, fmt);
    21aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    21ac:	f7ff fb30 	bl	1810 <cbvprintf>
	va_end(args);

	return length;
}
    21b0:	b002      	add	sp, #8
    21b2:	f85d eb04 	ldr.w	lr, [sp], #4
    21b6:	b003      	add	sp, #12
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	00008f7f 	.word	0x00008f7f

000021c0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    21c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21c4:	b087      	sub	sp, #28
    21c6:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    21c8:	f001 0301 	and.w	r3, r1, #1
{
    21cc:	9205      	str	r2, [sp, #20]
    21ce:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    21d2:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    21d6:	9304      	str	r3, [sp, #16]
{
    21d8:	4607      	mov	r7, r0
    21da:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    21dc:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    21e0:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    21e4:	f006 fec9 	bl	8f7a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    21e8:	4602      	mov	r2, r0
    21ea:	2800      	cmp	r0, #0
    21ec:	d044      	beq.n	2278 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    21ee:	493a      	ldr	r1, [pc, #232]	; (22d8 <prefix_print+0x118>)
    21f0:	4638      	mov	r0, r7
    21f2:	f7ff ffd3 	bl	219c <print_formatted>
    21f6:	4605      	mov	r5, r0
	}

	if (stamp) {
    21f8:	f1bb 0f00 	cmp.w	fp, #0
    21fc:	d008      	beq.n	2210 <prefix_print+0x50>
	if (!format) {
    21fe:	f018 0f44 	tst.w	r8, #68	; 0x44
    2202:	d13b      	bne.n	227c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2204:	4935      	ldr	r1, [pc, #212]	; (22dc <prefix_print+0x11c>)
    2206:	4622      	mov	r2, r4
    2208:	4638      	mov	r0, r7
    220a:	f7ff ffc7 	bl	219c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    220e:	4405      	add	r5, r0
	if (color) {
    2210:	9b04      	ldr	r3, [sp, #16]
    2212:	b153      	cbz	r3, 222a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    2214:	4b32      	ldr	r3, [pc, #200]	; (22e0 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    2216:	4933      	ldr	r1, [pc, #204]	; (22e4 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    2218:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    221c:	4b32      	ldr	r3, [pc, #200]	; (22e8 <prefix_print+0x128>)
    221e:	4638      	mov	r0, r7
    2220:	2a00      	cmp	r2, #0
    2222:	bf08      	it	eq
    2224:	461a      	moveq	r2, r3
    2226:	f7ff ffb9 	bl	219c <print_formatted>
	if (level_on) {
    222a:	b13e      	cbz	r6, 223c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    222c:	4b2f      	ldr	r3, [pc, #188]	; (22ec <prefix_print+0x12c>)
    222e:	4930      	ldr	r1, [pc, #192]	; (22f0 <prefix_print+0x130>)
    2230:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    2234:	4638      	mov	r0, r7
    2236:	f7ff ffb1 	bl	219c <print_formatted>
    223a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    223c:	f1ba 0f00 	cmp.w	sl, #0
    2240:	db16      	blt.n	2270 <prefix_print+0xb0>
		total += print_formatted(output,
    2242:	9b05      	ldr	r3, [sp, #20]
    2244:	2b00      	cmp	r3, #0
    2246:	d045      	beq.n	22d4 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2248:	2301      	movs	r3, #1
    224a:	fa03 f309 	lsl.w	r3, r3, r9
		total += print_formatted(output,
    224e:	f013 0f10 	tst.w	r3, #16
    2252:	4b28      	ldr	r3, [pc, #160]	; (22f4 <prefix_print+0x134>)
    2254:	4c28      	ldr	r4, [pc, #160]	; (22f8 <prefix_print+0x138>)
    2256:	bf18      	it	ne
    2258:	461c      	movne	r4, r3
    225a:	4651      	mov	r1, sl
    225c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2260:	f7ff ff64 	bl	212c <log_source_name_get>
    2264:	4621      	mov	r1, r4
    2266:	4602      	mov	r2, r0
    2268:	4638      	mov	r0, r7
    226a:	f7ff ff97 	bl	219c <print_formatted>
    226e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2270:	1970      	adds	r0, r6, r5
    2272:	b007      	add	sp, #28
    2274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2278:	4605      	mov	r5, r0
    227a:	e7bd      	b.n	21f8 <prefix_print+0x38>
	} else if (freq != 0U) {
    227c:	4b1f      	ldr	r3, [pc, #124]	; (22fc <prefix_print+0x13c>)
    227e:	6818      	ldr	r0, [r3, #0]
    2280:	2800      	cmp	r0, #0
    2282:	d0c4      	beq.n	220e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    2284:	4b1e      	ldr	r3, [pc, #120]	; (2300 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    2286:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    228a:	681b      	ldr	r3, [r3, #0]
    228c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    2290:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2294:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    2298:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    229c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    22a0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    22a4:	fbb3 f2f1 	udiv	r2, r3, r1
    22a8:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22ac:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    22b0:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22b4:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    22b8:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22bc:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    22c0:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22c2:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    22c6:	490f      	ldr	r1, [pc, #60]	; (2304 <prefix_print+0x144>)
    22c8:	e9cd e401 	strd	lr, r4, [sp, #4]
    22cc:	4638      	mov	r0, r7
    22ce:	f7ff ff65 	bl	219c <print_formatted>
    22d2:	e79c      	b.n	220e <prefix_print+0x4e>
		total += print_formatted(output,
    22d4:	4c08      	ldr	r4, [pc, #32]	; (22f8 <prefix_print+0x138>)
    22d6:	e7c0      	b.n	225a <prefix_print+0x9a>
    22d8:	0000a720 	.word	0x0000a720
    22dc:	0000a724 	.word	0x0000a724
    22e0:	00009bac 	.word	0x00009bac
    22e4:	0000a749 	.word	0x0000a749
    22e8:	0000a712 	.word	0x0000a712
    22ec:	00009bc0 	.word	0x00009bc0
    22f0:	0000a74c 	.word	0x0000a74c
    22f4:	0000a717 	.word	0x0000a717
    22f8:	0000a71b 	.word	0x0000a71b
    22fc:	20000550 	.word	0x20000550
    2300:	20000554 	.word	0x20000554
    2304:	0000a72d 	.word	0x0000a72d

00002308 <hexdump_line_print>:
{
    2308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    230c:	461d      	mov	r5, r3
    230e:	9b08      	ldr	r3, [sp, #32]
    2310:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2312:	06da      	lsls	r2, r3, #27
{
    2314:	4604      	mov	r4, r0
    2316:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2318:	d405      	bmi.n	2326 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    231a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    231c:	bf4c      	ite	mi
    231e:	492a      	ldrmi	r1, [pc, #168]	; (23c8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2320:	492a      	ldrpl	r1, [pc, #168]	; (23cc <hexdump_line_print+0xc4>)
    2322:	f7ff ff3b 	bl	219c <print_formatted>
		print_formatted(output, " ");
    2326:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 23d0 <hexdump_line_print+0xc8>
{
    232a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    232e:	45a8      	cmp	r8, r5
    2330:	db2a      	blt.n	2388 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    2332:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23d4 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2336:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 23d8 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    233a:	f8df a094 	ldr.w	sl, [pc, #148]	; 23d0 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    233e:	2500      	movs	r5, #0
		if (i < length) {
    2340:	42bd      	cmp	r5, r7
    2342:	d22f      	bcs.n	23a4 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2344:	5d72      	ldrb	r2, [r6, r5]
    2346:	4649      	mov	r1, r9
    2348:	4620      	mov	r0, r4
    234a:	f7ff ff27 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    234e:	3501      	adds	r5, #1
    2350:	2d10      	cmp	r5, #16
    2352:	d120      	bne.n	2396 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    2354:	4921      	ldr	r1, [pc, #132]	; (23dc <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    2356:	f8df 8078 	ldr.w	r8, [pc, #120]	; 23d0 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    235a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 23e0 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    235e:	4620      	mov	r0, r4
    2360:	f7ff ff1c 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2364:	2500      	movs	r5, #0
		if (i < length) {
    2366:	42af      	cmp	r7, r5
    2368:	d928      	bls.n	23bc <hexdump_line_print+0xb4>
			char c = (char)data[i];
    236a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    236c:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    2370:	2b5f      	cmp	r3, #95	; 0x5f
    2372:	bf28      	it	cs
    2374:	222e      	movcs	r2, #46	; 0x2e
    2376:	4649      	mov	r1, r9
    2378:	4620      	mov	r0, r4
    237a:	f7ff ff0f 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    237e:	3501      	adds	r5, #1
    2380:	2d10      	cmp	r5, #16
    2382:	d114      	bne.n	23ae <hexdump_line_print+0xa6>
}
    2384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2388:	4649      	mov	r1, r9
    238a:	4620      	mov	r0, r4
    238c:	f7ff ff06 	bl	219c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2390:	f108 0801 	add.w	r8, r8, #1
    2394:	e7cb      	b.n	232e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2396:	076a      	lsls	r2, r5, #29
    2398:	d1d2      	bne.n	2340 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    239a:	4651      	mov	r1, sl
    239c:	4620      	mov	r0, r4
    239e:	f7ff fefd 	bl	219c <print_formatted>
    23a2:	e7cd      	b.n	2340 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    23a4:	4641      	mov	r1, r8
    23a6:	4620      	mov	r0, r4
    23a8:	f7ff fef8 	bl	219c <print_formatted>
    23ac:	e7cf      	b.n	234e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    23ae:	076b      	lsls	r3, r5, #29
    23b0:	d1d9      	bne.n	2366 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    23b2:	4641      	mov	r1, r8
    23b4:	4620      	mov	r0, r4
    23b6:	f7ff fef1 	bl	219c <print_formatted>
    23ba:	e7d4      	b.n	2366 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    23bc:	4641      	mov	r1, r8
    23be:	4620      	mov	r0, r4
    23c0:	f7ff feec 	bl	219c <print_formatted>
    23c4:	e7db      	b.n	237e <hexdump_line_print+0x76>
    23c6:	bf00      	nop
    23c8:	0000b835 	.word	0x0000b835
    23cc:	0000a752 	.word	0x0000a752
    23d0:	0000a75d 	.word	0x0000a75d
    23d4:	0000a75b 	.word	0x0000a75b
    23d8:	0000a755 	.word	0x0000a755
    23dc:	0000a75f 	.word	0x0000a75f
    23e0:	0000a761 	.word	0x0000a761

000023e4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    23e4:	b538      	push	{r3, r4, r5, lr}
    23e6:	460c      	mov	r4, r1
	if (color) {
    23e8:	07e1      	lsls	r1, r4, #31
{
    23ea:	4605      	mov	r5, r0
	if (color) {
    23ec:	d503      	bpl.n	23f6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    23ee:	4a08      	ldr	r2, [pc, #32]	; (2410 <postfix_print+0x2c>)
    23f0:	4908      	ldr	r1, [pc, #32]	; (2414 <postfix_print+0x30>)
    23f2:	f7ff fed3 	bl	219c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    23f6:	06e2      	lsls	r2, r4, #27
    23f8:	d408      	bmi.n	240c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    23fa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    23fc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    23fe:	bf4c      	ite	mi
    2400:	4905      	ldrmi	r1, [pc, #20]	; (2418 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2402:	4906      	ldrpl	r1, [pc, #24]	; (241c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2408:	f7ff bec8 	b.w	219c <print_formatted>
}
    240c:	bd38      	pop	{r3, r4, r5, pc}
    240e:	bf00      	nop
    2410:	0000a712 	.word	0x0000a712
    2414:	0000a749 	.word	0x0000a749
    2418:	0000b835 	.word	0x0000b835
    241c:	0000a752 	.word	0x0000a752

00002420 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    2424:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2426:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    242a:	4606      	mov	r6, r0
    242c:	460c      	mov	r4, r1
    242e:	4690      	mov	r8, r2
    2430:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    2434:	d05b      	beq.n	24ee <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    2436:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    2438:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    243a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    243e:	2b00      	cmp	r3, #0
    2440:	d052      	beq.n	24e8 <log_output_msg2_process+0xc8>
    2442:	492c      	ldr	r1, [pc, #176]	; (24f4 <log_output_msg2_process+0xd4>)
    2444:	1a5b      	subs	r3, r3, r1
    2446:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    244a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    244e:	f8cd 9000 	str.w	r9, [sp]
    2452:	68a3      	ldr	r3, [r4, #8]
    2454:	2200      	movs	r2, #0
    2456:	4641      	mov	r1, r8
    2458:	4630      	mov	r0, r6
    245a:	f7ff feb1 	bl	21c0 <prefix_print>
    245e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    2460:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    2462:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2466:	f3c3 2349 	ubfx	r3, r3, #9, #10
    246a:	b1c3      	cbz	r3, 249e <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    246c:	4f22      	ldr	r7, [pc, #136]	; (24f8 <log_output_msg2_process+0xd8>)
    246e:	4823      	ldr	r0, [pc, #140]	; (24fc <log_output_msg2_process+0xdc>)
    2470:	4923      	ldr	r1, [pc, #140]	; (2500 <log_output_msg2_process+0xe0>)
    2472:	f1b9 0f00 	cmp.w	r9, #0
    2476:	bf08      	it	eq
    2478:	4638      	moveq	r0, r7
    247a:	462b      	mov	r3, r5
    247c:	4632      	mov	r2, r6
    247e:	f006 fc18 	bl	8cb2 <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    2482:	2800      	cmp	r0, #0
    2484:	da0b      	bge.n	249e <log_output_msg2_process+0x7e>
    2486:	491f      	ldr	r1, [pc, #124]	; (2504 <log_output_msg2_process+0xe4>)
    2488:	481f      	ldr	r0, [pc, #124]	; (2508 <log_output_msg2_process+0xe8>)
    248a:	4a20      	ldr	r2, [pc, #128]	; (250c <log_output_msg2_process+0xec>)
    248c:	f240 23b7 	movw	r3, #695	; 0x2b7
    2490:	f006 fd4b 	bl	8f2a <assert_print>
    2494:	481d      	ldr	r0, [pc, #116]	; (250c <log_output_msg2_process+0xec>)
    2496:	f240 21b7 	movw	r1, #695	; 0x2b7
    249a:	f006 fd3f 	bl	8f1c <assert_post_action>
	*len = msg->hdr.desc.data_len;
    249e:	8867      	ldrh	r7, [r4, #2]
    24a0:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    24a4:	b197      	cbz	r7, 24cc <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    24a6:	6823      	ldr	r3, [r4, #0]
    24a8:	f3c3 2349 	ubfx	r3, r3, #9, #10
    24ac:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    24ae:	2f10      	cmp	r7, #16
    24b0:	463c      	mov	r4, r7
    24b2:	bf28      	it	cs
    24b4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    24b6:	4629      	mov	r1, r5
    24b8:	f8cd 8000 	str.w	r8, [sp]
    24bc:	4653      	mov	r3, sl
    24be:	4622      	mov	r2, r4
    24c0:	4630      	mov	r0, r6
    24c2:	f7ff ff21 	bl	2308 <hexdump_line_print>
	} while (len);
    24c6:	1b3f      	subs	r7, r7, r4
		data += length;
    24c8:	4425      	add	r5, r4
	} while (len);
    24ca:	d1f0      	bne.n	24ae <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    24cc:	f1b9 0f00 	cmp.w	r9, #0
    24d0:	d004      	beq.n	24dc <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    24d2:	464a      	mov	r2, r9
    24d4:	4641      	mov	r1, r8
    24d6:	4630      	mov	r0, r6
    24d8:	f7ff ff84 	bl	23e4 <postfix_print>
	}

	log_output_flush(output);
    24dc:	4630      	mov	r0, r6
}
    24de:	b004      	add	sp, #16
    24e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    24e4:	f006 bd73 	b.w	8fce <log_output_flush>
		int16_t source_id = source ?
    24e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24ec:	e7ad      	b.n	244a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    24ee:	46ca      	mov	sl, r9
    24f0:	e7b6      	b.n	2460 <log_output_msg2_process+0x40>
    24f2:	bf00      	nop
    24f4:	00009ac8 	.word	0x00009ac8
    24f8:	00008f9b 	.word	0x00008f9b
    24fc:	00008f7f 	.word	0x00008f7f
    2500:	00001811 	.word	0x00001811
    2504:	0000a7a0 	.word	0x0000a7a0
    2508:	00009eb7 	.word	0x00009eb7
    250c:	0000a764 	.word	0x0000a764

00002510 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2510:	4a08      	ldr	r2, [pc, #32]	; (2534 <log_output_timestamp_freq_set+0x24>)
{
    2512:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2514:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2516:	4c08      	ldr	r4, [pc, #32]	; (2538 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2518:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    251a:	2100      	movs	r1, #0
    251c:	42a0      	cmp	r0, r4
    251e:	d804      	bhi.n	252a <log_output_timestamp_freq_set+0x1a>
    2520:	b101      	cbz	r1, 2524 <log_output_timestamp_freq_set+0x14>
    2522:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2524:	4b05      	ldr	r3, [pc, #20]	; (253c <log_output_timestamp_freq_set+0x2c>)
    2526:	6018      	str	r0, [r3, #0]
}
    2528:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    252a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    252c:	005b      	lsls	r3, r3, #1
    252e:	2101      	movs	r1, #1
    2530:	e7f4      	b.n	251c <log_output_timestamp_freq_set+0xc>
    2532:	bf00      	nop
    2534:	20000554 	.word	0x20000554
    2538:	000f4240 	.word	0x000f4240
    253c:	20000550 	.word	0x20000550

00002540 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2544:	b085      	sub	sp, #20
    2546:	af02      	add	r7, sp, #8
    2548:	e9d7 a60d 	ldrd	sl, r6, [r7, #52]	; 0x34
    254c:	4604      	mov	r4, r0
    254e:	4688      	mov	r8, r1
    2550:	4693      	mov	fp, r2
    2552:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    2554:	2e00      	cmp	r6, #0
    2556:	d04d      	beq.n	25f4 <z_impl_z_log_msg2_runtime_vcreate+0xb4>
		va_list ap2;

		va_copy(ap2, ap);
    2558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    255a:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    255c:	9300      	str	r3, [sp, #0]
    255e:	4652      	mov	r2, sl
    2560:	4633      	mov	r3, r6
    2562:	2110      	movs	r1, #16
    2564:	2000      	movs	r0, #0
    2566:	f7fe fba7 	bl	cb8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    256a:	1e05      	subs	r5, r0, #0
    256c:	da09      	bge.n	2582 <z_impl_z_log_msg2_runtime_vcreate+0x42>
    256e:	4922      	ldr	r1, [pc, #136]	; (25f8 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    2570:	4822      	ldr	r0, [pc, #136]	; (25fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    2572:	4a23      	ldr	r2, [pc, #140]	; (2600 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    2574:	2367      	movs	r3, #103	; 0x67
    2576:	f006 fcd8 	bl	8f2a <assert_print>
    257a:	4821      	ldr	r0, [pc, #132]	; (2600 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    257c:	2167      	movs	r1, #103	; 0x67
    257e:	f006 fccd 	bl	8f1c <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2582:	4b20      	ldr	r3, [pc, #128]	; (2604 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    2584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2586:	f004 0407 	and.w	r4, r4, #7
    258a:	f00b 0b07 	and.w	fp, fp, #7
    258e:	00e4      	lsls	r4, r4, #3
    2590:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    2594:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    2598:	431c      	orrs	r4, r3
    259a:	4b1b      	ldr	r3, [pc, #108]	; (2608 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    259c:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    25a0:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    25a2:	4613      	mov	r3, r2
    25a4:	3317      	adds	r3, #23
    25a6:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    25a8:	f023 0307 	bic.w	r3, r3, #7
    25ac:	ebad 0d03 	sub.w	sp, sp, r3
    25b0:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    25b4:	b1a6      	cbz	r6, 25e0 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    25b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    25b8:	9300      	str	r3, [sp, #0]
    25ba:	4652      	mov	r2, sl
    25bc:	4633      	mov	r3, r6
    25be:	4629      	mov	r1, r5
    25c0:	f10b 0010 	add.w	r0, fp, #16
    25c4:	f7fe fb78 	bl	cb8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    25c8:	2800      	cmp	r0, #0
    25ca:	da09      	bge.n	25e0 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
    25cc:	490a      	ldr	r1, [pc, #40]	; (25f8 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    25ce:	480b      	ldr	r0, [pc, #44]	; (25fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    25d0:	4a0b      	ldr	r2, [pc, #44]	; (2600 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    25d2:	2381      	movs	r3, #129	; 0x81
    25d4:	f006 fca9 	bl	8f2a <assert_print>
    25d8:	4809      	ldr	r0, [pc, #36]	; (2600 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    25da:	2181      	movs	r1, #129	; 0x81
    25dc:	f006 fc9e 	bl	8f1c <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    25e0:	464b      	mov	r3, r9
    25e2:	4622      	mov	r2, r4
    25e4:	4641      	mov	r1, r8
    25e6:	4658      	mov	r0, fp
    25e8:	f006 fcfe 	bl	8fe8 <z_log_msg2_finalize>
	}
}
    25ec:	370c      	adds	r7, #12
    25ee:	46bd      	mov	sp, r7
    25f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    25f4:	4635      	mov	r5, r6
    25f6:	e7c4      	b.n	2582 <z_impl_z_log_msg2_runtime_vcreate+0x42>
    25f8:	0000a7f6 	.word	0x0000a7f6
    25fc:	00009eb7 	.word	0x00009eb7
    2600:	0000a7c9 	.word	0x0000a7c9
    2604:	0007fe00 	.word	0x0007fe00
    2608:	7ff80000 	.word	0x7ff80000

0000260c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    260e:	4f07      	ldr	r7, [pc, #28]	; (262c <char_out+0x20>)
{
    2610:	460d      	mov	r5, r1
    2612:	4604      	mov	r4, r0
    2614:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2616:	42b4      	cmp	r4, r6
    2618:	d101      	bne.n	261e <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    261a:	4628      	mov	r0, r5
    261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    261e:	6838      	ldr	r0, [r7, #0]
    2620:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2624:	6883      	ldr	r3, [r0, #8]
    2626:	685b      	ldr	r3, [r3, #4]
    2628:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    262a:	e7f4      	b.n	2616 <char_out+0xa>
    262c:	20000570 	.word	0x20000570

00002630 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2630:	4b01      	ldr	r3, [pc, #4]	; (2638 <format_set+0x8>)
	return 0;
}
    2632:	2000      	movs	r0, #0
	log_format_current = log_type;
    2634:	6019      	str	r1, [r3, #0]
}
    2636:	4770      	bx	lr
    2638:	20000560 	.word	0x20000560

0000263c <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    263c:	4b02      	ldr	r3, [pc, #8]	; (2648 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    263e:	4803      	ldr	r0, [pc, #12]	; (264c <panic+0x10>)
    2640:	2201      	movs	r2, #1
    2642:	701a      	strb	r2, [r3, #0]
    2644:	f006 bcc3 	b.w	8fce <log_output_flush>
    2648:	20000e7a 	.word	0x20000e7a
    264c:	00009bf4 	.word	0x00009bf4

00002650 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2650:	4b06      	ldr	r3, [pc, #24]	; (266c <process+0x1c>)
{
    2652:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2654:	6818      	ldr	r0, [r3, #0]
{
    2656:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2658:	f7ff fcbc 	bl	1fd4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    265c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    265e:	4603      	mov	r3, r0
}
    2660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    2664:	4802      	ldr	r0, [pc, #8]	; (2670 <process+0x20>)
    2666:	220f      	movs	r2, #15
    2668:	4718      	bx	r3
    266a:	bf00      	nop
    266c:	20000560 	.word	0x20000560
    2670:	00009bf4 	.word	0x00009bf4

00002674 <log_backend_uart_init>:
{
    2674:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2676:	4b09      	ldr	r3, [pc, #36]	; (269c <log_backend_uart_init+0x28>)
    2678:	4809      	ldr	r0, [pc, #36]	; (26a0 <log_backend_uart_init+0x2c>)
    267a:	6018      	str	r0, [r3, #0]
    267c:	f007 f82b 	bl	96d6 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2680:	b958      	cbnz	r0, 269a <log_backend_uart_init+0x26>
    2682:	4908      	ldr	r1, [pc, #32]	; (26a4 <log_backend_uart_init+0x30>)
    2684:	4808      	ldr	r0, [pc, #32]	; (26a8 <log_backend_uart_init+0x34>)
    2686:	4a09      	ldr	r2, [pc, #36]	; (26ac <log_backend_uart_init+0x38>)
    2688:	2379      	movs	r3, #121	; 0x79
    268a:	f006 fc4e 	bl	8f2a <assert_print>
}
    268e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2692:	4806      	ldr	r0, [pc, #24]	; (26ac <log_backend_uart_init+0x38>)
    2694:	2179      	movs	r1, #121	; 0x79
    2696:	f006 bc41 	b.w	8f1c <assert_post_action>
}
    269a:	bd08      	pop	{r3, pc}
    269c:	20000570 	.word	0x20000570
    26a0:	00009918 	.word	0x00009918
    26a4:	0000a835 	.word	0x0000a835
    26a8:	00009eb7 	.word	0x00009eb7
    26ac:	0000a800 	.word	0x0000a800

000026b0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    26b0:	4b01      	ldr	r3, [pc, #4]	; (26b8 <log_backend_rtt_init+0x8>)
    26b2:	2201      	movs	r2, #1
    26b4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    26b6:	4770      	bx	lr
    26b8:	20000e7d 	.word	0x20000e7d

000026bc <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    26bc:	4b01      	ldr	r3, [pc, #4]	; (26c4 <format_set+0x8>)
	return 0;
}
    26be:	2000      	movs	r0, #0
	log_format_current = log_type;
    26c0:	6019      	str	r1, [r3, #0]
}
    26c2:	4770      	bx	lr
    26c4:	2000057c 	.word	0x2000057c

000026c8 <panic>:
	panic_mode = true;
    26c8:	4b02      	ldr	r3, [pc, #8]	; (26d4 <panic+0xc>)
    26ca:	4803      	ldr	r0, [pc, #12]	; (26d8 <panic+0x10>)
    26cc:	2201      	movs	r2, #1
    26ce:	701a      	strb	r2, [r3, #0]
    26d0:	f006 bc7d 	b.w	8fce <log_output_flush>
    26d4:	20000e7e 	.word	0x20000e7e
    26d8:	00009c24 	.word	0x00009c24

000026dc <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26dc:	4b06      	ldr	r3, [pc, #24]	; (26f8 <process+0x1c>)
{
    26de:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26e0:	6818      	ldr	r0, [r3, #0]
{
    26e2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26e4:	f7ff fc76 	bl	1fd4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    26e8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26ea:	4603      	mov	r3, r0
}
    26ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    26f0:	4802      	ldr	r0, [pc, #8]	; (26fc <process+0x20>)
    26f2:	220f      	movs	r2, #15
    26f4:	4718      	bx	r3
    26f6:	bf00      	nop
    26f8:	2000057c 	.word	0x2000057c
    26fc:	00009c24 	.word	0x00009c24

00002700 <data_out_block_mode>:
{
    2700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2702:	4d19      	ldr	r5, [pc, #100]	; (2768 <data_out_block_mode+0x68>)
    2704:	4607      	mov	r7, r0
    2706:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2708:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    270a:	4632      	mov	r2, r6
    270c:	4639      	mov	r1, r7
    270e:	2000      	movs	r0, #0
    2710:	f003 fae6 	bl	5ce0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2714:	b1c8      	cbz	r0, 274a <data_out_block_mode+0x4a>
	host_present = true;
    2716:	2301      	movs	r3, #1
    2718:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    271a:	4b14      	ldr	r3, [pc, #80]	; (276c <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    271c:	781b      	ldrb	r3, [r3, #0]
    271e:	b92b      	cbnz	r3, 272c <data_out_block_mode+0x2c>
}
    2720:	4630      	mov	r0, r6
    2722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    2724:	b95c      	cbnz	r4, 273e <data_out_block_mode+0x3e>
		host_present = false;
    2726:	702c      	strb	r4, [r5, #0]
    2728:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    272c:	2000      	movs	r0, #0
    272e:	f003 fb25 	bl	5d7c <SEGGER_RTT_HasDataUp>
    2732:	2800      	cmp	r0, #0
    2734:	d0f4      	beq.n	2720 <data_out_block_mode+0x20>
    2736:	782b      	ldrb	r3, [r5, #0]
    2738:	2b00      	cmp	r3, #0
    273a:	d1f3      	bne.n	2724 <data_out_block_mode+0x24>
    273c:	e7f0      	b.n	2720 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    273e:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2740:	f241 3088 	movw	r0, #5000	; 0x1388
    2744:	f007 f84d 	bl	97e2 <z_impl_k_busy_wait>
}
    2748:	e7f0      	b.n	272c <data_out_block_mode+0x2c>
		} else if (host_present) {
    274a:	782b      	ldrb	r3, [r5, #0]
    274c:	b113      	cbz	r3, 2754 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    274e:	3c01      	subs	r4, #1
    2750:	d104      	bne.n	275c <data_out_block_mode+0x5c>
		host_present = false;
    2752:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2754:	782b      	ldrb	r3, [r5, #0]
    2756:	2b00      	cmp	r3, #0
    2758:	d1d7      	bne.n	270a <data_out_block_mode+0xa>
    275a:	e7e1      	b.n	2720 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    275c:	f241 3088 	movw	r0, #5000	; 0x1388
    2760:	f007 f83f 	bl	97e2 <z_impl_k_busy_wait>
}
    2764:	e7f6      	b.n	2754 <data_out_block_mode+0x54>
    2766:	bf00      	nop
    2768:	20000e7d 	.word	0x20000e7d
    276c:	20000e7e 	.word	0x20000e7e

00002770 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2774:	4605      	mov	r5, r0
    2776:	f04f 0340 	mov.w	r3, #64	; 0x40
    277a:	f3ef 8611 	mrs	r6, BASEPRI
    277e:	f383 8812 	msr	BASEPRI_MAX, r3
    2782:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2786:	4822      	ldr	r0, [pc, #136]	; (2810 <pm_state_notify+0xa0>)
    2788:	f003 feda 	bl	6540 <z_spin_lock_valid>
    278c:	b968      	cbnz	r0, 27aa <pm_state_notify+0x3a>
    278e:	4a21      	ldr	r2, [pc, #132]	; (2814 <pm_state_notify+0xa4>)
    2790:	4921      	ldr	r1, [pc, #132]	; (2818 <pm_state_notify+0xa8>)
    2792:	4822      	ldr	r0, [pc, #136]	; (281c <pm_state_notify+0xac>)
    2794:	238e      	movs	r3, #142	; 0x8e
    2796:	f006 fbc8 	bl	8f2a <assert_print>
    279a:	491d      	ldr	r1, [pc, #116]	; (2810 <pm_state_notify+0xa0>)
    279c:	4820      	ldr	r0, [pc, #128]	; (2820 <pm_state_notify+0xb0>)
    279e:	f006 fbc4 	bl	8f2a <assert_print>
    27a2:	481c      	ldr	r0, [pc, #112]	; (2814 <pm_state_notify+0xa4>)
    27a4:	218e      	movs	r1, #142	; 0x8e
    27a6:	f006 fbb9 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    27aa:	4819      	ldr	r0, [pc, #100]	; (2810 <pm_state_notify+0xa0>)
    27ac:	f003 fee6 	bl	657c <z_spin_lock_set_owner>
	return list->head;
    27b0:	4b1c      	ldr	r3, [pc, #112]	; (2824 <pm_state_notify+0xb4>)
    27b2:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    27b4:	b19c      	cbz	r4, 27de <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    27b6:	4f1c      	ldr	r7, [pc, #112]	; (2828 <pm_state_notify+0xb8>)
    27b8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 282c <pm_state_notify+0xbc>
    27bc:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    27c0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    27c4:	2d00      	cmp	r5, #0
    27c6:	bf08      	it	eq
    27c8:	4613      	moveq	r3, r2
		if (callback) {
    27ca:	b12b      	cbz	r3, 27d8 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    27cc:	f898 2014 	ldrb.w	r2, [r8, #20]
    27d0:	fb09 f202 	mul.w	r2, r9, r2
    27d4:	5cb8      	ldrb	r0, [r7, r2]
    27d6:	4798      	blx	r3
	return node->next;
    27d8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    27da:	2c00      	cmp	r4, #0
    27dc:	d1f0      	bne.n	27c0 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27de:	480c      	ldr	r0, [pc, #48]	; (2810 <pm_state_notify+0xa0>)
    27e0:	f003 febc 	bl	655c <z_spin_unlock_valid>
    27e4:	b968      	cbnz	r0, 2802 <pm_state_notify+0x92>
    27e6:	4a0b      	ldr	r2, [pc, #44]	; (2814 <pm_state_notify+0xa4>)
    27e8:	4911      	ldr	r1, [pc, #68]	; (2830 <pm_state_notify+0xc0>)
    27ea:	480c      	ldr	r0, [pc, #48]	; (281c <pm_state_notify+0xac>)
    27ec:	23b9      	movs	r3, #185	; 0xb9
    27ee:	f006 fb9c 	bl	8f2a <assert_print>
    27f2:	4907      	ldr	r1, [pc, #28]	; (2810 <pm_state_notify+0xa0>)
    27f4:	480f      	ldr	r0, [pc, #60]	; (2834 <pm_state_notify+0xc4>)
    27f6:	f006 fb98 	bl	8f2a <assert_print>
    27fa:	4806      	ldr	r0, [pc, #24]	; (2814 <pm_state_notify+0xa4>)
    27fc:	21b9      	movs	r1, #185	; 0xb9
    27fe:	f006 fb8d 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    2802:	f386 8811 	msr	BASEPRI, r6
    2806:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    280e:	bf00      	nop
    2810:	2000058c 	.word	0x2000058c
    2814:	0000a38e 	.word	0x0000a38e
    2818:	0000a3e7 	.word	0x0000a3e7
    281c:	00009eb7 	.word	0x00009eb7
    2820:	0000a3fc 	.word	0x0000a3fc
    2824:	20000590 	.word	0x20000590
    2828:	20000598 	.word	0x20000598
    282c:	20000c3c 	.word	0x20000c3c
    2830:	0000a3bb 	.word	0x0000a3bb
    2834:	0000a3d2 	.word	0x0000a3d2

00002838 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2838:	0941      	lsrs	r1, r0, #5
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    283a:	4a0a      	ldr	r2, [pc, #40]	; (2864 <atomic_clear_bit.constprop.0+0x2c>)
    283c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2840:	f000 001f 	and.w	r0, r0, #31
    2844:	2301      	movs	r3, #1
    2846:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2848:	43db      	mvns	r3, r3
    284a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    284e:	e852 0f00 	ldrex	r0, [r2]
    2852:	4018      	ands	r0, r3
    2854:	e842 0100 	strex	r1, r0, [r2]
    2858:	2900      	cmp	r1, #0
    285a:	d1f8      	bne.n	284e <atomic_clear_bit.constprop.0+0x16>
    285c:	f3bf 8f5b 	dmb	ish
}
    2860:	4770      	bx	lr
    2862:	bf00      	nop
    2864:	200005a4 	.word	0x200005a4

00002868 <pm_system_resume>:

void pm_system_resume(void)
{
    2868:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    286a:	4b19      	ldr	r3, [pc, #100]	; (28d0 <pm_system_resume+0x68>)
    286c:	7d1c      	ldrb	r4, [r3, #20]
    286e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2872:	f004 031f 	and.w	r3, r4, #31
    2876:	2201      	movs	r2, #1
    2878:	409a      	lsls	r2, r3
    287a:	4b16      	ldr	r3, [pc, #88]	; (28d4 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    287c:	0961      	lsrs	r1, r4, #5
    287e:	43d0      	mvns	r0, r2
    2880:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2884:	e853 1f00 	ldrex	r1, [r3]
    2888:	ea01 0500 	and.w	r5, r1, r0
    288c:	e843 5600 	strex	r6, r5, [r3]
    2890:	2e00      	cmp	r6, #0
    2892:	d1f7      	bne.n	2884 <pm_system_resume+0x1c>
    2894:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2898:	4211      	tst	r1, r2
    289a:	d013      	beq.n	28c4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    289c:	4b0e      	ldr	r3, [pc, #56]	; (28d8 <pm_system_resume+0x70>)
    289e:	4d0f      	ldr	r5, [pc, #60]	; (28dc <pm_system_resume+0x74>)
    28a0:	b18b      	cbz	r3, 28c6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    28a2:	230c      	movs	r3, #12
    28a4:	4363      	muls	r3, r4
    28a6:	18ea      	adds	r2, r5, r3
    28a8:	5ce8      	ldrb	r0, [r5, r3]
    28aa:	7851      	ldrb	r1, [r2, #1]
    28ac:	f006 fc42 	bl	9134 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    28b0:	2000      	movs	r0, #0
    28b2:	f7ff ff5d 	bl	2770 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    28b6:	230c      	movs	r3, #12
    28b8:	435c      	muls	r4, r3
    28ba:	192a      	adds	r2, r5, r4
    28bc:	2300      	movs	r3, #0
    28be:	512b      	str	r3, [r5, r4]
    28c0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    28c4:	bd70      	pop	{r4, r5, r6, pc}
    28c6:	f383 8811 	msr	BASEPRI, r3
    28ca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    28ce:	e7ef      	b.n	28b0 <pm_system_resume+0x48>
    28d0:	20000c3c 	.word	0x20000c3c
    28d4:	200005a8 	.word	0x200005a8
    28d8:	00009135 	.word	0x00009135
    28dc:	20000598 	.word	0x20000598

000028e0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    28e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    28e4:	4b31      	ldr	r3, [pc, #196]	; (29ac <pm_system_suspend+0xcc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28e6:	4a32      	ldr	r2, [pc, #200]	; (29b0 <pm_system_suspend+0xd0>)
    28e8:	7d1c      	ldrb	r4, [r3, #20]
    28ea:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    28ee:	0963      	lsrs	r3, r4, #5
    28f0:	ea4f 0983 	mov.w	r9, r3, lsl #2
    28f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    28f8:	4e2e      	ldr	r6, [pc, #184]	; (29b4 <pm_system_suspend+0xd4>)
    28fa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    28fe:	f004 081f 	and.w	r8, r4, #31
    2902:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2906:	f013 0f01 	tst.w	r3, #1
{
    290a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    290c:	d10a      	bne.n	2924 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    290e:	4601      	mov	r1, r0
    2910:	4620      	mov	r0, r4
    2912:	f000 f867 	bl	29e4 <pm_policy_next_state>
		if (info != NULL) {
    2916:	b128      	cbz	r0, 2924 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2918:	c807      	ldmia	r0, {r0, r1, r2}
    291a:	230c      	movs	r3, #12
    291c:	fb03 6304 	mla	r3, r3, r4, r6
    2920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2924:	230c      	movs	r3, #12
    2926:	4363      	muls	r3, r4
    2928:	18f2      	adds	r2, r6, r3
    292a:	5cf5      	ldrb	r5, [r6, r3]
    292c:	b92d      	cbnz	r5, 293a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    292e:	4620      	mov	r0, r4
    2930:	f7ff ff82 	bl	2838 <atomic_clear_bit.constprop.0>
		ret = false;
    2934:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    293a:	1c7b      	adds	r3, r7, #1
    293c:	d00f      	beq.n	295e <pm_system_suspend+0x7e>
			return (uint32_t)((t * to_hz + off) / from_hz);
    293e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2942:	481d      	ldr	r0, [pc, #116]	; (29b8 <pm_system_suspend+0xd8>)
    2944:	4a1d      	ldr	r2, [pc, #116]	; (29bc <pm_system_suspend+0xdc>)
    2946:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    294a:	2100      	movs	r1, #0
    294c:	2300      	movs	r3, #0
    294e:	fbec 0105 	umlal	r0, r1, ip, r5
    2952:	f7fd fe07 	bl	564 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2956:	2101      	movs	r1, #1
    2958:	1a38      	subs	r0, r7, r0
    295a:	f005 fbd7 	bl	810c <z_set_timeout_expiry>
	k_sched_lock();
    295e:	f004 f9d3 	bl	6d08 <k_sched_lock>
	pm_state_notify(true);
    2962:	2001      	movs	r0, #1
    2964:	f7ff ff04 	bl	2770 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2968:	f3bf 8f5b 	dmb	ish
    296c:	4b14      	ldr	r3, [pc, #80]	; (29c0 <pm_system_suspend+0xe0>)
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    296e:	2201      	movs	r2, #1
    2970:	fa02 f208 	lsl.w	r2, r2, r8
    2974:	444b      	add	r3, r9
    2976:	e853 0f00 	ldrex	r0, [r3]
    297a:	4310      	orrs	r0, r2
    297c:	e843 0100 	strex	r1, r0, [r3]
    2980:	2900      	cmp	r1, #0
    2982:	d1f8      	bne.n	2976 <pm_system_suspend+0x96>
    2984:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2988:	4b0e      	ldr	r3, [pc, #56]	; (29c4 <pm_system_suspend+0xe4>)
    298a:	b133      	cbz	r3, 299a <pm_system_suspend+0xba>
		pm_state_set(info->state, info->substate_id);
    298c:	230c      	movs	r3, #12
    298e:	4363      	muls	r3, r4
    2990:	18f2      	adds	r2, r6, r3
    2992:	5cf0      	ldrb	r0, [r6, r3]
    2994:	7851      	ldrb	r1, [r2, #1]
    2996:	f006 fbc1 	bl	911c <pm_state_set>
	pm_system_resume();
    299a:	f7ff ff65 	bl	2868 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    299e:	4620      	mov	r0, r4
    29a0:	f7ff ff4a 	bl	2838 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    29a4:	f004 fe94 	bl	76d0 <k_sched_unlock>
	bool ret = true;
    29a8:	2001      	movs	r0, #1
    29aa:	e7c4      	b.n	2936 <pm_system_suspend+0x56>
    29ac:	20000c3c 	.word	0x20000c3c
    29b0:	200005a4 	.word	0x200005a4
    29b4:	20000598 	.word	0x20000598
    29b8:	000f423f 	.word	0x000f423f
    29bc:	000f4240 	.word	0x000f4240
    29c0:	200005a8 	.word	0x200005a8
    29c4:	0000911d 	.word	0x0000911d

000029c8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    29c8:	4b05      	ldr	r3, [pc, #20]	; (29e0 <pm_policy_state_lock_is_active+0x18>)
    29ca:	f3bf 8f5b 	dmb	ish
    29ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    29d2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    29d6:	3800      	subs	r0, #0
    29d8:	bf18      	it	ne
    29da:	2001      	movne	r0, #1
    29dc:	4770      	bx	lr
    29de:	bf00      	nop
    29e0:	200005ac 	.word	0x200005ac

000029e4 <pm_policy_next_state>:
{
    29e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29e8:	b085      	sub	sp, #20
    29ea:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    29ec:	a903      	add	r1, sp, #12
    29ee:	f000 f847 	bl	2a80 <pm_state_cpu_get_all>
    29f2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2a74 <pm_policy_next_state+0x90>
    29f6:	f8df a080 	ldr.w	sl, [pc, #128]	; 2a78 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    29fa:	1e44      	subs	r4, r0, #1
    29fc:	b224      	sxth	r4, r4
    29fe:	f04f 0b00 	mov.w	fp, #0
    2a02:	1c63      	adds	r3, r4, #1
    2a04:	d104      	bne.n	2a10 <pm_policy_next_state+0x2c>
	return NULL;
    2a06:	2600      	movs	r6, #0
}
    2a08:	4630      	mov	r0, r6
    2a0a:	b005      	add	sp, #20
    2a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2a10:	9a03      	ldr	r2, [sp, #12]
    2a12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2a16:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2a1a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2a1e:	f7ff ffd3 	bl	29c8 <pm_policy_state_lock_is_active>
    2a22:	4605      	mov	r5, r0
    2a24:	bb10      	cbnz	r0, 2a6c <pm_policy_next_state+0x88>
    2a26:	6870      	ldr	r0, [r6, #4]
    2a28:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2a2c:	46c4      	mov	ip, r8
    2a2e:	4629      	mov	r1, r5
    2a30:	fbe0 c109 	umlal	ip, r1, r0, r9
    2a34:	4652      	mov	r2, sl
    2a36:	465b      	mov	r3, fp
    2a38:	4660      	mov	r0, ip
    2a3a:	f7fd fd93 	bl	564 <__aeabi_uldivmod>
    2a3e:	9001      	str	r0, [sp, #4]
    2a40:	68b0      	ldr	r0, [r6, #8]
    2a42:	46c4      	mov	ip, r8
    2a44:	4629      	mov	r1, r5
    2a46:	fbe0 c109 	umlal	ip, r1, r0, r9
    2a4a:	465b      	mov	r3, fp
    2a4c:	4652      	mov	r2, sl
    2a4e:	4660      	mov	r0, ip
    2a50:	f7fd fd88 	bl	564 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2a54:	4b09      	ldr	r3, [pc, #36]	; (2a7c <pm_policy_next_state+0x98>)
    2a56:	681b      	ldr	r3, [r3, #0]
    2a58:	1c59      	adds	r1, r3, #1
    2a5a:	d001      	beq.n	2a60 <pm_policy_next_state+0x7c>
    2a5c:	4283      	cmp	r3, r0
    2a5e:	d905      	bls.n	2a6c <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2a60:	1c7a      	adds	r2, r7, #1
    2a62:	d0d1      	beq.n	2a08 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2a64:	9b01      	ldr	r3, [sp, #4]
    2a66:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2a68:	42b8      	cmp	r0, r7
    2a6a:	d9cd      	bls.n	2a08 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a6c:	3c01      	subs	r4, #1
    2a6e:	b224      	sxth	r4, r4
    2a70:	e7c7      	b.n	2a02 <pm_policy_next_state+0x1e>
    2a72:	bf00      	nop
    2a74:	000f423f 	.word	0x000f423f
    2a78:	000f4240 	.word	0x000f4240
    2a7c:	200000a0 	.word	0x200000a0

00002a80 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2a80:	b908      	cbnz	r0, 2a86 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2a82:	4b02      	ldr	r3, [pc, #8]	; (2a8c <pm_state_cpu_get_all+0xc>)
    2a84:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2a86:	2000      	movs	r0, #0
    2a88:	4770      	bx	lr
    2a8a:	bf00      	nop
    2a8c:	00009c34 	.word	0x00009c34

00002a90 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2a90:	4801      	ldr	r0, [pc, #4]	; (2a98 <nrf_cc3xx_platform_abort_init+0x8>)
    2a92:	f005 bf7f 	b.w	8994 <nrf_cc3xx_platform_set_abort>
    2a96:	bf00      	nop
    2a98:	00009c34 	.word	0x00009c34

00002a9c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a9c:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2a9e:	4604      	mov	r4, r0
    2aa0:	b918      	cbnz	r0, 2aaa <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2aa2:	4b0d      	ldr	r3, [pc, #52]	; (2ad8 <mutex_free_platform+0x3c>)
    2aa4:	480d      	ldr	r0, [pc, #52]	; (2adc <mutex_free_platform+0x40>)
    2aa6:	685b      	ldr	r3, [r3, #4]
    2aa8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2aaa:	6861      	ldr	r1, [r4, #4]
    2aac:	2908      	cmp	r1, #8
    2aae:	d00d      	beq.n	2acc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ab0:	f031 0304 	bics.w	r3, r1, #4
    2ab4:	d00a      	beq.n	2acc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2ab6:	f011 0102 	ands.w	r1, r1, #2
    2aba:	d008      	beq.n	2ace <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2abc:	4808      	ldr	r0, [pc, #32]	; (2ae0 <mutex_free_platform+0x44>)
    2abe:	4621      	mov	r1, r4
    2ac0:	f003 fb9e 	bl	6200 <k_mem_slab_free>
        mutex->mutex = NULL;
    2ac4:	2300      	movs	r3, #0
    2ac6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2ac8:	2300      	movs	r3, #0
    2aca:	6063      	str	r3, [r4, #4]
}
    2acc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2ace:	6820      	ldr	r0, [r4, #0]
    2ad0:	2214      	movs	r2, #20
    2ad2:	f006 fb17 	bl	9104 <memset>
    2ad6:	e7f7      	b.n	2ac8 <mutex_free_platform+0x2c>
    2ad8:	2000017c 	.word	0x2000017c
    2adc:	0000a87c 	.word	0x0000a87c
    2ae0:	200005c8 	.word	0x200005c8

00002ae4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ae4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ae6:	b308      	cbz	r0, 2b2c <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2ae8:	6843      	ldr	r3, [r0, #4]
    2aea:	2b04      	cmp	r3, #4
    2aec:	d110      	bne.n	2b10 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2aee:	2201      	movs	r2, #1
    2af0:	6803      	ldr	r3, [r0, #0]
    2af2:	f3bf 8f5b 	dmb	ish
    2af6:	e853 1f00 	ldrex	r1, [r3]
    2afa:	2900      	cmp	r1, #0
    2afc:	d103      	bne.n	2b06 <mutex_lock_platform+0x22>
    2afe:	e843 2000 	strex	r0, r2, [r3]
    2b02:	2800      	cmp	r0, #0
    2b04:	d1f7      	bne.n	2af6 <mutex_lock_platform+0x12>
    2b06:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b0a:	d10b      	bne.n	2b24 <mutex_lock_platform+0x40>
    2b0c:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2b0e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b10:	b153      	cbz	r3, 2b28 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2b12:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b1c:	f003 fd68 	bl	65f0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2b20:	2800      	cmp	r0, #0
    2b22:	d0f3      	beq.n	2b0c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b24:	4803      	ldr	r0, [pc, #12]	; (2b34 <mutex_lock_platform+0x50>)
    2b26:	e7f2      	b.n	2b0e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b28:	4803      	ldr	r0, [pc, #12]	; (2b38 <mutex_lock_platform+0x54>)
    2b2a:	e7f0      	b.n	2b0e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2b2c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2b30:	e7ed      	b.n	2b0e <mutex_lock_platform+0x2a>
    2b32:	bf00      	nop
    2b34:	ffff8fe9 	.word	0xffff8fe9
    2b38:	ffff8fea 	.word	0xffff8fea

00002b3c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b3c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2b3e:	b1d0      	cbz	r0, 2b76 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2b40:	6843      	ldr	r3, [r0, #4]
    2b42:	2b04      	cmp	r3, #4
    2b44:	d111      	bne.n	2b6a <mutex_unlock_platform+0x2e>
    2b46:	2200      	movs	r2, #0
    2b48:	6803      	ldr	r3, [r0, #0]
    2b4a:	f3bf 8f5b 	dmb	ish
    2b4e:	e853 1f00 	ldrex	r1, [r3]
    2b52:	2901      	cmp	r1, #1
    2b54:	d103      	bne.n	2b5e <mutex_unlock_platform+0x22>
    2b56:	e843 2000 	strex	r0, r2, [r3]
    2b5a:	2800      	cmp	r0, #0
    2b5c:	d1f7      	bne.n	2b4e <mutex_unlock_platform+0x12>
    2b5e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b62:	4807      	ldr	r0, [pc, #28]	; (2b80 <mutex_unlock_platform+0x44>)
    2b64:	bf08      	it	eq
    2b66:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2b68:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b6a:	b13b      	cbz	r3, 2b7c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2b6c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2b6e:	f003 fe39 	bl	67e4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2b72:	2000      	movs	r0, #0
    2b74:	e7f8      	b.n	2b68 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2b76:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2b7a:	e7f5      	b.n	2b68 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b7c:	4801      	ldr	r0, [pc, #4]	; (2b84 <mutex_unlock_platform+0x48>)
    2b7e:	e7f3      	b.n	2b68 <mutex_unlock_platform+0x2c>
    2b80:	ffff8fe9 	.word	0xffff8fe9
    2b84:	ffff8fea 	.word	0xffff8fea

00002b88 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b88:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2b8a:	4604      	mov	r4, r0
    2b8c:	b918      	cbnz	r0, 2b96 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2b8e:	4b16      	ldr	r3, [pc, #88]	; (2be8 <mutex_init_platform+0x60>)
    2b90:	4816      	ldr	r0, [pc, #88]	; (2bec <mutex_init_platform+0x64>)
    2b92:	685b      	ldr	r3, [r3, #4]
    2b94:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2b96:	6863      	ldr	r3, [r4, #4]
    2b98:	2b04      	cmp	r3, #4
    2b9a:	d023      	beq.n	2be4 <mutex_init_platform+0x5c>
    2b9c:	2b08      	cmp	r3, #8
    2b9e:	d021      	beq.n	2be4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2ba0:	b9cb      	cbnz	r3, 2bd6 <mutex_init_platform+0x4e>
    2ba2:	6823      	ldr	r3, [r4, #0]
    2ba4:	b9bb      	cbnz	r3, 2bd6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2ba6:	4812      	ldr	r0, [pc, #72]	; (2bf0 <mutex_init_platform+0x68>)
    2ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2bb0:	4621      	mov	r1, r4
    2bb2:	f003 fab9 	bl	6128 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2bb6:	b908      	cbnz	r0, 2bbc <mutex_init_platform+0x34>
    2bb8:	6823      	ldr	r3, [r4, #0]
    2bba:	b91b      	cbnz	r3, 2bc4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2bbc:	4b0a      	ldr	r3, [pc, #40]	; (2be8 <mutex_init_platform+0x60>)
    2bbe:	480d      	ldr	r0, [pc, #52]	; (2bf4 <mutex_init_platform+0x6c>)
    2bc0:	685b      	ldr	r3, [r3, #4]
    2bc2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2bc4:	6820      	ldr	r0, [r4, #0]
    2bc6:	2214      	movs	r2, #20
    2bc8:	2100      	movs	r1, #0
    2bca:	f006 fa9b 	bl	9104 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2bce:	6863      	ldr	r3, [r4, #4]
    2bd0:	f043 0302 	orr.w	r3, r3, #2
    2bd4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2bd6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2bd8:	f006 fdce 	bl	9778 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2bdc:	6863      	ldr	r3, [r4, #4]
    2bde:	f043 0301 	orr.w	r3, r3, #1
    2be2:	6063      	str	r3, [r4, #4]
}
    2be4:	bd10      	pop	{r4, pc}
    2be6:	bf00      	nop
    2be8:	2000017c 	.word	0x2000017c
    2bec:	0000a87c 	.word	0x0000a87c
    2bf0:	200005c8 	.word	0x200005c8
    2bf4:	0000a8a2 	.word	0x0000a8a2

00002bf8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2bf8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2bfa:	4906      	ldr	r1, [pc, #24]	; (2c14 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2bfc:	4806      	ldr	r0, [pc, #24]	; (2c18 <nrf_cc3xx_platform_mutex_init+0x20>)
    2bfe:	2340      	movs	r3, #64	; 0x40
    2c00:	2214      	movs	r2, #20
    2c02:	f006 fd86 	bl	9712 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2c0a:	4904      	ldr	r1, [pc, #16]	; (2c1c <nrf_cc3xx_platform_mutex_init+0x24>)
    2c0c:	4804      	ldr	r0, [pc, #16]	; (2c20 <nrf_cc3xx_platform_mutex_init+0x28>)
    2c0e:	f005 bf21 	b.w	8a54 <nrf_cc3xx_platform_set_mutexes>
    2c12:	bf00      	nop
    2c14:	200005e8 	.word	0x200005e8
    2c18:	200005c8 	.word	0x200005c8
    2c1c:	00009c4c 	.word	0x00009c4c
    2c20:	00009c3c 	.word	0x00009c3c

00002c24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2c24:	4901      	ldr	r1, [pc, #4]	; (2c2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2c26:	2210      	movs	r2, #16
	str	r2, [r1]
    2c28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2c2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2c2c:	e000ed10 	.word	0xe000ed10

00002c30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2c30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2c32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2c34:	f380 8811 	msr	BASEPRI, r0
	isb
    2c38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2c3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2c40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2c42:	b662      	cpsie	i
	isb
    2c44:	f3bf 8f6f 	isb	sy

	bx	lr
    2c48:	4770      	bx	lr
    2c4a:	bf00      	nop

00002c4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2c4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2c4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2c50:	f381 8811 	msr	BASEPRI, r1

	wfe
    2c54:	bf20      	wfe

	msr	BASEPRI, r0
    2c56:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2c5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop

00002c60 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2c60:	b570      	push	{r4, r5, r6, lr}
    2c62:	4606      	mov	r6, r0
    2c64:	b086      	sub	sp, #24

	if (esf != NULL) {
    2c66:	460d      	mov	r5, r1
    2c68:	2900      	cmp	r1, #0
    2c6a:	d038      	beq.n	2cde <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2c6c:	688b      	ldr	r3, [r1, #8]
    2c6e:	9305      	str	r3, [sp, #20]
    2c70:	684b      	ldr	r3, [r1, #4]
    2c72:	9304      	str	r3, [sp, #16]
    2c74:	680b      	ldr	r3, [r1, #0]
    2c76:	9303      	str	r3, [sp, #12]
    2c78:	2400      	movs	r4, #0
    2c7a:	4b1c      	ldr	r3, [pc, #112]	; (2cec <z_arm_fatal_error+0x8c>)
    2c7c:	491c      	ldr	r1, [pc, #112]	; (2cf0 <z_arm_fatal_error+0x90>)
    2c7e:	9302      	str	r3, [sp, #8]
    2c80:	2201      	movs	r2, #1
    2c82:	4623      	mov	r3, r4
    2c84:	4620      	mov	r0, r4
    2c86:	e9cd 4400 	strd	r4, r4, [sp]
    2c8a:	f006 f9cb 	bl	9024 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c8e:	696b      	ldr	r3, [r5, #20]
    2c90:	9305      	str	r3, [sp, #20]
    2c92:	692b      	ldr	r3, [r5, #16]
    2c94:	9304      	str	r3, [sp, #16]
    2c96:	68eb      	ldr	r3, [r5, #12]
    2c98:	9303      	str	r3, [sp, #12]
    2c9a:	4b16      	ldr	r3, [pc, #88]	; (2cf4 <z_arm_fatal_error+0x94>)
    2c9c:	4914      	ldr	r1, [pc, #80]	; (2cf0 <z_arm_fatal_error+0x90>)
    2c9e:	9400      	str	r4, [sp, #0]
    2ca0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2ca4:	2201      	movs	r2, #1
    2ca6:	4623      	mov	r3, r4
    2ca8:	4620      	mov	r0, r4
    2caa:	f006 f9bb 	bl	9024 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2cae:	69eb      	ldr	r3, [r5, #28]
    2cb0:	9303      	str	r3, [sp, #12]
    2cb2:	4b11      	ldr	r3, [pc, #68]	; (2cf8 <z_arm_fatal_error+0x98>)
    2cb4:	490e      	ldr	r1, [pc, #56]	; (2cf0 <z_arm_fatal_error+0x90>)
    2cb6:	9400      	str	r4, [sp, #0]
    2cb8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2cbc:	2201      	movs	r2, #1
    2cbe:	4623      	mov	r3, r4
    2cc0:	4620      	mov	r0, r4
    2cc2:	f006 f9af 	bl	9024 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2cc6:	69ab      	ldr	r3, [r5, #24]
    2cc8:	9303      	str	r3, [sp, #12]
    2cca:	4b0c      	ldr	r3, [pc, #48]	; (2cfc <z_arm_fatal_error+0x9c>)
    2ccc:	4908      	ldr	r1, [pc, #32]	; (2cf0 <z_arm_fatal_error+0x90>)
    2cce:	9400      	str	r4, [sp, #0]
    2cd0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2cd4:	2201      	movs	r2, #1
    2cd6:	4623      	mov	r3, r4
    2cd8:	4620      	mov	r0, r4
    2cda:	f006 f9a3 	bl	9024 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2cde:	4629      	mov	r1, r5
    2ce0:	4630      	mov	r0, r6
}
    2ce2:	b006      	add	sp, #24
    2ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2ce8:	f003 b89c 	b.w	5e24 <z_fatal_error>
    2cec:	0000a8cf 	.word	0x0000a8cf
    2cf0:	00009af8 	.word	0x00009af8
    2cf4:	0000a8fe 	.word	0x0000a8fe
    2cf8:	0000a92d 	.word	0x0000a92d
    2cfc:	0000a93c 	.word	0x0000a93c

00002d00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2d00:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2d02:	2b00      	cmp	r3, #0
    2d04:	db07      	blt.n	2d16 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d06:	4904      	ldr	r1, [pc, #16]	; (2d18 <arch_irq_enable+0x18>)
    2d08:	095b      	lsrs	r3, r3, #5
    2d0a:	f000 001f 	and.w	r0, r0, #31
    2d0e:	2201      	movs	r2, #1
    2d10:	4082      	lsls	r2, r0
    2d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2d16:	4770      	bx	lr
    2d18:	e000e100 	.word	0xe000e100

00002d1c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2d1c:	4b05      	ldr	r3, [pc, #20]	; (2d34 <arch_irq_is_enabled+0x18>)
    2d1e:	0942      	lsrs	r2, r0, #5
    2d20:	f000 001f 	and.w	r0, r0, #31
    2d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2d28:	2301      	movs	r3, #1
    2d2a:	fa03 f000 	lsl.w	r0, r3, r0
}
    2d2e:	4010      	ands	r0, r2
    2d30:	4770      	bx	lr
    2d32:	bf00      	nop
    2d34:	e000e100 	.word	0xe000e100

00002d38 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2d38:	07d3      	lsls	r3, r2, #31
{
    2d3a:	b570      	push	{r4, r5, r6, lr}
    2d3c:	4605      	mov	r5, r0
    2d3e:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2d40:	d425      	bmi.n	2d8e <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2d42:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2d44:	2c07      	cmp	r4, #7
    2d46:	d90f      	bls.n	2d68 <z_arm_irq_priority_set+0x30>
    2d48:	4a12      	ldr	r2, [pc, #72]	; (2d94 <z_arm_irq_priority_set+0x5c>)
    2d4a:	4913      	ldr	r1, [pc, #76]	; (2d98 <z_arm_irq_priority_set+0x60>)
    2d4c:	4813      	ldr	r0, [pc, #76]	; (2d9c <z_arm_irq_priority_set+0x64>)
    2d4e:	2357      	movs	r3, #87	; 0x57
    2d50:	f006 f8eb 	bl	8f2a <assert_print>
    2d54:	4812      	ldr	r0, [pc, #72]	; (2da0 <z_arm_irq_priority_set+0x68>)
    2d56:	4631      	mov	r1, r6
    2d58:	2306      	movs	r3, #6
    2d5a:	462a      	mov	r2, r5
    2d5c:	f006 f8e5 	bl	8f2a <assert_print>
    2d60:	480c      	ldr	r0, [pc, #48]	; (2d94 <z_arm_irq_priority_set+0x5c>)
    2d62:	2157      	movs	r1, #87	; 0x57
    2d64:	f006 f8da 	bl	8f1c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2d68:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2d6a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d6c:	bfac      	ite	ge
    2d6e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d72:	4b0c      	ldrlt	r3, [pc, #48]	; (2da4 <z_arm_irq_priority_set+0x6c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d74:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d78:	bfb8      	it	lt
    2d7a:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d7e:	b2e4      	uxtb	r4, r4
    2d80:	bfaa      	itet	ge
    2d82:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d86:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d88:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2d8c:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    2d8e:	2400      	movs	r4, #0
    2d90:	e7ea      	b.n	2d68 <z_arm_irq_priority_set+0x30>
    2d92:	bf00      	nop
    2d94:	0000a96a 	.word	0x0000a96a
    2d98:	0000a9a0 	.word	0x0000a9a0
    2d9c:	00009eb7 	.word	0x00009eb7
    2da0:	0000a9bb 	.word	0x0000a9bb
    2da4:	e000ed14 	.word	0xe000ed14

00002da8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2da8:	bf30      	wfi
    b z_SysNmiOnReset
    2daa:	f7ff bffd 	b.w	2da8 <z_SysNmiOnReset>
    2dae:	bf00      	nop

00002db0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2db0:	4a0b      	ldr	r2, [pc, #44]	; (2de0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2db2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2db4:	4b0b      	ldr	r3, [pc, #44]	; (2de4 <z_arm_prep_c+0x34>)
    2db6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2dba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2dc0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2dc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2dc8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2dd0:	f003 f8bc 	bl	5f4c <z_bss_zero>
	z_data_copy();
    2dd4:	f004 ffd8 	bl	7d88 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2dd8:	f000 fbe6 	bl	35a8 <z_arm_interrupt_init>
	z_cstart();
    2ddc:	f003 f8fa 	bl	5fd4 <z_cstart>
    2de0:	00000000 	.word	0x00000000
    2de4:	e000ed00 	.word	0xe000ed00

00002de8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2de8:	4a09      	ldr	r2, [pc, #36]	; (2e10 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2dea:	490a      	ldr	r1, [pc, #40]	; (2e14 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2dec:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2dee:	6809      	ldr	r1, [r1, #0]
    2df0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2df2:	4909      	ldr	r1, [pc, #36]	; (2e18 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2df4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2df6:	684b      	ldr	r3, [r1, #4]
    2df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2dfc:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2dfe:	2300      	movs	r3, #0
    2e00:	f383 8811 	msr	BASEPRI, r3
    2e04:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2e08:	6893      	ldr	r3, [r2, #8]
}
    2e0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2e0c:	4770      	bx	lr
    2e0e:	bf00      	nop
    2e10:	20000c3c 	.word	0x20000c3c
    2e14:	00009da0 	.word	0x00009da0
    2e18:	e000ed00 	.word	0xe000ed00

00002e1c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2e1c:	4912      	ldr	r1, [pc, #72]	; (2e68 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2e1e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2e20:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2e24:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2e26:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2e2a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2e2e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    2e30:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2e34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2e38:	4f0c      	ldr	r7, [pc, #48]	; (2e6c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2e3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2e3e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2e40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2e42:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2e44:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2e46:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2e48:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2e4a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2e4e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2e50:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2e52:	f000 fc45 	bl	36e0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2e56:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2e5a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2e5e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2e62:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2e66:	4770      	bx	lr
    ldr r1, =_kernel
    2e68:	20000c3c 	.word	0x20000c3c
    ldr v4, =_SCS_ICSR
    2e6c:	e000ed04 	.word	0xe000ed04

00002e70 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2e70:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2e74:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2e76:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2e7a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2e7e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2e80:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2e84:	2902      	cmp	r1, #2
    beq _oops
    2e86:	d0ff      	beq.n	2e88 <_oops>

00002e88 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e88:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2e8a:	f006 f8db 	bl	9044 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2e8e:	bd01      	pop	{r0, pc}

00002e90 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2e90:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e94:	9b00      	ldr	r3, [sp, #0]
    2e96:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2e9a:	490a      	ldr	r1, [pc, #40]	; (2ec4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2ea2:	9b02      	ldr	r3, [sp, #8]
    2ea4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2ea8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2eb0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2eb4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2eb8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2eba:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2ebc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2ebe:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2ec0:	4770      	bx	lr
    2ec2:	bf00      	nop
    2ec4:	00008df9 	.word	0x00008df9

00002ec8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2ec8:	4a09      	ldr	r2, [pc, #36]	; (2ef0 <z_check_thread_stack_fail+0x28>)
{
    2eca:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2ecc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2ece:	b170      	cbz	r0, 2eee <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2ed0:	f113 0f16 	cmn.w	r3, #22
    2ed4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2ed6:	d005      	beq.n	2ee4 <z_check_thread_stack_fail+0x1c>
    2ed8:	f1a0 0220 	sub.w	r2, r0, #32
    2edc:	429a      	cmp	r2, r3
    2ede:	d805      	bhi.n	2eec <z_check_thread_stack_fail+0x24>
    2ee0:	4283      	cmp	r3, r0
    2ee2:	d203      	bcs.n	2eec <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2ee4:	4281      	cmp	r1, r0
    2ee6:	bf28      	it	cs
    2ee8:	2000      	movcs	r0, #0
    2eea:	4770      	bx	lr
    2eec:	2000      	movs	r0, #0
}
    2eee:	4770      	bx	lr
    2ef0:	20000c3c 	.word	0x20000c3c

00002ef4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2ef4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2ef6:	4b09      	ldr	r3, [pc, #36]	; (2f1c <arch_switch_to_main_thread+0x28>)
    2ef8:	6098      	str	r0, [r3, #8]
{
    2efa:	460d      	mov	r5, r1
    2efc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2efe:	f000 fbef 	bl	36e0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2f02:	4620      	mov	r0, r4
    2f04:	f385 8809 	msr	PSP, r5
    2f08:	2100      	movs	r1, #0
    2f0a:	b663      	cpsie	if
    2f0c:	f381 8811 	msr	BASEPRI, r1
    2f10:	f3bf 8f6f 	isb	sy
    2f14:	2200      	movs	r2, #0
    2f16:	2300      	movs	r3, #0
    2f18:	f005 ff6e 	bl	8df8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2f1c:	20000c3c 	.word	0x20000c3c

00002f20 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2f20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2f22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2f24:	4a0b      	ldr	r2, [pc, #44]	; (2f54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2f26:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2f28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2f2a:	bf1e      	ittt	ne
	movne	r1, #0
    2f2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2f2e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2f30:	f006 fc13 	blne	975a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2f34:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2f36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2f3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2f3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2f42:	4905      	ldr	r1, [pc, #20]	; (2f58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2f44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2f46:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2f48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2f4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2f4e:	4903      	ldr	r1, [pc, #12]	; (2f5c <_isr_wrapper+0x3c>)
	bx r1
    2f50:	4708      	bx	r1
    2f52:	0000      	.short	0x0000
	ldr r2, =_kernel
    2f54:	20000c3c 	.word	0x20000c3c
	ldr r1, =_sw_isr_table
    2f58:	00009948 	.word	0x00009948
	ldr r1, =z_arm_int_exit
    2f5c:	00002f61 	.word	0x00002f61

00002f60 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2f60:	4b04      	ldr	r3, [pc, #16]	; (2f74 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2f62:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2f64:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2f66:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2f68:	d003      	beq.n	2f72 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2f6a:	4903      	ldr	r1, [pc, #12]	; (2f78 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2f70:	600a      	str	r2, [r1, #0]

00002f72 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2f72:	4770      	bx	lr
	ldr r3, =_kernel
    2f74:	20000c3c 	.word	0x20000c3c
	ldr r1, =_SCS_ICSR
    2f78:	e000ed04 	.word	0xe000ed04

00002f7c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f7e:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2f80:	2400      	movs	r4, #0
    2f82:	4b3b      	ldr	r3, [pc, #236]	; (3070 <bus_fault.constprop.0+0xf4>)
    2f84:	9302      	str	r3, [sp, #8]
    2f86:	e9cd 4400 	strd	r4, r4, [sp]
    2f8a:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f8c:	4607      	mov	r7, r0
    2f8e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2f90:	2201      	movs	r2, #1
    2f92:	4938      	ldr	r1, [pc, #224]	; (3074 <bus_fault.constprop.0+0xf8>)
    2f94:	4620      	mov	r0, r4
    2f96:	f006 f864 	bl	9062 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f9a:	4b37      	ldr	r3, [pc, #220]	; (3078 <bus_fault.constprop.0+0xfc>)
    2f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f9e:	04db      	lsls	r3, r3, #19
    2fa0:	d509      	bpl.n	2fb6 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    2fa2:	4b36      	ldr	r3, [pc, #216]	; (307c <bus_fault.constprop.0+0x100>)
    2fa4:	4933      	ldr	r1, [pc, #204]	; (3074 <bus_fault.constprop.0+0xf8>)
    2fa6:	9400      	str	r4, [sp, #0]
    2fa8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2fac:	2201      	movs	r2, #1
    2fae:	4623      	mov	r3, r4
    2fb0:	4620      	mov	r0, r4
    2fb2:	f006 f856 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2fb6:	4b30      	ldr	r3, [pc, #192]	; (3078 <bus_fault.constprop.0+0xfc>)
    2fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fba:	051d      	lsls	r5, r3, #20
    2fbc:	d509      	bpl.n	2fd2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    2fbe:	4b30      	ldr	r3, [pc, #192]	; (3080 <bus_fault.constprop.0+0x104>)
    2fc0:	9302      	str	r3, [sp, #8]
    2fc2:	2300      	movs	r3, #0
    2fc4:	e9cd 3300 	strd	r3, r3, [sp]
    2fc8:	492a      	ldr	r1, [pc, #168]	; (3074 <bus_fault.constprop.0+0xf8>)
    2fca:	2201      	movs	r2, #1
    2fcc:	4618      	mov	r0, r3
    2fce:	f006 f848 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2fd2:	4d29      	ldr	r5, [pc, #164]	; (3078 <bus_fault.constprop.0+0xfc>)
    2fd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fd6:	059c      	lsls	r4, r3, #22
    2fd8:	d51e      	bpl.n	3018 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    2fda:	2400      	movs	r4, #0
    2fdc:	4b29      	ldr	r3, [pc, #164]	; (3084 <bus_fault.constprop.0+0x108>)
    2fde:	9302      	str	r3, [sp, #8]
    2fe0:	2201      	movs	r2, #1
    2fe2:	4623      	mov	r3, r4
    2fe4:	4620      	mov	r0, r4
    2fe6:	e9cd 4400 	strd	r4, r4, [sp]
    2fea:	4922      	ldr	r1, [pc, #136]	; (3074 <bus_fault.constprop.0+0xf8>)
    2fec:	f006 f839 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2ff0:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2ff2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2ff4:	0410      	lsls	r0, r2, #16
    2ff6:	d50f      	bpl.n	3018 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2ff8:	9303      	str	r3, [sp, #12]
    2ffa:	4b23      	ldr	r3, [pc, #140]	; (3088 <bus_fault.constprop.0+0x10c>)
    2ffc:	491d      	ldr	r1, [pc, #116]	; (3074 <bus_fault.constprop.0+0xf8>)
    2ffe:	9400      	str	r4, [sp, #0]
    3000:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3004:	2201      	movs	r2, #1
    3006:	4623      	mov	r3, r4
    3008:	4620      	mov	r0, r4
    300a:	f006 f82a 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    300e:	b11f      	cbz	r7, 3018 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3010:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3016:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3018:	4b17      	ldr	r3, [pc, #92]	; (3078 <bus_fault.constprop.0+0xfc>)
    301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    301c:	0559      	lsls	r1, r3, #21
    301e:	d509      	bpl.n	3034 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    3020:	4b1a      	ldr	r3, [pc, #104]	; (308c <bus_fault.constprop.0+0x110>)
    3022:	9302      	str	r3, [sp, #8]
    3024:	2300      	movs	r3, #0
    3026:	e9cd 3300 	strd	r3, r3, [sp]
    302a:	4912      	ldr	r1, [pc, #72]	; (3074 <bus_fault.constprop.0+0xf8>)
    302c:	2201      	movs	r2, #1
    302e:	4618      	mov	r0, r3
    3030:	f006 f817 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3034:	4a10      	ldr	r2, [pc, #64]	; (3078 <bus_fault.constprop.0+0xfc>)
    3036:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3038:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    303c:	d012      	beq.n	3064 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    303e:	4b14      	ldr	r3, [pc, #80]	; (3090 <bus_fault.constprop.0+0x114>)
    3040:	9302      	str	r3, [sp, #8]
    3042:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3044:	e9cd 3300 	strd	r3, r3, [sp]
    3048:	490a      	ldr	r1, [pc, #40]	; (3074 <bus_fault.constprop.0+0xf8>)
    304a:	2201      	movs	r2, #1
    304c:	4618      	mov	r0, r3
    304e:	f006 f808 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3052:	4a09      	ldr	r2, [pc, #36]	; (3078 <bus_fault.constprop.0+0xfc>)
    3054:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3056:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3058:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    305c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    305e:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3060:	b005      	add	sp, #20
    3062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3064:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3066:	0492      	lsls	r2, r2, #18
    3068:	d5f3      	bpl.n	3052 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    306a:	4a0a      	ldr	r2, [pc, #40]	; (3094 <bus_fault.constprop.0+0x118>)
    306c:	9202      	str	r2, [sp, #8]
    306e:	e7e9      	b.n	3044 <bus_fault.constprop.0+0xc8>
    3070:	0000a9fb 	.word	0x0000a9fb
    3074:	00009af8 	.word	0x00009af8
    3078:	e000ed00 	.word	0xe000ed00
    307c:	0000aa11 	.word	0x0000aa11
    3080:	0000aa22 	.word	0x0000aa22
    3084:	0000aa35 	.word	0x0000aa35
    3088:	0000aa4e 	.word	0x0000aa4e
    308c:	0000aa63 	.word	0x0000aa63
    3090:	0000aa7e 	.word	0x0000aa7e
    3094:	0000aa96 	.word	0x0000aa96

00003098 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    309a:	2400      	movs	r4, #0
    309c:	4b33      	ldr	r3, [pc, #204]	; (316c <usage_fault.constprop.0+0xd4>)
    309e:	9302      	str	r3, [sp, #8]
    30a0:	e9cd 4400 	strd	r4, r4, [sp]
    30a4:	4623      	mov	r3, r4
    30a6:	4932      	ldr	r1, [pc, #200]	; (3170 <usage_fault.constprop.0+0xd8>)
    30a8:	2201      	movs	r2, #1
    30aa:	4620      	mov	r0, r4
    30ac:	f005 ffd9 	bl	9062 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    30b0:	4b30      	ldr	r3, [pc, #192]	; (3174 <usage_fault.constprop.0+0xdc>)
    30b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30b4:	019b      	lsls	r3, r3, #6
    30b6:	d509      	bpl.n	30cc <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    30b8:	4b2f      	ldr	r3, [pc, #188]	; (3178 <usage_fault.constprop.0+0xe0>)
    30ba:	492d      	ldr	r1, [pc, #180]	; (3170 <usage_fault.constprop.0+0xd8>)
    30bc:	9400      	str	r4, [sp, #0]
    30be:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30c2:	2201      	movs	r2, #1
    30c4:	4623      	mov	r3, r4
    30c6:	4620      	mov	r0, r4
    30c8:	f005 ffcb 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    30cc:	4b29      	ldr	r3, [pc, #164]	; (3174 <usage_fault.constprop.0+0xdc>)
    30ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30d0:	01dc      	lsls	r4, r3, #7
    30d2:	d509      	bpl.n	30e8 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    30d4:	4b29      	ldr	r3, [pc, #164]	; (317c <usage_fault.constprop.0+0xe4>)
    30d6:	9302      	str	r3, [sp, #8]
    30d8:	2300      	movs	r3, #0
    30da:	e9cd 3300 	strd	r3, r3, [sp]
    30de:	4924      	ldr	r1, [pc, #144]	; (3170 <usage_fault.constprop.0+0xd8>)
    30e0:	2201      	movs	r2, #1
    30e2:	4618      	mov	r0, r3
    30e4:	f005 ffbd 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30e8:	4b22      	ldr	r3, [pc, #136]	; (3174 <usage_fault.constprop.0+0xdc>)
    30ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ec:	0318      	lsls	r0, r3, #12
    30ee:	d509      	bpl.n	3104 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    30f0:	4b23      	ldr	r3, [pc, #140]	; (3180 <usage_fault.constprop.0+0xe8>)
    30f2:	9302      	str	r3, [sp, #8]
    30f4:	2300      	movs	r3, #0
    30f6:	e9cd 3300 	strd	r3, r3, [sp]
    30fa:	491d      	ldr	r1, [pc, #116]	; (3170 <usage_fault.constprop.0+0xd8>)
    30fc:	2201      	movs	r2, #1
    30fe:	4618      	mov	r0, r3
    3100:	f005 ffaf 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3104:	4b1b      	ldr	r3, [pc, #108]	; (3174 <usage_fault.constprop.0+0xdc>)
    3106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3108:	0359      	lsls	r1, r3, #13
    310a:	d509      	bpl.n	3120 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    310c:	4b1d      	ldr	r3, [pc, #116]	; (3184 <usage_fault.constprop.0+0xec>)
    310e:	9302      	str	r3, [sp, #8]
    3110:	2300      	movs	r3, #0
    3112:	e9cd 3300 	strd	r3, r3, [sp]
    3116:	4916      	ldr	r1, [pc, #88]	; (3170 <usage_fault.constprop.0+0xd8>)
    3118:	2201      	movs	r2, #1
    311a:	4618      	mov	r0, r3
    311c:	f005 ffa1 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3120:	4b14      	ldr	r3, [pc, #80]	; (3174 <usage_fault.constprop.0+0xdc>)
    3122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3124:	039a      	lsls	r2, r3, #14
    3126:	d509      	bpl.n	313c <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3128:	4b17      	ldr	r3, [pc, #92]	; (3188 <usage_fault.constprop.0+0xf0>)
    312a:	9302      	str	r3, [sp, #8]
    312c:	2300      	movs	r3, #0
    312e:	e9cd 3300 	strd	r3, r3, [sp]
    3132:	490f      	ldr	r1, [pc, #60]	; (3170 <usage_fault.constprop.0+0xd8>)
    3134:	2201      	movs	r2, #1
    3136:	4618      	mov	r0, r3
    3138:	f005 ff93 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    313c:	4b0d      	ldr	r3, [pc, #52]	; (3174 <usage_fault.constprop.0+0xdc>)
    313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3140:	03db      	lsls	r3, r3, #15
    3142:	d509      	bpl.n	3158 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3144:	4b11      	ldr	r3, [pc, #68]	; (318c <usage_fault.constprop.0+0xf4>)
    3146:	9302      	str	r3, [sp, #8]
    3148:	2300      	movs	r3, #0
    314a:	e9cd 3300 	strd	r3, r3, [sp]
    314e:	4908      	ldr	r1, [pc, #32]	; (3170 <usage_fault.constprop.0+0xd8>)
    3150:	2201      	movs	r2, #1
    3152:	4618      	mov	r0, r3
    3154:	f005 ff85 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3158:	4a06      	ldr	r2, [pc, #24]	; (3174 <usage_fault.constprop.0+0xdc>)
    315a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    315c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3160:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    3164:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3166:	6293      	str	r3, [r2, #40]	; 0x28
}
    3168:	b004      	add	sp, #16
    316a:	bd10      	pop	{r4, pc}
    316c:	0000aac5 	.word	0x0000aac5
    3170:	00009af8 	.word	0x00009af8
    3174:	e000ed00 	.word	0xe000ed00
    3178:	0000aadd 	.word	0x0000aadd
    317c:	0000aaf0 	.word	0x0000aaf0
    3180:	0000ab0a 	.word	0x0000ab0a
    3184:	0000ab28 	.word	0x0000ab28
    3188:	0000ab4d 	.word	0x0000ab4d
    318c:	0000ab67 	.word	0x0000ab67

00003190 <mem_manage_fault>:
{
    3190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3194:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    3196:	2400      	movs	r4, #0
    3198:	4b53      	ldr	r3, [pc, #332]	; (32e8 <mem_manage_fault+0x158>)
    319a:	9302      	str	r3, [sp, #8]
    319c:	e9cd 4400 	strd	r4, r4, [sp]
    31a0:	4623      	mov	r3, r4
{
    31a2:	4680      	mov	r8, r0
    31a4:	4689      	mov	r9, r1
    31a6:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    31a8:	4950      	ldr	r1, [pc, #320]	; (32ec <mem_manage_fault+0x15c>)
    31aa:	2201      	movs	r2, #1
    31ac:	4620      	mov	r0, r4
    31ae:	f005 ff58 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    31b2:	4b4f      	ldr	r3, [pc, #316]	; (32f0 <mem_manage_fault+0x160>)
    31b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31b6:	06df      	lsls	r7, r3, #27
    31b8:	d509      	bpl.n	31ce <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    31ba:	4b4e      	ldr	r3, [pc, #312]	; (32f4 <mem_manage_fault+0x164>)
    31bc:	494b      	ldr	r1, [pc, #300]	; (32ec <mem_manage_fault+0x15c>)
    31be:	9400      	str	r4, [sp, #0]
    31c0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    31c4:	2201      	movs	r2, #1
    31c6:	4623      	mov	r3, r4
    31c8:	4620      	mov	r0, r4
    31ca:	f005 ff4a 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    31ce:	4b48      	ldr	r3, [pc, #288]	; (32f0 <mem_manage_fault+0x160>)
    31d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31d2:	071d      	lsls	r5, r3, #28
    31d4:	d509      	bpl.n	31ea <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    31d6:	4b48      	ldr	r3, [pc, #288]	; (32f8 <mem_manage_fault+0x168>)
    31d8:	9302      	str	r3, [sp, #8]
    31da:	2300      	movs	r3, #0
    31dc:	e9cd 3300 	strd	r3, r3, [sp]
    31e0:	4942      	ldr	r1, [pc, #264]	; (32ec <mem_manage_fault+0x15c>)
    31e2:	2201      	movs	r2, #1
    31e4:	4618      	mov	r0, r3
    31e6:	f005 ff3c 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    31ea:	4d41      	ldr	r5, [pc, #260]	; (32f0 <mem_manage_fault+0x160>)
    31ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31ee:	079c      	lsls	r4, r3, #30
    31f0:	d437      	bmi.n	3262 <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
    31f2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    31f6:	4b3e      	ldr	r3, [pc, #248]	; (32f0 <mem_manage_fault+0x160>)
    31f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31fa:	07d9      	lsls	r1, r3, #31
    31fc:	d509      	bpl.n	3212 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    31fe:	4b3f      	ldr	r3, [pc, #252]	; (32fc <mem_manage_fault+0x16c>)
    3200:	9302      	str	r3, [sp, #8]
    3202:	2300      	movs	r3, #0
    3204:	e9cd 3300 	strd	r3, r3, [sp]
    3208:	4938      	ldr	r1, [pc, #224]	; (32ec <mem_manage_fault+0x15c>)
    320a:	2201      	movs	r2, #1
    320c:	4618      	mov	r0, r3
    320e:	f005 ff28 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3212:	4b37      	ldr	r3, [pc, #220]	; (32f0 <mem_manage_fault+0x160>)
    3214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3216:	069a      	lsls	r2, r3, #26
    3218:	d509      	bpl.n	322e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    321a:	4b39      	ldr	r3, [pc, #228]	; (3300 <mem_manage_fault+0x170>)
    321c:	9302      	str	r3, [sp, #8]
    321e:	2300      	movs	r3, #0
    3220:	e9cd 3300 	strd	r3, r3, [sp]
    3224:	4931      	ldr	r1, [pc, #196]	; (32ec <mem_manage_fault+0x15c>)
    3226:	2201      	movs	r2, #1
    3228:	4618      	mov	r0, r3
    322a:	f005 ff1a 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    322e:	4d30      	ldr	r5, [pc, #192]	; (32f0 <mem_manage_fault+0x160>)
    3230:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3232:	06db      	lsls	r3, r3, #27
    3234:	d437      	bmi.n	32a6 <mem_manage_fault+0x116>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3236:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3238:	079c      	lsls	r4, r3, #30
    323a:	d434      	bmi.n	32a6 <mem_manage_fault+0x116>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    323c:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    323e:	4b2c      	ldr	r3, [pc, #176]	; (32f0 <mem_manage_fault+0x160>)
    3240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3242:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3244:	bf42      	ittt	mi
    3246:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3248:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    324c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    324e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3250:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3254:	629a      	str	r2, [r3, #40]	; 0x28
}
    3256:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    3258:	2300      	movs	r3, #0
    325a:	7033      	strb	r3, [r6, #0]
}
    325c:	b005      	add	sp, #20
    325e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3262:	2400      	movs	r4, #0
    3264:	4b27      	ldr	r3, [pc, #156]	; (3304 <mem_manage_fault+0x174>)
    3266:	9302      	str	r3, [sp, #8]
    3268:	4620      	mov	r0, r4
    326a:	4623      	mov	r3, r4
    326c:	e9cd 4400 	strd	r4, r4, [sp]
    3270:	491e      	ldr	r1, [pc, #120]	; (32ec <mem_manage_fault+0x15c>)
    3272:	2201      	movs	r2, #1
    3274:	f005 fef5 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3278:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    327a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    327c:	0618      	lsls	r0, r3, #24
    327e:	d5b8      	bpl.n	31f2 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3280:	4b21      	ldr	r3, [pc, #132]	; (3308 <mem_manage_fault+0x178>)
    3282:	491a      	ldr	r1, [pc, #104]	; (32ec <mem_manage_fault+0x15c>)
    3284:	9703      	str	r7, [sp, #12]
    3286:	e9cd 4301 	strd	r4, r3, [sp, #4]
    328a:	9400      	str	r4, [sp, #0]
    328c:	4623      	mov	r3, r4
    328e:	2201      	movs	r2, #1
    3290:	4620      	mov	r0, r4
    3292:	f005 fee6 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3296:	f1b9 0f00 	cmp.w	r9, #0
    329a:	d0ac      	beq.n	31f6 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    329c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    32a2:	62ab      	str	r3, [r5, #40]	; 0x28
    32a4:	e7a7      	b.n	31f6 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    32a6:	686b      	ldr	r3, [r5, #4]
    32a8:	0518      	lsls	r0, r3, #20
    32aa:	d5c7      	bpl.n	323c <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    32ac:	4641      	mov	r1, r8
    32ae:	4638      	mov	r0, r7
    32b0:	f7ff fe0a 	bl	2ec8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    32b4:	4604      	mov	r4, r0
    32b6:	b118      	cbz	r0, 32c0 <mem_manage_fault+0x130>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    32b8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    32bc:	2402      	movs	r4, #2
    32be:	e7be      	b.n	323e <mem_manage_fault+0xae>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    32c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32c2:	06d9      	lsls	r1, r3, #27
    32c4:	d5ba      	bpl.n	323c <mem_manage_fault+0xac>
    32c6:	4a11      	ldr	r2, [pc, #68]	; (330c <mem_manage_fault+0x17c>)
    32c8:	4911      	ldr	r1, [pc, #68]	; (3310 <mem_manage_fault+0x180>)
    32ca:	4812      	ldr	r0, [pc, #72]	; (3314 <mem_manage_fault+0x184>)
    32cc:	f240 1349 	movw	r3, #329	; 0x149
    32d0:	f005 fe2b 	bl	8f2a <assert_print>
    32d4:	4810      	ldr	r0, [pc, #64]	; (3318 <mem_manage_fault+0x188>)
    32d6:	f005 fe28 	bl	8f2a <assert_print>
    32da:	480c      	ldr	r0, [pc, #48]	; (330c <mem_manage_fault+0x17c>)
    32dc:	f240 1149 	movw	r1, #329	; 0x149
    32e0:	f005 fe1c 	bl	8f1c <assert_post_action>
    32e4:	e7ab      	b.n	323e <mem_manage_fault+0xae>
    32e6:	bf00      	nop
    32e8:	0000ab92 	.word	0x0000ab92
    32ec:	00009af8 	.word	0x00009af8
    32f0:	e000ed00 	.word	0xe000ed00
    32f4:	0000aba8 	.word	0x0000aba8
    32f8:	0000aa22 	.word	0x0000aa22
    32fc:	0000ac09 	.word	0x0000ac09
    3300:	0000aa96 	.word	0x0000aa96
    3304:	0000abdb 	.word	0x0000abdb
    3308:	0000abf3 	.word	0x0000abf3
    330c:	0000ac28 	.word	0x0000ac28
    3310:	0000ac62 	.word	0x0000ac62
    3314:	00009eb7 	.word	0x00009eb7
    3318:	0000acac 	.word	0x0000acac

0000331c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    331c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3320:	4b85      	ldr	r3, [pc, #532]	; (3538 <z_arm_fault+0x21c>)
    3322:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    3326:	b091      	sub	sp, #68	; 0x44
    3328:	4680      	mov	r8, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    332a:	f3c9 0608 	ubfx	r6, r9, #0, #9
    332e:	2700      	movs	r7, #0
    3330:	f387 8811 	msr	BASEPRI, r7
    3334:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3338:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    333c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3340:	d10d      	bne.n	335e <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3342:	f002 030c 	and.w	r3, r2, #12
    3346:	2b08      	cmp	r3, #8
    3348:	d11b      	bne.n	3382 <z_arm_fault+0x66>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    334a:	4b7c      	ldr	r3, [pc, #496]	; (353c <z_arm_fault+0x220>)
    334c:	497c      	ldr	r1, [pc, #496]	; (3540 <z_arm_fault+0x224>)
    334e:	9700      	str	r7, [sp, #0]
    3350:	e9cd 7301 	strd	r7, r3, [sp, #4]
    3354:	2201      	movs	r2, #1
    3356:	463b      	mov	r3, r7
    3358:	4638      	mov	r0, r7
    335a:	f005 fe82 	bl	9062 <z_log_msg2_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    335e:	4a79      	ldr	r2, [pc, #484]	; (3544 <z_arm_fault+0x228>)
    3360:	4979      	ldr	r1, [pc, #484]	; (3548 <z_arm_fault+0x22c>)
    3362:	487a      	ldr	r0, [pc, #488]	; (354c <z_arm_fault+0x230>)
    3364:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3368:	f005 fddf 	bl	8f2a <assert_print>
    336c:	4878      	ldr	r0, [pc, #480]	; (3550 <z_arm_fault+0x234>)
    336e:	f005 fddc 	bl	8f2a <assert_print>
    3372:	4874      	ldr	r0, [pc, #464]	; (3544 <z_arm_fault+0x228>)
    3374:	f240 31fb 	movw	r1, #1019	; 0x3fb
    3378:	f005 fdd0 	bl	8f1c <assert_post_action>
    337c:	f04f 0800 	mov.w	r8, #0
    3380:	e006      	b.n	3390 <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3382:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3384:	bf4c      	ite	mi
    3386:	4688      	movmi	r8, r1
			*nested_exc = true;
    3388:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    338a:	f1b8 0f00 	cmp.w	r8, #0
    338e:	d0e6      	beq.n	335e <z_arm_fault+0x42>
	*recoverable = false;
    3390:	2500      	movs	r5, #0
	switch (fault) {
    3392:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    3394:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    3398:	2b09      	cmp	r3, #9
    339a:	f200 80b3 	bhi.w	3504 <z_arm_fault+0x1e8>
    339e:	e8df f003 	tbb	[pc, r3]
    33a2:	a705      	.short	0xa705
    33a4:	b1b187ab 	.word	0xb1b187ab
    33a8:	afb1b1b1 	.word	0xafb1b1b1
	PR_FAULT_INFO("***** HARD FAULT *****");
    33ac:	4b69      	ldr	r3, [pc, #420]	; (3554 <z_arm_fault+0x238>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    33ae:	4e62      	ldr	r6, [pc, #392]	; (3538 <z_arm_fault+0x21c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    33b0:	4963      	ldr	r1, [pc, #396]	; (3540 <z_arm_fault+0x224>)
    33b2:	9500      	str	r5, [sp, #0]
    33b4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    33b8:	2300      	movs	r3, #0
    33ba:	2201      	movs	r2, #1
    33bc:	4618      	mov	r0, r3
    33be:	f005 fe50 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    33c2:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    33c4:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    33c8:	f014 0402 	ands.w	r4, r4, #2
    33cc:	d00b      	beq.n	33e6 <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    33ce:	4b62      	ldr	r3, [pc, #392]	; (3558 <z_arm_fault+0x23c>)
	PR_FAULT_INFO(
    33d0:	495b      	ldr	r1, [pc, #364]	; (3540 <z_arm_fault+0x224>)
    33d2:	9500      	str	r5, [sp, #0]
    33d4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    33d8:	2300      	movs	r3, #0
    33da:	2201      	movs	r2, #1
    33dc:	4618      	mov	r0, r3
    33de:	f005 fe40 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    33e2:	2400      	movs	r4, #0
}
    33e4:	e00c      	b.n	3400 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    33e6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    33e8:	2b00      	cmp	r3, #0
    33ea:	da25      	bge.n	3438 <z_arm_fault+0x11c>
		PR_EXC("  Debug event");
    33ec:	4b5b      	ldr	r3, [pc, #364]	; (355c <z_arm_fault+0x240>)
    33ee:	4954      	ldr	r1, [pc, #336]	; (3540 <z_arm_fault+0x224>)
    33f0:	9400      	str	r4, [sp, #0]
    33f2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    33f6:	2201      	movs	r2, #1
    33f8:	4623      	mov	r3, r4
    33fa:	4620      	mov	r0, r4
    33fc:	f005 fe31 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3400:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3404:	b9ab      	cbnz	r3, 3432 <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3406:	2220      	movs	r2, #32
    3408:	4641      	mov	r1, r8
    340a:	eb0d 0002 	add.w	r0, sp, r2
    340e:	f005 fe6e 	bl	90ee <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3414:	2f00      	cmp	r7, #0
    3416:	f000 808a 	beq.w	352e <z_arm_fault+0x212>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    341a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    341e:	b922      	cbnz	r2, 342a <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3420:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3424:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3428:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    342a:	a908      	add	r1, sp, #32
    342c:	4620      	mov	r0, r4
    342e:	f7ff fc17 	bl	2c60 <z_arm_fatal_error>
}
    3432:	b011      	add	sp, #68	; 0x44
    3434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3438:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    343a:	005b      	lsls	r3, r3, #1
    343c:	d54b      	bpl.n	34d6 <z_arm_fault+0x1ba>
		PR_EXC("  Fault escalation (see below)");
    343e:	4b48      	ldr	r3, [pc, #288]	; (3560 <z_arm_fault+0x244>)
    3440:	493f      	ldr	r1, [pc, #252]	; (3540 <z_arm_fault+0x224>)
    3442:	9400      	str	r4, [sp, #0]
    3444:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3448:	2201      	movs	r2, #1
    344a:	4623      	mov	r3, r4
    344c:	4620      	mov	r0, r4
    344e:	f005 fe08 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    3452:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3456:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    345a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    345e:	429a      	cmp	r2, r3
    3460:	d10f      	bne.n	3482 <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3462:	f8d8 3000 	ldr.w	r3, [r8]
    3466:	9303      	str	r3, [sp, #12]
    3468:	4b3e      	ldr	r3, [pc, #248]	; (3564 <z_arm_fault+0x248>)
    346a:	9400      	str	r4, [sp, #0]
    346c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3470:	4620      	mov	r0, r4
    3472:	4623      	mov	r3, r4
    3474:	4932      	ldr	r1, [pc, #200]	; (3540 <z_arm_fault+0x224>)
    3476:	2201      	movs	r2, #1
    3478:	f005 fdf3 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    347c:	f8d8 4000 	ldr.w	r4, [r8]
    3480:	e7be      	b.n	3400 <z_arm_fault+0xe4>
		} else if (SCB_MMFSR != 0) {
    3482:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    3486:	b13b      	cbz	r3, 3498 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
    3488:	f10d 021f 	add.w	r2, sp, #31
    348c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    348e:	4640      	mov	r0, r8
    3490:	f7ff fe7e 	bl	3190 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    3494:	4604      	mov	r4, r0
		break;
    3496:	e7b3      	b.n	3400 <z_arm_fault+0xe4>
		} else if (SCB_BFSR != 0) {
    3498:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    349c:	b12b      	cbz	r3, 34aa <z_arm_fault+0x18e>
			reason = bus_fault(esf, 1, recoverable);
    349e:	f10d 011f 	add.w	r1, sp, #31
    34a2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    34a4:	f7ff fd6a 	bl	2f7c <bus_fault.constprop.0>
    34a8:	e7f4      	b.n	3494 <z_arm_fault+0x178>
		} else if (SCB_UFSR != 0) {
    34aa:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    34ac:	b29b      	uxth	r3, r3
    34ae:	b113      	cbz	r3, 34b6 <z_arm_fault+0x19a>
		reason = usage_fault(esf);
    34b0:	f7ff fdf2 	bl	3098 <usage_fault.constprop.0>
    34b4:	e7ee      	b.n	3494 <z_arm_fault+0x178>
			__ASSERT(0,
    34b6:	492c      	ldr	r1, [pc, #176]	; (3568 <z_arm_fault+0x24c>)
    34b8:	4a22      	ldr	r2, [pc, #136]	; (3544 <z_arm_fault+0x228>)
    34ba:	4824      	ldr	r0, [pc, #144]	; (354c <z_arm_fault+0x230>)
    34bc:	f240 23cd 	movw	r3, #717	; 0x2cd
    34c0:	f005 fd33 	bl	8f2a <assert_print>
    34c4:	4829      	ldr	r0, [pc, #164]	; (356c <z_arm_fault+0x250>)
    34c6:	f005 fd30 	bl	8f2a <assert_print>
    34ca:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    34ce:	481d      	ldr	r0, [pc, #116]	; (3544 <z_arm_fault+0x228>)
    34d0:	f005 fd24 	bl	8f1c <assert_post_action>
    34d4:	e794      	b.n	3400 <z_arm_fault+0xe4>
    34d6:	4924      	ldr	r1, [pc, #144]	; (3568 <z_arm_fault+0x24c>)
    34d8:	4a1a      	ldr	r2, [pc, #104]	; (3544 <z_arm_fault+0x228>)
    34da:	481c      	ldr	r0, [pc, #112]	; (354c <z_arm_fault+0x230>)
    34dc:	f240 23d1 	movw	r3, #721	; 0x2d1
    34e0:	f005 fd23 	bl	8f2a <assert_print>
    34e4:	4822      	ldr	r0, [pc, #136]	; (3570 <z_arm_fault+0x254>)
    34e6:	f005 fd20 	bl	8f2a <assert_print>
    34ea:	f240 21d1 	movw	r1, #721	; 0x2d1
    34ee:	e7ee      	b.n	34ce <z_arm_fault+0x1b2>
		reason = mem_manage_fault(esf, 0, recoverable);
    34f0:	f10d 021f 	add.w	r2, sp, #31
    34f4:	2100      	movs	r1, #0
    34f6:	e7ca      	b.n	348e <z_arm_fault+0x172>
		reason = bus_fault(esf, 0, recoverable);
    34f8:	f10d 011f 	add.w	r1, sp, #31
    34fc:	2000      	movs	r0, #0
    34fe:	e7d1      	b.n	34a4 <z_arm_fault+0x188>
	PR_FAULT_INFO(
    3500:	4b1c      	ldr	r3, [pc, #112]	; (3574 <z_arm_fault+0x258>)
    3502:	e765      	b.n	33d0 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    3504:	4a1c      	ldr	r2, [pc, #112]	; (3578 <z_arm_fault+0x25c>)
    3506:	4b1d      	ldr	r3, [pc, #116]	; (357c <z_arm_fault+0x260>)
    3508:	490d      	ldr	r1, [pc, #52]	; (3540 <z_arm_fault+0x224>)
    350a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    350e:	bf18      	it	ne
    3510:	4613      	movne	r3, r2
    3512:	3e10      	subs	r6, #16
    3514:	2400      	movs	r4, #0
    3516:	e9cd 3603 	strd	r3, r6, [sp, #12]
    351a:	4b19      	ldr	r3, [pc, #100]	; (3580 <z_arm_fault+0x264>)
    351c:	9302      	str	r3, [sp, #8]
    351e:	e9cd 4400 	strd	r4, r4, [sp]
    3522:	4623      	mov	r3, r4
    3524:	2201      	movs	r2, #1
    3526:	4620      	mov	r0, r4
    3528:	f005 fd9b 	bl	9062 <z_log_msg2_runtime_create.constprop.0>
}
    352c:	e768      	b.n	3400 <z_arm_fault+0xe4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    352e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3532:	f023 0301 	bic.w	r3, r3, #1
    3536:	e777      	b.n	3428 <z_arm_fault+0x10c>
    3538:	e000ed00 	.word	0xe000ed00
    353c:	0000acfd 	.word	0x0000acfd
    3540:	00009af8 	.word	0x00009af8
    3544:	0000ac28 	.word	0x0000ac28
    3548:	0000ad28 	.word	0x0000ad28
    354c:	00009eb7 	.word	0x00009eb7
    3550:	0000ad3b 	.word	0x0000ad3b
    3554:	0000ad79 	.word	0x0000ad79
    3558:	0000ad90 	.word	0x0000ad90
    355c:	0000adb1 	.word	0x0000adb1
    3560:	0000adbf 	.word	0x0000adbf
    3564:	0000adde 	.word	0x0000adde
    3568:	0000a05a 	.word	0x0000a05a
    356c:	0000adfa 	.word	0x0000adfa
    3570:	0000ae1e 	.word	0x0000ae1e
    3574:	0000ae4e 	.word	0x0000ae4e
    3578:	0000ace4 	.word	0x0000ace4
    357c:	0000accf 	.word	0x0000accf
    3580:	0000ae72 	.word	0x0000ae72

00003584 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3584:	4a02      	ldr	r2, [pc, #8]	; (3590 <z_arm_fault_init+0xc>)
    3586:	6953      	ldr	r3, [r2, #20]
    3588:	f043 0310 	orr.w	r3, r3, #16
    358c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    358e:	4770      	bx	lr
    3590:	e000ed00 	.word	0xe000ed00

00003594 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3594:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3598:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    359c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    359e:	4672      	mov	r2, lr
	bl z_arm_fault
    35a0:	f7ff febc 	bl	331c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    35a4:	bd01      	pop	{r0, pc}
    35a6:	bf00      	nop

000035a8 <z_arm_interrupt_init>:
    35a8:	4804      	ldr	r0, [pc, #16]	; (35bc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    35aa:	2300      	movs	r3, #0
    35ac:	2140      	movs	r1, #64	; 0x40
    35ae:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    35b0:	3301      	adds	r3, #1
    35b2:	2b30      	cmp	r3, #48	; 0x30
    35b4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    35b8:	d1f9      	bne.n	35ae <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    35ba:	4770      	bx	lr
    35bc:	e000e100 	.word	0xe000e100

000035c0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    35c0:	2000      	movs	r0, #0
    msr CONTROL, r0
    35c2:	f380 8814 	msr	CONTROL, r0
    isb
    35c6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    35ca:	f006 f933 	bl	9834 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    35ce:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    35d0:	490d      	ldr	r1, [pc, #52]	; (3608 <__start+0x48>)
    str r0, [r1]
    35d2:	6008      	str	r0, [r1, #0]
    dsb
    35d4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    35d8:	480c      	ldr	r0, [pc, #48]	; (360c <__start+0x4c>)
    msr msp, r0
    35da:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    35de:	f000 f82b 	bl	3638 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    35e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    35e4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    35e8:	4809      	ldr	r0, [pc, #36]	; (3610 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    35ea:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    35ee:	1840      	adds	r0, r0, r1
    msr PSP, r0
    35f0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    35f4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    35f8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    35fa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    35fc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3600:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3604:	f7ff fbd4 	bl	2db0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3608:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    360c:	20002300 	.word	0x20002300
    ldr r0, =z_interrupt_stacks
    3610:	20002480 	.word	0x20002480

00003614 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3614:	4907      	ldr	r1, [pc, #28]	; (3634 <z_arm_clear_arm_mpu_config+0x20>)
    3616:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    361a:	2300      	movs	r3, #0
	int num_regions =
    361c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3620:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3622:	4293      	cmp	r3, r2
    3624:	d100      	bne.n	3628 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3626:	4770      	bx	lr
  MPU->RNR = rnr;
    3628:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    362c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3630:	3301      	adds	r3, #1
    3632:	e7f6      	b.n	3622 <z_arm_clear_arm_mpu_config+0xe>
    3634:	e000ed00 	.word	0xe000ed00

00003638 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3638:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    363a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    363c:	2300      	movs	r3, #0
    363e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3642:	f7ff ffe7 	bl	3614 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3646:	4b14      	ldr	r3, [pc, #80]	; (3698 <z_arm_init_arch_hw_at_boot+0x60>)
    3648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    364c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    365c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3660:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3664:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3668:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    366c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3670:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3674:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3678:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    367c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3680:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3684:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3688:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    368c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    368e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3692:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3696:	bd08      	pop	{r3, pc}
    3698:	e000e100 	.word	0xe000e100

0000369c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    369c:	4b08      	ldr	r3, [pc, #32]	; (36c0 <z_impl_k_thread_abort+0x24>)
    369e:	689b      	ldr	r3, [r3, #8]
    36a0:	4283      	cmp	r3, r0
    36a2:	d10b      	bne.n	36bc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    36a4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    36a8:	b143      	cbz	r3, 36bc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    36aa:	4b06      	ldr	r3, [pc, #24]	; (36c4 <z_impl_k_thread_abort+0x28>)
    36ac:	685a      	ldr	r2, [r3, #4]
    36ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    36b2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    36b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    36b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    36ba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    36bc:	f004 bab0 	b.w	7c20 <z_thread_abort>
    36c0:	20000c3c 	.word	0x20000c3c
    36c4:	e000ed00 	.word	0xe000ed00

000036c8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    36c8:	4b02      	ldr	r3, [pc, #8]	; (36d4 <z_arm_configure_static_mpu_regions+0xc>)
    36ca:	4a03      	ldr	r2, [pc, #12]	; (36d8 <z_arm_configure_static_mpu_regions+0x10>)
    36cc:	4803      	ldr	r0, [pc, #12]	; (36dc <z_arm_configure_static_mpu_regions+0x14>)
    36ce:	2101      	movs	r1, #1
    36d0:	f000 b884 	b.w	37dc <arm_core_mpu_configure_static_mpu_regions>
    36d4:	20040000 	.word	0x20040000
    36d8:	20000000 	.word	0x20000000
    36dc:	00009c60 	.word	0x00009c60

000036e0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    36e0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    36e2:	4b05      	ldr	r3, [pc, #20]	; (36f8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    36e4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    36e6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    36e8:	4a04      	ldr	r2, [pc, #16]	; (36fc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    36ea:	2120      	movs	r1, #32
    36ec:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    36f0:	4618      	mov	r0, r3
    36f2:	2101      	movs	r1, #1
    36f4:	f000 b89a 	b.w	382c <arm_core_mpu_configure_dynamic_mpu_regions>
    36f8:	20000ae8 	.word	0x20000ae8
    36fc:	150b0000 	.word	0x150b0000

00003700 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3700:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3702:	4e27      	ldr	r6, [pc, #156]	; (37a0 <mpu_configure_regions+0xa0>)
    3704:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3706:	2500      	movs	r5, #0
    3708:	428d      	cmp	r5, r1
    370a:	da15      	bge.n	3738 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    370c:	6844      	ldr	r4, [r0, #4]
    370e:	2c00      	cmp	r4, #0
    3710:	d043      	beq.n	379a <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3712:	b1d3      	cbz	r3, 374a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3714:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3718:	ea14 0f0c 	tst.w	r4, ip
    371c:	d00f      	beq.n	373e <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    371e:	4b21      	ldr	r3, [pc, #132]	; (37a4 <mpu_configure_regions+0xa4>)
    3720:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3722:	9302      	str	r3, [sp, #8]
    3724:	2300      	movs	r3, #0
    3726:	2201      	movs	r2, #1
    3728:	e9cd 3300 	strd	r3, r3, [sp]
    372c:	491e      	ldr	r1, [pc, #120]	; (37a8 <mpu_configure_regions+0xa8>)
    372e:	4618      	mov	r0, r3
    3730:	f005 fca7 	bl	9082 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3734:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3738:	4610      	mov	r0, r2
    373a:	b005      	add	sp, #20
    373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    373e:	2c1f      	cmp	r4, #31
    3740:	d9ed      	bls.n	371e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3742:	6807      	ldr	r7, [r0, #0]
		&&
    3744:	ea1c 0f07 	tst.w	ip, r7
    3748:	d1e9      	bne.n	371e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    374a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    374c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    374e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3752:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3754:	d90f      	bls.n	3776 <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    3756:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    375a:	d80e      	bhi.n	377a <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    375c:	3c01      	subs	r4, #1
    375e:	fab4 f484 	clz	r4, r4
    3762:	f1c4 041f 	rsb	r4, r4, #31
    3766:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3768:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    376a:	ea4c 0c04 	orr.w	ip, ip, r4
    376e:	d906      	bls.n	377e <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3770:	4b0e      	ldr	r3, [pc, #56]	; (37ac <mpu_configure_regions+0xac>)
    3772:	9203      	str	r2, [sp, #12]
    3774:	e7d5      	b.n	3722 <mpu_configure_regions+0x22>
		return REGION_32B;
    3776:	2408      	movs	r4, #8
    3778:	e7f6      	b.n	3768 <mpu_configure_regions+0x68>
		return REGION_4G;
    377a:	243e      	movs	r4, #62	; 0x3e
    377c:	e7f4      	b.n	3768 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    377e:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3782:	4314      	orrs	r4, r2
    3784:	f044 0410 	orr.w	r4, r4, #16
    3788:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    378c:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3790:	f04c 0401 	orr.w	r4, ip, #1
    3794:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    3798:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    379a:	3501      	adds	r5, #1
    379c:	300c      	adds	r0, #12
    379e:	e7b3      	b.n	3708 <mpu_configure_regions+0x8>
    37a0:	e000ed00 	.word	0xe000ed00
    37a4:	0000ae89 	.word	0x0000ae89
    37a8:	00009af0 	.word	0x00009af0
    37ac:	0000aeac 	.word	0x0000aeac

000037b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    37b0:	4b04      	ldr	r3, [pc, #16]	; (37c4 <arm_core_mpu_enable+0x14>)
    37b2:	2205      	movs	r2, #5
    37b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    37b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37bc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	e000ed00 	.word	0xe000ed00

000037c8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    37c8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    37cc:	4b02      	ldr	r3, [pc, #8]	; (37d8 <arm_core_mpu_disable+0x10>)
    37ce:	2200      	movs	r2, #0
    37d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    37d4:	4770      	bx	lr
    37d6:	bf00      	nop
    37d8:	e000ed00 	.word	0xe000ed00

000037dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    37dc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    37de:	4d0e      	ldr	r5, [pc, #56]	; (3818 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    37e0:	2301      	movs	r3, #1
    37e2:	782a      	ldrb	r2, [r5, #0]
    37e4:	460c      	mov	r4, r1
    37e6:	f7ff ff8b 	bl	3700 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    37ea:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    37ec:	3016      	adds	r0, #22
    37ee:	d111      	bne.n	3814 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    37f0:	f240 1311 	movw	r3, #273	; 0x111
    37f4:	4a09      	ldr	r2, [pc, #36]	; (381c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    37f6:	490a      	ldr	r1, [pc, #40]	; (3820 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    37f8:	480a      	ldr	r0, [pc, #40]	; (3824 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    37fa:	f005 fb96 	bl	8f2a <assert_print>
    37fe:	4621      	mov	r1, r4
    3800:	4809      	ldr	r0, [pc, #36]	; (3828 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    3802:	f005 fb92 	bl	8f2a <assert_print>
			regions_num);
	}
}
    3806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    380a:	4804      	ldr	r0, [pc, #16]	; (381c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    380c:	f240 1111 	movw	r1, #273	; 0x111
    3810:	f005 bb84 	b.w	8f1c <assert_post_action>
}
    3814:	bd38      	pop	{r3, r4, r5, pc}
    3816:	bf00      	nop
    3818:	20000e7f 	.word	0x20000e7f
    381c:	0000aed2 	.word	0x0000aed2
    3820:	0000a05a 	.word	0x0000a05a
    3824:	00009eb7 	.word	0x00009eb7
    3828:	0000af09 	.word	0x0000af09

0000382c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    382c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    382e:	4a13      	ldr	r2, [pc, #76]	; (387c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3830:	2300      	movs	r3, #0
    3832:	7812      	ldrb	r2, [r2, #0]
    3834:	460c      	mov	r4, r1
    3836:	f7ff ff63 	bl	3700 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    383a:	f110 0f16 	cmn.w	r0, #22
    383e:	d00a      	beq.n	3856 <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    3840:	4b0f      	ldr	r3, [pc, #60]	; (3880 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    3842:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3844:	2807      	cmp	r0, #7
    3846:	dd00      	ble.n	384a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3848:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    384a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    384e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3852:	3001      	adds	r0, #1
    3854:	e7f6      	b.n	3844 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3856:	4a0b      	ldr	r2, [pc, #44]	; (3884 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3858:	490b      	ldr	r1, [pc, #44]	; (3888 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    385a:	480c      	ldr	r0, [pc, #48]	; (388c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    385c:	f44f 7398 	mov.w	r3, #304	; 0x130
    3860:	f005 fb63 	bl	8f2a <assert_print>
    3864:	4621      	mov	r1, r4
    3866:	480a      	ldr	r0, [pc, #40]	; (3890 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    3868:	f005 fb5f 	bl	8f2a <assert_print>
}
    386c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3870:	4804      	ldr	r0, [pc, #16]	; (3884 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3872:	f44f 7198 	mov.w	r1, #304	; 0x130
    3876:	f005 bb51 	b.w	8f1c <assert_post_action>
    387a:	bf00      	nop
    387c:	20000e7f 	.word	0x20000e7f
    3880:	e000ed00 	.word	0xe000ed00
    3884:	0000aed2 	.word	0x0000aed2
    3888:	0000a05a 	.word	0x0000a05a
    388c:	00009eb7 	.word	0x00009eb7
    3890:	0000af35 	.word	0x0000af35

00003894 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3894:	4927      	ldr	r1, [pc, #156]	; (3934 <z_arm_mpu_init+0xa0>)
{
    3896:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3898:	680c      	ldr	r4, [r1, #0]
    389a:	2c08      	cmp	r4, #8
    389c:	d913      	bls.n	38c6 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    389e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    38a2:	4a25      	ldr	r2, [pc, #148]	; (3938 <z_arm_mpu_init+0xa4>)
    38a4:	4925      	ldr	r1, [pc, #148]	; (393c <z_arm_mpu_init+0xa8>)
    38a6:	4826      	ldr	r0, [pc, #152]	; (3940 <z_arm_mpu_init+0xac>)
    38a8:	f005 fb3f 	bl	8f2a <assert_print>
    38ac:	4825      	ldr	r0, [pc, #148]	; (3944 <z_arm_mpu_init+0xb0>)
    38ae:	2208      	movs	r2, #8
    38b0:	4621      	mov	r1, r4
    38b2:	f005 fb3a 	bl	8f2a <assert_print>
    38b6:	4820      	ldr	r0, [pc, #128]	; (3938 <z_arm_mpu_init+0xa4>)
    38b8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    38bc:	f005 fb2e 	bl	8f1c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    38c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    38c4:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    38c6:	f7ff ff7f 	bl	37c8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    38ca:	6848      	ldr	r0, [r1, #4]
    38cc:	491e      	ldr	r1, [pc, #120]	; (3948 <z_arm_mpu_init+0xb4>)
    38ce:	2200      	movs	r2, #0
    38d0:	4294      	cmp	r4, r2
    38d2:	f100 000c 	add.w	r0, r0, #12
    38d6:	d11a      	bne.n	390e <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    38d8:	4b1c      	ldr	r3, [pc, #112]	; (394c <z_arm_mpu_init+0xb8>)
    38da:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    38dc:	f7ff ff68 	bl	37b0 <arm_core_mpu_enable>
	__ASSERT(
    38e0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    38e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    38e8:	2b08      	cmp	r3, #8
    38ea:	d00e      	beq.n	390a <z_arm_mpu_init+0x76>
    38ec:	4918      	ldr	r1, [pc, #96]	; (3950 <z_arm_mpu_init+0xbc>)
    38ee:	4a12      	ldr	r2, [pc, #72]	; (3938 <z_arm_mpu_init+0xa4>)
    38f0:	4813      	ldr	r0, [pc, #76]	; (3940 <z_arm_mpu_init+0xac>)
    38f2:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    38f6:	f005 fb18 	bl	8f2a <assert_print>
    38fa:	4816      	ldr	r0, [pc, #88]	; (3954 <z_arm_mpu_init+0xc0>)
    38fc:	f005 fb15 	bl	8f2a <assert_print>
    3900:	480d      	ldr	r0, [pc, #52]	; (3938 <z_arm_mpu_init+0xa4>)
    3902:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3906:	f005 fb09 	bl	8f1c <assert_post_action>
	return 0;
    390a:	2000      	movs	r0, #0
    390c:	e7da      	b.n	38c4 <z_arm_mpu_init+0x30>
    390e:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3912:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    3916:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    391a:	4313      	orrs	r3, r2
    391c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3924:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3928:	f043 0301 	orr.w	r3, r3, #1
    392c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3930:	3201      	adds	r2, #1
    3932:	e7cd      	b.n	38d0 <z_arm_mpu_init+0x3c>
    3934:	00009c6c 	.word	0x00009c6c
    3938:	0000aed2 	.word	0x0000aed2
    393c:	0000a05a 	.word	0x0000a05a
    3940:	00009eb7 	.word	0x00009eb7
    3944:	0000af62 	.word	0x0000af62
    3948:	e000ed00 	.word	0xe000ed00
    394c:	20000e7f 	.word	0x20000e7f
    3950:	0000af96 	.word	0x0000af96
    3954:	0000afe6 	.word	0x0000afe6

00003958 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3958:	4b01      	ldr	r3, [pc, #4]	; (3960 <__stdout_hook_install+0x8>)
    395a:	6018      	str	r0, [r3, #0]
}
    395c:	4770      	bx	lr
    395e:	bf00      	nop
    3960:	200000c4 	.word	0x200000c4

00003964 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3964:	b510      	push	{r4, lr}
	__asm__ volatile(
    3966:	f04f 0340 	mov.w	r3, #64	; 0x40
    396a:	f3ef 8011 	mrs	r0, BASEPRI
    396e:	f383 8812 	msr	BASEPRI_MAX, r3
    3972:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3976:	4a11      	ldr	r2, [pc, #68]	; (39bc <nordicsemi_nrf52_init+0x58>)
    3978:	2301      	movs	r3, #1
    397a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    397e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3982:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3986:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    398a:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    398e:	2c08      	cmp	r4, #8
    3990:	d108      	bne.n	39a4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3992:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    3996:	2905      	cmp	r1, #5
    3998:	d804      	bhi.n	39a4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    399a:	4c09      	ldr	r4, [pc, #36]	; (39c0 <nordicsemi_nrf52_init+0x5c>)
    399c:	5c61      	ldrb	r1, [r4, r1]
    399e:	b109      	cbz	r1, 39a4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    39a0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    39a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39a8:	2201      	movs	r2, #1
    39aa:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    39ae:	f380 8811 	msr	BASEPRI, r0
    39b2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    39b6:	2000      	movs	r0, #0
    39b8:	bd10      	pop	{r4, pc}
    39ba:	bf00      	nop
    39bc:	4001e000 	.word	0x4001e000
    39c0:	0000b01a 	.word	0x0000b01a

000039c4 <sys_arch_reboot>:
    *p_gpregret = val;
    39c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39c8:	b2c0      	uxtb	r0, r0
    39ca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    39ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    39d2:	4905      	ldr	r1, [pc, #20]	; (39e8 <sys_arch_reboot+0x24>)
    39d4:	4b05      	ldr	r3, [pc, #20]	; (39ec <sys_arch_reboot+0x28>)
    39d6:	68ca      	ldr	r2, [r1, #12]
    39d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    39dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    39de:	60cb      	str	r3, [r1, #12]
    39e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    39e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    39e6:	e7fd      	b.n	39e4 <sys_arch_reboot+0x20>
    39e8:	e000ed00 	.word	0xe000ed00
    39ec:	05fa0004 	.word	0x05fa0004

000039f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    39f0:	b120      	cbz	r0, 39fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    39f2:	4b03      	ldr	r3, [pc, #12]	; (3a00 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    39f4:	0180      	lsls	r0, r0, #6
    39f6:	f043 0301 	orr.w	r3, r3, #1
    39fa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    39fc:	4770      	bx	lr
    39fe:	bf00      	nop
    3a00:	00009b60 	.word	0x00009b60

00003a04 <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    3a04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    3a06:	790d      	ldrb	r5, [r1, #4]
    3a08:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    3a0c:	2c07      	cmp	r4, #7
    3a0e:	d81a      	bhi.n	3a46 <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3a10:	780a      	ldrb	r2, [r1, #0]
    3a12:	2a09      	cmp	r2, #9
    3a14:	d81e      	bhi.n	3a54 <adc_nrfx_channel_setup+0x50>
    3a16:	e8df f002 	tbb	[pc, r2]
    3a1a:	0606      	.short	0x0606
    3a1c:	1d060606 	.word	0x1d060606
    3a20:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    3a24:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    3a26:	784b      	ldrb	r3, [r1, #1]
    3a28:	2b03      	cmp	r3, #3
    3a2a:	d017      	beq.n	3a5c <adc_nrfx_channel_setup+0x58>
    3a2c:	2b04      	cmp	r3, #4
    3a2e:	f04f 0300 	mov.w	r3, #0
    3a32:	d014      	beq.n	3a5e <adc_nrfx_channel_setup+0x5a>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    3a34:	4a2f      	ldr	r2, [pc, #188]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3a36:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    3a38:	e9cd 3300 	strd	r3, r3, [sp]
    3a3c:	492e      	ldr	r1, [pc, #184]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a3e:	2201      	movs	r2, #1
    3a40:	4618      	mov	r0, r3
    3a42:	f005 fb7d 	bl	9140 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3a46:	f06f 0015 	mvn.w	r0, #21
    3a4a:	e048      	b.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
		config.gain = NRF_SAADC_GAIN2;
    3a4c:	2206      	movs	r2, #6
		break;
    3a4e:	e7ea      	b.n	3a26 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3a50:	2207      	movs	r2, #7
		break;
    3a52:	e7e8      	b.n	3a26 <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    3a54:	4b29      	ldr	r3, [pc, #164]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    3a56:	9302      	str	r3, [sp, #8]
    3a58:	2300      	movs	r3, #0
    3a5a:	e7ed      	b.n	3a38 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    3a5c:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
    3a5e:	8848      	ldrh	r0, [r1, #2]
    3a60:	f244 060a 	movw	r6, #16394	; 0x400a
    3a64:	42b0      	cmp	r0, r6
    3a66:	d03e      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3a68:	d80a      	bhi.n	3a80 <adc_nrfx_channel_setup+0x7c>
    3a6a:	f244 0603 	movw	r6, #16387	; 0x4003
    3a6e:	42b0      	cmp	r0, r6
    3a70:	d014      	beq.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3a72:	f244 0605 	movw	r6, #16389	; 0x4005
    3a76:	42b0      	cmp	r0, r6
    3a78:	d033      	beq.n	3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
    3a7a:	b3a0      	cbz	r0, 3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
		LOG_ERR("Selected ADC acquisition time is not valid");
    3a7c:	4b20      	ldr	r3, [pc, #128]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    3a7e:	e7ea      	b.n	3a56 <adc_nrfx_channel_setup+0x52>
	switch (channel_cfg->acquisition_time) {
    3a80:	f244 0614 	movw	r6, #16404	; 0x4014
    3a84:	42b0      	cmp	r0, r6
    3a86:	d030      	beq.n	3aea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52>
    3a88:	f244 0628 	movw	r6, #16424	; 0x4028
    3a8c:	42b0      	cmp	r0, r6
    3a8e:	d02e      	beq.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
    3a90:	f244 060f 	movw	r6, #16399	; 0x400f
    3a94:	42b0      	cmp	r0, r6
    3a96:	d1f1      	bne.n	3a7c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    3a98:	2003      	movs	r0, #3
    3a9a:	e000      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
	nrf_saadc_channel_config_t config = {
    3a9c:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3a9e:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    3aa2:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3aa4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
    3aa8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    p_reg->CH[channel].CONFIG =
    3aac:	0123      	lsls	r3, r4, #4
    3aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ab2:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3ab6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    3aba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    3abe:	0123      	lsls	r3, r4, #4
    3ac0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ac4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3ac8:	798a      	ldrb	r2, [r1, #6]
    3aca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    3ace:	2000      	movs	r0, #0
    3ad0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    3ad4:	4b0b      	ldr	r3, [pc, #44]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    3ad6:	794a      	ldrb	r2, [r1, #5]
    3ad8:	4423      	add	r3, r4
    3ada:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	return 0;
}
    3ade:	b004      	add	sp, #16
    3ae0:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    3ae2:	2001      	movs	r0, #1
    3ae4:	e7db      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3ae6:	2002      	movs	r0, #2
    3ae8:	e7d9      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3aea:	2004      	movs	r0, #4
    3aec:	e7d7      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3aee:	2005      	movs	r0, #5
    3af0:	e7d5      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3af2:	bf00      	nop
    3af4:	0000b03f 	.word	0x0000b03f
    3af8:	00009ac8 	.word	0x00009ac8
    3afc:	0000b020 	.word	0x0000b020
    3b00:	0000b063 	.word	0x0000b063
    3b04:	20000000 	.word	0x20000000

00003b08 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3b08:	4b04      	ldr	r3, [pc, #16]	; (3b1c <adc_context_start_sampling.isra.0+0x14>)
    3b0a:	2201      	movs	r2, #1
    3b0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3b10:	b108      	cbz	r0, 3b16 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b12:	60da      	str	r2, [r3, #12]
}
    3b14:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b16:	601a      	str	r2, [r3, #0]
    3b18:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3b1a:	4770      	bx	lr
    3b1c:	40007000 	.word	0x40007000

00003b20 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b22:	460d      	mov	r5, r1
    3b24:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
    3b26:	4870      	ldr	r0, [pc, #448]	; (3ce8 <adc_nrfx_read+0x1c8>)
    3b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b30:	f002 ff5a 	bl	69e8 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    3b34:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    3b36:	b114      	cbz	r4, 3b3e <adc_nrfx_read+0x1e>
    3b38:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    3b3c:	d00a      	beq.n	3b54 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    3b3e:	4b6b      	ldr	r3, [pc, #428]	; (3cec <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    3b40:	9302      	str	r3, [sp, #8]
    3b42:	2300      	movs	r3, #0
    3b44:	e9cd 3300 	strd	r3, r3, [sp]
    3b48:	4969      	ldr	r1, [pc, #420]	; (3cf0 <adc_nrfx_read+0x1d0>)
    3b4a:	2201      	movs	r2, #1
    3b4c:	4618      	mov	r0, r3
    3b4e:	f005 faf7 	bl	9140 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    3b52:	e053      	b.n	3bfc <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    3b54:	4e67      	ldr	r6, [pc, #412]	; (3cf4 <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3b56:	4f68      	ldr	r7, [pc, #416]	; (3cf8 <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    3b58:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    3b5a:	fa24 f302 	lsr.w	r3, r4, r2
    3b5e:	f013 0301 	ands.w	r3, r3, #1
    3b62:	d02f      	beq.n	3bc4 <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3b64:	18bb      	adds	r3, r7, r2
    3b66:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    3b6a:	b92b      	cbnz	r3, 3b78 <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    3b6c:	9203      	str	r2, [sp, #12]
    3b6e:	4a63      	ldr	r2, [pc, #396]	; (3cfc <adc_nrfx_read+0x1dc>)
    3b70:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    3b72:	e9cd 3300 	strd	r3, r3, [sp]
    3b76:	e03c      	b.n	3bf2 <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3b78:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3b7c:	f895 c011 	ldrb.w	ip, [r5, #17]
    3b80:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    3b84:	f1bc 0c00 	subs.w	ip, ip, #0
    3b88:	bf18      	it	ne
    3b8a:	f04f 0c01 	movne.w	ip, #1
    3b8e:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    3b92:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    3b96:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    3b9a:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3b9e:	0100      	lsls	r0, r0, #4
			++active_channels;
    3ba0:	3101      	adds	r1, #1
    3ba2:	5033      	str	r3, [r6, r0]
    3ba4:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    3ba6:	3201      	adds	r2, #1
    3ba8:	2a08      	cmp	r2, #8
    3baa:	d1d6      	bne.n	3b5a <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    3bac:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    3bae:	f1a2 0008 	sub.w	r0, r2, #8
    3bb2:	2300      	movs	r3, #0
    3bb4:	2806      	cmp	r0, #6
    3bb6:	d816      	bhi.n	3be6 <adc_nrfx_read+0xc6>
    3bb8:	e8df f000 	tbb	[pc, r0]
    3bbc:	15091528 	.word	0x15091528
    3bc0:	152a      	.short	0x152a
    3bc2:	13          	.byte	0x13
    3bc3:	00          	.byte	0x00
    3bc4:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3bc8:	0100      	lsls	r0, r0, #4
    3bca:	5033      	str	r3, [r6, r0]
}
    3bcc:	e7eb      	b.n	3ba6 <adc_nrfx_read+0x86>
    3bce:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    3bd0:	4a48      	ldr	r2, [pc, #288]	; (3cf4 <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3bd2:	2901      	cmp	r1, #1
    3bd4:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3bd8:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3bda:	d91b      	bls.n	3c14 <adc_nrfx_read+0xf4>
    3bdc:	b1e3      	cbz	r3, 3c18 <adc_nrfx_read+0xf8>
		LOG_ERR(
    3bde:	4b48      	ldr	r3, [pc, #288]	; (3d00 <adc_nrfx_read+0x1e0>)
    3be0:	e7ae      	b.n	3b40 <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3be2:	2303      	movs	r3, #3
		break;
    3be4:	e7f4      	b.n	3bd0 <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    3be6:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    3be8:	4a46      	ldr	r2, [pc, #280]	; (3d04 <adc_nrfx_read+0x1e4>)
    3bea:	9300      	str	r3, [sp, #0]
    3bec:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3bf0:	2300      	movs	r3, #0
    3bf2:	493f      	ldr	r1, [pc, #252]	; (3cf0 <adc_nrfx_read+0x1d0>)
    3bf4:	2201      	movs	r2, #1
    3bf6:	4618      	mov	r0, r3
    3bf8:	f005 faa2 	bl	9140 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3bfc:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    3c00:	4839      	ldr	r0, [pc, #228]	; (3ce8 <adc_nrfx_read+0x1c8>)
    3c02:	f002 feb3 	bl	696c <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    3c06:	4620      	mov	r0, r4
    3c08:	b007      	add	sp, #28
    3c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3c0c:	2300      	movs	r3, #0
    3c0e:	e7df      	b.n	3bd0 <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3c10:	2302      	movs	r3, #2
    3c12:	e7dd      	b.n	3bd0 <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    3c14:	2b08      	cmp	r3, #8
    3c16:	d816      	bhi.n	3c46 <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    3c18:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    3c1c:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3c1e:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3c20:	b9b2      	cbnz	r2, 3c50 <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    3c22:	68ea      	ldr	r2, [r5, #12]
    3c24:	429a      	cmp	r2, r3
    3c26:	d217      	bcs.n	3c58 <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    3c28:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3c2c:	4b36      	ldr	r3, [pc, #216]	; (3d08 <adc_nrfx_read+0x1e8>)
    3c2e:	9302      	str	r3, [sp, #8]
    3c30:	2300      	movs	r3, #0
    3c32:	e9cd 3300 	strd	r3, r3, [sp]
    3c36:	492e      	ldr	r1, [pc, #184]	; (3cf0 <adc_nrfx_read+0x1d0>)
    3c38:	2201      	movs	r2, #1
    3c3a:	4618      	mov	r0, r3
    3c3c:	f005 fa80 	bl	9140 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    3c40:	f06f 040b 	mvn.w	r4, #11
    3c44:	e7dc      	b.n	3c00 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    3c46:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    3c48:	4b30      	ldr	r3, [pc, #192]	; (3d0c <adc_nrfx_read+0x1ec>)
    3c4a:	9302      	str	r3, [sp, #8]
    3c4c:	2300      	movs	r3, #0
    3c4e:	e790      	b.n	3b72 <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3c50:	8992      	ldrh	r2, [r2, #12]
    3c52:	fb02 3303 	mla	r3, r2, r3, r3
    3c56:	e7e4      	b.n	3c22 <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3c58:	4b26      	ldr	r3, [pc, #152]	; (3cf4 <adc_nrfx_read+0x1d4>)
    3c5a:	68aa      	ldr	r2, [r5, #8]
    3c5c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    3c60:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    3c62:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    3c66:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3c68:	4c23      	ldr	r4, [pc, #140]	; (3cf8 <adc_nrfx_read+0x1d8>)
    3c6a:	f104 0664 	add.w	r6, r4, #100	; 0x64
    3c6e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3c70:	683b      	ldr	r3, [r7, #0]
    3c72:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    3c74:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    3c76:	2600      	movs	r6, #0
    3c78:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    3c7a:	4627      	mov	r7, r4
    3c7c:	b373      	cbz	r3, 3cdc <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    3c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3c80:	f104 0578 	add.w	r5, r4, #120	; 0x78
    3c84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    3c88:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    3c8a:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    3c8e:	b328      	cbz	r0, 3cdc <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3c90:	f3bf 8f5b 	dmb	ish
    3c94:	e857 3f00 	ldrex	r3, [r7]
    3c98:	e847 6200 	strex	r2, r6, [r7]
    3c9c:	2a00      	cmp	r2, #0
    3c9e:	d1f9      	bne.n	3c94 <adc_nrfx_read+0x174>
    3ca0:	f3bf 8f5b 	dmb	ish
			return ((t * to_hz + off) / from_hz);
    3ca4:	481a      	ldr	r0, [pc, #104]	; (3d10 <adc_nrfx_read+0x1f0>)
    3ca6:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    3ca8:	4a1a      	ldr	r2, [pc, #104]	; (3d14 <adc_nrfx_read+0x1f4>)
    3caa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3cae:	4631      	mov	r1, r6
    3cb0:	2300      	movs	r3, #0
    3cb2:	fbe7 0105 	umlal	r0, r1, r7, r5
    3cb6:	f7fc fc55 	bl	564 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3cba:	2200      	movs	r2, #0
    3cbc:	e9cd 0100 	strd	r0, r1, [sp]
    3cc0:	2300      	movs	r3, #0
    3cc2:	f104 0008 	add.w	r0, r4, #8
    3cc6:	f004 fc31 	bl	852c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    3cca:	4813      	ldr	r0, [pc, #76]	; (3d18 <adc_nrfx_read+0x1f8>)
    3ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cd4:	f002 fe88 	bl	69e8 <z_impl_k_sem_take>
	return ctx->status;
    3cd8:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    3cda:	e791      	b.n	3c00 <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3cdc:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    3ce0:	f7ff ff12 	bl	3b08 <adc_context_start_sampling.isra.0>
    3ce4:	e7f1      	b.n	3cca <adc_nrfx_read+0x1aa>
    3ce6:	bf00      	nop
    3ce8:	20000040 	.word	0x20000040
    3cec:	0000b08e 	.word	0x0000b08e
    3cf0:	00009ac8 	.word	0x00009ac8
    3cf4:	40007000 	.word	0x40007000
    3cf8:	20000000 	.word	0x20000000
    3cfc:	0000b0ac 	.word	0x0000b0ac
    3d00:	0000b0eb 	.word	0x0000b0eb
    3d04:	0000b0c6 	.word	0x0000b0c6
    3d08:	0000b140 	.word	0x0000b140
    3d0c:	0000b11d 	.word	0x0000b11d
    3d10:	000f423f 	.word	0x000f423f
    3d14:	000f4240 	.word	0x000f4240
    3d18:	20000050 	.word	0x20000050

00003d1c <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d1c:	4b0e      	ldr	r3, [pc, #56]	; (3d58 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3d1e:	b510      	push	{r4, lr}
    3d20:	2400      	movs	r4, #0
    3d22:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3d26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3d2a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    3d2e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    3d32:	2212      	movs	r2, #18
    3d34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3d38:	2007      	movs	r0, #7
    3d3a:	f7fe ffe1 	bl	2d00 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3d3e:	4622      	mov	r2, r4
    3d40:	2101      	movs	r1, #1
    3d42:	2007      	movs	r0, #7
    3d44:	f7fe fff8 	bl	2d38 <z_arm_irq_priority_set>
	return sem->count;
    3d48:	4804      	ldr	r0, [pc, #16]	; (3d5c <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    3d4a:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3d4c:	b913      	cbnz	r3, 3d54 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    3d4e:	3040      	adds	r0, #64	; 0x40
    3d50:	f002 fe0c 	bl	696c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3d54:	2000      	movs	r0, #0
    3d56:	bd10      	pop	{r4, pc}
    3d58:	40007000 	.word	0x40007000
    3d5c:	20000000 	.word	0x20000000

00003d60 <saadc_irq_handler>:
{
    3d60:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d62:	4b2e      	ldr	r3, [pc, #184]	; (3e1c <saadc_irq_handler+0xbc>)
    3d64:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3d68:	2a00      	cmp	r2, #0
    3d6a:	d04a      	beq.n	3e02 <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d6c:	2200      	movs	r2, #0
    3d6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3d72:	4c2b      	ldr	r4, [pc, #172]	; (3e20 <saadc_irq_handler+0xc0>)
    3d74:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d78:	2101      	movs	r1, #1
    3d7a:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3d7c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    3d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3d82:	4625      	mov	r5, r4
    3d84:	b3c3      	cbz	r3, 3df8 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3d86:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    3d88:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
    3d8c:	b133      	cbz	r3, 3d9c <saadc_irq_handler+0x3c>
			action = callback(dev,
    3d8e:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3d92:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3d94:	2801      	cmp	r0, #1
    3d96:	d014      	beq.n	3dc2 <saadc_irq_handler+0x62>
    3d98:	2802      	cmp	r0, #2
    3d9a:	d028      	beq.n	3dee <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3d9c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    3da0:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    3da4:	429a      	cmp	r2, r3
    3da6:	d922      	bls.n	3dee <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3da8:	3301      	adds	r3, #1
    3daa:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3dae:	4b1b      	ldr	r3, [pc, #108]	; (3e1c <saadc_irq_handler+0xbc>)
    3db0:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3db4:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3db8:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3dba:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3dbe:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3dc2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3dc4:	b92b      	cbnz	r3, 3dd2 <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3dc6:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    3dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3dce:	f7ff be9b 	b.w	3b08 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3dd2:	f3bf 8f5b 	dmb	ish
    3dd6:	e855 3f00 	ldrex	r3, [r5]
    3dda:	1e5a      	subs	r2, r3, #1
    3ddc:	e845 2100 	strex	r1, r2, [r5]
    3de0:	2900      	cmp	r1, #0
    3de2:	d1f8      	bne.n	3dd6 <saadc_irq_handler+0x76>
    3de4:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3de8:	2b01      	cmp	r3, #1
    3dea:	dcec      	bgt.n	3dc6 <saadc_irq_handler+0x66>
    3dec:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3dee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3df0:	b113      	cbz	r3, 3df8 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3df2:	480c      	ldr	r0, [pc, #48]	; (3e24 <saadc_irq_handler+0xc4>)
    3df4:	f005 fcf9 	bl	97ea <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3df8:	480b      	ldr	r0, [pc, #44]	; (3e28 <saadc_irq_handler+0xc8>)
    3dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3dfe:	f002 bdb5 	b.w	696c <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e02:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3e06:	2900      	cmp	r1, #0
    3e08:	d0f0      	beq.n	3dec <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e0a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    3e0e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e12:	2201      	movs	r2, #1
    3e14:	609a      	str	r2, [r3, #8]
    3e16:	601a      	str	r2, [r3, #0]
    3e18:	605a      	str	r2, [r3, #4]
}
    3e1a:	e7e7      	b.n	3dec <saadc_irq_handler+0x8c>
    3e1c:	40007000 	.word	0x40007000
    3e20:	20000000 	.word	0x20000000
    3e24:	20000008 	.word	0x20000008
    3e28:	20000050 	.word	0x20000050

00003e2c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3e2e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3e30:	490a      	ldr	r1, [pc, #40]	; (3e5c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3e32:	4a0b      	ldr	r2, [pc, #44]	; (3e60 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    3e34:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3e36:	2340      	movs	r3, #64	; 0x40
    3e38:	9300      	str	r3, [sp, #0]
    3e3a:	1149      	asrs	r1, r1, #5
{
    3e3c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3e3e:	4623      	mov	r3, r4
    3e40:	4808      	ldr	r0, [pc, #32]	; (3e64 <onoff_start+0x38>)
    3e42:	f005 f9b9 	bl	91b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3e46:	1e01      	subs	r1, r0, #0
    3e48:	da05      	bge.n	3e56 <onoff_start+0x2a>
		notify(mgr, err);
    3e4a:	4628      	mov	r0, r5
    3e4c:	4623      	mov	r3, r4
	}
}
    3e4e:	b003      	add	sp, #12
    3e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    3e54:	4718      	bx	r3
}
    3e56:	b003      	add	sp, #12
    3e58:	bd30      	pop	{r4, r5, pc}
    3e5a:	bf00      	nop
    3e5c:	20000b04 	.word	0x20000b04
    3e60:	00009227 	.word	0x00009227
    3e64:	000098b8 	.word	0x000098b8

00003e68 <get_status>:
{
    3e68:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e6a:	b2cc      	uxtb	r4, r1
    3e6c:	2c01      	cmp	r4, #1
{
    3e6e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3e70:	d909      	bls.n	3e86 <get_status+0x1e>
    3e72:	4909      	ldr	r1, [pc, #36]	; (3e98 <get_status+0x30>)
    3e74:	4809      	ldr	r0, [pc, #36]	; (3e9c <get_status+0x34>)
    3e76:	4a0a      	ldr	r2, [pc, #40]	; (3ea0 <get_status+0x38>)
    3e78:	2379      	movs	r3, #121	; 0x79
    3e7a:	f005 f856 	bl	8f2a <assert_print>
    3e7e:	4808      	ldr	r0, [pc, #32]	; (3ea0 <get_status+0x38>)
    3e80:	2179      	movs	r1, #121	; 0x79
    3e82:	f005 f84b 	bl	8f1c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3e86:	692b      	ldr	r3, [r5, #16]
    3e88:	220c      	movs	r2, #12
    3e8a:	fb04 3302 	mla	r3, r4, r2, r3
    3e8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    3e90:	f000 0007 	and.w	r0, r0, #7
    3e94:	bd38      	pop	{r3, r4, r5, pc}
    3e96:	bf00      	nop
    3e98:	0000b1b1 	.word	0x0000b1b1
    3e9c:	00009eb7 	.word	0x00009eb7
    3ea0:	0000b174 	.word	0x0000b174

00003ea4 <stop>:
{
    3ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ea6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3ea8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    3eaa:	6906      	ldr	r6, [r0, #16]
{
    3eac:	4605      	mov	r5, r0
    3eae:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3eb0:	d90b      	bls.n	3eca <stop+0x26>
    3eb2:	4919      	ldr	r1, [pc, #100]	; (3f18 <stop+0x74>)
    3eb4:	4819      	ldr	r0, [pc, #100]	; (3f1c <stop+0x78>)
    3eb6:	4a1a      	ldr	r2, [pc, #104]	; (3f20 <stop+0x7c>)
    3eb8:	f240 134d 	movw	r3, #333	; 0x14d
    3ebc:	f005 f835 	bl	8f2a <assert_print>
    3ec0:	4817      	ldr	r0, [pc, #92]	; (3f20 <stop+0x7c>)
    3ec2:	f240 114d 	movw	r1, #333	; 0x14d
    3ec6:	f005 f829 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    3eca:	f04f 0340 	mov.w	r3, #64	; 0x40
    3ece:	f3ef 8111 	mrs	r1, BASEPRI
    3ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ed6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3eda:	220c      	movs	r2, #12
    3edc:	fb02 6304 	mla	r3, r2, r4, r6
    3ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3ee2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    3ee6:	d001      	beq.n	3eec <stop+0x48>
    3ee8:	429f      	cmp	r7, r3
    3eea:	d111      	bne.n	3f10 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3eec:	fb02 6604 	mla	r6, r2, r4, r6
    3ef0:	2301      	movs	r3, #1
    3ef2:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    3ef4:	2000      	movs	r0, #0
	__asm__ volatile(
    3ef6:	f381 8811 	msr	BASEPRI, r1
    3efa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3efe:	b930      	cbnz	r0, 3f0e <stop+0x6a>
	get_sub_config(dev, type)->stop();
    3f00:	686b      	ldr	r3, [r5, #4]
    3f02:	220c      	movs	r2, #12
    3f04:	fb02 3304 	mla	r3, r2, r4, r3
    3f08:	685b      	ldr	r3, [r3, #4]
    3f0a:	4798      	blx	r3
	return 0;
    3f0c:	2000      	movs	r0, #0
}
    3f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3f14:	e7ef      	b.n	3ef6 <stop+0x52>
    3f16:	bf00      	nop
    3f18:	0000b1b1 	.word	0x0000b1b1
    3f1c:	00009eb7 	.word	0x00009eb7
    3f20:	0000b174 	.word	0x0000b174

00003f24 <onoff_stop>:
{
    3f24:	b570      	push	{r4, r5, r6, lr}
    3f26:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3f28:	4906      	ldr	r1, [pc, #24]	; (3f44 <onoff_stop+0x20>)
    3f2a:	1a41      	subs	r1, r0, r1
{
    3f2c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3f2e:	1149      	asrs	r1, r1, #5
    3f30:	4805      	ldr	r0, [pc, #20]	; (3f48 <onoff_stop+0x24>)
    3f32:	2240      	movs	r2, #64	; 0x40
    3f34:	f7ff ffb6 	bl	3ea4 <stop>
	notify(mgr, res);
    3f38:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3f3a:	4601      	mov	r1, r0
	notify(mgr, res);
    3f3c:	4620      	mov	r0, r4
}
    3f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3f42:	4718      	bx	r3
    3f44:	20000b04 	.word	0x20000b04
    3f48:	000098b8 	.word	0x000098b8

00003f4c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f4c:	2200      	movs	r2, #0
{
    3f4e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f50:	2101      	movs	r1, #1
{
    3f52:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f54:	4610      	mov	r0, r2
    3f56:	f7fe feef 	bl	2d38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3f5a:	480f      	ldr	r0, [pc, #60]	; (3f98 <clk_init+0x4c>)
    3f5c:	f001 f990 	bl	5280 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3f60:	4b0e      	ldr	r3, [pc, #56]	; (3f9c <clk_init+0x50>)
    3f62:	4298      	cmp	r0, r3
    3f64:	d115      	bne.n	3f92 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3f66:	f001 f9b1 	bl	52cc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3f6a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3f6c:	490c      	ldr	r1, [pc, #48]	; (3fa0 <clk_init+0x54>)
    3f6e:	4630      	mov	r0, r6
    3f70:	f004 ff2f 	bl	8dd2 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3f74:	2800      	cmp	r0, #0
    3f76:	db0b      	blt.n	3f90 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    3f78:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3f7a:	4909      	ldr	r1, [pc, #36]	; (3fa0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3f7c:	2501      	movs	r5, #1
    3f7e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3f80:	f104 0020 	add.w	r0, r4, #32
    3f84:	f004 ff25 	bl	8dd2 <onoff_manager_init>
		if (err < 0) {
    3f88:	2800      	cmp	r0, #0
    3f8a:	db01      	blt.n	3f90 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3f8c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3f8e:	2000      	movs	r0, #0
}
    3f90:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3f92:	f06f 0004 	mvn.w	r0, #4
    3f96:	e7fb      	b.n	3f90 <clk_init+0x44>
    3f98:	00003fd9 	.word	0x00003fd9
    3f9c:	0bad0000 	.word	0x0bad0000
    3fa0:	00009cc8 	.word	0x00009cc8

00003fa4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3fa4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3fa6:	230c      	movs	r3, #12
    3fa8:	4809      	ldr	r0, [pc, #36]	; (3fd0 <clkstarted_handle.constprop.0+0x2c>)
    3faa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3fac:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3fae:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3fb0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3fb4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3fb6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3fb8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3fba:	4418      	add	r0, r3
    3fbc:	f005 f8e9 	bl	9192 <set_on_state>
	if (callback) {
    3fc0:	b12d      	cbz	r5, 3fce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3fc2:	4632      	mov	r2, r6
    3fc4:	462b      	mov	r3, r5
    3fc6:	4803      	ldr	r0, [pc, #12]	; (3fd4 <clkstarted_handle.constprop.0+0x30>)
}
    3fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3fcc:	4718      	bx	r3
}
    3fce:	bd70      	pop	{r4, r5, r6, pc}
    3fd0:	20000b04 	.word	0x20000b04
    3fd4:	000098b8 	.word	0x000098b8

00003fd8 <clock_event_handler>:
	switch (event) {
    3fd8:	2801      	cmp	r0, #1
{
    3fda:	b508      	push	{r3, lr}
	switch (event) {
    3fdc:	d006      	beq.n	3fec <clock_event_handler+0x14>
    3fde:	2803      	cmp	r0, #3
    3fe0:	d008      	beq.n	3ff4 <clock_event_handler+0x1c>
    3fe2:	b9a8      	cbnz	r0, 4010 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3fe4:	4b10      	ldr	r3, [pc, #64]	; (4028 <clock_event_handler+0x50>)
    3fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3fe8:	075b      	lsls	r3, r3, #29
    3fea:	d11b      	bne.n	4024 <clock_event_handler+0x4c>
}
    3fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3ff0:	f7ff bfd8 	b.w	3fa4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3ff4:	490d      	ldr	r1, [pc, #52]	; (402c <clock_event_handler+0x54>)
    3ff6:	4a0e      	ldr	r2, [pc, #56]	; (4030 <clock_event_handler+0x58>)
    3ff8:	480e      	ldr	r0, [pc, #56]	; (4034 <clock_event_handler+0x5c>)
    3ffa:	f240 235e 	movw	r3, #606	; 0x25e
    3ffe:	f004 ff94 	bl	8f2a <assert_print>
    4002:	f240 215e 	movw	r1, #606	; 0x25e
}
    4006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    400a:	4809      	ldr	r0, [pc, #36]	; (4030 <clock_event_handler+0x58>)
    400c:	f004 bf86 	b.w	8f1c <assert_post_action>
    4010:	4906      	ldr	r1, [pc, #24]	; (402c <clock_event_handler+0x54>)
    4012:	4a07      	ldr	r2, [pc, #28]	; (4030 <clock_event_handler+0x58>)
    4014:	4807      	ldr	r0, [pc, #28]	; (4034 <clock_event_handler+0x5c>)
    4016:	f240 2362 	movw	r3, #610	; 0x262
    401a:	f004 ff86 	bl	8f2a <assert_print>
    401e:	f240 2162 	movw	r1, #610	; 0x262
    4022:	e7f0      	b.n	4006 <clock_event_handler+0x2e>
}
    4024:	bd08      	pop	{r3, pc}
    4026:	bf00      	nop
    4028:	20000b04 	.word	0x20000b04
    402c:	0000a05a 	.word	0x0000a05a
    4030:	0000b174 	.word	0x0000b174
    4034:	00009eb7 	.word	0x00009eb7

00004038 <generic_hfclk_start>:
{
    4038:	b508      	push	{r3, lr}
	__asm__ volatile(
    403a:	f04f 0340 	mov.w	r3, #64	; 0x40
    403e:	f3ef 8111 	mrs	r1, BASEPRI
    4042:	f383 8812 	msr	BASEPRI_MAX, r3
    4046:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    404a:	4a12      	ldr	r2, [pc, #72]	; (4094 <generic_hfclk_start+0x5c>)
    404c:	6813      	ldr	r3, [r2, #0]
    404e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4052:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4056:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4058:	d00c      	beq.n	4074 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    405a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    405e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4062:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4066:	f013 0301 	ands.w	r3, r3, #1
    406a:	d003      	beq.n	4074 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    406c:	480a      	ldr	r0, [pc, #40]	; (4098 <generic_hfclk_start+0x60>)
    406e:	f005 f890 	bl	9192 <set_on_state>
			already_started = true;
    4072:	2301      	movs	r3, #1
	__asm__ volatile(
    4074:	f381 8811 	msr	BASEPRI, r1
    4078:	f3bf 8f6f 	isb	sy
	if (already_started) {
    407c:	b123      	cbz	r3, 4088 <generic_hfclk_start+0x50>
}
    407e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4082:	2000      	movs	r0, #0
    4084:	f7ff bf8e 	b.w	3fa4 <clkstarted_handle.constprop.0>
}
    4088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    408c:	2001      	movs	r0, #1
    408e:	f001 b941 	b.w	5314 <nrfx_clock_start>
    4092:	bf00      	nop
    4094:	20000b5c 	.word	0x20000b5c
    4098:	20000b4c 	.word	0x20000b4c

0000409c <api_blocking_start>:
{
    409c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    409e:	2200      	movs	r2, #0
    40a0:	2301      	movs	r3, #1
    40a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    40a6:	4a09      	ldr	r2, [pc, #36]	; (40cc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    40a8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    40ac:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    40ae:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    40b2:	f005 f8b1 	bl	9218 <api_start>
	if (err < 0) {
    40b6:	2800      	cmp	r0, #0
    40b8:	db05      	blt.n	40c6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    40ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    40be:	2300      	movs	r3, #0
    40c0:	4668      	mov	r0, sp
    40c2:	f002 fc91 	bl	69e8 <z_impl_k_sem_take>
}
    40c6:	b005      	add	sp, #20
    40c8:	f85d fb04 	ldr.w	pc, [sp], #4
    40cc:	00009245 	.word	0x00009245

000040d0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    40d0:	4b09      	ldr	r3, [pc, #36]	; (40f8 <generic_hfclk_stop+0x28>)
    40d2:	f3bf 8f5b 	dmb	ish
    40d6:	e853 2f00 	ldrex	r2, [r3]
    40da:	f022 0102 	bic.w	r1, r2, #2
    40de:	e843 1000 	strex	r0, r1, [r3]
    40e2:	2800      	cmp	r0, #0
    40e4:	d1f7      	bne.n	40d6 <generic_hfclk_stop+0x6>
    40e6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    40ea:	07d3      	lsls	r3, r2, #31
    40ec:	d402      	bmi.n	40f4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    40ee:	2001      	movs	r0, #1
    40f0:	f001 b974 	b.w	53dc <nrfx_clock_stop>
}
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	20000b5c 	.word	0x20000b5c

000040fc <z_nrf_clock_control_lf_on>:
{
    40fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4100:	4947      	ldr	r1, [pc, #284]	; (4220 <z_nrf_clock_control_lf_on+0x124>)
    4102:	f3bf 8f5b 	dmb	ish
    4106:	4606      	mov	r6, r0
    4108:	2201      	movs	r2, #1
    410a:	e851 3f00 	ldrex	r3, [r1]
    410e:	e841 2000 	strex	r0, r2, [r1]
    4112:	2800      	cmp	r0, #0
    4114:	d1f9      	bne.n	410a <z_nrf_clock_control_lf_on+0xe>
    4116:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    411a:	b9a3      	cbnz	r3, 4146 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    411c:	4941      	ldr	r1, [pc, #260]	; (4224 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    411e:	4842      	ldr	r0, [pc, #264]	; (4228 <z_nrf_clock_control_lf_on+0x12c>)
    4120:	604b      	str	r3, [r1, #4]
    4122:	60cb      	str	r3, [r1, #12]
    4124:	608a      	str	r2, [r1, #8]
    4126:	f7fd fa47 	bl	15b8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    412a:	2800      	cmp	r0, #0
    412c:	da0b      	bge.n	4146 <z_nrf_clock_control_lf_on+0x4a>
    412e:	493f      	ldr	r1, [pc, #252]	; (422c <z_nrf_clock_control_lf_on+0x130>)
    4130:	483f      	ldr	r0, [pc, #252]	; (4230 <z_nrf_clock_control_lf_on+0x134>)
    4132:	4a40      	ldr	r2, [pc, #256]	; (4234 <z_nrf_clock_control_lf_on+0x138>)
    4134:	f44f 7308 	mov.w	r3, #544	; 0x220
    4138:	f004 fef7 	bl	8f2a <assert_print>
    413c:	483d      	ldr	r0, [pc, #244]	; (4234 <z_nrf_clock_control_lf_on+0x138>)
    413e:	f44f 7108 	mov.w	r1, #544	; 0x220
    4142:	f004 feeb 	bl	8f1c <assert_post_action>
	switch (start_mode) {
    4146:	b396      	cbz	r6, 41ae <z_nrf_clock_control_lf_on+0xb2>
    4148:	1e73      	subs	r3, r6, #1
    414a:	2b01      	cmp	r3, #1
    414c:	d853      	bhi.n	41f6 <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    414e:	2e01      	cmp	r6, #1
    4150:	d107      	bne.n	4162 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4156:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    415a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    415e:	2b01      	cmp	r3, #1
    4160:	d025      	beq.n	41ae <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4162:	f005 faf2 	bl	974a <k_is_in_isr>
    4166:	4604      	mov	r4, r0
    4168:	b918      	cbnz	r0, 4172 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    416a:	4b33      	ldr	r3, [pc, #204]	; (4238 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    416c:	781b      	ldrb	r3, [r3, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d14f      	bne.n	4212 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    4172:	f04f 0340 	mov.w	r3, #64	; 0x40
    4176:	f3ef 8711 	mrs	r7, BASEPRI
    417a:	f383 8812 	msr	BASEPRI_MAX, r3
    417e:	f3bf 8f6f 	isb	sy
    4182:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4184:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 423c <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4188:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    418c:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4190:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    4194:	03d2      	lsls	r2, r2, #15
    4196:	d50c      	bpl.n	41b2 <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4198:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    419c:	2b01      	cmp	r3, #1
    419e:	d001      	beq.n	41a4 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    41a0:	2e01      	cmp	r6, #1
    41a2:	d106      	bne.n	41b2 <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    41a4:	b30c      	cbz	r4, 41ea <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    41a6:	f387 8811 	msr	BASEPRI, r7
    41aa:	f3bf 8f6f 	isb	sy
}
    41ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    41b2:	b1ac      	cbz	r4, 41e0 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    41b4:	4638      	mov	r0, r7
    41b6:	f7fe fd49 	bl	2c4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    41ba:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    41be:	2b00      	cmp	r3, #0
    41c0:	d1e4      	bne.n	418c <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    41c2:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    41c6:	2a00      	cmp	r2, #0
    41c8:	d0e0      	beq.n	418c <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41ca:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    41ce:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    41d2:	2301      	movs	r3, #1
    41d4:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    41d8:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41dc:	60ab      	str	r3, [r5, #8]
}
    41de:	e7d5      	b.n	418c <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    41e0:	2100      	movs	r1, #0
    41e2:	2021      	movs	r0, #33	; 0x21
    41e4:	f003 fcde 	bl	7ba4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    41e8:	e7e7      	b.n	41ba <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    41ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    41ee:	2202      	movs	r2, #2
    41f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    41f4:	e7db      	b.n	41ae <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    41f6:	4912      	ldr	r1, [pc, #72]	; (4240 <z_nrf_clock_control_lf_on+0x144>)
    41f8:	480d      	ldr	r0, [pc, #52]	; (4230 <z_nrf_clock_control_lf_on+0x134>)
    41fa:	4a0e      	ldr	r2, [pc, #56]	; (4234 <z_nrf_clock_control_lf_on+0x138>)
    41fc:	f240 2332 	movw	r3, #562	; 0x232
    4200:	f004 fe93 	bl	8f2a <assert_print>
}
    4204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4208:	480a      	ldr	r0, [pc, #40]	; (4234 <z_nrf_clock_control_lf_on+0x138>)
    420a:	f240 2132 	movw	r1, #562	; 0x232
    420e:	f004 be85 	b.w	8f1c <assert_post_action>
    p_reg->INTENCLR = mask;
    4212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4216:	2202      	movs	r2, #2
    4218:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    421c:	4607      	mov	r7, r0
}
    421e:	e7b1      	b.n	4184 <z_nrf_clock_control_lf_on+0x88>
    4220:	20000b60 	.word	0x20000b60
    4224:	20000af4 	.word	0x20000af4
    4228:	20000b24 	.word	0x20000b24
    422c:	0000a7a0 	.word	0x0000a7a0
    4230:	00009eb7 	.word	0x00009eb7
    4234:	0000b174 	.word	0x0000b174
    4238:	20001290 	.word	0x20001290
    423c:	e000e100 	.word	0xe000e100
    4240:	0000a05a 	.word	0x0000a05a

00004244 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4244:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4246:	4b08      	ldr	r3, [pc, #32]	; (4268 <uart_console_init+0x24>)
    4248:	4808      	ldr	r0, [pc, #32]	; (426c <uart_console_init+0x28>)
    424a:	6018      	str	r0, [r3, #0]
    424c:	f005 fa43 	bl	96d6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4250:	b138      	cbz	r0, 4262 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4252:	4807      	ldr	r0, [pc, #28]	; (4270 <uart_console_init+0x2c>)
    4254:	f7ff fb80 	bl	3958 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4258:	4805      	ldr	r0, [pc, #20]	; (4270 <uart_console_init+0x2c>)
    425a:	f7fc ff87 	bl	116c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    425e:	2000      	movs	r0, #0
}
    4260:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4262:	f06f 0012 	mvn.w	r0, #18
    4266:	e7fb      	b.n	4260 <uart_console_init+0x1c>
    4268:	20000b64 	.word	0x20000b64
    426c:	00009918 	.word	0x00009918
    4270:	00004275 	.word	0x00004275

00004274 <console_out>:
	if ('\n' == c) {
    4274:	280a      	cmp	r0, #10
{
    4276:	b538      	push	{r3, r4, r5, lr}
    4278:	4d07      	ldr	r5, [pc, #28]	; (4298 <console_out+0x24>)
    427a:	4604      	mov	r4, r0
	if ('\n' == c) {
    427c:	d104      	bne.n	4288 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    427e:	6828      	ldr	r0, [r5, #0]
    4280:	6883      	ldr	r3, [r0, #8]
    4282:	210d      	movs	r1, #13
    4284:	685b      	ldr	r3, [r3, #4]
    4286:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4288:	6828      	ldr	r0, [r5, #0]
    428a:	6883      	ldr	r3, [r0, #8]
    428c:	b2e1      	uxtb	r1, r4
    428e:	685b      	ldr	r3, [r3, #4]
    4290:	4798      	blx	r3
}
    4292:	4620      	mov	r0, r4
    4294:	bd38      	pop	{r3, r4, r5, pc}
    4296:	bf00      	nop
    4298:	20000b64 	.word	0x20000b64

0000429c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    429c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    429e:	6905      	ldr	r5, [r0, #16]
{
    42a0:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    42a2:	460c      	mov	r4, r1
    42a4:	b961      	cbnz	r1, 42c0 <gpio_nrfx_manage_callback+0x24>
    42a6:	4922      	ldr	r1, [pc, #136]	; (4330 <gpio_nrfx_manage_callback+0x94>)
    42a8:	4a22      	ldr	r2, [pc, #136]	; (4334 <gpio_nrfx_manage_callback+0x98>)
    42aa:	4823      	ldr	r0, [pc, #140]	; (4338 <gpio_nrfx_manage_callback+0x9c>)
    42ac:	2324      	movs	r3, #36	; 0x24
    42ae:	f004 fe3c 	bl	8f2a <assert_print>
    42b2:	4822      	ldr	r0, [pc, #136]	; (433c <gpio_nrfx_manage_callback+0xa0>)
    42b4:	f004 fe39 	bl	8f2a <assert_print>
    42b8:	481e      	ldr	r0, [pc, #120]	; (4334 <gpio_nrfx_manage_callback+0x98>)
    42ba:	2124      	movs	r1, #36	; 0x24
    42bc:	f004 fe2e 	bl	8f1c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    42c0:	6863      	ldr	r3, [r4, #4]
    42c2:	b963      	cbnz	r3, 42de <gpio_nrfx_manage_callback+0x42>
    42c4:	491e      	ldr	r1, [pc, #120]	; (4340 <gpio_nrfx_manage_callback+0xa4>)
    42c6:	4a1b      	ldr	r2, [pc, #108]	; (4334 <gpio_nrfx_manage_callback+0x98>)
    42c8:	481b      	ldr	r0, [pc, #108]	; (4338 <gpio_nrfx_manage_callback+0x9c>)
    42ca:	2325      	movs	r3, #37	; 0x25
    42cc:	f004 fe2d 	bl	8f2a <assert_print>
    42d0:	481c      	ldr	r0, [pc, #112]	; (4344 <gpio_nrfx_manage_callback+0xa8>)
    42d2:	f004 fe2a 	bl	8f2a <assert_print>
    42d6:	4817      	ldr	r0, [pc, #92]	; (4334 <gpio_nrfx_manage_callback+0x98>)
    42d8:	2125      	movs	r1, #37	; 0x25
    42da:	f004 fe1f 	bl	8f1c <assert_post_action>
	return list->head;
    42de:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    42e0:	b15b      	cbz	r3, 42fa <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    42e2:	2200      	movs	r2, #0
    42e4:	429c      	cmp	r4, r3
    42e6:	d112      	bne.n	430e <gpio_nrfx_manage_callback+0x72>
	return node->next;
    42e8:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    42ea:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    42ec:	b952      	cbnz	r2, 4304 <gpio_nrfx_manage_callback+0x68>
    42ee:	42a1      	cmp	r1, r4
	list->head = node;
    42f0:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    42f2:	d100      	bne.n	42f6 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    42f4:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    42f6:	2300      	movs	r3, #0
    42f8:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    42fa:	b96e      	cbnz	r6, 4318 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    42fc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    42fe:	bd70      	pop	{r4, r5, r6, pc}
    4300:	460b      	mov	r3, r1
    4302:	e7ef      	b.n	42e4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    4304:	42a1      	cmp	r1, r4
	parent->next = child;
    4306:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4308:	bf08      	it	eq
    430a:	60aa      	streq	r2, [r5, #8]
}
    430c:	e7f3      	b.n	42f6 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    430e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4310:	461a      	mov	r2, r3
    4312:	2900      	cmp	r1, #0
    4314:	d1f4      	bne.n	4300 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    4316:	b13e      	cbz	r6, 4328 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    4318:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    431a:	686b      	ldr	r3, [r5, #4]
    431c:	6023      	str	r3, [r4, #0]
	list->head = node;
    431e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4320:	2800      	cmp	r0, #0
    4322:	d1eb      	bne.n	42fc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    4324:	60ac      	str	r4, [r5, #8]
}
    4326:	e7ea      	b.n	42fe <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    4328:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    432c:	e7e7      	b.n	42fe <gpio_nrfx_manage_callback+0x62>
    432e:	bf00      	nop
    4330:	0000b222 	.word	0x0000b222
    4334:	0000b1f5 	.word	0x0000b1f5
    4338:	00009eb7 	.word	0x00009eb7
    433c:	0000b22b 	.word	0x0000b22b
    4340:	0000b23a 	.word	0x0000b23a
    4344:	0000b24c 	.word	0x0000b24c

00004348 <gpio_nrfx_pin_interrupt_configure>:
{
    4348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    434a:	460e      	mov	r6, r1
	return port->config;
    434c:	6841      	ldr	r1, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    434e:	7b08      	ldrb	r0, [r1, #12]
    4350:	f006 041f 	and.w	r4, r6, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4354:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4358:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    435c:	f04f 0500 	mov.w	r5, #0
    4360:	d104      	bne.n	436c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    4362:	4620      	mov	r0, r4
    4364:	f001 fb60 	bl	5a28 <nrfx_gpiote_trigger_disable>
	return 0;
    4368:	2000      	movs	r0, #0
    436a:	e053      	b.n	4414 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    436c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4370:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4374:	d150      	bne.n	4418 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    437a:	bf0c      	ite	eq
    437c:	2304      	moveq	r3, #4
    437e:	2305      	movne	r3, #5
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4380:	6889      	ldr	r1, [r1, #8]
	nrfx_gpiote_trigger_config_t trigger_config = {
    4382:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4386:	40f1      	lsrs	r1, r6
    4388:	f011 0101 	ands.w	r1, r1, #1
    438c:	d155      	bne.n	443a <gpio_nrfx_pin_interrupt_configure+0xf2>
    438e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4392:	d152      	bne.n	443a <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    4394:	0966      	lsrs	r6, r4, #5
    4396:	d04a      	beq.n	442e <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    4398:	f64f 73ff 	movw	r3, #65535	; 0xffff
    439c:	2e01      	cmp	r6, #1
    439e:	bf08      	it	eq
    43a0:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    43a2:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    43a6:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    43a8:	07ca      	lsls	r2, r1, #31
    43aa:	d40b      	bmi.n	43c4 <gpio_nrfx_pin_interrupt_configure+0x7c>
    43ac:	492b      	ldr	r1, [pc, #172]	; (445c <gpio_nrfx_pin_interrupt_configure+0x114>)
    43ae:	482c      	ldr	r0, [pc, #176]	; (4460 <gpio_nrfx_pin_interrupt_configure+0x118>)
    43b0:	4a2c      	ldr	r2, [pc, #176]	; (4464 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43b2:	f240 2329 	movw	r3, #553	; 0x229
    43b6:	f004 fdb8 	bl	8f2a <assert_print>
    43ba:	482a      	ldr	r0, [pc, #168]	; (4464 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43bc:	f240 2129 	movw	r1, #553	; 0x229
    43c0:	f004 fdac 	bl	8f1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43c4:	b16e      	cbz	r6, 43e2 <gpio_nrfx_pin_interrupt_configure+0x9a>
    43c6:	2e01      	cmp	r6, #1
    43c8:	d034      	beq.n	4434 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    43ca:	4927      	ldr	r1, [pc, #156]	; (4468 <gpio_nrfx_pin_interrupt_configure+0x120>)
    43cc:	4824      	ldr	r0, [pc, #144]	; (4460 <gpio_nrfx_pin_interrupt_configure+0x118>)
    43ce:	4a25      	ldr	r2, [pc, #148]	; (4464 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43d0:	f240 232e 	movw	r3, #558	; 0x22e
    43d4:	f004 fda9 	bl	8f2a <assert_print>
    43d8:	4822      	ldr	r0, [pc, #136]	; (4464 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43da:	f240 212e 	movw	r1, #558	; 0x22e
    43de:	f004 fd9d 	bl	8f1c <assert_post_action>
        case 0: return NRF_P0;
    43e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    43e6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    43ea:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    43ee:	07db      	lsls	r3, r3, #31
    43f0:	d423      	bmi.n	443a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    43f2:	f10d 0507 	add.w	r5, sp, #7
    43f6:	4629      	mov	r1, r5
    43f8:	4620      	mov	r0, r4
    43fa:	f001 fa39 	bl	5870 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    43fe:	4b1b      	ldr	r3, [pc, #108]	; (446c <gpio_nrfx_pin_interrupt_configure+0x124>)
    4400:	4298      	cmp	r0, r3
    4402:	d119      	bne.n	4438 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    4404:	4628      	mov	r0, r5
    4406:	f001 fa95 	bl	5934 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    440a:	4b19      	ldr	r3, [pc, #100]	; (4470 <gpio_nrfx_pin_interrupt_configure+0x128>)
    440c:	4298      	cmp	r0, r3
    440e:	d013      	beq.n	4438 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    4410:	f06f 000b 	mvn.w	r0, #11
}
    4414:	b004      	add	sp, #16
    4416:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4418:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    441c:	d005      	beq.n	442a <gpio_nrfx_pin_interrupt_configure+0xe2>
    441e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4422:	bf0c      	ite	eq
    4424:	2302      	moveq	r3, #2
    4426:	2301      	movne	r3, #1
    4428:	e7aa      	b.n	4380 <gpio_nrfx_pin_interrupt_configure+0x38>
    442a:	2303      	movs	r3, #3
    442c:	e7a8      	b.n	4380 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
    442e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4432:	e7b6      	b.n	43a2 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4434:	4b0f      	ldr	r3, [pc, #60]	; (4474 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    4436:	e7d6      	b.n	43e6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4438:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    443a:	2300      	movs	r3, #0
    443c:	4619      	mov	r1, r3
    443e:	aa02      	add	r2, sp, #8
    4440:	4620      	mov	r0, r4
    4442:	f001 f8ed 	bl	5620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4446:	4b0a      	ldr	r3, [pc, #40]	; (4470 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4448:	4298      	cmp	r0, r3
    444a:	d104      	bne.n	4456 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    444c:	2101      	movs	r1, #1
    444e:	4620      	mov	r0, r4
    4450:	f001 fa76 	bl	5940 <nrfx_gpiote_trigger_enable>
    4454:	e788      	b.n	4368 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    4456:	f06f 0004 	mvn.w	r0, #4
    445a:	e7db      	b.n	4414 <gpio_nrfx_pin_interrupt_configure+0xcc>
    445c:	0000b296 	.word	0x0000b296
    4460:	00009eb7 	.word	0x00009eb7
    4464:	0000b263 	.word	0x0000b263
    4468:	0000a05a 	.word	0x0000a05a
    446c:	0bad0004 	.word	0x0bad0004
    4470:	0bad0000 	.word	0x0bad0000
    4474:	50000300 	.word	0x50000300

00004478 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4478:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    447a:	f001 fa4b 	bl	5914 <nrfx_gpiote_is_init>
    447e:	4604      	mov	r4, r0
    4480:	b968      	cbnz	r0, 449e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4482:	f001 fa1f 	bl	58c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4486:	4b08      	ldr	r3, [pc, #32]	; (44a8 <gpio_nrfx_init+0x30>)
    4488:	4298      	cmp	r0, r3
    448a:	d10a      	bne.n	44a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    448c:	4807      	ldr	r0, [pc, #28]	; (44ac <gpio_nrfx_init+0x34>)
    448e:	4621      	mov	r1, r4
    4490:	f001 f9e8 	bl	5864 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4494:	4622      	mov	r2, r4
    4496:	2105      	movs	r1, #5
    4498:	2006      	movs	r0, #6
    449a:	f7fe fc4d 	bl	2d38 <z_arm_irq_priority_set>
		return 0;
    449e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    44a0:	bd10      	pop	{r4, pc}
		return -EIO;
    44a2:	f06f 0004 	mvn.w	r0, #4
    44a6:	e7fb      	b.n	44a0 <gpio_nrfx_init+0x28>
    44a8:	0bad0000 	.word	0x0bad0000
    44ac:	000044b1 	.word	0x000044b1

000044b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    44b0:	0943      	lsrs	r3, r0, #5
{
    44b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    44b6:	d003      	beq.n	44c0 <nrfx_gpio_handler+0x10>
    44b8:	2b01      	cmp	r3, #1
    44ba:	d02e      	beq.n	451a <nrfx_gpio_handler+0x6a>
}
    44bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    44c0:	4f17      	ldr	r7, [pc, #92]	; (4520 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    44c2:	693b      	ldr	r3, [r7, #16]
    44c4:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    44c6:	2c00      	cmp	r4, #0
    44c8:	d0f8      	beq.n	44bc <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    44ca:	f000 001f 	and.w	r0, r0, #31
    44ce:	2601      	movs	r6, #1
	return node->next;
    44d0:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    44d2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4524 <nrfx_gpio_handler+0x74>
    44d6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4528 <nrfx_gpio_handler+0x78>
    44da:	f8df a050 	ldr.w	sl, [pc, #80]	; 452c <nrfx_gpio_handler+0x7c>
    44de:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    44e0:	68a3      	ldr	r3, [r4, #8]
    44e2:	421e      	tst	r6, r3
    44e4:	d014      	beq.n	4510 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    44e6:	6863      	ldr	r3, [r4, #4]
    44e8:	b963      	cbnz	r3, 4504 <nrfx_gpio_handler+0x54>
    44ea:	4649      	mov	r1, r9
    44ec:	2345      	movs	r3, #69	; 0x45
    44ee:	4642      	mov	r2, r8
    44f0:	4650      	mov	r0, sl
    44f2:	f004 fd1a 	bl	8f2a <assert_print>
    44f6:	480e      	ldr	r0, [pc, #56]	; (4530 <nrfx_gpio_handler+0x80>)
    44f8:	f004 fd17 	bl	8f2a <assert_print>
    44fc:	2145      	movs	r1, #69	; 0x45
    44fe:	4640      	mov	r0, r8
    4500:	f004 fd0c 	bl	8f1c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    4504:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4508:	4621      	mov	r1, r4
    450a:	4032      	ands	r2, r6
    450c:	4638      	mov	r0, r7
    450e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4510:	2d00      	cmp	r5, #0
    4512:	d0d3      	beq.n	44bc <nrfx_gpio_handler+0xc>
    4514:	462c      	mov	r4, r5
    4516:	682d      	ldr	r5, [r5, #0]
    4518:	e7e2      	b.n	44e0 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    451a:	4f06      	ldr	r7, [pc, #24]	; (4534 <nrfx_gpio_handler+0x84>)
    451c:	e7d1      	b.n	44c2 <nrfx_gpio_handler+0x12>
    451e:	bf00      	nop
    4520:	000098e8 	.word	0x000098e8
    4524:	0000b1f5 	.word	0x0000b1f5
    4528:	0000b2b9 	.word	0x0000b2b9
    452c:	00009eb7 	.word	0x00009eb7
    4530:	0000b24c 	.word	0x0000b24c
    4534:	000098d0 	.word	0x000098d0

00004538 <gpio_nrfx_pin_configure>:
{
    4538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    453c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    453e:	7b3b      	ldrb	r3, [r7, #12]
    4540:	f001 051f 	and.w	r5, r1, #31
{
    4544:	b085      	sub	sp, #20
    4546:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4548:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    454c:	4614      	mov	r4, r2
    454e:	b9ca      	cbnz	r2, 4584 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4550:	a902      	add	r1, sp, #8
    4552:	4628      	mov	r0, r5
    4554:	f001 f98c 	bl	5870 <nrfx_gpiote_channel_get>
    4558:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    455a:	4628      	mov	r0, r5
    455c:	f001 fa8e 	bl	5a7c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4560:	4b49      	ldr	r3, [pc, #292]	; (4688 <gpio_nrfx_pin_configure+0x150>)
    4562:	4298      	cmp	r0, r3
    4564:	d004      	beq.n	4570 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4566:	f06f 0004 	mvn.w	r0, #4
}
    456a:	b005      	add	sp, #20
    456c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4570:	4284      	cmp	r4, r0
    4572:	d105      	bne.n	4580 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4574:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4578:	f001 f9d6 	bl	5928 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    457c:	42a0      	cmp	r0, r4
    457e:	d1f2      	bne.n	4566 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4580:	2000      	movs	r0, #0
    4582:	e7f2      	b.n	456a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4584:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4588:	f10d 0103 	add.w	r1, sp, #3
    458c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    458e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4592:	f001 f96d 	bl	5870 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4596:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4598:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    459a:	aa02      	add	r2, sp, #8
    459c:	4649      	mov	r1, r9
    459e:	4628      	mov	r0, r5
    45a0:	f001 f83e 	bl	5620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    45a4:	4b38      	ldr	r3, [pc, #224]	; (4688 <gpio_nrfx_pin_configure+0x150>)
    45a6:	4298      	cmp	r0, r3
    45a8:	d002      	beq.n	45b0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    45aa:	f06f 0015 	mvn.w	r0, #21
    45ae:	e7dc      	b.n	456a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    45b0:	4580      	cmp	r8, r0
    45b2:	d103      	bne.n	45bc <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    45b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    45b8:	f001 f9b6 	bl	5928 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    45bc:	03a3      	lsls	r3, r4, #14
    45be:	d54f      	bpl.n	4660 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    45c0:	f240 6306 	movw	r3, #1542	; 0x606
    45c4:	4023      	ands	r3, r4
    45c6:	f240 2206 	movw	r2, #518	; 0x206
    45ca:	4293      	cmp	r3, r2
    45cc:	d03a      	beq.n	4644 <gpio_nrfx_pin_configure+0x10c>
    45ce:	d80c      	bhi.n	45ea <gpio_nrfx_pin_configure+0xb2>
    45d0:	2b06      	cmp	r3, #6
    45d2:	d015      	beq.n	4600 <gpio_nrfx_pin_configure+0xc8>
    45d4:	d804      	bhi.n	45e0 <gpio_nrfx_pin_configure+0xa8>
    45d6:	b19b      	cbz	r3, 4600 <gpio_nrfx_pin_configure+0xc8>
    45d8:	2b02      	cmp	r3, #2
    45da:	d1e6      	bne.n	45aa <gpio_nrfx_pin_configure+0x72>
    45dc:	2304      	movs	r3, #4
    45de:	e00f      	b.n	4600 <gpio_nrfx_pin_configure+0xc8>
    45e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    45e4:	d1e1      	bne.n	45aa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    45e6:	2301      	movs	r3, #1
    45e8:	e00a      	b.n	4600 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    45ea:	f240 4202 	movw	r2, #1026	; 0x402
    45ee:	4293      	cmp	r3, r2
    45f0:	d02a      	beq.n	4648 <gpio_nrfx_pin_configure+0x110>
    45f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    45f6:	d029      	beq.n	464c <gpio_nrfx_pin_configure+0x114>
    45f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    45fc:	d1d5      	bne.n	45aa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    45fe:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4600:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4604:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4608:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    460c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    460e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    4612:	bf54      	ite	pl
    4614:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
    4618:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    461a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    461c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4620:	d516      	bpl.n	4650 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4622:	687a      	ldr	r2, [r7, #4]
    4624:	2301      	movs	r3, #1
    4626:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4628:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    462c:	2200      	movs	r2, #0
    462e:	a901      	add	r1, sp, #4
    4630:	4628      	mov	r0, r5
    4632:	f001 f8a3 	bl	577c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4636:	4b14      	ldr	r3, [pc, #80]	; (4688 <gpio_nrfx_pin_configure+0x150>)
    4638:	4298      	cmp	r0, r3
    463a:	bf14      	ite	ne
    463c:	f06f 0015 	mvnne.w	r0, #21
    4640:	2000      	moveq	r0, #0
    4642:	e792      	b.n	456a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4644:	2307      	movs	r3, #7
    4646:	e7db      	b.n	4600 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4648:	2305      	movs	r3, #5
    464a:	e7d9      	b.n	4600 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    464c:	2303      	movs	r3, #3
    464e:	e7d7      	b.n	4600 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4650:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4652:	bf41      	itttt	mi
    4654:	2301      	movmi	r3, #1
    4656:	687a      	ldrmi	r2, [r7, #4]
    4658:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    465a:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    465e:	e7e5      	b.n	462c <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    4660:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4662:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4666:	bf54      	ite	pl
    4668:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    466c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    466e:	461a      	mov	r2, r3
    4670:	a901      	add	r1, sp, #4
    4672:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4674:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4678:	f000 ffd2 	bl	5620 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    467c:	4b02      	ldr	r3, [pc, #8]	; (4688 <gpio_nrfx_pin_configure+0x150>)
    467e:	4298      	cmp	r0, r3
    4680:	f43f af7e 	beq.w	4580 <gpio_nrfx_pin_configure+0x48>
    4684:	e791      	b.n	45aa <gpio_nrfx_pin_configure+0x72>
    4686:	bf00      	nop
    4688:	0bad0000 	.word	0x0bad0000

0000468c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    468c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    468e:	ab0b      	add	r3, sp, #44	; 0x2c
    4690:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    4692:	9303      	str	r3, [sp, #12]
    4694:	4b05      	ldr	r3, [pc, #20]	; (46ac <z_log_msg2_runtime_create.constprop.0+0x20>)
    4696:	9302      	str	r3, [sp, #8]
    4698:	2300      	movs	r3, #0
    469a:	e9cd 3300 	strd	r3, r3, [sp]
    469e:	2201      	movs	r2, #1
    46a0:	4618      	mov	r0, r3
    46a2:	f7fd ff4d 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    46a6:	b007      	add	sp, #28
    46a8:	f85d fb04 	ldr.w	pc, [sp], #4
    46ac:	0000b2d3 	.word	0x0000b2d3

000046b0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    46b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    46b2:	794b      	ldrb	r3, [r1, #5]
    46b4:	2b01      	cmp	r3, #1
    46b6:	d026      	beq.n	4706 <uarte_nrfx_configure+0x56>
    46b8:	2b03      	cmp	r3, #3
    46ba:	d121      	bne.n	4700 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    46bc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    46be:	798b      	ldrb	r3, [r1, #6]
    46c0:	2b03      	cmp	r3, #3
    46c2:	d11d      	bne.n	4700 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    46c4:	79cc      	ldrb	r4, [r1, #7]
    46c6:	b10c      	cbz	r4, 46cc <uarte_nrfx_configure+0x1c>
    46c8:	2c01      	cmp	r4, #1
    46ca:	d119      	bne.n	4700 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    46cc:	790a      	ldrb	r2, [r1, #4]
    46ce:	b112      	cbz	r2, 46d6 <uarte_nrfx_configure+0x26>
    46d0:	2a02      	cmp	r2, #2
    46d2:	d115      	bne.n	4700 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    46d4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    46d6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    46d8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    46da:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    46de:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    46e0:	d065      	beq.n	47ae <uarte_nrfx_configure+0xfe>
    46e2:	d82d      	bhi.n	4740 <uarte_nrfx_configure+0x90>
    46e4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    46e8:	d064      	beq.n	47b4 <uarte_nrfx_configure+0x104>
    46ea:	d816      	bhi.n	471a <uarte_nrfx_configure+0x6a>
    46ec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    46f0:	d062      	beq.n	47b8 <uarte_nrfx_configure+0x108>
    46f2:	d80a      	bhi.n	470a <uarte_nrfx_configure+0x5a>
    46f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    46f8:	d061      	beq.n	47be <uarte_nrfx_configure+0x10e>
    46fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    46fe:	d061      	beq.n	47c4 <uarte_nrfx_configure+0x114>
    4700:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4704:	e052      	b.n	47ac <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    4706:	2600      	movs	r6, #0
    4708:	e7d9      	b.n	46be <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    470a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    470e:	d05c      	beq.n	47ca <uarte_nrfx_configure+0x11a>
    4710:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4714:	d1f4      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4716:	4b37      	ldr	r3, [pc, #220]	; (47f4 <uarte_nrfx_configure+0x144>)
    4718:	e03c      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    471a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    471e:	d057      	beq.n	47d0 <uarte_nrfx_configure+0x120>
    4720:	d807      	bhi.n	4732 <uarte_nrfx_configure+0x82>
    4722:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4726:	d055      	beq.n	47d4 <uarte_nrfx_configure+0x124>
    4728:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    472c:	d1e8      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    472e:	4b32      	ldr	r3, [pc, #200]	; (47f8 <uarte_nrfx_configure+0x148>)
    4730:	e030      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4732:	f647 2712 	movw	r7, #31250	; 0x7a12
    4736:	42bb      	cmp	r3, r7
    4738:	d1e2      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    473a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    473e:	e029      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4740:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4744:	d048      	beq.n	47d8 <uarte_nrfx_configure+0x128>
    4746:	d813      	bhi.n	4770 <uarte_nrfx_configure+0xc0>
    4748:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    474c:	d047      	beq.n	47de <uarte_nrfx_configure+0x12e>
    474e:	d809      	bhi.n	4764 <uarte_nrfx_configure+0xb4>
    4750:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4754:	42bb      	cmp	r3, r7
    4756:	d044      	beq.n	47e2 <uarte_nrfx_configure+0x132>
    4758:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    475c:	d1d0      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    475e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4762:	e017      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4764:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4768:	d1ca      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    476a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    476e:	e011      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4770:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4774:	d038      	beq.n	47e8 <uarte_nrfx_configure+0x138>
    4776:	d808      	bhi.n	478a <uarte_nrfx_configure+0xda>
    4778:	4f20      	ldr	r7, [pc, #128]	; (47fc <uarte_nrfx_configure+0x14c>)
    477a:	42bb      	cmp	r3, r7
    477c:	d037      	beq.n	47ee <uarte_nrfx_configure+0x13e>
    477e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4782:	d1bd      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4784:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4788:	e004      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    478a:	4f1d      	ldr	r7, [pc, #116]	; (4800 <uarte_nrfx_configure+0x150>)
    478c:	42bb      	cmp	r3, r7
    478e:	d1b7      	bne.n	4700 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    4794:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4796:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    479a:	1d03      	adds	r3, r0, #4
    479c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    479e:	4334      	orrs	r4, r6
    47a0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    47a2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    47a6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    47aa:	2000      	movs	r0, #0
}
    47ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    47ae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    47b2:	e7ef      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    47b4:	4b13      	ldr	r3, [pc, #76]	; (4804 <uarte_nrfx_configure+0x154>)
    47b6:	e7ed      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    47b8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    47bc:	e7ea      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    47be:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    47c2:	e7e7      	b.n	4794 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    47c4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    47c8:	e7e4      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    47ca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    47ce:	e7e1      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    47d0:	4b0d      	ldr	r3, [pc, #52]	; (4808 <uarte_nrfx_configure+0x158>)
    47d2:	e7df      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    47d4:	4b0d      	ldr	r3, [pc, #52]	; (480c <uarte_nrfx_configure+0x15c>)
    47d6:	e7dd      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    47d8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    47dc:	e7da      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    47de:	4b0c      	ldr	r3, [pc, #48]	; (4810 <uarte_nrfx_configure+0x160>)
    47e0:	e7d8      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    47e2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    47e6:	e7d5      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    47e8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    47ec:	e7d2      	b.n	4794 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    47ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    47f2:	e7cf      	b.n	4794 <uarte_nrfx_configure+0xe4>
    47f4:	0013b000 	.word	0x0013b000
    47f8:	004ea000 	.word	0x004ea000
    47fc:	0003d090 	.word	0x0003d090
    4800:	000f4240 	.word	0x000f4240
    4804:	00275000 	.word	0x00275000
    4808:	0075c000 	.word	0x0075c000
    480c:	003af000 	.word	0x003af000
    4810:	013a9000 	.word	0x013a9000

00004814 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4818:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    481c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    481e:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    4822:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    4826:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4828:	2100      	movs	r1, #0
    482a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    482e:	4607      	mov	r7, r0
	data->dev = dev;
    4830:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4832:	aa05      	add	r2, sp, #20
    4834:	4648      	mov	r0, r9
    4836:	f004 fdbd 	bl	93b4 <pinctrl_lookup_state>
	if (ret < 0) {
    483a:	1e04      	subs	r4, r0, #0
    483c:	db25      	blt.n	488a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    483e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4840:	f8d9 2000 	ldr.w	r2, [r9]
    4844:	7919      	ldrb	r1, [r3, #4]
    4846:	6818      	ldr	r0, [r3, #0]
    4848:	f004 fe0b 	bl	9462 <pinctrl_configure_pins>
	if (err < 0) {
    484c:	1e04      	subs	r4, r0, #0
    484e:	db1c      	blt.n	488a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4850:	1d31      	adds	r1, r6, #4
    4852:	4638      	mov	r0, r7
    4854:	f7ff ff2c 	bl	46b0 <uarte_nrfx_configure>
	if (err) {
    4858:	4604      	mov	r4, r0
    485a:	b9b0      	cbnz	r0, 488a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    485c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4860:	0799      	lsls	r1, r3, #30
    4862:	d529      	bpl.n	48b8 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4864:	f106 0012 	add.w	r0, r6, #18
    4868:	f001 fa04 	bl	5c74 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    486c:	4b27      	ldr	r3, [pc, #156]	; (490c <uarte_instance_init.constprop.0+0xf8>)
    486e:	4298      	cmp	r0, r3
    4870:	d00f      	beq.n	4892 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    4872:	4b27      	ldr	r3, [pc, #156]	; (4910 <uarte_instance_init.constprop.0+0xfc>)
    4874:	9400      	str	r4, [sp, #0]
    4876:	e9cd 4301 	strd	r4, r3, [sp, #4]
    487a:	4620      	mov	r0, r4
    487c:	4623      	mov	r3, r4
    487e:	4925      	ldr	r1, [pc, #148]	; (4914 <uarte_instance_init.constprop.0+0x100>)
    4880:	2201      	movs	r2, #1
    4882:	f7ff ff03 	bl	468c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    4886:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    488a:	4620      	mov	r0, r4
    488c:	b007      	add	sp, #28
    488e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4892:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4894:	00c3      	lsls	r3, r0, #3
    4896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    489a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    489e:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    48a2:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    48a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    48aa:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    48ae:	4a1a      	ldr	r2, [pc, #104]	; (4918 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    48b0:	2301      	movs	r3, #1
    48b2:	4083      	lsls	r3, r0
    48b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    48b8:	2308      	movs	r3, #8
    48ba:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    48be:	f898 3008 	ldrb.w	r3, [r8, #8]
    48c2:	b95b      	cbnz	r3, 48dc <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48c4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    48c8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    48cc:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    48d0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    48d4:	2301      	movs	r3, #1
    48d6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48da:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    48dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    48e0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    48e2:	bf5c      	itt	pl
    48e4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    48e8:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    48ec:	06db      	lsls	r3, r3, #27
    48ee:	bf44      	itt	mi
    48f0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    48f4:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    48f8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    48fa:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    48fc:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4900:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4904:	2301      	movs	r3, #1
    4906:	60ab      	str	r3, [r5, #8]
    4908:	60eb      	str	r3, [r5, #12]
	return 0;
    490a:	e7be      	b.n	488a <uarte_instance_init.constprop.0+0x76>
    490c:	0bad0000 	.word	0x0bad0000
    4910:	0000b2d3 	.word	0x0000b2d3
    4914:	00009b10 	.word	0x00009b10
    4918:	4001f000 	.word	0x4001f000

0000491c <uarte_nrfx_poll_out>:
{
    491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    491e:	6906      	ldr	r6, [r0, #16]
{
    4920:	4605      	mov	r5, r0
    4922:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4924:	f004 ff11 	bl	974a <k_is_in_isr>
    4928:	b910      	cbnz	r0, 4930 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    492a:	4b2c      	ldr	r3, [pc, #176]	; (49dc <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    492c:	781b      	ldrb	r3, [r3, #0]
    492e:	b983      	cbnz	r3, 4952 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4930:	f04f 0340 	mov.w	r3, #64	; 0x40
    4934:	f3ef 8411 	mrs	r4, BASEPRI
    4938:	f383 8812 	msr	BASEPRI_MAX, r3
    493c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4940:	6868      	ldr	r0, [r5, #4]
    4942:	f004 fccb 	bl	92dc <is_tx_ready.isra.0>
    4946:	bb28      	cbnz	r0, 4994 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4948:	f384 8811 	msr	BASEPRI, r4
    494c:	f3bf 8f6f 	isb	sy
}
    4950:	e7ee      	b.n	4930 <uarte_nrfx_poll_out+0x14>
{
    4952:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4954:	6868      	ldr	r0, [r5, #4]
    4956:	f004 fcc1 	bl	92dc <is_tx_ready.isra.0>
    495a:	b970      	cbnz	r0, 497a <uarte_nrfx_poll_out+0x5e>
    495c:	2001      	movs	r0, #1
    495e:	f004 fe34 	bl	95ca <nrfx_busy_wait>
    4962:	3c01      	subs	r4, #1
    4964:	d1f6      	bne.n	4954 <uarte_nrfx_poll_out+0x38>
    4966:	2100      	movs	r1, #0
    4968:	2021      	movs	r0, #33	; 0x21
    496a:	f003 f91b 	bl	7ba4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    496e:	e7f0      	b.n	4952 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4970:	f384 8811 	msr	BASEPRI, r4
    4974:	f3bf 8f6f 	isb	sy
}
    4978:	e7f5      	b.n	4966 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    497a:	f04f 0340 	mov.w	r3, #64	; 0x40
    497e:	f3ef 8411 	mrs	r4, BASEPRI
    4982:	f383 8812 	msr	BASEPRI_MAX, r3
    4986:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    498a:	6868      	ldr	r0, [r5, #4]
    498c:	f004 fca6 	bl	92dc <is_tx_ready.isra.0>
    4990:	2800      	cmp	r0, #0
    4992:	d0ed      	beq.n	4970 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    4994:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    4998:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    499a:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    499c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    499e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    49a2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a6:	2200      	movs	r2, #0
    49a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    49ac:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    49b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    49b4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    49b8:	684a      	ldr	r2, [r1, #4]
    49ba:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    49bc:	bf41      	itttt	mi
    49be:	2208      	movmi	r2, #8
    49c0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    49c4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    49c8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49cc:	2201      	movs	r2, #1
    49ce:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    49d0:	f384 8811 	msr	BASEPRI, r4
    49d4:	f3bf 8f6f 	isb	sy
}
    49d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49da:	bf00      	nop
    49dc:	20001290 	.word	0x20001290

000049e0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    49e0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    49e2:	2301      	movs	r3, #1
    49e4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    49e6:	4a0e      	ldr	r2, [pc, #56]	; (4a20 <compare_int_lock+0x40>)
    49e8:	f3bf 8f5b 	dmb	ish
    49ec:	43dc      	mvns	r4, r3
    49ee:	e852 1f00 	ldrex	r1, [r2]
    49f2:	ea01 0504 	and.w	r5, r1, r4
    49f6:	e842 5600 	strex	r6, r5, [r2]
    49fa:	2e00      	cmp	r6, #0
    49fc:	d1f7      	bne.n	49ee <compare_int_lock+0xe>
    49fe:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4a06:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4a08:	4806      	ldr	r0, [pc, #24]	; (4a24 <compare_int_lock+0x44>)
    4a0a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4a0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a12:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4a16:	420b      	tst	r3, r1
}
    4a18:	bf14      	ite	ne
    4a1a:	2001      	movne	r0, #1
    4a1c:	2000      	moveq	r0, #0
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
    4a20:	20000b84 	.word	0x20000b84
    4a24:	40011000 	.word	0x40011000

00004a28 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a28:	4918      	ldr	r1, [pc, #96]	; (4a8c <sys_clock_timeout_handler+0x64>)
{
    4a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a2c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4a2e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a32:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4a34:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4a38:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4a3c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4a3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4a42:	d221      	bcs.n	4a88 <sys_clock_timeout_handler+0x60>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4a44:	4b12      	ldr	r3, [pc, #72]	; (4a90 <sys_clock_timeout_handler+0x68>)
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	0a1a      	lsrs	r2, r3, #8
    4a4a:	061b      	lsls	r3, r3, #24
    4a4c:	195e      	adds	r6, r3, r5
    4a4e:	4b11      	ldr	r3, [pc, #68]	; (4a94 <sys_clock_timeout_handler+0x6c>)
    4a50:	f142 0700 	adc.w	r7, r2, #0
    4a54:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    4a58:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4a5a:	f003 fba7 	bl	81ac <sys_clock_announce>
    return p_reg->CC[ch];
    4a5e:	00a3      	lsls	r3, r4, #2
    4a60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a64:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4a68:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4a6c:	42aa      	cmp	r2, r5
    4a6e:	d10a      	bne.n	4a86 <sys_clock_timeout_handler+0x5e>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4a70:	b91e      	cbnz	r6, 4a7a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    4a72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4a76:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4a7a:	4a07      	ldr	r2, [pc, #28]	; (4a98 <sys_clock_timeout_handler+0x70>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4a7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4a80:	40a3      	lsls	r3, r4
    4a82:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    4a88:	2600      	movs	r6, #0
    4a8a:	e7e6      	b.n	4a5a <sys_clock_timeout_handler+0x32>
    4a8c:	200003f8 	.word	0x200003f8
    4a90:	20000b88 	.word	0x20000b88
    4a94:	200003e0 	.word	0x200003e0
    4a98:	40011000 	.word	0x40011000

00004a9c <compare_int_unlock>:
	if (key) {
    4a9c:	b311      	cbz	r1, 4ae4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a9e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    4aa2:	2301      	movs	r3, #1
    4aa4:	4a10      	ldr	r2, [pc, #64]	; (4ae8 <compare_int_unlock+0x4c>)
    4aa6:	4083      	lsls	r3, r0
    4aa8:	e852 cf00 	ldrex	ip, [r2]
    4aac:	ea4c 0c03 	orr.w	ip, ip, r3
    4ab0:	e842 c100 	strex	r1, ip, [r2]
    4ab4:	2900      	cmp	r1, #0
    4ab6:	d1f7      	bne.n	4aa8 <compare_int_unlock+0xc>
    4ab8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4abc:	4a0b      	ldr	r2, [pc, #44]	; (4aec <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ac2:	4083      	lsls	r3, r0
    4ac4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ac8:	4b09      	ldr	r3, [pc, #36]	; (4af0 <compare_int_unlock+0x54>)
    4aca:	f3bf 8f5b 	dmb	ish
    4ace:	681b      	ldr	r3, [r3, #0]
    4ad0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4ad4:	40c3      	lsrs	r3, r0
    4ad6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ad8:	bf42      	ittt	mi
    4ada:	4b06      	ldrmi	r3, [pc, #24]	; (4af4 <compare_int_unlock+0x58>)
    4adc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4ae0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4ae4:	4770      	bx	lr
    4ae6:	bf00      	nop
    4ae8:	20000b84 	.word	0x20000b84
    4aec:	40011000 	.word	0x40011000
    4af0:	20000b80 	.word	0x20000b80
    4af4:	e000e100 	.word	0xe000e100

00004af8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4af8:	4b0d      	ldr	r3, [pc, #52]	; (4b30 <z_nrf_rtc_timer_read+0x38>)
    4afa:	6818      	ldr	r0, [r3, #0]
    4afc:	0a01      	lsrs	r1, r0, #8
    4afe:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4b00:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4b04:	4b0b      	ldr	r3, [pc, #44]	; (4b34 <z_nrf_rtc_timer_read+0x3c>)
    4b06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4b0a:	1818      	adds	r0, r3, r0
    4b0c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4b14:	d20a      	bcs.n	4b2c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4b16:	4b08      	ldr	r3, [pc, #32]	; (4b38 <z_nrf_rtc_timer_read+0x40>)
    4b18:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b1c:	4290      	cmp	r0, r2
    4b1e:	eb71 0303 	sbcs.w	r3, r1, r3
    4b22:	d203      	bcs.n	4b2c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4b24:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4b28:	f141 0100 	adc.w	r1, r1, #0
}
    4b2c:	4770      	bx	lr
    4b2e:	bf00      	nop
    4b30:	20000b88 	.word	0x20000b88
    4b34:	40011000 	.word	0x40011000
    4b38:	200003e0 	.word	0x200003e0

00004b3c <compare_set>:
{
    4b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b40:	b085      	sub	sp, #20
    4b42:	4616      	mov	r6, r2
    4b44:	4698      	mov	r8, r3
    4b46:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4b48:	f7ff ff4a 	bl	49e0 <compare_int_lock>
    4b4c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4b4e:	f7ff ffd3 	bl	4af8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4b52:	42b0      	cmp	r0, r6
    4b54:	eb71 0308 	sbcs.w	r3, r1, r8
    4b58:	d276      	bcs.n	4c48 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    4b5a:	4b45      	ldr	r3, [pc, #276]	; (4c70 <compare_set+0x134>)
    4b5c:	1a30      	subs	r0, r6, r0
    4b5e:	eb68 0101 	sbc.w	r1, r8, r1
    4b62:	4298      	cmp	r0, r3
    4b64:	f171 0100 	sbcs.w	r1, r1, #0
    4b68:	d27f      	bcs.n	4c6a <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    4b6a:	4b42      	ldr	r3, [pc, #264]	; (4c74 <compare_set+0x138>)
    4b6c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4b70:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    4b74:	45d8      	cmp	r8, fp
    4b76:	bf08      	it	eq
    4b78:	4556      	cmpeq	r6, sl
    4b7a:	d050      	beq.n	4c1e <compare_set+0xe2>
    4b7c:	ea4f 0985 	mov.w	r9, r5, lsl #2
    4b80:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4b84:	f105 0750 	add.w	r7, r5, #80	; 0x50
    4b88:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    4b8c:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b92:	40ab      	lsls	r3, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4b94:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    4b96:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    4b9a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b9e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    4ba0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4ba4:	4b34      	ldr	r3, [pc, #208]	; (4c78 <compare_set+0x13c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4ba6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4baa:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    4bac:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4bb0:	1a40      	subs	r0, r0, r1
    4bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4bb6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4bba:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4bbc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    4bc0:	d107      	bne.n	4bd2 <compare_set+0x96>
    4bc2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    4bc6:	2013      	movs	r0, #19
    4bc8:	f004 fe0b 	bl	97e2 <z_impl_k_busy_wait>
    4bcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4bd0:	4b29      	ldr	r3, [pc, #164]	; (4c78 <compare_set+0x13c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4bd2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    4bd6:	eba4 000c 	sub.w	r0, r4, ip
    4bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4bde:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4be2:	bf88      	it	hi
    4be4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4be6:	2000      	movs	r0, #0
    4be8:	6038      	str	r0, [r7, #0]
    4bea:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    4bec:	9801      	ldr	r0, [sp, #4]
    4bee:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4bf2:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4bf6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4bfa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    4bfe:	4281      	cmp	r1, r0
    4c00:	d006      	beq.n	4c10 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    4c02:	1a20      	subs	r0, r4, r0
    4c04:	3802      	subs	r0, #2
    4c06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4c0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4c0e:	d819      	bhi.n	4c44 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    4c10:	1aa4      	subs	r4, r4, r2
    4c12:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4c16:	eb14 0a06 	adds.w	sl, r4, r6
    4c1a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4c1e:	4915      	ldr	r1, [pc, #84]	; (4c74 <compare_set+0x138>)
	cc_data[chan].callback = handler;
    4c20:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    4c22:	012b      	lsls	r3, r5, #4
    4c24:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    4c28:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4c2c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4c30:	6053      	str	r3, [r2, #4]
	return ret;
    4c32:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    4c34:	4628      	mov	r0, r5
    4c36:	9900      	ldr	r1, [sp, #0]
    4c38:	f7ff ff30 	bl	4a9c <compare_int_unlock>
}
    4c3c:	4620      	mov	r0, r4
    4c3e:	b005      	add	sp, #20
    4c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c44:	4620      	mov	r0, r4
    4c46:	e7b1      	b.n	4bac <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    4c48:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c4a:	4a0c      	ldr	r2, [pc, #48]	; (4c7c <compare_set+0x140>)
    4c4c:	f3bf 8f5b 	dmb	ish
    4c50:	40ab      	lsls	r3, r5
    4c52:	e852 0f00 	ldrex	r0, [r2]
    4c56:	4318      	orrs	r0, r3
    4c58:	e842 0100 	strex	r1, r0, [r2]
    4c5c:	2900      	cmp	r1, #0
    4c5e:	d1f8      	bne.n	4c52 <compare_set+0x116>
    4c60:	f3bf 8f5b 	dmb	ish
    4c64:	46b2      	mov	sl, r6
    4c66:	46c3      	mov	fp, r8
    4c68:	e7d9      	b.n	4c1e <compare_set+0xe2>
			return -EINVAL;
    4c6a:	f06f 0415 	mvn.w	r4, #21
    4c6e:	e7e1      	b.n	4c34 <compare_set+0xf8>
    4c70:	01000001 	.word	0x01000001
    4c74:	200003e8 	.word	0x200003e8
    4c78:	40011000 	.word	0x40011000
    4c7c:	20000b80 	.word	0x20000b80

00004c80 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4c82:	4b19      	ldr	r3, [pc, #100]	; (4ce8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4c84:	4d19      	ldr	r5, [pc, #100]	; (4cec <sys_clock_driver_init+0x6c>)
    4c86:	2400      	movs	r4, #0
    4c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c90:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4c94:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c9c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ca0:	4b13      	ldr	r3, [pc, #76]	; (4cf0 <sys_clock_driver_init+0x70>)
    4ca2:	2602      	movs	r6, #2
    4ca4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4ca8:	2101      	movs	r1, #1
    4caa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4cae:	2011      	movs	r0, #17
    4cb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4cb4:	4622      	mov	r2, r4
    4cb6:	f7fe f83f 	bl	2d38 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4cba:	2011      	movs	r0, #17
    4cbc:	f7fe f820 	bl	2d00 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4cc0:	4a0c      	ldr	r2, [pc, #48]	; (4cf4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4cc2:	2301      	movs	r3, #1
    4cc4:	60ab      	str	r3, [r5, #8]
    4cc6:	602b      	str	r3, [r5, #0]
    4cc8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4cca:	4b0b      	ldr	r3, [pc, #44]	; (4cf8 <sys_clock_driver_init+0x78>)
    4ccc:	4a0b      	ldr	r2, [pc, #44]	; (4cfc <sys_clock_driver_init+0x7c>)
    4cce:	9300      	str	r3, [sp, #0]
    4cd0:	9401      	str	r4, [sp, #4]
    4cd2:	2300      	movs	r3, #0
    4cd4:	4620      	mov	r0, r4
    4cd6:	f7ff ff31 	bl	4b3c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4cda:	4630      	mov	r0, r6
    4cdc:	f7ff fa0e 	bl	40fc <z_nrf_clock_control_lf_on>

	return 0;
}
    4ce0:	4620      	mov	r0, r4
    4ce2:	b002      	add	sp, #8
    4ce4:	bd70      	pop	{r4, r5, r6, pc}
    4ce6:	bf00      	nop
    4ce8:	200003e8 	.word	0x200003e8
    4cec:	40011000 	.word	0x40011000
    4cf0:	e000e100 	.word	0xe000e100
    4cf4:	20000b84 	.word	0x20000b84
    4cf8:	00004a29 	.word	0x00004a29
    4cfc:	007fffff 	.word	0x007fffff

00004d00 <rtc_nrf_isr>:
{
    4d00:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
    4d04:	4c2c      	ldr	r4, [pc, #176]	; (4db8 <rtc_nrf_isr+0xb8>)
    4d06:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4d0a:	0799      	lsls	r1, r3, #30
    4d0c:	d50b      	bpl.n	4d26 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d0e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4d12:	b143      	cbz	r3, 4d26 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4d14:	4a29      	ldr	r2, [pc, #164]	; (4dbc <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4d16:	2300      	movs	r3, #0
    4d18:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4d1c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4d20:	6813      	ldr	r3, [r2, #0]
    4d22:	3301      	adds	r3, #1
    4d24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4d26:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4d2a:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    4d2c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4d30:	03d2      	lsls	r2, r2, #15
    4d32:	d52d      	bpl.n	4d90 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4d34:	f3bf 8f5b 	dmb	ish
    4d38:	4a21      	ldr	r2, [pc, #132]	; (4dc0 <rtc_nrf_isr+0xc0>)
    4d3a:	e852 1f00 	ldrex	r1, [r2]
    4d3e:	f021 0001 	bic.w	r0, r1, #1
    4d42:	e842 0500 	strex	r5, r0, [r2]
    4d46:	2d00      	cmp	r5, #0
    4d48:	d1f7      	bne.n	4d3a <rtc_nrf_isr+0x3a>
    4d4a:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4d4e:	b911      	cbnz	r1, 4d56 <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4d50:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
    4d54:	b1e2      	cbz	r2, 4d90 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4d56:	2500      	movs	r5, #0
    4d58:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4d5c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4d60:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
    4d64:	f7ff fec8 	bl	4af8 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4d68:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4d6c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    4d6e:	4b15      	ldr	r3, [pc, #84]	; (4dc4 <rtc_nrf_isr+0xc4>)
    4d70:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4d74:	42b0      	cmp	r0, r6
    4d76:	41b9      	sbcs	r1, r7
    4d78:	d20f      	bcs.n	4d9a <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4d7a:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4d7c:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    4d80:	b141      	cbz	r1, 4d94 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    4d82:	f8cd 8000 	str.w	r8, [sp]
    4d86:	4632      	mov	r2, r6
    4d88:	463b      	mov	r3, r7
    4d8a:	2000      	movs	r0, #0
    4d8c:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4d8e:	e001      	b.n	4d94 <rtc_nrf_isr+0x94>
    4d90:	f383 8810 	msr	PRIMASK, r3
}
    4d94:	b002      	add	sp, #8
    4d96:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4d9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4d9e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4da2:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4da6:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
    4daa:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4db0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
    4db4:	e7e2      	b.n	4d7c <rtc_nrf_isr+0x7c>
    4db6:	bf00      	nop
    4db8:	40011000 	.word	0x40011000
    4dbc:	20000b88 	.word	0x20000b88
    4dc0:	20000b80 	.word	0x20000b80
    4dc4:	200003e8 	.word	0x200003e8

00004dc8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4dc8:	1c43      	adds	r3, r0, #1
{
    4dca:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4dcc:	d021      	beq.n	4e12 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4dce:	2801      	cmp	r0, #1
    4dd0:	dd21      	ble.n	4e16 <sys_clock_set_timeout+0x4e>
    4dd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4dd6:	da20      	bge.n	4e1a <sys_clock_set_timeout+0x52>
    4dd8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4dda:	f7ff fe8d 	bl	4af8 <z_nrf_rtc_timer_read>
    4dde:	4b10      	ldr	r3, [pc, #64]	; (4e20 <sys_clock_set_timeout+0x58>)
    4de0:	e9d3 1300 	ldrd	r1, r3, [r3]
    4de4:	1a42      	subs	r2, r0, r1
		ticks = 0;
    4de6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	uint64_t target_time = cyc + last_count;
    4dea:	480e      	ldr	r0, [pc, #56]	; (4e24 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    4dec:	bf28      	it	cs
    4dee:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4df0:	3201      	adds	r2, #1
    4df2:	4422      	add	r2, r4
	uint64_t target_time = cyc + last_count;
    4df4:	4282      	cmp	r2, r0
    4df6:	bf28      	it	cs
    4df8:	4602      	movcs	r2, r0
    4dfa:	1852      	adds	r2, r2, r1
    4dfc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4e00:	4909      	ldr	r1, [pc, #36]	; (4e28 <sys_clock_set_timeout+0x60>)
    4e02:	9001      	str	r0, [sp, #4]
    4e04:	9100      	str	r1, [sp, #0]
    4e06:	f143 0300 	adc.w	r3, r3, #0
    4e0a:	f7ff fe97 	bl	4b3c <compare_set>
}
    4e0e:	b002      	add	sp, #8
    4e10:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4e12:	4804      	ldr	r0, [pc, #16]	; (4e24 <sys_clock_set_timeout+0x5c>)
    4e14:	e7e0      	b.n	4dd8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4e16:	2400      	movs	r4, #0
    4e18:	e7df      	b.n	4dda <sys_clock_set_timeout+0x12>
    4e1a:	4c02      	ldr	r4, [pc, #8]	; (4e24 <sys_clock_set_timeout+0x5c>)
    4e1c:	e7dd      	b.n	4dda <sys_clock_set_timeout+0x12>
    4e1e:	bf00      	nop
    4e20:	200003f8 	.word	0x200003f8
    4e24:	007fffff 	.word	0x007fffff
    4e28:	00004a29 	.word	0x00004a29

00004e2c <sys_clock_elapsed>:
{
    4e2c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4e2e:	f7ff fe63 	bl	4af8 <z_nrf_rtc_timer_read>
    4e32:	4b02      	ldr	r3, [pc, #8]	; (4e3c <sys_clock_elapsed+0x10>)
    4e34:	681b      	ldr	r3, [r3, #0]
}
    4e36:	1ac0      	subs	r0, r0, r3
    4e38:	bd08      	pop	{r3, pc}
    4e3a:	bf00      	nop
    4e3c:	200003f8 	.word	0x200003f8

00004e40 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e40:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4e42:	0953      	lsrs	r3, r2, #5
{
    4e44:	b510      	push	{r4, lr}
    4e46:	4604      	mov	r4, r0
    switch (port)
    4e48:	d02c      	beq.n	4ea4 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    4e4a:	2b01      	cmp	r3, #1
    4e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4e50:	bf18      	it	ne
    4e52:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4e54:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4e58:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e5a:	07db      	lsls	r3, r3, #31
    4e5c:	d40b      	bmi.n	4e76 <nrf_gpio_pin_port_decode+0x36>
    4e5e:	4914      	ldr	r1, [pc, #80]	; (4eb0 <nrf_gpio_pin_port_decode+0x70>)
    4e60:	4814      	ldr	r0, [pc, #80]	; (4eb4 <nrf_gpio_pin_port_decode+0x74>)
    4e62:	4a15      	ldr	r2, [pc, #84]	; (4eb8 <nrf_gpio_pin_port_decode+0x78>)
    4e64:	f240 2329 	movw	r3, #553	; 0x229
    4e68:	f004 f85f 	bl	8f2a <assert_print>
    4e6c:	4812      	ldr	r0, [pc, #72]	; (4eb8 <nrf_gpio_pin_port_decode+0x78>)
    4e6e:	f240 2129 	movw	r1, #553	; 0x229
    4e72:	f004 f853 	bl	8f1c <assert_post_action>
    uint32_t pin_number = *p_pin;
    4e76:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4e78:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e7c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4e7e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e80:	d00d      	beq.n	4e9e <nrf_gpio_pin_port_decode+0x5e>
    4e82:	2b01      	cmp	r3, #1
    4e84:	d011      	beq.n	4eaa <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4e86:	490d      	ldr	r1, [pc, #52]	; (4ebc <nrf_gpio_pin_port_decode+0x7c>)
    4e88:	480a      	ldr	r0, [pc, #40]	; (4eb4 <nrf_gpio_pin_port_decode+0x74>)
    4e8a:	4a0b      	ldr	r2, [pc, #44]	; (4eb8 <nrf_gpio_pin_port_decode+0x78>)
    4e8c:	f240 232e 	movw	r3, #558	; 0x22e
    4e90:	f004 f84b 	bl	8f2a <assert_print>
    4e94:	4808      	ldr	r0, [pc, #32]	; (4eb8 <nrf_gpio_pin_port_decode+0x78>)
    4e96:	f240 212e 	movw	r1, #558	; 0x22e
    4e9a:	f004 f83f 	bl	8f1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4ea2:	bd10      	pop	{r4, pc}
    switch (port)
    4ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ea8:	e7d4      	b.n	4e54 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4eaa:	4805      	ldr	r0, [pc, #20]	; (4ec0 <nrf_gpio_pin_port_decode+0x80>)
    4eac:	e7f9      	b.n	4ea2 <nrf_gpio_pin_port_decode+0x62>
    4eae:	bf00      	nop
    4eb0:	0000b296 	.word	0x0000b296
    4eb4:	00009eb7 	.word	0x00009eb7
    4eb8:	0000b263 	.word	0x0000b263
    4ebc:	0000a05a 	.word	0x0000a05a
    4ec0:	50000300 	.word	0x50000300

00004ec4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4ec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4ec6:	ab0b      	add	r3, sp, #44	; 0x2c
    4ec8:	9305      	str	r3, [sp, #20]
    4eca:	9303      	str	r3, [sp, #12]
    4ecc:	4b05      	ldr	r3, [pc, #20]	; (4ee4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    4ece:	9302      	str	r3, [sp, #8]
    4ed0:	2300      	movs	r3, #0
    4ed2:	e9cd 3300 	strd	r3, r3, [sp]
    4ed6:	2201      	movs	r2, #1
    4ed8:	4618      	mov	r0, r3
    4eda:	f7fd fb31 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    4ede:	b007      	add	sp, #28
    4ee0:	f85d fb04 	ldr.w	pc, [sp], #4
    4ee4:	0000b310 	.word	0x0000b310

00004ee8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    4eea:	f7fd f8cd 	bl	2088 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4eee:	2400      	movs	r4, #0
    4ef0:	4b06      	ldr	r3, [pc, #24]	; (4f0c <k_sys_fatal_error_handler+0x24>)
    4ef2:	9302      	str	r3, [sp, #8]
    4ef4:	4620      	mov	r0, r4
    4ef6:	e9cd 4400 	strd	r4, r4, [sp]
    4efa:	4905      	ldr	r1, [pc, #20]	; (4f10 <k_sys_fatal_error_handler+0x28>)
    4efc:	4623      	mov	r3, r4
    4efe:	2201      	movs	r2, #1
    4f00:	f7ff ffe0 	bl	4ec4 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    4f04:	4620      	mov	r0, r4
    4f06:	f7fe fd5d 	bl	39c4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4f0a:	bf00      	nop
    4f0c:	0000b310 	.word	0x0000b310
    4f10:	00009ad8 	.word	0x00009ad8

00004f14 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4f18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4f1c:	2a08      	cmp	r2, #8
    4f1e:	d106      	bne.n	4f2e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4f20:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4f24:	2b05      	cmp	r3, #5
    4f26:	d802      	bhi.n	4f2e <nrf52_errata_103+0x1a>
    4f28:	4a02      	ldr	r2, [pc, #8]	; (4f34 <nrf52_errata_103+0x20>)
    4f2a:	5cd0      	ldrb	r0, [r2, r3]
    4f2c:	4770      	bx	lr
        return false;
    4f2e:	2000      	movs	r0, #0
}
    4f30:	4770      	bx	lr
    4f32:	bf00      	nop
    4f34:	0000b333 	.word	0x0000b333

00004f38 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4f38:	4a02      	ldr	r2, [pc, #8]	; (4f44 <nvmc_wait+0xc>)
    4f3a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d0fb      	beq.n	4f3a <nvmc_wait+0x2>
}
    4f42:	4770      	bx	lr
    4f44:	4001e000 	.word	0x4001e000

00004f48 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4f48:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4f4a:	f004 fb34 	bl	95b6 <nrf52_errata_136>
    4f4e:	b140      	cbz	r0, 4f62 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f54:	2200      	movs	r2, #0
    4f56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4f5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4f5e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4f62:	f004 fb28 	bl	95b6 <nrf52_errata_136>
    4f66:	2800      	cmp	r0, #0
    4f68:	d046      	beq.n	4ff8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f6e:	4b60      	ldr	r3, [pc, #384]	; (50f0 <SystemInit+0x1a8>)
    4f70:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4f74:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4f78:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4f7c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4f80:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4f84:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4f88:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4f8c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4f90:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4f94:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4f98:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4f9c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4fa0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4fa4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4fa8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4fac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4fb0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4fb4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4fb8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4fbc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4fc0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4fc4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4fc8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4fcc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4fd0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4fd4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4fd8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4fdc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4fe0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4fe4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4fe8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4fec:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4ff0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4ff4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4ff8:	f7ff ff8c 	bl	4f14 <nrf52_errata_103>
    4ffc:	b118      	cbz	r0, 5006 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4ffe:	4b3d      	ldr	r3, [pc, #244]	; (50f4 <SystemInit+0x1ac>)
    5000:	4a3d      	ldr	r2, [pc, #244]	; (50f8 <SystemInit+0x1b0>)
    5002:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5006:	f7ff ff85 	bl	4f14 <nrf52_errata_103>
    500a:	b118      	cbz	r0, 5014 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    500c:	4b3b      	ldr	r3, [pc, #236]	; (50fc <SystemInit+0x1b4>)
    500e:	22fb      	movs	r2, #251	; 0xfb
    5010:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5014:	f7ff ff7e 	bl	4f14 <nrf52_errata_103>
    5018:	b170      	cbz	r0, 5038 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    501a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    501e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5022:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    5026:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    502a:	f022 020f 	bic.w	r2, r2, #15
    502e:	f003 030f 	and.w	r3, r3, #15
    5032:	4313      	orrs	r3, r2
    5034:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5038:	f7ff ff6c 	bl	4f14 <nrf52_errata_103>
    503c:	b120      	cbz	r0, 5048 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    503e:	4b30      	ldr	r3, [pc, #192]	; (5100 <SystemInit+0x1b8>)
    5040:	f44f 7200 	mov.w	r2, #512	; 0x200
    5044:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5048:	f004 fab5 	bl	95b6 <nrf52_errata_136>
    504c:	b148      	cbz	r0, 5062 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    504e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5052:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5056:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5058:	bf44      	itt	mi
    505a:	f06f 0201 	mvnmi.w	r2, #1
    505e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5066:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    506a:	2a08      	cmp	r2, #8
    506c:	d10e      	bne.n	508c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    506e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    5072:	2b05      	cmp	r3, #5
    5074:	d802      	bhi.n	507c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5076:	4a23      	ldr	r2, [pc, #140]	; (5104 <SystemInit+0x1bc>)
    5078:	5cd3      	ldrb	r3, [r2, r3]
    507a:	b13b      	cbz	r3, 508c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    507c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5080:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5088:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    508c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5090:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5094:	2a00      	cmp	r2, #0
    5096:	db03      	blt.n	50a0 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5098:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    509c:	2b00      	cmp	r3, #0
    509e:	da22      	bge.n	50e6 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    50a0:	4919      	ldr	r1, [pc, #100]	; (5108 <SystemInit+0x1c0>)
    50a2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50a4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    50a8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50ac:	2412      	movs	r4, #18
    nvmc_wait();
    50ae:	f7ff ff43 	bl	4f38 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50b2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    50b6:	f7ff ff3f 	bl	4f38 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    50ba:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    50be:	f7ff ff3b 	bl	4f38 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    50c2:	2300      	movs	r3, #0
    50c4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    50c8:	f7ff ff36 	bl	4f38 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    50cc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    50d0:	490e      	ldr	r1, [pc, #56]	; (510c <SystemInit+0x1c4>)
    50d2:	4b0f      	ldr	r3, [pc, #60]	; (5110 <SystemInit+0x1c8>)
    50d4:	68ca      	ldr	r2, [r1, #12]
    50d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    50da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    50dc:	60cb      	str	r3, [r1, #12]
    50de:	f3bf 8f4f 	dsb	sy
    __NOP();
    50e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    50e4:	e7fd      	b.n	50e2 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    50e6:	4b0b      	ldr	r3, [pc, #44]	; (5114 <SystemInit+0x1cc>)
    50e8:	4a0b      	ldr	r2, [pc, #44]	; (5118 <SystemInit+0x1d0>)
    50ea:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    50ec:	bd10      	pop	{r4, pc}
    50ee:	bf00      	nop
    50f0:	4000c000 	.word	0x4000c000
    50f4:	40005000 	.word	0x40005000
    50f8:	00038148 	.word	0x00038148
    50fc:	4000f000 	.word	0x4000f000
    5100:	40029000 	.word	0x40029000
    5104:	0000b32d 	.word	0x0000b32d
    5108:	4001e000 	.word	0x4001e000
    510c:	e000ed00 	.word	0xe000ed00
    5110:	05fa0004 	.word	0x05fa0004
    5114:	200000f0 	.word	0x200000f0
    5118:	03d09000 	.word	0x03d09000

0000511c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    511c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    511e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5120:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5122:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5126:	fab2 f382 	clz	r3, r2
    512a:	f1c3 031f 	rsb	r3, r3, #31
    512e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5130:	fa05 f403 	lsl.w	r4, r5, r3
    5134:	ea22 0404 	bic.w	r4, r2, r4
    5138:	e850 6f00 	ldrex	r6, [r0]
    513c:	4296      	cmp	r6, r2
    513e:	d104      	bne.n	514a <nrfx_flag32_alloc+0x2e>
    5140:	e840 4c00 	strex	ip, r4, [r0]
    5144:	f1bc 0f00 	cmp.w	ip, #0
    5148:	d1f6      	bne.n	5138 <nrfx_flag32_alloc+0x1c>
    514a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    514e:	d1e7      	bne.n	5120 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5150:	4801      	ldr	r0, [pc, #4]	; (5158 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5152:	700b      	strb	r3, [r1, #0]
}
    5154:	bd70      	pop	{r4, r5, r6, pc}
    5156:	bf00      	nop
    5158:	0bad0000 	.word	0x0bad0000

0000515c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    515c:	6803      	ldr	r3, [r0, #0]
    515e:	40cb      	lsrs	r3, r1
    5160:	07db      	lsls	r3, r3, #31
{
    5162:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5164:	d414      	bmi.n	5190 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5166:	2301      	movs	r3, #1
    5168:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    516a:	6802      	ldr	r2, [r0, #0]
    516c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5170:	ea43 0102 	orr.w	r1, r3, r2
    5174:	e850 4f00 	ldrex	r4, [r0]
    5178:	4294      	cmp	r4, r2
    517a:	d104      	bne.n	5186 <nrfx_flag32_free+0x2a>
    517c:	e840 1c00 	strex	ip, r1, [r0]
    5180:	f1bc 0f00 	cmp.w	ip, #0
    5184:	d1f6      	bne.n	5174 <nrfx_flag32_free+0x18>
    5186:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    518a:	d1ee      	bne.n	516a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    518c:	4801      	ldr	r0, [pc, #4]	; (5194 <nrfx_flag32_free+0x38>)
}
    518e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5190:	4801      	ldr	r0, [pc, #4]	; (5198 <nrfx_flag32_free+0x3c>)
    5192:	e7fc      	b.n	518e <nrfx_flag32_free+0x32>
    5194:	0bad0000 	.word	0x0bad0000
    5198:	0bad0004 	.word	0x0bad0004

0000519c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    519c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    519e:	4604      	mov	r4, r0
    51a0:	b170      	cbz	r0, 51c0 <clock_stop+0x24>
    51a2:	2801      	cmp	r0, #1
    51a4:	d031      	beq.n	520a <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    51a6:	4931      	ldr	r1, [pc, #196]	; (526c <clock_stop+0xd0>)
    51a8:	4831      	ldr	r0, [pc, #196]	; (5270 <clock_stop+0xd4>)
    51aa:	4a32      	ldr	r2, [pc, #200]	; (5274 <clock_stop+0xd8>)
    51ac:	23d8      	movs	r3, #216	; 0xd8
    51ae:	f003 febc 	bl	8f2a <assert_print>
    51b2:	4830      	ldr	r0, [pc, #192]	; (5274 <clock_stop+0xd8>)
    51b4:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    51b6:	b003      	add	sp, #12
    51b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    51bc:	f003 beae 	b.w	8f1c <assert_post_action>
    p_reg->INTENCLR = mask;
    51c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    51c4:	2202      	movs	r2, #2
    51c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51ca:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    51ce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    51d2:	2201      	movs	r2, #1
    51d4:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    51d6:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    51d8:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    51da:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    51de:	bf14      	ite	ne
    51e0:	2500      	movne	r5, #0
    51e2:	f10d 0507 	addeq.w	r5, sp, #7
    51e6:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    51ea:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    51ee:	b1bc      	cbz	r4, 5220 <clock_stop+0x84>
    51f0:	2c01      	cmp	r4, #1
    51f2:	d02c      	beq.n	524e <clock_stop+0xb2>
            NRFX_ASSERT(0);
    51f4:	491d      	ldr	r1, [pc, #116]	; (526c <clock_stop+0xd0>)
    51f6:	481e      	ldr	r0, [pc, #120]	; (5270 <clock_stop+0xd4>)
    51f8:	4a1f      	ldr	r2, [pc, #124]	; (5278 <clock_stop+0xdc>)
    51fa:	f44f 734f 	mov.w	r3, #828	; 0x33c
    51fe:	f003 fe94 	bl	8f2a <assert_print>
    5202:	481d      	ldr	r0, [pc, #116]	; (5278 <clock_stop+0xdc>)
    5204:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5208:	e7d5      	b.n	51b6 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    520a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    520e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5210:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5214:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5218:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    521c:	6058      	str	r0, [r3, #4]
}
    521e:	e7da      	b.n	51d6 <clock_stop+0x3a>
            if (p_clk_src != NULL)
    5220:	b125      	cbz	r5, 522c <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5222:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5226:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    522a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    522c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5230:	03da      	lsls	r2, r3, #15
    5232:	d519      	bpl.n	5268 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5234:	b11d      	cbz	r5, 523e <clock_stop+0xa2>
    5236:	f89d 3007 	ldrb.w	r3, [sp, #7]
    523a:	2b01      	cmp	r3, #1
    523c:	d104      	bne.n	5248 <clock_stop+0xac>
    523e:	2001      	movs	r0, #1
    5240:	f004 f9c3 	bl	95ca <nrfx_busy_wait>
    5244:	3f01      	subs	r7, #1
    5246:	d1d2      	bne.n	51ee <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5248:	2c01      	cmp	r4, #1
    524a:	d00a      	beq.n	5262 <clock_stop+0xc6>
    524c:	e00c      	b.n	5268 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    524e:	b125      	cbz	r5, 525a <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5250:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5254:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5258:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    525a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    525e:	03db      	lsls	r3, r3, #15
    5260:	d4e8      	bmi.n	5234 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    5262:	4b06      	ldr	r3, [pc, #24]	; (527c <clock_stop+0xe0>)
    5264:	2200      	movs	r2, #0
    5266:	715a      	strb	r2, [r3, #5]
}
    5268:	b003      	add	sp, #12
    526a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    526c:	0000a05a 	.word	0x0000a05a
    5270:	00009eb7 	.word	0x00009eb7
    5274:	0000b339 	.word	0x0000b339
    5278:	0000b376 	.word	0x0000b376
    527c:	20000b8c 	.word	0x20000b8c

00005280 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5280:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    5282:	4604      	mov	r4, r0
    5284:	b958      	cbnz	r0, 529e <nrfx_clock_init+0x1e>
    5286:	490b      	ldr	r1, [pc, #44]	; (52b4 <nrfx_clock_init+0x34>)
    5288:	480b      	ldr	r0, [pc, #44]	; (52b8 <nrfx_clock_init+0x38>)
    528a:	4a0c      	ldr	r2, [pc, #48]	; (52bc <nrfx_clock_init+0x3c>)
    528c:	f240 1315 	movw	r3, #277	; 0x115
    5290:	f003 fe4b 	bl	8f2a <assert_print>
    5294:	4809      	ldr	r0, [pc, #36]	; (52bc <nrfx_clock_init+0x3c>)
    5296:	f240 1115 	movw	r1, #277	; 0x115
    529a:	f003 fe3f 	bl	8f1c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    529e:	4b08      	ldr	r3, [pc, #32]	; (52c0 <nrfx_clock_init+0x40>)
    52a0:	791a      	ldrb	r2, [r3, #4]
    52a2:	b922      	cbnz	r2, 52ae <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    52a4:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    52a6:	4807      	ldr	r0, [pc, #28]	; (52c4 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    52a8:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    52aa:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    52ac:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    52ae:	4806      	ldr	r0, [pc, #24]	; (52c8 <nrfx_clock_init+0x48>)
    return err_code;
    52b0:	e7fc      	b.n	52ac <nrfx_clock_init+0x2c>
    52b2:	bf00      	nop
    52b4:	0000b3aa 	.word	0x0000b3aa
    52b8:	00009eb7 	.word	0x00009eb7
    52bc:	0000b339 	.word	0x0000b339
    52c0:	20000b8c 	.word	0x20000b8c
    52c4:	0bad0000 	.word	0x0bad0000
    52c8:	0bad000c 	.word	0x0bad000c

000052cc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    52cc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    52ce:	4b0d      	ldr	r3, [pc, #52]	; (5304 <nrfx_clock_enable+0x38>)
    52d0:	791b      	ldrb	r3, [r3, #4]
    52d2:	b95b      	cbnz	r3, 52ec <nrfx_clock_enable+0x20>
    52d4:	490c      	ldr	r1, [pc, #48]	; (5308 <nrfx_clock_enable+0x3c>)
    52d6:	480d      	ldr	r0, [pc, #52]	; (530c <nrfx_clock_enable+0x40>)
    52d8:	4a0d      	ldr	r2, [pc, #52]	; (5310 <nrfx_clock_enable+0x44>)
    52da:	f44f 7397 	mov.w	r3, #302	; 0x12e
    52de:	f003 fe24 	bl	8f2a <assert_print>
    52e2:	480b      	ldr	r0, [pc, #44]	; (5310 <nrfx_clock_enable+0x44>)
    52e4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    52e8:	f003 fe18 	bl	8f1c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    52ec:	2000      	movs	r0, #0
    52ee:	f7fd fd15 	bl	2d1c <arch_irq_is_enabled>
    52f2:	b908      	cbnz	r0, 52f8 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    52f4:	f7fd fd04 	bl	2d00 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    52f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52fc:	2200      	movs	r2, #0
    52fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5302:	bd08      	pop	{r3, pc}
    5304:	20000b8c 	.word	0x20000b8c
    5308:	0000b3b8 	.word	0x0000b3b8
    530c:	00009eb7 	.word	0x00009eb7
    5310:	0000b339 	.word	0x0000b339

00005314 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5314:	4b2c      	ldr	r3, [pc, #176]	; (53c8 <nrfx_clock_start+0xb4>)
    5316:	791b      	ldrb	r3, [r3, #4]
{
    5318:	b510      	push	{r4, lr}
    531a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    531c:	b95b      	cbnz	r3, 5336 <nrfx_clock_start+0x22>
    531e:	492b      	ldr	r1, [pc, #172]	; (53cc <nrfx_clock_start+0xb8>)
    5320:	482b      	ldr	r0, [pc, #172]	; (53d0 <nrfx_clock_start+0xbc>)
    5322:	4a2c      	ldr	r2, [pc, #176]	; (53d4 <nrfx_clock_start+0xc0>)
    5324:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5328:	f003 fdff 	bl	8f2a <assert_print>
    532c:	4829      	ldr	r0, [pc, #164]	; (53d4 <nrfx_clock_start+0xc0>)
    532e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5332:	f003 fdf3 	bl	8f1c <assert_post_action>
    switch (domain)
    5336:	b17c      	cbz	r4, 5358 <nrfx_clock_start+0x44>
    5338:	2c01      	cmp	r4, #1
    533a:	d03a      	beq.n	53b2 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    533c:	4926      	ldr	r1, [pc, #152]	; (53d8 <nrfx_clock_start+0xc4>)
    533e:	4824      	ldr	r0, [pc, #144]	; (53d0 <nrfx_clock_start+0xbc>)
    5340:	4a24      	ldr	r2, [pc, #144]	; (53d4 <nrfx_clock_start+0xc0>)
    5342:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5346:	f003 fdf0 	bl	8f2a <assert_print>
            break;
    }
}
    534a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    534e:	4821      	ldr	r0, [pc, #132]	; (53d4 <nrfx_clock_start+0xc0>)
    5350:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5354:	f003 bde2 	b.w	8f1c <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    535c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5360:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5364:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    5368:	d10b      	bne.n	5382 <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    536a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    536e:	07c9      	lsls	r1, r1, #31
    5370:	d510      	bpl.n	5394 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5372:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    5376:	079b      	lsls	r3, r3, #30
    5378:	d408      	bmi.n	538c <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    537a:	2302      	movs	r3, #2
    537c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    5380:	e016      	b.n	53b0 <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5382:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5386:	2b01      	cmp	r3, #1
    5388:	d004      	beq.n	5394 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    538a:	b11b      	cbz	r3, 5394 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    538c:	2000      	movs	r0, #0
    538e:	f7ff ff05 	bl	519c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5392:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    5394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5398:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    539c:	2300      	movs	r3, #0
    539e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    53a2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    53a6:	2302      	movs	r3, #2
    53a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53ac:	2301      	movs	r3, #1
    53ae:	6093      	str	r3, [r2, #8]
}
    53b0:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53b6:	2200      	movs	r2, #0
    53b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    53bc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    53c0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53c4:	601c      	str	r4, [r3, #0]
}
    53c6:	e7f3      	b.n	53b0 <nrfx_clock_start+0x9c>
    53c8:	20000b8c 	.word	0x20000b8c
    53cc:	0000b3b8 	.word	0x0000b3b8
    53d0:	00009eb7 	.word	0x00009eb7
    53d4:	0000b339 	.word	0x0000b339
    53d8:	0000a05a 	.word	0x0000a05a

000053dc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    53dc:	4b0a      	ldr	r3, [pc, #40]	; (5408 <nrfx_clock_stop+0x2c>)
    53de:	791b      	ldrb	r3, [r3, #4]
{
    53e0:	b510      	push	{r4, lr}
    53e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    53e4:	b95b      	cbnz	r3, 53fe <nrfx_clock_stop+0x22>
    53e6:	4909      	ldr	r1, [pc, #36]	; (540c <nrfx_clock_stop+0x30>)
    53e8:	4809      	ldr	r0, [pc, #36]	; (5410 <nrfx_clock_stop+0x34>)
    53ea:	4a0a      	ldr	r2, [pc, #40]	; (5414 <nrfx_clock_stop+0x38>)
    53ec:	f240 13ad 	movw	r3, #429	; 0x1ad
    53f0:	f003 fd9b 	bl	8f2a <assert_print>
    53f4:	4807      	ldr	r0, [pc, #28]	; (5414 <nrfx_clock_stop+0x38>)
    53f6:	f240 11ad 	movw	r1, #429	; 0x1ad
    53fa:	f003 fd8f 	bl	8f1c <assert_post_action>
    clock_stop(domain);
    53fe:	4620      	mov	r0, r4
}
    5400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    5404:	f7ff beca 	b.w	519c <clock_stop>
    5408:	20000b8c 	.word	0x20000b8c
    540c:	0000b3b8 	.word	0x0000b3b8
    5410:	00009eb7 	.word	0x00009eb7
    5414:	0000b339 	.word	0x0000b339

00005418 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    541c:	b510      	push	{r4, lr}
    541e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5422:	b16a      	cbz	r2, 5440 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5424:	2200      	movs	r2, #0
    5426:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    542a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    542e:	2201      	movs	r2, #1
    5430:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5434:	4b11      	ldr	r3, [pc, #68]	; (547c <nrfx_power_clock_irq_handler+0x64>)
    5436:	7958      	ldrb	r0, [r3, #5]
    5438:	b910      	cbnz	r0, 5440 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    543a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    543c:	681b      	ldr	r3, [r3, #0]
    543e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5444:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5448:	b172      	cbz	r2, 5468 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    544a:	2200      	movs	r2, #0
    544c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5450:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5454:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5458:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    545c:	0792      	lsls	r2, r2, #30
    545e:	d104      	bne.n	546a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5460:	2201      	movs	r2, #1
    5462:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5466:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5468:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    546a:	2202      	movs	r2, #2
    546c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5470:	4b02      	ldr	r3, [pc, #8]	; (547c <nrfx_power_clock_irq_handler+0x64>)
}
    5472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5476:	681b      	ldr	r3, [r3, #0]
    5478:	2001      	movs	r0, #1
    547a:	4718      	bx	r3
    547c:	20000b8c 	.word	0x20000b8c

00005480 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5480:	4b03      	ldr	r3, [pc, #12]	; (5490 <pin_in_use_by_te+0x10>)
    5482:	3008      	adds	r0, #8
    5484:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5488:	f3c0 1040 	ubfx	r0, r0, #5, #1
    548c:	4770      	bx	lr
    548e:	bf00      	nop
    5490:	200000f4 	.word	0x200000f4

00005494 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5494:	4b04      	ldr	r3, [pc, #16]	; (54a8 <pin_has_trigger+0x14>)
    5496:	3008      	adds	r0, #8
    5498:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    549c:	f010 001c 	ands.w	r0, r0, #28
    54a0:	bf18      	it	ne
    54a2:	2001      	movne	r0, #1
    54a4:	4770      	bx	lr
    54a6:	bf00      	nop
    54a8:	200000f4 	.word	0x200000f4

000054ac <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    54ac:	4b03      	ldr	r3, [pc, #12]	; (54bc <pin_is_output+0x10>)
    54ae:	3008      	adds	r0, #8
    54b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    54b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    54b8:	4770      	bx	lr
    54ba:	bf00      	nop
    54bc:	200000f4 	.word	0x200000f4

000054c0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    54c0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    54c2:	f100 0308 	add.w	r3, r0, #8
    54c6:	4c0c      	ldr	r4, [pc, #48]	; (54f8 <call_handler+0x38>)
    54c8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    54cc:	05da      	lsls	r2, r3, #23
{
    54ce:	4605      	mov	r5, r0
    54d0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    54d2:	d507      	bpl.n	54e4 <call_handler+0x24>
    54d4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    54d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    54dc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    54e0:	6852      	ldr	r2, [r2, #4]
    54e2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    54e4:	68a3      	ldr	r3, [r4, #8]
    54e6:	b12b      	cbz	r3, 54f4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    54e8:	68e2      	ldr	r2, [r4, #12]
    54ea:	4631      	mov	r1, r6
    54ec:	4628      	mov	r0, r5
    }
}
    54ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    54f2:	4718      	bx	r3
}
    54f4:	bd70      	pop	{r4, r5, r6, pc}
    54f6:	bf00      	nop
    54f8:	200000f4 	.word	0x200000f4

000054fc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    54fc:	4a19      	ldr	r2, [pc, #100]	; (5564 <release_handler+0x68>)
    54fe:	3008      	adds	r0, #8
{
    5500:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5502:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5506:	05d9      	lsls	r1, r3, #23
    5508:	d51d      	bpl.n	5546 <release_handler+0x4a>
    550a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    550e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5512:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5516:	f102 040e 	add.w	r4, r2, #14
    551a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    551c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5520:	f413 7f80 	tst.w	r3, #256	; 0x100
    5524:	d003      	beq.n	552e <release_handler+0x32>
    5526:	f3c3 2343 	ubfx	r3, r3, #9, #4
    552a:	4299      	cmp	r1, r3
    552c:	d00b      	beq.n	5546 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    552e:	3001      	adds	r0, #1
    5530:	2830      	cmp	r0, #48	; 0x30
    5532:	d1f3      	bne.n	551c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5534:	2300      	movs	r3, #0
    5536:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    553a:	480b      	ldr	r0, [pc, #44]	; (5568 <release_handler+0x6c>)
    553c:	f7ff fe0e 	bl	515c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5540:	4b0a      	ldr	r3, [pc, #40]	; (556c <release_handler+0x70>)
    5542:	4298      	cmp	r0, r3
    5544:	d100      	bne.n	5548 <release_handler+0x4c>
}
    5546:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5548:	4909      	ldr	r1, [pc, #36]	; (5570 <release_handler+0x74>)
    554a:	480a      	ldr	r0, [pc, #40]	; (5574 <release_handler+0x78>)
    554c:	4a0a      	ldr	r2, [pc, #40]	; (5578 <release_handler+0x7c>)
    554e:	f44f 7399 	mov.w	r3, #306	; 0x132
    5552:	f003 fcea 	bl	8f2a <assert_print>
}
    5556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    555a:	4807      	ldr	r0, [pc, #28]	; (5578 <release_handler+0x7c>)
    555c:	f44f 7199 	mov.w	r1, #306	; 0x132
    5560:	f003 bcdc 	b.w	8f1c <assert_post_action>
    5564:	200000f4 	.word	0x200000f4
    5568:	20000168 	.word	0x20000168
    556c:	0bad0000 	.word	0x0bad0000
    5570:	0000b43a 	.word	0x0000b43a
    5574:	00009eb7 	.word	0x00009eb7
    5578:	0000b3d6 	.word	0x0000b3d6

0000557c <pin_handler_trigger_uninit>:
{
    557c:	b538      	push	{r3, r4, r5, lr}
    557e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5580:	f7ff ff7e 	bl	5480 <pin_in_use_by_te>
    5584:	4c09      	ldr	r4, [pc, #36]	; (55ac <pin_handler_trigger_uninit+0x30>)
    5586:	f102 0508 	add.w	r5, r2, #8
    558a:	b140      	cbz	r0, 559e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    558c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5590:	4907      	ldr	r1, [pc, #28]	; (55b0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5592:	0b5b      	lsrs	r3, r3, #13
    5594:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5598:	2000      	movs	r0, #0
    559a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    559e:	4610      	mov	r0, r2
    55a0:	f7ff ffac 	bl	54fc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    55a4:	2300      	movs	r3, #0
    55a6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    55aa:	bd38      	pop	{r3, r4, r5, pc}
    55ac:	200000f4 	.word	0x200000f4
    55b0:	40006000 	.word	0x40006000

000055b4 <nrf_gpio_pin_port_decode>:
{
    55b4:	b510      	push	{r4, lr}
    55b6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55b8:	6800      	ldr	r0, [r0, #0]
    55ba:	f004 f808 	bl	95ce <nrf_gpio_pin_present_check>
    55be:	b958      	cbnz	r0, 55d8 <nrf_gpio_pin_port_decode+0x24>
    55c0:	4912      	ldr	r1, [pc, #72]	; (560c <nrf_gpio_pin_port_decode+0x58>)
    55c2:	4813      	ldr	r0, [pc, #76]	; (5610 <nrf_gpio_pin_port_decode+0x5c>)
    55c4:	4a13      	ldr	r2, [pc, #76]	; (5614 <nrf_gpio_pin_port_decode+0x60>)
    55c6:	f240 2329 	movw	r3, #553	; 0x229
    55ca:	f003 fcae 	bl	8f2a <assert_print>
    55ce:	4811      	ldr	r0, [pc, #68]	; (5614 <nrf_gpio_pin_port_decode+0x60>)
    55d0:	f240 2129 	movw	r1, #553	; 0x229
    55d4:	f003 fca2 	bl	8f1c <assert_post_action>
    uint32_t pin_number = *p_pin;
    55d8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    55da:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55de:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    55e0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55e2:	d00d      	beq.n	5600 <nrf_gpio_pin_port_decode+0x4c>
    55e4:	2b01      	cmp	r3, #1
    55e6:	d00e      	beq.n	5606 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    55e8:	490b      	ldr	r1, [pc, #44]	; (5618 <nrf_gpio_pin_port_decode+0x64>)
    55ea:	4809      	ldr	r0, [pc, #36]	; (5610 <nrf_gpio_pin_port_decode+0x5c>)
    55ec:	4a09      	ldr	r2, [pc, #36]	; (5614 <nrf_gpio_pin_port_decode+0x60>)
    55ee:	f240 232e 	movw	r3, #558	; 0x22e
    55f2:	f003 fc9a 	bl	8f2a <assert_print>
    55f6:	4807      	ldr	r0, [pc, #28]	; (5614 <nrf_gpio_pin_port_decode+0x60>)
    55f8:	f240 212e 	movw	r1, #558	; 0x22e
    55fc:	f003 fc8e 	bl	8f1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5600:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5604:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5606:	4805      	ldr	r0, [pc, #20]	; (561c <nrf_gpio_pin_port_decode+0x68>)
    5608:	e7fc      	b.n	5604 <nrf_gpio_pin_port_decode+0x50>
    560a:	bf00      	nop
    560c:	0000b296 	.word	0x0000b296
    5610:	00009eb7 	.word	0x00009eb7
    5614:	0000b263 	.word	0x0000b263
    5618:	0000a05a 	.word	0x0000a05a
    561c:	50000300 	.word	0x50000300

00005620 <nrfx_gpiote_input_configure>:
{
    5620:	b5f0      	push	{r4, r5, r6, r7, lr}
    5622:	4604      	mov	r4, r0
    5624:	b085      	sub	sp, #20
    5626:	4617      	mov	r7, r2
    5628:	461d      	mov	r5, r3
    if (p_input_config)
    562a:	b1f1      	cbz	r1, 566a <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    562c:	f003 ffe0 	bl	95f0 <pin_is_task_output>
    5630:	b110      	cbz	r0, 5638 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    5632:	484d      	ldr	r0, [pc, #308]	; (5768 <nrfx_gpiote_input_configure+0x148>)
}
    5634:	b005      	add	sp, #20
    5636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5638:	460b      	mov	r3, r1
    563a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    563e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5642:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5646:	f10d 020f 	add.w	r2, sp, #15
    564a:	f10d 010e 	add.w	r1, sp, #14
    564e:	4620      	mov	r0, r4
    5650:	f003 ffdd 	bl	960e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5654:	4a45      	ldr	r2, [pc, #276]	; (576c <nrfx_gpiote_input_configure+0x14c>)
    5656:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    565a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    565e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5662:	f043 0301 	orr.w	r3, r3, #1
    5666:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    566a:	b197      	cbz	r7, 5692 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    566c:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    566e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5670:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    5672:	f7ff ff1b 	bl	54ac <pin_is_output>
    5676:	b180      	cbz	r0, 569a <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    5678:	2a00      	cmp	r2, #0
    567a:	d1da      	bne.n	5632 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    567c:	4a3b      	ldr	r2, [pc, #236]	; (576c <nrfx_gpiote_input_configure+0x14c>)
    567e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5682:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5686:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    568a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    568e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    5692:	2d00      	cmp	r5, #0
    5694:	d13d      	bne.n	5712 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    5696:	4836      	ldr	r0, [pc, #216]	; (5770 <nrfx_gpiote_input_configure+0x150>)
    5698:	e7cc      	b.n	5634 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    569a:	4f34      	ldr	r7, [pc, #208]	; (576c <nrfx_gpiote_input_configure+0x14c>)
    569c:	f104 0c08 	add.w	ip, r4, #8
    56a0:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    56a4:	f021 0120 	bic.w	r1, r1, #32
    56a8:	04c9      	lsls	r1, r1, #19
    56aa:	0cc9      	lsrs	r1, r1, #19
    56ac:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    56b0:	2a00      	cmp	r2, #0
    56b2:	d0e3      	beq.n	567c <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    56b4:	2e03      	cmp	r6, #3
    56b6:	d8bc      	bhi.n	5632 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    56b8:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    56ba:	b92e      	cbnz	r6, 56c8 <nrfx_gpiote_input_configure+0xa8>
    56bc:	4a2d      	ldr	r2, [pc, #180]	; (5774 <nrfx_gpiote_input_configure+0x154>)
    56be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    56c2:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    56c6:	e7d9      	b.n	567c <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    56c8:	009a      	lsls	r2, r3, #2
    56ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    56ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    56d2:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    56d6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    56da:	f020 0003 	bic.w	r0, r0, #3
    56de:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    56e2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    56e6:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    56ea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    56ee:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    56f2:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    56f6:	0220      	lsls	r0, r4, #8
    56f8:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    56fc:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5700:	ea40 000e 	orr.w	r0, r0, lr
    5704:	f041 0120 	orr.w	r1, r1, #32
    5708:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    570c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5710:	e7b4      	b.n	567c <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5712:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5716:	4620      	mov	r0, r4
    5718:	f7ff fef0 	bl	54fc <release_handler>
    if (!handler)
    571c:	2e00      	cmp	r6, #0
    571e:	d0ba      	beq.n	5696 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5720:	4d12      	ldr	r5, [pc, #72]	; (576c <nrfx_gpiote_input_configure+0x14c>)
    5722:	682b      	ldr	r3, [r5, #0]
    5724:	429e      	cmp	r6, r3
    5726:	d104      	bne.n	5732 <nrfx_gpiote_input_configure+0x112>
    5728:	686b      	ldr	r3, [r5, #4]
    572a:	429f      	cmp	r7, r3
    572c:	d101      	bne.n	5732 <nrfx_gpiote_input_configure+0x112>
    572e:	2200      	movs	r2, #0
    5730:	e00a      	b.n	5748 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5732:	4811      	ldr	r0, [pc, #68]	; (5778 <nrfx_gpiote_input_configure+0x158>)
    5734:	f10d 010f 	add.w	r1, sp, #15
    5738:	f7ff fcf0 	bl	511c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    573c:	4b0c      	ldr	r3, [pc, #48]	; (5770 <nrfx_gpiote_input_configure+0x150>)
    573e:	4298      	cmp	r0, r3
    5740:	f47f af78 	bne.w	5634 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    5744:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5748:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    574c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5750:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5752:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5754:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5758:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    575c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5760:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5764:	e797      	b.n	5696 <nrfx_gpiote_input_configure+0x76>
    5766:	bf00      	nop
    5768:	0bad0004 	.word	0x0bad0004
    576c:	200000f4 	.word	0x200000f4
    5770:	0bad0000 	.word	0x0bad0000
    5774:	40006000 	.word	0x40006000
    5778:	20000168 	.word	0x20000168

0000577c <nrfx_gpiote_output_configure>:
{
    577c:	b5f0      	push	{r4, r5, r6, r7, lr}
    577e:	4604      	mov	r4, r0
    5780:	b085      	sub	sp, #20
    5782:	4615      	mov	r5, r2
    if (p_config)
    5784:	b321      	cbz	r1, 57d0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    5786:	f7ff fe91 	bl	54ac <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    578a:	b920      	cbnz	r0, 5796 <nrfx_gpiote_output_configure+0x1a>
    578c:	4620      	mov	r0, r4
    578e:	f7ff fe77 	bl	5480 <pin_in_use_by_te>
    5792:	2800      	cmp	r0, #0
    5794:	d15e      	bne.n	5854 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5796:	4620      	mov	r0, r4
    5798:	f7ff fe7c 	bl	5494 <pin_has_trigger>
    579c:	b110      	cbz	r0, 57a4 <nrfx_gpiote_output_configure+0x28>
    579e:	784b      	ldrb	r3, [r1, #1]
    57a0:	2b01      	cmp	r3, #1
    57a2:	d057      	beq.n	5854 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    57a4:	2301      	movs	r3, #1
    57a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    57aa:	2300      	movs	r3, #0
    57ac:	e9cd 1300 	strd	r1, r3, [sp]
    57b0:	1c4a      	adds	r2, r1, #1
    57b2:	1c8b      	adds	r3, r1, #2
    57b4:	4620      	mov	r0, r4
    57b6:	f10d 010f 	add.w	r1, sp, #15
    57ba:	f003 ff28 	bl	960e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    57be:	4a26      	ldr	r2, [pc, #152]	; (5858 <nrfx_gpiote_output_configure+0xdc>)
    57c0:	f104 0108 	add.w	r1, r4, #8
    57c4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    57c8:	f043 0303 	orr.w	r3, r3, #3
    57cc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    57d0:	b915      	cbnz	r5, 57d8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    57d2:	4822      	ldr	r0, [pc, #136]	; (585c <nrfx_gpiote_output_configure+0xe0>)
}
    57d4:	b005      	add	sp, #20
    57d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    57d8:	4620      	mov	r0, r4
    57da:	f7ff fe67 	bl	54ac <pin_is_output>
        if (pin_is_input(pin))
    57de:	b3c8      	cbz	r0, 5854 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    57e0:	4e1d      	ldr	r6, [pc, #116]	; (5858 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    57e2:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    57e6:	f104 0708 	add.w	r7, r4, #8
    57ea:	4661      	mov	r1, ip
    57ec:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    57f0:	0089      	lsls	r1, r1, #2
    57f2:	f020 0020 	bic.w	r0, r0, #32
    57f6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    57fa:	04c0      	lsls	r0, r0, #19
    57fc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5800:	0cc0      	lsrs	r0, r0, #19
    5802:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    5806:	2300      	movs	r3, #0
    5808:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    580c:	786a      	ldrb	r2, [r5, #1]
    580e:	2a00      	cmp	r2, #0
    5810:	d0df      	beq.n	57d2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5812:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5816:	78ad      	ldrb	r5, [r5, #2]
    5818:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    581c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5820:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5824:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5828:	0223      	lsls	r3, r4, #8
    582a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    582e:	0412      	lsls	r2, r2, #16
    5830:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5834:	ea43 030e 	orr.w	r3, r3, lr
    5838:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    583a:	052a      	lsls	r2, r5, #20
    583c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5840:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5844:	4313      	orrs	r3, r2
    5846:	f040 0020 	orr.w	r0, r0, #32
    584a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    584e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5852:	e7be      	b.n	57d2 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    5854:	4802      	ldr	r0, [pc, #8]	; (5860 <nrfx_gpiote_output_configure+0xe4>)
    5856:	e7bd      	b.n	57d4 <nrfx_gpiote_output_configure+0x58>
    5858:	200000f4 	.word	0x200000f4
    585c:	0bad0000 	.word	0x0bad0000
    5860:	0bad0004 	.word	0x0bad0004

00005864 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5864:	4b01      	ldr	r3, [pc, #4]	; (586c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5866:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    586a:	4770      	bx	lr
    586c:	200000f4 	.word	0x200000f4

00005870 <nrfx_gpiote_channel_get>:
{
    5870:	b538      	push	{r3, r4, r5, lr}
    5872:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5874:	460d      	mov	r5, r1
    5876:	b959      	cbnz	r1, 5890 <nrfx_gpiote_channel_get+0x20>
    5878:	490c      	ldr	r1, [pc, #48]	; (58ac <nrfx_gpiote_channel_get+0x3c>)
    587a:	480d      	ldr	r0, [pc, #52]	; (58b0 <nrfx_gpiote_channel_get+0x40>)
    587c:	4a0d      	ldr	r2, [pc, #52]	; (58b4 <nrfx_gpiote_channel_get+0x44>)
    587e:	f240 2335 	movw	r3, #565	; 0x235
    5882:	f003 fb52 	bl	8f2a <assert_print>
    5886:	480b      	ldr	r0, [pc, #44]	; (58b4 <nrfx_gpiote_channel_get+0x44>)
    5888:	f240 2135 	movw	r1, #565	; 0x235
    588c:	f003 fb46 	bl	8f1c <assert_post_action>
    if (pin_in_use_by_te(pin))
    5890:	4620      	mov	r0, r4
    5892:	f7ff fdf5 	bl	5480 <pin_in_use_by_te>
    5896:	b138      	cbz	r0, 58a8 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5898:	4b07      	ldr	r3, [pc, #28]	; (58b8 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    589a:	4808      	ldr	r0, [pc, #32]	; (58bc <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    589c:	3408      	adds	r4, #8
    589e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    58a2:	0b5b      	lsrs	r3, r3, #13
    58a4:	702b      	strb	r3, [r5, #0]
}
    58a6:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    58a8:	4805      	ldr	r0, [pc, #20]	; (58c0 <nrfx_gpiote_channel_get+0x50>)
    58aa:	e7fc      	b.n	58a6 <nrfx_gpiote_channel_get+0x36>
    58ac:	0000b44e 	.word	0x0000b44e
    58b0:	00009eb7 	.word	0x00009eb7
    58b4:	0000b3d6 	.word	0x0000b3d6
    58b8:	200000f4 	.word	0x200000f4
    58bc:	0bad0000 	.word	0x0bad0000
    58c0:	0bad0004 	.word	0x0bad0004

000058c4 <nrfx_gpiote_init>:
{
    58c4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    58c6:	4c0f      	ldr	r4, [pc, #60]	; (5904 <nrfx_gpiote_init+0x40>)
    58c8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    58cc:	b9bd      	cbnz	r5, 58fe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    58ce:	2260      	movs	r2, #96	; 0x60
    58d0:	4629      	mov	r1, r5
    58d2:	f104 0010 	add.w	r0, r4, #16
    58d6:	f003 fc15 	bl	9104 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    58da:	2006      	movs	r0, #6
    58dc:	f7fd fa10 	bl	2d00 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    58e0:	4b09      	ldr	r3, [pc, #36]	; (5908 <nrfx_gpiote_init+0x44>)
    return err_code;
    58e2:	480a      	ldr	r0, [pc, #40]	; (590c <nrfx_gpiote_init+0x48>)
    58e4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    58e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    58ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    58f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    58f4:	2301      	movs	r3, #1
    58f6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    58fa:	6763      	str	r3, [r4, #116]	; 0x74
}
    58fc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    58fe:	4804      	ldr	r0, [pc, #16]	; (5910 <nrfx_gpiote_init+0x4c>)
    5900:	e7fc      	b.n	58fc <nrfx_gpiote_init+0x38>
    5902:	bf00      	nop
    5904:	200000f4 	.word	0x200000f4
    5908:	40006000 	.word	0x40006000
    590c:	0bad0000 	.word	0x0bad0000
    5910:	0bad0005 	.word	0x0bad0005

00005914 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5914:	4b03      	ldr	r3, [pc, #12]	; (5924 <nrfx_gpiote_is_init+0x10>)
    5916:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    591a:	3800      	subs	r0, #0
    591c:	bf18      	it	ne
    591e:	2001      	movne	r0, #1
    5920:	4770      	bx	lr
    5922:	bf00      	nop
    5924:	200000f4 	.word	0x200000f4

00005928 <nrfx_gpiote_channel_free>:
{
    5928:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    592a:	4801      	ldr	r0, [pc, #4]	; (5930 <nrfx_gpiote_channel_free+0x8>)
    592c:	f7ff bc16 	b.w	515c <nrfx_flag32_free>
    5930:	20000164 	.word	0x20000164

00005934 <nrfx_gpiote_channel_alloc>:
{
    5934:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5936:	4801      	ldr	r0, [pc, #4]	; (593c <nrfx_gpiote_channel_alloc+0x8>)
    5938:	f7ff bbf0 	b.w	511c <nrfx_flag32_alloc>
    593c:	20000164 	.word	0x20000164

00005940 <nrfx_gpiote_trigger_enable>:
{
    5940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5942:	4604      	mov	r4, r0
    5944:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5946:	f7ff fda5 	bl	5494 <pin_has_trigger>
    594a:	b958      	cbnz	r0, 5964 <nrfx_gpiote_trigger_enable+0x24>
    594c:	4930      	ldr	r1, [pc, #192]	; (5a10 <nrfx_gpiote_trigger_enable+0xd0>)
    594e:	4831      	ldr	r0, [pc, #196]	; (5a14 <nrfx_gpiote_trigger_enable+0xd4>)
    5950:	4a31      	ldr	r2, [pc, #196]	; (5a18 <nrfx_gpiote_trigger_enable+0xd8>)
    5952:	f240 33df 	movw	r3, #991	; 0x3df
    5956:	f003 fae8 	bl	8f2a <assert_print>
    595a:	482f      	ldr	r0, [pc, #188]	; (5a18 <nrfx_gpiote_trigger_enable+0xd8>)
    595c:	f240 31df 	movw	r1, #991	; 0x3df
    5960:	f003 fadc 	bl	8f1c <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5964:	4620      	mov	r0, r4
    5966:	f7ff fd8b 	bl	5480 <pin_in_use_by_te>
    596a:	4e2c      	ldr	r6, [pc, #176]	; (5a1c <nrfx_gpiote_trigger_enable+0xdc>)
    596c:	f104 0708 	add.w	r7, r4, #8
    5970:	b318      	cbz	r0, 59ba <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    5972:	4620      	mov	r0, r4
    5974:	f7ff fd9a 	bl	54ac <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5978:	4602      	mov	r2, r0
    597a:	b9f0      	cbnz	r0, 59ba <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    597c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5980:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    5982:	4608      	mov	r0, r1
    5984:	f003 fe3f 	bl	9606 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    5988:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    598c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5990:	601a      	str	r2, [r3, #0]
    5992:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5994:	008b      	lsls	r3, r1, #2
    5996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    599a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    599e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    59a2:	f042 0201 	orr.w	r2, r2, #1
    59a6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    59aa:	b125      	cbz	r5, 59b6 <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    59ac:	4a1c      	ldr	r2, [pc, #112]	; (5a20 <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    59ae:	2301      	movs	r3, #1
    59b0:	408b      	lsls	r3, r1
    59b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    59b6:	b003      	add	sp, #12
    59b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    59ba:	b95d      	cbnz	r5, 59d4 <nrfx_gpiote_trigger_enable+0x94>
    59bc:	4919      	ldr	r1, [pc, #100]	; (5a24 <nrfx_gpiote_trigger_enable+0xe4>)
    59be:	4815      	ldr	r0, [pc, #84]	; (5a14 <nrfx_gpiote_trigger_enable+0xd4>)
    59c0:	4a15      	ldr	r2, [pc, #84]	; (5a18 <nrfx_gpiote_trigger_enable+0xd8>)
    59c2:	f240 33ee 	movw	r3, #1006	; 0x3ee
    59c6:	f003 fab0 	bl	8f2a <assert_print>
    59ca:	4813      	ldr	r0, [pc, #76]	; (5a18 <nrfx_gpiote_trigger_enable+0xd8>)
    59cc:	f240 31ee 	movw	r1, #1006	; 0x3ee
    59d0:	f003 faa4 	bl	8f1c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    59d4:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    59d8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    59dc:	2b04      	cmp	r3, #4
    59de:	d012      	beq.n	5a06 <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    59e0:	2b05      	cmp	r3, #5
    59e2:	d012      	beq.n	5a0a <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    59e4:	a801      	add	r0, sp, #4
    59e6:	9401      	str	r4, [sp, #4]
    59e8:	f7ff fde4 	bl	55b4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    59ec:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    59ee:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    59f2:	40d9      	lsrs	r1, r3
    59f4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    59f8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    59fa:	4620      	mov	r0, r4
}
    59fc:	b003      	add	sp, #12
    59fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5a02:	f003 be51 	b.w	96a8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5a06:	2103      	movs	r1, #3
    5a08:	e7f7      	b.n	59fa <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5a0a:	2102      	movs	r1, #2
    5a0c:	e7f5      	b.n	59fa <nrfx_gpiote_trigger_enable+0xba>
    5a0e:	bf00      	nop
    5a10:	0000b458 	.word	0x0000b458
    5a14:	00009eb7 	.word	0x00009eb7
    5a18:	0000b3d6 	.word	0x0000b3d6
    5a1c:	200000f4 	.word	0x200000f4
    5a20:	40006000 	.word	0x40006000
    5a24:	0000b46d 	.word	0x0000b46d

00005a28 <nrfx_gpiote_trigger_disable>:
{
    5a28:	b508      	push	{r3, lr}
    5a2a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5a2c:	f7ff fd28 	bl	5480 <pin_in_use_by_te>
    5a30:	b1c8      	cbz	r0, 5a66 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    5a32:	4610      	mov	r0, r2
    5a34:	f7ff fd3a 	bl	54ac <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5a38:	b9a8      	cbnz	r0, 5a66 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a3a:	3208      	adds	r2, #8
    5a3c:	4b0d      	ldr	r3, [pc, #52]	; (5a74 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    5a3e:	490e      	ldr	r1, [pc, #56]	; (5a78 <nrfx_gpiote_trigger_disable+0x50>)
    5a40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5a44:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a46:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5a48:	409a      	lsls	r2, r3
    5a4a:	009b      	lsls	r3, r3, #2
    5a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5a50:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5a54:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5a58:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5a5c:	f022 0203 	bic.w	r2, r2, #3
    5a60:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5a64:	bd08      	pop	{r3, pc}
    5a66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5a6a:	2100      	movs	r1, #0
    5a6c:	4610      	mov	r0, r2
    5a6e:	f003 be1b 	b.w	96a8 <nrf_gpio_cfg_sense_set>
    5a72:	bf00      	nop
    5a74:	200000f4 	.word	0x200000f4
    5a78:	40006000 	.word	0x40006000

00005a7c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5a7c:	4b0e      	ldr	r3, [pc, #56]	; (5ab8 <nrfx_gpiote_pin_uninit+0x3c>)
    5a7e:	f100 0208 	add.w	r2, r0, #8
{
    5a82:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5a84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5a88:	07db      	lsls	r3, r3, #31
{
    5a8a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5a8c:	d511      	bpl.n	5ab2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5a8e:	f7ff ffcb 	bl	5a28 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5a92:	4620      	mov	r0, r4
    5a94:	f7ff fd72 	bl	557c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5a98:	a801      	add	r0, sp, #4
    5a9a:	9401      	str	r4, [sp, #4]
    5a9c:	f7ff fd8a 	bl	55b4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5aa6:	2202      	movs	r2, #2
    5aa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5aac:	4803      	ldr	r0, [pc, #12]	; (5abc <nrfx_gpiote_pin_uninit+0x40>)
}
    5aae:	b002      	add	sp, #8
    5ab0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5ab2:	4803      	ldr	r0, [pc, #12]	; (5ac0 <nrfx_gpiote_pin_uninit+0x44>)
    5ab4:	e7fb      	b.n	5aae <nrfx_gpiote_pin_uninit+0x32>
    5ab6:	bf00      	nop
    5ab8:	200000f4 	.word	0x200000f4
    5abc:	0bad0000 	.word	0x0bad0000
    5ac0:	0bad0004 	.word	0x0bad0004

00005ac4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ac8:	4b65      	ldr	r3, [pc, #404]	; (5c60 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5aca:	4866      	ldr	r0, [pc, #408]	; (5c64 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5acc:	4966      	ldr	r1, [pc, #408]	; (5c68 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5ace:	2600      	movs	r6, #0
{
    5ad0:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5ad2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ad4:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ad6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5ad8:	b135      	cbz	r5, 5ae8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5ada:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5ade:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ae0:	bf1e      	ittt	ne
    5ae2:	601c      	strne	r4, [r3, #0]
    5ae4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5ae6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ae8:	3304      	adds	r3, #4
    5aea:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5aec:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5af0:	d1f1      	bne.n	5ad6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5af2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 5c64 <nrfx_gpiote_irq_handler+0x1a0>
    5af6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5afa:	2b00      	cmp	r3, #0
    5afc:	f000 8093 	beq.w	5c26 <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    5b00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5b04:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5b08:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5b0a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5b0e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    5b12:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5b14:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5b18:	2700      	movs	r7, #0
            while (latch[i])
    5b1a:	f10d 0910 	add.w	r9, sp, #16
    5b1e:	017b      	lsls	r3, r7, #5
    5b20:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5b22:	f04f 0a01 	mov.w	sl, #1
    5b26:	e04b      	b.n	5bc0 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5b28:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5b2a:	4a50      	ldr	r2, [pc, #320]	; (5c6c <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5b2c:	fa94 f4a4 	rbit	r4, r4
    5b30:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5b34:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5b36:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5b38:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    5b3c:	f004 0c07 	and.w	ip, r4, #7
    5b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5b44:	f819 2000 	ldrb.w	r2, [r9, r0]
    5b48:	9403      	str	r4, [sp, #12]
    5b4a:	fa0a fc0c 	lsl.w	ip, sl, ip
    5b4e:	ea22 020c 	bic.w	r2, r2, ip
    5b52:	0899      	lsrs	r1, r3, #2
    5b54:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5b58:	a803      	add	r0, sp, #12
    5b5a:	f3c3 0582 	ubfx	r5, r3, #2, #3
    5b5e:	9101      	str	r1, [sp, #4]
    5b60:	f7ff fd28 	bl	55b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5b64:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    5b66:	9901      	ldr	r1, [sp, #4]
    5b68:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5b6c:	074b      	lsls	r3, r1, #29
    5b6e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5b72:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5b74:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    5b78:	d529      	bpl.n	5bce <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    5b7a:	4659      	mov	r1, fp
    5b7c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5b7e:	b2d5      	uxtb	r5, r2
    5b80:	f7ff fc9e 	bl	54c0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5b84:	a803      	add	r0, sp, #12
    5b86:	9403      	str	r4, [sp, #12]
    5b88:	f7ff fd14 	bl	55b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5b8c:	9b03      	ldr	r3, [sp, #12]
    5b8e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5b92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5b96:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5b9a:	429d      	cmp	r5, r3
    5b9c:	d107      	bne.n	5bae <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5b9e:	2100      	movs	r1, #0
    5ba0:	4620      	mov	r0, r4
    5ba2:	f003 fd81 	bl	96a8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5ba6:	4629      	mov	r1, r5
    5ba8:	4620      	mov	r0, r4
    5baa:	f003 fd7d 	bl	96a8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5bae:	a803      	add	r0, sp, #12
    5bb0:	9403      	str	r4, [sp, #12]
    5bb2:	f7ff fcff 	bl	55b4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5bb6:	9b03      	ldr	r3, [sp, #12]
    5bb8:	fa0a f303 	lsl.w	r3, sl, r3
    5bbc:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5bc0:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    5bc4:	2c00      	cmp	r4, #0
    5bc6:	d1af      	bne.n	5b28 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5bc8:	b9cf      	cbnz	r7, 5bfe <nrfx_gpiote_irq_handler+0x13a>
    5bca:	2701      	movs	r7, #1
    5bcc:	e7a7      	b.n	5b1e <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5bce:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5bd0:	bf0c      	ite	eq
    5bd2:	2103      	moveq	r1, #3
    5bd4:	2102      	movne	r1, #2
    5bd6:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5bd8:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5bda:	f003 fd65 	bl	96a8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5bde:	2d03      	cmp	r5, #3
    5be0:	d004      	beq.n	5bec <nrfx_gpiote_irq_handler+0x128>
    5be2:	9a01      	ldr	r2, [sp, #4]
    5be4:	2a02      	cmp	r2, #2
    5be6:	d106      	bne.n	5bf6 <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5be8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5bea:	d1e0      	bne.n	5bae <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5bec:	4659      	mov	r1, fp
    5bee:	4620      	mov	r0, r4
    5bf0:	f7ff fc66 	bl	54c0 <call_handler>
    5bf4:	e7db      	b.n	5bae <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5bf6:	2a03      	cmp	r2, #3
    5bf8:	d1d9      	bne.n	5bae <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5bfa:	2d02      	cmp	r5, #2
    5bfc:	e7f5      	b.n	5bea <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    5bfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5c02:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    5c06:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
    5c0a:	4919      	ldr	r1, [pc, #100]	; (5c70 <nrfx_gpiote_irq_handler+0x1ac>)
    5c0c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5c10:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5c12:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5c16:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5c1a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5c1c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5c1e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    5c22:	f47f af79 	bne.w	5b18 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    5c26:	2401      	movs	r4, #1
    while (mask)
    5c28:	b916      	cbnz	r6, 5c30 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5c2a:	b007      	add	sp, #28
    5c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5c30:	fa96 f3a6 	rbit	r3, r6
    5c34:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5c38:	fa04 f203 	lsl.w	r2, r4, r3
    5c3c:	009b      	lsls	r3, r3, #2
    5c3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5c42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5c46:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5c4a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5c4e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5c52:	f3c0 2005 	ubfx	r0, r0, #8, #6
    5c56:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5c5a:	f7ff fc31 	bl	54c0 <call_handler>
    5c5e:	e7e3      	b.n	5c28 <nrfx_gpiote_irq_handler+0x164>
    5c60:	40006100 	.word	0x40006100
    5c64:	40006000 	.word	0x40006000
    5c68:	40006120 	.word	0x40006120
    5c6c:	200000f4 	.word	0x200000f4
    5c70:	50000300 	.word	0x50000300

00005c74 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5c74:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5c76:	4801      	ldr	r0, [pc, #4]	; (5c7c <nrfx_ppi_channel_alloc+0x8>)
    5c78:	f7ff ba50 	b.w	511c <nrfx_flag32_alloc>
    5c7c:	20000170 	.word	0x20000170

00005c80 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5c80:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5c82:	4c11      	ldr	r4, [pc, #68]	; (5cc8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5c84:	4a11      	ldr	r2, [pc, #68]	; (5ccc <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5c86:	4912      	ldr	r1, [pc, #72]	; (5cd0 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5c88:	2303      	movs	r3, #3
    5c8a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5c8c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5c8e:	4b11      	ldr	r3, [pc, #68]	; (5cd4 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    5c90:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5c92:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5c98:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5c9a:	2300      	movs	r3, #0
    5c9c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5c9e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    5ca2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5ca4:	4a0c      	ldr	r2, [pc, #48]	; (5cd8 <_DoInit+0x58>)
    5ca6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5ca8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5caa:	2210      	movs	r2, #16
    5cac:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5cae:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5cb0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5cb2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5cb4:	f003 f9f5 	bl	90a2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5cb8:	4908      	ldr	r1, [pc, #32]	; (5cdc <_DoInit+0x5c>)
    5cba:	4620      	mov	r0, r4
    5cbc:	f003 f9f1 	bl	90a2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5cc0:	2320      	movs	r3, #32
    5cc2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5cc4:	bd10      	pop	{r4, pc}
    5cc6:	bf00      	nop
    5cc8:	20000b94 	.word	0x20000b94
    5ccc:	0000b478 	.word	0x0000b478
    5cd0:	0000b481 	.word	0x0000b481
    5cd4:	20000e90 	.word	0x20000e90
    5cd8:	20000e80 	.word	0x20000e80
    5cdc:	0000b485 	.word	0x0000b485

00005ce0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5ce4:	4f24      	ldr	r7, [pc, #144]	; (5d78 <SEGGER_RTT_WriteSkipNoLock+0x98>)
    5ce6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5cea:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5cec:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5cf0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5cf2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5cf4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5cf6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5cf8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5cfa:	d836      	bhi.n	5d6a <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5cfc:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5d00:	ebaa 0905 	sub.w	r9, sl, r5
    5d04:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5d08:	4294      	cmp	r4, r2
    5d0a:	d812      	bhi.n	5d32 <SEGGER_RTT_WriteSkipNoLock+0x52>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5d0c:	f04f 0918 	mov.w	r9, #24
    5d10:	fb06 9309 	mla	r3, r6, r9, r9
    5d14:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    5d16:	fb09 7906 	mla	r9, r9, r6, r7
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5d1a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5d1c:	4622      	mov	r2, r4
    5d1e:	4641      	mov	r1, r8
    5d20:	4428      	add	r0, r5
      pRing->WrOff = WrOff + NumBytes;
    5d22:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, NumBytes);
    5d24:	f003 f9e3 	bl	90ee <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5d28:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
    5d2c:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5d32:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5d34:	429c      	cmp	r4, r3
    5d36:	d81c      	bhi.n	5d72 <SEGGER_RTT_WriteSkipNoLock+0x92>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5d38:	fb00 bb0b 	mla	fp, r0, fp, fp
    5d3c:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5d3e:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5d40:	f8db 0004 	ldr.w	r0, [fp, #4]
    5d44:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5d46:	4428      	add	r0, r5
    5d48:	f003 f9d1 	bl	90ee <memcpy>
      if (NumBytes) {
    5d4c:	ebb4 040a 	subs.w	r4, r4, sl
    5d50:	d006      	beq.n	5d60 <SEGGER_RTT_WriteSkipNoLock+0x80>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5d52:	f8db 0004 	ldr.w	r0, [fp, #4]
    5d56:	4622      	mov	r2, r4
    5d58:	eb08 0109 	add.w	r1, r8, r9
    5d5c:	f003 f9c7 	bl	90ee <memcpy>
      pRing->WrOff = NumBytes;
    5d60:	2318      	movs	r3, #24
    5d62:	fb03 7306 	mla	r3, r3, r6, r7
    5d66:	625c      	str	r4, [r3, #36]	; 0x24
    5d68:	e7e0      	b.n	5d2c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    Avail = RdOff - WrOff - 1u;
    5d6a:	3b01      	subs	r3, #1
    5d6c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5d6e:	42a3      	cmp	r3, r4
    5d70:	d2cc      	bcs.n	5d0c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5d72:	2000      	movs	r0, #0
    5d74:	e7db      	b.n	5d2e <SEGGER_RTT_WriteSkipNoLock+0x4e>
    5d76:	bf00      	nop
    5d78:	20000b94 	.word	0x20000b94

00005d7c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5d7c:	4b03      	ldr	r3, [pc, #12]	; (5d8c <SEGGER_RTT_HasDataUp+0x10>)
    5d7e:	2218      	movs	r2, #24
    5d80:	fb02 3300 	mla	r3, r2, r0, r3
    5d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5d86:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5d88:	1a80      	subs	r0, r0, r2
    5d8a:	4770      	bx	lr
    5d8c:	20000b94 	.word	0x20000b94

00005d90 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5d90:	4b0e      	ldr	r3, [pc, #56]	; (5dcc <z_sys_init_run_level+0x3c>)
{
    5d92:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5d94:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5d98:	3001      	adds	r0, #1
    5d9a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5d9e:	42a6      	cmp	r6, r4
    5da0:	d800      	bhi.n	5da4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5da2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5da4:	e9d4 3500 	ldrd	r3, r5, [r4]
    5da8:	4628      	mov	r0, r5
    5daa:	4798      	blx	r3
		if (dev != NULL) {
    5dac:	b165      	cbz	r5, 5dc8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5dae:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5db0:	b130      	cbz	r0, 5dc0 <z_sys_init_run_level+0x30>
				dev->state->init_res = rc;
    5db2:	2800      	cmp	r0, #0
    5db4:	bfb8      	it	lt
    5db6:	4240      	neglt	r0, r0
    5db8:	28ff      	cmp	r0, #255	; 0xff
    5dba:	bfa8      	it	ge
    5dbc:	20ff      	movge	r0, #255	; 0xff
    5dbe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5dc0:	785a      	ldrb	r2, [r3, #1]
    5dc2:	f042 0201 	orr.w	r2, r2, #1
    5dc6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5dc8:	3408      	adds	r4, #8
    5dca:	e7e8      	b.n	5d9e <z_sys_init_run_level+0xe>
    5dcc:	00009d8c 	.word	0x00009d8c

00005dd0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5dd0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5dd2:	4605      	mov	r5, r0
    5dd4:	b910      	cbnz	r0, 5ddc <z_impl_device_get_binding+0xc>
		return NULL;
    5dd6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5dd8:	4620      	mov	r0, r4
    5dda:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5ddc:	7803      	ldrb	r3, [r0, #0]
    5dde:	2b00      	cmp	r3, #0
    5de0:	d0f9      	beq.n	5dd6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5de2:	4c0e      	ldr	r4, [pc, #56]	; (5e1c <z_impl_device_get_binding+0x4c>)
    5de4:	4e0e      	ldr	r6, [pc, #56]	; (5e20 <z_impl_device_get_binding+0x50>)
    5de6:	42b4      	cmp	r4, r6
    5de8:	d108      	bne.n	5dfc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5dea:	4c0c      	ldr	r4, [pc, #48]	; (5e1c <z_impl_device_get_binding+0x4c>)
    5dec:	42b4      	cmp	r4, r6
    5dee:	d0f2      	beq.n	5dd6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5df0:	4620      	mov	r0, r4
    5df2:	f003 fc70 	bl	96d6 <z_device_is_ready>
    5df6:	b950      	cbnz	r0, 5e0e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5df8:	3418      	adds	r4, #24
    5dfa:	e7f7      	b.n	5dec <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5dfc:	4620      	mov	r0, r4
    5dfe:	f003 fc6a 	bl	96d6 <z_device_is_ready>
    5e02:	b110      	cbz	r0, 5e0a <z_impl_device_get_binding+0x3a>
    5e04:	6823      	ldr	r3, [r4, #0]
    5e06:	42ab      	cmp	r3, r5
    5e08:	d0e6      	beq.n	5dd8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5e0a:	3418      	adds	r4, #24
    5e0c:	e7eb      	b.n	5de6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5e0e:	6821      	ldr	r1, [r4, #0]
    5e10:	4628      	mov	r0, r5
    5e12:	f003 f960 	bl	90d6 <strcmp>
    5e16:	2800      	cmp	r0, #0
    5e18:	d1ee      	bne.n	5df8 <z_impl_device_get_binding+0x28>
    5e1a:	e7dd      	b.n	5dd8 <z_impl_device_get_binding+0x8>
    5e1c:	000098b8 	.word	0x000098b8
    5e20:	00009948 	.word	0x00009948

00005e24 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e28:	4605      	mov	r5, r0
    5e2a:	b086      	sub	sp, #24
    5e2c:	460f      	mov	r7, r1
	__asm__ volatile(
    5e2e:	f04f 0340 	mov.w	r3, #64	; 0x40
    5e32:	f3ef 8811 	mrs	r8, BASEPRI
    5e36:	f383 8812 	msr	BASEPRI_MAX, r3
    5e3a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5e3e:	f001 fee9 	bl	7c14 <z_impl_z_current_get>
    5e42:	2d04      	cmp	r5, #4
    5e44:	bf96      	itet	ls
    5e46:	4b29      	ldrls	r3, [pc, #164]	; (5eec <z_fatal_error+0xc8>)
    5e48:	4b29      	ldrhi	r3, [pc, #164]	; (5ef0 <z_fatal_error+0xcc>)
    5e4a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5e4e:	4929      	ldr	r1, [pc, #164]	; (5ef4 <z_fatal_error+0xd0>)
    5e50:	9503      	str	r5, [sp, #12]
    5e52:	2400      	movs	r4, #0
    5e54:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5e58:	4b27      	ldr	r3, [pc, #156]	; (5ef8 <z_fatal_error+0xd4>)
    5e5a:	9400      	str	r4, [sp, #0]
    5e5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5e60:	4606      	mov	r6, r0
    5e62:	4623      	mov	r3, r4
    5e64:	2201      	movs	r2, #1
    5e66:	4620      	mov	r0, r4
    5e68:	f003 fc3f 	bl	96ea <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5e6c:	b16f      	cbz	r7, 5e8a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5e6e:	69fb      	ldr	r3, [r7, #28]
    5e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5e74:	b14b      	cbz	r3, 5e8a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    5e76:	4b21      	ldr	r3, [pc, #132]	; (5efc <z_fatal_error+0xd8>)
    5e78:	491e      	ldr	r1, [pc, #120]	; (5ef4 <z_fatal_error+0xd0>)
    5e7a:	9400      	str	r4, [sp, #0]
    5e7c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5e80:	2201      	movs	r2, #1
    5e82:	4623      	mov	r3, r4
    5e84:	4620      	mov	r0, r4
    5e86:	f003 fc30 	bl	96ea <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5e8a:	b12e      	cbz	r6, 5e98 <z_fatal_error+0x74>
    5e8c:	4630      	mov	r0, r6
    5e8e:	f003 fc62 	bl	9756 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5e92:	b108      	cbz	r0, 5e98 <z_fatal_error+0x74>
    5e94:	7803      	ldrb	r3, [r0, #0]
    5e96:	b903      	cbnz	r3, 5e9a <z_fatal_error+0x76>
		thread_name = "unknown";
    5e98:	4819      	ldr	r0, [pc, #100]	; (5f00 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5e9a:	4b1a      	ldr	r3, [pc, #104]	; (5f04 <z_fatal_error+0xe0>)
    5e9c:	9302      	str	r3, [sp, #8]
    5e9e:	2300      	movs	r3, #0
    5ea0:	e9cd 6003 	strd	r6, r0, [sp, #12]
    5ea4:	e9cd 3300 	strd	r3, r3, [sp]
    5ea8:	4618      	mov	r0, r3
    5eaa:	4912      	ldr	r1, [pc, #72]	; (5ef4 <z_fatal_error+0xd0>)
    5eac:	2201      	movs	r2, #1
    5eae:	f003 fc1c 	bl	96ea <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5eb2:	4639      	mov	r1, r7
    5eb4:	4628      	mov	r0, r5
    5eb6:	f7ff f817 	bl	4ee8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5eba:	2d04      	cmp	r5, #4
    5ebc:	d10c      	bne.n	5ed8 <z_fatal_error+0xb4>
    5ebe:	4912      	ldr	r1, [pc, #72]	; (5f08 <z_fatal_error+0xe4>)
    5ec0:	4a12      	ldr	r2, [pc, #72]	; (5f0c <z_fatal_error+0xe8>)
    5ec2:	4813      	ldr	r0, [pc, #76]	; (5f10 <z_fatal_error+0xec>)
    5ec4:	238f      	movs	r3, #143	; 0x8f
    5ec6:	f003 f830 	bl	8f2a <assert_print>
    5eca:	4812      	ldr	r0, [pc, #72]	; (5f14 <z_fatal_error+0xf0>)
    5ecc:	f003 f82d 	bl	8f2a <assert_print>
    5ed0:	480e      	ldr	r0, [pc, #56]	; (5f0c <z_fatal_error+0xe8>)
    5ed2:	218f      	movs	r1, #143	; 0x8f
    5ed4:	f003 f822 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    5ed8:	f388 8811 	msr	BASEPRI, r8
    5edc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5ee0:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5ee2:	b006      	add	sp, #24
    5ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ee8:	f7fd bbd8 	b.w	369c <z_impl_k_thread_abort>
    5eec:	00009da4 	.word	0x00009da4
    5ef0:	0000b48c 	.word	0x0000b48c
    5ef4:	00009af8 	.word	0x00009af8
    5ef8:	0000b4a2 	.word	0x0000b4a2
    5efc:	0000b4ca 	.word	0x0000b4ca
    5f00:	0000b49a 	.word	0x0000b49a
    5f04:	0000b4eb 	.word	0x0000b4eb
    5f08:	0000b525 	.word	0x0000b525
    5f0c:	0000b503 	.word	0x0000b503
    5f10:	00009eb7 	.word	0x00009eb7
    5f14:	0000b542 	.word	0x0000b542

00005f18 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5f18:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5f1a:	4b0a      	ldr	r3, [pc, #40]	; (5f44 <bg_thread_main+0x2c>)
    5f1c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5f1e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5f20:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5f22:	f7ff ff35 	bl	5d90 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5f26:	f002 fb53 	bl	85d0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5f2a:	2003      	movs	r0, #3
    5f2c:	f7ff ff30 	bl	5d90 <z_sys_init_run_level>

	z_init_static_threads();
    5f30:	f000 fa7e 	bl	6430 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5f34:	f7fa fd46 	bl	9c4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5f38:	4a03      	ldr	r2, [pc, #12]	; (5f48 <bg_thread_main+0x30>)
    5f3a:	7b13      	ldrb	r3, [r2, #12]
    5f3c:	f023 0301 	bic.w	r3, r3, #1
    5f40:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5f42:	bd08      	pop	{r3, pc}
    5f44:	20001290 	.word	0x20001290
    5f48:	20000480 	.word	0x20000480

00005f4c <z_bss_zero>:
{
    5f4c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5f4e:	4803      	ldr	r0, [pc, #12]	; (5f5c <z_bss_zero+0x10>)
    5f50:	4a03      	ldr	r2, [pc, #12]	; (5f60 <z_bss_zero+0x14>)
    5f52:	2100      	movs	r1, #0
    5f54:	1a12      	subs	r2, r2, r0
    5f56:	f003 fbd8 	bl	970a <z_early_memset>
}
    5f5a:	bd08      	pop	{r3, pc}
    5f5c:	20000260 	.word	0x20000260
    5f60:	20001294 	.word	0x20001294

00005f64 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5f64:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5f66:	2300      	movs	r3, #0
{
    5f68:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5f6a:	2201      	movs	r2, #1
    5f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5f70:	4e13      	ldr	r6, [pc, #76]	; (5fc0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f72:	4d14      	ldr	r5, [pc, #80]	; (5fc4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5f74:	9301      	str	r3, [sp, #4]
    5f76:	220f      	movs	r2, #15
    5f78:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5f7c:	4912      	ldr	r1, [pc, #72]	; (5fc8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f7e:	2318      	movs	r3, #24
    5f80:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5f84:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5f88:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5f8a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    5f8e:	fb00 1104 	mla	r1, r0, r4, r1
    5f92:	4b0e      	ldr	r3, [pc, #56]	; (5fcc <z_init_cpu+0x68>)
    5f94:	9500      	str	r5, [sp, #0]
    5f96:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5f9a:	4630      	mov	r0, r6
    5f9c:	f000 f994 	bl	62c8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5fa0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5fa2:	60ee      	str	r6, [r5, #12]
    5fa4:	f023 0304 	bic.w	r3, r3, #4
    5fa8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5faa:	4b09      	ldr	r3, [pc, #36]	; (5fd0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    5fac:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5fae:	f44f 6202 	mov.w	r2, #2080	; 0x820
    5fb2:	fb02 3304 	mla	r3, r2, r4, r3
    5fb6:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
    5fb8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5fba:	b006      	add	sp, #24
    5fbc:	bd70      	pop	{r4, r5, r6, pc}
    5fbe:	bf00      	nop
    5fc0:	20000400 	.word	0x20000400
    5fc4:	20000c3c 	.word	0x20000c3c
    5fc8:	20002320 	.word	0x20002320
    5fcc:	0000658d 	.word	0x0000658d
    5fd0:	20002480 	.word	0x20002480

00005fd4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5fd4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5fd6:	4b30      	ldr	r3, [pc, #192]	; (6098 <z_cstart+0xc4>)
    5fd8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5fda:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5fde:	4d2f      	ldr	r5, [pc, #188]	; (609c <z_cstart+0xc8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5fe0:	4e2f      	ldr	r6, [pc, #188]	; (60a0 <z_cstart+0xcc>)
    5fe2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5fe4:	4f2f      	ldr	r7, [pc, #188]	; (60a4 <z_cstart+0xd0>)
    5fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5fea:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5fec:	23e0      	movs	r3, #224	; 0xe0
    5fee:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5ff2:	2400      	movs	r4, #0
    5ff4:	2320      	movs	r3, #32
    5ff6:	77eb      	strb	r3, [r5, #31]
    5ff8:	762c      	strb	r4, [r5, #24]
    5ffa:	766c      	strb	r4, [r5, #25]
    5ffc:	76ac      	strb	r4, [r5, #26]
    5ffe:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6004:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6008:	626b      	str	r3, [r5, #36]	; 0x24
    600a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    600e:	f7fd fab9 	bl	3584 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6012:	f7fc fe07 	bl	2c24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    601a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    601c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    601e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6020:	f7fd fc38 	bl	3894 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6024:	f7fd fb50 	bl	36c8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6028:	f7fb ffda 	bl	1fe0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    602c:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    6030:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    6032:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6036:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    603a:	f002 fac3 	bl	85c4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    603e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6040:	f003 fb48 	bl	96d4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6044:	4620      	mov	r0, r4
    6046:	f7ff fea3 	bl	5d90 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    604a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    604c:	4d16      	ldr	r5, [pc, #88]	; (60a8 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    604e:	f7ff fe9f 	bl	5d90 <z_sys_init_run_level>
	z_sched_init();
    6052:	f001 fc55 	bl	7900 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6056:	4b15      	ldr	r3, [pc, #84]	; (60ac <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    6058:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    605a:	9305      	str	r3, [sp, #20]
    605c:	2301      	movs	r3, #1
    605e:	4914      	ldr	r1, [pc, #80]	; (60b0 <z_cstart+0xdc>)
    6060:	9400      	str	r4, [sp, #0]
    6062:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6066:	f44f 6280 	mov.w	r2, #1024	; 0x400
    606a:	463b      	mov	r3, r7
    606c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6070:	4628      	mov	r0, r5
    6072:	f000 f929 	bl	62c8 <z_setup_new_thread>
    6076:	7b6a      	ldrb	r2, [r5, #13]
    6078:	4606      	mov	r6, r0
    607a:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    607e:	4628      	mov	r0, r5
    6080:	736a      	strb	r2, [r5, #13]
    6082:	f001 f847 	bl	7114 <z_ready_thread>
	z_init_cpu(0);
    6086:	4620      	mov	r0, r4
    6088:	f7ff ff6c 	bl	5f64 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    608c:	463a      	mov	r2, r7
    608e:	4631      	mov	r1, r6
    6090:	4628      	mov	r0, r5
    6092:	f7fc ff2f 	bl	2ef4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6096:	bf00      	nop
    6098:	20002ca0 	.word	0x20002ca0
    609c:	e000ed00 	.word	0xe000ed00
    60a0:	20000c3c 	.word	0x20000c3c
    60a4:	00005f19 	.word	0x00005f19
    60a8:	20000480 	.word	0x20000480
    60ac:	0000b5c1 	.word	0x0000b5c1
    60b0:	20001f00 	.word	0x20001f00

000060b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    60b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60b6:	4c16      	ldr	r4, [pc, #88]	; (6110 <init_mem_slab_module+0x5c>)
    60b8:	4d16      	ldr	r5, [pc, #88]	; (6114 <init_mem_slab_module+0x60>)
    60ba:	4e17      	ldr	r6, [pc, #92]	; (6118 <init_mem_slab_module+0x64>)
    60bc:	42ac      	cmp	r4, r5
    60be:	d90c      	bls.n	60da <init_mem_slab_module+0x26>
    60c0:	4916      	ldr	r1, [pc, #88]	; (611c <init_mem_slab_module+0x68>)
    60c2:	4817      	ldr	r0, [pc, #92]	; (6120 <init_mem_slab_module+0x6c>)
    60c4:	233d      	movs	r3, #61	; 0x3d
    60c6:	4632      	mov	r2, r6
    60c8:	f002 ff2f 	bl	8f2a <assert_print>
    60cc:	4815      	ldr	r0, [pc, #84]	; (6124 <init_mem_slab_module+0x70>)
    60ce:	f002 ff2c 	bl	8f2a <assert_print>
    60d2:	213d      	movs	r1, #61	; 0x3d
    60d4:	4630      	mov	r0, r6
    60d6:	f002 ff21 	bl	8f1c <assert_post_action>
    60da:	42ac      	cmp	r4, r5
    60dc:	d301      	bcc.n	60e2 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    60de:	2000      	movs	r0, #0
	return rc;
}
    60e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    60e2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    60e6:	ea41 0302 	orr.w	r3, r1, r2
    60ea:	f013 0303 	ands.w	r3, r3, #3
    60ee:	d10b      	bne.n	6108 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    60f0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    60f2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    60f4:	4283      	cmp	r3, r0
    60f6:	d101      	bne.n	60fc <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60f8:	3420      	adds	r4, #32
    60fa:	e7df      	b.n	60bc <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    60fc:	69a7      	ldr	r7, [r4, #24]
    60fe:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6100:	3301      	adds	r3, #1
		slab->free_list = p;
    6102:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    6104:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6106:	e7f5      	b.n	60f4 <init_mem_slab_module+0x40>
	return rc;
    6108:	f06f 0015 	mvn.w	r0, #21
    610c:	e7e8      	b.n	60e0 <init_mem_slab_module+0x2c>
    610e:	bf00      	nop
    6110:	200001f4 	.word	0x200001f4
    6114:	200001f4 	.word	0x200001f4
    6118:	0000b5c9 	.word	0x0000b5c9
    611c:	0000b5ee 	.word	0x0000b5ee
    6120:	00009eb7 	.word	0x00009eb7
    6124:	0000b60b 	.word	0x0000b60b

00006128 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    612c:	4604      	mov	r4, r0
    612e:	460e      	mov	r6, r1
    6130:	4690      	mov	r8, r2
    6132:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6134:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6138:	f04f 0340 	mov.w	r3, #64	; 0x40
    613c:	f3ef 8911 	mrs	r9, BASEPRI
    6140:	f383 8812 	msr	BASEPRI_MAX, r3
    6144:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6148:	4628      	mov	r0, r5
    614a:	f000 f9f9 	bl	6540 <z_spin_lock_valid>
    614e:	b968      	cbnz	r0, 616c <k_mem_slab_alloc+0x44>
    6150:	4a24      	ldr	r2, [pc, #144]	; (61e4 <k_mem_slab_alloc+0xbc>)
    6152:	4925      	ldr	r1, [pc, #148]	; (61e8 <k_mem_slab_alloc+0xc0>)
    6154:	4825      	ldr	r0, [pc, #148]	; (61ec <k_mem_slab_alloc+0xc4>)
    6156:	238e      	movs	r3, #142	; 0x8e
    6158:	f002 fee7 	bl	8f2a <assert_print>
    615c:	4824      	ldr	r0, [pc, #144]	; (61f0 <k_mem_slab_alloc+0xc8>)
    615e:	4629      	mov	r1, r5
    6160:	f002 fee3 	bl	8f2a <assert_print>
    6164:	481f      	ldr	r0, [pc, #124]	; (61e4 <k_mem_slab_alloc+0xbc>)
    6166:	218e      	movs	r1, #142	; 0x8e
    6168:	f002 fed8 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    616c:	4628      	mov	r0, r5
    616e:	f000 fa05 	bl	657c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6172:	69a3      	ldr	r3, [r4, #24]
    6174:	b1eb      	cbz	r3, 61b2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    6176:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    6178:	681b      	ldr	r3, [r3, #0]
    617a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    617c:	69e3      	ldr	r3, [r4, #28]
    617e:	3301      	adds	r3, #1
    6180:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6182:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6184:	4628      	mov	r0, r5
    6186:	f000 f9e9 	bl	655c <z_spin_unlock_valid>
    618a:	b968      	cbnz	r0, 61a8 <k_mem_slab_alloc+0x80>
    618c:	4a15      	ldr	r2, [pc, #84]	; (61e4 <k_mem_slab_alloc+0xbc>)
    618e:	4919      	ldr	r1, [pc, #100]	; (61f4 <k_mem_slab_alloc+0xcc>)
    6190:	4816      	ldr	r0, [pc, #88]	; (61ec <k_mem_slab_alloc+0xc4>)
    6192:	23b9      	movs	r3, #185	; 0xb9
    6194:	f002 fec9 	bl	8f2a <assert_print>
    6198:	4817      	ldr	r0, [pc, #92]	; (61f8 <k_mem_slab_alloc+0xd0>)
    619a:	4629      	mov	r1, r5
    619c:	f002 fec5 	bl	8f2a <assert_print>
    61a0:	4810      	ldr	r0, [pc, #64]	; (61e4 <k_mem_slab_alloc+0xbc>)
    61a2:	21b9      	movs	r1, #185	; 0xb9
    61a4:	f002 feba 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    61a8:	f389 8811 	msr	BASEPRI, r9
    61ac:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    61b0:	e013      	b.n	61da <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    61b2:	ea58 0207 	orrs.w	r2, r8, r7
    61b6:	d103      	bne.n	61c0 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    61b8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    61ba:	f06f 040b 	mvn.w	r4, #11
    61be:	e7e1      	b.n	6184 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    61c0:	4622      	mov	r2, r4
    61c2:	e9cd 8700 	strd	r8, r7, [sp]
    61c6:	4649      	mov	r1, r9
    61c8:	4628      	mov	r0, r5
    61ca:	f001 f951 	bl	7470 <z_pend_curr>
		if (result == 0) {
    61ce:	4604      	mov	r4, r0
    61d0:	b918      	cbnz	r0, 61da <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    61d2:	4b0a      	ldr	r3, [pc, #40]	; (61fc <k_mem_slab_alloc+0xd4>)
    61d4:	689b      	ldr	r3, [r3, #8]
    61d6:	695b      	ldr	r3, [r3, #20]
    61d8:	6033      	str	r3, [r6, #0]
}
    61da:	4620      	mov	r0, r4
    61dc:	b003      	add	sp, #12
    61de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    61e2:	bf00      	nop
    61e4:	0000a38e 	.word	0x0000a38e
    61e8:	0000a3e7 	.word	0x0000a3e7
    61ec:	00009eb7 	.word	0x00009eb7
    61f0:	0000a3fc 	.word	0x0000a3fc
    61f4:	0000a3bb 	.word	0x0000a3bb
    61f8:	0000a3d2 	.word	0x0000a3d2
    61fc:	20000c3c 	.word	0x20000c3c

00006200 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6204:	4604      	mov	r4, r0
    6206:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6208:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    620c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6210:	f3ef 8711 	mrs	r7, BASEPRI
    6214:	f383 8812 	msr	BASEPRI_MAX, r3
    6218:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    621c:	4628      	mov	r0, r5
    621e:	f000 f98f 	bl	6540 <z_spin_lock_valid>
    6222:	b968      	cbnz	r0, 6240 <k_mem_slab_free+0x40>
    6224:	4a22      	ldr	r2, [pc, #136]	; (62b0 <k_mem_slab_free+0xb0>)
    6226:	4923      	ldr	r1, [pc, #140]	; (62b4 <k_mem_slab_free+0xb4>)
    6228:	4823      	ldr	r0, [pc, #140]	; (62b8 <k_mem_slab_free+0xb8>)
    622a:	238e      	movs	r3, #142	; 0x8e
    622c:	f002 fe7d 	bl	8f2a <assert_print>
    6230:	4822      	ldr	r0, [pc, #136]	; (62bc <k_mem_slab_free+0xbc>)
    6232:	4629      	mov	r1, r5
    6234:	f002 fe79 	bl	8f2a <assert_print>
    6238:	481d      	ldr	r0, [pc, #116]	; (62b0 <k_mem_slab_free+0xb0>)
    623a:	218e      	movs	r1, #142	; 0x8e
    623c:	f002 fe6e 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6240:	4628      	mov	r0, r5
    6242:	f000 f99b 	bl	657c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6246:	f8d4 8018 	ldr.w	r8, [r4, #24]
    624a:	f1b8 0f00 	cmp.w	r8, #0
    624e:	d10f      	bne.n	6270 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6250:	4620      	mov	r0, r4
    6252:	f001 fb05 	bl	7860 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6256:	b158      	cbz	r0, 6270 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6258:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    625a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    625c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6260:	f000 ff58 	bl	7114 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6264:	4639      	mov	r1, r7
    6266:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    626c:	f000 bd08 	b.w	6c80 <z_reschedule>
	**(char ***) mem = slab->free_list;
    6270:	6833      	ldr	r3, [r6, #0]
    6272:	69a2      	ldr	r2, [r4, #24]
    6274:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6276:	6833      	ldr	r3, [r6, #0]
    6278:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    627a:	69e3      	ldr	r3, [r4, #28]
    627c:	3b01      	subs	r3, #1
    627e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6280:	4628      	mov	r0, r5
    6282:	f000 f96b 	bl	655c <z_spin_unlock_valid>
    6286:	b968      	cbnz	r0, 62a4 <k_mem_slab_free+0xa4>
    6288:	4a09      	ldr	r2, [pc, #36]	; (62b0 <k_mem_slab_free+0xb0>)
    628a:	490d      	ldr	r1, [pc, #52]	; (62c0 <k_mem_slab_free+0xc0>)
    628c:	480a      	ldr	r0, [pc, #40]	; (62b8 <k_mem_slab_free+0xb8>)
    628e:	23b9      	movs	r3, #185	; 0xb9
    6290:	f002 fe4b 	bl	8f2a <assert_print>
    6294:	480b      	ldr	r0, [pc, #44]	; (62c4 <k_mem_slab_free+0xc4>)
    6296:	4629      	mov	r1, r5
    6298:	f002 fe47 	bl	8f2a <assert_print>
    629c:	4804      	ldr	r0, [pc, #16]	; (62b0 <k_mem_slab_free+0xb0>)
    629e:	21b9      	movs	r1, #185	; 0xb9
    62a0:	f002 fe3c 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    62a4:	f387 8811 	msr	BASEPRI, r7
    62a8:	f3bf 8f6f 	isb	sy
}
    62ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    62b0:	0000a38e 	.word	0x0000a38e
    62b4:	0000a3e7 	.word	0x0000a3e7
    62b8:	00009eb7 	.word	0x00009eb7
    62bc:	0000a3fc 	.word	0x0000a3fc
    62c0:	0000a3bb 	.word	0x0000a3bb
    62c4:	0000a3d2 	.word	0x0000a3d2

000062c8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    62c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62cc:	b085      	sub	sp, #20
    62ce:	4604      	mov	r4, r0
    62d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    62d4:	f1b8 0f0f 	cmp.w	r8, #15
{
    62d8:	460f      	mov	r7, r1
    62da:	4615      	mov	r5, r2
    62dc:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    62de:	d132      	bne.n	6346 <z_setup_new_thread+0x7e>
    62e0:	4b25      	ldr	r3, [pc, #148]	; (6378 <z_setup_new_thread+0xb0>)
    62e2:	4599      	cmp	r9, r3
    62e4:	d133      	bne.n	634e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    62e6:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    62ea:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    62ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    62f0:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    62f2:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    62f4:	2304      	movs	r3, #4
    62f6:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    62f8:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    62fc:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6300:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6304:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6306:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    630a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    630c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6312:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6314:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6318:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    631a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    631c:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    631e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6322:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6324:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6326:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6328:	4642      	mov	r2, r8
    632a:	4639      	mov	r1, r7
    632c:	4620      	mov	r0, r4
    632e:	f7fc fdaf 	bl	2e90 <arch_new_thread>
	if (!_current) {
    6332:	4b12      	ldr	r3, [pc, #72]	; (637c <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6334:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6336:	689b      	ldr	r3, [r3, #8]
    6338:	b103      	cbz	r3, 633c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    633c:	6723      	str	r3, [r4, #112]	; 0x70
}
    633e:	4640      	mov	r0, r8
    6340:	b005      	add	sp, #20
    6342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6346:	f108 0310 	add.w	r3, r8, #16
    634a:	2b1e      	cmp	r3, #30
    634c:	d9cb      	bls.n	62e6 <z_setup_new_thread+0x1e>
    634e:	4a0c      	ldr	r2, [pc, #48]	; (6380 <z_setup_new_thread+0xb8>)
    6350:	490c      	ldr	r1, [pc, #48]	; (6384 <z_setup_new_thread+0xbc>)
    6352:	480d      	ldr	r0, [pc, #52]	; (6388 <z_setup_new_thread+0xc0>)
    6354:	f240 13ff 	movw	r3, #511	; 0x1ff
    6358:	f002 fde7 	bl	8f2a <assert_print>
    635c:	4641      	mov	r1, r8
    635e:	480b      	ldr	r0, [pc, #44]	; (638c <z_setup_new_thread+0xc4>)
    6360:	f06f 030f 	mvn.w	r3, #15
    6364:	220e      	movs	r2, #14
    6366:	f002 fde0 	bl	8f2a <assert_print>
    636a:	4805      	ldr	r0, [pc, #20]	; (6380 <z_setup_new_thread+0xb8>)
    636c:	f240 11ff 	movw	r1, #511	; 0x1ff
    6370:	f002 fdd4 	bl	8f1c <assert_post_action>
    6374:	e7b7      	b.n	62e6 <z_setup_new_thread+0x1e>
    6376:	bf00      	nop
    6378:	0000658d 	.word	0x0000658d
    637c:	20000c3c 	.word	0x20000c3c
    6380:	0000b62a 	.word	0x0000b62a
    6384:	0000b64d 	.word	0x0000b64d
    6388:	00009eb7 	.word	0x00009eb7
    638c:	0000b6cd 	.word	0x0000b6cd

00006390 <z_impl_k_thread_create>:
{
    6390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6394:	b087      	sub	sp, #28
    6396:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    639a:	4604      	mov	r4, r0
    639c:	460f      	mov	r7, r1
    639e:	4690      	mov	r8, r2
    63a0:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    63a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    63a6:	b173      	cbz	r3, 63c6 <z_impl_k_thread_create+0x36>
    63a8:	491c      	ldr	r1, [pc, #112]	; (641c <z_impl_k_thread_create+0x8c>)
    63aa:	4a1d      	ldr	r2, [pc, #116]	; (6420 <z_impl_k_thread_create+0x90>)
    63ac:	481d      	ldr	r0, [pc, #116]	; (6424 <z_impl_k_thread_create+0x94>)
    63ae:	f240 236e 	movw	r3, #622	; 0x26e
    63b2:	f002 fdba 	bl	8f2a <assert_print>
    63b6:	481c      	ldr	r0, [pc, #112]	; (6428 <z_impl_k_thread_create+0x98>)
    63b8:	f002 fdb7 	bl	8f2a <assert_print>
    63bc:	4818      	ldr	r0, [pc, #96]	; (6420 <z_impl_k_thread_create+0x90>)
    63be:	f240 216e 	movw	r1, #622	; 0x26e
    63c2:	f002 fdab 	bl	8f1c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    63c6:	2300      	movs	r3, #0
    63c8:	9305      	str	r3, [sp, #20]
    63ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    63cc:	9304      	str	r3, [sp, #16]
    63ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
    63d0:	9303      	str	r3, [sp, #12]
    63d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    63d4:	9302      	str	r3, [sp, #8]
    63d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    63d8:	9301      	str	r3, [sp, #4]
    63da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    63dc:	9300      	str	r3, [sp, #0]
    63de:	4642      	mov	r2, r8
    63e0:	464b      	mov	r3, r9
    63e2:	4639      	mov	r1, r7
    63e4:	4620      	mov	r0, r4
    63e6:	f7ff ff6f 	bl	62c8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    63ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    63ee:	bf08      	it	eq
    63f0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    63f4:	d005      	beq.n	6402 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    63f6:	ea55 0306 	orrs.w	r3, r5, r6
    63fa:	d106      	bne.n	640a <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    63fc:	4620      	mov	r0, r4
    63fe:	f000 fed1 	bl	71a4 <z_sched_start>
}
    6402:	4620      	mov	r0, r4
    6404:	b007      	add	sp, #28
    6406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    640a:	4908      	ldr	r1, [pc, #32]	; (642c <z_impl_k_thread_create+0x9c>)
    640c:	4632      	mov	r2, r6
    640e:	462b      	mov	r3, r5
    6410:	f104 0018 	add.w	r0, r4, #24
    6414:	f001 fd1c 	bl	7e50 <z_add_timeout>
    6418:	e7f3      	b.n	6402 <z_impl_k_thread_create+0x72>
    641a:	bf00      	nop
    641c:	0000b6fe 	.word	0x0000b6fe
    6420:	0000b62a 	.word	0x0000b62a
    6424:	00009eb7 	.word	0x00009eb7
    6428:	0000b710 	.word	0x0000b710
    642c:	0000724d 	.word	0x0000724d

00006430 <z_init_static_threads>:
{
    6430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6434:	4c3b      	ldr	r4, [pc, #236]	; (6524 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    6436:	4d3c      	ldr	r5, [pc, #240]	; (6528 <z_init_static_threads+0xf8>)
    6438:	4f3c      	ldr	r7, [pc, #240]	; (652c <z_init_static_threads+0xfc>)
{
    643a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    643c:	42ac      	cmp	r4, r5
    643e:	4626      	mov	r6, r4
    6440:	d90e      	bls.n	6460 <z_init_static_threads+0x30>
    6442:	493b      	ldr	r1, [pc, #236]	; (6530 <z_init_static_threads+0x100>)
    6444:	483b      	ldr	r0, [pc, #236]	; (6534 <z_init_static_threads+0x104>)
    6446:	f240 23d5 	movw	r3, #725	; 0x2d5
    644a:	463a      	mov	r2, r7
    644c:	f002 fd6d 	bl	8f2a <assert_print>
    6450:	4839      	ldr	r0, [pc, #228]	; (6538 <z_init_static_threads+0x108>)
    6452:	f002 fd6a 	bl	8f2a <assert_print>
    6456:	f240 21d5 	movw	r1, #725	; 0x2d5
    645a:	4638      	mov	r0, r7
    645c:	f002 fd5e 	bl	8f1c <assert_post_action>
    6460:	42ae      	cmp	r6, r5
    6462:	f104 0430 	add.w	r4, r4, #48	; 0x30
    6466:	d31f      	bcc.n	64a8 <z_init_static_threads+0x78>
	k_sched_lock();
    6468:	f000 fc4e 	bl	6d08 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    646c:	4c2d      	ldr	r4, [pc, #180]	; (6524 <z_init_static_threads+0xf4>)
    646e:	4e2f      	ldr	r6, [pc, #188]	; (652c <z_init_static_threads+0xfc>)
    6470:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6530 <z_init_static_threads+0x100>
    6474:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 6534 <z_init_static_threads+0x104>
    6478:	42ac      	cmp	r4, r5
    647a:	d90e      	bls.n	649a <z_init_static_threads+0x6a>
    647c:	4641      	mov	r1, r8
    647e:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    6482:	4632      	mov	r2, r6
    6484:	4648      	mov	r0, r9
    6486:	f002 fd50 	bl	8f2a <assert_print>
    648a:	482b      	ldr	r0, [pc, #172]	; (6538 <z_init_static_threads+0x108>)
    648c:	f002 fd4d 	bl	8f2a <assert_print>
    6490:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    6494:	4630      	mov	r0, r6
    6496:	f002 fd41 	bl	8f1c <assert_post_action>
    649a:	42ac      	cmp	r4, r5
    649c:	d320      	bcc.n	64e0 <z_init_static_threads+0xb0>
}
    649e:	b007      	add	sp, #28
    64a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    64a4:	f001 b914 	b.w	76d0 <k_sched_unlock>
		z_setup_new_thread(
    64a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    64ac:	9305      	str	r3, [sp, #20]
    64ae:	f854 3c10 	ldr.w	r3, [r4, #-16]
    64b2:	9304      	str	r3, [sp, #16]
    64b4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    64b8:	9303      	str	r3, [sp, #12]
    64ba:	f854 3c18 	ldr.w	r3, [r4, #-24]
    64be:	9302      	str	r3, [sp, #8]
    64c0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    64c4:	9301      	str	r3, [sp, #4]
    64c6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    64ca:	9300      	str	r3, [sp, #0]
    64cc:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    64d0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    64d4:	f7ff fef8 	bl	62c8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    64d8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    64dc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    64de:	e7ad      	b.n	643c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    64e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    64e2:	1c5a      	adds	r2, r3, #1
    64e4:	d00f      	beq.n	6506 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    64e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    64ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    64ee:	f240 30e7 	movw	r0, #999	; 0x3e7
    64f2:	2100      	movs	r1, #0
    64f4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    64f8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    64fc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    64fe:	d104      	bne.n	650a <z_init_static_threads+0xda>
	z_sched_start(thread);
    6500:	4638      	mov	r0, r7
    6502:	f000 fe4f 	bl	71a4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6506:	3430      	adds	r4, #48	; 0x30
    6508:	e7b6      	b.n	6478 <z_init_static_threads+0x48>
    650a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    650e:	2300      	movs	r3, #0
    6510:	f7fa f828 	bl	564 <__aeabi_uldivmod>
    6514:	4602      	mov	r2, r0
    6516:	460b      	mov	r3, r1
    6518:	f107 0018 	add.w	r0, r7, #24
    651c:	4907      	ldr	r1, [pc, #28]	; (653c <z_init_static_threads+0x10c>)
    651e:	f001 fc97 	bl	7e50 <z_add_timeout>
    6522:	e7f0      	b.n	6506 <z_init_static_threads+0xd6>
    6524:	200001f4 	.word	0x200001f4
    6528:	200001f4 	.word	0x200001f4
    652c:	0000b62a 	.word	0x0000b62a
    6530:	0000b735 	.word	0x0000b735
    6534:	00009eb7 	.word	0x00009eb7
    6538:	0000b60b 	.word	0x0000b60b
    653c:	0000724d 	.word	0x0000724d

00006540 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6540:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    6542:	b138      	cbz	r0, 6554 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6544:	4b04      	ldr	r3, [pc, #16]	; (6558 <z_spin_lock_valid+0x18>)
    6546:	7d1b      	ldrb	r3, [r3, #20]
    6548:	f000 0003 	and.w	r0, r0, #3
    654c:	1ac0      	subs	r0, r0, r3
    654e:	bf18      	it	ne
    6550:	2001      	movne	r0, #1
    6552:	4770      	bx	lr
			return false;
		}
	}
	return true;
    6554:	2001      	movs	r0, #1
}
    6556:	4770      	bx	lr
    6558:	20000c3c 	.word	0x20000c3c

0000655c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    655c:	4a06      	ldr	r2, [pc, #24]	; (6578 <z_spin_unlock_valid+0x1c>)
    655e:	7d11      	ldrb	r1, [r2, #20]
    6560:	6892      	ldr	r2, [r2, #8]
    6562:	430a      	orrs	r2, r1
    6564:	6801      	ldr	r1, [r0, #0]
{
    6566:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6568:	4291      	cmp	r1, r2
    656a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    656e:	bf04      	itt	eq
    6570:	6018      	streq	r0, [r3, #0]
	return true;
    6572:	2001      	moveq	r0, #1
}
    6574:	4770      	bx	lr
    6576:	bf00      	nop
    6578:	20000c3c 	.word	0x20000c3c

0000657c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    657c:	4b02      	ldr	r3, [pc, #8]	; (6588 <z_spin_lock_set_owner+0xc>)
    657e:	7d1a      	ldrb	r2, [r3, #20]
    6580:	689b      	ldr	r3, [r3, #8]
    6582:	4313      	orrs	r3, r2
    6584:	6003      	str	r3, [r0, #0]
}
    6586:	4770      	bx	lr
    6588:	20000c3c 	.word	0x20000c3c

0000658c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    658c:	4c13      	ldr	r4, [pc, #76]	; (65dc <idle+0x50>)
{
    658e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    6590:	68a3      	ldr	r3, [r4, #8]
    6592:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6596:	2b00      	cmp	r3, #0
    6598:	da09      	bge.n	65ae <idle+0x22>
    659a:	4911      	ldr	r1, [pc, #68]	; (65e0 <idle+0x54>)
    659c:	4811      	ldr	r0, [pc, #68]	; (65e4 <idle+0x58>)
    659e:	4a12      	ldr	r2, [pc, #72]	; (65e8 <idle+0x5c>)
    65a0:	2327      	movs	r3, #39	; 0x27
    65a2:	f002 fcc2 	bl	8f2a <assert_print>
    65a6:	4810      	ldr	r0, [pc, #64]	; (65e8 <idle+0x5c>)
    65a8:	2127      	movs	r1, #39	; 0x27
    65aa:	f002 fcb7 	bl	8f1c <assert_post_action>
	return !z_sys_post_kernel;
    65ae:	4d0f      	ldr	r5, [pc, #60]	; (65ec <idle+0x60>)
	__asm__ volatile(
    65b0:	f04f 0240 	mov.w	r2, #64	; 0x40
    65b4:	f3ef 8311 	mrs	r3, BASEPRI
    65b8:	f382 8812 	msr	BASEPRI_MAX, r2
    65bc:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    65c0:	f001 fd5c 	bl	807c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    65c4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    65c6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    65c8:	b913      	cbnz	r3, 65d0 <idle+0x44>
	arch_cpu_idle();
    65ca:	f7fc fb31 	bl	2c30 <arch_cpu_idle>
}
    65ce:	e7ef      	b.n	65b0 <idle+0x24>
    65d0:	f7fc f986 	bl	28e0 <pm_system_suspend>
    65d4:	2800      	cmp	r0, #0
    65d6:	d1eb      	bne.n	65b0 <idle+0x24>
    65d8:	e7f7      	b.n	65ca <idle+0x3e>
    65da:	bf00      	nop
    65dc:	20000c3c 	.word	0x20000c3c
    65e0:	0000b783 	.word	0x0000b783
    65e4:	00009eb7 	.word	0x00009eb7
    65e8:	0000b762 	.word	0x0000b762
    65ec:	20001290 	.word	0x20001290

000065f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    65f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    65f4:	4604      	mov	r4, r0
    65f6:	4617      	mov	r7, r2
    65f8:	461e      	mov	r6, r3
    65fa:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    65fe:	b163      	cbz	r3, 661a <z_impl_k_mutex_lock+0x2a>
    6600:	496d      	ldr	r1, [pc, #436]	; (67b8 <z_impl_k_mutex_lock+0x1c8>)
    6602:	4a6e      	ldr	r2, [pc, #440]	; (67bc <z_impl_k_mutex_lock+0x1cc>)
    6604:	486e      	ldr	r0, [pc, #440]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    6606:	2365      	movs	r3, #101	; 0x65
    6608:	f002 fc8f 	bl	8f2a <assert_print>
    660c:	486d      	ldr	r0, [pc, #436]	; (67c4 <z_impl_k_mutex_lock+0x1d4>)
    660e:	f002 fc8c 	bl	8f2a <assert_print>
    6612:	486a      	ldr	r0, [pc, #424]	; (67bc <z_impl_k_mutex_lock+0x1cc>)
    6614:	2165      	movs	r1, #101	; 0x65
    6616:	f002 fc81 	bl	8f1c <assert_post_action>
    661a:	f04f 0340 	mov.w	r3, #64	; 0x40
    661e:	f3ef 8811 	mrs	r8, BASEPRI
    6622:	f383 8812 	msr	BASEPRI_MAX, r3
    6626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    662a:	4867      	ldr	r0, [pc, #412]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    662c:	f7ff ff88 	bl	6540 <z_spin_lock_valid>
    6630:	b968      	cbnz	r0, 664e <z_impl_k_mutex_lock+0x5e>
    6632:	4a66      	ldr	r2, [pc, #408]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6634:	4966      	ldr	r1, [pc, #408]	; (67d0 <z_impl_k_mutex_lock+0x1e0>)
    6636:	4862      	ldr	r0, [pc, #392]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    6638:	238e      	movs	r3, #142	; 0x8e
    663a:	f002 fc76 	bl	8f2a <assert_print>
    663e:	4962      	ldr	r1, [pc, #392]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    6640:	4864      	ldr	r0, [pc, #400]	; (67d4 <z_impl_k_mutex_lock+0x1e4>)
    6642:	f002 fc72 	bl	8f2a <assert_print>
    6646:	4861      	ldr	r0, [pc, #388]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6648:	218e      	movs	r1, #142	; 0x8e
    664a:	f002 fc67 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    664e:	485e      	ldr	r0, [pc, #376]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    6650:	f7ff ff94 	bl	657c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6654:	68e3      	ldr	r3, [r4, #12]
    6656:	4a60      	ldr	r2, [pc, #384]	; (67d8 <z_impl_k_mutex_lock+0x1e8>)
    6658:	b1fb      	cbz	r3, 669a <z_impl_k_mutex_lock+0xaa>
    665a:	68a0      	ldr	r0, [r4, #8]
    665c:	6891      	ldr	r1, [r2, #8]
    665e:	4288      	cmp	r0, r1
    6660:	d03d      	beq.n	66de <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6662:	ea57 0306 	orrs.w	r3, r7, r6
    6666:	d13c      	bne.n	66e2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6668:	4857      	ldr	r0, [pc, #348]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    666a:	f7ff ff77 	bl	655c <z_spin_unlock_valid>
    666e:	b968      	cbnz	r0, 668c <z_impl_k_mutex_lock+0x9c>
    6670:	4a56      	ldr	r2, [pc, #344]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6672:	495a      	ldr	r1, [pc, #360]	; (67dc <z_impl_k_mutex_lock+0x1ec>)
    6674:	4852      	ldr	r0, [pc, #328]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    6676:	23b9      	movs	r3, #185	; 0xb9
    6678:	f002 fc57 	bl	8f2a <assert_print>
    667c:	4952      	ldr	r1, [pc, #328]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    667e:	4858      	ldr	r0, [pc, #352]	; (67e0 <z_impl_k_mutex_lock+0x1f0>)
    6680:	f002 fc53 	bl	8f2a <assert_print>
    6684:	4851      	ldr	r0, [pc, #324]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6686:	21b9      	movs	r1, #185	; 0xb9
    6688:	f002 fc48 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    668c:	f388 8811 	msr	BASEPRI, r8
    6690:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6694:	f06f 000f 	mvn.w	r0, #15
    6698:	e01e      	b.n	66d8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    669a:	6891      	ldr	r1, [r2, #8]
    669c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    66a0:	4849      	ldr	r0, [pc, #292]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    66a2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    66a4:	3301      	adds	r3, #1
    66a6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    66a8:	6893      	ldr	r3, [r2, #8]
    66aa:	60a3      	str	r3, [r4, #8]
    66ac:	f7ff ff56 	bl	655c <z_spin_unlock_valid>
    66b0:	b968      	cbnz	r0, 66ce <z_impl_k_mutex_lock+0xde>
    66b2:	4a46      	ldr	r2, [pc, #280]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    66b4:	4949      	ldr	r1, [pc, #292]	; (67dc <z_impl_k_mutex_lock+0x1ec>)
    66b6:	4842      	ldr	r0, [pc, #264]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    66b8:	23b9      	movs	r3, #185	; 0xb9
    66ba:	f002 fc36 	bl	8f2a <assert_print>
    66be:	4942      	ldr	r1, [pc, #264]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    66c0:	4847      	ldr	r0, [pc, #284]	; (67e0 <z_impl_k_mutex_lock+0x1f0>)
    66c2:	f002 fc32 	bl	8f2a <assert_print>
    66c6:	4841      	ldr	r0, [pc, #260]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    66c8:	21b9      	movs	r1, #185	; 0xb9
    66ca:	f002 fc27 	bl	8f1c <assert_post_action>
    66ce:	f388 8811 	msr	BASEPRI, r8
    66d2:	f3bf 8f6f 	isb	sy
		return 0;
    66d6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    66d8:	b002      	add	sp, #8
    66da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    66de:	6921      	ldr	r1, [r4, #16]
    66e0:	e7de      	b.n	66a0 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    66e2:	f991 100e 	ldrsb.w	r1, [r1, #14]
    66e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    66ea:	4299      	cmp	r1, r3
    66ec:	bfa8      	it	ge
    66ee:	4619      	movge	r1, r3
    66f0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    66f4:	4291      	cmp	r1, r2
    66f6:	bfb8      	it	lt
    66f8:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    66fa:	4299      	cmp	r1, r3
    66fc:	da43      	bge.n	6786 <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    66fe:	f003 f833 	bl	9768 <adjust_owner_prio.isra.0>
    6702:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6704:	e9cd 7600 	strd	r7, r6, [sp]
    6708:	482f      	ldr	r0, [pc, #188]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    670a:	4622      	mov	r2, r4
    670c:	4641      	mov	r1, r8
    670e:	f000 feaf 	bl	7470 <z_pend_curr>
	if (got_mutex == 0) {
    6712:	2800      	cmp	r0, #0
    6714:	d0e0      	beq.n	66d8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    6716:	f04f 0340 	mov.w	r3, #64	; 0x40
    671a:	f3ef 8611 	mrs	r6, BASEPRI
    671e:	f383 8812 	msr	BASEPRI_MAX, r3
    6722:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6726:	4828      	ldr	r0, [pc, #160]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    6728:	f7ff ff0a 	bl	6540 <z_spin_lock_valid>
    672c:	b968      	cbnz	r0, 674a <z_impl_k_mutex_lock+0x15a>
    672e:	4a27      	ldr	r2, [pc, #156]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6730:	4927      	ldr	r1, [pc, #156]	; (67d0 <z_impl_k_mutex_lock+0x1e0>)
    6732:	4823      	ldr	r0, [pc, #140]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    6734:	238e      	movs	r3, #142	; 0x8e
    6736:	f002 fbf8 	bl	8f2a <assert_print>
    673a:	4923      	ldr	r1, [pc, #140]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    673c:	4825      	ldr	r0, [pc, #148]	; (67d4 <z_impl_k_mutex_lock+0x1e4>)
    673e:	f002 fbf4 	bl	8f2a <assert_print>
    6742:	4822      	ldr	r0, [pc, #136]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6744:	218e      	movs	r1, #142	; 0x8e
    6746:	f002 fbe9 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    674a:	481f      	ldr	r0, [pc, #124]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    674c:	f7ff ff16 	bl	657c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6750:	6823      	ldr	r3, [r4, #0]
    6752:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6754:	42a3      	cmp	r3, r4
    6756:	d00a      	beq.n	676e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6758:	b14b      	cbz	r3, 676e <z_impl_k_mutex_lock+0x17e>
    675a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    675e:	4299      	cmp	r1, r3
    6760:	bfa8      	it	ge
    6762:	4619      	movge	r1, r3
    6764:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6768:	4299      	cmp	r1, r3
    676a:	bfb8      	it	lt
    676c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    676e:	68a0      	ldr	r0, [r4, #8]
    6770:	f002 fffa 	bl	9768 <adjust_owner_prio.isra.0>
    6774:	b900      	cbnz	r0, 6778 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    6776:	b145      	cbz	r5, 678a <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    6778:	4813      	ldr	r0, [pc, #76]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    677a:	4631      	mov	r1, r6
    677c:	f000 fa80 	bl	6c80 <z_reschedule>
	return -EAGAIN;
    6780:	f06f 000a 	mvn.w	r0, #10
    6784:	e7a8      	b.n	66d8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    6786:	2500      	movs	r5, #0
    6788:	e7bc      	b.n	6704 <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    678a:	480f      	ldr	r0, [pc, #60]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    678c:	f7ff fee6 	bl	655c <z_spin_unlock_valid>
    6790:	b968      	cbnz	r0, 67ae <z_impl_k_mutex_lock+0x1be>
    6792:	4a0e      	ldr	r2, [pc, #56]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    6794:	4911      	ldr	r1, [pc, #68]	; (67dc <z_impl_k_mutex_lock+0x1ec>)
    6796:	480a      	ldr	r0, [pc, #40]	; (67c0 <z_impl_k_mutex_lock+0x1d0>)
    6798:	23b9      	movs	r3, #185	; 0xb9
    679a:	f002 fbc6 	bl	8f2a <assert_print>
    679e:	490a      	ldr	r1, [pc, #40]	; (67c8 <z_impl_k_mutex_lock+0x1d8>)
    67a0:	480f      	ldr	r0, [pc, #60]	; (67e0 <z_impl_k_mutex_lock+0x1f0>)
    67a2:	f002 fbc2 	bl	8f2a <assert_print>
    67a6:	4809      	ldr	r0, [pc, #36]	; (67cc <z_impl_k_mutex_lock+0x1dc>)
    67a8:	21b9      	movs	r1, #185	; 0xb9
    67aa:	f002 fbb7 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    67ae:	f386 8811 	msr	BASEPRI, r6
    67b2:	f3bf 8f6f 	isb	sy
    67b6:	e7e3      	b.n	6780 <z_impl_k_mutex_lock+0x190>
    67b8:	0000b6fe 	.word	0x0000b6fe
    67bc:	0000b7ab 	.word	0x0000b7ab
    67c0:	00009eb7 	.word	0x00009eb7
    67c4:	0000b7cd 	.word	0x0000b7cd
    67c8:	20000c64 	.word	0x20000c64
    67cc:	0000a38e 	.word	0x0000a38e
    67d0:	0000a3e7 	.word	0x0000a3e7
    67d4:	0000a3fc 	.word	0x0000a3fc
    67d8:	20000c3c 	.word	0x20000c3c
    67dc:	0000a3bb 	.word	0x0000a3bb
    67e0:	0000a3d2 	.word	0x0000a3d2

000067e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    67e4:	b538      	push	{r3, r4, r5, lr}
    67e6:	4604      	mov	r4, r0
    67e8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    67ec:	b163      	cbz	r3, 6808 <z_impl_k_mutex_unlock+0x24>
    67ee:	4950      	ldr	r1, [pc, #320]	; (6930 <z_impl_k_mutex_unlock+0x14c>)
    67f0:	4a50      	ldr	r2, [pc, #320]	; (6934 <z_impl_k_mutex_unlock+0x150>)
    67f2:	4851      	ldr	r0, [pc, #324]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    67f4:	23c7      	movs	r3, #199	; 0xc7
    67f6:	f002 fb98 	bl	8f2a <assert_print>
    67fa:	4850      	ldr	r0, [pc, #320]	; (693c <z_impl_k_mutex_unlock+0x158>)
    67fc:	f002 fb95 	bl	8f2a <assert_print>
    6800:	484c      	ldr	r0, [pc, #304]	; (6934 <z_impl_k_mutex_unlock+0x150>)
    6802:	21c7      	movs	r1, #199	; 0xc7
    6804:	f002 fb8a 	bl	8f1c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6808:	68a3      	ldr	r3, [r4, #8]
    680a:	2b00      	cmp	r3, #0
    680c:	f000 8089 	beq.w	6922 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6810:	4d4b      	ldr	r5, [pc, #300]	; (6940 <z_impl_k_mutex_unlock+0x15c>)
    6812:	68aa      	ldr	r2, [r5, #8]
    6814:	4293      	cmp	r3, r2
    6816:	f040 8087 	bne.w	6928 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    681a:	68e3      	ldr	r3, [r4, #12]
    681c:	b94b      	cbnz	r3, 6832 <z_impl_k_mutex_unlock+0x4e>
    681e:	4949      	ldr	r1, [pc, #292]	; (6944 <z_impl_k_mutex_unlock+0x160>)
    6820:	4845      	ldr	r0, [pc, #276]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    6822:	4a44      	ldr	r2, [pc, #272]	; (6934 <z_impl_k_mutex_unlock+0x150>)
    6824:	23df      	movs	r3, #223	; 0xdf
    6826:	f002 fb80 	bl	8f2a <assert_print>
    682a:	4842      	ldr	r0, [pc, #264]	; (6934 <z_impl_k_mutex_unlock+0x150>)
    682c:	21df      	movs	r1, #223	; 0xdf
    682e:	f002 fb75 	bl	8f1c <assert_post_action>
    6832:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    6836:	b163      	cbz	r3, 6852 <z_impl_k_mutex_unlock+0x6e>
    6838:	493d      	ldr	r1, [pc, #244]	; (6930 <z_impl_k_mutex_unlock+0x14c>)
    683a:	4a43      	ldr	r2, [pc, #268]	; (6948 <z_impl_k_mutex_unlock+0x164>)
    683c:	483e      	ldr	r0, [pc, #248]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    683e:	23fd      	movs	r3, #253	; 0xfd
    6840:	f002 fb73 	bl	8f2a <assert_print>
    6844:	4841      	ldr	r0, [pc, #260]	; (694c <z_impl_k_mutex_unlock+0x168>)
    6846:	f002 fb70 	bl	8f2a <assert_print>
    684a:	483f      	ldr	r0, [pc, #252]	; (6948 <z_impl_k_mutex_unlock+0x164>)
    684c:	21fd      	movs	r1, #253	; 0xfd
    684e:	f002 fb65 	bl	8f1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6852:	68ab      	ldr	r3, [r5, #8]
    6854:	7bdb      	ldrb	r3, [r3, #15]
    6856:	2b01      	cmp	r3, #1
    6858:	d10c      	bne.n	6874 <z_impl_k_mutex_unlock+0x90>
    685a:	493d      	ldr	r1, [pc, #244]	; (6950 <z_impl_k_mutex_unlock+0x16c>)
    685c:	4a3a      	ldr	r2, [pc, #232]	; (6948 <z_impl_k_mutex_unlock+0x164>)
    685e:	4836      	ldr	r0, [pc, #216]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    6860:	23fe      	movs	r3, #254	; 0xfe
    6862:	f002 fb62 	bl	8f2a <assert_print>
    6866:	4839      	ldr	r0, [pc, #228]	; (694c <z_impl_k_mutex_unlock+0x168>)
    6868:	f002 fb5f 	bl	8f2a <assert_print>
    686c:	4836      	ldr	r0, [pc, #216]	; (6948 <z_impl_k_mutex_unlock+0x164>)
    686e:	21fe      	movs	r1, #254	; 0xfe
    6870:	f002 fb54 	bl	8f1c <assert_post_action>

	--_current->base.sched_locked;
    6874:	68aa      	ldr	r2, [r5, #8]
    6876:	7bd3      	ldrb	r3, [r2, #15]
    6878:	3b01      	subs	r3, #1
    687a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    687c:	68e3      	ldr	r3, [r4, #12]
    687e:	2b01      	cmp	r3, #1
    6880:	d905      	bls.n	688e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    6882:	3b01      	subs	r3, #1
    6884:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6886:	f000 ff23 	bl	76d0 <k_sched_unlock>

	return 0;
    688a:	2000      	movs	r0, #0
}
    688c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    688e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6892:	f3ef 8511 	mrs	r5, BASEPRI
    6896:	f383 8812 	msr	BASEPRI_MAX, r3
    689a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    689e:	482d      	ldr	r0, [pc, #180]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    68a0:	f7ff fe4e 	bl	6540 <z_spin_lock_valid>
    68a4:	b968      	cbnz	r0, 68c2 <z_impl_k_mutex_unlock+0xde>
    68a6:	4a2c      	ldr	r2, [pc, #176]	; (6958 <z_impl_k_mutex_unlock+0x174>)
    68a8:	492c      	ldr	r1, [pc, #176]	; (695c <z_impl_k_mutex_unlock+0x178>)
    68aa:	4823      	ldr	r0, [pc, #140]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    68ac:	238e      	movs	r3, #142	; 0x8e
    68ae:	f002 fb3c 	bl	8f2a <assert_print>
    68b2:	4928      	ldr	r1, [pc, #160]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    68b4:	482a      	ldr	r0, [pc, #168]	; (6960 <z_impl_k_mutex_unlock+0x17c>)
    68b6:	f002 fb38 	bl	8f2a <assert_print>
    68ba:	4827      	ldr	r0, [pc, #156]	; (6958 <z_impl_k_mutex_unlock+0x174>)
    68bc:	218e      	movs	r1, #142	; 0x8e
    68be:	f002 fb2d 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    68c2:	4824      	ldr	r0, [pc, #144]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    68c4:	f7ff fe5a 	bl	657c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    68c8:	6921      	ldr	r1, [r4, #16]
    68ca:	68a0      	ldr	r0, [r4, #8]
    68cc:	f002 ff4c 	bl	9768 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    68d0:	4620      	mov	r0, r4
    68d2:	f000 ffc5 	bl	7860 <z_unpend_first_thread>
	mutex->owner = new_owner;
    68d6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    68d8:	b158      	cbz	r0, 68f2 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    68da:	f990 200e 	ldrsb.w	r2, [r0, #14]
    68de:	6122      	str	r2, [r4, #16]
    68e0:	2200      	movs	r2, #0
    68e2:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    68e4:	f000 fc16 	bl	7114 <z_ready_thread>
		z_reschedule(&lock, key);
    68e8:	481a      	ldr	r0, [pc, #104]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    68ea:	4629      	mov	r1, r5
    68ec:	f000 f9c8 	bl	6c80 <z_reschedule>
    68f0:	e7c9      	b.n	6886 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    68f2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68f4:	4817      	ldr	r0, [pc, #92]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    68f6:	f7ff fe31 	bl	655c <z_spin_unlock_valid>
    68fa:	b968      	cbnz	r0, 6918 <z_impl_k_mutex_unlock+0x134>
    68fc:	4a16      	ldr	r2, [pc, #88]	; (6958 <z_impl_k_mutex_unlock+0x174>)
    68fe:	4919      	ldr	r1, [pc, #100]	; (6964 <z_impl_k_mutex_unlock+0x180>)
    6900:	480d      	ldr	r0, [pc, #52]	; (6938 <z_impl_k_mutex_unlock+0x154>)
    6902:	23b9      	movs	r3, #185	; 0xb9
    6904:	f002 fb11 	bl	8f2a <assert_print>
    6908:	4912      	ldr	r1, [pc, #72]	; (6954 <z_impl_k_mutex_unlock+0x170>)
    690a:	4817      	ldr	r0, [pc, #92]	; (6968 <z_impl_k_mutex_unlock+0x184>)
    690c:	f002 fb0d 	bl	8f2a <assert_print>
    6910:	4811      	ldr	r0, [pc, #68]	; (6958 <z_impl_k_mutex_unlock+0x174>)
    6912:	21b9      	movs	r1, #185	; 0xb9
    6914:	f002 fb02 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    6918:	f385 8811 	msr	BASEPRI, r5
    691c:	f3bf 8f6f 	isb	sy
    6920:	e7b1      	b.n	6886 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6922:	f06f 0015 	mvn.w	r0, #21
    6926:	e7b1      	b.n	688c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    692c:	e7ae      	b.n	688c <z_impl_k_mutex_unlock+0xa8>
    692e:	bf00      	nop
    6930:	0000b6fe 	.word	0x0000b6fe
    6934:	0000b7ab 	.word	0x0000b7ab
    6938:	00009eb7 	.word	0x00009eb7
    693c:	0000b7cd 	.word	0x0000b7cd
    6940:	20000c3c 	.word	0x20000c3c
    6944:	0000b7f2 	.word	0x0000b7f2
    6948:	0000b809 	.word	0x0000b809
    694c:	0000b834 	.word	0x0000b834
    6950:	0000b837 	.word	0x0000b837
    6954:	20000c64 	.word	0x20000c64
    6958:	0000a38e 	.word	0x0000a38e
    695c:	0000a3e7 	.word	0x0000a3e7
    6960:	0000a3fc 	.word	0x0000a3fc
    6964:	0000a3bb 	.word	0x0000a3bb
    6968:	0000a3d2 	.word	0x0000a3d2

0000696c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    696c:	b538      	push	{r3, r4, r5, lr}
    696e:	4604      	mov	r4, r0
	__asm__ volatile(
    6970:	f04f 0340 	mov.w	r3, #64	; 0x40
    6974:	f3ef 8511 	mrs	r5, BASEPRI
    6978:	f383 8812 	msr	BASEPRI_MAX, r3
    697c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6980:	4814      	ldr	r0, [pc, #80]	; (69d4 <z_impl_k_sem_give+0x68>)
    6982:	f7ff fddd 	bl	6540 <z_spin_lock_valid>
    6986:	b968      	cbnz	r0, 69a4 <z_impl_k_sem_give+0x38>
    6988:	4a13      	ldr	r2, [pc, #76]	; (69d8 <z_impl_k_sem_give+0x6c>)
    698a:	4914      	ldr	r1, [pc, #80]	; (69dc <z_impl_k_sem_give+0x70>)
    698c:	4814      	ldr	r0, [pc, #80]	; (69e0 <z_impl_k_sem_give+0x74>)
    698e:	238e      	movs	r3, #142	; 0x8e
    6990:	f002 facb 	bl	8f2a <assert_print>
    6994:	490f      	ldr	r1, [pc, #60]	; (69d4 <z_impl_k_sem_give+0x68>)
    6996:	4813      	ldr	r0, [pc, #76]	; (69e4 <z_impl_k_sem_give+0x78>)
    6998:	f002 fac7 	bl	8f2a <assert_print>
    699c:	480e      	ldr	r0, [pc, #56]	; (69d8 <z_impl_k_sem_give+0x6c>)
    699e:	218e      	movs	r1, #142	; 0x8e
    69a0:	f002 fabc 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    69a4:	480b      	ldr	r0, [pc, #44]	; (69d4 <z_impl_k_sem_give+0x68>)
    69a6:	f7ff fde9 	bl	657c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    69aa:	4620      	mov	r0, r4
    69ac:	f000 ff58 	bl	7860 <z_unpend_first_thread>

	if (thread != NULL) {
    69b0:	b148      	cbz	r0, 69c6 <z_impl_k_sem_give+0x5a>
    69b2:	2200      	movs	r2, #0
    69b4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    69b6:	f000 fbad 	bl	7114 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    69ba:	4629      	mov	r1, r5
    69bc:	4805      	ldr	r0, [pc, #20]	; (69d4 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    69be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    69c2:	f000 b95d 	b.w	6c80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    69c6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    69ca:	429a      	cmp	r2, r3
    69cc:	bf18      	it	ne
    69ce:	3301      	addne	r3, #1
    69d0:	60a3      	str	r3, [r4, #8]
}
    69d2:	e7f2      	b.n	69ba <z_impl_k_sem_give+0x4e>
    69d4:	20000c68 	.word	0x20000c68
    69d8:	0000a38e 	.word	0x0000a38e
    69dc:	0000a3e7 	.word	0x0000a3e7
    69e0:	00009eb7 	.word	0x00009eb7
    69e4:	0000a3fc 	.word	0x0000a3fc

000069e8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    69e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    69ea:	4604      	mov	r4, r0
    69ec:	4617      	mov	r7, r2
    69ee:	461d      	mov	r5, r3
    69f0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    69f4:	b17b      	cbz	r3, 6a16 <z_impl_k_sem_take+0x2e>
    69f6:	ea52 0305 	orrs.w	r3, r2, r5
    69fa:	d00c      	beq.n	6a16 <z_impl_k_sem_take+0x2e>
    69fc:	4935      	ldr	r1, [pc, #212]	; (6ad4 <z_impl_k_sem_take+0xec>)
    69fe:	4a36      	ldr	r2, [pc, #216]	; (6ad8 <z_impl_k_sem_take+0xf0>)
    6a00:	4836      	ldr	r0, [pc, #216]	; (6adc <z_impl_k_sem_take+0xf4>)
    6a02:	2379      	movs	r3, #121	; 0x79
    6a04:	f002 fa91 	bl	8f2a <assert_print>
    6a08:	4835      	ldr	r0, [pc, #212]	; (6ae0 <z_impl_k_sem_take+0xf8>)
    6a0a:	f002 fa8e 	bl	8f2a <assert_print>
    6a0e:	4832      	ldr	r0, [pc, #200]	; (6ad8 <z_impl_k_sem_take+0xf0>)
    6a10:	2179      	movs	r1, #121	; 0x79
    6a12:	f002 fa83 	bl	8f1c <assert_post_action>
    6a16:	f04f 0340 	mov.w	r3, #64	; 0x40
    6a1a:	f3ef 8611 	mrs	r6, BASEPRI
    6a1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a26:	482f      	ldr	r0, [pc, #188]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a28:	f7ff fd8a 	bl	6540 <z_spin_lock_valid>
    6a2c:	b968      	cbnz	r0, 6a4a <z_impl_k_sem_take+0x62>
    6a2e:	4a2e      	ldr	r2, [pc, #184]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6a30:	492e      	ldr	r1, [pc, #184]	; (6aec <z_impl_k_sem_take+0x104>)
    6a32:	482a      	ldr	r0, [pc, #168]	; (6adc <z_impl_k_sem_take+0xf4>)
    6a34:	238e      	movs	r3, #142	; 0x8e
    6a36:	f002 fa78 	bl	8f2a <assert_print>
    6a3a:	492a      	ldr	r1, [pc, #168]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a3c:	482c      	ldr	r0, [pc, #176]	; (6af0 <z_impl_k_sem_take+0x108>)
    6a3e:	f002 fa74 	bl	8f2a <assert_print>
    6a42:	4829      	ldr	r0, [pc, #164]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6a44:	218e      	movs	r1, #142	; 0x8e
    6a46:	f002 fa69 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6a4a:	4826      	ldr	r0, [pc, #152]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a4c:	f7ff fd96 	bl	657c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6a50:	68a3      	ldr	r3, [r4, #8]
    6a52:	b1d3      	cbz	r3, 6a8a <z_impl_k_sem_take+0xa2>
		sem->count--;
    6a54:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a56:	4823      	ldr	r0, [pc, #140]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a58:	60a3      	str	r3, [r4, #8]
    6a5a:	f7ff fd7f 	bl	655c <z_spin_unlock_valid>
    6a5e:	b968      	cbnz	r0, 6a7c <z_impl_k_sem_take+0x94>
    6a60:	4a21      	ldr	r2, [pc, #132]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6a62:	4924      	ldr	r1, [pc, #144]	; (6af4 <z_impl_k_sem_take+0x10c>)
    6a64:	481d      	ldr	r0, [pc, #116]	; (6adc <z_impl_k_sem_take+0xf4>)
    6a66:	23b9      	movs	r3, #185	; 0xb9
    6a68:	f002 fa5f 	bl	8f2a <assert_print>
    6a6c:	491d      	ldr	r1, [pc, #116]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a6e:	4822      	ldr	r0, [pc, #136]	; (6af8 <z_impl_k_sem_take+0x110>)
    6a70:	f002 fa5b 	bl	8f2a <assert_print>
    6a74:	481c      	ldr	r0, [pc, #112]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6a76:	21b9      	movs	r1, #185	; 0xb9
    6a78:	f002 fa50 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    6a7c:	f386 8811 	msr	BASEPRI, r6
    6a80:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6a84:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6a86:	b003      	add	sp, #12
    6a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6a8a:	ea57 0305 	orrs.w	r3, r7, r5
    6a8e:	d118      	bne.n	6ac2 <z_impl_k_sem_take+0xda>
    6a90:	4814      	ldr	r0, [pc, #80]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6a92:	f7ff fd63 	bl	655c <z_spin_unlock_valid>
    6a96:	b968      	cbnz	r0, 6ab4 <z_impl_k_sem_take+0xcc>
    6a98:	4a13      	ldr	r2, [pc, #76]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6a9a:	4916      	ldr	r1, [pc, #88]	; (6af4 <z_impl_k_sem_take+0x10c>)
    6a9c:	480f      	ldr	r0, [pc, #60]	; (6adc <z_impl_k_sem_take+0xf4>)
    6a9e:	23b9      	movs	r3, #185	; 0xb9
    6aa0:	f002 fa43 	bl	8f2a <assert_print>
    6aa4:	490f      	ldr	r1, [pc, #60]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6aa6:	4814      	ldr	r0, [pc, #80]	; (6af8 <z_impl_k_sem_take+0x110>)
    6aa8:	f002 fa3f 	bl	8f2a <assert_print>
    6aac:	480e      	ldr	r0, [pc, #56]	; (6ae8 <z_impl_k_sem_take+0x100>)
    6aae:	21b9      	movs	r1, #185	; 0xb9
    6ab0:	f002 fa34 	bl	8f1c <assert_post_action>
    6ab4:	f386 8811 	msr	BASEPRI, r6
    6ab8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6abc:	f06f 000f 	mvn.w	r0, #15
    6ac0:	e7e1      	b.n	6a86 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6ac2:	e9cd 7500 	strd	r7, r5, [sp]
    6ac6:	4622      	mov	r2, r4
    6ac8:	4631      	mov	r1, r6
    6aca:	4806      	ldr	r0, [pc, #24]	; (6ae4 <z_impl_k_sem_take+0xfc>)
    6acc:	f000 fcd0 	bl	7470 <z_pend_curr>
	return ret;
    6ad0:	e7d9      	b.n	6a86 <z_impl_k_sem_take+0x9e>
    6ad2:	bf00      	nop
    6ad4:	0000b888 	.word	0x0000b888
    6ad8:	0000b868 	.word	0x0000b868
    6adc:	00009eb7 	.word	0x00009eb7
    6ae0:	0000b834 	.word	0x0000b834
    6ae4:	20000c68 	.word	0x20000c68
    6ae8:	0000a38e 	.word	0x0000a38e
    6aec:	0000a3e7 	.word	0x0000a3e7
    6af0:	0000a3fc 	.word	0x0000a3fc
    6af4:	0000a3bb 	.word	0x0000a3bb
    6af8:	0000a3d2 	.word	0x0000a3d2

00006afc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6afc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6afe:	4d07      	ldr	r5, [pc, #28]	; (6b1c <z_reset_time_slice+0x20>)
    6b00:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    6b02:	b154      	cbz	r4, 6b1a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6b04:	f7fe f992 	bl	4e2c <sys_clock_elapsed>
    6b08:	4b05      	ldr	r3, [pc, #20]	; (6b20 <z_reset_time_slice+0x24>)
    6b0a:	4404      	add	r4, r0
    6b0c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6b0e:	6828      	ldr	r0, [r5, #0]
    6b10:	2100      	movs	r1, #0
	}
}
    6b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    6b16:	f001 baf9 	b.w	810c <z_set_timeout_expiry>
}
    6b1a:	bd38      	pop	{r3, r4, r5, pc}
    6b1c:	20000c78 	.word	0x20000c78
    6b20:	20000c3c 	.word	0x20000c3c

00006b24 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b26:	4604      	mov	r4, r0
    6b28:	460d      	mov	r5, r1
	__asm__ volatile(
    6b2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    6b2e:	f3ef 8711 	mrs	r7, BASEPRI
    6b32:	f383 8812 	msr	BASEPRI_MAX, r3
    6b36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b3a:	4823      	ldr	r0, [pc, #140]	; (6bc8 <k_sched_time_slice_set+0xa4>)
    6b3c:	f7ff fd00 	bl	6540 <z_spin_lock_valid>
    6b40:	b968      	cbnz	r0, 6b5e <k_sched_time_slice_set+0x3a>
    6b42:	4a22      	ldr	r2, [pc, #136]	; (6bcc <k_sched_time_slice_set+0xa8>)
    6b44:	4922      	ldr	r1, [pc, #136]	; (6bd0 <k_sched_time_slice_set+0xac>)
    6b46:	4823      	ldr	r0, [pc, #140]	; (6bd4 <k_sched_time_slice_set+0xb0>)
    6b48:	238e      	movs	r3, #142	; 0x8e
    6b4a:	f002 f9ee 	bl	8f2a <assert_print>
    6b4e:	491e      	ldr	r1, [pc, #120]	; (6bc8 <k_sched_time_slice_set+0xa4>)
    6b50:	4821      	ldr	r0, [pc, #132]	; (6bd8 <k_sched_time_slice_set+0xb4>)
    6b52:	f002 f9ea 	bl	8f2a <assert_print>
    6b56:	481d      	ldr	r0, [pc, #116]	; (6bcc <k_sched_time_slice_set+0xa8>)
    6b58:	218e      	movs	r1, #142	; 0x8e
    6b5a:	f002 f9df 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6b5e:	481a      	ldr	r0, [pc, #104]	; (6bc8 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6b60:	4e1e      	ldr	r6, [pc, #120]	; (6bdc <k_sched_time_slice_set+0xb8>)
    6b62:	f7ff fd0b 	bl	657c <z_spin_lock_set_owner>
    6b66:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6b68:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6b6c:	f240 30e7 	movw	r0, #999	; 0x3e7
    6b70:	6131      	str	r1, [r6, #16]
    6b72:	2300      	movs	r3, #0
    6b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6b78:	fbe4 010c 	umlal	r0, r1, r4, ip
    6b7c:	f7f9 fcf2 	bl	564 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6b80:	2c00      	cmp	r4, #0
    6b82:	4b17      	ldr	r3, [pc, #92]	; (6be0 <k_sched_time_slice_set+0xbc>)
    6b84:	dc1c      	bgt.n	6bc0 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    6b86:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6b88:	4b16      	ldr	r3, [pc, #88]	; (6be4 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    6b8a:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    6b8c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    6b8e:	f7ff ffb5 	bl	6afc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b92:	480d      	ldr	r0, [pc, #52]	; (6bc8 <k_sched_time_slice_set+0xa4>)
    6b94:	f7ff fce2 	bl	655c <z_spin_unlock_valid>
    6b98:	b968      	cbnz	r0, 6bb6 <k_sched_time_slice_set+0x92>
    6b9a:	4a0c      	ldr	r2, [pc, #48]	; (6bcc <k_sched_time_slice_set+0xa8>)
    6b9c:	4912      	ldr	r1, [pc, #72]	; (6be8 <k_sched_time_slice_set+0xc4>)
    6b9e:	480d      	ldr	r0, [pc, #52]	; (6bd4 <k_sched_time_slice_set+0xb0>)
    6ba0:	23b9      	movs	r3, #185	; 0xb9
    6ba2:	f002 f9c2 	bl	8f2a <assert_print>
    6ba6:	4908      	ldr	r1, [pc, #32]	; (6bc8 <k_sched_time_slice_set+0xa4>)
    6ba8:	4810      	ldr	r0, [pc, #64]	; (6bec <k_sched_time_slice_set+0xc8>)
    6baa:	f002 f9be 	bl	8f2a <assert_print>
    6bae:	4807      	ldr	r0, [pc, #28]	; (6bcc <k_sched_time_slice_set+0xa8>)
    6bb0:	21b9      	movs	r1, #185	; 0xb9
    6bb2:	f002 f9b3 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    6bb6:	f387 8811 	msr	BASEPRI, r7
    6bba:	f3bf 8f6f 	isb	sy
	}
}
    6bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    6bc0:	2802      	cmp	r0, #2
    6bc2:	bfb8      	it	lt
    6bc4:	2002      	movlt	r0, #2
    6bc6:	e7de      	b.n	6b86 <k_sched_time_slice_set+0x62>
    6bc8:	20000c70 	.word	0x20000c70
    6bcc:	0000a38e 	.word	0x0000a38e
    6bd0:	0000a3e7 	.word	0x0000a3e7
    6bd4:	00009eb7 	.word	0x00009eb7
    6bd8:	0000a3fc 	.word	0x0000a3fc
    6bdc:	20000c3c 	.word	0x20000c3c
    6be0:	20000c78 	.word	0x20000c78
    6be4:	20000c74 	.word	0x20000c74
    6be8:	0000a3bb 	.word	0x0000a3bb
    6bec:	0000a3d2 	.word	0x0000a3d2

00006bf0 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    6bf0:	b538      	push	{r3, r4, r5, lr}
    6bf2:	4604      	mov	r4, r0
	__asm__ volatile(
    6bf4:	f04f 0340 	mov.w	r3, #64	; 0x40
    6bf8:	f3ef 8511 	mrs	r5, BASEPRI
    6bfc:	f383 8812 	msr	BASEPRI_MAX, r3
    6c00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c04:	4817      	ldr	r0, [pc, #92]	; (6c64 <z_unpend_thread_no_timeout+0x74>)
    6c06:	f7ff fc9b 	bl	6540 <z_spin_lock_valid>
    6c0a:	b968      	cbnz	r0, 6c28 <z_unpend_thread_no_timeout+0x38>
    6c0c:	4a16      	ldr	r2, [pc, #88]	; (6c68 <z_unpend_thread_no_timeout+0x78>)
    6c0e:	4917      	ldr	r1, [pc, #92]	; (6c6c <z_unpend_thread_no_timeout+0x7c>)
    6c10:	4817      	ldr	r0, [pc, #92]	; (6c70 <z_unpend_thread_no_timeout+0x80>)
    6c12:	238e      	movs	r3, #142	; 0x8e
    6c14:	f002 f989 	bl	8f2a <assert_print>
    6c18:	4912      	ldr	r1, [pc, #72]	; (6c64 <z_unpend_thread_no_timeout+0x74>)
    6c1a:	4816      	ldr	r0, [pc, #88]	; (6c74 <z_unpend_thread_no_timeout+0x84>)
    6c1c:	f002 f985 	bl	8f2a <assert_print>
    6c20:	4811      	ldr	r0, [pc, #68]	; (6c68 <z_unpend_thread_no_timeout+0x78>)
    6c22:	218e      	movs	r1, #142	; 0x8e
    6c24:	f002 f97a 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6c28:	480e      	ldr	r0, [pc, #56]	; (6c64 <z_unpend_thread_no_timeout+0x74>)
    6c2a:	f7ff fca7 	bl	657c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    6c2e:	4620      	mov	r0, r4
    6c30:	f000 f900 	bl	6e34 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c34:	480b      	ldr	r0, [pc, #44]	; (6c64 <z_unpend_thread_no_timeout+0x74>)
    6c36:	f7ff fc91 	bl	655c <z_spin_unlock_valid>
    6c3a:	b968      	cbnz	r0, 6c58 <z_unpend_thread_no_timeout+0x68>
    6c3c:	4a0a      	ldr	r2, [pc, #40]	; (6c68 <z_unpend_thread_no_timeout+0x78>)
    6c3e:	490e      	ldr	r1, [pc, #56]	; (6c78 <z_unpend_thread_no_timeout+0x88>)
    6c40:	480b      	ldr	r0, [pc, #44]	; (6c70 <z_unpend_thread_no_timeout+0x80>)
    6c42:	23b9      	movs	r3, #185	; 0xb9
    6c44:	f002 f971 	bl	8f2a <assert_print>
    6c48:	4906      	ldr	r1, [pc, #24]	; (6c64 <z_unpend_thread_no_timeout+0x74>)
    6c4a:	480c      	ldr	r0, [pc, #48]	; (6c7c <z_unpend_thread_no_timeout+0x8c>)
    6c4c:	f002 f96d 	bl	8f2a <assert_print>
    6c50:	4805      	ldr	r0, [pc, #20]	; (6c68 <z_unpend_thread_no_timeout+0x78>)
    6c52:	21b9      	movs	r1, #185	; 0xb9
    6c54:	f002 f962 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    6c58:	f385 8811 	msr	BASEPRI, r5
    6c5c:	f3bf 8f6f 	isb	sy
	}
}
    6c60:	bd38      	pop	{r3, r4, r5, pc}
    6c62:	bf00      	nop
    6c64:	20000c70 	.word	0x20000c70
    6c68:	0000a38e 	.word	0x0000a38e
    6c6c:	0000a3e7 	.word	0x0000a3e7
    6c70:	00009eb7 	.word	0x00009eb7
    6c74:	0000a3fc 	.word	0x0000a3fc
    6c78:	0000a3bb 	.word	0x0000a3bb
    6c7c:	0000a3d2 	.word	0x0000a3d2

00006c80 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6c80:	b538      	push	{r3, r4, r5, lr}
    6c82:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6c84:	460d      	mov	r5, r1
    6c86:	b9e9      	cbnz	r1, 6cc4 <z_reschedule+0x44>
    6c88:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    6c8c:	b9d3      	cbnz	r3, 6cc4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    6c8e:	4b19      	ldr	r3, [pc, #100]	; (6cf4 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    6c90:	69da      	ldr	r2, [r3, #28]
    6c92:	689b      	ldr	r3, [r3, #8]
    6c94:	429a      	cmp	r2, r3
    6c96:	d015      	beq.n	6cc4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c98:	f7ff fc60 	bl	655c <z_spin_unlock_valid>
    6c9c:	b968      	cbnz	r0, 6cba <z_reschedule+0x3a>
    6c9e:	4a16      	ldr	r2, [pc, #88]	; (6cf8 <z_reschedule+0x78>)
    6ca0:	4916      	ldr	r1, [pc, #88]	; (6cfc <z_reschedule+0x7c>)
    6ca2:	4817      	ldr	r0, [pc, #92]	; (6d00 <z_reschedule+0x80>)
    6ca4:	23d0      	movs	r3, #208	; 0xd0
    6ca6:	f002 f940 	bl	8f2a <assert_print>
    6caa:	4816      	ldr	r0, [pc, #88]	; (6d04 <z_reschedule+0x84>)
    6cac:	4621      	mov	r1, r4
    6cae:	f002 f93c 	bl	8f2a <assert_print>
    6cb2:	4811      	ldr	r0, [pc, #68]	; (6cf8 <z_reschedule+0x78>)
    6cb4:	21d0      	movs	r1, #208	; 0xd0
    6cb6:	f002 f931 	bl	8f1c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    6cbe:	2000      	movs	r0, #0
    6cc0:	f7fc b892 	b.w	2de8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cc4:	4620      	mov	r0, r4
    6cc6:	f7ff fc49 	bl	655c <z_spin_unlock_valid>
    6cca:	b968      	cbnz	r0, 6ce8 <z_reschedule+0x68>
    6ccc:	4a0a      	ldr	r2, [pc, #40]	; (6cf8 <z_reschedule+0x78>)
    6cce:	490b      	ldr	r1, [pc, #44]	; (6cfc <z_reschedule+0x7c>)
    6cd0:	480b      	ldr	r0, [pc, #44]	; (6d00 <z_reschedule+0x80>)
    6cd2:	23b9      	movs	r3, #185	; 0xb9
    6cd4:	f002 f929 	bl	8f2a <assert_print>
    6cd8:	480a      	ldr	r0, [pc, #40]	; (6d04 <z_reschedule+0x84>)
    6cda:	4621      	mov	r1, r4
    6cdc:	f002 f925 	bl	8f2a <assert_print>
    6ce0:	4805      	ldr	r0, [pc, #20]	; (6cf8 <z_reschedule+0x78>)
    6ce2:	21b9      	movs	r1, #185	; 0xb9
    6ce4:	f002 f91a 	bl	8f1c <assert_post_action>
    6ce8:	f385 8811 	msr	BASEPRI, r5
    6cec:	f3bf 8f6f 	isb	sy
    6cf0:	bd38      	pop	{r3, r4, r5, pc}
    6cf2:	bf00      	nop
    6cf4:	20000c3c 	.word	0x20000c3c
    6cf8:	0000a38e 	.word	0x0000a38e
    6cfc:	0000a3bb 	.word	0x0000a3bb
    6d00:	00009eb7 	.word	0x00009eb7
    6d04:	0000a3d2 	.word	0x0000a3d2

00006d08 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6d08:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6d0a:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d0e:	f3ef 8511 	mrs	r5, BASEPRI
    6d12:	f383 8812 	msr	BASEPRI_MAX, r3
    6d16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d1a:	4829      	ldr	r0, [pc, #164]	; (6dc0 <k_sched_lock+0xb8>)
    6d1c:	f7ff fc10 	bl	6540 <z_spin_lock_valid>
    6d20:	b968      	cbnz	r0, 6d3e <k_sched_lock+0x36>
    6d22:	4a28      	ldr	r2, [pc, #160]	; (6dc4 <k_sched_lock+0xbc>)
    6d24:	4928      	ldr	r1, [pc, #160]	; (6dc8 <k_sched_lock+0xc0>)
    6d26:	4829      	ldr	r0, [pc, #164]	; (6dcc <k_sched_lock+0xc4>)
    6d28:	238e      	movs	r3, #142	; 0x8e
    6d2a:	f002 f8fe 	bl	8f2a <assert_print>
    6d2e:	4924      	ldr	r1, [pc, #144]	; (6dc0 <k_sched_lock+0xb8>)
    6d30:	4827      	ldr	r0, [pc, #156]	; (6dd0 <k_sched_lock+0xc8>)
    6d32:	f002 f8fa 	bl	8f2a <assert_print>
    6d36:	4823      	ldr	r0, [pc, #140]	; (6dc4 <k_sched_lock+0xbc>)
    6d38:	218e      	movs	r1, #142	; 0x8e
    6d3a:	f002 f8ef 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6d3e:	4820      	ldr	r0, [pc, #128]	; (6dc0 <k_sched_lock+0xb8>)
    6d40:	f7ff fc1c 	bl	657c <z_spin_lock_set_owner>
    6d44:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6d48:	b163      	cbz	r3, 6d64 <k_sched_lock+0x5c>
    6d4a:	4922      	ldr	r1, [pc, #136]	; (6dd4 <k_sched_lock+0xcc>)
    6d4c:	4a22      	ldr	r2, [pc, #136]	; (6dd8 <k_sched_lock+0xd0>)
    6d4e:	481f      	ldr	r0, [pc, #124]	; (6dcc <k_sched_lock+0xc4>)
    6d50:	23fd      	movs	r3, #253	; 0xfd
    6d52:	f002 f8ea 	bl	8f2a <assert_print>
    6d56:	4821      	ldr	r0, [pc, #132]	; (6ddc <k_sched_lock+0xd4>)
    6d58:	f002 f8e7 	bl	8f2a <assert_print>
    6d5c:	481e      	ldr	r0, [pc, #120]	; (6dd8 <k_sched_lock+0xd0>)
    6d5e:	21fd      	movs	r1, #253	; 0xfd
    6d60:	f002 f8dc 	bl	8f1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6d64:	4c1e      	ldr	r4, [pc, #120]	; (6de0 <k_sched_lock+0xd8>)
    6d66:	68a3      	ldr	r3, [r4, #8]
    6d68:	7bdb      	ldrb	r3, [r3, #15]
    6d6a:	2b01      	cmp	r3, #1
    6d6c:	d10c      	bne.n	6d88 <k_sched_lock+0x80>
    6d6e:	491d      	ldr	r1, [pc, #116]	; (6de4 <k_sched_lock+0xdc>)
    6d70:	4a19      	ldr	r2, [pc, #100]	; (6dd8 <k_sched_lock+0xd0>)
    6d72:	4816      	ldr	r0, [pc, #88]	; (6dcc <k_sched_lock+0xc4>)
    6d74:	23fe      	movs	r3, #254	; 0xfe
    6d76:	f002 f8d8 	bl	8f2a <assert_print>
    6d7a:	4818      	ldr	r0, [pc, #96]	; (6ddc <k_sched_lock+0xd4>)
    6d7c:	f002 f8d5 	bl	8f2a <assert_print>
    6d80:	4815      	ldr	r0, [pc, #84]	; (6dd8 <k_sched_lock+0xd0>)
    6d82:	21fe      	movs	r1, #254	; 0xfe
    6d84:	f002 f8ca 	bl	8f1c <assert_post_action>
	--_current->base.sched_locked;
    6d88:	68a2      	ldr	r2, [r4, #8]
    6d8a:	7bd3      	ldrb	r3, [r2, #15]
    6d8c:	3b01      	subs	r3, #1
    6d8e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d90:	480b      	ldr	r0, [pc, #44]	; (6dc0 <k_sched_lock+0xb8>)
    6d92:	f7ff fbe3 	bl	655c <z_spin_unlock_valid>
    6d96:	b968      	cbnz	r0, 6db4 <k_sched_lock+0xac>
    6d98:	4a0a      	ldr	r2, [pc, #40]	; (6dc4 <k_sched_lock+0xbc>)
    6d9a:	4913      	ldr	r1, [pc, #76]	; (6de8 <k_sched_lock+0xe0>)
    6d9c:	480b      	ldr	r0, [pc, #44]	; (6dcc <k_sched_lock+0xc4>)
    6d9e:	23b9      	movs	r3, #185	; 0xb9
    6da0:	f002 f8c3 	bl	8f2a <assert_print>
    6da4:	4906      	ldr	r1, [pc, #24]	; (6dc0 <k_sched_lock+0xb8>)
    6da6:	4811      	ldr	r0, [pc, #68]	; (6dec <k_sched_lock+0xe4>)
    6da8:	f002 f8bf 	bl	8f2a <assert_print>
    6dac:	4805      	ldr	r0, [pc, #20]	; (6dc4 <k_sched_lock+0xbc>)
    6dae:	21b9      	movs	r1, #185	; 0xb9
    6db0:	f002 f8b4 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    6db4:	f385 8811 	msr	BASEPRI, r5
    6db8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6dbc:	bd38      	pop	{r3, r4, r5, pc}
    6dbe:	bf00      	nop
    6dc0:	20000c70 	.word	0x20000c70
    6dc4:	0000a38e 	.word	0x0000a38e
    6dc8:	0000a3e7 	.word	0x0000a3e7
    6dcc:	00009eb7 	.word	0x00009eb7
    6dd0:	0000a3fc 	.word	0x0000a3fc
    6dd4:	0000b6fe 	.word	0x0000b6fe
    6dd8:	0000b809 	.word	0x0000b809
    6ddc:	0000b834 	.word	0x0000b834
    6de0:	20000c3c 	.word	0x20000c3c
    6de4:	0000b837 	.word	0x0000b837
    6de8:	0000a3bb 	.word	0x0000a3bb
    6dec:	0000a3d2 	.word	0x0000a3d2

00006df0 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6df0:	4b0c      	ldr	r3, [pc, #48]	; (6e24 <z_priq_dumb_remove+0x34>)
    6df2:	4299      	cmp	r1, r3
{
    6df4:	b510      	push	{r4, lr}
    6df6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6df8:	d10b      	bne.n	6e12 <z_priq_dumb_remove+0x22>
    6dfa:	490b      	ldr	r1, [pc, #44]	; (6e28 <z_priq_dumb_remove+0x38>)
    6dfc:	480b      	ldr	r0, [pc, #44]	; (6e2c <z_priq_dumb_remove+0x3c>)
    6dfe:	4a0c      	ldr	r2, [pc, #48]	; (6e30 <z_priq_dumb_remove+0x40>)
    6e00:	f240 433d 	movw	r3, #1085	; 0x43d
    6e04:	f002 f891 	bl	8f2a <assert_print>
    6e08:	4809      	ldr	r0, [pc, #36]	; (6e30 <z_priq_dumb_remove+0x40>)
    6e0a:	f240 413d 	movw	r1, #1085	; 0x43d
    6e0e:	f002 f885 	bl	8f1c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    6e12:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    6e16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6e18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6e1a:	2300      	movs	r3, #0
	node->prev = NULL;
    6e1c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6e20:	bd10      	pop	{r4, pc}
    6e22:	bf00      	nop
    6e24:	20000400 	.word	0x20000400
    6e28:	0000b8f8 	.word	0x0000b8f8
    6e2c:	00009eb7 	.word	0x00009eb7
    6e30:	0000b8d6 	.word	0x0000b8d6

00006e34 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    6e34:	6883      	ldr	r3, [r0, #8]
{
    6e36:	b510      	push	{r4, lr}
    6e38:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6e3a:	b95b      	cbnz	r3, 6e54 <unpend_thread_no_timeout+0x20>
    6e3c:	490b      	ldr	r1, [pc, #44]	; (6e6c <unpend_thread_no_timeout+0x38>)
    6e3e:	480c      	ldr	r0, [pc, #48]	; (6e70 <unpend_thread_no_timeout+0x3c>)
    6e40:	4a0c      	ldr	r2, [pc, #48]	; (6e74 <unpend_thread_no_timeout+0x40>)
    6e42:	f240 23b9 	movw	r3, #697	; 0x2b9
    6e46:	f002 f870 	bl	8f2a <assert_print>
    6e4a:	480a      	ldr	r0, [pc, #40]	; (6e74 <unpend_thread_no_timeout+0x40>)
    6e4c:	f240 21b9 	movw	r1, #697	; 0x2b9
    6e50:	f002 f864 	bl	8f1c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6e54:	68a0      	ldr	r0, [r4, #8]
    6e56:	4621      	mov	r1, r4
    6e58:	f7ff ffca 	bl	6df0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6e5c:	7b63      	ldrb	r3, [r4, #13]
    6e5e:	f023 0302 	bic.w	r3, r3, #2
    6e62:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6e64:	2300      	movs	r3, #0
    6e66:	60a3      	str	r3, [r4, #8]
}
    6e68:	bd10      	pop	{r4, pc}
    6e6a:	bf00      	nop
    6e6c:	0000b919 	.word	0x0000b919
    6e70:	00009eb7 	.word	0x00009eb7
    6e74:	0000b8d6 	.word	0x0000b8d6

00006e78 <update_cache>:
{
    6e78:	b538      	push	{r3, r4, r5, lr}
    6e7a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    6e7c:	4814      	ldr	r0, [pc, #80]	; (6ed0 <update_cache+0x58>)
    6e7e:	4d15      	ldr	r5, [pc, #84]	; (6ed4 <update_cache+0x5c>)
    6e80:	f002 fca3 	bl	97ca <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6e84:	4604      	mov	r4, r0
    6e86:	b900      	cbnz	r0, 6e8a <update_cache+0x12>
    6e88:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    6e8a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6e8c:	b9b2      	cbnz	r2, 6ebc <update_cache+0x44>
	__ASSERT(_current != NULL, "");
    6e8e:	b963      	cbnz	r3, 6eaa <update_cache+0x32>
    6e90:	4911      	ldr	r1, [pc, #68]	; (6ed8 <update_cache+0x60>)
    6e92:	4a12      	ldr	r2, [pc, #72]	; (6edc <update_cache+0x64>)
    6e94:	4812      	ldr	r0, [pc, #72]	; (6ee0 <update_cache+0x68>)
    6e96:	2389      	movs	r3, #137	; 0x89
    6e98:	f002 f847 	bl	8f2a <assert_print>
    6e9c:	4811      	ldr	r0, [pc, #68]	; (6ee4 <update_cache+0x6c>)
    6e9e:	f002 f844 	bl	8f2a <assert_print>
    6ea2:	480e      	ldr	r0, [pc, #56]	; (6edc <update_cache+0x64>)
    6ea4:	2189      	movs	r1, #137	; 0x89
    6ea6:	f002 f839 	bl	8f1c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6eaa:	68ab      	ldr	r3, [r5, #8]
    6eac:	7b5a      	ldrb	r2, [r3, #13]
    6eae:	06d2      	lsls	r2, r2, #27
    6eb0:	d104      	bne.n	6ebc <update_cache+0x44>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6eb2:	69a2      	ldr	r2, [r4, #24]
    6eb4:	b912      	cbnz	r2, 6ebc <update_cache+0x44>
	if (is_preempt(_current) || is_metairq(thread)) {
    6eb6:	89da      	ldrh	r2, [r3, #14]
    6eb8:	2a7f      	cmp	r2, #127	; 0x7f
    6eba:	d806      	bhi.n	6eca <update_cache+0x52>
		if (thread != _current) {
    6ebc:	68ab      	ldr	r3, [r5, #8]
    6ebe:	42a3      	cmp	r3, r4
    6ec0:	d002      	beq.n	6ec8 <update_cache+0x50>
			z_reset_time_slice(thread);
    6ec2:	4620      	mov	r0, r4
    6ec4:	f7ff fe1a 	bl	6afc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6ec8:	4623      	mov	r3, r4
    6eca:	61eb      	str	r3, [r5, #28]
}
    6ecc:	bd38      	pop	{r3, r4, r5, pc}
    6ece:	bf00      	nop
    6ed0:	20000c5c 	.word	0x20000c5c
    6ed4:	20000c3c 	.word	0x20000c3c
    6ed8:	0000b930 	.word	0x0000b930
    6edc:	0000b8d6 	.word	0x0000b8d6
    6ee0:	00009eb7 	.word	0x00009eb7
    6ee4:	0000b834 	.word	0x0000b834

00006ee8 <move_thread_to_end_of_prio_q>:
{
    6ee8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6eea:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    6eee:	7b43      	ldrb	r3, [r0, #13]
    6ef0:	2a00      	cmp	r2, #0
{
    6ef2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6ef4:	da06      	bge.n	6f04 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6efa:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6efc:	4601      	mov	r1, r0
    6efe:	481d      	ldr	r0, [pc, #116]	; (6f74 <move_thread_to_end_of_prio_q+0x8c>)
    6f00:	f7ff ff76 	bl	6df0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6f04:	7b63      	ldrb	r3, [r4, #13]
    6f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6f0a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6f0c:	4b1a      	ldr	r3, [pc, #104]	; (6f78 <move_thread_to_end_of_prio_q+0x90>)
    6f0e:	429c      	cmp	r4, r3
    6f10:	d109      	bne.n	6f26 <move_thread_to_end_of_prio_q+0x3e>
    6f12:	491a      	ldr	r1, [pc, #104]	; (6f7c <move_thread_to_end_of_prio_q+0x94>)
    6f14:	481a      	ldr	r0, [pc, #104]	; (6f80 <move_thread_to_end_of_prio_q+0x98>)
    6f16:	4a1b      	ldr	r2, [pc, #108]	; (6f84 <move_thread_to_end_of_prio_q+0x9c>)
    6f18:	23ba      	movs	r3, #186	; 0xba
    6f1a:	f002 f806 	bl	8f2a <assert_print>
    6f1e:	4819      	ldr	r0, [pc, #100]	; (6f84 <move_thread_to_end_of_prio_q+0x9c>)
    6f20:	21ba      	movs	r1, #186	; 0xba
    6f22:	f001 fffb 	bl	8f1c <assert_post_action>
	return list->head == list;
    6f26:	4a18      	ldr	r2, [pc, #96]	; (6f88 <move_thread_to_end_of_prio_q+0xa0>)
	return (node == list->tail) ? NULL : node->next;
    6f28:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f2c:	f102 0020 	add.w	r0, r2, #32
    6f30:	4283      	cmp	r3, r0
    6f32:	d01a      	beq.n	6f6a <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f34:	b1cb      	cbz	r3, 6f6a <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
    6f36:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6f3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6f3e:	42b5      	cmp	r5, r6
    6f40:	d00e      	beq.n	6f60 <move_thread_to_end_of_prio_q+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6f42:	42ae      	cmp	r6, r5
    6f44:	dd0c      	ble.n	6f60 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
    6f46:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6f48:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6f4c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6f4e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6f50:	6890      	ldr	r0, [r2, #8]
    6f52:	1b03      	subs	r3, r0, r4
    6f54:	4258      	negs	r0, r3
}
    6f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6f5a:	4158      	adcs	r0, r3
    6f5c:	f7ff bf8c 	b.w	6e78 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6f60:	428b      	cmp	r3, r1
    6f62:	d002      	beq.n	6f6a <move_thread_to_end_of_prio_q+0x82>
    6f64:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f66:	2b00      	cmp	r3, #0
    6f68:	d1e7      	bne.n	6f3a <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    6f6a:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6f6e:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6f70:	6254      	str	r4, [r2, #36]	; 0x24
}
    6f72:	e7ed      	b.n	6f50 <move_thread_to_end_of_prio_q+0x68>
    6f74:	20000c5c 	.word	0x20000c5c
    6f78:	20000400 	.word	0x20000400
    6f7c:	0000b8f8 	.word	0x0000b8f8
    6f80:	00009eb7 	.word	0x00009eb7
    6f84:	0000b8d6 	.word	0x0000b8d6
    6f88:	20000c3c 	.word	0x20000c3c

00006f8c <z_time_slice>:
{
    6f8c:	b570      	push	{r4, r5, r6, lr}
    6f8e:	4605      	mov	r5, r0
	__asm__ volatile(
    6f90:	f04f 0340 	mov.w	r3, #64	; 0x40
    6f94:	f3ef 8611 	mrs	r6, BASEPRI
    6f98:	f383 8812 	msr	BASEPRI_MAX, r3
    6f9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fa0:	482a      	ldr	r0, [pc, #168]	; (704c <z_time_slice+0xc0>)
    6fa2:	f7ff facd 	bl	6540 <z_spin_lock_valid>
    6fa6:	b968      	cbnz	r0, 6fc4 <z_time_slice+0x38>
    6fa8:	4a29      	ldr	r2, [pc, #164]	; (7050 <z_time_slice+0xc4>)
    6faa:	492a      	ldr	r1, [pc, #168]	; (7054 <z_time_slice+0xc8>)
    6fac:	482a      	ldr	r0, [pc, #168]	; (7058 <z_time_slice+0xcc>)
    6fae:	238e      	movs	r3, #142	; 0x8e
    6fb0:	f001 ffbb 	bl	8f2a <assert_print>
    6fb4:	4925      	ldr	r1, [pc, #148]	; (704c <z_time_slice+0xc0>)
    6fb6:	4829      	ldr	r0, [pc, #164]	; (705c <z_time_slice+0xd0>)
    6fb8:	f001 ffb7 	bl	8f2a <assert_print>
    6fbc:	4824      	ldr	r0, [pc, #144]	; (7050 <z_time_slice+0xc4>)
    6fbe:	218e      	movs	r1, #142	; 0x8e
    6fc0:	f001 ffac 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    6fc4:	4821      	ldr	r0, [pc, #132]	; (704c <z_time_slice+0xc0>)
    6fc6:	f7ff fad9 	bl	657c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6fca:	4b25      	ldr	r3, [pc, #148]	; (7060 <z_time_slice+0xd4>)
    6fcc:	4a25      	ldr	r2, [pc, #148]	; (7064 <z_time_slice+0xd8>)
    6fce:	689c      	ldr	r4, [r3, #8]
    6fd0:	6811      	ldr	r1, [r2, #0]
    6fd2:	428c      	cmp	r4, r1
    6fd4:	d119      	bne.n	700a <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    6fd6:	4620      	mov	r0, r4
    6fd8:	f7ff fd90 	bl	6afc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fdc:	481b      	ldr	r0, [pc, #108]	; (704c <z_time_slice+0xc0>)
    6fde:	f7ff fabd 	bl	655c <z_spin_unlock_valid>
    6fe2:	b968      	cbnz	r0, 7000 <z_time_slice+0x74>
    6fe4:	4a1a      	ldr	r2, [pc, #104]	; (7050 <z_time_slice+0xc4>)
    6fe6:	4920      	ldr	r1, [pc, #128]	; (7068 <z_time_slice+0xdc>)
    6fe8:	481b      	ldr	r0, [pc, #108]	; (7058 <z_time_slice+0xcc>)
    6fea:	23b9      	movs	r3, #185	; 0xb9
    6fec:	f001 ff9d 	bl	8f2a <assert_print>
    6ff0:	4916      	ldr	r1, [pc, #88]	; (704c <z_time_slice+0xc0>)
    6ff2:	481e      	ldr	r0, [pc, #120]	; (706c <z_time_slice+0xe0>)
    6ff4:	f001 ff99 	bl	8f2a <assert_print>
    6ff8:	4815      	ldr	r0, [pc, #84]	; (7050 <z_time_slice+0xc4>)
    6ffa:	21b9      	movs	r1, #185	; 0xb9
    6ffc:	f001 ff8e 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7000:	f386 8811 	msr	BASEPRI, r6
    7004:	f3bf 8f6f 	isb	sy
}
    7008:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    700a:	2100      	movs	r1, #0
    700c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    700e:	4a18      	ldr	r2, [pc, #96]	; (7070 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    7010:	6812      	ldr	r2, [r2, #0]
    7012:	b1c2      	cbz	r2, 7046 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    7014:	89e2      	ldrh	r2, [r4, #14]
    7016:	2a7f      	cmp	r2, #127	; 0x7f
    7018:	d815      	bhi.n	7046 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    701a:	7b62      	ldrb	r2, [r4, #13]
    701c:	06d2      	lsls	r2, r2, #27
    701e:	d112      	bne.n	7046 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7020:	4a14      	ldr	r2, [pc, #80]	; (7074 <z_time_slice+0xe8>)
    7022:	f994 100e 	ldrsb.w	r1, [r4, #14]
    7026:	6812      	ldr	r2, [r2, #0]
    7028:	4291      	cmp	r1, r2
    702a:	db0c      	blt.n	7046 <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    702c:	4a12      	ldr	r2, [pc, #72]	; (7078 <z_time_slice+0xec>)
    702e:	4294      	cmp	r4, r2
    7030:	d009      	beq.n	7046 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    7032:	691a      	ldr	r2, [r3, #16]
    7034:	42aa      	cmp	r2, r5
    7036:	dc03      	bgt.n	7040 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    7038:	4620      	mov	r0, r4
    703a:	f7ff ff55 	bl	6ee8 <move_thread_to_end_of_prio_q>
    703e:	e7ca      	b.n	6fd6 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    7040:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    7042:	611a      	str	r2, [r3, #16]
    7044:	e7ca      	b.n	6fdc <z_time_slice+0x50>
    7046:	2200      	movs	r2, #0
    7048:	e7fb      	b.n	7042 <z_time_slice+0xb6>
    704a:	bf00      	nop
    704c:	20000c70 	.word	0x20000c70
    7050:	0000a38e 	.word	0x0000a38e
    7054:	0000a3e7 	.word	0x0000a3e7
    7058:	00009eb7 	.word	0x00009eb7
    705c:	0000a3fc 	.word	0x0000a3fc
    7060:	20000c3c 	.word	0x20000c3c
    7064:	20000c6c 	.word	0x20000c6c
    7068:	0000a3bb 	.word	0x0000a3bb
    706c:	0000a3d2 	.word	0x0000a3d2
    7070:	20000c78 	.word	0x20000c78
    7074:	20000c74 	.word	0x20000c74
    7078:	20000400 	.word	0x20000400

0000707c <ready_thread>:
{
    707c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    707e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    7082:	7b43      	ldrb	r3, [r0, #13]
    7084:	2a00      	cmp	r2, #0
{
    7086:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7088:	db38      	blt.n	70fc <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    708a:	06da      	lsls	r2, r3, #27
    708c:	d136      	bne.n	70fc <ready_thread+0x80>
    708e:	6982      	ldr	r2, [r0, #24]
    7090:	2a00      	cmp	r2, #0
    7092:	d133      	bne.n	70fc <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    7094:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7098:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    709a:	4b19      	ldr	r3, [pc, #100]	; (7100 <ready_thread+0x84>)
    709c:	4298      	cmp	r0, r3
    709e:	d109      	bne.n	70b4 <ready_thread+0x38>
    70a0:	4918      	ldr	r1, [pc, #96]	; (7104 <ready_thread+0x88>)
    70a2:	4819      	ldr	r0, [pc, #100]	; (7108 <ready_thread+0x8c>)
    70a4:	4a19      	ldr	r2, [pc, #100]	; (710c <ready_thread+0x90>)
    70a6:	23ba      	movs	r3, #186	; 0xba
    70a8:	f001 ff3f 	bl	8f2a <assert_print>
    70ac:	4817      	ldr	r0, [pc, #92]	; (710c <ready_thread+0x90>)
    70ae:	21ba      	movs	r1, #186	; 0xba
    70b0:	f001 ff34 	bl	8f1c <assert_post_action>
	return list->head == list;
    70b4:	4a16      	ldr	r2, [pc, #88]	; (7110 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    70b6:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70ba:	f102 0020 	add.w	r0, r2, #32
    70be:	4283      	cmp	r3, r0
    70c0:	d017      	beq.n	70f2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70c2:	b1b3      	cbz	r3, 70f2 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
    70c4:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    70c8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    70cc:	42b5      	cmp	r5, r6
    70ce:	d00b      	beq.n	70e8 <ready_thread+0x6c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70d0:	42ae      	cmp	r6, r5
    70d2:	dd09      	ble.n	70e8 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
    70d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    70d6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    70da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    70dc:	605c      	str	r4, [r3, #4]
}
    70de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    70e2:	2000      	movs	r0, #0
    70e4:	f7ff bec8 	b.w	6e78 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    70e8:	4299      	cmp	r1, r3
    70ea:	d002      	beq.n	70f2 <ready_thread+0x76>
    70ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70ee:	2b00      	cmp	r3, #0
    70f0:	d1ea      	bne.n	70c8 <ready_thread+0x4c>
	node->prev = tail;
    70f2:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    70f6:	600c      	str	r4, [r1, #0]
	list->tail = node;
    70f8:	6254      	str	r4, [r2, #36]	; 0x24
}
    70fa:	e7f0      	b.n	70de <ready_thread+0x62>
}
    70fc:	bd70      	pop	{r4, r5, r6, pc}
    70fe:	bf00      	nop
    7100:	20000400 	.word	0x20000400
    7104:	0000b8f8 	.word	0x0000b8f8
    7108:	00009eb7 	.word	0x00009eb7
    710c:	0000b8d6 	.word	0x0000b8d6
    7110:	20000c3c 	.word	0x20000c3c

00007114 <z_ready_thread>:
{
    7114:	b538      	push	{r3, r4, r5, lr}
    7116:	4604      	mov	r4, r0
	__asm__ volatile(
    7118:	f04f 0340 	mov.w	r3, #64	; 0x40
    711c:	f3ef 8511 	mrs	r5, BASEPRI
    7120:	f383 8812 	msr	BASEPRI_MAX, r3
    7124:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7128:	4817      	ldr	r0, [pc, #92]	; (7188 <z_ready_thread+0x74>)
    712a:	f7ff fa09 	bl	6540 <z_spin_lock_valid>
    712e:	b968      	cbnz	r0, 714c <z_ready_thread+0x38>
    7130:	4a16      	ldr	r2, [pc, #88]	; (718c <z_ready_thread+0x78>)
    7132:	4917      	ldr	r1, [pc, #92]	; (7190 <z_ready_thread+0x7c>)
    7134:	4817      	ldr	r0, [pc, #92]	; (7194 <z_ready_thread+0x80>)
    7136:	238e      	movs	r3, #142	; 0x8e
    7138:	f001 fef7 	bl	8f2a <assert_print>
    713c:	4912      	ldr	r1, [pc, #72]	; (7188 <z_ready_thread+0x74>)
    713e:	4816      	ldr	r0, [pc, #88]	; (7198 <z_ready_thread+0x84>)
    7140:	f001 fef3 	bl	8f2a <assert_print>
    7144:	4811      	ldr	r0, [pc, #68]	; (718c <z_ready_thread+0x78>)
    7146:	218e      	movs	r1, #142	; 0x8e
    7148:	f001 fee8 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    714c:	480e      	ldr	r0, [pc, #56]	; (7188 <z_ready_thread+0x74>)
    714e:	f7ff fa15 	bl	657c <z_spin_lock_set_owner>
			ready_thread(thread);
    7152:	4620      	mov	r0, r4
    7154:	f7ff ff92 	bl	707c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7158:	480b      	ldr	r0, [pc, #44]	; (7188 <z_ready_thread+0x74>)
    715a:	f7ff f9ff 	bl	655c <z_spin_unlock_valid>
    715e:	b968      	cbnz	r0, 717c <z_ready_thread+0x68>
    7160:	4a0a      	ldr	r2, [pc, #40]	; (718c <z_ready_thread+0x78>)
    7162:	490e      	ldr	r1, [pc, #56]	; (719c <z_ready_thread+0x88>)
    7164:	480b      	ldr	r0, [pc, #44]	; (7194 <z_ready_thread+0x80>)
    7166:	23b9      	movs	r3, #185	; 0xb9
    7168:	f001 fedf 	bl	8f2a <assert_print>
    716c:	4906      	ldr	r1, [pc, #24]	; (7188 <z_ready_thread+0x74>)
    716e:	480c      	ldr	r0, [pc, #48]	; (71a0 <z_ready_thread+0x8c>)
    7170:	f001 fedb 	bl	8f2a <assert_print>
    7174:	4805      	ldr	r0, [pc, #20]	; (718c <z_ready_thread+0x78>)
    7176:	21b9      	movs	r1, #185	; 0xb9
    7178:	f001 fed0 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    717c:	f385 8811 	msr	BASEPRI, r5
    7180:	f3bf 8f6f 	isb	sy
}
    7184:	bd38      	pop	{r3, r4, r5, pc}
    7186:	bf00      	nop
    7188:	20000c70 	.word	0x20000c70
    718c:	0000a38e 	.word	0x0000a38e
    7190:	0000a3e7 	.word	0x0000a3e7
    7194:	00009eb7 	.word	0x00009eb7
    7198:	0000a3fc 	.word	0x0000a3fc
    719c:	0000a3bb 	.word	0x0000a3bb
    71a0:	0000a3d2 	.word	0x0000a3d2

000071a4 <z_sched_start>:
{
    71a4:	b538      	push	{r3, r4, r5, lr}
    71a6:	4604      	mov	r4, r0
	__asm__ volatile(
    71a8:	f04f 0340 	mov.w	r3, #64	; 0x40
    71ac:	f3ef 8511 	mrs	r5, BASEPRI
    71b0:	f383 8812 	msr	BASEPRI_MAX, r3
    71b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71b8:	481d      	ldr	r0, [pc, #116]	; (7230 <z_sched_start+0x8c>)
    71ba:	f7ff f9c1 	bl	6540 <z_spin_lock_valid>
    71be:	b968      	cbnz	r0, 71dc <z_sched_start+0x38>
    71c0:	4a1c      	ldr	r2, [pc, #112]	; (7234 <z_sched_start+0x90>)
    71c2:	491d      	ldr	r1, [pc, #116]	; (7238 <z_sched_start+0x94>)
    71c4:	481d      	ldr	r0, [pc, #116]	; (723c <z_sched_start+0x98>)
    71c6:	238e      	movs	r3, #142	; 0x8e
    71c8:	f001 feaf 	bl	8f2a <assert_print>
    71cc:	4918      	ldr	r1, [pc, #96]	; (7230 <z_sched_start+0x8c>)
    71ce:	481c      	ldr	r0, [pc, #112]	; (7240 <z_sched_start+0x9c>)
    71d0:	f001 feab 	bl	8f2a <assert_print>
    71d4:	4817      	ldr	r0, [pc, #92]	; (7234 <z_sched_start+0x90>)
    71d6:	218e      	movs	r1, #142	; 0x8e
    71d8:	f001 fea0 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    71dc:	4814      	ldr	r0, [pc, #80]	; (7230 <z_sched_start+0x8c>)
    71de:	f7ff f9cd 	bl	657c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    71e2:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    71e4:	075a      	lsls	r2, r3, #29
    71e6:	d416      	bmi.n	7216 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71e8:	4811      	ldr	r0, [pc, #68]	; (7230 <z_sched_start+0x8c>)
    71ea:	f7ff f9b7 	bl	655c <z_spin_unlock_valid>
    71ee:	b968      	cbnz	r0, 720c <z_sched_start+0x68>
    71f0:	4a10      	ldr	r2, [pc, #64]	; (7234 <z_sched_start+0x90>)
    71f2:	4914      	ldr	r1, [pc, #80]	; (7244 <z_sched_start+0xa0>)
    71f4:	4811      	ldr	r0, [pc, #68]	; (723c <z_sched_start+0x98>)
    71f6:	23b9      	movs	r3, #185	; 0xb9
    71f8:	f001 fe97 	bl	8f2a <assert_print>
    71fc:	490c      	ldr	r1, [pc, #48]	; (7230 <z_sched_start+0x8c>)
    71fe:	4812      	ldr	r0, [pc, #72]	; (7248 <z_sched_start+0xa4>)
    7200:	f001 fe93 	bl	8f2a <assert_print>
    7204:	480b      	ldr	r0, [pc, #44]	; (7234 <z_sched_start+0x90>)
    7206:	21b9      	movs	r1, #185	; 0xb9
    7208:	f001 fe88 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    720c:	f385 8811 	msr	BASEPRI, r5
    7210:	f3bf 8f6f 	isb	sy
}
    7214:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7216:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    721a:	4620      	mov	r0, r4
    721c:	7363      	strb	r3, [r4, #13]
    721e:	f7ff ff2d 	bl	707c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7222:	4629      	mov	r1, r5
    7224:	4802      	ldr	r0, [pc, #8]	; (7230 <z_sched_start+0x8c>)
}
    7226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    722a:	f7ff bd29 	b.w	6c80 <z_reschedule>
    722e:	bf00      	nop
    7230:	20000c70 	.word	0x20000c70
    7234:	0000a38e 	.word	0x0000a38e
    7238:	0000a3e7 	.word	0x0000a3e7
    723c:	00009eb7 	.word	0x00009eb7
    7240:	0000a3fc 	.word	0x0000a3fc
    7244:	0000a3bb 	.word	0x0000a3bb
    7248:	0000a3d2 	.word	0x0000a3d2

0000724c <z_thread_timeout>:
{
    724c:	b570      	push	{r4, r5, r6, lr}
    724e:	4604      	mov	r4, r0
	__asm__ volatile(
    7250:	f04f 0340 	mov.w	r3, #64	; 0x40
    7254:	f3ef 8611 	mrs	r6, BASEPRI
    7258:	f383 8812 	msr	BASEPRI_MAX, r3
    725c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7260:	4820      	ldr	r0, [pc, #128]	; (72e4 <z_thread_timeout+0x98>)
    7262:	f7ff f96d 	bl	6540 <z_spin_lock_valid>
    7266:	b968      	cbnz	r0, 7284 <z_thread_timeout+0x38>
    7268:	4a1f      	ldr	r2, [pc, #124]	; (72e8 <z_thread_timeout+0x9c>)
    726a:	4920      	ldr	r1, [pc, #128]	; (72ec <z_thread_timeout+0xa0>)
    726c:	4820      	ldr	r0, [pc, #128]	; (72f0 <z_thread_timeout+0xa4>)
    726e:	238e      	movs	r3, #142	; 0x8e
    7270:	f001 fe5b 	bl	8f2a <assert_print>
    7274:	491b      	ldr	r1, [pc, #108]	; (72e4 <z_thread_timeout+0x98>)
    7276:	481f      	ldr	r0, [pc, #124]	; (72f4 <z_thread_timeout+0xa8>)
    7278:	f001 fe57 	bl	8f2a <assert_print>
    727c:	481a      	ldr	r0, [pc, #104]	; (72e8 <z_thread_timeout+0x9c>)
    727e:	218e      	movs	r1, #142	; 0x8e
    7280:	f001 fe4c 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    7284:	4817      	ldr	r0, [pc, #92]	; (72e4 <z_thread_timeout+0x98>)
    7286:	f7ff f979 	bl	657c <z_spin_lock_set_owner>
		if (!killed) {
    728a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    728e:	f013 0f28 	tst.w	r3, #40	; 0x28
    7292:	d110      	bne.n	72b6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    7294:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7298:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    729c:	b113      	cbz	r3, 72a4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    729e:	4628      	mov	r0, r5
    72a0:	f7ff fdc8 	bl	6e34 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    72a4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    72a8:	f023 0314 	bic.w	r3, r3, #20
    72ac:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    72b0:	4628      	mov	r0, r5
    72b2:	f7ff fee3 	bl	707c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72b6:	480b      	ldr	r0, [pc, #44]	; (72e4 <z_thread_timeout+0x98>)
    72b8:	f7ff f950 	bl	655c <z_spin_unlock_valid>
    72bc:	b968      	cbnz	r0, 72da <z_thread_timeout+0x8e>
    72be:	4a0a      	ldr	r2, [pc, #40]	; (72e8 <z_thread_timeout+0x9c>)
    72c0:	490d      	ldr	r1, [pc, #52]	; (72f8 <z_thread_timeout+0xac>)
    72c2:	480b      	ldr	r0, [pc, #44]	; (72f0 <z_thread_timeout+0xa4>)
    72c4:	23b9      	movs	r3, #185	; 0xb9
    72c6:	f001 fe30 	bl	8f2a <assert_print>
    72ca:	4906      	ldr	r1, [pc, #24]	; (72e4 <z_thread_timeout+0x98>)
    72cc:	480b      	ldr	r0, [pc, #44]	; (72fc <z_thread_timeout+0xb0>)
    72ce:	f001 fe2c 	bl	8f2a <assert_print>
    72d2:	4805      	ldr	r0, [pc, #20]	; (72e8 <z_thread_timeout+0x9c>)
    72d4:	21b9      	movs	r1, #185	; 0xb9
    72d6:	f001 fe21 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    72da:	f386 8811 	msr	BASEPRI, r6
    72de:	f3bf 8f6f 	isb	sy
}
    72e2:	bd70      	pop	{r4, r5, r6, pc}
    72e4:	20000c70 	.word	0x20000c70
    72e8:	0000a38e 	.word	0x0000a38e
    72ec:	0000a3e7 	.word	0x0000a3e7
    72f0:	00009eb7 	.word	0x00009eb7
    72f4:	0000a3fc 	.word	0x0000a3fc
    72f8:	0000a3bb 	.word	0x0000a3bb
    72fc:	0000a3d2 	.word	0x0000a3d2

00007300 <unready_thread>:
{
    7300:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    7302:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7306:	7b43      	ldrb	r3, [r0, #13]
    7308:	2a00      	cmp	r2, #0
{
    730a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    730c:	da06      	bge.n	731c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    730e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7312:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7314:	4601      	mov	r1, r0
    7316:	4806      	ldr	r0, [pc, #24]	; (7330 <unready_thread+0x30>)
    7318:	f7ff fd6a 	bl	6df0 <z_priq_dumb_remove>
	update_cache(thread == _current);
    731c:	4b05      	ldr	r3, [pc, #20]	; (7334 <unready_thread+0x34>)
    731e:	6898      	ldr	r0, [r3, #8]
    7320:	1b03      	subs	r3, r0, r4
    7322:	4258      	negs	r0, r3
}
    7324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7328:	4158      	adcs	r0, r3
    732a:	f7ff bda5 	b.w	6e78 <update_cache>
    732e:	bf00      	nop
    7330:	20000c5c 	.word	0x20000c5c
    7334:	20000c3c 	.word	0x20000c3c

00007338 <add_to_waitq_locked>:
{
    7338:	b538      	push	{r3, r4, r5, lr}
    733a:	4604      	mov	r4, r0
    733c:	460d      	mov	r5, r1
	unready_thread(thread);
    733e:	f7ff ffdf 	bl	7300 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7342:	7b63      	ldrb	r3, [r4, #13]
    7344:	f043 0302 	orr.w	r3, r3, #2
    7348:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    734a:	b1f5      	cbz	r5, 738a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    734c:	4b15      	ldr	r3, [pc, #84]	; (73a4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    734e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7350:	429c      	cmp	r4, r3
    7352:	d109      	bne.n	7368 <add_to_waitq_locked+0x30>
    7354:	4914      	ldr	r1, [pc, #80]	; (73a8 <add_to_waitq_locked+0x70>)
    7356:	4815      	ldr	r0, [pc, #84]	; (73ac <add_to_waitq_locked+0x74>)
    7358:	4a15      	ldr	r2, [pc, #84]	; (73b0 <add_to_waitq_locked+0x78>)
    735a:	23ba      	movs	r3, #186	; 0xba
    735c:	f001 fde5 	bl	8f2a <assert_print>
    7360:	4813      	ldr	r0, [pc, #76]	; (73b0 <add_to_waitq_locked+0x78>)
    7362:	21ba      	movs	r1, #186	; 0xba
    7364:	f001 fdda 	bl	8f1c <assert_post_action>
	return list->head == list;
    7368:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    736a:	429d      	cmp	r5, r3
    736c:	d014      	beq.n	7398 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    736e:	b19b      	cbz	r3, 7398 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
    7370:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7374:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7378:	428a      	cmp	r2, r1
    737a:	d007      	beq.n	738c <add_to_waitq_locked+0x54>
		if (z_sched_prio_cmp(thread, t) > 0) {
    737c:	4291      	cmp	r1, r2
    737e:	dd05      	ble.n	738c <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
    7380:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7382:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7386:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7388:	605c      	str	r4, [r3, #4]
}
    738a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    738c:	6869      	ldr	r1, [r5, #4]
    738e:	428b      	cmp	r3, r1
    7390:	d002      	beq.n	7398 <add_to_waitq_locked+0x60>
    7392:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7394:	2b00      	cmp	r3, #0
    7396:	d1ed      	bne.n	7374 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    7398:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    739a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    739e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    73a0:	606c      	str	r4, [r5, #4]
}
    73a2:	e7f2      	b.n	738a <add_to_waitq_locked+0x52>
    73a4:	20000400 	.word	0x20000400
    73a8:	0000b8f8 	.word	0x0000b8f8
    73ac:	00009eb7 	.word	0x00009eb7
    73b0:	0000b8d6 	.word	0x0000b8d6

000073b4 <pend>:
{
    73b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b8:	4604      	mov	r4, r0
    73ba:	4688      	mov	r8, r1
    73bc:	4616      	mov	r6, r2
    73be:	461d      	mov	r5, r3
	__asm__ volatile(
    73c0:	f04f 0340 	mov.w	r3, #64	; 0x40
    73c4:	f3ef 8711 	mrs	r7, BASEPRI
    73c8:	f383 8812 	msr	BASEPRI_MAX, r3
    73cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73d0:	481f      	ldr	r0, [pc, #124]	; (7450 <pend+0x9c>)
    73d2:	f7ff f8b5 	bl	6540 <z_spin_lock_valid>
    73d6:	b968      	cbnz	r0, 73f4 <pend+0x40>
    73d8:	4a1e      	ldr	r2, [pc, #120]	; (7454 <pend+0xa0>)
    73da:	491f      	ldr	r1, [pc, #124]	; (7458 <pend+0xa4>)
    73dc:	481f      	ldr	r0, [pc, #124]	; (745c <pend+0xa8>)
    73de:	238e      	movs	r3, #142	; 0x8e
    73e0:	f001 fda3 	bl	8f2a <assert_print>
    73e4:	491a      	ldr	r1, [pc, #104]	; (7450 <pend+0x9c>)
    73e6:	481e      	ldr	r0, [pc, #120]	; (7460 <pend+0xac>)
    73e8:	f001 fd9f 	bl	8f2a <assert_print>
    73ec:	4819      	ldr	r0, [pc, #100]	; (7454 <pend+0xa0>)
    73ee:	218e      	movs	r1, #142	; 0x8e
    73f0:	f001 fd94 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    73f4:	4816      	ldr	r0, [pc, #88]	; (7450 <pend+0x9c>)
    73f6:	f7ff f8c1 	bl	657c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    73fa:	4620      	mov	r0, r4
    73fc:	4641      	mov	r1, r8
    73fe:	f7ff ff9b 	bl	7338 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7402:	4813      	ldr	r0, [pc, #76]	; (7450 <pend+0x9c>)
    7404:	f7ff f8aa 	bl	655c <z_spin_unlock_valid>
    7408:	b968      	cbnz	r0, 7426 <pend+0x72>
    740a:	4a12      	ldr	r2, [pc, #72]	; (7454 <pend+0xa0>)
    740c:	4915      	ldr	r1, [pc, #84]	; (7464 <pend+0xb0>)
    740e:	4813      	ldr	r0, [pc, #76]	; (745c <pend+0xa8>)
    7410:	23b9      	movs	r3, #185	; 0xb9
    7412:	f001 fd8a 	bl	8f2a <assert_print>
    7416:	490e      	ldr	r1, [pc, #56]	; (7450 <pend+0x9c>)
    7418:	4813      	ldr	r0, [pc, #76]	; (7468 <pend+0xb4>)
    741a:	f001 fd86 	bl	8f2a <assert_print>
    741e:	480d      	ldr	r0, [pc, #52]	; (7454 <pend+0xa0>)
    7420:	21b9      	movs	r1, #185	; 0xb9
    7422:	f001 fd7b 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7426:	f387 8811 	msr	BASEPRI, r7
    742a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    742e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7432:	bf08      	it	eq
    7434:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7438:	d008      	beq.n	744c <pend+0x98>
    743a:	4632      	mov	r2, r6
    743c:	462b      	mov	r3, r5
    743e:	f104 0018 	add.w	r0, r4, #24
    7442:	490a      	ldr	r1, [pc, #40]	; (746c <pend+0xb8>)
}
    7444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7448:	f000 bd02 	b.w	7e50 <z_add_timeout>
    744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7450:	20000c70 	.word	0x20000c70
    7454:	0000a38e 	.word	0x0000a38e
    7458:	0000a3e7 	.word	0x0000a3e7
    745c:	00009eb7 	.word	0x00009eb7
    7460:	0000a3fc 	.word	0x0000a3fc
    7464:	0000a3bb 	.word	0x0000a3bb
    7468:	0000a3d2 	.word	0x0000a3d2
    746c:	0000724d 	.word	0x0000724d

00007470 <z_pend_curr>:
{
    7470:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    7472:	4b11      	ldr	r3, [pc, #68]	; (74b8 <z_pend_curr+0x48>)
{
    7474:	4604      	mov	r4, r0
	pending_current = _current;
    7476:	6898      	ldr	r0, [r3, #8]
    7478:	4b10      	ldr	r3, [pc, #64]	; (74bc <z_pend_curr+0x4c>)
{
    747a:	460d      	mov	r5, r1
	pending_current = _current;
    747c:	6018      	str	r0, [r3, #0]
{
    747e:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7484:	f7ff ff96 	bl	73b4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7488:	4620      	mov	r0, r4
    748a:	f7ff f867 	bl	655c <z_spin_unlock_valid>
    748e:	b968      	cbnz	r0, 74ac <z_pend_curr+0x3c>
    7490:	4a0b      	ldr	r2, [pc, #44]	; (74c0 <z_pend_curr+0x50>)
    7492:	490c      	ldr	r1, [pc, #48]	; (74c4 <z_pend_curr+0x54>)
    7494:	480c      	ldr	r0, [pc, #48]	; (74c8 <z_pend_curr+0x58>)
    7496:	23d0      	movs	r3, #208	; 0xd0
    7498:	f001 fd47 	bl	8f2a <assert_print>
    749c:	480b      	ldr	r0, [pc, #44]	; (74cc <z_pend_curr+0x5c>)
    749e:	4621      	mov	r1, r4
    74a0:	f001 fd43 	bl	8f2a <assert_print>
    74a4:	4806      	ldr	r0, [pc, #24]	; (74c0 <z_pend_curr+0x50>)
    74a6:	21d0      	movs	r1, #208	; 0xd0
    74a8:	f001 fd38 	bl	8f1c <assert_post_action>
    74ac:	4628      	mov	r0, r5
}
    74ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    74b2:	f7fb bc99 	b.w	2de8 <arch_swap>
    74b6:	bf00      	nop
    74b8:	20000c3c 	.word	0x20000c3c
    74bc:	20000c6c 	.word	0x20000c6c
    74c0:	0000a38e 	.word	0x0000a38e
    74c4:	0000a3bb 	.word	0x0000a3bb
    74c8:	00009eb7 	.word	0x00009eb7
    74cc:	0000a3d2 	.word	0x0000a3d2

000074d0 <z_set_prio>:
{
    74d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74d2:	4604      	mov	r4, r0
    74d4:	460d      	mov	r5, r1
	__asm__ volatile(
    74d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    74da:	f3ef 8611 	mrs	r6, BASEPRI
    74de:	f383 8812 	msr	BASEPRI_MAX, r3
    74e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74e6:	4839      	ldr	r0, [pc, #228]	; (75cc <z_set_prio+0xfc>)
    74e8:	f7ff f82a 	bl	6540 <z_spin_lock_valid>
    74ec:	b968      	cbnz	r0, 750a <z_set_prio+0x3a>
    74ee:	4a38      	ldr	r2, [pc, #224]	; (75d0 <z_set_prio+0x100>)
    74f0:	4938      	ldr	r1, [pc, #224]	; (75d4 <z_set_prio+0x104>)
    74f2:	4839      	ldr	r0, [pc, #228]	; (75d8 <z_set_prio+0x108>)
    74f4:	238e      	movs	r3, #142	; 0x8e
    74f6:	f001 fd18 	bl	8f2a <assert_print>
    74fa:	4934      	ldr	r1, [pc, #208]	; (75cc <z_set_prio+0xfc>)
    74fc:	4837      	ldr	r0, [pc, #220]	; (75dc <z_set_prio+0x10c>)
    74fe:	f001 fd14 	bl	8f2a <assert_print>
    7502:	4833      	ldr	r0, [pc, #204]	; (75d0 <z_set_prio+0x100>)
    7504:	218e      	movs	r1, #142	; 0x8e
    7506:	f001 fd09 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    750a:	4830      	ldr	r0, [pc, #192]	; (75cc <z_set_prio+0xfc>)
    750c:	f7ff f836 	bl	657c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    7510:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7512:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7514:	b26d      	sxtb	r5, r5
    7516:	d156      	bne.n	75c6 <z_set_prio+0xf6>
		if (need_sched) {
    7518:	69a2      	ldr	r2, [r4, #24]
    751a:	2a00      	cmp	r2, #0
    751c:	d153      	bne.n	75c6 <z_set_prio+0xf6>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    751e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7522:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7524:	482e      	ldr	r0, [pc, #184]	; (75e0 <z_set_prio+0x110>)
    7526:	4621      	mov	r1, r4
    7528:	f7ff fc62 	bl	6df0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    752c:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    752e:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7530:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7534:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7536:	4b2b      	ldr	r3, [pc, #172]	; (75e4 <z_set_prio+0x114>)
    7538:	429c      	cmp	r4, r3
    753a:	d109      	bne.n	7550 <z_set_prio+0x80>
    753c:	492a      	ldr	r1, [pc, #168]	; (75e8 <z_set_prio+0x118>)
    753e:	4826      	ldr	r0, [pc, #152]	; (75d8 <z_set_prio+0x108>)
    7540:	4a2a      	ldr	r2, [pc, #168]	; (75ec <z_set_prio+0x11c>)
    7542:	23ba      	movs	r3, #186	; 0xba
    7544:	f001 fcf1 	bl	8f2a <assert_print>
    7548:	4828      	ldr	r0, [pc, #160]	; (75ec <z_set_prio+0x11c>)
    754a:	21ba      	movs	r1, #186	; 0xba
    754c:	f001 fce6 	bl	8f1c <assert_post_action>
	return list->head == list;
    7550:	4a27      	ldr	r2, [pc, #156]	; (75f0 <z_set_prio+0x120>)
	return (node == list->tail) ? NULL : node->next;
    7552:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7556:	f102 0020 	add.w	r0, r2, #32
    755a:	4283      	cmp	r3, r0
    755c:	d02e      	beq.n	75bc <z_set_prio+0xec>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    755e:	b36b      	cbz	r3, 75bc <z_set_prio+0xec>
	int32_t b1 = thread_1->base.prio;
    7560:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7564:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    7568:	42bd      	cmp	r5, r7
    756a:	d022      	beq.n	75b2 <z_set_prio+0xe2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    756c:	42af      	cmp	r7, r5
    756e:	dd20      	ble.n	75b2 <z_set_prio+0xe2>
	sys_dnode_t *const prev = successor->prev;
    7570:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7572:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7576:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7578:	605c      	str	r4, [r3, #4]
			update_cache(1);
    757a:	2001      	movs	r0, #1
    757c:	f7ff fc7c 	bl	6e78 <update_cache>
    7580:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7582:	4812      	ldr	r0, [pc, #72]	; (75cc <z_set_prio+0xfc>)
    7584:	f7fe ffea 	bl	655c <z_spin_unlock_valid>
    7588:	b968      	cbnz	r0, 75a6 <z_set_prio+0xd6>
    758a:	4a11      	ldr	r2, [pc, #68]	; (75d0 <z_set_prio+0x100>)
    758c:	4919      	ldr	r1, [pc, #100]	; (75f4 <z_set_prio+0x124>)
    758e:	4812      	ldr	r0, [pc, #72]	; (75d8 <z_set_prio+0x108>)
    7590:	23b9      	movs	r3, #185	; 0xb9
    7592:	f001 fcca 	bl	8f2a <assert_print>
    7596:	490d      	ldr	r1, [pc, #52]	; (75cc <z_set_prio+0xfc>)
    7598:	4817      	ldr	r0, [pc, #92]	; (75f8 <z_set_prio+0x128>)
    759a:	f001 fcc6 	bl	8f2a <assert_print>
    759e:	480c      	ldr	r0, [pc, #48]	; (75d0 <z_set_prio+0x100>)
    75a0:	21b9      	movs	r1, #185	; 0xb9
    75a2:	f001 fcbb 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    75a6:	f386 8811 	msr	BASEPRI, r6
    75aa:	f3bf 8f6f 	isb	sy
}
    75ae:	4620      	mov	r0, r4
    75b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    75b2:	428b      	cmp	r3, r1
    75b4:	d002      	beq.n	75bc <z_set_prio+0xec>
    75b6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    75b8:	2b00      	cmp	r3, #0
    75ba:	d1d3      	bne.n	7564 <z_set_prio+0x94>
	node->prev = tail;
    75bc:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    75c0:	600c      	str	r4, [r1, #0]
	list->tail = node;
    75c2:	6254      	str	r4, [r2, #36]	; 0x24
}
    75c4:	e7d9      	b.n	757a <z_set_prio+0xaa>
			thread->base.prio = prio;
    75c6:	73a5      	strb	r5, [r4, #14]
    75c8:	2400      	movs	r4, #0
    75ca:	e7da      	b.n	7582 <z_set_prio+0xb2>
    75cc:	20000c70 	.word	0x20000c70
    75d0:	0000a38e 	.word	0x0000a38e
    75d4:	0000a3e7 	.word	0x0000a3e7
    75d8:	00009eb7 	.word	0x00009eb7
    75dc:	0000a3fc 	.word	0x0000a3fc
    75e0:	20000c5c 	.word	0x20000c5c
    75e4:	20000400 	.word	0x20000400
    75e8:	0000b8f8 	.word	0x0000b8f8
    75ec:	0000b8d6 	.word	0x0000b8d6
    75f0:	20000c3c 	.word	0x20000c3c
    75f4:	0000a3bb 	.word	0x0000a3bb
    75f8:	0000a3d2 	.word	0x0000a3d2

000075fc <z_impl_k_thread_suspend>:
{
    75fc:	b570      	push	{r4, r5, r6, lr}
    75fe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7600:	3018      	adds	r0, #24
    7602:	f000 fced 	bl	7fe0 <z_abort_timeout>
	__asm__ volatile(
    7606:	f04f 0340 	mov.w	r3, #64	; 0x40
    760a:	f3ef 8611 	mrs	r6, BASEPRI
    760e:	f383 8812 	msr	BASEPRI_MAX, r3
    7612:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7616:	4825      	ldr	r0, [pc, #148]	; (76ac <z_impl_k_thread_suspend+0xb0>)
    7618:	f7fe ff92 	bl	6540 <z_spin_lock_valid>
    761c:	b968      	cbnz	r0, 763a <z_impl_k_thread_suspend+0x3e>
    761e:	4a24      	ldr	r2, [pc, #144]	; (76b0 <z_impl_k_thread_suspend+0xb4>)
    7620:	4924      	ldr	r1, [pc, #144]	; (76b4 <z_impl_k_thread_suspend+0xb8>)
    7622:	4825      	ldr	r0, [pc, #148]	; (76b8 <z_impl_k_thread_suspend+0xbc>)
    7624:	238e      	movs	r3, #142	; 0x8e
    7626:	f001 fc80 	bl	8f2a <assert_print>
    762a:	4920      	ldr	r1, [pc, #128]	; (76ac <z_impl_k_thread_suspend+0xb0>)
    762c:	4823      	ldr	r0, [pc, #140]	; (76bc <z_impl_k_thread_suspend+0xc0>)
    762e:	f001 fc7c 	bl	8f2a <assert_print>
    7632:	481f      	ldr	r0, [pc, #124]	; (76b0 <z_impl_k_thread_suspend+0xb4>)
    7634:	218e      	movs	r1, #142	; 0x8e
    7636:	f001 fc71 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    763a:	481c      	ldr	r0, [pc, #112]	; (76ac <z_impl_k_thread_suspend+0xb0>)
    763c:	f7fe ff9e 	bl	657c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7640:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    7644:	7b63      	ldrb	r3, [r4, #13]
    7646:	2a00      	cmp	r2, #0
    7648:	da06      	bge.n	7658 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    764a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    764e:	481c      	ldr	r0, [pc, #112]	; (76c0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7650:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7652:	4621      	mov	r1, r4
    7654:	f7ff fbcc 	bl	6df0 <z_priq_dumb_remove>
		update_cache(thread == _current);
    7658:	4d1a      	ldr	r5, [pc, #104]	; (76c4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    765a:	7b63      	ldrb	r3, [r4, #13]
    765c:	68a8      	ldr	r0, [r5, #8]
    765e:	f043 0310 	orr.w	r3, r3, #16
    7662:	7363      	strb	r3, [r4, #13]
    7664:	1b03      	subs	r3, r0, r4
    7666:	4258      	negs	r0, r3
    7668:	4158      	adcs	r0, r3
    766a:	f7ff fc05 	bl	6e78 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    766e:	480f      	ldr	r0, [pc, #60]	; (76ac <z_impl_k_thread_suspend+0xb0>)
    7670:	f7fe ff74 	bl	655c <z_spin_unlock_valid>
    7674:	b968      	cbnz	r0, 7692 <z_impl_k_thread_suspend+0x96>
    7676:	4a0e      	ldr	r2, [pc, #56]	; (76b0 <z_impl_k_thread_suspend+0xb4>)
    7678:	4913      	ldr	r1, [pc, #76]	; (76c8 <z_impl_k_thread_suspend+0xcc>)
    767a:	480f      	ldr	r0, [pc, #60]	; (76b8 <z_impl_k_thread_suspend+0xbc>)
    767c:	23b9      	movs	r3, #185	; 0xb9
    767e:	f001 fc54 	bl	8f2a <assert_print>
    7682:	490a      	ldr	r1, [pc, #40]	; (76ac <z_impl_k_thread_suspend+0xb0>)
    7684:	4811      	ldr	r0, [pc, #68]	; (76cc <z_impl_k_thread_suspend+0xd0>)
    7686:	f001 fc50 	bl	8f2a <assert_print>
    768a:	4809      	ldr	r0, [pc, #36]	; (76b0 <z_impl_k_thread_suspend+0xb4>)
    768c:	21b9      	movs	r1, #185	; 0xb9
    768e:	f001 fc45 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7692:	f386 8811 	msr	BASEPRI, r6
    7696:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    769a:	68ab      	ldr	r3, [r5, #8]
    769c:	42a3      	cmp	r3, r4
    769e:	d103      	bne.n	76a8 <z_impl_k_thread_suspend+0xac>
}
    76a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    76a4:	f002 b887 	b.w	97b6 <z_reschedule_unlocked>
}
    76a8:	bd70      	pop	{r4, r5, r6, pc}
    76aa:	bf00      	nop
    76ac:	20000c70 	.word	0x20000c70
    76b0:	0000a38e 	.word	0x0000a38e
    76b4:	0000a3e7 	.word	0x0000a3e7
    76b8:	00009eb7 	.word	0x00009eb7
    76bc:	0000a3fc 	.word	0x0000a3fc
    76c0:	20000c5c 	.word	0x20000c5c
    76c4:	20000c3c 	.word	0x20000c3c
    76c8:	0000a3bb 	.word	0x0000a3bb
    76cc:	0000a3d2 	.word	0x0000a3d2

000076d0 <k_sched_unlock>:
{
    76d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    76d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    76d6:	f3ef 8511 	mrs	r5, BASEPRI
    76da:	f383 8812 	msr	BASEPRI_MAX, r3
    76de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76e2:	482d      	ldr	r0, [pc, #180]	; (7798 <k_sched_unlock+0xc8>)
    76e4:	f7fe ff2c 	bl	6540 <z_spin_lock_valid>
    76e8:	b968      	cbnz	r0, 7706 <k_sched_unlock+0x36>
    76ea:	4a2c      	ldr	r2, [pc, #176]	; (779c <k_sched_unlock+0xcc>)
    76ec:	492c      	ldr	r1, [pc, #176]	; (77a0 <k_sched_unlock+0xd0>)
    76ee:	482d      	ldr	r0, [pc, #180]	; (77a4 <k_sched_unlock+0xd4>)
    76f0:	238e      	movs	r3, #142	; 0x8e
    76f2:	f001 fc1a 	bl	8f2a <assert_print>
    76f6:	4928      	ldr	r1, [pc, #160]	; (7798 <k_sched_unlock+0xc8>)
    76f8:	482b      	ldr	r0, [pc, #172]	; (77a8 <k_sched_unlock+0xd8>)
    76fa:	f001 fc16 	bl	8f2a <assert_print>
    76fe:	4827      	ldr	r0, [pc, #156]	; (779c <k_sched_unlock+0xcc>)
    7700:	218e      	movs	r1, #142	; 0x8e
    7702:	f001 fc0b 	bl	8f1c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    7706:	4c29      	ldr	r4, [pc, #164]	; (77ac <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7708:	4823      	ldr	r0, [pc, #140]	; (7798 <k_sched_unlock+0xc8>)
    770a:	f7fe ff37 	bl	657c <z_spin_lock_set_owner>
    770e:	68a3      	ldr	r3, [r4, #8]
    7710:	7bdb      	ldrb	r3, [r3, #15]
    7712:	b973      	cbnz	r3, 7732 <k_sched_unlock+0x62>
    7714:	4926      	ldr	r1, [pc, #152]	; (77b0 <k_sched_unlock+0xe0>)
    7716:	4a27      	ldr	r2, [pc, #156]	; (77b4 <k_sched_unlock+0xe4>)
    7718:	4822      	ldr	r0, [pc, #136]	; (77a4 <k_sched_unlock+0xd4>)
    771a:	f240 33bb 	movw	r3, #955	; 0x3bb
    771e:	f001 fc04 	bl	8f2a <assert_print>
    7722:	4825      	ldr	r0, [pc, #148]	; (77b8 <k_sched_unlock+0xe8>)
    7724:	f001 fc01 	bl	8f2a <assert_print>
    7728:	4822      	ldr	r0, [pc, #136]	; (77b4 <k_sched_unlock+0xe4>)
    772a:	f240 31bb 	movw	r1, #955	; 0x3bb
    772e:	f001 fbf5 	bl	8f1c <assert_post_action>
    7732:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7736:	b173      	cbz	r3, 7756 <k_sched_unlock+0x86>
    7738:	4920      	ldr	r1, [pc, #128]	; (77bc <k_sched_unlock+0xec>)
    773a:	4a1e      	ldr	r2, [pc, #120]	; (77b4 <k_sched_unlock+0xe4>)
    773c:	4819      	ldr	r0, [pc, #100]	; (77a4 <k_sched_unlock+0xd4>)
    773e:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    7742:	f001 fbf2 	bl	8f2a <assert_print>
    7746:	481c      	ldr	r0, [pc, #112]	; (77b8 <k_sched_unlock+0xe8>)
    7748:	f001 fbef 	bl	8f2a <assert_print>
    774c:	4819      	ldr	r0, [pc, #100]	; (77b4 <k_sched_unlock+0xe4>)
    774e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7752:	f001 fbe3 	bl	8f1c <assert_post_action>
		++_current->base.sched_locked;
    7756:	68a2      	ldr	r2, [r4, #8]
    7758:	7bd3      	ldrb	r3, [r2, #15]
    775a:	3301      	adds	r3, #1
		update_cache(0);
    775c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    775e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7760:	f7ff fb8a 	bl	6e78 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7764:	480c      	ldr	r0, [pc, #48]	; (7798 <k_sched_unlock+0xc8>)
    7766:	f7fe fef9 	bl	655c <z_spin_unlock_valid>
    776a:	b968      	cbnz	r0, 7788 <k_sched_unlock+0xb8>
    776c:	4a0b      	ldr	r2, [pc, #44]	; (779c <k_sched_unlock+0xcc>)
    776e:	4914      	ldr	r1, [pc, #80]	; (77c0 <k_sched_unlock+0xf0>)
    7770:	480c      	ldr	r0, [pc, #48]	; (77a4 <k_sched_unlock+0xd4>)
    7772:	23b9      	movs	r3, #185	; 0xb9
    7774:	f001 fbd9 	bl	8f2a <assert_print>
    7778:	4907      	ldr	r1, [pc, #28]	; (7798 <k_sched_unlock+0xc8>)
    777a:	4812      	ldr	r0, [pc, #72]	; (77c4 <k_sched_unlock+0xf4>)
    777c:	f001 fbd5 	bl	8f2a <assert_print>
    7780:	4806      	ldr	r0, [pc, #24]	; (779c <k_sched_unlock+0xcc>)
    7782:	21b9      	movs	r1, #185	; 0xb9
    7784:	f001 fbca 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7788:	f385 8811 	msr	BASEPRI, r5
    778c:	f3bf 8f6f 	isb	sy
}
    7790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7794:	f002 b80f 	b.w	97b6 <z_reschedule_unlocked>
    7798:	20000c70 	.word	0x20000c70
    779c:	0000a38e 	.word	0x0000a38e
    77a0:	0000a3e7 	.word	0x0000a3e7
    77a4:	00009eb7 	.word	0x00009eb7
    77a8:	0000a3fc 	.word	0x0000a3fc
    77ac:	20000c3c 	.word	0x20000c3c
    77b0:	0000b957 	.word	0x0000b957
    77b4:	0000b8d6 	.word	0x0000b8d6
    77b8:	0000b834 	.word	0x0000b834
    77bc:	0000b6fe 	.word	0x0000b6fe
    77c0:	0000a3bb 	.word	0x0000a3bb
    77c4:	0000a3d2 	.word	0x0000a3d2

000077c8 <z_unpend1_no_timeout>:
{
    77c8:	b538      	push	{r3, r4, r5, lr}
    77ca:	4604      	mov	r4, r0
	__asm__ volatile(
    77cc:	f04f 0340 	mov.w	r3, #64	; 0x40
    77d0:	f3ef 8511 	mrs	r5, BASEPRI
    77d4:	f383 8812 	msr	BASEPRI_MAX, r3
    77d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77dc:	4819      	ldr	r0, [pc, #100]	; (7844 <z_unpend1_no_timeout+0x7c>)
    77de:	f7fe feaf 	bl	6540 <z_spin_lock_valid>
    77e2:	b968      	cbnz	r0, 7800 <z_unpend1_no_timeout+0x38>
    77e4:	4a18      	ldr	r2, [pc, #96]	; (7848 <z_unpend1_no_timeout+0x80>)
    77e6:	4919      	ldr	r1, [pc, #100]	; (784c <z_unpend1_no_timeout+0x84>)
    77e8:	4819      	ldr	r0, [pc, #100]	; (7850 <z_unpend1_no_timeout+0x88>)
    77ea:	238e      	movs	r3, #142	; 0x8e
    77ec:	f001 fb9d 	bl	8f2a <assert_print>
    77f0:	4914      	ldr	r1, [pc, #80]	; (7844 <z_unpend1_no_timeout+0x7c>)
    77f2:	4818      	ldr	r0, [pc, #96]	; (7854 <z_unpend1_no_timeout+0x8c>)
    77f4:	f001 fb99 	bl	8f2a <assert_print>
    77f8:	4813      	ldr	r0, [pc, #76]	; (7848 <z_unpend1_no_timeout+0x80>)
    77fa:	218e      	movs	r1, #142	; 0x8e
    77fc:	f001 fb8e 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    7800:	4810      	ldr	r0, [pc, #64]	; (7844 <z_unpend1_no_timeout+0x7c>)
    7802:	f7fe febb 	bl	657c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7806:	4620      	mov	r0, r4
    7808:	f001 ffdf 	bl	97ca <z_priq_dumb_best>
		if (thread != NULL) {
    780c:	4604      	mov	r4, r0
    780e:	b108      	cbz	r0, 7814 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7810:	f7ff fb10 	bl	6e34 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7814:	480b      	ldr	r0, [pc, #44]	; (7844 <z_unpend1_no_timeout+0x7c>)
    7816:	f7fe fea1 	bl	655c <z_spin_unlock_valid>
    781a:	b968      	cbnz	r0, 7838 <z_unpend1_no_timeout+0x70>
    781c:	4a0a      	ldr	r2, [pc, #40]	; (7848 <z_unpend1_no_timeout+0x80>)
    781e:	490e      	ldr	r1, [pc, #56]	; (7858 <z_unpend1_no_timeout+0x90>)
    7820:	480b      	ldr	r0, [pc, #44]	; (7850 <z_unpend1_no_timeout+0x88>)
    7822:	23b9      	movs	r3, #185	; 0xb9
    7824:	f001 fb81 	bl	8f2a <assert_print>
    7828:	4906      	ldr	r1, [pc, #24]	; (7844 <z_unpend1_no_timeout+0x7c>)
    782a:	480c      	ldr	r0, [pc, #48]	; (785c <z_unpend1_no_timeout+0x94>)
    782c:	f001 fb7d 	bl	8f2a <assert_print>
    7830:	4805      	ldr	r0, [pc, #20]	; (7848 <z_unpend1_no_timeout+0x80>)
    7832:	21b9      	movs	r1, #185	; 0xb9
    7834:	f001 fb72 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7838:	f385 8811 	msr	BASEPRI, r5
    783c:	f3bf 8f6f 	isb	sy
}
    7840:	4620      	mov	r0, r4
    7842:	bd38      	pop	{r3, r4, r5, pc}
    7844:	20000c70 	.word	0x20000c70
    7848:	0000a38e 	.word	0x0000a38e
    784c:	0000a3e7 	.word	0x0000a3e7
    7850:	00009eb7 	.word	0x00009eb7
    7854:	0000a3fc 	.word	0x0000a3fc
    7858:	0000a3bb 	.word	0x0000a3bb
    785c:	0000a3d2 	.word	0x0000a3d2

00007860 <z_unpend_first_thread>:
{
    7860:	b538      	push	{r3, r4, r5, lr}
    7862:	4604      	mov	r4, r0
	__asm__ volatile(
    7864:	f04f 0340 	mov.w	r3, #64	; 0x40
    7868:	f3ef 8511 	mrs	r5, BASEPRI
    786c:	f383 8812 	msr	BASEPRI_MAX, r3
    7870:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7874:	481b      	ldr	r0, [pc, #108]	; (78e4 <z_unpend_first_thread+0x84>)
    7876:	f7fe fe63 	bl	6540 <z_spin_lock_valid>
    787a:	b968      	cbnz	r0, 7898 <z_unpend_first_thread+0x38>
    787c:	4a1a      	ldr	r2, [pc, #104]	; (78e8 <z_unpend_first_thread+0x88>)
    787e:	491b      	ldr	r1, [pc, #108]	; (78ec <z_unpend_first_thread+0x8c>)
    7880:	481b      	ldr	r0, [pc, #108]	; (78f0 <z_unpend_first_thread+0x90>)
    7882:	238e      	movs	r3, #142	; 0x8e
    7884:	f001 fb51 	bl	8f2a <assert_print>
    7888:	4916      	ldr	r1, [pc, #88]	; (78e4 <z_unpend_first_thread+0x84>)
    788a:	481a      	ldr	r0, [pc, #104]	; (78f4 <z_unpend_first_thread+0x94>)
    788c:	f001 fb4d 	bl	8f2a <assert_print>
    7890:	4815      	ldr	r0, [pc, #84]	; (78e8 <z_unpend_first_thread+0x88>)
    7892:	218e      	movs	r1, #142	; 0x8e
    7894:	f001 fb42 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    7898:	4812      	ldr	r0, [pc, #72]	; (78e4 <z_unpend_first_thread+0x84>)
    789a:	f7fe fe6f 	bl	657c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    789e:	4620      	mov	r0, r4
    78a0:	f001 ff93 	bl	97ca <z_priq_dumb_best>
		if (thread != NULL) {
    78a4:	4604      	mov	r4, r0
    78a6:	b128      	cbz	r0, 78b4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    78a8:	f7ff fac4 	bl	6e34 <unpend_thread_no_timeout>
    78ac:	f104 0018 	add.w	r0, r4, #24
    78b0:	f000 fb96 	bl	7fe0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78b4:	480b      	ldr	r0, [pc, #44]	; (78e4 <z_unpend_first_thread+0x84>)
    78b6:	f7fe fe51 	bl	655c <z_spin_unlock_valid>
    78ba:	b968      	cbnz	r0, 78d8 <z_unpend_first_thread+0x78>
    78bc:	4a0a      	ldr	r2, [pc, #40]	; (78e8 <z_unpend_first_thread+0x88>)
    78be:	490e      	ldr	r1, [pc, #56]	; (78f8 <z_unpend_first_thread+0x98>)
    78c0:	480b      	ldr	r0, [pc, #44]	; (78f0 <z_unpend_first_thread+0x90>)
    78c2:	23b9      	movs	r3, #185	; 0xb9
    78c4:	f001 fb31 	bl	8f2a <assert_print>
    78c8:	4906      	ldr	r1, [pc, #24]	; (78e4 <z_unpend_first_thread+0x84>)
    78ca:	480c      	ldr	r0, [pc, #48]	; (78fc <z_unpend_first_thread+0x9c>)
    78cc:	f001 fb2d 	bl	8f2a <assert_print>
    78d0:	4805      	ldr	r0, [pc, #20]	; (78e8 <z_unpend_first_thread+0x88>)
    78d2:	21b9      	movs	r1, #185	; 0xb9
    78d4:	f001 fb22 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    78d8:	f385 8811 	msr	BASEPRI, r5
    78dc:	f3bf 8f6f 	isb	sy
}
    78e0:	4620      	mov	r0, r4
    78e2:	bd38      	pop	{r3, r4, r5, pc}
    78e4:	20000c70 	.word	0x20000c70
    78e8:	0000a38e 	.word	0x0000a38e
    78ec:	0000a3e7 	.word	0x0000a3e7
    78f0:	00009eb7 	.word	0x00009eb7
    78f4:	0000a3fc 	.word	0x0000a3fc
    78f8:	0000a3bb 	.word	0x0000a3bb
    78fc:	0000a3d2 	.word	0x0000a3d2

00007900 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7900:	4b04      	ldr	r3, [pc, #16]	; (7914 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7902:	2100      	movs	r1, #0
    7904:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7908:	e9c3 2208 	strd	r2, r2, [r3, #32]
    790c:	4608      	mov	r0, r1
    790e:	f7ff b909 	b.w	6b24 <k_sched_time_slice_set>
    7912:	bf00      	nop
    7914:	20000c3c 	.word	0x20000c3c

00007918 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    791a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    791e:	b173      	cbz	r3, 793e <z_impl_k_yield+0x26>
    7920:	493f      	ldr	r1, [pc, #252]	; (7a20 <z_impl_k_yield+0x108>)
    7922:	4a40      	ldr	r2, [pc, #256]	; (7a24 <z_impl_k_yield+0x10c>)
    7924:	4840      	ldr	r0, [pc, #256]	; (7a28 <z_impl_k_yield+0x110>)
    7926:	f240 5332 	movw	r3, #1330	; 0x532
    792a:	f001 fafe 	bl	8f2a <assert_print>
    792e:	483f      	ldr	r0, [pc, #252]	; (7a2c <z_impl_k_yield+0x114>)
    7930:	f001 fafb 	bl	8f2a <assert_print>
    7934:	483b      	ldr	r0, [pc, #236]	; (7a24 <z_impl_k_yield+0x10c>)
    7936:	f240 5132 	movw	r1, #1330	; 0x532
    793a:	f001 faef 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    793e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7942:	f3ef 8611 	mrs	r6, BASEPRI
    7946:	f383 8812 	msr	BASEPRI_MAX, r3
    794a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    794e:	4838      	ldr	r0, [pc, #224]	; (7a30 <z_impl_k_yield+0x118>)
    7950:	f7fe fdf6 	bl	6540 <z_spin_lock_valid>
    7954:	b968      	cbnz	r0, 7972 <z_impl_k_yield+0x5a>
    7956:	4a37      	ldr	r2, [pc, #220]	; (7a34 <z_impl_k_yield+0x11c>)
    7958:	4937      	ldr	r1, [pc, #220]	; (7a38 <z_impl_k_yield+0x120>)
    795a:	4833      	ldr	r0, [pc, #204]	; (7a28 <z_impl_k_yield+0x110>)
    795c:	238e      	movs	r3, #142	; 0x8e
    795e:	f001 fae4 	bl	8f2a <assert_print>
    7962:	4933      	ldr	r1, [pc, #204]	; (7a30 <z_impl_k_yield+0x118>)
    7964:	4835      	ldr	r0, [pc, #212]	; (7a3c <z_impl_k_yield+0x124>)
    7966:	f001 fae0 	bl	8f2a <assert_print>
    796a:	4832      	ldr	r0, [pc, #200]	; (7a34 <z_impl_k_yield+0x11c>)
    796c:	218e      	movs	r1, #142	; 0x8e
    796e:	f001 fad5 	bl	8f1c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7972:	4d33      	ldr	r5, [pc, #204]	; (7a40 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    7974:	482e      	ldr	r0, [pc, #184]	; (7a30 <z_impl_k_yield+0x118>)
    7976:	f7fe fe01 	bl	657c <z_spin_lock_set_owner>
    797a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    797c:	7b4b      	ldrb	r3, [r1, #13]
    797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7982:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7984:	f105 0020 	add.w	r0, r5, #32
    7988:	f7ff fa32 	bl	6df0 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    798c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    798e:	7b63      	ldrb	r3, [r4, #13]
    7990:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7994:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7996:	4b2b      	ldr	r3, [pc, #172]	; (7a44 <z_impl_k_yield+0x12c>)
    7998:	429c      	cmp	r4, r3
    799a:	d109      	bne.n	79b0 <z_impl_k_yield+0x98>
    799c:	492a      	ldr	r1, [pc, #168]	; (7a48 <z_impl_k_yield+0x130>)
    799e:	4822      	ldr	r0, [pc, #136]	; (7a28 <z_impl_k_yield+0x110>)
    79a0:	4a20      	ldr	r2, [pc, #128]	; (7a24 <z_impl_k_yield+0x10c>)
    79a2:	23ba      	movs	r3, #186	; 0xba
    79a4:	f001 fac1 	bl	8f2a <assert_print>
    79a8:	481e      	ldr	r0, [pc, #120]	; (7a24 <z_impl_k_yield+0x10c>)
    79aa:	21ba      	movs	r1, #186	; 0xba
    79ac:	f001 fab6 	bl	8f1c <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    79b0:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79b4:	4925      	ldr	r1, [pc, #148]	; (7a4c <z_impl_k_yield+0x134>)
    79b6:	428b      	cmp	r3, r1
    79b8:	d02c      	beq.n	7a14 <z_impl_k_yield+0xfc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    79ba:	b35b      	cbz	r3, 7a14 <z_impl_k_yield+0xfc>
	int32_t b1 = thread_1->base.prio;
    79bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    79c0:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    79c4:	42b8      	cmp	r0, r7
    79c6:	d020      	beq.n	7a0a <z_impl_k_yield+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    79c8:	4287      	cmp	r7, r0
    79ca:	dd1e      	ble.n	7a0a <z_impl_k_yield+0xf2>
	sys_dnode_t *const prev = successor->prev;
    79cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    79ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    79d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    79d4:	605c      	str	r4, [r3, #4]
	update_cache(1);
    79d6:	2001      	movs	r0, #1
    79d8:	f7ff fa4e 	bl	6e78 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79dc:	4814      	ldr	r0, [pc, #80]	; (7a30 <z_impl_k_yield+0x118>)
    79de:	f7fe fdbd 	bl	655c <z_spin_unlock_valid>
    79e2:	b968      	cbnz	r0, 7a00 <z_impl_k_yield+0xe8>
    79e4:	4a13      	ldr	r2, [pc, #76]	; (7a34 <z_impl_k_yield+0x11c>)
    79e6:	491a      	ldr	r1, [pc, #104]	; (7a50 <z_impl_k_yield+0x138>)
    79e8:	480f      	ldr	r0, [pc, #60]	; (7a28 <z_impl_k_yield+0x110>)
    79ea:	23d0      	movs	r3, #208	; 0xd0
    79ec:	f001 fa9d 	bl	8f2a <assert_print>
    79f0:	490f      	ldr	r1, [pc, #60]	; (7a30 <z_impl_k_yield+0x118>)
    79f2:	4818      	ldr	r0, [pc, #96]	; (7a54 <z_impl_k_yield+0x13c>)
    79f4:	f001 fa99 	bl	8f2a <assert_print>
    79f8:	480e      	ldr	r0, [pc, #56]	; (7a34 <z_impl_k_yield+0x11c>)
    79fa:	21d0      	movs	r1, #208	; 0xd0
    79fc:	f001 fa8e 	bl	8f1c <assert_post_action>
    7a00:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    7a02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7a06:	f7fb b9ef 	b.w	2de8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7a0a:	4293      	cmp	r3, r2
    7a0c:	d002      	beq.n	7a14 <z_impl_k_yield+0xfc>
    7a0e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7a10:	2b00      	cmp	r3, #0
    7a12:	d1d5      	bne.n	79c0 <z_impl_k_yield+0xa8>
	node->prev = tail;
    7a14:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    7a18:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7a1a:	626c      	str	r4, [r5, #36]	; 0x24
}
    7a1c:	e7db      	b.n	79d6 <z_impl_k_yield+0xbe>
    7a1e:	bf00      	nop
    7a20:	0000b6fe 	.word	0x0000b6fe
    7a24:	0000b8d6 	.word	0x0000b8d6
    7a28:	00009eb7 	.word	0x00009eb7
    7a2c:	0000b834 	.word	0x0000b834
    7a30:	20000c70 	.word	0x20000c70
    7a34:	0000a38e 	.word	0x0000a38e
    7a38:	0000a3e7 	.word	0x0000a3e7
    7a3c:	0000a3fc 	.word	0x0000a3fc
    7a40:	20000c3c 	.word	0x20000c3c
    7a44:	20000400 	.word	0x20000400
    7a48:	0000b8f8 	.word	0x0000b8f8
    7a4c:	20000c5c 	.word	0x20000c5c
    7a50:	0000a3bb 	.word	0x0000a3bb
    7a54:	0000a3d2 	.word	0x0000a3d2

00007a58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a5c:	4605      	mov	r5, r0
    7a5e:	460e      	mov	r6, r1
    7a60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7a64:	b173      	cbz	r3, 7a84 <z_tick_sleep+0x2c>
    7a66:	4941      	ldr	r1, [pc, #260]	; (7b6c <z_tick_sleep+0x114>)
    7a68:	4a41      	ldr	r2, [pc, #260]	; (7b70 <z_tick_sleep+0x118>)
    7a6a:	4842      	ldr	r0, [pc, #264]	; (7b74 <z_tick_sleep+0x11c>)
    7a6c:	f240 534e 	movw	r3, #1358	; 0x54e
    7a70:	f001 fa5b 	bl	8f2a <assert_print>
    7a74:	4840      	ldr	r0, [pc, #256]	; (7b78 <z_tick_sleep+0x120>)
    7a76:	f001 fa58 	bl	8f2a <assert_print>
    7a7a:	483d      	ldr	r0, [pc, #244]	; (7b70 <z_tick_sleep+0x118>)
    7a7c:	f240 514e 	movw	r1, #1358	; 0x54e
    7a80:	f001 fa4c 	bl	8f1c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7a84:	ea55 0306 	orrs.w	r3, r5, r6
    7a88:	d103      	bne.n	7a92 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    7a8a:	f7ff ff45 	bl	7918 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    7a8e:	2000      	movs	r0, #0
    7a90:	e066      	b.n	7b60 <z_tick_sleep+0x108>
	if (Z_TICK_ABS(ticks) <= 0) {
    7a92:	1caa      	adds	r2, r5, #2
    7a94:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    7a98:	db64      	blt.n	7b64 <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7a9a:	f001 fe9c 	bl	97d6 <sys_clock_tick_get_32>
    7a9e:	1944      	adds	r4, r0, r5
    7aa0:	f04f 0340 	mov.w	r3, #64	; 0x40
    7aa4:	f3ef 8811 	mrs	r8, BASEPRI
    7aa8:	f383 8812 	msr	BASEPRI_MAX, r3
    7aac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ab0:	4832      	ldr	r0, [pc, #200]	; (7b7c <z_tick_sleep+0x124>)
    7ab2:	f7fe fd45 	bl	6540 <z_spin_lock_valid>
    7ab6:	b968      	cbnz	r0, 7ad4 <z_tick_sleep+0x7c>
    7ab8:	4a31      	ldr	r2, [pc, #196]	; (7b80 <z_tick_sleep+0x128>)
    7aba:	4932      	ldr	r1, [pc, #200]	; (7b84 <z_tick_sleep+0x12c>)
    7abc:	482d      	ldr	r0, [pc, #180]	; (7b74 <z_tick_sleep+0x11c>)
    7abe:	238e      	movs	r3, #142	; 0x8e
    7ac0:	f001 fa33 	bl	8f2a <assert_print>
    7ac4:	492d      	ldr	r1, [pc, #180]	; (7b7c <z_tick_sleep+0x124>)
    7ac6:	4830      	ldr	r0, [pc, #192]	; (7b88 <z_tick_sleep+0x130>)
    7ac8:	f001 fa2f 	bl	8f2a <assert_print>
    7acc:	482c      	ldr	r0, [pc, #176]	; (7b80 <z_tick_sleep+0x128>)
    7ace:	218e      	movs	r1, #142	; 0x8e
    7ad0:	f001 fa24 	bl	8f1c <assert_post_action>
	pending_current = _current;
    7ad4:	4f2d      	ldr	r7, [pc, #180]	; (7b8c <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    7ad6:	4829      	ldr	r0, [pc, #164]	; (7b7c <z_tick_sleep+0x124>)
    7ad8:	f7fe fd50 	bl	657c <z_spin_lock_set_owner>
    7adc:	4b2c      	ldr	r3, [pc, #176]	; (7b90 <z_tick_sleep+0x138>)
    7ade:	68b8      	ldr	r0, [r7, #8]
    7ae0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7ae2:	f7ff fc0d 	bl	7300 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7ae6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7ae8:	492a      	ldr	r1, [pc, #168]	; (7b94 <z_tick_sleep+0x13c>)
    7aea:	462a      	mov	r2, r5
    7aec:	4633      	mov	r3, r6
    7aee:	3018      	adds	r0, #24
    7af0:	f000 f9ae 	bl	7e50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7af4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7af6:	4821      	ldr	r0, [pc, #132]	; (7b7c <z_tick_sleep+0x124>)
    7af8:	7b53      	ldrb	r3, [r2, #13]
    7afa:	f043 0310 	orr.w	r3, r3, #16
    7afe:	7353      	strb	r3, [r2, #13]
    7b00:	f7fe fd2c 	bl	655c <z_spin_unlock_valid>
    7b04:	b968      	cbnz	r0, 7b22 <z_tick_sleep+0xca>
    7b06:	4a1e      	ldr	r2, [pc, #120]	; (7b80 <z_tick_sleep+0x128>)
    7b08:	4923      	ldr	r1, [pc, #140]	; (7b98 <z_tick_sleep+0x140>)
    7b0a:	481a      	ldr	r0, [pc, #104]	; (7b74 <z_tick_sleep+0x11c>)
    7b0c:	23d0      	movs	r3, #208	; 0xd0
    7b0e:	f001 fa0c 	bl	8f2a <assert_print>
    7b12:	491a      	ldr	r1, [pc, #104]	; (7b7c <z_tick_sleep+0x124>)
    7b14:	4821      	ldr	r0, [pc, #132]	; (7b9c <z_tick_sleep+0x144>)
    7b16:	f001 fa08 	bl	8f2a <assert_print>
    7b1a:	4819      	ldr	r0, [pc, #100]	; (7b80 <z_tick_sleep+0x128>)
    7b1c:	21d0      	movs	r1, #208	; 0xd0
    7b1e:	f001 f9fd 	bl	8f1c <assert_post_action>
    7b22:	4640      	mov	r0, r8
    7b24:	f7fb f960 	bl	2de8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    7b28:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7b2a:	7b5b      	ldrb	r3, [r3, #13]
    7b2c:	06db      	lsls	r3, r3, #27
    7b2e:	d50e      	bpl.n	7b4e <z_tick_sleep+0xf6>
    7b30:	491b      	ldr	r1, [pc, #108]	; (7ba0 <z_tick_sleep+0x148>)
    7b32:	4a0f      	ldr	r2, [pc, #60]	; (7b70 <z_tick_sleep+0x118>)
    7b34:	480f      	ldr	r0, [pc, #60]	; (7b74 <z_tick_sleep+0x11c>)
    7b36:	f240 536f 	movw	r3, #1391	; 0x56f
    7b3a:	f001 f9f6 	bl	8f2a <assert_print>
    7b3e:	480e      	ldr	r0, [pc, #56]	; (7b78 <z_tick_sleep+0x120>)
    7b40:	f001 f9f3 	bl	8f2a <assert_print>
    7b44:	480a      	ldr	r0, [pc, #40]	; (7b70 <z_tick_sleep+0x118>)
    7b46:	f240 516f 	movw	r1, #1391	; 0x56f
    7b4a:	f001 f9e7 	bl	8f1c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7b4e:	f001 fe42 	bl	97d6 <sys_clock_tick_get_32>
    7b52:	1a20      	subs	r0, r4, r0
    7b54:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7b58:	2801      	cmp	r0, #1
    7b5a:	f173 0300 	sbcs.w	r3, r3, #0
    7b5e:	db96      	blt.n	7a8e <z_tick_sleep+0x36>
}
    7b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7b64:	f06f 0401 	mvn.w	r4, #1
    7b68:	1b64      	subs	r4, r4, r5
    7b6a:	e799      	b.n	7aa0 <z_tick_sleep+0x48>
    7b6c:	0000b6fe 	.word	0x0000b6fe
    7b70:	0000b8d6 	.word	0x0000b8d6
    7b74:	00009eb7 	.word	0x00009eb7
    7b78:	0000b834 	.word	0x0000b834
    7b7c:	20000c70 	.word	0x20000c70
    7b80:	0000a38e 	.word	0x0000a38e
    7b84:	0000a3e7 	.word	0x0000a3e7
    7b88:	0000a3fc 	.word	0x0000a3fc
    7b8c:	20000c3c 	.word	0x20000c3c
    7b90:	20000c6c 	.word	0x20000c6c
    7b94:	0000724d 	.word	0x0000724d
    7b98:	0000a3bb 	.word	0x0000a3bb
    7b9c:	0000a3d2 	.word	0x0000a3d2
    7ba0:	0000b988 	.word	0x0000b988

00007ba4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7ba4:	b538      	push	{r3, r4, r5, lr}
    7ba6:	4605      	mov	r5, r0
    7ba8:	460c      	mov	r4, r1
    7baa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7bae:	b173      	cbz	r3, 7bce <z_impl_k_sleep+0x2a>
    7bb0:	4913      	ldr	r1, [pc, #76]	; (7c00 <z_impl_k_sleep+0x5c>)
    7bb2:	4a14      	ldr	r2, [pc, #80]	; (7c04 <z_impl_k_sleep+0x60>)
    7bb4:	4814      	ldr	r0, [pc, #80]	; (7c08 <z_impl_k_sleep+0x64>)
    7bb6:	f240 537e 	movw	r3, #1406	; 0x57e
    7bba:	f001 f9b6 	bl	8f2a <assert_print>
    7bbe:	4813      	ldr	r0, [pc, #76]	; (7c0c <z_impl_k_sleep+0x68>)
    7bc0:	f001 f9b3 	bl	8f2a <assert_print>
    7bc4:	480f      	ldr	r0, [pc, #60]	; (7c04 <z_impl_k_sleep+0x60>)
    7bc6:	f240 517e 	movw	r1, #1406	; 0x57e
    7bca:	f001 f9a7 	bl	8f1c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7bce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    7bd2:	bf08      	it	eq
    7bd4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    7bd8:	d106      	bne.n	7be8 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    7bda:	4b0d      	ldr	r3, [pc, #52]	; (7c10 <z_impl_k_sleep+0x6c>)
    7bdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7bde:	f7ff fd0d 	bl	75fc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7be6:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7be8:	4628      	mov	r0, r5
    7bea:	4621      	mov	r1, r4
    7bec:	f7ff ff34 	bl	7a58 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    7bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7bf4:	fb80 0303 	smull	r0, r3, r0, r3
    7bf8:	0bc0      	lsrs	r0, r0, #15
    7bfa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    7bfe:	e7f2      	b.n	7be6 <z_impl_k_sleep+0x42>
    7c00:	0000b6fe 	.word	0x0000b6fe
    7c04:	0000b8d6 	.word	0x0000b8d6
    7c08:	00009eb7 	.word	0x00009eb7
    7c0c:	0000b834 	.word	0x0000b834
    7c10:	20000c3c 	.word	0x20000c3c

00007c14 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7c14:	4b01      	ldr	r3, [pc, #4]	; (7c1c <z_impl_z_current_get+0x8>)
    7c16:	6898      	ldr	r0, [r3, #8]
    7c18:	4770      	bx	lr
    7c1a:	bf00      	nop
    7c1c:	20000c3c 	.word	0x20000c3c

00007c20 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c24:	4604      	mov	r4, r0
    7c26:	f04f 0340 	mov.w	r3, #64	; 0x40
    7c2a:	f3ef 8611 	mrs	r6, BASEPRI
    7c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    7c32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c36:	4848      	ldr	r0, [pc, #288]	; (7d58 <z_thread_abort+0x138>)
    7c38:	f7fe fc82 	bl	6540 <z_spin_lock_valid>
    7c3c:	b968      	cbnz	r0, 7c5a <z_thread_abort+0x3a>
    7c3e:	4a47      	ldr	r2, [pc, #284]	; (7d5c <z_thread_abort+0x13c>)
    7c40:	4947      	ldr	r1, [pc, #284]	; (7d60 <z_thread_abort+0x140>)
    7c42:	4848      	ldr	r0, [pc, #288]	; (7d64 <z_thread_abort+0x144>)
    7c44:	238e      	movs	r3, #142	; 0x8e
    7c46:	f001 f970 	bl	8f2a <assert_print>
    7c4a:	4943      	ldr	r1, [pc, #268]	; (7d58 <z_thread_abort+0x138>)
    7c4c:	4846      	ldr	r0, [pc, #280]	; (7d68 <z_thread_abort+0x148>)
    7c4e:	f001 f96c 	bl	8f2a <assert_print>
    7c52:	4842      	ldr	r0, [pc, #264]	; (7d5c <z_thread_abort+0x13c>)
    7c54:	218e      	movs	r1, #142	; 0x8e
    7c56:	f001 f961 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    7c5a:	483f      	ldr	r0, [pc, #252]	; (7d58 <z_thread_abort+0x138>)
    7c5c:	f7fe fc8e 	bl	657c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7c60:	7b63      	ldrb	r3, [r4, #13]
    7c62:	071a      	lsls	r2, r3, #28
    7c64:	d517      	bpl.n	7c96 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c66:	483c      	ldr	r0, [pc, #240]	; (7d58 <z_thread_abort+0x138>)
    7c68:	f7fe fc78 	bl	655c <z_spin_unlock_valid>
    7c6c:	b968      	cbnz	r0, 7c8a <z_thread_abort+0x6a>
    7c6e:	4a3b      	ldr	r2, [pc, #236]	; (7d5c <z_thread_abort+0x13c>)
    7c70:	493e      	ldr	r1, [pc, #248]	; (7d6c <z_thread_abort+0x14c>)
    7c72:	483c      	ldr	r0, [pc, #240]	; (7d64 <z_thread_abort+0x144>)
    7c74:	23b9      	movs	r3, #185	; 0xb9
    7c76:	f001 f958 	bl	8f2a <assert_print>
    7c7a:	4937      	ldr	r1, [pc, #220]	; (7d58 <z_thread_abort+0x138>)
    7c7c:	483c      	ldr	r0, [pc, #240]	; (7d70 <z_thread_abort+0x150>)
    7c7e:	f001 f954 	bl	8f2a <assert_print>
    7c82:	4836      	ldr	r0, [pc, #216]	; (7d5c <z_thread_abort+0x13c>)
    7c84:	21b9      	movs	r1, #185	; 0xb9
    7c86:	f001 f949 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7c8a:	f386 8811 	msr	BASEPRI, r6
    7c8e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7c96:	f023 0220 	bic.w	r2, r3, #32
    7c9a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7c9e:	09d2      	lsrs	r2, r2, #7
    7ca0:	d142      	bne.n	7d28 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7ca2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    7ca4:	68a3      	ldr	r3, [r4, #8]
    7ca6:	b113      	cbz	r3, 7cae <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    7ca8:	4620      	mov	r0, r4
    7caa:	f7ff f8c3 	bl	6e34 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7cae:	f104 0018 	add.w	r0, r4, #24
    7cb2:	f000 f995 	bl	7fe0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7cb6:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7cba:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7cbe:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cc0:	42bd      	cmp	r5, r7
    7cc2:	d001      	beq.n	7cc8 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7cc4:	2d00      	cmp	r5, #0
    7cc6:	d139      	bne.n	7d3c <z_thread_abort+0x11c>
		update_cache(1);
    7cc8:	2001      	movs	r0, #1
    7cca:	f7ff f8d5 	bl	6e78 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7cce:	4b29      	ldr	r3, [pc, #164]	; (7d74 <z_thread_abort+0x154>)
    7cd0:	689b      	ldr	r3, [r3, #8]
    7cd2:	42a3      	cmp	r3, r4
    7cd4:	d1c7      	bne.n	7c66 <z_thread_abort+0x46>
    7cd6:	f3ef 8305 	mrs	r3, IPSR
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d1c3      	bne.n	7c66 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cde:	481e      	ldr	r0, [pc, #120]	; (7d58 <z_thread_abort+0x138>)
    7ce0:	f7fe fc3c 	bl	655c <z_spin_unlock_valid>
    7ce4:	b968      	cbnz	r0, 7d02 <z_thread_abort+0xe2>
    7ce6:	4a1d      	ldr	r2, [pc, #116]	; (7d5c <z_thread_abort+0x13c>)
    7ce8:	4920      	ldr	r1, [pc, #128]	; (7d6c <z_thread_abort+0x14c>)
    7cea:	481e      	ldr	r0, [pc, #120]	; (7d64 <z_thread_abort+0x144>)
    7cec:	23d0      	movs	r3, #208	; 0xd0
    7cee:	f001 f91c 	bl	8f2a <assert_print>
    7cf2:	4919      	ldr	r1, [pc, #100]	; (7d58 <z_thread_abort+0x138>)
    7cf4:	481e      	ldr	r0, [pc, #120]	; (7d70 <z_thread_abort+0x150>)
    7cf6:	f001 f918 	bl	8f2a <assert_print>
    7cfa:	4818      	ldr	r0, [pc, #96]	; (7d5c <z_thread_abort+0x13c>)
    7cfc:	21d0      	movs	r1, #208	; 0xd0
    7cfe:	f001 f90d 	bl	8f1c <assert_post_action>
    7d02:	4630      	mov	r0, r6
    7d04:	f7fb f870 	bl	2de8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7d08:	4a1b      	ldr	r2, [pc, #108]	; (7d78 <z_thread_abort+0x158>)
    7d0a:	491c      	ldr	r1, [pc, #112]	; (7d7c <z_thread_abort+0x15c>)
    7d0c:	4815      	ldr	r0, [pc, #84]	; (7d64 <z_thread_abort+0x144>)
    7d0e:	f240 63ac 	movw	r3, #1708	; 0x6ac
    7d12:	f001 f90a 	bl	8f2a <assert_print>
    7d16:	481a      	ldr	r0, [pc, #104]	; (7d80 <z_thread_abort+0x160>)
    7d18:	f001 f907 	bl	8f2a <assert_print>
    7d1c:	4816      	ldr	r0, [pc, #88]	; (7d78 <z_thread_abort+0x158>)
    7d1e:	f240 61ac 	movw	r1, #1708	; 0x6ac
    7d22:	f001 f8fb 	bl	8f1c <assert_post_action>
    7d26:	e79e      	b.n	7c66 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d28:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    7d2c:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    7d30:	4814      	ldr	r0, [pc, #80]	; (7d84 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d32:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7d34:	4621      	mov	r1, r4
    7d36:	f7ff f85b 	bl	6df0 <z_priq_dumb_remove>
}
    7d3a:	e7b3      	b.n	7ca4 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    7d3c:	4628      	mov	r0, r5
    7d3e:	f7ff f879 	bl	6e34 <unpend_thread_no_timeout>
    7d42:	f105 0018 	add.w	r0, r5, #24
    7d46:	f000 f94b 	bl	7fe0 <z_abort_timeout>
    7d4a:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7d4e:	4628      	mov	r0, r5
    7d50:	f7ff f994 	bl	707c <ready_thread>
    7d54:	e7b3      	b.n	7cbe <z_thread_abort+0x9e>
    7d56:	bf00      	nop
    7d58:	20000c70 	.word	0x20000c70
    7d5c:	0000a38e 	.word	0x0000a38e
    7d60:	0000a3e7 	.word	0x0000a3e7
    7d64:	00009eb7 	.word	0x00009eb7
    7d68:	0000a3fc 	.word	0x0000a3fc
    7d6c:	0000a3bb 	.word	0x0000a3bb
    7d70:	0000a3d2 	.word	0x0000a3d2
    7d74:	20000c3c 	.word	0x20000c3c
    7d78:	0000b8d6 	.word	0x0000b8d6
    7d7c:	0000a05a 	.word	0x0000a05a
    7d80:	0000b9c8 	.word	0x0000b9c8
    7d84:	20000c5c 	.word	0x20000c5c

00007d88 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7d88:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7d8a:	4806      	ldr	r0, [pc, #24]	; (7da4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7d8c:	4a06      	ldr	r2, [pc, #24]	; (7da8 <z_data_copy+0x20>)
    7d8e:	4907      	ldr	r1, [pc, #28]	; (7dac <z_data_copy+0x24>)
    7d90:	1a12      	subs	r2, r2, r0
    7d92:	f001 fcbc 	bl	970e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7d9a:	4a05      	ldr	r2, [pc, #20]	; (7db0 <z_data_copy+0x28>)
    7d9c:	4905      	ldr	r1, [pc, #20]	; (7db4 <z_data_copy+0x2c>)
    7d9e:	4806      	ldr	r0, [pc, #24]	; (7db8 <z_data_copy+0x30>)
    7da0:	f001 bcb5 	b.w	970e <z_early_memcpy>
    7da4:	20000000 	.word	0x20000000
    7da8:	2000025c 	.word	0x2000025c
    7dac:	0000ba9c 	.word	0x0000ba9c
    7db0:	00000000 	.word	0x00000000
    7db4:	0000ba9c 	.word	0x0000ba9c
    7db8:	20000000 	.word	0x20000000

00007dbc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7dbc:	4b03      	ldr	r3, [pc, #12]	; (7dcc <elapsed+0x10>)
    7dbe:	681b      	ldr	r3, [r3, #0]
    7dc0:	b90b      	cbnz	r3, 7dc6 <elapsed+0xa>
    7dc2:	f7fd b833 	b.w	4e2c <sys_clock_elapsed>
}
    7dc6:	2000      	movs	r0, #0
    7dc8:	4770      	bx	lr
    7dca:	bf00      	nop
    7dcc:	20000c7c 	.word	0x20000c7c

00007dd0 <next_timeout>:
	return list->head == list;
    7dd0:	4b10      	ldr	r3, [pc, #64]	; (7e14 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    7dd2:	b510      	push	{r4, lr}
    7dd4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7dd6:	429c      	cmp	r4, r3
    7dd8:	bf08      	it	eq
    7dda:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7ddc:	f7ff ffee 	bl	7dbc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7de0:	b1a4      	cbz	r4, 7e0c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7de2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    7de6:	1a1b      	subs	r3, r3, r0
    7de8:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    7dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7df0:	f172 0100 	sbcs.w	r1, r2, #0
    7df4:	da0a      	bge.n	7e0c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7df6:	2a00      	cmp	r2, #0
    7df8:	bfac      	ite	ge
    7dfa:	4618      	movge	r0, r3
    7dfc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7dfe:	4b06      	ldr	r3, [pc, #24]	; (7e18 <next_timeout+0x48>)
    7e00:	691b      	ldr	r3, [r3, #16]
    7e02:	b113      	cbz	r3, 7e0a <next_timeout+0x3a>
    7e04:	4298      	cmp	r0, r3
    7e06:	bfa8      	it	ge
    7e08:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7e0a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    7e0c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7e10:	e7f5      	b.n	7dfe <next_timeout+0x2e>
    7e12:	bf00      	nop
    7e14:	20000174 	.word	0x20000174
    7e18:	20000c3c 	.word	0x20000c3c

00007e1c <remove_timeout>:
{
    7e1c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    7e1e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7e20:	b168      	cbz	r0, 7e3e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    7e22:	4a0a      	ldr	r2, [pc, #40]	; (7e4c <remove_timeout+0x30>)
    7e24:	6852      	ldr	r2, [r2, #4]
    7e26:	4290      	cmp	r0, r2
    7e28:	d009      	beq.n	7e3e <remove_timeout+0x22>
	if (next(t) != NULL) {
    7e2a:	b143      	cbz	r3, 7e3e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7e2c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7e30:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7e34:	1912      	adds	r2, r2, r4
    7e36:	eb41 0105 	adc.w	r1, r1, r5
    7e3a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7e3e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7e40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7e42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7e44:	2300      	movs	r3, #0
	node->prev = NULL;
    7e46:	e9c0 3300 	strd	r3, r3, [r0]
}
    7e4a:	bd30      	pop	{r4, r5, pc}
    7e4c:	20000174 	.word	0x20000174

00007e50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7e54:	bf08      	it	eq
    7e56:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e5e:	4604      	mov	r4, r0
    7e60:	460f      	mov	r7, r1
    7e62:	4691      	mov	r9, r2
    7e64:	461d      	mov	r5, r3
    7e66:	4616      	mov	r6, r2
    7e68:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7e6a:	f000 809c 	beq.w	7fa6 <z_add_timeout+0x156>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7e6e:	6803      	ldr	r3, [r0, #0]
    7e70:	b163      	cbz	r3, 7e8c <z_add_timeout+0x3c>
    7e72:	494e      	ldr	r1, [pc, #312]	; (7fac <z_add_timeout+0x15c>)
    7e74:	4a4e      	ldr	r2, [pc, #312]	; (7fb0 <z_add_timeout+0x160>)
    7e76:	484f      	ldr	r0, [pc, #316]	; (7fb4 <z_add_timeout+0x164>)
    7e78:	2363      	movs	r3, #99	; 0x63
    7e7a:	f001 f856 	bl	8f2a <assert_print>
    7e7e:	484e      	ldr	r0, [pc, #312]	; (7fb8 <z_add_timeout+0x168>)
    7e80:	f001 f853 	bl	8f2a <assert_print>
    7e84:	484a      	ldr	r0, [pc, #296]	; (7fb0 <z_add_timeout+0x160>)
    7e86:	2163      	movs	r1, #99	; 0x63
    7e88:	f001 f848 	bl	8f1c <assert_post_action>
	to->fn = fn;
    7e8c:	60a7      	str	r7, [r4, #8]
	__asm__ volatile(
    7e8e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7e92:	f3ef 8711 	mrs	r7, BASEPRI
    7e96:	f383 8812 	msr	BASEPRI_MAX, r3
    7e9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e9e:	4847      	ldr	r0, [pc, #284]	; (7fbc <z_add_timeout+0x16c>)
    7ea0:	f7fe fb4e 	bl	6540 <z_spin_lock_valid>
    7ea4:	b968      	cbnz	r0, 7ec2 <z_add_timeout+0x72>
    7ea6:	4a46      	ldr	r2, [pc, #280]	; (7fc0 <z_add_timeout+0x170>)
    7ea8:	4946      	ldr	r1, [pc, #280]	; (7fc4 <z_add_timeout+0x174>)
    7eaa:	4842      	ldr	r0, [pc, #264]	; (7fb4 <z_add_timeout+0x164>)
    7eac:	238e      	movs	r3, #142	; 0x8e
    7eae:	f001 f83c 	bl	8f2a <assert_print>
    7eb2:	4942      	ldr	r1, [pc, #264]	; (7fbc <z_add_timeout+0x16c>)
    7eb4:	4844      	ldr	r0, [pc, #272]	; (7fc8 <z_add_timeout+0x178>)
    7eb6:	f001 f838 	bl	8f2a <assert_print>
    7eba:	4841      	ldr	r0, [pc, #260]	; (7fc0 <z_add_timeout+0x170>)
    7ebc:	218e      	movs	r1, #142	; 0x8e
    7ebe:	f001 f82d 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    7ec2:	483e      	ldr	r0, [pc, #248]	; (7fbc <z_add_timeout+0x16c>)
    7ec4:	f7fe fb5a 	bl	657c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7ec8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7ecc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    7ed0:	da1f      	bge.n	7f12 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7ed2:	493e      	ldr	r1, [pc, #248]	; (7fcc <z_add_timeout+0x17c>)
    7ed4:	e9d1 2000 	ldrd	r2, r0, [r1]
    7ed8:	f06f 0301 	mvn.w	r3, #1
    7edc:	1a9b      	subs	r3, r3, r2
    7ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ee2:	eb62 0000 	sbc.w	r0, r2, r0
    7ee6:	1b9e      	subs	r6, r3, r6
    7ee8:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    7eec:	2e01      	cmp	r6, #1
    7eee:	f170 0300 	sbcs.w	r3, r0, #0
    7ef2:	da01      	bge.n	7ef8 <z_add_timeout+0xa8>
    7ef4:	2601      	movs	r6, #1
    7ef6:	2000      	movs	r0, #0
	return list->head == list;
    7ef8:	4a35      	ldr	r2, [pc, #212]	; (7fd0 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    7efa:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7efe:	4293      	cmp	r3, r2
    7f00:	e9c4 6004 	strd	r6, r0, [r4, #16]
    7f04:	d116      	bne.n	7f34 <z_add_timeout+0xe4>
	node->prev = tail;
    7f06:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    7f0a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    7f0e:	6054      	str	r4, [r2, #4]
}
    7f10:	e024      	b.n	7f5c <z_add_timeout+0x10c>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7f12:	f7ff ff53 	bl	7dbc <elapsed>
    7f16:	3601      	adds	r6, #1
    7f18:	f145 0500 	adc.w	r5, r5, #0
    7f1c:	1836      	adds	r6, r6, r0
    7f1e:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    7f22:	e7e9      	b.n	7ef8 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7f24:	1a09      	subs	r1, r1, r0
    7f26:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
    7f2a:	459c      	cmp	ip, r3
    7f2c:	e9c4 1504 	strd	r1, r5, [r4, #16]
    7f30:	d0e9      	beq.n	7f06 <z_add_timeout+0xb6>
    7f32:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7f34:	2b00      	cmp	r3, #0
    7f36:	d0e6      	beq.n	7f06 <z_add_timeout+0xb6>
			if (t->dticks > to->dticks) {
    7f38:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
    7f3c:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    7f40:	4281      	cmp	r1, r0
    7f42:	eb75 0e06 	sbcs.w	lr, r5, r6
    7f46:	daed      	bge.n	7f24 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    7f48:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    7f4a:	6859      	ldr	r1, [r3, #4]
    7f4c:	eb66 0605 	sbc.w	r6, r6, r5
    7f50:	e9c3 0604 	strd	r0, r6, [r3, #16]
	node->next = successor;
    7f54:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7f58:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7f5a:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7f5c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f5e:	4293      	cmp	r3, r2
    7f60:	d00b      	beq.n	7f7a <z_add_timeout+0x12a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7f62:	429c      	cmp	r4, r3
    7f64:	d109      	bne.n	7f7a <z_add_timeout+0x12a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7f66:	f7ff ff33 	bl	7dd0 <next_timeout>

			if (next_time == 0 ||
    7f6a:	b118      	cbz	r0, 7f74 <z_add_timeout+0x124>
			    _current_cpu->slice_ticks != next_time) {
    7f6c:	4b19      	ldr	r3, [pc, #100]	; (7fd4 <z_add_timeout+0x184>)
			if (next_time == 0 ||
    7f6e:	691b      	ldr	r3, [r3, #16]
    7f70:	4283      	cmp	r3, r0
    7f72:	d002      	beq.n	7f7a <z_add_timeout+0x12a>
				sys_clock_set_timeout(next_time, false);
    7f74:	2100      	movs	r1, #0
    7f76:	f7fc ff27 	bl	4dc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f7a:	4810      	ldr	r0, [pc, #64]	; (7fbc <z_add_timeout+0x16c>)
    7f7c:	f7fe faee 	bl	655c <z_spin_unlock_valid>
    7f80:	b968      	cbnz	r0, 7f9e <z_add_timeout+0x14e>
    7f82:	4a0f      	ldr	r2, [pc, #60]	; (7fc0 <z_add_timeout+0x170>)
    7f84:	4914      	ldr	r1, [pc, #80]	; (7fd8 <z_add_timeout+0x188>)
    7f86:	480b      	ldr	r0, [pc, #44]	; (7fb4 <z_add_timeout+0x164>)
    7f88:	23b9      	movs	r3, #185	; 0xb9
    7f8a:	f000 ffce 	bl	8f2a <assert_print>
    7f8e:	490b      	ldr	r1, [pc, #44]	; (7fbc <z_add_timeout+0x16c>)
    7f90:	4812      	ldr	r0, [pc, #72]	; (7fdc <z_add_timeout+0x18c>)
    7f92:	f000 ffca 	bl	8f2a <assert_print>
    7f96:	480a      	ldr	r0, [pc, #40]	; (7fc0 <z_add_timeout+0x170>)
    7f98:	21b9      	movs	r1, #185	; 0xb9
    7f9a:	f000 ffbf 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    7f9e:	f387 8811 	msr	BASEPRI, r7
    7fa2:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7faa:	bf00      	nop
    7fac:	0000ba0e 	.word	0x0000ba0e
    7fb0:	0000b9ea 	.word	0x0000b9ea
    7fb4:	00009eb7 	.word	0x00009eb7
    7fb8:	0000b834 	.word	0x0000b834
    7fbc:	20000c80 	.word	0x20000c80
    7fc0:	0000a38e 	.word	0x0000a38e
    7fc4:	0000a3e7 	.word	0x0000a3e7
    7fc8:	0000a3fc 	.word	0x0000a3fc
    7fcc:	20000500 	.word	0x20000500
    7fd0:	20000174 	.word	0x20000174
    7fd4:	20000c3c 	.word	0x20000c3c
    7fd8:	0000a3bb 	.word	0x0000a3bb
    7fdc:	0000a3d2 	.word	0x0000a3d2

00007fe0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7fe0:	b538      	push	{r3, r4, r5, lr}
    7fe2:	4604      	mov	r4, r0
	__asm__ volatile(
    7fe4:	f04f 0340 	mov.w	r3, #64	; 0x40
    7fe8:	f3ef 8511 	mrs	r5, BASEPRI
    7fec:	f383 8812 	msr	BASEPRI_MAX, r3
    7ff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ff4:	481a      	ldr	r0, [pc, #104]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7ff6:	f7fe faa3 	bl	6540 <z_spin_lock_valid>
    7ffa:	b968      	cbnz	r0, 8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7ffc:	4a19      	ldr	r2, [pc, #100]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    7ffe:	491a      	ldr	r1, [pc, #104]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    8000:	481a      	ldr	r0, [pc, #104]	; (806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    8002:	238e      	movs	r3, #142	; 0x8e
    8004:	f000 ff91 	bl	8f2a <assert_print>
    8008:	4915      	ldr	r1, [pc, #84]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    800a:	4819      	ldr	r0, [pc, #100]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    800c:	f000 ff8d 	bl	8f2a <assert_print>
    8010:	4814      	ldr	r0, [pc, #80]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    8012:	218e      	movs	r1, #142	; 0x8e
    8014:	f000 ff82 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    8018:	4811      	ldr	r0, [pc, #68]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    801a:	f7fe faaf 	bl	657c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    801e:	6823      	ldr	r3, [r4, #0]
    8020:	b1db      	cbz	r3, 805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
			remove_timeout(to);
    8022:	4620      	mov	r0, r4
    8024:	f7ff fefa 	bl	7e1c <remove_timeout>
			ret = 0;
    8028:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    802a:	480d      	ldr	r0, [pc, #52]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    802c:	f7fe fa96 	bl	655c <z_spin_unlock_valid>
    8030:	b968      	cbnz	r0, 804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    8032:	4a0c      	ldr	r2, [pc, #48]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    8034:	490f      	ldr	r1, [pc, #60]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    8036:	480d      	ldr	r0, [pc, #52]	; (806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    8038:	23b9      	movs	r3, #185	; 0xb9
    803a:	f000 ff76 	bl	8f2a <assert_print>
    803e:	4908      	ldr	r1, [pc, #32]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    8040:	480d      	ldr	r0, [pc, #52]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8042:	f000 ff72 	bl	8f2a <assert_print>
    8046:	4807      	ldr	r0, [pc, #28]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    8048:	21b9      	movs	r1, #185	; 0xb9
    804a:	f000 ff67 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    804e:	f385 8811 	msr	BASEPRI, r5
    8052:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8056:	4620      	mov	r0, r4
    8058:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    805a:	f06f 0415 	mvn.w	r4, #21
    805e:	e7e4      	b.n	802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    8060:	20000c80 	.word	0x20000c80
    8064:	0000a38e 	.word	0x0000a38e
    8068:	0000a3e7 	.word	0x0000a3e7
    806c:	00009eb7 	.word	0x00009eb7
    8070:	0000a3fc 	.word	0x0000a3fc
    8074:	0000a3bb 	.word	0x0000a3bb
    8078:	0000a3d2 	.word	0x0000a3d2

0000807c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    807c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    807e:	f04f 0340 	mov.w	r3, #64	; 0x40
    8082:	f3ef 8511 	mrs	r5, BASEPRI
    8086:	f383 8812 	msr	BASEPRI_MAX, r3
    808a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    808e:	4818      	ldr	r0, [pc, #96]	; (80f0 <z_get_next_timeout_expiry+0x74>)
    8090:	f7fe fa56 	bl	6540 <z_spin_lock_valid>
    8094:	b968      	cbnz	r0, 80b2 <z_get_next_timeout_expiry+0x36>
    8096:	4a17      	ldr	r2, [pc, #92]	; (80f4 <z_get_next_timeout_expiry+0x78>)
    8098:	4917      	ldr	r1, [pc, #92]	; (80f8 <z_get_next_timeout_expiry+0x7c>)
    809a:	4818      	ldr	r0, [pc, #96]	; (80fc <z_get_next_timeout_expiry+0x80>)
    809c:	238e      	movs	r3, #142	; 0x8e
    809e:	f000 ff44 	bl	8f2a <assert_print>
    80a2:	4913      	ldr	r1, [pc, #76]	; (80f0 <z_get_next_timeout_expiry+0x74>)
    80a4:	4816      	ldr	r0, [pc, #88]	; (8100 <z_get_next_timeout_expiry+0x84>)
    80a6:	f000 ff40 	bl	8f2a <assert_print>
    80aa:	4812      	ldr	r0, [pc, #72]	; (80f4 <z_get_next_timeout_expiry+0x78>)
    80ac:	218e      	movs	r1, #142	; 0x8e
    80ae:	f000 ff35 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    80b2:	480f      	ldr	r0, [pc, #60]	; (80f0 <z_get_next_timeout_expiry+0x74>)
    80b4:	f7fe fa62 	bl	657c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    80b8:	f7ff fe8a 	bl	7dd0 <next_timeout>
    80bc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80be:	480c      	ldr	r0, [pc, #48]	; (80f0 <z_get_next_timeout_expiry+0x74>)
    80c0:	f7fe fa4c 	bl	655c <z_spin_unlock_valid>
    80c4:	b968      	cbnz	r0, 80e2 <z_get_next_timeout_expiry+0x66>
    80c6:	4a0b      	ldr	r2, [pc, #44]	; (80f4 <z_get_next_timeout_expiry+0x78>)
    80c8:	490e      	ldr	r1, [pc, #56]	; (8104 <z_get_next_timeout_expiry+0x88>)
    80ca:	480c      	ldr	r0, [pc, #48]	; (80fc <z_get_next_timeout_expiry+0x80>)
    80cc:	23b9      	movs	r3, #185	; 0xb9
    80ce:	f000 ff2c 	bl	8f2a <assert_print>
    80d2:	4907      	ldr	r1, [pc, #28]	; (80f0 <z_get_next_timeout_expiry+0x74>)
    80d4:	480c      	ldr	r0, [pc, #48]	; (8108 <z_get_next_timeout_expiry+0x8c>)
    80d6:	f000 ff28 	bl	8f2a <assert_print>
    80da:	4806      	ldr	r0, [pc, #24]	; (80f4 <z_get_next_timeout_expiry+0x78>)
    80dc:	21b9      	movs	r1, #185	; 0xb9
    80de:	f000 ff1d 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    80e2:	f385 8811 	msr	BASEPRI, r5
    80e6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    80ea:	4620      	mov	r0, r4
    80ec:	bd38      	pop	{r3, r4, r5, pc}
    80ee:	bf00      	nop
    80f0:	20000c80 	.word	0x20000c80
    80f4:	0000a38e 	.word	0x0000a38e
    80f8:	0000a3e7 	.word	0x0000a3e7
    80fc:	00009eb7 	.word	0x00009eb7
    8100:	0000a3fc 	.word	0x0000a3fc
    8104:	0000a3bb 	.word	0x0000a3bb
    8108:	0000a3d2 	.word	0x0000a3d2

0000810c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    810c:	b570      	push	{r4, r5, r6, lr}
    810e:	4604      	mov	r4, r0
    8110:	460d      	mov	r5, r1
	__asm__ volatile(
    8112:	f04f 0340 	mov.w	r3, #64	; 0x40
    8116:	f3ef 8611 	mrs	r6, BASEPRI
    811a:	f383 8812 	msr	BASEPRI_MAX, r3
    811e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8122:	481b      	ldr	r0, [pc, #108]	; (8190 <z_set_timeout_expiry+0x84>)
    8124:	f7fe fa0c 	bl	6540 <z_spin_lock_valid>
    8128:	b968      	cbnz	r0, 8146 <z_set_timeout_expiry+0x3a>
    812a:	4a1a      	ldr	r2, [pc, #104]	; (8194 <z_set_timeout_expiry+0x88>)
    812c:	491a      	ldr	r1, [pc, #104]	; (8198 <z_set_timeout_expiry+0x8c>)
    812e:	481b      	ldr	r0, [pc, #108]	; (819c <z_set_timeout_expiry+0x90>)
    8130:	238e      	movs	r3, #142	; 0x8e
    8132:	f000 fefa 	bl	8f2a <assert_print>
    8136:	4916      	ldr	r1, [pc, #88]	; (8190 <z_set_timeout_expiry+0x84>)
    8138:	4819      	ldr	r0, [pc, #100]	; (81a0 <z_set_timeout_expiry+0x94>)
    813a:	f000 fef6 	bl	8f2a <assert_print>
    813e:	4815      	ldr	r0, [pc, #84]	; (8194 <z_set_timeout_expiry+0x88>)
    8140:	218e      	movs	r1, #142	; 0x8e
    8142:	f000 feeb 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    8146:	4812      	ldr	r0, [pc, #72]	; (8190 <z_set_timeout_expiry+0x84>)
    8148:	f7fe fa18 	bl	657c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    814c:	f7ff fe40 	bl	7dd0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8150:	2801      	cmp	r0, #1
    8152:	dd05      	ble.n	8160 <z_set_timeout_expiry+0x54>
    8154:	42a0      	cmp	r0, r4
    8156:	db03      	blt.n	8160 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8158:	4629      	mov	r1, r5
    815a:	4620      	mov	r0, r4
    815c:	f7fc fe34 	bl	4dc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8160:	480b      	ldr	r0, [pc, #44]	; (8190 <z_set_timeout_expiry+0x84>)
    8162:	f7fe f9fb 	bl	655c <z_spin_unlock_valid>
    8166:	b968      	cbnz	r0, 8184 <z_set_timeout_expiry+0x78>
    8168:	4a0a      	ldr	r2, [pc, #40]	; (8194 <z_set_timeout_expiry+0x88>)
    816a:	490e      	ldr	r1, [pc, #56]	; (81a4 <z_set_timeout_expiry+0x98>)
    816c:	480b      	ldr	r0, [pc, #44]	; (819c <z_set_timeout_expiry+0x90>)
    816e:	23b9      	movs	r3, #185	; 0xb9
    8170:	f000 fedb 	bl	8f2a <assert_print>
    8174:	4906      	ldr	r1, [pc, #24]	; (8190 <z_set_timeout_expiry+0x84>)
    8176:	480c      	ldr	r0, [pc, #48]	; (81a8 <z_set_timeout_expiry+0x9c>)
    8178:	f000 fed7 	bl	8f2a <assert_print>
    817c:	4805      	ldr	r0, [pc, #20]	; (8194 <z_set_timeout_expiry+0x88>)
    817e:	21b9      	movs	r1, #185	; 0xb9
    8180:	f000 fecc 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    8184:	f386 8811 	msr	BASEPRI, r6
    8188:	f3bf 8f6f 	isb	sy
		}
	}
}
    818c:	bd70      	pop	{r4, r5, r6, pc}
    818e:	bf00      	nop
    8190:	20000c80 	.word	0x20000c80
    8194:	0000a38e 	.word	0x0000a38e
    8198:	0000a3e7 	.word	0x0000a3e7
    819c:	00009eb7 	.word	0x00009eb7
    81a0:	0000a3fc 	.word	0x0000a3fc
    81a4:	0000a3bb 	.word	0x0000a3bb
    81a8:	0000a3d2 	.word	0x0000a3d2

000081ac <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    81ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    81b0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    81b2:	f7fe feeb 	bl	6f8c <z_time_slice>
	__asm__ volatile(
    81b6:	f04f 0340 	mov.w	r3, #64	; 0x40
    81ba:	f3ef 8511 	mrs	r5, BASEPRI
    81be:	f383 8812 	msr	BASEPRI_MAX, r3
    81c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81c6:	484c      	ldr	r0, [pc, #304]	; (82f8 <sys_clock_announce+0x14c>)
    81c8:	f7fe f9ba 	bl	6540 <z_spin_lock_valid>
    81cc:	b968      	cbnz	r0, 81ea <sys_clock_announce+0x3e>
    81ce:	4a4b      	ldr	r2, [pc, #300]	; (82fc <sys_clock_announce+0x150>)
    81d0:	494b      	ldr	r1, [pc, #300]	; (8300 <sys_clock_announce+0x154>)
    81d2:	484c      	ldr	r0, [pc, #304]	; (8304 <sys_clock_announce+0x158>)
    81d4:	238e      	movs	r3, #142	; 0x8e
    81d6:	f000 fea8 	bl	8f2a <assert_print>
    81da:	4947      	ldr	r1, [pc, #284]	; (82f8 <sys_clock_announce+0x14c>)
    81dc:	484a      	ldr	r0, [pc, #296]	; (8308 <sys_clock_announce+0x15c>)
    81de:	f000 fea4 	bl	8f2a <assert_print>
    81e2:	4846      	ldr	r0, [pc, #280]	; (82fc <sys_clock_announce+0x150>)
    81e4:	218e      	movs	r1, #142	; 0x8e
    81e6:	f000 fe99 	bl	8f1c <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    81ea:	4f48      	ldr	r7, [pc, #288]	; (830c <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    81ec:	4842      	ldr	r0, [pc, #264]	; (82f8 <sys_clock_announce+0x14c>)
	return list->head == list;
    81ee:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8310 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    81f2:	4e48      	ldr	r6, [pc, #288]	; (8314 <sys_clock_announce+0x168>)
    81f4:	f7fe f9c2 	bl	657c <z_spin_lock_set_owner>
	announce_remaining = ticks;
    81f8:	603c      	str	r4, [r7, #0]
    81fa:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    81fe:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8200:	4544      	cmp	r4, r8
		curr_tick += dt;
    8202:	e9d6 1e00 	ldrd	r1, lr, [r6]
    8206:	ea4f 70e2 	mov.w	r0, r2, asr #31
    820a:	d00b      	beq.n	8224 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    820c:	b154      	cbz	r4, 8224 <sys_clock_announce+0x78>
    820e:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    8212:	429a      	cmp	r2, r3
    8214:	eb70 090c 	sbcs.w	r9, r0, ip
    8218:	da28      	bge.n	826c <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    821a:	1a9b      	subs	r3, r3, r2
    821c:	eb6c 0c00 	sbc.w	ip, ip, r0
    8220:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    8224:	1851      	adds	r1, r2, r1
    8226:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    822a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    822c:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    8230:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8232:	f7ff fdcd 	bl	7dd0 <next_timeout>
    8236:	4621      	mov	r1, r4
    8238:	f7fc fdc6 	bl	4dc8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    823c:	482e      	ldr	r0, [pc, #184]	; (82f8 <sys_clock_announce+0x14c>)
    823e:	f7fe f98d 	bl	655c <z_spin_unlock_valid>
    8242:	b968      	cbnz	r0, 8260 <sys_clock_announce+0xb4>
    8244:	4a2d      	ldr	r2, [pc, #180]	; (82fc <sys_clock_announce+0x150>)
    8246:	4934      	ldr	r1, [pc, #208]	; (8318 <sys_clock_announce+0x16c>)
    8248:	482e      	ldr	r0, [pc, #184]	; (8304 <sys_clock_announce+0x158>)
    824a:	23b9      	movs	r3, #185	; 0xb9
    824c:	f000 fe6d 	bl	8f2a <assert_print>
    8250:	4929      	ldr	r1, [pc, #164]	; (82f8 <sys_clock_announce+0x14c>)
    8252:	4832      	ldr	r0, [pc, #200]	; (831c <sys_clock_announce+0x170>)
    8254:	f000 fe69 	bl	8f2a <assert_print>
    8258:	4828      	ldr	r0, [pc, #160]	; (82fc <sys_clock_announce+0x150>)
    825a:	21b9      	movs	r1, #185	; 0xb9
    825c:	f000 fe5e 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    8260:	f385 8811 	msr	BASEPRI, r5
    8264:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    826c:	1859      	adds	r1, r3, r1
    826e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    8272:	1ad3      	subs	r3, r2, r3
    8274:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    8276:	2200      	movs	r2, #0
    8278:	2300      	movs	r3, #0
		curr_tick += dt;
    827a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    827e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8282:	4620      	mov	r0, r4
    8284:	f7ff fdca 	bl	7e1c <remove_timeout>
    8288:	481b      	ldr	r0, [pc, #108]	; (82f8 <sys_clock_announce+0x14c>)
    828a:	f7fe f967 	bl	655c <z_spin_unlock_valid>
    828e:	b968      	cbnz	r0, 82ac <sys_clock_announce+0x100>
    8290:	4a1a      	ldr	r2, [pc, #104]	; (82fc <sys_clock_announce+0x150>)
    8292:	4921      	ldr	r1, [pc, #132]	; (8318 <sys_clock_announce+0x16c>)
    8294:	481b      	ldr	r0, [pc, #108]	; (8304 <sys_clock_announce+0x158>)
    8296:	23b9      	movs	r3, #185	; 0xb9
    8298:	f000 fe47 	bl	8f2a <assert_print>
    829c:	4916      	ldr	r1, [pc, #88]	; (82f8 <sys_clock_announce+0x14c>)
    829e:	481f      	ldr	r0, [pc, #124]	; (831c <sys_clock_announce+0x170>)
    82a0:	f000 fe43 	bl	8f2a <assert_print>
    82a4:	4815      	ldr	r0, [pc, #84]	; (82fc <sys_clock_announce+0x150>)
    82a6:	21b9      	movs	r1, #185	; 0xb9
    82a8:	f000 fe38 	bl	8f1c <assert_post_action>
    82ac:	f385 8811 	msr	BASEPRI, r5
    82b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    82b4:	68a3      	ldr	r3, [r4, #8]
    82b6:	4620      	mov	r0, r4
    82b8:	4798      	blx	r3
	__asm__ volatile(
    82ba:	f04f 0340 	mov.w	r3, #64	; 0x40
    82be:	f3ef 8511 	mrs	r5, BASEPRI
    82c2:	f383 8812 	msr	BASEPRI_MAX, r3
    82c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82ca:	480b      	ldr	r0, [pc, #44]	; (82f8 <sys_clock_announce+0x14c>)
    82cc:	f7fe f938 	bl	6540 <z_spin_lock_valid>
    82d0:	b968      	cbnz	r0, 82ee <sys_clock_announce+0x142>
    82d2:	4a0a      	ldr	r2, [pc, #40]	; (82fc <sys_clock_announce+0x150>)
    82d4:	490a      	ldr	r1, [pc, #40]	; (8300 <sys_clock_announce+0x154>)
    82d6:	480b      	ldr	r0, [pc, #44]	; (8304 <sys_clock_announce+0x158>)
    82d8:	238e      	movs	r3, #142	; 0x8e
    82da:	f000 fe26 	bl	8f2a <assert_print>
    82de:	4906      	ldr	r1, [pc, #24]	; (82f8 <sys_clock_announce+0x14c>)
    82e0:	4809      	ldr	r0, [pc, #36]	; (8308 <sys_clock_announce+0x15c>)
    82e2:	f000 fe22 	bl	8f2a <assert_print>
    82e6:	4805      	ldr	r0, [pc, #20]	; (82fc <sys_clock_announce+0x150>)
    82e8:	218e      	movs	r1, #142	; 0x8e
    82ea:	f000 fe17 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    82ee:	4802      	ldr	r0, [pc, #8]	; (82f8 <sys_clock_announce+0x14c>)
    82f0:	f7fe f944 	bl	657c <z_spin_lock_set_owner>
	return k;
    82f4:	e781      	b.n	81fa <sys_clock_announce+0x4e>
    82f6:	bf00      	nop
    82f8:	20000c80 	.word	0x20000c80
    82fc:	0000a38e 	.word	0x0000a38e
    8300:	0000a3e7 	.word	0x0000a3e7
    8304:	00009eb7 	.word	0x00009eb7
    8308:	0000a3fc 	.word	0x0000a3fc
    830c:	20000c7c 	.word	0x20000c7c
    8310:	20000174 	.word	0x20000174
    8314:	20000500 	.word	0x20000500
    8318:	0000a3bb 	.word	0x0000a3bb
    831c:	0000a3d2 	.word	0x0000a3d2

00008320 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8320:	b570      	push	{r4, r5, r6, lr}
    8322:	f04f 0340 	mov.w	r3, #64	; 0x40
    8326:	f3ef 8611 	mrs	r6, BASEPRI
    832a:	f383 8812 	msr	BASEPRI_MAX, r3
    832e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8332:	481b      	ldr	r0, [pc, #108]	; (83a0 <sys_clock_tick_get+0x80>)
    8334:	f7fe f904 	bl	6540 <z_spin_lock_valid>
    8338:	b968      	cbnz	r0, 8356 <sys_clock_tick_get+0x36>
    833a:	4a1a      	ldr	r2, [pc, #104]	; (83a4 <sys_clock_tick_get+0x84>)
    833c:	491a      	ldr	r1, [pc, #104]	; (83a8 <sys_clock_tick_get+0x88>)
    833e:	481b      	ldr	r0, [pc, #108]	; (83ac <sys_clock_tick_get+0x8c>)
    8340:	238e      	movs	r3, #142	; 0x8e
    8342:	f000 fdf2 	bl	8f2a <assert_print>
    8346:	4916      	ldr	r1, [pc, #88]	; (83a0 <sys_clock_tick_get+0x80>)
    8348:	4819      	ldr	r0, [pc, #100]	; (83b0 <sys_clock_tick_get+0x90>)
    834a:	f000 fdee 	bl	8f2a <assert_print>
    834e:	4815      	ldr	r0, [pc, #84]	; (83a4 <sys_clock_tick_get+0x84>)
    8350:	218e      	movs	r1, #142	; 0x8e
    8352:	f000 fde3 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    8356:	4812      	ldr	r0, [pc, #72]	; (83a0 <sys_clock_tick_get+0x80>)
    8358:	f7fe f910 	bl	657c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    835c:	f7fc fd66 	bl	4e2c <sys_clock_elapsed>
    8360:	4a14      	ldr	r2, [pc, #80]	; (83b4 <sys_clock_tick_get+0x94>)
    8362:	e9d2 4500 	ldrd	r4, r5, [r2]
    8366:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8368:	480d      	ldr	r0, [pc, #52]	; (83a0 <sys_clock_tick_get+0x80>)
    836a:	f145 0500 	adc.w	r5, r5, #0
    836e:	f7fe f8f5 	bl	655c <z_spin_unlock_valid>
    8372:	b968      	cbnz	r0, 8390 <sys_clock_tick_get+0x70>
    8374:	4a0b      	ldr	r2, [pc, #44]	; (83a4 <sys_clock_tick_get+0x84>)
    8376:	4910      	ldr	r1, [pc, #64]	; (83b8 <sys_clock_tick_get+0x98>)
    8378:	480c      	ldr	r0, [pc, #48]	; (83ac <sys_clock_tick_get+0x8c>)
    837a:	23b9      	movs	r3, #185	; 0xb9
    837c:	f000 fdd5 	bl	8f2a <assert_print>
    8380:	4907      	ldr	r1, [pc, #28]	; (83a0 <sys_clock_tick_get+0x80>)
    8382:	480e      	ldr	r0, [pc, #56]	; (83bc <sys_clock_tick_get+0x9c>)
    8384:	f000 fdd1 	bl	8f2a <assert_print>
    8388:	4806      	ldr	r0, [pc, #24]	; (83a4 <sys_clock_tick_get+0x84>)
    838a:	21b9      	movs	r1, #185	; 0xb9
    838c:	f000 fdc6 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    8390:	f386 8811 	msr	BASEPRI, r6
    8394:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8398:	4620      	mov	r0, r4
    839a:	4629      	mov	r1, r5
    839c:	bd70      	pop	{r4, r5, r6, pc}
    839e:	bf00      	nop
    83a0:	20000c80 	.word	0x20000c80
    83a4:	0000a38e 	.word	0x0000a38e
    83a8:	0000a3e7 	.word	0x0000a3e7
    83ac:	00009eb7 	.word	0x00009eb7
    83b0:	0000a3fc 	.word	0x0000a3fc
    83b4:	20000500 	.word	0x20000500
    83b8:	0000a3bb 	.word	0x0000a3bb
    83bc:	0000a3d2 	.word	0x0000a3d2

000083c0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    83c0:	b570      	push	{r4, r5, r6, lr}
    83c2:	4604      	mov	r4, r0
	__asm__ volatile(
    83c4:	f04f 0340 	mov.w	r3, #64	; 0x40
    83c8:	f3ef 8511 	mrs	r5, BASEPRI
    83cc:	f383 8812 	msr	BASEPRI_MAX, r3
    83d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83d4:	484d      	ldr	r0, [pc, #308]	; (850c <z_timer_expiration_handler+0x14c>)
    83d6:	f7fe f8b3 	bl	6540 <z_spin_lock_valid>
    83da:	b968      	cbnz	r0, 83f8 <z_timer_expiration_handler+0x38>
    83dc:	4a4c      	ldr	r2, [pc, #304]	; (8510 <z_timer_expiration_handler+0x150>)
    83de:	494d      	ldr	r1, [pc, #308]	; (8514 <z_timer_expiration_handler+0x154>)
    83e0:	484d      	ldr	r0, [pc, #308]	; (8518 <z_timer_expiration_handler+0x158>)
    83e2:	238e      	movs	r3, #142	; 0x8e
    83e4:	f000 fda1 	bl	8f2a <assert_print>
    83e8:	4948      	ldr	r1, [pc, #288]	; (850c <z_timer_expiration_handler+0x14c>)
    83ea:	484c      	ldr	r0, [pc, #304]	; (851c <z_timer_expiration_handler+0x15c>)
    83ec:	f000 fd9d 	bl	8f2a <assert_print>
    83f0:	4847      	ldr	r0, [pc, #284]	; (8510 <z_timer_expiration_handler+0x150>)
    83f2:	218e      	movs	r1, #142	; 0x8e
    83f4:	f000 fd92 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    83f8:	4844      	ldr	r0, [pc, #272]	; (850c <z_timer_expiration_handler+0x14c>)
    83fa:	f7fe f8bf 	bl	657c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    83fe:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    8402:	3301      	adds	r3, #1
    8404:	f142 0200 	adc.w	r2, r2, #0
    8408:	2b02      	cmp	r3, #2
    840a:	f172 0200 	sbcs.w	r2, r2, #0
    840e:	d305      	bcc.n	841c <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8410:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    8414:	4942      	ldr	r1, [pc, #264]	; (8520 <z_timer_expiration_handler+0x160>)
    8416:	4620      	mov	r0, r4
    8418:	f7ff fd1a 	bl	7e50 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    841c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    841e:	3301      	adds	r3, #1
    8420:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8422:	6a23      	ldr	r3, [r4, #32]
    8424:	2b00      	cmp	r3, #0
    8426:	d035      	beq.n	8494 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8428:	4838      	ldr	r0, [pc, #224]	; (850c <z_timer_expiration_handler+0x14c>)
    842a:	f7fe f897 	bl	655c <z_spin_unlock_valid>
    842e:	b968      	cbnz	r0, 844c <z_timer_expiration_handler+0x8c>
    8430:	4a37      	ldr	r2, [pc, #220]	; (8510 <z_timer_expiration_handler+0x150>)
    8432:	493c      	ldr	r1, [pc, #240]	; (8524 <z_timer_expiration_handler+0x164>)
    8434:	4838      	ldr	r0, [pc, #224]	; (8518 <z_timer_expiration_handler+0x158>)
    8436:	23b9      	movs	r3, #185	; 0xb9
    8438:	f000 fd77 	bl	8f2a <assert_print>
    843c:	4933      	ldr	r1, [pc, #204]	; (850c <z_timer_expiration_handler+0x14c>)
    843e:	483a      	ldr	r0, [pc, #232]	; (8528 <z_timer_expiration_handler+0x168>)
    8440:	f000 fd73 	bl	8f2a <assert_print>
    8444:	4832      	ldr	r0, [pc, #200]	; (8510 <z_timer_expiration_handler+0x150>)
    8446:	21b9      	movs	r1, #185	; 0xb9
    8448:	f000 fd68 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    844c:	f385 8811 	msr	BASEPRI, r5
    8450:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    8454:	6a23      	ldr	r3, [r4, #32]
    8456:	4620      	mov	r0, r4
    8458:	4798      	blx	r3
	__asm__ volatile(
    845a:	f04f 0340 	mov.w	r3, #64	; 0x40
    845e:	f3ef 8511 	mrs	r5, BASEPRI
    8462:	f383 8812 	msr	BASEPRI_MAX, r3
    8466:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    846a:	4828      	ldr	r0, [pc, #160]	; (850c <z_timer_expiration_handler+0x14c>)
    846c:	f7fe f868 	bl	6540 <z_spin_lock_valid>
    8470:	b968      	cbnz	r0, 848e <z_timer_expiration_handler+0xce>
    8472:	4a27      	ldr	r2, [pc, #156]	; (8510 <z_timer_expiration_handler+0x150>)
    8474:	4927      	ldr	r1, [pc, #156]	; (8514 <z_timer_expiration_handler+0x154>)
    8476:	4828      	ldr	r0, [pc, #160]	; (8518 <z_timer_expiration_handler+0x158>)
    8478:	238e      	movs	r3, #142	; 0x8e
    847a:	f000 fd56 	bl	8f2a <assert_print>
    847e:	4923      	ldr	r1, [pc, #140]	; (850c <z_timer_expiration_handler+0x14c>)
    8480:	4826      	ldr	r0, [pc, #152]	; (851c <z_timer_expiration_handler+0x15c>)
    8482:	f000 fd52 	bl	8f2a <assert_print>
    8486:	4822      	ldr	r0, [pc, #136]	; (8510 <z_timer_expiration_handler+0x150>)
    8488:	218e      	movs	r1, #142	; 0x8e
    848a:	f000 fd47 	bl	8f1c <assert_post_action>
	z_spin_lock_set_owner(l);
    848e:	481f      	ldr	r0, [pc, #124]	; (850c <z_timer_expiration_handler+0x14c>)
    8490:	f7fe f874 	bl	657c <z_spin_lock_set_owner>
	return list->head == list;
    8494:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8498:	42a6      	cmp	r6, r4
    849a:	d000      	beq.n	849e <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    849c:	b9b6      	cbnz	r6, 84cc <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    849e:	481b      	ldr	r0, [pc, #108]	; (850c <z_timer_expiration_handler+0x14c>)
    84a0:	f7fe f85c 	bl	655c <z_spin_unlock_valid>
    84a4:	b968      	cbnz	r0, 84c2 <z_timer_expiration_handler+0x102>
    84a6:	4a1a      	ldr	r2, [pc, #104]	; (8510 <z_timer_expiration_handler+0x150>)
    84a8:	491e      	ldr	r1, [pc, #120]	; (8524 <z_timer_expiration_handler+0x164>)
    84aa:	481b      	ldr	r0, [pc, #108]	; (8518 <z_timer_expiration_handler+0x158>)
    84ac:	23b9      	movs	r3, #185	; 0xb9
    84ae:	f000 fd3c 	bl	8f2a <assert_print>
    84b2:	4916      	ldr	r1, [pc, #88]	; (850c <z_timer_expiration_handler+0x14c>)
    84b4:	481c      	ldr	r0, [pc, #112]	; (8528 <z_timer_expiration_handler+0x168>)
    84b6:	f000 fd38 	bl	8f2a <assert_print>
    84ba:	4815      	ldr	r0, [pc, #84]	; (8510 <z_timer_expiration_handler+0x150>)
    84bc:	21b9      	movs	r1, #185	; 0xb9
    84be:	f000 fd2d 	bl	8f1c <assert_post_action>
	__asm__ volatile(
    84c2:	f385 8811 	msr	BASEPRI, r5
    84c6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    84ca:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    84cc:	4630      	mov	r0, r6
    84ce:	f7fe fb8f 	bl	6bf0 <z_unpend_thread_no_timeout>
    84d2:	2300      	movs	r3, #0
    84d4:	480d      	ldr	r0, [pc, #52]	; (850c <z_timer_expiration_handler+0x14c>)
    84d6:	67b3      	str	r3, [r6, #120]	; 0x78
    84d8:	f7fe f840 	bl	655c <z_spin_unlock_valid>
    84dc:	b968      	cbnz	r0, 84fa <z_timer_expiration_handler+0x13a>
    84de:	4a0c      	ldr	r2, [pc, #48]	; (8510 <z_timer_expiration_handler+0x150>)
    84e0:	4910      	ldr	r1, [pc, #64]	; (8524 <z_timer_expiration_handler+0x164>)
    84e2:	480d      	ldr	r0, [pc, #52]	; (8518 <z_timer_expiration_handler+0x158>)
    84e4:	23b9      	movs	r3, #185	; 0xb9
    84e6:	f000 fd20 	bl	8f2a <assert_print>
    84ea:	4908      	ldr	r1, [pc, #32]	; (850c <z_timer_expiration_handler+0x14c>)
    84ec:	480e      	ldr	r0, [pc, #56]	; (8528 <z_timer_expiration_handler+0x168>)
    84ee:	f000 fd1c 	bl	8f2a <assert_print>
    84f2:	4807      	ldr	r0, [pc, #28]	; (8510 <z_timer_expiration_handler+0x150>)
    84f4:	21b9      	movs	r1, #185	; 0xb9
    84f6:	f000 fd11 	bl	8f1c <assert_post_action>
    84fa:	f385 8811 	msr	BASEPRI, r5
    84fe:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8502:	4630      	mov	r0, r6
}
    8504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    8508:	f7fe be04 	b.w	7114 <z_ready_thread>
    850c:	20000c84 	.word	0x20000c84
    8510:	0000a38e 	.word	0x0000a38e
    8514:	0000a3e7 	.word	0x0000a3e7
    8518:	00009eb7 	.word	0x00009eb7
    851c:	0000a3fc 	.word	0x0000a3fc
    8520:	000083c1 	.word	0x000083c1
    8524:	0000a3bb 	.word	0x0000a3bb
    8528:	0000a3d2 	.word	0x0000a3d2

0000852c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8534:	bf08      	it	eq
    8536:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    853a:	4605      	mov	r5, r0
    853c:	4614      	mov	r4, r2
    853e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    8542:	4619      	mov	r1, r3
    8544:	4691      	mov	r9, r2
    8546:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8548:	d037      	beq.n	85ba <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    854a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    854e:	bf08      	it	eq
    8550:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8554:	4637      	mov	r7, r6
    8556:	4682      	mov	sl, r0
    8558:	d011      	beq.n	857e <z_impl_k_timer_start+0x52>
    855a:	ea50 0306 	orrs.w	r3, r0, r6
    855e:	d00e      	beq.n	857e <z_impl_k_timer_start+0x52>
    8560:	1c72      	adds	r2, r6, #1
    8562:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    8566:	db0a      	blt.n	857e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    8568:	2e02      	cmp	r6, #2
    856a:	4684      	mov	ip, r0
    856c:	f170 0000 	sbcs.w	r0, r0, #0
    8570:	bfbc      	itt	lt
    8572:	2702      	movlt	r7, #2
    8574:	f04f 0c00 	movlt.w	ip, #0
    8578:	3f01      	subs	r7, #1
    857a:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    857e:	1c63      	adds	r3, r4, #1
    8580:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    8584:	db0a      	blt.n	859c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    8586:	2c01      	cmp	r4, #1
    8588:	f171 0300 	sbcs.w	r3, r1, #0
    858c:	4622      	mov	r2, r4
    858e:	bfbc      	itt	lt
    8590:	2201      	movlt	r2, #1
    8592:	2100      	movlt	r1, #0
    8594:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    8598:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    859c:	4628      	mov	r0, r5
    859e:	f7ff fd1f 	bl	7fe0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    85a2:	2300      	movs	r3, #0
    85a4:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    85a6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    85aa:	464a      	mov	r2, r9
    85ac:	4643      	mov	r3, r8
    85ae:	4628      	mov	r0, r5
    85b0:	4903      	ldr	r1, [pc, #12]	; (85c0 <z_impl_k_timer_start+0x94>)
		     duration);
}
    85b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    85b6:	f7ff bc4b 	b.w	7e50 <z_add_timeout>
}
    85ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85be:	bf00      	nop
    85c0:	000083c1 	.word	0x000083c1

000085c4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    85c4:	4b01      	ldr	r3, [pc, #4]	; (85cc <k_thread_system_pool_assign+0x8>)
    85c6:	6703      	str	r3, [r0, #112]	; 0x70
}
    85c8:	4770      	bx	lr
    85ca:	bf00      	nop
    85cc:	200001f4 	.word	0x200001f4

000085d0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    85d0:	4a02      	ldr	r2, [pc, #8]	; (85dc <boot_banner+0xc>)
    85d2:	4903      	ldr	r1, [pc, #12]	; (85e0 <boot_banner+0x10>)
    85d4:	4803      	ldr	r0, [pc, #12]	; (85e4 <boot_banner+0x14>)
    85d6:	f000 bbae 	b.w	8d36 <printk>
    85da:	bf00      	nop
    85dc:	0000b836 	.word	0x0000b836
    85e0:	0000ba2e 	.word	0x0000ba2e
    85e4:	0000ba3b 	.word	0x0000ba3b

000085e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    85e8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    85ea:	4c0e      	ldr	r4, [pc, #56]	; (8624 <statics_init+0x3c>)
    85ec:	4d0e      	ldr	r5, [pc, #56]	; (8628 <statics_init+0x40>)
    85ee:	4e0f      	ldr	r6, [pc, #60]	; (862c <statics_init+0x44>)
    85f0:	42ac      	cmp	r4, r5
    85f2:	d90c      	bls.n	860e <statics_init+0x26>
    85f4:	490e      	ldr	r1, [pc, #56]	; (8630 <statics_init+0x48>)
    85f6:	480f      	ldr	r0, [pc, #60]	; (8634 <statics_init+0x4c>)
    85f8:	2318      	movs	r3, #24
    85fa:	4632      	mov	r2, r6
    85fc:	f000 fc95 	bl	8f2a <assert_print>
    8600:	480d      	ldr	r0, [pc, #52]	; (8638 <statics_init+0x50>)
    8602:	f000 fc92 	bl	8f2a <assert_print>
    8606:	2118      	movs	r1, #24
    8608:	4630      	mov	r0, r6
    860a:	f000 fc87 	bl	8f1c <assert_post_action>
    860e:	42ac      	cmp	r4, r5
    8610:	d301      	bcc.n	8616 <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8612:	2000      	movs	r0, #0
    8614:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8616:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    861a:	4620      	mov	r0, r4
    861c:	f001 f902 	bl	9824 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8620:	3418      	adds	r4, #24
    8622:	e7e5      	b.n	85f0 <statics_init+0x8>
    8624:	200001f4 	.word	0x200001f4
    8628:	2000020c 	.word	0x2000020c
    862c:	0000ba62 	.word	0x0000ba62
    8630:	0000ba84 	.word	0x0000ba84
    8634:	00009eb7 	.word	0x00009eb7
    8638:	0000b60b 	.word	0x0000b60b

0000863c <__udivmoddi4>:
    863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8640:	9e08      	ldr	r6, [sp, #32]
    8642:	460d      	mov	r5, r1
    8644:	4604      	mov	r4, r0
    8646:	460f      	mov	r7, r1
    8648:	2b00      	cmp	r3, #0
    864a:	d14a      	bne.n	86e2 <__udivmoddi4+0xa6>
    864c:	428a      	cmp	r2, r1
    864e:	4694      	mov	ip, r2
    8650:	d965      	bls.n	871e <__udivmoddi4+0xe2>
    8652:	fab2 f382 	clz	r3, r2
    8656:	b143      	cbz	r3, 866a <__udivmoddi4+0x2e>
    8658:	fa02 fc03 	lsl.w	ip, r2, r3
    865c:	f1c3 0220 	rsb	r2, r3, #32
    8660:	409f      	lsls	r7, r3
    8662:	fa20 f202 	lsr.w	r2, r0, r2
    8666:	4317      	orrs	r7, r2
    8668:	409c      	lsls	r4, r3
    866a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    866e:	fa1f f58c 	uxth.w	r5, ip
    8672:	fbb7 f1fe 	udiv	r1, r7, lr
    8676:	0c22      	lsrs	r2, r4, #16
    8678:	fb0e 7711 	mls	r7, lr, r1, r7
    867c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8680:	fb01 f005 	mul.w	r0, r1, r5
    8684:	4290      	cmp	r0, r2
    8686:	d90a      	bls.n	869e <__udivmoddi4+0x62>
    8688:	eb1c 0202 	adds.w	r2, ip, r2
    868c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    8690:	f080 811b 	bcs.w	88ca <__udivmoddi4+0x28e>
    8694:	4290      	cmp	r0, r2
    8696:	f240 8118 	bls.w	88ca <__udivmoddi4+0x28e>
    869a:	3902      	subs	r1, #2
    869c:	4462      	add	r2, ip
    869e:	1a12      	subs	r2, r2, r0
    86a0:	b2a4      	uxth	r4, r4
    86a2:	fbb2 f0fe 	udiv	r0, r2, lr
    86a6:	fb0e 2210 	mls	r2, lr, r0, r2
    86aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    86ae:	fb00 f505 	mul.w	r5, r0, r5
    86b2:	42a5      	cmp	r5, r4
    86b4:	d90a      	bls.n	86cc <__udivmoddi4+0x90>
    86b6:	eb1c 0404 	adds.w	r4, ip, r4
    86ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    86be:	f080 8106 	bcs.w	88ce <__udivmoddi4+0x292>
    86c2:	42a5      	cmp	r5, r4
    86c4:	f240 8103 	bls.w	88ce <__udivmoddi4+0x292>
    86c8:	4464      	add	r4, ip
    86ca:	3802      	subs	r0, #2
    86cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    86d0:	1b64      	subs	r4, r4, r5
    86d2:	2100      	movs	r1, #0
    86d4:	b11e      	cbz	r6, 86de <__udivmoddi4+0xa2>
    86d6:	40dc      	lsrs	r4, r3
    86d8:	2300      	movs	r3, #0
    86da:	e9c6 4300 	strd	r4, r3, [r6]
    86de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86e2:	428b      	cmp	r3, r1
    86e4:	d908      	bls.n	86f8 <__udivmoddi4+0xbc>
    86e6:	2e00      	cmp	r6, #0
    86e8:	f000 80ec 	beq.w	88c4 <__udivmoddi4+0x288>
    86ec:	2100      	movs	r1, #0
    86ee:	e9c6 0500 	strd	r0, r5, [r6]
    86f2:	4608      	mov	r0, r1
    86f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86f8:	fab3 f183 	clz	r1, r3
    86fc:	2900      	cmp	r1, #0
    86fe:	d149      	bne.n	8794 <__udivmoddi4+0x158>
    8700:	42ab      	cmp	r3, r5
    8702:	d302      	bcc.n	870a <__udivmoddi4+0xce>
    8704:	4282      	cmp	r2, r0
    8706:	f200 80f7 	bhi.w	88f8 <__udivmoddi4+0x2bc>
    870a:	1a84      	subs	r4, r0, r2
    870c:	eb65 0203 	sbc.w	r2, r5, r3
    8710:	2001      	movs	r0, #1
    8712:	4617      	mov	r7, r2
    8714:	2e00      	cmp	r6, #0
    8716:	d0e2      	beq.n	86de <__udivmoddi4+0xa2>
    8718:	e9c6 4700 	strd	r4, r7, [r6]
    871c:	e7df      	b.n	86de <__udivmoddi4+0xa2>
    871e:	b902      	cbnz	r2, 8722 <__udivmoddi4+0xe6>
    8720:	deff      	udf	#255	; 0xff
    8722:	fab2 f382 	clz	r3, r2
    8726:	2b00      	cmp	r3, #0
    8728:	f040 808f 	bne.w	884a <__udivmoddi4+0x20e>
    872c:	1a8a      	subs	r2, r1, r2
    872e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    8732:	fa1f fe8c 	uxth.w	lr, ip
    8736:	2101      	movs	r1, #1
    8738:	fbb2 f5f7 	udiv	r5, r2, r7
    873c:	fb07 2015 	mls	r0, r7, r5, r2
    8740:	0c22      	lsrs	r2, r4, #16
    8742:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    8746:	fb0e f005 	mul.w	r0, lr, r5
    874a:	4290      	cmp	r0, r2
    874c:	d908      	bls.n	8760 <__udivmoddi4+0x124>
    874e:	eb1c 0202 	adds.w	r2, ip, r2
    8752:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    8756:	d202      	bcs.n	875e <__udivmoddi4+0x122>
    8758:	4290      	cmp	r0, r2
    875a:	f200 80ca 	bhi.w	88f2 <__udivmoddi4+0x2b6>
    875e:	4645      	mov	r5, r8
    8760:	1a12      	subs	r2, r2, r0
    8762:	b2a4      	uxth	r4, r4
    8764:	fbb2 f0f7 	udiv	r0, r2, r7
    8768:	fb07 2210 	mls	r2, r7, r0, r2
    876c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8770:	fb0e fe00 	mul.w	lr, lr, r0
    8774:	45a6      	cmp	lr, r4
    8776:	d908      	bls.n	878a <__udivmoddi4+0x14e>
    8778:	eb1c 0404 	adds.w	r4, ip, r4
    877c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    8780:	d202      	bcs.n	8788 <__udivmoddi4+0x14c>
    8782:	45a6      	cmp	lr, r4
    8784:	f200 80ba 	bhi.w	88fc <__udivmoddi4+0x2c0>
    8788:	4610      	mov	r0, r2
    878a:	eba4 040e 	sub.w	r4, r4, lr
    878e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    8792:	e79f      	b.n	86d4 <__udivmoddi4+0x98>
    8794:	f1c1 0720 	rsb	r7, r1, #32
    8798:	408b      	lsls	r3, r1
    879a:	fa22 fc07 	lsr.w	ip, r2, r7
    879e:	ea4c 0c03 	orr.w	ip, ip, r3
    87a2:	fa05 f401 	lsl.w	r4, r5, r1
    87a6:	fa20 f307 	lsr.w	r3, r0, r7
    87aa:	40fd      	lsrs	r5, r7
    87ac:	4323      	orrs	r3, r4
    87ae:	fa00 f901 	lsl.w	r9, r0, r1
    87b2:	ea4f 401c 	mov.w	r0, ip, lsr #16
    87b6:	fa1f fe8c 	uxth.w	lr, ip
    87ba:	fbb5 f8f0 	udiv	r8, r5, r0
    87be:	0c1c      	lsrs	r4, r3, #16
    87c0:	fb00 5518 	mls	r5, r0, r8, r5
    87c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    87c8:	fb08 f50e 	mul.w	r5, r8, lr
    87cc:	42a5      	cmp	r5, r4
    87ce:	fa02 f201 	lsl.w	r2, r2, r1
    87d2:	d90b      	bls.n	87ec <__udivmoddi4+0x1b0>
    87d4:	eb1c 0404 	adds.w	r4, ip, r4
    87d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    87dc:	f080 8087 	bcs.w	88ee <__udivmoddi4+0x2b2>
    87e0:	42a5      	cmp	r5, r4
    87e2:	f240 8084 	bls.w	88ee <__udivmoddi4+0x2b2>
    87e6:	f1a8 0802 	sub.w	r8, r8, #2
    87ea:	4464      	add	r4, ip
    87ec:	1b64      	subs	r4, r4, r5
    87ee:	b29d      	uxth	r5, r3
    87f0:	fbb4 f3f0 	udiv	r3, r4, r0
    87f4:	fb00 4413 	mls	r4, r0, r3, r4
    87f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    87fc:	fb03 fe0e 	mul.w	lr, r3, lr
    8800:	45a6      	cmp	lr, r4
    8802:	d908      	bls.n	8816 <__udivmoddi4+0x1da>
    8804:	eb1c 0404 	adds.w	r4, ip, r4
    8808:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    880c:	d26b      	bcs.n	88e6 <__udivmoddi4+0x2aa>
    880e:	45a6      	cmp	lr, r4
    8810:	d969      	bls.n	88e6 <__udivmoddi4+0x2aa>
    8812:	3b02      	subs	r3, #2
    8814:	4464      	add	r4, ip
    8816:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
    881a:	fba0 8302 	umull	r8, r3, r0, r2
    881e:	eba4 040e 	sub.w	r4, r4, lr
    8822:	429c      	cmp	r4, r3
    8824:	46c6      	mov	lr, r8
    8826:	461d      	mov	r5, r3
    8828:	d355      	bcc.n	88d6 <__udivmoddi4+0x29a>
    882a:	d052      	beq.n	88d2 <__udivmoddi4+0x296>
    882c:	b156      	cbz	r6, 8844 <__udivmoddi4+0x208>
    882e:	ebb9 030e 	subs.w	r3, r9, lr
    8832:	eb64 0405 	sbc.w	r4, r4, r5
    8836:	fa04 f707 	lsl.w	r7, r4, r7
    883a:	40cb      	lsrs	r3, r1
    883c:	40cc      	lsrs	r4, r1
    883e:	431f      	orrs	r7, r3
    8840:	e9c6 7400 	strd	r7, r4, [r6]
    8844:	2100      	movs	r1, #0
    8846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    884a:	f1c3 0120 	rsb	r1, r3, #32
    884e:	fa02 fc03 	lsl.w	ip, r2, r3
    8852:	fa20 f201 	lsr.w	r2, r0, r1
    8856:	fa25 f101 	lsr.w	r1, r5, r1
    885a:	409d      	lsls	r5, r3
    885c:	432a      	orrs	r2, r5
    885e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    8862:	fa1f fe8c 	uxth.w	lr, ip
    8866:	fbb1 f0f7 	udiv	r0, r1, r7
    886a:	fb07 1510 	mls	r5, r7, r0, r1
    886e:	0c11      	lsrs	r1, r2, #16
    8870:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    8874:	fb00 f50e 	mul.w	r5, r0, lr
    8878:	428d      	cmp	r5, r1
    887a:	fa04 f403 	lsl.w	r4, r4, r3
    887e:	d908      	bls.n	8892 <__udivmoddi4+0x256>
    8880:	eb1c 0101 	adds.w	r1, ip, r1
    8884:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    8888:	d22f      	bcs.n	88ea <__udivmoddi4+0x2ae>
    888a:	428d      	cmp	r5, r1
    888c:	d92d      	bls.n	88ea <__udivmoddi4+0x2ae>
    888e:	3802      	subs	r0, #2
    8890:	4461      	add	r1, ip
    8892:	1b49      	subs	r1, r1, r5
    8894:	b292      	uxth	r2, r2
    8896:	fbb1 f5f7 	udiv	r5, r1, r7
    889a:	fb07 1115 	mls	r1, r7, r5, r1
    889e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    88a2:	fb05 f10e 	mul.w	r1, r5, lr
    88a6:	4291      	cmp	r1, r2
    88a8:	d908      	bls.n	88bc <__udivmoddi4+0x280>
    88aa:	eb1c 0202 	adds.w	r2, ip, r2
    88ae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    88b2:	d216      	bcs.n	88e2 <__udivmoddi4+0x2a6>
    88b4:	4291      	cmp	r1, r2
    88b6:	d914      	bls.n	88e2 <__udivmoddi4+0x2a6>
    88b8:	3d02      	subs	r5, #2
    88ba:	4462      	add	r2, ip
    88bc:	1a52      	subs	r2, r2, r1
    88be:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    88c2:	e739      	b.n	8738 <__udivmoddi4+0xfc>
    88c4:	4631      	mov	r1, r6
    88c6:	4630      	mov	r0, r6
    88c8:	e709      	b.n	86de <__udivmoddi4+0xa2>
    88ca:	4639      	mov	r1, r7
    88cc:	e6e7      	b.n	869e <__udivmoddi4+0x62>
    88ce:	4610      	mov	r0, r2
    88d0:	e6fc      	b.n	86cc <__udivmoddi4+0x90>
    88d2:	45c1      	cmp	r9, r8
    88d4:	d2aa      	bcs.n	882c <__udivmoddi4+0x1f0>
    88d6:	ebb8 0e02 	subs.w	lr, r8, r2
    88da:	eb63 050c 	sbc.w	r5, r3, ip
    88de:	3801      	subs	r0, #1
    88e0:	e7a4      	b.n	882c <__udivmoddi4+0x1f0>
    88e2:	4645      	mov	r5, r8
    88e4:	e7ea      	b.n	88bc <__udivmoddi4+0x280>
    88e6:	4603      	mov	r3, r0
    88e8:	e795      	b.n	8816 <__udivmoddi4+0x1da>
    88ea:	4640      	mov	r0, r8
    88ec:	e7d1      	b.n	8892 <__udivmoddi4+0x256>
    88ee:	46d0      	mov	r8, sl
    88f0:	e77c      	b.n	87ec <__udivmoddi4+0x1b0>
    88f2:	3d02      	subs	r5, #2
    88f4:	4462      	add	r2, ip
    88f6:	e733      	b.n	8760 <__udivmoddi4+0x124>
    88f8:	4608      	mov	r0, r1
    88fa:	e70b      	b.n	8714 <__udivmoddi4+0xd8>
    88fc:	4464      	add	r4, ip
    88fe:	3802      	subs	r0, #2
    8900:	e743      	b.n	878a <__udivmoddi4+0x14e>
    8902:	bf00      	nop

00008904 <nrf_cc3xx_platform_init_no_rng>:
    8904:	b510      	push	{r4, lr}
    8906:	4c0a      	ldr	r4, [pc, #40]	; (8930 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8908:	6823      	ldr	r3, [r4, #0]
    890a:	b11b      	cbz	r3, 8914 <nrf_cc3xx_platform_init_no_rng+0x10>
    890c:	2301      	movs	r3, #1
    890e:	6023      	str	r3, [r4, #0]
    8910:	2000      	movs	r0, #0
    8912:	bd10      	pop	{r4, pc}
    8914:	f000 f8ce 	bl	8ab4 <CC_LibInitNoRng>
    8918:	2800      	cmp	r0, #0
    891a:	d0f7      	beq.n	890c <nrf_cc3xx_platform_init_no_rng+0x8>
    891c:	3801      	subs	r0, #1
    891e:	2806      	cmp	r0, #6
    8920:	d803      	bhi.n	892a <nrf_cc3xx_platform_init_no_rng+0x26>
    8922:	4b04      	ldr	r3, [pc, #16]	; (8934 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8924:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8928:	bd10      	pop	{r4, pc}
    892a:	4803      	ldr	r0, [pc, #12]	; (8938 <nrf_cc3xx_platform_init_no_rng+0x34>)
    892c:	bd10      	pop	{r4, pc}
    892e:	bf00      	nop
    8930:	20000c88 	.word	0x20000c88
    8934:	00009db8 	.word	0x00009db8
    8938:	ffff8ffe 	.word	0xffff8ffe

0000893c <nrf_cc3xx_platform_abort>:
    893c:	f3bf 8f4f 	dsb	sy
    8940:	4905      	ldr	r1, [pc, #20]	; (8958 <nrf_cc3xx_platform_abort+0x1c>)
    8942:	4b06      	ldr	r3, [pc, #24]	; (895c <nrf_cc3xx_platform_abort+0x20>)
    8944:	68ca      	ldr	r2, [r1, #12]
    8946:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    894a:	4313      	orrs	r3, r2
    894c:	60cb      	str	r3, [r1, #12]
    894e:	f3bf 8f4f 	dsb	sy
    8952:	bf00      	nop
    8954:	e7fd      	b.n	8952 <nrf_cc3xx_platform_abort+0x16>
    8956:	bf00      	nop
    8958:	e000ed00 	.word	0xe000ed00
    895c:	05fa0004 	.word	0x05fa0004

00008960 <CC_PalAbort>:
    8960:	b410      	push	{r4}
    8962:	4b09      	ldr	r3, [pc, #36]	; (8988 <CC_PalAbort+0x28>)
    8964:	4909      	ldr	r1, [pc, #36]	; (898c <CC_PalAbort+0x2c>)
    8966:	4c0a      	ldr	r4, [pc, #40]	; (8990 <CC_PalAbort+0x30>)
    8968:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    896c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8970:	6849      	ldr	r1, [r1, #4]
    8972:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8976:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    897a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    897e:	2300      	movs	r3, #0
    8980:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8984:	bc10      	pop	{r4}
    8986:	4708      	bx	r1
    8988:	5002b000 	.word	0x5002b000
    898c:	2000017c 	.word	0x2000017c
    8990:	5002a000 	.word	0x5002a000

00008994 <nrf_cc3xx_platform_set_abort>:
    8994:	e9d0 1200 	ldrd	r1, r2, [r0]
    8998:	4b01      	ldr	r3, [pc, #4]	; (89a0 <nrf_cc3xx_platform_set_abort+0xc>)
    899a:	e9c3 1200 	strd	r1, r2, [r3]
    899e:	4770      	bx	lr
    89a0:	2000017c 	.word	0x2000017c

000089a4 <mutex_free>:
    89a4:	b510      	push	{r4, lr}
    89a6:	4604      	mov	r4, r0
    89a8:	b130      	cbz	r0, 89b8 <mutex_free+0x14>
    89aa:	6863      	ldr	r3, [r4, #4]
    89ac:	06db      	lsls	r3, r3, #27
    89ae:	d502      	bpl.n	89b6 <mutex_free+0x12>
    89b0:	2300      	movs	r3, #0
    89b2:	6023      	str	r3, [r4, #0]
    89b4:	6063      	str	r3, [r4, #4]
    89b6:	bd10      	pop	{r4, pc}
    89b8:	4b02      	ldr	r3, [pc, #8]	; (89c4 <mutex_free+0x20>)
    89ba:	4803      	ldr	r0, [pc, #12]	; (89c8 <mutex_free+0x24>)
    89bc:	685b      	ldr	r3, [r3, #4]
    89be:	4798      	blx	r3
    89c0:	e7f3      	b.n	89aa <mutex_free+0x6>
    89c2:	bf00      	nop
    89c4:	2000017c 	.word	0x2000017c
    89c8:	00009dd4 	.word	0x00009dd4

000089cc <mutex_lock>:
    89cc:	b1b0      	cbz	r0, 89fc <mutex_lock+0x30>
    89ce:	6843      	ldr	r3, [r0, #4]
    89d0:	b193      	cbz	r3, 89f8 <mutex_lock+0x2c>
    89d2:	06db      	lsls	r3, r3, #27
    89d4:	d50e      	bpl.n	89f4 <mutex_lock+0x28>
    89d6:	2301      	movs	r3, #1
    89d8:	e850 2f00 	ldrex	r2, [r0]
    89dc:	4619      	mov	r1, r3
    89de:	e840 1c00 	strex	ip, r1, [r0]
    89e2:	f09c 0f00 	teq	ip, #0
    89e6:	d1f7      	bne.n	89d8 <mutex_lock+0xc>
    89e8:	2a01      	cmp	r2, #1
    89ea:	d0f5      	beq.n	89d8 <mutex_lock+0xc>
    89ec:	f3bf 8f5f 	dmb	sy
    89f0:	2000      	movs	r0, #0
    89f2:	4770      	bx	lr
    89f4:	4803      	ldr	r0, [pc, #12]	; (8a04 <mutex_lock+0x38>)
    89f6:	4770      	bx	lr
    89f8:	4803      	ldr	r0, [pc, #12]	; (8a08 <mutex_lock+0x3c>)
    89fa:	4770      	bx	lr
    89fc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8a00:	4770      	bx	lr
    8a02:	bf00      	nop
    8a04:	ffff8fe9 	.word	0xffff8fe9
    8a08:	ffff8fea 	.word	0xffff8fea

00008a0c <mutex_unlock>:
    8a0c:	b168      	cbz	r0, 8a2a <mutex_unlock+0x1e>
    8a0e:	6843      	ldr	r3, [r0, #4]
    8a10:	b13b      	cbz	r3, 8a22 <mutex_unlock+0x16>
    8a12:	06db      	lsls	r3, r3, #27
    8a14:	d507      	bpl.n	8a26 <mutex_unlock+0x1a>
    8a16:	f3bf 8f5f 	dmb	sy
    8a1a:	2300      	movs	r3, #0
    8a1c:	6003      	str	r3, [r0, #0]
    8a1e:	4618      	mov	r0, r3
    8a20:	4770      	bx	lr
    8a22:	4803      	ldr	r0, [pc, #12]	; (8a30 <mutex_unlock+0x24>)
    8a24:	4770      	bx	lr
    8a26:	4803      	ldr	r0, [pc, #12]	; (8a34 <mutex_unlock+0x28>)
    8a28:	4770      	bx	lr
    8a2a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8a2e:	4770      	bx	lr
    8a30:	ffff8fea 	.word	0xffff8fea
    8a34:	ffff8fe9 	.word	0xffff8fe9

00008a38 <mutex_init>:
    8a38:	b510      	push	{r4, lr}
    8a3a:	4604      	mov	r4, r0
    8a3c:	b120      	cbz	r0, 8a48 <mutex_init+0x10>
    8a3e:	2200      	movs	r2, #0
    8a40:	2311      	movs	r3, #17
    8a42:	6022      	str	r2, [r4, #0]
    8a44:	6063      	str	r3, [r4, #4]
    8a46:	bd10      	pop	{r4, pc}
    8a48:	4801      	ldr	r0, [pc, #4]	; (8a50 <mutex_init+0x18>)
    8a4a:	f7ff ff89 	bl	8960 <CC_PalAbort>
    8a4e:	e7f6      	b.n	8a3e <mutex_init+0x6>
    8a50:	00009dfc 	.word	0x00009dfc

00008a54 <nrf_cc3xx_platform_set_mutexes>:
    8a54:	b570      	push	{r4, r5, r6, lr}
    8a56:	e9d0 2300 	ldrd	r2, r3, [r0]
    8a5a:	4c13      	ldr	r4, [pc, #76]	; (8aa8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8a5c:	4d13      	ldr	r5, [pc, #76]	; (8aac <nrf_cc3xx_platform_set_mutexes+0x58>)
    8a5e:	6063      	str	r3, [r4, #4]
    8a60:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8a64:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8a68:	6022      	str	r2, [r4, #0]
    8a6a:	4b11      	ldr	r3, [pc, #68]	; (8ab0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8a6c:	6808      	ldr	r0, [r1, #0]
    8a6e:	6018      	str	r0, [r3, #0]
    8a70:	6848      	ldr	r0, [r1, #4]
    8a72:	6058      	str	r0, [r3, #4]
    8a74:	6888      	ldr	r0, [r1, #8]
    8a76:	6098      	str	r0, [r3, #8]
    8a78:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8a7c:	60d8      	str	r0, [r3, #12]
    8a7e:	6119      	str	r1, [r3, #16]
    8a80:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    8a84:	06db      	lsls	r3, r3, #27
    8a86:	d50d      	bpl.n	8aa4 <nrf_cc3xx_platform_set_mutexes+0x50>
    8a88:	2300      	movs	r3, #0
    8a8a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    8a8e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    8a92:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8a96:	4790      	blx	r2
    8a98:	6823      	ldr	r3, [r4, #0]
    8a9a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8aa2:	4718      	bx	r3
    8aa4:	bd70      	pop	{r4, r5, r6, pc}
    8aa6:	bf00      	nop
    8aa8:	2000018c 	.word	0x2000018c
    8aac:	20000ca0 	.word	0x20000ca0
    8ab0:	2000019c 	.word	0x2000019c

00008ab4 <CC_LibInitNoRng>:
    8ab4:	b538      	push	{r3, r4, r5, lr}
    8ab6:	f000 f82f 	bl	8b18 <CC_HalInit>
    8aba:	b120      	cbz	r0, 8ac6 <CC_LibInitNoRng+0x12>
    8abc:	2403      	movs	r4, #3
    8abe:	f000 f863 	bl	8b88 <CC_PalTerminate>
    8ac2:	4620      	mov	r0, r4
    8ac4:	bd38      	pop	{r3, r4, r5, pc}
    8ac6:	f000 f831 	bl	8b2c <CC_PalInit>
    8aca:	b998      	cbnz	r0, 8af4 <CC_LibInitNoRng+0x40>
    8acc:	f000 f8ac 	bl	8c28 <CC_PalPowerSaveModeSelect>
    8ad0:	b998      	cbnz	r0, 8afa <CC_LibInitNoRng+0x46>
    8ad2:	4d0f      	ldr	r5, [pc, #60]	; (8b10 <CC_LibInitNoRng+0x5c>)
    8ad4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8ad8:	0e1b      	lsrs	r3, r3, #24
    8ada:	2bf0      	cmp	r3, #240	; 0xf0
    8adc:	d108      	bne.n	8af0 <CC_LibInitNoRng+0x3c>
    8ade:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8ae2:	4b0c      	ldr	r3, [pc, #48]	; (8b14 <CC_LibInitNoRng+0x60>)
    8ae4:	429a      	cmp	r2, r3
    8ae6:	d00a      	beq.n	8afe <CC_LibInitNoRng+0x4a>
    8ae8:	2407      	movs	r4, #7
    8aea:	f000 f817 	bl	8b1c <CC_HalTerminate>
    8aee:	e7e6      	b.n	8abe <CC_LibInitNoRng+0xa>
    8af0:	2406      	movs	r4, #6
    8af2:	e7fa      	b.n	8aea <CC_LibInitNoRng+0x36>
    8af4:	2404      	movs	r4, #4
    8af6:	4620      	mov	r0, r4
    8af8:	bd38      	pop	{r3, r4, r5, pc}
    8afa:	2400      	movs	r4, #0
    8afc:	e7f5      	b.n	8aea <CC_LibInitNoRng+0x36>
    8afe:	2001      	movs	r0, #1
    8b00:	f000 f892 	bl	8c28 <CC_PalPowerSaveModeSelect>
    8b04:	4604      	mov	r4, r0
    8b06:	2800      	cmp	r0, #0
    8b08:	d1f7      	bne.n	8afa <CC_LibInitNoRng+0x46>
    8b0a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8b0e:	e7d8      	b.n	8ac2 <CC_LibInitNoRng+0xe>
    8b10:	5002b000 	.word	0x5002b000
    8b14:	20e00000 	.word	0x20e00000

00008b18 <CC_HalInit>:
    8b18:	2000      	movs	r0, #0
    8b1a:	4770      	bx	lr

00008b1c <CC_HalTerminate>:
    8b1c:	2000      	movs	r0, #0
    8b1e:	4770      	bx	lr

00008b20 <CC_HalMaskInterrupt>:
    8b20:	4b01      	ldr	r3, [pc, #4]	; (8b28 <CC_HalMaskInterrupt+0x8>)
    8b22:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    8b26:	4770      	bx	lr
    8b28:	5002b000 	.word	0x5002b000

00008b2c <CC_PalInit>:
    8b2c:	b510      	push	{r4, lr}
    8b2e:	4811      	ldr	r0, [pc, #68]	; (8b74 <CC_PalInit+0x48>)
    8b30:	f000 f848 	bl	8bc4 <CC_PalMutexCreate>
    8b34:	b100      	cbz	r0, 8b38 <CC_PalInit+0xc>
    8b36:	bd10      	pop	{r4, pc}
    8b38:	480f      	ldr	r0, [pc, #60]	; (8b78 <CC_PalInit+0x4c>)
    8b3a:	f000 f843 	bl	8bc4 <CC_PalMutexCreate>
    8b3e:	2800      	cmp	r0, #0
    8b40:	d1f9      	bne.n	8b36 <CC_PalInit+0xa>
    8b42:	4c0e      	ldr	r4, [pc, #56]	; (8b7c <CC_PalInit+0x50>)
    8b44:	4620      	mov	r0, r4
    8b46:	f000 f83d 	bl	8bc4 <CC_PalMutexCreate>
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d1f3      	bne.n	8b36 <CC_PalInit+0xa>
    8b4e:	4b0c      	ldr	r3, [pc, #48]	; (8b80 <CC_PalInit+0x54>)
    8b50:	480c      	ldr	r0, [pc, #48]	; (8b84 <CC_PalInit+0x58>)
    8b52:	601c      	str	r4, [r3, #0]
    8b54:	f000 f836 	bl	8bc4 <CC_PalMutexCreate>
    8b58:	4601      	mov	r1, r0
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d1eb      	bne.n	8b36 <CC_PalInit+0xa>
    8b5e:	f000 f82d 	bl	8bbc <CC_PalDmaInit>
    8b62:	4604      	mov	r4, r0
    8b64:	b108      	cbz	r0, 8b6a <CC_PalInit+0x3e>
    8b66:	4620      	mov	r0, r4
    8b68:	bd10      	pop	{r4, pc}
    8b6a:	f000 f83f 	bl	8bec <CC_PalPowerSaveModeInit>
    8b6e:	4620      	mov	r0, r4
    8b70:	e7fa      	b.n	8b68 <CC_PalInit+0x3c>
    8b72:	bf00      	nop
    8b74:	200001d4 	.word	0x200001d4
    8b78:	200001c8 	.word	0x200001c8
    8b7c:	200001d0 	.word	0x200001d0
    8b80:	200001d8 	.word	0x200001d8
    8b84:	200001cc 	.word	0x200001cc

00008b88 <CC_PalTerminate>:
    8b88:	b508      	push	{r3, lr}
    8b8a:	4808      	ldr	r0, [pc, #32]	; (8bac <CC_PalTerminate+0x24>)
    8b8c:	f000 f824 	bl	8bd8 <CC_PalMutexDestroy>
    8b90:	4807      	ldr	r0, [pc, #28]	; (8bb0 <CC_PalTerminate+0x28>)
    8b92:	f000 f821 	bl	8bd8 <CC_PalMutexDestroy>
    8b96:	4807      	ldr	r0, [pc, #28]	; (8bb4 <CC_PalTerminate+0x2c>)
    8b98:	f000 f81e 	bl	8bd8 <CC_PalMutexDestroy>
    8b9c:	4806      	ldr	r0, [pc, #24]	; (8bb8 <CC_PalTerminate+0x30>)
    8b9e:	f000 f81b 	bl	8bd8 <CC_PalMutexDestroy>
    8ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8ba6:	f000 b80b 	b.w	8bc0 <CC_PalDmaTerminate>
    8baa:	bf00      	nop
    8bac:	200001d4 	.word	0x200001d4
    8bb0:	200001c8 	.word	0x200001c8
    8bb4:	200001d0 	.word	0x200001d0
    8bb8:	200001cc 	.word	0x200001cc

00008bbc <CC_PalDmaInit>:
    8bbc:	2000      	movs	r0, #0
    8bbe:	4770      	bx	lr

00008bc0 <CC_PalDmaTerminate>:
    8bc0:	4770      	bx	lr
    8bc2:	bf00      	nop

00008bc4 <CC_PalMutexCreate>:
    8bc4:	b508      	push	{r3, lr}
    8bc6:	4b03      	ldr	r3, [pc, #12]	; (8bd4 <CC_PalMutexCreate+0x10>)
    8bc8:	6802      	ldr	r2, [r0, #0]
    8bca:	681b      	ldr	r3, [r3, #0]
    8bcc:	6810      	ldr	r0, [r2, #0]
    8bce:	4798      	blx	r3
    8bd0:	2000      	movs	r0, #0
    8bd2:	bd08      	pop	{r3, pc}
    8bd4:	2000018c 	.word	0x2000018c

00008bd8 <CC_PalMutexDestroy>:
    8bd8:	b508      	push	{r3, lr}
    8bda:	4b03      	ldr	r3, [pc, #12]	; (8be8 <CC_PalMutexDestroy+0x10>)
    8bdc:	6802      	ldr	r2, [r0, #0]
    8bde:	685b      	ldr	r3, [r3, #4]
    8be0:	6810      	ldr	r0, [r2, #0]
    8be2:	4798      	blx	r3
    8be4:	2000      	movs	r0, #0
    8be6:	bd08      	pop	{r3, pc}
    8be8:	2000018c 	.word	0x2000018c

00008bec <CC_PalPowerSaveModeInit>:
    8bec:	b570      	push	{r4, r5, r6, lr}
    8bee:	4c09      	ldr	r4, [pc, #36]	; (8c14 <CC_PalPowerSaveModeInit+0x28>)
    8bf0:	4d09      	ldr	r5, [pc, #36]	; (8c18 <CC_PalPowerSaveModeInit+0x2c>)
    8bf2:	6920      	ldr	r0, [r4, #16]
    8bf4:	68ab      	ldr	r3, [r5, #8]
    8bf6:	4798      	blx	r3
    8bf8:	b118      	cbz	r0, 8c02 <CC_PalPowerSaveModeInit+0x16>
    8bfa:	4b08      	ldr	r3, [pc, #32]	; (8c1c <CC_PalPowerSaveModeInit+0x30>)
    8bfc:	4808      	ldr	r0, [pc, #32]	; (8c20 <CC_PalPowerSaveModeInit+0x34>)
    8bfe:	685b      	ldr	r3, [r3, #4]
    8c00:	4798      	blx	r3
    8c02:	4a08      	ldr	r2, [pc, #32]	; (8c24 <CC_PalPowerSaveModeInit+0x38>)
    8c04:	68eb      	ldr	r3, [r5, #12]
    8c06:	6920      	ldr	r0, [r4, #16]
    8c08:	2100      	movs	r1, #0
    8c0a:	6011      	str	r1, [r2, #0]
    8c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c10:	4718      	bx	r3
    8c12:	bf00      	nop
    8c14:	2000019c 	.word	0x2000019c
    8c18:	2000018c 	.word	0x2000018c
    8c1c:	2000017c 	.word	0x2000017c
    8c20:	00009e20 	.word	0x00009e20
    8c24:	20000c9c 	.word	0x20000c9c

00008c28 <CC_PalPowerSaveModeSelect>:
    8c28:	b570      	push	{r4, r5, r6, lr}
    8c2a:	4d1b      	ldr	r5, [pc, #108]	; (8c98 <CC_PalPowerSaveModeSelect+0x70>)
    8c2c:	4e1b      	ldr	r6, [pc, #108]	; (8c9c <CC_PalPowerSaveModeSelect+0x74>)
    8c2e:	4604      	mov	r4, r0
    8c30:	68b2      	ldr	r2, [r6, #8]
    8c32:	6928      	ldr	r0, [r5, #16]
    8c34:	4790      	blx	r2
    8c36:	b9f8      	cbnz	r0, 8c78 <CC_PalPowerSaveModeSelect+0x50>
    8c38:	b15c      	cbz	r4, 8c52 <CC_PalPowerSaveModeSelect+0x2a>
    8c3a:	4c19      	ldr	r4, [pc, #100]	; (8ca0 <CC_PalPowerSaveModeSelect+0x78>)
    8c3c:	6823      	ldr	r3, [r4, #0]
    8c3e:	b1b3      	cbz	r3, 8c6e <CC_PalPowerSaveModeSelect+0x46>
    8c40:	2b01      	cmp	r3, #1
    8c42:	d01b      	beq.n	8c7c <CC_PalPowerSaveModeSelect+0x54>
    8c44:	3b01      	subs	r3, #1
    8c46:	6023      	str	r3, [r4, #0]
    8c48:	6928      	ldr	r0, [r5, #16]
    8c4a:	68f3      	ldr	r3, [r6, #12]
    8c4c:	4798      	blx	r3
    8c4e:	2000      	movs	r0, #0
    8c50:	bd70      	pop	{r4, r5, r6, pc}
    8c52:	4c13      	ldr	r4, [pc, #76]	; (8ca0 <CC_PalPowerSaveModeSelect+0x78>)
    8c54:	6821      	ldr	r1, [r4, #0]
    8c56:	b941      	cbnz	r1, 8c6a <CC_PalPowerSaveModeSelect+0x42>
    8c58:	4b12      	ldr	r3, [pc, #72]	; (8ca4 <CC_PalPowerSaveModeSelect+0x7c>)
    8c5a:	2201      	movs	r2, #1
    8c5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8c60:	4a11      	ldr	r2, [pc, #68]	; (8ca8 <CC_PalPowerSaveModeSelect+0x80>)
    8c62:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8c66:	2b00      	cmp	r3, #0
    8c68:	d1fb      	bne.n	8c62 <CC_PalPowerSaveModeSelect+0x3a>
    8c6a:	3101      	adds	r1, #1
    8c6c:	6021      	str	r1, [r4, #0]
    8c6e:	68f3      	ldr	r3, [r6, #12]
    8c70:	6928      	ldr	r0, [r5, #16]
    8c72:	4798      	blx	r3
    8c74:	2000      	movs	r0, #0
    8c76:	bd70      	pop	{r4, r5, r6, pc}
    8c78:	480c      	ldr	r0, [pc, #48]	; (8cac <CC_PalPowerSaveModeSelect+0x84>)
    8c7a:	bd70      	pop	{r4, r5, r6, pc}
    8c7c:	4a0a      	ldr	r2, [pc, #40]	; (8ca8 <CC_PalPowerSaveModeSelect+0x80>)
    8c7e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8c82:	2b00      	cmp	r3, #0
    8c84:	d1fb      	bne.n	8c7e <CC_PalPowerSaveModeSelect+0x56>
    8c86:	4a07      	ldr	r2, [pc, #28]	; (8ca4 <CC_PalPowerSaveModeSelect+0x7c>)
    8c88:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8c8c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8c90:	f7ff ff46 	bl	8b20 <CC_HalMaskInterrupt>
    8c94:	6823      	ldr	r3, [r4, #0]
    8c96:	e7d5      	b.n	8c44 <CC_PalPowerSaveModeSelect+0x1c>
    8c98:	2000019c 	.word	0x2000019c
    8c9c:	2000018c 	.word	0x2000018c
    8ca0:	20000c9c 	.word	0x20000c9c
    8ca4:	5002a000 	.word	0x5002a000
    8ca8:	5002b000 	.word	0x5002b000
    8cac:	ffff8fe9 	.word	0xffff8fe9

00008cb0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8cb0:	4770      	bx	lr

00008cb2 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    8cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8cb6:	4607      	mov	r7, r0
    8cb8:	460e      	mov	r6, r1
    8cba:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8cbc:	461d      	mov	r5, r3
    8cbe:	b30b      	cbz	r3, 8d04 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    8cc0:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    8cc2:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    8cc4:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	4414      	add	r4, r2
    8ccc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8cd0:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8cd2:	f04f 0900 	mov.w	r9, #0
    8cd6:	45d1      	cmp	r9, sl
    8cd8:	d308      	bcc.n	8cec <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    8cda:	686a      	ldr	r2, [r5, #4]
    8cdc:	f105 0308 	add.w	r3, r5, #8
    8ce0:	4641      	mov	r1, r8
    8ce2:	4638      	mov	r0, r7
    8ce4:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    8ce6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8cea:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8cec:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8cf0:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    8cf4:	4620      	mov	r0, r4
    8cf6:	f000 f9de 	bl	90b6 <strlen>
    8cfa:	3001      	adds	r0, #1
    8cfc:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8cfe:	f109 0901 	add.w	r9, r9, #1
    8d02:	e7e8      	b.n	8cd6 <cbpprintf_external+0x24>
}
    8d04:	f06f 0015 	mvn.w	r0, #21
    8d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008d0c <sys_notify_validate>:
	if (notify == NULL) {
    8d0c:	4603      	mov	r3, r0
    8d0e:	b158      	cbz	r0, 8d28 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8d10:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8d12:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8d16:	2a01      	cmp	r2, #1
    8d18:	d003      	beq.n	8d22 <sys_notify_validate+0x16>
    8d1a:	2a03      	cmp	r2, #3
    8d1c:	d104      	bne.n	8d28 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8d1e:	6802      	ldr	r2, [r0, #0]
    8d20:	b112      	cbz	r2, 8d28 <sys_notify_validate+0x1c>
		notify->result = 0;
    8d22:	2000      	movs	r0, #0
    8d24:	6098      	str	r0, [r3, #8]
    8d26:	4770      	bx	lr
		return -EINVAL;
    8d28:	f06f 0015 	mvn.w	r0, #21
}
    8d2c:	4770      	bx	lr

00008d2e <arch_printk_char_out>:
}
    8d2e:	2000      	movs	r0, #0
    8d30:	4770      	bx	lr

00008d32 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    8d32:	f000 b90f 	b.w	8f54 <z_log_vprintk>

00008d36 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8d36:	b40f      	push	{r0, r1, r2, r3}
    8d38:	b507      	push	{r0, r1, r2, lr}
    8d3a:	a904      	add	r1, sp, #16
    8d3c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8d40:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8d42:	f000 f907 	bl	8f54 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8d46:	b003      	add	sp, #12
    8d48:	f85d eb04 	ldr.w	lr, [sp], #4
    8d4c:	b004      	add	sp, #16
    8d4e:	4770      	bx	lr

00008d50 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8d50:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8d52:	f013 0307 	ands.w	r3, r3, #7
    8d56:	d105      	bne.n	8d64 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8d58:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	bf0c      	ite	eq
    8d5e:	2000      	moveq	r0, #0
    8d60:	2003      	movne	r0, #3
    8d62:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8d64:	2b02      	cmp	r3, #2
    8d66:	d105      	bne.n	8d74 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8d68:	8bc0      	ldrh	r0, [r0, #30]
    8d6a:	fab0 f080 	clz	r0, r0
    8d6e:	0940      	lsrs	r0, r0, #5
    8d70:	0080      	lsls	r0, r0, #2
    8d72:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8d74:	2b01      	cmp	r3, #1
    8d76:	d105      	bne.n	8d84 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8d78:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	bf0c      	ite	eq
    8d7e:	2000      	moveq	r0, #0
    8d80:	2005      	movne	r0, #5
    8d82:	4770      	bx	lr
	int evt = EVT_NOP;
    8d84:	2000      	movs	r0, #0
}
    8d86:	4770      	bx	lr

00008d88 <notify_one>:
{
    8d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d8c:	460d      	mov	r5, r1
    8d8e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8d90:	4619      	mov	r1, r3
    8d92:	1d28      	adds	r0, r5, #4
{
    8d94:	4690      	mov	r8, r2
    8d96:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8d98:	f7f8 f9c8 	bl	112c <sys_notify_finalize>
	if (cb) {
    8d9c:	4604      	mov	r4, r0
    8d9e:	b138      	cbz	r0, 8db0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8da0:	4633      	mov	r3, r6
    8da2:	4642      	mov	r2, r8
    8da4:	4629      	mov	r1, r5
    8da6:	4638      	mov	r0, r7
    8da8:	46a4      	mov	ip, r4
}
    8daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8dae:	4760      	bx	ip
}
    8db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008db4 <validate_args>:
{
    8db4:	b510      	push	{r4, lr}
    8db6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8db8:	b140      	cbz	r0, 8dcc <validate_args+0x18>
    8dba:	b139      	cbz	r1, 8dcc <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8dbc:	1d08      	adds	r0, r1, #4
    8dbe:	f7ff ffa5 	bl	8d0c <sys_notify_validate>
	if ((rv == 0)
    8dc2:	b928      	cbnz	r0, 8dd0 <validate_args+0x1c>
	    && ((cli->notify.flags
    8dc4:	68a3      	ldr	r3, [r4, #8]
    8dc6:	f033 0303 	bics.w	r3, r3, #3
    8dca:	d001      	beq.n	8dd0 <validate_args+0x1c>
		rv = -EINVAL;
    8dcc:	f06f 0015 	mvn.w	r0, #21
}
    8dd0:	bd10      	pop	{r4, pc}

00008dd2 <onoff_manager_init>:
{
    8dd2:	b538      	push	{r3, r4, r5, lr}
    8dd4:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8dd6:	4605      	mov	r5, r0
    8dd8:	b158      	cbz	r0, 8df2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8dda:	b151      	cbz	r1, 8df2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8ddc:	680b      	ldr	r3, [r1, #0]
    8dde:	b143      	cbz	r3, 8df2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8de0:	684b      	ldr	r3, [r1, #4]
    8de2:	b133      	cbz	r3, 8df2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8de4:	2220      	movs	r2, #32
    8de6:	2100      	movs	r1, #0
    8de8:	f000 f98c 	bl	9104 <memset>
    8dec:	612c      	str	r4, [r5, #16]
	return 0;
    8dee:	2000      	movs	r0, #0
}
    8df0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8df2:	f06f 0015 	mvn.w	r0, #21
    8df6:	e7fb      	b.n	8df0 <onoff_manager_init+0x1e>

00008df8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8df8:	4604      	mov	r4, r0
    8dfa:	b508      	push	{r3, lr}
    8dfc:	4608      	mov	r0, r1
    8dfe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8e00:	461a      	mov	r2, r3
    8e02:	47a0      	blx	r4
	return z_impl_z_current_get();
    8e04:	f7fe ff06 	bl	7c14 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8e08:	f7fa fc48 	bl	369c <z_impl_k_thread_abort>

00008e0c <chunk_size>:
		return ((uint16_t *)cmem)[f];
    8e0c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8e10:	8840      	ldrh	r0, [r0, #2]
}
    8e12:	0840      	lsrs	r0, r0, #1
    8e14:	4770      	bx	lr

00008e16 <free_list_add>:
{
    8e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e18:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    8e1a:	f7ff fff7 	bl	8e0c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8e1e:	fab0 f080 	clz	r0, r0
    8e22:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8e26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    8e2a:	00ca      	lsls	r2, r1, #3
    8e2c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8e30:	1d17      	adds	r7, r2, #4
{
    8e32:	460c      	mov	r4, r1
    8e34:	3206      	adds	r2, #6
    8e36:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    8e38:	b956      	cbnz	r6, 8e50 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8e3a:	2101      	movs	r1, #1
    8e3c:	fa01 f000 	lsl.w	r0, r1, r0
    8e40:	68d9      	ldr	r1, [r3, #12]
    8e42:	4301      	orrs	r1, r0
    8e44:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8e46:	f8cc 4010 	str.w	r4, [ip, #16]
    8e4a:	53dd      	strh	r5, [r3, r7]
    8e4c:	529d      	strh	r5, [r3, r2]
}
    8e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    8e50:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    8e52:	3104      	adds	r1, #4
    8e54:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8e56:	53d8      	strh	r0, [r3, r7]
    8e58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8e5c:	529e      	strh	r6, [r3, r2]
    8e5e:	80c5      	strh	r5, [r0, #6]
    8e60:	525d      	strh	r5, [r3, r1]
    8e62:	e7f4      	b.n	8e4e <free_list_add+0x38>

00008e64 <encode_uint>:
{
    8e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e68:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    8e6a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    8e6c:	2b6f      	cmp	r3, #111	; 0x6f
{
    8e6e:	4680      	mov	r8, r0
    8e70:	460f      	mov	r7, r1
    8e72:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8e74:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8e78:	d029      	beq.n	8ece <encode_uint+0x6a>
    8e7a:	d824      	bhi.n	8ec6 <encode_uint+0x62>
		return 16;
    8e7c:	2b58      	cmp	r3, #88	; 0x58
    8e7e:	bf14      	ite	ne
    8e80:	260a      	movne	r6, #10
    8e82:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    8e84:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    8e88:	4632      	mov	r2, r6
    8e8a:	2300      	movs	r3, #0
    8e8c:	4640      	mov	r0, r8
    8e8e:	4639      	mov	r1, r7
    8e90:	f7f7 fb68 	bl	564 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e94:	2a09      	cmp	r2, #9
    8e96:	b2d4      	uxtb	r4, r2
    8e98:	d81e      	bhi.n	8ed8 <encode_uint+0x74>
    8e9a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8e9c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e9e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8ea0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ea4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8ea8:	d301      	bcc.n	8eae <encode_uint+0x4a>
    8eaa:	45d1      	cmp	r9, sl
    8eac:	d811      	bhi.n	8ed2 <encode_uint+0x6e>
	if (conv->flag_hash) {
    8eae:	782b      	ldrb	r3, [r5, #0]
    8eb0:	069b      	lsls	r3, r3, #26
    8eb2:	d505      	bpl.n	8ec0 <encode_uint+0x5c>
		if (radix == 8) {
    8eb4:	2e08      	cmp	r6, #8
    8eb6:	d115      	bne.n	8ee4 <encode_uint+0x80>
			conv->altform_0 = true;
    8eb8:	78ab      	ldrb	r3, [r5, #2]
    8eba:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8ebe:	70ab      	strb	r3, [r5, #2]
}
    8ec0:	4648      	mov	r0, r9
    8ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8ec6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8eca:	2b70      	cmp	r3, #112	; 0x70
    8ecc:	e7d7      	b.n	8e7e <encode_uint+0x1a>
	switch (specifier) {
    8ece:	2608      	movs	r6, #8
    8ed0:	e7d8      	b.n	8e84 <encode_uint+0x20>
		value /= radix;
    8ed2:	4680      	mov	r8, r0
    8ed4:	460f      	mov	r7, r1
    8ed6:	e7d7      	b.n	8e88 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8ed8:	f1bb 0f19 	cmp.w	fp, #25
    8edc:	bf94      	ite	ls
    8ede:	3437      	addls	r4, #55	; 0x37
    8ee0:	3457      	addhi	r4, #87	; 0x57
    8ee2:	e7db      	b.n	8e9c <encode_uint+0x38>
		} else if (radix == 16) {
    8ee4:	2e10      	cmp	r6, #16
    8ee6:	d1eb      	bne.n	8ec0 <encode_uint+0x5c>
			conv->altform_0c = true;
    8ee8:	78ab      	ldrb	r3, [r5, #2]
    8eea:	f043 0310 	orr.w	r3, r3, #16
    8eee:	e7e6      	b.n	8ebe <encode_uint+0x5a>

00008ef0 <outs>:
{
    8ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ef4:	4607      	mov	r7, r0
    8ef6:	4688      	mov	r8, r1
    8ef8:	4615      	mov	r5, r2
    8efa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8efc:	4614      	mov	r4, r2
    8efe:	42b4      	cmp	r4, r6
    8f00:	eba4 0005 	sub.w	r0, r4, r5
    8f04:	d302      	bcc.n	8f0c <outs+0x1c>
    8f06:	b93e      	cbnz	r6, 8f18 <outs+0x28>
    8f08:	7823      	ldrb	r3, [r4, #0]
    8f0a:	b12b      	cbz	r3, 8f18 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8f0c:	f814 0b01 	ldrb.w	r0, [r4], #1
    8f10:	4641      	mov	r1, r8
    8f12:	47b8      	blx	r7
		if (rc < 0) {
    8f14:	2800      	cmp	r0, #0
    8f16:	daf2      	bge.n	8efe <outs+0xe>
}
    8f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008f1c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8f1c:	4040      	eors	r0, r0
    8f1e:	f380 8811 	msr	BASEPRI, r0
    8f22:	f04f 0004 	mov.w	r0, #4
    8f26:	df02      	svc	2
}
    8f28:	4770      	bx	lr

00008f2a <assert_print>:

void assert_print(const char *fmt, ...)
{
    8f2a:	b40f      	push	{r0, r1, r2, r3}
    8f2c:	b507      	push	{r0, r1, r2, lr}
    8f2e:	a904      	add	r1, sp, #16
    8f30:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8f34:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8f36:	f7ff fefc 	bl	8d32 <vprintk>

	va_end(ap);
}
    8f3a:	b003      	add	sp, #12
    8f3c:	f85d eb04 	ldr.w	lr, [sp], #4
    8f40:	b004      	add	sp, #16
    8f42:	4770      	bx	lr

00008f44 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8f44:	4770      	bx	lr

00008f46 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    8f46:	6843      	ldr	r3, [r0, #4]
}
    8f48:	7958      	ldrb	r0, [r3, #5]
    8f4a:	4770      	bx	lr

00008f4c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8f4c:	f000 ba2e 	b.w	93ac <sys_clock_cycle_get_32>

00008f50 <dummy_timestamp>:
    8f50:	2000      	movs	r0, #0
    8f52:	4770      	bx	lr

00008f54 <z_log_vprintk>:
{
    8f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8f56:	2300      	movs	r3, #0
    8f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8f5c:	e9cd 3300 	strd	r3, r3, [sp]
    8f60:	461a      	mov	r2, r3
    8f62:	4619      	mov	r1, r3
    8f64:	4618      	mov	r0, r3
    8f66:	f7f9 faeb 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    8f6a:	b005      	add	sp, #20
    8f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00008f70 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    8f70:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    8f72:	f7f9 f849 	bl	2008 <log_init>
	}

	return 0;
}
    8f76:	2000      	movs	r0, #0
    8f78:	bd08      	pop	{r3, pc}

00008f7a <z_log_get_tag>:
}
    8f7a:	2000      	movs	r0, #0
    8f7c:	4770      	bx	lr

00008f7e <out_func>:
{
    8f7e:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8f80:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    8f84:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8f88:	6852      	ldr	r2, [r2, #4]
    8f8a:	2101      	movs	r1, #1
    8f8c:	f10d 0007 	add.w	r0, sp, #7
    8f90:	4798      	blx	r3
}
    8f92:	2000      	movs	r0, #0
    8f94:	b003      	add	sp, #12
    8f96:	f85d fb04 	ldr.w	pc, [sp], #4

00008f9a <cr_out_func>:
{
    8f9a:	b538      	push	{r3, r4, r5, lr}
    8f9c:	4605      	mov	r5, r0
    8f9e:	460c      	mov	r4, r1
	out_func(c, ctx);
    8fa0:	f7ff ffed 	bl	8f7e <out_func>
	if (c == '\n') {
    8fa4:	2d0a      	cmp	r5, #10
    8fa6:	d103      	bne.n	8fb0 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    8fa8:	4621      	mov	r1, r4
    8faa:	200d      	movs	r0, #13
    8fac:	f7ff ffe7 	bl	8f7e <out_func>
}
    8fb0:	2000      	movs	r0, #0
    8fb2:	bd38      	pop	{r3, r4, r5, pc}

00008fb4 <buffer_write>:
{
    8fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fb6:	4606      	mov	r6, r0
    8fb8:	460d      	mov	r5, r1
    8fba:	4614      	mov	r4, r2
    8fbc:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    8fbe:	4621      	mov	r1, r4
    8fc0:	4628      	mov	r0, r5
    8fc2:	463a      	mov	r2, r7
    8fc4:	47b0      	blx	r6
	} while (len != 0);
    8fc6:	1a24      	subs	r4, r4, r0
		buf += processed;
    8fc8:	4405      	add	r5, r0
	} while (len != 0);
    8fca:	d1f8      	bne.n	8fbe <buffer_write+0xa>
}
    8fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008fce <log_output_flush>:
		     output->control_block->offset,
    8fce:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8fd0:	6881      	ldr	r1, [r0, #8]
{
    8fd2:	b510      	push	{r4, lr}
    8fd4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    8fd6:	e9d2 2300 	ldrd	r2, r3, [r2]
    8fda:	6800      	ldr	r0, [r0, #0]
    8fdc:	f7ff ffea 	bl	8fb4 <buffer_write>
	output->control_block->offset = 0;
    8fe0:	6863      	ldr	r3, [r4, #4]
    8fe2:	2200      	movs	r2, #0
    8fe4:	601a      	str	r2, [r3, #0]
}
    8fe6:	bd10      	pop	{r4, pc}

00008fe8 <z_log_msg2_finalize>:
{
    8fe8:	b570      	push	{r4, r5, r6, lr}
    8fea:	460e      	mov	r6, r1
    8fec:	4615      	mov	r5, r2
    8fee:	4619      	mov	r1, r3
	if (!msg) {
    8ff0:	4604      	mov	r4, r0
    8ff2:	b918      	cbnz	r0, 8ffc <z_log_msg2_finalize+0x14>
}
    8ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    8ff8:	f7f9 b86c 	b.w	20d4 <z_log_dropped>
	if (data) {
    8ffc:	b13b      	cbz	r3, 900e <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    8ffe:	f3c2 2349 	ubfx	r3, r2, #9, #10
    9002:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    9004:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    9008:	4418      	add	r0, r3
    900a:	f000 f870 	bl	90ee <memcpy>
	msg->hdr.source = source;
    900e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    9012:	4620      	mov	r0, r4
}
    9014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    9018:	f7f9 b87a 	b.w	2110 <z_log_msg2_commit>

0000901c <abort_function>:
{
    901c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    901e:	2000      	movs	r0, #0
    9020:	f7f8 ff90 	bl	1f44 <sys_reboot>

00009024 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9024:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9026:	ab0b      	add	r3, sp, #44	; 0x2c
    9028:	9305      	str	r3, [sp, #20]
    902a:	9303      	str	r3, [sp, #12]
    902c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    902e:	9302      	str	r3, [sp, #8]
    9030:	2300      	movs	r3, #0
    9032:	e9cd 3300 	strd	r3, r3, [sp]
    9036:	2201      	movs	r2, #1
    9038:	4618      	mov	r0, r3
    903a:	f7f9 fa81 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    903e:	b007      	add	sp, #28
    9040:	f85d fb04 	ldr.w	pc, [sp], #4

00009044 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    9044:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    9046:	6800      	ldr	r0, [r0, #0]
    9048:	f7f9 be0a 	b.w	2c60 <z_arm_fatal_error>

0000904c <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    904c:	2100      	movs	r1, #0
    904e:	2001      	movs	r0, #1
    9050:	f7f9 be06 	b.w	2c60 <z_arm_fatal_error>

00009054 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9054:	b508      	push	{r3, lr}
	handler();
    9056:	f7f9 fea7 	bl	2da8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    905a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    905e:	f7f9 bf7f 	b.w	2f60 <z_arm_exc_exit>

00009062 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9062:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9064:	ab0b      	add	r3, sp, #44	; 0x2c
    9066:	9305      	str	r3, [sp, #20]
    9068:	9303      	str	r3, [sp, #12]
    906a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    906c:	9302      	str	r3, [sp, #8]
    906e:	2300      	movs	r3, #0
    9070:	e9cd 3300 	strd	r3, r3, [sp]
    9074:	2201      	movs	r2, #1
    9076:	4618      	mov	r0, r3
    9078:	f7f9 fa62 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    907c:	b007      	add	sp, #28
    907e:	f85d fb04 	ldr.w	pc, [sp], #4

00009082 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9082:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9084:	ab0b      	add	r3, sp, #44	; 0x2c
    9086:	9305      	str	r3, [sp, #20]
    9088:	9303      	str	r3, [sp, #12]
    908a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    908c:	9302      	str	r3, [sp, #8]
    908e:	2300      	movs	r3, #0
    9090:	e9cd 3300 	strd	r3, r3, [sp]
    9094:	2201      	movs	r2, #1
    9096:	4618      	mov	r0, r3
    9098:	f7f9 fa52 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    909c:	b007      	add	sp, #28
    909e:	f85d fb04 	ldr.w	pc, [sp], #4

000090a2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    90a2:	3901      	subs	r1, #1
    90a4:	4603      	mov	r3, r0
    90a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    90aa:	b90a      	cbnz	r2, 90b0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    90ac:	701a      	strb	r2, [r3, #0]

	return dest;
}
    90ae:	4770      	bx	lr
		*d = *s;
    90b0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    90b4:	e7f7      	b.n	90a6 <strcpy+0x4>

000090b6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    90b6:	4603      	mov	r3, r0
	size_t n = 0;
    90b8:	2000      	movs	r0, #0

	while (*s != '\0') {
    90ba:	5c1a      	ldrb	r2, [r3, r0]
    90bc:	b902      	cbnz	r2, 90c0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    90be:	4770      	bx	lr
		n++;
    90c0:	3001      	adds	r0, #1
    90c2:	e7fa      	b.n	90ba <strlen+0x4>

000090c4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    90c4:	4603      	mov	r3, r0
	size_t n = 0;
    90c6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    90c8:	5c1a      	ldrb	r2, [r3, r0]
    90ca:	b10a      	cbz	r2, 90d0 <strnlen+0xc>
    90cc:	4288      	cmp	r0, r1
    90ce:	d100      	bne.n	90d2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    90d0:	4770      	bx	lr
		n++;
    90d2:	3001      	adds	r0, #1
    90d4:	e7f8      	b.n	90c8 <strnlen+0x4>

000090d6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    90d6:	1e43      	subs	r3, r0, #1
    90d8:	3901      	subs	r1, #1
    90da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    90de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    90e2:	4282      	cmp	r2, r0
    90e4:	d101      	bne.n	90ea <strcmp+0x14>
    90e6:	2a00      	cmp	r2, #0
    90e8:	d1f7      	bne.n	90da <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    90ea:	1a10      	subs	r0, r2, r0
    90ec:	4770      	bx	lr

000090ee <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    90ee:	b510      	push	{r4, lr}
    90f0:	1e43      	subs	r3, r0, #1
    90f2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    90f4:	4291      	cmp	r1, r2
    90f6:	d100      	bne.n	90fa <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    90f8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    90fa:	f811 4b01 	ldrb.w	r4, [r1], #1
    90fe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9102:	e7f7      	b.n	90f4 <memcpy+0x6>

00009104 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9104:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9106:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9108:	4603      	mov	r3, r0
	while (n > 0) {
    910a:	4293      	cmp	r3, r2
    910c:	d100      	bne.n	9110 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    910e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9110:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9114:	e7f9      	b.n	910a <memset+0x6>

00009116 <_stdout_hook_default>:
}
    9116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    911a:	4770      	bx	lr

0000911c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    911c:	2806      	cmp	r0, #6
    911e:	d108      	bne.n	9132 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9124:	2201      	movs	r2, #1
    9126:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    912a:	f3bf 8f4f 	dsb	sy
        __WFE();
    912e:	bf20      	wfe
    while (true)
    9130:	e7fd      	b.n	912e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9132:	4770      	bx	lr

00009134 <pm_state_exit_post_ops>:
    9134:	2300      	movs	r3, #0
    9136:	f383 8811 	msr	BASEPRI, r3
    913a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    913e:	4770      	bx	lr

00009140 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9142:	ab0b      	add	r3, sp, #44	; 0x2c
    9144:	9305      	str	r3, [sp, #20]
    9146:	9303      	str	r3, [sp, #12]
    9148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    914a:	9302      	str	r3, [sp, #8]
    914c:	2300      	movs	r3, #0
    914e:	e9cd 3300 	strd	r3, r3, [sp]
    9152:	2201      	movs	r2, #1
    9154:	4618      	mov	r0, r3
    9156:	f7f9 f9f3 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    915a:	b007      	add	sp, #28
    915c:	f85d fb04 	ldr.w	pc, [sp], #4

00009160 <adc_context_on_timer_expired>:
{
    9160:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9162:	f1a0 0308 	sub.w	r3, r0, #8
    9166:	f3bf 8f5b 	dmb	ish
    916a:	e853 2f00 	ldrex	r2, [r3]
    916e:	1c51      	adds	r1, r2, #1
    9170:	e843 1400 	strex	r4, r1, [r3]
    9174:	2c00      	cmp	r4, #0
    9176:	d1f8      	bne.n	916a <adc_context_on_timer_expired+0xa>
    9178:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    917c:	b922      	cbnz	r2, 9188 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
    917e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
}
    9182:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
    9184:	f7fa bcc0 	b.w	3b08 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    9188:	f06f 030f 	mvn.w	r3, #15
}
    918c:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
    918e:	6583      	str	r3, [r0, #88]	; 0x58
}
    9190:	4770      	bx	lr

00009192 <set_on_state>:
	__asm__ volatile(
    9192:	f04f 0340 	mov.w	r3, #64	; 0x40
    9196:	f3ef 8211 	mrs	r2, BASEPRI
    919a:	f383 8812 	msr	BASEPRI_MAX, r3
    919e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    91a2:	6803      	ldr	r3, [r0, #0]
    91a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    91a8:	f043 0302 	orr.w	r3, r3, #2
    91ac:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    91ae:	f382 8811 	msr	BASEPRI, r2
    91b2:	f3bf 8f6f 	isb	sy
}
    91b6:	4770      	bx	lr

000091b8 <async_start>:
{
    91b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91ba:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    91bc:	6904      	ldr	r4, [r0, #16]
{
    91be:	4605      	mov	r5, r0
    91c0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    91c2:	f04f 0040 	mov.w	r0, #64	; 0x40
    91c6:	f3ef 8c11 	mrs	ip, BASEPRI
    91ca:	f380 8812 	msr	BASEPRI_MAX, r0
    91ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    91d2:	260c      	movs	r6, #12
    91d4:	fb06 4601 	mla	r6, r6, r1, r4
    91d8:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    91da:	f000 0e07 	and.w	lr, r0, #7
    91de:	f1be 0f01 	cmp.w	lr, #1
    91e2:	d110      	bne.n	9206 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    91e4:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    91e6:	2600      	movs	r6, #0
	__asm__ volatile(
    91e8:	f38c 8811 	msr	BASEPRI, ip
    91ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    91f0:	b93e      	cbnz	r6, 9202 <async_start+0x4a>
	subdata->cb = cb;
    91f2:	200c      	movs	r0, #12
    91f4:	4341      	muls	r1, r0
    91f6:	440c      	add	r4, r1
	subdata->user_data = user_data;
    91f8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    91fc:	686b      	ldr	r3, [r5, #4]
    91fe:	585b      	ldr	r3, [r3, r1]
    9200:	4798      	blx	r3
}
    9202:	4630      	mov	r0, r6
    9204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9206:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    920a:	4287      	cmp	r7, r0
    920c:	bf14      	ite	ne
    920e:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    9212:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    9216:	e7e7      	b.n	91e8 <async_start+0x30>

00009218 <api_start>:
{
    9218:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    921a:	2480      	movs	r4, #128	; 0x80
    921c:	9400      	str	r4, [sp, #0]
    921e:	f7ff ffcb 	bl	91b8 <async_start>
}
    9222:	b002      	add	sp, #8
    9224:	bd10      	pop	{r4, pc}

00009226 <onoff_started_callback>:
	return &data->mgr[type];
    9226:	6900      	ldr	r0, [r0, #16]
    9228:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    922a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    922e:	2100      	movs	r1, #0
    9230:	4710      	bx	r2

00009232 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9232:	2000      	movs	r0, #0
    9234:	f7fc b86e 	b.w	5314 <nrfx_clock_start>

00009238 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9238:	2000      	movs	r0, #0
    923a:	f7fc b8cf 	b.w	53dc <nrfx_clock_stop>

0000923e <api_stop>:
	return stop(dev, subsys, CTX_API);
    923e:	2280      	movs	r2, #128	; 0x80
    9240:	f7fa be30 	b.w	3ea4 <stop>

00009244 <blocking_start_callback>:
{
    9244:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9246:	f7fd bb91 	b.w	696c <z_impl_k_sem_give>

0000924a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    924a:	6843      	ldr	r3, [r0, #4]
    924c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    924e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9252:	600b      	str	r3, [r1, #0]
}
    9254:	2000      	movs	r0, #0
    9256:	4770      	bx	lr

00009258 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9258:	6843      	ldr	r3, [r0, #4]
    925a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    925c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9260:	4042      	eors	r2, r0
    9262:	400a      	ands	r2, r1
    9264:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9266:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    926a:	2000      	movs	r0, #0
    926c:	4770      	bx	lr

0000926e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    926e:	6843      	ldr	r3, [r0, #4]
    9270:	685b      	ldr	r3, [r3, #4]
}
    9272:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9274:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9278:	4770      	bx	lr

0000927a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    927a:	6843      	ldr	r3, [r0, #4]
    927c:	685b      	ldr	r3, [r3, #4]
}
    927e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9280:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9284:	4770      	bx	lr

00009286 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9286:	6843      	ldr	r3, [r0, #4]
    9288:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    928a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    928e:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9290:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9294:	2000      	movs	r0, #0
    9296:	4770      	bx	lr

00009298 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    9298:	6902      	ldr	r2, [r0, #16]
{
    929a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    929c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    92a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    92a4:	2000      	movs	r0, #0
    92a6:	4770      	bx	lr

000092a8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    92a8:	6843      	ldr	r3, [r0, #4]
    92aa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    92ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    92b0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    92b4:	4770      	bx	lr

000092b6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    92b6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    92b8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    92ba:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    92bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    92c0:	b148      	cbz	r0, 92d6 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    92c2:	7c52      	ldrb	r2, [r2, #17]
    92c4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    92c6:	2000      	movs	r0, #0
    92c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    92cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    92d0:	2201      	movs	r2, #1
    92d2:	601a      	str	r2, [r3, #0]
	return 0;
    92d4:	4770      	bx	lr
		return -1;
    92d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    92da:	4770      	bx	lr

000092dc <is_tx_ready.isra.0>:
	return config->uarte_regs;
    92dc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    92de:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    92e0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    92e4:	b940      	cbnz	r0, 92f8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    92e6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    92e8:	079b      	lsls	r3, r3, #30
    92ea:	d406      	bmi.n	92fa <is_tx_ready.isra.0+0x1e>
    92ec:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    92f0:	3800      	subs	r0, #0
    92f2:	bf18      	it	ne
    92f4:	2001      	movne	r0, #1
    92f6:	4770      	bx	lr
    92f8:	2001      	movs	r0, #1
}
    92fa:	4770      	bx	lr

000092fc <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    92fc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    92fe:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9300:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9304:	05c9      	lsls	r1, r1, #23
    9306:	d518      	bpl.n	933a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9308:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    930c:	b1a9      	cbz	r1, 933a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    930e:	f04f 0040 	mov.w	r0, #64	; 0x40
    9312:	f3ef 8111 	mrs	r1, BASEPRI
    9316:	f380 8812 	msr	BASEPRI_MAX, r0
    931a:	f3bf 8f6f 	isb	sy
    931e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9322:	b130      	cbz	r0, 9332 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9324:	2000      	movs	r0, #0
    9326:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    932a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    932e:	2001      	movs	r0, #1
    9330:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    9332:	f381 8811 	msr	BASEPRI, r1
    9336:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    933a:	6852      	ldr	r2, [r2, #4]
    933c:	06d2      	lsls	r2, r2, #27
    933e:	d515      	bpl.n	936c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    9340:	f04f 0140 	mov.w	r1, #64	; 0x40
    9344:	f3ef 8211 	mrs	r2, BASEPRI
    9348:	f381 8812 	msr	BASEPRI_MAX, r1
    934c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9350:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9354:	b111      	cbz	r1, 935c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9356:	2100      	movs	r1, #0
    9358:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    935c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9360:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    9364:	f382 8811 	msr	BASEPRI, r2
    9368:	f3bf 8f6f 	isb	sy
}
    936c:	4770      	bx	lr

0000936e <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    936e:	b510      	push	{r4, lr}
    9370:	2200      	movs	r2, #0
    9372:	4604      	mov	r4, r0
    9374:	2101      	movs	r1, #1
    9376:	2028      	movs	r0, #40	; 0x28
    9378:	f7f9 fcde 	bl	2d38 <z_arm_irq_priority_set>
    937c:	2028      	movs	r0, #40	; 0x28
    937e:	f7f9 fcbf 	bl	2d00 <arch_irq_enable>
    9382:	4620      	mov	r0, r4
    9384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9388:	f7fb ba44 	b.w	4814 <uarte_instance_init.constprop.0>

0000938c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    938c:	b510      	push	{r4, lr}
    938e:	2200      	movs	r2, #0
    9390:	4604      	mov	r4, r0
    9392:	2101      	movs	r1, #1
    9394:	2002      	movs	r0, #2
    9396:	f7f9 fccf 	bl	2d38 <z_arm_irq_priority_set>
    939a:	2002      	movs	r0, #2
    939c:	f7f9 fcb0 	bl	2d00 <arch_irq_enable>
    93a0:	4620      	mov	r0, r4
    93a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93a6:	f7fb ba35 	b.w	4814 <uarte_instance_init.constprop.0>

000093aa <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    93aa:	4770      	bx	lr

000093ac <sys_clock_cycle_get_32>:
{
    93ac:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    93ae:	f7fb fba3 	bl	4af8 <z_nrf_rtc_timer_read>
}
    93b2:	bd08      	pop	{r3, pc}

000093b4 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    93b4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    93b6:	6843      	ldr	r3, [r0, #4]
    93b8:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    93ba:	7a03      	ldrb	r3, [r0, #8]
    93bc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    93c0:	3b01      	subs	r3, #1
    93c2:	00db      	lsls	r3, r3, #3
    93c4:	6845      	ldr	r5, [r0, #4]
    93c6:	6814      	ldr	r4, [r2, #0]
    93c8:	441d      	add	r5, r3
    93ca:	42ac      	cmp	r4, r5
    93cc:	d902      	bls.n	93d4 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    93ce:	f06f 0001 	mvn.w	r0, #1
}
    93d2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    93d4:	7965      	ldrb	r5, [r4, #5]
    93d6:	428d      	cmp	r5, r1
    93d8:	d002      	beq.n	93e0 <pinctrl_lookup_state+0x2c>
		(*state)++;
    93da:	3408      	adds	r4, #8
    93dc:	6014      	str	r4, [r2, #0]
    93de:	e7f1      	b.n	93c4 <pinctrl_lookup_state+0x10>
			return 0;
    93e0:	2000      	movs	r0, #0
    93e2:	e7f6      	b.n	93d2 <pinctrl_lookup_state+0x1e>

000093e4 <nrf_gpio_pin_clear>:
{
    93e4:	b507      	push	{r0, r1, r2, lr}
    93e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    93e8:	a801      	add	r0, sp, #4
    93ea:	f7fb fd29 	bl	4e40 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    93ee:	9a01      	ldr	r2, [sp, #4]
    93f0:	2301      	movs	r3, #1
    93f2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    93f4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    93f8:	b003      	add	sp, #12
    93fa:	f85d fb04 	ldr.w	pc, [sp], #4

000093fe <nrf_gpio_pin_set>:
{
    93fe:	b507      	push	{r0, r1, r2, lr}
    9400:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9402:	a801      	add	r0, sp, #4
    9404:	f7fb fd1c 	bl	4e40 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9408:	9a01      	ldr	r2, [sp, #4]
    940a:	2301      	movs	r3, #1
    940c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    940e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9412:	b003      	add	sp, #12
    9414:	f85d fb04 	ldr.w	pc, [sp], #4

00009418 <nrf_gpio_pin_write>:
    if (value == 0)
    9418:	b909      	cbnz	r1, 941e <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    941a:	f7ff bfe3 	b.w	93e4 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    941e:	f7ff bfee 	b.w	93fe <nrf_gpio_pin_set>

00009422 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    9422:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    9424:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9428:	2b00      	cmp	r3, #0
{
    942a:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    942c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9430:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9432:	bf0b      	itete	eq
    9434:	4615      	moveq	r5, r2
    9436:	2501      	movne	r5, #1
    9438:	460e      	moveq	r6, r1
    943a:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    943c:	9301      	str	r3, [sp, #4]
    943e:	f7fb fcff 	bl	4e40 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9442:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    9446:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    944a:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    944e:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9450:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    9452:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9456:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    945a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    945e:	b002      	add	sp, #8
    9460:	bd70      	pop	{r4, r5, r6, pc}

00009462 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    9462:	b570      	push	{r4, r5, r6, lr}
    9464:	4615      	mov	r5, r2
    9466:	4604      	mov	r4, r0
    9468:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    946c:	42a6      	cmp	r6, r4
    946e:	d101      	bne.n	9474 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    9470:	2000      	movs	r0, #0
}
    9472:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    9474:	6823      	ldr	r3, [r4, #0]
    9476:	0c1a      	lsrs	r2, r3, #16
    9478:	2a22      	cmp	r2, #34	; 0x22
    947a:	f200 808e 	bhi.w	959a <pinctrl_configure_pins+0x138>
    947e:	e8df f002 	tbb	[pc, r2]
    9482:	1d12      	.short	0x1d12
    9484:	39294324 	.word	0x39294324
    9488:	8c8c8c43 	.word	0x8c8c8c43
    948c:	8c4d488c 	.word	0x8c4d488c
    9490:	8c8c8c8c 	.word	0x8c8c8c8c
    9494:	8c8c8c8c 	.word	0x8c8c8c8c
    9498:	68635e52 	.word	0x68635e52
    949c:	6d8c8c8c 	.word	0x6d8c8c8c
    94a0:	827d7873 	.word	0x827d7873
    94a4:	87          	.byte	0x87
    94a5:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    94a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94aa:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    94ae:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    94b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    94b4:	f7ff ffa3 	bl	93fe <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    94b8:	2201      	movs	r2, #1
    94ba:	e015      	b.n	94e8 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    94bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94c0:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    94c4:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    94c6:	2100      	movs	r1, #0
    94c8:	e00f      	b.n	94ea <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    94ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94ce:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    94d2:	e7ec      	b.n	94ae <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    94d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94d8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    94dc:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    94de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    94e2:	f7ff ff7f 	bl	93e4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    94e6:	2200      	movs	r2, #0
    94e8:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    94ea:	6820      	ldr	r0, [r4, #0]
    94ec:	f7ff ff99 	bl	9422 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    94f0:	3404      	adds	r4, #4
    94f2:	e7bb      	b.n	946c <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    94f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94f8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    94fc:	6820      	ldr	r0, [r4, #0]
    94fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9502:	f7ff ff6f 	bl	93e4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    9506:	e7d7      	b.n	94b8 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    9508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    950c:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9510:	e7d8      	b.n	94c4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    9512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9516:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    951a:	e7d3      	b.n	94c4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    951c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9520:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    9524:	e7ce      	b.n	94c4 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    9526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    952a:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    952e:	6820      	ldr	r0, [r4, #0]
    9530:	f3c0 3140 	ubfx	r1, r0, #13, #1
    9534:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9538:	f7ff ff6e 	bl	9418 <nrf_gpio_pin_write>
    953c:	e7bc      	b.n	94b8 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    953e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9542:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9546:	e7f2      	b.n	952e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    9548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    954c:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9550:	e7ed      	b.n	952e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    9552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9556:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    955a:	e7e8      	b.n	952e <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    955c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9560:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9564:	2201      	movs	r2, #1
    9566:	e7ae      	b.n	94c6 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    9568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    956c:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9570:	e7f8      	b.n	9564 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    9572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9576:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    957a:	e7f3      	b.n	9564 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    957c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9580:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9584:	e7ee      	b.n	9564 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    9586:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    958a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    958e:	e7e9      	b.n	9564 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    9590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9594:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    9598:	e7e4      	b.n	9564 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    959a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    959e:	e768      	b.n	9472 <pinctrl_configure_pins+0x10>

000095a0 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    95a0:	f7ff b9b0 	b.w	8904 <nrf_cc3xx_platform_init_no_rng>

000095a4 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    95a4:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    95a6:	f7f9 fa73 	bl	2a90 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    95aa:	f7f9 fb25 	bl	2bf8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    95ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    95b2:	f7ff b9a7 	b.w	8904 <nrf_cc3xx_platform_init_no_rng>

000095b6 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    95b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    95ba:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    95be:	f1a0 0308 	sub.w	r3, r0, #8
    95c2:	4258      	negs	r0, r3
    95c4:	4158      	adcs	r0, r3
    95c6:	4770      	bx	lr

000095c8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    95c8:	4700      	bx	r0

000095ca <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    95ca:	f000 b90a 	b.w	97e2 <z_impl_k_busy_wait>

000095ce <nrf_gpio_pin_present_check>:
    switch (port)
    95ce:	0943      	lsrs	r3, r0, #5
    95d0:	d00b      	beq.n	95ea <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    95d2:	2b01      	cmp	r3, #1
    95d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    95d8:	bf18      	it	ne
    95da:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    95dc:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    95e0:	fa23 f000 	lsr.w	r0, r3, r0
}
    95e4:	f000 0001 	and.w	r0, r0, #1
    95e8:	4770      	bx	lr
    switch (port)
    95ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    95ee:	e7f5      	b.n	95dc <nrf_gpio_pin_present_check+0xe>

000095f0 <pin_is_task_output>:
{
    95f0:	b508      	push	{r3, lr}
    95f2:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    95f4:	f7fb ff5a 	bl	54ac <pin_is_output>
    95f8:	b110      	cbz	r0, 9600 <pin_is_task_output+0x10>
    95fa:	4610      	mov	r0, r2
    95fc:	f7fb ff40 	bl	5480 <pin_in_use_by_te>
}
    9600:	f000 0001 	and.w	r0, r0, #1
    9604:	bd08      	pop	{r3, pc}

00009606 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9606:	0080      	lsls	r0, r0, #2
}
    9608:	f500 7080 	add.w	r0, r0, #256	; 0x100
    960c:	4770      	bx	lr

0000960e <nrf_gpio_reconfigure>:
{
    960e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9612:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9614:	a801      	add	r0, sp, #4
{
    9616:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    961a:	460c      	mov	r4, r1
    961c:	4617      	mov	r7, r2
    961e:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9620:	f7fb ffc8 	bl	55b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9624:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9626:	1e39      	subs	r1, r7, #0
    9628:	bf18      	it	ne
    962a:	2101      	movne	r1, #1
    962c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9630:	1e23      	subs	r3, r4, #0
    9632:	bf18      	it	ne
    9634:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9636:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9638:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    963c:	bf14      	ite	ne
    963e:	210c      	movne	r1, #12
    9640:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9642:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9644:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9648:	bf14      	ite	ne
    964a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    964e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9650:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9654:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9658:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    965c:	bf14      	ite	ne
    965e:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9662:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9664:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    9666:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    966a:	b104      	cbz	r4, 966e <nrf_gpio_reconfigure+0x60>
    966c:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    966e:	b10f      	cbz	r7, 9674 <nrf_gpio_reconfigure+0x66>
    9670:	783f      	ldrb	r7, [r7, #0]
    9672:	007f      	lsls	r7, r7, #1
    9674:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9676:	b10e      	cbz	r6, 967c <nrf_gpio_reconfigure+0x6e>
    9678:	7836      	ldrb	r6, [r6, #0]
    967a:	00b6      	lsls	r6, r6, #2
    967c:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    967e:	b18d      	cbz	r5, 96a4 <nrf_gpio_reconfigure+0x96>
    9680:	7829      	ldrb	r1, [r5, #0]
    9682:	0209      	lsls	r1, r1, #8
    9684:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9686:	f1b8 0f00 	cmp.w	r8, #0
    968a:	d003      	beq.n	9694 <nrf_gpio_reconfigure+0x86>
    968c:	f898 8000 	ldrb.w	r8, [r8]
    9690:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9694:	4321      	orrs	r1, r4
    9696:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    969a:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    969e:	b002      	add	sp, #8
    96a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    96a4:	4629      	mov	r1, r5
    96a6:	e7ed      	b.n	9684 <nrf_gpio_reconfigure+0x76>

000096a8 <nrf_gpio_cfg_sense_set>:
{
    96a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    96aa:	f10d 030f 	add.w	r3, sp, #15
    96ae:	9301      	str	r3, [sp, #4]
    96b0:	2300      	movs	r3, #0
{
    96b2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    96b6:	9300      	str	r3, [sp, #0]
    96b8:	461a      	mov	r2, r3
    96ba:	4619      	mov	r1, r3
    96bc:	f7ff ffa7 	bl	960e <nrf_gpio_reconfigure>
}
    96c0:	b005      	add	sp, #20
    96c2:	f85d fb04 	ldr.w	pc, [sp], #4

000096c6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    96c6:	f7fc badb 	b.w	5c80 <_DoInit>

000096ca <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    96ca:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    96cc:	f7ff fffb 	bl	96c6 <SEGGER_RTT_Init>

	return 0;
}
    96d0:	2000      	movs	r0, #0
    96d2:	bd08      	pop	{r3, pc}

000096d4 <z_device_state_init>:
}
    96d4:	4770      	bx	lr

000096d6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    96d6:	b138      	cbz	r0, 96e8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    96d8:	68c3      	ldr	r3, [r0, #12]
    96da:	8818      	ldrh	r0, [r3, #0]
    96dc:	f3c0 0008 	ubfx	r0, r0, #0, #9
    96e0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    96e4:	4258      	negs	r0, r3
    96e6:	4158      	adcs	r0, r3
}
    96e8:	4770      	bx	lr

000096ea <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    96ea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    96ec:	ab0b      	add	r3, sp, #44	; 0x2c
    96ee:	9305      	str	r3, [sp, #20]
    96f0:	9303      	str	r3, [sp, #12]
    96f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96f4:	9302      	str	r3, [sp, #8]
    96f6:	2300      	movs	r3, #0
    96f8:	e9cd 3300 	strd	r3, r3, [sp]
    96fc:	2201      	movs	r2, #1
    96fe:	4618      	mov	r0, r3
    9700:	f7f8 ff1e 	bl	2540 <z_impl_z_log_msg2_runtime_vcreate>
}
    9704:	b007      	add	sp, #28
    9706:	f85d fb04 	ldr.w	pc, [sp], #4

0000970a <z_early_memset>:
	(void) memset(dst, c, n);
    970a:	f7ff bcfb 	b.w	9104 <memset>

0000970e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    970e:	f7ff bcee 	b.w	90ee <memcpy>

00009712 <k_mem_slab_init>:
{
    9712:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9714:	2400      	movs	r4, #0
    9716:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9718:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    971a:	ea41 0402 	orr.w	r4, r1, r2
    971e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    9722:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    9726:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9728:	d10c      	bne.n	9744 <k_mem_slab_init+0x32>
    972a:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    972c:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    972e:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9730:	d103      	bne.n	973a <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    9732:	e9c0 0000 	strd	r0, r0, [r0]
}
    9736:	2000      	movs	r0, #0
}
    9738:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    973a:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    973c:	3401      	adds	r4, #1
    973e:	460d      	mov	r5, r1
		p += slab->block_size;
    9740:	4411      	add	r1, r2
    9742:	e7f3      	b.n	972c <k_mem_slab_init+0x1a>
		return -EINVAL;
    9744:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9748:	e7f6      	b.n	9738 <k_mem_slab_init+0x26>

0000974a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    974a:	f3ef 8005 	mrs	r0, IPSR
}
    974e:	3800      	subs	r0, #0
    9750:	bf18      	it	ne
    9752:	2001      	movne	r0, #1
    9754:	4770      	bx	lr

00009756 <k_thread_name_get>:
}
    9756:	2000      	movs	r0, #0
    9758:	4770      	bx	lr

0000975a <z_pm_save_idle_exit>:
{
    975a:	b508      	push	{r3, lr}
	pm_system_resume();
    975c:	f7f9 f884 	bl	2868 <pm_system_resume>
}
    9760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    9764:	f7ff be21 	b.w	93aa <sys_clock_idle_exit>

00009768 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9768:	f990 300e 	ldrsb.w	r3, [r0, #14]
    976c:	428b      	cmp	r3, r1
    976e:	d001      	beq.n	9774 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    9770:	f7fd beae 	b.w	74d0 <z_set_prio>
}
    9774:	2000      	movs	r0, #0
    9776:	4770      	bx	lr

00009778 <z_impl_k_mutex_init>:
{
    9778:	4603      	mov	r3, r0
	mutex->owner = NULL;
    977a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    977c:	e9c3 0002 	strd	r0, r0, [r3, #8]
    9780:	e9c3 3300 	strd	r3, r3, [r3]
}
    9784:	4770      	bx	lr

00009786 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9786:	b13a      	cbz	r2, 9798 <z_impl_k_sem_init+0x12>
    9788:	428a      	cmp	r2, r1
    978a:	d305      	bcc.n	9798 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    978c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    9790:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    9794:	2000      	movs	r0, #0
    9796:	4770      	bx	lr
		return -EINVAL;
    9798:	f06f 0015 	mvn.w	r0, #21
}
    979c:	4770      	bx	lr

0000979e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    979e:	4603      	mov	r3, r0
    97a0:	b920      	cbnz	r0, 97ac <z_reschedule_irqlock+0xe>
    97a2:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    97a6:	b90a      	cbnz	r2, 97ac <z_reschedule_irqlock+0xe>
    97a8:	f7f9 bb1e 	b.w	2de8 <arch_swap>
    97ac:	f383 8811 	msr	BASEPRI, r3
    97b0:	f3bf 8f6f 	isb	sy
}
    97b4:	4770      	bx	lr

000097b6 <z_reschedule_unlocked>:
	__asm__ volatile(
    97b6:	f04f 0340 	mov.w	r3, #64	; 0x40
    97ba:	f3ef 8011 	mrs	r0, BASEPRI
    97be:	f383 8812 	msr	BASEPRI_MAX, r3
    97c2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    97c6:	f7ff bfea 	b.w	979e <z_reschedule_irqlock>

000097ca <z_priq_dumb_best>:
{
    97ca:	4603      	mov	r3, r0
	return list->head == list;
    97cc:	6800      	ldr	r0, [r0, #0]
}
    97ce:	4283      	cmp	r3, r0
    97d0:	bf08      	it	eq
    97d2:	2000      	moveq	r0, #0
    97d4:	4770      	bx	lr

000097d6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    97d6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    97d8:	f7fe fda2 	bl	8320 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    97dc:	bd08      	pop	{r3, pc}

000097de <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    97de:	f7fe bd9f 	b.w	8320 <sys_clock_tick_get>

000097e2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    97e2:	b108      	cbz	r0, 97e8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    97e4:	f7fa b904 	b.w	39f0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    97e8:	4770      	bx	lr

000097ea <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    97ea:	b510      	push	{r4, lr}
    97ec:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    97ee:	f7fe fbf7 	bl	7fe0 <z_abort_timeout>

	if (inactive) {
    97f2:	b9b0      	cbnz	r0, 9822 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    97f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    97f6:	b10b      	cbz	r3, 97fc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    97f8:	4620      	mov	r0, r4
    97fa:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    97fc:	f104 0018 	add.w	r0, r4, #24
    9800:	f7fd ffe2 	bl	77c8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9804:	b168      	cbz	r0, 9822 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    9806:	f7fd fc85 	bl	7114 <z_ready_thread>
    980a:	f04f 0340 	mov.w	r3, #64	; 0x40
    980e:	f3ef 8011 	mrs	r0, BASEPRI
    9812:	f383 8812 	msr	BASEPRI_MAX, r3
    9816:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    981a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    981e:	f7ff bfbe 	b.w	979e <z_reschedule_irqlock>
    9822:	bd10      	pop	{r4, pc}

00009824 <k_heap_init>:
{
    9824:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    9826:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    982a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    982e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9830:	f7f7 bf5a 	b.w	16e8 <sys_heap_init>

00009834 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9834:	f7fb bb88 	b.w	4f48 <SystemInit>
