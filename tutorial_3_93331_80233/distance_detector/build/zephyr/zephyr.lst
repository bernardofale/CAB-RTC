
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 23 00 20 f9 32 00 00 8d 8d 00 00 cd 32 00 00     .#. .2.......2..
  10:	cd 32 00 00 cd 32 00 00 cd 32 00 00 00 00 00 00     .2...2...2......
	...
  2c:	a9 2b 00 00 cd 32 00 00 00 00 00 00 55 2b 00 00     .+...2......U+..
  3c:	cd 32 00 00                                         .2..

00000040 <_irq_vector_table>:
  40:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  50:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  60:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  70:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  80:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  90:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  a0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  b0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  c0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  d0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  e0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..
  f0:	59 2c 00 00 59 2c 00 00 59 2c 00 00 59 2c 00 00     Y,..Y,..Y,..Y,..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f007 ff46 	bl	8374 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
     4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
     4fc:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     4fe:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
     500:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     502:	2501      	movs	r5, #1
     504:	409d      	lsls	r5, r3
     506:	6863      	ldr	r3, [r4, #4]
     508:	681b      	ldr	r3, [r3, #0]
     50a:	421d      	tst	r5, r3
{
     50c:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     50e:	d10e      	bne.n	52e <gpio_pin_set_dt+0x36>
     510:	4918      	ldr	r1, [pc, #96]	; (574 <gpio_pin_set_dt+0x7c>)
     512:	4a19      	ldr	r2, [pc, #100]	; (578 <gpio_pin_set_dt+0x80>)
     514:	4819      	ldr	r0, [pc, #100]	; (57c <gpio_pin_set_dt+0x84>)
     516:	f240 4392 	movw	r3, #1170	; 0x492
     51a:	f008 fba2 	bl	8c62 <assert_print>
     51e:	4818      	ldr	r0, [pc, #96]	; (580 <gpio_pin_set_dt+0x88>)
     520:	f008 fb9f 	bl	8c62 <assert_print>
     524:	4814      	ldr	r0, [pc, #80]	; (578 <gpio_pin_set_dt+0x80>)
     526:	f240 4192 	movw	r1, #1170	; 0x492
     52a:	f008 fb93 	bl	8c54 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     52e:	683b      	ldr	r3, [r7, #0]
     530:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     532:	6863      	ldr	r3, [r4, #4]
     534:	681b      	ldr	r3, [r3, #0]
     536:	bf18      	it	ne
     538:	f086 0601 	eorne.w	r6, r6, #1
     53c:	421d      	tst	r5, r3
     53e:	d10e      	bne.n	55e <gpio_pin_set_dt+0x66>
     540:	490c      	ldr	r1, [pc, #48]	; (574 <gpio_pin_set_dt+0x7c>)
     542:	4a0d      	ldr	r2, [pc, #52]	; (578 <gpio_pin_set_dt+0x80>)
     544:	480d      	ldr	r0, [pc, #52]	; (57c <gpio_pin_set_dt+0x84>)
     546:	f44f 638d 	mov.w	r3, #1128	; 0x468
     54a:	f008 fb8a 	bl	8c62 <assert_print>
     54e:	480c      	ldr	r0, [pc, #48]	; (580 <gpio_pin_set_dt+0x88>)
     550:	f008 fb87 	bl	8c62 <assert_print>
     554:	4808      	ldr	r0, [pc, #32]	; (578 <gpio_pin_set_dt+0x80>)
     556:	f44f 618d 	mov.w	r1, #1128	; 0x468
     55a:	f008 fb7b 	bl	8c54 <assert_post_action>
	if (value != 0)	{
     55e:	b136      	cbz	r6, 56e <gpio_pin_set_dt+0x76>
	return api->port_set_bits_raw(port, pins);
     560:	68a3      	ldr	r3, [r4, #8]
     562:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     564:	4629      	mov	r1, r5
     566:	4620      	mov	r0, r4
}
     568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     56c:	4718      	bx	r3
     56e:	68a3      	ldr	r3, [r4, #8]
     570:	691b      	ldr	r3, [r3, #16]
     572:	e7f7      	b.n	564 <gpio_pin_set_dt+0x6c>
     574:	00009ba1 	.word	0x00009ba1
     578:	00009b70 	.word	0x00009b70
     57c:	00009bdf 	.word	0x00009bdf
     580:	00009bfc 	.word	0x00009bfc

00000584 <gpio_pin_configure_dt.constprop.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
     584:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gpio_pin_configure(spec->port,
     588:	6805      	ldr	r5, [r0, #0]
				  spec->pin,
     58a:	7906      	ldrb	r6, [r0, #4]
				  spec->dt_flags | extra_flags);
     58c:	88c4      	ldrh	r4, [r0, #6]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     58e:	f004 0330 	and.w	r3, r4, #48	; 0x30
     592:	2b30      	cmp	r3, #48	; 0x30
	const struct gpio_driver_config *const cfg =
     594:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
     598:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     59a:	d10e      	bne.n	5ba <gpio_pin_configure_dt.constprop.0+0x36>
     59c:	4927      	ldr	r1, [pc, #156]	; (63c <gpio_pin_configure_dt.constprop.0+0xb8>)
     59e:	4a28      	ldr	r2, [pc, #160]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5a0:	4828      	ldr	r0, [pc, #160]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     5a2:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     5a6:	f008 fb5c 	bl	8c62 <assert_print>
     5aa:	4827      	ldr	r0, [pc, #156]	; (648 <gpio_pin_configure_dt.constprop.0+0xc4>)
     5ac:	f008 fb59 	bl	8c62 <assert_print>
     5b0:	4823      	ldr	r0, [pc, #140]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5b2:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     5b6:	f008 fb4d 	bl	8c54 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     5ba:	f004 0306 	and.w	r3, r4, #6
     5be:	2b04      	cmp	r3, #4
     5c0:	d10b      	bne.n	5da <gpio_pin_configure_dt.constprop.0+0x56>
     5c2:	4922      	ldr	r1, [pc, #136]	; (64c <gpio_pin_configure_dt.constprop.0+0xc8>)
     5c4:	481f      	ldr	r0, [pc, #124]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     5c6:	4a1e      	ldr	r2, [pc, #120]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     5cc:	f008 fb49 	bl	8c62 <assert_print>
     5d0:	481b      	ldr	r0, [pc, #108]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     5d2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     5d6:	f008 fb3d 	bl	8c54 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5da:	f8db 3000 	ldr.w	r3, [fp]
     5de:	f04f 0a01 	mov.w	sl, #1
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     5e2:	07e1      	lsls	r1, r4, #31
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5e4:	fa0a fa06 	lsl.w	sl, sl, r6
	return gpio_pin_configure(spec->port,
     5e8:	bf54      	ite	pl
     5ea:	f444 14d0 	orrpl.w	r4, r4, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     5ee:	f484 14b0 	eormi.w	r4, r4, #1441792	; 0x160000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5f2:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     5f6:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     5fa:	d10e      	bne.n	61a <gpio_pin_configure_dt.constprop.0+0x96>
     5fc:	4914      	ldr	r1, [pc, #80]	; (650 <gpio_pin_configure_dt.constprop.0+0xcc>)
     5fe:	4a10      	ldr	r2, [pc, #64]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     600:	4810      	ldr	r0, [pc, #64]	; (644 <gpio_pin_configure_dt.constprop.0+0xc0>)
     602:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     606:	f008 fb2c 	bl	8c62 <assert_print>
     60a:	4812      	ldr	r0, [pc, #72]	; (654 <gpio_pin_configure_dt.constprop.0+0xd0>)
     60c:	f008 fb29 	bl	8c62 <assert_print>
     610:	480b      	ldr	r0, [pc, #44]	; (640 <gpio_pin_configure_dt.constprop.0+0xbc>)
     612:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     616:	f008 fb1d 	bl	8c54 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     61a:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     61c:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     61e:	bf4c      	ite	mi
     620:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     624:	ea23 030a 	bicpl.w	r3, r3, sl
     628:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     62a:	f8d9 3000 	ldr.w	r3, [r9]
     62e:	4642      	mov	r2, r8
     630:	4631      	mov	r1, r6
     632:	4628      	mov	r0, r5
}
     634:	b001      	add	sp, #4
     636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
     63a:	4718      	bx	r3
     63c:	00009c0e 	.word	0x00009c0e
     640:	00009b70 	.word	0x00009b70
     644:	00009bdf 	.word	0x00009bdf
     648:	00009c47 	.word	0x00009c47
     64c:	00009c84 	.word	0x00009c84
     650:	00009ba1 	.word	0x00009ba1
     654:	00009bfc 	.word	0x00009bfc

00000658 <thread_SENSOR_code>:
    return;
}

/* Thread code implementation */
void thread_SENSOR_code(void *argA , void *argB, void *argC)
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;
	/* Thread loop */
    while(1) {
		printk("Thread SENSOR released\n");
     65a:	4f19      	ldr	r7, [pc, #100]	; (6c0 <thread_SENSOR_code+0x68>)
        /* It is recommended to calibrate the SAADC at least once before use, and whenever the ambient temperature has changed by more than 10 °C */
    	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     65c:	4d19      	ldr	r5, [pc, #100]	; (6c4 <thread_SENSOR_code+0x6c>)
	const struct adc_sequence sequence = {
     65e:	4e1a      	ldr	r6, [pc, #104]	; (6c8 <thread_SENSOR_code+0x70>)
{
     660:	b087      	sub	sp, #28
		printk("Thread SENSOR released\n");
     662:	4638      	mov	r0, r7
     664:	f008 fa03 	bl	8a6e <printk>
    	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
     668:	2301      	movs	r3, #1
     66a:	60eb      	str	r3, [r5, #12]
	const struct adc_sequence sequence = {
     66c:	2302      	movs	r3, #2
     66e:	9302      	str	r3, [sp, #8]
     670:	4b16      	ldr	r3, [pc, #88]	; (6cc <thread_SENSOR_code+0x74>)
     672:	9303      	str	r3, [sp, #12]
     674:	2214      	movs	r2, #20
     676:	230a      	movs	r3, #10
     678:	e9cd 2304 	strd	r2, r3, [sp, #16]
	if (adc_dev == NULL) {
     67c:	4b14      	ldr	r3, [pc, #80]	; (6d0 <thread_SENSOR_code+0x78>)
	const struct adc_sequence sequence = {
     67e:	9601      	str	r6, [sp, #4]
	if (adc_dev == NULL) {
     680:	6818      	ldr	r0, [r3, #0]
     682:	b988      	cbnz	r0, 6a8 <thread_SENSOR_code+0x50>
            printk("adc_sample(): error, must bind to adc first \n\r");
     684:	4813      	ldr	r0, [pc, #76]	; (6d4 <thread_SENSOR_code+0x7c>)
     686:	f008 f9f2 	bl	8a6e <printk>
            return -1;
     68a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

		/* Gets all samples, checks for errors and prints the values */
        err=adc_sample();
        if(err) {
            printk("adc_sample() failed with error code %d\n\r",err);
     68e:	4812      	ldr	r0, [pc, #72]	; (6d8 <thread_SENSOR_code+0x80>)
     690:	4621      	mov	r1, r4
     692:	f008 f9ec 	bl	8a6e <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     696:	4811      	ldr	r0, [pc, #68]	; (6dc <thread_SENSOR_code+0x84>)
     698:	f006 f804 	bl	66a4 <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
     69c:	2100      	movs	r1, #0
     69e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     6a2:	f007 f91b 	bl	78dc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     6a6:	e7dc      	b.n	662 <thread_SENSOR_code+0xa>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     6a8:	6883      	ldr	r3, [r0, #8]
     6aa:	a901      	add	r1, sp, #4
     6ac:	685b      	ldr	r3, [r3, #4]
     6ae:	4798      	blx	r3
	if (ret) {
     6b0:	4604      	mov	r4, r0
     6b2:	2800      	cmp	r0, #0
     6b4:	d0ef      	beq.n	696 <thread_SENSOR_code+0x3e>
            printk("adc_read() failed with code %d\n", ret);
     6b6:	4601      	mov	r1, r0
     6b8:	4809      	ldr	r0, [pc, #36]	; (6e0 <thread_SENSOR_code+0x88>)
     6ba:	f008 f9d8 	bl	8a6e <printk>
        if(err) {
     6be:	e7e6      	b.n	68e <thread_SENSOR_code+0x36>
     6c0:	00009cb7 	.word	0x00009cb7
     6c4:	40007000 	.word	0x40007000
     6c8:	000098b8 	.word	0x000098b8
     6cc:	20000e54 	.word	0x20000e54
     6d0:	20000508 	.word	0x20000508
     6d4:	00009ccf 	.word	0x00009ccf
     6d8:	00009d1e 	.word	0x00009d1e
     6dc:	2000051c 	.word	0x2000051c
     6e0:	00009cfe 	.word	0x00009cfe

000006e4 <thread_OUTPUT_code>:
		k_sem_give(&sem_filter_output); //ready to be taken, count increases (unless it's not max)
  	}
}

void thread_OUTPUT_code(void *argA , void *argB, void *argC)
{	
     6e4:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     6e6:	4842      	ldr	r0, [pc, #264]	; (7f0 <thread_OUTPUT_code+0x10c>)
     6e8:	f008 fe91 	bl	940e <z_device_is_ready>
	int ret;

	/* Check if devices are ready */
	if (!device_is_ready(led1.port)) {
     6ec:	2800      	cmp	r0, #0
     6ee:	d04e      	beq.n	78e <thread_OUTPUT_code+0xaa>
     6f0:	483f      	ldr	r0, [pc, #252]	; (7f0 <thread_OUTPUT_code+0x10c>)
     6f2:	f008 fe8c 	bl	940e <z_device_is_ready>
		return;
	}
	if (!device_is_ready(led2.port)) {
     6f6:	2800      	cmp	r0, #0
     6f8:	d049      	beq.n	78e <thread_OUTPUT_code+0xaa>
     6fa:	483d      	ldr	r0, [pc, #244]	; (7f0 <thread_OUTPUT_code+0x10c>)
     6fc:	f008 fe87 	bl	940e <z_device_is_ready>
		return;
	}
	if (!device_is_ready(led3.port)) {
     700:	2800      	cmp	r0, #0
     702:	d044      	beq.n	78e <thread_OUTPUT_code+0xaa>
     704:	483a      	ldr	r0, [pc, #232]	; (7f0 <thread_OUTPUT_code+0x10c>)
     706:	f008 fe82 	bl	940e <z_device_is_ready>
		return;
	}
	if (!device_is_ready(led4.port)) {
     70a:	2800      	cmp	r0, #0
     70c:	d03f      	beq.n	78e <thread_OUTPUT_code+0xaa>
		return;
	}

	/* Configure the GPIO pin for output */
	ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     70e:	4839      	ldr	r0, [pc, #228]	; (7f4 <thread_OUTPUT_code+0x110>)
     710:	f7ff ff38 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
     714:	2800      	cmp	r0, #0
     716:	db3a      	blt.n	78e <thread_OUTPUT_code+0xaa>
		return;
	}
	ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     718:	4837      	ldr	r0, [pc, #220]	; (7f8 <thread_OUTPUT_code+0x114>)
     71a:	f7ff ff33 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
     71e:	2800      	cmp	r0, #0
     720:	db35      	blt.n	78e <thread_OUTPUT_code+0xaa>
		return;
	}
	ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_ACTIVE);
     722:	4836      	ldr	r0, [pc, #216]	; (7fc <thread_OUTPUT_code+0x118>)
     724:	f7ff ff2e 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
     728:	2800      	cmp	r0, #0
     72a:	db30      	blt.n	78e <thread_OUTPUT_code+0xaa>
		return;
	}
	ret = gpio_pin_configure_dt(&led4, GPIO_OUTPUT_ACTIVE);
     72c:	4834      	ldr	r0, [pc, #208]	; (800 <CONFIG_ISR_STACK_SIZE>)
     72e:	f7ff ff29 	bl	584 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
     732:	2800      	cmp	r0, #0
     734:	db2b      	blt.n	78e <thread_OUTPUT_code+0xaa>
	return z_impl_k_sem_take(sem, timeout);
     736:	4d33      	ldr	r5, [pc, #204]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
		return;
	}

    while(1) {
		k_sem_take(&sem_filter_output, K_FOREVER); //takes the semaphore given by the filter task
		printk("Thread OUTPUT released\n");
     738:	4e33      	ldr	r6, [pc, #204]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
		printk("Distance after filter ->%4u m \n", distance);
     73a:	4c34      	ldr	r4, [pc, #208]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     744:	4628      	mov	r0, r5
     746:	f005 ffeb 	bl	6720 <z_impl_k_sem_take>
		printk("Thread OUTPUT released\n");
     74a:	4630      	mov	r0, r6
     74c:	f008 f98f 	bl	8a6e <printk>
		printk("Distance after filter ->%4u m \n", distance);
     750:	8821      	ldrh	r1, [r4, #0]
     752:	482f      	ldr	r0, [pc, #188]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     754:	f008 f98b 	bl	8a6e <printk>
		if(distance >= 30){
     758:	8823      	ldrh	r3, [r4, #0]
     75a:	2b1d      	cmp	r3, #29
     75c:	d918      	bls.n	790 <thread_OUTPUT_code+0xac>
			/* LED1 ON */
			ret = gpio_pin_set_dt(&led1, 1);
     75e:	4825      	ldr	r0, [pc, #148]	; (7f4 <thread_OUTPUT_code+0x110>)
     760:	2101      	movs	r1, #1
     762:	f7ff fec9 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     766:	2800      	cmp	r0, #0
     768:	db11      	blt.n	78e <thread_OUTPUT_code+0xaa>
				return;
			}
			ret = gpio_pin_set_dt(&led2, 0);
     76a:	2100      	movs	r1, #0
			/* LEDS1,2 ON */
			ret = gpio_pin_set_dt(&led1, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led2, 1);
     76c:	4822      	ldr	r0, [pc, #136]	; (7f8 <thread_OUTPUT_code+0x114>)
     76e:	f7ff fec3 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     772:	2800      	cmp	r0, #0
     774:	db0b      	blt.n	78e <thread_OUTPUT_code+0xaa>
				return;
			}
			ret = gpio_pin_set_dt(&led3, 0);
     776:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led2, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led3, 1);
     778:	4820      	ldr	r0, [pc, #128]	; (7fc <thread_OUTPUT_code+0x118>)
     77a:	f7ff febd 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     77e:	2800      	cmp	r0, #0
     780:	db05      	blt.n	78e <thread_OUTPUT_code+0xaa>
				return;
			}
			ret = gpio_pin_set_dt(&led4, 0);
     782:	2100      	movs	r1, #0
			}
			ret = gpio_pin_set_dt(&led3, 1);
			if (ret < 0) {
				return;
			}
			ret = gpio_pin_set_dt(&led4, 1);
     784:	481e      	ldr	r0, [pc, #120]	; (800 <CONFIG_ISR_STACK_SIZE>)
     786:	f7ff feb7 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     78a:	2800      	cmp	r0, #0
     78c:	dad6      	bge.n	73c <thread_OUTPUT_code+0x58>
				return;
			}
		}
  	}
}
     78e:	bd70      	pop	{r4, r5, r6, pc}
		}else if((distance >= 20) & (distance < 30)){
     790:	f1a3 0214 	sub.w	r2, r3, #20
     794:	2a09      	cmp	r2, #9
     796:	d807      	bhi.n	7a8 <thread_OUTPUT_code+0xc4>
			ret = gpio_pin_set_dt(&led1, 1);
     798:	4816      	ldr	r0, [pc, #88]	; (7f4 <thread_OUTPUT_code+0x110>)
     79a:	2101      	movs	r1, #1
     79c:	f7ff feac 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7a0:	2800      	cmp	r0, #0
     7a2:	dbf4      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led2, 1);
     7a4:	2101      	movs	r1, #1
     7a6:	e7e1      	b.n	76c <thread_OUTPUT_code+0x88>
		}else if((distance >=  10) & (distance < 20)){
     7a8:	3b0a      	subs	r3, #10
     7aa:	2b09      	cmp	r3, #9
			ret = gpio_pin_set_dt(&led1, 1);
     7ac:	4811      	ldr	r0, [pc, #68]	; (7f4 <thread_OUTPUT_code+0x110>)
     7ae:	f04f 0101 	mov.w	r1, #1
		}else if((distance >=  10) & (distance < 20)){
     7b2:	d80b      	bhi.n	7cc <thread_OUTPUT_code+0xe8>
			ret = gpio_pin_set_dt(&led1, 1);
     7b4:	f7ff fea0 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7b8:	2800      	cmp	r0, #0
     7ba:	dbe8      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led2, 1);
     7bc:	480e      	ldr	r0, [pc, #56]	; (7f8 <thread_OUTPUT_code+0x114>)
     7be:	2101      	movs	r1, #1
     7c0:	f7ff fe9a 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7c4:	2800      	cmp	r0, #0
     7c6:	dbe2      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led3, 1);
     7c8:	2101      	movs	r1, #1
     7ca:	e7d5      	b.n	778 <thread_OUTPUT_code+0x94>
			ret = gpio_pin_set_dt(&led1, 1);
     7cc:	f7ff fe94 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7d0:	2800      	cmp	r0, #0
     7d2:	dbdc      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led2, 1);
     7d4:	4808      	ldr	r0, [pc, #32]	; (7f8 <thread_OUTPUT_code+0x114>)
     7d6:	2101      	movs	r1, #1
     7d8:	f7ff fe8e 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7dc:	2800      	cmp	r0, #0
     7de:	dbd6      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led3, 1);
     7e0:	4806      	ldr	r0, [pc, #24]	; (7fc <thread_OUTPUT_code+0x118>)
     7e2:	2101      	movs	r1, #1
     7e4:	f7ff fe88 	bl	4f8 <gpio_pin_set_dt>
			if (ret < 0) {
     7e8:	2800      	cmp	r0, #0
     7ea:	dbd0      	blt.n	78e <thread_OUTPUT_code+0xaa>
			ret = gpio_pin_set_dt(&led4, 1);
     7ec:	2101      	movs	r1, #1
     7ee:	e7c9      	b.n	784 <thread_OUTPUT_code+0xa0>
     7f0:	0000961c 	.word	0x0000961c
     7f4:	00009898 	.word	0x00009898
     7f8:	000098a0 	.word	0x000098a0
     7fc:	000098a8 	.word	0x000098a8
     800:	000098b0 	.word	0x000098b0
     804:	2000050c 	.word	0x2000050c
     808:	00009d47 	.word	0x00009d47
     80c:	20000e68 	.word	0x20000e68
     810:	00009d5f 	.word	0x00009d5f

00000814 <main>:
{
     814:	b5f0      	push	{r4, r5, r6, r7, lr}
     816:	b08d      	sub	sp, #52	; 0x34
	int arg1=0, arg2=0, arg3=0; // Input args of tasks (actually not used in this case)
     818:	2300      	movs	r3, #0
     81a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
     81e:	930b      	str	r3, [sp, #44]	; 0x2c
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     820:	482a      	ldr	r0, [pc, #168]	; (8cc <main+0xb8>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NODE));
     822:	4c2b      	ldr	r4, [pc, #172]	; (8d0 <main+0xbc>)
     824:	f005 f970 	bl	5b08 <z_impl_device_get_binding>
     828:	6020      	str	r0, [r4, #0]
	if (!adc_dev) {
     82a:	b910      	cbnz	r0, 832 <main+0x1e>
        printk("ADC device_get_binding() failed\n");
     82c:	4829      	ldr	r0, [pc, #164]	; (8d4 <main+0xc0>)
     82e:	f008 f91e 	bl	8a6e <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
     832:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     834:	6883      	ldr	r3, [r0, #8]
     836:	4928      	ldr	r1, [pc, #160]	; (8d8 <main+0xc4>)
     838:	681b      	ldr	r3, [r3, #0]
     83a:	4798      	blx	r3
    if (err) {
     83c:	4601      	mov	r1, r0
     83e:	b110      	cbz	r0, 846 <main+0x32>
        printk("adc_channel_setup() failed with error code %d\n", err);
     840:	4826      	ldr	r0, [pc, #152]	; (8dc <main+0xc8>)
     842:	f008 f914 	bl	8a6e <printk>
	return z_impl_k_sem_init(sem, initial_count, limit);
     846:	2201      	movs	r2, #1
     848:	2100      	movs	r1, #0
     84a:	4825      	ldr	r0, [pc, #148]	; (8e0 <main+0xcc>)
     84c:	f008 fe37 	bl	94be <z_impl_k_sem_init>
     850:	2201      	movs	r2, #1
     852:	2100      	movs	r1, #0
     854:	4823      	ldr	r0, [pc, #140]	; (8e4 <main+0xd0>)
     856:	f008 fe32 	bl	94be <z_impl_k_sem_init>
    thread_SENSOR_tid = k_thread_create(&thread_SENSOR_data, thread_SENSOR_stack,
     85a:	2600      	movs	r6, #0
     85c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     85e:	ab0b      	add	r3, sp, #44	; 0x2c
     860:	9302      	str	r3, [sp, #8]
     862:	ab0a      	add	r3, sp, #40	; 0x28
     864:	9301      	str	r3, [sp, #4]
     866:	2501      	movs	r5, #1
     868:	ab09      	add	r3, sp, #36	; 0x24
     86a:	2400      	movs	r4, #0
     86c:	9300      	str	r3, [sp, #0]
     86e:	e9cd 6706 	strd	r6, r7, [sp, #24]
     872:	e9cd 5403 	strd	r5, r4, [sp, #12]
     876:	4b1c      	ldr	r3, [pc, #112]	; (8e8 <main+0xd4>)
     878:	491c      	ldr	r1, [pc, #112]	; (8ec <main+0xd8>)
     87a:	481d      	ldr	r0, [pc, #116]	; (8f0 <main+0xdc>)
     87c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     880:	f005 fc22 	bl	60c8 <z_impl_k_thread_create>
     884:	4b1b      	ldr	r3, [pc, #108]	; (8f4 <main+0xe0>)
     886:	6018      	str	r0, [r3, #0]
     888:	4b1b      	ldr	r3, [pc, #108]	; (8f8 <main+0xe4>)
     88a:	491c      	ldr	r1, [pc, #112]	; (8fc <main+0xe8>)
     88c:	9400      	str	r4, [sp, #0]
     88e:	e9cd 6706 	strd	r6, r7, [sp, #24]
     892:	e9cd 5403 	strd	r5, r4, [sp, #12]
     896:	e9cd 4401 	strd	r4, r4, [sp, #4]
     89a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     89e:	4818      	ldr	r0, [pc, #96]	; (900 <main+0xec>)
     8a0:	f005 fc12 	bl	60c8 <z_impl_k_thread_create>
    thread_FILTER_tid = k_thread_create(&thread_FILTER_data, thread_FILTER_stack,
     8a4:	4b17      	ldr	r3, [pc, #92]	; (904 <main+0xf0>)
     8a6:	6018      	str	r0, [r3, #0]
     8a8:	4b17      	ldr	r3, [pc, #92]	; (908 <main+0xf4>)
     8aa:	4918      	ldr	r1, [pc, #96]	; (90c <main+0xf8>)
     8ac:	9400      	str	r4, [sp, #0]
     8ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
     8b2:	e9cd 5403 	strd	r5, r4, [sp, #12]
     8b6:	e9cd 4401 	strd	r4, r4, [sp, #4]
     8ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
     8be:	4814      	ldr	r0, [pc, #80]	; (910 <main+0xfc>)
     8c0:	f005 fc02 	bl	60c8 <z_impl_k_thread_create>
    thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
     8c4:	4b13      	ldr	r3, [pc, #76]	; (914 <main+0x100>)
     8c6:	6018      	str	r0, [r3, #0]
}
     8c8:	b00d      	add	sp, #52	; 0x34
     8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8cc:	00009d7f 	.word	0x00009d7f
     8d0:	20000508 	.word	0x20000508
     8d4:	00009d85 	.word	0x00009d85
     8d8:	00009b68 	.word	0x00009b68
     8dc:	00009da6 	.word	0x00009da6
     8e0:	2000051c 	.word	0x2000051c
     8e4:	2000050c 	.word	0x2000050c
     8e8:	00000659 	.word	0x00000659
     8ec:	200012a0 	.word	0x200012a0
     8f0:	20000360 	.word	0x20000360
     8f4:	20000534 	.word	0x20000534
     8f8:	00000961 	.word	0x00000961
     8fc:	200016c0 	.word	0x200016c0
     900:	20000260 	.word	0x20000260
     904:	2000052c 	.word	0x2000052c
     908:	000006e5 	.word	0x000006e5
     90c:	20001ae0 	.word	0x20001ae0
     910:	200002e0 	.word	0x200002e0
     914:	20000530 	.word	0x20000530

00000918 <filter>:

void filter(uint16_t *arr){
     918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t sum = 0;
	uint16_t v;
	for (int i = 0; i < N_SAMPLES; i++){
		v = (uint16_t)(100*arr[i]*((float)3/1023));
     91c:	4f0e      	ldr	r7, [pc, #56]	; (958 <filter+0x40>)
     91e:	1e86      	subs	r6, r0, #2
     920:	f100 0512 	add.w	r5, r0, #18
	uint16_t sum = 0;
     924:	2400      	movs	r4, #0
		v = (uint16_t)(100*arr[i]*((float)3/1023));
     926:	f04f 0864 	mov.w	r8, #100	; 0x64
     92a:	f836 0f02 	ldrh.w	r0, [r6, #2]!
     92e:	fb08 f000 	mul.w	r0, r8, r0
     932:	f7ff fd53 	bl	3dc <__aeabi_i2f>
     936:	4639      	mov	r1, r7
     938:	f7ff fbe2 	bl	100 <__aeabi_fmul>
     93c:	f7ff fda2 	bl	484 <__aeabi_f2uiz>
	for (int i = 0; i < N_SAMPLES; i++){
     940:	42b5      	cmp	r5, r6
		if(v != 0){
			sum += v;
     942:	4404      	add	r4, r0
     944:	b2a4      	uxth	r4, r4
	for (int i = 0; i < N_SAMPLES; i++){
     946:	d1f0      	bne.n	92a <filter+0x12>
		}
	}
	uint16_t avg=(uint16_t)sum/N_SAMPLES;
     948:	230a      	movs	r3, #10
     94a:	fbb4 f4f3 	udiv	r4, r4, r3
	distance = avg;
     94e:	4b03      	ldr	r3, [pc, #12]	; (95c <filter+0x44>)
     950:	801c      	strh	r4, [r3, #0]
}
     952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     956:	bf00      	nop
     958:	3b40300c 	.word	0x3b40300c
     95c:	20000e68 	.word	0x20000e68

00000960 <thread_FILTER_code>:
{	
     960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return z_impl_k_sem_take(sem, timeout);
     964:	4f1b      	ldr	r7, [pc, #108]	; (9d4 <thread_FILTER_code+0x74>)
		printk("Thread FILTER released\n");
     966:	f8df 8070 	ldr.w	r8, [pc, #112]	; 9d8 <thread_FILTER_code+0x78>
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     96a:	4e1c      	ldr	r6, [pc, #112]	; (9dc <thread_FILTER_code+0x7c>)
     96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     974:	4638      	mov	r0, r7
     976:	f005 fed3 	bl	6720 <z_impl_k_sem_take>
		printk("Thread FILTER released\n");
     97a:	4640      	mov	r0, r8
     97c:	f008 f877 	bl	8a6e <printk>
		for(int i = 0; i < BUFFER_SIZE; i++){
     980:	4d17      	ldr	r5, [pc, #92]	; (9e0 <thread_FILTER_code+0x80>)
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     982:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9e4 <thread_FILTER_code+0x84>
					printk("Sensor reading %d out of range\n\r", i+1);
     986:	f8df a060 	ldr.w	sl, [pc, #96]	; 9e8 <thread_FILTER_code+0x88>
		for(int i = 0; i < BUFFER_SIZE; i++){
     98a:	2400      	movs	r4, #0
				if(adc_sample_buffer[i] > 1023) {
     98c:	f835 3b02 	ldrh.w	r3, [r5], #2
     990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
					printk("Sensor reading %d out of range\n\r", i+1);
     994:	f104 0401 	add.w	r4, r4, #1
				if(adc_sample_buffer[i] > 1023) {
     998:	d30f      	bcc.n	9ba <thread_FILTER_code+0x5a>
					adc_sample_buffer[i] = 0;
     99a:	2300      	movs	r3, #0
     99c:	f825 3c02 	strh.w	r3, [r5, #-2]
					printk("Sensor reading %d out of range\n\r", i+1);
     9a0:	4621      	mov	r1, r4
     9a2:	4650      	mov	r0, sl
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     9a4:	f008 f863 	bl	8a6e <printk>
		for(int i = 0; i < BUFFER_SIZE; i++){
     9a8:	2c0a      	cmp	r4, #10
     9aa:	d1ef      	bne.n	98c <thread_FILTER_code+0x2c>
		filter(adc_sample_buffer);
     9ac:	480c      	ldr	r0, [pc, #48]	; (9e0 <thread_FILTER_code+0x80>)
     9ae:	f7ff ffb3 	bl	918 <filter>
	z_impl_k_sem_give(sem);
     9b2:	480e      	ldr	r0, [pc, #56]	; (9ec <thread_FILTER_code+0x8c>)
     9b4:	f005 fe76 	bl	66a4 <z_impl_k_sem_give>
    while(1) {
     9b8:	e7d8      	b.n	96c <thread_FILTER_code+0xc>
					printk("Sensor :%4u m \n\r", (uint16_t)(100*adc_sample_buffer[i]*((float)3/1023)));
     9ba:	2064      	movs	r0, #100	; 0x64
     9bc:	4358      	muls	r0, r3
     9be:	f7ff fd0d 	bl	3dc <__aeabi_i2f>
     9c2:	4631      	mov	r1, r6
     9c4:	f7ff fb9c 	bl	100 <__aeabi_fmul>
     9c8:	f7ff fd5c 	bl	484 <__aeabi_f2uiz>
     9cc:	b281      	uxth	r1, r0
     9ce:	4648      	mov	r0, r9
     9d0:	e7e8      	b.n	9a4 <thread_FILTER_code+0x44>
     9d2:	bf00      	nop
     9d4:	2000051c 	.word	0x2000051c
     9d8:	00009dd5 	.word	0x00009dd5
     9dc:	3b40300c 	.word	0x3b40300c
     9e0:	20000e54 	.word	0x20000e54
     9e4:	00009e0e 	.word	0x00009e0e
     9e8:	00009ded 	.word	0x00009ded
     9ec:	2000050c 	.word	0x2000050c

000009f0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	b08d      	sub	sp, #52	; 0x34
     9f6:	461f      	mov	r7, r3
     9f8:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     9fa:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     9fe:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     a02:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     a04:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     a06:	0782      	lsls	r2, r0, #30
     a08:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     a0c:	9304      	str	r3, [sp, #16]
{
     a0e:	4605      	mov	r5, r0
     a10:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     a12:	f040 8217 	bne.w	e44 <cbvprintf_package+0x454>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     a16:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     a18:	2800      	cmp	r0, #0
     a1a:	f040 8216 	bne.w	e4a <cbvprintf_package+0x45a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     a1e:	f001 0607 	and.w	r6, r1, #7
     a22:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     a24:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     a28:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     a2c:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     a30:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     a32:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     a36:	4652      	mov	r2, sl
	bool parsing = false;
     a38:	4651      	mov	r1, sl
	size = sizeof(char *);
     a3a:	f8cd 8000 	str.w	r8, [sp]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     a3e:	b105      	cbz	r5, a42 <cbvprintf_package+0x52>
				*(const char **)buf = s;
     a40:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a42:	9804      	ldr	r0, [sp, #16]
     a44:	2800      	cmp	r0, #0
     a46:	dc07      	bgt.n	a58 <cbvprintf_package+0x68>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     a48:	48be      	ldr	r0, [pc, #760]	; (d44 <cbvprintf_package+0x354>)
     a4a:	4287      	cmp	r7, r0
     a4c:	f0c0 811a 	bcc.w	c84 <cbvprintf_package+0x294>
     a50:	48bd      	ldr	r0, [pc, #756]	; (d48 <cbvprintf_package+0x358>)
     a52:	4287      	cmp	r7, r0
     a54:	f080 8116 	bcs.w	c84 <cbvprintf_package+0x294>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     a58:	9802      	ldr	r0, [sp, #8]
     a5a:	f010 0e02 	ands.w	lr, r0, #2
     a5e:	f000 8136 	beq.w	cce <cbvprintf_package+0x2de>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a62:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a66:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a68:	f1be 0f00 	cmp.w	lr, #0
     a6c:	f000 8110 	beq.w	c90 <cbvprintf_package+0x2a0>
     a70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     a74:	f0c0 810c 	bcc.w	c90 <cbvprintf_package+0x2a0>
					__ASSERT(false, "String with too many arguments");
     a78:	49b4      	ldr	r1, [pc, #720]	; (d4c <cbvprintf_package+0x35c>)
     a7a:	4ab5      	ldr	r2, [pc, #724]	; (d50 <cbvprintf_package+0x360>)
     a7c:	48b5      	ldr	r0, [pc, #724]	; (d54 <cbvprintf_package+0x364>)
     a7e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     a82:	f008 f8ee 	bl	8c62 <assert_print>
     a86:	48b4      	ldr	r0, [pc, #720]	; (d58 <cbvprintf_package+0x368>)
     a88:	f008 f8eb 	bl	8c62 <assert_print>
     a8c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
     a90:	48af      	ldr	r0, [pc, #700]	; (d50 <cbvprintf_package+0x360>)
     a92:	f008 f8df 	bl	8c54 <assert_post_action>
					return -EINVAL;
     a96:	f06f 0015 	mvn.w	r0, #21
     a9a:	e0e2      	b.n	c62 <cbvprintf_package+0x272>
		if (!parsing) {
     a9c:	b939      	cbnz	r1, aae <cbvprintf_package+0xbe>
			if (*fmt == '%') {
     a9e:	2825      	cmp	r0, #37	; 0x25
     aa0:	d115      	bne.n	ace <cbvprintf_package+0xde>
				parsing = true;
     aa2:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     aa4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     aa8:	f8cd 8000 	str.w	r8, [sp]
     aac:	e00f      	b.n	ace <cbvprintf_package+0xde>
		switch (*fmt) {
     aae:	287a      	cmp	r0, #122	; 0x7a
     ab0:	f200 8166 	bhi.w	d80 <cbvprintf_package+0x390>
     ab4:	284b      	cmp	r0, #75	; 0x4b
     ab6:	d820      	bhi.n	afa <cbvprintf_package+0x10a>
     ab8:	2847      	cmp	r0, #71	; 0x47
     aba:	f200 8161 	bhi.w	d80 <cbvprintf_package+0x390>
     abe:	2829      	cmp	r0, #41	; 0x29
     ac0:	f200 8084 	bhi.w	bcc <cbvprintf_package+0x1dc>
     ac4:	2820      	cmp	r0, #32
     ac6:	d002      	beq.n	ace <cbvprintf_package+0xde>
			parsing = false;
     ac8:	2823      	cmp	r0, #35	; 0x23
     aca:	bf18      	it	ne
     acc:	2100      	movne	r1, #0
	while (*++fmt != '\0') {
     ace:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     ad2:	2800      	cmp	r0, #0
     ad4:	d1e2      	bne.n	a9c <cbvprintf_package+0xac>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     ad6:	1b61      	subs	r1, r4, r5
     ad8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     adc:	f0c0 8152 	bcc.w	d84 <cbvprintf_package+0x394>
		__ASSERT(false, "too many format args");
     ae0:	499a      	ldr	r1, [pc, #616]	; (d4c <cbvprintf_package+0x35c>)
     ae2:	4a9b      	ldr	r2, [pc, #620]	; (d50 <cbvprintf_package+0x360>)
     ae4:	489b      	ldr	r0, [pc, #620]	; (d54 <cbvprintf_package+0x364>)
     ae6:	f240 233d 	movw	r3, #573	; 0x23d
     aea:	f008 f8ba 	bl	8c62 <assert_print>
     aee:	489b      	ldr	r0, [pc, #620]	; (d5c <cbvprintf_package+0x36c>)
     af0:	f008 f8b7 	bl	8c62 <assert_print>
     af4:	f240 213d 	movw	r1, #573	; 0x23d
     af8:	e7ca      	b.n	a90 <cbvprintf_package+0xa0>
		switch (*fmt) {
     afa:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     afe:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     b02:	f200 813d 	bhi.w	d80 <cbvprintf_package+0x390>
     b06:	f20f 0e08 	addw	lr, pc, #8
     b0a:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     b0e:	bf00      	nop
     b10:	00000acf 	.word	0x00000acf
     b14:	00000d81 	.word	0x00000d81
     b18:	00000d81 	.word	0x00000d81
     b1c:	00000d81 	.word	0x00000d81
     b20:	00000d81 	.word	0x00000d81
     b24:	00000d81 	.word	0x00000d81
     b28:	00000d81 	.word	0x00000d81
     b2c:	00000d81 	.word	0x00000d81
     b30:	00000d81 	.word	0x00000d81
     b34:	00000d81 	.word	0x00000d81
     b38:	00000d81 	.word	0x00000d81
     b3c:	00000d81 	.word	0x00000d81
     b40:	00000c23 	.word	0x00000c23
     b44:	00000d81 	.word	0x00000d81
     b48:	00000d81 	.word	0x00000d81
     b4c:	00000d81 	.word	0x00000d81
     b50:	00000d81 	.word	0x00000d81
     b54:	00000d81 	.word	0x00000d81
     b58:	00000d81 	.word	0x00000d81
     b5c:	00000d81 	.word	0x00000d81
     b60:	00000d81 	.word	0x00000d81
     b64:	00000c41 	.word	0x00000c41
     b68:	00000d81 	.word	0x00000d81
     b6c:	00000c23 	.word	0x00000c23
     b70:	00000c23 	.word	0x00000c23
     b74:	00000c41 	.word	0x00000c41
     b78:	00000c41 	.word	0x00000c41
     b7c:	00000c41 	.word	0x00000c41
     b80:	00000acf 	.word	0x00000acf
     b84:	00000c23 	.word	0x00000c23
     b88:	00000c71 	.word	0x00000c71
     b8c:	00000d81 	.word	0x00000d81
     b90:	00000acf 	.word	0x00000acf
     b94:	00000d81 	.word	0x00000d81
     b98:	00000c77 	.word	0x00000c77
     b9c:	00000c23 	.word	0x00000c23
     ba0:	00000c77 	.word	0x00000c77
     ba4:	00000d81 	.word	0x00000d81
     ba8:	00000d81 	.word	0x00000d81
     bac:	00000c77 	.word	0x00000c77
     bb0:	00000aa5 	.word	0x00000aa5
     bb4:	00000c23 	.word	0x00000c23
     bb8:	00000d81 	.word	0x00000d81
     bbc:	00000d81 	.word	0x00000d81
     bc0:	00000c23 	.word	0x00000c23
     bc4:	00000d81 	.word	0x00000d81
     bc8:	00000aa5 	.word	0x00000aa5
     bcc:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     bd0:	f04f 0e01 	mov.w	lr, #1
     bd4:	fa5f fc8c 	uxtb.w	ip, ip
     bd8:	fa0e fc0c 	lsl.w	ip, lr, ip
     bdc:	f64f 7eda 	movw	lr, #65498	; 0xffda
     be0:	ea1c 0f0e 	tst.w	ip, lr
     be4:	f47f af73 	bne.w	ace <cbvprintf_package+0xde>
     be8:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
     bec:	d128      	bne.n	c40 <cbvprintf_package+0x250>
     bee:	f01c 0101 	ands.w	r1, ip, #1
     bf2:	f43f af6c 	beq.w	ace <cbvprintf_package+0xde>
		buf = (void *) ROUND_UP(buf, align);
     bf6:	3c01      	subs	r4, #1
     bf8:	4444      	add	r4, r8
     bfa:	f1c8 0c00 	rsb	ip, r8, #0
     bfe:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     c02:	b135      	cbz	r5, c12 <cbvprintf_package+0x222>
     c04:	f8dd c000 	ldr.w	ip, [sp]
     c08:	ebac 0c05 	sub.w	ip, ip, r5
     c0c:	44a4      	add	ip, r4
     c0e:	45b4      	cmp	ip, r6
     c10:	d825      	bhi.n	c5e <cbvprintf_package+0x26e>
		if (*fmt == 's') {
     c12:	2873      	cmp	r0, #115	; 0x73
     c14:	d179      	bne.n	d0a <cbvprintf_package+0x31a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c16:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     c18:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c1c:	3801      	subs	r0, #1
     c1e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     c20:	e70d      	b.n	a3e <cbvprintf_package+0x4e>
			if (fmt[-1] == 'l') {
     c22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
     c26:	296c      	cmp	r1, #108	; 0x6c
     c28:	d127      	bne.n	c7a <cbvprintf_package+0x28a>
				if (fmt[-2] == 'l') {
     c2a:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     c2e:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     c30:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
     c34:	d023      	beq.n	c7e <cbvprintf_package+0x28e>
			align = VA_STACK_ALIGN(void *);
     c36:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     c3a:	f8cd 8000 	str.w	r8, [sp]
     c3e:	e7da      	b.n	bf6 <cbvprintf_package+0x206>
				v.ld = va_arg(ap, long double);
     c40:	f109 0907 	add.w	r9, r9, #7
     c44:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
     c48:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     c4a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
			buf = (void *) ROUND_UP(buf, align);
     c4e:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     c52:	b15d      	cbz	r5, c6c <cbvprintf_package+0x27c>
				if (BUF_OFFSET + size > len) {
     c54:	f8dd e014 	ldr.w	lr, [sp, #20]
     c58:	44a6      	add	lr, r4
     c5a:	45b6      	cmp	lr, r6
     c5c:	d904      	bls.n	c68 <cbvprintf_package+0x278>
					return -ENOSPC;
     c5e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     c62:	b00d      	add	sp, #52	; 0x34
     c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     c68:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
     c6c:	3408      	adds	r4, #8
			parsing = false;
     c6e:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
     c70:	f04f 0808 	mov.w	r8, #8
     c74:	e718      	b.n	aa8 <cbvprintf_package+0xb8>
			parsing = false;
     c76:	2100      	movs	r1, #0
     c78:	e7dd      	b.n	c36 <cbvprintf_package+0x246>
			parsing = false;
     c7a:	2100      	movs	r1, #0
     c7c:	e7bb      	b.n	bf6 <cbvprintf_package+0x206>
					align = VA_STACK_ALIGN(long long);
     c7e:	f04f 0808 	mov.w	r8, #8
     c82:	e7da      	b.n	c3a <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     c84:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c86:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     c8a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     c8e:	e6ea      	b.n	a66 <cbvprintf_package+0x76>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     c90:	2a0f      	cmp	r2, #15
     c92:	d90c      	bls.n	cae <cbvprintf_package+0x2be>
					__ASSERT(false, "str_ptr_pos[] too small");
     c94:	492d      	ldr	r1, [pc, #180]	; (d4c <cbvprintf_package+0x35c>)
     c96:	4a2e      	ldr	r2, [pc, #184]	; (d50 <cbvprintf_package+0x360>)
     c98:	482e      	ldr	r0, [pc, #184]	; (d54 <cbvprintf_package+0x364>)
     c9a:	f240 13f5 	movw	r3, #501	; 0x1f5
     c9e:	f007 ffe0 	bl	8c62 <assert_print>
     ca2:	482f      	ldr	r0, [pc, #188]	; (d60 <cbvprintf_package+0x370>)
     ca4:	f007 ffdd 	bl	8c62 <assert_print>
     ca8:	f240 11f5 	movw	r1, #501	; 0x1f5
     cac:	e6f0      	b.n	a90 <cbvprintf_package+0xa0>
				if (buf0 != NULL) {
     cae:	b1cd      	cbz	r5, ce4 <cbvprintf_package+0x2f4>
					str_ptr_pos[s_idx] = s_ptr_idx;
     cb0:	f102 0e30 	add.w	lr, r2, #48	; 0x30
     cb4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     cb8:	44ee      	add	lr, sp
     cba:	f1bc 0f00 	cmp.w	ip, #0
     cbe:	d00b      	beq.n	cd8 <cbvprintf_package+0x2e8>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     cc0:	f060 007f 	orn	r0, r0, #127	; 0x7f
     cc4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     cc8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     ccc:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     cce:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     cd2:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     cd4:	9005      	str	r0, [sp, #20]
     cd6:	e6fa      	b.n	ace <cbvprintf_package+0xde>
					str_ptr_pos[s_idx] = s_ptr_idx;
     cd8:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     cdc:	9803      	ldr	r0, [sp, #12]
     cde:	3001      	adds	r0, #1
     ce0:	9003      	str	r0, [sp, #12]
     ce2:	e7f3      	b.n	ccc <cbvprintf_package+0x2dc>
				} else if (is_ro || rws_pos_en) {
     ce4:	f1bc 0f00 	cmp.w	ip, #0
     ce8:	d101      	bne.n	cee <cbvprintf_package+0x2fe>
     cea:	9801      	ldr	r0, [sp, #4]
     cec:	b108      	cbz	r0, cf2 <cbvprintf_package+0x302>
					len += 1;
     cee:	3601      	adds	r6, #1
     cf0:	e7ec      	b.n	ccc <cbvprintf_package+0x2dc>
					len += strlen(s) + 1 + 1;
     cf2:	4638      	mov	r0, r7
     cf4:	e9cd 3206 	strd	r3, r2, [sp, #24]
     cf8:	9105      	str	r1, [sp, #20]
     cfa:	f008 f878 	bl	8dee <strlen>
     cfe:	3602      	adds	r6, #2
     d00:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
     d04:	9905      	ldr	r1, [sp, #20]
     d06:	4406      	add	r6, r0
     d08:	e7e0      	b.n	ccc <cbvprintf_package+0x2dc>
		} else if (size == sizeof(int)) {
     d0a:	9800      	ldr	r0, [sp, #0]
     d0c:	2804      	cmp	r0, #4
     d0e:	d109      	bne.n	d24 <cbvprintf_package+0x334>
			int v = va_arg(ap, int);
     d10:	f109 0004 	add.w	r0, r9, #4
			if (buf0 != NULL) {
     d14:	b11d      	cbz	r5, d1e <cbvprintf_package+0x32e>
			int v = va_arg(ap, int);
     d16:	f8d9 c000 	ldr.w	ip, [r9]
     d1a:	f8c4 c000 	str.w	ip, [r4]
			buf += sizeof(int);
     d1e:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     d20:	4681      	mov	r9, r0
     d22:	e6d4      	b.n	ace <cbvprintf_package+0xde>
		} else if (size == sizeof(long long)) {
     d24:	9800      	ldr	r0, [sp, #0]
     d26:	2808      	cmp	r0, #8
     d28:	d11c      	bne.n	d64 <cbvprintf_package+0x374>
			long long v = va_arg(ap, long long);
     d2a:	f109 0007 	add.w	r0, r9, #7
     d2e:	f020 0007 	bic.w	r0, r0, #7
     d32:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
     d36:	b11d      	cbz	r5, d40 <cbvprintf_package+0x350>
			long long v = va_arg(ap, long long);
     d38:	e9d0 bc00 	ldrd	fp, ip, [r0]
     d3c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     d40:	3408      	adds	r4, #8
     d42:	e6c4      	b.n	ace <cbvprintf_package+0xde>
     d44:	00009574 	.word	0x00009574
     d48:	0000b688 	.word	0x0000b688
     d4c:	00009cb5 	.word	0x00009cb5
     d50:	00009e1f 	.word	0x00009e1f
     d54:	00009bdf 	.word	0x00009bdf
     d58:	00009e4d 	.word	0x00009e4d
     d5c:	00009e9d 	.word	0x00009e9d
     d60:	00009e6e 	.word	0x00009e6e
			__ASSERT(false, "unexpected size %u", size);
     d64:	4a3b      	ldr	r2, [pc, #236]	; (e54 <cbvprintf_package+0x464>)
     d66:	493c      	ldr	r1, [pc, #240]	; (e58 <cbvprintf_package+0x468>)
     d68:	483c      	ldr	r0, [pc, #240]	; (e5c <cbvprintf_package+0x46c>)
     d6a:	f240 2331 	movw	r3, #561	; 0x231
     d6e:	f007 ff78 	bl	8c62 <assert_print>
     d72:	9900      	ldr	r1, [sp, #0]
     d74:	483a      	ldr	r0, [pc, #232]	; (e60 <cbvprintf_package+0x470>)
     d76:	f007 ff74 	bl	8c62 <assert_print>
     d7a:	f240 2131 	movw	r1, #561	; 0x231
     d7e:	e687      	b.n	a90 <cbvprintf_package+0xa0>
			parsing = false;
     d80:	2100      	movs	r1, #0
     d82:	e6a4      	b.n	ace <cbvprintf_package+0xde>
	if (buf0 == NULL) {
     d84:	b91d      	cbnz	r5, d8e <cbvprintf_package+0x39e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     d86:	f1a6 0408 	sub.w	r4, r6, #8
     d8a:	1860      	adds	r0, r4, r1
     d8c:	e769      	b.n	c62 <cbvprintf_package+0x272>
	if (rws_pos_en) {
     d8e:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
     d90:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
     d94:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     d98:	b90b      	cbnz	r3, d9e <cbvprintf_package+0x3ae>
     d9a:	4608      	mov	r0, r1
     d9c:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
     d9e:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
     da2:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     da4:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     da6:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     daa:	f1ba 0f00 	cmp.w	sl, #0
     dae:	d006      	beq.n	dbe <cbvprintf_package+0x3ce>
     db0:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     db2:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     db6:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     dba:	4562      	cmp	r2, ip
     dbc:	d106      	bne.n	dcc <cbvprintf_package+0x3dc>
     dbe:	f10d 0820 	add.w	r8, sp, #32
     dc2:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     dc6:	f1c5 0b01 	rsb	fp, r5, #1
     dca:	e035      	b.n	e38 <cbvprintf_package+0x448>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     dcc:	f810 1b01 	ldrb.w	r1, [r0], #1
     dd0:	060b      	lsls	r3, r1, #24
     dd2:	d508      	bpl.n	de6 <cbvprintf_package+0x3f6>
			if (BUF_OFFSET + 1 > len) {
     dd4:	eb04 080e 	add.w	r8, r4, lr
     dd8:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     dda:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     dde:	f63f af3e 	bhi.w	c5e <cbvprintf_package+0x26e>
			*buf++ = pos;
     de2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     de6:	f10c 0c01 	add.w	ip, ip, #1
     dea:	e7e6      	b.n	dba <cbvprintf_package+0x3ca>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     dec:	f1ba 0f00 	cmp.w	sl, #0
     df0:	d003      	beq.n	dfa <cbvprintf_package+0x40a>
     df2:	f998 2000 	ldrsb.w	r2, [r8]
     df6:	2a00      	cmp	r2, #0
     df8:	db1c      	blt.n	e34 <cbvprintf_package+0x444>
		if (rws_pos_en) {
     dfa:	9b01      	ldr	r3, [sp, #4]
     dfc:	bb03      	cbnz	r3, e40 <cbvprintf_package+0x450>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     dfe:	f898 2000 	ldrb.w	r2, [r8]
     e02:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     e06:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     e0a:	4638      	mov	r0, r7
     e0c:	f007 ffef 	bl	8dee <strlen>
     e10:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     e12:	eb04 010b 	add.w	r1, r4, fp
     e16:	4411      	add	r1, r2
     e18:	42b1      	cmp	r1, r6
     e1a:	f63f af20 	bhi.w	c5e <cbvprintf_package+0x26e>
		*buf++ = str_ptr_pos[i];
     e1e:	f898 1000 	ldrb.w	r1, [r8]
     e22:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     e26:	4639      	mov	r1, r7
     e28:	4620      	mov	r0, r4
     e2a:	9200      	str	r2, [sp, #0]
     e2c:	f007 fffb 	bl	8e26 <memcpy>
		buf += size;
     e30:	9a00      	ldr	r2, [sp, #0]
     e32:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     e34:	f108 0801 	add.w	r8, r8, #1
     e38:	45c8      	cmp	r8, r9
     e3a:	d1d7      	bne.n	dec <cbvprintf_package+0x3fc>
	return BUF_OFFSET;
     e3c:	1b60      	subs	r0, r4, r5
     e3e:	e710      	b.n	c62 <cbvprintf_package+0x272>
			size = 0;
     e40:	2200      	movs	r2, #0
     e42:	e7e6      	b.n	e12 <cbvprintf_package+0x422>
		return -EFAULT;
     e44:	f06f 000d 	mvn.w	r0, #13
     e48:	e70b      	b.n	c62 <cbvprintf_package+0x272>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     e4a:	2907      	cmp	r1, #7
     e4c:	f63f adec 	bhi.w	a28 <cbvprintf_package+0x38>
     e50:	e705      	b.n	c5e <cbvprintf_package+0x26e>
     e52:	bf00      	nop
     e54:	00009e1f 	.word	0x00009e1f
     e58:	00009cb5 	.word	0x00009cb5
     e5c:	00009bdf 	.word	0x00009bdf
     e60:	00009e88 	.word	0x00009e88

00000e64 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     e64:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     e66:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     e68:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     e6a:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
     e6e:	2c03      	cmp	r4, #3
{
     e70:	4605      	mov	r5, r0
	switch (method) {
     e72:	d002      	beq.n	e7a <sys_notify_finalize+0x16>
     e74:	b12c      	cbz	r4, e82 <sys_notify_finalize+0x1e>
     e76:	2000      	movs	r0, #0
     e78:	e000      	b.n	e7c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     e7a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     e7c:	2300      	movs	r3, #0
     e7e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     e80:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     e82:	4a05      	ldr	r2, [pc, #20]	; (e98 <sys_notify_finalize+0x34>)
     e84:	4905      	ldr	r1, [pc, #20]	; (e9c <sys_notify_finalize+0x38>)
     e86:	4806      	ldr	r0, [pc, #24]	; (ea0 <sys_notify_finalize+0x3c>)
     e88:	2345      	movs	r3, #69	; 0x45
     e8a:	f007 feea 	bl	8c62 <assert_print>
     e8e:	4802      	ldr	r0, [pc, #8]	; (e98 <sys_notify_finalize+0x34>)
     e90:	2145      	movs	r1, #69	; 0x45
     e92:	f007 fedf 	bl	8c54 <assert_post_action>
     e96:	e7ee      	b.n	e76 <sys_notify_finalize+0x12>
     e98:	00009eb4 	.word	0x00009eb4
     e9c:	00009cb5 	.word	0x00009cb5
     ea0:	00009bdf 	.word	0x00009bdf

00000ea4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     ea4:	4b01      	ldr	r3, [pc, #4]	; (eac <__printk_hook_install+0x8>)
     ea6:	6018      	str	r0, [r3, #0]
}
     ea8:	4770      	bx	lr
     eaa:	bf00      	nop
     eac:	20000098 	.word	0x20000098

00000eb0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     eb4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
     eb8:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     eba:	f019 0f08 	tst.w	r9, #8
{
     ebe:	4604      	mov	r4, r0
	if (processing) {
     ec0:	d022      	beq.n	f08 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
     ec2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ec4:	bf0c      	ite	eq
     ec6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     eca:	f049 0920 	orrne.w	r9, r9, #32
     ece:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     ed2:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     ed4:	4620      	mov	r0, r4
     ed6:	f005 f9dd 	bl	6294 <z_spin_unlock_valid>
     eda:	b968      	cbnz	r0, ef8 <process_event+0x48>
     edc:	4a9c      	ldr	r2, [pc, #624]	; (1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>)
     ede:	499d      	ldr	r1, [pc, #628]	; (1154 <CONFIG_FPROTECT_BLOCK_SIZE+0x154>)
     ee0:	489d      	ldr	r0, [pc, #628]	; (1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
     ee2:	23b9      	movs	r3, #185	; 0xb9
     ee4:	f007 febd 	bl	8c62 <assert_print>
     ee8:	489c      	ldr	r0, [pc, #624]	; (115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>)
     eea:	4621      	mov	r1, r4
     eec:	f007 feb9 	bl	8c62 <assert_print>
     ef0:	4897      	ldr	r0, [pc, #604]	; (1150 <CONFIG_FPROTECT_BLOCK_SIZE+0x150>)
     ef2:	21b9      	movs	r1, #185	; 0xb9
     ef4:	f007 feae 	bl	8c54 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     ef8:	9b00      	ldr	r3, [sp, #0]
     efa:	f383 8811 	msr	BASEPRI, r3
     efe:	f3bf 8f6f 	isb	sy
}
     f02:	b003      	add	sp, #12
     f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     f08:	4f95      	ldr	r7, [pc, #596]	; (1160 <CONFIG_FPROTECT_BLOCK_SIZE+0x160>)
     f0a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f0e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     f12:	2902      	cmp	r1, #2
     f14:	d10f      	bne.n	f36 <process_event+0x86>
			evt = process_recheck(mgr);
     f16:	4620      	mov	r0, r4
     f18:	f007 fdb6 	bl	8a88 <process_recheck>
		if (evt == EVT_NOP) {
     f1c:	2800      	cmp	r0, #0
     f1e:	d0d8      	beq.n	ed2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     f20:	3801      	subs	r0, #1
     f22:	2804      	cmp	r0, #4
     f24:	f200 8104 	bhi.w	1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>
     f28:	e8df f010 	tbh	[pc, r0, lsl #1]
     f2c:	01020005 	.word	0x01020005
     f30:	009e0069 	.word	0x009e0069
     f34:	00d0      	.short	0x00d0
			res = mgr->last_res;
     f36:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f3a:	8ba2      	ldrh	r2, [r4, #28]
	if (res < 0) {
     f3c:	f1bb 0f00 	cmp.w	fp, #0
     f40:	da19      	bge.n	f76 <process_event+0xc6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     f42:	2600      	movs	r6, #0
		*clients = mgr->clients;
     f44:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f46:	f022 0207 	bic.w	r2, r2, #7
	list->tail = NULL;
     f4a:	e9c4 6600 	strd	r6, r6, [r4]
     f4e:	f042 0201 	orr.w	r2, r2, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f52:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f54:	8ba3      	ldrh	r3, [r4, #28]
     f56:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f5a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f5c:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
     f5e:	d003      	beq.n	f68 <process_event+0xb8>
		if (do_monitors
     f60:	68a2      	ldr	r2, [r4, #8]
     f62:	2a00      	cmp	r2, #0
     f64:	f040 810c 	bne.w	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
		    || !sys_slist_is_empty(&clients)
     f68:	b915      	cbnz	r5, f70 <process_event+0xc0>
		    || (transit != NULL)) {
     f6a:	2e00      	cmp	r6, #0
     f6c:	f000 8151 	beq.w	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
     f70:	f04f 0a00 	mov.w	sl, #0
     f74:	e106      	b.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f76:	f002 0307 	and.w	r3, r2, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     f7a:	1f59      	subs	r1, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     f7c:	2901      	cmp	r1, #1
     f7e:	d81f      	bhi.n	fc0 <process_event+0x110>
	list->head = NULL;
     f80:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f82:	f022 0207 	bic.w	r2, r2, #7
		if (state == ONOFF_STATE_TO_ON) {
     f86:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     f88:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f8a:	b292      	uxth	r2, r2
	list->tail = NULL;
     f8c:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     f90:	d10a      	bne.n	fa8 <process_event+0xf8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f92:	b13d      	cbz	r5, fa4 <process_event+0xf4>
     f94:	8be3      	ldrh	r3, [r4, #30]
     f96:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     f98:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
     f9a:	3301      	adds	r3, #1
     f9c:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f9e:	2900      	cmp	r1, #0
     fa0:	d1fa      	bne.n	f98 <process_event+0xe8>
     fa2:	83e3      	strh	r3, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fa4:	f042 0202 	orr.w	r2, r2, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     fa8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     faa:	4620      	mov	r0, r4
     fac:	f007 fd6c 	bl	8a88 <process_recheck>
     fb0:	4606      	mov	r6, r0
     fb2:	2800      	cmp	r0, #0
     fb4:	d0ce      	beq.n	f54 <process_event+0xa4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fb6:	f042 0220 	orr.w	r2, r2, #32
     fba:	83a2      	strh	r2, [r4, #28]
		onoff_transition_fn transit = NULL;
     fbc:	2600      	movs	r6, #0
     fbe:	e7c9      	b.n	f54 <process_event+0xa4>
	} else if (state == ONOFF_STATE_TO_OFF) {
     fc0:	2b04      	cmp	r3, #4
     fc2:	d10d      	bne.n	fe0 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fc4:	f022 0207 	bic.w	r2, r2, #7
     fc8:	b292      	uxth	r2, r2
	mgr->flags = (state & ONOFF_STATE_MASK)
     fca:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     fcc:	4620      	mov	r0, r4
     fce:	f007 fd5b 	bl	8a88 <process_recheck>
     fd2:	4605      	mov	r5, r0
     fd4:	b188      	cbz	r0, ffa <process_event+0x14a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fd6:	f042 0220 	orr.w	r2, r2, #32
     fda:	83a2      	strh	r2, [r4, #28]
     fdc:	2500      	movs	r5, #0
     fde:	e7ed      	b.n	fbc <process_event+0x10c>
		__ASSERT_NO_MSG(false);
     fe0:	4960      	ldr	r1, [pc, #384]	; (1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
     fe2:	f240 131b 	movw	r3, #283	; 0x11b
     fe6:	463a      	mov	r2, r7
     fe8:	4640      	mov	r0, r8
     fea:	f007 fe3a 	bl	8c62 <assert_print>
     fee:	f240 111b 	movw	r1, #283	; 0x11b
     ff2:	4638      	mov	r0, r7
     ff4:	f007 fe2e 	bl	8c54 <assert_post_action>
     ff8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     ffa:	462e      	mov	r6, r5
     ffc:	e7aa      	b.n	f54 <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     ffe:	f1b9 0f00 	cmp.w	r9, #0
    1002:	d00b      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1004:	4958      	ldr	r1, [pc, #352]	; (1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>)
    1006:	4640      	mov	r0, r8
    1008:	f44f 73ab 	mov.w	r3, #342	; 0x156
    100c:	463a      	mov	r2, r7
    100e:	f007 fe28 	bl	8c62 <assert_print>
    1012:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1016:	4638      	mov	r0, r7
    1018:	f007 fe1c 	bl	8c54 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    101c:	6823      	ldr	r3, [r4, #0]
    101e:	b95b      	cbnz	r3, 1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    1020:	4952      	ldr	r1, [pc, #328]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
    1022:	4640      	mov	r0, r8
    1024:	f240 1357 	movw	r3, #343	; 0x157
    1028:	463a      	mov	r2, r7
    102a:	f007 fe1a 	bl	8c62 <assert_print>
    102e:	f240 1157 	movw	r1, #343	; 0x157
    1032:	4638      	mov	r0, r7
    1034:	f007 fe0e 	bl	8c54 <assert_post_action>
			transit = mgr->transitions->start;
    1038:	6923      	ldr	r3, [r4, #16]
    103a:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    103c:	b95e      	cbnz	r6, 1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    103e:	494c      	ldr	r1, [pc, #304]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    1040:	4640      	mov	r0, r8
    1042:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1046:	463a      	mov	r2, r7
    1048:	f007 fe0b 	bl	8c62 <assert_print>
    104c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1050:	4638      	mov	r0, r7
    1052:	f007 fdff 	bl	8c54 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1056:	8ba3      	ldrh	r3, [r4, #28]
    1058:	f023 0307 	bic.w	r3, r3, #7
    105c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1060:	83a3      	strh	r3, [r4, #28]
}
    1062:	2500      	movs	r5, #0
		res = 0;
    1064:	46ab      	mov	fp, r5
}
    1066:	e775      	b.n	f54 <process_event+0xa4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1068:	f1b9 0f02 	cmp.w	r9, #2
    106c:	d00b      	beq.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    106e:	4941      	ldr	r1, [pc, #260]	; (1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>)
    1070:	4640      	mov	r0, r8
    1072:	f240 135d 	movw	r3, #349	; 0x15d
    1076:	463a      	mov	r2, r7
    1078:	f007 fdf3 	bl	8c62 <assert_print>
    107c:	f240 115d 	movw	r1, #349	; 0x15d
    1080:	4638      	mov	r0, r7
    1082:	f007 fde7 	bl	8c54 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1086:	8be3      	ldrh	r3, [r4, #30]
    1088:	b15b      	cbz	r3, 10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    108a:	493b      	ldr	r1, [pc, #236]	; (1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
    108c:	4640      	mov	r0, r8
    108e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1092:	463a      	mov	r2, r7
    1094:	f007 fde5 	bl	8c62 <assert_print>
    1098:	f44f 71af 	mov.w	r1, #350	; 0x15e
    109c:	4638      	mov	r0, r7
    109e:	f007 fdd9 	bl	8c54 <assert_post_action>
			transit = mgr->transitions->stop;
    10a2:	6923      	ldr	r3, [r4, #16]
    10a4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    10a6:	b95e      	cbnz	r6, 10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>
    10a8:	4931      	ldr	r1, [pc, #196]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    10aa:	4640      	mov	r0, r8
    10ac:	f240 1361 	movw	r3, #353	; 0x161
    10b0:	463a      	mov	r2, r7
    10b2:	f007 fdd6 	bl	8c62 <assert_print>
    10b6:	f240 1161 	movw	r1, #353	; 0x161
    10ba:	4638      	mov	r0, r7
    10bc:	f007 fdca 	bl	8c54 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10c0:	8ba3      	ldrh	r3, [r4, #28]
    10c2:	f023 0307 	bic.w	r3, r3, #7
    10c6:	f043 0304 	orr.w	r3, r3, #4
    10ca:	e7c9      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10cc:	f1b9 0f01 	cmp.w	r9, #1
    10d0:	d00b      	beq.n	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
    10d2:	492a      	ldr	r1, [pc, #168]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    10d4:	4640      	mov	r0, r8
    10d6:	f44f 73b2 	mov.w	r3, #356	; 0x164
    10da:	463a      	mov	r2, r7
    10dc:	f007 fdc1 	bl	8c62 <assert_print>
    10e0:	f44f 71b2 	mov.w	r1, #356	; 0x164
    10e4:	4638      	mov	r0, r7
    10e6:	f007 fdb5 	bl	8c54 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    10ea:	6823      	ldr	r3, [r4, #0]
    10ec:	b95b      	cbnz	r3, 1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
    10ee:	491f      	ldr	r1, [pc, #124]	; (116c <CONFIG_FPROTECT_BLOCK_SIZE+0x16c>)
    10f0:	4640      	mov	r0, r8
    10f2:	f240 1365 	movw	r3, #357	; 0x165
    10f6:	463a      	mov	r2, r7
    10f8:	f007 fdb3 	bl	8c62 <assert_print>
    10fc:	f240 1165 	movw	r1, #357	; 0x165
    1100:	4638      	mov	r0, r7
    1102:	f007 fda7 	bl	8c54 <assert_post_action>
			transit = mgr->transitions->reset;
    1106:	6923      	ldr	r3, [r4, #16]
    1108:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    110a:	b95e      	cbnz	r6, 1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    110c:	4918      	ldr	r1, [pc, #96]	; (1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>)
    110e:	4640      	mov	r0, r8
    1110:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1114:	463a      	mov	r2, r7
    1116:	f007 fda4 	bl	8c62 <assert_print>
    111a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    111e:	4638      	mov	r0, r7
    1120:	f007 fd98 	bl	8c54 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1124:	8ba3      	ldrh	r3, [r4, #28]
    1126:	f023 0307 	bic.w	r3, r3, #7
    112a:	f043 0305 	orr.w	r3, r3, #5
    112e:	e797      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
			__ASSERT_NO_MSG(false);
    1130:	490c      	ldr	r1, [pc, #48]	; (1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>)
    1132:	f240 136b 	movw	r3, #363	; 0x16b
    1136:	463a      	mov	r2, r7
    1138:	4640      	mov	r0, r8
    113a:	f007 fd92 	bl	8c62 <assert_print>
    113e:	2500      	movs	r5, #0
    1140:	f240 116b 	movw	r1, #363	; 0x16b
    1144:	4638      	mov	r0, r7
    1146:	f007 fd85 	bl	8c54 <assert_post_action>
		onoff_transition_fn transit = NULL;
    114a:	462e      	mov	r6, r5
    114c:	e78a      	b.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    114e:	bf00      	nop
    1150:	00009f7a 	.word	0x00009f7a
    1154:	00009fa7 	.word	0x00009fa7
    1158:	00009bdf 	.word	0x00009bdf
    115c:	00009fbe 	.word	0x00009fbe
    1160:	00009ed7 	.word	0x00009ed7
    1164:	00009cb5 	.word	0x00009cb5
    1168:	00009ef9 	.word	0x00009ef9
    116c:	00009f05 	.word	0x00009f05
    1170:	00009f28 	.word	0x00009f28
    1174:	00009f3f 	.word	0x00009f3f
    1178:	00009f55 	.word	0x00009f55
    117c:	00009f64 	.word	0x00009f64
				   && !sys_slist_is_empty(&mgr->monitors);
    1180:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1184:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1188:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    118c:	83a3      	strh	r3, [r4, #28]
    118e:	4648      	mov	r0, r9
    1190:	f005 f880 	bl	6294 <z_spin_unlock_valid>
    1194:	b968      	cbnz	r0, 11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    1196:	4a37      	ldr	r2, [pc, #220]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    1198:	4937      	ldr	r1, [pc, #220]	; (1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    119a:	23b9      	movs	r3, #185	; 0xb9
    119c:	4640      	mov	r0, r8
    119e:	f007 fd60 	bl	8c62 <assert_print>
    11a2:	4836      	ldr	r0, [pc, #216]	; (127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>)
    11a4:	4649      	mov	r1, r9
    11a6:	f007 fd5c 	bl	8c62 <assert_print>
    11aa:	4832      	ldr	r0, [pc, #200]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    11ac:	21b9      	movs	r1, #185	; 0xb9
    11ae:	f007 fd51 	bl	8c54 <assert_post_action>
    11b2:	9b00      	ldr	r3, [sp, #0]
    11b4:	f383 8811 	msr	BASEPRI, r3
    11b8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    11bc:	f1ba 0f00 	cmp.w	sl, #0
    11c0:	d136      	bne.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
	while (!sys_slist_is_empty(list)) {
    11c2:	2d00      	cmp	r5, #0
    11c4:	d146      	bne.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
			if (transit != NULL) {
    11c6:	b116      	cbz	r6, 11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
				transit(mgr, transition_complete);
    11c8:	492d      	ldr	r1, [pc, #180]	; (1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
    11ca:	4620      	mov	r0, r4
    11cc:	47b0      	blx	r6
	__asm__ volatile(
    11ce:	f04f 0240 	mov.w	r2, #64	; 0x40
    11d2:	f3ef 8311 	mrs	r3, BASEPRI
    11d6:	f382 8812 	msr	BASEPRI_MAX, r2
    11da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    11de:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    11e0:	9300      	str	r3, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    11e2:	f005 f849 	bl	6278 <z_spin_lock_valid>
    11e6:	b968      	cbnz	r0, 1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    11e8:	4a22      	ldr	r2, [pc, #136]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    11ea:	4926      	ldr	r1, [pc, #152]	; (1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>)
    11ec:	238e      	movs	r3, #142	; 0x8e
    11ee:	4640      	mov	r0, r8
    11f0:	f007 fd37 	bl	8c62 <assert_print>
    11f4:	4824      	ldr	r0, [pc, #144]	; (1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    11f6:	4649      	mov	r1, r9
    11f8:	f007 fd33 	bl	8c62 <assert_print>
    11fc:	481d      	ldr	r0, [pc, #116]	; (1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>)
    11fe:	218e      	movs	r1, #142	; 0x8e
    1200:	f007 fd28 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    1204:	4648      	mov	r0, r9
    1206:	f005 f855 	bl	62b4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    120a:	8ba3      	ldrh	r3, [r4, #28]
    120c:	f023 0308 	bic.w	r3, r3, #8
    1210:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1212:	8ba3      	ldrh	r3, [r4, #28]
    1214:	06da      	lsls	r2, r3, #27
    1216:	d525      	bpl.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1218:	f023 0310 	bic.w	r3, r3, #16
    121c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    121e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1220:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1224:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1228:	2900      	cmp	r1, #0
    122a:	f47f ae72 	bne.w	f12 <process_event+0x62>
out:
    122e:	e650      	b.n	ed2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1230:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1232:	2900      	cmp	r1, #0
    1234:	d0c5      	beq.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
	return node->next;
    1236:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    123a:	684b      	ldr	r3, [r1, #4]
    123c:	9a01      	ldr	r2, [sp, #4]
    123e:	469c      	mov	ip, r3
    1240:	4620      	mov	r0, r4
    1242:	465b      	mov	r3, fp
    1244:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1246:	f1ba 0f00 	cmp.w	sl, #0
    124a:	d0ba      	beq.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
    124c:	4651      	mov	r1, sl
    124e:	f8da a000 	ldr.w	sl, [sl]
    1252:	e7f2      	b.n	123a <CONFIG_FPROTECT_BLOCK_SIZE+0x23a>
    1254:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1256:	9a01      	ldr	r2, [sp, #4]
    1258:	682d      	ldr	r5, [r5, #0]
    125a:	465b      	mov	r3, fp
    125c:	4620      	mov	r0, r4
    125e:	f007 fc2f 	bl	8ac0 <notify_one>
    1262:	e7ae      	b.n	11c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1264:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1268:	bf1e      	ittt	ne
    126a:	f023 0320 	bicne.w	r3, r3, #32
    126e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1270:	2102      	movne	r1, #2
    1272:	e7d5      	b.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
    1274:	00009f7a 	.word	0x00009f7a
    1278:	00009fa7 	.word	0x00009fa7
    127c:	00009fbe 	.word	0x00009fbe
    1280:	0000128d 	.word	0x0000128d
    1284:	00009fd3 	.word	0x00009fd3
    1288:	00009fe8 	.word	0x00009fe8

0000128c <transition_complete>:
{
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	4604      	mov	r4, r0
    1290:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1292:	f100 0614 	add.w	r6, r0, #20
    1296:	f04f 0340 	mov.w	r3, #64	; 0x40
    129a:	f3ef 8711 	mrs	r7, BASEPRI
    129e:	f383 8812 	msr	BASEPRI_MAX, r3
    12a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12a6:	4630      	mov	r0, r6
    12a8:	f004 ffe6 	bl	6278 <z_spin_lock_valid>
    12ac:	b968      	cbnz	r0, 12ca <transition_complete+0x3e>
    12ae:	4a0c      	ldr	r2, [pc, #48]	; (12e0 <transition_complete+0x54>)
    12b0:	490c      	ldr	r1, [pc, #48]	; (12e4 <transition_complete+0x58>)
    12b2:	480d      	ldr	r0, [pc, #52]	; (12e8 <transition_complete+0x5c>)
    12b4:	238e      	movs	r3, #142	; 0x8e
    12b6:	f007 fcd4 	bl	8c62 <assert_print>
    12ba:	480c      	ldr	r0, [pc, #48]	; (12ec <transition_complete+0x60>)
    12bc:	4631      	mov	r1, r6
    12be:	f007 fcd0 	bl	8c62 <assert_print>
    12c2:	4807      	ldr	r0, [pc, #28]	; (12e0 <transition_complete+0x54>)
    12c4:	218e      	movs	r1, #142	; 0x8e
    12c6:	f007 fcc5 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    12ca:	4630      	mov	r0, r6
    12cc:	f004 fff2 	bl	62b4 <z_spin_lock_set_owner>
	mgr->last_res = res;
    12d0:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    12d2:	463a      	mov	r2, r7
    12d4:	4620      	mov	r0, r4
    12d6:	2101      	movs	r1, #1
}
    12d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    12dc:	f7ff bde8 	b.w	eb0 <process_event>
    12e0:	00009f7a 	.word	0x00009f7a
    12e4:	00009fd3 	.word	0x00009fd3
    12e8:	00009bdf 	.word	0x00009bdf
    12ec:	00009fe8 	.word	0x00009fe8

000012f0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    12f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12f4:	4604      	mov	r4, r0
    12f6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    12f8:	f007 fbf8 	bl	8aec <validate_args>

	if (rv < 0) {
    12fc:	1e05      	subs	r5, r0, #0
    12fe:	db61      	blt.n	13c4 <onoff_request+0xd4>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1300:	f104 0914 	add.w	r9, r4, #20
    1304:	f04f 0340 	mov.w	r3, #64	; 0x40
    1308:	f3ef 8a11 	mrs	sl, BASEPRI
    130c:	f383 8812 	msr	BASEPRI_MAX, r3
    1310:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1314:	4648      	mov	r0, r9
    1316:	f004 ffaf 	bl	6278 <z_spin_lock_valid>
    131a:	b968      	cbnz	r0, 1338 <onoff_request+0x48>
    131c:	4a38      	ldr	r2, [pc, #224]	; (1400 <onoff_request+0x110>)
    131e:	4939      	ldr	r1, [pc, #228]	; (1404 <onoff_request+0x114>)
    1320:	4839      	ldr	r0, [pc, #228]	; (1408 <onoff_request+0x118>)
    1322:	238e      	movs	r3, #142	; 0x8e
    1324:	f007 fc9d 	bl	8c62 <assert_print>
    1328:	4838      	ldr	r0, [pc, #224]	; (140c <onoff_request+0x11c>)
    132a:	4649      	mov	r1, r9
    132c:	f007 fc99 	bl	8c62 <assert_print>
    1330:	4833      	ldr	r0, [pc, #204]	; (1400 <onoff_request+0x110>)
    1332:	218e      	movs	r1, #142	; 0x8e
    1334:	f007 fc8e 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    1338:	4648      	mov	r0, r9
    133a:	f004 ffbb 	bl	62b4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    133e:	8be3      	ldrh	r3, [r4, #30]
    1340:	8ba6      	ldrh	r6, [r4, #28]
    1342:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1346:	4293      	cmp	r3, r2
    1348:	f006 0607 	and.w	r6, r6, #7
    134c:	d051      	beq.n	13f2 <onoff_request+0x102>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    134e:	2e02      	cmp	r6, #2
	rv = state;
    1350:	4635      	mov	r5, r6
	if (state == ONOFF_STATE_ON) {
    1352:	d123      	bne.n	139c <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1354:	3301      	adds	r3, #1
    1356:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1358:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    135c:	4648      	mov	r0, r9
    135e:	f004 ff99 	bl	6294 <z_spin_unlock_valid>
    1362:	b968      	cbnz	r0, 1380 <onoff_request+0x90>
    1364:	4a26      	ldr	r2, [pc, #152]	; (1400 <onoff_request+0x110>)
    1366:	492a      	ldr	r1, [pc, #168]	; (1410 <onoff_request+0x120>)
    1368:	4827      	ldr	r0, [pc, #156]	; (1408 <onoff_request+0x118>)
    136a:	23b9      	movs	r3, #185	; 0xb9
    136c:	f007 fc79 	bl	8c62 <assert_print>
    1370:	4828      	ldr	r0, [pc, #160]	; (1414 <onoff_request+0x124>)
    1372:	4649      	mov	r1, r9
    1374:	f007 fc75 	bl	8c62 <assert_print>
    1378:	4821      	ldr	r0, [pc, #132]	; (1400 <onoff_request+0x110>)
    137a:	21b9      	movs	r1, #185	; 0xb9
    137c:	f007 fc6a 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    1380:	f38a 8811 	msr	BASEPRI, sl
    1384:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1388:	f1b8 0f00 	cmp.w	r8, #0
    138c:	d01a      	beq.n	13c4 <onoff_request+0xd4>
			notify_one(mgr, cli, state, 0);
    138e:	2300      	movs	r3, #0
    1390:	4632      	mov	r2, r6
    1392:	4639      	mov	r1, r7
    1394:	4620      	mov	r0, r4
    1396:	f007 fb93 	bl	8ac0 <notify_one>
    139a:	e013      	b.n	13c4 <onoff_request+0xd4>
	} else if ((state == ONOFF_STATE_OFF)
    139c:	2e06      	cmp	r6, #6
    139e:	d814      	bhi.n	13ca <onoff_request+0xda>
    13a0:	e8df f006 	tbb	[pc, r6]
    13a4:	13131f04 	.word	0x13131f04
    13a8:	2a04      	.short	0x2a04
    13aa:	04          	.byte	0x04
    13ab:	00          	.byte	0x00
	parent->next = child;
    13ac:	2300      	movs	r3, #0
    13ae:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    13b0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    13b2:	b9db      	cbnz	r3, 13ec <onoff_request+0xfc>
	list->head = node;
    13b4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    13b8:	b9ae      	cbnz	r6, 13e6 <onoff_request+0xf6>
		process_event(mgr, EVT_RECHECK, key);
    13ba:	4652      	mov	r2, sl
    13bc:	2102      	movs	r1, #2
    13be:	4620      	mov	r0, r4
    13c0:	f7ff fd76 	bl	eb0 <process_event>
		}
	}

	return rv;
}
    13c4:	4628      	mov	r0, r5
    13c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    13ca:	4913      	ldr	r1, [pc, #76]	; (1418 <onoff_request+0x128>)
    13cc:	480e      	ldr	r0, [pc, #56]	; (1408 <onoff_request+0x118>)
    13ce:	4a13      	ldr	r2, [pc, #76]	; (141c <onoff_request+0x12c>)
    13d0:	f240 13c9 	movw	r3, #457	; 0x1c9
    13d4:	f007 fc45 	bl	8c62 <assert_print>
    13d8:	4810      	ldr	r0, [pc, #64]	; (141c <onoff_request+0x12c>)
    13da:	f240 11c9 	movw	r1, #457	; 0x1c9
    13de:	f007 fc39 	bl	8c54 <assert_post_action>
	if (state == ONOFF_STATE_ON) {
    13e2:	f06f 0504 	mvn.w	r5, #4
    13e6:	f04f 0800 	mov.w	r8, #0
    13ea:	e7b7      	b.n	135c <onoff_request+0x6c>
	parent->next = child;
    13ec:	601f      	str	r7, [r3, #0]
	list->tail = node;
    13ee:	6067      	str	r7, [r4, #4]
}
    13f0:	e7e2      	b.n	13b8 <onoff_request+0xc8>
		rv = -EAGAIN;
    13f2:	f06f 050a 	mvn.w	r5, #10
    13f6:	e7f6      	b.n	13e6 <onoff_request+0xf6>
	if (state == ONOFF_STATE_ON) {
    13f8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    13fc:	e7f3      	b.n	13e6 <onoff_request+0xf6>
    13fe:	bf00      	nop
    1400:	00009f7a 	.word	0x00009f7a
    1404:	00009fd3 	.word	0x00009fd3
    1408:	00009bdf 	.word	0x00009bdf
    140c:	00009fe8 	.word	0x00009fe8
    1410:	00009fa7 	.word	0x00009fa7
    1414:	00009fbe 	.word	0x00009fbe
    1418:	00009f64 	.word	0x00009f64
    141c:	00009ed7 	.word	0x00009ed7

00001420 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1420:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    1424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1428:	4604      	mov	r4, r0
    142a:	460e      	mov	r6, r1
    142c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    142e:	d36c      	bcc.n	150a <sys_heap_init+0xea>
    1430:	493d      	ldr	r1, [pc, #244]	; (1528 <sys_heap_init+0x108>)
    1432:	4a3e      	ldr	r2, [pc, #248]	; (152c <sys_heap_init+0x10c>)
    1434:	483e      	ldr	r0, [pc, #248]	; (1530 <sys_heap_init+0x110>)
    1436:	f240 13e3 	movw	r3, #483	; 0x1e3
    143a:	f007 fc12 	bl	8c62 <assert_print>
    143e:	483d      	ldr	r0, [pc, #244]	; (1534 <sys_heap_init+0x114>)
    1440:	f007 fc0f 	bl	8c62 <assert_print>
    1444:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1448:	4838      	ldr	r0, [pc, #224]	; (152c <sys_heap_init+0x10c>)
    144a:	f007 fc03 	bl	8c54 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    144e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1450:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1452:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1454:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1458:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    145c:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    145e:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1460:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1464:	d80e      	bhi.n	1484 <sys_heap_init+0x64>
    1466:	4934      	ldr	r1, [pc, #208]	; (1538 <sys_heap_init+0x118>)
    1468:	4a30      	ldr	r2, [pc, #192]	; (152c <sys_heap_init+0x10c>)
    146a:	4831      	ldr	r0, [pc, #196]	; (1530 <sys_heap_init+0x110>)
    146c:	f240 13f3 	movw	r3, #499	; 0x1f3
    1470:	f007 fbf7 	bl	8c62 <assert_print>
    1474:	4831      	ldr	r0, [pc, #196]	; (153c <sys_heap_init+0x11c>)
    1476:	f007 fbf4 	bl	8c62 <assert_print>
    147a:	482c      	ldr	r0, [pc, #176]	; (152c <sys_heap_init+0x10c>)
    147c:	f240 11f3 	movw	r1, #499	; 0x1f3
    1480:	f007 fbe8 	bl	8c54 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1484:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1486:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    148a:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    148e:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    1492:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1494:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    1496:	2300      	movs	r3, #0
    1498:	08e4      	lsrs	r4, r4, #3
    149a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    149c:	1c63      	adds	r3, r4, #1
    149e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    14a0:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    14a2:	d90e      	bls.n	14c2 <sys_heap_init+0xa2>
    14a4:	4926      	ldr	r1, [pc, #152]	; (1540 <sys_heap_init+0x120>)
    14a6:	4a21      	ldr	r2, [pc, #132]	; (152c <sys_heap_init+0x10c>)
    14a8:	4821      	ldr	r0, [pc, #132]	; (1530 <sys_heap_init+0x110>)
    14aa:	f44f 7301 	mov.w	r3, #516	; 0x204
    14ae:	f007 fbd8 	bl	8c62 <assert_print>
    14b2:	4822      	ldr	r0, [pc, #136]	; (153c <sys_heap_init+0x11c>)
    14b4:	f007 fbd5 	bl	8c62 <assert_print>
    14b8:	481c      	ldr	r0, [pc, #112]	; (152c <sys_heap_init+0x10c>)
    14ba:	f44f 7101 	mov.w	r1, #516	; 0x204
    14be:	f007 fbc9 	bl	8c54 <assert_post_action>
    14c2:	f105 030c 	add.w	r3, r5, #12
    14c6:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    14ca:	2200      	movs	r2, #0
    14cc:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    14d0:	4543      	cmp	r3, r8
    14d2:	d1fb      	bne.n	14cc <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    14d4:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    14d6:	f043 0301 	orr.w	r3, r3, #1
    14da:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    14dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    14e0:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    14e2:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    14e4:	802a      	strh	r2, [r5, #0]
    14e6:	8048      	strh	r0, [r1, #2]
    14e8:	19a9      	adds	r1, r5, r6
    14ea:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    14ee:	804a      	strh	r2, [r1, #2]
    14f0:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    14f2:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    14f6:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    14f8:	885a      	ldrh	r2, [r3, #2]
    14fa:	f042 0201 	orr.w	r2, r2, #1
    14fe:	4628      	mov	r0, r5
    1500:	805a      	strh	r2, [r3, #2]
}
    1502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    1506:	f007 bb22 	b.w	8b4e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    150a:	2a04      	cmp	r2, #4
    150c:	d89f      	bhi.n	144e <sys_heap_init+0x2e>
    150e:	490d      	ldr	r1, [pc, #52]	; (1544 <sys_heap_init+0x124>)
    1510:	4a06      	ldr	r2, [pc, #24]	; (152c <sys_heap_init+0x10c>)
    1512:	4807      	ldr	r0, [pc, #28]	; (1530 <sys_heap_init+0x110>)
    1514:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1518:	f007 fba3 	bl	8c62 <assert_print>
    151c:	4807      	ldr	r0, [pc, #28]	; (153c <sys_heap_init+0x11c>)
    151e:	f007 fba0 	bl	8c62 <assert_print>
    1522:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1526:	e78f      	b.n	1448 <sys_heap_init+0x28>
    1528:	0000a0cc 	.word	0x0000a0cc
    152c:	0000a000 	.word	0x0000a000
    1530:	00009bdf 	.word	0x00009bdf
    1534:	0000a0e2 	.word	0x0000a0e2
    1538:	0000a133 	.word	0x0000a133
    153c:	0000a11a 	.word	0x0000a11a
    1540:	0000a15c 	.word	0x0000a15c
    1544:	0000a0f9 	.word	0x0000a0f9

00001548 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    154c:	b091      	sub	sp, #68	; 0x44
    154e:	468b      	mov	fp, r1
    1550:	9002      	str	r0, [sp, #8]
    1552:	4692      	mov	sl, r2
    1554:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1556:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1558:	f89a 0000 	ldrb.w	r0, [sl]
    155c:	b908      	cbnz	r0, 1562 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    155e:	4628      	mov	r0, r5
    1560:	e338      	b.n	1bd4 <cbvprintf+0x68c>
		if (*fp != '%') {
    1562:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1564:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1568:	d007      	beq.n	157a <cbvprintf+0x32>
			OUTC('%');
    156a:	9b02      	ldr	r3, [sp, #8]
    156c:	4659      	mov	r1, fp
    156e:	4798      	blx	r3
    1570:	2800      	cmp	r0, #0
    1572:	f2c0 832f 	blt.w	1bd4 <cbvprintf+0x68c>
    1576:	3501      	adds	r5, #1
			break;
    1578:	e200      	b.n	197c <cbvprintf+0x434>
		} state = {
    157a:	2218      	movs	r2, #24
    157c:	2100      	movs	r1, #0
    157e:	a80a      	add	r0, sp, #40	; 0x28
    1580:	f007 fc5c 	bl	8e3c <memset>
	if (*sp == '%') {
    1584:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1588:	2b25      	cmp	r3, #37	; 0x25
    158a:	d078      	beq.n	167e <cbvprintf+0x136>
    158c:	2200      	movs	r2, #0
    158e:	4696      	mov	lr, r2
    1590:	4694      	mov	ip, r2
    1592:	4616      	mov	r6, r2
    1594:	4610      	mov	r0, r2
    1596:	4639      	mov	r1, r7
		switch (*sp) {
    1598:	f817 3b01 	ldrb.w	r3, [r7], #1
    159c:	2b2b      	cmp	r3, #43	; 0x2b
    159e:	f000 809d 	beq.w	16dc <cbvprintf+0x194>
    15a2:	f200 8094 	bhi.w	16ce <cbvprintf+0x186>
    15a6:	2b20      	cmp	r3, #32
    15a8:	f000 809a 	beq.w	16e0 <cbvprintf+0x198>
    15ac:	2b23      	cmp	r3, #35	; 0x23
    15ae:	f000 809a 	beq.w	16e6 <cbvprintf+0x19e>
    15b2:	b12a      	cbz	r2, 15c0 <cbvprintf+0x78>
    15b4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    15bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15c0:	f1be 0f00 	cmp.w	lr, #0
    15c4:	d005      	beq.n	15d2 <cbvprintf+0x8a>
    15c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15ca:	f042 0220 	orr.w	r2, r2, #32
    15ce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15d2:	f1bc 0f00 	cmp.w	ip, #0
    15d6:	d005      	beq.n	15e4 <cbvprintf+0x9c>
    15d8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15dc:	f042 0210 	orr.w	r2, r2, #16
    15e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15e4:	b12e      	cbz	r6, 15f2 <cbvprintf+0xaa>
    15e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15ea:	f042 0208 	orr.w	r2, r2, #8
    15ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
    15f2:	b128      	cbz	r0, 1600 <cbvprintf+0xb8>
    15f4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    15f8:	f042 0204 	orr.w	r2, r2, #4
    15fc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1600:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1604:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1608:	2844      	cmp	r0, #68	; 0x44
    160a:	d103      	bne.n	1614 <cbvprintf+0xcc>
		conv->flag_zero = false;
    160c:	f36f 1286 	bfc	r2, #6, #1
    1610:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1614:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1618:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    161a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    161e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1622:	d17b      	bne.n	171c <cbvprintf+0x1d4>
		conv->width_star = true;
    1624:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1628:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    162c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    162e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1632:	781a      	ldrb	r2, [r3, #0]
    1634:	2a2e      	cmp	r2, #46	; 0x2e
    1636:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    163a:	bf0c      	ite	eq
    163c:	2101      	moveq	r1, #1
    163e:	2100      	movne	r1, #0
    1640:	f361 0241 	bfi	r2, r1, #1, #1
    1644:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1648:	d174      	bne.n	1734 <cbvprintf+0x1ec>
	if (*sp == '*') {
    164a:	785a      	ldrb	r2, [r3, #1]
    164c:	2a2a      	cmp	r2, #42	; 0x2a
    164e:	d06a      	beq.n	1726 <cbvprintf+0x1de>
	++sp;
    1650:	3301      	adds	r3, #1
	size_t val = 0;
    1652:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1654:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1656:	4618      	mov	r0, r3
    1658:	f810 2b01 	ldrb.w	r2, [r0], #1
    165c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1660:	2f09      	cmp	r7, #9
    1662:	f240 8093 	bls.w	178c <cbvprintf+0x244>
	conv->unsupported |= ((conv->prec_value < 0)
    1666:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    166a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    166c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1670:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1674:	f361 0241 	bfi	r2, r1, #1, #1
    1678:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    167c:	e05a      	b.n	1734 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    167e:	f10a 0702 	add.w	r7, sl, #2
    1682:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1686:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    168a:	07d9      	lsls	r1, r3, #31
    168c:	f140 8122 	bpl.w	18d4 <cbvprintf+0x38c>
			width = va_arg(ap, int);
    1690:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1694:	f1b9 0f00 	cmp.w	r9, #0
    1698:	da07      	bge.n	16aa <cbvprintf+0x162>
				conv->flag_dash = true;
    169a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    169e:	f042 0204 	orr.w	r2, r2, #4
    16a2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    16a6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    16aa:	075a      	lsls	r2, r3, #29
    16ac:	f140 811b 	bpl.w	18e6 <cbvprintf+0x39e>
			int arg = va_arg(ap, int);
    16b0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    16b4:	f1b8 0f00 	cmp.w	r8, #0
    16b8:	f280 811a 	bge.w	18f0 <cbvprintf+0x3a8>
				conv->prec_present = false;
    16bc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    16c0:	f36f 0341 	bfc	r3, #1, #1
    16c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    16c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    16cc:	e110      	b.n	18f0 <cbvprintf+0x3a8>
		switch (*sp) {
    16ce:	2b2d      	cmp	r3, #45	; 0x2d
    16d0:	d00c      	beq.n	16ec <cbvprintf+0x1a4>
    16d2:	2b30      	cmp	r3, #48	; 0x30
    16d4:	f47f af6d 	bne.w	15b2 <cbvprintf+0x6a>
    16d8:	2201      	movs	r2, #1
	} while (loop);
    16da:	e75c      	b.n	1596 <cbvprintf+0x4e>
		switch (*sp) {
    16dc:	2601      	movs	r6, #1
    16de:	e75a      	b.n	1596 <cbvprintf+0x4e>
    16e0:	f04f 0c01 	mov.w	ip, #1
    16e4:	e757      	b.n	1596 <cbvprintf+0x4e>
    16e6:	f04f 0e01 	mov.w	lr, #1
    16ea:	e754      	b.n	1596 <cbvprintf+0x4e>
    16ec:	2001      	movs	r0, #1
    16ee:	e752      	b.n	1596 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    16f0:	fb0c 6202 	mla	r2, ip, r2, r6
    16f4:	3a30      	subs	r2, #48	; 0x30
    16f6:	4603      	mov	r3, r0
    16f8:	4618      	mov	r0, r3
    16fa:	f810 6b01 	ldrb.w	r6, [r0], #1
    16fe:	f1a6 0730 	sub.w	r7, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1702:	2f09      	cmp	r7, #9
    1704:	d9f4      	bls.n	16f0 <cbvprintf+0x1a8>
	if (sp != wp) {
    1706:	4299      	cmp	r1, r3
    1708:	d093      	beq.n	1632 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    170a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    170e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1710:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1712:	f362 0141 	bfi	r1, r2, #1, #1
    1716:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    171a:	e78a      	b.n	1632 <cbvprintf+0xea>
    171c:	460b      	mov	r3, r1
	size_t val = 0;
    171e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1720:	f04f 0c0a 	mov.w	ip, #10
    1724:	e7e8      	b.n	16f8 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1726:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    172a:	f042 0204 	orr.w	r2, r2, #4
    172e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1732:	3302      	adds	r3, #2
	switch (*sp) {
    1734:	461f      	mov	r7, r3
    1736:	f817 2b01 	ldrb.w	r2, [r7], #1
    173a:	2a6c      	cmp	r2, #108	; 0x6c
    173c:	d047      	beq.n	17ce <cbvprintf+0x286>
    173e:	d82b      	bhi.n	1798 <cbvprintf+0x250>
    1740:	2a68      	cmp	r2, #104	; 0x68
    1742:	d031      	beq.n	17a8 <cbvprintf+0x260>
    1744:	2a6a      	cmp	r2, #106	; 0x6a
    1746:	d04c      	beq.n	17e2 <cbvprintf+0x29a>
    1748:	2a4c      	cmp	r2, #76	; 0x4c
    174a:	d052      	beq.n	17f2 <cbvprintf+0x2aa>
    174c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    174e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1752:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1756:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    175a:	2a78      	cmp	r2, #120	; 0x78
    175c:	f200 80b2 	bhi.w	18c4 <cbvprintf+0x37c>
    1760:	2a6d      	cmp	r2, #109	; 0x6d
    1762:	d853      	bhi.n	180c <cbvprintf+0x2c4>
    1764:	2a69      	cmp	r2, #105	; 0x69
    1766:	f200 80ad 	bhi.w	18c4 <cbvprintf+0x37c>
    176a:	2a57      	cmp	r2, #87	; 0x57
    176c:	d86a      	bhi.n	1844 <cbvprintf+0x2fc>
    176e:	2a41      	cmp	r2, #65	; 0x41
    1770:	d003      	beq.n	177a <cbvprintf+0x232>
    1772:	3a45      	subs	r2, #69	; 0x45
    1774:	2a02      	cmp	r2, #2
    1776:	f200 80a5 	bhi.w	18c4 <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_FP;
    177a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    177e:	2204      	movs	r2, #4
    1780:	f362 0302 	bfi	r3, r2, #0, #3
    1784:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1788:	2301      	movs	r3, #1
			break;
    178a:	e082      	b.n	1892 <cbvprintf+0x34a>
		val = 10U * val + *sp++ - '0';
    178c:	fb06 2201 	mla	r2, r6, r1, r2
    1790:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    1794:	4603      	mov	r3, r0
    1796:	e75e      	b.n	1656 <cbvprintf+0x10e>
	switch (*sp) {
    1798:	2a74      	cmp	r2, #116	; 0x74
    179a:	d026      	beq.n	17ea <cbvprintf+0x2a2>
    179c:	2a7a      	cmp	r2, #122	; 0x7a
    179e:	d1d5      	bne.n	174c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    17a0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17a4:	2206      	movs	r2, #6
    17a6:	e00d      	b.n	17c4 <cbvprintf+0x27c>
		if (*++sp == 'h') {
    17a8:	785a      	ldrb	r2, [r3, #1]
    17aa:	2a68      	cmp	r2, #104	; 0x68
    17ac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    17b0:	d106      	bne.n	17c0 <cbvprintf+0x278>
			conv->length_mod = LENGTH_HH;
    17b2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    17b4:	f361 02c6 	bfi	r2, r1, #3, #4
    17b8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    17bc:	1c9f      	adds	r7, r3, #2
    17be:	e7c6      	b.n	174e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    17c0:	4613      	mov	r3, r2
    17c2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    17c4:	f362 03c6 	bfi	r3, r2, #3, #4
    17c8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    17cc:	e7bf      	b.n	174e <cbvprintf+0x206>
		if (*++sp == 'l') {
    17ce:	785a      	ldrb	r2, [r3, #1]
    17d0:	2a6c      	cmp	r2, #108	; 0x6c
    17d2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    17d6:	d101      	bne.n	17dc <cbvprintf+0x294>
			conv->length_mod = LENGTH_LL;
    17d8:	2104      	movs	r1, #4
    17da:	e7eb      	b.n	17b4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_L;
    17dc:	4613      	mov	r3, r2
    17de:	2203      	movs	r2, #3
    17e0:	e7f0      	b.n	17c4 <cbvprintf+0x27c>
		conv->length_mod = LENGTH_J;
    17e2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17e6:	2205      	movs	r2, #5
    17e8:	e7ec      	b.n	17c4 <cbvprintf+0x27c>
		conv->length_mod = LENGTH_T;
    17ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17ee:	2207      	movs	r2, #7
    17f0:	e7e8      	b.n	17c4 <cbvprintf+0x27c>
		conv->unsupported = true;
    17f2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    17f6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    17fa:	f023 0302 	bic.w	r3, r3, #2
    17fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1802:	f043 0302 	orr.w	r3, r3, #2
    1806:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    180a:	e7a0      	b.n	174e <cbvprintf+0x206>
	switch (conv->specifier) {
    180c:	f1a2 006e 	sub.w	r0, r2, #110	; 0x6e
    1810:	b2c0      	uxtb	r0, r0
    1812:	2101      	movs	r1, #1
    1814:	4081      	lsls	r1, r0
    1816:	f240 4082 	movw	r0, #1154	; 0x482
    181a:	4201      	tst	r1, r0
    181c:	d122      	bne.n	1864 <cbvprintf+0x31c>
    181e:	f011 0f24 	tst.w	r1, #36	; 0x24
    1822:	d142      	bne.n	18aa <cbvprintf+0x362>
    1824:	07ce      	lsls	r6, r1, #31
    1826:	d54d      	bpl.n	18c4 <cbvprintf+0x37c>
		conv->specifier_cat = SPECIFIER_PTR;
    1828:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    182c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1830:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1834:	2103      	movs	r1, #3
    1836:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    183a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    183c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1840:	4143      	adcs	r3, r0
    1842:	e026      	b.n	1892 <cbvprintf+0x34a>
	switch (conv->specifier) {
    1844:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1848:	b2c9      	uxtb	r1, r1
    184a:	2001      	movs	r0, #1
    184c:	fa00 f101 	lsl.w	r1, r0, r1
    1850:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1854:	d191      	bne.n	177a <cbvprintf+0x232>
    1856:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    185a:	d124      	bne.n	18a6 <cbvprintf+0x35e>
    185c:	f640 0001 	movw	r0, #2049	; 0x801
    1860:	4201      	tst	r1, r0
    1862:	d02f      	beq.n	18c4 <cbvprintf+0x37c>
    1864:	2102      	movs	r1, #2
		conv->specifier_cat = SPECIFIER_SINT;
    1866:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    186a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    186e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1870:	f361 0002 	bfi	r0, r1, #0, #3
			conv->invalid = true;
    1874:	bf08      	it	eq
    1876:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
		conv->specifier_cat = SPECIFIER_SINT;
    187a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
			conv->invalid = true;
    187e:	bf04      	itt	eq
    1880:	f041 0101 	orreq.w	r1, r1, #1
    1884:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1888:	2a63      	cmp	r2, #99	; 0x63
    188a:	d121      	bne.n	18d0 <cbvprintf+0x388>
			unsupported = (conv->length_mod != LENGTH_NONE);
    188c:	3b00      	subs	r3, #0
    188e:	bf18      	it	ne
    1890:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1892:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1896:	f3c2 0140 	ubfx	r1, r2, #1, #1
    189a:	430b      	orrs	r3, r1
    189c:	f363 0241 	bfi	r2, r3, #1, #1
    18a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    18a4:	e6ef      	b.n	1686 <cbvprintf+0x13e>
	switch (conv->specifier) {
    18a6:	4601      	mov	r1, r0
    18a8:	e7dd      	b.n	1866 <cbvprintf+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    18aa:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    18ae:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    18b0:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    18b4:	f361 0202 	bfi	r2, r1, #0, #3
    18b8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    18bc:	bf14      	ite	ne
    18be:	2301      	movne	r3, #1
    18c0:	2300      	moveq	r3, #0
    18c2:	e7e6      	b.n	1892 <cbvprintf+0x34a>
		conv->invalid = true;
    18c4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    18c8:	f043 0301 	orr.w	r3, r3, #1
    18cc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    18d0:	2300      	movs	r3, #0
    18d2:	e7de      	b.n	1892 <cbvprintf+0x34a>
		} else if (conv->width_present) {
    18d4:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    18d8:	2a00      	cmp	r2, #0
			width = conv->width_value;
    18da:	bfb4      	ite	lt
    18dc:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    18e0:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    18e4:	e6e1      	b.n	16aa <cbvprintf+0x162>
		} else if (conv->prec_present) {
    18e6:	079b      	lsls	r3, r3, #30
    18e8:	f57f aeee 	bpl.w	16c8 <cbvprintf+0x180>
			precision = conv->prec_value;
    18ec:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    18f0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    18f4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    18f6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    18fa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    18fe:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1902:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1904:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1908:	d13a      	bne.n	1980 <cbvprintf+0x438>
			switch (length_mod) {
    190a:	1ecb      	subs	r3, r1, #3
    190c:	2b04      	cmp	r3, #4
    190e:	d812      	bhi.n	1936 <cbvprintf+0x3ee>
    1910:	e8df f003 	tbb	[pc, r3]
    1914:	11090903 	.word	0x11090903
    1918:	11          	.byte	0x11
    1919:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    191a:	f854 3b04 	ldr.w	r3, [r4], #4
    191e:	17da      	asrs	r2, r3, #31
    1920:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			} else if (length_mod == LENGTH_H) {
    1924:	e01b      	b.n	195e <cbvprintf+0x416>
					(sint_value_type)va_arg(ap, intmax_t);
    1926:	1de2      	adds	r2, r4, #7
    1928:	f022 0207 	bic.w	r2, r2, #7
    192c:	4614      	mov	r4, r2
    192e:	6852      	ldr	r2, [r2, #4]
    1930:	f854 3b08 	ldr.w	r3, [r4], #8
				break;
    1934:	e7f4      	b.n	1920 <cbvprintf+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1936:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    193a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    193c:	ea4f 72e3 	mov.w	r2, r3, asr #31
				value->sint = va_arg(ap, int);
    1940:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1944:	d104      	bne.n	1950 <cbvprintf+0x408>
				value->uint = (unsigned char)value->uint;
    1946:	f003 03ff 	and.w	r3, r3, #255	; 0xff
				value->uint = (unsigned short)value->uint;
    194a:	930a      	str	r3, [sp, #40]	; 0x28
    194c:	2300      	movs	r3, #0
    194e:	e005      	b.n	195c <cbvprintf+0x414>
			} else if (length_mod == LENGTH_H) {
    1950:	2902      	cmp	r1, #2
    1952:	d104      	bne.n	195e <cbvprintf+0x416>
				value->sint = (short)value->sint;
    1954:	b21a      	sxth	r2, r3
    1956:	920a      	str	r2, [sp, #40]	; 0x28
    1958:	f343 33c0 	sbfx	r3, r3, #15, #1
    195c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (conv->invalid || conv->unsupported) {
    195e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1962:	f013 0603 	ands.w	r6, r3, #3
    1966:	d041      	beq.n	19ec <cbvprintf+0x4a4>
			OUTS(sp, fp);
    1968:	9802      	ldr	r0, [sp, #8]
    196a:	463b      	mov	r3, r7
    196c:	4652      	mov	r2, sl
    196e:	4659      	mov	r1, fp
    1970:	f007 f95a 	bl	8c28 <outs>
    1974:	2800      	cmp	r0, #0
    1976:	f2c0 812d 	blt.w	1bd4 <cbvprintf+0x68c>
    197a:	4405      	add	r5, r0
			continue;
    197c:	46ba      	mov	sl, r7
    197e:	e5eb      	b.n	1558 <cbvprintf+0x10>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1980:	2b02      	cmp	r3, #2
    1982:	d121      	bne.n	19c8 <cbvprintf+0x480>
			switch (length_mod) {
    1984:	1ecb      	subs	r3, r1, #3
    1986:	2b04      	cmp	r3, #4
    1988:	d813      	bhi.n	19b2 <cbvprintf+0x46a>
    198a:	e8df f003 	tbb	[pc, r3]
    198e:	0a03      	.short	0x0a03
    1990:	120a      	.short	0x120a
    1992:	12          	.byte	0x12
    1993:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1994:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
    1996:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1998:	2200      	movs	r2, #0
				value->uint =
    199a:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    199e:	461c      	mov	r4, r3
    19a0:	e7dd      	b.n	195e <cbvprintf+0x416>
					(uint_value_type)va_arg(ap,
    19a2:	3407      	adds	r4, #7
    19a4:	f024 0407 	bic.w	r4, r4, #7
    19a8:	4623      	mov	r3, r4
    19aa:	6862      	ldr	r2, [r4, #4]
    19ac:	f853 0b08 	ldr.w	r0, [r3], #8
				break;
    19b0:	e7f3      	b.n	199a <cbvprintf+0x452>
					(uint_value_type)va_arg(ap, size_t);
    19b2:	f854 3b04 	ldr.w	r3, [r4], #4
    19b6:	2200      	movs	r2, #0
			if (length_mod == LENGTH_HH) {
    19b8:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    19ba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    19be:	d0c2      	beq.n	1946 <cbvprintf+0x3fe>
			} else if (length_mod == LENGTH_H) {
    19c0:	2902      	cmp	r1, #2
    19c2:	d1cc      	bne.n	195e <cbvprintf+0x416>
				value->uint = (unsigned short)value->uint;
    19c4:	b29b      	uxth	r3, r3
    19c6:	e7c0      	b.n	194a <cbvprintf+0x402>
		} else if (specifier_cat == SPECIFIER_FP) {
    19c8:	2b04      	cmp	r3, #4
    19ca:	d109      	bne.n	19e0 <cbvprintf+0x498>
					(sint_value_type)va_arg(ap, long long);
    19cc:	1de3      	adds	r3, r4, #7
    19ce:	f023 0307 	bic.w	r3, r3, #7
    19d2:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    19d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19da:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    19de:	e7be      	b.n	195e <cbvprintf+0x416>
		} else if (specifier_cat == SPECIFIER_PTR) {
    19e0:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    19e2:	bf04      	itt	eq
    19e4:	f854 3b04 	ldreq.w	r3, [r4], #4
    19e8:	930a      	streq	r3, [sp, #40]	; 0x28
    19ea:	e7b8      	b.n	195e <cbvprintf+0x416>
		switch (conv->specifier) {
    19ec:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    19f0:	2878      	cmp	r0, #120	; 0x78
    19f2:	d8c3      	bhi.n	197c <cbvprintf+0x434>
    19f4:	2862      	cmp	r0, #98	; 0x62
    19f6:	d822      	bhi.n	1a3e <cbvprintf+0x4f6>
    19f8:	2825      	cmp	r0, #37	; 0x25
    19fa:	f43f adb6 	beq.w	156a <cbvprintf+0x22>
    19fe:	2858      	cmp	r0, #88	; 0x58
    1a00:	d1bc      	bne.n	197c <cbvprintf+0x434>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a02:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a06:	9300      	str	r3, [sp, #0]
    1a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1a0c:	ab04      	add	r3, sp, #16
    1a0e:	aa0c      	add	r2, sp, #48	; 0x30
    1a10:	f007 f8c4 	bl	8b9c <encode_uint>
    1a14:	4682      	mov	sl, r0
			if (precision >= 0) {
    1a16:	f1b8 0f00 	cmp.w	r8, #0
    1a1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a1e:	db0c      	blt.n	1a3a <cbvprintf+0x4f2>
				conv->flag_zero = false;
    1a20:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1a24:	eba3 020a 	sub.w	r2, r3, sl
				conv->flag_zero = false;
    1a28:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    1a2c:	4590      	cmp	r8, r2
				conv->flag_zero = false;
    1a2e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1a32:	d902      	bls.n	1a3a <cbvprintf+0x4f2>
					conv->pad0_value = precision - (int)len;
    1a34:	eba8 0202 	sub.w	r2, r8, r2
    1a38:	920d      	str	r2, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1a3a:	4698      	mov	r8, r3
    1a3c:	e03e      	b.n	1abc <cbvprintf+0x574>
		switch (conv->specifier) {
    1a3e:	3863      	subs	r0, #99	; 0x63
    1a40:	2815      	cmp	r0, #21
    1a42:	d89b      	bhi.n	197c <cbvprintf+0x434>
    1a44:	a201      	add	r2, pc, #4	; (adr r2, 1a4c <cbvprintf+0x504>)
    1a46:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1a4a:	bf00      	nop
    1a4c:	00001acd 	.word	0x00001acd
    1a50:	00001b31 	.word	0x00001b31
    1a54:	0000197d 	.word	0x0000197d
    1a58:	0000197d 	.word	0x0000197d
    1a5c:	0000197d 	.word	0x0000197d
    1a60:	0000197d 	.word	0x0000197d
    1a64:	00001b31 	.word	0x00001b31
    1a68:	0000197d 	.word	0x0000197d
    1a6c:	0000197d 	.word	0x0000197d
    1a70:	0000197d 	.word	0x0000197d
    1a74:	0000197d 	.word	0x0000197d
    1a78:	00001b89 	.word	0x00001b89
    1a7c:	00001b57 	.word	0x00001b57
    1a80:	00001b5b 	.word	0x00001b5b
    1a84:	0000197d 	.word	0x0000197d
    1a88:	0000197d 	.word	0x0000197d
    1a8c:	00001aa5 	.word	0x00001aa5
    1a90:	0000197d 	.word	0x0000197d
    1a94:	00001b57 	.word	0x00001b57
    1a98:	0000197d 	.word	0x0000197d
    1a9c:	0000197d 	.word	0x0000197d
    1aa0:	00001b57 	.word	0x00001b57
			if (precision >= 0) {
    1aa4:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1aa8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1aac:	db0a      	blt.n	1ac4 <cbvprintf+0x57c>
				len = strnlen(bps, precision);
    1aae:	4641      	mov	r1, r8
    1ab0:	4650      	mov	r0, sl
    1ab2:	f007 f9a3 	bl	8dfc <strnlen>
			bpe = bps + len;
    1ab6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1aba:	2600      	movs	r6, #0
		if (bps == NULL) {
    1abc:	f1ba 0f00 	cmp.w	sl, #0
    1ac0:	d10c      	bne.n	1adc <cbvprintf+0x594>
    1ac2:	e75b      	b.n	197c <cbvprintf+0x434>
				len = strlen(bps);
    1ac4:	4650      	mov	r0, sl
    1ac6:	f007 f992 	bl	8dee <strlen>
    1aca:	e7f4      	b.n	1ab6 <cbvprintf+0x56e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ace:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1ad2:	2600      	movs	r6, #0
			bps = buf;
    1ad4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1ad8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1adc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1ae0:	b106      	cbz	r6, 1ae4 <cbvprintf+0x59c>
			nj_len += 1U;
    1ae2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1ae4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1ae8:	06d0      	lsls	r0, r2, #27
    1aea:	d567      	bpl.n	1bbc <cbvprintf+0x674>
			nj_len += 2U;
    1aec:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1aee:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1af0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1af2:	bf48      	it	mi
    1af4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1af6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1af8:	bf48      	it	mi
    1afa:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1afc:	f1b9 0f00 	cmp.w	r9, #0
    1b00:	dd75      	ble.n	1bee <cbvprintf+0x6a6>
			if (!conv->flag_dash) {
    1b02:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1b06:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1b0a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1b0e:	9303      	str	r3, [sp, #12]
    1b10:	0753      	lsls	r3, r2, #29
    1b12:	d46c      	bmi.n	1bee <cbvprintf+0x6a6>
				if (conv->flag_zero) {
    1b14:	0650      	lsls	r0, r2, #25
    1b16:	d560      	bpl.n	1bda <cbvprintf+0x692>
					if (sign != 0) {
    1b18:	b146      	cbz	r6, 1b2c <cbvprintf+0x5e4>
						OUTC(sign);
    1b1a:	9b02      	ldr	r3, [sp, #8]
    1b1c:	4659      	mov	r1, fp
    1b1e:	4630      	mov	r0, r6
    1b20:	4798      	blx	r3
    1b22:	2800      	cmp	r0, #0
    1b24:	db56      	blt.n	1bd4 <cbvprintf+0x68c>
    1b26:	9b03      	ldr	r3, [sp, #12]
    1b28:	3501      	adds	r5, #1
    1b2a:	461e      	mov	r6, r3
					pad = '0';
    1b2c:	2330      	movs	r3, #48	; 0x30
    1b2e:	e055      	b.n	1bdc <cbvprintf+0x694>
			if (conv->flag_plus) {
    1b30:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    1b32:	bf5c      	itt	pl
    1b34:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1b38:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
				sign = '+';
    1b3e:	bf48      	it	mi
    1b40:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1b42:	2b00      	cmp	r3, #0
    1b44:	f6bf af5d 	bge.w	1a02 <cbvprintf+0x4ba>
				value->uint = (uint_value_type)-sint;
    1b48:	4252      	negs	r2, r2
    1b4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1b4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1b52:	262d      	movs	r6, #45	; 0x2d
    1b54:	e755      	b.n	1a02 <cbvprintf+0x4ba>
		switch (conv->specifier) {
    1b56:	2600      	movs	r6, #0
    1b58:	e753      	b.n	1a02 <cbvprintf+0x4ba>
			if (value->ptr != NULL) {
    1b5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b5c:	b340      	cbz	r0, 1bb0 <cbvprintf+0x668>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b5e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1b62:	9300      	str	r3, [sp, #0]
    1b64:	aa0c      	add	r2, sp, #48	; 0x30
    1b66:	ab04      	add	r3, sp, #16
    1b68:	2100      	movs	r1, #0
    1b6a:	f007 f817 	bl	8b9c <encode_uint>
				conv->altform_0c = true;
    1b6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1b72:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1b76:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1b7a:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b7e:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1b80:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1b84:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1b86:	e746      	b.n	1a16 <cbvprintf+0x4ce>
				store_count(conv, value->ptr, count);
    1b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1b8a:	2907      	cmp	r1, #7
    1b8c:	f63f aef6 	bhi.w	197c <cbvprintf+0x434>
    1b90:	e8df f001 	tbb	[pc, r1]
    1b94:	0c06040c 	.word	0x0c06040c
    1b98:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1b9c:	701d      	strb	r5, [r3, #0]
		break;
    1b9e:	e6ed      	b.n	197c <cbvprintf+0x434>
		*(short *)dp = (short)count;
    1ba0:	801d      	strh	r5, [r3, #0]
		break;
    1ba2:	e6eb      	b.n	197c <cbvprintf+0x434>
		*(intmax_t *)dp = (intmax_t)count;
    1ba4:	17ea      	asrs	r2, r5, #31
    1ba6:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1baa:	e6e7      	b.n	197c <cbvprintf+0x434>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1bac:	601d      	str	r5, [r3, #0]
		break;
    1bae:	e6e5      	b.n	197c <cbvprintf+0x434>
			bps = "(nil)";
    1bb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c78 <cbvprintf+0x730>
    1bb4:	4606      	mov	r6, r0
			bpe = bps + 5;
    1bb6:	f10a 0805 	add.w	r8, sl, #5
    1bba:	e78f      	b.n	1adc <cbvprintf+0x594>
		} else if (conv->altform_0) {
    1bbc:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1bbe:	bf48      	it	mi
    1bc0:	3301      	addmi	r3, #1
    1bc2:	e794      	b.n	1aee <cbvprintf+0x5a6>
					OUTC(pad);
    1bc4:	4618      	mov	r0, r3
    1bc6:	9303      	str	r3, [sp, #12]
    1bc8:	4659      	mov	r1, fp
    1bca:	9b02      	ldr	r3, [sp, #8]
    1bcc:	4798      	blx	r3
    1bce:	2800      	cmp	r0, #0
    1bd0:	9b03      	ldr	r3, [sp, #12]
    1bd2:	da04      	bge.n	1bde <cbvprintf+0x696>
#undef OUTS
#undef OUTC
}
    1bd4:	b011      	add	sp, #68	; 0x44
    1bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1bda:	2320      	movs	r3, #32
    1bdc:	444d      	add	r5, r9
    1bde:	464a      	mov	r2, r9
				while (width-- > 0) {
    1be0:	2a00      	cmp	r2, #0
    1be2:	eba5 0109 	sub.w	r1, r5, r9
    1be6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1bea:	dceb      	bgt.n	1bc4 <cbvprintf+0x67c>
    1bec:	460d      	mov	r5, r1
		if (sign != 0) {
    1bee:	b136      	cbz	r6, 1bfe <cbvprintf+0x6b6>
			OUTC(sign);
    1bf0:	9b02      	ldr	r3, [sp, #8]
    1bf2:	4659      	mov	r1, fp
    1bf4:	4630      	mov	r0, r6
    1bf6:	4798      	blx	r3
    1bf8:	2800      	cmp	r0, #0
    1bfa:	dbeb      	blt.n	1bd4 <cbvprintf+0x68c>
    1bfc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1bfe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c02:	06d9      	lsls	r1, r3, #27
    1c04:	d401      	bmi.n	1c0a <cbvprintf+0x6c2>
    1c06:	071a      	lsls	r2, r3, #28
    1c08:	d506      	bpl.n	1c18 <cbvprintf+0x6d0>
				OUTC('0');
    1c0a:	9b02      	ldr	r3, [sp, #8]
    1c0c:	4659      	mov	r1, fp
    1c0e:	2030      	movs	r0, #48	; 0x30
    1c10:	4798      	blx	r3
    1c12:	2800      	cmp	r0, #0
    1c14:	dbde      	blt.n	1bd4 <cbvprintf+0x68c>
    1c16:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1c18:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c1c:	06db      	lsls	r3, r3, #27
    1c1e:	d507      	bpl.n	1c30 <cbvprintf+0x6e8>
				OUTC(conv->specifier);
    1c20:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1c24:	9b02      	ldr	r3, [sp, #8]
    1c26:	4659      	mov	r1, fp
    1c28:	4798      	blx	r3
    1c2a:	2800      	cmp	r0, #0
    1c2c:	dbd2      	blt.n	1bd4 <cbvprintf+0x68c>
    1c2e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1c30:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1c32:	442e      	add	r6, r5
    1c34:	1b73      	subs	r3, r6, r5
    1c36:	2b00      	cmp	r3, #0
    1c38:	dc16      	bgt.n	1c68 <cbvprintf+0x720>
			OUTS(bps, bpe);
    1c3a:	9802      	ldr	r0, [sp, #8]
    1c3c:	4643      	mov	r3, r8
    1c3e:	4652      	mov	r2, sl
    1c40:	4659      	mov	r1, fp
    1c42:	f006 fff1 	bl	8c28 <outs>
    1c46:	2800      	cmp	r0, #0
    1c48:	dbc4      	blt.n	1bd4 <cbvprintf+0x68c>
    1c4a:	4405      	add	r5, r0
		while (width > 0) {
    1c4c:	44a9      	add	r9, r5
    1c4e:	eba9 0305 	sub.w	r3, r9, r5
    1c52:	2b00      	cmp	r3, #0
    1c54:	f77f ae92 	ble.w	197c <cbvprintf+0x434>
			OUTC(' ');
    1c58:	9b02      	ldr	r3, [sp, #8]
    1c5a:	4659      	mov	r1, fp
    1c5c:	2020      	movs	r0, #32
    1c5e:	4798      	blx	r3
    1c60:	2800      	cmp	r0, #0
    1c62:	dbb7      	blt.n	1bd4 <cbvprintf+0x68c>
    1c64:	3501      	adds	r5, #1
			--width;
    1c66:	e7f2      	b.n	1c4e <cbvprintf+0x706>
				OUTC('0');
    1c68:	9b02      	ldr	r3, [sp, #8]
    1c6a:	4659      	mov	r1, fp
    1c6c:	2030      	movs	r0, #48	; 0x30
    1c6e:	4798      	blx	r3
    1c70:	2800      	cmp	r0, #0
    1c72:	dbaf      	blt.n	1bd4 <cbvprintf+0x68c>
    1c74:	3501      	adds	r5, #1
    1c76:	e7dd      	b.n	1c34 <cbvprintf+0x6ec>
    1c78:	0000a187 	.word	0x0000a187

00001c7c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c7c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c7e:	f04f 0240 	mov.w	r2, #64	; 0x40
    1c82:	f3ef 8311 	mrs	r3, BASEPRI
    1c86:	f382 8812 	msr	BASEPRI_MAX, r2
    1c8a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c8e:	f001 fd35 	bl	36fc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c92:	4803      	ldr	r0, [pc, #12]	; (1ca0 <sys_reboot+0x24>)
    1c94:	f006 feeb 	bl	8a6e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c98:	f000 fe66 	bl	2968 <arch_cpu_idle>
    1c9c:	e7fc      	b.n	1c98 <sys_reboot+0x1c>
    1c9e:	bf00      	nop
    1ca0:	0000a18d 	.word	0x0000a18d

00001ca4 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    1ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ca8:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    1caa:	460c      	mov	r4, r1
    1cac:	b959      	cbnz	r1, 1cc6 <msg_process+0x22>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1cae:	4d12      	ldr	r5, [pc, #72]	; (1cf8 <msg_process+0x54>)
    1cb0:	4b12      	ldr	r3, [pc, #72]	; (1cfc <msg_process+0x58>)
	__ASSERT_NO_MSG(msg != NULL);
    1cb2:	4f13      	ldr	r7, [pc, #76]	; (1d00 <msg_process+0x5c>)
    1cb4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1d04 <msg_process+0x60>
    1cb8:	f8df a04c 	ldr.w	sl, [pc, #76]	; 1d08 <msg_process+0x64>
	return __log_backends_end - __log_backends_start;
    1cbc:	1b5b      	subs	r3, r3, r5
    1cbe:	ea4f 1823 	mov.w	r8, r3, asr #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1cc2:	4544      	cmp	r4, r8
    1cc4:	db01      	blt.n	1cca <msg_process+0x26>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (log_backend_is_active(backend) &&
    1cca:	4628      	mov	r0, r5
    1ccc:	f006 ffd7 	bl	8c7e <log_backend_is_active>
    1cd0:	b178      	cbz	r0, 1cf2 <msg_process+0x4e>
	__ASSERT_NO_MSG(msg != NULL);
    1cd2:	b94e      	cbnz	r6, 1ce8 <msg_process+0x44>
    1cd4:	4649      	mov	r1, r9
    1cd6:	4650      	mov	r0, sl
    1cd8:	2386      	movs	r3, #134	; 0x86
    1cda:	463a      	mov	r2, r7
    1cdc:	f006 ffc1 	bl	8c62 <assert_print>
    1ce0:	2186      	movs	r1, #134	; 0x86
    1ce2:	4638      	mov	r0, r7
    1ce4:	f006 ffb6 	bl	8c54 <assert_post_action>
	backend->api->process(backend, msg);
    1ce8:	682b      	ldr	r3, [r5, #0]
    1cea:	4631      	mov	r1, r6
    1cec:	681b      	ldr	r3, [r3, #0]
    1cee:	4628      	mov	r0, r5
    1cf0:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1cf2:	3401      	adds	r4, #1
    1cf4:	3510      	adds	r5, #16
    1cf6:	e7e4      	b.n	1cc2 <msg_process+0x1e>
    1cf8:	0000984c 	.word	0x0000984c
    1cfc:	0000986c 	.word	0x0000986c
    1d00:	0000a1b6 	.word	0x0000a1b6
    1d04:	0000a1ee 	.word	0x0000a1ee
    1d08:	00009bdf 	.word	0x00009bdf

00001d0c <log_format_func_t_get>:
}
    1d0c:	4b01      	ldr	r3, [pc, #4]	; (1d14 <log_format_func_t_get+0x8>)
    1d0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1d12:	4770      	bx	lr
    1d14:	000098c8 	.word	0x000098c8

00001d18 <log_core_init>:
	panic_mode = false;
    1d18:	4a05      	ldr	r2, [pc, #20]	; (1d30 <log_core_init+0x18>)
    1d1a:	2300      	movs	r3, #0
    1d1c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1d1e:	4a05      	ldr	r2, [pc, #20]	; (1d34 <log_core_init+0x1c>)
    1d20:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1d22:	4b05      	ldr	r3, [pc, #20]	; (1d38 <log_core_init+0x20>)
    1d24:	4a05      	ldr	r2, [pc, #20]	; (1d3c <log_core_init+0x24>)
    1d26:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    1d28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1d2c:	f000 ba8c 	b.w	2248 <log_output_timestamp_freq_set>
    1d30:	20000e6b 	.word	0x20000e6b
    1d34:	2000053c 	.word	0x2000053c
    1d38:	2000009c 	.word	0x2000009c
    1d3c:	00008c85 	.word	0x00008c85

00001d40 <log_init>:
{
    1d40:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    1d42:	4b19      	ldr	r3, [pc, #100]	; (1da8 <log_init+0x68>)
    1d44:	4c19      	ldr	r4, [pc, #100]	; (1dac <log_init+0x6c>)
    1d46:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d48:	2c90      	cmp	r4, #144	; 0x90
    1d4a:	d90b      	bls.n	1d64 <log_init+0x24>
    1d4c:	4918      	ldr	r1, [pc, #96]	; (1db0 <log_init+0x70>)
    1d4e:	4819      	ldr	r0, [pc, #100]	; (1db4 <log_init+0x74>)
    1d50:	4a19      	ldr	r2, [pc, #100]	; (1db8 <log_init+0x78>)
    1d52:	f240 2373 	movw	r3, #627	; 0x273
    1d56:	f006 ff84 	bl	8c62 <assert_print>
    1d5a:	4817      	ldr	r0, [pc, #92]	; (1db8 <log_init+0x78>)
    1d5c:	f240 2173 	movw	r1, #627	; 0x273
    1d60:	f006 ff78 	bl	8c54 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1d64:	f3bf 8f5b 	dmb	ish
    1d68:	4b14      	ldr	r3, [pc, #80]	; (1dbc <log_init+0x7c>)
    1d6a:	e853 6f00 	ldrex	r6, [r3]
    1d6e:	1c72      	adds	r2, r6, #1
    1d70:	e843 2100 	strex	r1, r2, [r3]
    1d74:	2900      	cmp	r1, #0
    1d76:	d1f8      	bne.n	1d6a <log_init+0x2a>
    1d78:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1d7c:	b91e      	cbnz	r6, 1d86 <log_init+0x46>
    1d7e:	1125      	asrs	r5, r4, #4
    1d80:	4c09      	ldr	r4, [pc, #36]	; (1da8 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    1d82:	42ae      	cmp	r6, r5
    1d84:	db00      	blt.n	1d88 <log_init+0x48>
}
    1d86:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    1d88:	7b23      	ldrb	r3, [r4, #12]
    1d8a:	b153      	cbz	r3, 1da2 <log_init+0x62>
			if (backend->api->init != NULL) {
    1d8c:	6823      	ldr	r3, [r4, #0]
    1d8e:	699b      	ldr	r3, [r3, #24]
    1d90:	b10b      	cbz	r3, 1d96 <log_init+0x56>
				backend->api->init(backend);
    1d92:	4620      	mov	r0, r4
    1d94:	4798      	blx	r3
			log_backend_enable(backend,
    1d96:	6863      	ldr	r3, [r4, #4]
    1d98:	2204      	movs	r2, #4
    1d9a:	6819      	ldr	r1, [r3, #0]
    1d9c:	4620      	mov	r0, r4
    1d9e:	f000 f86f 	bl	1e80 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1da2:	3601      	adds	r6, #1
    1da4:	3410      	adds	r4, #16
    1da6:	e7ec      	b.n	1d82 <log_init+0x42>
    1da8:	0000984c 	.word	0x0000984c
    1dac:	0000986c 	.word	0x0000986c
    1db0:	0000a246 	.word	0x0000a246
    1db4:	00009bdf 	.word	0x00009bdf
    1db8:	0000a201 	.word	0x0000a201
    1dbc:	20000540 	.word	0x20000540

00001dc0 <z_impl_log_panic>:
{
    1dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1dc2:	4f0c      	ldr	r7, [pc, #48]	; (1df4 <z_impl_log_panic+0x34>)
    1dc4:	783d      	ldrb	r5, [r7, #0]
    1dc6:	b94d      	cbnz	r5, 1ddc <z_impl_log_panic+0x1c>
    1dc8:	4c0b      	ldr	r4, [pc, #44]	; (1df8 <z_impl_log_panic+0x38>)
    1dca:	4e0c      	ldr	r6, [pc, #48]	; (1dfc <z_impl_log_panic+0x3c>)
	log_init();
    1dcc:	f7ff ffb8 	bl	1d40 <log_init>
    1dd0:	1b36      	subs	r6, r6, r4
    1dd2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dd4:	42b5      	cmp	r5, r6
    1dd6:	db02      	blt.n	1dde <z_impl_log_panic+0x1e>
	panic_mode = true;
    1dd8:	2301      	movs	r3, #1
    1dda:	703b      	strb	r3, [r7, #0]
}
    1ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    1dde:	4620      	mov	r0, r4
    1de0:	f006 ff4d 	bl	8c7e <log_backend_is_active>
    1de4:	b118      	cbz	r0, 1dee <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    1de6:	6823      	ldr	r3, [r4, #0]
    1de8:	4620      	mov	r0, r4
    1dea:	695b      	ldr	r3, [r3, #20]
    1dec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1dee:	3501      	adds	r5, #1
    1df0:	3410      	adds	r4, #16
    1df2:	e7ef      	b.n	1dd4 <z_impl_log_panic+0x14>
    1df4:	20000e6b 	.word	0x20000e6b
    1df8:	0000984c 	.word	0x0000984c
    1dfc:	0000986c 	.word	0x0000986c

00001e00 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1e00:	4b01      	ldr	r3, [pc, #4]	; (1e08 <z_log_notify_backend_enabled+0x8>)
    1e02:	2201      	movs	r2, #1
    1e04:	701a      	strb	r2, [r3, #0]
}
    1e06:	4770      	bx	lr
    1e08:	20000e6a 	.word	0x20000e6a

00001e0c <z_log_dropped>:
    1e0c:	4b0c      	ldr	r3, [pc, #48]	; (1e40 <z_log_dropped+0x34>)
    1e0e:	f3bf 8f5b 	dmb	ish
    1e12:	e853 1f00 	ldrex	r1, [r3]
    1e16:	3101      	adds	r1, #1
    1e18:	e843 1200 	strex	r2, r1, [r3]
    1e1c:	2a00      	cmp	r2, #0
    1e1e:	d1f8      	bne.n	1e12 <z_log_dropped+0x6>
    1e20:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1e24:	b158      	cbz	r0, 1e3e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1e26:	f3bf 8f5b 	dmb	ish
    1e2a:	4b06      	ldr	r3, [pc, #24]	; (1e44 <z_log_dropped+0x38>)
    1e2c:	e853 1f00 	ldrex	r1, [r3]
    1e30:	3901      	subs	r1, #1
    1e32:	e843 1200 	strex	r2, r1, [r3]
    1e36:	2a00      	cmp	r2, #0
    1e38:	d1f8      	bne.n	1e2c <z_log_dropped+0x20>
    1e3a:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    1e3e:	4770      	bx	lr
    1e40:	2000053c 	.word	0x2000053c
    1e44:	20000538 	.word	0x20000538

00001e48 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    1e48:	4b05      	ldr	r3, [pc, #20]	; (1e60 <z_log_msg2_commit+0x18>)
{
    1e4a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1e4c:	681b      	ldr	r3, [r3, #0]
{
    1e4e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1e50:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1e52:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    1e54:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    1e56:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    1e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    1e5c:	f7ff bf22 	b.w	1ca4 <msg_process>
    1e60:	2000009c 	.word	0x2000009c

00001e64 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1e64:	4a04      	ldr	r2, [pc, #16]	; (1e78 <log_source_name_get+0x14>)
    1e66:	4b05      	ldr	r3, [pc, #20]	; (1e7c <log_source_name_get+0x18>)
    1e68:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1e6a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1e6e:	bf34      	ite	cc
    1e70:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1e74:	2000      	movcs	r0, #0
}
    1e76:	4770      	bx	lr
    1e78:	000097fc 	.word	0x000097fc
    1e7c:	0000984c 	.word	0x0000984c

00001e80 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1e80:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1e82:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    1e84:	4c0e      	ldr	r4, [pc, #56]	; (1ec0 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1e86:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    1e88:	1b04      	subs	r4, r0, r4
    1e8a:	1124      	asrs	r4, r4, #4
{
    1e8c:	4605      	mov	r5, r0
    1e8e:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    1e90:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1e92:	b963      	cbnz	r3, 1eae <log_backend_enable+0x2e>
    1e94:	490b      	ldr	r1, [pc, #44]	; (1ec4 <log_backend_enable+0x44>)
    1e96:	4a0c      	ldr	r2, [pc, #48]	; (1ec8 <log_backend_enable+0x48>)
    1e98:	480c      	ldr	r0, [pc, #48]	; (1ecc <log_backend_enable+0x4c>)
    1e9a:	23bb      	movs	r3, #187	; 0xbb
    1e9c:	f006 fee1 	bl	8c62 <assert_print>
    1ea0:	480b      	ldr	r0, [pc, #44]	; (1ed0 <log_backend_enable+0x50>)
    1ea2:	f006 fede 	bl	8c62 <assert_print>
    1ea6:	4808      	ldr	r0, [pc, #32]	; (1ec8 <log_backend_enable+0x48>)
    1ea8:	21bb      	movs	r1, #187	; 0xbb
    1eaa:	f006 fed3 	bl	8c54 <assert_post_action>
	backend->cb->id = id;
    1eae:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    1eb0:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    1eb2:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    1eb4:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    1eb6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    1ebc:	f7ff bfa0 	b.w	1e00 <z_log_notify_backend_enabled>
    1ec0:	0000984c 	.word	0x0000984c
    1ec4:	0000a2c6 	.word	0x0000a2c6
    1ec8:	0000a26e 	.word	0x0000a26e
    1ecc:	00009bdf 	.word	0x00009bdf
    1ed0:	0000a2dc 	.word	0x0000a2dc

00001ed4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1ed4:	b40e      	push	{r1, r2, r3}
    1ed6:	b503      	push	{r0, r1, lr}
    1ed8:	ab03      	add	r3, sp, #12
    1eda:	4601      	mov	r1, r0
    1edc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ee0:	4804      	ldr	r0, [pc, #16]	; (1ef4 <print_formatted+0x20>)
	va_start(args, fmt);
    1ee2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ee4:	f7ff fb30 	bl	1548 <cbvprintf>
	va_end(args);

	return length;
}
    1ee8:	b002      	add	sp, #8
    1eea:	f85d eb04 	ldr.w	lr, [sp], #4
    1eee:	b003      	add	sp, #12
    1ef0:	4770      	bx	lr
    1ef2:	bf00      	nop
    1ef4:	00008cb7 	.word	0x00008cb7

00001ef8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1efc:	b087      	sub	sp, #28
    1efe:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f00:	f001 0301 	and.w	r3, r1, #1
{
    1f04:	9205      	str	r2, [sp, #20]
    1f06:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1f0a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f0e:	9304      	str	r3, [sp, #16]
{
    1f10:	4607      	mov	r7, r0
    1f12:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1f14:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1f18:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1f1c:	f006 fec9 	bl	8cb2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1f20:	4602      	mov	r2, r0
    1f22:	2800      	cmp	r0, #0
    1f24:	d044      	beq.n	1fb0 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1f26:	493a      	ldr	r1, [pc, #232]	; (2010 <prefix_print+0x118>)
    1f28:	4638      	mov	r0, r7
    1f2a:	f7ff ffd3 	bl	1ed4 <print_formatted>
    1f2e:	4605      	mov	r5, r0
	}

	if (stamp) {
    1f30:	f1bb 0f00 	cmp.w	fp, #0
    1f34:	d008      	beq.n	1f48 <prefix_print+0x50>
	if (!format) {
    1f36:	f018 0f44 	tst.w	r8, #68	; 0x44
    1f3a:	d13b      	bne.n	1fb4 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1f3c:	4935      	ldr	r1, [pc, #212]	; (2014 <prefix_print+0x11c>)
    1f3e:	4622      	mov	r2, r4
    1f40:	4638      	mov	r0, r7
    1f42:	f7ff ffc7 	bl	1ed4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1f46:	4405      	add	r5, r0
	if (color) {
    1f48:	9b04      	ldr	r3, [sp, #16]
    1f4a:	b153      	cbz	r3, 1f62 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1f4c:	4b32      	ldr	r3, [pc, #200]	; (2018 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1f4e:	4933      	ldr	r1, [pc, #204]	; (201c <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1f50:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1f54:	4b32      	ldr	r3, [pc, #200]	; (2020 <prefix_print+0x128>)
    1f56:	4638      	mov	r0, r7
    1f58:	2a00      	cmp	r2, #0
    1f5a:	bf08      	it	eq
    1f5c:	461a      	moveq	r2, r3
    1f5e:	f7ff ffb9 	bl	1ed4 <print_formatted>
	if (level_on) {
    1f62:	b13e      	cbz	r6, 1f74 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1f64:	4b2f      	ldr	r3, [pc, #188]	; (2024 <prefix_print+0x12c>)
    1f66:	4930      	ldr	r1, [pc, #192]	; (2028 <prefix_print+0x130>)
    1f68:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1f6c:	4638      	mov	r0, r7
    1f6e:	f7ff ffb1 	bl	1ed4 <print_formatted>
    1f72:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1f74:	f1ba 0f00 	cmp.w	sl, #0
    1f78:	db16      	blt.n	1fa8 <prefix_print+0xb0>
		total += print_formatted(output,
    1f7a:	9b05      	ldr	r3, [sp, #20]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d045      	beq.n	200c <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1f80:	2301      	movs	r3, #1
    1f82:	fa03 f309 	lsl.w	r3, r3, r9
		total += print_formatted(output,
    1f86:	f013 0f10 	tst.w	r3, #16
    1f8a:	4b28      	ldr	r3, [pc, #160]	; (202c <prefix_print+0x134>)
    1f8c:	4c28      	ldr	r4, [pc, #160]	; (2030 <prefix_print+0x138>)
    1f8e:	bf18      	it	ne
    1f90:	461c      	movne	r4, r3
    1f92:	4651      	mov	r1, sl
    1f94:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1f98:	f7ff ff64 	bl	1e64 <log_source_name_get>
    1f9c:	4621      	mov	r1, r4
    1f9e:	4602      	mov	r2, r0
    1fa0:	4638      	mov	r0, r7
    1fa2:	f7ff ff97 	bl	1ed4 <print_formatted>
    1fa6:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1fa8:	1970      	adds	r0, r6, r5
    1faa:	b007      	add	sp, #28
    1fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1fb0:	4605      	mov	r5, r0
    1fb2:	e7bd      	b.n	1f30 <prefix_print+0x38>
	} else if (freq != 0U) {
    1fb4:	4b1f      	ldr	r3, [pc, #124]	; (2034 <prefix_print+0x13c>)
    1fb6:	6818      	ldr	r0, [r3, #0]
    1fb8:	2800      	cmp	r0, #0
    1fba:	d0c4      	beq.n	1f46 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1fbc:	4b1e      	ldr	r3, [pc, #120]	; (2038 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1fbe:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1fc8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1fcc:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1fd0:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1fd4:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1fd8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1fdc:	fbb3 f2f1 	udiv	r2, r3, r1
    1fe0:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1fe4:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1fe8:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1fec:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1ff0:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ff4:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1ff8:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ffa:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    1ffe:	490f      	ldr	r1, [pc, #60]	; (203c <prefix_print+0x144>)
    2000:	e9cd e401 	strd	lr, r4, [sp, #4]
    2004:	4638      	mov	r0, r7
    2006:	f7ff ff65 	bl	1ed4 <print_formatted>
    200a:	e79c      	b.n	1f46 <prefix_print+0x4e>
		total += print_formatted(output,
    200c:	4c08      	ldr	r4, [pc, #32]	; (2030 <prefix_print+0x138>)
    200e:	e7c0      	b.n	1f92 <prefix_print+0x9a>
    2010:	0000a30c 	.word	0x0000a30c
    2014:	0000a310 	.word	0x0000a310
    2018:	000098d4 	.word	0x000098d4
    201c:	0000a335 	.word	0x0000a335
    2020:	0000a2fe 	.word	0x0000a2fe
    2024:	000098e8 	.word	0x000098e8
    2028:	0000a338 	.word	0x0000a338
    202c:	0000a303 	.word	0x0000a303
    2030:	0000a307 	.word	0x0000a307
    2034:	20000544 	.word	0x20000544
    2038:	20000548 	.word	0x20000548
    203c:	0000a319 	.word	0x0000a319

00002040 <hexdump_line_print>:
{
    2040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2044:	461d      	mov	r5, r3
    2046:	9b08      	ldr	r3, [sp, #32]
    2048:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    204a:	06da      	lsls	r2, r3, #27
{
    204c:	4604      	mov	r4, r0
    204e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2050:	d405      	bmi.n	205e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2052:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2054:	bf4c      	ite	mi
    2056:	492a      	ldrmi	r1, [pc, #168]	; (2100 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2058:	492a      	ldrpl	r1, [pc, #168]	; (2104 <hexdump_line_print+0xc4>)
    205a:	f7ff ff3b 	bl	1ed4 <print_formatted>
		print_formatted(output, " ");
    205e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2108 <hexdump_line_print+0xc8>
{
    2062:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2066:	45a8      	cmp	r8, r5
    2068:	db2a      	blt.n	20c0 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    206a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 210c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    206e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2110 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2072:	f8df a094 	ldr.w	sl, [pc, #148]	; 2108 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2076:	2500      	movs	r5, #0
		if (i < length) {
    2078:	42bd      	cmp	r5, r7
    207a:	d22f      	bcs.n	20dc <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    207c:	5d72      	ldrb	r2, [r6, r5]
    207e:	4649      	mov	r1, r9
    2080:	4620      	mov	r0, r4
    2082:	f7ff ff27 	bl	1ed4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2086:	3501      	adds	r5, #1
    2088:	2d10      	cmp	r5, #16
    208a:	d120      	bne.n	20ce <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    208c:	4921      	ldr	r1, [pc, #132]	; (2114 <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    208e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2108 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    2092:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2118 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    2096:	4620      	mov	r0, r4
    2098:	f7ff ff1c 	bl	1ed4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    209c:	2500      	movs	r5, #0
		if (i < length) {
    209e:	42af      	cmp	r7, r5
    20a0:	d928      	bls.n	20f4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    20a2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    20a4:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    20a8:	2b5f      	cmp	r3, #95	; 0x5f
    20aa:	bf28      	it	cs
    20ac:	222e      	movcs	r2, #46	; 0x2e
    20ae:	4649      	mov	r1, r9
    20b0:	4620      	mov	r0, r4
    20b2:	f7ff ff0f 	bl	1ed4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    20b6:	3501      	adds	r5, #1
    20b8:	2d10      	cmp	r5, #16
    20ba:	d114      	bne.n	20e6 <hexdump_line_print+0xa6>
}
    20bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    20c0:	4649      	mov	r1, r9
    20c2:	4620      	mov	r0, r4
    20c4:	f7ff ff06 	bl	1ed4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    20c8:	f108 0801 	add.w	r8, r8, #1
    20cc:	e7cb      	b.n	2066 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    20ce:	076a      	lsls	r2, r5, #29
    20d0:	d1d2      	bne.n	2078 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    20d2:	4651      	mov	r1, sl
    20d4:	4620      	mov	r0, r4
    20d6:	f7ff fefd 	bl	1ed4 <print_formatted>
    20da:	e7cd      	b.n	2078 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    20dc:	4641      	mov	r1, r8
    20de:	4620      	mov	r0, r4
    20e0:	f7ff fef8 	bl	1ed4 <print_formatted>
    20e4:	e7cf      	b.n	2086 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    20e6:	076b      	lsls	r3, r5, #29
    20e8:	d1d9      	bne.n	209e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    20ea:	4641      	mov	r1, r8
    20ec:	4620      	mov	r0, r4
    20ee:	f7ff fef1 	bl	1ed4 <print_formatted>
    20f2:	e7d4      	b.n	209e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    20f4:	4641      	mov	r1, r8
    20f6:	4620      	mov	r0, r4
    20f8:	f7ff feec 	bl	1ed4 <print_formatted>
    20fc:	e7db      	b.n	20b6 <hexdump_line_print+0x76>
    20fe:	bf00      	nop
    2100:	0000b421 	.word	0x0000b421
    2104:	0000a33e 	.word	0x0000a33e
    2108:	0000a349 	.word	0x0000a349
    210c:	0000a347 	.word	0x0000a347
    2110:	0000a341 	.word	0x0000a341
    2114:	0000a34b 	.word	0x0000a34b
    2118:	0000a34d 	.word	0x0000a34d

0000211c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    211c:	b538      	push	{r3, r4, r5, lr}
    211e:	460c      	mov	r4, r1
	if (color) {
    2120:	07e1      	lsls	r1, r4, #31
{
    2122:	4605      	mov	r5, r0
	if (color) {
    2124:	d503      	bpl.n	212e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2126:	4a08      	ldr	r2, [pc, #32]	; (2148 <postfix_print+0x2c>)
    2128:	4908      	ldr	r1, [pc, #32]	; (214c <postfix_print+0x30>)
    212a:	f7ff fed3 	bl	1ed4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    212e:	06e2      	lsls	r2, r4, #27
    2130:	d408      	bmi.n	2144 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2132:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2134:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2136:	bf4c      	ite	mi
    2138:	4905      	ldrmi	r1, [pc, #20]	; (2150 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    213a:	4906      	ldrpl	r1, [pc, #24]	; (2154 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    213c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2140:	f7ff bec8 	b.w	1ed4 <print_formatted>
}
    2144:	bd38      	pop	{r3, r4, r5, pc}
    2146:	bf00      	nop
    2148:	0000a2fe 	.word	0x0000a2fe
    214c:	0000a335 	.word	0x0000a335
    2150:	0000b421 	.word	0x0000b421
    2154:	0000a33e 	.word	0x0000a33e

00002158 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    215c:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    215e:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    2162:	4606      	mov	r6, r0
    2164:	460c      	mov	r4, r1
    2166:	4690      	mov	r8, r2
    2168:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    216c:	d05b      	beq.n	2226 <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    216e:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    2170:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    2172:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2176:	2b00      	cmp	r3, #0
    2178:	d052      	beq.n	2220 <log_output_msg2_process+0xc8>
    217a:	492c      	ldr	r1, [pc, #176]	; (222c <log_output_msg2_process+0xd4>)
    217c:	1a5b      	subs	r3, r3, r1
    217e:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2182:	e9cd 2301 	strd	r2, r3, [sp, #4]
    2186:	f8cd 9000 	str.w	r9, [sp]
    218a:	68a3      	ldr	r3, [r4, #8]
    218c:	2200      	movs	r2, #0
    218e:	4641      	mov	r1, r8
    2190:	4630      	mov	r0, r6
    2192:	f7ff feb1 	bl	1ef8 <prefix_print>
    2196:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    2198:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    219a:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    219e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    21a2:	b1c3      	cbz	r3, 21d6 <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    21a4:	4f22      	ldr	r7, [pc, #136]	; (2230 <log_output_msg2_process+0xd8>)
    21a6:	4823      	ldr	r0, [pc, #140]	; (2234 <log_output_msg2_process+0xdc>)
    21a8:	4923      	ldr	r1, [pc, #140]	; (2238 <log_output_msg2_process+0xe0>)
    21aa:	f1b9 0f00 	cmp.w	r9, #0
    21ae:	bf08      	it	eq
    21b0:	4638      	moveq	r0, r7
    21b2:	462b      	mov	r3, r5
    21b4:	4632      	mov	r2, r6
    21b6:	f006 fc18 	bl	89ea <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    21ba:	2800      	cmp	r0, #0
    21bc:	da0b      	bge.n	21d6 <log_output_msg2_process+0x7e>
    21be:	491f      	ldr	r1, [pc, #124]	; (223c <log_output_msg2_process+0xe4>)
    21c0:	481f      	ldr	r0, [pc, #124]	; (2240 <log_output_msg2_process+0xe8>)
    21c2:	4a20      	ldr	r2, [pc, #128]	; (2244 <log_output_msg2_process+0xec>)
    21c4:	f240 23b7 	movw	r3, #695	; 0x2b7
    21c8:	f006 fd4b 	bl	8c62 <assert_print>
    21cc:	481d      	ldr	r0, [pc, #116]	; (2244 <log_output_msg2_process+0xec>)
    21ce:	f240 21b7 	movw	r1, #695	; 0x2b7
    21d2:	f006 fd3f 	bl	8c54 <assert_post_action>
	*len = msg->hdr.desc.data_len;
    21d6:	8867      	ldrh	r7, [r4, #2]
    21d8:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    21dc:	b197      	cbz	r7, 2204 <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    21de:	6823      	ldr	r3, [r4, #0]
    21e0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    21e4:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    21e6:	2f10      	cmp	r7, #16
    21e8:	463c      	mov	r4, r7
    21ea:	bf28      	it	cs
    21ec:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    21ee:	4629      	mov	r1, r5
    21f0:	f8cd 8000 	str.w	r8, [sp]
    21f4:	4653      	mov	r3, sl
    21f6:	4622      	mov	r2, r4
    21f8:	4630      	mov	r0, r6
    21fa:	f7ff ff21 	bl	2040 <hexdump_line_print>
	} while (len);
    21fe:	1b3f      	subs	r7, r7, r4
		data += length;
    2200:	4425      	add	r5, r4
	} while (len);
    2202:	d1f0      	bne.n	21e6 <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2204:	f1b9 0f00 	cmp.w	r9, #0
    2208:	d004      	beq.n	2214 <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    220a:	464a      	mov	r2, r9
    220c:	4641      	mov	r1, r8
    220e:	4630      	mov	r0, r6
    2210:	f7ff ff84 	bl	211c <postfix_print>
	}

	log_output_flush(output);
    2214:	4630      	mov	r0, r6
}
    2216:	b004      	add	sp, #16
    2218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    221c:	f006 bd73 	b.w	8d06 <log_output_flush>
		int16_t source_id = source ?
    2220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2224:	e7ad      	b.n	2182 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    2226:	46ca      	mov	sl, r9
    2228:	e7b6      	b.n	2198 <log_output_msg2_process+0x40>
    222a:	bf00      	nop
    222c:	000097fc 	.word	0x000097fc
    2230:	00008cd3 	.word	0x00008cd3
    2234:	00008cb7 	.word	0x00008cb7
    2238:	00001549 	.word	0x00001549
    223c:	0000a38c 	.word	0x0000a38c
    2240:	00009bdf 	.word	0x00009bdf
    2244:	0000a350 	.word	0x0000a350

00002248 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2248:	4a08      	ldr	r2, [pc, #32]	; (226c <log_output_timestamp_freq_set+0x24>)
{
    224a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    224c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    224e:	4c08      	ldr	r4, [pc, #32]	; (2270 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2250:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2252:	2100      	movs	r1, #0
    2254:	42a0      	cmp	r0, r4
    2256:	d804      	bhi.n	2262 <log_output_timestamp_freq_set+0x1a>
    2258:	b101      	cbz	r1, 225c <log_output_timestamp_freq_set+0x14>
    225a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    225c:	4b05      	ldr	r3, [pc, #20]	; (2274 <log_output_timestamp_freq_set+0x2c>)
    225e:	6018      	str	r0, [r3, #0]
}
    2260:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2262:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2264:	005b      	lsls	r3, r3, #1
    2266:	2101      	movs	r1, #1
    2268:	e7f4      	b.n	2254 <log_output_timestamp_freq_set+0xc>
    226a:	bf00      	nop
    226c:	20000548 	.word	0x20000548
    2270:	000f4240 	.word	0x000f4240
    2274:	20000544 	.word	0x20000544

00002278 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    227c:	b085      	sub	sp, #20
    227e:	af02      	add	r7, sp, #8
    2280:	e9d7 a60d 	ldrd	sl, r6, [r7, #52]	; 0x34
    2284:	4604      	mov	r4, r0
    2286:	4688      	mov	r8, r1
    2288:	4693      	mov	fp, r2
    228a:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    228c:	2e00      	cmp	r6, #0
    228e:	d04d      	beq.n	232c <z_impl_z_log_msg2_runtime_vcreate+0xb4>
		va_list ap2;

		va_copy(ap2, ap);
    2290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2292:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2294:	9300      	str	r3, [sp, #0]
    2296:	4652      	mov	r2, sl
    2298:	4633      	mov	r3, r6
    229a:	2110      	movs	r1, #16
    229c:	2000      	movs	r0, #0
    229e:	f7fe fba7 	bl	9f0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    22a2:	1e05      	subs	r5, r0, #0
    22a4:	da09      	bge.n	22ba <z_impl_z_log_msg2_runtime_vcreate+0x42>
    22a6:	4922      	ldr	r1, [pc, #136]	; (2330 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    22a8:	4822      	ldr	r0, [pc, #136]	; (2334 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    22aa:	4a23      	ldr	r2, [pc, #140]	; (2338 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    22ac:	2367      	movs	r3, #103	; 0x67
    22ae:	f006 fcd8 	bl	8c62 <assert_print>
    22b2:	4821      	ldr	r0, [pc, #132]	; (2338 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    22b4:	2167      	movs	r1, #103	; 0x67
    22b6:	f006 fccd 	bl	8c54 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    22ba:	4b20      	ldr	r3, [pc, #128]	; (233c <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    22bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    22be:	f004 0407 	and.w	r4, r4, #7
    22c2:	f00b 0b07 	and.w	fp, fp, #7
    22c6:	00e4      	lsls	r4, r4, #3
    22c8:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    22cc:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    22d0:	431c      	orrs	r4, r3
    22d2:	4b1b      	ldr	r3, [pc, #108]	; (2340 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    22d4:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    22d8:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    22da:	4613      	mov	r3, r2
    22dc:	3317      	adds	r3, #23
    22de:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    22e0:	f023 0307 	bic.w	r3, r3, #7
    22e4:	ebad 0d03 	sub.w	sp, sp, r3
    22e8:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    22ec:	b1a6      	cbz	r6, 2318 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    22ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    22f0:	9300      	str	r3, [sp, #0]
    22f2:	4652      	mov	r2, sl
    22f4:	4633      	mov	r3, r6
    22f6:	4629      	mov	r1, r5
    22f8:	f10b 0010 	add.w	r0, fp, #16
    22fc:	f7fe fb78 	bl	9f0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2300:	2800      	cmp	r0, #0
    2302:	da09      	bge.n	2318 <z_impl_z_log_msg2_runtime_vcreate+0xa0>
    2304:	490a      	ldr	r1, [pc, #40]	; (2330 <z_impl_z_log_msg2_runtime_vcreate+0xb8>)
    2306:	480b      	ldr	r0, [pc, #44]	; (2334 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    2308:	4a0b      	ldr	r2, [pc, #44]	; (2338 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    230a:	2381      	movs	r3, #129	; 0x81
    230c:	f006 fca9 	bl	8c62 <assert_print>
    2310:	4809      	ldr	r0, [pc, #36]	; (2338 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    2312:	2181      	movs	r1, #129	; 0x81
    2314:	f006 fc9e 	bl	8c54 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2318:	464b      	mov	r3, r9
    231a:	4622      	mov	r2, r4
    231c:	4641      	mov	r1, r8
    231e:	4658      	mov	r0, fp
    2320:	f006 fcfe 	bl	8d20 <z_log_msg2_finalize>
	}
}
    2324:	370c      	adds	r7, #12
    2326:	46bd      	mov	sp, r7
    2328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    232c:	4635      	mov	r5, r6
    232e:	e7c4      	b.n	22ba <z_impl_z_log_msg2_runtime_vcreate+0x42>
    2330:	0000a3e2 	.word	0x0000a3e2
    2334:	00009bdf 	.word	0x00009bdf
    2338:	0000a3b5 	.word	0x0000a3b5
    233c:	0007fe00 	.word	0x0007fe00
    2340:	7ff80000 	.word	0x7ff80000

00002344 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    2346:	4f07      	ldr	r7, [pc, #28]	; (2364 <char_out+0x20>)
{
    2348:	460d      	mov	r5, r1
    234a:	4604      	mov	r4, r0
    234c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    234e:	42b4      	cmp	r4, r6
    2350:	d101      	bne.n	2356 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2352:	4628      	mov	r0, r5
    2354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2356:	6838      	ldr	r0, [r7, #0]
    2358:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    235c:	6883      	ldr	r3, [r0, #8]
    235e:	685b      	ldr	r3, [r3, #4]
    2360:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2362:	e7f4      	b.n	234e <char_out+0xa>
    2364:	20000564 	.word	0x20000564

00002368 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2368:	4b01      	ldr	r3, [pc, #4]	; (2370 <format_set+0x8>)
	return 0;
}
    236a:	2000      	movs	r0, #0
	log_format_current = log_type;
    236c:	6019      	str	r1, [r3, #0]
}
    236e:	4770      	bx	lr
    2370:	20000554 	.word	0x20000554

00002374 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2374:	4b02      	ldr	r3, [pc, #8]	; (2380 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2376:	4803      	ldr	r0, [pc, #12]	; (2384 <panic+0x10>)
    2378:	2201      	movs	r2, #1
    237a:	701a      	strb	r2, [r3, #0]
    237c:	f006 bcc3 	b.w	8d06 <log_output_flush>
    2380:	20000e6c 	.word	0x20000e6c
    2384:	0000991c 	.word	0x0000991c

00002388 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2388:	4b06      	ldr	r3, [pc, #24]	; (23a4 <process+0x1c>)
{
    238a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    238c:	6818      	ldr	r0, [r3, #0]
{
    238e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2390:	f7ff fcbc 	bl	1d0c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2394:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2396:	4603      	mov	r3, r0
}
    2398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    239c:	4802      	ldr	r0, [pc, #8]	; (23a8 <process+0x20>)
    239e:	220f      	movs	r2, #15
    23a0:	4718      	bx	r3
    23a2:	bf00      	nop
    23a4:	20000554 	.word	0x20000554
    23a8:	0000991c 	.word	0x0000991c

000023ac <log_backend_uart_init>:
{
    23ac:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    23ae:	4b09      	ldr	r3, [pc, #36]	; (23d4 <log_backend_uart_init+0x28>)
    23b0:	4809      	ldr	r0, [pc, #36]	; (23d8 <log_backend_uart_init+0x2c>)
    23b2:	6018      	str	r0, [r3, #0]
    23b4:	f007 f82b 	bl	940e <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    23b8:	b958      	cbnz	r0, 23d2 <log_backend_uart_init+0x26>
    23ba:	4908      	ldr	r1, [pc, #32]	; (23dc <log_backend_uart_init+0x30>)
    23bc:	4808      	ldr	r0, [pc, #32]	; (23e0 <log_backend_uart_init+0x34>)
    23be:	4a09      	ldr	r2, [pc, #36]	; (23e4 <log_backend_uart_init+0x38>)
    23c0:	2379      	movs	r3, #121	; 0x79
    23c2:	f006 fc4e 	bl	8c62 <assert_print>
}
    23c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    23ca:	4806      	ldr	r0, [pc, #24]	; (23e4 <log_backend_uart_init+0x38>)
    23cc:	2179      	movs	r1, #121	; 0x79
    23ce:	f006 bc41 	b.w	8c54 <assert_post_action>
}
    23d2:	bd08      	pop	{r3, pc}
    23d4:	20000564 	.word	0x20000564
    23d8:	0000964c 	.word	0x0000964c
    23dc:	0000a421 	.word	0x0000a421
    23e0:	00009bdf 	.word	0x00009bdf
    23e4:	0000a3ec 	.word	0x0000a3ec

000023e8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    23e8:	4b01      	ldr	r3, [pc, #4]	; (23f0 <log_backend_rtt_init+0x8>)
    23ea:	2201      	movs	r2, #1
    23ec:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    23ee:	4770      	bx	lr
    23f0:	20000e6f 	.word	0x20000e6f

000023f4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    23f4:	4b01      	ldr	r3, [pc, #4]	; (23fc <format_set+0x8>)
	return 0;
}
    23f6:	2000      	movs	r0, #0
	log_format_current = log_type;
    23f8:	6019      	str	r1, [r3, #0]
}
    23fa:	4770      	bx	lr
    23fc:	20000570 	.word	0x20000570

00002400 <panic>:
	panic_mode = true;
    2400:	4b02      	ldr	r3, [pc, #8]	; (240c <panic+0xc>)
    2402:	4803      	ldr	r0, [pc, #12]	; (2410 <panic+0x10>)
    2404:	2201      	movs	r2, #1
    2406:	701a      	strb	r2, [r3, #0]
    2408:	f006 bc7d 	b.w	8d06 <log_output_flush>
    240c:	20000e70 	.word	0x20000e70
    2410:	0000994c 	.word	0x0000994c

00002414 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2414:	4b06      	ldr	r3, [pc, #24]	; (2430 <process+0x1c>)
{
    2416:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2418:	6818      	ldr	r0, [r3, #0]
{
    241a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    241c:	f7ff fc76 	bl	1d0c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2420:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2422:	4603      	mov	r3, r0
}
    2424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2428:	4802      	ldr	r0, [pc, #8]	; (2434 <process+0x20>)
    242a:	220f      	movs	r2, #15
    242c:	4718      	bx	r3
    242e:	bf00      	nop
    2430:	20000570 	.word	0x20000570
    2434:	0000994c 	.word	0x0000994c

00002438 <data_out_block_mode>:
{
    2438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    243a:	4d19      	ldr	r5, [pc, #100]	; (24a0 <data_out_block_mode+0x68>)
    243c:	4607      	mov	r7, r0
    243e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2440:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2442:	4632      	mov	r2, r6
    2444:	4639      	mov	r1, r7
    2446:	2000      	movs	r0, #0
    2448:	f003 fae6 	bl	5a18 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    244c:	b1c8      	cbz	r0, 2482 <data_out_block_mode+0x4a>
	host_present = true;
    244e:	2301      	movs	r3, #1
    2450:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2452:	4b14      	ldr	r3, [pc, #80]	; (24a4 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2454:	781b      	ldrb	r3, [r3, #0]
    2456:	b92b      	cbnz	r3, 2464 <data_out_block_mode+0x2c>
}
    2458:	4630      	mov	r0, r6
    245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    245c:	b95c      	cbnz	r4, 2476 <data_out_block_mode+0x3e>
		host_present = false;
    245e:	702c      	strb	r4, [r5, #0]
    2460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2464:	2000      	movs	r0, #0
    2466:	f003 fb25 	bl	5ab4 <SEGGER_RTT_HasDataUp>
    246a:	2800      	cmp	r0, #0
    246c:	d0f4      	beq.n	2458 <data_out_block_mode+0x20>
    246e:	782b      	ldrb	r3, [r5, #0]
    2470:	2b00      	cmp	r3, #0
    2472:	d1f3      	bne.n	245c <data_out_block_mode+0x24>
    2474:	e7f0      	b.n	2458 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2476:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2478:	f241 3088 	movw	r0, #5000	; 0x1388
    247c:	f007 f84b 	bl	9516 <z_impl_k_busy_wait>
}
    2480:	e7f0      	b.n	2464 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2482:	782b      	ldrb	r3, [r5, #0]
    2484:	b113      	cbz	r3, 248c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2486:	3c01      	subs	r4, #1
    2488:	d104      	bne.n	2494 <data_out_block_mode+0x5c>
		host_present = false;
    248a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    248c:	782b      	ldrb	r3, [r5, #0]
    248e:	2b00      	cmp	r3, #0
    2490:	d1d7      	bne.n	2442 <data_out_block_mode+0xa>
    2492:	e7e1      	b.n	2458 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2494:	f241 3088 	movw	r0, #5000	; 0x1388
    2498:	f007 f83d 	bl	9516 <z_impl_k_busy_wait>
}
    249c:	e7f6      	b.n	248c <data_out_block_mode+0x54>
    249e:	bf00      	nop
    24a0:	20000e6f 	.word	0x20000e6f
    24a4:	20000e70 	.word	0x20000e70

000024a8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    24a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    24ac:	4605      	mov	r5, r0
    24ae:	f04f 0340 	mov.w	r3, #64	; 0x40
    24b2:	f3ef 8611 	mrs	r6, BASEPRI
    24b6:	f383 8812 	msr	BASEPRI_MAX, r3
    24ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    24be:	4822      	ldr	r0, [pc, #136]	; (2548 <pm_state_notify+0xa0>)
    24c0:	f003 feda 	bl	6278 <z_spin_lock_valid>
    24c4:	b968      	cbnz	r0, 24e2 <pm_state_notify+0x3a>
    24c6:	4a21      	ldr	r2, [pc, #132]	; (254c <pm_state_notify+0xa4>)
    24c8:	4921      	ldr	r1, [pc, #132]	; (2550 <pm_state_notify+0xa8>)
    24ca:	4822      	ldr	r0, [pc, #136]	; (2554 <pm_state_notify+0xac>)
    24cc:	238e      	movs	r3, #142	; 0x8e
    24ce:	f006 fbc8 	bl	8c62 <assert_print>
    24d2:	491d      	ldr	r1, [pc, #116]	; (2548 <pm_state_notify+0xa0>)
    24d4:	4820      	ldr	r0, [pc, #128]	; (2558 <pm_state_notify+0xb0>)
    24d6:	f006 fbc4 	bl	8c62 <assert_print>
    24da:	481c      	ldr	r0, [pc, #112]	; (254c <pm_state_notify+0xa4>)
    24dc:	218e      	movs	r1, #142	; 0x8e
    24de:	f006 fbb9 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    24e2:	4819      	ldr	r0, [pc, #100]	; (2548 <pm_state_notify+0xa0>)
    24e4:	f003 fee6 	bl	62b4 <z_spin_lock_set_owner>
	return list->head;
    24e8:	4b1c      	ldr	r3, [pc, #112]	; (255c <pm_state_notify+0xb4>)
    24ea:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24ec:	b19c      	cbz	r4, 2516 <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    24ee:	4f1c      	ldr	r7, [pc, #112]	; (2560 <pm_state_notify+0xb8>)
    24f0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2564 <pm_state_notify+0xbc>
    24f4:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    24f8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    24fc:	2d00      	cmp	r5, #0
    24fe:	bf08      	it	eq
    2500:	4613      	moveq	r3, r2
		if (callback) {
    2502:	b12b      	cbz	r3, 2510 <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2504:	f898 2014 	ldrb.w	r2, [r8, #20]
    2508:	fb09 f202 	mul.w	r2, r9, r2
    250c:	5cb8      	ldrb	r0, [r7, r2]
    250e:	4798      	blx	r3
	return node->next;
    2510:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2512:	2c00      	cmp	r4, #0
    2514:	d1f0      	bne.n	24f8 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2516:	480c      	ldr	r0, [pc, #48]	; (2548 <pm_state_notify+0xa0>)
    2518:	f003 febc 	bl	6294 <z_spin_unlock_valid>
    251c:	b968      	cbnz	r0, 253a <pm_state_notify+0x92>
    251e:	4a0b      	ldr	r2, [pc, #44]	; (254c <pm_state_notify+0xa4>)
    2520:	4911      	ldr	r1, [pc, #68]	; (2568 <pm_state_notify+0xc0>)
    2522:	480c      	ldr	r0, [pc, #48]	; (2554 <pm_state_notify+0xac>)
    2524:	23b9      	movs	r3, #185	; 0xb9
    2526:	f006 fb9c 	bl	8c62 <assert_print>
    252a:	4907      	ldr	r1, [pc, #28]	; (2548 <pm_state_notify+0xa0>)
    252c:	480f      	ldr	r0, [pc, #60]	; (256c <pm_state_notify+0xc4>)
    252e:	f006 fb98 	bl	8c62 <assert_print>
    2532:	4806      	ldr	r0, [pc, #24]	; (254c <pm_state_notify+0xa4>)
    2534:	21b9      	movs	r1, #185	; 0xb9
    2536:	f006 fb8d 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    253a:	f386 8811 	msr	BASEPRI, r6
    253e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2546:	bf00      	nop
    2548:	20000580 	.word	0x20000580
    254c:	00009f7a 	.word	0x00009f7a
    2550:	00009fd3 	.word	0x00009fd3
    2554:	00009bdf 	.word	0x00009bdf
    2558:	00009fe8 	.word	0x00009fe8
    255c:	20000584 	.word	0x20000584
    2560:	2000058c 	.word	0x2000058c
    2564:	20000c30 	.word	0x20000c30
    2568:	00009fa7 	.word	0x00009fa7
    256c:	00009fbe 	.word	0x00009fbe

00002570 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2570:	0941      	lsrs	r1, r0, #5
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2572:	4a0a      	ldr	r2, [pc, #40]	; (259c <atomic_clear_bit.constprop.0+0x2c>)
    2574:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2578:	f000 001f 	and.w	r0, r0, #31
    257c:	2301      	movs	r3, #1
    257e:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2580:	43db      	mvns	r3, r3
    2582:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2586:	e852 0f00 	ldrex	r0, [r2]
    258a:	4018      	ands	r0, r3
    258c:	e842 0100 	strex	r1, r0, [r2]
    2590:	2900      	cmp	r1, #0
    2592:	d1f8      	bne.n	2586 <atomic_clear_bit.constprop.0+0x16>
    2594:	f3bf 8f5b 	dmb	ish
}
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	20000598 	.word	0x20000598

000025a0 <pm_system_resume>:

void pm_system_resume(void)
{
    25a0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    25a2:	4b19      	ldr	r3, [pc, #100]	; (2608 <pm_system_resume+0x68>)
    25a4:	7d1c      	ldrb	r4, [r3, #20]
    25a6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    25aa:	f004 031f 	and.w	r3, r4, #31
    25ae:	2201      	movs	r2, #1
    25b0:	409a      	lsls	r2, r3
    25b2:	4b16      	ldr	r3, [pc, #88]	; (260c <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    25b4:	0961      	lsrs	r1, r4, #5
    25b6:	43d0      	mvns	r0, r2
    25b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    25bc:	e853 1f00 	ldrex	r1, [r3]
    25c0:	ea01 0500 	and.w	r5, r1, r0
    25c4:	e843 5600 	strex	r6, r5, [r3]
    25c8:	2e00      	cmp	r6, #0
    25ca:	d1f7      	bne.n	25bc <pm_system_resume+0x1c>
    25cc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    25d0:	4211      	tst	r1, r2
    25d2:	d013      	beq.n	25fc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    25d4:	4b0e      	ldr	r3, [pc, #56]	; (2610 <pm_system_resume+0x70>)
    25d6:	4d0f      	ldr	r5, [pc, #60]	; (2614 <pm_system_resume+0x74>)
    25d8:	b18b      	cbz	r3, 25fe <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    25da:	230c      	movs	r3, #12
    25dc:	4363      	muls	r3, r4
    25de:	18ea      	adds	r2, r5, r3
    25e0:	5ce8      	ldrb	r0, [r5, r3]
    25e2:	7851      	ldrb	r1, [r2, #1]
    25e4:	f006 fc42 	bl	8e6c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    25e8:	2000      	movs	r0, #0
    25ea:	f7ff ff5d 	bl	24a8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    25ee:	230c      	movs	r3, #12
    25f0:	435c      	muls	r4, r3
    25f2:	192a      	adds	r2, r5, r4
    25f4:	2300      	movs	r3, #0
    25f6:	512b      	str	r3, [r5, r4]
    25f8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    25fc:	bd70      	pop	{r4, r5, r6, pc}
    25fe:	f383 8811 	msr	BASEPRI, r3
    2602:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2606:	e7ef      	b.n	25e8 <pm_system_resume+0x48>
    2608:	20000c30 	.word	0x20000c30
    260c:	2000059c 	.word	0x2000059c
    2610:	00008e6d 	.word	0x00008e6d
    2614:	2000058c 	.word	0x2000058c

00002618 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    261c:	4b31      	ldr	r3, [pc, #196]	; (26e4 <pm_system_suspend+0xcc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    261e:	4a32      	ldr	r2, [pc, #200]	; (26e8 <pm_system_suspend+0xd0>)
    2620:	7d1c      	ldrb	r4, [r3, #20]
    2622:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2626:	0963      	lsrs	r3, r4, #5
    2628:	ea4f 0983 	mov.w	r9, r3, lsl #2
    262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2630:	4e2e      	ldr	r6, [pc, #184]	; (26ec <pm_system_suspend+0xd4>)
    2632:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2636:	f004 081f 	and.w	r8, r4, #31
    263a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    263e:	f013 0f01 	tst.w	r3, #1
{
    2642:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2644:	d10a      	bne.n	265c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2646:	4601      	mov	r1, r0
    2648:	4620      	mov	r0, r4
    264a:	f000 f867 	bl	271c <pm_policy_next_state>
		if (info != NULL) {
    264e:	b128      	cbz	r0, 265c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2650:	c807      	ldmia	r0, {r0, r1, r2}
    2652:	230c      	movs	r3, #12
    2654:	fb03 6304 	mla	r3, r3, r4, r6
    2658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    265c:	230c      	movs	r3, #12
    265e:	4363      	muls	r3, r4
    2660:	18f2      	adds	r2, r6, r3
    2662:	5cf5      	ldrb	r5, [r6, r3]
    2664:	b92d      	cbnz	r5, 2672 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2666:	4620      	mov	r0, r4
    2668:	f7ff ff82 	bl	2570 <atomic_clear_bit.constprop.0>
		ret = false;
    266c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    266e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2672:	1c7b      	adds	r3, r7, #1
    2674:	d00f      	beq.n	2696 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2676:	f8d2 c008 	ldr.w	ip, [r2, #8]
    267a:	481d      	ldr	r0, [pc, #116]	; (26f0 <pm_system_suspend+0xd8>)
    267c:	4a1d      	ldr	r2, [pc, #116]	; (26f4 <pm_system_suspend+0xdc>)
    267e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2682:	2100      	movs	r1, #0
    2684:	2300      	movs	r3, #0
    2686:	fbec 0105 	umlal	r0, r1, ip, r5
    268a:	f7fd ff1b 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    268e:	2101      	movs	r1, #1
    2690:	1a38      	subs	r0, r7, r0
    2692:	f005 fbd7 	bl	7e44 <z_set_timeout_expiry>
	k_sched_lock();
    2696:	f004 f9d3 	bl	6a40 <k_sched_lock>
	pm_state_notify(true);
    269a:	2001      	movs	r0, #1
    269c:	f7ff ff04 	bl	24a8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26a0:	f3bf 8f5b 	dmb	ish
    26a4:	4b14      	ldr	r3, [pc, #80]	; (26f8 <pm_system_suspend+0xe0>)
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26a6:	2201      	movs	r2, #1
    26a8:	fa02 f208 	lsl.w	r2, r2, r8
    26ac:	444b      	add	r3, r9
    26ae:	e853 0f00 	ldrex	r0, [r3]
    26b2:	4310      	orrs	r0, r2
    26b4:	e843 0100 	strex	r1, r0, [r3]
    26b8:	2900      	cmp	r1, #0
    26ba:	d1f8      	bne.n	26ae <pm_system_suspend+0x96>
    26bc:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    26c0:	4b0e      	ldr	r3, [pc, #56]	; (26fc <pm_system_suspend+0xe4>)
    26c2:	b133      	cbz	r3, 26d2 <pm_system_suspend+0xba>
		pm_state_set(info->state, info->substate_id);
    26c4:	230c      	movs	r3, #12
    26c6:	4363      	muls	r3, r4
    26c8:	18f2      	adds	r2, r6, r3
    26ca:	5cf0      	ldrb	r0, [r6, r3]
    26cc:	7851      	ldrb	r1, [r2, #1]
    26ce:	f006 fbc1 	bl	8e54 <pm_state_set>
	pm_system_resume();
    26d2:	f7ff ff65 	bl	25a0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    26d6:	4620      	mov	r0, r4
    26d8:	f7ff ff4a 	bl	2570 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    26dc:	f004 fe94 	bl	7408 <k_sched_unlock>
	bool ret = true;
    26e0:	2001      	movs	r0, #1
    26e2:	e7c4      	b.n	266e <pm_system_suspend+0x56>
    26e4:	20000c30 	.word	0x20000c30
    26e8:	20000598 	.word	0x20000598
    26ec:	2000058c 	.word	0x2000058c
    26f0:	000f423f 	.word	0x000f423f
    26f4:	000f4240 	.word	0x000f4240
    26f8:	2000059c 	.word	0x2000059c
    26fc:	00008e55 	.word	0x00008e55

00002700 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2700:	4b05      	ldr	r3, [pc, #20]	; (2718 <pm_policy_state_lock_is_active+0x18>)
    2702:	f3bf 8f5b 	dmb	ish
    2706:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    270a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    270e:	3800      	subs	r0, #0
    2710:	bf18      	it	ne
    2712:	2001      	movne	r0, #1
    2714:	4770      	bx	lr
    2716:	bf00      	nop
    2718:	200005a0 	.word	0x200005a0

0000271c <pm_policy_next_state>:
{
    271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2720:	b085      	sub	sp, #20
    2722:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2724:	a903      	add	r1, sp, #12
    2726:	f000 f847 	bl	27b8 <pm_state_cpu_get_all>
    272a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 27ac <pm_policy_next_state+0x90>
    272e:	f8df a080 	ldr.w	sl, [pc, #128]	; 27b0 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2732:	1e44      	subs	r4, r0, #1
    2734:	b224      	sxth	r4, r4
    2736:	f04f 0b00 	mov.w	fp, #0
    273a:	1c63      	adds	r3, r4, #1
    273c:	d104      	bne.n	2748 <pm_policy_next_state+0x2c>
	return NULL;
    273e:	2600      	movs	r6, #0
}
    2740:	4630      	mov	r0, r6
    2742:	b005      	add	sp, #20
    2744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2748:	9a03      	ldr	r2, [sp, #12]
    274a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    274e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2752:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2756:	f7ff ffd3 	bl	2700 <pm_policy_state_lock_is_active>
    275a:	4605      	mov	r5, r0
    275c:	bb10      	cbnz	r0, 27a4 <pm_policy_next_state+0x88>
    275e:	6870      	ldr	r0, [r6, #4]
    2760:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2764:	46c4      	mov	ip, r8
    2766:	4629      	mov	r1, r5
    2768:	fbe0 c109 	umlal	ip, r1, r0, r9
    276c:	4652      	mov	r2, sl
    276e:	465b      	mov	r3, fp
    2770:	4660      	mov	r0, ip
    2772:	f7fd fea7 	bl	4c4 <__aeabi_uldivmod>
    2776:	9001      	str	r0, [sp, #4]
    2778:	68b0      	ldr	r0, [r6, #8]
    277a:	46c4      	mov	ip, r8
    277c:	4629      	mov	r1, r5
    277e:	fbe0 c109 	umlal	ip, r1, r0, r9
    2782:	465b      	mov	r3, fp
    2784:	4652      	mov	r2, sl
    2786:	4660      	mov	r0, ip
    2788:	f7fd fe9c 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    278c:	4b09      	ldr	r3, [pc, #36]	; (27b4 <pm_policy_next_state+0x98>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	1c59      	adds	r1, r3, #1
    2792:	d001      	beq.n	2798 <pm_policy_next_state+0x7c>
    2794:	4283      	cmp	r3, r0
    2796:	d905      	bls.n	27a4 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2798:	1c7a      	adds	r2, r7, #1
    279a:	d0d1      	beq.n	2740 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    27a0:	42b8      	cmp	r0, r7
    27a2:	d9cd      	bls.n	2740 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    27a4:	3c01      	subs	r4, #1
    27a6:	b224      	sxth	r4, r4
    27a8:	e7c7      	b.n	273a <pm_policy_next_state+0x1e>
    27aa:	bf00      	nop
    27ac:	000f423f 	.word	0x000f423f
    27b0:	000f4240 	.word	0x000f4240
    27b4:	200000a0 	.word	0x200000a0

000027b8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    27b8:	b908      	cbnz	r0, 27be <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    27ba:	4b02      	ldr	r3, [pc, #8]	; (27c4 <pm_state_cpu_get_all+0xc>)
    27bc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    27be:	2000      	movs	r0, #0
    27c0:	4770      	bx	lr
    27c2:	bf00      	nop
    27c4:	0000995c 	.word	0x0000995c

000027c8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    27c8:	4801      	ldr	r0, [pc, #4]	; (27d0 <nrf_cc3xx_platform_abort_init+0x8>)
    27ca:	f005 bf7f 	b.w	86cc <nrf_cc3xx_platform_set_abort>
    27ce:	bf00      	nop
    27d0:	0000995c 	.word	0x0000995c

000027d4 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    27d4:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    27d6:	4604      	mov	r4, r0
    27d8:	b918      	cbnz	r0, 27e2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    27da:	4b0d      	ldr	r3, [pc, #52]	; (2810 <mutex_free_platform+0x3c>)
    27dc:	480d      	ldr	r0, [pc, #52]	; (2814 <mutex_free_platform+0x40>)
    27de:	685b      	ldr	r3, [r3, #4]
    27e0:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    27e2:	6861      	ldr	r1, [r4, #4]
    27e4:	2908      	cmp	r1, #8
    27e6:	d00d      	beq.n	2804 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    27e8:	f031 0304 	bics.w	r3, r1, #4
    27ec:	d00a      	beq.n	2804 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    27ee:	f011 0102 	ands.w	r1, r1, #2
    27f2:	d008      	beq.n	2806 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    27f4:	4808      	ldr	r0, [pc, #32]	; (2818 <mutex_free_platform+0x44>)
    27f6:	4621      	mov	r1, r4
    27f8:	f003 fb9e 	bl	5f38 <k_mem_slab_free>
        mutex->mutex = NULL;
    27fc:	2300      	movs	r3, #0
    27fe:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2800:	2300      	movs	r3, #0
    2802:	6063      	str	r3, [r4, #4]
}
    2804:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2806:	6820      	ldr	r0, [r4, #0]
    2808:	2214      	movs	r2, #20
    280a:	f006 fb17 	bl	8e3c <memset>
    280e:	e7f7      	b.n	2800 <mutex_free_platform+0x2c>
    2810:	2000017c 	.word	0x2000017c
    2814:	0000a468 	.word	0x0000a468
    2818:	200005bc 	.word	0x200005bc

0000281c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    281c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    281e:	b308      	cbz	r0, 2864 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2820:	6843      	ldr	r3, [r0, #4]
    2822:	2b04      	cmp	r3, #4
    2824:	d110      	bne.n	2848 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2826:	2201      	movs	r2, #1
    2828:	6803      	ldr	r3, [r0, #0]
    282a:	f3bf 8f5b 	dmb	ish
    282e:	e853 1f00 	ldrex	r1, [r3]
    2832:	2900      	cmp	r1, #0
    2834:	d103      	bne.n	283e <mutex_lock_platform+0x22>
    2836:	e843 2000 	strex	r0, r2, [r3]
    283a:	2800      	cmp	r0, #0
    283c:	d1f7      	bne.n	282e <mutex_lock_platform+0x12>
    283e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2842:	d10b      	bne.n	285c <mutex_lock_platform+0x40>
    2844:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2846:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2848:	b153      	cbz	r3, 2860 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    284a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    284c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2854:	f003 fd68 	bl	6328 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2858:	2800      	cmp	r0, #0
    285a:	d0f3      	beq.n	2844 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    285c:	4803      	ldr	r0, [pc, #12]	; (286c <mutex_lock_platform+0x50>)
    285e:	e7f2      	b.n	2846 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2860:	4803      	ldr	r0, [pc, #12]	; (2870 <mutex_lock_platform+0x54>)
    2862:	e7f0      	b.n	2846 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2864:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2868:	e7ed      	b.n	2846 <mutex_lock_platform+0x2a>
    286a:	bf00      	nop
    286c:	ffff8fe9 	.word	0xffff8fe9
    2870:	ffff8fea 	.word	0xffff8fea

00002874 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2874:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2876:	b1d0      	cbz	r0, 28ae <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2878:	6843      	ldr	r3, [r0, #4]
    287a:	2b04      	cmp	r3, #4
    287c:	d111      	bne.n	28a2 <mutex_unlock_platform+0x2e>
    287e:	2200      	movs	r2, #0
    2880:	6803      	ldr	r3, [r0, #0]
    2882:	f3bf 8f5b 	dmb	ish
    2886:	e853 1f00 	ldrex	r1, [r3]
    288a:	2901      	cmp	r1, #1
    288c:	d103      	bne.n	2896 <mutex_unlock_platform+0x22>
    288e:	e843 2000 	strex	r0, r2, [r3]
    2892:	2800      	cmp	r0, #0
    2894:	d1f7      	bne.n	2886 <mutex_unlock_platform+0x12>
    2896:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    289a:	4807      	ldr	r0, [pc, #28]	; (28b8 <mutex_unlock_platform+0x44>)
    289c:	bf08      	it	eq
    289e:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    28a0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    28a2:	b13b      	cbz	r3, 28b4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    28a4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    28a6:	f003 fe39 	bl	651c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    28aa:	2000      	movs	r0, #0
    28ac:	e7f8      	b.n	28a0 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    28ae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    28b2:	e7f5      	b.n	28a0 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    28b4:	4801      	ldr	r0, [pc, #4]	; (28bc <mutex_unlock_platform+0x48>)
    28b6:	e7f3      	b.n	28a0 <mutex_unlock_platform+0x2c>
    28b8:	ffff8fe9 	.word	0xffff8fe9
    28bc:	ffff8fea 	.word	0xffff8fea

000028c0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    28c0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    28c2:	4604      	mov	r4, r0
    28c4:	b918      	cbnz	r0, 28ce <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    28c6:	4b16      	ldr	r3, [pc, #88]	; (2920 <mutex_init_platform+0x60>)
    28c8:	4816      	ldr	r0, [pc, #88]	; (2924 <mutex_init_platform+0x64>)
    28ca:	685b      	ldr	r3, [r3, #4]
    28cc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    28ce:	6863      	ldr	r3, [r4, #4]
    28d0:	2b04      	cmp	r3, #4
    28d2:	d023      	beq.n	291c <mutex_init_platform+0x5c>
    28d4:	2b08      	cmp	r3, #8
    28d6:	d021      	beq.n	291c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    28d8:	b9cb      	cbnz	r3, 290e <mutex_init_platform+0x4e>
    28da:	6823      	ldr	r3, [r4, #0]
    28dc:	b9bb      	cbnz	r3, 290e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    28de:	4812      	ldr	r0, [pc, #72]	; (2928 <mutex_init_platform+0x68>)
    28e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28e8:	4621      	mov	r1, r4
    28ea:	f003 fab9 	bl	5e60 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    28ee:	b908      	cbnz	r0, 28f4 <mutex_init_platform+0x34>
    28f0:	6823      	ldr	r3, [r4, #0]
    28f2:	b91b      	cbnz	r3, 28fc <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    28f4:	4b0a      	ldr	r3, [pc, #40]	; (2920 <mutex_init_platform+0x60>)
    28f6:	480d      	ldr	r0, [pc, #52]	; (292c <mutex_init_platform+0x6c>)
    28f8:	685b      	ldr	r3, [r3, #4]
    28fa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    28fc:	6820      	ldr	r0, [r4, #0]
    28fe:	2214      	movs	r2, #20
    2900:	2100      	movs	r1, #0
    2902:	f006 fa9b 	bl	8e3c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2906:	6863      	ldr	r3, [r4, #4]
    2908:	f043 0302 	orr.w	r3, r3, #2
    290c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    290e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2910:	f006 fdce 	bl	94b0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2914:	6863      	ldr	r3, [r4, #4]
    2916:	f043 0301 	orr.w	r3, r3, #1
    291a:	6063      	str	r3, [r4, #4]
}
    291c:	bd10      	pop	{r4, pc}
    291e:	bf00      	nop
    2920:	2000017c 	.word	0x2000017c
    2924:	0000a468 	.word	0x0000a468
    2928:	200005bc 	.word	0x200005bc
    292c:	0000a48e 	.word	0x0000a48e

00002930 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2930:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2932:	4906      	ldr	r1, [pc, #24]	; (294c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2934:	4806      	ldr	r0, [pc, #24]	; (2950 <nrf_cc3xx_platform_mutex_init+0x20>)
    2936:	2340      	movs	r3, #64	; 0x40
    2938:	2214      	movs	r2, #20
    293a:	f006 fd86 	bl	944a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    293e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2942:	4904      	ldr	r1, [pc, #16]	; (2954 <nrf_cc3xx_platform_mutex_init+0x24>)
    2944:	4804      	ldr	r0, [pc, #16]	; (2958 <nrf_cc3xx_platform_mutex_init+0x28>)
    2946:	f005 bf21 	b.w	878c <nrf_cc3xx_platform_set_mutexes>
    294a:	bf00      	nop
    294c:	200005dc 	.word	0x200005dc
    2950:	200005bc 	.word	0x200005bc
    2954:	00009974 	.word	0x00009974
    2958:	00009964 	.word	0x00009964

0000295c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    295c:	4901      	ldr	r1, [pc, #4]	; (2964 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    295e:	2210      	movs	r2, #16
	str	r2, [r1]
    2960:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2962:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2964:	e000ed10 	.word	0xe000ed10

00002968 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2968:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    296a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    296c:	f380 8811 	msr	BASEPRI, r0
	isb
    2970:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2974:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2978:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    297a:	b662      	cpsie	i
	isb
    297c:	f3bf 8f6f 	isb	sy

	bx	lr
    2980:	4770      	bx	lr
    2982:	bf00      	nop

00002984 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2984:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2986:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2988:	f381 8811 	msr	BASEPRI, r1

	wfe
    298c:	bf20      	wfe

	msr	BASEPRI, r0
    298e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2992:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2994:	4770      	bx	lr
    2996:	bf00      	nop

00002998 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2998:	b570      	push	{r4, r5, r6, lr}
    299a:	4606      	mov	r6, r0
    299c:	b086      	sub	sp, #24

	if (esf != NULL) {
    299e:	460d      	mov	r5, r1
    29a0:	2900      	cmp	r1, #0
    29a2:	d038      	beq.n	2a16 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    29a4:	688b      	ldr	r3, [r1, #8]
    29a6:	9305      	str	r3, [sp, #20]
    29a8:	684b      	ldr	r3, [r1, #4]
    29aa:	9304      	str	r3, [sp, #16]
    29ac:	680b      	ldr	r3, [r1, #0]
    29ae:	9303      	str	r3, [sp, #12]
    29b0:	2400      	movs	r4, #0
    29b2:	4b1c      	ldr	r3, [pc, #112]	; (2a24 <z_arm_fatal_error+0x8c>)
    29b4:	491c      	ldr	r1, [pc, #112]	; (2a28 <z_arm_fatal_error+0x90>)
    29b6:	9302      	str	r3, [sp, #8]
    29b8:	2201      	movs	r2, #1
    29ba:	4623      	mov	r3, r4
    29bc:	4620      	mov	r0, r4
    29be:	e9cd 4400 	strd	r4, r4, [sp]
    29c2:	f006 f9cb 	bl	8d5c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    29c6:	696b      	ldr	r3, [r5, #20]
    29c8:	9305      	str	r3, [sp, #20]
    29ca:	692b      	ldr	r3, [r5, #16]
    29cc:	9304      	str	r3, [sp, #16]
    29ce:	68eb      	ldr	r3, [r5, #12]
    29d0:	9303      	str	r3, [sp, #12]
    29d2:	4b16      	ldr	r3, [pc, #88]	; (2a2c <z_arm_fatal_error+0x94>)
    29d4:	4914      	ldr	r1, [pc, #80]	; (2a28 <z_arm_fatal_error+0x90>)
    29d6:	9400      	str	r4, [sp, #0]
    29d8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    29dc:	2201      	movs	r2, #1
    29de:	4623      	mov	r3, r4
    29e0:	4620      	mov	r0, r4
    29e2:	f006 f9bb 	bl	8d5c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    29e6:	69eb      	ldr	r3, [r5, #28]
    29e8:	9303      	str	r3, [sp, #12]
    29ea:	4b11      	ldr	r3, [pc, #68]	; (2a30 <z_arm_fatal_error+0x98>)
    29ec:	490e      	ldr	r1, [pc, #56]	; (2a28 <z_arm_fatal_error+0x90>)
    29ee:	9400      	str	r4, [sp, #0]
    29f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    29f4:	2201      	movs	r2, #1
    29f6:	4623      	mov	r3, r4
    29f8:	4620      	mov	r0, r4
    29fa:	f006 f9af 	bl	8d5c <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    29fe:	69ab      	ldr	r3, [r5, #24]
    2a00:	9303      	str	r3, [sp, #12]
    2a02:	4b0c      	ldr	r3, [pc, #48]	; (2a34 <z_arm_fatal_error+0x9c>)
    2a04:	4908      	ldr	r1, [pc, #32]	; (2a28 <z_arm_fatal_error+0x90>)
    2a06:	9400      	str	r4, [sp, #0]
    2a08:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2a0c:	2201      	movs	r2, #1
    2a0e:	4623      	mov	r3, r4
    2a10:	4620      	mov	r0, r4
    2a12:	f006 f9a3 	bl	8d5c <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2a16:	4629      	mov	r1, r5
    2a18:	4630      	mov	r0, r6
}
    2a1a:	b006      	add	sp, #24
    2a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2a20:	f003 b89c 	b.w	5b5c <z_fatal_error>
    2a24:	0000a4bb 	.word	0x0000a4bb
    2a28:	0000982c 	.word	0x0000982c
    2a2c:	0000a4ea 	.word	0x0000a4ea
    2a30:	0000a519 	.word	0x0000a519
    2a34:	0000a528 	.word	0x0000a528

00002a38 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2a38:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a3a:	2b00      	cmp	r3, #0
    2a3c:	db07      	blt.n	2a4e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a3e:	4904      	ldr	r1, [pc, #16]	; (2a50 <arch_irq_enable+0x18>)
    2a40:	095b      	lsrs	r3, r3, #5
    2a42:	f000 001f 	and.w	r0, r0, #31
    2a46:	2201      	movs	r2, #1
    2a48:	4082      	lsls	r2, r0
    2a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2a4e:	4770      	bx	lr
    2a50:	e000e100 	.word	0xe000e100

00002a54 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a54:	4b05      	ldr	r3, [pc, #20]	; (2a6c <arch_irq_is_enabled+0x18>)
    2a56:	0942      	lsrs	r2, r0, #5
    2a58:	f000 001f 	and.w	r0, r0, #31
    2a5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a60:	2301      	movs	r3, #1
    2a62:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a66:	4010      	ands	r0, r2
    2a68:	4770      	bx	lr
    2a6a:	bf00      	nop
    2a6c:	e000e100 	.word	0xe000e100

00002a70 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2a70:	07d3      	lsls	r3, r2, #31
{
    2a72:	b570      	push	{r4, r5, r6, lr}
    2a74:	4605      	mov	r5, r0
    2a76:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2a78:	d425      	bmi.n	2ac6 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2a7a:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2a7c:	2c07      	cmp	r4, #7
    2a7e:	d90f      	bls.n	2aa0 <z_arm_irq_priority_set+0x30>
    2a80:	4a12      	ldr	r2, [pc, #72]	; (2acc <z_arm_irq_priority_set+0x5c>)
    2a82:	4913      	ldr	r1, [pc, #76]	; (2ad0 <z_arm_irq_priority_set+0x60>)
    2a84:	4813      	ldr	r0, [pc, #76]	; (2ad4 <z_arm_irq_priority_set+0x64>)
    2a86:	2357      	movs	r3, #87	; 0x57
    2a88:	f006 f8eb 	bl	8c62 <assert_print>
    2a8c:	4812      	ldr	r0, [pc, #72]	; (2ad8 <z_arm_irq_priority_set+0x68>)
    2a8e:	4631      	mov	r1, r6
    2a90:	2306      	movs	r3, #6
    2a92:	462a      	mov	r2, r5
    2a94:	f006 f8e5 	bl	8c62 <assert_print>
    2a98:	480c      	ldr	r0, [pc, #48]	; (2acc <z_arm_irq_priority_set+0x5c>)
    2a9a:	2157      	movs	r1, #87	; 0x57
    2a9c:	f006 f8da 	bl	8c54 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2aa0:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2aa2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aa4:	bfac      	ite	ge
    2aa6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aaa:	4b0c      	ldrlt	r3, [pc, #48]	; (2adc <z_arm_irq_priority_set+0x6c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2aac:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ab0:	bfb8      	it	lt
    2ab2:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ab6:	b2e4      	uxtb	r4, r4
    2ab8:	bfaa      	itet	ge
    2aba:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2abe:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2ac0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    2ac4:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    2ac6:	2400      	movs	r4, #0
    2ac8:	e7ea      	b.n	2aa0 <z_arm_irq_priority_set+0x30>
    2aca:	bf00      	nop
    2acc:	0000a556 	.word	0x0000a556
    2ad0:	0000a58c 	.word	0x0000a58c
    2ad4:	00009bdf 	.word	0x00009bdf
    2ad8:	0000a5a7 	.word	0x0000a5a7
    2adc:	e000ed14 	.word	0xe000ed14

00002ae0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2ae0:	bf30      	wfi
    b z_SysNmiOnReset
    2ae2:	f7ff bffd 	b.w	2ae0 <z_SysNmiOnReset>
    2ae6:	bf00      	nop

00002ae8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2ae8:	4a0b      	ldr	r2, [pc, #44]	; (2b18 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2aea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2aec:	4b0b      	ldr	r3, [pc, #44]	; (2b1c <z_arm_prep_c+0x34>)
    2aee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2af2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2af8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2b00:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2b08:	f003 f8bc 	bl	5c84 <z_bss_zero>
	z_data_copy();
    2b0c:	f004 ffd8 	bl	7ac0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2b10:	f000 fbe6 	bl	32e0 <z_arm_interrupt_init>
	z_cstart();
    2b14:	f003 f8fa 	bl	5d0c <z_cstart>
    2b18:	00000000 	.word	0x00000000
    2b1c:	e000ed00 	.word	0xe000ed00

00002b20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2b20:	4a09      	ldr	r2, [pc, #36]	; (2b48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2b22:	490a      	ldr	r1, [pc, #40]	; (2b4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2b24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2b26:	6809      	ldr	r1, [r1, #0]
    2b28:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b2a:	4909      	ldr	r1, [pc, #36]	; (2b50 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2b2c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b2e:	684b      	ldr	r3, [r1, #4]
    2b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2b34:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2b36:	2300      	movs	r3, #0
    2b38:	f383 8811 	msr	BASEPRI, r3
    2b3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2b40:	6893      	ldr	r3, [r2, #8]
}
    2b42:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2b44:	4770      	bx	lr
    2b46:	bf00      	nop
    2b48:	20000c30 	.word	0x20000c30
    2b4c:	00009ac8 	.word	0x00009ac8
    2b50:	e000ed00 	.word	0xe000ed00

00002b54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b54:	4912      	ldr	r1, [pc, #72]	; (2ba0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b56:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b58:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2b5c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b5e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b62:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b66:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    2b68:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b6c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b70:	4f0c      	ldr	r7, [pc, #48]	; (2ba4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b76:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2b78:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b7a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b7c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2b7e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b80:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b82:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2b86:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2b88:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2b8a:	f000 fc45 	bl	3418 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2b8e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2b96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2b9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2b9e:	4770      	bx	lr
    ldr r1, =_kernel
    2ba0:	20000c30 	.word	0x20000c30
    ldr v4, =_SCS_ICSR
    2ba4:	e000ed04 	.word	0xe000ed04

00002ba8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2ba8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2bac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2bae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2bb2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2bb6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2bb8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2bbc:	2902      	cmp	r1, #2
    beq _oops
    2bbe:	d0ff      	beq.n	2bc0 <_oops>

00002bc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2bc0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2bc2:	f006 f8db 	bl	8d7c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2bc6:	bd01      	pop	{r0, pc}

00002bc8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2bc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2bcc:	9b00      	ldr	r3, [sp, #0]
    2bce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2bd2:	490a      	ldr	r1, [pc, #40]	; (2bfc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2bda:	9b02      	ldr	r3, [sp, #8]
    2bdc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2be0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2be8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2bec:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2bf0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2bf2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2bf4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2bf6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2bf8:	4770      	bx	lr
    2bfa:	bf00      	nop
    2bfc:	00008b31 	.word	0x00008b31

00002c00 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2c00:	4a09      	ldr	r2, [pc, #36]	; (2c28 <z_check_thread_stack_fail+0x28>)
{
    2c02:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2c04:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2c06:	b170      	cbz	r0, 2c26 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2c08:	f113 0f16 	cmn.w	r3, #22
    2c0c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2c0e:	d005      	beq.n	2c1c <z_check_thread_stack_fail+0x1c>
    2c10:	f1a0 0220 	sub.w	r2, r0, #32
    2c14:	429a      	cmp	r2, r3
    2c16:	d805      	bhi.n	2c24 <z_check_thread_stack_fail+0x24>
    2c18:	4283      	cmp	r3, r0
    2c1a:	d203      	bcs.n	2c24 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2c1c:	4281      	cmp	r1, r0
    2c1e:	bf28      	it	cs
    2c20:	2000      	movcs	r0, #0
    2c22:	4770      	bx	lr
    2c24:	2000      	movs	r0, #0
}
    2c26:	4770      	bx	lr
    2c28:	20000c30 	.word	0x20000c30

00002c2c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2c2c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2c2e:	4b09      	ldr	r3, [pc, #36]	; (2c54 <arch_switch_to_main_thread+0x28>)
    2c30:	6098      	str	r0, [r3, #8]
{
    2c32:	460d      	mov	r5, r1
    2c34:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2c36:	f000 fbef 	bl	3418 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2c3a:	4620      	mov	r0, r4
    2c3c:	f385 8809 	msr	PSP, r5
    2c40:	2100      	movs	r1, #0
    2c42:	b663      	cpsie	if
    2c44:	f381 8811 	msr	BASEPRI, r1
    2c48:	f3bf 8f6f 	isb	sy
    2c4c:	2200      	movs	r2, #0
    2c4e:	2300      	movs	r3, #0
    2c50:	f005 ff6e 	bl	8b30 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2c54:	20000c30 	.word	0x20000c30

00002c58 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2c58:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2c5a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2c5c:	4a0b      	ldr	r2, [pc, #44]	; (2c8c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2c5e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2c60:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2c62:	bf1e      	ittt	ne
	movne	r1, #0
    2c64:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2c66:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2c68:	f006 fc13 	blne	9492 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c6c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c6e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c72:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c76:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c7a:	4905      	ldr	r1, [pc, #20]	; (2c90 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c7c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c7e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c80:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c86:	4903      	ldr	r1, [pc, #12]	; (2c94 <_isr_wrapper+0x3c>)
	bx r1
    2c88:	4708      	bx	r1
    2c8a:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c8c:	20000c30 	.word	0x20000c30
	ldr r1, =_sw_isr_table
    2c90:	0000967c 	.word	0x0000967c
	ldr r1, =z_arm_int_exit
    2c94:	00002c99 	.word	0x00002c99

00002c98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2c98:	4b04      	ldr	r3, [pc, #16]	; (2cac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2c9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2c9c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2c9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2ca0:	d003      	beq.n	2caa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2ca2:	4903      	ldr	r1, [pc, #12]	; (2cb0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2ca8:	600a      	str	r2, [r1, #0]

00002caa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2caa:	4770      	bx	lr
	ldr r3, =_kernel
    2cac:	20000c30 	.word	0x20000c30
	ldr r1, =_SCS_ICSR
    2cb0:	e000ed04 	.word	0xe000ed04

00002cb4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb6:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2cb8:	2400      	movs	r4, #0
    2cba:	4b3b      	ldr	r3, [pc, #236]	; (2da8 <bus_fault.constprop.0+0xf4>)
    2cbc:	9302      	str	r3, [sp, #8]
    2cbe:	e9cd 4400 	strd	r4, r4, [sp]
    2cc2:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2cc4:	4607      	mov	r7, r0
    2cc6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2cc8:	2201      	movs	r2, #1
    2cca:	4938      	ldr	r1, [pc, #224]	; (2dac <bus_fault.constprop.0+0xf8>)
    2ccc:	4620      	mov	r0, r4
    2cce:	f006 f864 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2cd2:	4b37      	ldr	r3, [pc, #220]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cd6:	04db      	lsls	r3, r3, #19
    2cd8:	d509      	bpl.n	2cee <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    2cda:	4b36      	ldr	r3, [pc, #216]	; (2db4 <bus_fault.constprop.0+0x100>)
    2cdc:	4933      	ldr	r1, [pc, #204]	; (2dac <bus_fault.constprop.0+0xf8>)
    2cde:	9400      	str	r4, [sp, #0]
    2ce0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2ce4:	2201      	movs	r2, #1
    2ce6:	4623      	mov	r3, r4
    2ce8:	4620      	mov	r0, r4
    2cea:	f006 f856 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2cee:	4b30      	ldr	r3, [pc, #192]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cf2:	051d      	lsls	r5, r3, #20
    2cf4:	d509      	bpl.n	2d0a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    2cf6:	4b30      	ldr	r3, [pc, #192]	; (2db8 <bus_fault.constprop.0+0x104>)
    2cf8:	9302      	str	r3, [sp, #8]
    2cfa:	2300      	movs	r3, #0
    2cfc:	e9cd 3300 	strd	r3, r3, [sp]
    2d00:	492a      	ldr	r1, [pc, #168]	; (2dac <bus_fault.constprop.0+0xf8>)
    2d02:	2201      	movs	r2, #1
    2d04:	4618      	mov	r0, r3
    2d06:	f006 f848 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2d0a:	4d29      	ldr	r5, [pc, #164]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2d0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d0e:	059c      	lsls	r4, r3, #22
    2d10:	d51e      	bpl.n	2d50 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    2d12:	2400      	movs	r4, #0
    2d14:	4b29      	ldr	r3, [pc, #164]	; (2dbc <bus_fault.constprop.0+0x108>)
    2d16:	9302      	str	r3, [sp, #8]
    2d18:	2201      	movs	r2, #1
    2d1a:	4623      	mov	r3, r4
    2d1c:	4620      	mov	r0, r4
    2d1e:	e9cd 4400 	strd	r4, r4, [sp]
    2d22:	4922      	ldr	r1, [pc, #136]	; (2dac <bus_fault.constprop.0+0xf8>)
    2d24:	f006 f839 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2d28:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2d2a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2d2c:	0410      	lsls	r0, r2, #16
    2d2e:	d50f      	bpl.n	2d50 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2d30:	9303      	str	r3, [sp, #12]
    2d32:	4b23      	ldr	r3, [pc, #140]	; (2dc0 <bus_fault.constprop.0+0x10c>)
    2d34:	491d      	ldr	r1, [pc, #116]	; (2dac <bus_fault.constprop.0+0xf8>)
    2d36:	9400      	str	r4, [sp, #0]
    2d38:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2d3c:	2201      	movs	r2, #1
    2d3e:	4623      	mov	r3, r4
    2d40:	4620      	mov	r0, r4
    2d42:	f006 f82a 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2d46:	b11f      	cbz	r7, 2d50 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2d48:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2d4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2d4e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2d50:	4b17      	ldr	r3, [pc, #92]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d54:	0559      	lsls	r1, r3, #21
    2d56:	d509      	bpl.n	2d6c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2d58:	4b1a      	ldr	r3, [pc, #104]	; (2dc4 <bus_fault.constprop.0+0x110>)
    2d5a:	9302      	str	r3, [sp, #8]
    2d5c:	2300      	movs	r3, #0
    2d5e:	e9cd 3300 	strd	r3, r3, [sp]
    2d62:	4912      	ldr	r1, [pc, #72]	; (2dac <bus_fault.constprop.0+0xf8>)
    2d64:	2201      	movs	r2, #1
    2d66:	4618      	mov	r0, r3
    2d68:	f006 f817 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2d6c:	4a10      	ldr	r2, [pc, #64]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2d6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d70:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    2d74:	d012      	beq.n	2d9c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    2d76:	4b14      	ldr	r3, [pc, #80]	; (2dc8 <bus_fault.constprop.0+0x114>)
    2d78:	9302      	str	r3, [sp, #8]
    2d7a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2d7c:	e9cd 3300 	strd	r3, r3, [sp]
    2d80:	490a      	ldr	r1, [pc, #40]	; (2dac <bus_fault.constprop.0+0xf8>)
    2d82:	2201      	movs	r2, #1
    2d84:	4618      	mov	r0, r3
    2d86:	f006 f808 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2d8a:	4a09      	ldr	r2, [pc, #36]	; (2db0 <bus_fault.constprop.0+0xfc>)
    2d8c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2d8e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2d90:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2d94:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2d96:	7030      	strb	r0, [r6, #0]

	return reason;
}
    2d98:	b005      	add	sp, #20
    2d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2d9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2d9e:	0492      	lsls	r2, r2, #18
    2da0:	d5f3      	bpl.n	2d8a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2da2:	4a0a      	ldr	r2, [pc, #40]	; (2dcc <bus_fault.constprop.0+0x118>)
    2da4:	9202      	str	r2, [sp, #8]
    2da6:	e7e9      	b.n	2d7c <bus_fault.constprop.0+0xc8>
    2da8:	0000a5e7 	.word	0x0000a5e7
    2dac:	0000982c 	.word	0x0000982c
    2db0:	e000ed00 	.word	0xe000ed00
    2db4:	0000a5fd 	.word	0x0000a5fd
    2db8:	0000a60e 	.word	0x0000a60e
    2dbc:	0000a621 	.word	0x0000a621
    2dc0:	0000a63a 	.word	0x0000a63a
    2dc4:	0000a64f 	.word	0x0000a64f
    2dc8:	0000a66a 	.word	0x0000a66a
    2dcc:	0000a682 	.word	0x0000a682

00002dd0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2dd2:	2400      	movs	r4, #0
    2dd4:	4b33      	ldr	r3, [pc, #204]	; (2ea4 <usage_fault.constprop.0+0xd4>)
    2dd6:	9302      	str	r3, [sp, #8]
    2dd8:	e9cd 4400 	strd	r4, r4, [sp]
    2ddc:	4623      	mov	r3, r4
    2dde:	4932      	ldr	r1, [pc, #200]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2de0:	2201      	movs	r2, #1
    2de2:	4620      	mov	r0, r4
    2de4:	f005 ffd9 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2de8:	4b30      	ldr	r3, [pc, #192]	; (2eac <usage_fault.constprop.0+0xdc>)
    2dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dec:	019b      	lsls	r3, r3, #6
    2dee:	d509      	bpl.n	2e04 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    2df0:	4b2f      	ldr	r3, [pc, #188]	; (2eb0 <usage_fault.constprop.0+0xe0>)
    2df2:	492d      	ldr	r1, [pc, #180]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2df4:	9400      	str	r4, [sp, #0]
    2df6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2dfa:	2201      	movs	r2, #1
    2dfc:	4623      	mov	r3, r4
    2dfe:	4620      	mov	r0, r4
    2e00:	f005 ffcb 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2e04:	4b29      	ldr	r3, [pc, #164]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e08:	01dc      	lsls	r4, r3, #7
    2e0a:	d509      	bpl.n	2e20 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    2e0c:	4b29      	ldr	r3, [pc, #164]	; (2eb4 <usage_fault.constprop.0+0xe4>)
    2e0e:	9302      	str	r3, [sp, #8]
    2e10:	2300      	movs	r3, #0
    2e12:	e9cd 3300 	strd	r3, r3, [sp]
    2e16:	4924      	ldr	r1, [pc, #144]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2e18:	2201      	movs	r2, #1
    2e1a:	4618      	mov	r0, r3
    2e1c:	f005 ffbd 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2e20:	4b22      	ldr	r3, [pc, #136]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e24:	0318      	lsls	r0, r3, #12
    2e26:	d509      	bpl.n	2e3c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    2e28:	4b23      	ldr	r3, [pc, #140]	; (2eb8 <usage_fault.constprop.0+0xe8>)
    2e2a:	9302      	str	r3, [sp, #8]
    2e2c:	2300      	movs	r3, #0
    2e2e:	e9cd 3300 	strd	r3, r3, [sp]
    2e32:	491d      	ldr	r1, [pc, #116]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2e34:	2201      	movs	r2, #1
    2e36:	4618      	mov	r0, r3
    2e38:	f005 ffaf 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2e3c:	4b1b      	ldr	r3, [pc, #108]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e40:	0359      	lsls	r1, r3, #13
    2e42:	d509      	bpl.n	2e58 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2e44:	4b1d      	ldr	r3, [pc, #116]	; (2ebc <usage_fault.constprop.0+0xec>)
    2e46:	9302      	str	r3, [sp, #8]
    2e48:	2300      	movs	r3, #0
    2e4a:	e9cd 3300 	strd	r3, r3, [sp]
    2e4e:	4916      	ldr	r1, [pc, #88]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2e50:	2201      	movs	r2, #1
    2e52:	4618      	mov	r0, r3
    2e54:	f005 ffa1 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2e58:	4b14      	ldr	r3, [pc, #80]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e5c:	039a      	lsls	r2, r3, #14
    2e5e:	d509      	bpl.n	2e74 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2e60:	4b17      	ldr	r3, [pc, #92]	; (2ec0 <usage_fault.constprop.0+0xf0>)
    2e62:	9302      	str	r3, [sp, #8]
    2e64:	2300      	movs	r3, #0
    2e66:	e9cd 3300 	strd	r3, r3, [sp]
    2e6a:	490f      	ldr	r1, [pc, #60]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2e6c:	2201      	movs	r2, #1
    2e6e:	4618      	mov	r0, r3
    2e70:	f005 ff93 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2e74:	4b0d      	ldr	r3, [pc, #52]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e78:	03db      	lsls	r3, r3, #15
    2e7a:	d509      	bpl.n	2e90 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2e7c:	4b11      	ldr	r3, [pc, #68]	; (2ec4 <usage_fault.constprop.0+0xf4>)
    2e7e:	9302      	str	r3, [sp, #8]
    2e80:	2300      	movs	r3, #0
    2e82:	e9cd 3300 	strd	r3, r3, [sp]
    2e86:	4908      	ldr	r1, [pc, #32]	; (2ea8 <usage_fault.constprop.0+0xd8>)
    2e88:	2201      	movs	r2, #1
    2e8a:	4618      	mov	r0, r3
    2e8c:	f005 ff85 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2e90:	4a06      	ldr	r2, [pc, #24]	; (2eac <usage_fault.constprop.0+0xdc>)
    2e92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2e94:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2e98:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2e9c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2e9e:	6293      	str	r3, [r2, #40]	; 0x28
}
    2ea0:	b004      	add	sp, #16
    2ea2:	bd10      	pop	{r4, pc}
    2ea4:	0000a6b1 	.word	0x0000a6b1
    2ea8:	0000982c 	.word	0x0000982c
    2eac:	e000ed00 	.word	0xe000ed00
    2eb0:	0000a6c9 	.word	0x0000a6c9
    2eb4:	0000a6dc 	.word	0x0000a6dc
    2eb8:	0000a6f6 	.word	0x0000a6f6
    2ebc:	0000a714 	.word	0x0000a714
    2ec0:	0000a739 	.word	0x0000a739
    2ec4:	0000a753 	.word	0x0000a753

00002ec8 <mem_manage_fault>:
{
    2ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ecc:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ece:	2400      	movs	r4, #0
    2ed0:	4b53      	ldr	r3, [pc, #332]	; (3020 <mem_manage_fault+0x158>)
    2ed2:	9302      	str	r3, [sp, #8]
    2ed4:	e9cd 4400 	strd	r4, r4, [sp]
    2ed8:	4623      	mov	r3, r4
{
    2eda:	4680      	mov	r8, r0
    2edc:	4689      	mov	r9, r1
    2ede:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2ee0:	4950      	ldr	r1, [pc, #320]	; (3024 <mem_manage_fault+0x15c>)
    2ee2:	2201      	movs	r2, #1
    2ee4:	4620      	mov	r0, r4
    2ee6:	f005 ff58 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2eea:	4b4f      	ldr	r3, [pc, #316]	; (3028 <mem_manage_fault+0x160>)
    2eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eee:	06df      	lsls	r7, r3, #27
    2ef0:	d509      	bpl.n	2f06 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2ef2:	4b4e      	ldr	r3, [pc, #312]	; (302c <mem_manage_fault+0x164>)
    2ef4:	494b      	ldr	r1, [pc, #300]	; (3024 <mem_manage_fault+0x15c>)
    2ef6:	9400      	str	r4, [sp, #0]
    2ef8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2efc:	2201      	movs	r2, #1
    2efe:	4623      	mov	r3, r4
    2f00:	4620      	mov	r0, r4
    2f02:	f005 ff4a 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2f06:	4b48      	ldr	r3, [pc, #288]	; (3028 <mem_manage_fault+0x160>)
    2f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f0a:	071d      	lsls	r5, r3, #28
    2f0c:	d509      	bpl.n	2f22 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    2f0e:	4b48      	ldr	r3, [pc, #288]	; (3030 <mem_manage_fault+0x168>)
    2f10:	9302      	str	r3, [sp, #8]
    2f12:	2300      	movs	r3, #0
    2f14:	e9cd 3300 	strd	r3, r3, [sp]
    2f18:	4942      	ldr	r1, [pc, #264]	; (3024 <mem_manage_fault+0x15c>)
    2f1a:	2201      	movs	r2, #1
    2f1c:	4618      	mov	r0, r3
    2f1e:	f005 ff3c 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2f22:	4d41      	ldr	r5, [pc, #260]	; (3028 <mem_manage_fault+0x160>)
    2f24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f26:	079c      	lsls	r4, r3, #30
    2f28:	d437      	bmi.n	2f9a <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
    2f2a:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2f2e:	4b3e      	ldr	r3, [pc, #248]	; (3028 <mem_manage_fault+0x160>)
    2f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f32:	07d9      	lsls	r1, r3, #31
    2f34:	d509      	bpl.n	2f4a <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    2f36:	4b3f      	ldr	r3, [pc, #252]	; (3034 <mem_manage_fault+0x16c>)
    2f38:	9302      	str	r3, [sp, #8]
    2f3a:	2300      	movs	r3, #0
    2f3c:	e9cd 3300 	strd	r3, r3, [sp]
    2f40:	4938      	ldr	r1, [pc, #224]	; (3024 <mem_manage_fault+0x15c>)
    2f42:	2201      	movs	r2, #1
    2f44:	4618      	mov	r0, r3
    2f46:	f005 ff28 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f4a:	4b37      	ldr	r3, [pc, #220]	; (3028 <mem_manage_fault+0x160>)
    2f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f4e:	069a      	lsls	r2, r3, #26
    2f50:	d509      	bpl.n	2f66 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    2f52:	4b39      	ldr	r3, [pc, #228]	; (3038 <mem_manage_fault+0x170>)
    2f54:	9302      	str	r3, [sp, #8]
    2f56:	2300      	movs	r3, #0
    2f58:	e9cd 3300 	strd	r3, r3, [sp]
    2f5c:	4931      	ldr	r1, [pc, #196]	; (3024 <mem_manage_fault+0x15c>)
    2f5e:	2201      	movs	r2, #1
    2f60:	4618      	mov	r0, r3
    2f62:	f005 ff1a 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f66:	4d30      	ldr	r5, [pc, #192]	; (3028 <mem_manage_fault+0x160>)
    2f68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f6a:	06db      	lsls	r3, r3, #27
    2f6c:	d437      	bmi.n	2fde <mem_manage_fault+0x116>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2f6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f70:	079c      	lsls	r4, r3, #30
    2f72:	d434      	bmi.n	2fde <mem_manage_fault+0x116>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2f74:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2f76:	4b2c      	ldr	r3, [pc, #176]	; (3028 <mem_manage_fault+0x160>)
    2f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f7a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2f7c:	bf42      	ittt	mi
    2f7e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2f80:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2f84:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f88:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2f8c:	629a      	str	r2, [r3, #40]	; 0x28
}
    2f8e:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    2f90:	2300      	movs	r3, #0
    2f92:	7033      	strb	r3, [r6, #0]
}
    2f94:	b005      	add	sp, #20
    2f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2f9a:	2400      	movs	r4, #0
    2f9c:	4b27      	ldr	r3, [pc, #156]	; (303c <mem_manage_fault+0x174>)
    2f9e:	9302      	str	r3, [sp, #8]
    2fa0:	4620      	mov	r0, r4
    2fa2:	4623      	mov	r3, r4
    2fa4:	e9cd 4400 	strd	r4, r4, [sp]
    2fa8:	491e      	ldr	r1, [pc, #120]	; (3024 <mem_manage_fault+0x15c>)
    2faa:	2201      	movs	r2, #1
    2fac:	f005 fef5 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2fb0:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2fb2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fb4:	0618      	lsls	r0, r3, #24
    2fb6:	d5b8      	bpl.n	2f2a <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2fb8:	4b21      	ldr	r3, [pc, #132]	; (3040 <mem_manage_fault+0x178>)
    2fba:	491a      	ldr	r1, [pc, #104]	; (3024 <mem_manage_fault+0x15c>)
    2fbc:	9703      	str	r7, [sp, #12]
    2fbe:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2fc2:	9400      	str	r4, [sp, #0]
    2fc4:	4623      	mov	r3, r4
    2fc6:	2201      	movs	r2, #1
    2fc8:	4620      	mov	r0, r4
    2fca:	f005 fee6 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2fce:	f1b9 0f00 	cmp.w	r9, #0
    2fd2:	d0ac      	beq.n	2f2e <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2fd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2fda:	62ab      	str	r3, [r5, #40]	; 0x28
    2fdc:	e7a7      	b.n	2f2e <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2fde:	686b      	ldr	r3, [r5, #4]
    2fe0:	0518      	lsls	r0, r3, #20
    2fe2:	d5c7      	bpl.n	2f74 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2fe4:	4641      	mov	r1, r8
    2fe6:	4638      	mov	r0, r7
    2fe8:	f7ff fe0a 	bl	2c00 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2fec:	4604      	mov	r4, r0
    2fee:	b118      	cbz	r0, 2ff8 <mem_manage_fault+0x130>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2ff0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2ff4:	2402      	movs	r4, #2
    2ff6:	e7be      	b.n	2f76 <mem_manage_fault+0xae>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2ff8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ffa:	06d9      	lsls	r1, r3, #27
    2ffc:	d5ba      	bpl.n	2f74 <mem_manage_fault+0xac>
    2ffe:	4a11      	ldr	r2, [pc, #68]	; (3044 <mem_manage_fault+0x17c>)
    3000:	4911      	ldr	r1, [pc, #68]	; (3048 <mem_manage_fault+0x180>)
    3002:	4812      	ldr	r0, [pc, #72]	; (304c <mem_manage_fault+0x184>)
    3004:	f240 1349 	movw	r3, #329	; 0x149
    3008:	f005 fe2b 	bl	8c62 <assert_print>
    300c:	4810      	ldr	r0, [pc, #64]	; (3050 <mem_manage_fault+0x188>)
    300e:	f005 fe28 	bl	8c62 <assert_print>
    3012:	480c      	ldr	r0, [pc, #48]	; (3044 <mem_manage_fault+0x17c>)
    3014:	f240 1149 	movw	r1, #329	; 0x149
    3018:	f005 fe1c 	bl	8c54 <assert_post_action>
    301c:	e7ab      	b.n	2f76 <mem_manage_fault+0xae>
    301e:	bf00      	nop
    3020:	0000a77e 	.word	0x0000a77e
    3024:	0000982c 	.word	0x0000982c
    3028:	e000ed00 	.word	0xe000ed00
    302c:	0000a794 	.word	0x0000a794
    3030:	0000a60e 	.word	0x0000a60e
    3034:	0000a7f5 	.word	0x0000a7f5
    3038:	0000a682 	.word	0x0000a682
    303c:	0000a7c7 	.word	0x0000a7c7
    3040:	0000a7df 	.word	0x0000a7df
    3044:	0000a814 	.word	0x0000a814
    3048:	0000a84e 	.word	0x0000a84e
    304c:	00009bdf 	.word	0x00009bdf
    3050:	0000a898 	.word	0x0000a898

00003054 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3058:	4b85      	ldr	r3, [pc, #532]	; (3270 <z_arm_fault+0x21c>)
    305a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    305e:	b091      	sub	sp, #68	; 0x44
    3060:	4680      	mov	r8, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3062:	f3c9 0608 	ubfx	r6, r9, #0, #9
    3066:	2700      	movs	r7, #0
    3068:	f387 8811 	msr	BASEPRI, r7
    306c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3070:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3074:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3078:	d10d      	bne.n	3096 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    307a:	f002 030c 	and.w	r3, r2, #12
    307e:	2b08      	cmp	r3, #8
    3080:	d11b      	bne.n	30ba <z_arm_fault+0x66>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3082:	4b7c      	ldr	r3, [pc, #496]	; (3274 <z_arm_fault+0x220>)
    3084:	497c      	ldr	r1, [pc, #496]	; (3278 <z_arm_fault+0x224>)
    3086:	9700      	str	r7, [sp, #0]
    3088:	e9cd 7301 	strd	r7, r3, [sp, #4]
    308c:	2201      	movs	r2, #1
    308e:	463b      	mov	r3, r7
    3090:	4638      	mov	r0, r7
    3092:	f005 fe82 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3096:	4a79      	ldr	r2, [pc, #484]	; (327c <z_arm_fault+0x228>)
    3098:	4979      	ldr	r1, [pc, #484]	; (3280 <z_arm_fault+0x22c>)
    309a:	487a      	ldr	r0, [pc, #488]	; (3284 <z_arm_fault+0x230>)
    309c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    30a0:	f005 fddf 	bl	8c62 <assert_print>
    30a4:	4878      	ldr	r0, [pc, #480]	; (3288 <z_arm_fault+0x234>)
    30a6:	f005 fddc 	bl	8c62 <assert_print>
    30aa:	4874      	ldr	r0, [pc, #464]	; (327c <z_arm_fault+0x228>)
    30ac:	f240 31fb 	movw	r1, #1019	; 0x3fb
    30b0:	f005 fdd0 	bl	8c54 <assert_post_action>
    30b4:	f04f 0800 	mov.w	r8, #0
    30b8:	e006      	b.n	30c8 <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    30ba:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    30bc:	bf4c      	ite	mi
    30be:	4688      	movmi	r8, r1
			*nested_exc = true;
    30c0:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    30c2:	f1b8 0f00 	cmp.w	r8, #0
    30c6:	d0e6      	beq.n	3096 <z_arm_fault+0x42>
	*recoverable = false;
    30c8:	2500      	movs	r5, #0
	switch (fault) {
    30ca:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    30cc:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    30d0:	2b09      	cmp	r3, #9
    30d2:	f200 80b3 	bhi.w	323c <z_arm_fault+0x1e8>
    30d6:	e8df f003 	tbb	[pc, r3]
    30da:	a705      	.short	0xa705
    30dc:	b1b187ab 	.word	0xb1b187ab
    30e0:	afb1b1b1 	.word	0xafb1b1b1
	PR_FAULT_INFO("***** HARD FAULT *****");
    30e4:	4b69      	ldr	r3, [pc, #420]	; (328c <z_arm_fault+0x238>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30e6:	4e62      	ldr	r6, [pc, #392]	; (3270 <z_arm_fault+0x21c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    30e8:	4963      	ldr	r1, [pc, #396]	; (3278 <z_arm_fault+0x224>)
    30ea:	9500      	str	r5, [sp, #0]
    30ec:	e9cd 5301 	strd	r5, r3, [sp, #4]
    30f0:	2300      	movs	r3, #0
    30f2:	2201      	movs	r2, #1
    30f4:	4618      	mov	r0, r3
    30f6:	f005 fe50 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30fa:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    30fc:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3100:	f014 0402 	ands.w	r4, r4, #2
    3104:	d00b      	beq.n	311e <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    3106:	4b62      	ldr	r3, [pc, #392]	; (3290 <z_arm_fault+0x23c>)
	PR_FAULT_INFO(
    3108:	495b      	ldr	r1, [pc, #364]	; (3278 <z_arm_fault+0x224>)
    310a:	9500      	str	r5, [sp, #0]
    310c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    3110:	2300      	movs	r3, #0
    3112:	2201      	movs	r2, #1
    3114:	4618      	mov	r0, r3
    3116:	f005 fe40 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    311a:	2400      	movs	r4, #0
}
    311c:	e00c      	b.n	3138 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    311e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3120:	2b00      	cmp	r3, #0
    3122:	da25      	bge.n	3170 <z_arm_fault+0x11c>
		PR_EXC("  Debug event");
    3124:	4b5b      	ldr	r3, [pc, #364]	; (3294 <z_arm_fault+0x240>)
    3126:	4954      	ldr	r1, [pc, #336]	; (3278 <z_arm_fault+0x224>)
    3128:	9400      	str	r4, [sp, #0]
    312a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    312e:	2201      	movs	r2, #1
    3130:	4623      	mov	r3, r4
    3132:	4620      	mov	r0, r4
    3134:	f005 fe31 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3138:	f89d 301f 	ldrb.w	r3, [sp, #31]
    313c:	b9ab      	cbnz	r3, 316a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    313e:	2220      	movs	r2, #32
    3140:	4641      	mov	r1, r8
    3142:	eb0d 0002 	add.w	r0, sp, r2
    3146:	f005 fe6e 	bl	8e26 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    314a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    314c:	2f00      	cmp	r7, #0
    314e:	f000 808a 	beq.w	3266 <z_arm_fault+0x212>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3152:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3156:	b922      	cbnz	r2, 3162 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3158:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    315c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3160:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    3162:	a908      	add	r1, sp, #32
    3164:	4620      	mov	r0, r4
    3166:	f7ff fc17 	bl	2998 <z_arm_fatal_error>
}
    316a:	b011      	add	sp, #68	; 0x44
    316c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3170:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3172:	005b      	lsls	r3, r3, #1
    3174:	d54b      	bpl.n	320e <z_arm_fault+0x1ba>
		PR_EXC("  Fault escalation (see below)");
    3176:	4b48      	ldr	r3, [pc, #288]	; (3298 <z_arm_fault+0x244>)
    3178:	493f      	ldr	r1, [pc, #252]	; (3278 <z_arm_fault+0x224>)
    317a:	9400      	str	r4, [sp, #0]
    317c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3180:	2201      	movs	r2, #1
    3182:	4623      	mov	r3, r4
    3184:	4620      	mov	r0, r4
    3186:	f005 fe08 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    318a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    318e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3192:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3196:	429a      	cmp	r2, r3
    3198:	d10f      	bne.n	31ba <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    319a:	f8d8 3000 	ldr.w	r3, [r8]
    319e:	9303      	str	r3, [sp, #12]
    31a0:	4b3e      	ldr	r3, [pc, #248]	; (329c <z_arm_fault+0x248>)
    31a2:	9400      	str	r4, [sp, #0]
    31a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    31a8:	4620      	mov	r0, r4
    31aa:	4623      	mov	r3, r4
    31ac:	4932      	ldr	r1, [pc, #200]	; (3278 <z_arm_fault+0x224>)
    31ae:	2201      	movs	r2, #1
    31b0:	f005 fdf3 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    31b4:	f8d8 4000 	ldr.w	r4, [r8]
    31b8:	e7be      	b.n	3138 <z_arm_fault+0xe4>
		} else if (SCB_MMFSR != 0) {
    31ba:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    31be:	b13b      	cbz	r3, 31d0 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
    31c0:	f10d 021f 	add.w	r2, sp, #31
    31c4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    31c6:	4640      	mov	r0, r8
    31c8:	f7ff fe7e 	bl	2ec8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    31cc:	4604      	mov	r4, r0
		break;
    31ce:	e7b3      	b.n	3138 <z_arm_fault+0xe4>
		} else if (SCB_BFSR != 0) {
    31d0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    31d4:	b12b      	cbz	r3, 31e2 <z_arm_fault+0x18e>
			reason = bus_fault(esf, 1, recoverable);
    31d6:	f10d 011f 	add.w	r1, sp, #31
    31da:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    31dc:	f7ff fd6a 	bl	2cb4 <bus_fault.constprop.0>
    31e0:	e7f4      	b.n	31cc <z_arm_fault+0x178>
		} else if (SCB_UFSR != 0) {
    31e2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    31e4:	b29b      	uxth	r3, r3
    31e6:	b113      	cbz	r3, 31ee <z_arm_fault+0x19a>
		reason = usage_fault(esf);
    31e8:	f7ff fdf2 	bl	2dd0 <usage_fault.constprop.0>
    31ec:	e7ee      	b.n	31cc <z_arm_fault+0x178>
			__ASSERT(0,
    31ee:	492c      	ldr	r1, [pc, #176]	; (32a0 <z_arm_fault+0x24c>)
    31f0:	4a22      	ldr	r2, [pc, #136]	; (327c <z_arm_fault+0x228>)
    31f2:	4824      	ldr	r0, [pc, #144]	; (3284 <z_arm_fault+0x230>)
    31f4:	f240 23cd 	movw	r3, #717	; 0x2cd
    31f8:	f005 fd33 	bl	8c62 <assert_print>
    31fc:	4829      	ldr	r0, [pc, #164]	; (32a4 <z_arm_fault+0x250>)
    31fe:	f005 fd30 	bl	8c62 <assert_print>
    3202:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    3206:	481d      	ldr	r0, [pc, #116]	; (327c <z_arm_fault+0x228>)
    3208:	f005 fd24 	bl	8c54 <assert_post_action>
    320c:	e794      	b.n	3138 <z_arm_fault+0xe4>
    320e:	4924      	ldr	r1, [pc, #144]	; (32a0 <z_arm_fault+0x24c>)
    3210:	4a1a      	ldr	r2, [pc, #104]	; (327c <z_arm_fault+0x228>)
    3212:	481c      	ldr	r0, [pc, #112]	; (3284 <z_arm_fault+0x230>)
    3214:	f240 23d1 	movw	r3, #721	; 0x2d1
    3218:	f005 fd23 	bl	8c62 <assert_print>
    321c:	4822      	ldr	r0, [pc, #136]	; (32a8 <z_arm_fault+0x254>)
    321e:	f005 fd20 	bl	8c62 <assert_print>
    3222:	f240 21d1 	movw	r1, #721	; 0x2d1
    3226:	e7ee      	b.n	3206 <z_arm_fault+0x1b2>
		reason = mem_manage_fault(esf, 0, recoverable);
    3228:	f10d 021f 	add.w	r2, sp, #31
    322c:	2100      	movs	r1, #0
    322e:	e7ca      	b.n	31c6 <z_arm_fault+0x172>
		reason = bus_fault(esf, 0, recoverable);
    3230:	f10d 011f 	add.w	r1, sp, #31
    3234:	2000      	movs	r0, #0
    3236:	e7d1      	b.n	31dc <z_arm_fault+0x188>
	PR_FAULT_INFO(
    3238:	4b1c      	ldr	r3, [pc, #112]	; (32ac <z_arm_fault+0x258>)
    323a:	e765      	b.n	3108 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    323c:	4a1c      	ldr	r2, [pc, #112]	; (32b0 <z_arm_fault+0x25c>)
    323e:	4b1d      	ldr	r3, [pc, #116]	; (32b4 <z_arm_fault+0x260>)
    3240:	490d      	ldr	r1, [pc, #52]	; (3278 <z_arm_fault+0x224>)
    3242:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    3246:	bf18      	it	ne
    3248:	4613      	movne	r3, r2
    324a:	3e10      	subs	r6, #16
    324c:	2400      	movs	r4, #0
    324e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    3252:	4b19      	ldr	r3, [pc, #100]	; (32b8 <z_arm_fault+0x264>)
    3254:	9302      	str	r3, [sp, #8]
    3256:	e9cd 4400 	strd	r4, r4, [sp]
    325a:	4623      	mov	r3, r4
    325c:	2201      	movs	r2, #1
    325e:	4620      	mov	r0, r4
    3260:	f005 fd9b 	bl	8d9a <z_log_msg2_runtime_create.constprop.0>
}
    3264:	e768      	b.n	3138 <z_arm_fault+0xe4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3266:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    326a:	f023 0301 	bic.w	r3, r3, #1
    326e:	e777      	b.n	3160 <z_arm_fault+0x10c>
    3270:	e000ed00 	.word	0xe000ed00
    3274:	0000a8e9 	.word	0x0000a8e9
    3278:	0000982c 	.word	0x0000982c
    327c:	0000a814 	.word	0x0000a814
    3280:	0000a914 	.word	0x0000a914
    3284:	00009bdf 	.word	0x00009bdf
    3288:	0000a927 	.word	0x0000a927
    328c:	0000a965 	.word	0x0000a965
    3290:	0000a97c 	.word	0x0000a97c
    3294:	0000a99d 	.word	0x0000a99d
    3298:	0000a9ab 	.word	0x0000a9ab
    329c:	0000a9ca 	.word	0x0000a9ca
    32a0:	00009cb5 	.word	0x00009cb5
    32a4:	0000a9e6 	.word	0x0000a9e6
    32a8:	0000aa0a 	.word	0x0000aa0a
    32ac:	0000aa3a 	.word	0x0000aa3a
    32b0:	0000a8d0 	.word	0x0000a8d0
    32b4:	0000a8bb 	.word	0x0000a8bb
    32b8:	0000aa5e 	.word	0x0000aa5e

000032bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    32bc:	4a02      	ldr	r2, [pc, #8]	; (32c8 <z_arm_fault_init+0xc>)
    32be:	6953      	ldr	r3, [r2, #20]
    32c0:	f043 0310 	orr.w	r3, r3, #16
    32c4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    32c6:	4770      	bx	lr
    32c8:	e000ed00 	.word	0xe000ed00

000032cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    32cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    32d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    32d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    32d6:	4672      	mov	r2, lr
	bl z_arm_fault
    32d8:	f7ff febc 	bl	3054 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    32dc:	bd01      	pop	{r0, pc}
    32de:	bf00      	nop

000032e0 <z_arm_interrupt_init>:
    32e0:	4804      	ldr	r0, [pc, #16]	; (32f4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    32e2:	2300      	movs	r3, #0
    32e4:	2140      	movs	r1, #64	; 0x40
    32e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    32e8:	3301      	adds	r3, #1
    32ea:	2b30      	cmp	r3, #48	; 0x30
    32ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    32f0:	d1f9      	bne.n	32e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    32f2:	4770      	bx	lr
    32f4:	e000e100 	.word	0xe000e100

000032f8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    32f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    32fa:	f380 8814 	msr	CONTROL, r0
    isb
    32fe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3302:	f006 f931 	bl	9568 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3306:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3308:	490d      	ldr	r1, [pc, #52]	; (3340 <__start+0x48>)
    str r0, [r1]
    330a:	6008      	str	r0, [r1, #0]
    dsb
    330c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3310:	480c      	ldr	r0, [pc, #48]	; (3344 <__start+0x4c>)
    msr msp, r0
    3312:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3316:	f000 f82b 	bl	3370 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    331a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    331c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3320:	4809      	ldr	r0, [pc, #36]	; (3348 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3322:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3326:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3328:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    332c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3330:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3332:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3334:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3338:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    333c:	f7ff fbd4 	bl	2ae8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3340:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3344:	20002300 	.word	0x20002300
    ldr r0, =z_interrupt_stacks
    3348:	20002480 	.word	0x20002480

0000334c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    334c:	4907      	ldr	r1, [pc, #28]	; (336c <z_arm_clear_arm_mpu_config+0x20>)
    334e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3352:	2300      	movs	r3, #0
	int num_regions =
    3354:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3358:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    335a:	4293      	cmp	r3, r2
    335c:	d100      	bne.n	3360 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    335e:	4770      	bx	lr
  MPU->RNR = rnr;
    3360:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3364:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3368:	3301      	adds	r3, #1
    336a:	e7f6      	b.n	335a <z_arm_clear_arm_mpu_config+0xe>
    336c:	e000ed00 	.word	0xe000ed00

00003370 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3370:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3372:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3374:	2300      	movs	r3, #0
    3376:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    337a:	f7ff ffe7 	bl	334c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    337e:	4b14      	ldr	r3, [pc, #80]	; (33d0 <z_arm_init_arch_hw_at_boot+0x60>)
    3380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    338c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3398:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    339c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    33a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    33a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    33a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    33ac:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    33b0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    33b4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    33b8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    33bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    33c0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    33c4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    33c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33ca:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    33ce:	bd08      	pop	{r3, pc}
    33d0:	e000e100 	.word	0xe000e100

000033d4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    33d4:	4b08      	ldr	r3, [pc, #32]	; (33f8 <z_impl_k_thread_abort+0x24>)
    33d6:	689b      	ldr	r3, [r3, #8]
    33d8:	4283      	cmp	r3, r0
    33da:	d10b      	bne.n	33f4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    33dc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    33e0:	b143      	cbz	r3, 33f4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    33e2:	4b06      	ldr	r3, [pc, #24]	; (33fc <z_impl_k_thread_abort+0x28>)
    33e4:	685a      	ldr	r2, [r3, #4]
    33e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    33ea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    33ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    33ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    33f2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    33f4:	f004 bab0 	b.w	7958 <z_thread_abort>
    33f8:	20000c30 	.word	0x20000c30
    33fc:	e000ed00 	.word	0xe000ed00

00003400 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3400:	4b02      	ldr	r3, [pc, #8]	; (340c <z_arm_configure_static_mpu_regions+0xc>)
    3402:	4a03      	ldr	r2, [pc, #12]	; (3410 <z_arm_configure_static_mpu_regions+0x10>)
    3404:	4803      	ldr	r0, [pc, #12]	; (3414 <z_arm_configure_static_mpu_regions+0x14>)
    3406:	2101      	movs	r1, #1
    3408:	f000 b884 	b.w	3514 <arm_core_mpu_configure_static_mpu_regions>
    340c:	20040000 	.word	0x20040000
    3410:	20000000 	.word	0x20000000
    3414:	00009988 	.word	0x00009988

00003418 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3418:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    341a:	4b05      	ldr	r3, [pc, #20]	; (3430 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    341c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    341e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3420:	4a04      	ldr	r2, [pc, #16]	; (3434 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3422:	2120      	movs	r1, #32
    3424:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3428:	4618      	mov	r0, r3
    342a:	2101      	movs	r1, #1
    342c:	f000 b89a 	b.w	3564 <arm_core_mpu_configure_dynamic_mpu_regions>
    3430:	20000adc 	.word	0x20000adc
    3434:	150b0000 	.word	0x150b0000

00003438 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3438:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    343a:	4e27      	ldr	r6, [pc, #156]	; (34d8 <mpu_configure_regions+0xa0>)
    343c:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    343e:	2500      	movs	r5, #0
    3440:	428d      	cmp	r5, r1
    3442:	da15      	bge.n	3470 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    3444:	6844      	ldr	r4, [r0, #4]
    3446:	2c00      	cmp	r4, #0
    3448:	d043      	beq.n	34d2 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    344a:	b1d3      	cbz	r3, 3482 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    344c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3450:	ea14 0f0c 	tst.w	r4, ip
    3454:	d00f      	beq.n	3476 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3456:	4b21      	ldr	r3, [pc, #132]	; (34dc <mpu_configure_regions+0xa4>)
    3458:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    345a:	9302      	str	r3, [sp, #8]
    345c:	2300      	movs	r3, #0
    345e:	2201      	movs	r2, #1
    3460:	e9cd 3300 	strd	r3, r3, [sp]
    3464:	491e      	ldr	r1, [pc, #120]	; (34e0 <mpu_configure_regions+0xa8>)
    3466:	4618      	mov	r0, r3
    3468:	f005 fca7 	bl	8dba <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    346c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3470:	4610      	mov	r0, r2
    3472:	b005      	add	sp, #20
    3474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    3476:	2c1f      	cmp	r4, #31
    3478:	d9ed      	bls.n	3456 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    347a:	6807      	ldr	r7, [r0, #0]
		&&
    347c:	ea1c 0f07 	tst.w	ip, r7
    3480:	d1e9      	bne.n	3456 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3482:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3484:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3486:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    348a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    348c:	d90f      	bls.n	34ae <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    348e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3492:	d80e      	bhi.n	34b2 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3494:	3c01      	subs	r4, #1
    3496:	fab4 f484 	clz	r4, r4
    349a:	f1c4 041f 	rsb	r4, r4, #31
    349e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    34a0:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    34a2:	ea4c 0c04 	orr.w	ip, ip, r4
    34a6:	d906      	bls.n	34b6 <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    34a8:	4b0e      	ldr	r3, [pc, #56]	; (34e4 <mpu_configure_regions+0xac>)
    34aa:	9203      	str	r2, [sp, #12]
    34ac:	e7d5      	b.n	345a <mpu_configure_regions+0x22>
		return REGION_32B;
    34ae:	2408      	movs	r4, #8
    34b0:	e7f6      	b.n	34a0 <mpu_configure_regions+0x68>
		return REGION_4G;
    34b2:	243e      	movs	r4, #62	; 0x3e
    34b4:	e7f4      	b.n	34a0 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34b6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    34ba:	4314      	orrs	r4, r2
    34bc:	f044 0410 	orr.w	r4, r4, #16
    34c0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34c4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34c8:	f04c 0401 	orr.w	r4, ip, #1
    34cc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    34d0:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    34d2:	3501      	adds	r5, #1
    34d4:	300c      	adds	r0, #12
    34d6:	e7b3      	b.n	3440 <mpu_configure_regions+0x8>
    34d8:	e000ed00 	.word	0xe000ed00
    34dc:	0000aa75 	.word	0x0000aa75
    34e0:	00009824 	.word	0x00009824
    34e4:	0000aa98 	.word	0x0000aa98

000034e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <arm_core_mpu_enable+0x14>)
    34ea:	2205      	movs	r2, #5
    34ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    34f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34f4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    34f8:	4770      	bx	lr
    34fa:	bf00      	nop
    34fc:	e000ed00 	.word	0xe000ed00

00003500 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3500:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3504:	4b02      	ldr	r3, [pc, #8]	; (3510 <arm_core_mpu_disable+0x10>)
    3506:	2200      	movs	r2, #0
    3508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    350c:	4770      	bx	lr
    350e:	bf00      	nop
    3510:	e000ed00 	.word	0xe000ed00

00003514 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3514:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3516:	4d0e      	ldr	r5, [pc, #56]	; (3550 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3518:	2301      	movs	r3, #1
    351a:	782a      	ldrb	r2, [r5, #0]
    351c:	460c      	mov	r4, r1
    351e:	f7ff ff8b 	bl	3438 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3522:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3524:	3016      	adds	r0, #22
    3526:	d111      	bne.n	354c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3528:	f240 1311 	movw	r3, #273	; 0x111
    352c:	4a09      	ldr	r2, [pc, #36]	; (3554 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    352e:	490a      	ldr	r1, [pc, #40]	; (3558 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3530:	480a      	ldr	r0, [pc, #40]	; (355c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3532:	f005 fb96 	bl	8c62 <assert_print>
    3536:	4621      	mov	r1, r4
    3538:	4809      	ldr	r0, [pc, #36]	; (3560 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    353a:	f005 fb92 	bl	8c62 <assert_print>
			regions_num);
	}
}
    353e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3542:	4804      	ldr	r0, [pc, #16]	; (3554 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3544:	f240 1111 	movw	r1, #273	; 0x111
    3548:	f005 bb84 	b.w	8c54 <assert_post_action>
}
    354c:	bd38      	pop	{r3, r4, r5, pc}
    354e:	bf00      	nop
    3550:	20000e71 	.word	0x20000e71
    3554:	0000aabe 	.word	0x0000aabe
    3558:	00009cb5 	.word	0x00009cb5
    355c:	00009bdf 	.word	0x00009bdf
    3560:	0000aaf5 	.word	0x0000aaf5

00003564 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3564:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3566:	4a13      	ldr	r2, [pc, #76]	; (35b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3568:	2300      	movs	r3, #0
    356a:	7812      	ldrb	r2, [r2, #0]
    356c:	460c      	mov	r4, r1
    356e:	f7ff ff63 	bl	3438 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3572:	f110 0f16 	cmn.w	r0, #22
    3576:	d00a      	beq.n	358e <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    3578:	4b0f      	ldr	r3, [pc, #60]	; (35b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    357a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    357c:	2807      	cmp	r0, #7
    357e:	dd00      	ble.n	3582 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3580:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    3582:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3586:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    358a:	3001      	adds	r0, #1
    358c:	e7f6      	b.n	357c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    358e:	4a0b      	ldr	r2, [pc, #44]	; (35bc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3590:	490b      	ldr	r1, [pc, #44]	; (35c0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    3592:	480c      	ldr	r0, [pc, #48]	; (35c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    3594:	f44f 7398 	mov.w	r3, #304	; 0x130
    3598:	f005 fb63 	bl	8c62 <assert_print>
    359c:	4621      	mov	r1, r4
    359e:	480a      	ldr	r0, [pc, #40]	; (35c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    35a0:	f005 fb5f 	bl	8c62 <assert_print>
}
    35a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    35a8:	4804      	ldr	r0, [pc, #16]	; (35bc <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    35aa:	f44f 7198 	mov.w	r1, #304	; 0x130
    35ae:	f005 bb51 	b.w	8c54 <assert_post_action>
    35b2:	bf00      	nop
    35b4:	20000e71 	.word	0x20000e71
    35b8:	e000ed00 	.word	0xe000ed00
    35bc:	0000aabe 	.word	0x0000aabe
    35c0:	00009cb5 	.word	0x00009cb5
    35c4:	00009bdf 	.word	0x00009bdf
    35c8:	0000ab21 	.word	0x0000ab21

000035cc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    35cc:	4927      	ldr	r1, [pc, #156]	; (366c <z_arm_mpu_init+0xa0>)
{
    35ce:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    35d0:	680c      	ldr	r4, [r1, #0]
    35d2:	2c08      	cmp	r4, #8
    35d4:	d913      	bls.n	35fe <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    35d6:	f44f 73a4 	mov.w	r3, #328	; 0x148
    35da:	4a25      	ldr	r2, [pc, #148]	; (3670 <z_arm_mpu_init+0xa4>)
    35dc:	4925      	ldr	r1, [pc, #148]	; (3674 <z_arm_mpu_init+0xa8>)
    35de:	4826      	ldr	r0, [pc, #152]	; (3678 <z_arm_mpu_init+0xac>)
    35e0:	f005 fb3f 	bl	8c62 <assert_print>
    35e4:	4825      	ldr	r0, [pc, #148]	; (367c <z_arm_mpu_init+0xb0>)
    35e6:	2208      	movs	r2, #8
    35e8:	4621      	mov	r1, r4
    35ea:	f005 fb3a 	bl	8c62 <assert_print>
    35ee:	4820      	ldr	r0, [pc, #128]	; (3670 <z_arm_mpu_init+0xa4>)
    35f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    35f4:	f005 fb2e 	bl	8c54 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    35f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    35fc:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    35fe:	f7ff ff7f 	bl	3500 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3602:	6848      	ldr	r0, [r1, #4]
    3604:	491e      	ldr	r1, [pc, #120]	; (3680 <z_arm_mpu_init+0xb4>)
    3606:	2200      	movs	r2, #0
    3608:	4294      	cmp	r4, r2
    360a:	f100 000c 	add.w	r0, r0, #12
    360e:	d11a      	bne.n	3646 <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    3610:	4b1c      	ldr	r3, [pc, #112]	; (3684 <z_arm_mpu_init+0xb8>)
    3612:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3614:	f7ff ff68 	bl	34e8 <arm_core_mpu_enable>
	__ASSERT(
    3618:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    361c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3620:	2b08      	cmp	r3, #8
    3622:	d00e      	beq.n	3642 <z_arm_mpu_init+0x76>
    3624:	4918      	ldr	r1, [pc, #96]	; (3688 <z_arm_mpu_init+0xbc>)
    3626:	4a12      	ldr	r2, [pc, #72]	; (3670 <z_arm_mpu_init+0xa4>)
    3628:	4813      	ldr	r0, [pc, #76]	; (3678 <z_arm_mpu_init+0xac>)
    362a:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    362e:	f005 fb18 	bl	8c62 <assert_print>
    3632:	4816      	ldr	r0, [pc, #88]	; (368c <z_arm_mpu_init+0xc0>)
    3634:	f005 fb15 	bl	8c62 <assert_print>
    3638:	480d      	ldr	r0, [pc, #52]	; (3670 <z_arm_mpu_init+0xa4>)
    363a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    363e:	f005 fb09 	bl	8c54 <assert_post_action>
	return 0;
    3642:	2000      	movs	r0, #0
    3644:	e7da      	b.n	35fc <z_arm_mpu_init+0x30>
    3646:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    364a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    364e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3652:	4313      	orrs	r3, r2
    3654:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3658:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    365c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3660:	f043 0301 	orr.w	r3, r3, #1
    3664:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3668:	3201      	adds	r2, #1
    366a:	e7cd      	b.n	3608 <z_arm_mpu_init+0x3c>
    366c:	00009994 	.word	0x00009994
    3670:	0000aabe 	.word	0x0000aabe
    3674:	00009cb5 	.word	0x00009cb5
    3678:	00009bdf 	.word	0x00009bdf
    367c:	0000ab4e 	.word	0x0000ab4e
    3680:	e000ed00 	.word	0xe000ed00
    3684:	20000e71 	.word	0x20000e71
    3688:	0000ab82 	.word	0x0000ab82
    368c:	0000abd2 	.word	0x0000abd2

00003690 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3690:	4b01      	ldr	r3, [pc, #4]	; (3698 <__stdout_hook_install+0x8>)
    3692:	6018      	str	r0, [r3, #0]
}
    3694:	4770      	bx	lr
    3696:	bf00      	nop
    3698:	200000c4 	.word	0x200000c4

0000369c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    369c:	b510      	push	{r4, lr}
	__asm__ volatile(
    369e:	f04f 0340 	mov.w	r3, #64	; 0x40
    36a2:	f3ef 8011 	mrs	r0, BASEPRI
    36a6:	f383 8812 	msr	BASEPRI_MAX, r3
    36aa:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36ae:	4a11      	ldr	r2, [pc, #68]	; (36f4 <nordicsemi_nrf52_init+0x58>)
    36b0:	2301      	movs	r3, #1
    36b2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    36b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    36be:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    36c2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    36c6:	2c08      	cmp	r4, #8
    36c8:	d108      	bne.n	36dc <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36ca:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    36ce:	2905      	cmp	r1, #5
    36d0:	d804      	bhi.n	36dc <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    36d2:	4c09      	ldr	r4, [pc, #36]	; (36f8 <nordicsemi_nrf52_init+0x5c>)
    36d4:	5c61      	ldrb	r1, [r4, r1]
    36d6:	b109      	cbz	r1, 36dc <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    36d8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    36dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36e0:	2201      	movs	r2, #1
    36e2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    36e6:	f380 8811 	msr	BASEPRI, r0
    36ea:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    36ee:	2000      	movs	r0, #0
    36f0:	bd10      	pop	{r4, pc}
    36f2:	bf00      	nop
    36f4:	4001e000 	.word	0x4001e000
    36f8:	0000ac06 	.word	0x0000ac06

000036fc <sys_arch_reboot>:
    *p_gpregret = val;
    36fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3700:	b2c0      	uxtb	r0, r0
    3702:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3706:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    370a:	4905      	ldr	r1, [pc, #20]	; (3720 <sys_arch_reboot+0x24>)
    370c:	4b05      	ldr	r3, [pc, #20]	; (3724 <sys_arch_reboot+0x28>)
    370e:	68ca      	ldr	r2, [r1, #12]
    3710:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3714:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3716:	60cb      	str	r3, [r1, #12]
    3718:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    371c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    371e:	e7fd      	b.n	371c <sys_arch_reboot+0x20>
    3720:	e000ed00 	.word	0xe000ed00
    3724:	05fa0004 	.word	0x05fa0004

00003728 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3728:	b120      	cbz	r0, 3734 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    372a:	4b03      	ldr	r3, [pc, #12]	; (3738 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    372c:	0180      	lsls	r0, r0, #6
    372e:	f043 0301 	orr.w	r3, r3, #1
    3732:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3734:	4770      	bx	lr
    3736:	bf00      	nop
    3738:	00009890 	.word	0x00009890

0000373c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    373c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    373e:	790d      	ldrb	r5, [r1, #4]
    3740:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    3744:	2c07      	cmp	r4, #7
    3746:	d81a      	bhi.n	377e <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3748:	780a      	ldrb	r2, [r1, #0]
    374a:	2a09      	cmp	r2, #9
    374c:	d81e      	bhi.n	378c <adc_nrfx_channel_setup+0x50>
    374e:	e8df f002 	tbb	[pc, r2]
    3752:	0606      	.short	0x0606
    3754:	1d060606 	.word	0x1d060606
    3758:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    375c:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    375e:	784b      	ldrb	r3, [r1, #1]
    3760:	2b03      	cmp	r3, #3
    3762:	d017      	beq.n	3794 <adc_nrfx_channel_setup+0x58>
    3764:	2b04      	cmp	r3, #4
    3766:	f04f 0300 	mov.w	r3, #0
    376a:	d014      	beq.n	3796 <adc_nrfx_channel_setup+0x5a>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    376c:	4a2f      	ldr	r2, [pc, #188]	; (382c <adc_nrfx_channel_setup+0xf0>)
    376e:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    3770:	e9cd 3300 	strd	r3, r3, [sp]
    3774:	492e      	ldr	r1, [pc, #184]	; (3830 <adc_nrfx_channel_setup+0xf4>)
    3776:	2201      	movs	r2, #1
    3778:	4618      	mov	r0, r3
    377a:	f005 fb7d 	bl	8e78 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    377e:	f06f 0015 	mvn.w	r0, #21
    3782:	e048      	b.n	3816 <adc_nrfx_channel_setup+0xda>
		config.gain = NRF_SAADC_GAIN2;
    3784:	2206      	movs	r2, #6
		break;
    3786:	e7ea      	b.n	375e <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3788:	2207      	movs	r2, #7
		break;
    378a:	e7e8      	b.n	375e <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    378c:	4b29      	ldr	r3, [pc, #164]	; (3834 <adc_nrfx_channel_setup+0xf8>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    378e:	9302      	str	r3, [sp, #8]
    3790:	2300      	movs	r3, #0
    3792:	e7ed      	b.n	3770 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    3794:	2301      	movs	r3, #1
	switch (channel_cfg->acquisition_time) {
    3796:	8848      	ldrh	r0, [r1, #2]
    3798:	f244 060a 	movw	r6, #16394	; 0x400a
    379c:	42b0      	cmp	r0, r6
    379e:	d03e      	beq.n	381e <adc_nrfx_channel_setup+0xe2>
    37a0:	d80a      	bhi.n	37b8 <adc_nrfx_channel_setup+0x7c>
    37a2:	f244 0603 	movw	r6, #16387	; 0x4003
    37a6:	42b0      	cmp	r0, r6
    37a8:	d014      	beq.n	37d4 <adc_nrfx_channel_setup+0x98>
    37aa:	f244 0605 	movw	r6, #16389	; 0x4005
    37ae:	42b0      	cmp	r0, r6
    37b0:	d033      	beq.n	381a <adc_nrfx_channel_setup+0xde>
    37b2:	b3a0      	cbz	r0, 381e <adc_nrfx_channel_setup+0xe2>
		LOG_ERR("Selected ADC acquisition time is not valid");
    37b4:	4b20      	ldr	r3, [pc, #128]	; (3838 <adc_nrfx_channel_setup+0xfc>)
    37b6:	e7ea      	b.n	378e <adc_nrfx_channel_setup+0x52>
	switch (channel_cfg->acquisition_time) {
    37b8:	f244 0614 	movw	r6, #16404	; 0x4014
    37bc:	42b0      	cmp	r0, r6
    37be:	d030      	beq.n	3822 <adc_nrfx_channel_setup+0xe6>
    37c0:	f244 0628 	movw	r6, #16424	; 0x4028
    37c4:	42b0      	cmp	r0, r6
    37c6:	d02e      	beq.n	3826 <adc_nrfx_channel_setup+0xea>
    37c8:	f244 060f 	movw	r6, #16399	; 0x400f
    37cc:	42b0      	cmp	r0, r6
    37ce:	d1f1      	bne.n	37b4 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    37d0:	2003      	movs	r0, #3
    37d2:	e000      	b.n	37d6 <adc_nrfx_channel_setup+0x9a>
	nrf_saadc_channel_config_t config = {
    37d4:	2000      	movs	r0, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37d6:	f3c5 1540 	ubfx	r5, r5, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    37da:	0212      	lsls	r2, r2, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37dc:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
    37e0:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    p_reg->CH[channel].CONFIG =
    37e4:	0123      	lsls	r3, r4, #4
    37e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37ea:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    37ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    37f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    37f6:	0123      	lsls	r3, r4, #4
    37f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37fc:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3800:	798a      	ldrb	r2, [r1, #6]
    3802:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    3806:	2000      	movs	r0, #0
    3808:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    380c:	4b0b      	ldr	r3, [pc, #44]	; (383c <adc_nrfx_channel_setup+0x100>)
    380e:	794a      	ldrb	r2, [r1, #5]
    3810:	4423      	add	r3, r4
    3812:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

	return 0;
}
    3816:	b004      	add	sp, #16
    3818:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    381a:	2001      	movs	r0, #1
    381c:	e7db      	b.n	37d6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    381e:	2002      	movs	r0, #2
    3820:	e7d9      	b.n	37d6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3822:	2004      	movs	r0, #4
    3824:	e7d7      	b.n	37d6 <adc_nrfx_channel_setup+0x9a>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3826:	2005      	movs	r0, #5
    3828:	e7d5      	b.n	37d6 <adc_nrfx_channel_setup+0x9a>
    382a:	bf00      	nop
    382c:	0000ac2b 	.word	0x0000ac2b
    3830:	000097fc 	.word	0x000097fc
    3834:	0000ac0c 	.word	0x0000ac0c
    3838:	0000ac4f 	.word	0x0000ac4f
    383c:	20000000 	.word	0x20000000

00003840 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3840:	4b04      	ldr	r3, [pc, #16]	; (3854 <adc_context_start_sampling.isra.0+0x14>)
    3842:	2201      	movs	r2, #1
    3844:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3848:	b108      	cbz	r0, 384e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    384a:	60da      	str	r2, [r3, #12]
}
    384c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    384e:	601a      	str	r2, [r3, #0]
    3850:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3852:	4770      	bx	lr
    3854:	40007000 	.word	0x40007000

00003858 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3858:	b5f0      	push	{r4, r5, r6, r7, lr}
    385a:	460d      	mov	r5, r1
    385c:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
    385e:	4870      	ldr	r0, [pc, #448]	; (3a20 <adc_nrfx_read+0x1c8>)
    3860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3868:	f002 ff5a 	bl	6720 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    386c:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    386e:	b114      	cbz	r4, 3876 <adc_nrfx_read+0x1e>
    3870:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    3874:	d00a      	beq.n	388c <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    3876:	4b6b      	ldr	r3, [pc, #428]	; (3a24 <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    3878:	9302      	str	r3, [sp, #8]
    387a:	2300      	movs	r3, #0
    387c:	e9cd 3300 	strd	r3, r3, [sp]
    3880:	4969      	ldr	r1, [pc, #420]	; (3a28 <adc_nrfx_read+0x1d0>)
    3882:	2201      	movs	r2, #1
    3884:	4618      	mov	r0, r3
    3886:	f005 faf7 	bl	8e78 <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    388a:	e053      	b.n	3934 <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    388c:	4e67      	ldr	r6, [pc, #412]	; (3a2c <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    388e:	4f68      	ldr	r7, [pc, #416]	; (3a30 <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    3890:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    3892:	fa24 f302 	lsr.w	r3, r4, r2
    3896:	f013 0301 	ands.w	r3, r3, #1
    389a:	d02f      	beq.n	38fc <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    389c:	18bb      	adds	r3, r7, r2
    389e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    38a2:	b92b      	cbnz	r3, 38b0 <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    38a4:	9203      	str	r2, [sp, #12]
    38a6:	4a63      	ldr	r2, [pc, #396]	; (3a34 <adc_nrfx_read+0x1dc>)
    38a8:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    38aa:	e9cd 3300 	strd	r3, r3, [sp]
    38ae:	e03c      	b.n	392a <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    38b0:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    38b4:	f895 c011 	ldrb.w	ip, [r5, #17]
    38b8:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    38bc:	f1bc 0c00 	subs.w	ip, ip, #0
    38c0:	bf18      	it	ne
    38c2:	f04f 0c01 	movne.w	ip, #1
    38c6:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    38ca:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    38ce:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    38d2:	f102 0051 	add.w	r0, r2, #81	; 0x51
    38d6:	0100      	lsls	r0, r0, #4
			++active_channels;
    38d8:	3101      	adds	r1, #1
    38da:	5033      	str	r3, [r6, r0]
    38dc:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    38de:	3201      	adds	r2, #1
    38e0:	2a08      	cmp	r2, #8
    38e2:	d1d6      	bne.n	3892 <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    38e4:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    38e6:	f1a2 0008 	sub.w	r0, r2, #8
    38ea:	2300      	movs	r3, #0
    38ec:	2806      	cmp	r0, #6
    38ee:	d816      	bhi.n	391e <adc_nrfx_read+0xc6>
    38f0:	e8df f000 	tbb	[pc, r0]
    38f4:	15091528 	.word	0x15091528
    38f8:	152a      	.short	0x152a
    38fa:	13          	.byte	0x13
    38fb:	00          	.byte	0x00
    38fc:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3900:	0100      	lsls	r0, r0, #4
    3902:	5033      	str	r3, [r6, r0]
}
    3904:	e7eb      	b.n	38de <adc_nrfx_read+0x86>
    3906:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    3908:	4a48      	ldr	r2, [pc, #288]	; (3a2c <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    390a:	2901      	cmp	r1, #1
    390c:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3910:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3912:	d91b      	bls.n	394c <adc_nrfx_read+0xf4>
    3914:	b1e3      	cbz	r3, 3950 <adc_nrfx_read+0xf8>
		LOG_ERR(
    3916:	4b48      	ldr	r3, [pc, #288]	; (3a38 <adc_nrfx_read+0x1e0>)
    3918:	e7ae      	b.n	3878 <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    391a:	2303      	movs	r3, #3
		break;
    391c:	e7f4      	b.n	3908 <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    391e:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    3920:	4a46      	ldr	r2, [pc, #280]	; (3a3c <adc_nrfx_read+0x1e4>)
    3922:	9300      	str	r3, [sp, #0]
    3924:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3928:	2300      	movs	r3, #0
    392a:	493f      	ldr	r1, [pc, #252]	; (3a28 <adc_nrfx_read+0x1d0>)
    392c:	2201      	movs	r2, #1
    392e:	4618      	mov	r0, r3
    3930:	f005 faa2 	bl	8e78 <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3934:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    3938:	4839      	ldr	r0, [pc, #228]	; (3a20 <adc_nrfx_read+0x1c8>)
    393a:	f002 feb3 	bl	66a4 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    393e:	4620      	mov	r0, r4
    3940:	b007      	add	sp, #28
    3942:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3944:	2300      	movs	r3, #0
    3946:	e7df      	b.n	3908 <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3948:	2302      	movs	r3, #2
    394a:	e7dd      	b.n	3908 <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    394c:	2b08      	cmp	r3, #8
    394e:	d816      	bhi.n	397e <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    3950:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    3954:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    3956:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3958:	b9b2      	cbnz	r2, 3988 <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    395a:	68ea      	ldr	r2, [r5, #12]
    395c:	429a      	cmp	r2, r3
    395e:	d217      	bcs.n	3990 <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    3960:	e9cd 2303 	strd	r2, r3, [sp, #12]
    3964:	4b36      	ldr	r3, [pc, #216]	; (3a40 <adc_nrfx_read+0x1e8>)
    3966:	9302      	str	r3, [sp, #8]
    3968:	2300      	movs	r3, #0
    396a:	e9cd 3300 	strd	r3, r3, [sp]
    396e:	492e      	ldr	r1, [pc, #184]	; (3a28 <adc_nrfx_read+0x1d0>)
    3970:	2201      	movs	r2, #1
    3972:	4618      	mov	r0, r3
    3974:	f005 fa80 	bl	8e78 <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    3978:	f06f 040b 	mvn.w	r4, #11
    397c:	e7dc      	b.n	3938 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    397e:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    3980:	4b30      	ldr	r3, [pc, #192]	; (3a44 <adc_nrfx_read+0x1ec>)
    3982:	9302      	str	r3, [sp, #8]
    3984:	2300      	movs	r3, #0
    3986:	e790      	b.n	38aa <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3988:	8992      	ldrh	r2, [r2, #12]
    398a:	fb02 3303 	mla	r3, r2, r3, r3
    398e:	e7e4      	b.n	395a <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3990:	4b26      	ldr	r3, [pc, #152]	; (3a2c <adc_nrfx_read+0x1d4>)
    3992:	68aa      	ldr	r2, [r5, #8]
    3994:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    3998:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    399a:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    399e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    39a0:	4c23      	ldr	r4, [pc, #140]	; (3a30 <adc_nrfx_read+0x1d8>)
    39a2:	f104 0664 	add.w	r6, r4, #100	; 0x64
    39a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    39a8:	683b      	ldr	r3, [r7, #0]
    39aa:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    39ac:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    39ae:	2600      	movs	r6, #0
    39b0:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    39b2:	4627      	mov	r7, r4
    39b4:	b373      	cbz	r3, 3a14 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    39b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    39b8:	f104 0578 	add.w	r5, r4, #120	; 0x78
    39bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    39c0:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    39c2:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    39c6:	b328      	cbz	r0, 3a14 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    39c8:	f3bf 8f5b 	dmb	ish
    39cc:	e857 3f00 	ldrex	r3, [r7]
    39d0:	e847 6200 	strex	r2, r6, [r7]
    39d4:	2a00      	cmp	r2, #0
    39d6:	d1f9      	bne.n	39cc <adc_nrfx_read+0x174>
    39d8:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    39dc:	481a      	ldr	r0, [pc, #104]	; (3a48 <adc_nrfx_read+0x1f0>)
    39de:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    39e0:	4a1a      	ldr	r2, [pc, #104]	; (3a4c <adc_nrfx_read+0x1f4>)
    39e2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    39e6:	4631      	mov	r1, r6
    39e8:	2300      	movs	r3, #0
    39ea:	fbe7 0105 	umlal	r0, r1, r7, r5
    39ee:	f7fc fd69 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    39f2:	2200      	movs	r2, #0
    39f4:	e9cd 0100 	strd	r0, r1, [sp]
    39f8:	2300      	movs	r3, #0
    39fa:	f104 0008 	add.w	r0, r4, #8
    39fe:	f004 fc31 	bl	8264 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    3a02:	4813      	ldr	r0, [pc, #76]	; (3a50 <adc_nrfx_read+0x1f8>)
    3a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a0c:	f002 fe88 	bl	6720 <z_impl_k_sem_take>
	return ctx->status;
    3a10:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    3a12:	e791      	b.n	3938 <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    3a14:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    3a18:	f7ff ff12 	bl	3840 <adc_context_start_sampling.isra.0>
    3a1c:	e7f1      	b.n	3a02 <adc_nrfx_read+0x1aa>
    3a1e:	bf00      	nop
    3a20:	20000040 	.word	0x20000040
    3a24:	0000ac7a 	.word	0x0000ac7a
    3a28:	000097fc 	.word	0x000097fc
    3a2c:	40007000 	.word	0x40007000
    3a30:	20000000 	.word	0x20000000
    3a34:	0000ac98 	.word	0x0000ac98
    3a38:	0000acd7 	.word	0x0000acd7
    3a3c:	0000acb2 	.word	0x0000acb2
    3a40:	0000ad2c 	.word	0x0000ad2c
    3a44:	0000ad09 	.word	0x0000ad09
    3a48:	000f423f 	.word	0x000f423f
    3a4c:	000f4240 	.word	0x000f4240
    3a50:	20000050 	.word	0x20000050

00003a54 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a54:	4b0e      	ldr	r3, [pc, #56]	; (3a90 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    3a56:	b510      	push	{r4, lr}
    3a58:	2400      	movs	r4, #0
    3a5a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3a5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    3a62:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    3a66:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    3a6a:	2212      	movs	r2, #18
    3a6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3a70:	2007      	movs	r0, #7
    3a72:	f7fe ffe1 	bl	2a38 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3a76:	4622      	mov	r2, r4
    3a78:	2101      	movs	r1, #1
    3a7a:	2007      	movs	r0, #7
    3a7c:	f7fe fff8 	bl	2a70 <z_arm_irq_priority_set>
	return sem->count;
    3a80:	4804      	ldr	r0, [pc, #16]	; (3a94 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    3a82:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3a84:	b913      	cbnz	r3, 3a8c <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    3a86:	3040      	adds	r0, #64	; 0x40
    3a88:	f002 fe0c 	bl	66a4 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    3a8c:	2000      	movs	r0, #0
    3a8e:	bd10      	pop	{r4, pc}
    3a90:	40007000 	.word	0x40007000
    3a94:	20000000 	.word	0x20000000

00003a98 <saadc_irq_handler>:
{
    3a98:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a9a:	4b2e      	ldr	r3, [pc, #184]	; (3b54 <saadc_irq_handler+0xbc>)
    3a9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3aa0:	2a00      	cmp	r2, #0
    3aa2:	d04a      	beq.n	3b3a <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aa4:	2200      	movs	r2, #0
    3aa6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3aaa:	4c2b      	ldr	r4, [pc, #172]	; (3b58 <saadc_irq_handler+0xc0>)
    3aac:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ab0:	2101      	movs	r1, #1
    3ab2:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3ab4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    3ab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3aba:	4625      	mov	r5, r4
    3abc:	b3c3      	cbz	r3, 3b30 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3abe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
    3ac0:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
		if (callback) {
    3ac4:	b133      	cbz	r3, 3ad4 <saadc_irq_handler+0x3c>
			action = callback(dev,
    3ac6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3aca:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3acc:	2801      	cmp	r0, #1
    3ace:	d014      	beq.n	3afa <saadc_irq_handler+0x62>
    3ad0:	2802      	cmp	r0, #2
    3ad2:	d028      	beq.n	3b26 <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3ad4:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    3ad8:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    3adc:	429a      	cmp	r2, r3
    3ade:	d922      	bls.n	3b26 <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3ae0:	3301      	adds	r3, #1
    3ae2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    3ae6:	4b1b      	ldr	r3, [pc, #108]	; (3b54 <saadc_irq_handler+0xbc>)
    3ae8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3aec:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3af0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3af2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    3af6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    3afa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3afc:	b92b      	cbnz	r3, 3b0a <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3afe:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    3b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3b06:	f7ff be9b 	b.w	3840 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b0a:	f3bf 8f5b 	dmb	ish
    3b0e:	e855 3f00 	ldrex	r3, [r5]
    3b12:	1e5a      	subs	r2, r3, #1
    3b14:	e845 2100 	strex	r1, r2, [r5]
    3b18:	2900      	cmp	r1, #0
    3b1a:	d1f8      	bne.n	3b0e <saadc_irq_handler+0x76>
    3b1c:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3b20:	2b01      	cmp	r3, #1
    3b22:	dcec      	bgt.n	3afe <saadc_irq_handler+0x66>
    3b24:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3b26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    3b28:	b113      	cbz	r3, 3b30 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    3b2a:	480c      	ldr	r0, [pc, #48]	; (3b5c <saadc_irq_handler+0xc4>)
    3b2c:	f005 fcf7 	bl	951e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3b30:	480b      	ldr	r0, [pc, #44]	; (3b60 <saadc_irq_handler+0xc8>)
    3b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3b36:	f002 bdb5 	b.w	66a4 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b3a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3b3e:	2900      	cmp	r1, #0
    3b40:	d0f0      	beq.n	3b24 <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    3b46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b4a:	2201      	movs	r2, #1
    3b4c:	609a      	str	r2, [r3, #8]
    3b4e:	601a      	str	r2, [r3, #0]
    3b50:	605a      	str	r2, [r3, #4]
}
    3b52:	e7e7      	b.n	3b24 <saadc_irq_handler+0x8c>
    3b54:	40007000 	.word	0x40007000
    3b58:	20000000 	.word	0x20000000
    3b5c:	20000008 	.word	0x20000008
    3b60:	20000050 	.word	0x20000050

00003b64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3b66:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3b68:	490a      	ldr	r1, [pc, #40]	; (3b94 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b6a:	4a0b      	ldr	r2, [pc, #44]	; (3b98 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    3b6c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b6e:	2340      	movs	r3, #64	; 0x40
    3b70:	9300      	str	r3, [sp, #0]
    3b72:	1149      	asrs	r1, r1, #5
{
    3b74:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3b76:	4623      	mov	r3, r4
    3b78:	4808      	ldr	r0, [pc, #32]	; (3b9c <onoff_start+0x38>)
    3b7a:	f005 f9b9 	bl	8ef0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3b7e:	1e01      	subs	r1, r0, #0
    3b80:	da05      	bge.n	3b8e <onoff_start+0x2a>
		notify(mgr, err);
    3b82:	4628      	mov	r0, r5
    3b84:	4623      	mov	r3, r4
	}
}
    3b86:	b003      	add	sp, #12
    3b88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    3b8c:	4718      	bx	r3
}
    3b8e:	b003      	add	sp, #12
    3b90:	bd30      	pop	{r4, r5, pc}
    3b92:	bf00      	nop
    3b94:	20000af8 	.word	0x20000af8
    3b98:	00008f5f 	.word	0x00008f5f
    3b9c:	000095ec 	.word	0x000095ec

00003ba0 <get_status>:
{
    3ba0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3ba2:	b2cc      	uxtb	r4, r1
    3ba4:	2c01      	cmp	r4, #1
{
    3ba6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3ba8:	d909      	bls.n	3bbe <get_status+0x1e>
    3baa:	4909      	ldr	r1, [pc, #36]	; (3bd0 <get_status+0x30>)
    3bac:	4809      	ldr	r0, [pc, #36]	; (3bd4 <get_status+0x34>)
    3bae:	4a0a      	ldr	r2, [pc, #40]	; (3bd8 <get_status+0x38>)
    3bb0:	2379      	movs	r3, #121	; 0x79
    3bb2:	f005 f856 	bl	8c62 <assert_print>
    3bb6:	4808      	ldr	r0, [pc, #32]	; (3bd8 <get_status+0x38>)
    3bb8:	2179      	movs	r1, #121	; 0x79
    3bba:	f005 f84b 	bl	8c54 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3bbe:	692b      	ldr	r3, [r5, #16]
    3bc0:	220c      	movs	r2, #12
    3bc2:	fb04 3302 	mla	r3, r4, r2, r3
    3bc6:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    3bc8:	f000 0007 	and.w	r0, r0, #7
    3bcc:	bd38      	pop	{r3, r4, r5, pc}
    3bce:	bf00      	nop
    3bd0:	0000ad9d 	.word	0x0000ad9d
    3bd4:	00009bdf 	.word	0x00009bdf
    3bd8:	0000ad60 	.word	0x0000ad60

00003bdc <stop>:
{
    3bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bde:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3be0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    3be2:	6906      	ldr	r6, [r0, #16]
{
    3be4:	4605      	mov	r5, r0
    3be6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3be8:	d90b      	bls.n	3c02 <stop+0x26>
    3bea:	4919      	ldr	r1, [pc, #100]	; (3c50 <stop+0x74>)
    3bec:	4819      	ldr	r0, [pc, #100]	; (3c54 <stop+0x78>)
    3bee:	4a1a      	ldr	r2, [pc, #104]	; (3c58 <stop+0x7c>)
    3bf0:	f240 134d 	movw	r3, #333	; 0x14d
    3bf4:	f005 f835 	bl	8c62 <assert_print>
    3bf8:	4817      	ldr	r0, [pc, #92]	; (3c58 <stop+0x7c>)
    3bfa:	f240 114d 	movw	r1, #333	; 0x14d
    3bfe:	f005 f829 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    3c02:	f04f 0340 	mov.w	r3, #64	; 0x40
    3c06:	f3ef 8111 	mrs	r1, BASEPRI
    3c0a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c0e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3c12:	220c      	movs	r2, #12
    3c14:	fb02 6304 	mla	r3, r2, r4, r6
    3c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3c1a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    3c1e:	d001      	beq.n	3c24 <stop+0x48>
    3c20:	429f      	cmp	r7, r3
    3c22:	d111      	bne.n	3c48 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3c24:	fb02 6604 	mla	r6, r2, r4, r6
    3c28:	2301      	movs	r3, #1
    3c2a:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    3c2c:	2000      	movs	r0, #0
	__asm__ volatile(
    3c2e:	f381 8811 	msr	BASEPRI, r1
    3c32:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3c36:	b930      	cbnz	r0, 3c46 <stop+0x6a>
	get_sub_config(dev, type)->stop();
    3c38:	686b      	ldr	r3, [r5, #4]
    3c3a:	220c      	movs	r2, #12
    3c3c:	fb02 3304 	mla	r3, r2, r4, r3
    3c40:	685b      	ldr	r3, [r3, #4]
    3c42:	4798      	blx	r3
	return 0;
    3c44:	2000      	movs	r0, #0
}
    3c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    3c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c4c:	e7ef      	b.n	3c2e <stop+0x52>
    3c4e:	bf00      	nop
    3c50:	0000ad9d 	.word	0x0000ad9d
    3c54:	00009bdf 	.word	0x00009bdf
    3c58:	0000ad60 	.word	0x0000ad60

00003c5c <onoff_stop>:
{
    3c5c:	b570      	push	{r4, r5, r6, lr}
    3c5e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3c60:	4906      	ldr	r1, [pc, #24]	; (3c7c <onoff_stop+0x20>)
    3c62:	1a41      	subs	r1, r0, r1
{
    3c64:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3c66:	1149      	asrs	r1, r1, #5
    3c68:	4805      	ldr	r0, [pc, #20]	; (3c80 <onoff_stop+0x24>)
    3c6a:	2240      	movs	r2, #64	; 0x40
    3c6c:	f7ff ffb6 	bl	3bdc <stop>
	notify(mgr, res);
    3c70:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3c72:	4601      	mov	r1, r0
	notify(mgr, res);
    3c74:	4620      	mov	r0, r4
}
    3c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3c7a:	4718      	bx	r3
    3c7c:	20000af8 	.word	0x20000af8
    3c80:	000095ec 	.word	0x000095ec

00003c84 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c84:	2200      	movs	r2, #0
{
    3c86:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c88:	2101      	movs	r1, #1
{
    3c8a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3c8c:	4610      	mov	r0, r2
    3c8e:	f7fe feef 	bl	2a70 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3c92:	480f      	ldr	r0, [pc, #60]	; (3cd0 <clk_init+0x4c>)
    3c94:	f001 f990 	bl	4fb8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3c98:	4b0e      	ldr	r3, [pc, #56]	; (3cd4 <clk_init+0x50>)
    3c9a:	4298      	cmp	r0, r3
    3c9c:	d115      	bne.n	3cca <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3c9e:	f001 f9b1 	bl	5004 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3ca2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3ca4:	490c      	ldr	r1, [pc, #48]	; (3cd8 <clk_init+0x54>)
    3ca6:	4630      	mov	r0, r6
    3ca8:	f004 ff2f 	bl	8b0a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3cac:	2800      	cmp	r0, #0
    3cae:	db0b      	blt.n	3cc8 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    3cb0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cb2:	4909      	ldr	r1, [pc, #36]	; (3cd8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cb4:	2501      	movs	r5, #1
    3cb6:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cb8:	f104 0020 	add.w	r0, r4, #32
    3cbc:	f004 ff25 	bl	8b0a <onoff_manager_init>
		if (err < 0) {
    3cc0:	2800      	cmp	r0, #0
    3cc2:	db01      	blt.n	3cc8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cc4:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    3cc6:	2000      	movs	r0, #0
}
    3cc8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3cca:	f06f 0004 	mvn.w	r0, #4
    3cce:	e7fb      	b.n	3cc8 <clk_init+0x44>
    3cd0:	00003d11 	.word	0x00003d11
    3cd4:	0bad0000 	.word	0x0bad0000
    3cd8:	000099f0 	.word	0x000099f0

00003cdc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3cdc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3cde:	230c      	movs	r3, #12
    3ce0:	4809      	ldr	r0, [pc, #36]	; (3d08 <clkstarted_handle.constprop.0+0x2c>)
    3ce2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3ce4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3ce6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3ce8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3cec:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3cee:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3cf0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    3cf2:	4418      	add	r0, r3
    3cf4:	f005 f8e9 	bl	8eca <set_on_state>
	if (callback) {
    3cf8:	b12d      	cbz	r5, 3d06 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3cfa:	4632      	mov	r2, r6
    3cfc:	462b      	mov	r3, r5
    3cfe:	4803      	ldr	r0, [pc, #12]	; (3d0c <clkstarted_handle.constprop.0+0x30>)
}
    3d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3d04:	4718      	bx	r3
}
    3d06:	bd70      	pop	{r4, r5, r6, pc}
    3d08:	20000af8 	.word	0x20000af8
    3d0c:	000095ec 	.word	0x000095ec

00003d10 <clock_event_handler>:
	switch (event) {
    3d10:	2801      	cmp	r0, #1
{
    3d12:	b508      	push	{r3, lr}
	switch (event) {
    3d14:	d006      	beq.n	3d24 <clock_event_handler+0x14>
    3d16:	2803      	cmp	r0, #3
    3d18:	d008      	beq.n	3d2c <clock_event_handler+0x1c>
    3d1a:	b9a8      	cbnz	r0, 3d48 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3d1c:	4b10      	ldr	r3, [pc, #64]	; (3d60 <clock_event_handler+0x50>)
    3d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3d20:	075b      	lsls	r3, r3, #29
    3d22:	d11b      	bne.n	3d5c <clock_event_handler+0x4c>
}
    3d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3d28:	f7ff bfd8 	b.w	3cdc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3d2c:	490d      	ldr	r1, [pc, #52]	; (3d64 <clock_event_handler+0x54>)
    3d2e:	4a0e      	ldr	r2, [pc, #56]	; (3d68 <clock_event_handler+0x58>)
    3d30:	480e      	ldr	r0, [pc, #56]	; (3d6c <clock_event_handler+0x5c>)
    3d32:	f240 235e 	movw	r3, #606	; 0x25e
    3d36:	f004 ff94 	bl	8c62 <assert_print>
    3d3a:	f240 215e 	movw	r1, #606	; 0x25e
}
    3d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    3d42:	4809      	ldr	r0, [pc, #36]	; (3d68 <clock_event_handler+0x58>)
    3d44:	f004 bf86 	b.w	8c54 <assert_post_action>
    3d48:	4906      	ldr	r1, [pc, #24]	; (3d64 <clock_event_handler+0x54>)
    3d4a:	4a07      	ldr	r2, [pc, #28]	; (3d68 <clock_event_handler+0x58>)
    3d4c:	4807      	ldr	r0, [pc, #28]	; (3d6c <clock_event_handler+0x5c>)
    3d4e:	f240 2362 	movw	r3, #610	; 0x262
    3d52:	f004 ff86 	bl	8c62 <assert_print>
    3d56:	f240 2162 	movw	r1, #610	; 0x262
    3d5a:	e7f0      	b.n	3d3e <clock_event_handler+0x2e>
}
    3d5c:	bd08      	pop	{r3, pc}
    3d5e:	bf00      	nop
    3d60:	20000af8 	.word	0x20000af8
    3d64:	00009cb5 	.word	0x00009cb5
    3d68:	0000ad60 	.word	0x0000ad60
    3d6c:	00009bdf 	.word	0x00009bdf

00003d70 <generic_hfclk_start>:
{
    3d70:	b508      	push	{r3, lr}
	__asm__ volatile(
    3d72:	f04f 0340 	mov.w	r3, #64	; 0x40
    3d76:	f3ef 8111 	mrs	r1, BASEPRI
    3d7a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d7e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3d82:	4a12      	ldr	r2, [pc, #72]	; (3dcc <generic_hfclk_start+0x5c>)
    3d84:	6813      	ldr	r3, [r2, #0]
    3d86:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3d8a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3d8e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3d90:	d00c      	beq.n	3dac <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d96:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3d9a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3d9e:	f013 0301 	ands.w	r3, r3, #1
    3da2:	d003      	beq.n	3dac <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3da4:	480a      	ldr	r0, [pc, #40]	; (3dd0 <generic_hfclk_start+0x60>)
    3da6:	f005 f890 	bl	8eca <set_on_state>
			already_started = true;
    3daa:	2301      	movs	r3, #1
	__asm__ volatile(
    3dac:	f381 8811 	msr	BASEPRI, r1
    3db0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3db4:	b123      	cbz	r3, 3dc0 <generic_hfclk_start+0x50>
}
    3db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3dba:	2000      	movs	r0, #0
    3dbc:	f7ff bf8e 	b.w	3cdc <clkstarted_handle.constprop.0>
}
    3dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3dc4:	2001      	movs	r0, #1
    3dc6:	f001 b941 	b.w	504c <nrfx_clock_start>
    3dca:	bf00      	nop
    3dcc:	20000b50 	.word	0x20000b50
    3dd0:	20000b40 	.word	0x20000b40

00003dd4 <api_blocking_start>:
{
    3dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3dd6:	2200      	movs	r2, #0
    3dd8:	2301      	movs	r3, #1
    3dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3dde:	4a09      	ldr	r2, [pc, #36]	; (3e04 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3de0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3de4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3de6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3dea:	f005 f8b1 	bl	8f50 <api_start>
	if (err < 0) {
    3dee:	2800      	cmp	r0, #0
    3df0:	db05      	blt.n	3dfe <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3df6:	2300      	movs	r3, #0
    3df8:	4668      	mov	r0, sp
    3dfa:	f002 fc91 	bl	6720 <z_impl_k_sem_take>
}
    3dfe:	b005      	add	sp, #20
    3e00:	f85d fb04 	ldr.w	pc, [sp], #4
    3e04:	00008f7d 	.word	0x00008f7d

00003e08 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e08:	4b09      	ldr	r3, [pc, #36]	; (3e30 <generic_hfclk_stop+0x28>)
    3e0a:	f3bf 8f5b 	dmb	ish
    3e0e:	e853 2f00 	ldrex	r2, [r3]
    3e12:	f022 0102 	bic.w	r1, r2, #2
    3e16:	e843 1000 	strex	r0, r1, [r3]
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d1f7      	bne.n	3e0e <generic_hfclk_stop+0x6>
    3e1e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3e22:	07d3      	lsls	r3, r2, #31
    3e24:	d402      	bmi.n	3e2c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3e26:	2001      	movs	r0, #1
    3e28:	f001 b974 	b.w	5114 <nrfx_clock_stop>
}
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop
    3e30:	20000b50 	.word	0x20000b50

00003e34 <z_nrf_clock_control_lf_on>:
{
    3e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e38:	4947      	ldr	r1, [pc, #284]	; (3f58 <z_nrf_clock_control_lf_on+0x124>)
    3e3a:	f3bf 8f5b 	dmb	ish
    3e3e:	4606      	mov	r6, r0
    3e40:	2201      	movs	r2, #1
    3e42:	e851 3f00 	ldrex	r3, [r1]
    3e46:	e841 2000 	strex	r0, r2, [r1]
    3e4a:	2800      	cmp	r0, #0
    3e4c:	d1f9      	bne.n	3e42 <z_nrf_clock_control_lf_on+0xe>
    3e4e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3e52:	b9a3      	cbnz	r3, 3e7e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3e54:	4941      	ldr	r1, [pc, #260]	; (3f5c <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    3e56:	4842      	ldr	r0, [pc, #264]	; (3f60 <z_nrf_clock_control_lf_on+0x12c>)
    3e58:	604b      	str	r3, [r1, #4]
    3e5a:	60cb      	str	r3, [r1, #12]
    3e5c:	608a      	str	r2, [r1, #8]
    3e5e:	f7fd fa47 	bl	12f0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3e62:	2800      	cmp	r0, #0
    3e64:	da0b      	bge.n	3e7e <z_nrf_clock_control_lf_on+0x4a>
    3e66:	493f      	ldr	r1, [pc, #252]	; (3f64 <z_nrf_clock_control_lf_on+0x130>)
    3e68:	483f      	ldr	r0, [pc, #252]	; (3f68 <z_nrf_clock_control_lf_on+0x134>)
    3e6a:	4a40      	ldr	r2, [pc, #256]	; (3f6c <z_nrf_clock_control_lf_on+0x138>)
    3e6c:	f44f 7308 	mov.w	r3, #544	; 0x220
    3e70:	f004 fef7 	bl	8c62 <assert_print>
    3e74:	483d      	ldr	r0, [pc, #244]	; (3f6c <z_nrf_clock_control_lf_on+0x138>)
    3e76:	f44f 7108 	mov.w	r1, #544	; 0x220
    3e7a:	f004 feeb 	bl	8c54 <assert_post_action>
	switch (start_mode) {
    3e7e:	b396      	cbz	r6, 3ee6 <z_nrf_clock_control_lf_on+0xb2>
    3e80:	1e73      	subs	r3, r6, #1
    3e82:	2b01      	cmp	r3, #1
    3e84:	d853      	bhi.n	3f2e <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3e86:	2e01      	cmp	r6, #1
    3e88:	d107      	bne.n	3e9a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e8e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3e92:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3e96:	2b01      	cmp	r3, #1
    3e98:	d025      	beq.n	3ee6 <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3e9a:	f005 faf2 	bl	9482 <k_is_in_isr>
    3e9e:	4604      	mov	r4, r0
    3ea0:	b918      	cbnz	r0, 3eaa <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    3ea2:	4b33      	ldr	r3, [pc, #204]	; (3f70 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    3ea4:	781b      	ldrb	r3, [r3, #0]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d14f      	bne.n	3f4a <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    3eaa:	f04f 0340 	mov.w	r3, #64	; 0x40
    3eae:	f3ef 8711 	mrs	r7, BASEPRI
    3eb2:	f383 8812 	msr	BASEPRI_MAX, r3
    3eb6:	f3bf 8f6f 	isb	sy
    3eba:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ebc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3f74 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3ec0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3ec4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3ec8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3ecc:	03d2      	lsls	r2, r2, #15
    3ece:	d50c      	bpl.n	3eea <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3ed0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3ed4:	2b01      	cmp	r3, #1
    3ed6:	d001      	beq.n	3edc <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3ed8:	2e01      	cmp	r6, #1
    3eda:	d106      	bne.n	3eea <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    3edc:	b30c      	cbz	r4, 3f22 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    3ede:	f387 8811 	msr	BASEPRI, r7
    3ee2:	f3bf 8f6f 	isb	sy
}
    3ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3eea:	b1ac      	cbz	r4, 3f18 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3eec:	4638      	mov	r0, r7
    3eee:	f7fe fd49 	bl	2984 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3ef2:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d1e4      	bne.n	3ec4 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3efa:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3efe:	2a00      	cmp	r2, #0
    3f00:	d0e0      	beq.n	3ec4 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f02:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    3f06:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f0a:	2301      	movs	r3, #1
    3f0c:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    3f10:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f14:	60ab      	str	r3, [r5, #8]
}
    3f16:	e7d5      	b.n	3ec4 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    3f18:	2100      	movs	r1, #0
    3f1a:	2021      	movs	r0, #33	; 0x21
    3f1c:	f003 fcde 	bl	78dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3f20:	e7e7      	b.n	3ef2 <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    3f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f26:	2202      	movs	r2, #2
    3f28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3f2c:	e7db      	b.n	3ee6 <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    3f2e:	4912      	ldr	r1, [pc, #72]	; (3f78 <z_nrf_clock_control_lf_on+0x144>)
    3f30:	480d      	ldr	r0, [pc, #52]	; (3f68 <z_nrf_clock_control_lf_on+0x134>)
    3f32:	4a0e      	ldr	r2, [pc, #56]	; (3f6c <z_nrf_clock_control_lf_on+0x138>)
    3f34:	f240 2332 	movw	r3, #562	; 0x232
    3f38:	f004 fe93 	bl	8c62 <assert_print>
}
    3f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    3f40:	480a      	ldr	r0, [pc, #40]	; (3f6c <z_nrf_clock_control_lf_on+0x138>)
    3f42:	f240 2132 	movw	r1, #562	; 0x232
    3f46:	f004 be85 	b.w	8c54 <assert_post_action>
    p_reg->INTENCLR = mask;
    3f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f4e:	2202      	movs	r2, #2
    3f50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3f54:	4607      	mov	r7, r0
}
    3f56:	e7b1      	b.n	3ebc <z_nrf_clock_control_lf_on+0x88>
    3f58:	20000b54 	.word	0x20000b54
    3f5c:	20000ae8 	.word	0x20000ae8
    3f60:	20000b18 	.word	0x20000b18
    3f64:	0000a38c 	.word	0x0000a38c
    3f68:	00009bdf 	.word	0x00009bdf
    3f6c:	0000ad60 	.word	0x0000ad60
    3f70:	20001282 	.word	0x20001282
    3f74:	e000e100 	.word	0xe000e100
    3f78:	00009cb5 	.word	0x00009cb5

00003f7c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3f7c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3f7e:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <uart_console_init+0x24>)
    3f80:	4808      	ldr	r0, [pc, #32]	; (3fa4 <uart_console_init+0x28>)
    3f82:	6018      	str	r0, [r3, #0]
    3f84:	f005 fa43 	bl	940e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3f88:	b138      	cbz	r0, 3f9a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3f8a:	4807      	ldr	r0, [pc, #28]	; (3fa8 <uart_console_init+0x2c>)
    3f8c:	f7ff fb80 	bl	3690 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3f90:	4805      	ldr	r0, [pc, #20]	; (3fa8 <uart_console_init+0x2c>)
    3f92:	f7fc ff87 	bl	ea4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3f96:	2000      	movs	r0, #0
}
    3f98:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3f9a:	f06f 0012 	mvn.w	r0, #18
    3f9e:	e7fb      	b.n	3f98 <uart_console_init+0x1c>
    3fa0:	20000b58 	.word	0x20000b58
    3fa4:	0000964c 	.word	0x0000964c
    3fa8:	00003fad 	.word	0x00003fad

00003fac <console_out>:
	if ('\n' == c) {
    3fac:	280a      	cmp	r0, #10
{
    3fae:	b538      	push	{r3, r4, r5, lr}
    3fb0:	4d07      	ldr	r5, [pc, #28]	; (3fd0 <console_out+0x24>)
    3fb2:	4604      	mov	r4, r0
	if ('\n' == c) {
    3fb4:	d104      	bne.n	3fc0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    3fb6:	6828      	ldr	r0, [r5, #0]
    3fb8:	6883      	ldr	r3, [r0, #8]
    3fba:	210d      	movs	r1, #13
    3fbc:	685b      	ldr	r3, [r3, #4]
    3fbe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3fc0:	6828      	ldr	r0, [r5, #0]
    3fc2:	6883      	ldr	r3, [r0, #8]
    3fc4:	b2e1      	uxtb	r1, r4
    3fc6:	685b      	ldr	r3, [r3, #4]
    3fc8:	4798      	blx	r3
}
    3fca:	4620      	mov	r0, r4
    3fcc:	bd38      	pop	{r3, r4, r5, pc}
    3fce:	bf00      	nop
    3fd0:	20000b58 	.word	0x20000b58

00003fd4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    3fd4:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    3fd6:	6905      	ldr	r5, [r0, #16]
{
    3fd8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3fda:	460c      	mov	r4, r1
    3fdc:	b961      	cbnz	r1, 3ff8 <gpio_nrfx_manage_callback+0x24>
    3fde:	4922      	ldr	r1, [pc, #136]	; (4068 <gpio_nrfx_manage_callback+0x94>)
    3fe0:	4a22      	ldr	r2, [pc, #136]	; (406c <gpio_nrfx_manage_callback+0x98>)
    3fe2:	4823      	ldr	r0, [pc, #140]	; (4070 <gpio_nrfx_manage_callback+0x9c>)
    3fe4:	2324      	movs	r3, #36	; 0x24
    3fe6:	f004 fe3c 	bl	8c62 <assert_print>
    3fea:	4822      	ldr	r0, [pc, #136]	; (4074 <gpio_nrfx_manage_callback+0xa0>)
    3fec:	f004 fe39 	bl	8c62 <assert_print>
    3ff0:	481e      	ldr	r0, [pc, #120]	; (406c <gpio_nrfx_manage_callback+0x98>)
    3ff2:	2124      	movs	r1, #36	; 0x24
    3ff4:	f004 fe2e 	bl	8c54 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3ff8:	6863      	ldr	r3, [r4, #4]
    3ffa:	b963      	cbnz	r3, 4016 <gpio_nrfx_manage_callback+0x42>
    3ffc:	491e      	ldr	r1, [pc, #120]	; (4078 <gpio_nrfx_manage_callback+0xa4>)
    3ffe:	4a1b      	ldr	r2, [pc, #108]	; (406c <gpio_nrfx_manage_callback+0x98>)
    4000:	481b      	ldr	r0, [pc, #108]	; (4070 <gpio_nrfx_manage_callback+0x9c>)
    4002:	2325      	movs	r3, #37	; 0x25
    4004:	f004 fe2d 	bl	8c62 <assert_print>
    4008:	481c      	ldr	r0, [pc, #112]	; (407c <gpio_nrfx_manage_callback+0xa8>)
    400a:	f004 fe2a 	bl	8c62 <assert_print>
    400e:	4817      	ldr	r0, [pc, #92]	; (406c <gpio_nrfx_manage_callback+0x98>)
    4010:	2125      	movs	r1, #37	; 0x25
    4012:	f004 fe1f 	bl	8c54 <assert_post_action>
	return list->head;
    4016:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4018:	b15b      	cbz	r3, 4032 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    401a:	2200      	movs	r2, #0
    401c:	429c      	cmp	r4, r3
    401e:	d112      	bne.n	4046 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    4020:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    4022:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    4024:	b952      	cbnz	r2, 403c <gpio_nrfx_manage_callback+0x68>
    4026:	42a1      	cmp	r1, r4
	list->head = node;
    4028:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    402a:	d100      	bne.n	402e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    402c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    402e:	2300      	movs	r3, #0
    4030:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4032:	b96e      	cbnz	r6, 4050 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4034:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    4036:	bd70      	pop	{r4, r5, r6, pc}
    4038:	460b      	mov	r3, r1
    403a:	e7ef      	b.n	401c <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    403c:	42a1      	cmp	r1, r4
	parent->next = child;
    403e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4040:	bf08      	it	eq
    4042:	60aa      	streq	r2, [r5, #8]
}
    4044:	e7f3      	b.n	402e <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    4046:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4048:	461a      	mov	r2, r3
    404a:	2900      	cmp	r1, #0
    404c:	d1f4      	bne.n	4038 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    404e:	b13e      	cbz	r6, 4060 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    4050:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    4052:	686b      	ldr	r3, [r5, #4]
    4054:	6023      	str	r3, [r4, #0]
	list->head = node;
    4056:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4058:	2800      	cmp	r0, #0
    405a:	d1eb      	bne.n	4034 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    405c:	60ac      	str	r4, [r5, #8]
}
    405e:	e7ea      	b.n	4036 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    4060:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4064:	e7e7      	b.n	4036 <gpio_nrfx_manage_callback+0x62>
    4066:	bf00      	nop
    4068:	0000ae0e 	.word	0x0000ae0e
    406c:	0000ade1 	.word	0x0000ade1
    4070:	00009bdf 	.word	0x00009bdf
    4074:	0000ae17 	.word	0x0000ae17
    4078:	0000ae26 	.word	0x0000ae26
    407c:	0000ae38 	.word	0x0000ae38

00004080 <gpio_nrfx_pin_interrupt_configure>:
{
    4080:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4082:	460e      	mov	r6, r1
	return port->config;
    4084:	6841      	ldr	r1, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4086:	7b08      	ldrb	r0, [r1, #12]
    4088:	f006 041f 	and.w	r4, r6, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    408c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4090:	ea44 1440 	orr.w	r4, r4, r0, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4094:	f04f 0500 	mov.w	r5, #0
    4098:	d104      	bne.n	40a4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    409a:	4620      	mov	r0, r4
    409c:	f001 fb60 	bl	5760 <nrfx_gpiote_trigger_disable>
	return 0;
    40a0:	2000      	movs	r0, #0
    40a2:	e053      	b.n	414c <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    40a4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    40a8:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    40ac:	d150      	bne.n	4150 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    40ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    40b2:	bf0c      	ite	eq
    40b4:	2304      	moveq	r3, #4
    40b6:	2305      	movne	r3, #5
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    40b8:	6889      	ldr	r1, [r1, #8]
	nrfx_gpiote_trigger_config_t trigger_config = {
    40ba:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    40be:	40f1      	lsrs	r1, r6
    40c0:	f011 0101 	ands.w	r1, r1, #1
    40c4:	d155      	bne.n	4172 <gpio_nrfx_pin_interrupt_configure+0xf2>
    40c6:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    40ca:	d152      	bne.n	4172 <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    40cc:	0966      	lsrs	r6, r4, #5
    40ce:	d04a      	beq.n	4166 <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    40d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    40d4:	2e01      	cmp	r6, #1
    40d6:	bf08      	it	eq
    40d8:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    40da:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    40de:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    40e0:	07ca      	lsls	r2, r1, #31
    40e2:	d40b      	bmi.n	40fc <gpio_nrfx_pin_interrupt_configure+0x7c>
    40e4:	492b      	ldr	r1, [pc, #172]	; (4194 <gpio_nrfx_pin_interrupt_configure+0x114>)
    40e6:	482c      	ldr	r0, [pc, #176]	; (4198 <gpio_nrfx_pin_interrupt_configure+0x118>)
    40e8:	4a2c      	ldr	r2, [pc, #176]	; (419c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    40ea:	f240 2329 	movw	r3, #553	; 0x229
    40ee:	f004 fdb8 	bl	8c62 <assert_print>
    40f2:	482a      	ldr	r0, [pc, #168]	; (419c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    40f4:	f240 2129 	movw	r1, #553	; 0x229
    40f8:	f004 fdac 	bl	8c54 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    40fc:	b16e      	cbz	r6, 411a <gpio_nrfx_pin_interrupt_configure+0x9a>
    40fe:	2e01      	cmp	r6, #1
    4100:	d034      	beq.n	416c <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    4102:	4927      	ldr	r1, [pc, #156]	; (41a0 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4104:	4824      	ldr	r0, [pc, #144]	; (4198 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4106:	4a25      	ldr	r2, [pc, #148]	; (419c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4108:	f240 232e 	movw	r3, #558	; 0x22e
    410c:	f004 fda9 	bl	8c62 <assert_print>
    4110:	4822      	ldr	r0, [pc, #136]	; (419c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4112:	f240 212e 	movw	r1, #558	; 0x22e
    4116:	f004 fd9d 	bl	8c54 <assert_post_action>
        case 0: return NRF_P0;
    411a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    411e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4122:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4126:	07db      	lsls	r3, r3, #31
    4128:	d423      	bmi.n	4172 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    412a:	f10d 0507 	add.w	r5, sp, #7
    412e:	4629      	mov	r1, r5
    4130:	4620      	mov	r0, r4
    4132:	f001 fa39 	bl	55a8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4136:	4b1b      	ldr	r3, [pc, #108]	; (41a4 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4138:	4298      	cmp	r0, r3
    413a:	d119      	bne.n	4170 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    413c:	4628      	mov	r0, r5
    413e:	f001 fa95 	bl	566c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4142:	4b19      	ldr	r3, [pc, #100]	; (41a8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4144:	4298      	cmp	r0, r3
    4146:	d013      	beq.n	4170 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    4148:	f06f 000b 	mvn.w	r0, #11
}
    414c:	b004      	add	sp, #16
    414e:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4150:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4154:	d005      	beq.n	4162 <gpio_nrfx_pin_interrupt_configure+0xe2>
    4156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    415a:	bf0c      	ite	eq
    415c:	2302      	moveq	r3, #2
    415e:	2301      	movne	r3, #1
    4160:	e7aa      	b.n	40b8 <gpio_nrfx_pin_interrupt_configure+0x38>
    4162:	2303      	movs	r3, #3
    4164:	e7a8      	b.n	40b8 <gpio_nrfx_pin_interrupt_configure+0x38>
            mask = P0_FEATURE_PINS_PRESENT;
    4166:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    416a:	e7b6      	b.n	40da <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    416c:	4b0f      	ldr	r3, [pc, #60]	; (41ac <gpio_nrfx_pin_interrupt_configure+0x12c>)
    416e:	e7d6      	b.n	411e <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4170:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4172:	2300      	movs	r3, #0
    4174:	4619      	mov	r1, r3
    4176:	aa02      	add	r2, sp, #8
    4178:	4620      	mov	r0, r4
    417a:	f001 f8ed 	bl	5358 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    417e:	4b0a      	ldr	r3, [pc, #40]	; (41a8 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4180:	4298      	cmp	r0, r3
    4182:	d104      	bne.n	418e <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4184:	2101      	movs	r1, #1
    4186:	4620      	mov	r0, r4
    4188:	f001 fa76 	bl	5678 <nrfx_gpiote_trigger_enable>
    418c:	e788      	b.n	40a0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    418e:	f06f 0004 	mvn.w	r0, #4
    4192:	e7db      	b.n	414c <gpio_nrfx_pin_interrupt_configure+0xcc>
    4194:	0000ae82 	.word	0x0000ae82
    4198:	00009bdf 	.word	0x00009bdf
    419c:	0000ae4f 	.word	0x0000ae4f
    41a0:	00009cb5 	.word	0x00009cb5
    41a4:	0bad0004 	.word	0x0bad0004
    41a8:	0bad0000 	.word	0x0bad0000
    41ac:	50000300 	.word	0x50000300

000041b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    41b0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    41b2:	f001 fa4b 	bl	564c <nrfx_gpiote_is_init>
    41b6:	4604      	mov	r4, r0
    41b8:	b968      	cbnz	r0, 41d6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    41ba:	f001 fa1f 	bl	55fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    41be:	4b08      	ldr	r3, [pc, #32]	; (41e0 <gpio_nrfx_init+0x30>)
    41c0:	4298      	cmp	r0, r3
    41c2:	d10a      	bne.n	41da <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    41c4:	4807      	ldr	r0, [pc, #28]	; (41e4 <gpio_nrfx_init+0x34>)
    41c6:	4621      	mov	r1, r4
    41c8:	f001 f9e8 	bl	559c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    41cc:	4622      	mov	r2, r4
    41ce:	2105      	movs	r1, #5
    41d0:	2006      	movs	r0, #6
    41d2:	f7fe fc4d 	bl	2a70 <z_arm_irq_priority_set>
		return 0;
    41d6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    41d8:	bd10      	pop	{r4, pc}
		return -EIO;
    41da:	f06f 0004 	mvn.w	r0, #4
    41de:	e7fb      	b.n	41d8 <gpio_nrfx_init+0x28>
    41e0:	0bad0000 	.word	0x0bad0000
    41e4:	000041e9 	.word	0x000041e9

000041e8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41e8:	0943      	lsrs	r3, r0, #5
{
    41ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41ee:	d003      	beq.n	41f8 <nrfx_gpio_handler+0x10>
    41f0:	2b01      	cmp	r3, #1
    41f2:	d02e      	beq.n	4252 <nrfx_gpio_handler+0x6a>
}
    41f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    41f8:	4f17      	ldr	r7, [pc, #92]	; (4258 <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    41fa:	693b      	ldr	r3, [r7, #16]
    41fc:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    41fe:	2c00      	cmp	r4, #0
    4200:	d0f8      	beq.n	41f4 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4202:	f000 001f 	and.w	r0, r0, #31
    4206:	2601      	movs	r6, #1
	return node->next;
    4208:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    420a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 425c <nrfx_gpio_handler+0x74>
    420e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4260 <nrfx_gpio_handler+0x78>
    4212:	f8df a050 	ldr.w	sl, [pc, #80]	; 4264 <nrfx_gpio_handler+0x7c>
    4216:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    4218:	68a3      	ldr	r3, [r4, #8]
    421a:	421e      	tst	r6, r3
    421c:	d014      	beq.n	4248 <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    421e:	6863      	ldr	r3, [r4, #4]
    4220:	b963      	cbnz	r3, 423c <nrfx_gpio_handler+0x54>
    4222:	4649      	mov	r1, r9
    4224:	2345      	movs	r3, #69	; 0x45
    4226:	4642      	mov	r2, r8
    4228:	4650      	mov	r0, sl
    422a:	f004 fd1a 	bl	8c62 <assert_print>
    422e:	480e      	ldr	r0, [pc, #56]	; (4268 <nrfx_gpio_handler+0x80>)
    4230:	f004 fd17 	bl	8c62 <assert_print>
    4234:	2145      	movs	r1, #69	; 0x45
    4236:	4640      	mov	r0, r8
    4238:	f004 fd0c 	bl	8c54 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    423c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4240:	4621      	mov	r1, r4
    4242:	4032      	ands	r2, r6
    4244:	4638      	mov	r0, r7
    4246:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4248:	2d00      	cmp	r5, #0
    424a:	d0d3      	beq.n	41f4 <nrfx_gpio_handler+0xc>
    424c:	462c      	mov	r4, r5
    424e:	682d      	ldr	r5, [r5, #0]
    4250:	e7e2      	b.n	4218 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4252:	4f06      	ldr	r7, [pc, #24]	; (426c <nrfx_gpio_handler+0x84>)
    4254:	e7d1      	b.n	41fa <nrfx_gpio_handler+0x12>
    4256:	bf00      	nop
    4258:	0000961c 	.word	0x0000961c
    425c:	0000ade1 	.word	0x0000ade1
    4260:	0000aea5 	.word	0x0000aea5
    4264:	00009bdf 	.word	0x00009bdf
    4268:	0000ae38 	.word	0x0000ae38
    426c:	00009604 	.word	0x00009604

00004270 <gpio_nrfx_pin_configure>:
{
    4270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4274:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4276:	7b3b      	ldrb	r3, [r7, #12]
    4278:	f001 051f 	and.w	r5, r1, #31
{
    427c:	b085      	sub	sp, #20
    427e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4280:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4284:	4614      	mov	r4, r2
    4286:	b9ca      	cbnz	r2, 42bc <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4288:	a902      	add	r1, sp, #8
    428a:	4628      	mov	r0, r5
    428c:	f001 f98c 	bl	55a8 <nrfx_gpiote_channel_get>
    4290:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4292:	4628      	mov	r0, r5
    4294:	f001 fa8e 	bl	57b4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4298:	4b49      	ldr	r3, [pc, #292]	; (43c0 <gpio_nrfx_pin_configure+0x150>)
    429a:	4298      	cmp	r0, r3
    429c:	d004      	beq.n	42a8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    429e:	f06f 0004 	mvn.w	r0, #4
}
    42a2:	b005      	add	sp, #20
    42a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    42a8:	4284      	cmp	r4, r0
    42aa:	d105      	bne.n	42b8 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    42ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
    42b0:	f001 f9d6 	bl	5660 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    42b4:	42a0      	cmp	r0, r4
    42b6:	d1f2      	bne.n	429e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    42b8:	2000      	movs	r0, #0
    42ba:	e7f2      	b.n	42a2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    42bc:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    42c0:	f10d 0103 	add.w	r1, sp, #3
    42c4:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    42c6:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    42ca:	f001 f96d 	bl	55a8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    42ce:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    42d0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    42d2:	aa02      	add	r2, sp, #8
    42d4:	4649      	mov	r1, r9
    42d6:	4628      	mov	r0, r5
    42d8:	f001 f83e 	bl	5358 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    42dc:	4b38      	ldr	r3, [pc, #224]	; (43c0 <gpio_nrfx_pin_configure+0x150>)
    42de:	4298      	cmp	r0, r3
    42e0:	d002      	beq.n	42e8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    42e2:	f06f 0015 	mvn.w	r0, #21
    42e6:	e7dc      	b.n	42a2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    42e8:	4580      	cmp	r8, r0
    42ea:	d103      	bne.n	42f4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    42ec:	f89d 0003 	ldrb.w	r0, [sp, #3]
    42f0:	f001 f9b6 	bl	5660 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    42f4:	03a3      	lsls	r3, r4, #14
    42f6:	d54f      	bpl.n	4398 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    42f8:	f240 6306 	movw	r3, #1542	; 0x606
    42fc:	4023      	ands	r3, r4
    42fe:	f240 2206 	movw	r2, #518	; 0x206
    4302:	4293      	cmp	r3, r2
    4304:	d03a      	beq.n	437c <gpio_nrfx_pin_configure+0x10c>
    4306:	d80c      	bhi.n	4322 <gpio_nrfx_pin_configure+0xb2>
    4308:	2b06      	cmp	r3, #6
    430a:	d015      	beq.n	4338 <gpio_nrfx_pin_configure+0xc8>
    430c:	d804      	bhi.n	4318 <gpio_nrfx_pin_configure+0xa8>
    430e:	b19b      	cbz	r3, 4338 <gpio_nrfx_pin_configure+0xc8>
    4310:	2b02      	cmp	r3, #2
    4312:	d1e6      	bne.n	42e2 <gpio_nrfx_pin_configure+0x72>
    4314:	2304      	movs	r3, #4
    4316:	e00f      	b.n	4338 <gpio_nrfx_pin_configure+0xc8>
    4318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    431c:	d1e1      	bne.n	42e2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    431e:	2301      	movs	r3, #1
    4320:	e00a      	b.n	4338 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4322:	f240 4202 	movw	r2, #1026	; 0x402
    4326:	4293      	cmp	r3, r2
    4328:	d02a      	beq.n	4380 <gpio_nrfx_pin_configure+0x110>
    432a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    432e:	d029      	beq.n	4384 <gpio_nrfx_pin_configure+0x114>
    4330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4334:	d1d5      	bne.n	42e2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4336:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4338:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    433c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4340:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4344:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4346:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    434a:	bf54      	ite	pl
    434c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
    4350:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4352:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4354:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4358:	d516      	bpl.n	4388 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    435a:	687a      	ldr	r2, [r7, #4]
    435c:	2301      	movs	r3, #1
    435e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4360:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4364:	2200      	movs	r2, #0
    4366:	a901      	add	r1, sp, #4
    4368:	4628      	mov	r0, r5
    436a:	f001 f8a3 	bl	54b4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    436e:	4b14      	ldr	r3, [pc, #80]	; (43c0 <gpio_nrfx_pin_configure+0x150>)
    4370:	4298      	cmp	r0, r3
    4372:	bf14      	ite	ne
    4374:	f06f 0015 	mvnne.w	r0, #21
    4378:	2000      	moveq	r0, #0
    437a:	e792      	b.n	42a2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    437c:	2307      	movs	r3, #7
    437e:	e7db      	b.n	4338 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4380:	2305      	movs	r3, #5
    4382:	e7d9      	b.n	4338 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4384:	2303      	movs	r3, #3
    4386:	e7d7      	b.n	4338 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4388:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    438a:	bf41      	itttt	mi
    438c:	2301      	movmi	r3, #1
    438e:	687a      	ldrmi	r2, [r7, #4]
    4390:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4392:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4396:	e7e5      	b.n	4364 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
    4398:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    439a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    439e:	bf54      	ite	pl
    43a0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    43a4:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    43a6:	461a      	mov	r2, r3
    43a8:	a901      	add	r1, sp, #4
    43aa:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    43ac:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    43b0:	f000 ffd2 	bl	5358 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    43b4:	4b02      	ldr	r3, [pc, #8]	; (43c0 <gpio_nrfx_pin_configure+0x150>)
    43b6:	4298      	cmp	r0, r3
    43b8:	f43f af7e 	beq.w	42b8 <gpio_nrfx_pin_configure+0x48>
    43bc:	e791      	b.n	42e2 <gpio_nrfx_pin_configure+0x72>
    43be:	bf00      	nop
    43c0:	0bad0000 	.word	0x0bad0000

000043c4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    43c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    43c6:	ab0b      	add	r3, sp, #44	; 0x2c
    43c8:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    43ca:	9303      	str	r3, [sp, #12]
    43cc:	4b05      	ldr	r3, [pc, #20]	; (43e4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    43ce:	9302      	str	r3, [sp, #8]
    43d0:	2300      	movs	r3, #0
    43d2:	e9cd 3300 	strd	r3, r3, [sp]
    43d6:	2201      	movs	r2, #1
    43d8:	4618      	mov	r0, r3
    43da:	f7fd ff4d 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    43de:	b007      	add	sp, #28
    43e0:	f85d fb04 	ldr.w	pc, [sp], #4
    43e4:	0000aebf 	.word	0x0000aebf

000043e8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    43e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    43ea:	794b      	ldrb	r3, [r1, #5]
    43ec:	2b01      	cmp	r3, #1
    43ee:	d026      	beq.n	443e <uarte_nrfx_configure+0x56>
    43f0:	2b03      	cmp	r3, #3
    43f2:	d121      	bne.n	4438 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    43f4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    43f6:	798b      	ldrb	r3, [r1, #6]
    43f8:	2b03      	cmp	r3, #3
    43fa:	d11d      	bne.n	4438 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    43fc:	79cc      	ldrb	r4, [r1, #7]
    43fe:	b10c      	cbz	r4, 4404 <uarte_nrfx_configure+0x1c>
    4400:	2c01      	cmp	r4, #1
    4402:	d119      	bne.n	4438 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4404:	790a      	ldrb	r2, [r1, #4]
    4406:	b112      	cbz	r2, 440e <uarte_nrfx_configure+0x26>
    4408:	2a02      	cmp	r2, #2
    440a:	d115      	bne.n	4438 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    440c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    440e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4410:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4412:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4416:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4418:	d065      	beq.n	44e6 <uarte_nrfx_configure+0xfe>
    441a:	d82d      	bhi.n	4478 <uarte_nrfx_configure+0x90>
    441c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4420:	d064      	beq.n	44ec <uarte_nrfx_configure+0x104>
    4422:	d816      	bhi.n	4452 <uarte_nrfx_configure+0x6a>
    4424:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4428:	d062      	beq.n	44f0 <uarte_nrfx_configure+0x108>
    442a:	d80a      	bhi.n	4442 <uarte_nrfx_configure+0x5a>
    442c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4430:	d061      	beq.n	44f6 <uarte_nrfx_configure+0x10e>
    4432:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4436:	d061      	beq.n	44fc <uarte_nrfx_configure+0x114>
    4438:	f06f 0085 	mvn.w	r0, #133	; 0x85
    443c:	e052      	b.n	44e4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    443e:	2600      	movs	r6, #0
    4440:	e7d9      	b.n	43f6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4442:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4446:	d05c      	beq.n	4502 <uarte_nrfx_configure+0x11a>
    4448:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    444c:	d1f4      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    444e:	4b37      	ldr	r3, [pc, #220]	; (452c <uarte_nrfx_configure+0x144>)
    4450:	e03c      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4452:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4456:	d057      	beq.n	4508 <uarte_nrfx_configure+0x120>
    4458:	d807      	bhi.n	446a <uarte_nrfx_configure+0x82>
    445a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    445e:	d055      	beq.n	450c <uarte_nrfx_configure+0x124>
    4460:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4464:	d1e8      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4466:	4b32      	ldr	r3, [pc, #200]	; (4530 <uarte_nrfx_configure+0x148>)
    4468:	e030      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    446a:	f647 2712 	movw	r7, #31250	; 0x7a12
    446e:	42bb      	cmp	r3, r7
    4470:	d1e2      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4472:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4476:	e029      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4478:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    447c:	d048      	beq.n	4510 <uarte_nrfx_configure+0x128>
    447e:	d813      	bhi.n	44a8 <uarte_nrfx_configure+0xc0>
    4480:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4484:	d047      	beq.n	4516 <uarte_nrfx_configure+0x12e>
    4486:	d809      	bhi.n	449c <uarte_nrfx_configure+0xb4>
    4488:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    448c:	42bb      	cmp	r3, r7
    448e:	d044      	beq.n	451a <uarte_nrfx_configure+0x132>
    4490:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4494:	d1d0      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4496:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    449a:	e017      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    449c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    44a0:	d1ca      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    44a2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    44a6:	e011      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44a8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    44ac:	d038      	beq.n	4520 <uarte_nrfx_configure+0x138>
    44ae:	d808      	bhi.n	44c2 <uarte_nrfx_configure+0xda>
    44b0:	4f20      	ldr	r7, [pc, #128]	; (4534 <uarte_nrfx_configure+0x14c>)
    44b2:	42bb      	cmp	r3, r7
    44b4:	d037      	beq.n	4526 <uarte_nrfx_configure+0x13e>
    44b6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    44ba:	d1bd      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    44bc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    44c0:	e004      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44c2:	4f1d      	ldr	r7, [pc, #116]	; (4538 <uarte_nrfx_configure+0x150>)
    44c4:	42bb      	cmp	r3, r7
    44c6:	d1b7      	bne.n	4438 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    44c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    44cc:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    44ce:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    44d2:	1d03      	adds	r3, r0, #4
    44d4:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    44d6:	4334      	orrs	r4, r6
    44d8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    44da:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    44de:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    44e2:	2000      	movs	r0, #0
}
    44e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    44e6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    44ea:	e7ef      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    44ec:	4b13      	ldr	r3, [pc, #76]	; (453c <uarte_nrfx_configure+0x154>)
    44ee:	e7ed      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    44f0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    44f4:	e7ea      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    44f6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    44fa:	e7e7      	b.n	44cc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    44fc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4500:	e7e4      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4502:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4506:	e7e1      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4508:	4b0d      	ldr	r3, [pc, #52]	; (4540 <uarte_nrfx_configure+0x158>)
    450a:	e7df      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    450c:	4b0d      	ldr	r3, [pc, #52]	; (4544 <uarte_nrfx_configure+0x15c>)
    450e:	e7dd      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4510:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4514:	e7da      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4516:	4b0c      	ldr	r3, [pc, #48]	; (4548 <uarte_nrfx_configure+0x160>)
    4518:	e7d8      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    451a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    451e:	e7d5      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4520:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4524:	e7d2      	b.n	44cc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4526:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    452a:	e7cf      	b.n	44cc <uarte_nrfx_configure+0xe4>
    452c:	0013b000 	.word	0x0013b000
    4530:	004ea000 	.word	0x004ea000
    4534:	0003d090 	.word	0x0003d090
    4538:	000f4240 	.word	0x000f4240
    453c:	00275000 	.word	0x00275000
    4540:	0075c000 	.word	0x0075c000
    4544:	003af000 	.word	0x003af000
    4548:	013a9000 	.word	0x013a9000

0000454c <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    454c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4550:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4554:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4556:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    455a:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    455e:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4560:	2100      	movs	r1, #0
    4562:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    4566:	4607      	mov	r7, r0
	data->dev = dev;
    4568:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    456a:	aa05      	add	r2, sp, #20
    456c:	4648      	mov	r0, r9
    456e:	f004 fdbd 	bl	90ec <pinctrl_lookup_state>
	if (ret < 0) {
    4572:	1e04      	subs	r4, r0, #0
    4574:	db25      	blt.n	45c2 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4576:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4578:	f8d9 2000 	ldr.w	r2, [r9]
    457c:	7919      	ldrb	r1, [r3, #4]
    457e:	6818      	ldr	r0, [r3, #0]
    4580:	f004 fe0b 	bl	919a <pinctrl_configure_pins>
	if (err < 0) {
    4584:	1e04      	subs	r4, r0, #0
    4586:	db1c      	blt.n	45c2 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4588:	1d31      	adds	r1, r6, #4
    458a:	4638      	mov	r0, r7
    458c:	f7ff ff2c 	bl	43e8 <uarte_nrfx_configure>
	if (err) {
    4590:	4604      	mov	r4, r0
    4592:	b9b0      	cbnz	r0, 45c2 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4594:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4598:	0799      	lsls	r1, r3, #30
    459a:	d529      	bpl.n	45f0 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    459c:	f106 0012 	add.w	r0, r6, #18
    45a0:	f001 fa04 	bl	59ac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    45a4:	4b27      	ldr	r3, [pc, #156]	; (4644 <uarte_instance_init.constprop.0+0xf8>)
    45a6:	4298      	cmp	r0, r3
    45a8:	d00f      	beq.n	45ca <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    45aa:	4b27      	ldr	r3, [pc, #156]	; (4648 <uarte_instance_init.constprop.0+0xfc>)
    45ac:	9400      	str	r4, [sp, #0]
    45ae:	e9cd 4301 	strd	r4, r3, [sp, #4]
    45b2:	4620      	mov	r0, r4
    45b4:	4623      	mov	r3, r4
    45b6:	4925      	ldr	r1, [pc, #148]	; (464c <uarte_instance_init.constprop.0+0x100>)
    45b8:	2201      	movs	r2, #1
    45ba:	f7ff ff03 	bl	43c4 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    45be:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    45c2:	4620      	mov	r0, r4
    45c4:	b007      	add	sp, #28
    45c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    45ca:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    45cc:	00c3      	lsls	r3, r0, #3
    45ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    45d2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    45d6:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    45da:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    45de:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    45e2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    45e6:	4a1a      	ldr	r2, [pc, #104]	; (4650 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    45e8:	2301      	movs	r3, #1
    45ea:	4083      	lsls	r3, r0
    45ec:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    45f0:	2308      	movs	r3, #8
    45f2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    45f6:	f898 3008 	ldrb.w	r3, [r8, #8]
    45fa:	b95b      	cbnz	r3, 4614 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45fc:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4600:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4604:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4608:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    460c:	2301      	movs	r3, #1
    460e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4612:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4614:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4618:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    461a:	bf5c      	itt	pl
    461c:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4620:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4624:	06db      	lsls	r3, r3, #27
    4626:	bf44      	itt	mi
    4628:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    462c:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4630:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    4632:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4634:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4638:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    463c:	2301      	movs	r3, #1
    463e:	60ab      	str	r3, [r5, #8]
    4640:	60eb      	str	r3, [r5, #12]
	return 0;
    4642:	e7be      	b.n	45c2 <uarte_instance_init.constprop.0+0x76>
    4644:	0bad0000 	.word	0x0bad0000
    4648:	0000aebf 	.word	0x0000aebf
    464c:	00009844 	.word	0x00009844
    4650:	4001f000 	.word	0x4001f000

00004654 <uarte_nrfx_poll_out>:
{
    4654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    4656:	6906      	ldr	r6, [r0, #16]
{
    4658:	4605      	mov	r5, r0
    465a:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    465c:	f004 ff11 	bl	9482 <k_is_in_isr>
    4660:	b910      	cbnz	r0, 4668 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4662:	4b2c      	ldr	r3, [pc, #176]	; (4714 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	b983      	cbnz	r3, 468a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4668:	f04f 0340 	mov.w	r3, #64	; 0x40
    466c:	f3ef 8411 	mrs	r4, BASEPRI
    4670:	f383 8812 	msr	BASEPRI_MAX, r3
    4674:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4678:	6868      	ldr	r0, [r5, #4]
    467a:	f004 fccb 	bl	9014 <is_tx_ready.isra.0>
    467e:	bb28      	cbnz	r0, 46cc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4680:	f384 8811 	msr	BASEPRI, r4
    4684:	f3bf 8f6f 	isb	sy
}
    4688:	e7ee      	b.n	4668 <uarte_nrfx_poll_out+0x14>
{
    468a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    468c:	6868      	ldr	r0, [r5, #4]
    468e:	f004 fcc1 	bl	9014 <is_tx_ready.isra.0>
    4692:	b970      	cbnz	r0, 46b2 <uarte_nrfx_poll_out+0x5e>
    4694:	2001      	movs	r0, #1
    4696:	f004 fe34 	bl	9302 <nrfx_busy_wait>
    469a:	3c01      	subs	r4, #1
    469c:	d1f6      	bne.n	468c <uarte_nrfx_poll_out+0x38>
    469e:	2100      	movs	r1, #0
    46a0:	2021      	movs	r0, #33	; 0x21
    46a2:	f003 f91b 	bl	78dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    46a6:	e7f0      	b.n	468a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    46a8:	f384 8811 	msr	BASEPRI, r4
    46ac:	f3bf 8f6f 	isb	sy
}
    46b0:	e7f5      	b.n	469e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    46b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    46b6:	f3ef 8411 	mrs	r4, BASEPRI
    46ba:	f383 8812 	msr	BASEPRI_MAX, r3
    46be:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    46c2:	6868      	ldr	r0, [r5, #4]
    46c4:	f004 fca6 	bl	9014 <is_tx_ready.isra.0>
    46c8:	2800      	cmp	r0, #0
    46ca:	d0ed      	beq.n	46a8 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    46cc:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    46d0:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    46d2:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    46d4:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    46d6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    46da:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46de:	2200      	movs	r2, #0
    46e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    46e4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    46e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    46ec:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    46f0:	684a      	ldr	r2, [r1, #4]
    46f2:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    46f4:	bf41      	itttt	mi
    46f6:	2208      	movmi	r2, #8
    46f8:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    46fc:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    4700:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4704:	2201      	movs	r2, #1
    4706:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4708:	f384 8811 	msr	BASEPRI, r4
    470c:	f3bf 8f6f 	isb	sy
}
    4710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4712:	bf00      	nop
    4714:	20001282 	.word	0x20001282

00004718 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4718:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    471a:	2301      	movs	r3, #1
    471c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    471e:	4a0e      	ldr	r2, [pc, #56]	; (4758 <compare_int_lock+0x40>)
    4720:	f3bf 8f5b 	dmb	ish
    4724:	43dc      	mvns	r4, r3
    4726:	e852 1f00 	ldrex	r1, [r2]
    472a:	ea01 0504 	and.w	r5, r1, r4
    472e:	e842 5600 	strex	r6, r5, [r2]
    4732:	2e00      	cmp	r6, #0
    4734:	d1f7      	bne.n	4726 <compare_int_lock+0xe>
    4736:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    473a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    473e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4740:	4806      	ldr	r0, [pc, #24]	; (475c <compare_int_lock+0x44>)
    4742:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4746:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    474a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    474e:	420b      	tst	r3, r1
}
    4750:	bf14      	ite	ne
    4752:	2001      	movne	r0, #1
    4754:	2000      	moveq	r0, #0
    4756:	bd70      	pop	{r4, r5, r6, pc}
    4758:	20000b78 	.word	0x20000b78
    475c:	40011000 	.word	0x40011000

00004760 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4760:	4918      	ldr	r1, [pc, #96]	; (47c4 <sys_clock_timeout_handler+0x64>)
{
    4762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4764:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4766:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    476a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    476c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4770:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4774:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4776:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    477a:	d221      	bcs.n	47c0 <sys_clock_timeout_handler+0x60>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    477c:	4b12      	ldr	r3, [pc, #72]	; (47c8 <sys_clock_timeout_handler+0x68>)
    477e:	681b      	ldr	r3, [r3, #0]
    4780:	0a1a      	lsrs	r2, r3, #8
    4782:	061b      	lsls	r3, r3, #24
    4784:	195e      	adds	r6, r3, r5
    4786:	4b11      	ldr	r3, [pc, #68]	; (47cc <sys_clock_timeout_handler+0x6c>)
    4788:	f142 0700 	adc.w	r7, r2, #0
    478c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    4790:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4792:	f003 fba7 	bl	7ee4 <sys_clock_announce>
    return p_reg->CC[ch];
    4796:	00a3      	lsls	r3, r4, #2
    4798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    479c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    47a0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    47a4:	42aa      	cmp	r2, r5
    47a6:	d10a      	bne.n	47be <sys_clock_timeout_handler+0x5e>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    47a8:	b91e      	cbnz	r6, 47b2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    47aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    47ae:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    47b2:	4a07      	ldr	r2, [pc, #28]	; (47d0 <sys_clock_timeout_handler+0x70>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    47b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    47b8:	40a3      	lsls	r3, r4
    47ba:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    47be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    47c0:	2600      	movs	r6, #0
    47c2:	e7e6      	b.n	4792 <sys_clock_timeout_handler+0x32>
    47c4:	200003f8 	.word	0x200003f8
    47c8:	20000b7c 	.word	0x20000b7c
    47cc:	200003e0 	.word	0x200003e0
    47d0:	40011000 	.word	0x40011000

000047d4 <compare_int_unlock>:
	if (key) {
    47d4:	b311      	cbz	r1, 481c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    47d6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    47da:	2301      	movs	r3, #1
    47dc:	4a10      	ldr	r2, [pc, #64]	; (4820 <compare_int_unlock+0x4c>)
    47de:	4083      	lsls	r3, r0
    47e0:	e852 cf00 	ldrex	ip, [r2]
    47e4:	ea4c 0c03 	orr.w	ip, ip, r3
    47e8:	e842 c100 	strex	r1, ip, [r2]
    47ec:	2900      	cmp	r1, #0
    47ee:	d1f7      	bne.n	47e0 <compare_int_unlock+0xc>
    47f0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    47f4:	4a0b      	ldr	r2, [pc, #44]	; (4824 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    47f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    47fa:	4083      	lsls	r3, r0
    47fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4800:	4b09      	ldr	r3, [pc, #36]	; (4828 <compare_int_unlock+0x54>)
    4802:	f3bf 8f5b 	dmb	ish
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    480c:	40c3      	lsrs	r3, r0
    480e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4810:	bf42      	ittt	mi
    4812:	4b06      	ldrmi	r3, [pc, #24]	; (482c <compare_int_unlock+0x58>)
    4814:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4818:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    481c:	4770      	bx	lr
    481e:	bf00      	nop
    4820:	20000b78 	.word	0x20000b78
    4824:	40011000 	.word	0x40011000
    4828:	20000b74 	.word	0x20000b74
    482c:	e000e100 	.word	0xe000e100

00004830 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4830:	4b0d      	ldr	r3, [pc, #52]	; (4868 <z_nrf_rtc_timer_read+0x38>)
    4832:	6818      	ldr	r0, [r3, #0]
    4834:	0a01      	lsrs	r1, r0, #8
    4836:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4838:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    483c:	4b0b      	ldr	r3, [pc, #44]	; (486c <z_nrf_rtc_timer_read+0x3c>)
    483e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4842:	1818      	adds	r0, r3, r0
    4844:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    484c:	d20a      	bcs.n	4864 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    484e:	4b08      	ldr	r3, [pc, #32]	; (4870 <z_nrf_rtc_timer_read+0x40>)
    4850:	e9d3 2300 	ldrd	r2, r3, [r3]
    4854:	4290      	cmp	r0, r2
    4856:	eb71 0303 	sbcs.w	r3, r1, r3
    485a:	d203      	bcs.n	4864 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    485c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4860:	f141 0100 	adc.w	r1, r1, #0
}
    4864:	4770      	bx	lr
    4866:	bf00      	nop
    4868:	20000b7c 	.word	0x20000b7c
    486c:	40011000 	.word	0x40011000
    4870:	200003e0 	.word	0x200003e0

00004874 <compare_set>:
{
    4874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4878:	b085      	sub	sp, #20
    487a:	4616      	mov	r6, r2
    487c:	4698      	mov	r8, r3
    487e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4880:	f7ff ff4a 	bl	4718 <compare_int_lock>
    4884:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4886:	f7ff ffd3 	bl	4830 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    488a:	42b0      	cmp	r0, r6
    488c:	eb71 0308 	sbcs.w	r3, r1, r8
    4890:	d276      	bcs.n	4980 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
    4892:	4b45      	ldr	r3, [pc, #276]	; (49a8 <compare_set+0x134>)
    4894:	1a30      	subs	r0, r6, r0
    4896:	eb68 0101 	sbc.w	r1, r8, r1
    489a:	4298      	cmp	r0, r3
    489c:	f171 0100 	sbcs.w	r1, r1, #0
    48a0:	d27f      	bcs.n	49a2 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    48a2:	4b42      	ldr	r3, [pc, #264]	; (49ac <compare_set+0x138>)
    48a4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    48a8:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    48ac:	45d8      	cmp	r8, fp
    48ae:	bf08      	it	eq
    48b0:	4556      	cmpeq	r6, sl
    48b2:	d050      	beq.n	4956 <compare_set+0xe2>
    48b4:	ea4f 0985 	mov.w	r9, r5, lsl #2
    48b8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    48bc:	f105 0750 	add.w	r7, r5, #80	; 0x50
    48c0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    48c4:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    48ca:	40ab      	lsls	r3, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48cc:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    48ce:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    48d2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48d6:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    48d8:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    48dc:	4b34      	ldr	r3, [pc, #208]	; (49b0 <compare_set+0x13c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48de:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    48e2:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    48e4:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    48e8:	1a40      	subs	r0, r0, r1
    48ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    48ee:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    48f2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    48f4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    48f8:	d107      	bne.n	490a <compare_set+0x96>
    48fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    48fe:	2013      	movs	r0, #19
    4900:	f004 fe09 	bl	9516 <z_impl_k_busy_wait>
    4904:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4908:	4b29      	ldr	r3, [pc, #164]	; (49b0 <compare_set+0x13c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    490a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    490e:	eba4 000c 	sub.w	r0, r4, ip
    4912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4916:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    491a:	bf88      	it	hi
    491c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    491e:	2000      	movs	r0, #0
    4920:	6038      	str	r0, [r7, #0]
    4922:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    4924:	9801      	ldr	r0, [sp, #4]
    4926:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    492a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    492e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4932:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    4936:	4281      	cmp	r1, r0
    4938:	d006      	beq.n	4948 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
    493a:	1a20      	subs	r0, r4, r0
    493c:	3802      	subs	r0, #2
    493e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4942:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4946:	d819      	bhi.n	497c <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
    4948:	1aa4      	subs	r4, r4, r2
    494a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    494e:	eb14 0a06 	adds.w	sl, r4, r6
    4952:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4956:	4915      	ldr	r1, [pc, #84]	; (49ac <compare_set+0x138>)
	cc_data[chan].callback = handler;
    4958:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    495a:	012b      	lsls	r3, r5, #4
    495c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    4960:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4964:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4968:	6053      	str	r3, [r2, #4]
	return ret;
    496a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    496c:	4628      	mov	r0, r5
    496e:	9900      	ldr	r1, [sp, #0]
    4970:	f7ff ff30 	bl	47d4 <compare_int_unlock>
}
    4974:	4620      	mov	r0, r4
    4976:	b005      	add	sp, #20
    4978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    497c:	4620      	mov	r0, r4
    497e:	e7b1      	b.n	48e4 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
    4980:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4982:	4a0c      	ldr	r2, [pc, #48]	; (49b4 <compare_set+0x140>)
    4984:	f3bf 8f5b 	dmb	ish
    4988:	40ab      	lsls	r3, r5
    498a:	e852 0f00 	ldrex	r0, [r2]
    498e:	4318      	orrs	r0, r3
    4990:	e842 0100 	strex	r1, r0, [r2]
    4994:	2900      	cmp	r1, #0
    4996:	d1f8      	bne.n	498a <compare_set+0x116>
    4998:	f3bf 8f5b 	dmb	ish
    499c:	46b2      	mov	sl, r6
    499e:	46c3      	mov	fp, r8
    49a0:	e7d9      	b.n	4956 <compare_set+0xe2>
			return -EINVAL;
    49a2:	f06f 0415 	mvn.w	r4, #21
    49a6:	e7e1      	b.n	496c <compare_set+0xf8>
    49a8:	01000001 	.word	0x01000001
    49ac:	200003e8 	.word	0x200003e8
    49b0:	40011000 	.word	0x40011000
    49b4:	20000b74 	.word	0x20000b74

000049b8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    49b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    49ba:	4b19      	ldr	r3, [pc, #100]	; (4a20 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    49bc:	4d19      	ldr	r5, [pc, #100]	; (4a24 <sys_clock_driver_init+0x6c>)
    49be:	2400      	movs	r4, #0
    49c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    49c8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    49cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    49d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    49d4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    49d8:	4b13      	ldr	r3, [pc, #76]	; (4a28 <sys_clock_driver_init+0x70>)
    49da:	2602      	movs	r6, #2
    49dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    49e0:	2101      	movs	r1, #1
    49e2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    49e6:	2011      	movs	r0, #17
    49e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    49ec:	4622      	mov	r2, r4
    49ee:	f7fe f83f 	bl	2a70 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    49f2:	2011      	movs	r0, #17
    49f4:	f7fe f820 	bl	2a38 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    49f8:	4a0c      	ldr	r2, [pc, #48]	; (4a2c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    49fa:	2301      	movs	r3, #1
    49fc:	60ab      	str	r3, [r5, #8]
    49fe:	602b      	str	r3, [r5, #0]
    4a00:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4a02:	4b0b      	ldr	r3, [pc, #44]	; (4a30 <sys_clock_driver_init+0x78>)
    4a04:	4a0b      	ldr	r2, [pc, #44]	; (4a34 <sys_clock_driver_init+0x7c>)
    4a06:	9300      	str	r3, [sp, #0]
    4a08:	9401      	str	r4, [sp, #4]
    4a0a:	2300      	movs	r3, #0
    4a0c:	4620      	mov	r0, r4
    4a0e:	f7ff ff31 	bl	4874 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4a12:	4630      	mov	r0, r6
    4a14:	f7ff fa0e 	bl	3e34 <z_nrf_clock_control_lf_on>

	return 0;
}
    4a18:	4620      	mov	r0, r4
    4a1a:	b002      	add	sp, #8
    4a1c:	bd70      	pop	{r4, r5, r6, pc}
    4a1e:	bf00      	nop
    4a20:	200003e8 	.word	0x200003e8
    4a24:	40011000 	.word	0x40011000
    4a28:	e000e100 	.word	0xe000e100
    4a2c:	20000b78 	.word	0x20000b78
    4a30:	00004761 	.word	0x00004761
    4a34:	007fffff 	.word	0x007fffff

00004a38 <rtc_nrf_isr>:
{
    4a38:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
    return p_reg->INTENSET & mask;
    4a3c:	4c2c      	ldr	r4, [pc, #176]	; (4af0 <rtc_nrf_isr+0xb8>)
    4a3e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4a42:	0799      	lsls	r1, r3, #30
    4a44:	d50b      	bpl.n	4a5e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a46:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4a4a:	b143      	cbz	r3, 4a5e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4a4c:	4a29      	ldr	r2, [pc, #164]	; (4af4 <rtc_nrf_isr+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a4e:	2300      	movs	r3, #0
    4a50:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4a54:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4a58:	6813      	ldr	r3, [r2, #0]
    4a5a:	3301      	adds	r3, #1
    4a5c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4a5e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4a62:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
    4a64:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4a68:	03d2      	lsls	r2, r2, #15
    4a6a:	d52d      	bpl.n	4ac8 <rtc_nrf_isr+0x90>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a6c:	f3bf 8f5b 	dmb	ish
    4a70:	4a21      	ldr	r2, [pc, #132]	; (4af8 <rtc_nrf_isr+0xc0>)
    4a72:	e852 1f00 	ldrex	r1, [r2]
    4a76:	f021 0001 	bic.w	r0, r1, #1
    4a7a:	e842 0500 	strex	r5, r0, [r2]
    4a7e:	2d00      	cmp	r5, #0
    4a80:	d1f7      	bne.n	4a72 <rtc_nrf_isr+0x3a>
    4a82:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4a86:	b911      	cbnz	r1, 4a8e <rtc_nrf_isr+0x56>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a88:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
		if (result) {
    4a8c:	b1e2      	cbz	r2, 4ac8 <rtc_nrf_isr+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a8e:	2500      	movs	r5, #0
    4a90:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4a94:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4a98:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
    4a9c:	f7ff fec8 	bl	4830 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4aa0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4aa4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    4aa6:	4b15      	ldr	r3, [pc, #84]	; (4afc <rtc_nrf_isr+0xc4>)
    4aa8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4aac:	42b0      	cmp	r0, r6
    4aae:	41b9      	sbcs	r1, r7
    4ab0:	d20f      	bcs.n	4ad2 <rtc_nrf_isr+0x9a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4ab2:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    4ab4:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    4ab8:	b141      	cbz	r1, 4acc <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    4aba:	f8cd 8000 	str.w	r8, [sp]
    4abe:	4632      	mov	r2, r6
    4ac0:	463b      	mov	r3, r7
    4ac2:	2000      	movs	r0, #0
    4ac4:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4ac6:	e001      	b.n	4acc <rtc_nrf_isr+0x94>
    4ac8:	f383 8810 	msr	PRIMASK, r3
}
    4acc:	b002      	add	sp, #8
    4ace:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4ad2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4ad6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4ada:	e9d3 1800 	ldrd	r1, r8, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4ade:	e9c3 ab02 	strd	sl, fp, [r3, #8]
			cc_data[chan].callback = NULL;
    4ae2:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ae8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
    4aec:	e7e2      	b.n	4ab4 <rtc_nrf_isr+0x7c>
    4aee:	bf00      	nop
    4af0:	40011000 	.word	0x40011000
    4af4:	20000b7c 	.word	0x20000b7c
    4af8:	20000b74 	.word	0x20000b74
    4afc:	200003e8 	.word	0x200003e8

00004b00 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b00:	1c43      	adds	r3, r0, #1
{
    4b02:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b04:	d021      	beq.n	4b4a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4b06:	2801      	cmp	r0, #1
    4b08:	dd21      	ble.n	4b4e <sys_clock_set_timeout+0x4e>
    4b0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4b0e:	da20      	bge.n	4b52 <sys_clock_set_timeout+0x52>
    4b10:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4b12:	f7ff fe8d 	bl	4830 <z_nrf_rtc_timer_read>
    4b16:	4b10      	ldr	r3, [pc, #64]	; (4b58 <sys_clock_set_timeout+0x58>)
    4b18:	e9d3 1300 	ldrd	r1, r3, [r3]
    4b1c:	1a42      	subs	r2, r0, r1
		ticks = 0;
    4b1e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	uint64_t target_time = cyc + last_count;
    4b22:	480e      	ldr	r0, [pc, #56]	; (4b5c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    4b24:	bf28      	it	cs
    4b26:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4b28:	3201      	adds	r2, #1
    4b2a:	4422      	add	r2, r4
	uint64_t target_time = cyc + last_count;
    4b2c:	4282      	cmp	r2, r0
    4b2e:	bf28      	it	cs
    4b30:	4602      	movcs	r2, r0
    4b32:	1852      	adds	r2, r2, r1
    4b34:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4b38:	4909      	ldr	r1, [pc, #36]	; (4b60 <sys_clock_set_timeout+0x60>)
    4b3a:	9001      	str	r0, [sp, #4]
    4b3c:	9100      	str	r1, [sp, #0]
    4b3e:	f143 0300 	adc.w	r3, r3, #0
    4b42:	f7ff fe97 	bl	4874 <compare_set>
}
    4b46:	b002      	add	sp, #8
    4b48:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4b4a:	4804      	ldr	r0, [pc, #16]	; (4b5c <sys_clock_set_timeout+0x5c>)
    4b4c:	e7e0      	b.n	4b10 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4b4e:	2400      	movs	r4, #0
    4b50:	e7df      	b.n	4b12 <sys_clock_set_timeout+0x12>
    4b52:	4c02      	ldr	r4, [pc, #8]	; (4b5c <sys_clock_set_timeout+0x5c>)
    4b54:	e7dd      	b.n	4b12 <sys_clock_set_timeout+0x12>
    4b56:	bf00      	nop
    4b58:	200003f8 	.word	0x200003f8
    4b5c:	007fffff 	.word	0x007fffff
    4b60:	00004761 	.word	0x00004761

00004b64 <sys_clock_elapsed>:
{
    4b64:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4b66:	f7ff fe63 	bl	4830 <z_nrf_rtc_timer_read>
    4b6a:	4b02      	ldr	r3, [pc, #8]	; (4b74 <sys_clock_elapsed+0x10>)
    4b6c:	681b      	ldr	r3, [r3, #0]
}
    4b6e:	1ac0      	subs	r0, r0, r3
    4b70:	bd08      	pop	{r3, pc}
    4b72:	bf00      	nop
    4b74:	200003f8 	.word	0x200003f8

00004b78 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b78:	6802      	ldr	r2, [r0, #0]
    switch (port)
    4b7a:	0953      	lsrs	r3, r2, #5
{
    4b7c:	b510      	push	{r4, lr}
    4b7e:	4604      	mov	r4, r0
    switch (port)
    4b80:	d02c      	beq.n	4bdc <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    4b82:	2b01      	cmp	r3, #1
    4b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4b88:	bf18      	it	ne
    4b8a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4b8c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4b90:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b92:	07db      	lsls	r3, r3, #31
    4b94:	d40b      	bmi.n	4bae <nrf_gpio_pin_port_decode+0x36>
    4b96:	4914      	ldr	r1, [pc, #80]	; (4be8 <nrf_gpio_pin_port_decode+0x70>)
    4b98:	4814      	ldr	r0, [pc, #80]	; (4bec <nrf_gpio_pin_port_decode+0x74>)
    4b9a:	4a15      	ldr	r2, [pc, #84]	; (4bf0 <nrf_gpio_pin_port_decode+0x78>)
    4b9c:	f240 2329 	movw	r3, #553	; 0x229
    4ba0:	f004 f85f 	bl	8c62 <assert_print>
    4ba4:	4812      	ldr	r0, [pc, #72]	; (4bf0 <nrf_gpio_pin_port_decode+0x78>)
    4ba6:	f240 2129 	movw	r1, #553	; 0x229
    4baa:	f004 f853 	bl	8c54 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4bae:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4bb0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bb4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4bb6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bb8:	d00d      	beq.n	4bd6 <nrf_gpio_pin_port_decode+0x5e>
    4bba:	2b01      	cmp	r3, #1
    4bbc:	d011      	beq.n	4be2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4bbe:	490d      	ldr	r1, [pc, #52]	; (4bf4 <nrf_gpio_pin_port_decode+0x7c>)
    4bc0:	480a      	ldr	r0, [pc, #40]	; (4bec <nrf_gpio_pin_port_decode+0x74>)
    4bc2:	4a0b      	ldr	r2, [pc, #44]	; (4bf0 <nrf_gpio_pin_port_decode+0x78>)
    4bc4:	f240 232e 	movw	r3, #558	; 0x22e
    4bc8:	f004 f84b 	bl	8c62 <assert_print>
    4bcc:	4808      	ldr	r0, [pc, #32]	; (4bf0 <nrf_gpio_pin_port_decode+0x78>)
    4bce:	f240 212e 	movw	r1, #558	; 0x22e
    4bd2:	f004 f83f 	bl	8c54 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4bd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4bda:	bd10      	pop	{r4, pc}
    switch (port)
    4bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4be0:	e7d4      	b.n	4b8c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    4be2:	4805      	ldr	r0, [pc, #20]	; (4bf8 <nrf_gpio_pin_port_decode+0x80>)
    4be4:	e7f9      	b.n	4bda <nrf_gpio_pin_port_decode+0x62>
    4be6:	bf00      	nop
    4be8:	0000ae82 	.word	0x0000ae82
    4bec:	00009bdf 	.word	0x00009bdf
    4bf0:	0000ae4f 	.word	0x0000ae4f
    4bf4:	00009cb5 	.word	0x00009cb5
    4bf8:	50000300 	.word	0x50000300

00004bfc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4bfe:	ab0b      	add	r3, sp, #44	; 0x2c
    4c00:	9305      	str	r3, [sp, #20]
    4c02:	9303      	str	r3, [sp, #12]
    4c04:	4b05      	ldr	r3, [pc, #20]	; (4c1c <z_log_msg2_runtime_create.constprop.0+0x20>)
    4c06:	9302      	str	r3, [sp, #8]
    4c08:	2300      	movs	r3, #0
    4c0a:	e9cd 3300 	strd	r3, r3, [sp]
    4c0e:	2201      	movs	r2, #1
    4c10:	4618      	mov	r0, r3
    4c12:	f7fd fb31 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    4c16:	b007      	add	sp, #28
    4c18:	f85d fb04 	ldr.w	pc, [sp], #4
    4c1c:	0000aefc 	.word	0x0000aefc

00004c20 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    4c22:	f7fd f8cd 	bl	1dc0 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4c26:	2400      	movs	r4, #0
    4c28:	4b06      	ldr	r3, [pc, #24]	; (4c44 <k_sys_fatal_error_handler+0x24>)
    4c2a:	9302      	str	r3, [sp, #8]
    4c2c:	4620      	mov	r0, r4
    4c2e:	e9cd 4400 	strd	r4, r4, [sp]
    4c32:	4905      	ldr	r1, [pc, #20]	; (4c48 <k_sys_fatal_error_handler+0x28>)
    4c34:	4623      	mov	r3, r4
    4c36:	2201      	movs	r2, #1
    4c38:	f7ff ffe0 	bl	4bfc <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    4c3c:	4620      	mov	r0, r4
    4c3e:	f7fe fd5d 	bl	36fc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4c42:	bf00      	nop
    4c44:	0000aefc 	.word	0x0000aefc
    4c48:	0000980c 	.word	0x0000980c

00004c4c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4c50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4c54:	2a08      	cmp	r2, #8
    4c56:	d106      	bne.n	4c66 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4c58:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4c5c:	2b05      	cmp	r3, #5
    4c5e:	d802      	bhi.n	4c66 <nrf52_errata_103+0x1a>
    4c60:	4a02      	ldr	r2, [pc, #8]	; (4c6c <nrf52_errata_103+0x20>)
    4c62:	5cd0      	ldrb	r0, [r2, r3]
    4c64:	4770      	bx	lr
        return false;
    4c66:	2000      	movs	r0, #0
}
    4c68:	4770      	bx	lr
    4c6a:	bf00      	nop
    4c6c:	0000af1f 	.word	0x0000af1f

00004c70 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4c70:	4a02      	ldr	r2, [pc, #8]	; (4c7c <nvmc_wait+0xc>)
    4c72:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4c76:	2b00      	cmp	r3, #0
    4c78:	d0fb      	beq.n	4c72 <nvmc_wait+0x2>
}
    4c7a:	4770      	bx	lr
    4c7c:	4001e000 	.word	0x4001e000

00004c80 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4c80:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4c82:	f004 fb34 	bl	92ee <nrf52_errata_136>
    4c86:	b140      	cbz	r0, 4c9a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c8c:	2200      	movs	r2, #0
    4c8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4c92:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4c96:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4c9a:	f004 fb28 	bl	92ee <nrf52_errata_136>
    4c9e:	2800      	cmp	r0, #0
    4ca0:	d046      	beq.n	4d30 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ca6:	4b60      	ldr	r3, [pc, #384]	; (4e28 <SystemInit+0x1a8>)
    4ca8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4cac:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4cb0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4cb4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4cb8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4cbc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4cc0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4cc4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4cc8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4ccc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4cd0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4cd4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4cd8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4cdc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4ce0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4ce4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4ce8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4cec:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4cf0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4cf4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4cf8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4cfc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4d00:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4d04:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4d08:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4d0c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4d10:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4d14:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4d18:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4d1c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4d20:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4d24:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4d28:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4d2c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4d30:	f7ff ff8c 	bl	4c4c <nrf52_errata_103>
    4d34:	b118      	cbz	r0, 4d3e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    4d36:	4b3d      	ldr	r3, [pc, #244]	; (4e2c <SystemInit+0x1ac>)
    4d38:	4a3d      	ldr	r2, [pc, #244]	; (4e30 <SystemInit+0x1b0>)
    4d3a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4d3e:	f7ff ff85 	bl	4c4c <nrf52_errata_103>
    4d42:	b118      	cbz	r0, 4d4c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4d44:	4b3b      	ldr	r3, [pc, #236]	; (4e34 <SystemInit+0x1b4>)
    4d46:	22fb      	movs	r2, #251	; 0xfb
    4d48:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4d4c:	f7ff ff7e 	bl	4c4c <nrf52_errata_103>
    4d50:	b170      	cbz	r0, 4d70 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4d52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4d5a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    4d5e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4d62:	f022 020f 	bic.w	r2, r2, #15
    4d66:	f003 030f 	and.w	r3, r3, #15
    4d6a:	4313      	orrs	r3, r2
    4d6c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4d70:	f7ff ff6c 	bl	4c4c <nrf52_errata_103>
    4d74:	b120      	cbz	r0, 4d80 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4d76:	4b30      	ldr	r3, [pc, #192]	; (4e38 <SystemInit+0x1b8>)
    4d78:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d7c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4d80:	f004 fab5 	bl	92ee <nrf52_errata_136>
    4d84:	b148      	cbz	r0, 4d9a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d8a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4d8e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4d90:	bf44      	itt	mi
    4d92:	f06f 0201 	mvnmi.w	r2, #1
    4d96:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4d9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4d9e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4da2:	2a08      	cmp	r2, #8
    4da4:	d10e      	bne.n	4dc4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4da6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    4daa:	2b05      	cmp	r3, #5
    4dac:	d802      	bhi.n	4db4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    4dae:	4a23      	ldr	r2, [pc, #140]	; (4e3c <SystemInit+0x1bc>)
    4db0:	5cd3      	ldrb	r3, [r2, r3]
    4db2:	b13b      	cbz	r3, 4dc4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4db4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dc0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4dc4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4dc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4dcc:	2a00      	cmp	r2, #0
    4dce:	db03      	blt.n	4dd8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4dd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4dd4:	2b00      	cmp	r3, #0
    4dd6:	da22      	bge.n	4e1e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4dd8:	4919      	ldr	r1, [pc, #100]	; (4e40 <SystemInit+0x1c0>)
    4dda:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4ddc:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4de0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4de4:	2412      	movs	r4, #18
    nvmc_wait();
    4de6:	f7ff ff43 	bl	4c70 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4dea:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4dee:	f7ff ff3f 	bl	4c70 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4df2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4df6:	f7ff ff3b 	bl	4c70 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4dfa:	2300      	movs	r3, #0
    4dfc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4e00:	f7ff ff36 	bl	4c70 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4e04:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4e08:	490e      	ldr	r1, [pc, #56]	; (4e44 <SystemInit+0x1c4>)
    4e0a:	4b0f      	ldr	r3, [pc, #60]	; (4e48 <SystemInit+0x1c8>)
    4e0c:	68ca      	ldr	r2, [r1, #12]
    4e0e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4e12:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4e14:	60cb      	str	r3, [r1, #12]
    4e16:	f3bf 8f4f 	dsb	sy
    __NOP();
    4e1a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4e1c:	e7fd      	b.n	4e1a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <SystemInit+0x1cc>)
    4e20:	4a0b      	ldr	r2, [pc, #44]	; (4e50 <SystemInit+0x1d0>)
    4e22:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4e24:	bd10      	pop	{r4, pc}
    4e26:	bf00      	nop
    4e28:	4000c000 	.word	0x4000c000
    4e2c:	40005000 	.word	0x40005000
    4e30:	00038148 	.word	0x00038148
    4e34:	4000f000 	.word	0x4000f000
    4e38:	40029000 	.word	0x40029000
    4e3c:	0000af19 	.word	0x0000af19
    4e40:	4001e000 	.word	0x4001e000
    4e44:	e000ed00 	.word	0xe000ed00
    4e48:	05fa0004 	.word	0x05fa0004
    4e4c:	200000f0 	.word	0x200000f0
    4e50:	03d09000 	.word	0x03d09000

00004e54 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4e54:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4e56:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4e58:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4e5a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    4e5e:	fab2 f382 	clz	r3, r2
    4e62:	f1c3 031f 	rsb	r3, r3, #31
    4e66:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4e68:	fa05 f403 	lsl.w	r4, r5, r3
    4e6c:	ea22 0404 	bic.w	r4, r2, r4
    4e70:	e850 6f00 	ldrex	r6, [r0]
    4e74:	4296      	cmp	r6, r2
    4e76:	d104      	bne.n	4e82 <nrfx_flag32_alloc+0x2e>
    4e78:	e840 4c00 	strex	ip, r4, [r0]
    4e7c:	f1bc 0f00 	cmp.w	ip, #0
    4e80:	d1f6      	bne.n	4e70 <nrfx_flag32_alloc+0x1c>
    4e82:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4e86:	d1e7      	bne.n	4e58 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4e88:	4801      	ldr	r0, [pc, #4]	; (4e90 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4e8a:	700b      	strb	r3, [r1, #0]
}
    4e8c:	bd70      	pop	{r4, r5, r6, pc}
    4e8e:	bf00      	nop
    4e90:	0bad0000 	.word	0x0bad0000

00004e94 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4e94:	6803      	ldr	r3, [r0, #0]
    4e96:	40cb      	lsrs	r3, r1
    4e98:	07db      	lsls	r3, r3, #31
{
    4e9a:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4e9c:	d414      	bmi.n	4ec8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4e9e:	2301      	movs	r3, #1
    4ea0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4ea2:	6802      	ldr	r2, [r0, #0]
    4ea4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4ea8:	ea43 0102 	orr.w	r1, r3, r2
    4eac:	e850 4f00 	ldrex	r4, [r0]
    4eb0:	4294      	cmp	r4, r2
    4eb2:	d104      	bne.n	4ebe <nrfx_flag32_free+0x2a>
    4eb4:	e840 1c00 	strex	ip, r1, [r0]
    4eb8:	f1bc 0f00 	cmp.w	ip, #0
    4ebc:	d1f6      	bne.n	4eac <nrfx_flag32_free+0x18>
    4ebe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4ec2:	d1ee      	bne.n	4ea2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4ec4:	4801      	ldr	r0, [pc, #4]	; (4ecc <nrfx_flag32_free+0x38>)
}
    4ec6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4ec8:	4801      	ldr	r0, [pc, #4]	; (4ed0 <nrfx_flag32_free+0x3c>)
    4eca:	e7fc      	b.n	4ec6 <nrfx_flag32_free+0x32>
    4ecc:	0bad0000 	.word	0x0bad0000
    4ed0:	0bad0004 	.word	0x0bad0004

00004ed4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4ed6:	4604      	mov	r4, r0
    4ed8:	b170      	cbz	r0, 4ef8 <clock_stop+0x24>
    4eda:	2801      	cmp	r0, #1
    4edc:	d031      	beq.n	4f42 <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4ede:	4931      	ldr	r1, [pc, #196]	; (4fa4 <clock_stop+0xd0>)
    4ee0:	4831      	ldr	r0, [pc, #196]	; (4fa8 <clock_stop+0xd4>)
    4ee2:	4a32      	ldr	r2, [pc, #200]	; (4fac <clock_stop+0xd8>)
    4ee4:	23d8      	movs	r3, #216	; 0xd8
    4ee6:	f003 febc 	bl	8c62 <assert_print>
    4eea:	4830      	ldr	r0, [pc, #192]	; (4fac <clock_stop+0xd8>)
    4eec:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4eee:	b003      	add	sp, #12
    4ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    4ef4:	f003 beae 	b.w	8c54 <assert_post_action>
    p_reg->INTENCLR = mask;
    4ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4efc:	2202      	movs	r2, #2
    4efe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f02:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4f06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f0a:	2201      	movs	r2, #1
    4f0c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4f0e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4f10:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4f12:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4f16:	bf14      	ite	ne
    4f18:	2500      	movne	r5, #0
    4f1a:	f10d 0507 	addeq.w	r5, sp, #7
    4f1e:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f22:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4f26:	b1bc      	cbz	r4, 4f58 <clock_stop+0x84>
    4f28:	2c01      	cmp	r4, #1
    4f2a:	d02c      	beq.n	4f86 <clock_stop+0xb2>
            NRFX_ASSERT(0);
    4f2c:	491d      	ldr	r1, [pc, #116]	; (4fa4 <clock_stop+0xd0>)
    4f2e:	481e      	ldr	r0, [pc, #120]	; (4fa8 <clock_stop+0xd4>)
    4f30:	4a1f      	ldr	r2, [pc, #124]	; (4fb0 <clock_stop+0xdc>)
    4f32:	f44f 734f 	mov.w	r3, #828	; 0x33c
    4f36:	f003 fe94 	bl	8c62 <assert_print>
    4f3a:	481d      	ldr	r0, [pc, #116]	; (4fb0 <clock_stop+0xdc>)
    4f3c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4f40:	e7d5      	b.n	4eee <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    4f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f46:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4f48:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4f50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f54:	6058      	str	r0, [r3, #4]
}
    4f56:	e7da      	b.n	4f0e <clock_stop+0x3a>
            if (p_clk_src != NULL)
    4f58:	b125      	cbz	r5, 4f64 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4f5a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4f5e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4f62:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f64:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4f68:	03da      	lsls	r2, r3, #15
    4f6a:	d519      	bpl.n	4fa0 <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4f6c:	b11d      	cbz	r5, 4f76 <clock_stop+0xa2>
    4f6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4f72:	2b01      	cmp	r3, #1
    4f74:	d104      	bne.n	4f80 <clock_stop+0xac>
    4f76:	2001      	movs	r0, #1
    4f78:	f004 f9c3 	bl	9302 <nrfx_busy_wait>
    4f7c:	3f01      	subs	r7, #1
    4f7e:	d1d2      	bne.n	4f26 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4f80:	2c01      	cmp	r4, #1
    4f82:	d00a      	beq.n	4f9a <clock_stop+0xc6>
    4f84:	e00c      	b.n	4fa0 <clock_stop+0xcc>
            if (p_clk_src != NULL)
    4f86:	b125      	cbz	r5, 4f92 <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4f88:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4f8c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4f90:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4f92:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4f96:	03db      	lsls	r3, r3, #15
    4f98:	d4e8      	bmi.n	4f6c <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    4f9a:	4b06      	ldr	r3, [pc, #24]	; (4fb4 <clock_stop+0xe0>)
    4f9c:	2200      	movs	r2, #0
    4f9e:	715a      	strb	r2, [r3, #5]
}
    4fa0:	b003      	add	sp, #12
    4fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fa4:	00009cb5 	.word	0x00009cb5
    4fa8:	00009bdf 	.word	0x00009bdf
    4fac:	0000af25 	.word	0x0000af25
    4fb0:	0000af62 	.word	0x0000af62
    4fb4:	20000b80 	.word	0x20000b80

00004fb8 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4fb8:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4fba:	4604      	mov	r4, r0
    4fbc:	b958      	cbnz	r0, 4fd6 <nrfx_clock_init+0x1e>
    4fbe:	490b      	ldr	r1, [pc, #44]	; (4fec <nrfx_clock_init+0x34>)
    4fc0:	480b      	ldr	r0, [pc, #44]	; (4ff0 <nrfx_clock_init+0x38>)
    4fc2:	4a0c      	ldr	r2, [pc, #48]	; (4ff4 <nrfx_clock_init+0x3c>)
    4fc4:	f240 1315 	movw	r3, #277	; 0x115
    4fc8:	f003 fe4b 	bl	8c62 <assert_print>
    4fcc:	4809      	ldr	r0, [pc, #36]	; (4ff4 <nrfx_clock_init+0x3c>)
    4fce:	f240 1115 	movw	r1, #277	; 0x115
    4fd2:	f003 fe3f 	bl	8c54 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4fd6:	4b08      	ldr	r3, [pc, #32]	; (4ff8 <nrfx_clock_init+0x40>)
    4fd8:	791a      	ldrb	r2, [r3, #4]
    4fda:	b922      	cbnz	r2, 4fe6 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4fdc:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4fde:	4807      	ldr	r0, [pc, #28]	; (4ffc <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    4fe0:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    4fe2:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4fe4:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4fe6:	4806      	ldr	r0, [pc, #24]	; (5000 <nrfx_clock_init+0x48>)
    return err_code;
    4fe8:	e7fc      	b.n	4fe4 <nrfx_clock_init+0x2c>
    4fea:	bf00      	nop
    4fec:	0000af96 	.word	0x0000af96
    4ff0:	00009bdf 	.word	0x00009bdf
    4ff4:	0000af25 	.word	0x0000af25
    4ff8:	20000b80 	.word	0x20000b80
    4ffc:	0bad0000 	.word	0x0bad0000
    5000:	0bad000c 	.word	0x0bad000c

00005004 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5004:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5006:	4b0d      	ldr	r3, [pc, #52]	; (503c <nrfx_clock_enable+0x38>)
    5008:	791b      	ldrb	r3, [r3, #4]
    500a:	b95b      	cbnz	r3, 5024 <nrfx_clock_enable+0x20>
    500c:	490c      	ldr	r1, [pc, #48]	; (5040 <nrfx_clock_enable+0x3c>)
    500e:	480d      	ldr	r0, [pc, #52]	; (5044 <nrfx_clock_enable+0x40>)
    5010:	4a0d      	ldr	r2, [pc, #52]	; (5048 <nrfx_clock_enable+0x44>)
    5012:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5016:	f003 fe24 	bl	8c62 <assert_print>
    501a:	480b      	ldr	r0, [pc, #44]	; (5048 <nrfx_clock_enable+0x44>)
    501c:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5020:	f003 fe18 	bl	8c54 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5024:	2000      	movs	r0, #0
    5026:	f7fd fd15 	bl	2a54 <arch_irq_is_enabled>
    502a:	b908      	cbnz	r0, 5030 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    502c:	f7fd fd04 	bl	2a38 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5030:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5034:	2200      	movs	r2, #0
    5036:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    503a:	bd08      	pop	{r3, pc}
    503c:	20000b80 	.word	0x20000b80
    5040:	0000afa4 	.word	0x0000afa4
    5044:	00009bdf 	.word	0x00009bdf
    5048:	0000af25 	.word	0x0000af25

0000504c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    504c:	4b2c      	ldr	r3, [pc, #176]	; (5100 <nrfx_clock_start+0xb4>)
    504e:	791b      	ldrb	r3, [r3, #4]
{
    5050:	b510      	push	{r4, lr}
    5052:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5054:	b95b      	cbnz	r3, 506e <nrfx_clock_start+0x22>
    5056:	492b      	ldr	r1, [pc, #172]	; (5104 <nrfx_clock_start+0xb8>)
    5058:	482b      	ldr	r0, [pc, #172]	; (5108 <nrfx_clock_start+0xbc>)
    505a:	4a2c      	ldr	r2, [pc, #176]	; (510c <nrfx_clock_start+0xc0>)
    505c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5060:	f003 fdff 	bl	8c62 <assert_print>
    5064:	4829      	ldr	r0, [pc, #164]	; (510c <nrfx_clock_start+0xc0>)
    5066:	f44f 71b4 	mov.w	r1, #360	; 0x168
    506a:	f003 fdf3 	bl	8c54 <assert_post_action>
    switch (domain)
    506e:	b17c      	cbz	r4, 5090 <nrfx_clock_start+0x44>
    5070:	2c01      	cmp	r4, #1
    5072:	d03a      	beq.n	50ea <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5074:	4926      	ldr	r1, [pc, #152]	; (5110 <nrfx_clock_start+0xc4>)
    5076:	4824      	ldr	r0, [pc, #144]	; (5108 <nrfx_clock_start+0xbc>)
    5078:	4a24      	ldr	r2, [pc, #144]	; (510c <nrfx_clock_start+0xc0>)
    507a:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    507e:	f003 fdf0 	bl	8c62 <assert_print>
            break;
    }
}
    5082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    5086:	4821      	ldr	r0, [pc, #132]	; (510c <nrfx_clock_start+0xc0>)
    5088:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    508c:	f003 bde2 	b.w	8c54 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5090:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5094:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5098:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    509c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    50a0:	d10b      	bne.n	50ba <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    50a2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    50a6:	07c9      	lsls	r1, r1, #31
    50a8:	d510      	bpl.n	50cc <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    50aa:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    50ae:	079b      	lsls	r3, r3, #30
    50b0:	d408      	bmi.n	50c4 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    50b2:	2302      	movs	r3, #2
    50b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    50b8:	e016      	b.n	50e8 <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    50ba:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    50be:	2b01      	cmp	r3, #1
    50c0:	d004      	beq.n	50cc <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    50c2:	b11b      	cbz	r3, 50cc <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    50c4:	2000      	movs	r0, #0
    50c6:	f7ff ff05 	bl	4ed4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    50ca:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    50cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    50d0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50d4:	2300      	movs	r3, #0
    50d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    50da:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    50de:	2302      	movs	r3, #2
    50e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50e4:	2301      	movs	r3, #1
    50e6:	6093      	str	r3, [r2, #8]
}
    50e8:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    50ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50ee:	2200      	movs	r2, #0
    50f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    50f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    50f8:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    50fc:	601c      	str	r4, [r3, #0]
}
    50fe:	e7f3      	b.n	50e8 <nrfx_clock_start+0x9c>
    5100:	20000b80 	.word	0x20000b80
    5104:	0000afa4 	.word	0x0000afa4
    5108:	00009bdf 	.word	0x00009bdf
    510c:	0000af25 	.word	0x0000af25
    5110:	00009cb5 	.word	0x00009cb5

00005114 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5114:	4b0a      	ldr	r3, [pc, #40]	; (5140 <nrfx_clock_stop+0x2c>)
    5116:	791b      	ldrb	r3, [r3, #4]
{
    5118:	b510      	push	{r4, lr}
    511a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    511c:	b95b      	cbnz	r3, 5136 <nrfx_clock_stop+0x22>
    511e:	4909      	ldr	r1, [pc, #36]	; (5144 <nrfx_clock_stop+0x30>)
    5120:	4809      	ldr	r0, [pc, #36]	; (5148 <nrfx_clock_stop+0x34>)
    5122:	4a0a      	ldr	r2, [pc, #40]	; (514c <nrfx_clock_stop+0x38>)
    5124:	f240 13ad 	movw	r3, #429	; 0x1ad
    5128:	f003 fd9b 	bl	8c62 <assert_print>
    512c:	4807      	ldr	r0, [pc, #28]	; (514c <nrfx_clock_stop+0x38>)
    512e:	f240 11ad 	movw	r1, #429	; 0x1ad
    5132:	f003 fd8f 	bl	8c54 <assert_post_action>
    clock_stop(domain);
    5136:	4620      	mov	r0, r4
}
    5138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    513c:	f7ff beca 	b.w	4ed4 <clock_stop>
    5140:	20000b80 	.word	0x20000b80
    5144:	0000afa4 	.word	0x0000afa4
    5148:	00009bdf 	.word	0x00009bdf
    514c:	0000af25 	.word	0x0000af25

00005150 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5154:	b510      	push	{r4, lr}
    5156:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    515a:	b16a      	cbz	r2, 5178 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    515c:	2200      	movs	r2, #0
    515e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5162:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5166:	2201      	movs	r2, #1
    5168:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    516c:	4b11      	ldr	r3, [pc, #68]	; (51b4 <nrfx_power_clock_irq_handler+0x64>)
    516e:	7958      	ldrb	r0, [r3, #5]
    5170:	b910      	cbnz	r0, 5178 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    5172:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5174:	681b      	ldr	r3, [r3, #0]
    5176:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    517c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5180:	b172      	cbz	r2, 51a0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5182:	2200      	movs	r2, #0
    5184:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5188:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    518c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5190:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5194:	0792      	lsls	r2, r2, #30
    5196:	d104      	bne.n	51a2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5198:	2201      	movs	r2, #1
    519a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    519e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    51a0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    51a2:	2202      	movs	r2, #2
    51a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    51a8:	4b02      	ldr	r3, [pc, #8]	; (51b4 <nrfx_power_clock_irq_handler+0x64>)
}
    51aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	2001      	movs	r0, #1
    51b2:	4718      	bx	r3
    51b4:	20000b80 	.word	0x20000b80

000051b8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    51b8:	4b03      	ldr	r3, [pc, #12]	; (51c8 <pin_in_use_by_te+0x10>)
    51ba:	3008      	adds	r0, #8
    51bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    51c4:	4770      	bx	lr
    51c6:	bf00      	nop
    51c8:	200000f4 	.word	0x200000f4

000051cc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    51cc:	4b04      	ldr	r3, [pc, #16]	; (51e0 <pin_has_trigger+0x14>)
    51ce:	3008      	adds	r0, #8
    51d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51d4:	f010 001c 	ands.w	r0, r0, #28
    51d8:	bf18      	it	ne
    51da:	2001      	movne	r0, #1
    51dc:	4770      	bx	lr
    51de:	bf00      	nop
    51e0:	200000f4 	.word	0x200000f4

000051e4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    51e4:	4b03      	ldr	r3, [pc, #12]	; (51f4 <pin_is_output+0x10>)
    51e6:	3008      	adds	r0, #8
    51e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    51ec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    51f0:	4770      	bx	lr
    51f2:	bf00      	nop
    51f4:	200000f4 	.word	0x200000f4

000051f8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    51f8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    51fa:	f100 0308 	add.w	r3, r0, #8
    51fe:	4c0c      	ldr	r4, [pc, #48]	; (5230 <call_handler+0x38>)
    5200:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5204:	05da      	lsls	r2, r3, #23
{
    5206:	4605      	mov	r5, r0
    5208:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    520a:	d507      	bpl.n	521c <call_handler+0x24>
    520c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5210:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5214:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5218:	6852      	ldr	r2, [r2, #4]
    521a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    521c:	68a3      	ldr	r3, [r4, #8]
    521e:	b12b      	cbz	r3, 522c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5220:	68e2      	ldr	r2, [r4, #12]
    5222:	4631      	mov	r1, r6
    5224:	4628      	mov	r0, r5
    }
}
    5226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    522a:	4718      	bx	r3
}
    522c:	bd70      	pop	{r4, r5, r6, pc}
    522e:	bf00      	nop
    5230:	200000f4 	.word	0x200000f4

00005234 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5234:	4a19      	ldr	r2, [pc, #100]	; (529c <release_handler+0x68>)
    5236:	3008      	adds	r0, #8
{
    5238:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    523a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    523e:	05d9      	lsls	r1, r3, #23
    5240:	d51d      	bpl.n	527e <release_handler+0x4a>
    5242:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5246:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    524a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    524e:	f102 040e 	add.w	r4, r2, #14
    5252:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5254:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5258:	f413 7f80 	tst.w	r3, #256	; 0x100
    525c:	d003      	beq.n	5266 <release_handler+0x32>
    525e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5262:	4299      	cmp	r1, r3
    5264:	d00b      	beq.n	527e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5266:	3001      	adds	r0, #1
    5268:	2830      	cmp	r0, #48	; 0x30
    526a:	d1f3      	bne.n	5254 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    526c:	2300      	movs	r3, #0
    526e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5272:	480b      	ldr	r0, [pc, #44]	; (52a0 <release_handler+0x6c>)
    5274:	f7ff fe0e 	bl	4e94 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5278:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <release_handler+0x70>)
    527a:	4298      	cmp	r0, r3
    527c:	d100      	bne.n	5280 <release_handler+0x4c>
}
    527e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5280:	4909      	ldr	r1, [pc, #36]	; (52a8 <release_handler+0x74>)
    5282:	480a      	ldr	r0, [pc, #40]	; (52ac <release_handler+0x78>)
    5284:	4a0a      	ldr	r2, [pc, #40]	; (52b0 <release_handler+0x7c>)
    5286:	f44f 7399 	mov.w	r3, #306	; 0x132
    528a:	f003 fcea 	bl	8c62 <assert_print>
}
    528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5292:	4807      	ldr	r0, [pc, #28]	; (52b0 <release_handler+0x7c>)
    5294:	f44f 7199 	mov.w	r1, #306	; 0x132
    5298:	f003 bcdc 	b.w	8c54 <assert_post_action>
    529c:	200000f4 	.word	0x200000f4
    52a0:	20000168 	.word	0x20000168
    52a4:	0bad0000 	.word	0x0bad0000
    52a8:	0000b026 	.word	0x0000b026
    52ac:	00009bdf 	.word	0x00009bdf
    52b0:	0000afc2 	.word	0x0000afc2

000052b4 <pin_handler_trigger_uninit>:
{
    52b4:	b538      	push	{r3, r4, r5, lr}
    52b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    52b8:	f7ff ff7e 	bl	51b8 <pin_in_use_by_te>
    52bc:	4c09      	ldr	r4, [pc, #36]	; (52e4 <pin_handler_trigger_uninit+0x30>)
    52be:	f102 0508 	add.w	r5, r2, #8
    52c2:	b140      	cbz	r0, 52d6 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    52c4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    52c8:	4907      	ldr	r1, [pc, #28]	; (52e8 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    52ca:	0b5b      	lsrs	r3, r3, #13
    52cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    52d0:	2000      	movs	r0, #0
    52d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    52d6:	4610      	mov	r0, r2
    52d8:	f7ff ffac 	bl	5234 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    52dc:	2300      	movs	r3, #0
    52de:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    52e2:	bd38      	pop	{r3, r4, r5, pc}
    52e4:	200000f4 	.word	0x200000f4
    52e8:	40006000 	.word	0x40006000

000052ec <nrf_gpio_pin_port_decode>:
{
    52ec:	b510      	push	{r4, lr}
    52ee:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52f0:	6800      	ldr	r0, [r0, #0]
    52f2:	f004 f808 	bl	9306 <nrf_gpio_pin_present_check>
    52f6:	b958      	cbnz	r0, 5310 <nrf_gpio_pin_port_decode+0x24>
    52f8:	4912      	ldr	r1, [pc, #72]	; (5344 <nrf_gpio_pin_port_decode+0x58>)
    52fa:	4813      	ldr	r0, [pc, #76]	; (5348 <nrf_gpio_pin_port_decode+0x5c>)
    52fc:	4a13      	ldr	r2, [pc, #76]	; (534c <nrf_gpio_pin_port_decode+0x60>)
    52fe:	f240 2329 	movw	r3, #553	; 0x229
    5302:	f003 fcae 	bl	8c62 <assert_print>
    5306:	4811      	ldr	r0, [pc, #68]	; (534c <nrf_gpio_pin_port_decode+0x60>)
    5308:	f240 2129 	movw	r1, #553	; 0x229
    530c:	f003 fca2 	bl	8c54 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5310:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5312:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5316:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5318:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    531a:	d00d      	beq.n	5338 <nrf_gpio_pin_port_decode+0x4c>
    531c:	2b01      	cmp	r3, #1
    531e:	d00e      	beq.n	533e <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    5320:	490b      	ldr	r1, [pc, #44]	; (5350 <nrf_gpio_pin_port_decode+0x64>)
    5322:	4809      	ldr	r0, [pc, #36]	; (5348 <nrf_gpio_pin_port_decode+0x5c>)
    5324:	4a09      	ldr	r2, [pc, #36]	; (534c <nrf_gpio_pin_port_decode+0x60>)
    5326:	f240 232e 	movw	r3, #558	; 0x22e
    532a:	f003 fc9a 	bl	8c62 <assert_print>
    532e:	4807      	ldr	r0, [pc, #28]	; (534c <nrf_gpio_pin_port_decode+0x60>)
    5330:	f240 212e 	movw	r1, #558	; 0x22e
    5334:	f003 fc8e 	bl	8c54 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5338:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    533c:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    533e:	4805      	ldr	r0, [pc, #20]	; (5354 <nrf_gpio_pin_port_decode+0x68>)
    5340:	e7fc      	b.n	533c <nrf_gpio_pin_port_decode+0x50>
    5342:	bf00      	nop
    5344:	0000ae82 	.word	0x0000ae82
    5348:	00009bdf 	.word	0x00009bdf
    534c:	0000ae4f 	.word	0x0000ae4f
    5350:	00009cb5 	.word	0x00009cb5
    5354:	50000300 	.word	0x50000300

00005358 <nrfx_gpiote_input_configure>:
{
    5358:	b5f0      	push	{r4, r5, r6, r7, lr}
    535a:	4604      	mov	r4, r0
    535c:	b085      	sub	sp, #20
    535e:	4617      	mov	r7, r2
    5360:	461d      	mov	r5, r3
    if (p_input_config)
    5362:	b1f1      	cbz	r1, 53a2 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    5364:	f003 ffe0 	bl	9328 <pin_is_task_output>
    5368:	b110      	cbz	r0, 5370 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    536a:	484d      	ldr	r0, [pc, #308]	; (54a0 <nrfx_gpiote_input_configure+0x148>)
}
    536c:	b005      	add	sp, #20
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5370:	460b      	mov	r3, r1
    5372:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5376:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    537a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    537e:	f10d 020f 	add.w	r2, sp, #15
    5382:	f10d 010e 	add.w	r1, sp, #14
    5386:	4620      	mov	r0, r4
    5388:	f003 ffdd 	bl	9346 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    538c:	4a45      	ldr	r2, [pc, #276]	; (54a4 <nrfx_gpiote_input_configure+0x14c>)
    538e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5392:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5396:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    539a:	f043 0301 	orr.w	r3, r3, #1
    539e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    53a2:	b197      	cbz	r7, 53ca <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    53a4:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    53a6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    53a8:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    53aa:	f7ff ff1b 	bl	51e4 <pin_is_output>
    53ae:	b180      	cbz	r0, 53d2 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    53b0:	2a00      	cmp	r2, #0
    53b2:	d1da      	bne.n	536a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    53b4:	4a3b      	ldr	r2, [pc, #236]	; (54a4 <nrfx_gpiote_input_configure+0x14c>)
    53b6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    53ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    53be:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    53c2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    53c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    53ca:	2d00      	cmp	r5, #0
    53cc:	d13d      	bne.n	544a <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    53ce:	4836      	ldr	r0, [pc, #216]	; (54a8 <nrfx_gpiote_input_configure+0x150>)
    53d0:	e7cc      	b.n	536c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    53d2:	4f34      	ldr	r7, [pc, #208]	; (54a4 <nrfx_gpiote_input_configure+0x14c>)
    53d4:	f104 0c08 	add.w	ip, r4, #8
    53d8:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    53dc:	f021 0120 	bic.w	r1, r1, #32
    53e0:	04c9      	lsls	r1, r1, #19
    53e2:	0cc9      	lsrs	r1, r1, #19
    53e4:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    53e8:	2a00      	cmp	r2, #0
    53ea:	d0e3      	beq.n	53b4 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    53ec:	2e03      	cmp	r6, #3
    53ee:	d8bc      	bhi.n	536a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    53f0:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    53f2:	b92e      	cbnz	r6, 5400 <nrfx_gpiote_input_configure+0xa8>
    53f4:	4a2d      	ldr	r2, [pc, #180]	; (54ac <nrfx_gpiote_input_configure+0x154>)
    53f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    53fa:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    53fe:	e7d9      	b.n	53b4 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5400:	009a      	lsls	r2, r3, #2
    5402:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5406:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    540a:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    540e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5412:	f020 0003 	bic.w	r0, r0, #3
    5416:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    541a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    541e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5422:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5426:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    542a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    542e:	0220      	lsls	r0, r4, #8
    5430:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5434:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5438:	ea40 000e 	orr.w	r0, r0, lr
    543c:	f041 0120 	orr.w	r1, r1, #32
    5440:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    5444:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5448:	e7b4      	b.n	53b4 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    544a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    544e:	4620      	mov	r0, r4
    5450:	f7ff fef0 	bl	5234 <release_handler>
    if (!handler)
    5454:	2e00      	cmp	r6, #0
    5456:	d0ba      	beq.n	53ce <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5458:	4d12      	ldr	r5, [pc, #72]	; (54a4 <nrfx_gpiote_input_configure+0x14c>)
    545a:	682b      	ldr	r3, [r5, #0]
    545c:	429e      	cmp	r6, r3
    545e:	d104      	bne.n	546a <nrfx_gpiote_input_configure+0x112>
    5460:	686b      	ldr	r3, [r5, #4]
    5462:	429f      	cmp	r7, r3
    5464:	d101      	bne.n	546a <nrfx_gpiote_input_configure+0x112>
    5466:	2200      	movs	r2, #0
    5468:	e00a      	b.n	5480 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    546a:	4811      	ldr	r0, [pc, #68]	; (54b0 <nrfx_gpiote_input_configure+0x158>)
    546c:	f10d 010f 	add.w	r1, sp, #15
    5470:	f7ff fcf0 	bl	4e54 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5474:	4b0c      	ldr	r3, [pc, #48]	; (54a8 <nrfx_gpiote_input_configure+0x150>)
    5476:	4298      	cmp	r0, r3
    5478:	f47f af78 	bne.w	536c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    547c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5480:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5484:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5488:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    548a:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    548c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5490:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5498:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    549c:	e797      	b.n	53ce <nrfx_gpiote_input_configure+0x76>
    549e:	bf00      	nop
    54a0:	0bad0004 	.word	0x0bad0004
    54a4:	200000f4 	.word	0x200000f4
    54a8:	0bad0000 	.word	0x0bad0000
    54ac:	40006000 	.word	0x40006000
    54b0:	20000168 	.word	0x20000168

000054b4 <nrfx_gpiote_output_configure>:
{
    54b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    54b6:	4604      	mov	r4, r0
    54b8:	b085      	sub	sp, #20
    54ba:	4615      	mov	r5, r2
    if (p_config)
    54bc:	b321      	cbz	r1, 5508 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    54be:	f7ff fe91 	bl	51e4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    54c2:	b920      	cbnz	r0, 54ce <nrfx_gpiote_output_configure+0x1a>
    54c4:	4620      	mov	r0, r4
    54c6:	f7ff fe77 	bl	51b8 <pin_in_use_by_te>
    54ca:	2800      	cmp	r0, #0
    54cc:	d15e      	bne.n	558c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    54ce:	4620      	mov	r0, r4
    54d0:	f7ff fe7c 	bl	51cc <pin_has_trigger>
    54d4:	b110      	cbz	r0, 54dc <nrfx_gpiote_output_configure+0x28>
    54d6:	784b      	ldrb	r3, [r1, #1]
    54d8:	2b01      	cmp	r3, #1
    54da:	d057      	beq.n	558c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    54dc:	2301      	movs	r3, #1
    54de:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    54e2:	2300      	movs	r3, #0
    54e4:	e9cd 1300 	strd	r1, r3, [sp]
    54e8:	1c4a      	adds	r2, r1, #1
    54ea:	1c8b      	adds	r3, r1, #2
    54ec:	4620      	mov	r0, r4
    54ee:	f10d 010f 	add.w	r1, sp, #15
    54f2:	f003 ff28 	bl	9346 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    54f6:	4a26      	ldr	r2, [pc, #152]	; (5590 <nrfx_gpiote_output_configure+0xdc>)
    54f8:	f104 0108 	add.w	r1, r4, #8
    54fc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5500:	f043 0303 	orr.w	r3, r3, #3
    5504:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5508:	b915      	cbnz	r5, 5510 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    550a:	4822      	ldr	r0, [pc, #136]	; (5594 <nrfx_gpiote_output_configure+0xe0>)
}
    550c:	b005      	add	sp, #20
    550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    5510:	4620      	mov	r0, r4
    5512:	f7ff fe67 	bl	51e4 <pin_is_output>
        if (pin_is_input(pin))
    5516:	b3c8      	cbz	r0, 558c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5518:	4e1d      	ldr	r6, [pc, #116]	; (5590 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    551a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    551e:	f104 0708 	add.w	r7, r4, #8
    5522:	4661      	mov	r1, ip
    5524:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5528:	0089      	lsls	r1, r1, #2
    552a:	f020 0020 	bic.w	r0, r0, #32
    552e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5532:	04c0      	lsls	r0, r0, #19
    5534:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5538:	0cc0      	lsrs	r0, r0, #19
    553a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    553e:	2300      	movs	r3, #0
    5540:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5544:	786a      	ldrb	r2, [r5, #1]
    5546:	2a00      	cmp	r2, #0
    5548:	d0df      	beq.n	550a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    554a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    554e:	78ad      	ldrb	r5, [r5, #2]
    5550:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5554:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5558:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    555c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5560:	0223      	lsls	r3, r4, #8
    5562:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5566:	0412      	lsls	r2, r2, #16
    5568:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    556c:	ea43 030e 	orr.w	r3, r3, lr
    5570:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5572:	052a      	lsls	r2, r5, #20
    5574:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5578:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    557c:	4313      	orrs	r3, r2
    557e:	f040 0020 	orr.w	r0, r0, #32
    5582:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5586:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    558a:	e7be      	b.n	550a <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    558c:	4802      	ldr	r0, [pc, #8]	; (5598 <nrfx_gpiote_output_configure+0xe4>)
    558e:	e7bd      	b.n	550c <nrfx_gpiote_output_configure+0x58>
    5590:	200000f4 	.word	0x200000f4
    5594:	0bad0000 	.word	0x0bad0000
    5598:	0bad0004 	.word	0x0bad0004

0000559c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    559c:	4b01      	ldr	r3, [pc, #4]	; (55a4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    559e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    55a2:	4770      	bx	lr
    55a4:	200000f4 	.word	0x200000f4

000055a8 <nrfx_gpiote_channel_get>:
{
    55a8:	b538      	push	{r3, r4, r5, lr}
    55aa:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    55ac:	460d      	mov	r5, r1
    55ae:	b959      	cbnz	r1, 55c8 <nrfx_gpiote_channel_get+0x20>
    55b0:	490c      	ldr	r1, [pc, #48]	; (55e4 <nrfx_gpiote_channel_get+0x3c>)
    55b2:	480d      	ldr	r0, [pc, #52]	; (55e8 <nrfx_gpiote_channel_get+0x40>)
    55b4:	4a0d      	ldr	r2, [pc, #52]	; (55ec <nrfx_gpiote_channel_get+0x44>)
    55b6:	f240 2335 	movw	r3, #565	; 0x235
    55ba:	f003 fb52 	bl	8c62 <assert_print>
    55be:	480b      	ldr	r0, [pc, #44]	; (55ec <nrfx_gpiote_channel_get+0x44>)
    55c0:	f240 2135 	movw	r1, #565	; 0x235
    55c4:	f003 fb46 	bl	8c54 <assert_post_action>
    if (pin_in_use_by_te(pin))
    55c8:	4620      	mov	r0, r4
    55ca:	f7ff fdf5 	bl	51b8 <pin_in_use_by_te>
    55ce:	b138      	cbz	r0, 55e0 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    55d0:	4b07      	ldr	r3, [pc, #28]	; (55f0 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    55d2:	4808      	ldr	r0, [pc, #32]	; (55f4 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    55d4:	3408      	adds	r4, #8
    55d6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    55da:	0b5b      	lsrs	r3, r3, #13
    55dc:	702b      	strb	r3, [r5, #0]
}
    55de:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    55e0:	4805      	ldr	r0, [pc, #20]	; (55f8 <nrfx_gpiote_channel_get+0x50>)
    55e2:	e7fc      	b.n	55de <nrfx_gpiote_channel_get+0x36>
    55e4:	0000b03a 	.word	0x0000b03a
    55e8:	00009bdf 	.word	0x00009bdf
    55ec:	0000afc2 	.word	0x0000afc2
    55f0:	200000f4 	.word	0x200000f4
    55f4:	0bad0000 	.word	0x0bad0000
    55f8:	0bad0004 	.word	0x0bad0004

000055fc <nrfx_gpiote_init>:
{
    55fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    55fe:	4c0f      	ldr	r4, [pc, #60]	; (563c <nrfx_gpiote_init+0x40>)
    5600:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5604:	b9bd      	cbnz	r5, 5636 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5606:	2260      	movs	r2, #96	; 0x60
    5608:	4629      	mov	r1, r5
    560a:	f104 0010 	add.w	r0, r4, #16
    560e:	f003 fc15 	bl	8e3c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5612:	2006      	movs	r0, #6
    5614:	f7fd fa10 	bl	2a38 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5618:	4b09      	ldr	r3, [pc, #36]	; (5640 <nrfx_gpiote_init+0x44>)
    return err_code;
    561a:	480a      	ldr	r0, [pc, #40]	; (5644 <nrfx_gpiote_init+0x48>)
    561c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5620:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5624:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5628:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    562c:	2301      	movs	r3, #1
    562e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5632:	6763      	str	r3, [r4, #116]	; 0x74
}
    5634:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5636:	4804      	ldr	r0, [pc, #16]	; (5648 <nrfx_gpiote_init+0x4c>)
    5638:	e7fc      	b.n	5634 <nrfx_gpiote_init+0x38>
    563a:	bf00      	nop
    563c:	200000f4 	.word	0x200000f4
    5640:	40006000 	.word	0x40006000
    5644:	0bad0000 	.word	0x0bad0000
    5648:	0bad0005 	.word	0x0bad0005

0000564c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    564c:	4b03      	ldr	r3, [pc, #12]	; (565c <nrfx_gpiote_is_init+0x10>)
    564e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5652:	3800      	subs	r0, #0
    5654:	bf18      	it	ne
    5656:	2001      	movne	r0, #1
    5658:	4770      	bx	lr
    565a:	bf00      	nop
    565c:	200000f4 	.word	0x200000f4

00005660 <nrfx_gpiote_channel_free>:
{
    5660:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5662:	4801      	ldr	r0, [pc, #4]	; (5668 <nrfx_gpiote_channel_free+0x8>)
    5664:	f7ff bc16 	b.w	4e94 <nrfx_flag32_free>
    5668:	20000164 	.word	0x20000164

0000566c <nrfx_gpiote_channel_alloc>:
{
    566c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    566e:	4801      	ldr	r0, [pc, #4]	; (5674 <nrfx_gpiote_channel_alloc+0x8>)
    5670:	f7ff bbf0 	b.w	4e54 <nrfx_flag32_alloc>
    5674:	20000164 	.word	0x20000164

00005678 <nrfx_gpiote_trigger_enable>:
{
    5678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    567a:	4604      	mov	r4, r0
    567c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    567e:	f7ff fda5 	bl	51cc <pin_has_trigger>
    5682:	b958      	cbnz	r0, 569c <nrfx_gpiote_trigger_enable+0x24>
    5684:	4930      	ldr	r1, [pc, #192]	; (5748 <nrfx_gpiote_trigger_enable+0xd0>)
    5686:	4831      	ldr	r0, [pc, #196]	; (574c <nrfx_gpiote_trigger_enable+0xd4>)
    5688:	4a31      	ldr	r2, [pc, #196]	; (5750 <nrfx_gpiote_trigger_enable+0xd8>)
    568a:	f240 33df 	movw	r3, #991	; 0x3df
    568e:	f003 fae8 	bl	8c62 <assert_print>
    5692:	482f      	ldr	r0, [pc, #188]	; (5750 <nrfx_gpiote_trigger_enable+0xd8>)
    5694:	f240 31df 	movw	r1, #991	; 0x3df
    5698:	f003 fadc 	bl	8c54 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    569c:	4620      	mov	r0, r4
    569e:	f7ff fd8b 	bl	51b8 <pin_in_use_by_te>
    56a2:	4e2c      	ldr	r6, [pc, #176]	; (5754 <nrfx_gpiote_trigger_enable+0xdc>)
    56a4:	f104 0708 	add.w	r7, r4, #8
    56a8:	b318      	cbz	r0, 56f2 <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    56aa:	4620      	mov	r0, r4
    56ac:	f7ff fd9a 	bl	51e4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56b0:	4602      	mov	r2, r0
    56b2:	b9f0      	cbnz	r0, 56f2 <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    56b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    56b8:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    56ba:	4608      	mov	r0, r1
    56bc:	f003 fe3f 	bl	933e <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    56c0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    56c4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    56c8:	601a      	str	r2, [r3, #0]
    56ca:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    56cc:	008b      	lsls	r3, r1, #2
    56ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    56d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    56d6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    56da:	f042 0201 	orr.w	r2, r2, #1
    56de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    56e2:	b125      	cbz	r5, 56ee <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    56e4:	4a1c      	ldr	r2, [pc, #112]	; (5758 <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    56e6:	2301      	movs	r3, #1
    56e8:	408b      	lsls	r3, r1
    56ea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    56ee:	b003      	add	sp, #12
    56f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    56f2:	b95d      	cbnz	r5, 570c <nrfx_gpiote_trigger_enable+0x94>
    56f4:	4919      	ldr	r1, [pc, #100]	; (575c <nrfx_gpiote_trigger_enable+0xe4>)
    56f6:	4815      	ldr	r0, [pc, #84]	; (574c <nrfx_gpiote_trigger_enable+0xd4>)
    56f8:	4a15      	ldr	r2, [pc, #84]	; (5750 <nrfx_gpiote_trigger_enable+0xd8>)
    56fa:	f240 33ee 	movw	r3, #1006	; 0x3ee
    56fe:	f003 fab0 	bl	8c62 <assert_print>
    5702:	4813      	ldr	r0, [pc, #76]	; (5750 <nrfx_gpiote_trigger_enable+0xd8>)
    5704:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5708:	f003 faa4 	bl	8c54 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    570c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5710:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5714:	2b04      	cmp	r3, #4
    5716:	d012      	beq.n	573e <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5718:	2b05      	cmp	r3, #5
    571a:	d012      	beq.n	5742 <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    571c:	a801      	add	r0, sp, #4
    571e:	9401      	str	r4, [sp, #4]
    5720:	f7ff fde4 	bl	52ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5724:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5726:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    572a:	40d9      	lsrs	r1, r3
    572c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5730:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5732:	4620      	mov	r0, r4
}
    5734:	b003      	add	sp, #12
    5736:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    573a:	f003 be51 	b.w	93e0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    573e:	2103      	movs	r1, #3
    5740:	e7f7      	b.n	5732 <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5742:	2102      	movs	r1, #2
    5744:	e7f5      	b.n	5732 <nrfx_gpiote_trigger_enable+0xba>
    5746:	bf00      	nop
    5748:	0000b044 	.word	0x0000b044
    574c:	00009bdf 	.word	0x00009bdf
    5750:	0000afc2 	.word	0x0000afc2
    5754:	200000f4 	.word	0x200000f4
    5758:	40006000 	.word	0x40006000
    575c:	0000b059 	.word	0x0000b059

00005760 <nrfx_gpiote_trigger_disable>:
{
    5760:	b508      	push	{r3, lr}
    5762:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5764:	f7ff fd28 	bl	51b8 <pin_in_use_by_te>
    5768:	b1c8      	cbz	r0, 579e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    576a:	4610      	mov	r0, r2
    576c:	f7ff fd3a 	bl	51e4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5770:	b9a8      	cbnz	r0, 579e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5772:	3208      	adds	r2, #8
    5774:	4b0d      	ldr	r3, [pc, #52]	; (57ac <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    5776:	490e      	ldr	r1, [pc, #56]	; (57b0 <nrfx_gpiote_trigger_disable+0x50>)
    5778:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    577c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    577e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5780:	409a      	lsls	r2, r3
    5782:	009b      	lsls	r3, r3, #2
    5784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5788:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    578c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5790:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5794:	f022 0203 	bic.w	r2, r2, #3
    5798:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    579c:	bd08      	pop	{r3, pc}
    579e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    57a2:	2100      	movs	r1, #0
    57a4:	4610      	mov	r0, r2
    57a6:	f003 be1b 	b.w	93e0 <nrf_gpio_cfg_sense_set>
    57aa:	bf00      	nop
    57ac:	200000f4 	.word	0x200000f4
    57b0:	40006000 	.word	0x40006000

000057b4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    57b4:	4b0e      	ldr	r3, [pc, #56]	; (57f0 <nrfx_gpiote_pin_uninit+0x3c>)
    57b6:	f100 0208 	add.w	r2, r0, #8
{
    57ba:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    57bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    57c0:	07db      	lsls	r3, r3, #31
{
    57c2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    57c4:	d511      	bpl.n	57ea <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    57c6:	f7ff ffcb 	bl	5760 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    57ca:	4620      	mov	r0, r4
    57cc:	f7ff fd72 	bl	52b4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    57d0:	a801      	add	r0, sp, #4
    57d2:	9401      	str	r4, [sp, #4]
    57d4:	f7ff fd8a 	bl	52ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    57d8:	9b01      	ldr	r3, [sp, #4]
    57da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    57de:	2202      	movs	r2, #2
    57e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    57e4:	4803      	ldr	r0, [pc, #12]	; (57f4 <nrfx_gpiote_pin_uninit+0x40>)
}
    57e6:	b002      	add	sp, #8
    57e8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57ea:	4803      	ldr	r0, [pc, #12]	; (57f8 <nrfx_gpiote_pin_uninit+0x44>)
    57ec:	e7fb      	b.n	57e6 <nrfx_gpiote_pin_uninit+0x32>
    57ee:	bf00      	nop
    57f0:	200000f4 	.word	0x200000f4
    57f4:	0bad0000 	.word	0x0bad0000
    57f8:	0bad0004 	.word	0x0bad0004

000057fc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    57fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5800:	4b65      	ldr	r3, [pc, #404]	; (5998 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5802:	4866      	ldr	r0, [pc, #408]	; (599c <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5804:	4966      	ldr	r1, [pc, #408]	; (59a0 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5806:	2600      	movs	r6, #0
{
    5808:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    580a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    580c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    580e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5810:	b135      	cbz	r5, 5820 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5812:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5816:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5818:	bf1e      	ittt	ne
    581a:	601c      	strne	r4, [r3, #0]
    581c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    581e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5820:	3304      	adds	r3, #4
    5822:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5824:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5828:	d1f1      	bne.n	580e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    582a:	f8df 8170 	ldr.w	r8, [pc, #368]	; 599c <nrfx_gpiote_irq_handler+0x1a0>
    582e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5832:	2b00      	cmp	r3, #0
    5834:	f000 8093 	beq.w	595e <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    5838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    583c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5840:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5842:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5846:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    584a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    584c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5850:	2700      	movs	r7, #0
            while (latch[i])
    5852:	f10d 0910 	add.w	r9, sp, #16
    5856:	017b      	lsls	r3, r7, #5
    5858:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    585a:	f04f 0a01 	mov.w	sl, #1
    585e:	e04b      	b.n	58f8 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5860:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5862:	4a50      	ldr	r2, [pc, #320]	; (59a4 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5864:	fa94 f4a4 	rbit	r4, r4
    5868:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    586c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    586e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5870:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    5874:	f004 0c07 	and.w	ip, r4, #7
    5878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    587c:	f819 2000 	ldrb.w	r2, [r9, r0]
    5880:	9403      	str	r4, [sp, #12]
    5882:	fa0a fc0c 	lsl.w	ip, sl, ip
    5886:	ea22 020c 	bic.w	r2, r2, ip
    588a:	0899      	lsrs	r1, r3, #2
    588c:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5890:	a803      	add	r0, sp, #12
    5892:	f3c3 0582 	ubfx	r5, r3, #2, #3
    5896:	9101      	str	r1, [sp, #4]
    5898:	f7ff fd28 	bl	52ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    589c:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    589e:	9901      	ldr	r1, [sp, #4]
    58a0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    58a4:	074b      	lsls	r3, r1, #29
    58a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    58aa:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    58ac:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    58b0:	d529      	bpl.n	5906 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    58b2:	4659      	mov	r1, fp
    58b4:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    58b6:	b2d5      	uxtb	r5, r2
    58b8:	f7ff fc9e 	bl	51f8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    58bc:	a803      	add	r0, sp, #12
    58be:	9403      	str	r4, [sp, #12]
    58c0:	f7ff fd14 	bl	52ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    58c4:	9b03      	ldr	r3, [sp, #12]
    58c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    58ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    58ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
    58d2:	429d      	cmp	r5, r3
    58d4:	d107      	bne.n	58e6 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    58d6:	2100      	movs	r1, #0
    58d8:	4620      	mov	r0, r4
    58da:	f003 fd81 	bl	93e0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    58de:	4629      	mov	r1, r5
    58e0:	4620      	mov	r0, r4
    58e2:	f003 fd7d 	bl	93e0 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    58e6:	a803      	add	r0, sp, #12
    58e8:	9403      	str	r4, [sp, #12]
    58ea:	f7ff fcff 	bl	52ec <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    58ee:	9b03      	ldr	r3, [sp, #12]
    58f0:	fa0a f303 	lsl.w	r3, sl, r3
    58f4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    58f8:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    58fc:	2c00      	cmp	r4, #0
    58fe:	d1af      	bne.n	5860 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5900:	b9cf      	cbnz	r7, 5936 <nrfx_gpiote_irq_handler+0x13a>
    5902:	2701      	movs	r7, #1
    5904:	e7a7      	b.n	5856 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5906:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5908:	bf0c      	ite	eq
    590a:	2103      	moveq	r1, #3
    590c:	2102      	movne	r1, #2
    590e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5910:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5912:	f003 fd65 	bl	93e0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5916:	2d03      	cmp	r5, #3
    5918:	d004      	beq.n	5924 <nrfx_gpiote_irq_handler+0x128>
    591a:	9a01      	ldr	r2, [sp, #4]
    591c:	2a02      	cmp	r2, #2
    591e:	d106      	bne.n	592e <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5920:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5922:	d1e0      	bne.n	58e6 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5924:	4659      	mov	r1, fp
    5926:	4620      	mov	r0, r4
    5928:	f7ff fc66 	bl	51f8 <call_handler>
    592c:	e7db      	b.n	58e6 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    592e:	2a03      	cmp	r2, #3
    5930:	d1d9      	bne.n	58e6 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5932:	2d02      	cmp	r5, #2
    5934:	e7f5      	b.n	5922 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    5936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    593a:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    593e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
    5942:	4919      	ldr	r1, [pc, #100]	; (59a8 <nrfx_gpiote_irq_handler+0x1ac>)
    5944:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5948:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    594a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    594e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5952:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5954:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5956:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    595a:	f47f af79 	bne.w	5850 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    595e:	2401      	movs	r4, #1
    while (mask)
    5960:	b916      	cbnz	r6, 5968 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5962:	b007      	add	sp, #28
    5964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5968:	fa96 f3a6 	rbit	r3, r6
    596c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5970:	fa04 f203 	lsl.w	r2, r4, r3
    5974:	009b      	lsls	r3, r3, #2
    5976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    597a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    597e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5982:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5986:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    598a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    598e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5992:	f7ff fc31 	bl	51f8 <call_handler>
    5996:	e7e3      	b.n	5960 <nrfx_gpiote_irq_handler+0x164>
    5998:	40006100 	.word	0x40006100
    599c:	40006000 	.word	0x40006000
    59a0:	40006120 	.word	0x40006120
    59a4:	200000f4 	.word	0x200000f4
    59a8:	50000300 	.word	0x50000300

000059ac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    59ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    59ae:	4801      	ldr	r0, [pc, #4]	; (59b4 <nrfx_ppi_channel_alloc+0x8>)
    59b0:	f7ff ba50 	b.w	4e54 <nrfx_flag32_alloc>
    59b4:	20000170 	.word	0x20000170

000059b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    59b8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    59ba:	4c11      	ldr	r4, [pc, #68]	; (5a00 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    59bc:	4a11      	ldr	r2, [pc, #68]	; (5a04 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    59be:	4912      	ldr	r1, [pc, #72]	; (5a08 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    59c0:	2303      	movs	r3, #3
    59c2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    59c4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    59c6:	4b11      	ldr	r3, [pc, #68]	; (5a0c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    59c8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    59ca:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    59cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    59d0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    59d2:	2300      	movs	r3, #0
    59d4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    59d6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    59d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    59da:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    59dc:	4a0c      	ldr	r2, [pc, #48]	; (5a10 <_DoInit+0x58>)
    59de:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    59e0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    59e2:	2210      	movs	r2, #16
    59e4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    59e6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    59e8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    59ea:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    59ec:	f003 f9f5 	bl	8dda <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    59f0:	4908      	ldr	r1, [pc, #32]	; (5a14 <_DoInit+0x5c>)
    59f2:	4620      	mov	r0, r4
    59f4:	f003 f9f1 	bl	8dda <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    59f8:	2320      	movs	r3, #32
    59fa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    59fc:	bd10      	pop	{r4, pc}
    59fe:	bf00      	nop
    5a00:	20000b88 	.word	0x20000b88
    5a04:	0000b064 	.word	0x0000b064
    5a08:	0000b06d 	.word	0x0000b06d
    5a0c:	20000e82 	.word	0x20000e82
    5a10:	20000e72 	.word	0x20000e72
    5a14:	0000b071 	.word	0x0000b071

00005a18 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5a1c:	4f24      	ldr	r7, [pc, #144]	; (5ab0 <SEGGER_RTT_WriteSkipNoLock+0x98>)
    5a1e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a22:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5a24:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a28:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5a2a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5a2c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5a2e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5a30:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5a32:	d836      	bhi.n	5aa2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5a34:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5a38:	ebaa 0905 	sub.w	r9, sl, r5
    5a3c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5a40:	4294      	cmp	r4, r2
    5a42:	d812      	bhi.n	5a6a <SEGGER_RTT_WriteSkipNoLock+0x52>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a44:	f04f 0918 	mov.w	r9, #24
    5a48:	fb06 9309 	mla	r3, r6, r9, r9
    5a4c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    5a4e:	fb09 7906 	mla	r9, r9, r6, r7
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a52:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5a54:	4622      	mov	r2, r4
    5a56:	4641      	mov	r1, r8
    5a58:	4428      	add	r0, r5
      pRing->WrOff = WrOff + NumBytes;
    5a5a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, NumBytes);
    5a5c:	f003 f9e3 	bl	8e26 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    5a60:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
      return 1;
    5a64:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5a6a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5a6c:	429c      	cmp	r4, r3
    5a6e:	d81c      	bhi.n	5aaa <SEGGER_RTT_WriteSkipNoLock+0x92>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a70:	fb00 bb0b 	mla	fp, r0, fp, fp
    5a74:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5a76:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5a78:	f8db 0004 	ldr.w	r0, [fp, #4]
    5a7c:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5a7e:	4428      	add	r0, r5
    5a80:	f003 f9d1 	bl	8e26 <memcpy>
      if (NumBytes) {
    5a84:	ebb4 040a 	subs.w	r4, r4, sl
    5a88:	d006      	beq.n	5a98 <SEGGER_RTT_WriteSkipNoLock+0x80>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5a8a:	f8db 0004 	ldr.w	r0, [fp, #4]
    5a8e:	4622      	mov	r2, r4
    5a90:	eb08 0109 	add.w	r1, r8, r9
    5a94:	f003 f9c7 	bl	8e26 <memcpy>
      pRing->WrOff = NumBytes;
    5a98:	2318      	movs	r3, #24
    5a9a:	fb03 7306 	mla	r3, r3, r6, r7
    5a9e:	625c      	str	r4, [r3, #36]	; 0x24
    5aa0:	e7e0      	b.n	5a64 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    Avail = RdOff - WrOff - 1u;
    5aa2:	3b01      	subs	r3, #1
    5aa4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5aa6:	42a3      	cmp	r3, r4
    5aa8:	d2cc      	bcs.n	5a44 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5aaa:	2000      	movs	r0, #0
    5aac:	e7db      	b.n	5a66 <SEGGER_RTT_WriteSkipNoLock+0x4e>
    5aae:	bf00      	nop
    5ab0:	20000b88 	.word	0x20000b88

00005ab4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5ab4:	4b03      	ldr	r3, [pc, #12]	; (5ac4 <SEGGER_RTT_HasDataUp+0x10>)
    5ab6:	2218      	movs	r2, #24
    5ab8:	fb02 3300 	mla	r3, r2, r0, r3
    5abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5abe:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5ac0:	1a80      	subs	r0, r0, r2
    5ac2:	4770      	bx	lr
    5ac4:	20000b88 	.word	0x20000b88

00005ac8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5ac8:	4b0e      	ldr	r3, [pc, #56]	; (5b04 <z_sys_init_run_level+0x3c>)
{
    5aca:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5acc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5ad0:	3001      	adds	r0, #1
    5ad2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5ad6:	42a6      	cmp	r6, r4
    5ad8:	d800      	bhi.n	5adc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5ada:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5adc:	e9d4 3500 	ldrd	r3, r5, [r4]
    5ae0:	4628      	mov	r0, r5
    5ae2:	4798      	blx	r3
		if (dev != NULL) {
    5ae4:	b165      	cbz	r5, 5b00 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5ae6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5ae8:	b130      	cbz	r0, 5af8 <z_sys_init_run_level+0x30>
				dev->state->init_res = rc;
    5aea:	2800      	cmp	r0, #0
    5aec:	bfb8      	it	lt
    5aee:	4240      	neglt	r0, r0
    5af0:	28ff      	cmp	r0, #255	; 0xff
    5af2:	bfa8      	it	ge
    5af4:	20ff      	movge	r0, #255	; 0xff
    5af6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5af8:	785a      	ldrb	r2, [r3, #1]
    5afa:	f042 0201 	orr.w	r2, r2, #1
    5afe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5b00:	3408      	adds	r4, #8
    5b02:	e7e8      	b.n	5ad6 <z_sys_init_run_level+0xe>
    5b04:	00009ab4 	.word	0x00009ab4

00005b08 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5b08:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5b0a:	4605      	mov	r5, r0
    5b0c:	b910      	cbnz	r0, 5b14 <z_impl_device_get_binding+0xc>
		return NULL;
    5b0e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5b10:	4620      	mov	r0, r4
    5b12:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5b14:	7803      	ldrb	r3, [r0, #0]
    5b16:	2b00      	cmp	r3, #0
    5b18:	d0f9      	beq.n	5b0e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b1a:	4c0e      	ldr	r4, [pc, #56]	; (5b54 <z_impl_device_get_binding+0x4c>)
    5b1c:	4e0e      	ldr	r6, [pc, #56]	; (5b58 <z_impl_device_get_binding+0x50>)
    5b1e:	42b4      	cmp	r4, r6
    5b20:	d108      	bne.n	5b34 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b22:	4c0c      	ldr	r4, [pc, #48]	; (5b54 <z_impl_device_get_binding+0x4c>)
    5b24:	42b4      	cmp	r4, r6
    5b26:	d0f2      	beq.n	5b0e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5b28:	4620      	mov	r0, r4
    5b2a:	f003 fc70 	bl	940e <z_device_is_ready>
    5b2e:	b950      	cbnz	r0, 5b46 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b30:	3418      	adds	r4, #24
    5b32:	e7f7      	b.n	5b24 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5b34:	4620      	mov	r0, r4
    5b36:	f003 fc6a 	bl	940e <z_device_is_ready>
    5b3a:	b110      	cbz	r0, 5b42 <z_impl_device_get_binding+0x3a>
    5b3c:	6823      	ldr	r3, [r4, #0]
    5b3e:	42ab      	cmp	r3, r5
    5b40:	d0e6      	beq.n	5b10 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5b42:	3418      	adds	r4, #24
    5b44:	e7eb      	b.n	5b1e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5b46:	6821      	ldr	r1, [r4, #0]
    5b48:	4628      	mov	r0, r5
    5b4a:	f003 f960 	bl	8e0e <strcmp>
    5b4e:	2800      	cmp	r0, #0
    5b50:	d1ee      	bne.n	5b30 <z_impl_device_get_binding+0x28>
    5b52:	e7dd      	b.n	5b10 <z_impl_device_get_binding+0x8>
    5b54:	000095ec 	.word	0x000095ec
    5b58:	0000967c 	.word	0x0000967c

00005b5c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b60:	4605      	mov	r5, r0
    5b62:	b086      	sub	sp, #24
    5b64:	460f      	mov	r7, r1
	__asm__ volatile(
    5b66:	f04f 0340 	mov.w	r3, #64	; 0x40
    5b6a:	f3ef 8811 	mrs	r8, BASEPRI
    5b6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b72:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5b76:	f001 fee9 	bl	794c <z_impl_z_current_get>
    5b7a:	2d04      	cmp	r5, #4
    5b7c:	bf96      	itet	ls
    5b7e:	4b29      	ldrls	r3, [pc, #164]	; (5c24 <z_fatal_error+0xc8>)
    5b80:	4b29      	ldrhi	r3, [pc, #164]	; (5c28 <z_fatal_error+0xcc>)
    5b82:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5b86:	4929      	ldr	r1, [pc, #164]	; (5c2c <z_fatal_error+0xd0>)
    5b88:	9503      	str	r5, [sp, #12]
    5b8a:	2400      	movs	r4, #0
    5b8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5b90:	4b27      	ldr	r3, [pc, #156]	; (5c30 <z_fatal_error+0xd4>)
    5b92:	9400      	str	r4, [sp, #0]
    5b94:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5b98:	4606      	mov	r6, r0
    5b9a:	4623      	mov	r3, r4
    5b9c:	2201      	movs	r2, #1
    5b9e:	4620      	mov	r0, r4
    5ba0:	f003 fc3f 	bl	9422 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5ba4:	b16f      	cbz	r7, 5bc2 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5ba6:	69fb      	ldr	r3, [r7, #28]
    5ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5bac:	b14b      	cbz	r3, 5bc2 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    5bae:	4b21      	ldr	r3, [pc, #132]	; (5c34 <z_fatal_error+0xd8>)
    5bb0:	491e      	ldr	r1, [pc, #120]	; (5c2c <z_fatal_error+0xd0>)
    5bb2:	9400      	str	r4, [sp, #0]
    5bb4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5bb8:	2201      	movs	r2, #1
    5bba:	4623      	mov	r3, r4
    5bbc:	4620      	mov	r0, r4
    5bbe:	f003 fc30 	bl	9422 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5bc2:	b12e      	cbz	r6, 5bd0 <z_fatal_error+0x74>
    5bc4:	4630      	mov	r0, r6
    5bc6:	f003 fc62 	bl	948e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5bca:	b108      	cbz	r0, 5bd0 <z_fatal_error+0x74>
    5bcc:	7803      	ldrb	r3, [r0, #0]
    5bce:	b903      	cbnz	r3, 5bd2 <z_fatal_error+0x76>
		thread_name = "unknown";
    5bd0:	4819      	ldr	r0, [pc, #100]	; (5c38 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5bd2:	4b1a      	ldr	r3, [pc, #104]	; (5c3c <z_fatal_error+0xe0>)
    5bd4:	9302      	str	r3, [sp, #8]
    5bd6:	2300      	movs	r3, #0
    5bd8:	e9cd 6003 	strd	r6, r0, [sp, #12]
    5bdc:	e9cd 3300 	strd	r3, r3, [sp]
    5be0:	4618      	mov	r0, r3
    5be2:	4912      	ldr	r1, [pc, #72]	; (5c2c <z_fatal_error+0xd0>)
    5be4:	2201      	movs	r2, #1
    5be6:	f003 fc1c 	bl	9422 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5bea:	4639      	mov	r1, r7
    5bec:	4628      	mov	r0, r5
    5bee:	f7ff f817 	bl	4c20 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5bf2:	2d04      	cmp	r5, #4
    5bf4:	d10c      	bne.n	5c10 <z_fatal_error+0xb4>
    5bf6:	4912      	ldr	r1, [pc, #72]	; (5c40 <z_fatal_error+0xe4>)
    5bf8:	4a12      	ldr	r2, [pc, #72]	; (5c44 <z_fatal_error+0xe8>)
    5bfa:	4813      	ldr	r0, [pc, #76]	; (5c48 <z_fatal_error+0xec>)
    5bfc:	238f      	movs	r3, #143	; 0x8f
    5bfe:	f003 f830 	bl	8c62 <assert_print>
    5c02:	4812      	ldr	r0, [pc, #72]	; (5c4c <z_fatal_error+0xf0>)
    5c04:	f003 f82d 	bl	8c62 <assert_print>
    5c08:	480e      	ldr	r0, [pc, #56]	; (5c44 <z_fatal_error+0xe8>)
    5c0a:	218f      	movs	r1, #143	; 0x8f
    5c0c:	f003 f822 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    5c10:	f388 8811 	msr	BASEPRI, r8
    5c14:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5c18:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5c1a:	b006      	add	sp, #24
    5c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5c20:	f7fd bbd8 	b.w	33d4 <z_impl_k_thread_abort>
    5c24:	00009acc 	.word	0x00009acc
    5c28:	0000b078 	.word	0x0000b078
    5c2c:	0000982c 	.word	0x0000982c
    5c30:	0000b08e 	.word	0x0000b08e
    5c34:	0000b0b6 	.word	0x0000b0b6
    5c38:	0000b086 	.word	0x0000b086
    5c3c:	0000b0d7 	.word	0x0000b0d7
    5c40:	0000b111 	.word	0x0000b111
    5c44:	0000b0ef 	.word	0x0000b0ef
    5c48:	00009bdf 	.word	0x00009bdf
    5c4c:	0000b12e 	.word	0x0000b12e

00005c50 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5c50:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5c52:	4b0a      	ldr	r3, [pc, #40]	; (5c7c <bg_thread_main+0x2c>)
    5c54:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5c56:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5c58:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5c5a:	f7ff ff35 	bl	5ac8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5c5e:	f002 fb53 	bl	8308 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5c62:	2003      	movs	r0, #3
    5c64:	f7ff ff30 	bl	5ac8 <z_sys_init_run_level>

	z_init_static_threads();
    5c68:	f000 fa7e 	bl	6168 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5c6c:	f7fa fdd2 	bl	814 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5c70:	4a03      	ldr	r2, [pc, #12]	; (5c80 <bg_thread_main+0x30>)
    5c72:	7b13      	ldrb	r3, [r2, #12]
    5c74:	f023 0301 	bic.w	r3, r3, #1
    5c78:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5c7a:	bd08      	pop	{r3, pc}
    5c7c:	20001282 	.word	0x20001282
    5c80:	20000480 	.word	0x20000480

00005c84 <z_bss_zero>:
{
    5c84:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5c86:	4803      	ldr	r0, [pc, #12]	; (5c94 <z_bss_zero+0x10>)
    5c88:	4a03      	ldr	r2, [pc, #12]	; (5c98 <z_bss_zero+0x14>)
    5c8a:	2100      	movs	r1, #0
    5c8c:	1a12      	subs	r2, r2, r0
    5c8e:	f003 fbd8 	bl	9442 <z_early_memset>
}
    5c92:	bd08      	pop	{r3, pc}
    5c94:	20000260 	.word	0x20000260
    5c98:	20001284 	.word	0x20001284

00005c9c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5c9c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5c9e:	2300      	movs	r3, #0
{
    5ca0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5ca2:	2201      	movs	r2, #1
    5ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5ca8:	4e13      	ldr	r6, [pc, #76]	; (5cf8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5caa:	4d14      	ldr	r5, [pc, #80]	; (5cfc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5cac:	9301      	str	r3, [sp, #4]
    5cae:	220f      	movs	r2, #15
    5cb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5cb4:	4912      	ldr	r1, [pc, #72]	; (5d00 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5cb6:	2318      	movs	r3, #24
    5cb8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5cbc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5cc0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5cc2:	f44f 70b0 	mov.w	r0, #352	; 0x160
    5cc6:	fb00 1104 	mla	r1, r0, r4, r1
    5cca:	4b0e      	ldr	r3, [pc, #56]	; (5d04 <z_init_cpu+0x68>)
    5ccc:	9500      	str	r5, [sp, #0]
    5cce:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5cd2:	4630      	mov	r0, r6
    5cd4:	f000 f994 	bl	6000 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5cd8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5cda:	60ee      	str	r6, [r5, #12]
    5cdc:	f023 0304 	bic.w	r3, r3, #4
    5ce0:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5ce2:	4b09      	ldr	r3, [pc, #36]	; (5d08 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    5ce4:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5ce6:	f44f 6202 	mov.w	r2, #2080	; 0x820
    5cea:	fb02 3304 	mla	r3, r2, r4, r3
    5cee:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
    5cf0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5cf2:	b006      	add	sp, #24
    5cf4:	bd70      	pop	{r4, r5, r6, pc}
    5cf6:	bf00      	nop
    5cf8:	20000400 	.word	0x20000400
    5cfc:	20000c30 	.word	0x20000c30
    5d00:	20002320 	.word	0x20002320
    5d04:	000062c5 	.word	0x000062c5
    5d08:	20002480 	.word	0x20002480

00005d0c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5d0c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5d0e:	4b30      	ldr	r3, [pc, #192]	; (5dd0 <z_cstart+0xc4>)
    5d10:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5d12:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5d16:	4d2f      	ldr	r5, [pc, #188]	; (5dd4 <z_cstart+0xc8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5d18:	4e2f      	ldr	r6, [pc, #188]	; (5dd8 <z_cstart+0xcc>)
    5d1a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d1c:	4f2f      	ldr	r7, [pc, #188]	; (5ddc <z_cstart+0xd0>)
    5d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5d22:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5d24:	23e0      	movs	r3, #224	; 0xe0
    5d26:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5d2a:	2400      	movs	r4, #0
    5d2c:	2320      	movs	r3, #32
    5d2e:	77eb      	strb	r3, [r5, #31]
    5d30:	762c      	strb	r4, [r5, #24]
    5d32:	766c      	strb	r4, [r5, #25]
    5d34:	76ac      	strb	r4, [r5, #26]
    5d36:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5d3c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5d40:	626b      	str	r3, [r5, #36]	; 0x24
    5d42:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5d46:	f7fd fab9 	bl	32bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5d4a:	f7fc fe07 	bl	295c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d52:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5d54:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    5d56:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5d58:	f7fd fc38 	bl	35cc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5d5c:	f7fd fb50 	bl	3400 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5d60:	f7fb ffda 	bl	1d18 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5d64:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    5d68:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    5d6a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    5d6e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    5d72:	f002 fac3 	bl	82fc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    5d76:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5d78:	f003 fb48 	bl	940c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5d7c:	4620      	mov	r0, r4
    5d7e:	f7ff fea3 	bl	5ac8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5d82:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5d84:	4d16      	ldr	r5, [pc, #88]	; (5de0 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5d86:	f7ff fe9f 	bl	5ac8 <z_sys_init_run_level>
	z_sched_init();
    5d8a:	f001 fc55 	bl	7638 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d8e:	4b15      	ldr	r3, [pc, #84]	; (5de4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5d90:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5d92:	9305      	str	r3, [sp, #20]
    5d94:	2301      	movs	r3, #1
    5d96:	4914      	ldr	r1, [pc, #80]	; (5de8 <z_cstart+0xdc>)
    5d98:	9400      	str	r4, [sp, #0]
    5d9a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5da2:	463b      	mov	r3, r7
    5da4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5da8:	4628      	mov	r0, r5
    5daa:	f000 f929 	bl	6000 <z_setup_new_thread>
    5dae:	7b6a      	ldrb	r2, [r5, #13]
    5db0:	4606      	mov	r6, r0
    5db2:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    5db6:	4628      	mov	r0, r5
    5db8:	736a      	strb	r2, [r5, #13]
    5dba:	f001 f847 	bl	6e4c <z_ready_thread>
	z_init_cpu(0);
    5dbe:	4620      	mov	r0, r4
    5dc0:	f7ff ff6c 	bl	5c9c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5dc4:	463a      	mov	r2, r7
    5dc6:	4631      	mov	r1, r6
    5dc8:	4628      	mov	r0, r5
    5dca:	f7fc ff2f 	bl	2c2c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5dce:	bf00      	nop
    5dd0:	20002ca0 	.word	0x20002ca0
    5dd4:	e000ed00 	.word	0xe000ed00
    5dd8:	20000c30 	.word	0x20000c30
    5ddc:	00005c51 	.word	0x00005c51
    5de0:	20000480 	.word	0x20000480
    5de4:	0000b1ad 	.word	0x0000b1ad
    5de8:	20001f00 	.word	0x20001f00

00005dec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5dee:	4c16      	ldr	r4, [pc, #88]	; (5e48 <init_mem_slab_module+0x5c>)
    5df0:	4d16      	ldr	r5, [pc, #88]	; (5e4c <init_mem_slab_module+0x60>)
    5df2:	4e17      	ldr	r6, [pc, #92]	; (5e50 <init_mem_slab_module+0x64>)
    5df4:	42ac      	cmp	r4, r5
    5df6:	d90c      	bls.n	5e12 <init_mem_slab_module+0x26>
    5df8:	4916      	ldr	r1, [pc, #88]	; (5e54 <init_mem_slab_module+0x68>)
    5dfa:	4817      	ldr	r0, [pc, #92]	; (5e58 <init_mem_slab_module+0x6c>)
    5dfc:	233d      	movs	r3, #61	; 0x3d
    5dfe:	4632      	mov	r2, r6
    5e00:	f002 ff2f 	bl	8c62 <assert_print>
    5e04:	4815      	ldr	r0, [pc, #84]	; (5e5c <init_mem_slab_module+0x70>)
    5e06:	f002 ff2c 	bl	8c62 <assert_print>
    5e0a:	213d      	movs	r1, #61	; 0x3d
    5e0c:	4630      	mov	r0, r6
    5e0e:	f002 ff21 	bl	8c54 <assert_post_action>
    5e12:	42ac      	cmp	r4, r5
    5e14:	d301      	bcc.n	5e1a <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5e16:	2000      	movs	r0, #0
	return rc;
}
    5e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5e1a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5e1e:	ea41 0302 	orr.w	r3, r1, r2
    5e22:	f013 0303 	ands.w	r3, r3, #3
    5e26:	d10b      	bne.n	5e40 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    5e28:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5e2a:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5e2c:	4283      	cmp	r3, r0
    5e2e:	d101      	bne.n	5e34 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5e30:	3420      	adds	r4, #32
    5e32:	e7df      	b.n	5df4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    5e34:	69a7      	ldr	r7, [r4, #24]
    5e36:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5e38:	3301      	adds	r3, #1
		slab->free_list = p;
    5e3a:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5e3c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5e3e:	e7f5      	b.n	5e2c <init_mem_slab_module+0x40>
	return rc;
    5e40:	f06f 0015 	mvn.w	r0, #21
    5e44:	e7e8      	b.n	5e18 <init_mem_slab_module+0x2c>
    5e46:	bf00      	nop
    5e48:	200001f4 	.word	0x200001f4
    5e4c:	200001f4 	.word	0x200001f4
    5e50:	0000b1b5 	.word	0x0000b1b5
    5e54:	0000b1da 	.word	0x0000b1da
    5e58:	00009bdf 	.word	0x00009bdf
    5e5c:	0000b1f7 	.word	0x0000b1f7

00005e60 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e64:	4604      	mov	r4, r0
    5e66:	460e      	mov	r6, r1
    5e68:	4690      	mov	r8, r2
    5e6a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5e6c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5e70:	f04f 0340 	mov.w	r3, #64	; 0x40
    5e74:	f3ef 8911 	mrs	r9, BASEPRI
    5e78:	f383 8812 	msr	BASEPRI_MAX, r3
    5e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e80:	4628      	mov	r0, r5
    5e82:	f000 f9f9 	bl	6278 <z_spin_lock_valid>
    5e86:	b968      	cbnz	r0, 5ea4 <k_mem_slab_alloc+0x44>
    5e88:	4a24      	ldr	r2, [pc, #144]	; (5f1c <k_mem_slab_alloc+0xbc>)
    5e8a:	4925      	ldr	r1, [pc, #148]	; (5f20 <k_mem_slab_alloc+0xc0>)
    5e8c:	4825      	ldr	r0, [pc, #148]	; (5f24 <k_mem_slab_alloc+0xc4>)
    5e8e:	238e      	movs	r3, #142	; 0x8e
    5e90:	f002 fee7 	bl	8c62 <assert_print>
    5e94:	4824      	ldr	r0, [pc, #144]	; (5f28 <k_mem_slab_alloc+0xc8>)
    5e96:	4629      	mov	r1, r5
    5e98:	f002 fee3 	bl	8c62 <assert_print>
    5e9c:	481f      	ldr	r0, [pc, #124]	; (5f1c <k_mem_slab_alloc+0xbc>)
    5e9e:	218e      	movs	r1, #142	; 0x8e
    5ea0:	f002 fed8 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    5ea4:	4628      	mov	r0, r5
    5ea6:	f000 fa05 	bl	62b4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5eaa:	69a3      	ldr	r3, [r4, #24]
    5eac:	b1eb      	cbz	r3, 5eea <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5eae:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5eb0:	681b      	ldr	r3, [r3, #0]
    5eb2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5eb4:	69e3      	ldr	r3, [r4, #28]
    5eb6:	3301      	adds	r3, #1
    5eb8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5eba:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ebc:	4628      	mov	r0, r5
    5ebe:	f000 f9e9 	bl	6294 <z_spin_unlock_valid>
    5ec2:	b968      	cbnz	r0, 5ee0 <k_mem_slab_alloc+0x80>
    5ec4:	4a15      	ldr	r2, [pc, #84]	; (5f1c <k_mem_slab_alloc+0xbc>)
    5ec6:	4919      	ldr	r1, [pc, #100]	; (5f2c <k_mem_slab_alloc+0xcc>)
    5ec8:	4816      	ldr	r0, [pc, #88]	; (5f24 <k_mem_slab_alloc+0xc4>)
    5eca:	23b9      	movs	r3, #185	; 0xb9
    5ecc:	f002 fec9 	bl	8c62 <assert_print>
    5ed0:	4817      	ldr	r0, [pc, #92]	; (5f30 <k_mem_slab_alloc+0xd0>)
    5ed2:	4629      	mov	r1, r5
    5ed4:	f002 fec5 	bl	8c62 <assert_print>
    5ed8:	4810      	ldr	r0, [pc, #64]	; (5f1c <k_mem_slab_alloc+0xbc>)
    5eda:	21b9      	movs	r1, #185	; 0xb9
    5edc:	f002 feba 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    5ee0:	f389 8811 	msr	BASEPRI, r9
    5ee4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5ee8:	e013      	b.n	5f12 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5eea:	ea58 0207 	orrs.w	r2, r8, r7
    5eee:	d103      	bne.n	5ef8 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5ef0:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5ef2:	f06f 040b 	mvn.w	r4, #11
    5ef6:	e7e1      	b.n	5ebc <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5ef8:	4622      	mov	r2, r4
    5efa:	e9cd 8700 	strd	r8, r7, [sp]
    5efe:	4649      	mov	r1, r9
    5f00:	4628      	mov	r0, r5
    5f02:	f001 f951 	bl	71a8 <z_pend_curr>
		if (result == 0) {
    5f06:	4604      	mov	r4, r0
    5f08:	b918      	cbnz	r0, 5f12 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    5f0a:	4b0a      	ldr	r3, [pc, #40]	; (5f34 <k_mem_slab_alloc+0xd4>)
    5f0c:	689b      	ldr	r3, [r3, #8]
    5f0e:	695b      	ldr	r3, [r3, #20]
    5f10:	6033      	str	r3, [r6, #0]
}
    5f12:	4620      	mov	r0, r4
    5f14:	b003      	add	sp, #12
    5f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f1a:	bf00      	nop
    5f1c:	00009f7a 	.word	0x00009f7a
    5f20:	00009fd3 	.word	0x00009fd3
    5f24:	00009bdf 	.word	0x00009bdf
    5f28:	00009fe8 	.word	0x00009fe8
    5f2c:	00009fa7 	.word	0x00009fa7
    5f30:	00009fbe 	.word	0x00009fbe
    5f34:	20000c30 	.word	0x20000c30

00005f38 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f3c:	4604      	mov	r4, r0
    5f3e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5f40:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5f44:	f04f 0340 	mov.w	r3, #64	; 0x40
    5f48:	f3ef 8711 	mrs	r7, BASEPRI
    5f4c:	f383 8812 	msr	BASEPRI_MAX, r3
    5f50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f54:	4628      	mov	r0, r5
    5f56:	f000 f98f 	bl	6278 <z_spin_lock_valid>
    5f5a:	b968      	cbnz	r0, 5f78 <k_mem_slab_free+0x40>
    5f5c:	4a22      	ldr	r2, [pc, #136]	; (5fe8 <k_mem_slab_free+0xb0>)
    5f5e:	4923      	ldr	r1, [pc, #140]	; (5fec <k_mem_slab_free+0xb4>)
    5f60:	4823      	ldr	r0, [pc, #140]	; (5ff0 <k_mem_slab_free+0xb8>)
    5f62:	238e      	movs	r3, #142	; 0x8e
    5f64:	f002 fe7d 	bl	8c62 <assert_print>
    5f68:	4822      	ldr	r0, [pc, #136]	; (5ff4 <k_mem_slab_free+0xbc>)
    5f6a:	4629      	mov	r1, r5
    5f6c:	f002 fe79 	bl	8c62 <assert_print>
    5f70:	481d      	ldr	r0, [pc, #116]	; (5fe8 <k_mem_slab_free+0xb0>)
    5f72:	218e      	movs	r1, #142	; 0x8e
    5f74:	f002 fe6e 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    5f78:	4628      	mov	r0, r5
    5f7a:	f000 f99b 	bl	62b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5f7e:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5f82:	f1b8 0f00 	cmp.w	r8, #0
    5f86:	d10f      	bne.n	5fa8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5f88:	4620      	mov	r0, r4
    5f8a:	f001 fb05 	bl	7598 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5f8e:	b158      	cbz	r0, 5fa8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5f90:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5f92:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5f94:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    5f98:	f000 ff58 	bl	6e4c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5f9c:	4639      	mov	r1, r7
    5f9e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5fa4:	f000 bd08 	b.w	69b8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5fa8:	6833      	ldr	r3, [r6, #0]
    5faa:	69a2      	ldr	r2, [r4, #24]
    5fac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5fae:	6833      	ldr	r3, [r6, #0]
    5fb0:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5fb2:	69e3      	ldr	r3, [r4, #28]
    5fb4:	3b01      	subs	r3, #1
    5fb6:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5fb8:	4628      	mov	r0, r5
    5fba:	f000 f96b 	bl	6294 <z_spin_unlock_valid>
    5fbe:	b968      	cbnz	r0, 5fdc <k_mem_slab_free+0xa4>
    5fc0:	4a09      	ldr	r2, [pc, #36]	; (5fe8 <k_mem_slab_free+0xb0>)
    5fc2:	490d      	ldr	r1, [pc, #52]	; (5ff8 <k_mem_slab_free+0xc0>)
    5fc4:	480a      	ldr	r0, [pc, #40]	; (5ff0 <k_mem_slab_free+0xb8>)
    5fc6:	23b9      	movs	r3, #185	; 0xb9
    5fc8:	f002 fe4b 	bl	8c62 <assert_print>
    5fcc:	480b      	ldr	r0, [pc, #44]	; (5ffc <k_mem_slab_free+0xc4>)
    5fce:	4629      	mov	r1, r5
    5fd0:	f002 fe47 	bl	8c62 <assert_print>
    5fd4:	4804      	ldr	r0, [pc, #16]	; (5fe8 <k_mem_slab_free+0xb0>)
    5fd6:	21b9      	movs	r1, #185	; 0xb9
    5fd8:	f002 fe3c 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    5fdc:	f387 8811 	msr	BASEPRI, r7
    5fe0:	f3bf 8f6f 	isb	sy
}
    5fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fe8:	00009f7a 	.word	0x00009f7a
    5fec:	00009fd3 	.word	0x00009fd3
    5ff0:	00009bdf 	.word	0x00009bdf
    5ff4:	00009fe8 	.word	0x00009fe8
    5ff8:	00009fa7 	.word	0x00009fa7
    5ffc:	00009fbe 	.word	0x00009fbe

00006000 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6004:	b085      	sub	sp, #20
    6006:	4604      	mov	r4, r0
    6008:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    600c:	f1b8 0f0f 	cmp.w	r8, #15
{
    6010:	460f      	mov	r7, r1
    6012:	4615      	mov	r5, r2
    6014:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6016:	d132      	bne.n	607e <z_setup_new_thread+0x7e>
    6018:	4b25      	ldr	r3, [pc, #148]	; (60b0 <z_setup_new_thread+0xb0>)
    601a:	4599      	cmp	r9, r3
    601c:	d133      	bne.n	6086 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    601e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6022:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6026:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6028:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    602a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    602c:	2304      	movs	r3, #4
    602e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6030:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6034:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6038:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    603c:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    603e:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6042:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6044:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6048:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    604a:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    604c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    604e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6050:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6052:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6054:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    6056:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    605a:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    605c:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    605e:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6060:	4642      	mov	r2, r8
    6062:	4639      	mov	r1, r7
    6064:	4620      	mov	r0, r4
    6066:	f7fc fdaf 	bl	2bc8 <arch_new_thread>
	if (!_current) {
    606a:	4b12      	ldr	r3, [pc, #72]	; (60b4 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    606c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    606e:	689b      	ldr	r3, [r3, #8]
    6070:	b103      	cbz	r3, 6074 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6074:	6723      	str	r3, [r4, #112]	; 0x70
}
    6076:	4640      	mov	r0, r8
    6078:	b005      	add	sp, #20
    607a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    607e:	f108 0310 	add.w	r3, r8, #16
    6082:	2b1e      	cmp	r3, #30
    6084:	d9cb      	bls.n	601e <z_setup_new_thread+0x1e>
    6086:	4a0c      	ldr	r2, [pc, #48]	; (60b8 <z_setup_new_thread+0xb8>)
    6088:	490c      	ldr	r1, [pc, #48]	; (60bc <z_setup_new_thread+0xbc>)
    608a:	480d      	ldr	r0, [pc, #52]	; (60c0 <z_setup_new_thread+0xc0>)
    608c:	f240 13ff 	movw	r3, #511	; 0x1ff
    6090:	f002 fde7 	bl	8c62 <assert_print>
    6094:	4641      	mov	r1, r8
    6096:	480b      	ldr	r0, [pc, #44]	; (60c4 <z_setup_new_thread+0xc4>)
    6098:	f06f 030f 	mvn.w	r3, #15
    609c:	220e      	movs	r2, #14
    609e:	f002 fde0 	bl	8c62 <assert_print>
    60a2:	4805      	ldr	r0, [pc, #20]	; (60b8 <z_setup_new_thread+0xb8>)
    60a4:	f240 11ff 	movw	r1, #511	; 0x1ff
    60a8:	f002 fdd4 	bl	8c54 <assert_post_action>
    60ac:	e7b7      	b.n	601e <z_setup_new_thread+0x1e>
    60ae:	bf00      	nop
    60b0:	000062c5 	.word	0x000062c5
    60b4:	20000c30 	.word	0x20000c30
    60b8:	0000b216 	.word	0x0000b216
    60bc:	0000b239 	.word	0x0000b239
    60c0:	00009bdf 	.word	0x00009bdf
    60c4:	0000b2b9 	.word	0x0000b2b9

000060c8 <z_impl_k_thread_create>:
{
    60c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    60cc:	b087      	sub	sp, #28
    60ce:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    60d2:	4604      	mov	r4, r0
    60d4:	460f      	mov	r7, r1
    60d6:	4690      	mov	r8, r2
    60d8:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    60da:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    60de:	b173      	cbz	r3, 60fe <z_impl_k_thread_create+0x36>
    60e0:	491c      	ldr	r1, [pc, #112]	; (6154 <z_impl_k_thread_create+0x8c>)
    60e2:	4a1d      	ldr	r2, [pc, #116]	; (6158 <z_impl_k_thread_create+0x90>)
    60e4:	481d      	ldr	r0, [pc, #116]	; (615c <z_impl_k_thread_create+0x94>)
    60e6:	f240 236e 	movw	r3, #622	; 0x26e
    60ea:	f002 fdba 	bl	8c62 <assert_print>
    60ee:	481c      	ldr	r0, [pc, #112]	; (6160 <z_impl_k_thread_create+0x98>)
    60f0:	f002 fdb7 	bl	8c62 <assert_print>
    60f4:	4818      	ldr	r0, [pc, #96]	; (6158 <z_impl_k_thread_create+0x90>)
    60f6:	f240 216e 	movw	r1, #622	; 0x26e
    60fa:	f002 fdab 	bl	8c54 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    60fe:	2300      	movs	r3, #0
    6100:	9305      	str	r3, [sp, #20]
    6102:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6104:	9304      	str	r3, [sp, #16]
    6106:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6108:	9303      	str	r3, [sp, #12]
    610a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    610c:	9302      	str	r3, [sp, #8]
    610e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6110:	9301      	str	r3, [sp, #4]
    6112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6114:	9300      	str	r3, [sp, #0]
    6116:	4642      	mov	r2, r8
    6118:	464b      	mov	r3, r9
    611a:	4639      	mov	r1, r7
    611c:	4620      	mov	r0, r4
    611e:	f7ff ff6f 	bl	6000 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6122:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    6126:	bf08      	it	eq
    6128:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    612c:	d005      	beq.n	613a <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    612e:	ea55 0306 	orrs.w	r3, r5, r6
    6132:	d106      	bne.n	6142 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    6134:	4620      	mov	r0, r4
    6136:	f000 fed1 	bl	6edc <z_sched_start>
}
    613a:	4620      	mov	r0, r4
    613c:	b007      	add	sp, #28
    613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6142:	4908      	ldr	r1, [pc, #32]	; (6164 <z_impl_k_thread_create+0x9c>)
    6144:	4632      	mov	r2, r6
    6146:	462b      	mov	r3, r5
    6148:	f104 0018 	add.w	r0, r4, #24
    614c:	f001 fd1c 	bl	7b88 <z_add_timeout>
    6150:	e7f3      	b.n	613a <z_impl_k_thread_create+0x72>
    6152:	bf00      	nop
    6154:	0000b2ea 	.word	0x0000b2ea
    6158:	0000b216 	.word	0x0000b216
    615c:	00009bdf 	.word	0x00009bdf
    6160:	0000b2fc 	.word	0x0000b2fc
    6164:	00006f85 	.word	0x00006f85

00006168 <z_init_static_threads>:
{
    6168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    616c:	4c3b      	ldr	r4, [pc, #236]	; (625c <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    616e:	4d3c      	ldr	r5, [pc, #240]	; (6260 <z_init_static_threads+0xf8>)
    6170:	4f3c      	ldr	r7, [pc, #240]	; (6264 <z_init_static_threads+0xfc>)
{
    6172:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6174:	42ac      	cmp	r4, r5
    6176:	4626      	mov	r6, r4
    6178:	d90e      	bls.n	6198 <z_init_static_threads+0x30>
    617a:	493b      	ldr	r1, [pc, #236]	; (6268 <z_init_static_threads+0x100>)
    617c:	483b      	ldr	r0, [pc, #236]	; (626c <z_init_static_threads+0x104>)
    617e:	f240 23d5 	movw	r3, #725	; 0x2d5
    6182:	463a      	mov	r2, r7
    6184:	f002 fd6d 	bl	8c62 <assert_print>
    6188:	4839      	ldr	r0, [pc, #228]	; (6270 <z_init_static_threads+0x108>)
    618a:	f002 fd6a 	bl	8c62 <assert_print>
    618e:	f240 21d5 	movw	r1, #725	; 0x2d5
    6192:	4638      	mov	r0, r7
    6194:	f002 fd5e 	bl	8c54 <assert_post_action>
    6198:	42ae      	cmp	r6, r5
    619a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    619e:	d31f      	bcc.n	61e0 <z_init_static_threads+0x78>
	k_sched_lock();
    61a0:	f000 fc4e 	bl	6a40 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    61a4:	4c2d      	ldr	r4, [pc, #180]	; (625c <z_init_static_threads+0xf4>)
    61a6:	4e2f      	ldr	r6, [pc, #188]	; (6264 <z_init_static_threads+0xfc>)
    61a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6268 <z_init_static_threads+0x100>
    61ac:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 626c <z_init_static_threads+0x104>
    61b0:	42ac      	cmp	r4, r5
    61b2:	d90e      	bls.n	61d2 <z_init_static_threads+0x6a>
    61b4:	4641      	mov	r1, r8
    61b6:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    61ba:	4632      	mov	r2, r6
    61bc:	4648      	mov	r0, r9
    61be:	f002 fd50 	bl	8c62 <assert_print>
    61c2:	482b      	ldr	r0, [pc, #172]	; (6270 <z_init_static_threads+0x108>)
    61c4:	f002 fd4d 	bl	8c62 <assert_print>
    61c8:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    61cc:	4630      	mov	r0, r6
    61ce:	f002 fd41 	bl	8c54 <assert_post_action>
    61d2:	42ac      	cmp	r4, r5
    61d4:	d320      	bcc.n	6218 <z_init_static_threads+0xb0>
}
    61d6:	b007      	add	sp, #28
    61d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    61dc:	f001 b914 	b.w	7408 <k_sched_unlock>
		z_setup_new_thread(
    61e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    61e4:	9305      	str	r3, [sp, #20]
    61e6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    61ea:	9304      	str	r3, [sp, #16]
    61ec:	f854 3c14 	ldr.w	r3, [r4, #-20]
    61f0:	9303      	str	r3, [sp, #12]
    61f2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    61f6:	9302      	str	r3, [sp, #8]
    61f8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    61fc:	9301      	str	r3, [sp, #4]
    61fe:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6202:	9300      	str	r3, [sp, #0]
    6204:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6208:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    620c:	f7ff fef8 	bl	6000 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6210:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6214:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6216:	e7ad      	b.n	6174 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6218:	6a63      	ldr	r3, [r4, #36]	; 0x24
    621a:	1c5a      	adds	r2, r3, #1
    621c:	d00f      	beq.n	623e <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    621e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6222:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    6226:	f240 30e7 	movw	r0, #999	; 0x3e7
    622a:	2100      	movs	r1, #0
    622c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6230:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6234:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6236:	d104      	bne.n	6242 <z_init_static_threads+0xda>
	z_sched_start(thread);
    6238:	4638      	mov	r0, r7
    623a:	f000 fe4f 	bl	6edc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    623e:	3430      	adds	r4, #48	; 0x30
    6240:	e7b6      	b.n	61b0 <z_init_static_threads+0x48>
    6242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6246:	2300      	movs	r3, #0
    6248:	f7fa f93c 	bl	4c4 <__aeabi_uldivmod>
    624c:	4602      	mov	r2, r0
    624e:	460b      	mov	r3, r1
    6250:	f107 0018 	add.w	r0, r7, #24
    6254:	4907      	ldr	r1, [pc, #28]	; (6274 <z_init_static_threads+0x10c>)
    6256:	f001 fc97 	bl	7b88 <z_add_timeout>
    625a:	e7f0      	b.n	623e <z_init_static_threads+0xd6>
    625c:	200001f4 	.word	0x200001f4
    6260:	200001f4 	.word	0x200001f4
    6264:	0000b216 	.word	0x0000b216
    6268:	0000b321 	.word	0x0000b321
    626c:	00009bdf 	.word	0x00009bdf
    6270:	0000b1f7 	.word	0x0000b1f7
    6274:	00006f85 	.word	0x00006f85

00006278 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    6278:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    627a:	b138      	cbz	r0, 628c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    627c:	4b04      	ldr	r3, [pc, #16]	; (6290 <z_spin_lock_valid+0x18>)
    627e:	7d1b      	ldrb	r3, [r3, #20]
    6280:	f000 0003 	and.w	r0, r0, #3
    6284:	1ac0      	subs	r0, r0, r3
    6286:	bf18      	it	ne
    6288:	2001      	movne	r0, #1
    628a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    628c:	2001      	movs	r0, #1
}
    628e:	4770      	bx	lr
    6290:	20000c30 	.word	0x20000c30

00006294 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    6294:	4a06      	ldr	r2, [pc, #24]	; (62b0 <z_spin_unlock_valid+0x1c>)
    6296:	7d11      	ldrb	r1, [r2, #20]
    6298:	6892      	ldr	r2, [r2, #8]
    629a:	430a      	orrs	r2, r1
    629c:	6801      	ldr	r1, [r0, #0]
{
    629e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    62a0:	4291      	cmp	r1, r2
    62a2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    62a6:	bf04      	itt	eq
    62a8:	6018      	streq	r0, [r3, #0]
	return true;
    62aa:	2001      	moveq	r0, #1
}
    62ac:	4770      	bx	lr
    62ae:	bf00      	nop
    62b0:	20000c30 	.word	0x20000c30

000062b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    62b4:	4b02      	ldr	r3, [pc, #8]	; (62c0 <z_spin_lock_set_owner+0xc>)
    62b6:	7d1a      	ldrb	r2, [r3, #20]
    62b8:	689b      	ldr	r3, [r3, #8]
    62ba:	4313      	orrs	r3, r2
    62bc:	6003      	str	r3, [r0, #0]
}
    62be:	4770      	bx	lr
    62c0:	20000c30 	.word	0x20000c30

000062c4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    62c4:	4c13      	ldr	r4, [pc, #76]	; (6314 <idle+0x50>)
{
    62c6:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    62c8:	68a3      	ldr	r3, [r4, #8]
    62ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
    62ce:	2b00      	cmp	r3, #0
    62d0:	da09      	bge.n	62e6 <idle+0x22>
    62d2:	4911      	ldr	r1, [pc, #68]	; (6318 <idle+0x54>)
    62d4:	4811      	ldr	r0, [pc, #68]	; (631c <idle+0x58>)
    62d6:	4a12      	ldr	r2, [pc, #72]	; (6320 <idle+0x5c>)
    62d8:	2327      	movs	r3, #39	; 0x27
    62da:	f002 fcc2 	bl	8c62 <assert_print>
    62de:	4810      	ldr	r0, [pc, #64]	; (6320 <idle+0x5c>)
    62e0:	2127      	movs	r1, #39	; 0x27
    62e2:	f002 fcb7 	bl	8c54 <assert_post_action>
	return !z_sys_post_kernel;
    62e6:	4d0f      	ldr	r5, [pc, #60]	; (6324 <idle+0x60>)
	__asm__ volatile(
    62e8:	f04f 0240 	mov.w	r2, #64	; 0x40
    62ec:	f3ef 8311 	mrs	r3, BASEPRI
    62f0:	f382 8812 	msr	BASEPRI_MAX, r2
    62f4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    62f8:	f001 fd5c 	bl	7db4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    62fc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    62fe:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6300:	b913      	cbnz	r3, 6308 <idle+0x44>
	arch_cpu_idle();
    6302:	f7fc fb31 	bl	2968 <arch_cpu_idle>
}
    6306:	e7ef      	b.n	62e8 <idle+0x24>
    6308:	f7fc f986 	bl	2618 <pm_system_suspend>
    630c:	2800      	cmp	r0, #0
    630e:	d1eb      	bne.n	62e8 <idle+0x24>
    6310:	e7f7      	b.n	6302 <idle+0x3e>
    6312:	bf00      	nop
    6314:	20000c30 	.word	0x20000c30
    6318:	0000b36f 	.word	0x0000b36f
    631c:	00009bdf 	.word	0x00009bdf
    6320:	0000b34e 	.word	0x0000b34e
    6324:	20001282 	.word	0x20001282

00006328 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    632c:	4604      	mov	r4, r0
    632e:	4617      	mov	r7, r2
    6330:	461e      	mov	r6, r3
    6332:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6336:	b163      	cbz	r3, 6352 <z_impl_k_mutex_lock+0x2a>
    6338:	496d      	ldr	r1, [pc, #436]	; (64f0 <z_impl_k_mutex_lock+0x1c8>)
    633a:	4a6e      	ldr	r2, [pc, #440]	; (64f4 <z_impl_k_mutex_lock+0x1cc>)
    633c:	486e      	ldr	r0, [pc, #440]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    633e:	2365      	movs	r3, #101	; 0x65
    6340:	f002 fc8f 	bl	8c62 <assert_print>
    6344:	486d      	ldr	r0, [pc, #436]	; (64fc <z_impl_k_mutex_lock+0x1d4>)
    6346:	f002 fc8c 	bl	8c62 <assert_print>
    634a:	486a      	ldr	r0, [pc, #424]	; (64f4 <z_impl_k_mutex_lock+0x1cc>)
    634c:	2165      	movs	r1, #101	; 0x65
    634e:	f002 fc81 	bl	8c54 <assert_post_action>
    6352:	f04f 0340 	mov.w	r3, #64	; 0x40
    6356:	f3ef 8811 	mrs	r8, BASEPRI
    635a:	f383 8812 	msr	BASEPRI_MAX, r3
    635e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6362:	4867      	ldr	r0, [pc, #412]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6364:	f7ff ff88 	bl	6278 <z_spin_lock_valid>
    6368:	b968      	cbnz	r0, 6386 <z_impl_k_mutex_lock+0x5e>
    636a:	4a66      	ldr	r2, [pc, #408]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    636c:	4966      	ldr	r1, [pc, #408]	; (6508 <z_impl_k_mutex_lock+0x1e0>)
    636e:	4862      	ldr	r0, [pc, #392]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    6370:	238e      	movs	r3, #142	; 0x8e
    6372:	f002 fc76 	bl	8c62 <assert_print>
    6376:	4962      	ldr	r1, [pc, #392]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6378:	4864      	ldr	r0, [pc, #400]	; (650c <z_impl_k_mutex_lock+0x1e4>)
    637a:	f002 fc72 	bl	8c62 <assert_print>
    637e:	4861      	ldr	r0, [pc, #388]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    6380:	218e      	movs	r1, #142	; 0x8e
    6382:	f002 fc67 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6386:	485e      	ldr	r0, [pc, #376]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6388:	f7ff ff94 	bl	62b4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    638c:	68e3      	ldr	r3, [r4, #12]
    638e:	4a60      	ldr	r2, [pc, #384]	; (6510 <z_impl_k_mutex_lock+0x1e8>)
    6390:	b1fb      	cbz	r3, 63d2 <z_impl_k_mutex_lock+0xaa>
    6392:	68a0      	ldr	r0, [r4, #8]
    6394:	6891      	ldr	r1, [r2, #8]
    6396:	4288      	cmp	r0, r1
    6398:	d03d      	beq.n	6416 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    639a:	ea57 0306 	orrs.w	r3, r7, r6
    639e:	d13c      	bne.n	641a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    63a0:	4857      	ldr	r0, [pc, #348]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    63a2:	f7ff ff77 	bl	6294 <z_spin_unlock_valid>
    63a6:	b968      	cbnz	r0, 63c4 <z_impl_k_mutex_lock+0x9c>
    63a8:	4a56      	ldr	r2, [pc, #344]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    63aa:	495a      	ldr	r1, [pc, #360]	; (6514 <z_impl_k_mutex_lock+0x1ec>)
    63ac:	4852      	ldr	r0, [pc, #328]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    63ae:	23b9      	movs	r3, #185	; 0xb9
    63b0:	f002 fc57 	bl	8c62 <assert_print>
    63b4:	4952      	ldr	r1, [pc, #328]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    63b6:	4858      	ldr	r0, [pc, #352]	; (6518 <z_impl_k_mutex_lock+0x1f0>)
    63b8:	f002 fc53 	bl	8c62 <assert_print>
    63bc:	4851      	ldr	r0, [pc, #324]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    63be:	21b9      	movs	r1, #185	; 0xb9
    63c0:	f002 fc48 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    63c4:	f388 8811 	msr	BASEPRI, r8
    63c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    63cc:	f06f 000f 	mvn.w	r0, #15
    63d0:	e01e      	b.n	6410 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    63d2:	6891      	ldr	r1, [r2, #8]
    63d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    63d8:	4849      	ldr	r0, [pc, #292]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    63da:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    63dc:	3301      	adds	r3, #1
    63de:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    63e0:	6893      	ldr	r3, [r2, #8]
    63e2:	60a3      	str	r3, [r4, #8]
    63e4:	f7ff ff56 	bl	6294 <z_spin_unlock_valid>
    63e8:	b968      	cbnz	r0, 6406 <z_impl_k_mutex_lock+0xde>
    63ea:	4a46      	ldr	r2, [pc, #280]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    63ec:	4949      	ldr	r1, [pc, #292]	; (6514 <z_impl_k_mutex_lock+0x1ec>)
    63ee:	4842      	ldr	r0, [pc, #264]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    63f0:	23b9      	movs	r3, #185	; 0xb9
    63f2:	f002 fc36 	bl	8c62 <assert_print>
    63f6:	4942      	ldr	r1, [pc, #264]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    63f8:	4847      	ldr	r0, [pc, #284]	; (6518 <z_impl_k_mutex_lock+0x1f0>)
    63fa:	f002 fc32 	bl	8c62 <assert_print>
    63fe:	4841      	ldr	r0, [pc, #260]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    6400:	21b9      	movs	r1, #185	; 0xb9
    6402:	f002 fc27 	bl	8c54 <assert_post_action>
    6406:	f388 8811 	msr	BASEPRI, r8
    640a:	f3bf 8f6f 	isb	sy
		return 0;
    640e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6410:	b002      	add	sp, #8
    6412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6416:	6921      	ldr	r1, [r4, #16]
    6418:	e7de      	b.n	63d8 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    641a:	f991 100e 	ldrsb.w	r1, [r1, #14]
    641e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6422:	4299      	cmp	r1, r3
    6424:	bfa8      	it	ge
    6426:	4619      	movge	r1, r3
    6428:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    642c:	4291      	cmp	r1, r2
    642e:	bfb8      	it	lt
    6430:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6432:	4299      	cmp	r1, r3
    6434:	da43      	bge.n	64be <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    6436:	f003 f833 	bl	94a0 <adjust_owner_prio.isra.0>
    643a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    643c:	e9cd 7600 	strd	r7, r6, [sp]
    6440:	482f      	ldr	r0, [pc, #188]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6442:	4622      	mov	r2, r4
    6444:	4641      	mov	r1, r8
    6446:	f000 feaf 	bl	71a8 <z_pend_curr>
	if (got_mutex == 0) {
    644a:	2800      	cmp	r0, #0
    644c:	d0e0      	beq.n	6410 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    644e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6452:	f3ef 8611 	mrs	r6, BASEPRI
    6456:	f383 8812 	msr	BASEPRI_MAX, r3
    645a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    645e:	4828      	ldr	r0, [pc, #160]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6460:	f7ff ff0a 	bl	6278 <z_spin_lock_valid>
    6464:	b968      	cbnz	r0, 6482 <z_impl_k_mutex_lock+0x15a>
    6466:	4a27      	ldr	r2, [pc, #156]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    6468:	4927      	ldr	r1, [pc, #156]	; (6508 <z_impl_k_mutex_lock+0x1e0>)
    646a:	4823      	ldr	r0, [pc, #140]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    646c:	238e      	movs	r3, #142	; 0x8e
    646e:	f002 fbf8 	bl	8c62 <assert_print>
    6472:	4923      	ldr	r1, [pc, #140]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6474:	4825      	ldr	r0, [pc, #148]	; (650c <z_impl_k_mutex_lock+0x1e4>)
    6476:	f002 fbf4 	bl	8c62 <assert_print>
    647a:	4822      	ldr	r0, [pc, #136]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    647c:	218e      	movs	r1, #142	; 0x8e
    647e:	f002 fbe9 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6482:	481f      	ldr	r0, [pc, #124]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    6484:	f7ff ff16 	bl	62b4 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6488:	6823      	ldr	r3, [r4, #0]
    648a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    648c:	42a3      	cmp	r3, r4
    648e:	d00a      	beq.n	64a6 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6490:	b14b      	cbz	r3, 64a6 <z_impl_k_mutex_lock+0x17e>
    6492:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6496:	4299      	cmp	r1, r3
    6498:	bfa8      	it	ge
    649a:	4619      	movge	r1, r3
    649c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    64a0:	4299      	cmp	r1, r3
    64a2:	bfb8      	it	lt
    64a4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    64a6:	68a0      	ldr	r0, [r4, #8]
    64a8:	f002 fffa 	bl	94a0 <adjust_owner_prio.isra.0>
    64ac:	b900      	cbnz	r0, 64b0 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    64ae:	b145      	cbz	r5, 64c2 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    64b0:	4813      	ldr	r0, [pc, #76]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    64b2:	4631      	mov	r1, r6
    64b4:	f000 fa80 	bl	69b8 <z_reschedule>
	return -EAGAIN;
    64b8:	f06f 000a 	mvn.w	r0, #10
    64bc:	e7a8      	b.n	6410 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    64be:	2500      	movs	r5, #0
    64c0:	e7bc      	b.n	643c <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64c2:	480f      	ldr	r0, [pc, #60]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    64c4:	f7ff fee6 	bl	6294 <z_spin_unlock_valid>
    64c8:	b968      	cbnz	r0, 64e6 <z_impl_k_mutex_lock+0x1be>
    64ca:	4a0e      	ldr	r2, [pc, #56]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    64cc:	4911      	ldr	r1, [pc, #68]	; (6514 <z_impl_k_mutex_lock+0x1ec>)
    64ce:	480a      	ldr	r0, [pc, #40]	; (64f8 <z_impl_k_mutex_lock+0x1d0>)
    64d0:	23b9      	movs	r3, #185	; 0xb9
    64d2:	f002 fbc6 	bl	8c62 <assert_print>
    64d6:	490a      	ldr	r1, [pc, #40]	; (6500 <z_impl_k_mutex_lock+0x1d8>)
    64d8:	480f      	ldr	r0, [pc, #60]	; (6518 <z_impl_k_mutex_lock+0x1f0>)
    64da:	f002 fbc2 	bl	8c62 <assert_print>
    64de:	4809      	ldr	r0, [pc, #36]	; (6504 <z_impl_k_mutex_lock+0x1dc>)
    64e0:	21b9      	movs	r1, #185	; 0xb9
    64e2:	f002 fbb7 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    64e6:	f386 8811 	msr	BASEPRI, r6
    64ea:	f3bf 8f6f 	isb	sy
    64ee:	e7e3      	b.n	64b8 <z_impl_k_mutex_lock+0x190>
    64f0:	0000b2ea 	.word	0x0000b2ea
    64f4:	0000b397 	.word	0x0000b397
    64f8:	00009bdf 	.word	0x00009bdf
    64fc:	0000b3b9 	.word	0x0000b3b9
    6500:	20000c58 	.word	0x20000c58
    6504:	00009f7a 	.word	0x00009f7a
    6508:	00009fd3 	.word	0x00009fd3
    650c:	00009fe8 	.word	0x00009fe8
    6510:	20000c30 	.word	0x20000c30
    6514:	00009fa7 	.word	0x00009fa7
    6518:	00009fbe 	.word	0x00009fbe

0000651c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    651c:	b538      	push	{r3, r4, r5, lr}
    651e:	4604      	mov	r4, r0
    6520:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6524:	b163      	cbz	r3, 6540 <z_impl_k_mutex_unlock+0x24>
    6526:	4950      	ldr	r1, [pc, #320]	; (6668 <z_impl_k_mutex_unlock+0x14c>)
    6528:	4a50      	ldr	r2, [pc, #320]	; (666c <z_impl_k_mutex_unlock+0x150>)
    652a:	4851      	ldr	r0, [pc, #324]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    652c:	23c7      	movs	r3, #199	; 0xc7
    652e:	f002 fb98 	bl	8c62 <assert_print>
    6532:	4850      	ldr	r0, [pc, #320]	; (6674 <z_impl_k_mutex_unlock+0x158>)
    6534:	f002 fb95 	bl	8c62 <assert_print>
    6538:	484c      	ldr	r0, [pc, #304]	; (666c <z_impl_k_mutex_unlock+0x150>)
    653a:	21c7      	movs	r1, #199	; 0xc7
    653c:	f002 fb8a 	bl	8c54 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6540:	68a3      	ldr	r3, [r4, #8]
    6542:	2b00      	cmp	r3, #0
    6544:	f000 8089 	beq.w	665a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6548:	4d4b      	ldr	r5, [pc, #300]	; (6678 <z_impl_k_mutex_unlock+0x15c>)
    654a:	68aa      	ldr	r2, [r5, #8]
    654c:	4293      	cmp	r3, r2
    654e:	f040 8087 	bne.w	6660 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6552:	68e3      	ldr	r3, [r4, #12]
    6554:	b94b      	cbnz	r3, 656a <z_impl_k_mutex_unlock+0x4e>
    6556:	4949      	ldr	r1, [pc, #292]	; (667c <z_impl_k_mutex_unlock+0x160>)
    6558:	4845      	ldr	r0, [pc, #276]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    655a:	4a44      	ldr	r2, [pc, #272]	; (666c <z_impl_k_mutex_unlock+0x150>)
    655c:	23df      	movs	r3, #223	; 0xdf
    655e:	f002 fb80 	bl	8c62 <assert_print>
    6562:	4842      	ldr	r0, [pc, #264]	; (666c <z_impl_k_mutex_unlock+0x150>)
    6564:	21df      	movs	r1, #223	; 0xdf
    6566:	f002 fb75 	bl	8c54 <assert_post_action>
    656a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    656e:	b163      	cbz	r3, 658a <z_impl_k_mutex_unlock+0x6e>
    6570:	493d      	ldr	r1, [pc, #244]	; (6668 <z_impl_k_mutex_unlock+0x14c>)
    6572:	4a43      	ldr	r2, [pc, #268]	; (6680 <z_impl_k_mutex_unlock+0x164>)
    6574:	483e      	ldr	r0, [pc, #248]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    6576:	23fd      	movs	r3, #253	; 0xfd
    6578:	f002 fb73 	bl	8c62 <assert_print>
    657c:	4841      	ldr	r0, [pc, #260]	; (6684 <z_impl_k_mutex_unlock+0x168>)
    657e:	f002 fb70 	bl	8c62 <assert_print>
    6582:	483f      	ldr	r0, [pc, #252]	; (6680 <z_impl_k_mutex_unlock+0x164>)
    6584:	21fd      	movs	r1, #253	; 0xfd
    6586:	f002 fb65 	bl	8c54 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    658a:	68ab      	ldr	r3, [r5, #8]
    658c:	7bdb      	ldrb	r3, [r3, #15]
    658e:	2b01      	cmp	r3, #1
    6590:	d10c      	bne.n	65ac <z_impl_k_mutex_unlock+0x90>
    6592:	493d      	ldr	r1, [pc, #244]	; (6688 <z_impl_k_mutex_unlock+0x16c>)
    6594:	4a3a      	ldr	r2, [pc, #232]	; (6680 <z_impl_k_mutex_unlock+0x164>)
    6596:	4836      	ldr	r0, [pc, #216]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    6598:	23fe      	movs	r3, #254	; 0xfe
    659a:	f002 fb62 	bl	8c62 <assert_print>
    659e:	4839      	ldr	r0, [pc, #228]	; (6684 <z_impl_k_mutex_unlock+0x168>)
    65a0:	f002 fb5f 	bl	8c62 <assert_print>
    65a4:	4836      	ldr	r0, [pc, #216]	; (6680 <z_impl_k_mutex_unlock+0x164>)
    65a6:	21fe      	movs	r1, #254	; 0xfe
    65a8:	f002 fb54 	bl	8c54 <assert_post_action>

	--_current->base.sched_locked;
    65ac:	68aa      	ldr	r2, [r5, #8]
    65ae:	7bd3      	ldrb	r3, [r2, #15]
    65b0:	3b01      	subs	r3, #1
    65b2:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    65b4:	68e3      	ldr	r3, [r4, #12]
    65b6:	2b01      	cmp	r3, #1
    65b8:	d905      	bls.n	65c6 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    65ba:	3b01      	subs	r3, #1
    65bc:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    65be:	f000 ff23 	bl	7408 <k_sched_unlock>

	return 0;
    65c2:	2000      	movs	r0, #0
}
    65c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    65c6:	f04f 0340 	mov.w	r3, #64	; 0x40
    65ca:	f3ef 8511 	mrs	r5, BASEPRI
    65ce:	f383 8812 	msr	BASEPRI_MAX, r3
    65d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65d6:	482d      	ldr	r0, [pc, #180]	; (668c <z_impl_k_mutex_unlock+0x170>)
    65d8:	f7ff fe4e 	bl	6278 <z_spin_lock_valid>
    65dc:	b968      	cbnz	r0, 65fa <z_impl_k_mutex_unlock+0xde>
    65de:	4a2c      	ldr	r2, [pc, #176]	; (6690 <z_impl_k_mutex_unlock+0x174>)
    65e0:	492c      	ldr	r1, [pc, #176]	; (6694 <z_impl_k_mutex_unlock+0x178>)
    65e2:	4823      	ldr	r0, [pc, #140]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    65e4:	238e      	movs	r3, #142	; 0x8e
    65e6:	f002 fb3c 	bl	8c62 <assert_print>
    65ea:	4928      	ldr	r1, [pc, #160]	; (668c <z_impl_k_mutex_unlock+0x170>)
    65ec:	482a      	ldr	r0, [pc, #168]	; (6698 <z_impl_k_mutex_unlock+0x17c>)
    65ee:	f002 fb38 	bl	8c62 <assert_print>
    65f2:	4827      	ldr	r0, [pc, #156]	; (6690 <z_impl_k_mutex_unlock+0x174>)
    65f4:	218e      	movs	r1, #142	; 0x8e
    65f6:	f002 fb2d 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    65fa:	4824      	ldr	r0, [pc, #144]	; (668c <z_impl_k_mutex_unlock+0x170>)
    65fc:	f7ff fe5a 	bl	62b4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6600:	6921      	ldr	r1, [r4, #16]
    6602:	68a0      	ldr	r0, [r4, #8]
    6604:	f002 ff4c 	bl	94a0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6608:	4620      	mov	r0, r4
    660a:	f000 ffc5 	bl	7598 <z_unpend_first_thread>
	mutex->owner = new_owner;
    660e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6610:	b158      	cbz	r0, 662a <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    6612:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6616:	6122      	str	r2, [r4, #16]
    6618:	2200      	movs	r2, #0
    661a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    661c:	f000 fc16 	bl	6e4c <z_ready_thread>
		z_reschedule(&lock, key);
    6620:	481a      	ldr	r0, [pc, #104]	; (668c <z_impl_k_mutex_unlock+0x170>)
    6622:	4629      	mov	r1, r5
    6624:	f000 f9c8 	bl	69b8 <z_reschedule>
    6628:	e7c9      	b.n	65be <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    662a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    662c:	4817      	ldr	r0, [pc, #92]	; (668c <z_impl_k_mutex_unlock+0x170>)
    662e:	f7ff fe31 	bl	6294 <z_spin_unlock_valid>
    6632:	b968      	cbnz	r0, 6650 <z_impl_k_mutex_unlock+0x134>
    6634:	4a16      	ldr	r2, [pc, #88]	; (6690 <z_impl_k_mutex_unlock+0x174>)
    6636:	4919      	ldr	r1, [pc, #100]	; (669c <z_impl_k_mutex_unlock+0x180>)
    6638:	480d      	ldr	r0, [pc, #52]	; (6670 <z_impl_k_mutex_unlock+0x154>)
    663a:	23b9      	movs	r3, #185	; 0xb9
    663c:	f002 fb11 	bl	8c62 <assert_print>
    6640:	4912      	ldr	r1, [pc, #72]	; (668c <z_impl_k_mutex_unlock+0x170>)
    6642:	4817      	ldr	r0, [pc, #92]	; (66a0 <z_impl_k_mutex_unlock+0x184>)
    6644:	f002 fb0d 	bl	8c62 <assert_print>
    6648:	4811      	ldr	r0, [pc, #68]	; (6690 <z_impl_k_mutex_unlock+0x174>)
    664a:	21b9      	movs	r1, #185	; 0xb9
    664c:	f002 fb02 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6650:	f385 8811 	msr	BASEPRI, r5
    6654:	f3bf 8f6f 	isb	sy
    6658:	e7b1      	b.n	65be <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    665a:	f06f 0015 	mvn.w	r0, #21
    665e:	e7b1      	b.n	65c4 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6664:	e7ae      	b.n	65c4 <z_impl_k_mutex_unlock+0xa8>
    6666:	bf00      	nop
    6668:	0000b2ea 	.word	0x0000b2ea
    666c:	0000b397 	.word	0x0000b397
    6670:	00009bdf 	.word	0x00009bdf
    6674:	0000b3b9 	.word	0x0000b3b9
    6678:	20000c30 	.word	0x20000c30
    667c:	0000b3de 	.word	0x0000b3de
    6680:	0000b3f5 	.word	0x0000b3f5
    6684:	0000b420 	.word	0x0000b420
    6688:	0000b423 	.word	0x0000b423
    668c:	20000c58 	.word	0x20000c58
    6690:	00009f7a 	.word	0x00009f7a
    6694:	00009fd3 	.word	0x00009fd3
    6698:	00009fe8 	.word	0x00009fe8
    669c:	00009fa7 	.word	0x00009fa7
    66a0:	00009fbe 	.word	0x00009fbe

000066a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    66a4:	b538      	push	{r3, r4, r5, lr}
    66a6:	4604      	mov	r4, r0
	__asm__ volatile(
    66a8:	f04f 0340 	mov.w	r3, #64	; 0x40
    66ac:	f3ef 8511 	mrs	r5, BASEPRI
    66b0:	f383 8812 	msr	BASEPRI_MAX, r3
    66b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66b8:	4814      	ldr	r0, [pc, #80]	; (670c <z_impl_k_sem_give+0x68>)
    66ba:	f7ff fddd 	bl	6278 <z_spin_lock_valid>
    66be:	b968      	cbnz	r0, 66dc <z_impl_k_sem_give+0x38>
    66c0:	4a13      	ldr	r2, [pc, #76]	; (6710 <z_impl_k_sem_give+0x6c>)
    66c2:	4914      	ldr	r1, [pc, #80]	; (6714 <z_impl_k_sem_give+0x70>)
    66c4:	4814      	ldr	r0, [pc, #80]	; (6718 <z_impl_k_sem_give+0x74>)
    66c6:	238e      	movs	r3, #142	; 0x8e
    66c8:	f002 facb 	bl	8c62 <assert_print>
    66cc:	490f      	ldr	r1, [pc, #60]	; (670c <z_impl_k_sem_give+0x68>)
    66ce:	4813      	ldr	r0, [pc, #76]	; (671c <z_impl_k_sem_give+0x78>)
    66d0:	f002 fac7 	bl	8c62 <assert_print>
    66d4:	480e      	ldr	r0, [pc, #56]	; (6710 <z_impl_k_sem_give+0x6c>)
    66d6:	218e      	movs	r1, #142	; 0x8e
    66d8:	f002 fabc 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    66dc:	480b      	ldr	r0, [pc, #44]	; (670c <z_impl_k_sem_give+0x68>)
    66de:	f7ff fde9 	bl	62b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    66e2:	4620      	mov	r0, r4
    66e4:	f000 ff58 	bl	7598 <z_unpend_first_thread>

	if (thread != NULL) {
    66e8:	b148      	cbz	r0, 66fe <z_impl_k_sem_give+0x5a>
    66ea:	2200      	movs	r2, #0
    66ec:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    66ee:	f000 fbad 	bl	6e4c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    66f2:	4629      	mov	r1, r5
    66f4:	4805      	ldr	r0, [pc, #20]	; (670c <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    66f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    66fa:	f000 b95d 	b.w	69b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    66fe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6702:	429a      	cmp	r2, r3
    6704:	bf18      	it	ne
    6706:	3301      	addne	r3, #1
    6708:	60a3      	str	r3, [r4, #8]
}
    670a:	e7f2      	b.n	66f2 <z_impl_k_sem_give+0x4e>
    670c:	20000c5c 	.word	0x20000c5c
    6710:	00009f7a 	.word	0x00009f7a
    6714:	00009fd3 	.word	0x00009fd3
    6718:	00009bdf 	.word	0x00009bdf
    671c:	00009fe8 	.word	0x00009fe8

00006720 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6722:	4604      	mov	r4, r0
    6724:	4617      	mov	r7, r2
    6726:	461d      	mov	r5, r3
    6728:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    672c:	b17b      	cbz	r3, 674e <z_impl_k_sem_take+0x2e>
    672e:	ea52 0305 	orrs.w	r3, r2, r5
    6732:	d00c      	beq.n	674e <z_impl_k_sem_take+0x2e>
    6734:	4935      	ldr	r1, [pc, #212]	; (680c <z_impl_k_sem_take+0xec>)
    6736:	4a36      	ldr	r2, [pc, #216]	; (6810 <z_impl_k_sem_take+0xf0>)
    6738:	4836      	ldr	r0, [pc, #216]	; (6814 <z_impl_k_sem_take+0xf4>)
    673a:	2379      	movs	r3, #121	; 0x79
    673c:	f002 fa91 	bl	8c62 <assert_print>
    6740:	4835      	ldr	r0, [pc, #212]	; (6818 <z_impl_k_sem_take+0xf8>)
    6742:	f002 fa8e 	bl	8c62 <assert_print>
    6746:	4832      	ldr	r0, [pc, #200]	; (6810 <z_impl_k_sem_take+0xf0>)
    6748:	2179      	movs	r1, #121	; 0x79
    674a:	f002 fa83 	bl	8c54 <assert_post_action>
    674e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6752:	f3ef 8611 	mrs	r6, BASEPRI
    6756:	f383 8812 	msr	BASEPRI_MAX, r3
    675a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    675e:	482f      	ldr	r0, [pc, #188]	; (681c <z_impl_k_sem_take+0xfc>)
    6760:	f7ff fd8a 	bl	6278 <z_spin_lock_valid>
    6764:	b968      	cbnz	r0, 6782 <z_impl_k_sem_take+0x62>
    6766:	4a2e      	ldr	r2, [pc, #184]	; (6820 <z_impl_k_sem_take+0x100>)
    6768:	492e      	ldr	r1, [pc, #184]	; (6824 <z_impl_k_sem_take+0x104>)
    676a:	482a      	ldr	r0, [pc, #168]	; (6814 <z_impl_k_sem_take+0xf4>)
    676c:	238e      	movs	r3, #142	; 0x8e
    676e:	f002 fa78 	bl	8c62 <assert_print>
    6772:	492a      	ldr	r1, [pc, #168]	; (681c <z_impl_k_sem_take+0xfc>)
    6774:	482c      	ldr	r0, [pc, #176]	; (6828 <z_impl_k_sem_take+0x108>)
    6776:	f002 fa74 	bl	8c62 <assert_print>
    677a:	4829      	ldr	r0, [pc, #164]	; (6820 <z_impl_k_sem_take+0x100>)
    677c:	218e      	movs	r1, #142	; 0x8e
    677e:	f002 fa69 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6782:	4826      	ldr	r0, [pc, #152]	; (681c <z_impl_k_sem_take+0xfc>)
    6784:	f7ff fd96 	bl	62b4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6788:	68a3      	ldr	r3, [r4, #8]
    678a:	b1d3      	cbz	r3, 67c2 <z_impl_k_sem_take+0xa2>
		sem->count--;
    678c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    678e:	4823      	ldr	r0, [pc, #140]	; (681c <z_impl_k_sem_take+0xfc>)
    6790:	60a3      	str	r3, [r4, #8]
    6792:	f7ff fd7f 	bl	6294 <z_spin_unlock_valid>
    6796:	b968      	cbnz	r0, 67b4 <z_impl_k_sem_take+0x94>
    6798:	4a21      	ldr	r2, [pc, #132]	; (6820 <z_impl_k_sem_take+0x100>)
    679a:	4924      	ldr	r1, [pc, #144]	; (682c <z_impl_k_sem_take+0x10c>)
    679c:	481d      	ldr	r0, [pc, #116]	; (6814 <z_impl_k_sem_take+0xf4>)
    679e:	23b9      	movs	r3, #185	; 0xb9
    67a0:	f002 fa5f 	bl	8c62 <assert_print>
    67a4:	491d      	ldr	r1, [pc, #116]	; (681c <z_impl_k_sem_take+0xfc>)
    67a6:	4822      	ldr	r0, [pc, #136]	; (6830 <z_impl_k_sem_take+0x110>)
    67a8:	f002 fa5b 	bl	8c62 <assert_print>
    67ac:	481c      	ldr	r0, [pc, #112]	; (6820 <z_impl_k_sem_take+0x100>)
    67ae:	21b9      	movs	r1, #185	; 0xb9
    67b0:	f002 fa50 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    67b4:	f386 8811 	msr	BASEPRI, r6
    67b8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    67bc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    67be:	b003      	add	sp, #12
    67c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    67c2:	ea57 0305 	orrs.w	r3, r7, r5
    67c6:	d118      	bne.n	67fa <z_impl_k_sem_take+0xda>
    67c8:	4814      	ldr	r0, [pc, #80]	; (681c <z_impl_k_sem_take+0xfc>)
    67ca:	f7ff fd63 	bl	6294 <z_spin_unlock_valid>
    67ce:	b968      	cbnz	r0, 67ec <z_impl_k_sem_take+0xcc>
    67d0:	4a13      	ldr	r2, [pc, #76]	; (6820 <z_impl_k_sem_take+0x100>)
    67d2:	4916      	ldr	r1, [pc, #88]	; (682c <z_impl_k_sem_take+0x10c>)
    67d4:	480f      	ldr	r0, [pc, #60]	; (6814 <z_impl_k_sem_take+0xf4>)
    67d6:	23b9      	movs	r3, #185	; 0xb9
    67d8:	f002 fa43 	bl	8c62 <assert_print>
    67dc:	490f      	ldr	r1, [pc, #60]	; (681c <z_impl_k_sem_take+0xfc>)
    67de:	4814      	ldr	r0, [pc, #80]	; (6830 <z_impl_k_sem_take+0x110>)
    67e0:	f002 fa3f 	bl	8c62 <assert_print>
    67e4:	480e      	ldr	r0, [pc, #56]	; (6820 <z_impl_k_sem_take+0x100>)
    67e6:	21b9      	movs	r1, #185	; 0xb9
    67e8:	f002 fa34 	bl	8c54 <assert_post_action>
    67ec:	f386 8811 	msr	BASEPRI, r6
    67f0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    67f4:	f06f 000f 	mvn.w	r0, #15
    67f8:	e7e1      	b.n	67be <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    67fa:	e9cd 7500 	strd	r7, r5, [sp]
    67fe:	4622      	mov	r2, r4
    6800:	4631      	mov	r1, r6
    6802:	4806      	ldr	r0, [pc, #24]	; (681c <z_impl_k_sem_take+0xfc>)
    6804:	f000 fcd0 	bl	71a8 <z_pend_curr>
	return ret;
    6808:	e7d9      	b.n	67be <z_impl_k_sem_take+0x9e>
    680a:	bf00      	nop
    680c:	0000b474 	.word	0x0000b474
    6810:	0000b454 	.word	0x0000b454
    6814:	00009bdf 	.word	0x00009bdf
    6818:	0000b420 	.word	0x0000b420
    681c:	20000c5c 	.word	0x20000c5c
    6820:	00009f7a 	.word	0x00009f7a
    6824:	00009fd3 	.word	0x00009fd3
    6828:	00009fe8 	.word	0x00009fe8
    682c:	00009fa7 	.word	0x00009fa7
    6830:	00009fbe 	.word	0x00009fbe

00006834 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6834:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6836:	4d07      	ldr	r5, [pc, #28]	; (6854 <z_reset_time_slice+0x20>)
    6838:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    683a:	b154      	cbz	r4, 6852 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    683c:	f7fe f992 	bl	4b64 <sys_clock_elapsed>
    6840:	4b05      	ldr	r3, [pc, #20]	; (6858 <z_reset_time_slice+0x24>)
    6842:	4404      	add	r4, r0
    6844:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6846:	6828      	ldr	r0, [r5, #0]
    6848:	2100      	movs	r1, #0
	}
}
    684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    684e:	f001 baf9 	b.w	7e44 <z_set_timeout_expiry>
}
    6852:	bd38      	pop	{r3, r4, r5, pc}
    6854:	20000c6c 	.word	0x20000c6c
    6858:	20000c30 	.word	0x20000c30

0000685c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    685e:	4604      	mov	r4, r0
    6860:	460d      	mov	r5, r1
	__asm__ volatile(
    6862:	f04f 0340 	mov.w	r3, #64	; 0x40
    6866:	f3ef 8711 	mrs	r7, BASEPRI
    686a:	f383 8812 	msr	BASEPRI_MAX, r3
    686e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6872:	4823      	ldr	r0, [pc, #140]	; (6900 <k_sched_time_slice_set+0xa4>)
    6874:	f7ff fd00 	bl	6278 <z_spin_lock_valid>
    6878:	b968      	cbnz	r0, 6896 <k_sched_time_slice_set+0x3a>
    687a:	4a22      	ldr	r2, [pc, #136]	; (6904 <k_sched_time_slice_set+0xa8>)
    687c:	4922      	ldr	r1, [pc, #136]	; (6908 <k_sched_time_slice_set+0xac>)
    687e:	4823      	ldr	r0, [pc, #140]	; (690c <k_sched_time_slice_set+0xb0>)
    6880:	238e      	movs	r3, #142	; 0x8e
    6882:	f002 f9ee 	bl	8c62 <assert_print>
    6886:	491e      	ldr	r1, [pc, #120]	; (6900 <k_sched_time_slice_set+0xa4>)
    6888:	4821      	ldr	r0, [pc, #132]	; (6910 <k_sched_time_slice_set+0xb4>)
    688a:	f002 f9ea 	bl	8c62 <assert_print>
    688e:	481d      	ldr	r0, [pc, #116]	; (6904 <k_sched_time_slice_set+0xa8>)
    6890:	218e      	movs	r1, #142	; 0x8e
    6892:	f002 f9df 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6896:	481a      	ldr	r0, [pc, #104]	; (6900 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6898:	4e1e      	ldr	r6, [pc, #120]	; (6914 <k_sched_time_slice_set+0xb8>)
    689a:	f7ff fd0b 	bl	62b4 <z_spin_lock_set_owner>
    689e:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    68a0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    68a4:	f240 30e7 	movw	r0, #999	; 0x3e7
    68a8:	6131      	str	r1, [r6, #16]
    68aa:	2300      	movs	r3, #0
    68ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    68b0:	fbe4 010c 	umlal	r0, r1, r4, ip
    68b4:	f7f9 fe06 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    68b8:	2c00      	cmp	r4, #0
    68ba:	4b17      	ldr	r3, [pc, #92]	; (6918 <k_sched_time_slice_set+0xbc>)
    68bc:	dc1c      	bgt.n	68f8 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    68be:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    68c0:	4b16      	ldr	r3, [pc, #88]	; (691c <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    68c2:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    68c4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    68c6:	f7ff ffb5 	bl	6834 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68ca:	480d      	ldr	r0, [pc, #52]	; (6900 <k_sched_time_slice_set+0xa4>)
    68cc:	f7ff fce2 	bl	6294 <z_spin_unlock_valid>
    68d0:	b968      	cbnz	r0, 68ee <k_sched_time_slice_set+0x92>
    68d2:	4a0c      	ldr	r2, [pc, #48]	; (6904 <k_sched_time_slice_set+0xa8>)
    68d4:	4912      	ldr	r1, [pc, #72]	; (6920 <k_sched_time_slice_set+0xc4>)
    68d6:	480d      	ldr	r0, [pc, #52]	; (690c <k_sched_time_slice_set+0xb0>)
    68d8:	23b9      	movs	r3, #185	; 0xb9
    68da:	f002 f9c2 	bl	8c62 <assert_print>
    68de:	4908      	ldr	r1, [pc, #32]	; (6900 <k_sched_time_slice_set+0xa4>)
    68e0:	4810      	ldr	r0, [pc, #64]	; (6924 <k_sched_time_slice_set+0xc8>)
    68e2:	f002 f9be 	bl	8c62 <assert_print>
    68e6:	4807      	ldr	r0, [pc, #28]	; (6904 <k_sched_time_slice_set+0xa8>)
    68e8:	21b9      	movs	r1, #185	; 0xb9
    68ea:	f002 f9b3 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    68ee:	f387 8811 	msr	BASEPRI, r7
    68f2:	f3bf 8f6f 	isb	sy
	}
}
    68f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    68f8:	2802      	cmp	r0, #2
    68fa:	bfb8      	it	lt
    68fc:	2002      	movlt	r0, #2
    68fe:	e7de      	b.n	68be <k_sched_time_slice_set+0x62>
    6900:	20000c64 	.word	0x20000c64
    6904:	00009f7a 	.word	0x00009f7a
    6908:	00009fd3 	.word	0x00009fd3
    690c:	00009bdf 	.word	0x00009bdf
    6910:	00009fe8 	.word	0x00009fe8
    6914:	20000c30 	.word	0x20000c30
    6918:	20000c6c 	.word	0x20000c6c
    691c:	20000c68 	.word	0x20000c68
    6920:	00009fa7 	.word	0x00009fa7
    6924:	00009fbe 	.word	0x00009fbe

00006928 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    6928:	b538      	push	{r3, r4, r5, lr}
    692a:	4604      	mov	r4, r0
	__asm__ volatile(
    692c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6930:	f3ef 8511 	mrs	r5, BASEPRI
    6934:	f383 8812 	msr	BASEPRI_MAX, r3
    6938:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    693c:	4817      	ldr	r0, [pc, #92]	; (699c <z_unpend_thread_no_timeout+0x74>)
    693e:	f7ff fc9b 	bl	6278 <z_spin_lock_valid>
    6942:	b968      	cbnz	r0, 6960 <z_unpend_thread_no_timeout+0x38>
    6944:	4a16      	ldr	r2, [pc, #88]	; (69a0 <z_unpend_thread_no_timeout+0x78>)
    6946:	4917      	ldr	r1, [pc, #92]	; (69a4 <z_unpend_thread_no_timeout+0x7c>)
    6948:	4817      	ldr	r0, [pc, #92]	; (69a8 <z_unpend_thread_no_timeout+0x80>)
    694a:	238e      	movs	r3, #142	; 0x8e
    694c:	f002 f989 	bl	8c62 <assert_print>
    6950:	4912      	ldr	r1, [pc, #72]	; (699c <z_unpend_thread_no_timeout+0x74>)
    6952:	4816      	ldr	r0, [pc, #88]	; (69ac <z_unpend_thread_no_timeout+0x84>)
    6954:	f002 f985 	bl	8c62 <assert_print>
    6958:	4811      	ldr	r0, [pc, #68]	; (69a0 <z_unpend_thread_no_timeout+0x78>)
    695a:	218e      	movs	r1, #142	; 0x8e
    695c:	f002 f97a 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6960:	480e      	ldr	r0, [pc, #56]	; (699c <z_unpend_thread_no_timeout+0x74>)
    6962:	f7ff fca7 	bl	62b4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    6966:	4620      	mov	r0, r4
    6968:	f000 f900 	bl	6b6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    696c:	480b      	ldr	r0, [pc, #44]	; (699c <z_unpend_thread_no_timeout+0x74>)
    696e:	f7ff fc91 	bl	6294 <z_spin_unlock_valid>
    6972:	b968      	cbnz	r0, 6990 <z_unpend_thread_no_timeout+0x68>
    6974:	4a0a      	ldr	r2, [pc, #40]	; (69a0 <z_unpend_thread_no_timeout+0x78>)
    6976:	490e      	ldr	r1, [pc, #56]	; (69b0 <z_unpend_thread_no_timeout+0x88>)
    6978:	480b      	ldr	r0, [pc, #44]	; (69a8 <z_unpend_thread_no_timeout+0x80>)
    697a:	23b9      	movs	r3, #185	; 0xb9
    697c:	f002 f971 	bl	8c62 <assert_print>
    6980:	4906      	ldr	r1, [pc, #24]	; (699c <z_unpend_thread_no_timeout+0x74>)
    6982:	480c      	ldr	r0, [pc, #48]	; (69b4 <z_unpend_thread_no_timeout+0x8c>)
    6984:	f002 f96d 	bl	8c62 <assert_print>
    6988:	4805      	ldr	r0, [pc, #20]	; (69a0 <z_unpend_thread_no_timeout+0x78>)
    698a:	21b9      	movs	r1, #185	; 0xb9
    698c:	f002 f962 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6990:	f385 8811 	msr	BASEPRI, r5
    6994:	f3bf 8f6f 	isb	sy
	}
}
    6998:	bd38      	pop	{r3, r4, r5, pc}
    699a:	bf00      	nop
    699c:	20000c64 	.word	0x20000c64
    69a0:	00009f7a 	.word	0x00009f7a
    69a4:	00009fd3 	.word	0x00009fd3
    69a8:	00009bdf 	.word	0x00009bdf
    69ac:	00009fe8 	.word	0x00009fe8
    69b0:	00009fa7 	.word	0x00009fa7
    69b4:	00009fbe 	.word	0x00009fbe

000069b8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    69b8:	b538      	push	{r3, r4, r5, lr}
    69ba:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    69bc:	460d      	mov	r5, r1
    69be:	b9e9      	cbnz	r1, 69fc <z_reschedule+0x44>
    69c0:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    69c4:	b9d3      	cbnz	r3, 69fc <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    69c6:	4b19      	ldr	r3, [pc, #100]	; (6a2c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    69c8:	69da      	ldr	r2, [r3, #28]
    69ca:	689b      	ldr	r3, [r3, #8]
    69cc:	429a      	cmp	r2, r3
    69ce:	d015      	beq.n	69fc <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69d0:	f7ff fc60 	bl	6294 <z_spin_unlock_valid>
    69d4:	b968      	cbnz	r0, 69f2 <z_reschedule+0x3a>
    69d6:	4a16      	ldr	r2, [pc, #88]	; (6a30 <z_reschedule+0x78>)
    69d8:	4916      	ldr	r1, [pc, #88]	; (6a34 <z_reschedule+0x7c>)
    69da:	4817      	ldr	r0, [pc, #92]	; (6a38 <z_reschedule+0x80>)
    69dc:	23d0      	movs	r3, #208	; 0xd0
    69de:	f002 f940 	bl	8c62 <assert_print>
    69e2:	4816      	ldr	r0, [pc, #88]	; (6a3c <z_reschedule+0x84>)
    69e4:	4621      	mov	r1, r4
    69e6:	f002 f93c 	bl	8c62 <assert_print>
    69ea:	4811      	ldr	r0, [pc, #68]	; (6a30 <z_reschedule+0x78>)
    69ec:	21d0      	movs	r1, #208	; 0xd0
    69ee:	f002 f931 	bl	8c54 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    69f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    69f6:	2000      	movs	r0, #0
    69f8:	f7fc b892 	b.w	2b20 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69fc:	4620      	mov	r0, r4
    69fe:	f7ff fc49 	bl	6294 <z_spin_unlock_valid>
    6a02:	b968      	cbnz	r0, 6a20 <z_reschedule+0x68>
    6a04:	4a0a      	ldr	r2, [pc, #40]	; (6a30 <z_reschedule+0x78>)
    6a06:	490b      	ldr	r1, [pc, #44]	; (6a34 <z_reschedule+0x7c>)
    6a08:	480b      	ldr	r0, [pc, #44]	; (6a38 <z_reschedule+0x80>)
    6a0a:	23b9      	movs	r3, #185	; 0xb9
    6a0c:	f002 f929 	bl	8c62 <assert_print>
    6a10:	480a      	ldr	r0, [pc, #40]	; (6a3c <z_reschedule+0x84>)
    6a12:	4621      	mov	r1, r4
    6a14:	f002 f925 	bl	8c62 <assert_print>
    6a18:	4805      	ldr	r0, [pc, #20]	; (6a30 <z_reschedule+0x78>)
    6a1a:	21b9      	movs	r1, #185	; 0xb9
    6a1c:	f002 f91a 	bl	8c54 <assert_post_action>
    6a20:	f385 8811 	msr	BASEPRI, r5
    6a24:	f3bf 8f6f 	isb	sy
    6a28:	bd38      	pop	{r3, r4, r5, pc}
    6a2a:	bf00      	nop
    6a2c:	20000c30 	.word	0x20000c30
    6a30:	00009f7a 	.word	0x00009f7a
    6a34:	00009fa7 	.word	0x00009fa7
    6a38:	00009bdf 	.word	0x00009bdf
    6a3c:	00009fbe 	.word	0x00009fbe

00006a40 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6a40:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a42:	f04f 0340 	mov.w	r3, #64	; 0x40
    6a46:	f3ef 8511 	mrs	r5, BASEPRI
    6a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a52:	4829      	ldr	r0, [pc, #164]	; (6af8 <k_sched_lock+0xb8>)
    6a54:	f7ff fc10 	bl	6278 <z_spin_lock_valid>
    6a58:	b968      	cbnz	r0, 6a76 <k_sched_lock+0x36>
    6a5a:	4a28      	ldr	r2, [pc, #160]	; (6afc <k_sched_lock+0xbc>)
    6a5c:	4928      	ldr	r1, [pc, #160]	; (6b00 <k_sched_lock+0xc0>)
    6a5e:	4829      	ldr	r0, [pc, #164]	; (6b04 <k_sched_lock+0xc4>)
    6a60:	238e      	movs	r3, #142	; 0x8e
    6a62:	f002 f8fe 	bl	8c62 <assert_print>
    6a66:	4924      	ldr	r1, [pc, #144]	; (6af8 <k_sched_lock+0xb8>)
    6a68:	4827      	ldr	r0, [pc, #156]	; (6b08 <k_sched_lock+0xc8>)
    6a6a:	f002 f8fa 	bl	8c62 <assert_print>
    6a6e:	4823      	ldr	r0, [pc, #140]	; (6afc <k_sched_lock+0xbc>)
    6a70:	218e      	movs	r1, #142	; 0x8e
    6a72:	f002 f8ef 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a76:	4820      	ldr	r0, [pc, #128]	; (6af8 <k_sched_lock+0xb8>)
    6a78:	f7ff fc1c 	bl	62b4 <z_spin_lock_set_owner>
    6a7c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6a80:	b163      	cbz	r3, 6a9c <k_sched_lock+0x5c>
    6a82:	4922      	ldr	r1, [pc, #136]	; (6b0c <k_sched_lock+0xcc>)
    6a84:	4a22      	ldr	r2, [pc, #136]	; (6b10 <k_sched_lock+0xd0>)
    6a86:	481f      	ldr	r0, [pc, #124]	; (6b04 <k_sched_lock+0xc4>)
    6a88:	23fd      	movs	r3, #253	; 0xfd
    6a8a:	f002 f8ea 	bl	8c62 <assert_print>
    6a8e:	4821      	ldr	r0, [pc, #132]	; (6b14 <k_sched_lock+0xd4>)
    6a90:	f002 f8e7 	bl	8c62 <assert_print>
    6a94:	481e      	ldr	r0, [pc, #120]	; (6b10 <k_sched_lock+0xd0>)
    6a96:	21fd      	movs	r1, #253	; 0xfd
    6a98:	f002 f8dc 	bl	8c54 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6a9c:	4c1e      	ldr	r4, [pc, #120]	; (6b18 <k_sched_lock+0xd8>)
    6a9e:	68a3      	ldr	r3, [r4, #8]
    6aa0:	7bdb      	ldrb	r3, [r3, #15]
    6aa2:	2b01      	cmp	r3, #1
    6aa4:	d10c      	bne.n	6ac0 <k_sched_lock+0x80>
    6aa6:	491d      	ldr	r1, [pc, #116]	; (6b1c <k_sched_lock+0xdc>)
    6aa8:	4a19      	ldr	r2, [pc, #100]	; (6b10 <k_sched_lock+0xd0>)
    6aaa:	4816      	ldr	r0, [pc, #88]	; (6b04 <k_sched_lock+0xc4>)
    6aac:	23fe      	movs	r3, #254	; 0xfe
    6aae:	f002 f8d8 	bl	8c62 <assert_print>
    6ab2:	4818      	ldr	r0, [pc, #96]	; (6b14 <k_sched_lock+0xd4>)
    6ab4:	f002 f8d5 	bl	8c62 <assert_print>
    6ab8:	4815      	ldr	r0, [pc, #84]	; (6b10 <k_sched_lock+0xd0>)
    6aba:	21fe      	movs	r1, #254	; 0xfe
    6abc:	f002 f8ca 	bl	8c54 <assert_post_action>
	--_current->base.sched_locked;
    6ac0:	68a2      	ldr	r2, [r4, #8]
    6ac2:	7bd3      	ldrb	r3, [r2, #15]
    6ac4:	3b01      	subs	r3, #1
    6ac6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ac8:	480b      	ldr	r0, [pc, #44]	; (6af8 <k_sched_lock+0xb8>)
    6aca:	f7ff fbe3 	bl	6294 <z_spin_unlock_valid>
    6ace:	b968      	cbnz	r0, 6aec <k_sched_lock+0xac>
    6ad0:	4a0a      	ldr	r2, [pc, #40]	; (6afc <k_sched_lock+0xbc>)
    6ad2:	4913      	ldr	r1, [pc, #76]	; (6b20 <k_sched_lock+0xe0>)
    6ad4:	480b      	ldr	r0, [pc, #44]	; (6b04 <k_sched_lock+0xc4>)
    6ad6:	23b9      	movs	r3, #185	; 0xb9
    6ad8:	f002 f8c3 	bl	8c62 <assert_print>
    6adc:	4906      	ldr	r1, [pc, #24]	; (6af8 <k_sched_lock+0xb8>)
    6ade:	4811      	ldr	r0, [pc, #68]	; (6b24 <k_sched_lock+0xe4>)
    6ae0:	f002 f8bf 	bl	8c62 <assert_print>
    6ae4:	4805      	ldr	r0, [pc, #20]	; (6afc <k_sched_lock+0xbc>)
    6ae6:	21b9      	movs	r1, #185	; 0xb9
    6ae8:	f002 f8b4 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6aec:	f385 8811 	msr	BASEPRI, r5
    6af0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6af4:	bd38      	pop	{r3, r4, r5, pc}
    6af6:	bf00      	nop
    6af8:	20000c64 	.word	0x20000c64
    6afc:	00009f7a 	.word	0x00009f7a
    6b00:	00009fd3 	.word	0x00009fd3
    6b04:	00009bdf 	.word	0x00009bdf
    6b08:	00009fe8 	.word	0x00009fe8
    6b0c:	0000b2ea 	.word	0x0000b2ea
    6b10:	0000b3f5 	.word	0x0000b3f5
    6b14:	0000b420 	.word	0x0000b420
    6b18:	20000c30 	.word	0x20000c30
    6b1c:	0000b423 	.word	0x0000b423
    6b20:	00009fa7 	.word	0x00009fa7
    6b24:	00009fbe 	.word	0x00009fbe

00006b28 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b28:	4b0c      	ldr	r3, [pc, #48]	; (6b5c <z_priq_dumb_remove+0x34>)
    6b2a:	4299      	cmp	r1, r3
{
    6b2c:	b510      	push	{r4, lr}
    6b2e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6b30:	d10b      	bne.n	6b4a <z_priq_dumb_remove+0x22>
    6b32:	490b      	ldr	r1, [pc, #44]	; (6b60 <z_priq_dumb_remove+0x38>)
    6b34:	480b      	ldr	r0, [pc, #44]	; (6b64 <z_priq_dumb_remove+0x3c>)
    6b36:	4a0c      	ldr	r2, [pc, #48]	; (6b68 <z_priq_dumb_remove+0x40>)
    6b38:	f240 433d 	movw	r3, #1085	; 0x43d
    6b3c:	f002 f891 	bl	8c62 <assert_print>
    6b40:	4809      	ldr	r0, [pc, #36]	; (6b68 <z_priq_dumb_remove+0x40>)
    6b42:	f240 413d 	movw	r1, #1085	; 0x43d
    6b46:	f002 f885 	bl	8c54 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    6b4a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    6b4e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6b50:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6b52:	2300      	movs	r3, #0
	node->prev = NULL;
    6b54:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6b58:	bd10      	pop	{r4, pc}
    6b5a:	bf00      	nop
    6b5c:	20000400 	.word	0x20000400
    6b60:	0000b4e4 	.word	0x0000b4e4
    6b64:	00009bdf 	.word	0x00009bdf
    6b68:	0000b4c2 	.word	0x0000b4c2

00006b6c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    6b6c:	6883      	ldr	r3, [r0, #8]
{
    6b6e:	b510      	push	{r4, lr}
    6b70:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6b72:	b95b      	cbnz	r3, 6b8c <unpend_thread_no_timeout+0x20>
    6b74:	490b      	ldr	r1, [pc, #44]	; (6ba4 <unpend_thread_no_timeout+0x38>)
    6b76:	480c      	ldr	r0, [pc, #48]	; (6ba8 <unpend_thread_no_timeout+0x3c>)
    6b78:	4a0c      	ldr	r2, [pc, #48]	; (6bac <unpend_thread_no_timeout+0x40>)
    6b7a:	f240 23b9 	movw	r3, #697	; 0x2b9
    6b7e:	f002 f870 	bl	8c62 <assert_print>
    6b82:	480a      	ldr	r0, [pc, #40]	; (6bac <unpend_thread_no_timeout+0x40>)
    6b84:	f240 21b9 	movw	r1, #697	; 0x2b9
    6b88:	f002 f864 	bl	8c54 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6b8c:	68a0      	ldr	r0, [r4, #8]
    6b8e:	4621      	mov	r1, r4
    6b90:	f7ff ffca 	bl	6b28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6b94:	7b63      	ldrb	r3, [r4, #13]
    6b96:	f023 0302 	bic.w	r3, r3, #2
    6b9a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6b9c:	2300      	movs	r3, #0
    6b9e:	60a3      	str	r3, [r4, #8]
}
    6ba0:	bd10      	pop	{r4, pc}
    6ba2:	bf00      	nop
    6ba4:	0000b505 	.word	0x0000b505
    6ba8:	00009bdf 	.word	0x00009bdf
    6bac:	0000b4c2 	.word	0x0000b4c2

00006bb0 <update_cache>:
{
    6bb0:	b538      	push	{r3, r4, r5, lr}
    6bb2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    6bb4:	4814      	ldr	r0, [pc, #80]	; (6c08 <update_cache+0x58>)
    6bb6:	4d15      	ldr	r5, [pc, #84]	; (6c0c <update_cache+0x5c>)
    6bb8:	f002 fca3 	bl	9502 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6bbc:	4604      	mov	r4, r0
    6bbe:	b900      	cbnz	r0, 6bc2 <update_cache+0x12>
    6bc0:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    6bc2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    6bc4:	b9b2      	cbnz	r2, 6bf4 <update_cache+0x44>
	__ASSERT(_current != NULL, "");
    6bc6:	b963      	cbnz	r3, 6be2 <update_cache+0x32>
    6bc8:	4911      	ldr	r1, [pc, #68]	; (6c10 <update_cache+0x60>)
    6bca:	4a12      	ldr	r2, [pc, #72]	; (6c14 <update_cache+0x64>)
    6bcc:	4812      	ldr	r0, [pc, #72]	; (6c18 <update_cache+0x68>)
    6bce:	2389      	movs	r3, #137	; 0x89
    6bd0:	f002 f847 	bl	8c62 <assert_print>
    6bd4:	4811      	ldr	r0, [pc, #68]	; (6c1c <update_cache+0x6c>)
    6bd6:	f002 f844 	bl	8c62 <assert_print>
    6bda:	480e      	ldr	r0, [pc, #56]	; (6c14 <update_cache+0x64>)
    6bdc:	2189      	movs	r1, #137	; 0x89
    6bde:	f002 f839 	bl	8c54 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6be2:	68ab      	ldr	r3, [r5, #8]
    6be4:	7b5a      	ldrb	r2, [r3, #13]
    6be6:	06d2      	lsls	r2, r2, #27
    6be8:	d104      	bne.n	6bf4 <update_cache+0x44>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6bea:	69a2      	ldr	r2, [r4, #24]
    6bec:	b912      	cbnz	r2, 6bf4 <update_cache+0x44>
	if (is_preempt(_current) || is_metairq(thread)) {
    6bee:	89da      	ldrh	r2, [r3, #14]
    6bf0:	2a7f      	cmp	r2, #127	; 0x7f
    6bf2:	d806      	bhi.n	6c02 <update_cache+0x52>
		if (thread != _current) {
    6bf4:	68ab      	ldr	r3, [r5, #8]
    6bf6:	42a3      	cmp	r3, r4
    6bf8:	d002      	beq.n	6c00 <update_cache+0x50>
			z_reset_time_slice(thread);
    6bfa:	4620      	mov	r0, r4
    6bfc:	f7ff fe1a 	bl	6834 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6c00:	4623      	mov	r3, r4
    6c02:	61eb      	str	r3, [r5, #28]
}
    6c04:	bd38      	pop	{r3, r4, r5, pc}
    6c06:	bf00      	nop
    6c08:	20000c50 	.word	0x20000c50
    6c0c:	20000c30 	.word	0x20000c30
    6c10:	0000b51c 	.word	0x0000b51c
    6c14:	0000b4c2 	.word	0x0000b4c2
    6c18:	00009bdf 	.word	0x00009bdf
    6c1c:	0000b420 	.word	0x0000b420

00006c20 <move_thread_to_end_of_prio_q>:
{
    6c20:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6c22:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    6c26:	7b43      	ldrb	r3, [r0, #13]
    6c28:	2a00      	cmp	r2, #0
{
    6c2a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6c2c:	da06      	bge.n	6c3c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c32:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c34:	4601      	mov	r1, r0
    6c36:	481d      	ldr	r0, [pc, #116]	; (6cac <move_thread_to_end_of_prio_q+0x8c>)
    6c38:	f7ff ff76 	bl	6b28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6c3c:	7b63      	ldrb	r3, [r4, #13]
    6c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c42:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6c44:	4b1a      	ldr	r3, [pc, #104]	; (6cb0 <move_thread_to_end_of_prio_q+0x90>)
    6c46:	429c      	cmp	r4, r3
    6c48:	d109      	bne.n	6c5e <move_thread_to_end_of_prio_q+0x3e>
    6c4a:	491a      	ldr	r1, [pc, #104]	; (6cb4 <move_thread_to_end_of_prio_q+0x94>)
    6c4c:	481a      	ldr	r0, [pc, #104]	; (6cb8 <move_thread_to_end_of_prio_q+0x98>)
    6c4e:	4a1b      	ldr	r2, [pc, #108]	; (6cbc <move_thread_to_end_of_prio_q+0x9c>)
    6c50:	23ba      	movs	r3, #186	; 0xba
    6c52:	f002 f806 	bl	8c62 <assert_print>
    6c56:	4819      	ldr	r0, [pc, #100]	; (6cbc <move_thread_to_end_of_prio_q+0x9c>)
    6c58:	21ba      	movs	r1, #186	; 0xba
    6c5a:	f001 fffb 	bl	8c54 <assert_post_action>
	return list->head == list;
    6c5e:	4a18      	ldr	r2, [pc, #96]	; (6cc0 <move_thread_to_end_of_prio_q+0xa0>)
	return (node == list->tail) ? NULL : node->next;
    6c60:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c64:	f102 0020 	add.w	r0, r2, #32
    6c68:	4283      	cmp	r3, r0
    6c6a:	d01a      	beq.n	6ca2 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c6c:	b1cb      	cbz	r3, 6ca2 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
    6c6e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6c72:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6c76:	42b5      	cmp	r5, r6
    6c78:	d00e      	beq.n	6c98 <move_thread_to_end_of_prio_q+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c7a:	42ae      	cmp	r6, r5
    6c7c:	dd0c      	ble.n	6c98 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
    6c7e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6c80:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6c84:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6c86:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6c88:	6890      	ldr	r0, [r2, #8]
    6c8a:	1b03      	subs	r3, r0, r4
    6c8c:	4258      	negs	r0, r3
}
    6c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6c92:	4158      	adcs	r0, r3
    6c94:	f7ff bf8c 	b.w	6bb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6c98:	428b      	cmp	r3, r1
    6c9a:	d002      	beq.n	6ca2 <move_thread_to_end_of_prio_q+0x82>
    6c9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d1e7      	bne.n	6c72 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    6ca2:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6ca6:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6ca8:	6254      	str	r4, [r2, #36]	; 0x24
}
    6caa:	e7ed      	b.n	6c88 <move_thread_to_end_of_prio_q+0x68>
    6cac:	20000c50 	.word	0x20000c50
    6cb0:	20000400 	.word	0x20000400
    6cb4:	0000b4e4 	.word	0x0000b4e4
    6cb8:	00009bdf 	.word	0x00009bdf
    6cbc:	0000b4c2 	.word	0x0000b4c2
    6cc0:	20000c30 	.word	0x20000c30

00006cc4 <z_time_slice>:
{
    6cc4:	b570      	push	{r4, r5, r6, lr}
    6cc6:	4605      	mov	r5, r0
	__asm__ volatile(
    6cc8:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ccc:	f3ef 8611 	mrs	r6, BASEPRI
    6cd0:	f383 8812 	msr	BASEPRI_MAX, r3
    6cd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cd8:	482a      	ldr	r0, [pc, #168]	; (6d84 <z_time_slice+0xc0>)
    6cda:	f7ff facd 	bl	6278 <z_spin_lock_valid>
    6cde:	b968      	cbnz	r0, 6cfc <z_time_slice+0x38>
    6ce0:	4a29      	ldr	r2, [pc, #164]	; (6d88 <z_time_slice+0xc4>)
    6ce2:	492a      	ldr	r1, [pc, #168]	; (6d8c <z_time_slice+0xc8>)
    6ce4:	482a      	ldr	r0, [pc, #168]	; (6d90 <z_time_slice+0xcc>)
    6ce6:	238e      	movs	r3, #142	; 0x8e
    6ce8:	f001 ffbb 	bl	8c62 <assert_print>
    6cec:	4925      	ldr	r1, [pc, #148]	; (6d84 <z_time_slice+0xc0>)
    6cee:	4829      	ldr	r0, [pc, #164]	; (6d94 <z_time_slice+0xd0>)
    6cf0:	f001 ffb7 	bl	8c62 <assert_print>
    6cf4:	4824      	ldr	r0, [pc, #144]	; (6d88 <z_time_slice+0xc4>)
    6cf6:	218e      	movs	r1, #142	; 0x8e
    6cf8:	f001 ffac 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6cfc:	4821      	ldr	r0, [pc, #132]	; (6d84 <z_time_slice+0xc0>)
    6cfe:	f7ff fad9 	bl	62b4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6d02:	4b25      	ldr	r3, [pc, #148]	; (6d98 <z_time_slice+0xd4>)
    6d04:	4a25      	ldr	r2, [pc, #148]	; (6d9c <z_time_slice+0xd8>)
    6d06:	689c      	ldr	r4, [r3, #8]
    6d08:	6811      	ldr	r1, [r2, #0]
    6d0a:	428c      	cmp	r4, r1
    6d0c:	d119      	bne.n	6d42 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    6d0e:	4620      	mov	r0, r4
    6d10:	f7ff fd90 	bl	6834 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d14:	481b      	ldr	r0, [pc, #108]	; (6d84 <z_time_slice+0xc0>)
    6d16:	f7ff fabd 	bl	6294 <z_spin_unlock_valid>
    6d1a:	b968      	cbnz	r0, 6d38 <z_time_slice+0x74>
    6d1c:	4a1a      	ldr	r2, [pc, #104]	; (6d88 <z_time_slice+0xc4>)
    6d1e:	4920      	ldr	r1, [pc, #128]	; (6da0 <z_time_slice+0xdc>)
    6d20:	481b      	ldr	r0, [pc, #108]	; (6d90 <z_time_slice+0xcc>)
    6d22:	23b9      	movs	r3, #185	; 0xb9
    6d24:	f001 ff9d 	bl	8c62 <assert_print>
    6d28:	4916      	ldr	r1, [pc, #88]	; (6d84 <z_time_slice+0xc0>)
    6d2a:	481e      	ldr	r0, [pc, #120]	; (6da4 <z_time_slice+0xe0>)
    6d2c:	f001 ff99 	bl	8c62 <assert_print>
    6d30:	4815      	ldr	r0, [pc, #84]	; (6d88 <z_time_slice+0xc4>)
    6d32:	21b9      	movs	r1, #185	; 0xb9
    6d34:	f001 ff8e 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6d38:	f386 8811 	msr	BASEPRI, r6
    6d3c:	f3bf 8f6f 	isb	sy
}
    6d40:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6d42:	2100      	movs	r1, #0
    6d44:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    6d46:	4a18      	ldr	r2, [pc, #96]	; (6da8 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    6d48:	6812      	ldr	r2, [r2, #0]
    6d4a:	b1c2      	cbz	r2, 6d7e <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    6d4c:	89e2      	ldrh	r2, [r4, #14]
    6d4e:	2a7f      	cmp	r2, #127	; 0x7f
    6d50:	d815      	bhi.n	6d7e <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    6d52:	7b62      	ldrb	r2, [r4, #13]
    6d54:	06d2      	lsls	r2, r2, #27
    6d56:	d112      	bne.n	6d7e <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6d58:	4a14      	ldr	r2, [pc, #80]	; (6dac <z_time_slice+0xe8>)
    6d5a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6d5e:	6812      	ldr	r2, [r2, #0]
    6d60:	4291      	cmp	r1, r2
    6d62:	db0c      	blt.n	6d7e <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    6d64:	4a12      	ldr	r2, [pc, #72]	; (6db0 <z_time_slice+0xec>)
    6d66:	4294      	cmp	r4, r2
    6d68:	d009      	beq.n	6d7e <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    6d6a:	691a      	ldr	r2, [r3, #16]
    6d6c:	42aa      	cmp	r2, r5
    6d6e:	dc03      	bgt.n	6d78 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    6d70:	4620      	mov	r0, r4
    6d72:	f7ff ff55 	bl	6c20 <move_thread_to_end_of_prio_q>
    6d76:	e7ca      	b.n	6d0e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    6d78:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    6d7a:	611a      	str	r2, [r3, #16]
    6d7c:	e7ca      	b.n	6d14 <z_time_slice+0x50>
    6d7e:	2200      	movs	r2, #0
    6d80:	e7fb      	b.n	6d7a <z_time_slice+0xb6>
    6d82:	bf00      	nop
    6d84:	20000c64 	.word	0x20000c64
    6d88:	00009f7a 	.word	0x00009f7a
    6d8c:	00009fd3 	.word	0x00009fd3
    6d90:	00009bdf 	.word	0x00009bdf
    6d94:	00009fe8 	.word	0x00009fe8
    6d98:	20000c30 	.word	0x20000c30
    6d9c:	20000c60 	.word	0x20000c60
    6da0:	00009fa7 	.word	0x00009fa7
    6da4:	00009fbe 	.word	0x00009fbe
    6da8:	20000c6c 	.word	0x20000c6c
    6dac:	20000c68 	.word	0x20000c68
    6db0:	20000400 	.word	0x20000400

00006db4 <ready_thread>:
{
    6db4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6db6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6dba:	7b43      	ldrb	r3, [r0, #13]
    6dbc:	2a00      	cmp	r2, #0
{
    6dbe:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6dc0:	db38      	blt.n	6e34 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6dc2:	06da      	lsls	r2, r3, #27
    6dc4:	d136      	bne.n	6e34 <ready_thread+0x80>
    6dc6:	6982      	ldr	r2, [r0, #24]
    6dc8:	2a00      	cmp	r2, #0
    6dca:	d133      	bne.n	6e34 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    6dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6dd0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6dd2:	4b19      	ldr	r3, [pc, #100]	; (6e38 <ready_thread+0x84>)
    6dd4:	4298      	cmp	r0, r3
    6dd6:	d109      	bne.n	6dec <ready_thread+0x38>
    6dd8:	4918      	ldr	r1, [pc, #96]	; (6e3c <ready_thread+0x88>)
    6dda:	4819      	ldr	r0, [pc, #100]	; (6e40 <ready_thread+0x8c>)
    6ddc:	4a19      	ldr	r2, [pc, #100]	; (6e44 <ready_thread+0x90>)
    6dde:	23ba      	movs	r3, #186	; 0xba
    6de0:	f001 ff3f 	bl	8c62 <assert_print>
    6de4:	4817      	ldr	r0, [pc, #92]	; (6e44 <ready_thread+0x90>)
    6de6:	21ba      	movs	r1, #186	; 0xba
    6de8:	f001 ff34 	bl	8c54 <assert_post_action>
	return list->head == list;
    6dec:	4a16      	ldr	r2, [pc, #88]	; (6e48 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    6dee:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6df2:	f102 0020 	add.w	r0, r2, #32
    6df6:	4283      	cmp	r3, r0
    6df8:	d017      	beq.n	6e2a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dfa:	b1b3      	cbz	r3, 6e2a <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
    6dfc:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6e00:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6e04:	42b5      	cmp	r5, r6
    6e06:	d00b      	beq.n	6e20 <ready_thread+0x6c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e08:	42ae      	cmp	r6, r5
    6e0a:	dd09      	ble.n	6e20 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
    6e0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6e0e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6e12:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6e14:	605c      	str	r4, [r3, #4]
}
    6e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    6e1a:	2000      	movs	r0, #0
    6e1c:	f7ff bec8 	b.w	6bb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6e20:	4299      	cmp	r1, r3
    6e22:	d002      	beq.n	6e2a <ready_thread+0x76>
    6e24:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6e26:	2b00      	cmp	r3, #0
    6e28:	d1ea      	bne.n	6e00 <ready_thread+0x4c>
	node->prev = tail;
    6e2a:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    6e2e:	600c      	str	r4, [r1, #0]
	list->tail = node;
    6e30:	6254      	str	r4, [r2, #36]	; 0x24
}
    6e32:	e7f0      	b.n	6e16 <ready_thread+0x62>
}
    6e34:	bd70      	pop	{r4, r5, r6, pc}
    6e36:	bf00      	nop
    6e38:	20000400 	.word	0x20000400
    6e3c:	0000b4e4 	.word	0x0000b4e4
    6e40:	00009bdf 	.word	0x00009bdf
    6e44:	0000b4c2 	.word	0x0000b4c2
    6e48:	20000c30 	.word	0x20000c30

00006e4c <z_ready_thread>:
{
    6e4c:	b538      	push	{r3, r4, r5, lr}
    6e4e:	4604      	mov	r4, r0
	__asm__ volatile(
    6e50:	f04f 0340 	mov.w	r3, #64	; 0x40
    6e54:	f3ef 8511 	mrs	r5, BASEPRI
    6e58:	f383 8812 	msr	BASEPRI_MAX, r3
    6e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e60:	4817      	ldr	r0, [pc, #92]	; (6ec0 <z_ready_thread+0x74>)
    6e62:	f7ff fa09 	bl	6278 <z_spin_lock_valid>
    6e66:	b968      	cbnz	r0, 6e84 <z_ready_thread+0x38>
    6e68:	4a16      	ldr	r2, [pc, #88]	; (6ec4 <z_ready_thread+0x78>)
    6e6a:	4917      	ldr	r1, [pc, #92]	; (6ec8 <z_ready_thread+0x7c>)
    6e6c:	4817      	ldr	r0, [pc, #92]	; (6ecc <z_ready_thread+0x80>)
    6e6e:	238e      	movs	r3, #142	; 0x8e
    6e70:	f001 fef7 	bl	8c62 <assert_print>
    6e74:	4912      	ldr	r1, [pc, #72]	; (6ec0 <z_ready_thread+0x74>)
    6e76:	4816      	ldr	r0, [pc, #88]	; (6ed0 <z_ready_thread+0x84>)
    6e78:	f001 fef3 	bl	8c62 <assert_print>
    6e7c:	4811      	ldr	r0, [pc, #68]	; (6ec4 <z_ready_thread+0x78>)
    6e7e:	218e      	movs	r1, #142	; 0x8e
    6e80:	f001 fee8 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e84:	480e      	ldr	r0, [pc, #56]	; (6ec0 <z_ready_thread+0x74>)
    6e86:	f7ff fa15 	bl	62b4 <z_spin_lock_set_owner>
			ready_thread(thread);
    6e8a:	4620      	mov	r0, r4
    6e8c:	f7ff ff92 	bl	6db4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e90:	480b      	ldr	r0, [pc, #44]	; (6ec0 <z_ready_thread+0x74>)
    6e92:	f7ff f9ff 	bl	6294 <z_spin_unlock_valid>
    6e96:	b968      	cbnz	r0, 6eb4 <z_ready_thread+0x68>
    6e98:	4a0a      	ldr	r2, [pc, #40]	; (6ec4 <z_ready_thread+0x78>)
    6e9a:	490e      	ldr	r1, [pc, #56]	; (6ed4 <z_ready_thread+0x88>)
    6e9c:	480b      	ldr	r0, [pc, #44]	; (6ecc <z_ready_thread+0x80>)
    6e9e:	23b9      	movs	r3, #185	; 0xb9
    6ea0:	f001 fedf 	bl	8c62 <assert_print>
    6ea4:	4906      	ldr	r1, [pc, #24]	; (6ec0 <z_ready_thread+0x74>)
    6ea6:	480c      	ldr	r0, [pc, #48]	; (6ed8 <z_ready_thread+0x8c>)
    6ea8:	f001 fedb 	bl	8c62 <assert_print>
    6eac:	4805      	ldr	r0, [pc, #20]	; (6ec4 <z_ready_thread+0x78>)
    6eae:	21b9      	movs	r1, #185	; 0xb9
    6eb0:	f001 fed0 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6eb4:	f385 8811 	msr	BASEPRI, r5
    6eb8:	f3bf 8f6f 	isb	sy
}
    6ebc:	bd38      	pop	{r3, r4, r5, pc}
    6ebe:	bf00      	nop
    6ec0:	20000c64 	.word	0x20000c64
    6ec4:	00009f7a 	.word	0x00009f7a
    6ec8:	00009fd3 	.word	0x00009fd3
    6ecc:	00009bdf 	.word	0x00009bdf
    6ed0:	00009fe8 	.word	0x00009fe8
    6ed4:	00009fa7 	.word	0x00009fa7
    6ed8:	00009fbe 	.word	0x00009fbe

00006edc <z_sched_start>:
{
    6edc:	b538      	push	{r3, r4, r5, lr}
    6ede:	4604      	mov	r4, r0
	__asm__ volatile(
    6ee0:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ee4:	f3ef 8511 	mrs	r5, BASEPRI
    6ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    6eec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6ef0:	481d      	ldr	r0, [pc, #116]	; (6f68 <z_sched_start+0x8c>)
    6ef2:	f7ff f9c1 	bl	6278 <z_spin_lock_valid>
    6ef6:	b968      	cbnz	r0, 6f14 <z_sched_start+0x38>
    6ef8:	4a1c      	ldr	r2, [pc, #112]	; (6f6c <z_sched_start+0x90>)
    6efa:	491d      	ldr	r1, [pc, #116]	; (6f70 <z_sched_start+0x94>)
    6efc:	481d      	ldr	r0, [pc, #116]	; (6f74 <z_sched_start+0x98>)
    6efe:	238e      	movs	r3, #142	; 0x8e
    6f00:	f001 feaf 	bl	8c62 <assert_print>
    6f04:	4918      	ldr	r1, [pc, #96]	; (6f68 <z_sched_start+0x8c>)
    6f06:	481c      	ldr	r0, [pc, #112]	; (6f78 <z_sched_start+0x9c>)
    6f08:	f001 feab 	bl	8c62 <assert_print>
    6f0c:	4817      	ldr	r0, [pc, #92]	; (6f6c <z_sched_start+0x90>)
    6f0e:	218e      	movs	r1, #142	; 0x8e
    6f10:	f001 fea0 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f14:	4814      	ldr	r0, [pc, #80]	; (6f68 <z_sched_start+0x8c>)
    6f16:	f7ff f9cd 	bl	62b4 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6f1a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    6f1c:	075a      	lsls	r2, r3, #29
    6f1e:	d416      	bmi.n	6f4e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f20:	4811      	ldr	r0, [pc, #68]	; (6f68 <z_sched_start+0x8c>)
    6f22:	f7ff f9b7 	bl	6294 <z_spin_unlock_valid>
    6f26:	b968      	cbnz	r0, 6f44 <z_sched_start+0x68>
    6f28:	4a10      	ldr	r2, [pc, #64]	; (6f6c <z_sched_start+0x90>)
    6f2a:	4914      	ldr	r1, [pc, #80]	; (6f7c <z_sched_start+0xa0>)
    6f2c:	4811      	ldr	r0, [pc, #68]	; (6f74 <z_sched_start+0x98>)
    6f2e:	23b9      	movs	r3, #185	; 0xb9
    6f30:	f001 fe97 	bl	8c62 <assert_print>
    6f34:	490c      	ldr	r1, [pc, #48]	; (6f68 <z_sched_start+0x8c>)
    6f36:	4812      	ldr	r0, [pc, #72]	; (6f80 <z_sched_start+0xa4>)
    6f38:	f001 fe93 	bl	8c62 <assert_print>
    6f3c:	480b      	ldr	r0, [pc, #44]	; (6f6c <z_sched_start+0x90>)
    6f3e:	21b9      	movs	r1, #185	; 0xb9
    6f40:	f001 fe88 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    6f44:	f385 8811 	msr	BASEPRI, r5
    6f48:	f3bf 8f6f 	isb	sy
}
    6f4c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6f4e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6f52:	4620      	mov	r0, r4
    6f54:	7363      	strb	r3, [r4, #13]
    6f56:	f7ff ff2d 	bl	6db4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6f5a:	4629      	mov	r1, r5
    6f5c:	4802      	ldr	r0, [pc, #8]	; (6f68 <z_sched_start+0x8c>)
}
    6f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6f62:	f7ff bd29 	b.w	69b8 <z_reschedule>
    6f66:	bf00      	nop
    6f68:	20000c64 	.word	0x20000c64
    6f6c:	00009f7a 	.word	0x00009f7a
    6f70:	00009fd3 	.word	0x00009fd3
    6f74:	00009bdf 	.word	0x00009bdf
    6f78:	00009fe8 	.word	0x00009fe8
    6f7c:	00009fa7 	.word	0x00009fa7
    6f80:	00009fbe 	.word	0x00009fbe

00006f84 <z_thread_timeout>:
{
    6f84:	b570      	push	{r4, r5, r6, lr}
    6f86:	4604      	mov	r4, r0
	__asm__ volatile(
    6f88:	f04f 0340 	mov.w	r3, #64	; 0x40
    6f8c:	f3ef 8611 	mrs	r6, BASEPRI
    6f90:	f383 8812 	msr	BASEPRI_MAX, r3
    6f94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f98:	4820      	ldr	r0, [pc, #128]	; (701c <z_thread_timeout+0x98>)
    6f9a:	f7ff f96d 	bl	6278 <z_spin_lock_valid>
    6f9e:	b968      	cbnz	r0, 6fbc <z_thread_timeout+0x38>
    6fa0:	4a1f      	ldr	r2, [pc, #124]	; (7020 <z_thread_timeout+0x9c>)
    6fa2:	4920      	ldr	r1, [pc, #128]	; (7024 <z_thread_timeout+0xa0>)
    6fa4:	4820      	ldr	r0, [pc, #128]	; (7028 <z_thread_timeout+0xa4>)
    6fa6:	238e      	movs	r3, #142	; 0x8e
    6fa8:	f001 fe5b 	bl	8c62 <assert_print>
    6fac:	491b      	ldr	r1, [pc, #108]	; (701c <z_thread_timeout+0x98>)
    6fae:	481f      	ldr	r0, [pc, #124]	; (702c <z_thread_timeout+0xa8>)
    6fb0:	f001 fe57 	bl	8c62 <assert_print>
    6fb4:	481a      	ldr	r0, [pc, #104]	; (7020 <z_thread_timeout+0x9c>)
    6fb6:	218e      	movs	r1, #142	; 0x8e
    6fb8:	f001 fe4c 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fbc:	4817      	ldr	r0, [pc, #92]	; (701c <z_thread_timeout+0x98>)
    6fbe:	f7ff f979 	bl	62b4 <z_spin_lock_set_owner>
		if (!killed) {
    6fc2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6fc6:	f013 0f28 	tst.w	r3, #40	; 0x28
    6fca:	d110      	bne.n	6fee <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6fcc:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6fd0:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6fd4:	b113      	cbz	r3, 6fdc <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6fd6:	4628      	mov	r0, r5
    6fd8:	f7ff fdc8 	bl	6b6c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6fdc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6fe0:	f023 0314 	bic.w	r3, r3, #20
    6fe4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6fe8:	4628      	mov	r0, r5
    6fea:	f7ff fee3 	bl	6db4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fee:	480b      	ldr	r0, [pc, #44]	; (701c <z_thread_timeout+0x98>)
    6ff0:	f7ff f950 	bl	6294 <z_spin_unlock_valid>
    6ff4:	b968      	cbnz	r0, 7012 <z_thread_timeout+0x8e>
    6ff6:	4a0a      	ldr	r2, [pc, #40]	; (7020 <z_thread_timeout+0x9c>)
    6ff8:	490d      	ldr	r1, [pc, #52]	; (7030 <z_thread_timeout+0xac>)
    6ffa:	480b      	ldr	r0, [pc, #44]	; (7028 <z_thread_timeout+0xa4>)
    6ffc:	23b9      	movs	r3, #185	; 0xb9
    6ffe:	f001 fe30 	bl	8c62 <assert_print>
    7002:	4906      	ldr	r1, [pc, #24]	; (701c <z_thread_timeout+0x98>)
    7004:	480b      	ldr	r0, [pc, #44]	; (7034 <z_thread_timeout+0xb0>)
    7006:	f001 fe2c 	bl	8c62 <assert_print>
    700a:	4805      	ldr	r0, [pc, #20]	; (7020 <z_thread_timeout+0x9c>)
    700c:	21b9      	movs	r1, #185	; 0xb9
    700e:	f001 fe21 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7012:	f386 8811 	msr	BASEPRI, r6
    7016:	f3bf 8f6f 	isb	sy
}
    701a:	bd70      	pop	{r4, r5, r6, pc}
    701c:	20000c64 	.word	0x20000c64
    7020:	00009f7a 	.word	0x00009f7a
    7024:	00009fd3 	.word	0x00009fd3
    7028:	00009bdf 	.word	0x00009bdf
    702c:	00009fe8 	.word	0x00009fe8
    7030:	00009fa7 	.word	0x00009fa7
    7034:	00009fbe 	.word	0x00009fbe

00007038 <unready_thread>:
{
    7038:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    703a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    703e:	7b43      	ldrb	r3, [r0, #13]
    7040:	2a00      	cmp	r2, #0
{
    7042:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7044:	da06      	bge.n	7054 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    704a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    704c:	4601      	mov	r1, r0
    704e:	4806      	ldr	r0, [pc, #24]	; (7068 <unready_thread+0x30>)
    7050:	f7ff fd6a 	bl	6b28 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7054:	4b05      	ldr	r3, [pc, #20]	; (706c <unready_thread+0x34>)
    7056:	6898      	ldr	r0, [r3, #8]
    7058:	1b03      	subs	r3, r0, r4
    705a:	4258      	negs	r0, r3
}
    705c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7060:	4158      	adcs	r0, r3
    7062:	f7ff bda5 	b.w	6bb0 <update_cache>
    7066:	bf00      	nop
    7068:	20000c50 	.word	0x20000c50
    706c:	20000c30 	.word	0x20000c30

00007070 <add_to_waitq_locked>:
{
    7070:	b538      	push	{r3, r4, r5, lr}
    7072:	4604      	mov	r4, r0
    7074:	460d      	mov	r5, r1
	unready_thread(thread);
    7076:	f7ff ffdf 	bl	7038 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    707a:	7b63      	ldrb	r3, [r4, #13]
    707c:	f043 0302 	orr.w	r3, r3, #2
    7080:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7082:	b1f5      	cbz	r5, 70c2 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7084:	4b15      	ldr	r3, [pc, #84]	; (70dc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    7086:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7088:	429c      	cmp	r4, r3
    708a:	d109      	bne.n	70a0 <add_to_waitq_locked+0x30>
    708c:	4914      	ldr	r1, [pc, #80]	; (70e0 <add_to_waitq_locked+0x70>)
    708e:	4815      	ldr	r0, [pc, #84]	; (70e4 <add_to_waitq_locked+0x74>)
    7090:	4a15      	ldr	r2, [pc, #84]	; (70e8 <add_to_waitq_locked+0x78>)
    7092:	23ba      	movs	r3, #186	; 0xba
    7094:	f001 fde5 	bl	8c62 <assert_print>
    7098:	4813      	ldr	r0, [pc, #76]	; (70e8 <add_to_waitq_locked+0x78>)
    709a:	21ba      	movs	r1, #186	; 0xba
    709c:	f001 fdda 	bl	8c54 <assert_post_action>
	return list->head == list;
    70a0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70a2:	429d      	cmp	r5, r3
    70a4:	d014      	beq.n	70d0 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70a6:	b19b      	cbz	r3, 70d0 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
    70a8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    70ac:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    70b0:	428a      	cmp	r2, r1
    70b2:	d007      	beq.n	70c4 <add_to_waitq_locked+0x54>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70b4:	4291      	cmp	r1, r2
    70b6:	dd05      	ble.n	70c4 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
    70b8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    70ba:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    70be:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    70c0:	605c      	str	r4, [r3, #4]
}
    70c2:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    70c4:	6869      	ldr	r1, [r5, #4]
    70c6:	428b      	cmp	r3, r1
    70c8:	d002      	beq.n	70d0 <add_to_waitq_locked+0x60>
    70ca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70cc:	2b00      	cmp	r3, #0
    70ce:	d1ed      	bne.n	70ac <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    70d0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    70d2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    70d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    70d8:	606c      	str	r4, [r5, #4]
}
    70da:	e7f2      	b.n	70c2 <add_to_waitq_locked+0x52>
    70dc:	20000400 	.word	0x20000400
    70e0:	0000b4e4 	.word	0x0000b4e4
    70e4:	00009bdf 	.word	0x00009bdf
    70e8:	0000b4c2 	.word	0x0000b4c2

000070ec <pend>:
{
    70ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70f0:	4604      	mov	r4, r0
    70f2:	4688      	mov	r8, r1
    70f4:	4616      	mov	r6, r2
    70f6:	461d      	mov	r5, r3
	__asm__ volatile(
    70f8:	f04f 0340 	mov.w	r3, #64	; 0x40
    70fc:	f3ef 8711 	mrs	r7, BASEPRI
    7100:	f383 8812 	msr	BASEPRI_MAX, r3
    7104:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7108:	481f      	ldr	r0, [pc, #124]	; (7188 <pend+0x9c>)
    710a:	f7ff f8b5 	bl	6278 <z_spin_lock_valid>
    710e:	b968      	cbnz	r0, 712c <pend+0x40>
    7110:	4a1e      	ldr	r2, [pc, #120]	; (718c <pend+0xa0>)
    7112:	491f      	ldr	r1, [pc, #124]	; (7190 <pend+0xa4>)
    7114:	481f      	ldr	r0, [pc, #124]	; (7194 <pend+0xa8>)
    7116:	238e      	movs	r3, #142	; 0x8e
    7118:	f001 fda3 	bl	8c62 <assert_print>
    711c:	491a      	ldr	r1, [pc, #104]	; (7188 <pend+0x9c>)
    711e:	481e      	ldr	r0, [pc, #120]	; (7198 <pend+0xac>)
    7120:	f001 fd9f 	bl	8c62 <assert_print>
    7124:	4819      	ldr	r0, [pc, #100]	; (718c <pend+0xa0>)
    7126:	218e      	movs	r1, #142	; 0x8e
    7128:	f001 fd94 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    712c:	4816      	ldr	r0, [pc, #88]	; (7188 <pend+0x9c>)
    712e:	f7ff f8c1 	bl	62b4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    7132:	4620      	mov	r0, r4
    7134:	4641      	mov	r1, r8
    7136:	f7ff ff9b 	bl	7070 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    713a:	4813      	ldr	r0, [pc, #76]	; (7188 <pend+0x9c>)
    713c:	f7ff f8aa 	bl	6294 <z_spin_unlock_valid>
    7140:	b968      	cbnz	r0, 715e <pend+0x72>
    7142:	4a12      	ldr	r2, [pc, #72]	; (718c <pend+0xa0>)
    7144:	4915      	ldr	r1, [pc, #84]	; (719c <pend+0xb0>)
    7146:	4813      	ldr	r0, [pc, #76]	; (7194 <pend+0xa8>)
    7148:	23b9      	movs	r3, #185	; 0xb9
    714a:	f001 fd8a 	bl	8c62 <assert_print>
    714e:	490e      	ldr	r1, [pc, #56]	; (7188 <pend+0x9c>)
    7150:	4813      	ldr	r0, [pc, #76]	; (71a0 <pend+0xb4>)
    7152:	f001 fd86 	bl	8c62 <assert_print>
    7156:	480d      	ldr	r0, [pc, #52]	; (718c <pend+0xa0>)
    7158:	21b9      	movs	r1, #185	; 0xb9
    715a:	f001 fd7b 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    715e:	f387 8811 	msr	BASEPRI, r7
    7162:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7166:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    716a:	bf08      	it	eq
    716c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7170:	d008      	beq.n	7184 <pend+0x98>
    7172:	4632      	mov	r2, r6
    7174:	462b      	mov	r3, r5
    7176:	f104 0018 	add.w	r0, r4, #24
    717a:	490a      	ldr	r1, [pc, #40]	; (71a4 <pend+0xb8>)
}
    717c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7180:	f000 bd02 	b.w	7b88 <z_add_timeout>
    7184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7188:	20000c64 	.word	0x20000c64
    718c:	00009f7a 	.word	0x00009f7a
    7190:	00009fd3 	.word	0x00009fd3
    7194:	00009bdf 	.word	0x00009bdf
    7198:	00009fe8 	.word	0x00009fe8
    719c:	00009fa7 	.word	0x00009fa7
    71a0:	00009fbe 	.word	0x00009fbe
    71a4:	00006f85 	.word	0x00006f85

000071a8 <z_pend_curr>:
{
    71a8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    71aa:	4b11      	ldr	r3, [pc, #68]	; (71f0 <z_pend_curr+0x48>)
{
    71ac:	4604      	mov	r4, r0
	pending_current = _current;
    71ae:	6898      	ldr	r0, [r3, #8]
    71b0:	4b10      	ldr	r3, [pc, #64]	; (71f4 <z_pend_curr+0x4c>)
{
    71b2:	460d      	mov	r5, r1
	pending_current = _current;
    71b4:	6018      	str	r0, [r3, #0]
{
    71b6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    71b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    71bc:	f7ff ff96 	bl	70ec <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71c0:	4620      	mov	r0, r4
    71c2:	f7ff f867 	bl	6294 <z_spin_unlock_valid>
    71c6:	b968      	cbnz	r0, 71e4 <z_pend_curr+0x3c>
    71c8:	4a0b      	ldr	r2, [pc, #44]	; (71f8 <z_pend_curr+0x50>)
    71ca:	490c      	ldr	r1, [pc, #48]	; (71fc <z_pend_curr+0x54>)
    71cc:	480c      	ldr	r0, [pc, #48]	; (7200 <z_pend_curr+0x58>)
    71ce:	23d0      	movs	r3, #208	; 0xd0
    71d0:	f001 fd47 	bl	8c62 <assert_print>
    71d4:	480b      	ldr	r0, [pc, #44]	; (7204 <z_pend_curr+0x5c>)
    71d6:	4621      	mov	r1, r4
    71d8:	f001 fd43 	bl	8c62 <assert_print>
    71dc:	4806      	ldr	r0, [pc, #24]	; (71f8 <z_pend_curr+0x50>)
    71de:	21d0      	movs	r1, #208	; 0xd0
    71e0:	f001 fd38 	bl	8c54 <assert_post_action>
    71e4:	4628      	mov	r0, r5
}
    71e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    71ea:	f7fb bc99 	b.w	2b20 <arch_swap>
    71ee:	bf00      	nop
    71f0:	20000c30 	.word	0x20000c30
    71f4:	20000c60 	.word	0x20000c60
    71f8:	00009f7a 	.word	0x00009f7a
    71fc:	00009fa7 	.word	0x00009fa7
    7200:	00009bdf 	.word	0x00009bdf
    7204:	00009fbe 	.word	0x00009fbe

00007208 <z_set_prio>:
{
    7208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    720a:	4604      	mov	r4, r0
    720c:	460d      	mov	r5, r1
	__asm__ volatile(
    720e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7212:	f3ef 8611 	mrs	r6, BASEPRI
    7216:	f383 8812 	msr	BASEPRI_MAX, r3
    721a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    721e:	4839      	ldr	r0, [pc, #228]	; (7304 <z_set_prio+0xfc>)
    7220:	f7ff f82a 	bl	6278 <z_spin_lock_valid>
    7224:	b968      	cbnz	r0, 7242 <z_set_prio+0x3a>
    7226:	4a38      	ldr	r2, [pc, #224]	; (7308 <z_set_prio+0x100>)
    7228:	4938      	ldr	r1, [pc, #224]	; (730c <z_set_prio+0x104>)
    722a:	4839      	ldr	r0, [pc, #228]	; (7310 <z_set_prio+0x108>)
    722c:	238e      	movs	r3, #142	; 0x8e
    722e:	f001 fd18 	bl	8c62 <assert_print>
    7232:	4934      	ldr	r1, [pc, #208]	; (7304 <z_set_prio+0xfc>)
    7234:	4837      	ldr	r0, [pc, #220]	; (7314 <z_set_prio+0x10c>)
    7236:	f001 fd14 	bl	8c62 <assert_print>
    723a:	4833      	ldr	r0, [pc, #204]	; (7308 <z_set_prio+0x100>)
    723c:	218e      	movs	r1, #142	; 0x8e
    723e:	f001 fd09 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7242:	4830      	ldr	r0, [pc, #192]	; (7304 <z_set_prio+0xfc>)
    7244:	f7ff f836 	bl	62b4 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    7248:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    724a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    724c:	b26d      	sxtb	r5, r5
    724e:	d156      	bne.n	72fe <z_set_prio+0xf6>
		if (need_sched) {
    7250:	69a2      	ldr	r2, [r4, #24]
    7252:	2a00      	cmp	r2, #0
    7254:	d153      	bne.n	72fe <z_set_prio+0xf6>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    725a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    725c:	482e      	ldr	r0, [pc, #184]	; (7318 <z_set_prio+0x110>)
    725e:	4621      	mov	r1, r4
    7260:	f7ff fc62 	bl	6b28 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7264:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    7266:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7268:	f063 037f 	orn	r3, r3, #127	; 0x7f
    726c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    726e:	4b2b      	ldr	r3, [pc, #172]	; (731c <z_set_prio+0x114>)
    7270:	429c      	cmp	r4, r3
    7272:	d109      	bne.n	7288 <z_set_prio+0x80>
    7274:	492a      	ldr	r1, [pc, #168]	; (7320 <z_set_prio+0x118>)
    7276:	4826      	ldr	r0, [pc, #152]	; (7310 <z_set_prio+0x108>)
    7278:	4a2a      	ldr	r2, [pc, #168]	; (7324 <z_set_prio+0x11c>)
    727a:	23ba      	movs	r3, #186	; 0xba
    727c:	f001 fcf1 	bl	8c62 <assert_print>
    7280:	4828      	ldr	r0, [pc, #160]	; (7324 <z_set_prio+0x11c>)
    7282:	21ba      	movs	r1, #186	; 0xba
    7284:	f001 fce6 	bl	8c54 <assert_post_action>
	return list->head == list;
    7288:	4a27      	ldr	r2, [pc, #156]	; (7328 <z_set_prio+0x120>)
	return (node == list->tail) ? NULL : node->next;
    728a:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    728e:	f102 0020 	add.w	r0, r2, #32
    7292:	4283      	cmp	r3, r0
    7294:	d02e      	beq.n	72f4 <z_set_prio+0xec>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7296:	b36b      	cbz	r3, 72f4 <z_set_prio+0xec>
	int32_t b1 = thread_1->base.prio;
    7298:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    729c:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    72a0:	42bd      	cmp	r5, r7
    72a2:	d022      	beq.n	72ea <z_set_prio+0xe2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    72a4:	42af      	cmp	r7, r5
    72a6:	dd20      	ble.n	72ea <z_set_prio+0xe2>
	sys_dnode_t *const prev = successor->prev;
    72a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    72aa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    72ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    72b0:	605c      	str	r4, [r3, #4]
			update_cache(1);
    72b2:	2001      	movs	r0, #1
    72b4:	f7ff fc7c 	bl	6bb0 <update_cache>
    72b8:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72ba:	4812      	ldr	r0, [pc, #72]	; (7304 <z_set_prio+0xfc>)
    72bc:	f7fe ffea 	bl	6294 <z_spin_unlock_valid>
    72c0:	b968      	cbnz	r0, 72de <z_set_prio+0xd6>
    72c2:	4a11      	ldr	r2, [pc, #68]	; (7308 <z_set_prio+0x100>)
    72c4:	4919      	ldr	r1, [pc, #100]	; (732c <z_set_prio+0x124>)
    72c6:	4812      	ldr	r0, [pc, #72]	; (7310 <z_set_prio+0x108>)
    72c8:	23b9      	movs	r3, #185	; 0xb9
    72ca:	f001 fcca 	bl	8c62 <assert_print>
    72ce:	490d      	ldr	r1, [pc, #52]	; (7304 <z_set_prio+0xfc>)
    72d0:	4817      	ldr	r0, [pc, #92]	; (7330 <z_set_prio+0x128>)
    72d2:	f001 fcc6 	bl	8c62 <assert_print>
    72d6:	480c      	ldr	r0, [pc, #48]	; (7308 <z_set_prio+0x100>)
    72d8:	21b9      	movs	r1, #185	; 0xb9
    72da:	f001 fcbb 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    72de:	f386 8811 	msr	BASEPRI, r6
    72e2:	f3bf 8f6f 	isb	sy
}
    72e6:	4620      	mov	r0, r4
    72e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    72ea:	428b      	cmp	r3, r1
    72ec:	d002      	beq.n	72f4 <z_set_prio+0xec>
    72ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    72f0:	2b00      	cmp	r3, #0
    72f2:	d1d3      	bne.n	729c <z_set_prio+0x94>
	node->prev = tail;
    72f4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    72f8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    72fa:	6254      	str	r4, [r2, #36]	; 0x24
}
    72fc:	e7d9      	b.n	72b2 <z_set_prio+0xaa>
			thread->base.prio = prio;
    72fe:	73a5      	strb	r5, [r4, #14]
    7300:	2400      	movs	r4, #0
    7302:	e7da      	b.n	72ba <z_set_prio+0xb2>
    7304:	20000c64 	.word	0x20000c64
    7308:	00009f7a 	.word	0x00009f7a
    730c:	00009fd3 	.word	0x00009fd3
    7310:	00009bdf 	.word	0x00009bdf
    7314:	00009fe8 	.word	0x00009fe8
    7318:	20000c50 	.word	0x20000c50
    731c:	20000400 	.word	0x20000400
    7320:	0000b4e4 	.word	0x0000b4e4
    7324:	0000b4c2 	.word	0x0000b4c2
    7328:	20000c30 	.word	0x20000c30
    732c:	00009fa7 	.word	0x00009fa7
    7330:	00009fbe 	.word	0x00009fbe

00007334 <z_impl_k_thread_suspend>:
{
    7334:	b570      	push	{r4, r5, r6, lr}
    7336:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7338:	3018      	adds	r0, #24
    733a:	f000 fced 	bl	7d18 <z_abort_timeout>
	__asm__ volatile(
    733e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7342:	f3ef 8611 	mrs	r6, BASEPRI
    7346:	f383 8812 	msr	BASEPRI_MAX, r3
    734a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    734e:	4825      	ldr	r0, [pc, #148]	; (73e4 <z_impl_k_thread_suspend+0xb0>)
    7350:	f7fe ff92 	bl	6278 <z_spin_lock_valid>
    7354:	b968      	cbnz	r0, 7372 <z_impl_k_thread_suspend+0x3e>
    7356:	4a24      	ldr	r2, [pc, #144]	; (73e8 <z_impl_k_thread_suspend+0xb4>)
    7358:	4924      	ldr	r1, [pc, #144]	; (73ec <z_impl_k_thread_suspend+0xb8>)
    735a:	4825      	ldr	r0, [pc, #148]	; (73f0 <z_impl_k_thread_suspend+0xbc>)
    735c:	238e      	movs	r3, #142	; 0x8e
    735e:	f001 fc80 	bl	8c62 <assert_print>
    7362:	4920      	ldr	r1, [pc, #128]	; (73e4 <z_impl_k_thread_suspend+0xb0>)
    7364:	4823      	ldr	r0, [pc, #140]	; (73f4 <z_impl_k_thread_suspend+0xc0>)
    7366:	f001 fc7c 	bl	8c62 <assert_print>
    736a:	481f      	ldr	r0, [pc, #124]	; (73e8 <z_impl_k_thread_suspend+0xb4>)
    736c:	218e      	movs	r1, #142	; 0x8e
    736e:	f001 fc71 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7372:	481c      	ldr	r0, [pc, #112]	; (73e4 <z_impl_k_thread_suspend+0xb0>)
    7374:	f7fe ff9e 	bl	62b4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7378:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    737c:	7b63      	ldrb	r3, [r4, #13]
    737e:	2a00      	cmp	r2, #0
    7380:	da06      	bge.n	7390 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7386:	481c      	ldr	r0, [pc, #112]	; (73f8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7388:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    738a:	4621      	mov	r1, r4
    738c:	f7ff fbcc 	bl	6b28 <z_priq_dumb_remove>
		update_cache(thread == _current);
    7390:	4d1a      	ldr	r5, [pc, #104]	; (73fc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7392:	7b63      	ldrb	r3, [r4, #13]
    7394:	68a8      	ldr	r0, [r5, #8]
    7396:	f043 0310 	orr.w	r3, r3, #16
    739a:	7363      	strb	r3, [r4, #13]
    739c:	1b03      	subs	r3, r0, r4
    739e:	4258      	negs	r0, r3
    73a0:	4158      	adcs	r0, r3
    73a2:	f7ff fc05 	bl	6bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73a6:	480f      	ldr	r0, [pc, #60]	; (73e4 <z_impl_k_thread_suspend+0xb0>)
    73a8:	f7fe ff74 	bl	6294 <z_spin_unlock_valid>
    73ac:	b968      	cbnz	r0, 73ca <z_impl_k_thread_suspend+0x96>
    73ae:	4a0e      	ldr	r2, [pc, #56]	; (73e8 <z_impl_k_thread_suspend+0xb4>)
    73b0:	4913      	ldr	r1, [pc, #76]	; (7400 <z_impl_k_thread_suspend+0xcc>)
    73b2:	480f      	ldr	r0, [pc, #60]	; (73f0 <z_impl_k_thread_suspend+0xbc>)
    73b4:	23b9      	movs	r3, #185	; 0xb9
    73b6:	f001 fc54 	bl	8c62 <assert_print>
    73ba:	490a      	ldr	r1, [pc, #40]	; (73e4 <z_impl_k_thread_suspend+0xb0>)
    73bc:	4811      	ldr	r0, [pc, #68]	; (7404 <z_impl_k_thread_suspend+0xd0>)
    73be:	f001 fc50 	bl	8c62 <assert_print>
    73c2:	4809      	ldr	r0, [pc, #36]	; (73e8 <z_impl_k_thread_suspend+0xb4>)
    73c4:	21b9      	movs	r1, #185	; 0xb9
    73c6:	f001 fc45 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    73ca:	f386 8811 	msr	BASEPRI, r6
    73ce:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    73d2:	68ab      	ldr	r3, [r5, #8]
    73d4:	42a3      	cmp	r3, r4
    73d6:	d103      	bne.n	73e0 <z_impl_k_thread_suspend+0xac>
}
    73d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    73dc:	f002 b887 	b.w	94ee <z_reschedule_unlocked>
}
    73e0:	bd70      	pop	{r4, r5, r6, pc}
    73e2:	bf00      	nop
    73e4:	20000c64 	.word	0x20000c64
    73e8:	00009f7a 	.word	0x00009f7a
    73ec:	00009fd3 	.word	0x00009fd3
    73f0:	00009bdf 	.word	0x00009bdf
    73f4:	00009fe8 	.word	0x00009fe8
    73f8:	20000c50 	.word	0x20000c50
    73fc:	20000c30 	.word	0x20000c30
    7400:	00009fa7 	.word	0x00009fa7
    7404:	00009fbe 	.word	0x00009fbe

00007408 <k_sched_unlock>:
{
    7408:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    740a:	f04f 0340 	mov.w	r3, #64	; 0x40
    740e:	f3ef 8511 	mrs	r5, BASEPRI
    7412:	f383 8812 	msr	BASEPRI_MAX, r3
    7416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    741a:	482d      	ldr	r0, [pc, #180]	; (74d0 <k_sched_unlock+0xc8>)
    741c:	f7fe ff2c 	bl	6278 <z_spin_lock_valid>
    7420:	b968      	cbnz	r0, 743e <k_sched_unlock+0x36>
    7422:	4a2c      	ldr	r2, [pc, #176]	; (74d4 <k_sched_unlock+0xcc>)
    7424:	492c      	ldr	r1, [pc, #176]	; (74d8 <k_sched_unlock+0xd0>)
    7426:	482d      	ldr	r0, [pc, #180]	; (74dc <k_sched_unlock+0xd4>)
    7428:	238e      	movs	r3, #142	; 0x8e
    742a:	f001 fc1a 	bl	8c62 <assert_print>
    742e:	4928      	ldr	r1, [pc, #160]	; (74d0 <k_sched_unlock+0xc8>)
    7430:	482b      	ldr	r0, [pc, #172]	; (74e0 <k_sched_unlock+0xd8>)
    7432:	f001 fc16 	bl	8c62 <assert_print>
    7436:	4827      	ldr	r0, [pc, #156]	; (74d4 <k_sched_unlock+0xcc>)
    7438:	218e      	movs	r1, #142	; 0x8e
    743a:	f001 fc0b 	bl	8c54 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    743e:	4c29      	ldr	r4, [pc, #164]	; (74e4 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7440:	4823      	ldr	r0, [pc, #140]	; (74d0 <k_sched_unlock+0xc8>)
    7442:	f7fe ff37 	bl	62b4 <z_spin_lock_set_owner>
    7446:	68a3      	ldr	r3, [r4, #8]
    7448:	7bdb      	ldrb	r3, [r3, #15]
    744a:	b973      	cbnz	r3, 746a <k_sched_unlock+0x62>
    744c:	4926      	ldr	r1, [pc, #152]	; (74e8 <k_sched_unlock+0xe0>)
    744e:	4a27      	ldr	r2, [pc, #156]	; (74ec <k_sched_unlock+0xe4>)
    7450:	4822      	ldr	r0, [pc, #136]	; (74dc <k_sched_unlock+0xd4>)
    7452:	f240 33bb 	movw	r3, #955	; 0x3bb
    7456:	f001 fc04 	bl	8c62 <assert_print>
    745a:	4825      	ldr	r0, [pc, #148]	; (74f0 <k_sched_unlock+0xe8>)
    745c:	f001 fc01 	bl	8c62 <assert_print>
    7460:	4822      	ldr	r0, [pc, #136]	; (74ec <k_sched_unlock+0xe4>)
    7462:	f240 31bb 	movw	r1, #955	; 0x3bb
    7466:	f001 fbf5 	bl	8c54 <assert_post_action>
    746a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    746e:	b173      	cbz	r3, 748e <k_sched_unlock+0x86>
    7470:	4920      	ldr	r1, [pc, #128]	; (74f4 <k_sched_unlock+0xec>)
    7472:	4a1e      	ldr	r2, [pc, #120]	; (74ec <k_sched_unlock+0xe4>)
    7474:	4819      	ldr	r0, [pc, #100]	; (74dc <k_sched_unlock+0xd4>)
    7476:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    747a:	f001 fbf2 	bl	8c62 <assert_print>
    747e:	481c      	ldr	r0, [pc, #112]	; (74f0 <k_sched_unlock+0xe8>)
    7480:	f001 fbef 	bl	8c62 <assert_print>
    7484:	4819      	ldr	r0, [pc, #100]	; (74ec <k_sched_unlock+0xe4>)
    7486:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    748a:	f001 fbe3 	bl	8c54 <assert_post_action>
		++_current->base.sched_locked;
    748e:	68a2      	ldr	r2, [r4, #8]
    7490:	7bd3      	ldrb	r3, [r2, #15]
    7492:	3301      	adds	r3, #1
		update_cache(0);
    7494:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7496:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7498:	f7ff fb8a 	bl	6bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    749c:	480c      	ldr	r0, [pc, #48]	; (74d0 <k_sched_unlock+0xc8>)
    749e:	f7fe fef9 	bl	6294 <z_spin_unlock_valid>
    74a2:	b968      	cbnz	r0, 74c0 <k_sched_unlock+0xb8>
    74a4:	4a0b      	ldr	r2, [pc, #44]	; (74d4 <k_sched_unlock+0xcc>)
    74a6:	4914      	ldr	r1, [pc, #80]	; (74f8 <k_sched_unlock+0xf0>)
    74a8:	480c      	ldr	r0, [pc, #48]	; (74dc <k_sched_unlock+0xd4>)
    74aa:	23b9      	movs	r3, #185	; 0xb9
    74ac:	f001 fbd9 	bl	8c62 <assert_print>
    74b0:	4907      	ldr	r1, [pc, #28]	; (74d0 <k_sched_unlock+0xc8>)
    74b2:	4812      	ldr	r0, [pc, #72]	; (74fc <k_sched_unlock+0xf4>)
    74b4:	f001 fbd5 	bl	8c62 <assert_print>
    74b8:	4806      	ldr	r0, [pc, #24]	; (74d4 <k_sched_unlock+0xcc>)
    74ba:	21b9      	movs	r1, #185	; 0xb9
    74bc:	f001 fbca 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    74c0:	f385 8811 	msr	BASEPRI, r5
    74c4:	f3bf 8f6f 	isb	sy
}
    74c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    74cc:	f002 b80f 	b.w	94ee <z_reschedule_unlocked>
    74d0:	20000c64 	.word	0x20000c64
    74d4:	00009f7a 	.word	0x00009f7a
    74d8:	00009fd3 	.word	0x00009fd3
    74dc:	00009bdf 	.word	0x00009bdf
    74e0:	00009fe8 	.word	0x00009fe8
    74e4:	20000c30 	.word	0x20000c30
    74e8:	0000b543 	.word	0x0000b543
    74ec:	0000b4c2 	.word	0x0000b4c2
    74f0:	0000b420 	.word	0x0000b420
    74f4:	0000b2ea 	.word	0x0000b2ea
    74f8:	00009fa7 	.word	0x00009fa7
    74fc:	00009fbe 	.word	0x00009fbe

00007500 <z_unpend1_no_timeout>:
{
    7500:	b538      	push	{r3, r4, r5, lr}
    7502:	4604      	mov	r4, r0
	__asm__ volatile(
    7504:	f04f 0340 	mov.w	r3, #64	; 0x40
    7508:	f3ef 8511 	mrs	r5, BASEPRI
    750c:	f383 8812 	msr	BASEPRI_MAX, r3
    7510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7514:	4819      	ldr	r0, [pc, #100]	; (757c <z_unpend1_no_timeout+0x7c>)
    7516:	f7fe feaf 	bl	6278 <z_spin_lock_valid>
    751a:	b968      	cbnz	r0, 7538 <z_unpend1_no_timeout+0x38>
    751c:	4a18      	ldr	r2, [pc, #96]	; (7580 <z_unpend1_no_timeout+0x80>)
    751e:	4919      	ldr	r1, [pc, #100]	; (7584 <z_unpend1_no_timeout+0x84>)
    7520:	4819      	ldr	r0, [pc, #100]	; (7588 <z_unpend1_no_timeout+0x88>)
    7522:	238e      	movs	r3, #142	; 0x8e
    7524:	f001 fb9d 	bl	8c62 <assert_print>
    7528:	4914      	ldr	r1, [pc, #80]	; (757c <z_unpend1_no_timeout+0x7c>)
    752a:	4818      	ldr	r0, [pc, #96]	; (758c <z_unpend1_no_timeout+0x8c>)
    752c:	f001 fb99 	bl	8c62 <assert_print>
    7530:	4813      	ldr	r0, [pc, #76]	; (7580 <z_unpend1_no_timeout+0x80>)
    7532:	218e      	movs	r1, #142	; 0x8e
    7534:	f001 fb8e 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7538:	4810      	ldr	r0, [pc, #64]	; (757c <z_unpend1_no_timeout+0x7c>)
    753a:	f7fe febb 	bl	62b4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    753e:	4620      	mov	r0, r4
    7540:	f001 ffdf 	bl	9502 <z_priq_dumb_best>
		if (thread != NULL) {
    7544:	4604      	mov	r4, r0
    7546:	b108      	cbz	r0, 754c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7548:	f7ff fb10 	bl	6b6c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    754c:	480b      	ldr	r0, [pc, #44]	; (757c <z_unpend1_no_timeout+0x7c>)
    754e:	f7fe fea1 	bl	6294 <z_spin_unlock_valid>
    7552:	b968      	cbnz	r0, 7570 <z_unpend1_no_timeout+0x70>
    7554:	4a0a      	ldr	r2, [pc, #40]	; (7580 <z_unpend1_no_timeout+0x80>)
    7556:	490e      	ldr	r1, [pc, #56]	; (7590 <z_unpend1_no_timeout+0x90>)
    7558:	480b      	ldr	r0, [pc, #44]	; (7588 <z_unpend1_no_timeout+0x88>)
    755a:	23b9      	movs	r3, #185	; 0xb9
    755c:	f001 fb81 	bl	8c62 <assert_print>
    7560:	4906      	ldr	r1, [pc, #24]	; (757c <z_unpend1_no_timeout+0x7c>)
    7562:	480c      	ldr	r0, [pc, #48]	; (7594 <z_unpend1_no_timeout+0x94>)
    7564:	f001 fb7d 	bl	8c62 <assert_print>
    7568:	4805      	ldr	r0, [pc, #20]	; (7580 <z_unpend1_no_timeout+0x80>)
    756a:	21b9      	movs	r1, #185	; 0xb9
    756c:	f001 fb72 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7570:	f385 8811 	msr	BASEPRI, r5
    7574:	f3bf 8f6f 	isb	sy
}
    7578:	4620      	mov	r0, r4
    757a:	bd38      	pop	{r3, r4, r5, pc}
    757c:	20000c64 	.word	0x20000c64
    7580:	00009f7a 	.word	0x00009f7a
    7584:	00009fd3 	.word	0x00009fd3
    7588:	00009bdf 	.word	0x00009bdf
    758c:	00009fe8 	.word	0x00009fe8
    7590:	00009fa7 	.word	0x00009fa7
    7594:	00009fbe 	.word	0x00009fbe

00007598 <z_unpend_first_thread>:
{
    7598:	b538      	push	{r3, r4, r5, lr}
    759a:	4604      	mov	r4, r0
	__asm__ volatile(
    759c:	f04f 0340 	mov.w	r3, #64	; 0x40
    75a0:	f3ef 8511 	mrs	r5, BASEPRI
    75a4:	f383 8812 	msr	BASEPRI_MAX, r3
    75a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75ac:	481b      	ldr	r0, [pc, #108]	; (761c <z_unpend_first_thread+0x84>)
    75ae:	f7fe fe63 	bl	6278 <z_spin_lock_valid>
    75b2:	b968      	cbnz	r0, 75d0 <z_unpend_first_thread+0x38>
    75b4:	4a1a      	ldr	r2, [pc, #104]	; (7620 <z_unpend_first_thread+0x88>)
    75b6:	491b      	ldr	r1, [pc, #108]	; (7624 <z_unpend_first_thread+0x8c>)
    75b8:	481b      	ldr	r0, [pc, #108]	; (7628 <z_unpend_first_thread+0x90>)
    75ba:	238e      	movs	r3, #142	; 0x8e
    75bc:	f001 fb51 	bl	8c62 <assert_print>
    75c0:	4916      	ldr	r1, [pc, #88]	; (761c <z_unpend_first_thread+0x84>)
    75c2:	481a      	ldr	r0, [pc, #104]	; (762c <z_unpend_first_thread+0x94>)
    75c4:	f001 fb4d 	bl	8c62 <assert_print>
    75c8:	4815      	ldr	r0, [pc, #84]	; (7620 <z_unpend_first_thread+0x88>)
    75ca:	218e      	movs	r1, #142	; 0x8e
    75cc:	f001 fb42 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    75d0:	4812      	ldr	r0, [pc, #72]	; (761c <z_unpend_first_thread+0x84>)
    75d2:	f7fe fe6f 	bl	62b4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    75d6:	4620      	mov	r0, r4
    75d8:	f001 ff93 	bl	9502 <z_priq_dumb_best>
		if (thread != NULL) {
    75dc:	4604      	mov	r4, r0
    75de:	b128      	cbz	r0, 75ec <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    75e0:	f7ff fac4 	bl	6b6c <unpend_thread_no_timeout>
    75e4:	f104 0018 	add.w	r0, r4, #24
    75e8:	f000 fb96 	bl	7d18 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75ec:	480b      	ldr	r0, [pc, #44]	; (761c <z_unpend_first_thread+0x84>)
    75ee:	f7fe fe51 	bl	6294 <z_spin_unlock_valid>
    75f2:	b968      	cbnz	r0, 7610 <z_unpend_first_thread+0x78>
    75f4:	4a0a      	ldr	r2, [pc, #40]	; (7620 <z_unpend_first_thread+0x88>)
    75f6:	490e      	ldr	r1, [pc, #56]	; (7630 <z_unpend_first_thread+0x98>)
    75f8:	480b      	ldr	r0, [pc, #44]	; (7628 <z_unpend_first_thread+0x90>)
    75fa:	23b9      	movs	r3, #185	; 0xb9
    75fc:	f001 fb31 	bl	8c62 <assert_print>
    7600:	4906      	ldr	r1, [pc, #24]	; (761c <z_unpend_first_thread+0x84>)
    7602:	480c      	ldr	r0, [pc, #48]	; (7634 <z_unpend_first_thread+0x9c>)
    7604:	f001 fb2d 	bl	8c62 <assert_print>
    7608:	4805      	ldr	r0, [pc, #20]	; (7620 <z_unpend_first_thread+0x88>)
    760a:	21b9      	movs	r1, #185	; 0xb9
    760c:	f001 fb22 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7610:	f385 8811 	msr	BASEPRI, r5
    7614:	f3bf 8f6f 	isb	sy
}
    7618:	4620      	mov	r0, r4
    761a:	bd38      	pop	{r3, r4, r5, pc}
    761c:	20000c64 	.word	0x20000c64
    7620:	00009f7a 	.word	0x00009f7a
    7624:	00009fd3 	.word	0x00009fd3
    7628:	00009bdf 	.word	0x00009bdf
    762c:	00009fe8 	.word	0x00009fe8
    7630:	00009fa7 	.word	0x00009fa7
    7634:	00009fbe 	.word	0x00009fbe

00007638 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7638:	4b04      	ldr	r3, [pc, #16]	; (764c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    763a:	2100      	movs	r1, #0
    763c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7640:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7644:	4608      	mov	r0, r1
    7646:	f7ff b909 	b.w	685c <k_sched_time_slice_set>
    764a:	bf00      	nop
    764c:	20000c30 	.word	0x20000c30

00007650 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7652:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7656:	b173      	cbz	r3, 7676 <z_impl_k_yield+0x26>
    7658:	493f      	ldr	r1, [pc, #252]	; (7758 <z_impl_k_yield+0x108>)
    765a:	4a40      	ldr	r2, [pc, #256]	; (775c <z_impl_k_yield+0x10c>)
    765c:	4840      	ldr	r0, [pc, #256]	; (7760 <z_impl_k_yield+0x110>)
    765e:	f240 5332 	movw	r3, #1330	; 0x532
    7662:	f001 fafe 	bl	8c62 <assert_print>
    7666:	483f      	ldr	r0, [pc, #252]	; (7764 <z_impl_k_yield+0x114>)
    7668:	f001 fafb 	bl	8c62 <assert_print>
    766c:	483b      	ldr	r0, [pc, #236]	; (775c <z_impl_k_yield+0x10c>)
    766e:	f240 5132 	movw	r1, #1330	; 0x532
    7672:	f001 faef 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7676:	f04f 0340 	mov.w	r3, #64	; 0x40
    767a:	f3ef 8611 	mrs	r6, BASEPRI
    767e:	f383 8812 	msr	BASEPRI_MAX, r3
    7682:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7686:	4838      	ldr	r0, [pc, #224]	; (7768 <z_impl_k_yield+0x118>)
    7688:	f7fe fdf6 	bl	6278 <z_spin_lock_valid>
    768c:	b968      	cbnz	r0, 76aa <z_impl_k_yield+0x5a>
    768e:	4a37      	ldr	r2, [pc, #220]	; (776c <z_impl_k_yield+0x11c>)
    7690:	4937      	ldr	r1, [pc, #220]	; (7770 <z_impl_k_yield+0x120>)
    7692:	4833      	ldr	r0, [pc, #204]	; (7760 <z_impl_k_yield+0x110>)
    7694:	238e      	movs	r3, #142	; 0x8e
    7696:	f001 fae4 	bl	8c62 <assert_print>
    769a:	4933      	ldr	r1, [pc, #204]	; (7768 <z_impl_k_yield+0x118>)
    769c:	4835      	ldr	r0, [pc, #212]	; (7774 <z_impl_k_yield+0x124>)
    769e:	f001 fae0 	bl	8c62 <assert_print>
    76a2:	4832      	ldr	r0, [pc, #200]	; (776c <z_impl_k_yield+0x11c>)
    76a4:	218e      	movs	r1, #142	; 0x8e
    76a6:	f001 fad5 	bl	8c54 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    76aa:	4d33      	ldr	r5, [pc, #204]	; (7778 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    76ac:	482e      	ldr	r0, [pc, #184]	; (7768 <z_impl_k_yield+0x118>)
    76ae:	f7fe fe01 	bl	62b4 <z_spin_lock_set_owner>
    76b2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76b4:	7b4b      	ldrb	r3, [r1, #13]
    76b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    76ba:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    76bc:	f105 0020 	add.w	r0, r5, #32
    76c0:	f7ff fa32 	bl	6b28 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    76c4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    76c6:	7b63      	ldrb	r3, [r4, #13]
    76c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    76cc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    76ce:	4b2b      	ldr	r3, [pc, #172]	; (777c <z_impl_k_yield+0x12c>)
    76d0:	429c      	cmp	r4, r3
    76d2:	d109      	bne.n	76e8 <z_impl_k_yield+0x98>
    76d4:	492a      	ldr	r1, [pc, #168]	; (7780 <z_impl_k_yield+0x130>)
    76d6:	4822      	ldr	r0, [pc, #136]	; (7760 <z_impl_k_yield+0x110>)
    76d8:	4a20      	ldr	r2, [pc, #128]	; (775c <z_impl_k_yield+0x10c>)
    76da:	23ba      	movs	r3, #186	; 0xba
    76dc:	f001 fac1 	bl	8c62 <assert_print>
    76e0:	481e      	ldr	r0, [pc, #120]	; (775c <z_impl_k_yield+0x10c>)
    76e2:	21ba      	movs	r1, #186	; 0xba
    76e4:	f001 fab6 	bl	8c54 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    76e8:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    76ec:	4925      	ldr	r1, [pc, #148]	; (7784 <z_impl_k_yield+0x134>)
    76ee:	428b      	cmp	r3, r1
    76f0:	d02c      	beq.n	774c <z_impl_k_yield+0xfc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76f2:	b35b      	cbz	r3, 774c <z_impl_k_yield+0xfc>
	int32_t b1 = thread_1->base.prio;
    76f4:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    76f8:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    76fc:	42b8      	cmp	r0, r7
    76fe:	d020      	beq.n	7742 <z_impl_k_yield+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7700:	4287      	cmp	r7, r0
    7702:	dd1e      	ble.n	7742 <z_impl_k_yield+0xf2>
	sys_dnode_t *const prev = successor->prev;
    7704:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7706:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    770a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    770c:	605c      	str	r4, [r3, #4]
	update_cache(1);
    770e:	2001      	movs	r0, #1
    7710:	f7ff fa4e 	bl	6bb0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7714:	4814      	ldr	r0, [pc, #80]	; (7768 <z_impl_k_yield+0x118>)
    7716:	f7fe fdbd 	bl	6294 <z_spin_unlock_valid>
    771a:	b968      	cbnz	r0, 7738 <z_impl_k_yield+0xe8>
    771c:	4a13      	ldr	r2, [pc, #76]	; (776c <z_impl_k_yield+0x11c>)
    771e:	491a      	ldr	r1, [pc, #104]	; (7788 <z_impl_k_yield+0x138>)
    7720:	480f      	ldr	r0, [pc, #60]	; (7760 <z_impl_k_yield+0x110>)
    7722:	23d0      	movs	r3, #208	; 0xd0
    7724:	f001 fa9d 	bl	8c62 <assert_print>
    7728:	490f      	ldr	r1, [pc, #60]	; (7768 <z_impl_k_yield+0x118>)
    772a:	4818      	ldr	r0, [pc, #96]	; (778c <z_impl_k_yield+0x13c>)
    772c:	f001 fa99 	bl	8c62 <assert_print>
    7730:	480e      	ldr	r0, [pc, #56]	; (776c <z_impl_k_yield+0x11c>)
    7732:	21d0      	movs	r1, #208	; 0xd0
    7734:	f001 fa8e 	bl	8c54 <assert_post_action>
    7738:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    773a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    773e:	f7fb b9ef 	b.w	2b20 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7742:	4293      	cmp	r3, r2
    7744:	d002      	beq.n	774c <z_impl_k_yield+0xfc>
    7746:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7748:	2b00      	cmp	r3, #0
    774a:	d1d5      	bne.n	76f8 <z_impl_k_yield+0xa8>
	node->prev = tail;
    774c:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    7750:	6014      	str	r4, [r2, #0]
	list->tail = node;
    7752:	626c      	str	r4, [r5, #36]	; 0x24
}
    7754:	e7db      	b.n	770e <z_impl_k_yield+0xbe>
    7756:	bf00      	nop
    7758:	0000b2ea 	.word	0x0000b2ea
    775c:	0000b4c2 	.word	0x0000b4c2
    7760:	00009bdf 	.word	0x00009bdf
    7764:	0000b420 	.word	0x0000b420
    7768:	20000c64 	.word	0x20000c64
    776c:	00009f7a 	.word	0x00009f7a
    7770:	00009fd3 	.word	0x00009fd3
    7774:	00009fe8 	.word	0x00009fe8
    7778:	20000c30 	.word	0x20000c30
    777c:	20000400 	.word	0x20000400
    7780:	0000b4e4 	.word	0x0000b4e4
    7784:	20000c50 	.word	0x20000c50
    7788:	00009fa7 	.word	0x00009fa7
    778c:	00009fbe 	.word	0x00009fbe

00007790 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7794:	4605      	mov	r5, r0
    7796:	460e      	mov	r6, r1
    7798:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    779c:	b173      	cbz	r3, 77bc <z_tick_sleep+0x2c>
    779e:	4941      	ldr	r1, [pc, #260]	; (78a4 <z_tick_sleep+0x114>)
    77a0:	4a41      	ldr	r2, [pc, #260]	; (78a8 <z_tick_sleep+0x118>)
    77a2:	4842      	ldr	r0, [pc, #264]	; (78ac <z_tick_sleep+0x11c>)
    77a4:	f240 534e 	movw	r3, #1358	; 0x54e
    77a8:	f001 fa5b 	bl	8c62 <assert_print>
    77ac:	4840      	ldr	r0, [pc, #256]	; (78b0 <z_tick_sleep+0x120>)
    77ae:	f001 fa58 	bl	8c62 <assert_print>
    77b2:	483d      	ldr	r0, [pc, #244]	; (78a8 <z_tick_sleep+0x118>)
    77b4:	f240 514e 	movw	r1, #1358	; 0x54e
    77b8:	f001 fa4c 	bl	8c54 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    77bc:	ea55 0306 	orrs.w	r3, r5, r6
    77c0:	d103      	bne.n	77ca <z_tick_sleep+0x3a>
	z_impl_k_yield();
    77c2:	f7ff ff45 	bl	7650 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    77c6:	2000      	movs	r0, #0
    77c8:	e066      	b.n	7898 <z_tick_sleep+0x108>
	if (Z_TICK_ABS(ticks) <= 0) {
    77ca:	1caa      	adds	r2, r5, #2
    77cc:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    77d0:	db64      	blt.n	789c <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    77d2:	f001 fe9c 	bl	950e <sys_clock_tick_get_32>
    77d6:	1944      	adds	r4, r0, r5
    77d8:	f04f 0340 	mov.w	r3, #64	; 0x40
    77dc:	f3ef 8811 	mrs	r8, BASEPRI
    77e0:	f383 8812 	msr	BASEPRI_MAX, r3
    77e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77e8:	4832      	ldr	r0, [pc, #200]	; (78b4 <z_tick_sleep+0x124>)
    77ea:	f7fe fd45 	bl	6278 <z_spin_lock_valid>
    77ee:	b968      	cbnz	r0, 780c <z_tick_sleep+0x7c>
    77f0:	4a31      	ldr	r2, [pc, #196]	; (78b8 <z_tick_sleep+0x128>)
    77f2:	4932      	ldr	r1, [pc, #200]	; (78bc <z_tick_sleep+0x12c>)
    77f4:	482d      	ldr	r0, [pc, #180]	; (78ac <z_tick_sleep+0x11c>)
    77f6:	238e      	movs	r3, #142	; 0x8e
    77f8:	f001 fa33 	bl	8c62 <assert_print>
    77fc:	492d      	ldr	r1, [pc, #180]	; (78b4 <z_tick_sleep+0x124>)
    77fe:	4830      	ldr	r0, [pc, #192]	; (78c0 <z_tick_sleep+0x130>)
    7800:	f001 fa2f 	bl	8c62 <assert_print>
    7804:	482c      	ldr	r0, [pc, #176]	; (78b8 <z_tick_sleep+0x128>)
    7806:	218e      	movs	r1, #142	; 0x8e
    7808:	f001 fa24 	bl	8c54 <assert_post_action>
	pending_current = _current;
    780c:	4f2d      	ldr	r7, [pc, #180]	; (78c4 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    780e:	4829      	ldr	r0, [pc, #164]	; (78b4 <z_tick_sleep+0x124>)
    7810:	f7fe fd50 	bl	62b4 <z_spin_lock_set_owner>
    7814:	4b2c      	ldr	r3, [pc, #176]	; (78c8 <z_tick_sleep+0x138>)
    7816:	68b8      	ldr	r0, [r7, #8]
    7818:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    781a:	f7ff fc0d 	bl	7038 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    781e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7820:	492a      	ldr	r1, [pc, #168]	; (78cc <z_tick_sleep+0x13c>)
    7822:	462a      	mov	r2, r5
    7824:	4633      	mov	r3, r6
    7826:	3018      	adds	r0, #24
    7828:	f000 f9ae 	bl	7b88 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    782c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    782e:	4821      	ldr	r0, [pc, #132]	; (78b4 <z_tick_sleep+0x124>)
    7830:	7b53      	ldrb	r3, [r2, #13]
    7832:	f043 0310 	orr.w	r3, r3, #16
    7836:	7353      	strb	r3, [r2, #13]
    7838:	f7fe fd2c 	bl	6294 <z_spin_unlock_valid>
    783c:	b968      	cbnz	r0, 785a <z_tick_sleep+0xca>
    783e:	4a1e      	ldr	r2, [pc, #120]	; (78b8 <z_tick_sleep+0x128>)
    7840:	4923      	ldr	r1, [pc, #140]	; (78d0 <z_tick_sleep+0x140>)
    7842:	481a      	ldr	r0, [pc, #104]	; (78ac <z_tick_sleep+0x11c>)
    7844:	23d0      	movs	r3, #208	; 0xd0
    7846:	f001 fa0c 	bl	8c62 <assert_print>
    784a:	491a      	ldr	r1, [pc, #104]	; (78b4 <z_tick_sleep+0x124>)
    784c:	4821      	ldr	r0, [pc, #132]	; (78d4 <z_tick_sleep+0x144>)
    784e:	f001 fa08 	bl	8c62 <assert_print>
    7852:	4819      	ldr	r0, [pc, #100]	; (78b8 <z_tick_sleep+0x128>)
    7854:	21d0      	movs	r1, #208	; 0xd0
    7856:	f001 f9fd 	bl	8c54 <assert_post_action>
    785a:	4640      	mov	r0, r8
    785c:	f7fb f960 	bl	2b20 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    7860:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    7862:	7b5b      	ldrb	r3, [r3, #13]
    7864:	06db      	lsls	r3, r3, #27
    7866:	d50e      	bpl.n	7886 <z_tick_sleep+0xf6>
    7868:	491b      	ldr	r1, [pc, #108]	; (78d8 <z_tick_sleep+0x148>)
    786a:	4a0f      	ldr	r2, [pc, #60]	; (78a8 <z_tick_sleep+0x118>)
    786c:	480f      	ldr	r0, [pc, #60]	; (78ac <z_tick_sleep+0x11c>)
    786e:	f240 536f 	movw	r3, #1391	; 0x56f
    7872:	f001 f9f6 	bl	8c62 <assert_print>
    7876:	480e      	ldr	r0, [pc, #56]	; (78b0 <z_tick_sleep+0x120>)
    7878:	f001 f9f3 	bl	8c62 <assert_print>
    787c:	480a      	ldr	r0, [pc, #40]	; (78a8 <z_tick_sleep+0x118>)
    787e:	f240 516f 	movw	r1, #1391	; 0x56f
    7882:	f001 f9e7 	bl	8c54 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7886:	f001 fe42 	bl	950e <sys_clock_tick_get_32>
    788a:	1a20      	subs	r0, r4, r0
    788c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7890:	2801      	cmp	r0, #1
    7892:	f173 0300 	sbcs.w	r3, r3, #0
    7896:	db96      	blt.n	77c6 <z_tick_sleep+0x36>
}
    7898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    789c:	f06f 0401 	mvn.w	r4, #1
    78a0:	1b64      	subs	r4, r4, r5
    78a2:	e799      	b.n	77d8 <z_tick_sleep+0x48>
    78a4:	0000b2ea 	.word	0x0000b2ea
    78a8:	0000b4c2 	.word	0x0000b4c2
    78ac:	00009bdf 	.word	0x00009bdf
    78b0:	0000b420 	.word	0x0000b420
    78b4:	20000c64 	.word	0x20000c64
    78b8:	00009f7a 	.word	0x00009f7a
    78bc:	00009fd3 	.word	0x00009fd3
    78c0:	00009fe8 	.word	0x00009fe8
    78c4:	20000c30 	.word	0x20000c30
    78c8:	20000c60 	.word	0x20000c60
    78cc:	00006f85 	.word	0x00006f85
    78d0:	00009fa7 	.word	0x00009fa7
    78d4:	00009fbe 	.word	0x00009fbe
    78d8:	0000b574 	.word	0x0000b574

000078dc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    78dc:	b538      	push	{r3, r4, r5, lr}
    78de:	4605      	mov	r5, r0
    78e0:	460c      	mov	r4, r1
    78e2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    78e6:	b173      	cbz	r3, 7906 <z_impl_k_sleep+0x2a>
    78e8:	4913      	ldr	r1, [pc, #76]	; (7938 <z_impl_k_sleep+0x5c>)
    78ea:	4a14      	ldr	r2, [pc, #80]	; (793c <z_impl_k_sleep+0x60>)
    78ec:	4814      	ldr	r0, [pc, #80]	; (7940 <z_impl_k_sleep+0x64>)
    78ee:	f240 537e 	movw	r3, #1406	; 0x57e
    78f2:	f001 f9b6 	bl	8c62 <assert_print>
    78f6:	4813      	ldr	r0, [pc, #76]	; (7944 <z_impl_k_sleep+0x68>)
    78f8:	f001 f9b3 	bl	8c62 <assert_print>
    78fc:	480f      	ldr	r0, [pc, #60]	; (793c <z_impl_k_sleep+0x60>)
    78fe:	f240 517e 	movw	r1, #1406	; 0x57e
    7902:	f001 f9a7 	bl	8c54 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7906:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    790a:	bf08      	it	eq
    790c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    7910:	d106      	bne.n	7920 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    7912:	4b0d      	ldr	r3, [pc, #52]	; (7948 <z_impl_k_sleep+0x6c>)
    7914:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7916:	f7ff fd0d 	bl	7334 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    791a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    791e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7920:	4628      	mov	r0, r5
    7922:	4621      	mov	r1, r4
    7924:	f7ff ff34 	bl	7790 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    7928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    792c:	fb80 0303 	smull	r0, r3, r0, r3
    7930:	0bc0      	lsrs	r0, r0, #15
    7932:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    7936:	e7f2      	b.n	791e <z_impl_k_sleep+0x42>
    7938:	0000b2ea 	.word	0x0000b2ea
    793c:	0000b4c2 	.word	0x0000b4c2
    7940:	00009bdf 	.word	0x00009bdf
    7944:	0000b420 	.word	0x0000b420
    7948:	20000c30 	.word	0x20000c30

0000794c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    794c:	4b01      	ldr	r3, [pc, #4]	; (7954 <z_impl_z_current_get+0x8>)
    794e:	6898      	ldr	r0, [r3, #8]
    7950:	4770      	bx	lr
    7952:	bf00      	nop
    7954:	20000c30 	.word	0x20000c30

00007958 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    7958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    795c:	4604      	mov	r4, r0
    795e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7962:	f3ef 8611 	mrs	r6, BASEPRI
    7966:	f383 8812 	msr	BASEPRI_MAX, r3
    796a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    796e:	4848      	ldr	r0, [pc, #288]	; (7a90 <z_thread_abort+0x138>)
    7970:	f7fe fc82 	bl	6278 <z_spin_lock_valid>
    7974:	b968      	cbnz	r0, 7992 <z_thread_abort+0x3a>
    7976:	4a47      	ldr	r2, [pc, #284]	; (7a94 <z_thread_abort+0x13c>)
    7978:	4947      	ldr	r1, [pc, #284]	; (7a98 <z_thread_abort+0x140>)
    797a:	4848      	ldr	r0, [pc, #288]	; (7a9c <z_thread_abort+0x144>)
    797c:	238e      	movs	r3, #142	; 0x8e
    797e:	f001 f970 	bl	8c62 <assert_print>
    7982:	4943      	ldr	r1, [pc, #268]	; (7a90 <z_thread_abort+0x138>)
    7984:	4846      	ldr	r0, [pc, #280]	; (7aa0 <z_thread_abort+0x148>)
    7986:	f001 f96c 	bl	8c62 <assert_print>
    798a:	4842      	ldr	r0, [pc, #264]	; (7a94 <z_thread_abort+0x13c>)
    798c:	218e      	movs	r1, #142	; 0x8e
    798e:	f001 f961 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7992:	483f      	ldr	r0, [pc, #252]	; (7a90 <z_thread_abort+0x138>)
    7994:	f7fe fc8e 	bl	62b4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7998:	7b63      	ldrb	r3, [r4, #13]
    799a:	071a      	lsls	r2, r3, #28
    799c:	d517      	bpl.n	79ce <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    799e:	483c      	ldr	r0, [pc, #240]	; (7a90 <z_thread_abort+0x138>)
    79a0:	f7fe fc78 	bl	6294 <z_spin_unlock_valid>
    79a4:	b968      	cbnz	r0, 79c2 <z_thread_abort+0x6a>
    79a6:	4a3b      	ldr	r2, [pc, #236]	; (7a94 <z_thread_abort+0x13c>)
    79a8:	493e      	ldr	r1, [pc, #248]	; (7aa4 <z_thread_abort+0x14c>)
    79aa:	483c      	ldr	r0, [pc, #240]	; (7a9c <z_thread_abort+0x144>)
    79ac:	23b9      	movs	r3, #185	; 0xb9
    79ae:	f001 f958 	bl	8c62 <assert_print>
    79b2:	4937      	ldr	r1, [pc, #220]	; (7a90 <z_thread_abort+0x138>)
    79b4:	483c      	ldr	r0, [pc, #240]	; (7aa8 <z_thread_abort+0x150>)
    79b6:	f001 f954 	bl	8c62 <assert_print>
    79ba:	4836      	ldr	r0, [pc, #216]	; (7a94 <z_thread_abort+0x13c>)
    79bc:	21b9      	movs	r1, #185	; 0xb9
    79be:	f001 f949 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    79c2:	f386 8811 	msr	BASEPRI, r6
    79c6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    79ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    79ce:	f023 0220 	bic.w	r2, r3, #32
    79d2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    79d6:	09d2      	lsrs	r2, r2, #7
    79d8:	d142      	bne.n	7a60 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    79da:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    79dc:	68a3      	ldr	r3, [r4, #8]
    79de:	b113      	cbz	r3, 79e6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    79e0:	4620      	mov	r0, r4
    79e2:	f7ff f8c3 	bl	6b6c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    79e6:	f104 0018 	add.w	r0, r4, #24
    79ea:	f000 f995 	bl	7d18 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    79ee:	f104 0758 	add.w	r7, r4, #88	; 0x58
    79f2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    79f6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79f8:	42bd      	cmp	r5, r7
    79fa:	d001      	beq.n	7a00 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    79fc:	2d00      	cmp	r5, #0
    79fe:	d139      	bne.n	7a74 <z_thread_abort+0x11c>
		update_cache(1);
    7a00:	2001      	movs	r0, #1
    7a02:	f7ff f8d5 	bl	6bb0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7a06:	4b29      	ldr	r3, [pc, #164]	; (7aac <z_thread_abort+0x154>)
    7a08:	689b      	ldr	r3, [r3, #8]
    7a0a:	42a3      	cmp	r3, r4
    7a0c:	d1c7      	bne.n	799e <z_thread_abort+0x46>
    7a0e:	f3ef 8305 	mrs	r3, IPSR
    7a12:	2b00      	cmp	r3, #0
    7a14:	d1c3      	bne.n	799e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a16:	481e      	ldr	r0, [pc, #120]	; (7a90 <z_thread_abort+0x138>)
    7a18:	f7fe fc3c 	bl	6294 <z_spin_unlock_valid>
    7a1c:	b968      	cbnz	r0, 7a3a <z_thread_abort+0xe2>
    7a1e:	4a1d      	ldr	r2, [pc, #116]	; (7a94 <z_thread_abort+0x13c>)
    7a20:	4920      	ldr	r1, [pc, #128]	; (7aa4 <z_thread_abort+0x14c>)
    7a22:	481e      	ldr	r0, [pc, #120]	; (7a9c <z_thread_abort+0x144>)
    7a24:	23d0      	movs	r3, #208	; 0xd0
    7a26:	f001 f91c 	bl	8c62 <assert_print>
    7a2a:	4919      	ldr	r1, [pc, #100]	; (7a90 <z_thread_abort+0x138>)
    7a2c:	481e      	ldr	r0, [pc, #120]	; (7aa8 <z_thread_abort+0x150>)
    7a2e:	f001 f918 	bl	8c62 <assert_print>
    7a32:	4818      	ldr	r0, [pc, #96]	; (7a94 <z_thread_abort+0x13c>)
    7a34:	21d0      	movs	r1, #208	; 0xd0
    7a36:	f001 f90d 	bl	8c54 <assert_post_action>
    7a3a:	4630      	mov	r0, r6
    7a3c:	f7fb f870 	bl	2b20 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    7a40:	4a1b      	ldr	r2, [pc, #108]	; (7ab0 <z_thread_abort+0x158>)
    7a42:	491c      	ldr	r1, [pc, #112]	; (7ab4 <z_thread_abort+0x15c>)
    7a44:	4815      	ldr	r0, [pc, #84]	; (7a9c <z_thread_abort+0x144>)
    7a46:	f240 63ac 	movw	r3, #1708	; 0x6ac
    7a4a:	f001 f90a 	bl	8c62 <assert_print>
    7a4e:	481a      	ldr	r0, [pc, #104]	; (7ab8 <z_thread_abort+0x160>)
    7a50:	f001 f907 	bl	8c62 <assert_print>
    7a54:	4816      	ldr	r0, [pc, #88]	; (7ab0 <z_thread_abort+0x158>)
    7a56:	f240 61ac 	movw	r1, #1708	; 0x6ac
    7a5a:	f001 f8fb 	bl	8c54 <assert_post_action>
    7a5e:	e79e      	b.n	799e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a60:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    7a64:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    7a68:	4814      	ldr	r0, [pc, #80]	; (7abc <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a6a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7a6c:	4621      	mov	r1, r4
    7a6e:	f7ff f85b 	bl	6b28 <z_priq_dumb_remove>
}
    7a72:	e7b3      	b.n	79dc <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    7a74:	4628      	mov	r0, r5
    7a76:	f7ff f879 	bl	6b6c <unpend_thread_no_timeout>
    7a7a:	f105 0018 	add.w	r0, r5, #24
    7a7e:	f000 f94b 	bl	7d18 <z_abort_timeout>
    7a82:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7a86:	4628      	mov	r0, r5
    7a88:	f7ff f994 	bl	6db4 <ready_thread>
    7a8c:	e7b3      	b.n	79f6 <z_thread_abort+0x9e>
    7a8e:	bf00      	nop
    7a90:	20000c64 	.word	0x20000c64
    7a94:	00009f7a 	.word	0x00009f7a
    7a98:	00009fd3 	.word	0x00009fd3
    7a9c:	00009bdf 	.word	0x00009bdf
    7aa0:	00009fe8 	.word	0x00009fe8
    7aa4:	00009fa7 	.word	0x00009fa7
    7aa8:	00009fbe 	.word	0x00009fbe
    7aac:	20000c30 	.word	0x20000c30
    7ab0:	0000b4c2 	.word	0x0000b4c2
    7ab4:	00009cb5 	.word	0x00009cb5
    7ab8:	0000b5b4 	.word	0x0000b5b4
    7abc:	20000c50 	.word	0x20000c50

00007ac0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7ac0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7ac2:	4806      	ldr	r0, [pc, #24]	; (7adc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7ac4:	4a06      	ldr	r2, [pc, #24]	; (7ae0 <z_data_copy+0x20>)
    7ac6:	4907      	ldr	r1, [pc, #28]	; (7ae4 <z_data_copy+0x24>)
    7ac8:	1a12      	subs	r2, r2, r0
    7aca:	f001 fcbc 	bl	9446 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    7ace:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7ad2:	4a05      	ldr	r2, [pc, #20]	; (7ae8 <z_data_copy+0x28>)
    7ad4:	4905      	ldr	r1, [pc, #20]	; (7aec <z_data_copy+0x2c>)
    7ad6:	4806      	ldr	r0, [pc, #24]	; (7af0 <z_data_copy+0x30>)
    7ad8:	f001 bcb5 	b.w	9446 <z_early_memcpy>
    7adc:	20000000 	.word	0x20000000
    7ae0:	2000025c 	.word	0x2000025c
    7ae4:	0000b688 	.word	0x0000b688
    7ae8:	00000000 	.word	0x00000000
    7aec:	0000b688 	.word	0x0000b688
    7af0:	20000000 	.word	0x20000000

00007af4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7af4:	4b03      	ldr	r3, [pc, #12]	; (7b04 <elapsed+0x10>)
    7af6:	681b      	ldr	r3, [r3, #0]
    7af8:	b90b      	cbnz	r3, 7afe <elapsed+0xa>
    7afa:	f7fd b833 	b.w	4b64 <sys_clock_elapsed>
}
    7afe:	2000      	movs	r0, #0
    7b00:	4770      	bx	lr
    7b02:	bf00      	nop
    7b04:	20000c70 	.word	0x20000c70

00007b08 <next_timeout>:
	return list->head == list;
    7b08:	4b10      	ldr	r3, [pc, #64]	; (7b4c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    7b0a:	b510      	push	{r4, lr}
    7b0c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b0e:	429c      	cmp	r4, r3
    7b10:	bf08      	it	eq
    7b12:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7b14:	f7ff ffee 	bl	7af4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7b18:	b1a4      	cbz	r4, 7b44 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7b1a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    7b1e:	1a1b      	subs	r3, r3, r0
    7b20:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    7b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7b28:	f172 0100 	sbcs.w	r1, r2, #0
    7b2c:	da0a      	bge.n	7b44 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7b2e:	2a00      	cmp	r2, #0
    7b30:	bfac      	ite	ge
    7b32:	4618      	movge	r0, r3
    7b34:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7b36:	4b06      	ldr	r3, [pc, #24]	; (7b50 <next_timeout+0x48>)
    7b38:	691b      	ldr	r3, [r3, #16]
    7b3a:	b113      	cbz	r3, 7b42 <next_timeout+0x3a>
    7b3c:	4298      	cmp	r0, r3
    7b3e:	bfa8      	it	ge
    7b40:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7b42:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    7b44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7b48:	e7f5      	b.n	7b36 <next_timeout+0x2e>
    7b4a:	bf00      	nop
    7b4c:	20000174 	.word	0x20000174
    7b50:	20000c30 	.word	0x20000c30

00007b54 <remove_timeout>:
{
    7b54:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    7b56:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7b58:	b168      	cbz	r0, 7b76 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    7b5a:	4a0a      	ldr	r2, [pc, #40]	; (7b84 <remove_timeout+0x30>)
    7b5c:	6852      	ldr	r2, [r2, #4]
    7b5e:	4290      	cmp	r0, r2
    7b60:	d009      	beq.n	7b76 <remove_timeout+0x22>
	if (next(t) != NULL) {
    7b62:	b143      	cbz	r3, 7b76 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7b64:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7b68:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7b6c:	1912      	adds	r2, r2, r4
    7b6e:	eb41 0105 	adc.w	r1, r1, r5
    7b72:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7b76:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7b78:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7b7a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7b7c:	2300      	movs	r3, #0
	node->prev = NULL;
    7b7e:	e9c0 3300 	strd	r3, r3, [r0]
}
    7b82:	bd30      	pop	{r4, r5, pc}
    7b84:	20000174 	.word	0x20000174

00007b88 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7b8c:	bf08      	it	eq
    7b8e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7b92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b96:	4604      	mov	r4, r0
    7b98:	460f      	mov	r7, r1
    7b9a:	4691      	mov	r9, r2
    7b9c:	461d      	mov	r5, r3
    7b9e:	4616      	mov	r6, r2
    7ba0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7ba2:	f000 809c 	beq.w	7cde <z_add_timeout+0x156>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7ba6:	6803      	ldr	r3, [r0, #0]
    7ba8:	b163      	cbz	r3, 7bc4 <z_add_timeout+0x3c>
    7baa:	494e      	ldr	r1, [pc, #312]	; (7ce4 <z_add_timeout+0x15c>)
    7bac:	4a4e      	ldr	r2, [pc, #312]	; (7ce8 <z_add_timeout+0x160>)
    7bae:	484f      	ldr	r0, [pc, #316]	; (7cec <z_add_timeout+0x164>)
    7bb0:	2363      	movs	r3, #99	; 0x63
    7bb2:	f001 f856 	bl	8c62 <assert_print>
    7bb6:	484e      	ldr	r0, [pc, #312]	; (7cf0 <z_add_timeout+0x168>)
    7bb8:	f001 f853 	bl	8c62 <assert_print>
    7bbc:	484a      	ldr	r0, [pc, #296]	; (7ce8 <z_add_timeout+0x160>)
    7bbe:	2163      	movs	r1, #99	; 0x63
    7bc0:	f001 f848 	bl	8c54 <assert_post_action>
	to->fn = fn;
    7bc4:	60a7      	str	r7, [r4, #8]
	__asm__ volatile(
    7bc6:	f04f 0340 	mov.w	r3, #64	; 0x40
    7bca:	f3ef 8711 	mrs	r7, BASEPRI
    7bce:	f383 8812 	msr	BASEPRI_MAX, r3
    7bd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bd6:	4847      	ldr	r0, [pc, #284]	; (7cf4 <z_add_timeout+0x16c>)
    7bd8:	f7fe fb4e 	bl	6278 <z_spin_lock_valid>
    7bdc:	b968      	cbnz	r0, 7bfa <z_add_timeout+0x72>
    7bde:	4a46      	ldr	r2, [pc, #280]	; (7cf8 <z_add_timeout+0x170>)
    7be0:	4946      	ldr	r1, [pc, #280]	; (7cfc <z_add_timeout+0x174>)
    7be2:	4842      	ldr	r0, [pc, #264]	; (7cec <z_add_timeout+0x164>)
    7be4:	238e      	movs	r3, #142	; 0x8e
    7be6:	f001 f83c 	bl	8c62 <assert_print>
    7bea:	4942      	ldr	r1, [pc, #264]	; (7cf4 <z_add_timeout+0x16c>)
    7bec:	4844      	ldr	r0, [pc, #272]	; (7d00 <z_add_timeout+0x178>)
    7bee:	f001 f838 	bl	8c62 <assert_print>
    7bf2:	4841      	ldr	r0, [pc, #260]	; (7cf8 <z_add_timeout+0x170>)
    7bf4:	218e      	movs	r1, #142	; 0x8e
    7bf6:	f001 f82d 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7bfa:	483e      	ldr	r0, [pc, #248]	; (7cf4 <z_add_timeout+0x16c>)
    7bfc:	f7fe fb5a 	bl	62b4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7c00:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7c04:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    7c08:	da1f      	bge.n	7c4a <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7c0a:	493e      	ldr	r1, [pc, #248]	; (7d04 <z_add_timeout+0x17c>)
    7c0c:	e9d1 2000 	ldrd	r2, r0, [r1]
    7c10:	f06f 0301 	mvn.w	r3, #1
    7c14:	1a9b      	subs	r3, r3, r2
    7c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7c1a:	eb62 0000 	sbc.w	r0, r2, r0
    7c1e:	1b9e      	subs	r6, r3, r6
    7c20:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    7c24:	2e01      	cmp	r6, #1
    7c26:	f170 0300 	sbcs.w	r3, r0, #0
    7c2a:	da01      	bge.n	7c30 <z_add_timeout+0xa8>
    7c2c:	2601      	movs	r6, #1
    7c2e:	2000      	movs	r0, #0
	return list->head == list;
    7c30:	4a35      	ldr	r2, [pc, #212]	; (7d08 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    7c32:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c36:	4293      	cmp	r3, r2
    7c38:	e9c4 6004 	strd	r6, r0, [r4, #16]
    7c3c:	d116      	bne.n	7c6c <z_add_timeout+0xe4>
	node->prev = tail;
    7c3e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    7c42:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    7c46:	6054      	str	r4, [r2, #4]
}
    7c48:	e024      	b.n	7c94 <z_add_timeout+0x10c>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7c4a:	f7ff ff53 	bl	7af4 <elapsed>
    7c4e:	3601      	adds	r6, #1
    7c50:	f145 0500 	adc.w	r5, r5, #0
    7c54:	1836      	adds	r6, r6, r0
    7c56:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    7c5a:	e7e9      	b.n	7c30 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7c5c:	1a09      	subs	r1, r1, r0
    7c5e:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
    7c62:	459c      	cmp	ip, r3
    7c64:	e9c4 1504 	strd	r1, r5, [r4, #16]
    7c68:	d0e9      	beq.n	7c3e <z_add_timeout+0xb6>
    7c6a:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7c6c:	2b00      	cmp	r3, #0
    7c6e:	d0e6      	beq.n	7c3e <z_add_timeout+0xb6>
			if (t->dticks > to->dticks) {
    7c70:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
    7c74:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    7c78:	4281      	cmp	r1, r0
    7c7a:	eb75 0e06 	sbcs.w	lr, r5, r6
    7c7e:	daed      	bge.n	7c5c <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    7c80:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    7c82:	6859      	ldr	r1, [r3, #4]
    7c84:	eb66 0605 	sbc.w	r6, r6, r5
    7c88:	e9c3 0604 	strd	r0, r6, [r3, #16]
	node->next = successor;
    7c8c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7c90:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7c92:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7c94:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c96:	4293      	cmp	r3, r2
    7c98:	d00b      	beq.n	7cb2 <z_add_timeout+0x12a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7c9a:	429c      	cmp	r4, r3
    7c9c:	d109      	bne.n	7cb2 <z_add_timeout+0x12a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7c9e:	f7ff ff33 	bl	7b08 <next_timeout>

			if (next_time == 0 ||
    7ca2:	b118      	cbz	r0, 7cac <z_add_timeout+0x124>
			    _current_cpu->slice_ticks != next_time) {
    7ca4:	4b19      	ldr	r3, [pc, #100]	; (7d0c <z_add_timeout+0x184>)
			if (next_time == 0 ||
    7ca6:	691b      	ldr	r3, [r3, #16]
    7ca8:	4283      	cmp	r3, r0
    7caa:	d002      	beq.n	7cb2 <z_add_timeout+0x12a>
				sys_clock_set_timeout(next_time, false);
    7cac:	2100      	movs	r1, #0
    7cae:	f7fc ff27 	bl	4b00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cb2:	4810      	ldr	r0, [pc, #64]	; (7cf4 <z_add_timeout+0x16c>)
    7cb4:	f7fe faee 	bl	6294 <z_spin_unlock_valid>
    7cb8:	b968      	cbnz	r0, 7cd6 <z_add_timeout+0x14e>
    7cba:	4a0f      	ldr	r2, [pc, #60]	; (7cf8 <z_add_timeout+0x170>)
    7cbc:	4914      	ldr	r1, [pc, #80]	; (7d10 <z_add_timeout+0x188>)
    7cbe:	480b      	ldr	r0, [pc, #44]	; (7cec <z_add_timeout+0x164>)
    7cc0:	23b9      	movs	r3, #185	; 0xb9
    7cc2:	f000 ffce 	bl	8c62 <assert_print>
    7cc6:	490b      	ldr	r1, [pc, #44]	; (7cf4 <z_add_timeout+0x16c>)
    7cc8:	4812      	ldr	r0, [pc, #72]	; (7d14 <z_add_timeout+0x18c>)
    7cca:	f000 ffca 	bl	8c62 <assert_print>
    7cce:	480a      	ldr	r0, [pc, #40]	; (7cf8 <z_add_timeout+0x170>)
    7cd0:	21b9      	movs	r1, #185	; 0xb9
    7cd2:	f000 ffbf 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7cd6:	f387 8811 	msr	BASEPRI, r7
    7cda:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ce2:	bf00      	nop
    7ce4:	0000b5fa 	.word	0x0000b5fa
    7ce8:	0000b5d6 	.word	0x0000b5d6
    7cec:	00009bdf 	.word	0x00009bdf
    7cf0:	0000b420 	.word	0x0000b420
    7cf4:	20000c74 	.word	0x20000c74
    7cf8:	00009f7a 	.word	0x00009f7a
    7cfc:	00009fd3 	.word	0x00009fd3
    7d00:	00009fe8 	.word	0x00009fe8
    7d04:	20000500 	.word	0x20000500
    7d08:	20000174 	.word	0x20000174
    7d0c:	20000c30 	.word	0x20000c30
    7d10:	00009fa7 	.word	0x00009fa7
    7d14:	00009fbe 	.word	0x00009fbe

00007d18 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7d18:	b538      	push	{r3, r4, r5, lr}
    7d1a:	4604      	mov	r4, r0
	__asm__ volatile(
    7d1c:	f04f 0340 	mov.w	r3, #64	; 0x40
    7d20:	f3ef 8511 	mrs	r5, BASEPRI
    7d24:	f383 8812 	msr	BASEPRI_MAX, r3
    7d28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d2c:	481a      	ldr	r0, [pc, #104]	; (7d98 <z_abort_timeout+0x80>)
    7d2e:	f7fe faa3 	bl	6278 <z_spin_lock_valid>
    7d32:	b968      	cbnz	r0, 7d50 <z_abort_timeout+0x38>
    7d34:	4a19      	ldr	r2, [pc, #100]	; (7d9c <z_abort_timeout+0x84>)
    7d36:	491a      	ldr	r1, [pc, #104]	; (7da0 <z_abort_timeout+0x88>)
    7d38:	481a      	ldr	r0, [pc, #104]	; (7da4 <z_abort_timeout+0x8c>)
    7d3a:	238e      	movs	r3, #142	; 0x8e
    7d3c:	f000 ff91 	bl	8c62 <assert_print>
    7d40:	4915      	ldr	r1, [pc, #84]	; (7d98 <z_abort_timeout+0x80>)
    7d42:	4819      	ldr	r0, [pc, #100]	; (7da8 <z_abort_timeout+0x90>)
    7d44:	f000 ff8d 	bl	8c62 <assert_print>
    7d48:	4814      	ldr	r0, [pc, #80]	; (7d9c <z_abort_timeout+0x84>)
    7d4a:	218e      	movs	r1, #142	; 0x8e
    7d4c:	f000 ff82 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d50:	4811      	ldr	r0, [pc, #68]	; (7d98 <z_abort_timeout+0x80>)
    7d52:	f7fe faaf 	bl	62b4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7d56:	6823      	ldr	r3, [r4, #0]
    7d58:	b1db      	cbz	r3, 7d92 <z_abort_timeout+0x7a>
			remove_timeout(to);
    7d5a:	4620      	mov	r0, r4
    7d5c:	f7ff fefa 	bl	7b54 <remove_timeout>
			ret = 0;
    7d60:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d62:	480d      	ldr	r0, [pc, #52]	; (7d98 <z_abort_timeout+0x80>)
    7d64:	f7fe fa96 	bl	6294 <z_spin_unlock_valid>
    7d68:	b968      	cbnz	r0, 7d86 <z_abort_timeout+0x6e>
    7d6a:	4a0c      	ldr	r2, [pc, #48]	; (7d9c <z_abort_timeout+0x84>)
    7d6c:	490f      	ldr	r1, [pc, #60]	; (7dac <z_abort_timeout+0x94>)
    7d6e:	480d      	ldr	r0, [pc, #52]	; (7da4 <z_abort_timeout+0x8c>)
    7d70:	23b9      	movs	r3, #185	; 0xb9
    7d72:	f000 ff76 	bl	8c62 <assert_print>
    7d76:	4908      	ldr	r1, [pc, #32]	; (7d98 <z_abort_timeout+0x80>)
    7d78:	480d      	ldr	r0, [pc, #52]	; (7db0 <z_abort_timeout+0x98>)
    7d7a:	f000 ff72 	bl	8c62 <assert_print>
    7d7e:	4807      	ldr	r0, [pc, #28]	; (7d9c <z_abort_timeout+0x84>)
    7d80:	21b9      	movs	r1, #185	; 0xb9
    7d82:	f000 ff67 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7d86:	f385 8811 	msr	BASEPRI, r5
    7d8a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7d8e:	4620      	mov	r0, r4
    7d90:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7d92:	f06f 0415 	mvn.w	r4, #21
    7d96:	e7e4      	b.n	7d62 <z_abort_timeout+0x4a>
    7d98:	20000c74 	.word	0x20000c74
    7d9c:	00009f7a 	.word	0x00009f7a
    7da0:	00009fd3 	.word	0x00009fd3
    7da4:	00009bdf 	.word	0x00009bdf
    7da8:	00009fe8 	.word	0x00009fe8
    7dac:	00009fa7 	.word	0x00009fa7
    7db0:	00009fbe 	.word	0x00009fbe

00007db4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7db4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7db6:	f04f 0340 	mov.w	r3, #64	; 0x40
    7dba:	f3ef 8511 	mrs	r5, BASEPRI
    7dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    7dc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dc6:	4818      	ldr	r0, [pc, #96]	; (7e28 <z_get_next_timeout_expiry+0x74>)
    7dc8:	f7fe fa56 	bl	6278 <z_spin_lock_valid>
    7dcc:	b968      	cbnz	r0, 7dea <z_get_next_timeout_expiry+0x36>
    7dce:	4a17      	ldr	r2, [pc, #92]	; (7e2c <z_get_next_timeout_expiry+0x78>)
    7dd0:	4917      	ldr	r1, [pc, #92]	; (7e30 <z_get_next_timeout_expiry+0x7c>)
    7dd2:	4818      	ldr	r0, [pc, #96]	; (7e34 <z_get_next_timeout_expiry+0x80>)
    7dd4:	238e      	movs	r3, #142	; 0x8e
    7dd6:	f000 ff44 	bl	8c62 <assert_print>
    7dda:	4913      	ldr	r1, [pc, #76]	; (7e28 <z_get_next_timeout_expiry+0x74>)
    7ddc:	4816      	ldr	r0, [pc, #88]	; (7e38 <z_get_next_timeout_expiry+0x84>)
    7dde:	f000 ff40 	bl	8c62 <assert_print>
    7de2:	4812      	ldr	r0, [pc, #72]	; (7e2c <z_get_next_timeout_expiry+0x78>)
    7de4:	218e      	movs	r1, #142	; 0x8e
    7de6:	f000 ff35 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7dea:	480f      	ldr	r0, [pc, #60]	; (7e28 <z_get_next_timeout_expiry+0x74>)
    7dec:	f7fe fa62 	bl	62b4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7df0:	f7ff fe8a 	bl	7b08 <next_timeout>
    7df4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7df6:	480c      	ldr	r0, [pc, #48]	; (7e28 <z_get_next_timeout_expiry+0x74>)
    7df8:	f7fe fa4c 	bl	6294 <z_spin_unlock_valid>
    7dfc:	b968      	cbnz	r0, 7e1a <z_get_next_timeout_expiry+0x66>
    7dfe:	4a0b      	ldr	r2, [pc, #44]	; (7e2c <z_get_next_timeout_expiry+0x78>)
    7e00:	490e      	ldr	r1, [pc, #56]	; (7e3c <z_get_next_timeout_expiry+0x88>)
    7e02:	480c      	ldr	r0, [pc, #48]	; (7e34 <z_get_next_timeout_expiry+0x80>)
    7e04:	23b9      	movs	r3, #185	; 0xb9
    7e06:	f000 ff2c 	bl	8c62 <assert_print>
    7e0a:	4907      	ldr	r1, [pc, #28]	; (7e28 <z_get_next_timeout_expiry+0x74>)
    7e0c:	480c      	ldr	r0, [pc, #48]	; (7e40 <z_get_next_timeout_expiry+0x8c>)
    7e0e:	f000 ff28 	bl	8c62 <assert_print>
    7e12:	4806      	ldr	r0, [pc, #24]	; (7e2c <z_get_next_timeout_expiry+0x78>)
    7e14:	21b9      	movs	r1, #185	; 0xb9
    7e16:	f000 ff1d 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7e1a:	f385 8811 	msr	BASEPRI, r5
    7e1e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    7e22:	4620      	mov	r0, r4
    7e24:	bd38      	pop	{r3, r4, r5, pc}
    7e26:	bf00      	nop
    7e28:	20000c74 	.word	0x20000c74
    7e2c:	00009f7a 	.word	0x00009f7a
    7e30:	00009fd3 	.word	0x00009fd3
    7e34:	00009bdf 	.word	0x00009bdf
    7e38:	00009fe8 	.word	0x00009fe8
    7e3c:	00009fa7 	.word	0x00009fa7
    7e40:	00009fbe 	.word	0x00009fbe

00007e44 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7e44:	b570      	push	{r4, r5, r6, lr}
    7e46:	4604      	mov	r4, r0
    7e48:	460d      	mov	r5, r1
	__asm__ volatile(
    7e4a:	f04f 0340 	mov.w	r3, #64	; 0x40
    7e4e:	f3ef 8611 	mrs	r6, BASEPRI
    7e52:	f383 8812 	msr	BASEPRI_MAX, r3
    7e56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e5a:	481b      	ldr	r0, [pc, #108]	; (7ec8 <z_set_timeout_expiry+0x84>)
    7e5c:	f7fe fa0c 	bl	6278 <z_spin_lock_valid>
    7e60:	b968      	cbnz	r0, 7e7e <z_set_timeout_expiry+0x3a>
    7e62:	4a1a      	ldr	r2, [pc, #104]	; (7ecc <z_set_timeout_expiry+0x88>)
    7e64:	491a      	ldr	r1, [pc, #104]	; (7ed0 <z_set_timeout_expiry+0x8c>)
    7e66:	481b      	ldr	r0, [pc, #108]	; (7ed4 <z_set_timeout_expiry+0x90>)
    7e68:	238e      	movs	r3, #142	; 0x8e
    7e6a:	f000 fefa 	bl	8c62 <assert_print>
    7e6e:	4916      	ldr	r1, [pc, #88]	; (7ec8 <z_set_timeout_expiry+0x84>)
    7e70:	4819      	ldr	r0, [pc, #100]	; (7ed8 <z_set_timeout_expiry+0x94>)
    7e72:	f000 fef6 	bl	8c62 <assert_print>
    7e76:	4815      	ldr	r0, [pc, #84]	; (7ecc <z_set_timeout_expiry+0x88>)
    7e78:	218e      	movs	r1, #142	; 0x8e
    7e7a:	f000 feeb 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e7e:	4812      	ldr	r0, [pc, #72]	; (7ec8 <z_set_timeout_expiry+0x84>)
    7e80:	f7fe fa18 	bl	62b4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7e84:	f7ff fe40 	bl	7b08 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7e88:	2801      	cmp	r0, #1
    7e8a:	dd05      	ble.n	7e98 <z_set_timeout_expiry+0x54>
    7e8c:	42a0      	cmp	r0, r4
    7e8e:	db03      	blt.n	7e98 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7e90:	4629      	mov	r1, r5
    7e92:	4620      	mov	r0, r4
    7e94:	f7fc fe34 	bl	4b00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e98:	480b      	ldr	r0, [pc, #44]	; (7ec8 <z_set_timeout_expiry+0x84>)
    7e9a:	f7fe f9fb 	bl	6294 <z_spin_unlock_valid>
    7e9e:	b968      	cbnz	r0, 7ebc <z_set_timeout_expiry+0x78>
    7ea0:	4a0a      	ldr	r2, [pc, #40]	; (7ecc <z_set_timeout_expiry+0x88>)
    7ea2:	490e      	ldr	r1, [pc, #56]	; (7edc <z_set_timeout_expiry+0x98>)
    7ea4:	480b      	ldr	r0, [pc, #44]	; (7ed4 <z_set_timeout_expiry+0x90>)
    7ea6:	23b9      	movs	r3, #185	; 0xb9
    7ea8:	f000 fedb 	bl	8c62 <assert_print>
    7eac:	4906      	ldr	r1, [pc, #24]	; (7ec8 <z_set_timeout_expiry+0x84>)
    7eae:	480c      	ldr	r0, [pc, #48]	; (7ee0 <z_set_timeout_expiry+0x9c>)
    7eb0:	f000 fed7 	bl	8c62 <assert_print>
    7eb4:	4805      	ldr	r0, [pc, #20]	; (7ecc <z_set_timeout_expiry+0x88>)
    7eb6:	21b9      	movs	r1, #185	; 0xb9
    7eb8:	f000 fecc 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7ebc:	f386 8811 	msr	BASEPRI, r6
    7ec0:	f3bf 8f6f 	isb	sy
		}
	}
}
    7ec4:	bd70      	pop	{r4, r5, r6, pc}
    7ec6:	bf00      	nop
    7ec8:	20000c74 	.word	0x20000c74
    7ecc:	00009f7a 	.word	0x00009f7a
    7ed0:	00009fd3 	.word	0x00009fd3
    7ed4:	00009bdf 	.word	0x00009bdf
    7ed8:	00009fe8 	.word	0x00009fe8
    7edc:	00009fa7 	.word	0x00009fa7
    7ee0:	00009fbe 	.word	0x00009fbe

00007ee4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ee8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7eea:	f7fe feeb 	bl	6cc4 <z_time_slice>
	__asm__ volatile(
    7eee:	f04f 0340 	mov.w	r3, #64	; 0x40
    7ef2:	f3ef 8511 	mrs	r5, BASEPRI
    7ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    7efa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7efe:	484c      	ldr	r0, [pc, #304]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7f00:	f7fe f9ba 	bl	6278 <z_spin_lock_valid>
    7f04:	b968      	cbnz	r0, 7f22 <sys_clock_announce+0x3e>
    7f06:	4a4b      	ldr	r2, [pc, #300]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7f08:	494b      	ldr	r1, [pc, #300]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7f0a:	484c      	ldr	r0, [pc, #304]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7f0c:	238e      	movs	r3, #142	; 0x8e
    7f0e:	f000 fea8 	bl	8c62 <assert_print>
    7f12:	4947      	ldr	r1, [pc, #284]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7f14:	484a      	ldr	r0, [pc, #296]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7f16:	f000 fea4 	bl	8c62 <assert_print>
    7f1a:	4846      	ldr	r0, [pc, #280]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7f1c:	218e      	movs	r1, #142	; 0x8e
    7f1e:	f000 fe99 	bl	8c54 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    7f22:	4f48      	ldr	r7, [pc, #288]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
	z_spin_lock_set_owner(l);
    7f24:	4842      	ldr	r0, [pc, #264]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
	return list->head == list;
    7f26:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7f2a:	4e48      	ldr	r6, [pc, #288]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7f2c:	f7fe f9c2 	bl	62b4 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    7f30:	603c      	str	r4, [r7, #0]
    7f32:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7f36:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f38:	4544      	cmp	r4, r8
		curr_tick += dt;
    7f3a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    7f3e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    7f42:	d00b      	beq.n	7f5c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7f44:	b154      	cbz	r4, 7f5c <sys_clock_announce+0x78>
    7f46:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    7f4a:	429a      	cmp	r2, r3
    7f4c:	eb70 090c 	sbcs.w	r9, r0, ip
    7f50:	da28      	bge.n	7fa4 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7f52:	1a9b      	subs	r3, r3, r2
    7f54:	eb6c 0c00 	sbc.w	ip, ip, r0
    7f58:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    7f5c:	1851      	adds	r1, r2, r1
    7f5e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    7f62:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7f64:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    7f68:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7f6a:	f7ff fdcd 	bl	7b08 <next_timeout>
    7f6e:	4621      	mov	r1, r4
    7f70:	f7fc fdc6 	bl	4b00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f74:	482e      	ldr	r0, [pc, #184]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7f76:	f7fe f98d 	bl	6294 <z_spin_unlock_valid>
    7f7a:	b968      	cbnz	r0, 7f98 <sys_clock_announce+0xb4>
    7f7c:	4a2d      	ldr	r2, [pc, #180]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7f7e:	4934      	ldr	r1, [pc, #208]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7f80:	482e      	ldr	r0, [pc, #184]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7f82:	23b9      	movs	r3, #185	; 0xb9
    7f84:	f000 fe6d 	bl	8c62 <assert_print>
    7f88:	4929      	ldr	r1, [pc, #164]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7f8a:	4832      	ldr	r0, [pc, #200]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7f8c:	f000 fe69 	bl	8c62 <assert_print>
    7f90:	4828      	ldr	r0, [pc, #160]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7f92:	21b9      	movs	r1, #185	; 0xb9
    7f94:	f000 fe5e 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    7f98:	f385 8811 	msr	BASEPRI, r5
    7f9c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7fa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7fa4:	1859      	adds	r1, r3, r1
    7fa6:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    7faa:	1ad3      	subs	r3, r2, r3
    7fac:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    7fae:	2200      	movs	r2, #0
    7fb0:	2300      	movs	r3, #0
		curr_tick += dt;
    7fb2:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    7fb6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    7fba:	4620      	mov	r0, r4
    7fbc:	f7ff fdca 	bl	7b54 <remove_timeout>
    7fc0:	481b      	ldr	r0, [pc, #108]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fc2:	f7fe f967 	bl	6294 <z_spin_unlock_valid>
    7fc6:	b968      	cbnz	r0, 7fe4 <sys_clock_announce+0x100>
    7fc8:	4a1a      	ldr	r2, [pc, #104]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fca:	4921      	ldr	r1, [pc, #132]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7fcc:	481b      	ldr	r0, [pc, #108]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7fce:	23b9      	movs	r3, #185	; 0xb9
    7fd0:	f000 fe47 	bl	8c62 <assert_print>
    7fd4:	4916      	ldr	r1, [pc, #88]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fd6:	481f      	ldr	r0, [pc, #124]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7fd8:	f000 fe43 	bl	8c62 <assert_print>
    7fdc:	4815      	ldr	r0, [pc, #84]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fde:	21b9      	movs	r1, #185	; 0xb9
    7fe0:	f000 fe38 	bl	8c54 <assert_post_action>
    7fe4:	f385 8811 	msr	BASEPRI, r5
    7fe8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7fec:	68a3      	ldr	r3, [r4, #8]
    7fee:	4620      	mov	r0, r4
    7ff0:	4798      	blx	r3
	__asm__ volatile(
    7ff2:	f04f 0340 	mov.w	r3, #64	; 0x40
    7ff6:	f3ef 8511 	mrs	r5, BASEPRI
    7ffa:	f383 8812 	msr	BASEPRI_MAX, r3
    7ffe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8002:	480b      	ldr	r0, [pc, #44]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8004:	f7fe f938 	bl	6278 <z_spin_lock_valid>
    8008:	b968      	cbnz	r0, 8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    800a:	4a0a      	ldr	r2, [pc, #40]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    800c:	490a      	ldr	r1, [pc, #40]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    800e:	480b      	ldr	r0, [pc, #44]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    8010:	238e      	movs	r3, #142	; 0x8e
    8012:	f000 fe26 	bl	8c62 <assert_print>
    8016:	4906      	ldr	r1, [pc, #24]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8018:	4809      	ldr	r0, [pc, #36]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    801a:	f000 fe22 	bl	8c62 <assert_print>
    801e:	4805      	ldr	r0, [pc, #20]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8020:	218e      	movs	r1, #142	; 0x8e
    8022:	f000 fe17 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    8026:	4802      	ldr	r0, [pc, #8]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8028:	f7fe f944 	bl	62b4 <z_spin_lock_set_owner>
	return k;
    802c:	e781      	b.n	7f32 <sys_clock_announce+0x4e>
    802e:	bf00      	nop
    8030:	20000c74 	.word	0x20000c74
    8034:	00009f7a 	.word	0x00009f7a
    8038:	00009fd3 	.word	0x00009fd3
    803c:	00009bdf 	.word	0x00009bdf
    8040:	00009fe8 	.word	0x00009fe8
    8044:	20000c70 	.word	0x20000c70
    8048:	20000174 	.word	0x20000174
    804c:	20000500 	.word	0x20000500
    8050:	00009fa7 	.word	0x00009fa7
    8054:	00009fbe 	.word	0x00009fbe

00008058 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	f04f 0340 	mov.w	r3, #64	; 0x40
    805e:	f3ef 8611 	mrs	r6, BASEPRI
    8062:	f383 8812 	msr	BASEPRI_MAX, r3
    8066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    806a:	481b      	ldr	r0, [pc, #108]	; (80d8 <sys_clock_tick_get+0x80>)
    806c:	f7fe f904 	bl	6278 <z_spin_lock_valid>
    8070:	b968      	cbnz	r0, 808e <sys_clock_tick_get+0x36>
    8072:	4a1a      	ldr	r2, [pc, #104]	; (80dc <sys_clock_tick_get+0x84>)
    8074:	491a      	ldr	r1, [pc, #104]	; (80e0 <sys_clock_tick_get+0x88>)
    8076:	481b      	ldr	r0, [pc, #108]	; (80e4 <sys_clock_tick_get+0x8c>)
    8078:	238e      	movs	r3, #142	; 0x8e
    807a:	f000 fdf2 	bl	8c62 <assert_print>
    807e:	4916      	ldr	r1, [pc, #88]	; (80d8 <sys_clock_tick_get+0x80>)
    8080:	4819      	ldr	r0, [pc, #100]	; (80e8 <sys_clock_tick_get+0x90>)
    8082:	f000 fdee 	bl	8c62 <assert_print>
    8086:	4815      	ldr	r0, [pc, #84]	; (80dc <sys_clock_tick_get+0x84>)
    8088:	218e      	movs	r1, #142	; 0x8e
    808a:	f000 fde3 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    808e:	4812      	ldr	r0, [pc, #72]	; (80d8 <sys_clock_tick_get+0x80>)
    8090:	f7fe f910 	bl	62b4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8094:	f7fc fd66 	bl	4b64 <sys_clock_elapsed>
    8098:	4a14      	ldr	r2, [pc, #80]	; (80ec <sys_clock_tick_get+0x94>)
    809a:	e9d2 4500 	ldrd	r4, r5, [r2]
    809e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80a0:	480d      	ldr	r0, [pc, #52]	; (80d8 <sys_clock_tick_get+0x80>)
    80a2:	f145 0500 	adc.w	r5, r5, #0
    80a6:	f7fe f8f5 	bl	6294 <z_spin_unlock_valid>
    80aa:	b968      	cbnz	r0, 80c8 <sys_clock_tick_get+0x70>
    80ac:	4a0b      	ldr	r2, [pc, #44]	; (80dc <sys_clock_tick_get+0x84>)
    80ae:	4910      	ldr	r1, [pc, #64]	; (80f0 <sys_clock_tick_get+0x98>)
    80b0:	480c      	ldr	r0, [pc, #48]	; (80e4 <sys_clock_tick_get+0x8c>)
    80b2:	23b9      	movs	r3, #185	; 0xb9
    80b4:	f000 fdd5 	bl	8c62 <assert_print>
    80b8:	4907      	ldr	r1, [pc, #28]	; (80d8 <sys_clock_tick_get+0x80>)
    80ba:	480e      	ldr	r0, [pc, #56]	; (80f4 <sys_clock_tick_get+0x9c>)
    80bc:	f000 fdd1 	bl	8c62 <assert_print>
    80c0:	4806      	ldr	r0, [pc, #24]	; (80dc <sys_clock_tick_get+0x84>)
    80c2:	21b9      	movs	r1, #185	; 0xb9
    80c4:	f000 fdc6 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    80c8:	f386 8811 	msr	BASEPRI, r6
    80cc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    80d0:	4620      	mov	r0, r4
    80d2:	4629      	mov	r1, r5
    80d4:	bd70      	pop	{r4, r5, r6, pc}
    80d6:	bf00      	nop
    80d8:	20000c74 	.word	0x20000c74
    80dc:	00009f7a 	.word	0x00009f7a
    80e0:	00009fd3 	.word	0x00009fd3
    80e4:	00009bdf 	.word	0x00009bdf
    80e8:	00009fe8 	.word	0x00009fe8
    80ec:	20000500 	.word	0x20000500
    80f0:	00009fa7 	.word	0x00009fa7
    80f4:	00009fbe 	.word	0x00009fbe

000080f8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    80f8:	b570      	push	{r4, r5, r6, lr}
    80fa:	4604      	mov	r4, r0
	__asm__ volatile(
    80fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    8100:	f3ef 8511 	mrs	r5, BASEPRI
    8104:	f383 8812 	msr	BASEPRI_MAX, r3
    8108:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    810c:	484d      	ldr	r0, [pc, #308]	; (8244 <z_timer_expiration_handler+0x14c>)
    810e:	f7fe f8b3 	bl	6278 <z_spin_lock_valid>
    8112:	b968      	cbnz	r0, 8130 <z_timer_expiration_handler+0x38>
    8114:	4a4c      	ldr	r2, [pc, #304]	; (8248 <z_timer_expiration_handler+0x150>)
    8116:	494d      	ldr	r1, [pc, #308]	; (824c <z_timer_expiration_handler+0x154>)
    8118:	484d      	ldr	r0, [pc, #308]	; (8250 <z_timer_expiration_handler+0x158>)
    811a:	238e      	movs	r3, #142	; 0x8e
    811c:	f000 fda1 	bl	8c62 <assert_print>
    8120:	4948      	ldr	r1, [pc, #288]	; (8244 <z_timer_expiration_handler+0x14c>)
    8122:	484c      	ldr	r0, [pc, #304]	; (8254 <z_timer_expiration_handler+0x15c>)
    8124:	f000 fd9d 	bl	8c62 <assert_print>
    8128:	4847      	ldr	r0, [pc, #284]	; (8248 <z_timer_expiration_handler+0x150>)
    812a:	218e      	movs	r1, #142	; 0x8e
    812c:	f000 fd92 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    8130:	4844      	ldr	r0, [pc, #272]	; (8244 <z_timer_expiration_handler+0x14c>)
    8132:	f7fe f8bf 	bl	62b4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8136:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    813a:	3301      	adds	r3, #1
    813c:	f142 0200 	adc.w	r2, r2, #0
    8140:	2b02      	cmp	r3, #2
    8142:	f172 0200 	sbcs.w	r2, r2, #0
    8146:	d305      	bcc.n	8154 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8148:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    814c:	4942      	ldr	r1, [pc, #264]	; (8258 <z_timer_expiration_handler+0x160>)
    814e:	4620      	mov	r0, r4
    8150:	f7ff fd1a 	bl	7b88 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8154:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8156:	3301      	adds	r3, #1
    8158:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    815a:	6a23      	ldr	r3, [r4, #32]
    815c:	2b00      	cmp	r3, #0
    815e:	d035      	beq.n	81cc <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8160:	4838      	ldr	r0, [pc, #224]	; (8244 <z_timer_expiration_handler+0x14c>)
    8162:	f7fe f897 	bl	6294 <z_spin_unlock_valid>
    8166:	b968      	cbnz	r0, 8184 <z_timer_expiration_handler+0x8c>
    8168:	4a37      	ldr	r2, [pc, #220]	; (8248 <z_timer_expiration_handler+0x150>)
    816a:	493c      	ldr	r1, [pc, #240]	; (825c <z_timer_expiration_handler+0x164>)
    816c:	4838      	ldr	r0, [pc, #224]	; (8250 <z_timer_expiration_handler+0x158>)
    816e:	23b9      	movs	r3, #185	; 0xb9
    8170:	f000 fd77 	bl	8c62 <assert_print>
    8174:	4933      	ldr	r1, [pc, #204]	; (8244 <z_timer_expiration_handler+0x14c>)
    8176:	483a      	ldr	r0, [pc, #232]	; (8260 <z_timer_expiration_handler+0x168>)
    8178:	f000 fd73 	bl	8c62 <assert_print>
    817c:	4832      	ldr	r0, [pc, #200]	; (8248 <z_timer_expiration_handler+0x150>)
    817e:	21b9      	movs	r1, #185	; 0xb9
    8180:	f000 fd68 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    8184:	f385 8811 	msr	BASEPRI, r5
    8188:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    818c:	6a23      	ldr	r3, [r4, #32]
    818e:	4620      	mov	r0, r4
    8190:	4798      	blx	r3
	__asm__ volatile(
    8192:	f04f 0340 	mov.w	r3, #64	; 0x40
    8196:	f3ef 8511 	mrs	r5, BASEPRI
    819a:	f383 8812 	msr	BASEPRI_MAX, r3
    819e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81a2:	4828      	ldr	r0, [pc, #160]	; (8244 <z_timer_expiration_handler+0x14c>)
    81a4:	f7fe f868 	bl	6278 <z_spin_lock_valid>
    81a8:	b968      	cbnz	r0, 81c6 <z_timer_expiration_handler+0xce>
    81aa:	4a27      	ldr	r2, [pc, #156]	; (8248 <z_timer_expiration_handler+0x150>)
    81ac:	4927      	ldr	r1, [pc, #156]	; (824c <z_timer_expiration_handler+0x154>)
    81ae:	4828      	ldr	r0, [pc, #160]	; (8250 <z_timer_expiration_handler+0x158>)
    81b0:	238e      	movs	r3, #142	; 0x8e
    81b2:	f000 fd56 	bl	8c62 <assert_print>
    81b6:	4923      	ldr	r1, [pc, #140]	; (8244 <z_timer_expiration_handler+0x14c>)
    81b8:	4826      	ldr	r0, [pc, #152]	; (8254 <z_timer_expiration_handler+0x15c>)
    81ba:	f000 fd52 	bl	8c62 <assert_print>
    81be:	4822      	ldr	r0, [pc, #136]	; (8248 <z_timer_expiration_handler+0x150>)
    81c0:	218e      	movs	r1, #142	; 0x8e
    81c2:	f000 fd47 	bl	8c54 <assert_post_action>
	z_spin_lock_set_owner(l);
    81c6:	481f      	ldr	r0, [pc, #124]	; (8244 <z_timer_expiration_handler+0x14c>)
    81c8:	f7fe f874 	bl	62b4 <z_spin_lock_set_owner>
	return list->head == list;
    81cc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81d0:	42a6      	cmp	r6, r4
    81d2:	d000      	beq.n	81d6 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    81d4:	b9b6      	cbnz	r6, 8204 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81d6:	481b      	ldr	r0, [pc, #108]	; (8244 <z_timer_expiration_handler+0x14c>)
    81d8:	f7fe f85c 	bl	6294 <z_spin_unlock_valid>
    81dc:	b968      	cbnz	r0, 81fa <z_timer_expiration_handler+0x102>
    81de:	4a1a      	ldr	r2, [pc, #104]	; (8248 <z_timer_expiration_handler+0x150>)
    81e0:	491e      	ldr	r1, [pc, #120]	; (825c <z_timer_expiration_handler+0x164>)
    81e2:	481b      	ldr	r0, [pc, #108]	; (8250 <z_timer_expiration_handler+0x158>)
    81e4:	23b9      	movs	r3, #185	; 0xb9
    81e6:	f000 fd3c 	bl	8c62 <assert_print>
    81ea:	4916      	ldr	r1, [pc, #88]	; (8244 <z_timer_expiration_handler+0x14c>)
    81ec:	481c      	ldr	r0, [pc, #112]	; (8260 <z_timer_expiration_handler+0x168>)
    81ee:	f000 fd38 	bl	8c62 <assert_print>
    81f2:	4815      	ldr	r0, [pc, #84]	; (8248 <z_timer_expiration_handler+0x150>)
    81f4:	21b9      	movs	r1, #185	; 0xb9
    81f6:	f000 fd2d 	bl	8c54 <assert_post_action>
	__asm__ volatile(
    81fa:	f385 8811 	msr	BASEPRI, r5
    81fe:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    8202:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    8204:	4630      	mov	r0, r6
    8206:	f7fe fb8f 	bl	6928 <z_unpend_thread_no_timeout>
    820a:	2300      	movs	r3, #0
    820c:	480d      	ldr	r0, [pc, #52]	; (8244 <z_timer_expiration_handler+0x14c>)
    820e:	67b3      	str	r3, [r6, #120]	; 0x78
    8210:	f7fe f840 	bl	6294 <z_spin_unlock_valid>
    8214:	b968      	cbnz	r0, 8232 <z_timer_expiration_handler+0x13a>
    8216:	4a0c      	ldr	r2, [pc, #48]	; (8248 <z_timer_expiration_handler+0x150>)
    8218:	4910      	ldr	r1, [pc, #64]	; (825c <z_timer_expiration_handler+0x164>)
    821a:	480d      	ldr	r0, [pc, #52]	; (8250 <z_timer_expiration_handler+0x158>)
    821c:	23b9      	movs	r3, #185	; 0xb9
    821e:	f000 fd20 	bl	8c62 <assert_print>
    8222:	4908      	ldr	r1, [pc, #32]	; (8244 <z_timer_expiration_handler+0x14c>)
    8224:	480e      	ldr	r0, [pc, #56]	; (8260 <z_timer_expiration_handler+0x168>)
    8226:	f000 fd1c 	bl	8c62 <assert_print>
    822a:	4807      	ldr	r0, [pc, #28]	; (8248 <z_timer_expiration_handler+0x150>)
    822c:	21b9      	movs	r1, #185	; 0xb9
    822e:	f000 fd11 	bl	8c54 <assert_post_action>
    8232:	f385 8811 	msr	BASEPRI, r5
    8236:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    823a:	4630      	mov	r0, r6
}
    823c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    8240:	f7fe be04 	b.w	6e4c <z_ready_thread>
    8244:	20000c78 	.word	0x20000c78
    8248:	00009f7a 	.word	0x00009f7a
    824c:	00009fd3 	.word	0x00009fd3
    8250:	00009bdf 	.word	0x00009bdf
    8254:	00009fe8 	.word	0x00009fe8
    8258:	000080f9 	.word	0x000080f9
    825c:	00009fa7 	.word	0x00009fa7
    8260:	00009fbe 	.word	0x00009fbe

00008264 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    826c:	bf08      	it	eq
    826e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8272:	4605      	mov	r5, r0
    8274:	4614      	mov	r4, r2
    8276:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    827a:	4619      	mov	r1, r3
    827c:	4691      	mov	r9, r2
    827e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8280:	d037      	beq.n	82f2 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8282:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8286:	bf08      	it	eq
    8288:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    828c:	4637      	mov	r7, r6
    828e:	4682      	mov	sl, r0
    8290:	d011      	beq.n	82b6 <z_impl_k_timer_start+0x52>
    8292:	ea50 0306 	orrs.w	r3, r0, r6
    8296:	d00e      	beq.n	82b6 <z_impl_k_timer_start+0x52>
    8298:	1c72      	adds	r2, r6, #1
    829a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    829e:	db0a      	blt.n	82b6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    82a0:	2e02      	cmp	r6, #2
    82a2:	4684      	mov	ip, r0
    82a4:	f170 0000 	sbcs.w	r0, r0, #0
    82a8:	bfbc      	itt	lt
    82aa:	2702      	movlt	r7, #2
    82ac:	f04f 0c00 	movlt.w	ip, #0
    82b0:	3f01      	subs	r7, #1
    82b2:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    82b6:	1c63      	adds	r3, r4, #1
    82b8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    82bc:	db0a      	blt.n	82d4 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    82be:	2c01      	cmp	r4, #1
    82c0:	f171 0300 	sbcs.w	r3, r1, #0
    82c4:	4622      	mov	r2, r4
    82c6:	bfbc      	itt	lt
    82c8:	2201      	movlt	r2, #1
    82ca:	2100      	movlt	r1, #0
    82cc:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    82d0:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    82d4:	4628      	mov	r0, r5
    82d6:	f7ff fd1f 	bl	7d18 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    82da:	2300      	movs	r3, #0
    82dc:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    82de:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    82e2:	464a      	mov	r2, r9
    82e4:	4643      	mov	r3, r8
    82e6:	4628      	mov	r0, r5
    82e8:	4903      	ldr	r1, [pc, #12]	; (82f8 <z_impl_k_timer_start+0x94>)
		     duration);
}
    82ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    82ee:	f7ff bc4b 	b.w	7b88 <z_add_timeout>
}
    82f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82f6:	bf00      	nop
    82f8:	000080f9 	.word	0x000080f9

000082fc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    82fc:	4b01      	ldr	r3, [pc, #4]	; (8304 <k_thread_system_pool_assign+0x8>)
    82fe:	6703      	str	r3, [r0, #112]	; 0x70
}
    8300:	4770      	bx	lr
    8302:	bf00      	nop
    8304:	200001f4 	.word	0x200001f4

00008308 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8308:	4a02      	ldr	r2, [pc, #8]	; (8314 <boot_banner+0xc>)
    830a:	4903      	ldr	r1, [pc, #12]	; (8318 <boot_banner+0x10>)
    830c:	4803      	ldr	r0, [pc, #12]	; (831c <boot_banner+0x14>)
    830e:	f000 bbae 	b.w	8a6e <printk>
    8312:	bf00      	nop
    8314:	0000b422 	.word	0x0000b422
    8318:	0000b61a 	.word	0x0000b61a
    831c:	0000b627 	.word	0x0000b627

00008320 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8320:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8322:	4c0e      	ldr	r4, [pc, #56]	; (835c <statics_init+0x3c>)
    8324:	4d0e      	ldr	r5, [pc, #56]	; (8360 <statics_init+0x40>)
    8326:	4e0f      	ldr	r6, [pc, #60]	; (8364 <statics_init+0x44>)
    8328:	42ac      	cmp	r4, r5
    832a:	d90c      	bls.n	8346 <statics_init+0x26>
    832c:	490e      	ldr	r1, [pc, #56]	; (8368 <statics_init+0x48>)
    832e:	480f      	ldr	r0, [pc, #60]	; (836c <statics_init+0x4c>)
    8330:	2318      	movs	r3, #24
    8332:	4632      	mov	r2, r6
    8334:	f000 fc95 	bl	8c62 <assert_print>
    8338:	480d      	ldr	r0, [pc, #52]	; (8370 <statics_init+0x50>)
    833a:	f000 fc92 	bl	8c62 <assert_print>
    833e:	2118      	movs	r1, #24
    8340:	4630      	mov	r0, r6
    8342:	f000 fc87 	bl	8c54 <assert_post_action>
    8346:	42ac      	cmp	r4, r5
    8348:	d301      	bcc.n	834e <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    834a:	2000      	movs	r0, #0
    834c:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    834e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8352:	4620      	mov	r0, r4
    8354:	f001 f900 	bl	9558 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8358:	3418      	adds	r4, #24
    835a:	e7e5      	b.n	8328 <statics_init+0x8>
    835c:	200001f4 	.word	0x200001f4
    8360:	2000020c 	.word	0x2000020c
    8364:	0000b64e 	.word	0x0000b64e
    8368:	0000b670 	.word	0x0000b670
    836c:	00009bdf 	.word	0x00009bdf
    8370:	0000b1f7 	.word	0x0000b1f7

00008374 <__udivmoddi4>:
    8374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8378:	9e08      	ldr	r6, [sp, #32]
    837a:	460d      	mov	r5, r1
    837c:	4604      	mov	r4, r0
    837e:	460f      	mov	r7, r1
    8380:	2b00      	cmp	r3, #0
    8382:	d14a      	bne.n	841a <__udivmoddi4+0xa6>
    8384:	428a      	cmp	r2, r1
    8386:	4694      	mov	ip, r2
    8388:	d965      	bls.n	8456 <__udivmoddi4+0xe2>
    838a:	fab2 f382 	clz	r3, r2
    838e:	b143      	cbz	r3, 83a2 <__udivmoddi4+0x2e>
    8390:	fa02 fc03 	lsl.w	ip, r2, r3
    8394:	f1c3 0220 	rsb	r2, r3, #32
    8398:	409f      	lsls	r7, r3
    839a:	fa20 f202 	lsr.w	r2, r0, r2
    839e:	4317      	orrs	r7, r2
    83a0:	409c      	lsls	r4, r3
    83a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    83a6:	fa1f f58c 	uxth.w	r5, ip
    83aa:	fbb7 f1fe 	udiv	r1, r7, lr
    83ae:	0c22      	lsrs	r2, r4, #16
    83b0:	fb0e 7711 	mls	r7, lr, r1, r7
    83b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    83b8:	fb01 f005 	mul.w	r0, r1, r5
    83bc:	4290      	cmp	r0, r2
    83be:	d90a      	bls.n	83d6 <__udivmoddi4+0x62>
    83c0:	eb1c 0202 	adds.w	r2, ip, r2
    83c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
    83c8:	f080 811b 	bcs.w	8602 <__udivmoddi4+0x28e>
    83cc:	4290      	cmp	r0, r2
    83ce:	f240 8118 	bls.w	8602 <__udivmoddi4+0x28e>
    83d2:	3902      	subs	r1, #2
    83d4:	4462      	add	r2, ip
    83d6:	1a12      	subs	r2, r2, r0
    83d8:	b2a4      	uxth	r4, r4
    83da:	fbb2 f0fe 	udiv	r0, r2, lr
    83de:	fb0e 2210 	mls	r2, lr, r0, r2
    83e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    83e6:	fb00 f505 	mul.w	r5, r0, r5
    83ea:	42a5      	cmp	r5, r4
    83ec:	d90a      	bls.n	8404 <__udivmoddi4+0x90>
    83ee:	eb1c 0404 	adds.w	r4, ip, r4
    83f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    83f6:	f080 8106 	bcs.w	8606 <__udivmoddi4+0x292>
    83fa:	42a5      	cmp	r5, r4
    83fc:	f240 8103 	bls.w	8606 <__udivmoddi4+0x292>
    8400:	4464      	add	r4, ip
    8402:	3802      	subs	r0, #2
    8404:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8408:	1b64      	subs	r4, r4, r5
    840a:	2100      	movs	r1, #0
    840c:	b11e      	cbz	r6, 8416 <__udivmoddi4+0xa2>
    840e:	40dc      	lsrs	r4, r3
    8410:	2300      	movs	r3, #0
    8412:	e9c6 4300 	strd	r4, r3, [r6]
    8416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    841a:	428b      	cmp	r3, r1
    841c:	d908      	bls.n	8430 <__udivmoddi4+0xbc>
    841e:	2e00      	cmp	r6, #0
    8420:	f000 80ec 	beq.w	85fc <__udivmoddi4+0x288>
    8424:	2100      	movs	r1, #0
    8426:	e9c6 0500 	strd	r0, r5, [r6]
    842a:	4608      	mov	r0, r1
    842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8430:	fab3 f183 	clz	r1, r3
    8434:	2900      	cmp	r1, #0
    8436:	d149      	bne.n	84cc <__udivmoddi4+0x158>
    8438:	42ab      	cmp	r3, r5
    843a:	d302      	bcc.n	8442 <__udivmoddi4+0xce>
    843c:	4282      	cmp	r2, r0
    843e:	f200 80f7 	bhi.w	8630 <__udivmoddi4+0x2bc>
    8442:	1a84      	subs	r4, r0, r2
    8444:	eb65 0203 	sbc.w	r2, r5, r3
    8448:	2001      	movs	r0, #1
    844a:	4617      	mov	r7, r2
    844c:	2e00      	cmp	r6, #0
    844e:	d0e2      	beq.n	8416 <__udivmoddi4+0xa2>
    8450:	e9c6 4700 	strd	r4, r7, [r6]
    8454:	e7df      	b.n	8416 <__udivmoddi4+0xa2>
    8456:	b902      	cbnz	r2, 845a <__udivmoddi4+0xe6>
    8458:	deff      	udf	#255	; 0xff
    845a:	fab2 f382 	clz	r3, r2
    845e:	2b00      	cmp	r3, #0
    8460:	f040 808f 	bne.w	8582 <__udivmoddi4+0x20e>
    8464:	1a8a      	subs	r2, r1, r2
    8466:	ea4f 471c 	mov.w	r7, ip, lsr #16
    846a:	fa1f fe8c 	uxth.w	lr, ip
    846e:	2101      	movs	r1, #1
    8470:	fbb2 f5f7 	udiv	r5, r2, r7
    8474:	fb07 2015 	mls	r0, r7, r5, r2
    8478:	0c22      	lsrs	r2, r4, #16
    847a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    847e:	fb0e f005 	mul.w	r0, lr, r5
    8482:	4290      	cmp	r0, r2
    8484:	d908      	bls.n	8498 <__udivmoddi4+0x124>
    8486:	eb1c 0202 	adds.w	r2, ip, r2
    848a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    848e:	d202      	bcs.n	8496 <__udivmoddi4+0x122>
    8490:	4290      	cmp	r0, r2
    8492:	f200 80ca 	bhi.w	862a <__udivmoddi4+0x2b6>
    8496:	4645      	mov	r5, r8
    8498:	1a12      	subs	r2, r2, r0
    849a:	b2a4      	uxth	r4, r4
    849c:	fbb2 f0f7 	udiv	r0, r2, r7
    84a0:	fb07 2210 	mls	r2, r7, r0, r2
    84a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    84a8:	fb0e fe00 	mul.w	lr, lr, r0
    84ac:	45a6      	cmp	lr, r4
    84ae:	d908      	bls.n	84c2 <__udivmoddi4+0x14e>
    84b0:	eb1c 0404 	adds.w	r4, ip, r4
    84b4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    84b8:	d202      	bcs.n	84c0 <__udivmoddi4+0x14c>
    84ba:	45a6      	cmp	lr, r4
    84bc:	f200 80ba 	bhi.w	8634 <__udivmoddi4+0x2c0>
    84c0:	4610      	mov	r0, r2
    84c2:	eba4 040e 	sub.w	r4, r4, lr
    84c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    84ca:	e79f      	b.n	840c <__udivmoddi4+0x98>
    84cc:	f1c1 0720 	rsb	r7, r1, #32
    84d0:	408b      	lsls	r3, r1
    84d2:	fa22 fc07 	lsr.w	ip, r2, r7
    84d6:	ea4c 0c03 	orr.w	ip, ip, r3
    84da:	fa05 f401 	lsl.w	r4, r5, r1
    84de:	fa20 f307 	lsr.w	r3, r0, r7
    84e2:	40fd      	lsrs	r5, r7
    84e4:	4323      	orrs	r3, r4
    84e6:	fa00 f901 	lsl.w	r9, r0, r1
    84ea:	ea4f 401c 	mov.w	r0, ip, lsr #16
    84ee:	fa1f fe8c 	uxth.w	lr, ip
    84f2:	fbb5 f8f0 	udiv	r8, r5, r0
    84f6:	0c1c      	lsrs	r4, r3, #16
    84f8:	fb00 5518 	mls	r5, r0, r8, r5
    84fc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8500:	fb08 f50e 	mul.w	r5, r8, lr
    8504:	42a5      	cmp	r5, r4
    8506:	fa02 f201 	lsl.w	r2, r2, r1
    850a:	d90b      	bls.n	8524 <__udivmoddi4+0x1b0>
    850c:	eb1c 0404 	adds.w	r4, ip, r4
    8510:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    8514:	f080 8087 	bcs.w	8626 <__udivmoddi4+0x2b2>
    8518:	42a5      	cmp	r5, r4
    851a:	f240 8084 	bls.w	8626 <__udivmoddi4+0x2b2>
    851e:	f1a8 0802 	sub.w	r8, r8, #2
    8522:	4464      	add	r4, ip
    8524:	1b64      	subs	r4, r4, r5
    8526:	b29d      	uxth	r5, r3
    8528:	fbb4 f3f0 	udiv	r3, r4, r0
    852c:	fb00 4413 	mls	r4, r0, r3, r4
    8530:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    8534:	fb03 fe0e 	mul.w	lr, r3, lr
    8538:	45a6      	cmp	lr, r4
    853a:	d908      	bls.n	854e <__udivmoddi4+0x1da>
    853c:	eb1c 0404 	adds.w	r4, ip, r4
    8540:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    8544:	d26b      	bcs.n	861e <__udivmoddi4+0x2aa>
    8546:	45a6      	cmp	lr, r4
    8548:	d969      	bls.n	861e <__udivmoddi4+0x2aa>
    854a:	3b02      	subs	r3, #2
    854c:	4464      	add	r4, ip
    854e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
    8552:	fba0 8302 	umull	r8, r3, r0, r2
    8556:	eba4 040e 	sub.w	r4, r4, lr
    855a:	429c      	cmp	r4, r3
    855c:	46c6      	mov	lr, r8
    855e:	461d      	mov	r5, r3
    8560:	d355      	bcc.n	860e <__udivmoddi4+0x29a>
    8562:	d052      	beq.n	860a <__udivmoddi4+0x296>
    8564:	b156      	cbz	r6, 857c <__udivmoddi4+0x208>
    8566:	ebb9 030e 	subs.w	r3, r9, lr
    856a:	eb64 0405 	sbc.w	r4, r4, r5
    856e:	fa04 f707 	lsl.w	r7, r4, r7
    8572:	40cb      	lsrs	r3, r1
    8574:	40cc      	lsrs	r4, r1
    8576:	431f      	orrs	r7, r3
    8578:	e9c6 7400 	strd	r7, r4, [r6]
    857c:	2100      	movs	r1, #0
    857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8582:	f1c3 0120 	rsb	r1, r3, #32
    8586:	fa02 fc03 	lsl.w	ip, r2, r3
    858a:	fa20 f201 	lsr.w	r2, r0, r1
    858e:	fa25 f101 	lsr.w	r1, r5, r1
    8592:	409d      	lsls	r5, r3
    8594:	432a      	orrs	r2, r5
    8596:	ea4f 471c 	mov.w	r7, ip, lsr #16
    859a:	fa1f fe8c 	uxth.w	lr, ip
    859e:	fbb1 f0f7 	udiv	r0, r1, r7
    85a2:	fb07 1510 	mls	r5, r7, r0, r1
    85a6:	0c11      	lsrs	r1, r2, #16
    85a8:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    85ac:	fb00 f50e 	mul.w	r5, r0, lr
    85b0:	428d      	cmp	r5, r1
    85b2:	fa04 f403 	lsl.w	r4, r4, r3
    85b6:	d908      	bls.n	85ca <__udivmoddi4+0x256>
    85b8:	eb1c 0101 	adds.w	r1, ip, r1
    85bc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    85c0:	d22f      	bcs.n	8622 <__udivmoddi4+0x2ae>
    85c2:	428d      	cmp	r5, r1
    85c4:	d92d      	bls.n	8622 <__udivmoddi4+0x2ae>
    85c6:	3802      	subs	r0, #2
    85c8:	4461      	add	r1, ip
    85ca:	1b49      	subs	r1, r1, r5
    85cc:	b292      	uxth	r2, r2
    85ce:	fbb1 f5f7 	udiv	r5, r1, r7
    85d2:	fb07 1115 	mls	r1, r7, r5, r1
    85d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    85da:	fb05 f10e 	mul.w	r1, r5, lr
    85de:	4291      	cmp	r1, r2
    85e0:	d908      	bls.n	85f4 <__udivmoddi4+0x280>
    85e2:	eb1c 0202 	adds.w	r2, ip, r2
    85e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
    85ea:	d216      	bcs.n	861a <__udivmoddi4+0x2a6>
    85ec:	4291      	cmp	r1, r2
    85ee:	d914      	bls.n	861a <__udivmoddi4+0x2a6>
    85f0:	3d02      	subs	r5, #2
    85f2:	4462      	add	r2, ip
    85f4:	1a52      	subs	r2, r2, r1
    85f6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    85fa:	e739      	b.n	8470 <__udivmoddi4+0xfc>
    85fc:	4631      	mov	r1, r6
    85fe:	4630      	mov	r0, r6
    8600:	e709      	b.n	8416 <__udivmoddi4+0xa2>
    8602:	4639      	mov	r1, r7
    8604:	e6e7      	b.n	83d6 <__udivmoddi4+0x62>
    8606:	4610      	mov	r0, r2
    8608:	e6fc      	b.n	8404 <__udivmoddi4+0x90>
    860a:	45c1      	cmp	r9, r8
    860c:	d2aa      	bcs.n	8564 <__udivmoddi4+0x1f0>
    860e:	ebb8 0e02 	subs.w	lr, r8, r2
    8612:	eb63 050c 	sbc.w	r5, r3, ip
    8616:	3801      	subs	r0, #1
    8618:	e7a4      	b.n	8564 <__udivmoddi4+0x1f0>
    861a:	4645      	mov	r5, r8
    861c:	e7ea      	b.n	85f4 <__udivmoddi4+0x280>
    861e:	4603      	mov	r3, r0
    8620:	e795      	b.n	854e <__udivmoddi4+0x1da>
    8622:	4640      	mov	r0, r8
    8624:	e7d1      	b.n	85ca <__udivmoddi4+0x256>
    8626:	46d0      	mov	r8, sl
    8628:	e77c      	b.n	8524 <__udivmoddi4+0x1b0>
    862a:	3d02      	subs	r5, #2
    862c:	4462      	add	r2, ip
    862e:	e733      	b.n	8498 <__udivmoddi4+0x124>
    8630:	4608      	mov	r0, r1
    8632:	e70b      	b.n	844c <__udivmoddi4+0xd8>
    8634:	4464      	add	r4, ip
    8636:	3802      	subs	r0, #2
    8638:	e743      	b.n	84c2 <__udivmoddi4+0x14e>
    863a:	bf00      	nop

0000863c <nrf_cc3xx_platform_init_no_rng>:
    863c:	b510      	push	{r4, lr}
    863e:	4c0a      	ldr	r4, [pc, #40]	; (8668 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8640:	6823      	ldr	r3, [r4, #0]
    8642:	b11b      	cbz	r3, 864c <nrf_cc3xx_platform_init_no_rng+0x10>
    8644:	2301      	movs	r3, #1
    8646:	6023      	str	r3, [r4, #0]
    8648:	2000      	movs	r0, #0
    864a:	bd10      	pop	{r4, pc}
    864c:	f000 f8ce 	bl	87ec <CC_LibInitNoRng>
    8650:	2800      	cmp	r0, #0
    8652:	d0f7      	beq.n	8644 <nrf_cc3xx_platform_init_no_rng+0x8>
    8654:	3801      	subs	r0, #1
    8656:	2806      	cmp	r0, #6
    8658:	d803      	bhi.n	8662 <nrf_cc3xx_platform_init_no_rng+0x26>
    865a:	4b04      	ldr	r3, [pc, #16]	; (866c <nrf_cc3xx_platform_init_no_rng+0x30>)
    865c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8660:	bd10      	pop	{r4, pc}
    8662:	4803      	ldr	r0, [pc, #12]	; (8670 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8664:	bd10      	pop	{r4, pc}
    8666:	bf00      	nop
    8668:	20000c7c 	.word	0x20000c7c
    866c:	00009ae0 	.word	0x00009ae0
    8670:	ffff8ffe 	.word	0xffff8ffe

00008674 <nrf_cc3xx_platform_abort>:
    8674:	f3bf 8f4f 	dsb	sy
    8678:	4905      	ldr	r1, [pc, #20]	; (8690 <nrf_cc3xx_platform_abort+0x1c>)
    867a:	4b06      	ldr	r3, [pc, #24]	; (8694 <nrf_cc3xx_platform_abort+0x20>)
    867c:	68ca      	ldr	r2, [r1, #12]
    867e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8682:	4313      	orrs	r3, r2
    8684:	60cb      	str	r3, [r1, #12]
    8686:	f3bf 8f4f 	dsb	sy
    868a:	bf00      	nop
    868c:	e7fd      	b.n	868a <nrf_cc3xx_platform_abort+0x16>
    868e:	bf00      	nop
    8690:	e000ed00 	.word	0xe000ed00
    8694:	05fa0004 	.word	0x05fa0004

00008698 <CC_PalAbort>:
    8698:	b410      	push	{r4}
    869a:	4b09      	ldr	r3, [pc, #36]	; (86c0 <CC_PalAbort+0x28>)
    869c:	4909      	ldr	r1, [pc, #36]	; (86c4 <CC_PalAbort+0x2c>)
    869e:	4c0a      	ldr	r4, [pc, #40]	; (86c8 <CC_PalAbort+0x30>)
    86a0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    86a4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    86a8:	6849      	ldr	r1, [r1, #4]
    86aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    86ae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    86b2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    86b6:	2300      	movs	r3, #0
    86b8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    86bc:	bc10      	pop	{r4}
    86be:	4708      	bx	r1
    86c0:	5002b000 	.word	0x5002b000
    86c4:	2000017c 	.word	0x2000017c
    86c8:	5002a000 	.word	0x5002a000

000086cc <nrf_cc3xx_platform_set_abort>:
    86cc:	e9d0 1200 	ldrd	r1, r2, [r0]
    86d0:	4b01      	ldr	r3, [pc, #4]	; (86d8 <nrf_cc3xx_platform_set_abort+0xc>)
    86d2:	e9c3 1200 	strd	r1, r2, [r3]
    86d6:	4770      	bx	lr
    86d8:	2000017c 	.word	0x2000017c

000086dc <mutex_free>:
    86dc:	b510      	push	{r4, lr}
    86de:	4604      	mov	r4, r0
    86e0:	b130      	cbz	r0, 86f0 <mutex_free+0x14>
    86e2:	6863      	ldr	r3, [r4, #4]
    86e4:	06db      	lsls	r3, r3, #27
    86e6:	d502      	bpl.n	86ee <mutex_free+0x12>
    86e8:	2300      	movs	r3, #0
    86ea:	6023      	str	r3, [r4, #0]
    86ec:	6063      	str	r3, [r4, #4]
    86ee:	bd10      	pop	{r4, pc}
    86f0:	4b02      	ldr	r3, [pc, #8]	; (86fc <mutex_free+0x20>)
    86f2:	4803      	ldr	r0, [pc, #12]	; (8700 <mutex_free+0x24>)
    86f4:	685b      	ldr	r3, [r3, #4]
    86f6:	4798      	blx	r3
    86f8:	e7f3      	b.n	86e2 <mutex_free+0x6>
    86fa:	bf00      	nop
    86fc:	2000017c 	.word	0x2000017c
    8700:	00009afc 	.word	0x00009afc

00008704 <mutex_lock>:
    8704:	b1b0      	cbz	r0, 8734 <mutex_lock+0x30>
    8706:	6843      	ldr	r3, [r0, #4]
    8708:	b193      	cbz	r3, 8730 <mutex_lock+0x2c>
    870a:	06db      	lsls	r3, r3, #27
    870c:	d50e      	bpl.n	872c <mutex_lock+0x28>
    870e:	2301      	movs	r3, #1
    8710:	e850 2f00 	ldrex	r2, [r0]
    8714:	4619      	mov	r1, r3
    8716:	e840 1c00 	strex	ip, r1, [r0]
    871a:	f09c 0f00 	teq	ip, #0
    871e:	d1f7      	bne.n	8710 <mutex_lock+0xc>
    8720:	2a01      	cmp	r2, #1
    8722:	d0f5      	beq.n	8710 <mutex_lock+0xc>
    8724:	f3bf 8f5f 	dmb	sy
    8728:	2000      	movs	r0, #0
    872a:	4770      	bx	lr
    872c:	4803      	ldr	r0, [pc, #12]	; (873c <mutex_lock+0x38>)
    872e:	4770      	bx	lr
    8730:	4803      	ldr	r0, [pc, #12]	; (8740 <mutex_lock+0x3c>)
    8732:	4770      	bx	lr
    8734:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8738:	4770      	bx	lr
    873a:	bf00      	nop
    873c:	ffff8fe9 	.word	0xffff8fe9
    8740:	ffff8fea 	.word	0xffff8fea

00008744 <mutex_unlock>:
    8744:	b168      	cbz	r0, 8762 <mutex_unlock+0x1e>
    8746:	6843      	ldr	r3, [r0, #4]
    8748:	b13b      	cbz	r3, 875a <mutex_unlock+0x16>
    874a:	06db      	lsls	r3, r3, #27
    874c:	d507      	bpl.n	875e <mutex_unlock+0x1a>
    874e:	f3bf 8f5f 	dmb	sy
    8752:	2300      	movs	r3, #0
    8754:	6003      	str	r3, [r0, #0]
    8756:	4618      	mov	r0, r3
    8758:	4770      	bx	lr
    875a:	4803      	ldr	r0, [pc, #12]	; (8768 <mutex_unlock+0x24>)
    875c:	4770      	bx	lr
    875e:	4803      	ldr	r0, [pc, #12]	; (876c <mutex_unlock+0x28>)
    8760:	4770      	bx	lr
    8762:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8766:	4770      	bx	lr
    8768:	ffff8fea 	.word	0xffff8fea
    876c:	ffff8fe9 	.word	0xffff8fe9

00008770 <mutex_init>:
    8770:	b510      	push	{r4, lr}
    8772:	4604      	mov	r4, r0
    8774:	b120      	cbz	r0, 8780 <mutex_init+0x10>
    8776:	2200      	movs	r2, #0
    8778:	2311      	movs	r3, #17
    877a:	6022      	str	r2, [r4, #0]
    877c:	6063      	str	r3, [r4, #4]
    877e:	bd10      	pop	{r4, pc}
    8780:	4801      	ldr	r0, [pc, #4]	; (8788 <mutex_init+0x18>)
    8782:	f7ff ff89 	bl	8698 <CC_PalAbort>
    8786:	e7f6      	b.n	8776 <mutex_init+0x6>
    8788:	00009b24 	.word	0x00009b24

0000878c <nrf_cc3xx_platform_set_mutexes>:
    878c:	b570      	push	{r4, r5, r6, lr}
    878e:	e9d0 2300 	ldrd	r2, r3, [r0]
    8792:	4c13      	ldr	r4, [pc, #76]	; (87e0 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8794:	4d13      	ldr	r5, [pc, #76]	; (87e4 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8796:	6063      	str	r3, [r4, #4]
    8798:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    879c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    87a0:	6022      	str	r2, [r4, #0]
    87a2:	4b11      	ldr	r3, [pc, #68]	; (87e8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    87a4:	6808      	ldr	r0, [r1, #0]
    87a6:	6018      	str	r0, [r3, #0]
    87a8:	6848      	ldr	r0, [r1, #4]
    87aa:	6058      	str	r0, [r3, #4]
    87ac:	6888      	ldr	r0, [r1, #8]
    87ae:	6098      	str	r0, [r3, #8]
    87b0:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    87b4:	60d8      	str	r0, [r3, #12]
    87b6:	6119      	str	r1, [r3, #16]
    87b8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    87bc:	06db      	lsls	r3, r3, #27
    87be:	d50d      	bpl.n	87dc <nrf_cc3xx_platform_set_mutexes+0x50>
    87c0:	2300      	movs	r3, #0
    87c2:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    87c6:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    87ca:	f505 708a 	add.w	r0, r5, #276	; 0x114
    87ce:	4790      	blx	r2
    87d0:	6823      	ldr	r3, [r4, #0]
    87d2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    87d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    87da:	4718      	bx	r3
    87dc:	bd70      	pop	{r4, r5, r6, pc}
    87de:	bf00      	nop
    87e0:	2000018c 	.word	0x2000018c
    87e4:	20000c94 	.word	0x20000c94
    87e8:	2000019c 	.word	0x2000019c

000087ec <CC_LibInitNoRng>:
    87ec:	b538      	push	{r3, r4, r5, lr}
    87ee:	f000 f82f 	bl	8850 <CC_HalInit>
    87f2:	b120      	cbz	r0, 87fe <CC_LibInitNoRng+0x12>
    87f4:	2403      	movs	r4, #3
    87f6:	f000 f863 	bl	88c0 <CC_PalTerminate>
    87fa:	4620      	mov	r0, r4
    87fc:	bd38      	pop	{r3, r4, r5, pc}
    87fe:	f000 f831 	bl	8864 <CC_PalInit>
    8802:	b998      	cbnz	r0, 882c <CC_LibInitNoRng+0x40>
    8804:	f000 f8ac 	bl	8960 <CC_PalPowerSaveModeSelect>
    8808:	b998      	cbnz	r0, 8832 <CC_LibInitNoRng+0x46>
    880a:	4d0f      	ldr	r5, [pc, #60]	; (8848 <CC_LibInitNoRng+0x5c>)
    880c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8810:	0e1b      	lsrs	r3, r3, #24
    8812:	2bf0      	cmp	r3, #240	; 0xf0
    8814:	d108      	bne.n	8828 <CC_LibInitNoRng+0x3c>
    8816:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    881a:	4b0c      	ldr	r3, [pc, #48]	; (884c <CC_LibInitNoRng+0x60>)
    881c:	429a      	cmp	r2, r3
    881e:	d00a      	beq.n	8836 <CC_LibInitNoRng+0x4a>
    8820:	2407      	movs	r4, #7
    8822:	f000 f817 	bl	8854 <CC_HalTerminate>
    8826:	e7e6      	b.n	87f6 <CC_LibInitNoRng+0xa>
    8828:	2406      	movs	r4, #6
    882a:	e7fa      	b.n	8822 <CC_LibInitNoRng+0x36>
    882c:	2404      	movs	r4, #4
    882e:	4620      	mov	r0, r4
    8830:	bd38      	pop	{r3, r4, r5, pc}
    8832:	2400      	movs	r4, #0
    8834:	e7f5      	b.n	8822 <CC_LibInitNoRng+0x36>
    8836:	2001      	movs	r0, #1
    8838:	f000 f892 	bl	8960 <CC_PalPowerSaveModeSelect>
    883c:	4604      	mov	r4, r0
    883e:	2800      	cmp	r0, #0
    8840:	d1f7      	bne.n	8832 <CC_LibInitNoRng+0x46>
    8842:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8846:	e7d8      	b.n	87fa <CC_LibInitNoRng+0xe>
    8848:	5002b000 	.word	0x5002b000
    884c:	20e00000 	.word	0x20e00000

00008850 <CC_HalInit>:
    8850:	2000      	movs	r0, #0
    8852:	4770      	bx	lr

00008854 <CC_HalTerminate>:
    8854:	2000      	movs	r0, #0
    8856:	4770      	bx	lr

00008858 <CC_HalMaskInterrupt>:
    8858:	4b01      	ldr	r3, [pc, #4]	; (8860 <CC_HalMaskInterrupt+0x8>)
    885a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    885e:	4770      	bx	lr
    8860:	5002b000 	.word	0x5002b000

00008864 <CC_PalInit>:
    8864:	b510      	push	{r4, lr}
    8866:	4811      	ldr	r0, [pc, #68]	; (88ac <CC_PalInit+0x48>)
    8868:	f000 f848 	bl	88fc <CC_PalMutexCreate>
    886c:	b100      	cbz	r0, 8870 <CC_PalInit+0xc>
    886e:	bd10      	pop	{r4, pc}
    8870:	480f      	ldr	r0, [pc, #60]	; (88b0 <CC_PalInit+0x4c>)
    8872:	f000 f843 	bl	88fc <CC_PalMutexCreate>
    8876:	2800      	cmp	r0, #0
    8878:	d1f9      	bne.n	886e <CC_PalInit+0xa>
    887a:	4c0e      	ldr	r4, [pc, #56]	; (88b4 <CC_PalInit+0x50>)
    887c:	4620      	mov	r0, r4
    887e:	f000 f83d 	bl	88fc <CC_PalMutexCreate>
    8882:	2800      	cmp	r0, #0
    8884:	d1f3      	bne.n	886e <CC_PalInit+0xa>
    8886:	4b0c      	ldr	r3, [pc, #48]	; (88b8 <CC_PalInit+0x54>)
    8888:	480c      	ldr	r0, [pc, #48]	; (88bc <CC_PalInit+0x58>)
    888a:	601c      	str	r4, [r3, #0]
    888c:	f000 f836 	bl	88fc <CC_PalMutexCreate>
    8890:	4601      	mov	r1, r0
    8892:	2800      	cmp	r0, #0
    8894:	d1eb      	bne.n	886e <CC_PalInit+0xa>
    8896:	f000 f82d 	bl	88f4 <CC_PalDmaInit>
    889a:	4604      	mov	r4, r0
    889c:	b108      	cbz	r0, 88a2 <CC_PalInit+0x3e>
    889e:	4620      	mov	r0, r4
    88a0:	bd10      	pop	{r4, pc}
    88a2:	f000 f83f 	bl	8924 <CC_PalPowerSaveModeInit>
    88a6:	4620      	mov	r0, r4
    88a8:	e7fa      	b.n	88a0 <CC_PalInit+0x3c>
    88aa:	bf00      	nop
    88ac:	200001d4 	.word	0x200001d4
    88b0:	200001c8 	.word	0x200001c8
    88b4:	200001d0 	.word	0x200001d0
    88b8:	200001d8 	.word	0x200001d8
    88bc:	200001cc 	.word	0x200001cc

000088c0 <CC_PalTerminate>:
    88c0:	b508      	push	{r3, lr}
    88c2:	4808      	ldr	r0, [pc, #32]	; (88e4 <CC_PalTerminate+0x24>)
    88c4:	f000 f824 	bl	8910 <CC_PalMutexDestroy>
    88c8:	4807      	ldr	r0, [pc, #28]	; (88e8 <CC_PalTerminate+0x28>)
    88ca:	f000 f821 	bl	8910 <CC_PalMutexDestroy>
    88ce:	4807      	ldr	r0, [pc, #28]	; (88ec <CC_PalTerminate+0x2c>)
    88d0:	f000 f81e 	bl	8910 <CC_PalMutexDestroy>
    88d4:	4806      	ldr	r0, [pc, #24]	; (88f0 <CC_PalTerminate+0x30>)
    88d6:	f000 f81b 	bl	8910 <CC_PalMutexDestroy>
    88da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    88de:	f000 b80b 	b.w	88f8 <CC_PalDmaTerminate>
    88e2:	bf00      	nop
    88e4:	200001d4 	.word	0x200001d4
    88e8:	200001c8 	.word	0x200001c8
    88ec:	200001d0 	.word	0x200001d0
    88f0:	200001cc 	.word	0x200001cc

000088f4 <CC_PalDmaInit>:
    88f4:	2000      	movs	r0, #0
    88f6:	4770      	bx	lr

000088f8 <CC_PalDmaTerminate>:
    88f8:	4770      	bx	lr
    88fa:	bf00      	nop

000088fc <CC_PalMutexCreate>:
    88fc:	b508      	push	{r3, lr}
    88fe:	4b03      	ldr	r3, [pc, #12]	; (890c <CC_PalMutexCreate+0x10>)
    8900:	6802      	ldr	r2, [r0, #0]
    8902:	681b      	ldr	r3, [r3, #0]
    8904:	6810      	ldr	r0, [r2, #0]
    8906:	4798      	blx	r3
    8908:	2000      	movs	r0, #0
    890a:	bd08      	pop	{r3, pc}
    890c:	2000018c 	.word	0x2000018c

00008910 <CC_PalMutexDestroy>:
    8910:	b508      	push	{r3, lr}
    8912:	4b03      	ldr	r3, [pc, #12]	; (8920 <CC_PalMutexDestroy+0x10>)
    8914:	6802      	ldr	r2, [r0, #0]
    8916:	685b      	ldr	r3, [r3, #4]
    8918:	6810      	ldr	r0, [r2, #0]
    891a:	4798      	blx	r3
    891c:	2000      	movs	r0, #0
    891e:	bd08      	pop	{r3, pc}
    8920:	2000018c 	.word	0x2000018c

00008924 <CC_PalPowerSaveModeInit>:
    8924:	b570      	push	{r4, r5, r6, lr}
    8926:	4c09      	ldr	r4, [pc, #36]	; (894c <CC_PalPowerSaveModeInit+0x28>)
    8928:	4d09      	ldr	r5, [pc, #36]	; (8950 <CC_PalPowerSaveModeInit+0x2c>)
    892a:	6920      	ldr	r0, [r4, #16]
    892c:	68ab      	ldr	r3, [r5, #8]
    892e:	4798      	blx	r3
    8930:	b118      	cbz	r0, 893a <CC_PalPowerSaveModeInit+0x16>
    8932:	4b08      	ldr	r3, [pc, #32]	; (8954 <CC_PalPowerSaveModeInit+0x30>)
    8934:	4808      	ldr	r0, [pc, #32]	; (8958 <CC_PalPowerSaveModeInit+0x34>)
    8936:	685b      	ldr	r3, [r3, #4]
    8938:	4798      	blx	r3
    893a:	4a08      	ldr	r2, [pc, #32]	; (895c <CC_PalPowerSaveModeInit+0x38>)
    893c:	68eb      	ldr	r3, [r5, #12]
    893e:	6920      	ldr	r0, [r4, #16]
    8940:	2100      	movs	r1, #0
    8942:	6011      	str	r1, [r2, #0]
    8944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8948:	4718      	bx	r3
    894a:	bf00      	nop
    894c:	2000019c 	.word	0x2000019c
    8950:	2000018c 	.word	0x2000018c
    8954:	2000017c 	.word	0x2000017c
    8958:	00009b48 	.word	0x00009b48
    895c:	20000c90 	.word	0x20000c90

00008960 <CC_PalPowerSaveModeSelect>:
    8960:	b570      	push	{r4, r5, r6, lr}
    8962:	4d1b      	ldr	r5, [pc, #108]	; (89d0 <CC_PalPowerSaveModeSelect+0x70>)
    8964:	4e1b      	ldr	r6, [pc, #108]	; (89d4 <CC_PalPowerSaveModeSelect+0x74>)
    8966:	4604      	mov	r4, r0
    8968:	68b2      	ldr	r2, [r6, #8]
    896a:	6928      	ldr	r0, [r5, #16]
    896c:	4790      	blx	r2
    896e:	b9f8      	cbnz	r0, 89b0 <CC_PalPowerSaveModeSelect+0x50>
    8970:	b15c      	cbz	r4, 898a <CC_PalPowerSaveModeSelect+0x2a>
    8972:	4c19      	ldr	r4, [pc, #100]	; (89d8 <CC_PalPowerSaveModeSelect+0x78>)
    8974:	6823      	ldr	r3, [r4, #0]
    8976:	b1b3      	cbz	r3, 89a6 <CC_PalPowerSaveModeSelect+0x46>
    8978:	2b01      	cmp	r3, #1
    897a:	d01b      	beq.n	89b4 <CC_PalPowerSaveModeSelect+0x54>
    897c:	3b01      	subs	r3, #1
    897e:	6023      	str	r3, [r4, #0]
    8980:	6928      	ldr	r0, [r5, #16]
    8982:	68f3      	ldr	r3, [r6, #12]
    8984:	4798      	blx	r3
    8986:	2000      	movs	r0, #0
    8988:	bd70      	pop	{r4, r5, r6, pc}
    898a:	4c13      	ldr	r4, [pc, #76]	; (89d8 <CC_PalPowerSaveModeSelect+0x78>)
    898c:	6821      	ldr	r1, [r4, #0]
    898e:	b941      	cbnz	r1, 89a2 <CC_PalPowerSaveModeSelect+0x42>
    8990:	4b12      	ldr	r3, [pc, #72]	; (89dc <CC_PalPowerSaveModeSelect+0x7c>)
    8992:	2201      	movs	r2, #1
    8994:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8998:	4a11      	ldr	r2, [pc, #68]	; (89e0 <CC_PalPowerSaveModeSelect+0x80>)
    899a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    899e:	2b00      	cmp	r3, #0
    89a0:	d1fb      	bne.n	899a <CC_PalPowerSaveModeSelect+0x3a>
    89a2:	3101      	adds	r1, #1
    89a4:	6021      	str	r1, [r4, #0]
    89a6:	68f3      	ldr	r3, [r6, #12]
    89a8:	6928      	ldr	r0, [r5, #16]
    89aa:	4798      	blx	r3
    89ac:	2000      	movs	r0, #0
    89ae:	bd70      	pop	{r4, r5, r6, pc}
    89b0:	480c      	ldr	r0, [pc, #48]	; (89e4 <CC_PalPowerSaveModeSelect+0x84>)
    89b2:	bd70      	pop	{r4, r5, r6, pc}
    89b4:	4a0a      	ldr	r2, [pc, #40]	; (89e0 <CC_PalPowerSaveModeSelect+0x80>)
    89b6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    89ba:	2b00      	cmp	r3, #0
    89bc:	d1fb      	bne.n	89b6 <CC_PalPowerSaveModeSelect+0x56>
    89be:	4a07      	ldr	r2, [pc, #28]	; (89dc <CC_PalPowerSaveModeSelect+0x7c>)
    89c0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    89c4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    89c8:	f7ff ff46 	bl	8858 <CC_HalMaskInterrupt>
    89cc:	6823      	ldr	r3, [r4, #0]
    89ce:	e7d5      	b.n	897c <CC_PalPowerSaveModeSelect+0x1c>
    89d0:	2000019c 	.word	0x2000019c
    89d4:	2000018c 	.word	0x2000018c
    89d8:	20000c90 	.word	0x20000c90
    89dc:	5002a000 	.word	0x5002a000
    89e0:	5002b000 	.word	0x5002b000
    89e4:	ffff8fe9 	.word	0xffff8fe9

000089e8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    89e8:	4770      	bx	lr

000089ea <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    89ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89ee:	4607      	mov	r7, r0
    89f0:	460e      	mov	r6, r1
    89f2:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    89f4:	461d      	mov	r5, r3
    89f6:	b30b      	cbz	r3, 8a3c <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    89f8:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    89fa:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    89fc:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	4414      	add	r4, r2
    8a04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    8a08:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8a0a:	f04f 0900 	mov.w	r9, #0
    8a0e:	45d1      	cmp	r9, sl
    8a10:	d308      	bcc.n	8a24 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    8a12:	686a      	ldr	r2, [r5, #4]
    8a14:	f105 0308 	add.w	r3, r5, #8
    8a18:	4641      	mov	r1, r8
    8a1a:	4638      	mov	r0, r7
    8a1c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    8a1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8a22:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8a24:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8a28:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    8a2c:	4620      	mov	r0, r4
    8a2e:	f000 f9de 	bl	8dee <strlen>
    8a32:	3001      	adds	r0, #1
    8a34:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8a36:	f109 0901 	add.w	r9, r9, #1
    8a3a:	e7e8      	b.n	8a0e <cbpprintf_external+0x24>
}
    8a3c:	f06f 0015 	mvn.w	r0, #21
    8a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008a44 <sys_notify_validate>:
	if (notify == NULL) {
    8a44:	4603      	mov	r3, r0
    8a46:	b158      	cbz	r0, 8a60 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8a48:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8a4a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8a4e:	2a01      	cmp	r2, #1
    8a50:	d003      	beq.n	8a5a <sys_notify_validate+0x16>
    8a52:	2a03      	cmp	r2, #3
    8a54:	d104      	bne.n	8a60 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8a56:	6802      	ldr	r2, [r0, #0]
    8a58:	b112      	cbz	r2, 8a60 <sys_notify_validate+0x1c>
		notify->result = 0;
    8a5a:	2000      	movs	r0, #0
    8a5c:	6098      	str	r0, [r3, #8]
    8a5e:	4770      	bx	lr
		return -EINVAL;
    8a60:	f06f 0015 	mvn.w	r0, #21
}
    8a64:	4770      	bx	lr

00008a66 <arch_printk_char_out>:
}
    8a66:	2000      	movs	r0, #0
    8a68:	4770      	bx	lr

00008a6a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    8a6a:	f000 b90f 	b.w	8c8c <z_log_vprintk>

00008a6e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8a6e:	b40f      	push	{r0, r1, r2, r3}
    8a70:	b507      	push	{r0, r1, r2, lr}
    8a72:	a904      	add	r1, sp, #16
    8a74:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8a78:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8a7a:	f000 f907 	bl	8c8c <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8a7e:	b003      	add	sp, #12
    8a80:	f85d eb04 	ldr.w	lr, [sp], #4
    8a84:	b004      	add	sp, #16
    8a86:	4770      	bx	lr

00008a88 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8a88:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8a8a:	f013 0307 	ands.w	r3, r3, #7
    8a8e:	d105      	bne.n	8a9c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8a90:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8a92:	2b00      	cmp	r3, #0
    8a94:	bf0c      	ite	eq
    8a96:	2000      	moveq	r0, #0
    8a98:	2003      	movne	r0, #3
    8a9a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8a9c:	2b02      	cmp	r3, #2
    8a9e:	d105      	bne.n	8aac <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8aa0:	8bc0      	ldrh	r0, [r0, #30]
    8aa2:	fab0 f080 	clz	r0, r0
    8aa6:	0940      	lsrs	r0, r0, #5
    8aa8:	0080      	lsls	r0, r0, #2
    8aaa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8aac:	2b01      	cmp	r3, #1
    8aae:	d105      	bne.n	8abc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8ab0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	bf0c      	ite	eq
    8ab6:	2000      	moveq	r0, #0
    8ab8:	2005      	movne	r0, #5
    8aba:	4770      	bx	lr
	int evt = EVT_NOP;
    8abc:	2000      	movs	r0, #0
}
    8abe:	4770      	bx	lr

00008ac0 <notify_one>:
{
    8ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ac4:	460d      	mov	r5, r1
    8ac6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ac8:	4619      	mov	r1, r3
    8aca:	1d28      	adds	r0, r5, #4
{
    8acc:	4690      	mov	r8, r2
    8ace:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ad0:	f7f8 f9c8 	bl	e64 <sys_notify_finalize>
	if (cb) {
    8ad4:	4604      	mov	r4, r0
    8ad6:	b138      	cbz	r0, 8ae8 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8ad8:	4633      	mov	r3, r6
    8ada:	4642      	mov	r2, r8
    8adc:	4629      	mov	r1, r5
    8ade:	4638      	mov	r0, r7
    8ae0:	46a4      	mov	ip, r4
}
    8ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8ae6:	4760      	bx	ip
}
    8ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008aec <validate_args>:
{
    8aec:	b510      	push	{r4, lr}
    8aee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8af0:	b140      	cbz	r0, 8b04 <validate_args+0x18>
    8af2:	b139      	cbz	r1, 8b04 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8af4:	1d08      	adds	r0, r1, #4
    8af6:	f7ff ffa5 	bl	8a44 <sys_notify_validate>
	if ((rv == 0)
    8afa:	b928      	cbnz	r0, 8b08 <validate_args+0x1c>
	    && ((cli->notify.flags
    8afc:	68a3      	ldr	r3, [r4, #8]
    8afe:	f033 0303 	bics.w	r3, r3, #3
    8b02:	d001      	beq.n	8b08 <validate_args+0x1c>
		rv = -EINVAL;
    8b04:	f06f 0015 	mvn.w	r0, #21
}
    8b08:	bd10      	pop	{r4, pc}

00008b0a <onoff_manager_init>:
{
    8b0a:	b538      	push	{r3, r4, r5, lr}
    8b0c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8b0e:	4605      	mov	r5, r0
    8b10:	b158      	cbz	r0, 8b2a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8b12:	b151      	cbz	r1, 8b2a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8b14:	680b      	ldr	r3, [r1, #0]
    8b16:	b143      	cbz	r3, 8b2a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8b18:	684b      	ldr	r3, [r1, #4]
    8b1a:	b133      	cbz	r3, 8b2a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8b1c:	2220      	movs	r2, #32
    8b1e:	2100      	movs	r1, #0
    8b20:	f000 f98c 	bl	8e3c <memset>
    8b24:	612c      	str	r4, [r5, #16]
	return 0;
    8b26:	2000      	movs	r0, #0
}
    8b28:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8b2a:	f06f 0015 	mvn.w	r0, #21
    8b2e:	e7fb      	b.n	8b28 <onoff_manager_init+0x1e>

00008b30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8b30:	4604      	mov	r4, r0
    8b32:	b508      	push	{r3, lr}
    8b34:	4608      	mov	r0, r1
    8b36:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8b38:	461a      	mov	r2, r3
    8b3a:	47a0      	blx	r4
	return z_impl_z_current_get();
    8b3c:	f7fe ff06 	bl	794c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8b40:	f7fa fc48 	bl	33d4 <z_impl_k_thread_abort>

00008b44 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    8b44:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    8b48:	8840      	ldrh	r0, [r0, #2]
}
    8b4a:	0840      	lsrs	r0, r0, #1
    8b4c:	4770      	bx	lr

00008b4e <free_list_add>:
{
    8b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b50:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    8b52:	f7ff fff7 	bl	8b44 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    8b56:	fab0 f080 	clz	r0, r0
    8b5a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    8b5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    8b62:	00ca      	lsls	r2, r1, #3
    8b64:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    8b68:	1d17      	adds	r7, r2, #4
{
    8b6a:	460c      	mov	r4, r1
    8b6c:	3206      	adds	r2, #6
    8b6e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    8b70:	b956      	cbnz	r6, 8b88 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    8b72:	2101      	movs	r1, #1
    8b74:	fa01 f000 	lsl.w	r0, r1, r0
    8b78:	68d9      	ldr	r1, [r3, #12]
    8b7a:	4301      	orrs	r1, r0
    8b7c:	60d9      	str	r1, [r3, #12]
		b->next = c;
    8b7e:	f8cc 4010 	str.w	r4, [ip, #16]
    8b82:	53dd      	strh	r5, [r3, r7]
    8b84:	529d      	strh	r5, [r3, r2]
}
    8b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    8b88:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    8b8a:	3104      	adds	r1, #4
    8b8c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    8b8e:	53d8      	strh	r0, [r3, r7]
    8b90:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8b94:	529e      	strh	r6, [r3, r2]
    8b96:	80c5      	strh	r5, [r0, #6]
    8b98:	525d      	strh	r5, [r3, r1]
    8b9a:	e7f4      	b.n	8b86 <free_list_add+0x38>

00008b9c <encode_uint>:
{
    8b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ba0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    8ba2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    8ba4:	2b6f      	cmp	r3, #111	; 0x6f
{
    8ba6:	4680      	mov	r8, r0
    8ba8:	460f      	mov	r7, r1
    8baa:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8bac:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8bb0:	d029      	beq.n	8c06 <encode_uint+0x6a>
    8bb2:	d824      	bhi.n	8bfe <encode_uint+0x62>
		return 16;
    8bb4:	2b58      	cmp	r3, #88	; 0x58
    8bb6:	bf14      	ite	ne
    8bb8:	260a      	movne	r6, #10
    8bba:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    8bbc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    8bc0:	4632      	mov	r2, r6
    8bc2:	2300      	movs	r3, #0
    8bc4:	4640      	mov	r0, r8
    8bc6:	4639      	mov	r1, r7
    8bc8:	f7f7 fc7c 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8bcc:	2a09      	cmp	r2, #9
    8bce:	b2d4      	uxtb	r4, r2
    8bd0:	d81e      	bhi.n	8c10 <encode_uint+0x74>
    8bd2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8bd4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8bd6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8bd8:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8bdc:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8be0:	d301      	bcc.n	8be6 <encode_uint+0x4a>
    8be2:	45d1      	cmp	r9, sl
    8be4:	d811      	bhi.n	8c0a <encode_uint+0x6e>
	if (conv->flag_hash) {
    8be6:	782b      	ldrb	r3, [r5, #0]
    8be8:	069b      	lsls	r3, r3, #26
    8bea:	d505      	bpl.n	8bf8 <encode_uint+0x5c>
		if (radix == 8) {
    8bec:	2e08      	cmp	r6, #8
    8bee:	d115      	bne.n	8c1c <encode_uint+0x80>
			conv->altform_0 = true;
    8bf0:	78ab      	ldrb	r3, [r5, #2]
    8bf2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8bf6:	70ab      	strb	r3, [r5, #2]
}
    8bf8:	4648      	mov	r0, r9
    8bfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8bfe:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8c02:	2b70      	cmp	r3, #112	; 0x70
    8c04:	e7d7      	b.n	8bb6 <encode_uint+0x1a>
	switch (specifier) {
    8c06:	2608      	movs	r6, #8
    8c08:	e7d8      	b.n	8bbc <encode_uint+0x20>
		value /= radix;
    8c0a:	4680      	mov	r8, r0
    8c0c:	460f      	mov	r7, r1
    8c0e:	e7d7      	b.n	8bc0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8c10:	f1bb 0f19 	cmp.w	fp, #25
    8c14:	bf94      	ite	ls
    8c16:	3437      	addls	r4, #55	; 0x37
    8c18:	3457      	addhi	r4, #87	; 0x57
    8c1a:	e7db      	b.n	8bd4 <encode_uint+0x38>
		} else if (radix == 16) {
    8c1c:	2e10      	cmp	r6, #16
    8c1e:	d1eb      	bne.n	8bf8 <encode_uint+0x5c>
			conv->altform_0c = true;
    8c20:	78ab      	ldrb	r3, [r5, #2]
    8c22:	f043 0310 	orr.w	r3, r3, #16
    8c26:	e7e6      	b.n	8bf6 <encode_uint+0x5a>

00008c28 <outs>:
{
    8c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c2c:	4607      	mov	r7, r0
    8c2e:	4688      	mov	r8, r1
    8c30:	4615      	mov	r5, r2
    8c32:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8c34:	4614      	mov	r4, r2
    8c36:	42b4      	cmp	r4, r6
    8c38:	eba4 0005 	sub.w	r0, r4, r5
    8c3c:	d302      	bcc.n	8c44 <outs+0x1c>
    8c3e:	b93e      	cbnz	r6, 8c50 <outs+0x28>
    8c40:	7823      	ldrb	r3, [r4, #0]
    8c42:	b12b      	cbz	r3, 8c50 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8c44:	f814 0b01 	ldrb.w	r0, [r4], #1
    8c48:	4641      	mov	r1, r8
    8c4a:	47b8      	blx	r7
		if (rc < 0) {
    8c4c:	2800      	cmp	r0, #0
    8c4e:	daf2      	bge.n	8c36 <outs+0xe>
}
    8c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c54 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8c54:	4040      	eors	r0, r0
    8c56:	f380 8811 	msr	BASEPRI, r0
    8c5a:	f04f 0004 	mov.w	r0, #4
    8c5e:	df02      	svc	2
}
    8c60:	4770      	bx	lr

00008c62 <assert_print>:

void assert_print(const char *fmt, ...)
{
    8c62:	b40f      	push	{r0, r1, r2, r3}
    8c64:	b507      	push	{r0, r1, r2, lr}
    8c66:	a904      	add	r1, sp, #16
    8c68:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8c6c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    8c6e:	f7ff fefc 	bl	8a6a <vprintk>

	va_end(ap);
}
    8c72:	b003      	add	sp, #12
    8c74:	f85d eb04 	ldr.w	lr, [sp], #4
    8c78:	b004      	add	sp, #16
    8c7a:	4770      	bx	lr

00008c7c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8c7c:	4770      	bx	lr

00008c7e <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    8c7e:	6843      	ldr	r3, [r0, #4]
}
    8c80:	7958      	ldrb	r0, [r3, #5]
    8c82:	4770      	bx	lr

00008c84 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8c84:	f000 ba2e 	b.w	90e4 <sys_clock_cycle_get_32>

00008c88 <dummy_timestamp>:
    8c88:	2000      	movs	r0, #0
    8c8a:	4770      	bx	lr

00008c8c <z_log_vprintk>:
{
    8c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c8e:	2300      	movs	r3, #0
    8c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8c94:	e9cd 3300 	strd	r3, r3, [sp]
    8c98:	461a      	mov	r2, r3
    8c9a:	4619      	mov	r1, r3
    8c9c:	4618      	mov	r0, r3
    8c9e:	f7f9 faeb 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    8ca2:	b005      	add	sp, #20
    8ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00008ca8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    8ca8:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    8caa:	f7f9 f849 	bl	1d40 <log_init>
	}

	return 0;
}
    8cae:	2000      	movs	r0, #0
    8cb0:	bd08      	pop	{r3, pc}

00008cb2 <z_log_get_tag>:
}
    8cb2:	2000      	movs	r0, #0
    8cb4:	4770      	bx	lr

00008cb6 <out_func>:
{
    8cb6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8cb8:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    8cbc:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    8cc0:	6852      	ldr	r2, [r2, #4]
    8cc2:	2101      	movs	r1, #1
    8cc4:	f10d 0007 	add.w	r0, sp, #7
    8cc8:	4798      	blx	r3
}
    8cca:	2000      	movs	r0, #0
    8ccc:	b003      	add	sp, #12
    8cce:	f85d fb04 	ldr.w	pc, [sp], #4

00008cd2 <cr_out_func>:
{
    8cd2:	b538      	push	{r3, r4, r5, lr}
    8cd4:	4605      	mov	r5, r0
    8cd6:	460c      	mov	r4, r1
	out_func(c, ctx);
    8cd8:	f7ff ffed 	bl	8cb6 <out_func>
	if (c == '\n') {
    8cdc:	2d0a      	cmp	r5, #10
    8cde:	d103      	bne.n	8ce8 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    8ce0:	4621      	mov	r1, r4
    8ce2:	200d      	movs	r0, #13
    8ce4:	f7ff ffe7 	bl	8cb6 <out_func>
}
    8ce8:	2000      	movs	r0, #0
    8cea:	bd38      	pop	{r3, r4, r5, pc}

00008cec <buffer_write>:
{
    8cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cee:	4606      	mov	r6, r0
    8cf0:	460d      	mov	r5, r1
    8cf2:	4614      	mov	r4, r2
    8cf4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    8cf6:	4621      	mov	r1, r4
    8cf8:	4628      	mov	r0, r5
    8cfa:	463a      	mov	r2, r7
    8cfc:	47b0      	blx	r6
	} while (len != 0);
    8cfe:	1a24      	subs	r4, r4, r0
		buf += processed;
    8d00:	4405      	add	r5, r0
	} while (len != 0);
    8d02:	d1f8      	bne.n	8cf6 <buffer_write+0xa>
}
    8d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d06 <log_output_flush>:
		     output->control_block->offset,
    8d06:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8d08:	6881      	ldr	r1, [r0, #8]
{
    8d0a:	b510      	push	{r4, lr}
    8d0c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    8d0e:	e9d2 2300 	ldrd	r2, r3, [r2]
    8d12:	6800      	ldr	r0, [r0, #0]
    8d14:	f7ff ffea 	bl	8cec <buffer_write>
	output->control_block->offset = 0;
    8d18:	6863      	ldr	r3, [r4, #4]
    8d1a:	2200      	movs	r2, #0
    8d1c:	601a      	str	r2, [r3, #0]
}
    8d1e:	bd10      	pop	{r4, pc}

00008d20 <z_log_msg2_finalize>:
{
    8d20:	b570      	push	{r4, r5, r6, lr}
    8d22:	460e      	mov	r6, r1
    8d24:	4615      	mov	r5, r2
    8d26:	4619      	mov	r1, r3
	if (!msg) {
    8d28:	4604      	mov	r4, r0
    8d2a:	b918      	cbnz	r0, 8d34 <z_log_msg2_finalize+0x14>
}
    8d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    8d30:	f7f9 b86c 	b.w	1e0c <z_log_dropped>
	if (data) {
    8d34:	b13b      	cbz	r3, 8d46 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    8d36:	f3c2 2349 	ubfx	r3, r2, #9, #10
    8d3a:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    8d3c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    8d40:	4418      	add	r0, r3
    8d42:	f000 f870 	bl	8e26 <memcpy>
	msg->hdr.source = source;
    8d46:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    8d4a:	4620      	mov	r0, r4
}
    8d4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    8d50:	f7f9 b87a 	b.w	1e48 <z_log_msg2_commit>

00008d54 <abort_function>:
{
    8d54:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8d56:	2000      	movs	r0, #0
    8d58:	f7f8 ff90 	bl	1c7c <sys_reboot>

00008d5c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8d5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8d5e:	ab0b      	add	r3, sp, #44	; 0x2c
    8d60:	9305      	str	r3, [sp, #20]
    8d62:	9303      	str	r3, [sp, #12]
    8d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d66:	9302      	str	r3, [sp, #8]
    8d68:	2300      	movs	r3, #0
    8d6a:	e9cd 3300 	strd	r3, r3, [sp]
    8d6e:	2201      	movs	r2, #1
    8d70:	4618      	mov	r0, r3
    8d72:	f7f9 fa81 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    8d76:	b007      	add	sp, #28
    8d78:	f85d fb04 	ldr.w	pc, [sp], #4

00008d7c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8d7c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8d7e:	6800      	ldr	r0, [r0, #0]
    8d80:	f7f9 be0a 	b.w	2998 <z_arm_fatal_error>

00008d84 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8d84:	2100      	movs	r1, #0
    8d86:	2001      	movs	r0, #1
    8d88:	f7f9 be06 	b.w	2998 <z_arm_fatal_error>

00008d8c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8d8c:	b508      	push	{r3, lr}
	handler();
    8d8e:	f7f9 fea7 	bl	2ae0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8d92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8d96:	f7f9 bf7f 	b.w	2c98 <z_arm_exc_exit>

00008d9a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8d9a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8d9c:	ab0b      	add	r3, sp, #44	; 0x2c
    8d9e:	9305      	str	r3, [sp, #20]
    8da0:	9303      	str	r3, [sp, #12]
    8da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8da4:	9302      	str	r3, [sp, #8]
    8da6:	2300      	movs	r3, #0
    8da8:	e9cd 3300 	strd	r3, r3, [sp]
    8dac:	2201      	movs	r2, #1
    8dae:	4618      	mov	r0, r3
    8db0:	f7f9 fa62 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    8db4:	b007      	add	sp, #28
    8db6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dba <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8dba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8dbc:	ab0b      	add	r3, sp, #44	; 0x2c
    8dbe:	9305      	str	r3, [sp, #20]
    8dc0:	9303      	str	r3, [sp, #12]
    8dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8dc4:	9302      	str	r3, [sp, #8]
    8dc6:	2300      	movs	r3, #0
    8dc8:	e9cd 3300 	strd	r3, r3, [sp]
    8dcc:	2201      	movs	r2, #1
    8dce:	4618      	mov	r0, r3
    8dd0:	f7f9 fa52 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    8dd4:	b007      	add	sp, #28
    8dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dda <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    8dda:	3901      	subs	r1, #1
    8ddc:	4603      	mov	r3, r0
    8dde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8de2:	b90a      	cbnz	r2, 8de8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    8de4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    8de6:	4770      	bx	lr
		*d = *s;
    8de8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    8dec:	e7f7      	b.n	8dde <strcpy+0x4>

00008dee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8dee:	4603      	mov	r3, r0
	size_t n = 0;
    8df0:	2000      	movs	r0, #0

	while (*s != '\0') {
    8df2:	5c1a      	ldrb	r2, [r3, r0]
    8df4:	b902      	cbnz	r2, 8df8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8df6:	4770      	bx	lr
		n++;
    8df8:	3001      	adds	r0, #1
    8dfa:	e7fa      	b.n	8df2 <strlen+0x4>

00008dfc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8dfc:	4603      	mov	r3, r0
	size_t n = 0;
    8dfe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8e00:	5c1a      	ldrb	r2, [r3, r0]
    8e02:	b10a      	cbz	r2, 8e08 <strnlen+0xc>
    8e04:	4288      	cmp	r0, r1
    8e06:	d100      	bne.n	8e0a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8e08:	4770      	bx	lr
		n++;
    8e0a:	3001      	adds	r0, #1
    8e0c:	e7f8      	b.n	8e00 <strnlen+0x4>

00008e0e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    8e0e:	1e43      	subs	r3, r0, #1
    8e10:	3901      	subs	r1, #1
    8e12:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8e16:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8e1a:	4282      	cmp	r2, r0
    8e1c:	d101      	bne.n	8e22 <strcmp+0x14>
    8e1e:	2a00      	cmp	r2, #0
    8e20:	d1f7      	bne.n	8e12 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8e22:	1a10      	subs	r0, r2, r0
    8e24:	4770      	bx	lr

00008e26 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8e26:	b510      	push	{r4, lr}
    8e28:	1e43      	subs	r3, r0, #1
    8e2a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8e2c:	4291      	cmp	r1, r2
    8e2e:	d100      	bne.n	8e32 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8e30:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8e32:	f811 4b01 	ldrb.w	r4, [r1], #1
    8e36:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8e3a:	e7f7      	b.n	8e2c <memcpy+0x6>

00008e3c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8e3c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8e3e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8e40:	4603      	mov	r3, r0
	while (n > 0) {
    8e42:	4293      	cmp	r3, r2
    8e44:	d100      	bne.n	8e48 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8e46:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8e48:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8e4c:	e7f9      	b.n	8e42 <memset+0x6>

00008e4e <_stdout_hook_default>:
}
    8e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e52:	4770      	bx	lr

00008e54 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8e54:	2806      	cmp	r0, #6
    8e56:	d108      	bne.n	8e6a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e5c:	2201      	movs	r2, #1
    8e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8e62:	f3bf 8f4f 	dsb	sy
        __WFE();
    8e66:	bf20      	wfe
    while (true)
    8e68:	e7fd      	b.n	8e66 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    8e6a:	4770      	bx	lr

00008e6c <pm_state_exit_post_ops>:
    8e6c:	2300      	movs	r3, #0
    8e6e:	f383 8811 	msr	BASEPRI, r3
    8e72:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8e76:	4770      	bx	lr

00008e78 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8e7a:	ab0b      	add	r3, sp, #44	; 0x2c
    8e7c:	9305      	str	r3, [sp, #20]
    8e7e:	9303      	str	r3, [sp, #12]
    8e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e82:	9302      	str	r3, [sp, #8]
    8e84:	2300      	movs	r3, #0
    8e86:	e9cd 3300 	strd	r3, r3, [sp]
    8e8a:	2201      	movs	r2, #1
    8e8c:	4618      	mov	r0, r3
    8e8e:	f7f9 f9f3 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    8e92:	b007      	add	sp, #28
    8e94:	f85d fb04 	ldr.w	pc, [sp], #4

00008e98 <adc_context_on_timer_expired>:
{
    8e98:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8e9a:	f1a0 0308 	sub.w	r3, r0, #8
    8e9e:	f3bf 8f5b 	dmb	ish
    8ea2:	e853 2f00 	ldrex	r2, [r3]
    8ea6:	1c51      	adds	r1, r2, #1
    8ea8:	e843 1400 	strex	r4, r1, [r3]
    8eac:	2c00      	cmp	r4, #0
    8eae:	d1f8      	bne.n	8ea2 <adc_context_on_timer_expired+0xa>
    8eb0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    8eb4:	b922      	cbnz	r2, 8ec0 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
    8eb6:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
}
    8eba:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
    8ebc:	f7fa bcc0 	b.w	3840 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    8ec0:	f06f 030f 	mvn.w	r3, #15
}
    8ec4:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
    8ec6:	6583      	str	r3, [r0, #88]	; 0x58
}
    8ec8:	4770      	bx	lr

00008eca <set_on_state>:
	__asm__ volatile(
    8eca:	f04f 0340 	mov.w	r3, #64	; 0x40
    8ece:	f3ef 8211 	mrs	r2, BASEPRI
    8ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ed6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8eda:	6803      	ldr	r3, [r0, #0]
    8edc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8ee0:	f043 0302 	orr.w	r3, r3, #2
    8ee4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8ee6:	f382 8811 	msr	BASEPRI, r2
    8eea:	f3bf 8f6f 	isb	sy
}
    8eee:	4770      	bx	lr

00008ef0 <async_start>:
{
    8ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ef2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    8ef4:	6904      	ldr	r4, [r0, #16]
{
    8ef6:	4605      	mov	r5, r0
    8ef8:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    8efa:	f04f 0040 	mov.w	r0, #64	; 0x40
    8efe:	f3ef 8c11 	mrs	ip, BASEPRI
    8f02:	f380 8812 	msr	BASEPRI_MAX, r0
    8f06:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8f0a:	260c      	movs	r6, #12
    8f0c:	fb06 4601 	mla	r6, r6, r1, r4
    8f10:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8f12:	f000 0e07 	and.w	lr, r0, #7
    8f16:	f1be 0f01 	cmp.w	lr, #1
    8f1a:	d110      	bne.n	8f3e <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8f1c:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    8f1e:	2600      	movs	r6, #0
	__asm__ volatile(
    8f20:	f38c 8811 	msr	BASEPRI, ip
    8f24:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    8f28:	b93e      	cbnz	r6, 8f3a <async_start+0x4a>
	subdata->cb = cb;
    8f2a:	200c      	movs	r0, #12
    8f2c:	4341      	muls	r1, r0
    8f2e:	440c      	add	r4, r1
	subdata->user_data = user_data;
    8f30:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8f34:	686b      	ldr	r3, [r5, #4]
    8f36:	585b      	ldr	r3, [r3, r1]
    8f38:	4798      	blx	r3
}
    8f3a:	4630      	mov	r0, r6
    8f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8f3e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    8f42:	4287      	cmp	r7, r0
    8f44:	bf14      	ite	ne
    8f46:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    8f4a:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    8f4e:	e7e7      	b.n	8f20 <async_start+0x30>

00008f50 <api_start>:
{
    8f50:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8f52:	2480      	movs	r4, #128	; 0x80
    8f54:	9400      	str	r4, [sp, #0]
    8f56:	f7ff ffcb 	bl	8ef0 <async_start>
}
    8f5a:	b002      	add	sp, #8
    8f5c:	bd10      	pop	{r4, pc}

00008f5e <onoff_started_callback>:
	return &data->mgr[type];
    8f5e:	6900      	ldr	r0, [r0, #16]
    8f60:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8f62:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8f66:	2100      	movs	r1, #0
    8f68:	4710      	bx	r2

00008f6a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8f6a:	2000      	movs	r0, #0
    8f6c:	f7fc b86e 	b.w	504c <nrfx_clock_start>

00008f70 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8f70:	2000      	movs	r0, #0
    8f72:	f7fc b8cf 	b.w	5114 <nrfx_clock_stop>

00008f76 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8f76:	2280      	movs	r2, #128	; 0x80
    8f78:	f7fa be30 	b.w	3bdc <stop>

00008f7c <blocking_start_callback>:
{
    8f7c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8f7e:	f7fd bb91 	b.w	66a4 <z_impl_k_sem_give>

00008f82 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f82:	6843      	ldr	r3, [r0, #4]
    8f84:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8f86:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8f8a:	600b      	str	r3, [r1, #0]
}
    8f8c:	2000      	movs	r0, #0
    8f8e:	4770      	bx	lr

00008f90 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8f90:	6843      	ldr	r3, [r0, #4]
    8f92:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    8f94:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8f98:	4042      	eors	r2, r0
    8f9a:	400a      	ands	r2, r1
    8f9c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8f9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    8fa2:	2000      	movs	r0, #0
    8fa4:	4770      	bx	lr

00008fa6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fa6:	6843      	ldr	r3, [r0, #4]
    8fa8:	685b      	ldr	r3, [r3, #4]
}
    8faa:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8fac:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    8fb0:	4770      	bx	lr

00008fb2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fb2:	6843      	ldr	r3, [r0, #4]
    8fb4:	685b      	ldr	r3, [r3, #4]
}
    8fb6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    8fb8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8fbc:	4770      	bx	lr

00008fbe <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8fbe:	6843      	ldr	r3, [r0, #4]
    8fc0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    8fc2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8fc6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8fc8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8fcc:	2000      	movs	r0, #0
    8fce:	4770      	bx	lr

00008fd0 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    8fd0:	6902      	ldr	r2, [r0, #16]
{
    8fd2:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    8fd4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8fd8:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8fdc:	2000      	movs	r0, #0
    8fde:	4770      	bx	lr

00008fe0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8fe0:	6843      	ldr	r3, [r0, #4]
    8fe2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8fe4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8fe8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8fec:	4770      	bx	lr

00008fee <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8fee:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    8ff0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8ff2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ff4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8ff8:	b148      	cbz	r0, 900e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    8ffa:	7c52      	ldrb	r2, [r2, #17]
    8ffc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ffe:	2000      	movs	r0, #0
    9000:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9004:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9008:	2201      	movs	r2, #1
    900a:	601a      	str	r2, [r3, #0]
	return 0;
    900c:	4770      	bx	lr
		return -1;
    900e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9012:	4770      	bx	lr

00009014 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9014:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9016:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9018:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    901c:	b940      	cbnz	r0, 9030 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    901e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9020:	079b      	lsls	r3, r3, #30
    9022:	d406      	bmi.n	9032 <is_tx_ready.isra.0+0x1e>
    9024:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9028:	3800      	subs	r0, #0
    902a:	bf18      	it	ne
    902c:	2001      	movne	r0, #1
    902e:	4770      	bx	lr
    9030:	2001      	movs	r0, #1
}
    9032:	4770      	bx	lr

00009034 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9034:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9036:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9038:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    903c:	05c9      	lsls	r1, r1, #23
    903e:	d518      	bpl.n	9072 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9040:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9044:	b1a9      	cbz	r1, 9072 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9046:	f04f 0040 	mov.w	r0, #64	; 0x40
    904a:	f3ef 8111 	mrs	r1, BASEPRI
    904e:	f380 8812 	msr	BASEPRI_MAX, r0
    9052:	f3bf 8f6f 	isb	sy
    9056:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    905a:	b130      	cbz	r0, 906a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    905c:	2000      	movs	r0, #0
    905e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    9062:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9066:	2001      	movs	r0, #1
    9068:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    906a:	f381 8811 	msr	BASEPRI, r1
    906e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9072:	6852      	ldr	r2, [r2, #4]
    9074:	06d2      	lsls	r2, r2, #27
    9076:	d515      	bpl.n	90a4 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    9078:	f04f 0140 	mov.w	r1, #64	; 0x40
    907c:	f3ef 8211 	mrs	r2, BASEPRI
    9080:	f381 8812 	msr	BASEPRI_MAX, r1
    9084:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9088:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    908c:	b111      	cbz	r1, 9094 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    908e:	2100      	movs	r1, #0
    9090:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    9094:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9098:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    909c:	f382 8811 	msr	BASEPRI, r2
    90a0:	f3bf 8f6f 	isb	sy
}
    90a4:	4770      	bx	lr

000090a6 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    90a6:	b510      	push	{r4, lr}
    90a8:	2200      	movs	r2, #0
    90aa:	4604      	mov	r4, r0
    90ac:	2101      	movs	r1, #1
    90ae:	2028      	movs	r0, #40	; 0x28
    90b0:	f7f9 fcde 	bl	2a70 <z_arm_irq_priority_set>
    90b4:	2028      	movs	r0, #40	; 0x28
    90b6:	f7f9 fcbf 	bl	2a38 <arch_irq_enable>
    90ba:	4620      	mov	r0, r4
    90bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90c0:	f7fb ba44 	b.w	454c <uarte_instance_init.constprop.0>

000090c4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    90c4:	b510      	push	{r4, lr}
    90c6:	2200      	movs	r2, #0
    90c8:	4604      	mov	r4, r0
    90ca:	2101      	movs	r1, #1
    90cc:	2002      	movs	r0, #2
    90ce:	f7f9 fccf 	bl	2a70 <z_arm_irq_priority_set>
    90d2:	2002      	movs	r0, #2
    90d4:	f7f9 fcb0 	bl	2a38 <arch_irq_enable>
    90d8:	4620      	mov	r0, r4
    90da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90de:	f7fb ba35 	b.w	454c <uarte_instance_init.constprop.0>

000090e2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    90e2:	4770      	bx	lr

000090e4 <sys_clock_cycle_get_32>:
{
    90e4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    90e6:	f7fb fba3 	bl	4830 <z_nrf_rtc_timer_read>
}
    90ea:	bd08      	pop	{r3, pc}

000090ec <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    90ec:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    90ee:	6843      	ldr	r3, [r0, #4]
    90f0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    90f2:	7a03      	ldrb	r3, [r0, #8]
    90f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    90f8:	3b01      	subs	r3, #1
    90fa:	00db      	lsls	r3, r3, #3
    90fc:	6845      	ldr	r5, [r0, #4]
    90fe:	6814      	ldr	r4, [r2, #0]
    9100:	441d      	add	r5, r3
    9102:	42ac      	cmp	r4, r5
    9104:	d902      	bls.n	910c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    9106:	f06f 0001 	mvn.w	r0, #1
}
    910a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    910c:	7965      	ldrb	r5, [r4, #5]
    910e:	428d      	cmp	r5, r1
    9110:	d002      	beq.n	9118 <pinctrl_lookup_state+0x2c>
		(*state)++;
    9112:	3408      	adds	r4, #8
    9114:	6014      	str	r4, [r2, #0]
    9116:	e7f1      	b.n	90fc <pinctrl_lookup_state+0x10>
			return 0;
    9118:	2000      	movs	r0, #0
    911a:	e7f6      	b.n	910a <pinctrl_lookup_state+0x1e>

0000911c <nrf_gpio_pin_clear>:
{
    911c:	b507      	push	{r0, r1, r2, lr}
    911e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9120:	a801      	add	r0, sp, #4
    9122:	f7fb fd29 	bl	4b78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9126:	9a01      	ldr	r2, [sp, #4]
    9128:	2301      	movs	r3, #1
    912a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    912c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    9130:	b003      	add	sp, #12
    9132:	f85d fb04 	ldr.w	pc, [sp], #4

00009136 <nrf_gpio_pin_set>:
{
    9136:	b507      	push	{r0, r1, r2, lr}
    9138:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    913a:	a801      	add	r0, sp, #4
    913c:	f7fb fd1c 	bl	4b78 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9140:	9a01      	ldr	r2, [sp, #4]
    9142:	2301      	movs	r3, #1
    9144:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9146:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    914a:	b003      	add	sp, #12
    914c:	f85d fb04 	ldr.w	pc, [sp], #4

00009150 <nrf_gpio_pin_write>:
    if (value == 0)
    9150:	b909      	cbnz	r1, 9156 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    9152:	f7ff bfe3 	b.w	911c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    9156:	f7ff bfee 	b.w	9136 <nrf_gpio_pin_set>

0000915a <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    915a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    915c:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9160:	2b00      	cmp	r3, #0
{
    9162:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9164:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9168:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    916a:	bf0b      	itete	eq
    916c:	4615      	moveq	r5, r2
    916e:	2501      	movne	r5, #1
    9170:	460e      	moveq	r6, r1
    9172:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9174:	9301      	str	r3, [sp, #4]
    9176:	f7fb fcff 	bl	4b78 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    917a:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    917e:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9182:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9186:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9188:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    918a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    918e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    9192:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    9196:	b002      	add	sp, #8
    9198:	bd70      	pop	{r4, r5, r6, pc}

0000919a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    919a:	b570      	push	{r4, r5, r6, lr}
    919c:	4615      	mov	r5, r2
    919e:	4604      	mov	r4, r0
    91a0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    91a4:	42a6      	cmp	r6, r4
    91a6:	d101      	bne.n	91ac <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    91a8:	2000      	movs	r0, #0
}
    91aa:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    91ac:	6823      	ldr	r3, [r4, #0]
    91ae:	0c1a      	lsrs	r2, r3, #16
    91b0:	2a22      	cmp	r2, #34	; 0x22
    91b2:	f200 808e 	bhi.w	92d2 <pinctrl_configure_pins+0x138>
    91b6:	e8df f002 	tbb	[pc, r2]
    91ba:	1d12      	.short	0x1d12
    91bc:	39294324 	.word	0x39294324
    91c0:	8c8c8c43 	.word	0x8c8c8c43
    91c4:	8c4d488c 	.word	0x8c4d488c
    91c8:	8c8c8c8c 	.word	0x8c8c8c8c
    91cc:	8c8c8c8c 	.word	0x8c8c8c8c
    91d0:	68635e52 	.word	0x68635e52
    91d4:	6d8c8c8c 	.word	0x6d8c8c8c
    91d8:	827d7873 	.word	0x827d7873
    91dc:	87          	.byte	0x87
    91dd:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    91de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    91e2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    91e6:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    91e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    91ec:	f7ff ffa3 	bl	9136 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    91f0:	2201      	movs	r2, #1
    91f2:	e015      	b.n	9220 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    91f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    91f8:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    91fc:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    91fe:	2100      	movs	r1, #0
    9200:	e00f      	b.n	9222 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    9202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9206:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    920a:	e7ec      	b.n	91e6 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    920c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9210:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9214:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    9216:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    921a:	f7ff ff7f 	bl	911c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    921e:	2200      	movs	r2, #0
    9220:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9222:	6820      	ldr	r0, [r4, #0]
    9224:	f7ff ff99 	bl	915a <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    9228:	3404      	adds	r4, #4
    922a:	e7bb      	b.n	91a4 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    922c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9230:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9234:	6820      	ldr	r0, [r4, #0]
    9236:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    923a:	f7ff ff6f 	bl	911c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    923e:	e7d7      	b.n	91f0 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    9240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9244:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9248:	e7d8      	b.n	91fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    924a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    924e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9252:	e7d3      	b.n	91fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    9254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9258:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    925c:	e7ce      	b.n	91fc <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    925e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9262:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9266:	6820      	ldr	r0, [r4, #0]
    9268:	f3c0 3140 	ubfx	r1, r0, #13, #1
    926c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9270:	f7ff ff6e 	bl	9150 <nrf_gpio_pin_write>
    9274:	e7bc      	b.n	91f0 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    9276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    927a:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    927e:	e7f2      	b.n	9266 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    9280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9284:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9288:	e7ed      	b.n	9266 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    928a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    928e:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    9292:	e7e8      	b.n	9266 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    9294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9298:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    929c:	2201      	movs	r2, #1
    929e:	e7ae      	b.n	91fe <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    92a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92a4:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92a8:	e7f8      	b.n	929c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    92aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92ae:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92b2:	e7f3      	b.n	929c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    92b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92b8:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92bc:	e7ee      	b.n	929c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    92be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92c2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    92c6:	e7e9      	b.n	929c <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    92c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    92cc:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    92d0:	e7e4      	b.n	929c <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    92d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    92d6:	e768      	b.n	91aa <pinctrl_configure_pins+0x10>

000092d8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    92d8:	f7ff b9b0 	b.w	863c <nrf_cc3xx_platform_init_no_rng>

000092dc <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    92dc:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    92de:	f7f9 fa73 	bl	27c8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    92e2:	f7f9 fb25 	bl	2930 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    92e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    92ea:	f7ff b9a7 	b.w	863c <nrf_cc3xx_platform_init_no_rng>

000092ee <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    92ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    92f2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    92f6:	f1a0 0308 	sub.w	r3, r0, #8
    92fa:	4258      	negs	r0, r3
    92fc:	4158      	adcs	r0, r3
    92fe:	4770      	bx	lr

00009300 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9300:	4700      	bx	r0

00009302 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9302:	f000 b908 	b.w	9516 <z_impl_k_busy_wait>

00009306 <nrf_gpio_pin_present_check>:
    switch (port)
    9306:	0943      	lsrs	r3, r0, #5
    9308:	d00b      	beq.n	9322 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    930a:	2b01      	cmp	r3, #1
    930c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9310:	bf18      	it	ne
    9312:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9314:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9318:	fa23 f000 	lsr.w	r0, r3, r0
}
    931c:	f000 0001 	and.w	r0, r0, #1
    9320:	4770      	bx	lr
    switch (port)
    9322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9326:	e7f5      	b.n	9314 <nrf_gpio_pin_present_check+0xe>

00009328 <pin_is_task_output>:
{
    9328:	b508      	push	{r3, lr}
    932a:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    932c:	f7fb ff5a 	bl	51e4 <pin_is_output>
    9330:	b110      	cbz	r0, 9338 <pin_is_task_output+0x10>
    9332:	4610      	mov	r0, r2
    9334:	f7fb ff40 	bl	51b8 <pin_in_use_by_te>
}
    9338:	f000 0001 	and.w	r0, r0, #1
    933c:	bd08      	pop	{r3, pc}

0000933e <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    933e:	0080      	lsls	r0, r0, #2
}
    9340:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9344:	4770      	bx	lr

00009346 <nrf_gpio_reconfigure>:
{
    9346:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    934a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    934c:	a801      	add	r0, sp, #4
{
    934e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    9352:	460c      	mov	r4, r1
    9354:	4617      	mov	r7, r2
    9356:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9358:	f7fb ffc8 	bl	52ec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    935c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    935e:	1e39      	subs	r1, r7, #0
    9360:	bf18      	it	ne
    9362:	2101      	movne	r1, #1
    9364:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9368:	1e23      	subs	r3, r4, #0
    936a:	bf18      	it	ne
    936c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    936e:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9370:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9374:	bf14      	ite	ne
    9376:	210c      	movne	r1, #12
    9378:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    937a:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    937c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9380:	bf14      	ite	ne
    9382:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9386:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9388:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    938c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9390:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9394:	bf14      	ite	ne
    9396:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    939a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    939c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    939e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93a2:	b104      	cbz	r4, 93a6 <nrf_gpio_reconfigure+0x60>
    93a4:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    93a6:	b10f      	cbz	r7, 93ac <nrf_gpio_reconfigure+0x66>
    93a8:	783f      	ldrb	r7, [r7, #0]
    93aa:	007f      	lsls	r7, r7, #1
    93ac:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    93ae:	b10e      	cbz	r6, 93b4 <nrf_gpio_reconfigure+0x6e>
    93b0:	7836      	ldrb	r6, [r6, #0]
    93b2:	00b6      	lsls	r6, r6, #2
    93b4:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    93b6:	b18d      	cbz	r5, 93dc <nrf_gpio_reconfigure+0x96>
    93b8:	7829      	ldrb	r1, [r5, #0]
    93ba:	0209      	lsls	r1, r1, #8
    93bc:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    93be:	f1b8 0f00 	cmp.w	r8, #0
    93c2:	d003      	beq.n	93cc <nrf_gpio_reconfigure+0x86>
    93c4:	f898 8000 	ldrb.w	r8, [r8]
    93c8:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93cc:	4321      	orrs	r1, r4
    93ce:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    93d2:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    93d6:	b002      	add	sp, #8
    93d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    93dc:	4629      	mov	r1, r5
    93de:	e7ed      	b.n	93bc <nrf_gpio_reconfigure+0x76>

000093e0 <nrf_gpio_cfg_sense_set>:
{
    93e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    93e2:	f10d 030f 	add.w	r3, sp, #15
    93e6:	9301      	str	r3, [sp, #4]
    93e8:	2300      	movs	r3, #0
{
    93ea:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    93ee:	9300      	str	r3, [sp, #0]
    93f0:	461a      	mov	r2, r3
    93f2:	4619      	mov	r1, r3
    93f4:	f7ff ffa7 	bl	9346 <nrf_gpio_reconfigure>
}
    93f8:	b005      	add	sp, #20
    93fa:	f85d fb04 	ldr.w	pc, [sp], #4

000093fe <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    93fe:	f7fc badb 	b.w	59b8 <_DoInit>

00009402 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9402:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9404:	f7ff fffb 	bl	93fe <SEGGER_RTT_Init>

	return 0;
}
    9408:	2000      	movs	r0, #0
    940a:	bd08      	pop	{r3, pc}

0000940c <z_device_state_init>:
}
    940c:	4770      	bx	lr

0000940e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    940e:	b138      	cbz	r0, 9420 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9410:	68c3      	ldr	r3, [r0, #12]
    9412:	8818      	ldrh	r0, [r3, #0]
    9414:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9418:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    941c:	4258      	negs	r0, r3
    941e:	4158      	adcs	r0, r3
}
    9420:	4770      	bx	lr

00009422 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9422:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9424:	ab0b      	add	r3, sp, #44	; 0x2c
    9426:	9305      	str	r3, [sp, #20]
    9428:	9303      	str	r3, [sp, #12]
    942a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    942c:	9302      	str	r3, [sp, #8]
    942e:	2300      	movs	r3, #0
    9430:	e9cd 3300 	strd	r3, r3, [sp]
    9434:	2201      	movs	r2, #1
    9436:	4618      	mov	r0, r3
    9438:	f7f8 ff1e 	bl	2278 <z_impl_z_log_msg2_runtime_vcreate>
}
    943c:	b007      	add	sp, #28
    943e:	f85d fb04 	ldr.w	pc, [sp], #4

00009442 <z_early_memset>:
	(void) memset(dst, c, n);
    9442:	f7ff bcfb 	b.w	8e3c <memset>

00009446 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9446:	f7ff bcee 	b.w	8e26 <memcpy>

0000944a <k_mem_slab_init>:
{
    944a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    944c:	2400      	movs	r4, #0
    944e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9450:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9452:	ea41 0402 	orr.w	r4, r1, r2
    9456:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    945a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    945e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9460:	d10c      	bne.n	947c <k_mem_slab_init+0x32>
    9462:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    9464:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    9466:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9468:	d103      	bne.n	9472 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    946a:	e9c0 0000 	strd	r0, r0, [r0]
}
    946e:	2000      	movs	r0, #0
}
    9470:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9472:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9474:	3401      	adds	r4, #1
    9476:	460d      	mov	r5, r1
		p += slab->block_size;
    9478:	4411      	add	r1, r2
    947a:	e7f3      	b.n	9464 <k_mem_slab_init+0x1a>
		return -EINVAL;
    947c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9480:	e7f6      	b.n	9470 <k_mem_slab_init+0x26>

00009482 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9482:	f3ef 8005 	mrs	r0, IPSR
}
    9486:	3800      	subs	r0, #0
    9488:	bf18      	it	ne
    948a:	2001      	movne	r0, #1
    948c:	4770      	bx	lr

0000948e <k_thread_name_get>:
}
    948e:	2000      	movs	r0, #0
    9490:	4770      	bx	lr

00009492 <z_pm_save_idle_exit>:
{
    9492:	b508      	push	{r3, lr}
	pm_system_resume();
    9494:	f7f9 f884 	bl	25a0 <pm_system_resume>
}
    9498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    949c:	f7ff be21 	b.w	90e2 <sys_clock_idle_exit>

000094a0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    94a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    94a4:	428b      	cmp	r3, r1
    94a6:	d001      	beq.n	94ac <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    94a8:	f7fd beae 	b.w	7208 <z_set_prio>
}
    94ac:	2000      	movs	r0, #0
    94ae:	4770      	bx	lr

000094b0 <z_impl_k_mutex_init>:
{
    94b0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    94b2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    94b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    94b8:	e9c3 3300 	strd	r3, r3, [r3]
}
    94bc:	4770      	bx	lr

000094be <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    94be:	b13a      	cbz	r2, 94d0 <z_impl_k_sem_init+0x12>
    94c0:	428a      	cmp	r2, r1
    94c2:	d305      	bcc.n	94d0 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    94c4:	e9c0 1202 	strd	r1, r2, [r0, #8]
    94c8:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    94cc:	2000      	movs	r0, #0
    94ce:	4770      	bx	lr
		return -EINVAL;
    94d0:	f06f 0015 	mvn.w	r0, #21
}
    94d4:	4770      	bx	lr

000094d6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    94d6:	4603      	mov	r3, r0
    94d8:	b920      	cbnz	r0, 94e4 <z_reschedule_irqlock+0xe>
    94da:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    94de:	b90a      	cbnz	r2, 94e4 <z_reschedule_irqlock+0xe>
    94e0:	f7f9 bb1e 	b.w	2b20 <arch_swap>
    94e4:	f383 8811 	msr	BASEPRI, r3
    94e8:	f3bf 8f6f 	isb	sy
}
    94ec:	4770      	bx	lr

000094ee <z_reschedule_unlocked>:
	__asm__ volatile(
    94ee:	f04f 0340 	mov.w	r3, #64	; 0x40
    94f2:	f3ef 8011 	mrs	r0, BASEPRI
    94f6:	f383 8812 	msr	BASEPRI_MAX, r3
    94fa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    94fe:	f7ff bfea 	b.w	94d6 <z_reschedule_irqlock>

00009502 <z_priq_dumb_best>:
{
    9502:	4603      	mov	r3, r0
	return list->head == list;
    9504:	6800      	ldr	r0, [r0, #0]
}
    9506:	4283      	cmp	r3, r0
    9508:	bf08      	it	eq
    950a:	2000      	moveq	r0, #0
    950c:	4770      	bx	lr

0000950e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    950e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9510:	f7fe fda2 	bl	8058 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9514:	bd08      	pop	{r3, pc}

00009516 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9516:	b108      	cbz	r0, 951c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9518:	f7fa b906 	b.w	3728 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    951c:	4770      	bx	lr

0000951e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    951e:	b510      	push	{r4, lr}
    9520:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    9522:	f7fe fbf9 	bl	7d18 <z_abort_timeout>

	if (inactive) {
    9526:	b9b0      	cbnz	r0, 9556 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    9528:	6a63      	ldr	r3, [r4, #36]	; 0x24
    952a:	b10b      	cbz	r3, 9530 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    952c:	4620      	mov	r0, r4
    952e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    9530:	f104 0018 	add.w	r0, r4, #24
    9534:	f7fd ffe4 	bl	7500 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9538:	b168      	cbz	r0, 9556 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    953a:	f7fd fc87 	bl	6e4c <z_ready_thread>
    953e:	f04f 0340 	mov.w	r3, #64	; 0x40
    9542:	f3ef 8011 	mrs	r0, BASEPRI
    9546:	f383 8812 	msr	BASEPRI_MAX, r3
    954a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    954e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9552:	f7ff bfc0 	b.w	94d6 <z_reschedule_irqlock>
    9556:	bd10      	pop	{r4, pc}

00009558 <k_heap_init>:
{
    9558:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    955a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    955e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9562:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9564:	f7f7 bf5c 	b.w	1420 <sys_heap_init>

00009568 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9568:	f7fb bb8a 	b.w	4c80 <SystemInit>
