
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 4b 01 20 81 47 00 00 b7 a5 00 00 55 47 00 00     @K. .G......UG..
  10:	55 47 00 00 55 47 00 00 55 47 00 00 00 00 00 00     UG..UG..UG......
	...
  2c:	3d 40 00 00 55 47 00 00 00 00 00 00 e9 3f 00 00     =@..UG.......?..
  3c:	55 47 00 00                                         UG..

00000040 <_irq_vector_table>:
  40:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  50:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  60:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  70:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  80:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  90:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  a0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  b0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  c0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  d0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  e0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..
  f0:	ed 40 00 00 ed 40 00 00 ed 40 00 00 ed 40 00 00     .@...@...@...@..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18d>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x179>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc3>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1df>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10d>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x109>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x123>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x171>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x159>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ed>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b1>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1cf>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     94c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f890 	bl	a80 <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <__udivmoddi4>:
     a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a84:	4686      	mov	lr, r0
     a86:	468c      	mov	ip, r1
     a88:	4608      	mov	r0, r1
     a8a:	9e08      	ldr	r6, [sp, #32]
     a8c:	4615      	mov	r5, r2
     a8e:	4674      	mov	r4, lr
     a90:	4619      	mov	r1, r3
     a92:	2b00      	cmp	r3, #0
     a94:	f040 80c2 	bne.w	c1c <__udivmoddi4+0x19c>
     a98:	4285      	cmp	r5, r0
     a9a:	fab2 f282 	clz	r2, r2
     a9e:	d945      	bls.n	b2c <__udivmoddi4+0xac>
     aa0:	b14a      	cbz	r2, ab6 <__udivmoddi4+0x36>
     aa2:	f1c2 0320 	rsb	r3, r2, #32
     aa6:	fa00 fc02 	lsl.w	ip, r0, r2
     aaa:	fa2e f303 	lsr.w	r3, lr, r3
     aae:	4095      	lsls	r5, r2
     ab0:	ea43 0c0c 	orr.w	ip, r3, ip
     ab4:	4094      	lsls	r4, r2
     ab6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     aba:	b2a8      	uxth	r0, r5
     abc:	fbbc f8fe 	udiv	r8, ip, lr
     ac0:	0c23      	lsrs	r3, r4, #16
     ac2:	fb0e cc18 	mls	ip, lr, r8, ip
     ac6:	fb08 f900 	mul.w	r9, r8, r0
     aca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ace:	4599      	cmp	r9, r3
     ad0:	d928      	bls.n	b24 <__udivmoddi4+0xa4>
     ad2:	18eb      	adds	r3, r5, r3
     ad4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     ad8:	d204      	bcs.n	ae4 <__udivmoddi4+0x64>
     ada:	4599      	cmp	r9, r3
     adc:	d902      	bls.n	ae4 <__udivmoddi4+0x64>
     ade:	f1a8 0702 	sub.w	r7, r8, #2
     ae2:	442b      	add	r3, r5
     ae4:	eba3 0309 	sub.w	r3, r3, r9
     ae8:	b2a4      	uxth	r4, r4
     aea:	fbb3 fcfe 	udiv	ip, r3, lr
     aee:	fb0e 331c 	mls	r3, lr, ip, r3
     af2:	fb0c f000 	mul.w	r0, ip, r0
     af6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     afa:	42a0      	cmp	r0, r4
     afc:	d914      	bls.n	b28 <__udivmoddi4+0xa8>
     afe:	192c      	adds	r4, r5, r4
     b00:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     b04:	d204      	bcs.n	b10 <__udivmoddi4+0x90>
     b06:	42a0      	cmp	r0, r4
     b08:	d902      	bls.n	b10 <__udivmoddi4+0x90>
     b0a:	f1ac 0302 	sub.w	r3, ip, #2
     b0e:	442c      	add	r4, r5
     b10:	1a24      	subs	r4, r4, r0
     b12:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     b16:	b11e      	cbz	r6, b20 <__udivmoddi4+0xa0>
     b18:	40d4      	lsrs	r4, r2
     b1a:	2300      	movs	r3, #0
     b1c:	6034      	str	r4, [r6, #0]
     b1e:	6073      	str	r3, [r6, #4]
     b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b24:	4647      	mov	r7, r8
     b26:	e7dd      	b.n	ae4 <__udivmoddi4+0x64>
     b28:	4663      	mov	r3, ip
     b2a:	e7f1      	b.n	b10 <__udivmoddi4+0x90>
     b2c:	bb92      	cbnz	r2, b94 <__udivmoddi4+0x114>
     b2e:	1b43      	subs	r3, r0, r5
     b30:	2101      	movs	r1, #1
     b32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b36:	b2af      	uxth	r7, r5
     b38:	fbb3 fcfe 	udiv	ip, r3, lr
     b3c:	0c20      	lsrs	r0, r4, #16
     b3e:	fb0e 331c 	mls	r3, lr, ip, r3
     b42:	fb0c f807 	mul.w	r8, ip, r7
     b46:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     b4a:	4598      	cmp	r8, r3
     b4c:	d962      	bls.n	c14 <__udivmoddi4+0x194>
     b4e:	18eb      	adds	r3, r5, r3
     b50:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b54:	d204      	bcs.n	b60 <__udivmoddi4+0xe0>
     b56:	4598      	cmp	r8, r3
     b58:	d902      	bls.n	b60 <__udivmoddi4+0xe0>
     b5a:	f1ac 0002 	sub.w	r0, ip, #2
     b5e:	442b      	add	r3, r5
     b60:	eba3 0308 	sub.w	r3, r3, r8
     b64:	b2a4      	uxth	r4, r4
     b66:	fbb3 fcfe 	udiv	ip, r3, lr
     b6a:	fb0e 331c 	mls	r3, lr, ip, r3
     b6e:	fb0c f707 	mul.w	r7, ip, r7
     b72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b76:	42a7      	cmp	r7, r4
     b78:	d94e      	bls.n	c18 <__udivmoddi4+0x198>
     b7a:	192c      	adds	r4, r5, r4
     b7c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     b80:	d204      	bcs.n	b8c <__udivmoddi4+0x10c>
     b82:	42a7      	cmp	r7, r4
     b84:	d902      	bls.n	b8c <__udivmoddi4+0x10c>
     b86:	f1ac 0302 	sub.w	r3, ip, #2
     b8a:	442c      	add	r4, r5
     b8c:	1be4      	subs	r4, r4, r7
     b8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b92:	e7c0      	b.n	b16 <__udivmoddi4+0x96>
     b94:	f1c2 0320 	rsb	r3, r2, #32
     b98:	fa20 f103 	lsr.w	r1, r0, r3
     b9c:	4095      	lsls	r5, r2
     b9e:	4090      	lsls	r0, r2
     ba0:	fa2e f303 	lsr.w	r3, lr, r3
     ba4:	4303      	orrs	r3, r0
     ba6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     baa:	b2af      	uxth	r7, r5
     bac:	fbb1 fcfe 	udiv	ip, r1, lr
     bb0:	fb0e 101c 	mls	r0, lr, ip, r1
     bb4:	0c19      	lsrs	r1, r3, #16
     bb6:	fb0c f807 	mul.w	r8, ip, r7
     bba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     bbe:	4588      	cmp	r8, r1
     bc0:	fa04 f402 	lsl.w	r4, r4, r2
     bc4:	d922      	bls.n	c0c <__udivmoddi4+0x18c>
     bc6:	1869      	adds	r1, r5, r1
     bc8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     bcc:	d204      	bcs.n	bd8 <__udivmoddi4+0x158>
     bce:	4588      	cmp	r8, r1
     bd0:	d902      	bls.n	bd8 <__udivmoddi4+0x158>
     bd2:	f1ac 0002 	sub.w	r0, ip, #2
     bd6:	4429      	add	r1, r5
     bd8:	eba1 0108 	sub.w	r1, r1, r8
     bdc:	b29b      	uxth	r3, r3
     bde:	fbb1 fcfe 	udiv	ip, r1, lr
     be2:	fb0e 111c 	mls	r1, lr, ip, r1
     be6:	fb0c f707 	mul.w	r7, ip, r7
     bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     bee:	429f      	cmp	r7, r3
     bf0:	d90e      	bls.n	c10 <__udivmoddi4+0x190>
     bf2:	18eb      	adds	r3, r5, r3
     bf4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     bf8:	d204      	bcs.n	c04 <__udivmoddi4+0x184>
     bfa:	429f      	cmp	r7, r3
     bfc:	d902      	bls.n	c04 <__udivmoddi4+0x184>
     bfe:	f1ac 0102 	sub.w	r1, ip, #2
     c02:	442b      	add	r3, r5
     c04:	1bdb      	subs	r3, r3, r7
     c06:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c0a:	e792      	b.n	b32 <__udivmoddi4+0xb2>
     c0c:	4660      	mov	r0, ip
     c0e:	e7e3      	b.n	bd8 <__udivmoddi4+0x158>
     c10:	4661      	mov	r1, ip
     c12:	e7f7      	b.n	c04 <__udivmoddi4+0x184>
     c14:	4660      	mov	r0, ip
     c16:	e7a3      	b.n	b60 <__udivmoddi4+0xe0>
     c18:	4663      	mov	r3, ip
     c1a:	e7b7      	b.n	b8c <__udivmoddi4+0x10c>
     c1c:	4283      	cmp	r3, r0
     c1e:	d906      	bls.n	c2e <__udivmoddi4+0x1ae>
     c20:	b916      	cbnz	r6, c28 <__udivmoddi4+0x1a8>
     c22:	2100      	movs	r1, #0
     c24:	4608      	mov	r0, r1
     c26:	e77b      	b.n	b20 <__udivmoddi4+0xa0>
     c28:	e9c6 e000 	strd	lr, r0, [r6]
     c2c:	e7f9      	b.n	c22 <__udivmoddi4+0x1a2>
     c2e:	fab3 f783 	clz	r7, r3
     c32:	b98f      	cbnz	r7, c58 <__udivmoddi4+0x1d8>
     c34:	4283      	cmp	r3, r0
     c36:	d301      	bcc.n	c3c <__udivmoddi4+0x1bc>
     c38:	4572      	cmp	r2, lr
     c3a:	d808      	bhi.n	c4e <__udivmoddi4+0x1ce>
     c3c:	ebbe 0402 	subs.w	r4, lr, r2
     c40:	eb60 0303 	sbc.w	r3, r0, r3
     c44:	2001      	movs	r0, #1
     c46:	469c      	mov	ip, r3
     c48:	b91e      	cbnz	r6, c52 <__udivmoddi4+0x1d2>
     c4a:	2100      	movs	r1, #0
     c4c:	e768      	b.n	b20 <__udivmoddi4+0xa0>
     c4e:	4638      	mov	r0, r7
     c50:	e7fa      	b.n	c48 <__udivmoddi4+0x1c8>
     c52:	e9c6 4c00 	strd	r4, ip, [r6]
     c56:	e7f8      	b.n	c4a <__udivmoddi4+0x1ca>
     c58:	f1c7 0c20 	rsb	ip, r7, #32
     c5c:	40bb      	lsls	r3, r7
     c5e:	fa22 f40c 	lsr.w	r4, r2, ip
     c62:	431c      	orrs	r4, r3
     c64:	fa2e f10c 	lsr.w	r1, lr, ip
     c68:	fa20 f30c 	lsr.w	r3, r0, ip
     c6c:	40b8      	lsls	r0, r7
     c6e:	4301      	orrs	r1, r0
     c70:	ea4f 4914 	mov.w	r9, r4, lsr #16
     c74:	fa0e f507 	lsl.w	r5, lr, r7
     c78:	fbb3 f8f9 	udiv	r8, r3, r9
     c7c:	fa1f fe84 	uxth.w	lr, r4
     c80:	fb09 3018 	mls	r0, r9, r8, r3
     c84:	0c0b      	lsrs	r3, r1, #16
     c86:	fb08 fa0e 	mul.w	sl, r8, lr
     c8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     c8e:	459a      	cmp	sl, r3
     c90:	fa02 f207 	lsl.w	r2, r2, r7
     c94:	d940      	bls.n	d18 <__udivmoddi4+0x298>
     c96:	18e3      	adds	r3, r4, r3
     c98:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     c9c:	d204      	bcs.n	ca8 <__udivmoddi4+0x228>
     c9e:	459a      	cmp	sl, r3
     ca0:	d902      	bls.n	ca8 <__udivmoddi4+0x228>
     ca2:	f1a8 0002 	sub.w	r0, r8, #2
     ca6:	4423      	add	r3, r4
     ca8:	eba3 030a 	sub.w	r3, r3, sl
     cac:	b289      	uxth	r1, r1
     cae:	fbb3 f8f9 	udiv	r8, r3, r9
     cb2:	fb09 3318 	mls	r3, r9, r8, r3
     cb6:	fb08 fe0e 	mul.w	lr, r8, lr
     cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     cbe:	458e      	cmp	lr, r1
     cc0:	d92c      	bls.n	d1c <__udivmoddi4+0x29c>
     cc2:	1861      	adds	r1, r4, r1
     cc4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     cc8:	d204      	bcs.n	cd4 <__udivmoddi4+0x254>
     cca:	458e      	cmp	lr, r1
     ccc:	d902      	bls.n	cd4 <__udivmoddi4+0x254>
     cce:	f1a8 0302 	sub.w	r3, r8, #2
     cd2:	4421      	add	r1, r4
     cd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     cd8:	fba0 9802 	umull	r9, r8, r0, r2
     cdc:	eba1 010e 	sub.w	r1, r1, lr
     ce0:	4541      	cmp	r1, r8
     ce2:	46ce      	mov	lr, r9
     ce4:	4643      	mov	r3, r8
     ce6:	d302      	bcc.n	cee <__udivmoddi4+0x26e>
     ce8:	d106      	bne.n	cf8 <__udivmoddi4+0x278>
     cea:	454d      	cmp	r5, r9
     cec:	d204      	bcs.n	cf8 <__udivmoddi4+0x278>
     cee:	ebb9 0e02 	subs.w	lr, r9, r2
     cf2:	eb68 0304 	sbc.w	r3, r8, r4
     cf6:	3801      	subs	r0, #1
     cf8:	2e00      	cmp	r6, #0
     cfa:	d0a6      	beq.n	c4a <__udivmoddi4+0x1ca>
     cfc:	ebb5 020e 	subs.w	r2, r5, lr
     d00:	eb61 0103 	sbc.w	r1, r1, r3
     d04:	fa01 fc0c 	lsl.w	ip, r1, ip
     d08:	fa22 f307 	lsr.w	r3, r2, r7
     d0c:	ea4c 0303 	orr.w	r3, ip, r3
     d10:	40f9      	lsrs	r1, r7
     d12:	e9c6 3100 	strd	r3, r1, [r6]
     d16:	e798      	b.n	c4a <__udivmoddi4+0x1ca>
     d18:	4640      	mov	r0, r8
     d1a:	e7c5      	b.n	ca8 <__udivmoddi4+0x228>
     d1c:	4643      	mov	r3, r8
     d1e:	e7d9      	b.n	cd4 <__udivmoddi4+0x254>

00000d20 <strcmp>:
     d20:	f810 2b01 	ldrb.w	r2, [r0], #1
     d24:	f811 3b01 	ldrb.w	r3, [r1], #1
     d28:	2a01      	cmp	r2, #1
     d2a:	bf28      	it	cs
     d2c:	429a      	cmpcs	r2, r3
     d2e:	d0f7      	beq.n	d20 <strcmp>
     d30:	1ad0      	subs	r0, r2, r3
     d32:	4770      	bx	lr

00000d34 <strlen>:
     d34:	4603      	mov	r3, r0
     d36:	f813 2b01 	ldrb.w	r2, [r3], #1
     d3a:	2a00      	cmp	r2, #0
     d3c:	d1fb      	bne.n	d36 <strlen+0x2>
     d3e:	1a18      	subs	r0, r3, r0
     d40:	3801      	subs	r0, #1
     d42:	4770      	bx	lr
     d44:	0000      	movs	r0, r0
	...

00000d48 <guideLineSearch>:
#include "img_algo.h"

/* Function that detects he position and agle of the guideline */
/* Worst case scenario: The guidelines in GN/GF are on the last index of each row*/
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
     d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d4a:	2400      	movs	r4, #0
     d4c:	460d      	mov	r5, r1
     d4e:	4617      	mov	r7, r2
     d50:	4626      	mov	r6, r4
     d52:	4623      	mov	r3, r4
    uint16_t y_gn = 0;
    uint16_t y_gf = GN - 1;
    /* Iterate through GN and GF to discover the position of the guidelines */
    for(uint16_t i = GF; i <= GN; i += GN - 1){
        for(uint16_t j = 0; j < IMGWIDTH; j++){
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
     d54:	5cc2      	ldrb	r2, [r0, r3]
     d56:	2aff      	cmp	r2, #255	; 0xff
     d58:	d01e      	beq.n	d98 <guideLineSearch+0x50>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     d5a:	3301      	adds	r3, #1
     d5c:	2b80      	cmp	r3, #128	; 0x80
     d5e:	d1f9      	bne.n	d54 <guideLineSearch+0xc>
     d60:	f500 537d 	add.w	r3, r0, #16192	; 0x3f40
     d64:	333f      	adds	r3, #63	; 0x3f
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
     d66:	2100      	movs	r1, #0
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
     d68:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     d6c:	2aff      	cmp	r2, #255	; 0xff
     d6e:	d015      	beq.n	d9c <guideLineSearch+0x54>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     d70:	3101      	adds	r1, #1
     d72:	2980      	cmp	r1, #128	; 0x80
     d74:	d1f8      	bne.n	d68 <guideLineSearch+0x20>
        }
    }
    /* When the guideline is vertical the angle is 0 rad, positive angles are associated with a tilt to the right 
    and negative angles to a tilt to the left 
    Calculation of angle between the two points in radians */
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     d76:	1ba0      	subs	r0, r4, r6
     d78:	f7ff fb14 	bl	3a4 <__aeabi_i2d>
     d7c:	a308      	add	r3, pc, #32	; (adr r3, da0 <guideLineSearch+0x58>)
     d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d82:	f00a f9f5 	bl	b170 <atan2>
     d86:	f7ff fd89 	bl	89c <__aeabi_d2f>
    /* Computing of the position */
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     d8a:	2364      	movs	r3, #100	; 0x64
     d8c:	fb06 3303 	mla	r3, r6, r3, r3
     d90:	11db      	asrs	r3, r3, #7
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     d92:	6038      	str	r0, [r7, #0]
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     d94:	802b      	strh	r3, [r5, #0]
}
     d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d98:	b29c      	uxth	r4, r3
     d9a:	e7e1      	b.n	d60 <guideLineSearch+0x18>
     d9c:	b28e      	uxth	r6, r1
     d9e:	e7ea      	b.n	d76 <guideLineSearch+0x2e>
     da0:	00000000 	.word	0x00000000
     da4:	405fc000 	.word	0x405fc000

00000da8 <__ieee754_atan2>:
     da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dac:	4617      	mov	r7, r2
     dae:	4690      	mov	r8, r2
     db0:	4699      	mov	r9, r3
     db2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
     db6:	427b      	negs	r3, r7
     db8:	f8df a184 	ldr.w	sl, [pc, #388]	; f40 <__ieee754_atan2+0x198>
     dbc:	433b      	orrs	r3, r7
     dbe:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
     dc2:	4553      	cmp	r3, sl
     dc4:	4604      	mov	r4, r0
     dc6:	460d      	mov	r5, r1
     dc8:	d809      	bhi.n	dde <__ieee754_atan2+0x36>
     dca:	4246      	negs	r6, r0
     dcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     dd0:	4306      	orrs	r6, r0
     dd2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
     dd6:	4556      	cmp	r6, sl
     dd8:	468e      	mov	lr, r1
     dda:	4683      	mov	fp, r0
     ddc:	d908      	bls.n	df0 <__ieee754_atan2+0x48>
     dde:	4642      	mov	r2, r8
     de0:	464b      	mov	r3, r9
     de2:	4620      	mov	r0, r4
     de4:	4629      	mov	r1, r5
     de6:	f7ff f991 	bl	10c <__adddf3>
     dea:	4604      	mov	r4, r0
     dec:	460d      	mov	r5, r1
     dee:	e016      	b.n	e1e <__ieee754_atan2+0x76>
     df0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
     df4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
     df8:	433e      	orrs	r6, r7
     dfa:	d103      	bne.n	e04 <__ieee754_atan2+0x5c>
     dfc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e00:	f000 b8a6 	b.w	f50 <atan>
     e04:	ea4f 76a9 	mov.w	r6, r9, asr #30
     e08:	f006 0602 	and.w	r6, r6, #2
     e0c:	ea53 0b0b 	orrs.w	fp, r3, fp
     e10:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
     e14:	d107      	bne.n	e26 <__ieee754_atan2+0x7e>
     e16:	2e02      	cmp	r6, #2
     e18:	d064      	beq.n	ee4 <__ieee754_atan2+0x13c>
     e1a:	2e03      	cmp	r6, #3
     e1c:	d066      	beq.n	eec <__ieee754_atan2+0x144>
     e1e:	4620      	mov	r0, r4
     e20:	4629      	mov	r1, r5
     e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e26:	4317      	orrs	r7, r2
     e28:	d106      	bne.n	e38 <__ieee754_atan2+0x90>
     e2a:	f1be 0f00 	cmp.w	lr, #0
     e2e:	da68      	bge.n	f02 <__ieee754_atan2+0x15a>
     e30:	a537      	add	r5, pc, #220	; (adr r5, f10 <__ieee754_atan2+0x168>)
     e32:	e9d5 4500 	ldrd	r4, r5, [r5]
     e36:	e7f2      	b.n	e1e <__ieee754_atan2+0x76>
     e38:	4552      	cmp	r2, sl
     e3a:	d10f      	bne.n	e5c <__ieee754_atan2+0xb4>
     e3c:	4293      	cmp	r3, r2
     e3e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
     e42:	d107      	bne.n	e54 <__ieee754_atan2+0xac>
     e44:	2e02      	cmp	r6, #2
     e46:	d855      	bhi.n	ef4 <__ieee754_atan2+0x14c>
     e48:	4b3e      	ldr	r3, [pc, #248]	; (f44 <__ieee754_atan2+0x19c>)
     e4a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     e4e:	e9d3 4500 	ldrd	r4, r5, [r3]
     e52:	e7e4      	b.n	e1e <__ieee754_atan2+0x76>
     e54:	2e02      	cmp	r6, #2
     e56:	d851      	bhi.n	efc <__ieee754_atan2+0x154>
     e58:	4b3b      	ldr	r3, [pc, #236]	; (f48 <__ieee754_atan2+0x1a0>)
     e5a:	e7f6      	b.n	e4a <__ieee754_atan2+0xa2>
     e5c:	4553      	cmp	r3, sl
     e5e:	d0e4      	beq.n	e2a <__ieee754_atan2+0x82>
     e60:	1a9b      	subs	r3, r3, r2
     e62:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
     e66:	ea4f 5223 	mov.w	r2, r3, asr #20
     e6a:	da21      	bge.n	eb0 <__ieee754_atan2+0x108>
     e6c:	f1b9 0f00 	cmp.w	r9, #0
     e70:	da01      	bge.n	e76 <__ieee754_atan2+0xce>
     e72:	323c      	adds	r2, #60	; 0x3c
     e74:	db20      	blt.n	eb8 <__ieee754_atan2+0x110>
     e76:	4642      	mov	r2, r8
     e78:	464b      	mov	r3, r9
     e7a:	4620      	mov	r0, r4
     e7c:	4629      	mov	r1, r5
     e7e:	f7ff fc25 	bl	6cc <__aeabi_ddiv>
     e82:	f00a f977 	bl	b174 <fabs>
     e86:	f000 f863 	bl	f50 <atan>
     e8a:	4604      	mov	r4, r0
     e8c:	460d      	mov	r5, r1
     e8e:	2e01      	cmp	r6, #1
     e90:	d015      	beq.n	ebe <__ieee754_atan2+0x116>
     e92:	2e02      	cmp	r6, #2
     e94:	d017      	beq.n	ec6 <__ieee754_atan2+0x11e>
     e96:	2e00      	cmp	r6, #0
     e98:	d0c1      	beq.n	e1e <__ieee754_atan2+0x76>
     e9a:	a31f      	add	r3, pc, #124	; (adr r3, f18 <__ieee754_atan2+0x170>)
     e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
     ea0:	4620      	mov	r0, r4
     ea2:	4629      	mov	r1, r5
     ea4:	f7ff f930 	bl	108 <__aeabi_dsub>
     ea8:	a31d      	add	r3, pc, #116	; (adr r3, f20 <__ieee754_atan2+0x178>)
     eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
     eae:	e016      	b.n	ede <__ieee754_atan2+0x136>
     eb0:	a51d      	add	r5, pc, #116	; (adr r5, f28 <__ieee754_atan2+0x180>)
     eb2:	e9d5 4500 	ldrd	r4, r5, [r5]
     eb6:	e7ea      	b.n	e8e <__ieee754_atan2+0xe6>
     eb8:	2400      	movs	r4, #0
     eba:	2500      	movs	r5, #0
     ebc:	e7e7      	b.n	e8e <__ieee754_atan2+0xe6>
     ebe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     ec2:	461d      	mov	r5, r3
     ec4:	e7ab      	b.n	e1e <__ieee754_atan2+0x76>
     ec6:	a314      	add	r3, pc, #80	; (adr r3, f18 <__ieee754_atan2+0x170>)
     ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
     ecc:	4620      	mov	r0, r4
     ece:	4629      	mov	r1, r5
     ed0:	f7ff f91a 	bl	108 <__aeabi_dsub>
     ed4:	4602      	mov	r2, r0
     ed6:	460b      	mov	r3, r1
     ed8:	a111      	add	r1, pc, #68	; (adr r1, f20 <__ieee754_atan2+0x178>)
     eda:	e9d1 0100 	ldrd	r0, r1, [r1]
     ede:	f7ff f913 	bl	108 <__aeabi_dsub>
     ee2:	e782      	b.n	dea <__ieee754_atan2+0x42>
     ee4:	a50e      	add	r5, pc, #56	; (adr r5, f20 <__ieee754_atan2+0x178>)
     ee6:	e9d5 4500 	ldrd	r4, r5, [r5]
     eea:	e798      	b.n	e1e <__ieee754_atan2+0x76>
     eec:	a510      	add	r5, pc, #64	; (adr r5, f30 <__ieee754_atan2+0x188>)
     eee:	e9d5 4500 	ldrd	r4, r5, [r5]
     ef2:	e794      	b.n	e1e <__ieee754_atan2+0x76>
     ef4:	a510      	add	r5, pc, #64	; (adr r5, f38 <__ieee754_atan2+0x190>)
     ef6:	e9d5 4500 	ldrd	r4, r5, [r5]
     efa:	e790      	b.n	e1e <__ieee754_atan2+0x76>
     efc:	2400      	movs	r4, #0
     efe:	2500      	movs	r5, #0
     f00:	e78d      	b.n	e1e <__ieee754_atan2+0x76>
     f02:	a509      	add	r5, pc, #36	; (adr r5, f28 <__ieee754_atan2+0x180>)
     f04:	e9d5 4500 	ldrd	r4, r5, [r5]
     f08:	e789      	b.n	e1e <__ieee754_atan2+0x76>
     f0a:	bf00      	nop
     f0c:	f3af 8000 	nop.w
     f10:	54442d18 	.word	0x54442d18
     f14:	bff921fb 	.word	0xbff921fb
     f18:	33145c07 	.word	0x33145c07
     f1c:	3ca1a626 	.word	0x3ca1a626
     f20:	54442d18 	.word	0x54442d18
     f24:	400921fb 	.word	0x400921fb
     f28:	54442d18 	.word	0x54442d18
     f2c:	3ff921fb 	.word	0x3ff921fb
     f30:	54442d18 	.word	0x54442d18
     f34:	c00921fb 	.word	0xc00921fb
     f38:	54442d18 	.word	0x54442d18
     f3c:	3fe921fb 	.word	0x3fe921fb
     f40:	7ff00000 	.word	0x7ff00000
     f44:	0000b520 	.word	0x0000b520
     f48:	0000b508 	.word	0x0000b508
     f4c:	00000000 	.word	0x00000000

00000f50 <atan>:
     f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f54:	4bbc      	ldr	r3, [pc, #752]	; (1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
     f56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
     f5a:	429e      	cmp	r6, r3
     f5c:	4604      	mov	r4, r0
     f5e:	460d      	mov	r5, r1
     f60:	468b      	mov	fp, r1
     f62:	d918      	bls.n	f96 <atan+0x46>
     f64:	4bb9      	ldr	r3, [pc, #740]	; (124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>)
     f66:	429e      	cmp	r6, r3
     f68:	d801      	bhi.n	f6e <atan+0x1e>
     f6a:	d109      	bne.n	f80 <atan+0x30>
     f6c:	b140      	cbz	r0, f80 <atan+0x30>
     f6e:	4622      	mov	r2, r4
     f70:	462b      	mov	r3, r5
     f72:	4620      	mov	r0, r4
     f74:	4629      	mov	r1, r5
     f76:	f7ff f8c9 	bl	10c <__adddf3>
     f7a:	4604      	mov	r4, r0
     f7c:	460d      	mov	r5, r1
     f7e:	e006      	b.n	f8e <atan+0x3e>
     f80:	f1bb 0f00 	cmp.w	fp, #0
     f84:	f340 8123 	ble.w	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
     f88:	a593      	add	r5, pc, #588	; (adr r5, 11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
     f8a:	e9d5 4500 	ldrd	r4, r5, [r5]
     f8e:	4620      	mov	r0, r4
     f90:	4629      	mov	r1, r5
     f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f96:	4bae      	ldr	r3, [pc, #696]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
     f98:	429e      	cmp	r6, r3
     f9a:	d811      	bhi.n	fc0 <atan+0x70>
     f9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
     fa0:	429e      	cmp	r6, r3
     fa2:	d80a      	bhi.n	fba <atan+0x6a>
     fa4:	a38e      	add	r3, pc, #568	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
     fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
     faa:	f7ff f8af 	bl	10c <__adddf3>
     fae:	4ba9      	ldr	r3, [pc, #676]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
     fb0:	2200      	movs	r2, #0
     fb2:	f7ff fd5b 	bl	a6c <__aeabi_dcmpgt>
     fb6:	2800      	cmp	r0, #0
     fb8:	d1e9      	bne.n	f8e <atan+0x3e>
     fba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     fbe:	e027      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     fc0:	f00a f8d8 	bl	b174 <fabs>
     fc4:	4ba4      	ldr	r3, [pc, #656]	; (1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>)
     fc6:	429e      	cmp	r6, r3
     fc8:	4604      	mov	r4, r0
     fca:	460d      	mov	r5, r1
     fcc:	f200 80b8 	bhi.w	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
     fd0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
     fd4:	429e      	cmp	r6, r3
     fd6:	f200 809c 	bhi.w	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
     fda:	4602      	mov	r2, r0
     fdc:	460b      	mov	r3, r1
     fde:	f7ff f895 	bl	10c <__adddf3>
     fe2:	4b9c      	ldr	r3, [pc, #624]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
     fe4:	2200      	movs	r2, #0
     fe6:	f7ff f88f 	bl	108 <__aeabi_dsub>
     fea:	2200      	movs	r2, #0
     fec:	4606      	mov	r6, r0
     fee:	460f      	mov	r7, r1
     ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ff4:	4620      	mov	r0, r4
     ff6:	4629      	mov	r1, r5
     ff8:	f7ff f888 	bl	10c <__adddf3>
     ffc:	4602      	mov	r2, r0
     ffe:	460b      	mov	r3, r1
    1000:	4630      	mov	r0, r6
    1002:	4639      	mov	r1, r7
    1004:	f7ff fb62 	bl	6cc <__aeabi_ddiv>
    1008:	f04f 0a00 	mov.w	sl, #0
    100c:	4604      	mov	r4, r0
    100e:	460d      	mov	r5, r1
    1010:	4622      	mov	r2, r4
    1012:	462b      	mov	r3, r5
    1014:	4620      	mov	r0, r4
    1016:	4629      	mov	r1, r5
    1018:	f7ff fa2e 	bl	478 <__aeabi_dmul>
    101c:	4602      	mov	r2, r0
    101e:	460b      	mov	r3, r1
    1020:	4680      	mov	r8, r0
    1022:	4689      	mov	r9, r1
    1024:	f7ff fa28 	bl	478 <__aeabi_dmul>
    1028:	a36f      	add	r3, pc, #444	; (adr r3, 11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    102a:	e9d3 2300 	ldrd	r2, r3, [r3]
    102e:	4606      	mov	r6, r0
    1030:	460f      	mov	r7, r1
    1032:	f7ff fa21 	bl	478 <__aeabi_dmul>
    1036:	a36e      	add	r3, pc, #440	; (adr r3, 11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    1038:	e9d3 2300 	ldrd	r2, r3, [r3]
    103c:	f7ff f866 	bl	10c <__adddf3>
    1040:	4632      	mov	r2, r6
    1042:	463b      	mov	r3, r7
    1044:	f7ff fa18 	bl	478 <__aeabi_dmul>
    1048:	a36b      	add	r3, pc, #428	; (adr r3, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    104a:	e9d3 2300 	ldrd	r2, r3, [r3]
    104e:	f7ff f85d 	bl	10c <__adddf3>
    1052:	4632      	mov	r2, r6
    1054:	463b      	mov	r3, r7
    1056:	f7ff fa0f 	bl	478 <__aeabi_dmul>
    105a:	a369      	add	r3, pc, #420	; (adr r3, 1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    105c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1060:	f7ff f854 	bl	10c <__adddf3>
    1064:	4632      	mov	r2, r6
    1066:	463b      	mov	r3, r7
    1068:	f7ff fa06 	bl	478 <__aeabi_dmul>
    106c:	a366      	add	r3, pc, #408	; (adr r3, 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    106e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1072:	f7ff f84b 	bl	10c <__adddf3>
    1076:	4632      	mov	r2, r6
    1078:	463b      	mov	r3, r7
    107a:	f7ff f9fd 	bl	478 <__aeabi_dmul>
    107e:	a364      	add	r3, pc, #400	; (adr r3, 1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    1080:	e9d3 2300 	ldrd	r2, r3, [r3]
    1084:	f7ff f842 	bl	10c <__adddf3>
    1088:	4642      	mov	r2, r8
    108a:	464b      	mov	r3, r9
    108c:	f7ff f9f4 	bl	478 <__aeabi_dmul>
    1090:	a361      	add	r3, pc, #388	; (adr r3, 1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    1092:	e9d3 2300 	ldrd	r2, r3, [r3]
    1096:	4680      	mov	r8, r0
    1098:	4689      	mov	r9, r1
    109a:	4630      	mov	r0, r6
    109c:	4639      	mov	r1, r7
    109e:	f7ff f9eb 	bl	478 <__aeabi_dmul>
    10a2:	a35f      	add	r3, pc, #380	; (adr r3, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    10a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    10a8:	f7ff f82e 	bl	108 <__aeabi_dsub>
    10ac:	4632      	mov	r2, r6
    10ae:	463b      	mov	r3, r7
    10b0:	f7ff f9e2 	bl	478 <__aeabi_dmul>
    10b4:	a35c      	add	r3, pc, #368	; (adr r3, 1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
    10b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    10ba:	f7ff f825 	bl	108 <__aeabi_dsub>
    10be:	4632      	mov	r2, r6
    10c0:	463b      	mov	r3, r7
    10c2:	f7ff f9d9 	bl	478 <__aeabi_dmul>
    10c6:	a35a      	add	r3, pc, #360	; (adr r3, 1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
    10c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    10cc:	f7ff f81c 	bl	108 <__aeabi_dsub>
    10d0:	4632      	mov	r2, r6
    10d2:	463b      	mov	r3, r7
    10d4:	f7ff f9d0 	bl	478 <__aeabi_dmul>
    10d8:	a357      	add	r3, pc, #348	; (adr r3, 1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
    10da:	e9d3 2300 	ldrd	r2, r3, [r3]
    10de:	f7ff f813 	bl	108 <__aeabi_dsub>
    10e2:	4632      	mov	r2, r6
    10e4:	463b      	mov	r3, r7
    10e6:	f7ff f9c7 	bl	478 <__aeabi_dmul>
    10ea:	4602      	mov	r2, r0
    10ec:	460b      	mov	r3, r1
    10ee:	4640      	mov	r0, r8
    10f0:	4649      	mov	r1, r9
    10f2:	f7ff f80b 	bl	10c <__adddf3>
    10f6:	4622      	mov	r2, r4
    10f8:	462b      	mov	r3, r5
    10fa:	f7ff f9bd 	bl	478 <__aeabi_dmul>
    10fe:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    1102:	4602      	mov	r2, r0
    1104:	460b      	mov	r3, r1
    1106:	d144      	bne.n	1192 <CONFIG_FPROTECT_BLOCK_SIZE+0x192>
    1108:	4620      	mov	r0, r4
    110a:	4629      	mov	r1, r5
    110c:	f7fe fffc 	bl	108 <__aeabi_dsub>
    1110:	e733      	b.n	f7a <atan+0x2a>
    1112:	4b50      	ldr	r3, [pc, #320]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    1114:	2200      	movs	r2, #0
    1116:	f7fe fff7 	bl	108 <__aeabi_dsub>
    111a:	4b4e      	ldr	r3, [pc, #312]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    111c:	4606      	mov	r6, r0
    111e:	460f      	mov	r7, r1
    1120:	2200      	movs	r2, #0
    1122:	4620      	mov	r0, r4
    1124:	4629      	mov	r1, r5
    1126:	f7fe fff1 	bl	10c <__adddf3>
    112a:	4602      	mov	r2, r0
    112c:	460b      	mov	r3, r1
    112e:	4630      	mov	r0, r6
    1130:	4639      	mov	r1, r7
    1132:	f7ff facb 	bl	6cc <__aeabi_ddiv>
    1136:	f04f 0a01 	mov.w	sl, #1
    113a:	4604      	mov	r4, r0
    113c:	460d      	mov	r5, r1
    113e:	e767      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1140:	4b46      	ldr	r3, [pc, #280]	; (125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>)
    1142:	429e      	cmp	r6, r3
    1144:	d21a      	bcs.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    1146:	4b46      	ldr	r3, [pc, #280]	; (1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>)
    1148:	2200      	movs	r2, #0
    114a:	f7fe ffdd 	bl	108 <__aeabi_dsub>
    114e:	4b44      	ldr	r3, [pc, #272]	; (1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>)
    1150:	4606      	mov	r6, r0
    1152:	460f      	mov	r7, r1
    1154:	2200      	movs	r2, #0
    1156:	4620      	mov	r0, r4
    1158:	4629      	mov	r1, r5
    115a:	f7ff f98d 	bl	478 <__aeabi_dmul>
    115e:	4b3d      	ldr	r3, [pc, #244]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    1160:	2200      	movs	r2, #0
    1162:	f7fe ffd3 	bl	10c <__adddf3>
    1166:	4602      	mov	r2, r0
    1168:	460b      	mov	r3, r1
    116a:	4630      	mov	r0, r6
    116c:	4639      	mov	r1, r7
    116e:	f7ff faad 	bl	6cc <__aeabi_ddiv>
    1172:	f04f 0a02 	mov.w	sl, #2
    1176:	4604      	mov	r4, r0
    1178:	460d      	mov	r5, r1
    117a:	e749      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    117c:	4602      	mov	r2, r0
    117e:	460b      	mov	r3, r1
    1180:	2000      	movs	r0, #0
    1182:	4938      	ldr	r1, [pc, #224]	; (1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>)
    1184:	f7ff faa2 	bl	6cc <__aeabi_ddiv>
    1188:	f04f 0a03 	mov.w	sl, #3
    118c:	4604      	mov	r4, r0
    118e:	460d      	mov	r5, r1
    1190:	e73e      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1192:	4b35      	ldr	r3, [pc, #212]	; (1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>)
    1194:	4e35      	ldr	r6, [pc, #212]	; (126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>)
    1196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    119a:	e9d3 2300 	ldrd	r2, r3, [r3]
    119e:	f7fe ffb3 	bl	108 <__aeabi_dsub>
    11a2:	4622      	mov	r2, r4
    11a4:	462b      	mov	r3, r5
    11a6:	f7fe ffaf 	bl	108 <__aeabi_dsub>
    11aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    11ae:	4602      	mov	r2, r0
    11b0:	460b      	mov	r3, r1
    11b2:	e9d6 0100 	ldrd	r0, r1, [r6]
    11b6:	f7fe ffa7 	bl	108 <__aeabi_dsub>
    11ba:	f1bb 0f00 	cmp.w	fp, #0
    11be:	4604      	mov	r4, r0
    11c0:	460d      	mov	r5, r1
    11c2:	f6bf aee4 	bge.w	f8e <atan+0x3e>
    11c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    11ca:	461d      	mov	r5, r3
    11cc:	e6df      	b.n	f8e <atan+0x3e>
    11ce:	a51c      	add	r5, pc, #112	; (adr r5, 1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
    11d0:	e9d5 4500 	ldrd	r4, r5, [r5]
    11d4:	e6db      	b.n	f8e <atan+0x3e>
    11d6:	bf00      	nop
    11d8:	54442d18 	.word	0x54442d18
    11dc:	3ff921fb 	.word	0x3ff921fb
    11e0:	8800759c 	.word	0x8800759c
    11e4:	7e37e43c 	.word	0x7e37e43c
    11e8:	e322da11 	.word	0xe322da11
    11ec:	3f90ad3a 	.word	0x3f90ad3a
    11f0:	24760deb 	.word	0x24760deb
    11f4:	3fa97b4b 	.word	0x3fa97b4b
    11f8:	a0d03d51 	.word	0xa0d03d51
    11fc:	3fb10d66 	.word	0x3fb10d66
    1200:	c54c206e 	.word	0xc54c206e
    1204:	3fb745cd 	.word	0x3fb745cd
    1208:	920083ff 	.word	0x920083ff
    120c:	3fc24924 	.word	0x3fc24924
    1210:	5555550d 	.word	0x5555550d
    1214:	3fd55555 	.word	0x3fd55555
    1218:	2c6a6c2f 	.word	0x2c6a6c2f
    121c:	bfa2b444 	.word	0xbfa2b444
    1220:	52defd9a 	.word	0x52defd9a
    1224:	3fadde2d 	.word	0x3fadde2d
    1228:	af749a6d 	.word	0xaf749a6d
    122c:	3fb3b0f2 	.word	0x3fb3b0f2
    1230:	fe231671 	.word	0xfe231671
    1234:	3fbc71c6 	.word	0x3fbc71c6
    1238:	9998ebc4 	.word	0x9998ebc4
    123c:	3fc99999 	.word	0x3fc99999
    1240:	54442d18 	.word	0x54442d18
    1244:	bff921fb 	.word	0xbff921fb
    1248:	440fffff 	.word	0x440fffff
    124c:	7ff00000 	.word	0x7ff00000
    1250:	3fdbffff 	.word	0x3fdbffff
    1254:	3ff00000 	.word	0x3ff00000
    1258:	3ff2ffff 	.word	0x3ff2ffff
    125c:	40038000 	.word	0x40038000
    1260:	3ff80000 	.word	0x3ff80000
    1264:	bff00000 	.word	0xbff00000
    1268:	0000b538 	.word	0x0000b538
    126c:	0000b558 	.word	0x0000b558

00001270 <thread_OUTPUT_code>:
		k_sem_give(&sem_OUTPUT);
	}
}
/* Critical to the safety of the robot and should be executed at the highest possible rate. */
/* WCET = 24781us */
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    1270:	b573      	push	{r0, r1, r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1272:	4e0d      	ldr	r6, [pc, #52]	; (12a8 <thread_OUTPUT_code+0x38>)

	while(1){
		k_sem_take(&sem_OUTPUT, K_FOREVER);
		printk("Near obstacle detection -> %4u\nOrientation and Position -> %f, %d%%\nNumber of obstacles -> %4u\n", flag, angle, pos, obs);
    1274:	4d0d      	ldr	r5, [pc, #52]	; (12ac <thread_OUTPUT_code+0x3c>)
    1276:	4c0e      	ldr	r4, [pc, #56]	; (12b0 <thread_OUTPUT_code+0x40>)
    1278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    127c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1280:	4630      	mov	r0, r6
    1282:	f006 fdc9 	bl	7e18 <z_impl_k_sem_take>
    1286:	6828      	ldr	r0, [r5, #0]
    1288:	f7ff f89e 	bl	3c8 <__aeabi_f2d>
    128c:	460b      	mov	r3, r1
    128e:	4909      	ldr	r1, [pc, #36]	; (12b4 <thread_OUTPUT_code+0x44>)
    1290:	8809      	ldrh	r1, [r1, #0]
    1292:	9101      	str	r1, [sp, #4]
    1294:	4908      	ldr	r1, [pc, #32]	; (12b8 <thread_OUTPUT_code+0x48>)
    1296:	8809      	ldrh	r1, [r1, #0]
    1298:	9100      	str	r1, [sp, #0]
    129a:	4602      	mov	r2, r0
    129c:	7821      	ldrb	r1, [r4, #0]
    129e:	4807      	ldr	r0, [pc, #28]	; (12bc <thread_OUTPUT_code+0x4c>)
    12a0:	f008 ff7b 	bl	a19a <printk>
	while(1){
    12a4:	e7e8      	b.n	1278 <thread_OUTPUT_code+0x8>
    12a6:	bf00      	nop
    12a8:	200047a0 	.word	0x200047a0
    12ac:	200047c4 	.word	0x200047c4
    12b0:	20005104 	.word	0x20005104
    12b4:	20005102 	.word	0x20005102
    12b8:	20005100 	.word	0x20005100
    12bc:	0000b840 	.word	0x0000b840

000012c0 <uart_cb>:
	}
}

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    12c0:	b510      	push	{r4, lr}
    int err;

    switch (evt->type) {
    12c2:	780b      	ldrb	r3, [r1, #0]
    12c4:	2b03      	cmp	r3, #3
    12c6:	d011      	beq.n	12ec <uart_cb+0x2c>
    12c8:	2b05      	cmp	r3, #5
    12ca:	d019      	beq.n	1300 <uart_cb+0x40>
    12cc:	2b02      	cmp	r3, #2
    12ce:	d10c      	bne.n	12ea <uart_cb+0x2a>

    	case UART_TX_ABORTED:
		    break;
		
	    case UART_RX_RDY:
			memcpy(&rx_chars, &(evt->data.rx.buf[evt->data.rx.offset]), evt->data.rx.len);
    12d0:	e9d1 4001 	ldrd	r4, r0, [r1, #4]
    12d4:	68ca      	ldr	r2, [r1, #12]
    12d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    12da:	1821      	adds	r1, r4, r0
    12dc:	4812      	ldr	r0, [pc, #72]	; (1328 <uart_cb+0x68>)
    12de:	f009 ff5b 	bl	b198 <__memcpy_chk>
            rx++;   
    12e2:	4a12      	ldr	r2, [pc, #72]	; (132c <uart_cb+0x6c>)
    12e4:	6813      	ldr	r3, [r2, #0]
    12e6:	3301      	adds	r3, #1
    12e8:	6013      	str	r3, [r2, #0]
		
	    default:
		    break;
    }

    12ea:	bd10      	pop	{r4, pc}
            uart_rx_buf_rsp(uart_dev, rx_buf_rsp, sizeof(rx_buf_rsp));
    12ec:	4b10      	ldr	r3, [pc, #64]	; (1330 <uart_cb+0x70>)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    12ee:	4911      	ldr	r1, [pc, #68]	; (1334 <uart_cb+0x74>)
    12f0:	6818      	ldr	r0, [r3, #0]
    12f2:	6883      	ldr	r3, [r0, #8]
    12f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12f8:	691b      	ldr	r3, [r3, #16]
    12fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    12fe:	4718      	bx	r3
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    1300:	4b0b      	ldr	r3, [pc, #44]	; (1330 <uart_cb+0x70>)
    1302:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
    1304:	6883      	ldr	r3, [r0, #8]
    1306:	490c      	ldr	r1, [pc, #48]	; (1338 <uart_cb+0x78>)
    1308:	68dc      	ldr	r4, [r3, #12]
    130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1312:	47a0      	blx	r4
            if (err) {
    1314:	4601      	mov	r1, r0
    1316:	2800      	cmp	r0, #0
    1318:	d0e7      	beq.n	12ea <uart_cb+0x2a>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
    131a:	4808      	ldr	r0, [pc, #32]	; (133c <uart_cb+0x7c>)
    131c:	f008 ff3d 	bl	a19a <printk>
                exit(FATAL_ERR);                
    1320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1324:	f008 fd0c 	bl	9d40 <exit>
    1328:	20005105 	.word	0x20005105
    132c:	200047dc 	.word	0x200047dc
    1330:	200047e0 	.word	0x200047e0
    1334:	20009105 	.word	0x20009105
    1338:	2000d105 	.word	0x2000d105
    133c:	0000b8a0 	.word	0x0000b8a0

00001340 <thread_OAP_code>:
void thread_OAP_code(void *argA , void *argB, void *argC){
    1340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1342:	4f0d      	ldr	r7, [pc, #52]	; (1378 <thread_OAP_code+0x38>)
		buff = (uint8_t *) get_mes(cab_RX);
    1344:	4d0d      	ldr	r5, [pc, #52]	; (137c <thread_OAP_code+0x3c>)
		guideLineSearch(buff, &pos, &angle);
    1346:	4e0e      	ldr	r6, [pc, #56]	; (1380 <thread_OAP_code+0x40>)
    1348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    134c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1350:	4638      	mov	r0, r7
    1352:	f006 fd61 	bl	7e18 <z_impl_k_sem_take>
		buff = (uint8_t *) get_mes(cab_RX);
    1356:	6828      	ldr	r0, [r5, #0]
    1358:	f009 fe9b 	bl	b092 <get_mes>
		guideLineSearch(buff, &pos, &angle);
    135c:	4632      	mov	r2, r6
		buff = (uint8_t *) get_mes(cab_RX);
    135e:	4604      	mov	r4, r0
		guideLineSearch(buff, &pos, &angle);
    1360:	4908      	ldr	r1, [pc, #32]	; (1384 <thread_OAP_code+0x44>)
    1362:	f7ff fcf1 	bl	d48 <guideLineSearch>
		unget(buff, cab_RX);
    1366:	6829      	ldr	r1, [r5, #0]
    1368:	4620      	mov	r0, r4
    136a:	f009 fead 	bl	b0c8 <unget>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    136e:	4806      	ldr	r0, [pc, #24]	; (1388 <thread_OAP_code+0x48>)
    1370:	f006 fd14 	bl	7d9c <z_impl_k_sem_give>
	while(1){
    1374:	e7e8      	b.n	1348 <thread_OAP_code+0x8>
    1376:	bf00      	nop
    1378:	20004790 	.word	0x20004790
    137c:	200047c0 	.word	0x200047c0
    1380:	200047c4 	.word	0x200047c4
    1384:	20005100 	.word	0x20005100
    1388:	200047a0 	.word	0x200047a0

0000138c <thread_OBSC_code>:
void thread_OBSC_code(void *argA , void *argB, void *argC){
    138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
    138e:	4f0c      	ldr	r7, [pc, #48]	; (13c0 <thread_OBSC_code+0x34>)
		buff = (uint8_t *) get_mes(cab_RX);
    1390:	4d0c      	ldr	r5, [pc, #48]	; (13c4 <thread_OBSC_code+0x38>)
		obs = obstCount(buff);
    1392:	4e0d      	ldr	r6, [pc, #52]	; (13c8 <thread_OBSC_code+0x3c>)
    1394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    139c:	4638      	mov	r0, r7
    139e:	f006 fd3b 	bl	7e18 <z_impl_k_sem_take>
		buff = (uint8_t *) get_mes(cab_RX);
    13a2:	6828      	ldr	r0, [r5, #0]
    13a4:	f009 fe75 	bl	b092 <get_mes>
    13a8:	4604      	mov	r4, r0
		obs = obstCount(buff);
    13aa:	f009 febf 	bl	b12c <obstCount>
		unget(buff, cab_RX);
    13ae:	6829      	ldr	r1, [r5, #0]
		obs = obstCount(buff);
    13b0:	8030      	strh	r0, [r6, #0]
		unget(buff, cab_RX);
    13b2:	4620      	mov	r0, r4
    13b4:	f009 fe88 	bl	b0c8 <unget>
	z_impl_k_sem_give(sem);
    13b8:	4804      	ldr	r0, [pc, #16]	; (13cc <thread_OBSC_code+0x40>)
    13ba:	f006 fcef 	bl	7d9c <z_impl_k_sem_give>
	while(1){
    13be:	e7e9      	b.n	1394 <thread_OBSC_code+0x8>
    13c0:	20004780 	.word	0x20004780
    13c4:	200047c0 	.word	0x200047c0
    13c8:	20005102 	.word	0x20005102
    13cc:	200047a0 	.word	0x200047a0

000013d0 <thread_NOD_code>:
void thread_NOD_code(void *argA , void *argB, void *argC){
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_sem_take(sem, timeout);
    13d2:	4f0c      	ldr	r7, [pc, #48]	; (1404 <thread_NOD_code+0x34>)
		buff = (uint8_t *) get_mes(cab_RX);
    13d4:	4d0c      	ldr	r5, [pc, #48]	; (1408 <thread_NOD_code+0x38>)
		flag = nearObstSearch(buff);
    13d6:	4e0d      	ldr	r6, [pc, #52]	; (140c <thread_NOD_code+0x3c>)
    13d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13e0:	4638      	mov	r0, r7
    13e2:	f006 fd19 	bl	7e18 <z_impl_k_sem_take>
		buff = (uint8_t *) get_mes(cab_RX);
    13e6:	6828      	ldr	r0, [r5, #0]
    13e8:	f009 fe53 	bl	b092 <get_mes>
    13ec:	4604      	mov	r4, r0
		flag = nearObstSearch(buff);
    13ee:	f009 fe86 	bl	b0fe <nearObstSearch>
		unget(buff, cab_RX);
    13f2:	6829      	ldr	r1, [r5, #0]
		flag = nearObstSearch(buff);
    13f4:	7030      	strb	r0, [r6, #0]
		unget(buff, cab_RX);
    13f6:	4620      	mov	r0, r4
    13f8:	f009 fe66 	bl	b0c8 <unget>
	z_impl_k_sem_give(sem);
    13fc:	4804      	ldr	r0, [pc, #16]	; (1410 <thread_NOD_code+0x40>)
    13fe:	f006 fccd 	bl	7d9c <z_impl_k_sem_give>
	while(1){
    1402:	e7e9      	b.n	13d8 <thread_NOD_code+0x8>
    1404:	200047b0 	.word	0x200047b0
    1408:	200047c0 	.word	0x200047c0
    140c:	20005104 	.word	0x20005104
    1410:	200047a0 	.word	0x200047a0

00001414 <thread_RXDATA_code>:
void thread_RXDATA_code(void *argA , void *argB, void *argC){
    1414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char arr[4] = {'A', 'C', 'K', '\0'};
    1416:	4b1b      	ldr	r3, [pc, #108]	; (1484 <thread_RXDATA_code+0x70>)
        if(rx > 0){  
    1418:	4e1b      	ldr	r6, [pc, #108]	; (1488 <thread_RXDATA_code+0x74>)
			img = (uint8_t *) reserve(cab_RX);
    141a:	4c1c      	ldr	r4, [pc, #112]	; (148c <thread_RXDATA_code+0x78>)
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    141c:	4f1c      	ldr	r7, [pc, #112]	; (1490 <thread_RXDATA_code+0x7c>)
	char arr[4] = {'A', 'C', 'K', '\0'};
    141e:	9301      	str	r3, [sp, #4]
        if(rx > 0){  
    1420:	6833      	ldr	r3, [r6, #0]
    1422:	2b00      	cmp	r3, #0
    1424:	dd28      	ble.n	1478 <thread_RXDATA_code+0x64>
			img = (uint8_t *) reserve(cab_RX);
    1426:	6820      	ldr	r0, [r4, #0]
    1428:	f008 fc5c 	bl	9ce4 <reserve>
			memcpy(img, &rx_chars, cab_RX->size);
    142c:	6823      	ldr	r3, [r4, #0]
			img = (uint8_t *) reserve(cab_RX);
    142e:	4605      	mov	r5, r0
    1430:	891a      	ldrh	r2, [r3, #8]
    1432:	4639      	mov	r1, r7
    1434:	f009 fea2 	bl	b17c <memcpy>
			put_mes(img, cab_RX);
    1438:	4628      	mov	r0, r5
    143a:	6821      	ldr	r1, [r4, #0]
    143c:	f009 fe0e 	bl	b05c <put_mes>
            rx = 0;  /* Reset */
    1440:	2300      	movs	r3, #0
    1442:	6033      	str	r3, [r6, #0]
            err = uart_tx(uart_dev, arr, sizeof(arr), SYS_FOREVER_US);
    1444:	4b13      	ldr	r3, [pc, #76]	; (1494 <thread_RXDATA_code+0x80>)
    1446:	6818      	ldr	r0, [r3, #0]
	return api->tx(dev, buf, len, timeout);
    1448:	6883      	ldr	r3, [r0, #8]
    144a:	2204      	movs	r2, #4
    144c:	685d      	ldr	r5, [r3, #4]
    144e:	eb0d 0102 	add.w	r1, sp, r2
    1452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1456:	47a8      	blx	r5
            if (err) {
    1458:	4601      	mov	r1, r0
    145a:	b120      	cbz	r0, 1466 <thread_RXDATA_code+0x52>
               printk("uart_tx() error. Error code:%d\n\r",err);
    145c:	480e      	ldr	r0, [pc, #56]	; (1498 <thread_RXDATA_code+0x84>)
    145e:	f008 fe9c 	bl	a19a <printk>
}
    1462:	b003      	add	sp, #12
    1464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1466:	480d      	ldr	r0, [pc, #52]	; (149c <thread_RXDATA_code+0x88>)
    1468:	f006 fc98 	bl	7d9c <z_impl_k_sem_give>
    146c:	480c      	ldr	r0, [pc, #48]	; (14a0 <thread_RXDATA_code+0x8c>)
    146e:	f006 fc95 	bl	7d9c <z_impl_k_sem_give>
    1472:	480c      	ldr	r0, [pc, #48]	; (14a4 <thread_RXDATA_code+0x90>)
    1474:	f006 fc92 	bl	7d9c <z_impl_k_sem_give>
	return z_impl_k_usleep(us);
    1478:	f246 3011 	movw	r0, #25361	; 0x6311
    147c:	f007 fde6 	bl	904c <z_impl_k_usleep>
    1480:	e7ce      	b.n	1420 <thread_RXDATA_code+0xc>
    1482:	bf00      	nop
    1484:	004b4341 	.word	0x004b4341
    1488:	200047dc 	.word	0x200047dc
    148c:	200047c0 	.word	0x200047c0
    1490:	20005105 	.word	0x20005105
    1494:	200047e0 	.word	0x200047e0
    1498:	0000b8c8 	.word	0x0000b8c8
    149c:	200047b0 	.word	0x200047b0
    14a0:	20004790 	.word	0x20004790
    14a4:	20004780 	.word	0x20004780

000014a8 <main>:
{
    14a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14aa:	b08d      	sub	sp, #52	; 0x34
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    14ac:	2500      	movs	r5, #0
	cab_RX = open_cab("RX", 16384, 1, buffer);
    14ae:	4b59      	ldr	r3, [pc, #356]	; (1614 <main+0x16c>)
    14b0:	4859      	ldr	r0, [pc, #356]	; (1618 <main+0x170>)
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    14b2:	950b      	str	r5, [sp, #44]	; 0x2c
	cab_RX = open_cab("RX", 16384, 1, buffer);
    14b4:	2201      	movs	r2, #1
    14b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    14ba:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
	cab_RX = open_cab("RX", 16384, 1, buffer);
    14be:	f009 fda1 	bl	b004 <open_cab>
    14c2:	4b56      	ldr	r3, [pc, #344]	; (161c <main+0x174>)
    14c4:	6018      	str	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    14c6:	4856      	ldr	r0, [pc, #344]	; (1620 <main+0x178>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    14c8:	4c56      	ldr	r4, [pc, #344]	; (1624 <main+0x17c>)
    14ca:	f005 fe9b 	bl	7204 <z_impl_device_get_binding>
    14ce:	6020      	str	r0, [r4, #0]
    if (uart_dev == NULL) {
    14d0:	b920      	cbnz	r0, 14dc <main+0x34>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    14d2:	4953      	ldr	r1, [pc, #332]	; (1620 <main+0x178>)
    14d4:	4854      	ldr	r0, [pc, #336]	; (1628 <main+0x180>)
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    14d6:	f008 fe60 	bl	a19a <printk>
        return;
    14da:	e009      	b.n	14f0 <main+0x48>
        printk("UART binding successful\n\r");
    14dc:	4853      	ldr	r0, [pc, #332]	; (162c <main+0x184>)
    14de:	f008 fe5c 	bl	a19a <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    14e2:	6820      	ldr	r0, [r4, #0]
	if (api->configure == NULL) {
    14e4:	6883      	ldr	r3, [r0, #8]
    14e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    14e8:	b923      	cbnz	r3, 14f4 <main+0x4c>
        printk("uart_configure() error. Invalid configuration\n\r");
    14ea:	4851      	ldr	r0, [pc, #324]	; (1630 <main+0x188>)
    14ec:	f008 fe55 	bl	a19a <printk>
}
    14f0:	b00d      	add	sp, #52	; 0x34
    14f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->configure(dev, cfg);
    14f4:	494f      	ldr	r1, [pc, #316]	; (1634 <main+0x18c>)
    14f6:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
    14f8:	3058      	adds	r0, #88	; 0x58
    14fa:	d0f6      	beq.n	14ea <main+0x42>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    14fc:	6820      	ldr	r0, [r4, #0]
	if (api->callback_set == NULL) {
    14fe:	6883      	ldr	r3, [r0, #8]
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	b133      	cbz	r3, 1512 <main+0x6a>
	return api->callback_set(dev, callback, user_data);
    1504:	494c      	ldr	r1, [pc, #304]	; (1638 <main+0x190>)
    1506:	462a      	mov	r2, r5
    1508:	4798      	blx	r3
    if (err) {
    150a:	4601      	mov	r1, r0
    150c:	b120      	cbz	r0, 1518 <main+0x70>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    150e:	484b      	ldr	r0, [pc, #300]	; (163c <main+0x194>)
    1510:	e7e1      	b.n	14d6 <main+0x2e>
		return -ENOSYS;
    1512:	f06f 0157 	mvn.w	r1, #87	; 0x57
    1516:	e7fa      	b.n	150e <main+0x66>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf), SYS_FOREVER_US);
    1518:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
    151a:	6883      	ldr	r3, [r0, #8]
    151c:	4948      	ldr	r1, [pc, #288]	; (1640 <main+0x198>)
    151e:	68dc      	ldr	r4, [r3, #12]
    1520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1528:	47a0      	blx	r4
    if (err) {
    152a:	4604      	mov	r4, r0
    152c:	b110      	cbz	r0, 1534 <main+0x8c>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    152e:	4601      	mov	r1, r0
    1530:	4844      	ldr	r0, [pc, #272]	; (1644 <main+0x19c>)
    1532:	e7d0      	b.n	14d6 <main+0x2e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1534:	2201      	movs	r2, #1
    1536:	4601      	mov	r1, r0
    1538:	4843      	ldr	r0, [pc, #268]	; (1648 <main+0x1a0>)
    153a:	f009 fce0 	bl	aefe <z_impl_k_sem_init>
    153e:	2201      	movs	r2, #1
    1540:	4621      	mov	r1, r4
    1542:	4842      	ldr	r0, [pc, #264]	; (164c <main+0x1a4>)
    1544:	f009 fcdb 	bl	aefe <z_impl_k_sem_init>
    1548:	2201      	movs	r2, #1
    154a:	4621      	mov	r1, r4
    154c:	4840      	ldr	r0, [pc, #256]	; (1650 <main+0x1a8>)
    154e:	f009 fcd6 	bl	aefe <z_impl_k_sem_init>
    1552:	2201      	movs	r2, #1
    1554:	4621      	mov	r1, r4
    1556:	483f      	ldr	r0, [pc, #252]	; (1654 <main+0x1ac>)
    1558:	f009 fcd1 	bl	aefe <z_impl_k_sem_init>
	thread_NOD_tid = k_thread_create(&thread_NOD_data, thread_NOD_stack,
    155c:	2600      	movs	r6, #0
    155e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1560:	ab0b      	add	r3, sp, #44	; 0x2c
    1562:	9302      	str	r3, [sp, #8]
    1564:	ab0a      	add	r3, sp, #40	; 0x28
    1566:	9301      	str	r3, [sp, #4]
    1568:	2501      	movs	r5, #1
    156a:	ab09      	add	r3, sp, #36	; 0x24
    156c:	9300      	str	r3, [sp, #0]
    156e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1572:	4b39      	ldr	r3, [pc, #228]	; (1658 <main+0x1b0>)
    1574:	4939      	ldr	r1, [pc, #228]	; (165c <main+0x1b4>)
    1576:	9404      	str	r4, [sp, #16]
    1578:	9503      	str	r5, [sp, #12]
    157a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    157e:	4838      	ldr	r0, [pc, #224]	; (1660 <main+0x1b8>)
    1580:	f006 f91e 	bl	77c0 <z_impl_k_thread_create>
    1584:	4b37      	ldr	r3, [pc, #220]	; (1664 <main+0x1bc>)
    1586:	6018      	str	r0, [r3, #0]
    1588:	4b37      	ldr	r3, [pc, #220]	; (1668 <main+0x1c0>)
    158a:	4938      	ldr	r1, [pc, #224]	; (166c <main+0x1c4>)
    158c:	9400      	str	r4, [sp, #0]
    158e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1592:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1596:	e9cd 4401 	strd	r4, r4, [sp, #4]
    159a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    159e:	4834      	ldr	r0, [pc, #208]	; (1670 <main+0x1c8>)
    15a0:	f006 f90e 	bl	77c0 <z_impl_k_thread_create>
	thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
    15a4:	4b33      	ldr	r3, [pc, #204]	; (1674 <main+0x1cc>)
    15a6:	6018      	str	r0, [r3, #0]
    15a8:	2303      	movs	r3, #3
    15aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
    15ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
    15b2:	e9cd 4400 	strd	r4, r4, [sp]
    15b6:	4b30      	ldr	r3, [pc, #192]	; (1678 <main+0x1d0>)
    15b8:	4930      	ldr	r1, [pc, #192]	; (167c <main+0x1d4>)
    15ba:	9404      	str	r4, [sp, #16]
    15bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    15c0:	482f      	ldr	r0, [pc, #188]	; (1680 <main+0x1d8>)
    15c2:	f006 f8fd 	bl	77c0 <z_impl_k_thread_create>
	thread_OBSC_tid = k_thread_create(&thread_OBSC_data, thread_OBSC_stack,
    15c6:	4b2f      	ldr	r3, [pc, #188]	; (1684 <main+0x1dc>)
    15c8:	6018      	str	r0, [r3, #0]
    15ca:	2302      	movs	r3, #2
    15cc:	e9cd 4302 	strd	r4, r3, [sp, #8]
    15d0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    15d4:	e9cd 4400 	strd	r4, r4, [sp]
    15d8:	4b2b      	ldr	r3, [pc, #172]	; (1688 <main+0x1e0>)
    15da:	492c      	ldr	r1, [pc, #176]	; (168c <main+0x1e4>)
    15dc:	9404      	str	r4, [sp, #16]
    15de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    15e2:	482b      	ldr	r0, [pc, #172]	; (1690 <main+0x1e8>)
    15e4:	f006 f8ec 	bl	77c0 <z_impl_k_thread_create>
	thread_OAP_tid = k_thread_create(&thread_OAP_data, thread_OAP_stack,
    15e8:	4b2a      	ldr	r3, [pc, #168]	; (1694 <main+0x1ec>)
    15ea:	6018      	str	r0, [r3, #0]
    15ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    15f0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    15f4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    15f8:	4b27      	ldr	r3, [pc, #156]	; (1698 <main+0x1f0>)
    15fa:	4928      	ldr	r1, [pc, #160]	; (169c <main+0x1f4>)
    15fc:	4828      	ldr	r0, [pc, #160]	; (16a0 <main+0x1f8>)
    15fe:	9404      	str	r4, [sp, #16]
    1600:	e9cd 4400 	strd	r4, r4, [sp]
    1604:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1608:	f006 f8da 	bl	77c0 <z_impl_k_thread_create>
	thread_RXDATA_tid = k_thread_create(&thread_RXDATA_data, thread_RXDATA_stack, 
    160c:	4b25      	ldr	r3, [pc, #148]	; (16a4 <main+0x1fc>)
    160e:	6018      	str	r0, [r3, #0]
	return;
    1610:	e76e      	b.n	14f0 <main+0x48>
    1612:	bf00      	nop
    1614:	200001ac 	.word	0x200001ac
    1618:	0000b8e9 	.word	0x0000b8e9
    161c:	200047c0 	.word	0x200047c0
    1620:	0000b8ec 	.word	0x0000b8ec
    1624:	200047e0 	.word	0x200047e0
    1628:	0000b8f3 	.word	0x0000b8f3
    162c:	0000b91f 	.word	0x0000b91f
    1630:	0000b939 	.word	0x0000b939
    1634:	0000b578 	.word	0x0000b578
    1638:	000012c1 	.word	0x000012c1
    163c:	0000b969 	.word	0x0000b969
    1640:	2000d105 	.word	0x2000d105
    1644:	0000b8a0 	.word	0x0000b8a0
    1648:	200047b0 	.word	0x200047b0
    164c:	200047a0 	.word	0x200047a0
    1650:	20004790 	.word	0x20004790
    1654:	20004780 	.word	0x20004780
    1658:	000013d1 	.word	0x000013d1
    165c:	200135a0 	.word	0x200135a0
    1660:	20004428 	.word	0x20004428
    1664:	200047d8 	.word	0x200047d8
    1668:	00001271 	.word	0x00001271
    166c:	20011d40 	.word	0x20011d40
    1670:	200042a8 	.word	0x200042a8
    1674:	200047cc 	.word	0x200047cc
    1678:	0000138d 	.word	0x0000138d
    167c:	20012d80 	.word	0x20012d80
    1680:	200043a8 	.word	0x200043a8
    1684:	200047d4 	.word	0x200047d4
    1688:	00001341 	.word	0x00001341
    168c:	20012560 	.word	0x20012560
    1690:	20004328 	.word	0x20004328
    1694:	200047d0 	.word	0x200047d0
    1698:	00001415 	.word	0x00001415
    169c:	20011520 	.word	0x20011520
    16a0:	20004228 	.word	0x20004228
    16a4:	200047c8 	.word	0x200047c8

000016a8 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    16a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16ac:	b08d      	sub	sp, #52	; 0x34
    16ae:	461f      	mov	r7, r3
    16b0:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    16b2:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    16b6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    16ba:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    16bc:	1c53      	adds	r3, r2, #1
    16be:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    16c0:	0783      	lsls	r3, r0, #30
    16c2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    16c6:	4605      	mov	r5, r0
    16c8:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    16ca:	f040 8228 	bne.w	1b1e <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    16ce:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    16d0:	b130      	cbz	r0, 16e0 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    16d2:	2907      	cmp	r1, #7
    16d4:	d809      	bhi.n	16ea <cbvprintf_package+0x42>
		return -ENOSPC;
    16d6:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    16da:	b00d      	add	sp, #52	; 0x34
    16dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    16e0:	f001 0607 	and.w	r6, r1, #7
    16e4:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    16e6:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    16ea:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    16ee:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    16f2:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    16f4:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    16f8:	4652      	mov	r2, sl
	bool parsing = false;
    16fa:	4651      	mov	r1, sl
	size = sizeof(char *);
    16fc:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    16fe:	b105      	cbz	r5, 1702 <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    1700:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1702:	9804      	ldr	r0, [sp, #16]
    1704:	2800      	cmp	r0, #0
    1706:	f300 812a 	bgt.w	195e <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    170a:	48bc      	ldr	r0, [pc, #752]	; (19fc <cbvprintf_package+0x354>)
    170c:	4287      	cmp	r7, r0
    170e:	d303      	bcc.n	1718 <cbvprintf_package+0x70>
    1710:	48bb      	ldr	r0, [pc, #748]	; (1a00 <cbvprintf_package+0x358>)
    1712:	4287      	cmp	r7, r0
    1714:	f0c0 8123 	bcc.w	195e <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1718:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    171c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1720:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1724:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1728:	f000 8137 	beq.w	199a <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    172c:	f04f 0c00 	mov.w	ip, #0
    1730:	e11e      	b.n	1970 <cbvprintf_package+0x2c8>
		if (!parsing) {
    1732:	b931      	cbnz	r1, 1742 <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    1734:	2825      	cmp	r0, #37	; 0x25
    1736:	d116      	bne.n	1766 <cbvprintf_package+0xbe>
				parsing = true;
    1738:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    173a:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    173e:	46cb      	mov	fp, r9
    1740:	e011      	b.n	1766 <cbvprintf_package+0xbe>
		switch (*fmt) {
    1742:	286c      	cmp	r0, #108	; 0x6c
    1744:	f200 809f 	bhi.w	1886 <cbvprintf_package+0x1de>
    1748:	284b      	cmp	r0, #75	; 0x4b
    174a:	d822      	bhi.n	1792 <cbvprintf_package+0xea>
    174c:	2847      	cmp	r0, #71	; 0x47
    174e:	f200 80b1 	bhi.w	18b4 <cbvprintf_package+0x20c>
    1752:	2829      	cmp	r0, #41	; 0x29
    1754:	d86a      	bhi.n	182c <cbvprintf_package+0x184>
    1756:	2820      	cmp	r0, #32
    1758:	d005      	beq.n	1766 <cbvprintf_package+0xbe>
    175a:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    175e:	f1dc 0100 	rsbs	r1, ip, #0
    1762:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    1766:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    176a:	2800      	cmp	r0, #0
    176c:	d1e1      	bne.n	1732 <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    176e:	1b61      	subs	r1, r4, r5
    1770:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    1774:	f0c0 8173 	bcc.w	1a5e <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    1778:	49a2      	ldr	r1, [pc, #648]	; (1a04 <cbvprintf_package+0x35c>)
    177a:	4aa3      	ldr	r2, [pc, #652]	; (1a08 <cbvprintf_package+0x360>)
    177c:	48a3      	ldr	r0, [pc, #652]	; (1a0c <cbvprintf_package+0x364>)
    177e:	f240 233d 	movw	r3, #573	; 0x23d
    1782:	f008 fe86 	bl	a492 <assert_print>
    1786:	48a2      	ldr	r0, [pc, #648]	; (1a10 <cbvprintf_package+0x368>)
    1788:	f008 fe83 	bl	a492 <assert_print>
    178c:	f240 213d 	movw	r1, #573	; 0x23d
    1790:	e0fd      	b.n	198e <cbvprintf_package+0x2e6>
		switch (*fmt) {
    1792:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1796:	f1bc 0f20 	cmp.w	ip, #32
    179a:	f200 808b 	bhi.w	18b4 <cbvprintf_package+0x20c>
    179e:	f20f 0e08 	addw	lr, pc, #8
    17a2:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    17a6:	bf00      	nop
    17a8:	00001767 	.word	0x00001767
    17ac:	000018b5 	.word	0x000018b5
    17b0:	000018b5 	.word	0x000018b5
    17b4:	000018b5 	.word	0x000018b5
    17b8:	000018b5 	.word	0x000018b5
    17bc:	000018b5 	.word	0x000018b5
    17c0:	000018b5 	.word	0x000018b5
    17c4:	000018b5 	.word	0x000018b5
    17c8:	000018b5 	.word	0x000018b5
    17cc:	000018b5 	.word	0x000018b5
    17d0:	000018b5 	.word	0x000018b5
    17d4:	000018b5 	.word	0x000018b5
    17d8:	000018b9 	.word	0x000018b9
    17dc:	000018b5 	.word	0x000018b5
    17e0:	000018b5 	.word	0x000018b5
    17e4:	000018b5 	.word	0x000018b5
    17e8:	000018b5 	.word	0x000018b5
    17ec:	000018b5 	.word	0x000018b5
    17f0:	000018b5 	.word	0x000018b5
    17f4:	000018b5 	.word	0x000018b5
    17f8:	000018b5 	.word	0x000018b5
    17fc:	000018d5 	.word	0x000018d5
    1800:	000018b5 	.word	0x000018b5
    1804:	000018b9 	.word	0x000018b9
    1808:	000018b9 	.word	0x000018b9
    180c:	000018d5 	.word	0x000018d5
    1810:	000018d5 	.word	0x000018d5
    1814:	000018d5 	.word	0x000018d5
    1818:	00001767 	.word	0x00001767
    181c:	000018b9 	.word	0x000018b9
    1820:	000018fd 	.word	0x000018fd
    1824:	000018b5 	.word	0x000018b5
    1828:	00001767 	.word	0x00001767
    182c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1830:	f04f 0e01 	mov.w	lr, #1
    1834:	fa5f fc8c 	uxtb.w	ip, ip
    1838:	fa0e fc0c 	lsl.w	ip, lr, ip
    183c:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1840:	ea1c 0f0e 	tst.w	ip, lr
    1844:	d18f      	bne.n	1766 <cbvprintf_package+0xbe>
    1846:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    184a:	d143      	bne.n	18d4 <cbvprintf_package+0x22c>
    184c:	f01c 0101 	ands.w	r1, ip, #1
    1850:	d089      	beq.n	1766 <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    1852:	3c01      	subs	r4, #1
    1854:	444c      	add	r4, r9
    1856:	f1c9 0c00 	rsb	ip, r9, #0
    185a:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    185e:	2d00      	cmp	r5, #0
    1860:	d065      	beq.n	192e <cbvprintf_package+0x286>
    1862:	ebab 0c05 	sub.w	ip, fp, r5
    1866:	44a4      	add	ip, r4
    1868:	4566      	cmp	r6, ip
    186a:	f4ff af34 	bcc.w	16d6 <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    186e:	2873      	cmp	r0, #115	; 0x73
    1870:	d06f      	beq.n	1952 <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1872:	f1bb 0f04 	cmp.w	fp, #4
    1876:	d14a      	bne.n	190e <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    1878:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    187c:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    187e:	3404      	adds	r4, #4
    1880:	f04f 0b04 	mov.w	fp, #4
    1884:	e76f      	b.n	1766 <cbvprintf_package+0xbe>
		switch (*fmt) {
    1886:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    188a:	fa5f fc8c 	uxtb.w	ip, ip
    188e:	f1bc 0f0c 	cmp.w	ip, #12
    1892:	d80f      	bhi.n	18b4 <cbvprintf_package+0x20c>
    1894:	f04f 0e01 	mov.w	lr, #1
    1898:	fa0e fc0c 	lsl.w	ip, lr, ip
    189c:	f01c 0f25 	tst.w	ip, #37	; 0x25
    18a0:	d12f      	bne.n	1902 <cbvprintf_package+0x25a>
    18a2:	f240 4e82 	movw	lr, #1154	; 0x482
    18a6:	ea1c 0f0e 	tst.w	ip, lr
    18aa:	d105      	bne.n	18b8 <cbvprintf_package+0x210>
    18ac:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    18b0:	f47f af43 	bne.w	173a <cbvprintf_package+0x92>
			parsing = false;
    18b4:	2100      	movs	r1, #0
    18b6:	e756      	b.n	1766 <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    18b8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    18bc:	296c      	cmp	r1, #108	; 0x6c
    18be:	d124      	bne.n	190a <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    18c0:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    18c4:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    18c6:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    18ca:	d11b      	bne.n	1904 <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    18cc:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    18d0:	46cb      	mov	fp, r9
    18d2:	e7be      	b.n	1852 <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    18d4:	f108 0807 	add.w	r8, r8, #7
    18d8:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    18dc:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    18de:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    18e2:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    18e6:	b13d      	cbz	r5, 18f8 <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    18e8:	f8dd e014 	ldr.w	lr, [sp, #20]
    18ec:	44a6      	add	lr, r4
    18ee:	45b6      	cmp	lr, r6
    18f0:	f63f aef1 	bhi.w	16d6 <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    18f4:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    18f8:	3408      	adds	r4, #8
			parsing = false;
    18fa:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    18fc:	f04f 0908 	mov.w	r9, #8
    1900:	e71d      	b.n	173e <cbvprintf_package+0x96>
			parsing = false;
    1902:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    1904:	f04f 0904 	mov.w	r9, #4
    1908:	e7e2      	b.n	18d0 <cbvprintf_package+0x228>
			parsing = false;
    190a:	2100      	movs	r1, #0
    190c:	e7a1      	b.n	1852 <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    190e:	f1bb 0f08 	cmp.w	fp, #8
    1912:	f040 8096 	bne.w	1a42 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1916:	f108 0807 	add.w	r8, r8, #7
    191a:	f028 0807 	bic.w	r8, r8, #7
    191e:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    1922:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1926:	3408      	adds	r4, #8
    1928:	f04f 0b08 	mov.w	fp, #8
    192c:	e71b      	b.n	1766 <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    192e:	2873      	cmp	r0, #115	; 0x73
    1930:	d00f      	beq.n	1952 <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1932:	f1bb 0f04 	cmp.w	fp, #4
    1936:	d102      	bne.n	193e <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    1938:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    193c:	e79f      	b.n	187e <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    193e:	f1bb 0f08 	cmp.w	fp, #8
    1942:	d17e      	bne.n	1a42 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1944:	f108 0807 	add.w	r8, r8, #7
    1948:	f028 0807 	bic.w	r8, r8, #7
    194c:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1950:	e7e9      	b.n	1926 <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1952:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    1954:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1958:	3801      	subs	r0, #1
    195a:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    195c:	e6cf      	b.n	16fe <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    195e:	9802      	ldr	r0, [sp, #8]
    1960:	0780      	lsls	r0, r0, #30
    1962:	d546      	bpl.n	19f2 <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1964:	eba4 0e05 	sub.w	lr, r4, r5
    1968:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    196c:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1970:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1974:	d31f      	bcc.n	19b6 <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    1976:	4923      	ldr	r1, [pc, #140]	; (1a04 <cbvprintf_package+0x35c>)
    1978:	4a23      	ldr	r2, [pc, #140]	; (1a08 <cbvprintf_package+0x360>)
    197a:	4824      	ldr	r0, [pc, #144]	; (1a0c <cbvprintf_package+0x364>)
    197c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1980:	f008 fd87 	bl	a492 <assert_print>
    1984:	4823      	ldr	r0, [pc, #140]	; (1a14 <cbvprintf_package+0x36c>)
    1986:	f008 fd84 	bl	a492 <assert_print>
    198a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    198e:	481e      	ldr	r0, [pc, #120]	; (1a08 <cbvprintf_package+0x360>)
    1990:	f008 fd78 	bl	a484 <assert_post_action>
					return -EINVAL;
    1994:	f06f 0015 	mvn.w	r0, #21
    1998:	e69f      	b.n	16da <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    199a:	2a0f      	cmp	r2, #15
    199c:	d80d      	bhi.n	19ba <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    199e:	2d00      	cmp	r5, #0
    19a0:	d03f      	beq.n	1a22 <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    19a2:	b2c0      	uxtb	r0, r0
    19a4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    19a8:	44ec      	add	ip, sp
    19aa:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    19ae:	9803      	ldr	r0, [sp, #12]
    19b0:	3001      	adds	r0, #1
    19b2:	9003      	str	r0, [sp, #12]
    19b4:	e01c      	b.n	19f0 <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    19b6:	2a0f      	cmp	r2, #15
    19b8:	d90c      	bls.n	19d4 <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    19ba:	4912      	ldr	r1, [pc, #72]	; (1a04 <cbvprintf_package+0x35c>)
    19bc:	4a12      	ldr	r2, [pc, #72]	; (1a08 <cbvprintf_package+0x360>)
    19be:	4813      	ldr	r0, [pc, #76]	; (1a0c <cbvprintf_package+0x364>)
    19c0:	f240 13f5 	movw	r3, #501	; 0x1f5
    19c4:	f008 fd65 	bl	a492 <assert_print>
    19c8:	4813      	ldr	r0, [pc, #76]	; (1a18 <cbvprintf_package+0x370>)
    19ca:	f008 fd62 	bl	a492 <assert_print>
    19ce:	f240 11f5 	movw	r1, #501	; 0x1f5
    19d2:	e7dc      	b.n	198e <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    19d4:	b315      	cbz	r5, 1a1c <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    19d6:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    19d8:	f1bc 0f00 	cmp.w	ip, #0
    19dc:	d0e2      	beq.n	19a4 <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    19de:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    19e2:	44ec      	add	ip, sp
    19e4:	f060 007f 	orn	r0, r0, #127	; 0x7f
    19e8:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    19ec:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    19f0:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    19f2:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    19f6:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    19f8:	9005      	str	r0, [sp, #20]
    19fa:	e6b4      	b.n	1766 <cbvprintf_package+0xbe>
    19fc:	0000b204 	.word	0x0000b204
    1a00:	0000d4ac 	.word	0x0000d4ac
    1a04:	0000d2b1 	.word	0x0000d2b1
    1a08:	0000b994 	.word	0x0000b994
    1a0c:	0000b9c2 	.word	0x0000b9c2
    1a10:	0000ba2f 	.word	0x0000ba2f
    1a14:	0000b9df 	.word	0x0000b9df
    1a18:	0000ba00 	.word	0x0000ba00
				} else if (is_ro || rws_pos_en) {
    1a1c:	f1bc 0f00 	cmp.w	ip, #0
    1a20:	d101      	bne.n	1a26 <cbvprintf_package+0x37e>
    1a22:	9801      	ldr	r0, [sp, #4]
    1a24:	b108      	cbz	r0, 1a2a <cbvprintf_package+0x382>
					len += 1;
    1a26:	3601      	adds	r6, #1
    1a28:	e7e2      	b.n	19f0 <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1a2a:	4638      	mov	r0, r7
    1a2c:	e9cd 2106 	strd	r2, r1, [sp, #24]
    1a30:	9305      	str	r3, [sp, #20]
    1a32:	f7ff f97f 	bl	d34 <strlen>
    1a36:	3602      	adds	r6, #2
    1a38:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    1a3c:	9b05      	ldr	r3, [sp, #20]
    1a3e:	4406      	add	r6, r0
    1a40:	e7d6      	b.n	19f0 <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    1a42:	4a38      	ldr	r2, [pc, #224]	; (1b24 <cbvprintf_package+0x47c>)
    1a44:	4938      	ldr	r1, [pc, #224]	; (1b28 <cbvprintf_package+0x480>)
    1a46:	4839      	ldr	r0, [pc, #228]	; (1b2c <cbvprintf_package+0x484>)
    1a48:	f240 2331 	movw	r3, #561	; 0x231
    1a4c:	f008 fd21 	bl	a492 <assert_print>
    1a50:	4659      	mov	r1, fp
    1a52:	4837      	ldr	r0, [pc, #220]	; (1b30 <cbvprintf_package+0x488>)
    1a54:	f008 fd1d 	bl	a492 <assert_print>
    1a58:	f240 2131 	movw	r1, #561	; 0x231
    1a5c:	e797      	b.n	198e <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    1a5e:	b91d      	cbnz	r5, 1a68 <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1a60:	f1a6 0408 	sub.w	r4, r6, #8
    1a64:	1860      	adds	r0, r4, r1
    1a66:	e638      	b.n	16da <cbvprintf_package+0x32>
	if (rws_pos_en) {
    1a68:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1a6a:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    1a6e:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    1a72:	b90b      	cbnz	r3, 1a78 <cbvprintf_package+0x3d0>
    1a74:	4608      	mov	r0, r1
    1a76:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    1a78:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    1a7c:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    1a7e:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    1a80:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1a84:	f1ba 0f00 	cmp.w	sl, #0
    1a88:	d006      	beq.n	1a98 <cbvprintf_package+0x3f0>
    1a8a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1a8c:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    1a90:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1a94:	4562      	cmp	r2, ip
    1a96:	d109      	bne.n	1aac <cbvprintf_package+0x404>
    1a98:	f10d 0820 	add.w	r8, sp, #32
    1a9c:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    1aa0:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    1aa4:	45c1      	cmp	r9, r8
    1aa6:	d111      	bne.n	1acc <cbvprintf_package+0x424>
	return BUF_OFFSET;
    1aa8:	1b60      	subs	r0, r4, r5
    1aaa:	e616      	b.n	16da <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1aac:	f810 1b01 	ldrb.w	r1, [r0], #1
    1ab0:	060b      	lsls	r3, r1, #24
    1ab2:	d508      	bpl.n	1ac6 <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    1ab4:	eb04 080e 	add.w	r8, r4, lr
    1ab8:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1aba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1abe:	f4ff ae0a 	bcc.w	16d6 <cbvprintf_package+0x2e>
			*buf++ = pos;
    1ac2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1ac6:	f10c 0c01 	add.w	ip, ip, #1
    1aca:	e7e3      	b.n	1a94 <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1acc:	f1ba 0f00 	cmp.w	sl, #0
    1ad0:	d003      	beq.n	1ada <cbvprintf_package+0x432>
    1ad2:	f998 2000 	ldrsb.w	r2, [r8]
    1ad6:	2a00      	cmp	r2, #0
    1ad8:	db1c      	blt.n	1b14 <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    1ada:	9b01      	ldr	r3, [sp, #4]
    1adc:	b9eb      	cbnz	r3, 1b1a <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1ade:	f898 2000 	ldrb.w	r2, [r8]
    1ae2:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1ae6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1aea:	4638      	mov	r0, r7
    1aec:	f7ff f922 	bl	d34 <strlen>
    1af0:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1af2:	eb04 010b 	add.w	r1, r4, fp
    1af6:	4411      	add	r1, r2
    1af8:	428e      	cmp	r6, r1
    1afa:	f4ff adec 	bcc.w	16d6 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1afe:	f898 1000 	ldrb.w	r1, [r8]
    1b02:	f804 1b01 	strb.w	r1, [r4], #1
    1b06:	4639      	mov	r1, r7
    1b08:	4620      	mov	r0, r4
    1b0a:	9202      	str	r2, [sp, #8]
    1b0c:	f009 fb36 	bl	b17c <memcpy>
		buf += size;
    1b10:	9a02      	ldr	r2, [sp, #8]
    1b12:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1b14:	f108 0801 	add.w	r8, r8, #1
    1b18:	e7c4      	b.n	1aa4 <cbvprintf_package+0x3fc>
			size = 0;
    1b1a:	2200      	movs	r2, #0
    1b1c:	e7e9      	b.n	1af2 <cbvprintf_package+0x44a>
		return -EFAULT;
    1b1e:	f06f 000d 	mvn.w	r0, #13
    1b22:	e5da      	b.n	16da <cbvprintf_package+0x32>
    1b24:	0000b994 	.word	0x0000b994
    1b28:	0000d2b1 	.word	0x0000d2b1
    1b2c:	0000b9c2 	.word	0x0000b9c2
    1b30:	0000ba1a 	.word	0x0000ba1a

00001b34 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1b34:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1b36:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1b3a:	2b03      	cmp	r3, #3
{
    1b3c:	b510      	push	{r4, lr}
    1b3e:	4604      	mov	r4, r0
	notify->result = res;
    1b40:	6081      	str	r1, [r0, #8]
	switch (method) {
    1b42:	d002      	beq.n	1b4a <sys_notify_finalize+0x16>
    1b44:	b12b      	cbz	r3, 1b52 <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    1b46:	2000      	movs	r0, #0
    1b48:	e000      	b.n	1b4c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1b4a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1b4c:	2300      	movs	r3, #0
    1b4e:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1b50:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    1b52:	4a05      	ldr	r2, [pc, #20]	; (1b68 <sys_notify_finalize+0x34>)
    1b54:	4905      	ldr	r1, [pc, #20]	; (1b6c <sys_notify_finalize+0x38>)
    1b56:	4806      	ldr	r0, [pc, #24]	; (1b70 <sys_notify_finalize+0x3c>)
    1b58:	2345      	movs	r3, #69	; 0x45
    1b5a:	f008 fc9a 	bl	a492 <assert_print>
    1b5e:	4802      	ldr	r0, [pc, #8]	; (1b68 <sys_notify_finalize+0x34>)
    1b60:	2145      	movs	r1, #69	; 0x45
    1b62:	f008 fc8f 	bl	a484 <assert_post_action>
    1b66:	e7ee      	b.n	1b46 <sys_notify_finalize+0x12>
    1b68:	0000ba46 	.word	0x0000ba46
    1b6c:	0000d2b1 	.word	0x0000d2b1
    1b70:	0000b9c2 	.word	0x0000b9c2

00001b74 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1b74:	4b01      	ldr	r3, [pc, #4]	; (1b7c <__printk_hook_install+0x8>)
    1b76:	6018      	str	r0, [r3, #0]
}
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop
    1b7c:	20000000 	.word	0x20000000

00001b80 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b84:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1b86:	072b      	lsls	r3, r5, #28
{
    1b88:	4604      	mov	r4, r0
    1b8a:	4691      	mov	r9, r2
	if (processing) {
    1b8c:	d469      	bmi.n	1c62 <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1b8e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b90:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1b94:	f000 81ee 	beq.w	1f74 <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    1b98:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    1b9a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b9e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1ba0:	f1b8 0f00 	cmp.w	r8, #0
    1ba4:	da7d      	bge.n	1ca2 <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1ba6:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1ba8:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1baa:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1bae:	e9c4 2200 	strd	r2, r2, [r4]
    1bb2:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1bb6:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1bb8:	8ba3      	ldrh	r3, [r4, #28]
    1bba:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1bbe:	4555      	cmp	r5, sl
    1bc0:	f04f 0700 	mov.w	r7, #0
    1bc4:	f040 81a5 	bne.w	1f12 <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1bc8:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    1bcc:	2e00      	cmp	r6, #0
    1bce:	f000 80f2 	beq.w	1db6 <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1bd2:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    1bd6:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    1bda:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1bdc:	4658      	mov	r0, fp
    1bde:	f005 fed5 	bl	798c <z_spin_unlock_valid>
    1be2:	b968      	cbnz	r0, 1c00 <process_event+0x80>
    1be4:	4a93      	ldr	r2, [pc, #588]	; (1e34 <process_event+0x2b4>)
    1be6:	4994      	ldr	r1, [pc, #592]	; (1e38 <process_event+0x2b8>)
    1be8:	4894      	ldr	r0, [pc, #592]	; (1e3c <process_event+0x2bc>)
    1bea:	23b9      	movs	r3, #185	; 0xb9
    1bec:	f008 fc51 	bl	a492 <assert_print>
    1bf0:	4893      	ldr	r0, [pc, #588]	; (1e40 <process_event+0x2c0>)
    1bf2:	4659      	mov	r1, fp
    1bf4:	f008 fc4d 	bl	a492 <assert_print>
    1bf8:	488e      	ldr	r0, [pc, #568]	; (1e34 <process_event+0x2b4>)
    1bfa:	21b9      	movs	r1, #185	; 0xb9
    1bfc:	f008 fc42 	bl	a484 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1c00:	f389 8811 	msr	BASEPRI, r9
    1c04:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    1c08:	f1ba 0f00 	cmp.w	sl, #0
    1c0c:	f040 8188 	bne.w	1f20 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    1c10:	2e00      	cmp	r6, #0
    1c12:	f040 819e 	bne.w	1f52 <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    1c16:	b117      	cbz	r7, 1c1e <process_event+0x9e>
				transit(mgr, transition_complete);
    1c18:	498a      	ldr	r1, [pc, #552]	; (1e44 <process_event+0x2c4>)
    1c1a:	4620      	mov	r0, r4
    1c1c:	47b8      	blx	r7
	__asm__ volatile(
    1c1e:	f04f 0320 	mov.w	r3, #32
    1c22:	f3ef 8911 	mrs	r9, BASEPRI
    1c26:	f383 8812 	msr	BASEPRI_MAX, r3
    1c2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1c2e:	4658      	mov	r0, fp
    1c30:	f005 fe9e 	bl	7970 <z_spin_lock_valid>
    1c34:	b968      	cbnz	r0, 1c52 <process_event+0xd2>
    1c36:	4a7f      	ldr	r2, [pc, #508]	; (1e34 <process_event+0x2b4>)
    1c38:	4983      	ldr	r1, [pc, #524]	; (1e48 <process_event+0x2c8>)
    1c3a:	4880      	ldr	r0, [pc, #512]	; (1e3c <process_event+0x2bc>)
    1c3c:	238e      	movs	r3, #142	; 0x8e
    1c3e:	f008 fc28 	bl	a492 <assert_print>
    1c42:	4882      	ldr	r0, [pc, #520]	; (1e4c <process_event+0x2cc>)
    1c44:	4659      	mov	r1, fp
    1c46:	f008 fc24 	bl	a492 <assert_print>
    1c4a:	487a      	ldr	r0, [pc, #488]	; (1e34 <process_event+0x2b4>)
    1c4c:	218e      	movs	r1, #142	; 0x8e
    1c4e:	f008 fc19 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    1c52:	4658      	mov	r0, fp
    1c54:	f005 feaa 	bl	79ac <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1c58:	8ba3      	ldrh	r3, [r4, #28]
    1c5a:	f023 0308 	bic.w	r3, r3, #8
    1c5e:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    1c60:	e05a      	b.n	1d18 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    1c62:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1c64:	bf0c      	ite	eq
    1c66:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c6a:	f045 0520 	orrne.w	r5, r5, #32
    1c6e:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1c70:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1c72:	4620      	mov	r0, r4
    1c74:	f005 fe8a 	bl	798c <z_spin_unlock_valid>
    1c78:	b968      	cbnz	r0, 1c96 <process_event+0x116>
    1c7a:	4a6e      	ldr	r2, [pc, #440]	; (1e34 <process_event+0x2b4>)
    1c7c:	496e      	ldr	r1, [pc, #440]	; (1e38 <process_event+0x2b8>)
    1c7e:	486f      	ldr	r0, [pc, #444]	; (1e3c <process_event+0x2bc>)
    1c80:	23b9      	movs	r3, #185	; 0xb9
    1c82:	f008 fc06 	bl	a492 <assert_print>
    1c86:	486e      	ldr	r0, [pc, #440]	; (1e40 <process_event+0x2c0>)
    1c88:	4621      	mov	r1, r4
    1c8a:	f008 fc02 	bl	a492 <assert_print>
    1c8e:	4869      	ldr	r0, [pc, #420]	; (1e34 <process_event+0x2b4>)
    1c90:	21b9      	movs	r1, #185	; 0xb9
    1c92:	f008 fbf7 	bl	a484 <assert_post_action>
	__asm__ volatile(
    1c96:	f389 8811 	msr	BASEPRI, r9
    1c9a:	f3bf 8f6f 	isb	sy
}
    1c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ca2:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1ca6:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1ca8:	2901      	cmp	r1, #1
    1caa:	d820      	bhi.n	1cee <process_event+0x16e>
	list->head = NULL;
    1cac:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    1cae:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1cb0:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    1cb2:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1cb6:	d116      	bne.n	1ce6 <process_event+0x166>
		*clients = mgr->clients;
    1cb8:	4632      	mov	r2, r6
    1cba:	e003      	b.n	1cc4 <process_event+0x144>
				mgr->refs += 1U;
    1cbc:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1cbe:	6812      	ldr	r2, [r2, #0]
    1cc0:	3101      	adds	r1, #1
    1cc2:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1cc4:	2a00      	cmp	r2, #0
    1cc6:	d1f9      	bne.n	1cbc <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cc8:	f023 0307 	bic.w	r3, r3, #7
    1ccc:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cd0:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1cd2:	4620      	mov	r0, r4
    1cd4:	f008 fa6e 	bl	a1b4 <process_recheck>
    1cd8:	2800      	cmp	r0, #0
    1cda:	f43f af6d 	beq.w	1bb8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1cde:	f042 0220 	orr.w	r2, r2, #32
    1ce2:	83a2      	strh	r2, [r4, #28]
    1ce4:	e768      	b.n	1bb8 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ce6:	f023 0307 	bic.w	r3, r3, #7
    1cea:	b29a      	uxth	r2, r3
}
    1cec:	e7f0      	b.n	1cd0 <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1cee:	2a04      	cmp	r2, #4
    1cf0:	d11e      	bne.n	1d30 <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cf2:	f023 0307 	bic.w	r3, r3, #7
    1cf6:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cf8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1cfa:	4620      	mov	r0, r4
    1cfc:	f008 fa5a 	bl	a1b4 <process_recheck>
    1d00:	b110      	cbz	r0, 1d08 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1d02:	f042 0220 	orr.w	r2, r2, #32
    1d06:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d08:	8ba3      	ldrh	r3, [r4, #28]
    1d0a:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    1d0e:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    1d10:	4555      	cmp	r5, sl
    1d12:	463e      	mov	r6, r7
    1d14:	f040 80fd 	bne.w	1f12 <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1d18:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    1d1c:	f01a 0f10 	tst.w	sl, #16
    1d20:	f000 811f 	beq.w	1f62 <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d24:	f02a 0310 	bic.w	r3, sl, #16
    1d28:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1d2a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    1d2e:	e734      	b.n	1b9a <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    1d30:	4a47      	ldr	r2, [pc, #284]	; (1e50 <process_event+0x2d0>)
    1d32:	4948      	ldr	r1, [pc, #288]	; (1e54 <process_event+0x2d4>)
    1d34:	4841      	ldr	r0, [pc, #260]	; (1e3c <process_event+0x2bc>)
    1d36:	f240 131b 	movw	r3, #283	; 0x11b
    1d3a:	f008 fbaa 	bl	a492 <assert_print>
    1d3e:	4844      	ldr	r0, [pc, #272]	; (1e50 <process_event+0x2d0>)
    1d40:	f240 111b 	movw	r1, #283	; 0x11b
    1d44:	f008 fb9e 	bl	a484 <assert_post_action>
    1d48:	e7de      	b.n	1d08 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1d4a:	b15d      	cbz	r5, 1d64 <process_event+0x1e4>
    1d4c:	4942      	ldr	r1, [pc, #264]	; (1e58 <process_event+0x2d8>)
    1d4e:	483b      	ldr	r0, [pc, #236]	; (1e3c <process_event+0x2bc>)
    1d50:	4a3f      	ldr	r2, [pc, #252]	; (1e50 <process_event+0x2d0>)
    1d52:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1d56:	f008 fb9c 	bl	a492 <assert_print>
    1d5a:	483d      	ldr	r0, [pc, #244]	; (1e50 <process_event+0x2d0>)
    1d5c:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1d60:	f008 fb90 	bl	a484 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1d64:	6823      	ldr	r3, [r4, #0]
    1d66:	b95b      	cbnz	r3, 1d80 <process_event+0x200>
    1d68:	493c      	ldr	r1, [pc, #240]	; (1e5c <process_event+0x2dc>)
    1d6a:	4834      	ldr	r0, [pc, #208]	; (1e3c <process_event+0x2bc>)
    1d6c:	4a38      	ldr	r2, [pc, #224]	; (1e50 <process_event+0x2d0>)
    1d6e:	f240 1357 	movw	r3, #343	; 0x157
    1d72:	f008 fb8e 	bl	a492 <assert_print>
    1d76:	4836      	ldr	r0, [pc, #216]	; (1e50 <process_event+0x2d0>)
    1d78:	f240 1157 	movw	r1, #343	; 0x157
    1d7c:	f008 fb82 	bl	a484 <assert_post_action>
			transit = mgr->transitions->start;
    1d80:	6923      	ldr	r3, [r4, #16]
    1d82:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1d84:	b95f      	cbnz	r7, 1d9e <process_event+0x21e>
    1d86:	4936      	ldr	r1, [pc, #216]	; (1e60 <process_event+0x2e0>)
    1d88:	482c      	ldr	r0, [pc, #176]	; (1e3c <process_event+0x2bc>)
    1d8a:	4a31      	ldr	r2, [pc, #196]	; (1e50 <process_event+0x2d0>)
    1d8c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1d90:	f008 fb7f 	bl	a492 <assert_print>
    1d94:	482e      	ldr	r0, [pc, #184]	; (1e50 <process_event+0x2d0>)
    1d96:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1d9a:	f008 fb73 	bl	a484 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d9e:	8ba3      	ldrh	r3, [r4, #28]
    1da0:	f023 0307 	bic.w	r3, r3, #7
    1da4:	f043 0306 	orr.w	r3, r3, #6
    1da8:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1daa:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1dac:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1dae:	f040 80ad 	bne.w	1f0c <process_event+0x38c>
		res = 0;
    1db2:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1db6:	f04f 0a00 	mov.w	sl, #0
    1dba:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    1dbc:	2f00      	cmp	r7, #0
    1dbe:	f47f af08 	bne.w	1bd2 <process_event+0x52>
    1dc2:	e7a9      	b.n	1d18 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1dc4:	2d02      	cmp	r5, #2
    1dc6:	d00b      	beq.n	1de0 <process_event+0x260>
    1dc8:	4926      	ldr	r1, [pc, #152]	; (1e64 <process_event+0x2e4>)
    1dca:	481c      	ldr	r0, [pc, #112]	; (1e3c <process_event+0x2bc>)
    1dcc:	4a20      	ldr	r2, [pc, #128]	; (1e50 <process_event+0x2d0>)
    1dce:	f240 135d 	movw	r3, #349	; 0x15d
    1dd2:	f008 fb5e 	bl	a492 <assert_print>
    1dd6:	481e      	ldr	r0, [pc, #120]	; (1e50 <process_event+0x2d0>)
    1dd8:	f240 115d 	movw	r1, #349	; 0x15d
    1ddc:	f008 fb52 	bl	a484 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1de0:	8be3      	ldrh	r3, [r4, #30]
    1de2:	b15b      	cbz	r3, 1dfc <process_event+0x27c>
    1de4:	4920      	ldr	r1, [pc, #128]	; (1e68 <process_event+0x2e8>)
    1de6:	4815      	ldr	r0, [pc, #84]	; (1e3c <process_event+0x2bc>)
    1de8:	4a19      	ldr	r2, [pc, #100]	; (1e50 <process_event+0x2d0>)
    1dea:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1dee:	f008 fb50 	bl	a492 <assert_print>
    1df2:	4817      	ldr	r0, [pc, #92]	; (1e50 <process_event+0x2d0>)
    1df4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1df8:	f008 fb44 	bl	a484 <assert_post_action>
			transit = mgr->transitions->stop;
    1dfc:	6923      	ldr	r3, [r4, #16]
    1dfe:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1e00:	b95f      	cbnz	r7, 1e1a <process_event+0x29a>
    1e02:	4917      	ldr	r1, [pc, #92]	; (1e60 <process_event+0x2e0>)
    1e04:	480d      	ldr	r0, [pc, #52]	; (1e3c <process_event+0x2bc>)
    1e06:	4a12      	ldr	r2, [pc, #72]	; (1e50 <process_event+0x2d0>)
    1e08:	f240 1361 	movw	r3, #353	; 0x161
    1e0c:	f008 fb41 	bl	a492 <assert_print>
    1e10:	480f      	ldr	r0, [pc, #60]	; (1e50 <process_event+0x2d0>)
    1e12:	f240 1161 	movw	r1, #353	; 0x161
    1e16:	f008 fb35 	bl	a484 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e1a:	8ba3      	ldrh	r3, [r4, #28]
    1e1c:	f023 0307 	bic.w	r3, r3, #7
    1e20:	f043 0304 	orr.w	r3, r3, #4
    1e24:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1e26:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e28:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1e2a:	d0c2      	beq.n	1db2 <process_event+0x232>
    1e2c:	2600      	movs	r6, #0
		res = 0;
    1e2e:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e30:	2504      	movs	r5, #4
    1e32:	e06e      	b.n	1f12 <process_event+0x392>
    1e34:	0000bb0c 	.word	0x0000bb0c
    1e38:	0000bb39 	.word	0x0000bb39
    1e3c:	0000b9c2 	.word	0x0000b9c2
    1e40:	0000bb50 	.word	0x0000bb50
    1e44:	00001fb9 	.word	0x00001fb9
    1e48:	0000bb65 	.word	0x0000bb65
    1e4c:	0000bb7a 	.word	0x0000bb7a
    1e50:	0000ba69 	.word	0x0000ba69
    1e54:	0000d2b1 	.word	0x0000d2b1
    1e58:	0000ba8b 	.word	0x0000ba8b
    1e5c:	0000ba97 	.word	0x0000ba97
    1e60:	0000baba 	.word	0x0000baba
    1e64:	0000bad1 	.word	0x0000bad1
    1e68:	0000bae7 	.word	0x0000bae7
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1e6c:	2d01      	cmp	r5, #1
    1e6e:	d00b      	beq.n	1e88 <process_event+0x308>
    1e70:	494b      	ldr	r1, [pc, #300]	; (1fa0 <process_event+0x420>)
    1e72:	484c      	ldr	r0, [pc, #304]	; (1fa4 <process_event+0x424>)
    1e74:	4a4c      	ldr	r2, [pc, #304]	; (1fa8 <process_event+0x428>)
    1e76:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1e7a:	f008 fb0a 	bl	a492 <assert_print>
    1e7e:	484a      	ldr	r0, [pc, #296]	; (1fa8 <process_event+0x428>)
    1e80:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1e84:	f008 fafe 	bl	a484 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1e88:	6823      	ldr	r3, [r4, #0]
    1e8a:	b95b      	cbnz	r3, 1ea4 <process_event+0x324>
    1e8c:	4947      	ldr	r1, [pc, #284]	; (1fac <process_event+0x42c>)
    1e8e:	4845      	ldr	r0, [pc, #276]	; (1fa4 <process_event+0x424>)
    1e90:	4a45      	ldr	r2, [pc, #276]	; (1fa8 <process_event+0x428>)
    1e92:	f240 1365 	movw	r3, #357	; 0x165
    1e96:	f008 fafc 	bl	a492 <assert_print>
    1e9a:	4843      	ldr	r0, [pc, #268]	; (1fa8 <process_event+0x428>)
    1e9c:	f240 1165 	movw	r1, #357	; 0x165
    1ea0:	f008 faf0 	bl	a484 <assert_post_action>
			transit = mgr->transitions->reset;
    1ea4:	6923      	ldr	r3, [r4, #16]
    1ea6:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1ea8:	b95f      	cbnz	r7, 1ec2 <process_event+0x342>
    1eaa:	4941      	ldr	r1, [pc, #260]	; (1fb0 <process_event+0x430>)
    1eac:	483d      	ldr	r0, [pc, #244]	; (1fa4 <process_event+0x424>)
    1eae:	4a3e      	ldr	r2, [pc, #248]	; (1fa8 <process_event+0x428>)
    1eb0:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1eb4:	f008 faed 	bl	a492 <assert_print>
    1eb8:	483b      	ldr	r0, [pc, #236]	; (1fa8 <process_event+0x428>)
    1eba:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1ebe:	f008 fae1 	bl	a484 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ec2:	8ba3      	ldrh	r3, [r4, #28]
    1ec4:	f023 0307 	bic.w	r3, r3, #7
    1ec8:	f043 0305 	orr.w	r3, r3, #5
    1ecc:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1ece:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ed0:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1ed2:	f43f af6e 	beq.w	1db2 <process_event+0x232>
    1ed6:	2600      	movs	r6, #0
		res = 0;
    1ed8:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1eda:	2505      	movs	r5, #5
    1edc:	e019      	b.n	1f12 <process_event+0x392>
			__ASSERT_NO_MSG(false);
    1ede:	4a32      	ldr	r2, [pc, #200]	; (1fa8 <process_event+0x428>)
    1ee0:	4934      	ldr	r1, [pc, #208]	; (1fb4 <process_event+0x434>)
    1ee2:	4830      	ldr	r0, [pc, #192]	; (1fa4 <process_event+0x424>)
    1ee4:	f240 136b 	movw	r3, #363	; 0x16b
    1ee8:	f008 fad3 	bl	a492 <assert_print>
    1eec:	482e      	ldr	r0, [pc, #184]	; (1fa8 <process_event+0x428>)
    1eee:	f240 116b 	movw	r1, #363	; 0x16b
    1ef2:	f008 fac7 	bl	a484 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ef6:	8ba3      	ldrh	r3, [r4, #28]
    1ef8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1efc:	42aa      	cmp	r2, r5
    1efe:	f43f af0b 	beq.w	1d18 <process_event+0x198>
    1f02:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f04:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    1f06:	4637      	mov	r7, r6
		res = 0;
    1f08:	46b0      	mov	r8, r6
    1f0a:	e002      	b.n	1f12 <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    1f0c:	2600      	movs	r6, #0
		res = 0;
    1f0e:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f10:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1f12:	68a2      	ldr	r2, [r4, #8]
    1f14:	2a00      	cmp	r2, #0
    1f16:	f43f ae57 	beq.w	1bc8 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1f1a:	f04f 0a01 	mov.w	sl, #1
    1f1e:	e658      	b.n	1bd2 <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1f20:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f22:	2900      	cmp	r1, #0
    1f24:	f43f ae74 	beq.w	1c10 <process_event+0x90>
	return node->next;
    1f28:	f8d1 9000 	ldr.w	r9, [r1]
    1f2c:	2900      	cmp	r1, #0
    1f2e:	f43f ae6f 	beq.w	1c10 <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    1f32:	f8d1 a004 	ldr.w	sl, [r1, #4]
    1f36:	4643      	mov	r3, r8
    1f38:	462a      	mov	r2, r5
    1f3a:	4620      	mov	r0, r4
    1f3c:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f3e:	f1b9 0f00 	cmp.w	r9, #0
    1f42:	d004      	beq.n	1f4e <process_event+0x3ce>
    1f44:	f8d9 3000 	ldr.w	r3, [r9]
    1f48:	4649      	mov	r1, r9
    1f4a:	4699      	mov	r9, r3
    1f4c:	e7ee      	b.n	1f2c <process_event+0x3ac>
    1f4e:	464b      	mov	r3, r9
    1f50:	e7fa      	b.n	1f48 <process_event+0x3c8>
    1f52:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    1f54:	4643      	mov	r3, r8
    1f56:	462a      	mov	r2, r5
    1f58:	4620      	mov	r0, r4
    1f5a:	6836      	ldr	r6, [r6, #0]
    1f5c:	f008 f956 	bl	a20c <notify_one>
    1f60:	e656      	b.n	1c10 <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1f62:	f01a 0f20 	tst.w	sl, #32
    1f66:	f43f ae83 	beq.w	1c70 <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1f6a:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1f6e:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1f70:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    1f74:	4620      	mov	r0, r4
    1f76:	f008 f91d 	bl	a1b4 <process_recheck>
		if (evt == EVT_NOP) {
    1f7a:	2800      	cmp	r0, #0
    1f7c:	f43f ae78 	beq.w	1c70 <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    1f80:	3801      	subs	r0, #1
    1f82:	2804      	cmp	r0, #4
    1f84:	d8ab      	bhi.n	1ede <process_event+0x35e>
    1f86:	a301      	add	r3, pc, #4	; (adr r3, 1f8c <process_event+0x40c>)
    1f88:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1f8c:	00001b99 	.word	0x00001b99
    1f90:	00001edf 	.word	0x00001edf
    1f94:	00001d4b 	.word	0x00001d4b
    1f98:	00001dc5 	.word	0x00001dc5
    1f9c:	00001e6d 	.word	0x00001e6d
    1fa0:	0000baf6 	.word	0x0000baf6
    1fa4:	0000b9c2 	.word	0x0000b9c2
    1fa8:	0000ba69 	.word	0x0000ba69
    1fac:	0000ba97 	.word	0x0000ba97
    1fb0:	0000baba 	.word	0x0000baba
    1fb4:	0000d2b1 	.word	0x0000d2b1

00001fb8 <transition_complete>:
{
    1fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fba:	4604      	mov	r4, r0
    1fbc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1fbe:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    1fc2:	f04f 0320 	mov.w	r3, #32
    1fc6:	f3ef 8711 	mrs	r7, BASEPRI
    1fca:	f383 8812 	msr	BASEPRI_MAX, r3
    1fce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1fd2:	4630      	mov	r0, r6
    1fd4:	f005 fccc 	bl	7970 <z_spin_lock_valid>
    1fd8:	b968      	cbnz	r0, 1ff6 <transition_complete+0x3e>
    1fda:	4a0c      	ldr	r2, [pc, #48]	; (200c <transition_complete+0x54>)
    1fdc:	490c      	ldr	r1, [pc, #48]	; (2010 <transition_complete+0x58>)
    1fde:	480d      	ldr	r0, [pc, #52]	; (2014 <transition_complete+0x5c>)
    1fe0:	238e      	movs	r3, #142	; 0x8e
    1fe2:	f008 fa56 	bl	a492 <assert_print>
    1fe6:	480c      	ldr	r0, [pc, #48]	; (2018 <transition_complete+0x60>)
    1fe8:	4631      	mov	r1, r6
    1fea:	f008 fa52 	bl	a492 <assert_print>
    1fee:	4807      	ldr	r0, [pc, #28]	; (200c <transition_complete+0x54>)
    1ff0:	218e      	movs	r1, #142	; 0x8e
    1ff2:	f008 fa47 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    1ff6:	4630      	mov	r0, r6
    1ff8:	f005 fcd8 	bl	79ac <z_spin_lock_set_owner>
	mgr->last_res = res;
    1ffc:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1ffe:	463a      	mov	r2, r7
    2000:	4620      	mov	r0, r4
    2002:	2101      	movs	r1, #1
}
    2004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    2008:	f7ff bdba 	b.w	1b80 <process_event>
    200c:	0000bb0c 	.word	0x0000bb0c
    2010:	0000bb65 	.word	0x0000bb65
    2014:	0000b9c2 	.word	0x0000b9c2
    2018:	0000bb7a 	.word	0x0000bb7a

0000201c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    201c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2020:	4604      	mov	r4, r0
    2022:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2024:	f008 f8e2 	bl	a1ec <validate_args>

	if (rv < 0) {
    2028:	1e05      	subs	r5, r0, #0
    202a:	db78      	blt.n	211e <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    202c:	f104 0914 	add.w	r9, r4, #20
    2030:	f04f 0320 	mov.w	r3, #32
    2034:	f3ef 8a11 	mrs	sl, BASEPRI
    2038:	f383 8812 	msr	BASEPRI_MAX, r3
    203c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2040:	4648      	mov	r0, r9
    2042:	f005 fc95 	bl	7970 <z_spin_lock_valid>
    2046:	b968      	cbnz	r0, 2064 <onoff_request+0x48>
    2048:	4a39      	ldr	r2, [pc, #228]	; (2130 <onoff_request+0x114>)
    204a:	493a      	ldr	r1, [pc, #232]	; (2134 <onoff_request+0x118>)
    204c:	483a      	ldr	r0, [pc, #232]	; (2138 <onoff_request+0x11c>)
    204e:	238e      	movs	r3, #142	; 0x8e
    2050:	f008 fa1f 	bl	a492 <assert_print>
    2054:	4839      	ldr	r0, [pc, #228]	; (213c <onoff_request+0x120>)
    2056:	4649      	mov	r1, r9
    2058:	f008 fa1b 	bl	a492 <assert_print>
    205c:	4834      	ldr	r0, [pc, #208]	; (2130 <onoff_request+0x114>)
    205e:	218e      	movs	r1, #142	; 0x8e
    2060:	f008 fa10 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    2064:	4648      	mov	r0, r9
    2066:	f005 fca1 	bl	79ac <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    206a:	8be3      	ldrh	r3, [r4, #30]
    206c:	8ba6      	ldrh	r6, [r4, #28]
    206e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2072:	4293      	cmp	r3, r2
    2074:	f006 0607 	and.w	r6, r6, #7
    2078:	d054      	beq.n	2124 <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    207a:	2e02      	cmp	r6, #2
    207c:	d124      	bne.n	20c8 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    207e:	3301      	adds	r3, #1
    2080:	83e3      	strh	r3, [r4, #30]
	rv = state;
    2082:	4635      	mov	r5, r6
		notify = true;
    2084:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2088:	4648      	mov	r0, r9
    208a:	f005 fc7f 	bl	798c <z_spin_unlock_valid>
    208e:	b968      	cbnz	r0, 20ac <onoff_request+0x90>
    2090:	4a27      	ldr	r2, [pc, #156]	; (2130 <onoff_request+0x114>)
    2092:	492b      	ldr	r1, [pc, #172]	; (2140 <onoff_request+0x124>)
    2094:	4828      	ldr	r0, [pc, #160]	; (2138 <onoff_request+0x11c>)
    2096:	23b9      	movs	r3, #185	; 0xb9
    2098:	f008 f9fb 	bl	a492 <assert_print>
    209c:	4829      	ldr	r0, [pc, #164]	; (2144 <onoff_request+0x128>)
    209e:	4649      	mov	r1, r9
    20a0:	f008 f9f7 	bl	a492 <assert_print>
    20a4:	4822      	ldr	r0, [pc, #136]	; (2130 <onoff_request+0x114>)
    20a6:	21b9      	movs	r1, #185	; 0xb9
    20a8:	f008 f9ec 	bl	a484 <assert_post_action>
	__asm__ volatile(
    20ac:	f38a 8811 	msr	BASEPRI, sl
    20b0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    20b4:	f1b8 0f00 	cmp.w	r8, #0
    20b8:	d031      	beq.n	211e <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    20ba:	2300      	movs	r3, #0
    20bc:	4632      	mov	r2, r6
    20be:	4639      	mov	r1, r7
    20c0:	4620      	mov	r0, r4
    20c2:	f008 f8a3 	bl	a20c <notify_one>
    20c6:	e02a      	b.n	211e <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    20c8:	2e06      	cmp	r6, #6
    20ca:	d80e      	bhi.n	20ea <onoff_request+0xce>
    20cc:	e8df f006 	tbb	[pc, r6]
    20d0:	0d0d1904 	.word	0x0d0d1904
    20d4:	2d04      	.short	0x2d04
    20d6:	04          	.byte	0x04
    20d7:	00          	.byte	0x00
	parent->next = child;
    20d8:	2300      	movs	r3, #0
    20da:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    20dc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    20de:	b9ab      	cbnz	r3, 210c <onoff_request+0xf0>
	list->head = node;
    20e0:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    20e4:	b1ae      	cbz	r6, 2112 <onoff_request+0xf6>
	rv = state;
    20e6:	4635      	mov	r5, r6
    20e8:	e00d      	b.n	2106 <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    20ea:	4917      	ldr	r1, [pc, #92]	; (2148 <onoff_request+0x12c>)
    20ec:	4812      	ldr	r0, [pc, #72]	; (2138 <onoff_request+0x11c>)
    20ee:	4a17      	ldr	r2, [pc, #92]	; (214c <onoff_request+0x130>)
    20f0:	f240 13c9 	movw	r3, #457	; 0x1c9
    20f4:	f008 f9cd 	bl	a492 <assert_print>
    20f8:	4814      	ldr	r0, [pc, #80]	; (214c <onoff_request+0x130>)
    20fa:	f240 11c9 	movw	r1, #457	; 0x1c9
    20fe:	f008 f9c1 	bl	a484 <assert_post_action>
		rv = -EIO;
    2102:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    2106:	f04f 0800 	mov.w	r8, #0
    210a:	e7bd      	b.n	2088 <onoff_request+0x6c>
	parent->next = child;
    210c:	601f      	str	r7, [r3, #0]
	list->tail = node;
    210e:	6067      	str	r7, [r4, #4]
}
    2110:	e7e8      	b.n	20e4 <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    2112:	4652      	mov	r2, sl
    2114:	2102      	movs	r1, #2
    2116:	4620      	mov	r0, r4
    2118:	f7ff fd32 	bl	1b80 <process_event>
    211c:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    211e:	4628      	mov	r0, r5
    2120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    2124:	f06f 050a 	mvn.w	r5, #10
    2128:	e7ed      	b.n	2106 <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    212a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    212e:	e7ea      	b.n	2106 <onoff_request+0xea>
    2130:	0000bb0c 	.word	0x0000bb0c
    2134:	0000bb65 	.word	0x0000bb65
    2138:	0000b9c2 	.word	0x0000b9c2
    213c:	0000bb7a 	.word	0x0000bb7a
    2140:	0000bb39 	.word	0x0000bb39
    2144:	0000bb50 	.word	0x0000bb50
    2148:	0000baf6 	.word	0x0000baf6
    214c:	0000ba69 	.word	0x0000ba69

00002150 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    2150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2154:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    2158:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    215c:	6806      	ldr	r6, [r0, #0]
{
    215e:	460f      	mov	r7, r1
    2160:	4614      	mov	r4, r2
	if (align != rew) {
    2162:	d011      	beq.n	2188 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    2164:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    2168:	ea13 0f09 	tst.w	r3, r9
    216c:	d113      	bne.n	2196 <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
    216e:	427b      	negs	r3, r7
    2170:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
    2172:	2b04      	cmp	r3, #4
    2174:	461a      	mov	r2, r3
    2176:	464f      	mov	r7, r9
    2178:	bf28      	it	cs
    217a:	2204      	movcs	r2, #4
	rew = align & -align;
    217c:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    217e:	b9e4      	cbnz	r4, 21ba <sys_heap_aligned_alloc+0x6a>
		return NULL;
    2180:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    2182:	4628      	mov	r0, r5
    2184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    2188:	2904      	cmp	r1, #4
    218a:	d814      	bhi.n	21b6 <sys_heap_aligned_alloc+0x66>
}
    218c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    2190:	4611      	mov	r1, r2
    2192:	f008 b908 	b.w	a3a6 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    2196:	4a2c      	ldr	r2, [pc, #176]	; (2248 <sys_heap_aligned_alloc+0xf8>)
    2198:	492c      	ldr	r1, [pc, #176]	; (224c <sys_heap_aligned_alloc+0xfc>)
    219a:	482d      	ldr	r0, [pc, #180]	; (2250 <sys_heap_aligned_alloc+0x100>)
    219c:	f44f 73a0 	mov.w	r3, #320	; 0x140
    21a0:	f008 f977 	bl	a492 <assert_print>
    21a4:	482b      	ldr	r0, [pc, #172]	; (2254 <sys_heap_aligned_alloc+0x104>)
    21a6:	f008 f974 	bl	a492 <assert_print>
    21aa:	4827      	ldr	r0, [pc, #156]	; (2248 <sys_heap_aligned_alloc+0xf8>)
    21ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
    21b0:	f008 f968 	bl	a484 <assert_post_action>
    21b4:	e7db      	b.n	216e <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
    21b6:	2204      	movs	r2, #4
    21b8:	e7e1      	b.n	217e <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    21ba:	68b3      	ldr	r3, [r6, #8]
    21bc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    21c0:	d9de      	bls.n	2180 <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    21c2:	f104 010b 	add.w	r1, r4, #11
    21c6:	4439      	add	r1, r7
    21c8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    21ca:	08c9      	lsrs	r1, r1, #3
    21cc:	4630      	mov	r0, r6
    21ce:	f008 f899 	bl	a304 <alloc_chunk>
	if (c0 == 0) {
    21d2:	4680      	mov	r8, r0
    21d4:	2800      	cmp	r0, #0
    21d6:	d0d3      	beq.n	2180 <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    21d8:	f109 0504 	add.w	r5, r9, #4
    21dc:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    21e0:	1e7b      	subs	r3, r7, #1
    21e2:	4435      	add	r5, r6
    21e4:	441d      	add	r5, r3
    21e6:	427f      	negs	r7, r7
    21e8:	403d      	ands	r5, r7
    21ea:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    21ee:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    21f0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    21f2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    21f4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    21f6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    21fa:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    21fc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2200:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    2204:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    2208:	d208      	bcs.n	221c <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    220a:	4601      	mov	r1, r0
    220c:	463a      	mov	r2, r7
    220e:	4630      	mov	r0, r6
    2210:	f008 f8af 	bl	a372 <split_chunks>
		free_list_add(h, c0);
    2214:	4641      	mov	r1, r8
    2216:	4630      	mov	r0, r6
    2218:	f008 f830 	bl	a27c <free_list_add>
	return c + chunk_size(h, c);
    221c:	4639      	mov	r1, r7
    221e:	4630      	mov	r0, r6
    2220:	f008 f827 	bl	a272 <chunk_size>
    2224:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    2226:	4284      	cmp	r4, r0
    2228:	d207      	bcs.n	223a <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    222a:	4630      	mov	r0, r6
    222c:	4622      	mov	r2, r4
    222e:	f008 f8a0 	bl	a372 <split_chunks>
		free_list_add(h, c_end);
    2232:	4621      	mov	r1, r4
    2234:	4630      	mov	r0, r6
    2236:	f008 f821 	bl	a27c <free_list_add>
	void *cmem = &buf[c];
    223a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    223e:	8873      	ldrh	r3, [r6, #2]
    2240:	f043 0301 	orr.w	r3, r3, #1
    2244:	8073      	strh	r3, [r6, #2]
    2246:	e79c      	b.n	2182 <sys_heap_aligned_alloc+0x32>
    2248:	0000bb92 	.word	0x0000bb92
    224c:	0000bc5e 	.word	0x0000bc5e
    2250:	0000b9c2 	.word	0x0000b9c2
    2254:	0000bc79 	.word	0x0000bc79

00002258 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2258:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2260:	4604      	mov	r4, r0
    2262:	460e      	mov	r6, r1
    2264:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2266:	d36c      	bcc.n	2342 <sys_heap_init+0xea>
    2268:	493d      	ldr	r1, [pc, #244]	; (2360 <sys_heap_init+0x108>)
    226a:	4a3e      	ldr	r2, [pc, #248]	; (2364 <sys_heap_init+0x10c>)
    226c:	483e      	ldr	r0, [pc, #248]	; (2368 <sys_heap_init+0x110>)
    226e:	f240 13e3 	movw	r3, #483	; 0x1e3
    2272:	f008 f90e 	bl	a492 <assert_print>
    2276:	483d      	ldr	r0, [pc, #244]	; (236c <sys_heap_init+0x114>)
    2278:	f008 f90b 	bl	a492 <assert_print>
    227c:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2280:	4838      	ldr	r0, [pc, #224]	; (2364 <sys_heap_init+0x10c>)
    2282:	f008 f8ff 	bl	a484 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    2286:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2288:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    228a:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    228c:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2290:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2294:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    2296:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2298:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    229c:	d80e      	bhi.n	22bc <sys_heap_init+0x64>
    229e:	4934      	ldr	r1, [pc, #208]	; (2370 <sys_heap_init+0x118>)
    22a0:	4a30      	ldr	r2, [pc, #192]	; (2364 <sys_heap_init+0x10c>)
    22a2:	4831      	ldr	r0, [pc, #196]	; (2368 <sys_heap_init+0x110>)
    22a4:	f240 13f3 	movw	r3, #499	; 0x1f3
    22a8:	f008 f8f3 	bl	a492 <assert_print>
    22ac:	4831      	ldr	r0, [pc, #196]	; (2374 <sys_heap_init+0x11c>)
    22ae:	f008 f8f0 	bl	a492 <assert_print>
    22b2:	482c      	ldr	r0, [pc, #176]	; (2364 <sys_heap_init+0x10c>)
    22b4:	f240 11f3 	movw	r1, #499	; 0x1f3
    22b8:	f008 f8e4 	bl	a484 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    22bc:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    22be:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    22c2:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    22c6:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    22ca:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    22cc:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    22ce:	2300      	movs	r3, #0
    22d0:	08e4      	lsrs	r4, r4, #3
    22d2:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    22d4:	1c63      	adds	r3, r4, #1
    22d6:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    22d8:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    22da:	d90e      	bls.n	22fa <sys_heap_init+0xa2>
    22dc:	4926      	ldr	r1, [pc, #152]	; (2378 <sys_heap_init+0x120>)
    22de:	4a21      	ldr	r2, [pc, #132]	; (2364 <sys_heap_init+0x10c>)
    22e0:	4821      	ldr	r0, [pc, #132]	; (2368 <sys_heap_init+0x110>)
    22e2:	f44f 7301 	mov.w	r3, #516	; 0x204
    22e6:	f008 f8d4 	bl	a492 <assert_print>
    22ea:	4822      	ldr	r0, [pc, #136]	; (2374 <sys_heap_init+0x11c>)
    22ec:	f008 f8d1 	bl	a492 <assert_print>
    22f0:	481c      	ldr	r0, [pc, #112]	; (2364 <sys_heap_init+0x10c>)
    22f2:	f44f 7101 	mov.w	r1, #516	; 0x204
    22f6:	f008 f8c5 	bl	a484 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    22fa:	f105 030c 	add.w	r3, r5, #12
    22fe:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    2302:	2200      	movs	r2, #0
    2304:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    2308:	4543      	cmp	r3, r8
    230a:	d1fb      	bne.n	2304 <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    230c:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    230e:	f043 0301 	orr.w	r3, r3, #1
    2312:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    2314:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2318:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    231a:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    231c:	802a      	strh	r2, [r5, #0]
    231e:	8048      	strh	r0, [r1, #2]
    2320:	19a9      	adds	r1, r5, r6
    2322:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    2326:	804a      	strh	r2, [r1, #2]
    2328:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    232a:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    232e:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2330:	885a      	ldrh	r2, [r3, #2]
    2332:	f042 0201 	orr.w	r2, r2, #1
    2336:	4628      	mov	r0, r5
    2338:	805a      	strh	r2, [r3, #2]
}
    233a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    233e:	f007 bf9d 	b.w	a27c <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2342:	2a04      	cmp	r2, #4
    2344:	d89f      	bhi.n	2286 <sys_heap_init+0x2e>
    2346:	490d      	ldr	r1, [pc, #52]	; (237c <sys_heap_init+0x124>)
    2348:	4a06      	ldr	r2, [pc, #24]	; (2364 <sys_heap_init+0x10c>)
    234a:	4807      	ldr	r0, [pc, #28]	; (2368 <sys_heap_init+0x110>)
    234c:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2350:	f008 f89f 	bl	a492 <assert_print>
    2354:	4807      	ldr	r0, [pc, #28]	; (2374 <sys_heap_init+0x11c>)
    2356:	f008 f89c 	bl	a492 <assert_print>
    235a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    235e:	e78f      	b.n	2280 <sys_heap_init+0x28>
    2360:	0000bc96 	.word	0x0000bc96
    2364:	0000bb92 	.word	0x0000bb92
    2368:	0000b9c2 	.word	0x0000b9c2
    236c:	0000bcac 	.word	0x0000bcac
    2370:	0000bcfd 	.word	0x0000bcfd
    2374:	0000bce4 	.word	0x0000bce4
    2378:	0000bd26 	.word	0x0000bd26
    237c:	0000bcc3 	.word	0x0000bcc3

00002380 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2380:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    2382:	4e09      	ldr	r6, [pc, #36]	; (23a8 <extract_decimal+0x28>)
    2384:	6801      	ldr	r1, [r0, #0]
{
    2386:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    2388:	270a      	movs	r7, #10
	size_t val = 0;
    238a:	2000      	movs	r0, #0
    238c:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    238e:	3101      	adds	r1, #1
    2390:	781c      	ldrb	r4, [r3, #0]
    2392:	5d35      	ldrb	r5, [r6, r4]
    2394:	076d      	lsls	r5, r5, #29
    2396:	d401      	bmi.n	239c <extract_decimal+0x1c>
	}
	*str = sp;
    2398:	6013      	str	r3, [r2, #0]
	return val;
}
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    239c:	fb07 4300 	mla	r3, r7, r0, r4
    23a0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    23a4:	e7f2      	b.n	238c <extract_decimal+0xc>
    23a6:	bf00      	nop
    23a8:	0000d3a9 	.word	0x0000d3a9

000023ac <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    23ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b0:	4615      	mov	r5, r2
    23b2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    23b4:	78d3      	ldrb	r3, [r2, #3]
    23b6:	4a22      	ldr	r2, [pc, #136]	; (2440 <encode_uint+0x94>)
    23b8:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    23bc:	2b6f      	cmp	r3, #111	; 0x6f
{
    23be:	4680      	mov	r8, r0
    23c0:	460f      	mov	r7, r1
    23c2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    23c6:	d029      	beq.n	241c <encode_uint+0x70>
    23c8:	d824      	bhi.n	2414 <encode_uint+0x68>
		return 10;
    23ca:	2b58      	cmp	r3, #88	; 0x58
    23cc:	bf0c      	ite	eq
    23ce:	2610      	moveq	r6, #16
    23d0:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    23d2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    23d6:	4632      	mov	r2, r6
    23d8:	2300      	movs	r3, #0
    23da:	4640      	mov	r0, r8
    23dc:	4639      	mov	r1, r7
    23de:	f7fe faad 	bl	93c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    23e2:	2a09      	cmp	r2, #9
    23e4:	b2d4      	uxtb	r4, r2
    23e6:	d81e      	bhi.n	2426 <encode_uint+0x7a>
    23e8:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    23ea:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    23ec:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    23ee:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    23f2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    23f6:	d301      	bcc.n	23fc <encode_uint+0x50>
    23f8:	45d1      	cmp	r9, sl
    23fa:	d811      	bhi.n	2420 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    23fc:	782b      	ldrb	r3, [r5, #0]
    23fe:	069b      	lsls	r3, r3, #26
    2400:	d505      	bpl.n	240e <encode_uint+0x62>
		if (radix == 8) {
    2402:	2e08      	cmp	r6, #8
    2404:	d115      	bne.n	2432 <encode_uint+0x86>
			conv->altform_0 = true;
    2406:	78ab      	ldrb	r3, [r5, #2]
    2408:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    240c:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    240e:	4648      	mov	r0, r9
    2410:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    2414:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    2418:	2b70      	cmp	r3, #112	; 0x70
    241a:	e7d7      	b.n	23cc <encode_uint+0x20>
	switch (specifier) {
    241c:	2608      	movs	r6, #8
    241e:	e7d8      	b.n	23d2 <encode_uint+0x26>
		value /= radix;
    2420:	4680      	mov	r8, r0
    2422:	460f      	mov	r7, r1
    2424:	e7d7      	b.n	23d6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2426:	f1bb 0f01 	cmp.w	fp, #1
    242a:	bf0c      	ite	eq
    242c:	3437      	addeq	r4, #55	; 0x37
    242e:	3457      	addne	r4, #87	; 0x57
    2430:	e7db      	b.n	23ea <encode_uint+0x3e>
		} else if (radix == 16) {
    2432:	2e10      	cmp	r6, #16
    2434:	d1eb      	bne.n	240e <encode_uint+0x62>
			conv->altform_0c = true;
    2436:	78ab      	ldrb	r3, [r5, #2]
    2438:	f043 0310 	orr.w	r3, r3, #16
    243c:	e7e6      	b.n	240c <encode_uint+0x60>
    243e:	bf00      	nop
    2440:	0000d3a9 	.word	0x0000d3a9

00002444 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2448:	b09f      	sub	sp, #124	; 0x7c
    244a:	4682      	mov	sl, r0
    244c:	9103      	str	r1, [sp, #12]
    244e:	4616      	mov	r6, r2
    2450:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2452:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2454:	7830      	ldrb	r0, [r6, #0]
    2456:	b910      	cbnz	r0, 245e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2458:	4628      	mov	r0, r5
    245a:	f000 bd87 	b.w	2f6c <cbvprintf+0xb28>
			OUTC(*fp++);
    245e:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    2460:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2462:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    2464:	d006      	beq.n	2474 <cbvprintf+0x30>
			OUTC(*fp++);
    2466:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    2468:	47d0      	blx	sl
    246a:	2800      	cmp	r0, #0
    246c:	f2c0 857e 	blt.w	2f6c <cbvprintf+0xb28>
    2470:	3501      	adds	r5, #1
		if (bps == NULL) {
    2472:	e228      	b.n	28c6 <cbvprintf+0x482>
		} state = {
    2474:	2218      	movs	r2, #24
    2476:	2100      	movs	r1, #0
    2478:	a810      	add	r0, sp, #64	; 0x40
    247a:	f008 fea0 	bl	b1be <memset>
	if (*sp == '%') {
    247e:	7873      	ldrb	r3, [r6, #1]
    2480:	2b25      	cmp	r3, #37	; 0x25
    2482:	f000 80bc 	beq.w	25fe <cbvprintf+0x1ba>
    2486:	2300      	movs	r3, #0
    2488:	1c71      	adds	r1, r6, #1
    248a:	4698      	mov	r8, r3
    248c:	469e      	mov	lr, r3
    248e:	469c      	mov	ip, r3
    2490:	4618      	mov	r0, r3
    2492:	460f      	mov	r7, r1
		switch (*sp) {
    2494:	f811 2b01 	ldrb.w	r2, [r1], #1
    2498:	2a2b      	cmp	r2, #43	; 0x2b
    249a:	f000 80df 	beq.w	265c <cbvprintf+0x218>
    249e:	f200 80d6 	bhi.w	264e <cbvprintf+0x20a>
    24a2:	2a20      	cmp	r2, #32
    24a4:	f000 80dd 	beq.w	2662 <cbvprintf+0x21e>
    24a8:	2a23      	cmp	r2, #35	; 0x23
    24aa:	f000 80dd 	beq.w	2668 <cbvprintf+0x224>
    24ae:	b12b      	cbz	r3, 24bc <cbvprintf+0x78>
    24b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24b8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    24bc:	f1b8 0f00 	cmp.w	r8, #0
    24c0:	d005      	beq.n	24ce <cbvprintf+0x8a>
    24c2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24c6:	f043 0320 	orr.w	r3, r3, #32
    24ca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    24ce:	f1be 0f00 	cmp.w	lr, #0
    24d2:	d005      	beq.n	24e0 <cbvprintf+0x9c>
    24d4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24d8:	f043 0310 	orr.w	r3, r3, #16
    24dc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    24e0:	f1bc 0f00 	cmp.w	ip, #0
    24e4:	d005      	beq.n	24f2 <cbvprintf+0xae>
    24e6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24ea:	f043 0308 	orr.w	r3, r3, #8
    24ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    24f2:	b128      	cbz	r0, 2500 <cbvprintf+0xbc>
    24f4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    24f8:	f043 0304 	orr.w	r3, r3, #4
    24fc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2500:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2504:	f003 0144 	and.w	r1, r3, #68	; 0x44
    2508:	2944      	cmp	r1, #68	; 0x44
    250a:	d103      	bne.n	2514 <cbvprintf+0xd0>
		conv->flag_zero = false;
    250c:	f36f 1386 	bfc	r3, #6, #1
    2510:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    2514:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2518:	970e      	str	r7, [sp, #56]	; 0x38
    251a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    251e:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2520:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2524:	f040 80a5 	bne.w	2672 <cbvprintf+0x22e>
		conv->width_star = true;
    2528:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    252c:	f043 0301 	orr.w	r3, r3, #1
    2530:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    2534:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    2536:	781a      	ldrb	r2, [r3, #0]
    2538:	2a2e      	cmp	r2, #46	; 0x2e
    253a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    253e:	bf0c      	ite	eq
    2540:	2101      	moveq	r1, #1
    2542:	2100      	movne	r1, #0
    2544:	f361 0241 	bfi	r2, r1, #1, #1
    2548:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    254c:	d10c      	bne.n	2568 <cbvprintf+0x124>
	++sp;
    254e:	1c5a      	adds	r2, r3, #1
    2550:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2552:	785a      	ldrb	r2, [r3, #1]
    2554:	2a2a      	cmp	r2, #42	; 0x2a
    2556:	f040 809c 	bne.w	2692 <cbvprintf+0x24e>
		conv->prec_star = true;
    255a:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    255e:	f042 0204 	orr.w	r2, r2, #4
    2562:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    2566:	3302      	adds	r3, #2
	switch (*sp) {
    2568:	781a      	ldrb	r2, [r3, #0]
    256a:	2a6c      	cmp	r2, #108	; 0x6c
    256c:	f000 80bd 	beq.w	26ea <cbvprintf+0x2a6>
    2570:	f200 809f 	bhi.w	26b2 <cbvprintf+0x26e>
    2574:	2a68      	cmp	r2, #104	; 0x68
    2576:	f000 80a5 	beq.w	26c4 <cbvprintf+0x280>
    257a:	2a6a      	cmp	r2, #106	; 0x6a
    257c:	f000 80be 	beq.w	26fc <cbvprintf+0x2b8>
    2580:	2a4c      	cmp	r2, #76	; 0x4c
    2582:	f000 80c3 	beq.w	270c <cbvprintf+0x2c8>
	conv->specifier = *sp++;
    2586:	f813 2b01 	ldrb.w	r2, [r3], #1
    258a:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    258c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    258e:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    2592:	f200 8105 	bhi.w	27a0 <cbvprintf+0x35c>
    2596:	2a6d      	cmp	r2, #109	; 0x6d
    2598:	f200 80c5 	bhi.w	2726 <cbvprintf+0x2e2>
    259c:	2a69      	cmp	r2, #105	; 0x69
    259e:	f200 80ff 	bhi.w	27a0 <cbvprintf+0x35c>
    25a2:	2a57      	cmp	r2, #87	; 0x57
    25a4:	f200 80de 	bhi.w	2764 <cbvprintf+0x320>
    25a8:	2a41      	cmp	r2, #65	; 0x41
    25aa:	d004      	beq.n	25b6 <cbvprintf+0x172>
    25ac:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    25b0:	2b02      	cmp	r3, #2
    25b2:	f200 80f5 	bhi.w	27a0 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_FP;
    25b6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    25ba:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    25be:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    25c0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    25c4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    25c8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    25cc:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    25d0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    25d4:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    25d8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    25dc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    25de:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    25e2:	b2cb      	uxtb	r3, r1
    25e4:	f100 811b 	bmi.w	281e <cbvprintf+0x3da>
		if (conv->length_mod == LENGTH_L) {
    25e8:	f003 0278 	and.w	r2, r3, #120	; 0x78
    25ec:	2a18      	cmp	r2, #24
    25ee:	f040 8105 	bne.w	27fc <cbvprintf+0x3b8>
			conv->length_mod = LENGTH_NONE;
    25f2:	f36f 03c6 	bfc	r3, #3, #4
    25f6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    25fa:	2300      	movs	r3, #0
    25fc:	e0f4      	b.n	27e8 <cbvprintf+0x3a4>
		conv->specifier = *sp++;
    25fe:	1cb2      	adds	r2, r6, #2
    2600:	9206      	str	r2, [sp, #24]
    2602:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    2606:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    260a:	07df      	lsls	r7, r3, #31
    260c:	f140 8109 	bpl.w	2822 <cbvprintf+0x3de>
			width = va_arg(ap, int);
    2610:	f854 2b04 	ldr.w	r2, [r4], #4
    2614:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    2616:	2a00      	cmp	r2, #0
    2618:	da08      	bge.n	262c <cbvprintf+0x1e8>
				conv->flag_dash = true;
    261a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    261e:	f042 0204 	orr.w	r2, r2, #4
    2622:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2626:	9a04      	ldr	r2, [sp, #16]
    2628:	4252      	negs	r2, r2
		int width = -1;
    262a:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    262c:	0758      	lsls	r0, r3, #29
    262e:	f140 8100 	bpl.w	2832 <cbvprintf+0x3ee>
			int arg = va_arg(ap, int);
    2632:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    2636:	2f00      	cmp	r7, #0
    2638:	f280 80ff 	bge.w	283a <cbvprintf+0x3f6>
				conv->prec_present = false;
    263c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2640:	f36f 0341 	bfc	r3, #1, #1
    2644:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    2648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    264c:	e0f5      	b.n	283a <cbvprintf+0x3f6>
		switch (*sp) {
    264e:	2a2d      	cmp	r2, #45	; 0x2d
    2650:	d00d      	beq.n	266e <cbvprintf+0x22a>
    2652:	2a30      	cmp	r2, #48	; 0x30
    2654:	f47f af2b 	bne.w	24ae <cbvprintf+0x6a>
    2658:	2301      	movs	r3, #1
	} while (loop);
    265a:	e71a      	b.n	2492 <cbvprintf+0x4e>
		switch (*sp) {
    265c:	f04f 0c01 	mov.w	ip, #1
    2660:	e717      	b.n	2492 <cbvprintf+0x4e>
    2662:	f04f 0e01 	mov.w	lr, #1
    2666:	e714      	b.n	2492 <cbvprintf+0x4e>
    2668:	f04f 0801 	mov.w	r8, #1
    266c:	e711      	b.n	2492 <cbvprintf+0x4e>
    266e:	2001      	movs	r0, #1
    2670:	e70f      	b.n	2492 <cbvprintf+0x4e>
	size_t width = extract_decimal(&sp);
    2672:	a80e      	add	r0, sp, #56	; 0x38
    2674:	f7ff fe84 	bl	2380 <extract_decimal>
	if (sp != wp) {
    2678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    267a:	42bb      	cmp	r3, r7
    267c:	f43f af5b 	beq.w	2536 <cbvprintf+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    2680:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    2684:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    2686:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    2688:	f360 0241 	bfi	r2, r0, #1, #1
    268c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2690:	e751      	b.n	2536 <cbvprintf+0xf2>
	size_t prec = extract_decimal(&sp);
    2692:	a80e      	add	r0, sp, #56	; 0x38
    2694:	f7ff fe74 	bl	2380 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2698:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    269c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    269e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    26a2:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    26a6:	f362 0341 	bfi	r3, r2, #1, #1
    26aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    26ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    26b0:	e75a      	b.n	2568 <cbvprintf+0x124>
	switch (*sp) {
    26b2:	2a74      	cmp	r2, #116	; 0x74
    26b4:	d026      	beq.n	2704 <cbvprintf+0x2c0>
    26b6:	2a7a      	cmp	r2, #122	; 0x7a
    26b8:	f47f af65 	bne.w	2586 <cbvprintf+0x142>
		conv->length_mod = LENGTH_Z;
    26bc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    26c0:	2106      	movs	r1, #6
    26c2:	e00c      	b.n	26de <cbvprintf+0x29a>
		if (*++sp == 'h') {
    26c4:	785a      	ldrb	r2, [r3, #1]
    26c6:	2a68      	cmp	r2, #104	; 0x68
    26c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    26cc:	d106      	bne.n	26dc <cbvprintf+0x298>
			conv->length_mod = LENGTH_HH;
    26ce:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    26d0:	f361 02c6 	bfi	r2, r1, #3, #4
    26d4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    26d8:	3302      	adds	r3, #2
    26da:	e754      	b.n	2586 <cbvprintf+0x142>
			conv->length_mod = LENGTH_H;
    26dc:	2102      	movs	r1, #2
    26de:	f361 02c6 	bfi	r2, r1, #3, #4
    26e2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    26e6:	3301      	adds	r3, #1
    26e8:	e74d      	b.n	2586 <cbvprintf+0x142>
		if (*++sp == 'l') {
    26ea:	785a      	ldrb	r2, [r3, #1]
    26ec:	2a6c      	cmp	r2, #108	; 0x6c
    26ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    26f2:	d101      	bne.n	26f8 <cbvprintf+0x2b4>
			conv->length_mod = LENGTH_LL;
    26f4:	2104      	movs	r1, #4
    26f6:	e7eb      	b.n	26d0 <cbvprintf+0x28c>
			conv->length_mod = LENGTH_L;
    26f8:	2103      	movs	r1, #3
    26fa:	e7f0      	b.n	26de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    26fc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2700:	2105      	movs	r1, #5
    2702:	e7ec      	b.n	26de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    2704:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2708:	2107      	movs	r1, #7
    270a:	e7e8      	b.n	26de <cbvprintf+0x29a>
		conv->unsupported = true;
    270c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2710:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2714:	f022 0202 	bic.w	r2, r2, #2
    2718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    271c:	f042 0202 	orr.w	r2, r2, #2
    2720:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2724:	e7df      	b.n	26e6 <cbvprintf+0x2a2>
	switch (conv->specifier) {
    2726:	3a6e      	subs	r2, #110	; 0x6e
    2728:	b2d3      	uxtb	r3, r2
    272a:	2201      	movs	r2, #1
    272c:	409a      	lsls	r2, r3
    272e:	f240 4382 	movw	r3, #1154	; 0x482
    2732:	421a      	tst	r2, r3
    2734:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2738:	d139      	bne.n	27ae <cbvprintf+0x36a>
    273a:	f012 0f24 	tst.w	r2, #36	; 0x24
    273e:	d161      	bne.n	2804 <cbvprintf+0x3c0>
    2740:	07d1      	lsls	r1, r2, #31
    2742:	d52d      	bpl.n	27a0 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_PTR;
    2744:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2748:	f003 0378 	and.w	r3, r3, #120	; 0x78
    274c:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2750:	2103      	movs	r1, #3
    2752:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2756:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    275a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    275e:	eb43 030c 	adc.w	r3, r3, ip
    2762:	e041      	b.n	27e8 <cbvprintf+0x3a4>
	switch (conv->specifier) {
    2764:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2768:	b2c9      	uxtb	r1, r1
    276a:	2001      	movs	r0, #1
    276c:	fa00 f101 	lsl.w	r1, r0, r1
    2770:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2774:	f47f af1f 	bne.w	25b6 <cbvprintf+0x172>
    2778:	f640 0301 	movw	r3, #2049	; 0x801
    277c:	4219      	tst	r1, r3
    277e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2782:	d11a      	bne.n	27ba <cbvprintf+0x376>
    2784:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2788:	d00a      	beq.n	27a0 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
    278a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    278e:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2792:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2796:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2798:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    279c:	f47f af2d 	bne.w	25fa <cbvprintf+0x1b6>
		conv->invalid = true;
    27a0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    27a4:	f043 0301 	orr.w	r3, r3, #1
    27a8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    27ac:	e725      	b.n	25fa <cbvprintf+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
    27ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    27b2:	2102      	movs	r1, #2
    27b4:	f361 0202 	bfi	r2, r1, #0, #3
    27b8:	e7eb      	b.n	2792 <cbvprintf+0x34e>
    27ba:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    27be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    27c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    27c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    27c8:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    27ca:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    27ce:	bf02      	ittt	eq
    27d0:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    27d4:	f041 0101 	orreq.w	r1, r1, #1
    27d8:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    27dc:	2a63      	cmp	r2, #99	; 0x63
    27de:	f47f af0c 	bne.w	25fa <cbvprintf+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    27e2:	3b00      	subs	r3, #0
    27e4:	bf18      	it	ne
    27e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    27e8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    27ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
    27f0:	430b      	orrs	r3, r1
    27f2:	f363 0241 	bfi	r2, r3, #1, #1
    27f6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    27fa:	e704      	b.n	2606 <cbvprintf+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
    27fc:	f013 0f38 	tst.w	r3, #56	; 0x38
    2800:	d1ce      	bne.n	27a0 <cbvprintf+0x35c>
    2802:	e6fa      	b.n	25fa <cbvprintf+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
    2804:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2808:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    280a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    280e:	f361 0202 	bfi	r2, r1, #0, #3
    2812:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    2816:	bf14      	ite	ne
    2818:	2301      	movne	r3, #1
    281a:	2300      	moveq	r3, #0
    281c:	e7e4      	b.n	27e8 <cbvprintf+0x3a4>
			unsupported = true;
    281e:	2301      	movs	r3, #1
    2820:	e7e2      	b.n	27e8 <cbvprintf+0x3a4>
		} else if (conv->width_present) {
    2822:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2826:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2828:	bfb4      	ite	lt
    282a:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    282c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    2830:	e6fb      	b.n	262a <cbvprintf+0x1e6>
		} else if (conv->prec_present) {
    2832:	0799      	lsls	r1, r3, #30
    2834:	f57f af08 	bpl.w	2648 <cbvprintf+0x204>
			precision = conv->prec_value;
    2838:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    283a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    283e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2840:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    2844:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2848:	f003 0207 	and.w	r2, r3, #7
    284c:	2a04      	cmp	r2, #4
    284e:	d107      	bne.n	2860 <cbvprintf+0x41c>
		    && !conv->prec_present) {
    2850:	078a      	lsls	r2, r1, #30
    2852:	d405      	bmi.n	2860 <cbvprintf+0x41c>
			if (conv->specifier_a) {
    2854:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    2858:	2a00      	cmp	r2, #0
    285a:	bfac      	ite	ge
    285c:	2706      	movge	r7, #6
    285e:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    2860:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2864:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2866:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    286a:	d133      	bne.n	28d4 <cbvprintf+0x490>
			switch (length_mod) {
    286c:	1ecb      	subs	r3, r1, #3
    286e:	2b04      	cmp	r3, #4
    2870:	d804      	bhi.n	287c <cbvprintf+0x438>
    2872:	e8df f003 	tbb	[pc, r3]
    2876:	4610      	.short	0x4610
    2878:	1046      	.short	0x1046
    287a:	10          	.byte	0x10
    287b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    287c:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    287e:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2880:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2884:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2888:	d10b      	bne.n	28a2 <cbvprintf+0x45e>
				value->sint = (char)value->sint;
    288a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    288e:	9310      	str	r3, [sp, #64]	; 0x40
    2890:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    2892:	9311      	str	r3, [sp, #68]	; 0x44
    2894:	e007      	b.n	28a6 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2896:	f854 3b04 	ldr.w	r3, [r4], #4
    289a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    289c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    28a0:	e002      	b.n	28a8 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    28a2:	2902      	cmp	r1, #2
    28a4:	d011      	beq.n	28ca <cbvprintf+0x486>
				value->sint = va_arg(ap, int);
    28a6:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    28a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28ac:	9307      	str	r3, [sp, #28]
    28ae:	079b      	lsls	r3, r3, #30
    28b0:	d047      	beq.n	2942 <cbvprintf+0x4fe>
			OUTS(sp, fp);
    28b2:	9b06      	ldr	r3, [sp, #24]
    28b4:	9903      	ldr	r1, [sp, #12]
    28b6:	4632      	mov	r2, r6
    28b8:	4650      	mov	r0, sl
    28ba:	f007 fdcc 	bl	a456 <outs>
    28be:	2800      	cmp	r0, #0
    28c0:	f2c0 8354 	blt.w	2f6c <cbvprintf+0xb28>
    28c4:	4405      	add	r5, r0
			continue;
    28c6:	9e06      	ldr	r6, [sp, #24]
    28c8:	e5c4      	b.n	2454 <cbvprintf+0x10>
				value->sint = (short)value->sint;
    28ca:	b21a      	sxth	r2, r3
    28cc:	9210      	str	r2, [sp, #64]	; 0x40
    28ce:	f343 33c0 	sbfx	r3, r3, #15, #1
    28d2:	e7de      	b.n	2892 <cbvprintf+0x44e>
		} else if (specifier_cat == SPECIFIER_UINT) {
    28d4:	2b02      	cmp	r3, #2
    28d6:	d124      	bne.n	2922 <cbvprintf+0x4de>
			switch (length_mod) {
    28d8:	1ecb      	subs	r3, r1, #3
    28da:	2b04      	cmp	r3, #4
    28dc:	d804      	bhi.n	28e8 <cbvprintf+0x4a4>
    28de:	e8df f003 	tbb	[pc, r3]
    28e2:	1018      	.short	0x1018
    28e4:	1810      	.short	0x1810
    28e6:	18          	.byte	0x18
    28e7:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    28e8:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    28ea:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    28ee:	f04f 0200 	mov.w	r2, #0
    28f2:	d014      	beq.n	291e <cbvprintf+0x4da>
			} else if (length_mod == LENGTH_H) {
    28f4:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    28f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    28fa:	d1d5      	bne.n	28a8 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    28fc:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    28fe:	9310      	str	r3, [sp, #64]	; 0x40
    2900:	e7d2      	b.n	28a8 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    2902:	3407      	adds	r4, #7
    2904:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2908:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    290c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2910:	e7ca      	b.n	28a8 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap, size_t);
    2912:	f854 3b04 	ldr.w	r3, [r4], #4
    2916:	9310      	str	r3, [sp, #64]	; 0x40
    2918:	2300      	movs	r3, #0
    291a:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    291c:	e7c4      	b.n	28a8 <cbvprintf+0x464>
				value->uint = (unsigned char)value->uint;
    291e:	b2db      	uxtb	r3, r3
    2920:	e7bc      	b.n	289c <cbvprintf+0x458>
		} else if (specifier_cat == SPECIFIER_FP) {
    2922:	2b04      	cmp	r3, #4
    2924:	d108      	bne.n	2938 <cbvprintf+0x4f4>
					(sint_value_type)va_arg(ap, long long);
    2926:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2928:	f024 0407 	bic.w	r4, r4, #7
    292c:	e9d4 2300 	ldrd	r2, r3, [r4]
    2930:	3408      	adds	r4, #8
    2932:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2936:	e7b7      	b.n	28a8 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2938:	2b03      	cmp	r3, #3
    293a:	d1b5      	bne.n	28a8 <cbvprintf+0x464>
			value->ptr = va_arg(ap, void *);
    293c:	f854 3b04 	ldr.w	r3, [r4], #4
    2940:	e7dd      	b.n	28fe <cbvprintf+0x4ba>
		switch (conv->specifier) {
    2942:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    2946:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    294a:	d8bc      	bhi.n	28c6 <cbvprintf+0x482>
    294c:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    2950:	d849      	bhi.n	29e6 <cbvprintf+0x5a2>
    2952:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    2956:	f000 8091 	beq.w	2a7c <cbvprintf+0x638>
    295a:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    295e:	d9b2      	bls.n	28c6 <cbvprintf+0x482>
    2960:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    2964:	d003      	beq.n	296e <cbvprintf+0x52a>
    2966:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    296a:	2a02      	cmp	r2, #2
    296c:	d8ab      	bhi.n	28c6 <cbvprintf+0x482>
	} u = {
    296e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    2972:	2a00      	cmp	r2, #0
    2974:	f2c0 8136 	blt.w	2be4 <cbvprintf+0x7a0>
	} else if (conv->flag_plus) {
    2978:	9b07      	ldr	r3, [sp, #28]
    297a:	0718      	lsls	r0, r3, #28
    297c:	f100 8135 	bmi.w	2bea <cbvprintf+0x7a6>
	} else if (conv->flag_space) {
    2980:	f3c3 1900 	ubfx	r9, r3, #4, #1
    2984:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2988:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    298c:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    2990:	2800      	cmp	r0, #0
    2992:	f040 812d 	bne.w	2bf0 <cbvprintf+0x7ac>
    2996:	ea51 0602 	orrs.w	r6, r1, r2
    299a:	bf14      	ite	ne
    299c:	2601      	movne	r6, #1
    299e:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    29a0:	02d2      	lsls	r2, r2, #11
    29a2:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    29a6:	02c9      	lsls	r1, r1, #11
		c = 'f';
    29a8:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    29ac:	ea40 0e01 	orr.w	lr, r0, r1
    29b0:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    29b4:	bf08      	it	eq
    29b6:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    29ba:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    29be:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    29c2:	f000 819e 	beq.w	2d02 <cbvprintf+0x8be>
		if (is_subnormal) {
    29c6:	2e00      	cmp	r6, #0
    29c8:	f040 8149 	bne.w	2c5e <cbvprintf+0x81a>
		fract |= BIT_63;
    29cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    29ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    29d2:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    29d6:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    29d8:	2000      	movs	r0, #0
    29da:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    29de:	4606      	mov	r6, r0
		fract *= 5U;
    29e0:	f04f 0c05 	mov.w	ip, #5
    29e4:	e155      	b.n	2c92 <cbvprintf+0x84e>
		switch (conv->specifier) {
    29e6:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    29ea:	2a20      	cmp	r2, #32
    29ec:	f63f af6b 	bhi.w	28c6 <cbvprintf+0x482>
    29f0:	a001      	add	r0, pc, #4	; (adr r0, 29f8 <cbvprintf+0x5b4>)
    29f2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    29f6:	bf00      	nop
    29f8:	00002b83 	.word	0x00002b83
    29fc:	000028c7 	.word	0x000028c7
    2a00:	000028c7 	.word	0x000028c7
    2a04:	000028c7 	.word	0x000028c7
    2a08:	000028c7 	.word	0x000028c7
    2a0c:	000028c7 	.word	0x000028c7
    2a10:	000028c7 	.word	0x000028c7
    2a14:	000028c7 	.word	0x000028c7
    2a18:	000028c7 	.word	0x000028c7
    2a1c:	0000296f 	.word	0x0000296f
    2a20:	000028c7 	.word	0x000028c7
    2a24:	00002b07 	.word	0x00002b07
    2a28:	00002b1b 	.word	0x00002b1b
    2a2c:	0000296f 	.word	0x0000296f
    2a30:	0000296f 	.word	0x0000296f
    2a34:	0000296f 	.word	0x0000296f
    2a38:	000028c7 	.word	0x000028c7
    2a3c:	00002b1b 	.word	0x00002b1b
    2a40:	000028c7 	.word	0x000028c7
    2a44:	000028c7 	.word	0x000028c7
    2a48:	000028c7 	.word	0x000028c7
    2a4c:	000028c7 	.word	0x000028c7
    2a50:	00002bbd 	.word	0x00002bbd
    2a54:	00002b83 	.word	0x00002b83
    2a58:	00002b89 	.word	0x00002b89
    2a5c:	000028c7 	.word	0x000028c7
    2a60:	000028c7 	.word	0x000028c7
    2a64:	00002a83 	.word	0x00002a83
    2a68:	000028c7 	.word	0x000028c7
    2a6c:	00002b83 	.word	0x00002b83
    2a70:	000028c7 	.word	0x000028c7
    2a74:	000028c7 	.word	0x000028c7
    2a78:	00002b83 	.word	0x00002b83
			OUTC('%');
    2a7c:	9903      	ldr	r1, [sp, #12]
    2a7e:	4658      	mov	r0, fp
    2a80:	e4f2      	b.n	2468 <cbvprintf+0x24>
			if (precision >= 0) {
    2a82:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    2a84:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    2a86:	db3a      	blt.n	2afe <cbvprintf+0x6ba>
				len = strnlen(bps, precision);
    2a88:	4639      	mov	r1, r7
    2a8a:	4630      	mov	r0, r6
    2a8c:	f008 fba7 	bl	b1de <strnlen>
			bpe = bps + len;
    2a90:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    2a92:	2e00      	cmp	r6, #0
    2a94:	f43f af17 	beq.w	28c6 <cbvprintf+0x482>
		char sign = 0;
    2a98:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    2a9c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2aa0:	f013 0210 	ands.w	r2, r3, #16
    2aa4:	9205      	str	r2, [sp, #20]
    2aa6:	f000 8256 	beq.w	2f56 <cbvprintf+0xb12>
			nj_len += 2U;
    2aaa:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2aac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    2ab0:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    2ab4:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    2ab6:	bf18      	it	ne
    2ab8:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2aba:	f8cd 801c 	str.w	r8, [sp, #28]
    2abe:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    2ac0:	bf18      	it	ne
    2ac2:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    2ac4:	9b04      	ldr	r3, [sp, #16]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	f340 8260 	ble.w	2f8c <cbvprintf+0xb48>
			if (!conv->flag_dash) {
    2acc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2ad0:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
    2ad2:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
    2ad4:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    2ad6:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    2ada:	f100 8257 	bmi.w	2f8c <cbvprintf+0xb48>
				if (conv->flag_zero) {
    2ade:	0651      	lsls	r1, r2, #25
    2ae0:	f140 8247 	bpl.w	2f72 <cbvprintf+0xb2e>
					if (sign != 0) {
    2ae4:	f1b9 0f00 	cmp.w	r9, #0
    2ae8:	d007      	beq.n	2afa <cbvprintf+0x6b6>
						OUTC(sign);
    2aea:	9903      	ldr	r1, [sp, #12]
    2aec:	4648      	mov	r0, r9
    2aee:	47d0      	blx	sl
    2af0:	2800      	cmp	r0, #0
    2af2:	f2c0 823b 	blt.w	2f6c <cbvprintf+0xb28>
    2af6:	3501      	adds	r5, #1
						sign = 0;
    2af8:	46d9      	mov	r9, fp
					pad = '0';
    2afa:	2230      	movs	r2, #48	; 0x30
    2afc:	e23a      	b.n	2f74 <cbvprintf+0xb30>
				len = strlen(bps);
    2afe:	4630      	mov	r0, r6
    2b00:	f7fe f918 	bl	d34 <strlen>
    2b04:	e7c4      	b.n	2a90 <cbvprintf+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b08:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    2b0c:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    2b10:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    2b14:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2b16:	2001      	movs	r0, #1
    2b18:	e7c0      	b.n	2a9c <cbvprintf+0x658>
			if (conv->flag_plus) {
    2b1a:	9b07      	ldr	r3, [sp, #28]
    2b1c:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    2b1e:	bf58      	it	pl
    2b20:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    2b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    2b28:	bf54      	ite	pl
    2b2a:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    2b2e:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    2b32:	2b00      	cmp	r3, #0
    2b34:	da06      	bge.n	2b44 <cbvprintf+0x700>
				value->uint = (uint_value_type)-sint;
    2b36:	4252      	negs	r2, r2
    2b38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2b3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2b40:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2b44:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2b48:	9300      	str	r3, [sp, #0]
    2b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2b4e:	ab17      	add	r3, sp, #92	; 0x5c
    2b50:	aa12      	add	r2, sp, #72	; 0x48
    2b52:	f7ff fc2b 	bl	23ac <encode_uint>
    2b56:	4606      	mov	r6, r0
			if (precision >= 0) {
    2b58:	2f00      	cmp	r7, #0
    2b5a:	db0c      	blt.n	2b76 <cbvprintf+0x732>
				conv->flag_zero = false;
    2b5c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2b60:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2b64:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    2b66:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2b6a:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    2b6c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2b70:	d901      	bls.n	2b76 <cbvprintf+0x732>
					conv->pad0_value = precision - (int)len;
    2b72:	1afb      	subs	r3, r7, r3
    2b74:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    2b76:	2e00      	cmp	r6, #0
    2b78:	f43f aea5 	beq.w	28c6 <cbvprintf+0x482>
    2b7c:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    2b80:	e05b      	b.n	2c3a <cbvprintf+0x7f6>
		switch (conv->specifier) {
    2b82:	f04f 0900 	mov.w	r9, #0
    2b86:	e7dd      	b.n	2b44 <cbvprintf+0x700>
			if (value->ptr != NULL) {
    2b88:	9810      	ldr	r0, [sp, #64]	; 0x40
    2b8a:	2800      	cmp	r0, #0
    2b8c:	f000 81de 	beq.w	2f4c <cbvprintf+0xb08>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2b90:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2b94:	9300      	str	r3, [sp, #0]
    2b96:	aa12      	add	r2, sp, #72	; 0x48
    2b98:	ab17      	add	r3, sp, #92	; 0x5c
    2b9a:	2100      	movs	r1, #0
    2b9c:	f7ff fc06 	bl	23ac <encode_uint>
				conv->altform_0c = true;
    2ba0:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2ba4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2ba8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2bac:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2bb0:	4606      	mov	r6, r0
				conv->altform_0c = true;
    2bb2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    2bb6:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    2bba:	e7cd      	b.n	2b58 <cbvprintf+0x714>
				store_count(conv, value->ptr, count);
    2bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2bbe:	2907      	cmp	r1, #7
    2bc0:	f63f ae81 	bhi.w	28c6 <cbvprintf+0x482>
    2bc4:	e8df f001 	tbb	[pc, r1]
    2bc8:	0c06040c 	.word	0x0c06040c
    2bcc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2bd0:	701d      	strb	r5, [r3, #0]
		break;
    2bd2:	e678      	b.n	28c6 <cbvprintf+0x482>
		*(short *)dp = (short)count;
    2bd4:	801d      	strh	r5, [r3, #0]
		break;
    2bd6:	e676      	b.n	28c6 <cbvprintf+0x482>
		*(intmax_t *)dp = (intmax_t)count;
    2bd8:	17ea      	asrs	r2, r5, #31
    2bda:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2bde:	e672      	b.n	28c6 <cbvprintf+0x482>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2be0:	601d      	str	r5, [r3, #0]
		break;
    2be2:	e670      	b.n	28c6 <cbvprintf+0x482>
		*sign = '-';
    2be4:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2be8:	e6ce      	b.n	2988 <cbvprintf+0x544>
		*sign = '+';
    2bea:	f04f 092b 	mov.w	r9, #43	; 0x2b
    2bee:	e6cb      	b.n	2988 <cbvprintf+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2bf0:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2bf4:	42b0      	cmp	r0, r6
    2bf6:	d12f      	bne.n	2c58 <cbvprintf+0x814>
			if (isupper((int)c)) {
    2bf8:	f10b 0301 	add.w	r3, fp, #1
    2bfc:	489e      	ldr	r0, [pc, #632]	; (2e78 <cbvprintf+0xa34>)
    2bfe:	b2db      	uxtb	r3, r3
		if (fract == 0) {
    2c00:	430a      	orrs	r2, r1
    2c02:	5cc3      	ldrb	r3, [r0, r3]
    2c04:	f003 0303 	and.w	r3, r3, #3
    2c08:	d11e      	bne.n	2c48 <cbvprintf+0x804>
			if (isupper((int)c)) {
    2c0a:	2b01      	cmp	r3, #1
    2c0c:	bf0b      	itete	eq
    2c0e:	2349      	moveq	r3, #73	; 0x49
    2c10:	2369      	movne	r3, #105	; 0x69
    2c12:	214e      	moveq	r1, #78	; 0x4e
    2c14:	216e      	movne	r1, #110	; 0x6e
    2c16:	bf0c      	ite	eq
    2c18:	2246      	moveq	r2, #70	; 0x46
    2c1a:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    2c1c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    2c20:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    2c24:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    2c28:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    2c2c:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    2c30:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    2c34:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    2c38:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2c3a:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    2c3c:	f1b9 0f00 	cmp.w	r9, #0
    2c40:	f43f af2c 	beq.w	2a9c <cbvprintf+0x658>
			nj_len += 1U;
    2c44:	3001      	adds	r0, #1
    2c46:	e729      	b.n	2a9c <cbvprintf+0x658>
			if (isupper((int)c)) {
    2c48:	2b01      	cmp	r3, #1
    2c4a:	bf15      	itete	ne
    2c4c:	236e      	movne	r3, #110	; 0x6e
    2c4e:	234e      	moveq	r3, #78	; 0x4e
    2c50:	2161      	movne	r1, #97	; 0x61
    2c52:	2141      	moveq	r1, #65	; 0x41
    2c54:	461a      	mov	r2, r3
    2c56:	e7e1      	b.n	2c1c <cbvprintf+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2c58:	2600      	movs	r6, #0
    2c5a:	e6a1      	b.n	29a0 <cbvprintf+0x55c>
				expo--;
    2c5c:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2c5e:	1849      	adds	r1, r1, r1
    2c60:	4152      	adcs	r2, r2
    2c62:	2a00      	cmp	r2, #0
    2c64:	dafa      	bge.n	2c5c <cbvprintf+0x818>
    2c66:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    2c6a:	e6af      	b.n	29cc <cbvprintf+0x588>
			fract >>= 1;
    2c6c:	0849      	lsrs	r1, r1, #1
    2c6e:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    2c72:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2c74:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    2c78:	4640      	mov	r0, r8
			expo++;
    2c7a:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2c7e:	d2f5      	bcs.n	2c6c <cbvprintf+0x828>
		fract *= 5U;
    2c80:	fb0c fe02 	mul.w	lr, ip, r2
    2c84:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    2c88:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    2c8c:	4472      	add	r2, lr
		decexp--;
    2c8e:	3e01      	subs	r6, #1
    2c90:	2001      	movs	r0, #1
	while (expo < -2) {
    2c92:	f118 0f02 	cmn.w	r8, #2
    2c96:	dbe9      	blt.n	2c6c <cbvprintf+0x828>
    2c98:	b108      	cbz	r0, 2c9e <cbvprintf+0x85a>
    2c9a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    2c9e:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    2ca2:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    2ca6:	dc2f      	bgt.n	2d08 <cbvprintf+0x8c4>
	fract >>= (4 - expo);
    2ca8:	f1c8 0004 	rsb	r0, r8, #4
    2cac:	f108 081c 	add.w	r8, r8, #28
    2cb0:	f1a0 0c20 	sub.w	ip, r0, #32
    2cb4:	40c2      	lsrs	r2, r0
    2cb6:	fa21 f300 	lsr.w	r3, r1, r0
    2cba:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    2cbe:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    2cc2:	ea42 0208 	orr.w	r2, r2, r8
    2cc6:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    2cca:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    2ccc:	ea42 020c 	orr.w	r2, r2, ip
    2cd0:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    2cd2:	d13a      	bne.n	2d4a <cbvprintf+0x906>
		if (decexp < (-4 + 1) || decexp > precision) {
    2cd4:	1cf3      	adds	r3, r6, #3
    2cd6:	db01      	blt.n	2cdc <cbvprintf+0x898>
    2cd8:	42b7      	cmp	r7, r6
    2cda:	da2b      	bge.n	2d34 <cbvprintf+0x8f0>
			c += 'e' - 'g';  /* e or E */
    2cdc:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    2ce0:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2ce2:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    2ce6:	dd7f      	ble.n	2de8 <cbvprintf+0x9a4>
		if (!conv->flag_hash && (precision > 0)) {
    2ce8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    2cec:	0680      	lsls	r0, r0, #26
				precision--;
    2cee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    2cf2:	d479      	bmi.n	2de8 <cbvprintf+0x9a4>
    2cf4:	1e3b      	subs	r3, r7, #0
    2cf6:	bf18      	it	ne
    2cf8:	2301      	movne	r3, #1
	bool prune_zero = false;
    2cfa:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    2cfc:	f107 0801 	add.w	r8, r7, #1
    2d00:	e02d      	b.n	2d5e <cbvprintf+0x91a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2d02:	f04f 0800 	mov.w	r8, #0
    2d06:	e667      	b.n	29d8 <cbvprintf+0x594>
		fract += 2;
    2d08:	3202      	adds	r2, #2
    2d0a:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    2d0e:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    2d10:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    2d14:	f007 fb70 	bl	a3f8 <_ldiv5>
		expo--;
    2d18:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    2d1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    2d20:	3601      	adds	r6, #1
			fract <<= 1;
    2d22:	1892      	adds	r2, r2, r2
    2d24:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2d26:	2900      	cmp	r1, #0
			expo--;
    2d28:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    2d2c:	daf9      	bge.n	2d22 <cbvprintf+0x8de>
    2d2e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    2d32:	e7b4      	b.n	2c9e <cbvprintf+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
    2d34:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2d38:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    2d3a:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    2d3e:	d451      	bmi.n	2de4 <cbvprintf+0x9a0>
    2d40:	1e3b      	subs	r3, r7, #0
    2d42:	bf18      	it	ne
    2d44:	2301      	movne	r3, #1
	bool prune_zero = false;
    2d46:	9305      	str	r3, [sp, #20]
    2d48:	e004      	b.n	2d54 <cbvprintf+0x910>
    2d4a:	2300      	movs	r3, #0
	if (c == 'f') {
    2d4c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    2d50:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    2d52:	d1d3      	bne.n	2cfc <cbvprintf+0x8b8>
		if (decimals < 0) {
    2d54:	eb17 0806 	adds.w	r8, r7, r6
    2d58:	f04f 0b66 	mov.w	fp, #102	; 0x66
    2d5c:	d446      	bmi.n	2dec <cbvprintf+0x9a8>
	if (decimals > 16) {
    2d5e:	f1b8 0f10 	cmp.w	r8, #16
    2d62:	bfa8      	it	ge
    2d64:	f04f 0810 	movge.w	r8, #16
    2d68:	2010      	movs	r0, #16
    2d6a:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    2d6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    2d70:	2000      	movs	r0, #0
    2d72:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    2d76:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    2d7a:	f1b8 0f00 	cmp.w	r8, #0
    2d7e:	d138      	bne.n	2df2 <cbvprintf+0x9ae>
	fract += round;
    2d80:	9908      	ldr	r1, [sp, #32]
    2d82:	1812      	adds	r2, r2, r0
    2d84:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    2d88:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    2d8c:	d23f      	bcs.n	2e0e <cbvprintf+0x9ca>
	fract += round;
    2d8e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    2d92:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    2d94:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    2d98:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    2d9c:	f040 80b5 	bne.w	2f0a <cbvprintf+0xac6>
		if (decexp > 0) {
    2da0:	2e00      	cmp	r6, #0
    2da2:	dc3f      	bgt.n	2e24 <cbvprintf+0x9e0>
			*buf++ = '0';
    2da4:	2130      	movs	r1, #48	; 0x30
    2da6:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    2daa:	2a00      	cmp	r2, #0
    2dac:	d166      	bne.n	2e7c <cbvprintf+0xa38>
    2dae:	2f00      	cmp	r7, #0
    2db0:	f340 81af 	ble.w	3112 <cbvprintf+0xcce>
			*buf++ = '.';
    2db4:	222e      	movs	r2, #46	; 0x2e
    2db6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2dba:	b186      	cbz	r6, 2dde <cbvprintf+0x99a>
			conv->pad0_value = -decexp;
    2dbc:	4272      	negs	r2, r6
    2dbe:	42ba      	cmp	r2, r7
    2dc0:	bfa8      	it	ge
    2dc2:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    2dc4:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2dc8:	9213      	str	r2, [sp, #76]	; 0x4c
    2dca:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    2dcc:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    2dd0:	bfd4      	ite	le
    2dd2:	2200      	movle	r2, #0
    2dd4:	2201      	movgt	r2, #1
    2dd6:	f362 1145 	bfi	r1, r2, #5, #1
    2dda:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    2dde:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    2de2:	e037      	b.n	2e54 <cbvprintf+0xa10>
	bool prune_zero = false;
    2de4:	2300      	movs	r3, #0
    2de6:	e7ae      	b.n	2d46 <cbvprintf+0x902>
    2de8:	2300      	movs	r3, #0
    2dea:	e786      	b.n	2cfa <cbvprintf+0x8b6>
			decimals = 0;
    2dec:	f04f 0800 	mov.w	r8, #0
    2df0:	e7ba      	b.n	2d68 <cbvprintf+0x924>
	*v >>= 1;
    2df2:	0840      	lsrs	r0, r0, #1
    2df4:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    2df8:	085b      	lsrs	r3, r3, #1
    2dfa:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    2dfe:	a80e      	add	r0, sp, #56	; 0x38
    2e00:	9209      	str	r2, [sp, #36]	; 0x24
    2e02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2e06:	f007 faf7 	bl	a3f8 <_ldiv5>
    2e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    2e0c:	e7b3      	b.n	2d76 <cbvprintf+0x932>
	*v >>= 1;
    2e0e:	0852      	lsrs	r2, r2, #1
    2e10:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    2e14:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    2e16:	0849      	lsrs	r1, r1, #1
    2e18:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    2e1c:	3601      	adds	r6, #1
	_ldiv5(v);
    2e1e:	f007 faeb 	bl	a3f8 <_ldiv5>
		decexp++;
    2e22:	e7b6      	b.n	2d92 <cbvprintf+0x94e>
	char *buf = bps;
    2e24:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    2e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e2a:	2900      	cmp	r1, #0
    2e2c:	dd09      	ble.n	2e42 <cbvprintf+0x9fe>
				*buf++ = _get_digit(&fract, &digit_count);
    2e2e:	a90b      	add	r1, sp, #44	; 0x2c
    2e30:	a80c      	add	r0, sp, #48	; 0x30
    2e32:	9207      	str	r2, [sp, #28]
    2e34:	f007 faf8 	bl	a428 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2e38:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2e3a:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    2e3e:	9a07      	ldr	r2, [sp, #28]
    2e40:	d1f2      	bne.n	2e28 <cbvprintf+0x9e4>
			conv->pad0_value = decexp;
    2e42:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    2e44:	b99a      	cbnz	r2, 2e6e <cbvprintf+0xa2a>
    2e46:	2f00      	cmp	r7, #0
    2e48:	f340 8161 	ble.w	310e <cbvprintf+0xcca>
			*buf++ = '.';
    2e4c:	212e      	movs	r1, #46	; 0x2e
    2e4e:	f808 1b01 	strb.w	r1, [r8], #1
    2e52:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    2e54:	2f00      	cmp	r7, #0
    2e56:	dd1a      	ble.n	2e8e <cbvprintf+0xa4a>
    2e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2e5a:	2a00      	cmp	r2, #0
    2e5c:	dd17      	ble.n	2e8e <cbvprintf+0xa4a>
		*buf++ = _get_digit(&fract, &digit_count);
    2e5e:	a90b      	add	r1, sp, #44	; 0x2c
    2e60:	a80c      	add	r0, sp, #48	; 0x30
    2e62:	f007 fae1 	bl	a428 <_get_digit>
		precision--;
    2e66:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    2e68:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    2e6c:	e7f2      	b.n	2e54 <cbvprintf+0xa10>
			*buf++ = '.';
    2e6e:	222e      	movs	r2, #46	; 0x2e
    2e70:	f808 2b01 	strb.w	r2, [r8], #1
    2e74:	e7ed      	b.n	2e52 <cbvprintf+0xa0e>
    2e76:	bf00      	nop
    2e78:	0000d3a8 	.word	0x0000d3a8
    2e7c:	222e      	movs	r2, #46	; 0x2e
    2e7e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2e82:	2e00      	cmp	r6, #0
    2e84:	d0ab      	beq.n	2dde <cbvprintf+0x99a>
    2e86:	2f00      	cmp	r7, #0
    2e88:	dc98      	bgt.n	2dbc <cbvprintf+0x978>
			*buf++ = '.';
    2e8a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    2e8e:	9b05      	ldr	r3, [sp, #20]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d14e      	bne.n	2f32 <cbvprintf+0xaee>
	conv->pad0_pre_exp = precision;
    2e94:	9714      	str	r7, [sp, #80]	; 0x50
    2e96:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    2e98:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    2e9c:	2a45      	cmp	r2, #69	; 0x45
    2e9e:	d123      	bne.n	2ee8 <cbvprintf+0xaa4>
		if (decexp < 0) {
    2ea0:	2e00      	cmp	r6, #0
			decexp = -decexp;
    2ea2:	bfba      	itte	lt
    2ea4:	4276      	neglt	r6, r6
			*buf++ = '-';
    2ea6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2ea8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    2eaa:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    2eac:	bfc8      	it	gt
    2eae:	2164      	movgt	r1, #100	; 0x64
    2eb0:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    2eb2:	bfd1      	iteee	le
    2eb4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    2eb6:	fbb6 f3f1 	udivgt	r3, r6, r1
    2eba:	1cfa      	addgt	r2, r7, #3
    2ebc:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    2ec0:	bfc8      	it	gt
    2ec2:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    2ec6:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    2eca:	bfc8      	it	gt
    2ecc:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    2ece:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    2ed2:	fbb6 f3f1 	udiv	r3, r6, r1
    2ed6:	4617      	mov	r7, r2
    2ed8:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2edc:	fb01 6313 	mls	r3, r1, r3, r6
    2ee0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2ee2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    2ee6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    2ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2eea:	2b00      	cmp	r3, #0
    2eec:	dc2c      	bgt.n	2f48 <cbvprintf+0xb04>
    2eee:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	bfd4      	ite	le
    2ef4:	2300      	movle	r3, #0
    2ef6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2ef8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2efc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2f00:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2f02:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    2f06:	703b      	strb	r3, [r7, #0]
	return bps;
    2f08:	e696      	b.n	2c38 <cbvprintf+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
    2f0a:	a90b      	add	r1, sp, #44	; 0x2c
    2f0c:	a80c      	add	r0, sp, #48	; 0x30
    2f0e:	9207      	str	r2, [sp, #28]
    2f10:	f007 fa8a 	bl	a428 <_get_digit>
		if (*buf++ != '0') {
    2f14:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    2f16:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    2f1a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2f1c:	bf18      	it	ne
    2f1e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    2f22:	b912      	cbnz	r2, 2f2a <cbvprintf+0xae6>
    2f24:	2f00      	cmp	r7, #0
    2f26:	f340 80f4 	ble.w	3112 <cbvprintf+0xcce>
			*buf++ = '.';
    2f2a:	222e      	movs	r2, #46	; 0x2e
    2f2c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    2f30:	e755      	b.n	2dde <cbvprintf+0x99a>
		while (*--buf == '0') {
    2f32:	4647      	mov	r7, r8
    2f34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2f38:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2f3c:	2a30      	cmp	r2, #48	; 0x30
    2f3e:	d0f8      	beq.n	2f32 <cbvprintf+0xaee>
    2f40:	2a2e      	cmp	r2, #46	; 0x2e
    2f42:	bf08      	it	eq
    2f44:	4647      	moveq	r7, r8
    2f46:	e7a7      	b.n	2e98 <cbvprintf+0xa54>
		|| (conv->pad0_pre_exp > 0);
    2f48:	2301      	movs	r3, #1
    2f4a:	e7d5      	b.n	2ef8 <cbvprintf+0xab4>
			bpe = bps + 5;
    2f4c:	4f72      	ldr	r7, [pc, #456]	; (3118 <cbvprintf+0xcd4>)
		char sign = 0;
    2f4e:	4681      	mov	r9, r0
			bps = "(nil)";
    2f50:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    2f52:	2005      	movs	r0, #5
    2f54:	e5a2      	b.n	2a9c <cbvprintf+0x658>
		} else if (conv->altform_0) {
    2f56:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2f58:	bf48      	it	mi
    2f5a:	3001      	addmi	r0, #1
    2f5c:	e5a6      	b.n	2aac <cbvprintf+0x668>
					OUTC(pad);
    2f5e:	4610      	mov	r0, r2
    2f60:	9209      	str	r2, [sp, #36]	; 0x24
    2f62:	9903      	ldr	r1, [sp, #12]
    2f64:	47d0      	blx	sl
    2f66:	2800      	cmp	r0, #0
    2f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f6a:	da05      	bge.n	2f78 <cbvprintf+0xb34>
#undef OUTS
#undef OUTC
}
    2f6c:	b01f      	add	sp, #124	; 0x7c
    2f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2f72:	2220      	movs	r2, #32
					pad = '0';
    2f74:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    2f78:	4659      	mov	r1, fp
    2f7a:	2900      	cmp	r1, #0
    2f7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    2f80:	dced      	bgt.n	2f5e <cbvprintf+0xb1a>
    2f82:	9b04      	ldr	r3, [sp, #16]
    2f84:	f8cd b010 	str.w	fp, [sp, #16]
    2f88:	442b      	add	r3, r5
    2f8a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    2f8c:	f1b9 0f00 	cmp.w	r9, #0
    2f90:	d005      	beq.n	2f9e <cbvprintf+0xb5a>
			OUTC(sign);
    2f92:	9903      	ldr	r1, [sp, #12]
    2f94:	4648      	mov	r0, r9
    2f96:	47d0      	blx	sl
    2f98:	2800      	cmp	r0, #0
    2f9a:	dbe7      	blt.n	2f6c <cbvprintf+0xb28>
    2f9c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2f9e:	9b08      	ldr	r3, [sp, #32]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d079      	beq.n	3098 <cbvprintf+0xc54>
			if (conv->specifier_a) {
    2fa4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    2fa8:	2b00      	cmp	r3, #0
    2faa:	db29      	blt.n	3000 <cbvprintf+0xbbc>
				while (isdigit((int)*cp)) {
    2fac:	f8df 916c 	ldr.w	r9, [pc, #364]	; 311c <cbvprintf+0xcd8>
			if (conv->specifier_a) {
    2fb0:	4633      	mov	r3, r6
				while (isdigit((int)*cp)) {
    2fb2:	7818      	ldrb	r0, [r3, #0]
    2fb4:	f819 2000 	ldrb.w	r2, [r9, r0]
    2fb8:	0752      	lsls	r2, r2, #29
    2fba:	469b      	mov	fp, r3
    2fbc:	f103 0301 	add.w	r3, r3, #1
    2fc0:	d43f      	bmi.n	3042 <cbvprintf+0xbfe>
				if (!conv->pad_postdp) {
    2fc2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2fc6:	1bae      	subs	r6, r5, r6
    2fc8:	0698      	lsls	r0, r3, #26
    2fca:	445e      	add	r6, fp
    2fcc:	d407      	bmi.n	2fde <cbvprintf+0xb9a>
					while (pad_len-- > 0) {
    2fce:	4642      	mov	r2, r8
    2fd0:	2a00      	cmp	r2, #0
    2fd2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2fd6:	dc3b      	bgt.n	3050 <cbvprintf+0xc0c>
    2fd8:	9b07      	ldr	r3, [sp, #28]
    2fda:	4433      	add	r3, r6
    2fdc:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    2fde:	f89b 0000 	ldrb.w	r0, [fp]
    2fe2:	282e      	cmp	r0, #46	; 0x2e
    2fe4:	d10a      	bne.n	2ffc <cbvprintf+0xbb8>
					OUTC(*cp++);
    2fe6:	9903      	ldr	r1, [sp, #12]
    2fe8:	47d0      	blx	sl
						OUTC('0');
    2fea:	2800      	cmp	r0, #0
    2fec:	dbbe      	blt.n	2f6c <cbvprintf+0xb28>
					while (pad_len-- > 0) {
    2fee:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    2ff2:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    2ff6:	dc31      	bgt.n	305c <cbvprintf+0xc18>
					OUTC(*cp++);
    2ff8:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    2ffc:	465d      	mov	r5, fp
    2ffe:	e038      	b.n	3072 <cbvprintf+0xc2e>
    3000:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    3002:	f899 0000 	ldrb.w	r0, [r9]
    3006:	2870      	cmp	r0, #112	; 0x70
    3008:	46c8      	mov	r8, r9
    300a:	f109 0901 	add.w	r9, r9, #1
    300e:	d113      	bne.n	3038 <cbvprintf+0xbf4>
    3010:	1bae      	subs	r6, r5, r6
    3012:	9d14      	ldr	r5, [sp, #80]	; 0x50
    3014:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    3016:	4435      	add	r5, r6
    3018:	1bab      	subs	r3, r5, r6
    301a:	2b00      	cmp	r3, #0
    301c:	dc34      	bgt.n	3088 <cbvprintf+0xc44>
			OUTS(cp, bpe);
    301e:	9903      	ldr	r1, [sp, #12]
    3020:	463b      	mov	r3, r7
    3022:	4642      	mov	r2, r8
    3024:	4650      	mov	r0, sl
    3026:	f007 fa16 	bl	a456 <outs>
    302a:	2800      	cmp	r0, #0
    302c:	db9e      	blt.n	2f6c <cbvprintf+0xb28>
    302e:	4430      	add	r0, r6
    3030:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    3032:	4605      	mov	r5, r0
    3034:	4406      	add	r6, r0
    3036:	e065      	b.n	3104 <cbvprintf+0xcc0>
					OUTC(*cp++);
    3038:	9903      	ldr	r1, [sp, #12]
    303a:	47d0      	blx	sl
    303c:	2800      	cmp	r0, #0
    303e:	dae0      	bge.n	3002 <cbvprintf+0xbbe>
    3040:	e794      	b.n	2f6c <cbvprintf+0xb28>
    3042:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    3044:	9903      	ldr	r1, [sp, #12]
    3046:	47d0      	blx	sl
    3048:	2800      	cmp	r0, #0
    304a:	9b05      	ldr	r3, [sp, #20]
    304c:	dab1      	bge.n	2fb2 <cbvprintf+0xb6e>
    304e:	e78d      	b.n	2f6c <cbvprintf+0xb28>
						OUTC('0');
    3050:	9903      	ldr	r1, [sp, #12]
    3052:	2030      	movs	r0, #48	; 0x30
    3054:	47d0      	blx	sl
    3056:	2800      	cmp	r0, #0
    3058:	dab9      	bge.n	2fce <cbvprintf+0xb8a>
    305a:	e787      	b.n	2f6c <cbvprintf+0xb28>
						OUTC('0');
    305c:	9903      	ldr	r1, [sp, #12]
    305e:	2030      	movs	r0, #48	; 0x30
    3060:	47d0      	blx	sl
    3062:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3066:	e7c0      	b.n	2fea <cbvprintf+0xba6>
					OUTC(*cp++);
    3068:	9903      	ldr	r1, [sp, #12]
    306a:	47d0      	blx	sl
    306c:	2800      	cmp	r0, #0
    306e:	f6ff af7d 	blt.w	2f6c <cbvprintf+0xb28>
				while (isdigit((int)*cp)) {
    3072:	7828      	ldrb	r0, [r5, #0]
    3074:	f819 3000 	ldrb.w	r3, [r9, r0]
    3078:	0759      	lsls	r1, r3, #29
    307a:	46a8      	mov	r8, r5
    307c:	f105 0501 	add.w	r5, r5, #1
    3080:	d4f2      	bmi.n	3068 <cbvprintf+0xc24>
    3082:	eba6 060b 	sub.w	r6, r6, fp
    3086:	e7c4      	b.n	3012 <cbvprintf+0xbce>
				OUTC('0');
    3088:	9903      	ldr	r1, [sp, #12]
    308a:	2030      	movs	r0, #48	; 0x30
    308c:	47d0      	blx	sl
    308e:	2800      	cmp	r0, #0
    3090:	f6ff af6c 	blt.w	2f6c <cbvprintf+0xb28>
    3094:	3601      	adds	r6, #1
    3096:	e7bf      	b.n	3018 <cbvprintf+0xbd4>
			if (conv->altform_0c | conv->altform_0) {
    3098:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    309c:	06da      	lsls	r2, r3, #27
    309e:	d401      	bmi.n	30a4 <cbvprintf+0xc60>
    30a0:	071b      	lsls	r3, r3, #28
    30a2:	d506      	bpl.n	30b2 <cbvprintf+0xc6e>
				OUTC('0');
    30a4:	9903      	ldr	r1, [sp, #12]
    30a6:	2030      	movs	r0, #48	; 0x30
    30a8:	47d0      	blx	sl
    30aa:	2800      	cmp	r0, #0
    30ac:	f6ff af5e 	blt.w	2f6c <cbvprintf+0xb28>
    30b0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    30b2:	9b05      	ldr	r3, [sp, #20]
    30b4:	b13b      	cbz	r3, 30c6 <cbvprintf+0xc82>
				OUTC(conv->specifier);
    30b6:	9903      	ldr	r1, [sp, #12]
    30b8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    30bc:	47d0      	blx	sl
    30be:	2800      	cmp	r0, #0
    30c0:	f6ff af54 	blt.w	2f6c <cbvprintf+0xb28>
    30c4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    30c6:	44a8      	add	r8, r5
    30c8:	e006      	b.n	30d8 <cbvprintf+0xc94>
				OUTC('0');
    30ca:	9903      	ldr	r1, [sp, #12]
    30cc:	2030      	movs	r0, #48	; 0x30
    30ce:	47d0      	blx	sl
    30d0:	2800      	cmp	r0, #0
    30d2:	f6ff af4b 	blt.w	2f6c <cbvprintf+0xb28>
    30d6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    30d8:	eba8 0305 	sub.w	r3, r8, r5
    30dc:	2b00      	cmp	r3, #0
    30de:	dcf4      	bgt.n	30ca <cbvprintf+0xc86>
			OUTS(bps, bpe);
    30e0:	9903      	ldr	r1, [sp, #12]
    30e2:	463b      	mov	r3, r7
    30e4:	4632      	mov	r2, r6
    30e6:	4650      	mov	r0, sl
    30e8:	f007 f9b5 	bl	a456 <outs>
    30ec:	2800      	cmp	r0, #0
    30ee:	f6ff af3d 	blt.w	2f6c <cbvprintf+0xb28>
    30f2:	4428      	add	r0, r5
    30f4:	e79c      	b.n	3030 <cbvprintf+0xbec>
			OUTC(' ');
    30f6:	9903      	ldr	r1, [sp, #12]
    30f8:	2020      	movs	r0, #32
    30fa:	47d0      	blx	sl
    30fc:	2800      	cmp	r0, #0
    30fe:	f6ff af35 	blt.w	2f6c <cbvprintf+0xb28>
    3102:	3501      	adds	r5, #1
		while (width > 0) {
    3104:	1b73      	subs	r3, r6, r5
    3106:	2b00      	cmp	r3, #0
    3108:	dcf5      	bgt.n	30f6 <cbvprintf+0xcb2>
    310a:	f7ff bbdc 	b.w	28c6 <cbvprintf+0x482>
			decexp = 0;
    310e:	4616      	mov	r6, r2
    3110:	e6bd      	b.n	2e8e <cbvprintf+0xa4a>
		if (*buf++ != '0') {
    3112:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    3116:	e6ba      	b.n	2e8e <cbvprintf+0xa4a>
    3118:	0000bd56 	.word	0x0000bd56
    311c:	0000d3a9 	.word	0x0000d3a9

00003120 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    3120:	b508      	push	{r3, lr}
	__asm__ volatile(
    3122:	f04f 0220 	mov.w	r2, #32
    3126:	f3ef 8311 	mrs	r3, BASEPRI
    312a:	f382 8812 	msr	BASEPRI_MAX, r2
    312e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    3132:	f001 fd7b 	bl	4c2c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    3136:	4803      	ldr	r0, [pc, #12]	; (3144 <sys_reboot+0x24>)
    3138:	f007 f82f 	bl	a19a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    313c:	f000 fe62 	bl	3e04 <arch_cpu_idle>
    3140:	e7fc      	b.n	313c <sys_reboot+0x1c>
    3142:	bf00      	nop
    3144:	0000bd57 	.word	0x0000bd57

00003148 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    3148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    314a:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    314c:	460c      	mov	r4, r1
    314e:	b929      	cbnz	r1, 315c <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3150:	4d0e      	ldr	r5, [pc, #56]	; (318c <msg_process+0x44>)
    3152:	4b0f      	ldr	r3, [pc, #60]	; (3190 <msg_process+0x48>)
    3154:	1b5b      	subs	r3, r3, r5
    3156:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    3158:	42bc      	cmp	r4, r7
    315a:	db00      	blt.n	315e <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    315e:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    3160:	795b      	ldrb	r3, [r3, #5]
    3162:	b17b      	cbz	r3, 3184 <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    3164:	b94e      	cbnz	r6, 317a <msg_process+0x32>
    3166:	490b      	ldr	r1, [pc, #44]	; (3194 <msg_process+0x4c>)
    3168:	480b      	ldr	r0, [pc, #44]	; (3198 <msg_process+0x50>)
    316a:	4a0c      	ldr	r2, [pc, #48]	; (319c <msg_process+0x54>)
    316c:	2386      	movs	r3, #134	; 0x86
    316e:	f007 f990 	bl	a492 <assert_print>
    3172:	480a      	ldr	r0, [pc, #40]	; (319c <msg_process+0x54>)
    3174:	2186      	movs	r1, #134	; 0x86
    3176:	f007 f985 	bl	a484 <assert_post_action>
	backend->api->process(backend, msg);
    317a:	682b      	ldr	r3, [r5, #0]
    317c:	4631      	mov	r1, r6
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	4628      	mov	r0, r5
    3182:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3184:	3401      	adds	r4, #1
    3186:	3510      	adds	r5, #16
    3188:	e7e6      	b.n	3158 <msg_process+0x10>
    318a:	bf00      	nop
    318c:	0000b4bc 	.word	0x0000b4bc
    3190:	0000b4dc 	.word	0x0000b4dc
    3194:	0000bdb8 	.word	0x0000bdb8
    3198:	0000b9c2 	.word	0x0000b9c2
    319c:	0000bd80 	.word	0x0000bd80

000031a0 <log_format_func_t_get>:
}
    31a0:	4b01      	ldr	r3, [pc, #4]	; (31a8 <log_format_func_t_get+0x8>)
    31a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    31a6:	4770      	bx	lr
    31a8:	0000b580 	.word	0x0000b580

000031ac <log_core_init>:
	panic_mode = false;
    31ac:	4a05      	ldr	r2, [pc, #20]	; (31c4 <log_core_init+0x18>)
    31ae:	2300      	movs	r3, #0
    31b0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    31b2:	4a05      	ldr	r2, [pc, #20]	; (31c8 <log_core_init+0x1c>)
    31b4:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    31b6:	4b05      	ldr	r3, [pc, #20]	; (31cc <log_core_init+0x20>)
    31b8:	4a05      	ldr	r2, [pc, #20]	; (31d0 <log_core_init+0x24>)
    31ba:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    31bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    31c0:	f000 ba96 	b.w	36f0 <log_output_timestamp_freq_set>
    31c4:	20011106 	.word	0x20011106
    31c8:	200047e4 	.word	0x200047e4
    31cc:	20000004 	.word	0x20000004
    31d0:	0000a4af 	.word	0x0000a4af

000031d4 <log_init>:
{
    31d4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    31d6:	4b19      	ldr	r3, [pc, #100]	; (323c <log_init+0x68>)
    31d8:	4c19      	ldr	r4, [pc, #100]	; (3240 <log_init+0x6c>)
    31da:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    31dc:	2c90      	cmp	r4, #144	; 0x90
    31de:	d90b      	bls.n	31f8 <log_init+0x24>
    31e0:	4918      	ldr	r1, [pc, #96]	; (3244 <log_init+0x70>)
    31e2:	4819      	ldr	r0, [pc, #100]	; (3248 <log_init+0x74>)
    31e4:	4a19      	ldr	r2, [pc, #100]	; (324c <log_init+0x78>)
    31e6:	f240 2373 	movw	r3, #627	; 0x273
    31ea:	f007 f952 	bl	a492 <assert_print>
    31ee:	4817      	ldr	r0, [pc, #92]	; (324c <log_init+0x78>)
    31f0:	f240 2173 	movw	r1, #627	; 0x273
    31f4:	f007 f946 	bl	a484 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    31f8:	f3bf 8f5b 	dmb	ish
    31fc:	4b14      	ldr	r3, [pc, #80]	; (3250 <log_init+0x7c>)
    31fe:	e853 6f00 	ldrex	r6, [r3]
    3202:	1c72      	adds	r2, r6, #1
    3204:	e843 2100 	strex	r1, r2, [r3]
    3208:	2900      	cmp	r1, #0
    320a:	d1f8      	bne.n	31fe <log_init+0x2a>
    320c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3210:	b91e      	cbnz	r6, 321a <log_init+0x46>
    3212:	1125      	asrs	r5, r4, #4
    3214:	4c09      	ldr	r4, [pc, #36]	; (323c <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    3216:	42ae      	cmp	r6, r5
    3218:	db00      	blt.n	321c <log_init+0x48>
}
    321a:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    321c:	7b23      	ldrb	r3, [r4, #12]
    321e:	b153      	cbz	r3, 3236 <log_init+0x62>
			if (backend->api->init != NULL) {
    3220:	6823      	ldr	r3, [r4, #0]
    3222:	699b      	ldr	r3, [r3, #24]
    3224:	b10b      	cbz	r3, 322a <log_init+0x56>
				backend->api->init(backend);
    3226:	4620      	mov	r0, r4
    3228:	4798      	blx	r3
			log_backend_enable(backend,
    322a:	6863      	ldr	r3, [r4, #4]
    322c:	2204      	movs	r2, #4
    322e:	6819      	ldr	r1, [r3, #0]
    3230:	4620      	mov	r0, r4
    3232:	f000 f86f 	bl	3314 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3236:	3601      	adds	r6, #1
    3238:	3410      	adds	r4, #16
    323a:	e7ec      	b.n	3216 <log_init+0x42>
    323c:	0000b4bc 	.word	0x0000b4bc
    3240:	0000b4dc 	.word	0x0000b4dc
    3244:	0000be10 	.word	0x0000be10
    3248:	0000b9c2 	.word	0x0000b9c2
    324c:	0000bdcb 	.word	0x0000bdcb
    3250:	200047ec 	.word	0x200047ec

00003254 <z_impl_log_panic>:
{
    3254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3256:	4f0c      	ldr	r7, [pc, #48]	; (3288 <z_impl_log_panic+0x34>)
    3258:	783d      	ldrb	r5, [r7, #0]
    325a:	b94d      	cbnz	r5, 3270 <z_impl_log_panic+0x1c>
    325c:	4c0b      	ldr	r4, [pc, #44]	; (328c <z_impl_log_panic+0x38>)
    325e:	4e0c      	ldr	r6, [pc, #48]	; (3290 <z_impl_log_panic+0x3c>)
	log_init();
    3260:	f7ff ffb8 	bl	31d4 <log_init>
    3264:	1b36      	subs	r6, r6, r4
    3266:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3268:	42b5      	cmp	r5, r6
    326a:	db02      	blt.n	3272 <z_impl_log_panic+0x1e>
	panic_mode = true;
    326c:	2301      	movs	r3, #1
    326e:	703b      	strb	r3, [r7, #0]
}
    3270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3272:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3274:	795b      	ldrb	r3, [r3, #5]
    3276:	b11b      	cbz	r3, 3280 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    3278:	6823      	ldr	r3, [r4, #0]
    327a:	4620      	mov	r0, r4
    327c:	695b      	ldr	r3, [r3, #20]
    327e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3280:	3501      	adds	r5, #1
    3282:	3410      	adds	r4, #16
    3284:	e7f0      	b.n	3268 <z_impl_log_panic+0x14>
    3286:	bf00      	nop
    3288:	20011106 	.word	0x20011106
    328c:	0000b4bc 	.word	0x0000b4bc
    3290:	0000b4dc 	.word	0x0000b4dc

00003294 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3294:	4b01      	ldr	r3, [pc, #4]	; (329c <z_log_notify_backend_enabled+0x8>)
    3296:	2201      	movs	r2, #1
    3298:	701a      	strb	r2, [r3, #0]
}
    329a:	4770      	bx	lr
    329c:	20011105 	.word	0x20011105

000032a0 <z_log_dropped>:
    32a0:	4b0c      	ldr	r3, [pc, #48]	; (32d4 <z_log_dropped+0x34>)
    32a2:	f3bf 8f5b 	dmb	ish
    32a6:	e853 1f00 	ldrex	r1, [r3]
    32aa:	3101      	adds	r1, #1
    32ac:	e843 1200 	strex	r2, r1, [r3]
    32b0:	2a00      	cmp	r2, #0
    32b2:	d1f8      	bne.n	32a6 <z_log_dropped+0x6>
    32b4:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    32b8:	b158      	cbz	r0, 32d2 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    32ba:	f3bf 8f5b 	dmb	ish
    32be:	4b06      	ldr	r3, [pc, #24]	; (32d8 <z_log_dropped+0x38>)
    32c0:	e853 1f00 	ldrex	r1, [r3]
    32c4:	3901      	subs	r1, #1
    32c6:	e843 1200 	strex	r2, r1, [r3]
    32ca:	2a00      	cmp	r2, #0
    32cc:	d1f8      	bne.n	32c0 <z_log_dropped+0x20>
    32ce:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    32d2:	4770      	bx	lr
    32d4:	200047e4 	.word	0x200047e4
    32d8:	200047e8 	.word	0x200047e8

000032dc <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    32dc:	4b05      	ldr	r3, [pc, #20]	; (32f4 <z_log_msg2_commit+0x18>)
{
    32de:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    32e0:	681b      	ldr	r3, [r3, #0]
{
    32e2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    32e4:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    32e6:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    32e8:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    32ea:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    32ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    32f0:	f7ff bf2a 	b.w	3148 <msg_process>
    32f4:	20000004 	.word	0x20000004

000032f8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    32f8:	4a04      	ldr	r2, [pc, #16]	; (330c <log_source_name_get+0x14>)
    32fa:	4b05      	ldr	r3, [pc, #20]	; (3310 <log_source_name_get+0x18>)
    32fc:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    32fe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3302:	bf34      	ite	cc
    3304:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3308:	2000      	movcs	r0, #0
}
    330a:	4770      	bx	lr
    330c:	0000b474 	.word	0x0000b474
    3310:	0000b4bc 	.word	0x0000b4bc

00003314 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3314:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3316:	4c10      	ldr	r4, [pc, #64]	; (3358 <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3318:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    331a:	1b04      	subs	r4, r0, r4
    331c:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    331e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    3320:	3401      	adds	r4, #1
{
    3322:	4605      	mov	r5, r0
    3324:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    3326:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3328:	b963      	cbnz	r3, 3344 <log_backend_enable+0x30>
    332a:	490c      	ldr	r1, [pc, #48]	; (335c <log_backend_enable+0x48>)
    332c:	4a0c      	ldr	r2, [pc, #48]	; (3360 <log_backend_enable+0x4c>)
    332e:	480d      	ldr	r0, [pc, #52]	; (3364 <log_backend_enable+0x50>)
    3330:	23bb      	movs	r3, #187	; 0xbb
    3332:	f007 f8ae 	bl	a492 <assert_print>
    3336:	480c      	ldr	r0, [pc, #48]	; (3368 <log_backend_enable+0x54>)
    3338:	f007 f8ab 	bl	a492 <assert_print>
    333c:	4808      	ldr	r0, [pc, #32]	; (3360 <log_backend_enable+0x4c>)
    333e:	21bb      	movs	r1, #187	; 0xbb
    3340:	f007 f8a0 	bl	a484 <assert_post_action>
	backend->cb->id = id;
    3344:	686b      	ldr	r3, [r5, #4]
    3346:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    3348:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    334a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    334c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    334e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    3350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    3354:	f7ff bf9e 	b.w	3294 <z_log_notify_backend_enabled>
    3358:	0000b4bc 	.word	0x0000b4bc
    335c:	0000be90 	.word	0x0000be90
    3360:	0000be38 	.word	0x0000be38
    3364:	0000b9c2 	.word	0x0000b9c2
    3368:	0000bea6 	.word	0x0000bea6

0000336c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    336c:	b40e      	push	{r1, r2, r3}
    336e:	b503      	push	{r0, r1, lr}
    3370:	ab03      	add	r3, sp, #12
    3372:	4601      	mov	r1, r0
    3374:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3378:	4804      	ldr	r0, [pc, #16]	; (338c <print_formatted+0x20>)
	va_start(args, fmt);
    337a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    337c:	f7ff f862 	bl	2444 <cbvprintf>
	va_end(args);

	return length;
}
    3380:	b002      	add	sp, #8
    3382:	f85d eb04 	ldr.w	lr, [sp], #4
    3386:	b003      	add	sp, #12
    3388:	4770      	bx	lr
    338a:	bf00      	nop
    338c:	0000a4e1 	.word	0x0000a4e1

00003390 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3394:	b087      	sub	sp, #28
    3396:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3398:	f001 0301 	and.w	r3, r1, #1
{
    339c:	9205      	str	r2, [sp, #20]
    339e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    33a2:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    33a6:	9304      	str	r3, [sp, #16]
{
    33a8:	4607      	mov	r7, r0
    33aa:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    33ac:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    33b0:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    33b4:	f007 f892 	bl	a4dc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    33b8:	4602      	mov	r2, r0
    33ba:	2800      	cmp	r0, #0
    33bc:	d040      	beq.n	3440 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    33be:	4937      	ldr	r1, [pc, #220]	; (349c <prefix_print+0x10c>)
    33c0:	4638      	mov	r0, r7
    33c2:	f7ff ffd3 	bl	336c <print_formatted>
    33c6:	4605      	mov	r5, r0
	}

	if (stamp) {
    33c8:	f1bb 0f00 	cmp.w	fp, #0
    33cc:	d008      	beq.n	33e0 <prefix_print+0x50>
	if (!format) {
    33ce:	f018 0f44 	tst.w	r8, #68	; 0x44
    33d2:	d137      	bne.n	3444 <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    33d4:	4932      	ldr	r1, [pc, #200]	; (34a0 <prefix_print+0x110>)
    33d6:	4622      	mov	r2, r4
    33d8:	4638      	mov	r0, r7
    33da:	f7ff ffc7 	bl	336c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    33de:	4405      	add	r5, r0
	if (color) {
    33e0:	9b04      	ldr	r3, [sp, #16]
    33e2:	b153      	cbz	r3, 33fa <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    33e4:	4b2f      	ldr	r3, [pc, #188]	; (34a4 <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    33e6:	4930      	ldr	r1, [pc, #192]	; (34a8 <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    33e8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    33ec:	4b2f      	ldr	r3, [pc, #188]	; (34ac <prefix_print+0x11c>)
    33ee:	4638      	mov	r0, r7
    33f0:	2a00      	cmp	r2, #0
    33f2:	bf08      	it	eq
    33f4:	461a      	moveq	r2, r3
    33f6:	f7ff ffb9 	bl	336c <print_formatted>
	if (level_on) {
    33fa:	b13e      	cbz	r6, 340c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    33fc:	4b2c      	ldr	r3, [pc, #176]	; (34b0 <prefix_print+0x120>)
    33fe:	492d      	ldr	r1, [pc, #180]	; (34b4 <prefix_print+0x124>)
    3400:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    3404:	4638      	mov	r0, r7
    3406:	f7ff ffb1 	bl	336c <print_formatted>
    340a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    340c:	f1ba 0f00 	cmp.w	sl, #0
    3410:	db12      	blt.n	3438 <prefix_print+0xa8>
		total += print_formatted(output,
    3412:	9b05      	ldr	r3, [sp, #20]
    3414:	4c28      	ldr	r4, [pc, #160]	; (34b8 <prefix_print+0x128>)
    3416:	b123      	cbz	r3, 3422 <prefix_print+0x92>
    3418:	4b28      	ldr	r3, [pc, #160]	; (34bc <prefix_print+0x12c>)
    341a:	f1b9 0f04 	cmp.w	r9, #4
    341e:	bf08      	it	eq
    3420:	461c      	moveq	r4, r3
    3422:	4651      	mov	r1, sl
    3424:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    3428:	f7ff ff66 	bl	32f8 <log_source_name_get>
    342c:	4621      	mov	r1, r4
    342e:	4602      	mov	r2, r0
    3430:	4638      	mov	r0, r7
    3432:	f7ff ff9b 	bl	336c <print_formatted>
    3436:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    3438:	1970      	adds	r0, r6, r5
    343a:	b007      	add	sp, #28
    343c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3440:	4605      	mov	r5, r0
    3442:	e7c1      	b.n	33c8 <prefix_print+0x38>
	} else if (freq != 0U) {
    3444:	4b1e      	ldr	r3, [pc, #120]	; (34c0 <prefix_print+0x130>)
    3446:	6818      	ldr	r0, [r3, #0]
    3448:	2800      	cmp	r0, #0
    344a:	d0c8      	beq.n	33de <prefix_print+0x4e>
		timestamp /= timestamp_div;
    344c:	4b1d      	ldr	r3, [pc, #116]	; (34c4 <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    344e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    3458:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    345c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    3460:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    3464:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    3468:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    346c:	fbb3 f2f1 	udiv	r2, r3, r1
    3470:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3474:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    3478:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    347c:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    3480:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3484:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    3488:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    348a:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    348e:	490e      	ldr	r1, [pc, #56]	; (34c8 <prefix_print+0x138>)
    3490:	e9cd e401 	strd	lr, r4, [sp, #4]
    3494:	4638      	mov	r0, r7
    3496:	f7ff ff69 	bl	336c <print_formatted>
    349a:	e7a0      	b.n	33de <prefix_print+0x4e>
    349c:	0000bed6 	.word	0x0000bed6
    34a0:	0000beda 	.word	0x0000beda
    34a4:	0000b58c 	.word	0x0000b58c
    34a8:	0000beff 	.word	0x0000beff
    34ac:	0000bec8 	.word	0x0000bec8
    34b0:	0000b5a0 	.word	0x0000b5a0
    34b4:	0000bf02 	.word	0x0000bf02
    34b8:	0000bed1 	.word	0x0000bed1
    34bc:	0000becd 	.word	0x0000becd
    34c0:	200047f4 	.word	0x200047f4
    34c4:	200047f0 	.word	0x200047f0
    34c8:	0000bee3 	.word	0x0000bee3

000034cc <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    34cc:	06ca      	lsls	r2, r1, #27
    34ce:	d405      	bmi.n	34dc <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    34d0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    34d2:	bf4c      	ite	mi
    34d4:	4902      	ldrmi	r1, [pc, #8]	; (34e0 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    34d6:	4903      	ldrpl	r1, [pc, #12]	; (34e4 <newline_print+0x18>)
    34d8:	f7ff bf48 	b.w	336c <print_formatted>
}
    34dc:	4770      	bx	lr
    34de:	bf00      	nop
    34e0:	0000cfff 	.word	0x0000cfff
    34e4:	0000bf08 	.word	0x0000bf08

000034e8 <hexdump_line_print>:
{
    34e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    34ec:	460f      	mov	r7, r1
	newline_print(output, flags);
    34ee:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    34f0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 35ac <hexdump_line_print+0xc4>
{
    34f4:	4604      	mov	r4, r0
    34f6:	4616      	mov	r6, r2
    34f8:	461d      	mov	r5, r3
	newline_print(output, flags);
    34fa:	f7ff ffe7 	bl	34cc <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    34fe:	f04f 0800 	mov.w	r8, #0
    3502:	45a8      	cmp	r8, r5
    3504:	db28      	blt.n	3558 <hexdump_line_print+0x70>
		if (i < length) {
    3506:	b376      	cbz	r6, 3566 <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    3508:	783a      	ldrb	r2, [r7, #0]
    350a:	4929      	ldr	r1, [pc, #164]	; (35b0 <hexdump_line_print+0xc8>)
    350c:	4620      	mov	r0, r4
    350e:	f7ff ff2d 	bl	336c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3512:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    3514:	076a      	lsls	r2, r5, #29
    3516:	d103      	bne.n	3520 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    3518:	4924      	ldr	r1, [pc, #144]	; (35ac <hexdump_line_print+0xc4>)
    351a:	4620      	mov	r0, r4
    351c:	f7ff ff26 	bl	336c <print_formatted>
		if (i < length) {
    3520:	42b5      	cmp	r5, r6
    3522:	d225      	bcs.n	3570 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    3524:	5d7a      	ldrb	r2, [r7, r5]
    3526:	4922      	ldr	r1, [pc, #136]	; (35b0 <hexdump_line_print+0xc8>)
    3528:	4620      	mov	r0, r4
    352a:	f7ff ff1f 	bl	336c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    352e:	3501      	adds	r5, #1
    3530:	2d10      	cmp	r5, #16
    3532:	d1ef      	bne.n	3514 <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    3534:	491f      	ldr	r1, [pc, #124]	; (35b4 <hexdump_line_print+0xcc>)
    3536:	4620      	mov	r0, r4
    3538:	f7ff ff18 	bl	336c <print_formatted>
		if (i < length) {
    353c:	b9ee      	cbnz	r6, 357a <hexdump_line_print+0x92>
			print_formatted(output, " ");
    353e:	491b      	ldr	r1, [pc, #108]	; (35ac <hexdump_line_print+0xc4>)
    3540:	4620      	mov	r0, r4
    3542:	f7ff ff13 	bl	336c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3546:	2501      	movs	r5, #1
		if (i < length) {
    3548:	42b5      	cmp	r5, r6
    354a:	462b      	mov	r3, r5
    354c:	d317      	bcc.n	357e <hexdump_line_print+0x96>
			print_formatted(output, " ");
    354e:	4917      	ldr	r1, [pc, #92]	; (35ac <hexdump_line_print+0xc4>)
    3550:	4620      	mov	r0, r4
    3552:	f7ff ff0b 	bl	336c <print_formatted>
    3556:	e01d      	b.n	3594 <hexdump_line_print+0xac>
		print_formatted(output, " ");
    3558:	4649      	mov	r1, r9
    355a:	4620      	mov	r0, r4
    355c:	f7ff ff06 	bl	336c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3560:	f108 0801 	add.w	r8, r8, #1
    3564:	e7cd      	b.n	3502 <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    3566:	4914      	ldr	r1, [pc, #80]	; (35b8 <hexdump_line_print+0xd0>)
    3568:	4620      	mov	r0, r4
    356a:	f7ff feff 	bl	336c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    356e:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    3570:	4911      	ldr	r1, [pc, #68]	; (35b8 <hexdump_line_print+0xd0>)
    3572:	4620      	mov	r0, r4
    3574:	f7ff fefa 	bl	336c <print_formatted>
    3578:	e7d9      	b.n	352e <hexdump_line_print+0x46>
		if (i < length) {
    357a:	2500      	movs	r5, #0
    357c:	462b      	mov	r3, r5
			char c = (char)data[i];
    357e:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
    3580:	4b0e      	ldr	r3, [pc, #56]	; (35bc <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
    3582:	490f      	ldr	r1, [pc, #60]	; (35c0 <hexdump_line_print+0xd8>)
    3584:	5c9b      	ldrb	r3, [r3, r2]
    3586:	f013 0f97 	tst.w	r3, #151	; 0x97
    358a:	bf08      	it	eq
    358c:	222e      	moveq	r2, #46	; 0x2e
    358e:	4620      	mov	r0, r4
    3590:	f7ff feec 	bl	336c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3594:	3501      	adds	r5, #1
    3596:	2d10      	cmp	r5, #16
    3598:	d006      	beq.n	35a8 <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
    359a:	076b      	lsls	r3, r5, #29
    359c:	d1d4      	bne.n	3548 <hexdump_line_print+0x60>
			print_formatted(output, " ");
    359e:	4903      	ldr	r1, [pc, #12]	; (35ac <hexdump_line_print+0xc4>)
    35a0:	4620      	mov	r0, r4
    35a2:	f7ff fee3 	bl	336c <print_formatted>
    35a6:	e7cf      	b.n	3548 <hexdump_line_print+0x60>
}
    35a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    35ac:	0000bf13 	.word	0x0000bf13
    35b0:	0000bf0b 	.word	0x0000bf0b
    35b4:	0000bf15 	.word	0x0000bf15
    35b8:	0000bf11 	.word	0x0000bf11
    35bc:	0000d3a9 	.word	0x0000d3a9
    35c0:	0000bf17 	.word	0x0000bf17

000035c4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    35c4:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    35c6:	07cb      	lsls	r3, r1, #31
{
    35c8:	4605      	mov	r5, r0
    35ca:	460c      	mov	r4, r1
	if (color) {
    35cc:	d503      	bpl.n	35d6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    35ce:	4a05      	ldr	r2, [pc, #20]	; (35e4 <postfix_print+0x20>)
    35d0:	4905      	ldr	r1, [pc, #20]	; (35e8 <postfix_print+0x24>)
    35d2:	f7ff fecb 	bl	336c <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    35d6:	4621      	mov	r1, r4
    35d8:	4628      	mov	r0, r5
}
    35da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    35de:	f7ff bf75 	b.w	34cc <newline_print>
    35e2:	bf00      	nop
    35e4:	0000bec8 	.word	0x0000bec8
    35e8:	0000beff 	.word	0x0000beff

000035ec <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    35ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    35f0:	460e      	mov	r6, r1
    35f2:	4690      	mov	r8, r2
    35f4:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    35f8:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    35fa:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    35fe:	4607      	mov	r7, r0
    3600:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    3602:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    3606:	d023      	beq.n	3650 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    3608:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    360a:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    360c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    3610:	b1d8      	cbz	r0, 364a <log_output_msg2_process+0x5e>
    3612:	4930      	ldr	r1, [pc, #192]	; (36d4 <log_output_msg2_process+0xe8>)
    3614:	1a40      	subs	r0, r0, r1
    3616:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    361a:	e9cd 2001 	strd	r2, r0, [sp, #4]
    361e:	f8cd 9000 	str.w	r9, [sp]
    3622:	2200      	movs	r2, #0
    3624:	4641      	mov	r1, r8
    3626:	4638      	mov	r0, r7
    3628:	f7ff feb2 	bl	3390 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    362c:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    362e:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3632:	4682      	mov	sl, r0
	if (len) {
    3634:	b9b3      	cbnz	r3, 3664 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    3636:	886c      	ldrh	r4, [r5, #2]
    3638:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    363c:	b9f4      	cbnz	r4, 367c <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    363e:	464a      	mov	r2, r9
    3640:	4641      	mov	r1, r8
    3642:	4638      	mov	r0, r7
    3644:	f7ff ffbe 	bl	35c4 <postfix_print>
    3648:	e02e      	b.n	36a8 <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    364a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    364e:	e7e4      	b.n	361a <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    3650:	680b      	ldr	r3, [r1, #0]
	if (len) {
    3652:	f3c3 2349 	ubfx	r3, r3, #9, #10
    3656:	bb6b      	cbnz	r3, 36b4 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    3658:	884c      	ldrh	r4, [r1, #2]
    365a:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    365e:	b31c      	cbz	r4, 36a8 <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    3660:	46ca      	mov	sl, r9
    3662:	e00b      	b.n	367c <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3664:	481c      	ldr	r0, [pc, #112]	; (36d8 <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3666:	491d      	ldr	r1, [pc, #116]	; (36dc <log_output_msg2_process+0xf0>)
    3668:	4633      	mov	r3, r6
    366a:	463a      	mov	r2, r7
    366c:	f006 fd53 	bl	a116 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    3670:	2800      	cmp	r0, #0
    3672:	db22      	blt.n	36ba <log_output_msg2_process+0xce>
    3674:	886c      	ldrh	r4, [r5, #2]
    3676:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    367a:	b194      	cbz	r4, 36a2 <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    367c:	682b      	ldr	r3, [r5, #0]
    367e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    3682:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3684:	2c10      	cmp	r4, #16
    3686:	4625      	mov	r5, r4
    3688:	bf28      	it	cs
    368a:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    368c:	4631      	mov	r1, r6
    368e:	f8cd 8000 	str.w	r8, [sp]
    3692:	4653      	mov	r3, sl
    3694:	462a      	mov	r2, r5
    3696:	4638      	mov	r0, r7
    3698:	f7ff ff26 	bl	34e8 <hexdump_line_print>
	} while (len);
    369c:	1b64      	subs	r4, r4, r5
		data += length;
    369e:	442e      	add	r6, r5
	} while (len);
    36a0:	d1f0      	bne.n	3684 <log_output_msg2_process+0x98>
	if (!raw_string) {
    36a2:	f1b9 0f00 	cmp.w	r9, #0
    36a6:	d1ca      	bne.n	363e <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    36a8:	4638      	mov	r0, r7
}
    36aa:	b004      	add	sp, #16
    36ac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    36b0:	f006 bf3e 	b.w	a530 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    36b4:	480a      	ldr	r0, [pc, #40]	; (36e0 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    36b6:	46ca      	mov	sl, r9
    36b8:	e7d5      	b.n	3666 <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    36ba:	4a0a      	ldr	r2, [pc, #40]	; (36e4 <log_output_msg2_process+0xf8>)
    36bc:	490a      	ldr	r1, [pc, #40]	; (36e8 <log_output_msg2_process+0xfc>)
    36be:	480b      	ldr	r0, [pc, #44]	; (36ec <log_output_msg2_process+0x100>)
    36c0:	f240 23b7 	movw	r3, #695	; 0x2b7
    36c4:	f006 fee5 	bl	a492 <assert_print>
    36c8:	4806      	ldr	r0, [pc, #24]	; (36e4 <log_output_msg2_process+0xf8>)
    36ca:	f240 21b7 	movw	r1, #695	; 0x2b7
    36ce:	f006 fed9 	bl	a484 <assert_post_action>
    36d2:	e7cf      	b.n	3674 <log_output_msg2_process+0x88>
    36d4:	0000b474 	.word	0x0000b474
    36d8:	0000a4e1 	.word	0x0000a4e1
    36dc:	00002445 	.word	0x00002445
    36e0:	0000a4fd 	.word	0x0000a4fd
    36e4:	0000bf1a 	.word	0x0000bf1a
    36e8:	0000bf56 	.word	0x0000bf56
    36ec:	0000b9c2 	.word	0x0000b9c2

000036f0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    36f0:	4a07      	ldr	r2, [pc, #28]	; (3710 <log_output_timestamp_freq_set+0x20>)
    36f2:	2100      	movs	r1, #0
    36f4:	2301      	movs	r3, #1
    36f6:	4290      	cmp	r0, r2
    36f8:	d806      	bhi.n	3708 <log_output_timestamp_freq_set+0x18>
    36fa:	4a06      	ldr	r2, [pc, #24]	; (3714 <log_output_timestamp_freq_set+0x24>)
    36fc:	b901      	cbnz	r1, 3700 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    36fe:	2301      	movs	r3, #1
    3700:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3702:	4b05      	ldr	r3, [pc, #20]	; (3718 <log_output_timestamp_freq_set+0x28>)
    3704:	6018      	str	r0, [r3, #0]
}
    3706:	4770      	bx	lr
		frequency /= 2U;
    3708:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    370a:	005b      	lsls	r3, r3, #1
    370c:	2101      	movs	r1, #1
    370e:	e7f2      	b.n	36f6 <log_output_timestamp_freq_set+0x6>
    3710:	000f4240 	.word	0x000f4240
    3714:	200047f0 	.word	0x200047f0
    3718:	200047f4 	.word	0x200047f4

0000371c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3720:	b085      	sub	sp, #20
    3722:	af02      	add	r7, sp, #8
    3724:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    3728:	4604      	mov	r4, r0
    372a:	4688      	mov	r8, r1
    372c:	4693      	mov	fp, r2
    372e:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    3730:	2e00      	cmp	r6, #0
    3732:	d04e      	beq.n	37d2 <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    3734:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3738:	f8cd a000 	str.w	sl, [sp]
    373c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    373e:	4633      	mov	r3, r6
    3740:	2110      	movs	r1, #16
    3742:	2000      	movs	r0, #0
    3744:	f7fd ffb0 	bl	16a8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3748:	1e05      	subs	r5, r0, #0
    374a:	da09      	bge.n	3760 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    374c:	4922      	ldr	r1, [pc, #136]	; (37d8 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    374e:	4823      	ldr	r0, [pc, #140]	; (37dc <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    3750:	4a23      	ldr	r2, [pc, #140]	; (37e0 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3752:	2367      	movs	r3, #103	; 0x67
    3754:	f006 fe9d 	bl	a492 <assert_print>
    3758:	4821      	ldr	r0, [pc, #132]	; (37e0 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    375a:	2167      	movs	r1, #103	; 0x67
    375c:	f006 fe92 	bl	a484 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3760:	4b20      	ldr	r3, [pc, #128]	; (37e4 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    3762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3764:	f004 0407 	and.w	r4, r4, #7
    3768:	f00b 0b07 	and.w	fp, fp, #7
    376c:	00e4      	lsls	r4, r4, #3
    376e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    3772:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    3776:	431c      	orrs	r4, r3
    3778:	4b1b      	ldr	r3, [pc, #108]	; (37e8 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    377a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    377e:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3780:	4613      	mov	r3, r2
    3782:	3317      	adds	r3, #23
    3784:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3786:	f023 0307 	bic.w	r3, r3, #7
    378a:	ebad 0d03 	sub.w	sp, sp, r3
    378e:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3792:	b1a6      	cbz	r6, 37be <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3794:	f8cd a000 	str.w	sl, [sp]
    3798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    379a:	4633      	mov	r3, r6
    379c:	4629      	mov	r1, r5
    379e:	f10b 0010 	add.w	r0, fp, #16
    37a2:	f7fd ff81 	bl	16a8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    37a6:	2800      	cmp	r0, #0
    37a8:	da09      	bge.n	37be <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    37aa:	490b      	ldr	r1, [pc, #44]	; (37d8 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    37ac:	480b      	ldr	r0, [pc, #44]	; (37dc <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    37ae:	4a0c      	ldr	r2, [pc, #48]	; (37e0 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    37b0:	2381      	movs	r3, #129	; 0x81
    37b2:	f006 fe6e 	bl	a492 <assert_print>
    37b6:	480a      	ldr	r0, [pc, #40]	; (37e0 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    37b8:	2181      	movs	r1, #129	; 0x81
    37ba:	f006 fe63 	bl	a484 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    37be:	464b      	mov	r3, r9
    37c0:	4622      	mov	r2, r4
    37c2:	4641      	mov	r1, r8
    37c4:	4658      	mov	r0, fp
    37c6:	f006 fec0 	bl	a54a <z_log_msg2_finalize>
	}
}
    37ca:	370c      	adds	r7, #12
    37cc:	46bd      	mov	sp, r7
    37ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    37d2:	4635      	mov	r5, r6
    37d4:	e7c4      	b.n	3760 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    37d6:	bf00      	nop
    37d8:	0000bfac 	.word	0x0000bfac
    37dc:	0000b9c2 	.word	0x0000b9c2
    37e0:	0000bf7f 	.word	0x0000bf7f
    37e4:	0007fe00 	.word	0x0007fe00
    37e8:	7ff80000 	.word	0x7ff80000

000037ec <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    37ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    37ee:	4f07      	ldr	r7, [pc, #28]	; (380c <char_out+0x20>)
{
    37f0:	460d      	mov	r5, r1
    37f2:	4604      	mov	r4, r0
    37f4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    37f6:	42b4      	cmp	r4, r6
    37f8:	d101      	bne.n	37fe <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    37fa:	4628      	mov	r0, r5
    37fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    37fe:	6838      	ldr	r0, [r7, #0]
    3800:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    3804:	6883      	ldr	r3, [r0, #8]
    3806:	69db      	ldr	r3, [r3, #28]
    3808:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    380a:	e7f4      	b.n	37f6 <char_out+0xa>
    380c:	20004810 	.word	0x20004810

00003810 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3810:	4b01      	ldr	r3, [pc, #4]	; (3818 <format_set+0x8>)
	return 0;
}
    3812:	2000      	movs	r0, #0
	log_format_current = log_type;
    3814:	6019      	str	r1, [r3, #0]
}
    3816:	4770      	bx	lr
    3818:	2000480c 	.word	0x2000480c

0000381c <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    381c:	4b02      	ldr	r3, [pc, #8]	; (3828 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    381e:	4803      	ldr	r0, [pc, #12]	; (382c <panic+0x10>)
    3820:	2201      	movs	r2, #1
    3822:	701a      	strb	r2, [r3, #0]
    3824:	f006 be84 	b.w	a530 <log_output_flush>
    3828:	20011108 	.word	0x20011108
    382c:	0000b5d4 	.word	0x0000b5d4

00003830 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3830:	4b06      	ldr	r3, [pc, #24]	; (384c <process+0x1c>)
{
    3832:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3834:	6818      	ldr	r0, [r3, #0]
{
    3836:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3838:	f7ff fcb2 	bl	31a0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    383c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    383e:	4603      	mov	r3, r0
}
    3840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    3844:	4802      	ldr	r0, [pc, #8]	; (3850 <process+0x20>)
    3846:	220f      	movs	r2, #15
    3848:	4718      	bx	r3
    384a:	bf00      	nop
    384c:	2000480c 	.word	0x2000480c
    3850:	0000b5d4 	.word	0x0000b5d4

00003854 <log_backend_uart_init>:
{
    3854:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3856:	4b09      	ldr	r3, [pc, #36]	; (387c <log_backend_uart_init+0x28>)
    3858:	4809      	ldr	r0, [pc, #36]	; (3880 <log_backend_uart_init+0x2c>)
    385a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    385c:	f007 faf7 	bl	ae4e <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3860:	b958      	cbnz	r0, 387a <log_backend_uart_init+0x26>
    3862:	4908      	ldr	r1, [pc, #32]	; (3884 <log_backend_uart_init+0x30>)
    3864:	4808      	ldr	r0, [pc, #32]	; (3888 <log_backend_uart_init+0x34>)
    3866:	4a09      	ldr	r2, [pc, #36]	; (388c <log_backend_uart_init+0x38>)
    3868:	2379      	movs	r3, #121	; 0x79
    386a:	f006 fe12 	bl	a492 <assert_print>
}
    386e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3872:	4806      	ldr	r0, [pc, #24]	; (388c <log_backend_uart_init+0x38>)
    3874:	2179      	movs	r1, #121	; 0x79
    3876:	f006 be05 	b.w	a484 <assert_post_action>
}
    387a:	bd08      	pop	{r3, pc}
    387c:	20004810 	.word	0x20004810
    3880:	0000b2dc 	.word	0x0000b2dc
    3884:	0000bfeb 	.word	0x0000bfeb
    3888:	0000b9c2 	.word	0x0000b9c2
    388c:	0000bfb6 	.word	0x0000bfb6

00003890 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3890:	4b01      	ldr	r3, [pc, #4]	; (3898 <log_backend_rtt_init+0x8>)
    3892:	2201      	movs	r2, #1
    3894:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3896:	4770      	bx	lr
    3898:	20011109 	.word	0x20011109

0000389c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    389c:	4b01      	ldr	r3, [pc, #4]	; (38a4 <format_set+0x8>)
	return 0;
}
    389e:	2000      	movs	r0, #0
	log_format_current = log_type;
    38a0:	6019      	str	r1, [r3, #0]
}
    38a2:	4770      	bx	lr
    38a4:	20004828 	.word	0x20004828

000038a8 <panic>:
	panic_mode = true;
    38a8:	4b02      	ldr	r3, [pc, #8]	; (38b4 <panic+0xc>)
    38aa:	4803      	ldr	r0, [pc, #12]	; (38b8 <panic+0x10>)
    38ac:	2201      	movs	r2, #1
    38ae:	701a      	strb	r2, [r3, #0]
    38b0:	f006 be3e 	b.w	a530 <log_output_flush>
    38b4:	2001110a 	.word	0x2001110a
    38b8:	0000b604 	.word	0x0000b604

000038bc <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    38bc:	4b06      	ldr	r3, [pc, #24]	; (38d8 <process+0x1c>)
{
    38be:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    38c0:	6818      	ldr	r0, [r3, #0]
{
    38c2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    38c4:	f7ff fc6c 	bl	31a0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    38c8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    38ca:	4603      	mov	r3, r0
}
    38cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    38d0:	4802      	ldr	r0, [pc, #8]	; (38dc <process+0x20>)
    38d2:	220f      	movs	r2, #15
    38d4:	4718      	bx	r3
    38d6:	bf00      	nop
    38d8:	20004828 	.word	0x20004828
    38dc:	0000b604 	.word	0x0000b604

000038e0 <data_out_block_mode>:
{
    38e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38e2:	4d19      	ldr	r5, [pc, #100]	; (3948 <data_out_block_mode+0x68>)
    38e4:	4607      	mov	r7, r0
    38e6:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    38e8:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    38ea:	4632      	mov	r2, r6
    38ec:	4639      	mov	r1, r7
    38ee:	2000      	movs	r0, #0
    38f0:	f003 fc16 	bl	7120 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    38f4:	b1c8      	cbz	r0, 392a <data_out_block_mode+0x4a>
	host_present = true;
    38f6:	2301      	movs	r3, #1
    38f8:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    38fa:	4b14      	ldr	r3, [pc, #80]	; (394c <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    38fc:	781b      	ldrb	r3, [r3, #0]
    38fe:	b92b      	cbnz	r3, 390c <data_out_block_mode+0x2c>
}
    3900:	4630      	mov	r0, r6
    3902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    3904:	b95c      	cbnz	r4, 391e <data_out_block_mode+0x3e>
		host_present = false;
    3906:	702c      	strb	r4, [r5, #0]
    3908:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    390c:	2000      	movs	r0, #0
    390e:	f003 fc4f 	bl	71b0 <SEGGER_RTT_HasDataUp>
    3912:	2800      	cmp	r0, #0
    3914:	d0f4      	beq.n	3900 <data_out_block_mode+0x20>
    3916:	782b      	ldrb	r3, [r5, #0]
    3918:	2b00      	cmp	r3, #0
    391a:	d1f3      	bne.n	3904 <data_out_block_mode+0x24>
    391c:	e7f0      	b.n	3900 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    391e:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    3920:	f241 3088 	movw	r0, #5000	; 0x1388
    3924:	f007 fb11 	bl	af4a <z_impl_k_busy_wait>
}
    3928:	e7f0      	b.n	390c <data_out_block_mode+0x2c>
		} else if (host_present) {
    392a:	782b      	ldrb	r3, [r5, #0]
    392c:	b113      	cbz	r3, 3934 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    392e:	3c01      	subs	r4, #1
    3930:	d104      	bne.n	393c <data_out_block_mode+0x5c>
		host_present = false;
    3932:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    3934:	782b      	ldrb	r3, [r5, #0]
    3936:	2b00      	cmp	r3, #0
    3938:	d1d7      	bne.n	38ea <data_out_block_mode+0xa>
    393a:	e7e1      	b.n	3900 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    393c:	f241 3088 	movw	r0, #5000	; 0x1388
    3940:	f007 fb03 	bl	af4a <z_impl_k_busy_wait>
    3944:	e7f6      	b.n	3934 <data_out_block_mode+0x54>
    3946:	bf00      	nop
    3948:	20011109 	.word	0x20011109
    394c:	2001110a 	.word	0x2001110a

00003950 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3954:	4605      	mov	r5, r0
    3956:	f04f 0320 	mov.w	r3, #32
    395a:	f3ef 8611 	mrs	r6, BASEPRI
    395e:	f383 8812 	msr	BASEPRI_MAX, r3
    3962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3966:	4821      	ldr	r0, [pc, #132]	; (39ec <pm_state_notify+0x9c>)
    3968:	f004 f802 	bl	7970 <z_spin_lock_valid>
    396c:	b968      	cbnz	r0, 398a <pm_state_notify+0x3a>
    396e:	4a20      	ldr	r2, [pc, #128]	; (39f0 <pm_state_notify+0xa0>)
    3970:	4920      	ldr	r1, [pc, #128]	; (39f4 <pm_state_notify+0xa4>)
    3972:	4821      	ldr	r0, [pc, #132]	; (39f8 <pm_state_notify+0xa8>)
    3974:	238e      	movs	r3, #142	; 0x8e
    3976:	f006 fd8c 	bl	a492 <assert_print>
    397a:	491c      	ldr	r1, [pc, #112]	; (39ec <pm_state_notify+0x9c>)
    397c:	481f      	ldr	r0, [pc, #124]	; (39fc <pm_state_notify+0xac>)
    397e:	f006 fd88 	bl	a492 <assert_print>
    3982:	481b      	ldr	r0, [pc, #108]	; (39f0 <pm_state_notify+0xa0>)
    3984:	218e      	movs	r1, #142	; 0x8e
    3986:	f006 fd7d 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    398a:	4818      	ldr	r0, [pc, #96]	; (39ec <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    398c:	4f1c      	ldr	r7, [pc, #112]	; (3a00 <pm_state_notify+0xb0>)
    398e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3a04 <pm_state_notify+0xb4>
    3992:	f004 f80b 	bl	79ac <z_spin_lock_set_owner>
	return list->head;
    3996:	4b1c      	ldr	r3, [pc, #112]	; (3a08 <pm_state_notify+0xb8>)
    3998:	681c      	ldr	r4, [r3, #0]
    399a:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    399e:	b9bc      	cbnz	r4, 39d0 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    39a0:	4812      	ldr	r0, [pc, #72]	; (39ec <pm_state_notify+0x9c>)
    39a2:	f003 fff3 	bl	798c <z_spin_unlock_valid>
    39a6:	b968      	cbnz	r0, 39c4 <pm_state_notify+0x74>
    39a8:	4a11      	ldr	r2, [pc, #68]	; (39f0 <pm_state_notify+0xa0>)
    39aa:	4918      	ldr	r1, [pc, #96]	; (3a0c <pm_state_notify+0xbc>)
    39ac:	4812      	ldr	r0, [pc, #72]	; (39f8 <pm_state_notify+0xa8>)
    39ae:	23b9      	movs	r3, #185	; 0xb9
    39b0:	f006 fd6f 	bl	a492 <assert_print>
    39b4:	490d      	ldr	r1, [pc, #52]	; (39ec <pm_state_notify+0x9c>)
    39b6:	4816      	ldr	r0, [pc, #88]	; (3a10 <pm_state_notify+0xc0>)
    39b8:	f006 fd6b 	bl	a492 <assert_print>
    39bc:	480c      	ldr	r0, [pc, #48]	; (39f0 <pm_state_notify+0xa0>)
    39be:	21b9      	movs	r1, #185	; 0xb9
    39c0:	f006 fd60 	bl	a484 <assert_post_action>
	__asm__ volatile(
    39c4:	f386 8811 	msr	BASEPRI, r6
    39c8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    39cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    39d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    39d4:	2d00      	cmp	r5, #0
    39d6:	bf18      	it	ne
    39d8:	4613      	movne	r3, r2
		if (callback) {
    39da:	b12b      	cbz	r3, 39e8 <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    39dc:	f898 2014 	ldrb.w	r2, [r8, #20]
    39e0:	fb09 f202 	mul.w	r2, r9, r2
    39e4:	5cb8      	ldrb	r0, [r7, r2]
    39e6:	4798      	blx	r3
	return node->next;
    39e8:	6824      	ldr	r4, [r4, #0]
    39ea:	e7d8      	b.n	399e <pm_state_notify+0x4e>
    39ec:	2000482c 	.word	0x2000482c
    39f0:	0000bb0c 	.word	0x0000bb0c
    39f4:	0000bb65 	.word	0x0000bb65
    39f8:	0000b9c2 	.word	0x0000b9c2
    39fc:	0000bb7a 	.word	0x0000bb7a
    3a00:	20004834 	.word	0x20004834
    3a04:	20004edc 	.word	0x20004edc
    3a08:	20004840 	.word	0x20004840
    3a0c:	0000bb39 	.word	0x0000bb39
    3a10:	0000bb50 	.word	0x0000bb50

00003a14 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a14:	4a0a      	ldr	r2, [pc, #40]	; (3a40 <atomic_clear_bit.constprop.0+0x2c>)
    3a16:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a1a:	0943      	lsrs	r3, r0, #5
    3a1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3a20:	f000 001f 	and.w	r0, r0, #31
    3a24:	2301      	movs	r3, #1
    3a26:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a28:	43db      	mvns	r3, r3
    3a2a:	e852 0f00 	ldrex	r0, [r2]
    3a2e:	4018      	ands	r0, r3
    3a30:	e842 0100 	strex	r1, r0, [r2]
    3a34:	2900      	cmp	r1, #0
    3a36:	d1f8      	bne.n	3a2a <atomic_clear_bit.constprop.0+0x16>
    3a38:	f3bf 8f5b 	dmb	ish
}
    3a3c:	4770      	bx	lr
    3a3e:	bf00      	nop
    3a40:	20004830 	.word	0x20004830

00003a44 <pm_system_resume>:

void pm_system_resume(void)
{
    3a44:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    3a46:	4b19      	ldr	r3, [pc, #100]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a48:	7d1c      	ldrb	r4, [r3, #20]
    3a4a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    3a4e:	f004 031f 	and.w	r3, r4, #31
    3a52:	2201      	movs	r2, #1
    3a54:	409a      	lsls	r2, r3
    3a56:	4b16      	ldr	r3, [pc, #88]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3a58:	0961      	lsrs	r1, r4, #5
    3a5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3a5e:	43d0      	mvns	r0, r2
    3a60:	e853 1f00 	ldrex	r1, [r3]
    3a64:	ea01 0500 	and.w	r5, r1, r0
    3a68:	e843 5600 	strex	r6, r5, [r3]
    3a6c:	2e00      	cmp	r6, #0
    3a6e:	d1f7      	bne.n	3a60 <pm_system_resume+0x1c>
    3a70:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3a74:	420a      	tst	r2, r1
    3a76:	d013      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	if (pm_state_exit_post_ops != NULL) {
    3a78:	4b0e      	ldr	r3, [pc, #56]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a7a:	4d0f      	ldr	r5, [pc, #60]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a7c:	b18b      	cbz	r3, 3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3a7e:	230c      	movs	r3, #12
    3a80:	4363      	muls	r3, r4
    3a82:	18ea      	adds	r2, r5, r3
    3a84:	5ce8      	ldrb	r0, [r5, r3]
    3a86:	7851      	ldrb	r1, [r2, #1]
    3a88:	f006 fdcb 	bl	a622 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3a8c:	2000      	movs	r0, #0
    3a8e:	f7ff ff5f 	bl	3950 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3a92:	230c      	movs	r3, #12
    3a94:	435c      	muls	r4, r3
    3a96:	192a      	adds	r2, r5, r4
    3a98:	2300      	movs	r3, #0
    3a9a:	512b      	str	r3, [r5, r4]
    3a9c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3aa0:	bd70      	pop	{r4, r5, r6, pc}
    3aa2:	f383 8811 	msr	BASEPRI, r3
    3aa6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3aaa:	e7ef      	b.n	3a8c <pm_system_resume+0x48>
    3aac:	20004edc 	.word	0x20004edc
    3ab0:	20004848 	.word	0x20004848
    3ab4:	0000a623 	.word	0x0000a623
    3ab8:	20004834 	.word	0x20004834

00003abc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3ac0:	4b32      	ldr	r3, [pc, #200]	; (3b8c <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ac2:	4a33      	ldr	r2, [pc, #204]	; (3b90 <pm_system_suspend+0xd4>)
    3ac4:	7d1c      	ldrb	r4, [r3, #20]
    3ac6:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3aca:	0963      	lsrs	r3, r4, #5
    3acc:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ad4:	4e2f      	ldr	r6, [pc, #188]	; (3b94 <pm_system_suspend+0xd8>)
    3ad6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3ada:	f004 091f 	and.w	r9, r4, #31
    3ade:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3ae2:	f013 0f01 	tst.w	r3, #1
{
    3ae6:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3ae8:	d10a      	bne.n	3b00 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    3aea:	4601      	mov	r1, r0
    3aec:	4620      	mov	r0, r4
    3aee:	f000 f869 	bl	3bc4 <pm_policy_next_state>
		if (info != NULL) {
    3af2:	b128      	cbz	r0, 3b00 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    3af4:	c807      	ldmia	r0, {r0, r1, r2}
    3af6:	230c      	movs	r3, #12
    3af8:	fb03 6304 	mla	r3, r3, r4, r6
    3afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3b00:	230c      	movs	r3, #12
    3b02:	4363      	muls	r3, r4
    3b04:	18f2      	adds	r2, r6, r3
    3b06:	5cf5      	ldrb	r5, [r6, r3]
    3b08:	b92d      	cbnz	r5, 3b16 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    3b0a:	4620      	mov	r0, r4
    3b0c:	f7ff ff82 	bl	3a14 <atomic_clear_bit.constprop.0>
		ret = false;
    3b10:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    3b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    3b16:	1c7b      	adds	r3, r7, #1
    3b18:	d010      	beq.n	3b3c <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3b1a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3b1e:	4d1e      	ldr	r5, [pc, #120]	; (3b98 <pm_system_suspend+0xdc>)
    3b20:	4a1e      	ldr	r2, [pc, #120]	; (3b9c <pm_system_suspend+0xe0>)
    3b22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3b26:	2100      	movs	r1, #0
    3b28:	fbec 5100 	umlal	r5, r1, ip, r0
    3b2c:	2300      	movs	r3, #0
    3b2e:	4628      	mov	r0, r5
    3b30:	f7fc ff04 	bl	93c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3b34:	2101      	movs	r1, #1
    3b36:	1a38      	subs	r0, r7, r0
    3b38:	f005 fd22 	bl	9580 <z_set_timeout_expiry>
	k_sched_lock();
    3b3c:	f004 fc1c 	bl	8378 <k_sched_lock>
	pm_state_notify(true);
    3b40:	2001      	movs	r0, #1
    3b42:	f7ff ff05 	bl	3950 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b46:	f3bf 8f5b 	dmb	ish
    3b4a:	4b15      	ldr	r3, [pc, #84]	; (3ba0 <pm_system_suspend+0xe4>)
    3b4c:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3b4e:	2301      	movs	r3, #1
    3b50:	fa03 f309 	lsl.w	r3, r3, r9
    3b54:	e858 2f00 	ldrex	r2, [r8]
    3b58:	431a      	orrs	r2, r3
    3b5a:	e848 2100 	strex	r1, r2, [r8]
    3b5e:	2900      	cmp	r1, #0
    3b60:	d1f8      	bne.n	3b54 <pm_system_suspend+0x98>
    3b62:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3b66:	4b0f      	ldr	r3, [pc, #60]	; (3ba4 <pm_system_suspend+0xe8>)
    3b68:	b133      	cbz	r3, 3b78 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    3b6a:	230c      	movs	r3, #12
    3b6c:	4363      	muls	r3, r4
    3b6e:	18f2      	adds	r2, r6, r3
    3b70:	5cf0      	ldrb	r0, [r6, r3]
    3b72:	7851      	ldrb	r1, [r2, #1]
    3b74:	f006 fd49 	bl	a60a <pm_state_set>
	pm_system_resume();
    3b78:	f7ff ff64 	bl	3a44 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3b7c:	4620      	mov	r0, r4
    3b7e:	f7ff ff49 	bl	3a14 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    3b82:	f004 fc6d 	bl	8460 <k_sched_unlock>
	bool ret = true;
    3b86:	2001      	movs	r0, #1
    3b88:	e7c3      	b.n	3b12 <pm_system_suspend+0x56>
    3b8a:	bf00      	nop
    3b8c:	20004edc 	.word	0x20004edc
    3b90:	20004830 	.word	0x20004830
    3b94:	20004834 	.word	0x20004834
    3b98:	000f423f 	.word	0x000f423f
    3b9c:	000f4240 	.word	0x000f4240
    3ba0:	20004848 	.word	0x20004848
    3ba4:	0000a60b 	.word	0x0000a60b

00003ba8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ba8:	4b05      	ldr	r3, [pc, #20]	; (3bc0 <pm_policy_state_lock_is_active+0x18>)
    3baa:	f3bf 8f5b 	dmb	ish
    3bae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3bb2:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3bb6:	3800      	subs	r0, #0
    3bb8:	bf18      	it	ne
    3bba:	2001      	movne	r0, #1
    3bbc:	4770      	bx	lr
    3bbe:	bf00      	nop
    3bc0:	2000484c 	.word	0x2000484c

00003bc4 <pm_policy_next_state>:
{
    3bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bc8:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3bca:	a901      	add	r1, sp, #4
    3bcc:	f000 f842 	bl	3c54 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3bd0:	1e44      	subs	r4, r0, #1
    3bd2:	b224      	sxth	r4, r4
    3bd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3bd8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3c48 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3bdc:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3bde:	00a4      	lsls	r4, r4, #2
    3be0:	b925      	cbnz	r5, 3bec <pm_policy_next_state+0x28>
	return NULL;
    3be2:	462f      	mov	r7, r5
}
    3be4:	4638      	mov	r0, r7
    3be6:	b003      	add	sp, #12
    3be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3bec:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    3bee:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    3bf0:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    3bf2:	f7ff ffd9 	bl	3ba8 <pm_policy_state_lock_is_active>
    3bf6:	4606      	mov	r6, r0
    3bf8:	bb10      	cbnz	r0, 3c40 <pm_policy_next_state+0x7c>
    3bfa:	6878      	ldr	r0, [r7, #4]
    3bfc:	4a13      	ldr	r2, [pc, #76]	; (3c4c <pm_policy_next_state+0x88>)
    3bfe:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    3c02:	46cc      	mov	ip, r9
    3c04:	4631      	mov	r1, r6
    3c06:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3c0a:	2300      	movs	r3, #0
    3c0c:	4660      	mov	r0, ip
    3c0e:	f7fc fe95 	bl	93c <__aeabi_uldivmod>
    3c12:	4683      	mov	fp, r0
    3c14:	68b8      	ldr	r0, [r7, #8]
    3c16:	4a0d      	ldr	r2, [pc, #52]	; (3c4c <pm_policy_next_state+0x88>)
    3c18:	46cc      	mov	ip, r9
    3c1a:	4631      	mov	r1, r6
    3c1c:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3c20:	2300      	movs	r3, #0
    3c22:	4660      	mov	r0, ip
    3c24:	f7fc fe8a 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3c28:	4b09      	ldr	r3, [pc, #36]	; (3c50 <pm_policy_next_state+0x8c>)
    3c2a:	681b      	ldr	r3, [r3, #0]
    3c2c:	1c5a      	adds	r2, r3, #1
    3c2e:	d001      	beq.n	3c34 <pm_policy_next_state+0x70>
    3c30:	4283      	cmp	r3, r0
    3c32:	d905      	bls.n	3c40 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    3c34:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3c38:	d0d4      	beq.n	3be4 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    3c3a:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    3c3c:	4540      	cmp	r0, r8
    3c3e:	d9d1      	bls.n	3be4 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3c40:	3d01      	subs	r5, #1
    3c42:	b2ad      	uxth	r5, r5
    3c44:	3c0c      	subs	r4, #12
    3c46:	e7cb      	b.n	3be0 <pm_policy_next_state+0x1c>
    3c48:	000f423f 	.word	0x000f423f
    3c4c:	000f4240 	.word	0x000f4240
    3c50:	20000008 	.word	0x20000008

00003c54 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3c54:	b908      	cbnz	r0, 3c5a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3c56:	4b02      	ldr	r3, [pc, #8]	; (3c60 <pm_state_cpu_get_all+0xc>)
    3c58:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3c5a:	2000      	movs	r0, #0
    3c5c:	4770      	bx	lr
    3c5e:	bf00      	nop
    3c60:	0000b614 	.word	0x0000b614

00003c64 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3c64:	4801      	ldr	r0, [pc, #4]	; (3c6c <nrf_cc3xx_platform_abort_init+0x8>)
    3c66:	f006 b8c7 	b.w	9df8 <nrf_cc3xx_platform_set_abort>
    3c6a:	bf00      	nop
    3c6c:	0000b614 	.word	0x0000b614

00003c70 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3c70:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3c72:	4604      	mov	r4, r0
    3c74:	b918      	cbnz	r0, 3c7e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3c76:	4b0d      	ldr	r3, [pc, #52]	; (3cac <mutex_free_platform+0x3c>)
    3c78:	480d      	ldr	r0, [pc, #52]	; (3cb0 <mutex_free_platform+0x40>)
    3c7a:	685b      	ldr	r3, [r3, #4]
    3c7c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3c7e:	6861      	ldr	r1, [r4, #4]
    3c80:	f031 0304 	bics.w	r3, r1, #4
    3c84:	d00c      	beq.n	3ca0 <mutex_free_platform+0x30>
    3c86:	2908      	cmp	r1, #8
    3c88:	d00a      	beq.n	3ca0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3c8a:	f011 0102 	ands.w	r1, r1, #2
    3c8e:	d008      	beq.n	3ca2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3c90:	4808      	ldr	r0, [pc, #32]	; (3cb4 <mutex_free_platform+0x44>)
    3c92:	4621      	mov	r1, r4
    3c94:	f003 fccc 	bl	7630 <k_mem_slab_free>
        mutex->mutex = NULL;
    3c98:	2300      	movs	r3, #0
    3c9a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3c9c:	2300      	movs	r3, #0
    3c9e:	6063      	str	r3, [r4, #4]
}
    3ca0:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3ca2:	6820      	ldr	r0, [r4, #0]
    3ca4:	2214      	movs	r2, #20
    3ca6:	f007 fa8a 	bl	b1be <memset>
    3caa:	e7f7      	b.n	3c9c <mutex_free_platform+0x2c>
    3cac:	2000014c 	.word	0x2000014c
    3cb0:	0000c032 	.word	0x0000c032
    3cb4:	20004d68 	.word	0x20004d68

00003cb8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3cb8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3cba:	b308      	cbz	r0, 3d00 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3cbc:	6843      	ldr	r3, [r0, #4]
    3cbe:	2b04      	cmp	r3, #4
    3cc0:	d110      	bne.n	3ce4 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3cc2:	2201      	movs	r2, #1
    3cc4:	6803      	ldr	r3, [r0, #0]
    3cc6:	f3bf 8f5b 	dmb	ish
    3cca:	e853 1f00 	ldrex	r1, [r3]
    3cce:	2900      	cmp	r1, #0
    3cd0:	d103      	bne.n	3cda <mutex_lock_platform+0x22>
    3cd2:	e843 2000 	strex	r0, r2, [r3]
    3cd6:	2800      	cmp	r0, #0
    3cd8:	d1f7      	bne.n	3cca <mutex_lock_platform+0x12>
    3cda:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cde:	d10b      	bne.n	3cf8 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3ce0:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3ce2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3ce4:	b153      	cbz	r3, 3cfc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ce6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cf0:	f003 fe96 	bl	7a20 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3cf4:	2800      	cmp	r0, #0
    3cf6:	d0f3      	beq.n	3ce0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3cf8:	4803      	ldr	r0, [pc, #12]	; (3d08 <mutex_lock_platform+0x50>)
    3cfa:	e7f2      	b.n	3ce2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3cfc:	4803      	ldr	r0, [pc, #12]	; (3d0c <mutex_lock_platform+0x54>)
    3cfe:	e7f0      	b.n	3ce2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3d00:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3d04:	e7ed      	b.n	3ce2 <mutex_lock_platform+0x2a>
    3d06:	bf00      	nop
    3d08:	ffff8fe9 	.word	0xffff8fe9
    3d0c:	ffff8fea 	.word	0xffff8fea

00003d10 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3d12:	b1c0      	cbz	r0, 3d46 <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3d14:	6843      	ldr	r3, [r0, #4]
    3d16:	2b04      	cmp	r3, #4
    3d18:	d110      	bne.n	3d3c <mutex_unlock_platform+0x2c>
    3d1a:	2200      	movs	r2, #0
    3d1c:	6803      	ldr	r3, [r0, #0]
    3d1e:	f3bf 8f5b 	dmb	ish
    3d22:	e853 1f00 	ldrex	r1, [r3]
    3d26:	2901      	cmp	r1, #1
    3d28:	d103      	bne.n	3d32 <mutex_unlock_platform+0x22>
    3d2a:	e843 2000 	strex	r0, r2, [r3]
    3d2e:	2800      	cmp	r0, #0
    3d30:	d1f7      	bne.n	3d22 <mutex_unlock_platform+0x12>
    3d32:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d36:	d109      	bne.n	3d4c <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3d38:	2000      	movs	r0, #0
    }
}
    3d3a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3d3c:	b143      	cbz	r3, 3d50 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3d3e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3d40:	f003 ff68 	bl	7c14 <z_impl_k_mutex_unlock>
    3d44:	e7f8      	b.n	3d38 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3d46:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3d4a:	e7f6      	b.n	3d3a <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d4c:	4801      	ldr	r0, [pc, #4]	; (3d54 <mutex_unlock_platform+0x44>)
    3d4e:	e7f4      	b.n	3d3a <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3d50:	4801      	ldr	r0, [pc, #4]	; (3d58 <mutex_unlock_platform+0x48>)
    3d52:	e7f2      	b.n	3d3a <mutex_unlock_platform+0x2a>
    3d54:	ffff8fe9 	.word	0xffff8fe9
    3d58:	ffff8fea 	.word	0xffff8fea

00003d5c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d5c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3d5e:	4604      	mov	r4, r0
    3d60:	b918      	cbnz	r0, 3d6a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3d62:	4b16      	ldr	r3, [pc, #88]	; (3dbc <mutex_init_platform+0x60>)
    3d64:	4816      	ldr	r0, [pc, #88]	; (3dc0 <mutex_init_platform+0x64>)
    3d66:	685b      	ldr	r3, [r3, #4]
    3d68:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3d6a:	6863      	ldr	r3, [r4, #4]
    3d6c:	2b04      	cmp	r3, #4
    3d6e:	d023      	beq.n	3db8 <mutex_init_platform+0x5c>
    3d70:	2b08      	cmp	r3, #8
    3d72:	d021      	beq.n	3db8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3d74:	b9cb      	cbnz	r3, 3daa <mutex_init_platform+0x4e>
    3d76:	6823      	ldr	r3, [r4, #0]
    3d78:	b9bb      	cbnz	r3, 3daa <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3d7a:	4812      	ldr	r0, [pc, #72]	; (3dc4 <mutex_init_platform+0x68>)
    3d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d84:	4621      	mov	r1, r4
    3d86:	f003 fbe7 	bl	7558 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3d8a:	b908      	cbnz	r0, 3d90 <mutex_init_platform+0x34>
    3d8c:	6823      	ldr	r3, [r4, #0]
    3d8e:	b91b      	cbnz	r3, 3d98 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3d90:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <mutex_init_platform+0x60>)
    3d92:	480d      	ldr	r0, [pc, #52]	; (3dc8 <mutex_init_platform+0x6c>)
    3d94:	685b      	ldr	r3, [r3, #4]
    3d96:	4798      	blx	r3
    3d98:	6820      	ldr	r0, [r4, #0]
    3d9a:	2214      	movs	r2, #20
    3d9c:	2100      	movs	r1, #0
    3d9e:	f007 fa0e 	bl	b1be <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3da2:	6863      	ldr	r3, [r4, #4]
    3da4:	f043 0302 	orr.w	r3, r3, #2
    3da8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3daa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3dac:	f007 f8a0 	bl	aef0 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3db0:	6863      	ldr	r3, [r4, #4]
    3db2:	f043 0301 	orr.w	r3, r3, #1
    3db6:	6063      	str	r3, [r4, #4]
}
    3db8:	bd10      	pop	{r4, pc}
    3dba:	bf00      	nop
    3dbc:	2000014c 	.word	0x2000014c
    3dc0:	0000c032 	.word	0x0000c032
    3dc4:	20004d68 	.word	0x20004d68
    3dc8:	0000c058 	.word	0x0000c058

00003dcc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3dcc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3dce:	4906      	ldr	r1, [pc, #24]	; (3de8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3dd0:	4806      	ldr	r0, [pc, #24]	; (3dec <nrf_cc3xx_platform_mutex_init+0x20>)
    3dd2:	2340      	movs	r3, #64	; 0x40
    3dd4:	2214      	movs	r2, #20
    3dd6:	f007 f858 	bl	ae8a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3dde:	4904      	ldr	r1, [pc, #16]	; (3df0 <nrf_cc3xx_platform_mutex_init+0x24>)
    3de0:	4804      	ldr	r0, [pc, #16]	; (3df4 <nrf_cc3xx_platform_mutex_init+0x28>)
    3de2:	f006 b869 	b.w	9eb8 <nrf_cc3xx_platform_set_mutexes>
    3de6:	bf00      	nop
    3de8:	20004868 	.word	0x20004868
    3dec:	20004d68 	.word	0x20004d68
    3df0:	0000b61c 	.word	0x0000b61c
    3df4:	0000b630 	.word	0x0000b630

00003df8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3df8:	4901      	ldr	r1, [pc, #4]	; (3e00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3dfa:	2210      	movs	r2, #16
	str	r2, [r1]
    3dfc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3dfe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3e00:	e000ed10 	.word	0xe000ed10

00003e04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3e04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3e06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3e08:	f380 8811 	msr	BASEPRI, r0
	isb
    3e0c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3e10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3e14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3e16:	b662      	cpsie	i
	isb
    3e18:	f3bf 8f6f 	isb	sy

	bx	lr
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop

00003e20 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3e20:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3e22:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3e24:	f381 8811 	msr	BASEPRI, r1

	wfe
    3e28:	bf20      	wfe

	msr	BASEPRI, r0
    3e2a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3e2e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop

00003e34 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	4606      	mov	r6, r0
    3e38:	b086      	sub	sp, #24

	if (esf != NULL) {
    3e3a:	460d      	mov	r5, r1
    3e3c:	2900      	cmp	r1, #0
    3e3e:	d038      	beq.n	3eb2 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3e40:	688b      	ldr	r3, [r1, #8]
    3e42:	9305      	str	r3, [sp, #20]
    3e44:	684b      	ldr	r3, [r1, #4]
    3e46:	9304      	str	r3, [sp, #16]
    3e48:	680b      	ldr	r3, [r1, #0]
    3e4a:	9303      	str	r3, [sp, #12]
    3e4c:	2400      	movs	r4, #0
    3e4e:	4b1c      	ldr	r3, [pc, #112]	; (3ec0 <z_arm_fatal_error+0x8c>)
    3e50:	491c      	ldr	r1, [pc, #112]	; (3ec4 <z_arm_fatal_error+0x90>)
    3e52:	9302      	str	r3, [sp, #8]
    3e54:	2201      	movs	r2, #1
    3e56:	4623      	mov	r3, r4
    3e58:	4620      	mov	r0, r4
    3e5a:	e9cd 4400 	strd	r4, r4, [sp]
    3e5e:	f006 fb92 	bl	a586 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3e62:	696b      	ldr	r3, [r5, #20]
    3e64:	9305      	str	r3, [sp, #20]
    3e66:	692b      	ldr	r3, [r5, #16]
    3e68:	9304      	str	r3, [sp, #16]
    3e6a:	68eb      	ldr	r3, [r5, #12]
    3e6c:	9303      	str	r3, [sp, #12]
    3e6e:	4b16      	ldr	r3, [pc, #88]	; (3ec8 <z_arm_fatal_error+0x94>)
    3e70:	4914      	ldr	r1, [pc, #80]	; (3ec4 <z_arm_fatal_error+0x90>)
    3e72:	9400      	str	r4, [sp, #0]
    3e74:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3e78:	2201      	movs	r2, #1
    3e7a:	4623      	mov	r3, r4
    3e7c:	4620      	mov	r0, r4
    3e7e:	f006 fb82 	bl	a586 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3e82:	69eb      	ldr	r3, [r5, #28]
    3e84:	9303      	str	r3, [sp, #12]
    3e86:	4b11      	ldr	r3, [pc, #68]	; (3ecc <z_arm_fatal_error+0x98>)
    3e88:	490e      	ldr	r1, [pc, #56]	; (3ec4 <z_arm_fatal_error+0x90>)
    3e8a:	9400      	str	r4, [sp, #0]
    3e8c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3e90:	2201      	movs	r2, #1
    3e92:	4623      	mov	r3, r4
    3e94:	4620      	mov	r0, r4
    3e96:	f006 fb76 	bl	a586 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3e9a:	69ab      	ldr	r3, [r5, #24]
    3e9c:	9303      	str	r3, [sp, #12]
    3e9e:	4b0c      	ldr	r3, [pc, #48]	; (3ed0 <z_arm_fatal_error+0x9c>)
    3ea0:	4908      	ldr	r1, [pc, #32]	; (3ec4 <z_arm_fatal_error+0x90>)
    3ea2:	9400      	str	r4, [sp, #0]
    3ea4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3ea8:	2201      	movs	r2, #1
    3eaa:	4623      	mov	r3, r4
    3eac:	4620      	mov	r0, r4
    3eae:	f006 fb6a 	bl	a586 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3eb2:	4629      	mov	r1, r5
    3eb4:	4630      	mov	r0, r6
}
    3eb6:	b006      	add	sp, #24
    3eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3ebc:	f003 b9cc 	b.w	7258 <z_fatal_error>
    3ec0:	0000c085 	.word	0x0000c085
    3ec4:	0000b49c 	.word	0x0000b49c
    3ec8:	0000c0b4 	.word	0x0000c0b4
    3ecc:	0000c0e3 	.word	0x0000c0e3
    3ed0:	0000c0f2 	.word	0x0000c0f2

00003ed4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3ed4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3ed6:	2800      	cmp	r0, #0
    3ed8:	db07      	blt.n	3eea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eda:	4a04      	ldr	r2, [pc, #16]	; (3eec <arch_irq_enable+0x18>)
    3edc:	0941      	lsrs	r1, r0, #5
    3ede:	2301      	movs	r3, #1
    3ee0:	f000 001f 	and.w	r0, r0, #31
    3ee4:	4083      	lsls	r3, r0
    3ee6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3eea:	4770      	bx	lr
    3eec:	e000e100 	.word	0xe000e100

00003ef0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3ef0:	4b05      	ldr	r3, [pc, #20]	; (3f08 <arch_irq_is_enabled+0x18>)
    3ef2:	0942      	lsrs	r2, r0, #5
    3ef4:	f000 001f 	and.w	r0, r0, #31
    3ef8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3efc:	2301      	movs	r3, #1
    3efe:	fa03 f000 	lsl.w	r0, r3, r0
}
    3f02:	4010      	ands	r0, r2
    3f04:	4770      	bx	lr
    3f06:	bf00      	nop
    3f08:	e000e100 	.word	0xe000e100

00003f0c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3f0c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3f0e:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3f10:	2d07      	cmp	r5, #7
{
    3f12:	4604      	mov	r4, r0
    3f14:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3f16:	d90f      	bls.n	3f38 <z_arm_irq_priority_set+0x2c>
    3f18:	4a11      	ldr	r2, [pc, #68]	; (3f60 <z_arm_irq_priority_set+0x54>)
    3f1a:	4912      	ldr	r1, [pc, #72]	; (3f64 <z_arm_irq_priority_set+0x58>)
    3f1c:	4812      	ldr	r0, [pc, #72]	; (3f68 <z_arm_irq_priority_set+0x5c>)
    3f1e:	2357      	movs	r3, #87	; 0x57
    3f20:	f006 fab7 	bl	a492 <assert_print>
    3f24:	4811      	ldr	r0, [pc, #68]	; (3f6c <z_arm_irq_priority_set+0x60>)
    3f26:	4631      	mov	r1, r6
    3f28:	2307      	movs	r3, #7
    3f2a:	4622      	mov	r2, r4
    3f2c:	f006 fab1 	bl	a492 <assert_print>
    3f30:	480b      	ldr	r0, [pc, #44]	; (3f60 <z_arm_irq_priority_set+0x54>)
    3f32:	2157      	movs	r1, #87	; 0x57
    3f34:	f006 faa6 	bl	a484 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3f38:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3f3a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f3c:	bfac      	ite	ge
    3f3e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f42:	4b0b      	ldrlt	r3, [pc, #44]	; (3f70 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f44:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f48:	bfb8      	it	lt
    3f4a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f4e:	b2ed      	uxtb	r5, r5
    3f50:	bfaa      	itet	ge
    3f52:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f56:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3f58:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3f5c:	bd70      	pop	{r4, r5, r6, pc}
    3f5e:	bf00      	nop
    3f60:	0000c120 	.word	0x0000c120
    3f64:	0000c156 	.word	0x0000c156
    3f68:	0000b9c2 	.word	0x0000b9c2
    3f6c:	0000c171 	.word	0x0000c171
    3f70:	e000ed14 	.word	0xe000ed14

00003f74 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3f74:	bf30      	wfi
    b z_SysNmiOnReset
    3f76:	f7ff bffd 	b.w	3f74 <z_SysNmiOnReset>
    3f7a:	bf00      	nop

00003f7c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f7c:	4a0b      	ldr	r2, [pc, #44]	; (3fac <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3f7e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3f80:	4b0b      	ldr	r3, [pc, #44]	; (3fb0 <z_arm_prep_c+0x34>)
    3f82:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3f86:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3f88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f8c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3f94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3f9c:	f003 f9f0 	bl	7380 <z_bss_zero>
	z_data_copy();
    3fa0:	f005 f928 	bl	91f4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3fa4:	f000 fbe0 	bl	4768 <z_arm_interrupt_init>
	z_cstart();
    3fa8:	f003 fa2e 	bl	7408 <z_cstart>
    3fac:	00000000 	.word	0x00000000
    3fb0:	e000ed00 	.word	0xe000ed00

00003fb4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3fb4:	4a09      	ldr	r2, [pc, #36]	; (3fdc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3fb6:	490a      	ldr	r1, [pc, #40]	; (3fe0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3fb8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3fba:	6809      	ldr	r1, [r1, #0]
    3fbc:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fbe:	4909      	ldr	r1, [pc, #36]	; (3fe4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3fc0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3fc2:	684b      	ldr	r3, [r1, #4]
    3fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3fc8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3fca:	2300      	movs	r3, #0
    3fcc:	f383 8811 	msr	BASEPRI, r3
    3fd0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3fd4:	6893      	ldr	r3, [r2, #8]
}
    3fd6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	20004edc 	.word	0x20004edc
    3fe0:	0000b79c 	.word	0x0000b79c
    3fe4:	e000ed00 	.word	0xe000ed00

00003fe8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3fe8:	4912      	ldr	r1, [pc, #72]	; (4034 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3fea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3fec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3ff0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3ff2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3ff6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3ffa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3ffc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4000:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4004:	4f0c      	ldr	r7, [pc, #48]	; (4038 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4006:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    400a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    400c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    400e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4010:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4012:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4014:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4016:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    401a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    401c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    401e:	f000 fc3f 	bl	48a0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4022:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4026:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    402a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    402e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4032:	4770      	bx	lr
    ldr r1, =_kernel
    4034:	20004edc 	.word	0x20004edc
    ldr v4, =_SCS_ICSR
    4038:	e000ed04 	.word	0xe000ed04

0000403c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    403c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4040:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4042:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4046:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    404a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    404c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4050:	2902      	cmp	r1, #2
    beq _oops
    4052:	d0ff      	beq.n	4054 <_oops>

00004054 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4054:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4056:	f006 faa6 	bl	a5a6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    405a:	bd01      	pop	{r0, pc}

0000405c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    405c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4060:	9b00      	ldr	r3, [sp, #0]
    4062:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4066:	490a      	ldr	r1, [pc, #40]	; (4090 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4068:	9b01      	ldr	r3, [sp, #4]
    406a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    406e:	9b02      	ldr	r3, [sp, #8]
    4070:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4074:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    407c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4080:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4084:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4086:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4088:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    408a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    408c:	4770      	bx	lr
    408e:	bf00      	nop
    4090:	0000a25f 	.word	0x0000a25f

00004094 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4094:	4a09      	ldr	r2, [pc, #36]	; (40bc <z_check_thread_stack_fail+0x28>)
{
    4096:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4098:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    409a:	b170      	cbz	r0, 40ba <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    409c:	f113 0f16 	cmn.w	r3, #22
    40a0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    40a2:	d005      	beq.n	40b0 <z_check_thread_stack_fail+0x1c>
    40a4:	f1a0 0220 	sub.w	r2, r0, #32
    40a8:	429a      	cmp	r2, r3
    40aa:	d805      	bhi.n	40b8 <z_check_thread_stack_fail+0x24>
    40ac:	4283      	cmp	r3, r0
    40ae:	d203      	bcs.n	40b8 <z_check_thread_stack_fail+0x24>
		return 0;
    40b0:	4281      	cmp	r1, r0
    40b2:	bf28      	it	cs
    40b4:	2000      	movcs	r0, #0
    40b6:	4770      	bx	lr
    40b8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    40ba:	4770      	bx	lr
    40bc:	20004edc 	.word	0x20004edc

000040c0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    40c0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    40c2:	4b09      	ldr	r3, [pc, #36]	; (40e8 <arch_switch_to_main_thread+0x28>)
    40c4:	6098      	str	r0, [r3, #8]
{
    40c6:	460d      	mov	r5, r1
    40c8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    40ca:	f000 fbe9 	bl	48a0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    40ce:	4620      	mov	r0, r4
    40d0:	f385 8809 	msr	PSP, r5
    40d4:	2100      	movs	r1, #0
    40d6:	b663      	cpsie	if
    40d8:	f381 8811 	msr	BASEPRI, r1
    40dc:	f3bf 8f6f 	isb	sy
    40e0:	2200      	movs	r2, #0
    40e2:	2300      	movs	r3, #0
    40e4:	f006 f8bb 	bl	a25e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    40e8:	20004edc 	.word	0x20004edc

000040ec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    40ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    40ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    40f0:	4a0b      	ldr	r2, [pc, #44]	; (4120 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    40f2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    40f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    40f6:	bf1e      	ittt	ne
	movne	r1, #0
    40f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    40fa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    40fc:	f006 fee9 	blne	aed2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4100:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4102:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4106:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    410a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    410e:	4905      	ldr	r1, [pc, #20]	; (4124 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4110:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4112:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4114:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4116:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    411a:	4903      	ldr	r1, [pc, #12]	; (4128 <_isr_wrapper+0x3c>)
	bx r1
    411c:	4708      	bx	r1
    411e:	0000      	.short	0x0000
	ldr r2, =_kernel
    4120:	20004edc 	.word	0x20004edc
	ldr r1, =_sw_isr_table
    4124:	0000b2f4 	.word	0x0000b2f4
	ldr r1, =z_arm_int_exit
    4128:	0000412d 	.word	0x0000412d

0000412c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    412e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4130:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4132:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4134:	d003      	beq.n	413e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4136:	4903      	ldr	r1, [pc, #12]	; (4144 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    413c:	600a      	str	r2, [r1, #0]

0000413e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    413e:	4770      	bx	lr
	ldr r3, =_kernel
    4140:	20004edc 	.word	0x20004edc
	ldr r1, =_SCS_ICSR
    4144:	e000ed04 	.word	0xe000ed04

00004148 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4148:	b5f0      	push	{r4, r5, r6, r7, lr}
    414a:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    414c:	2400      	movs	r4, #0
    414e:	4b3b      	ldr	r3, [pc, #236]	; (423c <__data_size+0x90>)
    4150:	9302      	str	r3, [sp, #8]
    4152:	e9cd 4400 	strd	r4, r4, [sp]
    4156:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4158:	4607      	mov	r7, r0
    415a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    415c:	2201      	movs	r2, #1
    415e:	4938      	ldr	r1, [pc, #224]	; (4240 <__data_size+0x94>)
    4160:	4620      	mov	r0, r4
    4162:	f006 fa2f 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4166:	4b37      	ldr	r3, [pc, #220]	; (4244 <__data_size+0x98>)
    4168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    416a:	04db      	lsls	r3, r3, #19
    416c:	d509      	bpl.n	4182 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    416e:	4b36      	ldr	r3, [pc, #216]	; (4248 <__data_size+0x9c>)
    4170:	4933      	ldr	r1, [pc, #204]	; (4240 <__data_size+0x94>)
    4172:	9400      	str	r4, [sp, #0]
    4174:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4178:	2201      	movs	r2, #1
    417a:	4623      	mov	r3, r4
    417c:	4620      	mov	r0, r4
    417e:	f006 fa21 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4182:	4b30      	ldr	r3, [pc, #192]	; (4244 <__data_size+0x98>)
    4184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4186:	051d      	lsls	r5, r3, #20
    4188:	d509      	bpl.n	419e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    418a:	4b30      	ldr	r3, [pc, #192]	; (424c <__data_size+0xa0>)
    418c:	9302      	str	r3, [sp, #8]
    418e:	2300      	movs	r3, #0
    4190:	e9cd 3300 	strd	r3, r3, [sp]
    4194:	492a      	ldr	r1, [pc, #168]	; (4240 <__data_size+0x94>)
    4196:	2201      	movs	r2, #1
    4198:	4618      	mov	r0, r3
    419a:	f006 fa13 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    419e:	4d29      	ldr	r5, [pc, #164]	; (4244 <__data_size+0x98>)
    41a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    41a2:	059c      	lsls	r4, r3, #22
    41a4:	d51e      	bpl.n	41e4 <__data_size+0x38>
		PR_FAULT_INFO("  Precise data bus error");
    41a6:	2400      	movs	r4, #0
    41a8:	4b29      	ldr	r3, [pc, #164]	; (4250 <__data_size+0xa4>)
    41aa:	9302      	str	r3, [sp, #8]
    41ac:	2201      	movs	r2, #1
    41ae:	4623      	mov	r3, r4
    41b0:	4620      	mov	r0, r4
    41b2:	e9cd 4400 	strd	r4, r4, [sp]
    41b6:	4922      	ldr	r1, [pc, #136]	; (4240 <__data_size+0x94>)
    41b8:	f006 fa04 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    41bc:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    41be:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    41c0:	0410      	lsls	r0, r2, #16
    41c2:	d50f      	bpl.n	41e4 <__data_size+0x38>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    41c4:	9303      	str	r3, [sp, #12]
    41c6:	4b23      	ldr	r3, [pc, #140]	; (4254 <__data_size+0xa8>)
    41c8:	491d      	ldr	r1, [pc, #116]	; (4240 <__data_size+0x94>)
    41ca:	9400      	str	r4, [sp, #0]
    41cc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    41d0:	2201      	movs	r2, #1
    41d2:	4623      	mov	r3, r4
    41d4:	4620      	mov	r0, r4
    41d6:	f006 f9f5 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    41da:	b11f      	cbz	r7, 41e4 <__data_size+0x38>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    41dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    41de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    41e2:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    41e4:	4b17      	ldr	r3, [pc, #92]	; (4244 <__data_size+0x98>)
    41e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41e8:	0559      	lsls	r1, r3, #21
    41ea:	d509      	bpl.n	4200 <__data_size+0x54>
		PR_FAULT_INFO("  Imprecise data bus error");
    41ec:	4b1a      	ldr	r3, [pc, #104]	; (4258 <__data_size+0xac>)
    41ee:	9302      	str	r3, [sp, #8]
    41f0:	2300      	movs	r3, #0
    41f2:	e9cd 3300 	strd	r3, r3, [sp]
    41f6:	4912      	ldr	r1, [pc, #72]	; (4240 <__data_size+0x94>)
    41f8:	2201      	movs	r2, #1
    41fa:	4618      	mov	r0, r3
    41fc:	f006 f9e2 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4200:	4a10      	ldr	r2, [pc, #64]	; (4244 <__data_size+0x98>)
    4202:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4204:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    4208:	d012      	beq.n	4230 <__data_size+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    420a:	4b14      	ldr	r3, [pc, #80]	; (425c <__data_size+0xb0>)
    420c:	9302      	str	r3, [sp, #8]
    420e:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4210:	e9cd 3300 	strd	r3, r3, [sp]
    4214:	490a      	ldr	r1, [pc, #40]	; (4240 <__data_size+0x94>)
    4216:	2201      	movs	r2, #1
    4218:	4618      	mov	r0, r3
    421a:	f006 f9d3 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    421e:	4a09      	ldr	r2, [pc, #36]	; (4244 <__data_size+0x98>)
    4220:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4222:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4224:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4228:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    422a:	7030      	strb	r0, [r6, #0]

	return reason;
}
    422c:	b005      	add	sp, #20
    422e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4230:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4232:	0492      	lsls	r2, r2, #18
    4234:	d5f3      	bpl.n	421e <__data_size+0x72>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4236:	4a0a      	ldr	r2, [pc, #40]	; (4260 <__data_size+0xb4>)
    4238:	9202      	str	r2, [sp, #8]
    423a:	e7e9      	b.n	4210 <__data_size+0x64>
    423c:	0000c1b1 	.word	0x0000c1b1
    4240:	0000b49c 	.word	0x0000b49c
    4244:	e000ed00 	.word	0xe000ed00
    4248:	0000c1c7 	.word	0x0000c1c7
    424c:	0000c1d8 	.word	0x0000c1d8
    4250:	0000c1eb 	.word	0x0000c1eb
    4254:	0000c204 	.word	0x0000c204
    4258:	0000c219 	.word	0x0000c219
    425c:	0000c234 	.word	0x0000c234
    4260:	0000c24c 	.word	0x0000c24c

00004264 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4266:	2400      	movs	r4, #0
    4268:	4b33      	ldr	r3, [pc, #204]	; (4338 <usage_fault.constprop.0+0xd4>)
    426a:	9302      	str	r3, [sp, #8]
    426c:	e9cd 4400 	strd	r4, r4, [sp]
    4270:	4623      	mov	r3, r4
    4272:	4932      	ldr	r1, [pc, #200]	; (433c <usage_fault.constprop.0+0xd8>)
    4274:	2201      	movs	r2, #1
    4276:	4620      	mov	r0, r4
    4278:	f006 f9a4 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    427c:	4b30      	ldr	r3, [pc, #192]	; (4340 <usage_fault.constprop.0+0xdc>)
    427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4280:	019b      	lsls	r3, r3, #6
    4282:	d509      	bpl.n	4298 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    4284:	4b2f      	ldr	r3, [pc, #188]	; (4344 <usage_fault.constprop.0+0xe0>)
    4286:	492d      	ldr	r1, [pc, #180]	; (433c <usage_fault.constprop.0+0xd8>)
    4288:	9400      	str	r4, [sp, #0]
    428a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    428e:	2201      	movs	r2, #1
    4290:	4623      	mov	r3, r4
    4292:	4620      	mov	r0, r4
    4294:	f006 f996 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4298:	4b29      	ldr	r3, [pc, #164]	; (4340 <usage_fault.constprop.0+0xdc>)
    429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    429c:	01dc      	lsls	r4, r3, #7
    429e:	d509      	bpl.n	42b4 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    42a0:	4b29      	ldr	r3, [pc, #164]	; (4348 <usage_fault.constprop.0+0xe4>)
    42a2:	9302      	str	r3, [sp, #8]
    42a4:	2300      	movs	r3, #0
    42a6:	e9cd 3300 	strd	r3, r3, [sp]
    42aa:	4924      	ldr	r1, [pc, #144]	; (433c <usage_fault.constprop.0+0xd8>)
    42ac:	2201      	movs	r2, #1
    42ae:	4618      	mov	r0, r3
    42b0:	f006 f988 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    42b4:	4b22      	ldr	r3, [pc, #136]	; (4340 <usage_fault.constprop.0+0xdc>)
    42b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42b8:	0318      	lsls	r0, r3, #12
    42ba:	d509      	bpl.n	42d0 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    42bc:	4b23      	ldr	r3, [pc, #140]	; (434c <usage_fault.constprop.0+0xe8>)
    42be:	9302      	str	r3, [sp, #8]
    42c0:	2300      	movs	r3, #0
    42c2:	e9cd 3300 	strd	r3, r3, [sp]
    42c6:	491d      	ldr	r1, [pc, #116]	; (433c <usage_fault.constprop.0+0xd8>)
    42c8:	2201      	movs	r2, #1
    42ca:	4618      	mov	r0, r3
    42cc:	f006 f97a 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    42d0:	4b1b      	ldr	r3, [pc, #108]	; (4340 <usage_fault.constprop.0+0xdc>)
    42d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42d4:	0359      	lsls	r1, r3, #13
    42d6:	d509      	bpl.n	42ec <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    42d8:	4b1d      	ldr	r3, [pc, #116]	; (4350 <usage_fault.constprop.0+0xec>)
    42da:	9302      	str	r3, [sp, #8]
    42dc:	2300      	movs	r3, #0
    42de:	e9cd 3300 	strd	r3, r3, [sp]
    42e2:	4916      	ldr	r1, [pc, #88]	; (433c <usage_fault.constprop.0+0xd8>)
    42e4:	2201      	movs	r2, #1
    42e6:	4618      	mov	r0, r3
    42e8:	f006 f96c 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    42ec:	4b14      	ldr	r3, [pc, #80]	; (4340 <usage_fault.constprop.0+0xdc>)
    42ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42f0:	039a      	lsls	r2, r3, #14
    42f2:	d509      	bpl.n	4308 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    42f4:	4b17      	ldr	r3, [pc, #92]	; (4354 <usage_fault.constprop.0+0xf0>)
    42f6:	9302      	str	r3, [sp, #8]
    42f8:	2300      	movs	r3, #0
    42fa:	e9cd 3300 	strd	r3, r3, [sp]
    42fe:	490f      	ldr	r1, [pc, #60]	; (433c <usage_fault.constprop.0+0xd8>)
    4300:	2201      	movs	r2, #1
    4302:	4618      	mov	r0, r3
    4304:	f006 f95e 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4308:	4b0d      	ldr	r3, [pc, #52]	; (4340 <usage_fault.constprop.0+0xdc>)
    430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    430c:	03db      	lsls	r3, r3, #15
    430e:	d509      	bpl.n	4324 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4310:	4b11      	ldr	r3, [pc, #68]	; (4358 <usage_fault.constprop.0+0xf4>)
    4312:	9302      	str	r3, [sp, #8]
    4314:	2300      	movs	r3, #0
    4316:	e9cd 3300 	strd	r3, r3, [sp]
    431a:	4908      	ldr	r1, [pc, #32]	; (433c <usage_fault.constprop.0+0xd8>)
    431c:	2201      	movs	r2, #1
    431e:	4618      	mov	r0, r3
    4320:	f006 f950 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4324:	4a06      	ldr	r2, [pc, #24]	; (4340 <usage_fault.constprop.0+0xdc>)
    4326:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4328:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    432c:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    4330:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4332:	6293      	str	r3, [r2, #40]	; 0x28
}
    4334:	b004      	add	sp, #16
    4336:	bd10      	pop	{r4, pc}
    4338:	0000c27b 	.word	0x0000c27b
    433c:	0000b49c 	.word	0x0000b49c
    4340:	e000ed00 	.word	0xe000ed00
    4344:	0000c293 	.word	0x0000c293
    4348:	0000c2a6 	.word	0x0000c2a6
    434c:	0000c2c0 	.word	0x0000c2c0
    4350:	0000c2de 	.word	0x0000c2de
    4354:	0000c303 	.word	0x0000c303
    4358:	0000c31d 	.word	0x0000c31d

0000435c <mem_manage_fault>:
{
    435c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4360:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    4362:	2400      	movs	r4, #0
    4364:	4b52      	ldr	r3, [pc, #328]	; (44b0 <mem_manage_fault+0x154>)
    4366:	9302      	str	r3, [sp, #8]
    4368:	e9cd 4400 	strd	r4, r4, [sp]
    436c:	4623      	mov	r3, r4
{
    436e:	4680      	mov	r8, r0
    4370:	4689      	mov	r9, r1
    4372:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4374:	494f      	ldr	r1, [pc, #316]	; (44b4 <mem_manage_fault+0x158>)
    4376:	2201      	movs	r2, #1
    4378:	4620      	mov	r0, r4
    437a:	f006 f923 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    437e:	4b4e      	ldr	r3, [pc, #312]	; (44b8 <mem_manage_fault+0x15c>)
    4380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4382:	06df      	lsls	r7, r3, #27
    4384:	d509      	bpl.n	439a <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4386:	4b4d      	ldr	r3, [pc, #308]	; (44bc <mem_manage_fault+0x160>)
    4388:	494a      	ldr	r1, [pc, #296]	; (44b4 <mem_manage_fault+0x158>)
    438a:	9400      	str	r4, [sp, #0]
    438c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4390:	2201      	movs	r2, #1
    4392:	4623      	mov	r3, r4
    4394:	4620      	mov	r0, r4
    4396:	f006 f915 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    439a:	4b47      	ldr	r3, [pc, #284]	; (44b8 <mem_manage_fault+0x15c>)
    439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    439e:	071d      	lsls	r5, r3, #28
    43a0:	d509      	bpl.n	43b6 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    43a2:	4b47      	ldr	r3, [pc, #284]	; (44c0 <mem_manage_fault+0x164>)
    43a4:	9302      	str	r3, [sp, #8]
    43a6:	2300      	movs	r3, #0
    43a8:	e9cd 3300 	strd	r3, r3, [sp]
    43ac:	4941      	ldr	r1, [pc, #260]	; (44b4 <mem_manage_fault+0x158>)
    43ae:	2201      	movs	r2, #1
    43b0:	4618      	mov	r0, r3
    43b2:	f006 f907 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    43b6:	4d40      	ldr	r5, [pc, #256]	; (44b8 <mem_manage_fault+0x15c>)
    43b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ba:	079c      	lsls	r4, r3, #30
    43bc:	d441      	bmi.n	4442 <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    43be:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    43c2:	4b3d      	ldr	r3, [pc, #244]	; (44b8 <mem_manage_fault+0x15c>)
    43c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43c6:	07d9      	lsls	r1, r3, #31
    43c8:	d509      	bpl.n	43de <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    43ca:	4b3e      	ldr	r3, [pc, #248]	; (44c4 <mem_manage_fault+0x168>)
    43cc:	9302      	str	r3, [sp, #8]
    43ce:	2300      	movs	r3, #0
    43d0:	e9cd 3300 	strd	r3, r3, [sp]
    43d4:	4937      	ldr	r1, [pc, #220]	; (44b4 <mem_manage_fault+0x158>)
    43d6:	2201      	movs	r2, #1
    43d8:	4618      	mov	r0, r3
    43da:	f006 f8f3 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    43de:	4b36      	ldr	r3, [pc, #216]	; (44b8 <mem_manage_fault+0x15c>)
    43e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43e2:	069a      	lsls	r2, r3, #26
    43e4:	d509      	bpl.n	43fa <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    43e6:	4b38      	ldr	r3, [pc, #224]	; (44c8 <mem_manage_fault+0x16c>)
    43e8:	9302      	str	r3, [sp, #8]
    43ea:	2300      	movs	r3, #0
    43ec:	e9cd 3300 	strd	r3, r3, [sp]
    43f0:	4930      	ldr	r1, [pc, #192]	; (44b4 <mem_manage_fault+0x158>)
    43f2:	2201      	movs	r2, #1
    43f4:	4618      	mov	r0, r3
    43f6:	f006 f8e5 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    43fa:	4c2f      	ldr	r4, [pc, #188]	; (44b8 <mem_manage_fault+0x15c>)
    43fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    43fe:	06db      	lsls	r3, r3, #27
    4400:	d402      	bmi.n	4408 <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4402:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4404:	079d      	lsls	r5, r3, #30
    4406:	d550      	bpl.n	44aa <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4408:	6863      	ldr	r3, [r4, #4]
    440a:	0518      	lsls	r0, r3, #20
    440c:	d54d      	bpl.n	44aa <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    440e:	4641      	mov	r1, r8
    4410:	4638      	mov	r0, r7
    4412:	f7ff fe3f 	bl	4094 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4416:	2800      	cmp	r0, #0
    4418:	d035      	beq.n	4486 <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    441a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    441e:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4420:	4b25      	ldr	r3, [pc, #148]	; (44b8 <mem_manage_fault+0x15c>)
    4422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4424:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4426:	bf42      	ittt	mi
    4428:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    442a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    442e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4432:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4436:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4438:	2300      	movs	r3, #0
    443a:	7033      	strb	r3, [r6, #0]
}
    443c:	b005      	add	sp, #20
    443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    4442:	2400      	movs	r4, #0
    4444:	4b21      	ldr	r3, [pc, #132]	; (44cc <mem_manage_fault+0x170>)
    4446:	9302      	str	r3, [sp, #8]
    4448:	4620      	mov	r0, r4
    444a:	4623      	mov	r3, r4
    444c:	e9cd 4400 	strd	r4, r4, [sp]
    4450:	4918      	ldr	r1, [pc, #96]	; (44b4 <mem_manage_fault+0x158>)
    4452:	2201      	movs	r2, #1
    4454:	f006 f8b6 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4458:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    445a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    445c:	0618      	lsls	r0, r3, #24
    445e:	d5ae      	bpl.n	43be <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4460:	4b1b      	ldr	r3, [pc, #108]	; (44d0 <mem_manage_fault+0x174>)
    4462:	4914      	ldr	r1, [pc, #80]	; (44b4 <mem_manage_fault+0x158>)
    4464:	9703      	str	r7, [sp, #12]
    4466:	e9cd 4301 	strd	r4, r3, [sp, #4]
    446a:	9400      	str	r4, [sp, #0]
    446c:	4623      	mov	r3, r4
    446e:	2201      	movs	r2, #1
    4470:	4620      	mov	r0, r4
    4472:	f006 f8a7 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    4476:	f1b9 0f00 	cmp.w	r9, #0
    447a:	d0a2      	beq.n	43c2 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    447c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4482:	62ab      	str	r3, [r5, #40]	; 0x28
    4484:	e79d      	b.n	43c2 <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4488:	06d9      	lsls	r1, r3, #27
    448a:	d50e      	bpl.n	44aa <mem_manage_fault+0x14e>
    448c:	4911      	ldr	r1, [pc, #68]	; (44d4 <mem_manage_fault+0x178>)
    448e:	4a12      	ldr	r2, [pc, #72]	; (44d8 <mem_manage_fault+0x17c>)
    4490:	4812      	ldr	r0, [pc, #72]	; (44dc <mem_manage_fault+0x180>)
    4492:	f240 1349 	movw	r3, #329	; 0x149
    4496:	f005 fffc 	bl	a492 <assert_print>
    449a:	4811      	ldr	r0, [pc, #68]	; (44e0 <mem_manage_fault+0x184>)
    449c:	f005 fff9 	bl	a492 <assert_print>
    44a0:	480d      	ldr	r0, [pc, #52]	; (44d8 <mem_manage_fault+0x17c>)
    44a2:	f240 1149 	movw	r1, #329	; 0x149
    44a6:	f005 ffed 	bl	a484 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44aa:	2000      	movs	r0, #0
    44ac:	e7b8      	b.n	4420 <mem_manage_fault+0xc4>
    44ae:	bf00      	nop
    44b0:	0000c348 	.word	0x0000c348
    44b4:	0000b49c 	.word	0x0000b49c
    44b8:	e000ed00 	.word	0xe000ed00
    44bc:	0000c35e 	.word	0x0000c35e
    44c0:	0000c1d8 	.word	0x0000c1d8
    44c4:	0000c3bf 	.word	0x0000c3bf
    44c8:	0000c24c 	.word	0x0000c24c
    44cc:	0000c391 	.word	0x0000c391
    44d0:	0000c3a9 	.word	0x0000c3a9
    44d4:	0000c418 	.word	0x0000c418
    44d8:	0000c3de 	.word	0x0000c3de
    44dc:	0000b9c2 	.word	0x0000b9c2
    44e0:	0000c462 	.word	0x0000c462

000044e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    44e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44e8:	4b83      	ldr	r3, [pc, #524]	; (46f8 <z_arm_fault+0x214>)
    44ea:	685f      	ldr	r7, [r3, #4]
{
    44ec:	b090      	sub	sp, #64	; 0x40
    44ee:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44f0:	f3c7 0608 	ubfx	r6, r7, #0, #9
    44f4:	2300      	movs	r3, #0
    44f6:	f383 8811 	msr	BASEPRI, r3
    44fa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    44fe:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    4502:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    4506:	d10c      	bne.n	4522 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4508:	f002 000c 	and.w	r0, r2, #12
    450c:	2808      	cmp	r0, #8
    450e:	d11a      	bne.n	4546 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4510:	4a7a      	ldr	r2, [pc, #488]	; (46fc <z_arm_fault+0x218>)
    4512:	497b      	ldr	r1, [pc, #492]	; (4700 <z_arm_fault+0x21c>)
    4514:	9300      	str	r3, [sp, #0]
    4516:	e9cd 3201 	strd	r3, r2, [sp, #4]
    451a:	4618      	mov	r0, r3
    451c:	2201      	movs	r2, #1
    451e:	f006 f851 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    4522:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    4524:	4a77      	ldr	r2, [pc, #476]	; (4704 <z_arm_fault+0x220>)
    4526:	4978      	ldr	r1, [pc, #480]	; (4708 <z_arm_fault+0x224>)
    4528:	4878      	ldr	r0, [pc, #480]	; (470c <z_arm_fault+0x228>)
    452a:	f240 33fb 	movw	r3, #1019	; 0x3fb
    452e:	f005 ffb0 	bl	a492 <assert_print>
    4532:	4877      	ldr	r0, [pc, #476]	; (4710 <z_arm_fault+0x22c>)
    4534:	f005 ffad 	bl	a492 <assert_print>
    4538:	4872      	ldr	r0, [pc, #456]	; (4704 <z_arm_fault+0x220>)
    453a:	f240 31fb 	movw	r1, #1019	; 0x3fb
    453e:	f005 ffa1 	bl	a484 <assert_post_action>
    4542:	2400      	movs	r4, #0
    4544:	e006      	b.n	4554 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4546:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4548:	bf46      	itte	mi
    454a:	460c      	movmi	r4, r1
	*nested_exc = false;
    454c:	461d      	movmi	r5, r3
			*nested_exc = true;
    454e:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    4550:	2c00      	cmp	r4, #0
    4552:	d0e7      	beq.n	4524 <z_arm_fault+0x40>
	*recoverable = false;
    4554:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    4558:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    455a:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    455e:	2b09      	cmp	r3, #9
    4560:	f200 80b0 	bhi.w	46c4 <z_arm_fault+0x1e0>
    4564:	e8df f003 	tbb	[pc, r3]
    4568:	83a8a405 	.word	0x83a8a405
    456c:	aeaeaeae 	.word	0xaeaeaeae
    4570:	acae      	.short	0xacae
	PR_FAULT_INFO("***** HARD FAULT *****");
    4572:	4b68      	ldr	r3, [pc, #416]	; (4714 <z_arm_fault+0x230>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4574:	4f60      	ldr	r7, [pc, #384]	; (46f8 <z_arm_fault+0x214>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    4576:	4962      	ldr	r1, [pc, #392]	; (4700 <z_arm_fault+0x21c>)
    4578:	f8cd 8000 	str.w	r8, [sp]
    457c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4580:	2300      	movs	r3, #0
    4582:	2201      	movs	r2, #1
    4584:	4618      	mov	r0, r3
    4586:	f006 f81d 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    458a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
	*recoverable = false;
    458c:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4590:	f016 0602 	ands.w	r6, r6, #2
    4594:	d00c      	beq.n	45b0 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    4596:	4b60      	ldr	r3, [pc, #384]	; (4718 <z_arm_fault+0x234>)
    4598:	f8cd 8000 	str.w	r8, [sp]
    459c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    45a0:	2300      	movs	r3, #0
    45a2:	4957      	ldr	r1, [pc, #348]	; (4700 <z_arm_fault+0x21c>)
    45a4:	2201      	movs	r2, #1
    45a6:	4618      	mov	r0, r3
    45a8:	f006 f80c 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    45ac:	2200      	movs	r2, #0
    45ae:	e028      	b.n	4602 <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    45b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45b2:	2b00      	cmp	r3, #0
    45b4:	da04      	bge.n	45c0 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    45b6:	4b59      	ldr	r3, [pc, #356]	; (471c <z_arm_fault+0x238>)
    45b8:	9600      	str	r6, [sp, #0]
    45ba:	e9cd 6301 	strd	r6, r3, [sp, #4]
    45be:	e7ef      	b.n	45a0 <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    45c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45c2:	005b      	lsls	r3, r3, #1
    45c4:	d567      	bpl.n	4696 <z_arm_fault+0x1b2>
		PR_EXC("  Fault escalation (see below)");
    45c6:	4b56      	ldr	r3, [pc, #344]	; (4720 <z_arm_fault+0x23c>)
    45c8:	494d      	ldr	r1, [pc, #308]	; (4700 <z_arm_fault+0x21c>)
    45ca:	9600      	str	r6, [sp, #0]
    45cc:	e9cd 6301 	strd	r6, r3, [sp, #4]
    45d0:	2201      	movs	r2, #1
    45d2:	4633      	mov	r3, r6
    45d4:	4630      	mov	r0, r6
    45d6:	f005 fff5 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    45da:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    45dc:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    45e0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    45e4:	429a      	cmp	r2, r3
    45e6:	d12c      	bne.n	4642 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    45e8:	6823      	ldr	r3, [r4, #0]
    45ea:	9303      	str	r3, [sp, #12]
    45ec:	4b4d      	ldr	r3, [pc, #308]	; (4724 <z_arm_fault+0x240>)
    45ee:	4944      	ldr	r1, [pc, #272]	; (4700 <z_arm_fault+0x21c>)
    45f0:	9600      	str	r6, [sp, #0]
    45f2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    45f6:	2201      	movs	r2, #1
    45f8:	4633      	mov	r3, r6
    45fa:	4630      	mov	r0, r6
    45fc:	f005 ffe2 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    4600:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4602:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4606:	b9cb      	cbnz	r3, 463c <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4608:	ae08      	add	r6, sp, #32
    460a:	f104 0720 	add.w	r7, r4, #32
    460e:	6820      	ldr	r0, [r4, #0]
    4610:	6861      	ldr	r1, [r4, #4]
    4612:	4633      	mov	r3, r6
    4614:	c303      	stmia	r3!, {r0, r1}
    4616:	3408      	adds	r4, #8
    4618:	42bc      	cmp	r4, r7
    461a:	461e      	mov	r6, r3
    461c:	d1f7      	bne.n	460e <z_arm_fault+0x12a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    461e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4620:	2d00      	cmp	r5, #0
    4622:	d063      	beq.n	46ec <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4624:	f3c3 0108 	ubfx	r1, r3, #0, #9
    4628:	b921      	cbnz	r1, 4634 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    462a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    462e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4632:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    4634:	a908      	add	r1, sp, #32
    4636:	4610      	mov	r0, r2
    4638:	f7ff fbfc 	bl	3e34 <z_arm_fatal_error>
}
    463c:	b010      	add	sp, #64	; 0x40
    463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    4642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    4646:	b133      	cbz	r3, 4656 <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    4648:	f10d 021f 	add.w	r2, sp, #31
    464c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    464e:	4620      	mov	r0, r4
    4650:	f7ff fe84 	bl	435c <mem_manage_fault>
    4654:	e00d      	b.n	4672 <z_arm_fault+0x18e>
		} else if (SCB_BFSR != 0) {
    4656:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    465a:	b12b      	cbz	r3, 4668 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    465c:	f10d 011f 	add.w	r1, sp, #31
    4660:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4662:	f7ff fd71 	bl	4148 <bus_fault.constprop.0>
    4666:	e004      	b.n	4672 <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
    4668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    466a:	b29b      	uxth	r3, r3
    466c:	b11b      	cbz	r3, 4676 <z_arm_fault+0x192>
			reason = usage_fault(esf);
    466e:	f7ff fdf9 	bl	4264 <usage_fault.constprop.0>
    4672:	4602      	mov	r2, r0
    4674:	e7c5      	b.n	4602 <z_arm_fault+0x11e>
			__ASSERT(0,
    4676:	492c      	ldr	r1, [pc, #176]	; (4728 <z_arm_fault+0x244>)
    4678:	4a22      	ldr	r2, [pc, #136]	; (4704 <z_arm_fault+0x220>)
    467a:	4824      	ldr	r0, [pc, #144]	; (470c <z_arm_fault+0x228>)
    467c:	f240 23cd 	movw	r3, #717	; 0x2cd
    4680:	f005 ff07 	bl	a492 <assert_print>
    4684:	4829      	ldr	r0, [pc, #164]	; (472c <z_arm_fault+0x248>)
    4686:	f005 ff04 	bl	a492 <assert_print>
    468a:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    468e:	481d      	ldr	r0, [pc, #116]	; (4704 <z_arm_fault+0x220>)
    4690:	f005 fef8 	bl	a484 <assert_post_action>
    4694:	e78a      	b.n	45ac <z_arm_fault+0xc8>
    4696:	4924      	ldr	r1, [pc, #144]	; (4728 <z_arm_fault+0x244>)
    4698:	4a1a      	ldr	r2, [pc, #104]	; (4704 <z_arm_fault+0x220>)
    469a:	481c      	ldr	r0, [pc, #112]	; (470c <z_arm_fault+0x228>)
    469c:	f240 23d1 	movw	r3, #721	; 0x2d1
    46a0:	f005 fef7 	bl	a492 <assert_print>
    46a4:	4822      	ldr	r0, [pc, #136]	; (4730 <z_arm_fault+0x24c>)
    46a6:	f005 fef4 	bl	a492 <assert_print>
    46aa:	f240 21d1 	movw	r1, #721	; 0x2d1
    46ae:	e7ee      	b.n	468e <z_arm_fault+0x1aa>
		reason = mem_manage_fault(esf, 0, recoverable);
    46b0:	f10d 021f 	add.w	r2, sp, #31
    46b4:	2100      	movs	r1, #0
    46b6:	e7ca      	b.n	464e <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    46b8:	f10d 011f 	add.w	r1, sp, #31
    46bc:	2000      	movs	r0, #0
    46be:	e7d0      	b.n	4662 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    46c0:	4b1c      	ldr	r3, [pc, #112]	; (4734 <z_arm_fault+0x250>)
    46c2:	e769      	b.n	4598 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    46c4:	4a1c      	ldr	r2, [pc, #112]	; (4738 <z_arm_fault+0x254>)
    46c6:	4b1d      	ldr	r3, [pc, #116]	; (473c <z_arm_fault+0x258>)
    46c8:	490d      	ldr	r1, [pc, #52]	; (4700 <z_arm_fault+0x21c>)
    46ca:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    46ce:	bf18      	it	ne
    46d0:	4613      	movne	r3, r2
    46d2:	3e10      	subs	r6, #16
    46d4:	e9cd 3603 	strd	r3, r6, [sp, #12]
    46d8:	4b19      	ldr	r3, [pc, #100]	; (4740 <z_arm_fault+0x25c>)
    46da:	9302      	str	r3, [sp, #8]
    46dc:	2300      	movs	r3, #0
    46de:	e9cd 3300 	strd	r3, r3, [sp]
    46e2:	2201      	movs	r2, #1
    46e4:	4618      	mov	r0, r3
    46e6:	f005 ff6d 	bl	a5c4 <z_log_msg2_runtime_create.constprop.0>
}
    46ea:	e75f      	b.n	45ac <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    46ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    46f0:	f023 0301 	bic.w	r3, r3, #1
    46f4:	e79d      	b.n	4632 <z_arm_fault+0x14e>
    46f6:	bf00      	nop
    46f8:	e000ed00 	.word	0xe000ed00
    46fc:	0000c4b3 	.word	0x0000c4b3
    4700:	0000b49c 	.word	0x0000b49c
    4704:	0000c3de 	.word	0x0000c3de
    4708:	0000c4de 	.word	0x0000c4de
    470c:	0000b9c2 	.word	0x0000b9c2
    4710:	0000c4f1 	.word	0x0000c4f1
    4714:	0000c52f 	.word	0x0000c52f
    4718:	0000c546 	.word	0x0000c546
    471c:	0000c567 	.word	0x0000c567
    4720:	0000c575 	.word	0x0000c575
    4724:	0000c594 	.word	0x0000c594
    4728:	0000d2b1 	.word	0x0000d2b1
    472c:	0000c5b0 	.word	0x0000c5b0
    4730:	0000c5d4 	.word	0x0000c5d4
    4734:	0000c604 	.word	0x0000c604
    4738:	0000c49a 	.word	0x0000c49a
    473c:	0000c485 	.word	0x0000c485
    4740:	0000c628 	.word	0x0000c628

00004744 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4744:	4a02      	ldr	r2, [pc, #8]	; (4750 <z_arm_fault_init+0xc>)
    4746:	6953      	ldr	r3, [r2, #20]
    4748:	f043 0310 	orr.w	r3, r3, #16
    474c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    474e:	4770      	bx	lr
    4750:	e000ed00 	.word	0xe000ed00

00004754 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4754:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4758:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    475c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    475e:	4672      	mov	r2, lr
	bl z_arm_fault
    4760:	f7ff fec0 	bl	44e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4764:	bd01      	pop	{r0, pc}
    4766:	bf00      	nop

00004768 <z_arm_interrupt_init>:
    4768:	4804      	ldr	r0, [pc, #16]	; (477c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    476a:	2300      	movs	r3, #0
    476c:	2120      	movs	r1, #32
    476e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4770:	3301      	adds	r3, #1
    4772:	2b30      	cmp	r3, #48	; 0x30
    4774:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4778:	d1f9      	bne.n	476e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    477a:	4770      	bx	lr
    477c:	e000e100 	.word	0xe000e100

00004780 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4780:	2000      	movs	r0, #0
    msr CONTROL, r0
    4782:	f380 8814 	msr	CONTROL, r0
    isb
    4786:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    478a:	f006 fd35 	bl	b1f8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    478e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4790:	490d      	ldr	r1, [pc, #52]	; (47c8 <__start+0x48>)
    str r0, [r1]
    4792:	6008      	str	r0, [r1, #0]
    dsb
    4794:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4798:	480c      	ldr	r0, [pc, #48]	; (47cc <__start+0x4c>)
    msr msp, r0
    479a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    479e:	f000 f82b 	bl	47f8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    47a2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    47a4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    47a8:	4809      	ldr	r0, [pc, #36]	; (47d0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    47aa:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    47ae:	1840      	adds	r0, r0, r1
    msr PSP, r0
    47b0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    47b4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    47b8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    47ba:	4308      	orrs	r0, r1
    msr CONTROL, r0
    47bc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    47c0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    47c4:	f7ff fbda 	bl	3f7c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    47c8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    47cc:	20014b40 	.word	0x20014b40
    ldr r0, =z_interrupt_stacks
    47d0:	20013dc0 	.word	0x20013dc0

000047d4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    47d4:	4907      	ldr	r1, [pc, #28]	; (47f4 <z_arm_clear_arm_mpu_config+0x20>)
    47d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    47da:	2300      	movs	r3, #0
	int num_regions =
    47dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    47e0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    47e2:	4293      	cmp	r3, r2
    47e4:	db00      	blt.n	47e8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    47e6:	4770      	bx	lr
  MPU->RNR = rnr;
    47e8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    47ec:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    47f0:	3301      	adds	r3, #1
    47f2:	e7f6      	b.n	47e2 <z_arm_clear_arm_mpu_config+0xe>
    47f4:	e000ed00 	.word	0xe000ed00

000047f8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    47f8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    47fa:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    47fc:	2300      	movs	r3, #0
    47fe:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4802:	f7ff ffe7 	bl	47d4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4806:	4b14      	ldr	r3, [pc, #80]	; (4858 <z_arm_init_arch_hw_at_boot+0x60>)
    4808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    480c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    481c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4824:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4828:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    482c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4830:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4834:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4838:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    483c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4840:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4844:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4848:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    484c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    484e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4852:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4856:	bd08      	pop	{r3, pc}
    4858:	e000e100 	.word	0xe000e100

0000485c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    485c:	4b08      	ldr	r3, [pc, #32]	; (4880 <z_impl_k_thread_abort+0x24>)
    485e:	689b      	ldr	r3, [r3, #8]
    4860:	4283      	cmp	r3, r0
    4862:	d10b      	bne.n	487c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4864:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4868:	b143      	cbz	r3, 487c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    486a:	4b06      	ldr	r3, [pc, #24]	; (4884 <z_impl_k_thread_abort+0x28>)
    486c:	685a      	ldr	r2, [r3, #4]
    486e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4872:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    487a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    487c:	f004 bc06 	b.w	908c <z_thread_abort>
    4880:	20004edc 	.word	0x20004edc
    4884:	e000ed00 	.word	0xe000ed00

00004888 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4888:	4b02      	ldr	r3, [pc, #8]	; (4894 <z_arm_configure_static_mpu_regions+0xc>)
    488a:	4a03      	ldr	r2, [pc, #12]	; (4898 <z_arm_configure_static_mpu_regions+0x10>)
    488c:	4803      	ldr	r0, [pc, #12]	; (489c <z_arm_configure_static_mpu_regions+0x14>)
    488e:	2101      	movs	r1, #1
    4890:	f000 b886 	b.w	49a0 <arm_core_mpu_configure_static_mpu_regions>
    4894:	20040000 	.word	0x20040000
    4898:	20000000 	.word	0x20000000
    489c:	0000b640 	.word	0x0000b640

000048a0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    48a0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    48a2:	4b05      	ldr	r3, [pc, #20]	; (48b8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    48a4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    48a6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    48a8:	4a04      	ldr	r2, [pc, #16]	; (48bc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    48aa:	2120      	movs	r1, #32
    48ac:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    48b0:	4618      	mov	r0, r3
    48b2:	2101      	movs	r1, #1
    48b4:	f000 b89c 	b.w	49f0 <arm_core_mpu_configure_dynamic_mpu_regions>
    48b8:	20004d88 	.word	0x20004d88
    48bc:	150b0000 	.word	0x150b0000

000048c0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    48c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    48c2:	4e28      	ldr	r6, [pc, #160]	; (4964 <mpu_configure_regions+0xa4>)
    48c4:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    48c6:	2500      	movs	r5, #0
    48c8:	428d      	cmp	r5, r1
    48ca:	da15      	bge.n	48f8 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    48cc:	6844      	ldr	r4, [r0, #4]
    48ce:	2c00      	cmp	r4, #0
    48d0:	d045      	beq.n	495e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    48d2:	b1d3      	cbz	r3, 490a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    48d4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    48d8:	ea14 0f0c 	tst.w	r4, ip
    48dc:	d00f      	beq.n	48fe <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    48de:	4b22      	ldr	r3, [pc, #136]	; (4968 <mpu_configure_regions+0xa8>)
    48e0:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    48e2:	9302      	str	r3, [sp, #8]
    48e4:	2300      	movs	r3, #0
    48e6:	2201      	movs	r2, #1
    48e8:	e9cd 3300 	strd	r3, r3, [sp]
    48ec:	491f      	ldr	r1, [pc, #124]	; (496c <mpu_configure_regions+0xac>)
    48ee:	4618      	mov	r0, r3
    48f0:	f005 fe78 	bl	a5e4 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    48f4:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    48f8:	4610      	mov	r0, r2
    48fa:	b005      	add	sp, #20
    48fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    48fe:	2c1f      	cmp	r4, #31
    4900:	d9ed      	bls.n	48de <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4902:	6807      	ldr	r7, [r0, #0]
		&&
    4904:	ea1c 0f07 	tst.w	ip, r7
    4908:	d1e9      	bne.n	48de <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    490a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    490c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    490e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4912:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    4916:	d910      	bls.n	493a <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    4918:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    491c:	d80f      	bhi.n	493e <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    491e:	3c01      	subs	r4, #1
    4920:	fab4 f484 	clz	r4, r4
    4924:	f1c4 041f 	rsb	r4, r4, #31
    4928:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    492a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    492e:	ea4c 0c04 	orr.w	ip, ip, r4
    4932:	d906      	bls.n	4942 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4934:	4b0e      	ldr	r3, [pc, #56]	; (4970 <mpu_configure_regions+0xb0>)
    4936:	9203      	str	r2, [sp, #12]
    4938:	e7d3      	b.n	48e2 <mpu_configure_regions+0x22>
		return REGION_32B;
    493a:	2408      	movs	r4, #8
    493c:	e7f5      	b.n	492a <mpu_configure_regions+0x6a>
		return REGION_4G;
    493e:	243e      	movs	r4, #62	; 0x3e
    4940:	e7f3      	b.n	492a <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4942:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    4946:	4314      	orrs	r4, r2
    4948:	f044 0410 	orr.w	r4, r4, #16
    494c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4950:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4954:	f04c 0401 	orr.w	r4, ip, #1
    4958:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    495c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    495e:	3501      	adds	r5, #1
    4960:	300c      	adds	r0, #12
    4962:	e7b1      	b.n	48c8 <mpu_configure_regions+0x8>
    4964:	e000ed00 	.word	0xe000ed00
    4968:	0000c63f 	.word	0x0000c63f
    496c:	0000b494 	.word	0x0000b494
    4970:	0000c662 	.word	0x0000c662

00004974 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4974:	4b04      	ldr	r3, [pc, #16]	; (4988 <arm_core_mpu_enable+0x14>)
    4976:	2205      	movs	r2, #5
    4978:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    497c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4980:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4984:	4770      	bx	lr
    4986:	bf00      	nop
    4988:	e000ed00 	.word	0xe000ed00

0000498c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    498c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4990:	4b02      	ldr	r3, [pc, #8]	; (499c <arm_core_mpu_disable+0x10>)
    4992:	2200      	movs	r2, #0
    4994:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4998:	4770      	bx	lr
    499a:	bf00      	nop
    499c:	e000ed00 	.word	0xe000ed00

000049a0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    49a0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    49a2:	4d0e      	ldr	r5, [pc, #56]	; (49dc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    49a4:	2301      	movs	r3, #1
    49a6:	782a      	ldrb	r2, [r5, #0]
    49a8:	460c      	mov	r4, r1
    49aa:	f7ff ff89 	bl	48c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    49ae:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    49b0:	3016      	adds	r0, #22
    49b2:	d111      	bne.n	49d8 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    49b4:	f240 1311 	movw	r3, #273	; 0x111
    49b8:	4a09      	ldr	r2, [pc, #36]	; (49e0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    49ba:	490a      	ldr	r1, [pc, #40]	; (49e4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    49bc:	480a      	ldr	r0, [pc, #40]	; (49e8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    49be:	f005 fd68 	bl	a492 <assert_print>
    49c2:	4621      	mov	r1, r4
    49c4:	4809      	ldr	r0, [pc, #36]	; (49ec <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    49c6:	f005 fd64 	bl	a492 <assert_print>
			regions_num);
	}
}
    49ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    49ce:	4804      	ldr	r0, [pc, #16]	; (49e0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    49d0:	f240 1111 	movw	r1, #273	; 0x111
    49d4:	f005 bd56 	b.w	a484 <assert_post_action>
}
    49d8:	bd38      	pop	{r3, r4, r5, pc}
    49da:	bf00      	nop
    49dc:	2001110c 	.word	0x2001110c
    49e0:	0000c688 	.word	0x0000c688
    49e4:	0000d2b1 	.word	0x0000d2b1
    49e8:	0000b9c2 	.word	0x0000b9c2
    49ec:	0000c6bf 	.word	0x0000c6bf

000049f0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    49f0:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    49f2:	4a13      	ldr	r2, [pc, #76]	; (4a40 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    49f4:	2300      	movs	r3, #0
    49f6:	7812      	ldrb	r2, [r2, #0]
    49f8:	460c      	mov	r4, r1
    49fa:	f7ff ff61 	bl	48c0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    49fe:	f110 0f16 	cmn.w	r0, #22
    4a02:	d004      	beq.n	4a0e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    4a04:	4b0f      	ldr	r3, [pc, #60]	; (4a44 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    4a06:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4a08:	2807      	cmp	r0, #7
    4a0a:	dd12      	ble.n	4a32 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4a0c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4a0e:	4a0e      	ldr	r2, [pc, #56]	; (4a48 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    4a10:	490e      	ldr	r1, [pc, #56]	; (4a4c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    4a12:	480f      	ldr	r0, [pc, #60]	; (4a50 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    4a14:	f44f 7398 	mov.w	r3, #304	; 0x130
    4a18:	f005 fd3b 	bl	a492 <assert_print>
    4a1c:	4621      	mov	r1, r4
    4a1e:	480d      	ldr	r0, [pc, #52]	; (4a54 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    4a20:	f005 fd37 	bl	a492 <assert_print>
}
    4a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4a28:	4807      	ldr	r0, [pc, #28]	; (4a48 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    4a2a:	f44f 7198 	mov.w	r1, #304	; 0x130
    4a2e:	f005 bd29 	b.w	a484 <assert_post_action>
  MPU->RNR = rnr;
    4a32:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4a36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4a3a:	3001      	adds	r0, #1
    4a3c:	e7e4      	b.n	4a08 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    4a3e:	bf00      	nop
    4a40:	2001110c 	.word	0x2001110c
    4a44:	e000ed00 	.word	0xe000ed00
    4a48:	0000c688 	.word	0x0000c688
    4a4c:	0000d2b1 	.word	0x0000d2b1
    4a50:	0000b9c2 	.word	0x0000b9c2
    4a54:	0000c6eb 	.word	0x0000c6eb

00004a58 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4a58:	4928      	ldr	r1, [pc, #160]	; (4afc <z_arm_mpu_init+0xa4>)
{
    4a5a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4a5c:	680c      	ldr	r4, [r1, #0]
    4a5e:	2c08      	cmp	r4, #8
    4a60:	d913      	bls.n	4a8a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    4a62:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4a66:	4a26      	ldr	r2, [pc, #152]	; (4b00 <z_arm_mpu_init+0xa8>)
    4a68:	4926      	ldr	r1, [pc, #152]	; (4b04 <z_arm_mpu_init+0xac>)
    4a6a:	4827      	ldr	r0, [pc, #156]	; (4b08 <z_arm_mpu_init+0xb0>)
    4a6c:	f005 fd11 	bl	a492 <assert_print>
    4a70:	4826      	ldr	r0, [pc, #152]	; (4b0c <z_arm_mpu_init+0xb4>)
    4a72:	2208      	movs	r2, #8
    4a74:	4621      	mov	r1, r4
    4a76:	f005 fd0c 	bl	a492 <assert_print>
    4a7a:	4821      	ldr	r0, [pc, #132]	; (4b00 <z_arm_mpu_init+0xa8>)
    4a7c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4a80:	f005 fd00 	bl	a484 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    4a88:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    4a8a:	f7ff ff7f 	bl	498c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4a8e:	6848      	ldr	r0, [r1, #4]
    4a90:	491f      	ldr	r1, [pc, #124]	; (4b10 <z_arm_mpu_init+0xb8>)
    4a92:	2200      	movs	r2, #0
    4a94:	4294      	cmp	r4, r2
    4a96:	f100 000c 	add.w	r0, r0, #12
    4a9a:	d10b      	bne.n	4ab4 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    4a9c:	4b1d      	ldr	r3, [pc, #116]	; (4b14 <z_arm_mpu_init+0xbc>)
    4a9e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    4aa0:	f7ff ff68 	bl	4974 <arm_core_mpu_enable>
	__ASSERT(
    4aa4:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    4aa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4aac:	2b08      	cmp	r3, #8
    4aae:	d114      	bne.n	4ada <z_arm_mpu_init+0x82>
	return 0;
    4ab0:	2000      	movs	r0, #0
    4ab2:	e7e9      	b.n	4a88 <z_arm_mpu_init+0x30>
    4ab4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4ab8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    4abc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4ac0:	4313      	orrs	r3, r2
    4ac2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4ac6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4aca:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4ace:	f043 0301 	orr.w	r3, r3, #1
    4ad2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4ad6:	3201      	adds	r2, #1
    4ad8:	e7dc      	b.n	4a94 <z_arm_mpu_init+0x3c>
	__ASSERT(
    4ada:	4a09      	ldr	r2, [pc, #36]	; (4b00 <z_arm_mpu_init+0xa8>)
    4adc:	490e      	ldr	r1, [pc, #56]	; (4b18 <z_arm_mpu_init+0xc0>)
    4ade:	480a      	ldr	r0, [pc, #40]	; (4b08 <z_arm_mpu_init+0xb0>)
    4ae0:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4ae4:	f005 fcd5 	bl	a492 <assert_print>
    4ae8:	480c      	ldr	r0, [pc, #48]	; (4b1c <z_arm_mpu_init+0xc4>)
    4aea:	f005 fcd2 	bl	a492 <assert_print>
    4aee:	4804      	ldr	r0, [pc, #16]	; (4b00 <z_arm_mpu_init+0xa8>)
    4af0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4af4:	f005 fcc6 	bl	a484 <assert_post_action>
    4af8:	e7da      	b.n	4ab0 <z_arm_mpu_init+0x58>
    4afa:	bf00      	nop
    4afc:	0000b64c 	.word	0x0000b64c
    4b00:	0000c688 	.word	0x0000c688
    4b04:	0000d2b1 	.word	0x0000d2b1
    4b08:	0000b9c2 	.word	0x0000b9c2
    4b0c:	0000c718 	.word	0x0000c718
    4b10:	e000ed00 	.word	0xe000ed00
    4b14:	2001110c 	.word	0x2001110c
    4b18:	0000c74c 	.word	0x0000c74c
    4b1c:	0000c79c 	.word	0x0000c79c

00004b20 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    4b20:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    4b22:	4b0b      	ldr	r3, [pc, #44]	; (4b50 <malloc_prepare+0x30>)
    4b24:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4b28:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    4b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4b30:	d20c      	bcs.n	4b4c <malloc_prepare+0x2c>
    4b32:	4908      	ldr	r1, [pc, #32]	; (4b54 <malloc_prepare+0x34>)
    4b34:	4a08      	ldr	r2, [pc, #32]	; (4b58 <malloc_prepare+0x38>)
    4b36:	4809      	ldr	r0, [pc, #36]	; (4b5c <malloc_prepare+0x3c>)
    4b38:	2381      	movs	r3, #129	; 0x81
    4b3a:	f005 fcaa 	bl	a492 <assert_print>
    4b3e:	4808      	ldr	r0, [pc, #32]	; (4b60 <malloc_prepare+0x40>)
    4b40:	f005 fca7 	bl	a492 <assert_print>
    4b44:	4804      	ldr	r0, [pc, #16]	; (4b58 <malloc_prepare+0x38>)
    4b46:	2181      	movs	r1, #129	; 0x81
    4b48:	f005 fc9c 	bl	a484 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    4b4c:	2000      	movs	r0, #0
    4b4e:	bd08      	pop	{r3, pc}
    4b50:	200283e0 	.word	0x200283e0
    4b54:	0000c7ed 	.word	0x0000c7ed
    4b58:	0000c7bd 	.word	0x0000c7bd
    4b5c:	0000b9c2 	.word	0x0000b9c2
    4b60:	0000c834 	.word	0x0000c834

00004b64 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4b64:	4b01      	ldr	r3, [pc, #4]	; (4b6c <__stdout_hook_install+0x8>)
    4b66:	6018      	str	r0, [r3, #0]
}
    4b68:	4770      	bx	lr
    4b6a:	bf00      	nop
    4b6c:	2000002c 	.word	0x2000002c

00004b70 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b72:	4f0a      	ldr	r7, [pc, #40]	; (4b9c <z_impl_zephyr_write_stdout+0x2c>)
    4b74:	460d      	mov	r5, r1
    4b76:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4b78:	f1c0 0401 	rsb	r4, r0, #1
    4b7c:	19a3      	adds	r3, r4, r6
    4b7e:	429d      	cmp	r5, r3
    4b80:	dc01      	bgt.n	4b86 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4b82:	4628      	mov	r0, r5
    4b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4b86:	7873      	ldrb	r3, [r6, #1]
    4b88:	2b0a      	cmp	r3, #10
    4b8a:	d102      	bne.n	4b92 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4b8c:	683b      	ldr	r3, [r7, #0]
    4b8e:	200d      	movs	r0, #13
    4b90:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4b92:	683b      	ldr	r3, [r7, #0]
    4b94:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4b98:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4b9a:	e7ef      	b.n	4b7c <z_impl_zephyr_write_stdout+0xc>
    4b9c:	2000002c 	.word	0x2000002c

00004ba0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4ba0:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4ba2:	4802      	ldr	r0, [pc, #8]	; (4bac <_exit+0xc>)
    4ba4:	2105      	movs	r1, #5
    4ba6:	f7ff ffe3 	bl	4b70 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    4baa:	e7fe      	b.n	4baa <_exit+0xa>
    4bac:	0000c8bb 	.word	0x0000c8bb

00004bb0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4bb0:	b508      	push	{r3, lr}
    4bb2:	211d      	movs	r1, #29
    4bb4:	4804      	ldr	r0, [pc, #16]	; (4bc8 <__chk_fail+0x18>)
    4bb6:	f7ff ffdb 	bl	4b70 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4bba:	4040      	eors	r0, r0
    4bbc:	f380 8811 	msr	BASEPRI, r0
    4bc0:	f04f 0003 	mov.w	r0, #3
    4bc4:	df02      	svc	2
	CODE_UNREACHABLE;
    4bc6:	bf00      	nop
    4bc8:	0000c8c1 	.word	0x0000c8c1

00004bcc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4bcc:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bce:	f04f 0320 	mov.w	r3, #32
    4bd2:	f3ef 8011 	mrs	r0, BASEPRI
    4bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4bda:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4bde:	4a11      	ldr	r2, [pc, #68]	; (4c24 <nordicsemi_nrf52_init+0x58>)
    4be0:	2301      	movs	r3, #1
    4be2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4bee:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4bf2:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4bf6:	2c08      	cmp	r4, #8
    4bf8:	d108      	bne.n	4c0c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4bfa:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    4bfe:	2905      	cmp	r1, #5
    4c00:	d804      	bhi.n	4c0c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4c02:	4c09      	ldr	r4, [pc, #36]	; (4c28 <nordicsemi_nrf52_init+0x5c>)
    4c04:	5c61      	ldrb	r1, [r4, r1]
    4c06:	b109      	cbz	r1, 4c0c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4c08:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c10:	2201      	movs	r2, #1
    4c12:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4c16:	f380 8811 	msr	BASEPRI, r0
    4c1a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4c1e:	2000      	movs	r0, #0
    4c20:	bd10      	pop	{r4, pc}
    4c22:	bf00      	nop
    4c24:	4001e000 	.word	0x4001e000
    4c28:	0000c8ee 	.word	0x0000c8ee

00004c2c <sys_arch_reboot>:
    *p_gpregret = val;
    4c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c30:	b2c0      	uxtb	r0, r0
    4c32:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4c36:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4c3a:	4905      	ldr	r1, [pc, #20]	; (4c50 <sys_arch_reboot+0x24>)
    4c3c:	4b05      	ldr	r3, [pc, #20]	; (4c54 <sys_arch_reboot+0x28>)
    4c3e:	68ca      	ldr	r2, [r1, #12]
    4c40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4c44:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4c46:	60cb      	str	r3, [r1, #12]
    4c48:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4c4c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4c4e:	e7fd      	b.n	4c4c <sys_arch_reboot+0x20>
    4c50:	e000ed00 	.word	0xe000ed00
    4c54:	05fa0004 	.word	0x05fa0004

00004c58 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4c58:	b120      	cbz	r0, 4c64 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4c5a:	4b03      	ldr	r3, [pc, #12]	; (4c68 <arch_busy_wait+0x10>)
    4c5c:	0180      	lsls	r0, r0, #6
    4c5e:	f043 0301 	orr.w	r3, r3, #1
    4c62:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4c64:	4770      	bx	lr
    4c66:	bf00      	nop
    4c68:	0000b500 	.word	0x0000b500

00004c6c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4c6e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4c70:	490a      	ldr	r1, [pc, #40]	; (4c9c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c72:	4a0b      	ldr	r2, [pc, #44]	; (4ca0 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4c74:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c76:	2340      	movs	r3, #64	; 0x40
    4c78:	9300      	str	r3, [sp, #0]
    4c7a:	1149      	asrs	r1, r1, #5
{
    4c7c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c7e:	4623      	mov	r3, r4
    4c80:	4808      	ldr	r0, [pc, #32]	; (4ca4 <onoff_start+0x38>)
    4c82:	f005 fce7 	bl	a654 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4c86:	1e01      	subs	r1, r0, #0
    4c88:	da05      	bge.n	4c96 <onoff_start+0x2a>
		notify(mgr, err);
    4c8a:	4628      	mov	r0, r5
    4c8c:	4623      	mov	r3, r4
	}
}
    4c8e:	b003      	add	sp, #12
    4c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4c94:	4718      	bx	r3
}
    4c96:	b003      	add	sp, #12
    4c98:	bd30      	pop	{r4, r5, pc}
    4c9a:	bf00      	nop
    4c9c:	20004da8 	.word	0x20004da8
    4ca0:	0000a6bf 	.word	0x0000a6bf
    4ca4:	0000b27c 	.word	0x0000b27c

00004ca8 <get_status>:
{
    4ca8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4caa:	b2cc      	uxtb	r4, r1
    4cac:	2c01      	cmp	r4, #1
{
    4cae:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cb0:	d909      	bls.n	4cc6 <get_status+0x1e>
    4cb2:	4909      	ldr	r1, [pc, #36]	; (4cd8 <get_status+0x30>)
    4cb4:	4809      	ldr	r0, [pc, #36]	; (4cdc <get_status+0x34>)
    4cb6:	4a0a      	ldr	r2, [pc, #40]	; (4ce0 <get_status+0x38>)
    4cb8:	2379      	movs	r3, #121	; 0x79
    4cba:	f005 fbea 	bl	a492 <assert_print>
    4cbe:	4808      	ldr	r0, [pc, #32]	; (4ce0 <get_status+0x38>)
    4cc0:	2179      	movs	r1, #121	; 0x79
    4cc2:	f005 fbdf 	bl	a484 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4cc6:	692b      	ldr	r3, [r5, #16]
    4cc8:	220c      	movs	r2, #12
    4cca:	fb04 3302 	mla	r3, r4, r2, r3
    4cce:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    4cd0:	f000 0007 	and.w	r0, r0, #7
    4cd4:	bd38      	pop	{r3, r4, r5, pc}
    4cd6:	bf00      	nop
    4cd8:	0000c935 	.word	0x0000c935
    4cdc:	0000b9c2 	.word	0x0000b9c2
    4ce0:	0000c8f8 	.word	0x0000c8f8

00004ce4 <stop>:
{
    4ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ce6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4ce8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    4cea:	6906      	ldr	r6, [r0, #16]
{
    4cec:	4605      	mov	r5, r0
    4cee:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cf0:	d90b      	bls.n	4d0a <stop+0x26>
    4cf2:	4919      	ldr	r1, [pc, #100]	; (4d58 <stop+0x74>)
    4cf4:	4819      	ldr	r0, [pc, #100]	; (4d5c <stop+0x78>)
    4cf6:	4a1a      	ldr	r2, [pc, #104]	; (4d60 <stop+0x7c>)
    4cf8:	f240 134d 	movw	r3, #333	; 0x14d
    4cfc:	f005 fbc9 	bl	a492 <assert_print>
    4d00:	4817      	ldr	r0, [pc, #92]	; (4d60 <stop+0x7c>)
    4d02:	f240 114d 	movw	r1, #333	; 0x14d
    4d06:	f005 fbbd 	bl	a484 <assert_post_action>
	__asm__ volatile(
    4d0a:	f04f 0320 	mov.w	r3, #32
    4d0e:	f3ef 8211 	mrs	r2, BASEPRI
    4d12:	f383 8812 	msr	BASEPRI_MAX, r3
    4d16:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4d1a:	210c      	movs	r1, #12
    4d1c:	fb01 6304 	mla	r3, r1, r4, r6
    4d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4d22:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4d26:	d008      	beq.n	4d3a <stop+0x56>
    4d28:	429f      	cmp	r7, r3
    4d2a:	d006      	beq.n	4d3a <stop+0x56>
	__asm__ volatile(
    4d2c:	f382 8811 	msr	BASEPRI, r2
    4d30:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4d3a:	434c      	muls	r4, r1
    4d3c:	4426      	add	r6, r4
    4d3e:	2301      	movs	r3, #1
    4d40:	64b3      	str	r3, [r6, #72]	; 0x48
    4d42:	f382 8811 	msr	BASEPRI, r2
    4d46:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4d4a:	686b      	ldr	r3, [r5, #4]
    4d4c:	4423      	add	r3, r4
    4d4e:	685b      	ldr	r3, [r3, #4]
    4d50:	4798      	blx	r3
	return 0;
    4d52:	2000      	movs	r0, #0
    4d54:	e7f0      	b.n	4d38 <stop+0x54>
    4d56:	bf00      	nop
    4d58:	0000c935 	.word	0x0000c935
    4d5c:	0000b9c2 	.word	0x0000b9c2
    4d60:	0000c8f8 	.word	0x0000c8f8

00004d64 <onoff_stop>:
{
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4d68:	4906      	ldr	r1, [pc, #24]	; (4d84 <onoff_stop+0x20>)
    4d6a:	1a41      	subs	r1, r0, r1
{
    4d6c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4d6e:	1149      	asrs	r1, r1, #5
    4d70:	4805      	ldr	r0, [pc, #20]	; (4d88 <onoff_stop+0x24>)
    4d72:	2240      	movs	r2, #64	; 0x40
    4d74:	f7ff ffb6 	bl	4ce4 <stop>
	notify(mgr, res);
    4d78:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4d7a:	4601      	mov	r1, r0
	notify(mgr, res);
    4d7c:	4620      	mov	r0, r4
}
    4d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4d82:	4718      	bx	r3
    4d84:	20004da8 	.word	0x20004da8
    4d88:	0000b27c 	.word	0x0000b27c

00004d8c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d8c:	2200      	movs	r2, #0
{
    4d8e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d90:	2101      	movs	r1, #1
{
    4d92:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d94:	4610      	mov	r0, r2
    4d96:	f7ff f8b9 	bl	3f0c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4d9a:	480f      	ldr	r0, [pc, #60]	; (4dd8 <clk_init+0x4c>)
    4d9c:	f001 fc92 	bl	66c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4da0:	4b0e      	ldr	r3, [pc, #56]	; (4ddc <clk_init+0x50>)
    4da2:	4298      	cmp	r0, r3
    4da4:	d115      	bne.n	4dd2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4da6:	f001 fcb3 	bl	6710 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4daa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4dac:	490c      	ldr	r1, [pc, #48]	; (4de0 <clk_init+0x54>)
    4dae:	4630      	mov	r0, r6
    4db0:	f005 fa42 	bl	a238 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4db4:	2800      	cmp	r0, #0
    4db6:	db0b      	blt.n	4dd0 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4db8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4dba:	4909      	ldr	r1, [pc, #36]	; (4de0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4dbc:	2501      	movs	r5, #1
    4dbe:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4dc0:	f104 0020 	add.w	r0, r4, #32
    4dc4:	f005 fa38 	bl	a238 <onoff_manager_init>
		if (err < 0) {
    4dc8:	2800      	cmp	r0, #0
    4dca:	db01      	blt.n	4dd0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4dcc:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    4dce:	2000      	movs	r0, #0
}
    4dd0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4dd2:	f06f 0004 	mvn.w	r0, #4
    4dd6:	e7fb      	b.n	4dd0 <clk_init+0x44>
    4dd8:	00004e19 	.word	0x00004e19
    4ddc:	0bad0000 	.word	0x0bad0000
    4de0:	0000b66c 	.word	0x0000b66c

00004de4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4de4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4de6:	230c      	movs	r3, #12
    4de8:	4809      	ldr	r0, [pc, #36]	; (4e10 <clkstarted_handle.constprop.0+0x2c>)
    4dea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4dec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4dee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4df0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    4df4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4df6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    4df8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    4dfa:	4418      	add	r0, r3
    4dfc:	f005 fc17 	bl	a62e <set_on_state>
	if (callback) {
    4e00:	b12d      	cbz	r5, 4e0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4e02:	4632      	mov	r2, r6
    4e04:	462b      	mov	r3, r5
    4e06:	4803      	ldr	r0, [pc, #12]	; (4e14 <clkstarted_handle.constprop.0+0x30>)
}
    4e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4e0c:	4718      	bx	r3
}
    4e0e:	bd70      	pop	{r4, r5, r6, pc}
    4e10:	20004da8 	.word	0x20004da8
    4e14:	0000b27c 	.word	0x0000b27c

00004e18 <clock_event_handler>:
	switch (event) {
    4e18:	2801      	cmp	r0, #1
{
    4e1a:	b508      	push	{r3, lr}
	switch (event) {
    4e1c:	d006      	beq.n	4e2c <clock_event_handler+0x14>
    4e1e:	2803      	cmp	r0, #3
    4e20:	d008      	beq.n	4e34 <clock_event_handler+0x1c>
    4e22:	b9a8      	cbnz	r0, 4e50 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4e24:	4b10      	ldr	r3, [pc, #64]	; (4e68 <clock_event_handler+0x50>)
    4e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4e28:	075b      	lsls	r3, r3, #29
    4e2a:	d11b      	bne.n	4e64 <clock_event_handler+0x4c>
}
    4e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4e30:	f7ff bfd8 	b.w	4de4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4e34:	490d      	ldr	r1, [pc, #52]	; (4e6c <clock_event_handler+0x54>)
    4e36:	4a0e      	ldr	r2, [pc, #56]	; (4e70 <clock_event_handler+0x58>)
    4e38:	480e      	ldr	r0, [pc, #56]	; (4e74 <clock_event_handler+0x5c>)
    4e3a:	f240 235e 	movw	r3, #606	; 0x25e
    4e3e:	f005 fb28 	bl	a492 <assert_print>
    4e42:	f240 215e 	movw	r1, #606	; 0x25e
}
    4e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    4e4a:	4809      	ldr	r0, [pc, #36]	; (4e70 <clock_event_handler+0x58>)
    4e4c:	f005 bb1a 	b.w	a484 <assert_post_action>
    4e50:	4906      	ldr	r1, [pc, #24]	; (4e6c <clock_event_handler+0x54>)
    4e52:	4a07      	ldr	r2, [pc, #28]	; (4e70 <clock_event_handler+0x58>)
    4e54:	4807      	ldr	r0, [pc, #28]	; (4e74 <clock_event_handler+0x5c>)
    4e56:	f240 2362 	movw	r3, #610	; 0x262
    4e5a:	f005 fb1a 	bl	a492 <assert_print>
    4e5e:	f240 2162 	movw	r1, #610	; 0x262
    4e62:	e7f0      	b.n	4e46 <clock_event_handler+0x2e>
}
    4e64:	bd08      	pop	{r3, pc}
    4e66:	bf00      	nop
    4e68:	20004da8 	.word	0x20004da8
    4e6c:	0000d2b1 	.word	0x0000d2b1
    4e70:	0000c8f8 	.word	0x0000c8f8
    4e74:	0000b9c2 	.word	0x0000b9c2

00004e78 <generic_hfclk_start>:
{
    4e78:	b508      	push	{r3, lr}
	__asm__ volatile(
    4e7a:	f04f 0320 	mov.w	r3, #32
    4e7e:	f3ef 8111 	mrs	r1, BASEPRI
    4e82:	f383 8812 	msr	BASEPRI_MAX, r3
    4e86:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4e8a:	4a12      	ldr	r2, [pc, #72]	; (4ed4 <generic_hfclk_start+0x5c>)
    4e8c:	6813      	ldr	r3, [r2, #0]
    4e8e:	f043 0002 	orr.w	r0, r3, #2
    4e92:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4e94:	07da      	lsls	r2, r3, #31
    4e96:	d408      	bmi.n	4eaa <generic_hfclk_start+0x32>
	__asm__ volatile(
    4e98:	f381 8811 	msr	BASEPRI, r1
    4e9c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4ea0:	2001      	movs	r0, #1
}
    4ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4ea6:	f001 bc57 	b.w	6758 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4eae:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4eb2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4eb6:	07d3      	lsls	r3, r2, #31
    4eb8:	d5ee      	bpl.n	4e98 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4eba:	4807      	ldr	r0, [pc, #28]	; (4ed8 <generic_hfclk_start+0x60>)
    4ebc:	f005 fbb7 	bl	a62e <set_on_state>
    4ec0:	f381 8811 	msr	BASEPRI, r1
    4ec4:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4ec8:	2000      	movs	r0, #0
}
    4eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4ece:	f7ff bf89 	b.w	4de4 <clkstarted_handle.constprop.0>
    4ed2:	bf00      	nop
    4ed4:	20004e00 	.word	0x20004e00
    4ed8:	20004df0 	.word	0x20004df0

00004edc <api_blocking_start>:
{
    4edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ede:	2200      	movs	r2, #0
    4ee0:	2301      	movs	r3, #1
    4ee2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4ee6:	4a09      	ldr	r2, [pc, #36]	; (4f0c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ee8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4eec:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4eee:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4ef2:	f005 fbdd 	bl	a6b0 <api_start>
	if (err < 0) {
    4ef6:	2800      	cmp	r0, #0
    4ef8:	db05      	blt.n	4f06 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4efe:	2300      	movs	r3, #0
    4f00:	4668      	mov	r0, sp
    4f02:	f002 ff89 	bl	7e18 <z_impl_k_sem_take>
}
    4f06:	b005      	add	sp, #20
    4f08:	f85d fb04 	ldr.w	pc, [sp], #4
    4f0c:	0000a6dd 	.word	0x0000a6dd

00004f10 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f10:	4b09      	ldr	r3, [pc, #36]	; (4f38 <generic_hfclk_stop+0x28>)
    4f12:	f3bf 8f5b 	dmb	ish
    4f16:	e853 2f00 	ldrex	r2, [r3]
    4f1a:	f022 0102 	bic.w	r1, r2, #2
    4f1e:	e843 1000 	strex	r0, r1, [r3]
    4f22:	2800      	cmp	r0, #0
    4f24:	d1f7      	bne.n	4f16 <generic_hfclk_stop+0x6>
    4f26:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4f2a:	07d3      	lsls	r3, r2, #31
    4f2c:	d402      	bmi.n	4f34 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4f2e:	2001      	movs	r0, #1
    4f30:	f001 bc76 	b.w	6820 <nrfx_clock_stop>
}
    4f34:	4770      	bx	lr
    4f36:	bf00      	nop
    4f38:	20004e00 	.word	0x20004e00

00004f3c <z_nrf_clock_control_lf_on>:
{
    4f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4f40:	4947      	ldr	r1, [pc, #284]	; (5060 <z_nrf_clock_control_lf_on+0x124>)
    4f42:	f3bf 8f5b 	dmb	ish
    4f46:	4606      	mov	r6, r0
    4f48:	2201      	movs	r2, #1
    4f4a:	e851 3f00 	ldrex	r3, [r1]
    4f4e:	e841 2000 	strex	r0, r2, [r1]
    4f52:	2800      	cmp	r0, #0
    4f54:	d1f9      	bne.n	4f4a <z_nrf_clock_control_lf_on+0xe>
    4f56:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4f5a:	b9a3      	cbnz	r3, 4f86 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4f5c:	4941      	ldr	r1, [pc, #260]	; (5064 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    4f5e:	4842      	ldr	r0, [pc, #264]	; (5068 <z_nrf_clock_control_lf_on+0x12c>)
    4f60:	604b      	str	r3, [r1, #4]
    4f62:	60cb      	str	r3, [r1, #12]
    4f64:	608a      	str	r2, [r1, #8]
    4f66:	f7fd f859 	bl	201c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4f6a:	2800      	cmp	r0, #0
    4f6c:	da0b      	bge.n	4f86 <z_nrf_clock_control_lf_on+0x4a>
    4f6e:	493f      	ldr	r1, [pc, #252]	; (506c <z_nrf_clock_control_lf_on+0x130>)
    4f70:	483f      	ldr	r0, [pc, #252]	; (5070 <z_nrf_clock_control_lf_on+0x134>)
    4f72:	4a40      	ldr	r2, [pc, #256]	; (5074 <z_nrf_clock_control_lf_on+0x138>)
    4f74:	f44f 7308 	mov.w	r3, #544	; 0x220
    4f78:	f005 fa8b 	bl	a492 <assert_print>
    4f7c:	483d      	ldr	r0, [pc, #244]	; (5074 <z_nrf_clock_control_lf_on+0x138>)
    4f7e:	f44f 7108 	mov.w	r1, #544	; 0x220
    4f82:	f005 fa7f 	bl	a484 <assert_post_action>
	switch (start_mode) {
    4f86:	b376      	cbz	r6, 4fe6 <z_nrf_clock_control_lf_on+0xaa>
    4f88:	1e73      	subs	r3, r6, #1
    4f8a:	2b01      	cmp	r3, #1
    4f8c:	d859      	bhi.n	5042 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4f8e:	2e01      	cmp	r6, #1
    4f90:	d107      	bne.n	4fa2 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f96:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4f9a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4f9e:	2b01      	cmp	r3, #1
    4fa0:	d021      	beq.n	4fe6 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4fa2:	f005 ff8e 	bl	aec2 <k_is_in_isr>
    4fa6:	4605      	mov	r5, r0
    4fa8:	b9f8      	cbnz	r0, 4fea <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4faa:	4b33      	ldr	r3, [pc, #204]	; (5078 <z_nrf_clock_control_lf_on+0x13c>)
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	b1e3      	cbz	r3, 4fea <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4fb4:	2202      	movs	r2, #2
    4fb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4fba:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4fbc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 507c <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4fc0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4fc4:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4fc8:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4fcc:	03d2      	lsls	r2, r2, #15
    4fce:	d516      	bpl.n	4ffe <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4fd0:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4fd4:	2b01      	cmp	r3, #1
    4fd6:	d001      	beq.n	4fdc <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4fd8:	2e01      	cmp	r6, #1
    4fda:	d110      	bne.n	4ffe <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4fdc:	b35d      	cbz	r5, 5036 <z_nrf_clock_control_lf_on+0xfa>
    4fde:	f387 8811 	msr	BASEPRI, r7
    4fe2:	f3bf 8f6f 	isb	sy
}
    4fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4fea:	f04f 0320 	mov.w	r3, #32
    4fee:	f3ef 8711 	mrs	r7, BASEPRI
    4ff2:	f383 8812 	msr	BASEPRI_MAX, r3
    4ff6:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4ffa:	2501      	movs	r5, #1
    4ffc:	e7de      	b.n	4fbc <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4ffe:	b1ad      	cbz	r5, 502c <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5000:	4638      	mov	r0, r7
    5002:	f7fe ff0d 	bl	3e20 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5006:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    500a:	2b00      	cmp	r3, #0
    500c:	d1da      	bne.n	4fc4 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    500e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5012:	2a00      	cmp	r2, #0
    5014:	d0d6      	beq.n	4fc4 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5016:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    501a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    501e:	2301      	movs	r3, #1
    5020:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    5024:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5028:	60a3      	str	r3, [r4, #8]
}
    502a:	e7cb      	b.n	4fc4 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    502c:	2100      	movs	r1, #0
    502e:	2021      	movs	r0, #33	; 0x21
    5030:	f003 ffd4 	bl	8fdc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5034:	e7e7      	b.n	5006 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    5036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    503a:	2202      	movs	r2, #2
    503c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5040:	e7d1      	b.n	4fe6 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    5042:	490f      	ldr	r1, [pc, #60]	; (5080 <z_nrf_clock_control_lf_on+0x144>)
    5044:	480a      	ldr	r0, [pc, #40]	; (5070 <z_nrf_clock_control_lf_on+0x134>)
    5046:	4a0b      	ldr	r2, [pc, #44]	; (5074 <z_nrf_clock_control_lf_on+0x138>)
    5048:	f240 2332 	movw	r3, #562	; 0x232
    504c:	f005 fa21 	bl	a492 <assert_print>
}
    5050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    5054:	4807      	ldr	r0, [pc, #28]	; (5074 <z_nrf_clock_control_lf_on+0x138>)
    5056:	f240 2132 	movw	r1, #562	; 0x232
    505a:	f005 ba13 	b.w	a484 <assert_post_action>
    505e:	bf00      	nop
    5060:	20004da4 	.word	0x20004da4
    5064:	20004d94 	.word	0x20004d94
    5068:	20004dc8 	.word	0x20004dc8
    506c:	0000bf56 	.word	0x0000bf56
    5070:	0000b9c2 	.word	0x0000b9c2
    5074:	0000c8f8 	.word	0x0000c8f8
    5078:	2001151d 	.word	0x2001151d
    507c:	e000e100 	.word	0xe000e100
    5080:	0000d2b1 	.word	0x0000d2b1

00005084 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    5084:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5086:	4b08      	ldr	r3, [pc, #32]	; (50a8 <uart_console_init+0x24>)
    5088:	4808      	ldr	r0, [pc, #32]	; (50ac <uart_console_init+0x28>)
    508a:	6018      	str	r0, [r3, #0]
    508c:	f005 fedf 	bl	ae4e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5090:	b138      	cbz	r0, 50a2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    5092:	4807      	ldr	r0, [pc, #28]	; (50b0 <uart_console_init+0x2c>)
    5094:	f7ff fd66 	bl	4b64 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5098:	4805      	ldr	r0, [pc, #20]	; (50b0 <uart_console_init+0x2c>)
    509a:	f7fc fd6b 	bl	1b74 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    509e:	2000      	movs	r0, #0
}
    50a0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    50a2:	f06f 0012 	mvn.w	r0, #18
    50a6:	e7fb      	b.n	50a0 <uart_console_init+0x1c>
    50a8:	20004e04 	.word	0x20004e04
    50ac:	0000b2dc 	.word	0x0000b2dc
    50b0:	000050b5 	.word	0x000050b5

000050b4 <console_out>:
	if ('\n' == c) {
    50b4:	280a      	cmp	r0, #10
{
    50b6:	b538      	push	{r3, r4, r5, lr}
    50b8:	4d07      	ldr	r5, [pc, #28]	; (50d8 <console_out+0x24>)
    50ba:	4604      	mov	r4, r0
	if ('\n' == c) {
    50bc:	d104      	bne.n	50c8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    50be:	6828      	ldr	r0, [r5, #0]
    50c0:	6883      	ldr	r3, [r0, #8]
    50c2:	210d      	movs	r1, #13
    50c4:	69db      	ldr	r3, [r3, #28]
    50c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    50c8:	6828      	ldr	r0, [r5, #0]
    50ca:	6883      	ldr	r3, [r0, #8]
    50cc:	b2e1      	uxtb	r1, r4
    50ce:	69db      	ldr	r3, [r3, #28]
    50d0:	4798      	blx	r3
}
    50d2:	4620      	mov	r0, r4
    50d4:	bd38      	pop	{r3, r4, r5, pc}
    50d6:	bf00      	nop
    50d8:	20004e04 	.word	0x20004e04

000050dc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    50dc:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    50de:	6905      	ldr	r5, [r0, #16]
{
    50e0:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    50e2:	460c      	mov	r4, r1
    50e4:	b961      	cbnz	r1, 5100 <gpio_nrfx_manage_callback+0x24>
    50e6:	4922      	ldr	r1, [pc, #136]	; (5170 <gpio_nrfx_manage_callback+0x94>)
    50e8:	4a22      	ldr	r2, [pc, #136]	; (5174 <gpio_nrfx_manage_callback+0x98>)
    50ea:	4823      	ldr	r0, [pc, #140]	; (5178 <gpio_nrfx_manage_callback+0x9c>)
    50ec:	2324      	movs	r3, #36	; 0x24
    50ee:	f005 f9d0 	bl	a492 <assert_print>
    50f2:	4822      	ldr	r0, [pc, #136]	; (517c <gpio_nrfx_manage_callback+0xa0>)
    50f4:	f005 f9cd 	bl	a492 <assert_print>
    50f8:	481e      	ldr	r0, [pc, #120]	; (5174 <gpio_nrfx_manage_callback+0x98>)
    50fa:	2124      	movs	r1, #36	; 0x24
    50fc:	f005 f9c2 	bl	a484 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    5100:	6863      	ldr	r3, [r4, #4]
    5102:	b963      	cbnz	r3, 511e <gpio_nrfx_manage_callback+0x42>
    5104:	491e      	ldr	r1, [pc, #120]	; (5180 <gpio_nrfx_manage_callback+0xa4>)
    5106:	4a1b      	ldr	r2, [pc, #108]	; (5174 <gpio_nrfx_manage_callback+0x98>)
    5108:	481b      	ldr	r0, [pc, #108]	; (5178 <gpio_nrfx_manage_callback+0x9c>)
    510a:	2325      	movs	r3, #37	; 0x25
    510c:	f005 f9c1 	bl	a492 <assert_print>
    5110:	481c      	ldr	r0, [pc, #112]	; (5184 <gpio_nrfx_manage_callback+0xa8>)
    5112:	f005 f9be 	bl	a492 <assert_print>
    5116:	4817      	ldr	r0, [pc, #92]	; (5174 <gpio_nrfx_manage_callback+0x98>)
    5118:	2125      	movs	r1, #37	; 0x25
    511a:	f005 f9b3 	bl	a484 <assert_post_action>
	return list->head;
    511e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    5120:	b14b      	cbz	r3, 5136 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5122:	42a3      	cmp	r3, r4
    5124:	d113      	bne.n	514e <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    5126:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    5128:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    512a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    512c:	4294      	cmp	r4, r2
    512e:	d100      	bne.n	5132 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    5130:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    5132:	2300      	movs	r3, #0
    5134:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    5136:	b97e      	cbnz	r6, 5158 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5138:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    513a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    513c:	429c      	cmp	r4, r3
    513e:	d106      	bne.n	514e <gpio_nrfx_manage_callback+0x72>
	return node->next;
    5140:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5142:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5144:	68ab      	ldr	r3, [r5, #8]
    5146:	429c      	cmp	r4, r3
    5148:	d1f3      	bne.n	5132 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    514a:	60aa      	str	r2, [r5, #8]
}
    514c:	e7f1      	b.n	5132 <gpio_nrfx_manage_callback+0x56>
	return node->next;
    514e:	461a      	mov	r2, r3
    5150:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5152:	2b00      	cmp	r3, #0
    5154:	d1f2      	bne.n	513c <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    5156:	b13e      	cbz	r6, 5168 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    5158:	686b      	ldr	r3, [r5, #4]
    515a:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    515c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    515e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    5160:	2b00      	cmp	r3, #0
    5162:	d1e9      	bne.n	5138 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    5164:	60ac      	str	r4, [r5, #8]
}
    5166:	e7e7      	b.n	5138 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    5168:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    516c:	e7e5      	b.n	513a <gpio_nrfx_manage_callback+0x5e>
    516e:	bf00      	nop
    5170:	0000c9a6 	.word	0x0000c9a6
    5174:	0000c979 	.word	0x0000c979
    5178:	0000b9c2 	.word	0x0000b9c2
    517c:	0000c9af 	.word	0x0000c9af
    5180:	0000c9be 	.word	0x0000c9be
    5184:	0000c9d0 	.word	0x0000c9d0

00005188 <gpio_nrfx_pin_interrupt_configure>:
{
    5188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    518a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    518c:	7b05      	ldrb	r5, [r0, #12]
    518e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    5192:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5196:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    519a:	d104      	bne.n	51a6 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    519c:	4620      	mov	r0, r4
    519e:	f001 fe5b 	bl	6e58 <nrfx_gpiote_trigger_disable>
		return 0;
    51a2:	2000      	movs	r0, #0
    51a4:	e05d      	b.n	5262 <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    51a6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    51a8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    51ac:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    51b0:	d114      	bne.n	51dc <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    51b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    51b6:	bf0c      	ite	eq
    51b8:	2304      	moveq	r3, #4
    51ba:	2305      	movne	r3, #5
    51bc:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    51c0:	2300      	movs	r3, #0
    51c2:	4619      	mov	r1, r3
    51c4:	aa02      	add	r2, sp, #8
    51c6:	4620      	mov	r0, r4
    51c8:	f001 fc4c 	bl	6a64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    51cc:	4b34      	ldr	r3, [pc, #208]	; (52a0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    51ce:	4298      	cmp	r0, r3
    51d0:	d162      	bne.n	5298 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    51d2:	2101      	movs	r1, #1
    51d4:	4620      	mov	r0, r4
    51d6:	f001 fdcf 	bl	6d78 <nrfx_gpiote_trigger_enable>
	return 0;
    51da:	e7e2      	b.n	51a2 <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    51dc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    51e0:	d041      	beq.n	5266 <gpio_nrfx_pin_interrupt_configure+0xde>
    51e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    51e6:	bf14      	ite	ne
    51e8:	2301      	movne	r3, #1
    51ea:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    51ec:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    51f0:	6883      	ldr	r3, [r0, #8]
    51f2:	40cb      	lsrs	r3, r1
    51f4:	07d8      	lsls	r0, r3, #31
    51f6:	d4e3      	bmi.n	51c0 <gpio_nrfx_pin_interrupt_configure+0x38>
    51f8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    51fc:	d1e0      	bne.n	51c0 <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    51fe:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    5200:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    5204:	d031      	beq.n	526a <gpio_nrfx_pin_interrupt_configure+0xe2>
    5206:	2e01      	cmp	r6, #1
    5208:	d104      	bne.n	5214 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    520a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    520e:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5210:	07d9      	lsls	r1, r3, #31
    5212:	d40e      	bmi.n	5232 <gpio_nrfx_pin_interrupt_configure+0xaa>
    5214:	4923      	ldr	r1, [pc, #140]	; (52a4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    5216:	4824      	ldr	r0, [pc, #144]	; (52a8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5218:	4a24      	ldr	r2, [pc, #144]	; (52ac <gpio_nrfx_pin_interrupt_configure+0x124>)
    521a:	f240 2329 	movw	r3, #553	; 0x229
    521e:	f005 f938 	bl	a492 <assert_print>
    5222:	4822      	ldr	r0, [pc, #136]	; (52ac <gpio_nrfx_pin_interrupt_configure+0x124>)
    5224:	f240 2129 	movw	r1, #553	; 0x229
    5228:	f005 f92c 	bl	a484 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    522c:	b316      	cbz	r6, 5274 <gpio_nrfx_pin_interrupt_configure+0xec>
    522e:	2e01      	cmp	r6, #1
    5230:	d123      	bne.n	527a <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    5232:	4b1f      	ldr	r3, [pc, #124]	; (52b0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5234:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5238:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    523c:	07db      	lsls	r3, r3, #31
    523e:	d4bf      	bmi.n	51c0 <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5240:	f10d 0507 	add.w	r5, sp, #7
    5244:	4629      	mov	r1, r5
    5246:	4620      	mov	r0, r4
    5248:	f001 fd2e 	bl	6ca8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    524c:	4b19      	ldr	r3, [pc, #100]	; (52b4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    524e:	4298      	cmp	r0, r3
    5250:	d120      	bne.n	5294 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    5252:	4628      	mov	r0, r5
    5254:	f001 fd8a 	bl	6d6c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5258:	4b11      	ldr	r3, [pc, #68]	; (52a0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    525a:	4298      	cmp	r0, r3
    525c:	d01a      	beq.n	5294 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    525e:	f06f 000b 	mvn.w	r0, #11
}
    5262:	b004      	add	sp, #16
    5264:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5266:	2303      	movs	r3, #3
    5268:	e7c0      	b.n	51ec <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    526a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    526e:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5270:	07da      	lsls	r2, r3, #31
    5272:	d5cf      	bpl.n	5214 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    5274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5278:	e7dc      	b.n	5234 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    527a:	4a0c      	ldr	r2, [pc, #48]	; (52ac <gpio_nrfx_pin_interrupt_configure+0x124>)
    527c:	490e      	ldr	r1, [pc, #56]	; (52b8 <gpio_nrfx_pin_interrupt_configure+0x130>)
    527e:	480a      	ldr	r0, [pc, #40]	; (52a8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5280:	f240 232e 	movw	r3, #558	; 0x22e
    5284:	f005 f905 	bl	a492 <assert_print>
    5288:	4808      	ldr	r0, [pc, #32]	; (52ac <gpio_nrfx_pin_interrupt_configure+0x124>)
    528a:	f240 212e 	movw	r1, #558	; 0x22e
    528e:	f005 f8f9 	bl	a484 <assert_post_action>
    5292:	e7ef      	b.n	5274 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    5294:	9503      	str	r5, [sp, #12]
    5296:	e793      	b.n	51c0 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    5298:	f06f 0004 	mvn.w	r0, #4
    529c:	e7e1      	b.n	5262 <gpio_nrfx_pin_interrupt_configure+0xda>
    529e:	bf00      	nop
    52a0:	0bad0000 	.word	0x0bad0000
    52a4:	0000ca1a 	.word	0x0000ca1a
    52a8:	0000b9c2 	.word	0x0000b9c2
    52ac:	0000c9e7 	.word	0x0000c9e7
    52b0:	50000300 	.word	0x50000300
    52b4:	0bad0004 	.word	0x0bad0004
    52b8:	0000d2b1 	.word	0x0000d2b1

000052bc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    52bc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    52be:	f001 fd45 	bl	6d4c <nrfx_gpiote_is_init>
    52c2:	4604      	mov	r4, r0
    52c4:	b968      	cbnz	r0, 52e2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    52c6:	f001 fd19 	bl	6cfc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    52ca:	4b08      	ldr	r3, [pc, #32]	; (52ec <gpio_nrfx_init+0x30>)
    52cc:	4298      	cmp	r0, r3
    52ce:	d10a      	bne.n	52e6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    52d0:	4807      	ldr	r0, [pc, #28]	; (52f0 <gpio_nrfx_init+0x34>)
    52d2:	4621      	mov	r1, r4
    52d4:	f001 fce2 	bl	6c9c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    52d8:	4622      	mov	r2, r4
    52da:	2105      	movs	r1, #5
    52dc:	2006      	movs	r0, #6
    52de:	f7fe fe15 	bl	3f0c <z_arm_irq_priority_set>
		return 0;
    52e2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    52e4:	bd10      	pop	{r4, pc}
		return -EIO;
    52e6:	f06f 0004 	mvn.w	r0, #4
    52ea:	e7fb      	b.n	52e4 <gpio_nrfx_init+0x28>
    52ec:	0bad0000 	.word	0x0bad0000
    52f0:	000052f5 	.word	0x000052f5

000052f4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    52f4:	0943      	lsrs	r3, r0, #5
{
    52f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    52fa:	d003      	beq.n	5304 <nrfx_gpio_handler+0x10>
    52fc:	2b01      	cmp	r3, #1
    52fe:	d030      	beq.n	5362 <nrfx_gpio_handler+0x6e>
}
    5300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5304:	4f19      	ldr	r7, [pc, #100]	; (536c <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5306:	693b      	ldr	r3, [r7, #16]
    5308:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    530a:	2c00      	cmp	r4, #0
    530c:	d0f8      	beq.n	5300 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    530e:	f000 001f 	and.w	r0, r0, #31
    5312:	2601      	movs	r6, #1
	return node->next;
    5314:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    5316:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5370 <nrfx_gpio_handler+0x7c>
    531a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5374 <nrfx_gpio_handler+0x80>
    531e:	f8df a058 	ldr.w	sl, [pc, #88]	; 5378 <nrfx_gpio_handler+0x84>
    5322:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5324:	2c00      	cmp	r4, #0
    5326:	d0eb      	beq.n	5300 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    5328:	68a3      	ldr	r3, [r4, #8]
    532a:	421e      	tst	r6, r3
    532c:	d014      	beq.n	5358 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    532e:	6863      	ldr	r3, [r4, #4]
    5330:	b963      	cbnz	r3, 534c <nrfx_gpio_handler+0x58>
    5332:	4649      	mov	r1, r9
    5334:	2345      	movs	r3, #69	; 0x45
    5336:	4642      	mov	r2, r8
    5338:	4650      	mov	r0, sl
    533a:	f005 f8aa 	bl	a492 <assert_print>
    533e:	480f      	ldr	r0, [pc, #60]	; (537c <nrfx_gpio_handler+0x88>)
    5340:	f005 f8a7 	bl	a492 <assert_print>
    5344:	2145      	movs	r1, #69	; 0x45
    5346:	4640      	mov	r0, r8
    5348:	f005 f89c 	bl	a484 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    534c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5350:	4621      	mov	r1, r4
    5352:	4032      	ands	r2, r6
    5354:	4638      	mov	r0, r7
    5356:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5358:	b12d      	cbz	r5, 5366 <nrfx_gpio_handler+0x72>
    535a:	682b      	ldr	r3, [r5, #0]
    535c:	462c      	mov	r4, r5
    535e:	461d      	mov	r5, r3
    5360:	e7e0      	b.n	5324 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5362:	4f07      	ldr	r7, [pc, #28]	; (5380 <nrfx_gpio_handler+0x8c>)
    5364:	e7cf      	b.n	5306 <nrfx_gpio_handler+0x12>
    5366:	462b      	mov	r3, r5
    5368:	e7f8      	b.n	535c <nrfx_gpio_handler+0x68>
    536a:	bf00      	nop
    536c:	0000b2ac 	.word	0x0000b2ac
    5370:	0000c979 	.word	0x0000c979
    5374:	0000ca3d 	.word	0x0000ca3d
    5378:	0000b9c2 	.word	0x0000b9c2
    537c:	0000c9d0 	.word	0x0000c9d0
    5380:	0000b294 	.word	0x0000b294

00005384 <gpio_nrfx_pin_configure>:
{
    5384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5388:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    538a:	7b3b      	ldrb	r3, [r7, #12]
    538c:	f001 051f 	and.w	r5, r1, #31
{
    5390:	b085      	sub	sp, #20
    5392:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5394:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5398:	4614      	mov	r4, r2
    539a:	b9d2      	cbnz	r2, 53d2 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    539c:	a902      	add	r1, sp, #8
    539e:	4628      	mov	r0, r5
    53a0:	f001 fc82 	bl	6ca8 <nrfx_gpiote_channel_get>
    53a4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    53a6:	4628      	mov	r0, r5
    53a8:	f001 fd80 	bl	6eac <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    53ac:	4b46      	ldr	r3, [pc, #280]	; (54c8 <gpio_nrfx_pin_configure+0x144>)
    53ae:	4298      	cmp	r0, r3
    53b0:	d004      	beq.n	53bc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    53b2:	f06f 0004 	mvn.w	r0, #4
}
    53b6:	b005      	add	sp, #20
    53b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    53bc:	4284      	cmp	r4, r0
    53be:	d001      	beq.n	53c4 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    53c0:	2000      	movs	r0, #0
    53c2:	e7f8      	b.n	53b6 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    53c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    53c8:	f001 fcca 	bl	6d60 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    53cc:	42a0      	cmp	r0, r4
    53ce:	d0f7      	beq.n	53c0 <gpio_nrfx_pin_configure+0x3c>
    53d0:	e7ef      	b.n	53b2 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    53d2:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    53d6:	f10d 0103 	add.w	r1, sp, #3
    53da:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    53dc:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    53e0:	f001 fc62 	bl	6ca8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    53e4:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    53e6:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    53e8:	aa02      	add	r2, sp, #8
    53ea:	4649      	mov	r1, r9
    53ec:	4628      	mov	r0, r5
    53ee:	f001 fb39 	bl	6a64 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    53f2:	4b35      	ldr	r3, [pc, #212]	; (54c8 <gpio_nrfx_pin_configure+0x144>)
    53f4:	4298      	cmp	r0, r3
    53f6:	d002      	beq.n	53fe <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    53f8:	f06f 0015 	mvn.w	r0, #21
    53fc:	e7db      	b.n	53b6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    53fe:	4580      	cmp	r8, r0
    5400:	d103      	bne.n	540a <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    5402:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5406:	f001 fcab 	bl	6d60 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    540a:	03a3      	lsls	r3, r4, #14
    540c:	d54c      	bpl.n	54a8 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    540e:	f240 6306 	movw	r3, #1542	; 0x606
    5412:	4023      	ands	r3, r4
    5414:	f240 2206 	movw	r2, #518	; 0x206
    5418:	4293      	cmp	r3, r2
    541a:	d019      	beq.n	5450 <gpio_nrfx_pin_configure+0xcc>
    541c:	d80c      	bhi.n	5438 <gpio_nrfx_pin_configure+0xb4>
    541e:	2b06      	cmp	r3, #6
    5420:	d017      	beq.n	5452 <gpio_nrfx_pin_configure+0xce>
    5422:	d804      	bhi.n	542e <gpio_nrfx_pin_configure+0xaa>
    5424:	b1ab      	cbz	r3, 5452 <gpio_nrfx_pin_configure+0xce>
    5426:	2b02      	cmp	r3, #2
    5428:	d1e6      	bne.n	53f8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    542a:	2304      	movs	r3, #4
    542c:	e011      	b.n	5452 <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    542e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5432:	d1e1      	bne.n	53f8 <gpio_nrfx_pin_configure+0x74>
    5434:	2301      	movs	r3, #1
    5436:	e00c      	b.n	5452 <gpio_nrfx_pin_configure+0xce>
    5438:	f240 4202 	movw	r2, #1026	; 0x402
    543c:	4293      	cmp	r3, r2
    543e:	d027      	beq.n	5490 <gpio_nrfx_pin_configure+0x10c>
    5440:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    5444:	d026      	beq.n	5494 <gpio_nrfx_pin_configure+0x110>
    5446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    544a:	d1d5      	bne.n	53f8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    544c:	2302      	movs	r3, #2
    544e:	e000      	b.n	5452 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    5450:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5452:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5456:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    545a:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    545e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5460:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5464:	bf54      	ite	pl
    5466:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    546a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    546c:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    546e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5472:	d511      	bpl.n	5498 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5474:	687a      	ldr	r2, [r7, #4]
    5476:	2301      	movs	r3, #1
    5478:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    547a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    547e:	2200      	movs	r2, #0
    5480:	a901      	add	r1, sp, #4
    5482:	4628      	mov	r0, r5
    5484:	f001 fb96 	bl	6bb4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5488:	4b0f      	ldr	r3, [pc, #60]	; (54c8 <gpio_nrfx_pin_configure+0x144>)
    548a:	4298      	cmp	r0, r3
    548c:	d098      	beq.n	53c0 <gpio_nrfx_pin_configure+0x3c>
    548e:	e7b3      	b.n	53f8 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    5490:	2305      	movs	r3, #5
    5492:	e7de      	b.n	5452 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    5494:	2303      	movs	r3, #3
    5496:	e7dc      	b.n	5452 <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5498:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    549a:	bf41      	itttt	mi
    549c:	2301      	movmi	r3, #1
    549e:	687a      	ldrmi	r2, [r7, #4]
    54a0:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    54a2:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    54a6:	e7ea      	b.n	547e <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    54a8:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    54aa:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    54ae:	bf54      	ite	pl
    54b0:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    54b4:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    54b6:	461a      	mov	r2, r3
    54b8:	a901      	add	r1, sp, #4
    54ba:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    54bc:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    54c0:	f001 fad0 	bl	6a64 <nrfx_gpiote_input_configure>
    54c4:	e7e0      	b.n	5488 <gpio_nrfx_pin_configure+0x104>
    54c6:	bf00      	nop
    54c8:	0bad0000 	.word	0x0bad0000

000054cc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    54cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    54ce:	ab0b      	add	r3, sp, #44	; 0x2c
    54d0:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    54d2:	9303      	str	r3, [sp, #12]
    54d4:	4b05      	ldr	r3, [pc, #20]	; (54ec <z_log_msg2_runtime_create.constprop.0+0x20>)
    54d6:	9302      	str	r3, [sp, #8]
    54d8:	2300      	movs	r3, #0
    54da:	e9cd 3300 	strd	r3, r3, [sp]
    54de:	2201      	movs	r2, #1
    54e0:	4618      	mov	r0, r3
    54e2:	f7fe f91b 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    54e6:	b007      	add	sp, #28
    54e8:	f85d fb04 	ldr.w	pc, [sp], #4
    54ec:	0000ca57 	.word	0x0000ca57

000054f0 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    54f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    54f4:	461c      	mov	r4, r3
	return config->uarte_regs;
    54f6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    54f8:	6907      	ldr	r7, [r0, #16]
{
    54fa:	460e      	mov	r6, r1
    54fc:	4605      	mov	r5, r0
	return config->uarte_regs;
    54fe:	6819      	ldr	r1, [r3, #0]
    5500:	f04f 0320 	mov.w	r3, #32
    5504:	f3ef 8811 	mrs	r8, BASEPRI
    5508:	f383 8812 	msr	BASEPRI_MAX, r3
    550c:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    5510:	68f8      	ldr	r0, [r7, #12]
    5512:	68c3      	ldr	r3, [r0, #12]
    5514:	b143      	cbz	r3, 5528 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    5516:	f388 8811 	msr	BASEPRI, r8
    551a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    551e:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    5522:	b002      	add	sp, #8
    5524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    5528:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    552c:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    552e:	6086      	str	r6, [r0, #8]
    5530:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5534:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    5538:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    553c:	d110      	bne.n	5560 <uarte_nrfx_tx+0x70>
		data->async->xfer_len = len;
    553e:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    5542:	4639      	mov	r1, r7
    5544:	4628      	mov	r0, r5
    5546:	f005 fa5c 	bl	aa02 <start_tx_locked>
    554a:	f388 8811 	msr	BASEPRI, r8
    554e:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    5552:	7afb      	ldrb	r3, [r7, #11]
    5554:	2b01      	cmp	r3, #1
    5556:	d101      	bne.n	555c <uarte_nrfx_tx+0x6c>
	    && timeout != SYS_FOREVER_US) {
    5558:	1c63      	adds	r3, r4, #1
    555a:	d105      	bne.n	5568 <uarte_nrfx_tx+0x78>
	return 0;
    555c:	2000      	movs	r0, #0
    555e:	e7e0      	b.n	5522 <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    5560:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    5562:	f005 fa03 	bl	a96c <setup_tx_cache.isra.0>
    5566:	e7ec      	b.n	5542 <uarte_nrfx_tx+0x52>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5568:	480b      	ldr	r0, [pc, #44]	; (5598 <uarte_nrfx_tx+0xa8>)
    556a:	4a0c      	ldr	r2, [pc, #48]	; (559c <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    556c:	68fd      	ldr	r5, [r7, #12]
    556e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    5572:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5576:	2100      	movs	r1, #0
    5578:	2300      	movs	r3, #0
    557a:	fbc4 0106 	smlal	r0, r1, r4, r6
    557e:	f7fb f9dd 	bl	93c <__aeabi_uldivmod>
    5582:	3528      	adds	r5, #40	; 0x28
    5584:	4602      	mov	r2, r0
    5586:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5588:	2000      	movs	r0, #0
    558a:	2100      	movs	r1, #0
    558c:	e9cd 0100 	strd	r0, r1, [sp]
    5590:	4628      	mov	r0, r5
    5592:	f004 fa07 	bl	99a4 <z_impl_k_timer_start>
    5596:	e7e1      	b.n	555c <uarte_nrfx_tx+0x6c>
    5598:	000f423f 	.word	0x000f423f
    559c:	000f4240 	.word	0x000f4240

000055a0 <uarte_nrfx_configure>:
{
    55a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    55a2:	794b      	ldrb	r3, [r1, #5]
    55a4:	2b01      	cmp	r3, #1
    55a6:	d026      	beq.n	55f6 <uarte_nrfx_configure+0x56>
    55a8:	2b03      	cmp	r3, #3
    55aa:	d121      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    55ac:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    55ae:	798b      	ldrb	r3, [r1, #6]
    55b0:	2b03      	cmp	r3, #3
    55b2:	d11d      	bne.n	55f0 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    55b4:	79cc      	ldrb	r4, [r1, #7]
    55b6:	b10c      	cbz	r4, 55bc <uarte_nrfx_configure+0x1c>
    55b8:	2c01      	cmp	r4, #1
    55ba:	d119      	bne.n	55f0 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    55bc:	790a      	ldrb	r2, [r1, #4]
    55be:	b112      	cbz	r2, 55c6 <uarte_nrfx_configure+0x26>
    55c0:	2a02      	cmp	r2, #2
    55c2:	d115      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    55c4:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    55c6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    55c8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    55ca:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    55ce:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    55d0:	d065      	beq.n	569e <uarte_nrfx_configure+0xfe>
    55d2:	d82d      	bhi.n	5630 <uarte_nrfx_configure+0x90>
    55d4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    55d8:	d064      	beq.n	56a4 <uarte_nrfx_configure+0x104>
    55da:	d816      	bhi.n	560a <uarte_nrfx_configure+0x6a>
    55dc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    55e0:	d062      	beq.n	56a8 <uarte_nrfx_configure+0x108>
    55e2:	d80a      	bhi.n	55fa <uarte_nrfx_configure+0x5a>
    55e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    55e8:	d061      	beq.n	56ae <uarte_nrfx_configure+0x10e>
    55ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    55ee:	d061      	beq.n	56b4 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    55f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    55f4:	e052      	b.n	569c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    55f6:	2600      	movs	r6, #0
    55f8:	e7d9      	b.n	55ae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    55fa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    55fe:	d05c      	beq.n	56ba <uarte_nrfx_configure+0x11a>
    5600:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5604:	d1f4      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5606:	4b37      	ldr	r3, [pc, #220]	; (56e4 <uarte_nrfx_configure+0x144>)
    5608:	e03c      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    560a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    560e:	d057      	beq.n	56c0 <uarte_nrfx_configure+0x120>
    5610:	d807      	bhi.n	5622 <uarte_nrfx_configure+0x82>
    5612:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5616:	d055      	beq.n	56c4 <uarte_nrfx_configure+0x124>
    5618:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    561c:	d1e8      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    561e:	4b32      	ldr	r3, [pc, #200]	; (56e8 <uarte_nrfx_configure+0x148>)
    5620:	e030      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5622:	f647 2712 	movw	r7, #31250	; 0x7a12
    5626:	42bb      	cmp	r3, r7
    5628:	d1e2      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    562a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    562e:	e029      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5630:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5634:	d048      	beq.n	56c8 <uarte_nrfx_configure+0x128>
    5636:	d813      	bhi.n	5660 <uarte_nrfx_configure+0xc0>
    5638:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    563c:	d047      	beq.n	56ce <uarte_nrfx_configure+0x12e>
    563e:	d809      	bhi.n	5654 <uarte_nrfx_configure+0xb4>
    5640:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5644:	42bb      	cmp	r3, r7
    5646:	d044      	beq.n	56d2 <uarte_nrfx_configure+0x132>
    5648:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    564c:	d1d0      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    564e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    5652:	e017      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5654:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5658:	d1ca      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    565a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    565e:	e011      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5660:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5664:	d038      	beq.n	56d8 <uarte_nrfx_configure+0x138>
    5666:	d808      	bhi.n	567a <uarte_nrfx_configure+0xda>
    5668:	4f20      	ldr	r7, [pc, #128]	; (56ec <uarte_nrfx_configure+0x14c>)
    566a:	42bb      	cmp	r3, r7
    566c:	d037      	beq.n	56de <uarte_nrfx_configure+0x13e>
    566e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5672:	d1bd      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5674:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5678:	e004      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    567a:	4f1d      	ldr	r7, [pc, #116]	; (56f0 <uarte_nrfx_configure+0x150>)
    567c:	42bb      	cmp	r3, r7
    567e:	d1b7      	bne.n	55f0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5680:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5684:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5686:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    568a:	1d03      	adds	r3, r0, #4
    568c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    568e:	4334      	orrs	r4, r6
    5690:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5692:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5696:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    569a:	2000      	movs	r0, #0
}
    569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    569e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    56a2:	e7ef      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    56a4:	4b13      	ldr	r3, [pc, #76]	; (56f4 <uarte_nrfx_configure+0x154>)
    56a6:	e7ed      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    56a8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    56ac:	e7ea      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    56ae:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    56b2:	e7e7      	b.n	5684 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    56b4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    56b8:	e7e4      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    56ba:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    56be:	e7e1      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    56c0:	4b0d      	ldr	r3, [pc, #52]	; (56f8 <uarte_nrfx_configure+0x158>)
    56c2:	e7df      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    56c4:	4b0d      	ldr	r3, [pc, #52]	; (56fc <uarte_nrfx_configure+0x15c>)
    56c6:	e7dd      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    56c8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    56cc:	e7da      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    56ce:	4b0c      	ldr	r3, [pc, #48]	; (5700 <uarte_nrfx_configure+0x160>)
    56d0:	e7d8      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    56d2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    56d6:	e7d5      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    56d8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    56dc:	e7d2      	b.n	5684 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    56de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    56e2:	e7cf      	b.n	5684 <uarte_nrfx_configure+0xe4>
    56e4:	0013b000 	.word	0x0013b000
    56e8:	004ea000 	.word	0x004ea000
    56ec:	0003d090 	.word	0x0003d090
    56f0:	000f4240 	.word	0x000f4240
    56f4:	00275000 	.word	0x00275000
    56f8:	0075c000 	.word	0x0075c000
    56fc:	003af000 	.word	0x003af000
    5700:	013a9000 	.word	0x013a9000

00005704 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5708:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    570c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    570e:	f8d9 5000 	ldr.w	r5, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5712:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    5716:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5718:	2100      	movs	r1, #0
    571a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    571e:	4607      	mov	r7, r0
	data->dev = dev;
    5720:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5722:	aa05      	add	r2, sp, #20
    5724:	4640      	mov	r0, r8
    5726:	f005 fa0e 	bl	ab46 <pinctrl_lookup_state>
	if (ret < 0) {
    572a:	1e04      	subs	r4, r0, #0
    572c:	db25      	blt.n	577a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    572e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5730:	f8d8 2000 	ldr.w	r2, [r8]
    5734:	7919      	ldrb	r1, [r3, #4]
    5736:	6818      	ldr	r0, [r3, #0]
    5738:	f005 fa5c 	bl	abf4 <pinctrl_configure_pins>
	if (err < 0) {
    573c:	1e04      	subs	r4, r0, #0
    573e:	db1c      	blt.n	577a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5740:	1d31      	adds	r1, r6, #4
    5742:	4638      	mov	r0, r7
    5744:	f7ff ff2c 	bl	55a0 <uarte_nrfx_configure>
	if (err) {
    5748:	4604      	mov	r4, r0
    574a:	b9b0      	cbnz	r0, 577a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    574c:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5750:	0799      	lsls	r1, r3, #30
    5752:	d529      	bpl.n	57a8 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5754:	f106 0016 	add.w	r0, r6, #22
    5758:	f001 fcac 	bl	70b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    575c:	4b49      	ldr	r3, [pc, #292]	; (5884 <uarte_instance_init.constprop.0+0x180>)
    575e:	4298      	cmp	r0, r3
    5760:	d00f      	beq.n	5782 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    5762:	4b49      	ldr	r3, [pc, #292]	; (5888 <uarte_instance_init.constprop.0+0x184>)
    5764:	9400      	str	r4, [sp, #0]
    5766:	e9cd 4301 	strd	r4, r3, [sp, #4]
    576a:	4620      	mov	r0, r4
    576c:	4623      	mov	r3, r4
    576e:	4947      	ldr	r1, [pc, #284]	; (588c <uarte_instance_init.constprop.0+0x188>)
    5770:	2201      	movs	r2, #1
    5772:	f7ff feab 	bl	54cc <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    5776:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    577a:	4620      	mov	r0, r4
    577c:	b007      	add	sp, #28
    577e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5782:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5784:	00c3      	lsls	r3, r0, #3
    5786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    578a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    578e:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5792:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5796:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    579a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    579e:	4a3c      	ldr	r2, [pc, #240]	; (5890 <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    57a0:	2301      	movs	r3, #1
    57a2:	4083      	lsls	r3, r0
    57a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    57a8:	68f3      	ldr	r3, [r6, #12]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d055      	beq.n	585a <uarte_instance_init.constprop.0+0x156>
	return config->uarte_regs;
    57ae:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    57b0:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    57b4:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    57b6:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    57ba:	4936      	ldr	r1, [pc, #216]	; (5894 <uarte_instance_init.constprop.0+0x190>)
    57bc:	2204      	movs	r2, #4
    57be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    57c2:	2201      	movs	r2, #1
    57c4:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    57c8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    57cc:	2108      	movs	r1, #8
    57ce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57d2:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    57d6:	b1a1      	cbz	r1, 5802 <uarte_instance_init.constprop.0+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57d8:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57da:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    57de:	b91a      	cbnz	r2, 57e8 <uarte_instance_init.constprop.0+0xe4>
    57e0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    57e4:	2a00      	cmp	r2, #0
    57e6:	d0f8      	beq.n	57da <uarte_instance_init.constprop.0+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57e8:	2200      	movs	r2, #0
    57ea:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    57ee:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    57f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    57f6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    57fa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    57fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    5802:	4925      	ldr	r1, [pc, #148]	; (5898 <uarte_instance_init.constprop.0+0x194>)
    5804:	2200      	movs	r2, #0
    5806:	3088      	adds	r0, #136	; 0x88
    5808:	f005 fbc5 	bl	af96 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    580c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    5810:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    5814:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    5818:	4920      	ldr	r1, [pc, #128]	; (589c <uarte_instance_init.constprop.0+0x198>)
    581a:	2200      	movs	r2, #0
    581c:	3028      	adds	r0, #40	; 0x28
    581e:	f005 fbba 	bl	af96 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    5822:	f8d8 300c 	ldr.w	r3, [r8, #12]
    5826:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    582a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    582e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    5830:	bf5c      	itt	pl
    5832:	f44f 7280 	movpl.w	r2, #256	; 0x100
    5836:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    583a:	06db      	lsls	r3, r3, #27
    583c:	bf44      	itt	mi
    583e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    5842:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    5846:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    5848:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    584a:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    584e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5852:	2301      	movs	r3, #1
    5854:	60ab      	str	r3, [r5, #8]
    5856:	60eb      	str	r3, [r5, #12]
	return 0;
    5858:	e78f      	b.n	577a <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    585a:	2308      	movs	r3, #8
    585c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    5860:	f899 3008 	ldrb.w	r3, [r9, #8]
    5864:	2b00      	cmp	r3, #0
    5866:	d1e0      	bne.n	582a <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5868:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    586c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5870:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5874:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5878:	2301      	movs	r3, #1
    587a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    587e:	602b      	str	r3, [r5, #0]
}
    5880:	e7d3      	b.n	582a <uarte_instance_init.constprop.0+0x126>
    5882:	bf00      	nop
    5884:	0bad0000 	.word	0x0bad0000
    5888:	0000ca57 	.word	0x0000ca57
    588c:	0000b4b4 	.word	0x0000b4b4
    5890:	4001f000 	.word	0x4001f000
    5894:	000a0210 	.word	0x000a0210
    5898:	0000aa71 	.word	0x0000aa71
    589c:	0000ab35 	.word	0x0000ab35

000058a0 <uarte_nrfx_poll_out>:
{
    58a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    58a2:	6906      	ldr	r6, [r0, #16]
{
    58a4:	4605      	mov	r5, r0
    58a6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    58a8:	f005 fb0b 	bl	aec2 <k_is_in_isr>
    58ac:	b9b0      	cbnz	r0, 58dc <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    58ae:	4b28      	ldr	r3, [pc, #160]	; (5950 <uarte_nrfx_poll_out+0xb0>)
    58b0:	781b      	ldrb	r3, [r3, #0]
    58b2:	b19b      	cbz	r3, 58dc <uarte_nrfx_poll_out+0x3c>
{
    58b4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    58b6:	6868      	ldr	r0, [r5, #4]
    58b8:	f005 f893 	bl	a9e2 <is_tx_ready.isra.0>
    58bc:	2800      	cmp	r0, #0
    58be:	d134      	bne.n	592a <uarte_nrfx_poll_out+0x8a>
    58c0:	2001      	movs	r0, #1
    58c2:	f005 fa42 	bl	ad4a <nrfx_busy_wait>
    58c6:	3c01      	subs	r4, #1
    58c8:	d1f5      	bne.n	58b6 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    58ca:	2100      	movs	r1, #0
    58cc:	2021      	movs	r0, #33	; 0x21
    58ce:	f003 fb85 	bl	8fdc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    58d2:	e7ef      	b.n	58b4 <uarte_nrfx_poll_out+0x14>
    58d4:	f384 8811 	msr	BASEPRI, r4
    58d8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    58dc:	f04f 0320 	mov.w	r3, #32
    58e0:	f3ef 8411 	mrs	r4, BASEPRI
    58e4:	f383 8812 	msr	BASEPRI_MAX, r3
    58e8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    58ec:	6869      	ldr	r1, [r5, #4]
    58ee:	4608      	mov	r0, r1
    58f0:	f005 f877 	bl	a9e2 <is_tx_ready.isra.0>
    58f4:	2800      	cmp	r0, #0
    58f6:	d0ed      	beq.n	58d4 <uarte_nrfx_poll_out+0x34>
				if (data->async && data->async->tx_size &&
    58f8:	68f3      	ldr	r3, [r6, #12]
    58fa:	b153      	cbz	r3, 5912 <uarte_nrfx_poll_out+0x72>
    58fc:	68da      	ldr	r2, [r3, #12]
    58fe:	b142      	cbz	r2, 5912 <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
    5900:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    5904:	2a00      	cmp	r2, #0
    5906:	da04      	bge.n	5912 <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
    5908:	680a      	ldr	r2, [r1, #0]
    return p_reg->TXD.AMOUNT;
    590a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    590e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    5912:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    5914:	2201      	movs	r2, #1
	data->char_out = c;
    5916:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    591a:	4628      	mov	r0, r5
    591c:	f004 ff17 	bl	a74e <tx_start>
	__asm__ volatile(
    5920:	f384 8811 	msr	BASEPRI, r4
    5924:	f3bf 8f6f 	isb	sy
}
    5928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    592a:	f04f 0320 	mov.w	r3, #32
    592e:	f3ef 8411 	mrs	r4, BASEPRI
    5932:	f383 8812 	msr	BASEPRI_MAX, r3
    5936:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    593a:	6868      	ldr	r0, [r5, #4]
    593c:	f005 f851 	bl	a9e2 <is_tx_ready.isra.0>
    5940:	2800      	cmp	r0, #0
    5942:	d1e6      	bne.n	5912 <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
    5944:	f384 8811 	msr	BASEPRI, r4
    5948:	f3bf 8f6f 	isb	sy
}
    594c:	e7bd      	b.n	58ca <uarte_nrfx_poll_out+0x2a>
    594e:	bf00      	nop
    5950:	2001151d 	.word	0x2001151d

00005954 <uarte_nrfx_rx_enable>:
{
    5954:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    5958:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    595c:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    5960:	f8da 8000 	ldr.w	r8, [sl]
{
    5964:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    5966:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    596a:	4605      	mov	r5, r0
    596c:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    596e:	b192      	cbz	r2, 5996 <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    5970:	4a43      	ldr	r2, [pc, #268]	; (5a80 <uarte_nrfx_rx_enable+0x12c>)
    5972:	4944      	ldr	r1, [pc, #272]	; (5a84 <uarte_nrfx_rx_enable+0x130>)
    5974:	4844      	ldr	r0, [pc, #272]	; (5a88 <uarte_nrfx_rx_enable+0x134>)
    5976:	f240 337f 	movw	r3, #895	; 0x37f
    597a:	f004 fd8a 	bl	a492 <assert_print>
    597e:	4843      	ldr	r0, [pc, #268]	; (5a8c <uarte_nrfx_rx_enable+0x138>)
    5980:	f004 fd87 	bl	a492 <assert_print>
    5984:	483e      	ldr	r0, [pc, #248]	; (5a80 <uarte_nrfx_rx_enable+0x12c>)
    5986:	f240 317f 	movw	r1, #895	; 0x37f
    598a:	f004 fd7b 	bl	a484 <assert_post_action>
		return -ENOTSUP;
    598e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5992:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    5996:	f8db 100c 	ldr.w	r1, [fp, #12]
    599a:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    599e:	2a00      	cmp	r2, #0
    59a0:	d16b      	bne.n	5a7a <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    59a2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    59a6:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    59a8:	bfd2      	itee	le
    59aa:	235c      	movle	r3, #92	; 0x5c
    59ac:	2205      	movgt	r2, #5
    59ae:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    59b2:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    59b6:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    59b8:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    59bc:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    59be:	f8da 3004 	ldr.w	r3, [sl, #4]
    59c2:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    59c4:	e9c1 9718 	strd	r9, r7, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    59c8:	d523      	bpl.n	5a12 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    59ca:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    59ce:	b306      	cbz	r6, 5a12 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    59d0:	42be      	cmp	r6, r7
    59d2:	bf28      	it	cs
    59d4:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    59d6:	4648      	mov	r0, r9
    59d8:	4632      	mov	r2, r6
    59da:	31cc      	adds	r1, #204	; 0xcc
    59dc:	f005 fbce 	bl	b17c <memcpy>
			if (!len) {
    59e0:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    59e2:	44b1      	add	r9, r6
			if (!len) {
    59e4:	d115      	bne.n	5a12 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    59e6:	f8db 200c 	ldr.w	r2, [fp, #12]
    59ea:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    59ee:	1b9b      	subs	r3, r3, r6
    59f0:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    59f4:	4631      	mov	r1, r6
    59f6:	4628      	mov	r0, r5
    59f8:	f004 fed6 	bl	a7a8 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    59fc:	f8db 100c 	ldr.w	r1, [fp, #12]
    5a00:	4628      	mov	r0, r5
    5a02:	3160      	adds	r1, #96	; 0x60
    5a04:	f004 fee9 	bl	a7da <rx_buf_release>
				notify_rx_disable(dev);
    5a08:	4628      	mov	r0, r5
    5a0a:	f004 fefe 	bl	a80a <notify_rx_disable>
				return 0;
    5a0e:	2000      	movs	r0, #0
    5a10:	e7bf      	b.n	5992 <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a12:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5a14:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5a18:	f8c8 7538 	str.w	r7, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a1c:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    5a20:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    5a24:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    5a28:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    5a2c:	f8db 300c 	ldr.w	r3, [fp, #12]
    5a30:	2201      	movs	r2, #1
    5a32:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5a36:	f8da 3004 	ldr.w	r3, [sl, #4]
    5a3a:	06db      	lsls	r3, r3, #27
    5a3c:	d519      	bpl.n	5a72 <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    5a3e:	f04f 0320 	mov.w	r3, #32
    5a42:	f3ef 8111 	mrs	r1, BASEPRI
    5a46:	f383 8812 	msr	BASEPRI_MAX, r3
    5a4a:	f3bf 8f6f 	isb	sy
	if (data->async) {
    5a4e:	692b      	ldr	r3, [r5, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5a50:	6868      	ldr	r0, [r5, #4]
	if (data->async) {
    5a52:	68db      	ldr	r3, [r3, #12]
    5a54:	b12b      	cbz	r3, 5a62 <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    5a56:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    5a5a:	f042 0202 	orr.w	r2, r2, #2
    5a5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    5a62:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5a64:	2208      	movs	r2, #8
    5a66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    5a6a:	f381 8811 	msr	BASEPRI, r1
    5a6e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a72:	2301      	movs	r3, #1
    5a74:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    5a78:	e7c9      	b.n	5a0e <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    5a7a:	f06f 000f 	mvn.w	r0, #15
    5a7e:	e788      	b.n	5992 <uarte_nrfx_rx_enable+0x3e>
    5a80:	0000ca76 	.word	0x0000ca76
    5a84:	0000d2b1 	.word	0x0000d2b1
    5a88:	0000b9c2 	.word	0x0000b9c2
    5a8c:	0000caaa 	.word	0x0000caaa

00005a90 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    5a90:	6843      	ldr	r3, [r0, #4]
{
    5a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    5a96:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    5a98:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a9a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    5a9e:	b088      	sub	sp, #32
    5aa0:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    5aa2:	b169      	cbz	r1, 5ac0 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5aa4:	2200      	movs	r2, #0
    5aa6:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    5aaa:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    5aae:	68da      	ldr	r2, [r3, #12]
    5ab0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    5ab4:	3301      	adds	r3, #1
    5ab6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    5aba:	b008      	add	sp, #32
    5abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ac0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5ac4:	b313      	cbz	r3, 5b0c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ac6:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    5aca:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5ace:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5ad2:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    5ad6:	2214      	movs	r2, #20
    5ad8:	a803      	add	r0, sp, #12
    5ada:	f005 fb70 	bl	b1be <memset>
    5ade:	2306      	movs	r3, #6
    5ae0:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5ae4:	07f3      	lsls	r3, r6, #31
    5ae6:	f100 8102 	bmi.w	5cee <uarte_nrfx_isr_async+0x25e>
    5aea:	07b7      	lsls	r7, r6, #30
    5aec:	f100 8101 	bmi.w	5cf2 <uarte_nrfx_isr_async+0x262>
    5af0:	0770      	lsls	r0, r6, #29
    5af2:	f100 8100 	bmi.w	5cf6 <uarte_nrfx_isr_async+0x266>
    5af6:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    5afa:	4620      	mov	r0, r4
    5afc:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    5afe:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    5b02:	f004 fe4a 	bl	a79a <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    5b06:	4620      	mov	r0, r4
    5b08:	f004 feda 	bl	a8c0 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b0c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    5b10:	b37b      	cbz	r3, 5b72 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    5b12:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    5b16:	06d9      	lsls	r1, r3, #27
    5b18:	d52b      	bpl.n	5b72 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b1a:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    5b1e:	6927      	ldr	r7, [r4, #16]
    5b20:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    5b24:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    5b28:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    5b2a:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    5b2c:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    5b2e:	2301      	movs	r3, #1
    5b30:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    5b34:	3088      	adds	r0, #136	; 0x88
    5b36:	f005 fa3a 	bl	afae <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    5b3a:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    5b3c:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    5b40:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    5b44:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    5b46:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    5b4a:	1a1b      	subs	r3, r3, r0
    5b4c:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    5b4e:	6f90      	ldr	r0, [r2, #120]	; 0x78
	if (rx_len < 0) {
    5b50:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    5b54:	4408      	add	r0, r1
	if (rx_len > 0) {
    5b56:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    5b58:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    5b5a:	dd02      	ble.n	5b62 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    5b5c:	4620      	mov	r0, r4
    5b5e:	f004 fe23 	bl	a7a8 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    5b62:	68f9      	ldr	r1, [r7, #12]
    5b64:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    5b68:	2b00      	cmp	r3, #0
    5b6a:	f040 80c6 	bne.w	5cfa <uarte_nrfx_isr_async+0x26a>
		data->async->is_in_irq = false;
    5b6e:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b72:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    5b76:	b38b      	cbz	r3, 5bdc <uarte_nrfx_isr_async+0x14c>
    5b78:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5b7c:	bb76      	cbnz	r6, 5bdc <uarte_nrfx_isr_async+0x14c>
	struct uart_event evt = {
    5b7e:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    5b80:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b82:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    5b86:	4631      	mov	r1, r6
    5b88:	a803      	add	r0, sp, #12
    5b8a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    5b8e:	f005 fb16 	bl	b1be <memset>
    5b92:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    5b94:	a903      	add	r1, sp, #12
    5b96:	4620      	mov	r0, r4
	struct uart_event evt = {
    5b98:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    5b9c:	f004 fdfd 	bl	a79a <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    5ba0:	68ff      	ldr	r7, [r7, #12]
    5ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5ba4:	1c5a      	adds	r2, r3, #1
    5ba6:	d019      	beq.n	5bdc <uarte_nrfx_isr_async+0x14c>
			      K_USEC(data->async->rx_timeout_slab),
    5ba8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    5bac:	498b      	ldr	r1, [pc, #556]	; (5ddc <uarte_nrfx_isr_async+0x34c>)
		data->async->rx_timeout_left = data->async->rx_timeout;
    5bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    5bb2:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    5bb6:	468e      	mov	lr, r1
    5bb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5bbc:	4631      	mov	r1, r6
    5bbe:	fbcc e100 	smlal	lr, r1, ip, r0
    5bc2:	4a87      	ldr	r2, [pc, #540]	; (5de0 <uarte_nrfx_isr_async+0x350>)
    5bc4:	2300      	movs	r3, #0
    5bc6:	4670      	mov	r0, lr
    5bc8:	f7fa feb8 	bl	93c <__aeabi_uldivmod>
    5bcc:	4602      	mov	r2, r0
    5bce:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5bd0:	e9cd 0100 	strd	r0, r1, [sp]
    5bd4:	f107 0088 	add.w	r0, r7, #136	; 0x88
    5bd8:	f003 fee4 	bl	99a4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bdc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    5be0:	b333      	cbz	r3, 5c30 <uarte_nrfx_isr_async+0x1a0>
    5be2:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5be6:	bb1e      	cbnz	r6, 5c30 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = dev->data;
    5be8:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bea:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    5bee:	68f9      	ldr	r1, [r7, #12]
    5bf0:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    5bf4:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    5bf8:	3160      	adds	r1, #96	; 0x60
    5bfa:	4620      	mov	r0, r4
    5bfc:	f004 fded 	bl	a7da <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    5c00:	68f9      	ldr	r1, [r7, #12]
    5c02:	4620      	mov	r0, r4
    5c04:	316c      	adds	r1, #108	; 0x6c
    5c06:	f004 fde8 	bl	a7da <rx_buf_release>
	if (data->async->rx_enabled) {
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    5c10:	2a00      	cmp	r2, #0
    5c12:	f000 809f 	beq.w	5d54 <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_enabled = false;
    5c16:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5c1e:	06d8      	lsls	r0, r3, #27
    5c20:	d503      	bpl.n	5c2a <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    5c22:	2102      	movs	r1, #2
    5c24:	4620      	mov	r0, r4
    5c26:	f004 feb5 	bl	a994 <async_uart_release>
	notify_rx_disable(dev);
    5c2a:	4620      	mov	r0, r4
    5c2c:	f004 fded 	bl	a80a <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c30:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    5c34:	b1db      	cbz	r3, 5c6e <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
    5c36:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    5c3a:	05d9      	lsls	r1, r3, #23
    5c3c:	d517      	bpl.n	5c6e <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
    5c3e:	6863      	ldr	r3, [r4, #4]
    5c40:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5c42:	f04f 0120 	mov.w	r1, #32
    5c46:	f3ef 8211 	mrs	r2, BASEPRI
    5c4a:	f381 8812 	msr	BASEPRI_MAX, r1
    5c4e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c52:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5c56:	b131      	cbz	r1, 5c66 <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c58:	2100      	movs	r1, #0
    5c5a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5c5e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c62:	2101      	movs	r1, #1
    5c64:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5c66:	f382 8811 	msr	BASEPRI, r2
    5c6a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c6e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    5c72:	2b00      	cmp	r3, #0
    5c74:	f43f af21 	beq.w	5aba <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    5c78:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    5c7c:	025a      	lsls	r2, r3, #9
    5c7e:	f57f af1c 	bpl.w	5aba <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    5c82:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    5c84:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c86:	e9d3 7300 	ldrd	r7, r3, [r3]
    5c8a:	06db      	lsls	r3, r3, #27
    5c8c:	d467      	bmi.n	5d5e <uarte_nrfx_isr_async+0x2ce>
	if (!data->async->tx_buf) {
    5c8e:	68eb      	ldr	r3, [r5, #12]
    5c90:	689b      	ldr	r3, [r3, #8]
    5c92:	2b00      	cmp	r3, #0
    5c94:	f43f af11 	beq.w	5aba <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    5c98:	f04f 0320 	mov.w	r3, #32
    5c9c:	f3ef 8211 	mrs	r2, BASEPRI
    5ca0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ca4:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    5ca8:	68eb      	ldr	r3, [r5, #12]
    5caa:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    5cae:	2900      	cmp	r1, #0
    5cb0:	bfac      	ite	ge
    5cb2:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    5cb6:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    5cba:	f382 8811 	msr	BASEPRI, r2
    5cbe:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    5cc2:	68e8      	ldr	r0, [r5, #12]
    5cc4:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d055      	beq.n	5d78 <uarte_nrfx_isr_async+0x2e8>
	__asm__ volatile(
    5ccc:	f04f 0320 	mov.w	r3, #32
    5cd0:	f3ef 8611 	mrs	r6, BASEPRI
    5cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    5cd8:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    5cdc:	4629      	mov	r1, r5
    5cde:	4620      	mov	r0, r4
    5ce0:	f004 fe8f 	bl	aa02 <start_tx_locked>
	__asm__ volatile(
    5ce4:	f386 8811 	msr	BASEPRI, r6
    5ce8:	f3bf 8f6f 	isb	sy
				return;
    5cec:	e6e5      	b.n	5aba <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5cee:	2601      	movs	r6, #1
    5cf0:	e703      	b.n	5afa <uarte_nrfx_isr_async+0x6a>
    5cf2:	2602      	movs	r6, #2
    5cf4:	e701      	b.n	5afa <uarte_nrfx_isr_async+0x6a>
    5cf6:	2604      	movs	r6, #4
    5cf8:	e6ff      	b.n	5afa <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    5cfa:	3160      	adds	r1, #96	; 0x60
    5cfc:	4620      	mov	r0, r4
    5cfe:	f004 fd6c 	bl	a7da <rx_buf_release>
	__asm__ volatile(
    5d02:	f04f 0320 	mov.w	r3, #32
    5d06:	f3ef 8111 	mrs	r1, BASEPRI
    5d0a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d0e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    5d12:	68fb      	ldr	r3, [r7, #12]
    5d14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5d16:	b1d2      	cbz	r2, 5d4e <uarte_nrfx_isr_async+0x2be>
		data->async->rx_buf = data->async->rx_next_buf;
    5d18:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    5d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5d1c:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    5d1e:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    5d20:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    5d24:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5d26:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    5d2a:	b90b      	cbnz	r3, 5d30 <uarte_nrfx_isr_async+0x2a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d2c:	2301      	movs	r3, #1
    5d2e:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    5d30:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    5d34:	f023 0320 	bic.w	r3, r3, #32
    5d38:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    5d3c:	f381 8811 	msr	BASEPRI, r1
    5d40:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	2200      	movs	r2, #0
    5d48:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    5d4c:	e711      	b.n	5b72 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d4e:	2301      	movs	r3, #1
    5d50:	6073      	str	r3, [r6, #4]
}
    5d52:	e7f3      	b.n	5d3c <uarte_nrfx_isr_async+0x2ac>
		(void)rx_flush(dev, NULL, 0);
    5d54:	6860      	ldr	r0, [r4, #4]
    5d56:	4611      	mov	r1, r2
    5d58:	f004 fdd3 	bl	a902 <rx_flush.isra.0>
    5d5c:	e75d      	b.n	5c1a <uarte_nrfx_isr_async+0x18a>
    p_reg->INTENCLR = mask;
    5d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d62:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    5d66:	2101      	movs	r1, #1
    5d68:	4620      	mov	r0, r4
    5d6a:	f004 fe13 	bl	a994 <async_uart_release>
		if (!data->async->tx_size) {
    5d6e:	68eb      	ldr	r3, [r5, #12]
    5d70:	68db      	ldr	r3, [r3, #12]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d18b      	bne.n	5c8e <uarte_nrfx_isr_async+0x1fe>
    5d76:	e6a0      	b.n	5aba <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    5d78:	6882      	ldr	r2, [r0, #8]
    5d7a:	6903      	ldr	r3, [r0, #16]
    5d7c:	429a      	cmp	r2, r3
    5d7e:	d00b      	beq.n	5d98 <uarte_nrfx_isr_async+0x308>
		if (amount == data->async->xfer_len) {
    5d80:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    5d82:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    5d84:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    5d86:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    5d88:	d125      	bne.n	5dd6 <uarte_nrfx_isr_async+0x346>
			data->async->tx_cache_offset += amount;
    5d8a:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    5d8c:	f004 fdee 	bl	a96c <setup_tx_cache.isra.0>
    5d90:	2800      	cmp	r0, #0
    5d92:	d19b      	bne.n	5ccc <uarte_nrfx_isr_async+0x23c>
			amount = data->async->tx_cache_offset;
    5d94:	68eb      	ldr	r3, [r5, #12]
    5d96:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    5d98:	68e8      	ldr	r0, [r5, #12]
    5d9a:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    5d9c:	f005 f907 	bl	afae <z_impl_k_timer_stop>
	struct uart_event evt = {
    5da0:	2214      	movs	r2, #20
    5da2:	2100      	movs	r1, #0
    5da4:	a803      	add	r0, sp, #12
    5da6:	f005 fa0a 	bl	b1be <memset>
		.data.tx.buf = data->async->tx_buf,
    5daa:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    5dac:	689a      	ldr	r2, [r3, #8]
    5dae:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    5db2:	68da      	ldr	r2, [r3, #12]
    5db4:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    5db6:	bf1c      	itt	ne
    5db8:	2201      	movne	r2, #1
    5dba:	f88d 200c 	strbne.w	r2, [sp, #12]
    5dbe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5dc2:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    5dc6:	2200      	movs	r2, #0
    5dc8:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    5dca:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    5dcc:	a903      	add	r1, sp, #12
    5dce:	4620      	mov	r0, r4
    5dd0:	f004 fce3 	bl	a79a <user_callback>
    5dd4:	e671      	b.n	5aba <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    5dd6:	461e      	mov	r6, r3
    5dd8:	e7de      	b.n	5d98 <uarte_nrfx_isr_async+0x308>
    5dda:	bf00      	nop
    5ddc:	000f423f 	.word	0x000f423f
    5de0:	000f4240 	.word	0x000f4240

00005de4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5de4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5de6:	2301      	movs	r3, #1
    5de8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5dea:	4a0e      	ldr	r2, [pc, #56]	; (5e24 <compare_int_lock+0x40>)
    5dec:	f3bf 8f5b 	dmb	ish
    5df0:	43dc      	mvns	r4, r3
    5df2:	e852 1f00 	ldrex	r1, [r2]
    5df6:	ea01 0504 	and.w	r5, r1, r4
    5dfa:	e842 5600 	strex	r6, r5, [r2]
    5dfe:	2e00      	cmp	r6, #0
    5e00:	d1f7      	bne.n	5df2 <compare_int_lock+0xe>
    5e02:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5e0a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5e0c:	4806      	ldr	r0, [pc, #24]	; (5e28 <compare_int_lock+0x44>)
    5e0e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5e12:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e16:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5e1a:	420b      	tst	r3, r1
}
    5e1c:	bf14      	ite	ne
    5e1e:	2001      	movne	r0, #1
    5e20:	2000      	moveq	r0, #0
    5e22:	bd70      	pop	{r4, r5, r6, pc}
    5e24:	20004e24 	.word	0x20004e24
    5e28:	40011000 	.word	0x40011000

00005e2c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e2c:	491b      	ldr	r1, [pc, #108]	; (5e9c <sys_clock_timeout_handler+0x70>)
{
    5e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e30:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5e32:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e36:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5e38:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5e3c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e40:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5e46:	d30f      	bcc.n	5e68 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5e48:	f003 fbec 	bl	9624 <sys_clock_announce>
    return p_reg->CC[ch];
    5e4c:	00a3      	lsls	r3, r4, #2
    5e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e52:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5e56:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5e5a:	4295      	cmp	r5, r2
    5e5c:	d11d      	bne.n	5e9a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    5e5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5e62:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    5e66:	e012      	b.n	5e8e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5e68:	4b0d      	ldr	r3, [pc, #52]	; (5ea0 <sys_clock_timeout_handler+0x74>)
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	0a1a      	lsrs	r2, r3, #8
    5e6e:	061b      	lsls	r3, r3, #24
    5e70:	195e      	adds	r6, r3, r5
    5e72:	4b0c      	ldr	r3, [pc, #48]	; (5ea4 <sys_clock_timeout_handler+0x78>)
    5e74:	f142 0700 	adc.w	r7, r2, #0
    5e78:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5e7c:	f003 fbd2 	bl	9624 <sys_clock_announce>
    return p_reg->CC[ch];
    5e80:	4a09      	ldr	r2, [pc, #36]	; (5ea8 <sys_clock_timeout_handler+0x7c>)
    5e82:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    5e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    5e8a:	429d      	cmp	r5, r3
    5e8c:	d105      	bne.n	5e9a <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5e8e:	4a06      	ldr	r2, [pc, #24]	; (5ea8 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e94:	40a3      	lsls	r3, r4
    5e96:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e9c:	20004668 	.word	0x20004668
    5ea0:	20004e28 	.word	0x20004e28
    5ea4:	20004670 	.word	0x20004670
    5ea8:	40011000 	.word	0x40011000

00005eac <compare_int_unlock>:
	if (key) {
    5eac:	b311      	cbz	r1, 5ef4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5eae:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5eb2:	2301      	movs	r3, #1
    5eb4:	4a10      	ldr	r2, [pc, #64]	; (5ef8 <compare_int_unlock+0x4c>)
    5eb6:	4083      	lsls	r3, r0
    5eb8:	e852 cf00 	ldrex	ip, [r2]
    5ebc:	ea4c 0c03 	orr.w	ip, ip, r3
    5ec0:	e842 c100 	strex	r1, ip, [r2]
    5ec4:	2900      	cmp	r1, #0
    5ec6:	d1f7      	bne.n	5eb8 <compare_int_unlock+0xc>
    5ec8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5ecc:	4a0b      	ldr	r2, [pc, #44]	; (5efc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5ed2:	4083      	lsls	r3, r0
    5ed4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ed8:	4b09      	ldr	r3, [pc, #36]	; (5f00 <compare_int_unlock+0x54>)
    5eda:	f3bf 8f5b 	dmb	ish
    5ede:	681b      	ldr	r3, [r3, #0]
    5ee0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5ee4:	40c3      	lsrs	r3, r0
    5ee6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5ee8:	bf42      	ittt	mi
    5eea:	4b06      	ldrmi	r3, [pc, #24]	; (5f04 <compare_int_unlock+0x58>)
    5eec:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5ef0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	20004e24 	.word	0x20004e24
    5efc:	40011000 	.word	0x40011000
    5f00:	20004e20 	.word	0x20004e20
    5f04:	e000e100 	.word	0xe000e100

00005f08 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5f08:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <z_nrf_rtc_timer_read+0x38>)
    5f0a:	6818      	ldr	r0, [r3, #0]
    5f0c:	0a01      	lsrs	r1, r0, #8
    5f0e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5f10:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5f14:	4b0b      	ldr	r3, [pc, #44]	; (5f44 <z_nrf_rtc_timer_read+0x3c>)
    5f16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5f1a:	1818      	adds	r0, r3, r0
    5f1c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5f24:	d20a      	bcs.n	5f3c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5f26:	4b08      	ldr	r3, [pc, #32]	; (5f48 <z_nrf_rtc_timer_read+0x40>)
    5f28:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f2c:	4290      	cmp	r0, r2
    5f2e:	eb71 0303 	sbcs.w	r3, r1, r3
    5f32:	d203      	bcs.n	5f3c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5f34:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5f38:	f141 0100 	adc.w	r1, r1, #0
}
    5f3c:	4770      	bx	lr
    5f3e:	bf00      	nop
    5f40:	20004e28 	.word	0x20004e28
    5f44:	40011000 	.word	0x40011000
    5f48:	20004670 	.word	0x20004670

00005f4c <compare_set>:
{
    5f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f50:	4614      	mov	r4, r2
    5f52:	461d      	mov	r5, r3
    5f54:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    5f56:	f7ff ff45 	bl	5de4 <compare_int_lock>
    5f5a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5f5c:	f7ff ffd4 	bl	5f08 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5f60:	42a0      	cmp	r0, r4
    5f62:	eb71 0305 	sbcs.w	r3, r1, r5
    5f66:	d27a      	bcs.n	605e <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    5f68:	4b46      	ldr	r3, [pc, #280]	; (6084 <compare_set+0x138>)
    5f6a:	1a20      	subs	r0, r4, r0
    5f6c:	eb65 0101 	sbc.w	r1, r5, r1
    5f70:	4298      	cmp	r0, r3
    5f72:	f171 0100 	sbcs.w	r1, r1, #0
    5f76:	f080 8081 	bcs.w	607c <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    5f7a:	4b43      	ldr	r3, [pc, #268]	; (6088 <compare_set+0x13c>)
    5f7c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5f80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5f84:	429d      	cmp	r5, r3
    5f86:	bf08      	it	eq
    5f88:	4294      	cmpeq	r4, r2
    5f8a:	d053      	beq.n	6034 <compare_set+0xe8>
    5f8c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    5f90:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5f94:	f107 0950 	add.w	r9, r7, #80	; 0x50
    5f98:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    5f9c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fa0:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    5fa4:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    5fa8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    5fb0:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5fb4:	4a35      	ldr	r2, [pc, #212]	; (608c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fb6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    5fba:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5fbc:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    5fbe:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5fc2:	eba0 000b 	sub.w	r0, r0, fp
    5fc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5fca:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5fce:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5fd0:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    5fd4:	d105      	bne.n	5fe2 <compare_set+0x96>
    5fd6:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    5fd8:	2013      	movs	r0, #19
    5fda:	f004 ffb6 	bl	af4a <z_impl_k_busy_wait>
    5fde:	4a2b      	ldr	r2, [pc, #172]	; (608c <compare_set+0x140>)
    5fe0:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5fe2:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    5fe6:	eba6 000c 	sub.w	r0, r6, ip
    5fea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5fee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ff2:	bf88      	it	hi
    5ff4:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5ff6:	2000      	movs	r0, #0
    5ff8:	f8c9 0000 	str.w	r0, [r9]
    5ffc:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    6000:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6004:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    6008:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    600c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    6010:	4583      	cmp	fp, r0
    6012:	d006      	beq.n	6022 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    6014:	1a30      	subs	r0, r6, r0
    6016:	3802      	subs	r0, #2
    6018:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    601c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6020:	d81b      	bhi.n	605a <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    6022:	eba6 0608 	sub.w	r6, r6, r8
    6026:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    602a:	1936      	adds	r6, r6, r4
    602c:	f145 0300 	adc.w	r3, r5, #0
    6030:	4634      	mov	r4, r6
    6032:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    6034:	4914      	ldr	r1, [pc, #80]	; (6088 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    6036:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    6038:	013b      	lsls	r3, r7, #4
    603a:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    603e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    6040:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6042:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    6044:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    6048:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    604a:	4638      	mov	r0, r7
    604c:	9900      	ldr	r1, [sp, #0]
    604e:	f7ff ff2d 	bl	5eac <compare_int_unlock>
}
    6052:	4620      	mov	r0, r4
    6054:	b003      	add	sp, #12
    6056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    605a:	4630      	mov	r0, r6
    605c:	e7af      	b.n	5fbe <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    605e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6060:	4a0b      	ldr	r2, [pc, #44]	; (6090 <compare_set+0x144>)
    6062:	f3bf 8f5b 	dmb	ish
    6066:	40bb      	lsls	r3, r7
    6068:	e852 0f00 	ldrex	r0, [r2]
    606c:	4318      	orrs	r0, r3
    606e:	e842 0100 	strex	r1, r0, [r2]
    6072:	2900      	cmp	r1, #0
    6074:	d1f8      	bne.n	6068 <compare_set+0x11c>
    6076:	f3bf 8f5b 	dmb	ish
    607a:	e7db      	b.n	6034 <compare_set+0xe8>
			return -EINVAL;
    607c:	f06f 0415 	mvn.w	r4, #21
    6080:	e7e3      	b.n	604a <compare_set+0xfe>
    6082:	bf00      	nop
    6084:	01000001 	.word	0x01000001
    6088:	20004658 	.word	0x20004658
    608c:	40011000 	.word	0x40011000
    6090:	20004e20 	.word	0x20004e20

00006094 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6094:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6096:	4b19      	ldr	r3, [pc, #100]	; (60fc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    6098:	4d19      	ldr	r5, [pc, #100]	; (6100 <sys_clock_driver_init+0x6c>)
    609a:	2400      	movs	r4, #0
    609c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    60a4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    60a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    60ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    60b0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    60b4:	4b13      	ldr	r3, [pc, #76]	; (6104 <sys_clock_driver_init+0x70>)
    60b6:	2602      	movs	r6, #2
    60b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    60bc:	2101      	movs	r1, #1
    60be:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    60c2:	2011      	movs	r0, #17
    60c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    60c8:	4622      	mov	r2, r4
    60ca:	f7fd ff1f 	bl	3f0c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    60ce:	2011      	movs	r0, #17
    60d0:	f7fd ff00 	bl	3ed4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    60d4:	4a0c      	ldr	r2, [pc, #48]	; (6108 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    60d6:	2301      	movs	r3, #1
    60d8:	60ab      	str	r3, [r5, #8]
    60da:	602b      	str	r3, [r5, #0]
    60dc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    60de:	4b0b      	ldr	r3, [pc, #44]	; (610c <sys_clock_driver_init+0x78>)
    60e0:	4a0b      	ldr	r2, [pc, #44]	; (6110 <sys_clock_driver_init+0x7c>)
    60e2:	9300      	str	r3, [sp, #0]
    60e4:	9401      	str	r4, [sp, #4]
    60e6:	2300      	movs	r3, #0
    60e8:	4620      	mov	r0, r4
    60ea:	f7ff ff2f 	bl	5f4c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    60ee:	4630      	mov	r0, r6
    60f0:	f7fe ff24 	bl	4f3c <z_nrf_clock_control_lf_on>

	return 0;
}
    60f4:	4620      	mov	r0, r4
    60f6:	b002      	add	sp, #8
    60f8:	bd70      	pop	{r4, r5, r6, pc}
    60fa:	bf00      	nop
    60fc:	20004658 	.word	0x20004658
    6100:	40011000 	.word	0x40011000
    6104:	e000e100 	.word	0xe000e100
    6108:	20004e24 	.word	0x20004e24
    610c:	00005e2d 	.word	0x00005e2d
    6110:	007fffff 	.word	0x007fffff

00006114 <rtc_nrf_isr>:
{
    6114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6118:	4c33      	ldr	r4, [pc, #204]	; (61e8 <rtc_nrf_isr+0xd4>)
    611a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    611e:	079a      	lsls	r2, r3, #30
    6120:	d50b      	bpl.n	613a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6122:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6126:	b143      	cbz	r3, 613a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    6128:	4a30      	ldr	r2, [pc, #192]	; (61ec <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    612a:	2300      	movs	r3, #0
    612c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6130:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6134:	6813      	ldr	r3, [r2, #0]
    6136:	3301      	adds	r3, #1
    6138:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    613a:	f04f 0320 	mov.w	r3, #32
    613e:	f3ef 8211 	mrs	r2, BASEPRI
    6142:	f383 8812 	msr	BASEPRI_MAX, r3
    6146:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    614a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    614e:	03db      	lsls	r3, r3, #15
    6150:	d529      	bpl.n	61a6 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6152:	f3bf 8f5b 	dmb	ish
    6156:	4b26      	ldr	r3, [pc, #152]	; (61f0 <rtc_nrf_isr+0xdc>)
    6158:	e853 1f00 	ldrex	r1, [r3]
    615c:	f021 0001 	bic.w	r0, r1, #1
    6160:	e843 0500 	strex	r5, r0, [r3]
    6164:	2d00      	cmp	r5, #0
    6166:	d1f7      	bne.n	6158 <rtc_nrf_isr+0x44>
    6168:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    616c:	b911      	cbnz	r1, 6174 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    616e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6172:	b1c3      	cbz	r3, 61a6 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6174:	2500      	movs	r5, #0
    6176:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    617a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    617e:	f382 8811 	msr	BASEPRI, r2
    6182:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    6186:	f7ff febf 	bl	5f08 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    618a:	f04f 0320 	mov.w	r3, #32
    618e:	f3ef 8211 	mrs	r2, BASEPRI
    6192:	f383 8812 	msr	BASEPRI_MAX, r3
    6196:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    619a:	4b16      	ldr	r3, [pc, #88]	; (61f4 <rtc_nrf_isr+0xe0>)
    619c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    61a0:	42b0      	cmp	r0, r6
    61a2:	41b9      	sbcs	r1, r7
    61a4:	d206      	bcs.n	61b4 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    61a6:	f382 8811 	msr	BASEPRI, r2
    61aa:	f3bf 8f6f 	isb	sy
}
    61ae:	b003      	add	sp, #12
    61b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    61b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    61b8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    61bc:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    61c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    61c4:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    61c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    61ca:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    61ce:	f382 8811 	msr	BASEPRI, r2
    61d2:	f3bf 8f6f 	isb	sy
		if (handler) {
    61d6:	2900      	cmp	r1, #0
    61d8:	d0e9      	beq.n	61ae <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    61da:	9000      	str	r0, [sp, #0]
    61dc:	4632      	mov	r2, r6
    61de:	463b      	mov	r3, r7
    61e0:	4628      	mov	r0, r5
    61e2:	4788      	blx	r1
}
    61e4:	e7e3      	b.n	61ae <rtc_nrf_isr+0x9a>
    61e6:	bf00      	nop
    61e8:	40011000 	.word	0x40011000
    61ec:	20004e28 	.word	0x20004e28
    61f0:	20004e20 	.word	0x20004e20
    61f4:	20004658 	.word	0x20004658

000061f8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61f8:	1c43      	adds	r3, r0, #1
{
    61fa:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61fc:	d021      	beq.n	6242 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    61fe:	2801      	cmp	r0, #1
    6200:	dd21      	ble.n	6246 <sys_clock_set_timeout+0x4e>
    6202:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6206:	da20      	bge.n	624a <sys_clock_set_timeout+0x52>
    6208:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    620a:	f7ff fe7d 	bl	5f08 <z_nrf_rtc_timer_read>
    620e:	4b10      	ldr	r3, [pc, #64]	; (6250 <sys_clock_set_timeout+0x58>)
    6210:	e9d3 1300 	ldrd	r1, r3, [r3]
    6214:	1a42      	subs	r2, r0, r1
		ticks = 0;
    6216:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    621a:	480e      	ldr	r0, [pc, #56]	; (6254 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    621c:	bf28      	it	cs
    621e:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6220:	3201      	adds	r2, #1
    6222:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    6224:	4282      	cmp	r2, r0
    6226:	bf28      	it	cs
    6228:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    622a:	1852      	adds	r2, r2, r1
    622c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6230:	4909      	ldr	r1, [pc, #36]	; (6258 <sys_clock_set_timeout+0x60>)
    6232:	9001      	str	r0, [sp, #4]
    6234:	9100      	str	r1, [sp, #0]
    6236:	f143 0300 	adc.w	r3, r3, #0
    623a:	f7ff fe87 	bl	5f4c <compare_set>
}
    623e:	b002      	add	sp, #8
    6240:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6242:	4804      	ldr	r0, [pc, #16]	; (6254 <sys_clock_set_timeout+0x5c>)
    6244:	e7e0      	b.n	6208 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6246:	2400      	movs	r4, #0
    6248:	e7df      	b.n	620a <sys_clock_set_timeout+0x12>
    624a:	4c02      	ldr	r4, [pc, #8]	; (6254 <sys_clock_set_timeout+0x5c>)
    624c:	e7dd      	b.n	620a <sys_clock_set_timeout+0x12>
    624e:	bf00      	nop
    6250:	20004668 	.word	0x20004668
    6254:	007fffff 	.word	0x007fffff
    6258:	00005e2d 	.word	0x00005e2d

0000625c <sys_clock_elapsed>:
{
    625c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    625e:	f7ff fe53 	bl	5f08 <z_nrf_rtc_timer_read>
    6262:	4b02      	ldr	r3, [pc, #8]	; (626c <sys_clock_elapsed+0x10>)
    6264:	681b      	ldr	r3, [r3, #0]
}
    6266:	1ac0      	subs	r0, r0, r3
    6268:	bd08      	pop	{r3, pc}
    626a:	bf00      	nop
    626c:	20004668 	.word	0x20004668

00006270 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6270:	6803      	ldr	r3, [r0, #0]
    switch (port)
    6272:	095a      	lsrs	r2, r3, #5
{
    6274:	b510      	push	{r4, lr}
    6276:	4604      	mov	r4, r0
    switch (port)
    6278:	d01d      	beq.n	62b6 <nrf_gpio_pin_port_decode+0x46>
    627a:	2a01      	cmp	r2, #1
    627c:	d106      	bne.n	628c <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    627e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6282:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6286:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6288:	07d3      	lsls	r3, r2, #31
    628a:	d40b      	bmi.n	62a4 <nrf_gpio_pin_port_decode+0x34>
    628c:	4914      	ldr	r1, [pc, #80]	; (62e0 <nrf_gpio_pin_port_decode+0x70>)
    628e:	4815      	ldr	r0, [pc, #84]	; (62e4 <nrf_gpio_pin_port_decode+0x74>)
    6290:	4a15      	ldr	r2, [pc, #84]	; (62e8 <nrf_gpio_pin_port_decode+0x78>)
    6292:	f240 2329 	movw	r3, #553	; 0x229
    6296:	f004 f8fc 	bl	a492 <assert_print>
    629a:	4813      	ldr	r0, [pc, #76]	; (62e8 <nrf_gpio_pin_port_decode+0x78>)
    629c:	f240 2129 	movw	r1, #553	; 0x229
    62a0:	f004 f8f0 	bl	a484 <assert_post_action>
    uint32_t pin_number = *p_pin;
    62a4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    62a6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62aa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    62ac:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62ae:	d105      	bne.n	62bc <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    62b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    62b4:	bd10      	pop	{r4, pc}
    switch (port)
    62b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    62ba:	e7e2      	b.n	6282 <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62bc:	2b01      	cmp	r3, #1
    62be:	d00c      	beq.n	62da <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    62c0:	4a09      	ldr	r2, [pc, #36]	; (62e8 <nrf_gpio_pin_port_decode+0x78>)
    62c2:	490a      	ldr	r1, [pc, #40]	; (62ec <nrf_gpio_pin_port_decode+0x7c>)
    62c4:	4807      	ldr	r0, [pc, #28]	; (62e4 <nrf_gpio_pin_port_decode+0x74>)
    62c6:	f240 232e 	movw	r3, #558	; 0x22e
    62ca:	f004 f8e2 	bl	a492 <assert_print>
    62ce:	4806      	ldr	r0, [pc, #24]	; (62e8 <nrf_gpio_pin_port_decode+0x78>)
    62d0:	f240 212e 	movw	r1, #558	; 0x22e
    62d4:	f004 f8d6 	bl	a484 <assert_post_action>
    62d8:	e7ea      	b.n	62b0 <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    62da:	4805      	ldr	r0, [pc, #20]	; (62f0 <nrf_gpio_pin_port_decode+0x80>)
    62dc:	e7ea      	b.n	62b4 <nrf_gpio_pin_port_decode+0x44>
    62de:	bf00      	nop
    62e0:	0000ca1a 	.word	0x0000ca1a
    62e4:	0000b9c2 	.word	0x0000b9c2
    62e8:	0000c9e7 	.word	0x0000c9e7
    62ec:	0000d2b1 	.word	0x0000d2b1
    62f0:	50000300 	.word	0x50000300

000062f4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    62f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    62f6:	ab0b      	add	r3, sp, #44	; 0x2c
    62f8:	9305      	str	r3, [sp, #20]
    62fa:	9303      	str	r3, [sp, #12]
    62fc:	4b05      	ldr	r3, [pc, #20]	; (6314 <z_log_msg2_runtime_create.constprop.0+0x20>)
    62fe:	9302      	str	r3, [sp, #8]
    6300:	2300      	movs	r3, #0
    6302:	e9cd 3300 	strd	r3, r3, [sp]
    6306:	2201      	movs	r2, #1
    6308:	4618      	mov	r0, r3
    630a:	f7fd fa07 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    630e:	b007      	add	sp, #28
    6310:	f85d fb04 	ldr.w	pc, [sp], #4
    6314:	0000cada 	.word	0x0000cada

00006318 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    631a:	f7fc ff9b 	bl	3254 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    631e:	2400      	movs	r4, #0
    6320:	4b06      	ldr	r3, [pc, #24]	; (633c <k_sys_fatal_error_handler+0x24>)
    6322:	9302      	str	r3, [sp, #8]
    6324:	4620      	mov	r0, r4
    6326:	e9cd 4400 	strd	r4, r4, [sp]
    632a:	4905      	ldr	r1, [pc, #20]	; (6340 <k_sys_fatal_error_handler+0x28>)
    632c:	4623      	mov	r3, r4
    632e:	2201      	movs	r2, #1
    6330:	f7ff ffe0 	bl	62f4 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    6334:	4620      	mov	r0, r4
    6336:	f7fe fc79 	bl	4c2c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    633a:	bf00      	nop
    633c:	0000cada 	.word	0x0000cada
    6340:	0000b47c 	.word	0x0000b47c

00006344 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6344:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6348:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    634c:	2a08      	cmp	r2, #8
    634e:	d106      	bne.n	635e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6350:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6354:	2b05      	cmp	r3, #5
    6356:	d802      	bhi.n	635e <nrf52_errata_103+0x1a>
    6358:	4a02      	ldr	r2, [pc, #8]	; (6364 <nrf52_errata_103+0x20>)
    635a:	5cd0      	ldrb	r0, [r2, r3]
    635c:	4770      	bx	lr
                        return false;
    635e:	2000      	movs	r0, #0
}
    6360:	4770      	bx	lr
    6362:	bf00      	nop
    6364:	0000cafd 	.word	0x0000cafd

00006368 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6368:	4a02      	ldr	r2, [pc, #8]	; (6374 <nvmc_wait+0xc>)
    636a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    636e:	2b00      	cmp	r3, #0
    6370:	d0fb      	beq.n	636a <nvmc_wait+0x2>
}
    6372:	4770      	bx	lr
    6374:	4001e000 	.word	0x4001e000

00006378 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    637c:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    637e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6382:	2a08      	cmp	r2, #8
    6384:	d14e      	bne.n	6424 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    6386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    638a:	2100      	movs	r1, #0
    638c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6390:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6394:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6398:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    639c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    63a0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    63a4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    63a8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    63ac:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    63b0:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    63b4:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    63b8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    63bc:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    63c0:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    63c4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    63c8:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    63cc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    63d0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    63d4:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    63d8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    63dc:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    63e0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    63e4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    63e8:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    63ec:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    63f0:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    63f4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    63f8:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    63fc:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    6400:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6404:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    6408:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    640c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    6410:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6414:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    6418:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    641c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    6420:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6424:	f7ff ff8e 	bl	6344 <nrf52_errata_103>
    6428:	b118      	cbz	r0, 6432 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    642a:	4b3b      	ldr	r3, [pc, #236]	; (6518 <SystemInit+0x1a0>)
    642c:	4a3b      	ldr	r2, [pc, #236]	; (651c <SystemInit+0x1a4>)
    642e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6432:	f7ff ff87 	bl	6344 <nrf52_errata_103>
    6436:	b118      	cbz	r0, 6440 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6438:	4b39      	ldr	r3, [pc, #228]	; (6520 <SystemInit+0x1a8>)
    643a:	22fb      	movs	r2, #251	; 0xfb
    643c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6440:	f7ff ff80 	bl	6344 <nrf52_errata_103>
    6444:	b170      	cbz	r0, 6464 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    6446:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    644a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    644e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    6452:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    6456:	f022 020f 	bic.w	r2, r2, #15
    645a:	f003 030f 	and.w	r3, r3, #15
    645e:	4313      	orrs	r3, r2
    6460:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6464:	f7ff ff6e 	bl	6344 <nrf52_errata_103>
    6468:	b120      	cbz	r0, 6474 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    646a:	4b2e      	ldr	r3, [pc, #184]	; (6524 <SystemInit+0x1ac>)
    646c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6470:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6478:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    647c:	2b08      	cmp	r3, #8
    647e:	d11a      	bne.n	64b6 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6484:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6488:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    648a:	bf44      	itt	mi
    648c:	f06f 0201 	mvnmi.w	r2, #1
    6490:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6498:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    649c:	2b05      	cmp	r3, #5
    649e:	d802      	bhi.n	64a6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    64a0:	4a21      	ldr	r2, [pc, #132]	; (6528 <SystemInit+0x1b0>)
    64a2:	5cd3      	ldrb	r3, [r2, r3]
    64a4:	b13b      	cbz	r3, 64b6 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    64a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    64aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    64ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64b2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    64b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    64ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    64be:	2a00      	cmp	r2, #0
    64c0:	db03      	blt.n	64ca <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    64c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    64c6:	2b00      	cmp	r3, #0
    64c8:	da22      	bge.n	6510 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    64ca:	4918      	ldr	r1, [pc, #96]	; (652c <SystemInit+0x1b4>)
    64cc:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    64ce:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    64d2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    64d6:	2412      	movs	r4, #18
    nvmc_wait();
    64d8:	f7ff ff46 	bl	6368 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    64dc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    64e0:	f7ff ff42 	bl	6368 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    64e4:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    64e8:	f7ff ff3e 	bl	6368 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    64ec:	2300      	movs	r3, #0
    64ee:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    64f2:	f7ff ff39 	bl	6368 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    64f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    64fa:	490d      	ldr	r1, [pc, #52]	; (6530 <SystemInit+0x1b8>)
    64fc:	4b0d      	ldr	r3, [pc, #52]	; (6534 <SystemInit+0x1bc>)
    64fe:	68ca      	ldr	r2, [r1, #12]
    6500:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6504:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6506:	60cb      	str	r3, [r1, #12]
    6508:	f3bf 8f4f 	dsb	sy
    __NOP();
    650c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    650e:	e7fd      	b.n	650c <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6510:	4b09      	ldr	r3, [pc, #36]	; (6538 <SystemInit+0x1c0>)
    6512:	4a0a      	ldr	r2, [pc, #40]	; (653c <SystemInit+0x1c4>)
    6514:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    6516:	bd10      	pop	{r4, pc}
    6518:	40005000 	.word	0x40005000
    651c:	00038148 	.word	0x00038148
    6520:	4000f000 	.word	0x4000f000
    6524:	40029000 	.word	0x40029000
    6528:	0000caf7 	.word	0x0000caf7
    652c:	4001e000 	.word	0x4001e000
    6530:	e000ed00 	.word	0xe000ed00
    6534:	05fa0004 	.word	0x05fa0004
    6538:	20000060 	.word	0x20000060
    653c:	03d09000 	.word	0x03d09000

00006540 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6540:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6542:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6544:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6546:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    654a:	fab2 f382 	clz	r3, r2
    654e:	f1c3 031f 	rsb	r3, r3, #31
    6552:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6554:	fa05 f403 	lsl.w	r4, r5, r3
    6558:	ea22 0404 	bic.w	r4, r2, r4
    655c:	e850 6f00 	ldrex	r6, [r0]
    6560:	4296      	cmp	r6, r2
    6562:	d104      	bne.n	656e <nrfx_flag32_alloc+0x2e>
    6564:	e840 4c00 	strex	ip, r4, [r0]
    6568:	f1bc 0f00 	cmp.w	ip, #0
    656c:	d1f6      	bne.n	655c <nrfx_flag32_alloc+0x1c>
    656e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6572:	d1e7      	bne.n	6544 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    6574:	4801      	ldr	r0, [pc, #4]	; (657c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    6576:	700b      	strb	r3, [r1, #0]
}
    6578:	bd70      	pop	{r4, r5, r6, pc}
    657a:	bf00      	nop
    657c:	0bad0000 	.word	0x0bad0000

00006580 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6580:	6803      	ldr	r3, [r0, #0]
    6582:	40cb      	lsrs	r3, r1
    6584:	07db      	lsls	r3, r3, #31
{
    6586:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6588:	d414      	bmi.n	65b4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    658a:	2301      	movs	r3, #1
    658c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    658e:	6802      	ldr	r2, [r0, #0]
    6590:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6594:	ea43 0102 	orr.w	r1, r3, r2
    6598:	e850 4f00 	ldrex	r4, [r0]
    659c:	4294      	cmp	r4, r2
    659e:	d104      	bne.n	65aa <nrfx_flag32_free+0x2a>
    65a0:	e840 1c00 	strex	ip, r1, [r0]
    65a4:	f1bc 0f00 	cmp.w	ip, #0
    65a8:	d1f6      	bne.n	6598 <nrfx_flag32_free+0x18>
    65aa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    65ae:	d1ee      	bne.n	658e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    65b0:	4801      	ldr	r0, [pc, #4]	; (65b8 <nrfx_flag32_free+0x38>)
}
    65b2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    65b4:	4801      	ldr	r0, [pc, #4]	; (65bc <nrfx_flag32_free+0x3c>)
    65b6:	e7fc      	b.n	65b2 <nrfx_flag32_free+0x32>
    65b8:	0bad0000 	.word	0x0bad0000
    65bc:	0bad0004 	.word	0x0bad0004

000065c0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    65c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    65c2:	4604      	mov	r4, r0
    65c4:	b170      	cbz	r0, 65e4 <clock_stop+0x24>
    65c6:	2801      	cmp	r0, #1
    65c8:	d02d      	beq.n	6626 <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    65ca:	4939      	ldr	r1, [pc, #228]	; (66b0 <clock_stop+0xf0>)
    65cc:	4839      	ldr	r0, [pc, #228]	; (66b4 <clock_stop+0xf4>)
    65ce:	4a3a      	ldr	r2, [pc, #232]	; (66b8 <clock_stop+0xf8>)
    65d0:	23d8      	movs	r3, #216	; 0xd8
    65d2:	f003 ff5e 	bl	a492 <assert_print>
    65d6:	4838      	ldr	r0, [pc, #224]	; (66b8 <clock_stop+0xf8>)
    65d8:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    65da:	b003      	add	sp, #12
    65dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    65e0:	f003 bf50 	b.w	a484 <assert_post_action>
    p_reg->INTENCLR = mask;
    65e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65e8:	2202      	movs	r2, #2
    65ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65ee:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    65f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65f6:	2201      	movs	r2, #1
    65f8:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    65fa:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    65fc:	2301      	movs	r3, #1
    65fe:	f88d 3007 	strb.w	r3, [sp, #7]
    6602:	f242 7510 	movw	r5, #10000	; 0x2710
    6606:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    660a:	b1cc      	cbz	r4, 6640 <clock_stop+0x80>
    660c:	2c01      	cmp	r4, #1
    660e:	d037      	beq.n	6680 <clock_stop+0xc0>
            NRFX_ASSERT(0);
    6610:	4927      	ldr	r1, [pc, #156]	; (66b0 <clock_stop+0xf0>)
    6612:	4828      	ldr	r0, [pc, #160]	; (66b4 <clock_stop+0xf4>)
    6614:	4a29      	ldr	r2, [pc, #164]	; (66bc <clock_stop+0xfc>)
    6616:	f44f 734f 	mov.w	r3, #828	; 0x33c
    661a:	f003 ff3a 	bl	a492 <assert_print>
    661e:	4827      	ldr	r0, [pc, #156]	; (66bc <clock_stop+0xfc>)
    6620:	f44f 714f 	mov.w	r1, #828	; 0x33c
    6624:	e7d9      	b.n	65da <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    6626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    662a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    662c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6630:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6634:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6638:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    663a:	f10d 0707 	add.w	r7, sp, #7
    663e:	e7dd      	b.n	65fc <clock_stop+0x3c>
            if (p_clk_src != NULL)
    6640:	b19f      	cbz	r7, 666a <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6642:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6646:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    664a:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    664c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6650:	03d8      	lsls	r0, r3, #15
    6652:	d513      	bpl.n	667c <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6654:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6658:	2801      	cmp	r0, #1
    665a:	d103      	bne.n	6664 <clock_stop+0xa4>
    665c:	f004 fb75 	bl	ad4a <nrfx_busy_wait>
    6660:	3d01      	subs	r5, #1
    6662:	d1d2      	bne.n	660a <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6664:	2c01      	cmp	r4, #1
    6666:	d015      	beq.n	6694 <clock_stop+0xd4>
    6668:	e008      	b.n	667c <clock_stop+0xbc>
    666a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    666e:	03d9      	lsls	r1, r3, #15
    6670:	d504      	bpl.n	667c <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6672:	2001      	movs	r0, #1
    6674:	f004 fb69 	bl	ad4a <nrfx_busy_wait>
    6678:	3d01      	subs	r5, #1
    667a:	d1f6      	bne.n	666a <clock_stop+0xaa>
}
    667c:	b003      	add	sp, #12
    667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    6680:	b167      	cbz	r7, 669c <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6682:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6686:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    668a:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    668c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6690:	03da      	lsls	r2, r3, #15
    6692:	d4df      	bmi.n	6654 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    6694:	4b0a      	ldr	r3, [pc, #40]	; (66c0 <clock_stop+0x100>)
    6696:	2200      	movs	r2, #0
    6698:	715a      	strb	r2, [r3, #5]
    669a:	e7ef      	b.n	667c <clock_stop+0xbc>
    669c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    66a0:	03db      	lsls	r3, r3, #15
    66a2:	d5f7      	bpl.n	6694 <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    66a4:	2001      	movs	r0, #1
    66a6:	f004 fb50 	bl	ad4a <nrfx_busy_wait>
    66aa:	3d01      	subs	r5, #1
    66ac:	d1f6      	bne.n	669c <clock_stop+0xdc>
    66ae:	e7f1      	b.n	6694 <clock_stop+0xd4>
    66b0:	0000d2b1 	.word	0x0000d2b1
    66b4:	0000b9c2 	.word	0x0000b9c2
    66b8:	0000cb03 	.word	0x0000cb03
    66bc:	0000cb40 	.word	0x0000cb40
    66c0:	20004e2c 	.word	0x20004e2c

000066c4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    66c4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    66c6:	4604      	mov	r4, r0
    66c8:	b958      	cbnz	r0, 66e2 <nrfx_clock_init+0x1e>
    66ca:	490b      	ldr	r1, [pc, #44]	; (66f8 <nrfx_clock_init+0x34>)
    66cc:	480b      	ldr	r0, [pc, #44]	; (66fc <nrfx_clock_init+0x38>)
    66ce:	4a0c      	ldr	r2, [pc, #48]	; (6700 <nrfx_clock_init+0x3c>)
    66d0:	f240 1315 	movw	r3, #277	; 0x115
    66d4:	f003 fedd 	bl	a492 <assert_print>
    66d8:	4809      	ldr	r0, [pc, #36]	; (6700 <nrfx_clock_init+0x3c>)
    66da:	f240 1115 	movw	r1, #277	; 0x115
    66de:	f003 fed1 	bl	a484 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    66e2:	4b08      	ldr	r3, [pc, #32]	; (6704 <nrfx_clock_init+0x40>)
    66e4:	791a      	ldrb	r2, [r3, #4]
    66e6:	b922      	cbnz	r2, 66f2 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    66e8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    66ea:	4807      	ldr	r0, [pc, #28]	; (6708 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    66ec:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    66ee:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    66f0:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    66f2:	4806      	ldr	r0, [pc, #24]	; (670c <nrfx_clock_init+0x48>)
    return err_code;
    66f4:	e7fc      	b.n	66f0 <nrfx_clock_init+0x2c>
    66f6:	bf00      	nop
    66f8:	0000cb74 	.word	0x0000cb74
    66fc:	0000b9c2 	.word	0x0000b9c2
    6700:	0000cb03 	.word	0x0000cb03
    6704:	20004e2c 	.word	0x20004e2c
    6708:	0bad0000 	.word	0x0bad0000
    670c:	0bad000c 	.word	0x0bad000c

00006710 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6710:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6712:	4b0d      	ldr	r3, [pc, #52]	; (6748 <nrfx_clock_enable+0x38>)
    6714:	791b      	ldrb	r3, [r3, #4]
    6716:	b95b      	cbnz	r3, 6730 <nrfx_clock_enable+0x20>
    6718:	490c      	ldr	r1, [pc, #48]	; (674c <nrfx_clock_enable+0x3c>)
    671a:	480d      	ldr	r0, [pc, #52]	; (6750 <nrfx_clock_enable+0x40>)
    671c:	4a0d      	ldr	r2, [pc, #52]	; (6754 <nrfx_clock_enable+0x44>)
    671e:	f44f 7397 	mov.w	r3, #302	; 0x12e
    6722:	f003 feb6 	bl	a492 <assert_print>
    6726:	480b      	ldr	r0, [pc, #44]	; (6754 <nrfx_clock_enable+0x44>)
    6728:	f44f 7197 	mov.w	r1, #302	; 0x12e
    672c:	f003 feaa 	bl	a484 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6730:	2000      	movs	r0, #0
    6732:	f7fd fbdd 	bl	3ef0 <arch_irq_is_enabled>
    6736:	b908      	cbnz	r0, 673c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6738:	f7fd fbcc 	bl	3ed4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    673c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6740:	2200      	movs	r2, #0
    6742:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6746:	bd08      	pop	{r3, pc}
    6748:	20004e2c 	.word	0x20004e2c
    674c:	0000cb82 	.word	0x0000cb82
    6750:	0000b9c2 	.word	0x0000b9c2
    6754:	0000cb03 	.word	0x0000cb03

00006758 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6758:	4b2c      	ldr	r3, [pc, #176]	; (680c <nrfx_clock_start+0xb4>)
    675a:	791b      	ldrb	r3, [r3, #4]
{
    675c:	b510      	push	{r4, lr}
    675e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6760:	b95b      	cbnz	r3, 677a <nrfx_clock_start+0x22>
    6762:	492b      	ldr	r1, [pc, #172]	; (6810 <nrfx_clock_start+0xb8>)
    6764:	482b      	ldr	r0, [pc, #172]	; (6814 <nrfx_clock_start+0xbc>)
    6766:	4a2c      	ldr	r2, [pc, #176]	; (6818 <nrfx_clock_start+0xc0>)
    6768:	f44f 73b4 	mov.w	r3, #360	; 0x168
    676c:	f003 fe91 	bl	a492 <assert_print>
    6770:	4829      	ldr	r0, [pc, #164]	; (6818 <nrfx_clock_start+0xc0>)
    6772:	f44f 71b4 	mov.w	r1, #360	; 0x168
    6776:	f003 fe85 	bl	a484 <assert_post_action>
    switch (domain)
    677a:	b17c      	cbz	r4, 679c <nrfx_clock_start+0x44>
    677c:	2c01      	cmp	r4, #1
    677e:	d03a      	beq.n	67f6 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6780:	4926      	ldr	r1, [pc, #152]	; (681c <nrfx_clock_start+0xc4>)
    6782:	4824      	ldr	r0, [pc, #144]	; (6814 <nrfx_clock_start+0xbc>)
    6784:	4a24      	ldr	r2, [pc, #144]	; (6818 <nrfx_clock_start+0xc0>)
    6786:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    678a:	f003 fe82 	bl	a492 <assert_print>
            break;
    }
}
    678e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    6792:	4821      	ldr	r0, [pc, #132]	; (6818 <nrfx_clock_start+0xc0>)
    6794:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    6798:	f003 be74 	b.w	a484 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    679c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    67a0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    67a4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    67a8:	03c8      	lsls	r0, r1, #15
    67aa:	d512      	bpl.n	67d2 <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    67ac:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    67b0:	2b01      	cmp	r3, #1
    67b2:	d11a      	bne.n	67ea <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    67b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    67b8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67bc:	2300      	movs	r3, #0
    67be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    67c2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    67c6:	2302      	movs	r3, #2
    67c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67cc:	2301      	movs	r3, #1
    67ce:	6093      	str	r3, [r2, #8]
}
    67d0:	e00a      	b.n	67e8 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    67d2:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    67d6:	07d9      	lsls	r1, r3, #31
    67d8:	d50b      	bpl.n	67f2 <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    67da:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    67de:	079b      	lsls	r3, r3, #30
    67e0:	d404      	bmi.n	67ec <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    67e2:	2302      	movs	r3, #2
    67e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    67e8:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    67ea:	b113      	cbz	r3, 67f2 <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    67ec:	2000      	movs	r0, #0
    67ee:	f7ff fee7 	bl	65c0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    67f2:	2300      	movs	r3, #0
    67f4:	e7de      	b.n	67b4 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67fa:	2200      	movs	r2, #0
    67fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6800:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6804:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6808:	601c      	str	r4, [r3, #0]
}
    680a:	e7ed      	b.n	67e8 <nrfx_clock_start+0x90>
    680c:	20004e2c 	.word	0x20004e2c
    6810:	0000cb82 	.word	0x0000cb82
    6814:	0000b9c2 	.word	0x0000b9c2
    6818:	0000cb03 	.word	0x0000cb03
    681c:	0000d2b1 	.word	0x0000d2b1

00006820 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6820:	4b0a      	ldr	r3, [pc, #40]	; (684c <nrfx_clock_stop+0x2c>)
    6822:	791b      	ldrb	r3, [r3, #4]
{
    6824:	b510      	push	{r4, lr}
    6826:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6828:	b95b      	cbnz	r3, 6842 <nrfx_clock_stop+0x22>
    682a:	4909      	ldr	r1, [pc, #36]	; (6850 <nrfx_clock_stop+0x30>)
    682c:	4809      	ldr	r0, [pc, #36]	; (6854 <nrfx_clock_stop+0x34>)
    682e:	4a0a      	ldr	r2, [pc, #40]	; (6858 <nrfx_clock_stop+0x38>)
    6830:	f240 13ad 	movw	r3, #429	; 0x1ad
    6834:	f003 fe2d 	bl	a492 <assert_print>
    6838:	4807      	ldr	r0, [pc, #28]	; (6858 <nrfx_clock_stop+0x38>)
    683a:	f240 11ad 	movw	r1, #429	; 0x1ad
    683e:	f003 fe21 	bl	a484 <assert_post_action>
    clock_stop(domain);
    6842:	4620      	mov	r0, r4
}
    6844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    6848:	f7ff beba 	b.w	65c0 <clock_stop>
    684c:	20004e2c 	.word	0x20004e2c
    6850:	0000cb82 	.word	0x0000cb82
    6854:	0000b9c2 	.word	0x0000b9c2
    6858:	0000cb03 	.word	0x0000cb03

0000685c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    685c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6860:	b510      	push	{r4, lr}
    6862:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6866:	b16a      	cbz	r2, 6884 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6868:	2200      	movs	r2, #0
    686a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    686e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6872:	2201      	movs	r2, #1
    6874:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6878:	4b11      	ldr	r3, [pc, #68]	; (68c0 <nrfx_power_clock_irq_handler+0x64>)
    687a:	7958      	ldrb	r0, [r3, #5]
    687c:	b910      	cbnz	r0, 6884 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    687e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6880:	681b      	ldr	r3, [r3, #0]
    6882:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6888:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    688c:	b172      	cbz	r2, 68ac <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    688e:	2200      	movs	r2, #0
    6890:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6894:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6898:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    689c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    68a0:	0792      	lsls	r2, r2, #30
    68a2:	d104      	bne.n	68ae <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    68a4:	2201      	movs	r2, #1
    68a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68aa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    68ac:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    68ae:	2202      	movs	r2, #2
    68b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    68b4:	4b02      	ldr	r3, [pc, #8]	; (68c0 <nrfx_power_clock_irq_handler+0x64>)
}
    68b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	2001      	movs	r0, #1
    68be:	4718      	bx	r3
    68c0:	20004e2c 	.word	0x20004e2c

000068c4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    68c4:	4b03      	ldr	r3, [pc, #12]	; (68d4 <pin_in_use_by_te+0x10>)
    68c6:	3008      	adds	r0, #8
    68c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    68cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    68d0:	4770      	bx	lr
    68d2:	bf00      	nop
    68d4:	20000064 	.word	0x20000064

000068d8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    68d8:	4b04      	ldr	r3, [pc, #16]	; (68ec <pin_has_trigger+0x14>)
    68da:	3008      	adds	r0, #8
    68dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    68e0:	f010 001c 	ands.w	r0, r0, #28
    68e4:	bf18      	it	ne
    68e6:	2001      	movne	r0, #1
    68e8:	4770      	bx	lr
    68ea:	bf00      	nop
    68ec:	20000064 	.word	0x20000064

000068f0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    68f0:	4b03      	ldr	r3, [pc, #12]	; (6900 <pin_is_output+0x10>)
    68f2:	3008      	adds	r0, #8
    68f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    68f8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    68fc:	4770      	bx	lr
    68fe:	bf00      	nop
    6900:	20000064 	.word	0x20000064

00006904 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6904:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6906:	f100 0308 	add.w	r3, r0, #8
    690a:	4c0c      	ldr	r4, [pc, #48]	; (693c <call_handler+0x38>)
    690c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6910:	05da      	lsls	r2, r3, #23
{
    6912:	4605      	mov	r5, r0
    6914:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6916:	d507      	bpl.n	6928 <call_handler+0x24>
    6918:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    691c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6920:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6924:	6852      	ldr	r2, [r2, #4]
    6926:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6928:	68a3      	ldr	r3, [r4, #8]
    692a:	b12b      	cbz	r3, 6938 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    692c:	68e2      	ldr	r2, [r4, #12]
    692e:	4631      	mov	r1, r6
    6930:	4628      	mov	r0, r5
    }
}
    6932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6936:	4718      	bx	r3
}
    6938:	bd70      	pop	{r4, r5, r6, pc}
    693a:	bf00      	nop
    693c:	20000064 	.word	0x20000064

00006940 <nrf_gpio_pin_port_decode>:
{
    6940:	b510      	push	{r4, lr}
    6942:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6944:	6800      	ldr	r0, [r0, #0]
    6946:	f004 fa02 	bl	ad4e <nrf_gpio_pin_present_check>
    694a:	b958      	cbnz	r0, 6964 <nrf_gpio_pin_port_decode+0x24>
    694c:	4912      	ldr	r1, [pc, #72]	; (6998 <nrf_gpio_pin_port_decode+0x58>)
    694e:	4813      	ldr	r0, [pc, #76]	; (699c <nrf_gpio_pin_port_decode+0x5c>)
    6950:	4a13      	ldr	r2, [pc, #76]	; (69a0 <nrf_gpio_pin_port_decode+0x60>)
    6952:	f240 2329 	movw	r3, #553	; 0x229
    6956:	f003 fd9c 	bl	a492 <assert_print>
    695a:	4811      	ldr	r0, [pc, #68]	; (69a0 <nrf_gpio_pin_port_decode+0x60>)
    695c:	f240 2129 	movw	r1, #553	; 0x229
    6960:	f003 fd90 	bl	a484 <assert_post_action>
    uint32_t pin_number = *p_pin;
    6964:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    6966:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    696a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    696c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    696e:	d102      	bne.n	6976 <nrf_gpio_pin_port_decode+0x36>
{
    6970:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    6974:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6976:	2b01      	cmp	r3, #1
    6978:	d00c      	beq.n	6994 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    697a:	4a09      	ldr	r2, [pc, #36]	; (69a0 <nrf_gpio_pin_port_decode+0x60>)
    697c:	4909      	ldr	r1, [pc, #36]	; (69a4 <nrf_gpio_pin_port_decode+0x64>)
    697e:	4807      	ldr	r0, [pc, #28]	; (699c <nrf_gpio_pin_port_decode+0x5c>)
    6980:	f240 232e 	movw	r3, #558	; 0x22e
    6984:	f003 fd85 	bl	a492 <assert_print>
    6988:	4805      	ldr	r0, [pc, #20]	; (69a0 <nrf_gpio_pin_port_decode+0x60>)
    698a:	f240 212e 	movw	r1, #558	; 0x22e
    698e:	f003 fd79 	bl	a484 <assert_post_action>
    6992:	e7ed      	b.n	6970 <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    6994:	4804      	ldr	r0, [pc, #16]	; (69a8 <nrf_gpio_pin_port_decode+0x68>)
    6996:	e7ed      	b.n	6974 <nrf_gpio_pin_port_decode+0x34>
    6998:	0000ca1a 	.word	0x0000ca1a
    699c:	0000b9c2 	.word	0x0000b9c2
    69a0:	0000c9e7 	.word	0x0000c9e7
    69a4:	0000d2b1 	.word	0x0000d2b1
    69a8:	50000300 	.word	0x50000300

000069ac <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    69ac:	4a19      	ldr	r2, [pc, #100]	; (6a14 <release_handler+0x68>)
    69ae:	3008      	adds	r0, #8
{
    69b0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    69b2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    69b6:	05d9      	lsls	r1, r3, #23
    69b8:	d51d      	bpl.n	69f6 <release_handler+0x4a>
    69ba:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    69be:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    69c2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    69c6:	f102 040e 	add.w	r4, r2, #14
    69ca:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    69cc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    69d0:	f413 7f80 	tst.w	r3, #256	; 0x100
    69d4:	d003      	beq.n	69de <release_handler+0x32>
    69d6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    69da:	4299      	cmp	r1, r3
    69dc:	d00b      	beq.n	69f6 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    69de:	3001      	adds	r0, #1
    69e0:	2830      	cmp	r0, #48	; 0x30
    69e2:	d1f3      	bne.n	69cc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    69e4:	2300      	movs	r3, #0
    69e6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    69ea:	480b      	ldr	r0, [pc, #44]	; (6a18 <release_handler+0x6c>)
    69ec:	f7ff fdc8 	bl	6580 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    69f0:	4b0a      	ldr	r3, [pc, #40]	; (6a1c <release_handler+0x70>)
    69f2:	4298      	cmp	r0, r3
    69f4:	d100      	bne.n	69f8 <release_handler+0x4c>
}
    69f6:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    69f8:	4909      	ldr	r1, [pc, #36]	; (6a20 <release_handler+0x74>)
    69fa:	480a      	ldr	r0, [pc, #40]	; (6a24 <release_handler+0x78>)
    69fc:	4a0a      	ldr	r2, [pc, #40]	; (6a28 <release_handler+0x7c>)
    69fe:	f44f 7399 	mov.w	r3, #306	; 0x132
    6a02:	f003 fd46 	bl	a492 <assert_print>
}
    6a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6a0a:	4807      	ldr	r0, [pc, #28]	; (6a28 <release_handler+0x7c>)
    6a0c:	f44f 7199 	mov.w	r1, #306	; 0x132
    6a10:	f003 bd38 	b.w	a484 <assert_post_action>
    6a14:	20000064 	.word	0x20000064
    6a18:	200000d8 	.word	0x200000d8
    6a1c:	0bad0000 	.word	0x0bad0000
    6a20:	0000cc04 	.word	0x0000cc04
    6a24:	0000b9c2 	.word	0x0000b9c2
    6a28:	0000cba0 	.word	0x0000cba0

00006a2c <pin_handler_trigger_uninit>:
{
    6a2c:	b538      	push	{r3, r4, r5, lr}
    6a2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6a30:	f7ff ff48 	bl	68c4 <pin_in_use_by_te>
    6a34:	4c09      	ldr	r4, [pc, #36]	; (6a5c <pin_handler_trigger_uninit+0x30>)
    6a36:	f102 0508 	add.w	r5, r2, #8
    6a3a:	b140      	cbz	r0, 6a4e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a3c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6a40:	4907      	ldr	r1, [pc, #28]	; (6a60 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6a42:	0b5b      	lsrs	r3, r3, #13
    6a44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6a48:	2000      	movs	r0, #0
    6a4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6a4e:	4610      	mov	r0, r2
    6a50:	f7ff ffac 	bl	69ac <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6a54:	2300      	movs	r3, #0
    6a56:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6a5a:	bd38      	pop	{r3, r4, r5, pc}
    6a5c:	20000064 	.word	0x20000064
    6a60:	40006000 	.word	0x40006000

00006a64 <nrfx_gpiote_input_configure>:
{
    6a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a66:	4604      	mov	r4, r0
    6a68:	b085      	sub	sp, #20
    6a6a:	4617      	mov	r7, r2
    6a6c:	461d      	mov	r5, r3
    if (p_input_config)
    6a6e:	b1d9      	cbz	r1, 6aa8 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    6a70:	f004 f97e 	bl	ad70 <pin_is_task_output>
    6a74:	bb00      	cbnz	r0, 6ab8 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6a76:	460b      	mov	r3, r1
    6a78:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6a7c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6a80:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6a84:	f10d 020f 	add.w	r2, sp, #15
    6a88:	f10d 010e 	add.w	r1, sp, #14
    6a8c:	4620      	mov	r0, r4
    6a8e:	f004 f97a 	bl	ad86 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6a92:	4a43      	ldr	r2, [pc, #268]	; (6ba0 <nrfx_gpiote_input_configure+0x13c>)
    6a94:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6a98:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6a9c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6aa0:	f043 0301 	orr.w	r3, r3, #1
    6aa4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6aa8:	b347      	cbz	r7, 6afc <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    6aaa:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6aac:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6aae:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    6ab0:	f7ff ff1e 	bl	68f0 <pin_is_output>
    6ab4:	b110      	cbz	r0, 6abc <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    6ab6:	b1b2      	cbz	r2, 6ae6 <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    6ab8:	483a      	ldr	r0, [pc, #232]	; (6ba4 <nrfx_gpiote_input_configure+0x140>)
    6aba:	e021      	b.n	6b00 <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6abc:	4f38      	ldr	r7, [pc, #224]	; (6ba0 <nrfx_gpiote_input_configure+0x13c>)
    6abe:	f104 0c08 	add.w	ip, r4, #8
    6ac2:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    6ac6:	f021 0120 	bic.w	r1, r1, #32
    6aca:	04c9      	lsls	r1, r1, #19
    6acc:	0cc9      	lsrs	r1, r1, #19
    6ace:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    6ad2:	b142      	cbz	r2, 6ae6 <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    6ad4:	2e03      	cmp	r6, #3
    6ad6:	d8ef      	bhi.n	6ab8 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6ad8:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6ada:	b99e      	cbnz	r6, 6b04 <nrfx_gpiote_input_configure+0xa0>
    6adc:	4a32      	ldr	r2, [pc, #200]	; (6ba8 <nrfx_gpiote_input_configure+0x144>)
    6ade:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6ae2:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6ae6:	4a2e      	ldr	r2, [pc, #184]	; (6ba0 <nrfx_gpiote_input_configure+0x13c>)
    6ae8:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6aec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6af0:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6af4:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    6af8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6afc:	bb3d      	cbnz	r5, 6b4e <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    6afe:	482b      	ldr	r0, [pc, #172]	; (6bac <nrfx_gpiote_input_configure+0x148>)
}
    6b00:	b005      	add	sp, #20
    6b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6b04:	009a      	lsls	r2, r3, #2
    6b06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6b0a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6b0e:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    6b12:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6b16:	f020 0003 	bic.w	r0, r0, #3
    6b1a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6b1e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6b22:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    6b26:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6b2a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6b2e:	0220      	lsls	r0, r4, #8
    6b30:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6b34:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6b38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6b3c:	ea40 000e 	orr.w	r0, r0, lr
    6b40:	f041 0120 	orr.w	r1, r1, #32
    6b44:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    6b48:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6b4c:	e7cb      	b.n	6ae6 <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6b4e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6b52:	4620      	mov	r0, r4
    6b54:	f7ff ff2a 	bl	69ac <release_handler>
    if (!handler)
    6b58:	2e00      	cmp	r6, #0
    6b5a:	d0d0      	beq.n	6afe <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6b5c:	4d10      	ldr	r5, [pc, #64]	; (6ba0 <nrfx_gpiote_input_configure+0x13c>)
    6b5e:	e9d5 2300 	ldrd	r2, r3, [r5]
    6b62:	4296      	cmp	r6, r2
    6b64:	d101      	bne.n	6b6a <nrfx_gpiote_input_configure+0x106>
    6b66:	429f      	cmp	r7, r3
    6b68:	d018      	beq.n	6b9c <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6b6a:	4811      	ldr	r0, [pc, #68]	; (6bb0 <nrfx_gpiote_input_configure+0x14c>)
    6b6c:	f10d 010f 	add.w	r1, sp, #15
    6b70:	f7ff fce6 	bl	6540 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6b74:	4b0d      	ldr	r3, [pc, #52]	; (6bac <nrfx_gpiote_input_configure+0x148>)
    6b76:	4298      	cmp	r0, r3
    6b78:	d1c2      	bne.n	6b00 <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    6b7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6b7e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6b82:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6b86:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6b88:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6b8a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6b8e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6b96:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6b9a:	e7b0      	b.n	6afe <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6b9c:	2200      	movs	r2, #0
    6b9e:	e7ee      	b.n	6b7e <nrfx_gpiote_input_configure+0x11a>
    6ba0:	20000064 	.word	0x20000064
    6ba4:	0bad0004 	.word	0x0bad0004
    6ba8:	40006000 	.word	0x40006000
    6bac:	0bad0000 	.word	0x0bad0000
    6bb0:	200000d8 	.word	0x200000d8

00006bb4 <nrfx_gpiote_output_configure>:
{
    6bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bb6:	4604      	mov	r4, r0
    6bb8:	b085      	sub	sp, #20
    6bba:	4615      	mov	r5, r2
    if (p_config)
    6bbc:	b321      	cbz	r1, 6c08 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    6bbe:	f7ff fe97 	bl	68f0 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6bc2:	b920      	cbnz	r0, 6bce <nrfx_gpiote_output_configure+0x1a>
    6bc4:	4620      	mov	r0, r4
    6bc6:	f7ff fe7d 	bl	68c4 <pin_in_use_by_te>
    6bca:	2800      	cmp	r0, #0
    6bcc:	d15e      	bne.n	6c8c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6bce:	4620      	mov	r0, r4
    6bd0:	f7ff fe82 	bl	68d8 <pin_has_trigger>
    6bd4:	b110      	cbz	r0, 6bdc <nrfx_gpiote_output_configure+0x28>
    6bd6:	784b      	ldrb	r3, [r1, #1]
    6bd8:	2b01      	cmp	r3, #1
    6bda:	d057      	beq.n	6c8c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6bdc:	2301      	movs	r3, #1
    6bde:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6be2:	2300      	movs	r3, #0
    6be4:	e9cd 1300 	strd	r1, r3, [sp]
    6be8:	1c4a      	adds	r2, r1, #1
    6bea:	1c8b      	adds	r3, r1, #2
    6bec:	4620      	mov	r0, r4
    6bee:	f10d 010f 	add.w	r1, sp, #15
    6bf2:	f004 f8c8 	bl	ad86 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6bf6:	4a26      	ldr	r2, [pc, #152]	; (6c90 <nrfx_gpiote_output_configure+0xdc>)
    6bf8:	f104 0108 	add.w	r1, r4, #8
    6bfc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6c00:	f043 0303 	orr.w	r3, r3, #3
    6c04:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6c08:	b915      	cbnz	r5, 6c10 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    6c0a:	4822      	ldr	r0, [pc, #136]	; (6c94 <nrfx_gpiote_output_configure+0xe0>)
}
    6c0c:	b005      	add	sp, #20
    6c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    6c10:	4620      	mov	r0, r4
    6c12:	f7ff fe6d 	bl	68f0 <pin_is_output>
        if (pin_is_input(pin))
    6c16:	b3c8      	cbz	r0, 6c8c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6c18:	4e1d      	ldr	r6, [pc, #116]	; (6c90 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    6c1a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6c1e:	f104 0708 	add.w	r7, r4, #8
    6c22:	4661      	mov	r1, ip
    6c24:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    6c28:	0089      	lsls	r1, r1, #2
    6c2a:	f020 0020 	bic.w	r0, r0, #32
    6c2e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6c32:	04c0      	lsls	r0, r0, #19
    6c34:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6c38:	0cc0      	lsrs	r0, r0, #19
    6c3a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    6c3e:	2300      	movs	r3, #0
    6c40:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6c44:	786a      	ldrb	r2, [r5, #1]
    6c46:	2a00      	cmp	r2, #0
    6c48:	d0df      	beq.n	6c0a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6c4a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6c4e:	78ad      	ldrb	r5, [r5, #2]
    6c50:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6c54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c58:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c5c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6c60:	0223      	lsls	r3, r4, #8
    6c62:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6c66:	0412      	lsls	r2, r2, #16
    6c68:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c6c:	ea43 030e 	orr.w	r3, r3, lr
    6c70:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6c72:	052a      	lsls	r2, r5, #20
    6c74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6c78:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c7c:	4313      	orrs	r3, r2
    6c7e:	f040 0020 	orr.w	r0, r0, #32
    6c82:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6c86:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6c8a:	e7be      	b.n	6c0a <nrfx_gpiote_output_configure+0x56>
{
    6c8c:	4802      	ldr	r0, [pc, #8]	; (6c98 <nrfx_gpiote_output_configure+0xe4>)
    6c8e:	e7bd      	b.n	6c0c <nrfx_gpiote_output_configure+0x58>
    6c90:	20000064 	.word	0x20000064
    6c94:	0bad0000 	.word	0x0bad0000
    6c98:	0bad0004 	.word	0x0bad0004

00006c9c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6c9c:	4b01      	ldr	r3, [pc, #4]	; (6ca4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6c9e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6ca2:	4770      	bx	lr
    6ca4:	20000064 	.word	0x20000064

00006ca8 <nrfx_gpiote_channel_get>:
{
    6ca8:	b538      	push	{r3, r4, r5, lr}
    6caa:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6cac:	460d      	mov	r5, r1
    6cae:	b959      	cbnz	r1, 6cc8 <nrfx_gpiote_channel_get+0x20>
    6cb0:	490c      	ldr	r1, [pc, #48]	; (6ce4 <nrfx_gpiote_channel_get+0x3c>)
    6cb2:	480d      	ldr	r0, [pc, #52]	; (6ce8 <nrfx_gpiote_channel_get+0x40>)
    6cb4:	4a0d      	ldr	r2, [pc, #52]	; (6cec <nrfx_gpiote_channel_get+0x44>)
    6cb6:	f240 2335 	movw	r3, #565	; 0x235
    6cba:	f003 fbea 	bl	a492 <assert_print>
    6cbe:	480b      	ldr	r0, [pc, #44]	; (6cec <nrfx_gpiote_channel_get+0x44>)
    6cc0:	f240 2135 	movw	r1, #565	; 0x235
    6cc4:	f003 fbde 	bl	a484 <assert_post_action>
    if (pin_in_use_by_te(pin))
    6cc8:	4620      	mov	r0, r4
    6cca:	f7ff fdfb 	bl	68c4 <pin_in_use_by_te>
    6cce:	b138      	cbz	r0, 6ce0 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6cd0:	4b07      	ldr	r3, [pc, #28]	; (6cf0 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    6cd2:	4808      	ldr	r0, [pc, #32]	; (6cf4 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6cd4:	3408      	adds	r4, #8
    6cd6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6cda:	0b5b      	lsrs	r3, r3, #13
    6cdc:	702b      	strb	r3, [r5, #0]
}
    6cde:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ce0:	4805      	ldr	r0, [pc, #20]	; (6cf8 <nrfx_gpiote_channel_get+0x50>)
    6ce2:	e7fc      	b.n	6cde <nrfx_gpiote_channel_get+0x36>
    6ce4:	0000cc18 	.word	0x0000cc18
    6ce8:	0000b9c2 	.word	0x0000b9c2
    6cec:	0000cba0 	.word	0x0000cba0
    6cf0:	20000064 	.word	0x20000064
    6cf4:	0bad0000 	.word	0x0bad0000
    6cf8:	0bad0004 	.word	0x0bad0004

00006cfc <nrfx_gpiote_init>:
{
    6cfc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6cfe:	4c0f      	ldr	r4, [pc, #60]	; (6d3c <nrfx_gpiote_init+0x40>)
    6d00:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6d04:	b9bd      	cbnz	r5, 6d36 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6d06:	2260      	movs	r2, #96	; 0x60
    6d08:	4629      	mov	r1, r5
    6d0a:	f104 0010 	add.w	r0, r4, #16
    6d0e:	f004 fa56 	bl	b1be <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6d12:	2006      	movs	r0, #6
    6d14:	f7fd f8de 	bl	3ed4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d18:	4b09      	ldr	r3, [pc, #36]	; (6d40 <nrfx_gpiote_init+0x44>)
    return err_code;
    6d1a:	480a      	ldr	r0, [pc, #40]	; (6d44 <nrfx_gpiote_init+0x48>)
    6d1c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6d20:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6d24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6d28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6d2c:	2301      	movs	r3, #1
    6d2e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6d32:	6763      	str	r3, [r4, #116]	; 0x74
}
    6d34:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6d36:	4804      	ldr	r0, [pc, #16]	; (6d48 <nrfx_gpiote_init+0x4c>)
    6d38:	e7fc      	b.n	6d34 <nrfx_gpiote_init+0x38>
    6d3a:	bf00      	nop
    6d3c:	20000064 	.word	0x20000064
    6d40:	40006000 	.word	0x40006000
    6d44:	0bad0000 	.word	0x0bad0000
    6d48:	0bad0005 	.word	0x0bad0005

00006d4c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6d4c:	4b03      	ldr	r3, [pc, #12]	; (6d5c <nrfx_gpiote_is_init+0x10>)
    6d4e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6d52:	3800      	subs	r0, #0
    6d54:	bf18      	it	ne
    6d56:	2001      	movne	r0, #1
    6d58:	4770      	bx	lr
    6d5a:	bf00      	nop
    6d5c:	20000064 	.word	0x20000064

00006d60 <nrfx_gpiote_channel_free>:
{
    6d60:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6d62:	4801      	ldr	r0, [pc, #4]	; (6d68 <nrfx_gpiote_channel_free+0x8>)
    6d64:	f7ff bc0c 	b.w	6580 <nrfx_flag32_free>
    6d68:	200000d4 	.word	0x200000d4

00006d6c <nrfx_gpiote_channel_alloc>:
{
    6d6c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6d6e:	4801      	ldr	r0, [pc, #4]	; (6d74 <nrfx_gpiote_channel_alloc+0x8>)
    6d70:	f7ff bbe6 	b.w	6540 <nrfx_flag32_alloc>
    6d74:	200000d4 	.word	0x200000d4

00006d78 <nrfx_gpiote_trigger_enable>:
{
    6d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d7a:	4604      	mov	r4, r0
    6d7c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6d7e:	f7ff fdab 	bl	68d8 <pin_has_trigger>
    6d82:	b958      	cbnz	r0, 6d9c <nrfx_gpiote_trigger_enable+0x24>
    6d84:	492e      	ldr	r1, [pc, #184]	; (6e40 <nrfx_gpiote_trigger_enable+0xc8>)
    6d86:	482f      	ldr	r0, [pc, #188]	; (6e44 <nrfx_gpiote_trigger_enable+0xcc>)
    6d88:	4a2f      	ldr	r2, [pc, #188]	; (6e48 <nrfx_gpiote_trigger_enable+0xd0>)
    6d8a:	f240 33df 	movw	r3, #991	; 0x3df
    6d8e:	f003 fb80 	bl	a492 <assert_print>
    6d92:	482d      	ldr	r0, [pc, #180]	; (6e48 <nrfx_gpiote_trigger_enable+0xd0>)
    6d94:	f240 31df 	movw	r1, #991	; 0x3df
    6d98:	f003 fb74 	bl	a484 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6d9c:	4620      	mov	r0, r4
    6d9e:	f7ff fd91 	bl	68c4 <pin_in_use_by_te>
    6da2:	4e2a      	ldr	r6, [pc, #168]	; (6e4c <nrfx_gpiote_trigger_enable+0xd4>)
    6da4:	f104 0708 	add.w	r7, r4, #8
    6da8:	b1f8      	cbz	r0, 6dea <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    6daa:	4620      	mov	r0, r4
    6dac:	f7ff fda0 	bl	68f0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6db0:	b9d8      	cbnz	r0, 6dea <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6db2:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    6db6:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6db8:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    6dba:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    6dbe:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    6dc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6dc6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6dca:	6008      	str	r0, [r1, #0]
    6dcc:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6dce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    6dd2:	f041 0101 	orr.w	r1, r1, #1
    6dd6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    6dda:	b125      	cbz	r5, 6de6 <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6ddc:	2301      	movs	r3, #1
    6dde:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    6de0:	4a1b      	ldr	r2, [pc, #108]	; (6e50 <nrfx_gpiote_trigger_enable+0xd8>)
    6de2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6de6:	b003      	add	sp, #12
    6de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    6dea:	b95d      	cbnz	r5, 6e04 <nrfx_gpiote_trigger_enable+0x8c>
    6dec:	4919      	ldr	r1, [pc, #100]	; (6e54 <nrfx_gpiote_trigger_enable+0xdc>)
    6dee:	4815      	ldr	r0, [pc, #84]	; (6e44 <nrfx_gpiote_trigger_enable+0xcc>)
    6df0:	4a15      	ldr	r2, [pc, #84]	; (6e48 <nrfx_gpiote_trigger_enable+0xd0>)
    6df2:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6df6:	f003 fb4c 	bl	a492 <assert_print>
    6dfa:	4813      	ldr	r0, [pc, #76]	; (6e48 <nrfx_gpiote_trigger_enable+0xd0>)
    6dfc:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6e00:	f003 fb40 	bl	a484 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6e04:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6e08:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6e0c:	2b04      	cmp	r3, #4
    6e0e:	d012      	beq.n	6e36 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6e10:	2b05      	cmp	r3, #5
    6e12:	d012      	beq.n	6e3a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e14:	a801      	add	r0, sp, #4
    6e16:	9401      	str	r4, [sp, #4]
    6e18:	f7ff fd92 	bl	6940 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6e1c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6e1e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6e22:	40d9      	lsrs	r1, r3
    6e24:	f001 0101 	and.w	r1, r1, #1
    6e28:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6e2a:	4620      	mov	r0, r4
}
    6e2c:	b003      	add	sp, #12
    6e2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6e32:	f003 bff5 	b.w	ae20 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6e36:	2103      	movs	r1, #3
    6e38:	e7f7      	b.n	6e2a <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6e3a:	2102      	movs	r1, #2
    6e3c:	e7f5      	b.n	6e2a <nrfx_gpiote_trigger_enable+0xb2>
    6e3e:	bf00      	nop
    6e40:	0000cc22 	.word	0x0000cc22
    6e44:	0000b9c2 	.word	0x0000b9c2
    6e48:	0000cba0 	.word	0x0000cba0
    6e4c:	20000064 	.word	0x20000064
    6e50:	40006000 	.word	0x40006000
    6e54:	0000cc37 	.word	0x0000cc37

00006e58 <nrfx_gpiote_trigger_disable>:
{
    6e58:	b508      	push	{r3, lr}
    6e5a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6e5c:	f7ff fd32 	bl	68c4 <pin_in_use_by_te>
    6e60:	b1c8      	cbz	r0, 6e96 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    6e62:	4610      	mov	r0, r2
    6e64:	f7ff fd44 	bl	68f0 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6e68:	b9a8      	cbnz	r0, 6e96 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e6a:	3208      	adds	r2, #8
    6e6c:	4b0d      	ldr	r3, [pc, #52]	; (6ea4 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    6e6e:	490e      	ldr	r1, [pc, #56]	; (6ea8 <nrfx_gpiote_trigger_disable+0x50>)
    6e70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6e74:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e76:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6e78:	409a      	lsls	r2, r3
    6e7a:	009b      	lsls	r3, r3, #2
    6e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6e80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6e84:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6e88:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6e8c:	f022 0203 	bic.w	r2, r2, #3
    6e90:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6e94:	bd08      	pop	{r3, pc}
    6e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6e9a:	2100      	movs	r1, #0
    6e9c:	4610      	mov	r0, r2
    6e9e:	f003 bfbf 	b.w	ae20 <nrf_gpio_cfg_sense_set>
    6ea2:	bf00      	nop
    6ea4:	20000064 	.word	0x20000064
    6ea8:	40006000 	.word	0x40006000

00006eac <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6eac:	4b0e      	ldr	r3, [pc, #56]	; (6ee8 <nrfx_gpiote_pin_uninit+0x3c>)
    6eae:	f100 0208 	add.w	r2, r0, #8
{
    6eb2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6eb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6eb8:	07db      	lsls	r3, r3, #31
{
    6eba:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6ebc:	d511      	bpl.n	6ee2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6ebe:	f7ff ffcb 	bl	6e58 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6ec2:	4620      	mov	r0, r4
    6ec4:	f7ff fdb2 	bl	6a2c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ec8:	a801      	add	r0, sp, #4
    6eca:	9401      	str	r4, [sp, #4]
    6ecc:	f7ff fd38 	bl	6940 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6ed0:	9b01      	ldr	r3, [sp, #4]
    6ed2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6ed6:	2202      	movs	r2, #2
    6ed8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6edc:	4803      	ldr	r0, [pc, #12]	; (6eec <nrfx_gpiote_pin_uninit+0x40>)
}
    6ede:	b002      	add	sp, #8
    6ee0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ee2:	4803      	ldr	r0, [pc, #12]	; (6ef0 <nrfx_gpiote_pin_uninit+0x44>)
    6ee4:	e7fb      	b.n	6ede <nrfx_gpiote_pin_uninit+0x32>
    6ee6:	bf00      	nop
    6ee8:	20000064 	.word	0x20000064
    6eec:	0bad0000 	.word	0x0bad0000
    6ef0:	0bad0004 	.word	0x0bad0004

00006ef4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef8:	4b69      	ldr	r3, [pc, #420]	; (70a0 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    6efa:	486a      	ldr	r0, [pc, #424]	; (70a4 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6efc:	496a      	ldr	r1, [pc, #424]	; (70a8 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    6efe:	2600      	movs	r6, #0
{
    6f00:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6f02:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f04:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f06:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6f08:	b135      	cbz	r5, 6f18 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6f0a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6f0e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f10:	bf1e      	ittt	ne
    6f12:	601c      	strne	r4, [r3, #0]
    6f14:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6f16:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6f18:	3304      	adds	r3, #4
    6f1a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6f1c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6f20:	d1f1      	bne.n	6f06 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f22:	f8df 9180 	ldr.w	r9, [pc, #384]	; 70a4 <nrfx_gpiote_irq_handler+0x1b0>
    6f26:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	f000 809b 	beq.w	7066 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    6f30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6f34:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6f38:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6f3a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6f3e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6f42:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6f44:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6f48:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6f4c:	f10d 0a10 	add.w	sl, sp, #16
    6f50:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6f54:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6f56:	f04f 0b01 	mov.w	fp, #1
    6f5a:	e04b      	b.n	6ff4 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    6f5c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f5e:	4a53      	ldr	r2, [pc, #332]	; (70ac <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6f60:	fa94 f4a4 	rbit	r4, r4
    6f64:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6f68:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6f6a:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f6c:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6f70:	f004 0107 	and.w	r1, r4, #7
    6f74:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6f78:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6f7c:	9403      	str	r4, [sp, #12]
    6f7e:	fa0b f101 	lsl.w	r1, fp, r1
    6f82:	ea23 0301 	bic.w	r3, r3, r1
    6f86:	08ba      	lsrs	r2, r7, #2
    6f88:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f8c:	a803      	add	r0, sp, #12
    6f8e:	9201      	str	r2, [sp, #4]
    6f90:	f7ff fcd6 	bl	6940 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6f94:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    6f96:	9a01      	ldr	r2, [sp, #4]
    6f98:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f9c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    6fa0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    6fa4:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6fa6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6fa8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6fac:	d52c      	bpl.n	7008 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    6fae:	4639      	mov	r1, r7
    6fb0:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6fb2:	b2dd      	uxtb	r5, r3
    6fb4:	f7ff fca6 	bl	6904 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6fb8:	a803      	add	r0, sp, #12
    6fba:	9403      	str	r4, [sp, #12]
    6fbc:	f7ff fcc0 	bl	6940 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6fc0:	9b03      	ldr	r3, [sp, #12]
    6fc2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6fc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6fca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6fce:	429d      	cmp	r5, r3
    6fd0:	d107      	bne.n	6fe2 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6fd2:	2100      	movs	r1, #0
    6fd4:	4620      	mov	r0, r4
    6fd6:	f003 ff23 	bl	ae20 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6fda:	4629      	mov	r1, r5
    6fdc:	4620      	mov	r0, r4
    6fde:	f003 ff1f 	bl	ae20 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6fe2:	a803      	add	r0, sp, #12
    6fe4:	9403      	str	r4, [sp, #12]
    6fe6:	f7ff fcab 	bl	6940 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6fea:	9b03      	ldr	r3, [sp, #12]
    6fec:	fa0b f303 	lsl.w	r3, fp, r3
    6ff0:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6ff4:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6ff8:	2c00      	cmp	r4, #0
    6ffa:	d1af      	bne.n	6f5c <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6ffc:	f1b8 0f00 	cmp.w	r8, #0
    7000:	d11d      	bne.n	703e <nrfx_gpiote_irq_handler+0x14a>
    7002:	f04f 0801 	mov.w	r8, #1
    7006:	e7a3      	b.n	6f50 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7008:	2b02      	cmp	r3, #2
    700a:	d10c      	bne.n	7026 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    700c:	2103      	movs	r1, #3
    700e:	4620      	mov	r0, r4
    7010:	f003 ff06 	bl	ae20 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7014:	f005 0305 	and.w	r3, r5, #5
    7018:	2b01      	cmp	r3, #1
    701a:	d1e2      	bne.n	6fe2 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    701c:	4639      	mov	r1, r7
    701e:	4620      	mov	r0, r4
    7020:	f7ff fc70 	bl	6904 <call_handler>
    7024:	e7dd      	b.n	6fe2 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7026:	2102      	movs	r1, #2
    7028:	4620      	mov	r0, r4
    702a:	9301      	str	r3, [sp, #4]
    702c:	f003 fef8 	bl	ae20 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7030:	2d03      	cmp	r5, #3
    7032:	d0f3      	beq.n	701c <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7034:	9b01      	ldr	r3, [sp, #4]
    7036:	2b03      	cmp	r3, #3
    7038:	d1d3      	bne.n	6fe2 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    703a:	2d02      	cmp	r5, #2
    703c:	e7ed      	b.n	701a <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    703e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7042:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    7046:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    704a:	4919      	ldr	r1, [pc, #100]	; (70b0 <nrfx_gpiote_irq_handler+0x1bc>)
    704c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    7050:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    7052:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    7056:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    705a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    705c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    705e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    7062:	f47f af71 	bne.w	6f48 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    7066:	2401      	movs	r4, #1
    while (mask)
    7068:	b916      	cbnz	r6, 7070 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    706a:	b007      	add	sp, #28
    706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7070:	fa96 f3a6 	rbit	r3, r6
    7074:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7078:	fa04 f203 	lsl.w	r2, r4, r3
    707c:	009b      	lsls	r3, r3, #2
    707e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7082:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7086:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    708a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    708e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7092:	f3c0 2005 	ubfx	r0, r0, #8, #6
    7096:	f3c1 4101 	ubfx	r1, r1, #16, #2
    709a:	f7ff fc33 	bl	6904 <call_handler>
    709e:	e7e3      	b.n	7068 <nrfx_gpiote_irq_handler+0x174>
    70a0:	40006100 	.word	0x40006100
    70a4:	40006000 	.word	0x40006000
    70a8:	40006120 	.word	0x40006120
    70ac:	20000064 	.word	0x20000064
    70b0:	50000300 	.word	0x50000300

000070b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    70b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    70b6:	4801      	ldr	r0, [pc, #4]	; (70bc <nrfx_ppi_channel_alloc+0x8>)
    70b8:	f7ff ba42 	b.w	6540 <nrfx_flag32_alloc>
    70bc:	200000e0 	.word	0x200000e0

000070c0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    70c0:	4b11      	ldr	r3, [pc, #68]	; (7108 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    70c2:	4912      	ldr	r1, [pc, #72]	; (710c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    70c4:	2203      	movs	r2, #3
    70c6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    70c8:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    70ca:	4a11      	ldr	r2, [pc, #68]	; (7110 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    70cc:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    70ce:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    70d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    70d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    70d6:	2200      	movs	r2, #0
    70d8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    70da:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    70dc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    70de:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    70e0:	490c      	ldr	r1, [pc, #48]	; (7114 <_DoInit+0x54>)
    70e2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    70e4:	2110      	movs	r1, #16
    70e6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    70e8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    70ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    70ec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    70ee:	4a0a      	ldr	r2, [pc, #40]	; (7118 <_DoInit+0x58>)
    70f0:	6812      	ldr	r2, [r2, #0]
    70f2:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    70f6:	4a09      	ldr	r2, [pc, #36]	; (711c <_DoInit+0x5c>)
    70f8:	6810      	ldr	r0, [r2, #0]
    70fa:	8892      	ldrh	r2, [r2, #4]
    70fc:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    70fe:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    7100:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    7102:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    7104:	4770      	bx	lr
    7106:	bf00      	nop
    7108:	20004e34 	.word	0x20004e34
    710c:	0000cc42 	.word	0x0000cc42
    7110:	2001111d 	.word	0x2001111d
    7114:	2001110d 	.word	0x2001110d
    7118:	0000cc4b 	.word	0x0000cc4b
    711c:	0000cc4f 	.word	0x0000cc4f

00007120 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7124:	4f21      	ldr	r7, [pc, #132]	; (71ac <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    7126:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    712a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    712c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7130:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    7132:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7134:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7136:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7138:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    713a:	d831      	bhi.n	71a0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    713c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7140:	ebaa 0905 	sub.w	r9, sl, r5
    7144:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7148:	4294      	cmp	r4, r2
    714a:	d811      	bhi.n	7170 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    714c:	2318      	movs	r3, #24
    714e:	fb06 3303 	mla	r3, r6, r3, r3
    7152:	443b      	add	r3, r7
    7154:	4622      	mov	r2, r4
    7156:	6858      	ldr	r0, [r3, #4]
    7158:	4641      	mov	r1, r8
    715a:	4428      	add	r0, r5
    715c:	f004 f80e 	bl	b17c <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    7160:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    7162:	2318      	movs	r3, #24
    7164:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    7168:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    716a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    716c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7170:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7172:	429c      	cmp	r4, r3
    7174:	d818      	bhi.n	71a8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7176:	fb00 bb0b 	mla	fp, r0, fp, fp
    717a:	44bb      	add	fp, r7
    717c:	464a      	mov	r2, r9
    717e:	f8db 0004 	ldr.w	r0, [fp, #4]
    7182:	442c      	add	r4, r5
    7184:	4428      	add	r0, r5
    7186:	f003 fff9 	bl	b17c <memcpy>
      if (NumBytes) {
    718a:	ebb4 040a 	subs.w	r4, r4, sl
    718e:	d0e8      	beq.n	7162 <SEGGER_RTT_WriteSkipNoLock+0x42>
    7190:	f8db 0004 	ldr.w	r0, [fp, #4]
    7194:	4622      	mov	r2, r4
    7196:	eb08 0109 	add.w	r1, r8, r9
    719a:	f003 ffef 	bl	b17c <memcpy>
      return 1;
    719e:	e7e0      	b.n	7162 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    71a0:	3b01      	subs	r3, #1
    71a2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    71a4:	42a3      	cmp	r3, r4
    71a6:	d2d1      	bcs.n	714c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    71a8:	2000      	movs	r0, #0
    71aa:	e7df      	b.n	716c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    71ac:	20004e34 	.word	0x20004e34

000071b0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    71b0:	4b03      	ldr	r3, [pc, #12]	; (71c0 <SEGGER_RTT_HasDataUp+0x10>)
    71b2:	2218      	movs	r2, #24
    71b4:	fb02 3300 	mla	r3, r2, r0, r3
    71b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    71ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    71bc:	1a80      	subs	r0, r0, r2
    71be:	4770      	bx	lr
    71c0:	20004e34 	.word	0x20004e34

000071c4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    71c4:	4b0e      	ldr	r3, [pc, #56]	; (7200 <z_sys_init_run_level+0x3c>)
{
    71c6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    71c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    71cc:	3001      	adds	r0, #1
    71ce:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    71d2:	42a6      	cmp	r6, r4
    71d4:	d800      	bhi.n	71d8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    71d6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    71d8:	e9d4 3500 	ldrd	r3, r5, [r4]
    71dc:	4628      	mov	r0, r5
    71de:	4798      	blx	r3
		if (dev != NULL) {
    71e0:	b165      	cbz	r5, 71fc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    71e2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    71e4:	b130      	cbz	r0, 71f4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    71e6:	2800      	cmp	r0, #0
    71e8:	bfb8      	it	lt
    71ea:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    71ec:	28ff      	cmp	r0, #255	; 0xff
    71ee:	bfa8      	it	ge
    71f0:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    71f2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    71f4:	785a      	ldrb	r2, [r3, #1]
    71f6:	f042 0201 	orr.w	r2, r2, #1
    71fa:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    71fc:	3408      	adds	r4, #8
    71fe:	e7e8      	b.n	71d2 <z_sys_init_run_level+0xe>
    7200:	0000b788 	.word	0x0000b788

00007204 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    7204:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    7206:	4605      	mov	r5, r0
    7208:	b910      	cbnz	r0, 7210 <z_impl_device_get_binding+0xc>
		return NULL;
    720a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    720c:	4620      	mov	r0, r4
    720e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    7210:	7803      	ldrb	r3, [r0, #0]
    7212:	2b00      	cmp	r3, #0
    7214:	d0f9      	beq.n	720a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    7216:	4c0e      	ldr	r4, [pc, #56]	; (7250 <z_impl_device_get_binding+0x4c>)
    7218:	4e0e      	ldr	r6, [pc, #56]	; (7254 <z_impl_device_get_binding+0x50>)
    721a:	42b4      	cmp	r4, r6
    721c:	d108      	bne.n	7230 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    721e:	4c0c      	ldr	r4, [pc, #48]	; (7250 <z_impl_device_get_binding+0x4c>)
    7220:	42b4      	cmp	r4, r6
    7222:	d0f2      	beq.n	720a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7224:	4620      	mov	r0, r4
    7226:	f003 fe12 	bl	ae4e <z_device_is_ready>
    722a:	b950      	cbnz	r0, 7242 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    722c:	3418      	adds	r4, #24
    722e:	e7f7      	b.n	7220 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    7230:	4620      	mov	r0, r4
    7232:	f003 fe0c 	bl	ae4e <z_device_is_ready>
    7236:	b110      	cbz	r0, 723e <z_impl_device_get_binding+0x3a>
    7238:	6823      	ldr	r3, [r4, #0]
    723a:	42ab      	cmp	r3, r5
    723c:	d0e6      	beq.n	720c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    723e:	3418      	adds	r4, #24
    7240:	e7eb      	b.n	721a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7242:	6821      	ldr	r1, [r4, #0]
    7244:	4628      	mov	r0, r5
    7246:	f7f9 fd6b 	bl	d20 <strcmp>
    724a:	2800      	cmp	r0, #0
    724c:	d1ee      	bne.n	722c <z_impl_device_get_binding+0x28>
    724e:	e7dd      	b.n	720c <z_impl_device_get_binding+0x8>
    7250:	0000b27c 	.word	0x0000b27c
    7254:	0000b2f4 	.word	0x0000b2f4

00007258 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    725c:	4605      	mov	r5, r0
    725e:	b086      	sub	sp, #24
    7260:	460f      	mov	r7, r1
	__asm__ volatile(
    7262:	f04f 0320 	mov.w	r3, #32
    7266:	f3ef 8811 	mrs	r8, BASEPRI
    726a:	f383 8812 	msr	BASEPRI_MAX, r3
    726e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7272:	f001 ff05 	bl	9080 <z_impl_z_current_get>
    7276:	2d04      	cmp	r5, #4
    7278:	bf96      	itet	ls
    727a:	4b29      	ldrls	r3, [pc, #164]	; (7320 <z_fatal_error+0xc8>)
    727c:	4b29      	ldrhi	r3, [pc, #164]	; (7324 <z_fatal_error+0xcc>)
    727e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7282:	4929      	ldr	r1, [pc, #164]	; (7328 <z_fatal_error+0xd0>)
    7284:	9503      	str	r5, [sp, #12]
    7286:	2400      	movs	r4, #0
    7288:	e9cd 3404 	strd	r3, r4, [sp, #16]
    728c:	4b27      	ldr	r3, [pc, #156]	; (732c <z_fatal_error+0xd4>)
    728e:	9400      	str	r4, [sp, #0]
    7290:	e9cd 4301 	strd	r4, r3, [sp, #4]
    7294:	4606      	mov	r6, r0
    7296:	4623      	mov	r3, r4
    7298:	2201      	movs	r2, #1
    729a:	4620      	mov	r0, r4
    729c:	f003 fde1 	bl	ae62 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    72a0:	b16f      	cbz	r7, 72be <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    72a2:	69fb      	ldr	r3, [r7, #28]
    72a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    72a8:	b14b      	cbz	r3, 72be <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    72aa:	4b21      	ldr	r3, [pc, #132]	; (7330 <z_fatal_error+0xd8>)
    72ac:	491e      	ldr	r1, [pc, #120]	; (7328 <z_fatal_error+0xd0>)
    72ae:	9400      	str	r4, [sp, #0]
    72b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    72b4:	2201      	movs	r2, #1
    72b6:	4623      	mov	r3, r4
    72b8:	4620      	mov	r0, r4
    72ba:	f003 fdd2 	bl	ae62 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    72be:	b12e      	cbz	r6, 72cc <z_fatal_error+0x74>
    72c0:	4630      	mov	r0, r6
    72c2:	f003 fe04 	bl	aece <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    72c6:	b108      	cbz	r0, 72cc <z_fatal_error+0x74>
    72c8:	7803      	ldrb	r3, [r0, #0]
    72ca:	b903      	cbnz	r3, 72ce <z_fatal_error+0x76>
		thread_name = "unknown";
    72cc:	4819      	ldr	r0, [pc, #100]	; (7334 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    72ce:	4b1a      	ldr	r3, [pc, #104]	; (7338 <z_fatal_error+0xe0>)
    72d0:	9302      	str	r3, [sp, #8]
    72d2:	2300      	movs	r3, #0
    72d4:	e9cd 6003 	strd	r6, r0, [sp, #12]
    72d8:	e9cd 3300 	strd	r3, r3, [sp]
    72dc:	4618      	mov	r0, r3
    72de:	4912      	ldr	r1, [pc, #72]	; (7328 <z_fatal_error+0xd0>)
    72e0:	2201      	movs	r2, #1
    72e2:	f003 fdbe 	bl	ae62 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    72e6:	4639      	mov	r1, r7
    72e8:	4628      	mov	r0, r5
    72ea:	f7ff f815 	bl	6318 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    72ee:	2d04      	cmp	r5, #4
    72f0:	d10c      	bne.n	730c <z_fatal_error+0xb4>
    72f2:	4912      	ldr	r1, [pc, #72]	; (733c <z_fatal_error+0xe4>)
    72f4:	4a12      	ldr	r2, [pc, #72]	; (7340 <z_fatal_error+0xe8>)
    72f6:	4813      	ldr	r0, [pc, #76]	; (7344 <z_fatal_error+0xec>)
    72f8:	238f      	movs	r3, #143	; 0x8f
    72fa:	f003 f8ca 	bl	a492 <assert_print>
    72fe:	4812      	ldr	r0, [pc, #72]	; (7348 <z_fatal_error+0xf0>)
    7300:	f003 f8c7 	bl	a492 <assert_print>
    7304:	480e      	ldr	r0, [pc, #56]	; (7340 <z_fatal_error+0xe8>)
    7306:	218f      	movs	r1, #143	; 0x8f
    7308:	f003 f8bc 	bl	a484 <assert_post_action>
	__asm__ volatile(
    730c:	f388 8811 	msr	BASEPRI, r8
    7310:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7314:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7316:	b006      	add	sp, #24
    7318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    731c:	f7fd ba9e 	b.w	485c <z_impl_k_thread_abort>
    7320:	0000b7a0 	.word	0x0000b7a0
    7324:	0000cc56 	.word	0x0000cc56
    7328:	0000b49c 	.word	0x0000b49c
    732c:	0000cc6c 	.word	0x0000cc6c
    7330:	0000cc94 	.word	0x0000cc94
    7334:	0000cc64 	.word	0x0000cc64
    7338:	0000ccb5 	.word	0x0000ccb5
    733c:	0000ccef 	.word	0x0000ccef
    7340:	0000cccd 	.word	0x0000cccd
    7344:	0000b9c2 	.word	0x0000b9c2
    7348:	0000cd0c 	.word	0x0000cd0c

0000734c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    734c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    734e:	4b0a      	ldr	r3, [pc, #40]	; (7378 <bg_thread_main+0x2c>)
    7350:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7352:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    7354:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7356:	f7ff ff35 	bl	71c4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    735a:	f002 fbe5 	bl	9b28 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    735e:	2003      	movs	r0, #3
    7360:	f7ff ff30 	bl	71c4 <z_sys_init_run_level>

	z_init_static_threads();
    7364:	f000 fa7c 	bl	7860 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    7368:	f7fa f89e 	bl	14a8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    736c:	4a03      	ldr	r2, [pc, #12]	; (737c <bg_thread_main+0x30>)
    736e:	7b13      	ldrb	r3, [r2, #12]
    7370:	f023 0301 	bic.w	r3, r3, #1
    7374:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7376:	bd08      	pop	{r3, pc}
    7378:	2001151d 	.word	0x2001151d
    737c:	200046f8 	.word	0x200046f8

00007380 <z_bss_zero>:
{
    7380:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7382:	4803      	ldr	r0, [pc, #12]	; (7390 <z_bss_zero+0x10>)
    7384:	4a03      	ldr	r2, [pc, #12]	; (7394 <z_bss_zero+0x14>)
    7386:	2100      	movs	r1, #0
    7388:	1a12      	subs	r2, r2, r0
    738a:	f003 fd7a 	bl	ae82 <z_early_memset>
}
    738e:	bd08      	pop	{r3, pc}
    7390:	20004228 	.word	0x20004228
    7394:	20011520 	.word	0x20011520

00007398 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7398:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    739a:	2300      	movs	r3, #0
{
    739c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    739e:	2201      	movs	r2, #1
    73a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    73a4:	4e13      	ldr	r6, [pc, #76]	; (73f4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    73a6:	4d14      	ldr	r5, [pc, #80]	; (73f8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    73a8:	9301      	str	r3, [sp, #4]
    73aa:	220f      	movs	r2, #15
    73ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
    73b0:	4912      	ldr	r1, [pc, #72]	; (73fc <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    73b2:	2318      	movs	r3, #24
    73b4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    73b8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    73bc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    73be:	f44f 70b0 	mov.w	r0, #352	; 0x160
    73c2:	fb00 1104 	mla	r1, r0, r4, r1
    73c6:	4b0e      	ldr	r3, [pc, #56]	; (7400 <z_init_cpu+0x68>)
    73c8:	9500      	str	r5, [sp, #0]
    73ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
    73ce:	4630      	mov	r0, r6
    73d0:	f000 f992 	bl	76f8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    73d4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    73d6:	4a0b      	ldr	r2, [pc, #44]	; (7404 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    73d8:	60ee      	str	r6, [r5, #12]
    73da:	f023 0304 	bic.w	r3, r3, #4
    73de:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    73e0:	f44f 6302 	mov.w	r3, #2080	; 0x820
    73e4:	fb04 3303 	mla	r3, r4, r3, r3
    73e8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    73ea:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    73ec:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    73ee:	b006      	add	sp, #24
    73f0:	bd70      	pop	{r4, r5, r6, pc}
    73f2:	bf00      	nop
    73f4:	20004678 	.word	0x20004678
    73f8:	20004edc 	.word	0x20004edc
    73fc:	200145e0 	.word	0x200145e0
    7400:	000079bd 	.word	0x000079bd
    7404:	20013dc0 	.word	0x20013dc0

00007408 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7408:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    740a:	4b2f      	ldr	r3, [pc, #188]	; (74c8 <z_cstart+0xc0>)
    740c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    740e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7412:	4d2e      	ldr	r5, [pc, #184]	; (74cc <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7414:	4e2e      	ldr	r6, [pc, #184]	; (74d0 <z_cstart+0xc8>)
    7416:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7418:	4f2e      	ldr	r7, [pc, #184]	; (74d4 <z_cstart+0xcc>)
    741a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    741e:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7420:	2400      	movs	r4, #0
    7422:	23e0      	movs	r3, #224	; 0xe0
    7424:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7428:	77ec      	strb	r4, [r5, #31]
    742a:	762c      	strb	r4, [r5, #24]
    742c:	766c      	strb	r4, [r5, #25]
    742e:	76ac      	strb	r4, [r5, #26]
    7430:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7434:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7436:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    743a:	626b      	str	r3, [r5, #36]	; 0x24
    743c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7440:	f7fd f980 	bl	4744 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7444:	f7fc fcd8 	bl	3df8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    744c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    744e:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    7450:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7452:	f7fd fb01 	bl	4a58 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7456:	f7fd fa17 	bl	4888 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    745a:	f7fb fea7 	bl	31ac <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    745e:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    7462:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    7464:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    7468:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    746c:	f002 fb56 	bl	9b1c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    7470:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7472:	f003 fceb 	bl	ae4c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7476:	4620      	mov	r0, r4
    7478:	f7ff fea4 	bl	71c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    747c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    747e:	4d16      	ldr	r5, [pc, #88]	; (74d8 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7480:	f7ff fea0 	bl	71c4 <z_sys_init_run_level>
	z_sched_init();
    7484:	f001 fc58 	bl	8d38 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7488:	4b14      	ldr	r3, [pc, #80]	; (74dc <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    748a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    748c:	9305      	str	r3, [sp, #20]
    748e:	2301      	movs	r3, #1
    7490:	4913      	ldr	r1, [pc, #76]	; (74e0 <z_cstart+0xd8>)
    7492:	9400      	str	r4, [sp, #0]
    7494:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7498:	f44f 6280 	mov.w	r2, #1024	; 0x400
    749c:	463b      	mov	r3, r7
    749e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    74a2:	4628      	mov	r0, r5
    74a4:	f000 f928 	bl	76f8 <z_setup_new_thread>
    74a8:	7b6a      	ldrb	r2, [r5, #13]
    74aa:	4606      	mov	r6, r0
    74ac:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    74b0:	4628      	mov	r0, r5
    74b2:	736a      	strb	r2, [r5, #13]
    74b4:	f000 fe38 	bl	8128 <z_ready_thread>
	z_init_cpu(0);
    74b8:	4620      	mov	r0, r4
    74ba:	f7ff ff6d 	bl	7398 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    74be:	463a      	mov	r2, r7
    74c0:	4631      	mov	r1, r6
    74c2:	4628      	mov	r0, r5
    74c4:	f7fc fdfc 	bl	40c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    74c8:	200145e0 	.word	0x200145e0
    74cc:	e000ed00 	.word	0xe000ed00
    74d0:	20004edc 	.word	0x20004edc
    74d4:	0000734d 	.word	0x0000734d
    74d8:	200046f8 	.word	0x200046f8
    74dc:	0000cd8b 	.word	0x0000cd8b
    74e0:	20014740 	.word	0x20014740

000074e4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    74e6:	4c16      	ldr	r4, [pc, #88]	; (7540 <init_mem_slab_module+0x5c>)
    74e8:	4d16      	ldr	r5, [pc, #88]	; (7544 <init_mem_slab_module+0x60>)
    74ea:	4e17      	ldr	r6, [pc, #92]	; (7548 <init_mem_slab_module+0x64>)
    74ec:	42ac      	cmp	r4, r5
    74ee:	d90c      	bls.n	750a <init_mem_slab_module+0x26>
    74f0:	4916      	ldr	r1, [pc, #88]	; (754c <init_mem_slab_module+0x68>)
    74f2:	4817      	ldr	r0, [pc, #92]	; (7550 <init_mem_slab_module+0x6c>)
    74f4:	233d      	movs	r3, #61	; 0x3d
    74f6:	4632      	mov	r2, r6
    74f8:	f002 ffcb 	bl	a492 <assert_print>
    74fc:	4815      	ldr	r0, [pc, #84]	; (7554 <init_mem_slab_module+0x70>)
    74fe:	f002 ffc8 	bl	a492 <assert_print>
    7502:	213d      	movs	r1, #61	; 0x3d
    7504:	4630      	mov	r0, r6
    7506:	f002 ffbd 	bl	a484 <assert_post_action>
    750a:	42ac      	cmp	r4, r5
    750c:	d301      	bcc.n	7512 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    750e:	2000      	movs	r0, #0
	return rc;
}
    7510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7512:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    7516:	ea42 0301 	orr.w	r3, r2, r1
    751a:	f013 0303 	ands.w	r3, r3, #3
    751e:	d10b      	bne.n	7538 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    7520:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    7522:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    7524:	4283      	cmp	r3, r0
    7526:	d101      	bne.n	752c <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7528:	3420      	adds	r4, #32
    752a:	e7df      	b.n	74ec <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    752c:	69a7      	ldr	r7, [r4, #24]
    752e:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    7530:	3301      	adds	r3, #1
		slab->free_list = p;
    7532:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    7534:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    7536:	e7f5      	b.n	7524 <init_mem_slab_module+0x40>
	return rc;
    7538:	f06f 0015 	mvn.w	r0, #21
    753c:	e7e8      	b.n	7510 <init_mem_slab_module+0x2c>
    753e:	bf00      	nop
    7540:	200041c0 	.word	0x200041c0
    7544:	200041c0 	.word	0x200041c0
    7548:	0000cd93 	.word	0x0000cd93
    754c:	0000cdb8 	.word	0x0000cdb8
    7550:	0000b9c2 	.word	0x0000b9c2
    7554:	0000cdd5 	.word	0x0000cdd5

00007558 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    755c:	4604      	mov	r4, r0
    755e:	460e      	mov	r6, r1
    7560:	4690      	mov	r8, r2
    7562:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7564:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7568:	f04f 0320 	mov.w	r3, #32
    756c:	f3ef 8911 	mrs	r9, BASEPRI
    7570:	f383 8812 	msr	BASEPRI_MAX, r3
    7574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7578:	4628      	mov	r0, r5
    757a:	f000 f9f9 	bl	7970 <z_spin_lock_valid>
    757e:	b968      	cbnz	r0, 759c <k_mem_slab_alloc+0x44>
    7580:	4a24      	ldr	r2, [pc, #144]	; (7614 <k_mem_slab_alloc+0xbc>)
    7582:	4925      	ldr	r1, [pc, #148]	; (7618 <k_mem_slab_alloc+0xc0>)
    7584:	4825      	ldr	r0, [pc, #148]	; (761c <k_mem_slab_alloc+0xc4>)
    7586:	238e      	movs	r3, #142	; 0x8e
    7588:	f002 ff83 	bl	a492 <assert_print>
    758c:	4824      	ldr	r0, [pc, #144]	; (7620 <k_mem_slab_alloc+0xc8>)
    758e:	4629      	mov	r1, r5
    7590:	f002 ff7f 	bl	a492 <assert_print>
    7594:	481f      	ldr	r0, [pc, #124]	; (7614 <k_mem_slab_alloc+0xbc>)
    7596:	218e      	movs	r1, #142	; 0x8e
    7598:	f002 ff74 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    759c:	4628      	mov	r0, r5
    759e:	f000 fa05 	bl	79ac <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    75a2:	69a3      	ldr	r3, [r4, #24]
    75a4:	b1eb      	cbz	r3, 75e2 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    75a6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    75a8:	681b      	ldr	r3, [r3, #0]
    75aa:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    75ac:	69e3      	ldr	r3, [r4, #28]
    75ae:	3301      	adds	r3, #1
    75b0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    75b2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75b4:	4628      	mov	r0, r5
    75b6:	f000 f9e9 	bl	798c <z_spin_unlock_valid>
    75ba:	b968      	cbnz	r0, 75d8 <k_mem_slab_alloc+0x80>
    75bc:	4a15      	ldr	r2, [pc, #84]	; (7614 <k_mem_slab_alloc+0xbc>)
    75be:	4919      	ldr	r1, [pc, #100]	; (7624 <k_mem_slab_alloc+0xcc>)
    75c0:	4816      	ldr	r0, [pc, #88]	; (761c <k_mem_slab_alloc+0xc4>)
    75c2:	23b9      	movs	r3, #185	; 0xb9
    75c4:	f002 ff65 	bl	a492 <assert_print>
    75c8:	4817      	ldr	r0, [pc, #92]	; (7628 <k_mem_slab_alloc+0xd0>)
    75ca:	4629      	mov	r1, r5
    75cc:	f002 ff61 	bl	a492 <assert_print>
    75d0:	4810      	ldr	r0, [pc, #64]	; (7614 <k_mem_slab_alloc+0xbc>)
    75d2:	21b9      	movs	r1, #185	; 0xb9
    75d4:	f002 ff56 	bl	a484 <assert_post_action>
	__asm__ volatile(
    75d8:	f389 8811 	msr	BASEPRI, r9
    75dc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    75e0:	e013      	b.n	760a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    75e2:	ea58 0207 	orrs.w	r2, r8, r7
    75e6:	d103      	bne.n	75f0 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    75e8:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    75ea:	f06f 040b 	mvn.w	r4, #11
    75ee:	e7e1      	b.n	75b4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    75f0:	4622      	mov	r2, r4
    75f2:	e9cd 8700 	strd	r8, r7, [sp]
    75f6:	4649      	mov	r1, r9
    75f8:	4628      	mov	r0, r5
    75fa:	f001 f951 	bl	88a0 <z_pend_curr>
		if (result == 0) {
    75fe:	4604      	mov	r4, r0
    7600:	b918      	cbnz	r0, 760a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    7602:	4b0a      	ldr	r3, [pc, #40]	; (762c <k_mem_slab_alloc+0xd4>)
    7604:	689b      	ldr	r3, [r3, #8]
    7606:	695b      	ldr	r3, [r3, #20]
    7608:	6033      	str	r3, [r6, #0]
}
    760a:	4620      	mov	r0, r4
    760c:	b003      	add	sp, #12
    760e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7612:	bf00      	nop
    7614:	0000bb0c 	.word	0x0000bb0c
    7618:	0000bb65 	.word	0x0000bb65
    761c:	0000b9c2 	.word	0x0000b9c2
    7620:	0000bb7a 	.word	0x0000bb7a
    7624:	0000bb39 	.word	0x0000bb39
    7628:	0000bb50 	.word	0x0000bb50
    762c:	20004edc 	.word	0x20004edc

00007630 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7634:	4604      	mov	r4, r0
    7636:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7638:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    763c:	f04f 0320 	mov.w	r3, #32
    7640:	f3ef 8711 	mrs	r7, BASEPRI
    7644:	f383 8812 	msr	BASEPRI_MAX, r3
    7648:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    764c:	4628      	mov	r0, r5
    764e:	f000 f98f 	bl	7970 <z_spin_lock_valid>
    7652:	b968      	cbnz	r0, 7670 <k_mem_slab_free+0x40>
    7654:	4a22      	ldr	r2, [pc, #136]	; (76e0 <k_mem_slab_free+0xb0>)
    7656:	4923      	ldr	r1, [pc, #140]	; (76e4 <k_mem_slab_free+0xb4>)
    7658:	4823      	ldr	r0, [pc, #140]	; (76e8 <k_mem_slab_free+0xb8>)
    765a:	238e      	movs	r3, #142	; 0x8e
    765c:	f002 ff19 	bl	a492 <assert_print>
    7660:	4822      	ldr	r0, [pc, #136]	; (76ec <k_mem_slab_free+0xbc>)
    7662:	4629      	mov	r1, r5
    7664:	f002 ff15 	bl	a492 <assert_print>
    7668:	481d      	ldr	r0, [pc, #116]	; (76e0 <k_mem_slab_free+0xb0>)
    766a:	218e      	movs	r1, #142	; 0x8e
    766c:	f002 ff0a 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7670:	4628      	mov	r0, r5
    7672:	f000 f99b 	bl	79ac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7676:	f8d4 8018 	ldr.w	r8, [r4, #24]
    767a:	f1b8 0f00 	cmp.w	r8, #0
    767e:	d10f      	bne.n	76a0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7680:	4620      	mov	r0, r4
    7682:	f001 fb07 	bl	8c94 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7686:	b158      	cbz	r0, 76a0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7688:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    768a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    768c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7690:	f000 fd4a 	bl	8128 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7694:	4639      	mov	r1, r7
    7696:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    769c:	f000 bdd4 	b.w	8248 <z_reschedule>
	**(char ***) mem = slab->free_list;
    76a0:	6833      	ldr	r3, [r6, #0]
    76a2:	69a2      	ldr	r2, [r4, #24]
    76a4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    76a6:	6833      	ldr	r3, [r6, #0]
    76a8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    76aa:	69e3      	ldr	r3, [r4, #28]
    76ac:	3b01      	subs	r3, #1
    76ae:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76b0:	4628      	mov	r0, r5
    76b2:	f000 f96b 	bl	798c <z_spin_unlock_valid>
    76b6:	b968      	cbnz	r0, 76d4 <k_mem_slab_free+0xa4>
    76b8:	4a09      	ldr	r2, [pc, #36]	; (76e0 <k_mem_slab_free+0xb0>)
    76ba:	490d      	ldr	r1, [pc, #52]	; (76f0 <k_mem_slab_free+0xc0>)
    76bc:	480a      	ldr	r0, [pc, #40]	; (76e8 <k_mem_slab_free+0xb8>)
    76be:	23b9      	movs	r3, #185	; 0xb9
    76c0:	f002 fee7 	bl	a492 <assert_print>
    76c4:	480b      	ldr	r0, [pc, #44]	; (76f4 <k_mem_slab_free+0xc4>)
    76c6:	4629      	mov	r1, r5
    76c8:	f002 fee3 	bl	a492 <assert_print>
    76cc:	4804      	ldr	r0, [pc, #16]	; (76e0 <k_mem_slab_free+0xb0>)
    76ce:	21b9      	movs	r1, #185	; 0xb9
    76d0:	f002 fed8 	bl	a484 <assert_post_action>
	__asm__ volatile(
    76d4:	f387 8811 	msr	BASEPRI, r7
    76d8:	f3bf 8f6f 	isb	sy
}
    76dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76e0:	0000bb0c 	.word	0x0000bb0c
    76e4:	0000bb65 	.word	0x0000bb65
    76e8:	0000b9c2 	.word	0x0000b9c2
    76ec:	0000bb7a 	.word	0x0000bb7a
    76f0:	0000bb39 	.word	0x0000bb39
    76f4:	0000bb50 	.word	0x0000bb50

000076f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    76f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76fc:	b085      	sub	sp, #20
    76fe:	4604      	mov	r4, r0
    7700:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    7704:	f1b8 0f0f 	cmp.w	r8, #15
{
    7708:	460f      	mov	r7, r1
    770a:	4615      	mov	r5, r2
    770c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    770e:	d132      	bne.n	7776 <z_setup_new_thread+0x7e>
    7710:	4b25      	ldr	r3, [pc, #148]	; (77a8 <z_setup_new_thread+0xb0>)
    7712:	4599      	cmp	r9, r3
    7714:	d133      	bne.n	777e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7716:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    771a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    771e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7720:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7722:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    7724:	2304      	movs	r3, #4
    7726:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7728:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    772c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    7730:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    7734:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7736:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    7738:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    773c:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    7740:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    7742:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    7744:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7746:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    774a:	9302      	str	r3, [sp, #8]
    774c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    774e:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7750:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7754:	9300      	str	r3, [sp, #0]
    7756:	4642      	mov	r2, r8
    7758:	464b      	mov	r3, r9
    775a:	4639      	mov	r1, r7
    775c:	4620      	mov	r0, r4
    775e:	f7fc fc7d 	bl	405c <arch_new_thread>
	if (!_current) {
    7762:	4b12      	ldr	r3, [pc, #72]	; (77ac <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    7764:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    7766:	689b      	ldr	r3, [r3, #8]
    7768:	b103      	cbz	r3, 776c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    776a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    776c:	6723      	str	r3, [r4, #112]	; 0x70
}
    776e:	4640      	mov	r0, r8
    7770:	b005      	add	sp, #20
    7772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7776:	f108 0310 	add.w	r3, r8, #16
    777a:	2b1e      	cmp	r3, #30
    777c:	d9cb      	bls.n	7716 <z_setup_new_thread+0x1e>
    777e:	4a0c      	ldr	r2, [pc, #48]	; (77b0 <z_setup_new_thread+0xb8>)
    7780:	490c      	ldr	r1, [pc, #48]	; (77b4 <z_setup_new_thread+0xbc>)
    7782:	480d      	ldr	r0, [pc, #52]	; (77b8 <z_setup_new_thread+0xc0>)
    7784:	f240 13ff 	movw	r3, #511	; 0x1ff
    7788:	f002 fe83 	bl	a492 <assert_print>
    778c:	4641      	mov	r1, r8
    778e:	480b      	ldr	r0, [pc, #44]	; (77bc <z_setup_new_thread+0xc4>)
    7790:	f06f 030f 	mvn.w	r3, #15
    7794:	220e      	movs	r2, #14
    7796:	f002 fe7c 	bl	a492 <assert_print>
    779a:	4805      	ldr	r0, [pc, #20]	; (77b0 <z_setup_new_thread+0xb8>)
    779c:	f240 11ff 	movw	r1, #511	; 0x1ff
    77a0:	f002 fe70 	bl	a484 <assert_post_action>
    77a4:	e7b7      	b.n	7716 <z_setup_new_thread+0x1e>
    77a6:	bf00      	nop
    77a8:	000079bd 	.word	0x000079bd
    77ac:	20004edc 	.word	0x20004edc
    77b0:	0000cdf4 	.word	0x0000cdf4
    77b4:	0000ce17 	.word	0x0000ce17
    77b8:	0000b9c2 	.word	0x0000b9c2
    77bc:	0000ce97 	.word	0x0000ce97

000077c0 <z_impl_k_thread_create>:
{
    77c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    77c4:	b087      	sub	sp, #28
    77c6:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    77ca:	4604      	mov	r4, r0
    77cc:	460f      	mov	r7, r1
    77ce:	4690      	mov	r8, r2
    77d0:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    77d2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    77d6:	b173      	cbz	r3, 77f6 <z_impl_k_thread_create+0x36>
    77d8:	491c      	ldr	r1, [pc, #112]	; (784c <z_impl_k_thread_create+0x8c>)
    77da:	4a1d      	ldr	r2, [pc, #116]	; (7850 <z_impl_k_thread_create+0x90>)
    77dc:	481d      	ldr	r0, [pc, #116]	; (7854 <z_impl_k_thread_create+0x94>)
    77de:	f240 236e 	movw	r3, #622	; 0x26e
    77e2:	f002 fe56 	bl	a492 <assert_print>
    77e6:	481c      	ldr	r0, [pc, #112]	; (7858 <z_impl_k_thread_create+0x98>)
    77e8:	f002 fe53 	bl	a492 <assert_print>
    77ec:	4818      	ldr	r0, [pc, #96]	; (7850 <z_impl_k_thread_create+0x90>)
    77ee:	f240 216e 	movw	r1, #622	; 0x26e
    77f2:	f002 fe47 	bl	a484 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    77f6:	2300      	movs	r3, #0
    77f8:	9305      	str	r3, [sp, #20]
    77fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77fc:	9304      	str	r3, [sp, #16]
    77fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7800:	9303      	str	r3, [sp, #12]
    7802:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7804:	9302      	str	r3, [sp, #8]
    7806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7808:	9301      	str	r3, [sp, #4]
    780a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    780c:	9300      	str	r3, [sp, #0]
    780e:	4642      	mov	r2, r8
    7810:	464b      	mov	r3, r9
    7812:	4639      	mov	r1, r7
    7814:	4620      	mov	r0, r4
    7816:	f7ff ff6f 	bl	76f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    781a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    781e:	bf08      	it	eq
    7820:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7824:	d005      	beq.n	7832 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7826:	ea55 0306 	orrs.w	r3, r5, r6
    782a:	d106      	bne.n	783a <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    782c:	4620      	mov	r0, r4
    782e:	f000 fd4f 	bl	82d0 <z_sched_start>
}
    7832:	4620      	mov	r0, r4
    7834:	b007      	add	sp, #28
    7836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    783a:	4908      	ldr	r1, [pc, #32]	; (785c <z_impl_k_thread_create+0x9c>)
    783c:	4632      	mov	r2, r6
    783e:	462b      	mov	r3, r5
    7840:	f104 0018 	add.w	r0, r4, #24
    7844:	f001 fd3c 	bl	92c0 <z_add_timeout>
    7848:	e7f3      	b.n	7832 <z_impl_k_thread_create+0x72>
    784a:	bf00      	nop
    784c:	0000cec8 	.word	0x0000cec8
    7850:	0000cdf4 	.word	0x0000cdf4
    7854:	0000b9c2 	.word	0x0000b9c2
    7858:	0000ceda 	.word	0x0000ceda
    785c:	00008b45 	.word	0x00008b45

00007860 <z_init_static_threads>:
{
    7860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7864:	4c3b      	ldr	r4, [pc, #236]	; (7954 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7866:	4d3c      	ldr	r5, [pc, #240]	; (7958 <z_init_static_threads+0xf8>)
    7868:	4f3c      	ldr	r7, [pc, #240]	; (795c <z_init_static_threads+0xfc>)
{
    786a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    786c:	42ac      	cmp	r4, r5
    786e:	4626      	mov	r6, r4
    7870:	d90e      	bls.n	7890 <z_init_static_threads+0x30>
    7872:	493b      	ldr	r1, [pc, #236]	; (7960 <z_init_static_threads+0x100>)
    7874:	483b      	ldr	r0, [pc, #236]	; (7964 <z_init_static_threads+0x104>)
    7876:	f240 23d5 	movw	r3, #725	; 0x2d5
    787a:	463a      	mov	r2, r7
    787c:	f002 fe09 	bl	a492 <assert_print>
    7880:	4839      	ldr	r0, [pc, #228]	; (7968 <z_init_static_threads+0x108>)
    7882:	f002 fe06 	bl	a492 <assert_print>
    7886:	f240 21d5 	movw	r1, #725	; 0x2d5
    788a:	4638      	mov	r0, r7
    788c:	f002 fdfa 	bl	a484 <assert_post_action>
    7890:	42ae      	cmp	r6, r5
    7892:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7896:	d31f      	bcc.n	78d8 <z_init_static_threads+0x78>
	k_sched_lock();
    7898:	f000 fd6e 	bl	8378 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    789c:	4c2d      	ldr	r4, [pc, #180]	; (7954 <z_init_static_threads+0xf4>)
    789e:	4e2f      	ldr	r6, [pc, #188]	; (795c <z_init_static_threads+0xfc>)
    78a0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 7960 <z_init_static_threads+0x100>
    78a4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7964 <z_init_static_threads+0x104>
    78a8:	42ac      	cmp	r4, r5
    78aa:	d90e      	bls.n	78ca <z_init_static_threads+0x6a>
    78ac:	4641      	mov	r1, r8
    78ae:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    78b2:	4632      	mov	r2, r6
    78b4:	4648      	mov	r0, r9
    78b6:	f002 fdec 	bl	a492 <assert_print>
    78ba:	482b      	ldr	r0, [pc, #172]	; (7968 <z_init_static_threads+0x108>)
    78bc:	f002 fde9 	bl	a492 <assert_print>
    78c0:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    78c4:	4630      	mov	r0, r6
    78c6:	f002 fddd 	bl	a484 <assert_post_action>
    78ca:	42ac      	cmp	r4, r5
    78cc:	d320      	bcc.n	7910 <z_init_static_threads+0xb0>
}
    78ce:	b007      	add	sp, #28
    78d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    78d4:	f000 bdc4 	b.w	8460 <k_sched_unlock>
		z_setup_new_thread(
    78d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    78dc:	9305      	str	r3, [sp, #20]
    78de:	f854 3c10 	ldr.w	r3, [r4, #-16]
    78e2:	9304      	str	r3, [sp, #16]
    78e4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    78e8:	9303      	str	r3, [sp, #12]
    78ea:	f854 3c18 	ldr.w	r3, [r4, #-24]
    78ee:	9302      	str	r3, [sp, #8]
    78f0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    78f4:	9301      	str	r3, [sp, #4]
    78f6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    78fa:	9300      	str	r3, [sp, #0]
    78fc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7900:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7904:	f7ff fef8 	bl	76f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7908:	f854 3c30 	ldr.w	r3, [r4, #-48]
    790c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    790e:	e7ad      	b.n	786c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7910:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7912:	1c5a      	adds	r2, r3, #1
    7914:	d00f      	beq.n	7936 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    7916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    791a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    791e:	f240 30e7 	movw	r0, #999	; 0x3e7
    7922:	2100      	movs	r1, #0
    7924:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7928:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    792c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    792e:	d104      	bne.n	793a <z_init_static_threads+0xda>
	z_sched_start(thread);
    7930:	4638      	mov	r0, r7
    7932:	f000 fccd 	bl	82d0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7936:	3430      	adds	r4, #48	; 0x30
    7938:	e7b6      	b.n	78a8 <z_init_static_threads+0x48>
    793a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    793e:	2300      	movs	r3, #0
    7940:	f7f8 fffc 	bl	93c <__aeabi_uldivmod>
    7944:	4602      	mov	r2, r0
    7946:	460b      	mov	r3, r1
    7948:	f107 0018 	add.w	r0, r7, #24
    794c:	4907      	ldr	r1, [pc, #28]	; (796c <z_init_static_threads+0x10c>)
    794e:	f001 fcb7 	bl	92c0 <z_add_timeout>
    7952:	e7f0      	b.n	7936 <z_init_static_threads+0xd6>
    7954:	200041c0 	.word	0x200041c0
    7958:	200041c0 	.word	0x200041c0
    795c:	0000cdf4 	.word	0x0000cdf4
    7960:	0000ceff 	.word	0x0000ceff
    7964:	0000b9c2 	.word	0x0000b9c2
    7968:	0000cdd5 	.word	0x0000cdd5
    796c:	00008b45 	.word	0x00008b45

00007970 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7970:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7972:	b138      	cbz	r0, 7984 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7974:	4b04      	ldr	r3, [pc, #16]	; (7988 <z_spin_lock_valid+0x18>)
    7976:	7d1b      	ldrb	r3, [r3, #20]
    7978:	f000 0003 	and.w	r0, r0, #3
    797c:	1ac0      	subs	r0, r0, r3
    797e:	bf18      	it	ne
    7980:	2001      	movne	r0, #1
    7982:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7984:	2001      	movs	r0, #1
}
    7986:	4770      	bx	lr
    7988:	20004edc 	.word	0x20004edc

0000798c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    798c:	4a06      	ldr	r2, [pc, #24]	; (79a8 <z_spin_unlock_valid+0x1c>)
    798e:	7d11      	ldrb	r1, [r2, #20]
    7990:	6892      	ldr	r2, [r2, #8]
    7992:	430a      	orrs	r2, r1
    7994:	6801      	ldr	r1, [r0, #0]
{
    7996:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7998:	4291      	cmp	r1, r2
    799a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    799e:	bf04      	itt	eq
    79a0:	6018      	streq	r0, [r3, #0]
	return true;
    79a2:	2001      	moveq	r0, #1
}
    79a4:	4770      	bx	lr
    79a6:	bf00      	nop
    79a8:	20004edc 	.word	0x20004edc

000079ac <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    79ac:	4b02      	ldr	r3, [pc, #8]	; (79b8 <z_spin_lock_set_owner+0xc>)
    79ae:	7d1a      	ldrb	r2, [r3, #20]
    79b0:	689b      	ldr	r3, [r3, #8]
    79b2:	4313      	orrs	r3, r2
    79b4:	6003      	str	r3, [r0, #0]
}
    79b6:	4770      	bx	lr
    79b8:	20004edc 	.word	0x20004edc

000079bc <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    79bc:	4c13      	ldr	r4, [pc, #76]	; (7a0c <idle+0x50>)
{
    79be:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    79c0:	68a3      	ldr	r3, [r4, #8]
    79c2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    79c6:	2b00      	cmp	r3, #0
    79c8:	da09      	bge.n	79de <idle+0x22>
    79ca:	4911      	ldr	r1, [pc, #68]	; (7a10 <idle+0x54>)
    79cc:	4811      	ldr	r0, [pc, #68]	; (7a14 <idle+0x58>)
    79ce:	4a12      	ldr	r2, [pc, #72]	; (7a18 <idle+0x5c>)
    79d0:	2327      	movs	r3, #39	; 0x27
    79d2:	f002 fd5e 	bl	a492 <assert_print>
    79d6:	4810      	ldr	r0, [pc, #64]	; (7a18 <idle+0x5c>)
    79d8:	2127      	movs	r1, #39	; 0x27
    79da:	f002 fd53 	bl	a484 <assert_post_action>
	return !z_sys_post_kernel;
    79de:	4d0f      	ldr	r5, [pc, #60]	; (7a1c <idle+0x60>)
	__asm__ volatile(
    79e0:	f04f 0220 	mov.w	r2, #32
    79e4:	f3ef 8311 	mrs	r3, BASEPRI
    79e8:	f382 8812 	msr	BASEPRI_MAX, r2
    79ec:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    79f0:	f001 fd7e 	bl	94f0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    79f4:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    79f6:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    79f8:	b913      	cbnz	r3, 7a00 <idle+0x44>
	arch_cpu_idle();
    79fa:	f7fc fa03 	bl	3e04 <arch_cpu_idle>
}
    79fe:	e7ef      	b.n	79e0 <idle+0x24>
    7a00:	f7fc f85c 	bl	3abc <pm_system_suspend>
    7a04:	2800      	cmp	r0, #0
    7a06:	d1eb      	bne.n	79e0 <idle+0x24>
    7a08:	e7f7      	b.n	79fa <idle+0x3e>
    7a0a:	bf00      	nop
    7a0c:	20004edc 	.word	0x20004edc
    7a10:	0000cf4d 	.word	0x0000cf4d
    7a14:	0000b9c2 	.word	0x0000b9c2
    7a18:	0000cf2c 	.word	0x0000cf2c
    7a1c:	2001151d 	.word	0x2001151d

00007a20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7a24:	4604      	mov	r4, r0
    7a26:	4617      	mov	r7, r2
    7a28:	461e      	mov	r6, r3
    7a2a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7a2e:	b163      	cbz	r3, 7a4a <z_impl_k_mutex_lock+0x2a>
    7a30:	496d      	ldr	r1, [pc, #436]	; (7be8 <z_impl_k_mutex_lock+0x1c8>)
    7a32:	4a6e      	ldr	r2, [pc, #440]	; (7bec <z_impl_k_mutex_lock+0x1cc>)
    7a34:	486e      	ldr	r0, [pc, #440]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7a36:	2365      	movs	r3, #101	; 0x65
    7a38:	f002 fd2b 	bl	a492 <assert_print>
    7a3c:	486d      	ldr	r0, [pc, #436]	; (7bf4 <z_impl_k_mutex_lock+0x1d4>)
    7a3e:	f002 fd28 	bl	a492 <assert_print>
    7a42:	486a      	ldr	r0, [pc, #424]	; (7bec <z_impl_k_mutex_lock+0x1cc>)
    7a44:	2165      	movs	r1, #101	; 0x65
    7a46:	f002 fd1d 	bl	a484 <assert_post_action>
    7a4a:	f04f 0320 	mov.w	r3, #32
    7a4e:	f3ef 8811 	mrs	r8, BASEPRI
    7a52:	f383 8812 	msr	BASEPRI_MAX, r3
    7a56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a5a:	4867      	ldr	r0, [pc, #412]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7a5c:	f7ff ff88 	bl	7970 <z_spin_lock_valid>
    7a60:	b968      	cbnz	r0, 7a7e <z_impl_k_mutex_lock+0x5e>
    7a62:	4a66      	ldr	r2, [pc, #408]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7a64:	4966      	ldr	r1, [pc, #408]	; (7c00 <z_impl_k_mutex_lock+0x1e0>)
    7a66:	4862      	ldr	r0, [pc, #392]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7a68:	238e      	movs	r3, #142	; 0x8e
    7a6a:	f002 fd12 	bl	a492 <assert_print>
    7a6e:	4962      	ldr	r1, [pc, #392]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7a70:	4864      	ldr	r0, [pc, #400]	; (7c04 <z_impl_k_mutex_lock+0x1e4>)
    7a72:	f002 fd0e 	bl	a492 <assert_print>
    7a76:	4861      	ldr	r0, [pc, #388]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7a78:	218e      	movs	r1, #142	; 0x8e
    7a7a:	f002 fd03 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a7e:	485e      	ldr	r0, [pc, #376]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7a80:	f7ff ff94 	bl	79ac <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7a84:	68e3      	ldr	r3, [r4, #12]
    7a86:	4a60      	ldr	r2, [pc, #384]	; (7c08 <z_impl_k_mutex_lock+0x1e8>)
    7a88:	b30b      	cbz	r3, 7ace <z_impl_k_mutex_lock+0xae>
    7a8a:	68a0      	ldr	r0, [r4, #8]
    7a8c:	6891      	ldr	r1, [r2, #8]
    7a8e:	4288      	cmp	r0, r1
    7a90:	d03d      	beq.n	7b0e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7a92:	ea57 0306 	orrs.w	r3, r7, r6
    7a96:	d13c      	bne.n	7b12 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a98:	4857      	ldr	r0, [pc, #348]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7a9a:	f7ff ff77 	bl	798c <z_spin_unlock_valid>
    7a9e:	b968      	cbnz	r0, 7abc <z_impl_k_mutex_lock+0x9c>
    7aa0:	4a56      	ldr	r2, [pc, #344]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7aa2:	495a      	ldr	r1, [pc, #360]	; (7c0c <z_impl_k_mutex_lock+0x1ec>)
    7aa4:	4852      	ldr	r0, [pc, #328]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7aa6:	23b9      	movs	r3, #185	; 0xb9
    7aa8:	f002 fcf3 	bl	a492 <assert_print>
    7aac:	4952      	ldr	r1, [pc, #328]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7aae:	4858      	ldr	r0, [pc, #352]	; (7c10 <z_impl_k_mutex_lock+0x1f0>)
    7ab0:	f002 fcef 	bl	a492 <assert_print>
    7ab4:	4851      	ldr	r0, [pc, #324]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7ab6:	21b9      	movs	r1, #185	; 0xb9
    7ab8:	f002 fce4 	bl	a484 <assert_post_action>
	__asm__ volatile(
    7abc:	f388 8811 	msr	BASEPRI, r8
    7ac0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7ac4:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7ac8:	b002      	add	sp, #8
    7aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7ace:	6891      	ldr	r1, [r2, #8]
    7ad0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7ad4:	4848      	ldr	r0, [pc, #288]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7ad6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7ad8:	3301      	adds	r3, #1
    7ada:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7adc:	6893      	ldr	r3, [r2, #8]
    7ade:	60a3      	str	r3, [r4, #8]
    7ae0:	f7ff ff54 	bl	798c <z_spin_unlock_valid>
    7ae4:	b968      	cbnz	r0, 7b02 <z_impl_k_mutex_lock+0xe2>
    7ae6:	4a45      	ldr	r2, [pc, #276]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7ae8:	4948      	ldr	r1, [pc, #288]	; (7c0c <z_impl_k_mutex_lock+0x1ec>)
    7aea:	4841      	ldr	r0, [pc, #260]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7aec:	23b9      	movs	r3, #185	; 0xb9
    7aee:	f002 fcd0 	bl	a492 <assert_print>
    7af2:	4941      	ldr	r1, [pc, #260]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7af4:	4846      	ldr	r0, [pc, #280]	; (7c10 <z_impl_k_mutex_lock+0x1f0>)
    7af6:	f002 fccc 	bl	a492 <assert_print>
    7afa:	4840      	ldr	r0, [pc, #256]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7afc:	21b9      	movs	r1, #185	; 0xb9
    7afe:	f002 fcc1 	bl	a484 <assert_post_action>
    7b02:	f388 8811 	msr	BASEPRI, r8
    7b06:	f3bf 8f6f 	isb	sy
		return 0;
    7b0a:	2000      	movs	r0, #0
    7b0c:	e7dc      	b.n	7ac8 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    7b0e:	6921      	ldr	r1, [r4, #16]
    7b10:	e7e0      	b.n	7ad4 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7b12:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7b16:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7b1a:	4299      	cmp	r1, r3
    7b1c:	bfa8      	it	ge
    7b1e:	4619      	movge	r1, r3
    7b20:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7b24:	4291      	cmp	r1, r2
    7b26:	bfb8      	it	lt
    7b28:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7b2a:	4299      	cmp	r1, r3
    7b2c:	da53      	bge.n	7bd6 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    7b2e:	f003 f9d7 	bl	aee0 <adjust_owner_prio.isra.0>
    7b32:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7b34:	e9cd 7600 	strd	r7, r6, [sp]
    7b38:	482f      	ldr	r0, [pc, #188]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7b3a:	4622      	mov	r2, r4
    7b3c:	4641      	mov	r1, r8
    7b3e:	f000 feaf 	bl	88a0 <z_pend_curr>
	if (got_mutex == 0) {
    7b42:	2800      	cmp	r0, #0
    7b44:	d0e1      	beq.n	7b0a <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    7b46:	f04f 0320 	mov.w	r3, #32
    7b4a:	f3ef 8611 	mrs	r6, BASEPRI
    7b4e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b56:	4828      	ldr	r0, [pc, #160]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7b58:	f7ff ff0a 	bl	7970 <z_spin_lock_valid>
    7b5c:	b968      	cbnz	r0, 7b7a <z_impl_k_mutex_lock+0x15a>
    7b5e:	4a27      	ldr	r2, [pc, #156]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7b60:	4927      	ldr	r1, [pc, #156]	; (7c00 <z_impl_k_mutex_lock+0x1e0>)
    7b62:	4823      	ldr	r0, [pc, #140]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7b64:	238e      	movs	r3, #142	; 0x8e
    7b66:	f002 fc94 	bl	a492 <assert_print>
    7b6a:	4923      	ldr	r1, [pc, #140]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7b6c:	4825      	ldr	r0, [pc, #148]	; (7c04 <z_impl_k_mutex_lock+0x1e4>)
    7b6e:	f002 fc90 	bl	a492 <assert_print>
    7b72:	4822      	ldr	r0, [pc, #136]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7b74:	218e      	movs	r1, #142	; 0x8e
    7b76:	f002 fc85 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b7a:	481f      	ldr	r0, [pc, #124]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7b7c:	f7ff ff16 	bl	79ac <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7b80:	6823      	ldr	r3, [r4, #0]
    7b82:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b84:	42a3      	cmp	r3, r4
    7b86:	d00a      	beq.n	7b9e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7b88:	b14b      	cbz	r3, 7b9e <z_impl_k_mutex_lock+0x17e>
    7b8a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7b8e:	4299      	cmp	r1, r3
    7b90:	bfa8      	it	ge
    7b92:	4619      	movge	r1, r3
    7b94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7b98:	4299      	cmp	r1, r3
    7b9a:	bfb8      	it	lt
    7b9c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7b9e:	68a0      	ldr	r0, [r4, #8]
    7ba0:	f003 f99e 	bl	aee0 <adjust_owner_prio.isra.0>
    7ba4:	b9c8      	cbnz	r0, 7bda <z_impl_k_mutex_lock+0x1ba>
    7ba6:	b9c5      	cbnz	r5, 7bda <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ba8:	4813      	ldr	r0, [pc, #76]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7baa:	f7ff feef 	bl	798c <z_spin_unlock_valid>
    7bae:	b968      	cbnz	r0, 7bcc <z_impl_k_mutex_lock+0x1ac>
    7bb0:	4a12      	ldr	r2, [pc, #72]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7bb2:	4916      	ldr	r1, [pc, #88]	; (7c0c <z_impl_k_mutex_lock+0x1ec>)
    7bb4:	480e      	ldr	r0, [pc, #56]	; (7bf0 <z_impl_k_mutex_lock+0x1d0>)
    7bb6:	23b9      	movs	r3, #185	; 0xb9
    7bb8:	f002 fc6b 	bl	a492 <assert_print>
    7bbc:	490e      	ldr	r1, [pc, #56]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7bbe:	4814      	ldr	r0, [pc, #80]	; (7c10 <z_impl_k_mutex_lock+0x1f0>)
    7bc0:	f002 fc67 	bl	a492 <assert_print>
    7bc4:	480d      	ldr	r0, [pc, #52]	; (7bfc <z_impl_k_mutex_lock+0x1dc>)
    7bc6:	21b9      	movs	r1, #185	; 0xb9
    7bc8:	f002 fc5c 	bl	a484 <assert_post_action>
	__asm__ volatile(
    7bcc:	f386 8811 	msr	BASEPRI, r6
    7bd0:	f3bf 8f6f 	isb	sy
    7bd4:	e005      	b.n	7be2 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    7bd6:	2500      	movs	r5, #0
    7bd8:	e7ac      	b.n	7b34 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    7bda:	4807      	ldr	r0, [pc, #28]	; (7bf8 <z_impl_k_mutex_lock+0x1d8>)
    7bdc:	4631      	mov	r1, r6
    7bde:	f000 fb33 	bl	8248 <z_reschedule>
	return -EAGAIN;
    7be2:	f06f 000a 	mvn.w	r0, #10
    7be6:	e76f      	b.n	7ac8 <z_impl_k_mutex_lock+0xa8>
    7be8:	0000cec8 	.word	0x0000cec8
    7bec:	0000cf75 	.word	0x0000cf75
    7bf0:	0000b9c2 	.word	0x0000b9c2
    7bf4:	0000cf97 	.word	0x0000cf97
    7bf8:	20004f04 	.word	0x20004f04
    7bfc:	0000bb0c 	.word	0x0000bb0c
    7c00:	0000bb65 	.word	0x0000bb65
    7c04:	0000bb7a 	.word	0x0000bb7a
    7c08:	20004edc 	.word	0x20004edc
    7c0c:	0000bb39 	.word	0x0000bb39
    7c10:	0000bb50 	.word	0x0000bb50

00007c14 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7c14:	b538      	push	{r3, r4, r5, lr}
    7c16:	4604      	mov	r4, r0
    7c18:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7c1c:	b163      	cbz	r3, 7c38 <z_impl_k_mutex_unlock+0x24>
    7c1e:	4950      	ldr	r1, [pc, #320]	; (7d60 <z_impl_k_mutex_unlock+0x14c>)
    7c20:	4a50      	ldr	r2, [pc, #320]	; (7d64 <z_impl_k_mutex_unlock+0x150>)
    7c22:	4851      	ldr	r0, [pc, #324]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7c24:	23c7      	movs	r3, #199	; 0xc7
    7c26:	f002 fc34 	bl	a492 <assert_print>
    7c2a:	4850      	ldr	r0, [pc, #320]	; (7d6c <z_impl_k_mutex_unlock+0x158>)
    7c2c:	f002 fc31 	bl	a492 <assert_print>
    7c30:	484c      	ldr	r0, [pc, #304]	; (7d64 <z_impl_k_mutex_unlock+0x150>)
    7c32:	21c7      	movs	r1, #199	; 0xc7
    7c34:	f002 fc26 	bl	a484 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7c38:	68a3      	ldr	r3, [r4, #8]
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	f000 8089 	beq.w	7d52 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7c40:	4d4b      	ldr	r5, [pc, #300]	; (7d70 <z_impl_k_mutex_unlock+0x15c>)
    7c42:	68aa      	ldr	r2, [r5, #8]
    7c44:	4293      	cmp	r3, r2
    7c46:	f040 8087 	bne.w	7d58 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7c4a:	68e3      	ldr	r3, [r4, #12]
    7c4c:	b94b      	cbnz	r3, 7c62 <z_impl_k_mutex_unlock+0x4e>
    7c4e:	4949      	ldr	r1, [pc, #292]	; (7d74 <z_impl_k_mutex_unlock+0x160>)
    7c50:	4845      	ldr	r0, [pc, #276]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7c52:	4a44      	ldr	r2, [pc, #272]	; (7d64 <z_impl_k_mutex_unlock+0x150>)
    7c54:	23df      	movs	r3, #223	; 0xdf
    7c56:	f002 fc1c 	bl	a492 <assert_print>
    7c5a:	4842      	ldr	r0, [pc, #264]	; (7d64 <z_impl_k_mutex_unlock+0x150>)
    7c5c:	21df      	movs	r1, #223	; 0xdf
    7c5e:	f002 fc11 	bl	a484 <assert_post_action>
    7c62:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7c66:	b163      	cbz	r3, 7c82 <z_impl_k_mutex_unlock+0x6e>
    7c68:	493d      	ldr	r1, [pc, #244]	; (7d60 <z_impl_k_mutex_unlock+0x14c>)
    7c6a:	4a43      	ldr	r2, [pc, #268]	; (7d78 <z_impl_k_mutex_unlock+0x164>)
    7c6c:	483e      	ldr	r0, [pc, #248]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7c6e:	23fd      	movs	r3, #253	; 0xfd
    7c70:	f002 fc0f 	bl	a492 <assert_print>
    7c74:	4841      	ldr	r0, [pc, #260]	; (7d7c <z_impl_k_mutex_unlock+0x168>)
    7c76:	f002 fc0c 	bl	a492 <assert_print>
    7c7a:	483f      	ldr	r0, [pc, #252]	; (7d78 <z_impl_k_mutex_unlock+0x164>)
    7c7c:	21fd      	movs	r1, #253	; 0xfd
    7c7e:	f002 fc01 	bl	a484 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7c82:	68ab      	ldr	r3, [r5, #8]
    7c84:	7bdb      	ldrb	r3, [r3, #15]
    7c86:	2b01      	cmp	r3, #1
    7c88:	d10c      	bne.n	7ca4 <z_impl_k_mutex_unlock+0x90>
    7c8a:	493d      	ldr	r1, [pc, #244]	; (7d80 <z_impl_k_mutex_unlock+0x16c>)
    7c8c:	4a3a      	ldr	r2, [pc, #232]	; (7d78 <z_impl_k_mutex_unlock+0x164>)
    7c8e:	4836      	ldr	r0, [pc, #216]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7c90:	23fe      	movs	r3, #254	; 0xfe
    7c92:	f002 fbfe 	bl	a492 <assert_print>
    7c96:	4839      	ldr	r0, [pc, #228]	; (7d7c <z_impl_k_mutex_unlock+0x168>)
    7c98:	f002 fbfb 	bl	a492 <assert_print>
    7c9c:	4836      	ldr	r0, [pc, #216]	; (7d78 <z_impl_k_mutex_unlock+0x164>)
    7c9e:	21fe      	movs	r1, #254	; 0xfe
    7ca0:	f002 fbf0 	bl	a484 <assert_post_action>

	--_current->base.sched_locked;
    7ca4:	68aa      	ldr	r2, [r5, #8]
    7ca6:	7bd3      	ldrb	r3, [r2, #15]
    7ca8:	3b01      	subs	r3, #1
    7caa:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7cac:	68e3      	ldr	r3, [r4, #12]
    7cae:	2b01      	cmp	r3, #1
    7cb0:	d905      	bls.n	7cbe <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    7cb2:	3b01      	subs	r3, #1
    7cb4:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7cb6:	f000 fbd3 	bl	8460 <k_sched_unlock>

	return 0;
    7cba:	2000      	movs	r0, #0
}
    7cbc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7cbe:	f04f 0320 	mov.w	r3, #32
    7cc2:	f3ef 8511 	mrs	r5, BASEPRI
    7cc6:	f383 8812 	msr	BASEPRI_MAX, r3
    7cca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7cce:	482d      	ldr	r0, [pc, #180]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7cd0:	f7ff fe4e 	bl	7970 <z_spin_lock_valid>
    7cd4:	b968      	cbnz	r0, 7cf2 <z_impl_k_mutex_unlock+0xde>
    7cd6:	4a2c      	ldr	r2, [pc, #176]	; (7d88 <z_impl_k_mutex_unlock+0x174>)
    7cd8:	492c      	ldr	r1, [pc, #176]	; (7d8c <z_impl_k_mutex_unlock+0x178>)
    7cda:	4823      	ldr	r0, [pc, #140]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7cdc:	238e      	movs	r3, #142	; 0x8e
    7cde:	f002 fbd8 	bl	a492 <assert_print>
    7ce2:	4928      	ldr	r1, [pc, #160]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7ce4:	482a      	ldr	r0, [pc, #168]	; (7d90 <z_impl_k_mutex_unlock+0x17c>)
    7ce6:	f002 fbd4 	bl	a492 <assert_print>
    7cea:	4827      	ldr	r0, [pc, #156]	; (7d88 <z_impl_k_mutex_unlock+0x174>)
    7cec:	218e      	movs	r1, #142	; 0x8e
    7cee:	f002 fbc9 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7cf2:	4824      	ldr	r0, [pc, #144]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7cf4:	f7ff fe5a 	bl	79ac <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7cf8:	6921      	ldr	r1, [r4, #16]
    7cfa:	68a0      	ldr	r0, [r4, #8]
    7cfc:	f003 f8f0 	bl	aee0 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7d00:	4620      	mov	r0, r4
    7d02:	f000 ffc7 	bl	8c94 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7d06:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7d08:	b158      	cbz	r0, 7d22 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    7d0a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7d0e:	6122      	str	r2, [r4, #16]
    7d10:	2200      	movs	r2, #0
    7d12:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7d14:	f000 fa08 	bl	8128 <z_ready_thread>
		z_reschedule(&lock, key);
    7d18:	481a      	ldr	r0, [pc, #104]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7d1a:	4629      	mov	r1, r5
    7d1c:	f000 fa94 	bl	8248 <z_reschedule>
    7d20:	e7c9      	b.n	7cb6 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    7d22:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d24:	4817      	ldr	r0, [pc, #92]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7d26:	f7ff fe31 	bl	798c <z_spin_unlock_valid>
    7d2a:	b968      	cbnz	r0, 7d48 <z_impl_k_mutex_unlock+0x134>
    7d2c:	4a16      	ldr	r2, [pc, #88]	; (7d88 <z_impl_k_mutex_unlock+0x174>)
    7d2e:	4919      	ldr	r1, [pc, #100]	; (7d94 <z_impl_k_mutex_unlock+0x180>)
    7d30:	480d      	ldr	r0, [pc, #52]	; (7d68 <z_impl_k_mutex_unlock+0x154>)
    7d32:	23b9      	movs	r3, #185	; 0xb9
    7d34:	f002 fbad 	bl	a492 <assert_print>
    7d38:	4912      	ldr	r1, [pc, #72]	; (7d84 <z_impl_k_mutex_unlock+0x170>)
    7d3a:	4817      	ldr	r0, [pc, #92]	; (7d98 <z_impl_k_mutex_unlock+0x184>)
    7d3c:	f002 fba9 	bl	a492 <assert_print>
    7d40:	4811      	ldr	r0, [pc, #68]	; (7d88 <z_impl_k_mutex_unlock+0x174>)
    7d42:	21b9      	movs	r1, #185	; 0xb9
    7d44:	f002 fb9e 	bl	a484 <assert_post_action>
	__asm__ volatile(
    7d48:	f385 8811 	msr	BASEPRI, r5
    7d4c:	f3bf 8f6f 	isb	sy
    7d50:	e7b1      	b.n	7cb6 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    7d52:	f06f 0015 	mvn.w	r0, #21
    7d56:	e7b1      	b.n	7cbc <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    7d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7d5c:	e7ae      	b.n	7cbc <z_impl_k_mutex_unlock+0xa8>
    7d5e:	bf00      	nop
    7d60:	0000cec8 	.word	0x0000cec8
    7d64:	0000cf75 	.word	0x0000cf75
    7d68:	0000b9c2 	.word	0x0000b9c2
    7d6c:	0000cf97 	.word	0x0000cf97
    7d70:	20004edc 	.word	0x20004edc
    7d74:	0000cfbc 	.word	0x0000cfbc
    7d78:	0000cfd3 	.word	0x0000cfd3
    7d7c:	0000cffe 	.word	0x0000cffe
    7d80:	0000d001 	.word	0x0000d001
    7d84:	20004f04 	.word	0x20004f04
    7d88:	0000bb0c 	.word	0x0000bb0c
    7d8c:	0000bb65 	.word	0x0000bb65
    7d90:	0000bb7a 	.word	0x0000bb7a
    7d94:	0000bb39 	.word	0x0000bb39
    7d98:	0000bb50 	.word	0x0000bb50

00007d9c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7d9c:	b538      	push	{r3, r4, r5, lr}
    7d9e:	4604      	mov	r4, r0
	__asm__ volatile(
    7da0:	f04f 0320 	mov.w	r3, #32
    7da4:	f3ef 8511 	mrs	r5, BASEPRI
    7da8:	f383 8812 	msr	BASEPRI_MAX, r3
    7dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7db0:	4814      	ldr	r0, [pc, #80]	; (7e04 <z_impl_k_sem_give+0x68>)
    7db2:	f7ff fddd 	bl	7970 <z_spin_lock_valid>
    7db6:	b968      	cbnz	r0, 7dd4 <z_impl_k_sem_give+0x38>
    7db8:	4a13      	ldr	r2, [pc, #76]	; (7e08 <z_impl_k_sem_give+0x6c>)
    7dba:	4914      	ldr	r1, [pc, #80]	; (7e0c <z_impl_k_sem_give+0x70>)
    7dbc:	4814      	ldr	r0, [pc, #80]	; (7e10 <z_impl_k_sem_give+0x74>)
    7dbe:	238e      	movs	r3, #142	; 0x8e
    7dc0:	f002 fb67 	bl	a492 <assert_print>
    7dc4:	490f      	ldr	r1, [pc, #60]	; (7e04 <z_impl_k_sem_give+0x68>)
    7dc6:	4813      	ldr	r0, [pc, #76]	; (7e14 <z_impl_k_sem_give+0x78>)
    7dc8:	f002 fb63 	bl	a492 <assert_print>
    7dcc:	480e      	ldr	r0, [pc, #56]	; (7e08 <z_impl_k_sem_give+0x6c>)
    7dce:	218e      	movs	r1, #142	; 0x8e
    7dd0:	f002 fb58 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7dd4:	480b      	ldr	r0, [pc, #44]	; (7e04 <z_impl_k_sem_give+0x68>)
    7dd6:	f7ff fde9 	bl	79ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7dda:	4620      	mov	r0, r4
    7ddc:	f000 ff5a 	bl	8c94 <z_unpend_first_thread>

	if (thread != NULL) {
    7de0:	b148      	cbz	r0, 7df6 <z_impl_k_sem_give+0x5a>
    7de2:	2200      	movs	r2, #0
    7de4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7de6:	f000 f99f 	bl	8128 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7dea:	4629      	mov	r1, r5
    7dec:	4805      	ldr	r0, [pc, #20]	; (7e04 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7df2:	f000 ba29 	b.w	8248 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7df6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7dfa:	429a      	cmp	r2, r3
    7dfc:	bf18      	it	ne
    7dfe:	3301      	addne	r3, #1
    7e00:	60a3      	str	r3, [r4, #8]
}
    7e02:	e7f2      	b.n	7dea <z_impl_k_sem_give+0x4e>
    7e04:	20004f08 	.word	0x20004f08
    7e08:	0000bb0c 	.word	0x0000bb0c
    7e0c:	0000bb65 	.word	0x0000bb65
    7e10:	0000b9c2 	.word	0x0000b9c2
    7e14:	0000bb7a 	.word	0x0000bb7a

00007e18 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e1a:	4604      	mov	r4, r0
    7e1c:	4617      	mov	r7, r2
    7e1e:	461d      	mov	r5, r3
    7e20:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7e24:	b17b      	cbz	r3, 7e46 <z_impl_k_sem_take+0x2e>
    7e26:	ea52 0305 	orrs.w	r3, r2, r5
    7e2a:	d00c      	beq.n	7e46 <z_impl_k_sem_take+0x2e>
    7e2c:	4935      	ldr	r1, [pc, #212]	; (7f04 <z_impl_k_sem_take+0xec>)
    7e2e:	4a36      	ldr	r2, [pc, #216]	; (7f08 <z_impl_k_sem_take+0xf0>)
    7e30:	4836      	ldr	r0, [pc, #216]	; (7f0c <z_impl_k_sem_take+0xf4>)
    7e32:	2379      	movs	r3, #121	; 0x79
    7e34:	f002 fb2d 	bl	a492 <assert_print>
    7e38:	4835      	ldr	r0, [pc, #212]	; (7f10 <z_impl_k_sem_take+0xf8>)
    7e3a:	f002 fb2a 	bl	a492 <assert_print>
    7e3e:	4832      	ldr	r0, [pc, #200]	; (7f08 <z_impl_k_sem_take+0xf0>)
    7e40:	2179      	movs	r1, #121	; 0x79
    7e42:	f002 fb1f 	bl	a484 <assert_post_action>
    7e46:	f04f 0320 	mov.w	r3, #32
    7e4a:	f3ef 8611 	mrs	r6, BASEPRI
    7e4e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e56:	482f      	ldr	r0, [pc, #188]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7e58:	f7ff fd8a 	bl	7970 <z_spin_lock_valid>
    7e5c:	b968      	cbnz	r0, 7e7a <z_impl_k_sem_take+0x62>
    7e5e:	4a2e      	ldr	r2, [pc, #184]	; (7f18 <z_impl_k_sem_take+0x100>)
    7e60:	492e      	ldr	r1, [pc, #184]	; (7f1c <z_impl_k_sem_take+0x104>)
    7e62:	482a      	ldr	r0, [pc, #168]	; (7f0c <z_impl_k_sem_take+0xf4>)
    7e64:	238e      	movs	r3, #142	; 0x8e
    7e66:	f002 fb14 	bl	a492 <assert_print>
    7e6a:	492a      	ldr	r1, [pc, #168]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7e6c:	482c      	ldr	r0, [pc, #176]	; (7f20 <z_impl_k_sem_take+0x108>)
    7e6e:	f002 fb10 	bl	a492 <assert_print>
    7e72:	4829      	ldr	r0, [pc, #164]	; (7f18 <z_impl_k_sem_take+0x100>)
    7e74:	218e      	movs	r1, #142	; 0x8e
    7e76:	f002 fb05 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e7a:	4826      	ldr	r0, [pc, #152]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7e7c:	f7ff fd96 	bl	79ac <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7e80:	68a3      	ldr	r3, [r4, #8]
    7e82:	b1d3      	cbz	r3, 7eba <z_impl_k_sem_take+0xa2>
		sem->count--;
    7e84:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e86:	4823      	ldr	r0, [pc, #140]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7e88:	60a3      	str	r3, [r4, #8]
    7e8a:	f7ff fd7f 	bl	798c <z_spin_unlock_valid>
    7e8e:	b968      	cbnz	r0, 7eac <z_impl_k_sem_take+0x94>
    7e90:	4a21      	ldr	r2, [pc, #132]	; (7f18 <z_impl_k_sem_take+0x100>)
    7e92:	4924      	ldr	r1, [pc, #144]	; (7f24 <z_impl_k_sem_take+0x10c>)
    7e94:	481d      	ldr	r0, [pc, #116]	; (7f0c <z_impl_k_sem_take+0xf4>)
    7e96:	23b9      	movs	r3, #185	; 0xb9
    7e98:	f002 fafb 	bl	a492 <assert_print>
    7e9c:	491d      	ldr	r1, [pc, #116]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7e9e:	4822      	ldr	r0, [pc, #136]	; (7f28 <z_impl_k_sem_take+0x110>)
    7ea0:	f002 faf7 	bl	a492 <assert_print>
    7ea4:	481c      	ldr	r0, [pc, #112]	; (7f18 <z_impl_k_sem_take+0x100>)
    7ea6:	21b9      	movs	r1, #185	; 0xb9
    7ea8:	f002 faec 	bl	a484 <assert_post_action>
	__asm__ volatile(
    7eac:	f386 8811 	msr	BASEPRI, r6
    7eb0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7eb4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7eb6:	b003      	add	sp, #12
    7eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7eba:	ea57 0305 	orrs.w	r3, r7, r5
    7ebe:	d118      	bne.n	7ef2 <z_impl_k_sem_take+0xda>
    7ec0:	4814      	ldr	r0, [pc, #80]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7ec2:	f7ff fd63 	bl	798c <z_spin_unlock_valid>
    7ec6:	b968      	cbnz	r0, 7ee4 <z_impl_k_sem_take+0xcc>
    7ec8:	4a13      	ldr	r2, [pc, #76]	; (7f18 <z_impl_k_sem_take+0x100>)
    7eca:	4916      	ldr	r1, [pc, #88]	; (7f24 <z_impl_k_sem_take+0x10c>)
    7ecc:	480f      	ldr	r0, [pc, #60]	; (7f0c <z_impl_k_sem_take+0xf4>)
    7ece:	23b9      	movs	r3, #185	; 0xb9
    7ed0:	f002 fadf 	bl	a492 <assert_print>
    7ed4:	490f      	ldr	r1, [pc, #60]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7ed6:	4814      	ldr	r0, [pc, #80]	; (7f28 <z_impl_k_sem_take+0x110>)
    7ed8:	f002 fadb 	bl	a492 <assert_print>
    7edc:	480e      	ldr	r0, [pc, #56]	; (7f18 <z_impl_k_sem_take+0x100>)
    7ede:	21b9      	movs	r1, #185	; 0xb9
    7ee0:	f002 fad0 	bl	a484 <assert_post_action>
    7ee4:	f386 8811 	msr	BASEPRI, r6
    7ee8:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7eec:	f06f 000f 	mvn.w	r0, #15
    7ef0:	e7e1      	b.n	7eb6 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7ef2:	e9cd 7500 	strd	r7, r5, [sp]
    7ef6:	4622      	mov	r2, r4
    7ef8:	4631      	mov	r1, r6
    7efa:	4806      	ldr	r0, [pc, #24]	; (7f14 <z_impl_k_sem_take+0xfc>)
    7efc:	f000 fcd0 	bl	88a0 <z_pend_curr>
	return ret;
    7f00:	e7d9      	b.n	7eb6 <z_impl_k_sem_take+0x9e>
    7f02:	bf00      	nop
    7f04:	0000d052 	.word	0x0000d052
    7f08:	0000d032 	.word	0x0000d032
    7f0c:	0000b9c2 	.word	0x0000b9c2
    7f10:	0000cffe 	.word	0x0000cffe
    7f14:	20004f08 	.word	0x20004f08
    7f18:	0000bb0c 	.word	0x0000bb0c
    7f1c:	0000bb65 	.word	0x0000bb65
    7f20:	0000bb7a 	.word	0x0000bb7a
    7f24:	0000bb39 	.word	0x0000bb39
    7f28:	0000bb50 	.word	0x0000bb50

00007f2c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    7f2c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    7f2e:	4d07      	ldr	r5, [pc, #28]	; (7f4c <z_reset_time_slice+0x20>)
    7f30:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    7f32:	b154      	cbz	r4, 7f4a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7f34:	f7fe f992 	bl	625c <sys_clock_elapsed>
    7f38:	4b05      	ldr	r3, [pc, #20]	; (7f50 <z_reset_time_slice+0x24>)
    7f3a:	4404      	add	r4, r0
    7f3c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7f3e:	6828      	ldr	r0, [r5, #0]
    7f40:	2100      	movs	r1, #0
	}
}
    7f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    7f46:	f001 bb1b 	b.w	9580 <z_set_timeout_expiry>
}
    7f4a:	bd38      	pop	{r3, r4, r5, pc}
    7f4c:	20004f14 	.word	0x20004f14
    7f50:	20004edc 	.word	0x20004edc

00007f54 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7f54:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7f56:	4d16      	ldr	r5, [pc, #88]	; (7fb0 <update_cache+0x5c>)
    7f58:	462b      	mov	r3, r5
    7f5a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f5e:	429c      	cmp	r4, r3
    7f60:	d000      	beq.n	7f64 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f62:	b904      	cbnz	r4, 7f66 <update_cache+0x12>
    7f64:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    7f66:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7f68:	b120      	cbz	r0, 7f74 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7f6a:	68ab      	ldr	r3, [r5, #8]
    7f6c:	42a3      	cmp	r3, r4
    7f6e:	d11b      	bne.n	7fa8 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7f70:	4623      	mov	r3, r4
    7f72:	e017      	b.n	7fa4 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    7f74:	b963      	cbnz	r3, 7f90 <update_cache+0x3c>
    7f76:	490f      	ldr	r1, [pc, #60]	; (7fb4 <update_cache+0x60>)
    7f78:	4a0f      	ldr	r2, [pc, #60]	; (7fb8 <update_cache+0x64>)
    7f7a:	4810      	ldr	r0, [pc, #64]	; (7fbc <update_cache+0x68>)
    7f7c:	2389      	movs	r3, #137	; 0x89
    7f7e:	f002 fa88 	bl	a492 <assert_print>
    7f82:	480f      	ldr	r0, [pc, #60]	; (7fc0 <update_cache+0x6c>)
    7f84:	f002 fa85 	bl	a492 <assert_print>
    7f88:	480b      	ldr	r0, [pc, #44]	; (7fb8 <update_cache+0x64>)
    7f8a:	2189      	movs	r1, #137	; 0x89
    7f8c:	f002 fa7a 	bl	a484 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7f90:	68ab      	ldr	r3, [r5, #8]
    7f92:	7b5a      	ldrb	r2, [r3, #13]
    7f94:	06d2      	lsls	r2, r2, #27
    7f96:	d1e8      	bne.n	7f6a <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7f98:	69a2      	ldr	r2, [r4, #24]
    7f9a:	2a00      	cmp	r2, #0
    7f9c:	d1e5      	bne.n	7f6a <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    7f9e:	89da      	ldrh	r2, [r3, #14]
    7fa0:	2a7f      	cmp	r2, #127	; 0x7f
    7fa2:	d9e2      	bls.n	7f6a <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    7fa4:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7fa6:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    7fa8:	4620      	mov	r0, r4
    7faa:	f7ff ffbf 	bl	7f2c <z_reset_time_slice>
    7fae:	e7df      	b.n	7f70 <update_cache+0x1c>
    7fb0:	20004edc 	.word	0x20004edc
    7fb4:	0000d0c2 	.word	0x0000d0c2
    7fb8:	0000d0a0 	.word	0x0000d0a0
    7fbc:	0000b9c2 	.word	0x0000b9c2
    7fc0:	0000cffe 	.word	0x0000cffe

00007fc4 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    7fc4:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7fc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7fca:	7b43      	ldrb	r3, [r0, #13]
    7fcc:	2a00      	cmp	r2, #0
{
    7fce:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7fd0:	db38      	blt.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7fd2:	06da      	lsls	r2, r3, #27
    7fd4:	d136      	bne.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
	return node->next != NULL;
    7fd6:	6985      	ldr	r5, [r0, #24]
    7fd8:	2d00      	cmp	r5, #0
    7fda:	d133      	bne.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
	thread->base.thread_state |= _THREAD_QUEUED;
    7fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7fe0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7fe2:	4b19      	ldr	r3, [pc, #100]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7fe4:	4298      	cmp	r0, r3
    7fe6:	d109      	bne.n	7ffc <ready_thread+0x38>
    7fe8:	4918      	ldr	r1, [pc, #96]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7fea:	4819      	ldr	r0, [pc, #100]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7fec:	4a19      	ldr	r2, [pc, #100]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7fee:	23ba      	movs	r3, #186	; 0xba
    7ff0:	f002 fa4f 	bl	a492 <assert_print>
    7ff4:	4817      	ldr	r0, [pc, #92]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7ff6:	21ba      	movs	r1, #186	; 0xba
    7ff8:	f002 fa44 	bl	a484 <assert_post_action>
	return list->head == list;
    7ffc:	4a16      	ldr	r2, [pc, #88]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    7ffe:	4613      	mov	r3, r2
    8000:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8004:	4299      	cmp	r1, r3
    8006:	bf18      	it	ne
    8008:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    800a:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    800c:	b925      	cbnz	r5, 8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    800e:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    8012:	600c      	str	r4, [r1, #0]
	list->tail = node;
    8014:	6254      	str	r4, [r2, #36]	; 0x24
}
    8016:	e00c      	b.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
	int32_t b1 = thread_1->base.prio;
    8018:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    801c:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    8020:	42b0      	cmp	r0, r6
    8022:	d00b      	beq.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8024:	4286      	cmp	r6, r0
    8026:	dd09      	ble.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    8028:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    802a:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    802e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8030:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    8032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    8036:	2000      	movs	r0, #0
    8038:	f7ff bf8c 	b.w	7f54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    803c:	428d      	cmp	r5, r1
    803e:	d0e6      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    8040:	682d      	ldr	r5, [r5, #0]
    8042:	e7e3      	b.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
}
    8044:	bd70      	pop	{r4, r5, r6, pc}
    8046:	bf00      	nop
    8048:	20004678 	.word	0x20004678
    804c:	0000d0e9 	.word	0x0000d0e9
    8050:	0000b9c2 	.word	0x0000b9c2
    8054:	0000d0a0 	.word	0x0000d0a0
    8058:	20004edc 	.word	0x20004edc

0000805c <k_sched_time_slice_set>:
{
    805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    805e:	4604      	mov	r4, r0
    8060:	460d      	mov	r5, r1
	__asm__ volatile(
    8062:	f04f 0320 	mov.w	r3, #32
    8066:	f3ef 8711 	mrs	r7, BASEPRI
    806a:	f383 8812 	msr	BASEPRI_MAX, r3
    806e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8072:	4823      	ldr	r0, [pc, #140]	; (8100 <k_sched_time_slice_set+0xa4>)
    8074:	f7ff fc7c 	bl	7970 <z_spin_lock_valid>
    8078:	b968      	cbnz	r0, 8096 <k_sched_time_slice_set+0x3a>
    807a:	4a22      	ldr	r2, [pc, #136]	; (8104 <k_sched_time_slice_set+0xa8>)
    807c:	4922      	ldr	r1, [pc, #136]	; (8108 <k_sched_time_slice_set+0xac>)
    807e:	4823      	ldr	r0, [pc, #140]	; (810c <k_sched_time_slice_set+0xb0>)
    8080:	238e      	movs	r3, #142	; 0x8e
    8082:	f002 fa06 	bl	a492 <assert_print>
    8086:	491e      	ldr	r1, [pc, #120]	; (8100 <k_sched_time_slice_set+0xa4>)
    8088:	4821      	ldr	r0, [pc, #132]	; (8110 <k_sched_time_slice_set+0xb4>)
    808a:	f002 fa02 	bl	a492 <assert_print>
    808e:	481d      	ldr	r0, [pc, #116]	; (8104 <k_sched_time_slice_set+0xa8>)
    8090:	218e      	movs	r1, #142	; 0x8e
    8092:	f002 f9f7 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8096:	481a      	ldr	r0, [pc, #104]	; (8100 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    8098:	2600      	movs	r6, #0
    809a:	f7ff fc87 	bl	79ac <z_spin_lock_set_owner>
    809e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    80a2:	f240 30e7 	movw	r0, #999	; 0x3e7
    80a6:	4631      	mov	r1, r6
    80a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80ac:	2300      	movs	r3, #0
    80ae:	fbe4 010c 	umlal	r0, r1, r4, ip
    80b2:	f7f8 fc43 	bl	93c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    80b6:	42b4      	cmp	r4, r6
    80b8:	dd02      	ble.n	80c0 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    80ba:	2802      	cmp	r0, #2
    80bc:	bfb8      	it	lt
    80be:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    80c0:	4a14      	ldr	r2, [pc, #80]	; (8114 <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    80c2:	4b15      	ldr	r3, [pc, #84]	; (8118 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    80c4:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    80c6:	4a15      	ldr	r2, [pc, #84]	; (811c <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    80c8:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    80ca:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    80cc:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    80ce:	f7ff ff2d 	bl	7f2c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80d2:	480b      	ldr	r0, [pc, #44]	; (8100 <k_sched_time_slice_set+0xa4>)
    80d4:	f7ff fc5a 	bl	798c <z_spin_unlock_valid>
    80d8:	b968      	cbnz	r0, 80f6 <k_sched_time_slice_set+0x9a>
    80da:	4a0a      	ldr	r2, [pc, #40]	; (8104 <k_sched_time_slice_set+0xa8>)
    80dc:	4910      	ldr	r1, [pc, #64]	; (8120 <k_sched_time_slice_set+0xc4>)
    80de:	480b      	ldr	r0, [pc, #44]	; (810c <k_sched_time_slice_set+0xb0>)
    80e0:	23b9      	movs	r3, #185	; 0xb9
    80e2:	f002 f9d6 	bl	a492 <assert_print>
    80e6:	4906      	ldr	r1, [pc, #24]	; (8100 <k_sched_time_slice_set+0xa4>)
    80e8:	480e      	ldr	r0, [pc, #56]	; (8124 <k_sched_time_slice_set+0xc8>)
    80ea:	f002 f9d2 	bl	a492 <assert_print>
    80ee:	4805      	ldr	r0, [pc, #20]	; (8104 <k_sched_time_slice_set+0xa8>)
    80f0:	21b9      	movs	r1, #185	; 0xb9
    80f2:	f002 f9c7 	bl	a484 <assert_post_action>
	__asm__ volatile(
    80f6:	f387 8811 	msr	BASEPRI, r7
    80fa:	f3bf 8f6f 	isb	sy
}
    80fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8100:	20004f18 	.word	0x20004f18
    8104:	0000bb0c 	.word	0x0000bb0c
    8108:	0000bb65 	.word	0x0000bb65
    810c:	0000b9c2 	.word	0x0000b9c2
    8110:	0000bb7a 	.word	0x0000bb7a
    8114:	20004f14 	.word	0x20004f14
    8118:	20004edc 	.word	0x20004edc
    811c:	20004f10 	.word	0x20004f10
    8120:	0000bb39 	.word	0x0000bb39
    8124:	0000bb50 	.word	0x0000bb50

00008128 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    8128:	b538      	push	{r3, r4, r5, lr}
    812a:	4604      	mov	r4, r0
	__asm__ volatile(
    812c:	f04f 0320 	mov.w	r3, #32
    8130:	f3ef 8511 	mrs	r5, BASEPRI
    8134:	f383 8812 	msr	BASEPRI_MAX, r3
    8138:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    813c:	4817      	ldr	r0, [pc, #92]	; (819c <z_ready_thread+0x74>)
    813e:	f7ff fc17 	bl	7970 <z_spin_lock_valid>
    8142:	b968      	cbnz	r0, 8160 <z_ready_thread+0x38>
    8144:	4a16      	ldr	r2, [pc, #88]	; (81a0 <z_ready_thread+0x78>)
    8146:	4917      	ldr	r1, [pc, #92]	; (81a4 <z_ready_thread+0x7c>)
    8148:	4817      	ldr	r0, [pc, #92]	; (81a8 <z_ready_thread+0x80>)
    814a:	238e      	movs	r3, #142	; 0x8e
    814c:	f002 f9a1 	bl	a492 <assert_print>
    8150:	4912      	ldr	r1, [pc, #72]	; (819c <z_ready_thread+0x74>)
    8152:	4816      	ldr	r0, [pc, #88]	; (81ac <z_ready_thread+0x84>)
    8154:	f002 f99d 	bl	a492 <assert_print>
    8158:	4811      	ldr	r0, [pc, #68]	; (81a0 <z_ready_thread+0x78>)
    815a:	218e      	movs	r1, #142	; 0x8e
    815c:	f002 f992 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8160:	480e      	ldr	r0, [pc, #56]	; (819c <z_ready_thread+0x74>)
    8162:	f7ff fc23 	bl	79ac <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    8166:	4620      	mov	r0, r4
    8168:	f7ff ff2c 	bl	7fc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    816c:	480b      	ldr	r0, [pc, #44]	; (819c <z_ready_thread+0x74>)
    816e:	f7ff fc0d 	bl	798c <z_spin_unlock_valid>
    8172:	b968      	cbnz	r0, 8190 <z_ready_thread+0x68>
    8174:	4a0a      	ldr	r2, [pc, #40]	; (81a0 <z_ready_thread+0x78>)
    8176:	490e      	ldr	r1, [pc, #56]	; (81b0 <z_ready_thread+0x88>)
    8178:	480b      	ldr	r0, [pc, #44]	; (81a8 <z_ready_thread+0x80>)
    817a:	23b9      	movs	r3, #185	; 0xb9
    817c:	f002 f989 	bl	a492 <assert_print>
    8180:	4906      	ldr	r1, [pc, #24]	; (819c <z_ready_thread+0x74>)
    8182:	480c      	ldr	r0, [pc, #48]	; (81b4 <z_ready_thread+0x8c>)
    8184:	f002 f985 	bl	a492 <assert_print>
    8188:	4805      	ldr	r0, [pc, #20]	; (81a0 <z_ready_thread+0x78>)
    818a:	21b9      	movs	r1, #185	; 0xb9
    818c:	f002 f97a 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8190:	f385 8811 	msr	BASEPRI, r5
    8194:	f3bf 8f6f 	isb	sy
		}
	}
}
    8198:	bd38      	pop	{r3, r4, r5, pc}
    819a:	bf00      	nop
    819c:	20004f18 	.word	0x20004f18
    81a0:	0000bb0c 	.word	0x0000bb0c
    81a4:	0000bb65 	.word	0x0000bb65
    81a8:	0000b9c2 	.word	0x0000b9c2
    81ac:	0000bb7a 	.word	0x0000bb7a
    81b0:	0000bb39 	.word	0x0000bb39
    81b4:	0000bb50 	.word	0x0000bb50

000081b8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    81b8:	b538      	push	{r3, r4, r5, lr}
    81ba:	4604      	mov	r4, r0
	__asm__ volatile(
    81bc:	f04f 0320 	mov.w	r3, #32
    81c0:	f3ef 8511 	mrs	r5, BASEPRI
    81c4:	f383 8812 	msr	BASEPRI_MAX, r3
    81c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81cc:	4817      	ldr	r0, [pc, #92]	; (822c <z_unpend_thread_no_timeout+0x74>)
    81ce:	f7ff fbcf 	bl	7970 <z_spin_lock_valid>
    81d2:	b968      	cbnz	r0, 81f0 <z_unpend_thread_no_timeout+0x38>
    81d4:	4a16      	ldr	r2, [pc, #88]	; (8230 <z_unpend_thread_no_timeout+0x78>)
    81d6:	4917      	ldr	r1, [pc, #92]	; (8234 <z_unpend_thread_no_timeout+0x7c>)
    81d8:	4817      	ldr	r0, [pc, #92]	; (8238 <z_unpend_thread_no_timeout+0x80>)
    81da:	238e      	movs	r3, #142	; 0x8e
    81dc:	f002 f959 	bl	a492 <assert_print>
    81e0:	4912      	ldr	r1, [pc, #72]	; (822c <z_unpend_thread_no_timeout+0x74>)
    81e2:	4816      	ldr	r0, [pc, #88]	; (823c <z_unpend_thread_no_timeout+0x84>)
    81e4:	f002 f955 	bl	a492 <assert_print>
    81e8:	4811      	ldr	r0, [pc, #68]	; (8230 <z_unpend_thread_no_timeout+0x78>)
    81ea:	218e      	movs	r1, #142	; 0x8e
    81ec:	f002 f94a 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    81f0:	480e      	ldr	r0, [pc, #56]	; (822c <z_unpend_thread_no_timeout+0x74>)
    81f2:	f7ff fbdb 	bl	79ac <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    81f6:	4620      	mov	r0, r4
    81f8:	f000 fc82 	bl	8b00 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81fc:	480b      	ldr	r0, [pc, #44]	; (822c <z_unpend_thread_no_timeout+0x74>)
    81fe:	f7ff fbc5 	bl	798c <z_spin_unlock_valid>
    8202:	b968      	cbnz	r0, 8220 <z_unpend_thread_no_timeout+0x68>
    8204:	4a0a      	ldr	r2, [pc, #40]	; (8230 <z_unpend_thread_no_timeout+0x78>)
    8206:	490e      	ldr	r1, [pc, #56]	; (8240 <z_unpend_thread_no_timeout+0x88>)
    8208:	480b      	ldr	r0, [pc, #44]	; (8238 <z_unpend_thread_no_timeout+0x80>)
    820a:	23b9      	movs	r3, #185	; 0xb9
    820c:	f002 f941 	bl	a492 <assert_print>
    8210:	4906      	ldr	r1, [pc, #24]	; (822c <z_unpend_thread_no_timeout+0x74>)
    8212:	480c      	ldr	r0, [pc, #48]	; (8244 <z_unpend_thread_no_timeout+0x8c>)
    8214:	f002 f93d 	bl	a492 <assert_print>
    8218:	4805      	ldr	r0, [pc, #20]	; (8230 <z_unpend_thread_no_timeout+0x78>)
    821a:	21b9      	movs	r1, #185	; 0xb9
    821c:	f002 f932 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8220:	f385 8811 	msr	BASEPRI, r5
    8224:	f3bf 8f6f 	isb	sy
	}
}
    8228:	bd38      	pop	{r3, r4, r5, pc}
    822a:	bf00      	nop
    822c:	20004f18 	.word	0x20004f18
    8230:	0000bb0c 	.word	0x0000bb0c
    8234:	0000bb65 	.word	0x0000bb65
    8238:	0000b9c2 	.word	0x0000b9c2
    823c:	0000bb7a 	.word	0x0000bb7a
    8240:	0000bb39 	.word	0x0000bb39
    8244:	0000bb50 	.word	0x0000bb50

00008248 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8248:	b538      	push	{r3, r4, r5, lr}
    824a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    824c:	460d      	mov	r5, r1
    824e:	b9e9      	cbnz	r1, 828c <z_reschedule+0x44>
    8250:	f3ef 8305 	mrs	r3, IPSR
    8254:	b9d3      	cbnz	r3, 828c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    8256:	4b19      	ldr	r3, [pc, #100]	; (82bc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    8258:	69da      	ldr	r2, [r3, #28]
    825a:	689b      	ldr	r3, [r3, #8]
    825c:	429a      	cmp	r2, r3
    825e:	d015      	beq.n	828c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8260:	f7ff fb94 	bl	798c <z_spin_unlock_valid>
    8264:	b968      	cbnz	r0, 8282 <z_reschedule+0x3a>
    8266:	4a16      	ldr	r2, [pc, #88]	; (82c0 <z_reschedule+0x78>)
    8268:	4916      	ldr	r1, [pc, #88]	; (82c4 <z_reschedule+0x7c>)
    826a:	4817      	ldr	r0, [pc, #92]	; (82c8 <z_reschedule+0x80>)
    826c:	23d0      	movs	r3, #208	; 0xd0
    826e:	f002 f910 	bl	a492 <assert_print>
    8272:	4816      	ldr	r0, [pc, #88]	; (82cc <z_reschedule+0x84>)
    8274:	4621      	mov	r1, r4
    8276:	f002 f90c 	bl	a492 <assert_print>
    827a:	4811      	ldr	r0, [pc, #68]	; (82c0 <z_reschedule+0x78>)
    827c:	21d0      	movs	r1, #208	; 0xd0
    827e:	f002 f901 	bl	a484 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    8282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    8286:	2000      	movs	r0, #0
    8288:	f7fb be94 	b.w	3fb4 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    828c:	4620      	mov	r0, r4
    828e:	f7ff fb7d 	bl	798c <z_spin_unlock_valid>
    8292:	b968      	cbnz	r0, 82b0 <z_reschedule+0x68>
    8294:	4a0a      	ldr	r2, [pc, #40]	; (82c0 <z_reschedule+0x78>)
    8296:	490b      	ldr	r1, [pc, #44]	; (82c4 <z_reschedule+0x7c>)
    8298:	480b      	ldr	r0, [pc, #44]	; (82c8 <z_reschedule+0x80>)
    829a:	23b9      	movs	r3, #185	; 0xb9
    829c:	f002 f8f9 	bl	a492 <assert_print>
    82a0:	480a      	ldr	r0, [pc, #40]	; (82cc <z_reschedule+0x84>)
    82a2:	4621      	mov	r1, r4
    82a4:	f002 f8f5 	bl	a492 <assert_print>
    82a8:	4805      	ldr	r0, [pc, #20]	; (82c0 <z_reschedule+0x78>)
    82aa:	21b9      	movs	r1, #185	; 0xb9
    82ac:	f002 f8ea 	bl	a484 <assert_post_action>
    82b0:	f385 8811 	msr	BASEPRI, r5
    82b4:	f3bf 8f6f 	isb	sy
    82b8:	bd38      	pop	{r3, r4, r5, pc}
    82ba:	bf00      	nop
    82bc:	20004edc 	.word	0x20004edc
    82c0:	0000bb0c 	.word	0x0000bb0c
    82c4:	0000bb39 	.word	0x0000bb39
    82c8:	0000b9c2 	.word	0x0000b9c2
    82cc:	0000bb50 	.word	0x0000bb50

000082d0 <z_sched_start>:
{
    82d0:	b538      	push	{r3, r4, r5, lr}
    82d2:	4604      	mov	r4, r0
	__asm__ volatile(
    82d4:	f04f 0320 	mov.w	r3, #32
    82d8:	f3ef 8511 	mrs	r5, BASEPRI
    82dc:	f383 8812 	msr	BASEPRI_MAX, r3
    82e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82e4:	481d      	ldr	r0, [pc, #116]	; (835c <z_sched_start+0x8c>)
    82e6:	f7ff fb43 	bl	7970 <z_spin_lock_valid>
    82ea:	b968      	cbnz	r0, 8308 <z_sched_start+0x38>
    82ec:	4a1c      	ldr	r2, [pc, #112]	; (8360 <z_sched_start+0x90>)
    82ee:	491d      	ldr	r1, [pc, #116]	; (8364 <z_sched_start+0x94>)
    82f0:	481d      	ldr	r0, [pc, #116]	; (8368 <z_sched_start+0x98>)
    82f2:	238e      	movs	r3, #142	; 0x8e
    82f4:	f002 f8cd 	bl	a492 <assert_print>
    82f8:	4918      	ldr	r1, [pc, #96]	; (835c <z_sched_start+0x8c>)
    82fa:	481c      	ldr	r0, [pc, #112]	; (836c <z_sched_start+0x9c>)
    82fc:	f002 f8c9 	bl	a492 <assert_print>
    8300:	4817      	ldr	r0, [pc, #92]	; (8360 <z_sched_start+0x90>)
    8302:	218e      	movs	r1, #142	; 0x8e
    8304:	f002 f8be 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8308:	4814      	ldr	r0, [pc, #80]	; (835c <z_sched_start+0x8c>)
    830a:	f7ff fb4f 	bl	79ac <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    830e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    8310:	075a      	lsls	r2, r3, #29
    8312:	d416      	bmi.n	8342 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8314:	4811      	ldr	r0, [pc, #68]	; (835c <z_sched_start+0x8c>)
    8316:	f7ff fb39 	bl	798c <z_spin_unlock_valid>
    831a:	b968      	cbnz	r0, 8338 <z_sched_start+0x68>
    831c:	4a10      	ldr	r2, [pc, #64]	; (8360 <z_sched_start+0x90>)
    831e:	4914      	ldr	r1, [pc, #80]	; (8370 <z_sched_start+0xa0>)
    8320:	4811      	ldr	r0, [pc, #68]	; (8368 <z_sched_start+0x98>)
    8322:	23b9      	movs	r3, #185	; 0xb9
    8324:	f002 f8b5 	bl	a492 <assert_print>
    8328:	490c      	ldr	r1, [pc, #48]	; (835c <z_sched_start+0x8c>)
    832a:	4812      	ldr	r0, [pc, #72]	; (8374 <z_sched_start+0xa4>)
    832c:	f002 f8b1 	bl	a492 <assert_print>
    8330:	480b      	ldr	r0, [pc, #44]	; (8360 <z_sched_start+0x90>)
    8332:	21b9      	movs	r1, #185	; 0xb9
    8334:	f002 f8a6 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8338:	f385 8811 	msr	BASEPRI, r5
    833c:	f3bf 8f6f 	isb	sy
}
    8340:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8342:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    8346:	4620      	mov	r0, r4
    8348:	7363      	strb	r3, [r4, #13]
    834a:	f7ff fe3b 	bl	7fc4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    834e:	4629      	mov	r1, r5
    8350:	4802      	ldr	r0, [pc, #8]	; (835c <z_sched_start+0x8c>)
}
    8352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    8356:	f7ff bf77 	b.w	8248 <z_reschedule>
    835a:	bf00      	nop
    835c:	20004f18 	.word	0x20004f18
    8360:	0000bb0c 	.word	0x0000bb0c
    8364:	0000bb65 	.word	0x0000bb65
    8368:	0000b9c2 	.word	0x0000b9c2
    836c:	0000bb7a 	.word	0x0000bb7a
    8370:	0000bb39 	.word	0x0000bb39
    8374:	0000bb50 	.word	0x0000bb50

00008378 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8378:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    837a:	f04f 0320 	mov.w	r3, #32
    837e:	f3ef 8511 	mrs	r5, BASEPRI
    8382:	f383 8812 	msr	BASEPRI_MAX, r3
    8386:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    838a:	4829      	ldr	r0, [pc, #164]	; (8430 <k_sched_lock+0xb8>)
    838c:	f7ff faf0 	bl	7970 <z_spin_lock_valid>
    8390:	b968      	cbnz	r0, 83ae <k_sched_lock+0x36>
    8392:	4a28      	ldr	r2, [pc, #160]	; (8434 <k_sched_lock+0xbc>)
    8394:	4928      	ldr	r1, [pc, #160]	; (8438 <k_sched_lock+0xc0>)
    8396:	4829      	ldr	r0, [pc, #164]	; (843c <k_sched_lock+0xc4>)
    8398:	238e      	movs	r3, #142	; 0x8e
    839a:	f002 f87a 	bl	a492 <assert_print>
    839e:	4924      	ldr	r1, [pc, #144]	; (8430 <k_sched_lock+0xb8>)
    83a0:	4827      	ldr	r0, [pc, #156]	; (8440 <k_sched_lock+0xc8>)
    83a2:	f002 f876 	bl	a492 <assert_print>
    83a6:	4823      	ldr	r0, [pc, #140]	; (8434 <k_sched_lock+0xbc>)
    83a8:	218e      	movs	r1, #142	; 0x8e
    83aa:	f002 f86b 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    83ae:	4820      	ldr	r0, [pc, #128]	; (8430 <k_sched_lock+0xb8>)
    83b0:	f7ff fafc 	bl	79ac <z_spin_lock_set_owner>
    83b4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    83b8:	b163      	cbz	r3, 83d4 <k_sched_lock+0x5c>
    83ba:	4922      	ldr	r1, [pc, #136]	; (8444 <k_sched_lock+0xcc>)
    83bc:	4a22      	ldr	r2, [pc, #136]	; (8448 <k_sched_lock+0xd0>)
    83be:	481f      	ldr	r0, [pc, #124]	; (843c <k_sched_lock+0xc4>)
    83c0:	23fd      	movs	r3, #253	; 0xfd
    83c2:	f002 f866 	bl	a492 <assert_print>
    83c6:	4821      	ldr	r0, [pc, #132]	; (844c <k_sched_lock+0xd4>)
    83c8:	f002 f863 	bl	a492 <assert_print>
    83cc:	481e      	ldr	r0, [pc, #120]	; (8448 <k_sched_lock+0xd0>)
    83ce:	21fd      	movs	r1, #253	; 0xfd
    83d0:	f002 f858 	bl	a484 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    83d4:	4c1e      	ldr	r4, [pc, #120]	; (8450 <k_sched_lock+0xd8>)
    83d6:	68a3      	ldr	r3, [r4, #8]
    83d8:	7bdb      	ldrb	r3, [r3, #15]
    83da:	2b01      	cmp	r3, #1
    83dc:	d10c      	bne.n	83f8 <k_sched_lock+0x80>
    83de:	491d      	ldr	r1, [pc, #116]	; (8454 <k_sched_lock+0xdc>)
    83e0:	4a19      	ldr	r2, [pc, #100]	; (8448 <k_sched_lock+0xd0>)
    83e2:	4816      	ldr	r0, [pc, #88]	; (843c <k_sched_lock+0xc4>)
    83e4:	23fe      	movs	r3, #254	; 0xfe
    83e6:	f002 f854 	bl	a492 <assert_print>
    83ea:	4818      	ldr	r0, [pc, #96]	; (844c <k_sched_lock+0xd4>)
    83ec:	f002 f851 	bl	a492 <assert_print>
    83f0:	4815      	ldr	r0, [pc, #84]	; (8448 <k_sched_lock+0xd0>)
    83f2:	21fe      	movs	r1, #254	; 0xfe
    83f4:	f002 f846 	bl	a484 <assert_post_action>
	--_current->base.sched_locked;
    83f8:	68a2      	ldr	r2, [r4, #8]
    83fa:	7bd3      	ldrb	r3, [r2, #15]
    83fc:	3b01      	subs	r3, #1
    83fe:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8400:	480b      	ldr	r0, [pc, #44]	; (8430 <k_sched_lock+0xb8>)
    8402:	f7ff fac3 	bl	798c <z_spin_unlock_valid>
    8406:	b968      	cbnz	r0, 8424 <k_sched_lock+0xac>
    8408:	4a0a      	ldr	r2, [pc, #40]	; (8434 <k_sched_lock+0xbc>)
    840a:	4913      	ldr	r1, [pc, #76]	; (8458 <k_sched_lock+0xe0>)
    840c:	480b      	ldr	r0, [pc, #44]	; (843c <k_sched_lock+0xc4>)
    840e:	23b9      	movs	r3, #185	; 0xb9
    8410:	f002 f83f 	bl	a492 <assert_print>
    8414:	4906      	ldr	r1, [pc, #24]	; (8430 <k_sched_lock+0xb8>)
    8416:	4811      	ldr	r0, [pc, #68]	; (845c <k_sched_lock+0xe4>)
    8418:	f002 f83b 	bl	a492 <assert_print>
    841c:	4805      	ldr	r0, [pc, #20]	; (8434 <k_sched_lock+0xbc>)
    841e:	21b9      	movs	r1, #185	; 0xb9
    8420:	f002 f830 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8424:	f385 8811 	msr	BASEPRI, r5
    8428:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    842c:	bd38      	pop	{r3, r4, r5, pc}
    842e:	bf00      	nop
    8430:	20004f18 	.word	0x20004f18
    8434:	0000bb0c 	.word	0x0000bb0c
    8438:	0000bb65 	.word	0x0000bb65
    843c:	0000b9c2 	.word	0x0000b9c2
    8440:	0000bb7a 	.word	0x0000bb7a
    8444:	0000cec8 	.word	0x0000cec8
    8448:	0000cfd3 	.word	0x0000cfd3
    844c:	0000cffe 	.word	0x0000cffe
    8450:	20004edc 	.word	0x20004edc
    8454:	0000d001 	.word	0x0000d001
    8458:	0000bb39 	.word	0x0000bb39
    845c:	0000bb50 	.word	0x0000bb50

00008460 <k_sched_unlock>:

void k_sched_unlock(void)
{
    8460:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8462:	f04f 0320 	mov.w	r3, #32
    8466:	f3ef 8511 	mrs	r5, BASEPRI
    846a:	f383 8812 	msr	BASEPRI_MAX, r3
    846e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8472:	482d      	ldr	r0, [pc, #180]	; (8528 <k_sched_unlock+0xc8>)
    8474:	f7ff fa7c 	bl	7970 <z_spin_lock_valid>
    8478:	b968      	cbnz	r0, 8496 <k_sched_unlock+0x36>
    847a:	4a2c      	ldr	r2, [pc, #176]	; (852c <k_sched_unlock+0xcc>)
    847c:	492c      	ldr	r1, [pc, #176]	; (8530 <k_sched_unlock+0xd0>)
    847e:	482d      	ldr	r0, [pc, #180]	; (8534 <k_sched_unlock+0xd4>)
    8480:	238e      	movs	r3, #142	; 0x8e
    8482:	f002 f806 	bl	a492 <assert_print>
    8486:	4928      	ldr	r1, [pc, #160]	; (8528 <k_sched_unlock+0xc8>)
    8488:	482b      	ldr	r0, [pc, #172]	; (8538 <k_sched_unlock+0xd8>)
    848a:	f002 f802 	bl	a492 <assert_print>
    848e:	4827      	ldr	r0, [pc, #156]	; (852c <k_sched_unlock+0xcc>)
    8490:	218e      	movs	r1, #142	; 0x8e
    8492:	f001 fff7 	bl	a484 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    8496:	4c29      	ldr	r4, [pc, #164]	; (853c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    8498:	4823      	ldr	r0, [pc, #140]	; (8528 <k_sched_unlock+0xc8>)
    849a:	f7ff fa87 	bl	79ac <z_spin_lock_set_owner>
    849e:	68a3      	ldr	r3, [r4, #8]
    84a0:	7bdb      	ldrb	r3, [r3, #15]
    84a2:	b973      	cbnz	r3, 84c2 <k_sched_unlock+0x62>
    84a4:	4926      	ldr	r1, [pc, #152]	; (8540 <k_sched_unlock+0xe0>)
    84a6:	4a27      	ldr	r2, [pc, #156]	; (8544 <k_sched_unlock+0xe4>)
    84a8:	4822      	ldr	r0, [pc, #136]	; (8534 <k_sched_unlock+0xd4>)
    84aa:	f240 33bb 	movw	r3, #955	; 0x3bb
    84ae:	f001 fff0 	bl	a492 <assert_print>
    84b2:	4825      	ldr	r0, [pc, #148]	; (8548 <k_sched_unlock+0xe8>)
    84b4:	f001 ffed 	bl	a492 <assert_print>
    84b8:	4822      	ldr	r0, [pc, #136]	; (8544 <k_sched_unlock+0xe4>)
    84ba:	f240 31bb 	movw	r1, #955	; 0x3bb
    84be:	f001 ffe1 	bl	a484 <assert_post_action>
    84c2:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    84c6:	b173      	cbz	r3, 84e6 <k_sched_unlock+0x86>
    84c8:	4920      	ldr	r1, [pc, #128]	; (854c <k_sched_unlock+0xec>)
    84ca:	4a1e      	ldr	r2, [pc, #120]	; (8544 <k_sched_unlock+0xe4>)
    84cc:	4819      	ldr	r0, [pc, #100]	; (8534 <k_sched_unlock+0xd4>)
    84ce:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    84d2:	f001 ffde 	bl	a492 <assert_print>
    84d6:	481c      	ldr	r0, [pc, #112]	; (8548 <k_sched_unlock+0xe8>)
    84d8:	f001 ffdb 	bl	a492 <assert_print>
    84dc:	4819      	ldr	r0, [pc, #100]	; (8544 <k_sched_unlock+0xe4>)
    84de:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    84e2:	f001 ffcf 	bl	a484 <assert_post_action>

		++_current->base.sched_locked;
    84e6:	68a2      	ldr	r2, [r4, #8]
    84e8:	7bd3      	ldrb	r3, [r2, #15]
    84ea:	3301      	adds	r3, #1
		update_cache(0);
    84ec:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    84ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    84f0:	f7ff fd30 	bl	7f54 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84f4:	480c      	ldr	r0, [pc, #48]	; (8528 <k_sched_unlock+0xc8>)
    84f6:	f7ff fa49 	bl	798c <z_spin_unlock_valid>
    84fa:	b968      	cbnz	r0, 8518 <k_sched_unlock+0xb8>
    84fc:	4a0b      	ldr	r2, [pc, #44]	; (852c <k_sched_unlock+0xcc>)
    84fe:	4914      	ldr	r1, [pc, #80]	; (8550 <k_sched_unlock+0xf0>)
    8500:	480c      	ldr	r0, [pc, #48]	; (8534 <k_sched_unlock+0xd4>)
    8502:	23b9      	movs	r3, #185	; 0xb9
    8504:	f001 ffc5 	bl	a492 <assert_print>
    8508:	4907      	ldr	r1, [pc, #28]	; (8528 <k_sched_unlock+0xc8>)
    850a:	4812      	ldr	r0, [pc, #72]	; (8554 <k_sched_unlock+0xf4>)
    850c:	f001 ffc1 	bl	a492 <assert_print>
    8510:	4806      	ldr	r0, [pc, #24]	; (852c <k_sched_unlock+0xcc>)
    8512:	21b9      	movs	r1, #185	; 0xb9
    8514:	f001 ffb6 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8518:	f385 8811 	msr	BASEPRI, r5
    851c:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    8520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    8524:	f002 bd03 	b.w	af2e <z_reschedule_unlocked>
    8528:	20004f18 	.word	0x20004f18
    852c:	0000bb0c 	.word	0x0000bb0c
    8530:	0000bb65 	.word	0x0000bb65
    8534:	0000b9c2 	.word	0x0000b9c2
    8538:	0000bb7a 	.word	0x0000bb7a
    853c:	20004edc 	.word	0x20004edc
    8540:	0000d10a 	.word	0x0000d10a
    8544:	0000d0a0 	.word	0x0000d0a0
    8548:	0000cffe 	.word	0x0000cffe
    854c:	0000cec8 	.word	0x0000cec8
    8550:	0000bb39 	.word	0x0000bb39
    8554:	0000bb50 	.word	0x0000bb50

00008558 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8558:	4b0c      	ldr	r3, [pc, #48]	; (858c <z_priq_dumb_remove+0x34>)
    855a:	4299      	cmp	r1, r3
{
    855c:	b510      	push	{r4, lr}
    855e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8560:	d10b      	bne.n	857a <z_priq_dumb_remove+0x22>
    8562:	490b      	ldr	r1, [pc, #44]	; (8590 <z_priq_dumb_remove+0x38>)
    8564:	480b      	ldr	r0, [pc, #44]	; (8594 <z_priq_dumb_remove+0x3c>)
    8566:	4a0c      	ldr	r2, [pc, #48]	; (8598 <z_priq_dumb_remove+0x40>)
    8568:	f240 433d 	movw	r3, #1085	; 0x43d
    856c:	f001 ff91 	bl	a492 <assert_print>
    8570:	4809      	ldr	r0, [pc, #36]	; (8598 <z_priq_dumb_remove+0x40>)
    8572:	f240 413d 	movw	r1, #1085	; 0x43d
    8576:	f001 ff85 	bl	a484 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    857a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    857e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8580:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8582:	2300      	movs	r3, #0
	node->prev = NULL;
    8584:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8588:	bd10      	pop	{r4, pc}
    858a:	bf00      	nop
    858c:	20004678 	.word	0x20004678
    8590:	0000d0e9 	.word	0x0000d0e9
    8594:	0000b9c2 	.word	0x0000b9c2
    8598:	0000d0a0 	.word	0x0000d0a0

0000859c <move_thread_to_end_of_prio_q>:
{
    859c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    859e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    85a2:	7b43      	ldrb	r3, [r0, #13]
    85a4:	2a00      	cmp	r2, #0
{
    85a6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    85a8:	da06      	bge.n	85b8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    85aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    85ae:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    85b0:	4601      	mov	r1, r0
    85b2:	481d      	ldr	r0, [pc, #116]	; (8628 <move_thread_to_end_of_prio_q+0x8c>)
    85b4:	f7ff ffd0 	bl	8558 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    85b8:	7b63      	ldrb	r3, [r4, #13]
    85ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    85be:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    85c0:	4b1a      	ldr	r3, [pc, #104]	; (862c <move_thread_to_end_of_prio_q+0x90>)
    85c2:	429c      	cmp	r4, r3
    85c4:	d109      	bne.n	85da <move_thread_to_end_of_prio_q+0x3e>
    85c6:	491a      	ldr	r1, [pc, #104]	; (8630 <move_thread_to_end_of_prio_q+0x94>)
    85c8:	481a      	ldr	r0, [pc, #104]	; (8634 <move_thread_to_end_of_prio_q+0x98>)
    85ca:	4a1b      	ldr	r2, [pc, #108]	; (8638 <move_thread_to_end_of_prio_q+0x9c>)
    85cc:	23ba      	movs	r3, #186	; 0xba
    85ce:	f001 ff60 	bl	a492 <assert_print>
    85d2:	4819      	ldr	r0, [pc, #100]	; (8638 <move_thread_to_end_of_prio_q+0x9c>)
    85d4:	21ba      	movs	r1, #186	; 0xba
    85d6:	f001 ff55 	bl	a484 <assert_post_action>
	return list->head == list;
    85da:	4a18      	ldr	r2, [pc, #96]	; (863c <move_thread_to_end_of_prio_q+0xa0>)
    85dc:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    85de:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    85e0:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85e4:	428b      	cmp	r3, r1
    85e6:	bf08      	it	eq
    85e8:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85ea:	b923      	cbnz	r3, 85f6 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    85ec:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    85f0:	6004      	str	r4, [r0, #0]
	list->tail = node;
    85f2:	6254      	str	r4, [r2, #36]	; 0x24
}
    85f4:	e00c      	b.n	8610 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    85f6:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    85fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    85fe:	42b5      	cmp	r5, r6
    8600:	d00e      	beq.n	8620 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8602:	42ae      	cmp	r6, r5
    8604:	dd0c      	ble.n	8620 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    8606:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8608:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    860c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    860e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    8610:	6890      	ldr	r0, [r2, #8]
    8612:	1b03      	subs	r3, r0, r4
    8614:	4258      	negs	r0, r3
}
    8616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    861a:	4158      	adcs	r0, r3
    861c:	f7ff bc9a 	b.w	7f54 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8620:	4298      	cmp	r0, r3
    8622:	d0e3      	beq.n	85ec <move_thread_to_end_of_prio_q+0x50>
    8624:	681b      	ldr	r3, [r3, #0]
    8626:	e7e0      	b.n	85ea <move_thread_to_end_of_prio_q+0x4e>
    8628:	20004efc 	.word	0x20004efc
    862c:	20004678 	.word	0x20004678
    8630:	0000d0e9 	.word	0x0000d0e9
    8634:	0000b9c2 	.word	0x0000b9c2
    8638:	0000d0a0 	.word	0x0000d0a0
    863c:	20004edc 	.word	0x20004edc

00008640 <z_time_slice>:
{
    8640:	b570      	push	{r4, r5, r6, lr}
    8642:	4605      	mov	r5, r0
	__asm__ volatile(
    8644:	f04f 0320 	mov.w	r3, #32
    8648:	f3ef 8611 	mrs	r6, BASEPRI
    864c:	f383 8812 	msr	BASEPRI_MAX, r3
    8650:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8654:	482a      	ldr	r0, [pc, #168]	; (8700 <z_time_slice+0xc0>)
    8656:	f7ff f98b 	bl	7970 <z_spin_lock_valid>
    865a:	b968      	cbnz	r0, 8678 <z_time_slice+0x38>
    865c:	4a29      	ldr	r2, [pc, #164]	; (8704 <z_time_slice+0xc4>)
    865e:	492a      	ldr	r1, [pc, #168]	; (8708 <z_time_slice+0xc8>)
    8660:	482a      	ldr	r0, [pc, #168]	; (870c <z_time_slice+0xcc>)
    8662:	238e      	movs	r3, #142	; 0x8e
    8664:	f001 ff15 	bl	a492 <assert_print>
    8668:	4925      	ldr	r1, [pc, #148]	; (8700 <z_time_slice+0xc0>)
    866a:	4829      	ldr	r0, [pc, #164]	; (8710 <z_time_slice+0xd0>)
    866c:	f001 ff11 	bl	a492 <assert_print>
    8670:	4824      	ldr	r0, [pc, #144]	; (8704 <z_time_slice+0xc4>)
    8672:	218e      	movs	r1, #142	; 0x8e
    8674:	f001 ff06 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8678:	4821      	ldr	r0, [pc, #132]	; (8700 <z_time_slice+0xc0>)
    867a:	f7ff f997 	bl	79ac <z_spin_lock_set_owner>
	if (pending_current == _current) {
    867e:	4b25      	ldr	r3, [pc, #148]	; (8714 <z_time_slice+0xd4>)
    8680:	4a25      	ldr	r2, [pc, #148]	; (8718 <z_time_slice+0xd8>)
    8682:	689c      	ldr	r4, [r3, #8]
    8684:	6811      	ldr	r1, [r2, #0]
    8686:	428c      	cmp	r4, r1
    8688:	d119      	bne.n	86be <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    868a:	4620      	mov	r0, r4
    868c:	f7ff fc4e 	bl	7f2c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8690:	481b      	ldr	r0, [pc, #108]	; (8700 <z_time_slice+0xc0>)
    8692:	f7ff f97b 	bl	798c <z_spin_unlock_valid>
    8696:	b968      	cbnz	r0, 86b4 <z_time_slice+0x74>
    8698:	4a1a      	ldr	r2, [pc, #104]	; (8704 <z_time_slice+0xc4>)
    869a:	4920      	ldr	r1, [pc, #128]	; (871c <z_time_slice+0xdc>)
    869c:	481b      	ldr	r0, [pc, #108]	; (870c <z_time_slice+0xcc>)
    869e:	23b9      	movs	r3, #185	; 0xb9
    86a0:	f001 fef7 	bl	a492 <assert_print>
    86a4:	4916      	ldr	r1, [pc, #88]	; (8700 <z_time_slice+0xc0>)
    86a6:	481e      	ldr	r0, [pc, #120]	; (8720 <z_time_slice+0xe0>)
    86a8:	f001 fef3 	bl	a492 <assert_print>
    86ac:	4815      	ldr	r0, [pc, #84]	; (8704 <z_time_slice+0xc4>)
    86ae:	21b9      	movs	r1, #185	; 0xb9
    86b0:	f001 fee8 	bl	a484 <assert_post_action>
	__asm__ volatile(
    86b4:	f386 8811 	msr	BASEPRI, r6
    86b8:	f3bf 8f6f 	isb	sy
}
    86bc:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    86be:	2100      	movs	r1, #0
    86c0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    86c2:	4a18      	ldr	r2, [pc, #96]	; (8724 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    86c4:	6812      	ldr	r2, [r2, #0]
    86c6:	b1c2      	cbz	r2, 86fa <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    86c8:	89e2      	ldrh	r2, [r4, #14]
    86ca:	2a7f      	cmp	r2, #127	; 0x7f
    86cc:	d815      	bhi.n	86fa <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    86ce:	7b62      	ldrb	r2, [r4, #13]
    86d0:	06d2      	lsls	r2, r2, #27
    86d2:	d112      	bne.n	86fa <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    86d4:	4a14      	ldr	r2, [pc, #80]	; (8728 <z_time_slice+0xe8>)
    86d6:	f994 100e 	ldrsb.w	r1, [r4, #14]
    86da:	6812      	ldr	r2, [r2, #0]
    86dc:	4291      	cmp	r1, r2
    86de:	db0c      	blt.n	86fa <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    86e0:	4a12      	ldr	r2, [pc, #72]	; (872c <z_time_slice+0xec>)
    86e2:	4294      	cmp	r4, r2
    86e4:	d009      	beq.n	86fa <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    86e6:	691a      	ldr	r2, [r3, #16]
    86e8:	42aa      	cmp	r2, r5
    86ea:	dc03      	bgt.n	86f4 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    86ec:	4620      	mov	r0, r4
    86ee:	f7ff ff55 	bl	859c <move_thread_to_end_of_prio_q>
    86f2:	e7ca      	b.n	868a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    86f4:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    86f6:	611a      	str	r2, [r3, #16]
    86f8:	e7ca      	b.n	8690 <z_time_slice+0x50>
    86fa:	2200      	movs	r2, #0
    86fc:	e7fb      	b.n	86f6 <z_time_slice+0xb6>
    86fe:	bf00      	nop
    8700:	20004f18 	.word	0x20004f18
    8704:	0000bb0c 	.word	0x0000bb0c
    8708:	0000bb65 	.word	0x0000bb65
    870c:	0000b9c2 	.word	0x0000b9c2
    8710:	0000bb7a 	.word	0x0000bb7a
    8714:	20004edc 	.word	0x20004edc
    8718:	20004f0c 	.word	0x20004f0c
    871c:	0000bb39 	.word	0x0000bb39
    8720:	0000bb50 	.word	0x0000bb50
    8724:	20004f14 	.word	0x20004f14
    8728:	20004f10 	.word	0x20004f10
    872c:	20004678 	.word	0x20004678

00008730 <unready_thread>:
{
    8730:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    8732:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8736:	7b43      	ldrb	r3, [r0, #13]
    8738:	2a00      	cmp	r2, #0
{
    873a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    873c:	da06      	bge.n	874c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    873e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8742:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8744:	4601      	mov	r1, r0
    8746:	4806      	ldr	r0, [pc, #24]	; (8760 <unready_thread+0x30>)
    8748:	f7ff ff06 	bl	8558 <z_priq_dumb_remove>
	update_cache(thread == _current);
    874c:	4b05      	ldr	r3, [pc, #20]	; (8764 <unready_thread+0x34>)
    874e:	6898      	ldr	r0, [r3, #8]
    8750:	1b03      	subs	r3, r0, r4
    8752:	4258      	negs	r0, r3
}
    8754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    8758:	4158      	adcs	r0, r3
    875a:	f7ff bbfb 	b.w	7f54 <update_cache>
    875e:	bf00      	nop
    8760:	20004efc 	.word	0x20004efc
    8764:	20004edc 	.word	0x20004edc

00008768 <add_to_waitq_locked>:
{
    8768:	b538      	push	{r3, r4, r5, lr}
    876a:	4604      	mov	r4, r0
    876c:	460d      	mov	r5, r1
	unready_thread(thread);
    876e:	f7ff ffdf 	bl	8730 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8772:	7b63      	ldrb	r3, [r4, #13]
    8774:	f043 0302 	orr.w	r3, r3, #2
    8778:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    877a:	b34d      	cbz	r5, 87d0 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    877c:	4b15      	ldr	r3, [pc, #84]	; (87d4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    877e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8780:	429c      	cmp	r4, r3
    8782:	d109      	bne.n	8798 <add_to_waitq_locked+0x30>
    8784:	4914      	ldr	r1, [pc, #80]	; (87d8 <add_to_waitq_locked+0x70>)
    8786:	4815      	ldr	r0, [pc, #84]	; (87dc <add_to_waitq_locked+0x74>)
    8788:	4a15      	ldr	r2, [pc, #84]	; (87e0 <add_to_waitq_locked+0x78>)
    878a:	23ba      	movs	r3, #186	; 0xba
    878c:	f001 fe81 	bl	a492 <assert_print>
    8790:	4813      	ldr	r0, [pc, #76]	; (87e0 <add_to_waitq_locked+0x78>)
    8792:	21ba      	movs	r1, #186	; 0xba
    8794:	f001 fe76 	bl	a484 <assert_post_action>
	return list->head == list;
    8798:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    879a:	429d      	cmp	r5, r3
    879c:	d109      	bne.n	87b2 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    879e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    87a0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    87a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    87a6:	606c      	str	r4, [r5, #4]
}
    87a8:	e012      	b.n	87d0 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    87aa:	686a      	ldr	r2, [r5, #4]
    87ac:	4293      	cmp	r3, r2
    87ae:	d0f6      	beq.n	879e <add_to_waitq_locked+0x36>
    87b0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    87b2:	2b00      	cmp	r3, #0
    87b4:	d0f3      	beq.n	879e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    87b6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    87ba:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    87be:	428a      	cmp	r2, r1
    87c0:	d0f3      	beq.n	87aa <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    87c2:	4291      	cmp	r1, r2
    87c4:	ddf1      	ble.n	87aa <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    87c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    87c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    87cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    87ce:	605c      	str	r4, [r3, #4]
}
    87d0:	bd38      	pop	{r3, r4, r5, pc}
    87d2:	bf00      	nop
    87d4:	20004678 	.word	0x20004678
    87d8:	0000d0e9 	.word	0x0000d0e9
    87dc:	0000b9c2 	.word	0x0000b9c2
    87e0:	0000d0a0 	.word	0x0000d0a0

000087e4 <pend>:
{
    87e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87e8:	4604      	mov	r4, r0
    87ea:	4688      	mov	r8, r1
    87ec:	4616      	mov	r6, r2
    87ee:	461d      	mov	r5, r3
	__asm__ volatile(
    87f0:	f04f 0320 	mov.w	r3, #32
    87f4:	f3ef 8711 	mrs	r7, BASEPRI
    87f8:	f383 8812 	msr	BASEPRI_MAX, r3
    87fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8800:	481f      	ldr	r0, [pc, #124]	; (8880 <pend+0x9c>)
    8802:	f7ff f8b5 	bl	7970 <z_spin_lock_valid>
    8806:	b968      	cbnz	r0, 8824 <pend+0x40>
    8808:	4a1e      	ldr	r2, [pc, #120]	; (8884 <pend+0xa0>)
    880a:	491f      	ldr	r1, [pc, #124]	; (8888 <pend+0xa4>)
    880c:	481f      	ldr	r0, [pc, #124]	; (888c <pend+0xa8>)
    880e:	238e      	movs	r3, #142	; 0x8e
    8810:	f001 fe3f 	bl	a492 <assert_print>
    8814:	491a      	ldr	r1, [pc, #104]	; (8880 <pend+0x9c>)
    8816:	481e      	ldr	r0, [pc, #120]	; (8890 <pend+0xac>)
    8818:	f001 fe3b 	bl	a492 <assert_print>
    881c:	4819      	ldr	r0, [pc, #100]	; (8884 <pend+0xa0>)
    881e:	218e      	movs	r1, #142	; 0x8e
    8820:	f001 fe30 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8824:	4816      	ldr	r0, [pc, #88]	; (8880 <pend+0x9c>)
    8826:	f7ff f8c1 	bl	79ac <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    882a:	4620      	mov	r0, r4
    882c:	4641      	mov	r1, r8
    882e:	f7ff ff9b 	bl	8768 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8832:	4813      	ldr	r0, [pc, #76]	; (8880 <pend+0x9c>)
    8834:	f7ff f8aa 	bl	798c <z_spin_unlock_valid>
    8838:	b968      	cbnz	r0, 8856 <pend+0x72>
    883a:	4a12      	ldr	r2, [pc, #72]	; (8884 <pend+0xa0>)
    883c:	4915      	ldr	r1, [pc, #84]	; (8894 <pend+0xb0>)
    883e:	4813      	ldr	r0, [pc, #76]	; (888c <pend+0xa8>)
    8840:	23b9      	movs	r3, #185	; 0xb9
    8842:	f001 fe26 	bl	a492 <assert_print>
    8846:	490e      	ldr	r1, [pc, #56]	; (8880 <pend+0x9c>)
    8848:	4813      	ldr	r0, [pc, #76]	; (8898 <pend+0xb4>)
    884a:	f001 fe22 	bl	a492 <assert_print>
    884e:	480d      	ldr	r0, [pc, #52]	; (8884 <pend+0xa0>)
    8850:	21b9      	movs	r1, #185	; 0xb9
    8852:	f001 fe17 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8856:	f387 8811 	msr	BASEPRI, r7
    885a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    885e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    8862:	bf08      	it	eq
    8864:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8868:	d008      	beq.n	887c <pend+0x98>
    886a:	4632      	mov	r2, r6
    886c:	462b      	mov	r3, r5
    886e:	f104 0018 	add.w	r0, r4, #24
    8872:	490a      	ldr	r1, [pc, #40]	; (889c <pend+0xb8>)
}
    8874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8878:	f000 bd22 	b.w	92c0 <z_add_timeout>
    887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8880:	20004f18 	.word	0x20004f18
    8884:	0000bb0c 	.word	0x0000bb0c
    8888:	0000bb65 	.word	0x0000bb65
    888c:	0000b9c2 	.word	0x0000b9c2
    8890:	0000bb7a 	.word	0x0000bb7a
    8894:	0000bb39 	.word	0x0000bb39
    8898:	0000bb50 	.word	0x0000bb50
    889c:	00008b45 	.word	0x00008b45

000088a0 <z_pend_curr>:
{
    88a0:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    88a2:	4b11      	ldr	r3, [pc, #68]	; (88e8 <z_pend_curr+0x48>)
{
    88a4:	4604      	mov	r4, r0
	pending_current = _current;
    88a6:	6898      	ldr	r0, [r3, #8]
    88a8:	4b10      	ldr	r3, [pc, #64]	; (88ec <z_pend_curr+0x4c>)
{
    88aa:	460d      	mov	r5, r1
	pending_current = _current;
    88ac:	6018      	str	r0, [r3, #0]
{
    88ae:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    88b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    88b4:	f7ff ff96 	bl	87e4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88b8:	4620      	mov	r0, r4
    88ba:	f7ff f867 	bl	798c <z_spin_unlock_valid>
    88be:	b968      	cbnz	r0, 88dc <z_pend_curr+0x3c>
    88c0:	4a0b      	ldr	r2, [pc, #44]	; (88f0 <z_pend_curr+0x50>)
    88c2:	490c      	ldr	r1, [pc, #48]	; (88f4 <z_pend_curr+0x54>)
    88c4:	480c      	ldr	r0, [pc, #48]	; (88f8 <z_pend_curr+0x58>)
    88c6:	23d0      	movs	r3, #208	; 0xd0
    88c8:	f001 fde3 	bl	a492 <assert_print>
    88cc:	480b      	ldr	r0, [pc, #44]	; (88fc <z_pend_curr+0x5c>)
    88ce:	4621      	mov	r1, r4
    88d0:	f001 fddf 	bl	a492 <assert_print>
    88d4:	4806      	ldr	r0, [pc, #24]	; (88f0 <z_pend_curr+0x50>)
    88d6:	21d0      	movs	r1, #208	; 0xd0
    88d8:	f001 fdd4 	bl	a484 <assert_post_action>
    88dc:	4628      	mov	r0, r5
}
    88de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    88e2:	f7fb bb67 	b.w	3fb4 <arch_swap>
    88e6:	bf00      	nop
    88e8:	20004edc 	.word	0x20004edc
    88ec:	20004f0c 	.word	0x20004f0c
    88f0:	0000bb0c 	.word	0x0000bb0c
    88f4:	0000bb39 	.word	0x0000bb39
    88f8:	0000b9c2 	.word	0x0000b9c2
    88fc:	0000bb50 	.word	0x0000bb50

00008900 <z_set_prio>:
{
    8900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8902:	4604      	mov	r4, r0
    8904:	460e      	mov	r6, r1
	__asm__ volatile(
    8906:	f04f 0320 	mov.w	r3, #32
    890a:	f3ef 8711 	mrs	r7, BASEPRI
    890e:	f383 8812 	msr	BASEPRI_MAX, r3
    8912:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8916:	4839      	ldr	r0, [pc, #228]	; (89fc <z_set_prio+0xfc>)
    8918:	f7ff f82a 	bl	7970 <z_spin_lock_valid>
    891c:	b968      	cbnz	r0, 893a <z_set_prio+0x3a>
    891e:	4a38      	ldr	r2, [pc, #224]	; (8a00 <z_set_prio+0x100>)
    8920:	4938      	ldr	r1, [pc, #224]	; (8a04 <z_set_prio+0x104>)
    8922:	4839      	ldr	r0, [pc, #228]	; (8a08 <z_set_prio+0x108>)
    8924:	238e      	movs	r3, #142	; 0x8e
    8926:	f001 fdb4 	bl	a492 <assert_print>
    892a:	4934      	ldr	r1, [pc, #208]	; (89fc <z_set_prio+0xfc>)
    892c:	4837      	ldr	r0, [pc, #220]	; (8a0c <z_set_prio+0x10c>)
    892e:	f001 fdb0 	bl	a492 <assert_print>
    8932:	4833      	ldr	r0, [pc, #204]	; (8a00 <z_set_prio+0x100>)
    8934:	218e      	movs	r1, #142	; 0x8e
    8936:	f001 fda5 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    893a:	4830      	ldr	r0, [pc, #192]	; (89fc <z_set_prio+0xfc>)
    893c:	f7ff f836 	bl	79ac <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    8940:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8942:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8944:	b276      	sxtb	r6, r6
    8946:	d128      	bne.n	899a <z_set_prio+0x9a>
	return node->next != NULL;
    8948:	69a5      	ldr	r5, [r4, #24]
    894a:	bb35      	cbnz	r5, 899a <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8950:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8952:	482f      	ldr	r0, [pc, #188]	; (8a10 <z_set_prio+0x110>)
    8954:	4621      	mov	r1, r4
    8956:	f7ff fdff 	bl	8558 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    895a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    895c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    895e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8962:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8964:	4b2b      	ldr	r3, [pc, #172]	; (8a14 <z_set_prio+0x114>)
    8966:	429c      	cmp	r4, r3
    8968:	d109      	bne.n	897e <z_set_prio+0x7e>
    896a:	492b      	ldr	r1, [pc, #172]	; (8a18 <z_set_prio+0x118>)
    896c:	4826      	ldr	r0, [pc, #152]	; (8a08 <z_set_prio+0x108>)
    896e:	4a2b      	ldr	r2, [pc, #172]	; (8a1c <z_set_prio+0x11c>)
    8970:	23ba      	movs	r3, #186	; 0xba
    8972:	f001 fd8e 	bl	a492 <assert_print>
    8976:	4829      	ldr	r0, [pc, #164]	; (8a1c <z_set_prio+0x11c>)
    8978:	21ba      	movs	r1, #186	; 0xba
    897a:	f001 fd83 	bl	a484 <assert_post_action>
	return list->head == list;
    897e:	4a28      	ldr	r2, [pc, #160]	; (8a20 <z_set_prio+0x120>)
    8980:	4613      	mov	r3, r2
    8982:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8986:	4299      	cmp	r1, r3
    8988:	bf18      	it	ne
    898a:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    898c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    898e:	b9f5      	cbnz	r5, 89ce <z_set_prio+0xce>
	node->prev = tail;
    8990:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    8994:	600c      	str	r4, [r1, #0]
	list->tail = node;
    8996:	6254      	str	r4, [r2, #36]	; 0x24
}
    8998:	e026      	b.n	89e8 <z_set_prio+0xe8>
			thread->base.prio = prio;
    899a:	73a6      	strb	r6, [r4, #14]
    899c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    899e:	4817      	ldr	r0, [pc, #92]	; (89fc <z_set_prio+0xfc>)
    89a0:	f7fe fff4 	bl	798c <z_spin_unlock_valid>
    89a4:	b968      	cbnz	r0, 89c2 <z_set_prio+0xc2>
    89a6:	4a16      	ldr	r2, [pc, #88]	; (8a00 <z_set_prio+0x100>)
    89a8:	491e      	ldr	r1, [pc, #120]	; (8a24 <z_set_prio+0x124>)
    89aa:	4817      	ldr	r0, [pc, #92]	; (8a08 <z_set_prio+0x108>)
    89ac:	23b9      	movs	r3, #185	; 0xb9
    89ae:	f001 fd70 	bl	a492 <assert_print>
    89b2:	4912      	ldr	r1, [pc, #72]	; (89fc <z_set_prio+0xfc>)
    89b4:	481c      	ldr	r0, [pc, #112]	; (8a28 <z_set_prio+0x128>)
    89b6:	f001 fd6c 	bl	a492 <assert_print>
    89ba:	4811      	ldr	r0, [pc, #68]	; (8a00 <z_set_prio+0x100>)
    89bc:	21b9      	movs	r1, #185	; 0xb9
    89be:	f001 fd61 	bl	a484 <assert_post_action>
	__asm__ volatile(
    89c2:	f387 8811 	msr	BASEPRI, r7
    89c6:	f3bf 8f6f 	isb	sy
}
    89ca:	4620      	mov	r0, r4
    89cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    89ce:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    89d2:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    89d6:	42b0      	cmp	r0, r6
    89d8:	d00b      	beq.n	89f2 <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    89da:	4286      	cmp	r6, r0
    89dc:	dd09      	ble.n	89f2 <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    89de:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    89e0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    89e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    89e6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    89e8:	2001      	movs	r0, #1
    89ea:	f7ff fab3 	bl	7f54 <update_cache>
    89ee:	2401      	movs	r4, #1
    89f0:	e7d5      	b.n	899e <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    89f2:	42a9      	cmp	r1, r5
    89f4:	d0cc      	beq.n	8990 <z_set_prio+0x90>
    89f6:	682d      	ldr	r5, [r5, #0]
    89f8:	e7c9      	b.n	898e <z_set_prio+0x8e>
    89fa:	bf00      	nop
    89fc:	20004f18 	.word	0x20004f18
    8a00:	0000bb0c 	.word	0x0000bb0c
    8a04:	0000bb65 	.word	0x0000bb65
    8a08:	0000b9c2 	.word	0x0000b9c2
    8a0c:	0000bb7a 	.word	0x0000bb7a
    8a10:	20004efc 	.word	0x20004efc
    8a14:	20004678 	.word	0x20004678
    8a18:	0000d0e9 	.word	0x0000d0e9
    8a1c:	0000d0a0 	.word	0x0000d0a0
    8a20:	20004edc 	.word	0x20004edc
    8a24:	0000bb39 	.word	0x0000bb39
    8a28:	0000bb50 	.word	0x0000bb50

00008a2c <z_impl_k_thread_suspend>:
{
    8a2c:	b570      	push	{r4, r5, r6, lr}
    8a2e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8a30:	3018      	adds	r0, #24
    8a32:	f000 fd0f 	bl	9454 <z_abort_timeout>
	__asm__ volatile(
    8a36:	f04f 0320 	mov.w	r3, #32
    8a3a:	f3ef 8611 	mrs	r6, BASEPRI
    8a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    8a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a46:	4825      	ldr	r0, [pc, #148]	; (8adc <z_impl_k_thread_suspend+0xb0>)
    8a48:	f7fe ff92 	bl	7970 <z_spin_lock_valid>
    8a4c:	b968      	cbnz	r0, 8a6a <z_impl_k_thread_suspend+0x3e>
    8a4e:	4a24      	ldr	r2, [pc, #144]	; (8ae0 <z_impl_k_thread_suspend+0xb4>)
    8a50:	4924      	ldr	r1, [pc, #144]	; (8ae4 <z_impl_k_thread_suspend+0xb8>)
    8a52:	4825      	ldr	r0, [pc, #148]	; (8ae8 <z_impl_k_thread_suspend+0xbc>)
    8a54:	238e      	movs	r3, #142	; 0x8e
    8a56:	f001 fd1c 	bl	a492 <assert_print>
    8a5a:	4920      	ldr	r1, [pc, #128]	; (8adc <z_impl_k_thread_suspend+0xb0>)
    8a5c:	4823      	ldr	r0, [pc, #140]	; (8aec <z_impl_k_thread_suspend+0xc0>)
    8a5e:	f001 fd18 	bl	a492 <assert_print>
    8a62:	481f      	ldr	r0, [pc, #124]	; (8ae0 <z_impl_k_thread_suspend+0xb4>)
    8a64:	218e      	movs	r1, #142	; 0x8e
    8a66:	f001 fd0d 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a6a:	481c      	ldr	r0, [pc, #112]	; (8adc <z_impl_k_thread_suspend+0xb0>)
    8a6c:	f7fe ff9e 	bl	79ac <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    8a70:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8a74:	7b63      	ldrb	r3, [r4, #13]
    8a76:	2a00      	cmp	r2, #0
    8a78:	da06      	bge.n	8a88 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    8a7e:	481c      	ldr	r0, [pc, #112]	; (8af0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a80:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8a82:	4621      	mov	r1, r4
    8a84:	f7ff fd68 	bl	8558 <z_priq_dumb_remove>
		update_cache(thread == _current);
    8a88:	4d1a      	ldr	r5, [pc, #104]	; (8af4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8a8a:	7b63      	ldrb	r3, [r4, #13]
    8a8c:	68a8      	ldr	r0, [r5, #8]
    8a8e:	f043 0310 	orr.w	r3, r3, #16
    8a92:	7363      	strb	r3, [r4, #13]
    8a94:	1b03      	subs	r3, r0, r4
    8a96:	4258      	negs	r0, r3
    8a98:	4158      	adcs	r0, r3
    8a9a:	f7ff fa5b 	bl	7f54 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a9e:	480f      	ldr	r0, [pc, #60]	; (8adc <z_impl_k_thread_suspend+0xb0>)
    8aa0:	f7fe ff74 	bl	798c <z_spin_unlock_valid>
    8aa4:	b968      	cbnz	r0, 8ac2 <z_impl_k_thread_suspend+0x96>
    8aa6:	4a0e      	ldr	r2, [pc, #56]	; (8ae0 <z_impl_k_thread_suspend+0xb4>)
    8aa8:	4913      	ldr	r1, [pc, #76]	; (8af8 <z_impl_k_thread_suspend+0xcc>)
    8aaa:	480f      	ldr	r0, [pc, #60]	; (8ae8 <z_impl_k_thread_suspend+0xbc>)
    8aac:	23b9      	movs	r3, #185	; 0xb9
    8aae:	f001 fcf0 	bl	a492 <assert_print>
    8ab2:	490a      	ldr	r1, [pc, #40]	; (8adc <z_impl_k_thread_suspend+0xb0>)
    8ab4:	4811      	ldr	r0, [pc, #68]	; (8afc <z_impl_k_thread_suspend+0xd0>)
    8ab6:	f001 fcec 	bl	a492 <assert_print>
    8aba:	4809      	ldr	r0, [pc, #36]	; (8ae0 <z_impl_k_thread_suspend+0xb4>)
    8abc:	21b9      	movs	r1, #185	; 0xb9
    8abe:	f001 fce1 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8ac2:	f386 8811 	msr	BASEPRI, r6
    8ac6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8aca:	68ab      	ldr	r3, [r5, #8]
    8acc:	42a3      	cmp	r3, r4
    8ace:	d103      	bne.n	8ad8 <z_impl_k_thread_suspend+0xac>
}
    8ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8ad4:	f002 ba2b 	b.w	af2e <z_reschedule_unlocked>
}
    8ad8:	bd70      	pop	{r4, r5, r6, pc}
    8ada:	bf00      	nop
    8adc:	20004f18 	.word	0x20004f18
    8ae0:	0000bb0c 	.word	0x0000bb0c
    8ae4:	0000bb65 	.word	0x0000bb65
    8ae8:	0000b9c2 	.word	0x0000b9c2
    8aec:	0000bb7a 	.word	0x0000bb7a
    8af0:	20004efc 	.word	0x20004efc
    8af4:	20004edc 	.word	0x20004edc
    8af8:	0000bb39 	.word	0x0000bb39
    8afc:	0000bb50 	.word	0x0000bb50

00008b00 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    8b00:	6883      	ldr	r3, [r0, #8]
{
    8b02:	b510      	push	{r4, lr}
    8b04:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8b06:	b95b      	cbnz	r3, 8b20 <unpend_thread_no_timeout+0x20>
    8b08:	490b      	ldr	r1, [pc, #44]	; (8b38 <unpend_thread_no_timeout+0x38>)
    8b0a:	480c      	ldr	r0, [pc, #48]	; (8b3c <unpend_thread_no_timeout+0x3c>)
    8b0c:	4a0c      	ldr	r2, [pc, #48]	; (8b40 <unpend_thread_no_timeout+0x40>)
    8b0e:	f240 23b9 	movw	r3, #697	; 0x2b9
    8b12:	f001 fcbe 	bl	a492 <assert_print>
    8b16:	480a      	ldr	r0, [pc, #40]	; (8b40 <unpend_thread_no_timeout+0x40>)
    8b18:	f240 21b9 	movw	r1, #697	; 0x2b9
    8b1c:	f001 fcb2 	bl	a484 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8b20:	68a0      	ldr	r0, [r4, #8]
    8b22:	4621      	mov	r1, r4
    8b24:	f7ff fd18 	bl	8558 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8b28:	7b63      	ldrb	r3, [r4, #13]
    8b2a:	f023 0302 	bic.w	r3, r3, #2
    8b2e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8b30:	2300      	movs	r3, #0
    8b32:	60a3      	str	r3, [r4, #8]
}
    8b34:	bd10      	pop	{r4, pc}
    8b36:	bf00      	nop
    8b38:	0000d13b 	.word	0x0000d13b
    8b3c:	0000b9c2 	.word	0x0000b9c2
    8b40:	0000d0a0 	.word	0x0000d0a0

00008b44 <z_thread_timeout>:
{
    8b44:	b570      	push	{r4, r5, r6, lr}
    8b46:	4604      	mov	r4, r0
	__asm__ volatile(
    8b48:	f04f 0320 	mov.w	r3, #32
    8b4c:	f3ef 8611 	mrs	r6, BASEPRI
    8b50:	f383 8812 	msr	BASEPRI_MAX, r3
    8b54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b58:	4820      	ldr	r0, [pc, #128]	; (8bdc <z_thread_timeout+0x98>)
    8b5a:	f7fe ff09 	bl	7970 <z_spin_lock_valid>
    8b5e:	b968      	cbnz	r0, 8b7c <z_thread_timeout+0x38>
    8b60:	4a1f      	ldr	r2, [pc, #124]	; (8be0 <z_thread_timeout+0x9c>)
    8b62:	4920      	ldr	r1, [pc, #128]	; (8be4 <z_thread_timeout+0xa0>)
    8b64:	4820      	ldr	r0, [pc, #128]	; (8be8 <z_thread_timeout+0xa4>)
    8b66:	238e      	movs	r3, #142	; 0x8e
    8b68:	f001 fc93 	bl	a492 <assert_print>
    8b6c:	491b      	ldr	r1, [pc, #108]	; (8bdc <z_thread_timeout+0x98>)
    8b6e:	481f      	ldr	r0, [pc, #124]	; (8bec <z_thread_timeout+0xa8>)
    8b70:	f001 fc8f 	bl	a492 <assert_print>
    8b74:	481a      	ldr	r0, [pc, #104]	; (8be0 <z_thread_timeout+0x9c>)
    8b76:	218e      	movs	r1, #142	; 0x8e
    8b78:	f001 fc84 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b7c:	4817      	ldr	r0, [pc, #92]	; (8bdc <z_thread_timeout+0x98>)
    8b7e:	f7fe ff15 	bl	79ac <z_spin_lock_set_owner>
		if (!killed) {
    8b82:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8b86:	f013 0f28 	tst.w	r3, #40	; 0x28
    8b8a:	d110      	bne.n	8bae <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    8b8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8b90:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    8b94:	b113      	cbz	r3, 8b9c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    8b96:	4628      	mov	r0, r5
    8b98:	f7ff ffb2 	bl	8b00 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8b9c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8ba0:	f023 0314 	bic.w	r3, r3, #20
    8ba4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8ba8:	4628      	mov	r0, r5
    8baa:	f7ff fa0b 	bl	7fc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bae:	480b      	ldr	r0, [pc, #44]	; (8bdc <z_thread_timeout+0x98>)
    8bb0:	f7fe feec 	bl	798c <z_spin_unlock_valid>
    8bb4:	b968      	cbnz	r0, 8bd2 <z_thread_timeout+0x8e>
    8bb6:	4a0a      	ldr	r2, [pc, #40]	; (8be0 <z_thread_timeout+0x9c>)
    8bb8:	490d      	ldr	r1, [pc, #52]	; (8bf0 <z_thread_timeout+0xac>)
    8bba:	480b      	ldr	r0, [pc, #44]	; (8be8 <z_thread_timeout+0xa4>)
    8bbc:	23b9      	movs	r3, #185	; 0xb9
    8bbe:	f001 fc68 	bl	a492 <assert_print>
    8bc2:	4906      	ldr	r1, [pc, #24]	; (8bdc <z_thread_timeout+0x98>)
    8bc4:	480b      	ldr	r0, [pc, #44]	; (8bf4 <z_thread_timeout+0xb0>)
    8bc6:	f001 fc64 	bl	a492 <assert_print>
    8bca:	4805      	ldr	r0, [pc, #20]	; (8be0 <z_thread_timeout+0x9c>)
    8bcc:	21b9      	movs	r1, #185	; 0xb9
    8bce:	f001 fc59 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8bd2:	f386 8811 	msr	BASEPRI, r6
    8bd6:	f3bf 8f6f 	isb	sy
}
    8bda:	bd70      	pop	{r4, r5, r6, pc}
    8bdc:	20004f18 	.word	0x20004f18
    8be0:	0000bb0c 	.word	0x0000bb0c
    8be4:	0000bb65 	.word	0x0000bb65
    8be8:	0000b9c2 	.word	0x0000b9c2
    8bec:	0000bb7a 	.word	0x0000bb7a
    8bf0:	0000bb39 	.word	0x0000bb39
    8bf4:	0000bb50 	.word	0x0000bb50

00008bf8 <z_unpend1_no_timeout>:
{
    8bf8:	b570      	push	{r4, r5, r6, lr}
    8bfa:	4605      	mov	r5, r0
	__asm__ volatile(
    8bfc:	f04f 0320 	mov.w	r3, #32
    8c00:	f3ef 8611 	mrs	r6, BASEPRI
    8c04:	f383 8812 	msr	BASEPRI_MAX, r3
    8c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c0c:	481a      	ldr	r0, [pc, #104]	; (8c78 <z_unpend1_no_timeout+0x80>)
    8c0e:	f7fe feaf 	bl	7970 <z_spin_lock_valid>
    8c12:	b968      	cbnz	r0, 8c30 <z_unpend1_no_timeout+0x38>
    8c14:	4a19      	ldr	r2, [pc, #100]	; (8c7c <z_unpend1_no_timeout+0x84>)
    8c16:	491a      	ldr	r1, [pc, #104]	; (8c80 <z_unpend1_no_timeout+0x88>)
    8c18:	481a      	ldr	r0, [pc, #104]	; (8c84 <z_unpend1_no_timeout+0x8c>)
    8c1a:	238e      	movs	r3, #142	; 0x8e
    8c1c:	f001 fc39 	bl	a492 <assert_print>
    8c20:	4915      	ldr	r1, [pc, #84]	; (8c78 <z_unpend1_no_timeout+0x80>)
    8c22:	4819      	ldr	r0, [pc, #100]	; (8c88 <z_unpend1_no_timeout+0x90>)
    8c24:	f001 fc35 	bl	a492 <assert_print>
    8c28:	4814      	ldr	r0, [pc, #80]	; (8c7c <z_unpend1_no_timeout+0x84>)
    8c2a:	218e      	movs	r1, #142	; 0x8e
    8c2c:	f001 fc2a 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8c30:	4811      	ldr	r0, [pc, #68]	; (8c78 <z_unpend1_no_timeout+0x80>)
    8c32:	f7fe febb 	bl	79ac <z_spin_lock_set_owner>
	return list->head == list;
    8c36:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c38:	42a5      	cmp	r5, r4
    8c3a:	d01b      	beq.n	8c74 <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
    8c3c:	b114      	cbz	r4, 8c44 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    8c3e:	4620      	mov	r0, r4
    8c40:	f7ff ff5e 	bl	8b00 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c44:	480c      	ldr	r0, [pc, #48]	; (8c78 <z_unpend1_no_timeout+0x80>)
    8c46:	f7fe fea1 	bl	798c <z_spin_unlock_valid>
    8c4a:	b968      	cbnz	r0, 8c68 <z_unpend1_no_timeout+0x70>
    8c4c:	4a0b      	ldr	r2, [pc, #44]	; (8c7c <z_unpend1_no_timeout+0x84>)
    8c4e:	490f      	ldr	r1, [pc, #60]	; (8c8c <z_unpend1_no_timeout+0x94>)
    8c50:	480c      	ldr	r0, [pc, #48]	; (8c84 <z_unpend1_no_timeout+0x8c>)
    8c52:	23b9      	movs	r3, #185	; 0xb9
    8c54:	f001 fc1d 	bl	a492 <assert_print>
    8c58:	4907      	ldr	r1, [pc, #28]	; (8c78 <z_unpend1_no_timeout+0x80>)
    8c5a:	480d      	ldr	r0, [pc, #52]	; (8c90 <z_unpend1_no_timeout+0x98>)
    8c5c:	f001 fc19 	bl	a492 <assert_print>
    8c60:	4806      	ldr	r0, [pc, #24]	; (8c7c <z_unpend1_no_timeout+0x84>)
    8c62:	21b9      	movs	r1, #185	; 0xb9
    8c64:	f001 fc0e 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8c68:	f386 8811 	msr	BASEPRI, r6
    8c6c:	f3bf 8f6f 	isb	sy
}
    8c70:	4620      	mov	r0, r4
    8c72:	bd70      	pop	{r4, r5, r6, pc}
    8c74:	2400      	movs	r4, #0
    8c76:	e7e5      	b.n	8c44 <z_unpend1_no_timeout+0x4c>
    8c78:	20004f18 	.word	0x20004f18
    8c7c:	0000bb0c 	.word	0x0000bb0c
    8c80:	0000bb65 	.word	0x0000bb65
    8c84:	0000b9c2 	.word	0x0000b9c2
    8c88:	0000bb7a 	.word	0x0000bb7a
    8c8c:	0000bb39 	.word	0x0000bb39
    8c90:	0000bb50 	.word	0x0000bb50

00008c94 <z_unpend_first_thread>:
{
    8c94:	b570      	push	{r4, r5, r6, lr}
    8c96:	4605      	mov	r5, r0
	__asm__ volatile(
    8c98:	f04f 0320 	mov.w	r3, #32
    8c9c:	f3ef 8611 	mrs	r6, BASEPRI
    8ca0:	f383 8812 	msr	BASEPRI_MAX, r3
    8ca4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ca8:	481c      	ldr	r0, [pc, #112]	; (8d1c <z_unpend_first_thread+0x88>)
    8caa:	f7fe fe61 	bl	7970 <z_spin_lock_valid>
    8cae:	b968      	cbnz	r0, 8ccc <z_unpend_first_thread+0x38>
    8cb0:	4a1b      	ldr	r2, [pc, #108]	; (8d20 <z_unpend_first_thread+0x8c>)
    8cb2:	491c      	ldr	r1, [pc, #112]	; (8d24 <z_unpend_first_thread+0x90>)
    8cb4:	481c      	ldr	r0, [pc, #112]	; (8d28 <z_unpend_first_thread+0x94>)
    8cb6:	238e      	movs	r3, #142	; 0x8e
    8cb8:	f001 fbeb 	bl	a492 <assert_print>
    8cbc:	4917      	ldr	r1, [pc, #92]	; (8d1c <z_unpend_first_thread+0x88>)
    8cbe:	481b      	ldr	r0, [pc, #108]	; (8d2c <z_unpend_first_thread+0x98>)
    8cc0:	f001 fbe7 	bl	a492 <assert_print>
    8cc4:	4816      	ldr	r0, [pc, #88]	; (8d20 <z_unpend_first_thread+0x8c>)
    8cc6:	218e      	movs	r1, #142	; 0x8e
    8cc8:	f001 fbdc 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    8ccc:	4813      	ldr	r0, [pc, #76]	; (8d1c <z_unpend_first_thread+0x88>)
    8cce:	f7fe fe6d 	bl	79ac <z_spin_lock_set_owner>
	return list->head == list;
    8cd2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8cd4:	42a5      	cmp	r5, r4
    8cd6:	d01f      	beq.n	8d18 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    8cd8:	b134      	cbz	r4, 8ce8 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8cda:	4620      	mov	r0, r4
    8cdc:	f7ff ff10 	bl	8b00 <unpend_thread_no_timeout>
    8ce0:	f104 0018 	add.w	r0, r4, #24
    8ce4:	f000 fbb6 	bl	9454 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ce8:	480c      	ldr	r0, [pc, #48]	; (8d1c <z_unpend_first_thread+0x88>)
    8cea:	f7fe fe4f 	bl	798c <z_spin_unlock_valid>
    8cee:	b968      	cbnz	r0, 8d0c <z_unpend_first_thread+0x78>
    8cf0:	4a0b      	ldr	r2, [pc, #44]	; (8d20 <z_unpend_first_thread+0x8c>)
    8cf2:	490f      	ldr	r1, [pc, #60]	; (8d30 <z_unpend_first_thread+0x9c>)
    8cf4:	480c      	ldr	r0, [pc, #48]	; (8d28 <z_unpend_first_thread+0x94>)
    8cf6:	23b9      	movs	r3, #185	; 0xb9
    8cf8:	f001 fbcb 	bl	a492 <assert_print>
    8cfc:	4907      	ldr	r1, [pc, #28]	; (8d1c <z_unpend_first_thread+0x88>)
    8cfe:	480d      	ldr	r0, [pc, #52]	; (8d34 <z_unpend_first_thread+0xa0>)
    8d00:	f001 fbc7 	bl	a492 <assert_print>
    8d04:	4806      	ldr	r0, [pc, #24]	; (8d20 <z_unpend_first_thread+0x8c>)
    8d06:	21b9      	movs	r1, #185	; 0xb9
    8d08:	f001 fbbc 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8d0c:	f386 8811 	msr	BASEPRI, r6
    8d10:	f3bf 8f6f 	isb	sy
}
    8d14:	4620      	mov	r0, r4
    8d16:	bd70      	pop	{r4, r5, r6, pc}
    8d18:	2400      	movs	r4, #0
    8d1a:	e7e5      	b.n	8ce8 <z_unpend_first_thread+0x54>
    8d1c:	20004f18 	.word	0x20004f18
    8d20:	0000bb0c 	.word	0x0000bb0c
    8d24:	0000bb65 	.word	0x0000bb65
    8d28:	0000b9c2 	.word	0x0000b9c2
    8d2c:	0000bb7a 	.word	0x0000bb7a
    8d30:	0000bb39 	.word	0x0000bb39
    8d34:	0000bb50 	.word	0x0000bb50

00008d38 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8d38:	4b04      	ldr	r3, [pc, #16]	; (8d4c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8d3a:	2100      	movs	r1, #0
    8d3c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    8d40:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8d44:	4608      	mov	r0, r1
    8d46:	f7ff b989 	b.w	805c <k_sched_time_slice_set>
    8d4a:	bf00      	nop
    8d4c:	20004edc 	.word	0x20004edc

00008d50 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d52:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8d56:	b173      	cbz	r3, 8d76 <z_impl_k_yield+0x26>
    8d58:	493f      	ldr	r1, [pc, #252]	; (8e58 <z_impl_k_yield+0x108>)
    8d5a:	4a40      	ldr	r2, [pc, #256]	; (8e5c <z_impl_k_yield+0x10c>)
    8d5c:	4840      	ldr	r0, [pc, #256]	; (8e60 <z_impl_k_yield+0x110>)
    8d5e:	f240 5332 	movw	r3, #1330	; 0x532
    8d62:	f001 fb96 	bl	a492 <assert_print>
    8d66:	483f      	ldr	r0, [pc, #252]	; (8e64 <z_impl_k_yield+0x114>)
    8d68:	f001 fb93 	bl	a492 <assert_print>
    8d6c:	483b      	ldr	r0, [pc, #236]	; (8e5c <z_impl_k_yield+0x10c>)
    8d6e:	f240 5132 	movw	r1, #1330	; 0x532
    8d72:	f001 fb87 	bl	a484 <assert_post_action>
	__asm__ volatile(
    8d76:	f04f 0320 	mov.w	r3, #32
    8d7a:	f3ef 8611 	mrs	r6, BASEPRI
    8d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d86:	4838      	ldr	r0, [pc, #224]	; (8e68 <z_impl_k_yield+0x118>)
    8d88:	f7fe fdf2 	bl	7970 <z_spin_lock_valid>
    8d8c:	b968      	cbnz	r0, 8daa <z_impl_k_yield+0x5a>
    8d8e:	4a37      	ldr	r2, [pc, #220]	; (8e6c <z_impl_k_yield+0x11c>)
    8d90:	4937      	ldr	r1, [pc, #220]	; (8e70 <z_impl_k_yield+0x120>)
    8d92:	4833      	ldr	r0, [pc, #204]	; (8e60 <z_impl_k_yield+0x110>)
    8d94:	238e      	movs	r3, #142	; 0x8e
    8d96:	f001 fb7c 	bl	a492 <assert_print>
    8d9a:	4933      	ldr	r1, [pc, #204]	; (8e68 <z_impl_k_yield+0x118>)
    8d9c:	4835      	ldr	r0, [pc, #212]	; (8e74 <z_impl_k_yield+0x124>)
    8d9e:	f001 fb78 	bl	a492 <assert_print>
    8da2:	4832      	ldr	r0, [pc, #200]	; (8e6c <z_impl_k_yield+0x11c>)
    8da4:	218e      	movs	r1, #142	; 0x8e
    8da6:	f001 fb6d 	bl	a484 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8daa:	4d33      	ldr	r5, [pc, #204]	; (8e78 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    8dac:	482e      	ldr	r0, [pc, #184]	; (8e68 <z_impl_k_yield+0x118>)
    8dae:	f7fe fdfd 	bl	79ac <z_spin_lock_set_owner>
    8db2:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8db4:	7b4b      	ldrb	r3, [r1, #13]
    8db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8dba:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8dbc:	f105 0020 	add.w	r0, r5, #32
    8dc0:	f7ff fbca 	bl	8558 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8dc4:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8dc6:	7b63      	ldrb	r3, [r4, #13]
    8dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8dcc:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8dce:	4b2b      	ldr	r3, [pc, #172]	; (8e7c <z_impl_k_yield+0x12c>)
    8dd0:	429c      	cmp	r4, r3
    8dd2:	d109      	bne.n	8de8 <z_impl_k_yield+0x98>
    8dd4:	492a      	ldr	r1, [pc, #168]	; (8e80 <z_impl_k_yield+0x130>)
    8dd6:	4822      	ldr	r0, [pc, #136]	; (8e60 <z_impl_k_yield+0x110>)
    8dd8:	4a20      	ldr	r2, [pc, #128]	; (8e5c <z_impl_k_yield+0x10c>)
    8dda:	23ba      	movs	r3, #186	; 0xba
    8ddc:	f001 fb59 	bl	a492 <assert_print>
    8de0:	481e      	ldr	r0, [pc, #120]	; (8e5c <z_impl_k_yield+0x10c>)
    8de2:	21ba      	movs	r1, #186	; 0xba
    8de4:	f001 fb4e 	bl	a484 <assert_post_action>
	return list->head == list;
    8de8:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8dea:	4926      	ldr	r1, [pc, #152]	; (8e84 <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    8dec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8dee:	428b      	cmp	r3, r1
    8df0:	bf08      	it	eq
    8df2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8df4:	b923      	cbnz	r3, 8e00 <z_impl_k_yield+0xb0>
	node->prev = tail;
    8df6:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    8dfa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8dfc:	626c      	str	r4, [r5, #36]	; 0x24
}
    8dfe:	e00c      	b.n	8e1a <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    8e00:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8e04:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    8e08:	42b8      	cmp	r0, r7
    8e0a:	d020      	beq.n	8e4e <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8e0c:	4287      	cmp	r7, r0
    8e0e:	dd1e      	ble.n	8e4e <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    8e10:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8e12:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8e16:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8e18:	605c      	str	r4, [r3, #4]
	update_cache(1);
    8e1a:	2001      	movs	r0, #1
    8e1c:	f7ff f89a 	bl	7f54 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e20:	4811      	ldr	r0, [pc, #68]	; (8e68 <z_impl_k_yield+0x118>)
    8e22:	f7fe fdb3 	bl	798c <z_spin_unlock_valid>
    8e26:	b968      	cbnz	r0, 8e44 <z_impl_k_yield+0xf4>
    8e28:	4a10      	ldr	r2, [pc, #64]	; (8e6c <z_impl_k_yield+0x11c>)
    8e2a:	4917      	ldr	r1, [pc, #92]	; (8e88 <z_impl_k_yield+0x138>)
    8e2c:	480c      	ldr	r0, [pc, #48]	; (8e60 <z_impl_k_yield+0x110>)
    8e2e:	23d0      	movs	r3, #208	; 0xd0
    8e30:	f001 fb2f 	bl	a492 <assert_print>
    8e34:	490c      	ldr	r1, [pc, #48]	; (8e68 <z_impl_k_yield+0x118>)
    8e36:	4815      	ldr	r0, [pc, #84]	; (8e8c <z_impl_k_yield+0x13c>)
    8e38:	f001 fb2b 	bl	a492 <assert_print>
    8e3c:	480b      	ldr	r0, [pc, #44]	; (8e6c <z_impl_k_yield+0x11c>)
    8e3e:	21d0      	movs	r1, #208	; 0xd0
    8e40:	f001 fb20 	bl	a484 <assert_post_action>
    8e44:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e4a:	f7fb b8b3 	b.w	3fb4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8e4e:	4293      	cmp	r3, r2
    8e50:	d0d1      	beq.n	8df6 <z_impl_k_yield+0xa6>
    8e52:	681b      	ldr	r3, [r3, #0]
    8e54:	e7ce      	b.n	8df4 <z_impl_k_yield+0xa4>
    8e56:	bf00      	nop
    8e58:	0000cec8 	.word	0x0000cec8
    8e5c:	0000d0a0 	.word	0x0000d0a0
    8e60:	0000b9c2 	.word	0x0000b9c2
    8e64:	0000cffe 	.word	0x0000cffe
    8e68:	20004f18 	.word	0x20004f18
    8e6c:	0000bb0c 	.word	0x0000bb0c
    8e70:	0000bb65 	.word	0x0000bb65
    8e74:	0000bb7a 	.word	0x0000bb7a
    8e78:	20004edc 	.word	0x20004edc
    8e7c:	20004678 	.word	0x20004678
    8e80:	0000d0e9 	.word	0x0000d0e9
    8e84:	20004efc 	.word	0x20004efc
    8e88:	0000bb39 	.word	0x0000bb39
    8e8c:	0000bb50 	.word	0x0000bb50

00008e90 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e94:	4605      	mov	r5, r0
    8e96:	460e      	mov	r6, r1
    8e98:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8e9c:	b173      	cbz	r3, 8ebc <z_tick_sleep+0x2c>
    8e9e:	4941      	ldr	r1, [pc, #260]	; (8fa4 <z_tick_sleep+0x114>)
    8ea0:	4a41      	ldr	r2, [pc, #260]	; (8fa8 <z_tick_sleep+0x118>)
    8ea2:	4842      	ldr	r0, [pc, #264]	; (8fac <z_tick_sleep+0x11c>)
    8ea4:	f240 534e 	movw	r3, #1358	; 0x54e
    8ea8:	f001 faf3 	bl	a492 <assert_print>
    8eac:	4840      	ldr	r0, [pc, #256]	; (8fb0 <z_tick_sleep+0x120>)
    8eae:	f001 faf0 	bl	a492 <assert_print>
    8eb2:	483d      	ldr	r0, [pc, #244]	; (8fa8 <z_tick_sleep+0x118>)
    8eb4:	f240 514e 	movw	r1, #1358	; 0x54e
    8eb8:	f001 fae4 	bl	a484 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8ebc:	ea55 0306 	orrs.w	r3, r5, r6
    8ec0:	d103      	bne.n	8eca <z_tick_sleep+0x3a>
	z_impl_k_yield();
    8ec2:	f7ff ff45 	bl	8d50 <z_impl_k_yield>
		k_yield();
		return 0;
    8ec6:	2000      	movs	r0, #0
    8ec8:	e066      	b.n	8f98 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8eca:	1caa      	adds	r2, r5, #2
    8ecc:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    8ed0:	db64      	blt.n	8f9c <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8ed2:	f002 f836 	bl	af42 <sys_clock_tick_get_32>
    8ed6:	1944      	adds	r4, r0, r5
    8ed8:	f04f 0320 	mov.w	r3, #32
    8edc:	f3ef 8811 	mrs	r8, BASEPRI
    8ee0:	f383 8812 	msr	BASEPRI_MAX, r3
    8ee4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ee8:	4832      	ldr	r0, [pc, #200]	; (8fb4 <z_tick_sleep+0x124>)
    8eea:	f7fe fd41 	bl	7970 <z_spin_lock_valid>
    8eee:	b968      	cbnz	r0, 8f0c <z_tick_sleep+0x7c>
    8ef0:	4a31      	ldr	r2, [pc, #196]	; (8fb8 <z_tick_sleep+0x128>)
    8ef2:	4932      	ldr	r1, [pc, #200]	; (8fbc <z_tick_sleep+0x12c>)
    8ef4:	482d      	ldr	r0, [pc, #180]	; (8fac <z_tick_sleep+0x11c>)
    8ef6:	238e      	movs	r3, #142	; 0x8e
    8ef8:	f001 facb 	bl	a492 <assert_print>
    8efc:	492d      	ldr	r1, [pc, #180]	; (8fb4 <z_tick_sleep+0x124>)
    8efe:	4830      	ldr	r0, [pc, #192]	; (8fc0 <z_tick_sleep+0x130>)
    8f00:	f001 fac7 	bl	a492 <assert_print>
    8f04:	482c      	ldr	r0, [pc, #176]	; (8fb8 <z_tick_sleep+0x128>)
    8f06:	218e      	movs	r1, #142	; 0x8e
    8f08:	f001 fabc 	bl	a484 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8f0c:	4f2d      	ldr	r7, [pc, #180]	; (8fc4 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    8f0e:	4829      	ldr	r0, [pc, #164]	; (8fb4 <z_tick_sleep+0x124>)
    8f10:	f7fe fd4c 	bl	79ac <z_spin_lock_set_owner>
    8f14:	4b2c      	ldr	r3, [pc, #176]	; (8fc8 <z_tick_sleep+0x138>)
    8f16:	68b8      	ldr	r0, [r7, #8]
    8f18:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8f1a:	f7ff fc09 	bl	8730 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8f1e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8f20:	492a      	ldr	r1, [pc, #168]	; (8fcc <z_tick_sleep+0x13c>)
    8f22:	462a      	mov	r2, r5
    8f24:	4633      	mov	r3, r6
    8f26:	3018      	adds	r0, #24
    8f28:	f000 f9ca 	bl	92c0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8f2c:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f2e:	4821      	ldr	r0, [pc, #132]	; (8fb4 <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8f30:	7b53      	ldrb	r3, [r2, #13]
    8f32:	f043 0310 	orr.w	r3, r3, #16
    8f36:	7353      	strb	r3, [r2, #13]
    8f38:	f7fe fd28 	bl	798c <z_spin_unlock_valid>
    8f3c:	b968      	cbnz	r0, 8f5a <z_tick_sleep+0xca>
    8f3e:	4a1e      	ldr	r2, [pc, #120]	; (8fb8 <z_tick_sleep+0x128>)
    8f40:	4923      	ldr	r1, [pc, #140]	; (8fd0 <z_tick_sleep+0x140>)
    8f42:	481a      	ldr	r0, [pc, #104]	; (8fac <z_tick_sleep+0x11c>)
    8f44:	23d0      	movs	r3, #208	; 0xd0
    8f46:	f001 faa4 	bl	a492 <assert_print>
    8f4a:	491a      	ldr	r1, [pc, #104]	; (8fb4 <z_tick_sleep+0x124>)
    8f4c:	4821      	ldr	r0, [pc, #132]	; (8fd4 <z_tick_sleep+0x144>)
    8f4e:	f001 faa0 	bl	a492 <assert_print>
    8f52:	4819      	ldr	r0, [pc, #100]	; (8fb8 <z_tick_sleep+0x128>)
    8f54:	21d0      	movs	r1, #208	; 0xd0
    8f56:	f001 fa95 	bl	a484 <assert_post_action>
    8f5a:	4640      	mov	r0, r8
    8f5c:	f7fb f82a 	bl	3fb4 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    8f60:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8f62:	7b5b      	ldrb	r3, [r3, #13]
    8f64:	06db      	lsls	r3, r3, #27
    8f66:	d50e      	bpl.n	8f86 <z_tick_sleep+0xf6>
    8f68:	491b      	ldr	r1, [pc, #108]	; (8fd8 <z_tick_sleep+0x148>)
    8f6a:	4a0f      	ldr	r2, [pc, #60]	; (8fa8 <z_tick_sleep+0x118>)
    8f6c:	480f      	ldr	r0, [pc, #60]	; (8fac <z_tick_sleep+0x11c>)
    8f6e:	f240 536f 	movw	r3, #1391	; 0x56f
    8f72:	f001 fa8e 	bl	a492 <assert_print>
    8f76:	480e      	ldr	r0, [pc, #56]	; (8fb0 <z_tick_sleep+0x120>)
    8f78:	f001 fa8b 	bl	a492 <assert_print>
    8f7c:	480a      	ldr	r0, [pc, #40]	; (8fa8 <z_tick_sleep+0x118>)
    8f7e:	f240 516f 	movw	r1, #1391	; 0x56f
    8f82:	f001 fa7f 	bl	a484 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8f86:	f001 ffdc 	bl	af42 <sys_clock_tick_get_32>
    8f8a:	1a20      	subs	r0, r4, r0
    8f8c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8f90:	2801      	cmp	r0, #1
    8f92:	f173 0300 	sbcs.w	r3, r3, #0
    8f96:	db96      	blt.n	8ec6 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    8f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8f9c:	f06f 0401 	mvn.w	r4, #1
    8fa0:	1b64      	subs	r4, r4, r5
    8fa2:	e799      	b.n	8ed8 <z_tick_sleep+0x48>
    8fa4:	0000cec8 	.word	0x0000cec8
    8fa8:	0000d0a0 	.word	0x0000d0a0
    8fac:	0000b9c2 	.word	0x0000b9c2
    8fb0:	0000cffe 	.word	0x0000cffe
    8fb4:	20004f18 	.word	0x20004f18
    8fb8:	0000bb0c 	.word	0x0000bb0c
    8fbc:	0000bb65 	.word	0x0000bb65
    8fc0:	0000bb7a 	.word	0x0000bb7a
    8fc4:	20004edc 	.word	0x20004edc
    8fc8:	20004f0c 	.word	0x20004f0c
    8fcc:	00008b45 	.word	0x00008b45
    8fd0:	0000bb39 	.word	0x0000bb39
    8fd4:	0000bb50 	.word	0x0000bb50
    8fd8:	0000d152 	.word	0x0000d152

00008fdc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8fdc:	b538      	push	{r3, r4, r5, lr}
    8fde:	4605      	mov	r5, r0
    8fe0:	460c      	mov	r4, r1
    8fe2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8fe6:	b173      	cbz	r3, 9006 <z_impl_k_sleep+0x2a>
    8fe8:	4913      	ldr	r1, [pc, #76]	; (9038 <z_impl_k_sleep+0x5c>)
    8fea:	4a14      	ldr	r2, [pc, #80]	; (903c <z_impl_k_sleep+0x60>)
    8fec:	4814      	ldr	r0, [pc, #80]	; (9040 <z_impl_k_sleep+0x64>)
    8fee:	f240 537e 	movw	r3, #1406	; 0x57e
    8ff2:	f001 fa4e 	bl	a492 <assert_print>
    8ff6:	4813      	ldr	r0, [pc, #76]	; (9044 <z_impl_k_sleep+0x68>)
    8ff8:	f001 fa4b 	bl	a492 <assert_print>
    8ffc:	480f      	ldr	r0, [pc, #60]	; (903c <z_impl_k_sleep+0x60>)
    8ffe:	f240 517e 	movw	r1, #1406	; 0x57e
    9002:	f001 fa3f 	bl	a484 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9006:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    900a:	bf08      	it	eq
    900c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    9010:	d106      	bne.n	9020 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    9012:	4b0d      	ldr	r3, [pc, #52]	; (9048 <z_impl_k_sleep+0x6c>)
    9014:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9016:	f7ff fd09 	bl	8a2c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    901a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    901e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    9020:	4628      	mov	r0, r5
    9022:	4621      	mov	r1, r4
    9024:	f7ff ff34 	bl	8e90 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    9028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    902c:	fb80 0303 	smull	r0, r3, r0, r3
    9030:	0bc0      	lsrs	r0, r0, #15
    9032:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9036:	e7f2      	b.n	901e <z_impl_k_sleep+0x42>
    9038:	0000cec8 	.word	0x0000cec8
    903c:	0000d0a0 	.word	0x0000d0a0
    9040:	0000b9c2 	.word	0x0000b9c2
    9044:	0000cffe 	.word	0x0000cffe
    9048:	20004edc 	.word	0x20004edc

0000904c <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    904c:	b538      	push	{r3, r4, r5, lr}
    904e:	4c0a      	ldr	r4, [pc, #40]	; (9078 <z_impl_k_usleep+0x2c>)
    9050:	4a0a      	ldr	r2, [pc, #40]	; (907c <z_impl_k_usleep+0x30>)
    9052:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    9056:	2100      	movs	r1, #0
    9058:	fbc0 4105 	smlal	r4, r1, r0, r5
    905c:	2300      	movs	r3, #0
    905e:	4620      	mov	r0, r4
    9060:	f7f7 fc6c 	bl	93c <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    9064:	17c1      	asrs	r1, r0, #31
    9066:	f7ff ff13 	bl	8e90 <z_tick_sleep>
    906a:	4b04      	ldr	r3, [pc, #16]	; (907c <z_impl_k_usleep+0x30>)
    906c:	fb80 0303 	smull	r0, r3, r0, r3
    9070:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    9072:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    9076:	bd38      	pop	{r3, r4, r5, pc}
    9078:	000f423f 	.word	0x000f423f
    907c:	000f4240 	.word	0x000f4240

00009080 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9080:	4b01      	ldr	r3, [pc, #4]	; (9088 <z_impl_z_current_get+0x8>)
    9082:	6898      	ldr	r0, [r3, #8]
    9084:	4770      	bx	lr
    9086:	bf00      	nop
    9088:	20004edc 	.word	0x20004edc

0000908c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9090:	4604      	mov	r4, r0
    9092:	f04f 0320 	mov.w	r3, #32
    9096:	f3ef 8611 	mrs	r6, BASEPRI
    909a:	f383 8812 	msr	BASEPRI_MAX, r3
    909e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90a2:	4848      	ldr	r0, [pc, #288]	; (91c4 <z_thread_abort+0x138>)
    90a4:	f7fe fc64 	bl	7970 <z_spin_lock_valid>
    90a8:	b968      	cbnz	r0, 90c6 <z_thread_abort+0x3a>
    90aa:	4a47      	ldr	r2, [pc, #284]	; (91c8 <z_thread_abort+0x13c>)
    90ac:	4947      	ldr	r1, [pc, #284]	; (91cc <z_thread_abort+0x140>)
    90ae:	4848      	ldr	r0, [pc, #288]	; (91d0 <z_thread_abort+0x144>)
    90b0:	238e      	movs	r3, #142	; 0x8e
    90b2:	f001 f9ee 	bl	a492 <assert_print>
    90b6:	4943      	ldr	r1, [pc, #268]	; (91c4 <z_thread_abort+0x138>)
    90b8:	4846      	ldr	r0, [pc, #280]	; (91d4 <z_thread_abort+0x148>)
    90ba:	f001 f9ea 	bl	a492 <assert_print>
    90be:	4842      	ldr	r0, [pc, #264]	; (91c8 <z_thread_abort+0x13c>)
    90c0:	218e      	movs	r1, #142	; 0x8e
    90c2:	f001 f9df 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    90c6:	483f      	ldr	r0, [pc, #252]	; (91c4 <z_thread_abort+0x138>)
    90c8:	f7fe fc70 	bl	79ac <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    90cc:	7b63      	ldrb	r3, [r4, #13]
    90ce:	071a      	lsls	r2, r3, #28
    90d0:	d517      	bpl.n	9102 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90d2:	483c      	ldr	r0, [pc, #240]	; (91c4 <z_thread_abort+0x138>)
    90d4:	f7fe fc5a 	bl	798c <z_spin_unlock_valid>
    90d8:	b968      	cbnz	r0, 90f6 <z_thread_abort+0x6a>
    90da:	4a3b      	ldr	r2, [pc, #236]	; (91c8 <z_thread_abort+0x13c>)
    90dc:	493e      	ldr	r1, [pc, #248]	; (91d8 <z_thread_abort+0x14c>)
    90de:	483c      	ldr	r0, [pc, #240]	; (91d0 <z_thread_abort+0x144>)
    90e0:	23b9      	movs	r3, #185	; 0xb9
    90e2:	f001 f9d6 	bl	a492 <assert_print>
    90e6:	4937      	ldr	r1, [pc, #220]	; (91c4 <z_thread_abort+0x138>)
    90e8:	483c      	ldr	r0, [pc, #240]	; (91dc <z_thread_abort+0x150>)
    90ea:	f001 f9d2 	bl	a492 <assert_print>
    90ee:	4836      	ldr	r0, [pc, #216]	; (91c8 <z_thread_abort+0x13c>)
    90f0:	21b9      	movs	r1, #185	; 0xb9
    90f2:	f001 f9c7 	bl	a484 <assert_post_action>
	__asm__ volatile(
    90f6:	f386 8811 	msr	BASEPRI, r6
    90fa:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    90fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9102:	f023 0220 	bic.w	r2, r3, #32
    9106:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    910a:	09d2      	lsrs	r2, r2, #7
    910c:	d142      	bne.n	9194 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    910e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    9110:	68a3      	ldr	r3, [r4, #8]
    9112:	b113      	cbz	r3, 911a <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    9114:	4620      	mov	r0, r4
    9116:	f7ff fcf3 	bl	8b00 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    911a:	f104 0018 	add.w	r0, r4, #24
    911e:	f000 f999 	bl	9454 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9122:	f104 0758 	add.w	r7, r4, #88	; 0x58
    9126:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    912a:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    912c:	42bd      	cmp	r5, r7
    912e:	d001      	beq.n	9134 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9130:	2d00      	cmp	r5, #0
    9132:	d139      	bne.n	91a8 <z_thread_abort+0x11c>
		update_cache(1);
    9134:	2001      	movs	r0, #1
    9136:	f7fe ff0d 	bl	7f54 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    913a:	4b29      	ldr	r3, [pc, #164]	; (91e0 <z_thread_abort+0x154>)
    913c:	689b      	ldr	r3, [r3, #8]
    913e:	42a3      	cmp	r3, r4
    9140:	d1c7      	bne.n	90d2 <z_thread_abort+0x46>
    9142:	f3ef 8305 	mrs	r3, IPSR
    9146:	2b00      	cmp	r3, #0
    9148:	d1c3      	bne.n	90d2 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    914a:	481e      	ldr	r0, [pc, #120]	; (91c4 <z_thread_abort+0x138>)
    914c:	f7fe fc1e 	bl	798c <z_spin_unlock_valid>
    9150:	b968      	cbnz	r0, 916e <z_thread_abort+0xe2>
    9152:	4a1d      	ldr	r2, [pc, #116]	; (91c8 <z_thread_abort+0x13c>)
    9154:	4920      	ldr	r1, [pc, #128]	; (91d8 <z_thread_abort+0x14c>)
    9156:	481e      	ldr	r0, [pc, #120]	; (91d0 <z_thread_abort+0x144>)
    9158:	23d0      	movs	r3, #208	; 0xd0
    915a:	f001 f99a 	bl	a492 <assert_print>
    915e:	4919      	ldr	r1, [pc, #100]	; (91c4 <z_thread_abort+0x138>)
    9160:	481e      	ldr	r0, [pc, #120]	; (91dc <z_thread_abort+0x150>)
    9162:	f001 f996 	bl	a492 <assert_print>
    9166:	4818      	ldr	r0, [pc, #96]	; (91c8 <z_thread_abort+0x13c>)
    9168:	21d0      	movs	r1, #208	; 0xd0
    916a:	f001 f98b 	bl	a484 <assert_post_action>
    916e:	4630      	mov	r0, r6
    9170:	f7fa ff20 	bl	3fb4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    9174:	4a1b      	ldr	r2, [pc, #108]	; (91e4 <z_thread_abort+0x158>)
    9176:	491c      	ldr	r1, [pc, #112]	; (91e8 <z_thread_abort+0x15c>)
    9178:	4815      	ldr	r0, [pc, #84]	; (91d0 <z_thread_abort+0x144>)
    917a:	f240 63ac 	movw	r3, #1708	; 0x6ac
    917e:	f001 f988 	bl	a492 <assert_print>
    9182:	481a      	ldr	r0, [pc, #104]	; (91ec <z_thread_abort+0x160>)
    9184:	f001 f985 	bl	a492 <assert_print>
    9188:	4816      	ldr	r0, [pc, #88]	; (91e4 <z_thread_abort+0x158>)
    918a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    918e:	f001 f979 	bl	a484 <assert_post_action>
    9192:	e79e      	b.n	90d2 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9194:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9198:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    919c:	4814      	ldr	r0, [pc, #80]	; (91f0 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    919e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    91a0:	4621      	mov	r1, r4
    91a2:	f7ff f9d9 	bl	8558 <z_priq_dumb_remove>
}
    91a6:	e7b3      	b.n	9110 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    91a8:	4628      	mov	r0, r5
    91aa:	f7ff fca9 	bl	8b00 <unpend_thread_no_timeout>
    91ae:	f105 0018 	add.w	r0, r5, #24
    91b2:	f000 f94f 	bl	9454 <z_abort_timeout>
    91b6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    91ba:	4628      	mov	r0, r5
    91bc:	f7fe ff02 	bl	7fc4 <ready_thread>
    91c0:	e7b3      	b.n	912a <z_thread_abort+0x9e>
    91c2:	bf00      	nop
    91c4:	20004f18 	.word	0x20004f18
    91c8:	0000bb0c 	.word	0x0000bb0c
    91cc:	0000bb65 	.word	0x0000bb65
    91d0:	0000b9c2 	.word	0x0000b9c2
    91d4:	0000bb7a 	.word	0x0000bb7a
    91d8:	0000bb39 	.word	0x0000bb39
    91dc:	0000bb50 	.word	0x0000bb50
    91e0:	20004edc 	.word	0x20004edc
    91e4:	0000d0a0 	.word	0x0000d0a0
    91e8:	0000d2b1 	.word	0x0000d2b1
    91ec:	0000d192 	.word	0x0000d192
    91f0:	20004efc 	.word	0x20004efc

000091f4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    91f4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    91f6:	4806      	ldr	r0, [pc, #24]	; (9210 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    91f8:	4a06      	ldr	r2, [pc, #24]	; (9214 <z_data_copy+0x20>)
    91fa:	4907      	ldr	r1, [pc, #28]	; (9218 <z_data_copy+0x24>)
    91fc:	1a12      	subs	r2, r2, r0
    91fe:	f001 fe42 	bl	ae86 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9206:	4a05      	ldr	r2, [pc, #20]	; (921c <z_data_copy+0x28>)
    9208:	4905      	ldr	r1, [pc, #20]	; (9220 <z_data_copy+0x2c>)
    920a:	4806      	ldr	r0, [pc, #24]	; (9224 <z_data_copy+0x30>)
    920c:	f001 be3b 	b.w	ae86 <z_early_memcpy>
    9210:	20000000 	.word	0x20000000
    9214:	20004228 	.word	0x20004228
    9218:	0000d4ac 	.word	0x0000d4ac
    921c:	00000000 	.word	0x00000000
    9220:	0000d4ac 	.word	0x0000d4ac
    9224:	20000000 	.word	0x20000000

00009228 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9228:	4b03      	ldr	r3, [pc, #12]	; (9238 <elapsed+0x10>)
    922a:	681b      	ldr	r3, [r3, #0]
    922c:	b90b      	cbnz	r3, 9232 <elapsed+0xa>
    922e:	f7fd b815 	b.w	625c <sys_clock_elapsed>
}
    9232:	2000      	movs	r0, #0
    9234:	4770      	bx	lr
    9236:	bf00      	nop
    9238:	20004f1c 	.word	0x20004f1c

0000923c <next_timeout>:
	return list->head == list;
    923c:	4b11      	ldr	r3, [pc, #68]	; (9284 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    923e:	b510      	push	{r4, lr}
    9240:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9242:	429c      	cmp	r4, r3
    9244:	d10a      	bne.n	925c <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9246:	f7ff ffef 	bl	9228 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    924a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    924e:	4b0e      	ldr	r3, [pc, #56]	; (9288 <next_timeout+0x4c>)
    9250:	691b      	ldr	r3, [r3, #16]
    9252:	b113      	cbz	r3, 925a <next_timeout+0x1e>
    9254:	4298      	cmp	r0, r3
    9256:	bfa8      	it	ge
    9258:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    925a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    925c:	f7ff ffe4 	bl	9228 <elapsed>
	if ((to == NULL) ||
    9260:	2c00      	cmp	r4, #0
    9262:	d0f2      	beq.n	924a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9264:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9268:	1a1b      	subs	r3, r3, r0
    926a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    926e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9272:	f172 0100 	sbcs.w	r1, r2, #0
    9276:	dae8      	bge.n	924a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9278:	2a00      	cmp	r2, #0
    927a:	bfac      	ite	ge
    927c:	4618      	movge	r0, r3
    927e:	2000      	movlt	r0, #0
    9280:	e7e5      	b.n	924e <next_timeout+0x12>
    9282:	bf00      	nop
    9284:	200000e4 	.word	0x200000e4
    9288:	20004edc 	.word	0x20004edc

0000928c <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    928c:	4a0b      	ldr	r2, [pc, #44]	; (92bc <remove_timeout+0x30>)
    928e:	6803      	ldr	r3, [r0, #0]
    9290:	6852      	ldr	r2, [r2, #4]
    9292:	4290      	cmp	r0, r2
{
    9294:	b530      	push	{r4, r5, lr}
    9296:	d009      	beq.n	92ac <remove_timeout+0x20>
	if (next(t) != NULL) {
    9298:	b143      	cbz	r3, 92ac <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    929a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    929e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    92a2:	1912      	adds	r2, r2, r4
    92a4:	eb41 0105 	adc.w	r1, r1, r5
    92a8:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    92ac:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    92ae:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    92b0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    92b2:	2300      	movs	r3, #0
	node->prev = NULL;
    92b4:	e9c0 3300 	strd	r3, r3, [r0]
}
    92b8:	bd30      	pop	{r4, r5, pc}
    92ba:	bf00      	nop
    92bc:	200000e4 	.word	0x200000e4

000092c0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    92c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    92c4:	bf08      	it	eq
    92c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    92ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92ce:	4604      	mov	r4, r0
    92d0:	460e      	mov	r6, r1
    92d2:	4691      	mov	r9, r2
    92d4:	461d      	mov	r5, r3
    92d6:	4617      	mov	r7, r2
    92d8:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    92da:	f000 8095 	beq.w	9408 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    92de:	6803      	ldr	r3, [r0, #0]
    92e0:	b163      	cbz	r3, 92fc <z_add_timeout+0x3c>
    92e2:	494f      	ldr	r1, [pc, #316]	; (9420 <z_add_timeout+0x160>)
    92e4:	4a4f      	ldr	r2, [pc, #316]	; (9424 <z_add_timeout+0x164>)
    92e6:	4850      	ldr	r0, [pc, #320]	; (9428 <z_add_timeout+0x168>)
    92e8:	2363      	movs	r3, #99	; 0x63
    92ea:	f001 f8d2 	bl	a492 <assert_print>
    92ee:	484f      	ldr	r0, [pc, #316]	; (942c <z_add_timeout+0x16c>)
    92f0:	f001 f8cf 	bl	a492 <assert_print>
    92f4:	484b      	ldr	r0, [pc, #300]	; (9424 <z_add_timeout+0x164>)
    92f6:	2163      	movs	r1, #99	; 0x63
    92f8:	f001 f8c4 	bl	a484 <assert_post_action>
	to->fn = fn;
    92fc:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    92fe:	f04f 0320 	mov.w	r3, #32
    9302:	f3ef 8611 	mrs	r6, BASEPRI
    9306:	f383 8812 	msr	BASEPRI_MAX, r3
    930a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    930e:	4848      	ldr	r0, [pc, #288]	; (9430 <z_add_timeout+0x170>)
    9310:	f7fe fb2e 	bl	7970 <z_spin_lock_valid>
    9314:	b968      	cbnz	r0, 9332 <z_add_timeout+0x72>
    9316:	4a47      	ldr	r2, [pc, #284]	; (9434 <z_add_timeout+0x174>)
    9318:	4947      	ldr	r1, [pc, #284]	; (9438 <z_add_timeout+0x178>)
    931a:	4843      	ldr	r0, [pc, #268]	; (9428 <z_add_timeout+0x168>)
    931c:	238e      	movs	r3, #142	; 0x8e
    931e:	f001 f8b8 	bl	a492 <assert_print>
    9322:	4943      	ldr	r1, [pc, #268]	; (9430 <z_add_timeout+0x170>)
    9324:	4845      	ldr	r0, [pc, #276]	; (943c <z_add_timeout+0x17c>)
    9326:	f001 f8b4 	bl	a492 <assert_print>
    932a:	4842      	ldr	r0, [pc, #264]	; (9434 <z_add_timeout+0x174>)
    932c:	218e      	movs	r1, #142	; 0x8e
    932e:	f001 f8a9 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9332:	483f      	ldr	r0, [pc, #252]	; (9430 <z_add_timeout+0x170>)
    9334:	f7fe fb3a 	bl	79ac <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9338:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    933c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9340:	da22      	bge.n	9388 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9342:	493f      	ldr	r1, [pc, #252]	; (9440 <z_add_timeout+0x180>)
    9344:	e9d1 2000 	ldrd	r2, r0, [r1]
    9348:	f06f 0301 	mvn.w	r3, #1
    934c:	1a9b      	subs	r3, r3, r2
    934e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9352:	eb62 0000 	sbc.w	r0, r2, r0
    9356:	1bdf      	subs	r7, r3, r7
    9358:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    935c:	2f01      	cmp	r7, #1
    935e:	f170 0300 	sbcs.w	r3, r0, #0
    9362:	da01      	bge.n	9368 <z_add_timeout+0xa8>
    9364:	2701      	movs	r7, #1
    9366:	2000      	movs	r0, #0
	return list->head == list;
    9368:	4a36      	ldr	r2, [pc, #216]	; (9444 <z_add_timeout+0x184>)
    936a:	e9c4 7004 	strd	r7, r0, [r4, #16]
    936e:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    9370:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9374:	4293      	cmp	r3, r2
    9376:	bf08      	it	eq
    9378:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    937a:	b973      	cbnz	r3, 939a <z_add_timeout+0xda>
	node->prev = tail;
    937c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    9380:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    9384:	6054      	str	r4, [r2, #4]
}
    9386:	e01a      	b.n	93be <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    9388:	f7ff ff4e 	bl	9228 <elapsed>
    938c:	3701      	adds	r7, #1
    938e:	f145 0500 	adc.w	r5, r5, #0
    9392:	183f      	adds	r7, r7, r0
    9394:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9398:	e7e6      	b.n	9368 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    939a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    939e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    93a2:	4281      	cmp	r1, r0
    93a4:	eb75 0e07 	sbcs.w	lr, r5, r7
    93a8:	da30      	bge.n	940c <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    93aa:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    93ac:	6859      	ldr	r1, [r3, #4]
    93ae:	eb67 0705 	sbc.w	r7, r7, r5
    93b2:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    93b6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    93ba:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    93bc:	605c      	str	r4, [r3, #4]
	return list->head == list;
    93be:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    93c0:	4293      	cmp	r3, r2
    93c2:	d00b      	beq.n	93dc <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    93c4:	429c      	cmp	r4, r3
    93c6:	d109      	bne.n	93dc <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    93c8:	f7ff ff38 	bl	923c <next_timeout>

			if (next_time == 0 ||
    93cc:	b118      	cbz	r0, 93d6 <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    93ce:	4b1e      	ldr	r3, [pc, #120]	; (9448 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    93d0:	691b      	ldr	r3, [r3, #16]
    93d2:	4283      	cmp	r3, r0
    93d4:	d002      	beq.n	93dc <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    93d6:	2100      	movs	r1, #0
    93d8:	f7fc ff0e 	bl	61f8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93dc:	4814      	ldr	r0, [pc, #80]	; (9430 <z_add_timeout+0x170>)
    93de:	f7fe fad5 	bl	798c <z_spin_unlock_valid>
    93e2:	b968      	cbnz	r0, 9400 <z_add_timeout+0x140>
    93e4:	4a13      	ldr	r2, [pc, #76]	; (9434 <z_add_timeout+0x174>)
    93e6:	4919      	ldr	r1, [pc, #100]	; (944c <z_add_timeout+0x18c>)
    93e8:	480f      	ldr	r0, [pc, #60]	; (9428 <z_add_timeout+0x168>)
    93ea:	23b9      	movs	r3, #185	; 0xb9
    93ec:	f001 f851 	bl	a492 <assert_print>
    93f0:	490f      	ldr	r1, [pc, #60]	; (9430 <z_add_timeout+0x170>)
    93f2:	4817      	ldr	r0, [pc, #92]	; (9450 <z_add_timeout+0x190>)
    93f4:	f001 f84d 	bl	a492 <assert_print>
    93f8:	480e      	ldr	r0, [pc, #56]	; (9434 <z_add_timeout+0x174>)
    93fa:	21b9      	movs	r1, #185	; 0xb9
    93fc:	f001 f842 	bl	a484 <assert_post_action>
	__asm__ volatile(
    9400:	f386 8811 	msr	BASEPRI, r6
    9404:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    940c:	1a09      	subs	r1, r1, r0
    940e:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    9412:	4563      	cmp	r3, ip
    9414:	e9c4 1504 	strd	r1, r5, [r4, #16]
    9418:	d0b0      	beq.n	937c <z_add_timeout+0xbc>
    941a:	681b      	ldr	r3, [r3, #0]
    941c:	e7ad      	b.n	937a <z_add_timeout+0xba>
    941e:	bf00      	nop
    9420:	0000d1d8 	.word	0x0000d1d8
    9424:	0000d1b4 	.word	0x0000d1b4
    9428:	0000b9c2 	.word	0x0000b9c2
    942c:	0000cffe 	.word	0x0000cffe
    9430:	20004f20 	.word	0x20004f20
    9434:	0000bb0c 	.word	0x0000bb0c
    9438:	0000bb65 	.word	0x0000bb65
    943c:	0000bb7a 	.word	0x0000bb7a
    9440:	20004778 	.word	0x20004778
    9444:	200000e4 	.word	0x200000e4
    9448:	20004edc 	.word	0x20004edc
    944c:	0000bb39 	.word	0x0000bb39
    9450:	0000bb50 	.word	0x0000bb50

00009454 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    9454:	b538      	push	{r3, r4, r5, lr}
    9456:	4604      	mov	r4, r0
	__asm__ volatile(
    9458:	f04f 0320 	mov.w	r3, #32
    945c:	f3ef 8511 	mrs	r5, BASEPRI
    9460:	f383 8812 	msr	BASEPRI_MAX, r3
    9464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9468:	481a      	ldr	r0, [pc, #104]	; (94d4 <z_abort_timeout+0x80>)
    946a:	f7fe fa81 	bl	7970 <z_spin_lock_valid>
    946e:	b968      	cbnz	r0, 948c <z_abort_timeout+0x38>
    9470:	4a19      	ldr	r2, [pc, #100]	; (94d8 <z_abort_timeout+0x84>)
    9472:	491a      	ldr	r1, [pc, #104]	; (94dc <z_abort_timeout+0x88>)
    9474:	481a      	ldr	r0, [pc, #104]	; (94e0 <z_abort_timeout+0x8c>)
    9476:	238e      	movs	r3, #142	; 0x8e
    9478:	f001 f80b 	bl	a492 <assert_print>
    947c:	4915      	ldr	r1, [pc, #84]	; (94d4 <z_abort_timeout+0x80>)
    947e:	4819      	ldr	r0, [pc, #100]	; (94e4 <z_abort_timeout+0x90>)
    9480:	f001 f807 	bl	a492 <assert_print>
    9484:	4814      	ldr	r0, [pc, #80]	; (94d8 <z_abort_timeout+0x84>)
    9486:	218e      	movs	r1, #142	; 0x8e
    9488:	f000 fffc 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    948c:	4811      	ldr	r0, [pc, #68]	; (94d4 <z_abort_timeout+0x80>)
    948e:	f7fe fa8d 	bl	79ac <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    9492:	6823      	ldr	r3, [r4, #0]
    9494:	b1db      	cbz	r3, 94ce <z_abort_timeout+0x7a>
			remove_timeout(to);
    9496:	4620      	mov	r0, r4
    9498:	f7ff fef8 	bl	928c <remove_timeout>
			ret = 0;
    949c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    949e:	480d      	ldr	r0, [pc, #52]	; (94d4 <z_abort_timeout+0x80>)
    94a0:	f7fe fa74 	bl	798c <z_spin_unlock_valid>
    94a4:	b968      	cbnz	r0, 94c2 <z_abort_timeout+0x6e>
    94a6:	4a0c      	ldr	r2, [pc, #48]	; (94d8 <z_abort_timeout+0x84>)
    94a8:	490f      	ldr	r1, [pc, #60]	; (94e8 <z_abort_timeout+0x94>)
    94aa:	480d      	ldr	r0, [pc, #52]	; (94e0 <z_abort_timeout+0x8c>)
    94ac:	23b9      	movs	r3, #185	; 0xb9
    94ae:	f000 fff0 	bl	a492 <assert_print>
    94b2:	4908      	ldr	r1, [pc, #32]	; (94d4 <z_abort_timeout+0x80>)
    94b4:	480d      	ldr	r0, [pc, #52]	; (94ec <z_abort_timeout+0x98>)
    94b6:	f000 ffec 	bl	a492 <assert_print>
    94ba:	4807      	ldr	r0, [pc, #28]	; (94d8 <z_abort_timeout+0x84>)
    94bc:	21b9      	movs	r1, #185	; 0xb9
    94be:	f000 ffe1 	bl	a484 <assert_post_action>
	__asm__ volatile(
    94c2:	f385 8811 	msr	BASEPRI, r5
    94c6:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    94ca:	4620      	mov	r0, r4
    94cc:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    94ce:	f06f 0415 	mvn.w	r4, #21
    94d2:	e7e4      	b.n	949e <z_abort_timeout+0x4a>
    94d4:	20004f20 	.word	0x20004f20
    94d8:	0000bb0c 	.word	0x0000bb0c
    94dc:	0000bb65 	.word	0x0000bb65
    94e0:	0000b9c2 	.word	0x0000b9c2
    94e4:	0000bb7a 	.word	0x0000bb7a
    94e8:	0000bb39 	.word	0x0000bb39
    94ec:	0000bb50 	.word	0x0000bb50

000094f0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    94f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    94f2:	f04f 0320 	mov.w	r3, #32
    94f6:	f3ef 8511 	mrs	r5, BASEPRI
    94fa:	f383 8812 	msr	BASEPRI_MAX, r3
    94fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9502:	4818      	ldr	r0, [pc, #96]	; (9564 <z_get_next_timeout_expiry+0x74>)
    9504:	f7fe fa34 	bl	7970 <z_spin_lock_valid>
    9508:	b968      	cbnz	r0, 9526 <z_get_next_timeout_expiry+0x36>
    950a:	4a17      	ldr	r2, [pc, #92]	; (9568 <z_get_next_timeout_expiry+0x78>)
    950c:	4917      	ldr	r1, [pc, #92]	; (956c <z_get_next_timeout_expiry+0x7c>)
    950e:	4818      	ldr	r0, [pc, #96]	; (9570 <z_get_next_timeout_expiry+0x80>)
    9510:	238e      	movs	r3, #142	; 0x8e
    9512:	f000 ffbe 	bl	a492 <assert_print>
    9516:	4913      	ldr	r1, [pc, #76]	; (9564 <z_get_next_timeout_expiry+0x74>)
    9518:	4816      	ldr	r0, [pc, #88]	; (9574 <z_get_next_timeout_expiry+0x84>)
    951a:	f000 ffba 	bl	a492 <assert_print>
    951e:	4812      	ldr	r0, [pc, #72]	; (9568 <z_get_next_timeout_expiry+0x78>)
    9520:	218e      	movs	r1, #142	; 0x8e
    9522:	f000 ffaf 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9526:	480f      	ldr	r0, [pc, #60]	; (9564 <z_get_next_timeout_expiry+0x74>)
    9528:	f7fe fa40 	bl	79ac <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    952c:	f7ff fe86 	bl	923c <next_timeout>
    9530:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9532:	480c      	ldr	r0, [pc, #48]	; (9564 <z_get_next_timeout_expiry+0x74>)
    9534:	f7fe fa2a 	bl	798c <z_spin_unlock_valid>
    9538:	b968      	cbnz	r0, 9556 <z_get_next_timeout_expiry+0x66>
    953a:	4a0b      	ldr	r2, [pc, #44]	; (9568 <z_get_next_timeout_expiry+0x78>)
    953c:	490e      	ldr	r1, [pc, #56]	; (9578 <z_get_next_timeout_expiry+0x88>)
    953e:	480c      	ldr	r0, [pc, #48]	; (9570 <z_get_next_timeout_expiry+0x80>)
    9540:	23b9      	movs	r3, #185	; 0xb9
    9542:	f000 ffa6 	bl	a492 <assert_print>
    9546:	4907      	ldr	r1, [pc, #28]	; (9564 <z_get_next_timeout_expiry+0x74>)
    9548:	480c      	ldr	r0, [pc, #48]	; (957c <z_get_next_timeout_expiry+0x8c>)
    954a:	f000 ffa2 	bl	a492 <assert_print>
    954e:	4806      	ldr	r0, [pc, #24]	; (9568 <z_get_next_timeout_expiry+0x78>)
    9550:	21b9      	movs	r1, #185	; 0xb9
    9552:	f000 ff97 	bl	a484 <assert_post_action>
	__asm__ volatile(
    9556:	f385 8811 	msr	BASEPRI, r5
    955a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    955e:	4620      	mov	r0, r4
    9560:	bd38      	pop	{r3, r4, r5, pc}
    9562:	bf00      	nop
    9564:	20004f20 	.word	0x20004f20
    9568:	0000bb0c 	.word	0x0000bb0c
    956c:	0000bb65 	.word	0x0000bb65
    9570:	0000b9c2 	.word	0x0000b9c2
    9574:	0000bb7a 	.word	0x0000bb7a
    9578:	0000bb39 	.word	0x0000bb39
    957c:	0000bb50 	.word	0x0000bb50

00009580 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9580:	b570      	push	{r4, r5, r6, lr}
    9582:	4604      	mov	r4, r0
    9584:	460d      	mov	r5, r1
	__asm__ volatile(
    9586:	f04f 0320 	mov.w	r3, #32
    958a:	f3ef 8611 	mrs	r6, BASEPRI
    958e:	f383 8812 	msr	BASEPRI_MAX, r3
    9592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9596:	481c      	ldr	r0, [pc, #112]	; (9608 <z_set_timeout_expiry+0x88>)
    9598:	f7fe f9ea 	bl	7970 <z_spin_lock_valid>
    959c:	b968      	cbnz	r0, 95ba <z_set_timeout_expiry+0x3a>
    959e:	4a1b      	ldr	r2, [pc, #108]	; (960c <z_set_timeout_expiry+0x8c>)
    95a0:	491b      	ldr	r1, [pc, #108]	; (9610 <z_set_timeout_expiry+0x90>)
    95a2:	481c      	ldr	r0, [pc, #112]	; (9614 <z_set_timeout_expiry+0x94>)
    95a4:	238e      	movs	r3, #142	; 0x8e
    95a6:	f000 ff74 	bl	a492 <assert_print>
    95aa:	4917      	ldr	r1, [pc, #92]	; (9608 <z_set_timeout_expiry+0x88>)
    95ac:	481a      	ldr	r0, [pc, #104]	; (9618 <z_set_timeout_expiry+0x98>)
    95ae:	f000 ff70 	bl	a492 <assert_print>
    95b2:	4816      	ldr	r0, [pc, #88]	; (960c <z_set_timeout_expiry+0x8c>)
    95b4:	218e      	movs	r1, #142	; 0x8e
    95b6:	f000 ff65 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    95ba:	4813      	ldr	r0, [pc, #76]	; (9608 <z_set_timeout_expiry+0x88>)
    95bc:	f7fe f9f6 	bl	79ac <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    95c0:	f7ff fe3c 	bl	923c <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    95c4:	2801      	cmp	r0, #1
    95c6:	dd07      	ble.n	95d8 <z_set_timeout_expiry+0x58>
    95c8:	42a0      	cmp	r0, r4
    95ca:	db05      	blt.n	95d8 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    95cc:	42a0      	cmp	r0, r4
    95ce:	4629      	mov	r1, r5
    95d0:	bfa8      	it	ge
    95d2:	4620      	movge	r0, r4
    95d4:	f7fc fe10 	bl	61f8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95d8:	480b      	ldr	r0, [pc, #44]	; (9608 <z_set_timeout_expiry+0x88>)
    95da:	f7fe f9d7 	bl	798c <z_spin_unlock_valid>
    95de:	b968      	cbnz	r0, 95fc <z_set_timeout_expiry+0x7c>
    95e0:	4a0a      	ldr	r2, [pc, #40]	; (960c <z_set_timeout_expiry+0x8c>)
    95e2:	490e      	ldr	r1, [pc, #56]	; (961c <z_set_timeout_expiry+0x9c>)
    95e4:	480b      	ldr	r0, [pc, #44]	; (9614 <z_set_timeout_expiry+0x94>)
    95e6:	23b9      	movs	r3, #185	; 0xb9
    95e8:	f000 ff53 	bl	a492 <assert_print>
    95ec:	4906      	ldr	r1, [pc, #24]	; (9608 <z_set_timeout_expiry+0x88>)
    95ee:	480c      	ldr	r0, [pc, #48]	; (9620 <z_set_timeout_expiry+0xa0>)
    95f0:	f000 ff4f 	bl	a492 <assert_print>
    95f4:	4805      	ldr	r0, [pc, #20]	; (960c <z_set_timeout_expiry+0x8c>)
    95f6:	21b9      	movs	r1, #185	; 0xb9
    95f8:	f000 ff44 	bl	a484 <assert_post_action>
	__asm__ volatile(
    95fc:	f386 8811 	msr	BASEPRI, r6
    9600:	f3bf 8f6f 	isb	sy
		}
	}
}
    9604:	bd70      	pop	{r4, r5, r6, pc}
    9606:	bf00      	nop
    9608:	20004f20 	.word	0x20004f20
    960c:	0000bb0c 	.word	0x0000bb0c
    9610:	0000bb65 	.word	0x0000bb65
    9614:	0000b9c2 	.word	0x0000b9c2
    9618:	0000bb7a 	.word	0x0000bb7a
    961c:	0000bb39 	.word	0x0000bb39
    9620:	0000bb50 	.word	0x0000bb50

00009624 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9628:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    962a:	f7ff f809 	bl	8640 <z_time_slice>
	__asm__ volatile(
    962e:	f04f 0320 	mov.w	r3, #32
    9632:	f3ef 8511 	mrs	r5, BASEPRI
    9636:	f383 8812 	msr	BASEPRI_MAX, r3
    963a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    963e:	484c      	ldr	r0, [pc, #304]	; (9770 <sys_clock_announce+0x14c>)
    9640:	f7fe f996 	bl	7970 <z_spin_lock_valid>
    9644:	b968      	cbnz	r0, 9662 <sys_clock_announce+0x3e>
    9646:	4a4b      	ldr	r2, [pc, #300]	; (9774 <sys_clock_announce+0x150>)
    9648:	494b      	ldr	r1, [pc, #300]	; (9778 <sys_clock_announce+0x154>)
    964a:	484c      	ldr	r0, [pc, #304]	; (977c <sys_clock_announce+0x158>)
    964c:	238e      	movs	r3, #142	; 0x8e
    964e:	f000 ff20 	bl	a492 <assert_print>
    9652:	4947      	ldr	r1, [pc, #284]	; (9770 <sys_clock_announce+0x14c>)
    9654:	484a      	ldr	r0, [pc, #296]	; (9780 <sys_clock_announce+0x15c>)
    9656:	f000 ff1c 	bl	a492 <assert_print>
    965a:	4846      	ldr	r0, [pc, #280]	; (9774 <sys_clock_announce+0x150>)
    965c:	218e      	movs	r1, #142	; 0x8e
    965e:	f000 ff11 	bl	a484 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9662:	4f48      	ldr	r7, [pc, #288]	; (9784 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    9664:	4842      	ldr	r0, [pc, #264]	; (9770 <sys_clock_announce+0x14c>)
	return list->head == list;
    9666:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9788 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    966a:	4e48      	ldr	r6, [pc, #288]	; (978c <sys_clock_announce+0x168>)
    966c:	f7fe f99e 	bl	79ac <z_spin_lock_set_owner>
	announce_remaining = ticks;
    9670:	603c      	str	r4, [r7, #0]
    9672:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9676:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9678:	4544      	cmp	r4, r8
		curr_tick += dt;
    967a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    967e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    9682:	d00b      	beq.n	969c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9684:	b154      	cbz	r4, 969c <sys_clock_announce+0x78>
    9686:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    968a:	429a      	cmp	r2, r3
    968c:	eb70 090c 	sbcs.w	r9, r0, ip
    9690:	da28      	bge.n	96e4 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    9692:	1a9b      	subs	r3, r3, r2
    9694:	eb6c 0c00 	sbc.w	ip, ip, r0
    9698:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    969c:	1851      	adds	r1, r2, r1
    969e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    96a2:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    96a4:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    96a8:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    96aa:	f7ff fdc7 	bl	923c <next_timeout>
    96ae:	4621      	mov	r1, r4
    96b0:	f7fc fda2 	bl	61f8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96b4:	482e      	ldr	r0, [pc, #184]	; (9770 <sys_clock_announce+0x14c>)
    96b6:	f7fe f969 	bl	798c <z_spin_unlock_valid>
    96ba:	b968      	cbnz	r0, 96d8 <sys_clock_announce+0xb4>
    96bc:	4a2d      	ldr	r2, [pc, #180]	; (9774 <sys_clock_announce+0x150>)
    96be:	4934      	ldr	r1, [pc, #208]	; (9790 <sys_clock_announce+0x16c>)
    96c0:	482e      	ldr	r0, [pc, #184]	; (977c <sys_clock_announce+0x158>)
    96c2:	23b9      	movs	r3, #185	; 0xb9
    96c4:	f000 fee5 	bl	a492 <assert_print>
    96c8:	4929      	ldr	r1, [pc, #164]	; (9770 <sys_clock_announce+0x14c>)
    96ca:	4832      	ldr	r0, [pc, #200]	; (9794 <sys_clock_announce+0x170>)
    96cc:	f000 fee1 	bl	a492 <assert_print>
    96d0:	4828      	ldr	r0, [pc, #160]	; (9774 <sys_clock_announce+0x150>)
    96d2:	21b9      	movs	r1, #185	; 0xb9
    96d4:	f000 fed6 	bl	a484 <assert_post_action>
	__asm__ volatile(
    96d8:	f385 8811 	msr	BASEPRI, r5
    96dc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    96e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    96e4:	1859      	adds	r1, r3, r1
    96e6:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    96ea:	1ad3      	subs	r3, r2, r3
    96ec:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    96ee:	2200      	movs	r2, #0
    96f0:	2300      	movs	r3, #0
		curr_tick += dt;
    96f2:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    96f6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    96fa:	4620      	mov	r0, r4
    96fc:	f7ff fdc6 	bl	928c <remove_timeout>
    9700:	481b      	ldr	r0, [pc, #108]	; (9770 <sys_clock_announce+0x14c>)
    9702:	f7fe f943 	bl	798c <z_spin_unlock_valid>
    9706:	b968      	cbnz	r0, 9724 <sys_clock_announce+0x100>
    9708:	4a1a      	ldr	r2, [pc, #104]	; (9774 <sys_clock_announce+0x150>)
    970a:	4921      	ldr	r1, [pc, #132]	; (9790 <sys_clock_announce+0x16c>)
    970c:	481b      	ldr	r0, [pc, #108]	; (977c <sys_clock_announce+0x158>)
    970e:	23b9      	movs	r3, #185	; 0xb9
    9710:	f000 febf 	bl	a492 <assert_print>
    9714:	4916      	ldr	r1, [pc, #88]	; (9770 <sys_clock_announce+0x14c>)
    9716:	481f      	ldr	r0, [pc, #124]	; (9794 <sys_clock_announce+0x170>)
    9718:	f000 febb 	bl	a492 <assert_print>
    971c:	4815      	ldr	r0, [pc, #84]	; (9774 <sys_clock_announce+0x150>)
    971e:	21b9      	movs	r1, #185	; 0xb9
    9720:	f000 feb0 	bl	a484 <assert_post_action>
    9724:	f385 8811 	msr	BASEPRI, r5
    9728:	f3bf 8f6f 	isb	sy
		t->fn(t);
    972c:	68a3      	ldr	r3, [r4, #8]
    972e:	4620      	mov	r0, r4
    9730:	4798      	blx	r3
	__asm__ volatile(
    9732:	f04f 0320 	mov.w	r3, #32
    9736:	f3ef 8511 	mrs	r5, BASEPRI
    973a:	f383 8812 	msr	BASEPRI_MAX, r3
    973e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9742:	480b      	ldr	r0, [pc, #44]	; (9770 <sys_clock_announce+0x14c>)
    9744:	f7fe f914 	bl	7970 <z_spin_lock_valid>
    9748:	b968      	cbnz	r0, 9766 <sys_clock_announce+0x142>
    974a:	4a0a      	ldr	r2, [pc, #40]	; (9774 <sys_clock_announce+0x150>)
    974c:	490a      	ldr	r1, [pc, #40]	; (9778 <sys_clock_announce+0x154>)
    974e:	480b      	ldr	r0, [pc, #44]	; (977c <sys_clock_announce+0x158>)
    9750:	238e      	movs	r3, #142	; 0x8e
    9752:	f000 fe9e 	bl	a492 <assert_print>
    9756:	4906      	ldr	r1, [pc, #24]	; (9770 <sys_clock_announce+0x14c>)
    9758:	4809      	ldr	r0, [pc, #36]	; (9780 <sys_clock_announce+0x15c>)
    975a:	f000 fe9a 	bl	a492 <assert_print>
    975e:	4805      	ldr	r0, [pc, #20]	; (9774 <sys_clock_announce+0x150>)
    9760:	218e      	movs	r1, #142	; 0x8e
    9762:	f000 fe8f 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9766:	4802      	ldr	r0, [pc, #8]	; (9770 <sys_clock_announce+0x14c>)
    9768:	f7fe f920 	bl	79ac <z_spin_lock_set_owner>
	return k;
    976c:	e781      	b.n	9672 <sys_clock_announce+0x4e>
    976e:	bf00      	nop
    9770:	20004f20 	.word	0x20004f20
    9774:	0000bb0c 	.word	0x0000bb0c
    9778:	0000bb65 	.word	0x0000bb65
    977c:	0000b9c2 	.word	0x0000b9c2
    9780:	0000bb7a 	.word	0x0000bb7a
    9784:	20004f1c 	.word	0x20004f1c
    9788:	200000e4 	.word	0x200000e4
    978c:	20004778 	.word	0x20004778
    9790:	0000bb39 	.word	0x0000bb39
    9794:	0000bb50 	.word	0x0000bb50

00009798 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9798:	b570      	push	{r4, r5, r6, lr}
    979a:	f04f 0320 	mov.w	r3, #32
    979e:	f3ef 8611 	mrs	r6, BASEPRI
    97a2:	f383 8812 	msr	BASEPRI_MAX, r3
    97a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    97aa:	481b      	ldr	r0, [pc, #108]	; (9818 <sys_clock_tick_get+0x80>)
    97ac:	f7fe f8e0 	bl	7970 <z_spin_lock_valid>
    97b0:	b968      	cbnz	r0, 97ce <sys_clock_tick_get+0x36>
    97b2:	4a1a      	ldr	r2, [pc, #104]	; (981c <sys_clock_tick_get+0x84>)
    97b4:	491a      	ldr	r1, [pc, #104]	; (9820 <sys_clock_tick_get+0x88>)
    97b6:	481b      	ldr	r0, [pc, #108]	; (9824 <sys_clock_tick_get+0x8c>)
    97b8:	238e      	movs	r3, #142	; 0x8e
    97ba:	f000 fe6a 	bl	a492 <assert_print>
    97be:	4916      	ldr	r1, [pc, #88]	; (9818 <sys_clock_tick_get+0x80>)
    97c0:	4819      	ldr	r0, [pc, #100]	; (9828 <sys_clock_tick_get+0x90>)
    97c2:	f000 fe66 	bl	a492 <assert_print>
    97c6:	4815      	ldr	r0, [pc, #84]	; (981c <sys_clock_tick_get+0x84>)
    97c8:	218e      	movs	r1, #142	; 0x8e
    97ca:	f000 fe5b 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    97ce:	4812      	ldr	r0, [pc, #72]	; (9818 <sys_clock_tick_get+0x80>)
    97d0:	f7fe f8ec 	bl	79ac <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    97d4:	f7fc fd42 	bl	625c <sys_clock_elapsed>
    97d8:	4a14      	ldr	r2, [pc, #80]	; (982c <sys_clock_tick_get+0x94>)
    97da:	e9d2 4500 	ldrd	r4, r5, [r2]
    97de:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97e0:	480d      	ldr	r0, [pc, #52]	; (9818 <sys_clock_tick_get+0x80>)
    97e2:	f145 0500 	adc.w	r5, r5, #0
    97e6:	f7fe f8d1 	bl	798c <z_spin_unlock_valid>
    97ea:	b968      	cbnz	r0, 9808 <sys_clock_tick_get+0x70>
    97ec:	4a0b      	ldr	r2, [pc, #44]	; (981c <sys_clock_tick_get+0x84>)
    97ee:	4910      	ldr	r1, [pc, #64]	; (9830 <sys_clock_tick_get+0x98>)
    97f0:	480c      	ldr	r0, [pc, #48]	; (9824 <sys_clock_tick_get+0x8c>)
    97f2:	23b9      	movs	r3, #185	; 0xb9
    97f4:	f000 fe4d 	bl	a492 <assert_print>
    97f8:	4907      	ldr	r1, [pc, #28]	; (9818 <sys_clock_tick_get+0x80>)
    97fa:	480e      	ldr	r0, [pc, #56]	; (9834 <sys_clock_tick_get+0x9c>)
    97fc:	f000 fe49 	bl	a492 <assert_print>
    9800:	4806      	ldr	r0, [pc, #24]	; (981c <sys_clock_tick_get+0x84>)
    9802:	21b9      	movs	r1, #185	; 0xb9
    9804:	f000 fe3e 	bl	a484 <assert_post_action>
	__asm__ volatile(
    9808:	f386 8811 	msr	BASEPRI, r6
    980c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9810:	4620      	mov	r0, r4
    9812:	4629      	mov	r1, r5
    9814:	bd70      	pop	{r4, r5, r6, pc}
    9816:	bf00      	nop
    9818:	20004f20 	.word	0x20004f20
    981c:	0000bb0c 	.word	0x0000bb0c
    9820:	0000bb65 	.word	0x0000bb65
    9824:	0000b9c2 	.word	0x0000b9c2
    9828:	0000bb7a 	.word	0x0000bb7a
    982c:	20004778 	.word	0x20004778
    9830:	0000bb39 	.word	0x0000bb39
    9834:	0000bb50 	.word	0x0000bb50

00009838 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9838:	b570      	push	{r4, r5, r6, lr}
    983a:	4604      	mov	r4, r0
	__asm__ volatile(
    983c:	f04f 0320 	mov.w	r3, #32
    9840:	f3ef 8511 	mrs	r5, BASEPRI
    9844:	f383 8812 	msr	BASEPRI_MAX, r3
    9848:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    984c:	484d      	ldr	r0, [pc, #308]	; (9984 <z_timer_expiration_handler+0x14c>)
    984e:	f7fe f88f 	bl	7970 <z_spin_lock_valid>
    9852:	b968      	cbnz	r0, 9870 <z_timer_expiration_handler+0x38>
    9854:	4a4c      	ldr	r2, [pc, #304]	; (9988 <z_timer_expiration_handler+0x150>)
    9856:	494d      	ldr	r1, [pc, #308]	; (998c <z_timer_expiration_handler+0x154>)
    9858:	484d      	ldr	r0, [pc, #308]	; (9990 <z_timer_expiration_handler+0x158>)
    985a:	238e      	movs	r3, #142	; 0x8e
    985c:	f000 fe19 	bl	a492 <assert_print>
    9860:	4948      	ldr	r1, [pc, #288]	; (9984 <z_timer_expiration_handler+0x14c>)
    9862:	484c      	ldr	r0, [pc, #304]	; (9994 <z_timer_expiration_handler+0x15c>)
    9864:	f000 fe15 	bl	a492 <assert_print>
    9868:	4847      	ldr	r0, [pc, #284]	; (9988 <z_timer_expiration_handler+0x150>)
    986a:	218e      	movs	r1, #142	; 0x8e
    986c:	f000 fe0a 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9870:	4844      	ldr	r0, [pc, #272]	; (9984 <z_timer_expiration_handler+0x14c>)
    9872:	f7fe f89b 	bl	79ac <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9876:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    987a:	3301      	adds	r3, #1
    987c:	f142 0200 	adc.w	r2, r2, #0
    9880:	2b02      	cmp	r3, #2
    9882:	f172 0200 	sbcs.w	r2, r2, #0
    9886:	d305      	bcc.n	9894 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9888:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    988c:	4942      	ldr	r1, [pc, #264]	; (9998 <z_timer_expiration_handler+0x160>)
    988e:	4620      	mov	r0, r4
    9890:	f7ff fd16 	bl	92c0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9894:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9896:	3301      	adds	r3, #1
    9898:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    989a:	6a23      	ldr	r3, [r4, #32]
    989c:	2b00      	cmp	r3, #0
    989e:	d035      	beq.n	990c <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98a0:	4838      	ldr	r0, [pc, #224]	; (9984 <z_timer_expiration_handler+0x14c>)
    98a2:	f7fe f873 	bl	798c <z_spin_unlock_valid>
    98a6:	b968      	cbnz	r0, 98c4 <z_timer_expiration_handler+0x8c>
    98a8:	4a37      	ldr	r2, [pc, #220]	; (9988 <z_timer_expiration_handler+0x150>)
    98aa:	493c      	ldr	r1, [pc, #240]	; (999c <z_timer_expiration_handler+0x164>)
    98ac:	4838      	ldr	r0, [pc, #224]	; (9990 <z_timer_expiration_handler+0x158>)
    98ae:	23b9      	movs	r3, #185	; 0xb9
    98b0:	f000 fdef 	bl	a492 <assert_print>
    98b4:	4933      	ldr	r1, [pc, #204]	; (9984 <z_timer_expiration_handler+0x14c>)
    98b6:	483a      	ldr	r0, [pc, #232]	; (99a0 <z_timer_expiration_handler+0x168>)
    98b8:	f000 fdeb 	bl	a492 <assert_print>
    98bc:	4832      	ldr	r0, [pc, #200]	; (9988 <z_timer_expiration_handler+0x150>)
    98be:	21b9      	movs	r1, #185	; 0xb9
    98c0:	f000 fde0 	bl	a484 <assert_post_action>
	__asm__ volatile(
    98c4:	f385 8811 	msr	BASEPRI, r5
    98c8:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    98cc:	6a23      	ldr	r3, [r4, #32]
    98ce:	4620      	mov	r0, r4
    98d0:	4798      	blx	r3
	__asm__ volatile(
    98d2:	f04f 0320 	mov.w	r3, #32
    98d6:	f3ef 8511 	mrs	r5, BASEPRI
    98da:	f383 8812 	msr	BASEPRI_MAX, r3
    98de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98e2:	4828      	ldr	r0, [pc, #160]	; (9984 <z_timer_expiration_handler+0x14c>)
    98e4:	f7fe f844 	bl	7970 <z_spin_lock_valid>
    98e8:	b968      	cbnz	r0, 9906 <z_timer_expiration_handler+0xce>
    98ea:	4a27      	ldr	r2, [pc, #156]	; (9988 <z_timer_expiration_handler+0x150>)
    98ec:	4927      	ldr	r1, [pc, #156]	; (998c <z_timer_expiration_handler+0x154>)
    98ee:	4828      	ldr	r0, [pc, #160]	; (9990 <z_timer_expiration_handler+0x158>)
    98f0:	238e      	movs	r3, #142	; 0x8e
    98f2:	f000 fdce 	bl	a492 <assert_print>
    98f6:	4923      	ldr	r1, [pc, #140]	; (9984 <z_timer_expiration_handler+0x14c>)
    98f8:	4826      	ldr	r0, [pc, #152]	; (9994 <z_timer_expiration_handler+0x15c>)
    98fa:	f000 fdca 	bl	a492 <assert_print>
    98fe:	4822      	ldr	r0, [pc, #136]	; (9988 <z_timer_expiration_handler+0x150>)
    9900:	218e      	movs	r1, #142	; 0x8e
    9902:	f000 fdbf 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9906:	481f      	ldr	r0, [pc, #124]	; (9984 <z_timer_expiration_handler+0x14c>)
    9908:	f7fe f850 	bl	79ac <z_spin_lock_set_owner>
	return list->head == list;
    990c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9910:	42a6      	cmp	r6, r4
    9912:	d000      	beq.n	9916 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9914:	b9b6      	cbnz	r6, 9944 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9916:	481b      	ldr	r0, [pc, #108]	; (9984 <z_timer_expiration_handler+0x14c>)
    9918:	f7fe f838 	bl	798c <z_spin_unlock_valid>
    991c:	b968      	cbnz	r0, 993a <z_timer_expiration_handler+0x102>
    991e:	4a1a      	ldr	r2, [pc, #104]	; (9988 <z_timer_expiration_handler+0x150>)
    9920:	491e      	ldr	r1, [pc, #120]	; (999c <z_timer_expiration_handler+0x164>)
    9922:	481b      	ldr	r0, [pc, #108]	; (9990 <z_timer_expiration_handler+0x158>)
    9924:	23b9      	movs	r3, #185	; 0xb9
    9926:	f000 fdb4 	bl	a492 <assert_print>
    992a:	4916      	ldr	r1, [pc, #88]	; (9984 <z_timer_expiration_handler+0x14c>)
    992c:	481c      	ldr	r0, [pc, #112]	; (99a0 <z_timer_expiration_handler+0x168>)
    992e:	f000 fdb0 	bl	a492 <assert_print>
    9932:	4815      	ldr	r0, [pc, #84]	; (9988 <z_timer_expiration_handler+0x150>)
    9934:	21b9      	movs	r1, #185	; 0xb9
    9936:	f000 fda5 	bl	a484 <assert_post_action>
	__asm__ volatile(
    993a:	f385 8811 	msr	BASEPRI, r5
    993e:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9942:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    9944:	4630      	mov	r0, r6
    9946:	f7fe fc37 	bl	81b8 <z_unpend_thread_no_timeout>
    994a:	2300      	movs	r3, #0
    994c:	480d      	ldr	r0, [pc, #52]	; (9984 <z_timer_expiration_handler+0x14c>)
    994e:	67b3      	str	r3, [r6, #120]	; 0x78
    9950:	f7fe f81c 	bl	798c <z_spin_unlock_valid>
    9954:	b968      	cbnz	r0, 9972 <z_timer_expiration_handler+0x13a>
    9956:	4a0c      	ldr	r2, [pc, #48]	; (9988 <z_timer_expiration_handler+0x150>)
    9958:	4910      	ldr	r1, [pc, #64]	; (999c <z_timer_expiration_handler+0x164>)
    995a:	480d      	ldr	r0, [pc, #52]	; (9990 <z_timer_expiration_handler+0x158>)
    995c:	23b9      	movs	r3, #185	; 0xb9
    995e:	f000 fd98 	bl	a492 <assert_print>
    9962:	4908      	ldr	r1, [pc, #32]	; (9984 <z_timer_expiration_handler+0x14c>)
    9964:	480e      	ldr	r0, [pc, #56]	; (99a0 <z_timer_expiration_handler+0x168>)
    9966:	f000 fd94 	bl	a492 <assert_print>
    996a:	4807      	ldr	r0, [pc, #28]	; (9988 <z_timer_expiration_handler+0x150>)
    996c:	21b9      	movs	r1, #185	; 0xb9
    996e:	f000 fd89 	bl	a484 <assert_post_action>
    9972:	f385 8811 	msr	BASEPRI, r5
    9976:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    997a:	4630      	mov	r0, r6
}
    997c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9980:	f7fe bbd2 	b.w	8128 <z_ready_thread>
    9984:	20004f24 	.word	0x20004f24
    9988:	0000bb0c 	.word	0x0000bb0c
    998c:	0000bb65 	.word	0x0000bb65
    9990:	0000b9c2 	.word	0x0000b9c2
    9994:	0000bb7a 	.word	0x0000bb7a
    9998:	00009839 	.word	0x00009839
    999c:	0000bb39 	.word	0x0000bb39
    99a0:	0000bb50 	.word	0x0000bb50

000099a4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    99a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    99ac:	bf08      	it	eq
    99ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    99b2:	4605      	mov	r5, r0
    99b4:	4614      	mov	r4, r2
    99b6:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    99ba:	4619      	mov	r1, r3
    99bc:	4691      	mov	r9, r2
    99be:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    99c0:	d037      	beq.n	9a32 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    99c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    99c6:	bf08      	it	eq
    99c8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    99cc:	4637      	mov	r7, r6
    99ce:	4682      	mov	sl, r0
    99d0:	d011      	beq.n	99f6 <z_impl_k_timer_start+0x52>
    99d2:	ea50 0306 	orrs.w	r3, r0, r6
    99d6:	d00e      	beq.n	99f6 <z_impl_k_timer_start+0x52>
    99d8:	1c72      	adds	r2, r6, #1
    99da:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    99de:	db0a      	blt.n	99f6 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    99e0:	2e02      	cmp	r6, #2
    99e2:	4684      	mov	ip, r0
    99e4:	f170 0000 	sbcs.w	r0, r0, #0
    99e8:	bfbc      	itt	lt
    99ea:	2702      	movlt	r7, #2
    99ec:	f04f 0c00 	movlt.w	ip, #0
    99f0:	3f01      	subs	r7, #1
    99f2:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    99f6:	1c63      	adds	r3, r4, #1
    99f8:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    99fc:	db0a      	blt.n	9a14 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    99fe:	2c01      	cmp	r4, #1
    9a00:	f171 0300 	sbcs.w	r3, r1, #0
    9a04:	4622      	mov	r2, r4
    9a06:	bfbc      	itt	lt
    9a08:	2201      	movlt	r2, #1
    9a0a:	2100      	movlt	r1, #0
    9a0c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    9a10:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    9a14:	4628      	mov	r0, r5
    9a16:	f7ff fd1d 	bl	9454 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9a1a:	2300      	movs	r3, #0
    9a1c:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    9a1e:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a22:	464a      	mov	r2, r9
    9a24:	4643      	mov	r3, r8
    9a26:	4628      	mov	r0, r5
    9a28:	4903      	ldr	r1, [pc, #12]	; (9a38 <z_impl_k_timer_start+0x94>)
		     duration);
}
    9a2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9a2e:	f7ff bc47 	b.w	92c0 <z_add_timeout>
}
    9a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a36:	bf00      	nop
    9a38:	00009839 	.word	0x00009839

00009a3c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9a3c:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    9a3e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    9a42:	4606      	mov	r6, r0
    9a44:	460d      	mov	r5, r1
    9a46:	d20b      	bcs.n	9a60 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9a48:	f04f 0800 	mov.w	r8, #0
    9a4c:	f04f 0900 	mov.w	r9, #0
    9a50:	e9cd 8900 	strd	r8, r9, [sp]
    9a54:	f041 0104 	orr.w	r1, r1, #4
    9a58:	f000 f89c 	bl	9b94 <k_heap_aligned_alloc>
	if (mem == NULL) {
    9a5c:	4604      	mov	r4, r0
    9a5e:	b920      	cbnz	r0, 9a6a <z_heap_aligned_alloc+0x2e>
		return NULL;
    9a60:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    9a62:	4620      	mov	r0, r4
    9a64:	b002      	add	sp, #8
    9a66:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    9a6a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    9a6e:	2d00      	cmp	r5, #0
    9a70:	d0f7      	beq.n	9a62 <z_heap_aligned_alloc+0x26>
    9a72:	1e6b      	subs	r3, r5, #1
    9a74:	421c      	tst	r4, r3
    9a76:	d0f4      	beq.n	9a62 <z_heap_aligned_alloc+0x26>
    9a78:	2325      	movs	r3, #37	; 0x25
    9a7a:	4a07      	ldr	r2, [pc, #28]	; (9a98 <z_heap_aligned_alloc+0x5c>)
    9a7c:	4907      	ldr	r1, [pc, #28]	; (9a9c <z_heap_aligned_alloc+0x60>)
    9a7e:	4808      	ldr	r0, [pc, #32]	; (9aa0 <z_heap_aligned_alloc+0x64>)
    9a80:	f000 fd07 	bl	a492 <assert_print>
    9a84:	4621      	mov	r1, r4
    9a86:	4807      	ldr	r0, [pc, #28]	; (9aa4 <z_heap_aligned_alloc+0x68>)
    9a88:	462a      	mov	r2, r5
    9a8a:	f000 fd02 	bl	a492 <assert_print>
    9a8e:	4802      	ldr	r0, [pc, #8]	; (9a98 <z_heap_aligned_alloc+0x5c>)
    9a90:	2125      	movs	r1, #37	; 0x25
    9a92:	f000 fcf7 	bl	a484 <assert_post_action>
    9a96:	e7e4      	b.n	9a62 <z_heap_aligned_alloc+0x26>
    9a98:	0000d1f8 	.word	0x0000d1f8
    9a9c:	0000d21c 	.word	0x0000d21c
    9aa0:	0000b9c2 	.word	0x0000b9c2
    9aa4:	0000d24e 	.word	0x0000d24e

00009aa8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    9aa8:	2803      	cmp	r0, #3
{
    9aaa:	b538      	push	{r3, r4, r5, lr}
    9aac:	4604      	mov	r4, r0
    9aae:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    9ab0:	d901      	bls.n	9ab6 <k_aligned_alloc+0xe>
    9ab2:	0783      	lsls	r3, r0, #30
    9ab4:	d00c      	beq.n	9ad0 <k_aligned_alloc+0x28>
    9ab6:	4912      	ldr	r1, [pc, #72]	; (9b00 <k_aligned_alloc+0x58>)
    9ab8:	4a12      	ldr	r2, [pc, #72]	; (9b04 <k_aligned_alloc+0x5c>)
    9aba:	4813      	ldr	r0, [pc, #76]	; (9b08 <k_aligned_alloc+0x60>)
    9abc:	2342      	movs	r3, #66	; 0x42
    9abe:	f000 fce8 	bl	a492 <assert_print>
    9ac2:	4812      	ldr	r0, [pc, #72]	; (9b0c <k_aligned_alloc+0x64>)
    9ac4:	f000 fce5 	bl	a492 <assert_print>
    9ac8:	480e      	ldr	r0, [pc, #56]	; (9b04 <k_aligned_alloc+0x5c>)
    9aca:	2142      	movs	r1, #66	; 0x42
    9acc:	f000 fcda 	bl	a484 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    9ad0:	1e63      	subs	r3, r4, #1
    9ad2:	4223      	tst	r3, r4
    9ad4:	d00c      	beq.n	9af0 <k_aligned_alloc+0x48>
    9ad6:	490e      	ldr	r1, [pc, #56]	; (9b10 <k_aligned_alloc+0x68>)
    9ad8:	4a0a      	ldr	r2, [pc, #40]	; (9b04 <k_aligned_alloc+0x5c>)
    9ada:	480b      	ldr	r0, [pc, #44]	; (9b08 <k_aligned_alloc+0x60>)
    9adc:	2346      	movs	r3, #70	; 0x46
    9ade:	f000 fcd8 	bl	a492 <assert_print>
    9ae2:	480c      	ldr	r0, [pc, #48]	; (9b14 <k_aligned_alloc+0x6c>)
    9ae4:	f000 fcd5 	bl	a492 <assert_print>
    9ae8:	4806      	ldr	r0, [pc, #24]	; (9b04 <k_aligned_alloc+0x5c>)
    9aea:	2146      	movs	r1, #70	; 0x46
    9aec:	f000 fcca 	bl	a484 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9af0:	462a      	mov	r2, r5
    9af2:	4621      	mov	r1, r4
    9af4:	4808      	ldr	r0, [pc, #32]	; (9b18 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    9af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9afa:	f7ff bf9f 	b.w	9a3c <z_heap_aligned_alloc>
    9afe:	bf00      	nop
    9b00:	0000d276 	.word	0x0000d276
    9b04:	0000d1f8 	.word	0x0000d1f8
    9b08:	0000b9c2 	.word	0x0000b9c2
    9b0c:	0000d2b3 	.word	0x0000d2b3
    9b10:	0000bc5e 	.word	0x0000bc5e
    9b14:	0000bc79 	.word	0x0000bc79
    9b18:	200041c0 	.word	0x200041c0

00009b1c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9b1c:	4b01      	ldr	r3, [pc, #4]	; (9b24 <k_thread_system_pool_assign+0x8>)
    9b1e:	6703      	str	r3, [r0, #112]	; 0x70
}
    9b20:	4770      	bx	lr
    9b22:	bf00      	nop
    9b24:	200041c0 	.word	0x200041c0

00009b28 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9b28:	4a02      	ldr	r2, [pc, #8]	; (9b34 <boot_banner+0xc>)
    9b2a:	4903      	ldr	r1, [pc, #12]	; (9b38 <boot_banner+0x10>)
    9b2c:	4803      	ldr	r0, [pc, #12]	; (9b3c <boot_banner+0x14>)
    9b2e:	f000 bb34 	b.w	a19a <printk>
    9b32:	bf00      	nop
    9b34:	0000d000 	.word	0x0000d000
    9b38:	0000d2e0 	.word	0x0000d2e0
    9b3c:	0000d2ed 	.word	0x0000d2ed

00009b40 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9b40:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9b42:	4c0e      	ldr	r4, [pc, #56]	; (9b7c <statics_init+0x3c>)
    9b44:	4d0e      	ldr	r5, [pc, #56]	; (9b80 <statics_init+0x40>)
    9b46:	4e0f      	ldr	r6, [pc, #60]	; (9b84 <statics_init+0x44>)
    9b48:	42ac      	cmp	r4, r5
    9b4a:	d90c      	bls.n	9b66 <statics_init+0x26>
    9b4c:	490e      	ldr	r1, [pc, #56]	; (9b88 <statics_init+0x48>)
    9b4e:	480f      	ldr	r0, [pc, #60]	; (9b8c <statics_init+0x4c>)
    9b50:	2318      	movs	r3, #24
    9b52:	4632      	mov	r2, r6
    9b54:	f000 fc9d 	bl	a492 <assert_print>
    9b58:	480d      	ldr	r0, [pc, #52]	; (9b90 <statics_init+0x50>)
    9b5a:	f000 fc9a 	bl	a492 <assert_print>
    9b5e:	2118      	movs	r1, #24
    9b60:	4630      	mov	r0, r6
    9b62:	f000 fc8f 	bl	a484 <assert_post_action>
    9b66:	42ac      	cmp	r4, r5
    9b68:	d301      	bcc.n	9b6e <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    9b6a:	2000      	movs	r0, #0
    9b6c:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9b6e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9b72:	4620      	mov	r0, r4
    9b74:	f001 fa3c 	bl	aff0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9b78:	3418      	adds	r4, #24
    9b7a:	e7e5      	b.n	9b48 <statics_init+0x8>
    9b7c:	200041c0 	.word	0x200041c0
    9b80:	200041d8 	.word	0x200041d8
    9b84:	0000d314 	.word	0x0000d314
    9b88:	0000d336 	.word	0x0000d336
    9b8c:	0000b9c2 	.word	0x0000b9c2
    9b90:	0000cdd5 	.word	0x0000cdd5

00009b94 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    9b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b98:	b085      	sub	sp, #20
    9b9a:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    9b9e:	4606      	mov	r6, r0
    9ba0:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9ba2:	4648      	mov	r0, r9
    9ba4:	4641      	mov	r1, r8
{
    9ba6:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9ba8:	f001 f9d3 	bl	af52 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    9bac:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9bb0:	4682      	mov	sl, r0
    9bb2:	460f      	mov	r7, r1
	__asm__ volatile(
    9bb4:	f04f 0320 	mov.w	r3, #32
    9bb8:	f3ef 8511 	mrs	r5, BASEPRI
    9bbc:	f383 8812 	msr	BASEPRI_MAX, r3
    9bc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bc4:	4620      	mov	r0, r4
    9bc6:	f7fd fed3 	bl	7970 <z_spin_lock_valid>
    9bca:	b968      	cbnz	r0, 9be8 <k_heap_aligned_alloc+0x54>
    9bcc:	4a3c      	ldr	r2, [pc, #240]	; (9cc0 <k_heap_aligned_alloc+0x12c>)
    9bce:	493d      	ldr	r1, [pc, #244]	; (9cc4 <k_heap_aligned_alloc+0x130>)
    9bd0:	483d      	ldr	r0, [pc, #244]	; (9cc8 <k_heap_aligned_alloc+0x134>)
    9bd2:	238e      	movs	r3, #142	; 0x8e
    9bd4:	f000 fc5d 	bl	a492 <assert_print>
    9bd8:	483c      	ldr	r0, [pc, #240]	; (9ccc <k_heap_aligned_alloc+0x138>)
    9bda:	4621      	mov	r1, r4
    9bdc:	f000 fc59 	bl	a492 <assert_print>
    9be0:	4837      	ldr	r0, [pc, #220]	; (9cc0 <k_heap_aligned_alloc+0x12c>)
    9be2:	218e      	movs	r1, #142	; 0x8e
    9be4:	f000 fc4e 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9be8:	4620      	mov	r0, r4
    9bea:	f7fd fedf 	bl	79ac <z_spin_lock_set_owner>
    9bee:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    9bf2:	b17b      	cbz	r3, 9c14 <k_heap_aligned_alloc+0x80>
    9bf4:	ea59 0808 	orrs.w	r8, r9, r8
    9bf8:	d00c      	beq.n	9c14 <k_heap_aligned_alloc+0x80>
    9bfa:	4935      	ldr	r1, [pc, #212]	; (9cd0 <k_heap_aligned_alloc+0x13c>)
    9bfc:	4a35      	ldr	r2, [pc, #212]	; (9cd4 <k_heap_aligned_alloc+0x140>)
    9bfe:	4832      	ldr	r0, [pc, #200]	; (9cc8 <k_heap_aligned_alloc+0x134>)
    9c00:	2349      	movs	r3, #73	; 0x49
    9c02:	f000 fc46 	bl	a492 <assert_print>
    9c06:	4834      	ldr	r0, [pc, #208]	; (9cd8 <k_heap_aligned_alloc+0x144>)
    9c08:	f000 fc43 	bl	a492 <assert_print>
    9c0c:	4831      	ldr	r0, [pc, #196]	; (9cd4 <k_heap_aligned_alloc+0x140>)
    9c0e:	2149      	movs	r1, #73	; 0x49
    9c10:	f000 fc38 	bl	a484 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c14:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9cc0 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    9c18:	9903      	ldr	r1, [sp, #12]
    9c1a:	465a      	mov	r2, fp
    9c1c:	4630      	mov	r0, r6
    9c1e:	f7f8 fa97 	bl	2150 <sys_heap_aligned_alloc>
    9c22:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    9c24:	f7ff fdb8 	bl	9798 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    9c28:	f1b8 0f00 	cmp.w	r8, #0
    9c2c:	d019      	beq.n	9c62 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c2e:	4620      	mov	r0, r4
    9c30:	f7fd feac 	bl	798c <z_spin_unlock_valid>
    9c34:	b968      	cbnz	r0, 9c52 <k_heap_aligned_alloc+0xbe>
    9c36:	4a22      	ldr	r2, [pc, #136]	; (9cc0 <k_heap_aligned_alloc+0x12c>)
    9c38:	4928      	ldr	r1, [pc, #160]	; (9cdc <k_heap_aligned_alloc+0x148>)
    9c3a:	4823      	ldr	r0, [pc, #140]	; (9cc8 <k_heap_aligned_alloc+0x134>)
    9c3c:	23b9      	movs	r3, #185	; 0xb9
    9c3e:	f000 fc28 	bl	a492 <assert_print>
    9c42:	4827      	ldr	r0, [pc, #156]	; (9ce0 <k_heap_aligned_alloc+0x14c>)
    9c44:	4621      	mov	r1, r4
    9c46:	f000 fc24 	bl	a492 <assert_print>
    9c4a:	481d      	ldr	r0, [pc, #116]	; (9cc0 <k_heap_aligned_alloc+0x12c>)
    9c4c:	21b9      	movs	r1, #185	; 0xb9
    9c4e:	f000 fc19 	bl	a484 <assert_post_action>
	__asm__ volatile(
    9c52:	f385 8811 	msr	BASEPRI, r5
    9c56:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    9c5a:	4640      	mov	r0, r8
    9c5c:	b005      	add	sp, #20
    9c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    9c62:	ebba 0000 	subs.w	r0, sl, r0
    9c66:	eb67 0101 	sbc.w	r1, r7, r1
    9c6a:	2801      	cmp	r0, #1
    9c6c:	f171 0300 	sbcs.w	r3, r1, #0
    9c70:	dbdd      	blt.n	9c2e <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    9c72:	e9cd 0100 	strd	r0, r1, [sp]
    9c76:	f106 020c 	add.w	r2, r6, #12
    9c7a:	4629      	mov	r1, r5
    9c7c:	4620      	mov	r0, r4
    9c7e:	f7fe fe0f 	bl	88a0 <z_pend_curr>
	__asm__ volatile(
    9c82:	f04f 0320 	mov.w	r3, #32
    9c86:	f3ef 8511 	mrs	r5, BASEPRI
    9c8a:	f383 8812 	msr	BASEPRI_MAX, r3
    9c8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c92:	4620      	mov	r0, r4
    9c94:	f7fd fe6c 	bl	7970 <z_spin_lock_valid>
    9c98:	b968      	cbnz	r0, 9cb6 <k_heap_aligned_alloc+0x122>
    9c9a:	490a      	ldr	r1, [pc, #40]	; (9cc4 <k_heap_aligned_alloc+0x130>)
    9c9c:	480a      	ldr	r0, [pc, #40]	; (9cc8 <k_heap_aligned_alloc+0x134>)
    9c9e:	238e      	movs	r3, #142	; 0x8e
    9ca0:	464a      	mov	r2, r9
    9ca2:	f000 fbf6 	bl	a492 <assert_print>
    9ca6:	4809      	ldr	r0, [pc, #36]	; (9ccc <k_heap_aligned_alloc+0x138>)
    9ca8:	4621      	mov	r1, r4
    9caa:	f000 fbf2 	bl	a492 <assert_print>
    9cae:	218e      	movs	r1, #142	; 0x8e
    9cb0:	4648      	mov	r0, r9
    9cb2:	f000 fbe7 	bl	a484 <assert_post_action>
	z_spin_lock_set_owner(l);
    9cb6:	4620      	mov	r0, r4
    9cb8:	f7fd fe78 	bl	79ac <z_spin_lock_set_owner>
	return k;
    9cbc:	e7ac      	b.n	9c18 <k_heap_aligned_alloc+0x84>
    9cbe:	bf00      	nop
    9cc0:	0000bb0c 	.word	0x0000bb0c
    9cc4:	0000bb65 	.word	0x0000bb65
    9cc8:	0000b9c2 	.word	0x0000b9c2
    9ccc:	0000bb7a 	.word	0x0000bb7a
    9cd0:	0000d34c 	.word	0x0000d34c
    9cd4:	0000d314 	.word	0x0000d314
    9cd8:	0000cffe 	.word	0x0000cffe
    9cdc:	0000bb39 	.word	0x0000bb39
    9ce0:	0000bb50 	.word	0x0000bb50

00009ce4 <reserve>:
    strcpy(buffer->name, name);
    buffer->head = first;
    return buffer;
}

void* reserve(cab* cab_id){
    9ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ce6:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    9ce8:	f100 0618 	add.w	r6, r0, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    9cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9cf4:	4630      	mov	r0, r6
    9cf6:	f7fd fe93 	bl	7a20 <z_impl_k_mutex_lock>
    for(int i = 0; i< N_TASKS + 1; i++){
    9cfa:	8920      	ldrh	r0, [r4, #8]
    9cfc:	68e2      	ldr	r2, [r4, #12]
    9cfe:	f104 010f 	add.w	r1, r4, #15
    9d02:	2300      	movs	r3, #0
        buffer = cab_id->buffers + (i * cab_id->size);
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9d04:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    9d08:	b95d      	cbnz	r5, 9d22 <reserve+0x3e>
    9d0a:	6967      	ldr	r7, [r4, #20]
    9d0c:	4297      	cmp	r7, r2
        buffer = cab_id->buffers + (i * cab_id->size);
    9d0e:	4615      	mov	r5, r2
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9d10:	d007      	beq.n	9d22 <reserve+0x3e>
            cab_id->flags[i] = 1;
    9d12:	441c      	add	r4, r3
    9d14:	2301      	movs	r3, #1
    9d16:	7423      	strb	r3, [r4, #16]
            k_mutex_unlock(&cab_id->mutex);
    9d18:	4630      	mov	r0, r6
    9d1a:	f001 f971 	bl	b000 <k_mutex_unlock.isra.0>
        }
    }
    k_mutex_unlock(&cab_id->mutex);
    printk("No available buffers\n");
    return 0;
} 
    9d1e:	4628      	mov	r0, r5
    9d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(int i = 0; i< N_TASKS + 1; i++){
    9d22:	3301      	adds	r3, #1
    9d24:	2b04      	cmp	r3, #4
    9d26:	4402      	add	r2, r0
    9d28:	d1ec      	bne.n	9d04 <reserve+0x20>
    k_mutex_unlock(&cab_id->mutex);
    9d2a:	4630      	mov	r0, r6
    9d2c:	f001 f968 	bl	b000 <k_mutex_unlock.isra.0>
    printk("No available buffers\n");
    9d30:	4802      	ldr	r0, [pc, #8]	; (9d3c <reserve+0x58>)
    9d32:	f000 fa32 	bl	a19a <printk>
    return 0;
    9d36:	2500      	movs	r5, #0
    9d38:	e7f1      	b.n	9d1e <reserve+0x3a>
    9d3a:	bf00      	nop
    9d3c:	0000d392 	.word	0x0000d392

00009d40 <exit>:
    9d40:	b508      	push	{r3, lr}
    9d42:	4b07      	ldr	r3, [pc, #28]	; (9d60 <exit+0x20>)
    9d44:	4604      	mov	r4, r0
    9d46:	b113      	cbz	r3, 9d4e <exit+0xe>
    9d48:	2100      	movs	r1, #0
    9d4a:	f3af 8000 	nop.w
    9d4e:	4b05      	ldr	r3, [pc, #20]	; (9d64 <exit+0x24>)
    9d50:	6818      	ldr	r0, [r3, #0]
    9d52:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9d54:	b103      	cbz	r3, 9d58 <exit+0x18>
    9d56:	4798      	blx	r3
    9d58:	4620      	mov	r0, r4
    9d5a:	f7fa ff21 	bl	4ba0 <_exit>
    9d5e:	bf00      	nop
    9d60:	00000000 	.word	0x00000000
    9d64:	0000b7b4 	.word	0x0000b7b4

00009d68 <nrf_cc3xx_platform_init_no_rng>:
    9d68:	b510      	push	{r4, lr}
    9d6a:	4c0a      	ldr	r4, [pc, #40]	; (9d94 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9d6c:	6823      	ldr	r3, [r4, #0]
    9d6e:	b11b      	cbz	r3, 9d78 <nrf_cc3xx_platform_init_no_rng+0x10>
    9d70:	2301      	movs	r3, #1
    9d72:	6023      	str	r3, [r4, #0]
    9d74:	2000      	movs	r0, #0
    9d76:	bd10      	pop	{r4, pc}
    9d78:	f000 f8ce 	bl	9f18 <CC_LibInitNoRng>
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d0f7      	beq.n	9d70 <nrf_cc3xx_platform_init_no_rng+0x8>
    9d80:	3801      	subs	r0, #1
    9d82:	2806      	cmp	r0, #6
    9d84:	d803      	bhi.n	9d8e <nrf_cc3xx_platform_init_no_rng+0x26>
    9d86:	4b04      	ldr	r3, [pc, #16]	; (9d98 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9d88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9d8c:	bd10      	pop	{r4, pc}
    9d8e:	4803      	ldr	r0, [pc, #12]	; (9d9c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9d90:	bd10      	pop	{r4, pc}
    9d92:	bf00      	nop
    9d94:	20004f28 	.word	0x20004f28
    9d98:	0000b7b8 	.word	0x0000b7b8
    9d9c:	ffff8ffe 	.word	0xffff8ffe

00009da0 <nrf_cc3xx_platform_abort>:
    9da0:	f3bf 8f4f 	dsb	sy
    9da4:	4905      	ldr	r1, [pc, #20]	; (9dbc <nrf_cc3xx_platform_abort+0x1c>)
    9da6:	4b06      	ldr	r3, [pc, #24]	; (9dc0 <nrf_cc3xx_platform_abort+0x20>)
    9da8:	68ca      	ldr	r2, [r1, #12]
    9daa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9dae:	4313      	orrs	r3, r2
    9db0:	60cb      	str	r3, [r1, #12]
    9db2:	f3bf 8f4f 	dsb	sy
    9db6:	bf00      	nop
    9db8:	e7fd      	b.n	9db6 <nrf_cc3xx_platform_abort+0x16>
    9dba:	bf00      	nop
    9dbc:	e000ed00 	.word	0xe000ed00
    9dc0:	05fa0004 	.word	0x05fa0004

00009dc4 <CC_PalAbort>:
    9dc4:	b410      	push	{r4}
    9dc6:	4b09      	ldr	r3, [pc, #36]	; (9dec <CC_PalAbort+0x28>)
    9dc8:	4909      	ldr	r1, [pc, #36]	; (9df0 <CC_PalAbort+0x2c>)
    9dca:	4c0a      	ldr	r4, [pc, #40]	; (9df4 <CC_PalAbort+0x30>)
    9dcc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9dd0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9dd4:	6849      	ldr	r1, [r1, #4]
    9dd6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9dda:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    9dde:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9de2:	2300      	movs	r3, #0
    9de4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9de8:	bc10      	pop	{r4}
    9dea:	4708      	bx	r1
    9dec:	5002b000 	.word	0x5002b000
    9df0:	2000014c 	.word	0x2000014c
    9df4:	5002a000 	.word	0x5002a000

00009df8 <nrf_cc3xx_platform_set_abort>:
    9df8:	e9d0 1200 	ldrd	r1, r2, [r0]
    9dfc:	4b01      	ldr	r3, [pc, #4]	; (9e04 <nrf_cc3xx_platform_set_abort+0xc>)
    9dfe:	e9c3 1200 	strd	r1, r2, [r3]
    9e02:	4770      	bx	lr
    9e04:	2000014c 	.word	0x2000014c

00009e08 <mutex_free>:
    9e08:	b510      	push	{r4, lr}
    9e0a:	4604      	mov	r4, r0
    9e0c:	b130      	cbz	r0, 9e1c <mutex_free+0x14>
    9e0e:	6863      	ldr	r3, [r4, #4]
    9e10:	06db      	lsls	r3, r3, #27
    9e12:	d502      	bpl.n	9e1a <mutex_free+0x12>
    9e14:	2300      	movs	r3, #0
    9e16:	6023      	str	r3, [r4, #0]
    9e18:	6063      	str	r3, [r4, #4]
    9e1a:	bd10      	pop	{r4, pc}
    9e1c:	4b02      	ldr	r3, [pc, #8]	; (9e28 <mutex_free+0x20>)
    9e1e:	4803      	ldr	r0, [pc, #12]	; (9e2c <mutex_free+0x24>)
    9e20:	685b      	ldr	r3, [r3, #4]
    9e22:	4798      	blx	r3
    9e24:	e7f3      	b.n	9e0e <mutex_free+0x6>
    9e26:	bf00      	nop
    9e28:	2000014c 	.word	0x2000014c
    9e2c:	0000b7d4 	.word	0x0000b7d4

00009e30 <mutex_lock>:
    9e30:	b1b0      	cbz	r0, 9e60 <mutex_lock+0x30>
    9e32:	6843      	ldr	r3, [r0, #4]
    9e34:	b193      	cbz	r3, 9e5c <mutex_lock+0x2c>
    9e36:	06db      	lsls	r3, r3, #27
    9e38:	d50e      	bpl.n	9e58 <mutex_lock+0x28>
    9e3a:	2301      	movs	r3, #1
    9e3c:	e850 2f00 	ldrex	r2, [r0]
    9e40:	4619      	mov	r1, r3
    9e42:	e840 1c00 	strex	ip, r1, [r0]
    9e46:	f09c 0f00 	teq	ip, #0
    9e4a:	d1f7      	bne.n	9e3c <mutex_lock+0xc>
    9e4c:	2a01      	cmp	r2, #1
    9e4e:	d0f5      	beq.n	9e3c <mutex_lock+0xc>
    9e50:	f3bf 8f5f 	dmb	sy
    9e54:	2000      	movs	r0, #0
    9e56:	4770      	bx	lr
    9e58:	4803      	ldr	r0, [pc, #12]	; (9e68 <mutex_lock+0x38>)
    9e5a:	4770      	bx	lr
    9e5c:	4803      	ldr	r0, [pc, #12]	; (9e6c <mutex_lock+0x3c>)
    9e5e:	4770      	bx	lr
    9e60:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9e64:	4770      	bx	lr
    9e66:	bf00      	nop
    9e68:	ffff8fe9 	.word	0xffff8fe9
    9e6c:	ffff8fea 	.word	0xffff8fea

00009e70 <mutex_unlock>:
    9e70:	b168      	cbz	r0, 9e8e <mutex_unlock+0x1e>
    9e72:	6843      	ldr	r3, [r0, #4]
    9e74:	b13b      	cbz	r3, 9e86 <mutex_unlock+0x16>
    9e76:	06db      	lsls	r3, r3, #27
    9e78:	d507      	bpl.n	9e8a <mutex_unlock+0x1a>
    9e7a:	f3bf 8f5f 	dmb	sy
    9e7e:	2300      	movs	r3, #0
    9e80:	6003      	str	r3, [r0, #0]
    9e82:	4618      	mov	r0, r3
    9e84:	4770      	bx	lr
    9e86:	4803      	ldr	r0, [pc, #12]	; (9e94 <mutex_unlock+0x24>)
    9e88:	4770      	bx	lr
    9e8a:	4803      	ldr	r0, [pc, #12]	; (9e98 <mutex_unlock+0x28>)
    9e8c:	4770      	bx	lr
    9e8e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9e92:	4770      	bx	lr
    9e94:	ffff8fea 	.word	0xffff8fea
    9e98:	ffff8fe9 	.word	0xffff8fe9

00009e9c <mutex_init>:
    9e9c:	b510      	push	{r4, lr}
    9e9e:	4604      	mov	r4, r0
    9ea0:	b120      	cbz	r0, 9eac <mutex_init+0x10>
    9ea2:	2200      	movs	r2, #0
    9ea4:	2311      	movs	r3, #17
    9ea6:	6022      	str	r2, [r4, #0]
    9ea8:	6063      	str	r3, [r4, #4]
    9eaa:	bd10      	pop	{r4, pc}
    9eac:	4801      	ldr	r0, [pc, #4]	; (9eb4 <mutex_init+0x18>)
    9eae:	f7ff ff89 	bl	9dc4 <CC_PalAbort>
    9eb2:	e7f6      	b.n	9ea2 <mutex_init+0x6>
    9eb4:	0000b7fc 	.word	0x0000b7fc

00009eb8 <nrf_cc3xx_platform_set_mutexes>:
    9eb8:	b570      	push	{r4, r5, r6, lr}
    9eba:	e9d0 2300 	ldrd	r2, r3, [r0]
    9ebe:	4c13      	ldr	r4, [pc, #76]	; (9f0c <nrf_cc3xx_platform_set_mutexes+0x54>)
    9ec0:	4d13      	ldr	r5, [pc, #76]	; (9f10 <nrf_cc3xx_platform_set_mutexes+0x58>)
    9ec2:	6063      	str	r3, [r4, #4]
    9ec4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    9ec8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    9ecc:	6022      	str	r2, [r4, #0]
    9ece:	4b11      	ldr	r3, [pc, #68]	; (9f14 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9ed0:	6808      	ldr	r0, [r1, #0]
    9ed2:	6018      	str	r0, [r3, #0]
    9ed4:	6848      	ldr	r0, [r1, #4]
    9ed6:	6058      	str	r0, [r3, #4]
    9ed8:	6888      	ldr	r0, [r1, #8]
    9eda:	6098      	str	r0, [r3, #8]
    9edc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    9ee0:	60d8      	str	r0, [r3, #12]
    9ee2:	6119      	str	r1, [r3, #16]
    9ee4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9ee8:	06db      	lsls	r3, r3, #27
    9eea:	d50d      	bpl.n	9f08 <nrf_cc3xx_platform_set_mutexes+0x50>
    9eec:	2300      	movs	r3, #0
    9eee:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    9ef2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    9ef6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    9efa:	4790      	blx	r2
    9efc:	6823      	ldr	r3, [r4, #0]
    9efe:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    9f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f06:	4718      	bx	r3
    9f08:	bd70      	pop	{r4, r5, r6, pc}
    9f0a:	bf00      	nop
    9f0c:	2000015c 	.word	0x2000015c
    9f10:	20004f40 	.word	0x20004f40
    9f14:	2000016c 	.word	0x2000016c

00009f18 <CC_LibInitNoRng>:
    9f18:	b538      	push	{r3, r4, r5, lr}
    9f1a:	f000 f82f 	bl	9f7c <CC_HalInit>
    9f1e:	b120      	cbz	r0, 9f2a <CC_LibInitNoRng+0x12>
    9f20:	2403      	movs	r4, #3
    9f22:	f000 f863 	bl	9fec <CC_PalTerminate>
    9f26:	4620      	mov	r0, r4
    9f28:	bd38      	pop	{r3, r4, r5, pc}
    9f2a:	f000 f831 	bl	9f90 <CC_PalInit>
    9f2e:	b998      	cbnz	r0, 9f58 <CC_LibInitNoRng+0x40>
    9f30:	f000 f8ac 	bl	a08c <CC_PalPowerSaveModeSelect>
    9f34:	b998      	cbnz	r0, 9f5e <CC_LibInitNoRng+0x46>
    9f36:	4d0f      	ldr	r5, [pc, #60]	; (9f74 <CC_LibInitNoRng+0x5c>)
    9f38:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    9f3c:	0e1b      	lsrs	r3, r3, #24
    9f3e:	2bf0      	cmp	r3, #240	; 0xf0
    9f40:	d108      	bne.n	9f54 <CC_LibInitNoRng+0x3c>
    9f42:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    9f46:	4b0c      	ldr	r3, [pc, #48]	; (9f78 <CC_LibInitNoRng+0x60>)
    9f48:	429a      	cmp	r2, r3
    9f4a:	d00a      	beq.n	9f62 <CC_LibInitNoRng+0x4a>
    9f4c:	2407      	movs	r4, #7
    9f4e:	f000 f817 	bl	9f80 <CC_HalTerminate>
    9f52:	e7e6      	b.n	9f22 <CC_LibInitNoRng+0xa>
    9f54:	2406      	movs	r4, #6
    9f56:	e7fa      	b.n	9f4e <CC_LibInitNoRng+0x36>
    9f58:	2404      	movs	r4, #4
    9f5a:	4620      	mov	r0, r4
    9f5c:	bd38      	pop	{r3, r4, r5, pc}
    9f5e:	2400      	movs	r4, #0
    9f60:	e7f5      	b.n	9f4e <CC_LibInitNoRng+0x36>
    9f62:	2001      	movs	r0, #1
    9f64:	f000 f892 	bl	a08c <CC_PalPowerSaveModeSelect>
    9f68:	4604      	mov	r4, r0
    9f6a:	2800      	cmp	r0, #0
    9f6c:	d1f7      	bne.n	9f5e <CC_LibInitNoRng+0x46>
    9f6e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    9f72:	e7d8      	b.n	9f26 <CC_LibInitNoRng+0xe>
    9f74:	5002b000 	.word	0x5002b000
    9f78:	20e00000 	.word	0x20e00000

00009f7c <CC_HalInit>:
    9f7c:	2000      	movs	r0, #0
    9f7e:	4770      	bx	lr

00009f80 <CC_HalTerminate>:
    9f80:	2000      	movs	r0, #0
    9f82:	4770      	bx	lr

00009f84 <CC_HalMaskInterrupt>:
    9f84:	4b01      	ldr	r3, [pc, #4]	; (9f8c <CC_HalMaskInterrupt+0x8>)
    9f86:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    9f8a:	4770      	bx	lr
    9f8c:	5002b000 	.word	0x5002b000

00009f90 <CC_PalInit>:
    9f90:	b510      	push	{r4, lr}
    9f92:	4811      	ldr	r0, [pc, #68]	; (9fd8 <CC_PalInit+0x48>)
    9f94:	f000 f848 	bl	a028 <CC_PalMutexCreate>
    9f98:	b100      	cbz	r0, 9f9c <CC_PalInit+0xc>
    9f9a:	bd10      	pop	{r4, pc}
    9f9c:	480f      	ldr	r0, [pc, #60]	; (9fdc <CC_PalInit+0x4c>)
    9f9e:	f000 f843 	bl	a028 <CC_PalMutexCreate>
    9fa2:	2800      	cmp	r0, #0
    9fa4:	d1f9      	bne.n	9f9a <CC_PalInit+0xa>
    9fa6:	4c0e      	ldr	r4, [pc, #56]	; (9fe0 <CC_PalInit+0x50>)
    9fa8:	4620      	mov	r0, r4
    9faa:	f000 f83d 	bl	a028 <CC_PalMutexCreate>
    9fae:	2800      	cmp	r0, #0
    9fb0:	d1f3      	bne.n	9f9a <CC_PalInit+0xa>
    9fb2:	4b0c      	ldr	r3, [pc, #48]	; (9fe4 <CC_PalInit+0x54>)
    9fb4:	480c      	ldr	r0, [pc, #48]	; (9fe8 <CC_PalInit+0x58>)
    9fb6:	601c      	str	r4, [r3, #0]
    9fb8:	f000 f836 	bl	a028 <CC_PalMutexCreate>
    9fbc:	4601      	mov	r1, r0
    9fbe:	2800      	cmp	r0, #0
    9fc0:	d1eb      	bne.n	9f9a <CC_PalInit+0xa>
    9fc2:	f000 f82d 	bl	a020 <CC_PalDmaInit>
    9fc6:	4604      	mov	r4, r0
    9fc8:	b108      	cbz	r0, 9fce <CC_PalInit+0x3e>
    9fca:	4620      	mov	r0, r4
    9fcc:	bd10      	pop	{r4, pc}
    9fce:	f000 f83f 	bl	a050 <CC_PalPowerSaveModeInit>
    9fd2:	4620      	mov	r0, r4
    9fd4:	e7fa      	b.n	9fcc <CC_PalInit+0x3c>
    9fd6:	bf00      	nop
    9fd8:	200001a4 	.word	0x200001a4
    9fdc:	20000198 	.word	0x20000198
    9fe0:	200001a0 	.word	0x200001a0
    9fe4:	200001a8 	.word	0x200001a8
    9fe8:	2000019c 	.word	0x2000019c

00009fec <CC_PalTerminate>:
    9fec:	b508      	push	{r3, lr}
    9fee:	4808      	ldr	r0, [pc, #32]	; (a010 <CC_PalTerminate+0x24>)
    9ff0:	f000 f824 	bl	a03c <CC_PalMutexDestroy>
    9ff4:	4807      	ldr	r0, [pc, #28]	; (a014 <CC_PalTerminate+0x28>)
    9ff6:	f000 f821 	bl	a03c <CC_PalMutexDestroy>
    9ffa:	4807      	ldr	r0, [pc, #28]	; (a018 <CC_PalTerminate+0x2c>)
    9ffc:	f000 f81e 	bl	a03c <CC_PalMutexDestroy>
    a000:	4806      	ldr	r0, [pc, #24]	; (a01c <CC_PalTerminate+0x30>)
    a002:	f000 f81b 	bl	a03c <CC_PalMutexDestroy>
    a006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a00a:	f000 b80b 	b.w	a024 <CC_PalDmaTerminate>
    a00e:	bf00      	nop
    a010:	200001a4 	.word	0x200001a4
    a014:	20000198 	.word	0x20000198
    a018:	200001a0 	.word	0x200001a0
    a01c:	2000019c 	.word	0x2000019c

0000a020 <CC_PalDmaInit>:
    a020:	2000      	movs	r0, #0
    a022:	4770      	bx	lr

0000a024 <CC_PalDmaTerminate>:
    a024:	4770      	bx	lr
    a026:	bf00      	nop

0000a028 <CC_PalMutexCreate>:
    a028:	b508      	push	{r3, lr}
    a02a:	4b03      	ldr	r3, [pc, #12]	; (a038 <CC_PalMutexCreate+0x10>)
    a02c:	6802      	ldr	r2, [r0, #0]
    a02e:	681b      	ldr	r3, [r3, #0]
    a030:	6810      	ldr	r0, [r2, #0]
    a032:	4798      	blx	r3
    a034:	2000      	movs	r0, #0
    a036:	bd08      	pop	{r3, pc}
    a038:	2000015c 	.word	0x2000015c

0000a03c <CC_PalMutexDestroy>:
    a03c:	b508      	push	{r3, lr}
    a03e:	4b03      	ldr	r3, [pc, #12]	; (a04c <CC_PalMutexDestroy+0x10>)
    a040:	6802      	ldr	r2, [r0, #0]
    a042:	685b      	ldr	r3, [r3, #4]
    a044:	6810      	ldr	r0, [r2, #0]
    a046:	4798      	blx	r3
    a048:	2000      	movs	r0, #0
    a04a:	bd08      	pop	{r3, pc}
    a04c:	2000015c 	.word	0x2000015c

0000a050 <CC_PalPowerSaveModeInit>:
    a050:	b570      	push	{r4, r5, r6, lr}
    a052:	4c09      	ldr	r4, [pc, #36]	; (a078 <CC_PalPowerSaveModeInit+0x28>)
    a054:	4d09      	ldr	r5, [pc, #36]	; (a07c <CC_PalPowerSaveModeInit+0x2c>)
    a056:	6920      	ldr	r0, [r4, #16]
    a058:	68ab      	ldr	r3, [r5, #8]
    a05a:	4798      	blx	r3
    a05c:	b118      	cbz	r0, a066 <CC_PalPowerSaveModeInit+0x16>
    a05e:	4b08      	ldr	r3, [pc, #32]	; (a080 <CC_PalPowerSaveModeInit+0x30>)
    a060:	4808      	ldr	r0, [pc, #32]	; (a084 <CC_PalPowerSaveModeInit+0x34>)
    a062:	685b      	ldr	r3, [r3, #4]
    a064:	4798      	blx	r3
    a066:	4a08      	ldr	r2, [pc, #32]	; (a088 <CC_PalPowerSaveModeInit+0x38>)
    a068:	68eb      	ldr	r3, [r5, #12]
    a06a:	6920      	ldr	r0, [r4, #16]
    a06c:	2100      	movs	r1, #0
    a06e:	6011      	str	r1, [r2, #0]
    a070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a074:	4718      	bx	r3
    a076:	bf00      	nop
    a078:	2000016c 	.word	0x2000016c
    a07c:	2000015c 	.word	0x2000015c
    a080:	2000014c 	.word	0x2000014c
    a084:	0000b820 	.word	0x0000b820
    a088:	20004f3c 	.word	0x20004f3c

0000a08c <CC_PalPowerSaveModeSelect>:
    a08c:	b570      	push	{r4, r5, r6, lr}
    a08e:	4d1b      	ldr	r5, [pc, #108]	; (a0fc <CC_PalPowerSaveModeSelect+0x70>)
    a090:	4e1b      	ldr	r6, [pc, #108]	; (a100 <CC_PalPowerSaveModeSelect+0x74>)
    a092:	4604      	mov	r4, r0
    a094:	68b2      	ldr	r2, [r6, #8]
    a096:	6928      	ldr	r0, [r5, #16]
    a098:	4790      	blx	r2
    a09a:	b9f8      	cbnz	r0, a0dc <CC_PalPowerSaveModeSelect+0x50>
    a09c:	b15c      	cbz	r4, a0b6 <CC_PalPowerSaveModeSelect+0x2a>
    a09e:	4c19      	ldr	r4, [pc, #100]	; (a104 <CC_PalPowerSaveModeSelect+0x78>)
    a0a0:	6823      	ldr	r3, [r4, #0]
    a0a2:	b1b3      	cbz	r3, a0d2 <CC_PalPowerSaveModeSelect+0x46>
    a0a4:	2b01      	cmp	r3, #1
    a0a6:	d01b      	beq.n	a0e0 <CC_PalPowerSaveModeSelect+0x54>
    a0a8:	3b01      	subs	r3, #1
    a0aa:	6023      	str	r3, [r4, #0]
    a0ac:	6928      	ldr	r0, [r5, #16]
    a0ae:	68f3      	ldr	r3, [r6, #12]
    a0b0:	4798      	blx	r3
    a0b2:	2000      	movs	r0, #0
    a0b4:	bd70      	pop	{r4, r5, r6, pc}
    a0b6:	4c13      	ldr	r4, [pc, #76]	; (a104 <CC_PalPowerSaveModeSelect+0x78>)
    a0b8:	6821      	ldr	r1, [r4, #0]
    a0ba:	b941      	cbnz	r1, a0ce <CC_PalPowerSaveModeSelect+0x42>
    a0bc:	4b12      	ldr	r3, [pc, #72]	; (a108 <CC_PalPowerSaveModeSelect+0x7c>)
    a0be:	2201      	movs	r2, #1
    a0c0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    a0c4:	4a11      	ldr	r2, [pc, #68]	; (a10c <CC_PalPowerSaveModeSelect+0x80>)
    a0c6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d1fb      	bne.n	a0c6 <CC_PalPowerSaveModeSelect+0x3a>
    a0ce:	3101      	adds	r1, #1
    a0d0:	6021      	str	r1, [r4, #0]
    a0d2:	68f3      	ldr	r3, [r6, #12]
    a0d4:	6928      	ldr	r0, [r5, #16]
    a0d6:	4798      	blx	r3
    a0d8:	2000      	movs	r0, #0
    a0da:	bd70      	pop	{r4, r5, r6, pc}
    a0dc:	480c      	ldr	r0, [pc, #48]	; (a110 <CC_PalPowerSaveModeSelect+0x84>)
    a0de:	bd70      	pop	{r4, r5, r6, pc}
    a0e0:	4a0a      	ldr	r2, [pc, #40]	; (a10c <CC_PalPowerSaveModeSelect+0x80>)
    a0e2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d1fb      	bne.n	a0e2 <CC_PalPowerSaveModeSelect+0x56>
    a0ea:	4a07      	ldr	r2, [pc, #28]	; (a108 <CC_PalPowerSaveModeSelect+0x7c>)
    a0ec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a0f0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a0f4:	f7ff ff46 	bl	9f84 <CC_HalMaskInterrupt>
    a0f8:	6823      	ldr	r3, [r4, #0]
    a0fa:	e7d5      	b.n	a0a8 <CC_PalPowerSaveModeSelect+0x1c>
    a0fc:	2000016c 	.word	0x2000016c
    a100:	2000015c 	.word	0x2000015c
    a104:	20004f3c 	.word	0x20004f3c
    a108:	5002a000 	.word	0x5002a000
    a10c:	5002b000 	.word	0x5002b000
    a110:	ffff8fe9 	.word	0xffff8fe9

0000a114 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a114:	4770      	bx	lr

0000a116 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    a116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a11a:	4607      	mov	r7, r0
    a11c:	460e      	mov	r6, r1
    a11e:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a120:	461d      	mov	r5, r3
    a122:	b30b      	cbz	r3, a168 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    a124:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    a126:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    a128:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a12c:	781b      	ldrb	r3, [r3, #0]
    a12e:	4414      	add	r4, r2
    a130:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    a134:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a136:	f04f 0900 	mov.w	r9, #0
    a13a:	45d1      	cmp	r9, sl
    a13c:	d308      	bcc.n	a150 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    a13e:	686a      	ldr	r2, [r5, #4]
    a140:	f105 0308 	add.w	r3, r5, #8
    a144:	4641      	mov	r1, r8
    a146:	4638      	mov	r0, r7
    a148:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    a14a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    a14e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    a150:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    a154:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    a158:	4620      	mov	r0, r4
    a15a:	f7f6 fdeb 	bl	d34 <strlen>
    a15e:	3001      	adds	r0, #1
    a160:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a162:	f109 0901 	add.w	r9, r9, #1
    a166:	e7e8      	b.n	a13a <cbpprintf_external+0x24>
}
    a168:	f06f 0015 	mvn.w	r0, #21
    a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a170 <sys_notify_validate>:
	if (notify == NULL) {
    a170:	4603      	mov	r3, r0
    a172:	b158      	cbz	r0, a18c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a174:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a176:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    a17a:	2a01      	cmp	r2, #1
    a17c:	d003      	beq.n	a186 <sys_notify_validate+0x16>
    a17e:	2a03      	cmp	r2, #3
    a180:	d104      	bne.n	a18c <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    a182:	6802      	ldr	r2, [r0, #0]
    a184:	b112      	cbz	r2, a18c <sys_notify_validate+0x1c>
		notify->result = 0;
    a186:	2000      	movs	r0, #0
    a188:	6098      	str	r0, [r3, #8]
    a18a:	4770      	bx	lr
    a18c:	f06f 0015 	mvn.w	r0, #21
}
    a190:	4770      	bx	lr

0000a192 <arch_printk_char_out>:
}
    a192:	2000      	movs	r0, #0
    a194:	4770      	bx	lr

0000a196 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a196:	f000 b98e 	b.w	a4b6 <z_log_vprintk>

0000a19a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a19a:	b40f      	push	{r0, r1, r2, r3}
    a19c:	b507      	push	{r0, r1, r2, lr}
    a19e:	a904      	add	r1, sp, #16
    a1a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a1a4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    a1a6:	f000 f986 	bl	a4b6 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    a1aa:	b003      	add	sp, #12
    a1ac:	f85d eb04 	ldr.w	lr, [sp], #4
    a1b0:	b004      	add	sp, #16
    a1b2:	4770      	bx	lr

0000a1b4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a1b4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a1b6:	f013 0307 	ands.w	r3, r3, #7
    a1ba:	d105      	bne.n	a1c8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a1bc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a1be:	2b00      	cmp	r3, #0
    a1c0:	bf0c      	ite	eq
    a1c2:	2000      	moveq	r0, #0
    a1c4:	2003      	movne	r0, #3
    a1c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a1c8:	2b02      	cmp	r3, #2
    a1ca:	d105      	bne.n	a1d8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a1cc:	8bc0      	ldrh	r0, [r0, #30]
    a1ce:	fab0 f080 	clz	r0, r0
    a1d2:	0940      	lsrs	r0, r0, #5
    a1d4:	0080      	lsls	r0, r0, #2
    a1d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a1d8:	2b01      	cmp	r3, #1
    a1da:	d105      	bne.n	a1e8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a1dc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a1de:	2b00      	cmp	r3, #0
    a1e0:	bf0c      	ite	eq
    a1e2:	2000      	moveq	r0, #0
    a1e4:	2005      	movne	r0, #5
    a1e6:	4770      	bx	lr
	int evt = EVT_NOP;
    a1e8:	2000      	movs	r0, #0
}
    a1ea:	4770      	bx	lr

0000a1ec <validate_args>:
{
    a1ec:	b510      	push	{r4, lr}
    a1ee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a1f0:	b100      	cbz	r0, a1f4 <validate_args+0x8>
    a1f2:	b911      	cbnz	r1, a1fa <validate_args+0xe>
		return -EINVAL;
    a1f4:	f06f 0015 	mvn.w	r0, #21
}
    a1f8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    a1fa:	1d08      	adds	r0, r1, #4
    a1fc:	f7ff ffb8 	bl	a170 <sys_notify_validate>
	if ((rv == 0)
    a200:	2800      	cmp	r0, #0
    a202:	d1f9      	bne.n	a1f8 <validate_args+0xc>
	    && ((cli->notify.flags
    a204:	68a3      	ldr	r3, [r4, #8]
    a206:	2b03      	cmp	r3, #3
    a208:	d9f6      	bls.n	a1f8 <validate_args+0xc>
    a20a:	e7f3      	b.n	a1f4 <validate_args+0x8>

0000a20c <notify_one>:
{
    a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a210:	460d      	mov	r5, r1
    a212:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a214:	4619      	mov	r1, r3
    a216:	1d28      	adds	r0, r5, #4
{
    a218:	4690      	mov	r8, r2
    a21a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a21c:	f7f7 fc8a 	bl	1b34 <sys_notify_finalize>
	if (cb) {
    a220:	4604      	mov	r4, r0
    a222:	b138      	cbz	r0, a234 <notify_one+0x28>
		cb(mgr, cli, state, res);
    a224:	4633      	mov	r3, r6
    a226:	4642      	mov	r2, r8
    a228:	4629      	mov	r1, r5
    a22a:	4638      	mov	r0, r7
    a22c:	46a4      	mov	ip, r4
}
    a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a232:	4760      	bx	ip
}
    a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a238 <onoff_manager_init>:
{
    a238:	b538      	push	{r3, r4, r5, lr}
    a23a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a23c:	4605      	mov	r5, r0
    a23e:	b158      	cbz	r0, a258 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a240:	b151      	cbz	r1, a258 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a242:	680b      	ldr	r3, [r1, #0]
    a244:	b143      	cbz	r3, a258 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a246:	684b      	ldr	r3, [r1, #4]
    a248:	b133      	cbz	r3, a258 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a24a:	2220      	movs	r2, #32
    a24c:	2100      	movs	r1, #0
    a24e:	f000 ffb6 	bl	b1be <memset>
    a252:	612c      	str	r4, [r5, #16]
	return 0;
    a254:	2000      	movs	r0, #0
}
    a256:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a258:	f06f 0015 	mvn.w	r0, #21
    a25c:	e7fb      	b.n	a256 <onoff_manager_init+0x1e>

0000a25e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a25e:	4604      	mov	r4, r0
    a260:	b508      	push	{r3, lr}
    a262:	4608      	mov	r0, r1
    a264:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a266:	461a      	mov	r2, r3
    a268:	47a0      	blx	r4
	return z_impl_z_current_get();
    a26a:	f7fe ff09 	bl	9080 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a26e:	f7fa faf5 	bl	485c <z_impl_k_thread_abort>

0000a272 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    a272:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    a276:	8840      	ldrh	r0, [r0, #2]
}
    a278:	0840      	lsrs	r0, r0, #1
    a27a:	4770      	bx	lr

0000a27c <free_list_add>:
{
    a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a27e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    a280:	f7ff fff7 	bl	a272 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    a284:	fab0 f080 	clz	r0, r0
    a288:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    a28c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    a290:	00ca      	lsls	r2, r1, #3
    a292:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    a296:	1d17      	adds	r7, r2, #4
{
    a298:	460c      	mov	r4, r1
    a29a:	3206      	adds	r2, #6
    a29c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    a29e:	b956      	cbnz	r6, a2b6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    a2a0:	2101      	movs	r1, #1
    a2a2:	fa01 f000 	lsl.w	r0, r1, r0
    a2a6:	68d9      	ldr	r1, [r3, #12]
    a2a8:	4301      	orrs	r1, r0
    a2aa:	60d9      	str	r1, [r3, #12]
		b->next = c;
    a2ac:	f8cc 4010 	str.w	r4, [ip, #16]
    a2b0:	53dd      	strh	r5, [r3, r7]
    a2b2:	529d      	strh	r5, [r3, r2]
}
    a2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    a2b6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    a2b8:	3104      	adds	r1, #4
    a2ba:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    a2bc:	53d8      	strh	r0, [r3, r7]
    a2be:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a2c2:	529e      	strh	r6, [r3, r2]
    a2c4:	80c5      	strh	r5, [r0, #6]
    a2c6:	525d      	strh	r5, [r3, r1]
    a2c8:	e7f4      	b.n	a2b4 <free_list_add+0x38>

0000a2ca <free_list_remove_bidx>:
{
    a2ca:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    a2cc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    a2d0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    a2d2:	4299      	cmp	r1, r3
    a2d4:	f102 0104 	add.w	r1, r2, #4
    a2d8:	d10a      	bne.n	a2f0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    a2da:	2301      	movs	r3, #1
    a2dc:	fa03 f202 	lsl.w	r2, r3, r2
    a2e0:	68c3      	ldr	r3, [r0, #12]
    a2e2:	ea23 0302 	bic.w	r3, r3, r2
    a2e6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    a2e8:	2300      	movs	r3, #0
    a2ea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    a2ee:	bd10      	pop	{r4, pc}
    a2f0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    a2f2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    a2f6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a2fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    a2fe:	80cb      	strh	r3, [r1, #6]
    a300:	8082      	strh	r2, [r0, #4]
}
    a302:	e7f4      	b.n	a2ee <free_list_remove_bidx+0x24>

0000a304 <alloc_chunk>:
{
    a304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    a308:	fab1 f581 	clz	r5, r1
    a30c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    a310:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    a314:	4603      	mov	r3, r0
	if (b->next) {
    a316:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    a31a:	460e      	mov	r6, r1
	if (b->next) {
    a31c:	b1c2      	cbz	r2, a350 <alloc_chunk+0x4c>
    a31e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    a320:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    a324:	4618      	mov	r0, r3
    a326:	4621      	mov	r1, r4
    a328:	f7ff ffa3 	bl	a272 <chunk_size>
    a32c:	42b0      	cmp	r0, r6
    a32e:	d306      	bcc.n	a33e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    a330:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    a332:	4618      	mov	r0, r3
    a334:	f7ff ffc9 	bl	a2ca <free_list_remove_bidx>
}
    a338:	4620      	mov	r0, r4
    a33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    a33e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    a342:	3f01      	subs	r7, #1
    a344:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    a346:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    a34a:	d001      	beq.n	a350 <alloc_chunk+0x4c>
    a34c:	4282      	cmp	r2, r0
    a34e:	d1e7      	bne.n	a320 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a350:	f1c5 0220 	rsb	r2, r5, #32
    a354:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a358:	4094      	lsls	r4, r2
    a35a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    a35c:	4014      	ands	r4, r2
    a35e:	d0eb      	beq.n	a338 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    a360:	fa94 f2a4 	rbit	r2, r4
    a364:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a368:	1d11      	adds	r1, r2, #4
    a36a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    a36e:	4621      	mov	r1, r4
    a370:	e7df      	b.n	a332 <alloc_chunk+0x2e>

0000a372 <split_chunks>:
{
    a372:	b538      	push	{r3, r4, r5, lr}
    a374:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a376:	f7ff ff7c 	bl	a272 <chunk_size>
{
    a37a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    a37c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    a37e:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    a380:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    a384:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a386:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    a388:	8060      	strh	r0, [r4, #2]
    a38a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a38e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    a390:	8044      	strh	r4, [r0, #2]
    a392:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    a396:	4618      	mov	r0, r3
    a398:	4611      	mov	r1, r2
    a39a:	f7ff ff6a 	bl	a272 <chunk_size>
	void *cmem = &buf[c];
    a39e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a3a0:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    a3a4:	bd38      	pop	{r3, r4, r5, pc}

0000a3a6 <sys_heap_alloc>:
{
    a3a6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a3a8:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    a3aa:	b909      	cbnz	r1, a3b0 <sys_heap_alloc+0xa>
		return NULL;
    a3ac:	2000      	movs	r0, #0
}
    a3ae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a3b0:	68ab      	ldr	r3, [r5, #8]
    a3b2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a3b6:	d9f9      	bls.n	a3ac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a3b8:	310b      	adds	r1, #11
    a3ba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a3bc:	4621      	mov	r1, r4
    a3be:	4628      	mov	r0, r5
    a3c0:	f7ff ffa0 	bl	a304 <alloc_chunk>
	if (c == 0U) {
    a3c4:	4606      	mov	r6, r0
    a3c6:	2800      	cmp	r0, #0
    a3c8:	d0f0      	beq.n	a3ac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a3ca:	4601      	mov	r1, r0
    a3cc:	4628      	mov	r0, r5
    a3ce:	f7ff ff50 	bl	a272 <chunk_size>
    a3d2:	42a0      	cmp	r0, r4
    a3d4:	d907      	bls.n	a3e6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    a3d6:	1932      	adds	r2, r6, r4
    a3d8:	4628      	mov	r0, r5
    a3da:	f7ff ffca 	bl	a372 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a3de:	4611      	mov	r1, r2
    a3e0:	4628      	mov	r0, r5
    a3e2:	f7ff ff4b 	bl	a27c <free_list_add>
	void *cmem = &buf[c];
    a3e6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a3ea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a3ec:	8853      	ldrh	r3, [r2, #2]
    a3ee:	f043 0301 	orr.w	r3, r3, #1
    a3f2:	8053      	strh	r3, [r2, #2]
    a3f4:	3004      	adds	r0, #4
	return mem;
    a3f6:	e7da      	b.n	a3ae <sys_heap_alloc+0x8>

0000a3f8 <_ldiv5>:
	uint32_t v_lo = *v;
    a3f8:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    a3fc:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    a3fe:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    a402:	fba2 2403 	umull	r2, r4, r2, r3
    a406:	18d5      	adds	r5, r2, r3
    a408:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    a40c:	fba1 1303 	umull	r1, r3, r1, r3
    a410:	1852      	adds	r2, r2, r1
    a412:	eb44 0403 	adc.w	r4, r4, r3
    a416:	1952      	adds	r2, r2, r5
    a418:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    a41c:	1889      	adds	r1, r1, r2
    a41e:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    a422:	e9c0 1300 	strd	r1, r3, [r0]
}
    a426:	bd30      	pop	{r4, r5, pc}

0000a428 <_get_digit>:
	if (*digit_count > 0) {
    a428:	680a      	ldr	r2, [r1, #0]
    a42a:	2a00      	cmp	r2, #0
{
    a42c:	b510      	push	{r4, lr}
    a42e:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    a430:	dd0f      	ble.n	a452 <_get_digit+0x2a>
		--*digit_count;
    a432:	3a01      	subs	r2, #1
    a434:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    a436:	681a      	ldr	r2, [r3, #0]
    a438:	6844      	ldr	r4, [r0, #4]
    a43a:	200a      	movs	r0, #10
    a43c:	fba2 1200 	umull	r1, r2, r2, r0
    a440:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    a444:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    a446:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    a44a:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    a44e:	3030      	adds	r0, #48	; 0x30
}
    a450:	bd10      	pop	{r4, pc}
		rval = '0';
    a452:	2030      	movs	r0, #48	; 0x30
    a454:	e7fc      	b.n	a450 <_get_digit+0x28>

0000a456 <outs>:
{
    a456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a45a:	4607      	mov	r7, r0
    a45c:	4688      	mov	r8, r1
    a45e:	4615      	mov	r5, r2
    a460:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a462:	4614      	mov	r4, r2
    a464:	42b4      	cmp	r4, r6
    a466:	d305      	bcc.n	a474 <outs+0x1e>
    a468:	b10e      	cbz	r6, a46e <outs+0x18>
	return (int)count;
    a46a:	1b60      	subs	r0, r4, r5
    a46c:	e008      	b.n	a480 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a46e:	7823      	ldrb	r3, [r4, #0]
    a470:	2b00      	cmp	r3, #0
    a472:	d0fa      	beq.n	a46a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    a474:	f814 0b01 	ldrb.w	r0, [r4], #1
    a478:	4641      	mov	r1, r8
    a47a:	47b8      	blx	r7
		if (rc < 0) {
    a47c:	2800      	cmp	r0, #0
    a47e:	daf1      	bge.n	a464 <outs+0xe>
}
    a480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a484 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a484:	4040      	eors	r0, r0
    a486:	f380 8811 	msr	BASEPRI, r0
    a48a:	f04f 0004 	mov.w	r0, #4
    a48e:	df02      	svc	2
}
    a490:	4770      	bx	lr

0000a492 <assert_print>:

void assert_print(const char *fmt, ...)
{
    a492:	b40f      	push	{r0, r1, r2, r3}
    a494:	b507      	push	{r0, r1, r2, lr}
    a496:	a904      	add	r1, sp, #16
    a498:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a49c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a49e:	f7ff fe7a 	bl	a196 <vprintk>

	va_end(ap);
}
    a4a2:	b003      	add	sp, #12
    a4a4:	f85d eb04 	ldr.w	lr, [sp], #4
    a4a8:	b004      	add	sp, #16
    a4aa:	4770      	bx	lr

0000a4ac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a4ac:	4770      	bx	lr

0000a4ae <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a4ae:	f000 bb46 	b.w	ab3e <sys_clock_cycle_get_32>

0000a4b2 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    a4b2:	2000      	movs	r0, #0
    a4b4:	4770      	bx	lr

0000a4b6 <z_log_vprintk>:
{
    a4b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a4b8:	2300      	movs	r3, #0
    a4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a4be:	e9cd 3300 	strd	r3, r3, [sp]
    a4c2:	461a      	mov	r2, r3
    a4c4:	4619      	mov	r1, r3
    a4c6:	4618      	mov	r0, r3
    a4c8:	f7f9 f928 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    a4cc:	b005      	add	sp, #20
    a4ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4d2 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a4d2:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    a4d4:	f7f8 fe7e 	bl	31d4 <log_init>
	}

	return 0;
}
    a4d8:	2000      	movs	r0, #0
    a4da:	bd08      	pop	{r3, pc}

0000a4dc <z_log_get_tag>:
}
    a4dc:	2000      	movs	r0, #0
    a4de:	4770      	bx	lr

0000a4e0 <out_func>:
{
    a4e0:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a4e2:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    a4e6:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a4ea:	6852      	ldr	r2, [r2, #4]
    a4ec:	2101      	movs	r1, #1
    a4ee:	f10d 0007 	add.w	r0, sp, #7
    a4f2:	4798      	blx	r3
}
    a4f4:	2000      	movs	r0, #0
    a4f6:	b003      	add	sp, #12
    a4f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4fc <cr_out_func>:
{
    a4fc:	b538      	push	{r3, r4, r5, lr}
    a4fe:	4605      	mov	r5, r0
    a500:	460c      	mov	r4, r1
	out_func(c, ctx);
    a502:	f7ff ffed 	bl	a4e0 <out_func>
	if (c == '\n') {
    a506:	2d0a      	cmp	r5, #10
    a508:	d103      	bne.n	a512 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a50a:	4621      	mov	r1, r4
    a50c:	200d      	movs	r0, #13
    a50e:	f7ff ffe7 	bl	a4e0 <out_func>
}
    a512:	2000      	movs	r0, #0
    a514:	bd38      	pop	{r3, r4, r5, pc}

0000a516 <buffer_write>:
{
    a516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a518:	4606      	mov	r6, r0
    a51a:	460d      	mov	r5, r1
    a51c:	4614      	mov	r4, r2
    a51e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a520:	4621      	mov	r1, r4
    a522:	4628      	mov	r0, r5
    a524:	463a      	mov	r2, r7
    a526:	47b0      	blx	r6
	} while (len != 0);
    a528:	1a24      	subs	r4, r4, r0
		buf += processed;
    a52a:	4405      	add	r5, r0
	} while (len != 0);
    a52c:	d1f8      	bne.n	a520 <buffer_write+0xa>
}
    a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a530 <log_output_flush>:
		     output->control_block->offset,
    a530:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a532:	6881      	ldr	r1, [r0, #8]
{
    a534:	b510      	push	{r4, lr}
    a536:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a538:	e9d2 2300 	ldrd	r2, r3, [r2]
    a53c:	6800      	ldr	r0, [r0, #0]
    a53e:	f7ff ffea 	bl	a516 <buffer_write>
	output->control_block->offset = 0;
    a542:	6863      	ldr	r3, [r4, #4]
    a544:	2200      	movs	r2, #0
    a546:	601a      	str	r2, [r3, #0]
}
    a548:	bd10      	pop	{r4, pc}

0000a54a <z_log_msg2_finalize>:
{
    a54a:	b570      	push	{r4, r5, r6, lr}
    a54c:	460e      	mov	r6, r1
    a54e:	4615      	mov	r5, r2
    a550:	4619      	mov	r1, r3
    a552:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    a556:	4604      	mov	r4, r0
    a558:	b918      	cbnz	r0, a562 <z_log_msg2_finalize+0x18>
}
    a55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a55e:	f7f8 be9f 	b.w	32a0 <z_log_dropped>
	if (data) {
    a562:	b12b      	cbz	r3, a570 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    a564:	3010      	adds	r0, #16
    a566:	f3c5 2349 	ubfx	r3, r5, #9, #10
    a56a:	4418      	add	r0, r3
    a56c:	f000 fe06 	bl	b17c <memcpy>
	msg->hdr.source = source;
    a570:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    a574:	4620      	mov	r0, r4
}
    a576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    a57a:	f7f8 beaf 	b.w	32dc <z_log_msg2_commit>

0000a57e <abort_function>:
{
    a57e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    a580:	2000      	movs	r0, #0
    a582:	f7f8 fdcd 	bl	3120 <sys_reboot>

0000a586 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a586:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a588:	ab0b      	add	r3, sp, #44	; 0x2c
    a58a:	9305      	str	r3, [sp, #20]
    a58c:	9303      	str	r3, [sp, #12]
    a58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a590:	9302      	str	r3, [sp, #8]
    a592:	2300      	movs	r3, #0
    a594:	e9cd 3300 	strd	r3, r3, [sp]
    a598:	2201      	movs	r2, #1
    a59a:	4618      	mov	r0, r3
    a59c:	f7f9 f8be 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    a5a0:	b007      	add	sp, #28
    a5a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5a6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a5a6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a5a8:	6800      	ldr	r0, [r0, #0]
    a5aa:	f7f9 bc43 	b.w	3e34 <z_arm_fatal_error>

0000a5ae <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a5ae:	2100      	movs	r1, #0
    a5b0:	2001      	movs	r0, #1
    a5b2:	f7f9 bc3f 	b.w	3e34 <z_arm_fatal_error>

0000a5b6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a5b6:	b508      	push	{r3, lr}
	handler();
    a5b8:	f7f9 fcdc 	bl	3f74 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    a5bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    a5c0:	f7f9 bdb4 	b.w	412c <z_arm_exc_exit>

0000a5c4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a5c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a5c6:	ab0b      	add	r3, sp, #44	; 0x2c
    a5c8:	9305      	str	r3, [sp, #20]
    a5ca:	9303      	str	r3, [sp, #12]
    a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5ce:	9302      	str	r3, [sp, #8]
    a5d0:	2300      	movs	r3, #0
    a5d2:	e9cd 3300 	strd	r3, r3, [sp]
    a5d6:	2201      	movs	r2, #1
    a5d8:	4618      	mov	r0, r3
    a5da:	f7f9 f89f 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    a5de:	b007      	add	sp, #28
    a5e0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5e4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a5e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a5e6:	ab0b      	add	r3, sp, #44	; 0x2c
    a5e8:	9305      	str	r3, [sp, #20]
    a5ea:	9303      	str	r3, [sp, #12]
    a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5ee:	9302      	str	r3, [sp, #8]
    a5f0:	2300      	movs	r3, #0
    a5f2:	e9cd 3300 	strd	r3, r3, [sp]
    a5f6:	2201      	movs	r2, #1
    a5f8:	4618      	mov	r0, r3
    a5fa:	f7f9 f88f 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    a5fe:	b007      	add	sp, #28
    a600:	f85d fb04 	ldr.w	pc, [sp], #4

0000a604 <_stdout_hook_default>:
}
    a604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a608:	4770      	bx	lr

0000a60a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a60a:	2806      	cmp	r0, #6
    a60c:	d108      	bne.n	a620 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a612:	2201      	movs	r2, #1
    a614:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a618:	f3bf 8f4f 	dsb	sy
        __WFE();
    a61c:	bf20      	wfe
    while (true)
    a61e:	e7fd      	b.n	a61c <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a620:	4770      	bx	lr

0000a622 <pm_state_exit_post_ops>:
	__asm__ volatile(
    a622:	2300      	movs	r3, #0
    a624:	f383 8811 	msr	BASEPRI, r3
    a628:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a62c:	4770      	bx	lr

0000a62e <set_on_state>:
	__asm__ volatile(
    a62e:	f04f 0320 	mov.w	r3, #32
    a632:	f3ef 8211 	mrs	r2, BASEPRI
    a636:	f383 8812 	msr	BASEPRI_MAX, r3
    a63a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a63e:	6803      	ldr	r3, [r0, #0]
    a640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a644:	f043 0302 	orr.w	r3, r3, #2
    a648:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a64a:	f382 8811 	msr	BASEPRI, r2
    a64e:	f3bf 8f6f 	isb	sy
}
    a652:	4770      	bx	lr

0000a654 <async_start>:
{
    a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a656:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    a658:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    a65a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a65c:	f04f 0520 	mov.w	r5, #32
    a660:	f3ef 8611 	mrs	r6, BASEPRI
    a664:	f385 8812 	msr	BASEPRI_MAX, r5
    a668:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a66c:	250c      	movs	r5, #12
    a66e:	4369      	muls	r1, r5
    a670:	440c      	add	r4, r1
    a672:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a674:	f005 0c07 	and.w	ip, r5, #7
    a678:	f1bc 0f01 	cmp.w	ip, #1
    a67c:	d10b      	bne.n	a696 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a67e:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    a680:	f386 8811 	msr	BASEPRI, r6
    a684:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    a688:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    a68c:	6843      	ldr	r3, [r0, #4]
    a68e:	585b      	ldr	r3, [r3, r1]
    a690:	4798      	blx	r3
	return 0;
    a692:	2000      	movs	r0, #0
}
    a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a696:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    a69a:	42af      	cmp	r7, r5
    a69c:	f386 8811 	msr	BASEPRI, r6
    a6a0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    a6a4:	bf0c      	ite	eq
    a6a6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    a6aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a6ae:	e7f1      	b.n	a694 <async_start+0x40>

0000a6b0 <api_start>:
{
    a6b0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a6b2:	2480      	movs	r4, #128	; 0x80
    a6b4:	9400      	str	r4, [sp, #0]
    a6b6:	f7ff ffcd 	bl	a654 <async_start>
}
    a6ba:	b002      	add	sp, #8
    a6bc:	bd10      	pop	{r4, pc}

0000a6be <onoff_started_callback>:
	return &data->mgr[type];
    a6be:	6900      	ldr	r0, [r0, #16]
    a6c0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a6c2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    a6c6:	2100      	movs	r1, #0
    a6c8:	4710      	bx	r2

0000a6ca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a6ca:	2000      	movs	r0, #0
    a6cc:	f7fc b844 	b.w	6758 <nrfx_clock_start>

0000a6d0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a6d0:	2000      	movs	r0, #0
    a6d2:	f7fc b8a5 	b.w	6820 <nrfx_clock_stop>

0000a6d6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    a6d6:	2280      	movs	r2, #128	; 0x80
    a6d8:	f7fa bb04 	b.w	4ce4 <stop>

0000a6dc <blocking_start_callback>:
{
    a6dc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a6de:	f7fd bb5d 	b.w	7d9c <z_impl_k_sem_give>

0000a6e2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a6e2:	6843      	ldr	r3, [r0, #4]
    a6e4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a6e6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a6ea:	600b      	str	r3, [r1, #0]
}
    a6ec:	2000      	movs	r0, #0
    a6ee:	4770      	bx	lr

0000a6f0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a6f0:	6843      	ldr	r3, [r0, #4]
    a6f2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a6f4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a6f8:	4042      	eors	r2, r0
    a6fa:	400a      	ands	r2, r1
    a6fc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a6fe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a702:	2000      	movs	r0, #0
    a704:	4770      	bx	lr

0000a706 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a706:	6843      	ldr	r3, [r0, #4]
    a708:	685b      	ldr	r3, [r3, #4]
}
    a70a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    a70c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    a710:	4770      	bx	lr

0000a712 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a712:	6843      	ldr	r3, [r0, #4]
    a714:	685b      	ldr	r3, [r3, #4]
}
    a716:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    a718:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    a71c:	4770      	bx	lr

0000a71e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a71e:	6843      	ldr	r3, [r0, #4]
    a720:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a722:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a726:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a728:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a72c:	2000      	movs	r0, #0
    a72e:	4770      	bx	lr

0000a730 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    a730:	6902      	ldr	r2, [r0, #16]
{
    a732:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    a734:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    a738:	e883 0003 	stmia.w	r3, {r0, r1}
}
    a73c:	2000      	movs	r0, #0
    a73e:	4770      	bx	lr

0000a740 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    a740:	6843      	ldr	r3, [r0, #4]
    a742:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a744:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a748:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a74c:	4770      	bx	lr

0000a74e <tx_start>:
{
    a74e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a750:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    a752:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a754:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a758:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a75c:	2200      	movs	r2, #0
    a75e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a762:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    a766:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    a76a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a76e:	6862      	ldr	r2, [r4, #4]
    a770:	06d2      	lsls	r2, r2, #27
    a772:	d50f      	bpl.n	a794 <tx_start+0x46>
	if (data->async) {
    a774:	6902      	ldr	r2, [r0, #16]
    a776:	68d2      	ldr	r2, [r2, #12]
    a778:	b12a      	cbz	r2, a786 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    a77a:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    a77e:	f041 0101 	orr.w	r1, r1, #1
    a782:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a786:	2208      	movs	r2, #8
    a788:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a78c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a790:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a794:	2201      	movs	r2, #1
    a796:	609a      	str	r2, [r3, #8]
}
    a798:	bd10      	pop	{r4, pc}

0000a79a <user_callback>:
	if (data->async->user_callback) {
    a79a:	6903      	ldr	r3, [r0, #16]
    a79c:	68da      	ldr	r2, [r3, #12]
    a79e:	6813      	ldr	r3, [r2, #0]
    a7a0:	b10b      	cbz	r3, a7a6 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    a7a2:	6852      	ldr	r2, [r2, #4]
    a7a4:	4718      	bx	r3
}
    a7a6:	4770      	bx	lr

0000a7a8 <notify_uart_rx_rdy>:
{
    a7a8:	b570      	push	{r4, r5, r6, lr}
    a7aa:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    a7ac:	6906      	ldr	r6, [r0, #16]
{
    a7ae:	4604      	mov	r4, r0
    a7b0:	460d      	mov	r5, r1
	struct uart_event evt = {
    a7b2:	2214      	movs	r2, #20
    a7b4:	2100      	movs	r1, #0
    a7b6:	a801      	add	r0, sp, #4
    a7b8:	f000 fd01 	bl	b1be <memset>
    a7bc:	2302      	movs	r3, #2
    a7be:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    a7c2:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    a7c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    a7c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    a7c8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    a7ca:	a901      	add	r1, sp, #4
    a7cc:	4620      	mov	r0, r4
	struct uart_event evt = {
    a7ce:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    a7d2:	f7ff ffe2 	bl	a79a <user_callback>
}
    a7d6:	b006      	add	sp, #24
    a7d8:	bd70      	pop	{r4, r5, r6, pc}

0000a7da <rx_buf_release>:
{
    a7da:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    a7dc:	680e      	ldr	r6, [r1, #0]
{
    a7de:	b086      	sub	sp, #24
    a7e0:	4605      	mov	r5, r0
    a7e2:	460c      	mov	r4, r1
	if (*buf) {
    a7e4:	b17e      	cbz	r6, a806 <rx_buf_release+0x2c>
		struct uart_event evt = {
    a7e6:	2214      	movs	r2, #20
    a7e8:	2100      	movs	r1, #0
    a7ea:	a801      	add	r0, sp, #4
    a7ec:	f000 fce7 	bl	b1be <memset>
    a7f0:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    a7f2:	eb0d 0103 	add.w	r1, sp, r3
    a7f6:	4628      	mov	r0, r5
		struct uart_event evt = {
    a7f8:	f88d 3004 	strb.w	r3, [sp, #4]
    a7fc:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    a7fe:	f7ff ffcc 	bl	a79a <user_callback>
		*buf = NULL;
    a802:	2300      	movs	r3, #0
    a804:	6023      	str	r3, [r4, #0]
}
    a806:	b006      	add	sp, #24
    a808:	bd70      	pop	{r4, r5, r6, pc}

0000a80a <notify_rx_disable>:
{
    a80a:	b510      	push	{r4, lr}
    a80c:	b086      	sub	sp, #24
    a80e:	4604      	mov	r4, r0
	struct uart_event evt = {
    a810:	2214      	movs	r2, #20
    a812:	2100      	movs	r1, #0
    a814:	a801      	add	r0, sp, #4
    a816:	f000 fcd2 	bl	b1be <memset>
    a81a:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    a81c:	a901      	add	r1, sp, #4
    a81e:	4620      	mov	r0, r4
	struct uart_event evt = {
    a820:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    a824:	f7ff ffb9 	bl	a79a <user_callback>
}
    a828:	b006      	add	sp, #24
    a82a:	bd10      	pop	{r4, pc}

0000a82c <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    a82c:	6843      	ldr	r3, [r0, #4]
{
    a82e:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    a830:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    a832:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    a834:	f04f 0020 	mov.w	r0, #32
    a838:	f3ef 8511 	mrs	r5, BASEPRI
    a83c:	f380 8812 	msr	BASEPRI_MAX, r0
    a840:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    a844:	68e4      	ldr	r4, [r4, #12]
    a846:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a848:	b190      	cbz	r0, a870 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    a84a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    a84c:	b998      	cbnz	r0, a876 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    a84e:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a852:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a856:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    a85a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a85e:	f042 0220 	orr.w	r2, r2, #32
    a862:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    a866:	f385 8811 	msr	BASEPRI, r5
    a86a:	f3bf 8f6f 	isb	sy
}
    a86e:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    a870:	f06f 000c 	mvn.w	r0, #12
    a874:	e7f7      	b.n	a866 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    a876:	f06f 000f 	mvn.w	r0, #15
    a87a:	e7f4      	b.n	a866 <uarte_nrfx_rx_buf_rsp+0x3a>

0000a87c <uarte_nrfx_callback_set>:
	if (!data->async) {
    a87c:	6903      	ldr	r3, [r0, #16]
    a87e:	68db      	ldr	r3, [r3, #12]
    a880:	b11b      	cbz	r3, a88a <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    a882:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    a886:	2000      	movs	r0, #0
    a888:	4770      	bx	lr
		return -ENOTSUP;
    a88a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    a88e:	4770      	bx	lr

0000a890 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    a890:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    a892:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    a894:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    a896:	681b      	ldr	r3, [r3, #0]
{
    a898:	b510      	push	{r4, lr}
	if (data->async) {
    a89a:	b958      	cbnz	r0, a8b4 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a89c:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a8a0:	b15c      	cbz	r4, a8ba <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    a8a2:	7d52      	ldrb	r2, [r2, #21]
    a8a4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a8a6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a8aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a8ae:	2201      	movs	r2, #1
    a8b0:	601a      	str	r2, [r3, #0]
}
    a8b2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    a8b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a8b8:	e7fb      	b.n	a8b2 <uarte_nrfx_poll_in+0x22>
		return -1;
    a8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a8be:	e7f8      	b.n	a8b2 <uarte_nrfx_poll_in+0x22>

0000a8c0 <uarte_nrfx_rx_disable>:
{
    a8c0:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    a8c2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    a8c4:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    a8c6:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    a8c8:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    a8ca:	6e03      	ldr	r3, [r0, #96]	; 0x60
    a8cc:	b1b3      	cbz	r3, a8fc <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    a8ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a8d0:	b153      	cbz	r3, a8e8 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    a8d2:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    a8d6:	f023 0320 	bic.w	r3, r3, #32
    a8da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a8de:	2300      	movs	r3, #0
    a8e0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    a8e4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    a8e8:	3088      	adds	r0, #136	; 0x88
    a8ea:	f000 fb60 	bl	afae <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    a8ee:	68eb      	ldr	r3, [r5, #12]
    a8f0:	2000      	movs	r0, #0
    a8f2:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a8f6:	2301      	movs	r3, #1
    a8f8:	6063      	str	r3, [r4, #4]
}
    a8fa:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    a8fc:	f06f 000d 	mvn.w	r0, #13
    a900:	e7fb      	b.n	a8fa <uarte_nrfx_rx_disable+0x3a>

0000a902 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    a902:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    a904:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    a906:	4614      	mov	r4, r2
    return p_reg->RXD.AMOUNT;
    a908:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    a90c:	460b      	mov	r3, r1
    a90e:	b1f1      	cbz	r1, a94e <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
    a910:	2100      	movs	r1, #0
    a912:	4618      	mov	r0, r3
    a914:	f000 fc53 	bl	b1be <memset>
    a918:	4603      	mov	r3, r0
    a91a:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a91c:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a920:	2100      	movs	r1, #0
    p_reg->RXD.MAXCNT = length;
    a922:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a926:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a928:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    a92c:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a930:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a932:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a936:	2800      	cmp	r0, #0
    a938:	d0fb      	beq.n	a932 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a93a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    a93e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    a942:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    a946:	b92b      	cbnz	r3, a954 <rx_flush.isra.0+0x52>
			return rx_amount;
    a948:	b2c0      	uxtb	r0, r0
}
    a94a:	b002      	add	sp, #8
    a94c:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
    a94e:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    a950:	4669      	mov	r1, sp
    a952:	e7e3      	b.n	a91c <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
    a954:	4285      	cmp	r5, r0
    a956:	d1f7      	bne.n	a948 <rx_flush.isra.0+0x46>
    a958:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    a95a:	4293      	cmp	r3, r2
    a95c:	d101      	bne.n	a962 <rx_flush.isra.0+0x60>
	return 0;
    a95e:	2000      	movs	r0, #0
    a960:	e7f3      	b.n	a94a <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
    a962:	f813 1b01 	ldrb.w	r1, [r3], #1
    a966:	2900      	cmp	r1, #0
    a968:	d0f7      	beq.n	a95a <rx_flush.isra.0+0x58>
    a96a:	e7ed      	b.n	a948 <rx_flush.isra.0+0x46>

0000a96c <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    a96c:	68c2      	ldr	r2, [r0, #12]
    a96e:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    a970:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    a972:	b508      	push	{r3, lr}
    a974:	4603      	mov	r3, r0
	if (!remaining) {
    a976:	d00b      	beq.n	a990 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    a978:	2a08      	cmp	r2, #8
    a97a:	bf28      	it	cs
    a97c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    a97e:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    a980:	3018      	adds	r0, #24
    a982:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    a984:	689b      	ldr	r3, [r3, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a986:	4419      	add	r1, r3
    a988:	f000 fbf8 	bl	b17c <memcpy>
	return true;
    a98c:	2001      	movs	r0, #1
}
    a98e:	bd08      	pop	{r3, pc}
		return false;
    a990:	4610      	mov	r0, r2
    a992:	e7fc      	b.n	a98e <setup_tx_cache.isra.0+0x22>

0000a994 <async_uart_release>:
{
    a994:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    a996:	6903      	ldr	r3, [r0, #16]
{
    a998:	4604      	mov	r4, r0
	__asm__ volatile(
    a99a:	f04f 0220 	mov.w	r2, #32
    a99e:	f3ef 8611 	mrs	r6, BASEPRI
    a9a2:	f382 8812 	msr	BASEPRI_MAX, r2
    a9a6:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    a9aa:	68dd      	ldr	r5, [r3, #12]
    a9ac:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a9b0:	ea23 0301 	bic.w	r3, r3, r1
    a9b4:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    a9b8:	b973      	cbnz	r3, a9d8 <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    a9ba:	2902      	cmp	r1, #2
    a9bc:	d107      	bne.n	a9ce <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    a9be:	6840      	ldr	r0, [r0, #4]
    a9c0:	2205      	movs	r2, #5
    a9c2:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    a9c6:	f7ff ff9c 	bl	a902 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    a9ca:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    a9ce:	6863      	ldr	r3, [r4, #4]
    a9d0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a9d2:	2200      	movs	r2, #0
    a9d4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    a9d8:	f386 8811 	msr	BASEPRI, r6
    a9dc:	f3bf 8f6f 	isb	sy
}
    a9e0:	bd70      	pop	{r4, r5, r6, pc}

0000a9e2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    a9e2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    a9e4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a9e6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a9ea:	b940      	cbnz	r0, a9fe <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a9ec:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a9ee:	079b      	lsls	r3, r3, #30
    a9f0:	d406      	bmi.n	aa00 <is_tx_ready.isra.0+0x1e>
    a9f2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    a9f6:	3800      	subs	r0, #0
    a9f8:	bf18      	it	ne
    a9fa:	2001      	movne	r0, #1
    a9fc:	4770      	bx	lr
    a9fe:	2001      	movs	r0, #1
}
    aa00:	4770      	bx	lr

0000aa02 <start_tx_locked>:
{
    aa02:	b510      	push	{r4, lr}
    aa04:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    aa06:	6840      	ldr	r0, [r0, #4]
    aa08:	f7ff ffeb 	bl	a9e2 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    aa0c:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    aa0e:	b918      	cbnz	r0, aa18 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    aa10:	2201      	movs	r2, #1
    aa12:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    aa16:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    aa18:	2200      	movs	r2, #0
    aa1a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    aa1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aa22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    aa26:	4620      	mov	r0, r4
    aa28:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    aa2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    aa30:	f7ff be8d 	b.w	a74e <tx_start>

0000aa34 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    aa34:	b510      	push	{r4, lr}
    aa36:	2200      	movs	r2, #0
    aa38:	4604      	mov	r4, r0
    aa3a:	2101      	movs	r1, #1
    aa3c:	2028      	movs	r0, #40	; 0x28
    aa3e:	f7f9 fa65 	bl	3f0c <z_arm_irq_priority_set>
    aa42:	2028      	movs	r0, #40	; 0x28
    aa44:	f7f9 fa46 	bl	3ed4 <arch_irq_enable>
    aa48:	4620      	mov	r0, r4
    aa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa4e:	f7fa be59 	b.w	5704 <uarte_instance_init.constprop.0>

0000aa52 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    aa52:	b510      	push	{r4, lr}
    aa54:	2200      	movs	r2, #0
    aa56:	4604      	mov	r4, r0
    aa58:	2101      	movs	r1, #1
    aa5a:	2002      	movs	r0, #2
    aa5c:	f7f9 fa56 	bl	3f0c <z_arm_irq_priority_set>
    aa60:	2002      	movs	r0, #2
    aa62:	f7f9 fa37 	bl	3ed4 <arch_irq_enable>
    aa66:	4620      	mov	r0, r4
    aa68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa6c:	f7fa be4a 	b.w	5704 <uarte_instance_init.constprop.0>

0000aa70 <rx_timeout>:
{
    aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    aa72:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    aa74:	68fb      	ldr	r3, [r7, #12]
    aa76:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    aa7a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    aa7e:	bb1a      	cbnz	r2, aac8 <rx_timeout+0x58>
	const struct device *dev = data->dev;
    aa80:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
    aa82:	686a      	ldr	r2, [r5, #4]
    aa84:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    aa86:	2110      	movs	r1, #16
    aa88:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    aa8c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    aa90:	6f59      	ldr	r1, [r3, #116]	; 0x74
    aa92:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    aa94:	bf1e      	ittt	ne
    aa96:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    aa98:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    aa9a:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    aa9e:	e9d3 2c1d 	ldrd	r2, ip, [r3, #116]	; 0x74
    aaa2:	eba2 020c 	sub.w	r2, r2, ip
	if (!HW_RX_COUNTING_ENABLED(data) &&
    aaa6:	2a00      	cmp	r2, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    aaa8:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
	int32_t len = data->async->rx_total_byte_cnt
    aaac:	4614      	mov	r4, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    aaae:	da0c      	bge.n	aaca <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    aab0:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    aab2:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    aab6:	d902      	bls.n	aabe <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    aab8:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
    aaba:	2c00      	cmp	r4, #0
    aabc:	dc20      	bgt.n	ab00 <rx_timeout+0x90>
	return config->uarte_regs;
    aabe:	686b      	ldr	r3, [r5, #4]
    aac0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    aac2:	2210      	movs	r2, #16
    aac4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    aaca:	eb02 0c00 	add.w	ip, r2, r0
    aace:	458c      	cmp	ip, r1
    aad0:	d8f2      	bhi.n	aab8 <rx_timeout+0x48>
	if (len > 0) {
    aad2:	2a00      	cmp	r2, #0
    aad4:	d0f3      	beq.n	aabe <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
    aad6:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    aada:	428a      	cmp	r2, r1
    aadc:	da12      	bge.n	ab04 <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
    aade:	4628      	mov	r0, r5
    aae0:	4621      	mov	r1, r4
    aae2:	f7ff fe61 	bl	a7a8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    aae6:	68f8      	ldr	r0, [r7, #12]
    aae8:	6e83      	ldr	r3, [r0, #104]	; 0x68
    aaea:	4423      	add	r3, r4
    aaec:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    aaee:	6f83      	ldr	r3, [r0, #120]	; 0x78
    aaf0:	4423      	add	r3, r4
    aaf2:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    aaf4:	2e00      	cmp	r6, #0
    aaf6:	d0e2      	beq.n	aabe <rx_timeout+0x4e>
    aaf8:	3088      	adds	r0, #136	; 0x88
    aafa:	f000 fa58 	bl	afae <z_impl_k_timer_stop>
}
    aafe:	e7de      	b.n	aabe <rx_timeout+0x4e>
		clipped = true;
    ab00:	2601      	movs	r6, #1
    ab02:	e7ec      	b.n	aade <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
    ab04:	1a52      	subs	r2, r2, r1
    ab06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (clipped) {
    ab0a:	e7d8      	b.n	aabe <rx_timeout+0x4e>

0000ab0c <uarte_nrfx_tx_abort>:
{
    ab0c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    ab0e:	6843      	ldr	r3, [r0, #4]
    ab10:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    ab12:	6903      	ldr	r3, [r0, #16]
    ab14:	68d8      	ldr	r0, [r3, #12]
    ab16:	6883      	ldr	r3, [r0, #8]
    ab18:	b14b      	cbz	r3, ab2e <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    ab1a:	2400      	movs	r4, #0
    ab1c:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    ab20:	3028      	adds	r0, #40	; 0x28
    ab22:	f000 fa44 	bl	afae <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ab26:	2301      	movs	r3, #1
    ab28:	60eb      	str	r3, [r5, #12]
	return 0;
    ab2a:	4620      	mov	r0, r4
}
    ab2c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    ab2e:	f06f 000d 	mvn.w	r0, #13
    ab32:	e7fb      	b.n	ab2c <uarte_nrfx_tx_abort+0x20>

0000ab34 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    ab34:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ab36:	6818      	ldr	r0, [r3, #0]
    ab38:	f7ff bfe8 	b.w	ab0c <uarte_nrfx_tx_abort>

0000ab3c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ab3c:	4770      	bx	lr

0000ab3e <sys_clock_cycle_get_32>:
{
    ab3e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    ab40:	f7fb f9e2 	bl	5f08 <z_nrf_rtc_timer_read>
}
    ab44:	bd08      	pop	{r3, pc}

0000ab46 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    ab46:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    ab48:	6843      	ldr	r3, [r0, #4]
    ab4a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    ab4c:	7a03      	ldrb	r3, [r0, #8]
    ab4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ab52:	3b01      	subs	r3, #1
    ab54:	00db      	lsls	r3, r3, #3
    ab56:	6845      	ldr	r5, [r0, #4]
    ab58:	6814      	ldr	r4, [r2, #0]
    ab5a:	441d      	add	r5, r3
    ab5c:	42ac      	cmp	r4, r5
    ab5e:	d902      	bls.n	ab66 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    ab60:	f06f 0001 	mvn.w	r0, #1
}
    ab64:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    ab66:	7965      	ldrb	r5, [r4, #5]
    ab68:	428d      	cmp	r5, r1
    ab6a:	d002      	beq.n	ab72 <pinctrl_lookup_state+0x2c>
		(*state)++;
    ab6c:	3408      	adds	r4, #8
    ab6e:	6014      	str	r4, [r2, #0]
    ab70:	e7f1      	b.n	ab56 <pinctrl_lookup_state+0x10>
			return 0;
    ab72:	2000      	movs	r0, #0
    ab74:	e7f6      	b.n	ab64 <pinctrl_lookup_state+0x1e>

0000ab76 <nrf_gpio_pin_clear>:
{
    ab76:	b507      	push	{r0, r1, r2, lr}
    ab78:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ab7a:	a801      	add	r0, sp, #4
    ab7c:	f7fb fb78 	bl	6270 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ab80:	9a01      	ldr	r2, [sp, #4]
    ab82:	2301      	movs	r3, #1
    ab84:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    ab86:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    ab8a:	b003      	add	sp, #12
    ab8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab90 <nrf_gpio_pin_set>:
{
    ab90:	b507      	push	{r0, r1, r2, lr}
    ab92:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ab94:	a801      	add	r0, sp, #4
    ab96:	f7fb fb6b 	bl	6270 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    ab9a:	9a01      	ldr	r2, [sp, #4]
    ab9c:	2301      	movs	r3, #1
    ab9e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    aba0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    aba4:	b003      	add	sp, #12
    aba6:	f85d fb04 	ldr.w	pc, [sp], #4

0000abaa <nrf_gpio_pin_write>:
    if (value == 0)
    abaa:	b909      	cbnz	r1, abb0 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    abac:	f7ff bfe3 	b.w	ab76 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    abb0:	f7ff bfee 	b.w	ab90 <nrf_gpio_pin_set>

0000abb4 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    abb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    abb6:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    abba:	2b00      	cmp	r3, #0
{
    abbc:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    abbe:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    abc2:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    abc4:	bf0b      	itete	eq
    abc6:	4615      	moveq	r5, r2
    abc8:	2501      	movne	r5, #1
    abca:	460e      	moveq	r6, r1
    abcc:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    abce:	9301      	str	r3, [sp, #4]
    abd0:	f7fb fb4e 	bl	6270 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    abd4:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    abd8:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    abdc:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    abe0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    abe2:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    abe4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    abe8:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    abec:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    abf0:	b002      	add	sp, #8
    abf2:	bd70      	pop	{r4, r5, r6, pc}

0000abf4 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    abf4:	b570      	push	{r4, r5, r6, lr}
    abf6:	4615      	mov	r5, r2
    abf8:	4604      	mov	r4, r0
    abfa:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    abfe:	42a6      	cmp	r6, r4
    ac00:	d101      	bne.n	ac06 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    ac02:	2000      	movs	r0, #0
}
    ac04:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    ac06:	6823      	ldr	r3, [r4, #0]
    ac08:	0c1a      	lsrs	r2, r3, #16
    ac0a:	2a22      	cmp	r2, #34	; 0x22
    ac0c:	f200 808e 	bhi.w	ad2c <pinctrl_configure_pins+0x138>
    ac10:	e8df f002 	tbb	[pc, r2]
    ac14:	43241d12 	.word	0x43241d12
    ac18:	8c433929 	.word	0x8c433929
    ac1c:	488c8c8c 	.word	0x488c8c8c
    ac20:	8c8c8c4d 	.word	0x8c8c8c4d
    ac24:	8c8c8c8c 	.word	0x8c8c8c8c
    ac28:	5e528c8c 	.word	0x5e528c8c
    ac2c:	8c8c6863 	.word	0x8c8c6863
    ac30:	78736d8c 	.word	0x78736d8c
    ac34:	827d      	.short	0x827d
    ac36:	87          	.byte	0x87
    ac37:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    ac38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac3c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    ac40:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    ac42:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ac46:	f7ff ffa3 	bl	ab90 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac4a:	2201      	movs	r2, #1
    ac4c:	e015      	b.n	ac7a <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    ac4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac52:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac56:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac58:	2100      	movs	r1, #0
    ac5a:	e00f      	b.n	ac7c <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    ac5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac60:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    ac64:	e7ec      	b.n	ac40 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    ac66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac6a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    ac6e:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    ac70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ac74:	f7ff ff7f 	bl	ab76 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac78:	2200      	movs	r2, #0
    ac7a:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac7c:	6820      	ldr	r0, [r4, #0]
    ac7e:	f7ff ff99 	bl	abb4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ac82:	3404      	adds	r4, #4
    ac84:	e7bb      	b.n	abfe <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    ac86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac8a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    ac8e:	6820      	ldr	r0, [r4, #0]
    ac90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ac94:	f7ff ff6f 	bl	ab76 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac98:	e7d7      	b.n	ac4a <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    ac9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac9e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aca2:	e7d8      	b.n	ac56 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    aca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aca8:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    acac:	e7d3      	b.n	ac56 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    acae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acb2:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    acb6:	e7ce      	b.n	ac56 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    acb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acbc:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    acc0:	6820      	ldr	r0, [r4, #0]
    acc2:	f3c0 3140 	ubfx	r1, r0, #13, #1
    acc6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    acca:	f7ff ff6e 	bl	abaa <nrf_gpio_pin_write>
    acce:	e7bc      	b.n	ac4a <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    acd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acd4:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    acd8:	e7f2      	b.n	acc0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    acda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acde:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    ace2:	e7ed      	b.n	acc0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    ace4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ace8:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    acec:	e7e8      	b.n	acc0 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    acee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acf2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    acf6:	2201      	movs	r2, #1
    acf8:	e7ae      	b.n	ac58 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    acfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    acfe:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ad02:	e7f8      	b.n	acf6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    ad04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ad08:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ad0c:	e7f3      	b.n	acf6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    ad0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ad12:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ad16:	e7ee      	b.n	acf6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    ad18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ad1c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ad20:	e7e9      	b.n	acf6 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    ad22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ad26:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    ad2a:	e7e4      	b.n	acf6 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    ad2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ad30:	e768      	b.n	ac04 <pinctrl_configure_pins+0x10>

0000ad32 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    ad32:	f7ff b819 	b.w	9d68 <nrf_cc3xx_platform_init_no_rng>

0000ad36 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    ad36:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    ad38:	f7f8 ff94 	bl	3c64 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ad3c:	f7f9 f846 	bl	3dcc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    ad40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    ad44:	f7ff b810 	b.w	9d68 <nrf_cc3xx_platform_init_no_rng>

0000ad48 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    ad48:	4700      	bx	r0

0000ad4a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    ad4a:	f000 b8fe 	b.w	af4a <z_impl_k_busy_wait>

0000ad4e <nrf_gpio_pin_present_check>:
    switch (port)
    ad4e:	0943      	lsrs	r3, r0, #5
    ad50:	d00b      	beq.n	ad6a <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    ad52:	2b01      	cmp	r3, #1
    ad54:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ad58:	bf18      	it	ne
    ad5a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    ad5c:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    ad60:	fa23 f000 	lsr.w	r0, r3, r0
}
    ad64:	f000 0001 	and.w	r0, r0, #1
    ad68:	4770      	bx	lr
    switch (port)
    ad6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ad6e:	e7f5      	b.n	ad5c <nrf_gpio_pin_present_check+0xe>

0000ad70 <pin_is_task_output>:
{
    ad70:	b508      	push	{r3, lr}
    ad72:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    ad74:	f7fb fdbc 	bl	68f0 <pin_is_output>
    ad78:	b110      	cbz	r0, ad80 <pin_is_task_output+0x10>
    ad7a:	4610      	mov	r0, r2
    ad7c:	f7fb fda2 	bl	68c4 <pin_in_use_by_te>
}
    ad80:	f000 0001 	and.w	r0, r0, #1
    ad84:	bd08      	pop	{r3, pc}

0000ad86 <nrf_gpio_reconfigure>:
{
    ad86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ad8a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ad8c:	a801      	add	r0, sp, #4
{
    ad8e:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    ad92:	460c      	mov	r4, r1
    ad94:	4617      	mov	r7, r2
    ad96:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    ad98:	f7fb fdd2 	bl	6940 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ad9c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    ad9e:	1e39      	subs	r1, r7, #0
    ada0:	bf18      	it	ne
    ada2:	2101      	movne	r1, #1
    ada4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ada8:	1e23      	subs	r3, r4, #0
    adaa:	bf18      	it	ne
    adac:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    adae:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    adb0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    adb4:	bf14      	ite	ne
    adb6:	210c      	movne	r1, #12
    adb8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    adba:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    adbc:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    adc0:	bf14      	ite	ne
    adc2:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    adc6:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    adc8:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    adcc:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    add0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    add4:	bf14      	ite	ne
    add6:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    adda:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    addc:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    adde:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ade2:	b104      	cbz	r4, ade6 <nrf_gpio_reconfigure+0x60>
    ade4:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    ade6:	b10f      	cbz	r7, adec <nrf_gpio_reconfigure+0x66>
    ade8:	783f      	ldrb	r7, [r7, #0]
    adea:	007f      	lsls	r7, r7, #1
    adec:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    adee:	b10e      	cbz	r6, adf4 <nrf_gpio_reconfigure+0x6e>
    adf0:	7836      	ldrb	r6, [r6, #0]
    adf2:	00b6      	lsls	r6, r6, #2
    adf4:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    adf6:	b18d      	cbz	r5, ae1c <nrf_gpio_reconfigure+0x96>
    adf8:	7829      	ldrb	r1, [r5, #0]
    adfa:	0209      	lsls	r1, r1, #8
    adfc:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    adfe:	f1b8 0f00 	cmp.w	r8, #0
    ae02:	d003      	beq.n	ae0c <nrf_gpio_reconfigure+0x86>
    ae04:	f898 8000 	ldrb.w	r8, [r8]
    ae08:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ae0c:	4321      	orrs	r1, r4
    ae0e:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    ae12:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    ae16:	b002      	add	sp, #8
    ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ae1c:	4629      	mov	r1, r5
    ae1e:	e7ed      	b.n	adfc <nrf_gpio_reconfigure+0x76>

0000ae20 <nrf_gpio_cfg_sense_set>:
{
    ae20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ae22:	f10d 030f 	add.w	r3, sp, #15
    ae26:	9301      	str	r3, [sp, #4]
    ae28:	2300      	movs	r3, #0
{
    ae2a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ae2e:	9300      	str	r3, [sp, #0]
    ae30:	461a      	mov	r2, r3
    ae32:	4619      	mov	r1, r3
    ae34:	f7ff ffa7 	bl	ad86 <nrf_gpio_reconfigure>
}
    ae38:	b005      	add	sp, #20
    ae3a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae3e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    ae3e:	f7fc b93f 	b.w	70c0 <_DoInit>

0000ae42 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ae42:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ae44:	f7ff fffb 	bl	ae3e <SEGGER_RTT_Init>

	return 0;
}
    ae48:	2000      	movs	r0, #0
    ae4a:	bd08      	pop	{r3, pc}

0000ae4c <z_device_state_init>:
}
    ae4c:	4770      	bx	lr

0000ae4e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ae4e:	b138      	cbz	r0, ae60 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ae50:	68c3      	ldr	r3, [r0, #12]
    ae52:	8818      	ldrh	r0, [r3, #0]
    ae54:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ae58:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    ae5c:	4258      	negs	r0, r3
    ae5e:	4158      	adcs	r0, r3
}
    ae60:	4770      	bx	lr

0000ae62 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    ae62:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ae64:	ab0b      	add	r3, sp, #44	; 0x2c
    ae66:	9305      	str	r3, [sp, #20]
    ae68:	9303      	str	r3, [sp, #12]
    ae6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae6c:	9302      	str	r3, [sp, #8]
    ae6e:	2300      	movs	r3, #0
    ae70:	e9cd 3300 	strd	r3, r3, [sp]
    ae74:	2201      	movs	r2, #1
    ae76:	4618      	mov	r0, r3
    ae78:	f7f8 fc50 	bl	371c <z_impl_z_log_msg2_runtime_vcreate>
}
    ae7c:	b007      	add	sp, #28
    ae7e:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae82 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    ae82:	f000 b99c 	b.w	b1be <memset>

0000ae86 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae86:	f000 b979 	b.w	b17c <memcpy>

0000ae8a <k_mem_slab_init>:
{
    ae8a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    ae8c:	2400      	movs	r4, #0
    ae8e:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    ae90:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ae92:	ea41 0402 	orr.w	r4, r1, r2
    ae96:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    ae9a:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    ae9e:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    aea0:	d10c      	bne.n	aebc <k_mem_slab_init+0x32>
    aea2:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    aea4:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    aea6:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    aea8:	d103      	bne.n	aeb2 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    aeaa:	e9c0 0000 	strd	r0, r0, [r0]
}
    aeae:	2000      	movs	r0, #0
}
    aeb0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    aeb2:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    aeb4:	3401      	adds	r4, #1
    aeb6:	460d      	mov	r5, r1
		p += slab->block_size;
    aeb8:	4411      	add	r1, r2
    aeba:	e7f3      	b.n	aea4 <k_mem_slab_init+0x1a>
		return -EINVAL;
    aebc:	f06f 0015 	mvn.w	r0, #21
	return rc;
    aec0:	e7f6      	b.n	aeb0 <k_mem_slab_init+0x26>

0000aec2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aec2:	f3ef 8005 	mrs	r0, IPSR
}
    aec6:	3800      	subs	r0, #0
    aec8:	bf18      	it	ne
    aeca:	2001      	movne	r0, #1
    aecc:	4770      	bx	lr

0000aece <k_thread_name_get>:
}
    aece:	2000      	movs	r0, #0
    aed0:	4770      	bx	lr

0000aed2 <z_pm_save_idle_exit>:
{
    aed2:	b508      	push	{r3, lr}
	pm_system_resume();
    aed4:	f7f8 fdb6 	bl	3a44 <pm_system_resume>
}
    aed8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    aedc:	f7ff be2e 	b.w	ab3c <sys_clock_idle_exit>

0000aee0 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    aee0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    aee4:	428b      	cmp	r3, r1
    aee6:	d001      	beq.n	aeec <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    aee8:	f7fd bd0a 	b.w	8900 <z_set_prio>
}
    aeec:	2000      	movs	r0, #0
    aeee:	4770      	bx	lr

0000aef0 <z_impl_k_mutex_init>:
{
    aef0:	4603      	mov	r3, r0
	mutex->owner = NULL;
    aef2:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    aef4:	e9c3 0002 	strd	r0, r0, [r3, #8]
    aef8:	e9c3 3300 	strd	r3, r3, [r3]
}
    aefc:	4770      	bx	lr

0000aefe <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    aefe:	b13a      	cbz	r2, af10 <z_impl_k_sem_init+0x12>
    af00:	428a      	cmp	r2, r1
    af02:	d305      	bcc.n	af10 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    af04:	e9c0 1202 	strd	r1, r2, [r0, #8]
    af08:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    af0c:	2000      	movs	r0, #0
    af0e:	4770      	bx	lr
		return -EINVAL;
    af10:	f06f 0015 	mvn.w	r0, #21
}
    af14:	4770      	bx	lr

0000af16 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    af16:	4603      	mov	r3, r0
    af18:	b920      	cbnz	r0, af24 <z_reschedule_irqlock+0xe>
    af1a:	f3ef 8205 	mrs	r2, IPSR
    af1e:	b90a      	cbnz	r2, af24 <z_reschedule_irqlock+0xe>
    af20:	f7f9 b848 	b.w	3fb4 <arch_swap>
    af24:	f383 8811 	msr	BASEPRI, r3
    af28:	f3bf 8f6f 	isb	sy
}
    af2c:	4770      	bx	lr

0000af2e <z_reschedule_unlocked>:
	__asm__ volatile(
    af2e:	f04f 0320 	mov.w	r3, #32
    af32:	f3ef 8011 	mrs	r0, BASEPRI
    af36:	f383 8812 	msr	BASEPRI_MAX, r3
    af3a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    af3e:	f7ff bfea 	b.w	af16 <z_reschedule_irqlock>

0000af42 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    af42:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    af44:	f7fe fc28 	bl	9798 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    af48:	bd08      	pop	{r3, pc}

0000af4a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    af4a:	b108      	cbz	r0, af50 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    af4c:	f7f9 be84 	b.w	4c58 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    af50:	4770      	bx	lr

0000af52 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    af52:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    af56:	bf08      	it	eq
    af58:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    af5c:	b538      	push	{r3, r4, r5, lr}
    af5e:	460c      	mov	r4, r1
    af60:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    af62:	d014      	beq.n	af8e <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    af64:	4308      	orrs	r0, r1
    af66:	d103      	bne.n	af70 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    af68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    af6c:	f7fe bc14 	b.w	9798 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    af70:	f06f 0001 	mvn.w	r0, #1
    af74:	1b40      	subs	r0, r0, r5
    af76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    af7a:	eb63 0101 	sbc.w	r1, r3, r1
    af7e:	2900      	cmp	r1, #0
    af80:	da04      	bge.n	af8c <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    af82:	f7fe fc09 	bl	9798 <sys_clock_tick_get>
    af86:	1940      	adds	r0, r0, r5
    af88:	eb41 0104 	adc.w	r1, r1, r4
}
    af8c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    af8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    af92:	4601      	mov	r1, r0
    af94:	e7fa      	b.n	af8c <sys_clock_timeout_end_calc+0x3a>

0000af96 <k_timer_init>:
	timer->status = 0U;
    af96:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    af98:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    af9c:	f100 0218 	add.w	r2, r0, #24
    afa0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    afa4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    afa8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    afaa:	6343      	str	r3, [r0, #52]	; 0x34
}
    afac:	4770      	bx	lr

0000afae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    afae:	b510      	push	{r4, lr}
    afb0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    afb2:	f7fe fa4f 	bl	9454 <z_abort_timeout>

	if (inactive) {
    afb6:	b9b0      	cbnz	r0, afe6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    afb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    afba:	b10b      	cbz	r3, afc0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    afbc:	4620      	mov	r0, r4
    afbe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    afc0:	f104 0018 	add.w	r0, r4, #24
    afc4:	f7fd fe18 	bl	8bf8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    afc8:	b168      	cbz	r0, afe6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    afca:	f7fd f8ad 	bl	8128 <z_ready_thread>
    afce:	f04f 0320 	mov.w	r3, #32
    afd2:	f3ef 8011 	mrs	r0, BASEPRI
    afd6:	f383 8812 	msr	BASEPRI_MAX, r3
    afda:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    afde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afe2:	f7ff bf98 	b.w	af16 <z_reschedule_irqlock>
    afe6:	bd10      	pop	{r4, pc}

0000afe8 <k_malloc>:
{
    afe8:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    afea:	2004      	movs	r0, #4
    afec:	f7fe bd5c 	b.w	9aa8 <k_aligned_alloc>

0000aff0 <k_heap_init>:
{
    aff0:	b410      	push	{r4}
    aff2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    aff6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    affa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    affc:	f7f7 b92c 	b.w	2258 <sys_heap_init>

0000b000 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    b000:	f7fc be08 	b.w	7c14 <z_impl_k_mutex_unlock>

0000b004 <open_cab>:
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b008:	4606      	mov	r6, r0
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b00a:	202c      	movs	r0, #44	; 0x2c
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    b00c:	460d      	mov	r5, r1
    b00e:	4617      	mov	r7, r2
    b010:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b012:	f7ff ffe9 	bl	afe8 <k_malloc>
    buffer->num = num;
    b016:	8085      	strh	r5, [r0, #4]
    buffer->size = num * dim;
    b018:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b01c:	4604      	mov	r4, r0
    buffer->dim = dim;
    b01e:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    b020:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    b022:	3018      	adds	r0, #24
    b024:	f7ff ff64 	bl	aef0 <z_impl_k_mutex_init>
    buffer->buffers = k_malloc(buffer->size * (N_TASKS + 1)); 
    b028:	8920      	ldrh	r0, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
    b02a:	2300      	movs	r3, #0
    b02c:	6123      	str	r3, [r4, #16]
    b02e:	0080      	lsls	r0, r0, #2
    b030:	f7ff ffda 	bl	afe8 <k_malloc>
    b034:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    b036:	4630      	mov	r0, r6
    b038:	f7f5 fe7c 	bl	d34 <strlen>
    b03c:	f7ff ffd4 	bl	afe8 <k_malloc>
    b040:	6020      	str	r0, [r4, #0]
    buffer->head = k_malloc(buffer->size);
    b042:	8920      	ldrh	r0, [r4, #8]
    b044:	f7ff ffd0 	bl	afe8 <k_malloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    b048:	4631      	mov	r1, r6
    b04a:	6160      	str	r0, [r4, #20]
    b04c:	6820      	ldr	r0, [r4, #0]
    b04e:	f000 f8be 	bl	b1ce <strcpy>
    buffer->head = first;
    b052:	f8c4 8014 	str.w	r8, [r4, #20]
}
    b056:	4620      	mov	r0, r4
    b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b05c <put_mes>:

void put_mes(void* buf_pointer, cab* cab_id){
    b05c:	b570      	push	{r4, r5, r6, lr}
    b05e:	4604      	mov	r4, r0
    b060:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    b062:	f101 0618 	add.w	r6, r1, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    b066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b06a:	4630      	mov	r0, r6
    b06c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b070:	f7fc fcd6 	bl	7a20 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    b074:	68eb      	ldr	r3, [r5, #12]
    cab_id->head = buf_pointer;
    b076:	616c      	str	r4, [r5, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    b078:	1ae4      	subs	r4, r4, r3
    b07a:	892b      	ldrh	r3, [r5, #8]
    b07c:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(buf_pointer, cab_id);
    cab_id->flags[i] = 0;
    b080:	fa15 f184 	uxtah	r1, r5, r4
    b084:	2300      	movs	r3, #0
    b086:	740b      	strb	r3, [r1, #16]
    k_mutex_unlock(&cab_id->mutex);
    b088:	4630      	mov	r0, r6
}
    b08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    b08e:	f7ff bfb7 	b.w	b000 <k_mutex_unlock.isra.0>

0000b092 <get_mes>:

void* get_mes(cab* cab_id){
    b092:	b570      	push	{r4, r5, r6, lr}
    b094:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    b096:	f100 0618 	add.w	r6, r0, #24
    b09a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b09e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b0a2:	4630      	mov	r0, r6
    b0a4:	f7fc fcbc 	bl	7a20 <z_impl_k_mutex_lock>
    buffer = cab_id->head;
    b0a8:	6965      	ldr	r5, [r4, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    b0aa:	68e3      	ldr	r3, [r4, #12]
    b0ac:	8922      	ldrh	r2, [r4, #8]
    b0ae:	1aeb      	subs	r3, r5, r3
    b0b0:	fb93 f3f2 	sdiv	r3, r3, r2
    uint16_t i = calculateIndex(buffer, cab_id);
    cab_id->flags[i]++;
    b0b4:	fa14 f083 	uxtah	r0, r4, r3
    b0b8:	7c03      	ldrb	r3, [r0, #16]
    b0ba:	3301      	adds	r3, #1
    b0bc:	7403      	strb	r3, [r0, #16]
    k_mutex_unlock(&cab_id->mutex);
    b0be:	4630      	mov	r0, r6
    b0c0:	f7ff ff9e 	bl	b000 <k_mutex_unlock.isra.0>
    return buffer;
}
    b0c4:	4628      	mov	r0, r5
    b0c6:	bd70      	pop	{r4, r5, r6, pc}

0000b0c8 <unget>:

void unget(void* mes_pointer, cab* cab_id){
    b0c8:	b570      	push	{r4, r5, r6, lr}
    b0ca:	4604      	mov	r4, r0
    b0cc:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    b0ce:	f101 0618 	add.w	r6, r1, #24
    b0d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b0d6:	4630      	mov	r0, r6
    b0d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b0dc:	f7fc fca0 	bl	7a20 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    b0e0:	68eb      	ldr	r3, [r5, #12]
    b0e2:	1ae4      	subs	r4, r4, r3
    b0e4:	892b      	ldrh	r3, [r5, #8]
    b0e6:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(mes_pointer, cab_id);
    cab_id->flags[i]--;
    b0ea:	fa15 f184 	uxtah	r1, r5, r4
    k_mutex_unlock(&cab_id->mutex);
    b0ee:	4630      	mov	r0, r6
    cab_id->flags[i]--;
    b0f0:	7c0b      	ldrb	r3, [r1, #16]
    b0f2:	3b01      	subs	r3, #1
    b0f4:	740b      	strb	r3, [r1, #16]
}
    b0f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    b0fa:	f7ff bf81 	b.w	b000 <k_mutex_unlock.isra.0>

0000b0fe <nearObstSearch>:

/* Function to look for closeby obstacles */
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    uint8_t flag = 0;
    /* Iterating through the CSA, tops to bottom, left column to right column */
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    b0fe:	f500 507f 	add.w	r0, r0, #16320	; 0x3fc0
    b102:	301f      	adds	r0, #31
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    b104:	f44f 527e 	mov.w	r2, #16256	; 0x3f80
    {
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    b108:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
        {   /* If the pixel is an obstacle returns 1 */    
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    b10c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    b110:	2980      	cmp	r1, #128	; 0x80
    b112:	d009      	beq.n	b128 <nearObstSearch+0x2a>
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    b114:	4283      	cmp	r3, r0
    b116:	d1f9      	bne.n	b10c <nearObstSearch+0xe>
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    b118:	3a80      	subs	r2, #128	; 0x80
    b11a:	f5b2 5ffc 	cmp.w	r2, #8064	; 0x1f80
    b11e:	f1a3 0080 	sub.w	r0, r3, #128	; 0x80
    b122:	d1f1      	bne.n	b108 <nearObstSearch+0xa>
                flag = 1;
                return flag;
            }
        }
    }
    return flag;
    b124:	2000      	movs	r0, #0
}
    b126:	4770      	bx	lr
                return flag;
    b128:	2001      	movs	r0, #1
    b12a:	4770      	bx	lr

0000b12c <obstCount>:

/* Function that counts obstacles. */
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    b12c:	4601      	mov	r1, r0
                continue;
            }
            /* If the pixel count is bigger than 2 it means that it is in fact a near obstacle */
            if(c_pixels >= 2) obs++;
            /* Reset the pixel count when there no pixels in the sequence */
            c_pixels = 0;
    b12e:	2200      	movs	r2, #0
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    b130:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t obs = 0; 
    b132:	4610      	mov	r0, r2
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    b134:	f101 0680 	add.w	r6, r1, #128	; 0x80
    b138:	1854      	adds	r4, r2, r1
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    b13a:	2300      	movs	r3, #0
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    b13c:	18b5      	adds	r5, r6, r2
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    b13e:	f814 7b01 	ldrb.w	r7, [r4], #1
    b142:	2f80      	cmp	r7, #128	; 0x80
    b144:	d10e      	bne.n	b164 <obstCount+0x38>
                c_pixels++;
    b146:	3301      	adds	r3, #1
    b148:	b29b      	uxth	r3, r3
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    b14a:	42ac      	cmp	r4, r5
    b14c:	d1f7      	bne.n	b13e <obstCount+0x12>
        }
        /* Same step as done above but to avoid bugs with last pixel from last row */
        if(c_pixels >= 2) obs++;
    b14e:	2b01      	cmp	r3, #1
    b150:	bf88      	it	hi
    b152:	1c43      	addhi	r3, r0, #1
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    b154:	f102 0280 	add.w	r2, r2, #128	; 0x80
        if(c_pixels >= 2) obs++;
    b158:	bf88      	it	hi
    b15a:	b298      	uxthhi	r0, r3
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    b15c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    b160:	d1ea      	bne.n	b138 <obstCount+0xc>
        
        c_pixels = 0;
    }

    return obs;
}
    b162:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(c_pixels >= 2) obs++;
    b164:	2b01      	cmp	r3, #1
    b166:	bf84      	itt	hi
    b168:	1c43      	addhi	r3, r0, #1
    b16a:	b298      	uxthhi	r0, r3
            c_pixels = 0;
    b16c:	2300      	movs	r3, #0
    b16e:	e7ec      	b.n	b14a <obstCount+0x1e>

0000b170 <atan2>:
    b170:	f7f5 be1a 	b.w	da8 <__ieee754_atan2>

0000b174 <fabs>:
    b174:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b178:	4619      	mov	r1, r3
    b17a:	4770      	bx	lr

0000b17c <memcpy>:
    b17c:	440a      	add	r2, r1
    b17e:	4291      	cmp	r1, r2
    b180:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    b184:	d100      	bne.n	b188 <memcpy+0xc>
    b186:	4770      	bx	lr
    b188:	b510      	push	{r4, lr}
    b18a:	f811 4b01 	ldrb.w	r4, [r1], #1
    b18e:	f803 4f01 	strb.w	r4, [r3, #1]!
    b192:	4291      	cmp	r1, r2
    b194:	d1f9      	bne.n	b18a <memcpy+0xe>
    b196:	bd10      	pop	{r4, pc}

0000b198 <__memcpy_chk>:
    b198:	429a      	cmp	r2, r3
    b19a:	b508      	push	{r3, lr}
    b19c:	d901      	bls.n	b1a2 <__memcpy_chk+0xa>
    b19e:	f7f9 fd07 	bl	4bb0 <__chk_fail>
    b1a2:	4281      	cmp	r1, r0
    b1a4:	d804      	bhi.n	b1b0 <__memcpy_chk+0x18>
    b1a6:	188b      	adds	r3, r1, r2
    b1a8:	4298      	cmp	r0, r3
    b1aa:	d3f8      	bcc.n	b19e <__memcpy_chk+0x6>
    b1ac:	4281      	cmp	r1, r0
    b1ae:	d102      	bne.n	b1b6 <__memcpy_chk+0x1e>
    b1b0:	1883      	adds	r3, r0, r2
    b1b2:	4299      	cmp	r1, r3
    b1b4:	d3f3      	bcc.n	b19e <__memcpy_chk+0x6>
    b1b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b1ba:	f7ff bfdf 	b.w	b17c <memcpy>

0000b1be <memset>:
    b1be:	4402      	add	r2, r0
    b1c0:	4603      	mov	r3, r0
    b1c2:	4293      	cmp	r3, r2
    b1c4:	d100      	bne.n	b1c8 <memset+0xa>
    b1c6:	4770      	bx	lr
    b1c8:	f803 1b01 	strb.w	r1, [r3], #1
    b1cc:	e7f9      	b.n	b1c2 <memset+0x4>

0000b1ce <strcpy>:
    b1ce:	4603      	mov	r3, r0
    b1d0:	f811 2b01 	ldrb.w	r2, [r1], #1
    b1d4:	f803 2b01 	strb.w	r2, [r3], #1
    b1d8:	2a00      	cmp	r2, #0
    b1da:	d1f9      	bne.n	b1d0 <strcpy+0x2>
    b1dc:	4770      	bx	lr

0000b1de <strnlen>:
    b1de:	b510      	push	{r4, lr}
    b1e0:	4602      	mov	r2, r0
    b1e2:	4401      	add	r1, r0
    b1e4:	428a      	cmp	r2, r1
    b1e6:	4613      	mov	r3, r2
    b1e8:	d003      	beq.n	b1f2 <strnlen+0x14>
    b1ea:	781c      	ldrb	r4, [r3, #0]
    b1ec:	3201      	adds	r2, #1
    b1ee:	2c00      	cmp	r4, #0
    b1f0:	d1f8      	bne.n	b1e4 <strnlen+0x6>
    b1f2:	1a18      	subs	r0, r3, r0
    b1f4:	bd10      	pop	{r4, pc}
	...

0000b1f8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b1f8:	f7fb b8be 	b.w	6378 <SystemInit>
