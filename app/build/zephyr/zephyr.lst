
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 17 01 20 25 46 00 00 59 b0 00 00 f9 45 00 00     ... %F..Y....E..
  10:	f9 45 00 00 f9 45 00 00 f9 45 00 00 00 00 00 00     .E...E...E......
	...
  2c:	e1 3e 00 00 f9 45 00 00 00 00 00 00 8d 3e 00 00     .>...E.......>..
  3c:	f9 45 00 00                                         .E..

00000040 <_irq_vector_table>:
  40:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  50:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  60:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  70:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  80:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  90:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  a0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  b0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  c0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  d0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  e0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..
  f0:	91 3f 00 00 91 3f 00 00 91 3f 00 00 91 3f 00 00     .?...?...?...?..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__data_size+0x1e6>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__data_size+0x4a>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__data_size+0x68>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__data_size+0x7c>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__data_size+0x1d2>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__data_size+0xaa>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__data_size+0xc8>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__data_size+0xde>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__data_size+0x11c>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__data_size+0x104>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__data_size+0x238>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__data_size+0x104>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__data_size+0x166>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__data_size+0x162>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__data_size+0x17c>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__data_size+0x1ca>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__data_size+0x1b2>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__data_size+0x84>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__data_size+0x246>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__data_size+0x20a>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__data_size+0x228>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__data_size+0x130>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__data_size+0x130>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__data_size+0x130>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__data_size+0xde>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__data_size+0xde>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_HEAP_MEM_POOL_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_HEAP_MEM_POOL_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_HEAP_MEM_POOL_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_HEAP_MEM_POOL_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_HEAP_MEM_POOL_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_HEAP_MEM_POOL_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_frsub>:
     9dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     9e0:	e002      	b.n	9e8 <__addsf3>
     9e2:	bf00      	nop

000009e4 <__aeabi_fsub>:
     9e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000009e8 <__addsf3>:
     9e8:	0042      	lsls	r2, r0, #1
     9ea:	bf1f      	itttt	ne
     9ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9f0:	ea92 0f03 	teqne	r2, r3
     9f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9fc:	d06a      	beq.n	ad4 <__addsf3+0xec>
     9fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a06:	bfc1      	itttt	gt
     a08:	18d2      	addgt	r2, r2, r3
     a0a:	4041      	eorgt	r1, r0
     a0c:	4048      	eorgt	r0, r1
     a0e:	4041      	eorgt	r1, r0
     a10:	bfb8      	it	lt
     a12:	425b      	neglt	r3, r3
     a14:	2b19      	cmp	r3, #25
     a16:	bf88      	it	hi
     a18:	4770      	bxhi	lr
     a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a26:	bf18      	it	ne
     a28:	4240      	negne	r0, r0
     a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a36:	bf18      	it	ne
     a38:	4249      	negne	r1, r1
     a3a:	ea92 0f03 	teq	r2, r3
     a3e:	d03f      	beq.n	ac0 <__addsf3+0xd8>
     a40:	f1a2 0201 	sub.w	r2, r2, #1
     a44:	fa41 fc03 	asr.w	ip, r1, r3
     a48:	eb10 000c 	adds.w	r0, r0, ip
     a4c:	f1c3 0320 	rsb	r3, r3, #32
     a50:	fa01 f103 	lsl.w	r1, r1, r3
     a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a58:	d502      	bpl.n	a60 <__addsf3+0x78>
     a5a:	4249      	negs	r1, r1
     a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a64:	d313      	bcc.n	a8e <__addsf3+0xa6>
     a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a6a:	d306      	bcc.n	a7a <__addsf3+0x92>
     a6c:	0840      	lsrs	r0, r0, #1
     a6e:	ea4f 0131 	mov.w	r1, r1, rrx
     a72:	f102 0201 	add.w	r2, r2, #1
     a76:	2afe      	cmp	r2, #254	; 0xfe
     a78:	d251      	bcs.n	b1e <__addsf3+0x136>
     a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a82:	bf08      	it	eq
     a84:	f020 0001 	biceq.w	r0, r0, #1
     a88:	ea40 0003 	orr.w	r0, r0, r3
     a8c:	4770      	bx	lr
     a8e:	0049      	lsls	r1, r1, #1
     a90:	eb40 0000 	adc.w	r0, r0, r0
     a94:	3a01      	subs	r2, #1
     a96:	bf28      	it	cs
     a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a9c:	d2ed      	bcs.n	a7a <__addsf3+0x92>
     a9e:	fab0 fc80 	clz	ip, r0
     aa2:	f1ac 0c08 	sub.w	ip, ip, #8
     aa6:	ebb2 020c 	subs.w	r2, r2, ip
     aaa:	fa00 f00c 	lsl.w	r0, r0, ip
     aae:	bfaa      	itet	ge
     ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     ab4:	4252      	neglt	r2, r2
     ab6:	4318      	orrge	r0, r3
     ab8:	bfbc      	itt	lt
     aba:	40d0      	lsrlt	r0, r2
     abc:	4318      	orrlt	r0, r3
     abe:	4770      	bx	lr
     ac0:	f092 0f00 	teq	r2, #0
     ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     ac8:	bf06      	itte	eq
     aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     ace:	3201      	addeq	r2, #1
     ad0:	3b01      	subne	r3, #1
     ad2:	e7b5      	b.n	a40 <__addsf3+0x58>
     ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     adc:	bf18      	it	ne
     ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ae2:	d021      	beq.n	b28 <__addsf3+0x140>
     ae4:	ea92 0f03 	teq	r2, r3
     ae8:	d004      	beq.n	af4 <__addsf3+0x10c>
     aea:	f092 0f00 	teq	r2, #0
     aee:	bf08      	it	eq
     af0:	4608      	moveq	r0, r1
     af2:	4770      	bx	lr
     af4:	ea90 0f01 	teq	r0, r1
     af8:	bf1c      	itt	ne
     afa:	2000      	movne	r0, #0
     afc:	4770      	bxne	lr
     afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b02:	d104      	bne.n	b0e <__addsf3+0x126>
     b04:	0040      	lsls	r0, r0, #1
     b06:	bf28      	it	cs
     b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b0c:	4770      	bx	lr
     b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b12:	bf3c      	itt	cc
     b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b18:	4770      	bxcc	lr
     b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b26:	4770      	bx	lr
     b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b2c:	bf16      	itet	ne
     b2e:	4608      	movne	r0, r1
     b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b34:	4601      	movne	r1, r0
     b36:	0242      	lsls	r2, r0, #9
     b38:	bf06      	itte	eq
     b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b3e:	ea90 0f01 	teqeq	r0, r1
     b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b46:	4770      	bx	lr

00000b48 <__aeabi_ui2f>:
     b48:	f04f 0300 	mov.w	r3, #0
     b4c:	e004      	b.n	b58 <__aeabi_i2f+0x8>
     b4e:	bf00      	nop

00000b50 <__aeabi_i2f>:
     b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b54:	bf48      	it	mi
     b56:	4240      	negmi	r0, r0
     b58:	ea5f 0c00 	movs.w	ip, r0
     b5c:	bf08      	it	eq
     b5e:	4770      	bxeq	lr
     b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b64:	4601      	mov	r1, r0
     b66:	f04f 0000 	mov.w	r0, #0
     b6a:	e01c      	b.n	ba6 <__aeabi_l2f+0x2a>

00000b6c <__aeabi_ul2f>:
     b6c:	ea50 0201 	orrs.w	r2, r0, r1
     b70:	bf08      	it	eq
     b72:	4770      	bxeq	lr
     b74:	f04f 0300 	mov.w	r3, #0
     b78:	e00a      	b.n	b90 <__aeabi_l2f+0x14>
     b7a:	bf00      	nop

00000b7c <__aeabi_l2f>:
     b7c:	ea50 0201 	orrs.w	r2, r0, r1
     b80:	bf08      	it	eq
     b82:	4770      	bxeq	lr
     b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b88:	d502      	bpl.n	b90 <__aeabi_l2f+0x14>
     b8a:	4240      	negs	r0, r0
     b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b90:	ea5f 0c01 	movs.w	ip, r1
     b94:	bf02      	ittt	eq
     b96:	4684      	moveq	ip, r0
     b98:	4601      	moveq	r1, r0
     b9a:	2000      	moveq	r0, #0
     b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     ba0:	bf08      	it	eq
     ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     baa:	fabc f28c 	clz	r2, ip
     bae:	3a08      	subs	r2, #8
     bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     bb4:	db10      	blt.n	bd8 <__aeabi_l2f+0x5c>
     bb6:	fa01 fc02 	lsl.w	ip, r1, r2
     bba:	4463      	add	r3, ip
     bbc:	fa00 fc02 	lsl.w	ip, r0, r2
     bc0:	f1c2 0220 	rsb	r2, r2, #32
     bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     bc8:	fa20 f202 	lsr.w	r2, r0, r2
     bcc:	eb43 0002 	adc.w	r0, r3, r2
     bd0:	bf08      	it	eq
     bd2:	f020 0001 	biceq.w	r0, r0, #1
     bd6:	4770      	bx	lr
     bd8:	f102 0220 	add.w	r2, r2, #32
     bdc:	fa01 fc02 	lsl.w	ip, r1, r2
     be0:	f1c2 0220 	rsb	r2, r2, #32
     be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     be8:	fa21 f202 	lsr.w	r2, r1, r2
     bec:	eb43 0002 	adc.w	r0, r3, r2
     bf0:	bf08      	it	eq
     bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     bf6:	4770      	bx	lr

00000bf8 <__aeabi_f2uiz>:
     bf8:	0042      	lsls	r2, r0, #1
     bfa:	d20e      	bcs.n	c1a <__aeabi_f2uiz+0x22>
     bfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     c00:	d30b      	bcc.n	c1a <__aeabi_f2uiz+0x22>
     c02:	f04f 039e 	mov.w	r3, #158	; 0x9e
     c06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     c0a:	d409      	bmi.n	c20 <__aeabi_f2uiz+0x28>
     c0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     c10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c14:	fa23 f002 	lsr.w	r0, r3, r2
     c18:	4770      	bx	lr
     c1a:	f04f 0000 	mov.w	r0, #0
     c1e:	4770      	bx	lr
     c20:	f112 0f61 	cmn.w	r2, #97	; 0x61
     c24:	d101      	bne.n	c2a <__aeabi_f2uiz+0x32>
     c26:	0242      	lsls	r2, r0, #9
     c28:	d102      	bne.n	c30 <__aeabi_f2uiz+0x38>
     c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c2e:	4770      	bx	lr
     c30:	f04f 0000 	mov.w	r0, #0
     c34:	4770      	bx	lr
     c36:	bf00      	nop

00000c38 <__aeabi_uldivmod>:
     c38:	b953      	cbnz	r3, c50 <__aeabi_uldivmod+0x18>
     c3a:	b94a      	cbnz	r2, c50 <__aeabi_uldivmod+0x18>
     c3c:	2900      	cmp	r1, #0
     c3e:	bf08      	it	eq
     c40:	2800      	cmpeq	r0, #0
     c42:	bf1c      	itt	ne
     c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     c4c:	f000 b80c 	b.w	c68 <__aeabi_idiv0>
     c50:	f1ad 0c08 	sub.w	ip, sp, #8
     c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     c58:	f000 f890 	bl	d7c <__udivmoddi4>
     c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
     c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c64:	b004      	add	sp, #16
     c66:	4770      	bx	lr

00000c68 <__aeabi_idiv0>:
     c68:	4770      	bx	lr
     c6a:	bf00      	nop

00000c6c <__gedf2>:
     c6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     c70:	e006      	b.n	c80 <__cmpdf2+0x4>
     c72:	bf00      	nop

00000c74 <__ledf2>:
     c74:	f04f 0c01 	mov.w	ip, #1
     c78:	e002      	b.n	c80 <__cmpdf2+0x4>
     c7a:	bf00      	nop

00000c7c <__cmpdf2>:
     c7c:	f04f 0c01 	mov.w	ip, #1
     c80:	f84d cd04 	str.w	ip, [sp, #-4]!
     c84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c90:	bf18      	it	ne
     c92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     c96:	d01b      	beq.n	cd0 <__cmpdf2+0x54>
     c98:	b001      	add	sp, #4
     c9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     c9e:	bf0c      	ite	eq
     ca0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     ca4:	ea91 0f03 	teqne	r1, r3
     ca8:	bf02      	ittt	eq
     caa:	ea90 0f02 	teqeq	r0, r2
     cae:	2000      	moveq	r0, #0
     cb0:	4770      	bxeq	lr
     cb2:	f110 0f00 	cmn.w	r0, #0
     cb6:	ea91 0f03 	teq	r1, r3
     cba:	bf58      	it	pl
     cbc:	4299      	cmppl	r1, r3
     cbe:	bf08      	it	eq
     cc0:	4290      	cmpeq	r0, r2
     cc2:	bf2c      	ite	cs
     cc4:	17d8      	asrcs	r0, r3, #31
     cc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     cca:	f040 0001 	orr.w	r0, r0, #1
     cce:	4770      	bx	lr
     cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     cd8:	d102      	bne.n	ce0 <__cmpdf2+0x64>
     cda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     cde:	d107      	bne.n	cf0 <__cmpdf2+0x74>
     ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ce8:	d1d6      	bne.n	c98 <__cmpdf2+0x1c>
     cea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     cee:	d0d3      	beq.n	c98 <__cmpdf2+0x1c>
     cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <__aeabi_cdrcmple>:
     cf8:	4684      	mov	ip, r0
     cfa:	4610      	mov	r0, r2
     cfc:	4662      	mov	r2, ip
     cfe:	468c      	mov	ip, r1
     d00:	4619      	mov	r1, r3
     d02:	4663      	mov	r3, ip
     d04:	e000      	b.n	d08 <__aeabi_cdcmpeq>
     d06:	bf00      	nop

00000d08 <__aeabi_cdcmpeq>:
     d08:	b501      	push	{r0, lr}
     d0a:	f7ff ffb7 	bl	c7c <__cmpdf2>
     d0e:	2800      	cmp	r0, #0
     d10:	bf48      	it	mi
     d12:	f110 0f00 	cmnmi.w	r0, #0
     d16:	bd01      	pop	{r0, pc}

00000d18 <__aeabi_dcmpeq>:
     d18:	f84d ed08 	str.w	lr, [sp, #-8]!
     d1c:	f7ff fff4 	bl	d08 <__aeabi_cdcmpeq>
     d20:	bf0c      	ite	eq
     d22:	2001      	moveq	r0, #1
     d24:	2000      	movne	r0, #0
     d26:	f85d fb08 	ldr.w	pc, [sp], #8
     d2a:	bf00      	nop

00000d2c <__aeabi_dcmplt>:
     d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
     d30:	f7ff ffea 	bl	d08 <__aeabi_cdcmpeq>
     d34:	bf34      	ite	cc
     d36:	2001      	movcc	r0, #1
     d38:	2000      	movcs	r0, #0
     d3a:	f85d fb08 	ldr.w	pc, [sp], #8
     d3e:	bf00      	nop

00000d40 <__aeabi_dcmple>:
     d40:	f84d ed08 	str.w	lr, [sp, #-8]!
     d44:	f7ff ffe0 	bl	d08 <__aeabi_cdcmpeq>
     d48:	bf94      	ite	ls
     d4a:	2001      	movls	r0, #1
     d4c:	2000      	movhi	r0, #0
     d4e:	f85d fb08 	ldr.w	pc, [sp], #8
     d52:	bf00      	nop

00000d54 <__aeabi_dcmpge>:
     d54:	f84d ed08 	str.w	lr, [sp, #-8]!
     d58:	f7ff ffce 	bl	cf8 <__aeabi_cdrcmple>
     d5c:	bf94      	ite	ls
     d5e:	2001      	movls	r0, #1
     d60:	2000      	movhi	r0, #0
     d62:	f85d fb08 	ldr.w	pc, [sp], #8
     d66:	bf00      	nop

00000d68 <__aeabi_dcmpgt>:
     d68:	f84d ed08 	str.w	lr, [sp, #-8]!
     d6c:	f7ff ffc4 	bl	cf8 <__aeabi_cdrcmple>
     d70:	bf34      	ite	cc
     d72:	2001      	movcc	r0, #1
     d74:	2000      	movcs	r0, #0
     d76:	f85d fb08 	ldr.w	pc, [sp], #8
     d7a:	bf00      	nop

00000d7c <__udivmoddi4>:
     d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d80:	4686      	mov	lr, r0
     d82:	468c      	mov	ip, r1
     d84:	4608      	mov	r0, r1
     d86:	9e08      	ldr	r6, [sp, #32]
     d88:	4615      	mov	r5, r2
     d8a:	4674      	mov	r4, lr
     d8c:	4619      	mov	r1, r3
     d8e:	2b00      	cmp	r3, #0
     d90:	f040 80c2 	bne.w	f18 <__udivmoddi4+0x19c>
     d94:	4285      	cmp	r5, r0
     d96:	fab2 f282 	clz	r2, r2
     d9a:	d945      	bls.n	e28 <__udivmoddi4+0xac>
     d9c:	b14a      	cbz	r2, db2 <__udivmoddi4+0x36>
     d9e:	f1c2 0320 	rsb	r3, r2, #32
     da2:	fa00 fc02 	lsl.w	ip, r0, r2
     da6:	fa2e f303 	lsr.w	r3, lr, r3
     daa:	4095      	lsls	r5, r2
     dac:	ea43 0c0c 	orr.w	ip, r3, ip
     db0:	4094      	lsls	r4, r2
     db2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     db6:	b2a8      	uxth	r0, r5
     db8:	fbbc f8fe 	udiv	r8, ip, lr
     dbc:	0c23      	lsrs	r3, r4, #16
     dbe:	fb0e cc18 	mls	ip, lr, r8, ip
     dc2:	fb08 f900 	mul.w	r9, r8, r0
     dc6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     dca:	4599      	cmp	r9, r3
     dcc:	d928      	bls.n	e20 <__udivmoddi4+0xa4>
     dce:	18eb      	adds	r3, r5, r3
     dd0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     dd4:	d204      	bcs.n	de0 <__udivmoddi4+0x64>
     dd6:	4599      	cmp	r9, r3
     dd8:	d902      	bls.n	de0 <__udivmoddi4+0x64>
     dda:	f1a8 0702 	sub.w	r7, r8, #2
     dde:	442b      	add	r3, r5
     de0:	eba3 0309 	sub.w	r3, r3, r9
     de4:	b2a4      	uxth	r4, r4
     de6:	fbb3 fcfe 	udiv	ip, r3, lr
     dea:	fb0e 331c 	mls	r3, lr, ip, r3
     dee:	fb0c f000 	mul.w	r0, ip, r0
     df2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     df6:	42a0      	cmp	r0, r4
     df8:	d914      	bls.n	e24 <__udivmoddi4+0xa8>
     dfa:	192c      	adds	r4, r5, r4
     dfc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     e00:	d204      	bcs.n	e0c <__udivmoddi4+0x90>
     e02:	42a0      	cmp	r0, r4
     e04:	d902      	bls.n	e0c <__udivmoddi4+0x90>
     e06:	f1ac 0302 	sub.w	r3, ip, #2
     e0a:	442c      	add	r4, r5
     e0c:	1a24      	subs	r4, r4, r0
     e0e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     e12:	b11e      	cbz	r6, e1c <__udivmoddi4+0xa0>
     e14:	40d4      	lsrs	r4, r2
     e16:	2300      	movs	r3, #0
     e18:	6034      	str	r4, [r6, #0]
     e1a:	6073      	str	r3, [r6, #4]
     e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e20:	4647      	mov	r7, r8
     e22:	e7dd      	b.n	de0 <__udivmoddi4+0x64>
     e24:	4663      	mov	r3, ip
     e26:	e7f1      	b.n	e0c <__udivmoddi4+0x90>
     e28:	bb92      	cbnz	r2, e90 <__udivmoddi4+0x114>
     e2a:	1b43      	subs	r3, r0, r5
     e2c:	2101      	movs	r1, #1
     e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e32:	b2af      	uxth	r7, r5
     e34:	fbb3 fcfe 	udiv	ip, r3, lr
     e38:	0c20      	lsrs	r0, r4, #16
     e3a:	fb0e 331c 	mls	r3, lr, ip, r3
     e3e:	fb0c f807 	mul.w	r8, ip, r7
     e42:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     e46:	4598      	cmp	r8, r3
     e48:	d962      	bls.n	f10 <__udivmoddi4+0x194>
     e4a:	18eb      	adds	r3, r5, r3
     e4c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     e50:	d204      	bcs.n	e5c <__udivmoddi4+0xe0>
     e52:	4598      	cmp	r8, r3
     e54:	d902      	bls.n	e5c <__udivmoddi4+0xe0>
     e56:	f1ac 0002 	sub.w	r0, ip, #2
     e5a:	442b      	add	r3, r5
     e5c:	eba3 0308 	sub.w	r3, r3, r8
     e60:	b2a4      	uxth	r4, r4
     e62:	fbb3 fcfe 	udiv	ip, r3, lr
     e66:	fb0e 331c 	mls	r3, lr, ip, r3
     e6a:	fb0c f707 	mul.w	r7, ip, r7
     e6e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e72:	42a7      	cmp	r7, r4
     e74:	d94e      	bls.n	f14 <__udivmoddi4+0x198>
     e76:	192c      	adds	r4, r5, r4
     e78:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     e7c:	d204      	bcs.n	e88 <__udivmoddi4+0x10c>
     e7e:	42a7      	cmp	r7, r4
     e80:	d902      	bls.n	e88 <__udivmoddi4+0x10c>
     e82:	f1ac 0302 	sub.w	r3, ip, #2
     e86:	442c      	add	r4, r5
     e88:	1be4      	subs	r4, r4, r7
     e8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     e8e:	e7c0      	b.n	e12 <__udivmoddi4+0x96>
     e90:	f1c2 0320 	rsb	r3, r2, #32
     e94:	fa20 f103 	lsr.w	r1, r0, r3
     e98:	4095      	lsls	r5, r2
     e9a:	4090      	lsls	r0, r2
     e9c:	fa2e f303 	lsr.w	r3, lr, r3
     ea0:	4303      	orrs	r3, r0
     ea2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ea6:	b2af      	uxth	r7, r5
     ea8:	fbb1 fcfe 	udiv	ip, r1, lr
     eac:	fb0e 101c 	mls	r0, lr, ip, r1
     eb0:	0c19      	lsrs	r1, r3, #16
     eb2:	fb0c f807 	mul.w	r8, ip, r7
     eb6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     eba:	4588      	cmp	r8, r1
     ebc:	fa04 f402 	lsl.w	r4, r4, r2
     ec0:	d922      	bls.n	f08 <__udivmoddi4+0x18c>
     ec2:	1869      	adds	r1, r5, r1
     ec4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     ec8:	d204      	bcs.n	ed4 <__udivmoddi4+0x158>
     eca:	4588      	cmp	r8, r1
     ecc:	d902      	bls.n	ed4 <__udivmoddi4+0x158>
     ece:	f1ac 0002 	sub.w	r0, ip, #2
     ed2:	4429      	add	r1, r5
     ed4:	eba1 0108 	sub.w	r1, r1, r8
     ed8:	b29b      	uxth	r3, r3
     eda:	fbb1 fcfe 	udiv	ip, r1, lr
     ede:	fb0e 111c 	mls	r1, lr, ip, r1
     ee2:	fb0c f707 	mul.w	r7, ip, r7
     ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     eea:	429f      	cmp	r7, r3
     eec:	d90e      	bls.n	f0c <__udivmoddi4+0x190>
     eee:	18eb      	adds	r3, r5, r3
     ef0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     ef4:	d204      	bcs.n	f00 <__udivmoddi4+0x184>
     ef6:	429f      	cmp	r7, r3
     ef8:	d902      	bls.n	f00 <__udivmoddi4+0x184>
     efa:	f1ac 0102 	sub.w	r1, ip, #2
     efe:	442b      	add	r3, r5
     f00:	1bdb      	subs	r3, r3, r7
     f02:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     f06:	e792      	b.n	e2e <__udivmoddi4+0xb2>
     f08:	4660      	mov	r0, ip
     f0a:	e7e3      	b.n	ed4 <__udivmoddi4+0x158>
     f0c:	4661      	mov	r1, ip
     f0e:	e7f7      	b.n	f00 <__udivmoddi4+0x184>
     f10:	4660      	mov	r0, ip
     f12:	e7a3      	b.n	e5c <__udivmoddi4+0xe0>
     f14:	4663      	mov	r3, ip
     f16:	e7b7      	b.n	e88 <__udivmoddi4+0x10c>
     f18:	4283      	cmp	r3, r0
     f1a:	d906      	bls.n	f2a <__udivmoddi4+0x1ae>
     f1c:	b916      	cbnz	r6, f24 <__udivmoddi4+0x1a8>
     f1e:	2100      	movs	r1, #0
     f20:	4608      	mov	r0, r1
     f22:	e77b      	b.n	e1c <__udivmoddi4+0xa0>
     f24:	e9c6 e000 	strd	lr, r0, [r6]
     f28:	e7f9      	b.n	f1e <__udivmoddi4+0x1a2>
     f2a:	fab3 f783 	clz	r7, r3
     f2e:	b98f      	cbnz	r7, f54 <__udivmoddi4+0x1d8>
     f30:	4283      	cmp	r3, r0
     f32:	d301      	bcc.n	f38 <__udivmoddi4+0x1bc>
     f34:	4572      	cmp	r2, lr
     f36:	d808      	bhi.n	f4a <__udivmoddi4+0x1ce>
     f38:	ebbe 0402 	subs.w	r4, lr, r2
     f3c:	eb60 0303 	sbc.w	r3, r0, r3
     f40:	2001      	movs	r0, #1
     f42:	469c      	mov	ip, r3
     f44:	b91e      	cbnz	r6, f4e <__udivmoddi4+0x1d2>
     f46:	2100      	movs	r1, #0
     f48:	e768      	b.n	e1c <__udivmoddi4+0xa0>
     f4a:	4638      	mov	r0, r7
     f4c:	e7fa      	b.n	f44 <__udivmoddi4+0x1c8>
     f4e:	e9c6 4c00 	strd	r4, ip, [r6]
     f52:	e7f8      	b.n	f46 <__udivmoddi4+0x1ca>
     f54:	f1c7 0c20 	rsb	ip, r7, #32
     f58:	40bb      	lsls	r3, r7
     f5a:	fa22 f40c 	lsr.w	r4, r2, ip
     f5e:	431c      	orrs	r4, r3
     f60:	fa2e f10c 	lsr.w	r1, lr, ip
     f64:	fa20 f30c 	lsr.w	r3, r0, ip
     f68:	40b8      	lsls	r0, r7
     f6a:	4301      	orrs	r1, r0
     f6c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     f70:	fa0e f507 	lsl.w	r5, lr, r7
     f74:	fbb3 f8f9 	udiv	r8, r3, r9
     f78:	fa1f fe84 	uxth.w	lr, r4
     f7c:	fb09 3018 	mls	r0, r9, r8, r3
     f80:	0c0b      	lsrs	r3, r1, #16
     f82:	fb08 fa0e 	mul.w	sl, r8, lr
     f86:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     f8a:	459a      	cmp	sl, r3
     f8c:	fa02 f207 	lsl.w	r2, r2, r7
     f90:	d940      	bls.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     f92:	18e3      	adds	r3, r4, r3
     f94:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     f98:	d204      	bcs.n	fa4 <__udivmoddi4+0x228>
     f9a:	459a      	cmp	sl, r3
     f9c:	d902      	bls.n	fa4 <__udivmoddi4+0x228>
     f9e:	f1a8 0002 	sub.w	r0, r8, #2
     fa2:	4423      	add	r3, r4
     fa4:	eba3 030a 	sub.w	r3, r3, sl
     fa8:	b289      	uxth	r1, r1
     faa:	fbb3 f8f9 	udiv	r8, r3, r9
     fae:	fb09 3318 	mls	r3, r9, r8, r3
     fb2:	fb08 fe0e 	mul.w	lr, r8, lr
     fb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     fba:	458e      	cmp	lr, r1
     fbc:	d92c      	bls.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     fbe:	1861      	adds	r1, r4, r1
     fc0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     fc4:	d204      	bcs.n	fd0 <__udivmoddi4+0x254>
     fc6:	458e      	cmp	lr, r1
     fc8:	d902      	bls.n	fd0 <__udivmoddi4+0x254>
     fca:	f1a8 0302 	sub.w	r3, r8, #2
     fce:	4421      	add	r1, r4
     fd0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     fd4:	fba0 9802 	umull	r9, r8, r0, r2
     fd8:	eba1 010e 	sub.w	r1, r1, lr
     fdc:	4541      	cmp	r1, r8
     fde:	46ce      	mov	lr, r9
     fe0:	4643      	mov	r3, r8
     fe2:	d302      	bcc.n	fea <__udivmoddi4+0x26e>
     fe4:	d106      	bne.n	ff4 <__udivmoddi4+0x278>
     fe6:	454d      	cmp	r5, r9
     fe8:	d204      	bcs.n	ff4 <__udivmoddi4+0x278>
     fea:	ebb9 0e02 	subs.w	lr, r9, r2
     fee:	eb68 0304 	sbc.w	r3, r8, r4
     ff2:	3801      	subs	r0, #1
     ff4:	2e00      	cmp	r6, #0
     ff6:	d0a6      	beq.n	f46 <__udivmoddi4+0x1ca>
     ff8:	ebb5 020e 	subs.w	r2, r5, lr
     ffc:	eb61 0103 	sbc.w	r1, r1, r3
    1000:	fa01 fc0c 	lsl.w	ip, r1, ip
    1004:	fa22 f307 	lsr.w	r3, r2, r7
    1008:	ea4c 0303 	orr.w	r3, ip, r3
    100c:	40f9      	lsrs	r1, r7
    100e:	e9c6 3100 	strd	r3, r1, [r6]
    1012:	e798      	b.n	f46 <__udivmoddi4+0x1ca>
    1014:	4640      	mov	r0, r8
    1016:	e7c5      	b.n	fa4 <__udivmoddi4+0x228>
    1018:	4643      	mov	r3, r8
    101a:	e7d9      	b.n	fd0 <__udivmoddi4+0x254>

0000101c <strcmp>:
    101c:	f810 2b01 	ldrb.w	r2, [r0], #1
    1020:	f811 3b01 	ldrb.w	r3, [r1], #1
    1024:	2a01      	cmp	r2, #1
    1026:	bf28      	it	cs
    1028:	429a      	cmpcs	r2, r3
    102a:	d0f7      	beq.n	101c <strcmp>
    102c:	1ad0      	subs	r0, r2, r3
    102e:	4770      	bx	lr

00001030 <strlen>:
    1030:	4603      	mov	r3, r0
    1032:	f813 2b01 	ldrb.w	r2, [r3], #1
    1036:	2a00      	cmp	r2, #0
    1038:	d1fb      	bne.n	1032 <strlen+0x2>
    103a:	1a18      	subs	r0, r3, r0
    103c:	3801      	subs	r0, #1
    103e:	4770      	bx	lr

00001040 <guideLineSearch>:
#include "img_algo.h"

/* Function that detects he position and agle of the guideline */
/* Worst case scenario: The guidelines in GN/GF are on the last index of each row*/
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
    1040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1042:	2400      	movs	r4, #0
    1044:	460d      	mov	r5, r1
    1046:	4617      	mov	r7, r2
    1048:	4626      	mov	r6, r4
    104a:	4623      	mov	r3, r4
    uint16_t y_gn = 0;
    uint16_t y_gf = GN - 1;
    /* Iterate through GN and GF to discover the position of the guidelines */
    for(uint16_t i = GF; i <= GN; i += GN - 1){
        for(uint16_t j = 0; j < IMGWIDTH; j++){
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
    104c:	5cc2      	ldrb	r2, [r0, r3]
    104e:	2aff      	cmp	r2, #255	; 0xff
    1050:	d01e      	beq.n	1090 <guideLineSearch+0x50>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
    1052:	3301      	adds	r3, #1
    1054:	2b80      	cmp	r3, #128	; 0x80
    1056:	d1f9      	bne.n	104c <guideLineSearch+0xc>
    1058:	f500 537d 	add.w	r3, r0, #16192	; 0x3f40
    105c:	333f      	adds	r3, #63	; 0x3f
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
    105e:	2100      	movs	r1, #0
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
    1060:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    1064:	2aff      	cmp	r2, #255	; 0xff
    1066:	d015      	beq.n	1094 <guideLineSearch+0x54>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
    1068:	3101      	adds	r1, #1
    106a:	2980      	cmp	r1, #128	; 0x80
    106c:	d1f8      	bne.n	1060 <guideLineSearch+0x20>
        }
    }
    /* When the guideline is vertical the angle is 0 rad, positive angles are associated with a tilt to the right 
    and negative angles to a tilt to the left 
    Calculation of angle between the two points in radians */
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
    106e:	1ba0      	subs	r0, r4, r6
    1070:	f7ff f9e8 	bl	444 <__aeabi_i2d>
    1074:	a308      	add	r3, pc, #32	; (adr r3, 1098 <guideLineSearch+0x58>)
    1076:	e9d3 2300 	ldrd	r2, r3, [r3]
    107a:	f00a fde5 	bl	bc48 <atan2>
    107e:	f7ff fc5d 	bl	93c <__aeabi_d2f>
    /* Computing of the position */
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
    1082:	2364      	movs	r3, #100	; 0x64
    1084:	fb06 3303 	mla	r3, r6, r3, r3
    1088:	11db      	asrs	r3, r3, #7
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
    108a:	6038      	str	r0, [r7, #0]
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
    108c:	802b      	strh	r3, [r5, #0]
}
    108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1090:	b29c      	uxth	r4, r3
    1092:	e7e1      	b.n	1058 <guideLineSearch+0x18>
    1094:	b28e      	uxth	r6, r1
    1096:	e7ea      	b.n	106e <guideLineSearch+0x2e>
    1098:	00000000 	.word	0x00000000
    109c:	405fc000 	.word	0x405fc000

000010a0 <__ieee754_atan2>:
    10a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a4:	4617      	mov	r7, r2
    10a6:	4690      	mov	r8, r2
    10a8:	4699      	mov	r9, r3
    10aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    10ae:	427b      	negs	r3, r7
    10b0:	f8df a184 	ldr.w	sl, [pc, #388]	; 1238 <__ieee754_atan2+0x198>
    10b4:	433b      	orrs	r3, r7
    10b6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
    10ba:	4553      	cmp	r3, sl
    10bc:	4604      	mov	r4, r0
    10be:	460d      	mov	r5, r1
    10c0:	d809      	bhi.n	10d6 <__ieee754_atan2+0x36>
    10c2:	4246      	negs	r6, r0
    10c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    10c8:	4306      	orrs	r6, r0
    10ca:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
    10ce:	4556      	cmp	r6, sl
    10d0:	468e      	mov	lr, r1
    10d2:	4683      	mov	fp, r0
    10d4:	d908      	bls.n	10e8 <__ieee754_atan2+0x48>
    10d6:	4642      	mov	r2, r8
    10d8:	464b      	mov	r3, r9
    10da:	4620      	mov	r0, r4
    10dc:	4629      	mov	r1, r5
    10de:	f7ff f865 	bl	1ac <__adddf3>
    10e2:	4604      	mov	r4, r0
    10e4:	460d      	mov	r5, r1
    10e6:	e016      	b.n	1116 <__ieee754_atan2+0x76>
    10e8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
    10ec:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    10f0:	433e      	orrs	r6, r7
    10f2:	d103      	bne.n	10fc <__ieee754_atan2+0x5c>
    10f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10f8:	f000 b8a6 	b.w	1248 <atan>
    10fc:	ea4f 76a9 	mov.w	r6, r9, asr #30
    1100:	f006 0602 	and.w	r6, r6, #2
    1104:	ea53 0b0b 	orrs.w	fp, r3, fp
    1108:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
    110c:	d107      	bne.n	111e <__ieee754_atan2+0x7e>
    110e:	2e02      	cmp	r6, #2
    1110:	d064      	beq.n	11dc <__ieee754_atan2+0x13c>
    1112:	2e03      	cmp	r6, #3
    1114:	d066      	beq.n	11e4 <__ieee754_atan2+0x144>
    1116:	4620      	mov	r0, r4
    1118:	4629      	mov	r1, r5
    111a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    111e:	4317      	orrs	r7, r2
    1120:	d106      	bne.n	1130 <__ieee754_atan2+0x90>
    1122:	f1be 0f00 	cmp.w	lr, #0
    1126:	da68      	bge.n	11fa <__ieee754_atan2+0x15a>
    1128:	a537      	add	r5, pc, #220	; (adr r5, 1208 <__ieee754_atan2+0x168>)
    112a:	e9d5 4500 	ldrd	r4, r5, [r5]
    112e:	e7f2      	b.n	1116 <__ieee754_atan2+0x76>
    1130:	4552      	cmp	r2, sl
    1132:	d10f      	bne.n	1154 <__ieee754_atan2+0xb4>
    1134:	4293      	cmp	r3, r2
    1136:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    113a:	d107      	bne.n	114c <__ieee754_atan2+0xac>
    113c:	2e02      	cmp	r6, #2
    113e:	d855      	bhi.n	11ec <__ieee754_atan2+0x14c>
    1140:	4b3e      	ldr	r3, [pc, #248]	; (123c <__ieee754_atan2+0x19c>)
    1142:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    1146:	e9d3 4500 	ldrd	r4, r5, [r3]
    114a:	e7e4      	b.n	1116 <__ieee754_atan2+0x76>
    114c:	2e02      	cmp	r6, #2
    114e:	d851      	bhi.n	11f4 <__ieee754_atan2+0x154>
    1150:	4b3b      	ldr	r3, [pc, #236]	; (1240 <__ieee754_atan2+0x1a0>)
    1152:	e7f6      	b.n	1142 <__ieee754_atan2+0xa2>
    1154:	4553      	cmp	r3, sl
    1156:	d0e4      	beq.n	1122 <__ieee754_atan2+0x82>
    1158:	1a9b      	subs	r3, r3, r2
    115a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
    115e:	ea4f 5223 	mov.w	r2, r3, asr #20
    1162:	da21      	bge.n	11a8 <__ieee754_atan2+0x108>
    1164:	f1b9 0f00 	cmp.w	r9, #0
    1168:	da01      	bge.n	116e <__ieee754_atan2+0xce>
    116a:	323c      	adds	r2, #60	; 0x3c
    116c:	db20      	blt.n	11b0 <__ieee754_atan2+0x110>
    116e:	4642      	mov	r2, r8
    1170:	464b      	mov	r3, r9
    1172:	4620      	mov	r0, r4
    1174:	4629      	mov	r1, r5
    1176:	f7ff faf9 	bl	76c <__aeabi_ddiv>
    117a:	f00a fd67 	bl	bc4c <fabs>
    117e:	f000 f863 	bl	1248 <atan>
    1182:	4604      	mov	r4, r0
    1184:	460d      	mov	r5, r1
    1186:	2e01      	cmp	r6, #1
    1188:	d015      	beq.n	11b6 <__ieee754_atan2+0x116>
    118a:	2e02      	cmp	r6, #2
    118c:	d017      	beq.n	11be <__ieee754_atan2+0x11e>
    118e:	2e00      	cmp	r6, #0
    1190:	d0c1      	beq.n	1116 <__ieee754_atan2+0x76>
    1192:	a31f      	add	r3, pc, #124	; (adr r3, 1210 <__ieee754_atan2+0x170>)
    1194:	e9d3 2300 	ldrd	r2, r3, [r3]
    1198:	4620      	mov	r0, r4
    119a:	4629      	mov	r1, r5
    119c:	f7ff f804 	bl	1a8 <__aeabi_dsub>
    11a0:	a31d      	add	r3, pc, #116	; (adr r3, 1218 <__ieee754_atan2+0x178>)
    11a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a6:	e016      	b.n	11d6 <__ieee754_atan2+0x136>
    11a8:	a51d      	add	r5, pc, #116	; (adr r5, 1220 <__ieee754_atan2+0x180>)
    11aa:	e9d5 4500 	ldrd	r4, r5, [r5]
    11ae:	e7ea      	b.n	1186 <__ieee754_atan2+0xe6>
    11b0:	2400      	movs	r4, #0
    11b2:	2500      	movs	r5, #0
    11b4:	e7e7      	b.n	1186 <__ieee754_atan2+0xe6>
    11b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    11ba:	461d      	mov	r5, r3
    11bc:	e7ab      	b.n	1116 <__ieee754_atan2+0x76>
    11be:	a314      	add	r3, pc, #80	; (adr r3, 1210 <__ieee754_atan2+0x170>)
    11c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11c4:	4620      	mov	r0, r4
    11c6:	4629      	mov	r1, r5
    11c8:	f7fe ffee 	bl	1a8 <__aeabi_dsub>
    11cc:	4602      	mov	r2, r0
    11ce:	460b      	mov	r3, r1
    11d0:	a111      	add	r1, pc, #68	; (adr r1, 1218 <__ieee754_atan2+0x178>)
    11d2:	e9d1 0100 	ldrd	r0, r1, [r1]
    11d6:	f7fe ffe7 	bl	1a8 <__aeabi_dsub>
    11da:	e782      	b.n	10e2 <__ieee754_atan2+0x42>
    11dc:	a50e      	add	r5, pc, #56	; (adr r5, 1218 <__ieee754_atan2+0x178>)
    11de:	e9d5 4500 	ldrd	r4, r5, [r5]
    11e2:	e798      	b.n	1116 <__ieee754_atan2+0x76>
    11e4:	a510      	add	r5, pc, #64	; (adr r5, 1228 <__ieee754_atan2+0x188>)
    11e6:	e9d5 4500 	ldrd	r4, r5, [r5]
    11ea:	e794      	b.n	1116 <__ieee754_atan2+0x76>
    11ec:	a510      	add	r5, pc, #64	; (adr r5, 1230 <__ieee754_atan2+0x190>)
    11ee:	e9d5 4500 	ldrd	r4, r5, [r5]
    11f2:	e790      	b.n	1116 <__ieee754_atan2+0x76>
    11f4:	2400      	movs	r4, #0
    11f6:	2500      	movs	r5, #0
    11f8:	e78d      	b.n	1116 <__ieee754_atan2+0x76>
    11fa:	a509      	add	r5, pc, #36	; (adr r5, 1220 <__ieee754_atan2+0x180>)
    11fc:	e9d5 4500 	ldrd	r4, r5, [r5]
    1200:	e789      	b.n	1116 <__ieee754_atan2+0x76>
    1202:	bf00      	nop
    1204:	f3af 8000 	nop.w
    1208:	54442d18 	.word	0x54442d18
    120c:	bff921fb 	.word	0xbff921fb
    1210:	33145c07 	.word	0x33145c07
    1214:	3ca1a626 	.word	0x3ca1a626
    1218:	54442d18 	.word	0x54442d18
    121c:	400921fb 	.word	0x400921fb
    1220:	54442d18 	.word	0x54442d18
    1224:	3ff921fb 	.word	0x3ff921fb
    1228:	54442d18 	.word	0x54442d18
    122c:	c00921fb 	.word	0xc00921fb
    1230:	54442d18 	.word	0x54442d18
    1234:	3fe921fb 	.word	0x3fe921fb
    1238:	7ff00000 	.word	0x7ff00000
    123c:	0000c360 	.word	0x0000c360
    1240:	0000c348 	.word	0x0000c348
    1244:	00000000 	.word	0x00000000

00001248 <atan>:
    1248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    124c:	4bbc      	ldr	r3, [pc, #752]	; (1540 <atan+0x2f8>)
    124e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    1252:	429e      	cmp	r6, r3
    1254:	4604      	mov	r4, r0
    1256:	460d      	mov	r5, r1
    1258:	468b      	mov	fp, r1
    125a:	d918      	bls.n	128e <atan+0x46>
    125c:	4bb9      	ldr	r3, [pc, #740]	; (1544 <atan+0x2fc>)
    125e:	429e      	cmp	r6, r3
    1260:	d801      	bhi.n	1266 <atan+0x1e>
    1262:	d109      	bne.n	1278 <atan+0x30>
    1264:	b140      	cbz	r0, 1278 <atan+0x30>
    1266:	4622      	mov	r2, r4
    1268:	462b      	mov	r3, r5
    126a:	4620      	mov	r0, r4
    126c:	4629      	mov	r1, r5
    126e:	f7fe ff9d 	bl	1ac <__adddf3>
    1272:	4604      	mov	r4, r0
    1274:	460d      	mov	r5, r1
    1276:	e006      	b.n	1286 <atan+0x3e>
    1278:	f1bb 0f00 	cmp.w	fp, #0
    127c:	f340 8123 	ble.w	14c6 <atan+0x27e>
    1280:	a593      	add	r5, pc, #588	; (adr r5, 14d0 <atan+0x288>)
    1282:	e9d5 4500 	ldrd	r4, r5, [r5]
    1286:	4620      	mov	r0, r4
    1288:	4629      	mov	r1, r5
    128a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    128e:	4bae      	ldr	r3, [pc, #696]	; (1548 <atan+0x300>)
    1290:	429e      	cmp	r6, r3
    1292:	d811      	bhi.n	12b8 <atan+0x70>
    1294:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    1298:	429e      	cmp	r6, r3
    129a:	d80a      	bhi.n	12b2 <atan+0x6a>
    129c:	a38e      	add	r3, pc, #568	; (adr r3, 14d8 <atan+0x290>)
    129e:	e9d3 2300 	ldrd	r2, r3, [r3]
    12a2:	f7fe ff83 	bl	1ac <__adddf3>
    12a6:	4ba9      	ldr	r3, [pc, #676]	; (154c <atan+0x304>)
    12a8:	2200      	movs	r2, #0
    12aa:	f7ff fd5d 	bl	d68 <__aeabi_dcmpgt>
    12ae:	2800      	cmp	r0, #0
    12b0:	d1e9      	bne.n	1286 <atan+0x3e>
    12b2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    12b6:	e027      	b.n	1308 <atan+0xc0>
    12b8:	f00a fcc8 	bl	bc4c <fabs>
    12bc:	4ba4      	ldr	r3, [pc, #656]	; (1550 <atan+0x308>)
    12be:	429e      	cmp	r6, r3
    12c0:	4604      	mov	r4, r0
    12c2:	460d      	mov	r5, r1
    12c4:	f200 80b8 	bhi.w	1438 <atan+0x1f0>
    12c8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    12cc:	429e      	cmp	r6, r3
    12ce:	f200 809c 	bhi.w	140a <atan+0x1c2>
    12d2:	4602      	mov	r2, r0
    12d4:	460b      	mov	r3, r1
    12d6:	f7fe ff69 	bl	1ac <__adddf3>
    12da:	4b9c      	ldr	r3, [pc, #624]	; (154c <atan+0x304>)
    12dc:	2200      	movs	r2, #0
    12de:	f7fe ff63 	bl	1a8 <__aeabi_dsub>
    12e2:	2200      	movs	r2, #0
    12e4:	4606      	mov	r6, r0
    12e6:	460f      	mov	r7, r1
    12e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12ec:	4620      	mov	r0, r4
    12ee:	4629      	mov	r1, r5
    12f0:	f7fe ff5c 	bl	1ac <__adddf3>
    12f4:	4602      	mov	r2, r0
    12f6:	460b      	mov	r3, r1
    12f8:	4630      	mov	r0, r6
    12fa:	4639      	mov	r1, r7
    12fc:	f7ff fa36 	bl	76c <__aeabi_ddiv>
    1300:	f04f 0a00 	mov.w	sl, #0
    1304:	4604      	mov	r4, r0
    1306:	460d      	mov	r5, r1
    1308:	4622      	mov	r2, r4
    130a:	462b      	mov	r3, r5
    130c:	4620      	mov	r0, r4
    130e:	4629      	mov	r1, r5
    1310:	f7ff f902 	bl	518 <__aeabi_dmul>
    1314:	4602      	mov	r2, r0
    1316:	460b      	mov	r3, r1
    1318:	4680      	mov	r8, r0
    131a:	4689      	mov	r9, r1
    131c:	f7ff f8fc 	bl	518 <__aeabi_dmul>
    1320:	a36f      	add	r3, pc, #444	; (adr r3, 14e0 <atan+0x298>)
    1322:	e9d3 2300 	ldrd	r2, r3, [r3]
    1326:	4606      	mov	r6, r0
    1328:	460f      	mov	r7, r1
    132a:	f7ff f8f5 	bl	518 <__aeabi_dmul>
    132e:	a36e      	add	r3, pc, #440	; (adr r3, 14e8 <atan+0x2a0>)
    1330:	e9d3 2300 	ldrd	r2, r3, [r3]
    1334:	f7fe ff3a 	bl	1ac <__adddf3>
    1338:	4632      	mov	r2, r6
    133a:	463b      	mov	r3, r7
    133c:	f7ff f8ec 	bl	518 <__aeabi_dmul>
    1340:	a36b      	add	r3, pc, #428	; (adr r3, 14f0 <atan+0x2a8>)
    1342:	e9d3 2300 	ldrd	r2, r3, [r3]
    1346:	f7fe ff31 	bl	1ac <__adddf3>
    134a:	4632      	mov	r2, r6
    134c:	463b      	mov	r3, r7
    134e:	f7ff f8e3 	bl	518 <__aeabi_dmul>
    1352:	a369      	add	r3, pc, #420	; (adr r3, 14f8 <atan+0x2b0>)
    1354:	e9d3 2300 	ldrd	r2, r3, [r3]
    1358:	f7fe ff28 	bl	1ac <__adddf3>
    135c:	4632      	mov	r2, r6
    135e:	463b      	mov	r3, r7
    1360:	f7ff f8da 	bl	518 <__aeabi_dmul>
    1364:	a366      	add	r3, pc, #408	; (adr r3, 1500 <atan+0x2b8>)
    1366:	e9d3 2300 	ldrd	r2, r3, [r3]
    136a:	f7fe ff1f 	bl	1ac <__adddf3>
    136e:	4632      	mov	r2, r6
    1370:	463b      	mov	r3, r7
    1372:	f7ff f8d1 	bl	518 <__aeabi_dmul>
    1376:	a364      	add	r3, pc, #400	; (adr r3, 1508 <atan+0x2c0>)
    1378:	e9d3 2300 	ldrd	r2, r3, [r3]
    137c:	f7fe ff16 	bl	1ac <__adddf3>
    1380:	4642      	mov	r2, r8
    1382:	464b      	mov	r3, r9
    1384:	f7ff f8c8 	bl	518 <__aeabi_dmul>
    1388:	a361      	add	r3, pc, #388	; (adr r3, 1510 <atan+0x2c8>)
    138a:	e9d3 2300 	ldrd	r2, r3, [r3]
    138e:	4680      	mov	r8, r0
    1390:	4689      	mov	r9, r1
    1392:	4630      	mov	r0, r6
    1394:	4639      	mov	r1, r7
    1396:	f7ff f8bf 	bl	518 <__aeabi_dmul>
    139a:	a35f      	add	r3, pc, #380	; (adr r3, 1518 <atan+0x2d0>)
    139c:	e9d3 2300 	ldrd	r2, r3, [r3]
    13a0:	f7fe ff02 	bl	1a8 <__aeabi_dsub>
    13a4:	4632      	mov	r2, r6
    13a6:	463b      	mov	r3, r7
    13a8:	f7ff f8b6 	bl	518 <__aeabi_dmul>
    13ac:	a35c      	add	r3, pc, #368	; (adr r3, 1520 <atan+0x2d8>)
    13ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    13b2:	f7fe fef9 	bl	1a8 <__aeabi_dsub>
    13b6:	4632      	mov	r2, r6
    13b8:	463b      	mov	r3, r7
    13ba:	f7ff f8ad 	bl	518 <__aeabi_dmul>
    13be:	a35a      	add	r3, pc, #360	; (adr r3, 1528 <atan+0x2e0>)
    13c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    13c4:	f7fe fef0 	bl	1a8 <__aeabi_dsub>
    13c8:	4632      	mov	r2, r6
    13ca:	463b      	mov	r3, r7
    13cc:	f7ff f8a4 	bl	518 <__aeabi_dmul>
    13d0:	a357      	add	r3, pc, #348	; (adr r3, 1530 <atan+0x2e8>)
    13d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    13d6:	f7fe fee7 	bl	1a8 <__aeabi_dsub>
    13da:	4632      	mov	r2, r6
    13dc:	463b      	mov	r3, r7
    13de:	f7ff f89b 	bl	518 <__aeabi_dmul>
    13e2:	4602      	mov	r2, r0
    13e4:	460b      	mov	r3, r1
    13e6:	4640      	mov	r0, r8
    13e8:	4649      	mov	r1, r9
    13ea:	f7fe fedf 	bl	1ac <__adddf3>
    13ee:	4622      	mov	r2, r4
    13f0:	462b      	mov	r3, r5
    13f2:	f7ff f891 	bl	518 <__aeabi_dmul>
    13f6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    13fa:	4602      	mov	r2, r0
    13fc:	460b      	mov	r3, r1
    13fe:	d144      	bne.n	148a <atan+0x242>
    1400:	4620      	mov	r0, r4
    1402:	4629      	mov	r1, r5
    1404:	f7fe fed0 	bl	1a8 <__aeabi_dsub>
    1408:	e733      	b.n	1272 <atan+0x2a>
    140a:	4b50      	ldr	r3, [pc, #320]	; (154c <atan+0x304>)
    140c:	2200      	movs	r2, #0
    140e:	f7fe fecb 	bl	1a8 <__aeabi_dsub>
    1412:	4b4e      	ldr	r3, [pc, #312]	; (154c <atan+0x304>)
    1414:	4606      	mov	r6, r0
    1416:	460f      	mov	r7, r1
    1418:	2200      	movs	r2, #0
    141a:	4620      	mov	r0, r4
    141c:	4629      	mov	r1, r5
    141e:	f7fe fec5 	bl	1ac <__adddf3>
    1422:	4602      	mov	r2, r0
    1424:	460b      	mov	r3, r1
    1426:	4630      	mov	r0, r6
    1428:	4639      	mov	r1, r7
    142a:	f7ff f99f 	bl	76c <__aeabi_ddiv>
    142e:	f04f 0a01 	mov.w	sl, #1
    1432:	4604      	mov	r4, r0
    1434:	460d      	mov	r5, r1
    1436:	e767      	b.n	1308 <atan+0xc0>
    1438:	4b46      	ldr	r3, [pc, #280]	; (1554 <atan+0x30c>)
    143a:	429e      	cmp	r6, r3
    143c:	d21a      	bcs.n	1474 <atan+0x22c>
    143e:	4b46      	ldr	r3, [pc, #280]	; (1558 <atan+0x310>)
    1440:	2200      	movs	r2, #0
    1442:	f7fe feb1 	bl	1a8 <__aeabi_dsub>
    1446:	4b44      	ldr	r3, [pc, #272]	; (1558 <atan+0x310>)
    1448:	4606      	mov	r6, r0
    144a:	460f      	mov	r7, r1
    144c:	2200      	movs	r2, #0
    144e:	4620      	mov	r0, r4
    1450:	4629      	mov	r1, r5
    1452:	f7ff f861 	bl	518 <__aeabi_dmul>
    1456:	4b3d      	ldr	r3, [pc, #244]	; (154c <atan+0x304>)
    1458:	2200      	movs	r2, #0
    145a:	f7fe fea7 	bl	1ac <__adddf3>
    145e:	4602      	mov	r2, r0
    1460:	460b      	mov	r3, r1
    1462:	4630      	mov	r0, r6
    1464:	4639      	mov	r1, r7
    1466:	f7ff f981 	bl	76c <__aeabi_ddiv>
    146a:	f04f 0a02 	mov.w	sl, #2
    146e:	4604      	mov	r4, r0
    1470:	460d      	mov	r5, r1
    1472:	e749      	b.n	1308 <atan+0xc0>
    1474:	4602      	mov	r2, r0
    1476:	460b      	mov	r3, r1
    1478:	2000      	movs	r0, #0
    147a:	4938      	ldr	r1, [pc, #224]	; (155c <atan+0x314>)
    147c:	f7ff f976 	bl	76c <__aeabi_ddiv>
    1480:	f04f 0a03 	mov.w	sl, #3
    1484:	4604      	mov	r4, r0
    1486:	460d      	mov	r5, r1
    1488:	e73e      	b.n	1308 <atan+0xc0>
    148a:	4b35      	ldr	r3, [pc, #212]	; (1560 <atan+0x318>)
    148c:	4e35      	ldr	r6, [pc, #212]	; (1564 <atan+0x31c>)
    148e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1492:	e9d3 2300 	ldrd	r2, r3, [r3]
    1496:	f7fe fe87 	bl	1a8 <__aeabi_dsub>
    149a:	4622      	mov	r2, r4
    149c:	462b      	mov	r3, r5
    149e:	f7fe fe83 	bl	1a8 <__aeabi_dsub>
    14a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    14a6:	4602      	mov	r2, r0
    14a8:	460b      	mov	r3, r1
    14aa:	e9d6 0100 	ldrd	r0, r1, [r6]
    14ae:	f7fe fe7b 	bl	1a8 <__aeabi_dsub>
    14b2:	f1bb 0f00 	cmp.w	fp, #0
    14b6:	4604      	mov	r4, r0
    14b8:	460d      	mov	r5, r1
    14ba:	f6bf aee4 	bge.w	1286 <atan+0x3e>
    14be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    14c2:	461d      	mov	r5, r3
    14c4:	e6df      	b.n	1286 <atan+0x3e>
    14c6:	a51c      	add	r5, pc, #112	; (adr r5, 1538 <atan+0x2f0>)
    14c8:	e9d5 4500 	ldrd	r4, r5, [r5]
    14cc:	e6db      	b.n	1286 <atan+0x3e>
    14ce:	bf00      	nop
    14d0:	54442d18 	.word	0x54442d18
    14d4:	3ff921fb 	.word	0x3ff921fb
    14d8:	8800759c 	.word	0x8800759c
    14dc:	7e37e43c 	.word	0x7e37e43c
    14e0:	e322da11 	.word	0xe322da11
    14e4:	3f90ad3a 	.word	0x3f90ad3a
    14e8:	24760deb 	.word	0x24760deb
    14ec:	3fa97b4b 	.word	0x3fa97b4b
    14f0:	a0d03d51 	.word	0xa0d03d51
    14f4:	3fb10d66 	.word	0x3fb10d66
    14f8:	c54c206e 	.word	0xc54c206e
    14fc:	3fb745cd 	.word	0x3fb745cd
    1500:	920083ff 	.word	0x920083ff
    1504:	3fc24924 	.word	0x3fc24924
    1508:	5555550d 	.word	0x5555550d
    150c:	3fd55555 	.word	0x3fd55555
    1510:	2c6a6c2f 	.word	0x2c6a6c2f
    1514:	bfa2b444 	.word	0xbfa2b444
    1518:	52defd9a 	.word	0x52defd9a
    151c:	3fadde2d 	.word	0x3fadde2d
    1520:	af749a6d 	.word	0xaf749a6d
    1524:	3fb3b0f2 	.word	0x3fb3b0f2
    1528:	fe231671 	.word	0xfe231671
    152c:	3fbc71c6 	.word	0x3fbc71c6
    1530:	9998ebc4 	.word	0x9998ebc4
    1534:	3fc99999 	.word	0x3fc99999
    1538:	54442d18 	.word	0x54442d18
    153c:	bff921fb 	.word	0xbff921fb
    1540:	440fffff 	.word	0x440fffff
    1544:	7ff00000 	.word	0x7ff00000
    1548:	3fdbffff 	.word	0x3fdbffff
    154c:	3ff00000 	.word	0x3ff00000
    1550:	3ff2ffff 	.word	0x3ff2ffff
    1554:	40038000 	.word	0x40038000
    1558:	3ff80000 	.word	0x3ff80000
    155c:	bff00000 	.word	0xbff00000
    1560:	0000c378 	.word	0x0000c378
    1564:	0000c398 	.word	0x0000c398

00001568 <thread_OBSC_code>:
		
	}
}
/* Non-real time task 
   After testing: WCET = N */
void thread_OBSC_code(void *argA , void *argB, void *argC){
    1568:	b510      	push	{r4, lr}
	//uint32_t start, end;
	uint32_t wc_exec_time = 1;
	uint16_t obs;
	while(1){
		//start = k_cycle_get_32();
		obs = obstCount(rx_chars);
    156a:	4c02      	ldr	r4, [pc, #8]	; (1574 <thread_OBSC_code+0xc>)
    156c:	4620      	mov	r0, r4
    156e:	f00a fb49 	bl	bc04 <obstCount>
	while(1){
    1572:	e7fb      	b.n	156c <thread_OBSC_code+0x4>
    1574:	2000114e 	.word	0x2000114e

00001578 <thread_OUTPUT_code>:
		printk("-----------------\nThread OAP executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
		k_sem_give(&sem_OUTPUT);
	}
}
/* Critical to the safety of the robot and should be executed at the highest possible rate. */
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    1578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* mes_NOD;

	while(1){
		k_sem_take(&sem_OUTPUT, K_FOREVER);
		start = k_cycle_get_32();
		mes_NOD = (uint8_t *)get_mes(cab_NOD);
    157c:	f8df a090 	ldr.w	sl, [pc, #144]	; 1610 <thread_OUTPUT_code+0x98>
		mes_OAP = (float *)get_mes(cab_OAP);
    1580:	f8df b090 	ldr.w	fp, [pc, #144]	; 1614 <thread_OUTPUT_code+0x9c>
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    1584:	b085      	sub	sp, #20
	uint32_t wc_exec_time = 1;
    1586:	2401      	movs	r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    158c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1590:	4821      	ldr	r0, [pc, #132]	; (1618 <thread_OUTPUT_code+0xa0>)
    1592:	f006 fc25 	bl	7de0 <z_impl_k_sem_take>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1596:	f00a f83c 	bl	b612 <sys_clock_cycle_get_32>
    159a:	4607      	mov	r7, r0
		mes_NOD = (uint8_t *)get_mes(cab_NOD);
    159c:	f8da 0000 	ldr.w	r0, [sl]
    15a0:	f00a fae3 	bl	bb6a <get_mes>
    15a4:	4606      	mov	r6, r0
		mes_OAP = (float *)get_mes(cab_OAP);
    15a6:	f8db 0000 	ldr.w	r0, [fp]
    15aa:	f00a fade 	bl	bb6a <get_mes>
    15ae:	4605      	mov	r5, r0
		printk("Near obstacle detection -> %d\nOrientation and Position -> %f, %d%%\n", *mes_NOD, *mes_OAP, (uint16_t)*(mes_OAP+1));
    15b0:	6800      	ldr	r0, [r0, #0]
    15b2:	f7fe ff59 	bl	468 <__aeabi_f2d>
    15b6:	4680      	mov	r8, r0
    15b8:	4689      	mov	r9, r1
    15ba:	6868      	ldr	r0, [r5, #4]
    15bc:	7831      	ldrb	r1, [r6, #0]
    15be:	9103      	str	r1, [sp, #12]
    15c0:	f7ff fb1a 	bl	bf8 <__aeabi_f2uiz>
    15c4:	b280      	uxth	r0, r0
    15c6:	4642      	mov	r2, r8
    15c8:	464b      	mov	r3, r9
    15ca:	9903      	ldr	r1, [sp, #12]
    15cc:	9000      	str	r0, [sp, #0]
    15ce:	4813      	ldr	r0, [pc, #76]	; (161c <thread_OUTPUT_code+0xa4>)
    15d0:	f009 fb63 	bl	ac9a <printk>
		unget(mes_NOD, cab_NOD);
    15d4:	f8da 1000 	ldr.w	r1, [sl]
    15d8:	4630      	mov	r0, r6
    15da:	f00a fae1 	bl	bba0 <unget>
		unget(mes_OAP, cab_OAP);
    15de:	f8db 1000 	ldr.w	r1, [fp]
    15e2:	4628      	mov	r0, r5
    15e4:	f00a fadc 	bl	bba0 <unget>
    15e8:	f00a f813 	bl	b612 <sys_clock_cycle_get_32>
		end = k_cycle_get_32();
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    15ec:	1bc0      	subs	r0, r0, r7
    15ee:	42a0      	cmp	r0, r4
    15f0:	d908      	bls.n	1604 <thread_OUTPUT_code+0x8c>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    15f2:	4a0b      	ldr	r2, [pc, #44]	; (1620 <thread_OUTPUT_code+0xa8>)
    15f4:	f647 74ff 	movw	r4, #32767	; 0x7fff
    15f8:	2300      	movs	r3, #0
    15fa:	fbe0 4302 	umlal	r4, r3, r0, r2
    15fe:	0be4      	lsrs	r4, r4, #15
    1600:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("-----------------------\nThread OUTPUT executed\nWCET -> %4u\n-----------------", wc_exec_time);
    1604:	4807      	ldr	r0, [pc, #28]	; (1624 <thread_OUTPUT_code+0xac>)
    1606:	4621      	mov	r1, r4
    1608:	f009 fb47 	bl	ac9a <printk>
	while(1){
    160c:	e7bc      	b.n	1588 <thread_OUTPUT_code+0x10>
    160e:	bf00      	nop
    1610:	20000800 	.word	0x20000800
    1614:	200007fc 	.word	0x200007fc
    1618:	200007d8 	.word	0x200007d8
    161c:	0000c6e0 	.word	0x0000c6e0
    1620:	000f4240 	.word	0x000f4240
    1624:	0000c724 	.word	0x0000c724

00001628 <uart_cb>:
	}
}

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    1628:	b510      	push	{r4, lr}
    int err;

    switch (evt->type) {
    162a:	780b      	ldrb	r3, [r1, #0]
{
    162c:	460c      	mov	r4, r1
    switch (evt->type) {
    162e:	2b05      	cmp	r3, #5
    1630:	d807      	bhi.n	1642 <uart_cb+0x1a>
    1632:	e8df f003 	tbb	[pc, r3]
    1636:	0703      	.short	0x0703
    1638:	29061f0c 	.word	0x29061f0c
	
        case UART_TX_DONE:
		    //printk("UART_TX_DONE event \n\r");
            count = 0;
    163c:	4b1c      	ldr	r3, [pc, #112]	; (16b0 <uart_cb+0x88>)
    163e:	2200      	movs	r2, #0
    1640:	801a      	strh	r2, [r3, #0]
	    default:
            //printk("UART: unknown event \n\r");
		    break;
    }

    1642:	bd10      	pop	{r4, pc}
    1644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    	printk("UART_TX_ABORTED event \n\r");
    1648:	481a      	ldr	r0, [pc, #104]	; (16b4 <uart_cb+0x8c>)
    164a:	f009 bb26 	b.w	ac9a <printk>
            memcpy(&rx_chars, &(rx_buf[evt->data.rx.offset]), evt->data.rx.len);
    164e:	6889      	ldr	r1, [r1, #8]
    1650:	4819      	ldr	r0, [pc, #100]	; (16b8 <uart_cb+0x90>)
    1652:	68e2      	ldr	r2, [r4, #12]
    1654:	4401      	add	r1, r0
    1656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    165a:	4818      	ldr	r0, [pc, #96]	; (16bc <uart_cb+0x94>)
    165c:	f00a fb08 	bl	bc70 <__memcpy_chk>
            count+=evt->data.rx.len;    
    1660:	4a13      	ldr	r2, [pc, #76]	; (16b0 <uart_cb+0x88>)
    1662:	68e3      	ldr	r3, [r4, #12]
    1664:	8811      	ldrh	r1, [r2, #0]
    1666:	440b      	add	r3, r1
    1668:	8013      	strh	r3, [r2, #0]
            rx++;   
    166a:	4a15      	ldr	r2, [pc, #84]	; (16c0 <uart_cb+0x98>)
    166c:	6813      	ldr	r3, [r2, #0]
    166e:	3301      	adds	r3, #1
    1670:	6013      	str	r3, [r2, #0]
		    break;
    1672:	e7e6      	b.n	1642 <uart_cb+0x1a>
            uart_rx_buf_rsp(uart_dev, rx_buf_rsp, sizeof(rx_buf_rsp));
    1674:	4b13      	ldr	r3, [pc, #76]	; (16c4 <uart_cb+0x9c>)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    1676:	4914      	ldr	r1, [pc, #80]	; (16c8 <uart_cb+0xa0>)
    1678:	6818      	ldr	r0, [r3, #0]
    167a:	6883      	ldr	r3, [r0, #8]
    167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1680:	691b      	ldr	r3, [r3, #16]
    1682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1686:	4718      	bx	r3
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    1688:	4b0e      	ldr	r3, [pc, #56]	; (16c4 <uart_cb+0x9c>)
    168a:	6818      	ldr	r0, [r3, #0]
	return api->rx_enable(dev, buf, len, timeout);
    168c:	6883      	ldr	r3, [r0, #8]
    168e:	490a      	ldr	r1, [pc, #40]	; (16b8 <uart_cb+0x90>)
    1690:	68dc      	ldr	r4, [r3, #12]
    1692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    169a:	47a0      	blx	r4
            if (err) {
    169c:	4601      	mov	r1, r0
    169e:	2800      	cmp	r0, #0
    16a0:	d0cf      	beq.n	1642 <uart_cb+0x1a>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
    16a2:	480a      	ldr	r0, [pc, #40]	; (16cc <uart_cb+0xa4>)
    16a4:	f009 faf9 	bl	ac9a <printk>
                exit(FATAL_ERR);                
    16a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    16ac:	f008 fb2c 	bl	9d08 <exit>
    16b0:	2000114c 	.word	0x2000114c
    16b4:	0000c771 	.word	0x0000c771
    16b8:	2000914e 	.word	0x2000914e
    16bc:	2000114e 	.word	0x2000114e
    16c0:	20000818 	.word	0x20000818
    16c4:	2000081c 	.word	0x2000081c
    16c8:	2000514e 	.word	0x2000514e
    16cc:	0000c78a 	.word	0x0000c78a

000016d0 <thread_OAP_code>:
void thread_OAP_code(void *argA , void *argB, void *argC){
    16d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    16d4:	4e1d      	ldr	r6, [pc, #116]	; (174c <thread_OAP_code+0x7c>)
		buff = (float *) reserve(cab_OAP);
    16d6:	4d1e      	ldr	r5, [pc, #120]	; (1750 <thread_OAP_code+0x80>)
		guideLineSearch(rx_chars, &pos, &angle);
    16d8:	4f1e      	ldr	r7, [pc, #120]	; (1754 <thread_OAP_code+0x84>)
	uint32_t wc_exec_time = 1;
    16da:	2401      	movs	r4, #1
    16dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    16e4:	4630      	mov	r0, r6
    16e6:	f006 fb7b 	bl	7de0 <z_impl_k_sem_take>
    16ea:	f009 ff92 	bl	b612 <sys_clock_cycle_get_32>
    16ee:	4681      	mov	r9, r0
		buff = (float *) reserve(cab_OAP);
    16f0:	6828      	ldr	r0, [r5, #0]
    16f2:	f008 fadb 	bl	9cac <reserve>
		guideLineSearch(rx_chars, &pos, &angle);
    16f6:	aa01      	add	r2, sp, #4
		buff = (float *) reserve(cab_OAP);
    16f8:	4680      	mov	r8, r0
		guideLineSearch(rx_chars, &pos, &angle);
    16fa:	f10d 0102 	add.w	r1, sp, #2
    16fe:	4638      	mov	r0, r7
    1700:	f7ff fc9e 	bl	1040 <guideLineSearch>
		*buff = angle;
    1704:	9b01      	ldr	r3, [sp, #4]
    1706:	f8c8 3000 	str.w	r3, [r8]
		*(buff+1) = pos;
    170a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    170e:	f7ff fa1b 	bl	b48 <__aeabi_ui2f>
		put_mes(buff, cab_OAP);
    1712:	6829      	ldr	r1, [r5, #0]
		*(buff+1) = pos;
    1714:	f8c8 0004 	str.w	r0, [r8, #4]
		put_mes(buff, cab_OAP);
    1718:	4640      	mov	r0, r8
    171a:	f00a fa0b 	bl	bb34 <put_mes>
    171e:	f009 ff78 	bl	b612 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    1722:	eba0 0009 	sub.w	r0, r0, r9
    1726:	42a0      	cmp	r0, r4
    1728:	d908      	bls.n	173c <thread_OAP_code+0x6c>
    172a:	4a0b      	ldr	r2, [pc, #44]	; (1758 <thread_OAP_code+0x88>)
    172c:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1730:	2300      	movs	r3, #0
    1732:	fbe0 4302 	umlal	r4, r3, r0, r2
    1736:	0be4      	lsrs	r4, r4, #15
    1738:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("-----------------\nThread OAP executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
    173c:	4807      	ldr	r0, [pc, #28]	; (175c <thread_OAP_code+0x8c>)
    173e:	4621      	mov	r1, r4
    1740:	f009 faab 	bl	ac9a <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1744:	4806      	ldr	r0, [pc, #24]	; (1760 <thread_OAP_code+0x90>)
    1746:	f006 fb0d 	bl	7d64 <z_impl_k_sem_give>
	while(1){
    174a:	e7c7      	b.n	16dc <thread_OAP_code+0xc>
    174c:	200007c8 	.word	0x200007c8
    1750:	200007fc 	.word	0x200007fc
    1754:	2000114e 	.word	0x2000114e
    1758:	000f4240 	.word	0x000f4240
    175c:	0000c7b2 	.word	0x0000c7b2
    1760:	200007d8 	.word	0x200007d8

00001764 <thread_NOD_code>:
void thread_NOD_code(void *argA , void *argB, void *argC){
    1764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
    1768:	4e1a      	ldr	r6, [pc, #104]	; (17d4 <thread_NOD_code+0x70>)
		buff = reserve(cab_NOD);
    176a:	4d1b      	ldr	r5, [pc, #108]	; (17d8 <thread_NOD_code+0x74>)
		flag = nearObstSearch(rx_chars);
    176c:	4f1b      	ldr	r7, [pc, #108]	; (17dc <thread_NOD_code+0x78>)
	uint32_t wc_exec_time = 1;
    176e:	2401      	movs	r4, #1
    1770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1778:	4630      	mov	r0, r6
    177a:	f006 fb31 	bl	7de0 <z_impl_k_sem_take>
    177e:	f009 ff48 	bl	b612 <sys_clock_cycle_get_32>
    1782:	4681      	mov	r9, r0
		buff = reserve(cab_NOD);
    1784:	6828      	ldr	r0, [r5, #0]
    1786:	f008 fa91 	bl	9cac <reserve>
    178a:	4680      	mov	r8, r0
		flag = nearObstSearch(rx_chars);
    178c:	4638      	mov	r0, r7
    178e:	f00a fa22 	bl	bbd6 <nearObstSearch>
    1792:	4601      	mov	r1, r0
		*buff = flag;
    1794:	f888 0000 	strb.w	r0, [r8]
		printk("FLAG -> %d\n", flag);
    1798:	4811      	ldr	r0, [pc, #68]	; (17e0 <thread_NOD_code+0x7c>)
    179a:	f009 fa7e 	bl	ac9a <printk>
		put_mes(buff, cab_NOD);
    179e:	6829      	ldr	r1, [r5, #0]
    17a0:	4640      	mov	r0, r8
    17a2:	f00a f9c7 	bl	bb34 <put_mes>
    17a6:	f009 ff34 	bl	b612 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    17aa:	eba0 0009 	sub.w	r0, r0, r9
    17ae:	42a0      	cmp	r0, r4
    17b0:	d908      	bls.n	17c4 <thread_NOD_code+0x60>
    17b2:	4a0c      	ldr	r2, [pc, #48]	; (17e4 <thread_NOD_code+0x80>)
    17b4:	f647 74ff 	movw	r4, #32767	; 0x7fff
    17b8:	2300      	movs	r3, #0
    17ba:	fbe0 4302 	umlal	r4, r3, r0, r2
    17be:	0be4      	lsrs	r4, r4, #15
    17c0:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("----------------------\nThread NOD executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
    17c4:	4808      	ldr	r0, [pc, #32]	; (17e8 <thread_NOD_code+0x84>)
    17c6:	4621      	mov	r1, r4
    17c8:	f009 fa67 	bl	ac9a <printk>
	z_impl_k_sem_give(sem);
    17cc:	4807      	ldr	r0, [pc, #28]	; (17ec <thread_NOD_code+0x88>)
    17ce:	f006 fac9 	bl	7d64 <z_impl_k_sem_give>
	while(1){
    17d2:	e7cd      	b.n	1770 <thread_NOD_code+0xc>
    17d4:	200007e8 	.word	0x200007e8
    17d8:	20000800 	.word	0x20000800
    17dc:	2000114e 	.word	0x2000114e
    17e0:	0000c7f7 	.word	0x0000c7f7
    17e4:	000f4240 	.word	0x000f4240
    17e8:	0000c803 	.word	0x0000c803
    17ec:	200007d8 	.word	0x200007d8

000017f0 <thread_RXDATA_code>:
void thread_RXDATA_code(void *argA , void *argB, void *argC){
    17f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char arr[4] = {'A', 'C', 'K', '\0'};
    17f4:	4b23      	ldr	r3, [pc, #140]	; (1884 <thread_RXDATA_code+0x94>)
        if(rx > 0){  
    17f6:	4e24      	ldr	r6, [pc, #144]	; (1888 <thread_RXDATA_code+0x98>)
			printk("----------------------\nDownloading img%d....\n", c);
    17f8:	4f24      	ldr	r7, [pc, #144]	; (188c <thread_RXDATA_code+0x9c>)
            err = uart_tx(uart_dev, arr, sizeof(arr), SYS_FOREVER_US);
    17fa:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1890 <thread_RXDATA_code+0xa0>
	char arr[4] = {'A', 'C', 'K', '\0'};
    17fe:	9301      	str	r3, [sp, #4]
	int c = 1;
    1800:	2501      	movs	r5, #1
        if(rx > 0){  
    1802:	6833      	ldr	r3, [r6, #0]
    1804:	2b00      	cmp	r3, #0
    1806:	dd37      	ble.n	1878 <thread_RXDATA_code+0x88>
			printk("----------------------\nDownloading img%d....\n", c);
    1808:	4638      	mov	r0, r7
    180a:	4629      	mov	r1, r5
    180c:	f009 fa45 	bl	ac9a <printk>
            rx = 0;  /* Reset */
    1810:	2300      	movs	r3, #0
            err = uart_tx(uart_dev, arr, sizeof(arr), SYS_FOREVER_US);
    1812:	f8d8 0000 	ldr.w	r0, [r8]
            rx = 0;  /* Reset */
    1816:	6033      	str	r3, [r6, #0]
	return api->tx(dev, buf, len, timeout);
    1818:	6883      	ldr	r3, [r0, #8]
    181a:	2204      	movs	r2, #4
    181c:	685c      	ldr	r4, [r3, #4]
    181e:	eb0d 0102 	add.w	r1, sp, r2
    1822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1826:	47a0      	blx	r4
            if (err) {
    1828:	4601      	mov	r1, r0
    182a:	b128      	cbz	r0, 1838 <thread_RXDATA_code+0x48>
               printk("uart_tx() error. Error code:%d\n\r",err);
    182c:	4819      	ldr	r0, [pc, #100]	; (1894 <thread_RXDATA_code+0xa4>)
    182e:	f009 fa34 	bl	ac9a <printk>
}
    1832:	b003      	add	sp, #12
    1834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c++;
    1838:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1898 <thread_RXDATA_code+0xa8>
    183c:	3501      	adds	r5, #1
    183e:	4604      	mov	r4, r0
				for (int x = 0; x < IMGWIDTH; x++) {
    1840:	eb04 0b09 	add.w	fp, r4, r9
    1844:	f04f 0a00 	mov.w	sl, #0
					printf("%d ", rx_chars[y * IMGWIDTH + x]);
    1848:	f81b 1b01 	ldrb.w	r1, [fp], #1
    184c:	4813      	ldr	r0, [pc, #76]	; (189c <thread_RXDATA_code+0xac>)
				for (int x = 0; x < IMGWIDTH; x++) {
    184e:	f10a 0a01 	add.w	sl, sl, #1
					printf("%d ", rx_chars[y * IMGWIDTH + x]);
    1852:	f008 fb19 	bl	9e88 <iprintf>
				for (int x = 0; x < IMGWIDTH; x++) {
    1856:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
    185a:	d1f5      	bne.n	1848 <thread_RXDATA_code+0x58>
				printf("%s", "\n");
    185c:	4910      	ldr	r1, [pc, #64]	; (18a0 <thread_RXDATA_code+0xb0>)
    185e:	4811      	ldr	r0, [pc, #68]	; (18a4 <thread_RXDATA_code+0xb4>)
			for (int y = 0; y < IMGHEIGHT; y++) {
    1860:	3480      	adds	r4, #128	; 0x80
				printf("%s", "\n");
    1862:	f008 fb11 	bl	9e88 <iprintf>
			for (int y = 0; y < IMGHEIGHT; y++) {
    1866:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    186a:	d1e9      	bne.n	1840 <thread_RXDATA_code+0x50>
    186c:	480e      	ldr	r0, [pc, #56]	; (18a8 <thread_RXDATA_code+0xb8>)
    186e:	f006 fa79 	bl	7d64 <z_impl_k_sem_give>
    1872:	480e      	ldr	r0, [pc, #56]	; (18ac <thread_RXDATA_code+0xbc>)
    1874:	f006 fa76 	bl	7d64 <z_impl_k_sem_give>
	return z_impl_k_usleep(us);
    1878:	f641 509d 	movw	r0, #7581	; 0x1d9d
    187c:	f007 fbca 	bl	9014 <z_impl_k_usleep>
    1880:	e7bf      	b.n	1802 <thread_RXDATA_code+0x12>
    1882:	bf00      	nop
    1884:	004b4341 	.word	0x004b4341
    1888:	20000818 	.word	0x20000818
    188c:	0000c84d 	.word	0x0000c84d
    1890:	2000081c 	.word	0x2000081c
    1894:	0000c87b 	.word	0x0000c87b
    1898:	2000114e 	.word	0x2000114e
    189c:	0000c89c 	.word	0x0000c89c
    18a0:	0000e01f 	.word	0x0000e01f
    18a4:	0000c8a0 	.word	0x0000c8a0
    18a8:	200007e8 	.word	0x200007e8
    18ac:	200007c8 	.word	0x200007c8

000018b0 <main>:
{
    18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b2:	b08f      	sub	sp, #60	; 0x3c
	float first_OAP[2] = {0.0, 0.0};
    18b4:	2300      	movs	r3, #0
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    18b6:	2201      	movs	r2, #1
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    18b8:	2400      	movs	r4, #0
	float first_OAP[2] = {0.0, 0.0};
    18ba:	930c      	str	r3, [sp, #48]	; 0x30
    18bc:	930d      	str	r3, [sp, #52]	; 0x34
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    18be:	4611      	mov	r1, r2
    18c0:	f10d 0321 	add.w	r3, sp, #33	; 0x21
    18c4:	485f      	ldr	r0, [pc, #380]	; (1a44 <main+0x194>)
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    18c6:	940b      	str	r4, [sp, #44]	; 0x2c
    18c8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	uint8_t first_NOD = 0;
    18cc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
	uint16_t first_OBSC = 0;
    18d0:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    18d4:	f00a f900 	bl	bad8 <open_cab>
    18d8:	4b5b      	ldr	r3, [pc, #364]	; (1a48 <main+0x198>)
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    18da:	2204      	movs	r2, #4
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    18dc:	6018      	str	r0, [r3, #0]
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    18de:	2102      	movs	r1, #2
    18e0:	ab0c      	add	r3, sp, #48	; 0x30
    18e2:	485a      	ldr	r0, [pc, #360]	; (1a4c <main+0x19c>)
    18e4:	f00a f8f8 	bl	bad8 <open_cab>
    18e8:	4b59      	ldr	r3, [pc, #356]	; (1a50 <main+0x1a0>)
	cab_OBSC = open_cab("OBSC", 1, 2, &first_OBSC);
    18ea:	2202      	movs	r2, #2
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    18ec:	6018      	str	r0, [r3, #0]
	cab_OBSC = open_cab("OBSC", 1, 2, &first_OBSC);
    18ee:	2101      	movs	r1, #1
    18f0:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    18f4:	4857      	ldr	r0, [pc, #348]	; (1a54 <main+0x1a4>)
    18f6:	f00a f8ef 	bl	bad8 <open_cab>
    18fa:	4b57      	ldr	r3, [pc, #348]	; (1a58 <main+0x1a8>)
    18fc:	6018      	str	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    18fe:	4857      	ldr	r0, [pc, #348]	; (1a5c <main+0x1ac>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    1900:	4d57      	ldr	r5, [pc, #348]	; (1a60 <main+0x1b0>)
    1902:	f005 fc63 	bl	71cc <z_impl_device_get_binding>
    1906:	6028      	str	r0, [r5, #0]
    if (uart_dev == NULL) {
    1908:	b920      	cbnz	r0, 1914 <main+0x64>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    190a:	4954      	ldr	r1, [pc, #336]	; (1a5c <main+0x1ac>)
    190c:	4855      	ldr	r0, [pc, #340]	; (1a64 <main+0x1b4>)
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    190e:	f009 f9c4 	bl	ac9a <printk>
        return;
    1912:	e009      	b.n	1928 <main+0x78>
        printk("UART binding successful\n\r");
    1914:	4854      	ldr	r0, [pc, #336]	; (1a68 <main+0x1b8>)
    1916:	f009 f9c0 	bl	ac9a <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    191a:	6828      	ldr	r0, [r5, #0]
	if (api->configure == NULL) {
    191c:	6883      	ldr	r3, [r0, #8]
    191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1920:	b923      	cbnz	r3, 192c <main+0x7c>
        printk("uart_configure() error. Invalid configuration\n\r");
    1922:	4852      	ldr	r0, [pc, #328]	; (1a6c <main+0x1bc>)
    1924:	f009 f9b9 	bl	ac9a <printk>
}
    1928:	b00f      	add	sp, #60	; 0x3c
    192a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->configure(dev, cfg);
    192c:	4950      	ldr	r1, [pc, #320]	; (1a70 <main+0x1c0>)
    192e:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
    1930:	3058      	adds	r0, #88	; 0x58
    1932:	d0f6      	beq.n	1922 <main+0x72>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    1934:	6828      	ldr	r0, [r5, #0]
	if (api->callback_set == NULL) {
    1936:	6883      	ldr	r3, [r0, #8]
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	b133      	cbz	r3, 194a <main+0x9a>
	return api->callback_set(dev, callback, user_data);
    193c:	494d      	ldr	r1, [pc, #308]	; (1a74 <main+0x1c4>)
    193e:	4622      	mov	r2, r4
    1940:	4798      	blx	r3
    if (err) {
    1942:	4601      	mov	r1, r0
    1944:	b120      	cbz	r0, 1950 <main+0xa0>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    1946:	484c      	ldr	r0, [pc, #304]	; (1a78 <main+0x1c8>)
    1948:	e7e1      	b.n	190e <main+0x5e>
		return -ENOSYS;
    194a:	f06f 0157 	mvn.w	r1, #87	; 0x57
    194e:	e7fa      	b.n	1946 <main+0x96>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    1950:	6828      	ldr	r0, [r5, #0]
	return api->rx_enable(dev, buf, len, timeout);
    1952:	6883      	ldr	r3, [r0, #8]
    1954:	4949      	ldr	r1, [pc, #292]	; (1a7c <main+0x1cc>)
    1956:	68dc      	ldr	r4, [r3, #12]
    1958:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1960:	47a0      	blx	r4
    if (err) {
    1962:	4604      	mov	r4, r0
    1964:	b110      	cbz	r0, 196c <main+0xbc>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    1966:	4601      	mov	r1, r0
    1968:	4845      	ldr	r0, [pc, #276]	; (1a80 <main+0x1d0>)
    196a:	e7d0      	b.n	190e <main+0x5e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    196c:	2201      	movs	r2, #1
    196e:	4601      	mov	r1, r0
    1970:	4844      	ldr	r0, [pc, #272]	; (1a84 <main+0x1d4>)
    1972:	f00a f82e 	bl	b9d2 <z_impl_k_sem_init>
    1976:	2201      	movs	r2, #1
    1978:	4621      	mov	r1, r4
    197a:	4843      	ldr	r0, [pc, #268]	; (1a88 <main+0x1d8>)
    197c:	f00a f829 	bl	b9d2 <z_impl_k_sem_init>
    1980:	2201      	movs	r2, #1
    1982:	4621      	mov	r1, r4
    1984:	4841      	ldr	r0, [pc, #260]	; (1a8c <main+0x1dc>)
    1986:	f00a f824 	bl	b9d2 <z_impl_k_sem_init>
	thread_NOD_tid = k_thread_create(&thread_NOD_data, thread_NOD_stack,
    198a:	2600      	movs	r6, #0
    198c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    198e:	ab0b      	add	r3, sp, #44	; 0x2c
    1990:	9302      	str	r3, [sp, #8]
    1992:	ab0a      	add	r3, sp, #40	; 0x28
    1994:	9301      	str	r3, [sp, #4]
    1996:	2501      	movs	r5, #1
    1998:	ab09      	add	r3, sp, #36	; 0x24
    199a:	9300      	str	r3, [sp, #0]
    199c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    19a0:	4b3b      	ldr	r3, [pc, #236]	; (1a90 <main+0x1e0>)
    19a2:	493c      	ldr	r1, [pc, #240]	; (1a94 <main+0x1e4>)
    19a4:	9404      	str	r4, [sp, #16]
    19a6:	9503      	str	r5, [sp, #12]
    19a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19ac:	483a      	ldr	r0, [pc, #232]	; (1a98 <main+0x1e8>)
    19ae:	f005 feeb 	bl	7788 <z_impl_k_thread_create>
    19b2:	4b3a      	ldr	r3, [pc, #232]	; (1a9c <main+0x1ec>)
    19b4:	6018      	str	r0, [r3, #0]
    19b6:	4b3a      	ldr	r3, [pc, #232]	; (1aa0 <main+0x1f0>)
    19b8:	493a      	ldr	r1, [pc, #232]	; (1aa4 <main+0x1f4>)
    19ba:	9400      	str	r4, [sp, #0]
    19bc:	e9cd 6706 	strd	r6, r7, [sp, #24]
    19c0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    19c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    19c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19cc:	4836      	ldr	r0, [pc, #216]	; (1aa8 <main+0x1f8>)
    19ce:	f005 fedb 	bl	7788 <z_impl_k_thread_create>
	thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
    19d2:	4b36      	ldr	r3, [pc, #216]	; (1aac <main+0x1fc>)
    19d4:	6018      	str	r0, [r3, #0]
    19d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    19da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    19de:	e9cd 2306 	strd	r2, r3, [sp, #24]
    19e2:	2303      	movs	r3, #3
    19e4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    19e8:	e9cd 4400 	strd	r4, r4, [sp]
    19ec:	4b30      	ldr	r3, [pc, #192]	; (1ab0 <main+0x200>)
    19ee:	4931      	ldr	r1, [pc, #196]	; (1ab4 <main+0x204>)
    19f0:	9404      	str	r4, [sp, #16]
    19f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19f6:	4830      	ldr	r0, [pc, #192]	; (1ab8 <main+0x208>)
    19f8:	f005 fec6 	bl	7788 <z_impl_k_thread_create>
	thread_OBSC_tid = k_thread_create(&thread_OBSC_data, thread_OBSC_stack,
    19fc:	4b2f      	ldr	r3, [pc, #188]	; (1abc <main+0x20c>)
    19fe:	6018      	str	r0, [r3, #0]
    1a00:	2302      	movs	r3, #2
    1a02:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1a06:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1a0a:	e9cd 4400 	strd	r4, r4, [sp]
    1a0e:	4b2c      	ldr	r3, [pc, #176]	; (1ac0 <main+0x210>)
    1a10:	492c      	ldr	r1, [pc, #176]	; (1ac4 <main+0x214>)
    1a12:	9404      	str	r4, [sp, #16]
    1a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a18:	482b      	ldr	r0, [pc, #172]	; (1ac8 <main+0x218>)
    1a1a:	f005 feb5 	bl	7788 <z_impl_k_thread_create>
	thread_OAP_tid = k_thread_create(&thread_OAP_data, thread_OAP_stack,
    1a1e:	4b2b      	ldr	r3, [pc, #172]	; (1acc <main+0x21c>)
    1a20:	6018      	str	r0, [r3, #0]
    1a22:	4b2b      	ldr	r3, [pc, #172]	; (1ad0 <main+0x220>)
    1a24:	492b      	ldr	r1, [pc, #172]	; (1ad4 <main+0x224>)
    1a26:	482c      	ldr	r0, [pc, #176]	; (1ad8 <main+0x228>)
    1a28:	9400      	str	r4, [sp, #0]
    1a2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1a2e:	e9cd 5403 	strd	r5, r4, [sp, #12]
    1a32:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a3a:	f005 fea5 	bl	7788 <z_impl_k_thread_create>
	thread_RXDATA_tid = k_thread_create(&thread_RXDATA_data, thread_RXDATA_stack, 
    1a3e:	4b27      	ldr	r3, [pc, #156]	; (1adc <main+0x22c>)
    1a40:	6018      	str	r0, [r3, #0]
	return;
    1a42:	e771      	b.n	1928 <main+0x78>
    1a44:	0000c8a3 	.word	0x0000c8a3
    1a48:	20000800 	.word	0x20000800
    1a4c:	0000c8a7 	.word	0x0000c8a7
    1a50:	200007fc 	.word	0x200007fc
    1a54:	0000c8ab 	.word	0x0000c8ab
    1a58:	200007f8 	.word	0x200007f8
    1a5c:	0000c8b0 	.word	0x0000c8b0
    1a60:	2000081c 	.word	0x2000081c
    1a64:	0000c8b7 	.word	0x0000c8b7
    1a68:	0000c8e3 	.word	0x0000c8e3
    1a6c:	0000c8fd 	.word	0x0000c8fd
    1a70:	0000c3b8 	.word	0x0000c3b8
    1a74:	00001629 	.word	0x00001629
    1a78:	0000c92d 	.word	0x0000c92d
    1a7c:	2000914e 	.word	0x2000914e
    1a80:	0000c78a 	.word	0x0000c78a
    1a84:	200007e8 	.word	0x200007e8
    1a88:	200007d8 	.word	0x200007d8
    1a8c:	200007c8 	.word	0x200007c8
    1a90:	00001765 	.word	0x00001765
    1a94:	2000f600 	.word	0x2000f600
    1a98:	20000470 	.word	0x20000470
    1a9c:	20000814 	.word	0x20000814
    1aa0:	00001579 	.word	0x00001579
    1aa4:	2000dda0 	.word	0x2000dda0
    1aa8:	200002f0 	.word	0x200002f0
    1aac:	20000808 	.word	0x20000808
    1ab0:	00001569 	.word	0x00001569
    1ab4:	2000ede0 	.word	0x2000ede0
    1ab8:	200003f0 	.word	0x200003f0
    1abc:	20000810 	.word	0x20000810
    1ac0:	000016d1 	.word	0x000016d1
    1ac4:	2000e5c0 	.word	0x2000e5c0
    1ac8:	20000370 	.word	0x20000370
    1acc:	2000080c 	.word	0x2000080c
    1ad0:	000017f1 	.word	0x000017f1
    1ad4:	2000d580 	.word	0x2000d580
    1ad8:	20000270 	.word	0x20000270
    1adc:	20000804 	.word	0x20000804

00001ae0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ae4:	b08d      	sub	sp, #52	; 0x34
    1ae6:	461f      	mov	r7, r3
    1ae8:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1aea:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1aee:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1af2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1af4:	1c53      	adds	r3, r2, #1
    1af6:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1af8:	0783      	lsls	r3, r0, #30
    1afa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    1afe:	4605      	mov	r5, r0
    1b00:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    1b02:	f040 8228 	bne.w	1f56 <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1b06:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1b08:	b130      	cbz	r0, 1b18 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1b0a:	2907      	cmp	r1, #7
    1b0c:	d809      	bhi.n	1b22 <cbvprintf_package+0x42>
		return -ENOSPC;
    1b0e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1b12:	b00d      	add	sp, #52	; 0x34
    1b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1b18:	f001 0607 	and.w	r6, r1, #7
    1b1c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1b1e:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1b22:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    1b26:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    1b2a:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1b2c:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1b30:	4652      	mov	r2, sl
	bool parsing = false;
    1b32:	4651      	mov	r1, sl
	size = sizeof(char *);
    1b34:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    1b36:	b105      	cbz	r5, 1b3a <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    1b38:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1b3a:	9804      	ldr	r0, [sp, #16]
    1b3c:	2800      	cmp	r0, #0
    1b3e:	f300 812a 	bgt.w	1d96 <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1b42:	48bc      	ldr	r0, [pc, #752]	; (1e34 <cbvprintf_package+0x354>)
    1b44:	4287      	cmp	r7, r0
    1b46:	d303      	bcc.n	1b50 <cbvprintf_package+0x70>
    1b48:	48bb      	ldr	r0, [pc, #748]	; (1e38 <cbvprintf_package+0x358>)
    1b4a:	4287      	cmp	r7, r0
    1b4c:	f0c0 8123 	bcc.w	1d96 <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1b50:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1b54:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1b58:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1b5c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1b60:	f000 8137 	beq.w	1dd2 <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1b64:	f04f 0c00 	mov.w	ip, #0
    1b68:	e11e      	b.n	1da8 <cbvprintf_package+0x2c8>
		if (!parsing) {
    1b6a:	b931      	cbnz	r1, 1b7a <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    1b6c:	2825      	cmp	r0, #37	; 0x25
    1b6e:	d116      	bne.n	1b9e <cbvprintf_package+0xbe>
				parsing = true;
    1b70:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    1b72:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    1b76:	46cb      	mov	fp, r9
    1b78:	e011      	b.n	1b9e <cbvprintf_package+0xbe>
		switch (*fmt) {
    1b7a:	286c      	cmp	r0, #108	; 0x6c
    1b7c:	f200 809f 	bhi.w	1cbe <cbvprintf_package+0x1de>
    1b80:	284b      	cmp	r0, #75	; 0x4b
    1b82:	d822      	bhi.n	1bca <cbvprintf_package+0xea>
    1b84:	2847      	cmp	r0, #71	; 0x47
    1b86:	f200 80b1 	bhi.w	1cec <cbvprintf_package+0x20c>
    1b8a:	2829      	cmp	r0, #41	; 0x29
    1b8c:	d86a      	bhi.n	1c64 <cbvprintf_package+0x184>
    1b8e:	2820      	cmp	r0, #32
    1b90:	d005      	beq.n	1b9e <cbvprintf_package+0xbe>
    1b92:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    1b96:	f1dc 0100 	rsbs	r1, ip, #0
    1b9a:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    1b9e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1ba2:	2800      	cmp	r0, #0
    1ba4:	d1e1      	bne.n	1b6a <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1ba6:	1b61      	subs	r1, r4, r5
    1ba8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    1bac:	f0c0 8173 	bcc.w	1e96 <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    1bb0:	49a2      	ldr	r1, [pc, #648]	; (1e3c <cbvprintf_package+0x35c>)
    1bb2:	4aa3      	ldr	r2, [pc, #652]	; (1e40 <cbvprintf_package+0x360>)
    1bb4:	48a3      	ldr	r0, [pc, #652]	; (1e44 <cbvprintf_package+0x364>)
    1bb6:	f240 233d 	movw	r3, #573	; 0x23d
    1bba:	f009 f9bb 	bl	af34 <assert_print>
    1bbe:	48a2      	ldr	r0, [pc, #648]	; (1e48 <cbvprintf_package+0x368>)
    1bc0:	f009 f9b8 	bl	af34 <assert_print>
    1bc4:	f240 213d 	movw	r1, #573	; 0x23d
    1bc8:	e0fd      	b.n	1dc6 <cbvprintf_package+0x2e6>
		switch (*fmt) {
    1bca:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1bce:	f1bc 0f20 	cmp.w	ip, #32
    1bd2:	f200 808b 	bhi.w	1cec <cbvprintf_package+0x20c>
    1bd6:	f20f 0e08 	addw	lr, pc, #8
    1bda:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    1bde:	bf00      	nop
    1be0:	00001b9f 	.word	0x00001b9f
    1be4:	00001ced 	.word	0x00001ced
    1be8:	00001ced 	.word	0x00001ced
    1bec:	00001ced 	.word	0x00001ced
    1bf0:	00001ced 	.word	0x00001ced
    1bf4:	00001ced 	.word	0x00001ced
    1bf8:	00001ced 	.word	0x00001ced
    1bfc:	00001ced 	.word	0x00001ced
    1c00:	00001ced 	.word	0x00001ced
    1c04:	00001ced 	.word	0x00001ced
    1c08:	00001ced 	.word	0x00001ced
    1c0c:	00001ced 	.word	0x00001ced
    1c10:	00001cf1 	.word	0x00001cf1
    1c14:	00001ced 	.word	0x00001ced
    1c18:	00001ced 	.word	0x00001ced
    1c1c:	00001ced 	.word	0x00001ced
    1c20:	00001ced 	.word	0x00001ced
    1c24:	00001ced 	.word	0x00001ced
    1c28:	00001ced 	.word	0x00001ced
    1c2c:	00001ced 	.word	0x00001ced
    1c30:	00001ced 	.word	0x00001ced
    1c34:	00001d0d 	.word	0x00001d0d
    1c38:	00001ced 	.word	0x00001ced
    1c3c:	00001cf1 	.word	0x00001cf1
    1c40:	00001cf1 	.word	0x00001cf1
    1c44:	00001d0d 	.word	0x00001d0d
    1c48:	00001d0d 	.word	0x00001d0d
    1c4c:	00001d0d 	.word	0x00001d0d
    1c50:	00001b9f 	.word	0x00001b9f
    1c54:	00001cf1 	.word	0x00001cf1
    1c58:	00001d35 	.word	0x00001d35
    1c5c:	00001ced 	.word	0x00001ced
    1c60:	00001b9f 	.word	0x00001b9f
    1c64:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1c68:	f04f 0e01 	mov.w	lr, #1
    1c6c:	fa5f fc8c 	uxtb.w	ip, ip
    1c70:	fa0e fc0c 	lsl.w	ip, lr, ip
    1c74:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1c78:	ea1c 0f0e 	tst.w	ip, lr
    1c7c:	d18f      	bne.n	1b9e <cbvprintf_package+0xbe>
    1c7e:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    1c82:	d143      	bne.n	1d0c <cbvprintf_package+0x22c>
    1c84:	f01c 0101 	ands.w	r1, ip, #1
    1c88:	d089      	beq.n	1b9e <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    1c8a:	3c01      	subs	r4, #1
    1c8c:	444c      	add	r4, r9
    1c8e:	f1c9 0c00 	rsb	ip, r9, #0
    1c92:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1c96:	2d00      	cmp	r5, #0
    1c98:	d065      	beq.n	1d66 <cbvprintf_package+0x286>
    1c9a:	ebab 0c05 	sub.w	ip, fp, r5
    1c9e:	44a4      	add	ip, r4
    1ca0:	4566      	cmp	r6, ip
    1ca2:	f4ff af34 	bcc.w	1b0e <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    1ca6:	2873      	cmp	r0, #115	; 0x73
    1ca8:	d06f      	beq.n	1d8a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1caa:	f1bb 0f04 	cmp.w	fp, #4
    1cae:	d14a      	bne.n	1d46 <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    1cb0:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    1cb4:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    1cb6:	3404      	adds	r4, #4
    1cb8:	f04f 0b04 	mov.w	fp, #4
    1cbc:	e76f      	b.n	1b9e <cbvprintf_package+0xbe>
		switch (*fmt) {
    1cbe:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    1cc2:	fa5f fc8c 	uxtb.w	ip, ip
    1cc6:	f1bc 0f0c 	cmp.w	ip, #12
    1cca:	d80f      	bhi.n	1cec <cbvprintf_package+0x20c>
    1ccc:	f04f 0e01 	mov.w	lr, #1
    1cd0:	fa0e fc0c 	lsl.w	ip, lr, ip
    1cd4:	f01c 0f25 	tst.w	ip, #37	; 0x25
    1cd8:	d12f      	bne.n	1d3a <cbvprintf_package+0x25a>
    1cda:	f240 4e82 	movw	lr, #1154	; 0x482
    1cde:	ea1c 0f0e 	tst.w	ip, lr
    1ce2:	d105      	bne.n	1cf0 <cbvprintf_package+0x210>
    1ce4:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    1ce8:	f47f af43 	bne.w	1b72 <cbvprintf_package+0x92>
			parsing = false;
    1cec:	2100      	movs	r1, #0
    1cee:	e756      	b.n	1b9e <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    1cf0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    1cf4:	296c      	cmp	r1, #108	; 0x6c
    1cf6:	d124      	bne.n	1d42 <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    1cf8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1cfc:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    1cfe:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    1d02:	d11b      	bne.n	1d3c <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    1d04:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    1d08:	46cb      	mov	fp, r9
    1d0a:	e7be      	b.n	1c8a <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    1d0c:	f108 0807 	add.w	r8, r8, #7
    1d10:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    1d14:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    1d16:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    1d1a:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    1d1e:	b13d      	cbz	r5, 1d30 <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    1d20:	f8dd e014 	ldr.w	lr, [sp, #20]
    1d24:	44a6      	add	lr, r4
    1d26:	45b6      	cmp	lr, r6
    1d28:	f63f aef1 	bhi.w	1b0e <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    1d2c:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1d30:	3408      	adds	r4, #8
			parsing = false;
    1d32:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1d34:	f04f 0908 	mov.w	r9, #8
    1d38:	e71d      	b.n	1b76 <cbvprintf_package+0x96>
			parsing = false;
    1d3a:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    1d3c:	f04f 0904 	mov.w	r9, #4
    1d40:	e7e2      	b.n	1d08 <cbvprintf_package+0x228>
			parsing = false;
    1d42:	2100      	movs	r1, #0
    1d44:	e7a1      	b.n	1c8a <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    1d46:	f1bb 0f08 	cmp.w	fp, #8
    1d4a:	f040 8096 	bne.w	1e7a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1d4e:	f108 0807 	add.w	r8, r8, #7
    1d52:	f028 0807 	bic.w	r8, r8, #7
    1d56:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    1d5a:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1d5e:	3408      	adds	r4, #8
    1d60:	f04f 0b08 	mov.w	fp, #8
    1d64:	e71b      	b.n	1b9e <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    1d66:	2873      	cmp	r0, #115	; 0x73
    1d68:	d00f      	beq.n	1d8a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1d6a:	f1bb 0f04 	cmp.w	fp, #4
    1d6e:	d102      	bne.n	1d76 <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    1d70:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1d74:	e79f      	b.n	1cb6 <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    1d76:	f1bb 0f08 	cmp.w	fp, #8
    1d7a:	d17e      	bne.n	1e7a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1d7c:	f108 0807 	add.w	r8, r8, #7
    1d80:	f028 0807 	bic.w	r8, r8, #7
    1d84:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1d88:	e7e9      	b.n	1d5e <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1d8a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    1d8c:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1d90:	3801      	subs	r0, #1
    1d92:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    1d94:	e6cf      	b.n	1b36 <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    1d96:	9802      	ldr	r0, [sp, #8]
    1d98:	0780      	lsls	r0, r0, #30
    1d9a:	d546      	bpl.n	1e2a <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1d9c:	eba4 0e05 	sub.w	lr, r4, r5
    1da0:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1da4:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1da8:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1dac:	d31f      	bcc.n	1dee <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    1dae:	4923      	ldr	r1, [pc, #140]	; (1e3c <cbvprintf_package+0x35c>)
    1db0:	4a23      	ldr	r2, [pc, #140]	; (1e40 <cbvprintf_package+0x360>)
    1db2:	4824      	ldr	r0, [pc, #144]	; (1e44 <cbvprintf_package+0x364>)
    1db4:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1db8:	f009 f8bc 	bl	af34 <assert_print>
    1dbc:	4823      	ldr	r0, [pc, #140]	; (1e4c <cbvprintf_package+0x36c>)
    1dbe:	f009 f8b9 	bl	af34 <assert_print>
    1dc2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    1dc6:	481e      	ldr	r0, [pc, #120]	; (1e40 <cbvprintf_package+0x360>)
    1dc8:	f009 f8ad 	bl	af26 <assert_post_action>
					return -EINVAL;
    1dcc:	f06f 0015 	mvn.w	r0, #21
    1dd0:	e69f      	b.n	1b12 <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1dd2:	2a0f      	cmp	r2, #15
    1dd4:	d80d      	bhi.n	1df2 <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    1dd6:	2d00      	cmp	r5, #0
    1dd8:	d03f      	beq.n	1e5a <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1dda:	b2c0      	uxtb	r0, r0
    1ddc:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1de0:	44ec      	add	ip, sp
    1de2:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    1de6:	9803      	ldr	r0, [sp, #12]
    1de8:	3001      	adds	r0, #1
    1dea:	9003      	str	r0, [sp, #12]
    1dec:	e01c      	b.n	1e28 <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1dee:	2a0f      	cmp	r2, #15
    1df0:	d90c      	bls.n	1e0c <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    1df2:	4912      	ldr	r1, [pc, #72]	; (1e3c <cbvprintf_package+0x35c>)
    1df4:	4a12      	ldr	r2, [pc, #72]	; (1e40 <cbvprintf_package+0x360>)
    1df6:	4813      	ldr	r0, [pc, #76]	; (1e44 <cbvprintf_package+0x364>)
    1df8:	f240 13f5 	movw	r3, #501	; 0x1f5
    1dfc:	f009 f89a 	bl	af34 <assert_print>
    1e00:	4813      	ldr	r0, [pc, #76]	; (1e50 <cbvprintf_package+0x370>)
    1e02:	f009 f897 	bl	af34 <assert_print>
    1e06:	f240 11f5 	movw	r1, #501	; 0x1f5
    1e0a:	e7dc      	b.n	1dc6 <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    1e0c:	b315      	cbz	r5, 1e54 <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1e0e:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    1e10:	f1bc 0f00 	cmp.w	ip, #0
    1e14:	d0e2      	beq.n	1ddc <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1e16:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1e1a:	44ec      	add	ip, sp
    1e1c:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1e20:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    1e24:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    1e28:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    1e2a:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    1e2e:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1e30:	9005      	str	r0, [sp, #20]
    1e32:	e6b4      	b.n	1b9e <cbvprintf_package+0xbe>
    1e34:	0000c040 	.word	0x0000c040
    1e38:	0000e4fc 	.word	0x0000e4fc
    1e3c:	0000e2d1 	.word	0x0000e2d1
    1e40:	0000c958 	.word	0x0000c958
    1e44:	0000c986 	.word	0x0000c986
    1e48:	0000c9f3 	.word	0x0000c9f3
    1e4c:	0000c9a3 	.word	0x0000c9a3
    1e50:	0000c9c4 	.word	0x0000c9c4
				} else if (is_ro || rws_pos_en) {
    1e54:	f1bc 0f00 	cmp.w	ip, #0
    1e58:	d101      	bne.n	1e5e <cbvprintf_package+0x37e>
    1e5a:	9801      	ldr	r0, [sp, #4]
    1e5c:	b108      	cbz	r0, 1e62 <cbvprintf_package+0x382>
					len += 1;
    1e5e:	3601      	adds	r6, #1
    1e60:	e7e2      	b.n	1e28 <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1e62:	4638      	mov	r0, r7
    1e64:	e9cd 2106 	strd	r2, r1, [sp, #24]
    1e68:	9305      	str	r3, [sp, #20]
    1e6a:	f7ff f8e1 	bl	1030 <strlen>
    1e6e:	3602      	adds	r6, #2
    1e70:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    1e74:	9b05      	ldr	r3, [sp, #20]
    1e76:	4406      	add	r6, r0
    1e78:	e7d6      	b.n	1e28 <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    1e7a:	4a38      	ldr	r2, [pc, #224]	; (1f5c <cbvprintf_package+0x47c>)
    1e7c:	4938      	ldr	r1, [pc, #224]	; (1f60 <cbvprintf_package+0x480>)
    1e7e:	4839      	ldr	r0, [pc, #228]	; (1f64 <cbvprintf_package+0x484>)
    1e80:	f240 2331 	movw	r3, #561	; 0x231
    1e84:	f009 f856 	bl	af34 <assert_print>
    1e88:	4659      	mov	r1, fp
    1e8a:	4837      	ldr	r0, [pc, #220]	; (1f68 <cbvprintf_package+0x488>)
    1e8c:	f009 f852 	bl	af34 <assert_print>
    1e90:	f240 2131 	movw	r1, #561	; 0x231
    1e94:	e797      	b.n	1dc6 <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    1e96:	b91d      	cbnz	r5, 1ea0 <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1e98:	f1a6 0408 	sub.w	r4, r6, #8
    1e9c:	1860      	adds	r0, r4, r1
    1e9e:	e638      	b.n	1b12 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    1ea0:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1ea2:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    1ea6:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    1eaa:	b90b      	cbnz	r3, 1eb0 <cbvprintf_package+0x3d0>
    1eac:	4608      	mov	r0, r1
    1eae:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    1eb0:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    1eb4:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    1eb6:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    1eb8:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1ebc:	f1ba 0f00 	cmp.w	sl, #0
    1ec0:	d006      	beq.n	1ed0 <cbvprintf_package+0x3f0>
    1ec2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1ec4:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    1ec8:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1ecc:	4562      	cmp	r2, ip
    1ece:	d109      	bne.n	1ee4 <cbvprintf_package+0x404>
    1ed0:	f10d 0820 	add.w	r8, sp, #32
    1ed4:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    1ed8:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    1edc:	45c1      	cmp	r9, r8
    1ede:	d111      	bne.n	1f04 <cbvprintf_package+0x424>
	return BUF_OFFSET;
    1ee0:	1b60      	subs	r0, r4, r5
    1ee2:	e616      	b.n	1b12 <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1ee4:	f810 1b01 	ldrb.w	r1, [r0], #1
    1ee8:	060b      	lsls	r3, r1, #24
    1eea:	d508      	bpl.n	1efe <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    1eec:	eb04 080e 	add.w	r8, r4, lr
    1ef0:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1ef2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1ef6:	f4ff ae0a 	bcc.w	1b0e <cbvprintf_package+0x2e>
			*buf++ = pos;
    1efa:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1efe:	f10c 0c01 	add.w	ip, ip, #1
    1f02:	e7e3      	b.n	1ecc <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1f04:	f1ba 0f00 	cmp.w	sl, #0
    1f08:	d003      	beq.n	1f12 <cbvprintf_package+0x432>
    1f0a:	f998 2000 	ldrsb.w	r2, [r8]
    1f0e:	2a00      	cmp	r2, #0
    1f10:	db1c      	blt.n	1f4c <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    1f12:	9b01      	ldr	r3, [sp, #4]
    1f14:	b9eb      	cbnz	r3, 1f52 <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1f16:	f898 2000 	ldrb.w	r2, [r8]
    1f1a:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1f1e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1f22:	4638      	mov	r0, r7
    1f24:	f7ff f884 	bl	1030 <strlen>
    1f28:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1f2a:	eb04 010b 	add.w	r1, r4, fp
    1f2e:	4411      	add	r1, r2
    1f30:	428e      	cmp	r6, r1
    1f32:	f4ff adec 	bcc.w	1b0e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1f36:	f898 1000 	ldrb.w	r1, [r8]
    1f3a:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1f3e:	4639      	mov	r1, r7
    1f40:	4620      	mov	r0, r4
    1f42:	9202      	str	r2, [sp, #8]
    1f44:	f009 fe86 	bl	bc54 <memcpy>
		buf += size;
    1f48:	9a02      	ldr	r2, [sp, #8]
    1f4a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1f4c:	f108 0801 	add.w	r8, r8, #1
    1f50:	e7c4      	b.n	1edc <cbvprintf_package+0x3fc>
			size = 0;
    1f52:	2200      	movs	r2, #0
    1f54:	e7e9      	b.n	1f2a <cbvprintf_package+0x44a>
		return -EFAULT;
    1f56:	f06f 000d 	mvn.w	r0, #13
    1f5a:	e5da      	b.n	1b12 <cbvprintf_package+0x32>
    1f5c:	0000c958 	.word	0x0000c958
    1f60:	0000e2d1 	.word	0x0000e2d1
    1f64:	0000c986 	.word	0x0000c986
    1f68:	0000c9de 	.word	0x0000c9de

00001f6c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1f6c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1f6e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1f72:	2b03      	cmp	r3, #3
{
    1f74:	b510      	push	{r4, lr}
    1f76:	4604      	mov	r4, r0
	notify->result = res;
    1f78:	6081      	str	r1, [r0, #8]
	switch (method) {
    1f7a:	d002      	beq.n	1f82 <sys_notify_finalize+0x16>
    1f7c:	b12b      	cbz	r3, 1f8a <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    1f7e:	2000      	movs	r0, #0
    1f80:	e000      	b.n	1f84 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1f82:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1f84:	2300      	movs	r3, #0
    1f86:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1f88:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    1f8a:	4a05      	ldr	r2, [pc, #20]	; (1fa0 <sys_notify_finalize+0x34>)
    1f8c:	4905      	ldr	r1, [pc, #20]	; (1fa4 <sys_notify_finalize+0x38>)
    1f8e:	4806      	ldr	r0, [pc, #24]	; (1fa8 <sys_notify_finalize+0x3c>)
    1f90:	2345      	movs	r3, #69	; 0x45
    1f92:	f008 ffcf 	bl	af34 <assert_print>
    1f96:	4802      	ldr	r0, [pc, #8]	; (1fa0 <sys_notify_finalize+0x34>)
    1f98:	2145      	movs	r1, #69	; 0x45
    1f9a:	f008 ffc4 	bl	af26 <assert_post_action>
    1f9e:	e7ee      	b.n	1f7e <sys_notify_finalize+0x12>
    1fa0:	0000ca0a 	.word	0x0000ca0a
    1fa4:	0000e2d1 	.word	0x0000e2d1
    1fa8:	0000c986 	.word	0x0000c986

00001fac <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1fac:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <__printk_hook_install+0x8>)
    1fae:	6018      	str	r0, [r3, #0]
}
    1fb0:	4770      	bx	lr
    1fb2:	bf00      	nop
    1fb4:	20000000 	.word	0x20000000

00001fb8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fbc:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1fbe:	072b      	lsls	r3, r5, #28
{
    1fc0:	4604      	mov	r4, r0
    1fc2:	4691      	mov	r9, r2
	if (processing) {
    1fc4:	d469      	bmi.n	209a <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1fc6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fc8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1fcc:	f000 81ee 	beq.w	23ac <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    1fd0:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    1fd2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fd6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1fd8:	f1b8 0f00 	cmp.w	r8, #0
    1fdc:	da7d      	bge.n	20da <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1fde:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1fe0:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1fe2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1fe6:	e9c4 2200 	strd	r2, r2, [r4]
    1fea:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1fee:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ff0:	8ba3      	ldrh	r3, [r4, #28]
    1ff2:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1ff6:	4555      	cmp	r5, sl
    1ff8:	f04f 0700 	mov.w	r7, #0
    1ffc:	f040 81a5 	bne.w	234a <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2000:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    2004:	2e00      	cmp	r6, #0
    2006:	f000 80f2 	beq.w	21ee <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    200a:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    200e:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    2012:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2014:	4658      	mov	r0, fp
    2016:	f005 fc9d 	bl	7954 <z_spin_unlock_valid>
    201a:	b968      	cbnz	r0, 2038 <process_event+0x80>
    201c:	4a93      	ldr	r2, [pc, #588]	; (226c <process_event+0x2b4>)
    201e:	4994      	ldr	r1, [pc, #592]	; (2270 <process_event+0x2b8>)
    2020:	4894      	ldr	r0, [pc, #592]	; (2274 <process_event+0x2bc>)
    2022:	23b9      	movs	r3, #185	; 0xb9
    2024:	f008 ff86 	bl	af34 <assert_print>
    2028:	4893      	ldr	r0, [pc, #588]	; (2278 <process_event+0x2c0>)
    202a:	4659      	mov	r1, fp
    202c:	f008 ff82 	bl	af34 <assert_print>
    2030:	488e      	ldr	r0, [pc, #568]	; (226c <process_event+0x2b4>)
    2032:	21b9      	movs	r1, #185	; 0xb9
    2034:	f008 ff77 	bl	af26 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2038:	f389 8811 	msr	BASEPRI, r9
    203c:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    2040:	f1ba 0f00 	cmp.w	sl, #0
    2044:	f040 8188 	bne.w	2358 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    2048:	2e00      	cmp	r6, #0
    204a:	f040 819e 	bne.w	238a <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    204e:	b117      	cbz	r7, 2056 <process_event+0x9e>
				transit(mgr, transition_complete);
    2050:	498a      	ldr	r1, [pc, #552]	; (227c <process_event+0x2c4>)
    2052:	4620      	mov	r0, r4
    2054:	47b8      	blx	r7
	__asm__ volatile(
    2056:	f04f 0320 	mov.w	r3, #32
    205a:	f3ef 8911 	mrs	r9, BASEPRI
    205e:	f383 8812 	msr	BASEPRI_MAX, r3
    2062:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2066:	4658      	mov	r0, fp
    2068:	f005 fc66 	bl	7938 <z_spin_lock_valid>
    206c:	b968      	cbnz	r0, 208a <process_event+0xd2>
    206e:	4a7f      	ldr	r2, [pc, #508]	; (226c <process_event+0x2b4>)
    2070:	4983      	ldr	r1, [pc, #524]	; (2280 <process_event+0x2c8>)
    2072:	4880      	ldr	r0, [pc, #512]	; (2274 <process_event+0x2bc>)
    2074:	238e      	movs	r3, #142	; 0x8e
    2076:	f008 ff5d 	bl	af34 <assert_print>
    207a:	4882      	ldr	r0, [pc, #520]	; (2284 <process_event+0x2cc>)
    207c:	4659      	mov	r1, fp
    207e:	f008 ff59 	bl	af34 <assert_print>
    2082:	487a      	ldr	r0, [pc, #488]	; (226c <process_event+0x2b4>)
    2084:	218e      	movs	r1, #142	; 0x8e
    2086:	f008 ff4e 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    208a:	4658      	mov	r0, fp
    208c:	f005 fc72 	bl	7974 <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2090:	8ba3      	ldrh	r3, [r4, #28]
    2092:	f023 0308 	bic.w	r3, r3, #8
    2096:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    2098:	e05a      	b.n	2150 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    209a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    209c:	bf0c      	ite	eq
    209e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    20a2:	f045 0520 	orrne.w	r5, r5, #32
    20a6:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    20a8:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    20aa:	4620      	mov	r0, r4
    20ac:	f005 fc52 	bl	7954 <z_spin_unlock_valid>
    20b0:	b968      	cbnz	r0, 20ce <process_event+0x116>
    20b2:	4a6e      	ldr	r2, [pc, #440]	; (226c <process_event+0x2b4>)
    20b4:	496e      	ldr	r1, [pc, #440]	; (2270 <process_event+0x2b8>)
    20b6:	486f      	ldr	r0, [pc, #444]	; (2274 <process_event+0x2bc>)
    20b8:	23b9      	movs	r3, #185	; 0xb9
    20ba:	f008 ff3b 	bl	af34 <assert_print>
    20be:	486e      	ldr	r0, [pc, #440]	; (2278 <process_event+0x2c0>)
    20c0:	4621      	mov	r1, r4
    20c2:	f008 ff37 	bl	af34 <assert_print>
    20c6:	4869      	ldr	r0, [pc, #420]	; (226c <process_event+0x2b4>)
    20c8:	21b9      	movs	r1, #185	; 0xb9
    20ca:	f008 ff2c 	bl	af26 <assert_post_action>
	__asm__ volatile(
    20ce:	f389 8811 	msr	BASEPRI, r9
    20d2:	f3bf 8f6f 	isb	sy
}
    20d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    20da:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    20de:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    20e0:	2901      	cmp	r1, #1
    20e2:	d820      	bhi.n	2126 <process_event+0x16e>
	list->head = NULL;
    20e4:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    20e6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    20e8:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    20ea:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    20ee:	d116      	bne.n	211e <process_event+0x166>
		*clients = mgr->clients;
    20f0:	4632      	mov	r2, r6
    20f2:	e003      	b.n	20fc <process_event+0x144>
				mgr->refs += 1U;
    20f4:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	3101      	adds	r1, #1
    20fa:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    20fc:	2a00      	cmp	r2, #0
    20fe:	d1f9      	bne.n	20f4 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2100:	f023 0307 	bic.w	r3, r3, #7
    2104:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    2108:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    210a:	4620      	mov	r0, r4
    210c:	f008 fdd2 	bl	acb4 <process_recheck>
    2110:	2800      	cmp	r0, #0
    2112:	f43f af6d 	beq.w	1ff0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2116:	f042 0220 	orr.w	r2, r2, #32
    211a:	83a2      	strh	r2, [r4, #28]
    211c:	e768      	b.n	1ff0 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    211e:	f023 0307 	bic.w	r3, r3, #7
    2122:	b29a      	uxth	r2, r3
}
    2124:	e7f0      	b.n	2108 <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2126:	2a04      	cmp	r2, #4
    2128:	d11e      	bne.n	2168 <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    212a:	f023 0307 	bic.w	r3, r3, #7
    212e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    2130:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2132:	4620      	mov	r0, r4
    2134:	f008 fdbe 	bl	acb4 <process_recheck>
    2138:	b110      	cbz	r0, 2140 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    213a:	f042 0220 	orr.w	r2, r2, #32
    213e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2140:	8ba3      	ldrh	r3, [r4, #28]
    2142:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    2146:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    2148:	4555      	cmp	r5, sl
    214a:	463e      	mov	r6, r7
    214c:	f040 80fd 	bne.w	234a <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2150:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    2154:	f01a 0f10 	tst.w	sl, #16
    2158:	f000 811f 	beq.w	239a <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    215c:	f02a 0310 	bic.w	r3, sl, #16
    2160:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    2162:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    2166:	e734      	b.n	1fd2 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    2168:	4a47      	ldr	r2, [pc, #284]	; (2288 <process_event+0x2d0>)
    216a:	4948      	ldr	r1, [pc, #288]	; (228c <process_event+0x2d4>)
    216c:	4841      	ldr	r0, [pc, #260]	; (2274 <process_event+0x2bc>)
    216e:	f240 131b 	movw	r3, #283	; 0x11b
    2172:	f008 fedf 	bl	af34 <assert_print>
    2176:	4844      	ldr	r0, [pc, #272]	; (2288 <process_event+0x2d0>)
    2178:	f240 111b 	movw	r1, #283	; 0x11b
    217c:	f008 fed3 	bl	af26 <assert_post_action>
    2180:	e7de      	b.n	2140 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2182:	b15d      	cbz	r5, 219c <process_event+0x1e4>
    2184:	4942      	ldr	r1, [pc, #264]	; (2290 <process_event+0x2d8>)
    2186:	483b      	ldr	r0, [pc, #236]	; (2274 <process_event+0x2bc>)
    2188:	4a3f      	ldr	r2, [pc, #252]	; (2288 <process_event+0x2d0>)
    218a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    218e:	f008 fed1 	bl	af34 <assert_print>
    2192:	483d      	ldr	r0, [pc, #244]	; (2288 <process_event+0x2d0>)
    2194:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2198:	f008 fec5 	bl	af26 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    219c:	6823      	ldr	r3, [r4, #0]
    219e:	b95b      	cbnz	r3, 21b8 <process_event+0x200>
    21a0:	493c      	ldr	r1, [pc, #240]	; (2294 <process_event+0x2dc>)
    21a2:	4834      	ldr	r0, [pc, #208]	; (2274 <process_event+0x2bc>)
    21a4:	4a38      	ldr	r2, [pc, #224]	; (2288 <process_event+0x2d0>)
    21a6:	f240 1357 	movw	r3, #343	; 0x157
    21aa:	f008 fec3 	bl	af34 <assert_print>
    21ae:	4836      	ldr	r0, [pc, #216]	; (2288 <process_event+0x2d0>)
    21b0:	f240 1157 	movw	r1, #343	; 0x157
    21b4:	f008 feb7 	bl	af26 <assert_post_action>
			transit = mgr->transitions->start;
    21b8:	6923      	ldr	r3, [r4, #16]
    21ba:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    21bc:	b95f      	cbnz	r7, 21d6 <process_event+0x21e>
    21be:	4936      	ldr	r1, [pc, #216]	; (2298 <process_event+0x2e0>)
    21c0:	482c      	ldr	r0, [pc, #176]	; (2274 <process_event+0x2bc>)
    21c2:	4a31      	ldr	r2, [pc, #196]	; (2288 <process_event+0x2d0>)
    21c4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    21c8:	f008 feb4 	bl	af34 <assert_print>
    21cc:	482e      	ldr	r0, [pc, #184]	; (2288 <process_event+0x2d0>)
    21ce:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    21d2:	f008 fea8 	bl	af26 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    21d6:	8ba3      	ldrh	r3, [r4, #28]
    21d8:	f023 0307 	bic.w	r3, r3, #7
    21dc:	f043 0306 	orr.w	r3, r3, #6
    21e0:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    21e2:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    21e4:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    21e6:	f040 80ad 	bne.w	2344 <process_event+0x38c>
		res = 0;
    21ea:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    21ee:	f04f 0a00 	mov.w	sl, #0
    21f2:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    21f4:	2f00      	cmp	r7, #0
    21f6:	f47f af08 	bne.w	200a <process_event+0x52>
    21fa:	e7a9      	b.n	2150 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    21fc:	2d02      	cmp	r5, #2
    21fe:	d00b      	beq.n	2218 <process_event+0x260>
    2200:	4926      	ldr	r1, [pc, #152]	; (229c <process_event+0x2e4>)
    2202:	481c      	ldr	r0, [pc, #112]	; (2274 <process_event+0x2bc>)
    2204:	4a20      	ldr	r2, [pc, #128]	; (2288 <process_event+0x2d0>)
    2206:	f240 135d 	movw	r3, #349	; 0x15d
    220a:	f008 fe93 	bl	af34 <assert_print>
    220e:	481e      	ldr	r0, [pc, #120]	; (2288 <process_event+0x2d0>)
    2210:	f240 115d 	movw	r1, #349	; 0x15d
    2214:	f008 fe87 	bl	af26 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2218:	8be3      	ldrh	r3, [r4, #30]
    221a:	b15b      	cbz	r3, 2234 <process_event+0x27c>
    221c:	4920      	ldr	r1, [pc, #128]	; (22a0 <process_event+0x2e8>)
    221e:	4815      	ldr	r0, [pc, #84]	; (2274 <process_event+0x2bc>)
    2220:	4a19      	ldr	r2, [pc, #100]	; (2288 <process_event+0x2d0>)
    2222:	f44f 73af 	mov.w	r3, #350	; 0x15e
    2226:	f008 fe85 	bl	af34 <assert_print>
    222a:	4817      	ldr	r0, [pc, #92]	; (2288 <process_event+0x2d0>)
    222c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    2230:	f008 fe79 	bl	af26 <assert_post_action>
			transit = mgr->transitions->stop;
    2234:	6923      	ldr	r3, [r4, #16]
    2236:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2238:	b95f      	cbnz	r7, 2252 <process_event+0x29a>
    223a:	4917      	ldr	r1, [pc, #92]	; (2298 <process_event+0x2e0>)
    223c:	480d      	ldr	r0, [pc, #52]	; (2274 <process_event+0x2bc>)
    223e:	4a12      	ldr	r2, [pc, #72]	; (2288 <process_event+0x2d0>)
    2240:	f240 1361 	movw	r3, #353	; 0x161
    2244:	f008 fe76 	bl	af34 <assert_print>
    2248:	480f      	ldr	r0, [pc, #60]	; (2288 <process_event+0x2d0>)
    224a:	f240 1161 	movw	r1, #353	; 0x161
    224e:	f008 fe6a 	bl	af26 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2252:	8ba3      	ldrh	r3, [r4, #28]
    2254:	f023 0307 	bic.w	r3, r3, #7
    2258:	f043 0304 	orr.w	r3, r3, #4
    225c:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    225e:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    2260:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    2262:	d0c2      	beq.n	21ea <process_event+0x232>
    2264:	2600      	movs	r6, #0
		res = 0;
    2266:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2268:	2504      	movs	r5, #4
    226a:	e06e      	b.n	234a <process_event+0x392>
    226c:	0000cad0 	.word	0x0000cad0
    2270:	0000cafd 	.word	0x0000cafd
    2274:	0000c986 	.word	0x0000c986
    2278:	0000cb14 	.word	0x0000cb14
    227c:	000023f1 	.word	0x000023f1
    2280:	0000cb29 	.word	0x0000cb29
    2284:	0000cb3e 	.word	0x0000cb3e
    2288:	0000ca2d 	.word	0x0000ca2d
    228c:	0000e2d1 	.word	0x0000e2d1
    2290:	0000ca4f 	.word	0x0000ca4f
    2294:	0000ca5b 	.word	0x0000ca5b
    2298:	0000ca7e 	.word	0x0000ca7e
    229c:	0000ca95 	.word	0x0000ca95
    22a0:	0000caab 	.word	0x0000caab
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    22a4:	2d01      	cmp	r5, #1
    22a6:	d00b      	beq.n	22c0 <process_event+0x308>
    22a8:	494b      	ldr	r1, [pc, #300]	; (23d8 <process_event+0x420>)
    22aa:	484c      	ldr	r0, [pc, #304]	; (23dc <process_event+0x424>)
    22ac:	4a4c      	ldr	r2, [pc, #304]	; (23e0 <process_event+0x428>)
    22ae:	f44f 73b2 	mov.w	r3, #356	; 0x164
    22b2:	f008 fe3f 	bl	af34 <assert_print>
    22b6:	484a      	ldr	r0, [pc, #296]	; (23e0 <process_event+0x428>)
    22b8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    22bc:	f008 fe33 	bl	af26 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    22c0:	6823      	ldr	r3, [r4, #0]
    22c2:	b95b      	cbnz	r3, 22dc <process_event+0x324>
    22c4:	4947      	ldr	r1, [pc, #284]	; (23e4 <process_event+0x42c>)
    22c6:	4845      	ldr	r0, [pc, #276]	; (23dc <process_event+0x424>)
    22c8:	4a45      	ldr	r2, [pc, #276]	; (23e0 <process_event+0x428>)
    22ca:	f240 1365 	movw	r3, #357	; 0x165
    22ce:	f008 fe31 	bl	af34 <assert_print>
    22d2:	4843      	ldr	r0, [pc, #268]	; (23e0 <process_event+0x428>)
    22d4:	f240 1165 	movw	r1, #357	; 0x165
    22d8:	f008 fe25 	bl	af26 <assert_post_action>
			transit = mgr->transitions->reset;
    22dc:	6923      	ldr	r3, [r4, #16]
    22de:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    22e0:	b95f      	cbnz	r7, 22fa <process_event+0x342>
    22e2:	4941      	ldr	r1, [pc, #260]	; (23e8 <process_event+0x430>)
    22e4:	483d      	ldr	r0, [pc, #244]	; (23dc <process_event+0x424>)
    22e6:	4a3e      	ldr	r2, [pc, #248]	; (23e0 <process_event+0x428>)
    22e8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    22ec:	f008 fe22 	bl	af34 <assert_print>
    22f0:	483b      	ldr	r0, [pc, #236]	; (23e0 <process_event+0x428>)
    22f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    22f6:	f008 fe16 	bl	af26 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    22fa:	8ba3      	ldrh	r3, [r4, #28]
    22fc:	f023 0307 	bic.w	r3, r3, #7
    2300:	f043 0305 	orr.w	r3, r3, #5
    2304:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    2306:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    2308:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    230a:	f43f af6e 	beq.w	21ea <process_event+0x232>
    230e:	2600      	movs	r6, #0
		res = 0;
    2310:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2312:	2505      	movs	r5, #5
    2314:	e019      	b.n	234a <process_event+0x392>
			__ASSERT_NO_MSG(false);
    2316:	4a32      	ldr	r2, [pc, #200]	; (23e0 <process_event+0x428>)
    2318:	4934      	ldr	r1, [pc, #208]	; (23ec <process_event+0x434>)
    231a:	4830      	ldr	r0, [pc, #192]	; (23dc <process_event+0x424>)
    231c:	f240 136b 	movw	r3, #363	; 0x16b
    2320:	f008 fe08 	bl	af34 <assert_print>
    2324:	482e      	ldr	r0, [pc, #184]	; (23e0 <process_event+0x428>)
    2326:	f240 116b 	movw	r1, #363	; 0x16b
    232a:	f008 fdfc 	bl	af26 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    232e:	8ba3      	ldrh	r3, [r4, #28]
    2330:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2334:	42aa      	cmp	r2, r5
    2336:	f43f af0b 	beq.w	2150 <process_event+0x198>
    233a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    233c:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    233e:	4637      	mov	r7, r6
		res = 0;
    2340:	46b0      	mov	r8, r6
    2342:	e002      	b.n	234a <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    2344:	2600      	movs	r6, #0
		res = 0;
    2346:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2348:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    234a:	68a2      	ldr	r2, [r4, #8]
    234c:	2a00      	cmp	r2, #0
    234e:	f43f ae57 	beq.w	2000 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2352:	f04f 0a01 	mov.w	sl, #1
    2356:	e658      	b.n	200a <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2358:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    235a:	2900      	cmp	r1, #0
    235c:	f43f ae74 	beq.w	2048 <process_event+0x90>
	return node->next;
    2360:	f8d1 9000 	ldr.w	r9, [r1]
    2364:	2900      	cmp	r1, #0
    2366:	f43f ae6f 	beq.w	2048 <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    236a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    236e:	4643      	mov	r3, r8
    2370:	462a      	mov	r2, r5
    2372:	4620      	mov	r0, r4
    2374:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2376:	f1b9 0f00 	cmp.w	r9, #0
    237a:	d004      	beq.n	2386 <process_event+0x3ce>
    237c:	f8d9 3000 	ldr.w	r3, [r9]
    2380:	4649      	mov	r1, r9
    2382:	4699      	mov	r9, r3
    2384:	e7ee      	b.n	2364 <process_event+0x3ac>
    2386:	464b      	mov	r3, r9
    2388:	e7fa      	b.n	2380 <process_event+0x3c8>
    238a:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    238c:	4643      	mov	r3, r8
    238e:	462a      	mov	r2, r5
    2390:	4620      	mov	r0, r4
    2392:	6836      	ldr	r6, [r6, #0]
    2394:	f008 fcba 	bl	ad0c <notify_one>
    2398:	e656      	b.n	2048 <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    239a:	f01a 0f20 	tst.w	sl, #32
    239e:	f43f ae83 	beq.w	20a8 <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    23a2:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    23a6:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    23a8:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    23ac:	4620      	mov	r0, r4
    23ae:	f008 fc81 	bl	acb4 <process_recheck>
		if (evt == EVT_NOP) {
    23b2:	2800      	cmp	r0, #0
    23b4:	f43f ae78 	beq.w	20a8 <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    23b8:	3801      	subs	r0, #1
    23ba:	2804      	cmp	r0, #4
    23bc:	d8ab      	bhi.n	2316 <process_event+0x35e>
    23be:	a301      	add	r3, pc, #4	; (adr r3, 23c4 <process_event+0x40c>)
    23c0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    23c4:	00001fd1 	.word	0x00001fd1
    23c8:	00002317 	.word	0x00002317
    23cc:	00002183 	.word	0x00002183
    23d0:	000021fd 	.word	0x000021fd
    23d4:	000022a5 	.word	0x000022a5
    23d8:	0000caba 	.word	0x0000caba
    23dc:	0000c986 	.word	0x0000c986
    23e0:	0000ca2d 	.word	0x0000ca2d
    23e4:	0000ca5b 	.word	0x0000ca5b
    23e8:	0000ca7e 	.word	0x0000ca7e
    23ec:	0000e2d1 	.word	0x0000e2d1

000023f0 <transition_complete>:
{
    23f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23f2:	4604      	mov	r4, r0
    23f4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    23f6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    23fa:	f04f 0320 	mov.w	r3, #32
    23fe:	f3ef 8711 	mrs	r7, BASEPRI
    2402:	f383 8812 	msr	BASEPRI_MAX, r3
    2406:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    240a:	4630      	mov	r0, r6
    240c:	f005 fa94 	bl	7938 <z_spin_lock_valid>
    2410:	b968      	cbnz	r0, 242e <transition_complete+0x3e>
    2412:	4a0c      	ldr	r2, [pc, #48]	; (2444 <transition_complete+0x54>)
    2414:	490c      	ldr	r1, [pc, #48]	; (2448 <transition_complete+0x58>)
    2416:	480d      	ldr	r0, [pc, #52]	; (244c <transition_complete+0x5c>)
    2418:	238e      	movs	r3, #142	; 0x8e
    241a:	f008 fd8b 	bl	af34 <assert_print>
    241e:	480c      	ldr	r0, [pc, #48]	; (2450 <transition_complete+0x60>)
    2420:	4631      	mov	r1, r6
    2422:	f008 fd87 	bl	af34 <assert_print>
    2426:	4807      	ldr	r0, [pc, #28]	; (2444 <transition_complete+0x54>)
    2428:	218e      	movs	r1, #142	; 0x8e
    242a:	f008 fd7c 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    242e:	4630      	mov	r0, r6
    2430:	f005 faa0 	bl	7974 <z_spin_lock_set_owner>
	mgr->last_res = res;
    2434:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2436:	463a      	mov	r2, r7
    2438:	4620      	mov	r0, r4
    243a:	2101      	movs	r1, #1
}
    243c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    2440:	f7ff bdba 	b.w	1fb8 <process_event>
    2444:	0000cad0 	.word	0x0000cad0
    2448:	0000cb29 	.word	0x0000cb29
    244c:	0000c986 	.word	0x0000c986
    2450:	0000cb3e 	.word	0x0000cb3e

00002454 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2458:	4604      	mov	r4, r0
    245a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    245c:	f008 fc46 	bl	acec <validate_args>

	if (rv < 0) {
    2460:	1e05      	subs	r5, r0, #0
    2462:	db78      	blt.n	2556 <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2464:	f104 0914 	add.w	r9, r4, #20
    2468:	f04f 0320 	mov.w	r3, #32
    246c:	f3ef 8a11 	mrs	sl, BASEPRI
    2470:	f383 8812 	msr	BASEPRI_MAX, r3
    2474:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2478:	4648      	mov	r0, r9
    247a:	f005 fa5d 	bl	7938 <z_spin_lock_valid>
    247e:	b968      	cbnz	r0, 249c <onoff_request+0x48>
    2480:	4a39      	ldr	r2, [pc, #228]	; (2568 <onoff_request+0x114>)
    2482:	493a      	ldr	r1, [pc, #232]	; (256c <onoff_request+0x118>)
    2484:	483a      	ldr	r0, [pc, #232]	; (2570 <onoff_request+0x11c>)
    2486:	238e      	movs	r3, #142	; 0x8e
    2488:	f008 fd54 	bl	af34 <assert_print>
    248c:	4839      	ldr	r0, [pc, #228]	; (2574 <onoff_request+0x120>)
    248e:	4649      	mov	r1, r9
    2490:	f008 fd50 	bl	af34 <assert_print>
    2494:	4834      	ldr	r0, [pc, #208]	; (2568 <onoff_request+0x114>)
    2496:	218e      	movs	r1, #142	; 0x8e
    2498:	f008 fd45 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    249c:	4648      	mov	r0, r9
    249e:	f005 fa69 	bl	7974 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    24a2:	8be3      	ldrh	r3, [r4, #30]
    24a4:	8ba6      	ldrh	r6, [r4, #28]
    24a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    24aa:	4293      	cmp	r3, r2
    24ac:	f006 0607 	and.w	r6, r6, #7
    24b0:	d054      	beq.n	255c <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    24b2:	2e02      	cmp	r6, #2
    24b4:	d124      	bne.n	2500 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    24b6:	3301      	adds	r3, #1
    24b8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    24ba:	4635      	mov	r5, r6
		notify = true;
    24bc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24c0:	4648      	mov	r0, r9
    24c2:	f005 fa47 	bl	7954 <z_spin_unlock_valid>
    24c6:	b968      	cbnz	r0, 24e4 <onoff_request+0x90>
    24c8:	4a27      	ldr	r2, [pc, #156]	; (2568 <onoff_request+0x114>)
    24ca:	492b      	ldr	r1, [pc, #172]	; (2578 <onoff_request+0x124>)
    24cc:	4828      	ldr	r0, [pc, #160]	; (2570 <onoff_request+0x11c>)
    24ce:	23b9      	movs	r3, #185	; 0xb9
    24d0:	f008 fd30 	bl	af34 <assert_print>
    24d4:	4829      	ldr	r0, [pc, #164]	; (257c <onoff_request+0x128>)
    24d6:	4649      	mov	r1, r9
    24d8:	f008 fd2c 	bl	af34 <assert_print>
    24dc:	4822      	ldr	r0, [pc, #136]	; (2568 <onoff_request+0x114>)
    24de:	21b9      	movs	r1, #185	; 0xb9
    24e0:	f008 fd21 	bl	af26 <assert_post_action>
	__asm__ volatile(
    24e4:	f38a 8811 	msr	BASEPRI, sl
    24e8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    24ec:	f1b8 0f00 	cmp.w	r8, #0
    24f0:	d031      	beq.n	2556 <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    24f2:	2300      	movs	r3, #0
    24f4:	4632      	mov	r2, r6
    24f6:	4639      	mov	r1, r7
    24f8:	4620      	mov	r0, r4
    24fa:	f008 fc07 	bl	ad0c <notify_one>
    24fe:	e02a      	b.n	2556 <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    2500:	2e06      	cmp	r6, #6
    2502:	d80e      	bhi.n	2522 <onoff_request+0xce>
    2504:	e8df f006 	tbb	[pc, r6]
    2508:	0d0d1904 	.word	0x0d0d1904
    250c:	2d04      	.short	0x2d04
    250e:	04          	.byte	0x04
    250f:	00          	.byte	0x00
	parent->next = child;
    2510:	2300      	movs	r3, #0
    2512:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2514:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2516:	b9ab      	cbnz	r3, 2544 <onoff_request+0xf0>
	list->head = node;
    2518:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    251c:	b1ae      	cbz	r6, 254a <onoff_request+0xf6>
	rv = state;
    251e:	4635      	mov	r5, r6
    2520:	e00d      	b.n	253e <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2522:	4917      	ldr	r1, [pc, #92]	; (2580 <onoff_request+0x12c>)
    2524:	4812      	ldr	r0, [pc, #72]	; (2570 <onoff_request+0x11c>)
    2526:	4a17      	ldr	r2, [pc, #92]	; (2584 <onoff_request+0x130>)
    2528:	f240 13c9 	movw	r3, #457	; 0x1c9
    252c:	f008 fd02 	bl	af34 <assert_print>
    2530:	4814      	ldr	r0, [pc, #80]	; (2584 <onoff_request+0x130>)
    2532:	f240 11c9 	movw	r1, #457	; 0x1c9
    2536:	f008 fcf6 	bl	af26 <assert_post_action>
		rv = -EIO;
    253a:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    253e:	f04f 0800 	mov.w	r8, #0
    2542:	e7bd      	b.n	24c0 <onoff_request+0x6c>
	parent->next = child;
    2544:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2546:	6067      	str	r7, [r4, #4]
}
    2548:	e7e8      	b.n	251c <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    254a:	4652      	mov	r2, sl
    254c:	2102      	movs	r1, #2
    254e:	4620      	mov	r0, r4
    2550:	f7ff fd32 	bl	1fb8 <process_event>
    2554:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    2556:	4628      	mov	r0, r5
    2558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    255c:	f06f 050a 	mvn.w	r5, #10
    2560:	e7ed      	b.n	253e <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    2562:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2566:	e7ea      	b.n	253e <onoff_request+0xea>
    2568:	0000cad0 	.word	0x0000cad0
    256c:	0000cb29 	.word	0x0000cb29
    2570:	0000c986 	.word	0x0000c986
    2574:	0000cb3e 	.word	0x0000cb3e
    2578:	0000cafd 	.word	0x0000cafd
    257c:	0000cb14 	.word	0x0000cb14
    2580:	0000caba 	.word	0x0000caba
    2584:	0000ca2d 	.word	0x0000ca2d

00002588 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    2588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    258c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    2590:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    2594:	6806      	ldr	r6, [r0, #0]
{
    2596:	460f      	mov	r7, r1
    2598:	4614      	mov	r4, r2
	if (align != rew) {
    259a:	d011      	beq.n	25c0 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    259c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    25a0:	ea13 0f09 	tst.w	r3, r9
    25a4:	d113      	bne.n	25ce <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
    25a6:	427b      	negs	r3, r7
    25a8:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
    25aa:	2b04      	cmp	r3, #4
    25ac:	461a      	mov	r2, r3
    25ae:	464f      	mov	r7, r9
    25b0:	bf28      	it	cs
    25b2:	2204      	movcs	r2, #4
	rew = align & -align;
    25b4:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    25b6:	b9e4      	cbnz	r4, 25f2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
    25b8:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    25ba:	4628      	mov	r0, r5
    25bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    25c0:	2904      	cmp	r1, #4
    25c2:	d814      	bhi.n	25ee <sys_heap_aligned_alloc+0x66>
}
    25c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    25c8:	4611      	mov	r1, r2
    25ca:	f008 bc6c 	b.w	aea6 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    25ce:	4a2c      	ldr	r2, [pc, #176]	; (2680 <sys_heap_aligned_alloc+0xf8>)
    25d0:	492c      	ldr	r1, [pc, #176]	; (2684 <sys_heap_aligned_alloc+0xfc>)
    25d2:	482d      	ldr	r0, [pc, #180]	; (2688 <sys_heap_aligned_alloc+0x100>)
    25d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
    25d8:	f008 fcac 	bl	af34 <assert_print>
    25dc:	482b      	ldr	r0, [pc, #172]	; (268c <sys_heap_aligned_alloc+0x104>)
    25de:	f008 fca9 	bl	af34 <assert_print>
    25e2:	4827      	ldr	r0, [pc, #156]	; (2680 <sys_heap_aligned_alloc+0xf8>)
    25e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    25e8:	f008 fc9d 	bl	af26 <assert_post_action>
    25ec:	e7db      	b.n	25a6 <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
    25ee:	2204      	movs	r2, #4
    25f0:	e7e1      	b.n	25b6 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    25f2:	68b3      	ldr	r3, [r6, #8]
    25f4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    25f8:	d9de      	bls.n	25b8 <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    25fa:	f104 010b 	add.w	r1, r4, #11
    25fe:	4439      	add	r1, r7
    2600:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    2602:	08c9      	lsrs	r1, r1, #3
    2604:	4630      	mov	r0, r6
    2606:	f008 fbfd 	bl	ae04 <alloc_chunk>
	if (c0 == 0) {
    260a:	4680      	mov	r8, r0
    260c:	2800      	cmp	r0, #0
    260e:	d0d3      	beq.n	25b8 <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    2610:	f109 0504 	add.w	r5, r9, #4
    2614:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    2618:	1e7b      	subs	r3, r7, #1
    261a:	4435      	add	r5, r6
    261c:	441d      	add	r5, r3
    261e:	427f      	negs	r7, r7
    2620:	403d      	ands	r5, r7
    2622:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2626:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2628:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    262a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    262c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    262e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    2632:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    2634:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2638:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    263c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    2640:	d208      	bcs.n	2654 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    2642:	4601      	mov	r1, r0
    2644:	463a      	mov	r2, r7
    2646:	4630      	mov	r0, r6
    2648:	f008 fc13 	bl	ae72 <split_chunks>
		free_list_add(h, c0);
    264c:	4641      	mov	r1, r8
    264e:	4630      	mov	r0, r6
    2650:	f008 fb94 	bl	ad7c <free_list_add>
	return c + chunk_size(h, c);
    2654:	4639      	mov	r1, r7
    2656:	4630      	mov	r0, r6
    2658:	f008 fb8b 	bl	ad72 <chunk_size>
    265c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    265e:	4284      	cmp	r4, r0
    2660:	d207      	bcs.n	2672 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    2662:	4630      	mov	r0, r6
    2664:	4622      	mov	r2, r4
    2666:	f008 fc04 	bl	ae72 <split_chunks>
		free_list_add(h, c_end);
    266a:	4621      	mov	r1, r4
    266c:	4630      	mov	r0, r6
    266e:	f008 fb85 	bl	ad7c <free_list_add>
	void *cmem = &buf[c];
    2672:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2676:	8873      	ldrh	r3, [r6, #2]
    2678:	f043 0301 	orr.w	r3, r3, #1
    267c:	8073      	strh	r3, [r6, #2]
    267e:	e79c      	b.n	25ba <sys_heap_aligned_alloc+0x32>
    2680:	0000cb56 	.word	0x0000cb56
    2684:	0000cc22 	.word	0x0000cc22
    2688:	0000c986 	.word	0x0000c986
    268c:	0000cc3d 	.word	0x0000cc3d

00002690 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2690:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    2694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2698:	4604      	mov	r4, r0
    269a:	460e      	mov	r6, r1
    269c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    269e:	d36c      	bcc.n	277a <sys_heap_init+0xea>
    26a0:	493d      	ldr	r1, [pc, #244]	; (2798 <sys_heap_init+0x108>)
    26a2:	4a3e      	ldr	r2, [pc, #248]	; (279c <sys_heap_init+0x10c>)
    26a4:	483e      	ldr	r0, [pc, #248]	; (27a0 <sys_heap_init+0x110>)
    26a6:	f240 13e3 	movw	r3, #483	; 0x1e3
    26aa:	f008 fc43 	bl	af34 <assert_print>
    26ae:	483d      	ldr	r0, [pc, #244]	; (27a4 <sys_heap_init+0x114>)
    26b0:	f008 fc40 	bl	af34 <assert_print>
    26b4:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    26b8:	4838      	ldr	r0, [pc, #224]	; (279c <sys_heap_init+0x10c>)
    26ba:	f008 fc34 	bl	af26 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    26be:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    26c0:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    26c2:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    26c4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    26c8:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    26cc:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    26ce:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    26d0:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    26d4:	d80e      	bhi.n	26f4 <sys_heap_init+0x64>
    26d6:	4934      	ldr	r1, [pc, #208]	; (27a8 <sys_heap_init+0x118>)
    26d8:	4a30      	ldr	r2, [pc, #192]	; (279c <sys_heap_init+0x10c>)
    26da:	4831      	ldr	r0, [pc, #196]	; (27a0 <sys_heap_init+0x110>)
    26dc:	f240 13f3 	movw	r3, #499	; 0x1f3
    26e0:	f008 fc28 	bl	af34 <assert_print>
    26e4:	4831      	ldr	r0, [pc, #196]	; (27ac <sys_heap_init+0x11c>)
    26e6:	f008 fc25 	bl	af34 <assert_print>
    26ea:	482c      	ldr	r0, [pc, #176]	; (279c <sys_heap_init+0x10c>)
    26ec:	f240 11f3 	movw	r1, #499	; 0x1f3
    26f0:	f008 fc19 	bl	af26 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    26f4:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    26f6:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    26fa:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    26fe:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    2702:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2704:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    2706:	2300      	movs	r3, #0
    2708:	08e4      	lsrs	r4, r4, #3
    270a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    270c:	1c63      	adds	r3, r4, #1
    270e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    2710:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2712:	d90e      	bls.n	2732 <sys_heap_init+0xa2>
    2714:	4926      	ldr	r1, [pc, #152]	; (27b0 <sys_heap_init+0x120>)
    2716:	4a21      	ldr	r2, [pc, #132]	; (279c <sys_heap_init+0x10c>)
    2718:	4821      	ldr	r0, [pc, #132]	; (27a0 <sys_heap_init+0x110>)
    271a:	f44f 7301 	mov.w	r3, #516	; 0x204
    271e:	f008 fc09 	bl	af34 <assert_print>
    2722:	4822      	ldr	r0, [pc, #136]	; (27ac <sys_heap_init+0x11c>)
    2724:	f008 fc06 	bl	af34 <assert_print>
    2728:	481c      	ldr	r0, [pc, #112]	; (279c <sys_heap_init+0x10c>)
    272a:	f44f 7101 	mov.w	r1, #516	; 0x204
    272e:	f008 fbfa 	bl	af26 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    2732:	f105 030c 	add.w	r3, r5, #12
    2736:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    273a:	2200      	movs	r2, #0
    273c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    2740:	4543      	cmp	r3, r8
    2742:	d1fb      	bne.n	273c <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2744:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2746:	f043 0301 	orr.w	r3, r3, #1
    274a:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    274c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2750:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2752:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    2754:	802a      	strh	r2, [r5, #0]
    2756:	8048      	strh	r0, [r1, #2]
    2758:	19a9      	adds	r1, r5, r6
    275a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    275e:	804a      	strh	r2, [r1, #2]
    2760:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    2762:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2766:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2768:	885a      	ldrh	r2, [r3, #2]
    276a:	f042 0201 	orr.w	r2, r2, #1
    276e:	4628      	mov	r0, r5
    2770:	805a      	strh	r2, [r3, #2]
}
    2772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    2776:	f008 bb01 	b.w	ad7c <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    277a:	2a04      	cmp	r2, #4
    277c:	d89f      	bhi.n	26be <sys_heap_init+0x2e>
    277e:	490d      	ldr	r1, [pc, #52]	; (27b4 <sys_heap_init+0x124>)
    2780:	4a06      	ldr	r2, [pc, #24]	; (279c <sys_heap_init+0x10c>)
    2782:	4807      	ldr	r0, [pc, #28]	; (27a0 <sys_heap_init+0x110>)
    2784:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2788:	f008 fbd4 	bl	af34 <assert_print>
    278c:	4807      	ldr	r0, [pc, #28]	; (27ac <sys_heap_init+0x11c>)
    278e:	f008 fbd1 	bl	af34 <assert_print>
    2792:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2796:	e78f      	b.n	26b8 <sys_heap_init+0x28>
    2798:	0000cc5a 	.word	0x0000cc5a
    279c:	0000cb56 	.word	0x0000cb56
    27a0:	0000c986 	.word	0x0000c986
    27a4:	0000cc70 	.word	0x0000cc70
    27a8:	0000ccc1 	.word	0x0000ccc1
    27ac:	0000cca8 	.word	0x0000cca8
    27b0:	0000ccea 	.word	0x0000ccea
    27b4:	0000cc87 	.word	0x0000cc87

000027b8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    27b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    27ba:	4e09      	ldr	r6, [pc, #36]	; (27e0 <extract_decimal+0x28>)
    27bc:	6801      	ldr	r1, [r0, #0]
{
    27be:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    27c0:	270a      	movs	r7, #10
	size_t val = 0;
    27c2:	2000      	movs	r0, #0
    27c4:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    27c6:	3101      	adds	r1, #1
    27c8:	781c      	ldrb	r4, [r3, #0]
    27ca:	5d35      	ldrb	r5, [r6, r4]
    27cc:	076d      	lsls	r5, r5, #29
    27ce:	d401      	bmi.n	27d4 <extract_decimal+0x1c>
	}
	*str = sp;
    27d0:	6013      	str	r3, [r2, #0]
	return val;
}
    27d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    27d4:	fb07 4300 	mla	r3, r7, r0, r4
    27d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    27dc:	e7f2      	b.n	27c4 <extract_decimal+0xc>
    27de:	bf00      	nop
    27e0:	0000e3c9 	.word	0x0000e3c9

000027e4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    27e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27e8:	4615      	mov	r5, r2
    27ea:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    27ec:	78d3      	ldrb	r3, [r2, #3]
    27ee:	4a22      	ldr	r2, [pc, #136]	; (2878 <encode_uint+0x94>)
    27f0:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    27f4:	2b6f      	cmp	r3, #111	; 0x6f
{
    27f6:	4680      	mov	r8, r0
    27f8:	460f      	mov	r7, r1
    27fa:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    27fe:	d029      	beq.n	2854 <encode_uint+0x70>
    2800:	d824      	bhi.n	284c <encode_uint+0x68>
		return 10;
    2802:	2b58      	cmp	r3, #88	; 0x58
    2804:	bf0c      	ite	eq
    2806:	2610      	moveq	r6, #16
    2808:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    280a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    280e:	4632      	mov	r2, r6
    2810:	2300      	movs	r3, #0
    2812:	4640      	mov	r0, r8
    2814:	4639      	mov	r1, r7
    2816:	f7fe fa0f 	bl	c38 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    281a:	2a09      	cmp	r2, #9
    281c:	b2d4      	uxtb	r4, r2
    281e:	d81e      	bhi.n	285e <encode_uint+0x7a>
    2820:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    2822:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2824:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    2826:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    282a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    282e:	d301      	bcc.n	2834 <encode_uint+0x50>
    2830:	45d1      	cmp	r9, sl
    2832:	d811      	bhi.n	2858 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2834:	782b      	ldrb	r3, [r5, #0]
    2836:	069b      	lsls	r3, r3, #26
    2838:	d505      	bpl.n	2846 <encode_uint+0x62>
		if (radix == 8) {
    283a:	2e08      	cmp	r6, #8
    283c:	d115      	bne.n	286a <encode_uint+0x86>
			conv->altform_0 = true;
    283e:	78ab      	ldrb	r3, [r5, #2]
    2840:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2844:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    2846:	4648      	mov	r0, r9
    2848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    284c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    2850:	2b70      	cmp	r3, #112	; 0x70
    2852:	e7d7      	b.n	2804 <encode_uint+0x20>
	switch (specifier) {
    2854:	2608      	movs	r6, #8
    2856:	e7d8      	b.n	280a <encode_uint+0x26>
		value /= radix;
    2858:	4680      	mov	r8, r0
    285a:	460f      	mov	r7, r1
    285c:	e7d7      	b.n	280e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    285e:	f1bb 0f01 	cmp.w	fp, #1
    2862:	bf0c      	ite	eq
    2864:	3437      	addeq	r4, #55	; 0x37
    2866:	3457      	addne	r4, #87	; 0x57
    2868:	e7db      	b.n	2822 <encode_uint+0x3e>
		} else if (radix == 16) {
    286a:	2e10      	cmp	r6, #16
    286c:	d1eb      	bne.n	2846 <encode_uint+0x62>
			conv->altform_0c = true;
    286e:	78ab      	ldrb	r3, [r5, #2]
    2870:	f043 0310 	orr.w	r3, r3, #16
    2874:	e7e6      	b.n	2844 <encode_uint+0x60>
    2876:	bf00      	nop
    2878:	0000e3c9 	.word	0x0000e3c9

0000287c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2880:	b097      	sub	sp, #92	; 0x5c
    2882:	4682      	mov	sl, r0
    2884:	9103      	str	r1, [sp, #12]
    2886:	4617      	mov	r7, r2
    2888:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    288a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    288c:	7838      	ldrb	r0, [r7, #0]
    288e:	b908      	cbnz	r0, 2894 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2890:	4628      	mov	r0, r5
    2892:	e34a      	b.n	2f2a <cbvprintf+0x6ae>
			OUTC(*fp++);
    2894:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2896:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2898:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    289a:	d006      	beq.n	28aa <cbvprintf+0x2e>
			OUTC('%');
    289c:	9903      	ldr	r1, [sp, #12]
    289e:	47d0      	blx	sl
    28a0:	2800      	cmp	r0, #0
    28a2:	f2c0 8342 	blt.w	2f2a <cbvprintf+0x6ae>
    28a6:	3501      	adds	r5, #1
		if (bps == NULL) {
    28a8:	e1f9      	b.n	2c9e <cbvprintf+0x422>
		} state = {
    28aa:	2218      	movs	r2, #24
    28ac:	2100      	movs	r1, #0
    28ae:	a810      	add	r0, sp, #64	; 0x40
    28b0:	f009 f9f1 	bl	bc96 <memset>
	if (*sp == '%') {
    28b4:	787b      	ldrb	r3, [r7, #1]
    28b6:	2b25      	cmp	r3, #37	; 0x25
    28b8:	f000 80a3 	beq.w	2a02 <cbvprintf+0x186>
    28bc:	2300      	movs	r3, #0
    28be:	1c79      	adds	r1, r7, #1
    28c0:	4698      	mov	r8, r3
    28c2:	469e      	mov	lr, r3
    28c4:	469c      	mov	ip, r3
    28c6:	4618      	mov	r0, r3
    28c8:	460e      	mov	r6, r1
		switch (*sp) {
    28ca:	f811 2b01 	ldrb.w	r2, [r1], #1
    28ce:	2a2b      	cmp	r2, #43	; 0x2b
    28d0:	f000 80c6 	beq.w	2a60 <cbvprintf+0x1e4>
    28d4:	f200 80bd 	bhi.w	2a52 <cbvprintf+0x1d6>
    28d8:	2a20      	cmp	r2, #32
    28da:	f000 80c4 	beq.w	2a66 <cbvprintf+0x1ea>
    28de:	2a23      	cmp	r2, #35	; 0x23
    28e0:	f000 80c4 	beq.w	2a6c <cbvprintf+0x1f0>
    28e4:	b12b      	cbz	r3, 28f2 <cbvprintf+0x76>
    28e6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    28ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    28f2:	f1b8 0f00 	cmp.w	r8, #0
    28f6:	d005      	beq.n	2904 <cbvprintf+0x88>
    28f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    28fc:	f043 0320 	orr.w	r3, r3, #32
    2900:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2904:	f1be 0f00 	cmp.w	lr, #0
    2908:	d005      	beq.n	2916 <cbvprintf+0x9a>
    290a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    290e:	f043 0310 	orr.w	r3, r3, #16
    2912:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2916:	f1bc 0f00 	cmp.w	ip, #0
    291a:	d005      	beq.n	2928 <cbvprintf+0xac>
    291c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2920:	f043 0308 	orr.w	r3, r3, #8
    2924:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2928:	b128      	cbz	r0, 2936 <cbvprintf+0xba>
    292a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    292e:	f043 0304 	orr.w	r3, r3, #4
    2932:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2936:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    293a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    293e:	2944      	cmp	r1, #68	; 0x44
    2940:	d103      	bne.n	294a <cbvprintf+0xce>
		conv->flag_zero = false;
    2942:	f36f 1386 	bfc	r3, #6, #1
    2946:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    294a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    294e:	9609      	str	r6, [sp, #36]	; 0x24
    2950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    2954:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2956:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    295a:	f040 808c 	bne.w	2a76 <cbvprintf+0x1fa>
		conv->width_star = true;
    295e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2962:	f043 0301 	orr.w	r3, r3, #1
    2966:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    296a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    296c:	781a      	ldrb	r2, [r3, #0]
    296e:	2a2e      	cmp	r2, #46	; 0x2e
    2970:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2974:	bf0c      	ite	eq
    2976:	2101      	moveq	r1, #1
    2978:	2100      	movne	r1, #0
    297a:	f361 0241 	bfi	r2, r1, #1, #1
    297e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    2982:	d10c      	bne.n	299e <cbvprintf+0x122>
	++sp;
    2984:	1c5a      	adds	r2, r3, #1
    2986:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    2988:	785a      	ldrb	r2, [r3, #1]
    298a:	2a2a      	cmp	r2, #42	; 0x2a
    298c:	f040 8083 	bne.w	2a96 <cbvprintf+0x21a>
		conv->prec_star = true;
    2990:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2994:	f042 0204 	orr.w	r2, r2, #4
    2998:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    299c:	3302      	adds	r3, #2
	switch (*sp) {
    299e:	781a      	ldrb	r2, [r3, #0]
    29a0:	2a6c      	cmp	r2, #108	; 0x6c
    29a2:	f000 80a4 	beq.w	2aee <cbvprintf+0x272>
    29a6:	f200 8086 	bhi.w	2ab6 <cbvprintf+0x23a>
    29aa:	2a68      	cmp	r2, #104	; 0x68
    29ac:	f000 808c 	beq.w	2ac8 <cbvprintf+0x24c>
    29b0:	2a6a      	cmp	r2, #106	; 0x6a
    29b2:	f000 80a5 	beq.w	2b00 <cbvprintf+0x284>
    29b6:	2a4c      	cmp	r2, #76	; 0x4c
    29b8:	f000 80aa 	beq.w	2b10 <cbvprintf+0x294>
	conv->specifier = *sp++;
    29bc:	461a      	mov	r2, r3
    29be:	f812 3b01 	ldrb.w	r3, [r2], #1
    29c2:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    29c4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    29c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    29ca:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    29ce:	f200 8117 	bhi.w	2c00 <cbvprintf+0x384>
    29d2:	2b6d      	cmp	r3, #109	; 0x6d
    29d4:	f200 80a9 	bhi.w	2b2a <cbvprintf+0x2ae>
    29d8:	2b69      	cmp	r3, #105	; 0x69
    29da:	f200 8111 	bhi.w	2c00 <cbvprintf+0x384>
    29de:	2b57      	cmp	r3, #87	; 0x57
    29e0:	f200 80be 	bhi.w	2b60 <cbvprintf+0x2e4>
    29e4:	2b41      	cmp	r3, #65	; 0x41
    29e6:	d003      	beq.n	29f0 <cbvprintf+0x174>
    29e8:	3b45      	subs	r3, #69	; 0x45
    29ea:	2b02      	cmp	r3, #2
    29ec:	f200 8108 	bhi.w	2c00 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    29f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    29f4:	2204      	movs	r2, #4
    29f6:	f362 0302 	bfi	r3, r2, #0, #3
    29fa:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    29fe:	2301      	movs	r3, #1
			break;
    2a00:	e0ca      	b.n	2b98 <cbvprintf+0x31c>
		conv->specifier = *sp++;
    2a02:	1cba      	adds	r2, r7, #2
    2a04:	9204      	str	r2, [sp, #16]
    2a06:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    2a0a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2a0e:	07da      	lsls	r2, r3, #31
    2a10:	f140 80fd 	bpl.w	2c0e <cbvprintf+0x392>
			width = va_arg(ap, int);
    2a14:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    2a18:	f1b9 0f00 	cmp.w	r9, #0
    2a1c:	da07      	bge.n	2a2e <cbvprintf+0x1b2>
				conv->flag_dash = true;
    2a1e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2a22:	f042 0204 	orr.w	r2, r2, #4
    2a26:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2a2a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    2a2e:	075e      	lsls	r6, r3, #29
    2a30:	f140 80f6 	bpl.w	2c20 <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
    2a34:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    2a38:	f1bb 0f00 	cmp.w	fp, #0
    2a3c:	f280 80f5 	bge.w	2c2a <cbvprintf+0x3ae>
				conv->prec_present = false;
    2a40:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2a44:	f36f 0341 	bfc	r3, #1, #1
    2a48:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    2a4c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    2a50:	e0eb      	b.n	2c2a <cbvprintf+0x3ae>
		switch (*sp) {
    2a52:	2a2d      	cmp	r2, #45	; 0x2d
    2a54:	d00d      	beq.n	2a72 <cbvprintf+0x1f6>
    2a56:	2a30      	cmp	r2, #48	; 0x30
    2a58:	f47f af44 	bne.w	28e4 <cbvprintf+0x68>
    2a5c:	2301      	movs	r3, #1
	} while (loop);
    2a5e:	e733      	b.n	28c8 <cbvprintf+0x4c>
		switch (*sp) {
    2a60:	f04f 0c01 	mov.w	ip, #1
    2a64:	e730      	b.n	28c8 <cbvprintf+0x4c>
    2a66:	f04f 0e01 	mov.w	lr, #1
    2a6a:	e72d      	b.n	28c8 <cbvprintf+0x4c>
    2a6c:	f04f 0801 	mov.w	r8, #1
    2a70:	e72a      	b.n	28c8 <cbvprintf+0x4c>
    2a72:	2001      	movs	r0, #1
    2a74:	e728      	b.n	28c8 <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
    2a76:	a809      	add	r0, sp, #36	; 0x24
    2a78:	f7ff fe9e 	bl	27b8 <extract_decimal>
	if (sp != wp) {
    2a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a7e:	42b3      	cmp	r3, r6
    2a80:	f43f af74 	beq.w	296c <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    2a84:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    2a88:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    2a8a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    2a8c:	f360 0241 	bfi	r2, r0, #1, #1
    2a90:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2a94:	e76a      	b.n	296c <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
    2a96:	a809      	add	r0, sp, #36	; 0x24
    2a98:	f7ff fe8e 	bl	27b8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2a9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    2aa0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    2aa2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2aa6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2aaa:	f362 0341 	bfi	r3, r2, #1, #1
    2aae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    2ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ab4:	e773      	b.n	299e <cbvprintf+0x122>
	switch (*sp) {
    2ab6:	2a74      	cmp	r2, #116	; 0x74
    2ab8:	d026      	beq.n	2b08 <cbvprintf+0x28c>
    2aba:	2a7a      	cmp	r2, #122	; 0x7a
    2abc:	f47f af7e 	bne.w	29bc <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
    2ac0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2ac4:	2106      	movs	r1, #6
    2ac6:	e00c      	b.n	2ae2 <cbvprintf+0x266>
		if (*++sp == 'h') {
    2ac8:	785a      	ldrb	r2, [r3, #1]
    2aca:	2a68      	cmp	r2, #104	; 0x68
    2acc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2ad0:	d106      	bne.n	2ae0 <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
    2ad2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2ad4:	f361 02c6 	bfi	r2, r1, #3, #4
    2ad8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    2adc:	3302      	adds	r3, #2
    2ade:	e76d      	b.n	29bc <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
    2ae0:	2102      	movs	r1, #2
    2ae2:	f361 02c6 	bfi	r2, r1, #3, #4
    2ae6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    2aea:	3301      	adds	r3, #1
    2aec:	e766      	b.n	29bc <cbvprintf+0x140>
		if (*++sp == 'l') {
    2aee:	785a      	ldrb	r2, [r3, #1]
    2af0:	2a6c      	cmp	r2, #108	; 0x6c
    2af2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2af6:	d101      	bne.n	2afc <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
    2af8:	2104      	movs	r1, #4
    2afa:	e7eb      	b.n	2ad4 <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
    2afc:	2103      	movs	r1, #3
    2afe:	e7f0      	b.n	2ae2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
    2b00:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2b04:	2105      	movs	r1, #5
    2b06:	e7ec      	b.n	2ae2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
    2b08:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2b0c:	2107      	movs	r1, #7
    2b0e:	e7e8      	b.n	2ae2 <cbvprintf+0x266>
		conv->unsupported = true;
    2b10:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2b14:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2b18:	f022 0202 	bic.w	r2, r2, #2
    2b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2b20:	f042 0202 	orr.w	r2, r2, #2
    2b24:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2b28:	e7df      	b.n	2aea <cbvprintf+0x26e>
	switch (conv->specifier) {
    2b2a:	3b6e      	subs	r3, #110	; 0x6e
    2b2c:	b2d9      	uxtb	r1, r3
    2b2e:	2301      	movs	r3, #1
    2b30:	408b      	lsls	r3, r1
    2b32:	f240 4182 	movw	r1, #1154	; 0x482
    2b36:	420b      	tst	r3, r1
    2b38:	d138      	bne.n	2bac <cbvprintf+0x330>
    2b3a:	f013 0f24 	tst.w	r3, #36	; 0x24
    2b3e:	d152      	bne.n	2be6 <cbvprintf+0x36a>
    2b40:	07d8      	lsls	r0, r3, #31
    2b42:	d55d      	bpl.n	2c00 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    2b44:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2b48:	2103      	movs	r1, #3
    2b4a:	f361 0302 	bfi	r3, r1, #0, #3
    2b4e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b52:	f002 0378 	and.w	r3, r2, #120	; 0x78
    2b56:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    2b5a:	424b      	negs	r3, r1
    2b5c:	414b      	adcs	r3, r1
    2b5e:	e01b      	b.n	2b98 <cbvprintf+0x31c>
	switch (conv->specifier) {
    2b60:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    2b64:	b2c9      	uxtb	r1, r1
    2b66:	2001      	movs	r0, #1
    2b68:	fa00 f101 	lsl.w	r1, r0, r1
    2b6c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2b70:	f47f af3e 	bne.w	29f0 <cbvprintf+0x174>
    2b74:	f640 0601 	movw	r6, #2049	; 0x801
    2b78:	4231      	tst	r1, r6
    2b7a:	d11d      	bne.n	2bb8 <cbvprintf+0x33c>
    2b7c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2b80:	d03e      	beq.n	2c00 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    2b82:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2b86:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b8a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2b8e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    2b90:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2b94:	d034      	beq.n	2c00 <cbvprintf+0x384>
	bool unsupported = false;
    2b96:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    2b98:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2b9c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2ba0:	430b      	orrs	r3, r1
    2ba2:	f363 0241 	bfi	r2, r3, #1, #1
    2ba6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2baa:	e72e      	b.n	2a0a <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    2bac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2bb0:	2102      	movs	r1, #2
    2bb2:	f361 0302 	bfi	r3, r1, #0, #3
    2bb6:	e7e8      	b.n	2b8a <cbvprintf+0x30e>
    2bb8:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2bbc:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    2bbe:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2bc2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2bc6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2bc8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    2bcc:	bf02      	ittt	eq
    2bce:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    2bd2:	f041 0101 	orreq.w	r1, r1, #1
    2bd6:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2bda:	2b63      	cmp	r3, #99	; 0x63
    2bdc:	d1db      	bne.n	2b96 <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2bde:	1e13      	subs	r3, r2, #0
    2be0:	bf18      	it	ne
    2be2:	2301      	movne	r3, #1
    2be4:	e7d8      	b.n	2b98 <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    2be6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2bea:	2103      	movs	r1, #3
    2bec:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    2bf0:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2bf4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    2bf8:	bf14      	ite	ne
    2bfa:	2301      	movne	r3, #1
    2bfc:	2300      	moveq	r3, #0
    2bfe:	e7cb      	b.n	2b98 <cbvprintf+0x31c>
		conv->invalid = true;
    2c00:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2c04:	f043 0301 	orr.w	r3, r3, #1
    2c08:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    2c0c:	e7c3      	b.n	2b96 <cbvprintf+0x31a>
		} else if (conv->width_present) {
    2c0e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2c12:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2c14:	bfb4      	ite	lt
    2c16:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
    2c1a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    2c1e:	e706      	b.n	2a2e <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
    2c20:	0798      	lsls	r0, r3, #30
    2c22:	f57f af13 	bpl.w	2a4c <cbvprintf+0x1d0>
			precision = conv->prec_value;
    2c26:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    2c2a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    2c2e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2c30:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    2c34:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    2c38:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2c3c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2c3e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2c42:	d133      	bne.n	2cac <cbvprintf+0x430>
			switch (length_mod) {
    2c44:	1ecb      	subs	r3, r1, #3
    2c46:	2b04      	cmp	r3, #4
    2c48:	d804      	bhi.n	2c54 <cbvprintf+0x3d8>
    2c4a:	e8df f003 	tbb	[pc, r3]
    2c4e:	4610      	.short	0x4610
    2c50:	1046      	.short	0x1046
    2c52:	10          	.byte	0x10
    2c53:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2c54:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2c56:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2c58:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2c5c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2c60:	d10b      	bne.n	2c7a <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
    2c62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2c66:	9310      	str	r3, [sp, #64]	; 0x40
    2c68:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    2c6a:	9311      	str	r3, [sp, #68]	; 0x44
    2c6c:	e007      	b.n	2c7e <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2c6e:	f854 3b04 	ldr.w	r3, [r4], #4
    2c72:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    2c74:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    2c78:	e002      	b.n	2c80 <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
    2c7a:	2902      	cmp	r1, #2
    2c7c:	d011      	beq.n	2ca2 <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
    2c7e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2c80:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2c84:	f013 0603 	ands.w	r6, r3, #3
    2c88:	d047      	beq.n	2d1a <cbvprintf+0x49e>
			OUTS(sp, fp);
    2c8a:	9b04      	ldr	r3, [sp, #16]
    2c8c:	9903      	ldr	r1, [sp, #12]
    2c8e:	463a      	mov	r2, r7
    2c90:	4650      	mov	r0, sl
    2c92:	f008 f931 	bl	aef8 <outs>
    2c96:	2800      	cmp	r0, #0
    2c98:	f2c0 8147 	blt.w	2f2a <cbvprintf+0x6ae>
    2c9c:	4405      	add	r5, r0
			continue;
    2c9e:	9f04      	ldr	r7, [sp, #16]
    2ca0:	e5f4      	b.n	288c <cbvprintf+0x10>
				value->sint = (short)value->sint;
    2ca2:	b21a      	sxth	r2, r3
    2ca4:	9210      	str	r2, [sp, #64]	; 0x40
    2ca6:	f343 33c0 	sbfx	r3, r3, #15, #1
    2caa:	e7de      	b.n	2c6a <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2cac:	2b02      	cmp	r3, #2
    2cae:	d124      	bne.n	2cfa <cbvprintf+0x47e>
			switch (length_mod) {
    2cb0:	1ecb      	subs	r3, r1, #3
    2cb2:	2b04      	cmp	r3, #4
    2cb4:	d804      	bhi.n	2cc0 <cbvprintf+0x444>
    2cb6:	e8df f003 	tbb	[pc, r3]
    2cba:	1018      	.short	0x1018
    2cbc:	1810      	.short	0x1810
    2cbe:	18          	.byte	0x18
    2cbf:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2cc0:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2cc2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2cc6:	f04f 0200 	mov.w	r2, #0
    2cca:	d014      	beq.n	2cf6 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
    2ccc:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    2cce:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2cd2:	d1d5      	bne.n	2c80 <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
    2cd4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2cd6:	9310      	str	r3, [sp, #64]	; 0x40
    2cd8:	e7d2      	b.n	2c80 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
    2cda:	3407      	adds	r4, #7
    2cdc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2ce0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2ce4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2ce8:	e7ca      	b.n	2c80 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
    2cea:	f854 3b04 	ldr.w	r3, [r4], #4
    2cee:	9310      	str	r3, [sp, #64]	; 0x40
    2cf0:	2300      	movs	r3, #0
    2cf2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2cf4:	e7c4      	b.n	2c80 <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
    2cf6:	b2db      	uxtb	r3, r3
    2cf8:	e7bc      	b.n	2c74 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
    2cfa:	2b04      	cmp	r3, #4
    2cfc:	d108      	bne.n	2d10 <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
    2cfe:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2d00:	f024 0407 	bic.w	r4, r4, #7
    2d04:	e9d4 2300 	ldrd	r2, r3, [r4]
    2d08:	3408      	adds	r4, #8
    2d0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2d0e:	e7b7      	b.n	2c80 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2d10:	2b03      	cmp	r3, #3
    2d12:	d1b5      	bne.n	2c80 <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
    2d14:	f854 3b04 	ldr.w	r3, [r4], #4
    2d18:	e7dd      	b.n	2cd6 <cbvprintf+0x45a>
		switch (conv->specifier) {
    2d1a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2d1e:	2878      	cmp	r0, #120	; 0x78
    2d20:	d8bd      	bhi.n	2c9e <cbvprintf+0x422>
    2d22:	2862      	cmp	r0, #98	; 0x62
    2d24:	d81c      	bhi.n	2d60 <cbvprintf+0x4e4>
    2d26:	2825      	cmp	r0, #37	; 0x25
    2d28:	f43f adb8 	beq.w	289c <cbvprintf+0x20>
    2d2c:	2858      	cmp	r0, #88	; 0x58
    2d2e:	d1b6      	bne.n	2c9e <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2d30:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2d34:	9300      	str	r3, [sp, #0]
    2d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2d3a:	ab0a      	add	r3, sp, #40	; 0x28
    2d3c:	aa12      	add	r2, sp, #72	; 0x48
    2d3e:	f7ff fd51 	bl	27e4 <encode_uint>
			if (precision >= 0) {
    2d42:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    2d46:	4607      	mov	r7, r0
			if (precision >= 0) {
    2d48:	f280 8098 	bge.w	2e7c <cbvprintf+0x600>
		if (bps == NULL) {
    2d4c:	2f00      	cmp	r7, #0
    2d4e:	d0a6      	beq.n	2c9e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    2d50:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    2d54:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    2d58:	2e00      	cmp	r6, #0
    2d5a:	d04e      	beq.n	2dfa <cbvprintf+0x57e>
			nj_len += 1U;
    2d5c:	3001      	adds	r0, #1
    2d5e:	e04c      	b.n	2dfa <cbvprintf+0x57e>
		switch (conv->specifier) {
    2d60:	3863      	subs	r0, #99	; 0x63
    2d62:	2815      	cmp	r0, #21
    2d64:	d89b      	bhi.n	2c9e <cbvprintf+0x422>
    2d66:	a201      	add	r2, pc, #4	; (adr r2, 2d6c <cbvprintf+0x4f0>)
    2d68:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2d6c:	00002deb 	.word	0x00002deb
    2d70:	00002e51 	.word	0x00002e51
    2d74:	00002c9f 	.word	0x00002c9f
    2d78:	00002c9f 	.word	0x00002c9f
    2d7c:	00002c9f 	.word	0x00002c9f
    2d80:	00002c9f 	.word	0x00002c9f
    2d84:	00002e51 	.word	0x00002e51
    2d88:	00002c9f 	.word	0x00002c9f
    2d8c:	00002c9f 	.word	0x00002c9f
    2d90:	00002c9f 	.word	0x00002c9f
    2d94:	00002c9f 	.word	0x00002c9f
    2d98:	00002edb 	.word	0x00002edb
    2d9c:	00002e77 	.word	0x00002e77
    2da0:	00002e9d 	.word	0x00002e9d
    2da4:	00002c9f 	.word	0x00002c9f
    2da8:	00002c9f 	.word	0x00002c9f
    2dac:	00002dc5 	.word	0x00002dc5
    2db0:	00002c9f 	.word	0x00002c9f
    2db4:	00002e77 	.word	0x00002e77
    2db8:	00002c9f 	.word	0x00002c9f
    2dbc:	00002c9f 	.word	0x00002c9f
    2dc0:	00002e77 	.word	0x00002e77
			if (precision >= 0) {
    2dc4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    2dc8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    2dca:	db0a      	blt.n	2de2 <cbvprintf+0x566>
				len = strnlen(bps, precision);
    2dcc:	4659      	mov	r1, fp
    2dce:	4638      	mov	r0, r7
    2dd0:	f008 ff71 	bl	bcb6 <strnlen>
			bpe = bps + len;
    2dd4:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    2dd8:	2f00      	cmp	r7, #0
    2dda:	f43f af60 	beq.w	2c9e <cbvprintf+0x422>
		char sign = 0;
    2dde:	2600      	movs	r6, #0
    2de0:	e00b      	b.n	2dfa <cbvprintf+0x57e>
				len = strlen(bps);
    2de2:	4638      	mov	r0, r7
    2de4:	f7fe f924 	bl	1030 <strlen>
    2de8:	e7f4      	b.n	2dd4 <cbvprintf+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2dea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2dec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2df0:	2600      	movs	r6, #0
			bpe = buf + 1;
    2df2:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    2df6:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    2df8:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    2dfa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2dfe:	f013 0210 	ands.w	r2, r3, #16
    2e02:	9205      	str	r2, [sp, #20]
    2e04:	f000 8084 	beq.w	2f10 <cbvprintf+0x694>
			nj_len += 2U;
    2e08:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2e0a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    2e0c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    2e10:	bf48      	it	mi
    2e12:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2e14:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    2e16:	bf48      	it	mi
    2e18:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    2e1a:	f1b9 0f00 	cmp.w	r9, #0
    2e1e:	f340 8091 	ble.w	2f44 <cbvprintf+0x6c8>
			if (!conv->flag_dash) {
    2e22:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2e26:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    2e2a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2e2e:	0750      	lsls	r0, r2, #29
    2e30:	9306      	str	r3, [sp, #24]
    2e32:	f100 8087 	bmi.w	2f44 <cbvprintf+0x6c8>
				if (conv->flag_zero) {
    2e36:	0651      	lsls	r1, r2, #25
    2e38:	d57a      	bpl.n	2f30 <cbvprintf+0x6b4>
					if (sign != 0) {
    2e3a:	b13e      	cbz	r6, 2e4c <cbvprintf+0x5d0>
						OUTC(sign);
    2e3c:	9903      	ldr	r1, [sp, #12]
    2e3e:	4630      	mov	r0, r6
    2e40:	47d0      	blx	sl
    2e42:	2800      	cmp	r0, #0
    2e44:	db71      	blt.n	2f2a <cbvprintf+0x6ae>
    2e46:	9b06      	ldr	r3, [sp, #24]
    2e48:	3501      	adds	r5, #1
    2e4a:	461e      	mov	r6, r3
					pad = '0';
    2e4c:	2230      	movs	r2, #48	; 0x30
    2e4e:	e070      	b.n	2f32 <cbvprintf+0x6b6>
			if (conv->flag_plus) {
    2e50:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    2e52:	bf5c      	itt	pl
    2e54:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    2e58:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    2e5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    2e5e:	bf48      	it	mi
    2e60:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    2e62:	2b00      	cmp	r3, #0
    2e64:	f6bf af64 	bge.w	2d30 <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
    2e68:	4252      	negs	r2, r2
    2e6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2e6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2e72:	262d      	movs	r6, #45	; 0x2d
    2e74:	e75c      	b.n	2d30 <cbvprintf+0x4b4>
		switch (conv->specifier) {
    2e76:	2600      	movs	r6, #0
    2e78:	e75a      	b.n	2d30 <cbvprintf+0x4b4>
		char sign = 0;
    2e7a:	2600      	movs	r6, #0
				conv->flag_zero = false;
    2e7c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2e80:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2e84:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2e86:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2e8a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    2e8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2e90:	f67f af5c 	bls.w	2d4c <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
    2e94:	ebab 0303 	sub.w	r3, fp, r3
    2e98:	9313      	str	r3, [sp, #76]	; 0x4c
    2e9a:	e757      	b.n	2d4c <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    2e9c:	9810      	ldr	r0, [sp, #64]	; 0x40
    2e9e:	b380      	cbz	r0, 2f02 <cbvprintf+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2ea0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    2ea4:	ab0a      	add	r3, sp, #40	; 0x28
    2ea6:	f8cd 8000 	str.w	r8, [sp]
    2eaa:	aa12      	add	r2, sp, #72	; 0x48
    2eac:	2100      	movs	r1, #0
    2eae:	f7ff fc99 	bl	27e4 <encode_uint>
				conv->altform_0c = true;
    2eb2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2eb6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2eba:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2ebe:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    2ec2:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2ec6:	4607      	mov	r7, r0
				conv->altform_0c = true;
    2ec8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    2ecc:	dad5      	bge.n	2e7a <cbvprintf+0x5fe>
		if (bps == NULL) {
    2ece:	2800      	cmp	r0, #0
    2ed0:	f43f aee5 	beq.w	2c9e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    2ed4:	eba8 0000 	sub.w	r0, r8, r0
    2ed8:	e781      	b.n	2dde <cbvprintf+0x562>
				store_count(conv, value->ptr, count);
    2eda:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2edc:	2907      	cmp	r1, #7
    2ede:	f63f aede 	bhi.w	2c9e <cbvprintf+0x422>
    2ee2:	e8df f001 	tbb	[pc, r1]
    2ee6:	040c      	.short	0x040c
    2ee8:	08080c06 	.word	0x08080c06
    2eec:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    2eee:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    2ef0:	e6d5      	b.n	2c9e <cbvprintf+0x422>
		*(short *)dp = (short)count;
    2ef2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    2ef4:	e6d3      	b.n	2c9e <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
    2ef6:	17ea      	asrs	r2, r5, #31
    2ef8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2efc:	e6cf      	b.n	2c9e <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2efe:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    2f00:	e6cd      	b.n	2c9e <cbvprintf+0x422>
			bpe = bps + 5;
    2f02:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2fc0 <cbvprintf+0x744>
		char sign = 0;
    2f06:	4606      	mov	r6, r0
    2f08:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    2f0c:	2005      	movs	r0, #5
    2f0e:	e774      	b.n	2dfa <cbvprintf+0x57e>
		} else if (conv->altform_0) {
    2f10:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2f12:	bf48      	it	mi
    2f14:	3001      	addmi	r0, #1
    2f16:	e778      	b.n	2e0a <cbvprintf+0x58e>
    2f18:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2f1a:	4610      	mov	r0, r2
    2f1c:	9206      	str	r2, [sp, #24]
    2f1e:	9903      	ldr	r1, [sp, #12]
    2f20:	47d0      	blx	sl
    2f22:	2800      	cmp	r0, #0
    2f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2f28:	da04      	bge.n	2f34 <cbvprintf+0x6b8>
#undef OUTS
#undef OUTC
}
    2f2a:	b017      	add	sp, #92	; 0x5c
    2f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2f30:	2220      	movs	r2, #32
					pad = '0';
    2f32:	464b      	mov	r3, r9
				while (width-- > 0) {
    2f34:	4619      	mov	r1, r3
    2f36:	2900      	cmp	r1, #0
    2f38:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2f3c:	dcec      	bgt.n	2f18 <cbvprintf+0x69c>
    2f3e:	444d      	add	r5, r9
    2f40:	1a6d      	subs	r5, r5, r1
    2f42:	4699      	mov	r9, r3
		if (sign != 0) {
    2f44:	b12e      	cbz	r6, 2f52 <cbvprintf+0x6d6>
			OUTC(sign);
    2f46:	9903      	ldr	r1, [sp, #12]
    2f48:	4630      	mov	r0, r6
    2f4a:	47d0      	blx	sl
    2f4c:	2800      	cmp	r0, #0
    2f4e:	dbec      	blt.n	2f2a <cbvprintf+0x6ae>
    2f50:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2f52:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2f56:	06da      	lsls	r2, r3, #27
    2f58:	d401      	bmi.n	2f5e <cbvprintf+0x6e2>
    2f5a:	071b      	lsls	r3, r3, #28
    2f5c:	d505      	bpl.n	2f6a <cbvprintf+0x6ee>
				OUTC('0');
    2f5e:	9903      	ldr	r1, [sp, #12]
    2f60:	2030      	movs	r0, #48	; 0x30
    2f62:	47d0      	blx	sl
    2f64:	2800      	cmp	r0, #0
    2f66:	dbe0      	blt.n	2f2a <cbvprintf+0x6ae>
    2f68:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2f6a:	9b05      	ldr	r3, [sp, #20]
    2f6c:	b133      	cbz	r3, 2f7c <cbvprintf+0x700>
				OUTC(conv->specifier);
    2f6e:	9903      	ldr	r1, [sp, #12]
    2f70:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2f74:	47d0      	blx	sl
    2f76:	2800      	cmp	r0, #0
    2f78:	dbd7      	blt.n	2f2a <cbvprintf+0x6ae>
    2f7a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2f7c:	44ab      	add	fp, r5
    2f7e:	e005      	b.n	2f8c <cbvprintf+0x710>
				OUTC('0');
    2f80:	9903      	ldr	r1, [sp, #12]
    2f82:	2030      	movs	r0, #48	; 0x30
    2f84:	47d0      	blx	sl
    2f86:	2800      	cmp	r0, #0
    2f88:	dbcf      	blt.n	2f2a <cbvprintf+0x6ae>
    2f8a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2f8c:	ebab 0305 	sub.w	r3, fp, r5
    2f90:	2b00      	cmp	r3, #0
    2f92:	dcf5      	bgt.n	2f80 <cbvprintf+0x704>
			OUTS(bps, bpe);
    2f94:	9903      	ldr	r1, [sp, #12]
    2f96:	4643      	mov	r3, r8
    2f98:	463a      	mov	r2, r7
    2f9a:	4650      	mov	r0, sl
    2f9c:	f007 ffac 	bl	aef8 <outs>
    2fa0:	2800      	cmp	r0, #0
    2fa2:	dbc2      	blt.n	2f2a <cbvprintf+0x6ae>
    2fa4:	4405      	add	r5, r0
		while (width > 0) {
    2fa6:	44a9      	add	r9, r5
    2fa8:	eba9 0305 	sub.w	r3, r9, r5
    2fac:	2b00      	cmp	r3, #0
    2fae:	f77f ae76 	ble.w	2c9e <cbvprintf+0x422>
			OUTC(' ');
    2fb2:	9903      	ldr	r1, [sp, #12]
    2fb4:	2020      	movs	r0, #32
    2fb6:	47d0      	blx	sl
    2fb8:	2800      	cmp	r0, #0
    2fba:	dbb6      	blt.n	2f2a <cbvprintf+0x6ae>
    2fbc:	3501      	adds	r5, #1
			--width;
    2fbe:	e7f3      	b.n	2fa8 <cbvprintf+0x72c>
    2fc0:	0000cd1a 	.word	0x0000cd1a

00002fc4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2fc4:	b508      	push	{r3, lr}
	__asm__ volatile(
    2fc6:	f04f 0220 	mov.w	r2, #32
    2fca:	f3ef 8311 	mrs	r3, BASEPRI
    2fce:	f382 8812 	msr	BASEPRI_MAX, r2
    2fd2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2fd6:	f001 fe0d 	bl	4bf4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2fda:	4803      	ldr	r0, [pc, #12]	; (2fe8 <sys_reboot+0x24>)
    2fdc:	f007 fe5d 	bl	ac9a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2fe0:	f000 fe62 	bl	3ca8 <arch_cpu_idle>
    2fe4:	e7fc      	b.n	2fe0 <sys_reboot+0x1c>
    2fe6:	bf00      	nop
    2fe8:	0000cd1b 	.word	0x0000cd1b

00002fec <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fee:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2ff0:	460c      	mov	r4, r1
    2ff2:	b929      	cbnz	r1, 3000 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2ff4:	4d0e      	ldr	r5, [pc, #56]	; (3030 <msg_process+0x44>)
    2ff6:	4b0f      	ldr	r3, [pc, #60]	; (3034 <msg_process+0x48>)
    2ff8:	1b5b      	subs	r3, r3, r5
    2ffa:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2ffc:	42bc      	cmp	r4, r7
    2ffe:	db00      	blt.n	3002 <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    3000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3002:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    3004:	795b      	ldrb	r3, [r3, #5]
    3006:	b17b      	cbz	r3, 3028 <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    3008:	b94e      	cbnz	r6, 301e <msg_process+0x32>
    300a:	490b      	ldr	r1, [pc, #44]	; (3038 <msg_process+0x4c>)
    300c:	480b      	ldr	r0, [pc, #44]	; (303c <msg_process+0x50>)
    300e:	4a0c      	ldr	r2, [pc, #48]	; (3040 <msg_process+0x54>)
    3010:	2386      	movs	r3, #134	; 0x86
    3012:	f007 ff8f 	bl	af34 <assert_print>
    3016:	480a      	ldr	r0, [pc, #40]	; (3040 <msg_process+0x54>)
    3018:	2186      	movs	r1, #134	; 0x86
    301a:	f007 ff84 	bl	af26 <assert_post_action>
	backend->api->process(backend, msg);
    301e:	682b      	ldr	r3, [r5, #0]
    3020:	4631      	mov	r1, r6
    3022:	681b      	ldr	r3, [r3, #0]
    3024:	4628      	mov	r0, r5
    3026:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3028:	3401      	adds	r4, #1
    302a:	3510      	adds	r5, #16
    302c:	e7e6      	b.n	2ffc <msg_process+0x10>
    302e:	bf00      	nop
    3030:	0000c2f8 	.word	0x0000c2f8
    3034:	0000c318 	.word	0x0000c318
    3038:	0000cd7c 	.word	0x0000cd7c
    303c:	0000c986 	.word	0x0000c986
    3040:	0000cd44 	.word	0x0000cd44

00003044 <log_format_func_t_get>:
}
    3044:	4b01      	ldr	r3, [pc, #4]	; (304c <log_format_func_t_get+0x8>)
    3046:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    304a:	4770      	bx	lr
    304c:	0000c3c0 	.word	0x0000c3c0

00003050 <log_core_init>:
	panic_mode = false;
    3050:	4a05      	ldr	r2, [pc, #20]	; (3068 <log_core_init+0x18>)
    3052:	2300      	movs	r3, #0
    3054:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    3056:	4a05      	ldr	r2, [pc, #20]	; (306c <log_core_init+0x1c>)
    3058:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    305a:	4b05      	ldr	r3, [pc, #20]	; (3070 <log_core_init+0x20>)
    305c:	4a05      	ldr	r2, [pc, #20]	; (3074 <log_core_init+0x24>)
    305e:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3064:	f000 ba96 	b.w	3594 <log_output_timestamp_freq_set>
    3068:	2000d14f 	.word	0x2000d14f
    306c:	20000820 	.word	0x20000820
    3070:	20000004 	.word	0x20000004
    3074:	0000af51 	.word	0x0000af51

00003078 <log_init>:
{
    3078:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    307a:	4b19      	ldr	r3, [pc, #100]	; (30e0 <log_init+0x68>)
    307c:	4c19      	ldr	r4, [pc, #100]	; (30e4 <log_init+0x6c>)
    307e:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    3080:	2c90      	cmp	r4, #144	; 0x90
    3082:	d90b      	bls.n	309c <log_init+0x24>
    3084:	4918      	ldr	r1, [pc, #96]	; (30e8 <log_init+0x70>)
    3086:	4819      	ldr	r0, [pc, #100]	; (30ec <log_init+0x74>)
    3088:	4a19      	ldr	r2, [pc, #100]	; (30f0 <log_init+0x78>)
    308a:	f240 2373 	movw	r3, #627	; 0x273
    308e:	f007 ff51 	bl	af34 <assert_print>
    3092:	4817      	ldr	r0, [pc, #92]	; (30f0 <log_init+0x78>)
    3094:	f240 2173 	movw	r1, #627	; 0x273
    3098:	f007 ff45 	bl	af26 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    309c:	f3bf 8f5b 	dmb	ish
    30a0:	4b14      	ldr	r3, [pc, #80]	; (30f4 <log_init+0x7c>)
    30a2:	e853 6f00 	ldrex	r6, [r3]
    30a6:	1c72      	adds	r2, r6, #1
    30a8:	e843 2100 	strex	r1, r2, [r3]
    30ac:	2900      	cmp	r1, #0
    30ae:	d1f8      	bne.n	30a2 <log_init+0x2a>
    30b0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    30b4:	b91e      	cbnz	r6, 30be <log_init+0x46>
    30b6:	1125      	asrs	r5, r4, #4
    30b8:	4c09      	ldr	r4, [pc, #36]	; (30e0 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    30ba:	42ae      	cmp	r6, r5
    30bc:	db00      	blt.n	30c0 <log_init+0x48>
}
    30be:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    30c0:	7b23      	ldrb	r3, [r4, #12]
    30c2:	b153      	cbz	r3, 30da <log_init+0x62>
			if (backend->api->init != NULL) {
    30c4:	6823      	ldr	r3, [r4, #0]
    30c6:	699b      	ldr	r3, [r3, #24]
    30c8:	b10b      	cbz	r3, 30ce <log_init+0x56>
				backend->api->init(backend);
    30ca:	4620      	mov	r0, r4
    30cc:	4798      	blx	r3
			log_backend_enable(backend,
    30ce:	6863      	ldr	r3, [r4, #4]
    30d0:	2204      	movs	r2, #4
    30d2:	6819      	ldr	r1, [r3, #0]
    30d4:	4620      	mov	r0, r4
    30d6:	f000 f86f 	bl	31b8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    30da:	3601      	adds	r6, #1
    30dc:	3410      	adds	r4, #16
    30de:	e7ec      	b.n	30ba <log_init+0x42>
    30e0:	0000c2f8 	.word	0x0000c2f8
    30e4:	0000c318 	.word	0x0000c318
    30e8:	0000cdd4 	.word	0x0000cdd4
    30ec:	0000c986 	.word	0x0000c986
    30f0:	0000cd8f 	.word	0x0000cd8f
    30f4:	20000828 	.word	0x20000828

000030f8 <z_impl_log_panic>:
{
    30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    30fa:	4f0c      	ldr	r7, [pc, #48]	; (312c <z_impl_log_panic+0x34>)
    30fc:	783d      	ldrb	r5, [r7, #0]
    30fe:	b94d      	cbnz	r5, 3114 <z_impl_log_panic+0x1c>
    3100:	4c0b      	ldr	r4, [pc, #44]	; (3130 <z_impl_log_panic+0x38>)
    3102:	4e0c      	ldr	r6, [pc, #48]	; (3134 <z_impl_log_panic+0x3c>)
	log_init();
    3104:	f7ff ffb8 	bl	3078 <log_init>
    3108:	1b36      	subs	r6, r6, r4
    310a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    310c:	42b5      	cmp	r5, r6
    310e:	db02      	blt.n	3116 <z_impl_log_panic+0x1e>
	panic_mode = true;
    3110:	2301      	movs	r3, #1
    3112:	703b      	strb	r3, [r7, #0]
}
    3114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3116:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3118:	795b      	ldrb	r3, [r3, #5]
    311a:	b11b      	cbz	r3, 3124 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    311c:	6823      	ldr	r3, [r4, #0]
    311e:	4620      	mov	r0, r4
    3120:	695b      	ldr	r3, [r3, #20]
    3122:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3124:	3501      	adds	r5, #1
    3126:	3410      	adds	r4, #16
    3128:	e7f0      	b.n	310c <z_impl_log_panic+0x14>
    312a:	bf00      	nop
    312c:	2000d14f 	.word	0x2000d14f
    3130:	0000c2f8 	.word	0x0000c2f8
    3134:	0000c318 	.word	0x0000c318

00003138 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3138:	4b01      	ldr	r3, [pc, #4]	; (3140 <z_log_notify_backend_enabled+0x8>)
    313a:	2201      	movs	r2, #1
    313c:	701a      	strb	r2, [r3, #0]
}
    313e:	4770      	bx	lr
    3140:	2000d14e 	.word	0x2000d14e

00003144 <z_log_dropped>:
    3144:	4b0c      	ldr	r3, [pc, #48]	; (3178 <z_log_dropped+0x34>)
    3146:	f3bf 8f5b 	dmb	ish
    314a:	e853 1f00 	ldrex	r1, [r3]
    314e:	3101      	adds	r1, #1
    3150:	e843 1200 	strex	r2, r1, [r3]
    3154:	2a00      	cmp	r2, #0
    3156:	d1f8      	bne.n	314a <z_log_dropped+0x6>
    3158:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    315c:	b158      	cbz	r0, 3176 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    315e:	f3bf 8f5b 	dmb	ish
    3162:	4b06      	ldr	r3, [pc, #24]	; (317c <z_log_dropped+0x38>)
    3164:	e853 1f00 	ldrex	r1, [r3]
    3168:	3901      	subs	r1, #1
    316a:	e843 1200 	strex	r2, r1, [r3]
    316e:	2a00      	cmp	r2, #0
    3170:	d1f8      	bne.n	3164 <z_log_dropped+0x20>
    3172:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    3176:	4770      	bx	lr
    3178:	20000820 	.word	0x20000820
    317c:	20000824 	.word	0x20000824

00003180 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    3180:	4b05      	ldr	r3, [pc, #20]	; (3198 <z_log_msg2_commit+0x18>)
{
    3182:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    3184:	681b      	ldr	r3, [r3, #0]
{
    3186:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3188:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    318a:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    318c:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    318e:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    3194:	f7ff bf2a 	b.w	2fec <msg_process>
    3198:	20000004 	.word	0x20000004

0000319c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    319c:	4a04      	ldr	r2, [pc, #16]	; (31b0 <log_source_name_get+0x14>)
    319e:	4b05      	ldr	r3, [pc, #20]	; (31b4 <log_source_name_get+0x18>)
    31a0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    31a2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    31a6:	bf34      	ite	cc
    31a8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    31ac:	2000      	movcs	r0, #0
}
    31ae:	4770      	bx	lr
    31b0:	0000c2b0 	.word	0x0000c2b0
    31b4:	0000c2f8 	.word	0x0000c2f8

000031b8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    31b8:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    31ba:	4c10      	ldr	r4, [pc, #64]	; (31fc <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    31bc:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    31be:	1b04      	subs	r4, r0, r4
    31c0:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    31c2:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    31c4:	3401      	adds	r4, #1
{
    31c6:	4605      	mov	r5, r0
    31c8:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    31ca:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    31cc:	b963      	cbnz	r3, 31e8 <log_backend_enable+0x30>
    31ce:	490c      	ldr	r1, [pc, #48]	; (3200 <log_backend_enable+0x48>)
    31d0:	4a0c      	ldr	r2, [pc, #48]	; (3204 <log_backend_enable+0x4c>)
    31d2:	480d      	ldr	r0, [pc, #52]	; (3208 <log_backend_enable+0x50>)
    31d4:	23bb      	movs	r3, #187	; 0xbb
    31d6:	f007 fead 	bl	af34 <assert_print>
    31da:	480c      	ldr	r0, [pc, #48]	; (320c <log_backend_enable+0x54>)
    31dc:	f007 feaa 	bl	af34 <assert_print>
    31e0:	4808      	ldr	r0, [pc, #32]	; (3204 <log_backend_enable+0x4c>)
    31e2:	21bb      	movs	r1, #187	; 0xbb
    31e4:	f007 fe9f 	bl	af26 <assert_post_action>
	backend->cb->id = id;
    31e8:	686b      	ldr	r3, [r5, #4]
    31ea:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    31ec:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    31ee:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    31f0:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    31f2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    31f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    31f8:	f7ff bf9e 	b.w	3138 <z_log_notify_backend_enabled>
    31fc:	0000c2f8 	.word	0x0000c2f8
    3200:	0000ce54 	.word	0x0000ce54
    3204:	0000cdfc 	.word	0x0000cdfc
    3208:	0000c986 	.word	0x0000c986
    320c:	0000ce6a 	.word	0x0000ce6a

00003210 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3210:	b40e      	push	{r1, r2, r3}
    3212:	b503      	push	{r0, r1, lr}
    3214:	ab03      	add	r3, sp, #12
    3216:	4601      	mov	r1, r0
    3218:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    321c:	4804      	ldr	r0, [pc, #16]	; (3230 <print_formatted+0x20>)
	va_start(args, fmt);
    321e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3220:	f7ff fb2c 	bl	287c <cbvprintf>
	va_end(args);

	return length;
}
    3224:	b002      	add	sp, #8
    3226:	f85d eb04 	ldr.w	lr, [sp], #4
    322a:	b003      	add	sp, #12
    322c:	4770      	bx	lr
    322e:	bf00      	nop
    3230:	0000af83 	.word	0x0000af83

00003234 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3238:	b087      	sub	sp, #28
    323a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    323c:	f001 0301 	and.w	r3, r1, #1
{
    3240:	9205      	str	r2, [sp, #20]
    3242:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    3246:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    324a:	9304      	str	r3, [sp, #16]
{
    324c:	4607      	mov	r7, r0
    324e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3250:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3254:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    3258:	f007 fe91 	bl	af7e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    325c:	4602      	mov	r2, r0
    325e:	2800      	cmp	r0, #0
    3260:	d040      	beq.n	32e4 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    3262:	4937      	ldr	r1, [pc, #220]	; (3340 <prefix_print+0x10c>)
    3264:	4638      	mov	r0, r7
    3266:	f7ff ffd3 	bl	3210 <print_formatted>
    326a:	4605      	mov	r5, r0
	}

	if (stamp) {
    326c:	f1bb 0f00 	cmp.w	fp, #0
    3270:	d008      	beq.n	3284 <prefix_print+0x50>
	if (!format) {
    3272:	f018 0f44 	tst.w	r8, #68	; 0x44
    3276:	d137      	bne.n	32e8 <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    3278:	4932      	ldr	r1, [pc, #200]	; (3344 <prefix_print+0x110>)
    327a:	4622      	mov	r2, r4
    327c:	4638      	mov	r0, r7
    327e:	f7ff ffc7 	bl	3210 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    3282:	4405      	add	r5, r0
	if (color) {
    3284:	9b04      	ldr	r3, [sp, #16]
    3286:	b153      	cbz	r3, 329e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    3288:	4b2f      	ldr	r3, [pc, #188]	; (3348 <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    328a:	4930      	ldr	r1, [pc, #192]	; (334c <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    328c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    3290:	4b2f      	ldr	r3, [pc, #188]	; (3350 <prefix_print+0x11c>)
    3292:	4638      	mov	r0, r7
    3294:	2a00      	cmp	r2, #0
    3296:	bf08      	it	eq
    3298:	461a      	moveq	r2, r3
    329a:	f7ff ffb9 	bl	3210 <print_formatted>
	if (level_on) {
    329e:	b13e      	cbz	r6, 32b0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    32a0:	4b2c      	ldr	r3, [pc, #176]	; (3354 <prefix_print+0x120>)
    32a2:	492d      	ldr	r1, [pc, #180]	; (3358 <prefix_print+0x124>)
    32a4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    32a8:	4638      	mov	r0, r7
    32aa:	f7ff ffb1 	bl	3210 <print_formatted>
    32ae:	4606      	mov	r6, r0
	if (source_id >= 0) {
    32b0:	f1ba 0f00 	cmp.w	sl, #0
    32b4:	db12      	blt.n	32dc <prefix_print+0xa8>
		total += print_formatted(output,
    32b6:	9b05      	ldr	r3, [sp, #20]
    32b8:	4c28      	ldr	r4, [pc, #160]	; (335c <prefix_print+0x128>)
    32ba:	b123      	cbz	r3, 32c6 <prefix_print+0x92>
    32bc:	4b28      	ldr	r3, [pc, #160]	; (3360 <prefix_print+0x12c>)
    32be:	f1b9 0f04 	cmp.w	r9, #4
    32c2:	bf08      	it	eq
    32c4:	461c      	moveq	r4, r3
    32c6:	4651      	mov	r1, sl
    32c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    32cc:	f7ff ff66 	bl	319c <log_source_name_get>
    32d0:	4621      	mov	r1, r4
    32d2:	4602      	mov	r2, r0
    32d4:	4638      	mov	r0, r7
    32d6:	f7ff ff9b 	bl	3210 <print_formatted>
    32da:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    32dc:	1970      	adds	r0, r6, r5
    32de:	b007      	add	sp, #28
    32e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    32e4:	4605      	mov	r5, r0
    32e6:	e7c1      	b.n	326c <prefix_print+0x38>
	} else if (freq != 0U) {
    32e8:	4b1e      	ldr	r3, [pc, #120]	; (3364 <prefix_print+0x130>)
    32ea:	6818      	ldr	r0, [r3, #0]
    32ec:	2800      	cmp	r0, #0
    32ee:	d0c8      	beq.n	3282 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    32f0:	4b1d      	ldr	r3, [pc, #116]	; (3368 <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    32f2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    32fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    3300:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    3304:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    3308:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    330c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    3310:	fbb3 f2f1 	udiv	r2, r3, r1
    3314:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3318:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    331c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3320:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    3324:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3328:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    332c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    332e:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    3332:	490e      	ldr	r1, [pc, #56]	; (336c <prefix_print+0x138>)
    3334:	e9cd e401 	strd	lr, r4, [sp, #4]
    3338:	4638      	mov	r0, r7
    333a:	f7ff ff69 	bl	3210 <print_formatted>
    333e:	e7a0      	b.n	3282 <prefix_print+0x4e>
    3340:	0000ce9a 	.word	0x0000ce9a
    3344:	0000ce9e 	.word	0x0000ce9e
    3348:	0000c3cc 	.word	0x0000c3cc
    334c:	0000c8a0 	.word	0x0000c8a0
    3350:	0000ce8c 	.word	0x0000ce8c
    3354:	0000c3e0 	.word	0x0000c3e0
    3358:	0000cec3 	.word	0x0000cec3
    335c:	0000ce95 	.word	0x0000ce95
    3360:	0000ce91 	.word	0x0000ce91
    3364:	20000830 	.word	0x20000830
    3368:	2000082c 	.word	0x2000082c
    336c:	0000cea7 	.word	0x0000cea7

00003370 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3370:	06ca      	lsls	r2, r1, #27
    3372:	d405      	bmi.n	3380 <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3374:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    3376:	bf4c      	ite	mi
    3378:	4902      	ldrmi	r1, [pc, #8]	; (3384 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    337a:	4903      	ldrpl	r1, [pc, #12]	; (3388 <newline_print+0x18>)
    337c:	f7ff bf48 	b.w	3210 <print_formatted>
}
    3380:	4770      	bx	lr
    3382:	bf00      	nop
    3384:	0000e01f 	.word	0x0000e01f
    3388:	0000cec9 	.word	0x0000cec9

0000338c <hexdump_line_print>:
{
    338c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3390:	460f      	mov	r7, r1
	newline_print(output, flags);
    3392:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    3394:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 3450 <hexdump_line_print+0xc4>
{
    3398:	4604      	mov	r4, r0
    339a:	4616      	mov	r6, r2
    339c:	461d      	mov	r5, r3
	newline_print(output, flags);
    339e:	f7ff ffe7 	bl	3370 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    33a2:	f04f 0800 	mov.w	r8, #0
    33a6:	45a8      	cmp	r8, r5
    33a8:	db28      	blt.n	33fc <hexdump_line_print+0x70>
		if (i < length) {
    33aa:	b376      	cbz	r6, 340a <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    33ac:	783a      	ldrb	r2, [r7, #0]
    33ae:	4929      	ldr	r1, [pc, #164]	; (3454 <hexdump_line_print+0xc8>)
    33b0:	4620      	mov	r0, r4
    33b2:	f7ff ff2d 	bl	3210 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33b6:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    33b8:	076a      	lsls	r2, r5, #29
    33ba:	d103      	bne.n	33c4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    33bc:	4924      	ldr	r1, [pc, #144]	; (3450 <hexdump_line_print+0xc4>)
    33be:	4620      	mov	r0, r4
    33c0:	f7ff ff26 	bl	3210 <print_formatted>
		if (i < length) {
    33c4:	42b5      	cmp	r5, r6
    33c6:	d225      	bcs.n	3414 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    33c8:	5d7a      	ldrb	r2, [r7, r5]
    33ca:	4922      	ldr	r1, [pc, #136]	; (3454 <hexdump_line_print+0xc8>)
    33cc:	4620      	mov	r0, r4
    33ce:	f7ff ff1f 	bl	3210 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33d2:	3501      	adds	r5, #1
    33d4:	2d10      	cmp	r5, #16
    33d6:	d1ef      	bne.n	33b8 <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    33d8:	491f      	ldr	r1, [pc, #124]	; (3458 <hexdump_line_print+0xcc>)
    33da:	4620      	mov	r0, r4
    33dc:	f7ff ff18 	bl	3210 <print_formatted>
		if (i < length) {
    33e0:	b9ee      	cbnz	r6, 341e <hexdump_line_print+0x92>
			print_formatted(output, " ");
    33e2:	491b      	ldr	r1, [pc, #108]	; (3450 <hexdump_line_print+0xc4>)
    33e4:	4620      	mov	r0, r4
    33e6:	f7ff ff13 	bl	3210 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33ea:	2501      	movs	r5, #1
		if (i < length) {
    33ec:	42b5      	cmp	r5, r6
    33ee:	462b      	mov	r3, r5
    33f0:	d317      	bcc.n	3422 <hexdump_line_print+0x96>
			print_formatted(output, " ");
    33f2:	4917      	ldr	r1, [pc, #92]	; (3450 <hexdump_line_print+0xc4>)
    33f4:	4620      	mov	r0, r4
    33f6:	f7ff ff0b 	bl	3210 <print_formatted>
    33fa:	e01d      	b.n	3438 <hexdump_line_print+0xac>
		print_formatted(output, " ");
    33fc:	4649      	mov	r1, r9
    33fe:	4620      	mov	r0, r4
    3400:	f7ff ff06 	bl	3210 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3404:	f108 0801 	add.w	r8, r8, #1
    3408:	e7cd      	b.n	33a6 <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    340a:	4914      	ldr	r1, [pc, #80]	; (345c <hexdump_line_print+0xd0>)
    340c:	4620      	mov	r0, r4
    340e:	f7ff feff 	bl	3210 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3412:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    3414:	4911      	ldr	r1, [pc, #68]	; (345c <hexdump_line_print+0xd0>)
    3416:	4620      	mov	r0, r4
    3418:	f7ff fefa 	bl	3210 <print_formatted>
    341c:	e7d9      	b.n	33d2 <hexdump_line_print+0x46>
		if (i < length) {
    341e:	2500      	movs	r5, #0
    3420:	462b      	mov	r3, r5
			char c = (char)data[i];
    3422:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
    3424:	4b0e      	ldr	r3, [pc, #56]	; (3460 <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
    3426:	490f      	ldr	r1, [pc, #60]	; (3464 <hexdump_line_print+0xd8>)
    3428:	5c9b      	ldrb	r3, [r3, r2]
    342a:	f013 0f97 	tst.w	r3, #151	; 0x97
    342e:	bf08      	it	eq
    3430:	222e      	moveq	r2, #46	; 0x2e
    3432:	4620      	mov	r0, r4
    3434:	f7ff feec 	bl	3210 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3438:	3501      	adds	r5, #1
    343a:	2d10      	cmp	r5, #16
    343c:	d006      	beq.n	344c <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
    343e:	076b      	lsls	r3, r5, #29
    3440:	d1d4      	bne.n	33ec <hexdump_line_print+0x60>
			print_formatted(output, " ");
    3442:	4903      	ldr	r1, [pc, #12]	; (3450 <hexdump_line_print+0xc4>)
    3444:	4620      	mov	r0, r4
    3446:	f7ff fee3 	bl	3210 <print_formatted>
    344a:	e7cf      	b.n	33ec <hexdump_line_print+0x60>
}
    344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3450:	0000ced4 	.word	0x0000ced4
    3454:	0000cecc 	.word	0x0000cecc
    3458:	0000ced6 	.word	0x0000ced6
    345c:	0000ced2 	.word	0x0000ced2
    3460:	0000e3c9 	.word	0x0000e3c9
    3464:	0000ced8 	.word	0x0000ced8

00003468 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    3468:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    346a:	07cb      	lsls	r3, r1, #31
{
    346c:	4605      	mov	r5, r0
    346e:	460c      	mov	r4, r1
	if (color) {
    3470:	d503      	bpl.n	347a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    3472:	4a05      	ldr	r2, [pc, #20]	; (3488 <postfix_print+0x20>)
    3474:	4905      	ldr	r1, [pc, #20]	; (348c <postfix_print+0x24>)
    3476:	f7ff fecb 	bl	3210 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    347a:	4621      	mov	r1, r4
    347c:	4628      	mov	r0, r5
}
    347e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    3482:	f7ff bf75 	b.w	3370 <newline_print>
    3486:	bf00      	nop
    3488:	0000ce8c 	.word	0x0000ce8c
    348c:	0000c8a0 	.word	0x0000c8a0

00003490 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    3490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    3494:	460e      	mov	r6, r1
    3496:	4690      	mov	r8, r2
    3498:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    349c:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    349e:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    34a2:	4607      	mov	r7, r0
    34a4:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    34a6:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    34aa:	d023      	beq.n	34f4 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    34ac:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    34ae:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    34b0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    34b4:	b1d8      	cbz	r0, 34ee <log_output_msg2_process+0x5e>
    34b6:	4930      	ldr	r1, [pc, #192]	; (3578 <log_output_msg2_process+0xe8>)
    34b8:	1a40      	subs	r0, r0, r1
    34ba:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    34be:	e9cd 2001 	strd	r2, r0, [sp, #4]
    34c2:	f8cd 9000 	str.w	r9, [sp]
    34c6:	2200      	movs	r2, #0
    34c8:	4641      	mov	r1, r8
    34ca:	4638      	mov	r0, r7
    34cc:	f7ff feb2 	bl	3234 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    34d0:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    34d2:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    34d6:	4682      	mov	sl, r0
	if (len) {
    34d8:	b9b3      	cbnz	r3, 3508 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    34da:	886c      	ldrh	r4, [r5, #2]
    34dc:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    34e0:	b9f4      	cbnz	r4, 3520 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    34e2:	464a      	mov	r2, r9
    34e4:	4641      	mov	r1, r8
    34e6:	4638      	mov	r0, r7
    34e8:	f7ff ffbe 	bl	3468 <postfix_print>
    34ec:	e02e      	b.n	354c <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    34ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34f2:	e7e4      	b.n	34be <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    34f4:	680b      	ldr	r3, [r1, #0]
	if (len) {
    34f6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    34fa:	bb6b      	cbnz	r3, 3558 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    34fc:	884c      	ldrh	r4, [r1, #2]
    34fe:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    3502:	b31c      	cbz	r4, 354c <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    3504:	46ca      	mov	sl, r9
    3506:	e00b      	b.n	3520 <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3508:	481c      	ldr	r0, [pc, #112]	; (357c <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    350a:	491d      	ldr	r1, [pc, #116]	; (3580 <log_output_msg2_process+0xf0>)
    350c:	4633      	mov	r3, r6
    350e:	463a      	mov	r2, r7
    3510:	f007 fb81 	bl	ac16 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    3514:	2800      	cmp	r0, #0
    3516:	db22      	blt.n	355e <log_output_msg2_process+0xce>
    3518:	886c      	ldrh	r4, [r5, #2]
    351a:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    351e:	b194      	cbz	r4, 3546 <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    3520:	682b      	ldr	r3, [r5, #0]
    3522:	f3c3 2349 	ubfx	r3, r3, #9, #10
    3526:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3528:	2c10      	cmp	r4, #16
    352a:	4625      	mov	r5, r4
    352c:	bf28      	it	cs
    352e:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    3530:	4631      	mov	r1, r6
    3532:	f8cd 8000 	str.w	r8, [sp]
    3536:	4653      	mov	r3, sl
    3538:	462a      	mov	r2, r5
    353a:	4638      	mov	r0, r7
    353c:	f7ff ff26 	bl	338c <hexdump_line_print>
	} while (len);
    3540:	1b64      	subs	r4, r4, r5
		data += length;
    3542:	442e      	add	r6, r5
	} while (len);
    3544:	d1f0      	bne.n	3528 <log_output_msg2_process+0x98>
	if (!raw_string) {
    3546:	f1b9 0f00 	cmp.w	r9, #0
    354a:	d1ca      	bne.n	34e2 <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    354c:	4638      	mov	r0, r7
}
    354e:	b004      	add	sp, #16
    3550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    3554:	f007 bd3d 	b.w	afd2 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3558:	480a      	ldr	r0, [pc, #40]	; (3584 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    355a:	46ca      	mov	sl, r9
    355c:	e7d5      	b.n	350a <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    355e:	4a0a      	ldr	r2, [pc, #40]	; (3588 <log_output_msg2_process+0xf8>)
    3560:	490a      	ldr	r1, [pc, #40]	; (358c <log_output_msg2_process+0xfc>)
    3562:	480b      	ldr	r0, [pc, #44]	; (3590 <log_output_msg2_process+0x100>)
    3564:	f240 23b7 	movw	r3, #695	; 0x2b7
    3568:	f007 fce4 	bl	af34 <assert_print>
    356c:	4806      	ldr	r0, [pc, #24]	; (3588 <log_output_msg2_process+0xf8>)
    356e:	f240 21b7 	movw	r1, #695	; 0x2b7
    3572:	f007 fcd8 	bl	af26 <assert_post_action>
    3576:	e7cf      	b.n	3518 <log_output_msg2_process+0x88>
    3578:	0000c2b0 	.word	0x0000c2b0
    357c:	0000af83 	.word	0x0000af83
    3580:	0000287d 	.word	0x0000287d
    3584:	0000af9f 	.word	0x0000af9f
    3588:	0000cedb 	.word	0x0000cedb
    358c:	0000cf17 	.word	0x0000cf17
    3590:	0000c986 	.word	0x0000c986

00003594 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3594:	4a07      	ldr	r2, [pc, #28]	; (35b4 <log_output_timestamp_freq_set+0x20>)
    3596:	2100      	movs	r1, #0
    3598:	2301      	movs	r3, #1
    359a:	4290      	cmp	r0, r2
    359c:	d806      	bhi.n	35ac <log_output_timestamp_freq_set+0x18>
    359e:	4a06      	ldr	r2, [pc, #24]	; (35b8 <log_output_timestamp_freq_set+0x24>)
    35a0:	b901      	cbnz	r1, 35a4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    35a2:	2301      	movs	r3, #1
    35a4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    35a6:	4b05      	ldr	r3, [pc, #20]	; (35bc <log_output_timestamp_freq_set+0x28>)
    35a8:	6018      	str	r0, [r3, #0]
}
    35aa:	4770      	bx	lr
		frequency /= 2U;
    35ac:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    35ae:	005b      	lsls	r3, r3, #1
    35b0:	2101      	movs	r1, #1
    35b2:	e7f2      	b.n	359a <log_output_timestamp_freq_set+0x6>
    35b4:	000f4240 	.word	0x000f4240
    35b8:	2000082c 	.word	0x2000082c
    35bc:	20000830 	.word	0x20000830

000035c0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    35c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35c4:	b085      	sub	sp, #20
    35c6:	af02      	add	r7, sp, #8
    35c8:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    35cc:	4604      	mov	r4, r0
    35ce:	4688      	mov	r8, r1
    35d0:	4693      	mov	fp, r2
    35d2:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    35d4:	2e00      	cmp	r6, #0
    35d6:	d04e      	beq.n	3676 <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    35d8:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    35dc:	f8cd a000 	str.w	sl, [sp]
    35e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35e2:	4633      	mov	r3, r6
    35e4:	2110      	movs	r1, #16
    35e6:	2000      	movs	r0, #0
    35e8:	f7fe fa7a 	bl	1ae0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    35ec:	1e05      	subs	r5, r0, #0
    35ee:	da09      	bge.n	3604 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    35f0:	4922      	ldr	r1, [pc, #136]	; (367c <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    35f2:	4823      	ldr	r0, [pc, #140]	; (3680 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    35f4:	4a23      	ldr	r2, [pc, #140]	; (3684 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    35f6:	2367      	movs	r3, #103	; 0x67
    35f8:	f007 fc9c 	bl	af34 <assert_print>
    35fc:	4821      	ldr	r0, [pc, #132]	; (3684 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    35fe:	2167      	movs	r1, #103	; 0x67
    3600:	f007 fc91 	bl	af26 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3604:	4b20      	ldr	r3, [pc, #128]	; (3688 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    3606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3608:	f004 0407 	and.w	r4, r4, #7
    360c:	f00b 0b07 	and.w	fp, fp, #7
    3610:	00e4      	lsls	r4, r4, #3
    3612:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    3616:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    361a:	431c      	orrs	r4, r3
    361c:	4b1b      	ldr	r3, [pc, #108]	; (368c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    361e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    3622:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3624:	4613      	mov	r3, r2
    3626:	3317      	adds	r3, #23
    3628:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    362a:	f023 0307 	bic.w	r3, r3, #7
    362e:	ebad 0d03 	sub.w	sp, sp, r3
    3632:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3636:	b1a6      	cbz	r6, 3662 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3638:	f8cd a000 	str.w	sl, [sp]
    363c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    363e:	4633      	mov	r3, r6
    3640:	4629      	mov	r1, r5
    3642:	f10b 0010 	add.w	r0, fp, #16
    3646:	f7fe fa4b 	bl	1ae0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    364a:	2800      	cmp	r0, #0
    364c:	da09      	bge.n	3662 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    364e:	490b      	ldr	r1, [pc, #44]	; (367c <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    3650:	480b      	ldr	r0, [pc, #44]	; (3680 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    3652:	4a0c      	ldr	r2, [pc, #48]	; (3684 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3654:	2381      	movs	r3, #129	; 0x81
    3656:	f007 fc6d 	bl	af34 <assert_print>
    365a:	480a      	ldr	r0, [pc, #40]	; (3684 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    365c:	2181      	movs	r1, #129	; 0x81
    365e:	f007 fc62 	bl	af26 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3662:	464b      	mov	r3, r9
    3664:	4622      	mov	r2, r4
    3666:	4641      	mov	r1, r8
    3668:	4658      	mov	r0, fp
    366a:	f007 fcbf 	bl	afec <z_log_msg2_finalize>
	}
}
    366e:	370c      	adds	r7, #12
    3670:	46bd      	mov	sp, r7
    3672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    3676:	4635      	mov	r5, r6
    3678:	e7c4      	b.n	3604 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    367a:	bf00      	nop
    367c:	0000cf6d 	.word	0x0000cf6d
    3680:	0000c986 	.word	0x0000c986
    3684:	0000cf40 	.word	0x0000cf40
    3688:	0007fe00 	.word	0x0007fe00
    368c:	7ff80000 	.word	0x7ff80000

00003690 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    3692:	4f07      	ldr	r7, [pc, #28]	; (36b0 <char_out+0x20>)
{
    3694:	460d      	mov	r5, r1
    3696:	4604      	mov	r4, r0
    3698:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    369a:	42b4      	cmp	r4, r6
    369c:	d101      	bne.n	36a2 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    369e:	4628      	mov	r0, r5
    36a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    36a2:	6838      	ldr	r0, [r7, #0]
    36a4:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    36a8:	6883      	ldr	r3, [r0, #8]
    36aa:	69db      	ldr	r3, [r3, #28]
    36ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    36ae:	e7f4      	b.n	369a <char_out+0xa>
    36b0:	2000084c 	.word	0x2000084c

000036b4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    36b4:	4b01      	ldr	r3, [pc, #4]	; (36bc <format_set+0x8>)
	return 0;
}
    36b6:	2000      	movs	r0, #0
	log_format_current = log_type;
    36b8:	6019      	str	r1, [r3, #0]
}
    36ba:	4770      	bx	lr
    36bc:	20000848 	.word	0x20000848

000036c0 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    36c0:	4b02      	ldr	r3, [pc, #8]	; (36cc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    36c2:	4803      	ldr	r0, [pc, #12]	; (36d0 <panic+0x10>)
    36c4:	2201      	movs	r2, #1
    36c6:	701a      	strb	r2, [r3, #0]
    36c8:	f007 bc83 	b.w	afd2 <log_output_flush>
    36cc:	2000d151 	.word	0x2000d151
    36d0:	0000c414 	.word	0x0000c414

000036d4 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <process+0x1c>)
{
    36d6:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36d8:	6818      	ldr	r0, [r3, #0]
{
    36da:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36dc:	f7ff fcb2 	bl	3044 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    36e0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36e2:	4603      	mov	r3, r0
}
    36e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    36e8:	4802      	ldr	r0, [pc, #8]	; (36f4 <process+0x20>)
    36ea:	220f      	movs	r2, #15
    36ec:	4718      	bx	r3
    36ee:	bf00      	nop
    36f0:	20000848 	.word	0x20000848
    36f4:	0000c414 	.word	0x0000c414

000036f8 <log_backend_uart_init>:
{
    36f8:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    36fa:	4b09      	ldr	r3, [pc, #36]	; (3720 <log_backend_uart_init+0x28>)
    36fc:	4809      	ldr	r0, [pc, #36]	; (3724 <log_backend_uart_init+0x2c>)
    36fe:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3700:	f008 f90f 	bl	b922 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3704:	b958      	cbnz	r0, 371e <log_backend_uart_init+0x26>
    3706:	4908      	ldr	r1, [pc, #32]	; (3728 <log_backend_uart_init+0x30>)
    3708:	4808      	ldr	r0, [pc, #32]	; (372c <log_backend_uart_init+0x34>)
    370a:	4a09      	ldr	r2, [pc, #36]	; (3730 <log_backend_uart_init+0x38>)
    370c:	2379      	movs	r3, #121	; 0x79
    370e:	f007 fc11 	bl	af34 <assert_print>
}
    3712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3716:	4806      	ldr	r0, [pc, #24]	; (3730 <log_backend_uart_init+0x38>)
    3718:	2179      	movs	r1, #121	; 0x79
    371a:	f007 bc04 	b.w	af26 <assert_post_action>
}
    371e:	bd08      	pop	{r3, pc}
    3720:	2000084c 	.word	0x2000084c
    3724:	0000c118 	.word	0x0000c118
    3728:	0000cfac 	.word	0x0000cfac
    372c:	0000c986 	.word	0x0000c986
    3730:	0000cf77 	.word	0x0000cf77

00003734 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3734:	4b01      	ldr	r3, [pc, #4]	; (373c <log_backend_rtt_init+0x8>)
    3736:	2201      	movs	r2, #1
    3738:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    373a:	4770      	bx	lr
    373c:	2000d152 	.word	0x2000d152

00003740 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3740:	4b01      	ldr	r3, [pc, #4]	; (3748 <format_set+0x8>)
	return 0;
}
    3742:	2000      	movs	r0, #0
	log_format_current = log_type;
    3744:	6019      	str	r1, [r3, #0]
}
    3746:	4770      	bx	lr
    3748:	20000864 	.word	0x20000864

0000374c <panic>:
	panic_mode = true;
    374c:	4b02      	ldr	r3, [pc, #8]	; (3758 <panic+0xc>)
    374e:	4803      	ldr	r0, [pc, #12]	; (375c <panic+0x10>)
    3750:	2201      	movs	r2, #1
    3752:	701a      	strb	r2, [r3, #0]
    3754:	f007 bc3d 	b.w	afd2 <log_output_flush>
    3758:	2000d153 	.word	0x2000d153
    375c:	0000c444 	.word	0x0000c444

00003760 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3760:	4b06      	ldr	r3, [pc, #24]	; (377c <process+0x1c>)
{
    3762:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3764:	6818      	ldr	r0, [r3, #0]
{
    3766:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3768:	f7ff fc6c 	bl	3044 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    376c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    376e:	4603      	mov	r3, r0
}
    3770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    3774:	4802      	ldr	r0, [pc, #8]	; (3780 <process+0x20>)
    3776:	220f      	movs	r2, #15
    3778:	4718      	bx	r3
    377a:	bf00      	nop
    377c:	20000864 	.word	0x20000864
    3780:	0000c444 	.word	0x0000c444

00003784 <data_out_block_mode>:
{
    3784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3786:	4d19      	ldr	r5, [pc, #100]	; (37ec <data_out_block_mode+0x68>)
    3788:	4607      	mov	r7, r0
    378a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    378c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    378e:	4632      	mov	r2, r6
    3790:	4639      	mov	r1, r7
    3792:	2000      	movs	r0, #0
    3794:	f003 fca8 	bl	70e8 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3798:	b1c8      	cbz	r0, 37ce <data_out_block_mode+0x4a>
	host_present = true;
    379a:	2301      	movs	r3, #1
    379c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    379e:	4b14      	ldr	r3, [pc, #80]	; (37f0 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	b92b      	cbnz	r3, 37b0 <data_out_block_mode+0x2c>
}
    37a4:	4630      	mov	r0, r6
    37a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    37a8:	b95c      	cbnz	r4, 37c2 <data_out_block_mode+0x3e>
		host_present = false;
    37aa:	702c      	strb	r4, [r5, #0]
    37ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    37b0:	2000      	movs	r0, #0
    37b2:	f003 fce1 	bl	7178 <SEGGER_RTT_HasDataUp>
    37b6:	2800      	cmp	r0, #0
    37b8:	d0f4      	beq.n	37a4 <data_out_block_mode+0x20>
    37ba:	782b      	ldrb	r3, [r5, #0]
    37bc:	2b00      	cmp	r3, #0
    37be:	d1f3      	bne.n	37a8 <data_out_block_mode+0x24>
    37c0:	e7f0      	b.n	37a4 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    37c2:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    37c4:	f241 3088 	movw	r0, #5000	; 0x1388
    37c8:	f008 f929 	bl	ba1e <z_impl_k_busy_wait>
}
    37cc:	e7f0      	b.n	37b0 <data_out_block_mode+0x2c>
		} else if (host_present) {
    37ce:	782b      	ldrb	r3, [r5, #0]
    37d0:	b113      	cbz	r3, 37d8 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    37d2:	3c01      	subs	r4, #1
    37d4:	d104      	bne.n	37e0 <data_out_block_mode+0x5c>
		host_present = false;
    37d6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    37d8:	782b      	ldrb	r3, [r5, #0]
    37da:	2b00      	cmp	r3, #0
    37dc:	d1d7      	bne.n	378e <data_out_block_mode+0xa>
    37de:	e7e1      	b.n	37a4 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    37e0:	f241 3088 	movw	r0, #5000	; 0x1388
    37e4:	f008 f91b 	bl	ba1e <z_impl_k_busy_wait>
    37e8:	e7f6      	b.n	37d8 <data_out_block_mode+0x54>
    37ea:	bf00      	nop
    37ec:	2000d152 	.word	0x2000d152
    37f0:	2000d153 	.word	0x2000d153

000037f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    37f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37f8:	4605      	mov	r5, r0
    37fa:	f04f 0320 	mov.w	r3, #32
    37fe:	f3ef 8611 	mrs	r6, BASEPRI
    3802:	f383 8812 	msr	BASEPRI_MAX, r3
    3806:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    380a:	4821      	ldr	r0, [pc, #132]	; (3890 <pm_state_notify+0x9c>)
    380c:	f004 f894 	bl	7938 <z_spin_lock_valid>
    3810:	b968      	cbnz	r0, 382e <pm_state_notify+0x3a>
    3812:	4a20      	ldr	r2, [pc, #128]	; (3894 <pm_state_notify+0xa0>)
    3814:	4920      	ldr	r1, [pc, #128]	; (3898 <pm_state_notify+0xa4>)
    3816:	4821      	ldr	r0, [pc, #132]	; (389c <pm_state_notify+0xa8>)
    3818:	238e      	movs	r3, #142	; 0x8e
    381a:	f007 fb8b 	bl	af34 <assert_print>
    381e:	491c      	ldr	r1, [pc, #112]	; (3890 <pm_state_notify+0x9c>)
    3820:	481f      	ldr	r0, [pc, #124]	; (38a0 <pm_state_notify+0xac>)
    3822:	f007 fb87 	bl	af34 <assert_print>
    3826:	481b      	ldr	r0, [pc, #108]	; (3894 <pm_state_notify+0xa0>)
    3828:	218e      	movs	r1, #142	; 0x8e
    382a:	f007 fb7c 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    382e:	4818      	ldr	r0, [pc, #96]	; (3890 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3830:	4f1c      	ldr	r7, [pc, #112]	; (38a4 <pm_state_notify+0xb0>)
    3832:	f8df 8074 	ldr.w	r8, [pc, #116]	; 38a8 <pm_state_notify+0xb4>
    3836:	f004 f89d 	bl	7974 <z_spin_lock_set_owner>
	return list->head;
    383a:	4b1c      	ldr	r3, [pc, #112]	; (38ac <pm_state_notify+0xb8>)
    383c:	681c      	ldr	r4, [r3, #0]
    383e:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3842:	b9bc      	cbnz	r4, 3874 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3844:	4812      	ldr	r0, [pc, #72]	; (3890 <pm_state_notify+0x9c>)
    3846:	f004 f885 	bl	7954 <z_spin_unlock_valid>
    384a:	b968      	cbnz	r0, 3868 <pm_state_notify+0x74>
    384c:	4a11      	ldr	r2, [pc, #68]	; (3894 <pm_state_notify+0xa0>)
    384e:	4918      	ldr	r1, [pc, #96]	; (38b0 <pm_state_notify+0xbc>)
    3850:	4812      	ldr	r0, [pc, #72]	; (389c <pm_state_notify+0xa8>)
    3852:	23b9      	movs	r3, #185	; 0xb9
    3854:	f007 fb6e 	bl	af34 <assert_print>
    3858:	490d      	ldr	r1, [pc, #52]	; (3890 <pm_state_notify+0x9c>)
    385a:	4816      	ldr	r0, [pc, #88]	; (38b4 <pm_state_notify+0xc0>)
    385c:	f007 fb6a 	bl	af34 <assert_print>
    3860:	480c      	ldr	r0, [pc, #48]	; (3894 <pm_state_notify+0xa0>)
    3862:	21b9      	movs	r1, #185	; 0xb9
    3864:	f007 fb5f 	bl	af26 <assert_post_action>
	__asm__ volatile(
    3868:	f386 8811 	msr	BASEPRI, r6
    386c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3874:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3878:	2d00      	cmp	r5, #0
    387a:	bf18      	it	ne
    387c:	4613      	movne	r3, r2
		if (callback) {
    387e:	b12b      	cbz	r3, 388c <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3880:	f898 2014 	ldrb.w	r2, [r8, #20]
    3884:	fb09 f202 	mul.w	r2, r9, r2
    3888:	5cb8      	ldrb	r0, [r7, r2]
    388a:	4798      	blx	r3
	return node->next;
    388c:	6824      	ldr	r4, [r4, #0]
    388e:	e7d8      	b.n	3842 <pm_state_notify+0x4e>
    3890:	20000868 	.word	0x20000868
    3894:	0000cad0 	.word	0x0000cad0
    3898:	0000cb29 	.word	0x0000cb29
    389c:	0000c986 	.word	0x0000c986
    38a0:	0000cb3e 	.word	0x0000cb3e
    38a4:	20000870 	.word	0x20000870
    38a8:	20000f1c 	.word	0x20000f1c
    38ac:	2000087c 	.word	0x2000087c
    38b0:	0000cafd 	.word	0x0000cafd
    38b4:	0000cb14 	.word	0x0000cb14

000038b8 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    38b8:	4a0a      	ldr	r2, [pc, #40]	; (38e4 <atomic_clear_bit.constprop.0+0x2c>)
    38ba:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38be:	0943      	lsrs	r3, r0, #5
    38c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    38c4:	f000 001f 	and.w	r0, r0, #31
    38c8:	2301      	movs	r3, #1
    38ca:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38cc:	43db      	mvns	r3, r3
    38ce:	e852 0f00 	ldrex	r0, [r2]
    38d2:	4018      	ands	r0, r3
    38d4:	e842 0100 	strex	r1, r0, [r2]
    38d8:	2900      	cmp	r1, #0
    38da:	d1f8      	bne.n	38ce <atomic_clear_bit.constprop.0+0x16>
    38dc:	f3bf 8f5b 	dmb	ish
}
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	2000086c 	.word	0x2000086c

000038e8 <pm_system_resume>:

void pm_system_resume(void)
{
    38e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    38ea:	4b19      	ldr	r3, [pc, #100]	; (3950 <pm_system_resume+0x68>)
    38ec:	7d1c      	ldrb	r4, [r3, #20]
    38ee:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    38f2:	f004 031f 	and.w	r3, r4, #31
    38f6:	2201      	movs	r2, #1
    38f8:	409a      	lsls	r2, r3
    38fa:	4b16      	ldr	r3, [pc, #88]	; (3954 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    38fc:	0961      	lsrs	r1, r4, #5
    38fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3902:	43d0      	mvns	r0, r2
    3904:	e853 1f00 	ldrex	r1, [r3]
    3908:	ea01 0500 	and.w	r5, r1, r0
    390c:	e843 5600 	strex	r6, r5, [r3]
    3910:	2e00      	cmp	r6, #0
    3912:	d1f7      	bne.n	3904 <pm_system_resume+0x1c>
    3914:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3918:	420a      	tst	r2, r1
    391a:	d013      	beq.n	3944 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    391c:	4b0e      	ldr	r3, [pc, #56]	; (3958 <pm_system_resume+0x70>)
    391e:	4d0f      	ldr	r5, [pc, #60]	; (395c <pm_system_resume+0x74>)
    3920:	b18b      	cbz	r3, 3946 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3922:	230c      	movs	r3, #12
    3924:	4363      	muls	r3, r4
    3926:	18ea      	adds	r2, r5, r3
    3928:	5ce8      	ldrb	r0, [r5, r3]
    392a:	7851      	ldrb	r1, [r2, #1]
    392c:	f007 fbe3 	bl	b0f6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3930:	2000      	movs	r0, #0
    3932:	f7ff ff5f 	bl	37f4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3936:	230c      	movs	r3, #12
    3938:	435c      	muls	r4, r3
    393a:	192a      	adds	r2, r5, r4
    393c:	2300      	movs	r3, #0
    393e:	512b      	str	r3, [r5, r4]
    3940:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3944:	bd70      	pop	{r4, r5, r6, pc}
    3946:	f383 8811 	msr	BASEPRI, r3
    394a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    394e:	e7ef      	b.n	3930 <pm_system_resume+0x48>
    3950:	20000f1c 	.word	0x20000f1c
    3954:	20000884 	.word	0x20000884
    3958:	0000b0f7 	.word	0x0000b0f7
    395c:	20000870 	.word	0x20000870

00003960 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3964:	4b32      	ldr	r3, [pc, #200]	; (3a30 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3966:	4a33      	ldr	r2, [pc, #204]	; (3a34 <pm_system_suspend+0xd4>)
    3968:	7d1c      	ldrb	r4, [r3, #20]
    396a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    396e:	0963      	lsrs	r3, r4, #5
    3970:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3978:	4e2f      	ldr	r6, [pc, #188]	; (3a38 <pm_system_suspend+0xd8>)
    397a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    397e:	f004 091f 	and.w	r9, r4, #31
    3982:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3986:	f013 0f01 	tst.w	r3, #1
{
    398a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    398c:	d10a      	bne.n	39a4 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    398e:	4601      	mov	r1, r0
    3990:	4620      	mov	r0, r4
    3992:	f000 f869 	bl	3a68 <pm_policy_next_state>
		if (info != NULL) {
    3996:	b128      	cbz	r0, 39a4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    3998:	c807      	ldmia	r0, {r0, r1, r2}
    399a:	230c      	movs	r3, #12
    399c:	fb03 6304 	mla	r3, r3, r4, r6
    39a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    39a4:	230c      	movs	r3, #12
    39a6:	4363      	muls	r3, r4
    39a8:	18f2      	adds	r2, r6, r3
    39aa:	5cf5      	ldrb	r5, [r6, r3]
    39ac:	b92d      	cbnz	r5, 39ba <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    39ae:	4620      	mov	r0, r4
    39b0:	f7ff ff82 	bl	38b8 <atomic_clear_bit.constprop.0>
		ret = false;
    39b4:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    39b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    39ba:	1c7b      	adds	r3, r7, #1
    39bc:	d010      	beq.n	39e0 <pm_system_suspend+0x80>
    39be:	f8d2 c008 	ldr.w	ip, [r2, #8]
    39c2:	4d1e      	ldr	r5, [pc, #120]	; (3a3c <pm_system_suspend+0xdc>)
    39c4:	4a1e      	ldr	r2, [pc, #120]	; (3a40 <pm_system_suspend+0xe0>)
    39c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    39ca:	2100      	movs	r1, #0
    39cc:	fbec 5100 	umlal	r5, r1, ip, r0
    39d0:	2300      	movs	r3, #0
    39d2:	4628      	mov	r0, r5
    39d4:	f7fd f930 	bl	c38 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    39d8:	2101      	movs	r1, #1
    39da:	1a38      	subs	r0, r7, r0
    39dc:	f005 fdb4 	bl	9548 <z_set_timeout_expiry>
	k_sched_lock();
    39e0:	f004 fcae 	bl	8340 <k_sched_lock>
	pm_state_notify(true);
    39e4:	2001      	movs	r0, #1
    39e6:	f7ff ff05 	bl	37f4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    39ea:	f3bf 8f5b 	dmb	ish
    39ee:	4b15      	ldr	r3, [pc, #84]	; (3a44 <pm_system_suspend+0xe4>)
    39f0:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    39f2:	2301      	movs	r3, #1
    39f4:	fa03 f309 	lsl.w	r3, r3, r9
    39f8:	e858 2f00 	ldrex	r2, [r8]
    39fc:	431a      	orrs	r2, r3
    39fe:	e848 2100 	strex	r1, r2, [r8]
    3a02:	2900      	cmp	r1, #0
    3a04:	d1f8      	bne.n	39f8 <pm_system_suspend+0x98>
    3a06:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3a0a:	4b0f      	ldr	r3, [pc, #60]	; (3a48 <pm_system_suspend+0xe8>)
    3a0c:	b133      	cbz	r3, 3a1c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    3a0e:	230c      	movs	r3, #12
    3a10:	4363      	muls	r3, r4
    3a12:	18f2      	adds	r2, r6, r3
    3a14:	5cf0      	ldrb	r0, [r6, r3]
    3a16:	7851      	ldrb	r1, [r2, #1]
    3a18:	f007 fb61 	bl	b0de <pm_state_set>
	pm_system_resume();
    3a1c:	f7ff ff64 	bl	38e8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3a20:	4620      	mov	r0, r4
    3a22:	f7ff ff49 	bl	38b8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    3a26:	f004 fcff 	bl	8428 <k_sched_unlock>
	bool ret = true;
    3a2a:	2001      	movs	r0, #1
    3a2c:	e7c3      	b.n	39b6 <pm_system_suspend+0x56>
    3a2e:	bf00      	nop
    3a30:	20000f1c 	.word	0x20000f1c
    3a34:	2000086c 	.word	0x2000086c
    3a38:	20000870 	.word	0x20000870
    3a3c:	000f423f 	.word	0x000f423f
    3a40:	000f4240 	.word	0x000f4240
    3a44:	20000884 	.word	0x20000884
    3a48:	0000b0df 	.word	0x0000b0df

00003a4c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a4c:	4b05      	ldr	r3, [pc, #20]	; (3a64 <pm_policy_state_lock_is_active+0x18>)
    3a4e:	f3bf 8f5b 	dmb	ish
    3a52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3a56:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3a5a:	3800      	subs	r0, #0
    3a5c:	bf18      	it	ne
    3a5e:	2001      	movne	r0, #1
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	20000888 	.word	0x20000888

00003a68 <pm_policy_next_state>:
{
    3a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a6c:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3a6e:	a901      	add	r1, sp, #4
    3a70:	f000 f842 	bl	3af8 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3a74:	1e44      	subs	r4, r0, #1
    3a76:	b224      	sxth	r4, r4
    3a78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3a7c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3a80:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3a82:	00a4      	lsls	r4, r4, #2
    3a84:	b925      	cbnz	r5, 3a90 <pm_policy_next_state+0x28>
	return NULL;
    3a86:	462f      	mov	r7, r5
}
    3a88:	4638      	mov	r0, r7
    3a8a:	b003      	add	sp, #12
    3a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3a90:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    3a92:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    3a94:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    3a96:	f7ff ffd9 	bl	3a4c <pm_policy_state_lock_is_active>
    3a9a:	4606      	mov	r6, r0
    3a9c:	bb10      	cbnz	r0, 3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
    3a9e:	6878      	ldr	r0, [r7, #4]
    3aa0:	4a13      	ldr	r2, [pc, #76]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3aa2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    3aa6:	46cc      	mov	ip, r9
    3aa8:	4631      	mov	r1, r6
    3aaa:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3aae:	2300      	movs	r3, #0
    3ab0:	4660      	mov	r0, ip
    3ab2:	f7fd f8c1 	bl	c38 <__aeabi_uldivmod>
    3ab6:	4683      	mov	fp, r0
    3ab8:	68b8      	ldr	r0, [r7, #8]
    3aba:	4a0d      	ldr	r2, [pc, #52]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3abc:	46cc      	mov	ip, r9
    3abe:	4631      	mov	r1, r6
    3ac0:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3ac4:	2300      	movs	r3, #0
    3ac6:	4660      	mov	r0, ip
    3ac8:	f7fd f8b6 	bl	c38 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3acc:	4b09      	ldr	r3, [pc, #36]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3ace:	681b      	ldr	r3, [r3, #0]
    3ad0:	1c5a      	adds	r2, r3, #1
    3ad2:	d001      	beq.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3ad4:	4283      	cmp	r3, r0
    3ad6:	d905      	bls.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		if ((ticks == K_TICKS_FOREVER) ||
    3ad8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3adc:	d0d4      	beq.n	3a88 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    3ade:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    3ae0:	4540      	cmp	r0, r8
    3ae2:	d9d1      	bls.n	3a88 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3ae4:	3d01      	subs	r5, #1
    3ae6:	b2ad      	uxth	r5, r5
    3ae8:	3c0c      	subs	r4, #12
    3aea:	e7cb      	b.n	3a84 <pm_policy_next_state+0x1c>
    3aec:	000f423f 	.word	0x000f423f
    3af0:	000f4240 	.word	0x000f4240
    3af4:	20000008 	.word	0x20000008

00003af8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3af8:	b908      	cbnz	r0, 3afe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3afa:	4b02      	ldr	r3, [pc, #8]	; (3b04 <pm_state_cpu_get_all+0xc>)
    3afc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3afe:	2000      	movs	r0, #0
    3b00:	4770      	bx	lr
    3b02:	bf00      	nop
    3b04:	0000c454 	.word	0x0000c454

00003b08 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3b08:	4801      	ldr	r0, [pc, #4]	; (3b10 <nrf_cc3xx_platform_abort_init+0x8>)
    3b0a:	f006 bef5 	b.w	a8f8 <nrf_cc3xx_platform_set_abort>
    3b0e:	bf00      	nop
    3b10:	0000c454 	.word	0x0000c454

00003b14 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b14:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3b16:	4604      	mov	r4, r0
    3b18:	b918      	cbnz	r0, 3b22 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3b1a:	4b0d      	ldr	r3, [pc, #52]	; (3b50 <mutex_free_platform+0x3c>)
    3b1c:	480d      	ldr	r0, [pc, #52]	; (3b54 <mutex_free_platform+0x40>)
    3b1e:	685b      	ldr	r3, [r3, #4]
    3b20:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b22:	6861      	ldr	r1, [r4, #4]
    3b24:	f031 0304 	bics.w	r3, r1, #4
    3b28:	d00c      	beq.n	3b44 <mutex_free_platform+0x30>
    3b2a:	2908      	cmp	r1, #8
    3b2c:	d00a      	beq.n	3b44 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3b2e:	f011 0102 	ands.w	r1, r1, #2
    3b32:	d008      	beq.n	3b46 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3b34:	4808      	ldr	r0, [pc, #32]	; (3b58 <mutex_free_platform+0x44>)
    3b36:	4621      	mov	r1, r4
    3b38:	f003 fd5e 	bl	75f8 <k_mem_slab_free>
        mutex->mutex = NULL;
    3b3c:	2300      	movs	r3, #0
    3b3e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3b40:	2300      	movs	r3, #0
    3b42:	6063      	str	r3, [r4, #4]
}
    3b44:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3b46:	6820      	ldr	r0, [r4, #0]
    3b48:	2214      	movs	r2, #20
    3b4a:	f008 f8a4 	bl	bc96 <memset>
    3b4e:	e7f7      	b.n	3b40 <mutex_free_platform+0x2c>
    3b50:	20000154 	.word	0x20000154
    3b54:	0000cff3 	.word	0x0000cff3
    3b58:	20000da4 	.word	0x20000da4

00003b5c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b5c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3b5e:	b308      	cbz	r0, 3ba4 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3b60:	6843      	ldr	r3, [r0, #4]
    3b62:	2b04      	cmp	r3, #4
    3b64:	d110      	bne.n	3b88 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3b66:	2201      	movs	r2, #1
    3b68:	6803      	ldr	r3, [r0, #0]
    3b6a:	f3bf 8f5b 	dmb	ish
    3b6e:	e853 1f00 	ldrex	r1, [r3]
    3b72:	2900      	cmp	r1, #0
    3b74:	d103      	bne.n	3b7e <mutex_lock_platform+0x22>
    3b76:	e843 2000 	strex	r0, r2, [r3]
    3b7a:	2800      	cmp	r0, #0
    3b7c:	d1f7      	bne.n	3b6e <mutex_lock_platform+0x12>
    3b7e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b82:	d10b      	bne.n	3b9c <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3b84:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3b86:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b88:	b153      	cbz	r3, 3ba0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3b8a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b94:	f003 ff28 	bl	79e8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3b98:	2800      	cmp	r0, #0
    3b9a:	d0f3      	beq.n	3b84 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b9c:	4803      	ldr	r0, [pc, #12]	; (3bac <mutex_lock_platform+0x50>)
    3b9e:	e7f2      	b.n	3b86 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ba0:	4803      	ldr	r0, [pc, #12]	; (3bb0 <mutex_lock_platform+0x54>)
    3ba2:	e7f0      	b.n	3b86 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ba4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3ba8:	e7ed      	b.n	3b86 <mutex_lock_platform+0x2a>
    3baa:	bf00      	nop
    3bac:	ffff8fe9 	.word	0xffff8fe9
    3bb0:	ffff8fea 	.word	0xffff8fea

00003bb4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3bb4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3bb6:	b1c0      	cbz	r0, 3bea <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3bb8:	6843      	ldr	r3, [r0, #4]
    3bba:	2b04      	cmp	r3, #4
    3bbc:	d110      	bne.n	3be0 <mutex_unlock_platform+0x2c>
    3bbe:	2200      	movs	r2, #0
    3bc0:	6803      	ldr	r3, [r0, #0]
    3bc2:	f3bf 8f5b 	dmb	ish
    3bc6:	e853 1f00 	ldrex	r1, [r3]
    3bca:	2901      	cmp	r1, #1
    3bcc:	d103      	bne.n	3bd6 <mutex_unlock_platform+0x22>
    3bce:	e843 2000 	strex	r0, r2, [r3]
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d1f7      	bne.n	3bc6 <mutex_unlock_platform+0x12>
    3bd6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bda:	d109      	bne.n	3bf0 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3bdc:	2000      	movs	r0, #0
    }
}
    3bde:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3be0:	b143      	cbz	r3, 3bf4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3be2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3be4:	f003 fffa 	bl	7bdc <z_impl_k_mutex_unlock>
    3be8:	e7f8      	b.n	3bdc <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3bea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3bee:	e7f6      	b.n	3bde <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3bf0:	4801      	ldr	r0, [pc, #4]	; (3bf8 <mutex_unlock_platform+0x44>)
    3bf2:	e7f4      	b.n	3bde <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3bf4:	4801      	ldr	r0, [pc, #4]	; (3bfc <mutex_unlock_platform+0x48>)
    3bf6:	e7f2      	b.n	3bde <mutex_unlock_platform+0x2a>
    3bf8:	ffff8fe9 	.word	0xffff8fe9
    3bfc:	ffff8fea 	.word	0xffff8fea

00003c00 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3c00:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3c02:	4604      	mov	r4, r0
    3c04:	b918      	cbnz	r0, 3c0e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3c06:	4b16      	ldr	r3, [pc, #88]	; (3c60 <mutex_init_platform+0x60>)
    3c08:	4816      	ldr	r0, [pc, #88]	; (3c64 <mutex_init_platform+0x64>)
    3c0a:	685b      	ldr	r3, [r3, #4]
    3c0c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3c0e:	6863      	ldr	r3, [r4, #4]
    3c10:	2b04      	cmp	r3, #4
    3c12:	d023      	beq.n	3c5c <mutex_init_platform+0x5c>
    3c14:	2b08      	cmp	r3, #8
    3c16:	d021      	beq.n	3c5c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3c18:	b9cb      	cbnz	r3, 3c4e <mutex_init_platform+0x4e>
    3c1a:	6823      	ldr	r3, [r4, #0]
    3c1c:	b9bb      	cbnz	r3, 3c4e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3c1e:	4812      	ldr	r0, [pc, #72]	; (3c68 <mutex_init_platform+0x68>)
    3c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c28:	4621      	mov	r1, r4
    3c2a:	f003 fc79 	bl	7520 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3c2e:	b908      	cbnz	r0, 3c34 <mutex_init_platform+0x34>
    3c30:	6823      	ldr	r3, [r4, #0]
    3c32:	b91b      	cbnz	r3, 3c3c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3c34:	4b0a      	ldr	r3, [pc, #40]	; (3c60 <mutex_init_platform+0x60>)
    3c36:	480d      	ldr	r0, [pc, #52]	; (3c6c <mutex_init_platform+0x6c>)
    3c38:	685b      	ldr	r3, [r3, #4]
    3c3a:	4798      	blx	r3
    3c3c:	6820      	ldr	r0, [r4, #0]
    3c3e:	2214      	movs	r2, #20
    3c40:	2100      	movs	r1, #0
    3c42:	f008 f828 	bl	bc96 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3c46:	6863      	ldr	r3, [r4, #4]
    3c48:	f043 0302 	orr.w	r3, r3, #2
    3c4c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3c4e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3c50:	f007 feb8 	bl	b9c4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3c54:	6863      	ldr	r3, [r4, #4]
    3c56:	f043 0301 	orr.w	r3, r3, #1
    3c5a:	6063      	str	r3, [r4, #4]
}
    3c5c:	bd10      	pop	{r4, pc}
    3c5e:	bf00      	nop
    3c60:	20000154 	.word	0x20000154
    3c64:	0000cff3 	.word	0x0000cff3
    3c68:	20000da4 	.word	0x20000da4
    3c6c:	0000d019 	.word	0x0000d019

00003c70 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3c70:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3c72:	4906      	ldr	r1, [pc, #24]	; (3c8c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3c74:	4806      	ldr	r0, [pc, #24]	; (3c90 <nrf_cc3xx_platform_mutex_init+0x20>)
    3c76:	2340      	movs	r3, #64	; 0x40
    3c78:	2214      	movs	r2, #20
    3c7a:	f007 fe70 	bl	b95e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3c7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3c82:	4904      	ldr	r1, [pc, #16]	; (3c94 <nrf_cc3xx_platform_mutex_init+0x24>)
    3c84:	4804      	ldr	r0, [pc, #16]	; (3c98 <nrf_cc3xx_platform_mutex_init+0x28>)
    3c86:	f006 be97 	b.w	a9b8 <nrf_cc3xx_platform_set_mutexes>
    3c8a:	bf00      	nop
    3c8c:	200008a4 	.word	0x200008a4
    3c90:	20000da4 	.word	0x20000da4
    3c94:	0000c45c 	.word	0x0000c45c
    3c98:	0000c470 	.word	0x0000c470

00003c9c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c9c:	4901      	ldr	r1, [pc, #4]	; (3ca4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c9e:	2210      	movs	r2, #16
	str	r2, [r1]
    3ca0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3ca2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3ca4:	e000ed10 	.word	0xe000ed10

00003ca8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3ca8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3caa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3cac:	f380 8811 	msr	BASEPRI, r0
	isb
    3cb0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3cb4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3cb8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3cba:	b662      	cpsie	i
	isb
    3cbc:	f3bf 8f6f 	isb	sy

	bx	lr
    3cc0:	4770      	bx	lr
    3cc2:	bf00      	nop

00003cc4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3cc4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3cc6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3cc8:	f381 8811 	msr	BASEPRI, r1

	wfe
    3ccc:	bf20      	wfe

	msr	BASEPRI, r0
    3cce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3cd2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3cd4:	4770      	bx	lr
    3cd6:	bf00      	nop

00003cd8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3cd8:	b570      	push	{r4, r5, r6, lr}
    3cda:	4606      	mov	r6, r0
    3cdc:	b086      	sub	sp, #24

	if (esf != NULL) {
    3cde:	460d      	mov	r5, r1
    3ce0:	2900      	cmp	r1, #0
    3ce2:	d038      	beq.n	3d56 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3ce4:	688b      	ldr	r3, [r1, #8]
    3ce6:	9305      	str	r3, [sp, #20]
    3ce8:	684b      	ldr	r3, [r1, #4]
    3cea:	9304      	str	r3, [sp, #16]
    3cec:	680b      	ldr	r3, [r1, #0]
    3cee:	9303      	str	r3, [sp, #12]
    3cf0:	2400      	movs	r4, #0
    3cf2:	4b1c      	ldr	r3, [pc, #112]	; (3d64 <z_arm_fatal_error+0x8c>)
    3cf4:	491c      	ldr	r1, [pc, #112]	; (3d68 <z_arm_fatal_error+0x90>)
    3cf6:	9302      	str	r3, [sp, #8]
    3cf8:	2201      	movs	r2, #1
    3cfa:	4623      	mov	r3, r4
    3cfc:	4620      	mov	r0, r4
    3cfe:	e9cd 4400 	strd	r4, r4, [sp]
    3d02:	f007 f991 	bl	b028 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3d06:	696b      	ldr	r3, [r5, #20]
    3d08:	9305      	str	r3, [sp, #20]
    3d0a:	692b      	ldr	r3, [r5, #16]
    3d0c:	9304      	str	r3, [sp, #16]
    3d0e:	68eb      	ldr	r3, [r5, #12]
    3d10:	9303      	str	r3, [sp, #12]
    3d12:	4b16      	ldr	r3, [pc, #88]	; (3d6c <z_arm_fatal_error+0x94>)
    3d14:	4914      	ldr	r1, [pc, #80]	; (3d68 <z_arm_fatal_error+0x90>)
    3d16:	9400      	str	r4, [sp, #0]
    3d18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d1c:	2201      	movs	r2, #1
    3d1e:	4623      	mov	r3, r4
    3d20:	4620      	mov	r0, r4
    3d22:	f007 f981 	bl	b028 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3d26:	69eb      	ldr	r3, [r5, #28]
    3d28:	9303      	str	r3, [sp, #12]
    3d2a:	4b11      	ldr	r3, [pc, #68]	; (3d70 <z_arm_fatal_error+0x98>)
    3d2c:	490e      	ldr	r1, [pc, #56]	; (3d68 <z_arm_fatal_error+0x90>)
    3d2e:	9400      	str	r4, [sp, #0]
    3d30:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d34:	2201      	movs	r2, #1
    3d36:	4623      	mov	r3, r4
    3d38:	4620      	mov	r0, r4
    3d3a:	f007 f975 	bl	b028 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3d3e:	69ab      	ldr	r3, [r5, #24]
    3d40:	9303      	str	r3, [sp, #12]
    3d42:	4b0c      	ldr	r3, [pc, #48]	; (3d74 <z_arm_fatal_error+0x9c>)
    3d44:	4908      	ldr	r1, [pc, #32]	; (3d68 <z_arm_fatal_error+0x90>)
    3d46:	9400      	str	r4, [sp, #0]
    3d48:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d4c:	2201      	movs	r2, #1
    3d4e:	4623      	mov	r3, r4
    3d50:	4620      	mov	r0, r4
    3d52:	f007 f969 	bl	b028 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3d56:	4629      	mov	r1, r5
    3d58:	4630      	mov	r0, r6
}
    3d5a:	b006      	add	sp, #24
    3d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3d60:	f003 ba5e 	b.w	7220 <z_fatal_error>
    3d64:	0000d046 	.word	0x0000d046
    3d68:	0000c2d8 	.word	0x0000c2d8
    3d6c:	0000d075 	.word	0x0000d075
    3d70:	0000d0a4 	.word	0x0000d0a4
    3d74:	0000d0b3 	.word	0x0000d0b3

00003d78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3d78:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3d7a:	2800      	cmp	r0, #0
    3d7c:	db07      	blt.n	3d8e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d7e:	4a04      	ldr	r2, [pc, #16]	; (3d90 <arch_irq_enable+0x18>)
    3d80:	0941      	lsrs	r1, r0, #5
    3d82:	2301      	movs	r3, #1
    3d84:	f000 001f 	and.w	r0, r0, #31
    3d88:	4083      	lsls	r3, r0
    3d8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3d8e:	4770      	bx	lr
    3d90:	e000e100 	.word	0xe000e100

00003d94 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3d94:	4b05      	ldr	r3, [pc, #20]	; (3dac <arch_irq_is_enabled+0x18>)
    3d96:	0942      	lsrs	r2, r0, #5
    3d98:	f000 001f 	and.w	r0, r0, #31
    3d9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3da0:	2301      	movs	r3, #1
    3da2:	fa03 f000 	lsl.w	r0, r3, r0
}
    3da6:	4010      	ands	r0, r2
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop
    3dac:	e000e100 	.word	0xe000e100

00003db0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3db0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3db2:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3db4:	2d07      	cmp	r5, #7
{
    3db6:	4604      	mov	r4, r0
    3db8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3dba:	d90f      	bls.n	3ddc <z_arm_irq_priority_set+0x2c>
    3dbc:	4a11      	ldr	r2, [pc, #68]	; (3e04 <z_arm_irq_priority_set+0x54>)
    3dbe:	4912      	ldr	r1, [pc, #72]	; (3e08 <z_arm_irq_priority_set+0x58>)
    3dc0:	4812      	ldr	r0, [pc, #72]	; (3e0c <z_arm_irq_priority_set+0x5c>)
    3dc2:	2357      	movs	r3, #87	; 0x57
    3dc4:	f007 f8b6 	bl	af34 <assert_print>
    3dc8:	4811      	ldr	r0, [pc, #68]	; (3e10 <z_arm_irq_priority_set+0x60>)
    3dca:	4631      	mov	r1, r6
    3dcc:	2307      	movs	r3, #7
    3dce:	4622      	mov	r2, r4
    3dd0:	f007 f8b0 	bl	af34 <assert_print>
    3dd4:	480b      	ldr	r0, [pc, #44]	; (3e04 <z_arm_irq_priority_set+0x54>)
    3dd6:	2157      	movs	r1, #87	; 0x57
    3dd8:	f007 f8a5 	bl	af26 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3ddc:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3dde:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3de0:	bfac      	ite	ge
    3de2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3de6:	4b0b      	ldrlt	r3, [pc, #44]	; (3e14 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3de8:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dec:	bfb8      	it	lt
    3dee:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3df2:	b2ed      	uxtb	r5, r5
    3df4:	bfaa      	itet	ge
    3df6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dfa:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dfc:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3e00:	bd70      	pop	{r4, r5, r6, pc}
    3e02:	bf00      	nop
    3e04:	0000d0e1 	.word	0x0000d0e1
    3e08:	0000d117 	.word	0x0000d117
    3e0c:	0000c986 	.word	0x0000c986
    3e10:	0000d132 	.word	0x0000d132
    3e14:	e000ed14 	.word	0xe000ed14

00003e18 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3e18:	bf30      	wfi
    b z_SysNmiOnReset
    3e1a:	f7ff bffd 	b.w	3e18 <z_SysNmiOnReset>
    3e1e:	bf00      	nop

00003e20 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3e20:	4a0b      	ldr	r2, [pc, #44]	; (3e50 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3e22:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3e24:	4b0b      	ldr	r3, [pc, #44]	; (3e54 <z_arm_prep_c+0x34>)
    3e26:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3e2a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3e2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e30:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3e34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3e38:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3e40:	f003 fa82 	bl	7348 <z_bss_zero>
	z_data_copy();
    3e44:	f005 f9ba 	bl	91bc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3e48:	f000 fbe0 	bl	460c <z_arm_interrupt_init>
	z_cstart();
    3e4c:	f003 fac0 	bl	73d0 <z_cstart>
    3e50:	00000000 	.word	0x00000000
    3e54:	e000ed00 	.word	0xe000ed00

00003e58 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3e58:	4a09      	ldr	r2, [pc, #36]	; (3e80 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3e5a:	490a      	ldr	r1, [pc, #40]	; (3e84 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3e5c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3e5e:	6809      	ldr	r1, [r1, #0]
    3e60:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e62:	4909      	ldr	r1, [pc, #36]	; (3e88 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3e64:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3e66:	684b      	ldr	r3, [r1, #4]
    3e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3e6c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3e6e:	2300      	movs	r3, #0
    3e70:	f383 8811 	msr	BASEPRI, r3
    3e74:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3e78:	6893      	ldr	r3, [r2, #8]
}
    3e7a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop
    3e80:	20000f1c 	.word	0x20000f1c
    3e84:	0000c5dc 	.word	0x0000c5dc
    3e88:	e000ed00 	.word	0xe000ed00

00003e8c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3e8c:	4912      	ldr	r1, [pc, #72]	; (3ed8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3e8e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3e90:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3e94:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3e96:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3e9a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e9e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3ea0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3ea4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3ea8:	4f0c      	ldr	r7, [pc, #48]	; (3edc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3eaa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3eae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3eb0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3eb2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3eb4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3eb6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3eb8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3eba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3ebe:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3ec0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3ec2:	f000 fc3f 	bl	4744 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3ec6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3eca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3ece:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3ed2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3ed6:	4770      	bx	lr
    ldr r1, =_kernel
    3ed8:	20000f1c 	.word	0x20000f1c
    ldr v4, =_SCS_ICSR
    3edc:	e000ed04 	.word	0xe000ed04

00003ee0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3ee0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3ee4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3ee6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3eea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3eee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3ef0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3ef4:	2902      	cmp	r1, #2
    beq _oops
    3ef6:	d0ff      	beq.n	3ef8 <_oops>

00003ef8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3ef8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3efa:	f007 f8a5 	bl	b048 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3efe:	bd01      	pop	{r0, pc}

00003f00 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3f00:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3f04:	9b00      	ldr	r3, [sp, #0]
    3f06:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3f0a:	490a      	ldr	r1, [pc, #40]	; (3f34 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3f0c:	9b01      	ldr	r3, [sp, #4]
    3f0e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3f12:	9b02      	ldr	r3, [sp, #8]
    3f14:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3f18:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3f20:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3f24:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3f28:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3f2a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3f2c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3f2e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop
    3f34:	0000ad5f 	.word	0x0000ad5f

00003f38 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3f38:	4a09      	ldr	r2, [pc, #36]	; (3f60 <z_check_thread_stack_fail+0x28>)
{
    3f3a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3f3c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3f3e:	b170      	cbz	r0, 3f5e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3f40:	f113 0f16 	cmn.w	r3, #22
    3f44:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3f46:	d005      	beq.n	3f54 <z_check_thread_stack_fail+0x1c>
    3f48:	f1a0 0220 	sub.w	r2, r0, #32
    3f4c:	429a      	cmp	r2, r3
    3f4e:	d805      	bhi.n	3f5c <z_check_thread_stack_fail+0x24>
    3f50:	4283      	cmp	r3, r0
    3f52:	d203      	bcs.n	3f5c <z_check_thread_stack_fail+0x24>
		return 0;
    3f54:	4281      	cmp	r1, r0
    3f56:	bf28      	it	cs
    3f58:	2000      	movcs	r0, #0
    3f5a:	4770      	bx	lr
    3f5c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3f5e:	4770      	bx	lr
    3f60:	20000f1c 	.word	0x20000f1c

00003f64 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3f64:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3f66:	4b09      	ldr	r3, [pc, #36]	; (3f8c <arch_switch_to_main_thread+0x28>)
    3f68:	6098      	str	r0, [r3, #8]
{
    3f6a:	460d      	mov	r5, r1
    3f6c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3f6e:	f000 fbe9 	bl	4744 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3f72:	4620      	mov	r0, r4
    3f74:	f385 8809 	msr	PSP, r5
    3f78:	2100      	movs	r1, #0
    3f7a:	b663      	cpsie	if
    3f7c:	f381 8811 	msr	BASEPRI, r1
    3f80:	f3bf 8f6f 	isb	sy
    3f84:	2200      	movs	r2, #0
    3f86:	2300      	movs	r3, #0
    3f88:	f006 fee9 	bl	ad5e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3f8c:	20000f1c 	.word	0x20000f1c

00003f90 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3f90:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3f92:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3f94:	4a0b      	ldr	r2, [pc, #44]	; (3fc4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3f96:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3f98:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3f9a:	bf1e      	ittt	ne
	movne	r1, #0
    3f9c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3f9e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3fa0:	f007 fd01 	blne	b9a6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3fa4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3fa6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3faa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3fae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3fb2:	4905      	ldr	r1, [pc, #20]	; (3fc8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3fb4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3fb6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3fb8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3fba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3fbe:	4903      	ldr	r1, [pc, #12]	; (3fcc <_isr_wrapper+0x3c>)
	bx r1
    3fc0:	4708      	bx	r1
    3fc2:	0000      	.short	0x0000
	ldr r2, =_kernel
    3fc4:	20000f1c 	.word	0x20000f1c
	ldr r1, =_sw_isr_table
    3fc8:	0000c130 	.word	0x0000c130
	ldr r1, =z_arm_int_exit
    3fcc:	00003fd1 	.word	0x00003fd1

00003fd0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3fd0:	4b04      	ldr	r3, [pc, #16]	; (3fe4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3fd2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3fd4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3fd6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3fd8:	d003      	beq.n	3fe2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3fda:	4903      	ldr	r1, [pc, #12]	; (3fe8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3fe0:	600a      	str	r2, [r1, #0]

00003fe2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3fe2:	4770      	bx	lr
	ldr r3, =_kernel
    3fe4:	20000f1c 	.word	0x20000f1c
	ldr r1, =_SCS_ICSR
    3fe8:	e000ed04 	.word	0xe000ed04

00003fec <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fee:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3ff0:	2400      	movs	r4, #0
    3ff2:	4b3b      	ldr	r3, [pc, #236]	; (40e0 <bus_fault.constprop.0+0xf4>)
    3ff4:	9302      	str	r3, [sp, #8]
    3ff6:	e9cd 4400 	strd	r4, r4, [sp]
    3ffa:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ffc:	4607      	mov	r7, r0
    3ffe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4000:	2201      	movs	r2, #1
    4002:	4938      	ldr	r1, [pc, #224]	; (40e4 <bus_fault.constprop.0+0xf8>)
    4004:	4620      	mov	r0, r4
    4006:	f007 f82e 	bl	b066 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    400a:	4b37      	ldr	r3, [pc, #220]	; (40e8 <bus_fault.constprop.0+0xfc>)
    400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    400e:	04db      	lsls	r3, r3, #19
    4010:	d509      	bpl.n	4026 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    4012:	4b36      	ldr	r3, [pc, #216]	; (40ec <bus_fault.constprop.0+0x100>)
    4014:	4933      	ldr	r1, [pc, #204]	; (40e4 <bus_fault.constprop.0+0xf8>)
    4016:	9400      	str	r4, [sp, #0]
    4018:	e9cd 4301 	strd	r4, r3, [sp, #4]
    401c:	2201      	movs	r2, #1
    401e:	4623      	mov	r3, r4
    4020:	4620      	mov	r0, r4
    4022:	f007 f820 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4026:	4b30      	ldr	r3, [pc, #192]	; (40e8 <bus_fault.constprop.0+0xfc>)
    4028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    402a:	051d      	lsls	r5, r3, #20
    402c:	d509      	bpl.n	4042 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    402e:	4b30      	ldr	r3, [pc, #192]	; (40f0 <bus_fault.constprop.0+0x104>)
    4030:	9302      	str	r3, [sp, #8]
    4032:	2300      	movs	r3, #0
    4034:	e9cd 3300 	strd	r3, r3, [sp]
    4038:	492a      	ldr	r1, [pc, #168]	; (40e4 <bus_fault.constprop.0+0xf8>)
    403a:	2201      	movs	r2, #1
    403c:	4618      	mov	r0, r3
    403e:	f007 f812 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4042:	4d29      	ldr	r5, [pc, #164]	; (40e8 <bus_fault.constprop.0+0xfc>)
    4044:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4046:	059c      	lsls	r4, r3, #22
    4048:	d51e      	bpl.n	4088 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    404a:	2400      	movs	r4, #0
    404c:	4b29      	ldr	r3, [pc, #164]	; (40f4 <bus_fault.constprop.0+0x108>)
    404e:	9302      	str	r3, [sp, #8]
    4050:	2201      	movs	r2, #1
    4052:	4623      	mov	r3, r4
    4054:	4620      	mov	r0, r4
    4056:	e9cd 4400 	strd	r4, r4, [sp]
    405a:	4922      	ldr	r1, [pc, #136]	; (40e4 <bus_fault.constprop.0+0xf8>)
    405c:	f007 f803 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4060:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4062:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4064:	0410      	lsls	r0, r2, #16
    4066:	d50f      	bpl.n	4088 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4068:	9303      	str	r3, [sp, #12]
    406a:	4b23      	ldr	r3, [pc, #140]	; (40f8 <bus_fault.constprop.0+0x10c>)
    406c:	491d      	ldr	r1, [pc, #116]	; (40e4 <bus_fault.constprop.0+0xf8>)
    406e:	9400      	str	r4, [sp, #0]
    4070:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4074:	2201      	movs	r2, #1
    4076:	4623      	mov	r3, r4
    4078:	4620      	mov	r0, r4
    407a:	f006 fff4 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    407e:	b11f      	cbz	r7, 4088 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4080:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4086:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4088:	4b17      	ldr	r3, [pc, #92]	; (40e8 <bus_fault.constprop.0+0xfc>)
    408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    408c:	0559      	lsls	r1, r3, #21
    408e:	d509      	bpl.n	40a4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    4090:	4b1a      	ldr	r3, [pc, #104]	; (40fc <bus_fault.constprop.0+0x110>)
    4092:	9302      	str	r3, [sp, #8]
    4094:	2300      	movs	r3, #0
    4096:	e9cd 3300 	strd	r3, r3, [sp]
    409a:	4912      	ldr	r1, [pc, #72]	; (40e4 <bus_fault.constprop.0+0xf8>)
    409c:	2201      	movs	r2, #1
    409e:	4618      	mov	r0, r3
    40a0:	f006 ffe1 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    40a4:	4a10      	ldr	r2, [pc, #64]	; (40e8 <bus_fault.constprop.0+0xfc>)
    40a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40a8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    40ac:	d012      	beq.n	40d4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    40ae:	4b14      	ldr	r3, [pc, #80]	; (4100 <bus_fault.constprop.0+0x114>)
    40b0:	9302      	str	r3, [sp, #8]
    40b2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    40b4:	e9cd 3300 	strd	r3, r3, [sp]
    40b8:	490a      	ldr	r1, [pc, #40]	; (40e4 <bus_fault.constprop.0+0xf8>)
    40ba:	2201      	movs	r2, #1
    40bc:	4618      	mov	r0, r3
    40be:	f006 ffd2 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    40c2:	4a09      	ldr	r2, [pc, #36]	; (40e8 <bus_fault.constprop.0+0xfc>)
    40c4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    40c6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    40c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    40cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    40ce:	7030      	strb	r0, [r6, #0]

	return reason;
}
    40d0:	b005      	add	sp, #20
    40d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    40d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    40d6:	0492      	lsls	r2, r2, #18
    40d8:	d5f3      	bpl.n	40c2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    40da:	4a0a      	ldr	r2, [pc, #40]	; (4104 <bus_fault.constprop.0+0x118>)
    40dc:	9202      	str	r2, [sp, #8]
    40de:	e7e9      	b.n	40b4 <bus_fault.constprop.0+0xc8>
    40e0:	0000d172 	.word	0x0000d172
    40e4:	0000c2d8 	.word	0x0000c2d8
    40e8:	e000ed00 	.word	0xe000ed00
    40ec:	0000d188 	.word	0x0000d188
    40f0:	0000d199 	.word	0x0000d199
    40f4:	0000d1ac 	.word	0x0000d1ac
    40f8:	0000d1c5 	.word	0x0000d1c5
    40fc:	0000d1da 	.word	0x0000d1da
    4100:	0000d1f5 	.word	0x0000d1f5
    4104:	0000d20d 	.word	0x0000d20d

00004108 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    410a:	2400      	movs	r4, #0
    410c:	4b33      	ldr	r3, [pc, #204]	; (41dc <usage_fault.constprop.0+0xd4>)
    410e:	9302      	str	r3, [sp, #8]
    4110:	e9cd 4400 	strd	r4, r4, [sp]
    4114:	4623      	mov	r3, r4
    4116:	4932      	ldr	r1, [pc, #200]	; (41e0 <usage_fault.constprop.0+0xd8>)
    4118:	2201      	movs	r2, #1
    411a:	4620      	mov	r0, r4
    411c:	f006 ffa3 	bl	b066 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4120:	4b30      	ldr	r3, [pc, #192]	; (41e4 <usage_fault.constprop.0+0xdc>)
    4122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4124:	019b      	lsls	r3, r3, #6
    4126:	d509      	bpl.n	413c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    4128:	4b2f      	ldr	r3, [pc, #188]	; (41e8 <usage_fault.constprop.0+0xe0>)
    412a:	492d      	ldr	r1, [pc, #180]	; (41e0 <usage_fault.constprop.0+0xd8>)
    412c:	9400      	str	r4, [sp, #0]
    412e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4132:	2201      	movs	r2, #1
    4134:	4623      	mov	r3, r4
    4136:	4620      	mov	r0, r4
    4138:	f006 ff95 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    413c:	4b29      	ldr	r3, [pc, #164]	; (41e4 <usage_fault.constprop.0+0xdc>)
    413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4140:	01dc      	lsls	r4, r3, #7
    4142:	d509      	bpl.n	4158 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    4144:	4b29      	ldr	r3, [pc, #164]	; (41ec <usage_fault.constprop.0+0xe4>)
    4146:	9302      	str	r3, [sp, #8]
    4148:	2300      	movs	r3, #0
    414a:	e9cd 3300 	strd	r3, r3, [sp]
    414e:	4924      	ldr	r1, [pc, #144]	; (41e0 <usage_fault.constprop.0+0xd8>)
    4150:	2201      	movs	r2, #1
    4152:	4618      	mov	r0, r3
    4154:	f006 ff87 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4158:	4b22      	ldr	r3, [pc, #136]	; (41e4 <usage_fault.constprop.0+0xdc>)
    415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    415c:	0318      	lsls	r0, r3, #12
    415e:	d509      	bpl.n	4174 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    4160:	4b23      	ldr	r3, [pc, #140]	; (41f0 <usage_fault.constprop.0+0xe8>)
    4162:	9302      	str	r3, [sp, #8]
    4164:	2300      	movs	r3, #0
    4166:	e9cd 3300 	strd	r3, r3, [sp]
    416a:	491d      	ldr	r1, [pc, #116]	; (41e0 <usage_fault.constprop.0+0xd8>)
    416c:	2201      	movs	r2, #1
    416e:	4618      	mov	r0, r3
    4170:	f006 ff79 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4174:	4b1b      	ldr	r3, [pc, #108]	; (41e4 <usage_fault.constprop.0+0xdc>)
    4176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4178:	0359      	lsls	r1, r3, #13
    417a:	d509      	bpl.n	4190 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    417c:	4b1d      	ldr	r3, [pc, #116]	; (41f4 <usage_fault.constprop.0+0xec>)
    417e:	9302      	str	r3, [sp, #8]
    4180:	2300      	movs	r3, #0
    4182:	e9cd 3300 	strd	r3, r3, [sp]
    4186:	4916      	ldr	r1, [pc, #88]	; (41e0 <usage_fault.constprop.0+0xd8>)
    4188:	2201      	movs	r2, #1
    418a:	4618      	mov	r0, r3
    418c:	f006 ff6b 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4190:	4b14      	ldr	r3, [pc, #80]	; (41e4 <usage_fault.constprop.0+0xdc>)
    4192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4194:	039a      	lsls	r2, r3, #14
    4196:	d509      	bpl.n	41ac <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4198:	4b17      	ldr	r3, [pc, #92]	; (41f8 <usage_fault.constprop.0+0xf0>)
    419a:	9302      	str	r3, [sp, #8]
    419c:	2300      	movs	r3, #0
    419e:	e9cd 3300 	strd	r3, r3, [sp]
    41a2:	490f      	ldr	r1, [pc, #60]	; (41e0 <usage_fault.constprop.0+0xd8>)
    41a4:	2201      	movs	r2, #1
    41a6:	4618      	mov	r0, r3
    41a8:	f006 ff5d 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    41ac:	4b0d      	ldr	r3, [pc, #52]	; (41e4 <usage_fault.constprop.0+0xdc>)
    41ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41b0:	03db      	lsls	r3, r3, #15
    41b2:	d509      	bpl.n	41c8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    41b4:	4b11      	ldr	r3, [pc, #68]	; (41fc <usage_fault.constprop.0+0xf4>)
    41b6:	9302      	str	r3, [sp, #8]
    41b8:	2300      	movs	r3, #0
    41ba:	e9cd 3300 	strd	r3, r3, [sp]
    41be:	4908      	ldr	r1, [pc, #32]	; (41e0 <usage_fault.constprop.0+0xd8>)
    41c0:	2201      	movs	r2, #1
    41c2:	4618      	mov	r0, r3
    41c4:	f006 ff4f 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    41c8:	4a06      	ldr	r2, [pc, #24]	; (41e4 <usage_fault.constprop.0+0xdc>)
    41ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41cc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    41d0:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    41d4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    41d6:	6293      	str	r3, [r2, #40]	; 0x28
}
    41d8:	b004      	add	sp, #16
    41da:	bd10      	pop	{r4, pc}
    41dc:	0000d23c 	.word	0x0000d23c
    41e0:	0000c2d8 	.word	0x0000c2d8
    41e4:	e000ed00 	.word	0xe000ed00
    41e8:	0000d254 	.word	0x0000d254
    41ec:	0000d267 	.word	0x0000d267
    41f0:	0000d281 	.word	0x0000d281
    41f4:	0000d29f 	.word	0x0000d29f
    41f8:	0000d2c4 	.word	0x0000d2c4
    41fc:	0000d2de 	.word	0x0000d2de

00004200 <mem_manage_fault>:
{
    4200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4204:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    4206:	2400      	movs	r4, #0
    4208:	4b52      	ldr	r3, [pc, #328]	; (4354 <mem_manage_fault+0x154>)
    420a:	9302      	str	r3, [sp, #8]
    420c:	e9cd 4400 	strd	r4, r4, [sp]
    4210:	4623      	mov	r3, r4
{
    4212:	4680      	mov	r8, r0
    4214:	4689      	mov	r9, r1
    4216:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4218:	494f      	ldr	r1, [pc, #316]	; (4358 <mem_manage_fault+0x158>)
    421a:	2201      	movs	r2, #1
    421c:	4620      	mov	r0, r4
    421e:	f006 ff22 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4222:	4b4e      	ldr	r3, [pc, #312]	; (435c <mem_manage_fault+0x15c>)
    4224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4226:	06df      	lsls	r7, r3, #27
    4228:	d509      	bpl.n	423e <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    422a:	4b4d      	ldr	r3, [pc, #308]	; (4360 <mem_manage_fault+0x160>)
    422c:	494a      	ldr	r1, [pc, #296]	; (4358 <mem_manage_fault+0x158>)
    422e:	9400      	str	r4, [sp, #0]
    4230:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4234:	2201      	movs	r2, #1
    4236:	4623      	mov	r3, r4
    4238:	4620      	mov	r0, r4
    423a:	f006 ff14 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    423e:	4b47      	ldr	r3, [pc, #284]	; (435c <mem_manage_fault+0x15c>)
    4240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4242:	071d      	lsls	r5, r3, #28
    4244:	d509      	bpl.n	425a <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    4246:	4b47      	ldr	r3, [pc, #284]	; (4364 <mem_manage_fault+0x164>)
    4248:	9302      	str	r3, [sp, #8]
    424a:	2300      	movs	r3, #0
    424c:	e9cd 3300 	strd	r3, r3, [sp]
    4250:	4941      	ldr	r1, [pc, #260]	; (4358 <mem_manage_fault+0x158>)
    4252:	2201      	movs	r2, #1
    4254:	4618      	mov	r0, r3
    4256:	f006 ff06 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    425a:	4d40      	ldr	r5, [pc, #256]	; (435c <mem_manage_fault+0x15c>)
    425c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    425e:	079c      	lsls	r4, r3, #30
    4260:	d441      	bmi.n	42e6 <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    4262:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4266:	4b3d      	ldr	r3, [pc, #244]	; (435c <mem_manage_fault+0x15c>)
    4268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    426a:	07d9      	lsls	r1, r3, #31
    426c:	d509      	bpl.n	4282 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    426e:	4b3e      	ldr	r3, [pc, #248]	; (4368 <mem_manage_fault+0x168>)
    4270:	9302      	str	r3, [sp, #8]
    4272:	2300      	movs	r3, #0
    4274:	e9cd 3300 	strd	r3, r3, [sp]
    4278:	4937      	ldr	r1, [pc, #220]	; (4358 <mem_manage_fault+0x158>)
    427a:	2201      	movs	r2, #1
    427c:	4618      	mov	r0, r3
    427e:	f006 fef2 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4282:	4b36      	ldr	r3, [pc, #216]	; (435c <mem_manage_fault+0x15c>)
    4284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4286:	069a      	lsls	r2, r3, #26
    4288:	d509      	bpl.n	429e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    428a:	4b38      	ldr	r3, [pc, #224]	; (436c <mem_manage_fault+0x16c>)
    428c:	9302      	str	r3, [sp, #8]
    428e:	2300      	movs	r3, #0
    4290:	e9cd 3300 	strd	r3, r3, [sp]
    4294:	4930      	ldr	r1, [pc, #192]	; (4358 <mem_manage_fault+0x158>)
    4296:	2201      	movs	r2, #1
    4298:	4618      	mov	r0, r3
    429a:	f006 fee4 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    429e:	4c2f      	ldr	r4, [pc, #188]	; (435c <mem_manage_fault+0x15c>)
    42a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42a2:	06db      	lsls	r3, r3, #27
    42a4:	d402      	bmi.n	42ac <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    42a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    42a8:	079d      	lsls	r5, r3, #30
    42aa:	d550      	bpl.n	434e <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    42ac:	6863      	ldr	r3, [r4, #4]
    42ae:	0518      	lsls	r0, r3, #20
    42b0:	d54d      	bpl.n	434e <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    42b2:	4641      	mov	r1, r8
    42b4:	4638      	mov	r0, r7
    42b6:	f7ff fe3f 	bl	3f38 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    42ba:	2800      	cmp	r0, #0
    42bc:	d035      	beq.n	432a <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    42be:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    42c2:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    42c4:	4b25      	ldr	r3, [pc, #148]	; (435c <mem_manage_fault+0x15c>)
    42c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42c8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    42ca:	bf42      	ittt	mi
    42cc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    42ce:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    42d2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    42d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    42d6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    42da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    42dc:	2300      	movs	r3, #0
    42de:	7033      	strb	r3, [r6, #0]
}
    42e0:	b005      	add	sp, #20
    42e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    42e6:	2400      	movs	r4, #0
    42e8:	4b21      	ldr	r3, [pc, #132]	; (4370 <mem_manage_fault+0x170>)
    42ea:	9302      	str	r3, [sp, #8]
    42ec:	4620      	mov	r0, r4
    42ee:	4623      	mov	r3, r4
    42f0:	e9cd 4400 	strd	r4, r4, [sp]
    42f4:	4918      	ldr	r1, [pc, #96]	; (4358 <mem_manage_fault+0x158>)
    42f6:	2201      	movs	r2, #1
    42f8:	f006 feb5 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    42fc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    42fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4300:	0618      	lsls	r0, r3, #24
    4302:	d5ae      	bpl.n	4262 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4304:	4b1b      	ldr	r3, [pc, #108]	; (4374 <mem_manage_fault+0x174>)
    4306:	4914      	ldr	r1, [pc, #80]	; (4358 <mem_manage_fault+0x158>)
    4308:	9703      	str	r7, [sp, #12]
    430a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    430e:	9400      	str	r4, [sp, #0]
    4310:	4623      	mov	r3, r4
    4312:	2201      	movs	r2, #1
    4314:	4620      	mov	r0, r4
    4316:	f006 fea6 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    431a:	f1b9 0f00 	cmp.w	r9, #0
    431e:	d0a2      	beq.n	4266 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4320:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4326:	62ab      	str	r3, [r5, #40]	; 0x28
    4328:	e79d      	b.n	4266 <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    432a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    432c:	06d9      	lsls	r1, r3, #27
    432e:	d50e      	bpl.n	434e <mem_manage_fault+0x14e>
    4330:	4911      	ldr	r1, [pc, #68]	; (4378 <mem_manage_fault+0x178>)
    4332:	4a12      	ldr	r2, [pc, #72]	; (437c <mem_manage_fault+0x17c>)
    4334:	4812      	ldr	r0, [pc, #72]	; (4380 <mem_manage_fault+0x180>)
    4336:	f240 1349 	movw	r3, #329	; 0x149
    433a:	f006 fdfb 	bl	af34 <assert_print>
    433e:	4811      	ldr	r0, [pc, #68]	; (4384 <mem_manage_fault+0x184>)
    4340:	f006 fdf8 	bl	af34 <assert_print>
    4344:	480d      	ldr	r0, [pc, #52]	; (437c <mem_manage_fault+0x17c>)
    4346:	f240 1149 	movw	r1, #329	; 0x149
    434a:	f006 fdec 	bl	af26 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    434e:	2000      	movs	r0, #0
    4350:	e7b8      	b.n	42c4 <mem_manage_fault+0xc4>
    4352:	bf00      	nop
    4354:	0000d309 	.word	0x0000d309
    4358:	0000c2d8 	.word	0x0000c2d8
    435c:	e000ed00 	.word	0xe000ed00
    4360:	0000d31f 	.word	0x0000d31f
    4364:	0000d199 	.word	0x0000d199
    4368:	0000d380 	.word	0x0000d380
    436c:	0000d20d 	.word	0x0000d20d
    4370:	0000d352 	.word	0x0000d352
    4374:	0000d36a 	.word	0x0000d36a
    4378:	0000d3d9 	.word	0x0000d3d9
    437c:	0000d39f 	.word	0x0000d39f
    4380:	0000c986 	.word	0x0000c986
    4384:	0000d423 	.word	0x0000d423

00004388 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    438c:	4b83      	ldr	r3, [pc, #524]	; (459c <z_arm_fault+0x214>)
    438e:	685f      	ldr	r7, [r3, #4]
{
    4390:	b090      	sub	sp, #64	; 0x40
    4392:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4394:	f3c7 0608 	ubfx	r6, r7, #0, #9
    4398:	2300      	movs	r3, #0
    439a:	f383 8811 	msr	BASEPRI, r3
    439e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    43a2:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    43a6:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    43aa:	d10c      	bne.n	43c6 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    43ac:	f002 000c 	and.w	r0, r2, #12
    43b0:	2808      	cmp	r0, #8
    43b2:	d11a      	bne.n	43ea <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    43b4:	4a7a      	ldr	r2, [pc, #488]	; (45a0 <z_arm_fault+0x218>)
    43b6:	497b      	ldr	r1, [pc, #492]	; (45a4 <z_arm_fault+0x21c>)
    43b8:	9300      	str	r3, [sp, #0]
    43ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
    43be:	4618      	mov	r0, r3
    43c0:	2201      	movs	r2, #1
    43c2:	f006 fe50 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    43c6:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    43c8:	4a77      	ldr	r2, [pc, #476]	; (45a8 <z_arm_fault+0x220>)
    43ca:	4978      	ldr	r1, [pc, #480]	; (45ac <z_arm_fault+0x224>)
    43cc:	4878      	ldr	r0, [pc, #480]	; (45b0 <z_arm_fault+0x228>)
    43ce:	f240 33fb 	movw	r3, #1019	; 0x3fb
    43d2:	f006 fdaf 	bl	af34 <assert_print>
    43d6:	4877      	ldr	r0, [pc, #476]	; (45b4 <z_arm_fault+0x22c>)
    43d8:	f006 fdac 	bl	af34 <assert_print>
    43dc:	4872      	ldr	r0, [pc, #456]	; (45a8 <z_arm_fault+0x220>)
    43de:	f240 31fb 	movw	r1, #1019	; 0x3fb
    43e2:	f006 fda0 	bl	af26 <assert_post_action>
    43e6:	2400      	movs	r4, #0
    43e8:	e006      	b.n	43f8 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    43ea:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    43ec:	bf46      	itte	mi
    43ee:	460c      	movmi	r4, r1
	*nested_exc = false;
    43f0:	461d      	movmi	r5, r3
			*nested_exc = true;
    43f2:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    43f4:	2c00      	cmp	r4, #0
    43f6:	d0e7      	beq.n	43c8 <z_arm_fault+0x40>
	*recoverable = false;
    43f8:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    43fc:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    43fe:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    4402:	2b09      	cmp	r3, #9
    4404:	f200 80b0 	bhi.w	4568 <z_arm_fault+0x1e0>
    4408:	e8df f003 	tbb	[pc, r3]
    440c:	83a8a405 	.word	0x83a8a405
    4410:	aeaeaeae 	.word	0xaeaeaeae
    4414:	acae      	.short	0xacae
	PR_FAULT_INFO("***** HARD FAULT *****");
    4416:	4b68      	ldr	r3, [pc, #416]	; (45b8 <z_arm_fault+0x230>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4418:	4f60      	ldr	r7, [pc, #384]	; (459c <z_arm_fault+0x214>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    441a:	4962      	ldr	r1, [pc, #392]	; (45a4 <z_arm_fault+0x21c>)
    441c:	f8cd 8000 	str.w	r8, [sp]
    4420:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4424:	2300      	movs	r3, #0
    4426:	2201      	movs	r2, #1
    4428:	4618      	mov	r0, r3
    442a:	f006 fe1c 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    442e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
	*recoverable = false;
    4430:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4434:	f016 0602 	ands.w	r6, r6, #2
    4438:	d00c      	beq.n	4454 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    443a:	4b60      	ldr	r3, [pc, #384]	; (45bc <z_arm_fault+0x234>)
    443c:	f8cd 8000 	str.w	r8, [sp]
    4440:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4444:	2300      	movs	r3, #0
    4446:	4957      	ldr	r1, [pc, #348]	; (45a4 <z_arm_fault+0x21c>)
    4448:	2201      	movs	r2, #1
    444a:	4618      	mov	r0, r3
    444c:	f006 fe0b 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4450:	2200      	movs	r2, #0
    4452:	e028      	b.n	44a6 <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4456:	2b00      	cmp	r3, #0
    4458:	da04      	bge.n	4464 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    445a:	4b59      	ldr	r3, [pc, #356]	; (45c0 <z_arm_fault+0x238>)
    445c:	9600      	str	r6, [sp, #0]
    445e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4462:	e7ef      	b.n	4444 <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4466:	005b      	lsls	r3, r3, #1
    4468:	d567      	bpl.n	453a <z_arm_fault+0x1b2>
		PR_EXC("  Fault escalation (see below)");
    446a:	4b56      	ldr	r3, [pc, #344]	; (45c4 <z_arm_fault+0x23c>)
    446c:	494d      	ldr	r1, [pc, #308]	; (45a4 <z_arm_fault+0x21c>)
    446e:	9600      	str	r6, [sp, #0]
    4470:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4474:	2201      	movs	r2, #1
    4476:	4633      	mov	r3, r6
    4478:	4630      	mov	r0, r6
    447a:	f006 fdf4 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    447e:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4480:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    4484:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4488:	429a      	cmp	r2, r3
    448a:	d12c      	bne.n	44e6 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    448c:	6823      	ldr	r3, [r4, #0]
    448e:	9303      	str	r3, [sp, #12]
    4490:	4b4d      	ldr	r3, [pc, #308]	; (45c8 <z_arm_fault+0x240>)
    4492:	4944      	ldr	r1, [pc, #272]	; (45a4 <z_arm_fault+0x21c>)
    4494:	9600      	str	r6, [sp, #0]
    4496:	e9cd 6301 	strd	r6, r3, [sp, #4]
    449a:	2201      	movs	r2, #1
    449c:	4633      	mov	r3, r6
    449e:	4630      	mov	r0, r6
    44a0:	f006 fde1 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    44a4:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    44a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44aa:	b9cb      	cbnz	r3, 44e0 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    44ac:	ae08      	add	r6, sp, #32
    44ae:	f104 0720 	add.w	r7, r4, #32
    44b2:	6820      	ldr	r0, [r4, #0]
    44b4:	6861      	ldr	r1, [r4, #4]
    44b6:	4633      	mov	r3, r6
    44b8:	c303      	stmia	r3!, {r0, r1}
    44ba:	3408      	adds	r4, #8
    44bc:	42bc      	cmp	r4, r7
    44be:	461e      	mov	r6, r3
    44c0:	d1f7      	bne.n	44b2 <z_arm_fault+0x12a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    44c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    44c4:	2d00      	cmp	r5, #0
    44c6:	d063      	beq.n	4590 <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    44c8:	f3c3 0108 	ubfx	r1, r3, #0, #9
    44cc:	b921      	cbnz	r1, 44d8 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    44ce:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    44d2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    44d6:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    44d8:	a908      	add	r1, sp, #32
    44da:	4610      	mov	r0, r2
    44dc:	f7ff fbfc 	bl	3cd8 <z_arm_fatal_error>
}
    44e0:	b010      	add	sp, #64	; 0x40
    44e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    44e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    44ea:	b133      	cbz	r3, 44fa <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    44ec:	f10d 021f 	add.w	r2, sp, #31
    44f0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    44f2:	4620      	mov	r0, r4
    44f4:	f7ff fe84 	bl	4200 <mem_manage_fault>
    44f8:	e00d      	b.n	4516 <z_arm_fault+0x18e>
		} else if (SCB_BFSR != 0) {
    44fa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    44fe:	b12b      	cbz	r3, 450c <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    4500:	f10d 011f 	add.w	r1, sp, #31
    4504:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4506:	f7ff fd71 	bl	3fec <bus_fault.constprop.0>
    450a:	e004      	b.n	4516 <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
    450c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    450e:	b29b      	uxth	r3, r3
    4510:	b11b      	cbz	r3, 451a <z_arm_fault+0x192>
			reason = usage_fault(esf);
    4512:	f7ff fdf9 	bl	4108 <usage_fault.constprop.0>
    4516:	4602      	mov	r2, r0
    4518:	e7c5      	b.n	44a6 <z_arm_fault+0x11e>
			__ASSERT(0,
    451a:	492c      	ldr	r1, [pc, #176]	; (45cc <z_arm_fault+0x244>)
    451c:	4a22      	ldr	r2, [pc, #136]	; (45a8 <z_arm_fault+0x220>)
    451e:	4824      	ldr	r0, [pc, #144]	; (45b0 <z_arm_fault+0x228>)
    4520:	f240 23cd 	movw	r3, #717	; 0x2cd
    4524:	f006 fd06 	bl	af34 <assert_print>
    4528:	4829      	ldr	r0, [pc, #164]	; (45d0 <z_arm_fault+0x248>)
    452a:	f006 fd03 	bl	af34 <assert_print>
    452e:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    4532:	481d      	ldr	r0, [pc, #116]	; (45a8 <z_arm_fault+0x220>)
    4534:	f006 fcf7 	bl	af26 <assert_post_action>
    4538:	e78a      	b.n	4450 <z_arm_fault+0xc8>
    453a:	4924      	ldr	r1, [pc, #144]	; (45cc <z_arm_fault+0x244>)
    453c:	4a1a      	ldr	r2, [pc, #104]	; (45a8 <z_arm_fault+0x220>)
    453e:	481c      	ldr	r0, [pc, #112]	; (45b0 <z_arm_fault+0x228>)
    4540:	f240 23d1 	movw	r3, #721	; 0x2d1
    4544:	f006 fcf6 	bl	af34 <assert_print>
    4548:	4822      	ldr	r0, [pc, #136]	; (45d4 <z_arm_fault+0x24c>)
    454a:	f006 fcf3 	bl	af34 <assert_print>
    454e:	f240 21d1 	movw	r1, #721	; 0x2d1
    4552:	e7ee      	b.n	4532 <z_arm_fault+0x1aa>
		reason = mem_manage_fault(esf, 0, recoverable);
    4554:	f10d 021f 	add.w	r2, sp, #31
    4558:	2100      	movs	r1, #0
    455a:	e7ca      	b.n	44f2 <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    455c:	f10d 011f 	add.w	r1, sp, #31
    4560:	2000      	movs	r0, #0
    4562:	e7d0      	b.n	4506 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    4564:	4b1c      	ldr	r3, [pc, #112]	; (45d8 <z_arm_fault+0x250>)
    4566:	e769      	b.n	443c <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    4568:	4a1c      	ldr	r2, [pc, #112]	; (45dc <z_arm_fault+0x254>)
    456a:	4b1d      	ldr	r3, [pc, #116]	; (45e0 <z_arm_fault+0x258>)
    456c:	490d      	ldr	r1, [pc, #52]	; (45a4 <z_arm_fault+0x21c>)
    456e:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    4572:	bf18      	it	ne
    4574:	4613      	movne	r3, r2
    4576:	3e10      	subs	r6, #16
    4578:	e9cd 3603 	strd	r3, r6, [sp, #12]
    457c:	4b19      	ldr	r3, [pc, #100]	; (45e4 <z_arm_fault+0x25c>)
    457e:	9302      	str	r3, [sp, #8]
    4580:	2300      	movs	r3, #0
    4582:	e9cd 3300 	strd	r3, r3, [sp]
    4586:	2201      	movs	r2, #1
    4588:	4618      	mov	r0, r3
    458a:	f006 fd6c 	bl	b066 <z_log_msg2_runtime_create.constprop.0>
}
    458e:	e75f      	b.n	4450 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4590:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4594:	f023 0301 	bic.w	r3, r3, #1
    4598:	e79d      	b.n	44d6 <z_arm_fault+0x14e>
    459a:	bf00      	nop
    459c:	e000ed00 	.word	0xe000ed00
    45a0:	0000d474 	.word	0x0000d474
    45a4:	0000c2d8 	.word	0x0000c2d8
    45a8:	0000d39f 	.word	0x0000d39f
    45ac:	0000d49f 	.word	0x0000d49f
    45b0:	0000c986 	.word	0x0000c986
    45b4:	0000d4b2 	.word	0x0000d4b2
    45b8:	0000d4f0 	.word	0x0000d4f0
    45bc:	0000d507 	.word	0x0000d507
    45c0:	0000d528 	.word	0x0000d528
    45c4:	0000d536 	.word	0x0000d536
    45c8:	0000d555 	.word	0x0000d555
    45cc:	0000e2d1 	.word	0x0000e2d1
    45d0:	0000d571 	.word	0x0000d571
    45d4:	0000d595 	.word	0x0000d595
    45d8:	0000d5c5 	.word	0x0000d5c5
    45dc:	0000d45b 	.word	0x0000d45b
    45e0:	0000d446 	.word	0x0000d446
    45e4:	0000d5e9 	.word	0x0000d5e9

000045e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    45e8:	4a02      	ldr	r2, [pc, #8]	; (45f4 <z_arm_fault_init+0xc>)
    45ea:	6953      	ldr	r3, [r2, #20]
    45ec:	f043 0310 	orr.w	r3, r3, #16
    45f0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    45f2:	4770      	bx	lr
    45f4:	e000ed00 	.word	0xe000ed00

000045f8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    45f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    45fc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4600:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4602:	4672      	mov	r2, lr
	bl z_arm_fault
    4604:	f7ff fec0 	bl	4388 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4608:	bd01      	pop	{r0, pc}
    460a:	bf00      	nop

0000460c <z_arm_interrupt_init>:
    460c:	4804      	ldr	r0, [pc, #16]	; (4620 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    460e:	2300      	movs	r3, #0
    4610:	2120      	movs	r1, #32
    4612:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4614:	3301      	adds	r3, #1
    4616:	2b30      	cmp	r3, #48	; 0x30
    4618:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    461c:	d1f9      	bne.n	4612 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    461e:	4770      	bx	lr
    4620:	e000e100 	.word	0xe000e100

00004624 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4624:	2000      	movs	r0, #0
    msr CONTROL, r0
    4626:	f380 8814 	msr	CONTROL, r0
    isb
    462a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    462e:	f007 fd01 	bl	c034 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4632:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4634:	490d      	ldr	r1, [pc, #52]	; (466c <__start+0x48>)
    str r0, [r1]
    4636:	6008      	str	r0, [r1, #0]
    dsb
    4638:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    463c:	480c      	ldr	r0, [pc, #48]	; (4670 <__start+0x4c>)
    msr msp, r0
    463e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4642:	f000 f82b 	bl	469c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4646:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4648:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    464c:	4809      	ldr	r0, [pc, #36]	; (4674 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    464e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4652:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4654:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4658:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    465c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    465e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4660:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4664:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4668:	f7ff fbda 	bl	3e20 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    466c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4670:	200117a0 	.word	0x200117a0
    ldr r0, =z_interrupt_stacks
    4674:	2000fe20 	.word	0x2000fe20

00004678 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4678:	4907      	ldr	r1, [pc, #28]	; (4698 <z_arm_clear_arm_mpu_config+0x20>)
    467a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    467e:	2300      	movs	r3, #0
	int num_regions =
    4680:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4684:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4686:	4293      	cmp	r3, r2
    4688:	db00      	blt.n	468c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    468a:	4770      	bx	lr
  MPU->RNR = rnr;
    468c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4690:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4694:	3301      	adds	r3, #1
    4696:	e7f6      	b.n	4686 <z_arm_clear_arm_mpu_config+0xe>
    4698:	e000ed00 	.word	0xe000ed00

0000469c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    469c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    469e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    46a0:	2300      	movs	r3, #0
    46a2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    46a6:	f7ff ffe7 	bl	4678 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    46aa:	4b14      	ldr	r3, [pc, #80]	; (46fc <z_arm_init_arch_hw_at_boot+0x60>)
    46ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    46b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    46b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    46bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    46c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    46c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    46c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    46cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    46d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    46d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    46d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    46dc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    46e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    46e4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    46e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    46ec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    46f0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    46f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    46f6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    46fa:	bd08      	pop	{r3, pc}
    46fc:	e000e100 	.word	0xe000e100

00004700 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4700:	4b08      	ldr	r3, [pc, #32]	; (4724 <z_impl_k_thread_abort+0x24>)
    4702:	689b      	ldr	r3, [r3, #8]
    4704:	4283      	cmp	r3, r0
    4706:	d10b      	bne.n	4720 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4708:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    470c:	b143      	cbz	r3, 4720 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    470e:	4b06      	ldr	r3, [pc, #24]	; (4728 <z_impl_k_thread_abort+0x28>)
    4710:	685a      	ldr	r2, [r3, #4]
    4712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4716:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    471a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    471e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4720:	f004 bc98 	b.w	9054 <z_thread_abort>
    4724:	20000f1c 	.word	0x20000f1c
    4728:	e000ed00 	.word	0xe000ed00

0000472c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    472c:	4b02      	ldr	r3, [pc, #8]	; (4738 <z_arm_configure_static_mpu_regions+0xc>)
    472e:	4a03      	ldr	r2, [pc, #12]	; (473c <z_arm_configure_static_mpu_regions+0x10>)
    4730:	4803      	ldr	r0, [pc, #12]	; (4740 <z_arm_configure_static_mpu_regions+0x14>)
    4732:	2101      	movs	r1, #1
    4734:	f000 b886 	b.w	4844 <arm_core_mpu_configure_static_mpu_regions>
    4738:	20040000 	.word	0x20040000
    473c:	20000000 	.word	0x20000000
    4740:	0000c480 	.word	0x0000c480

00004744 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4744:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4746:	4b05      	ldr	r3, [pc, #20]	; (475c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4748:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    474a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    474c:	4a04      	ldr	r2, [pc, #16]	; (4760 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    474e:	2120      	movs	r1, #32
    4750:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4754:	4618      	mov	r0, r3
    4756:	2101      	movs	r1, #1
    4758:	f000 b89c 	b.w	4894 <arm_core_mpu_configure_dynamic_mpu_regions>
    475c:	20000dc4 	.word	0x20000dc4
    4760:	150b0000 	.word	0x150b0000

00004764 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4764:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4766:	4e28      	ldr	r6, [pc, #160]	; (4808 <mpu_configure_regions+0xa4>)
    4768:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    476a:	2500      	movs	r5, #0
    476c:	428d      	cmp	r5, r1
    476e:	da15      	bge.n	479c <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    4770:	6844      	ldr	r4, [r0, #4]
    4772:	2c00      	cmp	r4, #0
    4774:	d045      	beq.n	4802 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4776:	b1d3      	cbz	r3, 47ae <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4778:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    477c:	ea14 0f0c 	tst.w	r4, ip
    4780:	d00f      	beq.n	47a2 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4782:	4b22      	ldr	r3, [pc, #136]	; (480c <mpu_configure_regions+0xa8>)
    4784:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4786:	9302      	str	r3, [sp, #8]
    4788:	2300      	movs	r3, #0
    478a:	2201      	movs	r2, #1
    478c:	e9cd 3300 	strd	r3, r3, [sp]
    4790:	491f      	ldr	r1, [pc, #124]	; (4810 <mpu_configure_regions+0xac>)
    4792:	4618      	mov	r0, r3
    4794:	f006 fc77 	bl	b086 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    4798:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    479c:	4610      	mov	r0, r2
    479e:	b005      	add	sp, #20
    47a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    47a2:	2c1f      	cmp	r4, #31
    47a4:	d9ed      	bls.n	4782 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    47a6:	6807      	ldr	r7, [r0, #0]
		&&
    47a8:	ea1c 0f07 	tst.w	ip, r7
    47ac:	d1e9      	bne.n	4782 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    47ae:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    47b0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    47b2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    47b6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    47ba:	d910      	bls.n	47de <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    47bc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    47c0:	d80f      	bhi.n	47e2 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    47c2:	3c01      	subs	r4, #1
    47c4:	fab4 f484 	clz	r4, r4
    47c8:	f1c4 041f 	rsb	r4, r4, #31
    47cc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    47ce:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    47d2:	ea4c 0c04 	orr.w	ip, ip, r4
    47d6:	d906      	bls.n	47e6 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    47d8:	4b0e      	ldr	r3, [pc, #56]	; (4814 <mpu_configure_regions+0xb0>)
    47da:	9203      	str	r2, [sp, #12]
    47dc:	e7d3      	b.n	4786 <mpu_configure_regions+0x22>
		return REGION_32B;
    47de:	2408      	movs	r4, #8
    47e0:	e7f5      	b.n	47ce <mpu_configure_regions+0x6a>
		return REGION_4G;
    47e2:	243e      	movs	r4, #62	; 0x3e
    47e4:	e7f3      	b.n	47ce <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47e6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    47ea:	4314      	orrs	r4, r2
    47ec:	f044 0410 	orr.w	r4, r4, #16
    47f0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47f4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    47f8:	f04c 0401 	orr.w	r4, ip, #1
    47fc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    4800:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    4802:	3501      	adds	r5, #1
    4804:	300c      	adds	r0, #12
    4806:	e7b1      	b.n	476c <mpu_configure_regions+0x8>
    4808:	e000ed00 	.word	0xe000ed00
    480c:	0000d600 	.word	0x0000d600
    4810:	0000c2d0 	.word	0x0000c2d0
    4814:	0000d623 	.word	0x0000d623

00004818 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4818:	4b04      	ldr	r3, [pc, #16]	; (482c <arm_core_mpu_enable+0x14>)
    481a:	2205      	movs	r2, #5
    481c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4824:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4828:	4770      	bx	lr
    482a:	bf00      	nop
    482c:	e000ed00 	.word	0xe000ed00

00004830 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4830:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4834:	4b02      	ldr	r3, [pc, #8]	; (4840 <arm_core_mpu_disable+0x10>)
    4836:	2200      	movs	r2, #0
    4838:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    483c:	4770      	bx	lr
    483e:	bf00      	nop
    4840:	e000ed00 	.word	0xe000ed00

00004844 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4844:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4846:	4d0e      	ldr	r5, [pc, #56]	; (4880 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4848:	2301      	movs	r3, #1
    484a:	782a      	ldrb	r2, [r5, #0]
    484c:	460c      	mov	r4, r1
    484e:	f7ff ff89 	bl	4764 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4852:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4854:	3016      	adds	r0, #22
    4856:	d111      	bne.n	487c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4858:	f240 1311 	movw	r3, #273	; 0x111
    485c:	4a09      	ldr	r2, [pc, #36]	; (4884 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    485e:	490a      	ldr	r1, [pc, #40]	; (4888 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    4860:	480a      	ldr	r0, [pc, #40]	; (488c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    4862:	f006 fb67 	bl	af34 <assert_print>
    4866:	4621      	mov	r1, r4
    4868:	4809      	ldr	r0, [pc, #36]	; (4890 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    486a:	f006 fb63 	bl	af34 <assert_print>
			regions_num);
	}
}
    486e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4872:	4804      	ldr	r0, [pc, #16]	; (4884 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    4874:	f240 1111 	movw	r1, #273	; 0x111
    4878:	f006 bb55 	b.w	af26 <assert_post_action>
}
    487c:	bd38      	pop	{r3, r4, r5, pc}
    487e:	bf00      	nop
    4880:	2000d155 	.word	0x2000d155
    4884:	0000d649 	.word	0x0000d649
    4888:	0000e2d1 	.word	0x0000e2d1
    488c:	0000c986 	.word	0x0000c986
    4890:	0000d680 	.word	0x0000d680

00004894 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4894:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4896:	4a13      	ldr	r2, [pc, #76]	; (48e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    4898:	2300      	movs	r3, #0
    489a:	7812      	ldrb	r2, [r2, #0]
    489c:	460c      	mov	r4, r1
    489e:	f7ff ff61 	bl	4764 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    48a2:	f110 0f16 	cmn.w	r0, #22
    48a6:	d004      	beq.n	48b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    48a8:	4b0f      	ldr	r3, [pc, #60]	; (48e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    48aa:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    48ac:	2807      	cmp	r0, #7
    48ae:	dd12      	ble.n	48d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    48b0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    48b2:	4a0e      	ldr	r2, [pc, #56]	; (48ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    48b4:	490e      	ldr	r1, [pc, #56]	; (48f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    48b6:	480f      	ldr	r0, [pc, #60]	; (48f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    48b8:	f44f 7398 	mov.w	r3, #304	; 0x130
    48bc:	f006 fb3a 	bl	af34 <assert_print>
    48c0:	4621      	mov	r1, r4
    48c2:	480d      	ldr	r0, [pc, #52]	; (48f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    48c4:	f006 fb36 	bl	af34 <assert_print>
}
    48c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    48cc:	4807      	ldr	r0, [pc, #28]	; (48ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    48ce:	f44f 7198 	mov.w	r1, #304	; 0x130
    48d2:	f006 bb28 	b.w	af26 <assert_post_action>
  MPU->RNR = rnr;
    48d6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    48da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    48de:	3001      	adds	r0, #1
    48e0:	e7e4      	b.n	48ac <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    48e2:	bf00      	nop
    48e4:	2000d155 	.word	0x2000d155
    48e8:	e000ed00 	.word	0xe000ed00
    48ec:	0000d649 	.word	0x0000d649
    48f0:	0000e2d1 	.word	0x0000e2d1
    48f4:	0000c986 	.word	0x0000c986
    48f8:	0000d6ac 	.word	0x0000d6ac

000048fc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    48fc:	4928      	ldr	r1, [pc, #160]	; (49a0 <z_arm_mpu_init+0xa4>)
{
    48fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4900:	680c      	ldr	r4, [r1, #0]
    4902:	2c08      	cmp	r4, #8
    4904:	d913      	bls.n	492e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    4906:	f44f 73a4 	mov.w	r3, #328	; 0x148
    490a:	4a26      	ldr	r2, [pc, #152]	; (49a4 <z_arm_mpu_init+0xa8>)
    490c:	4926      	ldr	r1, [pc, #152]	; (49a8 <z_arm_mpu_init+0xac>)
    490e:	4827      	ldr	r0, [pc, #156]	; (49ac <z_arm_mpu_init+0xb0>)
    4910:	f006 fb10 	bl	af34 <assert_print>
    4914:	4826      	ldr	r0, [pc, #152]	; (49b0 <z_arm_mpu_init+0xb4>)
    4916:	2208      	movs	r2, #8
    4918:	4621      	mov	r1, r4
    491a:	f006 fb0b 	bl	af34 <assert_print>
    491e:	4821      	ldr	r0, [pc, #132]	; (49a4 <z_arm_mpu_init+0xa8>)
    4920:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4924:	f006 faff 	bl	af26 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    492c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    492e:	f7ff ff7f 	bl	4830 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4932:	6848      	ldr	r0, [r1, #4]
    4934:	491f      	ldr	r1, [pc, #124]	; (49b4 <z_arm_mpu_init+0xb8>)
    4936:	2200      	movs	r2, #0
    4938:	4294      	cmp	r4, r2
    493a:	f100 000c 	add.w	r0, r0, #12
    493e:	d10b      	bne.n	4958 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    4940:	4b1d      	ldr	r3, [pc, #116]	; (49b8 <z_arm_mpu_init+0xbc>)
    4942:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    4944:	f7ff ff68 	bl	4818 <arm_core_mpu_enable>
	__ASSERT(
    4948:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    494c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4950:	2b08      	cmp	r3, #8
    4952:	d114      	bne.n	497e <z_arm_mpu_init+0x82>
	return 0;
    4954:	2000      	movs	r0, #0
    4956:	e7e9      	b.n	492c <z_arm_mpu_init+0x30>
    4958:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    495c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    4960:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4964:	4313      	orrs	r3, r2
    4966:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    496a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    496e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4972:	f043 0301 	orr.w	r3, r3, #1
    4976:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    497a:	3201      	adds	r2, #1
    497c:	e7dc      	b.n	4938 <z_arm_mpu_init+0x3c>
	__ASSERT(
    497e:	4a09      	ldr	r2, [pc, #36]	; (49a4 <z_arm_mpu_init+0xa8>)
    4980:	490e      	ldr	r1, [pc, #56]	; (49bc <z_arm_mpu_init+0xc0>)
    4982:	480a      	ldr	r0, [pc, #40]	; (49ac <z_arm_mpu_init+0xb0>)
    4984:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4988:	f006 fad4 	bl	af34 <assert_print>
    498c:	480c      	ldr	r0, [pc, #48]	; (49c0 <z_arm_mpu_init+0xc4>)
    498e:	f006 fad1 	bl	af34 <assert_print>
    4992:	4804      	ldr	r0, [pc, #16]	; (49a4 <z_arm_mpu_init+0xa8>)
    4994:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4998:	f006 fac5 	bl	af26 <assert_post_action>
    499c:	e7da      	b.n	4954 <z_arm_mpu_init+0x58>
    499e:	bf00      	nop
    49a0:	0000c48c 	.word	0x0000c48c
    49a4:	0000d649 	.word	0x0000d649
    49a8:	0000e2d1 	.word	0x0000e2d1
    49ac:	0000c986 	.word	0x0000c986
    49b0:	0000d6d9 	.word	0x0000d6d9
    49b4:	e000ed00 	.word	0xe000ed00
    49b8:	2000d155 	.word	0x2000d155
    49bc:	0000d70d 	.word	0x0000d70d
    49c0:	0000d75d 	.word	0x0000d75d

000049c4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    49c4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    49c6:	4b0b      	ldr	r3, [pc, #44]	; (49f4 <malloc_prepare+0x30>)
    49c8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    49cc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    49d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    49d4:	d20c      	bcs.n	49f0 <malloc_prepare+0x2c>
    49d6:	4908      	ldr	r1, [pc, #32]	; (49f8 <malloc_prepare+0x34>)
    49d8:	4a08      	ldr	r2, [pc, #32]	; (49fc <malloc_prepare+0x38>)
    49da:	4809      	ldr	r0, [pc, #36]	; (4a00 <malloc_prepare+0x3c>)
    49dc:	2381      	movs	r3, #129	; 0x81
    49de:	f006 faa9 	bl	af34 <assert_print>
    49e2:	4808      	ldr	r0, [pc, #32]	; (4a04 <malloc_prepare+0x40>)
    49e4:	f006 faa6 	bl	af34 <assert_print>
    49e8:	4804      	ldr	r0, [pc, #16]	; (49fc <malloc_prepare+0x38>)
    49ea:	2181      	movs	r1, #129	; 0x81
    49ec:	f006 fa9b 	bl	af26 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    49f0:	2000      	movs	r0, #0
    49f2:	bd08      	pop	{r3, pc}
    49f4:	20011fc0 	.word	0x20011fc0
    49f8:	0000d7ae 	.word	0x0000d7ae
    49fc:	0000d77e 	.word	0x0000d77e
    4a00:	0000c986 	.word	0x0000c986
    4a04:	0000d7f5 	.word	0x0000d7f5

00004a08 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4a08:	4b01      	ldr	r3, [pc, #4]	; (4a10 <__stdout_hook_install+0x8>)
    4a0a:	6018      	str	r0, [r3, #0]
}
    4a0c:	4770      	bx	lr
    4a0e:	bf00      	nop
    4a10:	20000030 	.word	0x20000030

00004a14 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    4a16:	4f08      	ldr	r7, [pc, #32]	; (4a38 <z_impl_zephyr_read_stdin+0x24>)
{
    4a18:	4606      	mov	r6, r0
    4a1a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    4a1c:	2400      	movs	r4, #0
    4a1e:	42ac      	cmp	r4, r5
    4a20:	da08      	bge.n	4a34 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    4a22:	683b      	ldr	r3, [r7, #0]
    4a24:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4a26:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    4a28:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    4a2a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4a2e:	d001      	beq.n	4a34 <z_impl_zephyr_read_stdin+0x20>
    4a30:	280d      	cmp	r0, #13
    4a32:	d1f4      	bne.n	4a1e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    4a34:	4620      	mov	r0, r4
    4a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a38:	2000002c 	.word	0x2000002c

00004a3c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a3e:	4f0a      	ldr	r7, [pc, #40]	; (4a68 <z_impl_zephyr_write_stdout+0x2c>)
    4a40:	460d      	mov	r5, r1
    4a42:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4a44:	f1c0 0401 	rsb	r4, r0, #1
    4a48:	19a3      	adds	r3, r4, r6
    4a4a:	429d      	cmp	r5, r3
    4a4c:	dc01      	bgt.n	4a52 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4a4e:	4628      	mov	r0, r5
    4a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4a52:	7873      	ldrb	r3, [r6, #1]
    4a54:	2b0a      	cmp	r3, #10
    4a56:	d102      	bne.n	4a5e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4a58:	683b      	ldr	r3, [r7, #0]
    4a5a:	200d      	movs	r0, #13
    4a5c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4a5e:	683b      	ldr	r3, [r7, #0]
    4a60:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4a64:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4a66:	e7ef      	b.n	4a48 <z_impl_zephyr_write_stdout+0xc>
    4a68:	20000030 	.word	0x20000030

00004a6c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4a6c:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4a6e:	4802      	ldr	r0, [pc, #8]	; (4a78 <_exit+0xc>)
    4a70:	2105      	movs	r1, #5
    4a72:	f7ff ffe3 	bl	4a3c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    4a76:	e7fe      	b.n	4a76 <_exit+0xa>
    4a78:	0000d87c 	.word	0x0000d87c

00004a7c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    4a7c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    4a7e:	4c07      	ldr	r4, [pc, #28]	; (4a9c <_sbrk+0x20>)
    4a80:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4a82:	18c2      	adds	r2, r0, r3
    4a84:	4806      	ldr	r0, [pc, #24]	; (4aa0 <_sbrk+0x24>)
    4a86:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    4a8a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    4a8e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4a90:	bf3a      	itte	cc
    4a92:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    4a94:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    4a96:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	20000dd0 	.word	0x20000dd0
    4aa0:	20011fc0 	.word	0x20011fc0

00004aa4 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    4aa4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    4aa6:	4604      	mov	r4, r0
    4aa8:	b958      	cbnz	r0, 4ac2 <__retarget_lock_init_recursive+0x1e>
    4aaa:	4912      	ldr	r1, [pc, #72]	; (4af4 <__retarget_lock_init_recursive+0x50>)
    4aac:	4812      	ldr	r0, [pc, #72]	; (4af8 <__retarget_lock_init_recursive+0x54>)
    4aae:	4a13      	ldr	r2, [pc, #76]	; (4afc <__retarget_lock_init_recursive+0x58>)
    4ab0:	f240 1377 	movw	r3, #375	; 0x177
    4ab4:	f006 fa3e 	bl	af34 <assert_print>
    4ab8:	4810      	ldr	r0, [pc, #64]	; (4afc <__retarget_lock_init_recursive+0x58>)
    4aba:	f240 1177 	movw	r1, #375	; 0x177
    4abe:	f006 fa32 	bl	af26 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    4ac2:	2014      	movs	r0, #20
    4ac4:	f005 f934 	bl	9d30 <malloc>
    4ac8:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    4aca:	b970      	cbnz	r0, 4aea <__retarget_lock_init_recursive+0x46>
    4acc:	490c      	ldr	r1, [pc, #48]	; (4b00 <__retarget_lock_init_recursive+0x5c>)
    4ace:	4a0b      	ldr	r2, [pc, #44]	; (4afc <__retarget_lock_init_recursive+0x58>)
    4ad0:	4809      	ldr	r0, [pc, #36]	; (4af8 <__retarget_lock_init_recursive+0x54>)
    4ad2:	f240 137f 	movw	r3, #383	; 0x17f
    4ad6:	f006 fa2d 	bl	af34 <assert_print>
    4ada:	480a      	ldr	r0, [pc, #40]	; (4b04 <__retarget_lock_init_recursive+0x60>)
    4adc:	f006 fa2a 	bl	af34 <assert_print>
    4ae0:	4806      	ldr	r0, [pc, #24]	; (4afc <__retarget_lock_init_recursive+0x58>)
    4ae2:	f240 117f 	movw	r1, #383	; 0x17f
    4ae6:	f006 fa1e 	bl	af26 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
    4aea:	6820      	ldr	r0, [r4, #0]
}
    4aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4af0:	f006 bf68 	b.w	b9c4 <z_impl_k_mutex_init>
    4af4:	0000d883 	.word	0x0000d883
    4af8:	0000c986 	.word	0x0000c986
    4afc:	0000d77e 	.word	0x0000d77e
    4b00:	0000d882 	.word	0x0000d882
    4b04:	0000d8be 	.word	0x0000d8be

00004b08 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    4b08:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    4b0a:	4604      	mov	r4, r0
    4b0c:	b958      	cbnz	r0, 4b26 <__retarget_lock_acquire_recursive+0x1e>
    4b0e:	490a      	ldr	r1, [pc, #40]	; (4b38 <__retarget_lock_acquire_recursive+0x30>)
    4b10:	480a      	ldr	r0, [pc, #40]	; (4b3c <__retarget_lock_acquire_recursive+0x34>)
    4b12:	4a0b      	ldr	r2, [pc, #44]	; (4b40 <__retarget_lock_acquire_recursive+0x38>)
    4b14:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    4b18:	f006 fa0c 	bl	af34 <assert_print>
    4b1c:	4808      	ldr	r0, [pc, #32]	; (4b40 <__retarget_lock_acquire_recursive+0x38>)
    4b1e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    4b22:	f006 fa00 	bl	af26 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    4b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b2a:	4620      	mov	r0, r4
    4b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    4b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b34:	f002 bf58 	b.w	79e8 <z_impl_k_mutex_lock>
    4b38:	0000d883 	.word	0x0000d883
    4b3c:	0000c986 	.word	0x0000c986
    4b40:	0000d77e 	.word	0x0000d77e

00004b44 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    4b44:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    4b46:	4604      	mov	r4, r0
    4b48:	b958      	cbnz	r0, 4b62 <__retarget_lock_release_recursive+0x1e>
    4b4a:	4908      	ldr	r1, [pc, #32]	; (4b6c <__retarget_lock_release_recursive+0x28>)
    4b4c:	4808      	ldr	r0, [pc, #32]	; (4b70 <__retarget_lock_release_recursive+0x2c>)
    4b4e:	4a09      	ldr	r2, [pc, #36]	; (4b74 <__retarget_lock_release_recursive+0x30>)
    4b50:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    4b54:	f006 f9ee 	bl	af34 <assert_print>
    4b58:	4806      	ldr	r0, [pc, #24]	; (4b74 <__retarget_lock_release_recursive+0x30>)
    4b5a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    4b5e:	f006 f9e2 	bl	af26 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
    4b62:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
    4b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b68:	f003 b838 	b.w	7bdc <z_impl_k_mutex_unlock>
    4b6c:	0000d883 	.word	0x0000d883
    4b70:	0000c986 	.word	0x0000c986
    4b74:	0000d77e 	.word	0x0000d77e

00004b78 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4b78:	b508      	push	{r3, lr}
    4b7a:	211d      	movs	r1, #29
    4b7c:	4804      	ldr	r0, [pc, #16]	; (4b90 <__chk_fail+0x18>)
    4b7e:	f7ff ff5d 	bl	4a3c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4b82:	4040      	eors	r0, r0
    4b84:	f380 8811 	msr	BASEPRI, r0
    4b88:	f04f 0003 	mov.w	r0, #3
    4b8c:	df02      	svc	2
	CODE_UNREACHABLE;
    4b8e:	bf00      	nop
    4b90:	0000d8e1 	.word	0x0000d8e1

00004b94 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4b94:	b510      	push	{r4, lr}
	__asm__ volatile(
    4b96:	f04f 0320 	mov.w	r3, #32
    4b9a:	f3ef 8011 	mrs	r0, BASEPRI
    4b9e:	f383 8812 	msr	BASEPRI_MAX, r3
    4ba2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4ba6:	4a11      	ldr	r2, [pc, #68]	; (4bec <nordicsemi_nrf52_init+0x58>)
    4ba8:	2301      	movs	r3, #1
    4baa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4bae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4bb2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4bb6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4bba:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4bbe:	2c08      	cmp	r4, #8
    4bc0:	d108      	bne.n	4bd4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4bc2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    4bc6:	2905      	cmp	r1, #5
    4bc8:	d804      	bhi.n	4bd4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4bca:	4c09      	ldr	r4, [pc, #36]	; (4bf0 <nordicsemi_nrf52_init+0x5c>)
    4bcc:	5c61      	ldrb	r1, [r4, r1]
    4bce:	b109      	cbz	r1, 4bd4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4bd0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    4bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bd8:	2201      	movs	r2, #1
    4bda:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    4bde:	f380 8811 	msr	BASEPRI, r0
    4be2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4be6:	2000      	movs	r0, #0
    4be8:	bd10      	pop	{r4, pc}
    4bea:	bf00      	nop
    4bec:	4001e000 	.word	0x4001e000
    4bf0:	0000d90e 	.word	0x0000d90e

00004bf4 <sys_arch_reboot>:
    *p_gpregret = val;
    4bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4bf8:	b2c0      	uxtb	r0, r0
    4bfa:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4bfe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4c02:	4905      	ldr	r1, [pc, #20]	; (4c18 <sys_arch_reboot+0x24>)
    4c04:	4b05      	ldr	r3, [pc, #20]	; (4c1c <sys_arch_reboot+0x28>)
    4c06:	68ca      	ldr	r2, [r1, #12]
    4c08:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4c0c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4c0e:	60cb      	str	r3, [r1, #12]
    4c10:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4c14:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4c16:	e7fd      	b.n	4c14 <sys_arch_reboot+0x20>
    4c18:	e000ed00 	.word	0xe000ed00
    4c1c:	05fa0004 	.word	0x05fa0004

00004c20 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4c20:	b120      	cbz	r0, 4c2c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4c22:	4b03      	ldr	r3, [pc, #12]	; (4c30 <arch_busy_wait+0x10>)
    4c24:	0180      	lsls	r0, r0, #6
    4c26:	f043 0301 	orr.w	r3, r3, #1
    4c2a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4c2c:	4770      	bx	lr
    4c2e:	bf00      	nop
    4c30:	0000c340 	.word	0x0000c340

00004c34 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4c36:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4c38:	490a      	ldr	r1, [pc, #40]	; (4c64 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c3a:	4a0b      	ldr	r2, [pc, #44]	; (4c68 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4c3c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c3e:	2340      	movs	r3, #64	; 0x40
    4c40:	9300      	str	r3, [sp, #0]
    4c42:	1149      	asrs	r1, r1, #5
{
    4c44:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c46:	4623      	mov	r3, r4
    4c48:	4808      	ldr	r0, [pc, #32]	; (4c6c <onoff_start+0x38>)
    4c4a:	f006 fa6d 	bl	b128 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4c4e:	1e01      	subs	r1, r0, #0
    4c50:	da05      	bge.n	4c5e <onoff_start+0x2a>
		notify(mgr, err);
    4c52:	4628      	mov	r0, r5
    4c54:	4623      	mov	r3, r4
	}
}
    4c56:	b003      	add	sp, #12
    4c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4c5c:	4718      	bx	r3
}
    4c5e:	b003      	add	sp, #12
    4c60:	bd30      	pop	{r4, r5, pc}
    4c62:	bf00      	nop
    4c64:	20000de8 	.word	0x20000de8
    4c68:	0000b193 	.word	0x0000b193
    4c6c:	0000c0b8 	.word	0x0000c0b8

00004c70 <get_status>:
{
    4c70:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4c72:	b2cc      	uxtb	r4, r1
    4c74:	2c01      	cmp	r4, #1
{
    4c76:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4c78:	d909      	bls.n	4c8e <get_status+0x1e>
    4c7a:	4909      	ldr	r1, [pc, #36]	; (4ca0 <get_status+0x30>)
    4c7c:	4809      	ldr	r0, [pc, #36]	; (4ca4 <get_status+0x34>)
    4c7e:	4a0a      	ldr	r2, [pc, #40]	; (4ca8 <get_status+0x38>)
    4c80:	2379      	movs	r3, #121	; 0x79
    4c82:	f006 f957 	bl	af34 <assert_print>
    4c86:	4808      	ldr	r0, [pc, #32]	; (4ca8 <get_status+0x38>)
    4c88:	2179      	movs	r1, #121	; 0x79
    4c8a:	f006 f94c 	bl	af26 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4c8e:	692b      	ldr	r3, [r5, #16]
    4c90:	220c      	movs	r2, #12
    4c92:	fb04 3302 	mla	r3, r4, r2, r3
    4c96:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    4c98:	f000 0007 	and.w	r0, r0, #7
    4c9c:	bd38      	pop	{r3, r4, r5, pc}
    4c9e:	bf00      	nop
    4ca0:	0000d955 	.word	0x0000d955
    4ca4:	0000c986 	.word	0x0000c986
    4ca8:	0000d918 	.word	0x0000d918

00004cac <stop>:
{
    4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cae:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cb0:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    4cb2:	6906      	ldr	r6, [r0, #16]
{
    4cb4:	4605      	mov	r5, r0
    4cb6:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4cb8:	d90b      	bls.n	4cd2 <stop+0x26>
    4cba:	4919      	ldr	r1, [pc, #100]	; (4d20 <stop+0x74>)
    4cbc:	4819      	ldr	r0, [pc, #100]	; (4d24 <stop+0x78>)
    4cbe:	4a1a      	ldr	r2, [pc, #104]	; (4d28 <stop+0x7c>)
    4cc0:	f240 134d 	movw	r3, #333	; 0x14d
    4cc4:	f006 f936 	bl	af34 <assert_print>
    4cc8:	4817      	ldr	r0, [pc, #92]	; (4d28 <stop+0x7c>)
    4cca:	f240 114d 	movw	r1, #333	; 0x14d
    4cce:	f006 f92a 	bl	af26 <assert_post_action>
	__asm__ volatile(
    4cd2:	f04f 0320 	mov.w	r3, #32
    4cd6:	f3ef 8211 	mrs	r2, BASEPRI
    4cda:	f383 8812 	msr	BASEPRI_MAX, r3
    4cde:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4ce2:	210c      	movs	r1, #12
    4ce4:	fb01 6304 	mla	r3, r1, r4, r6
    4ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4cea:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4cee:	d008      	beq.n	4d02 <stop+0x56>
    4cf0:	429f      	cmp	r7, r3
    4cf2:	d006      	beq.n	4d02 <stop+0x56>
	__asm__ volatile(
    4cf4:	f382 8811 	msr	BASEPRI, r2
    4cf8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4d02:	434c      	muls	r4, r1
    4d04:	4426      	add	r6, r4
    4d06:	2301      	movs	r3, #1
    4d08:	64b3      	str	r3, [r6, #72]	; 0x48
    4d0a:	f382 8811 	msr	BASEPRI, r2
    4d0e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4d12:	686b      	ldr	r3, [r5, #4]
    4d14:	4423      	add	r3, r4
    4d16:	685b      	ldr	r3, [r3, #4]
    4d18:	4798      	blx	r3
	return 0;
    4d1a:	2000      	movs	r0, #0
    4d1c:	e7f0      	b.n	4d00 <stop+0x54>
    4d1e:	bf00      	nop
    4d20:	0000d955 	.word	0x0000d955
    4d24:	0000c986 	.word	0x0000c986
    4d28:	0000d918 	.word	0x0000d918

00004d2c <onoff_stop>:
{
    4d2c:	b570      	push	{r4, r5, r6, lr}
    4d2e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4d30:	4906      	ldr	r1, [pc, #24]	; (4d4c <onoff_stop+0x20>)
    4d32:	1a41      	subs	r1, r0, r1
{
    4d34:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4d36:	1149      	asrs	r1, r1, #5
    4d38:	4805      	ldr	r0, [pc, #20]	; (4d50 <onoff_stop+0x24>)
    4d3a:	2240      	movs	r2, #64	; 0x40
    4d3c:	f7ff ffb6 	bl	4cac <stop>
	notify(mgr, res);
    4d40:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4d42:	4601      	mov	r1, r0
	notify(mgr, res);
    4d44:	4620      	mov	r0, r4
}
    4d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4d4a:	4718      	bx	r3
    4d4c:	20000de8 	.word	0x20000de8
    4d50:	0000c0b8 	.word	0x0000c0b8

00004d54 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d54:	2200      	movs	r2, #0
{
    4d56:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d58:	2101      	movs	r1, #1
{
    4d5a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d5c:	4610      	mov	r0, r2
    4d5e:	f7ff f827 	bl	3db0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4d62:	480f      	ldr	r0, [pc, #60]	; (4da0 <clk_init+0x4c>)
    4d64:	f001 fc92 	bl	668c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4d68:	4b0e      	ldr	r3, [pc, #56]	; (4da4 <clk_init+0x50>)
    4d6a:	4298      	cmp	r0, r3
    4d6c:	d115      	bne.n	4d9a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4d6e:	f001 fcb3 	bl	66d8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4d72:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d74:	490c      	ldr	r1, [pc, #48]	; (4da8 <clk_init+0x54>)
    4d76:	4630      	mov	r0, r6
    4d78:	f005 ffde 	bl	ad38 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4d7c:	2800      	cmp	r0, #0
    4d7e:	db0b      	blt.n	4d98 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4d80:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d82:	4909      	ldr	r1, [pc, #36]	; (4da8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d84:	2501      	movs	r5, #1
    4d86:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4d88:	f104 0020 	add.w	r0, r4, #32
    4d8c:	f005 ffd4 	bl	ad38 <onoff_manager_init>
		if (err < 0) {
    4d90:	2800      	cmp	r0, #0
    4d92:	db01      	blt.n	4d98 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4d94:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    4d96:	2000      	movs	r0, #0
}
    4d98:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4d9a:	f06f 0004 	mvn.w	r0, #4
    4d9e:	e7fb      	b.n	4d98 <clk_init+0x44>
    4da0:	00004de1 	.word	0x00004de1
    4da4:	0bad0000 	.word	0x0bad0000
    4da8:	0000c4ac 	.word	0x0000c4ac

00004dac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4dac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4dae:	230c      	movs	r3, #12
    4db0:	4809      	ldr	r0, [pc, #36]	; (4dd8 <clkstarted_handle.constprop.0+0x2c>)
    4db2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4db4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4db6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4db8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    4dbc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4dbe:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    4dc0:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    4dc2:	4418      	add	r0, r3
    4dc4:	f006 f99d 	bl	b102 <set_on_state>
	if (callback) {
    4dc8:	b12d      	cbz	r5, 4dd6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4dca:	4632      	mov	r2, r6
    4dcc:	462b      	mov	r3, r5
    4dce:	4803      	ldr	r0, [pc, #12]	; (4ddc <clkstarted_handle.constprop.0+0x30>)
}
    4dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4dd4:	4718      	bx	r3
}
    4dd6:	bd70      	pop	{r4, r5, r6, pc}
    4dd8:	20000de8 	.word	0x20000de8
    4ddc:	0000c0b8 	.word	0x0000c0b8

00004de0 <clock_event_handler>:
	switch (event) {
    4de0:	2801      	cmp	r0, #1
{
    4de2:	b508      	push	{r3, lr}
	switch (event) {
    4de4:	d006      	beq.n	4df4 <clock_event_handler+0x14>
    4de6:	2803      	cmp	r0, #3
    4de8:	d008      	beq.n	4dfc <clock_event_handler+0x1c>
    4dea:	b9a8      	cbnz	r0, 4e18 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4dec:	4b10      	ldr	r3, [pc, #64]	; (4e30 <clock_event_handler+0x50>)
    4dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4df0:	075b      	lsls	r3, r3, #29
    4df2:	d11b      	bne.n	4e2c <clock_event_handler+0x4c>
}
    4df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4df8:	f7ff bfd8 	b.w	4dac <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4dfc:	490d      	ldr	r1, [pc, #52]	; (4e34 <clock_event_handler+0x54>)
    4dfe:	4a0e      	ldr	r2, [pc, #56]	; (4e38 <clock_event_handler+0x58>)
    4e00:	480e      	ldr	r0, [pc, #56]	; (4e3c <clock_event_handler+0x5c>)
    4e02:	f240 235e 	movw	r3, #606	; 0x25e
    4e06:	f006 f895 	bl	af34 <assert_print>
    4e0a:	f240 215e 	movw	r1, #606	; 0x25e
}
    4e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    4e12:	4809      	ldr	r0, [pc, #36]	; (4e38 <clock_event_handler+0x58>)
    4e14:	f006 b887 	b.w	af26 <assert_post_action>
    4e18:	4906      	ldr	r1, [pc, #24]	; (4e34 <clock_event_handler+0x54>)
    4e1a:	4a07      	ldr	r2, [pc, #28]	; (4e38 <clock_event_handler+0x58>)
    4e1c:	4807      	ldr	r0, [pc, #28]	; (4e3c <clock_event_handler+0x5c>)
    4e1e:	f240 2362 	movw	r3, #610	; 0x262
    4e22:	f006 f887 	bl	af34 <assert_print>
    4e26:	f240 2162 	movw	r1, #610	; 0x262
    4e2a:	e7f0      	b.n	4e0e <clock_event_handler+0x2e>
}
    4e2c:	bd08      	pop	{r3, pc}
    4e2e:	bf00      	nop
    4e30:	20000de8 	.word	0x20000de8
    4e34:	0000e2d1 	.word	0x0000e2d1
    4e38:	0000d918 	.word	0x0000d918
    4e3c:	0000c986 	.word	0x0000c986

00004e40 <generic_hfclk_start>:
{
    4e40:	b508      	push	{r3, lr}
	__asm__ volatile(
    4e42:	f04f 0320 	mov.w	r3, #32
    4e46:	f3ef 8111 	mrs	r1, BASEPRI
    4e4a:	f383 8812 	msr	BASEPRI_MAX, r3
    4e4e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4e52:	4a12      	ldr	r2, [pc, #72]	; (4e9c <generic_hfclk_start+0x5c>)
    4e54:	6813      	ldr	r3, [r2, #0]
    4e56:	f043 0002 	orr.w	r0, r3, #2
    4e5a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4e5c:	07da      	lsls	r2, r3, #31
    4e5e:	d408      	bmi.n	4e72 <generic_hfclk_start+0x32>
	__asm__ volatile(
    4e60:	f381 8811 	msr	BASEPRI, r1
    4e64:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4e68:	2001      	movs	r0, #1
}
    4e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4e6e:	f001 bc57 	b.w	6720 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4e72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e76:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4e7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4e7e:	07d3      	lsls	r3, r2, #31
    4e80:	d5ee      	bpl.n	4e60 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4e82:	4807      	ldr	r0, [pc, #28]	; (4ea0 <generic_hfclk_start+0x60>)
    4e84:	f006 f93d 	bl	b102 <set_on_state>
    4e88:	f381 8811 	msr	BASEPRI, r1
    4e8c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4e90:	2000      	movs	r0, #0
}
    4e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4e96:	f7ff bf89 	b.w	4dac <clkstarted_handle.constprop.0>
    4e9a:	bf00      	nop
    4e9c:	20000e40 	.word	0x20000e40
    4ea0:	20000e30 	.word	0x20000e30

00004ea4 <api_blocking_start>:
{
    4ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ea6:	2200      	movs	r2, #0
    4ea8:	2301      	movs	r3, #1
    4eaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4eae:	4a09      	ldr	r2, [pc, #36]	; (4ed4 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4eb0:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4eb4:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4eb6:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4eba:	f006 f963 	bl	b184 <api_start>
	if (err < 0) {
    4ebe:	2800      	cmp	r0, #0
    4ec0:	db05      	blt.n	4ece <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4ec6:	2300      	movs	r3, #0
    4ec8:	4668      	mov	r0, sp
    4eca:	f002 ff89 	bl	7de0 <z_impl_k_sem_take>
}
    4ece:	b005      	add	sp, #20
    4ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    4ed4:	0000b1b1 	.word	0x0000b1b1

00004ed8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ed8:	4b09      	ldr	r3, [pc, #36]	; (4f00 <generic_hfclk_stop+0x28>)
    4eda:	f3bf 8f5b 	dmb	ish
    4ede:	e853 2f00 	ldrex	r2, [r3]
    4ee2:	f022 0102 	bic.w	r1, r2, #2
    4ee6:	e843 1000 	strex	r0, r1, [r3]
    4eea:	2800      	cmp	r0, #0
    4eec:	d1f7      	bne.n	4ede <generic_hfclk_stop+0x6>
    4eee:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4ef2:	07d3      	lsls	r3, r2, #31
    4ef4:	d402      	bmi.n	4efc <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4ef6:	2001      	movs	r0, #1
    4ef8:	f001 bc76 	b.w	67e8 <nrfx_clock_stop>
}
    4efc:	4770      	bx	lr
    4efe:	bf00      	nop
    4f00:	20000e40 	.word	0x20000e40

00004f04 <z_nrf_clock_control_lf_on>:
{
    4f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4f08:	4947      	ldr	r1, [pc, #284]	; (5028 <z_nrf_clock_control_lf_on+0x124>)
    4f0a:	f3bf 8f5b 	dmb	ish
    4f0e:	4606      	mov	r6, r0
    4f10:	2201      	movs	r2, #1
    4f12:	e851 3f00 	ldrex	r3, [r1]
    4f16:	e841 2000 	strex	r0, r2, [r1]
    4f1a:	2800      	cmp	r0, #0
    4f1c:	d1f9      	bne.n	4f12 <z_nrf_clock_control_lf_on+0xe>
    4f1e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4f22:	b9a3      	cbnz	r3, 4f4e <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4f24:	4941      	ldr	r1, [pc, #260]	; (502c <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    4f26:	4842      	ldr	r0, [pc, #264]	; (5030 <z_nrf_clock_control_lf_on+0x12c>)
    4f28:	604b      	str	r3, [r1, #4]
    4f2a:	60cb      	str	r3, [r1, #12]
    4f2c:	608a      	str	r2, [r1, #8]
    4f2e:	f7fd fa91 	bl	2454 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4f32:	2800      	cmp	r0, #0
    4f34:	da0b      	bge.n	4f4e <z_nrf_clock_control_lf_on+0x4a>
    4f36:	493f      	ldr	r1, [pc, #252]	; (5034 <z_nrf_clock_control_lf_on+0x130>)
    4f38:	483f      	ldr	r0, [pc, #252]	; (5038 <z_nrf_clock_control_lf_on+0x134>)
    4f3a:	4a40      	ldr	r2, [pc, #256]	; (503c <z_nrf_clock_control_lf_on+0x138>)
    4f3c:	f44f 7308 	mov.w	r3, #544	; 0x220
    4f40:	f005 fff8 	bl	af34 <assert_print>
    4f44:	483d      	ldr	r0, [pc, #244]	; (503c <z_nrf_clock_control_lf_on+0x138>)
    4f46:	f44f 7108 	mov.w	r1, #544	; 0x220
    4f4a:	f005 ffec 	bl	af26 <assert_post_action>
	switch (start_mode) {
    4f4e:	b376      	cbz	r6, 4fae <z_nrf_clock_control_lf_on+0xaa>
    4f50:	1e73      	subs	r3, r6, #1
    4f52:	2b01      	cmp	r3, #1
    4f54:	d859      	bhi.n	500a <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4f56:	2e01      	cmp	r6, #1
    4f58:	d107      	bne.n	4f6a <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4f5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f5e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4f62:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4f66:	2b01      	cmp	r3, #1
    4f68:	d021      	beq.n	4fae <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4f6a:	f006 fd14 	bl	b996 <k_is_in_isr>
    4f6e:	4605      	mov	r5, r0
    4f70:	b9f8      	cbnz	r0, 4fb2 <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4f72:	4b33      	ldr	r3, [pc, #204]	; (5040 <z_nrf_clock_control_lf_on+0x13c>)
    4f74:	781b      	ldrb	r3, [r3, #0]
    4f76:	b1e3      	cbz	r3, 4fb2 <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4f7c:	2202      	movs	r2, #2
    4f7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4f82:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f84:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5044 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4f88:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4f8c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4f90:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4f94:	03d2      	lsls	r2, r2, #15
    4f96:	d516      	bpl.n	4fc6 <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4f98:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4f9c:	2b01      	cmp	r3, #1
    4f9e:	d001      	beq.n	4fa4 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4fa0:	2e01      	cmp	r6, #1
    4fa2:	d110      	bne.n	4fc6 <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4fa4:	b35d      	cbz	r5, 4ffe <z_nrf_clock_control_lf_on+0xfa>
    4fa6:	f387 8811 	msr	BASEPRI, r7
    4faa:	f3bf 8f6f 	isb	sy
}
    4fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4fb2:	f04f 0320 	mov.w	r3, #32
    4fb6:	f3ef 8711 	mrs	r7, BASEPRI
    4fba:	f383 8812 	msr	BASEPRI_MAX, r3
    4fbe:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4fc2:	2501      	movs	r5, #1
    4fc4:	e7de      	b.n	4f84 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4fc6:	b1ad      	cbz	r5, 4ff4 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4fc8:	4638      	mov	r0, r7
    4fca:	f7fe fe7b 	bl	3cc4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4fce:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d1da      	bne.n	4f8c <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4fd6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4fda:	2a00      	cmp	r2, #0
    4fdc:	d0d6      	beq.n	4f8c <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4fde:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4fe2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4fe6:	2301      	movs	r3, #1
    4fe8:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4fec:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ff0:	60a3      	str	r3, [r4, #8]
}
    4ff2:	e7cb      	b.n	4f8c <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    4ff4:	2100      	movs	r1, #0
    4ff6:	2021      	movs	r0, #33	; 0x21
    4ff8:	f003 ffd4 	bl	8fa4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4ffc:	e7e7      	b.n	4fce <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    4ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5002:	2202      	movs	r2, #2
    5004:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5008:	e7d1      	b.n	4fae <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    500a:	490f      	ldr	r1, [pc, #60]	; (5048 <z_nrf_clock_control_lf_on+0x144>)
    500c:	480a      	ldr	r0, [pc, #40]	; (5038 <z_nrf_clock_control_lf_on+0x134>)
    500e:	4a0b      	ldr	r2, [pc, #44]	; (503c <z_nrf_clock_control_lf_on+0x138>)
    5010:	f240 2332 	movw	r3, #562	; 0x232
    5014:	f005 ff8e 	bl	af34 <assert_print>
}
    5018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    501c:	4807      	ldr	r0, [pc, #28]	; (503c <z_nrf_clock_control_lf_on+0x138>)
    501e:	f240 2132 	movw	r1, #562	; 0x232
    5022:	f005 bf80 	b.w	af26 <assert_post_action>
    5026:	bf00      	nop
    5028:	20000de4 	.word	0x20000de4
    502c:	20000dd4 	.word	0x20000dd4
    5030:	20000e08 	.word	0x20000e08
    5034:	0000cf17 	.word	0x0000cf17
    5038:	0000c986 	.word	0x0000c986
    503c:	0000d918 	.word	0x0000d918
    5040:	2000d566 	.word	0x2000d566
    5044:	e000e100 	.word	0xe000e100
    5048:	0000e2d1 	.word	0x0000e2d1

0000504c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    504c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    504e:	4b08      	ldr	r3, [pc, #32]	; (5070 <uart_console_init+0x24>)
    5050:	4808      	ldr	r0, [pc, #32]	; (5074 <uart_console_init+0x28>)
    5052:	6018      	str	r0, [r3, #0]
    5054:	f006 fc65 	bl	b922 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    5058:	b138      	cbz	r0, 506a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    505a:	4807      	ldr	r0, [pc, #28]	; (5078 <uart_console_init+0x2c>)
    505c:	f7ff fcd4 	bl	4a08 <__stdout_hook_install>
	__printk_hook_install(console_out);
    5060:	4805      	ldr	r0, [pc, #20]	; (5078 <uart_console_init+0x2c>)
    5062:	f7fc ffa3 	bl	1fac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    5066:	2000      	movs	r0, #0
}
    5068:	bd08      	pop	{r3, pc}
		return -ENODEV;
    506a:	f06f 0012 	mvn.w	r0, #18
    506e:	e7fb      	b.n	5068 <uart_console_init+0x1c>
    5070:	20000e44 	.word	0x20000e44
    5074:	0000c118 	.word	0x0000c118
    5078:	0000507d 	.word	0x0000507d

0000507c <console_out>:
	if ('\n' == c) {
    507c:	280a      	cmp	r0, #10
{
    507e:	b538      	push	{r3, r4, r5, lr}
    5080:	4d07      	ldr	r5, [pc, #28]	; (50a0 <console_out+0x24>)
    5082:	4604      	mov	r4, r0
	if ('\n' == c) {
    5084:	d104      	bne.n	5090 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    5086:	6828      	ldr	r0, [r5, #0]
    5088:	6883      	ldr	r3, [r0, #8]
    508a:	210d      	movs	r1, #13
    508c:	69db      	ldr	r3, [r3, #28]
    508e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5090:	6828      	ldr	r0, [r5, #0]
    5092:	6883      	ldr	r3, [r0, #8]
    5094:	b2e1      	uxtb	r1, r4
    5096:	69db      	ldr	r3, [r3, #28]
    5098:	4798      	blx	r3
}
    509a:	4620      	mov	r0, r4
    509c:	bd38      	pop	{r3, r4, r5, pc}
    509e:	bf00      	nop
    50a0:	20000e44 	.word	0x20000e44

000050a4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    50a4:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    50a6:	6905      	ldr	r5, [r0, #16]
{
    50a8:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    50aa:	460c      	mov	r4, r1
    50ac:	b961      	cbnz	r1, 50c8 <gpio_nrfx_manage_callback+0x24>
    50ae:	4922      	ldr	r1, [pc, #136]	; (5138 <gpio_nrfx_manage_callback+0x94>)
    50b0:	4a22      	ldr	r2, [pc, #136]	; (513c <gpio_nrfx_manage_callback+0x98>)
    50b2:	4823      	ldr	r0, [pc, #140]	; (5140 <gpio_nrfx_manage_callback+0x9c>)
    50b4:	2324      	movs	r3, #36	; 0x24
    50b6:	f005 ff3d 	bl	af34 <assert_print>
    50ba:	4822      	ldr	r0, [pc, #136]	; (5144 <gpio_nrfx_manage_callback+0xa0>)
    50bc:	f005 ff3a 	bl	af34 <assert_print>
    50c0:	481e      	ldr	r0, [pc, #120]	; (513c <gpio_nrfx_manage_callback+0x98>)
    50c2:	2124      	movs	r1, #36	; 0x24
    50c4:	f005 ff2f 	bl	af26 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    50c8:	6863      	ldr	r3, [r4, #4]
    50ca:	b963      	cbnz	r3, 50e6 <gpio_nrfx_manage_callback+0x42>
    50cc:	491e      	ldr	r1, [pc, #120]	; (5148 <gpio_nrfx_manage_callback+0xa4>)
    50ce:	4a1b      	ldr	r2, [pc, #108]	; (513c <gpio_nrfx_manage_callback+0x98>)
    50d0:	481b      	ldr	r0, [pc, #108]	; (5140 <gpio_nrfx_manage_callback+0x9c>)
    50d2:	2325      	movs	r3, #37	; 0x25
    50d4:	f005 ff2e 	bl	af34 <assert_print>
    50d8:	481c      	ldr	r0, [pc, #112]	; (514c <gpio_nrfx_manage_callback+0xa8>)
    50da:	f005 ff2b 	bl	af34 <assert_print>
    50de:	4817      	ldr	r0, [pc, #92]	; (513c <gpio_nrfx_manage_callback+0x98>)
    50e0:	2125      	movs	r1, #37	; 0x25
    50e2:	f005 ff20 	bl	af26 <assert_post_action>
	return list->head;
    50e6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    50e8:	b14b      	cbz	r3, 50fe <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    50ea:	42a3      	cmp	r3, r4
    50ec:	d113      	bne.n	5116 <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    50ee:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    50f0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    50f2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    50f4:	4294      	cmp	r4, r2
    50f6:	d100      	bne.n	50fa <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    50f8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    50fa:	2300      	movs	r3, #0
    50fc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    50fe:	b97e      	cbnz	r6, 5120 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5100:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    5102:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5104:	429c      	cmp	r4, r3
    5106:	d106      	bne.n	5116 <gpio_nrfx_manage_callback+0x72>
	return node->next;
    5108:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    510a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    510c:	68ab      	ldr	r3, [r5, #8]
    510e:	429c      	cmp	r4, r3
    5110:	d1f3      	bne.n	50fa <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    5112:	60aa      	str	r2, [r5, #8]
}
    5114:	e7f1      	b.n	50fa <gpio_nrfx_manage_callback+0x56>
	return node->next;
    5116:	461a      	mov	r2, r3
    5118:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    511a:	2b00      	cmp	r3, #0
    511c:	d1f2      	bne.n	5104 <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    511e:	b13e      	cbz	r6, 5130 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    5120:	686b      	ldr	r3, [r5, #4]
    5122:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    5124:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    5126:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    5128:	2b00      	cmp	r3, #0
    512a:	d1e9      	bne.n	5100 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    512c:	60ac      	str	r4, [r5, #8]
}
    512e:	e7e7      	b.n	5100 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    5130:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5134:	e7e5      	b.n	5102 <gpio_nrfx_manage_callback+0x5e>
    5136:	bf00      	nop
    5138:	0000d9c6 	.word	0x0000d9c6
    513c:	0000d999 	.word	0x0000d999
    5140:	0000c986 	.word	0x0000c986
    5144:	0000d9cf 	.word	0x0000d9cf
    5148:	0000d9de 	.word	0x0000d9de
    514c:	0000d9f0 	.word	0x0000d9f0

00005150 <gpio_nrfx_pin_interrupt_configure>:
{
    5150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    5152:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5154:	7b05      	ldrb	r5, [r0, #12]
    5156:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    515a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    515e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5162:	d104      	bne.n	516e <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    5164:	4620      	mov	r0, r4
    5166:	f001 fe5b 	bl	6e20 <nrfx_gpiote_trigger_disable>
		return 0;
    516a:	2000      	movs	r0, #0
    516c:	e05d      	b.n	522a <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    516e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5170:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5174:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5178:	d114      	bne.n	51a4 <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    517a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    517e:	bf0c      	ite	eq
    5180:	2304      	moveq	r3, #4
    5182:	2305      	movne	r3, #5
    5184:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5188:	2300      	movs	r3, #0
    518a:	4619      	mov	r1, r3
    518c:	aa02      	add	r2, sp, #8
    518e:	4620      	mov	r0, r4
    5190:	f001 fc4c 	bl	6a2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5194:	4b34      	ldr	r3, [pc, #208]	; (5268 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5196:	4298      	cmp	r0, r3
    5198:	d162      	bne.n	5260 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    519a:	2101      	movs	r1, #1
    519c:	4620      	mov	r0, r4
    519e:	f001 fdcf 	bl	6d40 <nrfx_gpiote_trigger_enable>
	return 0;
    51a2:	e7e2      	b.n	516a <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    51a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    51a8:	d041      	beq.n	522e <gpio_nrfx_pin_interrupt_configure+0xde>
    51aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    51ae:	bf14      	ite	ne
    51b0:	2301      	movne	r3, #1
    51b2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    51b4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    51b8:	6883      	ldr	r3, [r0, #8]
    51ba:	40cb      	lsrs	r3, r1
    51bc:	07d8      	lsls	r0, r3, #31
    51be:	d4e3      	bmi.n	5188 <gpio_nrfx_pin_interrupt_configure+0x38>
    51c0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    51c4:	d1e0      	bne.n	5188 <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    51c6:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    51c8:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    51cc:	d031      	beq.n	5232 <gpio_nrfx_pin_interrupt_configure+0xe2>
    51ce:	2e01      	cmp	r6, #1
    51d0:	d104      	bne.n	51dc <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    51d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    51d6:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    51d8:	07d9      	lsls	r1, r3, #31
    51da:	d40e      	bmi.n	51fa <gpio_nrfx_pin_interrupt_configure+0xaa>
    51dc:	4923      	ldr	r1, [pc, #140]	; (526c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    51de:	4824      	ldr	r0, [pc, #144]	; (5270 <gpio_nrfx_pin_interrupt_configure+0x120>)
    51e0:	4a24      	ldr	r2, [pc, #144]	; (5274 <gpio_nrfx_pin_interrupt_configure+0x124>)
    51e2:	f240 2329 	movw	r3, #553	; 0x229
    51e6:	f005 fea5 	bl	af34 <assert_print>
    51ea:	4822      	ldr	r0, [pc, #136]	; (5274 <gpio_nrfx_pin_interrupt_configure+0x124>)
    51ec:	f240 2129 	movw	r1, #553	; 0x229
    51f0:	f005 fe99 	bl	af26 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51f4:	b316      	cbz	r6, 523c <gpio_nrfx_pin_interrupt_configure+0xec>
    51f6:	2e01      	cmp	r6, #1
    51f8:	d123      	bne.n	5242 <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    51fa:	4b1f      	ldr	r3, [pc, #124]	; (5278 <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    51fc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5200:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5204:	07db      	lsls	r3, r3, #31
    5206:	d4bf      	bmi.n	5188 <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5208:	f10d 0507 	add.w	r5, sp, #7
    520c:	4629      	mov	r1, r5
    520e:	4620      	mov	r0, r4
    5210:	f001 fd2e 	bl	6c70 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5214:	4b19      	ldr	r3, [pc, #100]	; (527c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    5216:	4298      	cmp	r0, r3
    5218:	d120      	bne.n	525c <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    521a:	4628      	mov	r0, r5
    521c:	f001 fd8a 	bl	6d34 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5220:	4b11      	ldr	r3, [pc, #68]	; (5268 <gpio_nrfx_pin_interrupt_configure+0x118>)
    5222:	4298      	cmp	r0, r3
    5224:	d01a      	beq.n	525c <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    5226:	f06f 000b 	mvn.w	r0, #11
}
    522a:	b004      	add	sp, #16
    522c:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    522e:	2303      	movs	r3, #3
    5230:	e7c0      	b.n	51b4 <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    5232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5236:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5238:	07da      	lsls	r2, r3, #31
    523a:	d5cf      	bpl.n	51dc <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    523c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5240:	e7dc      	b.n	51fc <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    5242:	4a0c      	ldr	r2, [pc, #48]	; (5274 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5244:	490e      	ldr	r1, [pc, #56]	; (5280 <gpio_nrfx_pin_interrupt_configure+0x130>)
    5246:	480a      	ldr	r0, [pc, #40]	; (5270 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5248:	f240 232e 	movw	r3, #558	; 0x22e
    524c:	f005 fe72 	bl	af34 <assert_print>
    5250:	4808      	ldr	r0, [pc, #32]	; (5274 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5252:	f240 212e 	movw	r1, #558	; 0x22e
    5256:	f005 fe66 	bl	af26 <assert_post_action>
    525a:	e7ef      	b.n	523c <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    525c:	9503      	str	r5, [sp, #12]
    525e:	e793      	b.n	5188 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    5260:	f06f 0004 	mvn.w	r0, #4
    5264:	e7e1      	b.n	522a <gpio_nrfx_pin_interrupt_configure+0xda>
    5266:	bf00      	nop
    5268:	0bad0000 	.word	0x0bad0000
    526c:	0000da3a 	.word	0x0000da3a
    5270:	0000c986 	.word	0x0000c986
    5274:	0000da07 	.word	0x0000da07
    5278:	50000300 	.word	0x50000300
    527c:	0bad0004 	.word	0x0bad0004
    5280:	0000e2d1 	.word	0x0000e2d1

00005284 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5284:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5286:	f001 fd45 	bl	6d14 <nrfx_gpiote_is_init>
    528a:	4604      	mov	r4, r0
    528c:	b968      	cbnz	r0, 52aa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    528e:	f001 fd19 	bl	6cc4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5292:	4b08      	ldr	r3, [pc, #32]	; (52b4 <gpio_nrfx_init+0x30>)
    5294:	4298      	cmp	r0, r3
    5296:	d10a      	bne.n	52ae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5298:	4807      	ldr	r0, [pc, #28]	; (52b8 <gpio_nrfx_init+0x34>)
    529a:	4621      	mov	r1, r4
    529c:	f001 fce2 	bl	6c64 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    52a0:	4622      	mov	r2, r4
    52a2:	2105      	movs	r1, #5
    52a4:	2006      	movs	r0, #6
    52a6:	f7fe fd83 	bl	3db0 <z_arm_irq_priority_set>
		return 0;
    52aa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    52ac:	bd10      	pop	{r4, pc}
		return -EIO;
    52ae:	f06f 0004 	mvn.w	r0, #4
    52b2:	e7fb      	b.n	52ac <gpio_nrfx_init+0x28>
    52b4:	0bad0000 	.word	0x0bad0000
    52b8:	000052bd 	.word	0x000052bd

000052bc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    52bc:	0943      	lsrs	r3, r0, #5
{
    52be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    52c2:	d003      	beq.n	52cc <nrfx_gpio_handler+0x10>
    52c4:	2b01      	cmp	r3, #1
    52c6:	d030      	beq.n	532a <nrfx_gpio_handler+0x6e>
}
    52c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    52cc:	4f19      	ldr	r7, [pc, #100]	; (5334 <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    52ce:	693b      	ldr	r3, [r7, #16]
    52d0:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    52d2:	2c00      	cmp	r4, #0
    52d4:	d0f8      	beq.n	52c8 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    52d6:	f000 001f 	and.w	r0, r0, #31
    52da:	2601      	movs	r6, #1
	return node->next;
    52dc:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    52de:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5338 <nrfx_gpio_handler+0x7c>
    52e2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 533c <nrfx_gpio_handler+0x80>
    52e6:	f8df a058 	ldr.w	sl, [pc, #88]	; 5340 <nrfx_gpio_handler+0x84>
    52ea:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    52ec:	2c00      	cmp	r4, #0
    52ee:	d0eb      	beq.n	52c8 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    52f0:	68a3      	ldr	r3, [r4, #8]
    52f2:	421e      	tst	r6, r3
    52f4:	d014      	beq.n	5320 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    52f6:	6863      	ldr	r3, [r4, #4]
    52f8:	b963      	cbnz	r3, 5314 <nrfx_gpio_handler+0x58>
    52fa:	4649      	mov	r1, r9
    52fc:	2345      	movs	r3, #69	; 0x45
    52fe:	4642      	mov	r2, r8
    5300:	4650      	mov	r0, sl
    5302:	f005 fe17 	bl	af34 <assert_print>
    5306:	480f      	ldr	r0, [pc, #60]	; (5344 <nrfx_gpio_handler+0x88>)
    5308:	f005 fe14 	bl	af34 <assert_print>
    530c:	2145      	movs	r1, #69	; 0x45
    530e:	4640      	mov	r0, r8
    5310:	f005 fe09 	bl	af26 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    5314:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    5318:	4621      	mov	r1, r4
    531a:	4032      	ands	r2, r6
    531c:	4638      	mov	r0, r7
    531e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5320:	b12d      	cbz	r5, 532e <nrfx_gpio_handler+0x72>
    5322:	682b      	ldr	r3, [r5, #0]
    5324:	462c      	mov	r4, r5
    5326:	461d      	mov	r5, r3
    5328:	e7e0      	b.n	52ec <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    532a:	4f07      	ldr	r7, [pc, #28]	; (5348 <nrfx_gpio_handler+0x8c>)
    532c:	e7cf      	b.n	52ce <nrfx_gpio_handler+0x12>
    532e:	462b      	mov	r3, r5
    5330:	e7f8      	b.n	5324 <nrfx_gpio_handler+0x68>
    5332:	bf00      	nop
    5334:	0000c0e8 	.word	0x0000c0e8
    5338:	0000d999 	.word	0x0000d999
    533c:	0000da5d 	.word	0x0000da5d
    5340:	0000c986 	.word	0x0000c986
    5344:	0000d9f0 	.word	0x0000d9f0
    5348:	0000c0d0 	.word	0x0000c0d0

0000534c <gpio_nrfx_pin_configure>:
{
    534c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5350:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5352:	7b3b      	ldrb	r3, [r7, #12]
    5354:	f001 051f 	and.w	r5, r1, #31
{
    5358:	b085      	sub	sp, #20
    535a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    535c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5360:	4614      	mov	r4, r2
    5362:	b9d2      	cbnz	r2, 539a <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    5364:	a902      	add	r1, sp, #8
    5366:	4628      	mov	r0, r5
    5368:	f001 fc82 	bl	6c70 <nrfx_gpiote_channel_get>
    536c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    536e:	4628      	mov	r0, r5
    5370:	f001 fd80 	bl	6e74 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5374:	4b46      	ldr	r3, [pc, #280]	; (5490 <gpio_nrfx_pin_configure+0x144>)
    5376:	4298      	cmp	r0, r3
    5378:	d004      	beq.n	5384 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    537a:	f06f 0004 	mvn.w	r0, #4
}
    537e:	b005      	add	sp, #20
    5380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    5384:	4284      	cmp	r4, r0
    5386:	d001      	beq.n	538c <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5388:	2000      	movs	r0, #0
    538a:	e7f8      	b.n	537e <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    538c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5390:	f001 fcca 	bl	6d28 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5394:	42a0      	cmp	r0, r4
    5396:	d0f7      	beq.n	5388 <gpio_nrfx_pin_configure+0x3c>
    5398:	e7ef      	b.n	537a <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    539a:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    539e:	f10d 0103 	add.w	r1, sp, #3
    53a2:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    53a4:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    53a8:	f001 fc62 	bl	6c70 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    53ac:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    53ae:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    53b0:	aa02      	add	r2, sp, #8
    53b2:	4649      	mov	r1, r9
    53b4:	4628      	mov	r0, r5
    53b6:	f001 fb39 	bl	6a2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    53ba:	4b35      	ldr	r3, [pc, #212]	; (5490 <gpio_nrfx_pin_configure+0x144>)
    53bc:	4298      	cmp	r0, r3
    53be:	d002      	beq.n	53c6 <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    53c0:	f06f 0015 	mvn.w	r0, #21
    53c4:	e7db      	b.n	537e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    53c6:	4580      	cmp	r8, r0
    53c8:	d103      	bne.n	53d2 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    53ca:	f89d 0003 	ldrb.w	r0, [sp, #3]
    53ce:	f001 fcab 	bl	6d28 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    53d2:	03a3      	lsls	r3, r4, #14
    53d4:	d54c      	bpl.n	5470 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    53d6:	f240 6306 	movw	r3, #1542	; 0x606
    53da:	4023      	ands	r3, r4
    53dc:	f240 2206 	movw	r2, #518	; 0x206
    53e0:	4293      	cmp	r3, r2
    53e2:	d019      	beq.n	5418 <gpio_nrfx_pin_configure+0xcc>
    53e4:	d80c      	bhi.n	5400 <gpio_nrfx_pin_configure+0xb4>
    53e6:	2b06      	cmp	r3, #6
    53e8:	d017      	beq.n	541a <gpio_nrfx_pin_configure+0xce>
    53ea:	d804      	bhi.n	53f6 <gpio_nrfx_pin_configure+0xaa>
    53ec:	b1ab      	cbz	r3, 541a <gpio_nrfx_pin_configure+0xce>
    53ee:	2b02      	cmp	r3, #2
    53f0:	d1e6      	bne.n	53c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    53f2:	2304      	movs	r3, #4
    53f4:	e011      	b.n	541a <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    53f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    53fa:	d1e1      	bne.n	53c0 <gpio_nrfx_pin_configure+0x74>
    53fc:	2301      	movs	r3, #1
    53fe:	e00c      	b.n	541a <gpio_nrfx_pin_configure+0xce>
    5400:	f240 4202 	movw	r2, #1026	; 0x402
    5404:	4293      	cmp	r3, r2
    5406:	d027      	beq.n	5458 <gpio_nrfx_pin_configure+0x10c>
    5408:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    540c:	d026      	beq.n	545c <gpio_nrfx_pin_configure+0x110>
    540e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5412:	d1d5      	bne.n	53c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    5414:	2302      	movs	r3, #2
    5416:	e000      	b.n	541a <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    5418:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    541a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    541e:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5422:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5426:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5428:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    542c:	bf54      	ite	pl
    542e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5432:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5434:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5436:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    543a:	d511      	bpl.n	5460 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    543c:	687a      	ldr	r2, [r7, #4]
    543e:	2301      	movs	r3, #1
    5440:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5442:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5446:	2200      	movs	r2, #0
    5448:	a901      	add	r1, sp, #4
    544a:	4628      	mov	r0, r5
    544c:	f001 fb96 	bl	6b7c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5450:	4b0f      	ldr	r3, [pc, #60]	; (5490 <gpio_nrfx_pin_configure+0x144>)
    5452:	4298      	cmp	r0, r3
    5454:	d098      	beq.n	5388 <gpio_nrfx_pin_configure+0x3c>
    5456:	e7b3      	b.n	53c0 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    5458:	2305      	movs	r3, #5
    545a:	e7de      	b.n	541a <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    545c:	2303      	movs	r3, #3
    545e:	e7dc      	b.n	541a <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5460:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5462:	bf41      	itttt	mi
    5464:	2301      	movmi	r3, #1
    5466:	687a      	ldrmi	r2, [r7, #4]
    5468:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    546a:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    546e:	e7ea      	b.n	5446 <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    5470:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5472:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    5476:	bf54      	ite	pl
    5478:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    547c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    547e:	461a      	mov	r2, r3
    5480:	a901      	add	r1, sp, #4
    5482:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5484:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5488:	f001 fad0 	bl	6a2c <nrfx_gpiote_input_configure>
    548c:	e7e0      	b.n	5450 <gpio_nrfx_pin_configure+0x104>
    548e:	bf00      	nop
    5490:	0bad0000 	.word	0x0bad0000

00005494 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5496:	ab0b      	add	r3, sp, #44	; 0x2c
    5498:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    549a:	9303      	str	r3, [sp, #12]
    549c:	4b05      	ldr	r3, [pc, #20]	; (54b4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    549e:	9302      	str	r3, [sp, #8]
    54a0:	2300      	movs	r3, #0
    54a2:	e9cd 3300 	strd	r3, r3, [sp]
    54a6:	2201      	movs	r2, #1
    54a8:	4618      	mov	r0, r3
    54aa:	f7fe f889 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    54ae:	b007      	add	sp, #28
    54b0:	f85d fb04 	ldr.w	pc, [sp], #4
    54b4:	0000da77 	.word	0x0000da77

000054b8 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    54b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    54bc:	461c      	mov	r4, r3
	return config->uarte_regs;
    54be:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    54c0:	6907      	ldr	r7, [r0, #16]
{
    54c2:	460e      	mov	r6, r1
    54c4:	4605      	mov	r5, r0
	return config->uarte_regs;
    54c6:	6819      	ldr	r1, [r3, #0]
    54c8:	f04f 0320 	mov.w	r3, #32
    54cc:	f3ef 8811 	mrs	r8, BASEPRI
    54d0:	f383 8812 	msr	BASEPRI_MAX, r3
    54d4:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    54d8:	68f8      	ldr	r0, [r7, #12]
    54da:	68c3      	ldr	r3, [r0, #12]
    54dc:	b143      	cbz	r3, 54f0 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    54de:	f388 8811 	msr	BASEPRI, r8
    54e2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    54e6:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    54ea:	b002      	add	sp, #8
    54ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    54f0:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    54f4:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    54f6:	6086      	str	r6, [r0, #8]
    54f8:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    54fc:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    5500:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    5504:	d110      	bne.n	5528 <uarte_nrfx_tx+0x70>
		data->async->xfer_len = len;
    5506:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    550a:	4639      	mov	r1, r7
    550c:	4628      	mov	r0, r5
    550e:	f005 ffe2 	bl	b4d6 <start_tx_locked>
    5512:	f388 8811 	msr	BASEPRI, r8
    5516:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    551a:	7afb      	ldrb	r3, [r7, #11]
    551c:	2b01      	cmp	r3, #1
    551e:	d101      	bne.n	5524 <uarte_nrfx_tx+0x6c>
	    && timeout != SYS_FOREVER_US) {
    5520:	1c63      	adds	r3, r4, #1
    5522:	d105      	bne.n	5530 <uarte_nrfx_tx+0x78>
	return 0;
    5524:	2000      	movs	r0, #0
    5526:	e7e0      	b.n	54ea <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    5528:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    552a:	f005 ff89 	bl	b440 <setup_tx_cache.isra.0>
    552e:	e7ec      	b.n	550a <uarte_nrfx_tx+0x52>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5530:	480b      	ldr	r0, [pc, #44]	; (5560 <uarte_nrfx_tx+0xa8>)
    5532:	4a0c      	ldr	r2, [pc, #48]	; (5564 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    5534:	68fd      	ldr	r5, [r7, #12]
    5536:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    553a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    553e:	2100      	movs	r1, #0
    5540:	2300      	movs	r3, #0
    5542:	fbc4 0106 	smlal	r0, r1, r4, r6
    5546:	f7fb fb77 	bl	c38 <__aeabi_uldivmod>
    554a:	3528      	adds	r5, #40	; 0x28
    554c:	4602      	mov	r2, r0
    554e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5550:	2000      	movs	r0, #0
    5552:	2100      	movs	r1, #0
    5554:	e9cd 0100 	strd	r0, r1, [sp]
    5558:	4628      	mov	r0, r5
    555a:	f004 fa07 	bl	996c <z_impl_k_timer_start>
    555e:	e7e1      	b.n	5524 <uarte_nrfx_tx+0x6c>
    5560:	000f423f 	.word	0x000f423f
    5564:	000f4240 	.word	0x000f4240

00005568 <uarte_nrfx_configure>:
{
    5568:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    556a:	794b      	ldrb	r3, [r1, #5]
    556c:	2b01      	cmp	r3, #1
    556e:	d026      	beq.n	55be <uarte_nrfx_configure+0x56>
    5570:	2b03      	cmp	r3, #3
    5572:	d121      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5574:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5576:	798b      	ldrb	r3, [r1, #6]
    5578:	2b03      	cmp	r3, #3
    557a:	d11d      	bne.n	55b8 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    557c:	79cc      	ldrb	r4, [r1, #7]
    557e:	b10c      	cbz	r4, 5584 <uarte_nrfx_configure+0x1c>
    5580:	2c01      	cmp	r4, #1
    5582:	d119      	bne.n	55b8 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    5584:	790a      	ldrb	r2, [r1, #4]
    5586:	b112      	cbz	r2, 558e <uarte_nrfx_configure+0x26>
    5588:	2a02      	cmp	r2, #2
    558a:	d115      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    558c:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    558e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5590:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    5592:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    5596:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    5598:	d065      	beq.n	5666 <uarte_nrfx_configure+0xfe>
    559a:	d82d      	bhi.n	55f8 <uarte_nrfx_configure+0x90>
    559c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    55a0:	d064      	beq.n	566c <uarte_nrfx_configure+0x104>
    55a2:	d816      	bhi.n	55d2 <uarte_nrfx_configure+0x6a>
    55a4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    55a8:	d062      	beq.n	5670 <uarte_nrfx_configure+0x108>
    55aa:	d80a      	bhi.n	55c2 <uarte_nrfx_configure+0x5a>
    55ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    55b0:	d061      	beq.n	5676 <uarte_nrfx_configure+0x10e>
    55b2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    55b6:	d061      	beq.n	567c <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    55b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    55bc:	e052      	b.n	5664 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    55be:	2600      	movs	r6, #0
    55c0:	e7d9      	b.n	5576 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    55c2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    55c6:	d05c      	beq.n	5682 <uarte_nrfx_configure+0x11a>
    55c8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    55cc:	d1f4      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    55ce:	4b37      	ldr	r3, [pc, #220]	; (56ac <uarte_nrfx_configure+0x144>)
    55d0:	e03c      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    55d2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    55d6:	d057      	beq.n	5688 <uarte_nrfx_configure+0x120>
    55d8:	d807      	bhi.n	55ea <uarte_nrfx_configure+0x82>
    55da:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    55de:	d055      	beq.n	568c <uarte_nrfx_configure+0x124>
    55e0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    55e4:	d1e8      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    55e6:	4b32      	ldr	r3, [pc, #200]	; (56b0 <uarte_nrfx_configure+0x148>)
    55e8:	e030      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    55ea:	f647 2712 	movw	r7, #31250	; 0x7a12
    55ee:	42bb      	cmp	r3, r7
    55f0:	d1e2      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    55f2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    55f6:	e029      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    55f8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    55fc:	d048      	beq.n	5690 <uarte_nrfx_configure+0x128>
    55fe:	d813      	bhi.n	5628 <uarte_nrfx_configure+0xc0>
    5600:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5604:	d047      	beq.n	5696 <uarte_nrfx_configure+0x12e>
    5606:	d809      	bhi.n	561c <uarte_nrfx_configure+0xb4>
    5608:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    560c:	42bb      	cmp	r3, r7
    560e:	d044      	beq.n	569a <uarte_nrfx_configure+0x132>
    5610:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5614:	d1d0      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    5616:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    561a:	e017      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    561c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5620:	d1ca      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5622:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    5626:	e011      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5628:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    562c:	d038      	beq.n	56a0 <uarte_nrfx_configure+0x138>
    562e:	d808      	bhi.n	5642 <uarte_nrfx_configure+0xda>
    5630:	4f20      	ldr	r7, [pc, #128]	; (56b4 <uarte_nrfx_configure+0x14c>)
    5632:	42bb      	cmp	r3, r7
    5634:	d037      	beq.n	56a6 <uarte_nrfx_configure+0x13e>
    5636:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    563a:	d1bd      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    563c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5640:	e004      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5642:	4f1d      	ldr	r7, [pc, #116]	; (56b8 <uarte_nrfx_configure+0x150>)
    5644:	42bb      	cmp	r3, r7
    5646:	d1b7      	bne.n	55b8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    564c:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    564e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    5652:	1d03      	adds	r3, r0, #4
    5654:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    5656:	4334      	orrs	r4, r6
    5658:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    565a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    565e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    5662:	2000      	movs	r0, #0
}
    5664:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    5666:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    566a:	e7ef      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    566c:	4b13      	ldr	r3, [pc, #76]	; (56bc <uarte_nrfx_configure+0x154>)
    566e:	e7ed      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5670:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5674:	e7ea      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    5676:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    567a:	e7e7      	b.n	564c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    567c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5680:	e7e4      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5682:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    5686:	e7e1      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5688:	4b0d      	ldr	r3, [pc, #52]	; (56c0 <uarte_nrfx_configure+0x158>)
    568a:	e7df      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    568c:	4b0d      	ldr	r3, [pc, #52]	; (56c4 <uarte_nrfx_configure+0x15c>)
    568e:	e7dd      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5690:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5694:	e7da      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    5696:	4b0c      	ldr	r3, [pc, #48]	; (56c8 <uarte_nrfx_configure+0x160>)
    5698:	e7d8      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    569a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    569e:	e7d5      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    56a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    56a4:	e7d2      	b.n	564c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    56a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    56aa:	e7cf      	b.n	564c <uarte_nrfx_configure+0xe4>
    56ac:	0013b000 	.word	0x0013b000
    56b0:	004ea000 	.word	0x004ea000
    56b4:	0003d090 	.word	0x0003d090
    56b8:	000f4240 	.word	0x000f4240
    56bc:	00275000 	.word	0x00275000
    56c0:	0075c000 	.word	0x0075c000
    56c4:	003af000 	.word	0x003af000
    56c8:	013a9000 	.word	0x013a9000

000056cc <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    56cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    56d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    56d4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    56d6:	f8d9 5000 	ldr.w	r5, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    56da:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    56de:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    56e0:	2100      	movs	r1, #0
    56e2:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    56e6:	4607      	mov	r7, r0
	data->dev = dev;
    56e8:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    56ea:	aa05      	add	r2, sp, #20
    56ec:	4640      	mov	r0, r8
    56ee:	f005 ff94 	bl	b61a <pinctrl_lookup_state>
	if (ret < 0) {
    56f2:	1e04      	subs	r4, r0, #0
    56f4:	db25      	blt.n	5742 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    56f6:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    56f8:	f8d8 2000 	ldr.w	r2, [r8]
    56fc:	7919      	ldrb	r1, [r3, #4]
    56fe:	6818      	ldr	r0, [r3, #0]
    5700:	f005 ffe2 	bl	b6c8 <pinctrl_configure_pins>
	if (err < 0) {
    5704:	1e04      	subs	r4, r0, #0
    5706:	db1c      	blt.n	5742 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5708:	1d31      	adds	r1, r6, #4
    570a:	4638      	mov	r0, r7
    570c:	f7ff ff2c 	bl	5568 <uarte_nrfx_configure>
	if (err) {
    5710:	4604      	mov	r4, r0
    5712:	b9b0      	cbnz	r0, 5742 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5714:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5718:	0799      	lsls	r1, r3, #30
    571a:	d529      	bpl.n	5770 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    571c:	f106 0016 	add.w	r0, r6, #22
    5720:	f001 fcac 	bl	707c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5724:	4b49      	ldr	r3, [pc, #292]	; (584c <uarte_instance_init.constprop.0+0x180>)
    5726:	4298      	cmp	r0, r3
    5728:	d00f      	beq.n	574a <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    572a:	4b49      	ldr	r3, [pc, #292]	; (5850 <uarte_instance_init.constprop.0+0x184>)
    572c:	9400      	str	r4, [sp, #0]
    572e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5732:	4620      	mov	r0, r4
    5734:	4623      	mov	r3, r4
    5736:	4947      	ldr	r1, [pc, #284]	; (5854 <uarte_instance_init.constprop.0+0x188>)
    5738:	2201      	movs	r2, #1
    573a:	f7ff feab 	bl	5494 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    573e:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5742:	4620      	mov	r0, r4
    5744:	b007      	add	sp, #28
    5746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    574a:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    574c:	00c3      	lsls	r3, r0, #3
    574e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5752:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5756:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    575a:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    575e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5762:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    5766:	4a3c      	ldr	r2, [pc, #240]	; (5858 <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5768:	2301      	movs	r3, #1
    576a:	4083      	lsls	r3, r0
    576c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    5770:	68f3      	ldr	r3, [r6, #12]
    5772:	2b00      	cmp	r3, #0
    5774:	d055      	beq.n	5822 <uarte_instance_init.constprop.0+0x156>
	return config->uarte_regs;
    5776:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    5778:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    577c:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    577e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    5782:	4936      	ldr	r1, [pc, #216]	; (585c <uarte_instance_init.constprop.0+0x190>)
    5784:	2204      	movs	r2, #4
    5786:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    578a:	2201      	movs	r2, #1
    578c:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    5790:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5794:	2108      	movs	r1, #8
    5796:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    579a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    579e:	b1a1      	cbz	r1, 57ca <uarte_instance_init.constprop.0+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57a0:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57a2:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    57a6:	b91a      	cbnz	r2, 57b0 <uarte_instance_init.constprop.0+0xe4>
    57a8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    57ac:	2a00      	cmp	r2, #0
    57ae:	d0f8      	beq.n	57a2 <uarte_instance_init.constprop.0+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57b0:	2200      	movs	r2, #0
    57b2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    57b6:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    57ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    57be:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    57c2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    57c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    57ca:	4925      	ldr	r1, [pc, #148]	; (5860 <uarte_instance_init.constprop.0+0x194>)
    57cc:	2200      	movs	r2, #0
    57ce:	3088      	adds	r0, #136	; 0x88
    57d0:	f006 f94b 	bl	ba6a <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    57d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    57d8:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    57dc:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    57e0:	4920      	ldr	r1, [pc, #128]	; (5864 <uarte_instance_init.constprop.0+0x198>)
    57e2:	2200      	movs	r2, #0
    57e4:	3028      	adds	r0, #40	; 0x28
    57e6:	f006 f940 	bl	ba6a <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    57ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
    57ee:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    57f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    57f6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    57f8:	bf5c      	itt	pl
    57fa:	f44f 7280 	movpl.w	r2, #256	; 0x100
    57fe:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5802:	06db      	lsls	r3, r3, #27
    5804:	bf44      	itt	mi
    5806:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    580a:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    580e:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    5810:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5812:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5816:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    581a:	2301      	movs	r3, #1
    581c:	60ab      	str	r3, [r5, #8]
    581e:	60eb      	str	r3, [r5, #12]
	return 0;
    5820:	e78f      	b.n	5742 <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5822:	2308      	movs	r3, #8
    5824:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    5828:	f899 3008 	ldrb.w	r3, [r9, #8]
    582c:	2b00      	cmp	r3, #0
    582e:	d1e0      	bne.n	57f2 <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5830:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5834:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5838:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    583c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5840:	2301      	movs	r3, #1
    5842:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5846:	602b      	str	r3, [r5, #0]
}
    5848:	e7d3      	b.n	57f2 <uarte_instance_init.constprop.0+0x126>
    584a:	bf00      	nop
    584c:	0bad0000 	.word	0x0bad0000
    5850:	0000da77 	.word	0x0000da77
    5854:	0000c2f0 	.word	0x0000c2f0
    5858:	4001f000 	.word	0x4001f000
    585c:	000a0210 	.word	0x000a0210
    5860:	0000b545 	.word	0x0000b545
    5864:	0000b609 	.word	0x0000b609

00005868 <uarte_nrfx_poll_out>:
{
    5868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    586a:	6906      	ldr	r6, [r0, #16]
{
    586c:	4605      	mov	r5, r0
    586e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5870:	f006 f891 	bl	b996 <k_is_in_isr>
    5874:	b9b0      	cbnz	r0, 58a4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    5876:	4b28      	ldr	r3, [pc, #160]	; (5918 <uarte_nrfx_poll_out+0xb0>)
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	b19b      	cbz	r3, 58a4 <uarte_nrfx_poll_out+0x3c>
{
    587c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    587e:	6868      	ldr	r0, [r5, #4]
    5880:	f005 fe19 	bl	b4b6 <is_tx_ready.isra.0>
    5884:	2800      	cmp	r0, #0
    5886:	d134      	bne.n	58f2 <uarte_nrfx_poll_out+0x8a>
    5888:	2001      	movs	r0, #1
    588a:	f005 ffc8 	bl	b81e <nrfx_busy_wait>
    588e:	3c01      	subs	r4, #1
    5890:	d1f5      	bne.n	587e <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    5892:	2100      	movs	r1, #0
    5894:	2021      	movs	r0, #33	; 0x21
    5896:	f003 fb85 	bl	8fa4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    589a:	e7ef      	b.n	587c <uarte_nrfx_poll_out+0x14>
    589c:	f384 8811 	msr	BASEPRI, r4
    58a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    58a4:	f04f 0320 	mov.w	r3, #32
    58a8:	f3ef 8411 	mrs	r4, BASEPRI
    58ac:	f383 8812 	msr	BASEPRI_MAX, r3
    58b0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    58b4:	6869      	ldr	r1, [r5, #4]
    58b6:	4608      	mov	r0, r1
    58b8:	f005 fdfd 	bl	b4b6 <is_tx_ready.isra.0>
    58bc:	2800      	cmp	r0, #0
    58be:	d0ed      	beq.n	589c <uarte_nrfx_poll_out+0x34>
				if (data->async && data->async->tx_size &&
    58c0:	68f3      	ldr	r3, [r6, #12]
    58c2:	b153      	cbz	r3, 58da <uarte_nrfx_poll_out+0x72>
    58c4:	68da      	ldr	r2, [r3, #12]
    58c6:	b142      	cbz	r2, 58da <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
    58c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    58cc:	2a00      	cmp	r2, #0
    58ce:	da04      	bge.n	58da <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
    58d0:	680a      	ldr	r2, [r1, #0]
    return p_reg->TXD.AMOUNT;
    58d2:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    58d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    58da:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    58dc:	2201      	movs	r2, #1
	data->char_out = c;
    58de:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    58e2:	4628      	mov	r0, r5
    58e4:	f005 fc9d 	bl	b222 <tx_start>
	__asm__ volatile(
    58e8:	f384 8811 	msr	BASEPRI, r4
    58ec:	f3bf 8f6f 	isb	sy
}
    58f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    58f2:	f04f 0320 	mov.w	r3, #32
    58f6:	f3ef 8411 	mrs	r4, BASEPRI
    58fa:	f383 8812 	msr	BASEPRI_MAX, r3
    58fe:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5902:	6868      	ldr	r0, [r5, #4]
    5904:	f005 fdd7 	bl	b4b6 <is_tx_ready.isra.0>
    5908:	2800      	cmp	r0, #0
    590a:	d1e6      	bne.n	58da <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
    590c:	f384 8811 	msr	BASEPRI, r4
    5910:	f3bf 8f6f 	isb	sy
}
    5914:	e7bd      	b.n	5892 <uarte_nrfx_poll_out+0x2a>
    5916:	bf00      	nop
    5918:	2000d566 	.word	0x2000d566

0000591c <uarte_nrfx_rx_enable>:
{
    591c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    5920:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    5924:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    5928:	f8da 8000 	ldr.w	r8, [sl]
{
    592c:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    592e:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    5932:	4605      	mov	r5, r0
    5934:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    5936:	b192      	cbz	r2, 595e <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    5938:	4a43      	ldr	r2, [pc, #268]	; (5a48 <uarte_nrfx_rx_enable+0x12c>)
    593a:	4944      	ldr	r1, [pc, #272]	; (5a4c <uarte_nrfx_rx_enable+0x130>)
    593c:	4844      	ldr	r0, [pc, #272]	; (5a50 <uarte_nrfx_rx_enable+0x134>)
    593e:	f240 337f 	movw	r3, #895	; 0x37f
    5942:	f005 faf7 	bl	af34 <assert_print>
    5946:	4843      	ldr	r0, [pc, #268]	; (5a54 <uarte_nrfx_rx_enable+0x138>)
    5948:	f005 faf4 	bl	af34 <assert_print>
    594c:	483e      	ldr	r0, [pc, #248]	; (5a48 <uarte_nrfx_rx_enable+0x12c>)
    594e:	f240 317f 	movw	r1, #895	; 0x37f
    5952:	f005 fae8 	bl	af26 <assert_post_action>
		return -ENOTSUP;
    5956:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    595a:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    595e:	f8db 100c 	ldr.w	r1, [fp, #12]
    5962:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    5966:	2a00      	cmp	r2, #0
    5968:	d16b      	bne.n	5a42 <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    596a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    596e:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    5970:	bfd2      	itee	le
    5972:	235c      	movle	r3, #92	; 0x5c
    5974:	2205      	movgt	r2, #5
    5976:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    597a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    597e:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    5980:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    5984:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5986:	f8da 3004 	ldr.w	r3, [sl, #4]
    598a:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    598c:	e9c1 9718 	strd	r9, r7, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5990:	d523      	bpl.n	59da <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    5992:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    5996:	b306      	cbz	r6, 59da <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    5998:	42be      	cmp	r6, r7
    599a:	bf28      	it	cs
    599c:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    599e:	4648      	mov	r0, r9
    59a0:	4632      	mov	r2, r6
    59a2:	31cc      	adds	r1, #204	; 0xcc
    59a4:	f006 f956 	bl	bc54 <memcpy>
			if (!len) {
    59a8:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    59aa:	44b1      	add	r9, r6
			if (!len) {
    59ac:	d115      	bne.n	59da <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    59ae:	f8db 200c 	ldr.w	r2, [fp, #12]
    59b2:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    59b6:	1b9b      	subs	r3, r3, r6
    59b8:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    59bc:	4631      	mov	r1, r6
    59be:	4628      	mov	r0, r5
    59c0:	f005 fc5c 	bl	b27c <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    59c4:	f8db 100c 	ldr.w	r1, [fp, #12]
    59c8:	4628      	mov	r0, r5
    59ca:	3160      	adds	r1, #96	; 0x60
    59cc:	f005 fc6f 	bl	b2ae <rx_buf_release>
				notify_rx_disable(dev);
    59d0:	4628      	mov	r0, r5
    59d2:	f005 fc84 	bl	b2de <notify_rx_disable>
				return 0;
    59d6:	2000      	movs	r0, #0
    59d8:	e7bf      	b.n	595a <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59da:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    59dc:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    59e0:	f8c8 7538 	str.w	r7, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59e4:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    59e8:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    59ec:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    59f0:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    59f4:	f8db 300c 	ldr.w	r3, [fp, #12]
    59f8:	2201      	movs	r2, #1
    59fa:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    59fe:	f8da 3004 	ldr.w	r3, [sl, #4]
    5a02:	06db      	lsls	r3, r3, #27
    5a04:	d519      	bpl.n	5a3a <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    5a06:	f04f 0320 	mov.w	r3, #32
    5a0a:	f3ef 8111 	mrs	r1, BASEPRI
    5a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a12:	f3bf 8f6f 	isb	sy
	if (data->async) {
    5a16:	692b      	ldr	r3, [r5, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5a18:	6868      	ldr	r0, [r5, #4]
	if (data->async) {
    5a1a:	68db      	ldr	r3, [r3, #12]
    5a1c:	b12b      	cbz	r3, 5a2a <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    5a1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    5a22:	f042 0202 	orr.w	r2, r2, #2
    5a26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    5a2a:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5a2c:	2208      	movs	r2, #8
    5a2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    5a32:	f381 8811 	msr	BASEPRI, r1
    5a36:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a3a:	2301      	movs	r3, #1
    5a3c:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    5a40:	e7c9      	b.n	59d6 <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    5a42:	f06f 000f 	mvn.w	r0, #15
    5a46:	e788      	b.n	595a <uarte_nrfx_rx_enable+0x3e>
    5a48:	0000da96 	.word	0x0000da96
    5a4c:	0000e2d1 	.word	0x0000e2d1
    5a50:	0000c986 	.word	0x0000c986
    5a54:	0000daca 	.word	0x0000daca

00005a58 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    5a58:	6843      	ldr	r3, [r0, #4]
{
    5a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    5a5e:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    5a60:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a62:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    5a66:	b088      	sub	sp, #32
    5a68:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    5a6a:	b169      	cbz	r1, 5a88 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a6c:	2200      	movs	r2, #0
    5a6e:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    5a72:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    5a76:	68da      	ldr	r2, [r3, #12]
    5a78:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    5a7c:	3301      	adds	r3, #1
    5a7e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    5a82:	b008      	add	sp, #32
    5a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a88:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5a8c:	b313      	cbz	r3, 5ad4 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a8e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    5a92:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5a96:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5a9a:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    5a9e:	2214      	movs	r2, #20
    5aa0:	a803      	add	r0, sp, #12
    5aa2:	f006 f8f8 	bl	bc96 <memset>
    5aa6:	2306      	movs	r3, #6
    5aa8:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5aac:	07f3      	lsls	r3, r6, #31
    5aae:	f100 8102 	bmi.w	5cb6 <uarte_nrfx_isr_async+0x25e>
    5ab2:	07b7      	lsls	r7, r6, #30
    5ab4:	f100 8101 	bmi.w	5cba <uarte_nrfx_isr_async+0x262>
    5ab8:	0770      	lsls	r0, r6, #29
    5aba:	f100 8100 	bmi.w	5cbe <uarte_nrfx_isr_async+0x266>
    5abe:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    5ac2:	4620      	mov	r0, r4
    5ac4:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    5ac6:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    5aca:	f005 fbd0 	bl	b26e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    5ace:	4620      	mov	r0, r4
    5ad0:	f005 fc60 	bl	b394 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ad4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    5ad8:	b37b      	cbz	r3, 5b3a <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    5ada:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    5ade:	06d9      	lsls	r1, r3, #27
    5ae0:	d52b      	bpl.n	5b3a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ae2:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    5ae6:	6927      	ldr	r7, [r4, #16]
    5ae8:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    5aec:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    5af0:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    5af2:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    5af4:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    5af6:	2301      	movs	r3, #1
    5af8:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    5afc:	3088      	adds	r0, #136	; 0x88
    5afe:	f005 ffc0 	bl	ba82 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    5b02:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    5b04:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    5b08:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    5b0c:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    5b0e:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    5b12:	1a1b      	subs	r3, r3, r0
    5b14:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    5b16:	6f90      	ldr	r0, [r2, #120]	; 0x78
	if (rx_len < 0) {
    5b18:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    5b1c:	4408      	add	r0, r1
	if (rx_len > 0) {
    5b1e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    5b20:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    5b22:	dd02      	ble.n	5b2a <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    5b24:	4620      	mov	r0, r4
    5b26:	f005 fba9 	bl	b27c <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    5b2a:	68f9      	ldr	r1, [r7, #12]
    5b2c:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    5b30:	2b00      	cmp	r3, #0
    5b32:	f040 80c6 	bne.w	5cc2 <uarte_nrfx_isr_async+0x26a>
		data->async->is_in_irq = false;
    5b36:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b3a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    5b3e:	b38b      	cbz	r3, 5ba4 <uarte_nrfx_isr_async+0x14c>
    5b40:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5b44:	bb76      	cbnz	r6, 5ba4 <uarte_nrfx_isr_async+0x14c>
	struct uart_event evt = {
    5b46:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    5b48:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b4a:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    5b4e:	4631      	mov	r1, r6
    5b50:	a803      	add	r0, sp, #12
    5b52:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    5b56:	f006 f89e 	bl	bc96 <memset>
    5b5a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    5b5c:	a903      	add	r1, sp, #12
    5b5e:	4620      	mov	r0, r4
	struct uart_event evt = {
    5b60:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    5b64:	f005 fb83 	bl	b26e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    5b68:	68ff      	ldr	r7, [r7, #12]
    5b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5b6c:	1c5a      	adds	r2, r3, #1
    5b6e:	d019      	beq.n	5ba4 <uarte_nrfx_isr_async+0x14c>
			      K_USEC(data->async->rx_timeout_slab),
    5b70:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    5b74:	498b      	ldr	r1, [pc, #556]	; (5da4 <uarte_nrfx_isr_async+0x34c>)
		data->async->rx_timeout_left = data->async->rx_timeout;
    5b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    5b7a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    5b7e:	468e      	mov	lr, r1
    5b80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5b84:	4631      	mov	r1, r6
    5b86:	fbcc e100 	smlal	lr, r1, ip, r0
    5b8a:	4a87      	ldr	r2, [pc, #540]	; (5da8 <uarte_nrfx_isr_async+0x350>)
    5b8c:	2300      	movs	r3, #0
    5b8e:	4670      	mov	r0, lr
    5b90:	f7fb f852 	bl	c38 <__aeabi_uldivmod>
    5b94:	4602      	mov	r2, r0
    5b96:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5b98:	e9cd 0100 	strd	r0, r1, [sp]
    5b9c:	f107 0088 	add.w	r0, r7, #136	; 0x88
    5ba0:	f003 fee4 	bl	996c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ba4:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    5ba8:	b333      	cbz	r3, 5bf8 <uarte_nrfx_isr_async+0x1a0>
    5baa:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5bae:	bb1e      	cbnz	r6, 5bf8 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = dev->data;
    5bb0:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bb2:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    5bb6:	68f9      	ldr	r1, [r7, #12]
    5bb8:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    5bbc:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    5bc0:	3160      	adds	r1, #96	; 0x60
    5bc2:	4620      	mov	r0, r4
    5bc4:	f005 fb73 	bl	b2ae <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    5bc8:	68f9      	ldr	r1, [r7, #12]
    5bca:	4620      	mov	r0, r4
    5bcc:	316c      	adds	r1, #108	; 0x6c
    5bce:	f005 fb6e 	bl	b2ae <rx_buf_release>
	if (data->async->rx_enabled) {
    5bd2:	68fb      	ldr	r3, [r7, #12]
    5bd4:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    5bd8:	2a00      	cmp	r2, #0
    5bda:	f000 809f 	beq.w	5d1c <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_enabled = false;
    5bde:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5be2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5be6:	06d8      	lsls	r0, r3, #27
    5be8:	d503      	bpl.n	5bf2 <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    5bea:	2102      	movs	r1, #2
    5bec:	4620      	mov	r0, r4
    5bee:	f005 fc3b 	bl	b468 <async_uart_release>
	notify_rx_disable(dev);
    5bf2:	4620      	mov	r0, r4
    5bf4:	f005 fb73 	bl	b2de <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bf8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    5bfc:	b1db      	cbz	r3, 5c36 <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
    5bfe:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    5c02:	05d9      	lsls	r1, r3, #23
    5c04:	d517      	bpl.n	5c36 <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
    5c06:	6863      	ldr	r3, [r4, #4]
    5c08:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    5c0a:	f04f 0120 	mov.w	r1, #32
    5c0e:	f3ef 8211 	mrs	r2, BASEPRI
    5c12:	f381 8812 	msr	BASEPRI_MAX, r1
    5c16:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c1a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5c1e:	b131      	cbz	r1, 5c2e <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c20:	2100      	movs	r1, #0
    5c22:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5c26:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c2a:	2101      	movs	r1, #1
    5c2c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5c2e:	f382 8811 	msr	BASEPRI, r2
    5c32:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c36:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	f43f af21 	beq.w	5a82 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    5c40:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    5c44:	025a      	lsls	r2, r3, #9
    5c46:	f57f af1c 	bpl.w	5a82 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    5c4a:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    5c4c:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c4e:	e9d3 7300 	ldrd	r7, r3, [r3]
    5c52:	06db      	lsls	r3, r3, #27
    5c54:	d467      	bmi.n	5d26 <uarte_nrfx_isr_async+0x2ce>
	if (!data->async->tx_buf) {
    5c56:	68eb      	ldr	r3, [r5, #12]
    5c58:	689b      	ldr	r3, [r3, #8]
    5c5a:	2b00      	cmp	r3, #0
    5c5c:	f43f af11 	beq.w	5a82 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    5c60:	f04f 0320 	mov.w	r3, #32
    5c64:	f3ef 8211 	mrs	r2, BASEPRI
    5c68:	f383 8812 	msr	BASEPRI_MAX, r3
    5c6c:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    5c70:	68eb      	ldr	r3, [r5, #12]
    5c72:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    5c76:	2900      	cmp	r1, #0
    5c78:	bfac      	ite	ge
    5c7a:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    5c7e:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    5c82:	f382 8811 	msr	BASEPRI, r2
    5c86:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    5c8a:	68e8      	ldr	r0, [r5, #12]
    5c8c:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    5c90:	2b00      	cmp	r3, #0
    5c92:	d055      	beq.n	5d40 <uarte_nrfx_isr_async+0x2e8>
	__asm__ volatile(
    5c94:	f04f 0320 	mov.w	r3, #32
    5c98:	f3ef 8611 	mrs	r6, BASEPRI
    5c9c:	f383 8812 	msr	BASEPRI_MAX, r3
    5ca0:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    5ca4:	4629      	mov	r1, r5
    5ca6:	4620      	mov	r0, r4
    5ca8:	f005 fc15 	bl	b4d6 <start_tx_locked>
	__asm__ volatile(
    5cac:	f386 8811 	msr	BASEPRI, r6
    5cb0:	f3bf 8f6f 	isb	sy
				return;
    5cb4:	e6e5      	b.n	5a82 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5cb6:	2601      	movs	r6, #1
    5cb8:	e703      	b.n	5ac2 <uarte_nrfx_isr_async+0x6a>
    5cba:	2602      	movs	r6, #2
    5cbc:	e701      	b.n	5ac2 <uarte_nrfx_isr_async+0x6a>
    5cbe:	2604      	movs	r6, #4
    5cc0:	e6ff      	b.n	5ac2 <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    5cc2:	3160      	adds	r1, #96	; 0x60
    5cc4:	4620      	mov	r0, r4
    5cc6:	f005 faf2 	bl	b2ae <rx_buf_release>
	__asm__ volatile(
    5cca:	f04f 0320 	mov.w	r3, #32
    5cce:	f3ef 8111 	mrs	r1, BASEPRI
    5cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cd6:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    5cda:	68fb      	ldr	r3, [r7, #12]
    5cdc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5cde:	b1d2      	cbz	r2, 5d16 <uarte_nrfx_isr_async+0x2be>
		data->async->rx_buf = data->async->rx_next_buf;
    5ce0:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    5ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5ce4:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    5ce6:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    5ce8:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    5cec:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cee:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    5cf2:	b90b      	cbnz	r3, 5cf8 <uarte_nrfx_isr_async+0x2a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cf4:	2301      	movs	r3, #1
    5cf6:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    5cf8:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    5cfc:	f023 0320 	bic.w	r3, r3, #32
    5d00:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    5d04:	f381 8811 	msr	BASEPRI, r1
    5d08:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    5d0c:	68fb      	ldr	r3, [r7, #12]
    5d0e:	2200      	movs	r2, #0
    5d10:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    5d14:	e711      	b.n	5b3a <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d16:	2301      	movs	r3, #1
    5d18:	6073      	str	r3, [r6, #4]
}
    5d1a:	e7f3      	b.n	5d04 <uarte_nrfx_isr_async+0x2ac>
		(void)rx_flush(dev, NULL, 0);
    5d1c:	6860      	ldr	r0, [r4, #4]
    5d1e:	4611      	mov	r1, r2
    5d20:	f005 fb59 	bl	b3d6 <rx_flush.isra.0>
    5d24:	e75d      	b.n	5be2 <uarte_nrfx_isr_async+0x18a>
    p_reg->INTENCLR = mask;
    5d26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d2a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    5d2e:	2101      	movs	r1, #1
    5d30:	4620      	mov	r0, r4
    5d32:	f005 fb99 	bl	b468 <async_uart_release>
		if (!data->async->tx_size) {
    5d36:	68eb      	ldr	r3, [r5, #12]
    5d38:	68db      	ldr	r3, [r3, #12]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d18b      	bne.n	5c56 <uarte_nrfx_isr_async+0x1fe>
    5d3e:	e6a0      	b.n	5a82 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    5d40:	6882      	ldr	r2, [r0, #8]
    5d42:	6903      	ldr	r3, [r0, #16]
    5d44:	429a      	cmp	r2, r3
    5d46:	d00b      	beq.n	5d60 <uarte_nrfx_isr_async+0x308>
		if (amount == data->async->xfer_len) {
    5d48:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    5d4a:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    5d4c:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    5d4e:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    5d50:	d125      	bne.n	5d9e <uarte_nrfx_isr_async+0x346>
			data->async->tx_cache_offset += amount;
    5d52:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    5d54:	f005 fb74 	bl	b440 <setup_tx_cache.isra.0>
    5d58:	2800      	cmp	r0, #0
    5d5a:	d19b      	bne.n	5c94 <uarte_nrfx_isr_async+0x23c>
			amount = data->async->tx_cache_offset;
    5d5c:	68eb      	ldr	r3, [r5, #12]
    5d5e:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    5d60:	68e8      	ldr	r0, [r5, #12]
    5d62:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    5d64:	f005 fe8d 	bl	ba82 <z_impl_k_timer_stop>
	struct uart_event evt = {
    5d68:	2214      	movs	r2, #20
    5d6a:	2100      	movs	r1, #0
    5d6c:	a803      	add	r0, sp, #12
    5d6e:	f005 ff92 	bl	bc96 <memset>
		.data.tx.buf = data->async->tx_buf,
    5d72:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    5d74:	689a      	ldr	r2, [r3, #8]
    5d76:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    5d7a:	68da      	ldr	r2, [r3, #12]
    5d7c:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    5d7e:	bf1c      	itt	ne
    5d80:	2201      	movne	r2, #1
    5d82:	f88d 200c 	strbne.w	r2, [sp, #12]
    5d86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5d8a:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    5d8e:	2200      	movs	r2, #0
    5d90:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    5d92:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    5d94:	a903      	add	r1, sp, #12
    5d96:	4620      	mov	r0, r4
    5d98:	f005 fa69 	bl	b26e <user_callback>
    5d9c:	e671      	b.n	5a82 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    5d9e:	461e      	mov	r6, r3
    5da0:	e7de      	b.n	5d60 <uarte_nrfx_isr_async+0x308>
    5da2:	bf00      	nop
    5da4:	000f423f 	.word	0x000f423f
    5da8:	000f4240 	.word	0x000f4240

00005dac <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5dac:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5dae:	2301      	movs	r3, #1
    5db0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5db2:	4a0e      	ldr	r2, [pc, #56]	; (5dec <compare_int_lock+0x40>)
    5db4:	f3bf 8f5b 	dmb	ish
    5db8:	43dc      	mvns	r4, r3
    5dba:	e852 1f00 	ldrex	r1, [r2]
    5dbe:	ea01 0504 	and.w	r5, r1, r4
    5dc2:	e842 5600 	strex	r6, r5, [r2]
    5dc6:	2e00      	cmp	r6, #0
    5dc8:	d1f7      	bne.n	5dba <compare_int_lock+0xe>
    5dca:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5dce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5dd2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5dd4:	4806      	ldr	r0, [pc, #24]	; (5df0 <compare_int_lock+0x44>)
    5dd6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5dda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dde:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5de2:	420b      	tst	r3, r1
}
    5de4:	bf14      	ite	ne
    5de6:	2001      	movne	r0, #1
    5de8:	2000      	moveq	r0, #0
    5dea:	bd70      	pop	{r4, r5, r6, pc}
    5dec:	20000e64 	.word	0x20000e64
    5df0:	40011000 	.word	0x40011000

00005df4 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5df4:	491b      	ldr	r1, [pc, #108]	; (5e64 <sys_clock_timeout_handler+0x70>)
{
    5df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5df8:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5dfa:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5dfe:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5e00:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5e04:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5e08:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5e0e:	d30f      	bcc.n	5e30 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5e10:	f003 fbec 	bl	95ec <sys_clock_announce>
    return p_reg->CC[ch];
    5e14:	00a3      	lsls	r3, r4, #2
    5e16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e1a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5e1e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5e22:	4295      	cmp	r5, r2
    5e24:	d11d      	bne.n	5e62 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    5e26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5e2a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    5e2e:	e012      	b.n	5e56 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5e30:	4b0d      	ldr	r3, [pc, #52]	; (5e68 <sys_clock_timeout_handler+0x74>)
    5e32:	681b      	ldr	r3, [r3, #0]
    5e34:	0a1a      	lsrs	r2, r3, #8
    5e36:	061b      	lsls	r3, r3, #24
    5e38:	195e      	adds	r6, r3, r5
    5e3a:	4b0c      	ldr	r3, [pc, #48]	; (5e6c <sys_clock_timeout_handler+0x78>)
    5e3c:	f142 0700 	adc.w	r7, r2, #0
    5e40:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5e44:	f003 fbd2 	bl	95ec <sys_clock_announce>
    return p_reg->CC[ch];
    5e48:	4a09      	ldr	r2, [pc, #36]	; (5e70 <sys_clock_timeout_handler+0x7c>)
    5e4a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    5e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    5e52:	429d      	cmp	r5, r3
    5e54:	d105      	bne.n	5e62 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5e56:	4a06      	ldr	r2, [pc, #24]	; (5e70 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e5c:	40a3      	lsls	r3, r4
    5e5e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e64:	200006b0 	.word	0x200006b0
    5e68:	20000e68 	.word	0x20000e68
    5e6c:	200006b8 	.word	0x200006b8
    5e70:	40011000 	.word	0x40011000

00005e74 <compare_int_unlock>:
	if (key) {
    5e74:	b311      	cbz	r1, 5ebc <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e76:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5e7a:	2301      	movs	r3, #1
    5e7c:	4a10      	ldr	r2, [pc, #64]	; (5ec0 <compare_int_unlock+0x4c>)
    5e7e:	4083      	lsls	r3, r0
    5e80:	e852 cf00 	ldrex	ip, [r2]
    5e84:	ea4c 0c03 	orr.w	ip, ip, r3
    5e88:	e842 c100 	strex	r1, ip, [r2]
    5e8c:	2900      	cmp	r1, #0
    5e8e:	d1f7      	bne.n	5e80 <compare_int_unlock+0xc>
    5e90:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5e94:	4a0b      	ldr	r2, [pc, #44]	; (5ec4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e9a:	4083      	lsls	r3, r0
    5e9c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ea0:	4b09      	ldr	r3, [pc, #36]	; (5ec8 <compare_int_unlock+0x54>)
    5ea2:	f3bf 8f5b 	dmb	ish
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5eac:	40c3      	lsrs	r3, r0
    5eae:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5eb0:	bf42      	ittt	mi
    5eb2:	4b06      	ldrmi	r3, [pc, #24]	; (5ecc <compare_int_unlock+0x58>)
    5eb4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5eb8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5ebc:	4770      	bx	lr
    5ebe:	bf00      	nop
    5ec0:	20000e64 	.word	0x20000e64
    5ec4:	40011000 	.word	0x40011000
    5ec8:	20000e60 	.word	0x20000e60
    5ecc:	e000e100 	.word	0xe000e100

00005ed0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5ed0:	4b0d      	ldr	r3, [pc, #52]	; (5f08 <z_nrf_rtc_timer_read+0x38>)
    5ed2:	6818      	ldr	r0, [r3, #0]
    5ed4:	0a01      	lsrs	r1, r0, #8
    5ed6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5ed8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5edc:	4b0b      	ldr	r3, [pc, #44]	; (5f0c <z_nrf_rtc_timer_read+0x3c>)
    5ede:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5ee2:	1818      	adds	r0, r3, r0
    5ee4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5eec:	d20a      	bcs.n	5f04 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5eee:	4b08      	ldr	r3, [pc, #32]	; (5f10 <z_nrf_rtc_timer_read+0x40>)
    5ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ef4:	4290      	cmp	r0, r2
    5ef6:	eb71 0303 	sbcs.w	r3, r1, r3
    5efa:	d203      	bcs.n	5f04 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5efc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5f00:	f141 0100 	adc.w	r1, r1, #0
}
    5f04:	4770      	bx	lr
    5f06:	bf00      	nop
    5f08:	20000e68 	.word	0x20000e68
    5f0c:	40011000 	.word	0x40011000
    5f10:	200006b8 	.word	0x200006b8

00005f14 <compare_set>:
{
    5f14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f18:	4614      	mov	r4, r2
    5f1a:	461d      	mov	r5, r3
    5f1c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    5f1e:	f7ff ff45 	bl	5dac <compare_int_lock>
    5f22:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5f24:	f7ff ffd4 	bl	5ed0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5f28:	42a0      	cmp	r0, r4
    5f2a:	eb71 0305 	sbcs.w	r3, r1, r5
    5f2e:	d27a      	bcs.n	6026 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    5f30:	4b46      	ldr	r3, [pc, #280]	; (604c <compare_set+0x138>)
    5f32:	1a20      	subs	r0, r4, r0
    5f34:	eb65 0101 	sbc.w	r1, r5, r1
    5f38:	4298      	cmp	r0, r3
    5f3a:	f171 0100 	sbcs.w	r1, r1, #0
    5f3e:	f080 8081 	bcs.w	6044 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    5f42:	4b43      	ldr	r3, [pc, #268]	; (6050 <compare_set+0x13c>)
    5f44:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5f4c:	429d      	cmp	r5, r3
    5f4e:	bf08      	it	eq
    5f50:	4294      	cmpeq	r4, r2
    5f52:	d053      	beq.n	5ffc <compare_set+0xe8>
    5f54:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    5f58:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5f5c:	f107 0950 	add.w	r9, r7, #80	; 0x50
    5f60:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    5f64:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5f68:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    5f6c:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    5f70:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    5f78:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5f7c:	4a35      	ldr	r2, [pc, #212]	; (6054 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5f7e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    5f82:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5f84:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    5f86:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5f8a:	eba0 000b 	sub.w	r0, r0, fp
    5f8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5f92:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5f96:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5f98:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    5f9c:	d105      	bne.n	5faa <compare_set+0x96>
    5f9e:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    5fa0:	2013      	movs	r0, #19
    5fa2:	f005 fd3c 	bl	ba1e <z_impl_k_busy_wait>
    5fa6:	4a2b      	ldr	r2, [pc, #172]	; (6054 <compare_set+0x140>)
    5fa8:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5faa:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    5fae:	eba6 000c 	sub.w	r0, r6, ip
    5fb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5fb6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5fba:	bf88      	it	hi
    5fbc:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fbe:	2000      	movs	r0, #0
    5fc0:	f8c9 0000 	str.w	r0, [r9]
    5fc4:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    5fc8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5fcc:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5fd0:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5fd4:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    5fd8:	4583      	cmp	fp, r0
    5fda:	d006      	beq.n	5fea <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    5fdc:	1a30      	subs	r0, r6, r0
    5fde:	3802      	subs	r0, #2
    5fe0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5fe4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5fe8:	d81b      	bhi.n	6022 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    5fea:	eba6 0608 	sub.w	r6, r6, r8
    5fee:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5ff2:	1936      	adds	r6, r6, r4
    5ff4:	f145 0300 	adc.w	r3, r5, #0
    5ff8:	4634      	mov	r4, r6
    5ffa:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    5ffc:	4914      	ldr	r1, [pc, #80]	; (6050 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5ffe:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    6000:	013b      	lsls	r3, r7, #4
    6002:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    6006:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    6008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    600a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    600c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    6010:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    6012:	4638      	mov	r0, r7
    6014:	9900      	ldr	r1, [sp, #0]
    6016:	f7ff ff2d 	bl	5e74 <compare_int_unlock>
}
    601a:	4620      	mov	r0, r4
    601c:	b003      	add	sp, #12
    601e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6022:	4630      	mov	r0, r6
    6024:	e7af      	b.n	5f86 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    6026:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6028:	4a0b      	ldr	r2, [pc, #44]	; (6058 <compare_set+0x144>)
    602a:	f3bf 8f5b 	dmb	ish
    602e:	40bb      	lsls	r3, r7
    6030:	e852 0f00 	ldrex	r0, [r2]
    6034:	4318      	orrs	r0, r3
    6036:	e842 0100 	strex	r1, r0, [r2]
    603a:	2900      	cmp	r1, #0
    603c:	d1f8      	bne.n	6030 <compare_set+0x11c>
    603e:	f3bf 8f5b 	dmb	ish
    6042:	e7db      	b.n	5ffc <compare_set+0xe8>
			return -EINVAL;
    6044:	f06f 0415 	mvn.w	r4, #21
    6048:	e7e3      	b.n	6012 <compare_set+0xfe>
    604a:	bf00      	nop
    604c:	01000001 	.word	0x01000001
    6050:	200006a0 	.word	0x200006a0
    6054:	40011000 	.word	0x40011000
    6058:	20000e60 	.word	0x20000e60

0000605c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    605c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    605e:	4b19      	ldr	r3, [pc, #100]	; (60c4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    6060:	4d19      	ldr	r5, [pc, #100]	; (60c8 <sys_clock_driver_init+0x6c>)
    6062:	2400      	movs	r4, #0
    6064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    606c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    6070:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    6074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6078:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    607c:	4b13      	ldr	r3, [pc, #76]	; (60cc <sys_clock_driver_init+0x70>)
    607e:	2602      	movs	r6, #2
    6080:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6084:	2101      	movs	r1, #1
    6086:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    608a:	2011      	movs	r0, #17
    608c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6090:	4622      	mov	r2, r4
    6092:	f7fd fe8d 	bl	3db0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6096:	2011      	movs	r0, #17
    6098:	f7fd fe6e 	bl	3d78 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    609c:	4a0c      	ldr	r2, [pc, #48]	; (60d0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    609e:	2301      	movs	r3, #1
    60a0:	60ab      	str	r3, [r5, #8]
    60a2:	602b      	str	r3, [r5, #0]
    60a4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    60a6:	4b0b      	ldr	r3, [pc, #44]	; (60d4 <sys_clock_driver_init+0x78>)
    60a8:	4a0b      	ldr	r2, [pc, #44]	; (60d8 <sys_clock_driver_init+0x7c>)
    60aa:	9300      	str	r3, [sp, #0]
    60ac:	9401      	str	r4, [sp, #4]
    60ae:	2300      	movs	r3, #0
    60b0:	4620      	mov	r0, r4
    60b2:	f7ff ff2f 	bl	5f14 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    60b6:	4630      	mov	r0, r6
    60b8:	f7fe ff24 	bl	4f04 <z_nrf_clock_control_lf_on>

	return 0;
}
    60bc:	4620      	mov	r0, r4
    60be:	b002      	add	sp, #8
    60c0:	bd70      	pop	{r4, r5, r6, pc}
    60c2:	bf00      	nop
    60c4:	200006a0 	.word	0x200006a0
    60c8:	40011000 	.word	0x40011000
    60cc:	e000e100 	.word	0xe000e100
    60d0:	20000e64 	.word	0x20000e64
    60d4:	00005df5 	.word	0x00005df5
    60d8:	007fffff 	.word	0x007fffff

000060dc <rtc_nrf_isr>:
{
    60dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    60e0:	4c33      	ldr	r4, [pc, #204]	; (61b0 <rtc_nrf_isr+0xd4>)
    60e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    60e6:	079a      	lsls	r2, r3, #30
    60e8:	d50b      	bpl.n	6102 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    60ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    60ee:	b143      	cbz	r3, 6102 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    60f0:	4a30      	ldr	r2, [pc, #192]	; (61b4 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    60f2:	2300      	movs	r3, #0
    60f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    60f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    60fc:	6813      	ldr	r3, [r2, #0]
    60fe:	3301      	adds	r3, #1
    6100:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    6102:	f04f 0320 	mov.w	r3, #32
    6106:	f3ef 8211 	mrs	r2, BASEPRI
    610a:	f383 8812 	msr	BASEPRI_MAX, r3
    610e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    6112:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6116:	03db      	lsls	r3, r3, #15
    6118:	d529      	bpl.n	616e <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    611a:	f3bf 8f5b 	dmb	ish
    611e:	4b26      	ldr	r3, [pc, #152]	; (61b8 <rtc_nrf_isr+0xdc>)
    6120:	e853 1f00 	ldrex	r1, [r3]
    6124:	f021 0001 	bic.w	r0, r1, #1
    6128:	e843 0500 	strex	r5, r0, [r3]
    612c:	2d00      	cmp	r5, #0
    612e:	d1f7      	bne.n	6120 <rtc_nrf_isr+0x44>
    6130:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6134:	b911      	cbnz	r1, 613c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6136:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    613a:	b1c3      	cbz	r3, 616e <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    613c:	2500      	movs	r5, #0
    613e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6142:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    6146:	f382 8811 	msr	BASEPRI, r2
    614a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    614e:	f7ff febf 	bl	5ed0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    6152:	f04f 0320 	mov.w	r3, #32
    6156:	f3ef 8211 	mrs	r2, BASEPRI
    615a:	f383 8812 	msr	BASEPRI_MAX, r3
    615e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    6162:	4b16      	ldr	r3, [pc, #88]	; (61bc <rtc_nrf_isr+0xe0>)
    6164:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    6168:	42b0      	cmp	r0, r6
    616a:	41b9      	sbcs	r1, r7
    616c:	d206      	bcs.n	617c <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    616e:	f382 8811 	msr	BASEPRI, r2
    6172:	f3bf 8f6f 	isb	sy
}
    6176:	b003      	add	sp, #12
    6178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    617c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    6180:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    6184:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6188:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    618c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    618e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6192:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    6196:	f382 8811 	msr	BASEPRI, r2
    619a:	f3bf 8f6f 	isb	sy
		if (handler) {
    619e:	2900      	cmp	r1, #0
    61a0:	d0e9      	beq.n	6176 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    61a2:	9000      	str	r0, [sp, #0]
    61a4:	4632      	mov	r2, r6
    61a6:	463b      	mov	r3, r7
    61a8:	4628      	mov	r0, r5
    61aa:	4788      	blx	r1
}
    61ac:	e7e3      	b.n	6176 <rtc_nrf_isr+0x9a>
    61ae:	bf00      	nop
    61b0:	40011000 	.word	0x40011000
    61b4:	20000e68 	.word	0x20000e68
    61b8:	20000e60 	.word	0x20000e60
    61bc:	200006a0 	.word	0x200006a0

000061c0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61c0:	1c43      	adds	r3, r0, #1
{
    61c2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    61c4:	d021      	beq.n	620a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    61c6:	2801      	cmp	r0, #1
    61c8:	dd21      	ble.n	620e <sys_clock_set_timeout+0x4e>
    61ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    61ce:	da20      	bge.n	6212 <sys_clock_set_timeout+0x52>
    61d0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    61d2:	f7ff fe7d 	bl	5ed0 <z_nrf_rtc_timer_read>
    61d6:	4b10      	ldr	r3, [pc, #64]	; (6218 <sys_clock_set_timeout+0x58>)
    61d8:	e9d3 1300 	ldrd	r1, r3, [r3]
    61dc:	1a42      	subs	r2, r0, r1
		ticks = 0;
    61de:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    61e2:	480e      	ldr	r0, [pc, #56]	; (621c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    61e4:	bf28      	it	cs
    61e6:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    61e8:	3201      	adds	r2, #1
    61ea:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    61ec:	4282      	cmp	r2, r0
    61ee:	bf28      	it	cs
    61f0:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    61f2:	1852      	adds	r2, r2, r1
    61f4:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    61f8:	4909      	ldr	r1, [pc, #36]	; (6220 <sys_clock_set_timeout+0x60>)
    61fa:	9001      	str	r0, [sp, #4]
    61fc:	9100      	str	r1, [sp, #0]
    61fe:	f143 0300 	adc.w	r3, r3, #0
    6202:	f7ff fe87 	bl	5f14 <compare_set>
}
    6206:	b002      	add	sp, #8
    6208:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    620a:	4804      	ldr	r0, [pc, #16]	; (621c <sys_clock_set_timeout+0x5c>)
    620c:	e7e0      	b.n	61d0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    620e:	2400      	movs	r4, #0
    6210:	e7df      	b.n	61d2 <sys_clock_set_timeout+0x12>
    6212:	4c02      	ldr	r4, [pc, #8]	; (621c <sys_clock_set_timeout+0x5c>)
    6214:	e7dd      	b.n	61d2 <sys_clock_set_timeout+0x12>
    6216:	bf00      	nop
    6218:	200006b0 	.word	0x200006b0
    621c:	007fffff 	.word	0x007fffff
    6220:	00005df5 	.word	0x00005df5

00006224 <sys_clock_elapsed>:
{
    6224:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6226:	f7ff fe53 	bl	5ed0 <z_nrf_rtc_timer_read>
    622a:	4b02      	ldr	r3, [pc, #8]	; (6234 <sys_clock_elapsed+0x10>)
    622c:	681b      	ldr	r3, [r3, #0]
}
    622e:	1ac0      	subs	r0, r0, r3
    6230:	bd08      	pop	{r3, pc}
    6232:	bf00      	nop
    6234:	200006b0 	.word	0x200006b0

00006238 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6238:	6803      	ldr	r3, [r0, #0]
    switch (port)
    623a:	095a      	lsrs	r2, r3, #5
{
    623c:	b510      	push	{r4, lr}
    623e:	4604      	mov	r4, r0
    switch (port)
    6240:	d01d      	beq.n	627e <nrf_gpio_pin_port_decode+0x46>
    6242:	2a01      	cmp	r2, #1
    6244:	d106      	bne.n	6254 <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    6246:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    624a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    624e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6250:	07d3      	lsls	r3, r2, #31
    6252:	d40b      	bmi.n	626c <nrf_gpio_pin_port_decode+0x34>
    6254:	4914      	ldr	r1, [pc, #80]	; (62a8 <nrf_gpio_pin_port_decode+0x70>)
    6256:	4815      	ldr	r0, [pc, #84]	; (62ac <nrf_gpio_pin_port_decode+0x74>)
    6258:	4a15      	ldr	r2, [pc, #84]	; (62b0 <nrf_gpio_pin_port_decode+0x78>)
    625a:	f240 2329 	movw	r3, #553	; 0x229
    625e:	f004 fe69 	bl	af34 <assert_print>
    6262:	4813      	ldr	r0, [pc, #76]	; (62b0 <nrf_gpio_pin_port_decode+0x78>)
    6264:	f240 2129 	movw	r1, #553	; 0x229
    6268:	f004 fe5d 	bl	af26 <assert_post_action>
    uint32_t pin_number = *p_pin;
    626c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    626e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6272:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    6274:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6276:	d105      	bne.n	6284 <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    6278:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    627c:	bd10      	pop	{r4, pc}
    switch (port)
    627e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6282:	e7e2      	b.n	624a <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6284:	2b01      	cmp	r3, #1
    6286:	d00c      	beq.n	62a2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    6288:	4a09      	ldr	r2, [pc, #36]	; (62b0 <nrf_gpio_pin_port_decode+0x78>)
    628a:	490a      	ldr	r1, [pc, #40]	; (62b4 <nrf_gpio_pin_port_decode+0x7c>)
    628c:	4807      	ldr	r0, [pc, #28]	; (62ac <nrf_gpio_pin_port_decode+0x74>)
    628e:	f240 232e 	movw	r3, #558	; 0x22e
    6292:	f004 fe4f 	bl	af34 <assert_print>
    6296:	4806      	ldr	r0, [pc, #24]	; (62b0 <nrf_gpio_pin_port_decode+0x78>)
    6298:	f240 212e 	movw	r1, #558	; 0x22e
    629c:	f004 fe43 	bl	af26 <assert_post_action>
    62a0:	e7ea      	b.n	6278 <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    62a2:	4805      	ldr	r0, [pc, #20]	; (62b8 <nrf_gpio_pin_port_decode+0x80>)
    62a4:	e7ea      	b.n	627c <nrf_gpio_pin_port_decode+0x44>
    62a6:	bf00      	nop
    62a8:	0000da3a 	.word	0x0000da3a
    62ac:	0000c986 	.word	0x0000c986
    62b0:	0000da07 	.word	0x0000da07
    62b4:	0000e2d1 	.word	0x0000e2d1
    62b8:	50000300 	.word	0x50000300

000062bc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    62bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    62be:	ab0b      	add	r3, sp, #44	; 0x2c
    62c0:	9305      	str	r3, [sp, #20]
    62c2:	9303      	str	r3, [sp, #12]
    62c4:	4b05      	ldr	r3, [pc, #20]	; (62dc <z_log_msg2_runtime_create.constprop.0+0x20>)
    62c6:	9302      	str	r3, [sp, #8]
    62c8:	2300      	movs	r3, #0
    62ca:	e9cd 3300 	strd	r3, r3, [sp]
    62ce:	2201      	movs	r2, #1
    62d0:	4618      	mov	r0, r3
    62d2:	f7fd f975 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    62d6:	b007      	add	sp, #28
    62d8:	f85d fb04 	ldr.w	pc, [sp], #4
    62dc:	0000dafa 	.word	0x0000dafa

000062e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    62e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    62e2:	f7fc ff09 	bl	30f8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    62e6:	2400      	movs	r4, #0
    62e8:	4b06      	ldr	r3, [pc, #24]	; (6304 <k_sys_fatal_error_handler+0x24>)
    62ea:	9302      	str	r3, [sp, #8]
    62ec:	4620      	mov	r0, r4
    62ee:	e9cd 4400 	strd	r4, r4, [sp]
    62f2:	4905      	ldr	r1, [pc, #20]	; (6308 <k_sys_fatal_error_handler+0x28>)
    62f4:	4623      	mov	r3, r4
    62f6:	2201      	movs	r2, #1
    62f8:	f7ff ffe0 	bl	62bc <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    62fc:	4620      	mov	r0, r4
    62fe:	f7fe fc79 	bl	4bf4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6302:	bf00      	nop
    6304:	0000dafa 	.word	0x0000dafa
    6308:	0000c2b8 	.word	0x0000c2b8

0000630c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    630c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6310:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6314:	2a08      	cmp	r2, #8
    6316:	d106      	bne.n	6326 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6318:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    631c:	2b05      	cmp	r3, #5
    631e:	d802      	bhi.n	6326 <nrf52_errata_103+0x1a>
    6320:	4a02      	ldr	r2, [pc, #8]	; (632c <nrf52_errata_103+0x20>)
    6322:	5cd0      	ldrb	r0, [r2, r3]
    6324:	4770      	bx	lr
                        return false;
    6326:	2000      	movs	r0, #0
}
    6328:	4770      	bx	lr
    632a:	bf00      	nop
    632c:	0000db1d 	.word	0x0000db1d

00006330 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    6330:	4a02      	ldr	r2, [pc, #8]	; (633c <nvmc_wait+0xc>)
    6332:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6336:	2b00      	cmp	r3, #0
    6338:	d0fb      	beq.n	6332 <nvmc_wait+0x2>
}
    633a:	4770      	bx	lr
    633c:	4001e000 	.word	0x4001e000

00006340 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    6344:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    6346:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    634a:	2a08      	cmp	r2, #8
    634c:	d14e      	bne.n	63ec <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    634e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6352:	2100      	movs	r1, #0
    6354:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6358:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    635c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6360:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    6364:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    6368:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    636c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    6370:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6374:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    6378:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    637c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    6380:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6384:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    6388:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    638c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6390:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    6394:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    6398:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    639c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    63a0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    63a4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    63a8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    63ac:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    63b0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    63b4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    63b8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    63bc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    63c0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    63c4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    63c8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    63cc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    63d0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    63d4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    63d8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    63dc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    63e0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    63e4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    63e8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    63ec:	f7ff ff8e 	bl	630c <nrf52_errata_103>
    63f0:	b118      	cbz	r0, 63fa <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    63f2:	4b3b      	ldr	r3, [pc, #236]	; (64e0 <SystemInit+0x1a0>)
    63f4:	4a3b      	ldr	r2, [pc, #236]	; (64e4 <SystemInit+0x1a4>)
    63f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    63fa:	f7ff ff87 	bl	630c <nrf52_errata_103>
    63fe:	b118      	cbz	r0, 6408 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    6400:	4b39      	ldr	r3, [pc, #228]	; (64e8 <SystemInit+0x1a8>)
    6402:	22fb      	movs	r2, #251	; 0xfb
    6404:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6408:	f7ff ff80 	bl	630c <nrf52_errata_103>
    640c:	b170      	cbz	r0, 642c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    640e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6412:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6416:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    641a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    641e:	f022 020f 	bic.w	r2, r2, #15
    6422:	f003 030f 	and.w	r3, r3, #15
    6426:	4313      	orrs	r3, r2
    6428:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    642c:	f7ff ff6e 	bl	630c <nrf52_errata_103>
    6430:	b120      	cbz	r0, 643c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    6432:	4b2e      	ldr	r3, [pc, #184]	; (64ec <SystemInit+0x1ac>)
    6434:	f44f 7200 	mov.w	r2, #512	; 0x200
    6438:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    643c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6440:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    6444:	2b08      	cmp	r3, #8
    6446:	d11a      	bne.n	647e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    644c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6450:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    6452:	bf44      	itt	mi
    6454:	f06f 0201 	mvnmi.w	r2, #1
    6458:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    645c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6460:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    6464:	2b05      	cmp	r3, #5
    6466:	d802      	bhi.n	646e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6468:	4a21      	ldr	r2, [pc, #132]	; (64f0 <SystemInit+0x1b0>)
    646a:	5cd3      	ldrb	r3, [r2, r3]
    646c:	b13b      	cbz	r3, 647e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    646e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6472:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    647a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    647e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6482:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6486:	2a00      	cmp	r2, #0
    6488:	db03      	blt.n	6492 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    648a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    648e:	2b00      	cmp	r3, #0
    6490:	da22      	bge.n	64d8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6492:	4918      	ldr	r1, [pc, #96]	; (64f4 <SystemInit+0x1b4>)
    6494:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6496:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    649a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    649e:	2412      	movs	r4, #18
    nvmc_wait();
    64a0:	f7ff ff46 	bl	6330 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    64a4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    64a8:	f7ff ff42 	bl	6330 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    64ac:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    64b0:	f7ff ff3e 	bl	6330 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    64b4:	2300      	movs	r3, #0
    64b6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    64ba:	f7ff ff39 	bl	6330 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    64be:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    64c2:	490d      	ldr	r1, [pc, #52]	; (64f8 <SystemInit+0x1b8>)
    64c4:	4b0d      	ldr	r3, [pc, #52]	; (64fc <SystemInit+0x1bc>)
    64c6:	68ca      	ldr	r2, [r1, #12]
    64c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    64cc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    64ce:	60cb      	str	r3, [r1, #12]
    64d0:	f3bf 8f4f 	dsb	sy
    __NOP();
    64d4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    64d6:	e7fd      	b.n	64d4 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    64d8:	4b09      	ldr	r3, [pc, #36]	; (6500 <SystemInit+0x1c0>)
    64da:	4a0a      	ldr	r2, [pc, #40]	; (6504 <SystemInit+0x1c4>)
    64dc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    64de:	bd10      	pop	{r4, pc}
    64e0:	40005000 	.word	0x40005000
    64e4:	00038148 	.word	0x00038148
    64e8:	4000f000 	.word	0x4000f000
    64ec:	40029000 	.word	0x40029000
    64f0:	0000db17 	.word	0x0000db17
    64f4:	4001e000 	.word	0x4001e000
    64f8:	e000ed00 	.word	0xe000ed00
    64fc:	05fa0004 	.word	0x05fa0004
    6500:	20000064 	.word	0x20000064
    6504:	03d09000 	.word	0x03d09000

00006508 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6508:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    650a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    650c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    650e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    6512:	fab2 f382 	clz	r3, r2
    6516:	f1c3 031f 	rsb	r3, r3, #31
    651a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    651c:	fa05 f403 	lsl.w	r4, r5, r3
    6520:	ea22 0404 	bic.w	r4, r2, r4
    6524:	e850 6f00 	ldrex	r6, [r0]
    6528:	4296      	cmp	r6, r2
    652a:	d104      	bne.n	6536 <nrfx_flag32_alloc+0x2e>
    652c:	e840 4c00 	strex	ip, r4, [r0]
    6530:	f1bc 0f00 	cmp.w	ip, #0
    6534:	d1f6      	bne.n	6524 <nrfx_flag32_alloc+0x1c>
    6536:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    653a:	d1e7      	bne.n	650c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    653c:	4801      	ldr	r0, [pc, #4]	; (6544 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    653e:	700b      	strb	r3, [r1, #0]
}
    6540:	bd70      	pop	{r4, r5, r6, pc}
    6542:	bf00      	nop
    6544:	0bad0000 	.word	0x0bad0000

00006548 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6548:	6803      	ldr	r3, [r0, #0]
    654a:	40cb      	lsrs	r3, r1
    654c:	07db      	lsls	r3, r3, #31
{
    654e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6550:	d414      	bmi.n	657c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6552:	2301      	movs	r3, #1
    6554:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    6556:	6802      	ldr	r2, [r0, #0]
    6558:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    655c:	ea43 0102 	orr.w	r1, r3, r2
    6560:	e850 4f00 	ldrex	r4, [r0]
    6564:	4294      	cmp	r4, r2
    6566:	d104      	bne.n	6572 <nrfx_flag32_free+0x2a>
    6568:	e840 1c00 	strex	ip, r1, [r0]
    656c:	f1bc 0f00 	cmp.w	ip, #0
    6570:	d1f6      	bne.n	6560 <nrfx_flag32_free+0x18>
    6572:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6576:	d1ee      	bne.n	6556 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    6578:	4801      	ldr	r0, [pc, #4]	; (6580 <nrfx_flag32_free+0x38>)
}
    657a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    657c:	4801      	ldr	r0, [pc, #4]	; (6584 <nrfx_flag32_free+0x3c>)
    657e:	e7fc      	b.n	657a <nrfx_flag32_free+0x32>
    6580:	0bad0000 	.word	0x0bad0000
    6584:	0bad0004 	.word	0x0bad0004

00006588 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    6588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    658a:	4604      	mov	r4, r0
    658c:	b170      	cbz	r0, 65ac <clock_stop+0x24>
    658e:	2801      	cmp	r0, #1
    6590:	d02d      	beq.n	65ee <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6592:	4939      	ldr	r1, [pc, #228]	; (6678 <clock_stop+0xf0>)
    6594:	4839      	ldr	r0, [pc, #228]	; (667c <clock_stop+0xf4>)
    6596:	4a3a      	ldr	r2, [pc, #232]	; (6680 <clock_stop+0xf8>)
    6598:	23d8      	movs	r3, #216	; 0xd8
    659a:	f004 fccb 	bl	af34 <assert_print>
    659e:	4838      	ldr	r0, [pc, #224]	; (6680 <clock_stop+0xf8>)
    65a0:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    65a2:	b003      	add	sp, #12
    65a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    65a8:	f004 bcbd 	b.w	af26 <assert_post_action>
    p_reg->INTENCLR = mask;
    65ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65b0:	2202      	movs	r2, #2
    65b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65b6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    65ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    65be:	2201      	movs	r2, #1
    65c0:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    65c2:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    65c4:	2301      	movs	r3, #1
    65c6:	f88d 3007 	strb.w	r3, [sp, #7]
    65ca:	f242 7510 	movw	r5, #10000	; 0x2710
    65ce:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    65d2:	b1cc      	cbz	r4, 6608 <clock_stop+0x80>
    65d4:	2c01      	cmp	r4, #1
    65d6:	d037      	beq.n	6648 <clock_stop+0xc0>
            NRFX_ASSERT(0);
    65d8:	4927      	ldr	r1, [pc, #156]	; (6678 <clock_stop+0xf0>)
    65da:	4828      	ldr	r0, [pc, #160]	; (667c <clock_stop+0xf4>)
    65dc:	4a29      	ldr	r2, [pc, #164]	; (6684 <clock_stop+0xfc>)
    65de:	f44f 734f 	mov.w	r3, #828	; 0x33c
    65e2:	f004 fca7 	bl	af34 <assert_print>
    65e6:	4827      	ldr	r0, [pc, #156]	; (6684 <clock_stop+0xfc>)
    65e8:	f44f 714f 	mov.w	r1, #828	; 0x33c
    65ec:	e7d9      	b.n	65a2 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    65ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65f2:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    65f4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    65fc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6600:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6602:	f10d 0707 	add.w	r7, sp, #7
    6606:	e7dd      	b.n	65c4 <clock_stop+0x3c>
            if (p_clk_src != NULL)
    6608:	b19f      	cbz	r7, 6632 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    660a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    660e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6612:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6614:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6618:	03d8      	lsls	r0, r3, #15
    661a:	d513      	bpl.n	6644 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    661c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6620:	2801      	cmp	r0, #1
    6622:	d103      	bne.n	662c <clock_stop+0xa4>
    6624:	f005 f8fb 	bl	b81e <nrfx_busy_wait>
    6628:	3d01      	subs	r5, #1
    662a:	d1d2      	bne.n	65d2 <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    662c:	2c01      	cmp	r4, #1
    662e:	d015      	beq.n	665c <clock_stop+0xd4>
    6630:	e008      	b.n	6644 <clock_stop+0xbc>
    6632:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6636:	03d9      	lsls	r1, r3, #15
    6638:	d504      	bpl.n	6644 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    663a:	2001      	movs	r0, #1
    663c:	f005 f8ef 	bl	b81e <nrfx_busy_wait>
    6640:	3d01      	subs	r5, #1
    6642:	d1f6      	bne.n	6632 <clock_stop+0xaa>
}
    6644:	b003      	add	sp, #12
    6646:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    6648:	b167      	cbz	r7, 6664 <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    664a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    664e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6652:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6654:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6658:	03da      	lsls	r2, r3, #15
    665a:	d4df      	bmi.n	661c <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    665c:	4b0a      	ldr	r3, [pc, #40]	; (6688 <clock_stop+0x100>)
    665e:	2200      	movs	r2, #0
    6660:	715a      	strb	r2, [r3, #5]
    6662:	e7ef      	b.n	6644 <clock_stop+0xbc>
    6664:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6668:	03db      	lsls	r3, r3, #15
    666a:	d5f7      	bpl.n	665c <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    666c:	2001      	movs	r0, #1
    666e:	f005 f8d6 	bl	b81e <nrfx_busy_wait>
    6672:	3d01      	subs	r5, #1
    6674:	d1f6      	bne.n	6664 <clock_stop+0xdc>
    6676:	e7f1      	b.n	665c <clock_stop+0xd4>
    6678:	0000e2d1 	.word	0x0000e2d1
    667c:	0000c986 	.word	0x0000c986
    6680:	0000db23 	.word	0x0000db23
    6684:	0000db60 	.word	0x0000db60
    6688:	20000e6c 	.word	0x20000e6c

0000668c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    668c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    668e:	4604      	mov	r4, r0
    6690:	b958      	cbnz	r0, 66aa <nrfx_clock_init+0x1e>
    6692:	490b      	ldr	r1, [pc, #44]	; (66c0 <nrfx_clock_init+0x34>)
    6694:	480b      	ldr	r0, [pc, #44]	; (66c4 <nrfx_clock_init+0x38>)
    6696:	4a0c      	ldr	r2, [pc, #48]	; (66c8 <nrfx_clock_init+0x3c>)
    6698:	f240 1315 	movw	r3, #277	; 0x115
    669c:	f004 fc4a 	bl	af34 <assert_print>
    66a0:	4809      	ldr	r0, [pc, #36]	; (66c8 <nrfx_clock_init+0x3c>)
    66a2:	f240 1115 	movw	r1, #277	; 0x115
    66a6:	f004 fc3e 	bl	af26 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    66aa:	4b08      	ldr	r3, [pc, #32]	; (66cc <nrfx_clock_init+0x40>)
    66ac:	791a      	ldrb	r2, [r3, #4]
    66ae:	b922      	cbnz	r2, 66ba <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    66b0:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    66b2:	4807      	ldr	r0, [pc, #28]	; (66d0 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    66b4:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    66b6:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    66b8:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    66ba:	4806      	ldr	r0, [pc, #24]	; (66d4 <nrfx_clock_init+0x48>)
    return err_code;
    66bc:	e7fc      	b.n	66b8 <nrfx_clock_init+0x2c>
    66be:	bf00      	nop
    66c0:	0000db94 	.word	0x0000db94
    66c4:	0000c986 	.word	0x0000c986
    66c8:	0000db23 	.word	0x0000db23
    66cc:	20000e6c 	.word	0x20000e6c
    66d0:	0bad0000 	.word	0x0bad0000
    66d4:	0bad000c 	.word	0x0bad000c

000066d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    66d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    66da:	4b0d      	ldr	r3, [pc, #52]	; (6710 <nrfx_clock_enable+0x38>)
    66dc:	791b      	ldrb	r3, [r3, #4]
    66de:	b95b      	cbnz	r3, 66f8 <nrfx_clock_enable+0x20>
    66e0:	490c      	ldr	r1, [pc, #48]	; (6714 <nrfx_clock_enable+0x3c>)
    66e2:	480d      	ldr	r0, [pc, #52]	; (6718 <nrfx_clock_enable+0x40>)
    66e4:	4a0d      	ldr	r2, [pc, #52]	; (671c <nrfx_clock_enable+0x44>)
    66e6:	f44f 7397 	mov.w	r3, #302	; 0x12e
    66ea:	f004 fc23 	bl	af34 <assert_print>
    66ee:	480b      	ldr	r0, [pc, #44]	; (671c <nrfx_clock_enable+0x44>)
    66f0:	f44f 7197 	mov.w	r1, #302	; 0x12e
    66f4:	f004 fc17 	bl	af26 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    66f8:	2000      	movs	r0, #0
    66fa:	f7fd fb4b 	bl	3d94 <arch_irq_is_enabled>
    66fe:	b908      	cbnz	r0, 6704 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6700:	f7fd fb3a 	bl	3d78 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6708:	2200      	movs	r2, #0
    670a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    670e:	bd08      	pop	{r3, pc}
    6710:	20000e6c 	.word	0x20000e6c
    6714:	0000dba2 	.word	0x0000dba2
    6718:	0000c986 	.word	0x0000c986
    671c:	0000db23 	.word	0x0000db23

00006720 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6720:	4b2c      	ldr	r3, [pc, #176]	; (67d4 <nrfx_clock_start+0xb4>)
    6722:	791b      	ldrb	r3, [r3, #4]
{
    6724:	b510      	push	{r4, lr}
    6726:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6728:	b95b      	cbnz	r3, 6742 <nrfx_clock_start+0x22>
    672a:	492b      	ldr	r1, [pc, #172]	; (67d8 <nrfx_clock_start+0xb8>)
    672c:	482b      	ldr	r0, [pc, #172]	; (67dc <nrfx_clock_start+0xbc>)
    672e:	4a2c      	ldr	r2, [pc, #176]	; (67e0 <nrfx_clock_start+0xc0>)
    6730:	f44f 73b4 	mov.w	r3, #360	; 0x168
    6734:	f004 fbfe 	bl	af34 <assert_print>
    6738:	4829      	ldr	r0, [pc, #164]	; (67e0 <nrfx_clock_start+0xc0>)
    673a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    673e:	f004 fbf2 	bl	af26 <assert_post_action>
    switch (domain)
    6742:	b17c      	cbz	r4, 6764 <nrfx_clock_start+0x44>
    6744:	2c01      	cmp	r4, #1
    6746:	d03a      	beq.n	67be <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6748:	4926      	ldr	r1, [pc, #152]	; (67e4 <nrfx_clock_start+0xc4>)
    674a:	4824      	ldr	r0, [pc, #144]	; (67dc <nrfx_clock_start+0xbc>)
    674c:	4a24      	ldr	r2, [pc, #144]	; (67e0 <nrfx_clock_start+0xc0>)
    674e:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    6752:	f004 fbef 	bl	af34 <assert_print>
            break;
    }
}
    6756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    675a:	4821      	ldr	r0, [pc, #132]	; (67e0 <nrfx_clock_start+0xc0>)
    675c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    6760:	f004 bbe1 	b.w	af26 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6768:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    676c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6770:	03c8      	lsls	r0, r1, #15
    6772:	d512      	bpl.n	679a <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6774:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6778:	2b01      	cmp	r3, #1
    677a:	d11a      	bne.n	67b2 <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    677c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6780:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6784:	2300      	movs	r3, #0
    6786:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    678a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    678e:	2302      	movs	r3, #2
    6790:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6794:	2301      	movs	r3, #1
    6796:	6093      	str	r3, [r2, #8]
}
    6798:	e00a      	b.n	67b0 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    679a:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    679e:	07d9      	lsls	r1, r3, #31
    67a0:	d50b      	bpl.n	67ba <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    67a2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    67a6:	079b      	lsls	r3, r3, #30
    67a8:	d404      	bmi.n	67b4 <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    67aa:	2302      	movs	r3, #2
    67ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    67b0:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    67b2:	b113      	cbz	r3, 67ba <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    67b4:	2000      	movs	r0, #0
    67b6:	f7ff fee7 	bl	6588 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    67ba:	2300      	movs	r3, #0
    67bc:	e7de      	b.n	677c <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67c2:	2200      	movs	r2, #0
    67c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    67c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    67cc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67d0:	601c      	str	r4, [r3, #0]
}
    67d2:	e7ed      	b.n	67b0 <nrfx_clock_start+0x90>
    67d4:	20000e6c 	.word	0x20000e6c
    67d8:	0000dba2 	.word	0x0000dba2
    67dc:	0000c986 	.word	0x0000c986
    67e0:	0000db23 	.word	0x0000db23
    67e4:	0000e2d1 	.word	0x0000e2d1

000067e8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <nrfx_clock_stop+0x2c>)
    67ea:	791b      	ldrb	r3, [r3, #4]
{
    67ec:	b510      	push	{r4, lr}
    67ee:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    67f0:	b95b      	cbnz	r3, 680a <nrfx_clock_stop+0x22>
    67f2:	4909      	ldr	r1, [pc, #36]	; (6818 <nrfx_clock_stop+0x30>)
    67f4:	4809      	ldr	r0, [pc, #36]	; (681c <nrfx_clock_stop+0x34>)
    67f6:	4a0a      	ldr	r2, [pc, #40]	; (6820 <nrfx_clock_stop+0x38>)
    67f8:	f240 13ad 	movw	r3, #429	; 0x1ad
    67fc:	f004 fb9a 	bl	af34 <assert_print>
    6800:	4807      	ldr	r0, [pc, #28]	; (6820 <nrfx_clock_stop+0x38>)
    6802:	f240 11ad 	movw	r1, #429	; 0x1ad
    6806:	f004 fb8e 	bl	af26 <assert_post_action>
    clock_stop(domain);
    680a:	4620      	mov	r0, r4
}
    680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    6810:	f7ff beba 	b.w	6588 <clock_stop>
    6814:	20000e6c 	.word	0x20000e6c
    6818:	0000dba2 	.word	0x0000dba2
    681c:	0000c986 	.word	0x0000c986
    6820:	0000db23 	.word	0x0000db23

00006824 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6828:	b510      	push	{r4, lr}
    682a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    682e:	b16a      	cbz	r2, 684c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6830:	2200      	movs	r2, #0
    6832:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6836:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    683a:	2201      	movs	r2, #1
    683c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6840:	4b11      	ldr	r3, [pc, #68]	; (6888 <nrfx_power_clock_irq_handler+0x64>)
    6842:	7958      	ldrb	r0, [r3, #5]
    6844:	b910      	cbnz	r0, 684c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    6846:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6848:	681b      	ldr	r3, [r3, #0]
    684a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    684c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6850:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6854:	b172      	cbz	r2, 6874 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6856:	2200      	movs	r2, #0
    6858:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    685c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6860:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6864:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6868:	0792      	lsls	r2, r2, #30
    686a:	d104      	bne.n	6876 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    686c:	2201      	movs	r2, #1
    686e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6872:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6874:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6876:	2202      	movs	r2, #2
    6878:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    687c:	4b02      	ldr	r3, [pc, #8]	; (6888 <nrfx_power_clock_irq_handler+0x64>)
}
    687e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6882:	681b      	ldr	r3, [r3, #0]
    6884:	2001      	movs	r0, #1
    6886:	4718      	bx	r3
    6888:	20000e6c 	.word	0x20000e6c

0000688c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    688c:	4b03      	ldr	r3, [pc, #12]	; (689c <pin_in_use_by_te+0x10>)
    688e:	3008      	adds	r0, #8
    6890:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6894:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6898:	4770      	bx	lr
    689a:	bf00      	nop
    689c:	20000068 	.word	0x20000068

000068a0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    68a0:	4b04      	ldr	r3, [pc, #16]	; (68b4 <pin_has_trigger+0x14>)
    68a2:	3008      	adds	r0, #8
    68a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    68a8:	f010 001c 	ands.w	r0, r0, #28
    68ac:	bf18      	it	ne
    68ae:	2001      	movne	r0, #1
    68b0:	4770      	bx	lr
    68b2:	bf00      	nop
    68b4:	20000068 	.word	0x20000068

000068b8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    68b8:	4b03      	ldr	r3, [pc, #12]	; (68c8 <pin_is_output+0x10>)
    68ba:	3008      	adds	r0, #8
    68bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    68c0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    68c4:	4770      	bx	lr
    68c6:	bf00      	nop
    68c8:	20000068 	.word	0x20000068

000068cc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    68cc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    68ce:	f100 0308 	add.w	r3, r0, #8
    68d2:	4c0c      	ldr	r4, [pc, #48]	; (6904 <call_handler+0x38>)
    68d4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    68d8:	05da      	lsls	r2, r3, #23
{
    68da:	4605      	mov	r5, r0
    68dc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    68de:	d507      	bpl.n	68f0 <call_handler+0x24>
    68e0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    68e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    68e8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    68ec:	6852      	ldr	r2, [r2, #4]
    68ee:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    68f0:	68a3      	ldr	r3, [r4, #8]
    68f2:	b12b      	cbz	r3, 6900 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    68f4:	68e2      	ldr	r2, [r4, #12]
    68f6:	4631      	mov	r1, r6
    68f8:	4628      	mov	r0, r5
    }
}
    68fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    68fe:	4718      	bx	r3
}
    6900:	bd70      	pop	{r4, r5, r6, pc}
    6902:	bf00      	nop
    6904:	20000068 	.word	0x20000068

00006908 <nrf_gpio_pin_port_decode>:
{
    6908:	b510      	push	{r4, lr}
    690a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    690c:	6800      	ldr	r0, [r0, #0]
    690e:	f004 ff88 	bl	b822 <nrf_gpio_pin_present_check>
    6912:	b958      	cbnz	r0, 692c <nrf_gpio_pin_port_decode+0x24>
    6914:	4912      	ldr	r1, [pc, #72]	; (6960 <nrf_gpio_pin_port_decode+0x58>)
    6916:	4813      	ldr	r0, [pc, #76]	; (6964 <nrf_gpio_pin_port_decode+0x5c>)
    6918:	4a13      	ldr	r2, [pc, #76]	; (6968 <nrf_gpio_pin_port_decode+0x60>)
    691a:	f240 2329 	movw	r3, #553	; 0x229
    691e:	f004 fb09 	bl	af34 <assert_print>
    6922:	4811      	ldr	r0, [pc, #68]	; (6968 <nrf_gpio_pin_port_decode+0x60>)
    6924:	f240 2129 	movw	r1, #553	; 0x229
    6928:	f004 fafd 	bl	af26 <assert_post_action>
    uint32_t pin_number = *p_pin;
    692c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    692e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6932:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    6934:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6936:	d102      	bne.n	693e <nrf_gpio_pin_port_decode+0x36>
{
    6938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    693c:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    693e:	2b01      	cmp	r3, #1
    6940:	d00c      	beq.n	695c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    6942:	4a09      	ldr	r2, [pc, #36]	; (6968 <nrf_gpio_pin_port_decode+0x60>)
    6944:	4909      	ldr	r1, [pc, #36]	; (696c <nrf_gpio_pin_port_decode+0x64>)
    6946:	4807      	ldr	r0, [pc, #28]	; (6964 <nrf_gpio_pin_port_decode+0x5c>)
    6948:	f240 232e 	movw	r3, #558	; 0x22e
    694c:	f004 faf2 	bl	af34 <assert_print>
    6950:	4805      	ldr	r0, [pc, #20]	; (6968 <nrf_gpio_pin_port_decode+0x60>)
    6952:	f240 212e 	movw	r1, #558	; 0x22e
    6956:	f004 fae6 	bl	af26 <assert_post_action>
    695a:	e7ed      	b.n	6938 <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    695c:	4804      	ldr	r0, [pc, #16]	; (6970 <nrf_gpio_pin_port_decode+0x68>)
    695e:	e7ed      	b.n	693c <nrf_gpio_pin_port_decode+0x34>
    6960:	0000da3a 	.word	0x0000da3a
    6964:	0000c986 	.word	0x0000c986
    6968:	0000da07 	.word	0x0000da07
    696c:	0000e2d1 	.word	0x0000e2d1
    6970:	50000300 	.word	0x50000300

00006974 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6974:	4a19      	ldr	r2, [pc, #100]	; (69dc <release_handler+0x68>)
    6976:	3008      	adds	r0, #8
{
    6978:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    697a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    697e:	05d9      	lsls	r1, r3, #23
    6980:	d51d      	bpl.n	69be <release_handler+0x4a>
    6982:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6986:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    698a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    698e:	f102 040e 	add.w	r4, r2, #14
    6992:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6994:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6998:	f413 7f80 	tst.w	r3, #256	; 0x100
    699c:	d003      	beq.n	69a6 <release_handler+0x32>
    699e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    69a2:	4299      	cmp	r1, r3
    69a4:	d00b      	beq.n	69be <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    69a6:	3001      	adds	r0, #1
    69a8:	2830      	cmp	r0, #48	; 0x30
    69aa:	d1f3      	bne.n	6994 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    69ac:	2300      	movs	r3, #0
    69ae:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    69b2:	480b      	ldr	r0, [pc, #44]	; (69e0 <release_handler+0x6c>)
    69b4:	f7ff fdc8 	bl	6548 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    69b8:	4b0a      	ldr	r3, [pc, #40]	; (69e4 <release_handler+0x70>)
    69ba:	4298      	cmp	r0, r3
    69bc:	d100      	bne.n	69c0 <release_handler+0x4c>
}
    69be:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    69c0:	4909      	ldr	r1, [pc, #36]	; (69e8 <release_handler+0x74>)
    69c2:	480a      	ldr	r0, [pc, #40]	; (69ec <release_handler+0x78>)
    69c4:	4a0a      	ldr	r2, [pc, #40]	; (69f0 <release_handler+0x7c>)
    69c6:	f44f 7399 	mov.w	r3, #306	; 0x132
    69ca:	f004 fab3 	bl	af34 <assert_print>
}
    69ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    69d2:	4807      	ldr	r0, [pc, #28]	; (69f0 <release_handler+0x7c>)
    69d4:	f44f 7199 	mov.w	r1, #306	; 0x132
    69d8:	f004 baa5 	b.w	af26 <assert_post_action>
    69dc:	20000068 	.word	0x20000068
    69e0:	200000dc 	.word	0x200000dc
    69e4:	0bad0000 	.word	0x0bad0000
    69e8:	0000dc24 	.word	0x0000dc24
    69ec:	0000c986 	.word	0x0000c986
    69f0:	0000dbc0 	.word	0x0000dbc0

000069f4 <pin_handler_trigger_uninit>:
{
    69f4:	b538      	push	{r3, r4, r5, lr}
    69f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    69f8:	f7ff ff48 	bl	688c <pin_in_use_by_te>
    69fc:	4c09      	ldr	r4, [pc, #36]	; (6a24 <pin_handler_trigger_uninit+0x30>)
    69fe:	f102 0508 	add.w	r5, r2, #8
    6a02:	b140      	cbz	r0, 6a16 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a04:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6a08:	4907      	ldr	r1, [pc, #28]	; (6a28 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6a0a:	0b5b      	lsrs	r3, r3, #13
    6a0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6a10:	2000      	movs	r0, #0
    6a12:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6a16:	4610      	mov	r0, r2
    6a18:	f7ff ffac 	bl	6974 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6a1c:	2300      	movs	r3, #0
    6a1e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6a22:	bd38      	pop	{r3, r4, r5, pc}
    6a24:	20000068 	.word	0x20000068
    6a28:	40006000 	.word	0x40006000

00006a2c <nrfx_gpiote_input_configure>:
{
    6a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a2e:	4604      	mov	r4, r0
    6a30:	b085      	sub	sp, #20
    6a32:	4617      	mov	r7, r2
    6a34:	461d      	mov	r5, r3
    if (p_input_config)
    6a36:	b1d9      	cbz	r1, 6a70 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    6a38:	f004 ff04 	bl	b844 <pin_is_task_output>
    6a3c:	bb00      	cbnz	r0, 6a80 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6a3e:	460b      	mov	r3, r1
    6a40:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6a44:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6a48:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6a4c:	f10d 020f 	add.w	r2, sp, #15
    6a50:	f10d 010e 	add.w	r1, sp, #14
    6a54:	4620      	mov	r0, r4
    6a56:	f004 ff00 	bl	b85a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6a5a:	4a43      	ldr	r2, [pc, #268]	; (6b68 <nrfx_gpiote_input_configure+0x13c>)
    6a5c:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6a60:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6a64:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6a68:	f043 0301 	orr.w	r3, r3, #1
    6a6c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6a70:	b347      	cbz	r7, 6ac4 <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    6a72:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6a74:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6a76:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    6a78:	f7ff ff1e 	bl	68b8 <pin_is_output>
    6a7c:	b110      	cbz	r0, 6a84 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    6a7e:	b1b2      	cbz	r2, 6aae <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    6a80:	483a      	ldr	r0, [pc, #232]	; (6b6c <nrfx_gpiote_input_configure+0x140>)
    6a82:	e021      	b.n	6ac8 <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6a84:	4f38      	ldr	r7, [pc, #224]	; (6b68 <nrfx_gpiote_input_configure+0x13c>)
    6a86:	f104 0c08 	add.w	ip, r4, #8
    6a8a:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    6a8e:	f021 0120 	bic.w	r1, r1, #32
    6a92:	04c9      	lsls	r1, r1, #19
    6a94:	0cc9      	lsrs	r1, r1, #19
    6a96:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    6a9a:	b142      	cbz	r2, 6aae <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    6a9c:	2e03      	cmp	r6, #3
    6a9e:	d8ef      	bhi.n	6a80 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6aa0:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6aa2:	b99e      	cbnz	r6, 6acc <nrfx_gpiote_input_configure+0xa0>
    6aa4:	4a32      	ldr	r2, [pc, #200]	; (6b70 <nrfx_gpiote_input_configure+0x144>)
    6aa6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6aaa:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6aae:	4a2e      	ldr	r2, [pc, #184]	; (6b68 <nrfx_gpiote_input_configure+0x13c>)
    6ab0:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6ab4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6ab8:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6abc:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    6ac0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6ac4:	bb3d      	cbnz	r5, 6b16 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    6ac6:	482b      	ldr	r0, [pc, #172]	; (6b74 <nrfx_gpiote_input_configure+0x148>)
}
    6ac8:	b005      	add	sp, #20
    6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6acc:	009a      	lsls	r2, r3, #2
    6ace:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6ad2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6ad6:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    6ada:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6ade:	f020 0003 	bic.w	r0, r0, #3
    6ae2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6ae6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6aea:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    6aee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6af2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6af6:	0220      	lsls	r0, r4, #8
    6af8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6afc:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6b04:	ea40 000e 	orr.w	r0, r0, lr
    6b08:	f041 0120 	orr.w	r1, r1, #32
    6b0c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    6b10:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6b14:	e7cb      	b.n	6aae <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6b16:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6b1a:	4620      	mov	r0, r4
    6b1c:	f7ff ff2a 	bl	6974 <release_handler>
    if (!handler)
    6b20:	2e00      	cmp	r6, #0
    6b22:	d0d0      	beq.n	6ac6 <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6b24:	4d10      	ldr	r5, [pc, #64]	; (6b68 <nrfx_gpiote_input_configure+0x13c>)
    6b26:	e9d5 2300 	ldrd	r2, r3, [r5]
    6b2a:	4296      	cmp	r6, r2
    6b2c:	d101      	bne.n	6b32 <nrfx_gpiote_input_configure+0x106>
    6b2e:	429f      	cmp	r7, r3
    6b30:	d018      	beq.n	6b64 <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6b32:	4811      	ldr	r0, [pc, #68]	; (6b78 <nrfx_gpiote_input_configure+0x14c>)
    6b34:	f10d 010f 	add.w	r1, sp, #15
    6b38:	f7ff fce6 	bl	6508 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6b3c:	4b0d      	ldr	r3, [pc, #52]	; (6b74 <nrfx_gpiote_input_configure+0x148>)
    6b3e:	4298      	cmp	r0, r3
    6b40:	d1c2      	bne.n	6ac8 <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    6b42:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6b46:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6b4a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6b4e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6b50:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6b52:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6b56:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6b5e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6b62:	e7b0      	b.n	6ac6 <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6b64:	2200      	movs	r2, #0
    6b66:	e7ee      	b.n	6b46 <nrfx_gpiote_input_configure+0x11a>
    6b68:	20000068 	.word	0x20000068
    6b6c:	0bad0004 	.word	0x0bad0004
    6b70:	40006000 	.word	0x40006000
    6b74:	0bad0000 	.word	0x0bad0000
    6b78:	200000dc 	.word	0x200000dc

00006b7c <nrfx_gpiote_output_configure>:
{
    6b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b7e:	4604      	mov	r4, r0
    6b80:	b085      	sub	sp, #20
    6b82:	4615      	mov	r5, r2
    if (p_config)
    6b84:	b321      	cbz	r1, 6bd0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    6b86:	f7ff fe97 	bl	68b8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6b8a:	b920      	cbnz	r0, 6b96 <nrfx_gpiote_output_configure+0x1a>
    6b8c:	4620      	mov	r0, r4
    6b8e:	f7ff fe7d 	bl	688c <pin_in_use_by_te>
    6b92:	2800      	cmp	r0, #0
    6b94:	d15e      	bne.n	6c54 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6b96:	4620      	mov	r0, r4
    6b98:	f7ff fe82 	bl	68a0 <pin_has_trigger>
    6b9c:	b110      	cbz	r0, 6ba4 <nrfx_gpiote_output_configure+0x28>
    6b9e:	784b      	ldrb	r3, [r1, #1]
    6ba0:	2b01      	cmp	r3, #1
    6ba2:	d057      	beq.n	6c54 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6ba4:	2301      	movs	r3, #1
    6ba6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6baa:	2300      	movs	r3, #0
    6bac:	e9cd 1300 	strd	r1, r3, [sp]
    6bb0:	1c4a      	adds	r2, r1, #1
    6bb2:	1c8b      	adds	r3, r1, #2
    6bb4:	4620      	mov	r0, r4
    6bb6:	f10d 010f 	add.w	r1, sp, #15
    6bba:	f004 fe4e 	bl	b85a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6bbe:	4a26      	ldr	r2, [pc, #152]	; (6c58 <nrfx_gpiote_output_configure+0xdc>)
    6bc0:	f104 0108 	add.w	r1, r4, #8
    6bc4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6bc8:	f043 0303 	orr.w	r3, r3, #3
    6bcc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6bd0:	b915      	cbnz	r5, 6bd8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    6bd2:	4822      	ldr	r0, [pc, #136]	; (6c5c <nrfx_gpiote_output_configure+0xe0>)
}
    6bd4:	b005      	add	sp, #20
    6bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    6bd8:	4620      	mov	r0, r4
    6bda:	f7ff fe6d 	bl	68b8 <pin_is_output>
        if (pin_is_input(pin))
    6bde:	b3c8      	cbz	r0, 6c54 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6be0:	4e1d      	ldr	r6, [pc, #116]	; (6c58 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    6be2:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6be6:	f104 0708 	add.w	r7, r4, #8
    6bea:	4661      	mov	r1, ip
    6bec:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    6bf0:	0089      	lsls	r1, r1, #2
    6bf2:	f020 0020 	bic.w	r0, r0, #32
    6bf6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6bfa:	04c0      	lsls	r0, r0, #19
    6bfc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6c00:	0cc0      	lsrs	r0, r0, #19
    6c02:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    6c06:	2300      	movs	r3, #0
    6c08:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6c0c:	786a      	ldrb	r2, [r5, #1]
    6c0e:	2a00      	cmp	r2, #0
    6c10:	d0df      	beq.n	6bd2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6c12:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6c16:	78ad      	ldrb	r5, [r5, #2]
    6c18:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6c1c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6c20:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c24:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6c28:	0223      	lsls	r3, r4, #8
    6c2a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6c2e:	0412      	lsls	r2, r2, #16
    6c30:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c34:	ea43 030e 	orr.w	r3, r3, lr
    6c38:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6c3a:	052a      	lsls	r2, r5, #20
    6c3c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6c40:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6c44:	4313      	orrs	r3, r2
    6c46:	f040 0020 	orr.w	r0, r0, #32
    6c4a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6c4e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6c52:	e7be      	b.n	6bd2 <nrfx_gpiote_output_configure+0x56>
{
    6c54:	4802      	ldr	r0, [pc, #8]	; (6c60 <nrfx_gpiote_output_configure+0xe4>)
    6c56:	e7bd      	b.n	6bd4 <nrfx_gpiote_output_configure+0x58>
    6c58:	20000068 	.word	0x20000068
    6c5c:	0bad0000 	.word	0x0bad0000
    6c60:	0bad0004 	.word	0x0bad0004

00006c64 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6c64:	4b01      	ldr	r3, [pc, #4]	; (6c6c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6c66:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6c6a:	4770      	bx	lr
    6c6c:	20000068 	.word	0x20000068

00006c70 <nrfx_gpiote_channel_get>:
{
    6c70:	b538      	push	{r3, r4, r5, lr}
    6c72:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6c74:	460d      	mov	r5, r1
    6c76:	b959      	cbnz	r1, 6c90 <nrfx_gpiote_channel_get+0x20>
    6c78:	490c      	ldr	r1, [pc, #48]	; (6cac <nrfx_gpiote_channel_get+0x3c>)
    6c7a:	480d      	ldr	r0, [pc, #52]	; (6cb0 <nrfx_gpiote_channel_get+0x40>)
    6c7c:	4a0d      	ldr	r2, [pc, #52]	; (6cb4 <nrfx_gpiote_channel_get+0x44>)
    6c7e:	f240 2335 	movw	r3, #565	; 0x235
    6c82:	f004 f957 	bl	af34 <assert_print>
    6c86:	480b      	ldr	r0, [pc, #44]	; (6cb4 <nrfx_gpiote_channel_get+0x44>)
    6c88:	f240 2135 	movw	r1, #565	; 0x235
    6c8c:	f004 f94b 	bl	af26 <assert_post_action>
    if (pin_in_use_by_te(pin))
    6c90:	4620      	mov	r0, r4
    6c92:	f7ff fdfb 	bl	688c <pin_in_use_by_te>
    6c96:	b138      	cbz	r0, 6ca8 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c98:	4b07      	ldr	r3, [pc, #28]	; (6cb8 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    6c9a:	4808      	ldr	r0, [pc, #32]	; (6cbc <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c9c:	3408      	adds	r4, #8
    6c9e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6ca2:	0b5b      	lsrs	r3, r3, #13
    6ca4:	702b      	strb	r3, [r5, #0]
}
    6ca6:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ca8:	4805      	ldr	r0, [pc, #20]	; (6cc0 <nrfx_gpiote_channel_get+0x50>)
    6caa:	e7fc      	b.n	6ca6 <nrfx_gpiote_channel_get+0x36>
    6cac:	0000dc38 	.word	0x0000dc38
    6cb0:	0000c986 	.word	0x0000c986
    6cb4:	0000dbc0 	.word	0x0000dbc0
    6cb8:	20000068 	.word	0x20000068
    6cbc:	0bad0000 	.word	0x0bad0000
    6cc0:	0bad0004 	.word	0x0bad0004

00006cc4 <nrfx_gpiote_init>:
{
    6cc4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6cc6:	4c0f      	ldr	r4, [pc, #60]	; (6d04 <nrfx_gpiote_init+0x40>)
    6cc8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6ccc:	b9bd      	cbnz	r5, 6cfe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6cce:	2260      	movs	r2, #96	; 0x60
    6cd0:	4629      	mov	r1, r5
    6cd2:	f104 0010 	add.w	r0, r4, #16
    6cd6:	f004 ffde 	bl	bc96 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6cda:	2006      	movs	r0, #6
    6cdc:	f7fd f84c 	bl	3d78 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ce0:	4b09      	ldr	r3, [pc, #36]	; (6d08 <nrfx_gpiote_init+0x44>)
    return err_code;
    6ce2:	480a      	ldr	r0, [pc, #40]	; (6d0c <nrfx_gpiote_init+0x48>)
    6ce4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6ce8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6cec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6cf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6cf4:	2301      	movs	r3, #1
    6cf6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6cfa:	6763      	str	r3, [r4, #116]	; 0x74
}
    6cfc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6cfe:	4804      	ldr	r0, [pc, #16]	; (6d10 <nrfx_gpiote_init+0x4c>)
    6d00:	e7fc      	b.n	6cfc <nrfx_gpiote_init+0x38>
    6d02:	bf00      	nop
    6d04:	20000068 	.word	0x20000068
    6d08:	40006000 	.word	0x40006000
    6d0c:	0bad0000 	.word	0x0bad0000
    6d10:	0bad0005 	.word	0x0bad0005

00006d14 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6d14:	4b03      	ldr	r3, [pc, #12]	; (6d24 <nrfx_gpiote_is_init+0x10>)
    6d16:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6d1a:	3800      	subs	r0, #0
    6d1c:	bf18      	it	ne
    6d1e:	2001      	movne	r0, #1
    6d20:	4770      	bx	lr
    6d22:	bf00      	nop
    6d24:	20000068 	.word	0x20000068

00006d28 <nrfx_gpiote_channel_free>:
{
    6d28:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6d2a:	4801      	ldr	r0, [pc, #4]	; (6d30 <nrfx_gpiote_channel_free+0x8>)
    6d2c:	f7ff bc0c 	b.w	6548 <nrfx_flag32_free>
    6d30:	200000d8 	.word	0x200000d8

00006d34 <nrfx_gpiote_channel_alloc>:
{
    6d34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6d36:	4801      	ldr	r0, [pc, #4]	; (6d3c <nrfx_gpiote_channel_alloc+0x8>)
    6d38:	f7ff bbe6 	b.w	6508 <nrfx_flag32_alloc>
    6d3c:	200000d8 	.word	0x200000d8

00006d40 <nrfx_gpiote_trigger_enable>:
{
    6d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d42:	4604      	mov	r4, r0
    6d44:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6d46:	f7ff fdab 	bl	68a0 <pin_has_trigger>
    6d4a:	b958      	cbnz	r0, 6d64 <nrfx_gpiote_trigger_enable+0x24>
    6d4c:	492e      	ldr	r1, [pc, #184]	; (6e08 <nrfx_gpiote_trigger_enable+0xc8>)
    6d4e:	482f      	ldr	r0, [pc, #188]	; (6e0c <nrfx_gpiote_trigger_enable+0xcc>)
    6d50:	4a2f      	ldr	r2, [pc, #188]	; (6e10 <nrfx_gpiote_trigger_enable+0xd0>)
    6d52:	f240 33df 	movw	r3, #991	; 0x3df
    6d56:	f004 f8ed 	bl	af34 <assert_print>
    6d5a:	482d      	ldr	r0, [pc, #180]	; (6e10 <nrfx_gpiote_trigger_enable+0xd0>)
    6d5c:	f240 31df 	movw	r1, #991	; 0x3df
    6d60:	f004 f8e1 	bl	af26 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6d64:	4620      	mov	r0, r4
    6d66:	f7ff fd91 	bl	688c <pin_in_use_by_te>
    6d6a:	4e2a      	ldr	r6, [pc, #168]	; (6e14 <nrfx_gpiote_trigger_enable+0xd4>)
    6d6c:	f104 0708 	add.w	r7, r4, #8
    6d70:	b1f8      	cbz	r0, 6db2 <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    6d72:	4620      	mov	r0, r4
    6d74:	f7ff fda0 	bl	68b8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6d78:	b9d8      	cbnz	r0, 6db2 <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6d7a:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    6d7e:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6d80:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    6d82:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    6d86:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    6d8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6d8e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d92:	6008      	str	r0, [r1, #0]
    6d94:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6d96:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    6d9a:	f041 0101 	orr.w	r1, r1, #1
    6d9e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    6da2:	b125      	cbz	r5, 6dae <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6da4:	2301      	movs	r3, #1
    6da6:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    6da8:	4a1b      	ldr	r2, [pc, #108]	; (6e18 <nrfx_gpiote_trigger_enable+0xd8>)
    6daa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6dae:	b003      	add	sp, #12
    6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    6db2:	b95d      	cbnz	r5, 6dcc <nrfx_gpiote_trigger_enable+0x8c>
    6db4:	4919      	ldr	r1, [pc, #100]	; (6e1c <nrfx_gpiote_trigger_enable+0xdc>)
    6db6:	4815      	ldr	r0, [pc, #84]	; (6e0c <nrfx_gpiote_trigger_enable+0xcc>)
    6db8:	4a15      	ldr	r2, [pc, #84]	; (6e10 <nrfx_gpiote_trigger_enable+0xd0>)
    6dba:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6dbe:	f004 f8b9 	bl	af34 <assert_print>
    6dc2:	4813      	ldr	r0, [pc, #76]	; (6e10 <nrfx_gpiote_trigger_enable+0xd0>)
    6dc4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6dc8:	f004 f8ad 	bl	af26 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6dcc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6dd0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6dd4:	2b04      	cmp	r3, #4
    6dd6:	d012      	beq.n	6dfe <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6dd8:	2b05      	cmp	r3, #5
    6dda:	d012      	beq.n	6e02 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ddc:	a801      	add	r0, sp, #4
    6dde:	9401      	str	r4, [sp, #4]
    6de0:	f7ff fd92 	bl	6908 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6de4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6de6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6dea:	40d9      	lsrs	r1, r3
    6dec:	f001 0101 	and.w	r1, r1, #1
    6df0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6df2:	4620      	mov	r0, r4
}
    6df4:	b003      	add	sp, #12
    6df6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6dfa:	f004 bd7b 	b.w	b8f4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6dfe:	2103      	movs	r1, #3
    6e00:	e7f7      	b.n	6df2 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6e02:	2102      	movs	r1, #2
    6e04:	e7f5      	b.n	6df2 <nrfx_gpiote_trigger_enable+0xb2>
    6e06:	bf00      	nop
    6e08:	0000dc42 	.word	0x0000dc42
    6e0c:	0000c986 	.word	0x0000c986
    6e10:	0000dbc0 	.word	0x0000dbc0
    6e14:	20000068 	.word	0x20000068
    6e18:	40006000 	.word	0x40006000
    6e1c:	0000dc57 	.word	0x0000dc57

00006e20 <nrfx_gpiote_trigger_disable>:
{
    6e20:	b508      	push	{r3, lr}
    6e22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6e24:	f7ff fd32 	bl	688c <pin_in_use_by_te>
    6e28:	b1c8      	cbz	r0, 6e5e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    6e2a:	4610      	mov	r0, r2
    6e2c:	f7ff fd44 	bl	68b8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6e30:	b9a8      	cbnz	r0, 6e5e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e32:	3208      	adds	r2, #8
    6e34:	4b0d      	ldr	r3, [pc, #52]	; (6e6c <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    6e36:	490e      	ldr	r1, [pc, #56]	; (6e70 <nrfx_gpiote_trigger_disable+0x50>)
    6e38:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6e3c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e3e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6e40:	409a      	lsls	r2, r3
    6e42:	009b      	lsls	r3, r3, #2
    6e44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6e48:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6e4c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6e50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6e54:	f022 0203 	bic.w	r2, r2, #3
    6e58:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6e5c:	bd08      	pop	{r3, pc}
    6e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6e62:	2100      	movs	r1, #0
    6e64:	4610      	mov	r0, r2
    6e66:	f004 bd45 	b.w	b8f4 <nrf_gpio_cfg_sense_set>
    6e6a:	bf00      	nop
    6e6c:	20000068 	.word	0x20000068
    6e70:	40006000 	.word	0x40006000

00006e74 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6e74:	4b0e      	ldr	r3, [pc, #56]	; (6eb0 <nrfx_gpiote_pin_uninit+0x3c>)
    6e76:	f100 0208 	add.w	r2, r0, #8
{
    6e7a:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6e7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6e80:	07db      	lsls	r3, r3, #31
{
    6e82:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6e84:	d511      	bpl.n	6eaa <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6e86:	f7ff ffcb 	bl	6e20 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6e8a:	4620      	mov	r0, r4
    6e8c:	f7ff fdb2 	bl	69f4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6e90:	a801      	add	r0, sp, #4
    6e92:	9401      	str	r4, [sp, #4]
    6e94:	f7ff fd38 	bl	6908 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6e98:	9b01      	ldr	r3, [sp, #4]
    6e9a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6e9e:	2202      	movs	r2, #2
    6ea0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6ea4:	4803      	ldr	r0, [pc, #12]	; (6eb4 <nrfx_gpiote_pin_uninit+0x40>)
}
    6ea6:	b002      	add	sp, #8
    6ea8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6eaa:	4803      	ldr	r0, [pc, #12]	; (6eb8 <nrfx_gpiote_pin_uninit+0x44>)
    6eac:	e7fb      	b.n	6ea6 <nrfx_gpiote_pin_uninit+0x32>
    6eae:	bf00      	nop
    6eb0:	20000068 	.word	0x20000068
    6eb4:	0bad0000 	.word	0x0bad0000
    6eb8:	0bad0004 	.word	0x0bad0004

00006ebc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ec0:	4b69      	ldr	r3, [pc, #420]	; (7068 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    6ec2:	486a      	ldr	r0, [pc, #424]	; (706c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ec4:	496a      	ldr	r1, [pc, #424]	; (7070 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    6ec6:	2600      	movs	r6, #0
{
    6ec8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6eca:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ecc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ece:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6ed0:	b135      	cbz	r5, 6ee0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6ed2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6ed6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ed8:	bf1e      	ittt	ne
    6eda:	601c      	strne	r4, [r3, #0]
    6edc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6ede:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ee0:	3304      	adds	r3, #4
    6ee2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6ee4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ee8:	d1f1      	bne.n	6ece <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6eea:	f8df 9180 	ldr.w	r9, [pc, #384]	; 706c <nrfx_gpiote_irq_handler+0x1b0>
    6eee:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	f000 809b 	beq.w	702e <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    6ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6efc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6f00:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6f02:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6f06:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6f0a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6f0c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6f10:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6f14:	f10d 0a10 	add.w	sl, sp, #16
    6f18:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6f1c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6f1e:	f04f 0b01 	mov.w	fp, #1
    6f22:	e04b      	b.n	6fbc <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    6f24:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f26:	4a53      	ldr	r2, [pc, #332]	; (7074 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6f28:	fa94 f4a4 	rbit	r4, r4
    6f2c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6f30:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6f32:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f34:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6f38:	f004 0107 	and.w	r1, r4, #7
    6f3c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6f40:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6f44:	9403      	str	r4, [sp, #12]
    6f46:	fa0b f101 	lsl.w	r1, fp, r1
    6f4a:	ea23 0301 	bic.w	r3, r3, r1
    6f4e:	08ba      	lsrs	r2, r7, #2
    6f50:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f54:	a803      	add	r0, sp, #12
    6f56:	9201      	str	r2, [sp, #4]
    6f58:	f7ff fcd6 	bl	6908 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6f5c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    6f5e:	9a01      	ldr	r2, [sp, #4]
    6f60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f64:	f3c7 0582 	ubfx	r5, r7, #2, #3
    6f68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    6f6c:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f6e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6f70:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6f74:	d52c      	bpl.n	6fd0 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    6f76:	4639      	mov	r1, r7
    6f78:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6f7a:	b2dd      	uxtb	r5, r3
    6f7c:	f7ff fca6 	bl	68cc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f80:	a803      	add	r0, sp, #12
    6f82:	9403      	str	r4, [sp, #12]
    6f84:	f7ff fcc0 	bl	6908 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6f88:	9b03      	ldr	r3, [sp, #12]
    6f8a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6f8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6f92:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6f96:	429d      	cmp	r5, r3
    6f98:	d107      	bne.n	6faa <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6f9a:	2100      	movs	r1, #0
    6f9c:	4620      	mov	r0, r4
    6f9e:	f004 fca9 	bl	b8f4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6fa2:	4629      	mov	r1, r5
    6fa4:	4620      	mov	r0, r4
    6fa6:	f004 fca5 	bl	b8f4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6faa:	a803      	add	r0, sp, #12
    6fac:	9403      	str	r4, [sp, #12]
    6fae:	f7ff fcab 	bl	6908 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6fb2:	9b03      	ldr	r3, [sp, #12]
    6fb4:	fa0b f303 	lsl.w	r3, fp, r3
    6fb8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6fbc:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6fc0:	2c00      	cmp	r4, #0
    6fc2:	d1af      	bne.n	6f24 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6fc4:	f1b8 0f00 	cmp.w	r8, #0
    6fc8:	d11d      	bne.n	7006 <nrfx_gpiote_irq_handler+0x14a>
    6fca:	f04f 0801 	mov.w	r8, #1
    6fce:	e7a3      	b.n	6f18 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6fd0:	2b02      	cmp	r3, #2
    6fd2:	d10c      	bne.n	6fee <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6fd4:	2103      	movs	r1, #3
    6fd6:	4620      	mov	r0, r4
    6fd8:	f004 fc8c 	bl	b8f4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6fdc:	f005 0305 	and.w	r3, r5, #5
    6fe0:	2b01      	cmp	r3, #1
    6fe2:	d1e2      	bne.n	6faa <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    6fe4:	4639      	mov	r1, r7
    6fe6:	4620      	mov	r0, r4
    6fe8:	f7ff fc70 	bl	68cc <call_handler>
    6fec:	e7dd      	b.n	6faa <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6fee:	2102      	movs	r1, #2
    6ff0:	4620      	mov	r0, r4
    6ff2:	9301      	str	r3, [sp, #4]
    6ff4:	f004 fc7e 	bl	b8f4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6ff8:	2d03      	cmp	r5, #3
    6ffa:	d0f3      	beq.n	6fe4 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	2b03      	cmp	r3, #3
    7000:	d1d3      	bne.n	6faa <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7002:	2d02      	cmp	r5, #2
    7004:	e7ed      	b.n	6fe2 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    7006:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    700a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    700e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    7012:	4919      	ldr	r1, [pc, #100]	; (7078 <nrfx_gpiote_irq_handler+0x1bc>)
    7014:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    7018:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    701a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    701e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    7022:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    7024:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    7026:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    702a:	f47f af71 	bne.w	6f10 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    702e:	2401      	movs	r4, #1
    while (mask)
    7030:	b916      	cbnz	r6, 7038 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7032:	b007      	add	sp, #28
    7034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    7038:	fa96 f3a6 	rbit	r3, r6
    703c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    7040:	fa04 f203 	lsl.w	r2, r4, r3
    7044:	009b      	lsls	r3, r3, #2
    7046:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    704a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    704e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7052:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7056:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    705a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    705e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    7062:	f7ff fc33 	bl	68cc <call_handler>
    7066:	e7e3      	b.n	7030 <nrfx_gpiote_irq_handler+0x174>
    7068:	40006100 	.word	0x40006100
    706c:	40006000 	.word	0x40006000
    7070:	40006120 	.word	0x40006120
    7074:	20000068 	.word	0x20000068
    7078:	50000300 	.word	0x50000300

0000707c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    707c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    707e:	4801      	ldr	r0, [pc, #4]	; (7084 <nrfx_ppi_channel_alloc+0x8>)
    7080:	f7ff ba42 	b.w	6508 <nrfx_flag32_alloc>
    7084:	200000e4 	.word	0x200000e4

00007088 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7088:	4b11      	ldr	r3, [pc, #68]	; (70d0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    708a:	4912      	ldr	r1, [pc, #72]	; (70d4 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    708c:	2203      	movs	r2, #3
    708e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    7090:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7092:	4a11      	ldr	r2, [pc, #68]	; (70d8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    7094:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7096:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    7098:	f44f 6280 	mov.w	r2, #1024	; 0x400
    709c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    709e:	2200      	movs	r2, #0
    70a0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    70a2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    70a4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    70a6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    70a8:	490c      	ldr	r1, [pc, #48]	; (70dc <_DoInit+0x54>)
    70aa:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    70ac:	2110      	movs	r1, #16
    70ae:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    70b0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    70b2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    70b4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    70b6:	4a0a      	ldr	r2, [pc, #40]	; (70e0 <_DoInit+0x58>)
    70b8:	6812      	ldr	r2, [r2, #0]
    70ba:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    70be:	4a09      	ldr	r2, [pc, #36]	; (70e4 <_DoInit+0x5c>)
    70c0:	6810      	ldr	r0, [r2, #0]
    70c2:	8892      	ldrh	r2, [r2, #4]
    70c4:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    70c6:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    70c8:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    70ca:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    70cc:	4770      	bx	lr
    70ce:	bf00      	nop
    70d0:	20000e74 	.word	0x20000e74
    70d4:	0000dc62 	.word	0x0000dc62
    70d8:	2000d166 	.word	0x2000d166
    70dc:	2000d156 	.word	0x2000d156
    70e0:	0000dc6b 	.word	0x0000dc6b
    70e4:	0000dc6f 	.word	0x0000dc6f

000070e8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    70e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    70ec:	4f21      	ldr	r7, [pc, #132]	; (7174 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    70ee:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    70f2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    70f4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    70f8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    70fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    70fc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    70fe:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7100:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7102:	d831      	bhi.n	7168 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7104:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7108:	ebaa 0905 	sub.w	r9, sl, r5
    710c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7110:	4294      	cmp	r4, r2
    7112:	d811      	bhi.n	7138 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7114:	2318      	movs	r3, #24
    7116:	fb06 3303 	mla	r3, r6, r3, r3
    711a:	443b      	add	r3, r7
    711c:	4622      	mov	r2, r4
    711e:	6858      	ldr	r0, [r3, #4]
    7120:	4641      	mov	r1, r8
    7122:	4428      	add	r0, r5
    7124:	f004 fd96 	bl	bc54 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    7128:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    712a:	2318      	movs	r3, #24
    712c:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    7130:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    7132:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7138:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    713a:	429c      	cmp	r4, r3
    713c:	d818      	bhi.n	7170 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    713e:	fb00 bb0b 	mla	fp, r0, fp, fp
    7142:	44bb      	add	fp, r7
    7144:	464a      	mov	r2, r9
    7146:	f8db 0004 	ldr.w	r0, [fp, #4]
    714a:	442c      	add	r4, r5
    714c:	4428      	add	r0, r5
    714e:	f004 fd81 	bl	bc54 <memcpy>
      if (NumBytes) {
    7152:	ebb4 040a 	subs.w	r4, r4, sl
    7156:	d0e8      	beq.n	712a <SEGGER_RTT_WriteSkipNoLock+0x42>
    7158:	f8db 0004 	ldr.w	r0, [fp, #4]
    715c:	4622      	mov	r2, r4
    715e:	eb08 0109 	add.w	r1, r8, r9
    7162:	f004 fd77 	bl	bc54 <memcpy>
      return 1;
    7166:	e7e0      	b.n	712a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    7168:	3b01      	subs	r3, #1
    716a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    716c:	42a3      	cmp	r3, r4
    716e:	d2d1      	bcs.n	7114 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7170:	2000      	movs	r0, #0
    7172:	e7df      	b.n	7134 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7174:	20000e74 	.word	0x20000e74

00007178 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7178:	4b03      	ldr	r3, [pc, #12]	; (7188 <SEGGER_RTT_HasDataUp+0x10>)
    717a:	2218      	movs	r2, #24
    717c:	fb02 3300 	mla	r3, r2, r0, r3
    7180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7182:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7184:	1a80      	subs	r0, r0, r2
    7186:	4770      	bx	lr
    7188:	20000e74 	.word	0x20000e74

0000718c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    718c:	4b0e      	ldr	r3, [pc, #56]	; (71c8 <z_sys_init_run_level+0x3c>)
{
    718e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7190:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    7194:	3001      	adds	r0, #1
    7196:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    719a:	42a6      	cmp	r6, r4
    719c:	d800      	bhi.n	71a0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    719e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    71a0:	e9d4 3500 	ldrd	r3, r5, [r4]
    71a4:	4628      	mov	r0, r5
    71a6:	4798      	blx	r3
		if (dev != NULL) {
    71a8:	b165      	cbz	r5, 71c4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    71aa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    71ac:	b130      	cbz	r0, 71bc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    71ae:	2800      	cmp	r0, #0
    71b0:	bfb8      	it	lt
    71b2:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    71b4:	28ff      	cmp	r0, #255	; 0xff
    71b6:	bfa8      	it	ge
    71b8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    71ba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    71bc:	785a      	ldrb	r2, [r3, #1]
    71be:	f042 0201 	orr.w	r2, r2, #1
    71c2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    71c4:	3408      	adds	r4, #8
    71c6:	e7e8      	b.n	719a <z_sys_init_run_level+0xe>
    71c8:	0000c5c8 	.word	0x0000c5c8

000071cc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    71cc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    71ce:	4605      	mov	r5, r0
    71d0:	b910      	cbnz	r0, 71d8 <z_impl_device_get_binding+0xc>
		return NULL;
    71d2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    71d4:	4620      	mov	r0, r4
    71d6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    71d8:	7803      	ldrb	r3, [r0, #0]
    71da:	2b00      	cmp	r3, #0
    71dc:	d0f9      	beq.n	71d2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    71de:	4c0e      	ldr	r4, [pc, #56]	; (7218 <z_impl_device_get_binding+0x4c>)
    71e0:	4e0e      	ldr	r6, [pc, #56]	; (721c <z_impl_device_get_binding+0x50>)
    71e2:	42b4      	cmp	r4, r6
    71e4:	d108      	bne.n	71f8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    71e6:	4c0c      	ldr	r4, [pc, #48]	; (7218 <z_impl_device_get_binding+0x4c>)
    71e8:	42b4      	cmp	r4, r6
    71ea:	d0f2      	beq.n	71d2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    71ec:	4620      	mov	r0, r4
    71ee:	f004 fb98 	bl	b922 <z_device_is_ready>
    71f2:	b950      	cbnz	r0, 720a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    71f4:	3418      	adds	r4, #24
    71f6:	e7f7      	b.n	71e8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    71f8:	4620      	mov	r0, r4
    71fa:	f004 fb92 	bl	b922 <z_device_is_ready>
    71fe:	b110      	cbz	r0, 7206 <z_impl_device_get_binding+0x3a>
    7200:	6823      	ldr	r3, [r4, #0]
    7202:	42ab      	cmp	r3, r5
    7204:	d0e6      	beq.n	71d4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    7206:	3418      	adds	r4, #24
    7208:	e7eb      	b.n	71e2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    720a:	6821      	ldr	r1, [r4, #0]
    720c:	4628      	mov	r0, r5
    720e:	f7f9 ff05 	bl	101c <strcmp>
    7212:	2800      	cmp	r0, #0
    7214:	d1ee      	bne.n	71f4 <z_impl_device_get_binding+0x28>
    7216:	e7dd      	b.n	71d4 <z_impl_device_get_binding+0x8>
    7218:	0000c0b8 	.word	0x0000c0b8
    721c:	0000c130 	.word	0x0000c130

00007220 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7224:	4605      	mov	r5, r0
    7226:	b086      	sub	sp, #24
    7228:	460f      	mov	r7, r1
	__asm__ volatile(
    722a:	f04f 0320 	mov.w	r3, #32
    722e:	f3ef 8811 	mrs	r8, BASEPRI
    7232:	f383 8812 	msr	BASEPRI_MAX, r3
    7236:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    723a:	f001 ff05 	bl	9048 <z_impl_z_current_get>
    723e:	2d04      	cmp	r5, #4
    7240:	bf96      	itet	ls
    7242:	4b29      	ldrls	r3, [pc, #164]	; (72e8 <z_fatal_error+0xc8>)
    7244:	4b29      	ldrhi	r3, [pc, #164]	; (72ec <z_fatal_error+0xcc>)
    7246:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    724a:	4929      	ldr	r1, [pc, #164]	; (72f0 <z_fatal_error+0xd0>)
    724c:	9503      	str	r5, [sp, #12]
    724e:	2400      	movs	r4, #0
    7250:	e9cd 3404 	strd	r3, r4, [sp, #16]
    7254:	4b27      	ldr	r3, [pc, #156]	; (72f4 <z_fatal_error+0xd4>)
    7256:	9400      	str	r4, [sp, #0]
    7258:	e9cd 4301 	strd	r4, r3, [sp, #4]
    725c:	4606      	mov	r6, r0
    725e:	4623      	mov	r3, r4
    7260:	2201      	movs	r2, #1
    7262:	4620      	mov	r0, r4
    7264:	f004 fb67 	bl	b936 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7268:	b16f      	cbz	r7, 7286 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    726a:	69fb      	ldr	r3, [r7, #28]
    726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7270:	b14b      	cbz	r3, 7286 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    7272:	4b21      	ldr	r3, [pc, #132]	; (72f8 <z_fatal_error+0xd8>)
    7274:	491e      	ldr	r1, [pc, #120]	; (72f0 <z_fatal_error+0xd0>)
    7276:	9400      	str	r4, [sp, #0]
    7278:	e9cd 4301 	strd	r4, r3, [sp, #4]
    727c:	2201      	movs	r2, #1
    727e:	4623      	mov	r3, r4
    7280:	4620      	mov	r0, r4
    7282:	f004 fb58 	bl	b936 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7286:	b12e      	cbz	r6, 7294 <z_fatal_error+0x74>
    7288:	4630      	mov	r0, r6
    728a:	f004 fb8a 	bl	b9a2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    728e:	b108      	cbz	r0, 7294 <z_fatal_error+0x74>
    7290:	7803      	ldrb	r3, [r0, #0]
    7292:	b903      	cbnz	r3, 7296 <z_fatal_error+0x76>
		thread_name = "unknown";
    7294:	4819      	ldr	r0, [pc, #100]	; (72fc <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7296:	4b1a      	ldr	r3, [pc, #104]	; (7300 <z_fatal_error+0xe0>)
    7298:	9302      	str	r3, [sp, #8]
    729a:	2300      	movs	r3, #0
    729c:	e9cd 6003 	strd	r6, r0, [sp, #12]
    72a0:	e9cd 3300 	strd	r3, r3, [sp]
    72a4:	4618      	mov	r0, r3
    72a6:	4912      	ldr	r1, [pc, #72]	; (72f0 <z_fatal_error+0xd0>)
    72a8:	2201      	movs	r2, #1
    72aa:	f004 fb44 	bl	b936 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    72ae:	4639      	mov	r1, r7
    72b0:	4628      	mov	r0, r5
    72b2:	f7ff f815 	bl	62e0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    72b6:	2d04      	cmp	r5, #4
    72b8:	d10c      	bne.n	72d4 <z_fatal_error+0xb4>
    72ba:	4912      	ldr	r1, [pc, #72]	; (7304 <z_fatal_error+0xe4>)
    72bc:	4a12      	ldr	r2, [pc, #72]	; (7308 <z_fatal_error+0xe8>)
    72be:	4813      	ldr	r0, [pc, #76]	; (730c <z_fatal_error+0xec>)
    72c0:	238f      	movs	r3, #143	; 0x8f
    72c2:	f003 fe37 	bl	af34 <assert_print>
    72c6:	4812      	ldr	r0, [pc, #72]	; (7310 <z_fatal_error+0xf0>)
    72c8:	f003 fe34 	bl	af34 <assert_print>
    72cc:	480e      	ldr	r0, [pc, #56]	; (7308 <z_fatal_error+0xe8>)
    72ce:	218f      	movs	r1, #143	; 0x8f
    72d0:	f003 fe29 	bl	af26 <assert_post_action>
	__asm__ volatile(
    72d4:	f388 8811 	msr	BASEPRI, r8
    72d8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    72dc:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    72de:	b006      	add	sp, #24
    72e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    72e4:	f7fd ba0c 	b.w	4700 <z_impl_k_thread_abort>
    72e8:	0000c5e0 	.word	0x0000c5e0
    72ec:	0000dc76 	.word	0x0000dc76
    72f0:	0000c2d8 	.word	0x0000c2d8
    72f4:	0000dc8c 	.word	0x0000dc8c
    72f8:	0000dcb4 	.word	0x0000dcb4
    72fc:	0000dc84 	.word	0x0000dc84
    7300:	0000dcd5 	.word	0x0000dcd5
    7304:	0000dd0f 	.word	0x0000dd0f
    7308:	0000dced 	.word	0x0000dced
    730c:	0000c986 	.word	0x0000c986
    7310:	0000dd2c 	.word	0x0000dd2c

00007314 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7314:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7316:	4b0a      	ldr	r3, [pc, #40]	; (7340 <bg_thread_main+0x2c>)
    7318:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    731a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    731c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    731e:	f7ff ff35 	bl	718c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7322:	f002 fbe5 	bl	9af0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7326:	2003      	movs	r0, #3
    7328:	f7ff ff30 	bl	718c <z_sys_init_run_level>

	z_init_static_threads();
    732c:	f000 fa7c 	bl	7828 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    7330:	f7fa fabe 	bl	18b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7334:	4a03      	ldr	r2, [pc, #12]	; (7344 <bg_thread_main+0x30>)
    7336:	7b13      	ldrb	r3, [r2, #12]
    7338:	f023 0301 	bic.w	r3, r3, #1
    733c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    733e:	bd08      	pop	{r3, pc}
    7340:	2000d566 	.word	0x2000d566
    7344:	20000740 	.word	0x20000740

00007348 <z_bss_zero>:
{
    7348:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    734a:	4803      	ldr	r0, [pc, #12]	; (7358 <z_bss_zero+0x10>)
    734c:	4a03      	ldr	r2, [pc, #12]	; (735c <z_bss_zero+0x14>)
    734e:	2100      	movs	r1, #0
    7350:	1a12      	subs	r2, r2, r0
    7352:	f004 fb00 	bl	b956 <z_early_memset>
}
    7356:	bd08      	pop	{r3, pc}
    7358:	20000270 	.word	0x20000270
    735c:	2000d568 	.word	0x2000d568

00007360 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7360:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    7362:	2300      	movs	r3, #0
{
    7364:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    7366:	2201      	movs	r2, #1
    7368:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    736c:	4e13      	ldr	r6, [pc, #76]	; (73bc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    736e:	4d14      	ldr	r5, [pc, #80]	; (73c0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7370:	9301      	str	r3, [sp, #4]
    7372:	220f      	movs	r2, #15
    7374:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7378:	4912      	ldr	r1, [pc, #72]	; (73c4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    737a:	2318      	movs	r3, #24
    737c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    7380:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    7384:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    7386:	f44f 70b0 	mov.w	r0, #352	; 0x160
    738a:	fb00 1104 	mla	r1, r0, r4, r1
    738e:	4b0e      	ldr	r3, [pc, #56]	; (73c8 <z_init_cpu+0x68>)
    7390:	9500      	str	r5, [sp, #0]
    7392:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7396:	4630      	mov	r0, r6
    7398:	f000 f992 	bl	76c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    739c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    739e:	4a0b      	ldr	r2, [pc, #44]	; (73cc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    73a0:	60ee      	str	r6, [r5, #12]
    73a2:	f023 0304 	bic.w	r3, r3, #4
    73a6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    73a8:	f44f 6302 	mov.w	r3, #2080	; 0x820
    73ac:	fb04 3303 	mla	r3, r4, r3, r3
    73b0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    73b2:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    73b4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    73b6:	b006      	add	sp, #24
    73b8:	bd70      	pop	{r4, r5, r6, pc}
    73ba:	bf00      	nop
    73bc:	200006c0 	.word	0x200006c0
    73c0:	20000f1c 	.word	0x20000f1c
    73c4:	20010640 	.word	0x20010640
    73c8:	00007985 	.word	0x00007985
    73cc:	2000fe20 	.word	0x2000fe20

000073d0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    73d0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    73d2:	4b2f      	ldr	r3, [pc, #188]	; (7490 <z_cstart+0xc0>)
    73d4:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    73d6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    73da:	4d2e      	ldr	r5, [pc, #184]	; (7494 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    73dc:	4e2e      	ldr	r6, [pc, #184]	; (7498 <z_cstart+0xc8>)
    73de:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    73e0:	4f2e      	ldr	r7, [pc, #184]	; (749c <z_cstart+0xcc>)
    73e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    73e6:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    73e8:	2400      	movs	r4, #0
    73ea:	23e0      	movs	r3, #224	; 0xe0
    73ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    73f0:	77ec      	strb	r4, [r5, #31]
    73f2:	762c      	strb	r4, [r5, #24]
    73f4:	766c      	strb	r4, [r5, #25]
    73f6:	76ac      	strb	r4, [r5, #26]
    73f8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    73fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    73fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7402:	626b      	str	r3, [r5, #36]	; 0x24
    7404:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7408:	f7fd f8ee 	bl	45e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    740c:	f7fc fc46 	bl	3c9c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7414:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7416:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    7418:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    741a:	f7fd fa6f 	bl	48fc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    741e:	f7fd f985 	bl	472c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7422:	f7fb fe15 	bl	3050 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7426:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    742a:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    742c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    7430:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    7434:	f002 fb56 	bl	9ae4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    7438:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    743a:	f004 fa71 	bl	b920 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    743e:	4620      	mov	r0, r4
    7440:	f7ff fea4 	bl	718c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7444:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    7446:	4d16      	ldr	r5, [pc, #88]	; (74a0 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7448:	f7ff fea0 	bl	718c <z_sys_init_run_level>
	z_sched_init();
    744c:	f001 fc58 	bl	8d00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7450:	4b14      	ldr	r3, [pc, #80]	; (74a4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    7452:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7454:	9305      	str	r3, [sp, #20]
    7456:	2301      	movs	r3, #1
    7458:	4913      	ldr	r1, [pc, #76]	; (74a8 <z_cstart+0xd8>)
    745a:	9400      	str	r4, [sp, #0]
    745c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7460:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    7464:	463b      	mov	r3, r7
    7466:	e9cd 4401 	strd	r4, r4, [sp, #4]
    746a:	4628      	mov	r0, r5
    746c:	f000 f928 	bl	76c0 <z_setup_new_thread>
    7470:	7b6a      	ldrb	r2, [r5, #13]
    7472:	4606      	mov	r6, r0
    7474:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7478:	4628      	mov	r0, r5
    747a:	736a      	strb	r2, [r5, #13]
    747c:	f000 fe38 	bl	80f0 <z_ready_thread>
	z_init_cpu(0);
    7480:	4620      	mov	r0, r4
    7482:	f7ff ff6d 	bl	7360 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7486:	463a      	mov	r2, r7
    7488:	4631      	mov	r1, r6
    748a:	4628      	mov	r0, r5
    748c:	f7fc fd6a 	bl	3f64 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7490:	20010640 	.word	0x20010640
    7494:	e000ed00 	.word	0xe000ed00
    7498:	20000f1c 	.word	0x20000f1c
    749c:	00007315 	.word	0x00007315
    74a0:	20000740 	.word	0x20000740
    74a4:	0000ddab 	.word	0x0000ddab
    74a8:	200107a0 	.word	0x200107a0

000074ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    74ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    74ae:	4c16      	ldr	r4, [pc, #88]	; (7508 <init_mem_slab_module+0x5c>)
    74b0:	4d16      	ldr	r5, [pc, #88]	; (750c <init_mem_slab_module+0x60>)
    74b2:	4e17      	ldr	r6, [pc, #92]	; (7510 <init_mem_slab_module+0x64>)
    74b4:	42ac      	cmp	r4, r5
    74b6:	d90c      	bls.n	74d2 <init_mem_slab_module+0x26>
    74b8:	4916      	ldr	r1, [pc, #88]	; (7514 <init_mem_slab_module+0x68>)
    74ba:	4817      	ldr	r0, [pc, #92]	; (7518 <init_mem_slab_module+0x6c>)
    74bc:	233d      	movs	r3, #61	; 0x3d
    74be:	4632      	mov	r2, r6
    74c0:	f003 fd38 	bl	af34 <assert_print>
    74c4:	4815      	ldr	r0, [pc, #84]	; (751c <init_mem_slab_module+0x70>)
    74c6:	f003 fd35 	bl	af34 <assert_print>
    74ca:	213d      	movs	r1, #61	; 0x3d
    74cc:	4630      	mov	r0, r6
    74ce:	f003 fd2a 	bl	af26 <assert_post_action>
    74d2:	42ac      	cmp	r4, r5
    74d4:	d301      	bcc.n	74da <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    74d6:	2000      	movs	r0, #0
	return rc;
}
    74d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    74da:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    74de:	ea42 0301 	orr.w	r3, r2, r1
    74e2:	f013 0303 	ands.w	r3, r3, #3
    74e6:	d10b      	bne.n	7500 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    74e8:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    74ea:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    74ec:	4283      	cmp	r3, r0
    74ee:	d101      	bne.n	74f4 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    74f0:	3420      	adds	r4, #32
    74f2:	e7df      	b.n	74b4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    74f4:	69a7      	ldr	r7, [r4, #24]
    74f6:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    74f8:	3301      	adds	r3, #1
		slab->free_list = p;
    74fa:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    74fc:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    74fe:	e7f5      	b.n	74ec <init_mem_slab_module+0x40>
	return rc;
    7500:	f06f 0015 	mvn.w	r0, #21
    7504:	e7e8      	b.n	74d8 <init_mem_slab_module+0x2c>
    7506:	bf00      	nop
    7508:	200001c8 	.word	0x200001c8
    750c:	200001c8 	.word	0x200001c8
    7510:	0000ddb3 	.word	0x0000ddb3
    7514:	0000ddd8 	.word	0x0000ddd8
    7518:	0000c986 	.word	0x0000c986
    751c:	0000ddf5 	.word	0x0000ddf5

00007520 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7524:	4604      	mov	r4, r0
    7526:	460e      	mov	r6, r1
    7528:	4690      	mov	r8, r2
    752a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    752c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7530:	f04f 0320 	mov.w	r3, #32
    7534:	f3ef 8911 	mrs	r9, BASEPRI
    7538:	f383 8812 	msr	BASEPRI_MAX, r3
    753c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7540:	4628      	mov	r0, r5
    7542:	f000 f9f9 	bl	7938 <z_spin_lock_valid>
    7546:	b968      	cbnz	r0, 7564 <k_mem_slab_alloc+0x44>
    7548:	4a24      	ldr	r2, [pc, #144]	; (75dc <k_mem_slab_alloc+0xbc>)
    754a:	4925      	ldr	r1, [pc, #148]	; (75e0 <k_mem_slab_alloc+0xc0>)
    754c:	4825      	ldr	r0, [pc, #148]	; (75e4 <k_mem_slab_alloc+0xc4>)
    754e:	238e      	movs	r3, #142	; 0x8e
    7550:	f003 fcf0 	bl	af34 <assert_print>
    7554:	4824      	ldr	r0, [pc, #144]	; (75e8 <k_mem_slab_alloc+0xc8>)
    7556:	4629      	mov	r1, r5
    7558:	f003 fcec 	bl	af34 <assert_print>
    755c:	481f      	ldr	r0, [pc, #124]	; (75dc <k_mem_slab_alloc+0xbc>)
    755e:	218e      	movs	r1, #142	; 0x8e
    7560:	f003 fce1 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7564:	4628      	mov	r0, r5
    7566:	f000 fa05 	bl	7974 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    756a:	69a3      	ldr	r3, [r4, #24]
    756c:	b1eb      	cbz	r3, 75aa <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    756e:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    7570:	681b      	ldr	r3, [r3, #0]
    7572:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7574:	69e3      	ldr	r3, [r4, #28]
    7576:	3301      	adds	r3, #1
    7578:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    757a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    757c:	4628      	mov	r0, r5
    757e:	f000 f9e9 	bl	7954 <z_spin_unlock_valid>
    7582:	b968      	cbnz	r0, 75a0 <k_mem_slab_alloc+0x80>
    7584:	4a15      	ldr	r2, [pc, #84]	; (75dc <k_mem_slab_alloc+0xbc>)
    7586:	4919      	ldr	r1, [pc, #100]	; (75ec <k_mem_slab_alloc+0xcc>)
    7588:	4816      	ldr	r0, [pc, #88]	; (75e4 <k_mem_slab_alloc+0xc4>)
    758a:	23b9      	movs	r3, #185	; 0xb9
    758c:	f003 fcd2 	bl	af34 <assert_print>
    7590:	4817      	ldr	r0, [pc, #92]	; (75f0 <k_mem_slab_alloc+0xd0>)
    7592:	4629      	mov	r1, r5
    7594:	f003 fcce 	bl	af34 <assert_print>
    7598:	4810      	ldr	r0, [pc, #64]	; (75dc <k_mem_slab_alloc+0xbc>)
    759a:	21b9      	movs	r1, #185	; 0xb9
    759c:	f003 fcc3 	bl	af26 <assert_post_action>
	__asm__ volatile(
    75a0:	f389 8811 	msr	BASEPRI, r9
    75a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    75a8:	e013      	b.n	75d2 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    75aa:	ea58 0207 	orrs.w	r2, r8, r7
    75ae:	d103      	bne.n	75b8 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    75b0:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    75b2:	f06f 040b 	mvn.w	r4, #11
    75b6:	e7e1      	b.n	757c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    75b8:	4622      	mov	r2, r4
    75ba:	e9cd 8700 	strd	r8, r7, [sp]
    75be:	4649      	mov	r1, r9
    75c0:	4628      	mov	r0, r5
    75c2:	f001 f951 	bl	8868 <z_pend_curr>
		if (result == 0) {
    75c6:	4604      	mov	r4, r0
    75c8:	b918      	cbnz	r0, 75d2 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    75ca:	4b0a      	ldr	r3, [pc, #40]	; (75f4 <k_mem_slab_alloc+0xd4>)
    75cc:	689b      	ldr	r3, [r3, #8]
    75ce:	695b      	ldr	r3, [r3, #20]
    75d0:	6033      	str	r3, [r6, #0]
}
    75d2:	4620      	mov	r0, r4
    75d4:	b003      	add	sp, #12
    75d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    75da:	bf00      	nop
    75dc:	0000cad0 	.word	0x0000cad0
    75e0:	0000cb29 	.word	0x0000cb29
    75e4:	0000c986 	.word	0x0000c986
    75e8:	0000cb3e 	.word	0x0000cb3e
    75ec:	0000cafd 	.word	0x0000cafd
    75f0:	0000cb14 	.word	0x0000cb14
    75f4:	20000f1c 	.word	0x20000f1c

000075f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    75f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75fc:	4604      	mov	r4, r0
    75fe:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7600:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7604:	f04f 0320 	mov.w	r3, #32
    7608:	f3ef 8711 	mrs	r7, BASEPRI
    760c:	f383 8812 	msr	BASEPRI_MAX, r3
    7610:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7614:	4628      	mov	r0, r5
    7616:	f000 f98f 	bl	7938 <z_spin_lock_valid>
    761a:	b968      	cbnz	r0, 7638 <k_mem_slab_free+0x40>
    761c:	4a22      	ldr	r2, [pc, #136]	; (76a8 <k_mem_slab_free+0xb0>)
    761e:	4923      	ldr	r1, [pc, #140]	; (76ac <k_mem_slab_free+0xb4>)
    7620:	4823      	ldr	r0, [pc, #140]	; (76b0 <k_mem_slab_free+0xb8>)
    7622:	238e      	movs	r3, #142	; 0x8e
    7624:	f003 fc86 	bl	af34 <assert_print>
    7628:	4822      	ldr	r0, [pc, #136]	; (76b4 <k_mem_slab_free+0xbc>)
    762a:	4629      	mov	r1, r5
    762c:	f003 fc82 	bl	af34 <assert_print>
    7630:	481d      	ldr	r0, [pc, #116]	; (76a8 <k_mem_slab_free+0xb0>)
    7632:	218e      	movs	r1, #142	; 0x8e
    7634:	f003 fc77 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7638:	4628      	mov	r0, r5
    763a:	f000 f99b 	bl	7974 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    763e:	f8d4 8018 	ldr.w	r8, [r4, #24]
    7642:	f1b8 0f00 	cmp.w	r8, #0
    7646:	d10f      	bne.n	7668 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7648:	4620      	mov	r0, r4
    764a:	f001 fb07 	bl	8c5c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    764e:	b158      	cbz	r0, 7668 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7650:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7652:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7654:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7658:	f000 fd4a 	bl	80f0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    765c:	4639      	mov	r1, r7
    765e:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    7664:	f000 bdd4 	b.w	8210 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7668:	6833      	ldr	r3, [r6, #0]
    766a:	69a2      	ldr	r2, [r4, #24]
    766c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    766e:	6833      	ldr	r3, [r6, #0]
    7670:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7672:	69e3      	ldr	r3, [r4, #28]
    7674:	3b01      	subs	r3, #1
    7676:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7678:	4628      	mov	r0, r5
    767a:	f000 f96b 	bl	7954 <z_spin_unlock_valid>
    767e:	b968      	cbnz	r0, 769c <k_mem_slab_free+0xa4>
    7680:	4a09      	ldr	r2, [pc, #36]	; (76a8 <k_mem_slab_free+0xb0>)
    7682:	490d      	ldr	r1, [pc, #52]	; (76b8 <k_mem_slab_free+0xc0>)
    7684:	480a      	ldr	r0, [pc, #40]	; (76b0 <k_mem_slab_free+0xb8>)
    7686:	23b9      	movs	r3, #185	; 0xb9
    7688:	f003 fc54 	bl	af34 <assert_print>
    768c:	480b      	ldr	r0, [pc, #44]	; (76bc <k_mem_slab_free+0xc4>)
    768e:	4629      	mov	r1, r5
    7690:	f003 fc50 	bl	af34 <assert_print>
    7694:	4804      	ldr	r0, [pc, #16]	; (76a8 <k_mem_slab_free+0xb0>)
    7696:	21b9      	movs	r1, #185	; 0xb9
    7698:	f003 fc45 	bl	af26 <assert_post_action>
	__asm__ volatile(
    769c:	f387 8811 	msr	BASEPRI, r7
    76a0:	f3bf 8f6f 	isb	sy
}
    76a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76a8:	0000cad0 	.word	0x0000cad0
    76ac:	0000cb29 	.word	0x0000cb29
    76b0:	0000c986 	.word	0x0000c986
    76b4:	0000cb3e 	.word	0x0000cb3e
    76b8:	0000cafd 	.word	0x0000cafd
    76bc:	0000cb14 	.word	0x0000cb14

000076c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    76c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76c4:	b085      	sub	sp, #20
    76c6:	4604      	mov	r4, r0
    76c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    76cc:	f1b8 0f0f 	cmp.w	r8, #15
{
    76d0:	460f      	mov	r7, r1
    76d2:	4615      	mov	r5, r2
    76d4:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    76d6:	d132      	bne.n	773e <z_setup_new_thread+0x7e>
    76d8:	4b25      	ldr	r3, [pc, #148]	; (7770 <z_setup_new_thread+0xb0>)
    76da:	4599      	cmp	r9, r3
    76dc:	d133      	bne.n	7746 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    76de:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    76e2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    76e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    76e8:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    76ea:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    76ec:	2304      	movs	r3, #4
    76ee:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    76f0:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    76f4:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    76f8:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    76fc:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    76fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    7700:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7704:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    7708:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    770a:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    770c:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    770e:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7712:	9302      	str	r3, [sp, #8]
    7714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7716:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7718:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    771a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    771c:	9300      	str	r3, [sp, #0]
    771e:	4642      	mov	r2, r8
    7720:	464b      	mov	r3, r9
    7722:	4639      	mov	r1, r7
    7724:	4620      	mov	r0, r4
    7726:	f7fc fbeb 	bl	3f00 <arch_new_thread>
	if (!_current) {
    772a:	4b12      	ldr	r3, [pc, #72]	; (7774 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    772c:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    772e:	689b      	ldr	r3, [r3, #8]
    7730:	b103      	cbz	r3, 7734 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    7732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7734:	6723      	str	r3, [r4, #112]	; 0x70
}
    7736:	4640      	mov	r0, r8
    7738:	b005      	add	sp, #20
    773a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    773e:	f108 0310 	add.w	r3, r8, #16
    7742:	2b1e      	cmp	r3, #30
    7744:	d9cb      	bls.n	76de <z_setup_new_thread+0x1e>
    7746:	4a0c      	ldr	r2, [pc, #48]	; (7778 <z_setup_new_thread+0xb8>)
    7748:	490c      	ldr	r1, [pc, #48]	; (777c <z_setup_new_thread+0xbc>)
    774a:	480d      	ldr	r0, [pc, #52]	; (7780 <z_setup_new_thread+0xc0>)
    774c:	f240 13ff 	movw	r3, #511	; 0x1ff
    7750:	f003 fbf0 	bl	af34 <assert_print>
    7754:	4641      	mov	r1, r8
    7756:	480b      	ldr	r0, [pc, #44]	; (7784 <z_setup_new_thread+0xc4>)
    7758:	f06f 030f 	mvn.w	r3, #15
    775c:	220e      	movs	r2, #14
    775e:	f003 fbe9 	bl	af34 <assert_print>
    7762:	4805      	ldr	r0, [pc, #20]	; (7778 <z_setup_new_thread+0xb8>)
    7764:	f240 11ff 	movw	r1, #511	; 0x1ff
    7768:	f003 fbdd 	bl	af26 <assert_post_action>
    776c:	e7b7      	b.n	76de <z_setup_new_thread+0x1e>
    776e:	bf00      	nop
    7770:	00007985 	.word	0x00007985
    7774:	20000f1c 	.word	0x20000f1c
    7778:	0000de14 	.word	0x0000de14
    777c:	0000de37 	.word	0x0000de37
    7780:	0000c986 	.word	0x0000c986
    7784:	0000deb7 	.word	0x0000deb7

00007788 <z_impl_k_thread_create>:
{
    7788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    778c:	b087      	sub	sp, #28
    778e:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    7792:	4604      	mov	r4, r0
    7794:	460f      	mov	r7, r1
    7796:	4690      	mov	r8, r2
    7798:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    779a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    779e:	b173      	cbz	r3, 77be <z_impl_k_thread_create+0x36>
    77a0:	491c      	ldr	r1, [pc, #112]	; (7814 <z_impl_k_thread_create+0x8c>)
    77a2:	4a1d      	ldr	r2, [pc, #116]	; (7818 <z_impl_k_thread_create+0x90>)
    77a4:	481d      	ldr	r0, [pc, #116]	; (781c <z_impl_k_thread_create+0x94>)
    77a6:	f240 236e 	movw	r3, #622	; 0x26e
    77aa:	f003 fbc3 	bl	af34 <assert_print>
    77ae:	481c      	ldr	r0, [pc, #112]	; (7820 <z_impl_k_thread_create+0x98>)
    77b0:	f003 fbc0 	bl	af34 <assert_print>
    77b4:	4818      	ldr	r0, [pc, #96]	; (7818 <z_impl_k_thread_create+0x90>)
    77b6:	f240 216e 	movw	r1, #622	; 0x26e
    77ba:	f003 fbb4 	bl	af26 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    77be:	2300      	movs	r3, #0
    77c0:	9305      	str	r3, [sp, #20]
    77c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77c4:	9304      	str	r3, [sp, #16]
    77c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    77c8:	9303      	str	r3, [sp, #12]
    77ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77cc:	9302      	str	r3, [sp, #8]
    77ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    77d0:	9301      	str	r3, [sp, #4]
    77d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    77d4:	9300      	str	r3, [sp, #0]
    77d6:	4642      	mov	r2, r8
    77d8:	464b      	mov	r3, r9
    77da:	4639      	mov	r1, r7
    77dc:	4620      	mov	r0, r4
    77de:	f7ff ff6f 	bl	76c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    77e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    77e6:	bf08      	it	eq
    77e8:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    77ec:	d005      	beq.n	77fa <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    77ee:	ea55 0306 	orrs.w	r3, r5, r6
    77f2:	d106      	bne.n	7802 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    77f4:	4620      	mov	r0, r4
    77f6:	f000 fd4f 	bl	8298 <z_sched_start>
}
    77fa:	4620      	mov	r0, r4
    77fc:	b007      	add	sp, #28
    77fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7802:	4908      	ldr	r1, [pc, #32]	; (7824 <z_impl_k_thread_create+0x9c>)
    7804:	4632      	mov	r2, r6
    7806:	462b      	mov	r3, r5
    7808:	f104 0018 	add.w	r0, r4, #24
    780c:	f001 fd3c 	bl	9288 <z_add_timeout>
    7810:	e7f3      	b.n	77fa <z_impl_k_thread_create+0x72>
    7812:	bf00      	nop
    7814:	0000dee8 	.word	0x0000dee8
    7818:	0000de14 	.word	0x0000de14
    781c:	0000c986 	.word	0x0000c986
    7820:	0000defa 	.word	0x0000defa
    7824:	00008b0d 	.word	0x00008b0d

00007828 <z_init_static_threads>:
{
    7828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    782c:	4c3b      	ldr	r4, [pc, #236]	; (791c <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    782e:	4d3c      	ldr	r5, [pc, #240]	; (7920 <z_init_static_threads+0xf8>)
    7830:	4f3c      	ldr	r7, [pc, #240]	; (7924 <z_init_static_threads+0xfc>)
{
    7832:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7834:	42ac      	cmp	r4, r5
    7836:	4626      	mov	r6, r4
    7838:	d90e      	bls.n	7858 <z_init_static_threads+0x30>
    783a:	493b      	ldr	r1, [pc, #236]	; (7928 <z_init_static_threads+0x100>)
    783c:	483b      	ldr	r0, [pc, #236]	; (792c <z_init_static_threads+0x104>)
    783e:	f240 23d5 	movw	r3, #725	; 0x2d5
    7842:	463a      	mov	r2, r7
    7844:	f003 fb76 	bl	af34 <assert_print>
    7848:	4839      	ldr	r0, [pc, #228]	; (7930 <z_init_static_threads+0x108>)
    784a:	f003 fb73 	bl	af34 <assert_print>
    784e:	f240 21d5 	movw	r1, #725	; 0x2d5
    7852:	4638      	mov	r0, r7
    7854:	f003 fb67 	bl	af26 <assert_post_action>
    7858:	42ae      	cmp	r6, r5
    785a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    785e:	d31f      	bcc.n	78a0 <z_init_static_threads+0x78>
	k_sched_lock();
    7860:	f000 fd6e 	bl	8340 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7864:	4c2d      	ldr	r4, [pc, #180]	; (791c <z_init_static_threads+0xf4>)
    7866:	4e2f      	ldr	r6, [pc, #188]	; (7924 <z_init_static_threads+0xfc>)
    7868:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 7928 <z_init_static_threads+0x100>
    786c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 792c <z_init_static_threads+0x104>
    7870:	42ac      	cmp	r4, r5
    7872:	d90e      	bls.n	7892 <z_init_static_threads+0x6a>
    7874:	4641      	mov	r1, r8
    7876:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    787a:	4632      	mov	r2, r6
    787c:	4648      	mov	r0, r9
    787e:	f003 fb59 	bl	af34 <assert_print>
    7882:	482b      	ldr	r0, [pc, #172]	; (7930 <z_init_static_threads+0x108>)
    7884:	f003 fb56 	bl	af34 <assert_print>
    7888:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    788c:	4630      	mov	r0, r6
    788e:	f003 fb4a 	bl	af26 <assert_post_action>
    7892:	42ac      	cmp	r4, r5
    7894:	d320      	bcc.n	78d8 <z_init_static_threads+0xb0>
}
    7896:	b007      	add	sp, #28
    7898:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    789c:	f000 bdc4 	b.w	8428 <k_sched_unlock>
		z_setup_new_thread(
    78a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    78a4:	9305      	str	r3, [sp, #20]
    78a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    78aa:	9304      	str	r3, [sp, #16]
    78ac:	f854 3c14 	ldr.w	r3, [r4, #-20]
    78b0:	9303      	str	r3, [sp, #12]
    78b2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    78b6:	9302      	str	r3, [sp, #8]
    78b8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    78bc:	9301      	str	r3, [sp, #4]
    78be:	f854 3c20 	ldr.w	r3, [r4, #-32]
    78c2:	9300      	str	r3, [sp, #0]
    78c4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    78c8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    78cc:	f7ff fef8 	bl	76c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    78d0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    78d4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    78d6:	e7ad      	b.n	7834 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    78d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    78da:	1c5a      	adds	r2, r3, #1
    78dc:	d00f      	beq.n	78fe <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    78de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    78e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    78e6:	f240 30e7 	movw	r0, #999	; 0x3e7
    78ea:	2100      	movs	r1, #0
    78ec:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    78f0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    78f4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    78f6:	d104      	bne.n	7902 <z_init_static_threads+0xda>
	z_sched_start(thread);
    78f8:	4638      	mov	r0, r7
    78fa:	f000 fccd 	bl	8298 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    78fe:	3430      	adds	r4, #48	; 0x30
    7900:	e7b6      	b.n	7870 <z_init_static_threads+0x48>
    7902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7906:	2300      	movs	r3, #0
    7908:	f7f9 f996 	bl	c38 <__aeabi_uldivmod>
    790c:	4602      	mov	r2, r0
    790e:	460b      	mov	r3, r1
    7910:	f107 0018 	add.w	r0, r7, #24
    7914:	4907      	ldr	r1, [pc, #28]	; (7934 <z_init_static_threads+0x10c>)
    7916:	f001 fcb7 	bl	9288 <z_add_timeout>
    791a:	e7f0      	b.n	78fe <z_init_static_threads+0xd6>
    791c:	200001c8 	.word	0x200001c8
    7920:	200001c8 	.word	0x200001c8
    7924:	0000de14 	.word	0x0000de14
    7928:	0000df1f 	.word	0x0000df1f
    792c:	0000c986 	.word	0x0000c986
    7930:	0000ddf5 	.word	0x0000ddf5
    7934:	00008b0d 	.word	0x00008b0d

00007938 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7938:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    793a:	b138      	cbz	r0, 794c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    793c:	4b04      	ldr	r3, [pc, #16]	; (7950 <z_spin_lock_valid+0x18>)
    793e:	7d1b      	ldrb	r3, [r3, #20]
    7940:	f000 0003 	and.w	r0, r0, #3
    7944:	1ac0      	subs	r0, r0, r3
    7946:	bf18      	it	ne
    7948:	2001      	movne	r0, #1
    794a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    794c:	2001      	movs	r0, #1
}
    794e:	4770      	bx	lr
    7950:	20000f1c 	.word	0x20000f1c

00007954 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7954:	4a06      	ldr	r2, [pc, #24]	; (7970 <z_spin_unlock_valid+0x1c>)
    7956:	7d11      	ldrb	r1, [r2, #20]
    7958:	6892      	ldr	r2, [r2, #8]
    795a:	430a      	orrs	r2, r1
    795c:	6801      	ldr	r1, [r0, #0]
{
    795e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7960:	4291      	cmp	r1, r2
    7962:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7966:	bf04      	itt	eq
    7968:	6018      	streq	r0, [r3, #0]
	return true;
    796a:	2001      	moveq	r0, #1
}
    796c:	4770      	bx	lr
    796e:	bf00      	nop
    7970:	20000f1c 	.word	0x20000f1c

00007974 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7974:	4b02      	ldr	r3, [pc, #8]	; (7980 <z_spin_lock_set_owner+0xc>)
    7976:	7d1a      	ldrb	r2, [r3, #20]
    7978:	689b      	ldr	r3, [r3, #8]
    797a:	4313      	orrs	r3, r2
    797c:	6003      	str	r3, [r0, #0]
}
    797e:	4770      	bx	lr
    7980:	20000f1c 	.word	0x20000f1c

00007984 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7984:	4c13      	ldr	r4, [pc, #76]	; (79d4 <idle+0x50>)
{
    7986:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7988:	68a3      	ldr	r3, [r4, #8]
    798a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    798e:	2b00      	cmp	r3, #0
    7990:	da09      	bge.n	79a6 <idle+0x22>
    7992:	4911      	ldr	r1, [pc, #68]	; (79d8 <idle+0x54>)
    7994:	4811      	ldr	r0, [pc, #68]	; (79dc <idle+0x58>)
    7996:	4a12      	ldr	r2, [pc, #72]	; (79e0 <idle+0x5c>)
    7998:	2327      	movs	r3, #39	; 0x27
    799a:	f003 facb 	bl	af34 <assert_print>
    799e:	4810      	ldr	r0, [pc, #64]	; (79e0 <idle+0x5c>)
    79a0:	2127      	movs	r1, #39	; 0x27
    79a2:	f003 fac0 	bl	af26 <assert_post_action>
	return !z_sys_post_kernel;
    79a6:	4d0f      	ldr	r5, [pc, #60]	; (79e4 <idle+0x60>)
	__asm__ volatile(
    79a8:	f04f 0220 	mov.w	r2, #32
    79ac:	f3ef 8311 	mrs	r3, BASEPRI
    79b0:	f382 8812 	msr	BASEPRI_MAX, r2
    79b4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    79b8:	f001 fd7e 	bl	94b8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    79bc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    79be:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    79c0:	b913      	cbnz	r3, 79c8 <idle+0x44>
	arch_cpu_idle();
    79c2:	f7fc f971 	bl	3ca8 <arch_cpu_idle>
}
    79c6:	e7ef      	b.n	79a8 <idle+0x24>
    79c8:	f7fb ffca 	bl	3960 <pm_system_suspend>
    79cc:	2800      	cmp	r0, #0
    79ce:	d1eb      	bne.n	79a8 <idle+0x24>
    79d0:	e7f7      	b.n	79c2 <idle+0x3e>
    79d2:	bf00      	nop
    79d4:	20000f1c 	.word	0x20000f1c
    79d8:	0000df6d 	.word	0x0000df6d
    79dc:	0000c986 	.word	0x0000c986
    79e0:	0000df4c 	.word	0x0000df4c
    79e4:	2000d566 	.word	0x2000d566

000079e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    79e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    79ec:	4604      	mov	r4, r0
    79ee:	4617      	mov	r7, r2
    79f0:	461e      	mov	r6, r3
    79f2:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    79f6:	b163      	cbz	r3, 7a12 <z_impl_k_mutex_lock+0x2a>
    79f8:	496d      	ldr	r1, [pc, #436]	; (7bb0 <z_impl_k_mutex_lock+0x1c8>)
    79fa:	4a6e      	ldr	r2, [pc, #440]	; (7bb4 <z_impl_k_mutex_lock+0x1cc>)
    79fc:	486e      	ldr	r0, [pc, #440]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    79fe:	2365      	movs	r3, #101	; 0x65
    7a00:	f003 fa98 	bl	af34 <assert_print>
    7a04:	486d      	ldr	r0, [pc, #436]	; (7bbc <z_impl_k_mutex_lock+0x1d4>)
    7a06:	f003 fa95 	bl	af34 <assert_print>
    7a0a:	486a      	ldr	r0, [pc, #424]	; (7bb4 <z_impl_k_mutex_lock+0x1cc>)
    7a0c:	2165      	movs	r1, #101	; 0x65
    7a0e:	f003 fa8a 	bl	af26 <assert_post_action>
    7a12:	f04f 0320 	mov.w	r3, #32
    7a16:	f3ef 8811 	mrs	r8, BASEPRI
    7a1a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a22:	4867      	ldr	r0, [pc, #412]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7a24:	f7ff ff88 	bl	7938 <z_spin_lock_valid>
    7a28:	b968      	cbnz	r0, 7a46 <z_impl_k_mutex_lock+0x5e>
    7a2a:	4a66      	ldr	r2, [pc, #408]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7a2c:	4966      	ldr	r1, [pc, #408]	; (7bc8 <z_impl_k_mutex_lock+0x1e0>)
    7a2e:	4862      	ldr	r0, [pc, #392]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    7a30:	238e      	movs	r3, #142	; 0x8e
    7a32:	f003 fa7f 	bl	af34 <assert_print>
    7a36:	4962      	ldr	r1, [pc, #392]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7a38:	4864      	ldr	r0, [pc, #400]	; (7bcc <z_impl_k_mutex_lock+0x1e4>)
    7a3a:	f003 fa7b 	bl	af34 <assert_print>
    7a3e:	4861      	ldr	r0, [pc, #388]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7a40:	218e      	movs	r1, #142	; 0x8e
    7a42:	f003 fa70 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a46:	485e      	ldr	r0, [pc, #376]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7a48:	f7ff ff94 	bl	7974 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7a4c:	68e3      	ldr	r3, [r4, #12]
    7a4e:	4a60      	ldr	r2, [pc, #384]	; (7bd0 <z_impl_k_mutex_lock+0x1e8>)
    7a50:	b30b      	cbz	r3, 7a96 <z_impl_k_mutex_lock+0xae>
    7a52:	68a0      	ldr	r0, [r4, #8]
    7a54:	6891      	ldr	r1, [r2, #8]
    7a56:	4288      	cmp	r0, r1
    7a58:	d03d      	beq.n	7ad6 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7a5a:	ea57 0306 	orrs.w	r3, r7, r6
    7a5e:	d13c      	bne.n	7ada <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a60:	4857      	ldr	r0, [pc, #348]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7a62:	f7ff ff77 	bl	7954 <z_spin_unlock_valid>
    7a66:	b968      	cbnz	r0, 7a84 <z_impl_k_mutex_lock+0x9c>
    7a68:	4a56      	ldr	r2, [pc, #344]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7a6a:	495a      	ldr	r1, [pc, #360]	; (7bd4 <z_impl_k_mutex_lock+0x1ec>)
    7a6c:	4852      	ldr	r0, [pc, #328]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    7a6e:	23b9      	movs	r3, #185	; 0xb9
    7a70:	f003 fa60 	bl	af34 <assert_print>
    7a74:	4952      	ldr	r1, [pc, #328]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7a76:	4858      	ldr	r0, [pc, #352]	; (7bd8 <z_impl_k_mutex_lock+0x1f0>)
    7a78:	f003 fa5c 	bl	af34 <assert_print>
    7a7c:	4851      	ldr	r0, [pc, #324]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7a7e:	21b9      	movs	r1, #185	; 0xb9
    7a80:	f003 fa51 	bl	af26 <assert_post_action>
	__asm__ volatile(
    7a84:	f388 8811 	msr	BASEPRI, r8
    7a88:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7a8c:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7a90:	b002      	add	sp, #8
    7a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7a96:	6891      	ldr	r1, [r2, #8]
    7a98:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7a9c:	4848      	ldr	r0, [pc, #288]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7a9e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7aa0:	3301      	adds	r3, #1
    7aa2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7aa4:	6893      	ldr	r3, [r2, #8]
    7aa6:	60a3      	str	r3, [r4, #8]
    7aa8:	f7ff ff54 	bl	7954 <z_spin_unlock_valid>
    7aac:	b968      	cbnz	r0, 7aca <z_impl_k_mutex_lock+0xe2>
    7aae:	4a45      	ldr	r2, [pc, #276]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7ab0:	4948      	ldr	r1, [pc, #288]	; (7bd4 <z_impl_k_mutex_lock+0x1ec>)
    7ab2:	4841      	ldr	r0, [pc, #260]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    7ab4:	23b9      	movs	r3, #185	; 0xb9
    7ab6:	f003 fa3d 	bl	af34 <assert_print>
    7aba:	4941      	ldr	r1, [pc, #260]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7abc:	4846      	ldr	r0, [pc, #280]	; (7bd8 <z_impl_k_mutex_lock+0x1f0>)
    7abe:	f003 fa39 	bl	af34 <assert_print>
    7ac2:	4840      	ldr	r0, [pc, #256]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7ac4:	21b9      	movs	r1, #185	; 0xb9
    7ac6:	f003 fa2e 	bl	af26 <assert_post_action>
    7aca:	f388 8811 	msr	BASEPRI, r8
    7ace:	f3bf 8f6f 	isb	sy
		return 0;
    7ad2:	2000      	movs	r0, #0
    7ad4:	e7dc      	b.n	7a90 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    7ad6:	6921      	ldr	r1, [r4, #16]
    7ad8:	e7e0      	b.n	7a9c <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7ada:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7ade:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7ae2:	4299      	cmp	r1, r3
    7ae4:	bfa8      	it	ge
    7ae6:	4619      	movge	r1, r3
    7ae8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7aec:	4291      	cmp	r1, r2
    7aee:	bfb8      	it	lt
    7af0:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7af2:	4299      	cmp	r1, r3
    7af4:	da53      	bge.n	7b9e <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    7af6:	f003 ff5d 	bl	b9b4 <adjust_owner_prio.isra.0>
    7afa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7afc:	e9cd 7600 	strd	r7, r6, [sp]
    7b00:	482f      	ldr	r0, [pc, #188]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b02:	4622      	mov	r2, r4
    7b04:	4641      	mov	r1, r8
    7b06:	f000 feaf 	bl	8868 <z_pend_curr>
	if (got_mutex == 0) {
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d0e1      	beq.n	7ad2 <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    7b0e:	f04f 0320 	mov.w	r3, #32
    7b12:	f3ef 8611 	mrs	r6, BASEPRI
    7b16:	f383 8812 	msr	BASEPRI_MAX, r3
    7b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b1e:	4828      	ldr	r0, [pc, #160]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b20:	f7ff ff0a 	bl	7938 <z_spin_lock_valid>
    7b24:	b968      	cbnz	r0, 7b42 <z_impl_k_mutex_lock+0x15a>
    7b26:	4a27      	ldr	r2, [pc, #156]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7b28:	4927      	ldr	r1, [pc, #156]	; (7bc8 <z_impl_k_mutex_lock+0x1e0>)
    7b2a:	4823      	ldr	r0, [pc, #140]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    7b2c:	238e      	movs	r3, #142	; 0x8e
    7b2e:	f003 fa01 	bl	af34 <assert_print>
    7b32:	4923      	ldr	r1, [pc, #140]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b34:	4825      	ldr	r0, [pc, #148]	; (7bcc <z_impl_k_mutex_lock+0x1e4>)
    7b36:	f003 f9fd 	bl	af34 <assert_print>
    7b3a:	4822      	ldr	r0, [pc, #136]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7b3c:	218e      	movs	r1, #142	; 0x8e
    7b3e:	f003 f9f2 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b42:	481f      	ldr	r0, [pc, #124]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b44:	f7ff ff16 	bl	7974 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7b48:	6823      	ldr	r3, [r4, #0]
    7b4a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b4c:	42a3      	cmp	r3, r4
    7b4e:	d00a      	beq.n	7b66 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7b50:	b14b      	cbz	r3, 7b66 <z_impl_k_mutex_lock+0x17e>
    7b52:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7b56:	4299      	cmp	r1, r3
    7b58:	bfa8      	it	ge
    7b5a:	4619      	movge	r1, r3
    7b5c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7b60:	4299      	cmp	r1, r3
    7b62:	bfb8      	it	lt
    7b64:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7b66:	68a0      	ldr	r0, [r4, #8]
    7b68:	f003 ff24 	bl	b9b4 <adjust_owner_prio.isra.0>
    7b6c:	b9c8      	cbnz	r0, 7ba2 <z_impl_k_mutex_lock+0x1ba>
    7b6e:	b9c5      	cbnz	r5, 7ba2 <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b70:	4813      	ldr	r0, [pc, #76]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b72:	f7ff feef 	bl	7954 <z_spin_unlock_valid>
    7b76:	b968      	cbnz	r0, 7b94 <z_impl_k_mutex_lock+0x1ac>
    7b78:	4a12      	ldr	r2, [pc, #72]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7b7a:	4916      	ldr	r1, [pc, #88]	; (7bd4 <z_impl_k_mutex_lock+0x1ec>)
    7b7c:	480e      	ldr	r0, [pc, #56]	; (7bb8 <z_impl_k_mutex_lock+0x1d0>)
    7b7e:	23b9      	movs	r3, #185	; 0xb9
    7b80:	f003 f9d8 	bl	af34 <assert_print>
    7b84:	490e      	ldr	r1, [pc, #56]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7b86:	4814      	ldr	r0, [pc, #80]	; (7bd8 <z_impl_k_mutex_lock+0x1f0>)
    7b88:	f003 f9d4 	bl	af34 <assert_print>
    7b8c:	480d      	ldr	r0, [pc, #52]	; (7bc4 <z_impl_k_mutex_lock+0x1dc>)
    7b8e:	21b9      	movs	r1, #185	; 0xb9
    7b90:	f003 f9c9 	bl	af26 <assert_post_action>
	__asm__ volatile(
    7b94:	f386 8811 	msr	BASEPRI, r6
    7b98:	f3bf 8f6f 	isb	sy
    7b9c:	e005      	b.n	7baa <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    7b9e:	2500      	movs	r5, #0
    7ba0:	e7ac      	b.n	7afc <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    7ba2:	4807      	ldr	r0, [pc, #28]	; (7bc0 <z_impl_k_mutex_lock+0x1d8>)
    7ba4:	4631      	mov	r1, r6
    7ba6:	f000 fb33 	bl	8210 <z_reschedule>
	return -EAGAIN;
    7baa:	f06f 000a 	mvn.w	r0, #10
    7bae:	e76f      	b.n	7a90 <z_impl_k_mutex_lock+0xa8>
    7bb0:	0000dee8 	.word	0x0000dee8
    7bb4:	0000df95 	.word	0x0000df95
    7bb8:	0000c986 	.word	0x0000c986
    7bbc:	0000dfb7 	.word	0x0000dfb7
    7bc0:	20000f44 	.word	0x20000f44
    7bc4:	0000cad0 	.word	0x0000cad0
    7bc8:	0000cb29 	.word	0x0000cb29
    7bcc:	0000cb3e 	.word	0x0000cb3e
    7bd0:	20000f1c 	.word	0x20000f1c
    7bd4:	0000cafd 	.word	0x0000cafd
    7bd8:	0000cb14 	.word	0x0000cb14

00007bdc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7bdc:	b538      	push	{r3, r4, r5, lr}
    7bde:	4604      	mov	r4, r0
    7be0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7be4:	b163      	cbz	r3, 7c00 <z_impl_k_mutex_unlock+0x24>
    7be6:	4950      	ldr	r1, [pc, #320]	; (7d28 <z_impl_k_mutex_unlock+0x14c>)
    7be8:	4a50      	ldr	r2, [pc, #320]	; (7d2c <z_impl_k_mutex_unlock+0x150>)
    7bea:	4851      	ldr	r0, [pc, #324]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7bec:	23c7      	movs	r3, #199	; 0xc7
    7bee:	f003 f9a1 	bl	af34 <assert_print>
    7bf2:	4850      	ldr	r0, [pc, #320]	; (7d34 <z_impl_k_mutex_unlock+0x158>)
    7bf4:	f003 f99e 	bl	af34 <assert_print>
    7bf8:	484c      	ldr	r0, [pc, #304]	; (7d2c <z_impl_k_mutex_unlock+0x150>)
    7bfa:	21c7      	movs	r1, #199	; 0xc7
    7bfc:	f003 f993 	bl	af26 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7c00:	68a3      	ldr	r3, [r4, #8]
    7c02:	2b00      	cmp	r3, #0
    7c04:	f000 8089 	beq.w	7d1a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7c08:	4d4b      	ldr	r5, [pc, #300]	; (7d38 <z_impl_k_mutex_unlock+0x15c>)
    7c0a:	68aa      	ldr	r2, [r5, #8]
    7c0c:	4293      	cmp	r3, r2
    7c0e:	f040 8087 	bne.w	7d20 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7c12:	68e3      	ldr	r3, [r4, #12]
    7c14:	b94b      	cbnz	r3, 7c2a <z_impl_k_mutex_unlock+0x4e>
    7c16:	4949      	ldr	r1, [pc, #292]	; (7d3c <z_impl_k_mutex_unlock+0x160>)
    7c18:	4845      	ldr	r0, [pc, #276]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7c1a:	4a44      	ldr	r2, [pc, #272]	; (7d2c <z_impl_k_mutex_unlock+0x150>)
    7c1c:	23df      	movs	r3, #223	; 0xdf
    7c1e:	f003 f989 	bl	af34 <assert_print>
    7c22:	4842      	ldr	r0, [pc, #264]	; (7d2c <z_impl_k_mutex_unlock+0x150>)
    7c24:	21df      	movs	r1, #223	; 0xdf
    7c26:	f003 f97e 	bl	af26 <assert_post_action>
    7c2a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7c2e:	b163      	cbz	r3, 7c4a <z_impl_k_mutex_unlock+0x6e>
    7c30:	493d      	ldr	r1, [pc, #244]	; (7d28 <z_impl_k_mutex_unlock+0x14c>)
    7c32:	4a43      	ldr	r2, [pc, #268]	; (7d40 <z_impl_k_mutex_unlock+0x164>)
    7c34:	483e      	ldr	r0, [pc, #248]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7c36:	23fd      	movs	r3, #253	; 0xfd
    7c38:	f003 f97c 	bl	af34 <assert_print>
    7c3c:	4841      	ldr	r0, [pc, #260]	; (7d44 <z_impl_k_mutex_unlock+0x168>)
    7c3e:	f003 f979 	bl	af34 <assert_print>
    7c42:	483f      	ldr	r0, [pc, #252]	; (7d40 <z_impl_k_mutex_unlock+0x164>)
    7c44:	21fd      	movs	r1, #253	; 0xfd
    7c46:	f003 f96e 	bl	af26 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7c4a:	68ab      	ldr	r3, [r5, #8]
    7c4c:	7bdb      	ldrb	r3, [r3, #15]
    7c4e:	2b01      	cmp	r3, #1
    7c50:	d10c      	bne.n	7c6c <z_impl_k_mutex_unlock+0x90>
    7c52:	493d      	ldr	r1, [pc, #244]	; (7d48 <z_impl_k_mutex_unlock+0x16c>)
    7c54:	4a3a      	ldr	r2, [pc, #232]	; (7d40 <z_impl_k_mutex_unlock+0x164>)
    7c56:	4836      	ldr	r0, [pc, #216]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7c58:	23fe      	movs	r3, #254	; 0xfe
    7c5a:	f003 f96b 	bl	af34 <assert_print>
    7c5e:	4839      	ldr	r0, [pc, #228]	; (7d44 <z_impl_k_mutex_unlock+0x168>)
    7c60:	f003 f968 	bl	af34 <assert_print>
    7c64:	4836      	ldr	r0, [pc, #216]	; (7d40 <z_impl_k_mutex_unlock+0x164>)
    7c66:	21fe      	movs	r1, #254	; 0xfe
    7c68:	f003 f95d 	bl	af26 <assert_post_action>

	--_current->base.sched_locked;
    7c6c:	68aa      	ldr	r2, [r5, #8]
    7c6e:	7bd3      	ldrb	r3, [r2, #15]
    7c70:	3b01      	subs	r3, #1
    7c72:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7c74:	68e3      	ldr	r3, [r4, #12]
    7c76:	2b01      	cmp	r3, #1
    7c78:	d905      	bls.n	7c86 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    7c7a:	3b01      	subs	r3, #1
    7c7c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7c7e:	f000 fbd3 	bl	8428 <k_sched_unlock>

	return 0;
    7c82:	2000      	movs	r0, #0
}
    7c84:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7c86:	f04f 0320 	mov.w	r3, #32
    7c8a:	f3ef 8511 	mrs	r5, BASEPRI
    7c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    7c92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c96:	482d      	ldr	r0, [pc, #180]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7c98:	f7ff fe4e 	bl	7938 <z_spin_lock_valid>
    7c9c:	b968      	cbnz	r0, 7cba <z_impl_k_mutex_unlock+0xde>
    7c9e:	4a2c      	ldr	r2, [pc, #176]	; (7d50 <z_impl_k_mutex_unlock+0x174>)
    7ca0:	492c      	ldr	r1, [pc, #176]	; (7d54 <z_impl_k_mutex_unlock+0x178>)
    7ca2:	4823      	ldr	r0, [pc, #140]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7ca4:	238e      	movs	r3, #142	; 0x8e
    7ca6:	f003 f945 	bl	af34 <assert_print>
    7caa:	4928      	ldr	r1, [pc, #160]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7cac:	482a      	ldr	r0, [pc, #168]	; (7d58 <z_impl_k_mutex_unlock+0x17c>)
    7cae:	f003 f941 	bl	af34 <assert_print>
    7cb2:	4827      	ldr	r0, [pc, #156]	; (7d50 <z_impl_k_mutex_unlock+0x174>)
    7cb4:	218e      	movs	r1, #142	; 0x8e
    7cb6:	f003 f936 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7cba:	4824      	ldr	r0, [pc, #144]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7cbc:	f7ff fe5a 	bl	7974 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7cc0:	6921      	ldr	r1, [r4, #16]
    7cc2:	68a0      	ldr	r0, [r4, #8]
    7cc4:	f003 fe76 	bl	b9b4 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7cc8:	4620      	mov	r0, r4
    7cca:	f000 ffc7 	bl	8c5c <z_unpend_first_thread>
	mutex->owner = new_owner;
    7cce:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7cd0:	b158      	cbz	r0, 7cea <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    7cd2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7cd6:	6122      	str	r2, [r4, #16]
    7cd8:	2200      	movs	r2, #0
    7cda:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7cdc:	f000 fa08 	bl	80f0 <z_ready_thread>
		z_reschedule(&lock, key);
    7ce0:	481a      	ldr	r0, [pc, #104]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7ce2:	4629      	mov	r1, r5
    7ce4:	f000 fa94 	bl	8210 <z_reschedule>
    7ce8:	e7c9      	b.n	7c7e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    7cea:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cec:	4817      	ldr	r0, [pc, #92]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7cee:	f7ff fe31 	bl	7954 <z_spin_unlock_valid>
    7cf2:	b968      	cbnz	r0, 7d10 <z_impl_k_mutex_unlock+0x134>
    7cf4:	4a16      	ldr	r2, [pc, #88]	; (7d50 <z_impl_k_mutex_unlock+0x174>)
    7cf6:	4919      	ldr	r1, [pc, #100]	; (7d5c <z_impl_k_mutex_unlock+0x180>)
    7cf8:	480d      	ldr	r0, [pc, #52]	; (7d30 <z_impl_k_mutex_unlock+0x154>)
    7cfa:	23b9      	movs	r3, #185	; 0xb9
    7cfc:	f003 f91a 	bl	af34 <assert_print>
    7d00:	4912      	ldr	r1, [pc, #72]	; (7d4c <z_impl_k_mutex_unlock+0x170>)
    7d02:	4817      	ldr	r0, [pc, #92]	; (7d60 <z_impl_k_mutex_unlock+0x184>)
    7d04:	f003 f916 	bl	af34 <assert_print>
    7d08:	4811      	ldr	r0, [pc, #68]	; (7d50 <z_impl_k_mutex_unlock+0x174>)
    7d0a:	21b9      	movs	r1, #185	; 0xb9
    7d0c:	f003 f90b 	bl	af26 <assert_post_action>
	__asm__ volatile(
    7d10:	f385 8811 	msr	BASEPRI, r5
    7d14:	f3bf 8f6f 	isb	sy
    7d18:	e7b1      	b.n	7c7e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    7d1a:	f06f 0015 	mvn.w	r0, #21
    7d1e:	e7b1      	b.n	7c84 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    7d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7d24:	e7ae      	b.n	7c84 <z_impl_k_mutex_unlock+0xa8>
    7d26:	bf00      	nop
    7d28:	0000dee8 	.word	0x0000dee8
    7d2c:	0000df95 	.word	0x0000df95
    7d30:	0000c986 	.word	0x0000c986
    7d34:	0000dfb7 	.word	0x0000dfb7
    7d38:	20000f1c 	.word	0x20000f1c
    7d3c:	0000dfdc 	.word	0x0000dfdc
    7d40:	0000dff3 	.word	0x0000dff3
    7d44:	0000e01e 	.word	0x0000e01e
    7d48:	0000e021 	.word	0x0000e021
    7d4c:	20000f44 	.word	0x20000f44
    7d50:	0000cad0 	.word	0x0000cad0
    7d54:	0000cb29 	.word	0x0000cb29
    7d58:	0000cb3e 	.word	0x0000cb3e
    7d5c:	0000cafd 	.word	0x0000cafd
    7d60:	0000cb14 	.word	0x0000cb14

00007d64 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7d64:	b538      	push	{r3, r4, r5, lr}
    7d66:	4604      	mov	r4, r0
	__asm__ volatile(
    7d68:	f04f 0320 	mov.w	r3, #32
    7d6c:	f3ef 8511 	mrs	r5, BASEPRI
    7d70:	f383 8812 	msr	BASEPRI_MAX, r3
    7d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d78:	4814      	ldr	r0, [pc, #80]	; (7dcc <z_impl_k_sem_give+0x68>)
    7d7a:	f7ff fddd 	bl	7938 <z_spin_lock_valid>
    7d7e:	b968      	cbnz	r0, 7d9c <z_impl_k_sem_give+0x38>
    7d80:	4a13      	ldr	r2, [pc, #76]	; (7dd0 <z_impl_k_sem_give+0x6c>)
    7d82:	4914      	ldr	r1, [pc, #80]	; (7dd4 <z_impl_k_sem_give+0x70>)
    7d84:	4814      	ldr	r0, [pc, #80]	; (7dd8 <z_impl_k_sem_give+0x74>)
    7d86:	238e      	movs	r3, #142	; 0x8e
    7d88:	f003 f8d4 	bl	af34 <assert_print>
    7d8c:	490f      	ldr	r1, [pc, #60]	; (7dcc <z_impl_k_sem_give+0x68>)
    7d8e:	4813      	ldr	r0, [pc, #76]	; (7ddc <z_impl_k_sem_give+0x78>)
    7d90:	f003 f8d0 	bl	af34 <assert_print>
    7d94:	480e      	ldr	r0, [pc, #56]	; (7dd0 <z_impl_k_sem_give+0x6c>)
    7d96:	218e      	movs	r1, #142	; 0x8e
    7d98:	f003 f8c5 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d9c:	480b      	ldr	r0, [pc, #44]	; (7dcc <z_impl_k_sem_give+0x68>)
    7d9e:	f7ff fde9 	bl	7974 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7da2:	4620      	mov	r0, r4
    7da4:	f000 ff5a 	bl	8c5c <z_unpend_first_thread>

	if (thread != NULL) {
    7da8:	b148      	cbz	r0, 7dbe <z_impl_k_sem_give+0x5a>
    7daa:	2200      	movs	r2, #0
    7dac:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7dae:	f000 f99f 	bl	80f0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7db2:	4629      	mov	r1, r5
    7db4:	4805      	ldr	r0, [pc, #20]	; (7dcc <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7dba:	f000 ba29 	b.w	8210 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7dbe:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7dc2:	429a      	cmp	r2, r3
    7dc4:	bf18      	it	ne
    7dc6:	3301      	addne	r3, #1
    7dc8:	60a3      	str	r3, [r4, #8]
}
    7dca:	e7f2      	b.n	7db2 <z_impl_k_sem_give+0x4e>
    7dcc:	20000f48 	.word	0x20000f48
    7dd0:	0000cad0 	.word	0x0000cad0
    7dd4:	0000cb29 	.word	0x0000cb29
    7dd8:	0000c986 	.word	0x0000c986
    7ddc:	0000cb3e 	.word	0x0000cb3e

00007de0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7de2:	4604      	mov	r4, r0
    7de4:	4617      	mov	r7, r2
    7de6:	461d      	mov	r5, r3
    7de8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7dec:	b17b      	cbz	r3, 7e0e <z_impl_k_sem_take+0x2e>
    7dee:	ea52 0305 	orrs.w	r3, r2, r5
    7df2:	d00c      	beq.n	7e0e <z_impl_k_sem_take+0x2e>
    7df4:	4935      	ldr	r1, [pc, #212]	; (7ecc <z_impl_k_sem_take+0xec>)
    7df6:	4a36      	ldr	r2, [pc, #216]	; (7ed0 <z_impl_k_sem_take+0xf0>)
    7df8:	4836      	ldr	r0, [pc, #216]	; (7ed4 <z_impl_k_sem_take+0xf4>)
    7dfa:	2379      	movs	r3, #121	; 0x79
    7dfc:	f003 f89a 	bl	af34 <assert_print>
    7e00:	4835      	ldr	r0, [pc, #212]	; (7ed8 <z_impl_k_sem_take+0xf8>)
    7e02:	f003 f897 	bl	af34 <assert_print>
    7e06:	4832      	ldr	r0, [pc, #200]	; (7ed0 <z_impl_k_sem_take+0xf0>)
    7e08:	2179      	movs	r1, #121	; 0x79
    7e0a:	f003 f88c 	bl	af26 <assert_post_action>
    7e0e:	f04f 0320 	mov.w	r3, #32
    7e12:	f3ef 8611 	mrs	r6, BASEPRI
    7e16:	f383 8812 	msr	BASEPRI_MAX, r3
    7e1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e1e:	482f      	ldr	r0, [pc, #188]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e20:	f7ff fd8a 	bl	7938 <z_spin_lock_valid>
    7e24:	b968      	cbnz	r0, 7e42 <z_impl_k_sem_take+0x62>
    7e26:	4a2e      	ldr	r2, [pc, #184]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7e28:	492e      	ldr	r1, [pc, #184]	; (7ee4 <z_impl_k_sem_take+0x104>)
    7e2a:	482a      	ldr	r0, [pc, #168]	; (7ed4 <z_impl_k_sem_take+0xf4>)
    7e2c:	238e      	movs	r3, #142	; 0x8e
    7e2e:	f003 f881 	bl	af34 <assert_print>
    7e32:	492a      	ldr	r1, [pc, #168]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e34:	482c      	ldr	r0, [pc, #176]	; (7ee8 <z_impl_k_sem_take+0x108>)
    7e36:	f003 f87d 	bl	af34 <assert_print>
    7e3a:	4829      	ldr	r0, [pc, #164]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7e3c:	218e      	movs	r1, #142	; 0x8e
    7e3e:	f003 f872 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e42:	4826      	ldr	r0, [pc, #152]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e44:	f7ff fd96 	bl	7974 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7e48:	68a3      	ldr	r3, [r4, #8]
    7e4a:	b1d3      	cbz	r3, 7e82 <z_impl_k_sem_take+0xa2>
		sem->count--;
    7e4c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e4e:	4823      	ldr	r0, [pc, #140]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e50:	60a3      	str	r3, [r4, #8]
    7e52:	f7ff fd7f 	bl	7954 <z_spin_unlock_valid>
    7e56:	b968      	cbnz	r0, 7e74 <z_impl_k_sem_take+0x94>
    7e58:	4a21      	ldr	r2, [pc, #132]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7e5a:	4924      	ldr	r1, [pc, #144]	; (7eec <z_impl_k_sem_take+0x10c>)
    7e5c:	481d      	ldr	r0, [pc, #116]	; (7ed4 <z_impl_k_sem_take+0xf4>)
    7e5e:	23b9      	movs	r3, #185	; 0xb9
    7e60:	f003 f868 	bl	af34 <assert_print>
    7e64:	491d      	ldr	r1, [pc, #116]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e66:	4822      	ldr	r0, [pc, #136]	; (7ef0 <z_impl_k_sem_take+0x110>)
    7e68:	f003 f864 	bl	af34 <assert_print>
    7e6c:	481c      	ldr	r0, [pc, #112]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7e6e:	21b9      	movs	r1, #185	; 0xb9
    7e70:	f003 f859 	bl	af26 <assert_post_action>
	__asm__ volatile(
    7e74:	f386 8811 	msr	BASEPRI, r6
    7e78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7e7c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7e7e:	b003      	add	sp, #12
    7e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7e82:	ea57 0305 	orrs.w	r3, r7, r5
    7e86:	d118      	bne.n	7eba <z_impl_k_sem_take+0xda>
    7e88:	4814      	ldr	r0, [pc, #80]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e8a:	f7ff fd63 	bl	7954 <z_spin_unlock_valid>
    7e8e:	b968      	cbnz	r0, 7eac <z_impl_k_sem_take+0xcc>
    7e90:	4a13      	ldr	r2, [pc, #76]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7e92:	4916      	ldr	r1, [pc, #88]	; (7eec <z_impl_k_sem_take+0x10c>)
    7e94:	480f      	ldr	r0, [pc, #60]	; (7ed4 <z_impl_k_sem_take+0xf4>)
    7e96:	23b9      	movs	r3, #185	; 0xb9
    7e98:	f003 f84c 	bl	af34 <assert_print>
    7e9c:	490f      	ldr	r1, [pc, #60]	; (7edc <z_impl_k_sem_take+0xfc>)
    7e9e:	4814      	ldr	r0, [pc, #80]	; (7ef0 <z_impl_k_sem_take+0x110>)
    7ea0:	f003 f848 	bl	af34 <assert_print>
    7ea4:	480e      	ldr	r0, [pc, #56]	; (7ee0 <z_impl_k_sem_take+0x100>)
    7ea6:	21b9      	movs	r1, #185	; 0xb9
    7ea8:	f003 f83d 	bl	af26 <assert_post_action>
    7eac:	f386 8811 	msr	BASEPRI, r6
    7eb0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7eb4:	f06f 000f 	mvn.w	r0, #15
    7eb8:	e7e1      	b.n	7e7e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7eba:	e9cd 7500 	strd	r7, r5, [sp]
    7ebe:	4622      	mov	r2, r4
    7ec0:	4631      	mov	r1, r6
    7ec2:	4806      	ldr	r0, [pc, #24]	; (7edc <z_impl_k_sem_take+0xfc>)
    7ec4:	f000 fcd0 	bl	8868 <z_pend_curr>
	return ret;
    7ec8:	e7d9      	b.n	7e7e <z_impl_k_sem_take+0x9e>
    7eca:	bf00      	nop
    7ecc:	0000e072 	.word	0x0000e072
    7ed0:	0000e052 	.word	0x0000e052
    7ed4:	0000c986 	.word	0x0000c986
    7ed8:	0000e01e 	.word	0x0000e01e
    7edc:	20000f48 	.word	0x20000f48
    7ee0:	0000cad0 	.word	0x0000cad0
    7ee4:	0000cb29 	.word	0x0000cb29
    7ee8:	0000cb3e 	.word	0x0000cb3e
    7eec:	0000cafd 	.word	0x0000cafd
    7ef0:	0000cb14 	.word	0x0000cb14

00007ef4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    7ef4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    7ef6:	4d07      	ldr	r5, [pc, #28]	; (7f14 <z_reset_time_slice+0x20>)
    7ef8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    7efa:	b154      	cbz	r4, 7f12 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7efc:	f7fe f992 	bl	6224 <sys_clock_elapsed>
    7f00:	4b05      	ldr	r3, [pc, #20]	; (7f18 <z_reset_time_slice+0x24>)
    7f02:	4404      	add	r4, r0
    7f04:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7f06:	6828      	ldr	r0, [r5, #0]
    7f08:	2100      	movs	r1, #0
	}
}
    7f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    7f0e:	f001 bb1b 	b.w	9548 <z_set_timeout_expiry>
}
    7f12:	bd38      	pop	{r3, r4, r5, pc}
    7f14:	20000f54 	.word	0x20000f54
    7f18:	20000f1c 	.word	0x20000f1c

00007f1c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7f1c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7f1e:	4d16      	ldr	r5, [pc, #88]	; (7f78 <update_cache+0x5c>)
    7f20:	462b      	mov	r3, r5
    7f22:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f26:	429c      	cmp	r4, r3
    7f28:	d000      	beq.n	7f2c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f2a:	b904      	cbnz	r4, 7f2e <update_cache+0x12>
    7f2c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    7f2e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7f30:	b120      	cbz	r0, 7f3c <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7f32:	68ab      	ldr	r3, [r5, #8]
    7f34:	42a3      	cmp	r3, r4
    7f36:	d11b      	bne.n	7f70 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7f38:	4623      	mov	r3, r4
    7f3a:	e017      	b.n	7f6c <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    7f3c:	b963      	cbnz	r3, 7f58 <update_cache+0x3c>
    7f3e:	490f      	ldr	r1, [pc, #60]	; (7f7c <update_cache+0x60>)
    7f40:	4a0f      	ldr	r2, [pc, #60]	; (7f80 <update_cache+0x64>)
    7f42:	4810      	ldr	r0, [pc, #64]	; (7f84 <update_cache+0x68>)
    7f44:	2389      	movs	r3, #137	; 0x89
    7f46:	f002 fff5 	bl	af34 <assert_print>
    7f4a:	480f      	ldr	r0, [pc, #60]	; (7f88 <update_cache+0x6c>)
    7f4c:	f002 fff2 	bl	af34 <assert_print>
    7f50:	480b      	ldr	r0, [pc, #44]	; (7f80 <update_cache+0x64>)
    7f52:	2189      	movs	r1, #137	; 0x89
    7f54:	f002 ffe7 	bl	af26 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7f58:	68ab      	ldr	r3, [r5, #8]
    7f5a:	7b5a      	ldrb	r2, [r3, #13]
    7f5c:	06d2      	lsls	r2, r2, #27
    7f5e:	d1e8      	bne.n	7f32 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7f60:	69a2      	ldr	r2, [r4, #24]
    7f62:	2a00      	cmp	r2, #0
    7f64:	d1e5      	bne.n	7f32 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    7f66:	89da      	ldrh	r2, [r3, #14]
    7f68:	2a7f      	cmp	r2, #127	; 0x7f
    7f6a:	d9e2      	bls.n	7f32 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    7f6c:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7f6e:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    7f70:	4620      	mov	r0, r4
    7f72:	f7ff ffbf 	bl	7ef4 <z_reset_time_slice>
    7f76:	e7df      	b.n	7f38 <update_cache+0x1c>
    7f78:	20000f1c 	.word	0x20000f1c
    7f7c:	0000e0e2 	.word	0x0000e0e2
    7f80:	0000e0c0 	.word	0x0000e0c0
    7f84:	0000c986 	.word	0x0000c986
    7f88:	0000e01e 	.word	0x0000e01e

00007f8c <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    7f8c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7f8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7f92:	7b43      	ldrb	r3, [r0, #13]
    7f94:	2a00      	cmp	r2, #0
{
    7f96:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7f98:	db38      	blt.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7f9a:	06da      	lsls	r2, r3, #27
    7f9c:	d136      	bne.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	return node->next != NULL;
    7f9e:	6985      	ldr	r5, [r0, #24]
    7fa0:	2d00      	cmp	r5, #0
    7fa2:	d133      	bne.n	800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
	thread->base.thread_state |= _THREAD_QUEUED;
    7fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7fa8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7faa:	4b19      	ldr	r3, [pc, #100]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fac:	4298      	cmp	r0, r3
    7fae:	d109      	bne.n	7fc4 <ready_thread+0x38>
    7fb0:	4918      	ldr	r1, [pc, #96]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7fb2:	4819      	ldr	r0, [pc, #100]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7fb4:	4a19      	ldr	r2, [pc, #100]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7fb6:	23ba      	movs	r3, #186	; 0xba
    7fb8:	f002 ffbc 	bl	af34 <assert_print>
    7fbc:	4817      	ldr	r0, [pc, #92]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7fbe:	21ba      	movs	r1, #186	; 0xba
    7fc0:	f002 ffb1 	bl	af26 <assert_post_action>
	return list->head == list;
    7fc4:	4a16      	ldr	r2, [pc, #88]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fc6:	4613      	mov	r3, r2
    7fc8:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7fcc:	4299      	cmp	r1, r3
    7fce:	bf18      	it	ne
    7fd0:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7fd2:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fd4:	b925      	cbnz	r5, 7fe0 <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7fd6:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    7fda:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7fdc:	6254      	str	r4, [r2, #36]	; 0x24
}
    7fde:	e00c      	b.n	7ffa <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    7fe0:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7fe4:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    7fe8:	42b0      	cmp	r0, r6
    7fea:	d00b      	beq.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7fec:	4286      	cmp	r6, r0
    7fee:	dd09      	ble.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    7ff0:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    7ff2:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    7ff6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7ff8:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    7ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7ffe:	2000      	movs	r0, #0
    8000:	f7ff bf8c 	b.w	7f1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    8004:	428d      	cmp	r5, r1
    8006:	d0e6      	beq.n	7fd6 <ready_thread+0x4a>
    8008:	682d      	ldr	r5, [r5, #0]
    800a:	e7e3      	b.n	7fd4 <ready_thread+0x48>
}
    800c:	bd70      	pop	{r4, r5, r6, pc}
    800e:	bf00      	nop
    8010:	200006c0 	.word	0x200006c0
    8014:	0000e109 	.word	0x0000e109
    8018:	0000c986 	.word	0x0000c986
    801c:	0000e0c0 	.word	0x0000e0c0
    8020:	20000f1c 	.word	0x20000f1c

00008024 <k_sched_time_slice_set>:
{
    8024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8026:	4604      	mov	r4, r0
    8028:	460d      	mov	r5, r1
	__asm__ volatile(
    802a:	f04f 0320 	mov.w	r3, #32
    802e:	f3ef 8711 	mrs	r7, BASEPRI
    8032:	f383 8812 	msr	BASEPRI_MAX, r3
    8036:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    803a:	4823      	ldr	r0, [pc, #140]	; (80c8 <k_sched_time_slice_set+0xa4>)
    803c:	f7ff fc7c 	bl	7938 <z_spin_lock_valid>
    8040:	b968      	cbnz	r0, 805e <k_sched_time_slice_set+0x3a>
    8042:	4a22      	ldr	r2, [pc, #136]	; (80cc <k_sched_time_slice_set+0xa8>)
    8044:	4922      	ldr	r1, [pc, #136]	; (80d0 <k_sched_time_slice_set+0xac>)
    8046:	4823      	ldr	r0, [pc, #140]	; (80d4 <k_sched_time_slice_set+0xb0>)
    8048:	238e      	movs	r3, #142	; 0x8e
    804a:	f002 ff73 	bl	af34 <assert_print>
    804e:	491e      	ldr	r1, [pc, #120]	; (80c8 <k_sched_time_slice_set+0xa4>)
    8050:	4821      	ldr	r0, [pc, #132]	; (80d8 <k_sched_time_slice_set+0xb4>)
    8052:	f002 ff6f 	bl	af34 <assert_print>
    8056:	481d      	ldr	r0, [pc, #116]	; (80cc <k_sched_time_slice_set+0xa8>)
    8058:	218e      	movs	r1, #142	; 0x8e
    805a:	f002 ff64 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    805e:	481a      	ldr	r0, [pc, #104]	; (80c8 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    8060:	2600      	movs	r6, #0
    8062:	f7ff fc87 	bl	7974 <z_spin_lock_set_owner>
    8066:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    806a:	f240 30e7 	movw	r0, #999	; 0x3e7
    806e:	4631      	mov	r1, r6
    8070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8074:	2300      	movs	r3, #0
    8076:	fbe4 010c 	umlal	r0, r1, r4, ip
    807a:	f7f8 fddd 	bl	c38 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    807e:	42b4      	cmp	r4, r6
    8080:	dd02      	ble.n	8088 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    8082:	2802      	cmp	r0, #2
    8084:	bfb8      	it	lt
    8086:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8088:	4a14      	ldr	r2, [pc, #80]	; (80dc <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    808a:	4b15      	ldr	r3, [pc, #84]	; (80e0 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    808c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    808e:	4a15      	ldr	r2, [pc, #84]	; (80e4 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    8090:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    8092:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    8094:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    8096:	f7ff ff2d 	bl	7ef4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    809a:	480b      	ldr	r0, [pc, #44]	; (80c8 <k_sched_time_slice_set+0xa4>)
    809c:	f7ff fc5a 	bl	7954 <z_spin_unlock_valid>
    80a0:	b968      	cbnz	r0, 80be <k_sched_time_slice_set+0x9a>
    80a2:	4a0a      	ldr	r2, [pc, #40]	; (80cc <k_sched_time_slice_set+0xa8>)
    80a4:	4910      	ldr	r1, [pc, #64]	; (80e8 <k_sched_time_slice_set+0xc4>)
    80a6:	480b      	ldr	r0, [pc, #44]	; (80d4 <k_sched_time_slice_set+0xb0>)
    80a8:	23b9      	movs	r3, #185	; 0xb9
    80aa:	f002 ff43 	bl	af34 <assert_print>
    80ae:	4906      	ldr	r1, [pc, #24]	; (80c8 <k_sched_time_slice_set+0xa4>)
    80b0:	480e      	ldr	r0, [pc, #56]	; (80ec <k_sched_time_slice_set+0xc8>)
    80b2:	f002 ff3f 	bl	af34 <assert_print>
    80b6:	4805      	ldr	r0, [pc, #20]	; (80cc <k_sched_time_slice_set+0xa8>)
    80b8:	21b9      	movs	r1, #185	; 0xb9
    80ba:	f002 ff34 	bl	af26 <assert_post_action>
	__asm__ volatile(
    80be:	f387 8811 	msr	BASEPRI, r7
    80c2:	f3bf 8f6f 	isb	sy
}
    80c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80c8:	20000f58 	.word	0x20000f58
    80cc:	0000cad0 	.word	0x0000cad0
    80d0:	0000cb29 	.word	0x0000cb29
    80d4:	0000c986 	.word	0x0000c986
    80d8:	0000cb3e 	.word	0x0000cb3e
    80dc:	20000f54 	.word	0x20000f54
    80e0:	20000f1c 	.word	0x20000f1c
    80e4:	20000f50 	.word	0x20000f50
    80e8:	0000cafd 	.word	0x0000cafd
    80ec:	0000cb14 	.word	0x0000cb14

000080f0 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    80f0:	b538      	push	{r3, r4, r5, lr}
    80f2:	4604      	mov	r4, r0
	__asm__ volatile(
    80f4:	f04f 0320 	mov.w	r3, #32
    80f8:	f3ef 8511 	mrs	r5, BASEPRI
    80fc:	f383 8812 	msr	BASEPRI_MAX, r3
    8100:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8104:	4817      	ldr	r0, [pc, #92]	; (8164 <z_ready_thread+0x74>)
    8106:	f7ff fc17 	bl	7938 <z_spin_lock_valid>
    810a:	b968      	cbnz	r0, 8128 <z_ready_thread+0x38>
    810c:	4a16      	ldr	r2, [pc, #88]	; (8168 <z_ready_thread+0x78>)
    810e:	4917      	ldr	r1, [pc, #92]	; (816c <z_ready_thread+0x7c>)
    8110:	4817      	ldr	r0, [pc, #92]	; (8170 <z_ready_thread+0x80>)
    8112:	238e      	movs	r3, #142	; 0x8e
    8114:	f002 ff0e 	bl	af34 <assert_print>
    8118:	4912      	ldr	r1, [pc, #72]	; (8164 <z_ready_thread+0x74>)
    811a:	4816      	ldr	r0, [pc, #88]	; (8174 <z_ready_thread+0x84>)
    811c:	f002 ff0a 	bl	af34 <assert_print>
    8120:	4811      	ldr	r0, [pc, #68]	; (8168 <z_ready_thread+0x78>)
    8122:	218e      	movs	r1, #142	; 0x8e
    8124:	f002 feff 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8128:	480e      	ldr	r0, [pc, #56]	; (8164 <z_ready_thread+0x74>)
    812a:	f7ff fc23 	bl	7974 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    812e:	4620      	mov	r0, r4
    8130:	f7ff ff2c 	bl	7f8c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8134:	480b      	ldr	r0, [pc, #44]	; (8164 <z_ready_thread+0x74>)
    8136:	f7ff fc0d 	bl	7954 <z_spin_unlock_valid>
    813a:	b968      	cbnz	r0, 8158 <z_ready_thread+0x68>
    813c:	4a0a      	ldr	r2, [pc, #40]	; (8168 <z_ready_thread+0x78>)
    813e:	490e      	ldr	r1, [pc, #56]	; (8178 <z_ready_thread+0x88>)
    8140:	480b      	ldr	r0, [pc, #44]	; (8170 <z_ready_thread+0x80>)
    8142:	23b9      	movs	r3, #185	; 0xb9
    8144:	f002 fef6 	bl	af34 <assert_print>
    8148:	4906      	ldr	r1, [pc, #24]	; (8164 <z_ready_thread+0x74>)
    814a:	480c      	ldr	r0, [pc, #48]	; (817c <z_ready_thread+0x8c>)
    814c:	f002 fef2 	bl	af34 <assert_print>
    8150:	4805      	ldr	r0, [pc, #20]	; (8168 <z_ready_thread+0x78>)
    8152:	21b9      	movs	r1, #185	; 0xb9
    8154:	f002 fee7 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8158:	f385 8811 	msr	BASEPRI, r5
    815c:	f3bf 8f6f 	isb	sy
		}
	}
}
    8160:	bd38      	pop	{r3, r4, r5, pc}
    8162:	bf00      	nop
    8164:	20000f58 	.word	0x20000f58
    8168:	0000cad0 	.word	0x0000cad0
    816c:	0000cb29 	.word	0x0000cb29
    8170:	0000c986 	.word	0x0000c986
    8174:	0000cb3e 	.word	0x0000cb3e
    8178:	0000cafd 	.word	0x0000cafd
    817c:	0000cb14 	.word	0x0000cb14

00008180 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    8180:	b538      	push	{r3, r4, r5, lr}
    8182:	4604      	mov	r4, r0
	__asm__ volatile(
    8184:	f04f 0320 	mov.w	r3, #32
    8188:	f3ef 8511 	mrs	r5, BASEPRI
    818c:	f383 8812 	msr	BASEPRI_MAX, r3
    8190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8194:	4817      	ldr	r0, [pc, #92]	; (81f4 <z_unpend_thread_no_timeout+0x74>)
    8196:	f7ff fbcf 	bl	7938 <z_spin_lock_valid>
    819a:	b968      	cbnz	r0, 81b8 <z_unpend_thread_no_timeout+0x38>
    819c:	4a16      	ldr	r2, [pc, #88]	; (81f8 <z_unpend_thread_no_timeout+0x78>)
    819e:	4917      	ldr	r1, [pc, #92]	; (81fc <z_unpend_thread_no_timeout+0x7c>)
    81a0:	4817      	ldr	r0, [pc, #92]	; (8200 <z_unpend_thread_no_timeout+0x80>)
    81a2:	238e      	movs	r3, #142	; 0x8e
    81a4:	f002 fec6 	bl	af34 <assert_print>
    81a8:	4912      	ldr	r1, [pc, #72]	; (81f4 <z_unpend_thread_no_timeout+0x74>)
    81aa:	4816      	ldr	r0, [pc, #88]	; (8204 <z_unpend_thread_no_timeout+0x84>)
    81ac:	f002 fec2 	bl	af34 <assert_print>
    81b0:	4811      	ldr	r0, [pc, #68]	; (81f8 <z_unpend_thread_no_timeout+0x78>)
    81b2:	218e      	movs	r1, #142	; 0x8e
    81b4:	f002 feb7 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    81b8:	480e      	ldr	r0, [pc, #56]	; (81f4 <z_unpend_thread_no_timeout+0x74>)
    81ba:	f7ff fbdb 	bl	7974 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    81be:	4620      	mov	r0, r4
    81c0:	f000 fc82 	bl	8ac8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81c4:	480b      	ldr	r0, [pc, #44]	; (81f4 <z_unpend_thread_no_timeout+0x74>)
    81c6:	f7ff fbc5 	bl	7954 <z_spin_unlock_valid>
    81ca:	b968      	cbnz	r0, 81e8 <z_unpend_thread_no_timeout+0x68>
    81cc:	4a0a      	ldr	r2, [pc, #40]	; (81f8 <z_unpend_thread_no_timeout+0x78>)
    81ce:	490e      	ldr	r1, [pc, #56]	; (8208 <z_unpend_thread_no_timeout+0x88>)
    81d0:	480b      	ldr	r0, [pc, #44]	; (8200 <z_unpend_thread_no_timeout+0x80>)
    81d2:	23b9      	movs	r3, #185	; 0xb9
    81d4:	f002 feae 	bl	af34 <assert_print>
    81d8:	4906      	ldr	r1, [pc, #24]	; (81f4 <z_unpend_thread_no_timeout+0x74>)
    81da:	480c      	ldr	r0, [pc, #48]	; (820c <z_unpend_thread_no_timeout+0x8c>)
    81dc:	f002 feaa 	bl	af34 <assert_print>
    81e0:	4805      	ldr	r0, [pc, #20]	; (81f8 <z_unpend_thread_no_timeout+0x78>)
    81e2:	21b9      	movs	r1, #185	; 0xb9
    81e4:	f002 fe9f 	bl	af26 <assert_post_action>
	__asm__ volatile(
    81e8:	f385 8811 	msr	BASEPRI, r5
    81ec:	f3bf 8f6f 	isb	sy
	}
}
    81f0:	bd38      	pop	{r3, r4, r5, pc}
    81f2:	bf00      	nop
    81f4:	20000f58 	.word	0x20000f58
    81f8:	0000cad0 	.word	0x0000cad0
    81fc:	0000cb29 	.word	0x0000cb29
    8200:	0000c986 	.word	0x0000c986
    8204:	0000cb3e 	.word	0x0000cb3e
    8208:	0000cafd 	.word	0x0000cafd
    820c:	0000cb14 	.word	0x0000cb14

00008210 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8210:	b538      	push	{r3, r4, r5, lr}
    8212:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8214:	460d      	mov	r5, r1
    8216:	b9e9      	cbnz	r1, 8254 <z_reschedule+0x44>
    8218:	f3ef 8305 	mrs	r3, IPSR
    821c:	b9d3      	cbnz	r3, 8254 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    821e:	4b19      	ldr	r3, [pc, #100]	; (8284 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    8220:	69da      	ldr	r2, [r3, #28]
    8222:	689b      	ldr	r3, [r3, #8]
    8224:	429a      	cmp	r2, r3
    8226:	d015      	beq.n	8254 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8228:	f7ff fb94 	bl	7954 <z_spin_unlock_valid>
    822c:	b968      	cbnz	r0, 824a <z_reschedule+0x3a>
    822e:	4a16      	ldr	r2, [pc, #88]	; (8288 <z_reschedule+0x78>)
    8230:	4916      	ldr	r1, [pc, #88]	; (828c <z_reschedule+0x7c>)
    8232:	4817      	ldr	r0, [pc, #92]	; (8290 <z_reschedule+0x80>)
    8234:	23d0      	movs	r3, #208	; 0xd0
    8236:	f002 fe7d 	bl	af34 <assert_print>
    823a:	4816      	ldr	r0, [pc, #88]	; (8294 <z_reschedule+0x84>)
    823c:	4621      	mov	r1, r4
    823e:	f002 fe79 	bl	af34 <assert_print>
    8242:	4811      	ldr	r0, [pc, #68]	; (8288 <z_reschedule+0x78>)
    8244:	21d0      	movs	r1, #208	; 0xd0
    8246:	f002 fe6e 	bl	af26 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    824a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    824e:	2000      	movs	r0, #0
    8250:	f7fb be02 	b.w	3e58 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8254:	4620      	mov	r0, r4
    8256:	f7ff fb7d 	bl	7954 <z_spin_unlock_valid>
    825a:	b968      	cbnz	r0, 8278 <z_reschedule+0x68>
    825c:	4a0a      	ldr	r2, [pc, #40]	; (8288 <z_reschedule+0x78>)
    825e:	490b      	ldr	r1, [pc, #44]	; (828c <z_reschedule+0x7c>)
    8260:	480b      	ldr	r0, [pc, #44]	; (8290 <z_reschedule+0x80>)
    8262:	23b9      	movs	r3, #185	; 0xb9
    8264:	f002 fe66 	bl	af34 <assert_print>
    8268:	480a      	ldr	r0, [pc, #40]	; (8294 <z_reschedule+0x84>)
    826a:	4621      	mov	r1, r4
    826c:	f002 fe62 	bl	af34 <assert_print>
    8270:	4805      	ldr	r0, [pc, #20]	; (8288 <z_reschedule+0x78>)
    8272:	21b9      	movs	r1, #185	; 0xb9
    8274:	f002 fe57 	bl	af26 <assert_post_action>
    8278:	f385 8811 	msr	BASEPRI, r5
    827c:	f3bf 8f6f 	isb	sy
    8280:	bd38      	pop	{r3, r4, r5, pc}
    8282:	bf00      	nop
    8284:	20000f1c 	.word	0x20000f1c
    8288:	0000cad0 	.word	0x0000cad0
    828c:	0000cafd 	.word	0x0000cafd
    8290:	0000c986 	.word	0x0000c986
    8294:	0000cb14 	.word	0x0000cb14

00008298 <z_sched_start>:
{
    8298:	b538      	push	{r3, r4, r5, lr}
    829a:	4604      	mov	r4, r0
	__asm__ volatile(
    829c:	f04f 0320 	mov.w	r3, #32
    82a0:	f3ef 8511 	mrs	r5, BASEPRI
    82a4:	f383 8812 	msr	BASEPRI_MAX, r3
    82a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82ac:	481d      	ldr	r0, [pc, #116]	; (8324 <z_sched_start+0x8c>)
    82ae:	f7ff fb43 	bl	7938 <z_spin_lock_valid>
    82b2:	b968      	cbnz	r0, 82d0 <z_sched_start+0x38>
    82b4:	4a1c      	ldr	r2, [pc, #112]	; (8328 <z_sched_start+0x90>)
    82b6:	491d      	ldr	r1, [pc, #116]	; (832c <z_sched_start+0x94>)
    82b8:	481d      	ldr	r0, [pc, #116]	; (8330 <z_sched_start+0x98>)
    82ba:	238e      	movs	r3, #142	; 0x8e
    82bc:	f002 fe3a 	bl	af34 <assert_print>
    82c0:	4918      	ldr	r1, [pc, #96]	; (8324 <z_sched_start+0x8c>)
    82c2:	481c      	ldr	r0, [pc, #112]	; (8334 <z_sched_start+0x9c>)
    82c4:	f002 fe36 	bl	af34 <assert_print>
    82c8:	4817      	ldr	r0, [pc, #92]	; (8328 <z_sched_start+0x90>)
    82ca:	218e      	movs	r1, #142	; 0x8e
    82cc:	f002 fe2b 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    82d0:	4814      	ldr	r0, [pc, #80]	; (8324 <z_sched_start+0x8c>)
    82d2:	f7ff fb4f 	bl	7974 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    82d6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    82d8:	075a      	lsls	r2, r3, #29
    82da:	d416      	bmi.n	830a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82dc:	4811      	ldr	r0, [pc, #68]	; (8324 <z_sched_start+0x8c>)
    82de:	f7ff fb39 	bl	7954 <z_spin_unlock_valid>
    82e2:	b968      	cbnz	r0, 8300 <z_sched_start+0x68>
    82e4:	4a10      	ldr	r2, [pc, #64]	; (8328 <z_sched_start+0x90>)
    82e6:	4914      	ldr	r1, [pc, #80]	; (8338 <z_sched_start+0xa0>)
    82e8:	4811      	ldr	r0, [pc, #68]	; (8330 <z_sched_start+0x98>)
    82ea:	23b9      	movs	r3, #185	; 0xb9
    82ec:	f002 fe22 	bl	af34 <assert_print>
    82f0:	490c      	ldr	r1, [pc, #48]	; (8324 <z_sched_start+0x8c>)
    82f2:	4812      	ldr	r0, [pc, #72]	; (833c <z_sched_start+0xa4>)
    82f4:	f002 fe1e 	bl	af34 <assert_print>
    82f8:	480b      	ldr	r0, [pc, #44]	; (8328 <z_sched_start+0x90>)
    82fa:	21b9      	movs	r1, #185	; 0xb9
    82fc:	f002 fe13 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8300:	f385 8811 	msr	BASEPRI, r5
    8304:	f3bf 8f6f 	isb	sy
}
    8308:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    830a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    830e:	4620      	mov	r0, r4
    8310:	7363      	strb	r3, [r4, #13]
    8312:	f7ff fe3b 	bl	7f8c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8316:	4629      	mov	r1, r5
    8318:	4802      	ldr	r0, [pc, #8]	; (8324 <z_sched_start+0x8c>)
}
    831a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    831e:	f7ff bf77 	b.w	8210 <z_reschedule>
    8322:	bf00      	nop
    8324:	20000f58 	.word	0x20000f58
    8328:	0000cad0 	.word	0x0000cad0
    832c:	0000cb29 	.word	0x0000cb29
    8330:	0000c986 	.word	0x0000c986
    8334:	0000cb3e 	.word	0x0000cb3e
    8338:	0000cafd 	.word	0x0000cafd
    833c:	0000cb14 	.word	0x0000cb14

00008340 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8340:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8342:	f04f 0320 	mov.w	r3, #32
    8346:	f3ef 8511 	mrs	r5, BASEPRI
    834a:	f383 8812 	msr	BASEPRI_MAX, r3
    834e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8352:	4829      	ldr	r0, [pc, #164]	; (83f8 <k_sched_lock+0xb8>)
    8354:	f7ff faf0 	bl	7938 <z_spin_lock_valid>
    8358:	b968      	cbnz	r0, 8376 <k_sched_lock+0x36>
    835a:	4a28      	ldr	r2, [pc, #160]	; (83fc <k_sched_lock+0xbc>)
    835c:	4928      	ldr	r1, [pc, #160]	; (8400 <k_sched_lock+0xc0>)
    835e:	4829      	ldr	r0, [pc, #164]	; (8404 <k_sched_lock+0xc4>)
    8360:	238e      	movs	r3, #142	; 0x8e
    8362:	f002 fde7 	bl	af34 <assert_print>
    8366:	4924      	ldr	r1, [pc, #144]	; (83f8 <k_sched_lock+0xb8>)
    8368:	4827      	ldr	r0, [pc, #156]	; (8408 <k_sched_lock+0xc8>)
    836a:	f002 fde3 	bl	af34 <assert_print>
    836e:	4823      	ldr	r0, [pc, #140]	; (83fc <k_sched_lock+0xbc>)
    8370:	218e      	movs	r1, #142	; 0x8e
    8372:	f002 fdd8 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8376:	4820      	ldr	r0, [pc, #128]	; (83f8 <k_sched_lock+0xb8>)
    8378:	f7ff fafc 	bl	7974 <z_spin_lock_set_owner>
    837c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8380:	b163      	cbz	r3, 839c <k_sched_lock+0x5c>
    8382:	4922      	ldr	r1, [pc, #136]	; (840c <k_sched_lock+0xcc>)
    8384:	4a22      	ldr	r2, [pc, #136]	; (8410 <k_sched_lock+0xd0>)
    8386:	481f      	ldr	r0, [pc, #124]	; (8404 <k_sched_lock+0xc4>)
    8388:	23fd      	movs	r3, #253	; 0xfd
    838a:	f002 fdd3 	bl	af34 <assert_print>
    838e:	4821      	ldr	r0, [pc, #132]	; (8414 <k_sched_lock+0xd4>)
    8390:	f002 fdd0 	bl	af34 <assert_print>
    8394:	481e      	ldr	r0, [pc, #120]	; (8410 <k_sched_lock+0xd0>)
    8396:	21fd      	movs	r1, #253	; 0xfd
    8398:	f002 fdc5 	bl	af26 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    839c:	4c1e      	ldr	r4, [pc, #120]	; (8418 <k_sched_lock+0xd8>)
    839e:	68a3      	ldr	r3, [r4, #8]
    83a0:	7bdb      	ldrb	r3, [r3, #15]
    83a2:	2b01      	cmp	r3, #1
    83a4:	d10c      	bne.n	83c0 <k_sched_lock+0x80>
    83a6:	491d      	ldr	r1, [pc, #116]	; (841c <k_sched_lock+0xdc>)
    83a8:	4a19      	ldr	r2, [pc, #100]	; (8410 <k_sched_lock+0xd0>)
    83aa:	4816      	ldr	r0, [pc, #88]	; (8404 <k_sched_lock+0xc4>)
    83ac:	23fe      	movs	r3, #254	; 0xfe
    83ae:	f002 fdc1 	bl	af34 <assert_print>
    83b2:	4818      	ldr	r0, [pc, #96]	; (8414 <k_sched_lock+0xd4>)
    83b4:	f002 fdbe 	bl	af34 <assert_print>
    83b8:	4815      	ldr	r0, [pc, #84]	; (8410 <k_sched_lock+0xd0>)
    83ba:	21fe      	movs	r1, #254	; 0xfe
    83bc:	f002 fdb3 	bl	af26 <assert_post_action>
	--_current->base.sched_locked;
    83c0:	68a2      	ldr	r2, [r4, #8]
    83c2:	7bd3      	ldrb	r3, [r2, #15]
    83c4:	3b01      	subs	r3, #1
    83c6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83c8:	480b      	ldr	r0, [pc, #44]	; (83f8 <k_sched_lock+0xb8>)
    83ca:	f7ff fac3 	bl	7954 <z_spin_unlock_valid>
    83ce:	b968      	cbnz	r0, 83ec <k_sched_lock+0xac>
    83d0:	4a0a      	ldr	r2, [pc, #40]	; (83fc <k_sched_lock+0xbc>)
    83d2:	4913      	ldr	r1, [pc, #76]	; (8420 <k_sched_lock+0xe0>)
    83d4:	480b      	ldr	r0, [pc, #44]	; (8404 <k_sched_lock+0xc4>)
    83d6:	23b9      	movs	r3, #185	; 0xb9
    83d8:	f002 fdac 	bl	af34 <assert_print>
    83dc:	4906      	ldr	r1, [pc, #24]	; (83f8 <k_sched_lock+0xb8>)
    83de:	4811      	ldr	r0, [pc, #68]	; (8424 <k_sched_lock+0xe4>)
    83e0:	f002 fda8 	bl	af34 <assert_print>
    83e4:	4805      	ldr	r0, [pc, #20]	; (83fc <k_sched_lock+0xbc>)
    83e6:	21b9      	movs	r1, #185	; 0xb9
    83e8:	f002 fd9d 	bl	af26 <assert_post_action>
	__asm__ volatile(
    83ec:	f385 8811 	msr	BASEPRI, r5
    83f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    83f4:	bd38      	pop	{r3, r4, r5, pc}
    83f6:	bf00      	nop
    83f8:	20000f58 	.word	0x20000f58
    83fc:	0000cad0 	.word	0x0000cad0
    8400:	0000cb29 	.word	0x0000cb29
    8404:	0000c986 	.word	0x0000c986
    8408:	0000cb3e 	.word	0x0000cb3e
    840c:	0000dee8 	.word	0x0000dee8
    8410:	0000dff3 	.word	0x0000dff3
    8414:	0000e01e 	.word	0x0000e01e
    8418:	20000f1c 	.word	0x20000f1c
    841c:	0000e021 	.word	0x0000e021
    8420:	0000cafd 	.word	0x0000cafd
    8424:	0000cb14 	.word	0x0000cb14

00008428 <k_sched_unlock>:

void k_sched_unlock(void)
{
    8428:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    842a:	f04f 0320 	mov.w	r3, #32
    842e:	f3ef 8511 	mrs	r5, BASEPRI
    8432:	f383 8812 	msr	BASEPRI_MAX, r3
    8436:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    843a:	482d      	ldr	r0, [pc, #180]	; (84f0 <k_sched_unlock+0xc8>)
    843c:	f7ff fa7c 	bl	7938 <z_spin_lock_valid>
    8440:	b968      	cbnz	r0, 845e <k_sched_unlock+0x36>
    8442:	4a2c      	ldr	r2, [pc, #176]	; (84f4 <k_sched_unlock+0xcc>)
    8444:	492c      	ldr	r1, [pc, #176]	; (84f8 <k_sched_unlock+0xd0>)
    8446:	482d      	ldr	r0, [pc, #180]	; (84fc <k_sched_unlock+0xd4>)
    8448:	238e      	movs	r3, #142	; 0x8e
    844a:	f002 fd73 	bl	af34 <assert_print>
    844e:	4928      	ldr	r1, [pc, #160]	; (84f0 <k_sched_unlock+0xc8>)
    8450:	482b      	ldr	r0, [pc, #172]	; (8500 <k_sched_unlock+0xd8>)
    8452:	f002 fd6f 	bl	af34 <assert_print>
    8456:	4827      	ldr	r0, [pc, #156]	; (84f4 <k_sched_unlock+0xcc>)
    8458:	218e      	movs	r1, #142	; 0x8e
    845a:	f002 fd64 	bl	af26 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    845e:	4c29      	ldr	r4, [pc, #164]	; (8504 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    8460:	4823      	ldr	r0, [pc, #140]	; (84f0 <k_sched_unlock+0xc8>)
    8462:	f7ff fa87 	bl	7974 <z_spin_lock_set_owner>
    8466:	68a3      	ldr	r3, [r4, #8]
    8468:	7bdb      	ldrb	r3, [r3, #15]
    846a:	b973      	cbnz	r3, 848a <k_sched_unlock+0x62>
    846c:	4926      	ldr	r1, [pc, #152]	; (8508 <k_sched_unlock+0xe0>)
    846e:	4a27      	ldr	r2, [pc, #156]	; (850c <k_sched_unlock+0xe4>)
    8470:	4822      	ldr	r0, [pc, #136]	; (84fc <k_sched_unlock+0xd4>)
    8472:	f240 33bb 	movw	r3, #955	; 0x3bb
    8476:	f002 fd5d 	bl	af34 <assert_print>
    847a:	4825      	ldr	r0, [pc, #148]	; (8510 <k_sched_unlock+0xe8>)
    847c:	f002 fd5a 	bl	af34 <assert_print>
    8480:	4822      	ldr	r0, [pc, #136]	; (850c <k_sched_unlock+0xe4>)
    8482:	f240 31bb 	movw	r1, #955	; 0x3bb
    8486:	f002 fd4e 	bl	af26 <assert_post_action>
    848a:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    848e:	b173      	cbz	r3, 84ae <k_sched_unlock+0x86>
    8490:	4920      	ldr	r1, [pc, #128]	; (8514 <k_sched_unlock+0xec>)
    8492:	4a1e      	ldr	r2, [pc, #120]	; (850c <k_sched_unlock+0xe4>)
    8494:	4819      	ldr	r0, [pc, #100]	; (84fc <k_sched_unlock+0xd4>)
    8496:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    849a:	f002 fd4b 	bl	af34 <assert_print>
    849e:	481c      	ldr	r0, [pc, #112]	; (8510 <k_sched_unlock+0xe8>)
    84a0:	f002 fd48 	bl	af34 <assert_print>
    84a4:	4819      	ldr	r0, [pc, #100]	; (850c <k_sched_unlock+0xe4>)
    84a6:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    84aa:	f002 fd3c 	bl	af26 <assert_post_action>

		++_current->base.sched_locked;
    84ae:	68a2      	ldr	r2, [r4, #8]
    84b0:	7bd3      	ldrb	r3, [r2, #15]
    84b2:	3301      	adds	r3, #1
		update_cache(0);
    84b4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    84b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    84b8:	f7ff fd30 	bl	7f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    84bc:	480c      	ldr	r0, [pc, #48]	; (84f0 <k_sched_unlock+0xc8>)
    84be:	f7ff fa49 	bl	7954 <z_spin_unlock_valid>
    84c2:	b968      	cbnz	r0, 84e0 <k_sched_unlock+0xb8>
    84c4:	4a0b      	ldr	r2, [pc, #44]	; (84f4 <k_sched_unlock+0xcc>)
    84c6:	4914      	ldr	r1, [pc, #80]	; (8518 <k_sched_unlock+0xf0>)
    84c8:	480c      	ldr	r0, [pc, #48]	; (84fc <k_sched_unlock+0xd4>)
    84ca:	23b9      	movs	r3, #185	; 0xb9
    84cc:	f002 fd32 	bl	af34 <assert_print>
    84d0:	4907      	ldr	r1, [pc, #28]	; (84f0 <k_sched_unlock+0xc8>)
    84d2:	4812      	ldr	r0, [pc, #72]	; (851c <k_sched_unlock+0xf4>)
    84d4:	f002 fd2e 	bl	af34 <assert_print>
    84d8:	4806      	ldr	r0, [pc, #24]	; (84f4 <k_sched_unlock+0xcc>)
    84da:	21b9      	movs	r1, #185	; 0xb9
    84dc:	f002 fd23 	bl	af26 <assert_post_action>
	__asm__ volatile(
    84e0:	f385 8811 	msr	BASEPRI, r5
    84e4:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    84e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    84ec:	f003 ba89 	b.w	ba02 <z_reschedule_unlocked>
    84f0:	20000f58 	.word	0x20000f58
    84f4:	0000cad0 	.word	0x0000cad0
    84f8:	0000cb29 	.word	0x0000cb29
    84fc:	0000c986 	.word	0x0000c986
    8500:	0000cb3e 	.word	0x0000cb3e
    8504:	20000f1c 	.word	0x20000f1c
    8508:	0000e12a 	.word	0x0000e12a
    850c:	0000e0c0 	.word	0x0000e0c0
    8510:	0000e01e 	.word	0x0000e01e
    8514:	0000dee8 	.word	0x0000dee8
    8518:	0000cafd 	.word	0x0000cafd
    851c:	0000cb14 	.word	0x0000cb14

00008520 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8520:	4b0c      	ldr	r3, [pc, #48]	; (8554 <z_priq_dumb_remove+0x34>)
    8522:	4299      	cmp	r1, r3
{
    8524:	b510      	push	{r4, lr}
    8526:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8528:	d10b      	bne.n	8542 <z_priq_dumb_remove+0x22>
    852a:	490b      	ldr	r1, [pc, #44]	; (8558 <z_priq_dumb_remove+0x38>)
    852c:	480b      	ldr	r0, [pc, #44]	; (855c <z_priq_dumb_remove+0x3c>)
    852e:	4a0c      	ldr	r2, [pc, #48]	; (8560 <z_priq_dumb_remove+0x40>)
    8530:	f240 433d 	movw	r3, #1085	; 0x43d
    8534:	f002 fcfe 	bl	af34 <assert_print>
    8538:	4809      	ldr	r0, [pc, #36]	; (8560 <z_priq_dumb_remove+0x40>)
    853a:	f240 413d 	movw	r1, #1085	; 0x43d
    853e:	f002 fcf2 	bl	af26 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8542:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    8546:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8548:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    854a:	2300      	movs	r3, #0
	node->prev = NULL;
    854c:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8550:	bd10      	pop	{r4, pc}
    8552:	bf00      	nop
    8554:	200006c0 	.word	0x200006c0
    8558:	0000e109 	.word	0x0000e109
    855c:	0000c986 	.word	0x0000c986
    8560:	0000e0c0 	.word	0x0000e0c0

00008564 <move_thread_to_end_of_prio_q>:
{
    8564:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    8566:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    856a:	7b43      	ldrb	r3, [r0, #13]
    856c:	2a00      	cmp	r2, #0
{
    856e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8570:	da06      	bge.n	8580 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8576:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8578:	4601      	mov	r1, r0
    857a:	481d      	ldr	r0, [pc, #116]	; (85f0 <move_thread_to_end_of_prio_q+0x8c>)
    857c:	f7ff ffd0 	bl	8520 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8580:	7b63      	ldrb	r3, [r4, #13]
    8582:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8586:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8588:	4b1a      	ldr	r3, [pc, #104]	; (85f4 <move_thread_to_end_of_prio_q+0x90>)
    858a:	429c      	cmp	r4, r3
    858c:	d109      	bne.n	85a2 <move_thread_to_end_of_prio_q+0x3e>
    858e:	491a      	ldr	r1, [pc, #104]	; (85f8 <move_thread_to_end_of_prio_q+0x94>)
    8590:	481a      	ldr	r0, [pc, #104]	; (85fc <move_thread_to_end_of_prio_q+0x98>)
    8592:	4a1b      	ldr	r2, [pc, #108]	; (8600 <move_thread_to_end_of_prio_q+0x9c>)
    8594:	23ba      	movs	r3, #186	; 0xba
    8596:	f002 fccd 	bl	af34 <assert_print>
    859a:	4819      	ldr	r0, [pc, #100]	; (8600 <move_thread_to_end_of_prio_q+0x9c>)
    859c:	21ba      	movs	r1, #186	; 0xba
    859e:	f002 fcc2 	bl	af26 <assert_post_action>
	return list->head == list;
    85a2:	4a18      	ldr	r2, [pc, #96]	; (8604 <move_thread_to_end_of_prio_q+0xa0>)
    85a4:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    85a6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    85a8:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85ac:	428b      	cmp	r3, r1
    85ae:	bf08      	it	eq
    85b0:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    85b2:	b923      	cbnz	r3, 85be <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    85b4:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    85b8:	6004      	str	r4, [r0, #0]
	list->tail = node;
    85ba:	6254      	str	r4, [r2, #36]	; 0x24
}
    85bc:	e00c      	b.n	85d8 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    85be:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    85c2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    85c6:	42b5      	cmp	r5, r6
    85c8:	d00e      	beq.n	85e8 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    85ca:	42ae      	cmp	r6, r5
    85cc:	dd0c      	ble.n	85e8 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    85ce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    85d0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    85d4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    85d6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    85d8:	6890      	ldr	r0, [r2, #8]
    85da:	1b03      	subs	r3, r0, r4
    85dc:	4258      	negs	r0, r3
}
    85de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    85e2:	4158      	adcs	r0, r3
    85e4:	f7ff bc9a 	b.w	7f1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    85e8:	4298      	cmp	r0, r3
    85ea:	d0e3      	beq.n	85b4 <move_thread_to_end_of_prio_q+0x50>
    85ec:	681b      	ldr	r3, [r3, #0]
    85ee:	e7e0      	b.n	85b2 <move_thread_to_end_of_prio_q+0x4e>
    85f0:	20000f3c 	.word	0x20000f3c
    85f4:	200006c0 	.word	0x200006c0
    85f8:	0000e109 	.word	0x0000e109
    85fc:	0000c986 	.word	0x0000c986
    8600:	0000e0c0 	.word	0x0000e0c0
    8604:	20000f1c 	.word	0x20000f1c

00008608 <z_time_slice>:
{
    8608:	b570      	push	{r4, r5, r6, lr}
    860a:	4605      	mov	r5, r0
	__asm__ volatile(
    860c:	f04f 0320 	mov.w	r3, #32
    8610:	f3ef 8611 	mrs	r6, BASEPRI
    8614:	f383 8812 	msr	BASEPRI_MAX, r3
    8618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    861c:	482a      	ldr	r0, [pc, #168]	; (86c8 <z_time_slice+0xc0>)
    861e:	f7ff f98b 	bl	7938 <z_spin_lock_valid>
    8622:	b968      	cbnz	r0, 8640 <z_time_slice+0x38>
    8624:	4a29      	ldr	r2, [pc, #164]	; (86cc <z_time_slice+0xc4>)
    8626:	492a      	ldr	r1, [pc, #168]	; (86d0 <z_time_slice+0xc8>)
    8628:	482a      	ldr	r0, [pc, #168]	; (86d4 <z_time_slice+0xcc>)
    862a:	238e      	movs	r3, #142	; 0x8e
    862c:	f002 fc82 	bl	af34 <assert_print>
    8630:	4925      	ldr	r1, [pc, #148]	; (86c8 <z_time_slice+0xc0>)
    8632:	4829      	ldr	r0, [pc, #164]	; (86d8 <z_time_slice+0xd0>)
    8634:	f002 fc7e 	bl	af34 <assert_print>
    8638:	4824      	ldr	r0, [pc, #144]	; (86cc <z_time_slice+0xc4>)
    863a:	218e      	movs	r1, #142	; 0x8e
    863c:	f002 fc73 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8640:	4821      	ldr	r0, [pc, #132]	; (86c8 <z_time_slice+0xc0>)
    8642:	f7ff f997 	bl	7974 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    8646:	4b25      	ldr	r3, [pc, #148]	; (86dc <z_time_slice+0xd4>)
    8648:	4a25      	ldr	r2, [pc, #148]	; (86e0 <z_time_slice+0xd8>)
    864a:	689c      	ldr	r4, [r3, #8]
    864c:	6811      	ldr	r1, [r2, #0]
    864e:	428c      	cmp	r4, r1
    8650:	d119      	bne.n	8686 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    8652:	4620      	mov	r0, r4
    8654:	f7ff fc4e 	bl	7ef4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8658:	481b      	ldr	r0, [pc, #108]	; (86c8 <z_time_slice+0xc0>)
    865a:	f7ff f97b 	bl	7954 <z_spin_unlock_valid>
    865e:	b968      	cbnz	r0, 867c <z_time_slice+0x74>
    8660:	4a1a      	ldr	r2, [pc, #104]	; (86cc <z_time_slice+0xc4>)
    8662:	4920      	ldr	r1, [pc, #128]	; (86e4 <z_time_slice+0xdc>)
    8664:	481b      	ldr	r0, [pc, #108]	; (86d4 <z_time_slice+0xcc>)
    8666:	23b9      	movs	r3, #185	; 0xb9
    8668:	f002 fc64 	bl	af34 <assert_print>
    866c:	4916      	ldr	r1, [pc, #88]	; (86c8 <z_time_slice+0xc0>)
    866e:	481e      	ldr	r0, [pc, #120]	; (86e8 <z_time_slice+0xe0>)
    8670:	f002 fc60 	bl	af34 <assert_print>
    8674:	4815      	ldr	r0, [pc, #84]	; (86cc <z_time_slice+0xc4>)
    8676:	21b9      	movs	r1, #185	; 0xb9
    8678:	f002 fc55 	bl	af26 <assert_post_action>
	__asm__ volatile(
    867c:	f386 8811 	msr	BASEPRI, r6
    8680:	f3bf 8f6f 	isb	sy
}
    8684:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    8686:	2100      	movs	r1, #0
    8688:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    868a:	4a18      	ldr	r2, [pc, #96]	; (86ec <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    868c:	6812      	ldr	r2, [r2, #0]
    868e:	b1c2      	cbz	r2, 86c2 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    8690:	89e2      	ldrh	r2, [r4, #14]
    8692:	2a7f      	cmp	r2, #127	; 0x7f
    8694:	d815      	bhi.n	86c2 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    8696:	7b62      	ldrb	r2, [r4, #13]
    8698:	06d2      	lsls	r2, r2, #27
    869a:	d112      	bne.n	86c2 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    869c:	4a14      	ldr	r2, [pc, #80]	; (86f0 <z_time_slice+0xe8>)
    869e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    86a2:	6812      	ldr	r2, [r2, #0]
    86a4:	4291      	cmp	r1, r2
    86a6:	db0c      	blt.n	86c2 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    86a8:	4a12      	ldr	r2, [pc, #72]	; (86f4 <z_time_slice+0xec>)
    86aa:	4294      	cmp	r4, r2
    86ac:	d009      	beq.n	86c2 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    86ae:	691a      	ldr	r2, [r3, #16]
    86b0:	42aa      	cmp	r2, r5
    86b2:	dc03      	bgt.n	86bc <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    86b4:	4620      	mov	r0, r4
    86b6:	f7ff ff55 	bl	8564 <move_thread_to_end_of_prio_q>
    86ba:	e7ca      	b.n	8652 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    86bc:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    86be:	611a      	str	r2, [r3, #16]
    86c0:	e7ca      	b.n	8658 <z_time_slice+0x50>
    86c2:	2200      	movs	r2, #0
    86c4:	e7fb      	b.n	86be <z_time_slice+0xb6>
    86c6:	bf00      	nop
    86c8:	20000f58 	.word	0x20000f58
    86cc:	0000cad0 	.word	0x0000cad0
    86d0:	0000cb29 	.word	0x0000cb29
    86d4:	0000c986 	.word	0x0000c986
    86d8:	0000cb3e 	.word	0x0000cb3e
    86dc:	20000f1c 	.word	0x20000f1c
    86e0:	20000f4c 	.word	0x20000f4c
    86e4:	0000cafd 	.word	0x0000cafd
    86e8:	0000cb14 	.word	0x0000cb14
    86ec:	20000f54 	.word	0x20000f54
    86f0:	20000f50 	.word	0x20000f50
    86f4:	200006c0 	.word	0x200006c0

000086f8 <unready_thread>:
{
    86f8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    86fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
    86fe:	7b43      	ldrb	r3, [r0, #13]
    8700:	2a00      	cmp	r2, #0
{
    8702:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8704:	da06      	bge.n	8714 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    870a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    870c:	4601      	mov	r1, r0
    870e:	4806      	ldr	r0, [pc, #24]	; (8728 <unready_thread+0x30>)
    8710:	f7ff ff06 	bl	8520 <z_priq_dumb_remove>
	update_cache(thread == _current);
    8714:	4b05      	ldr	r3, [pc, #20]	; (872c <unready_thread+0x34>)
    8716:	6898      	ldr	r0, [r3, #8]
    8718:	1b03      	subs	r3, r0, r4
    871a:	4258      	negs	r0, r3
}
    871c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    8720:	4158      	adcs	r0, r3
    8722:	f7ff bbfb 	b.w	7f1c <update_cache>
    8726:	bf00      	nop
    8728:	20000f3c 	.word	0x20000f3c
    872c:	20000f1c 	.word	0x20000f1c

00008730 <add_to_waitq_locked>:
{
    8730:	b538      	push	{r3, r4, r5, lr}
    8732:	4604      	mov	r4, r0
    8734:	460d      	mov	r5, r1
	unready_thread(thread);
    8736:	f7ff ffdf 	bl	86f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    873a:	7b63      	ldrb	r3, [r4, #13]
    873c:	f043 0302 	orr.w	r3, r3, #2
    8740:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8742:	b34d      	cbz	r5, 8798 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8744:	4b15      	ldr	r3, [pc, #84]	; (879c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    8746:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8748:	429c      	cmp	r4, r3
    874a:	d109      	bne.n	8760 <add_to_waitq_locked+0x30>
    874c:	4914      	ldr	r1, [pc, #80]	; (87a0 <add_to_waitq_locked+0x70>)
    874e:	4815      	ldr	r0, [pc, #84]	; (87a4 <add_to_waitq_locked+0x74>)
    8750:	4a15      	ldr	r2, [pc, #84]	; (87a8 <add_to_waitq_locked+0x78>)
    8752:	23ba      	movs	r3, #186	; 0xba
    8754:	f002 fbee 	bl	af34 <assert_print>
    8758:	4813      	ldr	r0, [pc, #76]	; (87a8 <add_to_waitq_locked+0x78>)
    875a:	21ba      	movs	r1, #186	; 0xba
    875c:	f002 fbe3 	bl	af26 <assert_post_action>
	return list->head == list;
    8760:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8762:	429d      	cmp	r5, r3
    8764:	d109      	bne.n	877a <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    8766:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8768:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    876c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    876e:	606c      	str	r4, [r5, #4]
}
    8770:	e012      	b.n	8798 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    8772:	686a      	ldr	r2, [r5, #4]
    8774:	4293      	cmp	r3, r2
    8776:	d0f6      	beq.n	8766 <add_to_waitq_locked+0x36>
    8778:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    877a:	2b00      	cmp	r3, #0
    877c:	d0f3      	beq.n	8766 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    877e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8782:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    8786:	428a      	cmp	r2, r1
    8788:	d0f3      	beq.n	8772 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    878a:	4291      	cmp	r1, r2
    878c:	ddf1      	ble.n	8772 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    878e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8790:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8794:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8796:	605c      	str	r4, [r3, #4]
}
    8798:	bd38      	pop	{r3, r4, r5, pc}
    879a:	bf00      	nop
    879c:	200006c0 	.word	0x200006c0
    87a0:	0000e109 	.word	0x0000e109
    87a4:	0000c986 	.word	0x0000c986
    87a8:	0000e0c0 	.word	0x0000e0c0

000087ac <pend>:
{
    87ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87b0:	4604      	mov	r4, r0
    87b2:	4688      	mov	r8, r1
    87b4:	4616      	mov	r6, r2
    87b6:	461d      	mov	r5, r3
	__asm__ volatile(
    87b8:	f04f 0320 	mov.w	r3, #32
    87bc:	f3ef 8711 	mrs	r7, BASEPRI
    87c0:	f383 8812 	msr	BASEPRI_MAX, r3
    87c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87c8:	481f      	ldr	r0, [pc, #124]	; (8848 <pend+0x9c>)
    87ca:	f7ff f8b5 	bl	7938 <z_spin_lock_valid>
    87ce:	b968      	cbnz	r0, 87ec <pend+0x40>
    87d0:	4a1e      	ldr	r2, [pc, #120]	; (884c <pend+0xa0>)
    87d2:	491f      	ldr	r1, [pc, #124]	; (8850 <pend+0xa4>)
    87d4:	481f      	ldr	r0, [pc, #124]	; (8854 <pend+0xa8>)
    87d6:	238e      	movs	r3, #142	; 0x8e
    87d8:	f002 fbac 	bl	af34 <assert_print>
    87dc:	491a      	ldr	r1, [pc, #104]	; (8848 <pend+0x9c>)
    87de:	481e      	ldr	r0, [pc, #120]	; (8858 <pend+0xac>)
    87e0:	f002 fba8 	bl	af34 <assert_print>
    87e4:	4819      	ldr	r0, [pc, #100]	; (884c <pend+0xa0>)
    87e6:	218e      	movs	r1, #142	; 0x8e
    87e8:	f002 fb9d 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    87ec:	4816      	ldr	r0, [pc, #88]	; (8848 <pend+0x9c>)
    87ee:	f7ff f8c1 	bl	7974 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    87f2:	4620      	mov	r0, r4
    87f4:	4641      	mov	r1, r8
    87f6:	f7ff ff9b 	bl	8730 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    87fa:	4813      	ldr	r0, [pc, #76]	; (8848 <pend+0x9c>)
    87fc:	f7ff f8aa 	bl	7954 <z_spin_unlock_valid>
    8800:	b968      	cbnz	r0, 881e <pend+0x72>
    8802:	4a12      	ldr	r2, [pc, #72]	; (884c <pend+0xa0>)
    8804:	4915      	ldr	r1, [pc, #84]	; (885c <pend+0xb0>)
    8806:	4813      	ldr	r0, [pc, #76]	; (8854 <pend+0xa8>)
    8808:	23b9      	movs	r3, #185	; 0xb9
    880a:	f002 fb93 	bl	af34 <assert_print>
    880e:	490e      	ldr	r1, [pc, #56]	; (8848 <pend+0x9c>)
    8810:	4813      	ldr	r0, [pc, #76]	; (8860 <pend+0xb4>)
    8812:	f002 fb8f 	bl	af34 <assert_print>
    8816:	480d      	ldr	r0, [pc, #52]	; (884c <pend+0xa0>)
    8818:	21b9      	movs	r1, #185	; 0xb9
    881a:	f002 fb84 	bl	af26 <assert_post_action>
	__asm__ volatile(
    881e:	f387 8811 	msr	BASEPRI, r7
    8822:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8826:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    882a:	bf08      	it	eq
    882c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8830:	d008      	beq.n	8844 <pend+0x98>
    8832:	4632      	mov	r2, r6
    8834:	462b      	mov	r3, r5
    8836:	f104 0018 	add.w	r0, r4, #24
    883a:	490a      	ldr	r1, [pc, #40]	; (8864 <pend+0xb8>)
}
    883c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8840:	f000 bd22 	b.w	9288 <z_add_timeout>
    8844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8848:	20000f58 	.word	0x20000f58
    884c:	0000cad0 	.word	0x0000cad0
    8850:	0000cb29 	.word	0x0000cb29
    8854:	0000c986 	.word	0x0000c986
    8858:	0000cb3e 	.word	0x0000cb3e
    885c:	0000cafd 	.word	0x0000cafd
    8860:	0000cb14 	.word	0x0000cb14
    8864:	00008b0d 	.word	0x00008b0d

00008868 <z_pend_curr>:
{
    8868:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    886a:	4b11      	ldr	r3, [pc, #68]	; (88b0 <z_pend_curr+0x48>)
{
    886c:	4604      	mov	r4, r0
	pending_current = _current;
    886e:	6898      	ldr	r0, [r3, #8]
    8870:	4b10      	ldr	r3, [pc, #64]	; (88b4 <z_pend_curr+0x4c>)
{
    8872:	460d      	mov	r5, r1
	pending_current = _current;
    8874:	6018      	str	r0, [r3, #0]
{
    8876:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    887c:	f7ff ff96 	bl	87ac <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8880:	4620      	mov	r0, r4
    8882:	f7ff f867 	bl	7954 <z_spin_unlock_valid>
    8886:	b968      	cbnz	r0, 88a4 <z_pend_curr+0x3c>
    8888:	4a0b      	ldr	r2, [pc, #44]	; (88b8 <z_pend_curr+0x50>)
    888a:	490c      	ldr	r1, [pc, #48]	; (88bc <z_pend_curr+0x54>)
    888c:	480c      	ldr	r0, [pc, #48]	; (88c0 <z_pend_curr+0x58>)
    888e:	23d0      	movs	r3, #208	; 0xd0
    8890:	f002 fb50 	bl	af34 <assert_print>
    8894:	480b      	ldr	r0, [pc, #44]	; (88c4 <z_pend_curr+0x5c>)
    8896:	4621      	mov	r1, r4
    8898:	f002 fb4c 	bl	af34 <assert_print>
    889c:	4806      	ldr	r0, [pc, #24]	; (88b8 <z_pend_curr+0x50>)
    889e:	21d0      	movs	r1, #208	; 0xd0
    88a0:	f002 fb41 	bl	af26 <assert_post_action>
    88a4:	4628      	mov	r0, r5
}
    88a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    88aa:	f7fb bad5 	b.w	3e58 <arch_swap>
    88ae:	bf00      	nop
    88b0:	20000f1c 	.word	0x20000f1c
    88b4:	20000f4c 	.word	0x20000f4c
    88b8:	0000cad0 	.word	0x0000cad0
    88bc:	0000cafd 	.word	0x0000cafd
    88c0:	0000c986 	.word	0x0000c986
    88c4:	0000cb14 	.word	0x0000cb14

000088c8 <z_set_prio>:
{
    88c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88ca:	4604      	mov	r4, r0
    88cc:	460e      	mov	r6, r1
	__asm__ volatile(
    88ce:	f04f 0320 	mov.w	r3, #32
    88d2:	f3ef 8711 	mrs	r7, BASEPRI
    88d6:	f383 8812 	msr	BASEPRI_MAX, r3
    88da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88de:	4839      	ldr	r0, [pc, #228]	; (89c4 <z_set_prio+0xfc>)
    88e0:	f7ff f82a 	bl	7938 <z_spin_lock_valid>
    88e4:	b968      	cbnz	r0, 8902 <z_set_prio+0x3a>
    88e6:	4a38      	ldr	r2, [pc, #224]	; (89c8 <z_set_prio+0x100>)
    88e8:	4938      	ldr	r1, [pc, #224]	; (89cc <z_set_prio+0x104>)
    88ea:	4839      	ldr	r0, [pc, #228]	; (89d0 <z_set_prio+0x108>)
    88ec:	238e      	movs	r3, #142	; 0x8e
    88ee:	f002 fb21 	bl	af34 <assert_print>
    88f2:	4934      	ldr	r1, [pc, #208]	; (89c4 <z_set_prio+0xfc>)
    88f4:	4837      	ldr	r0, [pc, #220]	; (89d4 <z_set_prio+0x10c>)
    88f6:	f002 fb1d 	bl	af34 <assert_print>
    88fa:	4833      	ldr	r0, [pc, #204]	; (89c8 <z_set_prio+0x100>)
    88fc:	218e      	movs	r1, #142	; 0x8e
    88fe:	f002 fb12 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8902:	4830      	ldr	r0, [pc, #192]	; (89c4 <z_set_prio+0xfc>)
    8904:	f7ff f836 	bl	7974 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    8908:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    890a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    890c:	b276      	sxtb	r6, r6
    890e:	d128      	bne.n	8962 <z_set_prio+0x9a>
	return node->next != NULL;
    8910:	69a5      	ldr	r5, [r4, #24]
    8912:	bb35      	cbnz	r5, 8962 <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8918:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    891a:	482f      	ldr	r0, [pc, #188]	; (89d8 <z_set_prio+0x110>)
    891c:	4621      	mov	r1, r4
    891e:	f7ff fdff 	bl	8520 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8922:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    8924:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8926:	f063 037f 	orn	r3, r3, #127	; 0x7f
    892a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    892c:	4b2b      	ldr	r3, [pc, #172]	; (89dc <z_set_prio+0x114>)
    892e:	429c      	cmp	r4, r3
    8930:	d109      	bne.n	8946 <z_set_prio+0x7e>
    8932:	492b      	ldr	r1, [pc, #172]	; (89e0 <z_set_prio+0x118>)
    8934:	4826      	ldr	r0, [pc, #152]	; (89d0 <z_set_prio+0x108>)
    8936:	4a2b      	ldr	r2, [pc, #172]	; (89e4 <z_set_prio+0x11c>)
    8938:	23ba      	movs	r3, #186	; 0xba
    893a:	f002 fafb 	bl	af34 <assert_print>
    893e:	4829      	ldr	r0, [pc, #164]	; (89e4 <z_set_prio+0x11c>)
    8940:	21ba      	movs	r1, #186	; 0xba
    8942:	f002 faf0 	bl	af26 <assert_post_action>
	return list->head == list;
    8946:	4a28      	ldr	r2, [pc, #160]	; (89e8 <z_set_prio+0x120>)
    8948:	4613      	mov	r3, r2
    894a:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    894e:	4299      	cmp	r1, r3
    8950:	bf18      	it	ne
    8952:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    8954:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8956:	b9f5      	cbnz	r5, 8996 <z_set_prio+0xce>
	node->prev = tail;
    8958:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    895c:	600c      	str	r4, [r1, #0]
	list->tail = node;
    895e:	6254      	str	r4, [r2, #36]	; 0x24
}
    8960:	e026      	b.n	89b0 <z_set_prio+0xe8>
			thread->base.prio = prio;
    8962:	73a6      	strb	r6, [r4, #14]
    8964:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8966:	4817      	ldr	r0, [pc, #92]	; (89c4 <z_set_prio+0xfc>)
    8968:	f7fe fff4 	bl	7954 <z_spin_unlock_valid>
    896c:	b968      	cbnz	r0, 898a <z_set_prio+0xc2>
    896e:	4a16      	ldr	r2, [pc, #88]	; (89c8 <z_set_prio+0x100>)
    8970:	491e      	ldr	r1, [pc, #120]	; (89ec <z_set_prio+0x124>)
    8972:	4817      	ldr	r0, [pc, #92]	; (89d0 <z_set_prio+0x108>)
    8974:	23b9      	movs	r3, #185	; 0xb9
    8976:	f002 fadd 	bl	af34 <assert_print>
    897a:	4912      	ldr	r1, [pc, #72]	; (89c4 <z_set_prio+0xfc>)
    897c:	481c      	ldr	r0, [pc, #112]	; (89f0 <z_set_prio+0x128>)
    897e:	f002 fad9 	bl	af34 <assert_print>
    8982:	4811      	ldr	r0, [pc, #68]	; (89c8 <z_set_prio+0x100>)
    8984:	21b9      	movs	r1, #185	; 0xb9
    8986:	f002 face 	bl	af26 <assert_post_action>
	__asm__ volatile(
    898a:	f387 8811 	msr	BASEPRI, r7
    898e:	f3bf 8f6f 	isb	sy
}
    8992:	4620      	mov	r0, r4
    8994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    8996:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    899a:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    899e:	42b0      	cmp	r0, r6
    89a0:	d00b      	beq.n	89ba <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    89a2:	4286      	cmp	r6, r0
    89a4:	dd09      	ble.n	89ba <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    89a6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    89a8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    89ac:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    89ae:	606c      	str	r4, [r5, #4]
			update_cache(1);
    89b0:	2001      	movs	r0, #1
    89b2:	f7ff fab3 	bl	7f1c <update_cache>
    89b6:	2401      	movs	r4, #1
    89b8:	e7d5      	b.n	8966 <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    89ba:	42a9      	cmp	r1, r5
    89bc:	d0cc      	beq.n	8958 <z_set_prio+0x90>
    89be:	682d      	ldr	r5, [r5, #0]
    89c0:	e7c9      	b.n	8956 <z_set_prio+0x8e>
    89c2:	bf00      	nop
    89c4:	20000f58 	.word	0x20000f58
    89c8:	0000cad0 	.word	0x0000cad0
    89cc:	0000cb29 	.word	0x0000cb29
    89d0:	0000c986 	.word	0x0000c986
    89d4:	0000cb3e 	.word	0x0000cb3e
    89d8:	20000f3c 	.word	0x20000f3c
    89dc:	200006c0 	.word	0x200006c0
    89e0:	0000e109 	.word	0x0000e109
    89e4:	0000e0c0 	.word	0x0000e0c0
    89e8:	20000f1c 	.word	0x20000f1c
    89ec:	0000cafd 	.word	0x0000cafd
    89f0:	0000cb14 	.word	0x0000cb14

000089f4 <z_impl_k_thread_suspend>:
{
    89f4:	b570      	push	{r4, r5, r6, lr}
    89f6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    89f8:	3018      	adds	r0, #24
    89fa:	f000 fd0f 	bl	941c <z_abort_timeout>
	__asm__ volatile(
    89fe:	f04f 0320 	mov.w	r3, #32
    8a02:	f3ef 8611 	mrs	r6, BASEPRI
    8a06:	f383 8812 	msr	BASEPRI_MAX, r3
    8a0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a0e:	4825      	ldr	r0, [pc, #148]	; (8aa4 <z_impl_k_thread_suspend+0xb0>)
    8a10:	f7fe ff92 	bl	7938 <z_spin_lock_valid>
    8a14:	b968      	cbnz	r0, 8a32 <z_impl_k_thread_suspend+0x3e>
    8a16:	4a24      	ldr	r2, [pc, #144]	; (8aa8 <z_impl_k_thread_suspend+0xb4>)
    8a18:	4924      	ldr	r1, [pc, #144]	; (8aac <z_impl_k_thread_suspend+0xb8>)
    8a1a:	4825      	ldr	r0, [pc, #148]	; (8ab0 <z_impl_k_thread_suspend+0xbc>)
    8a1c:	238e      	movs	r3, #142	; 0x8e
    8a1e:	f002 fa89 	bl	af34 <assert_print>
    8a22:	4920      	ldr	r1, [pc, #128]	; (8aa4 <z_impl_k_thread_suspend+0xb0>)
    8a24:	4823      	ldr	r0, [pc, #140]	; (8ab4 <z_impl_k_thread_suspend+0xc0>)
    8a26:	f002 fa85 	bl	af34 <assert_print>
    8a2a:	481f      	ldr	r0, [pc, #124]	; (8aa8 <z_impl_k_thread_suspend+0xb4>)
    8a2c:	218e      	movs	r1, #142	; 0x8e
    8a2e:	f002 fa7a 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a32:	481c      	ldr	r0, [pc, #112]	; (8aa4 <z_impl_k_thread_suspend+0xb0>)
    8a34:	f7fe ff9e 	bl	7974 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    8a38:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8a3c:	7b63      	ldrb	r3, [r4, #13]
    8a3e:	2a00      	cmp	r2, #0
    8a40:	da06      	bge.n	8a50 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    8a46:	481c      	ldr	r0, [pc, #112]	; (8ab8 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a48:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8a4a:	4621      	mov	r1, r4
    8a4c:	f7ff fd68 	bl	8520 <z_priq_dumb_remove>
		update_cache(thread == _current);
    8a50:	4d1a      	ldr	r5, [pc, #104]	; (8abc <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8a52:	7b63      	ldrb	r3, [r4, #13]
    8a54:	68a8      	ldr	r0, [r5, #8]
    8a56:	f043 0310 	orr.w	r3, r3, #16
    8a5a:	7363      	strb	r3, [r4, #13]
    8a5c:	1b03      	subs	r3, r0, r4
    8a5e:	4258      	negs	r0, r3
    8a60:	4158      	adcs	r0, r3
    8a62:	f7ff fa5b 	bl	7f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a66:	480f      	ldr	r0, [pc, #60]	; (8aa4 <z_impl_k_thread_suspend+0xb0>)
    8a68:	f7fe ff74 	bl	7954 <z_spin_unlock_valid>
    8a6c:	b968      	cbnz	r0, 8a8a <z_impl_k_thread_suspend+0x96>
    8a6e:	4a0e      	ldr	r2, [pc, #56]	; (8aa8 <z_impl_k_thread_suspend+0xb4>)
    8a70:	4913      	ldr	r1, [pc, #76]	; (8ac0 <z_impl_k_thread_suspend+0xcc>)
    8a72:	480f      	ldr	r0, [pc, #60]	; (8ab0 <z_impl_k_thread_suspend+0xbc>)
    8a74:	23b9      	movs	r3, #185	; 0xb9
    8a76:	f002 fa5d 	bl	af34 <assert_print>
    8a7a:	490a      	ldr	r1, [pc, #40]	; (8aa4 <z_impl_k_thread_suspend+0xb0>)
    8a7c:	4811      	ldr	r0, [pc, #68]	; (8ac4 <z_impl_k_thread_suspend+0xd0>)
    8a7e:	f002 fa59 	bl	af34 <assert_print>
    8a82:	4809      	ldr	r0, [pc, #36]	; (8aa8 <z_impl_k_thread_suspend+0xb4>)
    8a84:	21b9      	movs	r1, #185	; 0xb9
    8a86:	f002 fa4e 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8a8a:	f386 8811 	msr	BASEPRI, r6
    8a8e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8a92:	68ab      	ldr	r3, [r5, #8]
    8a94:	42a3      	cmp	r3, r4
    8a96:	d103      	bne.n	8aa0 <z_impl_k_thread_suspend+0xac>
}
    8a98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8a9c:	f002 bfb1 	b.w	ba02 <z_reschedule_unlocked>
}
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    8aa2:	bf00      	nop
    8aa4:	20000f58 	.word	0x20000f58
    8aa8:	0000cad0 	.word	0x0000cad0
    8aac:	0000cb29 	.word	0x0000cb29
    8ab0:	0000c986 	.word	0x0000c986
    8ab4:	0000cb3e 	.word	0x0000cb3e
    8ab8:	20000f3c 	.word	0x20000f3c
    8abc:	20000f1c 	.word	0x20000f1c
    8ac0:	0000cafd 	.word	0x0000cafd
    8ac4:	0000cb14 	.word	0x0000cb14

00008ac8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    8ac8:	6883      	ldr	r3, [r0, #8]
{
    8aca:	b510      	push	{r4, lr}
    8acc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8ace:	b95b      	cbnz	r3, 8ae8 <unpend_thread_no_timeout+0x20>
    8ad0:	490b      	ldr	r1, [pc, #44]	; (8b00 <unpend_thread_no_timeout+0x38>)
    8ad2:	480c      	ldr	r0, [pc, #48]	; (8b04 <unpend_thread_no_timeout+0x3c>)
    8ad4:	4a0c      	ldr	r2, [pc, #48]	; (8b08 <unpend_thread_no_timeout+0x40>)
    8ad6:	f240 23b9 	movw	r3, #697	; 0x2b9
    8ada:	f002 fa2b 	bl	af34 <assert_print>
    8ade:	480a      	ldr	r0, [pc, #40]	; (8b08 <unpend_thread_no_timeout+0x40>)
    8ae0:	f240 21b9 	movw	r1, #697	; 0x2b9
    8ae4:	f002 fa1f 	bl	af26 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8ae8:	68a0      	ldr	r0, [r4, #8]
    8aea:	4621      	mov	r1, r4
    8aec:	f7ff fd18 	bl	8520 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8af0:	7b63      	ldrb	r3, [r4, #13]
    8af2:	f023 0302 	bic.w	r3, r3, #2
    8af6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8af8:	2300      	movs	r3, #0
    8afa:	60a3      	str	r3, [r4, #8]
}
    8afc:	bd10      	pop	{r4, pc}
    8afe:	bf00      	nop
    8b00:	0000e15b 	.word	0x0000e15b
    8b04:	0000c986 	.word	0x0000c986
    8b08:	0000e0c0 	.word	0x0000e0c0

00008b0c <z_thread_timeout>:
{
    8b0c:	b570      	push	{r4, r5, r6, lr}
    8b0e:	4604      	mov	r4, r0
	__asm__ volatile(
    8b10:	f04f 0320 	mov.w	r3, #32
    8b14:	f3ef 8611 	mrs	r6, BASEPRI
    8b18:	f383 8812 	msr	BASEPRI_MAX, r3
    8b1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b20:	4820      	ldr	r0, [pc, #128]	; (8ba4 <z_thread_timeout+0x98>)
    8b22:	f7fe ff09 	bl	7938 <z_spin_lock_valid>
    8b26:	b968      	cbnz	r0, 8b44 <z_thread_timeout+0x38>
    8b28:	4a1f      	ldr	r2, [pc, #124]	; (8ba8 <z_thread_timeout+0x9c>)
    8b2a:	4920      	ldr	r1, [pc, #128]	; (8bac <z_thread_timeout+0xa0>)
    8b2c:	4820      	ldr	r0, [pc, #128]	; (8bb0 <z_thread_timeout+0xa4>)
    8b2e:	238e      	movs	r3, #142	; 0x8e
    8b30:	f002 fa00 	bl	af34 <assert_print>
    8b34:	491b      	ldr	r1, [pc, #108]	; (8ba4 <z_thread_timeout+0x98>)
    8b36:	481f      	ldr	r0, [pc, #124]	; (8bb4 <z_thread_timeout+0xa8>)
    8b38:	f002 f9fc 	bl	af34 <assert_print>
    8b3c:	481a      	ldr	r0, [pc, #104]	; (8ba8 <z_thread_timeout+0x9c>)
    8b3e:	218e      	movs	r1, #142	; 0x8e
    8b40:	f002 f9f1 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b44:	4817      	ldr	r0, [pc, #92]	; (8ba4 <z_thread_timeout+0x98>)
    8b46:	f7fe ff15 	bl	7974 <z_spin_lock_set_owner>
		if (!killed) {
    8b4a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8b4e:	f013 0f28 	tst.w	r3, #40	; 0x28
    8b52:	d110      	bne.n	8b76 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    8b54:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8b58:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    8b5c:	b113      	cbz	r3, 8b64 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    8b5e:	4628      	mov	r0, r5
    8b60:	f7ff ffb2 	bl	8ac8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8b64:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8b68:	f023 0314 	bic.w	r3, r3, #20
    8b6c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8b70:	4628      	mov	r0, r5
    8b72:	f7ff fa0b 	bl	7f8c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b76:	480b      	ldr	r0, [pc, #44]	; (8ba4 <z_thread_timeout+0x98>)
    8b78:	f7fe feec 	bl	7954 <z_spin_unlock_valid>
    8b7c:	b968      	cbnz	r0, 8b9a <z_thread_timeout+0x8e>
    8b7e:	4a0a      	ldr	r2, [pc, #40]	; (8ba8 <z_thread_timeout+0x9c>)
    8b80:	490d      	ldr	r1, [pc, #52]	; (8bb8 <z_thread_timeout+0xac>)
    8b82:	480b      	ldr	r0, [pc, #44]	; (8bb0 <z_thread_timeout+0xa4>)
    8b84:	23b9      	movs	r3, #185	; 0xb9
    8b86:	f002 f9d5 	bl	af34 <assert_print>
    8b8a:	4906      	ldr	r1, [pc, #24]	; (8ba4 <z_thread_timeout+0x98>)
    8b8c:	480b      	ldr	r0, [pc, #44]	; (8bbc <z_thread_timeout+0xb0>)
    8b8e:	f002 f9d1 	bl	af34 <assert_print>
    8b92:	4805      	ldr	r0, [pc, #20]	; (8ba8 <z_thread_timeout+0x9c>)
    8b94:	21b9      	movs	r1, #185	; 0xb9
    8b96:	f002 f9c6 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8b9a:	f386 8811 	msr	BASEPRI, r6
    8b9e:	f3bf 8f6f 	isb	sy
}
    8ba2:	bd70      	pop	{r4, r5, r6, pc}
    8ba4:	20000f58 	.word	0x20000f58
    8ba8:	0000cad0 	.word	0x0000cad0
    8bac:	0000cb29 	.word	0x0000cb29
    8bb0:	0000c986 	.word	0x0000c986
    8bb4:	0000cb3e 	.word	0x0000cb3e
    8bb8:	0000cafd 	.word	0x0000cafd
    8bbc:	0000cb14 	.word	0x0000cb14

00008bc0 <z_unpend1_no_timeout>:
{
    8bc0:	b570      	push	{r4, r5, r6, lr}
    8bc2:	4605      	mov	r5, r0
	__asm__ volatile(
    8bc4:	f04f 0320 	mov.w	r3, #32
    8bc8:	f3ef 8611 	mrs	r6, BASEPRI
    8bcc:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bd4:	481a      	ldr	r0, [pc, #104]	; (8c40 <z_unpend1_no_timeout+0x80>)
    8bd6:	f7fe feaf 	bl	7938 <z_spin_lock_valid>
    8bda:	b968      	cbnz	r0, 8bf8 <z_unpend1_no_timeout+0x38>
    8bdc:	4a19      	ldr	r2, [pc, #100]	; (8c44 <z_unpend1_no_timeout+0x84>)
    8bde:	491a      	ldr	r1, [pc, #104]	; (8c48 <z_unpend1_no_timeout+0x88>)
    8be0:	481a      	ldr	r0, [pc, #104]	; (8c4c <z_unpend1_no_timeout+0x8c>)
    8be2:	238e      	movs	r3, #142	; 0x8e
    8be4:	f002 f9a6 	bl	af34 <assert_print>
    8be8:	4915      	ldr	r1, [pc, #84]	; (8c40 <z_unpend1_no_timeout+0x80>)
    8bea:	4819      	ldr	r0, [pc, #100]	; (8c50 <z_unpend1_no_timeout+0x90>)
    8bec:	f002 f9a2 	bl	af34 <assert_print>
    8bf0:	4814      	ldr	r0, [pc, #80]	; (8c44 <z_unpend1_no_timeout+0x84>)
    8bf2:	218e      	movs	r1, #142	; 0x8e
    8bf4:	f002 f997 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8bf8:	4811      	ldr	r0, [pc, #68]	; (8c40 <z_unpend1_no_timeout+0x80>)
    8bfa:	f7fe febb 	bl	7974 <z_spin_lock_set_owner>
	return list->head == list;
    8bfe:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c00:	42a5      	cmp	r5, r4
    8c02:	d01b      	beq.n	8c3c <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
    8c04:	b114      	cbz	r4, 8c0c <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    8c06:	4620      	mov	r0, r4
    8c08:	f7ff ff5e 	bl	8ac8 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c0c:	480c      	ldr	r0, [pc, #48]	; (8c40 <z_unpend1_no_timeout+0x80>)
    8c0e:	f7fe fea1 	bl	7954 <z_spin_unlock_valid>
    8c12:	b968      	cbnz	r0, 8c30 <z_unpend1_no_timeout+0x70>
    8c14:	4a0b      	ldr	r2, [pc, #44]	; (8c44 <z_unpend1_no_timeout+0x84>)
    8c16:	490f      	ldr	r1, [pc, #60]	; (8c54 <z_unpend1_no_timeout+0x94>)
    8c18:	480c      	ldr	r0, [pc, #48]	; (8c4c <z_unpend1_no_timeout+0x8c>)
    8c1a:	23b9      	movs	r3, #185	; 0xb9
    8c1c:	f002 f98a 	bl	af34 <assert_print>
    8c20:	4907      	ldr	r1, [pc, #28]	; (8c40 <z_unpend1_no_timeout+0x80>)
    8c22:	480d      	ldr	r0, [pc, #52]	; (8c58 <z_unpend1_no_timeout+0x98>)
    8c24:	f002 f986 	bl	af34 <assert_print>
    8c28:	4806      	ldr	r0, [pc, #24]	; (8c44 <z_unpend1_no_timeout+0x84>)
    8c2a:	21b9      	movs	r1, #185	; 0xb9
    8c2c:	f002 f97b 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8c30:	f386 8811 	msr	BASEPRI, r6
    8c34:	f3bf 8f6f 	isb	sy
}
    8c38:	4620      	mov	r0, r4
    8c3a:	bd70      	pop	{r4, r5, r6, pc}
    8c3c:	2400      	movs	r4, #0
    8c3e:	e7e5      	b.n	8c0c <z_unpend1_no_timeout+0x4c>
    8c40:	20000f58 	.word	0x20000f58
    8c44:	0000cad0 	.word	0x0000cad0
    8c48:	0000cb29 	.word	0x0000cb29
    8c4c:	0000c986 	.word	0x0000c986
    8c50:	0000cb3e 	.word	0x0000cb3e
    8c54:	0000cafd 	.word	0x0000cafd
    8c58:	0000cb14 	.word	0x0000cb14

00008c5c <z_unpend_first_thread>:
{
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4605      	mov	r5, r0
	__asm__ volatile(
    8c60:	f04f 0320 	mov.w	r3, #32
    8c64:	f3ef 8611 	mrs	r6, BASEPRI
    8c68:	f383 8812 	msr	BASEPRI_MAX, r3
    8c6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c70:	481c      	ldr	r0, [pc, #112]	; (8ce4 <z_unpend_first_thread+0x88>)
    8c72:	f7fe fe61 	bl	7938 <z_spin_lock_valid>
    8c76:	b968      	cbnz	r0, 8c94 <z_unpend_first_thread+0x38>
    8c78:	4a1b      	ldr	r2, [pc, #108]	; (8ce8 <z_unpend_first_thread+0x8c>)
    8c7a:	491c      	ldr	r1, [pc, #112]	; (8cec <z_unpend_first_thread+0x90>)
    8c7c:	481c      	ldr	r0, [pc, #112]	; (8cf0 <z_unpend_first_thread+0x94>)
    8c7e:	238e      	movs	r3, #142	; 0x8e
    8c80:	f002 f958 	bl	af34 <assert_print>
    8c84:	4917      	ldr	r1, [pc, #92]	; (8ce4 <z_unpend_first_thread+0x88>)
    8c86:	481b      	ldr	r0, [pc, #108]	; (8cf4 <z_unpend_first_thread+0x98>)
    8c88:	f002 f954 	bl	af34 <assert_print>
    8c8c:	4816      	ldr	r0, [pc, #88]	; (8ce8 <z_unpend_first_thread+0x8c>)
    8c8e:	218e      	movs	r1, #142	; 0x8e
    8c90:	f002 f949 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    8c94:	4813      	ldr	r0, [pc, #76]	; (8ce4 <z_unpend_first_thread+0x88>)
    8c96:	f7fe fe6d 	bl	7974 <z_spin_lock_set_owner>
	return list->head == list;
    8c9a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c9c:	42a5      	cmp	r5, r4
    8c9e:	d01f      	beq.n	8ce0 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    8ca0:	b134      	cbz	r4, 8cb0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8ca2:	4620      	mov	r0, r4
    8ca4:	f7ff ff10 	bl	8ac8 <unpend_thread_no_timeout>
    8ca8:	f104 0018 	add.w	r0, r4, #24
    8cac:	f000 fbb6 	bl	941c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cb0:	480c      	ldr	r0, [pc, #48]	; (8ce4 <z_unpend_first_thread+0x88>)
    8cb2:	f7fe fe4f 	bl	7954 <z_spin_unlock_valid>
    8cb6:	b968      	cbnz	r0, 8cd4 <z_unpend_first_thread+0x78>
    8cb8:	4a0b      	ldr	r2, [pc, #44]	; (8ce8 <z_unpend_first_thread+0x8c>)
    8cba:	490f      	ldr	r1, [pc, #60]	; (8cf8 <z_unpend_first_thread+0x9c>)
    8cbc:	480c      	ldr	r0, [pc, #48]	; (8cf0 <z_unpend_first_thread+0x94>)
    8cbe:	23b9      	movs	r3, #185	; 0xb9
    8cc0:	f002 f938 	bl	af34 <assert_print>
    8cc4:	4907      	ldr	r1, [pc, #28]	; (8ce4 <z_unpend_first_thread+0x88>)
    8cc6:	480d      	ldr	r0, [pc, #52]	; (8cfc <z_unpend_first_thread+0xa0>)
    8cc8:	f002 f934 	bl	af34 <assert_print>
    8ccc:	4806      	ldr	r0, [pc, #24]	; (8ce8 <z_unpend_first_thread+0x8c>)
    8cce:	21b9      	movs	r1, #185	; 0xb9
    8cd0:	f002 f929 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8cd4:	f386 8811 	msr	BASEPRI, r6
    8cd8:	f3bf 8f6f 	isb	sy
}
    8cdc:	4620      	mov	r0, r4
    8cde:	bd70      	pop	{r4, r5, r6, pc}
    8ce0:	2400      	movs	r4, #0
    8ce2:	e7e5      	b.n	8cb0 <z_unpend_first_thread+0x54>
    8ce4:	20000f58 	.word	0x20000f58
    8ce8:	0000cad0 	.word	0x0000cad0
    8cec:	0000cb29 	.word	0x0000cb29
    8cf0:	0000c986 	.word	0x0000c986
    8cf4:	0000cb3e 	.word	0x0000cb3e
    8cf8:	0000cafd 	.word	0x0000cafd
    8cfc:	0000cb14 	.word	0x0000cb14

00008d00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8d00:	4b04      	ldr	r3, [pc, #16]	; (8d14 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8d02:	2100      	movs	r1, #0
    8d04:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    8d08:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8d0c:	4608      	mov	r0, r1
    8d0e:	f7ff b989 	b.w	8024 <k_sched_time_slice_set>
    8d12:	bf00      	nop
    8d14:	20000f1c 	.word	0x20000f1c

00008d18 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8d1e:	b173      	cbz	r3, 8d3e <z_impl_k_yield+0x26>
    8d20:	493f      	ldr	r1, [pc, #252]	; (8e20 <z_impl_k_yield+0x108>)
    8d22:	4a40      	ldr	r2, [pc, #256]	; (8e24 <z_impl_k_yield+0x10c>)
    8d24:	4840      	ldr	r0, [pc, #256]	; (8e28 <z_impl_k_yield+0x110>)
    8d26:	f240 5332 	movw	r3, #1330	; 0x532
    8d2a:	f002 f903 	bl	af34 <assert_print>
    8d2e:	483f      	ldr	r0, [pc, #252]	; (8e2c <z_impl_k_yield+0x114>)
    8d30:	f002 f900 	bl	af34 <assert_print>
    8d34:	483b      	ldr	r0, [pc, #236]	; (8e24 <z_impl_k_yield+0x10c>)
    8d36:	f240 5132 	movw	r1, #1330	; 0x532
    8d3a:	f002 f8f4 	bl	af26 <assert_post_action>
	__asm__ volatile(
    8d3e:	f04f 0320 	mov.w	r3, #32
    8d42:	f3ef 8611 	mrs	r6, BASEPRI
    8d46:	f383 8812 	msr	BASEPRI_MAX, r3
    8d4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d4e:	4838      	ldr	r0, [pc, #224]	; (8e30 <z_impl_k_yield+0x118>)
    8d50:	f7fe fdf2 	bl	7938 <z_spin_lock_valid>
    8d54:	b968      	cbnz	r0, 8d72 <z_impl_k_yield+0x5a>
    8d56:	4a37      	ldr	r2, [pc, #220]	; (8e34 <z_impl_k_yield+0x11c>)
    8d58:	4937      	ldr	r1, [pc, #220]	; (8e38 <z_impl_k_yield+0x120>)
    8d5a:	4833      	ldr	r0, [pc, #204]	; (8e28 <z_impl_k_yield+0x110>)
    8d5c:	238e      	movs	r3, #142	; 0x8e
    8d5e:	f002 f8e9 	bl	af34 <assert_print>
    8d62:	4933      	ldr	r1, [pc, #204]	; (8e30 <z_impl_k_yield+0x118>)
    8d64:	4835      	ldr	r0, [pc, #212]	; (8e3c <z_impl_k_yield+0x124>)
    8d66:	f002 f8e5 	bl	af34 <assert_print>
    8d6a:	4832      	ldr	r0, [pc, #200]	; (8e34 <z_impl_k_yield+0x11c>)
    8d6c:	218e      	movs	r1, #142	; 0x8e
    8d6e:	f002 f8da 	bl	af26 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8d72:	4d33      	ldr	r5, [pc, #204]	; (8e40 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    8d74:	482e      	ldr	r0, [pc, #184]	; (8e30 <z_impl_k_yield+0x118>)
    8d76:	f7fe fdfd 	bl	7974 <z_spin_lock_set_owner>
    8d7a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d7c:	7b4b      	ldrb	r3, [r1, #13]
    8d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8d82:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8d84:	f105 0020 	add.w	r0, r5, #32
    8d88:	f7ff fbca 	bl	8520 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8d8c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8d8e:	7b63      	ldrb	r3, [r4, #13]
    8d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8d94:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8d96:	4b2b      	ldr	r3, [pc, #172]	; (8e44 <z_impl_k_yield+0x12c>)
    8d98:	429c      	cmp	r4, r3
    8d9a:	d109      	bne.n	8db0 <z_impl_k_yield+0x98>
    8d9c:	492a      	ldr	r1, [pc, #168]	; (8e48 <z_impl_k_yield+0x130>)
    8d9e:	4822      	ldr	r0, [pc, #136]	; (8e28 <z_impl_k_yield+0x110>)
    8da0:	4a20      	ldr	r2, [pc, #128]	; (8e24 <z_impl_k_yield+0x10c>)
    8da2:	23ba      	movs	r3, #186	; 0xba
    8da4:	f002 f8c6 	bl	af34 <assert_print>
    8da8:	481e      	ldr	r0, [pc, #120]	; (8e24 <z_impl_k_yield+0x10c>)
    8daa:	21ba      	movs	r1, #186	; 0xba
    8dac:	f002 f8bb 	bl	af26 <assert_post_action>
	return list->head == list;
    8db0:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8db2:	4926      	ldr	r1, [pc, #152]	; (8e4c <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    8db4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8db6:	428b      	cmp	r3, r1
    8db8:	bf08      	it	eq
    8dba:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8dbc:	b923      	cbnz	r3, 8dc8 <z_impl_k_yield+0xb0>
	node->prev = tail;
    8dbe:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    8dc2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8dc4:	626c      	str	r4, [r5, #36]	; 0x24
}
    8dc6:	e00c      	b.n	8de2 <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    8dc8:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8dcc:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    8dd0:	42b8      	cmp	r0, r7
    8dd2:	d020      	beq.n	8e16 <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8dd4:	4287      	cmp	r7, r0
    8dd6:	dd1e      	ble.n	8e16 <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    8dd8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8dda:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8dde:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8de0:	605c      	str	r4, [r3, #4]
	update_cache(1);
    8de2:	2001      	movs	r0, #1
    8de4:	f7ff f89a 	bl	7f1c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8de8:	4811      	ldr	r0, [pc, #68]	; (8e30 <z_impl_k_yield+0x118>)
    8dea:	f7fe fdb3 	bl	7954 <z_spin_unlock_valid>
    8dee:	b968      	cbnz	r0, 8e0c <z_impl_k_yield+0xf4>
    8df0:	4a10      	ldr	r2, [pc, #64]	; (8e34 <z_impl_k_yield+0x11c>)
    8df2:	4917      	ldr	r1, [pc, #92]	; (8e50 <z_impl_k_yield+0x138>)
    8df4:	480c      	ldr	r0, [pc, #48]	; (8e28 <z_impl_k_yield+0x110>)
    8df6:	23d0      	movs	r3, #208	; 0xd0
    8df8:	f002 f89c 	bl	af34 <assert_print>
    8dfc:	490c      	ldr	r1, [pc, #48]	; (8e30 <z_impl_k_yield+0x118>)
    8dfe:	4815      	ldr	r0, [pc, #84]	; (8e54 <z_impl_k_yield+0x13c>)
    8e00:	f002 f898 	bl	af34 <assert_print>
    8e04:	480b      	ldr	r0, [pc, #44]	; (8e34 <z_impl_k_yield+0x11c>)
    8e06:	21d0      	movs	r1, #208	; 0xd0
    8e08:	f002 f88d 	bl	af26 <assert_post_action>
    8e0c:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e12:	f7fb b821 	b.w	3e58 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8e16:	4293      	cmp	r3, r2
    8e18:	d0d1      	beq.n	8dbe <z_impl_k_yield+0xa6>
    8e1a:	681b      	ldr	r3, [r3, #0]
    8e1c:	e7ce      	b.n	8dbc <z_impl_k_yield+0xa4>
    8e1e:	bf00      	nop
    8e20:	0000dee8 	.word	0x0000dee8
    8e24:	0000e0c0 	.word	0x0000e0c0
    8e28:	0000c986 	.word	0x0000c986
    8e2c:	0000e01e 	.word	0x0000e01e
    8e30:	20000f58 	.word	0x20000f58
    8e34:	0000cad0 	.word	0x0000cad0
    8e38:	0000cb29 	.word	0x0000cb29
    8e3c:	0000cb3e 	.word	0x0000cb3e
    8e40:	20000f1c 	.word	0x20000f1c
    8e44:	200006c0 	.word	0x200006c0
    8e48:	0000e109 	.word	0x0000e109
    8e4c:	20000f3c 	.word	0x20000f3c
    8e50:	0000cafd 	.word	0x0000cafd
    8e54:	0000cb14 	.word	0x0000cb14

00008e58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e5c:	4605      	mov	r5, r0
    8e5e:	460e      	mov	r6, r1
    8e60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8e64:	b173      	cbz	r3, 8e84 <z_tick_sleep+0x2c>
    8e66:	4941      	ldr	r1, [pc, #260]	; (8f6c <z_tick_sleep+0x114>)
    8e68:	4a41      	ldr	r2, [pc, #260]	; (8f70 <z_tick_sleep+0x118>)
    8e6a:	4842      	ldr	r0, [pc, #264]	; (8f74 <z_tick_sleep+0x11c>)
    8e6c:	f240 534e 	movw	r3, #1358	; 0x54e
    8e70:	f002 f860 	bl	af34 <assert_print>
    8e74:	4840      	ldr	r0, [pc, #256]	; (8f78 <z_tick_sleep+0x120>)
    8e76:	f002 f85d 	bl	af34 <assert_print>
    8e7a:	483d      	ldr	r0, [pc, #244]	; (8f70 <z_tick_sleep+0x118>)
    8e7c:	f240 514e 	movw	r1, #1358	; 0x54e
    8e80:	f002 f851 	bl	af26 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8e84:	ea55 0306 	orrs.w	r3, r5, r6
    8e88:	d103      	bne.n	8e92 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    8e8a:	f7ff ff45 	bl	8d18 <z_impl_k_yield>
		k_yield();
		return 0;
    8e8e:	2000      	movs	r0, #0
    8e90:	e066      	b.n	8f60 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8e92:	1caa      	adds	r2, r5, #2
    8e94:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    8e98:	db64      	blt.n	8f64 <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8e9a:	f002 fdbc 	bl	ba16 <sys_clock_tick_get_32>
    8e9e:	1944      	adds	r4, r0, r5
    8ea0:	f04f 0320 	mov.w	r3, #32
    8ea4:	f3ef 8811 	mrs	r8, BASEPRI
    8ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    8eac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8eb0:	4832      	ldr	r0, [pc, #200]	; (8f7c <z_tick_sleep+0x124>)
    8eb2:	f7fe fd41 	bl	7938 <z_spin_lock_valid>
    8eb6:	b968      	cbnz	r0, 8ed4 <z_tick_sleep+0x7c>
    8eb8:	4a31      	ldr	r2, [pc, #196]	; (8f80 <z_tick_sleep+0x128>)
    8eba:	4932      	ldr	r1, [pc, #200]	; (8f84 <z_tick_sleep+0x12c>)
    8ebc:	482d      	ldr	r0, [pc, #180]	; (8f74 <z_tick_sleep+0x11c>)
    8ebe:	238e      	movs	r3, #142	; 0x8e
    8ec0:	f002 f838 	bl	af34 <assert_print>
    8ec4:	492d      	ldr	r1, [pc, #180]	; (8f7c <z_tick_sleep+0x124>)
    8ec6:	4830      	ldr	r0, [pc, #192]	; (8f88 <z_tick_sleep+0x130>)
    8ec8:	f002 f834 	bl	af34 <assert_print>
    8ecc:	482c      	ldr	r0, [pc, #176]	; (8f80 <z_tick_sleep+0x128>)
    8ece:	218e      	movs	r1, #142	; 0x8e
    8ed0:	f002 f829 	bl	af26 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8ed4:	4f2d      	ldr	r7, [pc, #180]	; (8f8c <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    8ed6:	4829      	ldr	r0, [pc, #164]	; (8f7c <z_tick_sleep+0x124>)
    8ed8:	f7fe fd4c 	bl	7974 <z_spin_lock_set_owner>
    8edc:	4b2c      	ldr	r3, [pc, #176]	; (8f90 <z_tick_sleep+0x138>)
    8ede:	68b8      	ldr	r0, [r7, #8]
    8ee0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8ee2:	f7ff fc09 	bl	86f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8ee6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8ee8:	492a      	ldr	r1, [pc, #168]	; (8f94 <z_tick_sleep+0x13c>)
    8eea:	462a      	mov	r2, r5
    8eec:	4633      	mov	r3, r6
    8eee:	3018      	adds	r0, #24
    8ef0:	f000 f9ca 	bl	9288 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8ef4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ef6:	4821      	ldr	r0, [pc, #132]	; (8f7c <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8ef8:	7b53      	ldrb	r3, [r2, #13]
    8efa:	f043 0310 	orr.w	r3, r3, #16
    8efe:	7353      	strb	r3, [r2, #13]
    8f00:	f7fe fd28 	bl	7954 <z_spin_unlock_valid>
    8f04:	b968      	cbnz	r0, 8f22 <z_tick_sleep+0xca>
    8f06:	4a1e      	ldr	r2, [pc, #120]	; (8f80 <z_tick_sleep+0x128>)
    8f08:	4923      	ldr	r1, [pc, #140]	; (8f98 <z_tick_sleep+0x140>)
    8f0a:	481a      	ldr	r0, [pc, #104]	; (8f74 <z_tick_sleep+0x11c>)
    8f0c:	23d0      	movs	r3, #208	; 0xd0
    8f0e:	f002 f811 	bl	af34 <assert_print>
    8f12:	491a      	ldr	r1, [pc, #104]	; (8f7c <z_tick_sleep+0x124>)
    8f14:	4821      	ldr	r0, [pc, #132]	; (8f9c <z_tick_sleep+0x144>)
    8f16:	f002 f80d 	bl	af34 <assert_print>
    8f1a:	4819      	ldr	r0, [pc, #100]	; (8f80 <z_tick_sleep+0x128>)
    8f1c:	21d0      	movs	r1, #208	; 0xd0
    8f1e:	f002 f802 	bl	af26 <assert_post_action>
    8f22:	4640      	mov	r0, r8
    8f24:	f7fa ff98 	bl	3e58 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    8f28:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8f2a:	7b5b      	ldrb	r3, [r3, #13]
    8f2c:	06db      	lsls	r3, r3, #27
    8f2e:	d50e      	bpl.n	8f4e <z_tick_sleep+0xf6>
    8f30:	491b      	ldr	r1, [pc, #108]	; (8fa0 <z_tick_sleep+0x148>)
    8f32:	4a0f      	ldr	r2, [pc, #60]	; (8f70 <z_tick_sleep+0x118>)
    8f34:	480f      	ldr	r0, [pc, #60]	; (8f74 <z_tick_sleep+0x11c>)
    8f36:	f240 536f 	movw	r3, #1391	; 0x56f
    8f3a:	f001 fffb 	bl	af34 <assert_print>
    8f3e:	480e      	ldr	r0, [pc, #56]	; (8f78 <z_tick_sleep+0x120>)
    8f40:	f001 fff8 	bl	af34 <assert_print>
    8f44:	480a      	ldr	r0, [pc, #40]	; (8f70 <z_tick_sleep+0x118>)
    8f46:	f240 516f 	movw	r1, #1391	; 0x56f
    8f4a:	f001 ffec 	bl	af26 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8f4e:	f002 fd62 	bl	ba16 <sys_clock_tick_get_32>
    8f52:	1a20      	subs	r0, r4, r0
    8f54:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8f58:	2801      	cmp	r0, #1
    8f5a:	f173 0300 	sbcs.w	r3, r3, #0
    8f5e:	db96      	blt.n	8e8e <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    8f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8f64:	f06f 0401 	mvn.w	r4, #1
    8f68:	1b64      	subs	r4, r4, r5
    8f6a:	e799      	b.n	8ea0 <z_tick_sleep+0x48>
    8f6c:	0000dee8 	.word	0x0000dee8
    8f70:	0000e0c0 	.word	0x0000e0c0
    8f74:	0000c986 	.word	0x0000c986
    8f78:	0000e01e 	.word	0x0000e01e
    8f7c:	20000f58 	.word	0x20000f58
    8f80:	0000cad0 	.word	0x0000cad0
    8f84:	0000cb29 	.word	0x0000cb29
    8f88:	0000cb3e 	.word	0x0000cb3e
    8f8c:	20000f1c 	.word	0x20000f1c
    8f90:	20000f4c 	.word	0x20000f4c
    8f94:	00008b0d 	.word	0x00008b0d
    8f98:	0000cafd 	.word	0x0000cafd
    8f9c:	0000cb14 	.word	0x0000cb14
    8fa0:	0000e172 	.word	0x0000e172

00008fa4 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8fa4:	b538      	push	{r3, r4, r5, lr}
    8fa6:	4605      	mov	r5, r0
    8fa8:	460c      	mov	r4, r1
    8faa:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8fae:	b173      	cbz	r3, 8fce <z_impl_k_sleep+0x2a>
    8fb0:	4913      	ldr	r1, [pc, #76]	; (9000 <z_impl_k_sleep+0x5c>)
    8fb2:	4a14      	ldr	r2, [pc, #80]	; (9004 <z_impl_k_sleep+0x60>)
    8fb4:	4814      	ldr	r0, [pc, #80]	; (9008 <z_impl_k_sleep+0x64>)
    8fb6:	f240 537e 	movw	r3, #1406	; 0x57e
    8fba:	f001 ffbb 	bl	af34 <assert_print>
    8fbe:	4813      	ldr	r0, [pc, #76]	; (900c <z_impl_k_sleep+0x68>)
    8fc0:	f001 ffb8 	bl	af34 <assert_print>
    8fc4:	480f      	ldr	r0, [pc, #60]	; (9004 <z_impl_k_sleep+0x60>)
    8fc6:	f240 517e 	movw	r1, #1406	; 0x57e
    8fca:	f001 ffac 	bl	af26 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8fce:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8fd2:	bf08      	it	eq
    8fd4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8fd8:	d106      	bne.n	8fe8 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    8fda:	4b0d      	ldr	r3, [pc, #52]	; (9010 <z_impl_k_sleep+0x6c>)
    8fdc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8fde:	f7ff fd09 	bl	89f4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8fe6:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8fe8:	4628      	mov	r0, r5
    8fea:	4621      	mov	r1, r4
    8fec:	f7ff ff34 	bl	8e58 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    8ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8ff4:	fb80 0303 	smull	r0, r3, r0, r3
    8ff8:	0bc0      	lsrs	r0, r0, #15
    8ffa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8ffe:	e7f2      	b.n	8fe6 <z_impl_k_sleep+0x42>
    9000:	0000dee8 	.word	0x0000dee8
    9004:	0000e0c0 	.word	0x0000e0c0
    9008:	0000c986 	.word	0x0000c986
    900c:	0000e01e 	.word	0x0000e01e
    9010:	20000f1c 	.word	0x20000f1c

00009014 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    9014:	b538      	push	{r3, r4, r5, lr}
    9016:	4c0a      	ldr	r4, [pc, #40]	; (9040 <z_impl_k_usleep+0x2c>)
    9018:	4a0a      	ldr	r2, [pc, #40]	; (9044 <z_impl_k_usleep+0x30>)
    901a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    901e:	2100      	movs	r1, #0
    9020:	fbc0 4105 	smlal	r4, r1, r0, r5
    9024:	2300      	movs	r3, #0
    9026:	4620      	mov	r0, r4
    9028:	f7f7 fe06 	bl	c38 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    902c:	17c1      	asrs	r1, r0, #31
    902e:	f7ff ff13 	bl	8e58 <z_tick_sleep>
    9032:	4b04      	ldr	r3, [pc, #16]	; (9044 <z_impl_k_usleep+0x30>)
    9034:	fb80 0303 	smull	r0, r3, r0, r3
    9038:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    903a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    903e:	bd38      	pop	{r3, r4, r5, pc}
    9040:	000f423f 	.word	0x000f423f
    9044:	000f4240 	.word	0x000f4240

00009048 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9048:	4b01      	ldr	r3, [pc, #4]	; (9050 <z_impl_z_current_get+0x8>)
    904a:	6898      	ldr	r0, [r3, #8]
    904c:	4770      	bx	lr
    904e:	bf00      	nop
    9050:	20000f1c 	.word	0x20000f1c

00009054 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9058:	4604      	mov	r4, r0
    905a:	f04f 0320 	mov.w	r3, #32
    905e:	f3ef 8611 	mrs	r6, BASEPRI
    9062:	f383 8812 	msr	BASEPRI_MAX, r3
    9066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    906a:	4848      	ldr	r0, [pc, #288]	; (918c <z_thread_abort+0x138>)
    906c:	f7fe fc64 	bl	7938 <z_spin_lock_valid>
    9070:	b968      	cbnz	r0, 908e <z_thread_abort+0x3a>
    9072:	4a47      	ldr	r2, [pc, #284]	; (9190 <z_thread_abort+0x13c>)
    9074:	4947      	ldr	r1, [pc, #284]	; (9194 <z_thread_abort+0x140>)
    9076:	4848      	ldr	r0, [pc, #288]	; (9198 <z_thread_abort+0x144>)
    9078:	238e      	movs	r3, #142	; 0x8e
    907a:	f001 ff5b 	bl	af34 <assert_print>
    907e:	4943      	ldr	r1, [pc, #268]	; (918c <z_thread_abort+0x138>)
    9080:	4846      	ldr	r0, [pc, #280]	; (919c <z_thread_abort+0x148>)
    9082:	f001 ff57 	bl	af34 <assert_print>
    9086:	4842      	ldr	r0, [pc, #264]	; (9190 <z_thread_abort+0x13c>)
    9088:	218e      	movs	r1, #142	; 0x8e
    908a:	f001 ff4c 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    908e:	483f      	ldr	r0, [pc, #252]	; (918c <z_thread_abort+0x138>)
    9090:	f7fe fc70 	bl	7974 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9094:	7b63      	ldrb	r3, [r4, #13]
    9096:	071a      	lsls	r2, r3, #28
    9098:	d517      	bpl.n	90ca <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    909a:	483c      	ldr	r0, [pc, #240]	; (918c <z_thread_abort+0x138>)
    909c:	f7fe fc5a 	bl	7954 <z_spin_unlock_valid>
    90a0:	b968      	cbnz	r0, 90be <z_thread_abort+0x6a>
    90a2:	4a3b      	ldr	r2, [pc, #236]	; (9190 <z_thread_abort+0x13c>)
    90a4:	493e      	ldr	r1, [pc, #248]	; (91a0 <z_thread_abort+0x14c>)
    90a6:	483c      	ldr	r0, [pc, #240]	; (9198 <z_thread_abort+0x144>)
    90a8:	23b9      	movs	r3, #185	; 0xb9
    90aa:	f001 ff43 	bl	af34 <assert_print>
    90ae:	4937      	ldr	r1, [pc, #220]	; (918c <z_thread_abort+0x138>)
    90b0:	483c      	ldr	r0, [pc, #240]	; (91a4 <z_thread_abort+0x150>)
    90b2:	f001 ff3f 	bl	af34 <assert_print>
    90b6:	4836      	ldr	r0, [pc, #216]	; (9190 <z_thread_abort+0x13c>)
    90b8:	21b9      	movs	r1, #185	; 0xb9
    90ba:	f001 ff34 	bl	af26 <assert_post_action>
	__asm__ volatile(
    90be:	f386 8811 	msr	BASEPRI, r6
    90c2:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    90c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    90ca:	f023 0220 	bic.w	r2, r3, #32
    90ce:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    90d2:	09d2      	lsrs	r2, r2, #7
    90d4:	d142      	bne.n	915c <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    90d6:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    90d8:	68a3      	ldr	r3, [r4, #8]
    90da:	b113      	cbz	r3, 90e2 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    90dc:	4620      	mov	r0, r4
    90de:	f7ff fcf3 	bl	8ac8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    90e2:	f104 0018 	add.w	r0, r4, #24
    90e6:	f000 f999 	bl	941c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    90ea:	f104 0758 	add.w	r7, r4, #88	; 0x58
    90ee:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    90f2:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    90f4:	42bd      	cmp	r5, r7
    90f6:	d001      	beq.n	90fc <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    90f8:	2d00      	cmp	r5, #0
    90fa:	d139      	bne.n	9170 <z_thread_abort+0x11c>
		update_cache(1);
    90fc:	2001      	movs	r0, #1
    90fe:	f7fe ff0d 	bl	7f1c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9102:	4b29      	ldr	r3, [pc, #164]	; (91a8 <z_thread_abort+0x154>)
    9104:	689b      	ldr	r3, [r3, #8]
    9106:	42a3      	cmp	r3, r4
    9108:	d1c7      	bne.n	909a <z_thread_abort+0x46>
    910a:	f3ef 8305 	mrs	r3, IPSR
    910e:	2b00      	cmp	r3, #0
    9110:	d1c3      	bne.n	909a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9112:	481e      	ldr	r0, [pc, #120]	; (918c <z_thread_abort+0x138>)
    9114:	f7fe fc1e 	bl	7954 <z_spin_unlock_valid>
    9118:	b968      	cbnz	r0, 9136 <z_thread_abort+0xe2>
    911a:	4a1d      	ldr	r2, [pc, #116]	; (9190 <z_thread_abort+0x13c>)
    911c:	4920      	ldr	r1, [pc, #128]	; (91a0 <z_thread_abort+0x14c>)
    911e:	481e      	ldr	r0, [pc, #120]	; (9198 <z_thread_abort+0x144>)
    9120:	23d0      	movs	r3, #208	; 0xd0
    9122:	f001 ff07 	bl	af34 <assert_print>
    9126:	4919      	ldr	r1, [pc, #100]	; (918c <z_thread_abort+0x138>)
    9128:	481e      	ldr	r0, [pc, #120]	; (91a4 <z_thread_abort+0x150>)
    912a:	f001 ff03 	bl	af34 <assert_print>
    912e:	4818      	ldr	r0, [pc, #96]	; (9190 <z_thread_abort+0x13c>)
    9130:	21d0      	movs	r1, #208	; 0xd0
    9132:	f001 fef8 	bl	af26 <assert_post_action>
    9136:	4630      	mov	r0, r6
    9138:	f7fa fe8e 	bl	3e58 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    913c:	4a1b      	ldr	r2, [pc, #108]	; (91ac <z_thread_abort+0x158>)
    913e:	491c      	ldr	r1, [pc, #112]	; (91b0 <z_thread_abort+0x15c>)
    9140:	4815      	ldr	r0, [pc, #84]	; (9198 <z_thread_abort+0x144>)
    9142:	f240 63ac 	movw	r3, #1708	; 0x6ac
    9146:	f001 fef5 	bl	af34 <assert_print>
    914a:	481a      	ldr	r0, [pc, #104]	; (91b4 <z_thread_abort+0x160>)
    914c:	f001 fef2 	bl	af34 <assert_print>
    9150:	4816      	ldr	r0, [pc, #88]	; (91ac <z_thread_abort+0x158>)
    9152:	f240 61ac 	movw	r1, #1708	; 0x6ac
    9156:	f001 fee6 	bl	af26 <assert_post_action>
    915a:	e79e      	b.n	909a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    915c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9160:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    9164:	4814      	ldr	r0, [pc, #80]	; (91b8 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9166:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    9168:	4621      	mov	r1, r4
    916a:	f7ff f9d9 	bl	8520 <z_priq_dumb_remove>
}
    916e:	e7b3      	b.n	90d8 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    9170:	4628      	mov	r0, r5
    9172:	f7ff fca9 	bl	8ac8 <unpend_thread_no_timeout>
    9176:	f105 0018 	add.w	r0, r5, #24
    917a:	f000 f94f 	bl	941c <z_abort_timeout>
    917e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    9182:	4628      	mov	r0, r5
    9184:	f7fe ff02 	bl	7f8c <ready_thread>
    9188:	e7b3      	b.n	90f2 <z_thread_abort+0x9e>
    918a:	bf00      	nop
    918c:	20000f58 	.word	0x20000f58
    9190:	0000cad0 	.word	0x0000cad0
    9194:	0000cb29 	.word	0x0000cb29
    9198:	0000c986 	.word	0x0000c986
    919c:	0000cb3e 	.word	0x0000cb3e
    91a0:	0000cafd 	.word	0x0000cafd
    91a4:	0000cb14 	.word	0x0000cb14
    91a8:	20000f1c 	.word	0x20000f1c
    91ac:	0000e0c0 	.word	0x0000e0c0
    91b0:	0000e2d1 	.word	0x0000e2d1
    91b4:	0000e1b2 	.word	0x0000e1b2
    91b8:	20000f3c 	.word	0x20000f3c

000091bc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    91bc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    91be:	4806      	ldr	r0, [pc, #24]	; (91d8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    91c0:	4a06      	ldr	r2, [pc, #24]	; (91dc <z_data_copy+0x20>)
    91c2:	4907      	ldr	r1, [pc, #28]	; (91e0 <z_data_copy+0x24>)
    91c4:	1a12      	subs	r2, r2, r0
    91c6:	f002 fbc8 	bl	b95a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    91ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    91ce:	4a05      	ldr	r2, [pc, #20]	; (91e4 <z_data_copy+0x28>)
    91d0:	4905      	ldr	r1, [pc, #20]	; (91e8 <z_data_copy+0x2c>)
    91d2:	4806      	ldr	r0, [pc, #24]	; (91ec <z_data_copy+0x30>)
    91d4:	f002 bbc1 	b.w	b95a <z_early_memcpy>
    91d8:	20000000 	.word	0x20000000
    91dc:	2000026c 	.word	0x2000026c
    91e0:	0000e4fc 	.word	0x0000e4fc
    91e4:	00000000 	.word	0x00000000
    91e8:	0000e4fc 	.word	0x0000e4fc
    91ec:	20000000 	.word	0x20000000

000091f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    91f0:	4b03      	ldr	r3, [pc, #12]	; (9200 <elapsed+0x10>)
    91f2:	681b      	ldr	r3, [r3, #0]
    91f4:	b90b      	cbnz	r3, 91fa <elapsed+0xa>
    91f6:	f7fd b815 	b.w	6224 <sys_clock_elapsed>
}
    91fa:	2000      	movs	r0, #0
    91fc:	4770      	bx	lr
    91fe:	bf00      	nop
    9200:	20000f5c 	.word	0x20000f5c

00009204 <next_timeout>:
	return list->head == list;
    9204:	4b11      	ldr	r3, [pc, #68]	; (924c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    9206:	b510      	push	{r4, lr}
    9208:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    920a:	429c      	cmp	r4, r3
    920c:	d10a      	bne.n	9224 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    920e:	f7ff ffef 	bl	91f0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    9212:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9216:	4b0e      	ldr	r3, [pc, #56]	; (9250 <next_timeout+0x4c>)
    9218:	691b      	ldr	r3, [r3, #16]
    921a:	b113      	cbz	r3, 9222 <next_timeout+0x1e>
    921c:	4298      	cmp	r0, r3
    921e:	bfa8      	it	ge
    9220:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    9222:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    9224:	f7ff ffe4 	bl	91f0 <elapsed>
	if ((to == NULL) ||
    9228:	2c00      	cmp	r4, #0
    922a:	d0f2      	beq.n	9212 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    922c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9230:	1a1b      	subs	r3, r3, r0
    9232:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    9236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    923a:	f172 0100 	sbcs.w	r1, r2, #0
    923e:	dae8      	bge.n	9212 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9240:	2a00      	cmp	r2, #0
    9242:	bfac      	ite	ge
    9244:	4618      	movge	r0, r3
    9246:	2000      	movlt	r0, #0
    9248:	e7e5      	b.n	9216 <next_timeout+0x12>
    924a:	bf00      	nop
    924c:	200000e8 	.word	0x200000e8
    9250:	20000f1c 	.word	0x20000f1c

00009254 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    9254:	4a0b      	ldr	r2, [pc, #44]	; (9284 <remove_timeout+0x30>)
    9256:	6803      	ldr	r3, [r0, #0]
    9258:	6852      	ldr	r2, [r2, #4]
    925a:	4290      	cmp	r0, r2
{
    925c:	b530      	push	{r4, r5, lr}
    925e:	d009      	beq.n	9274 <remove_timeout+0x20>
	if (next(t) != NULL) {
    9260:	b143      	cbz	r3, 9274 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    9262:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9266:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    926a:	1912      	adds	r2, r2, r4
    926c:	eb41 0105 	adc.w	r1, r1, r5
    9270:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    9274:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    9276:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9278:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    927a:	2300      	movs	r3, #0
	node->prev = NULL;
    927c:	e9c0 3300 	strd	r3, r3, [r0]
}
    9280:	bd30      	pop	{r4, r5, pc}
    9282:	bf00      	nop
    9284:	200000e8 	.word	0x200000e8

00009288 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    928c:	bf08      	it	eq
    928e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9292:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9296:	4604      	mov	r4, r0
    9298:	460e      	mov	r6, r1
    929a:	4691      	mov	r9, r2
    929c:	461d      	mov	r5, r3
    929e:	4617      	mov	r7, r2
    92a0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    92a2:	f000 8095 	beq.w	93d0 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    92a6:	6803      	ldr	r3, [r0, #0]
    92a8:	b163      	cbz	r3, 92c4 <z_add_timeout+0x3c>
    92aa:	494f      	ldr	r1, [pc, #316]	; (93e8 <z_add_timeout+0x160>)
    92ac:	4a4f      	ldr	r2, [pc, #316]	; (93ec <z_add_timeout+0x164>)
    92ae:	4850      	ldr	r0, [pc, #320]	; (93f0 <z_add_timeout+0x168>)
    92b0:	2363      	movs	r3, #99	; 0x63
    92b2:	f001 fe3f 	bl	af34 <assert_print>
    92b6:	484f      	ldr	r0, [pc, #316]	; (93f4 <z_add_timeout+0x16c>)
    92b8:	f001 fe3c 	bl	af34 <assert_print>
    92bc:	484b      	ldr	r0, [pc, #300]	; (93ec <z_add_timeout+0x164>)
    92be:	2163      	movs	r1, #99	; 0x63
    92c0:	f001 fe31 	bl	af26 <assert_post_action>
	to->fn = fn;
    92c4:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    92c6:	f04f 0320 	mov.w	r3, #32
    92ca:	f3ef 8611 	mrs	r6, BASEPRI
    92ce:	f383 8812 	msr	BASEPRI_MAX, r3
    92d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92d6:	4848      	ldr	r0, [pc, #288]	; (93f8 <z_add_timeout+0x170>)
    92d8:	f7fe fb2e 	bl	7938 <z_spin_lock_valid>
    92dc:	b968      	cbnz	r0, 92fa <z_add_timeout+0x72>
    92de:	4a47      	ldr	r2, [pc, #284]	; (93fc <z_add_timeout+0x174>)
    92e0:	4947      	ldr	r1, [pc, #284]	; (9400 <z_add_timeout+0x178>)
    92e2:	4843      	ldr	r0, [pc, #268]	; (93f0 <z_add_timeout+0x168>)
    92e4:	238e      	movs	r3, #142	; 0x8e
    92e6:	f001 fe25 	bl	af34 <assert_print>
    92ea:	4943      	ldr	r1, [pc, #268]	; (93f8 <z_add_timeout+0x170>)
    92ec:	4845      	ldr	r0, [pc, #276]	; (9404 <z_add_timeout+0x17c>)
    92ee:	f001 fe21 	bl	af34 <assert_print>
    92f2:	4842      	ldr	r0, [pc, #264]	; (93fc <z_add_timeout+0x174>)
    92f4:	218e      	movs	r1, #142	; 0x8e
    92f6:	f001 fe16 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    92fa:	483f      	ldr	r0, [pc, #252]	; (93f8 <z_add_timeout+0x170>)
    92fc:	f7fe fb3a 	bl	7974 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9300:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    9304:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    9308:	da22      	bge.n	9350 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    930a:	493f      	ldr	r1, [pc, #252]	; (9408 <z_add_timeout+0x180>)
    930c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9310:	f06f 0301 	mvn.w	r3, #1
    9314:	1a9b      	subs	r3, r3, r2
    9316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    931a:	eb62 0000 	sbc.w	r0, r2, r0
    931e:	1bdf      	subs	r7, r3, r7
    9320:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    9324:	2f01      	cmp	r7, #1
    9326:	f170 0300 	sbcs.w	r3, r0, #0
    932a:	da01      	bge.n	9330 <z_add_timeout+0xa8>
    932c:	2701      	movs	r7, #1
    932e:	2000      	movs	r0, #0
	return list->head == list;
    9330:	4a36      	ldr	r2, [pc, #216]	; (940c <z_add_timeout+0x184>)
    9332:	e9c4 7004 	strd	r7, r0, [r4, #16]
    9336:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    9338:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    933c:	4293      	cmp	r3, r2
    933e:	bf08      	it	eq
    9340:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    9342:	b973      	cbnz	r3, 9362 <z_add_timeout+0xda>
	node->prev = tail;
    9344:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    9348:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    934c:	6054      	str	r4, [r2, #4]
}
    934e:	e01a      	b.n	9386 <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    9350:	f7ff ff4e 	bl	91f0 <elapsed>
    9354:	3701      	adds	r7, #1
    9356:	f145 0500 	adc.w	r5, r5, #0
    935a:	183f      	adds	r7, r7, r0
    935c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9360:	e7e6      	b.n	9330 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    9362:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    9366:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    936a:	4281      	cmp	r1, r0
    936c:	eb75 0e07 	sbcs.w	lr, r5, r7
    9370:	da30      	bge.n	93d4 <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    9372:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    9374:	6859      	ldr	r1, [r3, #4]
    9376:	eb67 0705 	sbc.w	r7, r7, r5
    937a:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    937e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    9382:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    9384:	605c      	str	r4, [r3, #4]
	return list->head == list;
    9386:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9388:	4293      	cmp	r3, r2
    938a:	d00b      	beq.n	93a4 <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    938c:	429c      	cmp	r4, r3
    938e:	d109      	bne.n	93a4 <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9390:	f7ff ff38 	bl	9204 <next_timeout>

			if (next_time == 0 ||
    9394:	b118      	cbz	r0, 939e <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    9396:	4b1e      	ldr	r3, [pc, #120]	; (9410 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    9398:	691b      	ldr	r3, [r3, #16]
    939a:	4283      	cmp	r3, r0
    939c:	d002      	beq.n	93a4 <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    939e:	2100      	movs	r1, #0
    93a0:	f7fc ff0e 	bl	61c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93a4:	4814      	ldr	r0, [pc, #80]	; (93f8 <z_add_timeout+0x170>)
    93a6:	f7fe fad5 	bl	7954 <z_spin_unlock_valid>
    93aa:	b968      	cbnz	r0, 93c8 <z_add_timeout+0x140>
    93ac:	4a13      	ldr	r2, [pc, #76]	; (93fc <z_add_timeout+0x174>)
    93ae:	4919      	ldr	r1, [pc, #100]	; (9414 <z_add_timeout+0x18c>)
    93b0:	480f      	ldr	r0, [pc, #60]	; (93f0 <z_add_timeout+0x168>)
    93b2:	23b9      	movs	r3, #185	; 0xb9
    93b4:	f001 fdbe 	bl	af34 <assert_print>
    93b8:	490f      	ldr	r1, [pc, #60]	; (93f8 <z_add_timeout+0x170>)
    93ba:	4817      	ldr	r0, [pc, #92]	; (9418 <z_add_timeout+0x190>)
    93bc:	f001 fdba 	bl	af34 <assert_print>
    93c0:	480e      	ldr	r0, [pc, #56]	; (93fc <z_add_timeout+0x174>)
    93c2:	21b9      	movs	r1, #185	; 0xb9
    93c4:	f001 fdaf 	bl	af26 <assert_post_action>
	__asm__ volatile(
    93c8:	f386 8811 	msr	BASEPRI, r6
    93cc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    93d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    93d4:	1a09      	subs	r1, r1, r0
    93d6:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    93da:	4563      	cmp	r3, ip
    93dc:	e9c4 1504 	strd	r1, r5, [r4, #16]
    93e0:	d0b0      	beq.n	9344 <z_add_timeout+0xbc>
    93e2:	681b      	ldr	r3, [r3, #0]
    93e4:	e7ad      	b.n	9342 <z_add_timeout+0xba>
    93e6:	bf00      	nop
    93e8:	0000e1f8 	.word	0x0000e1f8
    93ec:	0000e1d4 	.word	0x0000e1d4
    93f0:	0000c986 	.word	0x0000c986
    93f4:	0000e01e 	.word	0x0000e01e
    93f8:	20000f60 	.word	0x20000f60
    93fc:	0000cad0 	.word	0x0000cad0
    9400:	0000cb29 	.word	0x0000cb29
    9404:	0000cb3e 	.word	0x0000cb3e
    9408:	200007c0 	.word	0x200007c0
    940c:	200000e8 	.word	0x200000e8
    9410:	20000f1c 	.word	0x20000f1c
    9414:	0000cafd 	.word	0x0000cafd
    9418:	0000cb14 	.word	0x0000cb14

0000941c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    941c:	b538      	push	{r3, r4, r5, lr}
    941e:	4604      	mov	r4, r0
	__asm__ volatile(
    9420:	f04f 0320 	mov.w	r3, #32
    9424:	f3ef 8511 	mrs	r5, BASEPRI
    9428:	f383 8812 	msr	BASEPRI_MAX, r3
    942c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9430:	481a      	ldr	r0, [pc, #104]	; (949c <z_abort_timeout+0x80>)
    9432:	f7fe fa81 	bl	7938 <z_spin_lock_valid>
    9436:	b968      	cbnz	r0, 9454 <z_abort_timeout+0x38>
    9438:	4a19      	ldr	r2, [pc, #100]	; (94a0 <z_abort_timeout+0x84>)
    943a:	491a      	ldr	r1, [pc, #104]	; (94a4 <z_abort_timeout+0x88>)
    943c:	481a      	ldr	r0, [pc, #104]	; (94a8 <z_abort_timeout+0x8c>)
    943e:	238e      	movs	r3, #142	; 0x8e
    9440:	f001 fd78 	bl	af34 <assert_print>
    9444:	4915      	ldr	r1, [pc, #84]	; (949c <z_abort_timeout+0x80>)
    9446:	4819      	ldr	r0, [pc, #100]	; (94ac <z_abort_timeout+0x90>)
    9448:	f001 fd74 	bl	af34 <assert_print>
    944c:	4814      	ldr	r0, [pc, #80]	; (94a0 <z_abort_timeout+0x84>)
    944e:	218e      	movs	r1, #142	; 0x8e
    9450:	f001 fd69 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9454:	4811      	ldr	r0, [pc, #68]	; (949c <z_abort_timeout+0x80>)
    9456:	f7fe fa8d 	bl	7974 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    945a:	6823      	ldr	r3, [r4, #0]
    945c:	b1db      	cbz	r3, 9496 <z_abort_timeout+0x7a>
			remove_timeout(to);
    945e:	4620      	mov	r0, r4
    9460:	f7ff fef8 	bl	9254 <remove_timeout>
			ret = 0;
    9464:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9466:	480d      	ldr	r0, [pc, #52]	; (949c <z_abort_timeout+0x80>)
    9468:	f7fe fa74 	bl	7954 <z_spin_unlock_valid>
    946c:	b968      	cbnz	r0, 948a <z_abort_timeout+0x6e>
    946e:	4a0c      	ldr	r2, [pc, #48]	; (94a0 <z_abort_timeout+0x84>)
    9470:	490f      	ldr	r1, [pc, #60]	; (94b0 <z_abort_timeout+0x94>)
    9472:	480d      	ldr	r0, [pc, #52]	; (94a8 <z_abort_timeout+0x8c>)
    9474:	23b9      	movs	r3, #185	; 0xb9
    9476:	f001 fd5d 	bl	af34 <assert_print>
    947a:	4908      	ldr	r1, [pc, #32]	; (949c <z_abort_timeout+0x80>)
    947c:	480d      	ldr	r0, [pc, #52]	; (94b4 <z_abort_timeout+0x98>)
    947e:	f001 fd59 	bl	af34 <assert_print>
    9482:	4807      	ldr	r0, [pc, #28]	; (94a0 <z_abort_timeout+0x84>)
    9484:	21b9      	movs	r1, #185	; 0xb9
    9486:	f001 fd4e 	bl	af26 <assert_post_action>
	__asm__ volatile(
    948a:	f385 8811 	msr	BASEPRI, r5
    948e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    9492:	4620      	mov	r0, r4
    9494:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    9496:	f06f 0415 	mvn.w	r4, #21
    949a:	e7e4      	b.n	9466 <z_abort_timeout+0x4a>
    949c:	20000f60 	.word	0x20000f60
    94a0:	0000cad0 	.word	0x0000cad0
    94a4:	0000cb29 	.word	0x0000cb29
    94a8:	0000c986 	.word	0x0000c986
    94ac:	0000cb3e 	.word	0x0000cb3e
    94b0:	0000cafd 	.word	0x0000cafd
    94b4:	0000cb14 	.word	0x0000cb14

000094b8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    94b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    94ba:	f04f 0320 	mov.w	r3, #32
    94be:	f3ef 8511 	mrs	r5, BASEPRI
    94c2:	f383 8812 	msr	BASEPRI_MAX, r3
    94c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94ca:	4818      	ldr	r0, [pc, #96]	; (952c <z_get_next_timeout_expiry+0x74>)
    94cc:	f7fe fa34 	bl	7938 <z_spin_lock_valid>
    94d0:	b968      	cbnz	r0, 94ee <z_get_next_timeout_expiry+0x36>
    94d2:	4a17      	ldr	r2, [pc, #92]	; (9530 <z_get_next_timeout_expiry+0x78>)
    94d4:	4917      	ldr	r1, [pc, #92]	; (9534 <z_get_next_timeout_expiry+0x7c>)
    94d6:	4818      	ldr	r0, [pc, #96]	; (9538 <z_get_next_timeout_expiry+0x80>)
    94d8:	238e      	movs	r3, #142	; 0x8e
    94da:	f001 fd2b 	bl	af34 <assert_print>
    94de:	4913      	ldr	r1, [pc, #76]	; (952c <z_get_next_timeout_expiry+0x74>)
    94e0:	4816      	ldr	r0, [pc, #88]	; (953c <z_get_next_timeout_expiry+0x84>)
    94e2:	f001 fd27 	bl	af34 <assert_print>
    94e6:	4812      	ldr	r0, [pc, #72]	; (9530 <z_get_next_timeout_expiry+0x78>)
    94e8:	218e      	movs	r1, #142	; 0x8e
    94ea:	f001 fd1c 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    94ee:	480f      	ldr	r0, [pc, #60]	; (952c <z_get_next_timeout_expiry+0x74>)
    94f0:	f7fe fa40 	bl	7974 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    94f4:	f7ff fe86 	bl	9204 <next_timeout>
    94f8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94fa:	480c      	ldr	r0, [pc, #48]	; (952c <z_get_next_timeout_expiry+0x74>)
    94fc:	f7fe fa2a 	bl	7954 <z_spin_unlock_valid>
    9500:	b968      	cbnz	r0, 951e <z_get_next_timeout_expiry+0x66>
    9502:	4a0b      	ldr	r2, [pc, #44]	; (9530 <z_get_next_timeout_expiry+0x78>)
    9504:	490e      	ldr	r1, [pc, #56]	; (9540 <z_get_next_timeout_expiry+0x88>)
    9506:	480c      	ldr	r0, [pc, #48]	; (9538 <z_get_next_timeout_expiry+0x80>)
    9508:	23b9      	movs	r3, #185	; 0xb9
    950a:	f001 fd13 	bl	af34 <assert_print>
    950e:	4907      	ldr	r1, [pc, #28]	; (952c <z_get_next_timeout_expiry+0x74>)
    9510:	480c      	ldr	r0, [pc, #48]	; (9544 <z_get_next_timeout_expiry+0x8c>)
    9512:	f001 fd0f 	bl	af34 <assert_print>
    9516:	4806      	ldr	r0, [pc, #24]	; (9530 <z_get_next_timeout_expiry+0x78>)
    9518:	21b9      	movs	r1, #185	; 0xb9
    951a:	f001 fd04 	bl	af26 <assert_post_action>
	__asm__ volatile(
    951e:	f385 8811 	msr	BASEPRI, r5
    9522:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    9526:	4620      	mov	r0, r4
    9528:	bd38      	pop	{r3, r4, r5, pc}
    952a:	bf00      	nop
    952c:	20000f60 	.word	0x20000f60
    9530:	0000cad0 	.word	0x0000cad0
    9534:	0000cb29 	.word	0x0000cb29
    9538:	0000c986 	.word	0x0000c986
    953c:	0000cb3e 	.word	0x0000cb3e
    9540:	0000cafd 	.word	0x0000cafd
    9544:	0000cb14 	.word	0x0000cb14

00009548 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9548:	b570      	push	{r4, r5, r6, lr}
    954a:	4604      	mov	r4, r0
    954c:	460d      	mov	r5, r1
	__asm__ volatile(
    954e:	f04f 0320 	mov.w	r3, #32
    9552:	f3ef 8611 	mrs	r6, BASEPRI
    9556:	f383 8812 	msr	BASEPRI_MAX, r3
    955a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    955e:	481c      	ldr	r0, [pc, #112]	; (95d0 <z_set_timeout_expiry+0x88>)
    9560:	f7fe f9ea 	bl	7938 <z_spin_lock_valid>
    9564:	b968      	cbnz	r0, 9582 <z_set_timeout_expiry+0x3a>
    9566:	4a1b      	ldr	r2, [pc, #108]	; (95d4 <z_set_timeout_expiry+0x8c>)
    9568:	491b      	ldr	r1, [pc, #108]	; (95d8 <z_set_timeout_expiry+0x90>)
    956a:	481c      	ldr	r0, [pc, #112]	; (95dc <z_set_timeout_expiry+0x94>)
    956c:	238e      	movs	r3, #142	; 0x8e
    956e:	f001 fce1 	bl	af34 <assert_print>
    9572:	4917      	ldr	r1, [pc, #92]	; (95d0 <z_set_timeout_expiry+0x88>)
    9574:	481a      	ldr	r0, [pc, #104]	; (95e0 <z_set_timeout_expiry+0x98>)
    9576:	f001 fcdd 	bl	af34 <assert_print>
    957a:	4816      	ldr	r0, [pc, #88]	; (95d4 <z_set_timeout_expiry+0x8c>)
    957c:	218e      	movs	r1, #142	; 0x8e
    957e:	f001 fcd2 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9582:	4813      	ldr	r0, [pc, #76]	; (95d0 <z_set_timeout_expiry+0x88>)
    9584:	f7fe f9f6 	bl	7974 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    9588:	f7ff fe3c 	bl	9204 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    958c:	2801      	cmp	r0, #1
    958e:	dd07      	ble.n	95a0 <z_set_timeout_expiry+0x58>
    9590:	42a0      	cmp	r0, r4
    9592:	db05      	blt.n	95a0 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9594:	42a0      	cmp	r0, r4
    9596:	4629      	mov	r1, r5
    9598:	bfa8      	it	ge
    959a:	4620      	movge	r0, r4
    959c:	f7fc fe10 	bl	61c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95a0:	480b      	ldr	r0, [pc, #44]	; (95d0 <z_set_timeout_expiry+0x88>)
    95a2:	f7fe f9d7 	bl	7954 <z_spin_unlock_valid>
    95a6:	b968      	cbnz	r0, 95c4 <z_set_timeout_expiry+0x7c>
    95a8:	4a0a      	ldr	r2, [pc, #40]	; (95d4 <z_set_timeout_expiry+0x8c>)
    95aa:	490e      	ldr	r1, [pc, #56]	; (95e4 <z_set_timeout_expiry+0x9c>)
    95ac:	480b      	ldr	r0, [pc, #44]	; (95dc <z_set_timeout_expiry+0x94>)
    95ae:	23b9      	movs	r3, #185	; 0xb9
    95b0:	f001 fcc0 	bl	af34 <assert_print>
    95b4:	4906      	ldr	r1, [pc, #24]	; (95d0 <z_set_timeout_expiry+0x88>)
    95b6:	480c      	ldr	r0, [pc, #48]	; (95e8 <z_set_timeout_expiry+0xa0>)
    95b8:	f001 fcbc 	bl	af34 <assert_print>
    95bc:	4805      	ldr	r0, [pc, #20]	; (95d4 <z_set_timeout_expiry+0x8c>)
    95be:	21b9      	movs	r1, #185	; 0xb9
    95c0:	f001 fcb1 	bl	af26 <assert_post_action>
	__asm__ volatile(
    95c4:	f386 8811 	msr	BASEPRI, r6
    95c8:	f3bf 8f6f 	isb	sy
		}
	}
}
    95cc:	bd70      	pop	{r4, r5, r6, pc}
    95ce:	bf00      	nop
    95d0:	20000f60 	.word	0x20000f60
    95d4:	0000cad0 	.word	0x0000cad0
    95d8:	0000cb29 	.word	0x0000cb29
    95dc:	0000c986 	.word	0x0000c986
    95e0:	0000cb3e 	.word	0x0000cb3e
    95e4:	0000cafd 	.word	0x0000cafd
    95e8:	0000cb14 	.word	0x0000cb14

000095ec <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    95ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    95f0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    95f2:	f7ff f809 	bl	8608 <z_time_slice>
	__asm__ volatile(
    95f6:	f04f 0320 	mov.w	r3, #32
    95fa:	f3ef 8511 	mrs	r5, BASEPRI
    95fe:	f383 8812 	msr	BASEPRI_MAX, r3
    9602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9606:	484c      	ldr	r0, [pc, #304]	; (9738 <sys_clock_announce+0x14c>)
    9608:	f7fe f996 	bl	7938 <z_spin_lock_valid>
    960c:	b968      	cbnz	r0, 962a <sys_clock_announce+0x3e>
    960e:	4a4b      	ldr	r2, [pc, #300]	; (973c <sys_clock_announce+0x150>)
    9610:	494b      	ldr	r1, [pc, #300]	; (9740 <sys_clock_announce+0x154>)
    9612:	484c      	ldr	r0, [pc, #304]	; (9744 <sys_clock_announce+0x158>)
    9614:	238e      	movs	r3, #142	; 0x8e
    9616:	f001 fc8d 	bl	af34 <assert_print>
    961a:	4947      	ldr	r1, [pc, #284]	; (9738 <sys_clock_announce+0x14c>)
    961c:	484a      	ldr	r0, [pc, #296]	; (9748 <sys_clock_announce+0x15c>)
    961e:	f001 fc89 	bl	af34 <assert_print>
    9622:	4846      	ldr	r0, [pc, #280]	; (973c <sys_clock_announce+0x150>)
    9624:	218e      	movs	r1, #142	; 0x8e
    9626:	f001 fc7e 	bl	af26 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    962a:	4f48      	ldr	r7, [pc, #288]	; (974c <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    962c:	4842      	ldr	r0, [pc, #264]	; (9738 <sys_clock_announce+0x14c>)
	return list->head == list;
    962e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9750 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9632:	4e48      	ldr	r6, [pc, #288]	; (9754 <sys_clock_announce+0x168>)
    9634:	f7fe f99e 	bl	7974 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    9638:	603c      	str	r4, [r7, #0]
    963a:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    963e:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9640:	4544      	cmp	r4, r8
		curr_tick += dt;
    9642:	e9d6 1e00 	ldrd	r1, lr, [r6]
    9646:	ea4f 70e2 	mov.w	r0, r2, asr #31
    964a:	d00b      	beq.n	9664 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    964c:	b154      	cbz	r4, 9664 <sys_clock_announce+0x78>
    964e:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    9652:	429a      	cmp	r2, r3
    9654:	eb70 090c 	sbcs.w	r9, r0, ip
    9658:	da28      	bge.n	96ac <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    965a:	1a9b      	subs	r3, r3, r2
    965c:	eb6c 0c00 	sbc.w	ip, ip, r0
    9660:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    9664:	1851      	adds	r1, r2, r1
    9666:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    966a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    966c:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    9670:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9672:	f7ff fdc7 	bl	9204 <next_timeout>
    9676:	4621      	mov	r1, r4
    9678:	f7fc fda2 	bl	61c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    967c:	482e      	ldr	r0, [pc, #184]	; (9738 <sys_clock_announce+0x14c>)
    967e:	f7fe f969 	bl	7954 <z_spin_unlock_valid>
    9682:	b968      	cbnz	r0, 96a0 <sys_clock_announce+0xb4>
    9684:	4a2d      	ldr	r2, [pc, #180]	; (973c <sys_clock_announce+0x150>)
    9686:	4934      	ldr	r1, [pc, #208]	; (9758 <sys_clock_announce+0x16c>)
    9688:	482e      	ldr	r0, [pc, #184]	; (9744 <sys_clock_announce+0x158>)
    968a:	23b9      	movs	r3, #185	; 0xb9
    968c:	f001 fc52 	bl	af34 <assert_print>
    9690:	4929      	ldr	r1, [pc, #164]	; (9738 <sys_clock_announce+0x14c>)
    9692:	4832      	ldr	r0, [pc, #200]	; (975c <sys_clock_announce+0x170>)
    9694:	f001 fc4e 	bl	af34 <assert_print>
    9698:	4828      	ldr	r0, [pc, #160]	; (973c <sys_clock_announce+0x150>)
    969a:	21b9      	movs	r1, #185	; 0xb9
    969c:	f001 fc43 	bl	af26 <assert_post_action>
	__asm__ volatile(
    96a0:	f385 8811 	msr	BASEPRI, r5
    96a4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    96a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    96ac:	1859      	adds	r1, r3, r1
    96ae:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    96b2:	1ad3      	subs	r3, r2, r3
    96b4:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    96b6:	2200      	movs	r2, #0
    96b8:	2300      	movs	r3, #0
		curr_tick += dt;
    96ba:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    96be:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    96c2:	4620      	mov	r0, r4
    96c4:	f7ff fdc6 	bl	9254 <remove_timeout>
    96c8:	481b      	ldr	r0, [pc, #108]	; (9738 <sys_clock_announce+0x14c>)
    96ca:	f7fe f943 	bl	7954 <z_spin_unlock_valid>
    96ce:	b968      	cbnz	r0, 96ec <sys_clock_announce+0x100>
    96d0:	4a1a      	ldr	r2, [pc, #104]	; (973c <sys_clock_announce+0x150>)
    96d2:	4921      	ldr	r1, [pc, #132]	; (9758 <sys_clock_announce+0x16c>)
    96d4:	481b      	ldr	r0, [pc, #108]	; (9744 <sys_clock_announce+0x158>)
    96d6:	23b9      	movs	r3, #185	; 0xb9
    96d8:	f001 fc2c 	bl	af34 <assert_print>
    96dc:	4916      	ldr	r1, [pc, #88]	; (9738 <sys_clock_announce+0x14c>)
    96de:	481f      	ldr	r0, [pc, #124]	; (975c <sys_clock_announce+0x170>)
    96e0:	f001 fc28 	bl	af34 <assert_print>
    96e4:	4815      	ldr	r0, [pc, #84]	; (973c <sys_clock_announce+0x150>)
    96e6:	21b9      	movs	r1, #185	; 0xb9
    96e8:	f001 fc1d 	bl	af26 <assert_post_action>
    96ec:	f385 8811 	msr	BASEPRI, r5
    96f0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    96f4:	68a3      	ldr	r3, [r4, #8]
    96f6:	4620      	mov	r0, r4
    96f8:	4798      	blx	r3
	__asm__ volatile(
    96fa:	f04f 0320 	mov.w	r3, #32
    96fe:	f3ef 8511 	mrs	r5, BASEPRI
    9702:	f383 8812 	msr	BASEPRI_MAX, r3
    9706:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    970a:	480b      	ldr	r0, [pc, #44]	; (9738 <sys_clock_announce+0x14c>)
    970c:	f7fe f914 	bl	7938 <z_spin_lock_valid>
    9710:	b968      	cbnz	r0, 972e <sys_clock_announce+0x142>
    9712:	4a0a      	ldr	r2, [pc, #40]	; (973c <sys_clock_announce+0x150>)
    9714:	490a      	ldr	r1, [pc, #40]	; (9740 <sys_clock_announce+0x154>)
    9716:	480b      	ldr	r0, [pc, #44]	; (9744 <sys_clock_announce+0x158>)
    9718:	238e      	movs	r3, #142	; 0x8e
    971a:	f001 fc0b 	bl	af34 <assert_print>
    971e:	4906      	ldr	r1, [pc, #24]	; (9738 <sys_clock_announce+0x14c>)
    9720:	4809      	ldr	r0, [pc, #36]	; (9748 <sys_clock_announce+0x15c>)
    9722:	f001 fc07 	bl	af34 <assert_print>
    9726:	4805      	ldr	r0, [pc, #20]	; (973c <sys_clock_announce+0x150>)
    9728:	218e      	movs	r1, #142	; 0x8e
    972a:	f001 fbfc 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    972e:	4802      	ldr	r0, [pc, #8]	; (9738 <sys_clock_announce+0x14c>)
    9730:	f7fe f920 	bl	7974 <z_spin_lock_set_owner>
	return k;
    9734:	e781      	b.n	963a <sys_clock_announce+0x4e>
    9736:	bf00      	nop
    9738:	20000f60 	.word	0x20000f60
    973c:	0000cad0 	.word	0x0000cad0
    9740:	0000cb29 	.word	0x0000cb29
    9744:	0000c986 	.word	0x0000c986
    9748:	0000cb3e 	.word	0x0000cb3e
    974c:	20000f5c 	.word	0x20000f5c
    9750:	200000e8 	.word	0x200000e8
    9754:	200007c0 	.word	0x200007c0
    9758:	0000cafd 	.word	0x0000cafd
    975c:	0000cb14 	.word	0x0000cb14

00009760 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9760:	b570      	push	{r4, r5, r6, lr}
    9762:	f04f 0320 	mov.w	r3, #32
    9766:	f3ef 8611 	mrs	r6, BASEPRI
    976a:	f383 8812 	msr	BASEPRI_MAX, r3
    976e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9772:	481b      	ldr	r0, [pc, #108]	; (97e0 <sys_clock_tick_get+0x80>)
    9774:	f7fe f8e0 	bl	7938 <z_spin_lock_valid>
    9778:	b968      	cbnz	r0, 9796 <sys_clock_tick_get+0x36>
    977a:	4a1a      	ldr	r2, [pc, #104]	; (97e4 <sys_clock_tick_get+0x84>)
    977c:	491a      	ldr	r1, [pc, #104]	; (97e8 <sys_clock_tick_get+0x88>)
    977e:	481b      	ldr	r0, [pc, #108]	; (97ec <sys_clock_tick_get+0x8c>)
    9780:	238e      	movs	r3, #142	; 0x8e
    9782:	f001 fbd7 	bl	af34 <assert_print>
    9786:	4916      	ldr	r1, [pc, #88]	; (97e0 <sys_clock_tick_get+0x80>)
    9788:	4819      	ldr	r0, [pc, #100]	; (97f0 <sys_clock_tick_get+0x90>)
    978a:	f001 fbd3 	bl	af34 <assert_print>
    978e:	4815      	ldr	r0, [pc, #84]	; (97e4 <sys_clock_tick_get+0x84>)
    9790:	218e      	movs	r1, #142	; 0x8e
    9792:	f001 fbc8 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9796:	4812      	ldr	r0, [pc, #72]	; (97e0 <sys_clock_tick_get+0x80>)
    9798:	f7fe f8ec 	bl	7974 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    979c:	f7fc fd42 	bl	6224 <sys_clock_elapsed>
    97a0:	4a14      	ldr	r2, [pc, #80]	; (97f4 <sys_clock_tick_get+0x94>)
    97a2:	e9d2 4500 	ldrd	r4, r5, [r2]
    97a6:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97a8:	480d      	ldr	r0, [pc, #52]	; (97e0 <sys_clock_tick_get+0x80>)
    97aa:	f145 0500 	adc.w	r5, r5, #0
    97ae:	f7fe f8d1 	bl	7954 <z_spin_unlock_valid>
    97b2:	b968      	cbnz	r0, 97d0 <sys_clock_tick_get+0x70>
    97b4:	4a0b      	ldr	r2, [pc, #44]	; (97e4 <sys_clock_tick_get+0x84>)
    97b6:	4910      	ldr	r1, [pc, #64]	; (97f8 <sys_clock_tick_get+0x98>)
    97b8:	480c      	ldr	r0, [pc, #48]	; (97ec <sys_clock_tick_get+0x8c>)
    97ba:	23b9      	movs	r3, #185	; 0xb9
    97bc:	f001 fbba 	bl	af34 <assert_print>
    97c0:	4907      	ldr	r1, [pc, #28]	; (97e0 <sys_clock_tick_get+0x80>)
    97c2:	480e      	ldr	r0, [pc, #56]	; (97fc <sys_clock_tick_get+0x9c>)
    97c4:	f001 fbb6 	bl	af34 <assert_print>
    97c8:	4806      	ldr	r0, [pc, #24]	; (97e4 <sys_clock_tick_get+0x84>)
    97ca:	21b9      	movs	r1, #185	; 0xb9
    97cc:	f001 fbab 	bl	af26 <assert_post_action>
	__asm__ volatile(
    97d0:	f386 8811 	msr	BASEPRI, r6
    97d4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    97d8:	4620      	mov	r0, r4
    97da:	4629      	mov	r1, r5
    97dc:	bd70      	pop	{r4, r5, r6, pc}
    97de:	bf00      	nop
    97e0:	20000f60 	.word	0x20000f60
    97e4:	0000cad0 	.word	0x0000cad0
    97e8:	0000cb29 	.word	0x0000cb29
    97ec:	0000c986 	.word	0x0000c986
    97f0:	0000cb3e 	.word	0x0000cb3e
    97f4:	200007c0 	.word	0x200007c0
    97f8:	0000cafd 	.word	0x0000cafd
    97fc:	0000cb14 	.word	0x0000cb14

00009800 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9800:	b570      	push	{r4, r5, r6, lr}
    9802:	4604      	mov	r4, r0
	__asm__ volatile(
    9804:	f04f 0320 	mov.w	r3, #32
    9808:	f3ef 8511 	mrs	r5, BASEPRI
    980c:	f383 8812 	msr	BASEPRI_MAX, r3
    9810:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9814:	484d      	ldr	r0, [pc, #308]	; (994c <z_timer_expiration_handler+0x14c>)
    9816:	f7fe f88f 	bl	7938 <z_spin_lock_valid>
    981a:	b968      	cbnz	r0, 9838 <z_timer_expiration_handler+0x38>
    981c:	4a4c      	ldr	r2, [pc, #304]	; (9950 <z_timer_expiration_handler+0x150>)
    981e:	494d      	ldr	r1, [pc, #308]	; (9954 <z_timer_expiration_handler+0x154>)
    9820:	484d      	ldr	r0, [pc, #308]	; (9958 <z_timer_expiration_handler+0x158>)
    9822:	238e      	movs	r3, #142	; 0x8e
    9824:	f001 fb86 	bl	af34 <assert_print>
    9828:	4948      	ldr	r1, [pc, #288]	; (994c <z_timer_expiration_handler+0x14c>)
    982a:	484c      	ldr	r0, [pc, #304]	; (995c <z_timer_expiration_handler+0x15c>)
    982c:	f001 fb82 	bl	af34 <assert_print>
    9830:	4847      	ldr	r0, [pc, #284]	; (9950 <z_timer_expiration_handler+0x150>)
    9832:	218e      	movs	r1, #142	; 0x8e
    9834:	f001 fb77 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9838:	4844      	ldr	r0, [pc, #272]	; (994c <z_timer_expiration_handler+0x14c>)
    983a:	f7fe f89b 	bl	7974 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    983e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    9842:	3301      	adds	r3, #1
    9844:	f142 0200 	adc.w	r2, r2, #0
    9848:	2b02      	cmp	r3, #2
    984a:	f172 0200 	sbcs.w	r2, r2, #0
    984e:	d305      	bcc.n	985c <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9850:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    9854:	4942      	ldr	r1, [pc, #264]	; (9960 <z_timer_expiration_handler+0x160>)
    9856:	4620      	mov	r0, r4
    9858:	f7ff fd16 	bl	9288 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    985c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    985e:	3301      	adds	r3, #1
    9860:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9862:	6a23      	ldr	r3, [r4, #32]
    9864:	2b00      	cmp	r3, #0
    9866:	d035      	beq.n	98d4 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9868:	4838      	ldr	r0, [pc, #224]	; (994c <z_timer_expiration_handler+0x14c>)
    986a:	f7fe f873 	bl	7954 <z_spin_unlock_valid>
    986e:	b968      	cbnz	r0, 988c <z_timer_expiration_handler+0x8c>
    9870:	4a37      	ldr	r2, [pc, #220]	; (9950 <z_timer_expiration_handler+0x150>)
    9872:	493c      	ldr	r1, [pc, #240]	; (9964 <z_timer_expiration_handler+0x164>)
    9874:	4838      	ldr	r0, [pc, #224]	; (9958 <z_timer_expiration_handler+0x158>)
    9876:	23b9      	movs	r3, #185	; 0xb9
    9878:	f001 fb5c 	bl	af34 <assert_print>
    987c:	4933      	ldr	r1, [pc, #204]	; (994c <z_timer_expiration_handler+0x14c>)
    987e:	483a      	ldr	r0, [pc, #232]	; (9968 <z_timer_expiration_handler+0x168>)
    9880:	f001 fb58 	bl	af34 <assert_print>
    9884:	4832      	ldr	r0, [pc, #200]	; (9950 <z_timer_expiration_handler+0x150>)
    9886:	21b9      	movs	r1, #185	; 0xb9
    9888:	f001 fb4d 	bl	af26 <assert_post_action>
	__asm__ volatile(
    988c:	f385 8811 	msr	BASEPRI, r5
    9890:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9894:	6a23      	ldr	r3, [r4, #32]
    9896:	4620      	mov	r0, r4
    9898:	4798      	blx	r3
	__asm__ volatile(
    989a:	f04f 0320 	mov.w	r3, #32
    989e:	f3ef 8511 	mrs	r5, BASEPRI
    98a2:	f383 8812 	msr	BASEPRI_MAX, r3
    98a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98aa:	4828      	ldr	r0, [pc, #160]	; (994c <z_timer_expiration_handler+0x14c>)
    98ac:	f7fe f844 	bl	7938 <z_spin_lock_valid>
    98b0:	b968      	cbnz	r0, 98ce <z_timer_expiration_handler+0xce>
    98b2:	4a27      	ldr	r2, [pc, #156]	; (9950 <z_timer_expiration_handler+0x150>)
    98b4:	4927      	ldr	r1, [pc, #156]	; (9954 <z_timer_expiration_handler+0x154>)
    98b6:	4828      	ldr	r0, [pc, #160]	; (9958 <z_timer_expiration_handler+0x158>)
    98b8:	238e      	movs	r3, #142	; 0x8e
    98ba:	f001 fb3b 	bl	af34 <assert_print>
    98be:	4923      	ldr	r1, [pc, #140]	; (994c <z_timer_expiration_handler+0x14c>)
    98c0:	4826      	ldr	r0, [pc, #152]	; (995c <z_timer_expiration_handler+0x15c>)
    98c2:	f001 fb37 	bl	af34 <assert_print>
    98c6:	4822      	ldr	r0, [pc, #136]	; (9950 <z_timer_expiration_handler+0x150>)
    98c8:	218e      	movs	r1, #142	; 0x8e
    98ca:	f001 fb2c 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    98ce:	481f      	ldr	r0, [pc, #124]	; (994c <z_timer_expiration_handler+0x14c>)
    98d0:	f7fe f850 	bl	7974 <z_spin_lock_set_owner>
	return list->head == list;
    98d4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    98d8:	42a6      	cmp	r6, r4
    98da:	d000      	beq.n	98de <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    98dc:	b9b6      	cbnz	r6, 990c <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    98de:	481b      	ldr	r0, [pc, #108]	; (994c <z_timer_expiration_handler+0x14c>)
    98e0:	f7fe f838 	bl	7954 <z_spin_unlock_valid>
    98e4:	b968      	cbnz	r0, 9902 <z_timer_expiration_handler+0x102>
    98e6:	4a1a      	ldr	r2, [pc, #104]	; (9950 <z_timer_expiration_handler+0x150>)
    98e8:	491e      	ldr	r1, [pc, #120]	; (9964 <z_timer_expiration_handler+0x164>)
    98ea:	481b      	ldr	r0, [pc, #108]	; (9958 <z_timer_expiration_handler+0x158>)
    98ec:	23b9      	movs	r3, #185	; 0xb9
    98ee:	f001 fb21 	bl	af34 <assert_print>
    98f2:	4916      	ldr	r1, [pc, #88]	; (994c <z_timer_expiration_handler+0x14c>)
    98f4:	481c      	ldr	r0, [pc, #112]	; (9968 <z_timer_expiration_handler+0x168>)
    98f6:	f001 fb1d 	bl	af34 <assert_print>
    98fa:	4815      	ldr	r0, [pc, #84]	; (9950 <z_timer_expiration_handler+0x150>)
    98fc:	21b9      	movs	r1, #185	; 0xb9
    98fe:	f001 fb12 	bl	af26 <assert_post_action>
	__asm__ volatile(
    9902:	f385 8811 	msr	BASEPRI, r5
    9906:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    990a:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    990c:	4630      	mov	r0, r6
    990e:	f7fe fc37 	bl	8180 <z_unpend_thread_no_timeout>
    9912:	2300      	movs	r3, #0
    9914:	480d      	ldr	r0, [pc, #52]	; (994c <z_timer_expiration_handler+0x14c>)
    9916:	67b3      	str	r3, [r6, #120]	; 0x78
    9918:	f7fe f81c 	bl	7954 <z_spin_unlock_valid>
    991c:	b968      	cbnz	r0, 993a <z_timer_expiration_handler+0x13a>
    991e:	4a0c      	ldr	r2, [pc, #48]	; (9950 <z_timer_expiration_handler+0x150>)
    9920:	4910      	ldr	r1, [pc, #64]	; (9964 <z_timer_expiration_handler+0x164>)
    9922:	480d      	ldr	r0, [pc, #52]	; (9958 <z_timer_expiration_handler+0x158>)
    9924:	23b9      	movs	r3, #185	; 0xb9
    9926:	f001 fb05 	bl	af34 <assert_print>
    992a:	4908      	ldr	r1, [pc, #32]	; (994c <z_timer_expiration_handler+0x14c>)
    992c:	480e      	ldr	r0, [pc, #56]	; (9968 <z_timer_expiration_handler+0x168>)
    992e:	f001 fb01 	bl	af34 <assert_print>
    9932:	4807      	ldr	r0, [pc, #28]	; (9950 <z_timer_expiration_handler+0x150>)
    9934:	21b9      	movs	r1, #185	; 0xb9
    9936:	f001 faf6 	bl	af26 <assert_post_action>
    993a:	f385 8811 	msr	BASEPRI, r5
    993e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9942:	4630      	mov	r0, r6
}
    9944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9948:	f7fe bbd2 	b.w	80f0 <z_ready_thread>
    994c:	20000f64 	.word	0x20000f64
    9950:	0000cad0 	.word	0x0000cad0
    9954:	0000cb29 	.word	0x0000cb29
    9958:	0000c986 	.word	0x0000c986
    995c:	0000cb3e 	.word	0x0000cb3e
    9960:	00009801 	.word	0x00009801
    9964:	0000cafd 	.word	0x0000cafd
    9968:	0000cb14 	.word	0x0000cb14

0000996c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    996c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9974:	bf08      	it	eq
    9976:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    997a:	4605      	mov	r5, r0
    997c:	4614      	mov	r4, r2
    997e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    9982:	4619      	mov	r1, r3
    9984:	4691      	mov	r9, r2
    9986:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9988:	d037      	beq.n	99fa <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    998a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    998e:	bf08      	it	eq
    9990:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    9994:	4637      	mov	r7, r6
    9996:	4682      	mov	sl, r0
    9998:	d011      	beq.n	99be <z_impl_k_timer_start+0x52>
    999a:	ea50 0306 	orrs.w	r3, r0, r6
    999e:	d00e      	beq.n	99be <z_impl_k_timer_start+0x52>
    99a0:	1c72      	adds	r2, r6, #1
    99a2:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    99a6:	db0a      	blt.n	99be <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    99a8:	2e02      	cmp	r6, #2
    99aa:	4684      	mov	ip, r0
    99ac:	f170 0000 	sbcs.w	r0, r0, #0
    99b0:	bfbc      	itt	lt
    99b2:	2702      	movlt	r7, #2
    99b4:	f04f 0c00 	movlt.w	ip, #0
    99b8:	3f01      	subs	r7, #1
    99ba:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    99be:	1c63      	adds	r3, r4, #1
    99c0:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    99c4:	db0a      	blt.n	99dc <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    99c6:	2c01      	cmp	r4, #1
    99c8:	f171 0300 	sbcs.w	r3, r1, #0
    99cc:	4622      	mov	r2, r4
    99ce:	bfbc      	itt	lt
    99d0:	2201      	movlt	r2, #1
    99d2:	2100      	movlt	r1, #0
    99d4:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    99d8:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    99dc:	4628      	mov	r0, r5
    99de:	f7ff fd1d 	bl	941c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    99e2:	2300      	movs	r3, #0
    99e4:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    99e6:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    99ea:	464a      	mov	r2, r9
    99ec:	4643      	mov	r3, r8
    99ee:	4628      	mov	r0, r5
    99f0:	4903      	ldr	r1, [pc, #12]	; (9a00 <z_impl_k_timer_start+0x94>)
		     duration);
}
    99f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    99f6:	f7ff bc47 	b.w	9288 <z_add_timeout>
}
    99fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99fe:	bf00      	nop
    9a00:	00009801 	.word	0x00009801

00009a04 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9a04:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    9a06:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    9a0a:	4606      	mov	r6, r0
    9a0c:	460d      	mov	r5, r1
    9a0e:	d20b      	bcs.n	9a28 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9a10:	f04f 0800 	mov.w	r8, #0
    9a14:	f04f 0900 	mov.w	r9, #0
    9a18:	e9cd 8900 	strd	r8, r9, [sp]
    9a1c:	f041 0104 	orr.w	r1, r1, #4
    9a20:	f000 f89c 	bl	9b5c <k_heap_aligned_alloc>
	if (mem == NULL) {
    9a24:	4604      	mov	r4, r0
    9a26:	b920      	cbnz	r0, 9a32 <z_heap_aligned_alloc+0x2e>
		return NULL;
    9a28:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    9a2a:	4620      	mov	r0, r4
    9a2c:	b002      	add	sp, #8
    9a2e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    9a32:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    9a36:	2d00      	cmp	r5, #0
    9a38:	d0f7      	beq.n	9a2a <z_heap_aligned_alloc+0x26>
    9a3a:	1e6b      	subs	r3, r5, #1
    9a3c:	421c      	tst	r4, r3
    9a3e:	d0f4      	beq.n	9a2a <z_heap_aligned_alloc+0x26>
    9a40:	2325      	movs	r3, #37	; 0x25
    9a42:	4a07      	ldr	r2, [pc, #28]	; (9a60 <z_heap_aligned_alloc+0x5c>)
    9a44:	4907      	ldr	r1, [pc, #28]	; (9a64 <z_heap_aligned_alloc+0x60>)
    9a46:	4808      	ldr	r0, [pc, #32]	; (9a68 <z_heap_aligned_alloc+0x64>)
    9a48:	f001 fa74 	bl	af34 <assert_print>
    9a4c:	4621      	mov	r1, r4
    9a4e:	4807      	ldr	r0, [pc, #28]	; (9a6c <z_heap_aligned_alloc+0x68>)
    9a50:	462a      	mov	r2, r5
    9a52:	f001 fa6f 	bl	af34 <assert_print>
    9a56:	4802      	ldr	r0, [pc, #8]	; (9a60 <z_heap_aligned_alloc+0x5c>)
    9a58:	2125      	movs	r1, #37	; 0x25
    9a5a:	f001 fa64 	bl	af26 <assert_post_action>
    9a5e:	e7e4      	b.n	9a2a <z_heap_aligned_alloc+0x26>
    9a60:	0000e218 	.word	0x0000e218
    9a64:	0000e23c 	.word	0x0000e23c
    9a68:	0000c986 	.word	0x0000c986
    9a6c:	0000e26e 	.word	0x0000e26e

00009a70 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    9a70:	2803      	cmp	r0, #3
{
    9a72:	b538      	push	{r3, r4, r5, lr}
    9a74:	4604      	mov	r4, r0
    9a76:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    9a78:	d901      	bls.n	9a7e <k_aligned_alloc+0xe>
    9a7a:	0783      	lsls	r3, r0, #30
    9a7c:	d00c      	beq.n	9a98 <k_aligned_alloc+0x28>
    9a7e:	4912      	ldr	r1, [pc, #72]	; (9ac8 <k_aligned_alloc+0x58>)
    9a80:	4a12      	ldr	r2, [pc, #72]	; (9acc <k_aligned_alloc+0x5c>)
    9a82:	4813      	ldr	r0, [pc, #76]	; (9ad0 <k_aligned_alloc+0x60>)
    9a84:	2342      	movs	r3, #66	; 0x42
    9a86:	f001 fa55 	bl	af34 <assert_print>
    9a8a:	4812      	ldr	r0, [pc, #72]	; (9ad4 <k_aligned_alloc+0x64>)
    9a8c:	f001 fa52 	bl	af34 <assert_print>
    9a90:	480e      	ldr	r0, [pc, #56]	; (9acc <k_aligned_alloc+0x5c>)
    9a92:	2142      	movs	r1, #66	; 0x42
    9a94:	f001 fa47 	bl	af26 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    9a98:	1e63      	subs	r3, r4, #1
    9a9a:	4223      	tst	r3, r4
    9a9c:	d00c      	beq.n	9ab8 <k_aligned_alloc+0x48>
    9a9e:	490e      	ldr	r1, [pc, #56]	; (9ad8 <k_aligned_alloc+0x68>)
    9aa0:	4a0a      	ldr	r2, [pc, #40]	; (9acc <k_aligned_alloc+0x5c>)
    9aa2:	480b      	ldr	r0, [pc, #44]	; (9ad0 <k_aligned_alloc+0x60>)
    9aa4:	2346      	movs	r3, #70	; 0x46
    9aa6:	f001 fa45 	bl	af34 <assert_print>
    9aaa:	480c      	ldr	r0, [pc, #48]	; (9adc <k_aligned_alloc+0x6c>)
    9aac:	f001 fa42 	bl	af34 <assert_print>
    9ab0:	4806      	ldr	r0, [pc, #24]	; (9acc <k_aligned_alloc+0x5c>)
    9ab2:	2146      	movs	r1, #70	; 0x46
    9ab4:	f001 fa37 	bl	af26 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9ab8:	462a      	mov	r2, r5
    9aba:	4621      	mov	r1, r4
    9abc:	4808      	ldr	r0, [pc, #32]	; (9ae0 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    9abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9ac2:	f7ff bf9f 	b.w	9a04 <z_heap_aligned_alloc>
    9ac6:	bf00      	nop
    9ac8:	0000e296 	.word	0x0000e296
    9acc:	0000e218 	.word	0x0000e218
    9ad0:	0000c986 	.word	0x0000c986
    9ad4:	0000e2d3 	.word	0x0000e2d3
    9ad8:	0000cc22 	.word	0x0000cc22
    9adc:	0000cc3d 	.word	0x0000cc3d
    9ae0:	200001c8 	.word	0x200001c8

00009ae4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9ae4:	4b01      	ldr	r3, [pc, #4]	; (9aec <k_thread_system_pool_assign+0x8>)
    9ae6:	6703      	str	r3, [r0, #112]	; 0x70
}
    9ae8:	4770      	bx	lr
    9aea:	bf00      	nop
    9aec:	200001c8 	.word	0x200001c8

00009af0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9af0:	4a02      	ldr	r2, [pc, #8]	; (9afc <boot_banner+0xc>)
    9af2:	4903      	ldr	r1, [pc, #12]	; (9b00 <boot_banner+0x10>)
    9af4:	4803      	ldr	r0, [pc, #12]	; (9b04 <boot_banner+0x14>)
    9af6:	f001 b8d0 	b.w	ac9a <printk>
    9afa:	bf00      	nop
    9afc:	0000e020 	.word	0x0000e020
    9b00:	0000e300 	.word	0x0000e300
    9b04:	0000e30d 	.word	0x0000e30d

00009b08 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9b08:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9b0a:	4c0e      	ldr	r4, [pc, #56]	; (9b44 <statics_init+0x3c>)
    9b0c:	4d0e      	ldr	r5, [pc, #56]	; (9b48 <statics_init+0x40>)
    9b0e:	4e0f      	ldr	r6, [pc, #60]	; (9b4c <statics_init+0x44>)
    9b10:	42ac      	cmp	r4, r5
    9b12:	d90c      	bls.n	9b2e <statics_init+0x26>
    9b14:	490e      	ldr	r1, [pc, #56]	; (9b50 <statics_init+0x48>)
    9b16:	480f      	ldr	r0, [pc, #60]	; (9b54 <statics_init+0x4c>)
    9b18:	2318      	movs	r3, #24
    9b1a:	4632      	mov	r2, r6
    9b1c:	f001 fa0a 	bl	af34 <assert_print>
    9b20:	480d      	ldr	r0, [pc, #52]	; (9b58 <statics_init+0x50>)
    9b22:	f001 fa07 	bl	af34 <assert_print>
    9b26:	2118      	movs	r1, #24
    9b28:	4630      	mov	r0, r6
    9b2a:	f001 f9fc 	bl	af26 <assert_post_action>
    9b2e:	42ac      	cmp	r4, r5
    9b30:	d301      	bcc.n	9b36 <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    9b32:	2000      	movs	r0, #0
    9b34:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9b36:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9b3a:	4620      	mov	r0, r4
    9b3c:	f001 ffc2 	bl	bac4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9b40:	3418      	adds	r4, #24
    9b42:	e7e5      	b.n	9b10 <statics_init+0x8>
    9b44:	200001c8 	.word	0x200001c8
    9b48:	200001e0 	.word	0x200001e0
    9b4c:	0000e334 	.word	0x0000e334
    9b50:	0000e356 	.word	0x0000e356
    9b54:	0000c986 	.word	0x0000c986
    9b58:	0000ddf5 	.word	0x0000ddf5

00009b5c <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    9b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b60:	b085      	sub	sp, #20
    9b62:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    9b66:	4606      	mov	r6, r0
    9b68:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9b6a:	4648      	mov	r0, r9
    9b6c:	4641      	mov	r1, r8
{
    9b6e:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9b70:	f001 ff59 	bl	ba26 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    9b74:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9b78:	4682      	mov	sl, r0
    9b7a:	460f      	mov	r7, r1
	__asm__ volatile(
    9b7c:	f04f 0320 	mov.w	r3, #32
    9b80:	f3ef 8511 	mrs	r5, BASEPRI
    9b84:	f383 8812 	msr	BASEPRI_MAX, r3
    9b88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b8c:	4620      	mov	r0, r4
    9b8e:	f7fd fed3 	bl	7938 <z_spin_lock_valid>
    9b92:	b968      	cbnz	r0, 9bb0 <k_heap_aligned_alloc+0x54>
    9b94:	4a3c      	ldr	r2, [pc, #240]	; (9c88 <k_heap_aligned_alloc+0x12c>)
    9b96:	493d      	ldr	r1, [pc, #244]	; (9c8c <k_heap_aligned_alloc+0x130>)
    9b98:	483d      	ldr	r0, [pc, #244]	; (9c90 <k_heap_aligned_alloc+0x134>)
    9b9a:	238e      	movs	r3, #142	; 0x8e
    9b9c:	f001 f9ca 	bl	af34 <assert_print>
    9ba0:	483c      	ldr	r0, [pc, #240]	; (9c94 <k_heap_aligned_alloc+0x138>)
    9ba2:	4621      	mov	r1, r4
    9ba4:	f001 f9c6 	bl	af34 <assert_print>
    9ba8:	4837      	ldr	r0, [pc, #220]	; (9c88 <k_heap_aligned_alloc+0x12c>)
    9baa:	218e      	movs	r1, #142	; 0x8e
    9bac:	f001 f9bb 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9bb0:	4620      	mov	r0, r4
    9bb2:	f7fd fedf 	bl	7974 <z_spin_lock_set_owner>
    9bb6:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    9bba:	b17b      	cbz	r3, 9bdc <k_heap_aligned_alloc+0x80>
    9bbc:	ea59 0808 	orrs.w	r8, r9, r8
    9bc0:	d00c      	beq.n	9bdc <k_heap_aligned_alloc+0x80>
    9bc2:	4935      	ldr	r1, [pc, #212]	; (9c98 <k_heap_aligned_alloc+0x13c>)
    9bc4:	4a35      	ldr	r2, [pc, #212]	; (9c9c <k_heap_aligned_alloc+0x140>)
    9bc6:	4832      	ldr	r0, [pc, #200]	; (9c90 <k_heap_aligned_alloc+0x134>)
    9bc8:	2349      	movs	r3, #73	; 0x49
    9bca:	f001 f9b3 	bl	af34 <assert_print>
    9bce:	4834      	ldr	r0, [pc, #208]	; (9ca0 <k_heap_aligned_alloc+0x144>)
    9bd0:	f001 f9b0 	bl	af34 <assert_print>
    9bd4:	4831      	ldr	r0, [pc, #196]	; (9c9c <k_heap_aligned_alloc+0x140>)
    9bd6:	2149      	movs	r1, #73	; 0x49
    9bd8:	f001 f9a5 	bl	af26 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bdc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9c88 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    9be0:	9903      	ldr	r1, [sp, #12]
    9be2:	465a      	mov	r2, fp
    9be4:	4630      	mov	r0, r6
    9be6:	f7f8 fccf 	bl	2588 <sys_heap_aligned_alloc>
    9bea:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    9bec:	f7ff fdb8 	bl	9760 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    9bf0:	f1b8 0f00 	cmp.w	r8, #0
    9bf4:	d019      	beq.n	9c2a <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bf6:	4620      	mov	r0, r4
    9bf8:	f7fd feac 	bl	7954 <z_spin_unlock_valid>
    9bfc:	b968      	cbnz	r0, 9c1a <k_heap_aligned_alloc+0xbe>
    9bfe:	4a22      	ldr	r2, [pc, #136]	; (9c88 <k_heap_aligned_alloc+0x12c>)
    9c00:	4928      	ldr	r1, [pc, #160]	; (9ca4 <k_heap_aligned_alloc+0x148>)
    9c02:	4823      	ldr	r0, [pc, #140]	; (9c90 <k_heap_aligned_alloc+0x134>)
    9c04:	23b9      	movs	r3, #185	; 0xb9
    9c06:	f001 f995 	bl	af34 <assert_print>
    9c0a:	4827      	ldr	r0, [pc, #156]	; (9ca8 <k_heap_aligned_alloc+0x14c>)
    9c0c:	4621      	mov	r1, r4
    9c0e:	f001 f991 	bl	af34 <assert_print>
    9c12:	481d      	ldr	r0, [pc, #116]	; (9c88 <k_heap_aligned_alloc+0x12c>)
    9c14:	21b9      	movs	r1, #185	; 0xb9
    9c16:	f001 f986 	bl	af26 <assert_post_action>
	__asm__ volatile(
    9c1a:	f385 8811 	msr	BASEPRI, r5
    9c1e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    9c22:	4640      	mov	r0, r8
    9c24:	b005      	add	sp, #20
    9c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    9c2a:	ebba 0000 	subs.w	r0, sl, r0
    9c2e:	eb67 0101 	sbc.w	r1, r7, r1
    9c32:	2801      	cmp	r0, #1
    9c34:	f171 0300 	sbcs.w	r3, r1, #0
    9c38:	dbdd      	blt.n	9bf6 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    9c3a:	e9cd 0100 	strd	r0, r1, [sp]
    9c3e:	f106 020c 	add.w	r2, r6, #12
    9c42:	4629      	mov	r1, r5
    9c44:	4620      	mov	r0, r4
    9c46:	f7fe fe0f 	bl	8868 <z_pend_curr>
	__asm__ volatile(
    9c4a:	f04f 0320 	mov.w	r3, #32
    9c4e:	f3ef 8511 	mrs	r5, BASEPRI
    9c52:	f383 8812 	msr	BASEPRI_MAX, r3
    9c56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c5a:	4620      	mov	r0, r4
    9c5c:	f7fd fe6c 	bl	7938 <z_spin_lock_valid>
    9c60:	b968      	cbnz	r0, 9c7e <k_heap_aligned_alloc+0x122>
    9c62:	490a      	ldr	r1, [pc, #40]	; (9c8c <k_heap_aligned_alloc+0x130>)
    9c64:	480a      	ldr	r0, [pc, #40]	; (9c90 <k_heap_aligned_alloc+0x134>)
    9c66:	238e      	movs	r3, #142	; 0x8e
    9c68:	464a      	mov	r2, r9
    9c6a:	f001 f963 	bl	af34 <assert_print>
    9c6e:	4809      	ldr	r0, [pc, #36]	; (9c94 <k_heap_aligned_alloc+0x138>)
    9c70:	4621      	mov	r1, r4
    9c72:	f001 f95f 	bl	af34 <assert_print>
    9c76:	218e      	movs	r1, #142	; 0x8e
    9c78:	4648      	mov	r0, r9
    9c7a:	f001 f954 	bl	af26 <assert_post_action>
	z_spin_lock_set_owner(l);
    9c7e:	4620      	mov	r0, r4
    9c80:	f7fd fe78 	bl	7974 <z_spin_lock_set_owner>
	return k;
    9c84:	e7ac      	b.n	9be0 <k_heap_aligned_alloc+0x84>
    9c86:	bf00      	nop
    9c88:	0000cad0 	.word	0x0000cad0
    9c8c:	0000cb29 	.word	0x0000cb29
    9c90:	0000c986 	.word	0x0000c986
    9c94:	0000cb3e 	.word	0x0000cb3e
    9c98:	0000e36c 	.word	0x0000e36c
    9c9c:	0000e334 	.word	0x0000e334
    9ca0:	0000e01e 	.word	0x0000e01e
    9ca4:	0000cafd 	.word	0x0000cafd
    9ca8:	0000cb14 	.word	0x0000cb14

00009cac <reserve>:
    strcpy(buffer->name, name);
    buffer->head = first;
    return buffer;
}

void* reserve(cab* cab_id){
    9cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cae:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    9cb0:	f100 0618 	add.w	r6, r0, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    9cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9cbc:	4630      	mov	r0, r6
    9cbe:	f7fd fe93 	bl	79e8 <z_impl_k_mutex_lock>
    for(int i = 0; i< N_TASKS + 1; i++){
    9cc2:	8920      	ldrh	r0, [r4, #8]
    9cc4:	68e2      	ldr	r2, [r4, #12]
    9cc6:	f104 010f 	add.w	r1, r4, #15
    9cca:	2300      	movs	r3, #0
        buffer = cab_id->buffers + (i * cab_id->size);
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9ccc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    9cd0:	b95d      	cbnz	r5, 9cea <reserve+0x3e>
    9cd2:	6967      	ldr	r7, [r4, #20]
    9cd4:	4297      	cmp	r7, r2
        buffer = cab_id->buffers + (i * cab_id->size);
    9cd6:	4615      	mov	r5, r2
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9cd8:	d007      	beq.n	9cea <reserve+0x3e>
            cab_id->flags[i] = 1;
    9cda:	441c      	add	r4, r3
    9cdc:	2301      	movs	r3, #1
    9cde:	7423      	strb	r3, [r4, #16]
            k_mutex_unlock(&cab_id->mutex);
    9ce0:	4630      	mov	r0, r6
    9ce2:	f001 fef7 	bl	bad4 <k_mutex_unlock.isra.0>
        }
    }
    k_mutex_unlock(&cab_id->mutex);
    printk("No available buffers\n");
    return 0;
} 
    9ce6:	4628      	mov	r0, r5
    9ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(int i = 0; i< N_TASKS + 1; i++){
    9cea:	3301      	adds	r3, #1
    9cec:	2b03      	cmp	r3, #3
    9cee:	4402      	add	r2, r0
    9cf0:	d1ec      	bne.n	9ccc <reserve+0x20>
    k_mutex_unlock(&cab_id->mutex);
    9cf2:	4630      	mov	r0, r6
    9cf4:	f001 feee 	bl	bad4 <k_mutex_unlock.isra.0>
    printk("No available buffers\n");
    9cf8:	4802      	ldr	r0, [pc, #8]	; (9d04 <reserve+0x58>)
    9cfa:	f000 ffce 	bl	ac9a <printk>
    return 0;
    9cfe:	2500      	movs	r5, #0
    9d00:	e7f1      	b.n	9ce6 <reserve+0x3a>
    9d02:	bf00      	nop
    9d04:	0000e3b2 	.word	0x0000e3b2

00009d08 <exit>:
    9d08:	b508      	push	{r3, lr}
    9d0a:	4b07      	ldr	r3, [pc, #28]	; (9d28 <exit+0x20>)
    9d0c:	4604      	mov	r4, r0
    9d0e:	b113      	cbz	r3, 9d16 <exit+0xe>
    9d10:	2100      	movs	r1, #0
    9d12:	f3af 8000 	nop.w
    9d16:	4b05      	ldr	r3, [pc, #20]	; (9d2c <exit+0x24>)
    9d18:	6818      	ldr	r0, [r3, #0]
    9d1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9d1c:	b103      	cbz	r3, 9d20 <exit+0x18>
    9d1e:	4798      	blx	r3
    9d20:	4620      	mov	r0, r4
    9d22:	f7fa fea3 	bl	4a6c <_exit>
    9d26:	bf00      	nop
    9d28:	00000000 	.word	0x00000000
    9d2c:	0000c5f4 	.word	0x0000c5f4

00009d30 <malloc>:
    9d30:	4b02      	ldr	r3, [pc, #8]	; (9d3c <malloc+0xc>)
    9d32:	4601      	mov	r1, r0
    9d34:	6818      	ldr	r0, [r3, #0]
    9d36:	f000 b84d 	b.w	9dd4 <_malloc_r>
    9d3a:	bf00      	nop
    9d3c:	200000f0 	.word	0x200000f0

00009d40 <_free_r>:
    9d40:	b538      	push	{r3, r4, r5, lr}
    9d42:	4605      	mov	r5, r0
    9d44:	2900      	cmp	r1, #0
    9d46:	d041      	beq.n	9dcc <_free_r+0x8c>
    9d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9d4c:	1f0c      	subs	r4, r1, #4
    9d4e:	2b00      	cmp	r3, #0
    9d50:	bfb8      	it	lt
    9d52:	18e4      	addlt	r4, r4, r3
    9d54:	f000 f980 	bl	a058 <__malloc_lock>
    9d58:	4a1d      	ldr	r2, [pc, #116]	; (9dd0 <_free_r+0x90>)
    9d5a:	6813      	ldr	r3, [r2, #0]
    9d5c:	b933      	cbnz	r3, 9d6c <_free_r+0x2c>
    9d5e:	6063      	str	r3, [r4, #4]
    9d60:	6014      	str	r4, [r2, #0]
    9d62:	4628      	mov	r0, r5
    9d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9d68:	f000 b97c 	b.w	a064 <__malloc_unlock>
    9d6c:	42a3      	cmp	r3, r4
    9d6e:	d908      	bls.n	9d82 <_free_r+0x42>
    9d70:	6820      	ldr	r0, [r4, #0]
    9d72:	1821      	adds	r1, r4, r0
    9d74:	428b      	cmp	r3, r1
    9d76:	bf01      	itttt	eq
    9d78:	6819      	ldreq	r1, [r3, #0]
    9d7a:	685b      	ldreq	r3, [r3, #4]
    9d7c:	1809      	addeq	r1, r1, r0
    9d7e:	6021      	streq	r1, [r4, #0]
    9d80:	e7ed      	b.n	9d5e <_free_r+0x1e>
    9d82:	461a      	mov	r2, r3
    9d84:	685b      	ldr	r3, [r3, #4]
    9d86:	b10b      	cbz	r3, 9d8c <_free_r+0x4c>
    9d88:	42a3      	cmp	r3, r4
    9d8a:	d9fa      	bls.n	9d82 <_free_r+0x42>
    9d8c:	6811      	ldr	r1, [r2, #0]
    9d8e:	1850      	adds	r0, r2, r1
    9d90:	42a0      	cmp	r0, r4
    9d92:	d10b      	bne.n	9dac <_free_r+0x6c>
    9d94:	6820      	ldr	r0, [r4, #0]
    9d96:	4401      	add	r1, r0
    9d98:	1850      	adds	r0, r2, r1
    9d9a:	4283      	cmp	r3, r0
    9d9c:	6011      	str	r1, [r2, #0]
    9d9e:	d1e0      	bne.n	9d62 <_free_r+0x22>
    9da0:	6818      	ldr	r0, [r3, #0]
    9da2:	685b      	ldr	r3, [r3, #4]
    9da4:	6053      	str	r3, [r2, #4]
    9da6:	4408      	add	r0, r1
    9da8:	6010      	str	r0, [r2, #0]
    9daa:	e7da      	b.n	9d62 <_free_r+0x22>
    9dac:	d902      	bls.n	9db4 <_free_r+0x74>
    9dae:	230c      	movs	r3, #12
    9db0:	602b      	str	r3, [r5, #0]
    9db2:	e7d6      	b.n	9d62 <_free_r+0x22>
    9db4:	6820      	ldr	r0, [r4, #0]
    9db6:	1821      	adds	r1, r4, r0
    9db8:	428b      	cmp	r3, r1
    9dba:	bf04      	itt	eq
    9dbc:	6819      	ldreq	r1, [r3, #0]
    9dbe:	685b      	ldreq	r3, [r3, #4]
    9dc0:	6063      	str	r3, [r4, #4]
    9dc2:	bf04      	itt	eq
    9dc4:	1809      	addeq	r1, r1, r0
    9dc6:	6021      	streq	r1, [r4, #0]
    9dc8:	6054      	str	r4, [r2, #4]
    9dca:	e7ca      	b.n	9d62 <_free_r+0x22>
    9dcc:	bd38      	pop	{r3, r4, r5, pc}
    9dce:	bf00      	nop
    9dd0:	20000f6c 	.word	0x20000f6c

00009dd4 <_malloc_r>:
    9dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dd6:	1ccd      	adds	r5, r1, #3
    9dd8:	f025 0503 	bic.w	r5, r5, #3
    9ddc:	3508      	adds	r5, #8
    9dde:	2d0c      	cmp	r5, #12
    9de0:	bf38      	it	cc
    9de2:	250c      	movcc	r5, #12
    9de4:	2d00      	cmp	r5, #0
    9de6:	4606      	mov	r6, r0
    9de8:	db01      	blt.n	9dee <_malloc_r+0x1a>
    9dea:	42a9      	cmp	r1, r5
    9dec:	d903      	bls.n	9df6 <_malloc_r+0x22>
    9dee:	230c      	movs	r3, #12
    9df0:	6033      	str	r3, [r6, #0]
    9df2:	2000      	movs	r0, #0
    9df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9df6:	f000 f92f 	bl	a058 <__malloc_lock>
    9dfa:	4921      	ldr	r1, [pc, #132]	; (9e80 <_malloc_r+0xac>)
    9dfc:	680a      	ldr	r2, [r1, #0]
    9dfe:	4614      	mov	r4, r2
    9e00:	b99c      	cbnz	r4, 9e2a <_malloc_r+0x56>
    9e02:	4f20      	ldr	r7, [pc, #128]	; (9e84 <_malloc_r+0xb0>)
    9e04:	683b      	ldr	r3, [r7, #0]
    9e06:	b923      	cbnz	r3, 9e12 <_malloc_r+0x3e>
    9e08:	4621      	mov	r1, r4
    9e0a:	4630      	mov	r0, r6
    9e0c:	f000 f854 	bl	9eb8 <_sbrk_r>
    9e10:	6038      	str	r0, [r7, #0]
    9e12:	4629      	mov	r1, r5
    9e14:	4630      	mov	r0, r6
    9e16:	f000 f84f 	bl	9eb8 <_sbrk_r>
    9e1a:	1c43      	adds	r3, r0, #1
    9e1c:	d123      	bne.n	9e66 <_malloc_r+0x92>
    9e1e:	230c      	movs	r3, #12
    9e20:	6033      	str	r3, [r6, #0]
    9e22:	4630      	mov	r0, r6
    9e24:	f000 f91e 	bl	a064 <__malloc_unlock>
    9e28:	e7e3      	b.n	9df2 <_malloc_r+0x1e>
    9e2a:	6823      	ldr	r3, [r4, #0]
    9e2c:	1b5b      	subs	r3, r3, r5
    9e2e:	d417      	bmi.n	9e60 <_malloc_r+0x8c>
    9e30:	2b0b      	cmp	r3, #11
    9e32:	d903      	bls.n	9e3c <_malloc_r+0x68>
    9e34:	6023      	str	r3, [r4, #0]
    9e36:	441c      	add	r4, r3
    9e38:	6025      	str	r5, [r4, #0]
    9e3a:	e004      	b.n	9e46 <_malloc_r+0x72>
    9e3c:	6863      	ldr	r3, [r4, #4]
    9e3e:	42a2      	cmp	r2, r4
    9e40:	bf0c      	ite	eq
    9e42:	600b      	streq	r3, [r1, #0]
    9e44:	6053      	strne	r3, [r2, #4]
    9e46:	4630      	mov	r0, r6
    9e48:	f000 f90c 	bl	a064 <__malloc_unlock>
    9e4c:	f104 000b 	add.w	r0, r4, #11
    9e50:	1d23      	adds	r3, r4, #4
    9e52:	f020 0007 	bic.w	r0, r0, #7
    9e56:	1ac2      	subs	r2, r0, r3
    9e58:	bf1c      	itt	ne
    9e5a:	1a1b      	subne	r3, r3, r0
    9e5c:	50a3      	strne	r3, [r4, r2]
    9e5e:	e7c9      	b.n	9df4 <_malloc_r+0x20>
    9e60:	4622      	mov	r2, r4
    9e62:	6864      	ldr	r4, [r4, #4]
    9e64:	e7cc      	b.n	9e00 <_malloc_r+0x2c>
    9e66:	1cc4      	adds	r4, r0, #3
    9e68:	f024 0403 	bic.w	r4, r4, #3
    9e6c:	42a0      	cmp	r0, r4
    9e6e:	d0e3      	beq.n	9e38 <_malloc_r+0x64>
    9e70:	1a21      	subs	r1, r4, r0
    9e72:	4630      	mov	r0, r6
    9e74:	f000 f820 	bl	9eb8 <_sbrk_r>
    9e78:	3001      	adds	r0, #1
    9e7a:	d1dd      	bne.n	9e38 <_malloc_r+0x64>
    9e7c:	e7cf      	b.n	9e1e <_malloc_r+0x4a>
    9e7e:	bf00      	nop
    9e80:	20000f6c 	.word	0x20000f6c
    9e84:	20000f68 	.word	0x20000f68

00009e88 <iprintf>:
    9e88:	b40f      	push	{r0, r1, r2, r3}
    9e8a:	4b0a      	ldr	r3, [pc, #40]	; (9eb4 <iprintf+0x2c>)
    9e8c:	b513      	push	{r0, r1, r4, lr}
    9e8e:	681c      	ldr	r4, [r3, #0]
    9e90:	b124      	cbz	r4, 9e9c <iprintf+0x14>
    9e92:	69a3      	ldr	r3, [r4, #24]
    9e94:	b913      	cbnz	r3, 9e9c <iprintf+0x14>
    9e96:	4620      	mov	r0, r4
    9e98:	f000 f860 	bl	9f5c <__sinit>
    9e9c:	ab05      	add	r3, sp, #20
    9e9e:	9a04      	ldr	r2, [sp, #16]
    9ea0:	68a1      	ldr	r1, [r4, #8]
    9ea2:	9301      	str	r3, [sp, #4]
    9ea4:	4620      	mov	r0, r4
    9ea6:	f000 f8e3 	bl	a070 <_vfiprintf_r>
    9eaa:	b002      	add	sp, #8
    9eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9eb0:	b004      	add	sp, #16
    9eb2:	4770      	bx	lr
    9eb4:	200000f0 	.word	0x200000f0

00009eb8 <_sbrk_r>:
    9eb8:	b538      	push	{r3, r4, r5, lr}
    9eba:	4d06      	ldr	r5, [pc, #24]	; (9ed4 <_sbrk_r+0x1c>)
    9ebc:	2300      	movs	r3, #0
    9ebe:	4604      	mov	r4, r0
    9ec0:	4608      	mov	r0, r1
    9ec2:	602b      	str	r3, [r5, #0]
    9ec4:	f7fa fdda 	bl	4a7c <_sbrk>
    9ec8:	1c43      	adds	r3, r0, #1
    9eca:	d102      	bne.n	9ed2 <_sbrk_r+0x1a>
    9ecc:	682b      	ldr	r3, [r5, #0]
    9ece:	b103      	cbz	r3, 9ed2 <_sbrk_r+0x1a>
    9ed0:	6023      	str	r3, [r4, #0]
    9ed2:	bd38      	pop	{r3, r4, r5, pc}
    9ed4:	20000f70 	.word	0x20000f70

00009ed8 <std>:
    9ed8:	2300      	movs	r3, #0
    9eda:	b510      	push	{r4, lr}
    9edc:	4604      	mov	r4, r0
    9ede:	e9c0 3300 	strd	r3, r3, [r0]
    9ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    9ee6:	6083      	str	r3, [r0, #8]
    9ee8:	8181      	strh	r1, [r0, #12]
    9eea:	6643      	str	r3, [r0, #100]	; 0x64
    9eec:	81c2      	strh	r2, [r0, #14]
    9eee:	6183      	str	r3, [r0, #24]
    9ef0:	4619      	mov	r1, r3
    9ef2:	2208      	movs	r2, #8
    9ef4:	305c      	adds	r0, #92	; 0x5c
    9ef6:	f001 fece 	bl	bc96 <memset>
    9efa:	4b05      	ldr	r3, [pc, #20]	; (9f10 <std+0x38>)
    9efc:	6263      	str	r3, [r4, #36]	; 0x24
    9efe:	4b05      	ldr	r3, [pc, #20]	; (9f14 <std+0x3c>)
    9f00:	62a3      	str	r3, [r4, #40]	; 0x28
    9f02:	4b05      	ldr	r3, [pc, #20]	; (9f18 <std+0x40>)
    9f04:	62e3      	str	r3, [r4, #44]	; 0x2c
    9f06:	4b05      	ldr	r3, [pc, #20]	; (9f1c <std+0x44>)
    9f08:	6224      	str	r4, [r4, #32]
    9f0a:	6323      	str	r3, [r4, #48]	; 0x30
    9f0c:	bd10      	pop	{r4, pc}
    9f0e:	bf00      	nop
    9f10:	0000be61 	.word	0x0000be61
    9f14:	0000be83 	.word	0x0000be83
    9f18:	0000bebb 	.word	0x0000bebb
    9f1c:	0000bedf 	.word	0x0000bedf

00009f20 <_cleanup_r>:
    9f20:	4901      	ldr	r1, [pc, #4]	; (9f28 <_cleanup_r+0x8>)
    9f22:	f001 beea 	b.w	bcfa <_fwalk_reent>
    9f26:	bf00      	nop
    9f28:	0000a6e5 	.word	0x0000a6e5

00009f2c <__sfp_lock_acquire>:
    9f2c:	4801      	ldr	r0, [pc, #4]	; (9f34 <__sfp_lock_acquire+0x8>)
    9f2e:	f7fa bdeb 	b.w	4b08 <__retarget_lock_acquire_recursive>
    9f32:	bf00      	nop
    9f34:	200001f4 	.word	0x200001f4

00009f38 <__sfp_lock_release>:
    9f38:	4801      	ldr	r0, [pc, #4]	; (9f40 <__sfp_lock_release+0x8>)
    9f3a:	f7fa be03 	b.w	4b44 <__retarget_lock_release_recursive>
    9f3e:	bf00      	nop
    9f40:	200001f4 	.word	0x200001f4

00009f44 <__sinit_lock_acquire>:
    9f44:	4801      	ldr	r0, [pc, #4]	; (9f4c <__sinit_lock_acquire+0x8>)
    9f46:	f7fa bddf 	b.w	4b08 <__retarget_lock_acquire_recursive>
    9f4a:	bf00      	nop
    9f4c:	20000208 	.word	0x20000208

00009f50 <__sinit_lock_release>:
    9f50:	4801      	ldr	r0, [pc, #4]	; (9f58 <__sinit_lock_release+0x8>)
    9f52:	f7fa bdf7 	b.w	4b44 <__retarget_lock_release_recursive>
    9f56:	bf00      	nop
    9f58:	20000208 	.word	0x20000208

00009f5c <__sinit>:
    9f5c:	b510      	push	{r4, lr}
    9f5e:	4604      	mov	r4, r0
    9f60:	f7ff fff0 	bl	9f44 <__sinit_lock_acquire>
    9f64:	69a3      	ldr	r3, [r4, #24]
    9f66:	b11b      	cbz	r3, 9f70 <__sinit+0x14>
    9f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f6c:	f7ff bff0 	b.w	9f50 <__sinit_lock_release>
    9f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    9f74:	6523      	str	r3, [r4, #80]	; 0x50
    9f76:	4b13      	ldr	r3, [pc, #76]	; (9fc4 <__sinit+0x68>)
    9f78:	4a13      	ldr	r2, [pc, #76]	; (9fc8 <__sinit+0x6c>)
    9f7a:	681b      	ldr	r3, [r3, #0]
    9f7c:	62a2      	str	r2, [r4, #40]	; 0x28
    9f7e:	42a3      	cmp	r3, r4
    9f80:	bf04      	itt	eq
    9f82:	2301      	moveq	r3, #1
    9f84:	61a3      	streq	r3, [r4, #24]
    9f86:	4620      	mov	r0, r4
    9f88:	f000 f820 	bl	9fcc <__sfp>
    9f8c:	6060      	str	r0, [r4, #4]
    9f8e:	4620      	mov	r0, r4
    9f90:	f000 f81c 	bl	9fcc <__sfp>
    9f94:	60a0      	str	r0, [r4, #8]
    9f96:	4620      	mov	r0, r4
    9f98:	f000 f818 	bl	9fcc <__sfp>
    9f9c:	2200      	movs	r2, #0
    9f9e:	60e0      	str	r0, [r4, #12]
    9fa0:	2104      	movs	r1, #4
    9fa2:	6860      	ldr	r0, [r4, #4]
    9fa4:	f7ff ff98 	bl	9ed8 <std>
    9fa8:	68a0      	ldr	r0, [r4, #8]
    9faa:	2201      	movs	r2, #1
    9fac:	2109      	movs	r1, #9
    9fae:	f7ff ff93 	bl	9ed8 <std>
    9fb2:	68e0      	ldr	r0, [r4, #12]
    9fb4:	2202      	movs	r2, #2
    9fb6:	2112      	movs	r1, #18
    9fb8:	f7ff ff8e 	bl	9ed8 <std>
    9fbc:	2301      	movs	r3, #1
    9fbe:	61a3      	str	r3, [r4, #24]
    9fc0:	e7d2      	b.n	9f68 <__sinit+0xc>
    9fc2:	bf00      	nop
    9fc4:	0000c5f4 	.word	0x0000c5f4
    9fc8:	00009f21 	.word	0x00009f21

00009fcc <__sfp>:
    9fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fce:	4607      	mov	r7, r0
    9fd0:	f7ff ffac 	bl	9f2c <__sfp_lock_acquire>
    9fd4:	4b1e      	ldr	r3, [pc, #120]	; (a050 <__sfp+0x84>)
    9fd6:	681e      	ldr	r6, [r3, #0]
    9fd8:	69b3      	ldr	r3, [r6, #24]
    9fda:	b913      	cbnz	r3, 9fe2 <__sfp+0x16>
    9fdc:	4630      	mov	r0, r6
    9fde:	f7ff ffbd 	bl	9f5c <__sinit>
    9fe2:	3648      	adds	r6, #72	; 0x48
    9fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    9fe8:	3b01      	subs	r3, #1
    9fea:	d503      	bpl.n	9ff4 <__sfp+0x28>
    9fec:	6833      	ldr	r3, [r6, #0]
    9fee:	b30b      	cbz	r3, a034 <__sfp+0x68>
    9ff0:	6836      	ldr	r6, [r6, #0]
    9ff2:	e7f7      	b.n	9fe4 <__sfp+0x18>
    9ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    9ff8:	b9d5      	cbnz	r5, a030 <__sfp+0x64>
    9ffa:	4b16      	ldr	r3, [pc, #88]	; (a054 <__sfp+0x88>)
    9ffc:	60e3      	str	r3, [r4, #12]
    9ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a002:	6665      	str	r5, [r4, #100]	; 0x64
    a004:	f7fa fd4e 	bl	4aa4 <__retarget_lock_init_recursive>
    a008:	f7ff ff96 	bl	9f38 <__sfp_lock_release>
    a00c:	e9c4 5501 	strd	r5, r5, [r4, #4]
    a010:	e9c4 5504 	strd	r5, r5, [r4, #16]
    a014:	6025      	str	r5, [r4, #0]
    a016:	61a5      	str	r5, [r4, #24]
    a018:	2208      	movs	r2, #8
    a01a:	4629      	mov	r1, r5
    a01c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    a020:	f001 fe39 	bl	bc96 <memset>
    a024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    a028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    a02c:	4620      	mov	r0, r4
    a02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a030:	3468      	adds	r4, #104	; 0x68
    a032:	e7d9      	b.n	9fe8 <__sfp+0x1c>
    a034:	2104      	movs	r1, #4
    a036:	4638      	mov	r0, r7
    a038:	f001 fe49 	bl	bcce <__sfmoreglue>
    a03c:	4604      	mov	r4, r0
    a03e:	6030      	str	r0, [r6, #0]
    a040:	2800      	cmp	r0, #0
    a042:	d1d5      	bne.n	9ff0 <__sfp+0x24>
    a044:	f7ff ff78 	bl	9f38 <__sfp_lock_release>
    a048:	230c      	movs	r3, #12
    a04a:	603b      	str	r3, [r7, #0]
    a04c:	e7ee      	b.n	a02c <__sfp+0x60>
    a04e:	bf00      	nop
    a050:	0000c5f4 	.word	0x0000c5f4
    a054:	ffff0001 	.word	0xffff0001

0000a058 <__malloc_lock>:
    a058:	4801      	ldr	r0, [pc, #4]	; (a060 <__malloc_lock+0x8>)
    a05a:	f7fa bd55 	b.w	4b08 <__retarget_lock_acquire_recursive>
    a05e:	bf00      	nop
    a060:	200001e0 	.word	0x200001e0

0000a064 <__malloc_unlock>:
    a064:	4801      	ldr	r0, [pc, #4]	; (a06c <__malloc_unlock+0x8>)
    a066:	f7fa bd6d 	b.w	4b44 <__retarget_lock_release_recursive>
    a06a:	bf00      	nop
    a06c:	200001e0 	.word	0x200001e0

0000a070 <_vfiprintf_r>:
    a070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a074:	460d      	mov	r5, r1
    a076:	b09d      	sub	sp, #116	; 0x74
    a078:	4614      	mov	r4, r2
    a07a:	4698      	mov	r8, r3
    a07c:	4606      	mov	r6, r0
    a07e:	b118      	cbz	r0, a088 <_vfiprintf_r+0x18>
    a080:	6983      	ldr	r3, [r0, #24]
    a082:	b90b      	cbnz	r3, a088 <_vfiprintf_r+0x18>
    a084:	f7ff ff6a 	bl	9f5c <__sinit>
    a088:	4b87      	ldr	r3, [pc, #540]	; (a2a8 <_vfiprintf_r+0x238>)
    a08a:	429d      	cmp	r5, r3
    a08c:	d11b      	bne.n	a0c6 <_vfiprintf_r+0x56>
    a08e:	6875      	ldr	r5, [r6, #4]
    a090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a092:	07d9      	lsls	r1, r3, #31
    a094:	d405      	bmi.n	a0a2 <_vfiprintf_r+0x32>
    a096:	89ab      	ldrh	r3, [r5, #12]
    a098:	059a      	lsls	r2, r3, #22
    a09a:	d402      	bmi.n	a0a2 <_vfiprintf_r+0x32>
    a09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a09e:	f7fa fd33 	bl	4b08 <__retarget_lock_acquire_recursive>
    a0a2:	89ab      	ldrh	r3, [r5, #12]
    a0a4:	071b      	lsls	r3, r3, #28
    a0a6:	d501      	bpl.n	a0ac <_vfiprintf_r+0x3c>
    a0a8:	692b      	ldr	r3, [r5, #16]
    a0aa:	b9eb      	cbnz	r3, a0e8 <_vfiprintf_r+0x78>
    a0ac:	4629      	mov	r1, r5
    a0ae:	4630      	mov	r0, r6
    a0b0:	f000 fa9c 	bl	a5ec <__swsetup_r>
    a0b4:	b1c0      	cbz	r0, a0e8 <_vfiprintf_r+0x78>
    a0b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a0b8:	07dc      	lsls	r4, r3, #31
    a0ba:	d50e      	bpl.n	a0da <_vfiprintf_r+0x6a>
    a0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a0c0:	b01d      	add	sp, #116	; 0x74
    a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0c6:	4b79      	ldr	r3, [pc, #484]	; (a2ac <_vfiprintf_r+0x23c>)
    a0c8:	429d      	cmp	r5, r3
    a0ca:	d101      	bne.n	a0d0 <_vfiprintf_r+0x60>
    a0cc:	68b5      	ldr	r5, [r6, #8]
    a0ce:	e7df      	b.n	a090 <_vfiprintf_r+0x20>
    a0d0:	4b77      	ldr	r3, [pc, #476]	; (a2b0 <_vfiprintf_r+0x240>)
    a0d2:	429d      	cmp	r5, r3
    a0d4:	bf08      	it	eq
    a0d6:	68f5      	ldreq	r5, [r6, #12]
    a0d8:	e7da      	b.n	a090 <_vfiprintf_r+0x20>
    a0da:	89ab      	ldrh	r3, [r5, #12]
    a0dc:	0598      	lsls	r0, r3, #22
    a0de:	d4ed      	bmi.n	a0bc <_vfiprintf_r+0x4c>
    a0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a0e2:	f7fa fd2f 	bl	4b44 <__retarget_lock_release_recursive>
    a0e6:	e7e9      	b.n	a0bc <_vfiprintf_r+0x4c>
    a0e8:	2300      	movs	r3, #0
    a0ea:	9309      	str	r3, [sp, #36]	; 0x24
    a0ec:	2320      	movs	r3, #32
    a0ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    a0f2:	f8cd 800c 	str.w	r8, [sp, #12]
    a0f6:	2330      	movs	r3, #48	; 0x30
    a0f8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a2b4 <_vfiprintf_r+0x244>
    a0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    a100:	f04f 0901 	mov.w	r9, #1
    a104:	4623      	mov	r3, r4
    a106:	469a      	mov	sl, r3
    a108:	f813 2b01 	ldrb.w	r2, [r3], #1
    a10c:	b10a      	cbz	r2, a112 <_vfiprintf_r+0xa2>
    a10e:	2a25      	cmp	r2, #37	; 0x25
    a110:	d1f9      	bne.n	a106 <_vfiprintf_r+0x96>
    a112:	ebba 0b04 	subs.w	fp, sl, r4
    a116:	d00b      	beq.n	a130 <_vfiprintf_r+0xc0>
    a118:	465b      	mov	r3, fp
    a11a:	4622      	mov	r2, r4
    a11c:	4629      	mov	r1, r5
    a11e:	4630      	mov	r0, r6
    a120:	f001 fe1f 	bl	bd62 <__sfputs_r>
    a124:	3001      	adds	r0, #1
    a126:	f000 80a6 	beq.w	a276 <_vfiprintf_r+0x206>
    a12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a12c:	445a      	add	r2, fp
    a12e:	9209      	str	r2, [sp, #36]	; 0x24
    a130:	f89a 3000 	ldrb.w	r3, [sl]
    a134:	2b00      	cmp	r3, #0
    a136:	f000 809e 	beq.w	a276 <_vfiprintf_r+0x206>
    a13a:	2300      	movs	r3, #0
    a13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a140:	e9cd 2305 	strd	r2, r3, [sp, #20]
    a144:	f10a 0a01 	add.w	sl, sl, #1
    a148:	9304      	str	r3, [sp, #16]
    a14a:	9307      	str	r3, [sp, #28]
    a14c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    a150:	931a      	str	r3, [sp, #104]	; 0x68
    a152:	4654      	mov	r4, sl
    a154:	4857      	ldr	r0, [pc, #348]	; (a2b4 <_vfiprintf_r+0x244>)
    a156:	f814 1b01 	ldrb.w	r1, [r4], #1
    a15a:	2205      	movs	r2, #5
    a15c:	f7f5 ffd0 	bl	100 <memchr>
    a160:	9b04      	ldr	r3, [sp, #16]
    a162:	b9d0      	cbnz	r0, a19a <_vfiprintf_r+0x12a>
    a164:	06d9      	lsls	r1, r3, #27
    a166:	bf44      	itt	mi
    a168:	2220      	movmi	r2, #32
    a16a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a16e:	071a      	lsls	r2, r3, #28
    a170:	bf44      	itt	mi
    a172:	222b      	movmi	r2, #43	; 0x2b
    a174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    a178:	f89a 2000 	ldrb.w	r2, [sl]
    a17c:	2a2a      	cmp	r2, #42	; 0x2a
    a17e:	d014      	beq.n	a1aa <_vfiprintf_r+0x13a>
    a180:	9a07      	ldr	r2, [sp, #28]
    a182:	4654      	mov	r4, sl
    a184:	2000      	movs	r0, #0
    a186:	f04f 0c0a 	mov.w	ip, #10
    a18a:	4621      	mov	r1, r4
    a18c:	f811 3b01 	ldrb.w	r3, [r1], #1
    a190:	3b30      	subs	r3, #48	; 0x30
    a192:	2b09      	cmp	r3, #9
    a194:	d94a      	bls.n	a22c <_vfiprintf_r+0x1bc>
    a196:	b970      	cbnz	r0, a1b6 <_vfiprintf_r+0x146>
    a198:	e014      	b.n	a1c4 <_vfiprintf_r+0x154>
    a19a:	eba0 0008 	sub.w	r0, r0, r8
    a19e:	fa09 f000 	lsl.w	r0, r9, r0
    a1a2:	4318      	orrs	r0, r3
    a1a4:	9004      	str	r0, [sp, #16]
    a1a6:	46a2      	mov	sl, r4
    a1a8:	e7d3      	b.n	a152 <_vfiprintf_r+0xe2>
    a1aa:	9a03      	ldr	r2, [sp, #12]
    a1ac:	1d11      	adds	r1, r2, #4
    a1ae:	6812      	ldr	r2, [r2, #0]
    a1b0:	9103      	str	r1, [sp, #12]
    a1b2:	2a00      	cmp	r2, #0
    a1b4:	db01      	blt.n	a1ba <_vfiprintf_r+0x14a>
    a1b6:	9207      	str	r2, [sp, #28]
    a1b8:	e004      	b.n	a1c4 <_vfiprintf_r+0x154>
    a1ba:	4252      	negs	r2, r2
    a1bc:	f043 0302 	orr.w	r3, r3, #2
    a1c0:	9207      	str	r2, [sp, #28]
    a1c2:	9304      	str	r3, [sp, #16]
    a1c4:	7823      	ldrb	r3, [r4, #0]
    a1c6:	2b2e      	cmp	r3, #46	; 0x2e
    a1c8:	d10a      	bne.n	a1e0 <_vfiprintf_r+0x170>
    a1ca:	7863      	ldrb	r3, [r4, #1]
    a1cc:	2b2a      	cmp	r3, #42	; 0x2a
    a1ce:	d132      	bne.n	a236 <_vfiprintf_r+0x1c6>
    a1d0:	9b03      	ldr	r3, [sp, #12]
    a1d2:	1d1a      	adds	r2, r3, #4
    a1d4:	681b      	ldr	r3, [r3, #0]
    a1d6:	9203      	str	r2, [sp, #12]
    a1d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    a1dc:	3402      	adds	r4, #2
    a1de:	9305      	str	r3, [sp, #20]
    a1e0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; a2b8 <_vfiprintf_r+0x248>
    a1e4:	7821      	ldrb	r1, [r4, #0]
    a1e6:	2203      	movs	r2, #3
    a1e8:	4650      	mov	r0, sl
    a1ea:	f7f5 ff89 	bl	100 <memchr>
    a1ee:	b138      	cbz	r0, a200 <_vfiprintf_r+0x190>
    a1f0:	9b04      	ldr	r3, [sp, #16]
    a1f2:	eba0 000a 	sub.w	r0, r0, sl
    a1f6:	2240      	movs	r2, #64	; 0x40
    a1f8:	4082      	lsls	r2, r0
    a1fa:	4313      	orrs	r3, r2
    a1fc:	3401      	adds	r4, #1
    a1fe:	9304      	str	r3, [sp, #16]
    a200:	f814 1b01 	ldrb.w	r1, [r4], #1
    a204:	482d      	ldr	r0, [pc, #180]	; (a2bc <_vfiprintf_r+0x24c>)
    a206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    a20a:	2206      	movs	r2, #6
    a20c:	f7f5 ff78 	bl	100 <memchr>
    a210:	2800      	cmp	r0, #0
    a212:	d03f      	beq.n	a294 <_vfiprintf_r+0x224>
    a214:	4b2a      	ldr	r3, [pc, #168]	; (a2c0 <_vfiprintf_r+0x250>)
    a216:	bb1b      	cbnz	r3, a260 <_vfiprintf_r+0x1f0>
    a218:	9b03      	ldr	r3, [sp, #12]
    a21a:	3307      	adds	r3, #7
    a21c:	f023 0307 	bic.w	r3, r3, #7
    a220:	3308      	adds	r3, #8
    a222:	9303      	str	r3, [sp, #12]
    a224:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a226:	443b      	add	r3, r7
    a228:	9309      	str	r3, [sp, #36]	; 0x24
    a22a:	e76b      	b.n	a104 <_vfiprintf_r+0x94>
    a22c:	fb0c 3202 	mla	r2, ip, r2, r3
    a230:	460c      	mov	r4, r1
    a232:	2001      	movs	r0, #1
    a234:	e7a9      	b.n	a18a <_vfiprintf_r+0x11a>
    a236:	2300      	movs	r3, #0
    a238:	3401      	adds	r4, #1
    a23a:	9305      	str	r3, [sp, #20]
    a23c:	4619      	mov	r1, r3
    a23e:	f04f 0c0a 	mov.w	ip, #10
    a242:	4620      	mov	r0, r4
    a244:	f810 2b01 	ldrb.w	r2, [r0], #1
    a248:	3a30      	subs	r2, #48	; 0x30
    a24a:	2a09      	cmp	r2, #9
    a24c:	d903      	bls.n	a256 <_vfiprintf_r+0x1e6>
    a24e:	2b00      	cmp	r3, #0
    a250:	d0c6      	beq.n	a1e0 <_vfiprintf_r+0x170>
    a252:	9105      	str	r1, [sp, #20]
    a254:	e7c4      	b.n	a1e0 <_vfiprintf_r+0x170>
    a256:	fb0c 2101 	mla	r1, ip, r1, r2
    a25a:	4604      	mov	r4, r0
    a25c:	2301      	movs	r3, #1
    a25e:	e7f0      	b.n	a242 <_vfiprintf_r+0x1d2>
    a260:	ab03      	add	r3, sp, #12
    a262:	9300      	str	r3, [sp, #0]
    a264:	462a      	mov	r2, r5
    a266:	4b17      	ldr	r3, [pc, #92]	; (a2c4 <_vfiprintf_r+0x254>)
    a268:	a904      	add	r1, sp, #16
    a26a:	4630      	mov	r0, r6
    a26c:	f3af 8000 	nop.w
    a270:	4607      	mov	r7, r0
    a272:	1c78      	adds	r0, r7, #1
    a274:	d1d6      	bne.n	a224 <_vfiprintf_r+0x1b4>
    a276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    a278:	07d9      	lsls	r1, r3, #31
    a27a:	d405      	bmi.n	a288 <_vfiprintf_r+0x218>
    a27c:	89ab      	ldrh	r3, [r5, #12]
    a27e:	059a      	lsls	r2, r3, #22
    a280:	d402      	bmi.n	a288 <_vfiprintf_r+0x218>
    a282:	6da8      	ldr	r0, [r5, #88]	; 0x58
    a284:	f7fa fc5e 	bl	4b44 <__retarget_lock_release_recursive>
    a288:	89ab      	ldrh	r3, [r5, #12]
    a28a:	065b      	lsls	r3, r3, #25
    a28c:	f53f af16 	bmi.w	a0bc <_vfiprintf_r+0x4c>
    a290:	9809      	ldr	r0, [sp, #36]	; 0x24
    a292:	e715      	b.n	a0c0 <_vfiprintf_r+0x50>
    a294:	ab03      	add	r3, sp, #12
    a296:	9300      	str	r3, [sp, #0]
    a298:	462a      	mov	r2, r5
    a29a:	4b0a      	ldr	r3, [pc, #40]	; (a2c4 <_vfiprintf_r+0x254>)
    a29c:	a904      	add	r1, sp, #16
    a29e:	4630      	mov	r0, r6
    a2a0:	f000 f812 	bl	a2c8 <_printf_i>
    a2a4:	e7e4      	b.n	a270 <_vfiprintf_r+0x200>
    a2a6:	bf00      	nop
    a2a8:	0000c638 	.word	0x0000c638
    a2ac:	0000c618 	.word	0x0000c618
    a2b0:	0000c5f8 	.word	0x0000c5f8
    a2b4:	0000e4c9 	.word	0x0000e4c9
    a2b8:	0000e4cf 	.word	0x0000e4cf
    a2bc:	0000e4d3 	.word	0x0000e4d3
    a2c0:	00000000 	.word	0x00000000
    a2c4:	0000bd63 	.word	0x0000bd63

0000a2c8 <_printf_i>:
    a2c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    a2cc:	7e0f      	ldrb	r7, [r1, #24]
    a2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a2d0:	2f78      	cmp	r7, #120	; 0x78
    a2d2:	4691      	mov	r9, r2
    a2d4:	4680      	mov	r8, r0
    a2d6:	460c      	mov	r4, r1
    a2d8:	469a      	mov	sl, r3
    a2da:	f101 0243 	add.w	r2, r1, #67	; 0x43
    a2de:	d807      	bhi.n	a2f0 <_printf_i+0x28>
    a2e0:	2f62      	cmp	r7, #98	; 0x62
    a2e2:	d80a      	bhi.n	a2fa <_printf_i+0x32>
    a2e4:	2f00      	cmp	r7, #0
    a2e6:	f000 80e0 	beq.w	a4aa <_printf_i+0x1e2>
    a2ea:	2f58      	cmp	r7, #88	; 0x58
    a2ec:	f000 80bb 	beq.w	a466 <_printf_i+0x19e>
    a2f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
    a2f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    a2f8:	e03a      	b.n	a370 <_printf_i+0xa8>
    a2fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    a2fe:	2b15      	cmp	r3, #21
    a300:	d8f6      	bhi.n	a2f0 <_printf_i+0x28>
    a302:	a101      	add	r1, pc, #4	; (adr r1, a308 <_printf_i+0x40>)
    a304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    a308:	0000a361 	.word	0x0000a361
    a30c:	0000a375 	.word	0x0000a375
    a310:	0000a2f1 	.word	0x0000a2f1
    a314:	0000a2f1 	.word	0x0000a2f1
    a318:	0000a2f1 	.word	0x0000a2f1
    a31c:	0000a2f1 	.word	0x0000a2f1
    a320:	0000a375 	.word	0x0000a375
    a324:	0000a2f1 	.word	0x0000a2f1
    a328:	0000a2f1 	.word	0x0000a2f1
    a32c:	0000a2f1 	.word	0x0000a2f1
    a330:	0000a2f1 	.word	0x0000a2f1
    a334:	0000a491 	.word	0x0000a491
    a338:	0000a405 	.word	0x0000a405
    a33c:	0000a447 	.word	0x0000a447
    a340:	0000a2f1 	.word	0x0000a2f1
    a344:	0000a2f1 	.word	0x0000a2f1
    a348:	0000a4b3 	.word	0x0000a4b3
    a34c:	0000a2f1 	.word	0x0000a2f1
    a350:	0000a405 	.word	0x0000a405
    a354:	0000a2f1 	.word	0x0000a2f1
    a358:	0000a2f1 	.word	0x0000a2f1
    a35c:	0000a44f 	.word	0x0000a44f
    a360:	682b      	ldr	r3, [r5, #0]
    a362:	1d1a      	adds	r2, r3, #4
    a364:	681b      	ldr	r3, [r3, #0]
    a366:	602a      	str	r2, [r5, #0]
    a368:	f104 0642 	add.w	r6, r4, #66	; 0x42
    a36c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    a370:	2301      	movs	r3, #1
    a372:	e0ab      	b.n	a4cc <_printf_i+0x204>
    a374:	6823      	ldr	r3, [r4, #0]
    a376:	6829      	ldr	r1, [r5, #0]
    a378:	061f      	lsls	r7, r3, #24
    a37a:	f101 0004 	add.w	r0, r1, #4
    a37e:	6028      	str	r0, [r5, #0]
    a380:	d501      	bpl.n	a386 <_printf_i+0xbe>
    a382:	680d      	ldr	r5, [r1, #0]
    a384:	e003      	b.n	a38e <_printf_i+0xc6>
    a386:	065e      	lsls	r6, r3, #25
    a388:	d5fb      	bpl.n	a382 <_printf_i+0xba>
    a38a:	f9b1 5000 	ldrsh.w	r5, [r1]
    a38e:	6861      	ldr	r1, [r4, #4]
    a390:	2d00      	cmp	r5, #0
    a392:	da7a      	bge.n	a48a <_printf_i+0x1c2>
    a394:	202d      	movs	r0, #45	; 0x2d
    a396:	2900      	cmp	r1, #0
    a398:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    a39c:	60a1      	str	r1, [r4, #8]
    a39e:	da2d      	bge.n	a3fc <_printf_i+0x134>
    a3a0:	485e      	ldr	r0, [pc, #376]	; (a51c <_printf_i+0x254>)
    a3a2:	426d      	negs	r5, r5
    a3a4:	230a      	movs	r3, #10
    a3a6:	4616      	mov	r6, r2
    a3a8:	fbb5 f1f3 	udiv	r1, r5, r3
    a3ac:	fb03 5711 	mls	r7, r3, r1, r5
    a3b0:	5dc7      	ldrb	r7, [r0, r7]
    a3b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
    a3b6:	462f      	mov	r7, r5
    a3b8:	42bb      	cmp	r3, r7
    a3ba:	460d      	mov	r5, r1
    a3bc:	d9f4      	bls.n	a3a8 <_printf_i+0xe0>
    a3be:	2b08      	cmp	r3, #8
    a3c0:	d10b      	bne.n	a3da <_printf_i+0x112>
    a3c2:	6823      	ldr	r3, [r4, #0]
    a3c4:	07df      	lsls	r7, r3, #31
    a3c6:	d508      	bpl.n	a3da <_printf_i+0x112>
    a3c8:	6923      	ldr	r3, [r4, #16]
    a3ca:	6861      	ldr	r1, [r4, #4]
    a3cc:	4299      	cmp	r1, r3
    a3ce:	bfde      	ittt	le
    a3d0:	2330      	movle	r3, #48	; 0x30
    a3d2:	f806 3c01 	strble.w	r3, [r6, #-1]
    a3d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    a3da:	1b92      	subs	r2, r2, r6
    a3dc:	6122      	str	r2, [r4, #16]
    a3de:	f8cd a000 	str.w	sl, [sp]
    a3e2:	464b      	mov	r3, r9
    a3e4:	aa03      	add	r2, sp, #12
    a3e6:	4621      	mov	r1, r4
    a3e8:	4640      	mov	r0, r8
    a3ea:	f001 fccc 	bl	bd86 <_printf_common>
    a3ee:	3001      	adds	r0, #1
    a3f0:	d171      	bne.n	a4d6 <_printf_i+0x20e>
    a3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a3f6:	b004      	add	sp, #16
    a3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a3fc:	f023 0304 	bic.w	r3, r3, #4
    a400:	6023      	str	r3, [r4, #0]
    a402:	e7cd      	b.n	a3a0 <_printf_i+0xd8>
    a404:	682b      	ldr	r3, [r5, #0]
    a406:	6820      	ldr	r0, [r4, #0]
    a408:	1d19      	adds	r1, r3, #4
    a40a:	6029      	str	r1, [r5, #0]
    a40c:	0605      	lsls	r5, r0, #24
    a40e:	d501      	bpl.n	a414 <_printf_i+0x14c>
    a410:	681d      	ldr	r5, [r3, #0]
    a412:	e002      	b.n	a41a <_printf_i+0x152>
    a414:	0641      	lsls	r1, r0, #25
    a416:	d5fb      	bpl.n	a410 <_printf_i+0x148>
    a418:	881d      	ldrh	r5, [r3, #0]
    a41a:	4840      	ldr	r0, [pc, #256]	; (a51c <_printf_i+0x254>)
    a41c:	2f6f      	cmp	r7, #111	; 0x6f
    a41e:	bf14      	ite	ne
    a420:	230a      	movne	r3, #10
    a422:	2308      	moveq	r3, #8
    a424:	2100      	movs	r1, #0
    a426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    a42a:	6866      	ldr	r6, [r4, #4]
    a42c:	60a6      	str	r6, [r4, #8]
    a42e:	2e00      	cmp	r6, #0
    a430:	dbb9      	blt.n	a3a6 <_printf_i+0xde>
    a432:	6821      	ldr	r1, [r4, #0]
    a434:	f021 0104 	bic.w	r1, r1, #4
    a438:	6021      	str	r1, [r4, #0]
    a43a:	2d00      	cmp	r5, #0
    a43c:	d1b3      	bne.n	a3a6 <_printf_i+0xde>
    a43e:	2e00      	cmp	r6, #0
    a440:	d1b1      	bne.n	a3a6 <_printf_i+0xde>
    a442:	4616      	mov	r6, r2
    a444:	e7bb      	b.n	a3be <_printf_i+0xf6>
    a446:	6823      	ldr	r3, [r4, #0]
    a448:	f043 0320 	orr.w	r3, r3, #32
    a44c:	6023      	str	r3, [r4, #0]
    a44e:	4834      	ldr	r0, [pc, #208]	; (a520 <_printf_i+0x258>)
    a450:	2778      	movs	r7, #120	; 0x78
    a452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    a456:	6829      	ldr	r1, [r5, #0]
    a458:	6823      	ldr	r3, [r4, #0]
    a45a:	1d0e      	adds	r6, r1, #4
    a45c:	602e      	str	r6, [r5, #0]
    a45e:	061e      	lsls	r6, r3, #24
    a460:	d503      	bpl.n	a46a <_printf_i+0x1a2>
    a462:	680d      	ldr	r5, [r1, #0]
    a464:	e004      	b.n	a470 <_printf_i+0x1a8>
    a466:	482d      	ldr	r0, [pc, #180]	; (a51c <_printf_i+0x254>)
    a468:	e7f3      	b.n	a452 <_printf_i+0x18a>
    a46a:	065d      	lsls	r5, r3, #25
    a46c:	d5f9      	bpl.n	a462 <_printf_i+0x19a>
    a46e:	880d      	ldrh	r5, [r1, #0]
    a470:	07d9      	lsls	r1, r3, #31
    a472:	bf44      	itt	mi
    a474:	f043 0320 	orrmi.w	r3, r3, #32
    a478:	6023      	strmi	r3, [r4, #0]
    a47a:	b10d      	cbz	r5, a480 <_printf_i+0x1b8>
    a47c:	2310      	movs	r3, #16
    a47e:	e7d1      	b.n	a424 <_printf_i+0x15c>
    a480:	6823      	ldr	r3, [r4, #0]
    a482:	f023 0320 	bic.w	r3, r3, #32
    a486:	6023      	str	r3, [r4, #0]
    a488:	e7f8      	b.n	a47c <_printf_i+0x1b4>
    a48a:	4824      	ldr	r0, [pc, #144]	; (a51c <_printf_i+0x254>)
    a48c:	230a      	movs	r3, #10
    a48e:	e7cc      	b.n	a42a <_printf_i+0x162>
    a490:	682b      	ldr	r3, [r5, #0]
    a492:	6826      	ldr	r6, [r4, #0]
    a494:	6961      	ldr	r1, [r4, #20]
    a496:	1d18      	adds	r0, r3, #4
    a498:	6028      	str	r0, [r5, #0]
    a49a:	0635      	lsls	r5, r6, #24
    a49c:	681b      	ldr	r3, [r3, #0]
    a49e:	d501      	bpl.n	a4a4 <_printf_i+0x1dc>
    a4a0:	6019      	str	r1, [r3, #0]
    a4a2:	e002      	b.n	a4aa <_printf_i+0x1e2>
    a4a4:	0670      	lsls	r0, r6, #25
    a4a6:	d5fb      	bpl.n	a4a0 <_printf_i+0x1d8>
    a4a8:	8019      	strh	r1, [r3, #0]
    a4aa:	2300      	movs	r3, #0
    a4ac:	6123      	str	r3, [r4, #16]
    a4ae:	4616      	mov	r6, r2
    a4b0:	e795      	b.n	a3de <_printf_i+0x116>
    a4b2:	682b      	ldr	r3, [r5, #0]
    a4b4:	1d1a      	adds	r2, r3, #4
    a4b6:	602a      	str	r2, [r5, #0]
    a4b8:	681e      	ldr	r6, [r3, #0]
    a4ba:	6862      	ldr	r2, [r4, #4]
    a4bc:	2100      	movs	r1, #0
    a4be:	4630      	mov	r0, r6
    a4c0:	f7f5 fe1e 	bl	100 <memchr>
    a4c4:	b108      	cbz	r0, a4ca <_printf_i+0x202>
    a4c6:	1b80      	subs	r0, r0, r6
    a4c8:	6060      	str	r0, [r4, #4]
    a4ca:	6863      	ldr	r3, [r4, #4]
    a4cc:	6123      	str	r3, [r4, #16]
    a4ce:	2300      	movs	r3, #0
    a4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    a4d4:	e783      	b.n	a3de <_printf_i+0x116>
    a4d6:	6923      	ldr	r3, [r4, #16]
    a4d8:	4632      	mov	r2, r6
    a4da:	4649      	mov	r1, r9
    a4dc:	4640      	mov	r0, r8
    a4de:	47d0      	blx	sl
    a4e0:	3001      	adds	r0, #1
    a4e2:	d086      	beq.n	a3f2 <_printf_i+0x12a>
    a4e4:	6823      	ldr	r3, [r4, #0]
    a4e6:	079b      	lsls	r3, r3, #30
    a4e8:	d414      	bmi.n	a514 <_printf_i+0x24c>
    a4ea:	68e0      	ldr	r0, [r4, #12]
    a4ec:	9b03      	ldr	r3, [sp, #12]
    a4ee:	4298      	cmp	r0, r3
    a4f0:	bfb8      	it	lt
    a4f2:	4618      	movlt	r0, r3
    a4f4:	e77f      	b.n	a3f6 <_printf_i+0x12e>
    a4f6:	2301      	movs	r3, #1
    a4f8:	4632      	mov	r2, r6
    a4fa:	4649      	mov	r1, r9
    a4fc:	4640      	mov	r0, r8
    a4fe:	47d0      	blx	sl
    a500:	3001      	adds	r0, #1
    a502:	f43f af76 	beq.w	a3f2 <_printf_i+0x12a>
    a506:	3501      	adds	r5, #1
    a508:	68e3      	ldr	r3, [r4, #12]
    a50a:	9903      	ldr	r1, [sp, #12]
    a50c:	1a5b      	subs	r3, r3, r1
    a50e:	42ab      	cmp	r3, r5
    a510:	dcf1      	bgt.n	a4f6 <_printf_i+0x22e>
    a512:	e7ea      	b.n	a4ea <_printf_i+0x222>
    a514:	2500      	movs	r5, #0
    a516:	f104 0619 	add.w	r6, r4, #25
    a51a:	e7f5      	b.n	a508 <_printf_i+0x240>
    a51c:	0000e4da 	.word	0x0000e4da
    a520:	0000e4eb 	.word	0x0000e4eb

0000a524 <__swbuf_r>:
    a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a526:	460e      	mov	r6, r1
    a528:	4614      	mov	r4, r2
    a52a:	4605      	mov	r5, r0
    a52c:	b118      	cbz	r0, a536 <__swbuf_r+0x12>
    a52e:	6983      	ldr	r3, [r0, #24]
    a530:	b90b      	cbnz	r3, a536 <__swbuf_r+0x12>
    a532:	f7ff fd13 	bl	9f5c <__sinit>
    a536:	4b21      	ldr	r3, [pc, #132]	; (a5bc <__swbuf_r+0x98>)
    a538:	429c      	cmp	r4, r3
    a53a:	d110      	bne.n	a55e <__swbuf_r+0x3a>
    a53c:	686c      	ldr	r4, [r5, #4]
    a53e:	69a3      	ldr	r3, [r4, #24]
    a540:	60a3      	str	r3, [r4, #8]
    a542:	89a3      	ldrh	r3, [r4, #12]
    a544:	071a      	lsls	r2, r3, #28
    a546:	d501      	bpl.n	a54c <__swbuf_r+0x28>
    a548:	6923      	ldr	r3, [r4, #16]
    a54a:	b993      	cbnz	r3, a572 <__swbuf_r+0x4e>
    a54c:	4621      	mov	r1, r4
    a54e:	4628      	mov	r0, r5
    a550:	f000 f84c 	bl	a5ec <__swsetup_r>
    a554:	b168      	cbz	r0, a572 <__swbuf_r+0x4e>
    a556:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    a55a:	4638      	mov	r0, r7
    a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a55e:	4b18      	ldr	r3, [pc, #96]	; (a5c0 <__swbuf_r+0x9c>)
    a560:	429c      	cmp	r4, r3
    a562:	d101      	bne.n	a568 <__swbuf_r+0x44>
    a564:	68ac      	ldr	r4, [r5, #8]
    a566:	e7ea      	b.n	a53e <__swbuf_r+0x1a>
    a568:	4b16      	ldr	r3, [pc, #88]	; (a5c4 <__swbuf_r+0xa0>)
    a56a:	429c      	cmp	r4, r3
    a56c:	bf08      	it	eq
    a56e:	68ec      	ldreq	r4, [r5, #12]
    a570:	e7e5      	b.n	a53e <__swbuf_r+0x1a>
    a572:	6923      	ldr	r3, [r4, #16]
    a574:	6820      	ldr	r0, [r4, #0]
    a576:	1ac0      	subs	r0, r0, r3
    a578:	6963      	ldr	r3, [r4, #20]
    a57a:	b2f6      	uxtb	r6, r6
    a57c:	4283      	cmp	r3, r0
    a57e:	4637      	mov	r7, r6
    a580:	dc05      	bgt.n	a58e <__swbuf_r+0x6a>
    a582:	4621      	mov	r1, r4
    a584:	4628      	mov	r0, r5
    a586:	f000 f8ad 	bl	a6e4 <_fflush_r>
    a58a:	2800      	cmp	r0, #0
    a58c:	d1e3      	bne.n	a556 <__swbuf_r+0x32>
    a58e:	68a3      	ldr	r3, [r4, #8]
    a590:	3b01      	subs	r3, #1
    a592:	60a3      	str	r3, [r4, #8]
    a594:	6823      	ldr	r3, [r4, #0]
    a596:	1c5a      	adds	r2, r3, #1
    a598:	6022      	str	r2, [r4, #0]
    a59a:	701e      	strb	r6, [r3, #0]
    a59c:	6963      	ldr	r3, [r4, #20]
    a59e:	3001      	adds	r0, #1
    a5a0:	4283      	cmp	r3, r0
    a5a2:	d004      	beq.n	a5ae <__swbuf_r+0x8a>
    a5a4:	89a3      	ldrh	r3, [r4, #12]
    a5a6:	07db      	lsls	r3, r3, #31
    a5a8:	d5d7      	bpl.n	a55a <__swbuf_r+0x36>
    a5aa:	2e0a      	cmp	r6, #10
    a5ac:	d1d5      	bne.n	a55a <__swbuf_r+0x36>
    a5ae:	4621      	mov	r1, r4
    a5b0:	4628      	mov	r0, r5
    a5b2:	f000 f897 	bl	a6e4 <_fflush_r>
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d0cf      	beq.n	a55a <__swbuf_r+0x36>
    a5ba:	e7cc      	b.n	a556 <__swbuf_r+0x32>
    a5bc:	0000c638 	.word	0x0000c638
    a5c0:	0000c618 	.word	0x0000c618
    a5c4:	0000c5f8 	.word	0x0000c5f8

0000a5c8 <_write_r>:
    a5c8:	b538      	push	{r3, r4, r5, lr}
    a5ca:	4d07      	ldr	r5, [pc, #28]	; (a5e8 <_write_r+0x20>)
    a5cc:	4604      	mov	r4, r0
    a5ce:	4608      	mov	r0, r1
    a5d0:	4611      	mov	r1, r2
    a5d2:	2200      	movs	r2, #0
    a5d4:	602a      	str	r2, [r5, #0]
    a5d6:	461a      	mov	r2, r3
    a5d8:	f000 fd6e 	bl	b0b8 <_write>
    a5dc:	1c43      	adds	r3, r0, #1
    a5de:	d102      	bne.n	a5e6 <_write_r+0x1e>
    a5e0:	682b      	ldr	r3, [r5, #0]
    a5e2:	b103      	cbz	r3, a5e6 <_write_r+0x1e>
    a5e4:	6023      	str	r3, [r4, #0]
    a5e6:	bd38      	pop	{r3, r4, r5, pc}
    a5e8:	20000f70 	.word	0x20000f70

0000a5ec <__swsetup_r>:
    a5ec:	4b31      	ldr	r3, [pc, #196]	; (a6b4 <__swsetup_r+0xc8>)
    a5ee:	b570      	push	{r4, r5, r6, lr}
    a5f0:	681d      	ldr	r5, [r3, #0]
    a5f2:	4606      	mov	r6, r0
    a5f4:	460c      	mov	r4, r1
    a5f6:	b125      	cbz	r5, a602 <__swsetup_r+0x16>
    a5f8:	69ab      	ldr	r3, [r5, #24]
    a5fa:	b913      	cbnz	r3, a602 <__swsetup_r+0x16>
    a5fc:	4628      	mov	r0, r5
    a5fe:	f7ff fcad 	bl	9f5c <__sinit>
    a602:	4b2d      	ldr	r3, [pc, #180]	; (a6b8 <__swsetup_r+0xcc>)
    a604:	429c      	cmp	r4, r3
    a606:	d10e      	bne.n	a626 <__swsetup_r+0x3a>
    a608:	686c      	ldr	r4, [r5, #4]
    a60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a60e:	071a      	lsls	r2, r3, #28
    a610:	d42c      	bmi.n	a66c <__swsetup_r+0x80>
    a612:	06dd      	lsls	r5, r3, #27
    a614:	d411      	bmi.n	a63a <__swsetup_r+0x4e>
    a616:	2209      	movs	r2, #9
    a618:	6032      	str	r2, [r6, #0]
    a61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a61e:	81a3      	strh	r3, [r4, #12]
    a620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a624:	e03d      	b.n	a6a2 <__swsetup_r+0xb6>
    a626:	4b25      	ldr	r3, [pc, #148]	; (a6bc <__swsetup_r+0xd0>)
    a628:	429c      	cmp	r4, r3
    a62a:	d101      	bne.n	a630 <__swsetup_r+0x44>
    a62c:	68ac      	ldr	r4, [r5, #8]
    a62e:	e7ec      	b.n	a60a <__swsetup_r+0x1e>
    a630:	4b23      	ldr	r3, [pc, #140]	; (a6c0 <__swsetup_r+0xd4>)
    a632:	429c      	cmp	r4, r3
    a634:	bf08      	it	eq
    a636:	68ec      	ldreq	r4, [r5, #12]
    a638:	e7e7      	b.n	a60a <__swsetup_r+0x1e>
    a63a:	0758      	lsls	r0, r3, #29
    a63c:	d512      	bpl.n	a664 <__swsetup_r+0x78>
    a63e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a640:	b141      	cbz	r1, a654 <__swsetup_r+0x68>
    a642:	f104 0344 	add.w	r3, r4, #68	; 0x44
    a646:	4299      	cmp	r1, r3
    a648:	d002      	beq.n	a650 <__swsetup_r+0x64>
    a64a:	4630      	mov	r0, r6
    a64c:	f7ff fb78 	bl	9d40 <_free_r>
    a650:	2300      	movs	r3, #0
    a652:	6363      	str	r3, [r4, #52]	; 0x34
    a654:	89a3      	ldrh	r3, [r4, #12]
    a656:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    a65a:	81a3      	strh	r3, [r4, #12]
    a65c:	2300      	movs	r3, #0
    a65e:	6063      	str	r3, [r4, #4]
    a660:	6923      	ldr	r3, [r4, #16]
    a662:	6023      	str	r3, [r4, #0]
    a664:	89a3      	ldrh	r3, [r4, #12]
    a666:	f043 0308 	orr.w	r3, r3, #8
    a66a:	81a3      	strh	r3, [r4, #12]
    a66c:	6923      	ldr	r3, [r4, #16]
    a66e:	b94b      	cbnz	r3, a684 <__swsetup_r+0x98>
    a670:	89a3      	ldrh	r3, [r4, #12]
    a672:	f403 7320 	and.w	r3, r3, #640	; 0x280
    a676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a67a:	d003      	beq.n	a684 <__swsetup_r+0x98>
    a67c:	4621      	mov	r1, r4
    a67e:	4630      	mov	r0, r6
    a680:	f000 f87e 	bl	a780 <__smakebuf_r>
    a684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a688:	f013 0201 	ands.w	r2, r3, #1
    a68c:	d00a      	beq.n	a6a4 <__swsetup_r+0xb8>
    a68e:	2200      	movs	r2, #0
    a690:	60a2      	str	r2, [r4, #8]
    a692:	6962      	ldr	r2, [r4, #20]
    a694:	4252      	negs	r2, r2
    a696:	61a2      	str	r2, [r4, #24]
    a698:	6922      	ldr	r2, [r4, #16]
    a69a:	b942      	cbnz	r2, a6ae <__swsetup_r+0xc2>
    a69c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    a6a0:	d1bb      	bne.n	a61a <__swsetup_r+0x2e>
    a6a2:	bd70      	pop	{r4, r5, r6, pc}
    a6a4:	0799      	lsls	r1, r3, #30
    a6a6:	bf58      	it	pl
    a6a8:	6962      	ldrpl	r2, [r4, #20]
    a6aa:	60a2      	str	r2, [r4, #8]
    a6ac:	e7f4      	b.n	a698 <__swsetup_r+0xac>
    a6ae:	2000      	movs	r0, #0
    a6b0:	e7f7      	b.n	a6a2 <__swsetup_r+0xb6>
    a6b2:	bf00      	nop
    a6b4:	200000f0 	.word	0x200000f0
    a6b8:	0000c638 	.word	0x0000c638
    a6bc:	0000c618 	.word	0x0000c618
    a6c0:	0000c5f8 	.word	0x0000c5f8

0000a6c4 <_close_r>:
    a6c4:	b538      	push	{r3, r4, r5, lr}
    a6c6:	4d06      	ldr	r5, [pc, #24]	; (a6e0 <_close_r+0x1c>)
    a6c8:	2300      	movs	r3, #0
    a6ca:	4604      	mov	r4, r0
    a6cc:	4608      	mov	r0, r1
    a6ce:	602b      	str	r3, [r5, #0]
    a6d0:	f000 fcf6 	bl	b0c0 <_close>
    a6d4:	1c43      	adds	r3, r0, #1
    a6d6:	d102      	bne.n	a6de <_close_r+0x1a>
    a6d8:	682b      	ldr	r3, [r5, #0]
    a6da:	b103      	cbz	r3, a6de <_close_r+0x1a>
    a6dc:	6023      	str	r3, [r4, #0]
    a6de:	bd38      	pop	{r3, r4, r5, pc}
    a6e0:	20000f70 	.word	0x20000f70

0000a6e4 <_fflush_r>:
    a6e4:	b538      	push	{r3, r4, r5, lr}
    a6e6:	690b      	ldr	r3, [r1, #16]
    a6e8:	4605      	mov	r5, r0
    a6ea:	460c      	mov	r4, r1
    a6ec:	b913      	cbnz	r3, a6f4 <_fflush_r+0x10>
    a6ee:	2500      	movs	r5, #0
    a6f0:	4628      	mov	r0, r5
    a6f2:	bd38      	pop	{r3, r4, r5, pc}
    a6f4:	b118      	cbz	r0, a6fe <_fflush_r+0x1a>
    a6f6:	6983      	ldr	r3, [r0, #24]
    a6f8:	b90b      	cbnz	r3, a6fe <_fflush_r+0x1a>
    a6fa:	f7ff fc2f 	bl	9f5c <__sinit>
    a6fe:	4b14      	ldr	r3, [pc, #80]	; (a750 <_fflush_r+0x6c>)
    a700:	429c      	cmp	r4, r3
    a702:	d11b      	bne.n	a73c <_fflush_r+0x58>
    a704:	686c      	ldr	r4, [r5, #4]
    a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a70a:	2b00      	cmp	r3, #0
    a70c:	d0ef      	beq.n	a6ee <_fflush_r+0xa>
    a70e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a710:	07d0      	lsls	r0, r2, #31
    a712:	d404      	bmi.n	a71e <_fflush_r+0x3a>
    a714:	0599      	lsls	r1, r3, #22
    a716:	d402      	bmi.n	a71e <_fflush_r+0x3a>
    a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a71a:	f7fa f9f5 	bl	4b08 <__retarget_lock_acquire_recursive>
    a71e:	4628      	mov	r0, r5
    a720:	4621      	mov	r1, r4
    a722:	f001 fbe0 	bl	bee6 <__sflush_r>
    a726:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a728:	07da      	lsls	r2, r3, #31
    a72a:	4605      	mov	r5, r0
    a72c:	d4e0      	bmi.n	a6f0 <_fflush_r+0xc>
    a72e:	89a3      	ldrh	r3, [r4, #12]
    a730:	059b      	lsls	r3, r3, #22
    a732:	d4dd      	bmi.n	a6f0 <_fflush_r+0xc>
    a734:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a736:	f7fa fa05 	bl	4b44 <__retarget_lock_release_recursive>
    a73a:	e7d9      	b.n	a6f0 <_fflush_r+0xc>
    a73c:	4b05      	ldr	r3, [pc, #20]	; (a754 <_fflush_r+0x70>)
    a73e:	429c      	cmp	r4, r3
    a740:	d101      	bne.n	a746 <_fflush_r+0x62>
    a742:	68ac      	ldr	r4, [r5, #8]
    a744:	e7df      	b.n	a706 <_fflush_r+0x22>
    a746:	4b04      	ldr	r3, [pc, #16]	; (a758 <_fflush_r+0x74>)
    a748:	429c      	cmp	r4, r3
    a74a:	bf08      	it	eq
    a74c:	68ec      	ldreq	r4, [r5, #12]
    a74e:	e7da      	b.n	a706 <_fflush_r+0x22>
    a750:	0000c638 	.word	0x0000c638
    a754:	0000c618 	.word	0x0000c618
    a758:	0000c5f8 	.word	0x0000c5f8

0000a75c <_lseek_r>:
    a75c:	b538      	push	{r3, r4, r5, lr}
    a75e:	4d07      	ldr	r5, [pc, #28]	; (a77c <_lseek_r+0x20>)
    a760:	4604      	mov	r4, r0
    a762:	4608      	mov	r0, r1
    a764:	4611      	mov	r1, r2
    a766:	2200      	movs	r2, #0
    a768:	602a      	str	r2, [r5, #0]
    a76a:	461a      	mov	r2, r3
    a76c:	f000 fcab 	bl	b0c6 <_lseek>
    a770:	1c43      	adds	r3, r0, #1
    a772:	d102      	bne.n	a77a <_lseek_r+0x1e>
    a774:	682b      	ldr	r3, [r5, #0]
    a776:	b103      	cbz	r3, a77a <_lseek_r+0x1e>
    a778:	6023      	str	r3, [r4, #0]
    a77a:	bd38      	pop	{r3, r4, r5, pc}
    a77c:	20000f70 	.word	0x20000f70

0000a780 <__smakebuf_r>:
    a780:	898b      	ldrh	r3, [r1, #12]
    a782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a784:	079d      	lsls	r5, r3, #30
    a786:	4606      	mov	r6, r0
    a788:	460c      	mov	r4, r1
    a78a:	d507      	bpl.n	a79c <__smakebuf_r+0x1c>
    a78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    a790:	6023      	str	r3, [r4, #0]
    a792:	6123      	str	r3, [r4, #16]
    a794:	2301      	movs	r3, #1
    a796:	6163      	str	r3, [r4, #20]
    a798:	b003      	add	sp, #12
    a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a79c:	ab01      	add	r3, sp, #4
    a79e:	466a      	mov	r2, sp
    a7a0:	f001 fc21 	bl	bfe6 <__swhatbuf_r>
    a7a4:	9f00      	ldr	r7, [sp, #0]
    a7a6:	4605      	mov	r5, r0
    a7a8:	4639      	mov	r1, r7
    a7aa:	4630      	mov	r0, r6
    a7ac:	f7ff fb12 	bl	9dd4 <_malloc_r>
    a7b0:	b948      	cbnz	r0, a7c6 <__smakebuf_r+0x46>
    a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a7b6:	059a      	lsls	r2, r3, #22
    a7b8:	d4ee      	bmi.n	a798 <__smakebuf_r+0x18>
    a7ba:	f023 0303 	bic.w	r3, r3, #3
    a7be:	f043 0302 	orr.w	r3, r3, #2
    a7c2:	81a3      	strh	r3, [r4, #12]
    a7c4:	e7e2      	b.n	a78c <__smakebuf_r+0xc>
    a7c6:	4b0d      	ldr	r3, [pc, #52]	; (a7fc <__smakebuf_r+0x7c>)
    a7c8:	62b3      	str	r3, [r6, #40]	; 0x28
    a7ca:	89a3      	ldrh	r3, [r4, #12]
    a7cc:	6020      	str	r0, [r4, #0]
    a7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a7d2:	81a3      	strh	r3, [r4, #12]
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
    a7da:	b15b      	cbz	r3, a7f4 <__smakebuf_r+0x74>
    a7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a7e0:	4630      	mov	r0, r6
    a7e2:	f000 f831 	bl	a848 <_isatty_r>
    a7e6:	b128      	cbz	r0, a7f4 <__smakebuf_r+0x74>
    a7e8:	89a3      	ldrh	r3, [r4, #12]
    a7ea:	f023 0303 	bic.w	r3, r3, #3
    a7ee:	f043 0301 	orr.w	r3, r3, #1
    a7f2:	81a3      	strh	r3, [r4, #12]
    a7f4:	89a3      	ldrh	r3, [r4, #12]
    a7f6:	431d      	orrs	r5, r3
    a7f8:	81a5      	strh	r5, [r4, #12]
    a7fa:	e7cd      	b.n	a798 <__smakebuf_r+0x18>
    a7fc:	00009f21 	.word	0x00009f21

0000a800 <_read_r>:
    a800:	b538      	push	{r3, r4, r5, lr}
    a802:	4d07      	ldr	r5, [pc, #28]	; (a820 <_read_r+0x20>)
    a804:	4604      	mov	r4, r0
    a806:	4608      	mov	r0, r1
    a808:	4611      	mov	r1, r2
    a80a:	2200      	movs	r2, #0
    a80c:	602a      	str	r2, [r5, #0]
    a80e:	461a      	mov	r2, r3
    a810:	f000 fc4e 	bl	b0b0 <_read>
    a814:	1c43      	adds	r3, r0, #1
    a816:	d102      	bne.n	a81e <_read_r+0x1e>
    a818:	682b      	ldr	r3, [r5, #0]
    a81a:	b103      	cbz	r3, a81e <_read_r+0x1e>
    a81c:	6023      	str	r3, [r4, #0]
    a81e:	bd38      	pop	{r3, r4, r5, pc}
    a820:	20000f70 	.word	0x20000f70

0000a824 <_fstat_r>:
    a824:	b538      	push	{r3, r4, r5, lr}
    a826:	4d07      	ldr	r5, [pc, #28]	; (a844 <_fstat_r+0x20>)
    a828:	2300      	movs	r3, #0
    a82a:	4604      	mov	r4, r0
    a82c:	4608      	mov	r0, r1
    a82e:	4611      	mov	r1, r2
    a830:	602b      	str	r3, [r5, #0]
    a832:	f000 fc4f 	bl	b0d4 <_fstat>
    a836:	1c43      	adds	r3, r0, #1
    a838:	d102      	bne.n	a840 <_fstat_r+0x1c>
    a83a:	682b      	ldr	r3, [r5, #0]
    a83c:	b103      	cbz	r3, a840 <_fstat_r+0x1c>
    a83e:	6023      	str	r3, [r4, #0]
    a840:	bd38      	pop	{r3, r4, r5, pc}
    a842:	bf00      	nop
    a844:	20000f70 	.word	0x20000f70

0000a848 <_isatty_r>:
    a848:	b538      	push	{r3, r4, r5, lr}
    a84a:	4d06      	ldr	r5, [pc, #24]	; (a864 <_isatty_r+0x1c>)
    a84c:	2300      	movs	r3, #0
    a84e:	4604      	mov	r4, r0
    a850:	4608      	mov	r0, r1
    a852:	602b      	str	r3, [r5, #0]
    a854:	f000 fc39 	bl	b0ca <_isatty>
    a858:	1c43      	adds	r3, r0, #1
    a85a:	d102      	bne.n	a862 <_isatty_r+0x1a>
    a85c:	682b      	ldr	r3, [r5, #0]
    a85e:	b103      	cbz	r3, a862 <_isatty_r+0x1a>
    a860:	6023      	str	r3, [r4, #0]
    a862:	bd38      	pop	{r3, r4, r5, pc}
    a864:	20000f70 	.word	0x20000f70

0000a868 <nrf_cc3xx_platform_init_no_rng>:
    a868:	b510      	push	{r4, lr}
    a86a:	4c0a      	ldr	r4, [pc, #40]	; (a894 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a86c:	6823      	ldr	r3, [r4, #0]
    a86e:	b11b      	cbz	r3, a878 <nrf_cc3xx_platform_init_no_rng+0x10>
    a870:	2301      	movs	r3, #1
    a872:	6023      	str	r3, [r4, #0]
    a874:	2000      	movs	r0, #0
    a876:	bd10      	pop	{r4, pc}
    a878:	f000 f8ce 	bl	aa18 <CC_LibInitNoRng>
    a87c:	2800      	cmp	r0, #0
    a87e:	d0f7      	beq.n	a870 <nrf_cc3xx_platform_init_no_rng+0x8>
    a880:	3801      	subs	r0, #1
    a882:	2806      	cmp	r0, #6
    a884:	d803      	bhi.n	a88e <nrf_cc3xx_platform_init_no_rng+0x26>
    a886:	4b04      	ldr	r3, [pc, #16]	; (a898 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a888:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a88c:	bd10      	pop	{r4, pc}
    a88e:	4803      	ldr	r0, [pc, #12]	; (a89c <nrf_cc3xx_platform_init_no_rng+0x34>)
    a890:	bd10      	pop	{r4, pc}
    a892:	bf00      	nop
    a894:	20000f74 	.word	0x20000f74
    a898:	0000c658 	.word	0x0000c658
    a89c:	ffff8ffe 	.word	0xffff8ffe

0000a8a0 <nrf_cc3xx_platform_abort>:
    a8a0:	f3bf 8f4f 	dsb	sy
    a8a4:	4905      	ldr	r1, [pc, #20]	; (a8bc <nrf_cc3xx_platform_abort+0x1c>)
    a8a6:	4b06      	ldr	r3, [pc, #24]	; (a8c0 <nrf_cc3xx_platform_abort+0x20>)
    a8a8:	68ca      	ldr	r2, [r1, #12]
    a8aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a8ae:	4313      	orrs	r3, r2
    a8b0:	60cb      	str	r3, [r1, #12]
    a8b2:	f3bf 8f4f 	dsb	sy
    a8b6:	bf00      	nop
    a8b8:	e7fd      	b.n	a8b6 <nrf_cc3xx_platform_abort+0x16>
    a8ba:	bf00      	nop
    a8bc:	e000ed00 	.word	0xe000ed00
    a8c0:	05fa0004 	.word	0x05fa0004

0000a8c4 <CC_PalAbort>:
    a8c4:	b410      	push	{r4}
    a8c6:	4b09      	ldr	r3, [pc, #36]	; (a8ec <CC_PalAbort+0x28>)
    a8c8:	4909      	ldr	r1, [pc, #36]	; (a8f0 <CC_PalAbort+0x2c>)
    a8ca:	4c0a      	ldr	r4, [pc, #40]	; (a8f4 <CC_PalAbort+0x30>)
    a8cc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a8d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a8d4:	6849      	ldr	r1, [r1, #4]
    a8d6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a8da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a8de:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a8e2:	2300      	movs	r3, #0
    a8e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a8e8:	bc10      	pop	{r4}
    a8ea:	4708      	bx	r1
    a8ec:	5002b000 	.word	0x5002b000
    a8f0:	20000154 	.word	0x20000154
    a8f4:	5002a000 	.word	0x5002a000

0000a8f8 <nrf_cc3xx_platform_set_abort>:
    a8f8:	e9d0 1200 	ldrd	r1, r2, [r0]
    a8fc:	4b01      	ldr	r3, [pc, #4]	; (a904 <nrf_cc3xx_platform_set_abort+0xc>)
    a8fe:	e9c3 1200 	strd	r1, r2, [r3]
    a902:	4770      	bx	lr
    a904:	20000154 	.word	0x20000154

0000a908 <mutex_free>:
    a908:	b510      	push	{r4, lr}
    a90a:	4604      	mov	r4, r0
    a90c:	b130      	cbz	r0, a91c <mutex_free+0x14>
    a90e:	6863      	ldr	r3, [r4, #4]
    a910:	06db      	lsls	r3, r3, #27
    a912:	d502      	bpl.n	a91a <mutex_free+0x12>
    a914:	2300      	movs	r3, #0
    a916:	6023      	str	r3, [r4, #0]
    a918:	6063      	str	r3, [r4, #4]
    a91a:	bd10      	pop	{r4, pc}
    a91c:	4b02      	ldr	r3, [pc, #8]	; (a928 <mutex_free+0x20>)
    a91e:	4803      	ldr	r0, [pc, #12]	; (a92c <mutex_free+0x24>)
    a920:	685b      	ldr	r3, [r3, #4]
    a922:	4798      	blx	r3
    a924:	e7f3      	b.n	a90e <mutex_free+0x6>
    a926:	bf00      	nop
    a928:	20000154 	.word	0x20000154
    a92c:	0000c674 	.word	0x0000c674

0000a930 <mutex_lock>:
    a930:	b1b0      	cbz	r0, a960 <mutex_lock+0x30>
    a932:	6843      	ldr	r3, [r0, #4]
    a934:	b193      	cbz	r3, a95c <mutex_lock+0x2c>
    a936:	06db      	lsls	r3, r3, #27
    a938:	d50e      	bpl.n	a958 <mutex_lock+0x28>
    a93a:	2301      	movs	r3, #1
    a93c:	e850 2f00 	ldrex	r2, [r0]
    a940:	4619      	mov	r1, r3
    a942:	e840 1c00 	strex	ip, r1, [r0]
    a946:	f09c 0f00 	teq	ip, #0
    a94a:	d1f7      	bne.n	a93c <mutex_lock+0xc>
    a94c:	2a01      	cmp	r2, #1
    a94e:	d0f5      	beq.n	a93c <mutex_lock+0xc>
    a950:	f3bf 8f5f 	dmb	sy
    a954:	2000      	movs	r0, #0
    a956:	4770      	bx	lr
    a958:	4803      	ldr	r0, [pc, #12]	; (a968 <mutex_lock+0x38>)
    a95a:	4770      	bx	lr
    a95c:	4803      	ldr	r0, [pc, #12]	; (a96c <mutex_lock+0x3c>)
    a95e:	4770      	bx	lr
    a960:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a964:	4770      	bx	lr
    a966:	bf00      	nop
    a968:	ffff8fe9 	.word	0xffff8fe9
    a96c:	ffff8fea 	.word	0xffff8fea

0000a970 <mutex_unlock>:
    a970:	b168      	cbz	r0, a98e <mutex_unlock+0x1e>
    a972:	6843      	ldr	r3, [r0, #4]
    a974:	b13b      	cbz	r3, a986 <mutex_unlock+0x16>
    a976:	06db      	lsls	r3, r3, #27
    a978:	d507      	bpl.n	a98a <mutex_unlock+0x1a>
    a97a:	f3bf 8f5f 	dmb	sy
    a97e:	2300      	movs	r3, #0
    a980:	6003      	str	r3, [r0, #0]
    a982:	4618      	mov	r0, r3
    a984:	4770      	bx	lr
    a986:	4803      	ldr	r0, [pc, #12]	; (a994 <mutex_unlock+0x24>)
    a988:	4770      	bx	lr
    a98a:	4803      	ldr	r0, [pc, #12]	; (a998 <mutex_unlock+0x28>)
    a98c:	4770      	bx	lr
    a98e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a992:	4770      	bx	lr
    a994:	ffff8fea 	.word	0xffff8fea
    a998:	ffff8fe9 	.word	0xffff8fe9

0000a99c <mutex_init>:
    a99c:	b510      	push	{r4, lr}
    a99e:	4604      	mov	r4, r0
    a9a0:	b120      	cbz	r0, a9ac <mutex_init+0x10>
    a9a2:	2200      	movs	r2, #0
    a9a4:	2311      	movs	r3, #17
    a9a6:	6022      	str	r2, [r4, #0]
    a9a8:	6063      	str	r3, [r4, #4]
    a9aa:	bd10      	pop	{r4, pc}
    a9ac:	4801      	ldr	r0, [pc, #4]	; (a9b4 <mutex_init+0x18>)
    a9ae:	f7ff ff89 	bl	a8c4 <CC_PalAbort>
    a9b2:	e7f6      	b.n	a9a2 <mutex_init+0x6>
    a9b4:	0000c69c 	.word	0x0000c69c

0000a9b8 <nrf_cc3xx_platform_set_mutexes>:
    a9b8:	b570      	push	{r4, r5, r6, lr}
    a9ba:	e9d0 2300 	ldrd	r2, r3, [r0]
    a9be:	4c13      	ldr	r4, [pc, #76]	; (aa0c <nrf_cc3xx_platform_set_mutexes+0x54>)
    a9c0:	4d13      	ldr	r5, [pc, #76]	; (aa10 <nrf_cc3xx_platform_set_mutexes+0x58>)
    a9c2:	6063      	str	r3, [r4, #4]
    a9c4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a9c8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a9cc:	6022      	str	r2, [r4, #0]
    a9ce:	4b11      	ldr	r3, [pc, #68]	; (aa14 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a9d0:	6808      	ldr	r0, [r1, #0]
    a9d2:	6018      	str	r0, [r3, #0]
    a9d4:	6848      	ldr	r0, [r1, #4]
    a9d6:	6058      	str	r0, [r3, #4]
    a9d8:	6888      	ldr	r0, [r1, #8]
    a9da:	6098      	str	r0, [r3, #8]
    a9dc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a9e0:	60d8      	str	r0, [r3, #12]
    a9e2:	6119      	str	r1, [r3, #16]
    a9e4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a9e8:	06db      	lsls	r3, r3, #27
    a9ea:	d50d      	bpl.n	aa08 <nrf_cc3xx_platform_set_mutexes+0x50>
    a9ec:	2300      	movs	r3, #0
    a9ee:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a9f2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a9f6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a9fa:	4790      	blx	r2
    a9fc:	6823      	ldr	r3, [r4, #0]
    a9fe:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    aa02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    aa06:	4718      	bx	r3
    aa08:	bd70      	pop	{r4, r5, r6, pc}
    aa0a:	bf00      	nop
    aa0c:	20000164 	.word	0x20000164
    aa10:	20000f8c 	.word	0x20000f8c
    aa14:	20000174 	.word	0x20000174

0000aa18 <CC_LibInitNoRng>:
    aa18:	b538      	push	{r3, r4, r5, lr}
    aa1a:	f000 f82f 	bl	aa7c <CC_HalInit>
    aa1e:	b120      	cbz	r0, aa2a <CC_LibInitNoRng+0x12>
    aa20:	2403      	movs	r4, #3
    aa22:	f000 f863 	bl	aaec <CC_PalTerminate>
    aa26:	4620      	mov	r0, r4
    aa28:	bd38      	pop	{r3, r4, r5, pc}
    aa2a:	f000 f831 	bl	aa90 <CC_PalInit>
    aa2e:	b998      	cbnz	r0, aa58 <CC_LibInitNoRng+0x40>
    aa30:	f000 f8ac 	bl	ab8c <CC_PalPowerSaveModeSelect>
    aa34:	b998      	cbnz	r0, aa5e <CC_LibInitNoRng+0x46>
    aa36:	4d0f      	ldr	r5, [pc, #60]	; (aa74 <CC_LibInitNoRng+0x5c>)
    aa38:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    aa3c:	0e1b      	lsrs	r3, r3, #24
    aa3e:	2bf0      	cmp	r3, #240	; 0xf0
    aa40:	d108      	bne.n	aa54 <CC_LibInitNoRng+0x3c>
    aa42:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    aa46:	4b0c      	ldr	r3, [pc, #48]	; (aa78 <CC_LibInitNoRng+0x60>)
    aa48:	429a      	cmp	r2, r3
    aa4a:	d00a      	beq.n	aa62 <CC_LibInitNoRng+0x4a>
    aa4c:	2407      	movs	r4, #7
    aa4e:	f000 f817 	bl	aa80 <CC_HalTerminate>
    aa52:	e7e6      	b.n	aa22 <CC_LibInitNoRng+0xa>
    aa54:	2406      	movs	r4, #6
    aa56:	e7fa      	b.n	aa4e <CC_LibInitNoRng+0x36>
    aa58:	2404      	movs	r4, #4
    aa5a:	4620      	mov	r0, r4
    aa5c:	bd38      	pop	{r3, r4, r5, pc}
    aa5e:	2400      	movs	r4, #0
    aa60:	e7f5      	b.n	aa4e <CC_LibInitNoRng+0x36>
    aa62:	2001      	movs	r0, #1
    aa64:	f000 f892 	bl	ab8c <CC_PalPowerSaveModeSelect>
    aa68:	4604      	mov	r4, r0
    aa6a:	2800      	cmp	r0, #0
    aa6c:	d1f7      	bne.n	aa5e <CC_LibInitNoRng+0x46>
    aa6e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    aa72:	e7d8      	b.n	aa26 <CC_LibInitNoRng+0xe>
    aa74:	5002b000 	.word	0x5002b000
    aa78:	20e00000 	.word	0x20e00000

0000aa7c <CC_HalInit>:
    aa7c:	2000      	movs	r0, #0
    aa7e:	4770      	bx	lr

0000aa80 <CC_HalTerminate>:
    aa80:	2000      	movs	r0, #0
    aa82:	4770      	bx	lr

0000aa84 <CC_HalMaskInterrupt>:
    aa84:	4b01      	ldr	r3, [pc, #4]	; (aa8c <CC_HalMaskInterrupt+0x8>)
    aa86:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    aa8a:	4770      	bx	lr
    aa8c:	5002b000 	.word	0x5002b000

0000aa90 <CC_PalInit>:
    aa90:	b510      	push	{r4, lr}
    aa92:	4811      	ldr	r0, [pc, #68]	; (aad8 <CC_PalInit+0x48>)
    aa94:	f000 f848 	bl	ab28 <CC_PalMutexCreate>
    aa98:	b100      	cbz	r0, aa9c <CC_PalInit+0xc>
    aa9a:	bd10      	pop	{r4, pc}
    aa9c:	480f      	ldr	r0, [pc, #60]	; (aadc <CC_PalInit+0x4c>)
    aa9e:	f000 f843 	bl	ab28 <CC_PalMutexCreate>
    aaa2:	2800      	cmp	r0, #0
    aaa4:	d1f9      	bne.n	aa9a <CC_PalInit+0xa>
    aaa6:	4c0e      	ldr	r4, [pc, #56]	; (aae0 <CC_PalInit+0x50>)
    aaa8:	4620      	mov	r0, r4
    aaaa:	f000 f83d 	bl	ab28 <CC_PalMutexCreate>
    aaae:	2800      	cmp	r0, #0
    aab0:	d1f3      	bne.n	aa9a <CC_PalInit+0xa>
    aab2:	4b0c      	ldr	r3, [pc, #48]	; (aae4 <CC_PalInit+0x54>)
    aab4:	480c      	ldr	r0, [pc, #48]	; (aae8 <CC_PalInit+0x58>)
    aab6:	601c      	str	r4, [r3, #0]
    aab8:	f000 f836 	bl	ab28 <CC_PalMutexCreate>
    aabc:	4601      	mov	r1, r0
    aabe:	2800      	cmp	r0, #0
    aac0:	d1eb      	bne.n	aa9a <CC_PalInit+0xa>
    aac2:	f000 f82d 	bl	ab20 <CC_PalDmaInit>
    aac6:	4604      	mov	r4, r0
    aac8:	b108      	cbz	r0, aace <CC_PalInit+0x3e>
    aaca:	4620      	mov	r0, r4
    aacc:	bd10      	pop	{r4, pc}
    aace:	f000 f83f 	bl	ab50 <CC_PalPowerSaveModeInit>
    aad2:	4620      	mov	r0, r4
    aad4:	e7fa      	b.n	aacc <CC_PalInit+0x3c>
    aad6:	bf00      	nop
    aad8:	200001ac 	.word	0x200001ac
    aadc:	200001a0 	.word	0x200001a0
    aae0:	200001a8 	.word	0x200001a8
    aae4:	200001b0 	.word	0x200001b0
    aae8:	200001a4 	.word	0x200001a4

0000aaec <CC_PalTerminate>:
    aaec:	b508      	push	{r3, lr}
    aaee:	4808      	ldr	r0, [pc, #32]	; (ab10 <CC_PalTerminate+0x24>)
    aaf0:	f000 f824 	bl	ab3c <CC_PalMutexDestroy>
    aaf4:	4807      	ldr	r0, [pc, #28]	; (ab14 <CC_PalTerminate+0x28>)
    aaf6:	f000 f821 	bl	ab3c <CC_PalMutexDestroy>
    aafa:	4807      	ldr	r0, [pc, #28]	; (ab18 <CC_PalTerminate+0x2c>)
    aafc:	f000 f81e 	bl	ab3c <CC_PalMutexDestroy>
    ab00:	4806      	ldr	r0, [pc, #24]	; (ab1c <CC_PalTerminate+0x30>)
    ab02:	f000 f81b 	bl	ab3c <CC_PalMutexDestroy>
    ab06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ab0a:	f000 b80b 	b.w	ab24 <CC_PalDmaTerminate>
    ab0e:	bf00      	nop
    ab10:	200001ac 	.word	0x200001ac
    ab14:	200001a0 	.word	0x200001a0
    ab18:	200001a8 	.word	0x200001a8
    ab1c:	200001a4 	.word	0x200001a4

0000ab20 <CC_PalDmaInit>:
    ab20:	2000      	movs	r0, #0
    ab22:	4770      	bx	lr

0000ab24 <CC_PalDmaTerminate>:
    ab24:	4770      	bx	lr
    ab26:	bf00      	nop

0000ab28 <CC_PalMutexCreate>:
    ab28:	b508      	push	{r3, lr}
    ab2a:	4b03      	ldr	r3, [pc, #12]	; (ab38 <CC_PalMutexCreate+0x10>)
    ab2c:	6802      	ldr	r2, [r0, #0]
    ab2e:	681b      	ldr	r3, [r3, #0]
    ab30:	6810      	ldr	r0, [r2, #0]
    ab32:	4798      	blx	r3
    ab34:	2000      	movs	r0, #0
    ab36:	bd08      	pop	{r3, pc}
    ab38:	20000164 	.word	0x20000164

0000ab3c <CC_PalMutexDestroy>:
    ab3c:	b508      	push	{r3, lr}
    ab3e:	4b03      	ldr	r3, [pc, #12]	; (ab4c <CC_PalMutexDestroy+0x10>)
    ab40:	6802      	ldr	r2, [r0, #0]
    ab42:	685b      	ldr	r3, [r3, #4]
    ab44:	6810      	ldr	r0, [r2, #0]
    ab46:	4798      	blx	r3
    ab48:	2000      	movs	r0, #0
    ab4a:	bd08      	pop	{r3, pc}
    ab4c:	20000164 	.word	0x20000164

0000ab50 <CC_PalPowerSaveModeInit>:
    ab50:	b570      	push	{r4, r5, r6, lr}
    ab52:	4c09      	ldr	r4, [pc, #36]	; (ab78 <CC_PalPowerSaveModeInit+0x28>)
    ab54:	4d09      	ldr	r5, [pc, #36]	; (ab7c <CC_PalPowerSaveModeInit+0x2c>)
    ab56:	6920      	ldr	r0, [r4, #16]
    ab58:	68ab      	ldr	r3, [r5, #8]
    ab5a:	4798      	blx	r3
    ab5c:	b118      	cbz	r0, ab66 <CC_PalPowerSaveModeInit+0x16>
    ab5e:	4b08      	ldr	r3, [pc, #32]	; (ab80 <CC_PalPowerSaveModeInit+0x30>)
    ab60:	4808      	ldr	r0, [pc, #32]	; (ab84 <CC_PalPowerSaveModeInit+0x34>)
    ab62:	685b      	ldr	r3, [r3, #4]
    ab64:	4798      	blx	r3
    ab66:	4a08      	ldr	r2, [pc, #32]	; (ab88 <CC_PalPowerSaveModeInit+0x38>)
    ab68:	68eb      	ldr	r3, [r5, #12]
    ab6a:	6920      	ldr	r0, [r4, #16]
    ab6c:	2100      	movs	r1, #0
    ab6e:	6011      	str	r1, [r2, #0]
    ab70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ab74:	4718      	bx	r3
    ab76:	bf00      	nop
    ab78:	20000174 	.word	0x20000174
    ab7c:	20000164 	.word	0x20000164
    ab80:	20000154 	.word	0x20000154
    ab84:	0000c6c0 	.word	0x0000c6c0
    ab88:	20000f88 	.word	0x20000f88

0000ab8c <CC_PalPowerSaveModeSelect>:
    ab8c:	b570      	push	{r4, r5, r6, lr}
    ab8e:	4d1b      	ldr	r5, [pc, #108]	; (abfc <CC_PalPowerSaveModeSelect+0x70>)
    ab90:	4e1b      	ldr	r6, [pc, #108]	; (ac00 <CC_PalPowerSaveModeSelect+0x74>)
    ab92:	4604      	mov	r4, r0
    ab94:	68b2      	ldr	r2, [r6, #8]
    ab96:	6928      	ldr	r0, [r5, #16]
    ab98:	4790      	blx	r2
    ab9a:	b9f8      	cbnz	r0, abdc <CC_PalPowerSaveModeSelect+0x50>
    ab9c:	b15c      	cbz	r4, abb6 <CC_PalPowerSaveModeSelect+0x2a>
    ab9e:	4c19      	ldr	r4, [pc, #100]	; (ac04 <CC_PalPowerSaveModeSelect+0x78>)
    aba0:	6823      	ldr	r3, [r4, #0]
    aba2:	b1b3      	cbz	r3, abd2 <CC_PalPowerSaveModeSelect+0x46>
    aba4:	2b01      	cmp	r3, #1
    aba6:	d01b      	beq.n	abe0 <CC_PalPowerSaveModeSelect+0x54>
    aba8:	3b01      	subs	r3, #1
    abaa:	6023      	str	r3, [r4, #0]
    abac:	6928      	ldr	r0, [r5, #16]
    abae:	68f3      	ldr	r3, [r6, #12]
    abb0:	4798      	blx	r3
    abb2:	2000      	movs	r0, #0
    abb4:	bd70      	pop	{r4, r5, r6, pc}
    abb6:	4c13      	ldr	r4, [pc, #76]	; (ac04 <CC_PalPowerSaveModeSelect+0x78>)
    abb8:	6821      	ldr	r1, [r4, #0]
    abba:	b941      	cbnz	r1, abce <CC_PalPowerSaveModeSelect+0x42>
    abbc:	4b12      	ldr	r3, [pc, #72]	; (ac08 <CC_PalPowerSaveModeSelect+0x7c>)
    abbe:	2201      	movs	r2, #1
    abc0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    abc4:	4a11      	ldr	r2, [pc, #68]	; (ac0c <CC_PalPowerSaveModeSelect+0x80>)
    abc6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    abca:	2b00      	cmp	r3, #0
    abcc:	d1fb      	bne.n	abc6 <CC_PalPowerSaveModeSelect+0x3a>
    abce:	3101      	adds	r1, #1
    abd0:	6021      	str	r1, [r4, #0]
    abd2:	68f3      	ldr	r3, [r6, #12]
    abd4:	6928      	ldr	r0, [r5, #16]
    abd6:	4798      	blx	r3
    abd8:	2000      	movs	r0, #0
    abda:	bd70      	pop	{r4, r5, r6, pc}
    abdc:	480c      	ldr	r0, [pc, #48]	; (ac10 <CC_PalPowerSaveModeSelect+0x84>)
    abde:	bd70      	pop	{r4, r5, r6, pc}
    abe0:	4a0a      	ldr	r2, [pc, #40]	; (ac0c <CC_PalPowerSaveModeSelect+0x80>)
    abe2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    abe6:	2b00      	cmp	r3, #0
    abe8:	d1fb      	bne.n	abe2 <CC_PalPowerSaveModeSelect+0x56>
    abea:	4a07      	ldr	r2, [pc, #28]	; (ac08 <CC_PalPowerSaveModeSelect+0x7c>)
    abec:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    abf0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    abf4:	f7ff ff46 	bl	aa84 <CC_HalMaskInterrupt>
    abf8:	6823      	ldr	r3, [r4, #0]
    abfa:	e7d5      	b.n	aba8 <CC_PalPowerSaveModeSelect+0x1c>
    abfc:	20000174 	.word	0x20000174
    ac00:	20000164 	.word	0x20000164
    ac04:	20000f88 	.word	0x20000f88
    ac08:	5002a000 	.word	0x5002a000
    ac0c:	5002b000 	.word	0x5002b000
    ac10:	ffff8fe9 	.word	0xffff8fe9

0000ac14 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ac14:	4770      	bx	lr

0000ac16 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    ac16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac1a:	4607      	mov	r7, r0
    ac1c:	460e      	mov	r6, r1
    ac1e:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    ac20:	461d      	mov	r5, r3
    ac22:	b30b      	cbz	r3, ac68 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    ac24:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    ac26:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    ac28:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	4414      	add	r4, r2
    ac30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ac34:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    ac36:	f04f 0900 	mov.w	r9, #0
    ac3a:	45d1      	cmp	r9, sl
    ac3c:	d308      	bcc.n	ac50 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    ac3e:	686a      	ldr	r2, [r5, #4]
    ac40:	f105 0308 	add.w	r3, r5, #8
    ac44:	4641      	mov	r1, r8
    ac46:	4638      	mov	r0, r7
    ac48:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    ac4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    ac4e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    ac50:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ac54:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    ac58:	4620      	mov	r0, r4
    ac5a:	f7f6 f9e9 	bl	1030 <strlen>
    ac5e:	3001      	adds	r0, #1
    ac60:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    ac62:	f109 0901 	add.w	r9, r9, #1
    ac66:	e7e8      	b.n	ac3a <cbpprintf_external+0x24>
}
    ac68:	f06f 0015 	mvn.w	r0, #21
    ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ac70 <sys_notify_validate>:
	if (notify == NULL) {
    ac70:	4603      	mov	r3, r0
    ac72:	b158      	cbz	r0, ac8c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    ac74:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    ac76:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    ac7a:	2a01      	cmp	r2, #1
    ac7c:	d003      	beq.n	ac86 <sys_notify_validate+0x16>
    ac7e:	2a03      	cmp	r2, #3
    ac80:	d104      	bne.n	ac8c <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    ac82:	6802      	ldr	r2, [r0, #0]
    ac84:	b112      	cbz	r2, ac8c <sys_notify_validate+0x1c>
		notify->result = 0;
    ac86:	2000      	movs	r0, #0
    ac88:	6098      	str	r0, [r3, #8]
    ac8a:	4770      	bx	lr
    ac8c:	f06f 0015 	mvn.w	r0, #21
}
    ac90:	4770      	bx	lr

0000ac92 <arch_printk_char_out>:
}
    ac92:	2000      	movs	r0, #0
    ac94:	4770      	bx	lr

0000ac96 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    ac96:	f000 b95f 	b.w	af58 <z_log_vprintk>

0000ac9a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    ac9a:	b40f      	push	{r0, r1, r2, r3}
    ac9c:	b507      	push	{r0, r1, r2, lr}
    ac9e:	a904      	add	r1, sp, #16
    aca0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    aca4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    aca6:	f000 f957 	bl	af58 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    acaa:	b003      	add	sp, #12
    acac:	f85d eb04 	ldr.w	lr, [sp], #4
    acb0:	b004      	add	sp, #16
    acb2:	4770      	bx	lr

0000acb4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    acb4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    acb6:	f013 0307 	ands.w	r3, r3, #7
    acba:	d105      	bne.n	acc8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    acbc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    acbe:	2b00      	cmp	r3, #0
    acc0:	bf0c      	ite	eq
    acc2:	2000      	moveq	r0, #0
    acc4:	2003      	movne	r0, #3
    acc6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    acc8:	2b02      	cmp	r3, #2
    acca:	d105      	bne.n	acd8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    accc:	8bc0      	ldrh	r0, [r0, #30]
    acce:	fab0 f080 	clz	r0, r0
    acd2:	0940      	lsrs	r0, r0, #5
    acd4:	0080      	lsls	r0, r0, #2
    acd6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    acd8:	2b01      	cmp	r3, #1
    acda:	d105      	bne.n	ace8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    acdc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    acde:	2b00      	cmp	r3, #0
    ace0:	bf0c      	ite	eq
    ace2:	2000      	moveq	r0, #0
    ace4:	2005      	movne	r0, #5
    ace6:	4770      	bx	lr
	int evt = EVT_NOP;
    ace8:	2000      	movs	r0, #0
}
    acea:	4770      	bx	lr

0000acec <validate_args>:
{
    acec:	b510      	push	{r4, lr}
    acee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    acf0:	b100      	cbz	r0, acf4 <validate_args+0x8>
    acf2:	b911      	cbnz	r1, acfa <validate_args+0xe>
		return -EINVAL;
    acf4:	f06f 0015 	mvn.w	r0, #21
}
    acf8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    acfa:	1d08      	adds	r0, r1, #4
    acfc:	f7ff ffb8 	bl	ac70 <sys_notify_validate>
	if ((rv == 0)
    ad00:	2800      	cmp	r0, #0
    ad02:	d1f9      	bne.n	acf8 <validate_args+0xc>
	    && ((cli->notify.flags
    ad04:	68a3      	ldr	r3, [r4, #8]
    ad06:	2b03      	cmp	r3, #3
    ad08:	d9f6      	bls.n	acf8 <validate_args+0xc>
    ad0a:	e7f3      	b.n	acf4 <validate_args+0x8>

0000ad0c <notify_one>:
{
    ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad10:	460d      	mov	r5, r1
    ad12:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ad14:	4619      	mov	r1, r3
    ad16:	1d28      	adds	r0, r5, #4
{
    ad18:	4690      	mov	r8, r2
    ad1a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    ad1c:	f7f7 f926 	bl	1f6c <sys_notify_finalize>
	if (cb) {
    ad20:	4604      	mov	r4, r0
    ad22:	b138      	cbz	r0, ad34 <notify_one+0x28>
		cb(mgr, cli, state, res);
    ad24:	4633      	mov	r3, r6
    ad26:	4642      	mov	r2, r8
    ad28:	4629      	mov	r1, r5
    ad2a:	4638      	mov	r0, r7
    ad2c:	46a4      	mov	ip, r4
}
    ad2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    ad32:	4760      	bx	ip
}
    ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad38 <onoff_manager_init>:
{
    ad38:	b538      	push	{r3, r4, r5, lr}
    ad3a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    ad3c:	4605      	mov	r5, r0
    ad3e:	b158      	cbz	r0, ad58 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    ad40:	b151      	cbz	r1, ad58 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    ad42:	680b      	ldr	r3, [r1, #0]
    ad44:	b143      	cbz	r3, ad58 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    ad46:	684b      	ldr	r3, [r1, #4]
    ad48:	b133      	cbz	r3, ad58 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ad4a:	2220      	movs	r2, #32
    ad4c:	2100      	movs	r1, #0
    ad4e:	f000 ffa2 	bl	bc96 <memset>
    ad52:	612c      	str	r4, [r5, #16]
	return 0;
    ad54:	2000      	movs	r0, #0
}
    ad56:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ad58:	f06f 0015 	mvn.w	r0, #21
    ad5c:	e7fb      	b.n	ad56 <onoff_manager_init+0x1e>

0000ad5e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    ad5e:	4604      	mov	r4, r0
    ad60:	b508      	push	{r3, lr}
    ad62:	4608      	mov	r0, r1
    ad64:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    ad66:	461a      	mov	r2, r3
    ad68:	47a0      	blx	r4
	return z_impl_z_current_get();
    ad6a:	f7fe f96d 	bl	9048 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    ad6e:	f7f9 fcc7 	bl	4700 <z_impl_k_thread_abort>

0000ad72 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    ad72:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    ad76:	8840      	ldrh	r0, [r0, #2]
}
    ad78:	0840      	lsrs	r0, r0, #1
    ad7a:	4770      	bx	lr

0000ad7c <free_list_add>:
{
    ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad7e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    ad80:	f7ff fff7 	bl	ad72 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    ad84:	fab0 f080 	clz	r0, r0
    ad88:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    ad8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    ad90:	00ca      	lsls	r2, r1, #3
    ad92:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    ad96:	1d17      	adds	r7, r2, #4
{
    ad98:	460c      	mov	r4, r1
    ad9a:	3206      	adds	r2, #6
    ad9c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    ad9e:	b956      	cbnz	r6, adb6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    ada0:	2101      	movs	r1, #1
    ada2:	fa01 f000 	lsl.w	r0, r1, r0
    ada6:	68d9      	ldr	r1, [r3, #12]
    ada8:	4301      	orrs	r1, r0
    adaa:	60d9      	str	r1, [r3, #12]
		b->next = c;
    adac:	f8cc 4010 	str.w	r4, [ip, #16]
    adb0:	53dd      	strh	r5, [r3, r7]
    adb2:	529d      	strh	r5, [r3, r2]
}
    adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    adb6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    adb8:	3104      	adds	r1, #4
    adba:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    adbc:	53d8      	strh	r0, [r3, r7]
    adbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    adc2:	529e      	strh	r6, [r3, r2]
    adc4:	80c5      	strh	r5, [r0, #6]
    adc6:	525d      	strh	r5, [r3, r1]
    adc8:	e7f4      	b.n	adb4 <free_list_add+0x38>

0000adca <free_list_remove_bidx>:
{
    adca:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    adcc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    add0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    add2:	4299      	cmp	r1, r3
    add4:	f102 0104 	add.w	r1, r2, #4
    add8:	d10a      	bne.n	adf0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    adda:	2301      	movs	r3, #1
    addc:	fa03 f202 	lsl.w	r2, r3, r2
    ade0:	68c3      	ldr	r3, [r0, #12]
    ade2:	ea23 0302 	bic.w	r3, r3, r2
    ade6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    ade8:	2300      	movs	r3, #0
    adea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    adee:	bd10      	pop	{r4, pc}
    adf0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    adf2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    adf6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    adfa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    adfe:	80cb      	strh	r3, [r1, #6]
    ae00:	8082      	strh	r2, [r0, #4]
}
    ae02:	e7f4      	b.n	adee <free_list_remove_bidx+0x24>

0000ae04 <alloc_chunk>:
{
    ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    ae08:	fab1 f581 	clz	r5, r1
    ae0c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    ae10:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    ae14:	4603      	mov	r3, r0
	if (b->next) {
    ae16:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    ae1a:	460e      	mov	r6, r1
	if (b->next) {
    ae1c:	b1c2      	cbz	r2, ae50 <alloc_chunk+0x4c>
    ae1e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    ae20:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    ae24:	4618      	mov	r0, r3
    ae26:	4621      	mov	r1, r4
    ae28:	f7ff ffa3 	bl	ad72 <chunk_size>
    ae2c:	42b0      	cmp	r0, r6
    ae2e:	d306      	bcc.n	ae3e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    ae30:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    ae32:	4618      	mov	r0, r3
    ae34:	f7ff ffc9 	bl	adca <free_list_remove_bidx>
}
    ae38:	4620      	mov	r0, r4
    ae3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    ae3e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    ae42:	3f01      	subs	r7, #1
    ae44:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    ae46:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    ae4a:	d001      	beq.n	ae50 <alloc_chunk+0x4c>
    ae4c:	4282      	cmp	r2, r0
    ae4e:	d1e7      	bne.n	ae20 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    ae50:	f1c5 0220 	rsb	r2, r5, #32
    ae54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    ae58:	4094      	lsls	r4, r2
    ae5a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    ae5c:	4014      	ands	r4, r2
    ae5e:	d0eb      	beq.n	ae38 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    ae60:	fa94 f2a4 	rbit	r2, r4
    ae64:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    ae68:	1d11      	adds	r1, r2, #4
    ae6a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    ae6e:	4621      	mov	r1, r4
    ae70:	e7df      	b.n	ae32 <alloc_chunk+0x2e>

0000ae72 <split_chunks>:
{
    ae72:	b538      	push	{r3, r4, r5, lr}
    ae74:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    ae76:	f7ff ff7c 	bl	ad72 <chunk_size>
{
    ae7a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    ae7c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    ae7e:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    ae80:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    ae84:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ae86:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    ae88:	8060      	strh	r0, [r4, #2]
    ae8a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ae8e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    ae90:	8044      	strh	r4, [r0, #2]
    ae92:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    ae96:	4618      	mov	r0, r3
    ae98:	4611      	mov	r1, r2
    ae9a:	f7ff ff6a 	bl	ad72 <chunk_size>
	void *cmem = &buf[c];
    ae9e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    aea0:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    aea4:	bd38      	pop	{r3, r4, r5, pc}

0000aea6 <sys_heap_alloc>:
{
    aea6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    aea8:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    aeaa:	b909      	cbnz	r1, aeb0 <sys_heap_alloc+0xa>
		return NULL;
    aeac:	2000      	movs	r0, #0
}
    aeae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    aeb0:	68ab      	ldr	r3, [r5, #8]
    aeb2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    aeb6:	d9f9      	bls.n	aeac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    aeb8:	310b      	adds	r1, #11
    aeba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    aebc:	4621      	mov	r1, r4
    aebe:	4628      	mov	r0, r5
    aec0:	f7ff ffa0 	bl	ae04 <alloc_chunk>
	if (c == 0U) {
    aec4:	4606      	mov	r6, r0
    aec6:	2800      	cmp	r0, #0
    aec8:	d0f0      	beq.n	aeac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    aeca:	4601      	mov	r1, r0
    aecc:	4628      	mov	r0, r5
    aece:	f7ff ff50 	bl	ad72 <chunk_size>
    aed2:	42a0      	cmp	r0, r4
    aed4:	d907      	bls.n	aee6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    aed6:	1932      	adds	r2, r6, r4
    aed8:	4628      	mov	r0, r5
    aeda:	f7ff ffca 	bl	ae72 <split_chunks>
		free_list_add(h, c + chunk_sz);
    aede:	4611      	mov	r1, r2
    aee0:	4628      	mov	r0, r5
    aee2:	f7ff ff4b 	bl	ad7c <free_list_add>
	void *cmem = &buf[c];
    aee6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    aeea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    aeec:	8853      	ldrh	r3, [r2, #2]
    aeee:	f043 0301 	orr.w	r3, r3, #1
    aef2:	8053      	strh	r3, [r2, #2]
    aef4:	3004      	adds	r0, #4
	return mem;
    aef6:	e7da      	b.n	aeae <sys_heap_alloc+0x8>

0000aef8 <outs>:
{
    aef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aefc:	4607      	mov	r7, r0
    aefe:	4688      	mov	r8, r1
    af00:	4615      	mov	r5, r2
    af02:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    af04:	4614      	mov	r4, r2
    af06:	42b4      	cmp	r4, r6
    af08:	d305      	bcc.n	af16 <outs+0x1e>
    af0a:	b10e      	cbz	r6, af10 <outs+0x18>
	return (int)count;
    af0c:	1b60      	subs	r0, r4, r5
    af0e:	e008      	b.n	af22 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    af10:	7823      	ldrb	r3, [r4, #0]
    af12:	2b00      	cmp	r3, #0
    af14:	d0fa      	beq.n	af0c <outs+0x14>
		int rc = out((int)*sp++, ctx);
    af16:	f814 0b01 	ldrb.w	r0, [r4], #1
    af1a:	4641      	mov	r1, r8
    af1c:	47b8      	blx	r7
		if (rc < 0) {
    af1e:	2800      	cmp	r0, #0
    af20:	daf1      	bge.n	af06 <outs+0xe>
}
    af22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000af26 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    af26:	4040      	eors	r0, r0
    af28:	f380 8811 	msr	BASEPRI, r0
    af2c:	f04f 0004 	mov.w	r0, #4
    af30:	df02      	svc	2
}
    af32:	4770      	bx	lr

0000af34 <assert_print>:

void assert_print(const char *fmt, ...)
{
    af34:	b40f      	push	{r0, r1, r2, r3}
    af36:	b507      	push	{r0, r1, r2, lr}
    af38:	a904      	add	r1, sp, #16
    af3a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    af3e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    af40:	f7ff fea9 	bl	ac96 <vprintk>

	va_end(ap);
}
    af44:	b003      	add	sp, #12
    af46:	f85d eb04 	ldr.w	lr, [sp], #4
    af4a:	b004      	add	sp, #16
    af4c:	4770      	bx	lr

0000af4e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    af4e:	4770      	bx	lr

0000af50 <default_get_timestamp>:
    af50:	f000 bb5f 	b.w	b612 <sys_clock_cycle_get_32>

0000af54 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    af54:	2000      	movs	r0, #0
    af56:	4770      	bx	lr

0000af58 <z_log_vprintk>:
{
    af58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    af5a:	2300      	movs	r3, #0
    af5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    af60:	e9cd 3300 	strd	r3, r3, [sp]
    af64:	461a      	mov	r2, r3
    af66:	4619      	mov	r1, r3
    af68:	4618      	mov	r0, r3
    af6a:	f7f8 fb29 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    af6e:	b005      	add	sp, #20
    af70:	f85d fb04 	ldr.w	pc, [sp], #4

0000af74 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    af74:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    af76:	f7f8 f87f 	bl	3078 <log_init>
	}

	return 0;
}
    af7a:	2000      	movs	r0, #0
    af7c:	bd08      	pop	{r3, pc}

0000af7e <z_log_get_tag>:
}
    af7e:	2000      	movs	r0, #0
    af80:	4770      	bx	lr

0000af82 <out_func>:
{
    af82:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    af84:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    af88:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    af8c:	6852      	ldr	r2, [r2, #4]
    af8e:	2101      	movs	r1, #1
    af90:	f10d 0007 	add.w	r0, sp, #7
    af94:	4798      	blx	r3
}
    af96:	2000      	movs	r0, #0
    af98:	b003      	add	sp, #12
    af9a:	f85d fb04 	ldr.w	pc, [sp], #4

0000af9e <cr_out_func>:
{
    af9e:	b538      	push	{r3, r4, r5, lr}
    afa0:	4605      	mov	r5, r0
    afa2:	460c      	mov	r4, r1
	out_func(c, ctx);
    afa4:	f7ff ffed 	bl	af82 <out_func>
	if (c == '\n') {
    afa8:	2d0a      	cmp	r5, #10
    afaa:	d103      	bne.n	afb4 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    afac:	4621      	mov	r1, r4
    afae:	200d      	movs	r0, #13
    afb0:	f7ff ffe7 	bl	af82 <out_func>
}
    afb4:	2000      	movs	r0, #0
    afb6:	bd38      	pop	{r3, r4, r5, pc}

0000afb8 <buffer_write>:
{
    afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afba:	4606      	mov	r6, r0
    afbc:	460d      	mov	r5, r1
    afbe:	4614      	mov	r4, r2
    afc0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    afc2:	4621      	mov	r1, r4
    afc4:	4628      	mov	r0, r5
    afc6:	463a      	mov	r2, r7
    afc8:	47b0      	blx	r6
	} while (len != 0);
    afca:	1a24      	subs	r4, r4, r0
		buf += processed;
    afcc:	4405      	add	r5, r0
	} while (len != 0);
    afce:	d1f8      	bne.n	afc2 <buffer_write+0xa>
}
    afd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000afd2 <log_output_flush>:
		     output->control_block->offset,
    afd2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    afd4:	6881      	ldr	r1, [r0, #8]
{
    afd6:	b510      	push	{r4, lr}
    afd8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    afda:	e9d2 2300 	ldrd	r2, r3, [r2]
    afde:	6800      	ldr	r0, [r0, #0]
    afe0:	f7ff ffea 	bl	afb8 <buffer_write>
	output->control_block->offset = 0;
    afe4:	6863      	ldr	r3, [r4, #4]
    afe6:	2200      	movs	r2, #0
    afe8:	601a      	str	r2, [r3, #0]
}
    afea:	bd10      	pop	{r4, pc}

0000afec <z_log_msg2_finalize>:
{
    afec:	b570      	push	{r4, r5, r6, lr}
    afee:	460e      	mov	r6, r1
    aff0:	4615      	mov	r5, r2
    aff2:	4619      	mov	r1, r3
    aff4:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    aff8:	4604      	mov	r4, r0
    affa:	b918      	cbnz	r0, b004 <z_log_msg2_finalize+0x18>
}
    affc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    b000:	f7f8 b8a0 	b.w	3144 <z_log_dropped>
	if (data) {
    b004:	b12b      	cbz	r3, b012 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    b006:	3010      	adds	r0, #16
    b008:	f3c5 2349 	ubfx	r3, r5, #9, #10
    b00c:	4418      	add	r0, r3
    b00e:	f000 fe21 	bl	bc54 <memcpy>
	msg->hdr.source = source;
    b012:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    b016:	4620      	mov	r0, r4
}
    b018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    b01c:	f7f8 b8b0 	b.w	3180 <z_log_msg2_commit>

0000b020 <abort_function>:
{
    b020:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    b022:	2000      	movs	r0, #0
    b024:	f7f7 ffce 	bl	2fc4 <sys_reboot>

0000b028 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    b028:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    b02a:	ab0b      	add	r3, sp, #44	; 0x2c
    b02c:	9305      	str	r3, [sp, #20]
    b02e:	9303      	str	r3, [sp, #12]
    b030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b032:	9302      	str	r3, [sp, #8]
    b034:	2300      	movs	r3, #0
    b036:	e9cd 3300 	strd	r3, r3, [sp]
    b03a:	2201      	movs	r2, #1
    b03c:	4618      	mov	r0, r3
    b03e:	f7f8 fabf 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b042:	b007      	add	sp, #28
    b044:	f85d fb04 	ldr.w	pc, [sp], #4

0000b048 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    b048:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    b04a:	6800      	ldr	r0, [r0, #0]
    b04c:	f7f8 be44 	b.w	3cd8 <z_arm_fatal_error>

0000b050 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    b050:	2100      	movs	r1, #0
    b052:	2001      	movs	r0, #1
    b054:	f7f8 be40 	b.w	3cd8 <z_arm_fatal_error>

0000b058 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    b058:	b508      	push	{r3, lr}
	handler();
    b05a:	f7f8 fedd 	bl	3e18 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    b05e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    b062:	f7f8 bfb5 	b.w	3fd0 <z_arm_exc_exit>

0000b066 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    b066:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    b068:	ab0b      	add	r3, sp, #44	; 0x2c
    b06a:	9305      	str	r3, [sp, #20]
    b06c:	9303      	str	r3, [sp, #12]
    b06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b070:	9302      	str	r3, [sp, #8]
    b072:	2300      	movs	r3, #0
    b074:	e9cd 3300 	strd	r3, r3, [sp]
    b078:	2201      	movs	r2, #1
    b07a:	4618      	mov	r0, r3
    b07c:	f7f8 faa0 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b080:	b007      	add	sp, #28
    b082:	f85d fb04 	ldr.w	pc, [sp], #4

0000b086 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    b086:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    b088:	ab0b      	add	r3, sp, #44	; 0x2c
    b08a:	9305      	str	r3, [sp, #20]
    b08c:	9303      	str	r3, [sp, #12]
    b08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b090:	9302      	str	r3, [sp, #8]
    b092:	2300      	movs	r3, #0
    b094:	e9cd 3300 	strd	r3, r3, [sp]
    b098:	2201      	movs	r2, #1
    b09a:	4618      	mov	r0, r3
    b09c:	f7f8 fa90 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b0a0:	b007      	add	sp, #28
    b0a2:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0a6 <_stdout_hook_default>:
}
    b0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b0aa:	4770      	bx	lr

0000b0ac <_stdin_hook_default>:
}
    b0ac:	2000      	movs	r0, #0
    b0ae:	4770      	bx	lr

0000b0b0 <_read>:
{
    b0b0:	4608      	mov	r0, r1
    b0b2:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
    b0b4:	f7f9 bcae 	b.w	4a14 <z_impl_zephyr_read_stdin>

0000b0b8 <_write>:
{
    b0b8:	4608      	mov	r0, r1
    b0ba:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
    b0bc:	f7f9 bcbe 	b.w	4a3c <z_impl_zephyr_write_stdout>

0000b0c0 <_close>:
int _close(int file)
    b0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b0c4:	4770      	bx	lr

0000b0c6 <_lseek>:
}
    b0c6:	2000      	movs	r0, #0
    b0c8:	4770      	bx	lr

0000b0ca <_isatty>:
}
    b0ca:	2802      	cmp	r0, #2
    b0cc:	bfcc      	ite	gt
    b0ce:	2000      	movgt	r0, #0
    b0d0:	2001      	movle	r0, #1
    b0d2:	4770      	bx	lr

0000b0d4 <_fstat>:
	st->st_mode = S_IFCHR;
    b0d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b0d8:	604b      	str	r3, [r1, #4]
}
    b0da:	2000      	movs	r0, #0
    b0dc:	4770      	bx	lr

0000b0de <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    b0de:	2806      	cmp	r0, #6
    b0e0:	d108      	bne.n	b0f4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    b0e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b0e6:	2201      	movs	r2, #1
    b0e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    b0ec:	f3bf 8f4f 	dsb	sy
        __WFE();
    b0f0:	bf20      	wfe
    while (true)
    b0f2:	e7fd      	b.n	b0f0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    b0f4:	4770      	bx	lr

0000b0f6 <pm_state_exit_post_ops>:
	__asm__ volatile(
    b0f6:	2300      	movs	r3, #0
    b0f8:	f383 8811 	msr	BASEPRI, r3
    b0fc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    b100:	4770      	bx	lr

0000b102 <set_on_state>:
	__asm__ volatile(
    b102:	f04f 0320 	mov.w	r3, #32
    b106:	f3ef 8211 	mrs	r2, BASEPRI
    b10a:	f383 8812 	msr	BASEPRI_MAX, r3
    b10e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    b112:	6803      	ldr	r3, [r0, #0]
    b114:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b118:	f043 0302 	orr.w	r3, r3, #2
    b11c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    b11e:	f382 8811 	msr	BASEPRI, r2
    b122:	f3bf 8f6f 	isb	sy
}
    b126:	4770      	bx	lr

0000b128 <async_start>:
{
    b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b12a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    b12c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    b12e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    b130:	f04f 0520 	mov.w	r5, #32
    b134:	f3ef 8611 	mrs	r6, BASEPRI
    b138:	f385 8812 	msr	BASEPRI_MAX, r5
    b13c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b140:	250c      	movs	r5, #12
    b142:	4369      	muls	r1, r5
    b144:	440c      	add	r4, r1
    b146:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    b148:	f005 0c07 	and.w	ip, r5, #7
    b14c:	f1bc 0f01 	cmp.w	ip, #1
    b150:	d10b      	bne.n	b16a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    b152:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    b154:	f386 8811 	msr	BASEPRI, r6
    b158:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    b15c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    b160:	6843      	ldr	r3, [r0, #4]
    b162:	585b      	ldr	r3, [r3, r1]
    b164:	4798      	blx	r3
	return 0;
    b166:	2000      	movs	r0, #0
}
    b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    b16a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    b16e:	42af      	cmp	r7, r5
    b170:	f386 8811 	msr	BASEPRI, r6
    b174:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    b178:	bf0c      	ite	eq
    b17a:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    b17e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    b182:	e7f1      	b.n	b168 <async_start+0x40>

0000b184 <api_start>:
{
    b184:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    b186:	2480      	movs	r4, #128	; 0x80
    b188:	9400      	str	r4, [sp, #0]
    b18a:	f7ff ffcd 	bl	b128 <async_start>
}
    b18e:	b002      	add	sp, #8
    b190:	bd10      	pop	{r4, pc}

0000b192 <onoff_started_callback>:
	return &data->mgr[type];
    b192:	6900      	ldr	r0, [r0, #16]
    b194:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    b196:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    b19a:	2100      	movs	r1, #0
    b19c:	4710      	bx	r2

0000b19e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    b19e:	2000      	movs	r0, #0
    b1a0:	f7fb babe 	b.w	6720 <nrfx_clock_start>

0000b1a4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b1a4:	2000      	movs	r0, #0
    b1a6:	f7fb bb1f 	b.w	67e8 <nrfx_clock_stop>

0000b1aa <api_stop>:
	return stop(dev, subsys, CTX_API);
    b1aa:	2280      	movs	r2, #128	; 0x80
    b1ac:	f7f9 bd7e 	b.w	4cac <stop>

0000b1b0 <blocking_start_callback>:
{
    b1b0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    b1b2:	f7fc bdd7 	b.w	7d64 <z_impl_k_sem_give>

0000b1b6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1b6:	6843      	ldr	r3, [r0, #4]
    b1b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    b1ba:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    b1be:	600b      	str	r3, [r1, #0]
}
    b1c0:	2000      	movs	r0, #0
    b1c2:	4770      	bx	lr

0000b1c4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1c4:	6843      	ldr	r3, [r0, #4]
    b1c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    b1c8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    b1cc:	4042      	eors	r2, r0
    b1ce:	400a      	ands	r2, r1
    b1d0:	4042      	eors	r2, r0
    p_reg->OUT = value;
    b1d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    b1d6:	2000      	movs	r0, #0
    b1d8:	4770      	bx	lr

0000b1da <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1da:	6843      	ldr	r3, [r0, #4]
    b1dc:	685b      	ldr	r3, [r3, #4]
}
    b1de:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    b1e0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    b1e4:	4770      	bx	lr

0000b1e6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1e6:	6843      	ldr	r3, [r0, #4]
    b1e8:	685b      	ldr	r3, [r3, #4]
}
    b1ea:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    b1ec:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    b1f0:	4770      	bx	lr

0000b1f2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    b1f2:	6843      	ldr	r3, [r0, #4]
    b1f4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    b1f6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    b1fa:	404b      	eors	r3, r1
    p_reg->OUT = value;
    b1fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    b200:	2000      	movs	r0, #0
    b202:	4770      	bx	lr

0000b204 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    b204:	6902      	ldr	r2, [r0, #16]
{
    b206:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    b208:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    b20c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    b210:	2000      	movs	r0, #0
    b212:	4770      	bx	lr

0000b214 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    b214:	6843      	ldr	r3, [r0, #4]
    b216:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b218:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b21c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    b220:	4770      	bx	lr

0000b222 <tx_start>:
{
    b222:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b224:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    b226:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b228:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b22c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b230:	2200      	movs	r2, #0
    b232:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    b236:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    b23a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    b23e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b242:	6862      	ldr	r2, [r4, #4]
    b244:	06d2      	lsls	r2, r2, #27
    b246:	d50f      	bpl.n	b268 <tx_start+0x46>
	if (data->async) {
    b248:	6902      	ldr	r2, [r0, #16]
    b24a:	68d2      	ldr	r2, [r2, #12]
    b24c:	b12a      	cbz	r2, b25a <tx_start+0x38>
		data->async->low_power_mask |= mask;
    b24e:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    b252:	f041 0101 	orr.w	r1, r1, #1
    b256:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b25a:	2208      	movs	r2, #8
    b25c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    b260:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    b264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b268:	2201      	movs	r2, #1
    b26a:	609a      	str	r2, [r3, #8]
}
    b26c:	bd10      	pop	{r4, pc}

0000b26e <user_callback>:
	if (data->async->user_callback) {
    b26e:	6903      	ldr	r3, [r0, #16]
    b270:	68da      	ldr	r2, [r3, #12]
    b272:	6813      	ldr	r3, [r2, #0]
    b274:	b10b      	cbz	r3, b27a <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    b276:	6852      	ldr	r2, [r2, #4]
    b278:	4718      	bx	r3
}
    b27a:	4770      	bx	lr

0000b27c <notify_uart_rx_rdy>:
{
    b27c:	b570      	push	{r4, r5, r6, lr}
    b27e:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    b280:	6906      	ldr	r6, [r0, #16]
{
    b282:	4604      	mov	r4, r0
    b284:	460d      	mov	r5, r1
	struct uart_event evt = {
    b286:	2214      	movs	r2, #20
    b288:	2100      	movs	r1, #0
    b28a:	a801      	add	r0, sp, #4
    b28c:	f000 fd03 	bl	bc96 <memset>
    b290:	2302      	movs	r3, #2
    b292:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    b296:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    b298:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    b29c:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    b29e:	a901      	add	r1, sp, #4
    b2a0:	4620      	mov	r0, r4
	struct uart_event evt = {
    b2a2:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    b2a6:	f7ff ffe2 	bl	b26e <user_callback>
}
    b2aa:	b006      	add	sp, #24
    b2ac:	bd70      	pop	{r4, r5, r6, pc}

0000b2ae <rx_buf_release>:
{
    b2ae:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    b2b0:	680e      	ldr	r6, [r1, #0]
{
    b2b2:	b086      	sub	sp, #24
    b2b4:	4605      	mov	r5, r0
    b2b6:	460c      	mov	r4, r1
	if (*buf) {
    b2b8:	b17e      	cbz	r6, b2da <rx_buf_release+0x2c>
		struct uart_event evt = {
    b2ba:	2214      	movs	r2, #20
    b2bc:	2100      	movs	r1, #0
    b2be:	a801      	add	r0, sp, #4
    b2c0:	f000 fce9 	bl	bc96 <memset>
    b2c4:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    b2c6:	eb0d 0103 	add.w	r1, sp, r3
    b2ca:	4628      	mov	r0, r5
		struct uart_event evt = {
    b2cc:	f88d 3004 	strb.w	r3, [sp, #4]
    b2d0:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    b2d2:	f7ff ffcc 	bl	b26e <user_callback>
		*buf = NULL;
    b2d6:	2300      	movs	r3, #0
    b2d8:	6023      	str	r3, [r4, #0]
}
    b2da:	b006      	add	sp, #24
    b2dc:	bd70      	pop	{r4, r5, r6, pc}

0000b2de <notify_rx_disable>:
{
    b2de:	b510      	push	{r4, lr}
    b2e0:	b086      	sub	sp, #24
    b2e2:	4604      	mov	r4, r0
	struct uart_event evt = {
    b2e4:	2214      	movs	r2, #20
    b2e6:	2100      	movs	r1, #0
    b2e8:	a801      	add	r0, sp, #4
    b2ea:	f000 fcd4 	bl	bc96 <memset>
    b2ee:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    b2f0:	a901      	add	r1, sp, #4
    b2f2:	4620      	mov	r0, r4
	struct uart_event evt = {
    b2f4:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    b2f8:	f7ff ffb9 	bl	b26e <user_callback>
}
    b2fc:	b006      	add	sp, #24
    b2fe:	bd10      	pop	{r4, pc}

0000b300 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    b300:	6843      	ldr	r3, [r0, #4]
{
    b302:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    b304:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    b306:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    b308:	f04f 0020 	mov.w	r0, #32
    b30c:	f3ef 8511 	mrs	r5, BASEPRI
    b310:	f380 8812 	msr	BASEPRI_MAX, r0
    b314:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    b318:	68e4      	ldr	r4, [r4, #12]
    b31a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    b31c:	b190      	cbz	r0, b344 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    b31e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    b320:	b998      	cbnz	r0, b34a <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    b322:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b326:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b32a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    b32e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b332:	f042 0220 	orr.w	r2, r2, #32
    b336:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    b33a:	f385 8811 	msr	BASEPRI, r5
    b33e:	f3bf 8f6f 	isb	sy
}
    b342:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    b344:	f06f 000c 	mvn.w	r0, #12
    b348:	e7f7      	b.n	b33a <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    b34a:	f06f 000f 	mvn.w	r0, #15
    b34e:	e7f4      	b.n	b33a <uarte_nrfx_rx_buf_rsp+0x3a>

0000b350 <uarte_nrfx_callback_set>:
	if (!data->async) {
    b350:	6903      	ldr	r3, [r0, #16]
    b352:	68db      	ldr	r3, [r3, #12]
    b354:	b11b      	cbz	r3, b35e <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    b356:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    b35a:	2000      	movs	r0, #0
    b35c:	4770      	bx	lr
		return -ENOTSUP;
    b35e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b362:	4770      	bx	lr

0000b364 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    b364:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    b366:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    b368:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    b36a:	681b      	ldr	r3, [r3, #0]
{
    b36c:	b510      	push	{r4, lr}
	if (data->async) {
    b36e:	b958      	cbnz	r0, b388 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b370:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b374:	b15c      	cbz	r4, b38e <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    b376:	7d52      	ldrb	r2, [r2, #21]
    b378:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b37a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b37e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b382:	2201      	movs	r2, #1
    b384:	601a      	str	r2, [r3, #0]
}
    b386:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    b388:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b38c:	e7fb      	b.n	b386 <uarte_nrfx_poll_in+0x22>
		return -1;
    b38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b392:	e7f8      	b.n	b386 <uarte_nrfx_poll_in+0x22>

0000b394 <uarte_nrfx_rx_disable>:
{
    b394:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b396:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    b398:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    b39a:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    b39c:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    b39e:	6e03      	ldr	r3, [r0, #96]	; 0x60
    b3a0:	b1b3      	cbz	r3, b3d0 <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    b3a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b3a4:	b153      	cbz	r3, b3bc <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    b3a6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    b3aa:	f023 0320 	bic.w	r3, r3, #32
    b3ae:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3b2:	2300      	movs	r3, #0
    b3b4:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b3b8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    b3bc:	3088      	adds	r0, #136	; 0x88
    b3be:	f000 fb60 	bl	ba82 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    b3c2:	68eb      	ldr	r3, [r5, #12]
    b3c4:	2000      	movs	r0, #0
    b3c6:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3ca:	2301      	movs	r3, #1
    b3cc:	6063      	str	r3, [r4, #4]
}
    b3ce:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b3d0:	f06f 000d 	mvn.w	r0, #13
    b3d4:	e7fb      	b.n	b3ce <uarte_nrfx_rx_disable+0x3a>

0000b3d6 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    b3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    b3d8:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    b3da:	4614      	mov	r4, r2
    return p_reg->RXD.AMOUNT;
    b3dc:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    b3e0:	460b      	mov	r3, r1
    b3e2:	b1f1      	cbz	r1, b422 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
    b3e4:	2100      	movs	r1, #0
    b3e6:	4618      	mov	r0, r3
    b3e8:	f000 fc55 	bl	bc96 <memset>
    b3ec:	4603      	mov	r3, r0
    b3ee:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b3f0:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3f4:	2100      	movs	r1, #0
    p_reg->RXD.MAXCNT = length;
    b3f6:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3fa:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3fc:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    b400:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b404:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b406:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b40a:	2800      	cmp	r0, #0
    b40c:	d0fb      	beq.n	b406 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b40e:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    b412:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    b416:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    b41a:	b92b      	cbnz	r3, b428 <rx_flush.isra.0+0x52>
			return rx_amount;
    b41c:	b2c0      	uxtb	r0, r0
}
    b41e:	b002      	add	sp, #8
    b420:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
    b422:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    b424:	4669      	mov	r1, sp
    b426:	e7e3      	b.n	b3f0 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
    b428:	4285      	cmp	r5, r0
    b42a:	d1f7      	bne.n	b41c <rx_flush.isra.0+0x46>
    b42c:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    b42e:	4293      	cmp	r3, r2
    b430:	d101      	bne.n	b436 <rx_flush.isra.0+0x60>
	return 0;
    b432:	2000      	movs	r0, #0
    b434:	e7f3      	b.n	b41e <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
    b436:	f813 1b01 	ldrb.w	r1, [r3], #1
    b43a:	2900      	cmp	r1, #0
    b43c:	d0f7      	beq.n	b42e <rx_flush.isra.0+0x58>
    b43e:	e7ed      	b.n	b41c <rx_flush.isra.0+0x46>

0000b440 <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    b440:	68c2      	ldr	r2, [r0, #12]
    b442:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    b444:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    b446:	b508      	push	{r3, lr}
    b448:	4603      	mov	r3, r0
	if (!remaining) {
    b44a:	d00b      	beq.n	b464 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    b44c:	2a08      	cmp	r2, #8
    b44e:	bf28      	it	cs
    b450:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    b452:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    b454:	3018      	adds	r0, #24
    b456:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    b458:	689b      	ldr	r3, [r3, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b45a:	4419      	add	r1, r3
    b45c:	f000 fbfa 	bl	bc54 <memcpy>
	return true;
    b460:	2001      	movs	r0, #1
}
    b462:	bd08      	pop	{r3, pc}
		return false;
    b464:	4610      	mov	r0, r2
    b466:	e7fc      	b.n	b462 <setup_tx_cache.isra.0+0x22>

0000b468 <async_uart_release>:
{
    b468:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    b46a:	6903      	ldr	r3, [r0, #16]
{
    b46c:	4604      	mov	r4, r0
	__asm__ volatile(
    b46e:	f04f 0220 	mov.w	r2, #32
    b472:	f3ef 8611 	mrs	r6, BASEPRI
    b476:	f382 8812 	msr	BASEPRI_MAX, r2
    b47a:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    b47e:	68dd      	ldr	r5, [r3, #12]
    b480:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    b484:	ea23 0301 	bic.w	r3, r3, r1
    b488:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    b48c:	b973      	cbnz	r3, b4ac <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    b48e:	2902      	cmp	r1, #2
    b490:	d107      	bne.n	b4a2 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    b492:	6840      	ldr	r0, [r0, #4]
    b494:	2205      	movs	r2, #5
    b496:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    b49a:	f7ff ff9c 	bl	b3d6 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    b49e:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    b4a2:	6863      	ldr	r3, [r4, #4]
    b4a4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b4a6:	2200      	movs	r2, #0
    b4a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    b4ac:	f386 8811 	msr	BASEPRI, r6
    b4b0:	f3bf 8f6f 	isb	sy
}
    b4b4:	bd70      	pop	{r4, r5, r6, pc}

0000b4b6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    b4b6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    b4b8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b4ba:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b4be:	b940      	cbnz	r0, b4d2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    b4c0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    b4c2:	079b      	lsls	r3, r3, #30
    b4c4:	d406      	bmi.n	b4d4 <is_tx_ready.isra.0+0x1e>
    b4c6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    b4ca:	3800      	subs	r0, #0
    b4cc:	bf18      	it	ne
    b4ce:	2001      	movne	r0, #1
    b4d0:	4770      	bx	lr
    b4d2:	2001      	movs	r0, #1
}
    b4d4:	4770      	bx	lr

0000b4d6 <start_tx_locked>:
{
    b4d6:	b510      	push	{r4, lr}
    b4d8:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    b4da:	6840      	ldr	r0, [r0, #4]
    b4dc:	f7ff ffeb 	bl	b4b6 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    b4e0:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    b4e2:	b918      	cbnz	r0, b4ec <start_tx_locked+0x16>
		data->async->pending_tx = true;
    b4e4:	2201      	movs	r2, #1
    b4e6:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    b4ea:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    b4ec:	2200      	movs	r2, #0
    b4ee:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    b4f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b4f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    b4fa:	4620      	mov	r0, r4
    b4fc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    b500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    b504:	f7ff be8d 	b.w	b222 <tx_start>

0000b508 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b508:	b510      	push	{r4, lr}
    b50a:	2200      	movs	r2, #0
    b50c:	4604      	mov	r4, r0
    b50e:	2101      	movs	r1, #1
    b510:	2028      	movs	r0, #40	; 0x28
    b512:	f7f8 fc4d 	bl	3db0 <z_arm_irq_priority_set>
    b516:	2028      	movs	r0, #40	; 0x28
    b518:	f7f8 fc2e 	bl	3d78 <arch_irq_enable>
    b51c:	4620      	mov	r0, r4
    b51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b522:	f7fa b8d3 	b.w	56cc <uarte_instance_init.constprop.0>

0000b526 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    b526:	b510      	push	{r4, lr}
    b528:	2200      	movs	r2, #0
    b52a:	4604      	mov	r4, r0
    b52c:	2101      	movs	r1, #1
    b52e:	2002      	movs	r0, #2
    b530:	f7f8 fc3e 	bl	3db0 <z_arm_irq_priority_set>
    b534:	2002      	movs	r0, #2
    b536:	f7f8 fc1f 	bl	3d78 <arch_irq_enable>
    b53a:	4620      	mov	r0, r4
    b53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b540:	f7fa b8c4 	b.w	56cc <uarte_instance_init.constprop.0>

0000b544 <rx_timeout>:
{
    b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    b546:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    b548:	68fb      	ldr	r3, [r7, #12]
    b54a:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    b54e:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    b552:	bb1a      	cbnz	r2, b59c <rx_timeout+0x58>
	const struct device *dev = data->dev;
    b554:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
    b556:	686a      	ldr	r2, [r5, #4]
    b558:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    b55a:	2110      	movs	r1, #16
    b55c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    b560:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    b564:	6f59      	ldr	r1, [r3, #116]	; 0x74
    b566:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    b568:	bf1e      	ittt	ne
    b56a:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    b56c:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    b56e:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    b572:	e9d3 2c1d 	ldrd	r2, ip, [r3, #116]	; 0x74
    b576:	eba2 020c 	sub.w	r2, r2, ip
	if (!HW_RX_COUNTING_ENABLED(data) &&
    b57a:	2a00      	cmp	r2, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b57c:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
	int32_t len = data->async->rx_total_byte_cnt
    b580:	4614      	mov	r4, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    b582:	da0c      	bge.n	b59e <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b584:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    b586:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b58a:	d902      	bls.n	b592 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    b58c:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
    b58e:	2c00      	cmp	r4, #0
    b590:	dc20      	bgt.n	b5d4 <rx_timeout+0x90>
	return config->uarte_regs;
    b592:	686b      	ldr	r3, [r5, #4]
    b594:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b596:	2210      	movs	r2, #16
    b598:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b59e:	eb02 0c00 	add.w	ip, r2, r0
    b5a2:	458c      	cmp	ip, r1
    b5a4:	d8f2      	bhi.n	b58c <rx_timeout+0x48>
	if (len > 0) {
    b5a6:	2a00      	cmp	r2, #0
    b5a8:	d0f3      	beq.n	b592 <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
    b5aa:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    b5ae:	428a      	cmp	r2, r1
    b5b0:	da12      	bge.n	b5d8 <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
    b5b2:	4628      	mov	r0, r5
    b5b4:	4621      	mov	r1, r4
    b5b6:	f7ff fe61 	bl	b27c <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    b5ba:	68f8      	ldr	r0, [r7, #12]
    b5bc:	6e83      	ldr	r3, [r0, #104]	; 0x68
    b5be:	4423      	add	r3, r4
    b5c0:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    b5c2:	6f83      	ldr	r3, [r0, #120]	; 0x78
    b5c4:	4423      	add	r3, r4
    b5c6:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    b5c8:	2e00      	cmp	r6, #0
    b5ca:	d0e2      	beq.n	b592 <rx_timeout+0x4e>
    b5cc:	3088      	adds	r0, #136	; 0x88
    b5ce:	f000 fa58 	bl	ba82 <z_impl_k_timer_stop>
}
    b5d2:	e7de      	b.n	b592 <rx_timeout+0x4e>
		clipped = true;
    b5d4:	2601      	movs	r6, #1
    b5d6:	e7ec      	b.n	b5b2 <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
    b5d8:	1a52      	subs	r2, r2, r1
    b5da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (clipped) {
    b5de:	e7d8      	b.n	b592 <rx_timeout+0x4e>

0000b5e0 <uarte_nrfx_tx_abort>:
{
    b5e0:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    b5e2:	6843      	ldr	r3, [r0, #4]
    b5e4:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    b5e6:	6903      	ldr	r3, [r0, #16]
    b5e8:	68d8      	ldr	r0, [r3, #12]
    b5ea:	6883      	ldr	r3, [r0, #8]
    b5ec:	b14b      	cbz	r3, b602 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    b5ee:	2400      	movs	r4, #0
    b5f0:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    b5f4:	3028      	adds	r0, #40	; 0x28
    b5f6:	f000 fa44 	bl	ba82 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5fa:	2301      	movs	r3, #1
    b5fc:	60eb      	str	r3, [r5, #12]
	return 0;
    b5fe:	4620      	mov	r0, r4
}
    b600:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b602:	f06f 000d 	mvn.w	r0, #13
    b606:	e7fb      	b.n	b600 <uarte_nrfx_tx_abort+0x20>

0000b608 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    b608:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b60a:	6818      	ldr	r0, [r3, #0]
    b60c:	f7ff bfe8 	b.w	b5e0 <uarte_nrfx_tx_abort>

0000b610 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b610:	4770      	bx	lr

0000b612 <sys_clock_cycle_get_32>:
{
    b612:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b614:	f7fa fc5c 	bl	5ed0 <z_nrf_rtc_timer_read>
}
    b618:	bd08      	pop	{r3, pc}

0000b61a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b61a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    b61c:	6843      	ldr	r3, [r0, #4]
    b61e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b620:	7a03      	ldrb	r3, [r0, #8]
    b622:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    b626:	3b01      	subs	r3, #1
    b628:	00db      	lsls	r3, r3, #3
    b62a:	6845      	ldr	r5, [r0, #4]
    b62c:	6814      	ldr	r4, [r2, #0]
    b62e:	441d      	add	r5, r3
    b630:	42ac      	cmp	r4, r5
    b632:	d902      	bls.n	b63a <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    b634:	f06f 0001 	mvn.w	r0, #1
}
    b638:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    b63a:	7965      	ldrb	r5, [r4, #5]
    b63c:	428d      	cmp	r5, r1
    b63e:	d002      	beq.n	b646 <pinctrl_lookup_state+0x2c>
		(*state)++;
    b640:	3408      	adds	r4, #8
    b642:	6014      	str	r4, [r2, #0]
    b644:	e7f1      	b.n	b62a <pinctrl_lookup_state+0x10>
			return 0;
    b646:	2000      	movs	r0, #0
    b648:	e7f6      	b.n	b638 <pinctrl_lookup_state+0x1e>

0000b64a <nrf_gpio_pin_clear>:
{
    b64a:	b507      	push	{r0, r1, r2, lr}
    b64c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b64e:	a801      	add	r0, sp, #4
    b650:	f7fa fdf2 	bl	6238 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b654:	9a01      	ldr	r2, [sp, #4]
    b656:	2301      	movs	r3, #1
    b658:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    b65a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    b65e:	b003      	add	sp, #12
    b660:	f85d fb04 	ldr.w	pc, [sp], #4

0000b664 <nrf_gpio_pin_set>:
{
    b664:	b507      	push	{r0, r1, r2, lr}
    b666:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b668:	a801      	add	r0, sp, #4
    b66a:	f7fa fde5 	bl	6238 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b66e:	9a01      	ldr	r2, [sp, #4]
    b670:	2301      	movs	r3, #1
    b672:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    b674:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    b678:	b003      	add	sp, #12
    b67a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b67e <nrf_gpio_pin_write>:
    if (value == 0)
    b67e:	b909      	cbnz	r1, b684 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    b680:	f7ff bfe3 	b.w	b64a <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    b684:	f7ff bfee 	b.w	b664 <nrf_gpio_pin_set>

0000b688 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    b688:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    b68a:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b68e:	2b00      	cmp	r3, #0
{
    b690:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    b692:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b696:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b698:	bf0b      	itete	eq
    b69a:	4615      	moveq	r5, r2
    b69c:	2501      	movne	r5, #1
    b69e:	460e      	moveq	r6, r1
    b6a0:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    b6a2:	9301      	str	r3, [sp, #4]
    b6a4:	f7fa fdc8 	bl	6238 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b6a8:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b6ac:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b6b0:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    b6b4:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b6b6:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    b6b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b6bc:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    b6c0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    b6c4:	b002      	add	sp, #8
    b6c6:	bd70      	pop	{r4, r5, r6, pc}

0000b6c8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    b6c8:	b570      	push	{r4, r5, r6, lr}
    b6ca:	4615      	mov	r5, r2
    b6cc:	4604      	mov	r4, r0
    b6ce:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b6d2:	42a6      	cmp	r6, r4
    b6d4:	d101      	bne.n	b6da <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    b6d6:	2000      	movs	r0, #0
}
    b6d8:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    b6da:	6823      	ldr	r3, [r4, #0]
    b6dc:	0c1a      	lsrs	r2, r3, #16
    b6de:	2a22      	cmp	r2, #34	; 0x22
    b6e0:	f200 808e 	bhi.w	b800 <pinctrl_configure_pins+0x138>
    b6e4:	e8df f002 	tbb	[pc, r2]
    b6e8:	43241d12 	.word	0x43241d12
    b6ec:	8c433929 	.word	0x8c433929
    b6f0:	488c8c8c 	.word	0x488c8c8c
    b6f4:	8c8c8c4d 	.word	0x8c8c8c4d
    b6f8:	8c8c8c8c 	.word	0x8c8c8c8c
    b6fc:	5e528c8c 	.word	0x5e528c8c
    b700:	8c8c6863 	.word	0x8c8c6863
    b704:	78736d8c 	.word	0x78736d8c
    b708:	827d      	.short	0x827d
    b70a:	87          	.byte	0x87
    b70b:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    b70c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b710:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    b714:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    b716:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b71a:	f7ff ffa3 	bl	b664 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b71e:	2201      	movs	r2, #1
    b720:	e015      	b.n	b74e <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    b722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b726:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b72a:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b72c:	2100      	movs	r1, #0
    b72e:	e00f      	b.n	b750 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    b730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b734:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    b738:	e7ec      	b.n	b714 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    b73a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b73e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    b742:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    b744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b748:	f7ff ff7f 	bl	b64a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b74c:	2200      	movs	r2, #0
    b74e:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b750:	6820      	ldr	r0, [r4, #0]
    b752:	f7ff ff99 	bl	b688 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b756:	3404      	adds	r4, #4
    b758:	e7bb      	b.n	b6d2 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    b75a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b75e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    b762:	6820      	ldr	r0, [r4, #0]
    b764:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b768:	f7ff ff6f 	bl	b64a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b76c:	e7d7      	b.n	b71e <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    b76e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b772:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b776:	e7d8      	b.n	b72a <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    b778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b77c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b780:	e7d3      	b.n	b72a <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    b782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b786:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    b78a:	e7ce      	b.n	b72a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    b78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b790:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b794:	6820      	ldr	r0, [r4, #0]
    b796:	f3c0 3140 	ubfx	r1, r0, #13, #1
    b79a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b79e:	f7ff ff6e 	bl	b67e <nrf_gpio_pin_write>
    b7a2:	e7bc      	b.n	b71e <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    b7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7a8:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b7ac:	e7f2      	b.n	b794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    b7ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7b2:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b7b6:	e7ed      	b.n	b794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    b7b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7bc:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    b7c0:	e7e8      	b.n	b794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    b7c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7c6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b7ca:	2201      	movs	r2, #1
    b7cc:	e7ae      	b.n	b72c <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    b7ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7d2:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b7d6:	e7f8      	b.n	b7ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    b7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7dc:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b7e0:	e7f3      	b.n	b7ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    b7e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7e6:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b7ea:	e7ee      	b.n	b7ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    b7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7f0:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b7f4:	e7e9      	b.n	b7ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    b7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b7fa:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    b7fe:	e7e4      	b.n	b7ca <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    b800:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b804:	e768      	b.n	b6d8 <pinctrl_configure_pins+0x10>

0000b806 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b806:	f7ff b82f 	b.w	a868 <nrf_cc3xx_platform_init_no_rng>

0000b80a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b80a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b80c:	f7f8 f97c 	bl	3b08 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b810:	f7f8 fa2e 	bl	3c70 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b818:	f7ff b826 	b.w	a868 <nrf_cc3xx_platform_init_no_rng>

0000b81c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b81c:	4700      	bx	r0

0000b81e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b81e:	f000 b8fe 	b.w	ba1e <z_impl_k_busy_wait>

0000b822 <nrf_gpio_pin_present_check>:
    switch (port)
    b822:	0943      	lsrs	r3, r0, #5
    b824:	d00b      	beq.n	b83e <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    b826:	2b01      	cmp	r3, #1
    b828:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b82c:	bf18      	it	ne
    b82e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    b830:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    b834:	fa23 f000 	lsr.w	r0, r3, r0
}
    b838:	f000 0001 	and.w	r0, r0, #1
    b83c:	4770      	bx	lr
    switch (port)
    b83e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b842:	e7f5      	b.n	b830 <nrf_gpio_pin_present_check+0xe>

0000b844 <pin_is_task_output>:
{
    b844:	b508      	push	{r3, lr}
    b846:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b848:	f7fb f836 	bl	68b8 <pin_is_output>
    b84c:	b110      	cbz	r0, b854 <pin_is_task_output+0x10>
    b84e:	4610      	mov	r0, r2
    b850:	f7fb f81c 	bl	688c <pin_in_use_by_te>
}
    b854:	f000 0001 	and.w	r0, r0, #1
    b858:	bd08      	pop	{r3, pc}

0000b85a <nrf_gpio_reconfigure>:
{
    b85a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b85e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b860:	a801      	add	r0, sp, #4
{
    b862:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    b866:	460c      	mov	r4, r1
    b868:	4617      	mov	r7, r2
    b86a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b86c:	f7fb f84c 	bl	6908 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b870:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b872:	1e39      	subs	r1, r7, #0
    b874:	bf18      	it	ne
    b876:	2101      	movne	r1, #1
    b878:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b87c:	1e23      	subs	r3, r4, #0
    b87e:	bf18      	it	ne
    b880:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b882:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b884:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b888:	bf14      	ite	ne
    b88a:	210c      	movne	r1, #12
    b88c:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b88e:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b890:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b894:	bf14      	ite	ne
    b896:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    b89a:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b89c:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b8a0:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b8a4:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b8a8:	bf14      	ite	ne
    b8aa:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    b8ae:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b8b0:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    b8b2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b8b6:	b104      	cbz	r4, b8ba <nrf_gpio_reconfigure+0x60>
    b8b8:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b8ba:	b10f      	cbz	r7, b8c0 <nrf_gpio_reconfigure+0x66>
    b8bc:	783f      	ldrb	r7, [r7, #0]
    b8be:	007f      	lsls	r7, r7, #1
    b8c0:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b8c2:	b10e      	cbz	r6, b8c8 <nrf_gpio_reconfigure+0x6e>
    b8c4:	7836      	ldrb	r6, [r6, #0]
    b8c6:	00b6      	lsls	r6, r6, #2
    b8c8:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b8ca:	b18d      	cbz	r5, b8f0 <nrf_gpio_reconfigure+0x96>
    b8cc:	7829      	ldrb	r1, [r5, #0]
    b8ce:	0209      	lsls	r1, r1, #8
    b8d0:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    b8d2:	f1b8 0f00 	cmp.w	r8, #0
    b8d6:	d003      	beq.n	b8e0 <nrf_gpio_reconfigure+0x86>
    b8d8:	f898 8000 	ldrb.w	r8, [r8]
    b8dc:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b8e0:	4321      	orrs	r1, r4
    b8e2:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    b8e6:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    b8ea:	b002      	add	sp, #8
    b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b8f0:	4629      	mov	r1, r5
    b8f2:	e7ed      	b.n	b8d0 <nrf_gpio_reconfigure+0x76>

0000b8f4 <nrf_gpio_cfg_sense_set>:
{
    b8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b8f6:	f10d 030f 	add.w	r3, sp, #15
    b8fa:	9301      	str	r3, [sp, #4]
    b8fc:	2300      	movs	r3, #0
{
    b8fe:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b902:	9300      	str	r3, [sp, #0]
    b904:	461a      	mov	r2, r3
    b906:	4619      	mov	r1, r3
    b908:	f7ff ffa7 	bl	b85a <nrf_gpio_reconfigure>
}
    b90c:	b005      	add	sp, #20
    b90e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b912 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b912:	f7fb bbb9 	b.w	7088 <_DoInit>

0000b916 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b916:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b918:	f7ff fffb 	bl	b912 <SEGGER_RTT_Init>

	return 0;
}
    b91c:	2000      	movs	r0, #0
    b91e:	bd08      	pop	{r3, pc}

0000b920 <z_device_state_init>:
}
    b920:	4770      	bx	lr

0000b922 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b922:	b138      	cbz	r0, b934 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b924:	68c3      	ldr	r3, [r0, #12]
    b926:	8818      	ldrh	r0, [r3, #0]
    b928:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b92c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b930:	4258      	negs	r0, r3
    b932:	4158      	adcs	r0, r3
}
    b934:	4770      	bx	lr

0000b936 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    b936:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    b938:	ab0b      	add	r3, sp, #44	; 0x2c
    b93a:	9305      	str	r3, [sp, #20]
    b93c:	9303      	str	r3, [sp, #12]
    b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b940:	9302      	str	r3, [sp, #8]
    b942:	2300      	movs	r3, #0
    b944:	e9cd 3300 	strd	r3, r3, [sp]
    b948:	2201      	movs	r2, #1
    b94a:	4618      	mov	r0, r3
    b94c:	f7f7 fe38 	bl	35c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b950:	b007      	add	sp, #28
    b952:	f85d fb04 	ldr.w	pc, [sp], #4

0000b956 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    b956:	f000 b99e 	b.w	bc96 <memset>

0000b95a <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b95a:	f000 b97b 	b.w	bc54 <memcpy>

0000b95e <k_mem_slab_init>:
{
    b95e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    b960:	2400      	movs	r4, #0
    b962:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    b964:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b966:	ea41 0402 	orr.w	r4, r1, r2
    b96a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    b96e:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    b972:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b974:	d10c      	bne.n	b990 <k_mem_slab_init+0x32>
    b976:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    b978:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    b97a:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    b97c:	d103      	bne.n	b986 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    b97e:	e9c0 0000 	strd	r0, r0, [r0]
}
    b982:	2000      	movs	r0, #0
}
    b984:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    b986:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b988:	3401      	adds	r4, #1
    b98a:	460d      	mov	r5, r1
		p += slab->block_size;
    b98c:	4411      	add	r1, r2
    b98e:	e7f3      	b.n	b978 <k_mem_slab_init+0x1a>
		return -EINVAL;
    b990:	f06f 0015 	mvn.w	r0, #21
	return rc;
    b994:	e7f6      	b.n	b984 <k_mem_slab_init+0x26>

0000b996 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b996:	f3ef 8005 	mrs	r0, IPSR
}
    b99a:	3800      	subs	r0, #0
    b99c:	bf18      	it	ne
    b99e:	2001      	movne	r0, #1
    b9a0:	4770      	bx	lr

0000b9a2 <k_thread_name_get>:
}
    b9a2:	2000      	movs	r0, #0
    b9a4:	4770      	bx	lr

0000b9a6 <z_pm_save_idle_exit>:
{
    b9a6:	b508      	push	{r3, lr}
	pm_system_resume();
    b9a8:	f7f7 ff9e 	bl	38e8 <pm_system_resume>
}
    b9ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b9b0:	f7ff be2e 	b.w	b610 <sys_clock_idle_exit>

0000b9b4 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b9b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b9b8:	428b      	cmp	r3, r1
    b9ba:	d001      	beq.n	b9c0 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b9bc:	f7fc bf84 	b.w	88c8 <z_set_prio>
}
    b9c0:	2000      	movs	r0, #0
    b9c2:	4770      	bx	lr

0000b9c4 <z_impl_k_mutex_init>:
{
    b9c4:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b9c6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b9c8:	e9c3 0002 	strd	r0, r0, [r3, #8]
    b9cc:	e9c3 3300 	strd	r3, r3, [r3]
}
    b9d0:	4770      	bx	lr

0000b9d2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b9d2:	b13a      	cbz	r2, b9e4 <z_impl_k_sem_init+0x12>
    b9d4:	428a      	cmp	r2, r1
    b9d6:	d305      	bcc.n	b9e4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b9d8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b9dc:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b9e0:	2000      	movs	r0, #0
    b9e2:	4770      	bx	lr
		return -EINVAL;
    b9e4:	f06f 0015 	mvn.w	r0, #21
}
    b9e8:	4770      	bx	lr

0000b9ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b9ea:	4603      	mov	r3, r0
    b9ec:	b920      	cbnz	r0, b9f8 <z_reschedule_irqlock+0xe>
    b9ee:	f3ef 8205 	mrs	r2, IPSR
    b9f2:	b90a      	cbnz	r2, b9f8 <z_reschedule_irqlock+0xe>
    b9f4:	f7f8 ba30 	b.w	3e58 <arch_swap>
    b9f8:	f383 8811 	msr	BASEPRI, r3
    b9fc:	f3bf 8f6f 	isb	sy
}
    ba00:	4770      	bx	lr

0000ba02 <z_reschedule_unlocked>:
	__asm__ volatile(
    ba02:	f04f 0320 	mov.w	r3, #32
    ba06:	f3ef 8011 	mrs	r0, BASEPRI
    ba0a:	f383 8812 	msr	BASEPRI_MAX, r3
    ba0e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ba12:	f7ff bfea 	b.w	b9ea <z_reschedule_irqlock>

0000ba16 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ba16:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ba18:	f7fd fea2 	bl	9760 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ba1c:	bd08      	pop	{r3, pc}

0000ba1e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ba1e:	b108      	cbz	r0, ba24 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ba20:	f7f9 b8fe 	b.w	4c20 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    ba24:	4770      	bx	lr

0000ba26 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ba26:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ba2a:	bf08      	it	eq
    ba2c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    ba30:	b538      	push	{r3, r4, r5, lr}
    ba32:	460c      	mov	r4, r1
    ba34:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ba36:	d014      	beq.n	ba62 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ba38:	4308      	orrs	r0, r1
    ba3a:	d103      	bne.n	ba44 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    ba3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    ba40:	f7fd be8e 	b.w	9760 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    ba44:	f06f 0001 	mvn.w	r0, #1
    ba48:	1b40      	subs	r0, r0, r5
    ba4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba4e:	eb63 0101 	sbc.w	r1, r3, r1
    ba52:	2900      	cmp	r1, #0
    ba54:	da04      	bge.n	ba60 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    ba56:	f7fd fe83 	bl	9760 <sys_clock_tick_get>
    ba5a:	1940      	adds	r0, r0, r5
    ba5c:	eb41 0104 	adc.w	r1, r1, r4
}
    ba60:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    ba62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ba66:	4601      	mov	r1, r0
    ba68:	e7fa      	b.n	ba60 <sys_clock_timeout_end_calc+0x3a>

0000ba6a <k_timer_init>:
	timer->status = 0U;
    ba6a:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    ba6c:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    ba70:	f100 0218 	add.w	r2, r0, #24
    ba74:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    ba78:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    ba7c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    ba7e:	6343      	str	r3, [r0, #52]	; 0x34
}
    ba80:	4770      	bx	lr

0000ba82 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    ba82:	b510      	push	{r4, lr}
    ba84:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    ba86:	f7fd fcc9 	bl	941c <z_abort_timeout>

	if (inactive) {
    ba8a:	b9b0      	cbnz	r0, baba <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    ba8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ba8e:	b10b      	cbz	r3, ba94 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    ba90:	4620      	mov	r0, r4
    ba92:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ba94:	f104 0018 	add.w	r0, r4, #24
    ba98:	f7fd f892 	bl	8bc0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ba9c:	b168      	cbz	r0, baba <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ba9e:	f7fc fb27 	bl	80f0 <z_ready_thread>
    baa2:	f04f 0320 	mov.w	r3, #32
    baa6:	f3ef 8011 	mrs	r0, BASEPRI
    baaa:	f383 8812 	msr	BASEPRI_MAX, r3
    baae:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    bab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bab6:	f7ff bf98 	b.w	b9ea <z_reschedule_irqlock>
    baba:	bd10      	pop	{r4, pc}

0000babc <k_malloc>:
{
    babc:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    babe:	2004      	movs	r0, #4
    bac0:	f7fd bfd6 	b.w	9a70 <k_aligned_alloc>

0000bac4 <k_heap_init>:
{
    bac4:	b410      	push	{r4}
    bac6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    baca:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    bace:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    bad0:	f7f6 bdde 	b.w	2690 <sys_heap_init>

0000bad4 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    bad4:	f7fc b882 	b.w	7bdc <z_impl_k_mutex_unlock>

0000bad8 <open_cab>:
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    bad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    badc:	4606      	mov	r6, r0
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    bade:	202c      	movs	r0, #44	; 0x2c
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    bae0:	460d      	mov	r5, r1
    bae2:	4617      	mov	r7, r2
    bae4:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    bae6:	f7ff ffe9 	bl	babc <k_malloc>
    buffer->num = num;
    baea:	8085      	strh	r5, [r0, #4]
    buffer->size = num * dim;
    baec:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    baf0:	4604      	mov	r4, r0
    buffer->dim = dim;
    baf2:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    baf4:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    baf6:	3018      	adds	r0, #24
    baf8:	f7ff ff64 	bl	b9c4 <z_impl_k_mutex_init>
    buffer->buffers = k_malloc(buffer->size * (N_TASKS + 1)); 
    bafc:	8920      	ldrh	r0, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
    bafe:	2300      	movs	r3, #0
    bb00:	8223      	strh	r3, [r4, #16]
    bb02:	74a3      	strb	r3, [r4, #18]
    bb04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    bb08:	f7ff ffd8 	bl	babc <k_malloc>
    bb0c:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    bb0e:	4630      	mov	r0, r6
    bb10:	f7f5 fa8e 	bl	1030 <strlen>
    bb14:	f7ff ffd2 	bl	babc <k_malloc>
    bb18:	6020      	str	r0, [r4, #0]
    buffer->head = k_malloc(buffer->size);
    bb1a:	8920      	ldrh	r0, [r4, #8]
    bb1c:	f7ff ffce 	bl	babc <k_malloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    bb20:	4631      	mov	r1, r6
    bb22:	6160      	str	r0, [r4, #20]
    bb24:	6820      	ldr	r0, [r4, #0]
    bb26:	f000 f8be 	bl	bca6 <strcpy>
    buffer->head = first;
    bb2a:	f8c4 8014 	str.w	r8, [r4, #20]
}
    bb2e:	4620      	mov	r0, r4
    bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bb34 <put_mes>:

void put_mes(void* buf_pointer, cab* cab_id){
    bb34:	b570      	push	{r4, r5, r6, lr}
    bb36:	4604      	mov	r4, r0
    bb38:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    bb3a:	f101 0618 	add.w	r6, r1, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    bb3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb42:	4630      	mov	r0, r6
    bb44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bb48:	f7fb ff4e 	bl	79e8 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    bb4c:	68eb      	ldr	r3, [r5, #12]
    cab_id->head = buf_pointer;
    bb4e:	616c      	str	r4, [r5, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    bb50:	1ae4      	subs	r4, r4, r3
    bb52:	892b      	ldrh	r3, [r5, #8]
    bb54:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(buf_pointer, cab_id);
    cab_id->flags[i] = 0;
    bb58:	fa15 f184 	uxtah	r1, r5, r4
    bb5c:	2300      	movs	r3, #0
    bb5e:	740b      	strb	r3, [r1, #16]
    k_mutex_unlock(&cab_id->mutex);
    bb60:	4630      	mov	r0, r6
}
    bb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    bb66:	f7ff bfb5 	b.w	bad4 <k_mutex_unlock.isra.0>

0000bb6a <get_mes>:

void* get_mes(cab* cab_id){
    bb6a:	b570      	push	{r4, r5, r6, lr}
    bb6c:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    bb6e:	f100 0618 	add.w	r6, r0, #24
    bb72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bb76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bb7a:	4630      	mov	r0, r6
    bb7c:	f7fb ff34 	bl	79e8 <z_impl_k_mutex_lock>
    buffer = cab_id->head;
    bb80:	6965      	ldr	r5, [r4, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    bb82:	68e3      	ldr	r3, [r4, #12]
    bb84:	8922      	ldrh	r2, [r4, #8]
    bb86:	1aeb      	subs	r3, r5, r3
    bb88:	fb93 f3f2 	sdiv	r3, r3, r2
    uint16_t i = calculateIndex(buffer, cab_id);
    cab_id->flags[i]++;
    bb8c:	fa14 f083 	uxtah	r0, r4, r3
    bb90:	7c03      	ldrb	r3, [r0, #16]
    bb92:	3301      	adds	r3, #1
    bb94:	7403      	strb	r3, [r0, #16]
    k_mutex_unlock(&cab_id->mutex);
    bb96:	4630      	mov	r0, r6
    bb98:	f7ff ff9c 	bl	bad4 <k_mutex_unlock.isra.0>
    return buffer;
}
    bb9c:	4628      	mov	r0, r5
    bb9e:	bd70      	pop	{r4, r5, r6, pc}

0000bba0 <unget>:

void unget(void* mes_pointer, cab* cab_id){
    bba0:	b570      	push	{r4, r5, r6, lr}
    bba2:	4604      	mov	r4, r0
    bba4:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    bba6:	f101 0618 	add.w	r6, r1, #24
    bbaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbae:	4630      	mov	r0, r6
    bbb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bbb4:	f7fb ff18 	bl	79e8 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    bbb8:	68eb      	ldr	r3, [r5, #12]
    bbba:	1ae4      	subs	r4, r4, r3
    bbbc:	892b      	ldrh	r3, [r5, #8]
    bbbe:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(mes_pointer, cab_id);
    cab_id->flags[i]--;
    bbc2:	fa15 f184 	uxtah	r1, r5, r4
    k_mutex_unlock(&cab_id->mutex);
    bbc6:	4630      	mov	r0, r6
    cab_id->flags[i]--;
    bbc8:	7c0b      	ldrb	r3, [r1, #16]
    bbca:	3b01      	subs	r3, #1
    bbcc:	740b      	strb	r3, [r1, #16]
}
    bbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    bbd2:	f7ff bf7f 	b.w	bad4 <k_mutex_unlock.isra.0>

0000bbd6 <nearObstSearch>:

/* Function to look for closeby obstacles */
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    uint8_t flag = 0;
    /* Iterating through the CSA, tops to bottom, left column to right column */
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    bbd6:	f500 507f 	add.w	r0, r0, #16320	; 0x3fc0
    bbda:	301f      	adds	r0, #31
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    bbdc:	f44f 527e 	mov.w	r2, #16256	; 0x3f80
    {
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    bbe0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
        {   /* If the pixel is an obstacle returns 1 */    
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    bbe4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    bbe8:	2980      	cmp	r1, #128	; 0x80
    bbea:	d009      	beq.n	bc00 <nearObstSearch+0x2a>
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    bbec:	4283      	cmp	r3, r0
    bbee:	d1f9      	bne.n	bbe4 <nearObstSearch+0xe>
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    bbf0:	3a80      	subs	r2, #128	; 0x80
    bbf2:	f5b2 5ffc 	cmp.w	r2, #8064	; 0x1f80
    bbf6:	f1a3 0080 	sub.w	r0, r3, #128	; 0x80
    bbfa:	d1f1      	bne.n	bbe0 <nearObstSearch+0xa>
                flag = 1;
                return flag;
            }
        }
    }
    return flag;
    bbfc:	2000      	movs	r0, #0
}
    bbfe:	4770      	bx	lr
                return flag;
    bc00:	2001      	movs	r0, #1
    bc02:	4770      	bx	lr

0000bc04 <obstCount>:

/* Function that counts obstacles. */
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    bc04:	4601      	mov	r1, r0
                continue;
            }
            /* If the pixel count is bigger than 2 it means that it is in fact a near obstacle */
            if(c_pixels >= 2) obs++;
            /* Reset the pixel count when there no pixels in the sequence */
            c_pixels = 0;
    bc06:	2200      	movs	r2, #0
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    bc08:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t obs = 0; 
    bc0a:	4610      	mov	r0, r2
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    bc0c:	f101 0680 	add.w	r6, r1, #128	; 0x80
    bc10:	1854      	adds	r4, r2, r1
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    bc12:	2300      	movs	r3, #0
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    bc14:	18b5      	adds	r5, r6, r2
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    bc16:	f814 7b01 	ldrb.w	r7, [r4], #1
    bc1a:	2f80      	cmp	r7, #128	; 0x80
    bc1c:	d10e      	bne.n	bc3c <obstCount+0x38>
                c_pixels++;
    bc1e:	3301      	adds	r3, #1
    bc20:	b29b      	uxth	r3, r3
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    bc22:	42ac      	cmp	r4, r5
    bc24:	d1f7      	bne.n	bc16 <obstCount+0x12>
        }
        /* Same step as done above but to avoid bugs with last pixel from last row */
        if(c_pixels >= 2) obs++;
    bc26:	2b01      	cmp	r3, #1
    bc28:	bf88      	it	hi
    bc2a:	1c43      	addhi	r3, r0, #1
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    bc2c:	f102 0280 	add.w	r2, r2, #128	; 0x80
        if(c_pixels >= 2) obs++;
    bc30:	bf88      	it	hi
    bc32:	b298      	uxthhi	r0, r3
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    bc34:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    bc38:	d1ea      	bne.n	bc10 <obstCount+0xc>
        
        c_pixels = 0;
    }

    return obs;
}
    bc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(c_pixels >= 2) obs++;
    bc3c:	2b01      	cmp	r3, #1
    bc3e:	bf84      	itt	hi
    bc40:	1c43      	addhi	r3, r0, #1
    bc42:	b298      	uxthhi	r0, r3
            c_pixels = 0;
    bc44:	2300      	movs	r3, #0
    bc46:	e7ec      	b.n	bc22 <obstCount+0x1e>

0000bc48 <atan2>:
    bc48:	f7f5 ba2a 	b.w	10a0 <__ieee754_atan2>

0000bc4c <fabs>:
    bc4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    bc50:	4619      	mov	r1, r3
    bc52:	4770      	bx	lr

0000bc54 <memcpy>:
    bc54:	440a      	add	r2, r1
    bc56:	4291      	cmp	r1, r2
    bc58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    bc5c:	d100      	bne.n	bc60 <memcpy+0xc>
    bc5e:	4770      	bx	lr
    bc60:	b510      	push	{r4, lr}
    bc62:	f811 4b01 	ldrb.w	r4, [r1], #1
    bc66:	f803 4f01 	strb.w	r4, [r3, #1]!
    bc6a:	4291      	cmp	r1, r2
    bc6c:	d1f9      	bne.n	bc62 <memcpy+0xe>
    bc6e:	bd10      	pop	{r4, pc}

0000bc70 <__memcpy_chk>:
    bc70:	429a      	cmp	r2, r3
    bc72:	b508      	push	{r3, lr}
    bc74:	d901      	bls.n	bc7a <__memcpy_chk+0xa>
    bc76:	f7f8 ff7f 	bl	4b78 <__chk_fail>
    bc7a:	4281      	cmp	r1, r0
    bc7c:	d804      	bhi.n	bc88 <__memcpy_chk+0x18>
    bc7e:	188b      	adds	r3, r1, r2
    bc80:	4298      	cmp	r0, r3
    bc82:	d3f8      	bcc.n	bc76 <__memcpy_chk+0x6>
    bc84:	4281      	cmp	r1, r0
    bc86:	d102      	bne.n	bc8e <__memcpy_chk+0x1e>
    bc88:	1883      	adds	r3, r0, r2
    bc8a:	4299      	cmp	r1, r3
    bc8c:	d3f3      	bcc.n	bc76 <__memcpy_chk+0x6>
    bc8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bc92:	f7ff bfdf 	b.w	bc54 <memcpy>

0000bc96 <memset>:
    bc96:	4402      	add	r2, r0
    bc98:	4603      	mov	r3, r0
    bc9a:	4293      	cmp	r3, r2
    bc9c:	d100      	bne.n	bca0 <memset+0xa>
    bc9e:	4770      	bx	lr
    bca0:	f803 1b01 	strb.w	r1, [r3], #1
    bca4:	e7f9      	b.n	bc9a <memset+0x4>

0000bca6 <strcpy>:
    bca6:	4603      	mov	r3, r0
    bca8:	f811 2b01 	ldrb.w	r2, [r1], #1
    bcac:	f803 2b01 	strb.w	r2, [r3], #1
    bcb0:	2a00      	cmp	r2, #0
    bcb2:	d1f9      	bne.n	bca8 <strcpy+0x2>
    bcb4:	4770      	bx	lr

0000bcb6 <strnlen>:
    bcb6:	b510      	push	{r4, lr}
    bcb8:	4602      	mov	r2, r0
    bcba:	4401      	add	r1, r0
    bcbc:	428a      	cmp	r2, r1
    bcbe:	4613      	mov	r3, r2
    bcc0:	d003      	beq.n	bcca <strnlen+0x14>
    bcc2:	781c      	ldrb	r4, [r3, #0]
    bcc4:	3201      	adds	r2, #1
    bcc6:	2c00      	cmp	r4, #0
    bcc8:	d1f8      	bne.n	bcbc <strnlen+0x6>
    bcca:	1a18      	subs	r0, r3, r0
    bccc:	bd10      	pop	{r4, pc}

0000bcce <__sfmoreglue>:
    bcce:	b570      	push	{r4, r5, r6, lr}
    bcd0:	2368      	movs	r3, #104	; 0x68
    bcd2:	1e4d      	subs	r5, r1, #1
    bcd4:	435d      	muls	r5, r3
    bcd6:	460e      	mov	r6, r1
    bcd8:	f105 0174 	add.w	r1, r5, #116	; 0x74
    bcdc:	f7fe f87a 	bl	9dd4 <_malloc_r>
    bce0:	4604      	mov	r4, r0
    bce2:	b140      	cbz	r0, bcf6 <__sfmoreglue+0x28>
    bce4:	2100      	movs	r1, #0
    bce6:	e9c0 1600 	strd	r1, r6, [r0]
    bcea:	300c      	adds	r0, #12
    bcec:	60a0      	str	r0, [r4, #8]
    bcee:	f105 0268 	add.w	r2, r5, #104	; 0x68
    bcf2:	f7ff ffd0 	bl	bc96 <memset>
    bcf6:	4620      	mov	r0, r4
    bcf8:	bd70      	pop	{r4, r5, r6, pc}

0000bcfa <_fwalk_reent>:
    bcfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bcfe:	4606      	mov	r6, r0
    bd00:	4688      	mov	r8, r1
    bd02:	f100 0448 	add.w	r4, r0, #72	; 0x48
    bd06:	2700      	movs	r7, #0
    bd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    bd0c:	f1b9 0901 	subs.w	r9, r9, #1
    bd10:	d505      	bpl.n	bd1e <_fwalk_reent+0x24>
    bd12:	6824      	ldr	r4, [r4, #0]
    bd14:	2c00      	cmp	r4, #0
    bd16:	d1f7      	bne.n	bd08 <_fwalk_reent+0xe>
    bd18:	4638      	mov	r0, r7
    bd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bd1e:	89ab      	ldrh	r3, [r5, #12]
    bd20:	2b01      	cmp	r3, #1
    bd22:	d907      	bls.n	bd34 <_fwalk_reent+0x3a>
    bd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    bd28:	3301      	adds	r3, #1
    bd2a:	d003      	beq.n	bd34 <_fwalk_reent+0x3a>
    bd2c:	4629      	mov	r1, r5
    bd2e:	4630      	mov	r0, r6
    bd30:	47c0      	blx	r8
    bd32:	4307      	orrs	r7, r0
    bd34:	3568      	adds	r5, #104	; 0x68
    bd36:	e7e9      	b.n	bd0c <_fwalk_reent+0x12>

0000bd38 <__sfputc_r>:
    bd38:	6893      	ldr	r3, [r2, #8]
    bd3a:	3b01      	subs	r3, #1
    bd3c:	2b00      	cmp	r3, #0
    bd3e:	b410      	push	{r4}
    bd40:	6093      	str	r3, [r2, #8]
    bd42:	da07      	bge.n	bd54 <__sfputc_r+0x1c>
    bd44:	6994      	ldr	r4, [r2, #24]
    bd46:	42a3      	cmp	r3, r4
    bd48:	db01      	blt.n	bd4e <__sfputc_r+0x16>
    bd4a:	290a      	cmp	r1, #10
    bd4c:	d102      	bne.n	bd54 <__sfputc_r+0x1c>
    bd4e:	bc10      	pop	{r4}
    bd50:	f7fe bbe8 	b.w	a524 <__swbuf_r>
    bd54:	6813      	ldr	r3, [r2, #0]
    bd56:	1c58      	adds	r0, r3, #1
    bd58:	6010      	str	r0, [r2, #0]
    bd5a:	7019      	strb	r1, [r3, #0]
    bd5c:	4608      	mov	r0, r1
    bd5e:	bc10      	pop	{r4}
    bd60:	4770      	bx	lr

0000bd62 <__sfputs_r>:
    bd62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd64:	4606      	mov	r6, r0
    bd66:	460f      	mov	r7, r1
    bd68:	4614      	mov	r4, r2
    bd6a:	18d5      	adds	r5, r2, r3
    bd6c:	42ac      	cmp	r4, r5
    bd6e:	d101      	bne.n	bd74 <__sfputs_r+0x12>
    bd70:	2000      	movs	r0, #0
    bd72:	e007      	b.n	bd84 <__sfputs_r+0x22>
    bd74:	f814 1b01 	ldrb.w	r1, [r4], #1
    bd78:	463a      	mov	r2, r7
    bd7a:	4630      	mov	r0, r6
    bd7c:	f7ff ffdc 	bl	bd38 <__sfputc_r>
    bd80:	1c43      	adds	r3, r0, #1
    bd82:	d1f3      	bne.n	bd6c <__sfputs_r+0xa>
    bd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bd86 <_printf_common>:
    bd86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd8a:	4616      	mov	r6, r2
    bd8c:	4698      	mov	r8, r3
    bd8e:	688a      	ldr	r2, [r1, #8]
    bd90:	690b      	ldr	r3, [r1, #16]
    bd92:	f8dd 9020 	ldr.w	r9, [sp, #32]
    bd96:	4293      	cmp	r3, r2
    bd98:	bfb8      	it	lt
    bd9a:	4613      	movlt	r3, r2
    bd9c:	6033      	str	r3, [r6, #0]
    bd9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    bda2:	4607      	mov	r7, r0
    bda4:	460c      	mov	r4, r1
    bda6:	b10a      	cbz	r2, bdac <_printf_common+0x26>
    bda8:	3301      	adds	r3, #1
    bdaa:	6033      	str	r3, [r6, #0]
    bdac:	6823      	ldr	r3, [r4, #0]
    bdae:	0699      	lsls	r1, r3, #26
    bdb0:	bf42      	ittt	mi
    bdb2:	6833      	ldrmi	r3, [r6, #0]
    bdb4:	3302      	addmi	r3, #2
    bdb6:	6033      	strmi	r3, [r6, #0]
    bdb8:	6825      	ldr	r5, [r4, #0]
    bdba:	f015 0506 	ands.w	r5, r5, #6
    bdbe:	d106      	bne.n	bdce <_printf_common+0x48>
    bdc0:	f104 0a19 	add.w	sl, r4, #25
    bdc4:	68e3      	ldr	r3, [r4, #12]
    bdc6:	6832      	ldr	r2, [r6, #0]
    bdc8:	1a9b      	subs	r3, r3, r2
    bdca:	42ab      	cmp	r3, r5
    bdcc:	dc26      	bgt.n	be1c <_printf_common+0x96>
    bdce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    bdd2:	6822      	ldr	r2, [r4, #0]
    bdd4:	3b00      	subs	r3, #0
    bdd6:	bf18      	it	ne
    bdd8:	2301      	movne	r3, #1
    bdda:	0692      	lsls	r2, r2, #26
    bddc:	d42b      	bmi.n	be36 <_printf_common+0xb0>
    bdde:	f104 0243 	add.w	r2, r4, #67	; 0x43
    bde2:	4641      	mov	r1, r8
    bde4:	4638      	mov	r0, r7
    bde6:	47c8      	blx	r9
    bde8:	3001      	adds	r0, #1
    bdea:	d01e      	beq.n	be2a <_printf_common+0xa4>
    bdec:	6823      	ldr	r3, [r4, #0]
    bdee:	6922      	ldr	r2, [r4, #16]
    bdf0:	f003 0306 	and.w	r3, r3, #6
    bdf4:	2b04      	cmp	r3, #4
    bdf6:	bf02      	ittt	eq
    bdf8:	68e5      	ldreq	r5, [r4, #12]
    bdfa:	6833      	ldreq	r3, [r6, #0]
    bdfc:	1aed      	subeq	r5, r5, r3
    bdfe:	68a3      	ldr	r3, [r4, #8]
    be00:	bf0c      	ite	eq
    be02:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    be06:	2500      	movne	r5, #0
    be08:	4293      	cmp	r3, r2
    be0a:	bfc4      	itt	gt
    be0c:	1a9b      	subgt	r3, r3, r2
    be0e:	18ed      	addgt	r5, r5, r3
    be10:	2600      	movs	r6, #0
    be12:	341a      	adds	r4, #26
    be14:	42b5      	cmp	r5, r6
    be16:	d11a      	bne.n	be4e <_printf_common+0xc8>
    be18:	2000      	movs	r0, #0
    be1a:	e008      	b.n	be2e <_printf_common+0xa8>
    be1c:	2301      	movs	r3, #1
    be1e:	4652      	mov	r2, sl
    be20:	4641      	mov	r1, r8
    be22:	4638      	mov	r0, r7
    be24:	47c8      	blx	r9
    be26:	3001      	adds	r0, #1
    be28:	d103      	bne.n	be32 <_printf_common+0xac>
    be2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be32:	3501      	adds	r5, #1
    be34:	e7c6      	b.n	bdc4 <_printf_common+0x3e>
    be36:	18e1      	adds	r1, r4, r3
    be38:	1c5a      	adds	r2, r3, #1
    be3a:	2030      	movs	r0, #48	; 0x30
    be3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    be40:	4422      	add	r2, r4
    be42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    be46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    be4a:	3302      	adds	r3, #2
    be4c:	e7c7      	b.n	bdde <_printf_common+0x58>
    be4e:	2301      	movs	r3, #1
    be50:	4622      	mov	r2, r4
    be52:	4641      	mov	r1, r8
    be54:	4638      	mov	r0, r7
    be56:	47c8      	blx	r9
    be58:	3001      	adds	r0, #1
    be5a:	d0e6      	beq.n	be2a <_printf_common+0xa4>
    be5c:	3601      	adds	r6, #1
    be5e:	e7d9      	b.n	be14 <_printf_common+0x8e>

0000be60 <__sread>:
    be60:	b510      	push	{r4, lr}
    be62:	460c      	mov	r4, r1
    be64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    be68:	f7fe fcca 	bl	a800 <_read_r>
    be6c:	2800      	cmp	r0, #0
    be6e:	bfab      	itete	ge
    be70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    be72:	89a3      	ldrhlt	r3, [r4, #12]
    be74:	181b      	addge	r3, r3, r0
    be76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    be7a:	bfac      	ite	ge
    be7c:	6563      	strge	r3, [r4, #84]	; 0x54
    be7e:	81a3      	strhlt	r3, [r4, #12]
    be80:	bd10      	pop	{r4, pc}

0000be82 <__swrite>:
    be82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be86:	461f      	mov	r7, r3
    be88:	898b      	ldrh	r3, [r1, #12]
    be8a:	05db      	lsls	r3, r3, #23
    be8c:	4605      	mov	r5, r0
    be8e:	460c      	mov	r4, r1
    be90:	4616      	mov	r6, r2
    be92:	d505      	bpl.n	bea0 <__swrite+0x1e>
    be94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    be98:	2302      	movs	r3, #2
    be9a:	2200      	movs	r2, #0
    be9c:	f7fe fc5e 	bl	a75c <_lseek_r>
    bea0:	89a3      	ldrh	r3, [r4, #12]
    bea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    beaa:	81a3      	strh	r3, [r4, #12]
    beac:	4632      	mov	r2, r6
    beae:	463b      	mov	r3, r7
    beb0:	4628      	mov	r0, r5
    beb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    beb6:	f7fe bb87 	b.w	a5c8 <_write_r>

0000beba <__sseek>:
    beba:	b510      	push	{r4, lr}
    bebc:	460c      	mov	r4, r1
    bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bec2:	f7fe fc4b 	bl	a75c <_lseek_r>
    bec6:	1c43      	adds	r3, r0, #1
    bec8:	89a3      	ldrh	r3, [r4, #12]
    beca:	bf15      	itete	ne
    becc:	6560      	strne	r0, [r4, #84]	; 0x54
    bece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    bed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    bed6:	81a3      	strheq	r3, [r4, #12]
    bed8:	bf18      	it	ne
    beda:	81a3      	strhne	r3, [r4, #12]
    bedc:	bd10      	pop	{r4, pc}

0000bede <__sclose>:
    bede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bee2:	f7fe bbef 	b.w	a6c4 <_close_r>

0000bee6 <__sflush_r>:
    bee6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    beea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beec:	0717      	lsls	r7, r2, #28
    beee:	4605      	mov	r5, r0
    bef0:	460c      	mov	r4, r1
    bef2:	d456      	bmi.n	bfa2 <__sflush_r+0xbc>
    bef4:	684b      	ldr	r3, [r1, #4]
    bef6:	2b00      	cmp	r3, #0
    bef8:	dc02      	bgt.n	bf00 <__sflush_r+0x1a>
    befa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    befc:	2b00      	cmp	r3, #0
    befe:	dd3d      	ble.n	bf7c <__sflush_r+0x96>
    bf00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    bf02:	2e00      	cmp	r6, #0
    bf04:	d03a      	beq.n	bf7c <__sflush_r+0x96>
    bf06:	2300      	movs	r3, #0
    bf08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    bf0c:	682f      	ldr	r7, [r5, #0]
    bf0e:	6a21      	ldr	r1, [r4, #32]
    bf10:	602b      	str	r3, [r5, #0]
    bf12:	d025      	beq.n	bf60 <__sflush_r+0x7a>
    bf14:	6d62      	ldr	r2, [r4, #84]	; 0x54
    bf16:	89a3      	ldrh	r3, [r4, #12]
    bf18:	0758      	lsls	r0, r3, #29
    bf1a:	d505      	bpl.n	bf28 <__sflush_r+0x42>
    bf1c:	6863      	ldr	r3, [r4, #4]
    bf1e:	1ad2      	subs	r2, r2, r3
    bf20:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bf22:	b10b      	cbz	r3, bf28 <__sflush_r+0x42>
    bf24:	6c23      	ldr	r3, [r4, #64]	; 0x40
    bf26:	1ad2      	subs	r2, r2, r3
    bf28:	6a21      	ldr	r1, [r4, #32]
    bf2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    bf2c:	2300      	movs	r3, #0
    bf2e:	4628      	mov	r0, r5
    bf30:	47b0      	blx	r6
    bf32:	1c41      	adds	r1, r0, #1
    bf34:	d024      	beq.n	bf80 <__sflush_r+0x9a>
    bf36:	2300      	movs	r3, #0
    bf38:	6063      	str	r3, [r4, #4]
    bf3a:	6923      	ldr	r3, [r4, #16]
    bf3c:	6023      	str	r3, [r4, #0]
    bf3e:	89a3      	ldrh	r3, [r4, #12]
    bf40:	04da      	lsls	r2, r3, #19
    bf42:	d500      	bpl.n	bf46 <__sflush_r+0x60>
    bf44:	6560      	str	r0, [r4, #84]	; 0x54
    bf46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bf48:	602f      	str	r7, [r5, #0]
    bf4a:	b1b9      	cbz	r1, bf7c <__sflush_r+0x96>
    bf4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    bf50:	4299      	cmp	r1, r3
    bf52:	d002      	beq.n	bf5a <__sflush_r+0x74>
    bf54:	4628      	mov	r0, r5
    bf56:	f7fd fef3 	bl	9d40 <_free_r>
    bf5a:	2300      	movs	r3, #0
    bf5c:	6363      	str	r3, [r4, #52]	; 0x34
    bf5e:	e00d      	b.n	bf7c <__sflush_r+0x96>
    bf60:	2301      	movs	r3, #1
    bf62:	4628      	mov	r0, r5
    bf64:	47b0      	blx	r6
    bf66:	1c46      	adds	r6, r0, #1
    bf68:	4602      	mov	r2, r0
    bf6a:	d1d4      	bne.n	bf16 <__sflush_r+0x30>
    bf6c:	682b      	ldr	r3, [r5, #0]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d0d1      	beq.n	bf16 <__sflush_r+0x30>
    bf72:	2b1d      	cmp	r3, #29
    bf74:	d001      	beq.n	bf7a <__sflush_r+0x94>
    bf76:	2b16      	cmp	r3, #22
    bf78:	d12a      	bne.n	bfd0 <__sflush_r+0xea>
    bf7a:	602f      	str	r7, [r5, #0]
    bf7c:	2000      	movs	r0, #0
    bf7e:	e02e      	b.n	bfde <__sflush_r+0xf8>
    bf80:	682a      	ldr	r2, [r5, #0]
    bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bf86:	b142      	cbz	r2, bf9a <__sflush_r+0xb4>
    bf88:	2a1d      	cmp	r2, #29
    bf8a:	d001      	beq.n	bf90 <__sflush_r+0xaa>
    bf8c:	2a16      	cmp	r2, #22
    bf8e:	d121      	bne.n	bfd4 <__sflush_r+0xee>
    bf90:	2300      	movs	r3, #0
    bf92:	6063      	str	r3, [r4, #4]
    bf94:	6923      	ldr	r3, [r4, #16]
    bf96:	6023      	str	r3, [r4, #0]
    bf98:	e7d5      	b.n	bf46 <__sflush_r+0x60>
    bf9a:	6062      	str	r2, [r4, #4]
    bf9c:	6922      	ldr	r2, [r4, #16]
    bf9e:	6022      	str	r2, [r4, #0]
    bfa0:	e7ce      	b.n	bf40 <__sflush_r+0x5a>
    bfa2:	690f      	ldr	r7, [r1, #16]
    bfa4:	2f00      	cmp	r7, #0
    bfa6:	d0e9      	beq.n	bf7c <__sflush_r+0x96>
    bfa8:	0793      	lsls	r3, r2, #30
    bfaa:	680e      	ldr	r6, [r1, #0]
    bfac:	bf08      	it	eq
    bfae:	694b      	ldreq	r3, [r1, #20]
    bfb0:	600f      	str	r7, [r1, #0]
    bfb2:	bf18      	it	ne
    bfb4:	2300      	movne	r3, #0
    bfb6:	1bf6      	subs	r6, r6, r7
    bfb8:	608b      	str	r3, [r1, #8]
    bfba:	2e00      	cmp	r6, #0
    bfbc:	ddde      	ble.n	bf7c <__sflush_r+0x96>
    bfbe:	6a21      	ldr	r1, [r4, #32]
    bfc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    bfc4:	4633      	mov	r3, r6
    bfc6:	463a      	mov	r2, r7
    bfc8:	4628      	mov	r0, r5
    bfca:	47e0      	blx	ip
    bfcc:	2800      	cmp	r0, #0
    bfce:	dc07      	bgt.n	bfe0 <__sflush_r+0xfa>
    bfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfd8:	81a3      	strh	r3, [r4, #12]
    bfda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bfe0:	4407      	add	r7, r0
    bfe2:	1a36      	subs	r6, r6, r0
    bfe4:	e7e9      	b.n	bfba <__sflush_r+0xd4>

0000bfe6 <__swhatbuf_r>:
    bfe6:	b570      	push	{r4, r5, r6, lr}
    bfe8:	460c      	mov	r4, r1
    bfea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bfee:	2900      	cmp	r1, #0
    bff0:	b096      	sub	sp, #88	; 0x58
    bff2:	4615      	mov	r5, r2
    bff4:	461e      	mov	r6, r3
    bff6:	da0d      	bge.n	c014 <__swhatbuf_r+0x2e>
    bff8:	89a3      	ldrh	r3, [r4, #12]
    bffa:	f013 0f80 	tst.w	r3, #128	; 0x80
    bffe:	f04f 0100 	mov.w	r1, #0
    c002:	bf14      	ite	ne
    c004:	2340      	movne	r3, #64	; 0x40
    c006:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    c00a:	2000      	movs	r0, #0
    c00c:	6031      	str	r1, [r6, #0]
    c00e:	602b      	str	r3, [r5, #0]
    c010:	b016      	add	sp, #88	; 0x58
    c012:	bd70      	pop	{r4, r5, r6, pc}
    c014:	466a      	mov	r2, sp
    c016:	f7fe fc05 	bl	a824 <_fstat_r>
    c01a:	2800      	cmp	r0, #0
    c01c:	dbec      	blt.n	bff8 <__swhatbuf_r+0x12>
    c01e:	9901      	ldr	r1, [sp, #4]
    c020:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
    c024:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    c028:	4259      	negs	r1, r3
    c02a:	4159      	adcs	r1, r3
    c02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c030:	e7eb      	b.n	c00a <__swhatbuf_r+0x24>
	...

0000c034 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    c034:	f7fa b984 	b.w	6340 <SystemInit>
