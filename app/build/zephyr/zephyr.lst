
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 1d 00 20 91 2e 00 00 b5 81 00 00 65 2e 00 00     ... ........e...
  10:	65 2e 00 00 65 2e 00 00 65 2e 00 00 00 00 00 00     e...e...e.......
	...
  2c:	59 27 00 00 65 2e 00 00 00 00 00 00 05 27 00 00     Y'..e........'..
  3c:	65 2e 00 00                                         e...

00000040 <_irq_vector_table>:
  40:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  50:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  60:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  70:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  80:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  90:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  a0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  b0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  c0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  d0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  e0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..
  f0:	09 28 00 00 09 28 00 00 09 28 00 00 09 28 00 00     .(...(...(...(..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <__data_size+0x26>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x195>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x199>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25f>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x263>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x235>
     39c:	d106      	bne.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>

000003d4 <main>:
#include <zephyr.h>
#include "cab.h"


void main(void)
{
     3d4:	b507      	push	{r0, r1, r2, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
     3d6:	4908      	ldr	r1, [pc, #32]	; (3f8 <main+0x24>)
     3d8:	4808      	ldr	r0, [pc, #32]	; (3fc <main+0x28>)
     3da:	f007 fcc6 	bl	7d6a <printk>
	cab* cab;
	uint16_t first = 5; 
     3de:	2305      	movs	r3, #5
     3e0:	f8ad 3006 	strh.w	r3, [sp, #6]
	cab = open_cab("CAB", 1, 2, &first);
     3e4:	2202      	movs	r2, #2
     3e6:	f10d 0306 	add.w	r3, sp, #6
     3ea:	2101      	movs	r1, #1
     3ec:	4804      	ldr	r0, [pc, #16]	; (400 <CONFIG_FLASH_SIZE>)
     3ee:	f008 fa82 	bl	88f6 <open_cab>
}
     3f2:	b003      	add	sp, #12
     3f4:	f85d fb04 	ldr.w	pc, [sp], #4
     3f8:	00008eec 	.word	0x00008eec
     3fc:	00008f00 	.word	0x00008f00
     400:	00008f11 	.word	0x00008f11

00000404 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     408:	b08d      	sub	sp, #52	; 0x34
     40a:	461f      	mov	r7, r3
     40c:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     40e:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     412:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     416:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     418:	1c53      	adds	r3, r2, #1
     41a:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     41c:	0783      	lsls	r3, r0, #30
     41e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
     422:	4605      	mov	r5, r0
     424:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
     426:	f040 8228 	bne.w	87a <CONFIG_ISR_STACK_SIZE+0x7a>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     42a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     42c:	b130      	cbz	r0, 43c <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     42e:	2907      	cmp	r1, #7
     430:	d809      	bhi.n	446 <cbvprintf_package+0x42>
		return -ENOSPC;
     432:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     436:	b00d      	add	sp, #52	; 0x34
     438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     43c:	f001 0607 	and.w	r6, r1, #7
     440:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     442:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     446:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
     44a:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
     44e:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     450:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     454:	4652      	mov	r2, sl
	bool parsing = false;
     456:	4651      	mov	r1, sl
	size = sizeof(char *);
     458:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
     45a:	b105      	cbz	r5, 45e <cbvprintf_package+0x5a>
				*(const char **)buf = s;
     45c:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     45e:	9804      	ldr	r0, [sp, #16]
     460:	2800      	cmp	r0, #0
     462:	f300 812a 	bgt.w	6ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d2>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     466:	48bc      	ldr	r0, [pc, #752]	; (758 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x270>)
     468:	4287      	cmp	r7, r0
     46a:	d303      	bcc.n	474 <cbvprintf_package+0x70>
     46c:	48bb      	ldr	r0, [pc, #748]	; (75c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x274>)
     46e:	4287      	cmp	r7, r0
     470:	f0c0 8123 	bcc.w	6ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d2>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     474:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     478:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     47c:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     480:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     484:	f000 8137 	beq.w	6f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     488:	f04f 0c00 	mov.w	ip, #0
     48c:	e11e      	b.n	6cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e4>
		if (!parsing) {
     48e:	b931      	cbnz	r1, 49e <cbvprintf_package+0x9a>
			if (*fmt == '%') {
     490:	2825      	cmp	r0, #37	; 0x25
     492:	d116      	bne.n	4c2 <cbvprintf_package+0xbe>
				parsing = true;
     494:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     496:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
     49a:	46cb      	mov	fp, r9
     49c:	e011      	b.n	4c2 <cbvprintf_package+0xbe>
		switch (*fmt) {
     49e:	286c      	cmp	r0, #108	; 0x6c
     4a0:	f200 809f 	bhi.w	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
     4a4:	284b      	cmp	r0, #75	; 0x4b
     4a6:	d822      	bhi.n	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     4a8:	2847      	cmp	r0, #71	; 0x47
     4aa:	f200 80b1 	bhi.w	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     4ae:	2829      	cmp	r0, #41	; 0x29
     4b0:	d86a      	bhi.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
     4b2:	2820      	cmp	r0, #32
     4b4:	d005      	beq.n	4c2 <cbvprintf_package+0xbe>
     4b6:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
     4ba:	f1dc 0100 	rsbs	r1, ip, #0
     4be:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
     4c2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     4c6:	2800      	cmp	r0, #0
     4c8:	d1e1      	bne.n	48e <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     4ca:	1b61      	subs	r1, r4, r5
     4cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     4d0:	f0c0 8173 	bcc.w	7ba <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2d2>
		__ASSERT(false, "too many format args");
     4d4:	49a2      	ldr	r1, [pc, #648]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     4d6:	4aa3      	ldr	r2, [pc, #652]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     4d8:	48a3      	ldr	r0, [pc, #652]	; (768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>)
     4da:	f240 233d 	movw	r3, #573	; 0x23d
     4de:	f007 fdd7 	bl	8090 <assert_print>
     4e2:	48a2      	ldr	r0, [pc, #648]	; (76c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x284>)
     4e4:	f007 fdd4 	bl	8090 <assert_print>
     4e8:	f240 213d 	movw	r1, #573	; 0x23d
     4ec:	e0fd      	b.n	6ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x202>
		switch (*fmt) {
     4ee:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     4f2:	f1bc 0f20 	cmp.w	ip, #32
     4f6:	f200 808b 	bhi.w	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     4fa:	f20f 0e08 	addw	lr, pc, #8
     4fe:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     502:	bf00      	nop
     504:	000004c3 	.word	0x000004c3
     508:	00000611 	.word	0x00000611
     50c:	00000611 	.word	0x00000611
     510:	00000611 	.word	0x00000611
     514:	00000611 	.word	0x00000611
     518:	00000611 	.word	0x00000611
     51c:	00000611 	.word	0x00000611
     520:	00000611 	.word	0x00000611
     524:	00000611 	.word	0x00000611
     528:	00000611 	.word	0x00000611
     52c:	00000611 	.word	0x00000611
     530:	00000611 	.word	0x00000611
     534:	00000615 	.word	0x00000615
     538:	00000611 	.word	0x00000611
     53c:	00000611 	.word	0x00000611
     540:	00000611 	.word	0x00000611
     544:	00000611 	.word	0x00000611
     548:	00000611 	.word	0x00000611
     54c:	00000611 	.word	0x00000611
     550:	00000611 	.word	0x00000611
     554:	00000611 	.word	0x00000611
     558:	00000631 	.word	0x00000631
     55c:	00000611 	.word	0x00000611
     560:	00000615 	.word	0x00000615
     564:	00000615 	.word	0x00000615
     568:	00000631 	.word	0x00000631
     56c:	00000631 	.word	0x00000631
     570:	00000631 	.word	0x00000631
     574:	000004c3 	.word	0x000004c3
     578:	00000615 	.word	0x00000615
     57c:	00000659 	.word	0x00000659
     580:	00000611 	.word	0x00000611
     584:	000004c3 	.word	0x000004c3
     588:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     58c:	f04f 0e01 	mov.w	lr, #1
     590:	fa5f fc8c 	uxtb.w	ip, ip
     594:	fa0e fc0c 	lsl.w	ip, lr, ip
     598:	f64f 7eda 	movw	lr, #65498	; 0xffda
     59c:	ea1c 0f0e 	tst.w	ip, lr
     5a0:	d18f      	bne.n	4c2 <cbvprintf_package+0xbe>
     5a2:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
     5a6:	d143      	bne.n	630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>
     5a8:	f01c 0101 	ands.w	r1, ip, #1
     5ac:	d089      	beq.n	4c2 <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
     5ae:	3c01      	subs	r4, #1
     5b0:	444c      	add	r4, r9
     5b2:	f1c9 0c00 	rsb	ip, r9, #0
     5b6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     5ba:	2d00      	cmp	r5, #0
     5bc:	d065      	beq.n	68a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a2>
     5be:	ebab 0c05 	sub.w	ip, fp, r5
     5c2:	44a4      	add	ip, r4
     5c4:	45b4      	cmp	ip, r6
     5c6:	f63f af34 	bhi.w	432 <cbvprintf_package+0x2e>
		if (*fmt == 's') {
     5ca:	2873      	cmp	r0, #115	; 0x73
     5cc:	d06f      	beq.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
		} else if (size == sizeof(int)) {
     5ce:	f1bb 0f04 	cmp.w	fp, #4
     5d2:	d14a      	bne.n	66a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x182>
			int v = va_arg(ap, int);
     5d4:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
     5d8:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     5da:	3404      	adds	r4, #4
     5dc:	f04f 0b04 	mov.w	fp, #4
     5e0:	e76f      	b.n	4c2 <cbvprintf_package+0xbe>
		switch (*fmt) {
     5e2:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
     5e6:	fa5f fc8c 	uxtb.w	ip, ip
     5ea:	f1bc 0f0c 	cmp.w	ip, #12
     5ee:	d80f      	bhi.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     5f0:	f04f 0e01 	mov.w	lr, #1
     5f4:	fa0e fc0c 	lsl.w	ip, lr, ip
     5f8:	f01c 0f25 	tst.w	ip, #37	; 0x25
     5fc:	d12f      	bne.n	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
     5fe:	f240 4e82 	movw	lr, #1154	; 0x482
     602:	ea1c 0f0e 	tst.w	ip, lr
     606:	d105      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     608:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
     60c:	f47f af43 	bne.w	496 <cbvprintf_package+0x92>
			parsing = false;
     610:	2100      	movs	r1, #0
     612:	e756      	b.n	4c2 <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
     614:	f813 1c01 	ldrb.w	r1, [r3, #-1]
     618:	296c      	cmp	r1, #108	; 0x6c
     61a:	d124      	bne.n	666 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17e>
				if (fmt[-2] == 'l') {
     61c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     620:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     622:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
     626:	d11b      	bne.n	660 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x178>
					align = VA_STACK_ALIGN(long long);
     628:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
     62c:	46cb      	mov	fp, r9
     62e:	e7be      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
				v.ld = va_arg(ap, long double);
     630:	f108 0807 	add.w	r8, r8, #7
     634:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
     638:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     63a:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
     63e:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     642:	b13d      	cbz	r5, 654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
				if (BUF_OFFSET + size > len) {
     644:	f8dd e014 	ldr.w	lr, [sp, #20]
     648:	44a6      	add	lr, r4
     64a:	45b6      	cmp	lr, r6
     64c:	f63f aef1 	bhi.w	432 <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
     650:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
     654:	3408      	adds	r4, #8
			parsing = false;
     656:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
     658:	f04f 0908 	mov.w	r9, #8
     65c:	e71d      	b.n	49a <cbvprintf_package+0x96>
			parsing = false;
     65e:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
     660:	f04f 0904 	mov.w	r9, #4
     664:	e7e2      	b.n	62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>
			parsing = false;
     666:	2100      	movs	r1, #0
     668:	e7a1      	b.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
		} else if (size == sizeof(long long)) {
     66a:	f1bb 0f08 	cmp.w	fp, #8
     66e:	f040 8096 	bne.w	79e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b6>
			long long v = va_arg(ap, long long);
     672:	f108 0807 	add.w	r8, r8, #7
     676:	f028 0807 	bic.w	r8, r8, #7
     67a:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
     67e:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     682:	3408      	adds	r4, #8
     684:	f04f 0b08 	mov.w	fp, #8
     688:	e71b      	b.n	4c2 <cbvprintf_package+0xbe>
		if (*fmt == 's') {
     68a:	2873      	cmp	r0, #115	; 0x73
     68c:	d00f      	beq.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
		} else if (size == sizeof(int)) {
     68e:	f1bb 0f04 	cmp.w	fp, #4
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
			int v = va_arg(ap, int);
     694:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     698:	e79f      	b.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
		} else if (size == sizeof(long long)) {
     69a:	f1bb 0f08 	cmp.w	fp, #8
     69e:	d17e      	bne.n	79e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b6>
			long long v = va_arg(ap, long long);
     6a0:	f108 0807 	add.w	r8, r8, #7
     6a4:	f028 0807 	bic.w	r8, r8, #7
     6a8:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     6ac:	e7e9      	b.n	682 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6ae:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     6b0:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6b4:	3801      	subs	r0, #1
     6b6:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     6b8:	e6cf      	b.n	45a <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
     6ba:	9802      	ldr	r0, [sp, #8]
     6bc:	0780      	lsls	r0, r0, #30
     6be:	d546      	bpl.n	74e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x266>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     6c0:	eba4 0e05 	sub.w	lr, r4, r5
     6c4:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6c8:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     6cc:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     6d0:	d31f      	bcc.n	712 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22a>
					__ASSERT(false, "String with too many arguments");
     6d2:	4923      	ldr	r1, [pc, #140]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     6d4:	4a23      	ldr	r2, [pc, #140]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     6d6:	4824      	ldr	r0, [pc, #144]	; (768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>)
     6d8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     6dc:	f007 fcd8 	bl	8090 <assert_print>
     6e0:	4823      	ldr	r0, [pc, #140]	; (770 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x288>)
     6e2:	f007 fcd5 	bl	8090 <assert_print>
     6e6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
     6ea:	481e      	ldr	r0, [pc, #120]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     6ec:	f007 fcc9 	bl	8082 <assert_post_action>
					return -EINVAL;
     6f0:	f06f 0015 	mvn.w	r0, #21
     6f4:	e69f      	b.n	436 <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     6f6:	2a0f      	cmp	r2, #15
     6f8:	d80d      	bhi.n	716 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22e>
				if (buf0 != NULL) {
     6fa:	2d00      	cmp	r5, #0
     6fc:	d03f      	beq.n	77e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x296>
					str_ptr_pos[s_idx] = s_ptr_idx;
     6fe:	b2c0      	uxtb	r0, r0
     700:	f102 0c30 	add.w	ip, r2, #48	; 0x30
     704:	44ec      	add	ip, sp
     706:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
     70a:	9803      	ldr	r0, [sp, #12]
     70c:	3001      	adds	r0, #1
     70e:	9003      	str	r0, [sp, #12]
     710:	e01c      	b.n	74c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x264>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     712:	2a0f      	cmp	r2, #15
     714:	d90c      	bls.n	730 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x248>
					__ASSERT(false, "str_ptr_pos[] too small");
     716:	4912      	ldr	r1, [pc, #72]	; (760 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x278>)
     718:	4a12      	ldr	r2, [pc, #72]	; (764 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27c>)
     71a:	4813      	ldr	r0, [pc, #76]	; (768 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x280>)
     71c:	f240 13f5 	movw	r3, #501	; 0x1f5
     720:	f007 fcb6 	bl	8090 <assert_print>
     724:	4813      	ldr	r0, [pc, #76]	; (774 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28c>)
     726:	f007 fcb3 	bl	8090 <assert_print>
     72a:	f240 11f5 	movw	r1, #501	; 0x1f5
     72e:	e7dc      	b.n	6ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x202>
				if (buf0 != NULL) {
     730:	b315      	cbz	r5, 778 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x290>
					str_ptr_pos[s_idx] = s_ptr_idx;
     732:	b2c0      	uxtb	r0, r0
					if (is_ro) {
     734:	f1bc 0f00 	cmp.w	ip, #0
     738:	d0e2      	beq.n	700 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x218>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     73a:	f102 0c30 	add.w	ip, r2, #48	; 0x30
     73e:	44ec      	add	ip, sp
     740:	f060 007f 	orn	r0, r0, #127	; 0x7f
     744:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
     748:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     74c:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     74e:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     752:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     754:	9005      	str	r0, [sp, #20]
     756:	e6b4      	b.n	4c2 <cbvprintf_package+0xbe>
     758:	00008958 	.word	0x00008958
     75c:	0000a788 	.word	0x0000a788
     760:	0000a6a7 	.word	0x0000a6a7
     764:	00008f15 	.word	0x00008f15
     768:	00008f43 	.word	0x00008f43
     76c:	00008fb0 	.word	0x00008fb0
     770:	00008f60 	.word	0x00008f60
     774:	00008f81 	.word	0x00008f81
				} else if (is_ro || rws_pos_en) {
     778:	f1bc 0f00 	cmp.w	ip, #0
     77c:	d101      	bne.n	782 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x29a>
     77e:	9801      	ldr	r0, [sp, #4]
     780:	b108      	cbz	r0, 786 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x29e>
					len += 1;
     782:	3601      	adds	r6, #1
     784:	e7e2      	b.n	74c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x264>
					len += strlen(s) + 1 + 1;
     786:	4638      	mov	r0, r7
     788:	e9cd 2106 	strd	r2, r1, [sp, #24]
     78c:	9305      	str	r3, [sp, #20]
     78e:	f007 fd42 	bl	8216 <strlen>
     792:	3602      	adds	r6, #2
     794:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
     798:	9b05      	ldr	r3, [sp, #20]
     79a:	4406      	add	r6, r0
     79c:	e7d6      	b.n	74c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x264>
			__ASSERT(false, "unexpected size %u", size);
     79e:	4a38      	ldr	r2, [pc, #224]	; (880 <CONFIG_ISR_STACK_SIZE+0x80>)
     7a0:	4938      	ldr	r1, [pc, #224]	; (884 <CONFIG_ISR_STACK_SIZE+0x84>)
     7a2:	4839      	ldr	r0, [pc, #228]	; (888 <CONFIG_ISR_STACK_SIZE+0x88>)
     7a4:	f240 2331 	movw	r3, #561	; 0x231
     7a8:	f007 fc72 	bl	8090 <assert_print>
     7ac:	4659      	mov	r1, fp
     7ae:	4837      	ldr	r0, [pc, #220]	; (88c <CONFIG_ISR_STACK_SIZE+0x8c>)
     7b0:	f007 fc6e 	bl	8090 <assert_print>
     7b4:	f240 2131 	movw	r1, #561	; 0x231
     7b8:	e797      	b.n	6ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x202>
	if (buf0 == NULL) {
     7ba:	b91d      	cbnz	r5, 7c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2dc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     7bc:	f1a6 0408 	sub.w	r4, r6, #8
     7c0:	1860      	adds	r0, r4, r1
     7c2:	e638      	b.n	436 <cbvprintf_package+0x32>
	if (rws_pos_en) {
     7c4:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
     7c6:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
     7ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     7ce:	b90b      	cbnz	r3, 7d4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ec>
     7d0:	4608      	mov	r0, r1
     7d2:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
     7d4:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
     7d8:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     7da:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     7dc:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     7e0:	f1ba 0f00 	cmp.w	sl, #0
     7e4:	d006      	beq.n	7f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30c>
     7e6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     7e8:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     7ec:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     7f0:	4562      	cmp	r2, ip
     7f2:	d109      	bne.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     7f4:	f10d 0820 	add.w	r8, sp, #32
     7f8:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     7fc:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
     800:	45c1      	cmp	r9, r8
     802:	d111      	bne.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
	return BUF_OFFSET;
     804:	1b60      	subs	r0, r4, r5
     806:	e616      	b.n	436 <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     808:	f810 1b01 	ldrb.w	r1, [r0], #1
     80c:	060b      	lsls	r3, r1, #24
     80e:	d508      	bpl.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
			if (BUF_OFFSET + 1 > len) {
     810:	eb04 080e 	add.w	r8, r4, lr
     814:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     816:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     81a:	f63f ae0a 	bhi.w	432 <cbvprintf_package+0x2e>
			*buf++ = pos;
     81e:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     822:	f10c 0c01 	add.w	ip, ip, #1
     826:	e7e3      	b.n	7f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x308>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     828:	f1ba 0f00 	cmp.w	sl, #0
     82c:	d003      	beq.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
     82e:	f998 2000 	ldrsb.w	r2, [r8]
     832:	2a00      	cmp	r2, #0
     834:	db1c      	blt.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
		if (rws_pos_en) {
     836:	9b01      	ldr	r3, [sp, #4]
     838:	b9eb      	cbnz	r3, 876 <CONFIG_ISR_STACK_SIZE+0x76>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     83a:	f898 2000 	ldrb.w	r2, [r8]
     83e:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     842:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     846:	4638      	mov	r0, r7
     848:	f007 fce5 	bl	8216 <strlen>
     84c:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     84e:	eb04 010b 	add.w	r1, r4, fp
     852:	4411      	add	r1, r2
     854:	42b1      	cmp	r1, r6
     856:	f63f adec 	bhi.w	432 <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
     85a:	f898 1000 	ldrb.w	r1, [r8]
     85e:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     862:	4639      	mov	r1, r7
     864:	4620      	mov	r0, r4
     866:	9202      	str	r2, [sp, #8]
     868:	f007 fce5 	bl	8236 <memcpy>
		buf += size;
     86c:	9a02      	ldr	r2, [sp, #8]
     86e:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     870:	f108 0801 	add.w	r8, r8, #1
     874:	e7c4      	b.n	800 <CONFIG_ISR_STACK_SIZE>
			size = 0;
     876:	2200      	movs	r2, #0
     878:	e7e9      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		return -EFAULT;
     87a:	f06f 000d 	mvn.w	r0, #13
     87e:	e5da      	b.n	436 <cbvprintf_package+0x32>
     880:	00008f15 	.word	0x00008f15
     884:	0000a6a7 	.word	0x0000a6a7
     888:	00008f43 	.word	0x00008f43
     88c:	00008f9b 	.word	0x00008f9b

00000890 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     890:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     892:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     896:	2b03      	cmp	r3, #3
{
     898:	b510      	push	{r4, lr}
     89a:	4604      	mov	r4, r0
	notify->result = res;
     89c:	6081      	str	r1, [r0, #8]
	switch (method) {
     89e:	d002      	beq.n	8a6 <sys_notify_finalize+0x16>
     8a0:	b12b      	cbz	r3, 8ae <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
     8a2:	2000      	movs	r0, #0
     8a4:	e000      	b.n	8a8 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     8a6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     8a8:	2300      	movs	r3, #0
     8aa:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     8ac:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
     8ae:	4a05      	ldr	r2, [pc, #20]	; (8c4 <sys_notify_finalize+0x34>)
     8b0:	4905      	ldr	r1, [pc, #20]	; (8c8 <sys_notify_finalize+0x38>)
     8b2:	4806      	ldr	r0, [pc, #24]	; (8cc <sys_notify_finalize+0x3c>)
     8b4:	2345      	movs	r3, #69	; 0x45
     8b6:	f007 fbeb 	bl	8090 <assert_print>
     8ba:	4802      	ldr	r0, [pc, #8]	; (8c4 <sys_notify_finalize+0x34>)
     8bc:	2145      	movs	r1, #69	; 0x45
     8be:	f007 fbe0 	bl	8082 <assert_post_action>
     8c2:	e7ee      	b.n	8a2 <sys_notify_finalize+0x12>
     8c4:	00008fc7 	.word	0x00008fc7
     8c8:	0000a6a7 	.word	0x0000a6a7
     8cc:	00008f43 	.word	0x00008f43

000008d0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     8d0:	4b01      	ldr	r3, [pc, #4]	; (8d8 <__printk_hook_install+0x8>)
     8d2:	6018      	str	r0, [r3, #0]
}
     8d4:	4770      	bx	lr
     8d6:	bf00      	nop
     8d8:	20000000 	.word	0x20000000

000008dc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8e0:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8e2:	072b      	lsls	r3, r5, #28
{
     8e4:	4604      	mov	r4, r0
     8e6:	4691      	mov	r9, r2
	if (processing) {
     8e8:	d469      	bmi.n	9be <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     8ea:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8ec:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     8f0:	f000 81ee 	beq.w	cd0 <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
     8f4:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
     8f6:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8fa:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     8fc:	f1b8 0f00 	cmp.w	r8, #0
     900:	da7d      	bge.n	9fe <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     902:	2200      	movs	r2, #0
		*clients = mgr->clients;
     904:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     906:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     90a:	e9c4 2200 	strd	r2, r2, [r4]
     90e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     912:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     914:	8ba3      	ldrh	r3, [r4, #28]
     916:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     91a:	4555      	cmp	r5, sl
     91c:	f04f 0700 	mov.w	r7, #0
     920:	f040 81a5 	bne.w	c6e <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     924:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
     928:	2e00      	cmp	r6, #0
     92a:	f000 80f2 	beq.w	b12 <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     92e:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
     932:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
     936:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     938:	4658      	mov	r0, fp
     93a:	f005 f803 	bl	5944 <z_spin_unlock_valid>
     93e:	b968      	cbnz	r0, 95c <process_event+0x80>
     940:	4a93      	ldr	r2, [pc, #588]	; (b90 <process_event+0x2b4>)
     942:	4994      	ldr	r1, [pc, #592]	; (b94 <process_event+0x2b8>)
     944:	4894      	ldr	r0, [pc, #592]	; (b98 <process_event+0x2bc>)
     946:	23b9      	movs	r3, #185	; 0xb9
     948:	f007 fba2 	bl	8090 <assert_print>
     94c:	4893      	ldr	r0, [pc, #588]	; (b9c <process_event+0x2c0>)
     94e:	4659      	mov	r1, fp
     950:	f007 fb9e 	bl	8090 <assert_print>
     954:	488e      	ldr	r0, [pc, #568]	; (b90 <process_event+0x2b4>)
     956:	21b9      	movs	r1, #185	; 0xb9
     958:	f007 fb93 	bl	8082 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     95c:	f389 8811 	msr	BASEPRI, r9
     960:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
     964:	f1ba 0f00 	cmp.w	sl, #0
     968:	f040 8188 	bne.w	c7c <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
     96c:	2e00      	cmp	r6, #0
     96e:	f040 819e 	bne.w	cae <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
     972:	b117      	cbz	r7, 97a <process_event+0x9e>
				transit(mgr, transition_complete);
     974:	498a      	ldr	r1, [pc, #552]	; (ba0 <process_event+0x2c4>)
     976:	4620      	mov	r0, r4
     978:	47b8      	blx	r7
	__asm__ volatile(
     97a:	f04f 0320 	mov.w	r3, #32
     97e:	f3ef 8911 	mrs	r9, BASEPRI
     982:	f383 8812 	msr	BASEPRI_MAX, r3
     986:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     98a:	4658      	mov	r0, fp
     98c:	f004 ffcc 	bl	5928 <z_spin_lock_valid>
     990:	b968      	cbnz	r0, 9ae <process_event+0xd2>
     992:	4a7f      	ldr	r2, [pc, #508]	; (b90 <process_event+0x2b4>)
     994:	4983      	ldr	r1, [pc, #524]	; (ba4 <process_event+0x2c8>)
     996:	4880      	ldr	r0, [pc, #512]	; (b98 <process_event+0x2bc>)
     998:	238e      	movs	r3, #142	; 0x8e
     99a:	f007 fb79 	bl	8090 <assert_print>
     99e:	4882      	ldr	r0, [pc, #520]	; (ba8 <process_event+0x2cc>)
     9a0:	4659      	mov	r1, fp
     9a2:	f007 fb75 	bl	8090 <assert_print>
     9a6:	487a      	ldr	r0, [pc, #488]	; (b90 <process_event+0x2b4>)
     9a8:	218e      	movs	r1, #142	; 0x8e
     9aa:	f007 fb6a 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
     9ae:	4658      	mov	r0, fp
     9b0:	f004 ffd8 	bl	5964 <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     9b4:	8ba3      	ldrh	r3, [r4, #28]
     9b6:	f023 0308 	bic.w	r3, r3, #8
     9ba:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
     9bc:	e05a      	b.n	a74 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
     9be:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     9c0:	bf0c      	ite	eq
     9c2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9c6:	f045 0520 	orrne.w	r5, r5, #32
     9ca:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     9cc:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     9ce:	4620      	mov	r0, r4
     9d0:	f004 ffb8 	bl	5944 <z_spin_unlock_valid>
     9d4:	b968      	cbnz	r0, 9f2 <process_event+0x116>
     9d6:	4a6e      	ldr	r2, [pc, #440]	; (b90 <process_event+0x2b4>)
     9d8:	496e      	ldr	r1, [pc, #440]	; (b94 <process_event+0x2b8>)
     9da:	486f      	ldr	r0, [pc, #444]	; (b98 <process_event+0x2bc>)
     9dc:	23b9      	movs	r3, #185	; 0xb9
     9de:	f007 fb57 	bl	8090 <assert_print>
     9e2:	486e      	ldr	r0, [pc, #440]	; (b9c <process_event+0x2c0>)
     9e4:	4621      	mov	r1, r4
     9e6:	f007 fb53 	bl	8090 <assert_print>
     9ea:	4869      	ldr	r0, [pc, #420]	; (b90 <process_event+0x2b4>)
     9ec:	21b9      	movs	r1, #185	; 0xb9
     9ee:	f007 fb48 	bl	8082 <assert_post_action>
	__asm__ volatile(
     9f2:	f389 8811 	msr	BASEPRI, r9
     9f6:	f3bf 8f6f 	isb	sy
}
     9fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     9fe:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     a02:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     a04:	2901      	cmp	r1, #1
     a06:	d820      	bhi.n	a4a <process_event+0x16e>
	list->head = NULL;
     a08:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
     a0a:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     a0c:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
     a0e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     a12:	d116      	bne.n	a42 <process_event+0x166>
		*clients = mgr->clients;
     a14:	4632      	mov	r2, r6
     a16:	e003      	b.n	a20 <process_event+0x144>
				mgr->refs += 1U;
     a18:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     a1a:	6812      	ldr	r2, [r2, #0]
     a1c:	3101      	adds	r1, #1
     a1e:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     a20:	2a00      	cmp	r2, #0
     a22:	d1f9      	bne.n	a18 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a24:	f023 0307 	bic.w	r3, r3, #7
     a28:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     a2c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     a2e:	4620      	mov	r0, r4
     a30:	f007 f9a8 	bl	7d84 <process_recheck>
     a34:	2800      	cmp	r0, #0
     a36:	f43f af6d 	beq.w	914 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a3a:	f042 0220 	orr.w	r2, r2, #32
     a3e:	83a2      	strh	r2, [r4, #28]
     a40:	e768      	b.n	914 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a42:	f023 0307 	bic.w	r3, r3, #7
     a46:	b29a      	uxth	r2, r3
}
     a48:	e7f0      	b.n	a2c <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
     a4a:	2a04      	cmp	r2, #4
     a4c:	d11e      	bne.n	a8c <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     a4e:	f023 0307 	bic.w	r3, r3, #7
     a52:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     a54:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     a56:	4620      	mov	r0, r4
     a58:	f007 f994 	bl	7d84 <process_recheck>
     a5c:	b110      	cbz	r0, a64 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a5e:	f042 0220 	orr.w	r2, r2, #32
     a62:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     a64:	8ba3      	ldrh	r3, [r4, #28]
     a66:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
     a6a:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
     a6c:	4555      	cmp	r5, sl
     a6e:	463e      	mov	r6, r7
     a70:	f040 80fd 	bne.w	c6e <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a74:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
     a78:	f01a 0f10 	tst.w	sl, #16
     a7c:	f000 811f 	beq.w	cbe <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a80:	f02a 0310 	bic.w	r3, sl, #16
     a84:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     a86:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
     a8a:	e734      	b.n	8f6 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
     a8c:	4a47      	ldr	r2, [pc, #284]	; (bac <process_event+0x2d0>)
     a8e:	4948      	ldr	r1, [pc, #288]	; (bb0 <process_event+0x2d4>)
     a90:	4841      	ldr	r0, [pc, #260]	; (b98 <process_event+0x2bc>)
     a92:	f240 131b 	movw	r3, #283	; 0x11b
     a96:	f007 fafb 	bl	8090 <assert_print>
     a9a:	4844      	ldr	r0, [pc, #272]	; (bac <process_event+0x2d0>)
     a9c:	f240 111b 	movw	r1, #283	; 0x11b
     aa0:	f007 faef 	bl	8082 <assert_post_action>
     aa4:	e7de      	b.n	a64 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     aa6:	b15d      	cbz	r5, ac0 <process_event+0x1e4>
     aa8:	4942      	ldr	r1, [pc, #264]	; (bb4 <process_event+0x2d8>)
     aaa:	483b      	ldr	r0, [pc, #236]	; (b98 <process_event+0x2bc>)
     aac:	4a3f      	ldr	r2, [pc, #252]	; (bac <process_event+0x2d0>)
     aae:	f44f 73ab 	mov.w	r3, #342	; 0x156
     ab2:	f007 faed 	bl	8090 <assert_print>
     ab6:	483d      	ldr	r0, [pc, #244]	; (bac <process_event+0x2d0>)
     ab8:	f44f 71ab 	mov.w	r1, #342	; 0x156
     abc:	f007 fae1 	bl	8082 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     ac0:	6823      	ldr	r3, [r4, #0]
     ac2:	b95b      	cbnz	r3, adc <process_event+0x200>
     ac4:	493c      	ldr	r1, [pc, #240]	; (bb8 <process_event+0x2dc>)
     ac6:	4834      	ldr	r0, [pc, #208]	; (b98 <process_event+0x2bc>)
     ac8:	4a38      	ldr	r2, [pc, #224]	; (bac <process_event+0x2d0>)
     aca:	f240 1357 	movw	r3, #343	; 0x157
     ace:	f007 fadf 	bl	8090 <assert_print>
     ad2:	4836      	ldr	r0, [pc, #216]	; (bac <process_event+0x2d0>)
     ad4:	f240 1157 	movw	r1, #343	; 0x157
     ad8:	f007 fad3 	bl	8082 <assert_post_action>
			transit = mgr->transitions->start;
     adc:	6923      	ldr	r3, [r4, #16]
     ade:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     ae0:	b95f      	cbnz	r7, afa <process_event+0x21e>
     ae2:	4936      	ldr	r1, [pc, #216]	; (bbc <process_event+0x2e0>)
     ae4:	482c      	ldr	r0, [pc, #176]	; (b98 <process_event+0x2bc>)
     ae6:	4a31      	ldr	r2, [pc, #196]	; (bac <process_event+0x2d0>)
     ae8:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     aec:	f007 fad0 	bl	8090 <assert_print>
     af0:	482e      	ldr	r0, [pc, #184]	; (bac <process_event+0x2d0>)
     af2:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     af6:	f007 fac4 	bl	8082 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     afa:	8ba3      	ldrh	r3, [r4, #28]
     afc:	f023 0307 	bic.w	r3, r3, #7
     b00:	f043 0306 	orr.w	r3, r3, #6
     b04:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
     b06:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     b08:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
     b0a:	f040 80ad 	bne.w	c68 <process_event+0x38c>
		res = 0;
     b0e:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     b12:	f04f 0a00 	mov.w	sl, #0
     b16:	4656      	mov	r6, sl
		    || (transit != NULL)) {
     b18:	2f00      	cmp	r7, #0
     b1a:	f47f af08 	bne.w	92e <process_event+0x52>
     b1e:	e7a9      	b.n	a74 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     b20:	2d02      	cmp	r5, #2
     b22:	d00b      	beq.n	b3c <process_event+0x260>
     b24:	4926      	ldr	r1, [pc, #152]	; (bc0 <process_event+0x2e4>)
     b26:	481c      	ldr	r0, [pc, #112]	; (b98 <process_event+0x2bc>)
     b28:	4a20      	ldr	r2, [pc, #128]	; (bac <process_event+0x2d0>)
     b2a:	f240 135d 	movw	r3, #349	; 0x15d
     b2e:	f007 faaf 	bl	8090 <assert_print>
     b32:	481e      	ldr	r0, [pc, #120]	; (bac <process_event+0x2d0>)
     b34:	f240 115d 	movw	r1, #349	; 0x15d
     b38:	f007 faa3 	bl	8082 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     b3c:	8be3      	ldrh	r3, [r4, #30]
     b3e:	b15b      	cbz	r3, b58 <process_event+0x27c>
     b40:	4920      	ldr	r1, [pc, #128]	; (bc4 <process_event+0x2e8>)
     b42:	4815      	ldr	r0, [pc, #84]	; (b98 <process_event+0x2bc>)
     b44:	4a19      	ldr	r2, [pc, #100]	; (bac <process_event+0x2d0>)
     b46:	f44f 73af 	mov.w	r3, #350	; 0x15e
     b4a:	f007 faa1 	bl	8090 <assert_print>
     b4e:	4817      	ldr	r0, [pc, #92]	; (bac <process_event+0x2d0>)
     b50:	f44f 71af 	mov.w	r1, #350	; 0x15e
     b54:	f007 fa95 	bl	8082 <assert_post_action>
			transit = mgr->transitions->stop;
     b58:	6923      	ldr	r3, [r4, #16]
     b5a:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     b5c:	b95f      	cbnz	r7, b76 <process_event+0x29a>
     b5e:	4917      	ldr	r1, [pc, #92]	; (bbc <process_event+0x2e0>)
     b60:	480d      	ldr	r0, [pc, #52]	; (b98 <process_event+0x2bc>)
     b62:	4a12      	ldr	r2, [pc, #72]	; (bac <process_event+0x2d0>)
     b64:	f240 1361 	movw	r3, #353	; 0x161
     b68:	f007 fa92 	bl	8090 <assert_print>
     b6c:	480f      	ldr	r0, [pc, #60]	; (bac <process_event+0x2d0>)
     b6e:	f240 1161 	movw	r1, #353	; 0x161
     b72:	f007 fa86 	bl	8082 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b76:	8ba3      	ldrh	r3, [r4, #28]
     b78:	f023 0307 	bic.w	r3, r3, #7
     b7c:	f043 0304 	orr.w	r3, r3, #4
     b80:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
     b82:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
     b84:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
     b86:	d0c2      	beq.n	b0e <process_event+0x232>
     b88:	2600      	movs	r6, #0
		res = 0;
     b8a:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     b8c:	2504      	movs	r5, #4
     b8e:	e06e      	b.n	c6e <process_event+0x392>
     b90:	0000908d 	.word	0x0000908d
     b94:	000090ba 	.word	0x000090ba
     b98:	00008f43 	.word	0x00008f43
     b9c:	000090d1 	.word	0x000090d1
     ba0:	00000d15 	.word	0x00000d15
     ba4:	000090e6 	.word	0x000090e6
     ba8:	000090fb 	.word	0x000090fb
     bac:	00008fea 	.word	0x00008fea
     bb0:	0000a6a7 	.word	0x0000a6a7
     bb4:	0000900c 	.word	0x0000900c
     bb8:	00009018 	.word	0x00009018
     bbc:	0000903b 	.word	0x0000903b
     bc0:	00009052 	.word	0x00009052
     bc4:	00009068 	.word	0x00009068
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     bc8:	2d01      	cmp	r5, #1
     bca:	d00b      	beq.n	be4 <process_event+0x308>
     bcc:	494b      	ldr	r1, [pc, #300]	; (cfc <process_event+0x420>)
     bce:	484c      	ldr	r0, [pc, #304]	; (d00 <process_event+0x424>)
     bd0:	4a4c      	ldr	r2, [pc, #304]	; (d04 <process_event+0x428>)
     bd2:	f44f 73b2 	mov.w	r3, #356	; 0x164
     bd6:	f007 fa5b 	bl	8090 <assert_print>
     bda:	484a      	ldr	r0, [pc, #296]	; (d04 <process_event+0x428>)
     bdc:	f44f 71b2 	mov.w	r1, #356	; 0x164
     be0:	f007 fa4f 	bl	8082 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     be4:	6823      	ldr	r3, [r4, #0]
     be6:	b95b      	cbnz	r3, c00 <process_event+0x324>
     be8:	4947      	ldr	r1, [pc, #284]	; (d08 <process_event+0x42c>)
     bea:	4845      	ldr	r0, [pc, #276]	; (d00 <process_event+0x424>)
     bec:	4a45      	ldr	r2, [pc, #276]	; (d04 <process_event+0x428>)
     bee:	f240 1365 	movw	r3, #357	; 0x165
     bf2:	f007 fa4d 	bl	8090 <assert_print>
     bf6:	4843      	ldr	r0, [pc, #268]	; (d04 <process_event+0x428>)
     bf8:	f240 1165 	movw	r1, #357	; 0x165
     bfc:	f007 fa41 	bl	8082 <assert_post_action>
			transit = mgr->transitions->reset;
     c00:	6923      	ldr	r3, [r4, #16]
     c02:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     c04:	b95f      	cbnz	r7, c1e <process_event+0x342>
     c06:	4941      	ldr	r1, [pc, #260]	; (d0c <process_event+0x430>)
     c08:	483d      	ldr	r0, [pc, #244]	; (d00 <process_event+0x424>)
     c0a:	4a3e      	ldr	r2, [pc, #248]	; (d04 <process_event+0x428>)
     c0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
     c10:	f007 fa3e 	bl	8090 <assert_print>
     c14:	483b      	ldr	r0, [pc, #236]	; (d04 <process_event+0x428>)
     c16:	f44f 71b4 	mov.w	r1, #360	; 0x168
     c1a:	f007 fa32 	bl	8082 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c1e:	8ba3      	ldrh	r3, [r4, #28]
     c20:	f023 0307 	bic.w	r3, r3, #7
     c24:	f043 0305 	orr.w	r3, r3, #5
     c28:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
     c2a:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
     c2c:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
     c2e:	f43f af6e 	beq.w	b0e <process_event+0x232>
     c32:	2600      	movs	r6, #0
		res = 0;
     c34:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c36:	2505      	movs	r5, #5
     c38:	e019      	b.n	c6e <process_event+0x392>
			__ASSERT_NO_MSG(false);
     c3a:	4a32      	ldr	r2, [pc, #200]	; (d04 <process_event+0x428>)
     c3c:	4934      	ldr	r1, [pc, #208]	; (d10 <process_event+0x434>)
     c3e:	4830      	ldr	r0, [pc, #192]	; (d00 <process_event+0x424>)
     c40:	f240 136b 	movw	r3, #363	; 0x16b
     c44:	f007 fa24 	bl	8090 <assert_print>
     c48:	482e      	ldr	r0, [pc, #184]	; (d04 <process_event+0x428>)
     c4a:	f240 116b 	movw	r1, #363	; 0x16b
     c4e:	f007 fa18 	bl	8082 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c52:	8ba3      	ldrh	r3, [r4, #28]
     c54:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     c58:	42aa      	cmp	r2, r5
     c5a:	f43f af0b 	beq.w	a74 <process_event+0x198>
     c5e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c60:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
     c62:	4637      	mov	r7, r6
		res = 0;
     c64:	46b0      	mov	r8, r6
     c66:	e002      	b.n	c6e <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
     c68:	2600      	movs	r6, #0
		res = 0;
     c6a:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c6c:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     c6e:	68a2      	ldr	r2, [r4, #8]
     c70:	2a00      	cmp	r2, #0
     c72:	f43f ae57 	beq.w	924 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     c76:	f04f 0a01 	mov.w	sl, #1
     c7a:	e658      	b.n	92e <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     c7c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c7e:	2900      	cmp	r1, #0
     c80:	f43f ae74 	beq.w	96c <process_event+0x90>
	return node->next;
     c84:	f8d1 9000 	ldr.w	r9, [r1]
     c88:	2900      	cmp	r1, #0
     c8a:	f43f ae6f 	beq.w	96c <process_event+0x90>
		mon->callback(mgr, mon, state, res);
     c8e:	f8d1 a004 	ldr.w	sl, [r1, #4]
     c92:	4643      	mov	r3, r8
     c94:	462a      	mov	r2, r5
     c96:	4620      	mov	r0, r4
     c98:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c9a:	f1b9 0f00 	cmp.w	r9, #0
     c9e:	d004      	beq.n	caa <process_event+0x3ce>
     ca0:	f8d9 3000 	ldr.w	r3, [r9]
     ca4:	4649      	mov	r1, r9
     ca6:	4699      	mov	r9, r3
     ca8:	e7ee      	b.n	c88 <process_event+0x3ac>
     caa:	464b      	mov	r3, r9
     cac:	e7fa      	b.n	ca4 <process_event+0x3c8>
     cae:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
     cb0:	4643      	mov	r3, r8
     cb2:	462a      	mov	r2, r5
     cb4:	4620      	mov	r0, r4
     cb6:	6836      	ldr	r6, [r6, #0]
     cb8:	f007 f890 	bl	7ddc <notify_one>
     cbc:	e656      	b.n	96c <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     cbe:	f01a 0f20 	tst.w	sl, #32
     cc2:	f43f ae83 	beq.w	9cc <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     cc6:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     cca:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     ccc:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
     cd0:	4620      	mov	r0, r4
     cd2:	f007 f857 	bl	7d84 <process_recheck>
		if (evt == EVT_NOP) {
     cd6:	2800      	cmp	r0, #0
     cd8:	f43f ae78 	beq.w	9cc <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
     cdc:	3801      	subs	r0, #1
     cde:	2804      	cmp	r0, #4
     ce0:	d8ab      	bhi.n	c3a <process_event+0x35e>
     ce2:	a301      	add	r3, pc, #4	; (adr r3, ce8 <process_event+0x40c>)
     ce4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     ce8:	000008f5 	.word	0x000008f5
     cec:	00000c3b 	.word	0x00000c3b
     cf0:	00000aa7 	.word	0x00000aa7
     cf4:	00000b21 	.word	0x00000b21
     cf8:	00000bc9 	.word	0x00000bc9
     cfc:	00009077 	.word	0x00009077
     d00:	00008f43 	.word	0x00008f43
     d04:	00008fea 	.word	0x00008fea
     d08:	00009018 	.word	0x00009018
     d0c:	0000903b 	.word	0x0000903b
     d10:	0000a6a7 	.word	0x0000a6a7

00000d14 <transition_complete>:
{
     d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d16:	4604      	mov	r4, r0
     d18:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     d1a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
     d1e:	f04f 0320 	mov.w	r3, #32
     d22:	f3ef 8711 	mrs	r7, BASEPRI
     d26:	f383 8812 	msr	BASEPRI_MAX, r3
     d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d2e:	4630      	mov	r0, r6
     d30:	f004 fdfa 	bl	5928 <z_spin_lock_valid>
     d34:	b968      	cbnz	r0, d52 <transition_complete+0x3e>
     d36:	4a0c      	ldr	r2, [pc, #48]	; (d68 <transition_complete+0x54>)
     d38:	490c      	ldr	r1, [pc, #48]	; (d6c <transition_complete+0x58>)
     d3a:	480d      	ldr	r0, [pc, #52]	; (d70 <transition_complete+0x5c>)
     d3c:	238e      	movs	r3, #142	; 0x8e
     d3e:	f007 f9a7 	bl	8090 <assert_print>
     d42:	480c      	ldr	r0, [pc, #48]	; (d74 <transition_complete+0x60>)
     d44:	4631      	mov	r1, r6
     d46:	f007 f9a3 	bl	8090 <assert_print>
     d4a:	4807      	ldr	r0, [pc, #28]	; (d68 <transition_complete+0x54>)
     d4c:	218e      	movs	r1, #142	; 0x8e
     d4e:	f007 f998 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
     d52:	4630      	mov	r0, r6
     d54:	f004 fe06 	bl	5964 <z_spin_lock_set_owner>
	mgr->last_res = res;
     d58:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     d5a:	463a      	mov	r2, r7
     d5c:	4620      	mov	r0, r4
     d5e:	2101      	movs	r1, #1
}
     d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     d64:	f7ff bdba 	b.w	8dc <process_event>
     d68:	0000908d 	.word	0x0000908d
     d6c:	000090e6 	.word	0x000090e6
     d70:	00008f43 	.word	0x00008f43
     d74:	000090fb 	.word	0x000090fb

00000d78 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d7c:	4604      	mov	r4, r0
     d7e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     d80:	f007 f81c 	bl	7dbc <validate_args>

	if (rv < 0) {
     d84:	1e05      	subs	r5, r0, #0
     d86:	db78      	blt.n	e7a <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     d88:	f104 0914 	add.w	r9, r4, #20
     d8c:	f04f 0320 	mov.w	r3, #32
     d90:	f3ef 8a11 	mrs	sl, BASEPRI
     d94:	f383 8812 	msr	BASEPRI_MAX, r3
     d98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d9c:	4648      	mov	r0, r9
     d9e:	f004 fdc3 	bl	5928 <z_spin_lock_valid>
     da2:	b968      	cbnz	r0, dc0 <onoff_request+0x48>
     da4:	4a39      	ldr	r2, [pc, #228]	; (e8c <onoff_request+0x114>)
     da6:	493a      	ldr	r1, [pc, #232]	; (e90 <onoff_request+0x118>)
     da8:	483a      	ldr	r0, [pc, #232]	; (e94 <onoff_request+0x11c>)
     daa:	238e      	movs	r3, #142	; 0x8e
     dac:	f007 f970 	bl	8090 <assert_print>
     db0:	4839      	ldr	r0, [pc, #228]	; (e98 <onoff_request+0x120>)
     db2:	4649      	mov	r1, r9
     db4:	f007 f96c 	bl	8090 <assert_print>
     db8:	4834      	ldr	r0, [pc, #208]	; (e8c <onoff_request+0x114>)
     dba:	218e      	movs	r1, #142	; 0x8e
     dbc:	f007 f961 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
     dc0:	4648      	mov	r0, r9
     dc2:	f004 fdcf 	bl	5964 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     dc6:	8be3      	ldrh	r3, [r4, #30]
     dc8:	8ba6      	ldrh	r6, [r4, #28]
     dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
     dce:	4293      	cmp	r3, r2
     dd0:	f006 0607 	and.w	r6, r6, #7
     dd4:	d054      	beq.n	e80 <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     dd6:	2e02      	cmp	r6, #2
     dd8:	d124      	bne.n	e24 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     dda:	3301      	adds	r3, #1
     ddc:	83e3      	strh	r3, [r4, #30]
	rv = state;
     dde:	4635      	mov	r5, r6
		notify = true;
     de0:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     de4:	4648      	mov	r0, r9
     de6:	f004 fdad 	bl	5944 <z_spin_unlock_valid>
     dea:	b968      	cbnz	r0, e08 <onoff_request+0x90>
     dec:	4a27      	ldr	r2, [pc, #156]	; (e8c <onoff_request+0x114>)
     dee:	492b      	ldr	r1, [pc, #172]	; (e9c <onoff_request+0x124>)
     df0:	4828      	ldr	r0, [pc, #160]	; (e94 <onoff_request+0x11c>)
     df2:	23b9      	movs	r3, #185	; 0xb9
     df4:	f007 f94c 	bl	8090 <assert_print>
     df8:	4829      	ldr	r0, [pc, #164]	; (ea0 <onoff_request+0x128>)
     dfa:	4649      	mov	r1, r9
     dfc:	f007 f948 	bl	8090 <assert_print>
     e00:	4822      	ldr	r0, [pc, #136]	; (e8c <onoff_request+0x114>)
     e02:	21b9      	movs	r1, #185	; 0xb9
     e04:	f007 f93d 	bl	8082 <assert_post_action>
	__asm__ volatile(
     e08:	f38a 8811 	msr	BASEPRI, sl
     e0c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     e10:	f1b8 0f00 	cmp.w	r8, #0
     e14:	d031      	beq.n	e7a <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
     e16:	2300      	movs	r3, #0
     e18:	4632      	mov	r2, r6
     e1a:	4639      	mov	r1, r7
     e1c:	4620      	mov	r0, r4
     e1e:	f006 ffdd 	bl	7ddc <notify_one>
     e22:	e02a      	b.n	e7a <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
     e24:	2e06      	cmp	r6, #6
     e26:	d80e      	bhi.n	e46 <onoff_request+0xce>
     e28:	e8df f006 	tbb	[pc, r6]
     e2c:	0d0d1904 	.word	0x0d0d1904
     e30:	2d04      	.short	0x2d04
     e32:	04          	.byte	0x04
     e33:	00          	.byte	0x00
	parent->next = child;
     e34:	2300      	movs	r3, #0
     e36:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     e38:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     e3a:	b9ab      	cbnz	r3, e68 <onoff_request+0xf0>
	list->head = node;
     e3c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     e40:	b1ae      	cbz	r6, e6e <onoff_request+0xf6>
	rv = state;
     e42:	4635      	mov	r5, r6
     e44:	e00d      	b.n	e62 <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     e46:	4917      	ldr	r1, [pc, #92]	; (ea4 <onoff_request+0x12c>)
     e48:	4812      	ldr	r0, [pc, #72]	; (e94 <onoff_request+0x11c>)
     e4a:	4a17      	ldr	r2, [pc, #92]	; (ea8 <onoff_request+0x130>)
     e4c:	f240 13c9 	movw	r3, #457	; 0x1c9
     e50:	f007 f91e 	bl	8090 <assert_print>
     e54:	4814      	ldr	r0, [pc, #80]	; (ea8 <onoff_request+0x130>)
     e56:	f240 11c9 	movw	r1, #457	; 0x1c9
     e5a:	f007 f912 	bl	8082 <assert_post_action>
		rv = -EIO;
     e5e:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
     e62:	f04f 0800 	mov.w	r8, #0
     e66:	e7bd      	b.n	de4 <onoff_request+0x6c>
	parent->next = child;
     e68:	601f      	str	r7, [r3, #0]
	list->tail = node;
     e6a:	6067      	str	r7, [r4, #4]
}
     e6c:	e7e8      	b.n	e40 <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
     e6e:	4652      	mov	r2, sl
     e70:	2102      	movs	r1, #2
     e72:	4620      	mov	r0, r4
     e74:	f7ff fd32 	bl	8dc <process_event>
     e78:	4635      	mov	r5, r6
		}
	}

	return rv;
}
     e7a:	4628      	mov	r0, r5
     e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
     e80:	f06f 050a 	mvn.w	r5, #10
     e84:	e7ed      	b.n	e62 <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
     e86:	f06f 0585 	mvn.w	r5, #133	; 0x85
     e8a:	e7ea      	b.n	e62 <onoff_request+0xea>
     e8c:	0000908d 	.word	0x0000908d
     e90:	000090e6 	.word	0x000090e6
     e94:	00008f43 	.word	0x00008f43
     e98:	000090fb 	.word	0x000090fb
     e9c:	000090ba 	.word	0x000090ba
     ea0:	000090d1 	.word	0x000090d1
     ea4:	00009077 	.word	0x00009077
     ea8:	00008fea 	.word	0x00008fea

00000eac <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
     eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     eb0:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
     eb4:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
     eb8:	6806      	ldr	r6, [r0, #0]
{
     eba:	460f      	mov	r7, r1
     ebc:	4614      	mov	r4, r2
	if (align != rew) {
     ebe:	d011      	beq.n	ee4 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
     ec0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     ec4:	ea13 0f09 	tst.w	r3, r9
     ec8:	d113      	bne.n	ef2 <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
     eca:	427b      	negs	r3, r7
     ecc:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
     ece:	2b04      	cmp	r3, #4
     ed0:	461a      	mov	r2, r3
     ed2:	464f      	mov	r7, r9
     ed4:	bf28      	it	cs
     ed6:	2204      	movcs	r2, #4
	rew = align & -align;
     ed8:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
     eda:	b9e4      	cbnz	r4, f16 <sys_heap_aligned_alloc+0x6a>
		return NULL;
     edc:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
     ede:	4628      	mov	r0, r5
     ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
     ee4:	2904      	cmp	r1, #4
     ee6:	d814      	bhi.n	f12 <sys_heap_aligned_alloc+0x66>
}
     ee8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
     eec:	4611      	mov	r1, r2
     eee:	f007 b842 	b.w	7f76 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
     ef2:	4a2c      	ldr	r2, [pc, #176]	; (fa4 <sys_heap_aligned_alloc+0xf8>)
     ef4:	492c      	ldr	r1, [pc, #176]	; (fa8 <sys_heap_aligned_alloc+0xfc>)
     ef6:	482d      	ldr	r0, [pc, #180]	; (fac <sys_heap_aligned_alloc+0x100>)
     ef8:	f44f 73a0 	mov.w	r3, #320	; 0x140
     efc:	f007 f8c8 	bl	8090 <assert_print>
     f00:	482b      	ldr	r0, [pc, #172]	; (fb0 <sys_heap_aligned_alloc+0x104>)
     f02:	f007 f8c5 	bl	8090 <assert_print>
     f06:	4827      	ldr	r0, [pc, #156]	; (fa4 <sys_heap_aligned_alloc+0xf8>)
     f08:	f44f 71a0 	mov.w	r1, #320	; 0x140
     f0c:	f007 f8b9 	bl	8082 <assert_post_action>
     f10:	e7db      	b.n	eca <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
     f12:	2204      	movs	r2, #4
     f14:	e7e1      	b.n	eda <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
     f16:	68b3      	ldr	r3, [r6, #8]
     f18:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
     f1c:	d9de      	bls.n	edc <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     f1e:	f104 010b 	add.w	r1, r4, #11
     f22:	4439      	add	r1, r7
     f24:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
     f26:	08c9      	lsrs	r1, r1, #3
     f28:	4630      	mov	r0, r6
     f2a:	f006 ffd3 	bl	7ed4 <alloc_chunk>
	if (c0 == 0) {
     f2e:	4680      	mov	r8, r0
     f30:	2800      	cmp	r0, #0
     f32:	d0d3      	beq.n	edc <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
     f34:	f109 0504 	add.w	r5, r9, #4
     f38:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
     f3c:	1e7b      	subs	r3, r7, #1
     f3e:	4435      	add	r5, r6
     f40:	441d      	add	r5, r3
     f42:	427f      	negs	r7, r7
     f44:	403d      	ands	r5, r7
     f46:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
     f4a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
     f4c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
     f4e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
     f50:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
     f52:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
     f56:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
     f58:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
     f5c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
     f60:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
     f64:	d208      	bcs.n	f78 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
     f66:	4601      	mov	r1, r0
     f68:	463a      	mov	r2, r7
     f6a:	4630      	mov	r0, r6
     f6c:	f006 ffe9 	bl	7f42 <split_chunks>
		free_list_add(h, c0);
     f70:	4641      	mov	r1, r8
     f72:	4630      	mov	r0, r6
     f74:	f006 ff6a 	bl	7e4c <free_list_add>
	return c + chunk_size(h, c);
     f78:	4639      	mov	r1, r7
     f7a:	4630      	mov	r0, r6
     f7c:	f006 ff61 	bl	7e42 <chunk_size>
     f80:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
     f82:	4284      	cmp	r4, r0
     f84:	d207      	bcs.n	f96 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
     f86:	4630      	mov	r0, r6
     f88:	4622      	mov	r2, r4
     f8a:	f006 ffda 	bl	7f42 <split_chunks>
		free_list_add(h, c_end);
     f8e:	4621      	mov	r1, r4
     f90:	4630      	mov	r0, r6
     f92:	f006 ff5b 	bl	7e4c <free_list_add>
	void *cmem = &buf[c];
     f96:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     f9a:	8873      	ldrh	r3, [r6, #2]
     f9c:	f043 0301 	orr.w	r3, r3, #1
     fa0:	8073      	strh	r3, [r6, #2]
     fa2:	e79c      	b.n	ede <sys_heap_aligned_alloc+0x32>
     fa4:	00009113 	.word	0x00009113
     fa8:	000091df 	.word	0x000091df
     fac:	00008f43 	.word	0x00008f43
     fb0:	000091fa 	.word	0x000091fa

00000fb4 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     fb4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
     fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fbc:	4604      	mov	r4, r0
     fbe:	460e      	mov	r6, r1
     fc0:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     fc2:	d36c      	bcc.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
     fc4:	493d      	ldr	r1, [pc, #244]	; (10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>)
     fc6:	4a3e      	ldr	r2, [pc, #248]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     fc8:	483e      	ldr	r0, [pc, #248]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
     fca:	f240 13e3 	movw	r3, #483	; 0x1e3
     fce:	f007 f85f 	bl	8090 <assert_print>
     fd2:	483d      	ldr	r0, [pc, #244]	; (10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>)
     fd4:	f007 f85c 	bl	8090 <assert_print>
     fd8:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     fdc:	4838      	ldr	r0, [pc, #224]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     fde:	f007 f850 	bl	8082 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
     fe2:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     fe4:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     fe6:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     fe8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     fec:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     ff0:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     ff2:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     ff4:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     ff8:	d80e      	bhi.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     ffa:	4934      	ldr	r1, [pc, #208]	; (10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>)
     ffc:	4a30      	ldr	r2, [pc, #192]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     ffe:	4831      	ldr	r0, [pc, #196]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
    1000:	f240 13f3 	movw	r3, #499	; 0x1f3
    1004:	f007 f844 	bl	8090 <assert_print>
    1008:	4831      	ldr	r0, [pc, #196]	; (10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    100a:	f007 f841 	bl	8090 <assert_print>
    100e:	482c      	ldr	r0, [pc, #176]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    1010:	f240 11f3 	movw	r1, #499	; 0x1f3
    1014:	f007 f835 	bl	8082 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1018:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    101a:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    101e:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1022:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    1026:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1028:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    102a:	2300      	movs	r3, #0
    102c:	08e4      	lsrs	r4, r4, #3
    102e:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1030:	1c63      	adds	r3, r4, #1
    1032:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    1034:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1036:	d90e      	bls.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1038:	4926      	ldr	r1, [pc, #152]	; (10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>)
    103a:	4a21      	ldr	r2, [pc, #132]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    103c:	4821      	ldr	r0, [pc, #132]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
    103e:	f44f 7301 	mov.w	r3, #516	; 0x204
    1042:	f007 f825 	bl	8090 <assert_print>
    1046:	4822      	ldr	r0, [pc, #136]	; (10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    1048:	f007 f822 	bl	8090 <assert_print>
    104c:	481c      	ldr	r0, [pc, #112]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    104e:	f44f 7101 	mov.w	r1, #516	; 0x204
    1052:	f007 f816 	bl	8082 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    1056:	f105 030c 	add.w	r3, r5, #12
    105a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    105e:	2200      	movs	r2, #0
    1060:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    1064:	4543      	cmp	r3, r8
    1066:	d1fb      	bne.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1068:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    106a:	f043 0301 	orr.w	r3, r3, #1
    106e:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    1070:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1074:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1076:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    1078:	802a      	strh	r2, [r5, #0]
    107a:	8048      	strh	r0, [r1, #2]
    107c:	19a9      	adds	r1, r5, r6
    107e:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    1082:	804a      	strh	r2, [r1, #2]
    1084:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    1086:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    108a:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    108c:	885a      	ldrh	r2, [r3, #2]
    108e:	f042 0201 	orr.w	r2, r2, #1
    1092:	4628      	mov	r0, r5
    1094:	805a      	strh	r2, [r3, #2]
}
    1096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    109a:	f006 bed7 	b.w	7e4c <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    109e:	2a04      	cmp	r2, #4
    10a0:	d89f      	bhi.n	fe2 <sys_heap_init+0x2e>
    10a2:	490d      	ldr	r1, [pc, #52]	; (10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
    10a4:	4a06      	ldr	r2, [pc, #24]	; (10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    10a6:	4807      	ldr	r0, [pc, #28]	; (10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>)
    10a8:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    10ac:	f006 fff0 	bl	8090 <assert_print>
    10b0:	4807      	ldr	r0, [pc, #28]	; (10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    10b2:	f006 ffed 	bl	8090 <assert_print>
    10b6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    10ba:	e78f      	b.n	fdc <sys_heap_init+0x28>
    10bc:	00009217 	.word	0x00009217
    10c0:	00009113 	.word	0x00009113
    10c4:	00008f43 	.word	0x00008f43
    10c8:	0000922d 	.word	0x0000922d
    10cc:	0000927e 	.word	0x0000927e
    10d0:	00009265 	.word	0x00009265
    10d4:	000092a7 	.word	0x000092a7
    10d8:	00009244 	.word	0x00009244

000010dc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    10dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10e0:	4681      	mov	r9, r0
    10e2:	b095      	sub	sp, #84	; 0x54
    10e4:	468b      	mov	fp, r1
    10e6:	4617      	mov	r7, r2
    10e8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    10ea:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    10ec:	7838      	ldrb	r0, [r7, #0]
    10ee:	b908      	cbnz	r0, 10f4 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    10f0:	4628      	mov	r0, r5
    10f2:	e358      	b.n	17a6 <cbvprintf+0x6ca>
			OUTC(*fp++);
    10f4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    10f6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    10f8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    10fa:	d006      	beq.n	110a <cbvprintf+0x2e>
			OUTC('%');
    10fc:	4659      	mov	r1, fp
    10fe:	47c8      	blx	r9
    1100:	2800      	cmp	r0, #0
    1102:	f2c0 8350 	blt.w	17a6 <cbvprintf+0x6ca>
    1106:	3501      	adds	r5, #1
		if (bps == NULL) {
    1108:	e204      	b.n	1514 <cbvprintf+0x438>
		} state = {
    110a:	2218      	movs	r2, #24
    110c:	2100      	movs	r1, #0
    110e:	a80e      	add	r0, sp, #56	; 0x38
    1110:	f007 f89c 	bl	824c <memset>
	if (*sp == '%') {
    1114:	787b      	ldrb	r3, [r7, #1]
    1116:	2b25      	cmp	r3, #37	; 0x25
    1118:	d07d      	beq.n	1216 <cbvprintf+0x13a>
    111a:	2300      	movs	r3, #0
    111c:	1c78      	adds	r0, r7, #1
    111e:	4698      	mov	r8, r3
    1120:	469e      	mov	lr, r3
    1122:	469c      	mov	ip, r3
    1124:	461e      	mov	r6, r3
    1126:	4601      	mov	r1, r0
		switch (*sp) {
    1128:	f810 2b01 	ldrb.w	r2, [r0], #1
    112c:	2a2b      	cmp	r2, #43	; 0x2b
    112e:	f000 80a1 	beq.w	1274 <cbvprintf+0x198>
    1132:	f200 8098 	bhi.w	1266 <cbvprintf+0x18a>
    1136:	2a20      	cmp	r2, #32
    1138:	f000 809f 	beq.w	127a <cbvprintf+0x19e>
    113c:	2a23      	cmp	r2, #35	; 0x23
    113e:	f000 809f 	beq.w	1280 <cbvprintf+0x1a4>
    1142:	b12b      	cbz	r3, 1150 <cbvprintf+0x74>
    1144:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    114c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1150:	f1b8 0f00 	cmp.w	r8, #0
    1154:	d005      	beq.n	1162 <cbvprintf+0x86>
    1156:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    115a:	f043 0320 	orr.w	r3, r3, #32
    115e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1162:	f1be 0f00 	cmp.w	lr, #0
    1166:	d005      	beq.n	1174 <cbvprintf+0x98>
    1168:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    116c:	f043 0310 	orr.w	r3, r3, #16
    1170:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1174:	f1bc 0f00 	cmp.w	ip, #0
    1178:	d005      	beq.n	1186 <cbvprintf+0xaa>
    117a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    117e:	f043 0308 	orr.w	r3, r3, #8
    1182:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1186:	b12e      	cbz	r6, 1194 <cbvprintf+0xb8>
    1188:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    118c:	f043 0304 	orr.w	r3, r3, #4
    1190:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1194:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1198:	f003 0044 	and.w	r0, r3, #68	; 0x44
    119c:	2844      	cmp	r0, #68	; 0x44
    119e:	d103      	bne.n	11a8 <cbvprintf+0xcc>
		conv->flag_zero = false;
    11a0:	f36f 1386 	bfc	r3, #6, #1
    11a4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    11a8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    11ac:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    11ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    11b2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    11b6:	d17f      	bne.n	12b8 <cbvprintf+0x1dc>
		conv->width_star = true;
    11b8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11bc:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    11c0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    11c2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    11c6:	781a      	ldrb	r2, [r3, #0]
    11c8:	2a2e      	cmp	r2, #46	; 0x2e
    11ca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11ce:	bf0c      	ite	eq
    11d0:	2101      	moveq	r1, #1
    11d2:	2100      	movne	r1, #0
    11d4:	f361 0241 	bfi	r2, r1, #1, #1
    11d8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    11dc:	d178      	bne.n	12d0 <cbvprintf+0x1f4>
	if (*sp == '*') {
    11de:	785a      	ldrb	r2, [r3, #1]
    11e0:	2a2a      	cmp	r2, #42	; 0x2a
    11e2:	d06e      	beq.n	12c2 <cbvprintf+0x1e6>
	++sp;
    11e4:	3301      	adds	r3, #1
	size_t val = 0;
    11e6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    11e8:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    11ec:	4619      	mov	r1, r3
    11ee:	f811 0b01 	ldrb.w	r0, [r1], #1
    11f2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    11f6:	2e09      	cmp	r6, #9
    11f8:	f240 8095 	bls.w	1326 <cbvprintf+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    11fc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1200:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1202:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1206:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    120a:	460a      	mov	r2, r1
    120c:	f360 0241 	bfi	r2, r0, #1, #1
    1210:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1214:	e05c      	b.n	12d0 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    1216:	1cba      	adds	r2, r7, #2
    1218:	9203      	str	r2, [sp, #12]
    121a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    121e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1222:	07da      	lsls	r2, r3, #31
    1224:	f140 812e 	bpl.w	1484 <cbvprintf+0x3a8>
			width = va_arg(ap, int);
    1228:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    122c:	f1b8 0f00 	cmp.w	r8, #0
    1230:	da07      	bge.n	1242 <cbvprintf+0x166>
				conv->flag_dash = true;
    1232:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1236:	f042 0204 	orr.w	r2, r2, #4
    123a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    123e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1242:	075e      	lsls	r6, r3, #29
    1244:	f140 8127 	bpl.w	1496 <cbvprintf+0x3ba>
			int arg = va_arg(ap, int);
    1248:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    124c:	f1ba 0f00 	cmp.w	sl, #0
    1250:	f280 8126 	bge.w	14a0 <cbvprintf+0x3c4>
				conv->prec_present = false;
    1254:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1258:	f36f 0341 	bfc	r3, #1, #1
    125c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1260:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1264:	e11c      	b.n	14a0 <cbvprintf+0x3c4>
		switch (*sp) {
    1266:	2a2d      	cmp	r2, #45	; 0x2d
    1268:	d00d      	beq.n	1286 <cbvprintf+0x1aa>
    126a:	2a30      	cmp	r2, #48	; 0x30
    126c:	f47f af69 	bne.w	1142 <cbvprintf+0x66>
    1270:	2301      	movs	r3, #1
	} while (loop);
    1272:	e758      	b.n	1126 <cbvprintf+0x4a>
		switch (*sp) {
    1274:	f04f 0c01 	mov.w	ip, #1
    1278:	e755      	b.n	1126 <cbvprintf+0x4a>
    127a:	f04f 0e01 	mov.w	lr, #1
    127e:	e752      	b.n	1126 <cbvprintf+0x4a>
    1280:	f04f 0801 	mov.w	r8, #1
    1284:	e74f      	b.n	1126 <cbvprintf+0x4a>
    1286:	2601      	movs	r6, #1
    1288:	e74d      	b.n	1126 <cbvprintf+0x4a>
		val = 10U * val + *sp++ - '0';
    128a:	fb0e 6202 	mla	r2, lr, r2, r6
    128e:	3a30      	subs	r2, #48	; 0x30
    1290:	4603      	mov	r3, r0
    1292:	4618      	mov	r0, r3
    1294:	f810 6b01 	ldrb.w	r6, [r0], #1
    1298:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    129c:	f1bc 0f09 	cmp.w	ip, #9
    12a0:	d9f3      	bls.n	128a <cbvprintf+0x1ae>
	if (sp != wp) {
    12a2:	4299      	cmp	r1, r3
    12a4:	d08f      	beq.n	11c6 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    12a6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    12aa:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    12ac:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    12ae:	f362 0141 	bfi	r1, r2, #1, #1
    12b2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    12b6:	e786      	b.n	11c6 <cbvprintf+0xea>
    12b8:	460b      	mov	r3, r1
	size_t val = 0;
    12ba:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    12bc:	f04f 0e0a 	mov.w	lr, #10
    12c0:	e7e7      	b.n	1292 <cbvprintf+0x1b6>
		conv->prec_star = true;
    12c2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    12c6:	f042 0204 	orr.w	r2, r2, #4
    12ca:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    12ce:	3302      	adds	r3, #2
	switch (*sp) {
    12d0:	781a      	ldrb	r2, [r3, #0]
    12d2:	2a6c      	cmp	r2, #108	; 0x6c
    12d4:	d047      	beq.n	1366 <cbvprintf+0x28a>
    12d6:	d82b      	bhi.n	1330 <cbvprintf+0x254>
    12d8:	2a68      	cmp	r2, #104	; 0x68
    12da:	d031      	beq.n	1340 <cbvprintf+0x264>
    12dc:	2a6a      	cmp	r2, #106	; 0x6a
    12de:	d04b      	beq.n	1378 <cbvprintf+0x29c>
    12e0:	2a4c      	cmp	r2, #76	; 0x4c
    12e2:	d051      	beq.n	1388 <cbvprintf+0x2ac>
	conv->specifier = *sp++;
    12e4:	461a      	mov	r2, r3
    12e6:	f812 3b01 	ldrb.w	r3, [r2], #1
    12ea:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    12ec:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    12ee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    12f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    12f6:	f200 80be 	bhi.w	1476 <cbvprintf+0x39a>
    12fa:	2b6d      	cmp	r3, #109	; 0x6d
    12fc:	d851      	bhi.n	13a2 <cbvprintf+0x2c6>
    12fe:	2b69      	cmp	r3, #105	; 0x69
    1300:	f200 80b9 	bhi.w	1476 <cbvprintf+0x39a>
    1304:	2b57      	cmp	r3, #87	; 0x57
    1306:	d867      	bhi.n	13d8 <cbvprintf+0x2fc>
    1308:	2b41      	cmp	r3, #65	; 0x41
    130a:	d003      	beq.n	1314 <cbvprintf+0x238>
    130c:	3b45      	subs	r3, #69	; 0x45
    130e:	2b02      	cmp	r3, #2
    1310:	f200 80b1 	bhi.w	1476 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    1314:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1318:	2204      	movs	r2, #4
    131a:	f362 0302 	bfi	r3, r2, #0, #3
    131e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1322:	2301      	movs	r3, #1
			break;
    1324:	e073      	b.n	140e <cbvprintf+0x332>
		val = 10U * val + *sp++ - '0';
    1326:	fb0c 0202 	mla	r2, ip, r2, r0
    132a:	3a30      	subs	r2, #48	; 0x30
    132c:	460b      	mov	r3, r1
    132e:	e75d      	b.n	11ec <cbvprintf+0x110>
	switch (*sp) {
    1330:	2a74      	cmp	r2, #116	; 0x74
    1332:	d025      	beq.n	1380 <cbvprintf+0x2a4>
    1334:	2a7a      	cmp	r2, #122	; 0x7a
    1336:	d1d5      	bne.n	12e4 <cbvprintf+0x208>
		conv->length_mod = LENGTH_Z;
    1338:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    133c:	2106      	movs	r1, #6
    133e:	e00c      	b.n	135a <cbvprintf+0x27e>
		if (*++sp == 'h') {
    1340:	785a      	ldrb	r2, [r3, #1]
    1342:	2a68      	cmp	r2, #104	; 0x68
    1344:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1348:	d106      	bne.n	1358 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_HH;
    134a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    134c:	f361 02c6 	bfi	r2, r1, #3, #4
    1350:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1354:	3302      	adds	r3, #2
    1356:	e7c5      	b.n	12e4 <cbvprintf+0x208>
			conv->length_mod = LENGTH_H;
    1358:	2102      	movs	r1, #2
    135a:	f361 02c6 	bfi	r2, r1, #3, #4
    135e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1362:	3301      	adds	r3, #1
    1364:	e7be      	b.n	12e4 <cbvprintf+0x208>
		if (*++sp == 'l') {
    1366:	785a      	ldrb	r2, [r3, #1]
    1368:	2a6c      	cmp	r2, #108	; 0x6c
    136a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    136e:	d101      	bne.n	1374 <cbvprintf+0x298>
			conv->length_mod = LENGTH_LL;
    1370:	2104      	movs	r1, #4
    1372:	e7eb      	b.n	134c <cbvprintf+0x270>
			conv->length_mod = LENGTH_L;
    1374:	2103      	movs	r1, #3
    1376:	e7f0      	b.n	135a <cbvprintf+0x27e>
		conv->length_mod = LENGTH_J;
    1378:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    137c:	2105      	movs	r1, #5
    137e:	e7ec      	b.n	135a <cbvprintf+0x27e>
		conv->length_mod = LENGTH_T;
    1380:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1384:	2107      	movs	r1, #7
    1386:	e7e8      	b.n	135a <cbvprintf+0x27e>
		conv->unsupported = true;
    1388:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    138c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1390:	f022 0202 	bic.w	r2, r2, #2
    1394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1398:	f042 0202 	orr.w	r2, r2, #2
    139c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    13a0:	e7df      	b.n	1362 <cbvprintf+0x286>
	switch (conv->specifier) {
    13a2:	3b6e      	subs	r3, #110	; 0x6e
    13a4:	b2d9      	uxtb	r1, r3
    13a6:	2301      	movs	r3, #1
    13a8:	408b      	lsls	r3, r1
    13aa:	f240 4182 	movw	r1, #1154	; 0x482
    13ae:	420b      	tst	r3, r1
    13b0:	d137      	bne.n	1422 <cbvprintf+0x346>
    13b2:	f013 0f24 	tst.w	r3, #36	; 0x24
    13b6:	d151      	bne.n	145c <cbvprintf+0x380>
    13b8:	07d8      	lsls	r0, r3, #31
    13ba:	d55c      	bpl.n	1476 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    13bc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    13c0:	2103      	movs	r1, #3
    13c2:	f361 0302 	bfi	r3, r1, #0, #3
    13c6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    13ca:	f002 0378 	and.w	r3, r2, #120	; 0x78
    13ce:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    13d2:	424b      	negs	r3, r1
    13d4:	414b      	adcs	r3, r1
    13d6:	e01a      	b.n	140e <cbvprintf+0x332>
	switch (conv->specifier) {
    13d8:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    13dc:	b2c9      	uxtb	r1, r1
    13de:	2001      	movs	r0, #1
    13e0:	fa00 f101 	lsl.w	r1, r0, r1
    13e4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    13e8:	d194      	bne.n	1314 <cbvprintf+0x238>
    13ea:	f640 0601 	movw	r6, #2049	; 0x801
    13ee:	4231      	tst	r1, r6
    13f0:	d11d      	bne.n	142e <cbvprintf+0x352>
    13f2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    13f6:	d03e      	beq.n	1476 <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    13f8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    13fc:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1400:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1404:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1406:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    140a:	d034      	beq.n	1476 <cbvprintf+0x39a>
	bool unsupported = false;
    140c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    140e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1412:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1416:	430b      	orrs	r3, r1
    1418:	f363 0241 	bfi	r2, r3, #1, #1
    141c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1420:	e6fd      	b.n	121e <cbvprintf+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    1422:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1426:	2102      	movs	r1, #2
    1428:	f361 0302 	bfi	r3, r1, #0, #3
    142c:	e7e8      	b.n	1400 <cbvprintf+0x324>
    142e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1432:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1434:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1438:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    143c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    143e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1442:	bf02      	ittt	eq
    1444:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1448:	f041 0101 	orreq.w	r1, r1, #1
    144c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1450:	2b63      	cmp	r3, #99	; 0x63
    1452:	d1db      	bne.n	140c <cbvprintf+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1454:	1e13      	subs	r3, r2, #0
    1456:	bf18      	it	ne
    1458:	2301      	movne	r3, #1
    145a:	e7d8      	b.n	140e <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    145c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1460:	2103      	movs	r1, #3
    1462:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1466:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    146a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    146e:	bf14      	ite	ne
    1470:	2301      	movne	r3, #1
    1472:	2300      	moveq	r3, #0
    1474:	e7cb      	b.n	140e <cbvprintf+0x332>
		conv->invalid = true;
    1476:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    147a:	f043 0301 	orr.w	r3, r3, #1
    147e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1482:	e7c3      	b.n	140c <cbvprintf+0x330>
		} else if (conv->width_present) {
    1484:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1488:	2a00      	cmp	r2, #0
			width = conv->width_value;
    148a:	bfb4      	ite	lt
    148c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1490:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    1494:	e6d5      	b.n	1242 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    1496:	0798      	lsls	r0, r3, #30
    1498:	f57f aee2 	bpl.w	1260 <cbvprintf+0x184>
			precision = conv->prec_value;
    149c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    14a0:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    14a4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    14a6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    14aa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    14ae:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    14b2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    14b4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    14b8:	d133      	bne.n	1522 <cbvprintf+0x446>
			switch (length_mod) {
    14ba:	1ecb      	subs	r3, r1, #3
    14bc:	2b04      	cmp	r3, #4
    14be:	d804      	bhi.n	14ca <cbvprintf+0x3ee>
    14c0:	e8df f003 	tbb	[pc, r3]
    14c4:	10464610 	.word	0x10464610
    14c8:	10          	.byte	0x10
    14c9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    14ca:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    14cc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    14ce:	ea4f 72e3 	mov.w	r2, r3, asr #31
    14d2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    14d6:	d10b      	bne.n	14f0 <cbvprintf+0x414>
				value->sint = (char)value->sint;
    14d8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    14dc:	930e      	str	r3, [sp, #56]	; 0x38
    14de:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    14e0:	930f      	str	r3, [sp, #60]	; 0x3c
    14e2:	e007      	b.n	14f4 <cbvprintf+0x418>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    14e4:	f854 3b04 	ldr.w	r3, [r4], #4
    14e8:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    14ea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    14ee:	e002      	b.n	14f6 <cbvprintf+0x41a>
			} else if (length_mod == LENGTH_H) {
    14f0:	2902      	cmp	r1, #2
    14f2:	d011      	beq.n	1518 <cbvprintf+0x43c>
				value->sint = va_arg(ap, int);
    14f4:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    14f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    14fa:	f013 0603 	ands.w	r6, r3, #3
    14fe:	d047      	beq.n	1590 <cbvprintf+0x4b4>
			OUTS(sp, fp);
    1500:	9b03      	ldr	r3, [sp, #12]
    1502:	463a      	mov	r2, r7
    1504:	4659      	mov	r1, fp
    1506:	4648      	mov	r0, r9
    1508:	f006 fda4 	bl	8054 <outs>
    150c:	2800      	cmp	r0, #0
    150e:	f2c0 814a 	blt.w	17a6 <cbvprintf+0x6ca>
    1512:	4405      	add	r5, r0
			continue;
    1514:	9f03      	ldr	r7, [sp, #12]
    1516:	e5e9      	b.n	10ec <cbvprintf+0x10>
				value->sint = (short)value->sint;
    1518:	b21a      	sxth	r2, r3
    151a:	920e      	str	r2, [sp, #56]	; 0x38
    151c:	f343 33c0 	sbfx	r3, r3, #15, #1
    1520:	e7de      	b.n	14e0 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1522:	2b02      	cmp	r3, #2
    1524:	d124      	bne.n	1570 <cbvprintf+0x494>
			switch (length_mod) {
    1526:	1ecb      	subs	r3, r1, #3
    1528:	2b04      	cmp	r3, #4
    152a:	d804      	bhi.n	1536 <cbvprintf+0x45a>
    152c:	e8df f003 	tbb	[pc, r3]
    1530:	18101018 	.word	0x18101018
    1534:	18          	.byte	0x18
    1535:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1536:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1538:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    153c:	f04f 0200 	mov.w	r2, #0
    1540:	d014      	beq.n	156c <cbvprintf+0x490>
			} else if (length_mod == LENGTH_H) {
    1542:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1544:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1548:	d1d5      	bne.n	14f6 <cbvprintf+0x41a>
				value->uint = (unsigned short)value->uint;
    154a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    154c:	930e      	str	r3, [sp, #56]	; 0x38
    154e:	e7d2      	b.n	14f6 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap,
    1550:	3407      	adds	r4, #7
    1552:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1556:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    155a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    155e:	e7ca      	b.n	14f6 <cbvprintf+0x41a>
					(uint_value_type)va_arg(ap, size_t);
    1560:	f854 3b04 	ldr.w	r3, [r4], #4
    1564:	930e      	str	r3, [sp, #56]	; 0x38
    1566:	2300      	movs	r3, #0
    1568:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    156a:	e7c4      	b.n	14f6 <cbvprintf+0x41a>
				value->uint = (unsigned char)value->uint;
    156c:	b2db      	uxtb	r3, r3
    156e:	e7bc      	b.n	14ea <cbvprintf+0x40e>
		} else if (specifier_cat == SPECIFIER_FP) {
    1570:	2b04      	cmp	r3, #4
    1572:	d108      	bne.n	1586 <cbvprintf+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    1574:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1576:	f024 0407 	bic.w	r4, r4, #7
    157a:	e9d4 2300 	ldrd	r2, r3, [r4]
    157e:	3408      	adds	r4, #8
    1580:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1584:	e7b7      	b.n	14f6 <cbvprintf+0x41a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1586:	2b03      	cmp	r3, #3
    1588:	d1b5      	bne.n	14f6 <cbvprintf+0x41a>
			value->ptr = va_arg(ap, void *);
    158a:	f854 3b04 	ldr.w	r3, [r4], #4
    158e:	e7dd      	b.n	154c <cbvprintf+0x470>
		switch (conv->specifier) {
    1590:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1594:	2878      	cmp	r0, #120	; 0x78
    1596:	d8bd      	bhi.n	1514 <cbvprintf+0x438>
    1598:	2862      	cmp	r0, #98	; 0x62
    159a:	d81c      	bhi.n	15d6 <cbvprintf+0x4fa>
    159c:	2825      	cmp	r0, #37	; 0x25
    159e:	f43f adad 	beq.w	10fc <cbvprintf+0x20>
    15a2:	2858      	cmp	r0, #88	; 0x58
    15a4:	d1b6      	bne.n	1514 <cbvprintf+0x438>
			bps = encode_uint(value->uint, conv, buf, bpe);
    15a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    15aa:	9300      	str	r3, [sp, #0]
    15ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    15b0:	ab08      	add	r3, sp, #32
    15b2:	aa10      	add	r2, sp, #64	; 0x40
    15b4:	f006 fd08 	bl	7fc8 <encode_uint>
			if (precision >= 0) {
    15b8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    15bc:	4607      	mov	r7, r0
			if (precision >= 0) {
    15be:	f280 809a 	bge.w	16f6 <cbvprintf+0x61a>
		if (bps == NULL) {
    15c2:	2f00      	cmp	r7, #0
    15c4:	d0a6      	beq.n	1514 <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
    15c6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    15ca:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    15cc:	2e00      	cmp	r6, #0
    15ce:	f000 80c1 	beq.w	1754 <cbvprintf+0x678>
			nj_len += 1U;
    15d2:	3001      	adds	r0, #1
    15d4:	e0be      	b.n	1754 <cbvprintf+0x678>
		switch (conv->specifier) {
    15d6:	3863      	subs	r0, #99	; 0x63
    15d8:	2815      	cmp	r0, #21
    15da:	d89b      	bhi.n	1514 <cbvprintf+0x438>
    15dc:	a201      	add	r2, pc, #4	; (adr r2, 15e4 <cbvprintf+0x508>)
    15de:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    15e2:	bf00      	nop
    15e4:	000016b9 	.word	0x000016b9
    15e8:	000016cb 	.word	0x000016cb
    15ec:	00001515 	.word	0x00001515
    15f0:	00001515 	.word	0x00001515
    15f4:	00001515 	.word	0x00001515
    15f8:	00001515 	.word	0x00001515
    15fc:	000016cb 	.word	0x000016cb
    1600:	00001515 	.word	0x00001515
    1604:	00001515 	.word	0x00001515
    1608:	00001515 	.word	0x00001515
    160c:	00001515 	.word	0x00001515
    1610:	00001759 	.word	0x00001759
    1614:	000016f1 	.word	0x000016f1
    1618:	00001717 	.word	0x00001717
    161c:	00001515 	.word	0x00001515
    1620:	00001515 	.word	0x00001515
    1624:	0000163d 	.word	0x0000163d
    1628:	00001515 	.word	0x00001515
    162c:	000016f1 	.word	0x000016f1
    1630:	00001515 	.word	0x00001515
    1634:	00001515 	.word	0x00001515
    1638:	000016f1 	.word	0x000016f1
			if (precision >= 0) {
    163c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1640:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1642:	db35      	blt.n	16b0 <cbvprintf+0x5d4>
				len = strnlen(bps, precision);
    1644:	4651      	mov	r1, sl
    1646:	4638      	mov	r0, r7
    1648:	f006 fdec 	bl	8224 <strnlen>
			bpe = bps + len;
    164c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1650:	2f00      	cmp	r7, #0
    1652:	f43f af5f 	beq.w	1514 <cbvprintf+0x438>
		char sign = 0;
    1656:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1658:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    165c:	f013 0210 	ands.w	r2, r3, #16
    1660:	9205      	str	r2, [sp, #20]
    1662:	f000 8093 	beq.w	178c <cbvprintf+0x6b0>
			nj_len += 2U;
    1666:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1668:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    166a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    166c:	bf48      	it	mi
    166e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1670:	9204      	str	r2, [sp, #16]
    1672:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1674:	bf48      	it	mi
    1676:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1678:	f1b8 0f00 	cmp.w	r8, #0
    167c:	f340 80a0 	ble.w	17c0 <cbvprintf+0x6e4>
			if (!conv->flag_dash) {
    1680:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1684:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1688:	f3c2 0380 	ubfx	r3, r2, #2, #1
    168c:	0750      	lsls	r0, r2, #29
    168e:	9306      	str	r3, [sp, #24]
    1690:	f100 8096 	bmi.w	17c0 <cbvprintf+0x6e4>
				if (conv->flag_zero) {
    1694:	0651      	lsls	r1, r2, #25
    1696:	f140 8089 	bpl.w	17ac <cbvprintf+0x6d0>
					if (sign != 0) {
    169a:	b13e      	cbz	r6, 16ac <cbvprintf+0x5d0>
						OUTC(sign);
    169c:	4659      	mov	r1, fp
    169e:	4630      	mov	r0, r6
    16a0:	47c8      	blx	r9
    16a2:	2800      	cmp	r0, #0
    16a4:	db7f      	blt.n	17a6 <cbvprintf+0x6ca>
    16a6:	9b06      	ldr	r3, [sp, #24]
    16a8:	3501      	adds	r5, #1
    16aa:	461e      	mov	r6, r3
					pad = '0';
    16ac:	2230      	movs	r2, #48	; 0x30
    16ae:	e07e      	b.n	17ae <cbvprintf+0x6d2>
				len = strlen(bps);
    16b0:	4638      	mov	r0, r7
    16b2:	f006 fdb0 	bl	8216 <strlen>
    16b6:	e7c9      	b.n	164c <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    16b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    16ba:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    16be:	2600      	movs	r6, #0
			bps = buf;
    16c0:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    16c2:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    16c6:	2001      	movs	r0, #1
    16c8:	e7c6      	b.n	1658 <cbvprintf+0x57c>
			if (conv->flag_plus) {
    16ca:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    16cc:	bf5c      	itt	pl
    16ce:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    16d2:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    16d4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    16d8:	bf48      	it	mi
    16da:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    16dc:	2b00      	cmp	r3, #0
    16de:	f6bf af62 	bge.w	15a6 <cbvprintf+0x4ca>
				value->uint = (uint_value_type)-sint;
    16e2:	4252      	negs	r2, r2
    16e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    16e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    16ec:	262d      	movs	r6, #45	; 0x2d
    16ee:	e75a      	b.n	15a6 <cbvprintf+0x4ca>
		switch (conv->specifier) {
    16f0:	2600      	movs	r6, #0
    16f2:	e758      	b.n	15a6 <cbvprintf+0x4ca>
		char sign = 0;
    16f4:	2600      	movs	r6, #0
				conv->flag_zero = false;
    16f6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    16fa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    16fe:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1700:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1704:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1706:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    170a:	f67f af5a 	bls.w	15c2 <cbvprintf+0x4e6>
					conv->pad0_value = precision - (int)len;
    170e:	ebaa 0303 	sub.w	r3, sl, r3
    1712:	9311      	str	r3, [sp, #68]	; 0x44
    1714:	e755      	b.n	15c2 <cbvprintf+0x4e6>
			if (value->ptr != NULL) {
    1716:	980e      	ldr	r0, [sp, #56]	; 0x38
    1718:	b390      	cbz	r0, 1780 <cbvprintf+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    171a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    171e:	9300      	str	r3, [sp, #0]
    1720:	aa10      	add	r2, sp, #64	; 0x40
    1722:	ab08      	add	r3, sp, #32
    1724:	2100      	movs	r1, #0
    1726:	f006 fc4f 	bl	7fc8 <encode_uint>
				conv->altform_0c = true;
    172a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    172e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1732:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1736:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    173a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    173e:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1740:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1744:	dad6      	bge.n	16f4 <cbvprintf+0x618>
		if (bps == NULL) {
    1746:	2800      	cmp	r0, #0
    1748:	f43f aee4 	beq.w	1514 <cbvprintf+0x438>
		size_t nj_len = (bpe - bps);
    174c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1750:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1752:	2600      	movs	r6, #0
    1754:	469a      	mov	sl, r3
    1756:	e77f      	b.n	1658 <cbvprintf+0x57c>
				store_count(conv, value->ptr, count);
    1758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    175a:	2907      	cmp	r1, #7
    175c:	f63f aeda 	bhi.w	1514 <cbvprintf+0x438>
    1760:	e8df f001 	tbb	[pc, r1]
    1764:	0c06040c 	.word	0x0c06040c
    1768:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    176c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    176e:	e6d1      	b.n	1514 <cbvprintf+0x438>
		*(short *)dp = (short)count;
    1770:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1772:	e6cf      	b.n	1514 <cbvprintf+0x438>
		*(intmax_t *)dp = (intmax_t)count;
    1774:	17ea      	asrs	r2, r5, #31
    1776:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    177a:	e6cb      	b.n	1514 <cbvprintf+0x438>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    177c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    177e:	e6c9      	b.n	1514 <cbvprintf+0x438>
    1780:	4f2e      	ldr	r7, [pc, #184]	; (183c <cbvprintf+0x760>)
		char sign = 0;
    1782:	4606      	mov	r6, r0
			bpe = bps + 5;
    1784:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1788:	2005      	movs	r0, #5
    178a:	e765      	b.n	1658 <cbvprintf+0x57c>
		} else if (conv->altform_0) {
    178c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    178e:	bf48      	it	mi
    1790:	3001      	addmi	r0, #1
    1792:	e769      	b.n	1668 <cbvprintf+0x58c>
    1794:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1796:	4610      	mov	r0, r2
    1798:	9206      	str	r2, [sp, #24]
    179a:	4659      	mov	r1, fp
    179c:	47c8      	blx	r9
    179e:	2800      	cmp	r0, #0
    17a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17a4:	da04      	bge.n	17b0 <cbvprintf+0x6d4>
#undef OUTS
#undef OUTC
}
    17a6:	b015      	add	sp, #84	; 0x54
    17a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    17ac:	2220      	movs	r2, #32
					pad = '0';
    17ae:	4643      	mov	r3, r8
				while (width-- > 0) {
    17b0:	4619      	mov	r1, r3
    17b2:	2900      	cmp	r1, #0
    17b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    17b8:	dcec      	bgt.n	1794 <cbvprintf+0x6b8>
    17ba:	4445      	add	r5, r8
    17bc:	1a6d      	subs	r5, r5, r1
    17be:	4698      	mov	r8, r3
		if (sign != 0) {
    17c0:	b12e      	cbz	r6, 17ce <cbvprintf+0x6f2>
			OUTC(sign);
    17c2:	4659      	mov	r1, fp
    17c4:	4630      	mov	r0, r6
    17c6:	47c8      	blx	r9
    17c8:	2800      	cmp	r0, #0
    17ca:	dbec      	blt.n	17a6 <cbvprintf+0x6ca>
    17cc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    17ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    17d2:	06da      	lsls	r2, r3, #27
    17d4:	d401      	bmi.n	17da <cbvprintf+0x6fe>
    17d6:	071b      	lsls	r3, r3, #28
    17d8:	d505      	bpl.n	17e6 <cbvprintf+0x70a>
				OUTC('0');
    17da:	4659      	mov	r1, fp
    17dc:	2030      	movs	r0, #48	; 0x30
    17de:	47c8      	blx	r9
    17e0:	2800      	cmp	r0, #0
    17e2:	dbe0      	blt.n	17a6 <cbvprintf+0x6ca>
    17e4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    17e6:	9b05      	ldr	r3, [sp, #20]
    17e8:	b133      	cbz	r3, 17f8 <cbvprintf+0x71c>
				OUTC(conv->specifier);
    17ea:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    17ee:	4659      	mov	r1, fp
    17f0:	47c8      	blx	r9
    17f2:	2800      	cmp	r0, #0
    17f4:	dbd7      	blt.n	17a6 <cbvprintf+0x6ca>
    17f6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    17f8:	9e04      	ldr	r6, [sp, #16]
    17fa:	442e      	add	r6, r5
    17fc:	e005      	b.n	180a <cbvprintf+0x72e>
				OUTC('0');
    17fe:	4659      	mov	r1, fp
    1800:	2030      	movs	r0, #48	; 0x30
    1802:	47c8      	blx	r9
    1804:	2800      	cmp	r0, #0
    1806:	dbce      	blt.n	17a6 <cbvprintf+0x6ca>
    1808:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    180a:	1b73      	subs	r3, r6, r5
    180c:	2b00      	cmp	r3, #0
    180e:	dcf6      	bgt.n	17fe <cbvprintf+0x722>
			OUTS(bps, bpe);
    1810:	4653      	mov	r3, sl
    1812:	463a      	mov	r2, r7
    1814:	4659      	mov	r1, fp
    1816:	4648      	mov	r0, r9
    1818:	f006 fc1c 	bl	8054 <outs>
    181c:	2800      	cmp	r0, #0
    181e:	dbc2      	blt.n	17a6 <cbvprintf+0x6ca>
    1820:	4405      	add	r5, r0
		while (width > 0) {
    1822:	44a8      	add	r8, r5
    1824:	eba8 0305 	sub.w	r3, r8, r5
    1828:	2b00      	cmp	r3, #0
    182a:	f77f ae73 	ble.w	1514 <cbvprintf+0x438>
			OUTC(' ');
    182e:	4659      	mov	r1, fp
    1830:	2020      	movs	r0, #32
    1832:	47c8      	blx	r9
    1834:	2800      	cmp	r0, #0
    1836:	dbb6      	blt.n	17a6 <cbvprintf+0x6ca>
    1838:	3501      	adds	r5, #1
			--width;
    183a:	e7f3      	b.n	1824 <cbvprintf+0x748>
    183c:	000092d2 	.word	0x000092d2

00001840 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1840:	b508      	push	{r3, lr}
	__asm__ volatile(
    1842:	f04f 0220 	mov.w	r2, #32
    1846:	f3ef 8311 	mrs	r3, BASEPRI
    184a:	f382 8812 	msr	BASEPRI_MAX, r2
    184e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1852:	f001 fd23 	bl	329c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1856:	4803      	ldr	r0, [pc, #12]	; (1864 <sys_reboot+0x24>)
    1858:	f006 fa87 	bl	7d6a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    185c:	f000 fe60 	bl	2520 <arch_cpu_idle>
    1860:	e7fc      	b.n	185c <sys_reboot+0x1c>
    1862:	bf00      	nop
    1864:	000092d8 	.word	0x000092d8

00001868 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    1868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186a:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    186c:	460c      	mov	r4, r1
    186e:	b929      	cbnz	r1, 187c <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    1870:	4d0e      	ldr	r5, [pc, #56]	; (18ac <msg_process+0x44>)
    1872:	4b0f      	ldr	r3, [pc, #60]	; (18b0 <msg_process+0x48>)
    1874:	1b5b      	subs	r3, r3, r5
    1876:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1878:	42bc      	cmp	r4, r7
    187a:	db00      	blt.n	187e <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    187c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    187e:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    1880:	795b      	ldrb	r3, [r3, #5]
    1882:	b17b      	cbz	r3, 18a4 <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    1884:	b94e      	cbnz	r6, 189a <msg_process+0x32>
    1886:	490b      	ldr	r1, [pc, #44]	; (18b4 <msg_process+0x4c>)
    1888:	480b      	ldr	r0, [pc, #44]	; (18b8 <msg_process+0x50>)
    188a:	4a0c      	ldr	r2, [pc, #48]	; (18bc <msg_process+0x54>)
    188c:	2386      	movs	r3, #134	; 0x86
    188e:	f006 fbff 	bl	8090 <assert_print>
    1892:	480a      	ldr	r0, [pc, #40]	; (18bc <msg_process+0x54>)
    1894:	2186      	movs	r1, #134	; 0x86
    1896:	f006 fbf4 	bl	8082 <assert_post_action>
	backend->api->process(backend, msg);
    189a:	682b      	ldr	r3, [r5, #0]
    189c:	4631      	mov	r1, r6
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	4628      	mov	r0, r5
    18a2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    18a4:	3401      	adds	r4, #1
    18a6:	3510      	adds	r5, #16
    18a8:	e7e6      	b.n	1878 <msg_process+0x10>
    18aa:	bf00      	nop
    18ac:	00008c08 	.word	0x00008c08
    18b0:	00008c28 	.word	0x00008c28
    18b4:	00009339 	.word	0x00009339
    18b8:	00008f43 	.word	0x00008f43
    18bc:	00009301 	.word	0x00009301

000018c0 <log_format_func_t_get>:
}
    18c0:	4b01      	ldr	r3, [pc, #4]	; (18c8 <log_format_func_t_get+0x8>)
    18c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    18c6:	4770      	bx	lr
    18c8:	00008c58 	.word	0x00008c58

000018cc <log_core_init>:
	panic_mode = false;
    18cc:	4a05      	ldr	r2, [pc, #20]	; (18e4 <log_core_init+0x18>)
    18ce:	2300      	movs	r3, #0
    18d0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    18d2:	4a05      	ldr	r2, [pc, #20]	; (18e8 <log_core_init+0x1c>)
    18d4:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <log_core_init+0x20>)
    18d8:	4a05      	ldr	r2, [pc, #20]	; (18f0 <log_core_init+0x24>)
    18da:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    18dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    18e0:	f000 ba94 	b.w	1e0c <log_output_timestamp_freq_set>
    18e4:	20000c01 	.word	0x20000c01
    18e8:	200002e8 	.word	0x200002e8
    18ec:	20000004 	.word	0x20000004
    18f0:	000080ad 	.word	0x000080ad

000018f4 <log_init>:
{
    18f4:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    18f6:	4b19      	ldr	r3, [pc, #100]	; (195c <log_init+0x68>)
    18f8:	4c19      	ldr	r4, [pc, #100]	; (1960 <log_init+0x6c>)
    18fa:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    18fc:	2c90      	cmp	r4, #144	; 0x90
    18fe:	d90b      	bls.n	1918 <log_init+0x24>
    1900:	4918      	ldr	r1, [pc, #96]	; (1964 <log_init+0x70>)
    1902:	4819      	ldr	r0, [pc, #100]	; (1968 <log_init+0x74>)
    1904:	4a19      	ldr	r2, [pc, #100]	; (196c <log_init+0x78>)
    1906:	f240 2373 	movw	r3, #627	; 0x273
    190a:	f006 fbc1 	bl	8090 <assert_print>
    190e:	4817      	ldr	r0, [pc, #92]	; (196c <log_init+0x78>)
    1910:	f240 2173 	movw	r1, #627	; 0x273
    1914:	f006 fbb5 	bl	8082 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1918:	f3bf 8f5b 	dmb	ish
    191c:	4b14      	ldr	r3, [pc, #80]	; (1970 <log_init+0x7c>)
    191e:	e853 6f00 	ldrex	r6, [r3]
    1922:	1c72      	adds	r2, r6, #1
    1924:	e843 2100 	strex	r1, r2, [r3]
    1928:	2900      	cmp	r1, #0
    192a:	d1f8      	bne.n	191e <log_init+0x2a>
    192c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1930:	b91e      	cbnz	r6, 193a <log_init+0x46>
    1932:	1125      	asrs	r5, r4, #4
    1934:	4c09      	ldr	r4, [pc, #36]	; (195c <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    1936:	42ae      	cmp	r6, r5
    1938:	db00      	blt.n	193c <log_init+0x48>
}
    193a:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    193c:	7b23      	ldrb	r3, [r4, #12]
    193e:	b153      	cbz	r3, 1956 <log_init+0x62>
			if (backend->api->init != NULL) {
    1940:	6823      	ldr	r3, [r4, #0]
    1942:	699b      	ldr	r3, [r3, #24]
    1944:	b10b      	cbz	r3, 194a <log_init+0x56>
				backend->api->init(backend);
    1946:	4620      	mov	r0, r4
    1948:	4798      	blx	r3
			log_backend_enable(backend,
    194a:	6863      	ldr	r3, [r4, #4]
    194c:	2204      	movs	r2, #4
    194e:	6819      	ldr	r1, [r3, #0]
    1950:	4620      	mov	r0, r4
    1952:	f000 f86f 	bl	1a34 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1956:	3601      	adds	r6, #1
    1958:	3410      	adds	r4, #16
    195a:	e7ec      	b.n	1936 <log_init+0x42>
    195c:	00008c08 	.word	0x00008c08
    1960:	00008c28 	.word	0x00008c28
    1964:	00009391 	.word	0x00009391
    1968:	00008f43 	.word	0x00008f43
    196c:	0000934c 	.word	0x0000934c
    1970:	200002f0 	.word	0x200002f0

00001974 <z_impl_log_panic>:
{
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1976:	4f0c      	ldr	r7, [pc, #48]	; (19a8 <z_impl_log_panic+0x34>)
    1978:	783d      	ldrb	r5, [r7, #0]
    197a:	b94d      	cbnz	r5, 1990 <z_impl_log_panic+0x1c>
    197c:	4c0b      	ldr	r4, [pc, #44]	; (19ac <z_impl_log_panic+0x38>)
    197e:	4e0c      	ldr	r6, [pc, #48]	; (19b0 <z_impl_log_panic+0x3c>)
	log_init();
    1980:	f7ff ffb8 	bl	18f4 <log_init>
    1984:	1b36      	subs	r6, r6, r4
    1986:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1988:	42b5      	cmp	r5, r6
    198a:	db02      	blt.n	1992 <z_impl_log_panic+0x1e>
	panic_mode = true;
    198c:	2301      	movs	r3, #1
    198e:	703b      	strb	r3, [r7, #0]
}
    1990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1992:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1994:	795b      	ldrb	r3, [r3, #5]
    1996:	b11b      	cbz	r3, 19a0 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    1998:	6823      	ldr	r3, [r4, #0]
    199a:	4620      	mov	r0, r4
    199c:	695b      	ldr	r3, [r3, #20]
    199e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19a0:	3501      	adds	r5, #1
    19a2:	3410      	adds	r4, #16
    19a4:	e7f0      	b.n	1988 <z_impl_log_panic+0x14>
    19a6:	bf00      	nop
    19a8:	20000c01 	.word	0x20000c01
    19ac:	00008c08 	.word	0x00008c08
    19b0:	00008c28 	.word	0x00008c28

000019b4 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    19b4:	4b01      	ldr	r3, [pc, #4]	; (19bc <z_log_notify_backend_enabled+0x8>)
    19b6:	2201      	movs	r2, #1
    19b8:	701a      	strb	r2, [r3, #0]
}
    19ba:	4770      	bx	lr
    19bc:	20000c00 	.word	0x20000c00

000019c0 <z_log_dropped>:
    19c0:	4b0c      	ldr	r3, [pc, #48]	; (19f4 <z_log_dropped+0x34>)
    19c2:	f3bf 8f5b 	dmb	ish
    19c6:	e853 1f00 	ldrex	r1, [r3]
    19ca:	3101      	adds	r1, #1
    19cc:	e843 1200 	strex	r2, r1, [r3]
    19d0:	2a00      	cmp	r2, #0
    19d2:	d1f8      	bne.n	19c6 <z_log_dropped+0x6>
    19d4:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    19d8:	b158      	cbz	r0, 19f2 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    19da:	f3bf 8f5b 	dmb	ish
    19de:	4b06      	ldr	r3, [pc, #24]	; (19f8 <z_log_dropped+0x38>)
    19e0:	e853 1f00 	ldrex	r1, [r3]
    19e4:	3901      	subs	r1, #1
    19e6:	e843 1200 	strex	r2, r1, [r3]
    19ea:	2a00      	cmp	r2, #0
    19ec:	d1f8      	bne.n	19e0 <z_log_dropped+0x20>
    19ee:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    19f2:	4770      	bx	lr
    19f4:	200002e8 	.word	0x200002e8
    19f8:	200002ec 	.word	0x200002ec

000019fc <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    19fc:	4b05      	ldr	r3, [pc, #20]	; (1a14 <z_log_msg2_commit+0x18>)
{
    19fe:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1a00:	681b      	ldr	r3, [r3, #0]
{
    1a02:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1a04:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1a06:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    1a08:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    1a0a:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    1a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    1a10:	f7ff bf2a 	b.w	1868 <msg_process>
    1a14:	20000004 	.word	0x20000004

00001a18 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1a18:	4a04      	ldr	r2, [pc, #16]	; (1a2c <log_source_name_get+0x14>)
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <log_source_name_get+0x18>)
    1a1c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1a1e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1a22:	bf34      	ite	cc
    1a24:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1a28:	2000      	movcs	r0, #0
}
    1a2a:	4770      	bx	lr
    1a2c:	00008bc0 	.word	0x00008bc0
    1a30:	00008c08 	.word	0x00008c08

00001a34 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1a36:	4c10      	ldr	r4, [pc, #64]	; (1a78 <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1a38:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    1a3a:	1b04      	subs	r4, r0, r4
    1a3c:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1a3e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    1a40:	3401      	adds	r4, #1
{
    1a42:	4605      	mov	r5, r0
    1a44:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    1a46:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1a48:	b963      	cbnz	r3, 1a64 <log_backend_enable+0x30>
    1a4a:	490c      	ldr	r1, [pc, #48]	; (1a7c <log_backend_enable+0x48>)
    1a4c:	4a0c      	ldr	r2, [pc, #48]	; (1a80 <log_backend_enable+0x4c>)
    1a4e:	480d      	ldr	r0, [pc, #52]	; (1a84 <log_backend_enable+0x50>)
    1a50:	23bb      	movs	r3, #187	; 0xbb
    1a52:	f006 fb1d 	bl	8090 <assert_print>
    1a56:	480c      	ldr	r0, [pc, #48]	; (1a88 <log_backend_enable+0x54>)
    1a58:	f006 fb1a 	bl	8090 <assert_print>
    1a5c:	4808      	ldr	r0, [pc, #32]	; (1a80 <log_backend_enable+0x4c>)
    1a5e:	21bb      	movs	r1, #187	; 0xbb
    1a60:	f006 fb0f 	bl	8082 <assert_post_action>
	backend->cb->id = id;
    1a64:	686b      	ldr	r3, [r5, #4]
    1a66:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    1a68:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    1a6a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    1a6c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    1a6e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    1a74:	f7ff bf9e 	b.w	19b4 <z_log_notify_backend_enabled>
    1a78:	00008c08 	.word	0x00008c08
    1a7c:	00009411 	.word	0x00009411
    1a80:	000093b9 	.word	0x000093b9
    1a84:	00008f43 	.word	0x00008f43
    1a88:	00009427 	.word	0x00009427

00001a8c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1a8c:	b40e      	push	{r1, r2, r3}
    1a8e:	b503      	push	{r0, r1, lr}
    1a90:	ab03      	add	r3, sp, #12
    1a92:	4601      	mov	r1, r0
    1a94:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a98:	4804      	ldr	r0, [pc, #16]	; (1aac <print_formatted+0x20>)
	va_start(args, fmt);
    1a9a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a9c:	f7ff fb1e 	bl	10dc <cbvprintf>
	va_end(args);

	return length;
}
    1aa0:	b002      	add	sp, #8
    1aa2:	f85d eb04 	ldr.w	lr, [sp], #4
    1aa6:	b003      	add	sp, #12
    1aa8:	4770      	bx	lr
    1aaa:	bf00      	nop
    1aac:	000080df 	.word	0x000080df

00001ab0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ab4:	b087      	sub	sp, #28
    1ab6:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1ab8:	f001 0301 	and.w	r3, r1, #1
{
    1abc:	9205      	str	r2, [sp, #20]
    1abe:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1ac2:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1ac6:	9304      	str	r3, [sp, #16]
{
    1ac8:	4607      	mov	r7, r0
    1aca:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1acc:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1ad0:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1ad4:	f006 fb01 	bl	80da <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1ad8:	4602      	mov	r2, r0
    1ada:	2800      	cmp	r0, #0
    1adc:	d040      	beq.n	1b60 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    1ade:	4937      	ldr	r1, [pc, #220]	; (1bbc <prefix_print+0x10c>)
    1ae0:	4638      	mov	r0, r7
    1ae2:	f7ff ffd3 	bl	1a8c <print_formatted>
    1ae6:	4605      	mov	r5, r0
	}

	if (stamp) {
    1ae8:	f1bb 0f00 	cmp.w	fp, #0
    1aec:	d008      	beq.n	1b00 <prefix_print+0x50>
	if (!format) {
    1aee:	f018 0f44 	tst.w	r8, #68	; 0x44
    1af2:	d137      	bne.n	1b64 <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1af4:	4932      	ldr	r1, [pc, #200]	; (1bc0 <prefix_print+0x110>)
    1af6:	4622      	mov	r2, r4
    1af8:	4638      	mov	r0, r7
    1afa:	f7ff ffc7 	bl	1a8c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1afe:	4405      	add	r5, r0
	if (color) {
    1b00:	9b04      	ldr	r3, [sp, #16]
    1b02:	b153      	cbz	r3, 1b1a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1b04:	4b2f      	ldr	r3, [pc, #188]	; (1bc4 <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    1b06:	4930      	ldr	r1, [pc, #192]	; (1bc8 <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    1b08:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1b0c:	4b2f      	ldr	r3, [pc, #188]	; (1bcc <prefix_print+0x11c>)
    1b0e:	4638      	mov	r0, r7
    1b10:	2a00      	cmp	r2, #0
    1b12:	bf08      	it	eq
    1b14:	461a      	moveq	r2, r3
    1b16:	f7ff ffb9 	bl	1a8c <print_formatted>
	if (level_on) {
    1b1a:	b13e      	cbz	r6, 1b2c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1b1c:	4b2c      	ldr	r3, [pc, #176]	; (1bd0 <prefix_print+0x120>)
    1b1e:	492d      	ldr	r1, [pc, #180]	; (1bd4 <prefix_print+0x124>)
    1b20:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1b24:	4638      	mov	r0, r7
    1b26:	f7ff ffb1 	bl	1a8c <print_formatted>
    1b2a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1b2c:	f1ba 0f00 	cmp.w	sl, #0
    1b30:	db12      	blt.n	1b58 <prefix_print+0xa8>
		total += print_formatted(output,
    1b32:	9b05      	ldr	r3, [sp, #20]
    1b34:	4c28      	ldr	r4, [pc, #160]	; (1bd8 <prefix_print+0x128>)
    1b36:	b123      	cbz	r3, 1b42 <prefix_print+0x92>
    1b38:	4b28      	ldr	r3, [pc, #160]	; (1bdc <prefix_print+0x12c>)
    1b3a:	f1b9 0f04 	cmp.w	r9, #4
    1b3e:	bf08      	it	eq
    1b40:	461c      	moveq	r4, r3
    1b42:	4651      	mov	r1, sl
    1b44:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1b48:	f7ff ff66 	bl	1a18 <log_source_name_get>
    1b4c:	4621      	mov	r1, r4
    1b4e:	4602      	mov	r2, r0
    1b50:	4638      	mov	r0, r7
    1b52:	f7ff ff9b 	bl	1a8c <print_formatted>
    1b56:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1b58:	1970      	adds	r0, r6, r5
    1b5a:	b007      	add	sp, #28
    1b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1b60:	4605      	mov	r5, r0
    1b62:	e7c1      	b.n	1ae8 <prefix_print+0x38>
	} else if (freq != 0U) {
    1b64:	4b1e      	ldr	r3, [pc, #120]	; (1be0 <prefix_print+0x130>)
    1b66:	6818      	ldr	r0, [r3, #0]
    1b68:	2800      	cmp	r0, #0
    1b6a:	d0c8      	beq.n	1afe <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1b6c:	4b1d      	ldr	r3, [pc, #116]	; (1be4 <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    1b6e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1b78:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1b7c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1b80:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1b84:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1b88:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1b8c:	fbb3 f2f1 	udiv	r2, r3, r1
    1b90:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b94:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1b98:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b9c:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1ba0:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ba4:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1ba8:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1baa:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    1bae:	490e      	ldr	r1, [pc, #56]	; (1be8 <prefix_print+0x138>)
    1bb0:	e9cd e401 	strd	lr, r4, [sp, #4]
    1bb4:	4638      	mov	r0, r7
    1bb6:	f7ff ff69 	bl	1a8c <print_formatted>
    1bba:	e7a0      	b.n	1afe <prefix_print+0x4e>
    1bbc:	00009457 	.word	0x00009457
    1bc0:	0000945b 	.word	0x0000945b
    1bc4:	00008c64 	.word	0x00008c64
    1bc8:	00009480 	.word	0x00009480
    1bcc:	00009449 	.word	0x00009449
    1bd0:	00008c78 	.word	0x00008c78
    1bd4:	00009483 	.word	0x00009483
    1bd8:	00009452 	.word	0x00009452
    1bdc:	0000944e 	.word	0x0000944e
    1be0:	200002f8 	.word	0x200002f8
    1be4:	200002f4 	.word	0x200002f4
    1be8:	00009464 	.word	0x00009464

00001bec <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1bec:	06ca      	lsls	r2, r1, #27
    1bee:	d405      	bmi.n	1bfc <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1bf0:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1bf2:	bf4c      	ite	mi
    1bf4:	4902      	ldrmi	r1, [pc, #8]	; (1c00 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    1bf6:	4903      	ldrpl	r1, [pc, #12]	; (1c04 <newline_print+0x18>)
    1bf8:	f7ff bf48 	b.w	1a8c <print_formatted>
}
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	0000a3f5 	.word	0x0000a3f5
    1c04:	00009489 	.word	0x00009489

00001c08 <hexdump_line_print>:
{
    1c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c0c:	460f      	mov	r7, r1
	newline_print(output, flags);
    1c0e:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    1c10:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1ccc <hexdump_line_print+0xc4>
{
    1c14:	4604      	mov	r4, r0
    1c16:	4616      	mov	r6, r2
    1c18:	461d      	mov	r5, r3
	newline_print(output, flags);
    1c1a:	f7ff ffe7 	bl	1bec <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1c1e:	f04f 0800 	mov.w	r8, #0
    1c22:	45a8      	cmp	r8, r5
    1c24:	db28      	blt.n	1c78 <hexdump_line_print+0x70>
		if (i < length) {
    1c26:	b376      	cbz	r6, 1c86 <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    1c28:	783a      	ldrb	r2, [r7, #0]
    1c2a:	4929      	ldr	r1, [pc, #164]	; (1cd0 <hexdump_line_print+0xc8>)
    1c2c:	4620      	mov	r0, r4
    1c2e:	f7ff ff2d 	bl	1a8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c32:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    1c34:	076a      	lsls	r2, r5, #29
    1c36:	d103      	bne.n	1c40 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1c38:	4924      	ldr	r1, [pc, #144]	; (1ccc <hexdump_line_print+0xc4>)
    1c3a:	4620      	mov	r0, r4
    1c3c:	f7ff ff26 	bl	1a8c <print_formatted>
		if (i < length) {
    1c40:	42b5      	cmp	r5, r6
    1c42:	d225      	bcs.n	1c90 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    1c44:	5d7a      	ldrb	r2, [r7, r5]
    1c46:	4922      	ldr	r1, [pc, #136]	; (1cd0 <hexdump_line_print+0xc8>)
    1c48:	4620      	mov	r0, r4
    1c4a:	f7ff ff1f 	bl	1a8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c4e:	3501      	adds	r5, #1
    1c50:	2d10      	cmp	r5, #16
    1c52:	d1ef      	bne.n	1c34 <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    1c54:	491f      	ldr	r1, [pc, #124]	; (1cd4 <hexdump_line_print+0xcc>)
    1c56:	4620      	mov	r0, r4
    1c58:	f7ff ff18 	bl	1a8c <print_formatted>
		if (i < length) {
    1c5c:	b9ee      	cbnz	r6, 1c9a <hexdump_line_print+0x92>
			print_formatted(output, " ");
    1c5e:	491b      	ldr	r1, [pc, #108]	; (1ccc <hexdump_line_print+0xc4>)
    1c60:	4620      	mov	r0, r4
    1c62:	f7ff ff13 	bl	1a8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c66:	2501      	movs	r5, #1
		if (i < length) {
    1c68:	42b5      	cmp	r5, r6
    1c6a:	462b      	mov	r3, r5
    1c6c:	d317      	bcc.n	1c9e <hexdump_line_print+0x96>
			print_formatted(output, " ");
    1c6e:	4917      	ldr	r1, [pc, #92]	; (1ccc <hexdump_line_print+0xc4>)
    1c70:	4620      	mov	r0, r4
    1c72:	f7ff ff0b 	bl	1a8c <print_formatted>
    1c76:	e01c      	b.n	1cb2 <hexdump_line_print+0xaa>
		print_formatted(output, " ");
    1c78:	4649      	mov	r1, r9
    1c7a:	4620      	mov	r0, r4
    1c7c:	f7ff ff06 	bl	1a8c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1c80:	f108 0801 	add.w	r8, r8, #1
    1c84:	e7cd      	b.n	1c22 <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    1c86:	4914      	ldr	r1, [pc, #80]	; (1cd8 <hexdump_line_print+0xd0>)
    1c88:	4620      	mov	r0, r4
    1c8a:	f7ff feff 	bl	1a8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c8e:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    1c90:	4911      	ldr	r1, [pc, #68]	; (1cd8 <hexdump_line_print+0xd0>)
    1c92:	4620      	mov	r0, r4
    1c94:	f7ff fefa 	bl	1a8c <print_formatted>
    1c98:	e7d9      	b.n	1c4e <hexdump_line_print+0x46>
		if (i < length) {
    1c9a:	2500      	movs	r5, #0
    1c9c:	462b      	mov	r3, r5
			char c = (char)data[i];
    1c9e:	5cfa      	ldrb	r2, [r7, r3]
			print_formatted(output, "%c",
    1ca0:	490e      	ldr	r1, [pc, #56]	; (1cdc <hexdump_line_print+0xd4>)
	return (int)((((unsigned)c) >= ' ') &&
    1ca2:	f1a2 0320 	sub.w	r3, r2, #32
    1ca6:	2b5f      	cmp	r3, #95	; 0x5f
    1ca8:	bf28      	it	cs
    1caa:	222e      	movcs	r2, #46	; 0x2e
    1cac:	4620      	mov	r0, r4
    1cae:	f7ff feed 	bl	1a8c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cb2:	3501      	adds	r5, #1
    1cb4:	2d10      	cmp	r5, #16
    1cb6:	d006      	beq.n	1cc6 <hexdump_line_print+0xbe>
		if (i > 0 && !(i % 8)) {
    1cb8:	076b      	lsls	r3, r5, #29
    1cba:	d1d5      	bne.n	1c68 <hexdump_line_print+0x60>
			print_formatted(output, " ");
    1cbc:	4903      	ldr	r1, [pc, #12]	; (1ccc <hexdump_line_print+0xc4>)
    1cbe:	4620      	mov	r0, r4
    1cc0:	f7ff fee4 	bl	1a8c <print_formatted>
    1cc4:	e7d0      	b.n	1c68 <hexdump_line_print+0x60>
}
    1cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1cca:	bf00      	nop
    1ccc:	00009494 	.word	0x00009494
    1cd0:	0000948c 	.word	0x0000948c
    1cd4:	00009496 	.word	0x00009496
    1cd8:	00009492 	.word	0x00009492
    1cdc:	00009498 	.word	0x00009498

00001ce0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1ce0:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    1ce2:	07cb      	lsls	r3, r1, #31
{
    1ce4:	4605      	mov	r5, r0
    1ce6:	460c      	mov	r4, r1
	if (color) {
    1ce8:	d503      	bpl.n	1cf2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1cea:	4a05      	ldr	r2, [pc, #20]	; (1d00 <postfix_print+0x20>)
    1cec:	4905      	ldr	r1, [pc, #20]	; (1d04 <postfix_print+0x24>)
    1cee:	f7ff fecd 	bl	1a8c <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    1cf2:	4621      	mov	r1, r4
    1cf4:	4628      	mov	r0, r5
}
    1cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    1cfa:	f7ff bf77 	b.w	1bec <newline_print>
    1cfe:	bf00      	nop
    1d00:	00009449 	.word	0x00009449
    1d04:	00009480 	.word	0x00009480

00001d08 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1d0c:	460e      	mov	r6, r1
    1d0e:	4690      	mov	r8, r2
    1d10:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    1d14:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1d16:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    1d1a:	4607      	mov	r7, r0
    1d1c:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    1d1e:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    1d22:	d023      	beq.n	1d6c <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    1d24:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    1d26:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    1d28:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1d2c:	b1d8      	cbz	r0, 1d66 <log_output_msg2_process+0x5e>
    1d2e:	4930      	ldr	r1, [pc, #192]	; (1df0 <log_output_msg2_process+0xe8>)
    1d30:	1a40      	subs	r0, r0, r1
    1d32:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1d36:	e9cd 2001 	strd	r2, r0, [sp, #4]
    1d3a:	f8cd 9000 	str.w	r9, [sp]
    1d3e:	2200      	movs	r2, #0
    1d40:	4641      	mov	r1, r8
    1d42:	4638      	mov	r0, r7
    1d44:	f7ff feb4 	bl	1ab0 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    1d48:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1d4a:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1d4e:	4682      	mov	sl, r0
	if (len) {
    1d50:	b9b3      	cbnz	r3, 1d80 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    1d52:	886c      	ldrh	r4, [r5, #2]
    1d54:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1d58:	b9f4      	cbnz	r4, 1d98 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    1d5a:	464a      	mov	r2, r9
    1d5c:	4641      	mov	r1, r8
    1d5e:	4638      	mov	r0, r7
    1d60:	f7ff ffbe 	bl	1ce0 <postfix_print>
    1d64:	e02e      	b.n	1dc4 <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    1d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d6a:	e7e4      	b.n	1d36 <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    1d6c:	680b      	ldr	r3, [r1, #0]
	if (len) {
    1d6e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1d72:	bb6b      	cbnz	r3, 1dd0 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    1d74:	884c      	ldrh	r4, [r1, #2]
    1d76:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    1d7a:	b31c      	cbz	r4, 1dc4 <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    1d7c:	46ca      	mov	sl, r9
    1d7e:	e00b      	b.n	1d98 <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1d80:	481c      	ldr	r0, [pc, #112]	; (1df4 <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1d82:	491d      	ldr	r1, [pc, #116]	; (1df8 <log_output_msg2_process+0xf0>)
    1d84:	4633      	mov	r3, r6
    1d86:	463a      	mov	r2, r7
    1d88:	f005 ffad 	bl	7ce6 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    1d8c:	2800      	cmp	r0, #0
    1d8e:	db22      	blt.n	1dd6 <log_output_msg2_process+0xce>
    1d90:	886c      	ldrh	r4, [r5, #2]
    1d92:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    1d96:	b194      	cbz	r4, 1dbe <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    1d98:	682b      	ldr	r3, [r5, #0]
    1d9a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1d9e:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1da0:	2c10      	cmp	r4, #16
    1da2:	4625      	mov	r5, r4
    1da4:	bf28      	it	cs
    1da6:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    1da8:	4631      	mov	r1, r6
    1daa:	f8cd 8000 	str.w	r8, [sp]
    1dae:	4653      	mov	r3, sl
    1db0:	462a      	mov	r2, r5
    1db2:	4638      	mov	r0, r7
    1db4:	f7ff ff28 	bl	1c08 <hexdump_line_print>
	} while (len);
    1db8:	1b64      	subs	r4, r4, r5
		data += length;
    1dba:	442e      	add	r6, r5
	} while (len);
    1dbc:	d1f0      	bne.n	1da0 <log_output_msg2_process+0x98>
	if (!raw_string) {
    1dbe:	f1b9 0f00 	cmp.w	r9, #0
    1dc2:	d1ca      	bne.n	1d5a <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    1dc4:	4638      	mov	r0, r7
}
    1dc6:	b004      	add	sp, #16
    1dc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1dcc:	f006 b9af 	b.w	812e <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    1dd0:	480a      	ldr	r0, [pc, #40]	; (1dfc <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    1dd2:	46ca      	mov	sl, r9
    1dd4:	e7d5      	b.n	1d82 <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    1dd6:	4a0a      	ldr	r2, [pc, #40]	; (1e00 <log_output_msg2_process+0xf8>)
    1dd8:	490a      	ldr	r1, [pc, #40]	; (1e04 <log_output_msg2_process+0xfc>)
    1dda:	480b      	ldr	r0, [pc, #44]	; (1e08 <log_output_msg2_process+0x100>)
    1ddc:	f240 23b7 	movw	r3, #695	; 0x2b7
    1de0:	f006 f956 	bl	8090 <assert_print>
    1de4:	4806      	ldr	r0, [pc, #24]	; (1e00 <log_output_msg2_process+0xf8>)
    1de6:	f240 21b7 	movw	r1, #695	; 0x2b7
    1dea:	f006 f94a 	bl	8082 <assert_post_action>
    1dee:	e7cf      	b.n	1d90 <log_output_msg2_process+0x88>
    1df0:	00008bc0 	.word	0x00008bc0
    1df4:	000080df 	.word	0x000080df
    1df8:	000010dd 	.word	0x000010dd
    1dfc:	000080fb 	.word	0x000080fb
    1e00:	0000949b 	.word	0x0000949b
    1e04:	000094d9 	.word	0x000094d9
    1e08:	00008f43 	.word	0x00008f43

00001e0c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1e0c:	4a07      	ldr	r2, [pc, #28]	; (1e2c <log_output_timestamp_freq_set+0x20>)
    1e0e:	2100      	movs	r1, #0
    1e10:	2301      	movs	r3, #1
    1e12:	4290      	cmp	r0, r2
    1e14:	d806      	bhi.n	1e24 <log_output_timestamp_freq_set+0x18>
    1e16:	4a06      	ldr	r2, [pc, #24]	; (1e30 <log_output_timestamp_freq_set+0x24>)
    1e18:	b901      	cbnz	r1, 1e1c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    1e1a:	2301      	movs	r3, #1
    1e1c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1e1e:	4b05      	ldr	r3, [pc, #20]	; (1e34 <log_output_timestamp_freq_set+0x28>)
    1e20:	6018      	str	r0, [r3, #0]
}
    1e22:	4770      	bx	lr
		frequency /= 2U;
    1e24:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1e26:	005b      	lsls	r3, r3, #1
    1e28:	2101      	movs	r1, #1
    1e2a:	e7f2      	b.n	1e12 <log_output_timestamp_freq_set+0x6>
    1e2c:	000f4240 	.word	0x000f4240
    1e30:	200002f4 	.word	0x200002f4
    1e34:	200002f8 	.word	0x200002f8

00001e38 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e3c:	b085      	sub	sp, #20
    1e3e:	af02      	add	r7, sp, #8
    1e40:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    1e44:	4604      	mov	r4, r0
    1e46:	4688      	mov	r8, r1
    1e48:	4693      	mov	fp, r2
    1e4a:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    1e4c:	2e00      	cmp	r6, #0
    1e4e:	d04e      	beq.n	1eee <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    1e50:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1e54:	f8cd a000 	str.w	sl, [sp]
    1e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1e5a:	4633      	mov	r3, r6
    1e5c:	2110      	movs	r1, #16
    1e5e:	2000      	movs	r0, #0
    1e60:	f7fe fad0 	bl	404 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    1e64:	1e05      	subs	r5, r0, #0
    1e66:	da09      	bge.n	1e7c <z_impl_z_log_msg2_runtime_vcreate+0x44>
    1e68:	4922      	ldr	r1, [pc, #136]	; (1ef4 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    1e6a:	4823      	ldr	r0, [pc, #140]	; (1ef8 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    1e6c:	4a23      	ldr	r2, [pc, #140]	; (1efc <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    1e6e:	2367      	movs	r3, #103	; 0x67
    1e70:	f006 f90e 	bl	8090 <assert_print>
    1e74:	4821      	ldr	r0, [pc, #132]	; (1efc <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    1e76:	2167      	movs	r1, #103	; 0x67
    1e78:	f006 f903 	bl	8082 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1e7c:	4b20      	ldr	r3, [pc, #128]	; (1f00 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    1e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1e80:	f004 0407 	and.w	r4, r4, #7
    1e84:	f00b 0b07 	and.w	fp, fp, #7
    1e88:	00e4      	lsls	r4, r4, #3
    1e8a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    1e8e:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    1e92:	431c      	orrs	r4, r3
    1e94:	4b1b      	ldr	r3, [pc, #108]	; (1f04 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    1e96:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    1e9a:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e9c:	4613      	mov	r3, r2
    1e9e:	3317      	adds	r3, #23
    1ea0:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    1ea2:	f023 0307 	bic.w	r3, r3, #7
    1ea6:	ebad 0d03 	sub.w	sp, sp, r3
    1eaa:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1eae:	b1a6      	cbz	r6, 1eda <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1eb0:	f8cd a000 	str.w	sl, [sp]
    1eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1eb6:	4633      	mov	r3, r6
    1eb8:	4629      	mov	r1, r5
    1eba:	f10b 0010 	add.w	r0, fp, #16
    1ebe:	f7fe faa1 	bl	404 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    1ec2:	2800      	cmp	r0, #0
    1ec4:	da09      	bge.n	1eda <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    1ec6:	490b      	ldr	r1, [pc, #44]	; (1ef4 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    1ec8:	480b      	ldr	r0, [pc, #44]	; (1ef8 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    1eca:	4a0c      	ldr	r2, [pc, #48]	; (1efc <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    1ecc:	2381      	movs	r3, #129	; 0x81
    1ece:	f006 f8df 	bl	8090 <assert_print>
    1ed2:	480a      	ldr	r0, [pc, #40]	; (1efc <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    1ed4:	2181      	movs	r1, #129	; 0x81
    1ed6:	f006 f8d4 	bl	8082 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1eda:	464b      	mov	r3, r9
    1edc:	4622      	mov	r2, r4
    1ede:	4641      	mov	r1, r8
    1ee0:	4658      	mov	r0, fp
    1ee2:	f006 f931 	bl	8148 <z_log_msg2_finalize>
	}
}
    1ee6:	370c      	adds	r7, #12
    1ee8:	46bd      	mov	sp, r7
    1eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    1eee:	4635      	mov	r5, r6
    1ef0:	e7c4      	b.n	1e7c <z_impl_z_log_msg2_runtime_vcreate+0x44>
    1ef2:	bf00      	nop
    1ef4:	0000952f 	.word	0x0000952f
    1ef8:	00008f43 	.word	0x00008f43
    1efc:	00009502 	.word	0x00009502
    1f00:	0007fe00 	.word	0x0007fe00
    1f04:	7ff80000 	.word	0x7ff80000

00001f08 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    1f0a:	4f07      	ldr	r7, [pc, #28]	; (1f28 <char_out+0x20>)
{
    1f0c:	460d      	mov	r5, r1
    1f0e:	4604      	mov	r4, r0
    1f10:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    1f12:	42b4      	cmp	r4, r6
    1f14:	d101      	bne.n	1f1a <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1f16:	4628      	mov	r0, r5
    1f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    1f1a:	6838      	ldr	r0, [r7, #0]
    1f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1f20:	6883      	ldr	r3, [r0, #8]
    1f22:	685b      	ldr	r3, [r3, #4]
    1f24:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1f26:	e7f4      	b.n	1f12 <char_out+0xa>
    1f28:	20000314 	.word	0x20000314

00001f2c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1f2c:	4b01      	ldr	r3, [pc, #4]	; (1f34 <format_set+0x8>)
	return 0;
}
    1f2e:	2000      	movs	r0, #0
	log_format_current = log_type;
    1f30:	6019      	str	r1, [r3, #0]
}
    1f32:	4770      	bx	lr
    1f34:	20000310 	.word	0x20000310

00001f38 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    1f38:	4b02      	ldr	r3, [pc, #8]	; (1f44 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1f3a:	4803      	ldr	r0, [pc, #12]	; (1f48 <panic+0x10>)
    1f3c:	2201      	movs	r2, #1
    1f3e:	701a      	strb	r2, [r3, #0]
    1f40:	f006 b8f5 	b.w	812e <log_output_flush>
    1f44:	20000c03 	.word	0x20000c03
    1f48:	00008cac 	.word	0x00008cac

00001f4c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f4c:	4b06      	ldr	r3, [pc, #24]	; (1f68 <process+0x1c>)
{
    1f4e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f50:	6818      	ldr	r0, [r3, #0]
{
    1f52:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f54:	f7ff fcb4 	bl	18c0 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1f58:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1f5a:	4603      	mov	r3, r0
}
    1f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1f60:	4802      	ldr	r0, [pc, #8]	; (1f6c <process+0x20>)
    1f62:	220f      	movs	r2, #15
    1f64:	4718      	bx	r3
    1f66:	bf00      	nop
    1f68:	20000310 	.word	0x20000310
    1f6c:	00008cac 	.word	0x00008cac

00001f70 <log_backend_uart_init>:
{
    1f70:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1f72:	4b09      	ldr	r3, [pc, #36]	; (1f98 <log_backend_uart_init+0x28>)
    1f74:	4809      	ldr	r0, [pc, #36]	; (1f9c <log_backend_uart_init+0x2c>)
    1f76:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1f78:	f006 fc19 	bl	87ae <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    1f7c:	b958      	cbnz	r0, 1f96 <log_backend_uart_init+0x26>
    1f7e:	4908      	ldr	r1, [pc, #32]	; (1fa0 <log_backend_uart_init+0x30>)
    1f80:	4808      	ldr	r0, [pc, #32]	; (1fa4 <log_backend_uart_init+0x34>)
    1f82:	4a09      	ldr	r2, [pc, #36]	; (1fa8 <log_backend_uart_init+0x38>)
    1f84:	2379      	movs	r3, #121	; 0x79
    1f86:	f006 f883 	bl	8090 <assert_print>
}
    1f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    1f8e:	4806      	ldr	r0, [pc, #24]	; (1fa8 <log_backend_uart_init+0x38>)
    1f90:	2179      	movs	r1, #121	; 0x79
    1f92:	f006 b876 	b.w	8082 <assert_post_action>
}
    1f96:	bd08      	pop	{r3, pc}
    1f98:	20000314 	.word	0x20000314
    1f9c:	00008a28 	.word	0x00008a28
    1fa0:	0000956e 	.word	0x0000956e
    1fa4:	00008f43 	.word	0x00008f43
    1fa8:	00009539 	.word	0x00009539

00001fac <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1fac:	4b01      	ldr	r3, [pc, #4]	; (1fb4 <log_backend_rtt_init+0x8>)
    1fae:	2201      	movs	r2, #1
    1fb0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1fb2:	4770      	bx	lr
    1fb4:	20000c04 	.word	0x20000c04

00001fb8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1fb8:	4b01      	ldr	r3, [pc, #4]	; (1fc0 <format_set+0x8>)
	return 0;
}
    1fba:	2000      	movs	r0, #0
	log_format_current = log_type;
    1fbc:	6019      	str	r1, [r3, #0]
}
    1fbe:	4770      	bx	lr
    1fc0:	2000032c 	.word	0x2000032c

00001fc4 <panic>:
	panic_mode = true;
    1fc4:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <panic+0xc>)
    1fc6:	4803      	ldr	r0, [pc, #12]	; (1fd4 <panic+0x10>)
    1fc8:	2201      	movs	r2, #1
    1fca:	701a      	strb	r2, [r3, #0]
    1fcc:	f006 b8af 	b.w	812e <log_output_flush>
    1fd0:	20000c05 	.word	0x20000c05
    1fd4:	00008cdc 	.word	0x00008cdc

00001fd8 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1fd8:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <process+0x1c>)
{
    1fda:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1fdc:	6818      	ldr	r0, [r3, #0]
{
    1fde:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1fe0:	f7ff fc6e 	bl	18c0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1fe4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1fe6:	4603      	mov	r3, r0
}
    1fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1fec:	4802      	ldr	r0, [pc, #8]	; (1ff8 <process+0x20>)
    1fee:	220f      	movs	r2, #15
    1ff0:	4718      	bx	r3
    1ff2:	bf00      	nop
    1ff4:	2000032c 	.word	0x2000032c
    1ff8:	00008cdc 	.word	0x00008cdc

00001ffc <data_out_block_mode>:
{
    1ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffe:	4d19      	ldr	r5, [pc, #100]	; (2064 <data_out_block_mode+0x68>)
    2000:	4607      	mov	r7, r0
    2002:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2004:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2006:	4632      	mov	r2, r6
    2008:	4639      	mov	r1, r7
    200a:	2000      	movs	r0, #0
    200c:	f003 f8de 	bl	51cc <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2010:	b1c8      	cbz	r0, 2046 <data_out_block_mode+0x4a>
	host_present = true;
    2012:	2301      	movs	r3, #1
    2014:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2016:	4b14      	ldr	r3, [pc, #80]	; (2068 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2018:	781b      	ldrb	r3, [r3, #0]
    201a:	b92b      	cbnz	r3, 2028 <data_out_block_mode+0x2c>
}
    201c:	4630      	mov	r0, r6
    201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    2020:	b95c      	cbnz	r4, 203a <data_out_block_mode+0x3e>
		host_present = false;
    2022:	702c      	strb	r4, [r5, #0]
    2024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2028:	2000      	movs	r0, #0
    202a:	f003 f917 	bl	525c <SEGGER_RTT_HasDataUp>
    202e:	2800      	cmp	r0, #0
    2030:	d0f4      	beq.n	201c <data_out_block_mode+0x20>
    2032:	782b      	ldrb	r3, [r5, #0]
    2034:	2b00      	cmp	r3, #0
    2036:	d1f3      	bne.n	2020 <data_out_block_mode+0x24>
    2038:	e7f0      	b.n	201c <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    203a:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    203c:	f241 3088 	movw	r0, #5000	; 0x1388
    2040:	f006 fc27 	bl	8892 <z_impl_k_busy_wait>
}
    2044:	e7f0      	b.n	2028 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2046:	782b      	ldrb	r3, [r5, #0]
    2048:	b113      	cbz	r3, 2050 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    204a:	3c01      	subs	r4, #1
    204c:	d104      	bne.n	2058 <data_out_block_mode+0x5c>
		host_present = false;
    204e:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2050:	782b      	ldrb	r3, [r5, #0]
    2052:	2b00      	cmp	r3, #0
    2054:	d1d7      	bne.n	2006 <data_out_block_mode+0xa>
    2056:	e7e1      	b.n	201c <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2058:	f241 3088 	movw	r0, #5000	; 0x1388
    205c:	f006 fc19 	bl	8892 <z_impl_k_busy_wait>
    2060:	e7f6      	b.n	2050 <data_out_block_mode+0x54>
    2062:	bf00      	nop
    2064:	20000c04 	.word	0x20000c04
    2068:	20000c05 	.word	0x20000c05

0000206c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    206c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2070:	4605      	mov	r5, r0
    2072:	f04f 0320 	mov.w	r3, #32
    2076:	f3ef 8611 	mrs	r6, BASEPRI
    207a:	f383 8812 	msr	BASEPRI_MAX, r3
    207e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2082:	4821      	ldr	r0, [pc, #132]	; (2108 <pm_state_notify+0x9c>)
    2084:	f003 fc50 	bl	5928 <z_spin_lock_valid>
    2088:	b968      	cbnz	r0, 20a6 <pm_state_notify+0x3a>
    208a:	4a20      	ldr	r2, [pc, #128]	; (210c <pm_state_notify+0xa0>)
    208c:	4920      	ldr	r1, [pc, #128]	; (2110 <pm_state_notify+0xa4>)
    208e:	4821      	ldr	r0, [pc, #132]	; (2114 <pm_state_notify+0xa8>)
    2090:	238e      	movs	r3, #142	; 0x8e
    2092:	f005 fffd 	bl	8090 <assert_print>
    2096:	491c      	ldr	r1, [pc, #112]	; (2108 <pm_state_notify+0x9c>)
    2098:	481f      	ldr	r0, [pc, #124]	; (2118 <pm_state_notify+0xac>)
    209a:	f005 fff9 	bl	8090 <assert_print>
    209e:	481b      	ldr	r0, [pc, #108]	; (210c <pm_state_notify+0xa0>)
    20a0:	218e      	movs	r1, #142	; 0x8e
    20a2:	f005 ffee 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    20a6:	4818      	ldr	r0, [pc, #96]	; (2108 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    20a8:	4f1c      	ldr	r7, [pc, #112]	; (211c <pm_state_notify+0xb0>)
    20aa:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2120 <pm_state_notify+0xb4>
    20ae:	f003 fc59 	bl	5964 <z_spin_lock_set_owner>
	return list->head;
    20b2:	4b1c      	ldr	r3, [pc, #112]	; (2124 <pm_state_notify+0xb8>)
    20b4:	681c      	ldr	r4, [r3, #0]
    20b6:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    20ba:	b9bc      	cbnz	r4, 20ec <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    20bc:	4812      	ldr	r0, [pc, #72]	; (2108 <pm_state_notify+0x9c>)
    20be:	f003 fc41 	bl	5944 <z_spin_unlock_valid>
    20c2:	b968      	cbnz	r0, 20e0 <pm_state_notify+0x74>
    20c4:	4a11      	ldr	r2, [pc, #68]	; (210c <pm_state_notify+0xa0>)
    20c6:	4918      	ldr	r1, [pc, #96]	; (2128 <pm_state_notify+0xbc>)
    20c8:	4812      	ldr	r0, [pc, #72]	; (2114 <pm_state_notify+0xa8>)
    20ca:	23b9      	movs	r3, #185	; 0xb9
    20cc:	f005 ffe0 	bl	8090 <assert_print>
    20d0:	490d      	ldr	r1, [pc, #52]	; (2108 <pm_state_notify+0x9c>)
    20d2:	4816      	ldr	r0, [pc, #88]	; (212c <pm_state_notify+0xc0>)
    20d4:	f005 ffdc 	bl	8090 <assert_print>
    20d8:	480c      	ldr	r0, [pc, #48]	; (210c <pm_state_notify+0xa0>)
    20da:	21b9      	movs	r1, #185	; 0xb9
    20dc:	f005 ffd1 	bl	8082 <assert_post_action>
	__asm__ volatile(
    20e0:	f386 8811 	msr	BASEPRI, r6
    20e4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    20e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    20ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    20f0:	2d00      	cmp	r5, #0
    20f2:	bf18      	it	ne
    20f4:	4613      	movne	r3, r2
		if (callback) {
    20f6:	b12b      	cbz	r3, 2104 <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    20f8:	f898 2014 	ldrb.w	r2, [r8, #20]
    20fc:	fb09 f202 	mul.w	r2, r9, r2
    2100:	5cb8      	ldrb	r0, [r7, r2]
    2102:	4798      	blx	r3
	return node->next;
    2104:	6824      	ldr	r4, [r4, #0]
    2106:	e7d8      	b.n	20ba <pm_state_notify+0x4e>
    2108:	20000330 	.word	0x20000330
    210c:	0000908d 	.word	0x0000908d
    2110:	000090e6 	.word	0x000090e6
    2114:	00008f43 	.word	0x00008f43
    2118:	000090fb 	.word	0x000090fb
    211c:	20000338 	.word	0x20000338
    2120:	200009e0 	.word	0x200009e0
    2124:	20000344 	.word	0x20000344
    2128:	000090ba 	.word	0x000090ba
    212c:	000090d1 	.word	0x000090d1

00002130 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2130:	4a0a      	ldr	r2, [pc, #40]	; (215c <atomic_clear_bit.constprop.0+0x2c>)
    2132:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2136:	0943      	lsrs	r3, r0, #5
    2138:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    213c:	f000 001f 	and.w	r0, r0, #31
    2140:	2301      	movs	r3, #1
    2142:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2144:	43db      	mvns	r3, r3
    2146:	e852 0f00 	ldrex	r0, [r2]
    214a:	4018      	ands	r0, r3
    214c:	e842 0100 	strex	r1, r0, [r2]
    2150:	2900      	cmp	r1, #0
    2152:	d1f8      	bne.n	2146 <atomic_clear_bit.constprop.0+0x16>
    2154:	f3bf 8f5b 	dmb	ish
}
    2158:	4770      	bx	lr
    215a:	bf00      	nop
    215c:	20000334 	.word	0x20000334

00002160 <pm_system_resume>:

void pm_system_resume(void)
{
    2160:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    2162:	4b19      	ldr	r3, [pc, #100]	; (21c8 <pm_system_resume+0x68>)
    2164:	7d1c      	ldrb	r4, [r3, #20]
    2166:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    216a:	f004 031f 	and.w	r3, r4, #31
    216e:	2201      	movs	r2, #1
    2170:	409a      	lsls	r2, r3
    2172:	4b16      	ldr	r3, [pc, #88]	; (21cc <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2174:	0961      	lsrs	r1, r4, #5
    2176:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    217a:	43d0      	mvns	r0, r2
    217c:	e853 1f00 	ldrex	r1, [r3]
    2180:	ea01 0500 	and.w	r5, r1, r0
    2184:	e843 5600 	strex	r6, r5, [r3]
    2188:	2e00      	cmp	r6, #0
    218a:	d1f7      	bne.n	217c <pm_system_resume+0x1c>
    218c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2190:	420a      	tst	r2, r1
    2192:	d013      	beq.n	21bc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2194:	4b0e      	ldr	r3, [pc, #56]	; (21d0 <pm_system_resume+0x70>)
    2196:	4d0f      	ldr	r5, [pc, #60]	; (21d4 <pm_system_resume+0x74>)
    2198:	b18b      	cbz	r3, 21be <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    219a:	230c      	movs	r3, #12
    219c:	4363      	muls	r3, r4
    219e:	18ea      	adds	r2, r5, r3
    21a0:	5ce8      	ldrb	r0, [r5, r3]
    21a2:	7851      	ldrb	r1, [r2, #1]
    21a4:	f006 f86a 	bl	827c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    21a8:	2000      	movs	r0, #0
    21aa:	f7ff ff5f 	bl	206c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    21ae:	230c      	movs	r3, #12
    21b0:	435c      	muls	r4, r3
    21b2:	192a      	adds	r2, r5, r4
    21b4:	2300      	movs	r3, #0
    21b6:	512b      	str	r3, [r5, r4]
    21b8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    21bc:	bd70      	pop	{r4, r5, r6, pc}
    21be:	f383 8811 	msr	BASEPRI, r3
    21c2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    21c6:	e7ef      	b.n	21a8 <pm_system_resume+0x48>
    21c8:	200009e0 	.word	0x200009e0
    21cc:	2000034c 	.word	0x2000034c
    21d0:	0000827d 	.word	0x0000827d
    21d4:	20000338 	.word	0x20000338

000021d8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    21d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    21dc:	4b32      	ldr	r3, [pc, #200]	; (22a8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    21de:	4a33      	ldr	r2, [pc, #204]	; (22ac <pm_system_suspend+0xd4>)
    21e0:	7d1c      	ldrb	r4, [r3, #20]
    21e2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    21e6:	0963      	lsrs	r3, r4, #5
    21e8:	ea4f 0883 	mov.w	r8, r3, lsl #2
    21ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21f0:	4e2f      	ldr	r6, [pc, #188]	; (22b0 <pm_system_suspend+0xd8>)
    21f2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    21f6:	f004 091f 	and.w	r9, r4, #31
    21fa:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    21fe:	f013 0f01 	tst.w	r3, #1
{
    2202:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2204:	d10a      	bne.n	221c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2206:	4601      	mov	r1, r0
    2208:	4620      	mov	r0, r4
    220a:	f000 f869 	bl	22e0 <pm_policy_next_state>
		if (info != NULL) {
    220e:	b128      	cbz	r0, 221c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2210:	c807      	ldmia	r0, {r0, r1, r2}
    2212:	230c      	movs	r3, #12
    2214:	fb03 6304 	mla	r3, r3, r4, r6
    2218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    221c:	230c      	movs	r3, #12
    221e:	4363      	muls	r3, r4
    2220:	18f2      	adds	r2, r6, r3
    2222:	5cf5      	ldrb	r5, [r6, r3]
    2224:	b92d      	cbnz	r5, 2232 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2226:	4620      	mov	r0, r4
    2228:	f7ff ff82 	bl	2130 <atomic_clear_bit.constprop.0>
		ret = false;
    222c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2232:	1c7b      	adds	r3, r7, #1
    2234:	d010      	beq.n	2258 <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2236:	f8d2 c008 	ldr.w	ip, [r2, #8]
    223a:	4d1e      	ldr	r5, [pc, #120]	; (22b4 <pm_system_suspend+0xdc>)
    223c:	4a1e      	ldr	r2, [pc, #120]	; (22b8 <pm_system_suspend+0xe0>)
    223e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2242:	2100      	movs	r1, #0
    2244:	fbec 5100 	umlal	r5, r1, ip, r0
    2248:	2300      	movs	r3, #0
    224a:	4628      	mov	r0, r5
    224c:	f7fd ff58 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2250:	2101      	movs	r1, #1
    2252:	1a38      	subs	r0, r7, r0
    2254:	f005 f8c0 	bl	73d8 <z_set_timeout_expiry>
	k_sched_lock();
    2258:	f004 f822 	bl	62a0 <k_sched_lock>
	pm_state_notify(true);
    225c:	2001      	movs	r0, #1
    225e:	f7ff ff05 	bl	206c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2262:	f3bf 8f5b 	dmb	ish
    2266:	4b15      	ldr	r3, [pc, #84]	; (22bc <pm_system_suspend+0xe4>)
    2268:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    226a:	2301      	movs	r3, #1
    226c:	fa03 f309 	lsl.w	r3, r3, r9
    2270:	e858 2f00 	ldrex	r2, [r8]
    2274:	431a      	orrs	r2, r3
    2276:	e848 2100 	strex	r1, r2, [r8]
    227a:	2900      	cmp	r1, #0
    227c:	d1f8      	bne.n	2270 <pm_system_suspend+0x98>
    227e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2282:	4b0f      	ldr	r3, [pc, #60]	; (22c0 <pm_system_suspend+0xe8>)
    2284:	b133      	cbz	r3, 2294 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2286:	230c      	movs	r3, #12
    2288:	4363      	muls	r3, r4
    228a:	18f2      	adds	r2, r6, r3
    228c:	5cf0      	ldrb	r0, [r6, r3]
    228e:	7851      	ldrb	r1, [r2, #1]
    2290:	f005 ffe8 	bl	8264 <pm_state_set>
	pm_system_resume();
    2294:	f7ff ff64 	bl	2160 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2298:	4620      	mov	r0, r4
    229a:	f7ff ff49 	bl	2130 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    229e:	f004 f873 	bl	6388 <k_sched_unlock>
	bool ret = true;
    22a2:	2001      	movs	r0, #1
    22a4:	e7c3      	b.n	222e <pm_system_suspend+0x56>
    22a6:	bf00      	nop
    22a8:	200009e0 	.word	0x200009e0
    22ac:	20000334 	.word	0x20000334
    22b0:	20000338 	.word	0x20000338
    22b4:	000f423f 	.word	0x000f423f
    22b8:	000f4240 	.word	0x000f4240
    22bc:	2000034c 	.word	0x2000034c
    22c0:	00008265 	.word	0x00008265

000022c4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22c4:	4b05      	ldr	r3, [pc, #20]	; (22dc <pm_policy_state_lock_is_active+0x18>)
    22c6:	f3bf 8f5b 	dmb	ish
    22ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    22ce:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    22d2:	3800      	subs	r0, #0
    22d4:	bf18      	it	ne
    22d6:	2001      	movne	r0, #1
    22d8:	4770      	bx	lr
    22da:	bf00      	nop
    22dc:	20000350 	.word	0x20000350

000022e0 <pm_policy_next_state>:
{
    22e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22e4:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    22e6:	a901      	add	r1, sp, #4
    22e8:	f000 f842 	bl	2370 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22ec:	1e44      	subs	r4, r0, #1
    22ee:	b224      	sxth	r4, r4
    22f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    22f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2364 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    22f8:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    22fa:	00a4      	lsls	r4, r4, #2
    22fc:	b925      	cbnz	r5, 2308 <pm_policy_next_state+0x28>
	return NULL;
    22fe:	462f      	mov	r7, r5
}
    2300:	4638      	mov	r0, r7
    2302:	b003      	add	sp, #12
    2304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2308:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    230a:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    230c:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    230e:	f7ff ffd9 	bl	22c4 <pm_policy_state_lock_is_active>
    2312:	4606      	mov	r6, r0
    2314:	bb10      	cbnz	r0, 235c <pm_policy_next_state+0x7c>
    2316:	6878      	ldr	r0, [r7, #4]
    2318:	4a13      	ldr	r2, [pc, #76]	; (2368 <pm_policy_next_state+0x88>)
    231a:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    231e:	46cc      	mov	ip, r9
    2320:	4631      	mov	r1, r6
    2322:	fbe0 c10a 	umlal	ip, r1, r0, sl
    2326:	2300      	movs	r3, #0
    2328:	4660      	mov	r0, ip
    232a:	f7fd fee9 	bl	100 <__aeabi_uldivmod>
    232e:	4683      	mov	fp, r0
    2330:	68b8      	ldr	r0, [r7, #8]
    2332:	4a0d      	ldr	r2, [pc, #52]	; (2368 <pm_policy_next_state+0x88>)
    2334:	46cc      	mov	ip, r9
    2336:	4631      	mov	r1, r6
    2338:	fbe0 c10a 	umlal	ip, r1, r0, sl
    233c:	2300      	movs	r3, #0
    233e:	4660      	mov	r0, ip
    2340:	f7fd fede 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2344:	4b09      	ldr	r3, [pc, #36]	; (236c <pm_policy_next_state+0x8c>)
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	1c5a      	adds	r2, r3, #1
    234a:	d001      	beq.n	2350 <pm_policy_next_state+0x70>
    234c:	4283      	cmp	r3, r0
    234e:	d905      	bls.n	235c <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    2350:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2354:	d0d4      	beq.n	2300 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    2356:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    2358:	4540      	cmp	r0, r8
    235a:	d9d1      	bls.n	2300 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    235c:	3d01      	subs	r5, #1
    235e:	b2ad      	uxth	r5, r5
    2360:	3c0c      	subs	r4, #12
    2362:	e7cb      	b.n	22fc <pm_policy_next_state+0x1c>
    2364:	000f423f 	.word	0x000f423f
    2368:	000f4240 	.word	0x000f4240
    236c:	20000008 	.word	0x20000008

00002370 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2370:	b908      	cbnz	r0, 2376 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2372:	4b02      	ldr	r3, [pc, #8]	; (237c <pm_state_cpu_get_all+0xc>)
    2374:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2376:	2000      	movs	r0, #0
    2378:	4770      	bx	lr
    237a:	bf00      	nop
    237c:	00008cec 	.word	0x00008cec

00002380 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2380:	4801      	ldr	r0, [pc, #4]	; (2388 <nrf_cc3xx_platform_abort_init+0x8>)
    2382:	f005 bb21 	b.w	79c8 <nrf_cc3xx_platform_set_abort>
    2386:	bf00      	nop
    2388:	00008cec 	.word	0x00008cec

0000238c <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    238c:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    238e:	4604      	mov	r4, r0
    2390:	b918      	cbnz	r0, 239a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2392:	4b0d      	ldr	r3, [pc, #52]	; (23c8 <mutex_free_platform+0x3c>)
    2394:	480d      	ldr	r0, [pc, #52]	; (23cc <mutex_free_platform+0x40>)
    2396:	685b      	ldr	r3, [r3, #4]
    2398:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    239a:	6861      	ldr	r1, [r4, #4]
    239c:	f031 0304 	bics.w	r3, r1, #4
    23a0:	d00c      	beq.n	23bc <mutex_free_platform+0x30>
    23a2:	2908      	cmp	r1, #8
    23a4:	d00a      	beq.n	23bc <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    23a6:	f011 0102 	ands.w	r1, r1, #2
    23aa:	d008      	beq.n	23be <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    23ac:	4808      	ldr	r0, [pc, #32]	; (23d0 <mutex_free_platform+0x44>)
    23ae:	4621      	mov	r1, r4
    23b0:	f003 f96a 	bl	5688 <k_mem_slab_free>
        mutex->mutex = NULL;
    23b4:	2300      	movs	r3, #0
    23b6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    23b8:	2300      	movs	r3, #0
    23ba:	6063      	str	r3, [r4, #4]
}
    23bc:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    23be:	6820      	ldr	r0, [r4, #0]
    23c0:	2214      	movs	r2, #20
    23c2:	f005 ff43 	bl	824c <memset>
    23c6:	e7f7      	b.n	23b8 <mutex_free_platform+0x2c>
    23c8:	200000e4 	.word	0x200000e4
    23cc:	000095b5 	.word	0x000095b5
    23d0:	2000086c 	.word	0x2000086c

000023d4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23d4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    23d6:	b308      	cbz	r0, 241c <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    23d8:	6843      	ldr	r3, [r0, #4]
    23da:	2b04      	cmp	r3, #4
    23dc:	d110      	bne.n	2400 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    23de:	2201      	movs	r2, #1
    23e0:	6803      	ldr	r3, [r0, #0]
    23e2:	f3bf 8f5b 	dmb	ish
    23e6:	e853 1f00 	ldrex	r1, [r3]
    23ea:	2900      	cmp	r1, #0
    23ec:	d103      	bne.n	23f6 <mutex_lock_platform+0x22>
    23ee:	e843 2000 	strex	r0, r2, [r3]
    23f2:	2800      	cmp	r0, #0
    23f4:	d1f7      	bne.n	23e6 <mutex_lock_platform+0x12>
    23f6:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    23fa:	d10b      	bne.n	2414 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    23fc:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    23fe:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2400:	b153      	cbz	r3, 2418 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2402:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    2404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    240c:	f003 fae4 	bl	59d8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2410:	2800      	cmp	r0, #0
    2412:	d0f3      	beq.n	23fc <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2414:	4803      	ldr	r0, [pc, #12]	; (2424 <mutex_lock_platform+0x50>)
    2416:	e7f2      	b.n	23fe <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2418:	4803      	ldr	r0, [pc, #12]	; (2428 <mutex_lock_platform+0x54>)
    241a:	e7f0      	b.n	23fe <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    241c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2420:	e7ed      	b.n	23fe <mutex_lock_platform+0x2a>
    2422:	bf00      	nop
    2424:	ffff8fe9 	.word	0xffff8fe9
    2428:	ffff8fea 	.word	0xffff8fea

0000242c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    242c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    242e:	b1c0      	cbz	r0, 2462 <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2430:	6843      	ldr	r3, [r0, #4]
    2432:	2b04      	cmp	r3, #4
    2434:	d110      	bne.n	2458 <mutex_unlock_platform+0x2c>
    2436:	2200      	movs	r2, #0
    2438:	6803      	ldr	r3, [r0, #0]
    243a:	f3bf 8f5b 	dmb	ish
    243e:	e853 1f00 	ldrex	r1, [r3]
    2442:	2901      	cmp	r1, #1
    2444:	d103      	bne.n	244e <mutex_unlock_platform+0x22>
    2446:	e843 2000 	strex	r0, r2, [r3]
    244a:	2800      	cmp	r0, #0
    244c:	d1f7      	bne.n	243e <mutex_unlock_platform+0x12>
    244e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2452:	d109      	bne.n	2468 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2454:	2000      	movs	r0, #0
    }
}
    2456:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2458:	b143      	cbz	r3, 246c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    245a:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    245c:	f003 fbb6 	bl	5bcc <z_impl_k_mutex_unlock>
    2460:	e7f8      	b.n	2454 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2462:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2466:	e7f6      	b.n	2456 <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2468:	4801      	ldr	r0, [pc, #4]	; (2470 <mutex_unlock_platform+0x44>)
    246a:	e7f4      	b.n	2456 <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    246c:	4801      	ldr	r0, [pc, #4]	; (2474 <mutex_unlock_platform+0x48>)
    246e:	e7f2      	b.n	2456 <mutex_unlock_platform+0x2a>
    2470:	ffff8fe9 	.word	0xffff8fe9
    2474:	ffff8fea 	.word	0xffff8fea

00002478 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2478:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    247a:	4604      	mov	r4, r0
    247c:	b918      	cbnz	r0, 2486 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    247e:	4b16      	ldr	r3, [pc, #88]	; (24d8 <mutex_init_platform+0x60>)
    2480:	4816      	ldr	r0, [pc, #88]	; (24dc <mutex_init_platform+0x64>)
    2482:	685b      	ldr	r3, [r3, #4]
    2484:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2486:	6863      	ldr	r3, [r4, #4]
    2488:	2b04      	cmp	r3, #4
    248a:	d023      	beq.n	24d4 <mutex_init_platform+0x5c>
    248c:	2b08      	cmp	r3, #8
    248e:	d021      	beq.n	24d4 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2490:	b9cb      	cbnz	r3, 24c6 <mutex_init_platform+0x4e>
    2492:	6823      	ldr	r3, [r4, #0]
    2494:	b9bb      	cbnz	r3, 24c6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2496:	4812      	ldr	r0, [pc, #72]	; (24e0 <mutex_init_platform+0x68>)
    2498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    249c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24a0:	4621      	mov	r1, r4
    24a2:	f003 f885 	bl	55b0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    24a6:	b908      	cbnz	r0, 24ac <mutex_init_platform+0x34>
    24a8:	6823      	ldr	r3, [r4, #0]
    24aa:	b91b      	cbnz	r3, 24b4 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    24ac:	4b0a      	ldr	r3, [pc, #40]	; (24d8 <mutex_init_platform+0x60>)
    24ae:	480d      	ldr	r0, [pc, #52]	; (24e4 <mutex_init_platform+0x6c>)
    24b0:	685b      	ldr	r3, [r3, #4]
    24b2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    24b4:	6820      	ldr	r0, [r4, #0]
    24b6:	2214      	movs	r2, #20
    24b8:	2100      	movs	r1, #0
    24ba:	f005 fec7 	bl	824c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    24be:	6863      	ldr	r3, [r4, #4]
    24c0:	f043 0302 	orr.w	r3, r3, #2
    24c4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    24c6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    24c8:	f006 f9c2 	bl	8850 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    24cc:	6863      	ldr	r3, [r4, #4]
    24ce:	f043 0301 	orr.w	r3, r3, #1
    24d2:	6063      	str	r3, [r4, #4]
}
    24d4:	bd10      	pop	{r4, pc}
    24d6:	bf00      	nop
    24d8:	200000e4 	.word	0x200000e4
    24dc:	000095b5 	.word	0x000095b5
    24e0:	2000086c 	.word	0x2000086c
    24e4:	000095db 	.word	0x000095db

000024e8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    24e8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    24ea:	4906      	ldr	r1, [pc, #24]	; (2504 <nrf_cc3xx_platform_mutex_init+0x1c>)
    24ec:	4806      	ldr	r0, [pc, #24]	; (2508 <nrf_cc3xx_platform_mutex_init+0x20>)
    24ee:	2340      	movs	r3, #64	; 0x40
    24f0:	2214      	movs	r2, #20
    24f2:	f006 f97a 	bl	87ea <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    24f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    24fa:	4904      	ldr	r1, [pc, #16]	; (250c <nrf_cc3xx_platform_mutex_init+0x24>)
    24fc:	4804      	ldr	r0, [pc, #16]	; (2510 <nrf_cc3xx_platform_mutex_init+0x28>)
    24fe:	f005 bac3 	b.w	7a88 <nrf_cc3xx_platform_set_mutexes>
    2502:	bf00      	nop
    2504:	2000036c 	.word	0x2000036c
    2508:	2000086c 	.word	0x2000086c
    250c:	00008cf4 	.word	0x00008cf4
    2510:	00008d08 	.word	0x00008d08

00002514 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2514:	4901      	ldr	r1, [pc, #4]	; (251c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2516:	2210      	movs	r2, #16
	str	r2, [r1]
    2518:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    251a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    251c:	e000ed10 	.word	0xe000ed10

00002520 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2520:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2522:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2524:	f380 8811 	msr	BASEPRI, r0
	isb
    2528:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    252c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2530:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2532:	b662      	cpsie	i
	isb
    2534:	f3bf 8f6f 	isb	sy

	bx	lr
    2538:	4770      	bx	lr
    253a:	bf00      	nop

0000253c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    253c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    253e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2540:	f381 8811 	msr	BASEPRI, r1

	wfe
    2544:	bf20      	wfe

	msr	BASEPRI, r0
    2546:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    254a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    254c:	4770      	bx	lr
    254e:	bf00      	nop

00002550 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2550:	b570      	push	{r4, r5, r6, lr}
    2552:	4606      	mov	r6, r0
    2554:	b086      	sub	sp, #24

	if (esf != NULL) {
    2556:	460d      	mov	r5, r1
    2558:	2900      	cmp	r1, #0
    255a:	d038      	beq.n	25ce <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    255c:	688b      	ldr	r3, [r1, #8]
    255e:	9305      	str	r3, [sp, #20]
    2560:	684b      	ldr	r3, [r1, #4]
    2562:	9304      	str	r3, [sp, #16]
    2564:	680b      	ldr	r3, [r1, #0]
    2566:	9303      	str	r3, [sp, #12]
    2568:	2400      	movs	r4, #0
    256a:	4b1c      	ldr	r3, [pc, #112]	; (25dc <z_arm_fatal_error+0x8c>)
    256c:	491c      	ldr	r1, [pc, #112]	; (25e0 <z_arm_fatal_error+0x90>)
    256e:	9302      	str	r3, [sp, #8]
    2570:	2201      	movs	r2, #1
    2572:	4623      	mov	r3, r4
    2574:	4620      	mov	r0, r4
    2576:	e9cd 4400 	strd	r4, r4, [sp]
    257a:	f005 fe03 	bl	8184 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    257e:	696b      	ldr	r3, [r5, #20]
    2580:	9305      	str	r3, [sp, #20]
    2582:	692b      	ldr	r3, [r5, #16]
    2584:	9304      	str	r3, [sp, #16]
    2586:	68eb      	ldr	r3, [r5, #12]
    2588:	9303      	str	r3, [sp, #12]
    258a:	4b16      	ldr	r3, [pc, #88]	; (25e4 <z_arm_fatal_error+0x94>)
    258c:	4914      	ldr	r1, [pc, #80]	; (25e0 <z_arm_fatal_error+0x90>)
    258e:	9400      	str	r4, [sp, #0]
    2590:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2594:	2201      	movs	r2, #1
    2596:	4623      	mov	r3, r4
    2598:	4620      	mov	r0, r4
    259a:	f005 fdf3 	bl	8184 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    259e:	69eb      	ldr	r3, [r5, #28]
    25a0:	9303      	str	r3, [sp, #12]
    25a2:	4b11      	ldr	r3, [pc, #68]	; (25e8 <z_arm_fatal_error+0x98>)
    25a4:	490e      	ldr	r1, [pc, #56]	; (25e0 <z_arm_fatal_error+0x90>)
    25a6:	9400      	str	r4, [sp, #0]
    25a8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    25ac:	2201      	movs	r2, #1
    25ae:	4623      	mov	r3, r4
    25b0:	4620      	mov	r0, r4
    25b2:	f005 fde7 	bl	8184 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    25b6:	69ab      	ldr	r3, [r5, #24]
    25b8:	9303      	str	r3, [sp, #12]
    25ba:	4b0c      	ldr	r3, [pc, #48]	; (25ec <z_arm_fatal_error+0x9c>)
    25bc:	4908      	ldr	r1, [pc, #32]	; (25e0 <z_arm_fatal_error+0x90>)
    25be:	9400      	str	r4, [sp, #0]
    25c0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    25c4:	2201      	movs	r2, #1
    25c6:	4623      	mov	r3, r4
    25c8:	4620      	mov	r0, r4
    25ca:	f005 fddb 	bl	8184 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    25ce:	4629      	mov	r1, r5
    25d0:	4630      	mov	r0, r6
}
    25d2:	b006      	add	sp, #24
    25d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    25d8:	f002 be6a 	b.w	52b0 <z_fatal_error>
    25dc:	00009608 	.word	0x00009608
    25e0:	00008be8 	.word	0x00008be8
    25e4:	00009637 	.word	0x00009637
    25e8:	00009666 	.word	0x00009666
    25ec:	00009675 	.word	0x00009675

000025f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    25f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    25f2:	2800      	cmp	r0, #0
    25f4:	db07      	blt.n	2606 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f6:	4a04      	ldr	r2, [pc, #16]	; (2608 <arch_irq_enable+0x18>)
    25f8:	0941      	lsrs	r1, r0, #5
    25fa:	2301      	movs	r3, #1
    25fc:	f000 001f 	and.w	r0, r0, #31
    2600:	4083      	lsls	r3, r0
    2602:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2606:	4770      	bx	lr
    2608:	e000e100 	.word	0xe000e100

0000260c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    260c:	4b05      	ldr	r3, [pc, #20]	; (2624 <arch_irq_is_enabled+0x18>)
    260e:	0942      	lsrs	r2, r0, #5
    2610:	f000 001f 	and.w	r0, r0, #31
    2614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2618:	2301      	movs	r3, #1
    261a:	fa03 f000 	lsl.w	r0, r3, r0
}
    261e:	4010      	ands	r0, r2
    2620:	4770      	bx	lr
    2622:	bf00      	nop
    2624:	e000e100 	.word	0xe000e100

00002628 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2628:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    262a:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    262c:	2d07      	cmp	r5, #7
{
    262e:	4604      	mov	r4, r0
    2630:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2632:	d90f      	bls.n	2654 <z_arm_irq_priority_set+0x2c>
    2634:	4a11      	ldr	r2, [pc, #68]	; (267c <z_arm_irq_priority_set+0x54>)
    2636:	4912      	ldr	r1, [pc, #72]	; (2680 <z_arm_irq_priority_set+0x58>)
    2638:	4812      	ldr	r0, [pc, #72]	; (2684 <z_arm_irq_priority_set+0x5c>)
    263a:	2357      	movs	r3, #87	; 0x57
    263c:	f005 fd28 	bl	8090 <assert_print>
    2640:	4811      	ldr	r0, [pc, #68]	; (2688 <z_arm_irq_priority_set+0x60>)
    2642:	4631      	mov	r1, r6
    2644:	2307      	movs	r3, #7
    2646:	4622      	mov	r2, r4
    2648:	f005 fd22 	bl	8090 <assert_print>
    264c:	480b      	ldr	r0, [pc, #44]	; (267c <z_arm_irq_priority_set+0x54>)
    264e:	2157      	movs	r1, #87	; 0x57
    2650:	f005 fd17 	bl	8082 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2654:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2656:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2658:	bfac      	ite	ge
    265a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    265e:	4b0b      	ldrlt	r3, [pc, #44]	; (268c <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2660:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2664:	bfb8      	it	lt
    2666:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    266a:	b2ed      	uxtb	r5, r5
    266c:	bfaa      	itet	ge
    266e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2672:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2674:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    2678:	bd70      	pop	{r4, r5, r6, pc}
    267a:	bf00      	nop
    267c:	000096a3 	.word	0x000096a3
    2680:	000096d9 	.word	0x000096d9
    2684:	00008f43 	.word	0x00008f43
    2688:	000096f4 	.word	0x000096f4
    268c:	e000ed14 	.word	0xe000ed14

00002690 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2690:	bf30      	wfi
    b z_SysNmiOnReset
    2692:	f7ff bffd 	b.w	2690 <z_SysNmiOnReset>
    2696:	bf00      	nop

00002698 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2698:	4a0b      	ldr	r2, [pc, #44]	; (26c8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    269a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    269c:	4b0b      	ldr	r3, [pc, #44]	; (26cc <z_arm_prep_c+0x34>)
    269e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    26a2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    26a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26a8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    26ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    26b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    26b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    26b8:	f002 fe8e 	bl	53d8 <z_bss_zero>
	z_data_copy();
    26bc:	f004 fcc6 	bl	704c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    26c0:	f000 fbda 	bl	2e78 <z_arm_interrupt_init>
	z_cstart();
    26c4:	f002 fecc 	bl	5460 <z_cstart>
    26c8:	00000000 	.word	0x00000000
    26cc:	e000ed00 	.word	0xe000ed00

000026d0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    26d0:	4a09      	ldr	r2, [pc, #36]	; (26f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    26d2:	490a      	ldr	r1, [pc, #40]	; (26fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    26d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    26d6:	6809      	ldr	r1, [r1, #0]
    26d8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26da:	4909      	ldr	r1, [pc, #36]	; (2700 <arch_swap+0x30>)
	_current->arch.basepri = key;
    26dc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26de:	684b      	ldr	r3, [r1, #4]
    26e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26e4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    26e6:	2300      	movs	r3, #0
    26e8:	f383 8811 	msr	BASEPRI, r3
    26ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    26f0:	6893      	ldr	r3, [r2, #8]
}
    26f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    26f4:	4770      	bx	lr
    26f6:	bf00      	nop
    26f8:	200009e0 	.word	0x200009e0
    26fc:	00008e4c 	.word	0x00008e4c
    2700:	e000ed00 	.word	0xe000ed00

00002704 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2704:	4912      	ldr	r1, [pc, #72]	; (2750 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2706:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2708:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    270c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    270e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2712:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2716:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2718:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    271c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2720:	4f0c      	ldr	r7, [pc, #48]	; (2754 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2722:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2726:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2728:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    272a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    272c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    272e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2730:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2732:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2736:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2738:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    273a:	f000 fc39 	bl	2fb0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    273e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2742:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2746:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    274a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    274e:	4770      	bx	lr
    ldr r1, =_kernel
    2750:	200009e0 	.word	0x200009e0
    ldr v4, =_SCS_ICSR
    2754:	e000ed04 	.word	0xe000ed04

00002758 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2758:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    275c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    275e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2762:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2766:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2768:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    276c:	2902      	cmp	r1, #2
    beq _oops
    276e:	d0ff      	beq.n	2770 <_oops>

00002770 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2770:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2772:	f005 fd17 	bl	81a4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2776:	bd01      	pop	{r0, pc}

00002778 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2778:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    277c:	9b00      	ldr	r3, [sp, #0]
    277e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2782:	490a      	ldr	r1, [pc, #40]	; (27ac <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2784:	9b01      	ldr	r3, [sp, #4]
    2786:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    278a:	9b02      	ldr	r3, [sp, #8]
    278c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2790:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2798:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    279c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    27a0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    27a2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    27a4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    27a6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    27a8:	4770      	bx	lr
    27aa:	bf00      	nop
    27ac:	00007e2f 	.word	0x00007e2f

000027b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    27b0:	4a09      	ldr	r2, [pc, #36]	; (27d8 <z_check_thread_stack_fail+0x28>)
{
    27b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    27b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    27b6:	b170      	cbz	r0, 27d6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    27b8:	f113 0f16 	cmn.w	r3, #22
    27bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    27be:	d005      	beq.n	27cc <z_check_thread_stack_fail+0x1c>
    27c0:	f1a0 0220 	sub.w	r2, r0, #32
    27c4:	429a      	cmp	r2, r3
    27c6:	d805      	bhi.n	27d4 <z_check_thread_stack_fail+0x24>
    27c8:	4283      	cmp	r3, r0
    27ca:	d203      	bcs.n	27d4 <z_check_thread_stack_fail+0x24>
		return 0;
    27cc:	4281      	cmp	r1, r0
    27ce:	bf28      	it	cs
    27d0:	2000      	movcs	r0, #0
    27d2:	4770      	bx	lr
    27d4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    27d6:	4770      	bx	lr
    27d8:	200009e0 	.word	0x200009e0

000027dc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    27dc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    27de:	4b09      	ldr	r3, [pc, #36]	; (2804 <arch_switch_to_main_thread+0x28>)
    27e0:	6098      	str	r0, [r3, #8]
{
    27e2:	460d      	mov	r5, r1
    27e4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    27e6:	f000 fbe3 	bl	2fb0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    27ea:	4620      	mov	r0, r4
    27ec:	f385 8809 	msr	PSP, r5
    27f0:	2100      	movs	r1, #0
    27f2:	b663      	cpsie	if
    27f4:	f381 8811 	msr	BASEPRI, r1
    27f8:	f3bf 8f6f 	isb	sy
    27fc:	2200      	movs	r2, #0
    27fe:	2300      	movs	r3, #0
    2800:	f005 fb15 	bl	7e2e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2804:	200009e0 	.word	0x200009e0

00002808 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2808:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    280a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    280c:	4a0b      	ldr	r2, [pc, #44]	; (283c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    280e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2810:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2812:	bf1e      	ittt	ne
	movne	r1, #0
    2814:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2816:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2818:	f006 f80b 	blne	8832 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    281c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    281e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2822:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2826:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    282a:	4905      	ldr	r1, [pc, #20]	; (2840 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    282c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    282e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2830:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2832:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2836:	4903      	ldr	r1, [pc, #12]	; (2844 <_isr_wrapper+0x3c>)
	bx r1
    2838:	4708      	bx	r1
    283a:	0000      	.short	0x0000
	ldr r2, =_kernel
    283c:	200009e0 	.word	0x200009e0
	ldr r1, =_sw_isr_table
    2840:	00008a40 	.word	0x00008a40
	ldr r1, =z_arm_int_exit
    2844:	00002849 	.word	0x00002849

00002848 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2848:	4b04      	ldr	r3, [pc, #16]	; (285c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    284a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    284c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    284e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2850:	d003      	beq.n	285a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2852:	4903      	ldr	r1, [pc, #12]	; (2860 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2858:	600a      	str	r2, [r1, #0]

0000285a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    285a:	4770      	bx	lr
	ldr r3, =_kernel
    285c:	200009e0 	.word	0x200009e0
	ldr r1, =_SCS_ICSR
    2860:	e000ed04 	.word	0xe000ed04

00002864 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2868:	2400      	movs	r4, #0
    286a:	4b3b      	ldr	r3, [pc, #236]	; (2958 <bus_fault.constprop.0+0xf4>)
    286c:	9302      	str	r3, [sp, #8]
    286e:	e9cd 4400 	strd	r4, r4, [sp]
    2872:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2874:	4607      	mov	r7, r0
    2876:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2878:	2201      	movs	r2, #1
    287a:	4938      	ldr	r1, [pc, #224]	; (295c <bus_fault.constprop.0+0xf8>)
    287c:	4620      	mov	r0, r4
    287e:	f005 fca0 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2882:	4b37      	ldr	r3, [pc, #220]	; (2960 <bus_fault.constprop.0+0xfc>)
    2884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2886:	04db      	lsls	r3, r3, #19
    2888:	d509      	bpl.n	289e <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    288a:	4b36      	ldr	r3, [pc, #216]	; (2964 <bus_fault.constprop.0+0x100>)
    288c:	4933      	ldr	r1, [pc, #204]	; (295c <bus_fault.constprop.0+0xf8>)
    288e:	9400      	str	r4, [sp, #0]
    2890:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2894:	2201      	movs	r2, #1
    2896:	4623      	mov	r3, r4
    2898:	4620      	mov	r0, r4
    289a:	f005 fc92 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    289e:	4b30      	ldr	r3, [pc, #192]	; (2960 <bus_fault.constprop.0+0xfc>)
    28a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28a2:	051d      	lsls	r5, r3, #20
    28a4:	d509      	bpl.n	28ba <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    28a6:	4b30      	ldr	r3, [pc, #192]	; (2968 <bus_fault.constprop.0+0x104>)
    28a8:	9302      	str	r3, [sp, #8]
    28aa:	2300      	movs	r3, #0
    28ac:	e9cd 3300 	strd	r3, r3, [sp]
    28b0:	492a      	ldr	r1, [pc, #168]	; (295c <bus_fault.constprop.0+0xf8>)
    28b2:	2201      	movs	r2, #1
    28b4:	4618      	mov	r0, r3
    28b6:	f005 fc84 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    28ba:	4d29      	ldr	r5, [pc, #164]	; (2960 <bus_fault.constprop.0+0xfc>)
    28bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    28be:	059c      	lsls	r4, r3, #22
    28c0:	d51e      	bpl.n	2900 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    28c2:	2400      	movs	r4, #0
    28c4:	4b29      	ldr	r3, [pc, #164]	; (296c <bus_fault.constprop.0+0x108>)
    28c6:	9302      	str	r3, [sp, #8]
    28c8:	2201      	movs	r2, #1
    28ca:	4623      	mov	r3, r4
    28cc:	4620      	mov	r0, r4
    28ce:	e9cd 4400 	strd	r4, r4, [sp]
    28d2:	4922      	ldr	r1, [pc, #136]	; (295c <bus_fault.constprop.0+0xf8>)
    28d4:	f005 fc75 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    28d8:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    28da:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    28dc:	0410      	lsls	r0, r2, #16
    28de:	d50f      	bpl.n	2900 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    28e0:	9303      	str	r3, [sp, #12]
    28e2:	4b23      	ldr	r3, [pc, #140]	; (2970 <bus_fault.constprop.0+0x10c>)
    28e4:	491d      	ldr	r1, [pc, #116]	; (295c <bus_fault.constprop.0+0xf8>)
    28e6:	9400      	str	r4, [sp, #0]
    28e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    28ec:	2201      	movs	r2, #1
    28ee:	4623      	mov	r3, r4
    28f0:	4620      	mov	r0, r4
    28f2:	f005 fc66 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    28f6:	b11f      	cbz	r7, 2900 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    28f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    28fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    28fe:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2900:	4b17      	ldr	r3, [pc, #92]	; (2960 <bus_fault.constprop.0+0xfc>)
    2902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2904:	0559      	lsls	r1, r3, #21
    2906:	d509      	bpl.n	291c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2908:	4b1a      	ldr	r3, [pc, #104]	; (2974 <bus_fault.constprop.0+0x110>)
    290a:	9302      	str	r3, [sp, #8]
    290c:	2300      	movs	r3, #0
    290e:	e9cd 3300 	strd	r3, r3, [sp]
    2912:	4912      	ldr	r1, [pc, #72]	; (295c <bus_fault.constprop.0+0xf8>)
    2914:	2201      	movs	r2, #1
    2916:	4618      	mov	r0, r3
    2918:	f005 fc53 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    291c:	4a10      	ldr	r2, [pc, #64]	; (2960 <bus_fault.constprop.0+0xfc>)
    291e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2920:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    2924:	d012      	beq.n	294c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    2926:	4b14      	ldr	r3, [pc, #80]	; (2978 <bus_fault.constprop.0+0x114>)
    2928:	9302      	str	r3, [sp, #8]
    292a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    292c:	e9cd 3300 	strd	r3, r3, [sp]
    2930:	490a      	ldr	r1, [pc, #40]	; (295c <bus_fault.constprop.0+0xf8>)
    2932:	2201      	movs	r2, #1
    2934:	4618      	mov	r0, r3
    2936:	f005 fc44 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    293a:	4a09      	ldr	r2, [pc, #36]	; (2960 <bus_fault.constprop.0+0xfc>)
    293c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    293e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2940:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2944:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2946:	7030      	strb	r0, [r6, #0]

	return reason;
}
    2948:	b005      	add	sp, #20
    294a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    294c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    294e:	0492      	lsls	r2, r2, #18
    2950:	d5f3      	bpl.n	293a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2952:	4a0a      	ldr	r2, [pc, #40]	; (297c <bus_fault.constprop.0+0x118>)
    2954:	9202      	str	r2, [sp, #8]
    2956:	e7e9      	b.n	292c <bus_fault.constprop.0+0xc8>
    2958:	00009734 	.word	0x00009734
    295c:	00008be8 	.word	0x00008be8
    2960:	e000ed00 	.word	0xe000ed00
    2964:	0000974a 	.word	0x0000974a
    2968:	0000975b 	.word	0x0000975b
    296c:	0000976e 	.word	0x0000976e
    2970:	00009787 	.word	0x00009787
    2974:	0000979c 	.word	0x0000979c
    2978:	000097b7 	.word	0x000097b7
    297c:	000097cf 	.word	0x000097cf

00002980 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2982:	2400      	movs	r4, #0
    2984:	4b33      	ldr	r3, [pc, #204]	; (2a54 <usage_fault.constprop.0+0xd4>)
    2986:	9302      	str	r3, [sp, #8]
    2988:	e9cd 4400 	strd	r4, r4, [sp]
    298c:	4623      	mov	r3, r4
    298e:	4932      	ldr	r1, [pc, #200]	; (2a58 <usage_fault.constprop.0+0xd8>)
    2990:	2201      	movs	r2, #1
    2992:	4620      	mov	r0, r4
    2994:	f005 fc15 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2998:	4b30      	ldr	r3, [pc, #192]	; (2a5c <usage_fault.constprop.0+0xdc>)
    299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    299c:	019b      	lsls	r3, r3, #6
    299e:	d509      	bpl.n	29b4 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    29a0:	4b2f      	ldr	r3, [pc, #188]	; (2a60 <usage_fault.constprop.0+0xe0>)
    29a2:	492d      	ldr	r1, [pc, #180]	; (2a58 <usage_fault.constprop.0+0xd8>)
    29a4:	9400      	str	r4, [sp, #0]
    29a6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    29aa:	2201      	movs	r2, #1
    29ac:	4623      	mov	r3, r4
    29ae:	4620      	mov	r0, r4
    29b0:	f005 fc07 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    29b4:	4b29      	ldr	r3, [pc, #164]	; (2a5c <usage_fault.constprop.0+0xdc>)
    29b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29b8:	01dc      	lsls	r4, r3, #7
    29ba:	d509      	bpl.n	29d0 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    29bc:	4b29      	ldr	r3, [pc, #164]	; (2a64 <usage_fault.constprop.0+0xe4>)
    29be:	9302      	str	r3, [sp, #8]
    29c0:	2300      	movs	r3, #0
    29c2:	e9cd 3300 	strd	r3, r3, [sp]
    29c6:	4924      	ldr	r1, [pc, #144]	; (2a58 <usage_fault.constprop.0+0xd8>)
    29c8:	2201      	movs	r2, #1
    29ca:	4618      	mov	r0, r3
    29cc:	f005 fbf9 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    29d0:	4b22      	ldr	r3, [pc, #136]	; (2a5c <usage_fault.constprop.0+0xdc>)
    29d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29d4:	0318      	lsls	r0, r3, #12
    29d6:	d509      	bpl.n	29ec <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    29d8:	4b23      	ldr	r3, [pc, #140]	; (2a68 <usage_fault.constprop.0+0xe8>)
    29da:	9302      	str	r3, [sp, #8]
    29dc:	2300      	movs	r3, #0
    29de:	e9cd 3300 	strd	r3, r3, [sp]
    29e2:	491d      	ldr	r1, [pc, #116]	; (2a58 <usage_fault.constprop.0+0xd8>)
    29e4:	2201      	movs	r2, #1
    29e6:	4618      	mov	r0, r3
    29e8:	f005 fbeb 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    29ec:	4b1b      	ldr	r3, [pc, #108]	; (2a5c <usage_fault.constprop.0+0xdc>)
    29ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29f0:	0359      	lsls	r1, r3, #13
    29f2:	d509      	bpl.n	2a08 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    29f4:	4b1d      	ldr	r3, [pc, #116]	; (2a6c <usage_fault.constprop.0+0xec>)
    29f6:	9302      	str	r3, [sp, #8]
    29f8:	2300      	movs	r3, #0
    29fa:	e9cd 3300 	strd	r3, r3, [sp]
    29fe:	4916      	ldr	r1, [pc, #88]	; (2a58 <usage_fault.constprop.0+0xd8>)
    2a00:	2201      	movs	r2, #1
    2a02:	4618      	mov	r0, r3
    2a04:	f005 fbdd 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a08:	4b14      	ldr	r3, [pc, #80]	; (2a5c <usage_fault.constprop.0+0xdc>)
    2a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a0c:	039a      	lsls	r2, r3, #14
    2a0e:	d509      	bpl.n	2a24 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2a10:	4b17      	ldr	r3, [pc, #92]	; (2a70 <usage_fault.constprop.0+0xf0>)
    2a12:	9302      	str	r3, [sp, #8]
    2a14:	2300      	movs	r3, #0
    2a16:	e9cd 3300 	strd	r3, r3, [sp]
    2a1a:	490f      	ldr	r1, [pc, #60]	; (2a58 <usage_fault.constprop.0+0xd8>)
    2a1c:	2201      	movs	r2, #1
    2a1e:	4618      	mov	r0, r3
    2a20:	f005 fbcf 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a24:	4b0d      	ldr	r3, [pc, #52]	; (2a5c <usage_fault.constprop.0+0xdc>)
    2a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a28:	03db      	lsls	r3, r3, #15
    2a2a:	d509      	bpl.n	2a40 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2a2c:	4b11      	ldr	r3, [pc, #68]	; (2a74 <usage_fault.constprop.0+0xf4>)
    2a2e:	9302      	str	r3, [sp, #8]
    2a30:	2300      	movs	r3, #0
    2a32:	e9cd 3300 	strd	r3, r3, [sp]
    2a36:	4908      	ldr	r1, [pc, #32]	; (2a58 <usage_fault.constprop.0+0xd8>)
    2a38:	2201      	movs	r2, #1
    2a3a:	4618      	mov	r0, r3
    2a3c:	f005 fbc1 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a40:	4a06      	ldr	r2, [pc, #24]	; (2a5c <usage_fault.constprop.0+0xdc>)
    2a42:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2a44:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2a48:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2a4c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2a4e:	6293      	str	r3, [r2, #40]	; 0x28
}
    2a50:	b004      	add	sp, #16
    2a52:	bd10      	pop	{r4, pc}
    2a54:	000097fe 	.word	0x000097fe
    2a58:	00008be8 	.word	0x00008be8
    2a5c:	e000ed00 	.word	0xe000ed00
    2a60:	00009816 	.word	0x00009816
    2a64:	00009829 	.word	0x00009829
    2a68:	00009843 	.word	0x00009843
    2a6c:	00009861 	.word	0x00009861
    2a70:	00009886 	.word	0x00009886
    2a74:	000098a0 	.word	0x000098a0

00002a78 <mem_manage_fault>:
{
    2a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a7c:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a7e:	2400      	movs	r4, #0
    2a80:	4b52      	ldr	r3, [pc, #328]	; (2bcc <mem_manage_fault+0x154>)
    2a82:	9302      	str	r3, [sp, #8]
    2a84:	e9cd 4400 	strd	r4, r4, [sp]
    2a88:	4623      	mov	r3, r4
{
    2a8a:	4680      	mov	r8, r0
    2a8c:	4689      	mov	r9, r1
    2a8e:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a90:	494f      	ldr	r1, [pc, #316]	; (2bd0 <mem_manage_fault+0x158>)
    2a92:	2201      	movs	r2, #1
    2a94:	4620      	mov	r0, r4
    2a96:	f005 fb94 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a9a:	4b4e      	ldr	r3, [pc, #312]	; (2bd4 <mem_manage_fault+0x15c>)
    2a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a9e:	06df      	lsls	r7, r3, #27
    2aa0:	d509      	bpl.n	2ab6 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2aa2:	4b4d      	ldr	r3, [pc, #308]	; (2bd8 <mem_manage_fault+0x160>)
    2aa4:	494a      	ldr	r1, [pc, #296]	; (2bd0 <mem_manage_fault+0x158>)
    2aa6:	9400      	str	r4, [sp, #0]
    2aa8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2aac:	2201      	movs	r2, #1
    2aae:	4623      	mov	r3, r4
    2ab0:	4620      	mov	r0, r4
    2ab2:	f005 fb86 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2ab6:	4b47      	ldr	r3, [pc, #284]	; (2bd4 <mem_manage_fault+0x15c>)
    2ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2aba:	071d      	lsls	r5, r3, #28
    2abc:	d509      	bpl.n	2ad2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    2abe:	4b47      	ldr	r3, [pc, #284]	; (2bdc <mem_manage_fault+0x164>)
    2ac0:	9302      	str	r3, [sp, #8]
    2ac2:	2300      	movs	r3, #0
    2ac4:	e9cd 3300 	strd	r3, r3, [sp]
    2ac8:	4941      	ldr	r1, [pc, #260]	; (2bd0 <mem_manage_fault+0x158>)
    2aca:	2201      	movs	r2, #1
    2acc:	4618      	mov	r0, r3
    2ace:	f005 fb78 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2ad2:	4d40      	ldr	r5, [pc, #256]	; (2bd4 <mem_manage_fault+0x15c>)
    2ad4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2ad6:	079c      	lsls	r4, r3, #30
    2ad8:	d441      	bmi.n	2b5e <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    2ada:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2ade:	4b3d      	ldr	r3, [pc, #244]	; (2bd4 <mem_manage_fault+0x15c>)
    2ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ae2:	07d9      	lsls	r1, r3, #31
    2ae4:	d509      	bpl.n	2afa <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    2ae6:	4b3e      	ldr	r3, [pc, #248]	; (2be0 <mem_manage_fault+0x168>)
    2ae8:	9302      	str	r3, [sp, #8]
    2aea:	2300      	movs	r3, #0
    2aec:	e9cd 3300 	strd	r3, r3, [sp]
    2af0:	4937      	ldr	r1, [pc, #220]	; (2bd0 <mem_manage_fault+0x158>)
    2af2:	2201      	movs	r2, #1
    2af4:	4618      	mov	r0, r3
    2af6:	f005 fb64 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2afa:	4b36      	ldr	r3, [pc, #216]	; (2bd4 <mem_manage_fault+0x15c>)
    2afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2afe:	069a      	lsls	r2, r3, #26
    2b00:	d509      	bpl.n	2b16 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    2b02:	4b38      	ldr	r3, [pc, #224]	; (2be4 <mem_manage_fault+0x16c>)
    2b04:	9302      	str	r3, [sp, #8]
    2b06:	2300      	movs	r3, #0
    2b08:	e9cd 3300 	strd	r3, r3, [sp]
    2b0c:	4930      	ldr	r1, [pc, #192]	; (2bd0 <mem_manage_fault+0x158>)
    2b0e:	2201      	movs	r2, #1
    2b10:	4618      	mov	r0, r3
    2b12:	f005 fb56 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b16:	4c2f      	ldr	r4, [pc, #188]	; (2bd4 <mem_manage_fault+0x15c>)
    2b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b1a:	06db      	lsls	r3, r3, #27
    2b1c:	d402      	bmi.n	2b24 <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2b20:	079d      	lsls	r5, r3, #30
    2b22:	d550      	bpl.n	2bc6 <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2b24:	6863      	ldr	r3, [r4, #4]
    2b26:	0518      	lsls	r0, r3, #20
    2b28:	d54d      	bpl.n	2bc6 <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2b2a:	4641      	mov	r1, r8
    2b2c:	4638      	mov	r0, r7
    2b2e:	f7ff fe3f 	bl	27b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2b32:	2800      	cmp	r0, #0
    2b34:	d035      	beq.n	2ba2 <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2b36:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2b3a:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2b3c:	4b25      	ldr	r3, [pc, #148]	; (2bd4 <mem_manage_fault+0x15c>)
    2b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b40:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2b42:	bf42      	ittt	mi
    2b44:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2b46:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2b4a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b4e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2b52:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b54:	2300      	movs	r3, #0
    2b56:	7033      	strb	r3, [r6, #0]
}
    2b58:	b005      	add	sp, #20
    2b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2b5e:	2400      	movs	r4, #0
    2b60:	4b21      	ldr	r3, [pc, #132]	; (2be8 <mem_manage_fault+0x170>)
    2b62:	9302      	str	r3, [sp, #8]
    2b64:	4620      	mov	r0, r4
    2b66:	4623      	mov	r3, r4
    2b68:	e9cd 4400 	strd	r4, r4, [sp]
    2b6c:	4918      	ldr	r1, [pc, #96]	; (2bd0 <mem_manage_fault+0x158>)
    2b6e:	2201      	movs	r2, #1
    2b70:	f005 fb27 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2b74:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2b76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b78:	0618      	lsls	r0, r3, #24
    2b7a:	d5ae      	bpl.n	2ada <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2b7c:	4b1b      	ldr	r3, [pc, #108]	; (2bec <mem_manage_fault+0x174>)
    2b7e:	4914      	ldr	r1, [pc, #80]	; (2bd0 <mem_manage_fault+0x158>)
    2b80:	9703      	str	r7, [sp, #12]
    2b82:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2b86:	9400      	str	r4, [sp, #0]
    2b88:	4623      	mov	r3, r4
    2b8a:	2201      	movs	r2, #1
    2b8c:	4620      	mov	r0, r4
    2b8e:	f005 fb18 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2b92:	f1b9 0f00 	cmp.w	r9, #0
    2b96:	d0a2      	beq.n	2ade <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2b98:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2b9e:	62ab      	str	r3, [r5, #40]	; 0x28
    2ba0:	e79d      	b.n	2ade <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2ba2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ba4:	06d9      	lsls	r1, r3, #27
    2ba6:	d50e      	bpl.n	2bc6 <mem_manage_fault+0x14e>
    2ba8:	4911      	ldr	r1, [pc, #68]	; (2bf0 <mem_manage_fault+0x178>)
    2baa:	4a12      	ldr	r2, [pc, #72]	; (2bf4 <mem_manage_fault+0x17c>)
    2bac:	4812      	ldr	r0, [pc, #72]	; (2bf8 <mem_manage_fault+0x180>)
    2bae:	f240 1349 	movw	r3, #329	; 0x149
    2bb2:	f005 fa6d 	bl	8090 <assert_print>
    2bb6:	4811      	ldr	r0, [pc, #68]	; (2bfc <mem_manage_fault+0x184>)
    2bb8:	f005 fa6a 	bl	8090 <assert_print>
    2bbc:	480d      	ldr	r0, [pc, #52]	; (2bf4 <mem_manage_fault+0x17c>)
    2bbe:	f240 1149 	movw	r1, #329	; 0x149
    2bc2:	f005 fa5e 	bl	8082 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2bc6:	2000      	movs	r0, #0
    2bc8:	e7b8      	b.n	2b3c <mem_manage_fault+0xc4>
    2bca:	bf00      	nop
    2bcc:	000098cb 	.word	0x000098cb
    2bd0:	00008be8 	.word	0x00008be8
    2bd4:	e000ed00 	.word	0xe000ed00
    2bd8:	000098e1 	.word	0x000098e1
    2bdc:	0000975b 	.word	0x0000975b
    2be0:	00009942 	.word	0x00009942
    2be4:	000097cf 	.word	0x000097cf
    2be8:	00009914 	.word	0x00009914
    2bec:	0000992c 	.word	0x0000992c
    2bf0:	0000999b 	.word	0x0000999b
    2bf4:	00009961 	.word	0x00009961
    2bf8:	00008f43 	.word	0x00008f43
    2bfc:	000099e5 	.word	0x000099e5

00002c00 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c04:	4b80      	ldr	r3, [pc, #512]	; (2e08 <z_arm_fault+0x208>)
    2c06:	685f      	ldr	r7, [r3, #4]
{
    2c08:	b090      	sub	sp, #64	; 0x40
    2c0a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c0c:	f3c7 0408 	ubfx	r4, r7, #0, #9
    2c10:	2300      	movs	r3, #0
    2c12:	f383 8811 	msr	BASEPRI, r3
    2c16:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c1a:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    2c1e:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    2c22:	d10c      	bne.n	2c3e <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c24:	f002 000c 	and.w	r0, r2, #12
    2c28:	2808      	cmp	r0, #8
    2c2a:	d11a      	bne.n	2c62 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c2c:	4a77      	ldr	r2, [pc, #476]	; (2e0c <z_arm_fault+0x20c>)
    2c2e:	4978      	ldr	r1, [pc, #480]	; (2e10 <z_arm_fault+0x210>)
    2c30:	9300      	str	r3, [sp, #0]
    2c32:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2c36:	4618      	mov	r0, r3
    2c38:	2201      	movs	r2, #1
    2c3a:	f005 fac2 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    2c3e:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2c40:	4a74      	ldr	r2, [pc, #464]	; (2e14 <z_arm_fault+0x214>)
    2c42:	4975      	ldr	r1, [pc, #468]	; (2e18 <z_arm_fault+0x218>)
    2c44:	4875      	ldr	r0, [pc, #468]	; (2e1c <z_arm_fault+0x21c>)
    2c46:	f240 33fb 	movw	r3, #1019	; 0x3fb
    2c4a:	f005 fa21 	bl	8090 <assert_print>
    2c4e:	4874      	ldr	r0, [pc, #464]	; (2e20 <z_arm_fault+0x220>)
    2c50:	f005 fa1e 	bl	8090 <assert_print>
    2c54:	486f      	ldr	r0, [pc, #444]	; (2e14 <z_arm_fault+0x214>)
    2c56:	f240 31fb 	movw	r1, #1019	; 0x3fb
    2c5a:	f005 fa12 	bl	8082 <assert_post_action>
    2c5e:	2500      	movs	r5, #0
    2c60:	e006      	b.n	2c70 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c62:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2c64:	bf46      	itte	mi
    2c66:	460d      	movmi	r5, r1
	*nested_exc = false;
    2c68:	461e      	movmi	r6, r3
			*nested_exc = true;
    2c6a:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
    2c6c:	2d00      	cmp	r5, #0
    2c6e:	d0e7      	beq.n	2c40 <z_arm_fault+0x40>
	*recoverable = false;
    2c70:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2c74:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2c76:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    2c7a:	2b09      	cmp	r3, #9
    2c7c:	f200 80ab 	bhi.w	2dd6 <z_arm_fault+0x1d6>
    2c80:	e8df f003 	tbb	[pc, r3]
    2c84:	7ea39f05 	.word	0x7ea39f05
    2c88:	a9a9a9a9 	.word	0xa9a9a9a9
    2c8c:	a7a9      	.short	0xa7a9
	PR_FAULT_INFO("***** HARD FAULT *****");
    2c8e:	4b65      	ldr	r3, [pc, #404]	; (2e24 <z_arm_fault+0x224>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2c90:	4f5d      	ldr	r7, [pc, #372]	; (2e08 <z_arm_fault+0x208>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    2c92:	495f      	ldr	r1, [pc, #380]	; (2e10 <z_arm_fault+0x210>)
    2c94:	f8cd 8000 	str.w	r8, [sp]
    2c98:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2c9c:	2300      	movs	r3, #0
    2c9e:	2201      	movs	r2, #1
    2ca0:	4618      	mov	r0, r3
    2ca2:	f005 fa8e 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2ca6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
    2ca8:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cac:	f014 0402 	ands.w	r4, r4, #2
    2cb0:	d00c      	beq.n	2ccc <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    2cb2:	4b5d      	ldr	r3, [pc, #372]	; (2e28 <z_arm_fault+0x228>)
    2cb4:	f8cd 8000 	str.w	r8, [sp]
    2cb8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2cbc:	2300      	movs	r3, #0
    2cbe:	4954      	ldr	r1, [pc, #336]	; (2e10 <z_arm_fault+0x210>)
    2cc0:	2201      	movs	r2, #1
    2cc2:	4618      	mov	r0, r3
    2cc4:	f005 fa7d 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2cc8:	2400      	movs	r4, #0
    2cca:	e028      	b.n	2d1e <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cce:	2b00      	cmp	r3, #0
    2cd0:	da04      	bge.n	2cdc <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    2cd2:	4b56      	ldr	r3, [pc, #344]	; (2e2c <z_arm_fault+0x22c>)
    2cd4:	9400      	str	r4, [sp, #0]
    2cd6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2cda:	e7ef      	b.n	2cbc <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cde:	005b      	lsls	r3, r3, #1
    2ce0:	d562      	bpl.n	2da8 <z_arm_fault+0x1a8>
		PR_EXC("  Fault escalation (see below)");
    2ce2:	4b53      	ldr	r3, [pc, #332]	; (2e30 <z_arm_fault+0x230>)
    2ce4:	494a      	ldr	r1, [pc, #296]	; (2e10 <z_arm_fault+0x210>)
    2ce6:	9400      	str	r4, [sp, #0]
    2ce8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2cec:	2201      	movs	r2, #1
    2cee:	4623      	mov	r3, r4
    2cf0:	4620      	mov	r0, r4
    2cf2:	f005 fa66 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    2cf6:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2cf8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2cfc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d00:	429a      	cmp	r2, r3
    2d02:	d127      	bne.n	2d54 <z_arm_fault+0x154>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2d04:	682b      	ldr	r3, [r5, #0]
    2d06:	9303      	str	r3, [sp, #12]
    2d08:	4b4a      	ldr	r3, [pc, #296]	; (2e34 <z_arm_fault+0x234>)
    2d0a:	9400      	str	r4, [sp, #0]
    2d0c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2d10:	4620      	mov	r0, r4
    2d12:	4623      	mov	r3, r4
    2d14:	493e      	ldr	r1, [pc, #248]	; (2e10 <z_arm_fault+0x210>)
    2d16:	2201      	movs	r2, #1
    2d18:	f005 fa53 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    2d1c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2d1e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2d22:	b9a3      	cbnz	r3, 2d4e <z_arm_fault+0x14e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2d24:	2220      	movs	r2, #32
    2d26:	4629      	mov	r1, r5
    2d28:	eb0d 0002 	add.w	r0, sp, r2
    2d2c:	f005 fa83 	bl	8236 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2d30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2d32:	2e00      	cmp	r6, #0
    2d34:	d063      	beq.n	2dfe <z_arm_fault+0x1fe>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2d3a:	b922      	cbnz	r2, 2d46 <z_arm_fault+0x146>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2d3c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2d40:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d44:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    2d46:	a908      	add	r1, sp, #32
    2d48:	4620      	mov	r0, r4
    2d4a:	f7ff fc01 	bl	2550 <z_arm_fatal_error>
}
    2d4e:	b010      	add	sp, #64	; 0x40
    2d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    2d54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    2d58:	b133      	cbz	r3, 2d68 <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
    2d5a:	f10d 021f 	add.w	r2, sp, #31
    2d5e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2d60:	4628      	mov	r0, r5
    2d62:	f7ff fe89 	bl	2a78 <mem_manage_fault>
    2d66:	e00d      	b.n	2d84 <z_arm_fault+0x184>
		} else if (SCB_BFSR != 0) {
    2d68:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    2d6c:	b12b      	cbz	r3, 2d7a <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    2d6e:	f10d 011f 	add.w	r1, sp, #31
    2d72:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2d74:	f7ff fd76 	bl	2864 <bus_fault.constprop.0>
    2d78:	e004      	b.n	2d84 <z_arm_fault+0x184>
		} else if (SCB_UFSR != 0) {
    2d7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    2d7c:	b29b      	uxth	r3, r3
    2d7e:	b11b      	cbz	r3, 2d88 <z_arm_fault+0x188>
			reason = usage_fault(esf);
    2d80:	f7ff fdfe 	bl	2980 <usage_fault.constprop.0>
    2d84:	4604      	mov	r4, r0
    2d86:	e7ca      	b.n	2d1e <z_arm_fault+0x11e>
			__ASSERT(0,
    2d88:	492b      	ldr	r1, [pc, #172]	; (2e38 <z_arm_fault+0x238>)
    2d8a:	4a22      	ldr	r2, [pc, #136]	; (2e14 <z_arm_fault+0x214>)
    2d8c:	4823      	ldr	r0, [pc, #140]	; (2e1c <z_arm_fault+0x21c>)
    2d8e:	f240 23cd 	movw	r3, #717	; 0x2cd
    2d92:	f005 f97d 	bl	8090 <assert_print>
    2d96:	4829      	ldr	r0, [pc, #164]	; (2e3c <z_arm_fault+0x23c>)
    2d98:	f005 f97a 	bl	8090 <assert_print>
    2d9c:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    2da0:	481c      	ldr	r0, [pc, #112]	; (2e14 <z_arm_fault+0x214>)
    2da2:	f005 f96e 	bl	8082 <assert_post_action>
    2da6:	e78f      	b.n	2cc8 <z_arm_fault+0xc8>
    2da8:	4923      	ldr	r1, [pc, #140]	; (2e38 <z_arm_fault+0x238>)
    2daa:	4a1a      	ldr	r2, [pc, #104]	; (2e14 <z_arm_fault+0x214>)
    2dac:	481b      	ldr	r0, [pc, #108]	; (2e1c <z_arm_fault+0x21c>)
    2dae:	f240 23d1 	movw	r3, #721	; 0x2d1
    2db2:	f005 f96d 	bl	8090 <assert_print>
    2db6:	4822      	ldr	r0, [pc, #136]	; (2e40 <z_arm_fault+0x240>)
    2db8:	f005 f96a 	bl	8090 <assert_print>
    2dbc:	f240 21d1 	movw	r1, #721	; 0x2d1
    2dc0:	e7ee      	b.n	2da0 <z_arm_fault+0x1a0>
		reason = mem_manage_fault(esf, 0, recoverable);
    2dc2:	f10d 021f 	add.w	r2, sp, #31
    2dc6:	2100      	movs	r1, #0
    2dc8:	e7ca      	b.n	2d60 <z_arm_fault+0x160>
		reason = bus_fault(esf, 0, recoverable);
    2dca:	f10d 011f 	add.w	r1, sp, #31
    2dce:	2000      	movs	r0, #0
    2dd0:	e7d0      	b.n	2d74 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    2dd2:	4b1c      	ldr	r3, [pc, #112]	; (2e44 <z_arm_fault+0x244>)
    2dd4:	e76e      	b.n	2cb4 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    2dd6:	4a1c      	ldr	r2, [pc, #112]	; (2e48 <z_arm_fault+0x248>)
    2dd8:	4b1c      	ldr	r3, [pc, #112]	; (2e4c <z_arm_fault+0x24c>)
    2dda:	490d      	ldr	r1, [pc, #52]	; (2e10 <z_arm_fault+0x210>)
    2ddc:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    2de0:	bf18      	it	ne
    2de2:	4613      	movne	r3, r2
    2de4:	3c10      	subs	r4, #16
    2de6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2dea:	4b19      	ldr	r3, [pc, #100]	; (2e50 <z_arm_fault+0x250>)
    2dec:	9302      	str	r3, [sp, #8]
    2dee:	2300      	movs	r3, #0
    2df0:	e9cd 3300 	strd	r3, r3, [sp]
    2df4:	2201      	movs	r2, #1
    2df6:	4618      	mov	r0, r3
    2df8:	f005 f9e3 	bl	81c2 <z_log_msg2_runtime_create.constprop.0>
}
    2dfc:	e764      	b.n	2cc8 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2dfe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2e02:	f023 0301 	bic.w	r3, r3, #1
    2e06:	e79d      	b.n	2d44 <z_arm_fault+0x144>
    2e08:	e000ed00 	.word	0xe000ed00
    2e0c:	00009a36 	.word	0x00009a36
    2e10:	00008be8 	.word	0x00008be8
    2e14:	00009961 	.word	0x00009961
    2e18:	00009a61 	.word	0x00009a61
    2e1c:	00008f43 	.word	0x00008f43
    2e20:	00009a74 	.word	0x00009a74
    2e24:	00009ab2 	.word	0x00009ab2
    2e28:	00009ac9 	.word	0x00009ac9
    2e2c:	00009aea 	.word	0x00009aea
    2e30:	00009af8 	.word	0x00009af8
    2e34:	00009b17 	.word	0x00009b17
    2e38:	0000a6a7 	.word	0x0000a6a7
    2e3c:	00009b33 	.word	0x00009b33
    2e40:	00009b57 	.word	0x00009b57
    2e44:	00009b87 	.word	0x00009b87
    2e48:	00009a1d 	.word	0x00009a1d
    2e4c:	00009a08 	.word	0x00009a08
    2e50:	00009bab 	.word	0x00009bab

00002e54 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e54:	4a02      	ldr	r2, [pc, #8]	; (2e60 <z_arm_fault_init+0xc>)
    2e56:	6953      	ldr	r3, [r2, #20]
    2e58:	f043 0310 	orr.w	r3, r3, #16
    2e5c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2e5e:	4770      	bx	lr
    2e60:	e000ed00 	.word	0xe000ed00

00002e64 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2e64:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2e68:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2e6c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2e6e:	4672      	mov	r2, lr
	bl z_arm_fault
    2e70:	f7ff fec6 	bl	2c00 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2e74:	bd01      	pop	{r0, pc}
    2e76:	bf00      	nop

00002e78 <z_arm_interrupt_init>:
    2e78:	4804      	ldr	r0, [pc, #16]	; (2e8c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2e7a:	2300      	movs	r3, #0
    2e7c:	2120      	movs	r1, #32
    2e7e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2e80:	3301      	adds	r3, #1
    2e82:	2b30      	cmp	r3, #48	; 0x30
    2e84:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2e88:	d1f9      	bne.n	2e7e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2e8a:	4770      	bx	lr
    2e8c:	e000e100 	.word	0xe000e100

00002e90 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2e90:	2000      	movs	r0, #0
    msr CONTROL, r0
    2e92:	f380 8814 	msr	CONTROL, r0
    isb
    2e96:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2e9a:	f005 fd57 	bl	894c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2e9e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2ea0:	490d      	ldr	r1, [pc, #52]	; (2ed8 <__start+0x48>)
    str r0, [r1]
    2ea2:	6008      	str	r0, [r1, #0]
    dsb
    2ea4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ea8:	480c      	ldr	r0, [pc, #48]	; (2edc <__start+0x4c>)
    msr msp, r0
    2eaa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2eae:	f000 f82b 	bl	2f08 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2eb2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2eb4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2eb8:	4809      	ldr	r0, [pc, #36]	; (2ee0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2eba:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2ebe:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2ec0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2ec4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ec8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2eca:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ecc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2ed0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2ed4:	f7ff fbe0 	bl	2698 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2ed8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2edc:	20001da0 	.word	0x20001da0
    ldr r0, =z_interrupt_stacks
    2ee0:	20001020 	.word	0x20001020

00002ee4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2ee4:	4907      	ldr	r1, [pc, #28]	; (2f04 <z_arm_clear_arm_mpu_config+0x20>)
    2ee6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2eea:	2300      	movs	r3, #0
	int num_regions =
    2eec:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2ef0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2ef2:	4293      	cmp	r3, r2
    2ef4:	db00      	blt.n	2ef8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2ef6:	4770      	bx	lr
  MPU->RNR = rnr;
    2ef8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2efc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2f00:	3301      	adds	r3, #1
    2f02:	e7f6      	b.n	2ef2 <z_arm_clear_arm_mpu_config+0xe>
    2f04:	e000ed00 	.word	0xe000ed00

00002f08 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2f08:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2f0a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2f0c:	2300      	movs	r3, #0
    2f0e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2f12:	f7ff ffe7 	bl	2ee4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2f16:	4b14      	ldr	r3, [pc, #80]	; (2f68 <z_arm_init_arch_hw_at_boot+0x60>)
    2f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2f30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2f34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2f38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2f40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2f44:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2f48:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2f4c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2f50:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2f54:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2f58:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2f5c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f62:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2f66:	bd08      	pop	{r3, pc}
    2f68:	e000e100 	.word	0xe000e100

00002f6c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2f6c:	4b08      	ldr	r3, [pc, #32]	; (2f90 <z_impl_k_thread_abort+0x24>)
    2f6e:	689b      	ldr	r3, [r3, #8]
    2f70:	4283      	cmp	r3, r0
    2f72:	d10b      	bne.n	2f8c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2f74:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2f78:	b143      	cbz	r3, 2f8c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2f7a:	4b06      	ldr	r3, [pc, #24]	; (2f94 <z_impl_k_thread_abort+0x28>)
    2f7c:	685a      	ldr	r2, [r3, #4]
    2f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2f82:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2f8a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2f8c:	f003 bfaa 	b.w	6ee4 <z_thread_abort>
    2f90:	200009e0 	.word	0x200009e0
    2f94:	e000ed00 	.word	0xe000ed00

00002f98 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2f98:	4b02      	ldr	r3, [pc, #8]	; (2fa4 <z_arm_configure_static_mpu_regions+0xc>)
    2f9a:	4a03      	ldr	r2, [pc, #12]	; (2fa8 <z_arm_configure_static_mpu_regions+0x10>)
    2f9c:	4803      	ldr	r0, [pc, #12]	; (2fac <z_arm_configure_static_mpu_regions+0x14>)
    2f9e:	2101      	movs	r1, #1
    2fa0:	f000 b886 	b.w	30b0 <arm_core_mpu_configure_static_mpu_regions>
    2fa4:	20040000 	.word	0x20040000
    2fa8:	20000000 	.word	0x20000000
    2fac:	00008d18 	.word	0x00008d18

00002fb0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2fb0:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2fb2:	4b05      	ldr	r3, [pc, #20]	; (2fc8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2fb4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2fb6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2fb8:	4a04      	ldr	r2, [pc, #16]	; (2fcc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2fba:	2120      	movs	r1, #32
    2fbc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2fc0:	4618      	mov	r0, r3
    2fc2:	2101      	movs	r1, #1
    2fc4:	f000 b89c 	b.w	3100 <arm_core_mpu_configure_dynamic_mpu_regions>
    2fc8:	2000088c 	.word	0x2000088c
    2fcc:	150b0000 	.word	0x150b0000

00002fd0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2fd2:	4e28      	ldr	r6, [pc, #160]	; (3074 <mpu_configure_regions+0xa4>)
    2fd4:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2fd6:	2500      	movs	r5, #0
    2fd8:	428d      	cmp	r5, r1
    2fda:	da15      	bge.n	3008 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    2fdc:	6844      	ldr	r4, [r0, #4]
    2fde:	2c00      	cmp	r4, #0
    2fe0:	d045      	beq.n	306e <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2fe2:	b1d3      	cbz	r3, 301a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2fe4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2fe8:	ea14 0f0c 	tst.w	r4, ip
    2fec:	d00f      	beq.n	300e <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2fee:	4b22      	ldr	r3, [pc, #136]	; (3078 <mpu_configure_regions+0xa8>)
    2ff0:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2ff2:	9302      	str	r3, [sp, #8]
    2ff4:	2300      	movs	r3, #0
    2ff6:	2201      	movs	r2, #1
    2ff8:	e9cd 3300 	strd	r3, r3, [sp]
    2ffc:	491f      	ldr	r1, [pc, #124]	; (307c <mpu_configure_regions+0xac>)
    2ffe:	4618      	mov	r0, r3
    3000:	f005 f8ef 	bl	81e2 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    3004:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3008:	4610      	mov	r0, r2
    300a:	b005      	add	sp, #20
    300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    300e:	2c1f      	cmp	r4, #31
    3010:	d9ed      	bls.n	2fee <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3012:	6807      	ldr	r7, [r0, #0]
		&&
    3014:	ea1c 0f07 	tst.w	ip, r7
    3018:	d1e9      	bne.n	2fee <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    301a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    301c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    301e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3022:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    3026:	d910      	bls.n	304a <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    3028:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    302c:	d80f      	bhi.n	304e <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    302e:	3c01      	subs	r4, #1
    3030:	fab4 f484 	clz	r4, r4
    3034:	f1c4 041f 	rsb	r4, r4, #31
    3038:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    303a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    303e:	ea4c 0c04 	orr.w	ip, ip, r4
    3042:	d906      	bls.n	3052 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3044:	4b0e      	ldr	r3, [pc, #56]	; (3080 <mpu_configure_regions+0xb0>)
    3046:	9203      	str	r2, [sp, #12]
    3048:	e7d3      	b.n	2ff2 <mpu_configure_regions+0x22>
		return REGION_32B;
    304a:	2408      	movs	r4, #8
    304c:	e7f5      	b.n	303a <mpu_configure_regions+0x6a>
		return REGION_4G;
    304e:	243e      	movs	r4, #62	; 0x3e
    3050:	e7f3      	b.n	303a <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3052:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    3056:	4314      	orrs	r4, r2
    3058:	f044 0410 	orr.w	r4, r4, #16
    305c:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3060:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3064:	f04c 0401 	orr.w	r4, ip, #1
    3068:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    306c:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    306e:	3501      	adds	r5, #1
    3070:	300c      	adds	r0, #12
    3072:	e7b1      	b.n	2fd8 <mpu_configure_regions+0x8>
    3074:	e000ed00 	.word	0xe000ed00
    3078:	00009bc2 	.word	0x00009bc2
    307c:	00008be0 	.word	0x00008be0
    3080:	00009be5 	.word	0x00009be5

00003084 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3084:	4b04      	ldr	r3, [pc, #16]	; (3098 <arm_core_mpu_enable+0x14>)
    3086:	2205      	movs	r2, #5
    3088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    308c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3090:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3094:	4770      	bx	lr
    3096:	bf00      	nop
    3098:	e000ed00 	.word	0xe000ed00

0000309c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    309c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    30a0:	4b02      	ldr	r3, [pc, #8]	; (30ac <arm_core_mpu_disable+0x10>)
    30a2:	2200      	movs	r2, #0
    30a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    30a8:	4770      	bx	lr
    30aa:	bf00      	nop
    30ac:	e000ed00 	.word	0xe000ed00

000030b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    30b0:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    30b2:	4d0e      	ldr	r5, [pc, #56]	; (30ec <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    30b4:	2301      	movs	r3, #1
    30b6:	782a      	ldrb	r2, [r5, #0]
    30b8:	460c      	mov	r4, r1
    30ba:	f7ff ff89 	bl	2fd0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    30be:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    30c0:	3016      	adds	r0, #22
    30c2:	d111      	bne.n	30e8 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    30c4:	f240 1311 	movw	r3, #273	; 0x111
    30c8:	4a09      	ldr	r2, [pc, #36]	; (30f0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    30ca:	490a      	ldr	r1, [pc, #40]	; (30f4 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    30cc:	480a      	ldr	r0, [pc, #40]	; (30f8 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    30ce:	f004 ffdf 	bl	8090 <assert_print>
    30d2:	4621      	mov	r1, r4
    30d4:	4809      	ldr	r0, [pc, #36]	; (30fc <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    30d6:	f004 ffdb 	bl	8090 <assert_print>
			regions_num);
	}
}
    30da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    30de:	4804      	ldr	r0, [pc, #16]	; (30f0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    30e0:	f240 1111 	movw	r1, #273	; 0x111
    30e4:	f004 bfcd 	b.w	8082 <assert_post_action>
}
    30e8:	bd38      	pop	{r3, r4, r5, pc}
    30ea:	bf00      	nop
    30ec:	20000c07 	.word	0x20000c07
    30f0:	00009c0b 	.word	0x00009c0b
    30f4:	0000a6a7 	.word	0x0000a6a7
    30f8:	00008f43 	.word	0x00008f43
    30fc:	00009c42 	.word	0x00009c42

00003100 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3100:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3102:	4a13      	ldr	r2, [pc, #76]	; (3150 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3104:	2300      	movs	r3, #0
    3106:	7812      	ldrb	r2, [r2, #0]
    3108:	460c      	mov	r4, r1
    310a:	f7ff ff61 	bl	2fd0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    310e:	f110 0f16 	cmn.w	r0, #22
    3112:	d004      	beq.n	311e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    3114:	4b0f      	ldr	r3, [pc, #60]	; (3154 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    3116:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3118:	2807      	cmp	r0, #7
    311a:	dd12      	ble.n	3142 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    311c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    311e:	4a0e      	ldr	r2, [pc, #56]	; (3158 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3120:	490e      	ldr	r1, [pc, #56]	; (315c <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    3122:	480f      	ldr	r0, [pc, #60]	; (3160 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    3124:	f44f 7398 	mov.w	r3, #304	; 0x130
    3128:	f004 ffb2 	bl	8090 <assert_print>
    312c:	4621      	mov	r1, r4
    312e:	480d      	ldr	r0, [pc, #52]	; (3164 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    3130:	f004 ffae 	bl	8090 <assert_print>
}
    3134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3138:	4807      	ldr	r0, [pc, #28]	; (3158 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    313a:	f44f 7198 	mov.w	r1, #304	; 0x130
    313e:	f004 bfa0 	b.w	8082 <assert_post_action>
  MPU->RNR = rnr;
    3142:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3146:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    314a:	3001      	adds	r0, #1
    314c:	e7e4      	b.n	3118 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    314e:	bf00      	nop
    3150:	20000c07 	.word	0x20000c07
    3154:	e000ed00 	.word	0xe000ed00
    3158:	00009c0b 	.word	0x00009c0b
    315c:	0000a6a7 	.word	0x0000a6a7
    3160:	00008f43 	.word	0x00008f43
    3164:	00009c6e 	.word	0x00009c6e

00003168 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3168:	4928      	ldr	r1, [pc, #160]	; (320c <z_arm_mpu_init+0xa4>)
{
    316a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    316c:	680c      	ldr	r4, [r1, #0]
    316e:	2c08      	cmp	r4, #8
    3170:	d913      	bls.n	319a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    3172:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3176:	4a26      	ldr	r2, [pc, #152]	; (3210 <z_arm_mpu_init+0xa8>)
    3178:	4926      	ldr	r1, [pc, #152]	; (3214 <z_arm_mpu_init+0xac>)
    317a:	4827      	ldr	r0, [pc, #156]	; (3218 <z_arm_mpu_init+0xb0>)
    317c:	f004 ff88 	bl	8090 <assert_print>
    3180:	4826      	ldr	r0, [pc, #152]	; (321c <z_arm_mpu_init+0xb4>)
    3182:	2208      	movs	r2, #8
    3184:	4621      	mov	r1, r4
    3186:	f004 ff83 	bl	8090 <assert_print>
    318a:	4821      	ldr	r0, [pc, #132]	; (3210 <z_arm_mpu_init+0xa8>)
    318c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3190:	f004 ff77 	bl	8082 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    3198:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    319a:	f7ff ff7f 	bl	309c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    319e:	6848      	ldr	r0, [r1, #4]
    31a0:	491f      	ldr	r1, [pc, #124]	; (3220 <z_arm_mpu_init+0xb8>)
    31a2:	2200      	movs	r2, #0
    31a4:	4294      	cmp	r4, r2
    31a6:	f100 000c 	add.w	r0, r0, #12
    31aa:	d10b      	bne.n	31c4 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    31ac:	4b1d      	ldr	r3, [pc, #116]	; (3224 <z_arm_mpu_init+0xbc>)
    31ae:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    31b0:	f7ff ff68 	bl	3084 <arm_core_mpu_enable>
	__ASSERT(
    31b4:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    31b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    31bc:	2b08      	cmp	r3, #8
    31be:	d114      	bne.n	31ea <z_arm_mpu_init+0x82>
	return 0;
    31c0:	2000      	movs	r0, #0
    31c2:	e7e9      	b.n	3198 <z_arm_mpu_init+0x30>
    31c4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31c8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    31cc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    31d0:	4313      	orrs	r3, r2
    31d2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    31d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    31da:	f850 3c04 	ldr.w	r3, [r0, #-4]
    31de:	f043 0301 	orr.w	r3, r3, #1
    31e2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    31e6:	3201      	adds	r2, #1
    31e8:	e7dc      	b.n	31a4 <z_arm_mpu_init+0x3c>
	__ASSERT(
    31ea:	4a09      	ldr	r2, [pc, #36]	; (3210 <z_arm_mpu_init+0xa8>)
    31ec:	490e      	ldr	r1, [pc, #56]	; (3228 <z_arm_mpu_init+0xc0>)
    31ee:	480a      	ldr	r0, [pc, #40]	; (3218 <z_arm_mpu_init+0xb0>)
    31f0:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    31f4:	f004 ff4c 	bl	8090 <assert_print>
    31f8:	480c      	ldr	r0, [pc, #48]	; (322c <z_arm_mpu_init+0xc4>)
    31fa:	f004 ff49 	bl	8090 <assert_print>
    31fe:	4804      	ldr	r0, [pc, #16]	; (3210 <z_arm_mpu_init+0xa8>)
    3200:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3204:	f004 ff3d 	bl	8082 <assert_post_action>
    3208:	e7da      	b.n	31c0 <z_arm_mpu_init+0x58>
    320a:	bf00      	nop
    320c:	00008d24 	.word	0x00008d24
    3210:	00009c0b 	.word	0x00009c0b
    3214:	0000a6a7 	.word	0x0000a6a7
    3218:	00008f43 	.word	0x00008f43
    321c:	00009c9b 	.word	0x00009c9b
    3220:	e000ed00 	.word	0xe000ed00
    3224:	20000c07 	.word	0x20000c07
    3228:	00009ccf 	.word	0x00009ccf
    322c:	00009d1f 	.word	0x00009d1f

00003230 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3230:	4b01      	ldr	r3, [pc, #4]	; (3238 <__stdout_hook_install+0x8>)
    3232:	6018      	str	r0, [r3, #0]
}
    3234:	4770      	bx	lr
    3236:	bf00      	nop
    3238:	2000002c 	.word	0x2000002c

0000323c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    323c:	b510      	push	{r4, lr}
	__asm__ volatile(
    323e:	f04f 0320 	mov.w	r3, #32
    3242:	f3ef 8011 	mrs	r0, BASEPRI
    3246:	f383 8812 	msr	BASEPRI_MAX, r3
    324a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    324e:	4a11      	ldr	r2, [pc, #68]	; (3294 <nordicsemi_nrf52_init+0x58>)
    3250:	2301      	movs	r3, #1
    3252:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    325a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    325e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3262:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    3266:	2c08      	cmp	r4, #8
    3268:	d108      	bne.n	327c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    326a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    326e:	2905      	cmp	r1, #5
    3270:	d804      	bhi.n	327c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3272:	4c09      	ldr	r4, [pc, #36]	; (3298 <nordicsemi_nrf52_init+0x5c>)
    3274:	5c61      	ldrb	r1, [r4, r1]
    3276:	b109      	cbz	r1, 327c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3278:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    327c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3280:	2201      	movs	r2, #1
    3282:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3286:	f380 8811 	msr	BASEPRI, r0
    328a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    328e:	2000      	movs	r0, #0
    3290:	bd10      	pop	{r4, pc}
    3292:	bf00      	nop
    3294:	4001e000 	.word	0x4001e000
    3298:	00009d4f 	.word	0x00009d4f

0000329c <sys_arch_reboot>:
    *p_gpregret = val;
    329c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    32a0:	b2c0      	uxtb	r0, r0
    32a2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    32a6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    32aa:	4905      	ldr	r1, [pc, #20]	; (32c0 <sys_arch_reboot+0x24>)
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <sys_arch_reboot+0x28>)
    32ae:	68ca      	ldr	r2, [r1, #12]
    32b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    32b4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    32b6:	60cb      	str	r3, [r1, #12]
    32b8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    32bc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    32be:	e7fd      	b.n	32bc <sys_arch_reboot+0x20>
    32c0:	e000ed00 	.word	0xe000ed00
    32c4:	05fa0004 	.word	0x05fa0004

000032c8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    32c8:	b120      	cbz	r0, 32d4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    32ca:	4b03      	ldr	r3, [pc, #12]	; (32d8 <arch_busy_wait+0x10>)
    32cc:	0180      	lsls	r0, r0, #6
    32ce:	f043 0301 	orr.w	r3, r3, #1
    32d2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    32d4:	4770      	bx	lr
    32d6:	bf00      	nop
    32d8:	00008c50 	.word	0x00008c50

000032dc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    32dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    32de:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    32e0:	490a      	ldr	r1, [pc, #40]	; (330c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    32e2:	4a0b      	ldr	r2, [pc, #44]	; (3310 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    32e4:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    32e6:	2340      	movs	r3, #64	; 0x40
    32e8:	9300      	str	r3, [sp, #0]
    32ea:	1149      	asrs	r1, r1, #5
{
    32ec:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    32ee:	4623      	mov	r3, r4
    32f0:	4808      	ldr	r0, [pc, #32]	; (3314 <onoff_start+0x38>)
    32f2:	f004 ffdc 	bl	82ae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    32f6:	1e01      	subs	r1, r0, #0
    32f8:	da05      	bge.n	3306 <onoff_start+0x2a>
		notify(mgr, err);
    32fa:	4628      	mov	r0, r5
    32fc:	4623      	mov	r3, r4
	}
}
    32fe:	b003      	add	sp, #12
    3300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    3304:	4718      	bx	r3
}
    3306:	b003      	add	sp, #12
    3308:	bd30      	pop	{r4, r5, pc}
    330a:	bf00      	nop
    330c:	200008ac 	.word	0x200008ac
    3310:	00008319 	.word	0x00008319
    3314:	000089c8 	.word	0x000089c8

00003318 <get_status>:
{
    3318:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    331a:	b2cc      	uxtb	r4, r1
    331c:	2c01      	cmp	r4, #1
{
    331e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3320:	d909      	bls.n	3336 <get_status+0x1e>
    3322:	4909      	ldr	r1, [pc, #36]	; (3348 <get_status+0x30>)
    3324:	4809      	ldr	r0, [pc, #36]	; (334c <get_status+0x34>)
    3326:	4a0a      	ldr	r2, [pc, #40]	; (3350 <get_status+0x38>)
    3328:	2379      	movs	r3, #121	; 0x79
    332a:	f004 feb1 	bl	8090 <assert_print>
    332e:	4808      	ldr	r0, [pc, #32]	; (3350 <get_status+0x38>)
    3330:	2179      	movs	r1, #121	; 0x79
    3332:	f004 fea6 	bl	8082 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3336:	692b      	ldr	r3, [r5, #16]
    3338:	220c      	movs	r2, #12
    333a:	fb04 3302 	mla	r3, r4, r2, r3
    333e:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    3340:	f000 0007 	and.w	r0, r0, #7
    3344:	bd38      	pop	{r3, r4, r5, pc}
    3346:	bf00      	nop
    3348:	00009d96 	.word	0x00009d96
    334c:	00008f43 	.word	0x00008f43
    3350:	00009d59 	.word	0x00009d59

00003354 <stop>:
{
    3354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3356:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3358:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    335a:	6906      	ldr	r6, [r0, #16]
{
    335c:	4605      	mov	r5, r0
    335e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3360:	d90b      	bls.n	337a <stop+0x26>
    3362:	4919      	ldr	r1, [pc, #100]	; (33c8 <stop+0x74>)
    3364:	4819      	ldr	r0, [pc, #100]	; (33cc <stop+0x78>)
    3366:	4a1a      	ldr	r2, [pc, #104]	; (33d0 <stop+0x7c>)
    3368:	f240 134d 	movw	r3, #333	; 0x14d
    336c:	f004 fe90 	bl	8090 <assert_print>
    3370:	4817      	ldr	r0, [pc, #92]	; (33d0 <stop+0x7c>)
    3372:	f240 114d 	movw	r1, #333	; 0x14d
    3376:	f004 fe84 	bl	8082 <assert_post_action>
	__asm__ volatile(
    337a:	f04f 0320 	mov.w	r3, #32
    337e:	f3ef 8211 	mrs	r2, BASEPRI
    3382:	f383 8812 	msr	BASEPRI_MAX, r3
    3386:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    338a:	210c      	movs	r1, #12
    338c:	fb01 6304 	mla	r3, r1, r4, r6
    3390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3392:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    3396:	d008      	beq.n	33aa <stop+0x56>
    3398:	429f      	cmp	r7, r3
    339a:	d006      	beq.n	33aa <stop+0x56>
	__asm__ volatile(
    339c:	f382 8811 	msr	BASEPRI, r2
    33a0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    33a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    33a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    33aa:	434c      	muls	r4, r1
    33ac:	4426      	add	r6, r4
    33ae:	2301      	movs	r3, #1
    33b0:	64b3      	str	r3, [r6, #72]	; 0x48
    33b2:	f382 8811 	msr	BASEPRI, r2
    33b6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    33ba:	686b      	ldr	r3, [r5, #4]
    33bc:	4423      	add	r3, r4
    33be:	685b      	ldr	r3, [r3, #4]
    33c0:	4798      	blx	r3
	return 0;
    33c2:	2000      	movs	r0, #0
    33c4:	e7f0      	b.n	33a8 <stop+0x54>
    33c6:	bf00      	nop
    33c8:	00009d96 	.word	0x00009d96
    33cc:	00008f43 	.word	0x00008f43
    33d0:	00009d59 	.word	0x00009d59

000033d4 <onoff_stop>:
{
    33d4:	b570      	push	{r4, r5, r6, lr}
    33d6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    33d8:	4906      	ldr	r1, [pc, #24]	; (33f4 <onoff_stop+0x20>)
    33da:	1a41      	subs	r1, r0, r1
{
    33dc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    33de:	1149      	asrs	r1, r1, #5
    33e0:	4805      	ldr	r0, [pc, #20]	; (33f8 <onoff_stop+0x24>)
    33e2:	2240      	movs	r2, #64	; 0x40
    33e4:	f7ff ffb6 	bl	3354 <stop>
	notify(mgr, res);
    33e8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    33ea:	4601      	mov	r1, r0
	notify(mgr, res);
    33ec:	4620      	mov	r0, r4
}
    33ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    33f2:	4718      	bx	r3
    33f4:	200008ac 	.word	0x200008ac
    33f8:	000089c8 	.word	0x000089c8

000033fc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33fc:	2200      	movs	r2, #0
{
    33fe:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3400:	2101      	movs	r1, #1
{
    3402:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3404:	4610      	mov	r0, r2
    3406:	f7ff f90f 	bl	2628 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    340a:	480f      	ldr	r0, [pc, #60]	; (3448 <clk_init+0x4c>)
    340c:	f001 f9b0 	bl	4770 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3410:	4b0e      	ldr	r3, [pc, #56]	; (344c <clk_init+0x50>)
    3412:	4298      	cmp	r0, r3
    3414:	d115      	bne.n	3442 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3416:	f001 f9d1 	bl	47bc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    341a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    341c:	490c      	ldr	r1, [pc, #48]	; (3450 <clk_init+0x54>)
    341e:	4630      	mov	r0, r6
    3420:	f004 fcf2 	bl	7e08 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3424:	2800      	cmp	r0, #0
    3426:	db0b      	blt.n	3440 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    3428:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    342a:	4909      	ldr	r1, [pc, #36]	; (3450 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    342c:	2501      	movs	r5, #1
    342e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3430:	f104 0020 	add.w	r0, r4, #32
    3434:	f004 fce8 	bl	7e08 <onoff_manager_init>
		if (err < 0) {
    3438:	2800      	cmp	r0, #0
    343a:	db01      	blt.n	3440 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    343c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    343e:	2000      	movs	r0, #0
}
    3440:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3442:	f06f 0004 	mvn.w	r0, #4
    3446:	e7fb      	b.n	3440 <clk_init+0x44>
    3448:	00003489 	.word	0x00003489
    344c:	0bad0000 	.word	0x0bad0000
    3450:	00008d44 	.word	0x00008d44

00003454 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3454:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3456:	230c      	movs	r3, #12
    3458:	4809      	ldr	r0, [pc, #36]	; (3480 <clkstarted_handle.constprop.0+0x2c>)
    345a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    345c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    345e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3460:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    3464:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3466:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    3468:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    346a:	4418      	add	r0, r3
    346c:	f004 ff0c 	bl	8288 <set_on_state>
	if (callback) {
    3470:	b12d      	cbz	r5, 347e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3472:	4632      	mov	r2, r6
    3474:	462b      	mov	r3, r5
    3476:	4803      	ldr	r0, [pc, #12]	; (3484 <clkstarted_handle.constprop.0+0x30>)
}
    3478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    347c:	4718      	bx	r3
}
    347e:	bd70      	pop	{r4, r5, r6, pc}
    3480:	200008ac 	.word	0x200008ac
    3484:	000089c8 	.word	0x000089c8

00003488 <clock_event_handler>:
	switch (event) {
    3488:	2801      	cmp	r0, #1
{
    348a:	b508      	push	{r3, lr}
	switch (event) {
    348c:	d006      	beq.n	349c <clock_event_handler+0x14>
    348e:	2803      	cmp	r0, #3
    3490:	d008      	beq.n	34a4 <clock_event_handler+0x1c>
    3492:	b9a8      	cbnz	r0, 34c0 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3494:	4b10      	ldr	r3, [pc, #64]	; (34d8 <clock_event_handler+0x50>)
    3496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3498:	075b      	lsls	r3, r3, #29
    349a:	d11b      	bne.n	34d4 <clock_event_handler+0x4c>
}
    349c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    34a0:	f7ff bfd8 	b.w	3454 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    34a4:	490d      	ldr	r1, [pc, #52]	; (34dc <clock_event_handler+0x54>)
    34a6:	4a0e      	ldr	r2, [pc, #56]	; (34e0 <clock_event_handler+0x58>)
    34a8:	480e      	ldr	r0, [pc, #56]	; (34e4 <clock_event_handler+0x5c>)
    34aa:	f240 235e 	movw	r3, #606	; 0x25e
    34ae:	f004 fdef 	bl	8090 <assert_print>
    34b2:	f240 215e 	movw	r1, #606	; 0x25e
}
    34b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    34ba:	4809      	ldr	r0, [pc, #36]	; (34e0 <clock_event_handler+0x58>)
    34bc:	f004 bde1 	b.w	8082 <assert_post_action>
    34c0:	4906      	ldr	r1, [pc, #24]	; (34dc <clock_event_handler+0x54>)
    34c2:	4a07      	ldr	r2, [pc, #28]	; (34e0 <clock_event_handler+0x58>)
    34c4:	4807      	ldr	r0, [pc, #28]	; (34e4 <clock_event_handler+0x5c>)
    34c6:	f240 2362 	movw	r3, #610	; 0x262
    34ca:	f004 fde1 	bl	8090 <assert_print>
    34ce:	f240 2162 	movw	r1, #610	; 0x262
    34d2:	e7f0      	b.n	34b6 <clock_event_handler+0x2e>
}
    34d4:	bd08      	pop	{r3, pc}
    34d6:	bf00      	nop
    34d8:	200008ac 	.word	0x200008ac
    34dc:	0000a6a7 	.word	0x0000a6a7
    34e0:	00009d59 	.word	0x00009d59
    34e4:	00008f43 	.word	0x00008f43

000034e8 <generic_hfclk_start>:
{
    34e8:	b508      	push	{r3, lr}
	__asm__ volatile(
    34ea:	f04f 0320 	mov.w	r3, #32
    34ee:	f3ef 8111 	mrs	r1, BASEPRI
    34f2:	f383 8812 	msr	BASEPRI_MAX, r3
    34f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    34fa:	4a12      	ldr	r2, [pc, #72]	; (3544 <generic_hfclk_start+0x5c>)
    34fc:	6813      	ldr	r3, [r2, #0]
    34fe:	f043 0002 	orr.w	r0, r3, #2
    3502:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3504:	07da      	lsls	r2, r3, #31
    3506:	d408      	bmi.n	351a <generic_hfclk_start+0x32>
	__asm__ volatile(
    3508:	f381 8811 	msr	BASEPRI, r1
    350c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3510:	2001      	movs	r0, #1
}
    3512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3516:	f001 b975 	b.w	4804 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    351a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    351e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3522:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3526:	07d3      	lsls	r3, r2, #31
    3528:	d5ee      	bpl.n	3508 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    352a:	4807      	ldr	r0, [pc, #28]	; (3548 <generic_hfclk_start+0x60>)
    352c:	f004 feac 	bl	8288 <set_on_state>
    3530:	f381 8811 	msr	BASEPRI, r1
    3534:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    3538:	2000      	movs	r0, #0
}
    353a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    353e:	f7ff bf89 	b.w	3454 <clkstarted_handle.constprop.0>
    3542:	bf00      	nop
    3544:	20000904 	.word	0x20000904
    3548:	200008f4 	.word	0x200008f4

0000354c <api_blocking_start>:
{
    354c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    354e:	2200      	movs	r2, #0
    3550:	2301      	movs	r3, #1
    3552:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3556:	4a09      	ldr	r2, [pc, #36]	; (357c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3558:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    355c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    355e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3562:	f004 fed2 	bl	830a <api_start>
	if (err < 0) {
    3566:	2800      	cmp	r0, #0
    3568:	db05      	blt.n	3576 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    356a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    356e:	2300      	movs	r3, #0
    3570:	4668      	mov	r0, sp
    3572:	f002 fc2d 	bl	5dd0 <z_impl_k_sem_take>
}
    3576:	b005      	add	sp, #20
    3578:	f85d fb04 	ldr.w	pc, [sp], #4
    357c:	00008337 	.word	0x00008337

00003580 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3580:	4b09      	ldr	r3, [pc, #36]	; (35a8 <generic_hfclk_stop+0x28>)
    3582:	f3bf 8f5b 	dmb	ish
    3586:	e853 2f00 	ldrex	r2, [r3]
    358a:	f022 0102 	bic.w	r1, r2, #2
    358e:	e843 1000 	strex	r0, r1, [r3]
    3592:	2800      	cmp	r0, #0
    3594:	d1f7      	bne.n	3586 <generic_hfclk_stop+0x6>
    3596:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    359a:	07d3      	lsls	r3, r2, #31
    359c:	d402      	bmi.n	35a4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    359e:	2001      	movs	r0, #1
    35a0:	f001 b994 	b.w	48cc <nrfx_clock_stop>
}
    35a4:	4770      	bx	lr
    35a6:	bf00      	nop
    35a8:	20000904 	.word	0x20000904

000035ac <z_nrf_clock_control_lf_on>:
{
    35ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    35b0:	4947      	ldr	r1, [pc, #284]	; (36d0 <z_nrf_clock_control_lf_on+0x124>)
    35b2:	f3bf 8f5b 	dmb	ish
    35b6:	4606      	mov	r6, r0
    35b8:	2201      	movs	r2, #1
    35ba:	e851 3f00 	ldrex	r3, [r1]
    35be:	e841 2000 	strex	r0, r2, [r1]
    35c2:	2800      	cmp	r0, #0
    35c4:	d1f9      	bne.n	35ba <z_nrf_clock_control_lf_on+0xe>
    35c6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    35ca:	b9a3      	cbnz	r3, 35f6 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    35cc:	4941      	ldr	r1, [pc, #260]	; (36d4 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    35ce:	4842      	ldr	r0, [pc, #264]	; (36d8 <z_nrf_clock_control_lf_on+0x12c>)
    35d0:	604b      	str	r3, [r1, #4]
    35d2:	60cb      	str	r3, [r1, #12]
    35d4:	608a      	str	r2, [r1, #8]
    35d6:	f7fd fbcf 	bl	d78 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    35da:	2800      	cmp	r0, #0
    35dc:	da0b      	bge.n	35f6 <z_nrf_clock_control_lf_on+0x4a>
    35de:	493f      	ldr	r1, [pc, #252]	; (36dc <z_nrf_clock_control_lf_on+0x130>)
    35e0:	483f      	ldr	r0, [pc, #252]	; (36e0 <z_nrf_clock_control_lf_on+0x134>)
    35e2:	4a40      	ldr	r2, [pc, #256]	; (36e4 <z_nrf_clock_control_lf_on+0x138>)
    35e4:	f44f 7308 	mov.w	r3, #544	; 0x220
    35e8:	f004 fd52 	bl	8090 <assert_print>
    35ec:	483d      	ldr	r0, [pc, #244]	; (36e4 <z_nrf_clock_control_lf_on+0x138>)
    35ee:	f44f 7108 	mov.w	r1, #544	; 0x220
    35f2:	f004 fd46 	bl	8082 <assert_post_action>
	switch (start_mode) {
    35f6:	b376      	cbz	r6, 3656 <z_nrf_clock_control_lf_on+0xaa>
    35f8:	1e73      	subs	r3, r6, #1
    35fa:	2b01      	cmp	r3, #1
    35fc:	d859      	bhi.n	36b2 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    35fe:	2e01      	cmp	r6, #1
    3600:	d107      	bne.n	3612 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3606:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    360a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    360e:	2b01      	cmp	r3, #1
    3610:	d021      	beq.n	3656 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3612:	f005 f906 	bl	8822 <k_is_in_isr>
    3616:	4605      	mov	r5, r0
    3618:	b9f8      	cbnz	r0, 365a <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    361a:	4b33      	ldr	r3, [pc, #204]	; (36e8 <z_nrf_clock_control_lf_on+0x13c>)
    361c:	781b      	ldrb	r3, [r3, #0]
    361e:	b1e3      	cbz	r3, 365a <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    3620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3624:	2202      	movs	r2, #2
    3626:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    362a:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    362c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 36ec <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3630:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3634:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3638:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    363c:	03d2      	lsls	r2, r2, #15
    363e:	d516      	bpl.n	366e <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3640:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3644:	2b01      	cmp	r3, #1
    3646:	d001      	beq.n	364c <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3648:	2e01      	cmp	r6, #1
    364a:	d110      	bne.n	366e <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    364c:	b35d      	cbz	r5, 36a6 <z_nrf_clock_control_lf_on+0xfa>
    364e:	f387 8811 	msr	BASEPRI, r7
    3652:	f3bf 8f6f 	isb	sy
}
    3656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    365a:	f04f 0320 	mov.w	r3, #32
    365e:	f3ef 8711 	mrs	r7, BASEPRI
    3662:	f383 8812 	msr	BASEPRI_MAX, r3
    3666:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    366a:	2501      	movs	r5, #1
    366c:	e7de      	b.n	362c <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    366e:	b1ad      	cbz	r5, 369c <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3670:	4638      	mov	r0, r7
    3672:	f7fe ff63 	bl	253c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3676:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    367a:	2b00      	cmp	r3, #0
    367c:	d1da      	bne.n	3634 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    367e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3682:	2a00      	cmp	r2, #0
    3684:	d0d6      	beq.n	3634 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3686:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    368a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    368e:	2301      	movs	r3, #1
    3690:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    3694:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3698:	60a3      	str	r3, [r4, #8]
}
    369a:	e7cb      	b.n	3634 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    369c:	2100      	movs	r1, #0
    369e:	2021      	movs	r0, #33	; 0x21
    36a0:	f003 fbe2 	bl	6e68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    36a4:	e7e7      	b.n	3676 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    36a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36aa:	2202      	movs	r2, #2
    36ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    36b0:	e7d1      	b.n	3656 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    36b2:	490f      	ldr	r1, [pc, #60]	; (36f0 <z_nrf_clock_control_lf_on+0x144>)
    36b4:	480a      	ldr	r0, [pc, #40]	; (36e0 <z_nrf_clock_control_lf_on+0x134>)
    36b6:	4a0b      	ldr	r2, [pc, #44]	; (36e4 <z_nrf_clock_control_lf_on+0x138>)
    36b8:	f240 2332 	movw	r3, #562	; 0x232
    36bc:	f004 fce8 	bl	8090 <assert_print>
}
    36c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    36c4:	4807      	ldr	r0, [pc, #28]	; (36e4 <z_nrf_clock_control_lf_on+0x138>)
    36c6:	f240 2132 	movw	r1, #562	; 0x232
    36ca:	f004 bcda 	b.w	8082 <assert_post_action>
    36ce:	bf00      	nop
    36d0:	200008a8 	.word	0x200008a8
    36d4:	20000898 	.word	0x20000898
    36d8:	200008cc 	.word	0x200008cc
    36dc:	000094d9 	.word	0x000094d9
    36e0:	00008f43 	.word	0x00008f43
    36e4:	00009d59 	.word	0x00009d59
    36e8:	20001018 	.word	0x20001018
    36ec:	e000e100 	.word	0xe000e100
    36f0:	0000a6a7 	.word	0x0000a6a7

000036f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    36f4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    36f6:	4b08      	ldr	r3, [pc, #32]	; (3718 <uart_console_init+0x24>)
    36f8:	4808      	ldr	r0, [pc, #32]	; (371c <uart_console_init+0x28>)
    36fa:	6018      	str	r0, [r3, #0]
    36fc:	f005 f857 	bl	87ae <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3700:	b138      	cbz	r0, 3712 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3702:	4807      	ldr	r0, [pc, #28]	; (3720 <uart_console_init+0x2c>)
    3704:	f7ff fd94 	bl	3230 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3708:	4805      	ldr	r0, [pc, #20]	; (3720 <uart_console_init+0x2c>)
    370a:	f7fd f8e1 	bl	8d0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    370e:	2000      	movs	r0, #0
}
    3710:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3712:	f06f 0012 	mvn.w	r0, #18
    3716:	e7fb      	b.n	3710 <uart_console_init+0x1c>
    3718:	20000908 	.word	0x20000908
    371c:	00008a28 	.word	0x00008a28
    3720:	00003725 	.word	0x00003725

00003724 <console_out>:
	if ('\n' == c) {
    3724:	280a      	cmp	r0, #10
{
    3726:	b538      	push	{r3, r4, r5, lr}
    3728:	4d07      	ldr	r5, [pc, #28]	; (3748 <console_out+0x24>)
    372a:	4604      	mov	r4, r0
	if ('\n' == c) {
    372c:	d104      	bne.n	3738 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    372e:	6828      	ldr	r0, [r5, #0]
    3730:	6883      	ldr	r3, [r0, #8]
    3732:	210d      	movs	r1, #13
    3734:	685b      	ldr	r3, [r3, #4]
    3736:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3738:	6828      	ldr	r0, [r5, #0]
    373a:	6883      	ldr	r3, [r0, #8]
    373c:	b2e1      	uxtb	r1, r4
    373e:	685b      	ldr	r3, [r3, #4]
    3740:	4798      	blx	r3
}
    3742:	4620      	mov	r0, r4
    3744:	bd38      	pop	{r3, r4, r5, pc}
    3746:	bf00      	nop
    3748:	20000908 	.word	0x20000908

0000374c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    374c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    374e:	6905      	ldr	r5, [r0, #16]
{
    3750:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3752:	460c      	mov	r4, r1
    3754:	b961      	cbnz	r1, 3770 <gpio_nrfx_manage_callback+0x24>
    3756:	4922      	ldr	r1, [pc, #136]	; (37e0 <gpio_nrfx_manage_callback+0x94>)
    3758:	4a22      	ldr	r2, [pc, #136]	; (37e4 <gpio_nrfx_manage_callback+0x98>)
    375a:	4823      	ldr	r0, [pc, #140]	; (37e8 <gpio_nrfx_manage_callback+0x9c>)
    375c:	2324      	movs	r3, #36	; 0x24
    375e:	f004 fc97 	bl	8090 <assert_print>
    3762:	4822      	ldr	r0, [pc, #136]	; (37ec <gpio_nrfx_manage_callback+0xa0>)
    3764:	f004 fc94 	bl	8090 <assert_print>
    3768:	481e      	ldr	r0, [pc, #120]	; (37e4 <gpio_nrfx_manage_callback+0x98>)
    376a:	2124      	movs	r1, #36	; 0x24
    376c:	f004 fc89 	bl	8082 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3770:	6863      	ldr	r3, [r4, #4]
    3772:	b963      	cbnz	r3, 378e <gpio_nrfx_manage_callback+0x42>
    3774:	491e      	ldr	r1, [pc, #120]	; (37f0 <gpio_nrfx_manage_callback+0xa4>)
    3776:	4a1b      	ldr	r2, [pc, #108]	; (37e4 <gpio_nrfx_manage_callback+0x98>)
    3778:	481b      	ldr	r0, [pc, #108]	; (37e8 <gpio_nrfx_manage_callback+0x9c>)
    377a:	2325      	movs	r3, #37	; 0x25
    377c:	f004 fc88 	bl	8090 <assert_print>
    3780:	481c      	ldr	r0, [pc, #112]	; (37f4 <gpio_nrfx_manage_callback+0xa8>)
    3782:	f004 fc85 	bl	8090 <assert_print>
    3786:	4817      	ldr	r0, [pc, #92]	; (37e4 <gpio_nrfx_manage_callback+0x98>)
    3788:	2125      	movs	r1, #37	; 0x25
    378a:	f004 fc7a 	bl	8082 <assert_post_action>
	return list->head;
    378e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3790:	b14b      	cbz	r3, 37a6 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3792:	42a3      	cmp	r3, r4
    3794:	d113      	bne.n	37be <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    3796:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    3798:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    379a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    379c:	4294      	cmp	r4, r2
    379e:	d100      	bne.n	37a2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    37a0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    37a2:	2300      	movs	r3, #0
    37a4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    37a6:	b97e      	cbnz	r6, 37c8 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    37a8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    37aa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    37ac:	429c      	cmp	r4, r3
    37ae:	d106      	bne.n	37be <gpio_nrfx_manage_callback+0x72>
	return node->next;
    37b0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    37b2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    37b4:	68ab      	ldr	r3, [r5, #8]
    37b6:	429c      	cmp	r4, r3
    37b8:	d1f3      	bne.n	37a2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    37ba:	60aa      	str	r2, [r5, #8]
}
    37bc:	e7f1      	b.n	37a2 <gpio_nrfx_manage_callback+0x56>
	return node->next;
    37be:	461a      	mov	r2, r3
    37c0:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    37c2:	2b00      	cmp	r3, #0
    37c4:	d1f2      	bne.n	37ac <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    37c6:	b13e      	cbz	r6, 37d8 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    37c8:	686b      	ldr	r3, [r5, #4]
    37ca:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    37cc:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    37ce:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    37d0:	2b00      	cmp	r3, #0
    37d2:	d1e9      	bne.n	37a8 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    37d4:	60ac      	str	r4, [r5, #8]
}
    37d6:	e7e7      	b.n	37a8 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    37d8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    37dc:	e7e5      	b.n	37aa <gpio_nrfx_manage_callback+0x5e>
    37de:	bf00      	nop
    37e0:	00009e07 	.word	0x00009e07
    37e4:	00009dda 	.word	0x00009dda
    37e8:	00008f43 	.word	0x00008f43
    37ec:	00009e10 	.word	0x00009e10
    37f0:	00009e1f 	.word	0x00009e1f
    37f4:	00009e31 	.word	0x00009e31

000037f8 <gpio_nrfx_pin_interrupt_configure>:
{
    37f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    37fa:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    37fc:	7b05      	ldrb	r5, [r0, #12]
    37fe:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    3802:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3806:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    380a:	d104      	bne.n	3816 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    380c:	4620      	mov	r0, r4
    380e:	f001 fb79 	bl	4f04 <nrfx_gpiote_trigger_disable>
		return 0;
    3812:	2000      	movs	r0, #0
    3814:	e05d      	b.n	38d2 <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3816:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3818:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    381c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3820:	d114      	bne.n	384c <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3826:	bf0c      	ite	eq
    3828:	2304      	moveq	r3, #4
    382a:	2305      	movne	r3, #5
    382c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3830:	2300      	movs	r3, #0
    3832:	4619      	mov	r1, r3
    3834:	aa02      	add	r2, sp, #8
    3836:	4620      	mov	r0, r4
    3838:	f001 f96a 	bl	4b10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    383c:	4b34      	ldr	r3, [pc, #208]	; (3910 <gpio_nrfx_pin_interrupt_configure+0x118>)
    383e:	4298      	cmp	r0, r3
    3840:	d162      	bne.n	3908 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3842:	2101      	movs	r1, #1
    3844:	4620      	mov	r0, r4
    3846:	f001 faed 	bl	4e24 <nrfx_gpiote_trigger_enable>
	return 0;
    384a:	e7e2      	b.n	3812 <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    384c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3850:	d041      	beq.n	38d6 <gpio_nrfx_pin_interrupt_configure+0xde>
    3852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3856:	bf14      	ite	ne
    3858:	2301      	movne	r3, #1
    385a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    385c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3860:	6883      	ldr	r3, [r0, #8]
    3862:	40cb      	lsrs	r3, r1
    3864:	07d8      	lsls	r0, r3, #31
    3866:	d4e3      	bmi.n	3830 <gpio_nrfx_pin_interrupt_configure+0x38>
    3868:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    386c:	d1e0      	bne.n	3830 <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    386e:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    3870:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    3874:	d031      	beq.n	38da <gpio_nrfx_pin_interrupt_configure+0xe2>
    3876:	2e01      	cmp	r6, #1
    3878:	d104      	bne.n	3884 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    387a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    387e:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3880:	07d9      	lsls	r1, r3, #31
    3882:	d40e      	bmi.n	38a2 <gpio_nrfx_pin_interrupt_configure+0xaa>
    3884:	4923      	ldr	r1, [pc, #140]	; (3914 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3886:	4824      	ldr	r0, [pc, #144]	; (3918 <gpio_nrfx_pin_interrupt_configure+0x120>)
    3888:	4a24      	ldr	r2, [pc, #144]	; (391c <gpio_nrfx_pin_interrupt_configure+0x124>)
    388a:	f240 2329 	movw	r3, #553	; 0x229
    388e:	f004 fbff 	bl	8090 <assert_print>
    3892:	4822      	ldr	r0, [pc, #136]	; (391c <gpio_nrfx_pin_interrupt_configure+0x124>)
    3894:	f240 2129 	movw	r1, #553	; 0x229
    3898:	f004 fbf3 	bl	8082 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    389c:	b316      	cbz	r6, 38e4 <gpio_nrfx_pin_interrupt_configure+0xec>
    389e:	2e01      	cmp	r6, #1
    38a0:	d123      	bne.n	38ea <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    38a2:	4b1f      	ldr	r3, [pc, #124]	; (3920 <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    38a4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    38a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    38ac:	07db      	lsls	r3, r3, #31
    38ae:	d4bf      	bmi.n	3830 <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38b0:	f10d 0507 	add.w	r5, sp, #7
    38b4:	4629      	mov	r1, r5
    38b6:	4620      	mov	r0, r4
    38b8:	f001 fa4c 	bl	4d54 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    38bc:	4b19      	ldr	r3, [pc, #100]	; (3924 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    38be:	4298      	cmp	r0, r3
    38c0:	d120      	bne.n	3904 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    38c2:	4628      	mov	r0, r5
    38c4:	f001 faa8 	bl	4e18 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    38c8:	4b11      	ldr	r3, [pc, #68]	; (3910 <gpio_nrfx_pin_interrupt_configure+0x118>)
    38ca:	4298      	cmp	r0, r3
    38cc:	d01a      	beq.n	3904 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    38ce:	f06f 000b 	mvn.w	r0, #11
}
    38d2:	b004      	add	sp, #16
    38d4:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    38d6:	2303      	movs	r3, #3
    38d8:	e7c0      	b.n	385c <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    38da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38de:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    38e0:	07da      	lsls	r2, r3, #31
    38e2:	d5cf      	bpl.n	3884 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    38e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    38e8:	e7dc      	b.n	38a4 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    38ea:	4a0c      	ldr	r2, [pc, #48]	; (391c <gpio_nrfx_pin_interrupt_configure+0x124>)
    38ec:	490e      	ldr	r1, [pc, #56]	; (3928 <gpio_nrfx_pin_interrupt_configure+0x130>)
    38ee:	480a      	ldr	r0, [pc, #40]	; (3918 <gpio_nrfx_pin_interrupt_configure+0x120>)
    38f0:	f240 232e 	movw	r3, #558	; 0x22e
    38f4:	f004 fbcc 	bl	8090 <assert_print>
    38f8:	4808      	ldr	r0, [pc, #32]	; (391c <gpio_nrfx_pin_interrupt_configure+0x124>)
    38fa:	f240 212e 	movw	r1, #558	; 0x22e
    38fe:	f004 fbc0 	bl	8082 <assert_post_action>
    3902:	e7ef      	b.n	38e4 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    3904:	9503      	str	r5, [sp, #12]
    3906:	e793      	b.n	3830 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    3908:	f06f 0004 	mvn.w	r0, #4
    390c:	e7e1      	b.n	38d2 <gpio_nrfx_pin_interrupt_configure+0xda>
    390e:	bf00      	nop
    3910:	0bad0000 	.word	0x0bad0000
    3914:	00009e7b 	.word	0x00009e7b
    3918:	00008f43 	.word	0x00008f43
    391c:	00009e48 	.word	0x00009e48
    3920:	50000300 	.word	0x50000300
    3924:	0bad0004 	.word	0x0bad0004
    3928:	0000a6a7 	.word	0x0000a6a7

0000392c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    392c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    392e:	f001 fa63 	bl	4df8 <nrfx_gpiote_is_init>
    3932:	4604      	mov	r4, r0
    3934:	b968      	cbnz	r0, 3952 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3936:	f001 fa37 	bl	4da8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    393a:	4b08      	ldr	r3, [pc, #32]	; (395c <gpio_nrfx_init+0x30>)
    393c:	4298      	cmp	r0, r3
    393e:	d10a      	bne.n	3956 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3940:	4807      	ldr	r0, [pc, #28]	; (3960 <gpio_nrfx_init+0x34>)
    3942:	4621      	mov	r1, r4
    3944:	f001 fa00 	bl	4d48 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3948:	4622      	mov	r2, r4
    394a:	2105      	movs	r1, #5
    394c:	2006      	movs	r0, #6
    394e:	f7fe fe6b 	bl	2628 <z_arm_irq_priority_set>
		return 0;
    3952:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3954:	bd10      	pop	{r4, pc}
		return -EIO;
    3956:	f06f 0004 	mvn.w	r0, #4
    395a:	e7fb      	b.n	3954 <gpio_nrfx_init+0x28>
    395c:	0bad0000 	.word	0x0bad0000
    3960:	00003965 	.word	0x00003965

00003964 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3964:	0943      	lsrs	r3, r0, #5
{
    3966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    396a:	d003      	beq.n	3974 <nrfx_gpio_handler+0x10>
    396c:	2b01      	cmp	r3, #1
    396e:	d030      	beq.n	39d2 <nrfx_gpio_handler+0x6e>
}
    3970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3974:	4f19      	ldr	r7, [pc, #100]	; (39dc <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3976:	693b      	ldr	r3, [r7, #16]
    3978:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    397a:	2c00      	cmp	r4, #0
    397c:	d0f8      	beq.n	3970 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    397e:	f000 001f 	and.w	r0, r0, #31
    3982:	2601      	movs	r6, #1
	return node->next;
    3984:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3986:	f8df 8058 	ldr.w	r8, [pc, #88]	; 39e0 <nrfx_gpio_handler+0x7c>
    398a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 39e4 <nrfx_gpio_handler+0x80>
    398e:	f8df a058 	ldr.w	sl, [pc, #88]	; 39e8 <nrfx_gpio_handler+0x84>
    3992:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3994:	2c00      	cmp	r4, #0
    3996:	d0eb      	beq.n	3970 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    3998:	68a3      	ldr	r3, [r4, #8]
    399a:	421e      	tst	r6, r3
    399c:	d014      	beq.n	39c8 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    399e:	6863      	ldr	r3, [r4, #4]
    39a0:	b963      	cbnz	r3, 39bc <nrfx_gpio_handler+0x58>
    39a2:	4649      	mov	r1, r9
    39a4:	2345      	movs	r3, #69	; 0x45
    39a6:	4642      	mov	r2, r8
    39a8:	4650      	mov	r0, sl
    39aa:	f004 fb71 	bl	8090 <assert_print>
    39ae:	480f      	ldr	r0, [pc, #60]	; (39ec <nrfx_gpio_handler+0x88>)
    39b0:	f004 fb6e 	bl	8090 <assert_print>
    39b4:	2145      	movs	r1, #69	; 0x45
    39b6:	4640      	mov	r0, r8
    39b8:	f004 fb63 	bl	8082 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    39bc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    39c0:	4621      	mov	r1, r4
    39c2:	4032      	ands	r2, r6
    39c4:	4638      	mov	r0, r7
    39c6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    39c8:	b12d      	cbz	r5, 39d6 <nrfx_gpio_handler+0x72>
    39ca:	682b      	ldr	r3, [r5, #0]
    39cc:	462c      	mov	r4, r5
    39ce:	461d      	mov	r5, r3
    39d0:	e7e0      	b.n	3994 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    39d2:	4f07      	ldr	r7, [pc, #28]	; (39f0 <nrfx_gpio_handler+0x8c>)
    39d4:	e7cf      	b.n	3976 <nrfx_gpio_handler+0x12>
    39d6:	462b      	mov	r3, r5
    39d8:	e7f8      	b.n	39cc <nrfx_gpio_handler+0x68>
    39da:	bf00      	nop
    39dc:	000089f8 	.word	0x000089f8
    39e0:	00009dda 	.word	0x00009dda
    39e4:	00009e9e 	.word	0x00009e9e
    39e8:	00008f43 	.word	0x00008f43
    39ec:	00009e31 	.word	0x00009e31
    39f0:	000089e0 	.word	0x000089e0

000039f4 <gpio_nrfx_pin_configure>:
{
    39f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    39f8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    39fa:	7b3b      	ldrb	r3, [r7, #12]
    39fc:	f001 051f 	and.w	r5, r1, #31
{
    3a00:	b085      	sub	sp, #20
    3a02:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3a04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3a08:	4614      	mov	r4, r2
    3a0a:	b9d2      	cbnz	r2, 3a42 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a0c:	a902      	add	r1, sp, #8
    3a0e:	4628      	mov	r0, r5
    3a10:	f001 f9a0 	bl	4d54 <nrfx_gpiote_channel_get>
    3a14:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3a16:	4628      	mov	r0, r5
    3a18:	f001 fa9e 	bl	4f58 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3a1c:	4b46      	ldr	r3, [pc, #280]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a1e:	4298      	cmp	r0, r3
    3a20:	d004      	beq.n	3a2c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3a22:	f06f 0004 	mvn.w	r0, #4
}
    3a26:	b005      	add	sp, #20
    3a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3a2c:	4284      	cmp	r4, r0
    3a2e:	d001      	beq.n	3a34 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3a30:	2000      	movs	r0, #0
    3a32:	e7f8      	b.n	3a26 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    3a34:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3a38:	f001 f9e8 	bl	4e0c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3a3c:	42a0      	cmp	r0, r4
    3a3e:	d0f7      	beq.n	3a30 <gpio_nrfx_pin_configure+0x3c>
    3a40:	e7ef      	b.n	3a22 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a42:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a46:	f10d 0103 	add.w	r1, sp, #3
    3a4a:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a4c:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a50:	f001 f980 	bl	4d54 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a54:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3a56:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a58:	aa02      	add	r2, sp, #8
    3a5a:	4649      	mov	r1, r9
    3a5c:	4628      	mov	r0, r5
    3a5e:	f001 f857 	bl	4b10 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3a62:	4b35      	ldr	r3, [pc, #212]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a64:	4298      	cmp	r0, r3
    3a66:	d002      	beq.n	3a6e <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    3a68:	f06f 0015 	mvn.w	r0, #21
    3a6c:	e7db      	b.n	3a26 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3a6e:	4580      	cmp	r8, r0
    3a70:	d103      	bne.n	3a7a <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    3a72:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3a76:	f001 f9c9 	bl	4e0c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3a7a:	03a3      	lsls	r3, r4, #14
    3a7c:	d54c      	bpl.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3a7e:	f240 6306 	movw	r3, #1542	; 0x606
    3a82:	4023      	ands	r3, r4
    3a84:	f240 2206 	movw	r2, #518	; 0x206
    3a88:	4293      	cmp	r3, r2
    3a8a:	d019      	beq.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
    3a8c:	d80c      	bhi.n	3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>
    3a8e:	2b06      	cmp	r3, #6
    3a90:	d017      	beq.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3a92:	d804      	bhi.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a94:	b1ab      	cbz	r3, 3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3a96:	2b02      	cmp	r3, #2
    3a98:	d1e6      	bne.n	3a68 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    3a9a:	2304      	movs	r3, #4
    3a9c:	e011      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3aa2:	d1e1      	bne.n	3a68 <gpio_nrfx_pin_configure+0x74>
    3aa4:	2301      	movs	r3, #1
    3aa6:	e00c      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3aa8:	f240 4202 	movw	r2, #1026	; 0x402
    3aac:	4293      	cmp	r3, r2
    3aae:	d027      	beq.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    3ab0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3ab4:	d026      	beq.n	3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3aba:	d1d5      	bne.n	3a68 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    3abc:	2302      	movs	r3, #2
    3abe:	e000      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*drive = NRF_GPIO_PIN_H0D1;
    3ac0:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3ac2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3ac6:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3aca:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3ace:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3ad0:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    3ad4:	bf54      	ite	pl
    3ad6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3ada:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3adc:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3ade:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3ae2:	d511      	bpl.n	3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3ae4:	687a      	ldr	r2, [r7, #4]
    3ae6:	2301      	movs	r3, #1
    3ae8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3aea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3aee:	2200      	movs	r2, #0
    3af0:	a901      	add	r1, sp, #4
    3af2:	4628      	mov	r0, r5
    3af4:	f001 f8b4 	bl	4c60 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3af8:	4b0f      	ldr	r3, [pc, #60]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3afa:	4298      	cmp	r0, r3
    3afc:	d098      	beq.n	3a30 <gpio_nrfx_pin_configure+0x3c>
    3afe:	e7b3      	b.n	3a68 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    3b00:	2305      	movs	r3, #5
    3b02:	e7de      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		*drive = NRF_GPIO_PIN_H0H1;
    3b04:	2303      	movs	r3, #3
    3b06:	e7dc      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3b08:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3b0a:	bf41      	itttt	mi
    3b0c:	2301      	movmi	r3, #1
    3b0e:	687a      	ldrmi	r2, [r7, #4]
    3b10:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3b12:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    3b16:	e7ea      	b.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
	if (flags & GPIO_PULL_UP) {
    3b18:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3b1a:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    3b1e:	bf54      	ite	pl
    3b20:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3b24:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3b26:	461a      	mov	r2, r3
    3b28:	a901      	add	r1, sp, #4
    3b2a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3b2c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3b30:	f000 ffee 	bl	4b10 <nrfx_gpiote_input_configure>
    3b34:	e7e0      	b.n	3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
    3b36:	bf00      	nop
    3b38:	0bad0000 	.word	0x0bad0000

00003b3c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    3b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    3b3e:	ab0b      	add	r3, sp, #44	; 0x2c
    3b40:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    3b42:	9303      	str	r3, [sp, #12]
    3b44:	4b05      	ldr	r3, [pc, #20]	; (3b5c <z_log_msg2_runtime_create.constprop.0+0x20>)
    3b46:	9302      	str	r3, [sp, #8]
    3b48:	2300      	movs	r3, #0
    3b4a:	e9cd 3300 	strd	r3, r3, [sp]
    3b4e:	2201      	movs	r2, #1
    3b50:	4618      	mov	r0, r3
    3b52:	f7fe f971 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    3b56:	b007      	add	sp, #28
    3b58:	f85d fb04 	ldr.w	pc, [sp], #4
    3b5c:	00009eb8 	.word	0x00009eb8

00003b60 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3b60:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3b62:	794b      	ldrb	r3, [r1, #5]
    3b64:	2b01      	cmp	r3, #1
    3b66:	d026      	beq.n	3bb6 <uarte_nrfx_configure+0x56>
    3b68:	2b03      	cmp	r3, #3
    3b6a:	d121      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3b6c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3b6e:	798b      	ldrb	r3, [r1, #6]
    3b70:	2b03      	cmp	r3, #3
    3b72:	d11d      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3b74:	79cc      	ldrb	r4, [r1, #7]
    3b76:	b10c      	cbz	r4, 3b7c <uarte_nrfx_configure+0x1c>
    3b78:	2c01      	cmp	r4, #1
    3b7a:	d119      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3b7c:	790a      	ldrb	r2, [r1, #4]
    3b7e:	b112      	cbz	r2, 3b86 <uarte_nrfx_configure+0x26>
    3b80:	2a02      	cmp	r2, #2
    3b82:	d115      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3b84:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3b86:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3b88:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3b8a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3b8e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3b90:	d065      	beq.n	3c5e <uarte_nrfx_configure+0xfe>
    3b92:	d82d      	bhi.n	3bf0 <uarte_nrfx_configure+0x90>
    3b94:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3b98:	d064      	beq.n	3c64 <uarte_nrfx_configure+0x104>
    3b9a:	d816      	bhi.n	3bca <uarte_nrfx_configure+0x6a>
    3b9c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ba0:	d062      	beq.n	3c68 <uarte_nrfx_configure+0x108>
    3ba2:	d80a      	bhi.n	3bba <uarte_nrfx_configure+0x5a>
    3ba4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3ba8:	d061      	beq.n	3c6e <uarte_nrfx_configure+0x10e>
    3baa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3bae:	d061      	beq.n	3c74 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    3bb0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3bb4:	e052      	b.n	3c5c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3bb6:	2600      	movs	r6, #0
    3bb8:	e7d9      	b.n	3b6e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3bba:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3bbe:	d05c      	beq.n	3c7a <uarte_nrfx_configure+0x11a>
    3bc0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3bc4:	d1f4      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3bc6:	4b37      	ldr	r3, [pc, #220]	; (3ca4 <uarte_nrfx_configure+0x144>)
    3bc8:	e03c      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3bca:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3bce:	d057      	beq.n	3c80 <uarte_nrfx_configure+0x120>
    3bd0:	d807      	bhi.n	3be2 <uarte_nrfx_configure+0x82>
    3bd2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3bd6:	d055      	beq.n	3c84 <uarte_nrfx_configure+0x124>
    3bd8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3bdc:	d1e8      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3bde:	4b32      	ldr	r3, [pc, #200]	; (3ca8 <uarte_nrfx_configure+0x148>)
    3be0:	e030      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3be2:	f647 2712 	movw	r7, #31250	; 0x7a12
    3be6:	42bb      	cmp	r3, r7
    3be8:	d1e2      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3bea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3bee:	e029      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3bf0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3bf4:	d048      	beq.n	3c88 <uarte_nrfx_configure+0x128>
    3bf6:	d813      	bhi.n	3c20 <uarte_nrfx_configure+0xc0>
    3bf8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3bfc:	d047      	beq.n	3c8e <uarte_nrfx_configure+0x12e>
    3bfe:	d809      	bhi.n	3c14 <uarte_nrfx_configure+0xb4>
    3c00:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3c04:	42bb      	cmp	r3, r7
    3c06:	d044      	beq.n	3c92 <uarte_nrfx_configure+0x132>
    3c08:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c0c:	d1d0      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3c0e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3c12:	e017      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c14:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c18:	d1ca      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3c1a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3c1e:	e011      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c20:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3c24:	d038      	beq.n	3c98 <uarte_nrfx_configure+0x138>
    3c26:	d808      	bhi.n	3c3a <uarte_nrfx_configure+0xda>
    3c28:	4f20      	ldr	r7, [pc, #128]	; (3cac <uarte_nrfx_configure+0x14c>)
    3c2a:	42bb      	cmp	r3, r7
    3c2c:	d037      	beq.n	3c9e <uarte_nrfx_configure+0x13e>
    3c2e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3c32:	d1bd      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3c34:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3c38:	e004      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c3a:	4f1d      	ldr	r7, [pc, #116]	; (3cb0 <uarte_nrfx_configure+0x150>)
    3c3c:	42bb      	cmp	r3, r7
    3c3e:	d1b7      	bne.n	3bb0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3c44:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3c46:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3c4a:	1d03      	adds	r3, r0, #4
    3c4c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3c4e:	4334      	orrs	r4, r6
    3c50:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3c52:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3c56:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3c5a:	2000      	movs	r0, #0
}
    3c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3c5e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3c62:	e7ef      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3c64:	4b13      	ldr	r3, [pc, #76]	; (3cb4 <uarte_nrfx_configure+0x154>)
    3c66:	e7ed      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3c68:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3c6c:	e7ea      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3c6e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3c72:	e7e7      	b.n	3c44 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c74:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3c78:	e7e4      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3c7a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3c7e:	e7e1      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3c80:	4b0d      	ldr	r3, [pc, #52]	; (3cb8 <uarte_nrfx_configure+0x158>)
    3c82:	e7df      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3c84:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <uarte_nrfx_configure+0x15c>)
    3c86:	e7dd      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3c88:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3c8c:	e7da      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3c8e:	4b0c      	ldr	r3, [pc, #48]	; (3cc0 <uarte_nrfx_configure+0x160>)
    3c90:	e7d8      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3c92:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3c96:	e7d5      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3c98:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3c9c:	e7d2      	b.n	3c44 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3ca2:	e7cf      	b.n	3c44 <uarte_nrfx_configure+0xe4>
    3ca4:	0013b000 	.word	0x0013b000
    3ca8:	004ea000 	.word	0x004ea000
    3cac:	0003d090 	.word	0x0003d090
    3cb0:	000f4240 	.word	0x000f4240
    3cb4:	00275000 	.word	0x00275000
    3cb8:	0075c000 	.word	0x0075c000
    3cbc:	003af000 	.word	0x003af000
    3cc0:	013a9000 	.word	0x013a9000

00003cc4 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    3cc8:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3ccc:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3cce:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3cd2:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    3cd6:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3cd8:	2100      	movs	r1, #0
    3cda:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    3cde:	4607      	mov	r7, r0
	data->dev = dev;
    3ce0:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3ce2:	aa05      	add	r2, sp, #20
    3ce4:	4648      	mov	r0, r9
    3ce6:	f004 fbde 	bl	84a6 <pinctrl_lookup_state>
	if (ret < 0) {
    3cea:	1e04      	subs	r4, r0, #0
    3cec:	db25      	blt.n	3d3a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3cee:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3cf0:	f8d9 2000 	ldr.w	r2, [r9]
    3cf4:	7919      	ldrb	r1, [r3, #4]
    3cf6:	6818      	ldr	r0, [r3, #0]
    3cf8:	f004 fc2c 	bl	8554 <pinctrl_configure_pins>
	if (err < 0) {
    3cfc:	1e04      	subs	r4, r0, #0
    3cfe:	db1c      	blt.n	3d3a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    3d00:	1d31      	adds	r1, r6, #4
    3d02:	4638      	mov	r0, r7
    3d04:	f7ff ff2c 	bl	3b60 <uarte_nrfx_configure>
	if (err) {
    3d08:	4604      	mov	r4, r0
    3d0a:	b9b0      	cbnz	r0, 3d3a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3d0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3d10:	0799      	lsls	r1, r3, #30
    3d12:	d529      	bpl.n	3d68 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3d14:	f106 0012 	add.w	r0, r6, #18
    3d18:	f001 fa22 	bl	5160 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3d1c:	4b27      	ldr	r3, [pc, #156]	; (3dbc <uarte_instance_init.constprop.0+0xf8>)
    3d1e:	4298      	cmp	r0, r3
    3d20:	d00f      	beq.n	3d42 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    3d22:	4b27      	ldr	r3, [pc, #156]	; (3dc0 <uarte_instance_init.constprop.0+0xfc>)
    3d24:	9400      	str	r4, [sp, #0]
    3d26:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d2a:	4620      	mov	r0, r4
    3d2c:	4623      	mov	r3, r4
    3d2e:	4925      	ldr	r1, [pc, #148]	; (3dc4 <uarte_instance_init.constprop.0+0x100>)
    3d30:	2201      	movs	r2, #1
    3d32:	f7ff ff03 	bl	3b3c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    3d36:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3d3a:	4620      	mov	r0, r4
    3d3c:	b007      	add	sp, #28
    3d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3d42:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3d44:	00c3      	lsls	r3, r0, #3
    3d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d4a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3d4e:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3d52:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3d56:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3d5a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3d5e:	4a1a      	ldr	r2, [pc, #104]	; (3dc8 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3d60:	2301      	movs	r3, #1
    3d62:	4083      	lsls	r3, r0
    3d64:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3d68:	2308      	movs	r3, #8
    3d6a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3d6e:	f898 3008 	ldrb.w	r3, [r8, #8]
    3d72:	b95b      	cbnz	r3, 3d8c <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d74:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    3d78:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3d7c:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3d80:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3d84:	2301      	movs	r3, #1
    3d86:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d8a:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3d8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3d90:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3d92:	bf5c      	itt	pl
    3d94:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3d98:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3d9c:	06db      	lsls	r3, r3, #27
    3d9e:	bf44      	itt	mi
    3da0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3da4:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3da8:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    3daa:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3dac:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3db0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3db4:	2301      	movs	r3, #1
    3db6:	60ab      	str	r3, [r5, #8]
    3db8:	60eb      	str	r3, [r5, #12]
	return 0;
    3dba:	e7be      	b.n	3d3a <uarte_instance_init.constprop.0+0x76>
    3dbc:	0bad0000 	.word	0x0bad0000
    3dc0:	00009eb8 	.word	0x00009eb8
    3dc4:	00008c00 	.word	0x00008c00
    3dc8:	4001f000 	.word	0x4001f000

00003dcc <uarte_nrfx_poll_out>:
{
    3dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    3dce:	6906      	ldr	r6, [r0, #16]
{
    3dd0:	4605      	mov	r5, r0
    3dd2:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3dd4:	f004 fd25 	bl	8822 <k_is_in_isr>
    3dd8:	b9b0      	cbnz	r0, 3e08 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    3dda:	4b2c      	ldr	r3, [pc, #176]	; (3e8c <uarte_nrfx_poll_out+0xc0>)
    3ddc:	781b      	ldrb	r3, [r3, #0]
    3dde:	b19b      	cbz	r3, 3e08 <uarte_nrfx_poll_out+0x3c>
{
    3de0:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3de2:	6868      	ldr	r0, [r5, #4]
    3de4:	f004 faf3 	bl	83ce <is_tx_ready.isra.0>
    3de8:	b9f8      	cbnz	r0, 3e2a <uarte_nrfx_poll_out+0x5e>
    3dea:	2001      	movs	r0, #1
    3dec:	f004 fc5d 	bl	86aa <nrfx_busy_wait>
    3df0:	3c01      	subs	r4, #1
    3df2:	d1f6      	bne.n	3de2 <uarte_nrfx_poll_out+0x16>
    3df4:	2100      	movs	r1, #0
    3df6:	2021      	movs	r0, #33	; 0x21
    3df8:	f003 f836 	bl	6e68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3dfc:	e7f0      	b.n	3de0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3dfe:	f384 8811 	msr	BASEPRI, r4
    3e02:	f3bf 8f6f 	isb	sy
}
    3e06:	e7f5      	b.n	3df4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3e08:	f04f 0320 	mov.w	r3, #32
    3e0c:	f3ef 8411 	mrs	r4, BASEPRI
    3e10:	f383 8812 	msr	BASEPRI_MAX, r3
    3e14:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3e18:	6868      	ldr	r0, [r5, #4]
    3e1a:	f004 fad8 	bl	83ce <is_tx_ready.isra.0>
    3e1e:	b988      	cbnz	r0, 3e44 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3e20:	f384 8811 	msr	BASEPRI, r4
    3e24:	f3bf 8f6f 	isb	sy
}
    3e28:	e7ee      	b.n	3e08 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3e2a:	f04f 0320 	mov.w	r3, #32
    3e2e:	f3ef 8411 	mrs	r4, BASEPRI
    3e32:	f383 8812 	msr	BASEPRI_MAX, r3
    3e36:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3e3a:	6868      	ldr	r0, [r5, #4]
    3e3c:	f004 fac7 	bl	83ce <is_tx_ready.isra.0>
    3e40:	2800      	cmp	r0, #0
    3e42:	d0dc      	beq.n	3dfe <uarte_nrfx_poll_out+0x32>
	data->char_out = c;
    3e44:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3e48:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3e4a:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    3e4c:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e4e:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e52:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e56:	2200      	movs	r2, #0
    3e58:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3e5c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3e60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3e64:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3e68:	684a      	ldr	r2, [r1, #4]
    3e6a:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3e6c:	bf41      	itttt	mi
    3e6e:	2208      	movmi	r2, #8
    3e70:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3e74:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3e78:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e7c:	2201      	movs	r2, #1
    3e7e:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3e80:	f384 8811 	msr	BASEPRI, r4
    3e84:	f3bf 8f6f 	isb	sy
}
    3e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e8a:	bf00      	nop
    3e8c:	20001018 	.word	0x20001018

00003e90 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3e90:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3e92:	2301      	movs	r3, #1
    3e94:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e96:	4a0e      	ldr	r2, [pc, #56]	; (3ed0 <compare_int_lock+0x40>)
    3e98:	f3bf 8f5b 	dmb	ish
    3e9c:	43dc      	mvns	r4, r3
    3e9e:	e852 1f00 	ldrex	r1, [r2]
    3ea2:	ea01 0504 	and.w	r5, r1, r4
    3ea6:	e842 5600 	strex	r6, r5, [r2]
    3eaa:	2e00      	cmp	r6, #0
    3eac:	d1f7      	bne.n	3e9e <compare_int_lock+0xe>
    3eae:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3eb6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3eb8:	4806      	ldr	r0, [pc, #24]	; (3ed4 <compare_int_lock+0x44>)
    3eba:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3ebe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ec2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3ec6:	420b      	tst	r3, r1
}
    3ec8:	bf14      	ite	ne
    3eca:	2001      	movne	r0, #1
    3ecc:	2000      	moveq	r0, #0
    3ece:	bd70      	pop	{r4, r5, r6, pc}
    3ed0:	20000928 	.word	0x20000928
    3ed4:	40011000 	.word	0x40011000

00003ed8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3ed8:	491b      	ldr	r1, [pc, #108]	; (3f48 <sys_clock_timeout_handler+0x70>)
{
    3eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3edc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3ede:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3ee2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3ee4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3ee8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3eec:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3ef2:	d30f      	bcc.n	3f14 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3ef4:	f003 fac2 	bl	747c <sys_clock_announce>
    return p_reg->CC[ch];
    3ef8:	00a3      	lsls	r3, r4, #2
    3efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3efe:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3f02:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3f06:	4295      	cmp	r5, r2
    3f08:	d11d      	bne.n	3f46 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    3f0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3f0e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    3f12:	e012      	b.n	3f3a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3f14:	4b0d      	ldr	r3, [pc, #52]	; (3f4c <sys_clock_timeout_handler+0x74>)
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	0a1a      	lsrs	r2, r3, #8
    3f1a:	061b      	lsls	r3, r3, #24
    3f1c:	195e      	adds	r6, r3, r5
    3f1e:	4b0c      	ldr	r3, [pc, #48]	; (3f50 <sys_clock_timeout_handler+0x78>)
    3f20:	f142 0700 	adc.w	r7, r2, #0
    3f24:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f28:	f003 faa8 	bl	747c <sys_clock_announce>
    return p_reg->CC[ch];
    3f2c:	4a09      	ldr	r2, [pc, #36]	; (3f54 <sys_clock_timeout_handler+0x7c>)
    3f2e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    3f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    3f36:	429d      	cmp	r5, r3
    3f38:	d105      	bne.n	3f46 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3f3a:	4a06      	ldr	r2, [pc, #24]	; (3f54 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3f40:	40a3      	lsls	r3, r4
    3f42:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f48:	200001d0 	.word	0x200001d0
    3f4c:	2000092c 	.word	0x2000092c
    3f50:	200001d8 	.word	0x200001d8
    3f54:	40011000 	.word	0x40011000

00003f58 <compare_int_unlock>:
	if (key) {
    3f58:	b311      	cbz	r1, 3fa0 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3f5a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3f5e:	2301      	movs	r3, #1
    3f60:	4a10      	ldr	r2, [pc, #64]	; (3fa4 <compare_int_unlock+0x4c>)
    3f62:	4083      	lsls	r3, r0
    3f64:	e852 cf00 	ldrex	ip, [r2]
    3f68:	ea4c 0c03 	orr.w	ip, ip, r3
    3f6c:	e842 c100 	strex	r1, ip, [r2]
    3f70:	2900      	cmp	r1, #0
    3f72:	d1f7      	bne.n	3f64 <compare_int_unlock+0xc>
    3f74:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3f78:	4a0b      	ldr	r2, [pc, #44]	; (3fa8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3f7e:	4083      	lsls	r3, r0
    3f80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3f84:	4b09      	ldr	r3, [pc, #36]	; (3fac <compare_int_unlock+0x54>)
    3f86:	f3bf 8f5b 	dmb	ish
    3f8a:	681b      	ldr	r3, [r3, #0]
    3f8c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3f90:	40c3      	lsrs	r3, r0
    3f92:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f94:	bf42      	ittt	mi
    3f96:	4b06      	ldrmi	r3, [pc, #24]	; (3fb0 <compare_int_unlock+0x58>)
    3f98:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3f9c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3fa0:	4770      	bx	lr
    3fa2:	bf00      	nop
    3fa4:	20000928 	.word	0x20000928
    3fa8:	40011000 	.word	0x40011000
    3fac:	20000924 	.word	0x20000924
    3fb0:	e000e100 	.word	0xe000e100

00003fb4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3fb4:	4b0d      	ldr	r3, [pc, #52]	; (3fec <z_nrf_rtc_timer_read+0x38>)
    3fb6:	6818      	ldr	r0, [r3, #0]
    3fb8:	0a01      	lsrs	r1, r0, #8
    3fba:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3fbc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <z_nrf_rtc_timer_read+0x3c>)
    3fc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3fc6:	1818      	adds	r0, r3, r0
    3fc8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3fd0:	d20a      	bcs.n	3fe8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3fd2:	4b08      	ldr	r3, [pc, #32]	; (3ff4 <z_nrf_rtc_timer_read+0x40>)
    3fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fd8:	4290      	cmp	r0, r2
    3fda:	eb71 0303 	sbcs.w	r3, r1, r3
    3fde:	d203      	bcs.n	3fe8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3fe0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3fe4:	f141 0100 	adc.w	r1, r1, #0
}
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop
    3fec:	2000092c 	.word	0x2000092c
    3ff0:	40011000 	.word	0x40011000
    3ff4:	200001d8 	.word	0x200001d8

00003ff8 <compare_set>:
{
    3ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ffc:	4614      	mov	r4, r2
    3ffe:	461d      	mov	r5, r3
    4000:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    4002:	f7ff ff45 	bl	3e90 <compare_int_lock>
    4006:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4008:	f7ff ffd4 	bl	3fb4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    400c:	42a0      	cmp	r0, r4
    400e:	eb71 0305 	sbcs.w	r3, r1, r5
    4012:	d27a      	bcs.n	410a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    4014:	4b46      	ldr	r3, [pc, #280]	; (4130 <compare_set+0x138>)
    4016:	1a20      	subs	r0, r4, r0
    4018:	eb65 0101 	sbc.w	r1, r5, r1
    401c:	4298      	cmp	r0, r3
    401e:	f171 0100 	sbcs.w	r1, r1, #0
    4022:	f080 8081 	bcs.w	4128 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    4026:	4b43      	ldr	r3, [pc, #268]	; (4134 <compare_set+0x13c>)
    4028:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    402c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4030:	429d      	cmp	r5, r3
    4032:	bf08      	it	eq
    4034:	4294      	cmpeq	r4, r2
    4036:	d053      	beq.n	40e0 <compare_set+0xe8>
    4038:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    403c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4040:	f107 0950 	add.w	r9, r7, #80	; 0x50
    4044:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    4048:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    404c:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    4050:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    4054:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    405c:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    4060:	4a35      	ldr	r2, [pc, #212]	; (4138 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4062:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    4066:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4068:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    406a:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    406e:	eba0 000b 	sub.w	r0, r0, fp
    4072:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4076:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    407a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    407c:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    4080:	d105      	bne.n	408e <compare_set+0x96>
    4082:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    4084:	2013      	movs	r0, #19
    4086:	f004 fc04 	bl	8892 <z_impl_k_busy_wait>
    408a:	4a2b      	ldr	r2, [pc, #172]	; (4138 <compare_set+0x140>)
    408c:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    408e:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    4092:	eba6 000c 	sub.w	r0, r6, ip
    4096:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    409a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    409e:	bf88      	it	hi
    40a0:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40a2:	2000      	movs	r0, #0
    40a4:	f8c9 0000 	str.w	r0, [r9]
    40a8:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    40ac:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    40b0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    40b4:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    40b8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    40bc:	4583      	cmp	fp, r0
    40be:	d006      	beq.n	40ce <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    40c0:	1a30      	subs	r0, r6, r0
    40c2:	3802      	subs	r0, #2
    40c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    40c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40cc:	d81b      	bhi.n	4106 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    40ce:	eba6 0608 	sub.w	r6, r6, r8
    40d2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    40d6:	1936      	adds	r6, r6, r4
    40d8:	f145 0300 	adc.w	r3, r5, #0
    40dc:	4634      	mov	r4, r6
    40de:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    40e0:	4914      	ldr	r1, [pc, #80]	; (4134 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    40e2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    40e4:	013b      	lsls	r3, r7, #4
    40e6:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    40ea:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    40ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    40ee:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    40f0:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    40f4:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    40f6:	4638      	mov	r0, r7
    40f8:	9900      	ldr	r1, [sp, #0]
    40fa:	f7ff ff2d 	bl	3f58 <compare_int_unlock>
}
    40fe:	4620      	mov	r0, r4
    4100:	b003      	add	sp, #12
    4102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4106:	4630      	mov	r0, r6
    4108:	e7af      	b.n	406a <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    410a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    410c:	4a0b      	ldr	r2, [pc, #44]	; (413c <compare_set+0x144>)
    410e:	f3bf 8f5b 	dmb	ish
    4112:	40bb      	lsls	r3, r7
    4114:	e852 0f00 	ldrex	r0, [r2]
    4118:	4318      	orrs	r0, r3
    411a:	e842 0100 	strex	r1, r0, [r2]
    411e:	2900      	cmp	r1, #0
    4120:	d1f8      	bne.n	4114 <compare_set+0x11c>
    4122:	f3bf 8f5b 	dmb	ish
    4126:	e7db      	b.n	40e0 <compare_set+0xe8>
			return -EINVAL;
    4128:	f06f 0415 	mvn.w	r4, #21
    412c:	e7e3      	b.n	40f6 <compare_set+0xfe>
    412e:	bf00      	nop
    4130:	01000001 	.word	0x01000001
    4134:	200001c0 	.word	0x200001c0
    4138:	40011000 	.word	0x40011000
    413c:	20000924 	.word	0x20000924

00004140 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4140:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4142:	4b19      	ldr	r3, [pc, #100]	; (41a8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4144:	4d19      	ldr	r5, [pc, #100]	; (41ac <sys_clock_driver_init+0x6c>)
    4146:	2400      	movs	r4, #0
    4148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    414c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4150:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4154:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    415c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4160:	4b13      	ldr	r3, [pc, #76]	; (41b0 <sys_clock_driver_init+0x70>)
    4162:	2602      	movs	r6, #2
    4164:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4168:	2101      	movs	r1, #1
    416a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    416e:	2011      	movs	r0, #17
    4170:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4174:	4622      	mov	r2, r4
    4176:	f7fe fa57 	bl	2628 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    417a:	2011      	movs	r0, #17
    417c:	f7fe fa38 	bl	25f0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4180:	4a0c      	ldr	r2, [pc, #48]	; (41b4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4182:	2301      	movs	r3, #1
    4184:	60ab      	str	r3, [r5, #8]
    4186:	602b      	str	r3, [r5, #0]
    4188:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    418a:	4b0b      	ldr	r3, [pc, #44]	; (41b8 <sys_clock_driver_init+0x78>)
    418c:	4a0b      	ldr	r2, [pc, #44]	; (41bc <sys_clock_driver_init+0x7c>)
    418e:	9300      	str	r3, [sp, #0]
    4190:	9401      	str	r4, [sp, #4]
    4192:	2300      	movs	r3, #0
    4194:	4620      	mov	r0, r4
    4196:	f7ff ff2f 	bl	3ff8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    419a:	4630      	mov	r0, r6
    419c:	f7ff fa06 	bl	35ac <z_nrf_clock_control_lf_on>

	return 0;
}
    41a0:	4620      	mov	r0, r4
    41a2:	b002      	add	sp, #8
    41a4:	bd70      	pop	{r4, r5, r6, pc}
    41a6:	bf00      	nop
    41a8:	200001c0 	.word	0x200001c0
    41ac:	40011000 	.word	0x40011000
    41b0:	e000e100 	.word	0xe000e100
    41b4:	20000928 	.word	0x20000928
    41b8:	00003ed9 	.word	0x00003ed9
    41bc:	007fffff 	.word	0x007fffff

000041c0 <rtc_nrf_isr>:
{
    41c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    41c4:	4c33      	ldr	r4, [pc, #204]	; (4294 <rtc_nrf_isr+0xd4>)
    41c6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    41ca:	079a      	lsls	r2, r3, #30
    41cc:	d50b      	bpl.n	41e6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    41d2:	b143      	cbz	r3, 41e6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    41d4:	4a30      	ldr	r2, [pc, #192]	; (4298 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41d6:	2300      	movs	r3, #0
    41d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    41dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    41e0:	6813      	ldr	r3, [r2, #0]
    41e2:	3301      	adds	r3, #1
    41e4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    41e6:	f04f 0320 	mov.w	r3, #32
    41ea:	f3ef 8211 	mrs	r2, BASEPRI
    41ee:	f383 8812 	msr	BASEPRI_MAX, r3
    41f2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    41f6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    41fa:	03db      	lsls	r3, r3, #15
    41fc:	d529      	bpl.n	4252 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    41fe:	f3bf 8f5b 	dmb	ish
    4202:	4b26      	ldr	r3, [pc, #152]	; (429c <rtc_nrf_isr+0xdc>)
    4204:	e853 1f00 	ldrex	r1, [r3]
    4208:	f021 0001 	bic.w	r0, r1, #1
    420c:	e843 0500 	strex	r5, r0, [r3]
    4210:	2d00      	cmp	r5, #0
    4212:	d1f7      	bne.n	4204 <rtc_nrf_isr+0x44>
    4214:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4218:	b911      	cbnz	r1, 4220 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    421a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    421e:	b1c3      	cbz	r3, 4252 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4220:	2500      	movs	r5, #0
    4222:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4226:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    422a:	f382 8811 	msr	BASEPRI, r2
    422e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    4232:	f7ff febf 	bl	3fb4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    4236:	f04f 0320 	mov.w	r3, #32
    423a:	f3ef 8211 	mrs	r2, BASEPRI
    423e:	f383 8812 	msr	BASEPRI_MAX, r3
    4242:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4246:	4b16      	ldr	r3, [pc, #88]	; (42a0 <rtc_nrf_isr+0xe0>)
    4248:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    424c:	42b0      	cmp	r0, r6
    424e:	41b9      	sbcs	r1, r7
    4250:	d206      	bcs.n	4260 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    4252:	f382 8811 	msr	BASEPRI, r2
    4256:	f3bf 8f6f 	isb	sy
}
    425a:	b003      	add	sp, #12
    425c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4260:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4264:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    4268:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    426c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    4270:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4276:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    427a:	f382 8811 	msr	BASEPRI, r2
    427e:	f3bf 8f6f 	isb	sy
		if (handler) {
    4282:	2900      	cmp	r1, #0
    4284:	d0e9      	beq.n	425a <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    4286:	9000      	str	r0, [sp, #0]
    4288:	4632      	mov	r2, r6
    428a:	463b      	mov	r3, r7
    428c:	4628      	mov	r0, r5
    428e:	4788      	blx	r1
}
    4290:	e7e3      	b.n	425a <rtc_nrf_isr+0x9a>
    4292:	bf00      	nop
    4294:	40011000 	.word	0x40011000
    4298:	2000092c 	.word	0x2000092c
    429c:	20000924 	.word	0x20000924
    42a0:	200001c0 	.word	0x200001c0

000042a4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42a4:	1c43      	adds	r3, r0, #1
{
    42a6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42a8:	d021      	beq.n	42ee <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    42aa:	2801      	cmp	r0, #1
    42ac:	dd21      	ble.n	42f2 <sys_clock_set_timeout+0x4e>
    42ae:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    42b2:	da20      	bge.n	42f6 <sys_clock_set_timeout+0x52>
    42b4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    42b6:	f7ff fe7d 	bl	3fb4 <z_nrf_rtc_timer_read>
    42ba:	4b10      	ldr	r3, [pc, #64]	; (42fc <sys_clock_set_timeout+0x58>)
    42bc:	e9d3 1300 	ldrd	r1, r3, [r3]
    42c0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    42c2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    42c6:	480e      	ldr	r0, [pc, #56]	; (4300 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    42c8:	bf28      	it	cs
    42ca:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    42cc:	3201      	adds	r2, #1
    42ce:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    42d0:	4282      	cmp	r2, r0
    42d2:	bf28      	it	cs
    42d4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    42d6:	1852      	adds	r2, r2, r1
    42d8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    42dc:	4909      	ldr	r1, [pc, #36]	; (4304 <sys_clock_set_timeout+0x60>)
    42de:	9001      	str	r0, [sp, #4]
    42e0:	9100      	str	r1, [sp, #0]
    42e2:	f143 0300 	adc.w	r3, r3, #0
    42e6:	f7ff fe87 	bl	3ff8 <compare_set>
}
    42ea:	b002      	add	sp, #8
    42ec:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42ee:	4804      	ldr	r0, [pc, #16]	; (4300 <sys_clock_set_timeout+0x5c>)
    42f0:	e7e0      	b.n	42b4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    42f2:	2400      	movs	r4, #0
    42f4:	e7df      	b.n	42b6 <sys_clock_set_timeout+0x12>
    42f6:	4c02      	ldr	r4, [pc, #8]	; (4300 <sys_clock_set_timeout+0x5c>)
    42f8:	e7dd      	b.n	42b6 <sys_clock_set_timeout+0x12>
    42fa:	bf00      	nop
    42fc:	200001d0 	.word	0x200001d0
    4300:	007fffff 	.word	0x007fffff
    4304:	00003ed9 	.word	0x00003ed9

00004308 <sys_clock_elapsed>:
{
    4308:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    430a:	f7ff fe53 	bl	3fb4 <z_nrf_rtc_timer_read>
    430e:	4b02      	ldr	r3, [pc, #8]	; (4318 <sys_clock_elapsed+0x10>)
    4310:	681b      	ldr	r3, [r3, #0]
}
    4312:	1ac0      	subs	r0, r0, r3
    4314:	bd08      	pop	{r3, pc}
    4316:	bf00      	nop
    4318:	200001d0 	.word	0x200001d0

0000431c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    431c:	6803      	ldr	r3, [r0, #0]
    switch (port)
    431e:	095a      	lsrs	r2, r3, #5
{
    4320:	b510      	push	{r4, lr}
    4322:	4604      	mov	r4, r0
    switch (port)
    4324:	d01d      	beq.n	4362 <nrf_gpio_pin_port_decode+0x46>
    4326:	2a01      	cmp	r2, #1
    4328:	d106      	bne.n	4338 <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    432a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    432e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4332:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4334:	07d3      	lsls	r3, r2, #31
    4336:	d40b      	bmi.n	4350 <nrf_gpio_pin_port_decode+0x34>
    4338:	4914      	ldr	r1, [pc, #80]	; (438c <nrf_gpio_pin_port_decode+0x70>)
    433a:	4815      	ldr	r0, [pc, #84]	; (4390 <nrf_gpio_pin_port_decode+0x74>)
    433c:	4a15      	ldr	r2, [pc, #84]	; (4394 <nrf_gpio_pin_port_decode+0x78>)
    433e:	f240 2329 	movw	r3, #553	; 0x229
    4342:	f003 fea5 	bl	8090 <assert_print>
    4346:	4813      	ldr	r0, [pc, #76]	; (4394 <nrf_gpio_pin_port_decode+0x78>)
    4348:	f240 2129 	movw	r1, #553	; 0x229
    434c:	f003 fe99 	bl	8082 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4350:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4352:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4356:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4358:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    435a:	d105      	bne.n	4368 <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    435c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4360:	bd10      	pop	{r4, pc}
    switch (port)
    4362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4366:	e7e2      	b.n	432e <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4368:	2b01      	cmp	r3, #1
    436a:	d00c      	beq.n	4386 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    436c:	4a09      	ldr	r2, [pc, #36]	; (4394 <nrf_gpio_pin_port_decode+0x78>)
    436e:	490a      	ldr	r1, [pc, #40]	; (4398 <nrf_gpio_pin_port_decode+0x7c>)
    4370:	4807      	ldr	r0, [pc, #28]	; (4390 <nrf_gpio_pin_port_decode+0x74>)
    4372:	f240 232e 	movw	r3, #558	; 0x22e
    4376:	f003 fe8b 	bl	8090 <assert_print>
    437a:	4806      	ldr	r0, [pc, #24]	; (4394 <nrf_gpio_pin_port_decode+0x78>)
    437c:	f240 212e 	movw	r1, #558	; 0x22e
    4380:	f003 fe7f 	bl	8082 <assert_post_action>
    4384:	e7ea      	b.n	435c <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    4386:	4805      	ldr	r0, [pc, #20]	; (439c <nrf_gpio_pin_port_decode+0x80>)
    4388:	e7ea      	b.n	4360 <nrf_gpio_pin_port_decode+0x44>
    438a:	bf00      	nop
    438c:	00009e7b 	.word	0x00009e7b
    4390:	00008f43 	.word	0x00008f43
    4394:	00009e48 	.word	0x00009e48
    4398:	0000a6a7 	.word	0x0000a6a7
    439c:	50000300 	.word	0x50000300

000043a0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    43a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    43a2:	ab0b      	add	r3, sp, #44	; 0x2c
    43a4:	9305      	str	r3, [sp, #20]
    43a6:	9303      	str	r3, [sp, #12]
    43a8:	4b05      	ldr	r3, [pc, #20]	; (43c0 <z_log_msg2_runtime_create.constprop.0+0x20>)
    43aa:	9302      	str	r3, [sp, #8]
    43ac:	2300      	movs	r3, #0
    43ae:	e9cd 3300 	strd	r3, r3, [sp]
    43b2:	2201      	movs	r2, #1
    43b4:	4618      	mov	r0, r3
    43b6:	f7fd fd3f 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    43ba:	b007      	add	sp, #28
    43bc:	f85d fb04 	ldr.w	pc, [sp], #4
    43c0:	00009ef5 	.word	0x00009ef5

000043c4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    43c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    43c6:	f7fd fad5 	bl	1974 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    43ca:	2400      	movs	r4, #0
    43cc:	4b06      	ldr	r3, [pc, #24]	; (43e8 <k_sys_fatal_error_handler+0x24>)
    43ce:	9302      	str	r3, [sp, #8]
    43d0:	4620      	mov	r0, r4
    43d2:	e9cd 4400 	strd	r4, r4, [sp]
    43d6:	4905      	ldr	r1, [pc, #20]	; (43ec <k_sys_fatal_error_handler+0x28>)
    43d8:	4623      	mov	r3, r4
    43da:	2201      	movs	r2, #1
    43dc:	f7ff ffe0 	bl	43a0 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    43e0:	4620      	mov	r0, r4
    43e2:	f7fe ff5b 	bl	329c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    43e6:	bf00      	nop
    43e8:	00009ef5 	.word	0x00009ef5
    43ec:	00008bc8 	.word	0x00008bc8

000043f0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    43f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    43f4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    43f8:	2a08      	cmp	r2, #8
    43fa:	d106      	bne.n	440a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    43fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4400:	2b05      	cmp	r3, #5
    4402:	d802      	bhi.n	440a <nrf52_errata_103+0x1a>
    4404:	4a02      	ldr	r2, [pc, #8]	; (4410 <nrf52_errata_103+0x20>)
    4406:	5cd0      	ldrb	r0, [r2, r3]
    4408:	4770      	bx	lr
                        return false;
    440a:	2000      	movs	r0, #0
}
    440c:	4770      	bx	lr
    440e:	bf00      	nop
    4410:	00009f18 	.word	0x00009f18

00004414 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4414:	4a02      	ldr	r2, [pc, #8]	; (4420 <nvmc_wait+0xc>)
    4416:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    441a:	2b00      	cmp	r3, #0
    441c:	d0fb      	beq.n	4416 <nvmc_wait+0x2>
}
    441e:	4770      	bx	lr
    4420:	4001e000 	.word	0x4001e000

00004424 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4428:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    442a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    442e:	2a08      	cmp	r2, #8
    4430:	d14e      	bne.n	44d0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    4432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4436:	2100      	movs	r1, #0
    4438:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    443c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4440:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4444:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    4448:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    444c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4450:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    4454:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4458:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    445c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4460:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    4464:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4468:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    446c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4470:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    4474:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4478:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    447c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4480:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    4484:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4488:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    448c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4490:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    4494:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4498:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    449c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    44a0:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    44a4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    44a8:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    44ac:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    44b0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    44b4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    44b8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    44bc:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    44c0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    44c4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    44c8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    44cc:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    44d0:	f7ff ff8e 	bl	43f0 <nrf52_errata_103>
    44d4:	b118      	cbz	r0, 44de <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    44d6:	4b3b      	ldr	r3, [pc, #236]	; (45c4 <SystemInit+0x1a0>)
    44d8:	4a3b      	ldr	r2, [pc, #236]	; (45c8 <SystemInit+0x1a4>)
    44da:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    44de:	f7ff ff87 	bl	43f0 <nrf52_errata_103>
    44e2:	b118      	cbz	r0, 44ec <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    44e4:	4b39      	ldr	r3, [pc, #228]	; (45cc <SystemInit+0x1a8>)
    44e6:	22fb      	movs	r2, #251	; 0xfb
    44e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    44ec:	f7ff ff80 	bl	43f0 <nrf52_errata_103>
    44f0:	b170      	cbz	r0, 4510 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    44f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    44f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    44fa:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    44fe:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4502:	f022 020f 	bic.w	r2, r2, #15
    4506:	f003 030f 	and.w	r3, r3, #15
    450a:	4313      	orrs	r3, r2
    450c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4510:	f7ff ff6e 	bl	43f0 <nrf52_errata_103>
    4514:	b120      	cbz	r0, 4520 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    4516:	4b2e      	ldr	r3, [pc, #184]	; (45d0 <SystemInit+0x1ac>)
    4518:	f44f 7200 	mov.w	r2, #512	; 0x200
    451c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4524:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    4528:	2b08      	cmp	r3, #8
    452a:	d11a      	bne.n	4562 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    452c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4530:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4534:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4536:	bf44      	itt	mi
    4538:	f06f 0201 	mvnmi.w	r2, #1
    453c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4540:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4544:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    4548:	2b05      	cmp	r3, #5
    454a:	d802      	bhi.n	4552 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    454c:	4a21      	ldr	r2, [pc, #132]	; (45d4 <SystemInit+0x1b0>)
    454e:	5cd3      	ldrb	r3, [r2, r3]
    4550:	b13b      	cbz	r3, 4562 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4552:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4556:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    455a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    455e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4562:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4566:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    456a:	2a00      	cmp	r2, #0
    456c:	db03      	blt.n	4576 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    456e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4572:	2b00      	cmp	r3, #0
    4574:	da22      	bge.n	45bc <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4576:	4918      	ldr	r1, [pc, #96]	; (45d8 <SystemInit+0x1b4>)
    4578:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    457a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    457e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4582:	2412      	movs	r4, #18
    nvmc_wait();
    4584:	f7ff ff46 	bl	4414 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4588:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    458c:	f7ff ff42 	bl	4414 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4590:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4594:	f7ff ff3e 	bl	4414 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4598:	2300      	movs	r3, #0
    459a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    459e:	f7ff ff39 	bl	4414 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    45a2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    45a6:	490d      	ldr	r1, [pc, #52]	; (45dc <SystemInit+0x1b8>)
    45a8:	4b0d      	ldr	r3, [pc, #52]	; (45e0 <SystemInit+0x1bc>)
    45aa:	68ca      	ldr	r2, [r1, #12]
    45ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    45b0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    45b2:	60cb      	str	r3, [r1, #12]
    45b4:	f3bf 8f4f 	dsb	sy
    __NOP();
    45b8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    45ba:	e7fd      	b.n	45b8 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    45bc:	4b09      	ldr	r3, [pc, #36]	; (45e4 <SystemInit+0x1c0>)
    45be:	4a0a      	ldr	r2, [pc, #40]	; (45e8 <SystemInit+0x1c4>)
    45c0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    45c2:	bd10      	pop	{r4, pc}
    45c4:	40005000 	.word	0x40005000
    45c8:	00038148 	.word	0x00038148
    45cc:	4000f000 	.word	0x4000f000
    45d0:	40029000 	.word	0x40029000
    45d4:	00009f12 	.word	0x00009f12
    45d8:	4001e000 	.word	0x4001e000
    45dc:	e000ed00 	.word	0xe000ed00
    45e0:	05fa0004 	.word	0x05fa0004
    45e4:	20000058 	.word	0x20000058
    45e8:	03d09000 	.word	0x03d09000

000045ec <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    45ec:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    45ee:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    45f0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    45f2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    45f6:	fab2 f382 	clz	r3, r2
    45fa:	f1c3 031f 	rsb	r3, r3, #31
    45fe:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4600:	fa05 f403 	lsl.w	r4, r5, r3
    4604:	ea22 0404 	bic.w	r4, r2, r4
    4608:	e850 6f00 	ldrex	r6, [r0]
    460c:	4296      	cmp	r6, r2
    460e:	d104      	bne.n	461a <nrfx_flag32_alloc+0x2e>
    4610:	e840 4c00 	strex	ip, r4, [r0]
    4614:	f1bc 0f00 	cmp.w	ip, #0
    4618:	d1f6      	bne.n	4608 <nrfx_flag32_alloc+0x1c>
    461a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    461e:	d1e7      	bne.n	45f0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4620:	4801      	ldr	r0, [pc, #4]	; (4628 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4622:	700b      	strb	r3, [r1, #0]
}
    4624:	bd70      	pop	{r4, r5, r6, pc}
    4626:	bf00      	nop
    4628:	0bad0000 	.word	0x0bad0000

0000462c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    462c:	6803      	ldr	r3, [r0, #0]
    462e:	40cb      	lsrs	r3, r1
    4630:	07db      	lsls	r3, r3, #31
{
    4632:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4634:	d414      	bmi.n	4660 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4636:	2301      	movs	r3, #1
    4638:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    463a:	6802      	ldr	r2, [r0, #0]
    463c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4640:	ea43 0102 	orr.w	r1, r3, r2
    4644:	e850 4f00 	ldrex	r4, [r0]
    4648:	4294      	cmp	r4, r2
    464a:	d104      	bne.n	4656 <nrfx_flag32_free+0x2a>
    464c:	e840 1c00 	strex	ip, r1, [r0]
    4650:	f1bc 0f00 	cmp.w	ip, #0
    4654:	d1f6      	bne.n	4644 <nrfx_flag32_free+0x18>
    4656:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    465a:	d1ee      	bne.n	463a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    465c:	4801      	ldr	r0, [pc, #4]	; (4664 <nrfx_flag32_free+0x38>)
}
    465e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4660:	4801      	ldr	r0, [pc, #4]	; (4668 <nrfx_flag32_free+0x3c>)
    4662:	e7fc      	b.n	465e <nrfx_flag32_free+0x32>
    4664:	0bad0000 	.word	0x0bad0000
    4668:	0bad0004 	.word	0x0bad0004

0000466c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    466c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    466e:	4604      	mov	r4, r0
    4670:	b170      	cbz	r0, 4690 <clock_stop+0x24>
    4672:	2801      	cmp	r0, #1
    4674:	d02d      	beq.n	46d2 <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4676:	4939      	ldr	r1, [pc, #228]	; (475c <clock_stop+0xf0>)
    4678:	4839      	ldr	r0, [pc, #228]	; (4760 <clock_stop+0xf4>)
    467a:	4a3a      	ldr	r2, [pc, #232]	; (4764 <clock_stop+0xf8>)
    467c:	23d8      	movs	r3, #216	; 0xd8
    467e:	f003 fd07 	bl	8090 <assert_print>
    4682:	4838      	ldr	r0, [pc, #224]	; (4764 <clock_stop+0xf8>)
    4684:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4686:	b003      	add	sp, #12
    4688:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    468c:	f003 bcf9 	b.w	8082 <assert_post_action>
    p_reg->INTENCLR = mask;
    4690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4694:	2202      	movs	r2, #2
    4696:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    469a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    469e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46a2:	2201      	movs	r2, #1
    46a4:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    46a6:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    46a8:	2301      	movs	r3, #1
    46aa:	f88d 3007 	strb.w	r3, [sp, #7]
    46ae:	f242 7510 	movw	r5, #10000	; 0x2710
    46b2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    46b6:	b1cc      	cbz	r4, 46ec <clock_stop+0x80>
    46b8:	2c01      	cmp	r4, #1
    46ba:	d037      	beq.n	472c <clock_stop+0xc0>
            NRFX_ASSERT(0);
    46bc:	4927      	ldr	r1, [pc, #156]	; (475c <clock_stop+0xf0>)
    46be:	4828      	ldr	r0, [pc, #160]	; (4760 <clock_stop+0xf4>)
    46c0:	4a29      	ldr	r2, [pc, #164]	; (4768 <clock_stop+0xfc>)
    46c2:	f44f 734f 	mov.w	r3, #828	; 0x33c
    46c6:	f003 fce3 	bl	8090 <assert_print>
    46ca:	4827      	ldr	r0, [pc, #156]	; (4768 <clock_stop+0xfc>)
    46cc:	f44f 714f 	mov.w	r1, #828	; 0x33c
    46d0:	e7d9      	b.n	4686 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    46d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46d6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    46d8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    46dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    46e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    46e4:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    46e6:	f10d 0707 	add.w	r7, sp, #7
    46ea:	e7dd      	b.n	46a8 <clock_stop+0x3c>
            if (p_clk_src != NULL)
    46ec:	b19f      	cbz	r7, 4716 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    46ee:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    46f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    46f6:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    46f8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    46fc:	03d8      	lsls	r0, r3, #15
    46fe:	d513      	bpl.n	4728 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4700:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4704:	2801      	cmp	r0, #1
    4706:	d103      	bne.n	4710 <clock_stop+0xa4>
    4708:	f003 ffcf 	bl	86aa <nrfx_busy_wait>
    470c:	3d01      	subs	r5, #1
    470e:	d1d2      	bne.n	46b6 <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4710:	2c01      	cmp	r4, #1
    4712:	d015      	beq.n	4740 <clock_stop+0xd4>
    4714:	e008      	b.n	4728 <clock_stop+0xbc>
    4716:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    471a:	03d9      	lsls	r1, r3, #15
    471c:	d504      	bpl.n	4728 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    471e:	2001      	movs	r0, #1
    4720:	f003 ffc3 	bl	86aa <nrfx_busy_wait>
    4724:	3d01      	subs	r5, #1
    4726:	d1f6      	bne.n	4716 <clock_stop+0xaa>
}
    4728:	b003      	add	sp, #12
    472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    472c:	b167      	cbz	r7, 4748 <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    472e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4732:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4736:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4738:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    473c:	03da      	lsls	r2, r3, #15
    473e:	d4df      	bmi.n	4700 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    4740:	4b0a      	ldr	r3, [pc, #40]	; (476c <clock_stop+0x100>)
    4742:	2200      	movs	r2, #0
    4744:	715a      	strb	r2, [r3, #5]
    4746:	e7ef      	b.n	4728 <clock_stop+0xbc>
    4748:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    474c:	03db      	lsls	r3, r3, #15
    474e:	d5f7      	bpl.n	4740 <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4750:	2001      	movs	r0, #1
    4752:	f003 ffaa 	bl	86aa <nrfx_busy_wait>
    4756:	3d01      	subs	r5, #1
    4758:	d1f6      	bne.n	4748 <clock_stop+0xdc>
    475a:	e7f1      	b.n	4740 <clock_stop+0xd4>
    475c:	0000a6a7 	.word	0x0000a6a7
    4760:	00008f43 	.word	0x00008f43
    4764:	00009f1e 	.word	0x00009f1e
    4768:	00009f5b 	.word	0x00009f5b
    476c:	20000930 	.word	0x20000930

00004770 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4770:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    4772:	4604      	mov	r4, r0
    4774:	b958      	cbnz	r0, 478e <nrfx_clock_init+0x1e>
    4776:	490b      	ldr	r1, [pc, #44]	; (47a4 <nrfx_clock_init+0x34>)
    4778:	480b      	ldr	r0, [pc, #44]	; (47a8 <nrfx_clock_init+0x38>)
    477a:	4a0c      	ldr	r2, [pc, #48]	; (47ac <nrfx_clock_init+0x3c>)
    477c:	f240 1315 	movw	r3, #277	; 0x115
    4780:	f003 fc86 	bl	8090 <assert_print>
    4784:	4809      	ldr	r0, [pc, #36]	; (47ac <nrfx_clock_init+0x3c>)
    4786:	f240 1115 	movw	r1, #277	; 0x115
    478a:	f003 fc7a 	bl	8082 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    478e:	4b08      	ldr	r3, [pc, #32]	; (47b0 <nrfx_clock_init+0x40>)
    4790:	791a      	ldrb	r2, [r3, #4]
    4792:	b922      	cbnz	r2, 479e <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4794:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    4796:	4807      	ldr	r0, [pc, #28]	; (47b4 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    4798:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    479a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    479c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <nrfx_clock_init+0x48>)
    return err_code;
    47a0:	e7fc      	b.n	479c <nrfx_clock_init+0x2c>
    47a2:	bf00      	nop
    47a4:	00009f8f 	.word	0x00009f8f
    47a8:	00008f43 	.word	0x00008f43
    47ac:	00009f1e 	.word	0x00009f1e
    47b0:	20000930 	.word	0x20000930
    47b4:	0bad0000 	.word	0x0bad0000
    47b8:	0bad000c 	.word	0x0bad000c

000047bc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    47bc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47be:	4b0d      	ldr	r3, [pc, #52]	; (47f4 <nrfx_clock_enable+0x38>)
    47c0:	791b      	ldrb	r3, [r3, #4]
    47c2:	b95b      	cbnz	r3, 47dc <nrfx_clock_enable+0x20>
    47c4:	490c      	ldr	r1, [pc, #48]	; (47f8 <nrfx_clock_enable+0x3c>)
    47c6:	480d      	ldr	r0, [pc, #52]	; (47fc <nrfx_clock_enable+0x40>)
    47c8:	4a0d      	ldr	r2, [pc, #52]	; (4800 <nrfx_clock_enable+0x44>)
    47ca:	f44f 7397 	mov.w	r3, #302	; 0x12e
    47ce:	f003 fc5f 	bl	8090 <assert_print>
    47d2:	480b      	ldr	r0, [pc, #44]	; (4800 <nrfx_clock_enable+0x44>)
    47d4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    47d8:	f003 fc53 	bl	8082 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    47dc:	2000      	movs	r0, #0
    47de:	f7fd ff15 	bl	260c <arch_irq_is_enabled>
    47e2:	b908      	cbnz	r0, 47e8 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    47e4:	f7fd ff04 	bl	25f0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    47e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47ec:	2200      	movs	r2, #0
    47ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    47f2:	bd08      	pop	{r3, pc}
    47f4:	20000930 	.word	0x20000930
    47f8:	00009f9d 	.word	0x00009f9d
    47fc:	00008f43 	.word	0x00008f43
    4800:	00009f1e 	.word	0x00009f1e

00004804 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4804:	4b2c      	ldr	r3, [pc, #176]	; (48b8 <nrfx_clock_start+0xb4>)
    4806:	791b      	ldrb	r3, [r3, #4]
{
    4808:	b510      	push	{r4, lr}
    480a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    480c:	b95b      	cbnz	r3, 4826 <nrfx_clock_start+0x22>
    480e:	492b      	ldr	r1, [pc, #172]	; (48bc <nrfx_clock_start+0xb8>)
    4810:	482b      	ldr	r0, [pc, #172]	; (48c0 <nrfx_clock_start+0xbc>)
    4812:	4a2c      	ldr	r2, [pc, #176]	; (48c4 <nrfx_clock_start+0xc0>)
    4814:	f44f 73b4 	mov.w	r3, #360	; 0x168
    4818:	f003 fc3a 	bl	8090 <assert_print>
    481c:	4829      	ldr	r0, [pc, #164]	; (48c4 <nrfx_clock_start+0xc0>)
    481e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    4822:	f003 fc2e 	bl	8082 <assert_post_action>
    switch (domain)
    4826:	b17c      	cbz	r4, 4848 <nrfx_clock_start+0x44>
    4828:	2c01      	cmp	r4, #1
    482a:	d03a      	beq.n	48a2 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    482c:	4926      	ldr	r1, [pc, #152]	; (48c8 <nrfx_clock_start+0xc4>)
    482e:	4824      	ldr	r0, [pc, #144]	; (48c0 <nrfx_clock_start+0xbc>)
    4830:	4a24      	ldr	r2, [pc, #144]	; (48c4 <nrfx_clock_start+0xc0>)
    4832:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    4836:	f003 fc2b 	bl	8090 <assert_print>
            break;
    }
}
    483a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    483e:	4821      	ldr	r0, [pc, #132]	; (48c4 <nrfx_clock_start+0xc0>)
    4840:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    4844:	f003 bc1d 	b.w	8082 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4848:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    484c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4850:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4854:	03c8      	lsls	r0, r1, #15
    4856:	d512      	bpl.n	487e <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4858:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    485c:	2b01      	cmp	r3, #1
    485e:	d11a      	bne.n	4896 <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4864:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4868:	2300      	movs	r3, #0
    486a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    486e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4872:	2302      	movs	r3, #2
    4874:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4878:	2301      	movs	r3, #1
    487a:	6093      	str	r3, [r2, #8]
}
    487c:	e00a      	b.n	4894 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    487e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4882:	07d9      	lsls	r1, r3, #31
    4884:	d50b      	bpl.n	489e <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4886:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    488a:	079b      	lsls	r3, r3, #30
    488c:	d404      	bmi.n	4898 <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    488e:	2302      	movs	r3, #2
    4890:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4894:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4896:	b113      	cbz	r3, 489e <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4898:	2000      	movs	r0, #0
    489a:	f7ff fee7 	bl	466c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    489e:	2300      	movs	r3, #0
    48a0:	e7de      	b.n	4860 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48a6:	2200      	movs	r2, #0
    48a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    48ac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    48b0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48b4:	601c      	str	r4, [r3, #0]
}
    48b6:	e7ed      	b.n	4894 <nrfx_clock_start+0x90>
    48b8:	20000930 	.word	0x20000930
    48bc:	00009f9d 	.word	0x00009f9d
    48c0:	00008f43 	.word	0x00008f43
    48c4:	00009f1e 	.word	0x00009f1e
    48c8:	0000a6a7 	.word	0x0000a6a7

000048cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48cc:	4b0a      	ldr	r3, [pc, #40]	; (48f8 <nrfx_clock_stop+0x2c>)
    48ce:	791b      	ldrb	r3, [r3, #4]
{
    48d0:	b510      	push	{r4, lr}
    48d2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48d4:	b95b      	cbnz	r3, 48ee <nrfx_clock_stop+0x22>
    48d6:	4909      	ldr	r1, [pc, #36]	; (48fc <nrfx_clock_stop+0x30>)
    48d8:	4809      	ldr	r0, [pc, #36]	; (4900 <nrfx_clock_stop+0x34>)
    48da:	4a0a      	ldr	r2, [pc, #40]	; (4904 <nrfx_clock_stop+0x38>)
    48dc:	f240 13ad 	movw	r3, #429	; 0x1ad
    48e0:	f003 fbd6 	bl	8090 <assert_print>
    48e4:	4807      	ldr	r0, [pc, #28]	; (4904 <nrfx_clock_stop+0x38>)
    48e6:	f240 11ad 	movw	r1, #429	; 0x1ad
    48ea:	f003 fbca 	bl	8082 <assert_post_action>
    clock_stop(domain);
    48ee:	4620      	mov	r0, r4
}
    48f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    48f4:	f7ff beba 	b.w	466c <clock_stop>
    48f8:	20000930 	.word	0x20000930
    48fc:	00009f9d 	.word	0x00009f9d
    4900:	00008f43 	.word	0x00008f43
    4904:	00009f1e 	.word	0x00009f1e

00004908 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4908:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    490c:	b510      	push	{r4, lr}
    490e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4912:	b16a      	cbz	r2, 4930 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4914:	2200      	movs	r2, #0
    4916:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    491a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    491e:	2201      	movs	r2, #1
    4920:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4924:	4b11      	ldr	r3, [pc, #68]	; (496c <nrfx_power_clock_irq_handler+0x64>)
    4926:	7958      	ldrb	r0, [r3, #5]
    4928:	b910      	cbnz	r0, 4930 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    492a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4934:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4938:	b172      	cbz	r2, 4958 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    493a:	2200      	movs	r2, #0
    493c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4940:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4944:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4948:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    494c:	0792      	lsls	r2, r2, #30
    494e:	d104      	bne.n	495a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4950:	2201      	movs	r2, #1
    4952:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4956:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4958:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    495a:	2202      	movs	r2, #2
    495c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4960:	4b02      	ldr	r3, [pc, #8]	; (496c <nrfx_power_clock_irq_handler+0x64>)
}
    4962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4966:	681b      	ldr	r3, [r3, #0]
    4968:	2001      	movs	r0, #1
    496a:	4718      	bx	r3
    496c:	20000930 	.word	0x20000930

00004970 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4970:	4b03      	ldr	r3, [pc, #12]	; (4980 <pin_in_use_by_te+0x10>)
    4972:	3008      	adds	r0, #8
    4974:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4978:	f3c0 1040 	ubfx	r0, r0, #5, #1
    497c:	4770      	bx	lr
    497e:	bf00      	nop
    4980:	2000005c 	.word	0x2000005c

00004984 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4984:	4b04      	ldr	r3, [pc, #16]	; (4998 <pin_has_trigger+0x14>)
    4986:	3008      	adds	r0, #8
    4988:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    498c:	f010 001c 	ands.w	r0, r0, #28
    4990:	bf18      	it	ne
    4992:	2001      	movne	r0, #1
    4994:	4770      	bx	lr
    4996:	bf00      	nop
    4998:	2000005c 	.word	0x2000005c

0000499c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    499c:	4b03      	ldr	r3, [pc, #12]	; (49ac <pin_is_output+0x10>)
    499e:	3008      	adds	r0, #8
    49a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    49a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    49a8:	4770      	bx	lr
    49aa:	bf00      	nop
    49ac:	2000005c 	.word	0x2000005c

000049b0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    49b0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    49b2:	f100 0308 	add.w	r3, r0, #8
    49b6:	4c0c      	ldr	r4, [pc, #48]	; (49e8 <call_handler+0x38>)
    49b8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    49bc:	05da      	lsls	r2, r3, #23
{
    49be:	4605      	mov	r5, r0
    49c0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    49c2:	d507      	bpl.n	49d4 <call_handler+0x24>
    49c4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    49c8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    49cc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    49d0:	6852      	ldr	r2, [r2, #4]
    49d2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    49d4:	68a3      	ldr	r3, [r4, #8]
    49d6:	b12b      	cbz	r3, 49e4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    49d8:	68e2      	ldr	r2, [r4, #12]
    49da:	4631      	mov	r1, r6
    49dc:	4628      	mov	r0, r5
    }
}
    49de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    49e2:	4718      	bx	r3
}
    49e4:	bd70      	pop	{r4, r5, r6, pc}
    49e6:	bf00      	nop
    49e8:	2000005c 	.word	0x2000005c

000049ec <nrf_gpio_pin_port_decode>:
{
    49ec:	b510      	push	{r4, lr}
    49ee:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    49f0:	6800      	ldr	r0, [r0, #0]
    49f2:	f003 fe5c 	bl	86ae <nrf_gpio_pin_present_check>
    49f6:	b958      	cbnz	r0, 4a10 <nrf_gpio_pin_port_decode+0x24>
    49f8:	4912      	ldr	r1, [pc, #72]	; (4a44 <nrf_gpio_pin_port_decode+0x58>)
    49fa:	4813      	ldr	r0, [pc, #76]	; (4a48 <nrf_gpio_pin_port_decode+0x5c>)
    49fc:	4a13      	ldr	r2, [pc, #76]	; (4a4c <nrf_gpio_pin_port_decode+0x60>)
    49fe:	f240 2329 	movw	r3, #553	; 0x229
    4a02:	f003 fb45 	bl	8090 <assert_print>
    4a06:	4811      	ldr	r0, [pc, #68]	; (4a4c <nrf_gpio_pin_port_decode+0x60>)
    4a08:	f240 2129 	movw	r1, #553	; 0x229
    4a0c:	f003 fb39 	bl	8082 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4a10:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4a12:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a16:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4a18:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a1a:	d102      	bne.n	4a22 <nrf_gpio_pin_port_decode+0x36>
{
    4a1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4a20:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a22:	2b01      	cmp	r3, #1
    4a24:	d00c      	beq.n	4a40 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    4a26:	4a09      	ldr	r2, [pc, #36]	; (4a4c <nrf_gpio_pin_port_decode+0x60>)
    4a28:	4909      	ldr	r1, [pc, #36]	; (4a50 <nrf_gpio_pin_port_decode+0x64>)
    4a2a:	4807      	ldr	r0, [pc, #28]	; (4a48 <nrf_gpio_pin_port_decode+0x5c>)
    4a2c:	f240 232e 	movw	r3, #558	; 0x22e
    4a30:	f003 fb2e 	bl	8090 <assert_print>
    4a34:	4805      	ldr	r0, [pc, #20]	; (4a4c <nrf_gpio_pin_port_decode+0x60>)
    4a36:	f240 212e 	movw	r1, #558	; 0x22e
    4a3a:	f003 fb22 	bl	8082 <assert_post_action>
    4a3e:	e7ed      	b.n	4a1c <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    4a40:	4804      	ldr	r0, [pc, #16]	; (4a54 <nrf_gpio_pin_port_decode+0x68>)
    4a42:	e7ed      	b.n	4a20 <nrf_gpio_pin_port_decode+0x34>
    4a44:	00009e7b 	.word	0x00009e7b
    4a48:	00008f43 	.word	0x00008f43
    4a4c:	00009e48 	.word	0x00009e48
    4a50:	0000a6a7 	.word	0x0000a6a7
    4a54:	50000300 	.word	0x50000300

00004a58 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a58:	4a19      	ldr	r2, [pc, #100]	; (4ac0 <release_handler+0x68>)
    4a5a:	3008      	adds	r0, #8
{
    4a5c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a5e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4a62:	05d9      	lsls	r1, r3, #23
    4a64:	d51d      	bpl.n	4aa2 <release_handler+0x4a>
    4a66:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4a6a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4a6e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4a72:	f102 040e 	add.w	r4, r2, #14
    4a76:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4a78:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4a7c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4a80:	d003      	beq.n	4a8a <release_handler+0x32>
    4a82:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4a86:	4299      	cmp	r1, r3
    4a88:	d00b      	beq.n	4aa2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4a8a:	3001      	adds	r0, #1
    4a8c:	2830      	cmp	r0, #48	; 0x30
    4a8e:	d1f3      	bne.n	4a78 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4a90:	2300      	movs	r3, #0
    4a92:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4a96:	480b      	ldr	r0, [pc, #44]	; (4ac4 <release_handler+0x6c>)
    4a98:	f7ff fdc8 	bl	462c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4a9c:	4b0a      	ldr	r3, [pc, #40]	; (4ac8 <release_handler+0x70>)
    4a9e:	4298      	cmp	r0, r3
    4aa0:	d100      	bne.n	4aa4 <release_handler+0x4c>
}
    4aa2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4aa4:	4909      	ldr	r1, [pc, #36]	; (4acc <release_handler+0x74>)
    4aa6:	480a      	ldr	r0, [pc, #40]	; (4ad0 <release_handler+0x78>)
    4aa8:	4a0a      	ldr	r2, [pc, #40]	; (4ad4 <release_handler+0x7c>)
    4aaa:	f44f 7399 	mov.w	r3, #306	; 0x132
    4aae:	f003 faef 	bl	8090 <assert_print>
}
    4ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4ab6:	4807      	ldr	r0, [pc, #28]	; (4ad4 <release_handler+0x7c>)
    4ab8:	f44f 7199 	mov.w	r1, #306	; 0x132
    4abc:	f003 bae1 	b.w	8082 <assert_post_action>
    4ac0:	2000005c 	.word	0x2000005c
    4ac4:	200000d0 	.word	0x200000d0
    4ac8:	0bad0000 	.word	0x0bad0000
    4acc:	0000a01f 	.word	0x0000a01f
    4ad0:	00008f43 	.word	0x00008f43
    4ad4:	00009fbb 	.word	0x00009fbb

00004ad8 <pin_handler_trigger_uninit>:
{
    4ad8:	b538      	push	{r3, r4, r5, lr}
    4ada:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4adc:	f7ff ff48 	bl	4970 <pin_in_use_by_te>
    4ae0:	4c09      	ldr	r4, [pc, #36]	; (4b08 <pin_handler_trigger_uninit+0x30>)
    4ae2:	f102 0508 	add.w	r5, r2, #8
    4ae6:	b140      	cbz	r0, 4afa <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ae8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4aec:	4907      	ldr	r1, [pc, #28]	; (4b0c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4aee:	0b5b      	lsrs	r3, r3, #13
    4af0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4af4:	2000      	movs	r0, #0
    4af6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4afa:	4610      	mov	r0, r2
    4afc:	f7ff ffac 	bl	4a58 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b00:	2300      	movs	r3, #0
    4b02:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b06:	bd38      	pop	{r3, r4, r5, pc}
    4b08:	2000005c 	.word	0x2000005c
    4b0c:	40006000 	.word	0x40006000

00004b10 <nrfx_gpiote_input_configure>:
{
    4b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b12:	4604      	mov	r4, r0
    4b14:	b085      	sub	sp, #20
    4b16:	4617      	mov	r7, r2
    4b18:	461d      	mov	r5, r3
    if (p_input_config)
    4b1a:	b1d9      	cbz	r1, 4b54 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    4b1c:	f003 fdd8 	bl	86d0 <pin_is_task_output>
    4b20:	bb00      	cbnz	r0, 4b64 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b22:	460b      	mov	r3, r1
    4b24:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b28:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4b2c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b30:	f10d 020f 	add.w	r2, sp, #15
    4b34:	f10d 010e 	add.w	r1, sp, #14
    4b38:	4620      	mov	r0, r4
    4b3a:	f003 fdd4 	bl	86e6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b3e:	4a43      	ldr	r2, [pc, #268]	; (4c4c <nrfx_gpiote_input_configure+0x13c>)
    4b40:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4b44:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4b48:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b4c:	f043 0301 	orr.w	r3, r3, #1
    4b50:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4b54:	b347      	cbz	r7, 4ba8 <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    4b56:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4b58:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4b5a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    4b5c:	f7ff ff1e 	bl	499c <pin_is_output>
    4b60:	b110      	cbz	r0, 4b68 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    4b62:	b1b2      	cbz	r2, 4b92 <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    4b64:	483a      	ldr	r0, [pc, #232]	; (4c50 <nrfx_gpiote_input_configure+0x140>)
    4b66:	e021      	b.n	4bac <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4b68:	4f38      	ldr	r7, [pc, #224]	; (4c4c <nrfx_gpiote_input_configure+0x13c>)
    4b6a:	f104 0c08 	add.w	ip, r4, #8
    4b6e:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    4b72:	f021 0120 	bic.w	r1, r1, #32
    4b76:	04c9      	lsls	r1, r1, #19
    4b78:	0cc9      	lsrs	r1, r1, #19
    4b7a:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    4b7e:	b142      	cbz	r2, 4b92 <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    4b80:	2e03      	cmp	r6, #3
    4b82:	d8ef      	bhi.n	4b64 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4b84:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4b86:	b99e      	cbnz	r6, 4bb0 <nrfx_gpiote_input_configure+0xa0>
    4b88:	4a32      	ldr	r2, [pc, #200]	; (4c54 <nrfx_gpiote_input_configure+0x144>)
    4b8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4b8e:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4b92:	4a2e      	ldr	r2, [pc, #184]	; (4c4c <nrfx_gpiote_input_configure+0x13c>)
    4b94:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4b98:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4b9c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4ba0:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    4ba4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    4ba8:	bb3d      	cbnz	r5, 4bfa <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    4baa:	482b      	ldr	r0, [pc, #172]	; (4c58 <nrfx_gpiote_input_configure+0x148>)
}
    4bac:	b005      	add	sp, #20
    4bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4bb0:	009a      	lsls	r2, r3, #2
    4bb2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4bb6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bba:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    4bbe:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4bc2:	f020 0003 	bic.w	r0, r0, #3
    4bc6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4bca:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4bce:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4bd2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4bd6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bda:	0220      	lsls	r0, r4, #8
    4bdc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4be0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4be4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    4be8:	ea40 000e 	orr.w	r0, r0, lr
    4bec:	f041 0120 	orr.w	r1, r1, #32
    4bf0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    4bf4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4bf8:	e7cb      	b.n	4b92 <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4bfa:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4bfe:	4620      	mov	r0, r4
    4c00:	f7ff ff2a 	bl	4a58 <release_handler>
    if (!handler)
    4c04:	2e00      	cmp	r6, #0
    4c06:	d0d0      	beq.n	4baa <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c08:	4d10      	ldr	r5, [pc, #64]	; (4c4c <nrfx_gpiote_input_configure+0x13c>)
    4c0a:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c0e:	4296      	cmp	r6, r2
    4c10:	d101      	bne.n	4c16 <nrfx_gpiote_input_configure+0x106>
    4c12:	429f      	cmp	r7, r3
    4c14:	d018      	beq.n	4c48 <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c16:	4811      	ldr	r0, [pc, #68]	; (4c5c <nrfx_gpiote_input_configure+0x14c>)
    4c18:	f10d 010f 	add.w	r1, sp, #15
    4c1c:	f7ff fce6 	bl	45ec <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c20:	4b0d      	ldr	r3, [pc, #52]	; (4c58 <nrfx_gpiote_input_configure+0x148>)
    4c22:	4298      	cmp	r0, r3
    4c24:	d1c2      	bne.n	4bac <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    4c26:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4c2a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4c2e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c32:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c34:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c36:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4c3a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4c42:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4c46:	e7b0      	b.n	4baa <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c48:	2200      	movs	r2, #0
    4c4a:	e7ee      	b.n	4c2a <nrfx_gpiote_input_configure+0x11a>
    4c4c:	2000005c 	.word	0x2000005c
    4c50:	0bad0004 	.word	0x0bad0004
    4c54:	40006000 	.word	0x40006000
    4c58:	0bad0000 	.word	0x0bad0000
    4c5c:	200000d0 	.word	0x200000d0

00004c60 <nrfx_gpiote_output_configure>:
{
    4c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c62:	4604      	mov	r4, r0
    4c64:	b085      	sub	sp, #20
    4c66:	4615      	mov	r5, r2
    if (p_config)
    4c68:	b321      	cbz	r1, 4cb4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    4c6a:	f7ff fe97 	bl	499c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4c6e:	b920      	cbnz	r0, 4c7a <nrfx_gpiote_output_configure+0x1a>
    4c70:	4620      	mov	r0, r4
    4c72:	f7ff fe7d 	bl	4970 <pin_in_use_by_te>
    4c76:	2800      	cmp	r0, #0
    4c78:	d15e      	bne.n	4d38 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4c7a:	4620      	mov	r0, r4
    4c7c:	f7ff fe82 	bl	4984 <pin_has_trigger>
    4c80:	b110      	cbz	r0, 4c88 <nrfx_gpiote_output_configure+0x28>
    4c82:	784b      	ldrb	r3, [r1, #1]
    4c84:	2b01      	cmp	r3, #1
    4c86:	d057      	beq.n	4d38 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4c88:	2301      	movs	r3, #1
    4c8a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4c8e:	2300      	movs	r3, #0
    4c90:	e9cd 1300 	strd	r1, r3, [sp]
    4c94:	1c4a      	adds	r2, r1, #1
    4c96:	1c8b      	adds	r3, r1, #2
    4c98:	4620      	mov	r0, r4
    4c9a:	f10d 010f 	add.w	r1, sp, #15
    4c9e:	f003 fd22 	bl	86e6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4ca2:	4a26      	ldr	r2, [pc, #152]	; (4d3c <nrfx_gpiote_output_configure+0xdc>)
    4ca4:	f104 0108 	add.w	r1, r4, #8
    4ca8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4cac:	f043 0303 	orr.w	r3, r3, #3
    4cb0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    4cb4:	b915      	cbnz	r5, 4cbc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    4cb6:	4822      	ldr	r0, [pc, #136]	; (4d40 <nrfx_gpiote_output_configure+0xe0>)
}
    4cb8:	b005      	add	sp, #20
    4cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    4cbc:	4620      	mov	r0, r4
    4cbe:	f7ff fe6d 	bl	499c <pin_is_output>
        if (pin_is_input(pin))
    4cc2:	b3c8      	cbz	r0, 4d38 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4cc4:	4e1d      	ldr	r6, [pc, #116]	; (4d3c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    4cc6:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4cca:	f104 0708 	add.w	r7, r4, #8
    4cce:	4661      	mov	r1, ip
    4cd0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    4cd4:	0089      	lsls	r1, r1, #2
    4cd6:	f020 0020 	bic.w	r0, r0, #32
    4cda:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4cde:	04c0      	lsls	r0, r0, #19
    4ce0:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4ce4:	0cc0      	lsrs	r0, r0, #19
    4ce6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4cea:	2300      	movs	r3, #0
    4cec:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4cf0:	786a      	ldrb	r2, [r5, #1]
    4cf2:	2a00      	cmp	r2, #0
    4cf4:	d0df      	beq.n	4cb6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4cf6:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4cfa:	78ad      	ldrb	r5, [r5, #2]
    4cfc:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4d00:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d04:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d08:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d0c:	0223      	lsls	r3, r4, #8
    4d0e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d12:	0412      	lsls	r2, r2, #16
    4d14:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d18:	ea43 030e 	orr.w	r3, r3, lr
    4d1c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d1e:	052a      	lsls	r2, r5, #20
    4d20:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d24:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d28:	4313      	orrs	r3, r2
    4d2a:	f040 0020 	orr.w	r0, r0, #32
    4d2e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d36:	e7be      	b.n	4cb6 <nrfx_gpiote_output_configure+0x56>
{
    4d38:	4802      	ldr	r0, [pc, #8]	; (4d44 <nrfx_gpiote_output_configure+0xe4>)
    4d3a:	e7bd      	b.n	4cb8 <nrfx_gpiote_output_configure+0x58>
    4d3c:	2000005c 	.word	0x2000005c
    4d40:	0bad0000 	.word	0x0bad0000
    4d44:	0bad0004 	.word	0x0bad0004

00004d48 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4d48:	4b01      	ldr	r3, [pc, #4]	; (4d50 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4d4a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4d4e:	4770      	bx	lr
    4d50:	2000005c 	.word	0x2000005c

00004d54 <nrfx_gpiote_channel_get>:
{
    4d54:	b538      	push	{r3, r4, r5, lr}
    4d56:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4d58:	460d      	mov	r5, r1
    4d5a:	b959      	cbnz	r1, 4d74 <nrfx_gpiote_channel_get+0x20>
    4d5c:	490c      	ldr	r1, [pc, #48]	; (4d90 <nrfx_gpiote_channel_get+0x3c>)
    4d5e:	480d      	ldr	r0, [pc, #52]	; (4d94 <nrfx_gpiote_channel_get+0x40>)
    4d60:	4a0d      	ldr	r2, [pc, #52]	; (4d98 <nrfx_gpiote_channel_get+0x44>)
    4d62:	f240 2335 	movw	r3, #565	; 0x235
    4d66:	f003 f993 	bl	8090 <assert_print>
    4d6a:	480b      	ldr	r0, [pc, #44]	; (4d98 <nrfx_gpiote_channel_get+0x44>)
    4d6c:	f240 2135 	movw	r1, #565	; 0x235
    4d70:	f003 f987 	bl	8082 <assert_post_action>
    if (pin_in_use_by_te(pin))
    4d74:	4620      	mov	r0, r4
    4d76:	f7ff fdfb 	bl	4970 <pin_in_use_by_te>
    4d7a:	b138      	cbz	r0, 4d8c <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d7c:	4b07      	ldr	r3, [pc, #28]	; (4d9c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    4d7e:	4808      	ldr	r0, [pc, #32]	; (4da0 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d80:	3408      	adds	r4, #8
    4d82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4d86:	0b5b      	lsrs	r3, r3, #13
    4d88:	702b      	strb	r3, [r5, #0]
}
    4d8a:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d8c:	4805      	ldr	r0, [pc, #20]	; (4da4 <nrfx_gpiote_channel_get+0x50>)
    4d8e:	e7fc      	b.n	4d8a <nrfx_gpiote_channel_get+0x36>
    4d90:	0000a033 	.word	0x0000a033
    4d94:	00008f43 	.word	0x00008f43
    4d98:	00009fbb 	.word	0x00009fbb
    4d9c:	2000005c 	.word	0x2000005c
    4da0:	0bad0000 	.word	0x0bad0000
    4da4:	0bad0004 	.word	0x0bad0004

00004da8 <nrfx_gpiote_init>:
{
    4da8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4daa:	4c0f      	ldr	r4, [pc, #60]	; (4de8 <nrfx_gpiote_init+0x40>)
    4dac:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4db0:	b9bd      	cbnz	r5, 4de2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4db2:	2260      	movs	r2, #96	; 0x60
    4db4:	4629      	mov	r1, r5
    4db6:	f104 0010 	add.w	r0, r4, #16
    4dba:	f003 fa47 	bl	824c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4dbe:	2006      	movs	r0, #6
    4dc0:	f7fd fc16 	bl	25f0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dc4:	4b09      	ldr	r3, [pc, #36]	; (4dec <nrfx_gpiote_init+0x44>)
    return err_code;
    4dc6:	480a      	ldr	r0, [pc, #40]	; (4df0 <nrfx_gpiote_init+0x48>)
    4dc8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4dcc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4dd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4dd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4dd8:	2301      	movs	r3, #1
    4dda:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4dde:	6763      	str	r3, [r4, #116]	; 0x74
}
    4de0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4de2:	4804      	ldr	r0, [pc, #16]	; (4df4 <nrfx_gpiote_init+0x4c>)
    4de4:	e7fc      	b.n	4de0 <nrfx_gpiote_init+0x38>
    4de6:	bf00      	nop
    4de8:	2000005c 	.word	0x2000005c
    4dec:	40006000 	.word	0x40006000
    4df0:	0bad0000 	.word	0x0bad0000
    4df4:	0bad0005 	.word	0x0bad0005

00004df8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4df8:	4b03      	ldr	r3, [pc, #12]	; (4e08 <nrfx_gpiote_is_init+0x10>)
    4dfa:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4dfe:	3800      	subs	r0, #0
    4e00:	bf18      	it	ne
    4e02:	2001      	movne	r0, #1
    4e04:	4770      	bx	lr
    4e06:	bf00      	nop
    4e08:	2000005c 	.word	0x2000005c

00004e0c <nrfx_gpiote_channel_free>:
{
    4e0c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e0e:	4801      	ldr	r0, [pc, #4]	; (4e14 <nrfx_gpiote_channel_free+0x8>)
    4e10:	f7ff bc0c 	b.w	462c <nrfx_flag32_free>
    4e14:	200000cc 	.word	0x200000cc

00004e18 <nrfx_gpiote_channel_alloc>:
{
    4e18:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e1a:	4801      	ldr	r0, [pc, #4]	; (4e20 <nrfx_gpiote_channel_alloc+0x8>)
    4e1c:	f7ff bbe6 	b.w	45ec <nrfx_flag32_alloc>
    4e20:	200000cc 	.word	0x200000cc

00004e24 <nrfx_gpiote_trigger_enable>:
{
    4e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e26:	4604      	mov	r4, r0
    4e28:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4e2a:	f7ff fdab 	bl	4984 <pin_has_trigger>
    4e2e:	b958      	cbnz	r0, 4e48 <nrfx_gpiote_trigger_enable+0x24>
    4e30:	492e      	ldr	r1, [pc, #184]	; (4eec <nrfx_gpiote_trigger_enable+0xc8>)
    4e32:	482f      	ldr	r0, [pc, #188]	; (4ef0 <nrfx_gpiote_trigger_enable+0xcc>)
    4e34:	4a2f      	ldr	r2, [pc, #188]	; (4ef4 <nrfx_gpiote_trigger_enable+0xd0>)
    4e36:	f240 33df 	movw	r3, #991	; 0x3df
    4e3a:	f003 f929 	bl	8090 <assert_print>
    4e3e:	482d      	ldr	r0, [pc, #180]	; (4ef4 <nrfx_gpiote_trigger_enable+0xd0>)
    4e40:	f240 31df 	movw	r1, #991	; 0x3df
    4e44:	f003 f91d 	bl	8082 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e48:	4620      	mov	r0, r4
    4e4a:	f7ff fd91 	bl	4970 <pin_in_use_by_te>
    4e4e:	4e2a      	ldr	r6, [pc, #168]	; (4ef8 <nrfx_gpiote_trigger_enable+0xd4>)
    4e50:	f104 0708 	add.w	r7, r4, #8
    4e54:	b1f8      	cbz	r0, 4e96 <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    4e56:	4620      	mov	r0, r4
    4e58:	f7ff fda0 	bl	499c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e5c:	b9d8      	cbnz	r0, 4e96 <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e5e:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    4e62:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e64:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    4e66:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    4e6a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    4e6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e76:	6008      	str	r0, [r1, #0]
    4e78:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e7a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    4e7e:	f041 0101 	orr.w	r1, r1, #1
    4e82:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    4e86:	b125      	cbz	r5, 4e92 <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e88:	2301      	movs	r3, #1
    4e8a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    4e8c:	4a1b      	ldr	r2, [pc, #108]	; (4efc <nrfx_gpiote_trigger_enable+0xd8>)
    4e8e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e92:	b003      	add	sp, #12
    4e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4e96:	b95d      	cbnz	r5, 4eb0 <nrfx_gpiote_trigger_enable+0x8c>
    4e98:	4919      	ldr	r1, [pc, #100]	; (4f00 <nrfx_gpiote_trigger_enable+0xdc>)
    4e9a:	4815      	ldr	r0, [pc, #84]	; (4ef0 <nrfx_gpiote_trigger_enable+0xcc>)
    4e9c:	4a15      	ldr	r2, [pc, #84]	; (4ef4 <nrfx_gpiote_trigger_enable+0xd0>)
    4e9e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4ea2:	f003 f8f5 	bl	8090 <assert_print>
    4ea6:	4813      	ldr	r0, [pc, #76]	; (4ef4 <nrfx_gpiote_trigger_enable+0xd0>)
    4ea8:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4eac:	f003 f8e9 	bl	8082 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4eb0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4eb4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4eb8:	2b04      	cmp	r3, #4
    4eba:	d012      	beq.n	4ee2 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4ebc:	2b05      	cmp	r3, #5
    4ebe:	d012      	beq.n	4ee6 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ec0:	a801      	add	r0, sp, #4
    4ec2:	9401      	str	r4, [sp, #4]
    4ec4:	f7ff fd92 	bl	49ec <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4ec8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4eca:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4ece:	40d9      	lsrs	r1, r3
    4ed0:	f001 0101 	and.w	r1, r1, #1
    4ed4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ed6:	4620      	mov	r0, r4
}
    4ed8:	b003      	add	sp, #12
    4eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ede:	f003 bc4f 	b.w	8780 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4ee2:	2103      	movs	r1, #3
    4ee4:	e7f7      	b.n	4ed6 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4ee6:	2102      	movs	r1, #2
    4ee8:	e7f5      	b.n	4ed6 <nrfx_gpiote_trigger_enable+0xb2>
    4eea:	bf00      	nop
    4eec:	0000a03d 	.word	0x0000a03d
    4ef0:	00008f43 	.word	0x00008f43
    4ef4:	00009fbb 	.word	0x00009fbb
    4ef8:	2000005c 	.word	0x2000005c
    4efc:	40006000 	.word	0x40006000
    4f00:	0000a052 	.word	0x0000a052

00004f04 <nrfx_gpiote_trigger_disable>:
{
    4f04:	b508      	push	{r3, lr}
    4f06:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f08:	f7ff fd32 	bl	4970 <pin_in_use_by_te>
    4f0c:	b1c8      	cbz	r0, 4f42 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    4f0e:	4610      	mov	r0, r2
    4f10:	f7ff fd44 	bl	499c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f14:	b9a8      	cbnz	r0, 4f42 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f16:	3208      	adds	r2, #8
    4f18:	4b0d      	ldr	r3, [pc, #52]	; (4f50 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    4f1a:	490e      	ldr	r1, [pc, #56]	; (4f54 <nrfx_gpiote_trigger_disable+0x50>)
    4f1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f20:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f22:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f24:	409a      	lsls	r2, r3
    4f26:	009b      	lsls	r3, r3, #2
    4f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4f2c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4f30:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f34:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f38:	f022 0203 	bic.w	r2, r2, #3
    4f3c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f40:	bd08      	pop	{r3, pc}
    4f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f46:	2100      	movs	r1, #0
    4f48:	4610      	mov	r0, r2
    4f4a:	f003 bc19 	b.w	8780 <nrf_gpio_cfg_sense_set>
    4f4e:	bf00      	nop
    4f50:	2000005c 	.word	0x2000005c
    4f54:	40006000 	.word	0x40006000

00004f58 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f58:	4b0e      	ldr	r3, [pc, #56]	; (4f94 <nrfx_gpiote_pin_uninit+0x3c>)
    4f5a:	f100 0208 	add.w	r2, r0, #8
{
    4f5e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4f64:	07db      	lsls	r3, r3, #31
{
    4f66:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f68:	d511      	bpl.n	4f8e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4f6a:	f7ff ffcb 	bl	4f04 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f6e:	4620      	mov	r0, r4
    4f70:	f7ff fdb2 	bl	4ad8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f74:	a801      	add	r0, sp, #4
    4f76:	9401      	str	r4, [sp, #4]
    4f78:	f7ff fd38 	bl	49ec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f7c:	9b01      	ldr	r3, [sp, #4]
    4f7e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f82:	2202      	movs	r2, #2
    4f84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4f88:	4803      	ldr	r0, [pc, #12]	; (4f98 <nrfx_gpiote_pin_uninit+0x40>)
}
    4f8a:	b002      	add	sp, #8
    4f8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f8e:	4803      	ldr	r0, [pc, #12]	; (4f9c <nrfx_gpiote_pin_uninit+0x44>)
    4f90:	e7fb      	b.n	4f8a <nrfx_gpiote_pin_uninit+0x32>
    4f92:	bf00      	nop
    4f94:	2000005c 	.word	0x2000005c
    4f98:	0bad0000 	.word	0x0bad0000
    4f9c:	0bad0004 	.word	0x0bad0004

00004fa0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fa4:	4b69      	ldr	r3, [pc, #420]	; (514c <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    4fa6:	486a      	ldr	r0, [pc, #424]	; (5150 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fa8:	496a      	ldr	r1, [pc, #424]	; (5154 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    4faa:	2600      	movs	r6, #0
{
    4fac:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4fae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fb0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fb2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4fb4:	b135      	cbz	r5, 4fc4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4fb6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4fba:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fbc:	bf1e      	ittt	ne
    4fbe:	601c      	strne	r4, [r3, #0]
    4fc0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4fc2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fc4:	3304      	adds	r3, #4
    4fc6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4fc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fcc:	d1f1      	bne.n	4fb2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fce:	f8df 9180 	ldr.w	r9, [pc, #384]	; 5150 <nrfx_gpiote_irq_handler+0x1b0>
    4fd2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	f000 809b 	beq.w	5112 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    4fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4fe0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4fe4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4fe6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4fea:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4fee:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4ff0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4ff4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    4ff8:	f10d 0a10 	add.w	sl, sp, #16
    4ffc:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5000:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5002:	f04f 0b01 	mov.w	fp, #1
    5006:	e04b      	b.n	50a0 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    5008:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    500a:	4a53      	ldr	r2, [pc, #332]	; (5158 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    500c:	fa94 f4a4 	rbit	r4, r4
    5010:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5014:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5016:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5018:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    501c:	f004 0107 	and.w	r1, r4, #7
    5020:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5024:	f81a 3000 	ldrb.w	r3, [sl, r0]
    5028:	9403      	str	r4, [sp, #12]
    502a:	fa0b f101 	lsl.w	r1, fp, r1
    502e:	ea23 0301 	bic.w	r3, r3, r1
    5032:	08ba      	lsrs	r2, r7, #2
    5034:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5038:	a803      	add	r0, sp, #12
    503a:	9201      	str	r2, [sp, #4]
    503c:	f7ff fcd6 	bl	49ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5040:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    5042:	9a01      	ldr	r2, [sp, #4]
    5044:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5048:	f3c7 0582 	ubfx	r5, r7, #2, #3
    504c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    5050:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5052:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5054:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    5058:	d52c      	bpl.n	50b4 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    505a:	4639      	mov	r1, r7
    505c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    505e:	b2dd      	uxtb	r5, r3
    5060:	f7ff fca6 	bl	49b0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5064:	a803      	add	r0, sp, #12
    5066:	9403      	str	r4, [sp, #12]
    5068:	f7ff fcc0 	bl	49ec <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    506c:	9b03      	ldr	r3, [sp, #12]
    506e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5072:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5076:	f3c3 4301 	ubfx	r3, r3, #16, #2
    507a:	429d      	cmp	r5, r3
    507c:	d107      	bne.n	508e <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    507e:	2100      	movs	r1, #0
    5080:	4620      	mov	r0, r4
    5082:	f003 fb7d 	bl	8780 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5086:	4629      	mov	r1, r5
    5088:	4620      	mov	r0, r4
    508a:	f003 fb79 	bl	8780 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    508e:	a803      	add	r0, sp, #12
    5090:	9403      	str	r4, [sp, #12]
    5092:	f7ff fcab 	bl	49ec <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5096:	9b03      	ldr	r3, [sp, #12]
    5098:	fa0b f303 	lsl.w	r3, fp, r3
    509c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    50a0:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    50a4:	2c00      	cmp	r4, #0
    50a6:	d1af      	bne.n	5008 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    50a8:	f1b8 0f00 	cmp.w	r8, #0
    50ac:	d11d      	bne.n	50ea <nrfx_gpiote_irq_handler+0x14a>
    50ae:	f04f 0801 	mov.w	r8, #1
    50b2:	e7a3      	b.n	4ffc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    50b4:	2b02      	cmp	r3, #2
    50b6:	d10c      	bne.n	50d2 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    50b8:	2103      	movs	r1, #3
    50ba:	4620      	mov	r0, r4
    50bc:	f003 fb60 	bl	8780 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50c0:	f005 0305 	and.w	r3, r5, #5
    50c4:	2b01      	cmp	r3, #1
    50c6:	d1e2      	bne.n	508e <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    50c8:	4639      	mov	r1, r7
    50ca:	4620      	mov	r0, r4
    50cc:	f7ff fc70 	bl	49b0 <call_handler>
    50d0:	e7dd      	b.n	508e <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    50d2:	2102      	movs	r1, #2
    50d4:	4620      	mov	r0, r4
    50d6:	9301      	str	r3, [sp, #4]
    50d8:	f003 fb52 	bl	8780 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50dc:	2d03      	cmp	r5, #3
    50de:	d0f3      	beq.n	50c8 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50e0:	9b01      	ldr	r3, [sp, #4]
    50e2:	2b03      	cmp	r3, #3
    50e4:	d1d3      	bne.n	508e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50e6:	2d02      	cmp	r5, #2
    50e8:	e7ed      	b.n	50c6 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    50ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    50ee:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    50f2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    50f6:	4919      	ldr	r1, [pc, #100]	; (515c <nrfx_gpiote_irq_handler+0x1bc>)
    50f8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    50fc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    50fe:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5102:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5106:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5108:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    510a:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    510e:	f47f af71 	bne.w	4ff4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    5112:	2401      	movs	r4, #1
    while (mask)
    5114:	b916      	cbnz	r6, 511c <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5116:	b007      	add	sp, #28
    5118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    511c:	fa96 f3a6 	rbit	r3, r6
    5120:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5124:	fa04 f203 	lsl.w	r2, r4, r3
    5128:	009b      	lsls	r3, r3, #2
    512a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    512e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5132:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5136:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    513a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    513e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    5142:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5146:	f7ff fc33 	bl	49b0 <call_handler>
    514a:	e7e3      	b.n	5114 <nrfx_gpiote_irq_handler+0x174>
    514c:	40006100 	.word	0x40006100
    5150:	40006000 	.word	0x40006000
    5154:	40006120 	.word	0x40006120
    5158:	2000005c 	.word	0x2000005c
    515c:	50000300 	.word	0x50000300

00005160 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5160:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5162:	4801      	ldr	r0, [pc, #4]	; (5168 <nrfx_ppi_channel_alloc+0x8>)
    5164:	f7ff ba42 	b.w	45ec <nrfx_flag32_alloc>
    5168:	200000d8 	.word	0x200000d8

0000516c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    516c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    516e:	4c11      	ldr	r4, [pc, #68]	; (51b4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5170:	4a11      	ldr	r2, [pc, #68]	; (51b8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5172:	4912      	ldr	r1, [pc, #72]	; (51bc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5174:	2303      	movs	r3, #3
    5176:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5178:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    517a:	4b11      	ldr	r3, [pc, #68]	; (51c0 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    517c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    517e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5180:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5184:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5186:	2300      	movs	r3, #0
    5188:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    518a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    518c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    518e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5190:	4a0c      	ldr	r2, [pc, #48]	; (51c4 <_DoInit+0x58>)
    5192:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5194:	2210      	movs	r2, #16
    5196:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    5198:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    519a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    519c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    519e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    51a0:	f003 f82f 	bl	8202 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    51a4:	4908      	ldr	r1, [pc, #32]	; (51c8 <_DoInit+0x5c>)
    51a6:	4620      	mov	r0, r4
    51a8:	f003 f82b 	bl	8202 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    51ac:	2320      	movs	r3, #32
    51ae:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    51b0:	bd10      	pop	{r4, pc}
    51b2:	bf00      	nop
    51b4:	20000938 	.word	0x20000938
    51b8:	0000a05d 	.word	0x0000a05d
    51bc:	0000a066 	.word	0x0000a066
    51c0:	20000c18 	.word	0x20000c18
    51c4:	20000c08 	.word	0x20000c08
    51c8:	0000a06a 	.word	0x0000a06a

000051cc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    51cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    51d0:	4f21      	ldr	r7, [pc, #132]	; (5258 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    51d2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    51d6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    51d8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    51dc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    51de:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    51e0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    51e2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    51e4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    51e6:	d831      	bhi.n	524c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    51e8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    51ec:	ebaa 0905 	sub.w	r9, sl, r5
    51f0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    51f4:	4294      	cmp	r4, r2
    51f6:	d811      	bhi.n	521c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    51f8:	2318      	movs	r3, #24
    51fa:	fb06 3303 	mla	r3, r6, r3, r3
    51fe:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    5200:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5202:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5204:	4641      	mov	r1, r8
    5206:	4428      	add	r0, r5
    5208:	f003 f815 	bl	8236 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    520c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    520e:	2318      	movs	r3, #24
    5210:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    5214:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    5216:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    521c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    521e:	429c      	cmp	r4, r3
    5220:	d818      	bhi.n	5254 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5222:	fb00 bb0b 	mla	fp, r0, fp, fp
    5226:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5228:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    522a:	f8db 0004 	ldr.w	r0, [fp, #4]
    522e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5230:	4428      	add	r0, r5
    5232:	f003 f800 	bl	8236 <memcpy>
      if (NumBytes) {
    5236:	ebb4 040a 	subs.w	r4, r4, sl
    523a:	d0e8      	beq.n	520e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    523c:	f8db 0004 	ldr.w	r0, [fp, #4]
    5240:	4622      	mov	r2, r4
    5242:	eb08 0109 	add.w	r1, r8, r9
    5246:	f002 fff6 	bl	8236 <memcpy>
      return 1;
    524a:	e7e0      	b.n	520e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    524c:	3b01      	subs	r3, #1
    524e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5250:	42a3      	cmp	r3, r4
    5252:	d2d1      	bcs.n	51f8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5254:	2000      	movs	r0, #0
    5256:	e7df      	b.n	5218 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    5258:	20000938 	.word	0x20000938

0000525c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    525c:	4b03      	ldr	r3, [pc, #12]	; (526c <SEGGER_RTT_HasDataUp+0x10>)
    525e:	2218      	movs	r2, #24
    5260:	fb02 3300 	mla	r3, r2, r0, r3
    5264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5266:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5268:	1a80      	subs	r0, r0, r2
    526a:	4770      	bx	lr
    526c:	20000938 	.word	0x20000938

00005270 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5270:	4b0e      	ldr	r3, [pc, #56]	; (52ac <z_sys_init_run_level+0x3c>)
{
    5272:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5274:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5278:	3001      	adds	r0, #1
    527a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    527e:	42a6      	cmp	r6, r4
    5280:	d800      	bhi.n	5284 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5282:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5284:	e9d4 3500 	ldrd	r3, r5, [r4]
    5288:	4628      	mov	r0, r5
    528a:	4798      	blx	r3
		if (dev != NULL) {
    528c:	b165      	cbz	r5, 52a8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    528e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5290:	b130      	cbz	r0, 52a0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5292:	2800      	cmp	r0, #0
    5294:	bfb8      	it	lt
    5296:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    5298:	28ff      	cmp	r0, #255	; 0xff
    529a:	bfa8      	it	ge
    529c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    529e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    52a0:	785a      	ldrb	r2, [r3, #1]
    52a2:	f042 0201 	orr.w	r2, r2, #1
    52a6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    52a8:	3408      	adds	r4, #8
    52aa:	e7e8      	b.n	527e <z_sys_init_run_level+0xe>
    52ac:	00008e38 	.word	0x00008e38

000052b0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    52b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52b4:	4605      	mov	r5, r0
    52b6:	b086      	sub	sp, #24
    52b8:	460f      	mov	r7, r1
	__asm__ volatile(
    52ba:	f04f 0320 	mov.w	r3, #32
    52be:	f3ef 8811 	mrs	r8, BASEPRI
    52c2:	f383 8812 	msr	BASEPRI_MAX, r3
    52c6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    52ca:	f001 fe05 	bl	6ed8 <z_impl_z_current_get>
    52ce:	2d04      	cmp	r5, #4
    52d0:	bf96      	itet	ls
    52d2:	4b29      	ldrls	r3, [pc, #164]	; (5378 <z_fatal_error+0xc8>)
    52d4:	4b29      	ldrhi	r3, [pc, #164]	; (537c <z_fatal_error+0xcc>)
    52d6:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    52da:	4929      	ldr	r1, [pc, #164]	; (5380 <z_fatal_error+0xd0>)
    52dc:	9503      	str	r5, [sp, #12]
    52de:	2400      	movs	r4, #0
    52e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    52e4:	4b27      	ldr	r3, [pc, #156]	; (5384 <z_fatal_error+0xd4>)
    52e6:	9400      	str	r4, [sp, #0]
    52e8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    52ec:	4606      	mov	r6, r0
    52ee:	4623      	mov	r3, r4
    52f0:	2201      	movs	r2, #1
    52f2:	4620      	mov	r0, r4
    52f4:	f003 fa65 	bl	87c2 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    52f8:	b16f      	cbz	r7, 5316 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    52fa:	69fb      	ldr	r3, [r7, #28]
    52fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5300:	b14b      	cbz	r3, 5316 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    5302:	4b21      	ldr	r3, [pc, #132]	; (5388 <z_fatal_error+0xd8>)
    5304:	491e      	ldr	r1, [pc, #120]	; (5380 <z_fatal_error+0xd0>)
    5306:	9400      	str	r4, [sp, #0]
    5308:	e9cd 4301 	strd	r4, r3, [sp, #4]
    530c:	2201      	movs	r2, #1
    530e:	4623      	mov	r3, r4
    5310:	4620      	mov	r0, r4
    5312:	f003 fa56 	bl	87c2 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5316:	b12e      	cbz	r6, 5324 <z_fatal_error+0x74>
    5318:	4630      	mov	r0, r6
    531a:	f003 fa88 	bl	882e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    531e:	b108      	cbz	r0, 5324 <z_fatal_error+0x74>
    5320:	7803      	ldrb	r3, [r0, #0]
    5322:	b903      	cbnz	r3, 5326 <z_fatal_error+0x76>
		thread_name = "unknown";
    5324:	4819      	ldr	r0, [pc, #100]	; (538c <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5326:	4b1a      	ldr	r3, [pc, #104]	; (5390 <z_fatal_error+0xe0>)
    5328:	9302      	str	r3, [sp, #8]
    532a:	2300      	movs	r3, #0
    532c:	e9cd 6003 	strd	r6, r0, [sp, #12]
    5330:	e9cd 3300 	strd	r3, r3, [sp]
    5334:	4618      	mov	r0, r3
    5336:	4912      	ldr	r1, [pc, #72]	; (5380 <z_fatal_error+0xd0>)
    5338:	2201      	movs	r2, #1
    533a:	f003 fa42 	bl	87c2 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    533e:	4639      	mov	r1, r7
    5340:	4628      	mov	r0, r5
    5342:	f7ff f83f 	bl	43c4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5346:	2d04      	cmp	r5, #4
    5348:	d10c      	bne.n	5364 <z_fatal_error+0xb4>
    534a:	4912      	ldr	r1, [pc, #72]	; (5394 <z_fatal_error+0xe4>)
    534c:	4a12      	ldr	r2, [pc, #72]	; (5398 <z_fatal_error+0xe8>)
    534e:	4813      	ldr	r0, [pc, #76]	; (539c <z_fatal_error+0xec>)
    5350:	238f      	movs	r3, #143	; 0x8f
    5352:	f002 fe9d 	bl	8090 <assert_print>
    5356:	4812      	ldr	r0, [pc, #72]	; (53a0 <z_fatal_error+0xf0>)
    5358:	f002 fe9a 	bl	8090 <assert_print>
    535c:	480e      	ldr	r0, [pc, #56]	; (5398 <z_fatal_error+0xe8>)
    535e:	218f      	movs	r1, #143	; 0x8f
    5360:	f002 fe8f 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5364:	f388 8811 	msr	BASEPRI, r8
    5368:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    536c:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    536e:	b006      	add	sp, #24
    5370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5374:	f7fd bdfa 	b.w	2f6c <z_impl_k_thread_abort>
    5378:	00008e50 	.word	0x00008e50
    537c:	0000a071 	.word	0x0000a071
    5380:	00008be8 	.word	0x00008be8
    5384:	0000a087 	.word	0x0000a087
    5388:	0000a0af 	.word	0x0000a0af
    538c:	0000a07f 	.word	0x0000a07f
    5390:	0000a0d0 	.word	0x0000a0d0
    5394:	0000a10a 	.word	0x0000a10a
    5398:	0000a0e8 	.word	0x0000a0e8
    539c:	00008f43 	.word	0x00008f43
    53a0:	0000a127 	.word	0x0000a127

000053a4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    53a4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    53a6:	4b0a      	ldr	r3, [pc, #40]	; (53d0 <bg_thread_main+0x2c>)
    53a8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    53aa:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    53ac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    53ae:	f7ff ff5f 	bl	5270 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    53b2:	f002 f9e3 	bl	777c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    53b6:	2003      	movs	r0, #3
    53b8:	f7ff ff5a 	bl	5270 <z_sys_init_run_level>

	z_init_static_threads();
    53bc:	f000 fa2c 	bl	5818 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    53c0:	f7fb f808 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    53c4:	4a03      	ldr	r2, [pc, #12]	; (53d4 <bg_thread_main+0x30>)
    53c6:	7b13      	ldrb	r3, [r2, #12]
    53c8:	f023 0301 	bic.w	r3, r3, #1
    53cc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    53ce:	bd08      	pop	{r3, pc}
    53d0:	20001018 	.word	0x20001018
    53d4:	20000260 	.word	0x20000260

000053d8 <z_bss_zero>:
{
    53d8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    53da:	4803      	ldr	r0, [pc, #12]	; (53e8 <z_bss_zero+0x10>)
    53dc:	4a03      	ldr	r2, [pc, #12]	; (53ec <z_bss_zero+0x14>)
    53de:	2100      	movs	r1, #0
    53e0:	1a12      	subs	r2, r2, r0
    53e2:	f003 f9fe 	bl	87e2 <z_early_memset>
}
    53e6:	bd08      	pop	{r3, pc}
    53e8:	200001c0 	.word	0x200001c0
    53ec:	2000101c 	.word	0x2000101c

000053f0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    53f0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    53f2:	2300      	movs	r3, #0
{
    53f4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    53f6:	2201      	movs	r2, #1
    53f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    53fc:	4e13      	ldr	r6, [pc, #76]	; (544c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    53fe:	4d14      	ldr	r5, [pc, #80]	; (5450 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5400:	9301      	str	r3, [sp, #4]
    5402:	220f      	movs	r2, #15
    5404:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5408:	4912      	ldr	r1, [pc, #72]	; (5454 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    540a:	2318      	movs	r3, #24
    540c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5410:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5414:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5416:	f44f 70b0 	mov.w	r0, #352	; 0x160
    541a:	fb00 1104 	mla	r1, r0, r4, r1
    541e:	4b0e      	ldr	r3, [pc, #56]	; (5458 <z_init_cpu+0x68>)
    5420:	9500      	str	r5, [sp, #0]
    5422:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5426:	4630      	mov	r0, r6
    5428:	f000 f992 	bl	5750 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    542c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    542e:	4a0b      	ldr	r2, [pc, #44]	; (545c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5430:	60ee      	str	r6, [r5, #12]
    5432:	f023 0304 	bic.w	r3, r3, #4
    5436:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5438:	f44f 6302 	mov.w	r3, #2080	; 0x820
    543c:	fb04 3303 	mla	r3, r4, r3, r3
    5440:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    5442:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    5444:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5446:	b006      	add	sp, #24
    5448:	bd70      	pop	{r4, r5, r6, pc}
    544a:	bf00      	nop
    544c:	200001e0 	.word	0x200001e0
    5450:	200009e0 	.word	0x200009e0
    5454:	20001840 	.word	0x20001840
    5458:	00005975 	.word	0x00005975
    545c:	20001020 	.word	0x20001020

00005460 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5460:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5462:	4b2f      	ldr	r3, [pc, #188]	; (5520 <z_cstart+0xc0>)
    5464:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5466:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    546a:	4d2e      	ldr	r5, [pc, #184]	; (5524 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    546c:	4e2e      	ldr	r6, [pc, #184]	; (5528 <z_cstart+0xc8>)
    546e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5470:	4f2e      	ldr	r7, [pc, #184]	; (552c <z_cstart+0xcc>)
    5472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5476:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5478:	2400      	movs	r4, #0
    547a:	23e0      	movs	r3, #224	; 0xe0
    547c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5480:	77ec      	strb	r4, [r5, #31]
    5482:	762c      	strb	r4, [r5, #24]
    5484:	766c      	strb	r4, [r5, #25]
    5486:	76ac      	strb	r4, [r5, #26]
    5488:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    548c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    548e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5492:	626b      	str	r3, [r5, #36]	; 0x24
    5494:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5498:	f7fd fcdc 	bl	2e54 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    549c:	f7fd f83a 	bl	2514 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    54a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54a4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    54a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    54a8:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    54aa:	f7fd fe5d 	bl	3168 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    54ae:	f7fd fd73 	bl	2f98 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    54b2:	f7fc fa0b 	bl	18cc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    54b6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    54ba:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    54bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    54c0:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    54c4:	f002 f954 	bl	7770 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    54c8:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    54ca:	f003 f96f 	bl	87ac <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    54ce:	4620      	mov	r0, r4
    54d0:	f7ff fece 	bl	5270 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    54d4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    54d6:	4d16      	ldr	r5, [pc, #88]	; (5530 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    54d8:	f7ff feca 	bl	5270 <z_sys_init_run_level>
	z_sched_init();
    54dc:	f001 fb72 	bl	6bc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    54e0:	4b14      	ldr	r3, [pc, #80]	; (5534 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    54e2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    54e4:	9305      	str	r3, [sp, #20]
    54e6:	2301      	movs	r3, #1
    54e8:	4913      	ldr	r1, [pc, #76]	; (5538 <z_cstart+0xd8>)
    54ea:	9400      	str	r4, [sp, #0]
    54ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    54f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    54f4:	463b      	mov	r3, r7
    54f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    54fa:	4628      	mov	r0, r5
    54fc:	f000 f928 	bl	5750 <z_setup_new_thread>
    5500:	7b6a      	ldrb	r2, [r5, #13]
    5502:	4606      	mov	r6, r0
    5504:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    5508:	4628      	mov	r0, r5
    550a:	736a      	strb	r2, [r5, #13]
    550c:	f000 fde8 	bl	60e0 <z_ready_thread>
	z_init_cpu(0);
    5510:	4620      	mov	r0, r4
    5512:	f7ff ff6d 	bl	53f0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5516:	463a      	mov	r2, r7
    5518:	4631      	mov	r1, r6
    551a:	4628      	mov	r0, r5
    551c:	f7fd f95e 	bl	27dc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5520:	20001840 	.word	0x20001840
    5524:	e000ed00 	.word	0xe000ed00
    5528:	200009e0 	.word	0x200009e0
    552c:	000053a5 	.word	0x000053a5
    5530:	20000260 	.word	0x20000260
    5534:	0000a1a6 	.word	0x0000a1a6
    5538:	200019a0 	.word	0x200019a0

0000553c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    553e:	4c16      	ldr	r4, [pc, #88]	; (5598 <init_mem_slab_module+0x5c>)
    5540:	4d16      	ldr	r5, [pc, #88]	; (559c <init_mem_slab_module+0x60>)
    5542:	4e17      	ldr	r6, [pc, #92]	; (55a0 <init_mem_slab_module+0x64>)
    5544:	42ac      	cmp	r4, r5
    5546:	d90c      	bls.n	5562 <init_mem_slab_module+0x26>
    5548:	4916      	ldr	r1, [pc, #88]	; (55a4 <init_mem_slab_module+0x68>)
    554a:	4817      	ldr	r0, [pc, #92]	; (55a8 <init_mem_slab_module+0x6c>)
    554c:	233d      	movs	r3, #61	; 0x3d
    554e:	4632      	mov	r2, r6
    5550:	f002 fd9e 	bl	8090 <assert_print>
    5554:	4815      	ldr	r0, [pc, #84]	; (55ac <init_mem_slab_module+0x70>)
    5556:	f002 fd9b 	bl	8090 <assert_print>
    555a:	213d      	movs	r1, #61	; 0x3d
    555c:	4630      	mov	r0, r6
    555e:	f002 fd90 	bl	8082 <assert_post_action>
    5562:	42ac      	cmp	r4, r5
    5564:	d301      	bcc.n	556a <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5566:	2000      	movs	r0, #0
	return rc;
}
    5568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    556a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    556e:	ea42 0301 	orr.w	r3, r2, r1
    5572:	f013 0303 	ands.w	r3, r3, #3
    5576:	d10b      	bne.n	5590 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    5578:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    557a:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    557c:	4283      	cmp	r3, r0
    557e:	d101      	bne.n	5584 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5580:	3420      	adds	r4, #32
    5582:	e7df      	b.n	5544 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    5584:	69a7      	ldr	r7, [r4, #24]
    5586:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5588:	3301      	adds	r3, #1
		slab->free_list = p;
    558a:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    558c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    558e:	e7f5      	b.n	557c <init_mem_slab_module+0x40>
	return rc;
    5590:	f06f 0015 	mvn.w	r0, #21
    5594:	e7e8      	b.n	5568 <init_mem_slab_module+0x2c>
    5596:	bf00      	nop
    5598:	20000158 	.word	0x20000158
    559c:	20000158 	.word	0x20000158
    55a0:	0000a1ae 	.word	0x0000a1ae
    55a4:	0000a1d3 	.word	0x0000a1d3
    55a8:	00008f43 	.word	0x00008f43
    55ac:	0000a1f0 	.word	0x0000a1f0

000055b0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    55b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    55b4:	4604      	mov	r4, r0
    55b6:	460e      	mov	r6, r1
    55b8:	4690      	mov	r8, r2
    55ba:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    55bc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    55c0:	f04f 0320 	mov.w	r3, #32
    55c4:	f3ef 8911 	mrs	r9, BASEPRI
    55c8:	f383 8812 	msr	BASEPRI_MAX, r3
    55cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55d0:	4628      	mov	r0, r5
    55d2:	f000 f9a9 	bl	5928 <z_spin_lock_valid>
    55d6:	b968      	cbnz	r0, 55f4 <k_mem_slab_alloc+0x44>
    55d8:	4a24      	ldr	r2, [pc, #144]	; (566c <k_mem_slab_alloc+0xbc>)
    55da:	4925      	ldr	r1, [pc, #148]	; (5670 <k_mem_slab_alloc+0xc0>)
    55dc:	4825      	ldr	r0, [pc, #148]	; (5674 <k_mem_slab_alloc+0xc4>)
    55de:	238e      	movs	r3, #142	; 0x8e
    55e0:	f002 fd56 	bl	8090 <assert_print>
    55e4:	4824      	ldr	r0, [pc, #144]	; (5678 <k_mem_slab_alloc+0xc8>)
    55e6:	4629      	mov	r1, r5
    55e8:	f002 fd52 	bl	8090 <assert_print>
    55ec:	481f      	ldr	r0, [pc, #124]	; (566c <k_mem_slab_alloc+0xbc>)
    55ee:	218e      	movs	r1, #142	; 0x8e
    55f0:	f002 fd47 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    55f4:	4628      	mov	r0, r5
    55f6:	f000 f9b5 	bl	5964 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    55fa:	69a3      	ldr	r3, [r4, #24]
    55fc:	b1eb      	cbz	r3, 563a <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    55fe:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5600:	681b      	ldr	r3, [r3, #0]
    5602:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5604:	69e3      	ldr	r3, [r4, #28]
    5606:	3301      	adds	r3, #1
    5608:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    560a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    560c:	4628      	mov	r0, r5
    560e:	f000 f999 	bl	5944 <z_spin_unlock_valid>
    5612:	b968      	cbnz	r0, 5630 <k_mem_slab_alloc+0x80>
    5614:	4a15      	ldr	r2, [pc, #84]	; (566c <k_mem_slab_alloc+0xbc>)
    5616:	4919      	ldr	r1, [pc, #100]	; (567c <k_mem_slab_alloc+0xcc>)
    5618:	4816      	ldr	r0, [pc, #88]	; (5674 <k_mem_slab_alloc+0xc4>)
    561a:	23b9      	movs	r3, #185	; 0xb9
    561c:	f002 fd38 	bl	8090 <assert_print>
    5620:	4817      	ldr	r0, [pc, #92]	; (5680 <k_mem_slab_alloc+0xd0>)
    5622:	4629      	mov	r1, r5
    5624:	f002 fd34 	bl	8090 <assert_print>
    5628:	4810      	ldr	r0, [pc, #64]	; (566c <k_mem_slab_alloc+0xbc>)
    562a:	21b9      	movs	r1, #185	; 0xb9
    562c:	f002 fd29 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5630:	f389 8811 	msr	BASEPRI, r9
    5634:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5638:	e013      	b.n	5662 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    563a:	ea58 0207 	orrs.w	r2, r8, r7
    563e:	d103      	bne.n	5648 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5640:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5642:	f06f 040b 	mvn.w	r4, #11
    5646:	e7e1      	b.n	560c <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5648:	4622      	mov	r2, r4
    564a:	e9cd 8700 	strd	r8, r7, [sp]
    564e:	4649      	mov	r1, r9
    5650:	4628      	mov	r0, r5
    5652:	f001 f8b9 	bl	67c8 <z_pend_curr>
		if (result == 0) {
    5656:	4604      	mov	r4, r0
    5658:	b918      	cbnz	r0, 5662 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    565a:	4b0a      	ldr	r3, [pc, #40]	; (5684 <k_mem_slab_alloc+0xd4>)
    565c:	689b      	ldr	r3, [r3, #8]
    565e:	695b      	ldr	r3, [r3, #20]
    5660:	6033      	str	r3, [r6, #0]
}
    5662:	4620      	mov	r0, r4
    5664:	b003      	add	sp, #12
    5666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    566a:	bf00      	nop
    566c:	0000908d 	.word	0x0000908d
    5670:	000090e6 	.word	0x000090e6
    5674:	00008f43 	.word	0x00008f43
    5678:	000090fb 	.word	0x000090fb
    567c:	000090ba 	.word	0x000090ba
    5680:	000090d1 	.word	0x000090d1
    5684:	200009e0 	.word	0x200009e0

00005688 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    568c:	4604      	mov	r4, r0
    568e:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5690:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5694:	f04f 0320 	mov.w	r3, #32
    5698:	f3ef 8711 	mrs	r7, BASEPRI
    569c:	f383 8812 	msr	BASEPRI_MAX, r3
    56a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56a4:	4628      	mov	r0, r5
    56a6:	f000 f93f 	bl	5928 <z_spin_lock_valid>
    56aa:	b968      	cbnz	r0, 56c8 <k_mem_slab_free+0x40>
    56ac:	4a22      	ldr	r2, [pc, #136]	; (5738 <k_mem_slab_free+0xb0>)
    56ae:	4923      	ldr	r1, [pc, #140]	; (573c <k_mem_slab_free+0xb4>)
    56b0:	4823      	ldr	r0, [pc, #140]	; (5740 <k_mem_slab_free+0xb8>)
    56b2:	238e      	movs	r3, #142	; 0x8e
    56b4:	f002 fcec 	bl	8090 <assert_print>
    56b8:	4822      	ldr	r0, [pc, #136]	; (5744 <k_mem_slab_free+0xbc>)
    56ba:	4629      	mov	r1, r5
    56bc:	f002 fce8 	bl	8090 <assert_print>
    56c0:	481d      	ldr	r0, [pc, #116]	; (5738 <k_mem_slab_free+0xb0>)
    56c2:	218e      	movs	r1, #142	; 0x8e
    56c4:	f002 fcdd 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    56c8:	4628      	mov	r0, r5
    56ca:	f000 f94b 	bl	5964 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    56ce:	f8d4 8018 	ldr.w	r8, [r4, #24]
    56d2:	f1b8 0f00 	cmp.w	r8, #0
    56d6:	d10f      	bne.n	56f8 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    56d8:	4620      	mov	r0, r4
    56da:	f001 fa21 	bl	6b20 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    56de:	b158      	cbz	r0, 56f8 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    56e0:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    56e2:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    56e4:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    56e8:	f000 fcfa 	bl	60e0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    56ec:	4639      	mov	r1, r7
    56ee:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    56f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    56f4:	f000 bd3c 	b.w	6170 <z_reschedule>
	**(char ***) mem = slab->free_list;
    56f8:	6833      	ldr	r3, [r6, #0]
    56fa:	69a2      	ldr	r2, [r4, #24]
    56fc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    56fe:	6833      	ldr	r3, [r6, #0]
    5700:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5702:	69e3      	ldr	r3, [r4, #28]
    5704:	3b01      	subs	r3, #1
    5706:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5708:	4628      	mov	r0, r5
    570a:	f000 f91b 	bl	5944 <z_spin_unlock_valid>
    570e:	b968      	cbnz	r0, 572c <k_mem_slab_free+0xa4>
    5710:	4a09      	ldr	r2, [pc, #36]	; (5738 <k_mem_slab_free+0xb0>)
    5712:	490d      	ldr	r1, [pc, #52]	; (5748 <k_mem_slab_free+0xc0>)
    5714:	480a      	ldr	r0, [pc, #40]	; (5740 <k_mem_slab_free+0xb8>)
    5716:	23b9      	movs	r3, #185	; 0xb9
    5718:	f002 fcba 	bl	8090 <assert_print>
    571c:	480b      	ldr	r0, [pc, #44]	; (574c <k_mem_slab_free+0xc4>)
    571e:	4629      	mov	r1, r5
    5720:	f002 fcb6 	bl	8090 <assert_print>
    5724:	4804      	ldr	r0, [pc, #16]	; (5738 <k_mem_slab_free+0xb0>)
    5726:	21b9      	movs	r1, #185	; 0xb9
    5728:	f002 fcab 	bl	8082 <assert_post_action>
	__asm__ volatile(
    572c:	f387 8811 	msr	BASEPRI, r7
    5730:	f3bf 8f6f 	isb	sy
}
    5734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5738:	0000908d 	.word	0x0000908d
    573c:	000090e6 	.word	0x000090e6
    5740:	00008f43 	.word	0x00008f43
    5744:	000090fb 	.word	0x000090fb
    5748:	000090ba 	.word	0x000090ba
    574c:	000090d1 	.word	0x000090d1

00005750 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5754:	b085      	sub	sp, #20
    5756:	4604      	mov	r4, r0
    5758:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    575c:	f1b8 0f0f 	cmp.w	r8, #15
{
    5760:	460f      	mov	r7, r1
    5762:	4615      	mov	r5, r2
    5764:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5766:	d132      	bne.n	57ce <z_setup_new_thread+0x7e>
    5768:	4b25      	ldr	r3, [pc, #148]	; (5800 <z_setup_new_thread+0xb0>)
    576a:	4599      	cmp	r9, r3
    576c:	d133      	bne.n	57d6 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    576e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5772:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5776:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5778:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    577a:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    577c:	2304      	movs	r3, #4
    577e:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5780:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5784:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5788:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    578c:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    578e:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    5790:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5794:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    5798:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    579a:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    579c:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    579e:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57a2:	9302      	str	r3, [sp, #8]
    57a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    57a6:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    57a8:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    57ac:	9300      	str	r3, [sp, #0]
    57ae:	4642      	mov	r2, r8
    57b0:	464b      	mov	r3, r9
    57b2:	4639      	mov	r1, r7
    57b4:	4620      	mov	r0, r4
    57b6:	f7fc ffdf 	bl	2778 <arch_new_thread>
	if (!_current) {
    57ba:	4b12      	ldr	r3, [pc, #72]	; (5804 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    57bc:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    57be:	689b      	ldr	r3, [r3, #8]
    57c0:	b103      	cbz	r3, 57c4 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    57c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    57c4:	6723      	str	r3, [r4, #112]	; 0x70
}
    57c6:	4640      	mov	r0, r8
    57c8:	b005      	add	sp, #20
    57ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    57ce:	f108 0310 	add.w	r3, r8, #16
    57d2:	2b1e      	cmp	r3, #30
    57d4:	d9cb      	bls.n	576e <z_setup_new_thread+0x1e>
    57d6:	4a0c      	ldr	r2, [pc, #48]	; (5808 <z_setup_new_thread+0xb8>)
    57d8:	490c      	ldr	r1, [pc, #48]	; (580c <z_setup_new_thread+0xbc>)
    57da:	480d      	ldr	r0, [pc, #52]	; (5810 <z_setup_new_thread+0xc0>)
    57dc:	f240 13ff 	movw	r3, #511	; 0x1ff
    57e0:	f002 fc56 	bl	8090 <assert_print>
    57e4:	4641      	mov	r1, r8
    57e6:	480b      	ldr	r0, [pc, #44]	; (5814 <z_setup_new_thread+0xc4>)
    57e8:	f06f 030f 	mvn.w	r3, #15
    57ec:	220e      	movs	r2, #14
    57ee:	f002 fc4f 	bl	8090 <assert_print>
    57f2:	4805      	ldr	r0, [pc, #20]	; (5808 <z_setup_new_thread+0xb8>)
    57f4:	f240 11ff 	movw	r1, #511	; 0x1ff
    57f8:	f002 fc43 	bl	8082 <assert_post_action>
    57fc:	e7b7      	b.n	576e <z_setup_new_thread+0x1e>
    57fe:	bf00      	nop
    5800:	00005975 	.word	0x00005975
    5804:	200009e0 	.word	0x200009e0
    5808:	0000a20f 	.word	0x0000a20f
    580c:	0000a232 	.word	0x0000a232
    5810:	00008f43 	.word	0x00008f43
    5814:	0000a2b2 	.word	0x0000a2b2

00005818 <z_init_static_threads>:
{
    5818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    581c:	4c3b      	ldr	r4, [pc, #236]	; (590c <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    581e:	4d3c      	ldr	r5, [pc, #240]	; (5910 <z_init_static_threads+0xf8>)
    5820:	4f3c      	ldr	r7, [pc, #240]	; (5914 <z_init_static_threads+0xfc>)
{
    5822:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    5824:	42ac      	cmp	r4, r5
    5826:	4626      	mov	r6, r4
    5828:	d90e      	bls.n	5848 <z_init_static_threads+0x30>
    582a:	493b      	ldr	r1, [pc, #236]	; (5918 <z_init_static_threads+0x100>)
    582c:	483b      	ldr	r0, [pc, #236]	; (591c <z_init_static_threads+0x104>)
    582e:	f240 23d5 	movw	r3, #725	; 0x2d5
    5832:	463a      	mov	r2, r7
    5834:	f002 fc2c 	bl	8090 <assert_print>
    5838:	4839      	ldr	r0, [pc, #228]	; (5920 <z_init_static_threads+0x108>)
    583a:	f002 fc29 	bl	8090 <assert_print>
    583e:	f240 21d5 	movw	r1, #725	; 0x2d5
    5842:	4638      	mov	r0, r7
    5844:	f002 fc1d 	bl	8082 <assert_post_action>
    5848:	42ae      	cmp	r6, r5
    584a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    584e:	d31f      	bcc.n	5890 <z_init_static_threads+0x78>
	k_sched_lock();
    5850:	f000 fd26 	bl	62a0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5854:	4c2d      	ldr	r4, [pc, #180]	; (590c <z_init_static_threads+0xf4>)
    5856:	4e2f      	ldr	r6, [pc, #188]	; (5914 <z_init_static_threads+0xfc>)
    5858:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5918 <z_init_static_threads+0x100>
    585c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 591c <z_init_static_threads+0x104>
    5860:	42ac      	cmp	r4, r5
    5862:	d90e      	bls.n	5882 <z_init_static_threads+0x6a>
    5864:	4641      	mov	r1, r8
    5866:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    586a:	4632      	mov	r2, r6
    586c:	4648      	mov	r0, r9
    586e:	f002 fc0f 	bl	8090 <assert_print>
    5872:	482b      	ldr	r0, [pc, #172]	; (5920 <z_init_static_threads+0x108>)
    5874:	f002 fc0c 	bl	8090 <assert_print>
    5878:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    587c:	4630      	mov	r0, r6
    587e:	f002 fc00 	bl	8082 <assert_post_action>
    5882:	42ac      	cmp	r4, r5
    5884:	d320      	bcc.n	58c8 <z_init_static_threads+0xb0>
}
    5886:	b007      	add	sp, #28
    5888:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    588c:	f000 bd7c 	b.w	6388 <k_sched_unlock>
		z_setup_new_thread(
    5890:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5894:	9305      	str	r3, [sp, #20]
    5896:	f854 3c10 	ldr.w	r3, [r4, #-16]
    589a:	9304      	str	r3, [sp, #16]
    589c:	f854 3c14 	ldr.w	r3, [r4, #-20]
    58a0:	9303      	str	r3, [sp, #12]
    58a2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    58a6:	9302      	str	r3, [sp, #8]
    58a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    58ac:	9301      	str	r3, [sp, #4]
    58ae:	f854 3c20 	ldr.w	r3, [r4, #-32]
    58b2:	9300      	str	r3, [sp, #0]
    58b4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    58b8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    58bc:	f7ff ff48 	bl	5750 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    58c0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    58c4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    58c6:	e7ad      	b.n	5824 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    58c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58ca:	1c5a      	adds	r2, r3, #1
    58cc:	d00f      	beq.n	58ee <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    58ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    58d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    58d6:	f240 30e7 	movw	r0, #999	; 0x3e7
    58da:	2100      	movs	r1, #0
    58dc:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    58e0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    58e4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    58e6:	d104      	bne.n	58f2 <z_init_static_threads+0xda>
	z_sched_start(thread);
    58e8:	4638      	mov	r0, r7
    58ea:	f000 fc85 	bl	61f8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    58ee:	3430      	adds	r4, #48	; 0x30
    58f0:	e7b6      	b.n	5860 <z_init_static_threads+0x48>
    58f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58f6:	2300      	movs	r3, #0
    58f8:	f7fa fc02 	bl	100 <__aeabi_uldivmod>
    58fc:	4602      	mov	r2, r0
    58fe:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5900:	f107 0018 	add.w	r0, r7, #24
    5904:	4907      	ldr	r1, [pc, #28]	; (5924 <z_init_static_threads+0x10c>)
    5906:	f001 fc07 	bl	7118 <z_add_timeout>
    590a:	e7f0      	b.n	58ee <z_init_static_threads+0xd6>
    590c:	20000158 	.word	0x20000158
    5910:	20000158 	.word	0x20000158
    5914:	0000a20f 	.word	0x0000a20f
    5918:	0000a2e3 	.word	0x0000a2e3
    591c:	00008f43 	.word	0x00008f43
    5920:	0000a1f0 	.word	0x0000a1f0
    5924:	00006a6d 	.word	0x00006a6d

00005928 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5928:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    592a:	b138      	cbz	r0, 593c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    592c:	4b04      	ldr	r3, [pc, #16]	; (5940 <z_spin_lock_valid+0x18>)
    592e:	7d1b      	ldrb	r3, [r3, #20]
    5930:	f000 0003 	and.w	r0, r0, #3
    5934:	1ac0      	subs	r0, r0, r3
    5936:	bf18      	it	ne
    5938:	2001      	movne	r0, #1
    593a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    593c:	2001      	movs	r0, #1
}
    593e:	4770      	bx	lr
    5940:	200009e0 	.word	0x200009e0

00005944 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5944:	4a06      	ldr	r2, [pc, #24]	; (5960 <z_spin_unlock_valid+0x1c>)
    5946:	7d11      	ldrb	r1, [r2, #20]
    5948:	6892      	ldr	r2, [r2, #8]
    594a:	430a      	orrs	r2, r1
    594c:	6801      	ldr	r1, [r0, #0]
{
    594e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5950:	4291      	cmp	r1, r2
    5952:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    5956:	bf04      	itt	eq
    5958:	6018      	streq	r0, [r3, #0]
	return true;
    595a:	2001      	moveq	r0, #1
}
    595c:	4770      	bx	lr
    595e:	bf00      	nop
    5960:	200009e0 	.word	0x200009e0

00005964 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5964:	4b02      	ldr	r3, [pc, #8]	; (5970 <z_spin_lock_set_owner+0xc>)
    5966:	7d1a      	ldrb	r2, [r3, #20]
    5968:	689b      	ldr	r3, [r3, #8]
    596a:	4313      	orrs	r3, r2
    596c:	6003      	str	r3, [r0, #0]
}
    596e:	4770      	bx	lr
    5970:	200009e0 	.word	0x200009e0

00005974 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5974:	4c13      	ldr	r4, [pc, #76]	; (59c4 <idle+0x50>)
{
    5976:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5978:	68a3      	ldr	r3, [r4, #8]
    597a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    597e:	2b00      	cmp	r3, #0
    5980:	da09      	bge.n	5996 <idle+0x22>
    5982:	4911      	ldr	r1, [pc, #68]	; (59c8 <idle+0x54>)
    5984:	4811      	ldr	r0, [pc, #68]	; (59cc <idle+0x58>)
    5986:	4a12      	ldr	r2, [pc, #72]	; (59d0 <idle+0x5c>)
    5988:	2327      	movs	r3, #39	; 0x27
    598a:	f002 fb81 	bl	8090 <assert_print>
    598e:	4810      	ldr	r0, [pc, #64]	; (59d0 <idle+0x5c>)
    5990:	2127      	movs	r1, #39	; 0x27
    5992:	f002 fb76 	bl	8082 <assert_post_action>
	return !z_sys_post_kernel;
    5996:	4d0f      	ldr	r5, [pc, #60]	; (59d4 <idle+0x60>)
	__asm__ volatile(
    5998:	f04f 0220 	mov.w	r2, #32
    599c:	f3ef 8311 	mrs	r3, BASEPRI
    59a0:	f382 8812 	msr	BASEPRI_MAX, r2
    59a4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    59a8:	f001 fcce 	bl	7348 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    59ac:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    59ae:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    59b0:	b913      	cbnz	r3, 59b8 <idle+0x44>
	arch_cpu_idle();
    59b2:	f7fc fdb5 	bl	2520 <arch_cpu_idle>
}
    59b6:	e7ef      	b.n	5998 <idle+0x24>
    59b8:	f7fc fc0e 	bl	21d8 <pm_system_suspend>
    59bc:	2800      	cmp	r0, #0
    59be:	d1eb      	bne.n	5998 <idle+0x24>
    59c0:	e7f7      	b.n	59b2 <idle+0x3e>
    59c2:	bf00      	nop
    59c4:	200009e0 	.word	0x200009e0
    59c8:	0000a331 	.word	0x0000a331
    59cc:	00008f43 	.word	0x00008f43
    59d0:	0000a310 	.word	0x0000a310
    59d4:	20001018 	.word	0x20001018

000059d8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    59d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    59dc:	4604      	mov	r4, r0
    59de:	4617      	mov	r7, r2
    59e0:	461e      	mov	r6, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    59e2:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    59e6:	b163      	cbz	r3, 5a02 <z_impl_k_mutex_lock+0x2a>
    59e8:	496d      	ldr	r1, [pc, #436]	; (5ba0 <z_impl_k_mutex_lock+0x1c8>)
    59ea:	4a6e      	ldr	r2, [pc, #440]	; (5ba4 <z_impl_k_mutex_lock+0x1cc>)
    59ec:	486e      	ldr	r0, [pc, #440]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    59ee:	2365      	movs	r3, #101	; 0x65
    59f0:	f002 fb4e 	bl	8090 <assert_print>
    59f4:	486d      	ldr	r0, [pc, #436]	; (5bac <z_impl_k_mutex_lock+0x1d4>)
    59f6:	f002 fb4b 	bl	8090 <assert_print>
    59fa:	486a      	ldr	r0, [pc, #424]	; (5ba4 <z_impl_k_mutex_lock+0x1cc>)
    59fc:	2165      	movs	r1, #101	; 0x65
    59fe:	f002 fb40 	bl	8082 <assert_post_action>
    5a02:	f04f 0320 	mov.w	r3, #32
    5a06:	f3ef 8811 	mrs	r8, BASEPRI
    5a0a:	f383 8812 	msr	BASEPRI_MAX, r3
    5a0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a12:	4867      	ldr	r0, [pc, #412]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5a14:	f7ff ff88 	bl	5928 <z_spin_lock_valid>
    5a18:	b968      	cbnz	r0, 5a36 <z_impl_k_mutex_lock+0x5e>
    5a1a:	4a66      	ldr	r2, [pc, #408]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5a1c:	4966      	ldr	r1, [pc, #408]	; (5bb8 <z_impl_k_mutex_lock+0x1e0>)
    5a1e:	4862      	ldr	r0, [pc, #392]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    5a20:	238e      	movs	r3, #142	; 0x8e
    5a22:	f002 fb35 	bl	8090 <assert_print>
    5a26:	4962      	ldr	r1, [pc, #392]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5a28:	4864      	ldr	r0, [pc, #400]	; (5bbc <z_impl_k_mutex_lock+0x1e4>)
    5a2a:	f002 fb31 	bl	8090 <assert_print>
    5a2e:	4861      	ldr	r0, [pc, #388]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5a30:	218e      	movs	r1, #142	; 0x8e
    5a32:	f002 fb26 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    5a36:	485e      	ldr	r0, [pc, #376]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5a38:	f7ff ff94 	bl	5964 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5a3c:	68e3      	ldr	r3, [r4, #12]
    5a3e:	4a60      	ldr	r2, [pc, #384]	; (5bc0 <z_impl_k_mutex_lock+0x1e8>)
    5a40:	b30b      	cbz	r3, 5a86 <z_impl_k_mutex_lock+0xae>
    5a42:	68a0      	ldr	r0, [r4, #8]
    5a44:	6891      	ldr	r1, [r2, #8]
    5a46:	4288      	cmp	r0, r1
    5a48:	d03d      	beq.n	5ac6 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5a4a:	ea57 0306 	orrs.w	r3, r7, r6
    5a4e:	d13c      	bne.n	5aca <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5a50:	4857      	ldr	r0, [pc, #348]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5a52:	f7ff ff77 	bl	5944 <z_spin_unlock_valid>
    5a56:	b968      	cbnz	r0, 5a74 <z_impl_k_mutex_lock+0x9c>
    5a58:	4a56      	ldr	r2, [pc, #344]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5a5a:	495a      	ldr	r1, [pc, #360]	; (5bc4 <z_impl_k_mutex_lock+0x1ec>)
    5a5c:	4852      	ldr	r0, [pc, #328]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    5a5e:	23b9      	movs	r3, #185	; 0xb9
    5a60:	f002 fb16 	bl	8090 <assert_print>
    5a64:	4952      	ldr	r1, [pc, #328]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5a66:	4858      	ldr	r0, [pc, #352]	; (5bc8 <z_impl_k_mutex_lock+0x1f0>)
    5a68:	f002 fb12 	bl	8090 <assert_print>
    5a6c:	4851      	ldr	r0, [pc, #324]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5a6e:	21b9      	movs	r1, #185	; 0xb9
    5a70:	f002 fb07 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5a74:	f388 8811 	msr	BASEPRI, r8
    5a78:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5a7c:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5a80:	b002      	add	sp, #8
    5a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5a86:	6891      	ldr	r1, [r2, #8]
    5a88:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5a8c:	4848      	ldr	r0, [pc, #288]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5a8e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5a90:	3301      	adds	r3, #1
    5a92:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5a94:	6893      	ldr	r3, [r2, #8]
    5a96:	60a3      	str	r3, [r4, #8]
    5a98:	f7ff ff54 	bl	5944 <z_spin_unlock_valid>
    5a9c:	b968      	cbnz	r0, 5aba <z_impl_k_mutex_lock+0xe2>
    5a9e:	4a45      	ldr	r2, [pc, #276]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5aa0:	4948      	ldr	r1, [pc, #288]	; (5bc4 <z_impl_k_mutex_lock+0x1ec>)
    5aa2:	4841      	ldr	r0, [pc, #260]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    5aa4:	23b9      	movs	r3, #185	; 0xb9
    5aa6:	f002 faf3 	bl	8090 <assert_print>
    5aaa:	4941      	ldr	r1, [pc, #260]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5aac:	4846      	ldr	r0, [pc, #280]	; (5bc8 <z_impl_k_mutex_lock+0x1f0>)
    5aae:	f002 faef 	bl	8090 <assert_print>
    5ab2:	4840      	ldr	r0, [pc, #256]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5ab4:	21b9      	movs	r1, #185	; 0xb9
    5ab6:	f002 fae4 	bl	8082 <assert_post_action>
    5aba:	f388 8811 	msr	BASEPRI, r8
    5abe:	f3bf 8f6f 	isb	sy
		return 0;
    5ac2:	2000      	movs	r0, #0
    5ac4:	e7dc      	b.n	5a80 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    5ac6:	6921      	ldr	r1, [r4, #16]
    5ac8:	e7e0      	b.n	5a8c <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5aca:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5ace:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5ad2:	4299      	cmp	r1, r3
    5ad4:	bfa8      	it	ge
    5ad6:	4619      	movge	r1, r3
    5ad8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5adc:	4291      	cmp	r1, r2
    5ade:	bfb8      	it	lt
    5ae0:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5ae2:	4299      	cmp	r1, r3
    5ae4:	da53      	bge.n	5b8e <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    5ae6:	f002 feab 	bl	8840 <adjust_owner_prio.isra.0>
    5aea:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5aec:	e9cd 7600 	strd	r7, r6, [sp]
    5af0:	482f      	ldr	r0, [pc, #188]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5af2:	4622      	mov	r2, r4
    5af4:	4641      	mov	r1, r8
    5af6:	f000 fe67 	bl	67c8 <z_pend_curr>
	if (got_mutex == 0) {
    5afa:	2800      	cmp	r0, #0
    5afc:	d0e1      	beq.n	5ac2 <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    5afe:	f04f 0320 	mov.w	r3, #32
    5b02:	f3ef 8611 	mrs	r6, BASEPRI
    5b06:	f383 8812 	msr	BASEPRI_MAX, r3
    5b0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b0e:	4828      	ldr	r0, [pc, #160]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b10:	f7ff ff0a 	bl	5928 <z_spin_lock_valid>
    5b14:	b968      	cbnz	r0, 5b32 <z_impl_k_mutex_lock+0x15a>
    5b16:	4a27      	ldr	r2, [pc, #156]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5b18:	4927      	ldr	r1, [pc, #156]	; (5bb8 <z_impl_k_mutex_lock+0x1e0>)
    5b1a:	4823      	ldr	r0, [pc, #140]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    5b1c:	238e      	movs	r3, #142	; 0x8e
    5b1e:	f002 fab7 	bl	8090 <assert_print>
    5b22:	4923      	ldr	r1, [pc, #140]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b24:	4825      	ldr	r0, [pc, #148]	; (5bbc <z_impl_k_mutex_lock+0x1e4>)
    5b26:	f002 fab3 	bl	8090 <assert_print>
    5b2a:	4822      	ldr	r0, [pc, #136]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5b2c:	218e      	movs	r1, #142	; 0x8e
    5b2e:	f002 faa8 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    5b32:	481f      	ldr	r0, [pc, #124]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b34:	f7ff ff16 	bl	5964 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5b38:	6823      	ldr	r3, [r4, #0]
    5b3a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b3c:	42a3      	cmp	r3, r4
    5b3e:	d00a      	beq.n	5b56 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5b40:	b14b      	cbz	r3, 5b56 <z_impl_k_mutex_lock+0x17e>
    5b42:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5b46:	4299      	cmp	r1, r3
    5b48:	bfa8      	it	ge
    5b4a:	4619      	movge	r1, r3
    5b4c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5b50:	4299      	cmp	r1, r3
    5b52:	bfb8      	it	lt
    5b54:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5b56:	68a0      	ldr	r0, [r4, #8]
    5b58:	f002 fe72 	bl	8840 <adjust_owner_prio.isra.0>
    5b5c:	b9c8      	cbnz	r0, 5b92 <z_impl_k_mutex_lock+0x1ba>
    5b5e:	b9c5      	cbnz	r5, 5b92 <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5b60:	4813      	ldr	r0, [pc, #76]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b62:	f7ff feef 	bl	5944 <z_spin_unlock_valid>
    5b66:	b968      	cbnz	r0, 5b84 <z_impl_k_mutex_lock+0x1ac>
    5b68:	4a12      	ldr	r2, [pc, #72]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5b6a:	4916      	ldr	r1, [pc, #88]	; (5bc4 <z_impl_k_mutex_lock+0x1ec>)
    5b6c:	480e      	ldr	r0, [pc, #56]	; (5ba8 <z_impl_k_mutex_lock+0x1d0>)
    5b6e:	23b9      	movs	r3, #185	; 0xb9
    5b70:	f002 fa8e 	bl	8090 <assert_print>
    5b74:	490e      	ldr	r1, [pc, #56]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b76:	4814      	ldr	r0, [pc, #80]	; (5bc8 <z_impl_k_mutex_lock+0x1f0>)
    5b78:	f002 fa8a 	bl	8090 <assert_print>
    5b7c:	480d      	ldr	r0, [pc, #52]	; (5bb4 <z_impl_k_mutex_lock+0x1dc>)
    5b7e:	21b9      	movs	r1, #185	; 0xb9
    5b80:	f002 fa7f 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5b84:	f386 8811 	msr	BASEPRI, r6
    5b88:	f3bf 8f6f 	isb	sy
    5b8c:	e005      	b.n	5b9a <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    5b8e:	2500      	movs	r5, #0
    5b90:	e7ac      	b.n	5aec <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    5b92:	4807      	ldr	r0, [pc, #28]	; (5bb0 <z_impl_k_mutex_lock+0x1d8>)
    5b94:	4631      	mov	r1, r6
    5b96:	f000 faeb 	bl	6170 <z_reschedule>
	return -EAGAIN;
    5b9a:	f06f 000a 	mvn.w	r0, #10
    5b9e:	e76f      	b.n	5a80 <z_impl_k_mutex_lock+0xa8>
    5ba0:	0000a37b 	.word	0x0000a37b
    5ba4:	0000a359 	.word	0x0000a359
    5ba8:	00008f43 	.word	0x00008f43
    5bac:	0000a38d 	.word	0x0000a38d
    5bb0:	20000a08 	.word	0x20000a08
    5bb4:	0000908d 	.word	0x0000908d
    5bb8:	000090e6 	.word	0x000090e6
    5bbc:	000090fb 	.word	0x000090fb
    5bc0:	200009e0 	.word	0x200009e0
    5bc4:	000090ba 	.word	0x000090ba
    5bc8:	000090d1 	.word	0x000090d1

00005bcc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5bcc:	b538      	push	{r3, r4, r5, lr}
    5bce:	4604      	mov	r4, r0
    5bd0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5bd4:	b163      	cbz	r3, 5bf0 <z_impl_k_mutex_unlock+0x24>
    5bd6:	4950      	ldr	r1, [pc, #320]	; (5d18 <z_impl_k_mutex_unlock+0x14c>)
    5bd8:	4a50      	ldr	r2, [pc, #320]	; (5d1c <z_impl_k_mutex_unlock+0x150>)
    5bda:	4851      	ldr	r0, [pc, #324]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5bdc:	23c7      	movs	r3, #199	; 0xc7
    5bde:	f002 fa57 	bl	8090 <assert_print>
    5be2:	4850      	ldr	r0, [pc, #320]	; (5d24 <z_impl_k_mutex_unlock+0x158>)
    5be4:	f002 fa54 	bl	8090 <assert_print>
    5be8:	484c      	ldr	r0, [pc, #304]	; (5d1c <z_impl_k_mutex_unlock+0x150>)
    5bea:	21c7      	movs	r1, #199	; 0xc7
    5bec:	f002 fa49 	bl	8082 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5bf0:	68a3      	ldr	r3, [r4, #8]
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	f000 8089 	beq.w	5d0a <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5bf8:	4d4b      	ldr	r5, [pc, #300]	; (5d28 <z_impl_k_mutex_unlock+0x15c>)
    5bfa:	68aa      	ldr	r2, [r5, #8]
    5bfc:	4293      	cmp	r3, r2
    5bfe:	f040 8087 	bne.w	5d10 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    5c02:	68e3      	ldr	r3, [r4, #12]
    5c04:	b94b      	cbnz	r3, 5c1a <z_impl_k_mutex_unlock+0x4e>
    5c06:	4949      	ldr	r1, [pc, #292]	; (5d2c <z_impl_k_mutex_unlock+0x160>)
    5c08:	4845      	ldr	r0, [pc, #276]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5c0a:	4a44      	ldr	r2, [pc, #272]	; (5d1c <z_impl_k_mutex_unlock+0x150>)
    5c0c:	23df      	movs	r3, #223	; 0xdf
    5c0e:	f002 fa3f 	bl	8090 <assert_print>
    5c12:	4842      	ldr	r0, [pc, #264]	; (5d1c <z_impl_k_mutex_unlock+0x150>)
    5c14:	21df      	movs	r1, #223	; 0xdf
    5c16:	f002 fa34 	bl	8082 <assert_post_action>
    5c1a:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5c1e:	b163      	cbz	r3, 5c3a <z_impl_k_mutex_unlock+0x6e>
    5c20:	493d      	ldr	r1, [pc, #244]	; (5d18 <z_impl_k_mutex_unlock+0x14c>)
    5c22:	4a43      	ldr	r2, [pc, #268]	; (5d30 <z_impl_k_mutex_unlock+0x164>)
    5c24:	483e      	ldr	r0, [pc, #248]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5c26:	23fd      	movs	r3, #253	; 0xfd
    5c28:	f002 fa32 	bl	8090 <assert_print>
    5c2c:	4841      	ldr	r0, [pc, #260]	; (5d34 <z_impl_k_mutex_unlock+0x168>)
    5c2e:	f002 fa2f 	bl	8090 <assert_print>
    5c32:	483f      	ldr	r0, [pc, #252]	; (5d30 <z_impl_k_mutex_unlock+0x164>)
    5c34:	21fd      	movs	r1, #253	; 0xfd
    5c36:	f002 fa24 	bl	8082 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5c3a:	68ab      	ldr	r3, [r5, #8]
    5c3c:	7bdb      	ldrb	r3, [r3, #15]
    5c3e:	2b01      	cmp	r3, #1
    5c40:	d10c      	bne.n	5c5c <z_impl_k_mutex_unlock+0x90>
    5c42:	493d      	ldr	r1, [pc, #244]	; (5d38 <z_impl_k_mutex_unlock+0x16c>)
    5c44:	4a3a      	ldr	r2, [pc, #232]	; (5d30 <z_impl_k_mutex_unlock+0x164>)
    5c46:	4836      	ldr	r0, [pc, #216]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5c48:	23fe      	movs	r3, #254	; 0xfe
    5c4a:	f002 fa21 	bl	8090 <assert_print>
    5c4e:	4839      	ldr	r0, [pc, #228]	; (5d34 <z_impl_k_mutex_unlock+0x168>)
    5c50:	f002 fa1e 	bl	8090 <assert_print>
    5c54:	4836      	ldr	r0, [pc, #216]	; (5d30 <z_impl_k_mutex_unlock+0x164>)
    5c56:	21fe      	movs	r1, #254	; 0xfe
    5c58:	f002 fa13 	bl	8082 <assert_post_action>

	--_current->base.sched_locked;
    5c5c:	68aa      	ldr	r2, [r5, #8]
    5c5e:	7bd3      	ldrb	r3, [r2, #15]
    5c60:	3b01      	subs	r3, #1
    5c62:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5c64:	68e3      	ldr	r3, [r4, #12]
    5c66:	2b01      	cmp	r3, #1
    5c68:	d905      	bls.n	5c76 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    5c6a:	3b01      	subs	r3, #1
    5c6c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5c6e:	f000 fb8b 	bl	6388 <k_sched_unlock>

	return 0;
    5c72:	2000      	movs	r0, #0
}
    5c74:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5c76:	f04f 0320 	mov.w	r3, #32
    5c7a:	f3ef 8511 	mrs	r5, BASEPRI
    5c7e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c86:	482d      	ldr	r0, [pc, #180]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5c88:	f7ff fe4e 	bl	5928 <z_spin_lock_valid>
    5c8c:	b968      	cbnz	r0, 5caa <z_impl_k_mutex_unlock+0xde>
    5c8e:	4a2c      	ldr	r2, [pc, #176]	; (5d40 <z_impl_k_mutex_unlock+0x174>)
    5c90:	492c      	ldr	r1, [pc, #176]	; (5d44 <z_impl_k_mutex_unlock+0x178>)
    5c92:	4823      	ldr	r0, [pc, #140]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5c94:	238e      	movs	r3, #142	; 0x8e
    5c96:	f002 f9fb 	bl	8090 <assert_print>
    5c9a:	4928      	ldr	r1, [pc, #160]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5c9c:	482a      	ldr	r0, [pc, #168]	; (5d48 <z_impl_k_mutex_unlock+0x17c>)
    5c9e:	f002 f9f7 	bl	8090 <assert_print>
    5ca2:	4827      	ldr	r0, [pc, #156]	; (5d40 <z_impl_k_mutex_unlock+0x174>)
    5ca4:	218e      	movs	r1, #142	; 0x8e
    5ca6:	f002 f9ec 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    5caa:	4824      	ldr	r0, [pc, #144]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5cac:	f7ff fe5a 	bl	5964 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5cb0:	6921      	ldr	r1, [r4, #16]
    5cb2:	68a0      	ldr	r0, [r4, #8]
    5cb4:	f002 fdc4 	bl	8840 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5cb8:	4620      	mov	r0, r4
    5cba:	f000 ff31 	bl	6b20 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5cbe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5cc0:	b158      	cbz	r0, 5cda <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    5cc2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5cc6:	6122      	str	r2, [r4, #16]
    5cc8:	2200      	movs	r2, #0
    5cca:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5ccc:	f000 fa08 	bl	60e0 <z_ready_thread>
		z_reschedule(&lock, key);
    5cd0:	481a      	ldr	r0, [pc, #104]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5cd2:	4629      	mov	r1, r5
    5cd4:	f000 fa4c 	bl	6170 <z_reschedule>
    5cd8:	e7c9      	b.n	5c6e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    5cda:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cdc:	4817      	ldr	r0, [pc, #92]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5cde:	f7ff fe31 	bl	5944 <z_spin_unlock_valid>
    5ce2:	b968      	cbnz	r0, 5d00 <z_impl_k_mutex_unlock+0x134>
    5ce4:	4a16      	ldr	r2, [pc, #88]	; (5d40 <z_impl_k_mutex_unlock+0x174>)
    5ce6:	4919      	ldr	r1, [pc, #100]	; (5d4c <z_impl_k_mutex_unlock+0x180>)
    5ce8:	480d      	ldr	r0, [pc, #52]	; (5d20 <z_impl_k_mutex_unlock+0x154>)
    5cea:	23b9      	movs	r3, #185	; 0xb9
    5cec:	f002 f9d0 	bl	8090 <assert_print>
    5cf0:	4912      	ldr	r1, [pc, #72]	; (5d3c <z_impl_k_mutex_unlock+0x170>)
    5cf2:	4817      	ldr	r0, [pc, #92]	; (5d50 <z_impl_k_mutex_unlock+0x184>)
    5cf4:	f002 f9cc 	bl	8090 <assert_print>
    5cf8:	4811      	ldr	r0, [pc, #68]	; (5d40 <z_impl_k_mutex_unlock+0x174>)
    5cfa:	21b9      	movs	r1, #185	; 0xb9
    5cfc:	f002 f9c1 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5d00:	f385 8811 	msr	BASEPRI, r5
    5d04:	f3bf 8f6f 	isb	sy
    5d08:	e7b1      	b.n	5c6e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    5d0a:	f06f 0015 	mvn.w	r0, #21
    5d0e:	e7b1      	b.n	5c74 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    5d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5d14:	e7ae      	b.n	5c74 <z_impl_k_mutex_unlock+0xa8>
    5d16:	bf00      	nop
    5d18:	0000a37b 	.word	0x0000a37b
    5d1c:	0000a359 	.word	0x0000a359
    5d20:	00008f43 	.word	0x00008f43
    5d24:	0000a38d 	.word	0x0000a38d
    5d28:	200009e0 	.word	0x200009e0
    5d2c:	0000a3b2 	.word	0x0000a3b2
    5d30:	0000a3c9 	.word	0x0000a3c9
    5d34:	0000a3f4 	.word	0x0000a3f4
    5d38:	0000a3f7 	.word	0x0000a3f7
    5d3c:	20000a08 	.word	0x20000a08
    5d40:	0000908d 	.word	0x0000908d
    5d44:	000090e6 	.word	0x000090e6
    5d48:	000090fb 	.word	0x000090fb
    5d4c:	000090ba 	.word	0x000090ba
    5d50:	000090d1 	.word	0x000090d1

00005d54 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5d54:	b538      	push	{r3, r4, r5, lr}
    5d56:	4604      	mov	r4, r0
	__asm__ volatile(
    5d58:	f04f 0320 	mov.w	r3, #32
    5d5c:	f3ef 8511 	mrs	r5, BASEPRI
    5d60:	f383 8812 	msr	BASEPRI_MAX, r3
    5d64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d68:	4814      	ldr	r0, [pc, #80]	; (5dbc <z_impl_k_sem_give+0x68>)
    5d6a:	f7ff fddd 	bl	5928 <z_spin_lock_valid>
    5d6e:	b968      	cbnz	r0, 5d8c <z_impl_k_sem_give+0x38>
    5d70:	4a13      	ldr	r2, [pc, #76]	; (5dc0 <z_impl_k_sem_give+0x6c>)
    5d72:	4914      	ldr	r1, [pc, #80]	; (5dc4 <z_impl_k_sem_give+0x70>)
    5d74:	4814      	ldr	r0, [pc, #80]	; (5dc8 <z_impl_k_sem_give+0x74>)
    5d76:	238e      	movs	r3, #142	; 0x8e
    5d78:	f002 f98a 	bl	8090 <assert_print>
    5d7c:	490f      	ldr	r1, [pc, #60]	; (5dbc <z_impl_k_sem_give+0x68>)
    5d7e:	4813      	ldr	r0, [pc, #76]	; (5dcc <z_impl_k_sem_give+0x78>)
    5d80:	f002 f986 	bl	8090 <assert_print>
    5d84:	480e      	ldr	r0, [pc, #56]	; (5dc0 <z_impl_k_sem_give+0x6c>)
    5d86:	218e      	movs	r1, #142	; 0x8e
    5d88:	f002 f97b 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d8c:	480b      	ldr	r0, [pc, #44]	; (5dbc <z_impl_k_sem_give+0x68>)
    5d8e:	f7ff fde9 	bl	5964 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5d92:	4620      	mov	r0, r4
    5d94:	f000 fec4 	bl	6b20 <z_unpend_first_thread>

	if (thread != NULL) {
    5d98:	b148      	cbz	r0, 5dae <z_impl_k_sem_give+0x5a>
    5d9a:	2200      	movs	r2, #0
    5d9c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5d9e:	f000 f99f 	bl	60e0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5da2:	4629      	mov	r1, r5
    5da4:	4805      	ldr	r0, [pc, #20]	; (5dbc <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5daa:	f000 b9e1 	b.w	6170 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5dae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5db2:	429a      	cmp	r2, r3
    5db4:	bf18      	it	ne
    5db6:	3301      	addne	r3, #1
    5db8:	60a3      	str	r3, [r4, #8]
}
    5dba:	e7f2      	b.n	5da2 <z_impl_k_sem_give+0x4e>
    5dbc:	20000a0c 	.word	0x20000a0c
    5dc0:	0000908d 	.word	0x0000908d
    5dc4:	000090e6 	.word	0x000090e6
    5dc8:	00008f43 	.word	0x00008f43
    5dcc:	000090fb 	.word	0x000090fb

00005dd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5dd2:	4604      	mov	r4, r0
    5dd4:	4617      	mov	r7, r2
    5dd6:	461d      	mov	r5, r3
    5dd8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5ddc:	b17b      	cbz	r3, 5dfe <z_impl_k_sem_take+0x2e>
    5dde:	ea52 0305 	orrs.w	r3, r2, r5
    5de2:	d00c      	beq.n	5dfe <z_impl_k_sem_take+0x2e>
    5de4:	4935      	ldr	r1, [pc, #212]	; (5ebc <z_impl_k_sem_take+0xec>)
    5de6:	4a36      	ldr	r2, [pc, #216]	; (5ec0 <z_impl_k_sem_take+0xf0>)
    5de8:	4836      	ldr	r0, [pc, #216]	; (5ec4 <z_impl_k_sem_take+0xf4>)
    5dea:	2379      	movs	r3, #121	; 0x79
    5dec:	f002 f950 	bl	8090 <assert_print>
    5df0:	4835      	ldr	r0, [pc, #212]	; (5ec8 <z_impl_k_sem_take+0xf8>)
    5df2:	f002 f94d 	bl	8090 <assert_print>
    5df6:	4832      	ldr	r0, [pc, #200]	; (5ec0 <z_impl_k_sem_take+0xf0>)
    5df8:	2179      	movs	r1, #121	; 0x79
    5dfa:	f002 f942 	bl	8082 <assert_post_action>
    5dfe:	f04f 0320 	mov.w	r3, #32
    5e02:	f3ef 8611 	mrs	r6, BASEPRI
    5e06:	f383 8812 	msr	BASEPRI_MAX, r3
    5e0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e0e:	482f      	ldr	r0, [pc, #188]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e10:	f7ff fd8a 	bl	5928 <z_spin_lock_valid>
    5e14:	b968      	cbnz	r0, 5e32 <z_impl_k_sem_take+0x62>
    5e16:	4a2e      	ldr	r2, [pc, #184]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e18:	492e      	ldr	r1, [pc, #184]	; (5ed4 <z_impl_k_sem_take+0x104>)
    5e1a:	482a      	ldr	r0, [pc, #168]	; (5ec4 <z_impl_k_sem_take+0xf4>)
    5e1c:	238e      	movs	r3, #142	; 0x8e
    5e1e:	f002 f937 	bl	8090 <assert_print>
    5e22:	492a      	ldr	r1, [pc, #168]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e24:	482c      	ldr	r0, [pc, #176]	; (5ed8 <z_impl_k_sem_take+0x108>)
    5e26:	f002 f933 	bl	8090 <assert_print>
    5e2a:	4829      	ldr	r0, [pc, #164]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e2c:	218e      	movs	r1, #142	; 0x8e
    5e2e:	f002 f928 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e32:	4826      	ldr	r0, [pc, #152]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e34:	f7ff fd96 	bl	5964 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5e38:	68a3      	ldr	r3, [r4, #8]
    5e3a:	b1d3      	cbz	r3, 5e72 <z_impl_k_sem_take+0xa2>
		sem->count--;
    5e3c:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e3e:	4823      	ldr	r0, [pc, #140]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e40:	60a3      	str	r3, [r4, #8]
    5e42:	f7ff fd7f 	bl	5944 <z_spin_unlock_valid>
    5e46:	b968      	cbnz	r0, 5e64 <z_impl_k_sem_take+0x94>
    5e48:	4a21      	ldr	r2, [pc, #132]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e4a:	4924      	ldr	r1, [pc, #144]	; (5edc <z_impl_k_sem_take+0x10c>)
    5e4c:	481d      	ldr	r0, [pc, #116]	; (5ec4 <z_impl_k_sem_take+0xf4>)
    5e4e:	23b9      	movs	r3, #185	; 0xb9
    5e50:	f002 f91e 	bl	8090 <assert_print>
    5e54:	491d      	ldr	r1, [pc, #116]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e56:	4822      	ldr	r0, [pc, #136]	; (5ee0 <z_impl_k_sem_take+0x110>)
    5e58:	f002 f91a 	bl	8090 <assert_print>
    5e5c:	481c      	ldr	r0, [pc, #112]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e5e:	21b9      	movs	r1, #185	; 0xb9
    5e60:	f002 f90f 	bl	8082 <assert_post_action>
	__asm__ volatile(
    5e64:	f386 8811 	msr	BASEPRI, r6
    5e68:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5e6c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5e6e:	b003      	add	sp, #12
    5e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5e72:	ea57 0305 	orrs.w	r3, r7, r5
    5e76:	d118      	bne.n	5eaa <z_impl_k_sem_take+0xda>
    5e78:	4814      	ldr	r0, [pc, #80]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e7a:	f7ff fd63 	bl	5944 <z_spin_unlock_valid>
    5e7e:	b968      	cbnz	r0, 5e9c <z_impl_k_sem_take+0xcc>
    5e80:	4a13      	ldr	r2, [pc, #76]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e82:	4916      	ldr	r1, [pc, #88]	; (5edc <z_impl_k_sem_take+0x10c>)
    5e84:	480f      	ldr	r0, [pc, #60]	; (5ec4 <z_impl_k_sem_take+0xf4>)
    5e86:	23b9      	movs	r3, #185	; 0xb9
    5e88:	f002 f902 	bl	8090 <assert_print>
    5e8c:	490f      	ldr	r1, [pc, #60]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5e8e:	4814      	ldr	r0, [pc, #80]	; (5ee0 <z_impl_k_sem_take+0x110>)
    5e90:	f002 f8fe 	bl	8090 <assert_print>
    5e94:	480e      	ldr	r0, [pc, #56]	; (5ed0 <z_impl_k_sem_take+0x100>)
    5e96:	21b9      	movs	r1, #185	; 0xb9
    5e98:	f002 f8f3 	bl	8082 <assert_post_action>
    5e9c:	f386 8811 	msr	BASEPRI, r6
    5ea0:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5ea4:	f06f 000f 	mvn.w	r0, #15
    5ea8:	e7e1      	b.n	5e6e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5eaa:	e9cd 7500 	strd	r7, r5, [sp]
    5eae:	4622      	mov	r2, r4
    5eb0:	4631      	mov	r1, r6
    5eb2:	4806      	ldr	r0, [pc, #24]	; (5ecc <z_impl_k_sem_take+0xfc>)
    5eb4:	f000 fc88 	bl	67c8 <z_pend_curr>
	return ret;
    5eb8:	e7d9      	b.n	5e6e <z_impl_k_sem_take+0x9e>
    5eba:	bf00      	nop
    5ebc:	0000a448 	.word	0x0000a448
    5ec0:	0000a428 	.word	0x0000a428
    5ec4:	00008f43 	.word	0x00008f43
    5ec8:	0000a3f4 	.word	0x0000a3f4
    5ecc:	20000a0c 	.word	0x20000a0c
    5ed0:	0000908d 	.word	0x0000908d
    5ed4:	000090e6 	.word	0x000090e6
    5ed8:	000090fb 	.word	0x000090fb
    5edc:	000090ba 	.word	0x000090ba
    5ee0:	000090d1 	.word	0x000090d1

00005ee4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5ee4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5ee6:	4d07      	ldr	r5, [pc, #28]	; (5f04 <z_reset_time_slice+0x20>)
    5ee8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5eea:	b154      	cbz	r4, 5f02 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5eec:	f7fe fa0c 	bl	4308 <sys_clock_elapsed>
    5ef0:	4b05      	ldr	r3, [pc, #20]	; (5f08 <z_reset_time_slice+0x24>)
    5ef2:	4404      	add	r4, r0
    5ef4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5ef6:	6828      	ldr	r0, [r5, #0]
    5ef8:	2100      	movs	r1, #0
	}
}
    5efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5efe:	f001 ba6b 	b.w	73d8 <z_set_timeout_expiry>
}
    5f02:	bd38      	pop	{r3, r4, r5, pc}
    5f04:	20000a18 	.word	0x20000a18
    5f08:	200009e0 	.word	0x200009e0

00005f0c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5f0c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5f0e:	4d16      	ldr	r5, [pc, #88]	; (5f68 <update_cache+0x5c>)
    5f10:	462b      	mov	r3, r5
    5f12:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f16:	429c      	cmp	r4, r3
    5f18:	d000      	beq.n	5f1c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5f1a:	b904      	cbnz	r4, 5f1e <update_cache+0x12>
    5f1c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    5f1e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5f20:	b120      	cbz	r0, 5f2c <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5f22:	68ab      	ldr	r3, [r5, #8]
    5f24:	42a3      	cmp	r3, r4
    5f26:	d11b      	bne.n	5f60 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5f28:	4623      	mov	r3, r4
    5f2a:	e017      	b.n	5f5c <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    5f2c:	b963      	cbnz	r3, 5f48 <update_cache+0x3c>
    5f2e:	490f      	ldr	r1, [pc, #60]	; (5f6c <update_cache+0x60>)
    5f30:	4a0f      	ldr	r2, [pc, #60]	; (5f70 <update_cache+0x64>)
    5f32:	4810      	ldr	r0, [pc, #64]	; (5f74 <update_cache+0x68>)
    5f34:	2389      	movs	r3, #137	; 0x89
    5f36:	f002 f8ab 	bl	8090 <assert_print>
    5f3a:	480f      	ldr	r0, [pc, #60]	; (5f78 <update_cache+0x6c>)
    5f3c:	f002 f8a8 	bl	8090 <assert_print>
    5f40:	480b      	ldr	r0, [pc, #44]	; (5f70 <update_cache+0x64>)
    5f42:	2189      	movs	r1, #137	; 0x89
    5f44:	f002 f89d 	bl	8082 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5f48:	68ab      	ldr	r3, [r5, #8]
    5f4a:	7b5a      	ldrb	r2, [r3, #13]
    5f4c:	06d2      	lsls	r2, r2, #27
    5f4e:	d1e8      	bne.n	5f22 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5f50:	69a2      	ldr	r2, [r4, #24]
    5f52:	2a00      	cmp	r2, #0
    5f54:	d1e5      	bne.n	5f22 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    5f56:	89da      	ldrh	r2, [r3, #14]
    5f58:	2a7f      	cmp	r2, #127	; 0x7f
    5f5a:	d9e2      	bls.n	5f22 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    5f5c:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5f5e:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    5f60:	4620      	mov	r0, r4
    5f62:	f7ff ffbf 	bl	5ee4 <z_reset_time_slice>
    5f66:	e7df      	b.n	5f28 <update_cache+0x1c>
    5f68:	200009e0 	.word	0x200009e0
    5f6c:	0000a4b8 	.word	0x0000a4b8
    5f70:	0000a496 	.word	0x0000a496
    5f74:	00008f43 	.word	0x00008f43
    5f78:	0000a3f4 	.word	0x0000a3f4

00005f7c <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5f7e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5f82:	7b43      	ldrb	r3, [r0, #13]
    5f84:	2a00      	cmp	r2, #0
{
    5f86:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5f88:	db38      	blt.n	5ffc <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5f8a:	06da      	lsls	r2, r3, #27
    5f8c:	d136      	bne.n	5ffc <ready_thread+0x80>
	return node->next != NULL;
    5f8e:	6985      	ldr	r5, [r0, #24]
    5f90:	2d00      	cmp	r5, #0
    5f92:	d133      	bne.n	5ffc <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    5f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f98:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5f9a:	4b19      	ldr	r3, [pc, #100]	; (6000 <ready_thread+0x84>)
    5f9c:	4298      	cmp	r0, r3
    5f9e:	d109      	bne.n	5fb4 <ready_thread+0x38>
    5fa0:	4918      	ldr	r1, [pc, #96]	; (6004 <ready_thread+0x88>)
    5fa2:	4819      	ldr	r0, [pc, #100]	; (6008 <ready_thread+0x8c>)
    5fa4:	4a19      	ldr	r2, [pc, #100]	; (600c <ready_thread+0x90>)
    5fa6:	23ba      	movs	r3, #186	; 0xba
    5fa8:	f002 f872 	bl	8090 <assert_print>
    5fac:	4817      	ldr	r0, [pc, #92]	; (600c <ready_thread+0x90>)
    5fae:	21ba      	movs	r1, #186	; 0xba
    5fb0:	f002 f867 	bl	8082 <assert_post_action>
	return list->head == list;
    5fb4:	4a16      	ldr	r2, [pc, #88]	; (6010 <ready_thread+0x94>)
    5fb6:	4613      	mov	r3, r2
    5fb8:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fbc:	4299      	cmp	r1, r3
    5fbe:	bf18      	it	ne
    5fc0:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5fc2:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5fc4:	b925      	cbnz	r5, 5fd0 <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5fc6:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    5fca:	600c      	str	r4, [r1, #0]
	list->tail = node;
    5fcc:	6254      	str	r4, [r2, #36]	; 0x24
}
    5fce:	e00c      	b.n	5fea <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    5fd0:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5fd4:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    5fd8:	42b0      	cmp	r0, r6
    5fda:	d00b      	beq.n	5ff4 <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5fdc:	4286      	cmp	r6, r0
    5fde:	dd09      	ble.n	5ff4 <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5fe0:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    5fe2:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5fe6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5fe8:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    5fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5fee:	2000      	movs	r0, #0
    5ff0:	f7ff bf8c 	b.w	5f0c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5ff4:	428d      	cmp	r5, r1
    5ff6:	d0e6      	beq.n	5fc6 <ready_thread+0x4a>
    5ff8:	682d      	ldr	r5, [r5, #0]
    5ffa:	e7e3      	b.n	5fc4 <ready_thread+0x48>
}
    5ffc:	bd70      	pop	{r4, r5, r6, pc}
    5ffe:	bf00      	nop
    6000:	200001e0 	.word	0x200001e0
    6004:	0000a4df 	.word	0x0000a4df
    6008:	00008f43 	.word	0x00008f43
    600c:	0000a496 	.word	0x0000a496
    6010:	200009e0 	.word	0x200009e0

00006014 <k_sched_time_slice_set>:
{
    6014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6016:	4604      	mov	r4, r0
    6018:	460d      	mov	r5, r1
	__asm__ volatile(
    601a:	f04f 0320 	mov.w	r3, #32
    601e:	f3ef 8711 	mrs	r7, BASEPRI
    6022:	f383 8812 	msr	BASEPRI_MAX, r3
    6026:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    602a:	4823      	ldr	r0, [pc, #140]	; (60b8 <k_sched_time_slice_set+0xa4>)
    602c:	f7ff fc7c 	bl	5928 <z_spin_lock_valid>
    6030:	b968      	cbnz	r0, 604e <k_sched_time_slice_set+0x3a>
    6032:	4a22      	ldr	r2, [pc, #136]	; (60bc <k_sched_time_slice_set+0xa8>)
    6034:	4922      	ldr	r1, [pc, #136]	; (60c0 <k_sched_time_slice_set+0xac>)
    6036:	4823      	ldr	r0, [pc, #140]	; (60c4 <k_sched_time_slice_set+0xb0>)
    6038:	238e      	movs	r3, #142	; 0x8e
    603a:	f002 f829 	bl	8090 <assert_print>
    603e:	491e      	ldr	r1, [pc, #120]	; (60b8 <k_sched_time_slice_set+0xa4>)
    6040:	4821      	ldr	r0, [pc, #132]	; (60c8 <k_sched_time_slice_set+0xb4>)
    6042:	f002 f825 	bl	8090 <assert_print>
    6046:	481d      	ldr	r0, [pc, #116]	; (60bc <k_sched_time_slice_set+0xa8>)
    6048:	218e      	movs	r1, #142	; 0x8e
    604a:	f002 f81a 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    604e:	481a      	ldr	r0, [pc, #104]	; (60b8 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    6050:	2600      	movs	r6, #0
    6052:	f7ff fc87 	bl	5964 <z_spin_lock_set_owner>
    6056:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    605a:	f240 30e7 	movw	r0, #999	; 0x3e7
    605e:	4631      	mov	r1, r6
    6060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6064:	2300      	movs	r3, #0
    6066:	fbe4 010c 	umlal	r0, r1, r4, ip
    606a:	f7fa f849 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    606e:	42b4      	cmp	r4, r6
    6070:	dd02      	ble.n	6078 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    6072:	2802      	cmp	r0, #2
    6074:	bfb8      	it	lt
    6076:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6078:	4a14      	ldr	r2, [pc, #80]	; (60cc <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    607a:	4b15      	ldr	r3, [pc, #84]	; (60d0 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    607c:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    607e:	4a15      	ldr	r2, [pc, #84]	; (60d4 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    6080:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    6082:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    6084:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    6086:	f7ff ff2d 	bl	5ee4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    608a:	480b      	ldr	r0, [pc, #44]	; (60b8 <k_sched_time_slice_set+0xa4>)
    608c:	f7ff fc5a 	bl	5944 <z_spin_unlock_valid>
    6090:	b968      	cbnz	r0, 60ae <k_sched_time_slice_set+0x9a>
    6092:	4a0a      	ldr	r2, [pc, #40]	; (60bc <k_sched_time_slice_set+0xa8>)
    6094:	4910      	ldr	r1, [pc, #64]	; (60d8 <k_sched_time_slice_set+0xc4>)
    6096:	480b      	ldr	r0, [pc, #44]	; (60c4 <k_sched_time_slice_set+0xb0>)
    6098:	23b9      	movs	r3, #185	; 0xb9
    609a:	f001 fff9 	bl	8090 <assert_print>
    609e:	4906      	ldr	r1, [pc, #24]	; (60b8 <k_sched_time_slice_set+0xa4>)
    60a0:	480e      	ldr	r0, [pc, #56]	; (60dc <k_sched_time_slice_set+0xc8>)
    60a2:	f001 fff5 	bl	8090 <assert_print>
    60a6:	4805      	ldr	r0, [pc, #20]	; (60bc <k_sched_time_slice_set+0xa8>)
    60a8:	21b9      	movs	r1, #185	; 0xb9
    60aa:	f001 ffea 	bl	8082 <assert_post_action>
	__asm__ volatile(
    60ae:	f387 8811 	msr	BASEPRI, r7
    60b2:	f3bf 8f6f 	isb	sy
}
    60b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60b8:	20000a1c 	.word	0x20000a1c
    60bc:	0000908d 	.word	0x0000908d
    60c0:	000090e6 	.word	0x000090e6
    60c4:	00008f43 	.word	0x00008f43
    60c8:	000090fb 	.word	0x000090fb
    60cc:	20000a18 	.word	0x20000a18
    60d0:	200009e0 	.word	0x200009e0
    60d4:	20000a14 	.word	0x20000a14
    60d8:	000090ba 	.word	0x000090ba
    60dc:	000090d1 	.word	0x000090d1

000060e0 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    60e0:	b538      	push	{r3, r4, r5, lr}
    60e2:	4604      	mov	r4, r0
	__asm__ volatile(
    60e4:	f04f 0320 	mov.w	r3, #32
    60e8:	f3ef 8511 	mrs	r5, BASEPRI
    60ec:	f383 8812 	msr	BASEPRI_MAX, r3
    60f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    60f4:	4817      	ldr	r0, [pc, #92]	; (6154 <z_ready_thread+0x74>)
    60f6:	f7ff fc17 	bl	5928 <z_spin_lock_valid>
    60fa:	b968      	cbnz	r0, 6118 <z_ready_thread+0x38>
    60fc:	4a16      	ldr	r2, [pc, #88]	; (6158 <z_ready_thread+0x78>)
    60fe:	4917      	ldr	r1, [pc, #92]	; (615c <z_ready_thread+0x7c>)
    6100:	4817      	ldr	r0, [pc, #92]	; (6160 <z_ready_thread+0x80>)
    6102:	238e      	movs	r3, #142	; 0x8e
    6104:	f001 ffc4 	bl	8090 <assert_print>
    6108:	4912      	ldr	r1, [pc, #72]	; (6154 <z_ready_thread+0x74>)
    610a:	4816      	ldr	r0, [pc, #88]	; (6164 <z_ready_thread+0x84>)
    610c:	f001 ffc0 	bl	8090 <assert_print>
    6110:	4811      	ldr	r0, [pc, #68]	; (6158 <z_ready_thread+0x78>)
    6112:	218e      	movs	r1, #142	; 0x8e
    6114:	f001 ffb5 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6118:	480e      	ldr	r0, [pc, #56]	; (6154 <z_ready_thread+0x74>)
    611a:	f7ff fc23 	bl	5964 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    611e:	4620      	mov	r0, r4
    6120:	f7ff ff2c 	bl	5f7c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6124:	480b      	ldr	r0, [pc, #44]	; (6154 <z_ready_thread+0x74>)
    6126:	f7ff fc0d 	bl	5944 <z_spin_unlock_valid>
    612a:	b968      	cbnz	r0, 6148 <z_ready_thread+0x68>
    612c:	4a0a      	ldr	r2, [pc, #40]	; (6158 <z_ready_thread+0x78>)
    612e:	490e      	ldr	r1, [pc, #56]	; (6168 <z_ready_thread+0x88>)
    6130:	480b      	ldr	r0, [pc, #44]	; (6160 <z_ready_thread+0x80>)
    6132:	23b9      	movs	r3, #185	; 0xb9
    6134:	f001 ffac 	bl	8090 <assert_print>
    6138:	4906      	ldr	r1, [pc, #24]	; (6154 <z_ready_thread+0x74>)
    613a:	480c      	ldr	r0, [pc, #48]	; (616c <z_ready_thread+0x8c>)
    613c:	f001 ffa8 	bl	8090 <assert_print>
    6140:	4805      	ldr	r0, [pc, #20]	; (6158 <z_ready_thread+0x78>)
    6142:	21b9      	movs	r1, #185	; 0xb9
    6144:	f001 ff9d 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6148:	f385 8811 	msr	BASEPRI, r5
    614c:	f3bf 8f6f 	isb	sy
		}
	}
}
    6150:	bd38      	pop	{r3, r4, r5, pc}
    6152:	bf00      	nop
    6154:	20000a1c 	.word	0x20000a1c
    6158:	0000908d 	.word	0x0000908d
    615c:	000090e6 	.word	0x000090e6
    6160:	00008f43 	.word	0x00008f43
    6164:	000090fb 	.word	0x000090fb
    6168:	000090ba 	.word	0x000090ba
    616c:	000090d1 	.word	0x000090d1

00006170 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6170:	b538      	push	{r3, r4, r5, lr}
    6172:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6174:	460d      	mov	r5, r1
    6176:	b9e9      	cbnz	r1, 61b4 <z_reschedule+0x44>
    6178:	f3ef 8305 	mrs	r3, IPSR
    617c:	b9d3      	cbnz	r3, 61b4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    617e:	4b19      	ldr	r3, [pc, #100]	; (61e4 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    6180:	69da      	ldr	r2, [r3, #28]
    6182:	689b      	ldr	r3, [r3, #8]
    6184:	429a      	cmp	r2, r3
    6186:	d015      	beq.n	61b4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6188:	f7ff fbdc 	bl	5944 <z_spin_unlock_valid>
    618c:	b968      	cbnz	r0, 61aa <z_reschedule+0x3a>
    618e:	4a16      	ldr	r2, [pc, #88]	; (61e8 <z_reschedule+0x78>)
    6190:	4916      	ldr	r1, [pc, #88]	; (61ec <z_reschedule+0x7c>)
    6192:	4817      	ldr	r0, [pc, #92]	; (61f0 <z_reschedule+0x80>)
    6194:	23d0      	movs	r3, #208	; 0xd0
    6196:	f001 ff7b 	bl	8090 <assert_print>
    619a:	4816      	ldr	r0, [pc, #88]	; (61f4 <z_reschedule+0x84>)
    619c:	4621      	mov	r1, r4
    619e:	f001 ff77 	bl	8090 <assert_print>
    61a2:	4811      	ldr	r0, [pc, #68]	; (61e8 <z_reschedule+0x78>)
    61a4:	21d0      	movs	r1, #208	; 0xd0
    61a6:	f001 ff6c 	bl	8082 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    61aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    61ae:	2000      	movs	r0, #0
    61b0:	f7fc ba8e 	b.w	26d0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61b4:	4620      	mov	r0, r4
    61b6:	f7ff fbc5 	bl	5944 <z_spin_unlock_valid>
    61ba:	b968      	cbnz	r0, 61d8 <z_reschedule+0x68>
    61bc:	4a0a      	ldr	r2, [pc, #40]	; (61e8 <z_reschedule+0x78>)
    61be:	490b      	ldr	r1, [pc, #44]	; (61ec <z_reschedule+0x7c>)
    61c0:	480b      	ldr	r0, [pc, #44]	; (61f0 <z_reschedule+0x80>)
    61c2:	23b9      	movs	r3, #185	; 0xb9
    61c4:	f001 ff64 	bl	8090 <assert_print>
    61c8:	480a      	ldr	r0, [pc, #40]	; (61f4 <z_reschedule+0x84>)
    61ca:	4621      	mov	r1, r4
    61cc:	f001 ff60 	bl	8090 <assert_print>
    61d0:	4805      	ldr	r0, [pc, #20]	; (61e8 <z_reschedule+0x78>)
    61d2:	21b9      	movs	r1, #185	; 0xb9
    61d4:	f001 ff55 	bl	8082 <assert_post_action>
    61d8:	f385 8811 	msr	BASEPRI, r5
    61dc:	f3bf 8f6f 	isb	sy
    61e0:	bd38      	pop	{r3, r4, r5, pc}
    61e2:	bf00      	nop
    61e4:	200009e0 	.word	0x200009e0
    61e8:	0000908d 	.word	0x0000908d
    61ec:	000090ba 	.word	0x000090ba
    61f0:	00008f43 	.word	0x00008f43
    61f4:	000090d1 	.word	0x000090d1

000061f8 <z_sched_start>:
{
    61f8:	b538      	push	{r3, r4, r5, lr}
    61fa:	4604      	mov	r4, r0
	__asm__ volatile(
    61fc:	f04f 0320 	mov.w	r3, #32
    6200:	f3ef 8511 	mrs	r5, BASEPRI
    6204:	f383 8812 	msr	BASEPRI_MAX, r3
    6208:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    620c:	481d      	ldr	r0, [pc, #116]	; (6284 <z_sched_start+0x8c>)
    620e:	f7ff fb8b 	bl	5928 <z_spin_lock_valid>
    6212:	b968      	cbnz	r0, 6230 <z_sched_start+0x38>
    6214:	4a1c      	ldr	r2, [pc, #112]	; (6288 <z_sched_start+0x90>)
    6216:	491d      	ldr	r1, [pc, #116]	; (628c <z_sched_start+0x94>)
    6218:	481d      	ldr	r0, [pc, #116]	; (6290 <z_sched_start+0x98>)
    621a:	238e      	movs	r3, #142	; 0x8e
    621c:	f001 ff38 	bl	8090 <assert_print>
    6220:	4918      	ldr	r1, [pc, #96]	; (6284 <z_sched_start+0x8c>)
    6222:	481c      	ldr	r0, [pc, #112]	; (6294 <z_sched_start+0x9c>)
    6224:	f001 ff34 	bl	8090 <assert_print>
    6228:	4817      	ldr	r0, [pc, #92]	; (6288 <z_sched_start+0x90>)
    622a:	218e      	movs	r1, #142	; 0x8e
    622c:	f001 ff29 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6230:	4814      	ldr	r0, [pc, #80]	; (6284 <z_sched_start+0x8c>)
    6232:	f7ff fb97 	bl	5964 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6236:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    6238:	075a      	lsls	r2, r3, #29
    623a:	d416      	bmi.n	626a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    623c:	4811      	ldr	r0, [pc, #68]	; (6284 <z_sched_start+0x8c>)
    623e:	f7ff fb81 	bl	5944 <z_spin_unlock_valid>
    6242:	b968      	cbnz	r0, 6260 <z_sched_start+0x68>
    6244:	4a10      	ldr	r2, [pc, #64]	; (6288 <z_sched_start+0x90>)
    6246:	4914      	ldr	r1, [pc, #80]	; (6298 <z_sched_start+0xa0>)
    6248:	4811      	ldr	r0, [pc, #68]	; (6290 <z_sched_start+0x98>)
    624a:	23b9      	movs	r3, #185	; 0xb9
    624c:	f001 ff20 	bl	8090 <assert_print>
    6250:	490c      	ldr	r1, [pc, #48]	; (6284 <z_sched_start+0x8c>)
    6252:	4812      	ldr	r0, [pc, #72]	; (629c <z_sched_start+0xa4>)
    6254:	f001 ff1c 	bl	8090 <assert_print>
    6258:	480b      	ldr	r0, [pc, #44]	; (6288 <z_sched_start+0x90>)
    625a:	21b9      	movs	r1, #185	; 0xb9
    625c:	f001 ff11 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6260:	f385 8811 	msr	BASEPRI, r5
    6264:	f3bf 8f6f 	isb	sy
}
    6268:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    626a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    626e:	4620      	mov	r0, r4
    6270:	7363      	strb	r3, [r4, #13]
    6272:	f7ff fe83 	bl	5f7c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6276:	4629      	mov	r1, r5
    6278:	4802      	ldr	r0, [pc, #8]	; (6284 <z_sched_start+0x8c>)
}
    627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    627e:	f7ff bf77 	b.w	6170 <z_reschedule>
    6282:	bf00      	nop
    6284:	20000a1c 	.word	0x20000a1c
    6288:	0000908d 	.word	0x0000908d
    628c:	000090e6 	.word	0x000090e6
    6290:	00008f43 	.word	0x00008f43
    6294:	000090fb 	.word	0x000090fb
    6298:	000090ba 	.word	0x000090ba
    629c:	000090d1 	.word	0x000090d1

000062a0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    62a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    62a2:	f04f 0320 	mov.w	r3, #32
    62a6:	f3ef 8511 	mrs	r5, BASEPRI
    62aa:	f383 8812 	msr	BASEPRI_MAX, r3
    62ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62b2:	4829      	ldr	r0, [pc, #164]	; (6358 <k_sched_lock+0xb8>)
    62b4:	f7ff fb38 	bl	5928 <z_spin_lock_valid>
    62b8:	b968      	cbnz	r0, 62d6 <k_sched_lock+0x36>
    62ba:	4a28      	ldr	r2, [pc, #160]	; (635c <k_sched_lock+0xbc>)
    62bc:	4928      	ldr	r1, [pc, #160]	; (6360 <k_sched_lock+0xc0>)
    62be:	4829      	ldr	r0, [pc, #164]	; (6364 <k_sched_lock+0xc4>)
    62c0:	238e      	movs	r3, #142	; 0x8e
    62c2:	f001 fee5 	bl	8090 <assert_print>
    62c6:	4924      	ldr	r1, [pc, #144]	; (6358 <k_sched_lock+0xb8>)
    62c8:	4827      	ldr	r0, [pc, #156]	; (6368 <k_sched_lock+0xc8>)
    62ca:	f001 fee1 	bl	8090 <assert_print>
    62ce:	4823      	ldr	r0, [pc, #140]	; (635c <k_sched_lock+0xbc>)
    62d0:	218e      	movs	r1, #142	; 0x8e
    62d2:	f001 fed6 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    62d6:	4820      	ldr	r0, [pc, #128]	; (6358 <k_sched_lock+0xb8>)
    62d8:	f7ff fb44 	bl	5964 <z_spin_lock_set_owner>
    62dc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    62e0:	b163      	cbz	r3, 62fc <k_sched_lock+0x5c>
    62e2:	4922      	ldr	r1, [pc, #136]	; (636c <k_sched_lock+0xcc>)
    62e4:	4a22      	ldr	r2, [pc, #136]	; (6370 <k_sched_lock+0xd0>)
    62e6:	481f      	ldr	r0, [pc, #124]	; (6364 <k_sched_lock+0xc4>)
    62e8:	23fd      	movs	r3, #253	; 0xfd
    62ea:	f001 fed1 	bl	8090 <assert_print>
    62ee:	4821      	ldr	r0, [pc, #132]	; (6374 <k_sched_lock+0xd4>)
    62f0:	f001 fece 	bl	8090 <assert_print>
    62f4:	481e      	ldr	r0, [pc, #120]	; (6370 <k_sched_lock+0xd0>)
    62f6:	21fd      	movs	r1, #253	; 0xfd
    62f8:	f001 fec3 	bl	8082 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    62fc:	4c1e      	ldr	r4, [pc, #120]	; (6378 <k_sched_lock+0xd8>)
    62fe:	68a3      	ldr	r3, [r4, #8]
    6300:	7bdb      	ldrb	r3, [r3, #15]
    6302:	2b01      	cmp	r3, #1
    6304:	d10c      	bne.n	6320 <k_sched_lock+0x80>
    6306:	491d      	ldr	r1, [pc, #116]	; (637c <k_sched_lock+0xdc>)
    6308:	4a19      	ldr	r2, [pc, #100]	; (6370 <k_sched_lock+0xd0>)
    630a:	4816      	ldr	r0, [pc, #88]	; (6364 <k_sched_lock+0xc4>)
    630c:	23fe      	movs	r3, #254	; 0xfe
    630e:	f001 febf 	bl	8090 <assert_print>
    6312:	4818      	ldr	r0, [pc, #96]	; (6374 <k_sched_lock+0xd4>)
    6314:	f001 febc 	bl	8090 <assert_print>
    6318:	4815      	ldr	r0, [pc, #84]	; (6370 <k_sched_lock+0xd0>)
    631a:	21fe      	movs	r1, #254	; 0xfe
    631c:	f001 feb1 	bl	8082 <assert_post_action>
	--_current->base.sched_locked;
    6320:	68a2      	ldr	r2, [r4, #8]
    6322:	7bd3      	ldrb	r3, [r2, #15]
    6324:	3b01      	subs	r3, #1
    6326:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6328:	480b      	ldr	r0, [pc, #44]	; (6358 <k_sched_lock+0xb8>)
    632a:	f7ff fb0b 	bl	5944 <z_spin_unlock_valid>
    632e:	b968      	cbnz	r0, 634c <k_sched_lock+0xac>
    6330:	4a0a      	ldr	r2, [pc, #40]	; (635c <k_sched_lock+0xbc>)
    6332:	4913      	ldr	r1, [pc, #76]	; (6380 <k_sched_lock+0xe0>)
    6334:	480b      	ldr	r0, [pc, #44]	; (6364 <k_sched_lock+0xc4>)
    6336:	23b9      	movs	r3, #185	; 0xb9
    6338:	f001 feaa 	bl	8090 <assert_print>
    633c:	4906      	ldr	r1, [pc, #24]	; (6358 <k_sched_lock+0xb8>)
    633e:	4811      	ldr	r0, [pc, #68]	; (6384 <k_sched_lock+0xe4>)
    6340:	f001 fea6 	bl	8090 <assert_print>
    6344:	4805      	ldr	r0, [pc, #20]	; (635c <k_sched_lock+0xbc>)
    6346:	21b9      	movs	r1, #185	; 0xb9
    6348:	f001 fe9b 	bl	8082 <assert_post_action>
	__asm__ volatile(
    634c:	f385 8811 	msr	BASEPRI, r5
    6350:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6354:	bd38      	pop	{r3, r4, r5, pc}
    6356:	bf00      	nop
    6358:	20000a1c 	.word	0x20000a1c
    635c:	0000908d 	.word	0x0000908d
    6360:	000090e6 	.word	0x000090e6
    6364:	00008f43 	.word	0x00008f43
    6368:	000090fb 	.word	0x000090fb
    636c:	0000a37b 	.word	0x0000a37b
    6370:	0000a3c9 	.word	0x0000a3c9
    6374:	0000a3f4 	.word	0x0000a3f4
    6378:	200009e0 	.word	0x200009e0
    637c:	0000a3f7 	.word	0x0000a3f7
    6380:	000090ba 	.word	0x000090ba
    6384:	000090d1 	.word	0x000090d1

00006388 <k_sched_unlock>:

void k_sched_unlock(void)
{
    6388:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    638a:	f04f 0320 	mov.w	r3, #32
    638e:	f3ef 8511 	mrs	r5, BASEPRI
    6392:	f383 8812 	msr	BASEPRI_MAX, r3
    6396:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    639a:	482d      	ldr	r0, [pc, #180]	; (6450 <k_sched_unlock+0xc8>)
    639c:	f7ff fac4 	bl	5928 <z_spin_lock_valid>
    63a0:	b968      	cbnz	r0, 63be <k_sched_unlock+0x36>
    63a2:	4a2c      	ldr	r2, [pc, #176]	; (6454 <k_sched_unlock+0xcc>)
    63a4:	492c      	ldr	r1, [pc, #176]	; (6458 <k_sched_unlock+0xd0>)
    63a6:	482d      	ldr	r0, [pc, #180]	; (645c <k_sched_unlock+0xd4>)
    63a8:	238e      	movs	r3, #142	; 0x8e
    63aa:	f001 fe71 	bl	8090 <assert_print>
    63ae:	4928      	ldr	r1, [pc, #160]	; (6450 <k_sched_unlock+0xc8>)
    63b0:	482b      	ldr	r0, [pc, #172]	; (6460 <k_sched_unlock+0xd8>)
    63b2:	f001 fe6d 	bl	8090 <assert_print>
    63b6:	4827      	ldr	r0, [pc, #156]	; (6454 <k_sched_unlock+0xcc>)
    63b8:	218e      	movs	r1, #142	; 0x8e
    63ba:	f001 fe62 	bl	8082 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    63be:	4c29      	ldr	r4, [pc, #164]	; (6464 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    63c0:	4823      	ldr	r0, [pc, #140]	; (6450 <k_sched_unlock+0xc8>)
    63c2:	f7ff facf 	bl	5964 <z_spin_lock_set_owner>
    63c6:	68a3      	ldr	r3, [r4, #8]
    63c8:	7bdb      	ldrb	r3, [r3, #15]
    63ca:	b973      	cbnz	r3, 63ea <k_sched_unlock+0x62>
    63cc:	4926      	ldr	r1, [pc, #152]	; (6468 <k_sched_unlock+0xe0>)
    63ce:	4a27      	ldr	r2, [pc, #156]	; (646c <k_sched_unlock+0xe4>)
    63d0:	4822      	ldr	r0, [pc, #136]	; (645c <k_sched_unlock+0xd4>)
    63d2:	f240 33bb 	movw	r3, #955	; 0x3bb
    63d6:	f001 fe5b 	bl	8090 <assert_print>
    63da:	4825      	ldr	r0, [pc, #148]	; (6470 <k_sched_unlock+0xe8>)
    63dc:	f001 fe58 	bl	8090 <assert_print>
    63e0:	4822      	ldr	r0, [pc, #136]	; (646c <k_sched_unlock+0xe4>)
    63e2:	f240 31bb 	movw	r1, #955	; 0x3bb
    63e6:	f001 fe4c 	bl	8082 <assert_post_action>
    63ea:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    63ee:	b173      	cbz	r3, 640e <k_sched_unlock+0x86>
    63f0:	4920      	ldr	r1, [pc, #128]	; (6474 <k_sched_unlock+0xec>)
    63f2:	4a1e      	ldr	r2, [pc, #120]	; (646c <k_sched_unlock+0xe4>)
    63f4:	4819      	ldr	r0, [pc, #100]	; (645c <k_sched_unlock+0xd4>)
    63f6:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    63fa:	f001 fe49 	bl	8090 <assert_print>
    63fe:	481c      	ldr	r0, [pc, #112]	; (6470 <k_sched_unlock+0xe8>)
    6400:	f001 fe46 	bl	8090 <assert_print>
    6404:	4819      	ldr	r0, [pc, #100]	; (646c <k_sched_unlock+0xe4>)
    6406:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    640a:	f001 fe3a 	bl	8082 <assert_post_action>

		++_current->base.sched_locked;
    640e:	68a2      	ldr	r2, [r4, #8]
    6410:	7bd3      	ldrb	r3, [r2, #15]
    6412:	3301      	adds	r3, #1
		update_cache(0);
    6414:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6416:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6418:	f7ff fd78 	bl	5f0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    641c:	480c      	ldr	r0, [pc, #48]	; (6450 <k_sched_unlock+0xc8>)
    641e:	f7ff fa91 	bl	5944 <z_spin_unlock_valid>
    6422:	b968      	cbnz	r0, 6440 <k_sched_unlock+0xb8>
    6424:	4a0b      	ldr	r2, [pc, #44]	; (6454 <k_sched_unlock+0xcc>)
    6426:	4914      	ldr	r1, [pc, #80]	; (6478 <k_sched_unlock+0xf0>)
    6428:	480c      	ldr	r0, [pc, #48]	; (645c <k_sched_unlock+0xd4>)
    642a:	23b9      	movs	r3, #185	; 0xb9
    642c:	f001 fe30 	bl	8090 <assert_print>
    6430:	4907      	ldr	r1, [pc, #28]	; (6450 <k_sched_unlock+0xc8>)
    6432:	4812      	ldr	r0, [pc, #72]	; (647c <k_sched_unlock+0xf4>)
    6434:	f001 fe2c 	bl	8090 <assert_print>
    6438:	4806      	ldr	r0, [pc, #24]	; (6454 <k_sched_unlock+0xcc>)
    643a:	21b9      	movs	r1, #185	; 0xb9
    643c:	f001 fe21 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6440:	f385 8811 	msr	BASEPRI, r5
    6444:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    6448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    644c:	f002 ba13 	b.w	8876 <z_reschedule_unlocked>
    6450:	20000a1c 	.word	0x20000a1c
    6454:	0000908d 	.word	0x0000908d
    6458:	000090e6 	.word	0x000090e6
    645c:	00008f43 	.word	0x00008f43
    6460:	000090fb 	.word	0x000090fb
    6464:	200009e0 	.word	0x200009e0
    6468:	0000a500 	.word	0x0000a500
    646c:	0000a496 	.word	0x0000a496
    6470:	0000a3f4 	.word	0x0000a3f4
    6474:	0000a37b 	.word	0x0000a37b
    6478:	000090ba 	.word	0x000090ba
    647c:	000090d1 	.word	0x000090d1

00006480 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6480:	4b0c      	ldr	r3, [pc, #48]	; (64b4 <z_priq_dumb_remove+0x34>)
    6482:	4299      	cmp	r1, r3
{
    6484:	b510      	push	{r4, lr}
    6486:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6488:	d10b      	bne.n	64a2 <z_priq_dumb_remove+0x22>
    648a:	490b      	ldr	r1, [pc, #44]	; (64b8 <z_priq_dumb_remove+0x38>)
    648c:	480b      	ldr	r0, [pc, #44]	; (64bc <z_priq_dumb_remove+0x3c>)
    648e:	4a0c      	ldr	r2, [pc, #48]	; (64c0 <z_priq_dumb_remove+0x40>)
    6490:	f240 433d 	movw	r3, #1085	; 0x43d
    6494:	f001 fdfc 	bl	8090 <assert_print>
    6498:	4809      	ldr	r0, [pc, #36]	; (64c0 <z_priq_dumb_remove+0x40>)
    649a:	f240 413d 	movw	r1, #1085	; 0x43d
    649e:	f001 fdf0 	bl	8082 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    64a2:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    64a6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    64a8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    64aa:	2300      	movs	r3, #0
	node->prev = NULL;
    64ac:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    64b0:	bd10      	pop	{r4, pc}
    64b2:	bf00      	nop
    64b4:	200001e0 	.word	0x200001e0
    64b8:	0000a4df 	.word	0x0000a4df
    64bc:	00008f43 	.word	0x00008f43
    64c0:	0000a496 	.word	0x0000a496

000064c4 <move_thread_to_end_of_prio_q>:
{
    64c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    64c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    64ca:	7b43      	ldrb	r3, [r0, #13]
    64cc:	2a00      	cmp	r2, #0
{
    64ce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    64d0:	da06      	bge.n	64e0 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    64d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    64d6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    64d8:	4601      	mov	r1, r0
    64da:	481d      	ldr	r0, [pc, #116]	; (6550 <move_thread_to_end_of_prio_q+0x8c>)
    64dc:	f7ff ffd0 	bl	6480 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    64e0:	7b63      	ldrb	r3, [r4, #13]
    64e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64e6:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    64e8:	4b1a      	ldr	r3, [pc, #104]	; (6554 <move_thread_to_end_of_prio_q+0x90>)
    64ea:	429c      	cmp	r4, r3
    64ec:	d109      	bne.n	6502 <move_thread_to_end_of_prio_q+0x3e>
    64ee:	491a      	ldr	r1, [pc, #104]	; (6558 <move_thread_to_end_of_prio_q+0x94>)
    64f0:	481a      	ldr	r0, [pc, #104]	; (655c <move_thread_to_end_of_prio_q+0x98>)
    64f2:	4a1b      	ldr	r2, [pc, #108]	; (6560 <move_thread_to_end_of_prio_q+0x9c>)
    64f4:	23ba      	movs	r3, #186	; 0xba
    64f6:	f001 fdcb 	bl	8090 <assert_print>
    64fa:	4819      	ldr	r0, [pc, #100]	; (6560 <move_thread_to_end_of_prio_q+0x9c>)
    64fc:	21ba      	movs	r1, #186	; 0xba
    64fe:	f001 fdc0 	bl	8082 <assert_post_action>
	return list->head == list;
    6502:	4a18      	ldr	r2, [pc, #96]	; (6564 <move_thread_to_end_of_prio_q+0xa0>)
    6504:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    6506:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    6508:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    650c:	428b      	cmp	r3, r1
    650e:	bf08      	it	eq
    6510:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6512:	b923      	cbnz	r3, 651e <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    6514:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    6518:	6004      	str	r4, [r0, #0]
	list->tail = node;
    651a:	6254      	str	r4, [r2, #36]	; 0x24
}
    651c:	e00c      	b.n	6538 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    651e:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6522:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    6526:	42b5      	cmp	r5, r6
    6528:	d00e      	beq.n	6548 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    652a:	42ae      	cmp	r6, r5
    652c:	dd0c      	ble.n	6548 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    652e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    6530:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    6534:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    6536:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    6538:	6890      	ldr	r0, [r2, #8]
    653a:	1b03      	subs	r3, r0, r4
    653c:	4258      	negs	r0, r3
}
    653e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    6542:	4158      	adcs	r0, r3
    6544:	f7ff bce2 	b.w	5f0c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6548:	4298      	cmp	r0, r3
    654a:	d0e3      	beq.n	6514 <move_thread_to_end_of_prio_q+0x50>
    654c:	681b      	ldr	r3, [r3, #0]
    654e:	e7e0      	b.n	6512 <move_thread_to_end_of_prio_q+0x4e>
    6550:	20000a00 	.word	0x20000a00
    6554:	200001e0 	.word	0x200001e0
    6558:	0000a4df 	.word	0x0000a4df
    655c:	00008f43 	.word	0x00008f43
    6560:	0000a496 	.word	0x0000a496
    6564:	200009e0 	.word	0x200009e0

00006568 <z_time_slice>:
{
    6568:	b570      	push	{r4, r5, r6, lr}
    656a:	4605      	mov	r5, r0
	__asm__ volatile(
    656c:	f04f 0320 	mov.w	r3, #32
    6570:	f3ef 8611 	mrs	r6, BASEPRI
    6574:	f383 8812 	msr	BASEPRI_MAX, r3
    6578:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    657c:	482a      	ldr	r0, [pc, #168]	; (6628 <z_time_slice+0xc0>)
    657e:	f7ff f9d3 	bl	5928 <z_spin_lock_valid>
    6582:	b968      	cbnz	r0, 65a0 <z_time_slice+0x38>
    6584:	4a29      	ldr	r2, [pc, #164]	; (662c <z_time_slice+0xc4>)
    6586:	492a      	ldr	r1, [pc, #168]	; (6630 <z_time_slice+0xc8>)
    6588:	482a      	ldr	r0, [pc, #168]	; (6634 <z_time_slice+0xcc>)
    658a:	238e      	movs	r3, #142	; 0x8e
    658c:	f001 fd80 	bl	8090 <assert_print>
    6590:	4925      	ldr	r1, [pc, #148]	; (6628 <z_time_slice+0xc0>)
    6592:	4829      	ldr	r0, [pc, #164]	; (6638 <z_time_slice+0xd0>)
    6594:	f001 fd7c 	bl	8090 <assert_print>
    6598:	4824      	ldr	r0, [pc, #144]	; (662c <z_time_slice+0xc4>)
    659a:	218e      	movs	r1, #142	; 0x8e
    659c:	f001 fd71 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    65a0:	4821      	ldr	r0, [pc, #132]	; (6628 <z_time_slice+0xc0>)
    65a2:	f7ff f9df 	bl	5964 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    65a6:	4b25      	ldr	r3, [pc, #148]	; (663c <z_time_slice+0xd4>)
    65a8:	4a25      	ldr	r2, [pc, #148]	; (6640 <z_time_slice+0xd8>)
    65aa:	689c      	ldr	r4, [r3, #8]
    65ac:	6811      	ldr	r1, [r2, #0]
    65ae:	428c      	cmp	r4, r1
    65b0:	d119      	bne.n	65e6 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    65b2:	4620      	mov	r0, r4
    65b4:	f7ff fc96 	bl	5ee4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65b8:	481b      	ldr	r0, [pc, #108]	; (6628 <z_time_slice+0xc0>)
    65ba:	f7ff f9c3 	bl	5944 <z_spin_unlock_valid>
    65be:	b968      	cbnz	r0, 65dc <z_time_slice+0x74>
    65c0:	4a1a      	ldr	r2, [pc, #104]	; (662c <z_time_slice+0xc4>)
    65c2:	4920      	ldr	r1, [pc, #128]	; (6644 <z_time_slice+0xdc>)
    65c4:	481b      	ldr	r0, [pc, #108]	; (6634 <z_time_slice+0xcc>)
    65c6:	23b9      	movs	r3, #185	; 0xb9
    65c8:	f001 fd62 	bl	8090 <assert_print>
    65cc:	4916      	ldr	r1, [pc, #88]	; (6628 <z_time_slice+0xc0>)
    65ce:	481e      	ldr	r0, [pc, #120]	; (6648 <z_time_slice+0xe0>)
    65d0:	f001 fd5e 	bl	8090 <assert_print>
    65d4:	4815      	ldr	r0, [pc, #84]	; (662c <z_time_slice+0xc4>)
    65d6:	21b9      	movs	r1, #185	; 0xb9
    65d8:	f001 fd53 	bl	8082 <assert_post_action>
	__asm__ volatile(
    65dc:	f386 8811 	msr	BASEPRI, r6
    65e0:	f3bf 8f6f 	isb	sy
}
    65e4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    65e6:	2100      	movs	r1, #0
    65e8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    65ea:	4a18      	ldr	r2, [pc, #96]	; (664c <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    65ec:	6812      	ldr	r2, [r2, #0]
    65ee:	b1c2      	cbz	r2, 6622 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    65f0:	89e2      	ldrh	r2, [r4, #14]
    65f2:	2a7f      	cmp	r2, #127	; 0x7f
    65f4:	d815      	bhi.n	6622 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    65f6:	7b62      	ldrb	r2, [r4, #13]
    65f8:	06d2      	lsls	r2, r2, #27
    65fa:	d112      	bne.n	6622 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    65fc:	4a14      	ldr	r2, [pc, #80]	; (6650 <z_time_slice+0xe8>)
    65fe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6602:	6812      	ldr	r2, [r2, #0]
    6604:	4291      	cmp	r1, r2
    6606:	db0c      	blt.n	6622 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    6608:	4a12      	ldr	r2, [pc, #72]	; (6654 <z_time_slice+0xec>)
    660a:	4294      	cmp	r4, r2
    660c:	d009      	beq.n	6622 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    660e:	691a      	ldr	r2, [r3, #16]
    6610:	42aa      	cmp	r2, r5
    6612:	dc03      	bgt.n	661c <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    6614:	4620      	mov	r0, r4
    6616:	f7ff ff55 	bl	64c4 <move_thread_to_end_of_prio_q>
    661a:	e7ca      	b.n	65b2 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    661c:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    661e:	611a      	str	r2, [r3, #16]
    6620:	e7ca      	b.n	65b8 <z_time_slice+0x50>
    6622:	2200      	movs	r2, #0
    6624:	e7fb      	b.n	661e <z_time_slice+0xb6>
    6626:	bf00      	nop
    6628:	20000a1c 	.word	0x20000a1c
    662c:	0000908d 	.word	0x0000908d
    6630:	000090e6 	.word	0x000090e6
    6634:	00008f43 	.word	0x00008f43
    6638:	000090fb 	.word	0x000090fb
    663c:	200009e0 	.word	0x200009e0
    6640:	20000a10 	.word	0x20000a10
    6644:	000090ba 	.word	0x000090ba
    6648:	000090d1 	.word	0x000090d1
    664c:	20000a18 	.word	0x20000a18
    6650:	20000a14 	.word	0x20000a14
    6654:	200001e0 	.word	0x200001e0

00006658 <unready_thread>:
{
    6658:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    665a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    665e:	7b43      	ldrb	r3, [r0, #13]
    6660:	2a00      	cmp	r2, #0
{
    6662:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6664:	da06      	bge.n	6674 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    666a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    666c:	4601      	mov	r1, r0
    666e:	4806      	ldr	r0, [pc, #24]	; (6688 <unready_thread+0x30>)
    6670:	f7ff ff06 	bl	6480 <z_priq_dumb_remove>
	update_cache(thread == _current);
    6674:	4b05      	ldr	r3, [pc, #20]	; (668c <unready_thread+0x34>)
    6676:	6898      	ldr	r0, [r3, #8]
    6678:	1b03      	subs	r3, r0, r4
    667a:	4258      	negs	r0, r3
}
    667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6680:	4158      	adcs	r0, r3
    6682:	f7ff bc43 	b.w	5f0c <update_cache>
    6686:	bf00      	nop
    6688:	20000a00 	.word	0x20000a00
    668c:	200009e0 	.word	0x200009e0

00006690 <add_to_waitq_locked>:
{
    6690:	b538      	push	{r3, r4, r5, lr}
    6692:	4604      	mov	r4, r0
    6694:	460d      	mov	r5, r1
	unready_thread(thread);
    6696:	f7ff ffdf 	bl	6658 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    669a:	7b63      	ldrb	r3, [r4, #13]
    669c:	f043 0302 	orr.w	r3, r3, #2
    66a0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    66a2:	b34d      	cbz	r5, 66f8 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    66a4:	4b15      	ldr	r3, [pc, #84]	; (66fc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    66a6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    66a8:	429c      	cmp	r4, r3
    66aa:	d109      	bne.n	66c0 <add_to_waitq_locked+0x30>
    66ac:	4914      	ldr	r1, [pc, #80]	; (6700 <add_to_waitq_locked+0x70>)
    66ae:	4815      	ldr	r0, [pc, #84]	; (6704 <add_to_waitq_locked+0x74>)
    66b0:	4a15      	ldr	r2, [pc, #84]	; (6708 <add_to_waitq_locked+0x78>)
    66b2:	23ba      	movs	r3, #186	; 0xba
    66b4:	f001 fcec 	bl	8090 <assert_print>
    66b8:	4813      	ldr	r0, [pc, #76]	; (6708 <add_to_waitq_locked+0x78>)
    66ba:	21ba      	movs	r1, #186	; 0xba
    66bc:	f001 fce1 	bl	8082 <assert_post_action>
	return list->head == list;
    66c0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66c2:	429d      	cmp	r5, r3
    66c4:	d109      	bne.n	66da <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    66c6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    66c8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    66cc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    66ce:	606c      	str	r4, [r5, #4]
}
    66d0:	e012      	b.n	66f8 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    66d2:	686a      	ldr	r2, [r5, #4]
    66d4:	4293      	cmp	r3, r2
    66d6:	d0f6      	beq.n	66c6 <add_to_waitq_locked+0x36>
    66d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    66da:	2b00      	cmp	r3, #0
    66dc:	d0f3      	beq.n	66c6 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    66de:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    66e2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    66e6:	428a      	cmp	r2, r1
    66e8:	d0f3      	beq.n	66d2 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    66ea:	4291      	cmp	r1, r2
    66ec:	ddf1      	ble.n	66d2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    66ee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    66f0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    66f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    66f6:	605c      	str	r4, [r3, #4]
}
    66f8:	bd38      	pop	{r3, r4, r5, pc}
    66fa:	bf00      	nop
    66fc:	200001e0 	.word	0x200001e0
    6700:	0000a4df 	.word	0x0000a4df
    6704:	00008f43 	.word	0x00008f43
    6708:	0000a496 	.word	0x0000a496

0000670c <pend>:
{
    670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6710:	4604      	mov	r4, r0
    6712:	4688      	mov	r8, r1
    6714:	4616      	mov	r6, r2
    6716:	461d      	mov	r5, r3
	__asm__ volatile(
    6718:	f04f 0320 	mov.w	r3, #32
    671c:	f3ef 8711 	mrs	r7, BASEPRI
    6720:	f383 8812 	msr	BASEPRI_MAX, r3
    6724:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6728:	481f      	ldr	r0, [pc, #124]	; (67a8 <pend+0x9c>)
    672a:	f7ff f8fd 	bl	5928 <z_spin_lock_valid>
    672e:	b968      	cbnz	r0, 674c <pend+0x40>
    6730:	4a1e      	ldr	r2, [pc, #120]	; (67ac <pend+0xa0>)
    6732:	491f      	ldr	r1, [pc, #124]	; (67b0 <pend+0xa4>)
    6734:	481f      	ldr	r0, [pc, #124]	; (67b4 <pend+0xa8>)
    6736:	238e      	movs	r3, #142	; 0x8e
    6738:	f001 fcaa 	bl	8090 <assert_print>
    673c:	491a      	ldr	r1, [pc, #104]	; (67a8 <pend+0x9c>)
    673e:	481e      	ldr	r0, [pc, #120]	; (67b8 <pend+0xac>)
    6740:	f001 fca6 	bl	8090 <assert_print>
    6744:	4819      	ldr	r0, [pc, #100]	; (67ac <pend+0xa0>)
    6746:	218e      	movs	r1, #142	; 0x8e
    6748:	f001 fc9b 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    674c:	4816      	ldr	r0, [pc, #88]	; (67a8 <pend+0x9c>)
    674e:	f7ff f909 	bl	5964 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    6752:	4620      	mov	r0, r4
    6754:	4641      	mov	r1, r8
    6756:	f7ff ff9b 	bl	6690 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    675a:	4813      	ldr	r0, [pc, #76]	; (67a8 <pend+0x9c>)
    675c:	f7ff f8f2 	bl	5944 <z_spin_unlock_valid>
    6760:	b968      	cbnz	r0, 677e <pend+0x72>
    6762:	4a12      	ldr	r2, [pc, #72]	; (67ac <pend+0xa0>)
    6764:	4915      	ldr	r1, [pc, #84]	; (67bc <pend+0xb0>)
    6766:	4813      	ldr	r0, [pc, #76]	; (67b4 <pend+0xa8>)
    6768:	23b9      	movs	r3, #185	; 0xb9
    676a:	f001 fc91 	bl	8090 <assert_print>
    676e:	490e      	ldr	r1, [pc, #56]	; (67a8 <pend+0x9c>)
    6770:	4813      	ldr	r0, [pc, #76]	; (67c0 <pend+0xb4>)
    6772:	f001 fc8d 	bl	8090 <assert_print>
    6776:	480d      	ldr	r0, [pc, #52]	; (67ac <pend+0xa0>)
    6778:	21b9      	movs	r1, #185	; 0xb9
    677a:	f001 fc82 	bl	8082 <assert_post_action>
	__asm__ volatile(
    677e:	f387 8811 	msr	BASEPRI, r7
    6782:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6786:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    678a:	bf08      	it	eq
    678c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    6790:	d008      	beq.n	67a4 <pend+0x98>
    6792:	4632      	mov	r2, r6
    6794:	462b      	mov	r3, r5
    6796:	f104 0018 	add.w	r0, r4, #24
    679a:	490a      	ldr	r1, [pc, #40]	; (67c4 <pend+0xb8>)
}
    679c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67a0:	f000 bcba 	b.w	7118 <z_add_timeout>
    67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67a8:	20000a1c 	.word	0x20000a1c
    67ac:	0000908d 	.word	0x0000908d
    67b0:	000090e6 	.word	0x000090e6
    67b4:	00008f43 	.word	0x00008f43
    67b8:	000090fb 	.word	0x000090fb
    67bc:	000090ba 	.word	0x000090ba
    67c0:	000090d1 	.word	0x000090d1
    67c4:	00006a6d 	.word	0x00006a6d

000067c8 <z_pend_curr>:
{
    67c8:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    67ca:	4b11      	ldr	r3, [pc, #68]	; (6810 <z_pend_curr+0x48>)
{
    67cc:	4604      	mov	r4, r0
	pending_current = _current;
    67ce:	6898      	ldr	r0, [r3, #8]
    67d0:	4b10      	ldr	r3, [pc, #64]	; (6814 <z_pend_curr+0x4c>)
{
    67d2:	460d      	mov	r5, r1
	pending_current = _current;
    67d4:	6018      	str	r0, [r3, #0]
{
    67d6:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    67d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    67dc:	f7ff ff96 	bl	670c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67e0:	4620      	mov	r0, r4
    67e2:	f7ff f8af 	bl	5944 <z_spin_unlock_valid>
    67e6:	b968      	cbnz	r0, 6804 <z_pend_curr+0x3c>
    67e8:	4a0b      	ldr	r2, [pc, #44]	; (6818 <z_pend_curr+0x50>)
    67ea:	490c      	ldr	r1, [pc, #48]	; (681c <z_pend_curr+0x54>)
    67ec:	480c      	ldr	r0, [pc, #48]	; (6820 <z_pend_curr+0x58>)
    67ee:	23d0      	movs	r3, #208	; 0xd0
    67f0:	f001 fc4e 	bl	8090 <assert_print>
    67f4:	480b      	ldr	r0, [pc, #44]	; (6824 <z_pend_curr+0x5c>)
    67f6:	4621      	mov	r1, r4
    67f8:	f001 fc4a 	bl	8090 <assert_print>
    67fc:	4806      	ldr	r0, [pc, #24]	; (6818 <z_pend_curr+0x50>)
    67fe:	21d0      	movs	r1, #208	; 0xd0
    6800:	f001 fc3f 	bl	8082 <assert_post_action>
    6804:	4628      	mov	r0, r5
}
    6806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    680a:	f7fb bf61 	b.w	26d0 <arch_swap>
    680e:	bf00      	nop
    6810:	200009e0 	.word	0x200009e0
    6814:	20000a10 	.word	0x20000a10
    6818:	0000908d 	.word	0x0000908d
    681c:	000090ba 	.word	0x000090ba
    6820:	00008f43 	.word	0x00008f43
    6824:	000090d1 	.word	0x000090d1

00006828 <z_set_prio>:
{
    6828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    682a:	4604      	mov	r4, r0
    682c:	460e      	mov	r6, r1
	__asm__ volatile(
    682e:	f04f 0320 	mov.w	r3, #32
    6832:	f3ef 8711 	mrs	r7, BASEPRI
    6836:	f383 8812 	msr	BASEPRI_MAX, r3
    683a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    683e:	4839      	ldr	r0, [pc, #228]	; (6924 <z_set_prio+0xfc>)
    6840:	f7ff f872 	bl	5928 <z_spin_lock_valid>
    6844:	b968      	cbnz	r0, 6862 <z_set_prio+0x3a>
    6846:	4a38      	ldr	r2, [pc, #224]	; (6928 <z_set_prio+0x100>)
    6848:	4938      	ldr	r1, [pc, #224]	; (692c <z_set_prio+0x104>)
    684a:	4839      	ldr	r0, [pc, #228]	; (6930 <z_set_prio+0x108>)
    684c:	238e      	movs	r3, #142	; 0x8e
    684e:	f001 fc1f 	bl	8090 <assert_print>
    6852:	4934      	ldr	r1, [pc, #208]	; (6924 <z_set_prio+0xfc>)
    6854:	4837      	ldr	r0, [pc, #220]	; (6934 <z_set_prio+0x10c>)
    6856:	f001 fc1b 	bl	8090 <assert_print>
    685a:	4833      	ldr	r0, [pc, #204]	; (6928 <z_set_prio+0x100>)
    685c:	218e      	movs	r1, #142	; 0x8e
    685e:	f001 fc10 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6862:	4830      	ldr	r0, [pc, #192]	; (6924 <z_set_prio+0xfc>)
    6864:	f7ff f87e 	bl	5964 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    6868:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    686a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    686c:	b276      	sxtb	r6, r6
    686e:	d128      	bne.n	68c2 <z_set_prio+0x9a>
	return node->next != NULL;
    6870:	69a5      	ldr	r5, [r4, #24]
    6872:	bb35      	cbnz	r5, 68c2 <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6878:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    687a:	482f      	ldr	r0, [pc, #188]	; (6938 <z_set_prio+0x110>)
    687c:	4621      	mov	r1, r4
    687e:	f7ff fdff 	bl	6480 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6882:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6884:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6886:	f063 037f 	orn	r3, r3, #127	; 0x7f
    688a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    688c:	4b2b      	ldr	r3, [pc, #172]	; (693c <z_set_prio+0x114>)
    688e:	429c      	cmp	r4, r3
    6890:	d109      	bne.n	68a6 <z_set_prio+0x7e>
    6892:	492b      	ldr	r1, [pc, #172]	; (6940 <z_set_prio+0x118>)
    6894:	4826      	ldr	r0, [pc, #152]	; (6930 <z_set_prio+0x108>)
    6896:	4a2b      	ldr	r2, [pc, #172]	; (6944 <z_set_prio+0x11c>)
    6898:	23ba      	movs	r3, #186	; 0xba
    689a:	f001 fbf9 	bl	8090 <assert_print>
    689e:	4829      	ldr	r0, [pc, #164]	; (6944 <z_set_prio+0x11c>)
    68a0:	21ba      	movs	r1, #186	; 0xba
    68a2:	f001 fbee 	bl	8082 <assert_post_action>
	return list->head == list;
    68a6:	4a28      	ldr	r2, [pc, #160]	; (6948 <z_set_prio+0x120>)
    68a8:	4613      	mov	r3, r2
    68aa:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68ae:	4299      	cmp	r1, r3
    68b0:	bf18      	it	ne
    68b2:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    68b4:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    68b6:	b9f5      	cbnz	r5, 68f6 <z_set_prio+0xce>
	node->prev = tail;
    68b8:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    68bc:	600c      	str	r4, [r1, #0]
	list->tail = node;
    68be:	6254      	str	r4, [r2, #36]	; 0x24
}
    68c0:	e026      	b.n	6910 <z_set_prio+0xe8>
			thread->base.prio = prio;
    68c2:	73a6      	strb	r6, [r4, #14]
    68c4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68c6:	4817      	ldr	r0, [pc, #92]	; (6924 <z_set_prio+0xfc>)
    68c8:	f7ff f83c 	bl	5944 <z_spin_unlock_valid>
    68cc:	b968      	cbnz	r0, 68ea <z_set_prio+0xc2>
    68ce:	4a16      	ldr	r2, [pc, #88]	; (6928 <z_set_prio+0x100>)
    68d0:	491e      	ldr	r1, [pc, #120]	; (694c <z_set_prio+0x124>)
    68d2:	4817      	ldr	r0, [pc, #92]	; (6930 <z_set_prio+0x108>)
    68d4:	23b9      	movs	r3, #185	; 0xb9
    68d6:	f001 fbdb 	bl	8090 <assert_print>
    68da:	4912      	ldr	r1, [pc, #72]	; (6924 <z_set_prio+0xfc>)
    68dc:	481c      	ldr	r0, [pc, #112]	; (6950 <z_set_prio+0x128>)
    68de:	f001 fbd7 	bl	8090 <assert_print>
    68e2:	4811      	ldr	r0, [pc, #68]	; (6928 <z_set_prio+0x100>)
    68e4:	21b9      	movs	r1, #185	; 0xb9
    68e6:	f001 fbcc 	bl	8082 <assert_post_action>
	__asm__ volatile(
    68ea:	f387 8811 	msr	BASEPRI, r7
    68ee:	f3bf 8f6f 	isb	sy
}
    68f2:	4620      	mov	r0, r4
    68f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    68f6:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    68fa:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    68fe:	42b0      	cmp	r0, r6
    6900:	d00b      	beq.n	691a <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6902:	4286      	cmp	r6, r0
    6904:	dd09      	ble.n	691a <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    6906:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    6908:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    690c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    690e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    6910:	2001      	movs	r0, #1
    6912:	f7ff fafb 	bl	5f0c <update_cache>
    6916:	2401      	movs	r4, #1
    6918:	e7d5      	b.n	68c6 <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    691a:	42a9      	cmp	r1, r5
    691c:	d0cc      	beq.n	68b8 <z_set_prio+0x90>
    691e:	682d      	ldr	r5, [r5, #0]
    6920:	e7c9      	b.n	68b6 <z_set_prio+0x8e>
    6922:	bf00      	nop
    6924:	20000a1c 	.word	0x20000a1c
    6928:	0000908d 	.word	0x0000908d
    692c:	000090e6 	.word	0x000090e6
    6930:	00008f43 	.word	0x00008f43
    6934:	000090fb 	.word	0x000090fb
    6938:	20000a00 	.word	0x20000a00
    693c:	200001e0 	.word	0x200001e0
    6940:	0000a4df 	.word	0x0000a4df
    6944:	0000a496 	.word	0x0000a496
    6948:	200009e0 	.word	0x200009e0
    694c:	000090ba 	.word	0x000090ba
    6950:	000090d1 	.word	0x000090d1

00006954 <z_impl_k_thread_suspend>:
{
    6954:	b570      	push	{r4, r5, r6, lr}
    6956:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6958:	3018      	adds	r0, #24
    695a:	f000 fca7 	bl	72ac <z_abort_timeout>
	__asm__ volatile(
    695e:	f04f 0320 	mov.w	r3, #32
    6962:	f3ef 8611 	mrs	r6, BASEPRI
    6966:	f383 8812 	msr	BASEPRI_MAX, r3
    696a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    696e:	4825      	ldr	r0, [pc, #148]	; (6a04 <z_impl_k_thread_suspend+0xb0>)
    6970:	f7fe ffda 	bl	5928 <z_spin_lock_valid>
    6974:	b968      	cbnz	r0, 6992 <z_impl_k_thread_suspend+0x3e>
    6976:	4a24      	ldr	r2, [pc, #144]	; (6a08 <z_impl_k_thread_suspend+0xb4>)
    6978:	4924      	ldr	r1, [pc, #144]	; (6a0c <z_impl_k_thread_suspend+0xb8>)
    697a:	4825      	ldr	r0, [pc, #148]	; (6a10 <z_impl_k_thread_suspend+0xbc>)
    697c:	238e      	movs	r3, #142	; 0x8e
    697e:	f001 fb87 	bl	8090 <assert_print>
    6982:	4920      	ldr	r1, [pc, #128]	; (6a04 <z_impl_k_thread_suspend+0xb0>)
    6984:	4823      	ldr	r0, [pc, #140]	; (6a14 <z_impl_k_thread_suspend+0xc0>)
    6986:	f001 fb83 	bl	8090 <assert_print>
    698a:	481f      	ldr	r0, [pc, #124]	; (6a08 <z_impl_k_thread_suspend+0xb4>)
    698c:	218e      	movs	r1, #142	; 0x8e
    698e:	f001 fb78 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6992:	481c      	ldr	r0, [pc, #112]	; (6a04 <z_impl_k_thread_suspend+0xb0>)
    6994:	f7fe ffe6 	bl	5964 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6998:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    699c:	7b63      	ldrb	r3, [r4, #13]
    699e:	2a00      	cmp	r2, #0
    69a0:	da06      	bge.n	69b0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    69a6:	481c      	ldr	r0, [pc, #112]	; (6a18 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    69a8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    69aa:	4621      	mov	r1, r4
    69ac:	f7ff fd68 	bl	6480 <z_priq_dumb_remove>
		update_cache(thread == _current);
    69b0:	4d1a      	ldr	r5, [pc, #104]	; (6a1c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    69b2:	7b63      	ldrb	r3, [r4, #13]
    69b4:	68a8      	ldr	r0, [r5, #8]
    69b6:	f043 0310 	orr.w	r3, r3, #16
    69ba:	7363      	strb	r3, [r4, #13]
    69bc:	1b03      	subs	r3, r0, r4
    69be:	4258      	negs	r0, r3
    69c0:	4158      	adcs	r0, r3
    69c2:	f7ff faa3 	bl	5f0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69c6:	480f      	ldr	r0, [pc, #60]	; (6a04 <z_impl_k_thread_suspend+0xb0>)
    69c8:	f7fe ffbc 	bl	5944 <z_spin_unlock_valid>
    69cc:	b968      	cbnz	r0, 69ea <z_impl_k_thread_suspend+0x96>
    69ce:	4a0e      	ldr	r2, [pc, #56]	; (6a08 <z_impl_k_thread_suspend+0xb4>)
    69d0:	4913      	ldr	r1, [pc, #76]	; (6a20 <z_impl_k_thread_suspend+0xcc>)
    69d2:	480f      	ldr	r0, [pc, #60]	; (6a10 <z_impl_k_thread_suspend+0xbc>)
    69d4:	23b9      	movs	r3, #185	; 0xb9
    69d6:	f001 fb5b 	bl	8090 <assert_print>
    69da:	490a      	ldr	r1, [pc, #40]	; (6a04 <z_impl_k_thread_suspend+0xb0>)
    69dc:	4811      	ldr	r0, [pc, #68]	; (6a24 <z_impl_k_thread_suspend+0xd0>)
    69de:	f001 fb57 	bl	8090 <assert_print>
    69e2:	4809      	ldr	r0, [pc, #36]	; (6a08 <z_impl_k_thread_suspend+0xb4>)
    69e4:	21b9      	movs	r1, #185	; 0xb9
    69e6:	f001 fb4c 	bl	8082 <assert_post_action>
	__asm__ volatile(
    69ea:	f386 8811 	msr	BASEPRI, r6
    69ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    69f2:	68ab      	ldr	r3, [r5, #8]
    69f4:	42a3      	cmp	r3, r4
    69f6:	d103      	bne.n	6a00 <z_impl_k_thread_suspend+0xac>
}
    69f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    69fc:	f001 bf3b 	b.w	8876 <z_reschedule_unlocked>
}
    6a00:	bd70      	pop	{r4, r5, r6, pc}
    6a02:	bf00      	nop
    6a04:	20000a1c 	.word	0x20000a1c
    6a08:	0000908d 	.word	0x0000908d
    6a0c:	000090e6 	.word	0x000090e6
    6a10:	00008f43 	.word	0x00008f43
    6a14:	000090fb 	.word	0x000090fb
    6a18:	20000a00 	.word	0x20000a00
    6a1c:	200009e0 	.word	0x200009e0
    6a20:	000090ba 	.word	0x000090ba
    6a24:	000090d1 	.word	0x000090d1

00006a28 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    6a28:	6883      	ldr	r3, [r0, #8]
{
    6a2a:	b510      	push	{r4, lr}
    6a2c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6a2e:	b95b      	cbnz	r3, 6a48 <unpend_thread_no_timeout+0x20>
    6a30:	490b      	ldr	r1, [pc, #44]	; (6a60 <unpend_thread_no_timeout+0x38>)
    6a32:	480c      	ldr	r0, [pc, #48]	; (6a64 <unpend_thread_no_timeout+0x3c>)
    6a34:	4a0c      	ldr	r2, [pc, #48]	; (6a68 <unpend_thread_no_timeout+0x40>)
    6a36:	f240 23b9 	movw	r3, #697	; 0x2b9
    6a3a:	f001 fb29 	bl	8090 <assert_print>
    6a3e:	480a      	ldr	r0, [pc, #40]	; (6a68 <unpend_thread_no_timeout+0x40>)
    6a40:	f240 21b9 	movw	r1, #697	; 0x2b9
    6a44:	f001 fb1d 	bl	8082 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6a48:	68a0      	ldr	r0, [r4, #8]
    6a4a:	4621      	mov	r1, r4
    6a4c:	f7ff fd18 	bl	6480 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6a50:	7b63      	ldrb	r3, [r4, #13]
    6a52:	f023 0302 	bic.w	r3, r3, #2
    6a56:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6a58:	2300      	movs	r3, #0
    6a5a:	60a3      	str	r3, [r4, #8]
}
    6a5c:	bd10      	pop	{r4, pc}
    6a5e:	bf00      	nop
    6a60:	0000a531 	.word	0x0000a531
    6a64:	00008f43 	.word	0x00008f43
    6a68:	0000a496 	.word	0x0000a496

00006a6c <z_thread_timeout>:
{
    6a6c:	b570      	push	{r4, r5, r6, lr}
    6a6e:	4604      	mov	r4, r0
	__asm__ volatile(
    6a70:	f04f 0320 	mov.w	r3, #32
    6a74:	f3ef 8611 	mrs	r6, BASEPRI
    6a78:	f383 8812 	msr	BASEPRI_MAX, r3
    6a7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a80:	4820      	ldr	r0, [pc, #128]	; (6b04 <z_thread_timeout+0x98>)
    6a82:	f7fe ff51 	bl	5928 <z_spin_lock_valid>
    6a86:	b968      	cbnz	r0, 6aa4 <z_thread_timeout+0x38>
    6a88:	4a1f      	ldr	r2, [pc, #124]	; (6b08 <z_thread_timeout+0x9c>)
    6a8a:	4920      	ldr	r1, [pc, #128]	; (6b0c <z_thread_timeout+0xa0>)
    6a8c:	4820      	ldr	r0, [pc, #128]	; (6b10 <z_thread_timeout+0xa4>)
    6a8e:	238e      	movs	r3, #142	; 0x8e
    6a90:	f001 fafe 	bl	8090 <assert_print>
    6a94:	491b      	ldr	r1, [pc, #108]	; (6b04 <z_thread_timeout+0x98>)
    6a96:	481f      	ldr	r0, [pc, #124]	; (6b14 <z_thread_timeout+0xa8>)
    6a98:	f001 fafa 	bl	8090 <assert_print>
    6a9c:	481a      	ldr	r0, [pc, #104]	; (6b08 <z_thread_timeout+0x9c>)
    6a9e:	218e      	movs	r1, #142	; 0x8e
    6aa0:	f001 faef 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6aa4:	4817      	ldr	r0, [pc, #92]	; (6b04 <z_thread_timeout+0x98>)
    6aa6:	f7fe ff5d 	bl	5964 <z_spin_lock_set_owner>
		if (!killed) {
    6aaa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6aae:	f013 0f28 	tst.w	r3, #40	; 0x28
    6ab2:	d110      	bne.n	6ad6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6ab4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6ab8:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6abc:	b113      	cbz	r3, 6ac4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6abe:	4628      	mov	r0, r5
    6ac0:	f7ff ffb2 	bl	6a28 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6ac4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6ac8:	f023 0314 	bic.w	r3, r3, #20
    6acc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6ad0:	4628      	mov	r0, r5
    6ad2:	f7ff fa53 	bl	5f7c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ad6:	480b      	ldr	r0, [pc, #44]	; (6b04 <z_thread_timeout+0x98>)
    6ad8:	f7fe ff34 	bl	5944 <z_spin_unlock_valid>
    6adc:	b968      	cbnz	r0, 6afa <z_thread_timeout+0x8e>
    6ade:	4a0a      	ldr	r2, [pc, #40]	; (6b08 <z_thread_timeout+0x9c>)
    6ae0:	490d      	ldr	r1, [pc, #52]	; (6b18 <z_thread_timeout+0xac>)
    6ae2:	480b      	ldr	r0, [pc, #44]	; (6b10 <z_thread_timeout+0xa4>)
    6ae4:	23b9      	movs	r3, #185	; 0xb9
    6ae6:	f001 fad3 	bl	8090 <assert_print>
    6aea:	4906      	ldr	r1, [pc, #24]	; (6b04 <z_thread_timeout+0x98>)
    6aec:	480b      	ldr	r0, [pc, #44]	; (6b1c <z_thread_timeout+0xb0>)
    6aee:	f001 facf 	bl	8090 <assert_print>
    6af2:	4805      	ldr	r0, [pc, #20]	; (6b08 <z_thread_timeout+0x9c>)
    6af4:	21b9      	movs	r1, #185	; 0xb9
    6af6:	f001 fac4 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6afa:	f386 8811 	msr	BASEPRI, r6
    6afe:	f3bf 8f6f 	isb	sy
}
    6b02:	bd70      	pop	{r4, r5, r6, pc}
    6b04:	20000a1c 	.word	0x20000a1c
    6b08:	0000908d 	.word	0x0000908d
    6b0c:	000090e6 	.word	0x000090e6
    6b10:	00008f43 	.word	0x00008f43
    6b14:	000090fb 	.word	0x000090fb
    6b18:	000090ba 	.word	0x000090ba
    6b1c:	000090d1 	.word	0x000090d1

00006b20 <z_unpend_first_thread>:
{
    6b20:	b570      	push	{r4, r5, r6, lr}
    6b22:	4605      	mov	r5, r0
	__asm__ volatile(
    6b24:	f04f 0320 	mov.w	r3, #32
    6b28:	f3ef 8611 	mrs	r6, BASEPRI
    6b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    6b30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b34:	481c      	ldr	r0, [pc, #112]	; (6ba8 <z_unpend_first_thread+0x88>)
    6b36:	f7fe fef7 	bl	5928 <z_spin_lock_valid>
    6b3a:	b968      	cbnz	r0, 6b58 <z_unpend_first_thread+0x38>
    6b3c:	4a1b      	ldr	r2, [pc, #108]	; (6bac <z_unpend_first_thread+0x8c>)
    6b3e:	491c      	ldr	r1, [pc, #112]	; (6bb0 <z_unpend_first_thread+0x90>)
    6b40:	481c      	ldr	r0, [pc, #112]	; (6bb4 <z_unpend_first_thread+0x94>)
    6b42:	238e      	movs	r3, #142	; 0x8e
    6b44:	f001 faa4 	bl	8090 <assert_print>
    6b48:	4917      	ldr	r1, [pc, #92]	; (6ba8 <z_unpend_first_thread+0x88>)
    6b4a:	481b      	ldr	r0, [pc, #108]	; (6bb8 <z_unpend_first_thread+0x98>)
    6b4c:	f001 faa0 	bl	8090 <assert_print>
    6b50:	4816      	ldr	r0, [pc, #88]	; (6bac <z_unpend_first_thread+0x8c>)
    6b52:	218e      	movs	r1, #142	; 0x8e
    6b54:	f001 fa95 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b58:	4813      	ldr	r0, [pc, #76]	; (6ba8 <z_unpend_first_thread+0x88>)
    6b5a:	f7fe ff03 	bl	5964 <z_spin_lock_set_owner>
	return list->head == list;
    6b5e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b60:	42a5      	cmp	r5, r4
    6b62:	d01f      	beq.n	6ba4 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    6b64:	b134      	cbz	r4, 6b74 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    6b66:	4620      	mov	r0, r4
    6b68:	f7ff ff5e 	bl	6a28 <unpend_thread_no_timeout>
    6b6c:	f104 0018 	add.w	r0, r4, #24
    6b70:	f000 fb9c 	bl	72ac <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b74:	480c      	ldr	r0, [pc, #48]	; (6ba8 <z_unpend_first_thread+0x88>)
    6b76:	f7fe fee5 	bl	5944 <z_spin_unlock_valid>
    6b7a:	b968      	cbnz	r0, 6b98 <z_unpend_first_thread+0x78>
    6b7c:	4a0b      	ldr	r2, [pc, #44]	; (6bac <z_unpend_first_thread+0x8c>)
    6b7e:	490f      	ldr	r1, [pc, #60]	; (6bbc <z_unpend_first_thread+0x9c>)
    6b80:	480c      	ldr	r0, [pc, #48]	; (6bb4 <z_unpend_first_thread+0x94>)
    6b82:	23b9      	movs	r3, #185	; 0xb9
    6b84:	f001 fa84 	bl	8090 <assert_print>
    6b88:	4907      	ldr	r1, [pc, #28]	; (6ba8 <z_unpend_first_thread+0x88>)
    6b8a:	480d      	ldr	r0, [pc, #52]	; (6bc0 <z_unpend_first_thread+0xa0>)
    6b8c:	f001 fa80 	bl	8090 <assert_print>
    6b90:	4806      	ldr	r0, [pc, #24]	; (6bac <z_unpend_first_thread+0x8c>)
    6b92:	21b9      	movs	r1, #185	; 0xb9
    6b94:	f001 fa75 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6b98:	f386 8811 	msr	BASEPRI, r6
    6b9c:	f3bf 8f6f 	isb	sy
}
    6ba0:	4620      	mov	r0, r4
    6ba2:	bd70      	pop	{r4, r5, r6, pc}
    6ba4:	2400      	movs	r4, #0
    6ba6:	e7e5      	b.n	6b74 <z_unpend_first_thread+0x54>
    6ba8:	20000a1c 	.word	0x20000a1c
    6bac:	0000908d 	.word	0x0000908d
    6bb0:	000090e6 	.word	0x000090e6
    6bb4:	00008f43 	.word	0x00008f43
    6bb8:	000090fb 	.word	0x000090fb
    6bbc:	000090ba 	.word	0x000090ba
    6bc0:	000090d1 	.word	0x000090d1

00006bc4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6bc4:	4b04      	ldr	r3, [pc, #16]	; (6bd8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6bc6:	2100      	movs	r1, #0
    6bc8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6bcc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6bd0:	4608      	mov	r0, r1
    6bd2:	f7ff ba1f 	b.w	6014 <k_sched_time_slice_set>
    6bd6:	bf00      	nop
    6bd8:	200009e0 	.word	0x200009e0

00006bdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6be2:	b173      	cbz	r3, 6c02 <z_impl_k_yield+0x26>
    6be4:	493f      	ldr	r1, [pc, #252]	; (6ce4 <z_impl_k_yield+0x108>)
    6be6:	4a40      	ldr	r2, [pc, #256]	; (6ce8 <z_impl_k_yield+0x10c>)
    6be8:	4840      	ldr	r0, [pc, #256]	; (6cec <z_impl_k_yield+0x110>)
    6bea:	f240 5332 	movw	r3, #1330	; 0x532
    6bee:	f001 fa4f 	bl	8090 <assert_print>
    6bf2:	483f      	ldr	r0, [pc, #252]	; (6cf0 <z_impl_k_yield+0x114>)
    6bf4:	f001 fa4c 	bl	8090 <assert_print>
    6bf8:	483b      	ldr	r0, [pc, #236]	; (6ce8 <z_impl_k_yield+0x10c>)
    6bfa:	f240 5132 	movw	r1, #1330	; 0x532
    6bfe:	f001 fa40 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6c02:	f04f 0320 	mov.w	r3, #32
    6c06:	f3ef 8611 	mrs	r6, BASEPRI
    6c0a:	f383 8812 	msr	BASEPRI_MAX, r3
    6c0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c12:	4838      	ldr	r0, [pc, #224]	; (6cf4 <z_impl_k_yield+0x118>)
    6c14:	f7fe fe88 	bl	5928 <z_spin_lock_valid>
    6c18:	b968      	cbnz	r0, 6c36 <z_impl_k_yield+0x5a>
    6c1a:	4a37      	ldr	r2, [pc, #220]	; (6cf8 <z_impl_k_yield+0x11c>)
    6c1c:	4937      	ldr	r1, [pc, #220]	; (6cfc <z_impl_k_yield+0x120>)
    6c1e:	4833      	ldr	r0, [pc, #204]	; (6cec <z_impl_k_yield+0x110>)
    6c20:	238e      	movs	r3, #142	; 0x8e
    6c22:	f001 fa35 	bl	8090 <assert_print>
    6c26:	4933      	ldr	r1, [pc, #204]	; (6cf4 <z_impl_k_yield+0x118>)
    6c28:	4835      	ldr	r0, [pc, #212]	; (6d00 <z_impl_k_yield+0x124>)
    6c2a:	f001 fa31 	bl	8090 <assert_print>
    6c2e:	4832      	ldr	r0, [pc, #200]	; (6cf8 <z_impl_k_yield+0x11c>)
    6c30:	218e      	movs	r1, #142	; 0x8e
    6c32:	f001 fa26 	bl	8082 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6c36:	4d33      	ldr	r5, [pc, #204]	; (6d04 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    6c38:	482e      	ldr	r0, [pc, #184]	; (6cf4 <z_impl_k_yield+0x118>)
    6c3a:	f7fe fe93 	bl	5964 <z_spin_lock_set_owner>
    6c3e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c40:	7b4b      	ldrb	r3, [r1, #13]
    6c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c46:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c48:	f105 0020 	add.w	r0, r5, #32
    6c4c:	f7ff fc18 	bl	6480 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6c50:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6c52:	7b63      	ldrb	r3, [r4, #13]
    6c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c58:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6c5a:	4b2b      	ldr	r3, [pc, #172]	; (6d08 <z_impl_k_yield+0x12c>)
    6c5c:	429c      	cmp	r4, r3
    6c5e:	d109      	bne.n	6c74 <z_impl_k_yield+0x98>
    6c60:	492a      	ldr	r1, [pc, #168]	; (6d0c <z_impl_k_yield+0x130>)
    6c62:	4822      	ldr	r0, [pc, #136]	; (6cec <z_impl_k_yield+0x110>)
    6c64:	4a20      	ldr	r2, [pc, #128]	; (6ce8 <z_impl_k_yield+0x10c>)
    6c66:	23ba      	movs	r3, #186	; 0xba
    6c68:	f001 fa12 	bl	8090 <assert_print>
    6c6c:	481e      	ldr	r0, [pc, #120]	; (6ce8 <z_impl_k_yield+0x10c>)
    6c6e:	21ba      	movs	r1, #186	; 0xba
    6c70:	f001 fa07 	bl	8082 <assert_post_action>
	return list->head == list;
    6c74:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c76:	4926      	ldr	r1, [pc, #152]	; (6d10 <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    6c78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c7a:	428b      	cmp	r3, r1
    6c7c:	bf08      	it	eq
    6c7e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c80:	b923      	cbnz	r3, 6c8c <z_impl_k_yield+0xb0>
	node->prev = tail;
    6c82:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    6c86:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6c88:	626c      	str	r4, [r5, #36]	; 0x24
}
    6c8a:	e00c      	b.n	6ca6 <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    6c8c:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6c90:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    6c94:	42b8      	cmp	r0, r7
    6c96:	d020      	beq.n	6cda <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c98:	4287      	cmp	r7, r0
    6c9a:	dd1e      	ble.n	6cda <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    6c9c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6c9e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6ca2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6ca4:	605c      	str	r4, [r3, #4]
	update_cache(1);
    6ca6:	2001      	movs	r0, #1
    6ca8:	f7ff f930 	bl	5f0c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6cac:	4811      	ldr	r0, [pc, #68]	; (6cf4 <z_impl_k_yield+0x118>)
    6cae:	f7fe fe49 	bl	5944 <z_spin_unlock_valid>
    6cb2:	b968      	cbnz	r0, 6cd0 <z_impl_k_yield+0xf4>
    6cb4:	4a10      	ldr	r2, [pc, #64]	; (6cf8 <z_impl_k_yield+0x11c>)
    6cb6:	4917      	ldr	r1, [pc, #92]	; (6d14 <z_impl_k_yield+0x138>)
    6cb8:	480c      	ldr	r0, [pc, #48]	; (6cec <z_impl_k_yield+0x110>)
    6cba:	23d0      	movs	r3, #208	; 0xd0
    6cbc:	f001 f9e8 	bl	8090 <assert_print>
    6cc0:	490c      	ldr	r1, [pc, #48]	; (6cf4 <z_impl_k_yield+0x118>)
    6cc2:	4815      	ldr	r0, [pc, #84]	; (6d18 <z_impl_k_yield+0x13c>)
    6cc4:	f001 f9e4 	bl	8090 <assert_print>
    6cc8:	480b      	ldr	r0, [pc, #44]	; (6cf8 <z_impl_k_yield+0x11c>)
    6cca:	21d0      	movs	r1, #208	; 0xd0
    6ccc:	f001 f9d9 	bl	8082 <assert_post_action>
    6cd0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    6cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6cd6:	f7fb bcfb 	b.w	26d0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6cda:	4293      	cmp	r3, r2
    6cdc:	d0d1      	beq.n	6c82 <z_impl_k_yield+0xa6>
    6cde:	681b      	ldr	r3, [r3, #0]
    6ce0:	e7ce      	b.n	6c80 <z_impl_k_yield+0xa4>
    6ce2:	bf00      	nop
    6ce4:	0000a37b 	.word	0x0000a37b
    6ce8:	0000a496 	.word	0x0000a496
    6cec:	00008f43 	.word	0x00008f43
    6cf0:	0000a3f4 	.word	0x0000a3f4
    6cf4:	20000a1c 	.word	0x20000a1c
    6cf8:	0000908d 	.word	0x0000908d
    6cfc:	000090e6 	.word	0x000090e6
    6d00:	000090fb 	.word	0x000090fb
    6d04:	200009e0 	.word	0x200009e0
    6d08:	200001e0 	.word	0x200001e0
    6d0c:	0000a4df 	.word	0x0000a4df
    6d10:	20000a00 	.word	0x20000a00
    6d14:	000090ba 	.word	0x000090ba
    6d18:	000090d1 	.word	0x000090d1

00006d1c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    6d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d20:	4605      	mov	r5, r0
    6d22:	460e      	mov	r6, r1
    6d24:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6d28:	b173      	cbz	r3, 6d48 <z_tick_sleep+0x2c>
    6d2a:	4941      	ldr	r1, [pc, #260]	; (6e30 <z_tick_sleep+0x114>)
    6d2c:	4a41      	ldr	r2, [pc, #260]	; (6e34 <z_tick_sleep+0x118>)
    6d2e:	4842      	ldr	r0, [pc, #264]	; (6e38 <z_tick_sleep+0x11c>)
    6d30:	f240 534e 	movw	r3, #1358	; 0x54e
    6d34:	f001 f9ac 	bl	8090 <assert_print>
    6d38:	4840      	ldr	r0, [pc, #256]	; (6e3c <z_tick_sleep+0x120>)
    6d3a:	f001 f9a9 	bl	8090 <assert_print>
    6d3e:	483d      	ldr	r0, [pc, #244]	; (6e34 <z_tick_sleep+0x118>)
    6d40:	f240 514e 	movw	r1, #1358	; 0x54e
    6d44:	f001 f99d 	bl	8082 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6d48:	ea55 0306 	orrs.w	r3, r5, r6
    6d4c:	d103      	bne.n	6d56 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    6d4e:	f7ff ff45 	bl	6bdc <z_impl_k_yield>
		k_yield();
		return 0;
    6d52:	2000      	movs	r0, #0
    6d54:	e066      	b.n	6e24 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    6d56:	1caa      	adds	r2, r5, #2
    6d58:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    6d5c:	db64      	blt.n	6e28 <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6d5e:	f001 fd94 	bl	888a <sys_clock_tick_get_32>
    6d62:	1944      	adds	r4, r0, r5
    6d64:	f04f 0320 	mov.w	r3, #32
    6d68:	f3ef 8811 	mrs	r8, BASEPRI
    6d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d74:	4832      	ldr	r0, [pc, #200]	; (6e40 <z_tick_sleep+0x124>)
    6d76:	f7fe fdd7 	bl	5928 <z_spin_lock_valid>
    6d7a:	b968      	cbnz	r0, 6d98 <z_tick_sleep+0x7c>
    6d7c:	4a31      	ldr	r2, [pc, #196]	; (6e44 <z_tick_sleep+0x128>)
    6d7e:	4932      	ldr	r1, [pc, #200]	; (6e48 <z_tick_sleep+0x12c>)
    6d80:	482d      	ldr	r0, [pc, #180]	; (6e38 <z_tick_sleep+0x11c>)
    6d82:	238e      	movs	r3, #142	; 0x8e
    6d84:	f001 f984 	bl	8090 <assert_print>
    6d88:	492d      	ldr	r1, [pc, #180]	; (6e40 <z_tick_sleep+0x124>)
    6d8a:	4830      	ldr	r0, [pc, #192]	; (6e4c <z_tick_sleep+0x130>)
    6d8c:	f001 f980 	bl	8090 <assert_print>
    6d90:	482c      	ldr	r0, [pc, #176]	; (6e44 <z_tick_sleep+0x128>)
    6d92:	218e      	movs	r1, #142	; 0x8e
    6d94:	f001 f975 	bl	8082 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    6d98:	4f2d      	ldr	r7, [pc, #180]	; (6e50 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    6d9a:	4829      	ldr	r0, [pc, #164]	; (6e40 <z_tick_sleep+0x124>)
    6d9c:	f7fe fde2 	bl	5964 <z_spin_lock_set_owner>
    6da0:	4b2c      	ldr	r3, [pc, #176]	; (6e54 <z_tick_sleep+0x138>)
    6da2:	68b8      	ldr	r0, [r7, #8]
    6da4:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    6da6:	f7ff fc57 	bl	6658 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6daa:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6dac:	492a      	ldr	r1, [pc, #168]	; (6e58 <z_tick_sleep+0x13c>)
    6dae:	462a      	mov	r2, r5
    6db0:	4633      	mov	r3, r6
    6db2:	3018      	adds	r0, #24
    6db4:	f000 f9b0 	bl	7118 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6db8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6dba:	4821      	ldr	r0, [pc, #132]	; (6e40 <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6dbc:	7b53      	ldrb	r3, [r2, #13]
    6dbe:	f043 0310 	orr.w	r3, r3, #16
    6dc2:	7353      	strb	r3, [r2, #13]
    6dc4:	f7fe fdbe 	bl	5944 <z_spin_unlock_valid>
    6dc8:	b968      	cbnz	r0, 6de6 <z_tick_sleep+0xca>
    6dca:	4a1e      	ldr	r2, [pc, #120]	; (6e44 <z_tick_sleep+0x128>)
    6dcc:	4923      	ldr	r1, [pc, #140]	; (6e5c <z_tick_sleep+0x140>)
    6dce:	481a      	ldr	r0, [pc, #104]	; (6e38 <z_tick_sleep+0x11c>)
    6dd0:	23d0      	movs	r3, #208	; 0xd0
    6dd2:	f001 f95d 	bl	8090 <assert_print>
    6dd6:	491a      	ldr	r1, [pc, #104]	; (6e40 <z_tick_sleep+0x124>)
    6dd8:	4821      	ldr	r0, [pc, #132]	; (6e60 <z_tick_sleep+0x144>)
    6dda:	f001 f959 	bl	8090 <assert_print>
    6dde:	4819      	ldr	r0, [pc, #100]	; (6e44 <z_tick_sleep+0x128>)
    6de0:	21d0      	movs	r1, #208	; 0xd0
    6de2:	f001 f94e 	bl	8082 <assert_post_action>
    6de6:	4640      	mov	r0, r8
    6de8:	f7fb fc72 	bl	26d0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    6dec:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    6dee:	7b5b      	ldrb	r3, [r3, #13]
    6df0:	06db      	lsls	r3, r3, #27
    6df2:	d50e      	bpl.n	6e12 <z_tick_sleep+0xf6>
    6df4:	491b      	ldr	r1, [pc, #108]	; (6e64 <z_tick_sleep+0x148>)
    6df6:	4a0f      	ldr	r2, [pc, #60]	; (6e34 <z_tick_sleep+0x118>)
    6df8:	480f      	ldr	r0, [pc, #60]	; (6e38 <z_tick_sleep+0x11c>)
    6dfa:	f240 536f 	movw	r3, #1391	; 0x56f
    6dfe:	f001 f947 	bl	8090 <assert_print>
    6e02:	480e      	ldr	r0, [pc, #56]	; (6e3c <z_tick_sleep+0x120>)
    6e04:	f001 f944 	bl	8090 <assert_print>
    6e08:	480a      	ldr	r0, [pc, #40]	; (6e34 <z_tick_sleep+0x118>)
    6e0a:	f240 516f 	movw	r1, #1391	; 0x56f
    6e0e:	f001 f938 	bl	8082 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6e12:	f001 fd3a 	bl	888a <sys_clock_tick_get_32>
    6e16:	1a20      	subs	r0, r4, r0
    6e18:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6e1c:	2801      	cmp	r0, #1
    6e1e:	f173 0300 	sbcs.w	r3, r3, #0
    6e22:	db96      	blt.n	6d52 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    6e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6e28:	f06f 0401 	mvn.w	r4, #1
    6e2c:	1b64      	subs	r4, r4, r5
    6e2e:	e799      	b.n	6d64 <z_tick_sleep+0x48>
    6e30:	0000a37b 	.word	0x0000a37b
    6e34:	0000a496 	.word	0x0000a496
    6e38:	00008f43 	.word	0x00008f43
    6e3c:	0000a3f4 	.word	0x0000a3f4
    6e40:	20000a1c 	.word	0x20000a1c
    6e44:	0000908d 	.word	0x0000908d
    6e48:	000090e6 	.word	0x000090e6
    6e4c:	000090fb 	.word	0x000090fb
    6e50:	200009e0 	.word	0x200009e0
    6e54:	20000a10 	.word	0x20000a10
    6e58:	00006a6d 	.word	0x00006a6d
    6e5c:	000090ba 	.word	0x000090ba
    6e60:	000090d1 	.word	0x000090d1
    6e64:	0000a548 	.word	0x0000a548

00006e68 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6e68:	b538      	push	{r3, r4, r5, lr}
    6e6a:	4605      	mov	r5, r0
    6e6c:	460c      	mov	r4, r1
    6e6e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6e72:	b173      	cbz	r3, 6e92 <z_impl_k_sleep+0x2a>
    6e74:	4913      	ldr	r1, [pc, #76]	; (6ec4 <z_impl_k_sleep+0x5c>)
    6e76:	4a14      	ldr	r2, [pc, #80]	; (6ec8 <z_impl_k_sleep+0x60>)
    6e78:	4814      	ldr	r0, [pc, #80]	; (6ecc <z_impl_k_sleep+0x64>)
    6e7a:	f240 537e 	movw	r3, #1406	; 0x57e
    6e7e:	f001 f907 	bl	8090 <assert_print>
    6e82:	4813      	ldr	r0, [pc, #76]	; (6ed0 <z_impl_k_sleep+0x68>)
    6e84:	f001 f904 	bl	8090 <assert_print>
    6e88:	480f      	ldr	r0, [pc, #60]	; (6ec8 <z_impl_k_sleep+0x60>)
    6e8a:	f240 517e 	movw	r1, #1406	; 0x57e
    6e8e:	f001 f8f8 	bl	8082 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6e92:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    6e96:	bf08      	it	eq
    6e98:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    6e9c:	d106      	bne.n	6eac <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    6e9e:	4b0d      	ldr	r3, [pc, #52]	; (6ed4 <z_impl_k_sleep+0x6c>)
    6ea0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6ea2:	f7ff fd57 	bl	6954 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6eaa:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    6eac:	4628      	mov	r0, r5
    6eae:	4621      	mov	r1, r4
    6eb0:	f7ff ff34 	bl	6d1c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6eb8:	fb80 0303 	smull	r0, r3, r0, r3
    6ebc:	0bc0      	lsrs	r0, r0, #15
    6ebe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    6ec2:	e7f2      	b.n	6eaa <z_impl_k_sleep+0x42>
    6ec4:	0000a37b 	.word	0x0000a37b
    6ec8:	0000a496 	.word	0x0000a496
    6ecc:	00008f43 	.word	0x00008f43
    6ed0:	0000a3f4 	.word	0x0000a3f4
    6ed4:	200009e0 	.word	0x200009e0

00006ed8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6ed8:	4b01      	ldr	r3, [pc, #4]	; (6ee0 <z_impl_z_current_get+0x8>)
    6eda:	6898      	ldr	r0, [r3, #8]
    6edc:	4770      	bx	lr
    6ede:	bf00      	nop
    6ee0:	200009e0 	.word	0x200009e0

00006ee4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ee8:	4604      	mov	r4, r0
    6eea:	f04f 0320 	mov.w	r3, #32
    6eee:	f3ef 8611 	mrs	r6, BASEPRI
    6ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ef6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6efa:	4848      	ldr	r0, [pc, #288]	; (701c <z_thread_abort+0x138>)
    6efc:	f7fe fd14 	bl	5928 <z_spin_lock_valid>
    6f00:	b968      	cbnz	r0, 6f1e <z_thread_abort+0x3a>
    6f02:	4a47      	ldr	r2, [pc, #284]	; (7020 <z_thread_abort+0x13c>)
    6f04:	4947      	ldr	r1, [pc, #284]	; (7024 <z_thread_abort+0x140>)
    6f06:	4848      	ldr	r0, [pc, #288]	; (7028 <z_thread_abort+0x144>)
    6f08:	238e      	movs	r3, #142	; 0x8e
    6f0a:	f001 f8c1 	bl	8090 <assert_print>
    6f0e:	4943      	ldr	r1, [pc, #268]	; (701c <z_thread_abort+0x138>)
    6f10:	4846      	ldr	r0, [pc, #280]	; (702c <z_thread_abort+0x148>)
    6f12:	f001 f8bd 	bl	8090 <assert_print>
    6f16:	4842      	ldr	r0, [pc, #264]	; (7020 <z_thread_abort+0x13c>)
    6f18:	218e      	movs	r1, #142	; 0x8e
    6f1a:	f001 f8b2 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    6f1e:	483f      	ldr	r0, [pc, #252]	; (701c <z_thread_abort+0x138>)
    6f20:	f7fe fd20 	bl	5964 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6f24:	7b63      	ldrb	r3, [r4, #13]
    6f26:	071a      	lsls	r2, r3, #28
    6f28:	d517      	bpl.n	6f5a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f2a:	483c      	ldr	r0, [pc, #240]	; (701c <z_thread_abort+0x138>)
    6f2c:	f7fe fd0a 	bl	5944 <z_spin_unlock_valid>
    6f30:	b968      	cbnz	r0, 6f4e <z_thread_abort+0x6a>
    6f32:	4a3b      	ldr	r2, [pc, #236]	; (7020 <z_thread_abort+0x13c>)
    6f34:	493e      	ldr	r1, [pc, #248]	; (7030 <z_thread_abort+0x14c>)
    6f36:	483c      	ldr	r0, [pc, #240]	; (7028 <z_thread_abort+0x144>)
    6f38:	23b9      	movs	r3, #185	; 0xb9
    6f3a:	f001 f8a9 	bl	8090 <assert_print>
    6f3e:	4937      	ldr	r1, [pc, #220]	; (701c <z_thread_abort+0x138>)
    6f40:	483c      	ldr	r0, [pc, #240]	; (7034 <z_thread_abort+0x150>)
    6f42:	f001 f8a5 	bl	8090 <assert_print>
    6f46:	4836      	ldr	r0, [pc, #216]	; (7020 <z_thread_abort+0x13c>)
    6f48:	21b9      	movs	r1, #185	; 0xb9
    6f4a:	f001 f89a 	bl	8082 <assert_post_action>
	__asm__ volatile(
    6f4e:	f386 8811 	msr	BASEPRI, r6
    6f52:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6f5a:	f023 0220 	bic.w	r2, r3, #32
    6f5e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6f62:	09d2      	lsrs	r2, r2, #7
    6f64:	d142      	bne.n	6fec <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6f66:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6f68:	68a3      	ldr	r3, [r4, #8]
    6f6a:	b113      	cbz	r3, 6f72 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    6f6c:	4620      	mov	r0, r4
    6f6e:	f7ff fd5b 	bl	6a28 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6f72:	f104 0018 	add.w	r0, r4, #24
    6f76:	f000 f999 	bl	72ac <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6f7a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6f7e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6f82:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f84:	42bd      	cmp	r5, r7
    6f86:	d001      	beq.n	6f8c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6f88:	2d00      	cmp	r5, #0
    6f8a:	d139      	bne.n	7000 <z_thread_abort+0x11c>
		update_cache(1);
    6f8c:	2001      	movs	r0, #1
    6f8e:	f7fe ffbd 	bl	5f0c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6f92:	4b29      	ldr	r3, [pc, #164]	; (7038 <z_thread_abort+0x154>)
    6f94:	689b      	ldr	r3, [r3, #8]
    6f96:	42a3      	cmp	r3, r4
    6f98:	d1c7      	bne.n	6f2a <z_thread_abort+0x46>
    6f9a:	f3ef 8305 	mrs	r3, IPSR
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d1c3      	bne.n	6f2a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fa2:	481e      	ldr	r0, [pc, #120]	; (701c <z_thread_abort+0x138>)
    6fa4:	f7fe fcce 	bl	5944 <z_spin_unlock_valid>
    6fa8:	b968      	cbnz	r0, 6fc6 <z_thread_abort+0xe2>
    6faa:	4a1d      	ldr	r2, [pc, #116]	; (7020 <z_thread_abort+0x13c>)
    6fac:	4920      	ldr	r1, [pc, #128]	; (7030 <z_thread_abort+0x14c>)
    6fae:	481e      	ldr	r0, [pc, #120]	; (7028 <z_thread_abort+0x144>)
    6fb0:	23d0      	movs	r3, #208	; 0xd0
    6fb2:	f001 f86d 	bl	8090 <assert_print>
    6fb6:	4919      	ldr	r1, [pc, #100]	; (701c <z_thread_abort+0x138>)
    6fb8:	481e      	ldr	r0, [pc, #120]	; (7034 <z_thread_abort+0x150>)
    6fba:	f001 f869 	bl	8090 <assert_print>
    6fbe:	4818      	ldr	r0, [pc, #96]	; (7020 <z_thread_abort+0x13c>)
    6fc0:	21d0      	movs	r1, #208	; 0xd0
    6fc2:	f001 f85e 	bl	8082 <assert_post_action>
    6fc6:	4630      	mov	r0, r6
    6fc8:	f7fb fb82 	bl	26d0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    6fcc:	4a1b      	ldr	r2, [pc, #108]	; (703c <z_thread_abort+0x158>)
    6fce:	491c      	ldr	r1, [pc, #112]	; (7040 <z_thread_abort+0x15c>)
    6fd0:	4815      	ldr	r0, [pc, #84]	; (7028 <z_thread_abort+0x144>)
    6fd2:	f240 63ac 	movw	r3, #1708	; 0x6ac
    6fd6:	f001 f85b 	bl	8090 <assert_print>
    6fda:	481a      	ldr	r0, [pc, #104]	; (7044 <z_thread_abort+0x160>)
    6fdc:	f001 f858 	bl	8090 <assert_print>
    6fe0:	4816      	ldr	r0, [pc, #88]	; (703c <z_thread_abort+0x158>)
    6fe2:	f240 61ac 	movw	r1, #1708	; 0x6ac
    6fe6:	f001 f84c 	bl	8082 <assert_post_action>
    6fea:	e79e      	b.n	6f2a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fec:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6ff0:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    6ff4:	4814      	ldr	r0, [pc, #80]	; (7048 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ff6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ff8:	4621      	mov	r1, r4
    6ffa:	f7ff fa41 	bl	6480 <z_priq_dumb_remove>
}
    6ffe:	e7b3      	b.n	6f68 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    7000:	4628      	mov	r0, r5
    7002:	f7ff fd11 	bl	6a28 <unpend_thread_no_timeout>
    7006:	f105 0018 	add.w	r0, r5, #24
    700a:	f000 f94f 	bl	72ac <z_abort_timeout>
    700e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7012:	4628      	mov	r0, r5
    7014:	f7fe ffb2 	bl	5f7c <ready_thread>
    7018:	e7b3      	b.n	6f82 <z_thread_abort+0x9e>
    701a:	bf00      	nop
    701c:	20000a1c 	.word	0x20000a1c
    7020:	0000908d 	.word	0x0000908d
    7024:	000090e6 	.word	0x000090e6
    7028:	00008f43 	.word	0x00008f43
    702c:	000090fb 	.word	0x000090fb
    7030:	000090ba 	.word	0x000090ba
    7034:	000090d1 	.word	0x000090d1
    7038:	200009e0 	.word	0x200009e0
    703c:	0000a496 	.word	0x0000a496
    7040:	0000a6a7 	.word	0x0000a6a7
    7044:	0000a588 	.word	0x0000a588
    7048:	20000a00 	.word	0x20000a00

0000704c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    704c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    704e:	4806      	ldr	r0, [pc, #24]	; (7068 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7050:	4a06      	ldr	r2, [pc, #24]	; (706c <z_data_copy+0x20>)
    7052:	4907      	ldr	r1, [pc, #28]	; (7070 <z_data_copy+0x24>)
    7054:	1a12      	subs	r2, r2, r0
    7056:	f001 fbc6 	bl	87e6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    705a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    705e:	4a05      	ldr	r2, [pc, #20]	; (7074 <z_data_copy+0x28>)
    7060:	4905      	ldr	r1, [pc, #20]	; (7078 <z_data_copy+0x2c>)
    7062:	4806      	ldr	r0, [pc, #24]	; (707c <z_data_copy+0x30>)
    7064:	f001 bbbf 	b.w	87e6 <z_early_memcpy>
    7068:	20000000 	.word	0x20000000
    706c:	200001c0 	.word	0x200001c0
    7070:	0000a788 	.word	0x0000a788
    7074:	00000000 	.word	0x00000000
    7078:	0000a788 	.word	0x0000a788
    707c:	20000000 	.word	0x20000000

00007080 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7080:	4b03      	ldr	r3, [pc, #12]	; (7090 <elapsed+0x10>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	b90b      	cbnz	r3, 708a <elapsed+0xa>
    7086:	f7fd b93f 	b.w	4308 <sys_clock_elapsed>
}
    708a:	2000      	movs	r0, #0
    708c:	4770      	bx	lr
    708e:	bf00      	nop
    7090:	20000a20 	.word	0x20000a20

00007094 <next_timeout>:
	return list->head == list;
    7094:	4b11      	ldr	r3, [pc, #68]	; (70dc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    7096:	b510      	push	{r4, lr}
    7098:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    709a:	429c      	cmp	r4, r3
    709c:	d10a      	bne.n	70b4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    709e:	f7ff ffef 	bl	7080 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    70a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    70a6:	4b0e      	ldr	r3, [pc, #56]	; (70e0 <next_timeout+0x4c>)
    70a8:	691b      	ldr	r3, [r3, #16]
    70aa:	b113      	cbz	r3, 70b2 <next_timeout+0x1e>
    70ac:	4298      	cmp	r0, r3
    70ae:	bfa8      	it	ge
    70b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    70b2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    70b4:	f7ff ffe4 	bl	7080 <elapsed>
	if ((to == NULL) ||
    70b8:	2c00      	cmp	r4, #0
    70ba:	d0f2      	beq.n	70a2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    70bc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    70c0:	1a1b      	subs	r3, r3, r0
    70c2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    70c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    70ca:	f172 0100 	sbcs.w	r1, r2, #0
    70ce:	dae8      	bge.n	70a2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    70d0:	2a00      	cmp	r2, #0
    70d2:	bfac      	ite	ge
    70d4:	4618      	movge	r0, r3
    70d6:	2000      	movlt	r0, #0
    70d8:	e7e5      	b.n	70a6 <next_timeout+0x12>
    70da:	bf00      	nop
    70dc:	200000dc 	.word	0x200000dc
    70e0:	200009e0 	.word	0x200009e0

000070e4 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    70e4:	4a0b      	ldr	r2, [pc, #44]	; (7114 <remove_timeout+0x30>)
    70e6:	6803      	ldr	r3, [r0, #0]
    70e8:	6852      	ldr	r2, [r2, #4]
    70ea:	4290      	cmp	r0, r2
{
    70ec:	b530      	push	{r4, r5, lr}
    70ee:	d009      	beq.n	7104 <remove_timeout+0x20>
	if (next(t) != NULL) {
    70f0:	b143      	cbz	r3, 7104 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    70f2:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    70f6:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    70fa:	1912      	adds	r2, r2, r4
    70fc:	eb41 0105 	adc.w	r1, r1, r5
    7100:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7104:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7106:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7108:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    710a:	2300      	movs	r3, #0
	node->prev = NULL;
    710c:	e9c0 3300 	strd	r3, r3, [r0]
}
    7110:	bd30      	pop	{r4, r5, pc}
    7112:	bf00      	nop
    7114:	200000dc 	.word	0x200000dc

00007118 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    711c:	bf08      	it	eq
    711e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    7122:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7126:	4604      	mov	r4, r0
    7128:	460e      	mov	r6, r1
    712a:	4691      	mov	r9, r2
    712c:	461d      	mov	r5, r3
    712e:	4617      	mov	r7, r2
    7130:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7132:	f000 8095 	beq.w	7260 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7136:	6803      	ldr	r3, [r0, #0]
    7138:	b163      	cbz	r3, 7154 <z_add_timeout+0x3c>
    713a:	494f      	ldr	r1, [pc, #316]	; (7278 <z_add_timeout+0x160>)
    713c:	4a4f      	ldr	r2, [pc, #316]	; (727c <z_add_timeout+0x164>)
    713e:	4850      	ldr	r0, [pc, #320]	; (7280 <z_add_timeout+0x168>)
    7140:	2363      	movs	r3, #99	; 0x63
    7142:	f000 ffa5 	bl	8090 <assert_print>
    7146:	484f      	ldr	r0, [pc, #316]	; (7284 <z_add_timeout+0x16c>)
    7148:	f000 ffa2 	bl	8090 <assert_print>
    714c:	484b      	ldr	r0, [pc, #300]	; (727c <z_add_timeout+0x164>)
    714e:	2163      	movs	r1, #99	; 0x63
    7150:	f000 ff97 	bl	8082 <assert_post_action>
	to->fn = fn;
    7154:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    7156:	f04f 0320 	mov.w	r3, #32
    715a:	f3ef 8611 	mrs	r6, BASEPRI
    715e:	f383 8812 	msr	BASEPRI_MAX, r3
    7162:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7166:	4848      	ldr	r0, [pc, #288]	; (7288 <z_add_timeout+0x170>)
    7168:	f7fe fbde 	bl	5928 <z_spin_lock_valid>
    716c:	b968      	cbnz	r0, 718a <z_add_timeout+0x72>
    716e:	4a47      	ldr	r2, [pc, #284]	; (728c <z_add_timeout+0x174>)
    7170:	4947      	ldr	r1, [pc, #284]	; (7290 <z_add_timeout+0x178>)
    7172:	4843      	ldr	r0, [pc, #268]	; (7280 <z_add_timeout+0x168>)
    7174:	238e      	movs	r3, #142	; 0x8e
    7176:	f000 ff8b 	bl	8090 <assert_print>
    717a:	4943      	ldr	r1, [pc, #268]	; (7288 <z_add_timeout+0x170>)
    717c:	4845      	ldr	r0, [pc, #276]	; (7294 <z_add_timeout+0x17c>)
    717e:	f000 ff87 	bl	8090 <assert_print>
    7182:	4842      	ldr	r0, [pc, #264]	; (728c <z_add_timeout+0x174>)
    7184:	218e      	movs	r1, #142	; 0x8e
    7186:	f000 ff7c 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    718a:	483f      	ldr	r0, [pc, #252]	; (7288 <z_add_timeout+0x170>)
    718c:	f7fe fbea 	bl	5964 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7190:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    7194:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    7198:	da22      	bge.n	71e0 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    719a:	493f      	ldr	r1, [pc, #252]	; (7298 <z_add_timeout+0x180>)
    719c:	e9d1 2000 	ldrd	r2, r0, [r1]
    71a0:	f06f 0301 	mvn.w	r3, #1
    71a4:	1a9b      	subs	r3, r3, r2
    71a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    71aa:	eb62 0000 	sbc.w	r0, r2, r0
    71ae:	1bdf      	subs	r7, r3, r7
    71b0:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    71b4:	2f01      	cmp	r7, #1
    71b6:	f170 0300 	sbcs.w	r3, r0, #0
    71ba:	da01      	bge.n	71c0 <z_add_timeout+0xa8>
    71bc:	2701      	movs	r7, #1
    71be:	2000      	movs	r0, #0
	return list->head == list;
    71c0:	4a36      	ldr	r2, [pc, #216]	; (729c <z_add_timeout+0x184>)
    71c2:	e9c4 7004 	strd	r7, r0, [r4, #16]
    71c6:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    71c8:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    71cc:	4293      	cmp	r3, r2
    71ce:	bf08      	it	eq
    71d0:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    71d2:	b973      	cbnz	r3, 71f2 <z_add_timeout+0xda>
	node->prev = tail;
    71d4:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    71d8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    71dc:	6054      	str	r4, [r2, #4]
}
    71de:	e01a      	b.n	7216 <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    71e0:	f7ff ff4e 	bl	7080 <elapsed>
    71e4:	3701      	adds	r7, #1
    71e6:	f145 0500 	adc.w	r5, r5, #0
    71ea:	183f      	adds	r7, r7, r0
    71ec:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    71f0:	e7e6      	b.n	71c0 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    71f2:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    71f6:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    71fa:	4281      	cmp	r1, r0
    71fc:	eb75 0e07 	sbcs.w	lr, r5, r7
    7200:	da30      	bge.n	7264 <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    7202:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    7204:	6859      	ldr	r1, [r3, #4]
    7206:	eb67 0705 	sbc.w	r7, r7, r5
    720a:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    720e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7212:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7214:	605c      	str	r4, [r3, #4]
	return list->head == list;
    7216:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7218:	4293      	cmp	r3, r2
    721a:	d00b      	beq.n	7234 <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    721c:	429c      	cmp	r4, r3
    721e:	d109      	bne.n	7234 <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7220:	f7ff ff38 	bl	7094 <next_timeout>

			if (next_time == 0 ||
    7224:	b118      	cbz	r0, 722e <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    7226:	4b1e      	ldr	r3, [pc, #120]	; (72a0 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    7228:	691b      	ldr	r3, [r3, #16]
    722a:	4283      	cmp	r3, r0
    722c:	d002      	beq.n	7234 <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    722e:	2100      	movs	r1, #0
    7230:	f7fd f838 	bl	42a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7234:	4814      	ldr	r0, [pc, #80]	; (7288 <z_add_timeout+0x170>)
    7236:	f7fe fb85 	bl	5944 <z_spin_unlock_valid>
    723a:	b968      	cbnz	r0, 7258 <z_add_timeout+0x140>
    723c:	4a13      	ldr	r2, [pc, #76]	; (728c <z_add_timeout+0x174>)
    723e:	4919      	ldr	r1, [pc, #100]	; (72a4 <z_add_timeout+0x18c>)
    7240:	480f      	ldr	r0, [pc, #60]	; (7280 <z_add_timeout+0x168>)
    7242:	23b9      	movs	r3, #185	; 0xb9
    7244:	f000 ff24 	bl	8090 <assert_print>
    7248:	490f      	ldr	r1, [pc, #60]	; (7288 <z_add_timeout+0x170>)
    724a:	4817      	ldr	r0, [pc, #92]	; (72a8 <z_add_timeout+0x190>)
    724c:	f000 ff20 	bl	8090 <assert_print>
    7250:	480e      	ldr	r0, [pc, #56]	; (728c <z_add_timeout+0x174>)
    7252:	21b9      	movs	r1, #185	; 0xb9
    7254:	f000 ff15 	bl	8082 <assert_post_action>
	__asm__ volatile(
    7258:	f386 8811 	msr	BASEPRI, r6
    725c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    7264:	1a09      	subs	r1, r1, r0
    7266:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    726a:	4563      	cmp	r3, ip
    726c:	e9c4 1504 	strd	r1, r5, [r4, #16]
    7270:	d0b0      	beq.n	71d4 <z_add_timeout+0xbc>
    7272:	681b      	ldr	r3, [r3, #0]
    7274:	e7ad      	b.n	71d2 <z_add_timeout+0xba>
    7276:	bf00      	nop
    7278:	0000a5ce 	.word	0x0000a5ce
    727c:	0000a5aa 	.word	0x0000a5aa
    7280:	00008f43 	.word	0x00008f43
    7284:	0000a3f4 	.word	0x0000a3f4
    7288:	20000a24 	.word	0x20000a24
    728c:	0000908d 	.word	0x0000908d
    7290:	000090e6 	.word	0x000090e6
    7294:	000090fb 	.word	0x000090fb
    7298:	200002e0 	.word	0x200002e0
    729c:	200000dc 	.word	0x200000dc
    72a0:	200009e0 	.word	0x200009e0
    72a4:	000090ba 	.word	0x000090ba
    72a8:	000090d1 	.word	0x000090d1

000072ac <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    72ac:	b538      	push	{r3, r4, r5, lr}
    72ae:	4604      	mov	r4, r0
	__asm__ volatile(
    72b0:	f04f 0320 	mov.w	r3, #32
    72b4:	f3ef 8511 	mrs	r5, BASEPRI
    72b8:	f383 8812 	msr	BASEPRI_MAX, r3
    72bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72c0:	481a      	ldr	r0, [pc, #104]	; (732c <z_abort_timeout+0x80>)
    72c2:	f7fe fb31 	bl	5928 <z_spin_lock_valid>
    72c6:	b968      	cbnz	r0, 72e4 <z_abort_timeout+0x38>
    72c8:	4a19      	ldr	r2, [pc, #100]	; (7330 <z_abort_timeout+0x84>)
    72ca:	491a      	ldr	r1, [pc, #104]	; (7334 <z_abort_timeout+0x88>)
    72cc:	481a      	ldr	r0, [pc, #104]	; (7338 <z_abort_timeout+0x8c>)
    72ce:	238e      	movs	r3, #142	; 0x8e
    72d0:	f000 fede 	bl	8090 <assert_print>
    72d4:	4915      	ldr	r1, [pc, #84]	; (732c <z_abort_timeout+0x80>)
    72d6:	4819      	ldr	r0, [pc, #100]	; (733c <z_abort_timeout+0x90>)
    72d8:	f000 feda 	bl	8090 <assert_print>
    72dc:	4814      	ldr	r0, [pc, #80]	; (7330 <z_abort_timeout+0x84>)
    72de:	218e      	movs	r1, #142	; 0x8e
    72e0:	f000 fecf 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    72e4:	4811      	ldr	r0, [pc, #68]	; (732c <z_abort_timeout+0x80>)
    72e6:	f7fe fb3d 	bl	5964 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    72ea:	6823      	ldr	r3, [r4, #0]
    72ec:	b1db      	cbz	r3, 7326 <z_abort_timeout+0x7a>
			remove_timeout(to);
    72ee:	4620      	mov	r0, r4
    72f0:	f7ff fef8 	bl	70e4 <remove_timeout>
			ret = 0;
    72f4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72f6:	480d      	ldr	r0, [pc, #52]	; (732c <z_abort_timeout+0x80>)
    72f8:	f7fe fb24 	bl	5944 <z_spin_unlock_valid>
    72fc:	b968      	cbnz	r0, 731a <z_abort_timeout+0x6e>
    72fe:	4a0c      	ldr	r2, [pc, #48]	; (7330 <z_abort_timeout+0x84>)
    7300:	490f      	ldr	r1, [pc, #60]	; (7340 <z_abort_timeout+0x94>)
    7302:	480d      	ldr	r0, [pc, #52]	; (7338 <z_abort_timeout+0x8c>)
    7304:	23b9      	movs	r3, #185	; 0xb9
    7306:	f000 fec3 	bl	8090 <assert_print>
    730a:	4908      	ldr	r1, [pc, #32]	; (732c <z_abort_timeout+0x80>)
    730c:	480d      	ldr	r0, [pc, #52]	; (7344 <z_abort_timeout+0x98>)
    730e:	f000 febf 	bl	8090 <assert_print>
    7312:	4807      	ldr	r0, [pc, #28]	; (7330 <z_abort_timeout+0x84>)
    7314:	21b9      	movs	r1, #185	; 0xb9
    7316:	f000 feb4 	bl	8082 <assert_post_action>
	__asm__ volatile(
    731a:	f385 8811 	msr	BASEPRI, r5
    731e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7322:	4620      	mov	r0, r4
    7324:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7326:	f06f 0415 	mvn.w	r4, #21
    732a:	e7e4      	b.n	72f6 <z_abort_timeout+0x4a>
    732c:	20000a24 	.word	0x20000a24
    7330:	0000908d 	.word	0x0000908d
    7334:	000090e6 	.word	0x000090e6
    7338:	00008f43 	.word	0x00008f43
    733c:	000090fb 	.word	0x000090fb
    7340:	000090ba 	.word	0x000090ba
    7344:	000090d1 	.word	0x000090d1

00007348 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7348:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    734a:	f04f 0320 	mov.w	r3, #32
    734e:	f3ef 8511 	mrs	r5, BASEPRI
    7352:	f383 8812 	msr	BASEPRI_MAX, r3
    7356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    735a:	4818      	ldr	r0, [pc, #96]	; (73bc <z_get_next_timeout_expiry+0x74>)
    735c:	f7fe fae4 	bl	5928 <z_spin_lock_valid>
    7360:	b968      	cbnz	r0, 737e <z_get_next_timeout_expiry+0x36>
    7362:	4a17      	ldr	r2, [pc, #92]	; (73c0 <z_get_next_timeout_expiry+0x78>)
    7364:	4917      	ldr	r1, [pc, #92]	; (73c4 <z_get_next_timeout_expiry+0x7c>)
    7366:	4818      	ldr	r0, [pc, #96]	; (73c8 <z_get_next_timeout_expiry+0x80>)
    7368:	238e      	movs	r3, #142	; 0x8e
    736a:	f000 fe91 	bl	8090 <assert_print>
    736e:	4913      	ldr	r1, [pc, #76]	; (73bc <z_get_next_timeout_expiry+0x74>)
    7370:	4816      	ldr	r0, [pc, #88]	; (73cc <z_get_next_timeout_expiry+0x84>)
    7372:	f000 fe8d 	bl	8090 <assert_print>
    7376:	4812      	ldr	r0, [pc, #72]	; (73c0 <z_get_next_timeout_expiry+0x78>)
    7378:	218e      	movs	r1, #142	; 0x8e
    737a:	f000 fe82 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    737e:	480f      	ldr	r0, [pc, #60]	; (73bc <z_get_next_timeout_expiry+0x74>)
    7380:	f7fe faf0 	bl	5964 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7384:	f7ff fe86 	bl	7094 <next_timeout>
    7388:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    738a:	480c      	ldr	r0, [pc, #48]	; (73bc <z_get_next_timeout_expiry+0x74>)
    738c:	f7fe fada 	bl	5944 <z_spin_unlock_valid>
    7390:	b968      	cbnz	r0, 73ae <z_get_next_timeout_expiry+0x66>
    7392:	4a0b      	ldr	r2, [pc, #44]	; (73c0 <z_get_next_timeout_expiry+0x78>)
    7394:	490e      	ldr	r1, [pc, #56]	; (73d0 <z_get_next_timeout_expiry+0x88>)
    7396:	480c      	ldr	r0, [pc, #48]	; (73c8 <z_get_next_timeout_expiry+0x80>)
    7398:	23b9      	movs	r3, #185	; 0xb9
    739a:	f000 fe79 	bl	8090 <assert_print>
    739e:	4907      	ldr	r1, [pc, #28]	; (73bc <z_get_next_timeout_expiry+0x74>)
    73a0:	480c      	ldr	r0, [pc, #48]	; (73d4 <z_get_next_timeout_expiry+0x8c>)
    73a2:	f000 fe75 	bl	8090 <assert_print>
    73a6:	4806      	ldr	r0, [pc, #24]	; (73c0 <z_get_next_timeout_expiry+0x78>)
    73a8:	21b9      	movs	r1, #185	; 0xb9
    73aa:	f000 fe6a 	bl	8082 <assert_post_action>
	__asm__ volatile(
    73ae:	f385 8811 	msr	BASEPRI, r5
    73b2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    73b6:	4620      	mov	r0, r4
    73b8:	bd38      	pop	{r3, r4, r5, pc}
    73ba:	bf00      	nop
    73bc:	20000a24 	.word	0x20000a24
    73c0:	0000908d 	.word	0x0000908d
    73c4:	000090e6 	.word	0x000090e6
    73c8:	00008f43 	.word	0x00008f43
    73cc:	000090fb 	.word	0x000090fb
    73d0:	000090ba 	.word	0x000090ba
    73d4:	000090d1 	.word	0x000090d1

000073d8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    73d8:	b570      	push	{r4, r5, r6, lr}
    73da:	4604      	mov	r4, r0
    73dc:	460d      	mov	r5, r1
	__asm__ volatile(
    73de:	f04f 0320 	mov.w	r3, #32
    73e2:	f3ef 8611 	mrs	r6, BASEPRI
    73e6:	f383 8812 	msr	BASEPRI_MAX, r3
    73ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73ee:	481c      	ldr	r0, [pc, #112]	; (7460 <z_set_timeout_expiry+0x88>)
    73f0:	f7fe fa9a 	bl	5928 <z_spin_lock_valid>
    73f4:	b968      	cbnz	r0, 7412 <z_set_timeout_expiry+0x3a>
    73f6:	4a1b      	ldr	r2, [pc, #108]	; (7464 <z_set_timeout_expiry+0x8c>)
    73f8:	491b      	ldr	r1, [pc, #108]	; (7468 <z_set_timeout_expiry+0x90>)
    73fa:	481c      	ldr	r0, [pc, #112]	; (746c <z_set_timeout_expiry+0x94>)
    73fc:	238e      	movs	r3, #142	; 0x8e
    73fe:	f000 fe47 	bl	8090 <assert_print>
    7402:	4917      	ldr	r1, [pc, #92]	; (7460 <z_set_timeout_expiry+0x88>)
    7404:	481a      	ldr	r0, [pc, #104]	; (7470 <z_set_timeout_expiry+0x98>)
    7406:	f000 fe43 	bl	8090 <assert_print>
    740a:	4816      	ldr	r0, [pc, #88]	; (7464 <z_set_timeout_expiry+0x8c>)
    740c:	218e      	movs	r1, #142	; 0x8e
    740e:	f000 fe38 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    7412:	4813      	ldr	r0, [pc, #76]	; (7460 <z_set_timeout_expiry+0x88>)
    7414:	f7fe faa6 	bl	5964 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7418:	f7ff fe3c 	bl	7094 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    741c:	2801      	cmp	r0, #1
    741e:	dd07      	ble.n	7430 <z_set_timeout_expiry+0x58>
    7420:	42a0      	cmp	r0, r4
    7422:	db05      	blt.n	7430 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7424:	42a0      	cmp	r0, r4
    7426:	4629      	mov	r1, r5
    7428:	bfa8      	it	ge
    742a:	4620      	movge	r0, r4
    742c:	f7fc ff3a 	bl	42a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7430:	480b      	ldr	r0, [pc, #44]	; (7460 <z_set_timeout_expiry+0x88>)
    7432:	f7fe fa87 	bl	5944 <z_spin_unlock_valid>
    7436:	b968      	cbnz	r0, 7454 <z_set_timeout_expiry+0x7c>
    7438:	4a0a      	ldr	r2, [pc, #40]	; (7464 <z_set_timeout_expiry+0x8c>)
    743a:	490e      	ldr	r1, [pc, #56]	; (7474 <z_set_timeout_expiry+0x9c>)
    743c:	480b      	ldr	r0, [pc, #44]	; (746c <z_set_timeout_expiry+0x94>)
    743e:	23b9      	movs	r3, #185	; 0xb9
    7440:	f000 fe26 	bl	8090 <assert_print>
    7444:	4906      	ldr	r1, [pc, #24]	; (7460 <z_set_timeout_expiry+0x88>)
    7446:	480c      	ldr	r0, [pc, #48]	; (7478 <z_set_timeout_expiry+0xa0>)
    7448:	f000 fe22 	bl	8090 <assert_print>
    744c:	4805      	ldr	r0, [pc, #20]	; (7464 <z_set_timeout_expiry+0x8c>)
    744e:	21b9      	movs	r1, #185	; 0xb9
    7450:	f000 fe17 	bl	8082 <assert_post_action>
	__asm__ volatile(
    7454:	f386 8811 	msr	BASEPRI, r6
    7458:	f3bf 8f6f 	isb	sy
		}
	}
}
    745c:	bd70      	pop	{r4, r5, r6, pc}
    745e:	bf00      	nop
    7460:	20000a24 	.word	0x20000a24
    7464:	0000908d 	.word	0x0000908d
    7468:	000090e6 	.word	0x000090e6
    746c:	00008f43 	.word	0x00008f43
    7470:	000090fb 	.word	0x000090fb
    7474:	000090ba 	.word	0x000090ba
    7478:	000090d1 	.word	0x000090d1

0000747c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    747c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7480:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7482:	f7ff f871 	bl	6568 <z_time_slice>
	__asm__ volatile(
    7486:	f04f 0320 	mov.w	r3, #32
    748a:	f3ef 8511 	mrs	r5, BASEPRI
    748e:	f383 8812 	msr	BASEPRI_MAX, r3
    7492:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7496:	484c      	ldr	r0, [pc, #304]	; (75c8 <sys_clock_announce+0x14c>)
    7498:	f7fe fa46 	bl	5928 <z_spin_lock_valid>
    749c:	b968      	cbnz	r0, 74ba <sys_clock_announce+0x3e>
    749e:	4a4b      	ldr	r2, [pc, #300]	; (75cc <sys_clock_announce+0x150>)
    74a0:	494b      	ldr	r1, [pc, #300]	; (75d0 <sys_clock_announce+0x154>)
    74a2:	484c      	ldr	r0, [pc, #304]	; (75d4 <sys_clock_announce+0x158>)
    74a4:	238e      	movs	r3, #142	; 0x8e
    74a6:	f000 fdf3 	bl	8090 <assert_print>
    74aa:	4947      	ldr	r1, [pc, #284]	; (75c8 <sys_clock_announce+0x14c>)
    74ac:	484a      	ldr	r0, [pc, #296]	; (75d8 <sys_clock_announce+0x15c>)
    74ae:	f000 fdef 	bl	8090 <assert_print>
    74b2:	4846      	ldr	r0, [pc, #280]	; (75cc <sys_clock_announce+0x150>)
    74b4:	218e      	movs	r1, #142	; 0x8e
    74b6:	f000 fde4 	bl	8082 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    74ba:	4f48      	ldr	r7, [pc, #288]	; (75dc <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    74bc:	4842      	ldr	r0, [pc, #264]	; (75c8 <sys_clock_announce+0x14c>)
	return list->head == list;
    74be:	f8df 8120 	ldr.w	r8, [pc, #288]	; 75e0 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    74c2:	4e48      	ldr	r6, [pc, #288]	; (75e4 <sys_clock_announce+0x168>)
    74c4:	f7fe fa4e 	bl	5964 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    74c8:	603c      	str	r4, [r7, #0]
    74ca:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    74ce:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    74d0:	4544      	cmp	r4, r8
		curr_tick += dt;
    74d2:	e9d6 1e00 	ldrd	r1, lr, [r6]
    74d6:	ea4f 70e2 	mov.w	r0, r2, asr #31
    74da:	d00b      	beq.n	74f4 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    74dc:	b154      	cbz	r4, 74f4 <sys_clock_announce+0x78>
    74de:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    74e2:	429a      	cmp	r2, r3
    74e4:	eb70 090c 	sbcs.w	r9, r0, ip
    74e8:	da28      	bge.n	753c <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    74ea:	1a9b      	subs	r3, r3, r2
    74ec:	eb6c 0c00 	sbc.w	ip, ip, r0
    74f0:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    74f4:	1851      	adds	r1, r2, r1
    74f6:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    74fa:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    74fc:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    7500:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7502:	f7ff fdc7 	bl	7094 <next_timeout>
    7506:	4621      	mov	r1, r4
    7508:	f7fc fecc 	bl	42a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    750c:	482e      	ldr	r0, [pc, #184]	; (75c8 <sys_clock_announce+0x14c>)
    750e:	f7fe fa19 	bl	5944 <z_spin_unlock_valid>
    7512:	b968      	cbnz	r0, 7530 <sys_clock_announce+0xb4>
    7514:	4a2d      	ldr	r2, [pc, #180]	; (75cc <sys_clock_announce+0x150>)
    7516:	4934      	ldr	r1, [pc, #208]	; (75e8 <sys_clock_announce+0x16c>)
    7518:	482e      	ldr	r0, [pc, #184]	; (75d4 <sys_clock_announce+0x158>)
    751a:	23b9      	movs	r3, #185	; 0xb9
    751c:	f000 fdb8 	bl	8090 <assert_print>
    7520:	4929      	ldr	r1, [pc, #164]	; (75c8 <sys_clock_announce+0x14c>)
    7522:	4832      	ldr	r0, [pc, #200]	; (75ec <sys_clock_announce+0x170>)
    7524:	f000 fdb4 	bl	8090 <assert_print>
    7528:	4828      	ldr	r0, [pc, #160]	; (75cc <sys_clock_announce+0x150>)
    752a:	21b9      	movs	r1, #185	; 0xb9
    752c:	f000 fda9 	bl	8082 <assert_post_action>
	__asm__ volatile(
    7530:	f385 8811 	msr	BASEPRI, r5
    7534:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    753c:	1859      	adds	r1, r3, r1
    753e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    7542:	1ad3      	subs	r3, r2, r3
    7544:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    7546:	2200      	movs	r2, #0
    7548:	2300      	movs	r3, #0
		curr_tick += dt;
    754a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    754e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    7552:	4620      	mov	r0, r4
    7554:	f7ff fdc6 	bl	70e4 <remove_timeout>
    7558:	481b      	ldr	r0, [pc, #108]	; (75c8 <sys_clock_announce+0x14c>)
    755a:	f7fe f9f3 	bl	5944 <z_spin_unlock_valid>
    755e:	b968      	cbnz	r0, 757c <sys_clock_announce+0x100>
    7560:	4a1a      	ldr	r2, [pc, #104]	; (75cc <sys_clock_announce+0x150>)
    7562:	4921      	ldr	r1, [pc, #132]	; (75e8 <sys_clock_announce+0x16c>)
    7564:	481b      	ldr	r0, [pc, #108]	; (75d4 <sys_clock_announce+0x158>)
    7566:	23b9      	movs	r3, #185	; 0xb9
    7568:	f000 fd92 	bl	8090 <assert_print>
    756c:	4916      	ldr	r1, [pc, #88]	; (75c8 <sys_clock_announce+0x14c>)
    756e:	481f      	ldr	r0, [pc, #124]	; (75ec <sys_clock_announce+0x170>)
    7570:	f000 fd8e 	bl	8090 <assert_print>
    7574:	4815      	ldr	r0, [pc, #84]	; (75cc <sys_clock_announce+0x150>)
    7576:	21b9      	movs	r1, #185	; 0xb9
    7578:	f000 fd83 	bl	8082 <assert_post_action>
    757c:	f385 8811 	msr	BASEPRI, r5
    7580:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7584:	68a3      	ldr	r3, [r4, #8]
    7586:	4620      	mov	r0, r4
    7588:	4798      	blx	r3
	__asm__ volatile(
    758a:	f04f 0320 	mov.w	r3, #32
    758e:	f3ef 8511 	mrs	r5, BASEPRI
    7592:	f383 8812 	msr	BASEPRI_MAX, r3
    7596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    759a:	480b      	ldr	r0, [pc, #44]	; (75c8 <sys_clock_announce+0x14c>)
    759c:	f7fe f9c4 	bl	5928 <z_spin_lock_valid>
    75a0:	b968      	cbnz	r0, 75be <sys_clock_announce+0x142>
    75a2:	4a0a      	ldr	r2, [pc, #40]	; (75cc <sys_clock_announce+0x150>)
    75a4:	490a      	ldr	r1, [pc, #40]	; (75d0 <sys_clock_announce+0x154>)
    75a6:	480b      	ldr	r0, [pc, #44]	; (75d4 <sys_clock_announce+0x158>)
    75a8:	238e      	movs	r3, #142	; 0x8e
    75aa:	f000 fd71 	bl	8090 <assert_print>
    75ae:	4906      	ldr	r1, [pc, #24]	; (75c8 <sys_clock_announce+0x14c>)
    75b0:	4809      	ldr	r0, [pc, #36]	; (75d8 <sys_clock_announce+0x15c>)
    75b2:	f000 fd6d 	bl	8090 <assert_print>
    75b6:	4805      	ldr	r0, [pc, #20]	; (75cc <sys_clock_announce+0x150>)
    75b8:	218e      	movs	r1, #142	; 0x8e
    75ba:	f000 fd62 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    75be:	4802      	ldr	r0, [pc, #8]	; (75c8 <sys_clock_announce+0x14c>)
    75c0:	f7fe f9d0 	bl	5964 <z_spin_lock_set_owner>
	return k;
    75c4:	e781      	b.n	74ca <sys_clock_announce+0x4e>
    75c6:	bf00      	nop
    75c8:	20000a24 	.word	0x20000a24
    75cc:	0000908d 	.word	0x0000908d
    75d0:	000090e6 	.word	0x000090e6
    75d4:	00008f43 	.word	0x00008f43
    75d8:	000090fb 	.word	0x000090fb
    75dc:	20000a20 	.word	0x20000a20
    75e0:	200000dc 	.word	0x200000dc
    75e4:	200002e0 	.word	0x200002e0
    75e8:	000090ba 	.word	0x000090ba
    75ec:	000090d1 	.word	0x000090d1

000075f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    75f0:	b570      	push	{r4, r5, r6, lr}
    75f2:	f04f 0320 	mov.w	r3, #32
    75f6:	f3ef 8611 	mrs	r6, BASEPRI
    75fa:	f383 8812 	msr	BASEPRI_MAX, r3
    75fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7602:	481b      	ldr	r0, [pc, #108]	; (7670 <sys_clock_tick_get+0x80>)
    7604:	f7fe f990 	bl	5928 <z_spin_lock_valid>
    7608:	b968      	cbnz	r0, 7626 <sys_clock_tick_get+0x36>
    760a:	4a1a      	ldr	r2, [pc, #104]	; (7674 <sys_clock_tick_get+0x84>)
    760c:	491a      	ldr	r1, [pc, #104]	; (7678 <sys_clock_tick_get+0x88>)
    760e:	481b      	ldr	r0, [pc, #108]	; (767c <sys_clock_tick_get+0x8c>)
    7610:	238e      	movs	r3, #142	; 0x8e
    7612:	f000 fd3d 	bl	8090 <assert_print>
    7616:	4916      	ldr	r1, [pc, #88]	; (7670 <sys_clock_tick_get+0x80>)
    7618:	4819      	ldr	r0, [pc, #100]	; (7680 <sys_clock_tick_get+0x90>)
    761a:	f000 fd39 	bl	8090 <assert_print>
    761e:	4815      	ldr	r0, [pc, #84]	; (7674 <sys_clock_tick_get+0x84>)
    7620:	218e      	movs	r1, #142	; 0x8e
    7622:	f000 fd2e 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    7626:	4812      	ldr	r0, [pc, #72]	; (7670 <sys_clock_tick_get+0x80>)
    7628:	f7fe f99c 	bl	5964 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    762c:	f7fc fe6c 	bl	4308 <sys_clock_elapsed>
    7630:	4a14      	ldr	r2, [pc, #80]	; (7684 <sys_clock_tick_get+0x94>)
    7632:	e9d2 4500 	ldrd	r4, r5, [r2]
    7636:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7638:	480d      	ldr	r0, [pc, #52]	; (7670 <sys_clock_tick_get+0x80>)
    763a:	f145 0500 	adc.w	r5, r5, #0
    763e:	f7fe f981 	bl	5944 <z_spin_unlock_valid>
    7642:	b968      	cbnz	r0, 7660 <sys_clock_tick_get+0x70>
    7644:	4a0b      	ldr	r2, [pc, #44]	; (7674 <sys_clock_tick_get+0x84>)
    7646:	4910      	ldr	r1, [pc, #64]	; (7688 <sys_clock_tick_get+0x98>)
    7648:	480c      	ldr	r0, [pc, #48]	; (767c <sys_clock_tick_get+0x8c>)
    764a:	23b9      	movs	r3, #185	; 0xb9
    764c:	f000 fd20 	bl	8090 <assert_print>
    7650:	4907      	ldr	r1, [pc, #28]	; (7670 <sys_clock_tick_get+0x80>)
    7652:	480e      	ldr	r0, [pc, #56]	; (768c <sys_clock_tick_get+0x9c>)
    7654:	f000 fd1c 	bl	8090 <assert_print>
    7658:	4806      	ldr	r0, [pc, #24]	; (7674 <sys_clock_tick_get+0x84>)
    765a:	21b9      	movs	r1, #185	; 0xb9
    765c:	f000 fd11 	bl	8082 <assert_post_action>
	__asm__ volatile(
    7660:	f386 8811 	msr	BASEPRI, r6
    7664:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7668:	4620      	mov	r0, r4
    766a:	4629      	mov	r1, r5
    766c:	bd70      	pop	{r4, r5, r6, pc}
    766e:	bf00      	nop
    7670:	20000a24 	.word	0x20000a24
    7674:	0000908d 	.word	0x0000908d
    7678:	000090e6 	.word	0x000090e6
    767c:	00008f43 	.word	0x00008f43
    7680:	000090fb 	.word	0x000090fb
    7684:	200002e0 	.word	0x200002e0
    7688:	000090ba 	.word	0x000090ba
    768c:	000090d1 	.word	0x000090d1

00007690 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    7690:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    7692:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    7696:	4606      	mov	r6, r0
    7698:	460d      	mov	r5, r1
    769a:	d20b      	bcs.n	76b4 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    769c:	f04f 0800 	mov.w	r8, #0
    76a0:	f04f 0900 	mov.w	r9, #0
    76a4:	e9cd 8900 	strd	r8, r9, [sp]
    76a8:	f041 0104 	orr.w	r1, r1, #4
    76ac:	f000 f89c 	bl	77e8 <k_heap_aligned_alloc>
	if (mem == NULL) {
    76b0:	4604      	mov	r4, r0
    76b2:	b920      	cbnz	r0, 76be <z_heap_aligned_alloc+0x2e>
		return NULL;
    76b4:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    76b6:	4620      	mov	r0, r4
    76b8:	b002      	add	sp, #8
    76ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    76be:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    76c2:	2d00      	cmp	r5, #0
    76c4:	d0f7      	beq.n	76b6 <z_heap_aligned_alloc+0x26>
    76c6:	1e6b      	subs	r3, r5, #1
    76c8:	421c      	tst	r4, r3
    76ca:	d0f4      	beq.n	76b6 <z_heap_aligned_alloc+0x26>
    76cc:	2325      	movs	r3, #37	; 0x25
    76ce:	4a07      	ldr	r2, [pc, #28]	; (76ec <z_heap_aligned_alloc+0x5c>)
    76d0:	4907      	ldr	r1, [pc, #28]	; (76f0 <z_heap_aligned_alloc+0x60>)
    76d2:	4808      	ldr	r0, [pc, #32]	; (76f4 <z_heap_aligned_alloc+0x64>)
    76d4:	f000 fcdc 	bl	8090 <assert_print>
    76d8:	4621      	mov	r1, r4
    76da:	4807      	ldr	r0, [pc, #28]	; (76f8 <z_heap_aligned_alloc+0x68>)
    76dc:	462a      	mov	r2, r5
    76de:	f000 fcd7 	bl	8090 <assert_print>
    76e2:	4802      	ldr	r0, [pc, #8]	; (76ec <z_heap_aligned_alloc+0x5c>)
    76e4:	2125      	movs	r1, #37	; 0x25
    76e6:	f000 fccc 	bl	8082 <assert_post_action>
    76ea:	e7e4      	b.n	76b6 <z_heap_aligned_alloc+0x26>
    76ec:	0000a5ee 	.word	0x0000a5ee
    76f0:	0000a612 	.word	0x0000a612
    76f4:	00008f43 	.word	0x00008f43
    76f8:	0000a644 	.word	0x0000a644

000076fc <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    76fc:	2803      	cmp	r0, #3
{
    76fe:	b538      	push	{r3, r4, r5, lr}
    7700:	4604      	mov	r4, r0
    7702:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    7704:	d901      	bls.n	770a <k_aligned_alloc+0xe>
    7706:	0783      	lsls	r3, r0, #30
    7708:	d00c      	beq.n	7724 <k_aligned_alloc+0x28>
    770a:	4912      	ldr	r1, [pc, #72]	; (7754 <k_aligned_alloc+0x58>)
    770c:	4a12      	ldr	r2, [pc, #72]	; (7758 <k_aligned_alloc+0x5c>)
    770e:	4813      	ldr	r0, [pc, #76]	; (775c <k_aligned_alloc+0x60>)
    7710:	2342      	movs	r3, #66	; 0x42
    7712:	f000 fcbd 	bl	8090 <assert_print>
    7716:	4812      	ldr	r0, [pc, #72]	; (7760 <k_aligned_alloc+0x64>)
    7718:	f000 fcba 	bl	8090 <assert_print>
    771c:	480e      	ldr	r0, [pc, #56]	; (7758 <k_aligned_alloc+0x5c>)
    771e:	2142      	movs	r1, #66	; 0x42
    7720:	f000 fcaf 	bl	8082 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    7724:	1e63      	subs	r3, r4, #1
    7726:	4223      	tst	r3, r4
    7728:	d00c      	beq.n	7744 <k_aligned_alloc+0x48>
    772a:	490e      	ldr	r1, [pc, #56]	; (7764 <k_aligned_alloc+0x68>)
    772c:	4a0a      	ldr	r2, [pc, #40]	; (7758 <k_aligned_alloc+0x5c>)
    772e:	480b      	ldr	r0, [pc, #44]	; (775c <k_aligned_alloc+0x60>)
    7730:	2346      	movs	r3, #70	; 0x46
    7732:	f000 fcad 	bl	8090 <assert_print>
    7736:	480c      	ldr	r0, [pc, #48]	; (7768 <k_aligned_alloc+0x6c>)
    7738:	f000 fcaa 	bl	8090 <assert_print>
    773c:	4806      	ldr	r0, [pc, #24]	; (7758 <k_aligned_alloc+0x5c>)
    773e:	2146      	movs	r1, #70	; 0x46
    7740:	f000 fc9f 	bl	8082 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    7744:	462a      	mov	r2, r5
    7746:	4621      	mov	r1, r4
    7748:	4808      	ldr	r0, [pc, #32]	; (776c <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    774a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    774e:	f7ff bf9f 	b.w	7690 <z_heap_aligned_alloc>
    7752:	bf00      	nop
    7754:	0000a66c 	.word	0x0000a66c
    7758:	0000a5ee 	.word	0x0000a5ee
    775c:	00008f43 	.word	0x00008f43
    7760:	0000a6a9 	.word	0x0000a6a9
    7764:	000091df 	.word	0x000091df
    7768:	000091fa 	.word	0x000091fa
    776c:	20000158 	.word	0x20000158

00007770 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    7770:	4b01      	ldr	r3, [pc, #4]	; (7778 <k_thread_system_pool_assign+0x8>)
    7772:	6703      	str	r3, [r0, #112]	; 0x70
}
    7774:	4770      	bx	lr
    7776:	bf00      	nop
    7778:	20000158 	.word	0x20000158

0000777c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    777c:	4a02      	ldr	r2, [pc, #8]	; (7788 <boot_banner+0xc>)
    777e:	4903      	ldr	r1, [pc, #12]	; (778c <boot_banner+0x10>)
    7780:	4803      	ldr	r0, [pc, #12]	; (7790 <boot_banner+0x14>)
    7782:	f000 baf2 	b.w	7d6a <printk>
    7786:	bf00      	nop
    7788:	0000a3f6 	.word	0x0000a3f6
    778c:	0000a6d6 	.word	0x0000a6d6
    7790:	0000a6e3 	.word	0x0000a6e3

00007794 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    7794:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    7796:	4c0e      	ldr	r4, [pc, #56]	; (77d0 <statics_init+0x3c>)
    7798:	4d0e      	ldr	r5, [pc, #56]	; (77d4 <statics_init+0x40>)
    779a:	4e0f      	ldr	r6, [pc, #60]	; (77d8 <statics_init+0x44>)
    779c:	42ac      	cmp	r4, r5
    779e:	d90c      	bls.n	77ba <statics_init+0x26>
    77a0:	490e      	ldr	r1, [pc, #56]	; (77dc <statics_init+0x48>)
    77a2:	480f      	ldr	r0, [pc, #60]	; (77e0 <statics_init+0x4c>)
    77a4:	2318      	movs	r3, #24
    77a6:	4632      	mov	r2, r6
    77a8:	f000 fc72 	bl	8090 <assert_print>
    77ac:	480d      	ldr	r0, [pc, #52]	; (77e4 <statics_init+0x50>)
    77ae:	f000 fc6f 	bl	8090 <assert_print>
    77b2:	2118      	movs	r1, #24
    77b4:	4630      	mov	r0, r6
    77b6:	f000 fc64 	bl	8082 <assert_post_action>
    77ba:	42ac      	cmp	r4, r5
    77bc:	d301      	bcc.n	77c2 <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    77be:	2000      	movs	r0, #0
    77c0:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    77c2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    77c6:	4620      	mov	r0, r4
    77c8:	f001 f88d 	bl	88e6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    77cc:	3418      	adds	r4, #24
    77ce:	e7e5      	b.n	779c <statics_init+0x8>
    77d0:	20000158 	.word	0x20000158
    77d4:	20000170 	.word	0x20000170
    77d8:	0000a70a 	.word	0x0000a70a
    77dc:	0000a72c 	.word	0x0000a72c
    77e0:	00008f43 	.word	0x00008f43
    77e4:	0000a1f0 	.word	0x0000a1f0

000077e8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    77e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77ec:	b085      	sub	sp, #20
    77ee:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    77f2:	4606      	mov	r6, r0
    77f4:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    77f6:	4648      	mov	r0, r9
    77f8:	4641      	mov	r1, r8
{
    77fa:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    77fc:	f001 f84d 	bl	889a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    7800:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    7804:	4682      	mov	sl, r0
    7806:	460f      	mov	r7, r1
	__asm__ volatile(
    7808:	f04f 0320 	mov.w	r3, #32
    780c:	f3ef 8511 	mrs	r5, BASEPRI
    7810:	f383 8812 	msr	BASEPRI_MAX, r3
    7814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7818:	4620      	mov	r0, r4
    781a:	f7fe f885 	bl	5928 <z_spin_lock_valid>
    781e:	b968      	cbnz	r0, 783c <k_heap_aligned_alloc+0x54>
    7820:	4a3c      	ldr	r2, [pc, #240]	; (7914 <k_heap_aligned_alloc+0x12c>)
    7822:	493d      	ldr	r1, [pc, #244]	; (7918 <k_heap_aligned_alloc+0x130>)
    7824:	483d      	ldr	r0, [pc, #244]	; (791c <k_heap_aligned_alloc+0x134>)
    7826:	238e      	movs	r3, #142	; 0x8e
    7828:	f000 fc32 	bl	8090 <assert_print>
    782c:	483c      	ldr	r0, [pc, #240]	; (7920 <k_heap_aligned_alloc+0x138>)
    782e:	4621      	mov	r1, r4
    7830:	f000 fc2e 	bl	8090 <assert_print>
    7834:	4837      	ldr	r0, [pc, #220]	; (7914 <k_heap_aligned_alloc+0x12c>)
    7836:	218e      	movs	r1, #142	; 0x8e
    7838:	f000 fc23 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    783c:	4620      	mov	r0, r4
    783e:	f7fe f891 	bl	5964 <z_spin_lock_set_owner>
    7842:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    7846:	b17b      	cbz	r3, 7868 <k_heap_aligned_alloc+0x80>
    7848:	ea59 0808 	orrs.w	r8, r9, r8
    784c:	d00c      	beq.n	7868 <k_heap_aligned_alloc+0x80>
    784e:	4935      	ldr	r1, [pc, #212]	; (7924 <k_heap_aligned_alloc+0x13c>)
    7850:	4a35      	ldr	r2, [pc, #212]	; (7928 <k_heap_aligned_alloc+0x140>)
    7852:	4832      	ldr	r0, [pc, #200]	; (791c <k_heap_aligned_alloc+0x134>)
    7854:	2349      	movs	r3, #73	; 0x49
    7856:	f000 fc1b 	bl	8090 <assert_print>
    785a:	4834      	ldr	r0, [pc, #208]	; (792c <k_heap_aligned_alloc+0x144>)
    785c:	f000 fc18 	bl	8090 <assert_print>
    7860:	4831      	ldr	r0, [pc, #196]	; (7928 <k_heap_aligned_alloc+0x140>)
    7862:	2149      	movs	r1, #73	; 0x49
    7864:	f000 fc0d 	bl	8082 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7868:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 7914 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    786c:	9903      	ldr	r1, [sp, #12]
    786e:	465a      	mov	r2, fp
    7870:	4630      	mov	r0, r6
    7872:	f7f9 fb1b 	bl	eac <sys_heap_aligned_alloc>
    7876:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    7878:	f7ff feba 	bl	75f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    787c:	f1b8 0f00 	cmp.w	r8, #0
    7880:	d019      	beq.n	78b6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7882:	4620      	mov	r0, r4
    7884:	f7fe f85e 	bl	5944 <z_spin_unlock_valid>
    7888:	b968      	cbnz	r0, 78a6 <k_heap_aligned_alloc+0xbe>
    788a:	4a22      	ldr	r2, [pc, #136]	; (7914 <k_heap_aligned_alloc+0x12c>)
    788c:	4928      	ldr	r1, [pc, #160]	; (7930 <k_heap_aligned_alloc+0x148>)
    788e:	4823      	ldr	r0, [pc, #140]	; (791c <k_heap_aligned_alloc+0x134>)
    7890:	23b9      	movs	r3, #185	; 0xb9
    7892:	f000 fbfd 	bl	8090 <assert_print>
    7896:	4827      	ldr	r0, [pc, #156]	; (7934 <k_heap_aligned_alloc+0x14c>)
    7898:	4621      	mov	r1, r4
    789a:	f000 fbf9 	bl	8090 <assert_print>
    789e:	481d      	ldr	r0, [pc, #116]	; (7914 <k_heap_aligned_alloc+0x12c>)
    78a0:	21b9      	movs	r1, #185	; 0xb9
    78a2:	f000 fbee 	bl	8082 <assert_post_action>
	__asm__ volatile(
    78a6:	f385 8811 	msr	BASEPRI, r5
    78aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    78ae:	4640      	mov	r0, r8
    78b0:	b005      	add	sp, #20
    78b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    78b6:	ebba 0000 	subs.w	r0, sl, r0
    78ba:	eb67 0101 	sbc.w	r1, r7, r1
    78be:	2801      	cmp	r0, #1
    78c0:	f171 0300 	sbcs.w	r3, r1, #0
    78c4:	dbdd      	blt.n	7882 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    78c6:	e9cd 0100 	strd	r0, r1, [sp]
    78ca:	f106 020c 	add.w	r2, r6, #12
    78ce:	4629      	mov	r1, r5
    78d0:	4620      	mov	r0, r4
    78d2:	f7fe ff79 	bl	67c8 <z_pend_curr>
	__asm__ volatile(
    78d6:	f04f 0320 	mov.w	r3, #32
    78da:	f3ef 8511 	mrs	r5, BASEPRI
    78de:	f383 8812 	msr	BASEPRI_MAX, r3
    78e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78e6:	4620      	mov	r0, r4
    78e8:	f7fe f81e 	bl	5928 <z_spin_lock_valid>
    78ec:	b968      	cbnz	r0, 790a <k_heap_aligned_alloc+0x122>
    78ee:	490a      	ldr	r1, [pc, #40]	; (7918 <k_heap_aligned_alloc+0x130>)
    78f0:	480a      	ldr	r0, [pc, #40]	; (791c <k_heap_aligned_alloc+0x134>)
    78f2:	238e      	movs	r3, #142	; 0x8e
    78f4:	464a      	mov	r2, r9
    78f6:	f000 fbcb 	bl	8090 <assert_print>
    78fa:	4809      	ldr	r0, [pc, #36]	; (7920 <k_heap_aligned_alloc+0x138>)
    78fc:	4621      	mov	r1, r4
    78fe:	f000 fbc7 	bl	8090 <assert_print>
    7902:	218e      	movs	r1, #142	; 0x8e
    7904:	4648      	mov	r0, r9
    7906:	f000 fbbc 	bl	8082 <assert_post_action>
	z_spin_lock_set_owner(l);
    790a:	4620      	mov	r0, r4
    790c:	f7fe f82a 	bl	5964 <z_spin_lock_set_owner>
	return k;
    7910:	e7ac      	b.n	786c <k_heap_aligned_alloc+0x84>
    7912:	bf00      	nop
    7914:	0000908d 	.word	0x0000908d
    7918:	000090e6 	.word	0x000090e6
    791c:	00008f43 	.word	0x00008f43
    7920:	000090fb 	.word	0x000090fb
    7924:	0000a742 	.word	0x0000a742
    7928:	0000a70a 	.word	0x0000a70a
    792c:	0000a3f4 	.word	0x0000a3f4
    7930:	000090ba 	.word	0x000090ba
    7934:	000090d1 	.word	0x000090d1

00007938 <nrf_cc3xx_platform_init_no_rng>:
    7938:	b510      	push	{r4, lr}
    793a:	4c0a      	ldr	r4, [pc, #40]	; (7964 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    793c:	6823      	ldr	r3, [r4, #0]
    793e:	b11b      	cbz	r3, 7948 <nrf_cc3xx_platform_init_no_rng+0x10>
    7940:	2301      	movs	r3, #1
    7942:	6023      	str	r3, [r4, #0]
    7944:	2000      	movs	r0, #0
    7946:	bd10      	pop	{r4, pc}
    7948:	f000 f8ce 	bl	7ae8 <CC_LibInitNoRng>
    794c:	2800      	cmp	r0, #0
    794e:	d0f7      	beq.n	7940 <nrf_cc3xx_platform_init_no_rng+0x8>
    7950:	3801      	subs	r0, #1
    7952:	2806      	cmp	r0, #6
    7954:	d803      	bhi.n	795e <nrf_cc3xx_platform_init_no_rng+0x26>
    7956:	4b04      	ldr	r3, [pc, #16]	; (7968 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7958:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    795c:	bd10      	pop	{r4, pc}
    795e:	4803      	ldr	r0, [pc, #12]	; (796c <nrf_cc3xx_platform_init_no_rng+0x34>)
    7960:	bd10      	pop	{r4, pc}
    7962:	bf00      	nop
    7964:	20000a28 	.word	0x20000a28
    7968:	00008e64 	.word	0x00008e64
    796c:	ffff8ffe 	.word	0xffff8ffe

00007970 <nrf_cc3xx_platform_abort>:
    7970:	f3bf 8f4f 	dsb	sy
    7974:	4905      	ldr	r1, [pc, #20]	; (798c <nrf_cc3xx_platform_abort+0x1c>)
    7976:	4b06      	ldr	r3, [pc, #24]	; (7990 <nrf_cc3xx_platform_abort+0x20>)
    7978:	68ca      	ldr	r2, [r1, #12]
    797a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    797e:	4313      	orrs	r3, r2
    7980:	60cb      	str	r3, [r1, #12]
    7982:	f3bf 8f4f 	dsb	sy
    7986:	bf00      	nop
    7988:	e7fd      	b.n	7986 <nrf_cc3xx_platform_abort+0x16>
    798a:	bf00      	nop
    798c:	e000ed00 	.word	0xe000ed00
    7990:	05fa0004 	.word	0x05fa0004

00007994 <CC_PalAbort>:
    7994:	b410      	push	{r4}
    7996:	4b09      	ldr	r3, [pc, #36]	; (79bc <CC_PalAbort+0x28>)
    7998:	4909      	ldr	r1, [pc, #36]	; (79c0 <CC_PalAbort+0x2c>)
    799a:	4c0a      	ldr	r4, [pc, #40]	; (79c4 <CC_PalAbort+0x30>)
    799c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    79a0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    79a4:	6849      	ldr	r1, [r1, #4]
    79a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    79aa:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    79ae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    79b2:	2300      	movs	r3, #0
    79b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    79b8:	bc10      	pop	{r4}
    79ba:	4708      	bx	r1
    79bc:	5002b000 	.word	0x5002b000
    79c0:	200000e4 	.word	0x200000e4
    79c4:	5002a000 	.word	0x5002a000

000079c8 <nrf_cc3xx_platform_set_abort>:
    79c8:	e9d0 1200 	ldrd	r1, r2, [r0]
    79cc:	4b01      	ldr	r3, [pc, #4]	; (79d4 <nrf_cc3xx_platform_set_abort+0xc>)
    79ce:	e9c3 1200 	strd	r1, r2, [r3]
    79d2:	4770      	bx	lr
    79d4:	200000e4 	.word	0x200000e4

000079d8 <mutex_free>:
    79d8:	b510      	push	{r4, lr}
    79da:	4604      	mov	r4, r0
    79dc:	b130      	cbz	r0, 79ec <mutex_free+0x14>
    79de:	6863      	ldr	r3, [r4, #4]
    79e0:	06db      	lsls	r3, r3, #27
    79e2:	d502      	bpl.n	79ea <mutex_free+0x12>
    79e4:	2300      	movs	r3, #0
    79e6:	6023      	str	r3, [r4, #0]
    79e8:	6063      	str	r3, [r4, #4]
    79ea:	bd10      	pop	{r4, pc}
    79ec:	4b02      	ldr	r3, [pc, #8]	; (79f8 <mutex_free+0x20>)
    79ee:	4803      	ldr	r0, [pc, #12]	; (79fc <mutex_free+0x24>)
    79f0:	685b      	ldr	r3, [r3, #4]
    79f2:	4798      	blx	r3
    79f4:	e7f3      	b.n	79de <mutex_free+0x6>
    79f6:	bf00      	nop
    79f8:	200000e4 	.word	0x200000e4
    79fc:	00008e80 	.word	0x00008e80

00007a00 <mutex_lock>:
    7a00:	b1b0      	cbz	r0, 7a30 <mutex_lock+0x30>
    7a02:	6843      	ldr	r3, [r0, #4]
    7a04:	b193      	cbz	r3, 7a2c <mutex_lock+0x2c>
    7a06:	06db      	lsls	r3, r3, #27
    7a08:	d50e      	bpl.n	7a28 <mutex_lock+0x28>
    7a0a:	2301      	movs	r3, #1
    7a0c:	e850 2f00 	ldrex	r2, [r0]
    7a10:	4619      	mov	r1, r3
    7a12:	e840 1c00 	strex	ip, r1, [r0]
    7a16:	f09c 0f00 	teq	ip, #0
    7a1a:	d1f7      	bne.n	7a0c <mutex_lock+0xc>
    7a1c:	2a01      	cmp	r2, #1
    7a1e:	d0f5      	beq.n	7a0c <mutex_lock+0xc>
    7a20:	f3bf 8f5f 	dmb	sy
    7a24:	2000      	movs	r0, #0
    7a26:	4770      	bx	lr
    7a28:	4803      	ldr	r0, [pc, #12]	; (7a38 <mutex_lock+0x38>)
    7a2a:	4770      	bx	lr
    7a2c:	4803      	ldr	r0, [pc, #12]	; (7a3c <mutex_lock+0x3c>)
    7a2e:	4770      	bx	lr
    7a30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7a34:	4770      	bx	lr
    7a36:	bf00      	nop
    7a38:	ffff8fe9 	.word	0xffff8fe9
    7a3c:	ffff8fea 	.word	0xffff8fea

00007a40 <mutex_unlock>:
    7a40:	b168      	cbz	r0, 7a5e <mutex_unlock+0x1e>
    7a42:	6843      	ldr	r3, [r0, #4]
    7a44:	b13b      	cbz	r3, 7a56 <mutex_unlock+0x16>
    7a46:	06db      	lsls	r3, r3, #27
    7a48:	d507      	bpl.n	7a5a <mutex_unlock+0x1a>
    7a4a:	f3bf 8f5f 	dmb	sy
    7a4e:	2300      	movs	r3, #0
    7a50:	6003      	str	r3, [r0, #0]
    7a52:	4618      	mov	r0, r3
    7a54:	4770      	bx	lr
    7a56:	4803      	ldr	r0, [pc, #12]	; (7a64 <mutex_unlock+0x24>)
    7a58:	4770      	bx	lr
    7a5a:	4803      	ldr	r0, [pc, #12]	; (7a68 <mutex_unlock+0x28>)
    7a5c:	4770      	bx	lr
    7a5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7a62:	4770      	bx	lr
    7a64:	ffff8fea 	.word	0xffff8fea
    7a68:	ffff8fe9 	.word	0xffff8fe9

00007a6c <mutex_init>:
    7a6c:	b510      	push	{r4, lr}
    7a6e:	4604      	mov	r4, r0
    7a70:	b120      	cbz	r0, 7a7c <mutex_init+0x10>
    7a72:	2200      	movs	r2, #0
    7a74:	2311      	movs	r3, #17
    7a76:	6022      	str	r2, [r4, #0]
    7a78:	6063      	str	r3, [r4, #4]
    7a7a:	bd10      	pop	{r4, pc}
    7a7c:	4801      	ldr	r0, [pc, #4]	; (7a84 <mutex_init+0x18>)
    7a7e:	f7ff ff89 	bl	7994 <CC_PalAbort>
    7a82:	e7f6      	b.n	7a72 <mutex_init+0x6>
    7a84:	00008ea8 	.word	0x00008ea8

00007a88 <nrf_cc3xx_platform_set_mutexes>:
    7a88:	b570      	push	{r4, r5, r6, lr}
    7a8a:	e9d0 2300 	ldrd	r2, r3, [r0]
    7a8e:	4c13      	ldr	r4, [pc, #76]	; (7adc <nrf_cc3xx_platform_set_mutexes+0x54>)
    7a90:	4d13      	ldr	r5, [pc, #76]	; (7ae0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    7a92:	6063      	str	r3, [r4, #4]
    7a94:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    7a98:	e9c4 3002 	strd	r3, r0, [r4, #8]
    7a9c:	6022      	str	r2, [r4, #0]
    7a9e:	4b11      	ldr	r3, [pc, #68]	; (7ae4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    7aa0:	6808      	ldr	r0, [r1, #0]
    7aa2:	6018      	str	r0, [r3, #0]
    7aa4:	6848      	ldr	r0, [r1, #4]
    7aa6:	6058      	str	r0, [r3, #4]
    7aa8:	6888      	ldr	r0, [r1, #8]
    7aaa:	6098      	str	r0, [r3, #8]
    7aac:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    7ab0:	60d8      	str	r0, [r3, #12]
    7ab2:	6119      	str	r1, [r3, #16]
    7ab4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    7ab8:	06db      	lsls	r3, r3, #27
    7aba:	d50d      	bpl.n	7ad8 <nrf_cc3xx_platform_set_mutexes+0x50>
    7abc:	2300      	movs	r3, #0
    7abe:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    7ac2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    7ac6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    7aca:	4790      	blx	r2
    7acc:	6823      	ldr	r3, [r4, #0]
    7ace:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    7ad2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ad6:	4718      	bx	r3
    7ad8:	bd70      	pop	{r4, r5, r6, pc}
    7ada:	bf00      	nop
    7adc:	200000f4 	.word	0x200000f4
    7ae0:	20000a40 	.word	0x20000a40
    7ae4:	20000104 	.word	0x20000104

00007ae8 <CC_LibInitNoRng>:
    7ae8:	b538      	push	{r3, r4, r5, lr}
    7aea:	f000 f82f 	bl	7b4c <CC_HalInit>
    7aee:	b120      	cbz	r0, 7afa <CC_LibInitNoRng+0x12>
    7af0:	2403      	movs	r4, #3
    7af2:	f000 f863 	bl	7bbc <CC_PalTerminate>
    7af6:	4620      	mov	r0, r4
    7af8:	bd38      	pop	{r3, r4, r5, pc}
    7afa:	f000 f831 	bl	7b60 <CC_PalInit>
    7afe:	b998      	cbnz	r0, 7b28 <CC_LibInitNoRng+0x40>
    7b00:	f000 f8ac 	bl	7c5c <CC_PalPowerSaveModeSelect>
    7b04:	b998      	cbnz	r0, 7b2e <CC_LibInitNoRng+0x46>
    7b06:	4d0f      	ldr	r5, [pc, #60]	; (7b44 <CC_LibInitNoRng+0x5c>)
    7b08:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    7b0c:	0e1b      	lsrs	r3, r3, #24
    7b0e:	2bf0      	cmp	r3, #240	; 0xf0
    7b10:	d108      	bne.n	7b24 <CC_LibInitNoRng+0x3c>
    7b12:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    7b16:	4b0c      	ldr	r3, [pc, #48]	; (7b48 <CC_LibInitNoRng+0x60>)
    7b18:	429a      	cmp	r2, r3
    7b1a:	d00a      	beq.n	7b32 <CC_LibInitNoRng+0x4a>
    7b1c:	2407      	movs	r4, #7
    7b1e:	f000 f817 	bl	7b50 <CC_HalTerminate>
    7b22:	e7e6      	b.n	7af2 <CC_LibInitNoRng+0xa>
    7b24:	2406      	movs	r4, #6
    7b26:	e7fa      	b.n	7b1e <CC_LibInitNoRng+0x36>
    7b28:	2404      	movs	r4, #4
    7b2a:	4620      	mov	r0, r4
    7b2c:	bd38      	pop	{r3, r4, r5, pc}
    7b2e:	2400      	movs	r4, #0
    7b30:	e7f5      	b.n	7b1e <CC_LibInitNoRng+0x36>
    7b32:	2001      	movs	r0, #1
    7b34:	f000 f892 	bl	7c5c <CC_PalPowerSaveModeSelect>
    7b38:	4604      	mov	r4, r0
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d1f7      	bne.n	7b2e <CC_LibInitNoRng+0x46>
    7b3e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    7b42:	e7d8      	b.n	7af6 <CC_LibInitNoRng+0xe>
    7b44:	5002b000 	.word	0x5002b000
    7b48:	20e00000 	.word	0x20e00000

00007b4c <CC_HalInit>:
    7b4c:	2000      	movs	r0, #0
    7b4e:	4770      	bx	lr

00007b50 <CC_HalTerminate>:
    7b50:	2000      	movs	r0, #0
    7b52:	4770      	bx	lr

00007b54 <CC_HalMaskInterrupt>:
    7b54:	4b01      	ldr	r3, [pc, #4]	; (7b5c <CC_HalMaskInterrupt+0x8>)
    7b56:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    7b5a:	4770      	bx	lr
    7b5c:	5002b000 	.word	0x5002b000

00007b60 <CC_PalInit>:
    7b60:	b510      	push	{r4, lr}
    7b62:	4811      	ldr	r0, [pc, #68]	; (7ba8 <CC_PalInit+0x48>)
    7b64:	f000 f848 	bl	7bf8 <CC_PalMutexCreate>
    7b68:	b100      	cbz	r0, 7b6c <CC_PalInit+0xc>
    7b6a:	bd10      	pop	{r4, pc}
    7b6c:	480f      	ldr	r0, [pc, #60]	; (7bac <CC_PalInit+0x4c>)
    7b6e:	f000 f843 	bl	7bf8 <CC_PalMutexCreate>
    7b72:	2800      	cmp	r0, #0
    7b74:	d1f9      	bne.n	7b6a <CC_PalInit+0xa>
    7b76:	4c0e      	ldr	r4, [pc, #56]	; (7bb0 <CC_PalInit+0x50>)
    7b78:	4620      	mov	r0, r4
    7b7a:	f000 f83d 	bl	7bf8 <CC_PalMutexCreate>
    7b7e:	2800      	cmp	r0, #0
    7b80:	d1f3      	bne.n	7b6a <CC_PalInit+0xa>
    7b82:	4b0c      	ldr	r3, [pc, #48]	; (7bb4 <CC_PalInit+0x54>)
    7b84:	480c      	ldr	r0, [pc, #48]	; (7bb8 <CC_PalInit+0x58>)
    7b86:	601c      	str	r4, [r3, #0]
    7b88:	f000 f836 	bl	7bf8 <CC_PalMutexCreate>
    7b8c:	4601      	mov	r1, r0
    7b8e:	2800      	cmp	r0, #0
    7b90:	d1eb      	bne.n	7b6a <CC_PalInit+0xa>
    7b92:	f000 f82d 	bl	7bf0 <CC_PalDmaInit>
    7b96:	4604      	mov	r4, r0
    7b98:	b108      	cbz	r0, 7b9e <CC_PalInit+0x3e>
    7b9a:	4620      	mov	r0, r4
    7b9c:	bd10      	pop	{r4, pc}
    7b9e:	f000 f83f 	bl	7c20 <CC_PalPowerSaveModeInit>
    7ba2:	4620      	mov	r0, r4
    7ba4:	e7fa      	b.n	7b9c <CC_PalInit+0x3c>
    7ba6:	bf00      	nop
    7ba8:	2000013c 	.word	0x2000013c
    7bac:	20000130 	.word	0x20000130
    7bb0:	20000138 	.word	0x20000138
    7bb4:	20000140 	.word	0x20000140
    7bb8:	20000134 	.word	0x20000134

00007bbc <CC_PalTerminate>:
    7bbc:	b508      	push	{r3, lr}
    7bbe:	4808      	ldr	r0, [pc, #32]	; (7be0 <CC_PalTerminate+0x24>)
    7bc0:	f000 f824 	bl	7c0c <CC_PalMutexDestroy>
    7bc4:	4807      	ldr	r0, [pc, #28]	; (7be4 <CC_PalTerminate+0x28>)
    7bc6:	f000 f821 	bl	7c0c <CC_PalMutexDestroy>
    7bca:	4807      	ldr	r0, [pc, #28]	; (7be8 <CC_PalTerminate+0x2c>)
    7bcc:	f000 f81e 	bl	7c0c <CC_PalMutexDestroy>
    7bd0:	4806      	ldr	r0, [pc, #24]	; (7bec <CC_PalTerminate+0x30>)
    7bd2:	f000 f81b 	bl	7c0c <CC_PalMutexDestroy>
    7bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7bda:	f000 b80b 	b.w	7bf4 <CC_PalDmaTerminate>
    7bde:	bf00      	nop
    7be0:	2000013c 	.word	0x2000013c
    7be4:	20000130 	.word	0x20000130
    7be8:	20000138 	.word	0x20000138
    7bec:	20000134 	.word	0x20000134

00007bf0 <CC_PalDmaInit>:
    7bf0:	2000      	movs	r0, #0
    7bf2:	4770      	bx	lr

00007bf4 <CC_PalDmaTerminate>:
    7bf4:	4770      	bx	lr
    7bf6:	bf00      	nop

00007bf8 <CC_PalMutexCreate>:
    7bf8:	b508      	push	{r3, lr}
    7bfa:	4b03      	ldr	r3, [pc, #12]	; (7c08 <CC_PalMutexCreate+0x10>)
    7bfc:	6802      	ldr	r2, [r0, #0]
    7bfe:	681b      	ldr	r3, [r3, #0]
    7c00:	6810      	ldr	r0, [r2, #0]
    7c02:	4798      	blx	r3
    7c04:	2000      	movs	r0, #0
    7c06:	bd08      	pop	{r3, pc}
    7c08:	200000f4 	.word	0x200000f4

00007c0c <CC_PalMutexDestroy>:
    7c0c:	b508      	push	{r3, lr}
    7c0e:	4b03      	ldr	r3, [pc, #12]	; (7c1c <CC_PalMutexDestroy+0x10>)
    7c10:	6802      	ldr	r2, [r0, #0]
    7c12:	685b      	ldr	r3, [r3, #4]
    7c14:	6810      	ldr	r0, [r2, #0]
    7c16:	4798      	blx	r3
    7c18:	2000      	movs	r0, #0
    7c1a:	bd08      	pop	{r3, pc}
    7c1c:	200000f4 	.word	0x200000f4

00007c20 <CC_PalPowerSaveModeInit>:
    7c20:	b570      	push	{r4, r5, r6, lr}
    7c22:	4c09      	ldr	r4, [pc, #36]	; (7c48 <CC_PalPowerSaveModeInit+0x28>)
    7c24:	4d09      	ldr	r5, [pc, #36]	; (7c4c <CC_PalPowerSaveModeInit+0x2c>)
    7c26:	6920      	ldr	r0, [r4, #16]
    7c28:	68ab      	ldr	r3, [r5, #8]
    7c2a:	4798      	blx	r3
    7c2c:	b118      	cbz	r0, 7c36 <CC_PalPowerSaveModeInit+0x16>
    7c2e:	4b08      	ldr	r3, [pc, #32]	; (7c50 <CC_PalPowerSaveModeInit+0x30>)
    7c30:	4808      	ldr	r0, [pc, #32]	; (7c54 <CC_PalPowerSaveModeInit+0x34>)
    7c32:	685b      	ldr	r3, [r3, #4]
    7c34:	4798      	blx	r3
    7c36:	4a08      	ldr	r2, [pc, #32]	; (7c58 <CC_PalPowerSaveModeInit+0x38>)
    7c38:	68eb      	ldr	r3, [r5, #12]
    7c3a:	6920      	ldr	r0, [r4, #16]
    7c3c:	2100      	movs	r1, #0
    7c3e:	6011      	str	r1, [r2, #0]
    7c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c44:	4718      	bx	r3
    7c46:	bf00      	nop
    7c48:	20000104 	.word	0x20000104
    7c4c:	200000f4 	.word	0x200000f4
    7c50:	200000e4 	.word	0x200000e4
    7c54:	00008ecc 	.word	0x00008ecc
    7c58:	20000a3c 	.word	0x20000a3c

00007c5c <CC_PalPowerSaveModeSelect>:
    7c5c:	b570      	push	{r4, r5, r6, lr}
    7c5e:	4d1b      	ldr	r5, [pc, #108]	; (7ccc <CC_PalPowerSaveModeSelect+0x70>)
    7c60:	4e1b      	ldr	r6, [pc, #108]	; (7cd0 <CC_PalPowerSaveModeSelect+0x74>)
    7c62:	4604      	mov	r4, r0
    7c64:	68b2      	ldr	r2, [r6, #8]
    7c66:	6928      	ldr	r0, [r5, #16]
    7c68:	4790      	blx	r2
    7c6a:	b9f8      	cbnz	r0, 7cac <CC_PalPowerSaveModeSelect+0x50>
    7c6c:	b15c      	cbz	r4, 7c86 <CC_PalPowerSaveModeSelect+0x2a>
    7c6e:	4c19      	ldr	r4, [pc, #100]	; (7cd4 <CC_PalPowerSaveModeSelect+0x78>)
    7c70:	6823      	ldr	r3, [r4, #0]
    7c72:	b1b3      	cbz	r3, 7ca2 <CC_PalPowerSaveModeSelect+0x46>
    7c74:	2b01      	cmp	r3, #1
    7c76:	d01b      	beq.n	7cb0 <CC_PalPowerSaveModeSelect+0x54>
    7c78:	3b01      	subs	r3, #1
    7c7a:	6023      	str	r3, [r4, #0]
    7c7c:	6928      	ldr	r0, [r5, #16]
    7c7e:	68f3      	ldr	r3, [r6, #12]
    7c80:	4798      	blx	r3
    7c82:	2000      	movs	r0, #0
    7c84:	bd70      	pop	{r4, r5, r6, pc}
    7c86:	4c13      	ldr	r4, [pc, #76]	; (7cd4 <CC_PalPowerSaveModeSelect+0x78>)
    7c88:	6821      	ldr	r1, [r4, #0]
    7c8a:	b941      	cbnz	r1, 7c9e <CC_PalPowerSaveModeSelect+0x42>
    7c8c:	4b12      	ldr	r3, [pc, #72]	; (7cd8 <CC_PalPowerSaveModeSelect+0x7c>)
    7c8e:	2201      	movs	r2, #1
    7c90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7c94:	4a11      	ldr	r2, [pc, #68]	; (7cdc <CC_PalPowerSaveModeSelect+0x80>)
    7c96:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7c9a:	2b00      	cmp	r3, #0
    7c9c:	d1fb      	bne.n	7c96 <CC_PalPowerSaveModeSelect+0x3a>
    7c9e:	3101      	adds	r1, #1
    7ca0:	6021      	str	r1, [r4, #0]
    7ca2:	68f3      	ldr	r3, [r6, #12]
    7ca4:	6928      	ldr	r0, [r5, #16]
    7ca6:	4798      	blx	r3
    7ca8:	2000      	movs	r0, #0
    7caa:	bd70      	pop	{r4, r5, r6, pc}
    7cac:	480c      	ldr	r0, [pc, #48]	; (7ce0 <CC_PalPowerSaveModeSelect+0x84>)
    7cae:	bd70      	pop	{r4, r5, r6, pc}
    7cb0:	4a0a      	ldr	r2, [pc, #40]	; (7cdc <CC_PalPowerSaveModeSelect+0x80>)
    7cb2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d1fb      	bne.n	7cb2 <CC_PalPowerSaveModeSelect+0x56>
    7cba:	4a07      	ldr	r2, [pc, #28]	; (7cd8 <CC_PalPowerSaveModeSelect+0x7c>)
    7cbc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    7cc0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7cc4:	f7ff ff46 	bl	7b54 <CC_HalMaskInterrupt>
    7cc8:	6823      	ldr	r3, [r4, #0]
    7cca:	e7d5      	b.n	7c78 <CC_PalPowerSaveModeSelect+0x1c>
    7ccc:	20000104 	.word	0x20000104
    7cd0:	200000f4 	.word	0x200000f4
    7cd4:	20000a3c 	.word	0x20000a3c
    7cd8:	5002a000 	.word	0x5002a000
    7cdc:	5002b000 	.word	0x5002b000
    7ce0:	ffff8fe9 	.word	0xffff8fe9

00007ce4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7ce4:	4770      	bx	lr

00007ce6 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    7ce6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cea:	4607      	mov	r7, r0
    7cec:	460e      	mov	r6, r1
    7cee:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    7cf0:	461d      	mov	r5, r3
    7cf2:	b30b      	cbz	r3, 7d38 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    7cf4:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    7cf6:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    7cf8:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    7cfc:	781b      	ldrb	r3, [r3, #0]
    7cfe:	4414      	add	r4, r2
    7d00:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7d04:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    7d06:	f04f 0900 	mov.w	r9, #0
    7d0a:	45d1      	cmp	r9, sl
    7d0c:	d308      	bcc.n	7d20 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    7d0e:	686a      	ldr	r2, [r5, #4]
    7d10:	f105 0308 	add.w	r3, r5, #8
    7d14:	4641      	mov	r1, r8
    7d16:	4638      	mov	r0, r7
    7d18:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    7d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    7d1e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    7d20:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    7d24:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    7d28:	4620      	mov	r0, r4
    7d2a:	f000 fa74 	bl	8216 <strlen>
    7d2e:	3001      	adds	r0, #1
    7d30:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    7d32:	f109 0901 	add.w	r9, r9, #1
    7d36:	e7e8      	b.n	7d0a <cbpprintf_external+0x24>
}
    7d38:	f06f 0015 	mvn.w	r0, #21
    7d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007d40 <sys_notify_validate>:
	if (notify == NULL) {
    7d40:	4603      	mov	r3, r0
    7d42:	b158      	cbz	r0, 7d5c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7d44:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7d46:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    7d4a:	2a01      	cmp	r2, #1
    7d4c:	d003      	beq.n	7d56 <sys_notify_validate+0x16>
    7d4e:	2a03      	cmp	r2, #3
    7d50:	d104      	bne.n	7d5c <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    7d52:	6802      	ldr	r2, [r0, #0]
    7d54:	b112      	cbz	r2, 7d5c <sys_notify_validate+0x1c>
		notify->result = 0;
    7d56:	2000      	movs	r0, #0
    7d58:	6098      	str	r0, [r3, #8]
    7d5a:	4770      	bx	lr
    7d5c:	f06f 0015 	mvn.w	r0, #21
}
    7d60:	4770      	bx	lr

00007d62 <arch_printk_char_out>:
}
    7d62:	2000      	movs	r0, #0
    7d64:	4770      	bx	lr

00007d66 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    7d66:	f000 b9a5 	b.w	80b4 <z_log_vprintk>

00007d6a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7d6a:	b40f      	push	{r0, r1, r2, r3}
    7d6c:	b507      	push	{r0, r1, r2, lr}
    7d6e:	a904      	add	r1, sp, #16
    7d70:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7d74:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    7d76:	f000 f99d 	bl	80b4 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    7d7a:	b003      	add	sp, #12
    7d7c:	f85d eb04 	ldr.w	lr, [sp], #4
    7d80:	b004      	add	sp, #16
    7d82:	4770      	bx	lr

00007d84 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7d84:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    7d86:	f013 0307 	ands.w	r3, r3, #7
    7d8a:	d105      	bne.n	7d98 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7d8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7d8e:	2b00      	cmp	r3, #0
    7d90:	bf0c      	ite	eq
    7d92:	2000      	moveq	r0, #0
    7d94:	2003      	movne	r0, #3
    7d96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7d98:	2b02      	cmp	r3, #2
    7d9a:	d105      	bne.n	7da8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7d9c:	8bc0      	ldrh	r0, [r0, #30]
    7d9e:	fab0 f080 	clz	r0, r0
    7da2:	0940      	lsrs	r0, r0, #5
    7da4:	0080      	lsls	r0, r0, #2
    7da6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7da8:	2b01      	cmp	r3, #1
    7daa:	d105      	bne.n	7db8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7dac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7dae:	2b00      	cmp	r3, #0
    7db0:	bf0c      	ite	eq
    7db2:	2000      	moveq	r0, #0
    7db4:	2005      	movne	r0, #5
    7db6:	4770      	bx	lr
	int evt = EVT_NOP;
    7db8:	2000      	movs	r0, #0
}
    7dba:	4770      	bx	lr

00007dbc <validate_args>:
{
    7dbc:	b510      	push	{r4, lr}
    7dbe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7dc0:	b100      	cbz	r0, 7dc4 <validate_args+0x8>
    7dc2:	b911      	cbnz	r1, 7dca <validate_args+0xe>
		return -EINVAL;
    7dc4:	f06f 0015 	mvn.w	r0, #21
}
    7dc8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    7dca:	1d08      	adds	r0, r1, #4
    7dcc:	f7ff ffb8 	bl	7d40 <sys_notify_validate>
	if ((rv == 0)
    7dd0:	2800      	cmp	r0, #0
    7dd2:	d1f9      	bne.n	7dc8 <validate_args+0xc>
	    && ((cli->notify.flags
    7dd4:	68a3      	ldr	r3, [r4, #8]
    7dd6:	2b03      	cmp	r3, #3
    7dd8:	d9f6      	bls.n	7dc8 <validate_args+0xc>
    7dda:	e7f3      	b.n	7dc4 <validate_args+0x8>

00007ddc <notify_one>:
{
    7ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de0:	460d      	mov	r5, r1
    7de2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7de4:	4619      	mov	r1, r3
    7de6:	1d28      	adds	r0, r5, #4
{
    7de8:	4690      	mov	r8, r2
    7dea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7dec:	f7f8 fd50 	bl	890 <sys_notify_finalize>
	if (cb) {
    7df0:	4604      	mov	r4, r0
    7df2:	b138      	cbz	r0, 7e04 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7df4:	4633      	mov	r3, r6
    7df6:	4642      	mov	r2, r8
    7df8:	4629      	mov	r1, r5
    7dfa:	4638      	mov	r0, r7
    7dfc:	46a4      	mov	ip, r4
}
    7dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7e02:	4760      	bx	ip
}
    7e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e08 <onoff_manager_init>:
{
    7e08:	b538      	push	{r3, r4, r5, lr}
    7e0a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7e0c:	4605      	mov	r5, r0
    7e0e:	b158      	cbz	r0, 7e28 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7e10:	b151      	cbz	r1, 7e28 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7e12:	680b      	ldr	r3, [r1, #0]
    7e14:	b143      	cbz	r3, 7e28 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7e16:	684b      	ldr	r3, [r1, #4]
    7e18:	b133      	cbz	r3, 7e28 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7e1a:	2220      	movs	r2, #32
    7e1c:	2100      	movs	r1, #0
    7e1e:	f000 fa15 	bl	824c <memset>
    7e22:	612c      	str	r4, [r5, #16]
	return 0;
    7e24:	2000      	movs	r0, #0
}
    7e26:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7e28:	f06f 0015 	mvn.w	r0, #21
    7e2c:	e7fb      	b.n	7e26 <onoff_manager_init+0x1e>

00007e2e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7e2e:	4604      	mov	r4, r0
    7e30:	b508      	push	{r3, lr}
    7e32:	4608      	mov	r0, r1
    7e34:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7e36:	461a      	mov	r2, r3
    7e38:	47a0      	blx	r4
	return z_impl_z_current_get();
    7e3a:	f7ff f84d 	bl	6ed8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7e3e:	f7fb f895 	bl	2f6c <z_impl_k_thread_abort>

00007e42 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    7e42:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    7e46:	8840      	ldrh	r0, [r0, #2]
}
    7e48:	0840      	lsrs	r0, r0, #1
    7e4a:	4770      	bx	lr

00007e4c <free_list_add>:
{
    7e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e4e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    7e50:	f7ff fff7 	bl	7e42 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    7e54:	fab0 f080 	clz	r0, r0
    7e58:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    7e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    7e60:	00ca      	lsls	r2, r1, #3
    7e62:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    7e66:	1d17      	adds	r7, r2, #4
{
    7e68:	460c      	mov	r4, r1
    7e6a:	3206      	adds	r2, #6
    7e6c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    7e6e:	b956      	cbnz	r6, 7e86 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    7e70:	2101      	movs	r1, #1
    7e72:	fa01 f000 	lsl.w	r0, r1, r0
    7e76:	68d9      	ldr	r1, [r3, #12]
    7e78:	4301      	orrs	r1, r0
    7e7a:	60d9      	str	r1, [r3, #12]
		b->next = c;
    7e7c:	f8cc 4010 	str.w	r4, [ip, #16]
    7e80:	53dd      	strh	r5, [r3, r7]
    7e82:	529d      	strh	r5, [r3, r2]
}
    7e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    7e86:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    7e88:	3104      	adds	r1, #4
    7e8a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    7e8c:	53d8      	strh	r0, [r3, r7]
    7e8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7e92:	529e      	strh	r6, [r3, r2]
    7e94:	80c5      	strh	r5, [r0, #6]
    7e96:	525d      	strh	r5, [r3, r1]
    7e98:	e7f4      	b.n	7e84 <free_list_add+0x38>

00007e9a <free_list_remove_bidx>:
{
    7e9a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    7e9c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    7ea0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    7ea2:	4299      	cmp	r1, r3
    7ea4:	f102 0104 	add.w	r1, r2, #4
    7ea8:	d10a      	bne.n	7ec0 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    7eaa:	2301      	movs	r3, #1
    7eac:	fa03 f202 	lsl.w	r2, r3, r2
    7eb0:	68c3      	ldr	r3, [r0, #12]
    7eb2:	ea23 0302 	bic.w	r3, r3, r2
    7eb6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    7eb8:	2300      	movs	r3, #0
    7eba:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    7ebe:	bd10      	pop	{r4, pc}
    7ec0:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    7ec2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    7ec6:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    7eca:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    7ece:	80cb      	strh	r3, [r1, #6]
    7ed0:	8082      	strh	r2, [r0, #4]
}
    7ed2:	e7f4      	b.n	7ebe <free_list_remove_bidx+0x24>

00007ed4 <alloc_chunk>:
{
    7ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    7ed8:	fab1 f581 	clz	r5, r1
    7edc:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    7ee0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    7ee4:	4603      	mov	r3, r0
	if (b->next) {
    7ee6:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    7eea:	460e      	mov	r6, r1
	if (b->next) {
    7eec:	b1c2      	cbz	r2, 7f20 <alloc_chunk+0x4c>
    7eee:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    7ef0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    7ef4:	4618      	mov	r0, r3
    7ef6:	4621      	mov	r1, r4
    7ef8:	f7ff ffa3 	bl	7e42 <chunk_size>
    7efc:	42b0      	cmp	r0, r6
    7efe:	d306      	bcc.n	7f0e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    7f00:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    7f02:	4618      	mov	r0, r3
    7f04:	f7ff ffc9 	bl	7e9a <free_list_remove_bidx>
}
    7f08:	4620      	mov	r0, r4
    7f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    7f0e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    7f12:	3f01      	subs	r7, #1
    7f14:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    7f16:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    7f1a:	d001      	beq.n	7f20 <alloc_chunk+0x4c>
    7f1c:	4282      	cmp	r2, r0
    7f1e:	d1e7      	bne.n	7ef0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    7f20:	f1c5 0220 	rsb	r2, r5, #32
    7f24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    7f28:	4094      	lsls	r4, r2
    7f2a:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    7f2c:	4014      	ands	r4, r2
    7f2e:	d0eb      	beq.n	7f08 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    7f30:	fa94 f2a4 	rbit	r2, r4
    7f34:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    7f38:	1d11      	adds	r1, r2, #4
    7f3a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    7f3e:	4621      	mov	r1, r4
    7f40:	e7df      	b.n	7f02 <alloc_chunk+0x2e>

00007f42 <split_chunks>:
{
    7f42:	b538      	push	{r3, r4, r5, lr}
    7f44:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    7f46:	f7ff ff7c 	bl	7e42 <chunk_size>
{
    7f4a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    7f4c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    7f4e:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    7f50:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    7f54:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    7f56:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    7f58:	8060      	strh	r0, [r4, #2]
    7f5a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    7f5e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    7f60:	8044      	strh	r4, [r0, #2]
    7f62:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    7f66:	4618      	mov	r0, r3
    7f68:	4611      	mov	r1, r2
    7f6a:	f7ff ff6a 	bl	7e42 <chunk_size>
	void *cmem = &buf[c];
    7f6e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    7f70:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    7f74:	bd38      	pop	{r3, r4, r5, pc}

00007f76 <sys_heap_alloc>:
{
    7f76:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    7f78:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    7f7a:	b909      	cbnz	r1, 7f80 <sys_heap_alloc+0xa>
		return NULL;
    7f7c:	2000      	movs	r0, #0
}
    7f7e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    7f80:	68ab      	ldr	r3, [r5, #8]
    7f82:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    7f86:	d9f9      	bls.n	7f7c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    7f88:	310b      	adds	r1, #11
    7f8a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    7f8c:	4621      	mov	r1, r4
    7f8e:	4628      	mov	r0, r5
    7f90:	f7ff ffa0 	bl	7ed4 <alloc_chunk>
	if (c == 0U) {
    7f94:	4606      	mov	r6, r0
    7f96:	2800      	cmp	r0, #0
    7f98:	d0f0      	beq.n	7f7c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    7f9a:	4601      	mov	r1, r0
    7f9c:	4628      	mov	r0, r5
    7f9e:	f7ff ff50 	bl	7e42 <chunk_size>
    7fa2:	42a0      	cmp	r0, r4
    7fa4:	d907      	bls.n	7fb6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    7fa6:	1932      	adds	r2, r6, r4
    7fa8:	4628      	mov	r0, r5
    7faa:	f7ff ffca 	bl	7f42 <split_chunks>
		free_list_add(h, c + chunk_sz);
    7fae:	4611      	mov	r1, r2
    7fb0:	4628      	mov	r0, r5
    7fb2:	f7ff ff4b 	bl	7e4c <free_list_add>
	void *cmem = &buf[c];
    7fb6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    7fba:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    7fbc:	8853      	ldrh	r3, [r2, #2]
    7fbe:	f043 0301 	orr.w	r3, r3, #1
    7fc2:	8053      	strh	r3, [r2, #2]
    7fc4:	3004      	adds	r0, #4
	return mem;
    7fc6:	e7da      	b.n	7f7e <sys_heap_alloc+0x8>

00007fc8 <encode_uint>:
{
    7fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fcc:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7fce:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    7fd0:	2b6f      	cmp	r3, #111	; 0x6f
{
    7fd2:	4680      	mov	r8, r0
    7fd4:	460f      	mov	r7, r1
    7fd6:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7fd8:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7fdc:	d029      	beq.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    7fde:	d824      	bhi.n	802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
		return 10;
    7fe0:	2b58      	cmp	r3, #88	; 0x58
    7fe2:	bf0c      	ite	eq
    7fe4:	2610      	moveq	r6, #16
    7fe6:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    7fe8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7fec:	4632      	mov	r2, r6
    7fee:	2300      	movs	r3, #0
    7ff0:	4640      	mov	r0, r8
    7ff2:	4639      	mov	r1, r7
    7ff4:	f7f8 f884 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7ff8:	2a09      	cmp	r2, #9
    7ffa:	b2d4      	uxtb	r4, r2
    7ffc:	d81e      	bhi.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7ffe:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8000:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8002:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8004:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8008:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    800c:	d301      	bcc.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    800e:	45d1      	cmp	r9, sl
    8010:	d811      	bhi.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
	if (conv->flag_hash) {
    8012:	782b      	ldrb	r3, [r5, #0]
    8014:	069b      	lsls	r3, r3, #26
    8016:	d505      	bpl.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
		if (radix == 8) {
    8018:	2e08      	cmp	r6, #8
    801a:	d115      	bne.n	8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>
			conv->altform_0 = true;
    801c:	78ab      	ldrb	r3, [r5, #2]
    801e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8022:	70ab      	strb	r3, [r5, #2]
}
    8024:	4648      	mov	r0, r9
    8026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    802a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    802e:	2b70      	cmp	r3, #112	; 0x70
    8030:	e7d7      	b.n	7fe2 <encode_uint+0x1a>
	switch (specifier) {
    8032:	2608      	movs	r6, #8
    8034:	e7d8      	b.n	7fe8 <encode_uint+0x20>
		value /= radix;
    8036:	4680      	mov	r8, r0
    8038:	460f      	mov	r7, r1
    803a:	e7d7      	b.n	7fec <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    803c:	f1bb 0f19 	cmp.w	fp, #25
    8040:	bf94      	ite	ls
    8042:	3437      	addls	r4, #55	; 0x37
    8044:	3457      	addhi	r4, #87	; 0x57
    8046:	e7db      	b.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
		} else if (radix == 16) {
    8048:	2e10      	cmp	r6, #16
    804a:	d1eb      	bne.n	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
			conv->altform_0c = true;
    804c:	78ab      	ldrb	r3, [r5, #2]
    804e:	f043 0310 	orr.w	r3, r3, #16
    8052:	e7e6      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>

00008054 <outs>:
{
    8054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8058:	4607      	mov	r7, r0
    805a:	4688      	mov	r8, r1
    805c:	4615      	mov	r5, r2
    805e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8060:	4614      	mov	r4, r2
    8062:	42b4      	cmp	r4, r6
    8064:	d305      	bcc.n	8072 <outs+0x1e>
    8066:	b10e      	cbz	r6, 806c <outs+0x18>
	return (int)count;
    8068:	1b60      	subs	r0, r4, r5
    806a:	e008      	b.n	807e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    806c:	7823      	ldrb	r3, [r4, #0]
    806e:	2b00      	cmp	r3, #0
    8070:	d0fa      	beq.n	8068 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    8072:	f814 0b01 	ldrb.w	r0, [r4], #1
    8076:	4641      	mov	r1, r8
    8078:	47b8      	blx	r7
		if (rc < 0) {
    807a:	2800      	cmp	r0, #0
    807c:	daf1      	bge.n	8062 <outs+0xe>
}
    807e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008082 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8082:	4040      	eors	r0, r0
    8084:	f380 8811 	msr	BASEPRI, r0
    8088:	f04f 0004 	mov.w	r0, #4
    808c:	df02      	svc	2
}
    808e:	4770      	bx	lr

00008090 <assert_print>:

void assert_print(const char *fmt, ...)
{
    8090:	b40f      	push	{r0, r1, r2, r3}
    8092:	b507      	push	{r0, r1, r2, lr}
    8094:	a904      	add	r1, sp, #16
    8096:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    809a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    809c:	f7ff fe63 	bl	7d66 <vprintk>

	va_end(ap);
}
    80a0:	b003      	add	sp, #12
    80a2:	f85d eb04 	ldr.w	lr, [sp], #4
    80a6:	b004      	add	sp, #16
    80a8:	4770      	bx	lr

000080aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    80aa:	4770      	bx	lr

000080ac <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    80ac:	f000 b9f7 	b.w	849e <sys_clock_cycle_get_32>

000080b0 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    80b0:	2000      	movs	r0, #0
    80b2:	4770      	bx	lr

000080b4 <z_log_vprintk>:
{
    80b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    80b6:	2300      	movs	r3, #0
    80b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    80bc:	e9cd 3300 	strd	r3, r3, [sp]
    80c0:	461a      	mov	r2, r3
    80c2:	4619      	mov	r1, r3
    80c4:	4618      	mov	r0, r3
    80c6:	f7f9 feb7 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    80ca:	b005      	add	sp, #20
    80cc:	f85d fb04 	ldr.w	pc, [sp], #4

000080d0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    80d0:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    80d2:	f7f9 fc0f 	bl	18f4 <log_init>
	}

	return 0;
}
    80d6:	2000      	movs	r0, #0
    80d8:	bd08      	pop	{r3, pc}

000080da <z_log_get_tag>:
}
    80da:	2000      	movs	r0, #0
    80dc:	4770      	bx	lr

000080de <out_func>:
{
    80de:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    80e0:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    80e4:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    80e8:	6852      	ldr	r2, [r2, #4]
    80ea:	2101      	movs	r1, #1
    80ec:	f10d 0007 	add.w	r0, sp, #7
    80f0:	4798      	blx	r3
}
    80f2:	2000      	movs	r0, #0
    80f4:	b003      	add	sp, #12
    80f6:	f85d fb04 	ldr.w	pc, [sp], #4

000080fa <cr_out_func>:
{
    80fa:	b538      	push	{r3, r4, r5, lr}
    80fc:	4605      	mov	r5, r0
    80fe:	460c      	mov	r4, r1
	out_func(c, ctx);
    8100:	f7ff ffed 	bl	80de <out_func>
	if (c == '\n') {
    8104:	2d0a      	cmp	r5, #10
    8106:	d103      	bne.n	8110 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    8108:	4621      	mov	r1, r4
    810a:	200d      	movs	r0, #13
    810c:	f7ff ffe7 	bl	80de <out_func>
}
    8110:	2000      	movs	r0, #0
    8112:	bd38      	pop	{r3, r4, r5, pc}

00008114 <buffer_write>:
{
    8114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8116:	4606      	mov	r6, r0
    8118:	460d      	mov	r5, r1
    811a:	4614      	mov	r4, r2
    811c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    811e:	4621      	mov	r1, r4
    8120:	4628      	mov	r0, r5
    8122:	463a      	mov	r2, r7
    8124:	47b0      	blx	r6
	} while (len != 0);
    8126:	1a24      	subs	r4, r4, r0
		buf += processed;
    8128:	4405      	add	r5, r0
	} while (len != 0);
    812a:	d1f8      	bne.n	811e <buffer_write+0xa>
}
    812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000812e <log_output_flush>:
		     output->control_block->offset,
    812e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8130:	6881      	ldr	r1, [r0, #8]
{
    8132:	b510      	push	{r4, lr}
    8134:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    8136:	e9d2 2300 	ldrd	r2, r3, [r2]
    813a:	6800      	ldr	r0, [r0, #0]
    813c:	f7ff ffea 	bl	8114 <buffer_write>
	output->control_block->offset = 0;
    8140:	6863      	ldr	r3, [r4, #4]
    8142:	2200      	movs	r2, #0
    8144:	601a      	str	r2, [r3, #0]
}
    8146:	bd10      	pop	{r4, pc}

00008148 <z_log_msg2_finalize>:
{
    8148:	b570      	push	{r4, r5, r6, lr}
    814a:	460e      	mov	r6, r1
    814c:	4615      	mov	r5, r2
    814e:	4619      	mov	r1, r3
	if (!msg) {
    8150:	4604      	mov	r4, r0
    8152:	b918      	cbnz	r0, 815c <z_log_msg2_finalize+0x14>
}
    8154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    8158:	f7f9 bc32 	b.w	19c0 <z_log_dropped>
	if (data) {
    815c:	b13b      	cbz	r3, 816e <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    815e:	f3c2 2349 	ubfx	r3, r2, #9, #10
    8162:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    8164:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    8168:	4418      	add	r0, r3
    816a:	f000 f864 	bl	8236 <memcpy>
	msg->hdr.source = source;
    816e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    8172:	4620      	mov	r0, r4
}
    8174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    8178:	f7f9 bc40 	b.w	19fc <z_log_msg2_commit>

0000817c <abort_function>:
{
    817c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    817e:	2000      	movs	r0, #0
    8180:	f7f9 fb5e 	bl	1840 <sys_reboot>

00008184 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    8184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8186:	ab0b      	add	r3, sp, #44	; 0x2c
    8188:	9305      	str	r3, [sp, #20]
    818a:	9303      	str	r3, [sp, #12]
    818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    818e:	9302      	str	r3, [sp, #8]
    8190:	2300      	movs	r3, #0
    8192:	e9cd 3300 	strd	r3, r3, [sp]
    8196:	2201      	movs	r2, #1
    8198:	4618      	mov	r0, r3
    819a:	f7f9 fe4d 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    819e:	b007      	add	sp, #28
    81a0:	f85d fb04 	ldr.w	pc, [sp], #4

000081a4 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    81a4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    81a6:	6800      	ldr	r0, [r0, #0]
    81a8:	f7fa b9d2 	b.w	2550 <z_arm_fatal_error>

000081ac <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    81ac:	2100      	movs	r1, #0
    81ae:	2001      	movs	r0, #1
    81b0:	f7fa b9ce 	b.w	2550 <z_arm_fatal_error>

000081b4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    81b4:	b508      	push	{r3, lr}
	handler();
    81b6:	f7fa fa6b 	bl	2690 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    81ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    81be:	f7fa bb43 	b.w	2848 <z_arm_exc_exit>

000081c2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    81c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    81c4:	ab0b      	add	r3, sp, #44	; 0x2c
    81c6:	9305      	str	r3, [sp, #20]
    81c8:	9303      	str	r3, [sp, #12]
    81ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81cc:	9302      	str	r3, [sp, #8]
    81ce:	2300      	movs	r3, #0
    81d0:	e9cd 3300 	strd	r3, r3, [sp]
    81d4:	2201      	movs	r2, #1
    81d6:	4618      	mov	r0, r3
    81d8:	f7f9 fe2e 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    81dc:	b007      	add	sp, #28
    81de:	f85d fb04 	ldr.w	pc, [sp], #4

000081e2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    81e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    81e4:	ab0b      	add	r3, sp, #44	; 0x2c
    81e6:	9305      	str	r3, [sp, #20]
    81e8:	9303      	str	r3, [sp, #12]
    81ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    81ec:	9302      	str	r3, [sp, #8]
    81ee:	2300      	movs	r3, #0
    81f0:	e9cd 3300 	strd	r3, r3, [sp]
    81f4:	2201      	movs	r2, #1
    81f6:	4618      	mov	r0, r3
    81f8:	f7f9 fe1e 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    81fc:	b007      	add	sp, #28
    81fe:	f85d fb04 	ldr.w	pc, [sp], #4

00008202 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    8202:	3901      	subs	r1, #1
    8204:	4603      	mov	r3, r0
    8206:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    820a:	b90a      	cbnz	r2, 8210 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    820c:	701a      	strb	r2, [r3, #0]

	return dest;
}
    820e:	4770      	bx	lr
		*d = *s;
    8210:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    8214:	e7f7      	b.n	8206 <strcpy+0x4>

00008216 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8216:	4603      	mov	r3, r0
	size_t n = 0;
    8218:	2000      	movs	r0, #0

	while (*s != '\0') {
    821a:	5c1a      	ldrb	r2, [r3, r0]
    821c:	b902      	cbnz	r2, 8220 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    821e:	4770      	bx	lr
		n++;
    8220:	3001      	adds	r0, #1
    8222:	e7fa      	b.n	821a <strlen+0x4>

00008224 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8224:	4603      	mov	r3, r0
	size_t n = 0;
    8226:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8228:	5c1a      	ldrb	r2, [r3, r0]
    822a:	b10a      	cbz	r2, 8230 <strnlen+0xc>
    822c:	4288      	cmp	r0, r1
    822e:	d100      	bne.n	8232 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8230:	4770      	bx	lr
		n++;
    8232:	3001      	adds	r0, #1
    8234:	e7f8      	b.n	8228 <strnlen+0x4>

00008236 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8236:	b510      	push	{r4, lr}
    8238:	1e43      	subs	r3, r0, #1
    823a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    823c:	4291      	cmp	r1, r2
    823e:	d100      	bne.n	8242 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8240:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8242:	f811 4b01 	ldrb.w	r4, [r1], #1
    8246:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    824a:	e7f7      	b.n	823c <memcpy+0x6>

0000824c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    824c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    824e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8250:	4603      	mov	r3, r0
	while (n > 0) {
    8252:	4293      	cmp	r3, r2
    8254:	d100      	bne.n	8258 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8256:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8258:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    825c:	e7f9      	b.n	8252 <memset+0x6>

0000825e <_stdout_hook_default>:
}
    825e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8262:	4770      	bx	lr

00008264 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8264:	2806      	cmp	r0, #6
    8266:	d108      	bne.n	827a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    826c:	2201      	movs	r2, #1
    826e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8272:	f3bf 8f4f 	dsb	sy
        __WFE();
    8276:	bf20      	wfe
    while (true)
    8278:	e7fd      	b.n	8276 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    827a:	4770      	bx	lr

0000827c <pm_state_exit_post_ops>:
	__asm__ volatile(
    827c:	2300      	movs	r3, #0
    827e:	f383 8811 	msr	BASEPRI, r3
    8282:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8286:	4770      	bx	lr

00008288 <set_on_state>:
	__asm__ volatile(
    8288:	f04f 0320 	mov.w	r3, #32
    828c:	f3ef 8211 	mrs	r2, BASEPRI
    8290:	f383 8812 	msr	BASEPRI_MAX, r3
    8294:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8298:	6803      	ldr	r3, [r0, #0]
    829a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    829e:	f043 0302 	orr.w	r3, r3, #2
    82a2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    82a4:	f382 8811 	msr	BASEPRI, r2
    82a8:	f3bf 8f6f 	isb	sy
}
    82ac:	4770      	bx	lr

000082ae <async_start>:
{
    82ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82b0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    82b2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    82b4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    82b6:	f04f 0520 	mov.w	r5, #32
    82ba:	f3ef 8611 	mrs	r6, BASEPRI
    82be:	f385 8812 	msr	BASEPRI_MAX, r5
    82c2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    82c6:	250c      	movs	r5, #12
    82c8:	4369      	muls	r1, r5
    82ca:	440c      	add	r4, r1
    82cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    82ce:	f005 0c07 	and.w	ip, r5, #7
    82d2:	f1bc 0f01 	cmp.w	ip, #1
    82d6:	d10b      	bne.n	82f0 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    82d8:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    82da:	f386 8811 	msr	BASEPRI, r6
    82de:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    82e2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    82e6:	6843      	ldr	r3, [r0, #4]
    82e8:	585b      	ldr	r3, [r3, r1]
    82ea:	4798      	blx	r3
	return 0;
    82ec:	2000      	movs	r0, #0
}
    82ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    82f0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    82f4:	42af      	cmp	r7, r5
    82f6:	f386 8811 	msr	BASEPRI, r6
    82fa:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    82fe:	bf0c      	ite	eq
    8300:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    8304:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8308:	e7f1      	b.n	82ee <async_start+0x40>

0000830a <api_start>:
{
    830a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    830c:	2480      	movs	r4, #128	; 0x80
    830e:	9400      	str	r4, [sp, #0]
    8310:	f7ff ffcd 	bl	82ae <async_start>
}
    8314:	b002      	add	sp, #8
    8316:	bd10      	pop	{r4, pc}

00008318 <onoff_started_callback>:
	return &data->mgr[type];
    8318:	6900      	ldr	r0, [r0, #16]
    831a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    831c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    8320:	2100      	movs	r1, #0
    8322:	4710      	bx	r2

00008324 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8324:	2000      	movs	r0, #0
    8326:	f7fc ba6d 	b.w	4804 <nrfx_clock_start>

0000832a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    832a:	2000      	movs	r0, #0
    832c:	f7fc bace 	b.w	48cc <nrfx_clock_stop>

00008330 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8330:	2280      	movs	r2, #128	; 0x80
    8332:	f7fb b80f 	b.w	3354 <stop>

00008336 <blocking_start_callback>:
{
    8336:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8338:	f7fd bd0c 	b.w	5d54 <z_impl_k_sem_give>

0000833c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    833c:	6843      	ldr	r3, [r0, #4]
    833e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8340:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8344:	600b      	str	r3, [r1, #0]
}
    8346:	2000      	movs	r0, #0
    8348:	4770      	bx	lr

0000834a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    834a:	6843      	ldr	r3, [r0, #4]
    834c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    834e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8352:	4042      	eors	r2, r0
    8354:	400a      	ands	r2, r1
    8356:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8358:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    835c:	2000      	movs	r0, #0
    835e:	4770      	bx	lr

00008360 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8360:	6843      	ldr	r3, [r0, #4]
    8362:	685b      	ldr	r3, [r3, #4]
}
    8364:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    8366:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    836a:	4770      	bx	lr

0000836c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    836c:	6843      	ldr	r3, [r0, #4]
    836e:	685b      	ldr	r3, [r3, #4]
}
    8370:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    8372:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    8376:	4770      	bx	lr

00008378 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8378:	6843      	ldr	r3, [r0, #4]
    837a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    837c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    8380:	404b      	eors	r3, r1
    p_reg->OUT = value;
    8382:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    8386:	2000      	movs	r0, #0
    8388:	4770      	bx	lr

0000838a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    838a:	6902      	ldr	r2, [r0, #16]
{
    838c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    838e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8392:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8396:	2000      	movs	r0, #0
    8398:	4770      	bx	lr

0000839a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    839a:	6843      	ldr	r3, [r0, #4]
    839c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    839e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    83a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    83a6:	4770      	bx	lr

000083a8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    83a8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    83aa:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    83ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    83b2:	b148      	cbz	r0, 83c8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    83b4:	7c52      	ldrb	r2, [r2, #17]
    83b6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    83b8:	2000      	movs	r0, #0
    83ba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    83be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    83c2:	2201      	movs	r2, #1
    83c4:	601a      	str	r2, [r3, #0]
	return 0;
    83c6:	4770      	bx	lr
		return -1;
    83c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    83cc:	4770      	bx	lr

000083ce <is_tx_ready.isra.0>:
	return config->uarte_regs;
    83ce:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    83d0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83d2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    83d6:	b940      	cbnz	r0, 83ea <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    83d8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    83da:	079b      	lsls	r3, r3, #30
    83dc:	d406      	bmi.n	83ec <is_tx_ready.isra.0+0x1e>
    83de:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    83e2:	3800      	subs	r0, #0
    83e4:	bf18      	it	ne
    83e6:	2001      	movne	r0, #1
    83e8:	4770      	bx	lr
    83ea:	2001      	movs	r0, #1
}
    83ec:	4770      	bx	lr

000083ee <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    83ee:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    83f0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    83f2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    83f6:	05c9      	lsls	r1, r1, #23
    83f8:	d518      	bpl.n	842c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    83fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    83fe:	b1a9      	cbz	r1, 842c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8400:	f04f 0020 	mov.w	r0, #32
    8404:	f3ef 8111 	mrs	r1, BASEPRI
    8408:	f380 8812 	msr	BASEPRI_MAX, r0
    840c:	f3bf 8f6f 	isb	sy
    8410:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8414:	b130      	cbz	r0, 8424 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8416:	2000      	movs	r0, #0
    8418:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    841c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8420:	2001      	movs	r0, #1
    8422:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    8424:	f381 8811 	msr	BASEPRI, r1
    8428:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    842c:	6852      	ldr	r2, [r2, #4]
    842e:	06d2      	lsls	r2, r2, #27
    8430:	d515      	bpl.n	845e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    8432:	f04f 0120 	mov.w	r1, #32
    8436:	f3ef 8211 	mrs	r2, BASEPRI
    843a:	f381 8812 	msr	BASEPRI_MAX, r1
    843e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8442:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8446:	b111      	cbz	r1, 844e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8448:	2100      	movs	r1, #0
    844a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    844e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8452:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    8456:	f382 8811 	msr	BASEPRI, r2
    845a:	f3bf 8f6f 	isb	sy
}
    845e:	4770      	bx	lr

00008460 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    8460:	b510      	push	{r4, lr}
    8462:	2200      	movs	r2, #0
    8464:	4604      	mov	r4, r0
    8466:	2101      	movs	r1, #1
    8468:	2028      	movs	r0, #40	; 0x28
    846a:	f7fa f8dd 	bl	2628 <z_arm_irq_priority_set>
    846e:	2028      	movs	r0, #40	; 0x28
    8470:	f7fa f8be 	bl	25f0 <arch_irq_enable>
    8474:	4620      	mov	r0, r4
    8476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    847a:	f7fb bc23 	b.w	3cc4 <uarte_instance_init.constprop.0>

0000847e <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    847e:	b510      	push	{r4, lr}
    8480:	2200      	movs	r2, #0
    8482:	4604      	mov	r4, r0
    8484:	2101      	movs	r1, #1
    8486:	2002      	movs	r0, #2
    8488:	f7fa f8ce 	bl	2628 <z_arm_irq_priority_set>
    848c:	2002      	movs	r0, #2
    848e:	f7fa f8af 	bl	25f0 <arch_irq_enable>
    8492:	4620      	mov	r0, r4
    8494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8498:	f7fb bc14 	b.w	3cc4 <uarte_instance_init.constprop.0>

0000849c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    849c:	4770      	bx	lr

0000849e <sys_clock_cycle_get_32>:
{
    849e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    84a0:	f7fb fd88 	bl	3fb4 <z_nrf_rtc_timer_read>
}
    84a4:	bd08      	pop	{r3, pc}

000084a6 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    84a6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    84a8:	6843      	ldr	r3, [r0, #4]
    84aa:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    84ac:	7a03      	ldrb	r3, [r0, #8]
    84ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    84b2:	3b01      	subs	r3, #1
    84b4:	00db      	lsls	r3, r3, #3
    84b6:	6845      	ldr	r5, [r0, #4]
    84b8:	6814      	ldr	r4, [r2, #0]
    84ba:	441d      	add	r5, r3
    84bc:	42ac      	cmp	r4, r5
    84be:	d902      	bls.n	84c6 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    84c0:	f06f 0001 	mvn.w	r0, #1
}
    84c4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    84c6:	7965      	ldrb	r5, [r4, #5]
    84c8:	428d      	cmp	r5, r1
    84ca:	d002      	beq.n	84d2 <pinctrl_lookup_state+0x2c>
		(*state)++;
    84cc:	3408      	adds	r4, #8
    84ce:	6014      	str	r4, [r2, #0]
    84d0:	e7f1      	b.n	84b6 <pinctrl_lookup_state+0x10>
			return 0;
    84d2:	2000      	movs	r0, #0
    84d4:	e7f6      	b.n	84c4 <pinctrl_lookup_state+0x1e>

000084d6 <nrf_gpio_pin_clear>:
{
    84d6:	b507      	push	{r0, r1, r2, lr}
    84d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    84da:	a801      	add	r0, sp, #4
    84dc:	f7fb ff1e 	bl	431c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    84e0:	9a01      	ldr	r2, [sp, #4]
    84e2:	2301      	movs	r3, #1
    84e4:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    84e6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    84ea:	b003      	add	sp, #12
    84ec:	f85d fb04 	ldr.w	pc, [sp], #4

000084f0 <nrf_gpio_pin_set>:
{
    84f0:	b507      	push	{r0, r1, r2, lr}
    84f2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    84f4:	a801      	add	r0, sp, #4
    84f6:	f7fb ff11 	bl	431c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    84fa:	9a01      	ldr	r2, [sp, #4]
    84fc:	2301      	movs	r3, #1
    84fe:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8500:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    8504:	b003      	add	sp, #12
    8506:	f85d fb04 	ldr.w	pc, [sp], #4

0000850a <nrf_gpio_pin_write>:
    if (value == 0)
    850a:	b909      	cbnz	r1, 8510 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    850c:	f7ff bfe3 	b.w	84d6 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    8510:	f7ff bfee 	b.w	84f0 <nrf_gpio_pin_set>

00008514 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    8514:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    8516:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    851a:	2b00      	cmp	r3, #0
{
    851c:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    851e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8522:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    8524:	bf0b      	itete	eq
    8526:	4615      	moveq	r5, r2
    8528:	2501      	movne	r5, #1
    852a:	460e      	moveq	r6, r1
    852c:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    852e:	9301      	str	r3, [sp, #4]
    8530:	f7fb fef4 	bl	431c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8534:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    8538:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    853c:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    8540:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8542:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    8544:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8548:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    854c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    8550:	b002      	add	sp, #8
    8552:	bd70      	pop	{r4, r5, r6, pc}

00008554 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    8554:	b570      	push	{r4, r5, r6, lr}
    8556:	4615      	mov	r5, r2
    8558:	4604      	mov	r4, r0
    855a:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    855e:	42a6      	cmp	r6, r4
    8560:	d101      	bne.n	8566 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    8562:	2000      	movs	r0, #0
}
    8564:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    8566:	6823      	ldr	r3, [r4, #0]
    8568:	0c1a      	lsrs	r2, r3, #16
    856a:	2a22      	cmp	r2, #34	; 0x22
    856c:	f200 808e 	bhi.w	868c <pinctrl_configure_pins+0x138>
    8570:	e8df f002 	tbb	[pc, r2]
    8574:	43241d12 	.word	0x43241d12
    8578:	8c433929 	.word	0x8c433929
    857c:	488c8c8c 	.word	0x488c8c8c
    8580:	8c8c8c4d 	.word	0x8c8c8c4d
    8584:	8c8c8c8c 	.word	0x8c8c8c8c
    8588:	5e528c8c 	.word	0x5e528c8c
    858c:	8c8c6863 	.word	0x8c8c6863
    8590:	78736d8c 	.word	0x78736d8c
    8594:	827d      	.short	0x827d
    8596:	87          	.byte	0x87
    8597:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    8598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    859c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    85a0:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    85a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    85a6:	f7ff ffa3 	bl	84f0 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    85aa:	2201      	movs	r2, #1
    85ac:	e015      	b.n	85da <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    85ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85b2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    85b6:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    85b8:	2100      	movs	r1, #0
    85ba:	e00f      	b.n	85dc <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    85bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85c0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    85c4:	e7ec      	b.n	85a0 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    85c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85ca:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    85ce:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    85d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    85d4:	f7ff ff7f 	bl	84d6 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    85d8:	2200      	movs	r2, #0
    85da:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    85dc:	6820      	ldr	r0, [r4, #0]
    85de:	f7ff ff99 	bl	8514 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    85e2:	3404      	adds	r4, #4
    85e4:	e7bb      	b.n	855e <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    85e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85ea:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    85ee:	6820      	ldr	r0, [r4, #0]
    85f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    85f4:	f7ff ff6f 	bl	84d6 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    85f8:	e7d7      	b.n	85aa <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    85fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    85fe:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8602:	e7d8      	b.n	85b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    8604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8608:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    860c:	e7d3      	b.n	85b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    860e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8612:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    8616:	e7ce      	b.n	85b6 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    8618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    861c:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8620:	6820      	ldr	r0, [r4, #0]
    8622:	f3c0 3140 	ubfx	r1, r0, #13, #1
    8626:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    862a:	f7ff ff6e 	bl	850a <nrf_gpio_pin_write>
    862e:	e7bc      	b.n	85aa <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    8630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8634:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8638:	e7f2      	b.n	8620 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    863a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    863e:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8642:	e7ed      	b.n	8620 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    8644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8648:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    864c:	e7e8      	b.n	8620 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    864e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8652:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8656:	2201      	movs	r2, #1
    8658:	e7ae      	b.n	85b8 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    865a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    865e:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8662:	e7f8      	b.n	8656 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    8664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8668:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    866c:	e7f3      	b.n	8656 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    866e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8672:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8676:	e7ee      	b.n	8656 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    8678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    867c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8680:	e7e9      	b.n	8656 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    8682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8686:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    868a:	e7e4      	b.n	8656 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    868c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8690:	e768      	b.n	8564 <pinctrl_configure_pins+0x10>

00008692 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8692:	f7ff b951 	b.w	7938 <nrf_cc3xx_platform_init_no_rng>

00008696 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8696:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8698:	f7f9 fe72 	bl	2380 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    869c:	f7f9 ff24 	bl	24e8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    86a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    86a4:	f7ff b948 	b.w	7938 <nrf_cc3xx_platform_init_no_rng>

000086a8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    86a8:	4700      	bx	r0

000086aa <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    86aa:	f000 b8f2 	b.w	8892 <z_impl_k_busy_wait>

000086ae <nrf_gpio_pin_present_check>:
    switch (port)
    86ae:	0943      	lsrs	r3, r0, #5
    86b0:	d00b      	beq.n	86ca <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    86b2:	2b01      	cmp	r3, #1
    86b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    86b8:	bf18      	it	ne
    86ba:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    86bc:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86c0:	fa23 f000 	lsr.w	r0, r3, r0
}
    86c4:	f000 0001 	and.w	r0, r0, #1
    86c8:	4770      	bx	lr
    switch (port)
    86ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    86ce:	e7f5      	b.n	86bc <nrf_gpio_pin_present_check+0xe>

000086d0 <pin_is_task_output>:
{
    86d0:	b508      	push	{r3, lr}
    86d2:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    86d4:	f7fc f962 	bl	499c <pin_is_output>
    86d8:	b110      	cbz	r0, 86e0 <pin_is_task_output+0x10>
    86da:	4610      	mov	r0, r2
    86dc:	f7fc f948 	bl	4970 <pin_in_use_by_te>
}
    86e0:	f000 0001 	and.w	r0, r0, #1
    86e4:	bd08      	pop	{r3, pc}

000086e6 <nrf_gpio_reconfigure>:
{
    86e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    86ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86ec:	a801      	add	r0, sp, #4
{
    86ee:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    86f2:	460c      	mov	r4, r1
    86f4:	4617      	mov	r7, r2
    86f6:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86f8:	f7fc f978 	bl	49ec <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    86fc:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    86fe:	1e39      	subs	r1, r7, #0
    8700:	bf18      	it	ne
    8702:	2101      	movne	r1, #1
    8704:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8708:	1e23      	subs	r3, r4, #0
    870a:	bf18      	it	ne
    870c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    870e:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8710:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8714:	bf14      	ite	ne
    8716:	210c      	movne	r1, #12
    8718:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    871a:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    871c:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8720:	bf14      	ite	ne
    8722:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8726:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8728:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    872c:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8730:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8734:	bf14      	ite	ne
    8736:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    873a:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    873c:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    873e:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8742:	b104      	cbz	r4, 8746 <nrf_gpio_reconfigure+0x60>
    8744:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8746:	b10f      	cbz	r7, 874c <nrf_gpio_reconfigure+0x66>
    8748:	783f      	ldrb	r7, [r7, #0]
    874a:	007f      	lsls	r7, r7, #1
    874c:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    874e:	b10e      	cbz	r6, 8754 <nrf_gpio_reconfigure+0x6e>
    8750:	7836      	ldrb	r6, [r6, #0]
    8752:	00b6      	lsls	r6, r6, #2
    8754:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8756:	b18d      	cbz	r5, 877c <nrf_gpio_reconfigure+0x96>
    8758:	7829      	ldrb	r1, [r5, #0]
    875a:	0209      	lsls	r1, r1, #8
    875c:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    875e:	f1b8 0f00 	cmp.w	r8, #0
    8762:	d003      	beq.n	876c <nrf_gpio_reconfigure+0x86>
    8764:	f898 8000 	ldrb.w	r8, [r8]
    8768:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    876c:	4321      	orrs	r1, r4
    876e:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    8772:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    8776:	b002      	add	sp, #8
    8778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    877c:	4629      	mov	r1, r5
    877e:	e7ed      	b.n	875c <nrf_gpio_reconfigure+0x76>

00008780 <nrf_gpio_cfg_sense_set>:
{
    8780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8782:	f10d 030f 	add.w	r3, sp, #15
    8786:	9301      	str	r3, [sp, #4]
    8788:	2300      	movs	r3, #0
{
    878a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    878e:	9300      	str	r3, [sp, #0]
    8790:	461a      	mov	r2, r3
    8792:	4619      	mov	r1, r3
    8794:	f7ff ffa7 	bl	86e6 <nrf_gpio_reconfigure>
}
    8798:	b005      	add	sp, #20
    879a:	f85d fb04 	ldr.w	pc, [sp], #4

0000879e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    879e:	f7fc bce5 	b.w	516c <_DoInit>

000087a2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    87a2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    87a4:	f7ff fffb 	bl	879e <SEGGER_RTT_Init>

	return 0;
}
    87a8:	2000      	movs	r0, #0
    87aa:	bd08      	pop	{r3, pc}

000087ac <z_device_state_init>:
}
    87ac:	4770      	bx	lr

000087ae <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    87ae:	b138      	cbz	r0, 87c0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    87b0:	68c3      	ldr	r3, [r0, #12]
    87b2:	8818      	ldrh	r0, [r3, #0]
    87b4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    87b8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    87bc:	4258      	negs	r0, r3
    87be:	4158      	adcs	r0, r3
}
    87c0:	4770      	bx	lr

000087c2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    87c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    87c4:	ab0b      	add	r3, sp, #44	; 0x2c
    87c6:	9305      	str	r3, [sp, #20]
    87c8:	9303      	str	r3, [sp, #12]
    87ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    87cc:	9302      	str	r3, [sp, #8]
    87ce:	2300      	movs	r3, #0
    87d0:	e9cd 3300 	strd	r3, r3, [sp]
    87d4:	2201      	movs	r2, #1
    87d6:	4618      	mov	r0, r3
    87d8:	f7f9 fb2e 	bl	1e38 <z_impl_z_log_msg2_runtime_vcreate>
}
    87dc:	b007      	add	sp, #28
    87de:	f85d fb04 	ldr.w	pc, [sp], #4

000087e2 <z_early_memset>:
	(void) memset(dst, c, n);
    87e2:	f7ff bd33 	b.w	824c <memset>

000087e6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    87e6:	f7ff bd26 	b.w	8236 <memcpy>

000087ea <k_mem_slab_init>:
{
    87ea:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    87ec:	2400      	movs	r4, #0
    87ee:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    87f0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    87f2:	ea41 0402 	orr.w	r4, r1, r2
    87f6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    87fa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    87fe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8800:	d10c      	bne.n	881c <k_mem_slab_init+0x32>
    8802:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    8804:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    8806:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8808:	d103      	bne.n	8812 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    880a:	e9c0 0000 	strd	r0, r0, [r0]
}
    880e:	2000      	movs	r0, #0
}
    8810:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8812:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8814:	3401      	adds	r4, #1
    8816:	460d      	mov	r5, r1
		p += slab->block_size;
    8818:	4411      	add	r1, r2
    881a:	e7f3      	b.n	8804 <k_mem_slab_init+0x1a>
		return -EINVAL;
    881c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8820:	e7f6      	b.n	8810 <k_mem_slab_init+0x26>

00008822 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8822:	f3ef 8005 	mrs	r0, IPSR
}
    8826:	3800      	subs	r0, #0
    8828:	bf18      	it	ne
    882a:	2001      	movne	r0, #1
    882c:	4770      	bx	lr

0000882e <k_thread_name_get>:
}
    882e:	2000      	movs	r0, #0
    8830:	4770      	bx	lr

00008832 <z_pm_save_idle_exit>:
{
    8832:	b508      	push	{r3, lr}
	pm_system_resume();
    8834:	f7f9 fc94 	bl	2160 <pm_system_resume>
}
    8838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    883c:	f7ff be2e 	b.w	849c <sys_clock_idle_exit>

00008840 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8840:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8844:	428b      	cmp	r3, r1
    8846:	d001      	beq.n	884c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8848:	f7fd bfee 	b.w	6828 <z_set_prio>
}
    884c:	2000      	movs	r0, #0
    884e:	4770      	bx	lr

00008850 <z_impl_k_mutex_init>:
{
    8850:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8852:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8854:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8858:	e9c3 3300 	strd	r3, r3, [r3]
}
    885c:	4770      	bx	lr

0000885e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    885e:	4603      	mov	r3, r0
    8860:	b920      	cbnz	r0, 886c <z_reschedule_irqlock+0xe>
    8862:	f3ef 8205 	mrs	r2, IPSR
    8866:	b90a      	cbnz	r2, 886c <z_reschedule_irqlock+0xe>
    8868:	f7f9 bf32 	b.w	26d0 <arch_swap>
    886c:	f383 8811 	msr	BASEPRI, r3
    8870:	f3bf 8f6f 	isb	sy
}
    8874:	4770      	bx	lr

00008876 <z_reschedule_unlocked>:
	__asm__ volatile(
    8876:	f04f 0320 	mov.w	r3, #32
    887a:	f3ef 8011 	mrs	r0, BASEPRI
    887e:	f383 8812 	msr	BASEPRI_MAX, r3
    8882:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8886:	f7ff bfea 	b.w	885e <z_reschedule_irqlock>

0000888a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    888a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    888c:	f7fe feb0 	bl	75f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8890:	bd08      	pop	{r3, pc}

00008892 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8892:	b108      	cbz	r0, 8898 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8894:	f7fa bd18 	b.w	32c8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8898:	4770      	bx	lr

0000889a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    889a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    889e:	bf08      	it	eq
    88a0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    88a4:	b538      	push	{r3, r4, r5, lr}
    88a6:	460c      	mov	r4, r1
    88a8:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    88aa:	d014      	beq.n	88d6 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    88ac:	4308      	orrs	r0, r1
    88ae:	d103      	bne.n	88b8 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    88b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    88b4:	f7fe be9c 	b.w	75f0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    88b8:	f06f 0001 	mvn.w	r0, #1
    88bc:	1b40      	subs	r0, r0, r5
    88be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    88c2:	eb63 0101 	sbc.w	r1, r3, r1
    88c6:	2900      	cmp	r1, #0
    88c8:	da04      	bge.n	88d4 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    88ca:	f7fe fe91 	bl	75f0 <sys_clock_tick_get>
    88ce:	1940      	adds	r0, r0, r5
    88d0:	eb41 0104 	adc.w	r1, r1, r4
}
    88d4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    88d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    88da:	4601      	mov	r1, r0
    88dc:	e7fa      	b.n	88d4 <sys_clock_timeout_end_calc+0x3a>

000088de <k_malloc>:
{
    88de:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    88e0:	2004      	movs	r0, #4
    88e2:	f7fe bf0b 	b.w	76fc <k_aligned_alloc>

000088e6 <k_heap_init>:
{
    88e6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    88e8:	f100 040c 	add.w	r4, r0, #12
    88ec:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    88f0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    88f2:	f7f8 bb5f 	b.w	fb4 <sys_heap_init>

000088f6 <open_cab>:
    uint16_t i;
    i = (buf - cab_id->buffers) / cab_id->num;
    return i;
}

cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    88f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88fa:	4606      	mov	r6, r0

    cab* buffer = (cab *) k_malloc(sizeof(cab));
    88fc:	2030      	movs	r0, #48	; 0x30
cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    88fe:	460d      	mov	r5, r1
    8900:	4617      	mov	r7, r2
    8902:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    8904:	f7ff ffeb 	bl	88de <k_malloc>
    buffer->num = num;
    8908:	8085      	strh	r5, [r0, #4]
    buffer->dim = dim;
    buffer->size = num * dim;
    890a:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    890e:	4604      	mov	r4, r0
    buffer->dim = dim;
    8910:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    8912:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    8914:	301c      	adds	r0, #28
    8916:	f7ff ff9b 	bl	8850 <z_impl_k_mutex_init>
    k_mutex_init(&buffer->mutex);
    /* The minimum number of buffers needed for a CAB to avoid conflicts 
    must be equal to the number of tasks which share the CAB plus one */
    buffer->buffers = (uint16_t *) k_malloc(buffer->size * N_TASKS); 
    891a:	8920      	ldrh	r0, [r4, #8]
    891c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8920:	f7ff ffdd 	bl	88de <k_malloc>
    8924:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    8926:	4630      	mov	r0, r6
    8928:	f7ff fc75 	bl	8216 <strlen>
    892c:	f7ff ffd7 	bl	88de <k_malloc>
    8930:	6020      	str	r0, [r4, #0]
    buffer->head = (uint16_t *) k_malloc(buffer->size);
    8932:	8920      	ldrh	r0, [r4, #8]
    8934:	f7ff ffd3 	bl	88de <k_malloc>
    strcpy(buffer->name, name);
    8938:	4631      	mov	r1, r6
    buffer->head = (uint16_t *) k_malloc(buffer->size);
    893a:	61a0      	str	r0, [r4, #24]
    strcpy(buffer->name, name);
    893c:	6820      	ldr	r0, [r4, #0]
    893e:	f7ff fc60 	bl	8202 <strcpy>
    buffer->head = first;
    8942:	f8c4 8018 	str.w	r8, [r4, #24]
    return buffer;
}
    8946:	4620      	mov	r0, r4
    8948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000894c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    894c:	f7fb bd6a 	b.w	4424 <SystemInit>
