
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 d7 00 20 11 45 00 00 e9 a2 00 00 e5 44 00 00     @.. .E.......D..
  10:	e5 44 00 00 e5 44 00 00 e5 44 00 00 00 00 00 00     .D...D...D......
	...
  2c:	cd 3d 00 00 e5 44 00 00 00 00 00 00 79 3d 00 00     .=...D......y=..
  3c:	e5 44 00 00                                         .D..

00000040 <_irq_vector_table>:
  40:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  50:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  60:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  70:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  80:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  90:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  a0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  b0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  c0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  d0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  e0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..
  f0:	7d 3e 00 00 7d 3e 00 00 7d 3e 00 00 7d 3e 00 00     }>..}>..}>..}>..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <__data_size+0x14e>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <__data_size+0x13a>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <__data_size+0x12>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <__data_size+0x30>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <__data_size+0x46>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <__data_size+0x84>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <__data_size+0x6c>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x1a0>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <__data_size+0x6c>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <__data_size+0xce>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <__data_size+0xca>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <__data_size+0xe4>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <__data_size+0x132>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <__data_size+0x11a>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x1ae>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <__data_size+0x172>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x190>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <__data_size+0x98>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <__data_size+0x98>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <__data_size+0x98>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <__data_size+0x46>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <__data_size+0x46>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_HEAP_MEM_POOL_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_HEAP_MEM_POOL_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_frsub>:
     93c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     940:	e002      	b.n	948 <__addsf3>
     942:	bf00      	nop

00000944 <__aeabi_fsub>:
     944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000948 <__addsf3>:
     948:	0042      	lsls	r2, r0, #1
     94a:	bf1f      	itttt	ne
     94c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     950:	ea92 0f03 	teqne	r2, r3
     954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     95c:	d06a      	beq.n	a34 <__addsf3+0xec>
     95e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     966:	bfc1      	itttt	gt
     968:	18d2      	addgt	r2, r2, r3
     96a:	4041      	eorgt	r1, r0
     96c:	4048      	eorgt	r0, r1
     96e:	4041      	eorgt	r1, r0
     970:	bfb8      	it	lt
     972:	425b      	neglt	r3, r3
     974:	2b19      	cmp	r3, #25
     976:	bf88      	it	hi
     978:	4770      	bxhi	lr
     97a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     97e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     986:	bf18      	it	ne
     988:	4240      	negne	r0, r0
     98a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     98e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     996:	bf18      	it	ne
     998:	4249      	negne	r1, r1
     99a:	ea92 0f03 	teq	r2, r3
     99e:	d03f      	beq.n	a20 <__addsf3+0xd8>
     9a0:	f1a2 0201 	sub.w	r2, r2, #1
     9a4:	fa41 fc03 	asr.w	ip, r1, r3
     9a8:	eb10 000c 	adds.w	r0, r0, ip
     9ac:	f1c3 0320 	rsb	r3, r3, #32
     9b0:	fa01 f103 	lsl.w	r1, r1, r3
     9b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9b8:	d502      	bpl.n	9c0 <__addsf3+0x78>
     9ba:	4249      	negs	r1, r1
     9bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9c4:	d313      	bcc.n	9ee <__addsf3+0xa6>
     9c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ca:	d306      	bcc.n	9da <__addsf3+0x92>
     9cc:	0840      	lsrs	r0, r0, #1
     9ce:	ea4f 0131 	mov.w	r1, r1, rrx
     9d2:	f102 0201 	add.w	r2, r2, #1
     9d6:	2afe      	cmp	r2, #254	; 0xfe
     9d8:	d251      	bcs.n	a7e <__addsf3+0x136>
     9da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     9e2:	bf08      	it	eq
     9e4:	f020 0001 	biceq.w	r0, r0, #1
     9e8:	ea40 0003 	orr.w	r0, r0, r3
     9ec:	4770      	bx	lr
     9ee:	0049      	lsls	r1, r1, #1
     9f0:	eb40 0000 	adc.w	r0, r0, r0
     9f4:	3a01      	subs	r2, #1
     9f6:	bf28      	it	cs
     9f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     9fc:	d2ed      	bcs.n	9da <__addsf3+0x92>
     9fe:	fab0 fc80 	clz	ip, r0
     a02:	f1ac 0c08 	sub.w	ip, ip, #8
     a06:	ebb2 020c 	subs.w	r2, r2, ip
     a0a:	fa00 f00c 	lsl.w	r0, r0, ip
     a0e:	bfaa      	itet	ge
     a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a14:	4252      	neglt	r2, r2
     a16:	4318      	orrge	r0, r3
     a18:	bfbc      	itt	lt
     a1a:	40d0      	lsrlt	r0, r2
     a1c:	4318      	orrlt	r0, r3
     a1e:	4770      	bx	lr
     a20:	f092 0f00 	teq	r2, #0
     a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a28:	bf06      	itte	eq
     a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a2e:	3201      	addeq	r2, #1
     a30:	3b01      	subne	r3, #1
     a32:	e7b5      	b.n	9a0 <__addsf3+0x58>
     a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a3c:	bf18      	it	ne
     a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a42:	d021      	beq.n	a88 <__addsf3+0x140>
     a44:	ea92 0f03 	teq	r2, r3
     a48:	d004      	beq.n	a54 <__addsf3+0x10c>
     a4a:	f092 0f00 	teq	r2, #0
     a4e:	bf08      	it	eq
     a50:	4608      	moveq	r0, r1
     a52:	4770      	bx	lr
     a54:	ea90 0f01 	teq	r0, r1
     a58:	bf1c      	itt	ne
     a5a:	2000      	movne	r0, #0
     a5c:	4770      	bxne	lr
     a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a62:	d104      	bne.n	a6e <__addsf3+0x126>
     a64:	0040      	lsls	r0, r0, #1
     a66:	bf28      	it	cs
     a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a6c:	4770      	bx	lr
     a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a72:	bf3c      	itt	cc
     a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a78:	4770      	bxcc	lr
     a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a86:	4770      	bx	lr
     a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
     a8c:	bf16      	itet	ne
     a8e:	4608      	movne	r0, r1
     a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     a94:	4601      	movne	r1, r0
     a96:	0242      	lsls	r2, r0, #9
     a98:	bf06      	itte	eq
     a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     a9e:	ea90 0f01 	teqeq	r0, r1
     aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     aa6:	4770      	bx	lr

00000aa8 <__aeabi_ui2f>:
     aa8:	f04f 0300 	mov.w	r3, #0
     aac:	e004      	b.n	ab8 <__aeabi_i2f+0x8>
     aae:	bf00      	nop

00000ab0 <__aeabi_i2f>:
     ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ab4:	bf48      	it	mi
     ab6:	4240      	negmi	r0, r0
     ab8:	ea5f 0c00 	movs.w	ip, r0
     abc:	bf08      	it	eq
     abe:	4770      	bxeq	lr
     ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ac4:	4601      	mov	r1, r0
     ac6:	f04f 0000 	mov.w	r0, #0
     aca:	e01c      	b.n	b06 <__aeabi_l2f+0x2a>

00000acc <__aeabi_ul2f>:
     acc:	ea50 0201 	orrs.w	r2, r0, r1
     ad0:	bf08      	it	eq
     ad2:	4770      	bxeq	lr
     ad4:	f04f 0300 	mov.w	r3, #0
     ad8:	e00a      	b.n	af0 <__aeabi_l2f+0x14>
     ada:	bf00      	nop

00000adc <__aeabi_l2f>:
     adc:	ea50 0201 	orrs.w	r2, r0, r1
     ae0:	bf08      	it	eq
     ae2:	4770      	bxeq	lr
     ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ae8:	d502      	bpl.n	af0 <__aeabi_l2f+0x14>
     aea:	4240      	negs	r0, r0
     aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     af0:	ea5f 0c01 	movs.w	ip, r1
     af4:	bf02      	ittt	eq
     af6:	4684      	moveq	ip, r0
     af8:	4601      	moveq	r1, r0
     afa:	2000      	moveq	r0, #0
     afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b00:	bf08      	it	eq
     b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b0a:	fabc f28c 	clz	r2, ip
     b0e:	3a08      	subs	r2, #8
     b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b14:	db10      	blt.n	b38 <__aeabi_l2f+0x5c>
     b16:	fa01 fc02 	lsl.w	ip, r1, r2
     b1a:	4463      	add	r3, ip
     b1c:	fa00 fc02 	lsl.w	ip, r0, r2
     b20:	f1c2 0220 	rsb	r2, r2, #32
     b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b28:	fa20 f202 	lsr.w	r2, r0, r2
     b2c:	eb43 0002 	adc.w	r0, r3, r2
     b30:	bf08      	it	eq
     b32:	f020 0001 	biceq.w	r0, r0, #1
     b36:	4770      	bx	lr
     b38:	f102 0220 	add.w	r2, r2, #32
     b3c:	fa01 fc02 	lsl.w	ip, r1, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b48:	fa21 f202 	lsr.w	r2, r1, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b56:	4770      	bx	lr

00000b58 <__aeabi_f2uiz>:
     b58:	0042      	lsls	r2, r0, #1
     b5a:	d20e      	bcs.n	b7a <__aeabi_f2uiz+0x22>
     b5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     b60:	d30b      	bcc.n	b7a <__aeabi_f2uiz+0x22>
     b62:	f04f 039e 	mov.w	r3, #158	; 0x9e
     b66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     b6a:	d409      	bmi.n	b80 <__aeabi_f2uiz+0x28>
     b6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b74:	fa23 f002 	lsr.w	r0, r3, r2
     b78:	4770      	bx	lr
     b7a:	f04f 0000 	mov.w	r0, #0
     b7e:	4770      	bx	lr
     b80:	f112 0f61 	cmn.w	r2, #97	; 0x61
     b84:	d101      	bne.n	b8a <__aeabi_f2uiz+0x32>
     b86:	0242      	lsls	r2, r0, #9
     b88:	d102      	bne.n	b90 <__aeabi_f2uiz+0x38>
     b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b8e:	4770      	bx	lr
     b90:	f04f 0000 	mov.w	r0, #0
     b94:	4770      	bx	lr
     b96:	bf00      	nop

00000b98 <__aeabi_uldivmod>:
     b98:	b953      	cbnz	r3, bb0 <__aeabi_uldivmod+0x18>
     b9a:	b94a      	cbnz	r2, bb0 <__aeabi_uldivmod+0x18>
     b9c:	2900      	cmp	r1, #0
     b9e:	bf08      	it	eq
     ba0:	2800      	cmpeq	r0, #0
     ba2:	bf1c      	itt	ne
     ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     bac:	f000 b80c 	b.w	bc8 <__aeabi_idiv0>
     bb0:	f1ad 0c08 	sub.w	ip, sp, #8
     bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     bb8:	f000 f890 	bl	cdc <__udivmoddi4>
     bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
     bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bc4:	b004      	add	sp, #16
     bc6:	4770      	bx	lr

00000bc8 <__aeabi_idiv0>:
     bc8:	4770      	bx	lr
     bca:	bf00      	nop

00000bcc <__gedf2>:
     bcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     bd0:	e006      	b.n	be0 <__cmpdf2+0x4>
     bd2:	bf00      	nop

00000bd4 <__ledf2>:
     bd4:	f04f 0c01 	mov.w	ip, #1
     bd8:	e002      	b.n	be0 <__cmpdf2+0x4>
     bda:	bf00      	nop

00000bdc <__cmpdf2>:
     bdc:	f04f 0c01 	mov.w	ip, #1
     be0:	f84d cd04 	str.w	ip, [sp, #-4]!
     be4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     be8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     bf0:	bf18      	it	ne
     bf2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     bf6:	d01b      	beq.n	c30 <__cmpdf2+0x54>
     bf8:	b001      	add	sp, #4
     bfa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     bfe:	bf0c      	ite	eq
     c00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     c04:	ea91 0f03 	teqne	r1, r3
     c08:	bf02      	ittt	eq
     c0a:	ea90 0f02 	teqeq	r0, r2
     c0e:	2000      	moveq	r0, #0
     c10:	4770      	bxeq	lr
     c12:	f110 0f00 	cmn.w	r0, #0
     c16:	ea91 0f03 	teq	r1, r3
     c1a:	bf58      	it	pl
     c1c:	4299      	cmppl	r1, r3
     c1e:	bf08      	it	eq
     c20:	4290      	cmpeq	r0, r2
     c22:	bf2c      	ite	cs
     c24:	17d8      	asrcs	r0, r3, #31
     c26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     c2a:	f040 0001 	orr.w	r0, r0, #1
     c2e:	4770      	bx	lr
     c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c38:	d102      	bne.n	c40 <__cmpdf2+0x64>
     c3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     c3e:	d107      	bne.n	c50 <__cmpdf2+0x74>
     c40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c48:	d1d6      	bne.n	bf8 <__cmpdf2+0x1c>
     c4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     c4e:	d0d3      	beq.n	bf8 <__cmpdf2+0x1c>
     c50:	f85d 0b04 	ldr.w	r0, [sp], #4
     c54:	4770      	bx	lr
     c56:	bf00      	nop

00000c58 <__aeabi_cdrcmple>:
     c58:	4684      	mov	ip, r0
     c5a:	4610      	mov	r0, r2
     c5c:	4662      	mov	r2, ip
     c5e:	468c      	mov	ip, r1
     c60:	4619      	mov	r1, r3
     c62:	4663      	mov	r3, ip
     c64:	e000      	b.n	c68 <__aeabi_cdcmpeq>
     c66:	bf00      	nop

00000c68 <__aeabi_cdcmpeq>:
     c68:	b501      	push	{r0, lr}
     c6a:	f7ff ffb7 	bl	bdc <__cmpdf2>
     c6e:	2800      	cmp	r0, #0
     c70:	bf48      	it	mi
     c72:	f110 0f00 	cmnmi.w	r0, #0
     c76:	bd01      	pop	{r0, pc}

00000c78 <__aeabi_dcmpeq>:
     c78:	f84d ed08 	str.w	lr, [sp, #-8]!
     c7c:	f7ff fff4 	bl	c68 <__aeabi_cdcmpeq>
     c80:	bf0c      	ite	eq
     c82:	2001      	moveq	r0, #1
     c84:	2000      	movne	r0, #0
     c86:	f85d fb08 	ldr.w	pc, [sp], #8
     c8a:	bf00      	nop

00000c8c <__aeabi_dcmplt>:
     c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
     c90:	f7ff ffea 	bl	c68 <__aeabi_cdcmpeq>
     c94:	bf34      	ite	cc
     c96:	2001      	movcc	r0, #1
     c98:	2000      	movcs	r0, #0
     c9a:	f85d fb08 	ldr.w	pc, [sp], #8
     c9e:	bf00      	nop

00000ca0 <__aeabi_dcmple>:
     ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ca4:	f7ff ffe0 	bl	c68 <__aeabi_cdcmpeq>
     ca8:	bf94      	ite	ls
     caa:	2001      	movls	r0, #1
     cac:	2000      	movhi	r0, #0
     cae:	f85d fb08 	ldr.w	pc, [sp], #8
     cb2:	bf00      	nop

00000cb4 <__aeabi_dcmpge>:
     cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
     cb8:	f7ff ffce 	bl	c58 <__aeabi_cdrcmple>
     cbc:	bf94      	ite	ls
     cbe:	2001      	movls	r0, #1
     cc0:	2000      	movhi	r0, #0
     cc2:	f85d fb08 	ldr.w	pc, [sp], #8
     cc6:	bf00      	nop

00000cc8 <__aeabi_dcmpgt>:
     cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
     ccc:	f7ff ffc4 	bl	c58 <__aeabi_cdrcmple>
     cd0:	bf34      	ite	cc
     cd2:	2001      	movcc	r0, #1
     cd4:	2000      	movcs	r0, #0
     cd6:	f85d fb08 	ldr.w	pc, [sp], #8
     cda:	bf00      	nop

00000cdc <__udivmoddi4>:
     cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ce0:	4686      	mov	lr, r0
     ce2:	468c      	mov	ip, r1
     ce4:	4608      	mov	r0, r1
     ce6:	9e08      	ldr	r6, [sp, #32]
     ce8:	4615      	mov	r5, r2
     cea:	4674      	mov	r4, lr
     cec:	4619      	mov	r1, r3
     cee:	2b00      	cmp	r3, #0
     cf0:	f040 80c2 	bne.w	e78 <__udivmoddi4+0x19c>
     cf4:	4285      	cmp	r5, r0
     cf6:	fab2 f282 	clz	r2, r2
     cfa:	d945      	bls.n	d88 <__udivmoddi4+0xac>
     cfc:	b14a      	cbz	r2, d12 <__udivmoddi4+0x36>
     cfe:	f1c2 0320 	rsb	r3, r2, #32
     d02:	fa00 fc02 	lsl.w	ip, r0, r2
     d06:	fa2e f303 	lsr.w	r3, lr, r3
     d0a:	4095      	lsls	r5, r2
     d0c:	ea43 0c0c 	orr.w	ip, r3, ip
     d10:	4094      	lsls	r4, r2
     d12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     d16:	b2a8      	uxth	r0, r5
     d18:	fbbc f8fe 	udiv	r8, ip, lr
     d1c:	0c23      	lsrs	r3, r4, #16
     d1e:	fb0e cc18 	mls	ip, lr, r8, ip
     d22:	fb08 f900 	mul.w	r9, r8, r0
     d26:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     d2a:	4599      	cmp	r9, r3
     d2c:	d928      	bls.n	d80 <__udivmoddi4+0xa4>
     d2e:	18eb      	adds	r3, r5, r3
     d30:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     d34:	d204      	bcs.n	d40 <__udivmoddi4+0x64>
     d36:	4599      	cmp	r9, r3
     d38:	d902      	bls.n	d40 <__udivmoddi4+0x64>
     d3a:	f1a8 0702 	sub.w	r7, r8, #2
     d3e:	442b      	add	r3, r5
     d40:	eba3 0309 	sub.w	r3, r3, r9
     d44:	b2a4      	uxth	r4, r4
     d46:	fbb3 fcfe 	udiv	ip, r3, lr
     d4a:	fb0e 331c 	mls	r3, lr, ip, r3
     d4e:	fb0c f000 	mul.w	r0, ip, r0
     d52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     d56:	42a0      	cmp	r0, r4
     d58:	d914      	bls.n	d84 <__udivmoddi4+0xa8>
     d5a:	192c      	adds	r4, r5, r4
     d5c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     d60:	d204      	bcs.n	d6c <__udivmoddi4+0x90>
     d62:	42a0      	cmp	r0, r4
     d64:	d902      	bls.n	d6c <__udivmoddi4+0x90>
     d66:	f1ac 0302 	sub.w	r3, ip, #2
     d6a:	442c      	add	r4, r5
     d6c:	1a24      	subs	r4, r4, r0
     d6e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     d72:	b11e      	cbz	r6, d7c <__udivmoddi4+0xa0>
     d74:	40d4      	lsrs	r4, r2
     d76:	2300      	movs	r3, #0
     d78:	6034      	str	r4, [r6, #0]
     d7a:	6073      	str	r3, [r6, #4]
     d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d80:	4647      	mov	r7, r8
     d82:	e7dd      	b.n	d40 <__udivmoddi4+0x64>
     d84:	4663      	mov	r3, ip
     d86:	e7f1      	b.n	d6c <__udivmoddi4+0x90>
     d88:	bb92      	cbnz	r2, df0 <__udivmoddi4+0x114>
     d8a:	1b43      	subs	r3, r0, r5
     d8c:	2101      	movs	r1, #1
     d8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     d92:	b2af      	uxth	r7, r5
     d94:	fbb3 fcfe 	udiv	ip, r3, lr
     d98:	0c20      	lsrs	r0, r4, #16
     d9a:	fb0e 331c 	mls	r3, lr, ip, r3
     d9e:	fb0c f807 	mul.w	r8, ip, r7
     da2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     da6:	4598      	cmp	r8, r3
     da8:	d962      	bls.n	e70 <__udivmoddi4+0x194>
     daa:	18eb      	adds	r3, r5, r3
     dac:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     db0:	d204      	bcs.n	dbc <__udivmoddi4+0xe0>
     db2:	4598      	cmp	r8, r3
     db4:	d902      	bls.n	dbc <__udivmoddi4+0xe0>
     db6:	f1ac 0002 	sub.w	r0, ip, #2
     dba:	442b      	add	r3, r5
     dbc:	eba3 0308 	sub.w	r3, r3, r8
     dc0:	b2a4      	uxth	r4, r4
     dc2:	fbb3 fcfe 	udiv	ip, r3, lr
     dc6:	fb0e 331c 	mls	r3, lr, ip, r3
     dca:	fb0c f707 	mul.w	r7, ip, r7
     dce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     dd2:	42a7      	cmp	r7, r4
     dd4:	d94e      	bls.n	e74 <__udivmoddi4+0x198>
     dd6:	192c      	adds	r4, r5, r4
     dd8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ddc:	d204      	bcs.n	de8 <__udivmoddi4+0x10c>
     dde:	42a7      	cmp	r7, r4
     de0:	d902      	bls.n	de8 <__udivmoddi4+0x10c>
     de2:	f1ac 0302 	sub.w	r3, ip, #2
     de6:	442c      	add	r4, r5
     de8:	1be4      	subs	r4, r4, r7
     dea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dee:	e7c0      	b.n	d72 <__udivmoddi4+0x96>
     df0:	f1c2 0320 	rsb	r3, r2, #32
     df4:	fa20 f103 	lsr.w	r1, r0, r3
     df8:	4095      	lsls	r5, r2
     dfa:	4090      	lsls	r0, r2
     dfc:	fa2e f303 	lsr.w	r3, lr, r3
     e00:	4303      	orrs	r3, r0
     e02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e06:	b2af      	uxth	r7, r5
     e08:	fbb1 fcfe 	udiv	ip, r1, lr
     e0c:	fb0e 101c 	mls	r0, lr, ip, r1
     e10:	0c19      	lsrs	r1, r3, #16
     e12:	fb0c f807 	mul.w	r8, ip, r7
     e16:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     e1a:	4588      	cmp	r8, r1
     e1c:	fa04 f402 	lsl.w	r4, r4, r2
     e20:	d922      	bls.n	e68 <__udivmoddi4+0x18c>
     e22:	1869      	adds	r1, r5, r1
     e24:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     e28:	d204      	bcs.n	e34 <__udivmoddi4+0x158>
     e2a:	4588      	cmp	r8, r1
     e2c:	d902      	bls.n	e34 <__udivmoddi4+0x158>
     e2e:	f1ac 0002 	sub.w	r0, ip, #2
     e32:	4429      	add	r1, r5
     e34:	eba1 0108 	sub.w	r1, r1, r8
     e38:	b29b      	uxth	r3, r3
     e3a:	fbb1 fcfe 	udiv	ip, r1, lr
     e3e:	fb0e 111c 	mls	r1, lr, ip, r1
     e42:	fb0c f707 	mul.w	r7, ip, r7
     e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     e4a:	429f      	cmp	r7, r3
     e4c:	d90e      	bls.n	e6c <__udivmoddi4+0x190>
     e4e:	18eb      	adds	r3, r5, r3
     e50:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     e54:	d204      	bcs.n	e60 <__udivmoddi4+0x184>
     e56:	429f      	cmp	r7, r3
     e58:	d902      	bls.n	e60 <__udivmoddi4+0x184>
     e5a:	f1ac 0102 	sub.w	r1, ip, #2
     e5e:	442b      	add	r3, r5
     e60:	1bdb      	subs	r3, r3, r7
     e62:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     e66:	e792      	b.n	d8e <__udivmoddi4+0xb2>
     e68:	4660      	mov	r0, ip
     e6a:	e7e3      	b.n	e34 <__udivmoddi4+0x158>
     e6c:	4661      	mov	r1, ip
     e6e:	e7f7      	b.n	e60 <__udivmoddi4+0x184>
     e70:	4660      	mov	r0, ip
     e72:	e7a3      	b.n	dbc <__udivmoddi4+0xe0>
     e74:	4663      	mov	r3, ip
     e76:	e7b7      	b.n	de8 <__udivmoddi4+0x10c>
     e78:	4283      	cmp	r3, r0
     e7a:	d906      	bls.n	e8a <__udivmoddi4+0x1ae>
     e7c:	b916      	cbnz	r6, e84 <__udivmoddi4+0x1a8>
     e7e:	2100      	movs	r1, #0
     e80:	4608      	mov	r0, r1
     e82:	e77b      	b.n	d7c <__udivmoddi4+0xa0>
     e84:	e9c6 e000 	strd	lr, r0, [r6]
     e88:	e7f9      	b.n	e7e <__udivmoddi4+0x1a2>
     e8a:	fab3 f783 	clz	r7, r3
     e8e:	b98f      	cbnz	r7, eb4 <__udivmoddi4+0x1d8>
     e90:	4283      	cmp	r3, r0
     e92:	d301      	bcc.n	e98 <__udivmoddi4+0x1bc>
     e94:	4572      	cmp	r2, lr
     e96:	d808      	bhi.n	eaa <__udivmoddi4+0x1ce>
     e98:	ebbe 0402 	subs.w	r4, lr, r2
     e9c:	eb60 0303 	sbc.w	r3, r0, r3
     ea0:	2001      	movs	r0, #1
     ea2:	469c      	mov	ip, r3
     ea4:	b91e      	cbnz	r6, eae <__udivmoddi4+0x1d2>
     ea6:	2100      	movs	r1, #0
     ea8:	e768      	b.n	d7c <__udivmoddi4+0xa0>
     eaa:	4638      	mov	r0, r7
     eac:	e7fa      	b.n	ea4 <__udivmoddi4+0x1c8>
     eae:	e9c6 4c00 	strd	r4, ip, [r6]
     eb2:	e7f8      	b.n	ea6 <__udivmoddi4+0x1ca>
     eb4:	f1c7 0c20 	rsb	ip, r7, #32
     eb8:	40bb      	lsls	r3, r7
     eba:	fa22 f40c 	lsr.w	r4, r2, ip
     ebe:	431c      	orrs	r4, r3
     ec0:	fa2e f10c 	lsr.w	r1, lr, ip
     ec4:	fa20 f30c 	lsr.w	r3, r0, ip
     ec8:	40b8      	lsls	r0, r7
     eca:	4301      	orrs	r1, r0
     ecc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     ed0:	fa0e f507 	lsl.w	r5, lr, r7
     ed4:	fbb3 f8f9 	udiv	r8, r3, r9
     ed8:	fa1f fe84 	uxth.w	lr, r4
     edc:	fb09 3018 	mls	r0, r9, r8, r3
     ee0:	0c0b      	lsrs	r3, r1, #16
     ee2:	fb08 fa0e 	mul.w	sl, r8, lr
     ee6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     eea:	459a      	cmp	sl, r3
     eec:	fa02 f207 	lsl.w	r2, r2, r7
     ef0:	d940      	bls.n	f74 <__udivmoddi4+0x298>
     ef2:	18e3      	adds	r3, r4, r3
     ef4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ef8:	d204      	bcs.n	f04 <__udivmoddi4+0x228>
     efa:	459a      	cmp	sl, r3
     efc:	d902      	bls.n	f04 <__udivmoddi4+0x228>
     efe:	f1a8 0002 	sub.w	r0, r8, #2
     f02:	4423      	add	r3, r4
     f04:	eba3 030a 	sub.w	r3, r3, sl
     f08:	b289      	uxth	r1, r1
     f0a:	fbb3 f8f9 	udiv	r8, r3, r9
     f0e:	fb09 3318 	mls	r3, r9, r8, r3
     f12:	fb08 fe0e 	mul.w	lr, r8, lr
     f16:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     f1a:	458e      	cmp	lr, r1
     f1c:	d92c      	bls.n	f78 <__udivmoddi4+0x29c>
     f1e:	1861      	adds	r1, r4, r1
     f20:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     f24:	d204      	bcs.n	f30 <__udivmoddi4+0x254>
     f26:	458e      	cmp	lr, r1
     f28:	d902      	bls.n	f30 <__udivmoddi4+0x254>
     f2a:	f1a8 0302 	sub.w	r3, r8, #2
     f2e:	4421      	add	r1, r4
     f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     f34:	fba0 9802 	umull	r9, r8, r0, r2
     f38:	eba1 010e 	sub.w	r1, r1, lr
     f3c:	4541      	cmp	r1, r8
     f3e:	46ce      	mov	lr, r9
     f40:	4643      	mov	r3, r8
     f42:	d302      	bcc.n	f4a <__udivmoddi4+0x26e>
     f44:	d106      	bne.n	f54 <__udivmoddi4+0x278>
     f46:	454d      	cmp	r5, r9
     f48:	d204      	bcs.n	f54 <__udivmoddi4+0x278>
     f4a:	ebb9 0e02 	subs.w	lr, r9, r2
     f4e:	eb68 0304 	sbc.w	r3, r8, r4
     f52:	3801      	subs	r0, #1
     f54:	2e00      	cmp	r6, #0
     f56:	d0a6      	beq.n	ea6 <__udivmoddi4+0x1ca>
     f58:	ebb5 020e 	subs.w	r2, r5, lr
     f5c:	eb61 0103 	sbc.w	r1, r1, r3
     f60:	fa01 fc0c 	lsl.w	ip, r1, ip
     f64:	fa22 f307 	lsr.w	r3, r2, r7
     f68:	ea4c 0303 	orr.w	r3, ip, r3
     f6c:	40f9      	lsrs	r1, r7
     f6e:	e9c6 3100 	strd	r3, r1, [r6]
     f72:	e798      	b.n	ea6 <__udivmoddi4+0x1ca>
     f74:	4640      	mov	r0, r8
     f76:	e7c5      	b.n	f04 <__udivmoddi4+0x228>
     f78:	4643      	mov	r3, r8
     f7a:	e7d9      	b.n	f30 <__udivmoddi4+0x254>

00000f7c <strcmp>:
     f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
     f80:	f811 3b01 	ldrb.w	r3, [r1], #1
     f84:	2a01      	cmp	r2, #1
     f86:	bf28      	it	cs
     f88:	429a      	cmpcs	r2, r3
     f8a:	d0f7      	beq.n	f7c <strcmp>
     f8c:	1ad0      	subs	r0, r2, r3
     f8e:	4770      	bx	lr

00000f90 <strlen>:
     f90:	4603      	mov	r3, r0
     f92:	f813 2b01 	ldrb.w	r2, [r3], #1
     f96:	2a00      	cmp	r2, #0
     f98:	d1fb      	bne.n	f92 <strlen+0x2>
     f9a:	1a18      	subs	r0, r3, r0
     f9c:	3801      	subs	r0, #1
     f9e:	4770      	bx	lr

00000fa0 <guideLineSearch>:
#include "img_algo.h"

/* Function that detects he position and agle of the guideline */
/* Worst case scenario: The guidelines in GN/GF are on the last index of each row*/
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
     fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fa2:	2400      	movs	r4, #0
     fa4:	460d      	mov	r5, r1
     fa6:	4617      	mov	r7, r2
     fa8:	4626      	mov	r6, r4
     faa:	4623      	mov	r3, r4
    uint16_t y_gn = 0;
    uint16_t y_gf = GN - 1;
    /* Iterate through GN and GF to discover the position of the guidelines */
    for(uint16_t i = GF; i <= GN; i += GN - 1){
        for(uint16_t j = 0; j < IMGWIDTH; j++){
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
     fac:	5cc2      	ldrb	r2, [r0, r3]
     fae:	2aff      	cmp	r2, #255	; 0xff
     fb0:	d01e      	beq.n	ff0 <guideLineSearch+0x50>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     fb2:	3301      	adds	r3, #1
     fb4:	2b80      	cmp	r3, #128	; 0x80
     fb6:	d1f9      	bne.n	fac <guideLineSearch+0xc>
     fb8:	f500 537d 	add.w	r3, r0, #16192	; 0x3f40
     fbc:	333f      	adds	r3, #63	; 0x3f
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH], uint16_t* pos, float* angle) {
     fbe:	2100      	movs	r1, #0
            if(imageBuf[i * IMGWIDTH + j] == GUIDELINE_COLOR){
     fc0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     fc4:	2aff      	cmp	r2, #255	; 0xff
     fc6:	d015      	beq.n	ff4 <guideLineSearch+0x54>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     fc8:	3101      	adds	r1, #1
     fca:	2980      	cmp	r1, #128	; 0x80
     fcc:	d1f8      	bne.n	fc0 <guideLineSearch+0x20>
        }
    }
    /* When the guideline is vertical the angle is 0 rad, positive angles are associated with a tilt to the right 
    and negative angles to a tilt to the left 
    Calculation of angle between the two points in radians */
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     fce:	1ba0      	subs	r0, r4, r6
     fd0:	f7ff f9e8 	bl	3a4 <__aeabi_i2d>
     fd4:	a308      	add	r3, pc, #32	; (adr r3, ff8 <guideLineSearch+0x58>)
     fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
     fda:	f009 ff64 	bl	aea6 <atan2>
     fde:	f7ff fc5d 	bl	89c <__aeabi_d2f>
    /* Computing of the position */
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     fe2:	2364      	movs	r3, #100	; 0x64
     fe4:	fb06 3303 	mla	r3, r6, r3, r3
     fe8:	11db      	asrs	r3, r3, #7
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     fea:	6038      	str	r0, [r7, #0]
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     fec:	802b      	strh	r3, [r5, #0]
}
     fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ff0:	b29c      	uxth	r4, r3
     ff2:	e7e1      	b.n	fb8 <guideLineSearch+0x18>
     ff4:	b28e      	uxth	r6, r1
     ff6:	e7ea      	b.n	fce <guideLineSearch+0x2e>
     ff8:	00000000 	.word	0x00000000
     ffc:	405fc000 	.word	0x405fc000

00001000 <__ieee754_atan2>:
    1000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1004:	4617      	mov	r7, r2
    1006:	4690      	mov	r8, r2
    1008:	4699      	mov	r9, r3
    100a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    100e:	427b      	negs	r3, r7
    1010:	f8df a184 	ldr.w	sl, [pc, #388]	; 1198 <__ieee754_atan2+0x198>
    1014:	433b      	orrs	r3, r7
    1016:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
    101a:	4553      	cmp	r3, sl
    101c:	4604      	mov	r4, r0
    101e:	460d      	mov	r5, r1
    1020:	d809      	bhi.n	1036 <__ieee754_atan2+0x36>
    1022:	4246      	negs	r6, r0
    1024:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    1028:	4306      	orrs	r6, r0
    102a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
    102e:	4556      	cmp	r6, sl
    1030:	468e      	mov	lr, r1
    1032:	4683      	mov	fp, r0
    1034:	d908      	bls.n	1048 <__ieee754_atan2+0x48>
    1036:	4642      	mov	r2, r8
    1038:	464b      	mov	r3, r9
    103a:	4620      	mov	r0, r4
    103c:	4629      	mov	r1, r5
    103e:	f7ff f865 	bl	10c <__adddf3>
    1042:	4604      	mov	r4, r0
    1044:	460d      	mov	r5, r1
    1046:	e016      	b.n	1076 <__ieee754_atan2+0x76>
    1048:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
    104c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
    1050:	433e      	orrs	r6, r7
    1052:	d103      	bne.n	105c <__ieee754_atan2+0x5c>
    1054:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1058:	f000 b8a6 	b.w	11a8 <atan>
    105c:	ea4f 76a9 	mov.w	r6, r9, asr #30
    1060:	f006 0602 	and.w	r6, r6, #2
    1064:	ea53 0b0b 	orrs.w	fp, r3, fp
    1068:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
    106c:	d107      	bne.n	107e <__ieee754_atan2+0x7e>
    106e:	2e02      	cmp	r6, #2
    1070:	d064      	beq.n	113c <__ieee754_atan2+0x13c>
    1072:	2e03      	cmp	r6, #3
    1074:	d066      	beq.n	1144 <__ieee754_atan2+0x144>
    1076:	4620      	mov	r0, r4
    1078:	4629      	mov	r1, r5
    107a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    107e:	4317      	orrs	r7, r2
    1080:	d106      	bne.n	1090 <__ieee754_atan2+0x90>
    1082:	f1be 0f00 	cmp.w	lr, #0
    1086:	da68      	bge.n	115a <__ieee754_atan2+0x15a>
    1088:	a537      	add	r5, pc, #220	; (adr r5, 1168 <__ieee754_atan2+0x168>)
    108a:	e9d5 4500 	ldrd	r4, r5, [r5]
    108e:	e7f2      	b.n	1076 <__ieee754_atan2+0x76>
    1090:	4552      	cmp	r2, sl
    1092:	d10f      	bne.n	10b4 <__ieee754_atan2+0xb4>
    1094:	4293      	cmp	r3, r2
    1096:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    109a:	d107      	bne.n	10ac <__ieee754_atan2+0xac>
    109c:	2e02      	cmp	r6, #2
    109e:	d855      	bhi.n	114c <__ieee754_atan2+0x14c>
    10a0:	4b3e      	ldr	r3, [pc, #248]	; (119c <__ieee754_atan2+0x19c>)
    10a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    10a6:	e9d3 4500 	ldrd	r4, r5, [r3]
    10aa:	e7e4      	b.n	1076 <__ieee754_atan2+0x76>
    10ac:	2e02      	cmp	r6, #2
    10ae:	d851      	bhi.n	1154 <__ieee754_atan2+0x154>
    10b0:	4b3b      	ldr	r3, [pc, #236]	; (11a0 <__ieee754_atan2+0x1a0>)
    10b2:	e7f6      	b.n	10a2 <__ieee754_atan2+0xa2>
    10b4:	4553      	cmp	r3, sl
    10b6:	d0e4      	beq.n	1082 <__ieee754_atan2+0x82>
    10b8:	1a9b      	subs	r3, r3, r2
    10ba:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
    10be:	ea4f 5223 	mov.w	r2, r3, asr #20
    10c2:	da21      	bge.n	1108 <__ieee754_atan2+0x108>
    10c4:	f1b9 0f00 	cmp.w	r9, #0
    10c8:	da01      	bge.n	10ce <__ieee754_atan2+0xce>
    10ca:	323c      	adds	r2, #60	; 0x3c
    10cc:	db20      	blt.n	1110 <__ieee754_atan2+0x110>
    10ce:	4642      	mov	r2, r8
    10d0:	464b      	mov	r3, r9
    10d2:	4620      	mov	r0, r4
    10d4:	4629      	mov	r1, r5
    10d6:	f7ff faf9 	bl	6cc <__aeabi_ddiv>
    10da:	f009 fee6 	bl	aeaa <fabs>
    10de:	f000 f863 	bl	11a8 <atan>
    10e2:	4604      	mov	r4, r0
    10e4:	460d      	mov	r5, r1
    10e6:	2e01      	cmp	r6, #1
    10e8:	d015      	beq.n	1116 <__ieee754_atan2+0x116>
    10ea:	2e02      	cmp	r6, #2
    10ec:	d017      	beq.n	111e <__ieee754_atan2+0x11e>
    10ee:	2e00      	cmp	r6, #0
    10f0:	d0c1      	beq.n	1076 <__ieee754_atan2+0x76>
    10f2:	a31f      	add	r3, pc, #124	; (adr r3, 1170 <__ieee754_atan2+0x170>)
    10f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    10f8:	4620      	mov	r0, r4
    10fa:	4629      	mov	r1, r5
    10fc:	f7ff f804 	bl	108 <__aeabi_dsub>
    1100:	a31d      	add	r3, pc, #116	; (adr r3, 1178 <__ieee754_atan2+0x178>)
    1102:	e9d3 2300 	ldrd	r2, r3, [r3]
    1106:	e016      	b.n	1136 <__ieee754_atan2+0x136>
    1108:	a51d      	add	r5, pc, #116	; (adr r5, 1180 <__ieee754_atan2+0x180>)
    110a:	e9d5 4500 	ldrd	r4, r5, [r5]
    110e:	e7ea      	b.n	10e6 <__ieee754_atan2+0xe6>
    1110:	2400      	movs	r4, #0
    1112:	2500      	movs	r5, #0
    1114:	e7e7      	b.n	10e6 <__ieee754_atan2+0xe6>
    1116:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    111a:	461d      	mov	r5, r3
    111c:	e7ab      	b.n	1076 <__ieee754_atan2+0x76>
    111e:	a314      	add	r3, pc, #80	; (adr r3, 1170 <__ieee754_atan2+0x170>)
    1120:	e9d3 2300 	ldrd	r2, r3, [r3]
    1124:	4620      	mov	r0, r4
    1126:	4629      	mov	r1, r5
    1128:	f7fe ffee 	bl	108 <__aeabi_dsub>
    112c:	4602      	mov	r2, r0
    112e:	460b      	mov	r3, r1
    1130:	a111      	add	r1, pc, #68	; (adr r1, 1178 <__ieee754_atan2+0x178>)
    1132:	e9d1 0100 	ldrd	r0, r1, [r1]
    1136:	f7fe ffe7 	bl	108 <__aeabi_dsub>
    113a:	e782      	b.n	1042 <__ieee754_atan2+0x42>
    113c:	a50e      	add	r5, pc, #56	; (adr r5, 1178 <__ieee754_atan2+0x178>)
    113e:	e9d5 4500 	ldrd	r4, r5, [r5]
    1142:	e798      	b.n	1076 <__ieee754_atan2+0x76>
    1144:	a510      	add	r5, pc, #64	; (adr r5, 1188 <__ieee754_atan2+0x188>)
    1146:	e9d5 4500 	ldrd	r4, r5, [r5]
    114a:	e794      	b.n	1076 <__ieee754_atan2+0x76>
    114c:	a510      	add	r5, pc, #64	; (adr r5, 1190 <__ieee754_atan2+0x190>)
    114e:	e9d5 4500 	ldrd	r4, r5, [r5]
    1152:	e790      	b.n	1076 <__ieee754_atan2+0x76>
    1154:	2400      	movs	r4, #0
    1156:	2500      	movs	r5, #0
    1158:	e78d      	b.n	1076 <__ieee754_atan2+0x76>
    115a:	a509      	add	r5, pc, #36	; (adr r5, 1180 <__ieee754_atan2+0x180>)
    115c:	e9d5 4500 	ldrd	r4, r5, [r5]
    1160:	e789      	b.n	1076 <__ieee754_atan2+0x76>
    1162:	bf00      	nop
    1164:	f3af 8000 	nop.w
    1168:	54442d18 	.word	0x54442d18
    116c:	bff921fb 	.word	0xbff921fb
    1170:	33145c07 	.word	0x33145c07
    1174:	3ca1a626 	.word	0x3ca1a626
    1178:	54442d18 	.word	0x54442d18
    117c:	400921fb 	.word	0x400921fb
    1180:	54442d18 	.word	0x54442d18
    1184:	3ff921fb 	.word	0x3ff921fb
    1188:	54442d18 	.word	0x54442d18
    118c:	c00921fb 	.word	0xc00921fb
    1190:	54442d18 	.word	0x54442d18
    1194:	3fe921fb 	.word	0x3fe921fb
    1198:	7ff00000 	.word	0x7ff00000
    119c:	0000b250 	.word	0x0000b250
    11a0:	0000b238 	.word	0x0000b238
    11a4:	00000000 	.word	0x00000000

000011a8 <atan>:
    11a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11ac:	4bbc      	ldr	r3, [pc, #752]	; (14a0 <atan+0x2f8>)
    11ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    11b2:	429e      	cmp	r6, r3
    11b4:	4604      	mov	r4, r0
    11b6:	460d      	mov	r5, r1
    11b8:	468b      	mov	fp, r1
    11ba:	d918      	bls.n	11ee <atan+0x46>
    11bc:	4bb9      	ldr	r3, [pc, #740]	; (14a4 <atan+0x2fc>)
    11be:	429e      	cmp	r6, r3
    11c0:	d801      	bhi.n	11c6 <atan+0x1e>
    11c2:	d109      	bne.n	11d8 <atan+0x30>
    11c4:	b140      	cbz	r0, 11d8 <atan+0x30>
    11c6:	4622      	mov	r2, r4
    11c8:	462b      	mov	r3, r5
    11ca:	4620      	mov	r0, r4
    11cc:	4629      	mov	r1, r5
    11ce:	f7fe ff9d 	bl	10c <__adddf3>
    11d2:	4604      	mov	r4, r0
    11d4:	460d      	mov	r5, r1
    11d6:	e006      	b.n	11e6 <atan+0x3e>
    11d8:	f1bb 0f00 	cmp.w	fp, #0
    11dc:	f340 8123 	ble.w	1426 <atan+0x27e>
    11e0:	a593      	add	r5, pc, #588	; (adr r5, 1430 <atan+0x288>)
    11e2:	e9d5 4500 	ldrd	r4, r5, [r5]
    11e6:	4620      	mov	r0, r4
    11e8:	4629      	mov	r1, r5
    11ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11ee:	4bae      	ldr	r3, [pc, #696]	; (14a8 <atan+0x300>)
    11f0:	429e      	cmp	r6, r3
    11f2:	d811      	bhi.n	1218 <atan+0x70>
    11f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    11f8:	429e      	cmp	r6, r3
    11fa:	d80a      	bhi.n	1212 <atan+0x6a>
    11fc:	a38e      	add	r3, pc, #568	; (adr r3, 1438 <atan+0x290>)
    11fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    1202:	f7fe ff83 	bl	10c <__adddf3>
    1206:	4ba9      	ldr	r3, [pc, #676]	; (14ac <atan+0x304>)
    1208:	2200      	movs	r2, #0
    120a:	f7ff fd5d 	bl	cc8 <__aeabi_dcmpgt>
    120e:	2800      	cmp	r0, #0
    1210:	d1e9      	bne.n	11e6 <atan+0x3e>
    1212:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1216:	e027      	b.n	1268 <atan+0xc0>
    1218:	f009 fe47 	bl	aeaa <fabs>
    121c:	4ba4      	ldr	r3, [pc, #656]	; (14b0 <atan+0x308>)
    121e:	429e      	cmp	r6, r3
    1220:	4604      	mov	r4, r0
    1222:	460d      	mov	r5, r1
    1224:	f200 80b8 	bhi.w	1398 <atan+0x1f0>
    1228:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    122c:	429e      	cmp	r6, r3
    122e:	f200 809c 	bhi.w	136a <atan+0x1c2>
    1232:	4602      	mov	r2, r0
    1234:	460b      	mov	r3, r1
    1236:	f7fe ff69 	bl	10c <__adddf3>
    123a:	4b9c      	ldr	r3, [pc, #624]	; (14ac <atan+0x304>)
    123c:	2200      	movs	r2, #0
    123e:	f7fe ff63 	bl	108 <__aeabi_dsub>
    1242:	2200      	movs	r2, #0
    1244:	4606      	mov	r6, r0
    1246:	460f      	mov	r7, r1
    1248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    124c:	4620      	mov	r0, r4
    124e:	4629      	mov	r1, r5
    1250:	f7fe ff5c 	bl	10c <__adddf3>
    1254:	4602      	mov	r2, r0
    1256:	460b      	mov	r3, r1
    1258:	4630      	mov	r0, r6
    125a:	4639      	mov	r1, r7
    125c:	f7ff fa36 	bl	6cc <__aeabi_ddiv>
    1260:	f04f 0a00 	mov.w	sl, #0
    1264:	4604      	mov	r4, r0
    1266:	460d      	mov	r5, r1
    1268:	4622      	mov	r2, r4
    126a:	462b      	mov	r3, r5
    126c:	4620      	mov	r0, r4
    126e:	4629      	mov	r1, r5
    1270:	f7ff f902 	bl	478 <__aeabi_dmul>
    1274:	4602      	mov	r2, r0
    1276:	460b      	mov	r3, r1
    1278:	4680      	mov	r8, r0
    127a:	4689      	mov	r9, r1
    127c:	f7ff f8fc 	bl	478 <__aeabi_dmul>
    1280:	a36f      	add	r3, pc, #444	; (adr r3, 1440 <atan+0x298>)
    1282:	e9d3 2300 	ldrd	r2, r3, [r3]
    1286:	4606      	mov	r6, r0
    1288:	460f      	mov	r7, r1
    128a:	f7ff f8f5 	bl	478 <__aeabi_dmul>
    128e:	a36e      	add	r3, pc, #440	; (adr r3, 1448 <atan+0x2a0>)
    1290:	e9d3 2300 	ldrd	r2, r3, [r3]
    1294:	f7fe ff3a 	bl	10c <__adddf3>
    1298:	4632      	mov	r2, r6
    129a:	463b      	mov	r3, r7
    129c:	f7ff f8ec 	bl	478 <__aeabi_dmul>
    12a0:	a36b      	add	r3, pc, #428	; (adr r3, 1450 <atan+0x2a8>)
    12a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12a6:	f7fe ff31 	bl	10c <__adddf3>
    12aa:	4632      	mov	r2, r6
    12ac:	463b      	mov	r3, r7
    12ae:	f7ff f8e3 	bl	478 <__aeabi_dmul>
    12b2:	a369      	add	r3, pc, #420	; (adr r3, 1458 <atan+0x2b0>)
    12b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    12b8:	f7fe ff28 	bl	10c <__adddf3>
    12bc:	4632      	mov	r2, r6
    12be:	463b      	mov	r3, r7
    12c0:	f7ff f8da 	bl	478 <__aeabi_dmul>
    12c4:	a366      	add	r3, pc, #408	; (adr r3, 1460 <atan+0x2b8>)
    12c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ca:	f7fe ff1f 	bl	10c <__adddf3>
    12ce:	4632      	mov	r2, r6
    12d0:	463b      	mov	r3, r7
    12d2:	f7ff f8d1 	bl	478 <__aeabi_dmul>
    12d6:	a364      	add	r3, pc, #400	; (adr r3, 1468 <atan+0x2c0>)
    12d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12dc:	f7fe ff16 	bl	10c <__adddf3>
    12e0:	4642      	mov	r2, r8
    12e2:	464b      	mov	r3, r9
    12e4:	f7ff f8c8 	bl	478 <__aeabi_dmul>
    12e8:	a361      	add	r3, pc, #388	; (adr r3, 1470 <atan+0x2c8>)
    12ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ee:	4680      	mov	r8, r0
    12f0:	4689      	mov	r9, r1
    12f2:	4630      	mov	r0, r6
    12f4:	4639      	mov	r1, r7
    12f6:	f7ff f8bf 	bl	478 <__aeabi_dmul>
    12fa:	a35f      	add	r3, pc, #380	; (adr r3, 1478 <atan+0x2d0>)
    12fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1300:	f7fe ff02 	bl	108 <__aeabi_dsub>
    1304:	4632      	mov	r2, r6
    1306:	463b      	mov	r3, r7
    1308:	f7ff f8b6 	bl	478 <__aeabi_dmul>
    130c:	a35c      	add	r3, pc, #368	; (adr r3, 1480 <atan+0x2d8>)
    130e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1312:	f7fe fef9 	bl	108 <__aeabi_dsub>
    1316:	4632      	mov	r2, r6
    1318:	463b      	mov	r3, r7
    131a:	f7ff f8ad 	bl	478 <__aeabi_dmul>
    131e:	a35a      	add	r3, pc, #360	; (adr r3, 1488 <atan+0x2e0>)
    1320:	e9d3 2300 	ldrd	r2, r3, [r3]
    1324:	f7fe fef0 	bl	108 <__aeabi_dsub>
    1328:	4632      	mov	r2, r6
    132a:	463b      	mov	r3, r7
    132c:	f7ff f8a4 	bl	478 <__aeabi_dmul>
    1330:	a357      	add	r3, pc, #348	; (adr r3, 1490 <atan+0x2e8>)
    1332:	e9d3 2300 	ldrd	r2, r3, [r3]
    1336:	f7fe fee7 	bl	108 <__aeabi_dsub>
    133a:	4632      	mov	r2, r6
    133c:	463b      	mov	r3, r7
    133e:	f7ff f89b 	bl	478 <__aeabi_dmul>
    1342:	4602      	mov	r2, r0
    1344:	460b      	mov	r3, r1
    1346:	4640      	mov	r0, r8
    1348:	4649      	mov	r1, r9
    134a:	f7fe fedf 	bl	10c <__adddf3>
    134e:	4622      	mov	r2, r4
    1350:	462b      	mov	r3, r5
    1352:	f7ff f891 	bl	478 <__aeabi_dmul>
    1356:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    135a:	4602      	mov	r2, r0
    135c:	460b      	mov	r3, r1
    135e:	d144      	bne.n	13ea <atan+0x242>
    1360:	4620      	mov	r0, r4
    1362:	4629      	mov	r1, r5
    1364:	f7fe fed0 	bl	108 <__aeabi_dsub>
    1368:	e733      	b.n	11d2 <atan+0x2a>
    136a:	4b50      	ldr	r3, [pc, #320]	; (14ac <atan+0x304>)
    136c:	2200      	movs	r2, #0
    136e:	f7fe fecb 	bl	108 <__aeabi_dsub>
    1372:	4b4e      	ldr	r3, [pc, #312]	; (14ac <atan+0x304>)
    1374:	4606      	mov	r6, r0
    1376:	460f      	mov	r7, r1
    1378:	2200      	movs	r2, #0
    137a:	4620      	mov	r0, r4
    137c:	4629      	mov	r1, r5
    137e:	f7fe fec5 	bl	10c <__adddf3>
    1382:	4602      	mov	r2, r0
    1384:	460b      	mov	r3, r1
    1386:	4630      	mov	r0, r6
    1388:	4639      	mov	r1, r7
    138a:	f7ff f99f 	bl	6cc <__aeabi_ddiv>
    138e:	f04f 0a01 	mov.w	sl, #1
    1392:	4604      	mov	r4, r0
    1394:	460d      	mov	r5, r1
    1396:	e767      	b.n	1268 <atan+0xc0>
    1398:	4b46      	ldr	r3, [pc, #280]	; (14b4 <atan+0x30c>)
    139a:	429e      	cmp	r6, r3
    139c:	d21a      	bcs.n	13d4 <atan+0x22c>
    139e:	4b46      	ldr	r3, [pc, #280]	; (14b8 <atan+0x310>)
    13a0:	2200      	movs	r2, #0
    13a2:	f7fe feb1 	bl	108 <__aeabi_dsub>
    13a6:	4b44      	ldr	r3, [pc, #272]	; (14b8 <atan+0x310>)
    13a8:	4606      	mov	r6, r0
    13aa:	460f      	mov	r7, r1
    13ac:	2200      	movs	r2, #0
    13ae:	4620      	mov	r0, r4
    13b0:	4629      	mov	r1, r5
    13b2:	f7ff f861 	bl	478 <__aeabi_dmul>
    13b6:	4b3d      	ldr	r3, [pc, #244]	; (14ac <atan+0x304>)
    13b8:	2200      	movs	r2, #0
    13ba:	f7fe fea7 	bl	10c <__adddf3>
    13be:	4602      	mov	r2, r0
    13c0:	460b      	mov	r3, r1
    13c2:	4630      	mov	r0, r6
    13c4:	4639      	mov	r1, r7
    13c6:	f7ff f981 	bl	6cc <__aeabi_ddiv>
    13ca:	f04f 0a02 	mov.w	sl, #2
    13ce:	4604      	mov	r4, r0
    13d0:	460d      	mov	r5, r1
    13d2:	e749      	b.n	1268 <atan+0xc0>
    13d4:	4602      	mov	r2, r0
    13d6:	460b      	mov	r3, r1
    13d8:	2000      	movs	r0, #0
    13da:	4938      	ldr	r1, [pc, #224]	; (14bc <atan+0x314>)
    13dc:	f7ff f976 	bl	6cc <__aeabi_ddiv>
    13e0:	f04f 0a03 	mov.w	sl, #3
    13e4:	4604      	mov	r4, r0
    13e6:	460d      	mov	r5, r1
    13e8:	e73e      	b.n	1268 <atan+0xc0>
    13ea:	4b35      	ldr	r3, [pc, #212]	; (14c0 <atan+0x318>)
    13ec:	4e35      	ldr	r6, [pc, #212]	; (14c4 <atan+0x31c>)
    13ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    13f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    13f6:	f7fe fe87 	bl	108 <__aeabi_dsub>
    13fa:	4622      	mov	r2, r4
    13fc:	462b      	mov	r3, r5
    13fe:	f7fe fe83 	bl	108 <__aeabi_dsub>
    1402:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    1406:	4602      	mov	r2, r0
    1408:	460b      	mov	r3, r1
    140a:	e9d6 0100 	ldrd	r0, r1, [r6]
    140e:	f7fe fe7b 	bl	108 <__aeabi_dsub>
    1412:	f1bb 0f00 	cmp.w	fp, #0
    1416:	4604      	mov	r4, r0
    1418:	460d      	mov	r5, r1
    141a:	f6bf aee4 	bge.w	11e6 <atan+0x3e>
    141e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    1422:	461d      	mov	r5, r3
    1424:	e6df      	b.n	11e6 <atan+0x3e>
    1426:	a51c      	add	r5, pc, #112	; (adr r5, 1498 <atan+0x2f0>)
    1428:	e9d5 4500 	ldrd	r4, r5, [r5]
    142c:	e6db      	b.n	11e6 <atan+0x3e>
    142e:	bf00      	nop
    1430:	54442d18 	.word	0x54442d18
    1434:	3ff921fb 	.word	0x3ff921fb
    1438:	8800759c 	.word	0x8800759c
    143c:	7e37e43c 	.word	0x7e37e43c
    1440:	e322da11 	.word	0xe322da11
    1444:	3f90ad3a 	.word	0x3f90ad3a
    1448:	24760deb 	.word	0x24760deb
    144c:	3fa97b4b 	.word	0x3fa97b4b
    1450:	a0d03d51 	.word	0xa0d03d51
    1454:	3fb10d66 	.word	0x3fb10d66
    1458:	c54c206e 	.word	0xc54c206e
    145c:	3fb745cd 	.word	0x3fb745cd
    1460:	920083ff 	.word	0x920083ff
    1464:	3fc24924 	.word	0x3fc24924
    1468:	5555550d 	.word	0x5555550d
    146c:	3fd55555 	.word	0x3fd55555
    1470:	2c6a6c2f 	.word	0x2c6a6c2f
    1474:	bfa2b444 	.word	0xbfa2b444
    1478:	52defd9a 	.word	0x52defd9a
    147c:	3fadde2d 	.word	0x3fadde2d
    1480:	af749a6d 	.word	0xaf749a6d
    1484:	3fb3b0f2 	.word	0x3fb3b0f2
    1488:	fe231671 	.word	0xfe231671
    148c:	3fbc71c6 	.word	0x3fbc71c6
    1490:	9998ebc4 	.word	0x9998ebc4
    1494:	3fc99999 	.word	0x3fc99999
    1498:	54442d18 	.word	0x54442d18
    149c:	bff921fb 	.word	0xbff921fb
    14a0:	440fffff 	.word	0x440fffff
    14a4:	7ff00000 	.word	0x7ff00000
    14a8:	3fdbffff 	.word	0x3fdbffff
    14ac:	3ff00000 	.word	0x3ff00000
    14b0:	3ff2ffff 	.word	0x3ff2ffff
    14b4:	40038000 	.word	0x40038000
    14b8:	3ff80000 	.word	0x3ff80000
    14bc:	bff00000 	.word	0xbff00000
    14c0:	0000b268 	.word	0x0000b268
    14c4:	0000b288 	.word	0x0000b288

000014c8 <thread_OBSC_code>:
		
	}
}
/* Non-real time task 
   After testing: WCET = N */
void thread_OBSC_code(void *argA , void *argB, void *argC){
    14c8:	b510      	push	{r4, lr}
	//uint32_t start, end;
	uint32_t wc_exec_time = 1;
	uint16_t obs;
	while(1){
		//start = k_cycle_get_32();
		obs = obstCount(rx_chars);
    14ca:	4c02      	ldr	r4, [pc, #8]	; (14d4 <thread_OBSC_code+0xc>)
    14cc:	4620      	mov	r0, r4
    14ce:	f009 fcc8 	bl	ae62 <obstCount>
	while(1){
    14d2:	e7fb      	b.n	14cc <thread_OBSC_code+0x4>
    14d4:	200010f4 	.word	0x200010f4

000014d8 <thread_OUTPUT_code>:
		printk("-----------------\nThread OAP executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
		k_sem_give(&sem_OUTPUT);
	}
}
/* Critical to the safety of the robot and should be executed at the highest possible rate. */
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    14d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* mes_NOD;

	while(1){
		k_sem_take(&sem_OUTPUT, K_FOREVER);
		start = k_cycle_get_32();
		mes_NOD = (uint8_t *)get_mes(cab_NOD);
    14dc:	f8df a090 	ldr.w	sl, [pc, #144]	; 1570 <thread_OUTPUT_code+0x98>
		mes_OAP = (float *)get_mes(cab_OAP);
    14e0:	f8df b090 	ldr.w	fp, [pc, #144]	; 1574 <thread_OUTPUT_code+0x9c>
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    14e4:	b085      	sub	sp, #20
	uint32_t wc_exec_time = 1;
    14e6:	2401      	movs	r4, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    14e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    14ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    14f0:	4821      	ldr	r0, [pc, #132]	; (1578 <thread_OUTPUT_code+0xa0>)
    14f2:	f006 fb59 	bl	7ba8 <z_impl_k_sem_take>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    14f6:	f009 f9bb 	bl	a870 <sys_clock_cycle_get_32>
    14fa:	4607      	mov	r7, r0
		mes_NOD = (uint8_t *)get_mes(cab_NOD);
    14fc:	f8da 0000 	ldr.w	r0, [sl]
    1500:	f009 fc62 	bl	adc8 <get_mes>
    1504:	4606      	mov	r6, r0
		mes_OAP = (float *)get_mes(cab_OAP);
    1506:	f8db 0000 	ldr.w	r0, [fp]
    150a:	f009 fc5d 	bl	adc8 <get_mes>
    150e:	4605      	mov	r5, r0
		printk("Near obstacle detection -> %d\nOrientation and Position -> %f, %d%%\n", *mes_NOD, *mes_OAP, (uint16_t)*(mes_OAP+1));
    1510:	6800      	ldr	r0, [r0, #0]
    1512:	f7fe ff59 	bl	3c8 <__aeabi_f2d>
    1516:	4680      	mov	r8, r0
    1518:	4689      	mov	r9, r1
    151a:	6868      	ldr	r0, [r5, #4]
    151c:	7831      	ldrb	r1, [r6, #0]
    151e:	9103      	str	r1, [sp, #12]
    1520:	f7ff fb1a 	bl	b58 <__aeabi_f2uiz>
    1524:	b280      	uxth	r0, r0
    1526:	4642      	mov	r2, r8
    1528:	464b      	mov	r3, r9
    152a:	9903      	ldr	r1, [sp, #12]
    152c:	9000      	str	r0, [sp, #0]
    152e:	4813      	ldr	r0, [pc, #76]	; (157c <thread_OUTPUT_code+0xa4>)
    1530:	f008 fcfb 	bl	9f2a <printk>
		unget(mes_NOD, cab_NOD);
    1534:	f8da 1000 	ldr.w	r1, [sl]
    1538:	4630      	mov	r0, r6
    153a:	f009 fc60 	bl	adfe <unget>
		unget(mes_OAP, cab_OAP);
    153e:	f8db 1000 	ldr.w	r1, [fp]
    1542:	4628      	mov	r0, r5
    1544:	f009 fc5b 	bl	adfe <unget>
    1548:	f009 f992 	bl	a870 <sys_clock_cycle_get_32>
		end = k_cycle_get_32();
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    154c:	1bc0      	subs	r0, r0, r7
    154e:	42a0      	cmp	r0, r4
    1550:	d908      	bls.n	1564 <thread_OUTPUT_code+0x8c>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1552:	4a0b      	ldr	r2, [pc, #44]	; (1580 <thread_OUTPUT_code+0xa8>)
    1554:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1558:	2300      	movs	r3, #0
    155a:	fbe0 4302 	umlal	r4, r3, r0, r2
    155e:	0be4      	lsrs	r4, r4, #15
    1560:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("-----------------------\nThread OUTPUT executed\nWCET -> %4u\n-----------------", wc_exec_time);
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <thread_OUTPUT_code+0xac>)
    1566:	4621      	mov	r1, r4
    1568:	f008 fcdf 	bl	9f2a <printk>
	while(1){
    156c:	e7bc      	b.n	14e8 <thread_OUTPUT_code+0x10>
    156e:	bf00      	nop
    1570:	200007b8 	.word	0x200007b8
    1574:	200007b4 	.word	0x200007b4
    1578:	20000790 	.word	0x20000790
    157c:	0000b570 	.word	0x0000b570
    1580:	000f4240 	.word	0x000f4240
    1584:	0000b5b4 	.word	0x0000b5b4

00001588 <uart_cb>:
	}
}

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    1588:	b510      	push	{r4, lr}
    int err;

    switch (evt->type) {
    158a:	780b      	ldrb	r3, [r1, #0]
    158c:	2b02      	cmp	r3, #2
    158e:	d008      	beq.n	15a2 <uart_cb+0x1a>
    1590:	2b05      	cmp	r3, #5
    1592:	d014      	beq.n	15be <uart_cb+0x36>
    1594:	2b01      	cmp	r3, #1
    1596:	d111      	bne.n	15bc <uart_cb+0x34>
	    default:
            //printk("UART: unknown event \n\r");
		    break;
    }

    1598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    	printk("UART_TX_ABORTED event \n\r");
    159c:	4812      	ldr	r0, [pc, #72]	; (15e8 <uart_cb+0x60>)
    159e:	f008 bcc4 	b.w	9f2a <printk>
            memcpy(&rx_chars, &(rx_buf[evt->data.rx.offset]), evt->data.rx.len);
    15a2:	6888      	ldr	r0, [r1, #8]
    15a4:	68ca      	ldr	r2, [r1, #12]
    15a6:	4911      	ldr	r1, [pc, #68]	; (15ec <uart_cb+0x64>)
    15a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    15ac:	4401      	add	r1, r0
    15ae:	4810      	ldr	r0, [pc, #64]	; (15f0 <uart_cb+0x68>)
    15b0:	f009 fc8d 	bl	aece <__memcpy_chk>
            rx++;   
    15b4:	4a0f      	ldr	r2, [pc, #60]	; (15f4 <uart_cb+0x6c>)
    15b6:	6813      	ldr	r3, [r2, #0]
    15b8:	3301      	adds	r3, #1
    15ba:	6013      	str	r3, [r2, #0]
    15bc:	bd10      	pop	{r4, pc}
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    15be:	4b0e      	ldr	r3, [pc, #56]	; (15f8 <uart_cb+0x70>)
    15c0:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    15c2:	6883      	ldr	r3, [r0, #8]
    15c4:	4909      	ldr	r1, [pc, #36]	; (15ec <uart_cb+0x64>)
    15c6:	68dc      	ldr	r4, [r3, #12]
    15c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    15cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    15d0:	47a0      	blx	r4
            if (err) {
    15d2:	4601      	mov	r1, r0
    15d4:	2800      	cmp	r0, #0
    15d6:	d0f1      	beq.n	15bc <uart_cb+0x34>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
    15d8:	4808      	ldr	r0, [pc, #32]	; (15fc <uart_cb+0x74>)
    15da:	f008 fca6 	bl	9f2a <printk>
                exit(FATAL_ERR);                
    15de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    15e2:	f008 fa75 	bl	9ad0 <exit>
    15e6:	bf00      	nop
    15e8:	0000b601 	.word	0x0000b601
    15ec:	200050f4 	.word	0x200050f4
    15f0:	200010f4 	.word	0x200010f4
    15f4:	200007d0 	.word	0x200007d0
    15f8:	200007d4 	.word	0x200007d4
    15fc:	0000b61a 	.word	0x0000b61a

00001600 <thread_OAP_code>:
void thread_OAP_code(void *argA , void *argB, void *argC){
    1600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1604:	4e1d      	ldr	r6, [pc, #116]	; (167c <thread_OAP_code+0x7c>)
		buff = (float *) reserve(cab_OAP);
    1606:	4d1e      	ldr	r5, [pc, #120]	; (1680 <thread_OAP_code+0x80>)
		guideLineSearch(rx_chars, &pos, &angle);
    1608:	4f1e      	ldr	r7, [pc, #120]	; (1684 <thread_OAP_code+0x84>)
	uint32_t wc_exec_time = 1;
    160a:	2401      	movs	r4, #1
    160c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1610:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1614:	4630      	mov	r0, r6
    1616:	f006 fac7 	bl	7ba8 <z_impl_k_sem_take>
    161a:	f009 f929 	bl	a870 <sys_clock_cycle_get_32>
    161e:	4681      	mov	r9, r0
		buff = (float *) reserve(cab_OAP);
    1620:	6828      	ldr	r0, [r5, #0]
    1622:	f008 fa27 	bl	9a74 <reserve>
		guideLineSearch(rx_chars, &pos, &angle);
    1626:	aa01      	add	r2, sp, #4
		buff = (float *) reserve(cab_OAP);
    1628:	4680      	mov	r8, r0
		guideLineSearch(rx_chars, &pos, &angle);
    162a:	f10d 0102 	add.w	r1, sp, #2
    162e:	4638      	mov	r0, r7
    1630:	f7ff fcb6 	bl	fa0 <guideLineSearch>
		*buff = angle;
    1634:	9b01      	ldr	r3, [sp, #4]
    1636:	f8c8 3000 	str.w	r3, [r8]
		*(buff+1) = pos;
    163a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    163e:	f7ff fa33 	bl	aa8 <__aeabi_ui2f>
		put_mes(buff, cab_OAP);
    1642:	6829      	ldr	r1, [r5, #0]
		*(buff+1) = pos;
    1644:	f8c8 0004 	str.w	r0, [r8, #4]
		put_mes(buff, cab_OAP);
    1648:	4640      	mov	r0, r8
    164a:	f009 fba2 	bl	ad92 <put_mes>
    164e:	f009 f90f 	bl	a870 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    1652:	eba0 0009 	sub.w	r0, r0, r9
    1656:	42a0      	cmp	r0, r4
    1658:	d908      	bls.n	166c <thread_OAP_code+0x6c>
    165a:	4a0b      	ldr	r2, [pc, #44]	; (1688 <thread_OAP_code+0x88>)
    165c:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1660:	2300      	movs	r3, #0
    1662:	fbe0 4302 	umlal	r4, r3, r0, r2
    1666:	0be4      	lsrs	r4, r4, #15
    1668:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("-----------------\nThread OAP executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
    166c:	4807      	ldr	r0, [pc, #28]	; (168c <thread_OAP_code+0x8c>)
    166e:	4621      	mov	r1, r4
    1670:	f008 fc5b 	bl	9f2a <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1674:	4806      	ldr	r0, [pc, #24]	; (1690 <thread_OAP_code+0x90>)
    1676:	f006 fa59 	bl	7b2c <z_impl_k_sem_give>
	while(1){
    167a:	e7c7      	b.n	160c <thread_OAP_code+0xc>
    167c:	20000780 	.word	0x20000780
    1680:	200007b4 	.word	0x200007b4
    1684:	200010f4 	.word	0x200010f4
    1688:	000f4240 	.word	0x000f4240
    168c:	0000b642 	.word	0x0000b642
    1690:	20000790 	.word	0x20000790

00001694 <thread_NOD_code>:
void thread_NOD_code(void *argA , void *argB, void *argC){
    1694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
    1698:	4e1a      	ldr	r6, [pc, #104]	; (1704 <thread_NOD_code+0x70>)
		buff = reserve(cab_NOD);
    169a:	4d1b      	ldr	r5, [pc, #108]	; (1708 <thread_NOD_code+0x74>)
		flag = nearObstSearch(rx_chars);
    169c:	4f1b      	ldr	r7, [pc, #108]	; (170c <thread_NOD_code+0x78>)
	uint32_t wc_exec_time = 1;
    169e:	2401      	movs	r4, #1
    16a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    16a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16a8:	4630      	mov	r0, r6
    16aa:	f006 fa7d 	bl	7ba8 <z_impl_k_sem_take>
    16ae:	f009 f8df 	bl	a870 <sys_clock_cycle_get_32>
    16b2:	4681      	mov	r9, r0
		buff = reserve(cab_NOD);
    16b4:	6828      	ldr	r0, [r5, #0]
    16b6:	f008 f9dd 	bl	9a74 <reserve>
    16ba:	4680      	mov	r8, r0
		flag = nearObstSearch(rx_chars);
    16bc:	4638      	mov	r0, r7
    16be:	f009 fbb9 	bl	ae34 <nearObstSearch>
    16c2:	4601      	mov	r1, r0
		*buff = flag;
    16c4:	f888 0000 	strb.w	r0, [r8]
		printk("FLAG -> %d\n", flag);
    16c8:	4811      	ldr	r0, [pc, #68]	; (1710 <thread_NOD_code+0x7c>)
    16ca:	f008 fc2e 	bl	9f2a <printk>
		put_mes(buff, cab_NOD);
    16ce:	6829      	ldr	r1, [r5, #0]
    16d0:	4640      	mov	r0, r8
    16d2:	f009 fb5e 	bl	ad92 <put_mes>
    16d6:	f009 f8cb 	bl	a870 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    16da:	eba0 0009 	sub.w	r0, r0, r9
    16de:	42a0      	cmp	r0, r4
    16e0:	d908      	bls.n	16f4 <thread_NOD_code+0x60>
    16e2:	4a0c      	ldr	r2, [pc, #48]	; (1714 <thread_NOD_code+0x80>)
    16e4:	f647 74ff 	movw	r4, #32767	; 0x7fff
    16e8:	2300      	movs	r3, #0
    16ea:	fbe0 4302 	umlal	r4, r3, r0, r2
    16ee:	0be4      	lsrs	r4, r4, #15
    16f0:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("----------------------\nThread NOD executed\nWCET -> %4u\n-----------------\n", wc_exec_time);
    16f4:	4808      	ldr	r0, [pc, #32]	; (1718 <thread_NOD_code+0x84>)
    16f6:	4621      	mov	r1, r4
    16f8:	f008 fc17 	bl	9f2a <printk>
	z_impl_k_sem_give(sem);
    16fc:	4807      	ldr	r0, [pc, #28]	; (171c <thread_NOD_code+0x88>)
    16fe:	f006 fa15 	bl	7b2c <z_impl_k_sem_give>
	while(1){
    1702:	e7cd      	b.n	16a0 <thread_NOD_code+0xc>
    1704:	200007a0 	.word	0x200007a0
    1708:	200007b8 	.word	0x200007b8
    170c:	200010f4 	.word	0x200010f4
    1710:	0000b687 	.word	0x0000b687
    1714:	000f4240 	.word	0x000f4240
    1718:	0000b693 	.word	0x0000b693
    171c:	20000790 	.word	0x20000790

00001720 <thread_RXDATA_code>:
void thread_RXDATA_code(void *argA , void *argB, void *argC){
    1720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	char arr[4] = {'A', 'C', 'K', '\0'};
    1724:	4b16      	ldr	r3, [pc, #88]	; (1780 <thread_RXDATA_code+0x60>)
        if(rx > 0){  
    1726:	4d17      	ldr	r5, [pc, #92]	; (1784 <thread_RXDATA_code+0x64>)
			printk("----------------------\nDownloading img%d....\n", c);
    1728:	4e17      	ldr	r6, [pc, #92]	; (1788 <thread_RXDATA_code+0x68>)
            err = uart_tx(uart_dev, arr, sizeof(arr), SYS_FOREVER_US);
    172a:	4f18      	ldr	r7, [pc, #96]	; (178c <thread_RXDATA_code+0x6c>)
	char arr[4] = {'A', 'C', 'K', '\0'};
    172c:	9301      	str	r3, [sp, #4]
	int c = 1;
    172e:	2401      	movs	r4, #1
        if(rx > 0){  
    1730:	682b      	ldr	r3, [r5, #0]
    1732:	2b00      	cmp	r3, #0
    1734:	dd1e      	ble.n	1774 <thread_RXDATA_code+0x54>
			printk("----------------------\nDownloading img%d....\n", c);
    1736:	4630      	mov	r0, r6
    1738:	4621      	mov	r1, r4
    173a:	f008 fbf6 	bl	9f2a <printk>
            rx = 0;  /* Reset */
    173e:	2300      	movs	r3, #0
            err = uart_tx(uart_dev, arr, sizeof(arr), SYS_FOREVER_US);
    1740:	6838      	ldr	r0, [r7, #0]
            rx = 0;  /* Reset */
    1742:	602b      	str	r3, [r5, #0]
	return api->tx(dev, buf, len, timeout);
    1744:	6883      	ldr	r3, [r0, #8]
    1746:	2204      	movs	r2, #4
    1748:	f8d3 8004 	ldr.w	r8, [r3, #4]
    174c:	eb0d 0102 	add.w	r1, sp, r2
    1750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1754:	47c0      	blx	r8
            if (err) {
    1756:	4601      	mov	r1, r0
    1758:	b128      	cbz	r0, 1766 <thread_RXDATA_code+0x46>
               printk("uart_tx() error. Error code:%d\n\r",err);
    175a:	480d      	ldr	r0, [pc, #52]	; (1790 <thread_RXDATA_code+0x70>)
    175c:	f008 fbe5 	bl	9f2a <printk>
}
    1760:	b002      	add	sp, #8
    1762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			c++;
    1766:	3401      	adds	r4, #1
    1768:	480a      	ldr	r0, [pc, #40]	; (1794 <thread_RXDATA_code+0x74>)
    176a:	f006 f9df 	bl	7b2c <z_impl_k_sem_give>
    176e:	480a      	ldr	r0, [pc, #40]	; (1798 <thread_RXDATA_code+0x78>)
    1770:	f006 f9dc 	bl	7b2c <z_impl_k_sem_give>
	return z_impl_k_usleep(us);
    1774:	f641 509d 	movw	r0, #7581	; 0x1d9d
    1778:	f007 fb30 	bl	8ddc <z_impl_k_usleep>
    177c:	e7d8      	b.n	1730 <thread_RXDATA_code+0x10>
    177e:	bf00      	nop
    1780:	004b4341 	.word	0x004b4341
    1784:	200007d0 	.word	0x200007d0
    1788:	0000b6dd 	.word	0x0000b6dd
    178c:	200007d4 	.word	0x200007d4
    1790:	0000b70b 	.word	0x0000b70b
    1794:	200007a0 	.word	0x200007a0
    1798:	20000780 	.word	0x20000780

0000179c <main>:
{
    179c:	b5f0      	push	{r4, r5, r6, r7, lr}
    179e:	b08f      	sub	sp, #60	; 0x3c
	float first_OAP[2] = {0.0, 0.0};
    17a0:	2300      	movs	r3, #0
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    17a2:	2201      	movs	r2, #1
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    17a4:	2400      	movs	r4, #0
	float first_OAP[2] = {0.0, 0.0};
    17a6:	930c      	str	r3, [sp, #48]	; 0x30
    17a8:	930d      	str	r3, [sp, #52]	; 0x34
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    17aa:	4611      	mov	r1, r2
    17ac:	f10d 0321 	add.w	r3, sp, #33	; 0x21
    17b0:	485f      	ldr	r0, [pc, #380]	; (1930 <main+0x194>)
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    17b2:	940b      	str	r4, [sp, #44]	; 0x2c
    17b4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	uint8_t first_NOD = 0;
    17b8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
	uint16_t first_OBSC = 0;
    17bc:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    17c0:	f009 fab9 	bl	ad36 <open_cab>
    17c4:	4b5b      	ldr	r3, [pc, #364]	; (1934 <main+0x198>)
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    17c6:	2204      	movs	r2, #4
	cab_NOD = open_cab("NOD", 1, 1, &first_NOD);
    17c8:	6018      	str	r0, [r3, #0]
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    17ca:	2102      	movs	r1, #2
    17cc:	ab0c      	add	r3, sp, #48	; 0x30
    17ce:	485a      	ldr	r0, [pc, #360]	; (1938 <main+0x19c>)
    17d0:	f009 fab1 	bl	ad36 <open_cab>
    17d4:	4b59      	ldr	r3, [pc, #356]	; (193c <main+0x1a0>)
	cab_OBSC = open_cab("OBSC", 1, 2, &first_OBSC);
    17d6:	2202      	movs	r2, #2
	cab_OAP = open_cab("OAP", 2, 4, first_OAP);
    17d8:	6018      	str	r0, [r3, #0]
	cab_OBSC = open_cab("OBSC", 1, 2, &first_OBSC);
    17da:	2101      	movs	r1, #1
    17dc:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    17e0:	4857      	ldr	r0, [pc, #348]	; (1940 <main+0x1a4>)
    17e2:	f009 faa8 	bl	ad36 <open_cab>
    17e6:	4b57      	ldr	r3, [pc, #348]	; (1944 <main+0x1a8>)
    17e8:	6018      	str	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    17ea:	4857      	ldr	r0, [pc, #348]	; (1948 <main+0x1ac>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    17ec:	4d57      	ldr	r5, [pc, #348]	; (194c <main+0x1b0>)
    17ee:	f005 fbd1 	bl	6f94 <z_impl_device_get_binding>
    17f2:	6028      	str	r0, [r5, #0]
    if (uart_dev == NULL) {
    17f4:	b920      	cbnz	r0, 1800 <main+0x64>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    17f6:	4954      	ldr	r1, [pc, #336]	; (1948 <main+0x1ac>)
    17f8:	4855      	ldr	r0, [pc, #340]	; (1950 <main+0x1b4>)
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    17fa:	f008 fb96 	bl	9f2a <printk>
        return;
    17fe:	e009      	b.n	1814 <main+0x78>
        printk("UART binding successful\n\r");
    1800:	4854      	ldr	r0, [pc, #336]	; (1954 <main+0x1b8>)
    1802:	f008 fb92 	bl	9f2a <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    1806:	6828      	ldr	r0, [r5, #0]
	if (api->configure == NULL) {
    1808:	6883      	ldr	r3, [r0, #8]
    180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    180c:	b923      	cbnz	r3, 1818 <main+0x7c>
        printk("uart_configure() error. Invalid configuration\n\r");
    180e:	4852      	ldr	r0, [pc, #328]	; (1958 <main+0x1bc>)
    1810:	f008 fb8b 	bl	9f2a <printk>
}
    1814:	b00f      	add	sp, #60	; 0x3c
    1816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->configure(dev, cfg);
    1818:	4950      	ldr	r1, [pc, #320]	; (195c <main+0x1c0>)
    181a:	4798      	blx	r3
    if (err == -ENOSYS) { /* If invalid configuration */
    181c:	3058      	adds	r0, #88	; 0x58
    181e:	d0f6      	beq.n	180e <main+0x72>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    1820:	6828      	ldr	r0, [r5, #0]
	if (api->callback_set == NULL) {
    1822:	6883      	ldr	r3, [r0, #8]
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	b133      	cbz	r3, 1836 <main+0x9a>
	return api->callback_set(dev, callback, user_data);
    1828:	494d      	ldr	r1, [pc, #308]	; (1960 <main+0x1c4>)
    182a:	4622      	mov	r2, r4
    182c:	4798      	blx	r3
    if (err) {
    182e:	4601      	mov	r1, r0
    1830:	b120      	cbz	r0, 183c <main+0xa0>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    1832:	484c      	ldr	r0, [pc, #304]	; (1964 <main+0x1c8>)
    1834:	e7e1      	b.n	17fa <main+0x5e>
		return -ENOSYS;
    1836:	f06f 0157 	mvn.w	r1, #87	; 0x57
    183a:	e7fa      	b.n	1832 <main+0x96>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    183c:	6828      	ldr	r0, [r5, #0]
	return api->rx_enable(dev, buf, len, timeout);
    183e:	6883      	ldr	r3, [r0, #8]
    1840:	4949      	ldr	r1, [pc, #292]	; (1968 <main+0x1cc>)
    1842:	68dc      	ldr	r4, [r3, #12]
    1844:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    184c:	47a0      	blx	r4
    if (err) {
    184e:	4604      	mov	r4, r0
    1850:	b110      	cbz	r0, 1858 <main+0xbc>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    1852:	4601      	mov	r1, r0
    1854:	4845      	ldr	r0, [pc, #276]	; (196c <main+0x1d0>)
    1856:	e7d0      	b.n	17fa <main+0x5e>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1858:	2201      	movs	r2, #1
    185a:	4601      	mov	r1, r0
    185c:	4844      	ldr	r0, [pc, #272]	; (1970 <main+0x1d4>)
    185e:	f009 f9e7 	bl	ac30 <z_impl_k_sem_init>
    1862:	2201      	movs	r2, #1
    1864:	4621      	mov	r1, r4
    1866:	4843      	ldr	r0, [pc, #268]	; (1974 <main+0x1d8>)
    1868:	f009 f9e2 	bl	ac30 <z_impl_k_sem_init>
    186c:	2201      	movs	r2, #1
    186e:	4621      	mov	r1, r4
    1870:	4841      	ldr	r0, [pc, #260]	; (1978 <main+0x1dc>)
    1872:	f009 f9dd 	bl	ac30 <z_impl_k_sem_init>
	thread_NOD_tid = k_thread_create(&thread_NOD_data, thread_NOD_stack,
    1876:	2600      	movs	r6, #0
    1878:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    187a:	ab0b      	add	r3, sp, #44	; 0x2c
    187c:	9302      	str	r3, [sp, #8]
    187e:	ab0a      	add	r3, sp, #40	; 0x28
    1880:	9301      	str	r3, [sp, #4]
    1882:	2501      	movs	r5, #1
    1884:	ab09      	add	r3, sp, #36	; 0x24
    1886:	9300      	str	r3, [sp, #0]
    1888:	e9cd 6706 	strd	r6, r7, [sp, #24]
    188c:	4b3b      	ldr	r3, [pc, #236]	; (197c <main+0x1e0>)
    188e:	493c      	ldr	r1, [pc, #240]	; (1980 <main+0x1e4>)
    1890:	9404      	str	r4, [sp, #16]
    1892:	9503      	str	r5, [sp, #12]
    1894:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1898:	483a      	ldr	r0, [pc, #232]	; (1984 <main+0x1e8>)
    189a:	f005 fe59 	bl	7550 <z_impl_k_thread_create>
    189e:	4b3a      	ldr	r3, [pc, #232]	; (1988 <main+0x1ec>)
    18a0:	6018      	str	r0, [r3, #0]
    18a2:	4b3a      	ldr	r3, [pc, #232]	; (198c <main+0x1f0>)
    18a4:	493a      	ldr	r1, [pc, #232]	; (1990 <main+0x1f4>)
    18a6:	9400      	str	r4, [sp, #0]
    18a8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    18ac:	e9cd 5403 	strd	r5, r4, [sp, #12]
    18b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    18b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18b8:	4836      	ldr	r0, [pc, #216]	; (1994 <main+0x1f8>)
    18ba:	f005 fe49 	bl	7550 <z_impl_k_thread_create>
	thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
    18be:	4b36      	ldr	r3, [pc, #216]	; (1998 <main+0x1fc>)
    18c0:	6018      	str	r0, [r3, #0]
    18c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    18c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    18ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    18ce:	2303      	movs	r3, #3
    18d0:	e9cd 4302 	strd	r4, r3, [sp, #8]
    18d4:	e9cd 4400 	strd	r4, r4, [sp]
    18d8:	4b30      	ldr	r3, [pc, #192]	; (199c <main+0x200>)
    18da:	4931      	ldr	r1, [pc, #196]	; (19a0 <main+0x204>)
    18dc:	9404      	str	r4, [sp, #16]
    18de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    18e2:	4830      	ldr	r0, [pc, #192]	; (19a4 <main+0x208>)
    18e4:	f005 fe34 	bl	7550 <z_impl_k_thread_create>
	thread_OBSC_tid = k_thread_create(&thread_OBSC_data, thread_OBSC_stack,
    18e8:	4b2f      	ldr	r3, [pc, #188]	; (19a8 <main+0x20c>)
    18ea:	6018      	str	r0, [r3, #0]
    18ec:	2302      	movs	r3, #2
    18ee:	e9cd 4302 	strd	r4, r3, [sp, #8]
    18f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    18f6:	e9cd 4400 	strd	r4, r4, [sp]
    18fa:	4b2c      	ldr	r3, [pc, #176]	; (19ac <main+0x210>)
    18fc:	492c      	ldr	r1, [pc, #176]	; (19b0 <main+0x214>)
    18fe:	9404      	str	r4, [sp, #16]
    1900:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1904:	482b      	ldr	r0, [pc, #172]	; (19b4 <main+0x218>)
    1906:	f005 fe23 	bl	7550 <z_impl_k_thread_create>
	thread_OAP_tid = k_thread_create(&thread_OAP_data, thread_OAP_stack,
    190a:	4b2b      	ldr	r3, [pc, #172]	; (19b8 <main+0x21c>)
    190c:	6018      	str	r0, [r3, #0]
    190e:	4b2b      	ldr	r3, [pc, #172]	; (19bc <main+0x220>)
    1910:	492b      	ldr	r1, [pc, #172]	; (19c0 <main+0x224>)
    1912:	482c      	ldr	r0, [pc, #176]	; (19c4 <main+0x228>)
    1914:	9400      	str	r4, [sp, #0]
    1916:	e9cd 6706 	strd	r6, r7, [sp, #24]
    191a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    191e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1922:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1926:	f005 fe13 	bl	7550 <z_impl_k_thread_create>
	thread_RXDATA_tid = k_thread_create(&thread_RXDATA_data, thread_RXDATA_stack, 
    192a:	4b27      	ldr	r3, [pc, #156]	; (19c8 <main+0x22c>)
    192c:	6018      	str	r0, [r3, #0]
	return;
    192e:	e771      	b.n	1814 <main+0x78>
    1930:	0000b72c 	.word	0x0000b72c
    1934:	200007b8 	.word	0x200007b8
    1938:	0000b730 	.word	0x0000b730
    193c:	200007b4 	.word	0x200007b4
    1940:	0000b734 	.word	0x0000b734
    1944:	200007b0 	.word	0x200007b0
    1948:	0000b739 	.word	0x0000b739
    194c:	200007d4 	.word	0x200007d4
    1950:	0000b740 	.word	0x0000b740
    1954:	0000b76c 	.word	0x0000b76c
    1958:	0000b786 	.word	0x0000b786
    195c:	0000b2a8 	.word	0x0000b2a8
    1960:	00001589 	.word	0x00001589
    1964:	0000b7b6 	.word	0x0000b7b6
    1968:	200050f4 	.word	0x200050f4
    196c:	0000b61a 	.word	0x0000b61a
    1970:	200007a0 	.word	0x200007a0
    1974:	20000790 	.word	0x20000790
    1978:	20000780 	.word	0x20000780
    197c:	00001695 	.word	0x00001695
    1980:	2000b5a0 	.word	0x2000b5a0
    1984:	20000428 	.word	0x20000428
    1988:	200007cc 	.word	0x200007cc
    198c:	000014d9 	.word	0x000014d9
    1990:	20009d40 	.word	0x20009d40
    1994:	200002a8 	.word	0x200002a8
    1998:	200007c0 	.word	0x200007c0
    199c:	000014c9 	.word	0x000014c9
    19a0:	2000ad80 	.word	0x2000ad80
    19a4:	200003a8 	.word	0x200003a8
    19a8:	200007c8 	.word	0x200007c8
    19ac:	00001601 	.word	0x00001601
    19b0:	2000a560 	.word	0x2000a560
    19b4:	20000328 	.word	0x20000328
    19b8:	200007c4 	.word	0x200007c4
    19bc:	00001721 	.word	0x00001721
    19c0:	20009520 	.word	0x20009520
    19c4:	20000228 	.word	0x20000228
    19c8:	200007bc 	.word	0x200007bc

000019cc <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    19cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19d0:	b08d      	sub	sp, #52	; 0x34
    19d2:	461f      	mov	r7, r3
    19d4:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    19d6:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    19da:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    19de:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    19e0:	1c53      	adds	r3, r2, #1
    19e2:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    19e4:	0783      	lsls	r3, r0, #30
    19e6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    19ea:	4605      	mov	r5, r0
    19ec:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    19ee:	f040 8228 	bne.w	1e42 <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    19f2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    19f4:	b130      	cbz	r0, 1a04 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    19f6:	2907      	cmp	r1, #7
    19f8:	d809      	bhi.n	1a0e <cbvprintf_package+0x42>
		return -ENOSPC;
    19fa:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    19fe:	b00d      	add	sp, #52	; 0x34
    1a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1a04:	f001 0607 	and.w	r6, r1, #7
    1a08:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1a0a:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1a0e:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    1a12:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    1a16:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1a18:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1a1c:	4652      	mov	r2, sl
	bool parsing = false;
    1a1e:	4651      	mov	r1, sl
	size = sizeof(char *);
    1a20:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    1a22:	b105      	cbz	r5, 1a26 <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    1a24:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1a26:	9804      	ldr	r0, [sp, #16]
    1a28:	2800      	cmp	r0, #0
    1a2a:	f300 812a 	bgt.w	1c82 <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1a2e:	48bc      	ldr	r0, [pc, #752]	; (1d20 <cbvprintf_package+0x354>)
    1a30:	4287      	cmp	r7, r0
    1a32:	d303      	bcc.n	1a3c <cbvprintf_package+0x70>
    1a34:	48bb      	ldr	r0, [pc, #748]	; (1d24 <cbvprintf_package+0x358>)
    1a36:	4287      	cmp	r7, r0
    1a38:	f0c0 8123 	bcc.w	1c82 <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1a3c:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1a40:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1a44:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1a48:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1a4c:	f000 8137 	beq.w	1cbe <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1a50:	f04f 0c00 	mov.w	ip, #0
    1a54:	e11e      	b.n	1c94 <cbvprintf_package+0x2c8>
		if (!parsing) {
    1a56:	b931      	cbnz	r1, 1a66 <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    1a58:	2825      	cmp	r0, #37	; 0x25
    1a5a:	d116      	bne.n	1a8a <cbvprintf_package+0xbe>
				parsing = true;
    1a5c:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    1a5e:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    1a62:	46cb      	mov	fp, r9
    1a64:	e011      	b.n	1a8a <cbvprintf_package+0xbe>
		switch (*fmt) {
    1a66:	286c      	cmp	r0, #108	; 0x6c
    1a68:	f200 809f 	bhi.w	1baa <cbvprintf_package+0x1de>
    1a6c:	284b      	cmp	r0, #75	; 0x4b
    1a6e:	d822      	bhi.n	1ab6 <cbvprintf_package+0xea>
    1a70:	2847      	cmp	r0, #71	; 0x47
    1a72:	f200 80b1 	bhi.w	1bd8 <cbvprintf_package+0x20c>
    1a76:	2829      	cmp	r0, #41	; 0x29
    1a78:	d86a      	bhi.n	1b50 <cbvprintf_package+0x184>
    1a7a:	2820      	cmp	r0, #32
    1a7c:	d005      	beq.n	1a8a <cbvprintf_package+0xbe>
    1a7e:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    1a82:	f1dc 0100 	rsbs	r1, ip, #0
    1a86:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    1a8a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1a8e:	2800      	cmp	r0, #0
    1a90:	d1e1      	bne.n	1a56 <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1a92:	1b61      	subs	r1, r4, r5
    1a94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    1a98:	f0c0 8173 	bcc.w	1d82 <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    1a9c:	49a2      	ldr	r1, [pc, #648]	; (1d28 <cbvprintf_package+0x35c>)
    1a9e:	4aa3      	ldr	r2, [pc, #652]	; (1d2c <cbvprintf_package+0x360>)
    1aa0:	48a3      	ldr	r0, [pc, #652]	; (1d30 <cbvprintf_package+0x364>)
    1aa2:	f240 233d 	movw	r3, #573	; 0x23d
    1aa6:	f008 fb8d 	bl	a1c4 <assert_print>
    1aaa:	48a2      	ldr	r0, [pc, #648]	; (1d34 <cbvprintf_package+0x368>)
    1aac:	f008 fb8a 	bl	a1c4 <assert_print>
    1ab0:	f240 213d 	movw	r1, #573	; 0x23d
    1ab4:	e0fd      	b.n	1cb2 <cbvprintf_package+0x2e6>
		switch (*fmt) {
    1ab6:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1aba:	f1bc 0f20 	cmp.w	ip, #32
    1abe:	f200 808b 	bhi.w	1bd8 <cbvprintf_package+0x20c>
    1ac2:	f20f 0e08 	addw	lr, pc, #8
    1ac6:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    1aca:	bf00      	nop
    1acc:	00001a8b 	.word	0x00001a8b
    1ad0:	00001bd9 	.word	0x00001bd9
    1ad4:	00001bd9 	.word	0x00001bd9
    1ad8:	00001bd9 	.word	0x00001bd9
    1adc:	00001bd9 	.word	0x00001bd9
    1ae0:	00001bd9 	.word	0x00001bd9
    1ae4:	00001bd9 	.word	0x00001bd9
    1ae8:	00001bd9 	.word	0x00001bd9
    1aec:	00001bd9 	.word	0x00001bd9
    1af0:	00001bd9 	.word	0x00001bd9
    1af4:	00001bd9 	.word	0x00001bd9
    1af8:	00001bd9 	.word	0x00001bd9
    1afc:	00001bdd 	.word	0x00001bdd
    1b00:	00001bd9 	.word	0x00001bd9
    1b04:	00001bd9 	.word	0x00001bd9
    1b08:	00001bd9 	.word	0x00001bd9
    1b0c:	00001bd9 	.word	0x00001bd9
    1b10:	00001bd9 	.word	0x00001bd9
    1b14:	00001bd9 	.word	0x00001bd9
    1b18:	00001bd9 	.word	0x00001bd9
    1b1c:	00001bd9 	.word	0x00001bd9
    1b20:	00001bf9 	.word	0x00001bf9
    1b24:	00001bd9 	.word	0x00001bd9
    1b28:	00001bdd 	.word	0x00001bdd
    1b2c:	00001bdd 	.word	0x00001bdd
    1b30:	00001bf9 	.word	0x00001bf9
    1b34:	00001bf9 	.word	0x00001bf9
    1b38:	00001bf9 	.word	0x00001bf9
    1b3c:	00001a8b 	.word	0x00001a8b
    1b40:	00001bdd 	.word	0x00001bdd
    1b44:	00001c21 	.word	0x00001c21
    1b48:	00001bd9 	.word	0x00001bd9
    1b4c:	00001a8b 	.word	0x00001a8b
    1b50:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1b54:	f04f 0e01 	mov.w	lr, #1
    1b58:	fa5f fc8c 	uxtb.w	ip, ip
    1b5c:	fa0e fc0c 	lsl.w	ip, lr, ip
    1b60:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1b64:	ea1c 0f0e 	tst.w	ip, lr
    1b68:	d18f      	bne.n	1a8a <cbvprintf_package+0xbe>
    1b6a:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    1b6e:	d143      	bne.n	1bf8 <cbvprintf_package+0x22c>
    1b70:	f01c 0101 	ands.w	r1, ip, #1
    1b74:	d089      	beq.n	1a8a <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    1b76:	3c01      	subs	r4, #1
    1b78:	444c      	add	r4, r9
    1b7a:	f1c9 0c00 	rsb	ip, r9, #0
    1b7e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1b82:	2d00      	cmp	r5, #0
    1b84:	d065      	beq.n	1c52 <cbvprintf_package+0x286>
    1b86:	ebab 0c05 	sub.w	ip, fp, r5
    1b8a:	44a4      	add	ip, r4
    1b8c:	4566      	cmp	r6, ip
    1b8e:	f4ff af34 	bcc.w	19fa <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    1b92:	2873      	cmp	r0, #115	; 0x73
    1b94:	d06f      	beq.n	1c76 <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1b96:	f1bb 0f04 	cmp.w	fp, #4
    1b9a:	d14a      	bne.n	1c32 <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    1b9c:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    1ba0:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    1ba2:	3404      	adds	r4, #4
    1ba4:	f04f 0b04 	mov.w	fp, #4
    1ba8:	e76f      	b.n	1a8a <cbvprintf_package+0xbe>
		switch (*fmt) {
    1baa:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    1bae:	fa5f fc8c 	uxtb.w	ip, ip
    1bb2:	f1bc 0f0c 	cmp.w	ip, #12
    1bb6:	d80f      	bhi.n	1bd8 <cbvprintf_package+0x20c>
    1bb8:	f04f 0e01 	mov.w	lr, #1
    1bbc:	fa0e fc0c 	lsl.w	ip, lr, ip
    1bc0:	f01c 0f25 	tst.w	ip, #37	; 0x25
    1bc4:	d12f      	bne.n	1c26 <cbvprintf_package+0x25a>
    1bc6:	f240 4e82 	movw	lr, #1154	; 0x482
    1bca:	ea1c 0f0e 	tst.w	ip, lr
    1bce:	d105      	bne.n	1bdc <cbvprintf_package+0x210>
    1bd0:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    1bd4:	f47f af43 	bne.w	1a5e <cbvprintf_package+0x92>
			parsing = false;
    1bd8:	2100      	movs	r1, #0
    1bda:	e756      	b.n	1a8a <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    1bdc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    1be0:	296c      	cmp	r1, #108	; 0x6c
    1be2:	d124      	bne.n	1c2e <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    1be4:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1be8:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    1bea:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    1bee:	d11b      	bne.n	1c28 <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    1bf0:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    1bf4:	46cb      	mov	fp, r9
    1bf6:	e7be      	b.n	1b76 <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    1bf8:	f108 0807 	add.w	r8, r8, #7
    1bfc:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    1c00:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    1c02:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    1c06:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    1c0a:	b13d      	cbz	r5, 1c1c <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    1c0c:	f8dd e014 	ldr.w	lr, [sp, #20]
    1c10:	44a6      	add	lr, r4
    1c12:	45b6      	cmp	lr, r6
    1c14:	f63f aef1 	bhi.w	19fa <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    1c18:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1c1c:	3408      	adds	r4, #8
			parsing = false;
    1c1e:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1c20:	f04f 0908 	mov.w	r9, #8
    1c24:	e71d      	b.n	1a62 <cbvprintf_package+0x96>
			parsing = false;
    1c26:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    1c28:	f04f 0904 	mov.w	r9, #4
    1c2c:	e7e2      	b.n	1bf4 <cbvprintf_package+0x228>
			parsing = false;
    1c2e:	2100      	movs	r1, #0
    1c30:	e7a1      	b.n	1b76 <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    1c32:	f1bb 0f08 	cmp.w	fp, #8
    1c36:	f040 8096 	bne.w	1d66 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1c3a:	f108 0807 	add.w	r8, r8, #7
    1c3e:	f028 0807 	bic.w	r8, r8, #7
    1c42:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    1c46:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    1c4a:	3408      	adds	r4, #8
    1c4c:	f04f 0b08 	mov.w	fp, #8
    1c50:	e71b      	b.n	1a8a <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    1c52:	2873      	cmp	r0, #115	; 0x73
    1c54:	d00f      	beq.n	1c76 <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    1c56:	f1bb 0f04 	cmp.w	fp, #4
    1c5a:	d102      	bne.n	1c62 <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    1c5c:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1c60:	e79f      	b.n	1ba2 <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    1c62:	f1bb 0f08 	cmp.w	fp, #8
    1c66:	d17e      	bne.n	1d66 <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    1c68:	f108 0807 	add.w	r8, r8, #7
    1c6c:	f028 0807 	bic.w	r8, r8, #7
    1c70:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1c74:	e7e9      	b.n	1c4a <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c76:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    1c78:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c7c:	3801      	subs	r0, #1
    1c7e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    1c80:	e6cf      	b.n	1a22 <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    1c82:	9802      	ldr	r0, [sp, #8]
    1c84:	0780      	lsls	r0, r0, #30
    1c86:	d546      	bpl.n	1d16 <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1c88:	eba4 0e05 	sub.w	lr, r4, r5
    1c8c:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c90:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1c94:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1c98:	d31f      	bcc.n	1cda <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    1c9a:	4923      	ldr	r1, [pc, #140]	; (1d28 <cbvprintf_package+0x35c>)
    1c9c:	4a23      	ldr	r2, [pc, #140]	; (1d2c <cbvprintf_package+0x360>)
    1c9e:	4824      	ldr	r0, [pc, #144]	; (1d30 <cbvprintf_package+0x364>)
    1ca0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1ca4:	f008 fa8e 	bl	a1c4 <assert_print>
    1ca8:	4823      	ldr	r0, [pc, #140]	; (1d38 <cbvprintf_package+0x36c>)
    1caa:	f008 fa8b 	bl	a1c4 <assert_print>
    1cae:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    1cb2:	481e      	ldr	r0, [pc, #120]	; (1d2c <cbvprintf_package+0x360>)
    1cb4:	f008 fa7f 	bl	a1b6 <assert_post_action>
					return -EINVAL;
    1cb8:	f06f 0015 	mvn.w	r0, #21
    1cbc:	e69f      	b.n	19fe <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1cbe:	2a0f      	cmp	r2, #15
    1cc0:	d80d      	bhi.n	1cde <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    1cc2:	2d00      	cmp	r5, #0
    1cc4:	d03f      	beq.n	1d46 <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1cc6:	b2c0      	uxtb	r0, r0
    1cc8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1ccc:	44ec      	add	ip, sp
    1cce:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    1cd2:	9803      	ldr	r0, [sp, #12]
    1cd4:	3001      	adds	r0, #1
    1cd6:	9003      	str	r0, [sp, #12]
    1cd8:	e01c      	b.n	1d14 <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1cda:	2a0f      	cmp	r2, #15
    1cdc:	d90c      	bls.n	1cf8 <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    1cde:	4912      	ldr	r1, [pc, #72]	; (1d28 <cbvprintf_package+0x35c>)
    1ce0:	4a12      	ldr	r2, [pc, #72]	; (1d2c <cbvprintf_package+0x360>)
    1ce2:	4813      	ldr	r0, [pc, #76]	; (1d30 <cbvprintf_package+0x364>)
    1ce4:	f240 13f5 	movw	r3, #501	; 0x1f5
    1ce8:	f008 fa6c 	bl	a1c4 <assert_print>
    1cec:	4813      	ldr	r0, [pc, #76]	; (1d3c <cbvprintf_package+0x370>)
    1cee:	f008 fa69 	bl	a1c4 <assert_print>
    1cf2:	f240 11f5 	movw	r1, #501	; 0x1f5
    1cf6:	e7dc      	b.n	1cb2 <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    1cf8:	b315      	cbz	r5, 1d40 <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1cfa:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    1cfc:	f1bc 0f00 	cmp.w	ip, #0
    1d00:	d0e2      	beq.n	1cc8 <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1d02:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    1d06:	44ec      	add	ip, sp
    1d08:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1d0c:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    1d10:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    1d14:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    1d16:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    1d1a:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1d1c:	9005      	str	r0, [sp, #20]
    1d1e:	e6b4      	b.n	1a8a <cbvprintf_package+0xbe>
    1d20:	0000af38 	.word	0x0000af38
    1d24:	0000d2f8 	.word	0x0000d2f8
    1d28:	0000d0fe 	.word	0x0000d0fe
    1d2c:	0000b7e1 	.word	0x0000b7e1
    1d30:	0000b80f 	.word	0x0000b80f
    1d34:	0000b87c 	.word	0x0000b87c
    1d38:	0000b82c 	.word	0x0000b82c
    1d3c:	0000b84d 	.word	0x0000b84d
				} else if (is_ro || rws_pos_en) {
    1d40:	f1bc 0f00 	cmp.w	ip, #0
    1d44:	d101      	bne.n	1d4a <cbvprintf_package+0x37e>
    1d46:	9801      	ldr	r0, [sp, #4]
    1d48:	b108      	cbz	r0, 1d4e <cbvprintf_package+0x382>
					len += 1;
    1d4a:	3601      	adds	r6, #1
    1d4c:	e7e2      	b.n	1d14 <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1d4e:	4638      	mov	r0, r7
    1d50:	e9cd 2106 	strd	r2, r1, [sp, #24]
    1d54:	9305      	str	r3, [sp, #20]
    1d56:	f7ff f91b 	bl	f90 <strlen>
    1d5a:	3602      	adds	r6, #2
    1d5c:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    1d60:	9b05      	ldr	r3, [sp, #20]
    1d62:	4406      	add	r6, r0
    1d64:	e7d6      	b.n	1d14 <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    1d66:	4a38      	ldr	r2, [pc, #224]	; (1e48 <cbvprintf_package+0x47c>)
    1d68:	4938      	ldr	r1, [pc, #224]	; (1e4c <cbvprintf_package+0x480>)
    1d6a:	4839      	ldr	r0, [pc, #228]	; (1e50 <cbvprintf_package+0x484>)
    1d6c:	f240 2331 	movw	r3, #561	; 0x231
    1d70:	f008 fa28 	bl	a1c4 <assert_print>
    1d74:	4659      	mov	r1, fp
    1d76:	4837      	ldr	r0, [pc, #220]	; (1e54 <cbvprintf_package+0x488>)
    1d78:	f008 fa24 	bl	a1c4 <assert_print>
    1d7c:	f240 2131 	movw	r1, #561	; 0x231
    1d80:	e797      	b.n	1cb2 <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    1d82:	b91d      	cbnz	r5, 1d8c <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1d84:	f1a6 0408 	sub.w	r4, r6, #8
    1d88:	1860      	adds	r0, r4, r1
    1d8a:	e638      	b.n	19fe <cbvprintf_package+0x32>
	if (rws_pos_en) {
    1d8c:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1d8e:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    1d92:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    1d96:	b90b      	cbnz	r3, 1d9c <cbvprintf_package+0x3d0>
    1d98:	4608      	mov	r0, r1
    1d9a:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    1d9c:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    1da0:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    1da2:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    1da4:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1da8:	f1ba 0f00 	cmp.w	sl, #0
    1dac:	d006      	beq.n	1dbc <cbvprintf_package+0x3f0>
    1dae:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1db0:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    1db4:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1db8:	4562      	cmp	r2, ip
    1dba:	d109      	bne.n	1dd0 <cbvprintf_package+0x404>
    1dbc:	f10d 0820 	add.w	r8, sp, #32
    1dc0:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    1dc4:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    1dc8:	45c1      	cmp	r9, r8
    1dca:	d111      	bne.n	1df0 <cbvprintf_package+0x424>
	return BUF_OFFSET;
    1dcc:	1b60      	subs	r0, r4, r5
    1dce:	e616      	b.n	19fe <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1dd0:	f810 1b01 	ldrb.w	r1, [r0], #1
    1dd4:	060b      	lsls	r3, r1, #24
    1dd6:	d508      	bpl.n	1dea <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    1dd8:	eb04 080e 	add.w	r8, r4, lr
    1ddc:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1dde:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1de2:	f4ff ae0a 	bcc.w	19fa <cbvprintf_package+0x2e>
			*buf++ = pos;
    1de6:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1dea:	f10c 0c01 	add.w	ip, ip, #1
    1dee:	e7e3      	b.n	1db8 <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1df0:	f1ba 0f00 	cmp.w	sl, #0
    1df4:	d003      	beq.n	1dfe <cbvprintf_package+0x432>
    1df6:	f998 2000 	ldrsb.w	r2, [r8]
    1dfa:	2a00      	cmp	r2, #0
    1dfc:	db1c      	blt.n	1e38 <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    1dfe:	9b01      	ldr	r3, [sp, #4]
    1e00:	b9eb      	cbnz	r3, 1e3e <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1e02:	f898 2000 	ldrb.w	r2, [r8]
    1e06:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1e0a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1e0e:	4638      	mov	r0, r7
    1e10:	f7ff f8be 	bl	f90 <strlen>
    1e14:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1e16:	eb04 010b 	add.w	r1, r4, fp
    1e1a:	4411      	add	r1, r2
    1e1c:	428e      	cmp	r6, r1
    1e1e:	f4ff adec 	bcc.w	19fa <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1e22:	f898 1000 	ldrb.w	r1, [r8]
    1e26:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1e2a:	4639      	mov	r1, r7
    1e2c:	4620      	mov	r0, r4
    1e2e:	9202      	str	r2, [sp, #8]
    1e30:	f009 f83f 	bl	aeb2 <memcpy>
		buf += size;
    1e34:	9a02      	ldr	r2, [sp, #8]
    1e36:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1e38:	f108 0801 	add.w	r8, r8, #1
    1e3c:	e7c4      	b.n	1dc8 <cbvprintf_package+0x3fc>
			size = 0;
    1e3e:	2200      	movs	r2, #0
    1e40:	e7e9      	b.n	1e16 <cbvprintf_package+0x44a>
		return -EFAULT;
    1e42:	f06f 000d 	mvn.w	r0, #13
    1e46:	e5da      	b.n	19fe <cbvprintf_package+0x32>
    1e48:	0000b7e1 	.word	0x0000b7e1
    1e4c:	0000d0fe 	.word	0x0000d0fe
    1e50:	0000b80f 	.word	0x0000b80f
    1e54:	0000b867 	.word	0x0000b867

00001e58 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1e58:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1e5a:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1e5e:	2b03      	cmp	r3, #3
{
    1e60:	b510      	push	{r4, lr}
    1e62:	4604      	mov	r4, r0
	notify->result = res;
    1e64:	6081      	str	r1, [r0, #8]
	switch (method) {
    1e66:	d002      	beq.n	1e6e <sys_notify_finalize+0x16>
    1e68:	b12b      	cbz	r3, 1e76 <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    1e6a:	2000      	movs	r0, #0
    1e6c:	e000      	b.n	1e70 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1e6e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1e70:	2300      	movs	r3, #0
    1e72:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1e74:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    1e76:	4a05      	ldr	r2, [pc, #20]	; (1e8c <sys_notify_finalize+0x34>)
    1e78:	4905      	ldr	r1, [pc, #20]	; (1e90 <sys_notify_finalize+0x38>)
    1e7a:	4806      	ldr	r0, [pc, #24]	; (1e94 <sys_notify_finalize+0x3c>)
    1e7c:	2345      	movs	r3, #69	; 0x45
    1e7e:	f008 f9a1 	bl	a1c4 <assert_print>
    1e82:	4802      	ldr	r0, [pc, #8]	; (1e8c <sys_notify_finalize+0x34>)
    1e84:	2145      	movs	r1, #69	; 0x45
    1e86:	f008 f996 	bl	a1b6 <assert_post_action>
    1e8a:	e7ee      	b.n	1e6a <sys_notify_finalize+0x12>
    1e8c:	0000b893 	.word	0x0000b893
    1e90:	0000d0fe 	.word	0x0000d0fe
    1e94:	0000b80f 	.word	0x0000b80f

00001e98 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1e98:	4b01      	ldr	r3, [pc, #4]	; (1ea0 <__printk_hook_install+0x8>)
    1e9a:	6018      	str	r0, [r3, #0]
}
    1e9c:	4770      	bx	lr
    1e9e:	bf00      	nop
    1ea0:	20000000 	.word	0x20000000

00001ea4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ea8:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1eaa:	072b      	lsls	r3, r5, #28
{
    1eac:	4604      	mov	r4, r0
    1eae:	4691      	mov	r9, r2
	if (processing) {
    1eb0:	d469      	bmi.n	1f86 <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1eb2:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1eb4:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1eb8:	f000 81ee 	beq.w	2298 <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    1ebc:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    1ebe:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ec2:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1ec4:	f1b8 0f00 	cmp.w	r8, #0
    1ec8:	da7d      	bge.n	1fc6 <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1eca:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1ecc:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ece:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1ed2:	e9c4 2200 	strd	r2, r2, [r4]
    1ed6:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1eda:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1edc:	8ba3      	ldrh	r3, [r4, #28]
    1ede:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1ee2:	4555      	cmp	r5, sl
    1ee4:	f04f 0700 	mov.w	r7, #0
    1ee8:	f040 81a5 	bne.w	2236 <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1eec:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    1ef0:	2e00      	cmp	r6, #0
    1ef2:	f000 80f2 	beq.w	20da <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1ef6:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    1efa:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    1efe:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1f00:	4658      	mov	r0, fp
    1f02:	f005 fc0b 	bl	771c <z_spin_unlock_valid>
    1f06:	b968      	cbnz	r0, 1f24 <process_event+0x80>
    1f08:	4a93      	ldr	r2, [pc, #588]	; (2158 <process_event+0x2b4>)
    1f0a:	4994      	ldr	r1, [pc, #592]	; (215c <process_event+0x2b8>)
    1f0c:	4894      	ldr	r0, [pc, #592]	; (2160 <process_event+0x2bc>)
    1f0e:	23b9      	movs	r3, #185	; 0xb9
    1f10:	f008 f958 	bl	a1c4 <assert_print>
    1f14:	4893      	ldr	r0, [pc, #588]	; (2164 <process_event+0x2c0>)
    1f16:	4659      	mov	r1, fp
    1f18:	f008 f954 	bl	a1c4 <assert_print>
    1f1c:	488e      	ldr	r0, [pc, #568]	; (2158 <process_event+0x2b4>)
    1f1e:	21b9      	movs	r1, #185	; 0xb9
    1f20:	f008 f949 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1f24:	f389 8811 	msr	BASEPRI, r9
    1f28:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    1f2c:	f1ba 0f00 	cmp.w	sl, #0
    1f30:	f040 8188 	bne.w	2244 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    1f34:	2e00      	cmp	r6, #0
    1f36:	f040 819e 	bne.w	2276 <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    1f3a:	b117      	cbz	r7, 1f42 <process_event+0x9e>
				transit(mgr, transition_complete);
    1f3c:	498a      	ldr	r1, [pc, #552]	; (2168 <process_event+0x2c4>)
    1f3e:	4620      	mov	r0, r4
    1f40:	47b8      	blx	r7
	__asm__ volatile(
    1f42:	f04f 0320 	mov.w	r3, #32
    1f46:	f3ef 8911 	mrs	r9, BASEPRI
    1f4a:	f383 8812 	msr	BASEPRI_MAX, r3
    1f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f52:	4658      	mov	r0, fp
    1f54:	f005 fbd4 	bl	7700 <z_spin_lock_valid>
    1f58:	b968      	cbnz	r0, 1f76 <process_event+0xd2>
    1f5a:	4a7f      	ldr	r2, [pc, #508]	; (2158 <process_event+0x2b4>)
    1f5c:	4983      	ldr	r1, [pc, #524]	; (216c <process_event+0x2c8>)
    1f5e:	4880      	ldr	r0, [pc, #512]	; (2160 <process_event+0x2bc>)
    1f60:	238e      	movs	r3, #142	; 0x8e
    1f62:	f008 f92f 	bl	a1c4 <assert_print>
    1f66:	4882      	ldr	r0, [pc, #520]	; (2170 <process_event+0x2cc>)
    1f68:	4659      	mov	r1, fp
    1f6a:	f008 f92b 	bl	a1c4 <assert_print>
    1f6e:	487a      	ldr	r0, [pc, #488]	; (2158 <process_event+0x2b4>)
    1f70:	218e      	movs	r1, #142	; 0x8e
    1f72:	f008 f920 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    1f76:	4658      	mov	r0, fp
    1f78:	f005 fbe0 	bl	773c <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1f7c:	8ba3      	ldrh	r3, [r4, #28]
    1f7e:	f023 0308 	bic.w	r3, r3, #8
    1f82:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    1f84:	e05a      	b.n	203c <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    1f86:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1f88:	bf0c      	ite	eq
    1f8a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f8e:	f045 0520 	orrne.w	r5, r5, #32
    1f92:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1f94:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1f96:	4620      	mov	r0, r4
    1f98:	f005 fbc0 	bl	771c <z_spin_unlock_valid>
    1f9c:	b968      	cbnz	r0, 1fba <process_event+0x116>
    1f9e:	4a6e      	ldr	r2, [pc, #440]	; (2158 <process_event+0x2b4>)
    1fa0:	496e      	ldr	r1, [pc, #440]	; (215c <process_event+0x2b8>)
    1fa2:	486f      	ldr	r0, [pc, #444]	; (2160 <process_event+0x2bc>)
    1fa4:	23b9      	movs	r3, #185	; 0xb9
    1fa6:	f008 f90d 	bl	a1c4 <assert_print>
    1faa:	486e      	ldr	r0, [pc, #440]	; (2164 <process_event+0x2c0>)
    1fac:	4621      	mov	r1, r4
    1fae:	f008 f909 	bl	a1c4 <assert_print>
    1fb2:	4869      	ldr	r0, [pc, #420]	; (2158 <process_event+0x2b4>)
    1fb4:	21b9      	movs	r1, #185	; 0xb9
    1fb6:	f008 f8fe 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    1fba:	f389 8811 	msr	BASEPRI, r9
    1fbe:	f3bf 8f6f 	isb	sy
}
    1fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fc6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1fca:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1fcc:	2901      	cmp	r1, #1
    1fce:	d820      	bhi.n	2012 <process_event+0x16e>
	list->head = NULL;
    1fd0:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    1fd2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1fd4:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    1fd6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1fda:	d116      	bne.n	200a <process_event+0x166>
		*clients = mgr->clients;
    1fdc:	4632      	mov	r2, r6
    1fde:	e003      	b.n	1fe8 <process_event+0x144>
				mgr->refs += 1U;
    1fe0:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1fe2:	6812      	ldr	r2, [r2, #0]
    1fe4:	3101      	adds	r1, #1
    1fe6:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1fe8:	2a00      	cmp	r2, #0
    1fea:	d1f9      	bne.n	1fe0 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1fec:	f023 0307 	bic.w	r3, r3, #7
    1ff0:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ff4:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1ff6:	4620      	mov	r0, r4
    1ff8:	f007 ffa4 	bl	9f44 <process_recheck>
    1ffc:	2800      	cmp	r0, #0
    1ffe:	f43f af6d 	beq.w	1edc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2002:	f042 0220 	orr.w	r2, r2, #32
    2006:	83a2      	strh	r2, [r4, #28]
    2008:	e768      	b.n	1edc <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    200a:	f023 0307 	bic.w	r3, r3, #7
    200e:	b29a      	uxth	r2, r3
}
    2010:	e7f0      	b.n	1ff4 <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2012:	2a04      	cmp	r2, #4
    2014:	d11e      	bne.n	2054 <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2016:	f023 0307 	bic.w	r3, r3, #7
    201a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    201c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    201e:	4620      	mov	r0, r4
    2020:	f007 ff90 	bl	9f44 <process_recheck>
    2024:	b110      	cbz	r0, 202c <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    2026:	f042 0220 	orr.w	r2, r2, #32
    202a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    202c:	8ba3      	ldrh	r3, [r4, #28]
    202e:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    2032:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    2034:	4555      	cmp	r5, sl
    2036:	463e      	mov	r6, r7
    2038:	f040 80fd 	bne.w	2236 <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    203c:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    2040:	f01a 0f10 	tst.w	sl, #16
    2044:	f000 811f 	beq.w	2286 <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2048:	f02a 0310 	bic.w	r3, sl, #16
    204c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    204e:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    2052:	e734      	b.n	1ebe <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    2054:	4a47      	ldr	r2, [pc, #284]	; (2174 <process_event+0x2d0>)
    2056:	4948      	ldr	r1, [pc, #288]	; (2178 <process_event+0x2d4>)
    2058:	4841      	ldr	r0, [pc, #260]	; (2160 <process_event+0x2bc>)
    205a:	f240 131b 	movw	r3, #283	; 0x11b
    205e:	f008 f8b1 	bl	a1c4 <assert_print>
    2062:	4844      	ldr	r0, [pc, #272]	; (2174 <process_event+0x2d0>)
    2064:	f240 111b 	movw	r1, #283	; 0x11b
    2068:	f008 f8a5 	bl	a1b6 <assert_post_action>
    206c:	e7de      	b.n	202c <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    206e:	b15d      	cbz	r5, 2088 <process_event+0x1e4>
    2070:	4942      	ldr	r1, [pc, #264]	; (217c <process_event+0x2d8>)
    2072:	483b      	ldr	r0, [pc, #236]	; (2160 <process_event+0x2bc>)
    2074:	4a3f      	ldr	r2, [pc, #252]	; (2174 <process_event+0x2d0>)
    2076:	f44f 73ab 	mov.w	r3, #342	; 0x156
    207a:	f008 f8a3 	bl	a1c4 <assert_print>
    207e:	483d      	ldr	r0, [pc, #244]	; (2174 <process_event+0x2d0>)
    2080:	f44f 71ab 	mov.w	r1, #342	; 0x156
    2084:	f008 f897 	bl	a1b6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2088:	6823      	ldr	r3, [r4, #0]
    208a:	b95b      	cbnz	r3, 20a4 <process_event+0x200>
    208c:	493c      	ldr	r1, [pc, #240]	; (2180 <process_event+0x2dc>)
    208e:	4834      	ldr	r0, [pc, #208]	; (2160 <process_event+0x2bc>)
    2090:	4a38      	ldr	r2, [pc, #224]	; (2174 <process_event+0x2d0>)
    2092:	f240 1357 	movw	r3, #343	; 0x157
    2096:	f008 f895 	bl	a1c4 <assert_print>
    209a:	4836      	ldr	r0, [pc, #216]	; (2174 <process_event+0x2d0>)
    209c:	f240 1157 	movw	r1, #343	; 0x157
    20a0:	f008 f889 	bl	a1b6 <assert_post_action>
			transit = mgr->transitions->start;
    20a4:	6923      	ldr	r3, [r4, #16]
    20a6:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    20a8:	b95f      	cbnz	r7, 20c2 <process_event+0x21e>
    20aa:	4936      	ldr	r1, [pc, #216]	; (2184 <process_event+0x2e0>)
    20ac:	482c      	ldr	r0, [pc, #176]	; (2160 <process_event+0x2bc>)
    20ae:	4a31      	ldr	r2, [pc, #196]	; (2174 <process_event+0x2d0>)
    20b0:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    20b4:	f008 f886 	bl	a1c4 <assert_print>
    20b8:	482e      	ldr	r0, [pc, #184]	; (2174 <process_event+0x2d0>)
    20ba:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    20be:	f008 f87a 	bl	a1b6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20c2:	8ba3      	ldrh	r3, [r4, #28]
    20c4:	f023 0307 	bic.w	r3, r3, #7
    20c8:	f043 0306 	orr.w	r3, r3, #6
    20cc:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    20ce:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    20d0:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    20d2:	f040 80ad 	bne.w	2230 <process_event+0x38c>
		res = 0;
    20d6:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    20da:	f04f 0a00 	mov.w	sl, #0
    20de:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    20e0:	2f00      	cmp	r7, #0
    20e2:	f47f af08 	bne.w	1ef6 <process_event+0x52>
    20e6:	e7a9      	b.n	203c <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    20e8:	2d02      	cmp	r5, #2
    20ea:	d00b      	beq.n	2104 <process_event+0x260>
    20ec:	4926      	ldr	r1, [pc, #152]	; (2188 <process_event+0x2e4>)
    20ee:	481c      	ldr	r0, [pc, #112]	; (2160 <process_event+0x2bc>)
    20f0:	4a20      	ldr	r2, [pc, #128]	; (2174 <process_event+0x2d0>)
    20f2:	f240 135d 	movw	r3, #349	; 0x15d
    20f6:	f008 f865 	bl	a1c4 <assert_print>
    20fa:	481e      	ldr	r0, [pc, #120]	; (2174 <process_event+0x2d0>)
    20fc:	f240 115d 	movw	r1, #349	; 0x15d
    2100:	f008 f859 	bl	a1b6 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    2104:	8be3      	ldrh	r3, [r4, #30]
    2106:	b15b      	cbz	r3, 2120 <process_event+0x27c>
    2108:	4920      	ldr	r1, [pc, #128]	; (218c <process_event+0x2e8>)
    210a:	4815      	ldr	r0, [pc, #84]	; (2160 <process_event+0x2bc>)
    210c:	4a19      	ldr	r2, [pc, #100]	; (2174 <process_event+0x2d0>)
    210e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    2112:	f008 f857 	bl	a1c4 <assert_print>
    2116:	4817      	ldr	r0, [pc, #92]	; (2174 <process_event+0x2d0>)
    2118:	f44f 71af 	mov.w	r1, #350	; 0x15e
    211c:	f008 f84b 	bl	a1b6 <assert_post_action>
			transit = mgr->transitions->stop;
    2120:	6923      	ldr	r3, [r4, #16]
    2122:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2124:	b95f      	cbnz	r7, 213e <process_event+0x29a>
    2126:	4917      	ldr	r1, [pc, #92]	; (2184 <process_event+0x2e0>)
    2128:	480d      	ldr	r0, [pc, #52]	; (2160 <process_event+0x2bc>)
    212a:	4a12      	ldr	r2, [pc, #72]	; (2174 <process_event+0x2d0>)
    212c:	f240 1361 	movw	r3, #353	; 0x161
    2130:	f008 f848 	bl	a1c4 <assert_print>
    2134:	480f      	ldr	r0, [pc, #60]	; (2174 <process_event+0x2d0>)
    2136:	f240 1161 	movw	r1, #353	; 0x161
    213a:	f008 f83c 	bl	a1b6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    213e:	8ba3      	ldrh	r3, [r4, #28]
    2140:	f023 0307 	bic.w	r3, r3, #7
    2144:	f043 0304 	orr.w	r3, r3, #4
    2148:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    214a:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    214c:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    214e:	d0c2      	beq.n	20d6 <process_event+0x232>
    2150:	2600      	movs	r6, #0
		res = 0;
    2152:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2154:	2504      	movs	r5, #4
    2156:	e06e      	b.n	2236 <process_event+0x392>
    2158:	0000b959 	.word	0x0000b959
    215c:	0000b986 	.word	0x0000b986
    2160:	0000b80f 	.word	0x0000b80f
    2164:	0000b99d 	.word	0x0000b99d
    2168:	000022dd 	.word	0x000022dd
    216c:	0000b9b2 	.word	0x0000b9b2
    2170:	0000b9c7 	.word	0x0000b9c7
    2174:	0000b8b6 	.word	0x0000b8b6
    2178:	0000d0fe 	.word	0x0000d0fe
    217c:	0000b8d8 	.word	0x0000b8d8
    2180:	0000b8e4 	.word	0x0000b8e4
    2184:	0000b907 	.word	0x0000b907
    2188:	0000b91e 	.word	0x0000b91e
    218c:	0000b934 	.word	0x0000b934
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2190:	2d01      	cmp	r5, #1
    2192:	d00b      	beq.n	21ac <process_event+0x308>
    2194:	494b      	ldr	r1, [pc, #300]	; (22c4 <process_event+0x420>)
    2196:	484c      	ldr	r0, [pc, #304]	; (22c8 <process_event+0x424>)
    2198:	4a4c      	ldr	r2, [pc, #304]	; (22cc <process_event+0x428>)
    219a:	f44f 73b2 	mov.w	r3, #356	; 0x164
    219e:	f008 f811 	bl	a1c4 <assert_print>
    21a2:	484a      	ldr	r0, [pc, #296]	; (22cc <process_event+0x428>)
    21a4:	f44f 71b2 	mov.w	r1, #356	; 0x164
    21a8:	f008 f805 	bl	a1b6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    21ac:	6823      	ldr	r3, [r4, #0]
    21ae:	b95b      	cbnz	r3, 21c8 <process_event+0x324>
    21b0:	4947      	ldr	r1, [pc, #284]	; (22d0 <process_event+0x42c>)
    21b2:	4845      	ldr	r0, [pc, #276]	; (22c8 <process_event+0x424>)
    21b4:	4a45      	ldr	r2, [pc, #276]	; (22cc <process_event+0x428>)
    21b6:	f240 1365 	movw	r3, #357	; 0x165
    21ba:	f008 f803 	bl	a1c4 <assert_print>
    21be:	4843      	ldr	r0, [pc, #268]	; (22cc <process_event+0x428>)
    21c0:	f240 1165 	movw	r1, #357	; 0x165
    21c4:	f007 fff7 	bl	a1b6 <assert_post_action>
			transit = mgr->transitions->reset;
    21c8:	6923      	ldr	r3, [r4, #16]
    21ca:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    21cc:	b95f      	cbnz	r7, 21e6 <process_event+0x342>
    21ce:	4941      	ldr	r1, [pc, #260]	; (22d4 <process_event+0x430>)
    21d0:	483d      	ldr	r0, [pc, #244]	; (22c8 <process_event+0x424>)
    21d2:	4a3e      	ldr	r2, [pc, #248]	; (22cc <process_event+0x428>)
    21d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
    21d8:	f007 fff4 	bl	a1c4 <assert_print>
    21dc:	483b      	ldr	r0, [pc, #236]	; (22cc <process_event+0x428>)
    21de:	f44f 71b4 	mov.w	r1, #360	; 0x168
    21e2:	f007 ffe8 	bl	a1b6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    21e6:	8ba3      	ldrh	r3, [r4, #28]
    21e8:	f023 0307 	bic.w	r3, r3, #7
    21ec:	f043 0305 	orr.w	r3, r3, #5
    21f0:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    21f2:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    21f4:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    21f6:	f43f af6e 	beq.w	20d6 <process_event+0x232>
    21fa:	2600      	movs	r6, #0
		res = 0;
    21fc:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    21fe:	2505      	movs	r5, #5
    2200:	e019      	b.n	2236 <process_event+0x392>
			__ASSERT_NO_MSG(false);
    2202:	4a32      	ldr	r2, [pc, #200]	; (22cc <process_event+0x428>)
    2204:	4934      	ldr	r1, [pc, #208]	; (22d8 <process_event+0x434>)
    2206:	4830      	ldr	r0, [pc, #192]	; (22c8 <process_event+0x424>)
    2208:	f240 136b 	movw	r3, #363	; 0x16b
    220c:	f007 ffda 	bl	a1c4 <assert_print>
    2210:	482e      	ldr	r0, [pc, #184]	; (22cc <process_event+0x428>)
    2212:	f240 116b 	movw	r1, #363	; 0x16b
    2216:	f007 ffce 	bl	a1b6 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    221a:	8ba3      	ldrh	r3, [r4, #28]
    221c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2220:	42aa      	cmp	r2, r5
    2222:	f43f af0b 	beq.w	203c <process_event+0x198>
    2226:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2228:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    222a:	4637      	mov	r7, r6
		res = 0;
    222c:	46b0      	mov	r8, r6
    222e:	e002      	b.n	2236 <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    2230:	2600      	movs	r6, #0
		res = 0;
    2232:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2234:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    2236:	68a2      	ldr	r2, [r4, #8]
    2238:	2a00      	cmp	r2, #0
    223a:	f43f ae57 	beq.w	1eec <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    223e:	f04f 0a01 	mov.w	sl, #1
    2242:	e658      	b.n	1ef6 <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2244:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2246:	2900      	cmp	r1, #0
    2248:	f43f ae74 	beq.w	1f34 <process_event+0x90>
	return node->next;
    224c:	f8d1 9000 	ldr.w	r9, [r1]
    2250:	2900      	cmp	r1, #0
    2252:	f43f ae6f 	beq.w	1f34 <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    2256:	f8d1 a004 	ldr.w	sl, [r1, #4]
    225a:	4643      	mov	r3, r8
    225c:	462a      	mov	r2, r5
    225e:	4620      	mov	r0, r4
    2260:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2262:	f1b9 0f00 	cmp.w	r9, #0
    2266:	d004      	beq.n	2272 <process_event+0x3ce>
    2268:	f8d9 3000 	ldr.w	r3, [r9]
    226c:	4649      	mov	r1, r9
    226e:	4699      	mov	r9, r3
    2270:	e7ee      	b.n	2250 <process_event+0x3ac>
    2272:	464b      	mov	r3, r9
    2274:	e7fa      	b.n	226c <process_event+0x3c8>
    2276:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    2278:	4643      	mov	r3, r8
    227a:	462a      	mov	r2, r5
    227c:	4620      	mov	r0, r4
    227e:	6836      	ldr	r6, [r6, #0]
    2280:	f007 fe8c 	bl	9f9c <notify_one>
    2284:	e656      	b.n	1f34 <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2286:	f01a 0f20 	tst.w	sl, #32
    228a:	f43f ae83 	beq.w	1f94 <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    228e:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2292:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    2294:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    2298:	4620      	mov	r0, r4
    229a:	f007 fe53 	bl	9f44 <process_recheck>
		if (evt == EVT_NOP) {
    229e:	2800      	cmp	r0, #0
    22a0:	f43f ae78 	beq.w	1f94 <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    22a4:	3801      	subs	r0, #1
    22a6:	2804      	cmp	r0, #4
    22a8:	d8ab      	bhi.n	2202 <process_event+0x35e>
    22aa:	a301      	add	r3, pc, #4	; (adr r3, 22b0 <process_event+0x40c>)
    22ac:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    22b0:	00001ebd 	.word	0x00001ebd
    22b4:	00002203 	.word	0x00002203
    22b8:	0000206f 	.word	0x0000206f
    22bc:	000020e9 	.word	0x000020e9
    22c0:	00002191 	.word	0x00002191
    22c4:	0000b943 	.word	0x0000b943
    22c8:	0000b80f 	.word	0x0000b80f
    22cc:	0000b8b6 	.word	0x0000b8b6
    22d0:	0000b8e4 	.word	0x0000b8e4
    22d4:	0000b907 	.word	0x0000b907
    22d8:	0000d0fe 	.word	0x0000d0fe

000022dc <transition_complete>:
{
    22dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22de:	4604      	mov	r4, r0
    22e0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    22e2:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    22e6:	f04f 0320 	mov.w	r3, #32
    22ea:	f3ef 8711 	mrs	r7, BASEPRI
    22ee:	f383 8812 	msr	BASEPRI_MAX, r3
    22f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    22f6:	4630      	mov	r0, r6
    22f8:	f005 fa02 	bl	7700 <z_spin_lock_valid>
    22fc:	b968      	cbnz	r0, 231a <transition_complete+0x3e>
    22fe:	4a0c      	ldr	r2, [pc, #48]	; (2330 <transition_complete+0x54>)
    2300:	490c      	ldr	r1, [pc, #48]	; (2334 <transition_complete+0x58>)
    2302:	480d      	ldr	r0, [pc, #52]	; (2338 <transition_complete+0x5c>)
    2304:	238e      	movs	r3, #142	; 0x8e
    2306:	f007 ff5d 	bl	a1c4 <assert_print>
    230a:	480c      	ldr	r0, [pc, #48]	; (233c <transition_complete+0x60>)
    230c:	4631      	mov	r1, r6
    230e:	f007 ff59 	bl	a1c4 <assert_print>
    2312:	4807      	ldr	r0, [pc, #28]	; (2330 <transition_complete+0x54>)
    2314:	218e      	movs	r1, #142	; 0x8e
    2316:	f007 ff4e 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    231a:	4630      	mov	r0, r6
    231c:	f005 fa0e 	bl	773c <z_spin_lock_set_owner>
	mgr->last_res = res;
    2320:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2322:	463a      	mov	r2, r7
    2324:	4620      	mov	r0, r4
    2326:	2101      	movs	r1, #1
}
    2328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    232c:	f7ff bdba 	b.w	1ea4 <process_event>
    2330:	0000b959 	.word	0x0000b959
    2334:	0000b9b2 	.word	0x0000b9b2
    2338:	0000b80f 	.word	0x0000b80f
    233c:	0000b9c7 	.word	0x0000b9c7

00002340 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2344:	4604      	mov	r4, r0
    2346:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2348:	f007 fe18 	bl	9f7c <validate_args>

	if (rv < 0) {
    234c:	1e05      	subs	r5, r0, #0
    234e:	db78      	blt.n	2442 <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2350:	f104 0914 	add.w	r9, r4, #20
    2354:	f04f 0320 	mov.w	r3, #32
    2358:	f3ef 8a11 	mrs	sl, BASEPRI
    235c:	f383 8812 	msr	BASEPRI_MAX, r3
    2360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2364:	4648      	mov	r0, r9
    2366:	f005 f9cb 	bl	7700 <z_spin_lock_valid>
    236a:	b968      	cbnz	r0, 2388 <onoff_request+0x48>
    236c:	4a39      	ldr	r2, [pc, #228]	; (2454 <onoff_request+0x114>)
    236e:	493a      	ldr	r1, [pc, #232]	; (2458 <onoff_request+0x118>)
    2370:	483a      	ldr	r0, [pc, #232]	; (245c <onoff_request+0x11c>)
    2372:	238e      	movs	r3, #142	; 0x8e
    2374:	f007 ff26 	bl	a1c4 <assert_print>
    2378:	4839      	ldr	r0, [pc, #228]	; (2460 <onoff_request+0x120>)
    237a:	4649      	mov	r1, r9
    237c:	f007 ff22 	bl	a1c4 <assert_print>
    2380:	4834      	ldr	r0, [pc, #208]	; (2454 <onoff_request+0x114>)
    2382:	218e      	movs	r1, #142	; 0x8e
    2384:	f007 ff17 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    2388:	4648      	mov	r0, r9
    238a:	f005 f9d7 	bl	773c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    238e:	8be3      	ldrh	r3, [r4, #30]
    2390:	8ba6      	ldrh	r6, [r4, #28]
    2392:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2396:	4293      	cmp	r3, r2
    2398:	f006 0607 	and.w	r6, r6, #7
    239c:	d054      	beq.n	2448 <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    239e:	2e02      	cmp	r6, #2
    23a0:	d124      	bne.n	23ec <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    23a2:	3301      	adds	r3, #1
    23a4:	83e3      	strh	r3, [r4, #30]
	rv = state;
    23a6:	4635      	mov	r5, r6
		notify = true;
    23a8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    23ac:	4648      	mov	r0, r9
    23ae:	f005 f9b5 	bl	771c <z_spin_unlock_valid>
    23b2:	b968      	cbnz	r0, 23d0 <onoff_request+0x90>
    23b4:	4a27      	ldr	r2, [pc, #156]	; (2454 <onoff_request+0x114>)
    23b6:	492b      	ldr	r1, [pc, #172]	; (2464 <onoff_request+0x124>)
    23b8:	4828      	ldr	r0, [pc, #160]	; (245c <onoff_request+0x11c>)
    23ba:	23b9      	movs	r3, #185	; 0xb9
    23bc:	f007 ff02 	bl	a1c4 <assert_print>
    23c0:	4829      	ldr	r0, [pc, #164]	; (2468 <onoff_request+0x128>)
    23c2:	4649      	mov	r1, r9
    23c4:	f007 fefe 	bl	a1c4 <assert_print>
    23c8:	4822      	ldr	r0, [pc, #136]	; (2454 <onoff_request+0x114>)
    23ca:	21b9      	movs	r1, #185	; 0xb9
    23cc:	f007 fef3 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    23d0:	f38a 8811 	msr	BASEPRI, sl
    23d4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    23d8:	f1b8 0f00 	cmp.w	r8, #0
    23dc:	d031      	beq.n	2442 <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    23de:	2300      	movs	r3, #0
    23e0:	4632      	mov	r2, r6
    23e2:	4639      	mov	r1, r7
    23e4:	4620      	mov	r0, r4
    23e6:	f007 fdd9 	bl	9f9c <notify_one>
    23ea:	e02a      	b.n	2442 <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    23ec:	2e06      	cmp	r6, #6
    23ee:	d80e      	bhi.n	240e <onoff_request+0xce>
    23f0:	e8df f006 	tbb	[pc, r6]
    23f4:	0d0d1904 	.word	0x0d0d1904
    23f8:	2d04      	.short	0x2d04
    23fa:	04          	.byte	0x04
    23fb:	00          	.byte	0x00
	parent->next = child;
    23fc:	2300      	movs	r3, #0
    23fe:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2400:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2402:	b9ab      	cbnz	r3, 2430 <onoff_request+0xf0>
	list->head = node;
    2404:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2408:	b1ae      	cbz	r6, 2436 <onoff_request+0xf6>
	rv = state;
    240a:	4635      	mov	r5, r6
    240c:	e00d      	b.n	242a <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    240e:	4917      	ldr	r1, [pc, #92]	; (246c <onoff_request+0x12c>)
    2410:	4812      	ldr	r0, [pc, #72]	; (245c <onoff_request+0x11c>)
    2412:	4a17      	ldr	r2, [pc, #92]	; (2470 <onoff_request+0x130>)
    2414:	f240 13c9 	movw	r3, #457	; 0x1c9
    2418:	f007 fed4 	bl	a1c4 <assert_print>
    241c:	4814      	ldr	r0, [pc, #80]	; (2470 <onoff_request+0x130>)
    241e:	f240 11c9 	movw	r1, #457	; 0x1c9
    2422:	f007 fec8 	bl	a1b6 <assert_post_action>
		rv = -EIO;
    2426:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    242a:	f04f 0800 	mov.w	r8, #0
    242e:	e7bd      	b.n	23ac <onoff_request+0x6c>
	parent->next = child;
    2430:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2432:	6067      	str	r7, [r4, #4]
}
    2434:	e7e8      	b.n	2408 <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    2436:	4652      	mov	r2, sl
    2438:	2102      	movs	r1, #2
    243a:	4620      	mov	r0, r4
    243c:	f7ff fd32 	bl	1ea4 <process_event>
    2440:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    2442:	4628      	mov	r0, r5
    2444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    2448:	f06f 050a 	mvn.w	r5, #10
    244c:	e7ed      	b.n	242a <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    244e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2452:	e7ea      	b.n	242a <onoff_request+0xea>
    2454:	0000b959 	.word	0x0000b959
    2458:	0000b9b2 	.word	0x0000b9b2
    245c:	0000b80f 	.word	0x0000b80f
    2460:	0000b9c7 	.word	0x0000b9c7
    2464:	0000b986 	.word	0x0000b986
    2468:	0000b99d 	.word	0x0000b99d
    246c:	0000b943 	.word	0x0000b943
    2470:	0000b8b6 	.word	0x0000b8b6

00002474 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    2474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2478:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    247c:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    2480:	6806      	ldr	r6, [r0, #0]
{
    2482:	460f      	mov	r7, r1
    2484:	4614      	mov	r4, r2
	if (align != rew) {
    2486:	d011      	beq.n	24ac <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    2488:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    248c:	ea13 0f09 	tst.w	r3, r9
    2490:	d113      	bne.n	24ba <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
    2492:	427b      	negs	r3, r7
    2494:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
    2496:	2b04      	cmp	r3, #4
    2498:	461a      	mov	r2, r3
    249a:	464f      	mov	r7, r9
    249c:	bf28      	it	cs
    249e:	2204      	movcs	r2, #4
	rew = align & -align;
    24a0:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    24a2:	b9e4      	cbnz	r4, 24de <sys_heap_aligned_alloc+0x6a>
		return NULL;
    24a4:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    24a6:	4628      	mov	r0, r5
    24a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    24ac:	2904      	cmp	r1, #4
    24ae:	d814      	bhi.n	24da <sys_heap_aligned_alloc+0x66>
}
    24b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    24b4:	4611      	mov	r1, r2
    24b6:	f007 be3e 	b.w	a136 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    24ba:	4a2c      	ldr	r2, [pc, #176]	; (256c <sys_heap_aligned_alloc+0xf8>)
    24bc:	492c      	ldr	r1, [pc, #176]	; (2570 <sys_heap_aligned_alloc+0xfc>)
    24be:	482d      	ldr	r0, [pc, #180]	; (2574 <sys_heap_aligned_alloc+0x100>)
    24c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
    24c4:	f007 fe7e 	bl	a1c4 <assert_print>
    24c8:	482b      	ldr	r0, [pc, #172]	; (2578 <sys_heap_aligned_alloc+0x104>)
    24ca:	f007 fe7b 	bl	a1c4 <assert_print>
    24ce:	4827      	ldr	r0, [pc, #156]	; (256c <sys_heap_aligned_alloc+0xf8>)
    24d0:	f44f 71a0 	mov.w	r1, #320	; 0x140
    24d4:	f007 fe6f 	bl	a1b6 <assert_post_action>
    24d8:	e7db      	b.n	2492 <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
    24da:	2204      	movs	r2, #4
    24dc:	e7e1      	b.n	24a2 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    24de:	68b3      	ldr	r3, [r6, #8]
    24e0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    24e4:	d9de      	bls.n	24a4 <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    24e6:	f104 010b 	add.w	r1, r4, #11
    24ea:	4439      	add	r1, r7
    24ec:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    24ee:	08c9      	lsrs	r1, r1, #3
    24f0:	4630      	mov	r0, r6
    24f2:	f007 fdcf 	bl	a094 <alloc_chunk>
	if (c0 == 0) {
    24f6:	4680      	mov	r8, r0
    24f8:	2800      	cmp	r0, #0
    24fa:	d0d3      	beq.n	24a4 <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    24fc:	f109 0504 	add.w	r5, r9, #4
    2500:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    2504:	1e7b      	subs	r3, r7, #1
    2506:	4435      	add	r5, r6
    2508:	441d      	add	r5, r3
    250a:	427f      	negs	r7, r7
    250c:	403d      	ands	r5, r7
    250e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2512:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2514:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2516:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2518:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    251a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    251e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    2520:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2524:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    2528:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    252c:	d208      	bcs.n	2540 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    252e:	4601      	mov	r1, r0
    2530:	463a      	mov	r2, r7
    2532:	4630      	mov	r0, r6
    2534:	f007 fde5 	bl	a102 <split_chunks>
		free_list_add(h, c0);
    2538:	4641      	mov	r1, r8
    253a:	4630      	mov	r0, r6
    253c:	f007 fd66 	bl	a00c <free_list_add>
	return c + chunk_size(h, c);
    2540:	4639      	mov	r1, r7
    2542:	4630      	mov	r0, r6
    2544:	f007 fd5d 	bl	a002 <chunk_size>
    2548:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    254a:	4284      	cmp	r4, r0
    254c:	d207      	bcs.n	255e <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    254e:	4630      	mov	r0, r6
    2550:	4622      	mov	r2, r4
    2552:	f007 fdd6 	bl	a102 <split_chunks>
		free_list_add(h, c_end);
    2556:	4621      	mov	r1, r4
    2558:	4630      	mov	r0, r6
    255a:	f007 fd57 	bl	a00c <free_list_add>
	void *cmem = &buf[c];
    255e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2562:	8873      	ldrh	r3, [r6, #2]
    2564:	f043 0301 	orr.w	r3, r3, #1
    2568:	8073      	strh	r3, [r6, #2]
    256a:	e79c      	b.n	24a6 <sys_heap_aligned_alloc+0x32>
    256c:	0000b9df 	.word	0x0000b9df
    2570:	0000baab 	.word	0x0000baab
    2574:	0000b80f 	.word	0x0000b80f
    2578:	0000bac6 	.word	0x0000bac6

0000257c <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    257c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    2580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2584:	4604      	mov	r4, r0
    2586:	460e      	mov	r6, r1
    2588:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    258a:	d36c      	bcc.n	2666 <sys_heap_init+0xea>
    258c:	493d      	ldr	r1, [pc, #244]	; (2684 <sys_heap_init+0x108>)
    258e:	4a3e      	ldr	r2, [pc, #248]	; (2688 <sys_heap_init+0x10c>)
    2590:	483e      	ldr	r0, [pc, #248]	; (268c <sys_heap_init+0x110>)
    2592:	f240 13e3 	movw	r3, #483	; 0x1e3
    2596:	f007 fe15 	bl	a1c4 <assert_print>
    259a:	483d      	ldr	r0, [pc, #244]	; (2690 <sys_heap_init+0x114>)
    259c:	f007 fe12 	bl	a1c4 <assert_print>
    25a0:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    25a4:	4838      	ldr	r0, [pc, #224]	; (2688 <sys_heap_init+0x10c>)
    25a6:	f007 fe06 	bl	a1b6 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    25aa:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    25ac:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    25ae:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    25b0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    25b4:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    25b8:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    25ba:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    25bc:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    25c0:	d80e      	bhi.n	25e0 <sys_heap_init+0x64>
    25c2:	4934      	ldr	r1, [pc, #208]	; (2694 <sys_heap_init+0x118>)
    25c4:	4a30      	ldr	r2, [pc, #192]	; (2688 <sys_heap_init+0x10c>)
    25c6:	4831      	ldr	r0, [pc, #196]	; (268c <sys_heap_init+0x110>)
    25c8:	f240 13f3 	movw	r3, #499	; 0x1f3
    25cc:	f007 fdfa 	bl	a1c4 <assert_print>
    25d0:	4831      	ldr	r0, [pc, #196]	; (2698 <sys_heap_init+0x11c>)
    25d2:	f007 fdf7 	bl	a1c4 <assert_print>
    25d6:	482c      	ldr	r0, [pc, #176]	; (2688 <sys_heap_init+0x10c>)
    25d8:	f240 11f3 	movw	r1, #499	; 0x1f3
    25dc:	f007 fdeb 	bl	a1b6 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    25e0:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    25e2:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    25e6:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    25ea:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    25ee:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    25f0:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    25f2:	2300      	movs	r3, #0
    25f4:	08e4      	lsrs	r4, r4, #3
    25f6:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    25f8:	1c63      	adds	r3, r4, #1
    25fa:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    25fc:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    25fe:	d90e      	bls.n	261e <sys_heap_init+0xa2>
    2600:	4926      	ldr	r1, [pc, #152]	; (269c <sys_heap_init+0x120>)
    2602:	4a21      	ldr	r2, [pc, #132]	; (2688 <sys_heap_init+0x10c>)
    2604:	4821      	ldr	r0, [pc, #132]	; (268c <sys_heap_init+0x110>)
    2606:	f44f 7301 	mov.w	r3, #516	; 0x204
    260a:	f007 fddb 	bl	a1c4 <assert_print>
    260e:	4822      	ldr	r0, [pc, #136]	; (2698 <sys_heap_init+0x11c>)
    2610:	f007 fdd8 	bl	a1c4 <assert_print>
    2614:	481c      	ldr	r0, [pc, #112]	; (2688 <sys_heap_init+0x10c>)
    2616:	f44f 7101 	mov.w	r1, #516	; 0x204
    261a:	f007 fdcc 	bl	a1b6 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    261e:	f105 030c 	add.w	r3, r5, #12
    2622:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    2626:	2200      	movs	r2, #0
    2628:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    262c:	4543      	cmp	r3, r8
    262e:	d1fb      	bne.n	2628 <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2630:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2632:	f043 0301 	orr.w	r3, r3, #1
    2636:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    2638:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    263c:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    263e:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    2640:	802a      	strh	r2, [r5, #0]
    2642:	8048      	strh	r0, [r1, #2]
    2644:	19a9      	adds	r1, r5, r6
    2646:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    264a:	804a      	strh	r2, [r1, #2]
    264c:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    264e:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2652:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2654:	885a      	ldrh	r2, [r3, #2]
    2656:	f042 0201 	orr.w	r2, r2, #1
    265a:	4628      	mov	r0, r5
    265c:	805a      	strh	r2, [r3, #2]
}
    265e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    2662:	f007 bcd3 	b.w	a00c <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2666:	2a04      	cmp	r2, #4
    2668:	d89f      	bhi.n	25aa <sys_heap_init+0x2e>
    266a:	490d      	ldr	r1, [pc, #52]	; (26a0 <sys_heap_init+0x124>)
    266c:	4a06      	ldr	r2, [pc, #24]	; (2688 <sys_heap_init+0x10c>)
    266e:	4807      	ldr	r0, [pc, #28]	; (268c <sys_heap_init+0x110>)
    2670:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2674:	f007 fda6 	bl	a1c4 <assert_print>
    2678:	4807      	ldr	r0, [pc, #28]	; (2698 <sys_heap_init+0x11c>)
    267a:	f007 fda3 	bl	a1c4 <assert_print>
    267e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2682:	e78f      	b.n	25a4 <sys_heap_init+0x28>
    2684:	0000bae3 	.word	0x0000bae3
    2688:	0000b9df 	.word	0x0000b9df
    268c:	0000b80f 	.word	0x0000b80f
    2690:	0000baf9 	.word	0x0000baf9
    2694:	0000bb4a 	.word	0x0000bb4a
    2698:	0000bb31 	.word	0x0000bb31
    269c:	0000bb73 	.word	0x0000bb73
    26a0:	0000bb10 	.word	0x0000bb10

000026a4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    26a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    26a6:	4e09      	ldr	r6, [pc, #36]	; (26cc <extract_decimal+0x28>)
    26a8:	6801      	ldr	r1, [r0, #0]
{
    26aa:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    26ac:	270a      	movs	r7, #10
	size_t val = 0;
    26ae:	2000      	movs	r0, #0
    26b0:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    26b2:	3101      	adds	r1, #1
    26b4:	781c      	ldrb	r4, [r3, #0]
    26b6:	5d35      	ldrb	r5, [r6, r4]
    26b8:	076d      	lsls	r5, r5, #29
    26ba:	d401      	bmi.n	26c0 <extract_decimal+0x1c>
	}
	*str = sp;
    26bc:	6013      	str	r3, [r2, #0]
	return val;
}
    26be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    26c0:	fb07 4300 	mla	r3, r7, r0, r4
    26c4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    26c8:	e7f2      	b.n	26b0 <extract_decimal+0xc>
    26ca:	bf00      	nop
    26cc:	0000d1f6 	.word	0x0000d1f6

000026d0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    26d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26d4:	4615      	mov	r5, r2
    26d6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    26d8:	78d3      	ldrb	r3, [r2, #3]
    26da:	4a22      	ldr	r2, [pc, #136]	; (2764 <encode_uint+0x94>)
    26dc:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    26e0:	2b6f      	cmp	r3, #111	; 0x6f
{
    26e2:	4680      	mov	r8, r0
    26e4:	460f      	mov	r7, r1
    26e6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    26ea:	d029      	beq.n	2740 <encode_uint+0x70>
    26ec:	d824      	bhi.n	2738 <encode_uint+0x68>
		return 10;
    26ee:	2b58      	cmp	r3, #88	; 0x58
    26f0:	bf0c      	ite	eq
    26f2:	2610      	moveq	r6, #16
    26f4:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    26f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    26fa:	4632      	mov	r2, r6
    26fc:	2300      	movs	r3, #0
    26fe:	4640      	mov	r0, r8
    2700:	4639      	mov	r1, r7
    2702:	f7fe fa49 	bl	b98 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    2706:	2a09      	cmp	r2, #9
    2708:	b2d4      	uxtb	r4, r2
    270a:	d81e      	bhi.n	274a <encode_uint+0x7a>
    270c:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    270e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2710:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    2712:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2716:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    271a:	d301      	bcc.n	2720 <encode_uint+0x50>
    271c:	45d1      	cmp	r9, sl
    271e:	d811      	bhi.n	2744 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2720:	782b      	ldrb	r3, [r5, #0]
    2722:	069b      	lsls	r3, r3, #26
    2724:	d505      	bpl.n	2732 <encode_uint+0x62>
		if (radix == 8) {
    2726:	2e08      	cmp	r6, #8
    2728:	d115      	bne.n	2756 <encode_uint+0x86>
			conv->altform_0 = true;
    272a:	78ab      	ldrb	r3, [r5, #2]
    272c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2730:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    2732:	4648      	mov	r0, r9
    2734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    2738:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    273c:	2b70      	cmp	r3, #112	; 0x70
    273e:	e7d7      	b.n	26f0 <encode_uint+0x20>
	switch (specifier) {
    2740:	2608      	movs	r6, #8
    2742:	e7d8      	b.n	26f6 <encode_uint+0x26>
		value /= radix;
    2744:	4680      	mov	r8, r0
    2746:	460f      	mov	r7, r1
    2748:	e7d7      	b.n	26fa <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    274a:	f1bb 0f01 	cmp.w	fp, #1
    274e:	bf0c      	ite	eq
    2750:	3437      	addeq	r4, #55	; 0x37
    2752:	3457      	addne	r4, #87	; 0x57
    2754:	e7db      	b.n	270e <encode_uint+0x3e>
		} else if (radix == 16) {
    2756:	2e10      	cmp	r6, #16
    2758:	d1eb      	bne.n	2732 <encode_uint+0x62>
			conv->altform_0c = true;
    275a:	78ab      	ldrb	r3, [r5, #2]
    275c:	f043 0310 	orr.w	r3, r3, #16
    2760:	e7e6      	b.n	2730 <encode_uint+0x60>
    2762:	bf00      	nop
    2764:	0000d1f6 	.word	0x0000d1f6

00002768 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    276c:	b097      	sub	sp, #92	; 0x5c
    276e:	4682      	mov	sl, r0
    2770:	9103      	str	r1, [sp, #12]
    2772:	4617      	mov	r7, r2
    2774:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2776:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2778:	7838      	ldrb	r0, [r7, #0]
    277a:	b908      	cbnz	r0, 2780 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    277c:	4628      	mov	r0, r5
    277e:	e34a      	b.n	2e16 <cbvprintf+0x6ae>
			OUTC(*fp++);
    2780:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2782:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2784:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    2786:	d006      	beq.n	2796 <cbvprintf+0x2e>
			OUTC('%');
    2788:	9903      	ldr	r1, [sp, #12]
    278a:	47d0      	blx	sl
    278c:	2800      	cmp	r0, #0
    278e:	f2c0 8342 	blt.w	2e16 <cbvprintf+0x6ae>
    2792:	3501      	adds	r5, #1
		if (bps == NULL) {
    2794:	e1f9      	b.n	2b8a <cbvprintf+0x422>
		} state = {
    2796:	2218      	movs	r2, #24
    2798:	2100      	movs	r1, #0
    279a:	a810      	add	r0, sp, #64	; 0x40
    279c:	f008 fbaa 	bl	aef4 <memset>
	if (*sp == '%') {
    27a0:	787b      	ldrb	r3, [r7, #1]
    27a2:	2b25      	cmp	r3, #37	; 0x25
    27a4:	f000 80a3 	beq.w	28ee <cbvprintf+0x186>
    27a8:	2300      	movs	r3, #0
    27aa:	1c79      	adds	r1, r7, #1
    27ac:	4698      	mov	r8, r3
    27ae:	469e      	mov	lr, r3
    27b0:	469c      	mov	ip, r3
    27b2:	4618      	mov	r0, r3
    27b4:	460e      	mov	r6, r1
		switch (*sp) {
    27b6:	f811 2b01 	ldrb.w	r2, [r1], #1
    27ba:	2a2b      	cmp	r2, #43	; 0x2b
    27bc:	f000 80c6 	beq.w	294c <cbvprintf+0x1e4>
    27c0:	f200 80bd 	bhi.w	293e <cbvprintf+0x1d6>
    27c4:	2a20      	cmp	r2, #32
    27c6:	f000 80c4 	beq.w	2952 <cbvprintf+0x1ea>
    27ca:	2a23      	cmp	r2, #35	; 0x23
    27cc:	f000 80c4 	beq.w	2958 <cbvprintf+0x1f0>
    27d0:	b12b      	cbz	r3, 27de <cbvprintf+0x76>
    27d2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    27d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    27da:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    27de:	f1b8 0f00 	cmp.w	r8, #0
    27e2:	d005      	beq.n	27f0 <cbvprintf+0x88>
    27e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    27e8:	f043 0320 	orr.w	r3, r3, #32
    27ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    27f0:	f1be 0f00 	cmp.w	lr, #0
    27f4:	d005      	beq.n	2802 <cbvprintf+0x9a>
    27f6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    27fa:	f043 0310 	orr.w	r3, r3, #16
    27fe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2802:	f1bc 0f00 	cmp.w	ip, #0
    2806:	d005      	beq.n	2814 <cbvprintf+0xac>
    2808:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    280c:	f043 0308 	orr.w	r3, r3, #8
    2810:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2814:	b128      	cbz	r0, 2822 <cbvprintf+0xba>
    2816:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    281a:	f043 0304 	orr.w	r3, r3, #4
    281e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2822:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2826:	f003 0144 	and.w	r1, r3, #68	; 0x44
    282a:	2944      	cmp	r1, #68	; 0x44
    282c:	d103      	bne.n	2836 <cbvprintf+0xce>
		conv->flag_zero = false;
    282e:	f36f 1386 	bfc	r3, #6, #1
    2832:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    2836:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    283a:	9609      	str	r6, [sp, #36]	; 0x24
    283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    2840:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2842:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2846:	f040 808c 	bne.w	2962 <cbvprintf+0x1fa>
		conv->width_star = true;
    284a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    284e:	f043 0301 	orr.w	r3, r3, #1
    2852:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    2856:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    2858:	781a      	ldrb	r2, [r3, #0]
    285a:	2a2e      	cmp	r2, #46	; 0x2e
    285c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2860:	bf0c      	ite	eq
    2862:	2101      	moveq	r1, #1
    2864:	2100      	movne	r1, #0
    2866:	f361 0241 	bfi	r2, r1, #1, #1
    286a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    286e:	d10c      	bne.n	288a <cbvprintf+0x122>
	++sp;
    2870:	1c5a      	adds	r2, r3, #1
    2872:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    2874:	785a      	ldrb	r2, [r3, #1]
    2876:	2a2a      	cmp	r2, #42	; 0x2a
    2878:	f040 8083 	bne.w	2982 <cbvprintf+0x21a>
		conv->prec_star = true;
    287c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2880:	f042 0204 	orr.w	r2, r2, #4
    2884:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    2888:	3302      	adds	r3, #2
	switch (*sp) {
    288a:	781a      	ldrb	r2, [r3, #0]
    288c:	2a6c      	cmp	r2, #108	; 0x6c
    288e:	f000 80a4 	beq.w	29da <cbvprintf+0x272>
    2892:	f200 8086 	bhi.w	29a2 <cbvprintf+0x23a>
    2896:	2a68      	cmp	r2, #104	; 0x68
    2898:	f000 808c 	beq.w	29b4 <cbvprintf+0x24c>
    289c:	2a6a      	cmp	r2, #106	; 0x6a
    289e:	f000 80a5 	beq.w	29ec <cbvprintf+0x284>
    28a2:	2a4c      	cmp	r2, #76	; 0x4c
    28a4:	f000 80aa 	beq.w	29fc <cbvprintf+0x294>
	conv->specifier = *sp++;
    28a8:	461a      	mov	r2, r3
    28aa:	f812 3b01 	ldrb.w	r3, [r2], #1
    28ae:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    28b0:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    28b2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    28b6:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    28ba:	f200 8117 	bhi.w	2aec <cbvprintf+0x384>
    28be:	2b6d      	cmp	r3, #109	; 0x6d
    28c0:	f200 80a9 	bhi.w	2a16 <cbvprintf+0x2ae>
    28c4:	2b69      	cmp	r3, #105	; 0x69
    28c6:	f200 8111 	bhi.w	2aec <cbvprintf+0x384>
    28ca:	2b57      	cmp	r3, #87	; 0x57
    28cc:	f200 80be 	bhi.w	2a4c <cbvprintf+0x2e4>
    28d0:	2b41      	cmp	r3, #65	; 0x41
    28d2:	d003      	beq.n	28dc <cbvprintf+0x174>
    28d4:	3b45      	subs	r3, #69	; 0x45
    28d6:	2b02      	cmp	r3, #2
    28d8:	f200 8108 	bhi.w	2aec <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    28dc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    28e0:	2204      	movs	r2, #4
    28e2:	f362 0302 	bfi	r3, r2, #0, #3
    28e6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    28ea:	2301      	movs	r3, #1
			break;
    28ec:	e0ca      	b.n	2a84 <cbvprintf+0x31c>
		conv->specifier = *sp++;
    28ee:	1cba      	adds	r2, r7, #2
    28f0:	9204      	str	r2, [sp, #16]
    28f2:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    28f6:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    28fa:	07da      	lsls	r2, r3, #31
    28fc:	f140 80fd 	bpl.w	2afa <cbvprintf+0x392>
			width = va_arg(ap, int);
    2900:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    2904:	f1b9 0f00 	cmp.w	r9, #0
    2908:	da07      	bge.n	291a <cbvprintf+0x1b2>
				conv->flag_dash = true;
    290a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    290e:	f042 0204 	orr.w	r2, r2, #4
    2912:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2916:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    291a:	075e      	lsls	r6, r3, #29
    291c:	f140 80f6 	bpl.w	2b0c <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
    2920:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    2924:	f1bb 0f00 	cmp.w	fp, #0
    2928:	f280 80f5 	bge.w	2b16 <cbvprintf+0x3ae>
				conv->prec_present = false;
    292c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2930:	f36f 0341 	bfc	r3, #1, #1
    2934:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    2938:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    293c:	e0eb      	b.n	2b16 <cbvprintf+0x3ae>
		switch (*sp) {
    293e:	2a2d      	cmp	r2, #45	; 0x2d
    2940:	d00d      	beq.n	295e <cbvprintf+0x1f6>
    2942:	2a30      	cmp	r2, #48	; 0x30
    2944:	f47f af44 	bne.w	27d0 <cbvprintf+0x68>
    2948:	2301      	movs	r3, #1
	} while (loop);
    294a:	e733      	b.n	27b4 <cbvprintf+0x4c>
		switch (*sp) {
    294c:	f04f 0c01 	mov.w	ip, #1
    2950:	e730      	b.n	27b4 <cbvprintf+0x4c>
    2952:	f04f 0e01 	mov.w	lr, #1
    2956:	e72d      	b.n	27b4 <cbvprintf+0x4c>
    2958:	f04f 0801 	mov.w	r8, #1
    295c:	e72a      	b.n	27b4 <cbvprintf+0x4c>
    295e:	2001      	movs	r0, #1
    2960:	e728      	b.n	27b4 <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
    2962:	a809      	add	r0, sp, #36	; 0x24
    2964:	f7ff fe9e 	bl	26a4 <extract_decimal>
	if (sp != wp) {
    2968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    296a:	42b3      	cmp	r3, r6
    296c:	f43f af74 	beq.w	2858 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    2970:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    2974:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    2976:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    2978:	f360 0241 	bfi	r2, r0, #1, #1
    297c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2980:	e76a      	b.n	2858 <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
    2982:	a809      	add	r0, sp, #36	; 0x24
    2984:	f7ff fe8e 	bl	26a4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2988:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    298c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    298e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2992:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2996:	f362 0341 	bfi	r3, r2, #1, #1
    299a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    299e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29a0:	e773      	b.n	288a <cbvprintf+0x122>
	switch (*sp) {
    29a2:	2a74      	cmp	r2, #116	; 0x74
    29a4:	d026      	beq.n	29f4 <cbvprintf+0x28c>
    29a6:	2a7a      	cmp	r2, #122	; 0x7a
    29a8:	f47f af7e 	bne.w	28a8 <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
    29ac:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    29b0:	2106      	movs	r1, #6
    29b2:	e00c      	b.n	29ce <cbvprintf+0x266>
		if (*++sp == 'h') {
    29b4:	785a      	ldrb	r2, [r3, #1]
    29b6:	2a68      	cmp	r2, #104	; 0x68
    29b8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    29bc:	d106      	bne.n	29cc <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
    29be:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    29c0:	f361 02c6 	bfi	r2, r1, #3, #4
    29c4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    29c8:	3302      	adds	r3, #2
    29ca:	e76d      	b.n	28a8 <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
    29cc:	2102      	movs	r1, #2
    29ce:	f361 02c6 	bfi	r2, r1, #3, #4
    29d2:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    29d6:	3301      	adds	r3, #1
    29d8:	e766      	b.n	28a8 <cbvprintf+0x140>
		if (*++sp == 'l') {
    29da:	785a      	ldrb	r2, [r3, #1]
    29dc:	2a6c      	cmp	r2, #108	; 0x6c
    29de:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    29e2:	d101      	bne.n	29e8 <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
    29e4:	2104      	movs	r1, #4
    29e6:	e7eb      	b.n	29c0 <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
    29e8:	2103      	movs	r1, #3
    29ea:	e7f0      	b.n	29ce <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
    29ec:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    29f0:	2105      	movs	r1, #5
    29f2:	e7ec      	b.n	29ce <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
    29f4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    29f8:	2107      	movs	r1, #7
    29fa:	e7e8      	b.n	29ce <cbvprintf+0x266>
		conv->unsupported = true;
    29fc:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2a00:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2a04:	f022 0202 	bic.w	r2, r2, #2
    2a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2a0c:	f042 0202 	orr.w	r2, r2, #2
    2a10:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2a14:	e7df      	b.n	29d6 <cbvprintf+0x26e>
	switch (conv->specifier) {
    2a16:	3b6e      	subs	r3, #110	; 0x6e
    2a18:	b2d9      	uxtb	r1, r3
    2a1a:	2301      	movs	r3, #1
    2a1c:	408b      	lsls	r3, r1
    2a1e:	f240 4182 	movw	r1, #1154	; 0x482
    2a22:	420b      	tst	r3, r1
    2a24:	d138      	bne.n	2a98 <cbvprintf+0x330>
    2a26:	f013 0f24 	tst.w	r3, #36	; 0x24
    2a2a:	d152      	bne.n	2ad2 <cbvprintf+0x36a>
    2a2c:	07d8      	lsls	r0, r3, #31
    2a2e:	d55d      	bpl.n	2aec <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    2a30:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2a34:	2103      	movs	r1, #3
    2a36:	f361 0302 	bfi	r3, r1, #0, #3
    2a3a:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2a3e:	f002 0378 	and.w	r3, r2, #120	; 0x78
    2a42:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    2a46:	424b      	negs	r3, r1
    2a48:	414b      	adcs	r3, r1
    2a4a:	e01b      	b.n	2a84 <cbvprintf+0x31c>
	switch (conv->specifier) {
    2a4c:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    2a50:	b2c9      	uxtb	r1, r1
    2a52:	2001      	movs	r0, #1
    2a54:	fa00 f101 	lsl.w	r1, r0, r1
    2a58:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2a5c:	f47f af3e 	bne.w	28dc <cbvprintf+0x174>
    2a60:	f640 0601 	movw	r6, #2049	; 0x801
    2a64:	4231      	tst	r1, r6
    2a66:	d11d      	bne.n	2aa4 <cbvprintf+0x33c>
    2a68:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2a6c:	d03e      	beq.n	2aec <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    2a6e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2a72:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2a76:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2a7a:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    2a7c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2a80:	d034      	beq.n	2aec <cbvprintf+0x384>
	bool unsupported = false;
    2a82:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    2a84:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2a88:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2a8c:	430b      	orrs	r3, r1
    2a8e:	f363 0241 	bfi	r2, r3, #1, #1
    2a92:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2a96:	e72e      	b.n	28f6 <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    2a98:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2a9c:	2102      	movs	r1, #2
    2a9e:	f361 0302 	bfi	r3, r1, #0, #3
    2aa2:	e7e8      	b.n	2a76 <cbvprintf+0x30e>
    2aa4:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2aa8:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    2aaa:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2aae:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2ab2:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2ab4:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    2ab8:	bf02      	ittt	eq
    2aba:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    2abe:	f041 0101 	orreq.w	r1, r1, #1
    2ac2:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2ac6:	2b63      	cmp	r3, #99	; 0x63
    2ac8:	d1db      	bne.n	2a82 <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2aca:	1e13      	subs	r3, r2, #0
    2acc:	bf18      	it	ne
    2ace:	2301      	movne	r3, #1
    2ad0:	e7d8      	b.n	2a84 <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    2ad2:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2ad6:	2103      	movs	r1, #3
    2ad8:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    2adc:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2ae0:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    2ae4:	bf14      	ite	ne
    2ae6:	2301      	movne	r3, #1
    2ae8:	2300      	moveq	r3, #0
    2aea:	e7cb      	b.n	2a84 <cbvprintf+0x31c>
		conv->invalid = true;
    2aec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2af0:	f043 0301 	orr.w	r3, r3, #1
    2af4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    2af8:	e7c3      	b.n	2a82 <cbvprintf+0x31a>
		} else if (conv->width_present) {
    2afa:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2afe:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2b00:	bfb4      	ite	lt
    2b02:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
    2b06:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    2b0a:	e706      	b.n	291a <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
    2b0c:	0798      	lsls	r0, r3, #30
    2b0e:	f57f af13 	bpl.w	2938 <cbvprintf+0x1d0>
			precision = conv->prec_value;
    2b12:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    2b16:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    2b1a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2b1c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    2b20:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    2b24:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2b28:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2b2a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2b2e:	d133      	bne.n	2b98 <cbvprintf+0x430>
			switch (length_mod) {
    2b30:	1ecb      	subs	r3, r1, #3
    2b32:	2b04      	cmp	r3, #4
    2b34:	d804      	bhi.n	2b40 <cbvprintf+0x3d8>
    2b36:	e8df f003 	tbb	[pc, r3]
    2b3a:	4610      	.short	0x4610
    2b3c:	1046      	.short	0x1046
    2b3e:	10          	.byte	0x10
    2b3f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2b40:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2b42:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2b44:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2b48:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2b4c:	d10b      	bne.n	2b66 <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
    2b4e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2b52:	9310      	str	r3, [sp, #64]	; 0x40
    2b54:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    2b56:	9311      	str	r3, [sp, #68]	; 0x44
    2b58:	e007      	b.n	2b6a <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2b5a:	f854 3b04 	ldr.w	r3, [r4], #4
    2b5e:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    2b60:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    2b64:	e002      	b.n	2b6c <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
    2b66:	2902      	cmp	r1, #2
    2b68:	d011      	beq.n	2b8e <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
    2b6a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2b6c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2b70:	f013 0603 	ands.w	r6, r3, #3
    2b74:	d047      	beq.n	2c06 <cbvprintf+0x49e>
			OUTS(sp, fp);
    2b76:	9b04      	ldr	r3, [sp, #16]
    2b78:	9903      	ldr	r1, [sp, #12]
    2b7a:	463a      	mov	r2, r7
    2b7c:	4650      	mov	r0, sl
    2b7e:	f007 fb03 	bl	a188 <outs>
    2b82:	2800      	cmp	r0, #0
    2b84:	f2c0 8147 	blt.w	2e16 <cbvprintf+0x6ae>
    2b88:	4405      	add	r5, r0
			continue;
    2b8a:	9f04      	ldr	r7, [sp, #16]
    2b8c:	e5f4      	b.n	2778 <cbvprintf+0x10>
				value->sint = (short)value->sint;
    2b8e:	b21a      	sxth	r2, r3
    2b90:	9210      	str	r2, [sp, #64]	; 0x40
    2b92:	f343 33c0 	sbfx	r3, r3, #15, #1
    2b96:	e7de      	b.n	2b56 <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2b98:	2b02      	cmp	r3, #2
    2b9a:	d124      	bne.n	2be6 <cbvprintf+0x47e>
			switch (length_mod) {
    2b9c:	1ecb      	subs	r3, r1, #3
    2b9e:	2b04      	cmp	r3, #4
    2ba0:	d804      	bhi.n	2bac <cbvprintf+0x444>
    2ba2:	e8df f003 	tbb	[pc, r3]
    2ba6:	1018      	.short	0x1018
    2ba8:	1810      	.short	0x1810
    2baa:	18          	.byte	0x18
    2bab:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2bac:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2bae:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2bb2:	f04f 0200 	mov.w	r2, #0
    2bb6:	d014      	beq.n	2be2 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
    2bb8:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    2bba:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2bbe:	d1d5      	bne.n	2b6c <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
    2bc0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2bc2:	9310      	str	r3, [sp, #64]	; 0x40
    2bc4:	e7d2      	b.n	2b6c <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
    2bc6:	3407      	adds	r4, #7
    2bc8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2bcc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2bd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2bd4:	e7ca      	b.n	2b6c <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
    2bd6:	f854 3b04 	ldr.w	r3, [r4], #4
    2bda:	9310      	str	r3, [sp, #64]	; 0x40
    2bdc:	2300      	movs	r3, #0
    2bde:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2be0:	e7c4      	b.n	2b6c <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
    2be2:	b2db      	uxtb	r3, r3
    2be4:	e7bc      	b.n	2b60 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
    2be6:	2b04      	cmp	r3, #4
    2be8:	d108      	bne.n	2bfc <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
    2bea:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2bec:	f024 0407 	bic.w	r4, r4, #7
    2bf0:	e9d4 2300 	ldrd	r2, r3, [r4]
    2bf4:	3408      	adds	r4, #8
    2bf6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    2bfa:	e7b7      	b.n	2b6c <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2bfc:	2b03      	cmp	r3, #3
    2bfe:	d1b5      	bne.n	2b6c <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
    2c00:	f854 3b04 	ldr.w	r3, [r4], #4
    2c04:	e7dd      	b.n	2bc2 <cbvprintf+0x45a>
		switch (conv->specifier) {
    2c06:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2c0a:	2878      	cmp	r0, #120	; 0x78
    2c0c:	d8bd      	bhi.n	2b8a <cbvprintf+0x422>
    2c0e:	2862      	cmp	r0, #98	; 0x62
    2c10:	d81c      	bhi.n	2c4c <cbvprintf+0x4e4>
    2c12:	2825      	cmp	r0, #37	; 0x25
    2c14:	f43f adb8 	beq.w	2788 <cbvprintf+0x20>
    2c18:	2858      	cmp	r0, #88	; 0x58
    2c1a:	d1b6      	bne.n	2b8a <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2c1c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2c20:	9300      	str	r3, [sp, #0]
    2c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2c26:	ab0a      	add	r3, sp, #40	; 0x28
    2c28:	aa12      	add	r2, sp, #72	; 0x48
    2c2a:	f7ff fd51 	bl	26d0 <encode_uint>
			if (precision >= 0) {
    2c2e:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    2c32:	4607      	mov	r7, r0
			if (precision >= 0) {
    2c34:	f280 8098 	bge.w	2d68 <cbvprintf+0x600>
		if (bps == NULL) {
    2c38:	2f00      	cmp	r7, #0
    2c3a:	d0a6      	beq.n	2b8a <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    2c3c:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    2c40:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    2c44:	2e00      	cmp	r6, #0
    2c46:	d04e      	beq.n	2ce6 <cbvprintf+0x57e>
			nj_len += 1U;
    2c48:	3001      	adds	r0, #1
    2c4a:	e04c      	b.n	2ce6 <cbvprintf+0x57e>
		switch (conv->specifier) {
    2c4c:	3863      	subs	r0, #99	; 0x63
    2c4e:	2815      	cmp	r0, #21
    2c50:	d89b      	bhi.n	2b8a <cbvprintf+0x422>
    2c52:	a201      	add	r2, pc, #4	; (adr r2, 2c58 <cbvprintf+0x4f0>)
    2c54:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2c58:	00002cd7 	.word	0x00002cd7
    2c5c:	00002d3d 	.word	0x00002d3d
    2c60:	00002b8b 	.word	0x00002b8b
    2c64:	00002b8b 	.word	0x00002b8b
    2c68:	00002b8b 	.word	0x00002b8b
    2c6c:	00002b8b 	.word	0x00002b8b
    2c70:	00002d3d 	.word	0x00002d3d
    2c74:	00002b8b 	.word	0x00002b8b
    2c78:	00002b8b 	.word	0x00002b8b
    2c7c:	00002b8b 	.word	0x00002b8b
    2c80:	00002b8b 	.word	0x00002b8b
    2c84:	00002dc7 	.word	0x00002dc7
    2c88:	00002d63 	.word	0x00002d63
    2c8c:	00002d89 	.word	0x00002d89
    2c90:	00002b8b 	.word	0x00002b8b
    2c94:	00002b8b 	.word	0x00002b8b
    2c98:	00002cb1 	.word	0x00002cb1
    2c9c:	00002b8b 	.word	0x00002b8b
    2ca0:	00002d63 	.word	0x00002d63
    2ca4:	00002b8b 	.word	0x00002b8b
    2ca8:	00002b8b 	.word	0x00002b8b
    2cac:	00002d63 	.word	0x00002d63
			if (precision >= 0) {
    2cb0:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    2cb4:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    2cb6:	db0a      	blt.n	2cce <cbvprintf+0x566>
				len = strnlen(bps, precision);
    2cb8:	4659      	mov	r1, fp
    2cba:	4638      	mov	r0, r7
    2cbc:	f008 f92a 	bl	af14 <strnlen>
			bpe = bps + len;
    2cc0:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    2cc4:	2f00      	cmp	r7, #0
    2cc6:	f43f af60 	beq.w	2b8a <cbvprintf+0x422>
		char sign = 0;
    2cca:	2600      	movs	r6, #0
    2ccc:	e00b      	b.n	2ce6 <cbvprintf+0x57e>
				len = strlen(bps);
    2cce:	4638      	mov	r0, r7
    2cd0:	f7fe f95e 	bl	f90 <strlen>
    2cd4:	e7f4      	b.n	2cc0 <cbvprintf+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2cd8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    2cdc:	2600      	movs	r6, #0
			bpe = buf + 1;
    2cde:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    2ce2:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    2ce4:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    2ce6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2cea:	f013 0210 	ands.w	r2, r3, #16
    2cee:	9205      	str	r2, [sp, #20]
    2cf0:	f000 8084 	beq.w	2dfc <cbvprintf+0x694>
			nj_len += 2U;
    2cf4:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2cf6:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    2cf8:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    2cfc:	bf48      	it	mi
    2cfe:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2d00:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    2d02:	bf48      	it	mi
    2d04:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    2d06:	f1b9 0f00 	cmp.w	r9, #0
    2d0a:	f340 8091 	ble.w	2e30 <cbvprintf+0x6c8>
			if (!conv->flag_dash) {
    2d0e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2d12:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    2d16:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2d1a:	0750      	lsls	r0, r2, #29
    2d1c:	9306      	str	r3, [sp, #24]
    2d1e:	f100 8087 	bmi.w	2e30 <cbvprintf+0x6c8>
				if (conv->flag_zero) {
    2d22:	0651      	lsls	r1, r2, #25
    2d24:	d57a      	bpl.n	2e1c <cbvprintf+0x6b4>
					if (sign != 0) {
    2d26:	b13e      	cbz	r6, 2d38 <cbvprintf+0x5d0>
						OUTC(sign);
    2d28:	9903      	ldr	r1, [sp, #12]
    2d2a:	4630      	mov	r0, r6
    2d2c:	47d0      	blx	sl
    2d2e:	2800      	cmp	r0, #0
    2d30:	db71      	blt.n	2e16 <cbvprintf+0x6ae>
    2d32:	9b06      	ldr	r3, [sp, #24]
    2d34:	3501      	adds	r5, #1
    2d36:	461e      	mov	r6, r3
					pad = '0';
    2d38:	2230      	movs	r2, #48	; 0x30
    2d3a:	e070      	b.n	2e1e <cbvprintf+0x6b6>
			if (conv->flag_plus) {
    2d3c:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    2d3e:	bf5c      	itt	pl
    2d40:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    2d44:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    2d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    2d4a:	bf48      	it	mi
    2d4c:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    2d4e:	2b00      	cmp	r3, #0
    2d50:	f6bf af64 	bge.w	2c1c <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
    2d54:	4252      	negs	r2, r2
    2d56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2d5a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2d5e:	262d      	movs	r6, #45	; 0x2d
    2d60:	e75c      	b.n	2c1c <cbvprintf+0x4b4>
		switch (conv->specifier) {
    2d62:	2600      	movs	r6, #0
    2d64:	e75a      	b.n	2c1c <cbvprintf+0x4b4>
		char sign = 0;
    2d66:	2600      	movs	r6, #0
				conv->flag_zero = false;
    2d68:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2d6c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2d70:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2d72:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2d76:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    2d78:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2d7c:	f67f af5c 	bls.w	2c38 <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
    2d80:	ebab 0303 	sub.w	r3, fp, r3
    2d84:	9313      	str	r3, [sp, #76]	; 0x4c
    2d86:	e757      	b.n	2c38 <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    2d88:	9810      	ldr	r0, [sp, #64]	; 0x40
    2d8a:	b380      	cbz	r0, 2dee <cbvprintf+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2d8c:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    2d90:	ab0a      	add	r3, sp, #40	; 0x28
    2d92:	f8cd 8000 	str.w	r8, [sp]
    2d96:	aa12      	add	r2, sp, #72	; 0x48
    2d98:	2100      	movs	r1, #0
    2d9a:	f7ff fc99 	bl	26d0 <encode_uint>
				conv->altform_0c = true;
    2d9e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2da2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2da6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2daa:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    2dae:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2db2:	4607      	mov	r7, r0
				conv->altform_0c = true;
    2db4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    2db8:	dad5      	bge.n	2d66 <cbvprintf+0x5fe>
		if (bps == NULL) {
    2dba:	2800      	cmp	r0, #0
    2dbc:	f43f aee5 	beq.w	2b8a <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    2dc0:	eba8 0000 	sub.w	r0, r8, r0
    2dc4:	e781      	b.n	2cca <cbvprintf+0x562>
				store_count(conv, value->ptr, count);
    2dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2dc8:	2907      	cmp	r1, #7
    2dca:	f63f aede 	bhi.w	2b8a <cbvprintf+0x422>
    2dce:	e8df f001 	tbb	[pc, r1]
    2dd2:	040c      	.short	0x040c
    2dd4:	08080c06 	.word	0x08080c06
    2dd8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    2dda:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    2ddc:	e6d5      	b.n	2b8a <cbvprintf+0x422>
		*(short *)dp = (short)count;
    2dde:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    2de0:	e6d3      	b.n	2b8a <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
    2de2:	17ea      	asrs	r2, r5, #31
    2de4:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2de8:	e6cf      	b.n	2b8a <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2dea:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    2dec:	e6cd      	b.n	2b8a <cbvprintf+0x422>
			bpe = bps + 5;
    2dee:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2eac <cbvprintf+0x744>
		char sign = 0;
    2df2:	4606      	mov	r6, r0
    2df4:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    2df8:	2005      	movs	r0, #5
    2dfa:	e774      	b.n	2ce6 <cbvprintf+0x57e>
		} else if (conv->altform_0) {
    2dfc:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2dfe:	bf48      	it	mi
    2e00:	3001      	addmi	r0, #1
    2e02:	e778      	b.n	2cf6 <cbvprintf+0x58e>
    2e04:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2e06:	4610      	mov	r0, r2
    2e08:	9206      	str	r2, [sp, #24]
    2e0a:	9903      	ldr	r1, [sp, #12]
    2e0c:	47d0      	blx	sl
    2e0e:	2800      	cmp	r0, #0
    2e10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2e14:	da04      	bge.n	2e20 <cbvprintf+0x6b8>
#undef OUTS
#undef OUTC
}
    2e16:	b017      	add	sp, #92	; 0x5c
    2e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2e1c:	2220      	movs	r2, #32
					pad = '0';
    2e1e:	464b      	mov	r3, r9
				while (width-- > 0) {
    2e20:	4619      	mov	r1, r3
    2e22:	2900      	cmp	r1, #0
    2e24:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2e28:	dcec      	bgt.n	2e04 <cbvprintf+0x69c>
    2e2a:	444d      	add	r5, r9
    2e2c:	1a6d      	subs	r5, r5, r1
    2e2e:	4699      	mov	r9, r3
		if (sign != 0) {
    2e30:	b12e      	cbz	r6, 2e3e <cbvprintf+0x6d6>
			OUTC(sign);
    2e32:	9903      	ldr	r1, [sp, #12]
    2e34:	4630      	mov	r0, r6
    2e36:	47d0      	blx	sl
    2e38:	2800      	cmp	r0, #0
    2e3a:	dbec      	blt.n	2e16 <cbvprintf+0x6ae>
    2e3c:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2e3e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2e42:	06da      	lsls	r2, r3, #27
    2e44:	d401      	bmi.n	2e4a <cbvprintf+0x6e2>
    2e46:	071b      	lsls	r3, r3, #28
    2e48:	d505      	bpl.n	2e56 <cbvprintf+0x6ee>
				OUTC('0');
    2e4a:	9903      	ldr	r1, [sp, #12]
    2e4c:	2030      	movs	r0, #48	; 0x30
    2e4e:	47d0      	blx	sl
    2e50:	2800      	cmp	r0, #0
    2e52:	dbe0      	blt.n	2e16 <cbvprintf+0x6ae>
    2e54:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2e56:	9b05      	ldr	r3, [sp, #20]
    2e58:	b133      	cbz	r3, 2e68 <cbvprintf+0x700>
				OUTC(conv->specifier);
    2e5a:	9903      	ldr	r1, [sp, #12]
    2e5c:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2e60:	47d0      	blx	sl
    2e62:	2800      	cmp	r0, #0
    2e64:	dbd7      	blt.n	2e16 <cbvprintf+0x6ae>
    2e66:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2e68:	44ab      	add	fp, r5
    2e6a:	e005      	b.n	2e78 <cbvprintf+0x710>
				OUTC('0');
    2e6c:	9903      	ldr	r1, [sp, #12]
    2e6e:	2030      	movs	r0, #48	; 0x30
    2e70:	47d0      	blx	sl
    2e72:	2800      	cmp	r0, #0
    2e74:	dbcf      	blt.n	2e16 <cbvprintf+0x6ae>
    2e76:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2e78:	ebab 0305 	sub.w	r3, fp, r5
    2e7c:	2b00      	cmp	r3, #0
    2e7e:	dcf5      	bgt.n	2e6c <cbvprintf+0x704>
			OUTS(bps, bpe);
    2e80:	9903      	ldr	r1, [sp, #12]
    2e82:	4643      	mov	r3, r8
    2e84:	463a      	mov	r2, r7
    2e86:	4650      	mov	r0, sl
    2e88:	f007 f97e 	bl	a188 <outs>
    2e8c:	2800      	cmp	r0, #0
    2e8e:	dbc2      	blt.n	2e16 <cbvprintf+0x6ae>
    2e90:	4405      	add	r5, r0
		while (width > 0) {
    2e92:	44a9      	add	r9, r5
    2e94:	eba9 0305 	sub.w	r3, r9, r5
    2e98:	2b00      	cmp	r3, #0
    2e9a:	f77f ae76 	ble.w	2b8a <cbvprintf+0x422>
			OUTC(' ');
    2e9e:	9903      	ldr	r1, [sp, #12]
    2ea0:	2020      	movs	r0, #32
    2ea2:	47d0      	blx	sl
    2ea4:	2800      	cmp	r0, #0
    2ea6:	dbb6      	blt.n	2e16 <cbvprintf+0x6ae>
    2ea8:	3501      	adds	r5, #1
			--width;
    2eaa:	e7f3      	b.n	2e94 <cbvprintf+0x72c>
    2eac:	0000bba3 	.word	0x0000bba3

00002eb0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2eb0:	b508      	push	{r3, lr}
	__asm__ volatile(
    2eb2:	f04f 0220 	mov.w	r2, #32
    2eb6:	f3ef 8311 	mrs	r3, BASEPRI
    2eba:	f382 8812 	msr	BASEPRI_MAX, r2
    2ebe:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2ec2:	f001 fd7b 	bl	49bc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2ec6:	4803      	ldr	r0, [pc, #12]	; (2ed4 <sys_reboot+0x24>)
    2ec8:	f007 f82f 	bl	9f2a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2ecc:	f000 fe62 	bl	3b94 <arch_cpu_idle>
    2ed0:	e7fc      	b.n	2ecc <sys_reboot+0x1c>
    2ed2:	bf00      	nop
    2ed4:	0000bba4 	.word	0x0000bba4

00002ed8 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eda:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2edc:	460c      	mov	r4, r1
    2ede:	b929      	cbnz	r1, 2eec <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2ee0:	4d0e      	ldr	r5, [pc, #56]	; (2f1c <msg_process+0x44>)
    2ee2:	4b0f      	ldr	r3, [pc, #60]	; (2f20 <msg_process+0x48>)
    2ee4:	1b5b      	subs	r3, r3, r5
    2ee6:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2ee8:	42bc      	cmp	r4, r7
    2eea:	db00      	blt.n	2eee <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2eee:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    2ef0:	795b      	ldrb	r3, [r3, #5]
    2ef2:	b17b      	cbz	r3, 2f14 <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    2ef4:	b94e      	cbnz	r6, 2f0a <msg_process+0x32>
    2ef6:	490b      	ldr	r1, [pc, #44]	; (2f24 <msg_process+0x4c>)
    2ef8:	480b      	ldr	r0, [pc, #44]	; (2f28 <msg_process+0x50>)
    2efa:	4a0c      	ldr	r2, [pc, #48]	; (2f2c <msg_process+0x54>)
    2efc:	2386      	movs	r3, #134	; 0x86
    2efe:	f007 f961 	bl	a1c4 <assert_print>
    2f02:	480a      	ldr	r0, [pc, #40]	; (2f2c <msg_process+0x54>)
    2f04:	2186      	movs	r1, #134	; 0x86
    2f06:	f007 f956 	bl	a1b6 <assert_post_action>
	backend->api->process(backend, msg);
    2f0a:	682b      	ldr	r3, [r5, #0]
    2f0c:	4631      	mov	r1, r6
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	4628      	mov	r0, r5
    2f12:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2f14:	3401      	adds	r4, #1
    2f16:	3510      	adds	r5, #16
    2f18:	e7e6      	b.n	2ee8 <msg_process+0x10>
    2f1a:	bf00      	nop
    2f1c:	0000b1f0 	.word	0x0000b1f0
    2f20:	0000b210 	.word	0x0000b210
    2f24:	0000bc05 	.word	0x0000bc05
    2f28:	0000b80f 	.word	0x0000b80f
    2f2c:	0000bbcd 	.word	0x0000bbcd

00002f30 <log_format_func_t_get>:
}
    2f30:	4b01      	ldr	r3, [pc, #4]	; (2f38 <log_format_func_t_get+0x8>)
    2f32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2f36:	4770      	bx	lr
    2f38:	0000b2b0 	.word	0x0000b2b0

00002f3c <log_core_init>:
	panic_mode = false;
    2f3c:	4a05      	ldr	r2, [pc, #20]	; (2f54 <log_core_init+0x18>)
    2f3e:	2300      	movs	r3, #0
    2f40:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2f42:	4a05      	ldr	r2, [pc, #20]	; (2f58 <log_core_init+0x1c>)
    2f44:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    2f46:	4b05      	ldr	r3, [pc, #20]	; (2f5c <log_core_init+0x20>)
    2f48:	4a05      	ldr	r2, [pc, #20]	; (2f60 <log_core_init+0x24>)
    2f4a:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2f4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2f50:	f000 ba96 	b.w	3480 <log_output_timestamp_freq_set>
    2f54:	200090f5 	.word	0x200090f5
    2f58:	200007d8 	.word	0x200007d8
    2f5c:	20000004 	.word	0x20000004
    2f60:	0000a1e1 	.word	0x0000a1e1

00002f64 <log_init>:
{
    2f64:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    2f66:	4b19      	ldr	r3, [pc, #100]	; (2fcc <log_init+0x68>)
    2f68:	4c19      	ldr	r4, [pc, #100]	; (2fd0 <log_init+0x6c>)
    2f6a:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2f6c:	2c90      	cmp	r4, #144	; 0x90
    2f6e:	d90b      	bls.n	2f88 <log_init+0x24>
    2f70:	4918      	ldr	r1, [pc, #96]	; (2fd4 <log_init+0x70>)
    2f72:	4819      	ldr	r0, [pc, #100]	; (2fd8 <log_init+0x74>)
    2f74:	4a19      	ldr	r2, [pc, #100]	; (2fdc <log_init+0x78>)
    2f76:	f240 2373 	movw	r3, #627	; 0x273
    2f7a:	f007 f923 	bl	a1c4 <assert_print>
    2f7e:	4817      	ldr	r0, [pc, #92]	; (2fdc <log_init+0x78>)
    2f80:	f240 2173 	movw	r1, #627	; 0x273
    2f84:	f007 f917 	bl	a1b6 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2f88:	f3bf 8f5b 	dmb	ish
    2f8c:	4b14      	ldr	r3, [pc, #80]	; (2fe0 <log_init+0x7c>)
    2f8e:	e853 6f00 	ldrex	r6, [r3]
    2f92:	1c72      	adds	r2, r6, #1
    2f94:	e843 2100 	strex	r1, r2, [r3]
    2f98:	2900      	cmp	r1, #0
    2f9a:	d1f8      	bne.n	2f8e <log_init+0x2a>
    2f9c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2fa0:	b91e      	cbnz	r6, 2faa <log_init+0x46>
    2fa2:	1125      	asrs	r5, r4, #4
    2fa4:	4c09      	ldr	r4, [pc, #36]	; (2fcc <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    2fa6:	42ae      	cmp	r6, r5
    2fa8:	db00      	blt.n	2fac <log_init+0x48>
}
    2faa:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2fac:	7b23      	ldrb	r3, [r4, #12]
    2fae:	b153      	cbz	r3, 2fc6 <log_init+0x62>
			if (backend->api->init != NULL) {
    2fb0:	6823      	ldr	r3, [r4, #0]
    2fb2:	699b      	ldr	r3, [r3, #24]
    2fb4:	b10b      	cbz	r3, 2fba <log_init+0x56>
				backend->api->init(backend);
    2fb6:	4620      	mov	r0, r4
    2fb8:	4798      	blx	r3
			log_backend_enable(backend,
    2fba:	6863      	ldr	r3, [r4, #4]
    2fbc:	2204      	movs	r2, #4
    2fbe:	6819      	ldr	r1, [r3, #0]
    2fc0:	4620      	mov	r0, r4
    2fc2:	f000 f86f 	bl	30a4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2fc6:	3601      	adds	r6, #1
    2fc8:	3410      	adds	r4, #16
    2fca:	e7ec      	b.n	2fa6 <log_init+0x42>
    2fcc:	0000b1f0 	.word	0x0000b1f0
    2fd0:	0000b210 	.word	0x0000b210
    2fd4:	0000bc5d 	.word	0x0000bc5d
    2fd8:	0000b80f 	.word	0x0000b80f
    2fdc:	0000bc18 	.word	0x0000bc18
    2fe0:	200007e0 	.word	0x200007e0

00002fe4 <z_impl_log_panic>:
{
    2fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2fe6:	4f0c      	ldr	r7, [pc, #48]	; (3018 <z_impl_log_panic+0x34>)
    2fe8:	783d      	ldrb	r5, [r7, #0]
    2fea:	b94d      	cbnz	r5, 3000 <z_impl_log_panic+0x1c>
    2fec:	4c0b      	ldr	r4, [pc, #44]	; (301c <z_impl_log_panic+0x38>)
    2fee:	4e0c      	ldr	r6, [pc, #48]	; (3020 <z_impl_log_panic+0x3c>)
	log_init();
    2ff0:	f7ff ffb8 	bl	2f64 <log_init>
    2ff4:	1b36      	subs	r6, r6, r4
    2ff6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2ff8:	42b5      	cmp	r5, r6
    2ffa:	db02      	blt.n	3002 <z_impl_log_panic+0x1e>
	panic_mode = true;
    2ffc:	2301      	movs	r3, #1
    2ffe:	703b      	strb	r3, [r7, #0]
}
    3000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3002:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3004:	795b      	ldrb	r3, [r3, #5]
    3006:	b11b      	cbz	r3, 3010 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    3008:	6823      	ldr	r3, [r4, #0]
    300a:	4620      	mov	r0, r4
    300c:	695b      	ldr	r3, [r3, #20]
    300e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3010:	3501      	adds	r5, #1
    3012:	3410      	adds	r4, #16
    3014:	e7f0      	b.n	2ff8 <z_impl_log_panic+0x14>
    3016:	bf00      	nop
    3018:	200090f5 	.word	0x200090f5
    301c:	0000b1f0 	.word	0x0000b1f0
    3020:	0000b210 	.word	0x0000b210

00003024 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    3024:	4b01      	ldr	r3, [pc, #4]	; (302c <z_log_notify_backend_enabled+0x8>)
    3026:	2201      	movs	r2, #1
    3028:	701a      	strb	r2, [r3, #0]
}
    302a:	4770      	bx	lr
    302c:	200090f4 	.word	0x200090f4

00003030 <z_log_dropped>:
    3030:	4b0c      	ldr	r3, [pc, #48]	; (3064 <z_log_dropped+0x34>)
    3032:	f3bf 8f5b 	dmb	ish
    3036:	e853 1f00 	ldrex	r1, [r3]
    303a:	3101      	adds	r1, #1
    303c:	e843 1200 	strex	r2, r1, [r3]
    3040:	2a00      	cmp	r2, #0
    3042:	d1f8      	bne.n	3036 <z_log_dropped+0x6>
    3044:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    3048:	b158      	cbz	r0, 3062 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    304a:	f3bf 8f5b 	dmb	ish
    304e:	4b06      	ldr	r3, [pc, #24]	; (3068 <z_log_dropped+0x38>)
    3050:	e853 1f00 	ldrex	r1, [r3]
    3054:	3901      	subs	r1, #1
    3056:	e843 1200 	strex	r2, r1, [r3]
    305a:	2a00      	cmp	r2, #0
    305c:	d1f8      	bne.n	3050 <z_log_dropped+0x20>
    305e:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    3062:	4770      	bx	lr
    3064:	200007d8 	.word	0x200007d8
    3068:	200007dc 	.word	0x200007dc

0000306c <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <z_log_msg2_commit+0x18>)
{
    306e:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    3070:	681b      	ldr	r3, [r3, #0]
{
    3072:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3074:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    3076:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    3078:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    307a:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    307c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    3080:	f7ff bf2a 	b.w	2ed8 <msg_process>
    3084:	20000004 	.word	0x20000004

00003088 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3088:	4a04      	ldr	r2, [pc, #16]	; (309c <log_source_name_get+0x14>)
    308a:	4b05      	ldr	r3, [pc, #20]	; (30a0 <log_source_name_get+0x18>)
    308c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    308e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    3092:	bf34      	ite	cc
    3094:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3098:	2000      	movcs	r0, #0
}
    309a:	4770      	bx	lr
    309c:	0000b1a8 	.word	0x0000b1a8
    30a0:	0000b1f0 	.word	0x0000b1f0

000030a4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    30a4:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    30a6:	4c10      	ldr	r4, [pc, #64]	; (30e8 <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    30a8:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    30aa:	1b04      	subs	r4, r0, r4
    30ac:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    30ae:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    30b0:	3401      	adds	r4, #1
{
    30b2:	4605      	mov	r5, r0
    30b4:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    30b6:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    30b8:	b963      	cbnz	r3, 30d4 <log_backend_enable+0x30>
    30ba:	490c      	ldr	r1, [pc, #48]	; (30ec <log_backend_enable+0x48>)
    30bc:	4a0c      	ldr	r2, [pc, #48]	; (30f0 <log_backend_enable+0x4c>)
    30be:	480d      	ldr	r0, [pc, #52]	; (30f4 <log_backend_enable+0x50>)
    30c0:	23bb      	movs	r3, #187	; 0xbb
    30c2:	f007 f87f 	bl	a1c4 <assert_print>
    30c6:	480c      	ldr	r0, [pc, #48]	; (30f8 <log_backend_enable+0x54>)
    30c8:	f007 f87c 	bl	a1c4 <assert_print>
    30cc:	4808      	ldr	r0, [pc, #32]	; (30f0 <log_backend_enable+0x4c>)
    30ce:	21bb      	movs	r1, #187	; 0xbb
    30d0:	f007 f871 	bl	a1b6 <assert_post_action>
	backend->cb->id = id;
    30d4:	686b      	ldr	r3, [r5, #4]
    30d6:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    30d8:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    30da:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    30dc:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    30de:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    30e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    30e4:	f7ff bf9e 	b.w	3024 <z_log_notify_backend_enabled>
    30e8:	0000b1f0 	.word	0x0000b1f0
    30ec:	0000bcdd 	.word	0x0000bcdd
    30f0:	0000bc85 	.word	0x0000bc85
    30f4:	0000b80f 	.word	0x0000b80f
    30f8:	0000bcf3 	.word	0x0000bcf3

000030fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    30fc:	b40e      	push	{r1, r2, r3}
    30fe:	b503      	push	{r0, r1, lr}
    3100:	ab03      	add	r3, sp, #12
    3102:	4601      	mov	r1, r0
    3104:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3108:	4804      	ldr	r0, [pc, #16]	; (311c <print_formatted+0x20>)
	va_start(args, fmt);
    310a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    310c:	f7ff fb2c 	bl	2768 <cbvprintf>
	va_end(args);

	return length;
}
    3110:	b002      	add	sp, #8
    3112:	f85d eb04 	ldr.w	lr, [sp], #4
    3116:	b003      	add	sp, #12
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	0000a213 	.word	0x0000a213

00003120 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    3120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3124:	b087      	sub	sp, #28
    3126:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3128:	f001 0301 	and.w	r3, r1, #1
{
    312c:	9205      	str	r2, [sp, #20]
    312e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    3132:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3136:	9304      	str	r3, [sp, #16]
{
    3138:	4607      	mov	r7, r0
    313a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    313c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3140:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    3144:	f007 f863 	bl	a20e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3148:	4602      	mov	r2, r0
    314a:	2800      	cmp	r0, #0
    314c:	d040      	beq.n	31d0 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    314e:	4937      	ldr	r1, [pc, #220]	; (322c <prefix_print+0x10c>)
    3150:	4638      	mov	r0, r7
    3152:	f7ff ffd3 	bl	30fc <print_formatted>
    3156:	4605      	mov	r5, r0
	}

	if (stamp) {
    3158:	f1bb 0f00 	cmp.w	fp, #0
    315c:	d008      	beq.n	3170 <prefix_print+0x50>
	if (!format) {
    315e:	f018 0f44 	tst.w	r8, #68	; 0x44
    3162:	d137      	bne.n	31d4 <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    3164:	4932      	ldr	r1, [pc, #200]	; (3230 <prefix_print+0x110>)
    3166:	4622      	mov	r2, r4
    3168:	4638      	mov	r0, r7
    316a:	f7ff ffc7 	bl	30fc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    316e:	4405      	add	r5, r0
	if (color) {
    3170:	9b04      	ldr	r3, [sp, #16]
    3172:	b153      	cbz	r3, 318a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    3174:	4b2f      	ldr	r3, [pc, #188]	; (3234 <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    3176:	4930      	ldr	r1, [pc, #192]	; (3238 <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    3178:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    317c:	4b2f      	ldr	r3, [pc, #188]	; (323c <prefix_print+0x11c>)
    317e:	4638      	mov	r0, r7
    3180:	2a00      	cmp	r2, #0
    3182:	bf08      	it	eq
    3184:	461a      	moveq	r2, r3
    3186:	f7ff ffb9 	bl	30fc <print_formatted>
	if (level_on) {
    318a:	b13e      	cbz	r6, 319c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    318c:	4b2c      	ldr	r3, [pc, #176]	; (3240 <prefix_print+0x120>)
    318e:	492d      	ldr	r1, [pc, #180]	; (3244 <prefix_print+0x124>)
    3190:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    3194:	4638      	mov	r0, r7
    3196:	f7ff ffb1 	bl	30fc <print_formatted>
    319a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    319c:	f1ba 0f00 	cmp.w	sl, #0
    31a0:	db12      	blt.n	31c8 <prefix_print+0xa8>
		total += print_formatted(output,
    31a2:	9b05      	ldr	r3, [sp, #20]
    31a4:	4c28      	ldr	r4, [pc, #160]	; (3248 <prefix_print+0x128>)
    31a6:	b123      	cbz	r3, 31b2 <prefix_print+0x92>
    31a8:	4b28      	ldr	r3, [pc, #160]	; (324c <prefix_print+0x12c>)
    31aa:	f1b9 0f04 	cmp.w	r9, #4
    31ae:	bf08      	it	eq
    31b0:	461c      	moveq	r4, r3
    31b2:	4651      	mov	r1, sl
    31b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    31b8:	f7ff ff66 	bl	3088 <log_source_name_get>
    31bc:	4621      	mov	r1, r4
    31be:	4602      	mov	r2, r0
    31c0:	4638      	mov	r0, r7
    31c2:	f7ff ff9b 	bl	30fc <print_formatted>
    31c6:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    31c8:	1970      	adds	r0, r6, r5
    31ca:	b007      	add	sp, #28
    31cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    31d0:	4605      	mov	r5, r0
    31d2:	e7c1      	b.n	3158 <prefix_print+0x38>
	} else if (freq != 0U) {
    31d4:	4b1e      	ldr	r3, [pc, #120]	; (3250 <prefix_print+0x130>)
    31d6:	6818      	ldr	r0, [r3, #0]
    31d8:	2800      	cmp	r0, #0
    31da:	d0c8      	beq.n	316e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    31dc:	4b1d      	ldr	r3, [pc, #116]	; (3254 <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    31de:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    31e2:	681b      	ldr	r3, [r3, #0]
    31e4:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    31e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    31ec:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    31f0:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    31f4:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    31f8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    31fc:	fbb3 f2f1 	udiv	r2, r3, r1
    3200:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3204:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    3208:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    320c:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    3210:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3214:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    3218:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    321a:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    321e:	490e      	ldr	r1, [pc, #56]	; (3258 <prefix_print+0x138>)
    3220:	e9cd e401 	strd	lr, r4, [sp, #4]
    3224:	4638      	mov	r0, r7
    3226:	f7ff ff69 	bl	30fc <print_formatted>
    322a:	e7a0      	b.n	316e <prefix_print+0x4e>
    322c:	0000bd23 	.word	0x0000bd23
    3230:	0000bd27 	.word	0x0000bd27
    3234:	0000b2bc 	.word	0x0000b2bc
    3238:	0000bd4c 	.word	0x0000bd4c
    323c:	0000bd15 	.word	0x0000bd15
    3240:	0000b2d0 	.word	0x0000b2d0
    3244:	0000bd4f 	.word	0x0000bd4f
    3248:	0000bd1e 	.word	0x0000bd1e
    324c:	0000bd1a 	.word	0x0000bd1a
    3250:	200007e8 	.word	0x200007e8
    3254:	200007e4 	.word	0x200007e4
    3258:	0000bd30 	.word	0x0000bd30

0000325c <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    325c:	06ca      	lsls	r2, r1, #27
    325e:	d405      	bmi.n	326c <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3260:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    3262:	bf4c      	ite	mi
    3264:	4902      	ldrmi	r1, [pc, #8]	; (3270 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    3266:	4903      	ldrpl	r1, [pc, #12]	; (3274 <newline_print+0x18>)
    3268:	f7ff bf48 	b.w	30fc <print_formatted>
}
    326c:	4770      	bx	lr
    326e:	bf00      	nop
    3270:	0000ce4c 	.word	0x0000ce4c
    3274:	0000bd55 	.word	0x0000bd55

00003278 <hexdump_line_print>:
{
    3278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    327c:	460f      	mov	r7, r1
	newline_print(output, flags);
    327e:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    3280:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 333c <hexdump_line_print+0xc4>
{
    3284:	4604      	mov	r4, r0
    3286:	4616      	mov	r6, r2
    3288:	461d      	mov	r5, r3
	newline_print(output, flags);
    328a:	f7ff ffe7 	bl	325c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    328e:	f04f 0800 	mov.w	r8, #0
    3292:	45a8      	cmp	r8, r5
    3294:	db28      	blt.n	32e8 <hexdump_line_print+0x70>
		if (i < length) {
    3296:	b376      	cbz	r6, 32f6 <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    3298:	783a      	ldrb	r2, [r7, #0]
    329a:	4929      	ldr	r1, [pc, #164]	; (3340 <hexdump_line_print+0xc8>)
    329c:	4620      	mov	r0, r4
    329e:	f7ff ff2d 	bl	30fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    32a2:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    32a4:	076a      	lsls	r2, r5, #29
    32a6:	d103      	bne.n	32b0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    32a8:	4924      	ldr	r1, [pc, #144]	; (333c <hexdump_line_print+0xc4>)
    32aa:	4620      	mov	r0, r4
    32ac:	f7ff ff26 	bl	30fc <print_formatted>
		if (i < length) {
    32b0:	42b5      	cmp	r5, r6
    32b2:	d225      	bcs.n	3300 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    32b4:	5d7a      	ldrb	r2, [r7, r5]
    32b6:	4922      	ldr	r1, [pc, #136]	; (3340 <hexdump_line_print+0xc8>)
    32b8:	4620      	mov	r0, r4
    32ba:	f7ff ff1f 	bl	30fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    32be:	3501      	adds	r5, #1
    32c0:	2d10      	cmp	r5, #16
    32c2:	d1ef      	bne.n	32a4 <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    32c4:	491f      	ldr	r1, [pc, #124]	; (3344 <hexdump_line_print+0xcc>)
    32c6:	4620      	mov	r0, r4
    32c8:	f7ff ff18 	bl	30fc <print_formatted>
		if (i < length) {
    32cc:	b9ee      	cbnz	r6, 330a <hexdump_line_print+0x92>
			print_formatted(output, " ");
    32ce:	491b      	ldr	r1, [pc, #108]	; (333c <hexdump_line_print+0xc4>)
    32d0:	4620      	mov	r0, r4
    32d2:	f7ff ff13 	bl	30fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    32d6:	2501      	movs	r5, #1
		if (i < length) {
    32d8:	42b5      	cmp	r5, r6
    32da:	462b      	mov	r3, r5
    32dc:	d317      	bcc.n	330e <hexdump_line_print+0x96>
			print_formatted(output, " ");
    32de:	4917      	ldr	r1, [pc, #92]	; (333c <hexdump_line_print+0xc4>)
    32e0:	4620      	mov	r0, r4
    32e2:	f7ff ff0b 	bl	30fc <print_formatted>
    32e6:	e01d      	b.n	3324 <hexdump_line_print+0xac>
		print_formatted(output, " ");
    32e8:	4649      	mov	r1, r9
    32ea:	4620      	mov	r0, r4
    32ec:	f7ff ff06 	bl	30fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    32f0:	f108 0801 	add.w	r8, r8, #1
    32f4:	e7cd      	b.n	3292 <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    32f6:	4914      	ldr	r1, [pc, #80]	; (3348 <hexdump_line_print+0xd0>)
    32f8:	4620      	mov	r0, r4
    32fa:	f7ff feff 	bl	30fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    32fe:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    3300:	4911      	ldr	r1, [pc, #68]	; (3348 <hexdump_line_print+0xd0>)
    3302:	4620      	mov	r0, r4
    3304:	f7ff fefa 	bl	30fc <print_formatted>
    3308:	e7d9      	b.n	32be <hexdump_line_print+0x46>
		if (i < length) {
    330a:	2500      	movs	r5, #0
    330c:	462b      	mov	r3, r5
			char c = (char)data[i];
    330e:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
    3310:	4b0e      	ldr	r3, [pc, #56]	; (334c <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
    3312:	490f      	ldr	r1, [pc, #60]	; (3350 <hexdump_line_print+0xd8>)
    3314:	5c9b      	ldrb	r3, [r3, r2]
    3316:	f013 0f97 	tst.w	r3, #151	; 0x97
    331a:	bf08      	it	eq
    331c:	222e      	moveq	r2, #46	; 0x2e
    331e:	4620      	mov	r0, r4
    3320:	f7ff feec 	bl	30fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3324:	3501      	adds	r5, #1
    3326:	2d10      	cmp	r5, #16
    3328:	d006      	beq.n	3338 <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
    332a:	076b      	lsls	r3, r5, #29
    332c:	d1d4      	bne.n	32d8 <hexdump_line_print+0x60>
			print_formatted(output, " ");
    332e:	4903      	ldr	r1, [pc, #12]	; (333c <hexdump_line_print+0xc4>)
    3330:	4620      	mov	r0, r4
    3332:	f7ff fee3 	bl	30fc <print_formatted>
    3336:	e7cf      	b.n	32d8 <hexdump_line_print+0x60>
}
    3338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    333c:	0000bd60 	.word	0x0000bd60
    3340:	0000bd58 	.word	0x0000bd58
    3344:	0000bd62 	.word	0x0000bd62
    3348:	0000bd5e 	.word	0x0000bd5e
    334c:	0000d1f6 	.word	0x0000d1f6
    3350:	0000bd64 	.word	0x0000bd64

00003354 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    3354:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    3356:	07cb      	lsls	r3, r1, #31
{
    3358:	4605      	mov	r5, r0
    335a:	460c      	mov	r4, r1
	if (color) {
    335c:	d503      	bpl.n	3366 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    335e:	4a05      	ldr	r2, [pc, #20]	; (3374 <postfix_print+0x20>)
    3360:	4905      	ldr	r1, [pc, #20]	; (3378 <postfix_print+0x24>)
    3362:	f7ff fecb 	bl	30fc <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    3366:	4621      	mov	r1, r4
    3368:	4628      	mov	r0, r5
}
    336a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    336e:	f7ff bf75 	b.w	325c <newline_print>
    3372:	bf00      	nop
    3374:	0000bd15 	.word	0x0000bd15
    3378:	0000bd4c 	.word	0x0000bd4c

0000337c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    337c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    3380:	460e      	mov	r6, r1
    3382:	4690      	mov	r8, r2
    3384:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    3388:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    338a:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    338e:	4607      	mov	r7, r0
    3390:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    3392:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    3396:	d023      	beq.n	33e0 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    3398:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    339a:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    339c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    33a0:	b1d8      	cbz	r0, 33da <log_output_msg2_process+0x5e>
    33a2:	4930      	ldr	r1, [pc, #192]	; (3464 <log_output_msg2_process+0xe8>)
    33a4:	1a40      	subs	r0, r0, r1
    33a6:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    33aa:	e9cd 2001 	strd	r2, r0, [sp, #4]
    33ae:	f8cd 9000 	str.w	r9, [sp]
    33b2:	2200      	movs	r2, #0
    33b4:	4641      	mov	r1, r8
    33b6:	4638      	mov	r0, r7
    33b8:	f7ff feb2 	bl	3120 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    33bc:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    33be:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    33c2:	4682      	mov	sl, r0
	if (len) {
    33c4:	b9b3      	cbnz	r3, 33f4 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    33c6:	886c      	ldrh	r4, [r5, #2]
    33c8:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    33cc:	b9f4      	cbnz	r4, 340c <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    33ce:	464a      	mov	r2, r9
    33d0:	4641      	mov	r1, r8
    33d2:	4638      	mov	r0, r7
    33d4:	f7ff ffbe 	bl	3354 <postfix_print>
    33d8:	e02e      	b.n	3438 <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    33da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33de:	e7e4      	b.n	33aa <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    33e0:	680b      	ldr	r3, [r1, #0]
	if (len) {
    33e2:	f3c3 2349 	ubfx	r3, r3, #9, #10
    33e6:	bb6b      	cbnz	r3, 3444 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    33e8:	884c      	ldrh	r4, [r1, #2]
    33ea:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    33ee:	b31c      	cbz	r4, 3438 <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    33f0:	46ca      	mov	sl, r9
    33f2:	e00b      	b.n	340c <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    33f4:	481c      	ldr	r0, [pc, #112]	; (3468 <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    33f6:	491d      	ldr	r1, [pc, #116]	; (346c <log_output_msg2_process+0xf0>)
    33f8:	4633      	mov	r3, r6
    33fa:	463a      	mov	r2, r7
    33fc:	f006 fd53 	bl	9ea6 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    3400:	2800      	cmp	r0, #0
    3402:	db22      	blt.n	344a <log_output_msg2_process+0xce>
    3404:	886c      	ldrh	r4, [r5, #2]
    3406:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    340a:	b194      	cbz	r4, 3432 <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    340c:	682b      	ldr	r3, [r5, #0]
    340e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    3412:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3414:	2c10      	cmp	r4, #16
    3416:	4625      	mov	r5, r4
    3418:	bf28      	it	cs
    341a:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    341c:	4631      	mov	r1, r6
    341e:	f8cd 8000 	str.w	r8, [sp]
    3422:	4653      	mov	r3, sl
    3424:	462a      	mov	r2, r5
    3426:	4638      	mov	r0, r7
    3428:	f7ff ff26 	bl	3278 <hexdump_line_print>
	} while (len);
    342c:	1b64      	subs	r4, r4, r5
		data += length;
    342e:	442e      	add	r6, r5
	} while (len);
    3430:	d1f0      	bne.n	3414 <log_output_msg2_process+0x98>
	if (!raw_string) {
    3432:	f1b9 0f00 	cmp.w	r9, #0
    3436:	d1ca      	bne.n	33ce <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    3438:	4638      	mov	r0, r7
}
    343a:	b004      	add	sp, #16
    343c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    3440:	f006 bf0f 	b.w	a262 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3444:	480a      	ldr	r0, [pc, #40]	; (3470 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    3446:	46ca      	mov	sl, r9
    3448:	e7d5      	b.n	33f6 <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    344a:	4a0a      	ldr	r2, [pc, #40]	; (3474 <log_output_msg2_process+0xf8>)
    344c:	490a      	ldr	r1, [pc, #40]	; (3478 <log_output_msg2_process+0xfc>)
    344e:	480b      	ldr	r0, [pc, #44]	; (347c <log_output_msg2_process+0x100>)
    3450:	f240 23b7 	movw	r3, #695	; 0x2b7
    3454:	f006 feb6 	bl	a1c4 <assert_print>
    3458:	4806      	ldr	r0, [pc, #24]	; (3474 <log_output_msg2_process+0xf8>)
    345a:	f240 21b7 	movw	r1, #695	; 0x2b7
    345e:	f006 feaa 	bl	a1b6 <assert_post_action>
    3462:	e7cf      	b.n	3404 <log_output_msg2_process+0x88>
    3464:	0000b1a8 	.word	0x0000b1a8
    3468:	0000a213 	.word	0x0000a213
    346c:	00002769 	.word	0x00002769
    3470:	0000a22f 	.word	0x0000a22f
    3474:	0000bd67 	.word	0x0000bd67
    3478:	0000bda3 	.word	0x0000bda3
    347c:	0000b80f 	.word	0x0000b80f

00003480 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3480:	4a07      	ldr	r2, [pc, #28]	; (34a0 <log_output_timestamp_freq_set+0x20>)
    3482:	2100      	movs	r1, #0
    3484:	2301      	movs	r3, #1
    3486:	4290      	cmp	r0, r2
    3488:	d806      	bhi.n	3498 <log_output_timestamp_freq_set+0x18>
    348a:	4a06      	ldr	r2, [pc, #24]	; (34a4 <log_output_timestamp_freq_set+0x24>)
    348c:	b901      	cbnz	r1, 3490 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    348e:	2301      	movs	r3, #1
    3490:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    3492:	4b05      	ldr	r3, [pc, #20]	; (34a8 <log_output_timestamp_freq_set+0x28>)
    3494:	6018      	str	r0, [r3, #0]
}
    3496:	4770      	bx	lr
		frequency /= 2U;
    3498:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    349a:	005b      	lsls	r3, r3, #1
    349c:	2101      	movs	r1, #1
    349e:	e7f2      	b.n	3486 <log_output_timestamp_freq_set+0x6>
    34a0:	000f4240 	.word	0x000f4240
    34a4:	200007e4 	.word	0x200007e4
    34a8:	200007e8 	.word	0x200007e8

000034ac <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    34ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b0:	b085      	sub	sp, #20
    34b2:	af02      	add	r7, sp, #8
    34b4:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    34b8:	4604      	mov	r4, r0
    34ba:	4688      	mov	r8, r1
    34bc:	4693      	mov	fp, r2
    34be:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    34c0:	2e00      	cmp	r6, #0
    34c2:	d04e      	beq.n	3562 <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    34c4:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    34c8:	f8cd a000 	str.w	sl, [sp]
    34cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34ce:	4633      	mov	r3, r6
    34d0:	2110      	movs	r1, #16
    34d2:	2000      	movs	r0, #0
    34d4:	f7fe fa7a 	bl	19cc <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    34d8:	1e05      	subs	r5, r0, #0
    34da:	da09      	bge.n	34f0 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    34dc:	4922      	ldr	r1, [pc, #136]	; (3568 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    34de:	4823      	ldr	r0, [pc, #140]	; (356c <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    34e0:	4a23      	ldr	r2, [pc, #140]	; (3570 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    34e2:	2367      	movs	r3, #103	; 0x67
    34e4:	f006 fe6e 	bl	a1c4 <assert_print>
    34e8:	4821      	ldr	r0, [pc, #132]	; (3570 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    34ea:	2167      	movs	r1, #103	; 0x67
    34ec:	f006 fe63 	bl	a1b6 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    34f0:	4b20      	ldr	r3, [pc, #128]	; (3574 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    34f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    34f4:	f004 0407 	and.w	r4, r4, #7
    34f8:	f00b 0b07 	and.w	fp, fp, #7
    34fc:	00e4      	lsls	r4, r4, #3
    34fe:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    3502:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    3506:	431c      	orrs	r4, r3
    3508:	4b1b      	ldr	r3, [pc, #108]	; (3578 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    350a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    350e:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3510:	4613      	mov	r3, r2
    3512:	3317      	adds	r3, #23
    3514:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    3516:	f023 0307 	bic.w	r3, r3, #7
    351a:	ebad 0d03 	sub.w	sp, sp, r3
    351e:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3522:	b1a6      	cbz	r6, 354e <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3524:	f8cd a000 	str.w	sl, [sp]
    3528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    352a:	4633      	mov	r3, r6
    352c:	4629      	mov	r1, r5
    352e:	f10b 0010 	add.w	r0, fp, #16
    3532:	f7fe fa4b 	bl	19cc <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    3536:	2800      	cmp	r0, #0
    3538:	da09      	bge.n	354e <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    353a:	490b      	ldr	r1, [pc, #44]	; (3568 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    353c:	480b      	ldr	r0, [pc, #44]	; (356c <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    353e:	4a0c      	ldr	r2, [pc, #48]	; (3570 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3540:	2381      	movs	r3, #129	; 0x81
    3542:	f006 fe3f 	bl	a1c4 <assert_print>
    3546:	480a      	ldr	r0, [pc, #40]	; (3570 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3548:	2181      	movs	r1, #129	; 0x81
    354a:	f006 fe34 	bl	a1b6 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    354e:	464b      	mov	r3, r9
    3550:	4622      	mov	r2, r4
    3552:	4641      	mov	r1, r8
    3554:	4658      	mov	r0, fp
    3556:	f006 fe91 	bl	a27c <z_log_msg2_finalize>
	}
}
    355a:	370c      	adds	r7, #12
    355c:	46bd      	mov	sp, r7
    355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    3562:	4635      	mov	r5, r6
    3564:	e7c4      	b.n	34f0 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    3566:	bf00      	nop
    3568:	0000bdf9 	.word	0x0000bdf9
    356c:	0000b80f 	.word	0x0000b80f
    3570:	0000bdcc 	.word	0x0000bdcc
    3574:	0007fe00 	.word	0x0007fe00
    3578:	7ff80000 	.word	0x7ff80000

0000357c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    357e:	4f07      	ldr	r7, [pc, #28]	; (359c <char_out+0x20>)
{
    3580:	460d      	mov	r5, r1
    3582:	4604      	mov	r4, r0
    3584:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    3586:	42b4      	cmp	r4, r6
    3588:	d101      	bne.n	358e <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    358a:	4628      	mov	r0, r5
    358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    358e:	6838      	ldr	r0, [r7, #0]
    3590:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    3594:	6883      	ldr	r3, [r0, #8]
    3596:	69db      	ldr	r3, [r3, #28]
    3598:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    359a:	e7f4      	b.n	3586 <char_out+0xa>
    359c:	20000804 	.word	0x20000804

000035a0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    35a0:	4b01      	ldr	r3, [pc, #4]	; (35a8 <format_set+0x8>)
	return 0;
}
    35a2:	2000      	movs	r0, #0
	log_format_current = log_type;
    35a4:	6019      	str	r1, [r3, #0]
}
    35a6:	4770      	bx	lr
    35a8:	20000800 	.word	0x20000800

000035ac <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    35ac:	4b02      	ldr	r3, [pc, #8]	; (35b8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    35ae:	4803      	ldr	r0, [pc, #12]	; (35bc <panic+0x10>)
    35b0:	2201      	movs	r2, #1
    35b2:	701a      	strb	r2, [r3, #0]
    35b4:	f006 be55 	b.w	a262 <log_output_flush>
    35b8:	200090f7 	.word	0x200090f7
    35bc:	0000b304 	.word	0x0000b304

000035c0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    35c0:	4b06      	ldr	r3, [pc, #24]	; (35dc <process+0x1c>)
{
    35c2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    35c4:	6818      	ldr	r0, [r3, #0]
{
    35c6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    35c8:	f7ff fcb2 	bl	2f30 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    35cc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    35ce:	4603      	mov	r3, r0
}
    35d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    35d4:	4802      	ldr	r0, [pc, #8]	; (35e0 <process+0x20>)
    35d6:	220f      	movs	r2, #15
    35d8:	4718      	bx	r3
    35da:	bf00      	nop
    35dc:	20000800 	.word	0x20000800
    35e0:	0000b304 	.word	0x0000b304

000035e4 <log_backend_uart_init>:
{
    35e4:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    35e6:	4b09      	ldr	r3, [pc, #36]	; (360c <log_backend_uart_init+0x28>)
    35e8:	4809      	ldr	r0, [pc, #36]	; (3610 <log_backend_uart_init+0x2c>)
    35ea:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    35ec:	f007 fac8 	bl	ab80 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    35f0:	b958      	cbnz	r0, 360a <log_backend_uart_init+0x26>
    35f2:	4908      	ldr	r1, [pc, #32]	; (3614 <log_backend_uart_init+0x30>)
    35f4:	4808      	ldr	r0, [pc, #32]	; (3618 <log_backend_uart_init+0x34>)
    35f6:	4a09      	ldr	r2, [pc, #36]	; (361c <log_backend_uart_init+0x38>)
    35f8:	2379      	movs	r3, #121	; 0x79
    35fa:	f006 fde3 	bl	a1c4 <assert_print>
}
    35fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3602:	4806      	ldr	r0, [pc, #24]	; (361c <log_backend_uart_init+0x38>)
    3604:	2179      	movs	r1, #121	; 0x79
    3606:	f006 bdd6 	b.w	a1b6 <assert_post_action>
}
    360a:	bd08      	pop	{r3, pc}
    360c:	20000804 	.word	0x20000804
    3610:	0000b010 	.word	0x0000b010
    3614:	0000be38 	.word	0x0000be38
    3618:	0000b80f 	.word	0x0000b80f
    361c:	0000be03 	.word	0x0000be03

00003620 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3620:	4b01      	ldr	r3, [pc, #4]	; (3628 <log_backend_rtt_init+0x8>)
    3622:	2201      	movs	r2, #1
    3624:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3626:	4770      	bx	lr
    3628:	200090f8 	.word	0x200090f8

0000362c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    362c:	4b01      	ldr	r3, [pc, #4]	; (3634 <format_set+0x8>)
	return 0;
}
    362e:	2000      	movs	r0, #0
	log_format_current = log_type;
    3630:	6019      	str	r1, [r3, #0]
}
    3632:	4770      	bx	lr
    3634:	2000081c 	.word	0x2000081c

00003638 <panic>:
	panic_mode = true;
    3638:	4b02      	ldr	r3, [pc, #8]	; (3644 <panic+0xc>)
    363a:	4803      	ldr	r0, [pc, #12]	; (3648 <panic+0x10>)
    363c:	2201      	movs	r2, #1
    363e:	701a      	strb	r2, [r3, #0]
    3640:	f006 be0f 	b.w	a262 <log_output_flush>
    3644:	200090f9 	.word	0x200090f9
    3648:	0000b334 	.word	0x0000b334

0000364c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    364c:	4b06      	ldr	r3, [pc, #24]	; (3668 <process+0x1c>)
{
    364e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3650:	6818      	ldr	r0, [r3, #0]
{
    3652:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3654:	f7ff fc6c 	bl	2f30 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    3658:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    365a:	4603      	mov	r3, r0
}
    365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    3660:	4802      	ldr	r0, [pc, #8]	; (366c <process+0x20>)
    3662:	220f      	movs	r2, #15
    3664:	4718      	bx	r3
    3666:	bf00      	nop
    3668:	2000081c 	.word	0x2000081c
    366c:	0000b334 	.word	0x0000b334

00003670 <data_out_block_mode>:
{
    3670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3672:	4d19      	ldr	r5, [pc, #100]	; (36d8 <data_out_block_mode+0x68>)
    3674:	4607      	mov	r7, r0
    3676:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3678:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    367a:	4632      	mov	r2, r6
    367c:	4639      	mov	r1, r7
    367e:	2000      	movs	r0, #0
    3680:	f003 fc16 	bl	6eb0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3684:	b1c8      	cbz	r0, 36ba <data_out_block_mode+0x4a>
	host_present = true;
    3686:	2301      	movs	r3, #1
    3688:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    368a:	4b14      	ldr	r3, [pc, #80]	; (36dc <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	b92b      	cbnz	r3, 369c <data_out_block_mode+0x2c>
}
    3690:	4630      	mov	r0, r6
    3692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    3694:	b95c      	cbnz	r4, 36ae <data_out_block_mode+0x3e>
		host_present = false;
    3696:	702c      	strb	r4, [r5, #0]
    3698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    369c:	2000      	movs	r0, #0
    369e:	f003 fc4f 	bl	6f40 <SEGGER_RTT_HasDataUp>
    36a2:	2800      	cmp	r0, #0
    36a4:	d0f4      	beq.n	3690 <data_out_block_mode+0x20>
    36a6:	782b      	ldrb	r3, [r5, #0]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d1f3      	bne.n	3694 <data_out_block_mode+0x24>
    36ac:	e7f0      	b.n	3690 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    36ae:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    36b0:	f241 3088 	movw	r0, #5000	; 0x1388
    36b4:	f007 fae2 	bl	ac7c <z_impl_k_busy_wait>
}
    36b8:	e7f0      	b.n	369c <data_out_block_mode+0x2c>
		} else if (host_present) {
    36ba:	782b      	ldrb	r3, [r5, #0]
    36bc:	b113      	cbz	r3, 36c4 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    36be:	3c01      	subs	r4, #1
    36c0:	d104      	bne.n	36cc <data_out_block_mode+0x5c>
		host_present = false;
    36c2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    36c4:	782b      	ldrb	r3, [r5, #0]
    36c6:	2b00      	cmp	r3, #0
    36c8:	d1d7      	bne.n	367a <data_out_block_mode+0xa>
    36ca:	e7e1      	b.n	3690 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    36cc:	f241 3088 	movw	r0, #5000	; 0x1388
    36d0:	f007 fad4 	bl	ac7c <z_impl_k_busy_wait>
    36d4:	e7f6      	b.n	36c4 <data_out_block_mode+0x54>
    36d6:	bf00      	nop
    36d8:	200090f8 	.word	0x200090f8
    36dc:	200090f9 	.word	0x200090f9

000036e0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    36e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36e4:	4605      	mov	r5, r0
    36e6:	f04f 0320 	mov.w	r3, #32
    36ea:	f3ef 8611 	mrs	r6, BASEPRI
    36ee:	f383 8812 	msr	BASEPRI_MAX, r3
    36f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    36f6:	4821      	ldr	r0, [pc, #132]	; (377c <pm_state_notify+0x9c>)
    36f8:	f004 f802 	bl	7700 <z_spin_lock_valid>
    36fc:	b968      	cbnz	r0, 371a <pm_state_notify+0x3a>
    36fe:	4a20      	ldr	r2, [pc, #128]	; (3780 <pm_state_notify+0xa0>)
    3700:	4920      	ldr	r1, [pc, #128]	; (3784 <pm_state_notify+0xa4>)
    3702:	4821      	ldr	r0, [pc, #132]	; (3788 <pm_state_notify+0xa8>)
    3704:	238e      	movs	r3, #142	; 0x8e
    3706:	f006 fd5d 	bl	a1c4 <assert_print>
    370a:	491c      	ldr	r1, [pc, #112]	; (377c <pm_state_notify+0x9c>)
    370c:	481f      	ldr	r0, [pc, #124]	; (378c <pm_state_notify+0xac>)
    370e:	f006 fd59 	bl	a1c4 <assert_print>
    3712:	481b      	ldr	r0, [pc, #108]	; (3780 <pm_state_notify+0xa0>)
    3714:	218e      	movs	r1, #142	; 0x8e
    3716:	f006 fd4e 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    371a:	4818      	ldr	r0, [pc, #96]	; (377c <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    371c:	4f1c      	ldr	r7, [pc, #112]	; (3790 <pm_state_notify+0xb0>)
    371e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3794 <pm_state_notify+0xb4>
    3722:	f004 f80b 	bl	773c <z_spin_lock_set_owner>
	return list->head;
    3726:	4b1c      	ldr	r3, [pc, #112]	; (3798 <pm_state_notify+0xb8>)
    3728:	681c      	ldr	r4, [r3, #0]
    372a:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    372e:	b9bc      	cbnz	r4, 3760 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3730:	4812      	ldr	r0, [pc, #72]	; (377c <pm_state_notify+0x9c>)
    3732:	f003 fff3 	bl	771c <z_spin_unlock_valid>
    3736:	b968      	cbnz	r0, 3754 <pm_state_notify+0x74>
    3738:	4a11      	ldr	r2, [pc, #68]	; (3780 <pm_state_notify+0xa0>)
    373a:	4918      	ldr	r1, [pc, #96]	; (379c <pm_state_notify+0xbc>)
    373c:	4812      	ldr	r0, [pc, #72]	; (3788 <pm_state_notify+0xa8>)
    373e:	23b9      	movs	r3, #185	; 0xb9
    3740:	f006 fd40 	bl	a1c4 <assert_print>
    3744:	490d      	ldr	r1, [pc, #52]	; (377c <pm_state_notify+0x9c>)
    3746:	4816      	ldr	r0, [pc, #88]	; (37a0 <pm_state_notify+0xc0>)
    3748:	f006 fd3c 	bl	a1c4 <assert_print>
    374c:	480c      	ldr	r0, [pc, #48]	; (3780 <pm_state_notify+0xa0>)
    374e:	21b9      	movs	r1, #185	; 0xb9
    3750:	f006 fd31 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    3754:	f386 8811 	msr	BASEPRI, r6
    3758:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    375c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3760:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3764:	2d00      	cmp	r5, #0
    3766:	bf18      	it	ne
    3768:	4613      	movne	r3, r2
		if (callback) {
    376a:	b12b      	cbz	r3, 3778 <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    376c:	f898 2014 	ldrb.w	r2, [r8, #20]
    3770:	fb09 f202 	mul.w	r2, r9, r2
    3774:	5cb8      	ldrb	r0, [r7, r2]
    3776:	4798      	blx	r3
	return node->next;
    3778:	6824      	ldr	r4, [r4, #0]
    377a:	e7d8      	b.n	372e <pm_state_notify+0x4e>
    377c:	20000820 	.word	0x20000820
    3780:	0000b959 	.word	0x0000b959
    3784:	0000b9b2 	.word	0x0000b9b2
    3788:	0000b80f 	.word	0x0000b80f
    378c:	0000b9c7 	.word	0x0000b9c7
    3790:	20000828 	.word	0x20000828
    3794:	20000ed0 	.word	0x20000ed0
    3798:	20000834 	.word	0x20000834
    379c:	0000b986 	.word	0x0000b986
    37a0:	0000b99d 	.word	0x0000b99d

000037a4 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    37a4:	4a0a      	ldr	r2, [pc, #40]	; (37d0 <atomic_clear_bit.constprop.0+0x2c>)
    37a6:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    37aa:	0943      	lsrs	r3, r0, #5
    37ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    37b0:	f000 001f 	and.w	r0, r0, #31
    37b4:	2301      	movs	r3, #1
    37b6:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    37b8:	43db      	mvns	r3, r3
    37ba:	e852 0f00 	ldrex	r0, [r2]
    37be:	4018      	ands	r0, r3
    37c0:	e842 0100 	strex	r1, r0, [r2]
    37c4:	2900      	cmp	r1, #0
    37c6:	d1f8      	bne.n	37ba <atomic_clear_bit.constprop.0+0x16>
    37c8:	f3bf 8f5b 	dmb	ish
}
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop
    37d0:	20000824 	.word	0x20000824

000037d4 <pm_system_resume>:

void pm_system_resume(void)
{
    37d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    37d6:	4b19      	ldr	r3, [pc, #100]	; (383c <pm_system_resume+0x68>)
    37d8:	7d1c      	ldrb	r4, [r3, #20]
    37da:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    37de:	f004 031f 	and.w	r3, r4, #31
    37e2:	2201      	movs	r2, #1
    37e4:	409a      	lsls	r2, r3
    37e6:	4b16      	ldr	r3, [pc, #88]	; (3840 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    37e8:	0961      	lsrs	r1, r4, #5
    37ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    37ee:	43d0      	mvns	r0, r2
    37f0:	e853 1f00 	ldrex	r1, [r3]
    37f4:	ea01 0500 	and.w	r5, r1, r0
    37f8:	e843 5600 	strex	r6, r5, [r3]
    37fc:	2e00      	cmp	r6, #0
    37fe:	d1f7      	bne.n	37f0 <pm_system_resume+0x1c>
    3800:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3804:	420a      	tst	r2, r1
    3806:	d013      	beq.n	3830 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    3808:	4b0e      	ldr	r3, [pc, #56]	; (3844 <pm_system_resume+0x70>)
    380a:	4d0f      	ldr	r5, [pc, #60]	; (3848 <pm_system_resume+0x74>)
    380c:	b18b      	cbz	r3, 3832 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    380e:	230c      	movs	r3, #12
    3810:	4363      	muls	r3, r4
    3812:	18ea      	adds	r2, r5, r3
    3814:	5ce8      	ldrb	r0, [r5, r3]
    3816:	7851      	ldrb	r1, [r2, #1]
    3818:	f006 fd9c 	bl	a354 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    381c:	2000      	movs	r0, #0
    381e:	f7ff ff5f 	bl	36e0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3822:	230c      	movs	r3, #12
    3824:	435c      	muls	r4, r3
    3826:	192a      	adds	r2, r5, r4
    3828:	2300      	movs	r3, #0
    382a:	512b      	str	r3, [r5, r4]
    382c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3830:	bd70      	pop	{r4, r5, r6, pc}
    3832:	f383 8811 	msr	BASEPRI, r3
    3836:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    383a:	e7ef      	b.n	381c <pm_system_resume+0x48>
    383c:	20000ed0 	.word	0x20000ed0
    3840:	2000083c 	.word	0x2000083c
    3844:	0000a355 	.word	0x0000a355
    3848:	20000828 	.word	0x20000828

0000384c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3850:	4b32      	ldr	r3, [pc, #200]	; (391c <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3852:	4a33      	ldr	r2, [pc, #204]	; (3920 <pm_system_suspend+0xd4>)
    3854:	7d1c      	ldrb	r4, [r3, #20]
    3856:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    385a:	0963      	lsrs	r3, r4, #5
    385c:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3864:	4e2f      	ldr	r6, [pc, #188]	; (3924 <pm_system_suspend+0xd8>)
    3866:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    386a:	f004 091f 	and.w	r9, r4, #31
    386e:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3872:	f013 0f01 	tst.w	r3, #1
{
    3876:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3878:	d10a      	bne.n	3890 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    387a:	4601      	mov	r1, r0
    387c:	4620      	mov	r0, r4
    387e:	f000 f869 	bl	3954 <pm_policy_next_state>
		if (info != NULL) {
    3882:	b128      	cbz	r0, 3890 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    3884:	c807      	ldmia	r0, {r0, r1, r2}
    3886:	230c      	movs	r3, #12
    3888:	fb03 6304 	mla	r3, r3, r4, r6
    388c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3890:	230c      	movs	r3, #12
    3892:	4363      	muls	r3, r4
    3894:	18f2      	adds	r2, r6, r3
    3896:	5cf5      	ldrb	r5, [r6, r3]
    3898:	b92d      	cbnz	r5, 38a6 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    389a:	4620      	mov	r0, r4
    389c:	f7ff ff82 	bl	37a4 <atomic_clear_bit.constprop.0>
		ret = false;
    38a0:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    38a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    38a6:	1c7b      	adds	r3, r7, #1
    38a8:	d010      	beq.n	38cc <pm_system_suspend+0x80>
    38aa:	f8d2 c008 	ldr.w	ip, [r2, #8]
    38ae:	4d1e      	ldr	r5, [pc, #120]	; (3928 <pm_system_suspend+0xdc>)
    38b0:	4a1e      	ldr	r2, [pc, #120]	; (392c <pm_system_suspend+0xe0>)
    38b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    38b6:	2100      	movs	r1, #0
    38b8:	fbec 5100 	umlal	r5, r1, ip, r0
    38bc:	2300      	movs	r3, #0
    38be:	4628      	mov	r0, r5
    38c0:	f7fd f96a 	bl	b98 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    38c4:	2101      	movs	r1, #1
    38c6:	1a38      	subs	r0, r7, r0
    38c8:	f005 fd22 	bl	9310 <z_set_timeout_expiry>
	k_sched_lock();
    38cc:	f004 fc1c 	bl	8108 <k_sched_lock>
	pm_state_notify(true);
    38d0:	2001      	movs	r0, #1
    38d2:	f7ff ff05 	bl	36e0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38d6:	f3bf 8f5b 	dmb	ish
    38da:	4b15      	ldr	r3, [pc, #84]	; (3930 <pm_system_suspend+0xe4>)
    38dc:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    38de:	2301      	movs	r3, #1
    38e0:	fa03 f309 	lsl.w	r3, r3, r9
    38e4:	e858 2f00 	ldrex	r2, [r8]
    38e8:	431a      	orrs	r2, r3
    38ea:	e848 2100 	strex	r1, r2, [r8]
    38ee:	2900      	cmp	r1, #0
    38f0:	d1f8      	bne.n	38e4 <pm_system_suspend+0x98>
    38f2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    38f6:	4b0f      	ldr	r3, [pc, #60]	; (3934 <pm_system_suspend+0xe8>)
    38f8:	b133      	cbz	r3, 3908 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    38fa:	230c      	movs	r3, #12
    38fc:	4363      	muls	r3, r4
    38fe:	18f2      	adds	r2, r6, r3
    3900:	5cf0      	ldrb	r0, [r6, r3]
    3902:	7851      	ldrb	r1, [r2, #1]
    3904:	f006 fd1a 	bl	a33c <pm_state_set>
	pm_system_resume();
    3908:	f7ff ff64 	bl	37d4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    390c:	4620      	mov	r0, r4
    390e:	f7ff ff49 	bl	37a4 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    3912:	f004 fc6d 	bl	81f0 <k_sched_unlock>
	bool ret = true;
    3916:	2001      	movs	r0, #1
    3918:	e7c3      	b.n	38a2 <pm_system_suspend+0x56>
    391a:	bf00      	nop
    391c:	20000ed0 	.word	0x20000ed0
    3920:	20000824 	.word	0x20000824
    3924:	20000828 	.word	0x20000828
    3928:	000f423f 	.word	0x000f423f
    392c:	000f4240 	.word	0x000f4240
    3930:	2000083c 	.word	0x2000083c
    3934:	0000a33d 	.word	0x0000a33d

00003938 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3938:	4b05      	ldr	r3, [pc, #20]	; (3950 <pm_policy_state_lock_is_active+0x18>)
    393a:	f3bf 8f5b 	dmb	ish
    393e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3942:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    3946:	3800      	subs	r0, #0
    3948:	bf18      	it	ne
    394a:	2001      	movne	r0, #1
    394c:	4770      	bx	lr
    394e:	bf00      	nop
    3950:	20000840 	.word	0x20000840

00003954 <pm_policy_next_state>:
{
    3954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3958:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    395a:	a901      	add	r1, sp, #4
    395c:	f000 f842 	bl	39e4 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3960:	1e44      	subs	r4, r0, #1
    3962:	b224      	sxth	r4, r4
    3964:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3968:	f8df 906c 	ldr.w	r9, [pc, #108]	; 39d8 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    396c:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    396e:	00a4      	lsls	r4, r4, #2
    3970:	b925      	cbnz	r5, 397c <pm_policy_next_state+0x28>
	return NULL;
    3972:	462f      	mov	r7, r5
}
    3974:	4638      	mov	r0, r7
    3976:	b003      	add	sp, #12
    3978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    397c:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    397e:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    3980:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    3982:	f7ff ffd9 	bl	3938 <pm_policy_state_lock_is_active>
    3986:	4606      	mov	r6, r0
    3988:	bb10      	cbnz	r0, 39d0 <pm_policy_next_state+0x7c>
    398a:	6878      	ldr	r0, [r7, #4]
    398c:	4a13      	ldr	r2, [pc, #76]	; (39dc <pm_policy_next_state+0x88>)
    398e:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    3992:	46cc      	mov	ip, r9
    3994:	4631      	mov	r1, r6
    3996:	fbe0 c10a 	umlal	ip, r1, r0, sl
    399a:	2300      	movs	r3, #0
    399c:	4660      	mov	r0, ip
    399e:	f7fd f8fb 	bl	b98 <__aeabi_uldivmod>
    39a2:	4683      	mov	fp, r0
    39a4:	68b8      	ldr	r0, [r7, #8]
    39a6:	4a0d      	ldr	r2, [pc, #52]	; (39dc <pm_policy_next_state+0x88>)
    39a8:	46cc      	mov	ip, r9
    39aa:	4631      	mov	r1, r6
    39ac:	fbe0 c10a 	umlal	ip, r1, r0, sl
    39b0:	2300      	movs	r3, #0
    39b2:	4660      	mov	r0, ip
    39b4:	f7fd f8f0 	bl	b98 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    39b8:	4b09      	ldr	r3, [pc, #36]	; (39e0 <pm_policy_next_state+0x8c>)
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	1c5a      	adds	r2, r3, #1
    39be:	d001      	beq.n	39c4 <pm_policy_next_state+0x70>
    39c0:	4283      	cmp	r3, r0
    39c2:	d905      	bls.n	39d0 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    39c4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    39c8:	d0d4      	beq.n	3974 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    39ca:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    39cc:	4540      	cmp	r0, r8
    39ce:	d9d1      	bls.n	3974 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    39d0:	3d01      	subs	r5, #1
    39d2:	b2ad      	uxth	r5, r5
    39d4:	3c0c      	subs	r4, #12
    39d6:	e7cb      	b.n	3970 <pm_policy_next_state+0x1c>
    39d8:	000f423f 	.word	0x000f423f
    39dc:	000f4240 	.word	0x000f4240
    39e0:	20000008 	.word	0x20000008

000039e4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    39e4:	b908      	cbnz	r0, 39ea <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    39e6:	4b02      	ldr	r3, [pc, #8]	; (39f0 <pm_state_cpu_get_all+0xc>)
    39e8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    39ea:	2000      	movs	r0, #0
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	0000b344 	.word	0x0000b344

000039f4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    39f4:	4801      	ldr	r0, [pc, #4]	; (39fc <nrf_cc3xx_platform_abort_init+0x8>)
    39f6:	f006 b8c7 	b.w	9b88 <nrf_cc3xx_platform_set_abort>
    39fa:	bf00      	nop
    39fc:	0000b344 	.word	0x0000b344

00003a00 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a00:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3a02:	4604      	mov	r4, r0
    3a04:	b918      	cbnz	r0, 3a0e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3a06:	4b0d      	ldr	r3, [pc, #52]	; (3a3c <mutex_free_platform+0x3c>)
    3a08:	480d      	ldr	r0, [pc, #52]	; (3a40 <mutex_free_platform+0x40>)
    3a0a:	685b      	ldr	r3, [r3, #4]
    3a0c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3a0e:	6861      	ldr	r1, [r4, #4]
    3a10:	f031 0304 	bics.w	r3, r1, #4
    3a14:	d00c      	beq.n	3a30 <mutex_free_platform+0x30>
    3a16:	2908      	cmp	r1, #8
    3a18:	d00a      	beq.n	3a30 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3a1a:	f011 0102 	ands.w	r1, r1, #2
    3a1e:	d008      	beq.n	3a32 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3a20:	4808      	ldr	r0, [pc, #32]	; (3a44 <mutex_free_platform+0x44>)
    3a22:	4621      	mov	r1, r4
    3a24:	f003 fccc 	bl	73c0 <k_mem_slab_free>
        mutex->mutex = NULL;
    3a28:	2300      	movs	r3, #0
    3a2a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3a2c:	2300      	movs	r3, #0
    3a2e:	6063      	str	r3, [r4, #4]
}
    3a30:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3a32:	6820      	ldr	r0, [r4, #0]
    3a34:	2214      	movs	r2, #20
    3a36:	f007 fa5d 	bl	aef4 <memset>
    3a3a:	e7f7      	b.n	3a2c <mutex_free_platform+0x2c>
    3a3c:	2000014c 	.word	0x2000014c
    3a40:	0000be7f 	.word	0x0000be7f
    3a44:	20000d5c 	.word	0x20000d5c

00003a48 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a48:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3a4a:	b308      	cbz	r0, 3a90 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3a4c:	6843      	ldr	r3, [r0, #4]
    3a4e:	2b04      	cmp	r3, #4
    3a50:	d110      	bne.n	3a74 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3a52:	2201      	movs	r2, #1
    3a54:	6803      	ldr	r3, [r0, #0]
    3a56:	f3bf 8f5b 	dmb	ish
    3a5a:	e853 1f00 	ldrex	r1, [r3]
    3a5e:	2900      	cmp	r1, #0
    3a60:	d103      	bne.n	3a6a <mutex_lock_platform+0x22>
    3a62:	e843 2000 	strex	r0, r2, [r3]
    3a66:	2800      	cmp	r0, #0
    3a68:	d1f7      	bne.n	3a5a <mutex_lock_platform+0x12>
    3a6a:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a6e:	d10b      	bne.n	3a88 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3a70:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3a72:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a74:	b153      	cbz	r3, 3a8c <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3a76:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a80:	f003 fe96 	bl	77b0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3a84:	2800      	cmp	r0, #0
    3a86:	d0f3      	beq.n	3a70 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a88:	4803      	ldr	r0, [pc, #12]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a8a:	e7f2      	b.n	3a72 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3a8c:	4803      	ldr	r0, [pc, #12]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a8e:	e7f0      	b.n	3a72 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3a90:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3a94:	e7ed      	b.n	3a72 <mutex_lock_platform+0x2a>
    3a96:	bf00      	nop
    3a98:	ffff8fe9 	.word	0xffff8fe9
    3a9c:	ffff8fea 	.word	0xffff8fea

00003aa0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3aa0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3aa2:	b1c0      	cbz	r0, 3ad6 <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3aa4:	6843      	ldr	r3, [r0, #4]
    3aa6:	2b04      	cmp	r3, #4
    3aa8:	d110      	bne.n	3acc <mutex_unlock_platform+0x2c>
    3aaa:	2200      	movs	r2, #0
    3aac:	6803      	ldr	r3, [r0, #0]
    3aae:	f3bf 8f5b 	dmb	ish
    3ab2:	e853 1f00 	ldrex	r1, [r3]
    3ab6:	2901      	cmp	r1, #1
    3ab8:	d103      	bne.n	3ac2 <mutex_unlock_platform+0x22>
    3aba:	e843 2000 	strex	r0, r2, [r3]
    3abe:	2800      	cmp	r0, #0
    3ac0:	d1f7      	bne.n	3ab2 <mutex_unlock_platform+0x12>
    3ac2:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3ac6:	d109      	bne.n	3adc <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3ac8:	2000      	movs	r0, #0
    }
}
    3aca:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3acc:	b143      	cbz	r3, 3ae0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3ace:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3ad0:	f003 ff68 	bl	79a4 <z_impl_k_mutex_unlock>
    3ad4:	e7f8      	b.n	3ac8 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3ad6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3ada:	e7f6      	b.n	3aca <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3adc:	4801      	ldr	r0, [pc, #4]	; (3ae4 <mutex_unlock_platform+0x44>)
    3ade:	e7f4      	b.n	3aca <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3ae0:	4801      	ldr	r0, [pc, #4]	; (3ae8 <mutex_unlock_platform+0x48>)
    3ae2:	e7f2      	b.n	3aca <mutex_unlock_platform+0x2a>
    3ae4:	ffff8fe9 	.word	0xffff8fe9
    3ae8:	ffff8fea 	.word	0xffff8fea

00003aec <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3aec:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3aee:	4604      	mov	r4, r0
    3af0:	b918      	cbnz	r0, 3afa <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3af2:	4b16      	ldr	r3, [pc, #88]	; (3b4c <mutex_init_platform+0x60>)
    3af4:	4816      	ldr	r0, [pc, #88]	; (3b50 <mutex_init_platform+0x64>)
    3af6:	685b      	ldr	r3, [r3, #4]
    3af8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3afa:	6863      	ldr	r3, [r4, #4]
    3afc:	2b04      	cmp	r3, #4
    3afe:	d023      	beq.n	3b48 <mutex_init_platform+0x5c>
    3b00:	2b08      	cmp	r3, #8
    3b02:	d021      	beq.n	3b48 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b04:	b9cb      	cbnz	r3, 3b3a <mutex_init_platform+0x4e>
    3b06:	6823      	ldr	r3, [r4, #0]
    3b08:	b9bb      	cbnz	r3, 3b3a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3b0a:	4812      	ldr	r0, [pc, #72]	; (3b54 <mutex_init_platform+0x68>)
    3b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b14:	4621      	mov	r1, r4
    3b16:	f003 fbe7 	bl	72e8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3b1a:	b908      	cbnz	r0, 3b20 <mutex_init_platform+0x34>
    3b1c:	6823      	ldr	r3, [r4, #0]
    3b1e:	b91b      	cbnz	r3, 3b28 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3b20:	4b0a      	ldr	r3, [pc, #40]	; (3b4c <mutex_init_platform+0x60>)
    3b22:	480d      	ldr	r0, [pc, #52]	; (3b58 <mutex_init_platform+0x6c>)
    3b24:	685b      	ldr	r3, [r3, #4]
    3b26:	4798      	blx	r3
    3b28:	6820      	ldr	r0, [r4, #0]
    3b2a:	2214      	movs	r2, #20
    3b2c:	2100      	movs	r1, #0
    3b2e:	f007 f9e1 	bl	aef4 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b32:	6863      	ldr	r3, [r4, #4]
    3b34:	f043 0302 	orr.w	r3, r3, #2
    3b38:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3b3a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3b3c:	f007 f871 	bl	ac22 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3b40:	6863      	ldr	r3, [r4, #4]
    3b42:	f043 0301 	orr.w	r3, r3, #1
    3b46:	6063      	str	r3, [r4, #4]
}
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	bf00      	nop
    3b4c:	2000014c 	.word	0x2000014c
    3b50:	0000be7f 	.word	0x0000be7f
    3b54:	20000d5c 	.word	0x20000d5c
    3b58:	0000bea5 	.word	0x0000bea5

00003b5c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3b5c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3b5e:	4906      	ldr	r1, [pc, #24]	; (3b78 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3b60:	4806      	ldr	r0, [pc, #24]	; (3b7c <nrf_cc3xx_platform_mutex_init+0x20>)
    3b62:	2340      	movs	r3, #64	; 0x40
    3b64:	2214      	movs	r2, #20
    3b66:	f007 f829 	bl	abbc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3b6e:	4904      	ldr	r1, [pc, #16]	; (3b80 <nrf_cc3xx_platform_mutex_init+0x24>)
    3b70:	4804      	ldr	r0, [pc, #16]	; (3b84 <nrf_cc3xx_platform_mutex_init+0x28>)
    3b72:	f006 b869 	b.w	9c48 <nrf_cc3xx_platform_set_mutexes>
    3b76:	bf00      	nop
    3b78:	2000085c 	.word	0x2000085c
    3b7c:	20000d5c 	.word	0x20000d5c
    3b80:	0000b34c 	.word	0x0000b34c
    3b84:	0000b360 	.word	0x0000b360

00003b88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3b88:	4901      	ldr	r1, [pc, #4]	; (3b90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3b8a:	2210      	movs	r2, #16
	str	r2, [r1]
    3b8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3b8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3b90:	e000ed10 	.word	0xe000ed10

00003b94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3b94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3b96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3b98:	f380 8811 	msr	BASEPRI, r0
	isb
    3b9c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3ba0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3ba4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ba6:	b662      	cpsie	i
	isb
    3ba8:	f3bf 8f6f 	isb	sy

	bx	lr
    3bac:	4770      	bx	lr
    3bae:	bf00      	nop

00003bb0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3bb0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3bb2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3bb4:	f381 8811 	msr	BASEPRI, r1

	wfe
    3bb8:	bf20      	wfe

	msr	BASEPRI, r0
    3bba:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3bbe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop

00003bc4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3bc4:	b570      	push	{r4, r5, r6, lr}
    3bc6:	4606      	mov	r6, r0
    3bc8:	b086      	sub	sp, #24

	if (esf != NULL) {
    3bca:	460d      	mov	r5, r1
    3bcc:	2900      	cmp	r1, #0
    3bce:	d038      	beq.n	3c42 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3bd0:	688b      	ldr	r3, [r1, #8]
    3bd2:	9305      	str	r3, [sp, #20]
    3bd4:	684b      	ldr	r3, [r1, #4]
    3bd6:	9304      	str	r3, [sp, #16]
    3bd8:	680b      	ldr	r3, [r1, #0]
    3bda:	9303      	str	r3, [sp, #12]
    3bdc:	2400      	movs	r4, #0
    3bde:	4b1c      	ldr	r3, [pc, #112]	; (3c50 <z_arm_fatal_error+0x8c>)
    3be0:	491c      	ldr	r1, [pc, #112]	; (3c54 <z_arm_fatal_error+0x90>)
    3be2:	9302      	str	r3, [sp, #8]
    3be4:	2201      	movs	r2, #1
    3be6:	4623      	mov	r3, r4
    3be8:	4620      	mov	r0, r4
    3bea:	e9cd 4400 	strd	r4, r4, [sp]
    3bee:	f006 fb63 	bl	a2b8 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3bf2:	696b      	ldr	r3, [r5, #20]
    3bf4:	9305      	str	r3, [sp, #20]
    3bf6:	692b      	ldr	r3, [r5, #16]
    3bf8:	9304      	str	r3, [sp, #16]
    3bfa:	68eb      	ldr	r3, [r5, #12]
    3bfc:	9303      	str	r3, [sp, #12]
    3bfe:	4b16      	ldr	r3, [pc, #88]	; (3c58 <z_arm_fatal_error+0x94>)
    3c00:	4914      	ldr	r1, [pc, #80]	; (3c54 <z_arm_fatal_error+0x90>)
    3c02:	9400      	str	r4, [sp, #0]
    3c04:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3c08:	2201      	movs	r2, #1
    3c0a:	4623      	mov	r3, r4
    3c0c:	4620      	mov	r0, r4
    3c0e:	f006 fb53 	bl	a2b8 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3c12:	69eb      	ldr	r3, [r5, #28]
    3c14:	9303      	str	r3, [sp, #12]
    3c16:	4b11      	ldr	r3, [pc, #68]	; (3c5c <z_arm_fatal_error+0x98>)
    3c18:	490e      	ldr	r1, [pc, #56]	; (3c54 <z_arm_fatal_error+0x90>)
    3c1a:	9400      	str	r4, [sp, #0]
    3c1c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3c20:	2201      	movs	r2, #1
    3c22:	4623      	mov	r3, r4
    3c24:	4620      	mov	r0, r4
    3c26:	f006 fb47 	bl	a2b8 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3c2a:	69ab      	ldr	r3, [r5, #24]
    3c2c:	9303      	str	r3, [sp, #12]
    3c2e:	4b0c      	ldr	r3, [pc, #48]	; (3c60 <z_arm_fatal_error+0x9c>)
    3c30:	4908      	ldr	r1, [pc, #32]	; (3c54 <z_arm_fatal_error+0x90>)
    3c32:	9400      	str	r4, [sp, #0]
    3c34:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3c38:	2201      	movs	r2, #1
    3c3a:	4623      	mov	r3, r4
    3c3c:	4620      	mov	r0, r4
    3c3e:	f006 fb3b 	bl	a2b8 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3c42:	4629      	mov	r1, r5
    3c44:	4630      	mov	r0, r6
}
    3c46:	b006      	add	sp, #24
    3c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3c4c:	f003 b9cc 	b.w	6fe8 <z_fatal_error>
    3c50:	0000bed2 	.word	0x0000bed2
    3c54:	0000b1d0 	.word	0x0000b1d0
    3c58:	0000bf01 	.word	0x0000bf01
    3c5c:	0000bf30 	.word	0x0000bf30
    3c60:	0000bf3f 	.word	0x0000bf3f

00003c64 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c64:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c66:	2800      	cmp	r0, #0
    3c68:	db07      	blt.n	3c7a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c6a:	4a04      	ldr	r2, [pc, #16]	; (3c7c <arch_irq_enable+0x18>)
    3c6c:	0941      	lsrs	r1, r0, #5
    3c6e:	2301      	movs	r3, #1
    3c70:	f000 001f 	and.w	r0, r0, #31
    3c74:	4083      	lsls	r3, r0
    3c76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3c7a:	4770      	bx	lr
    3c7c:	e000e100 	.word	0xe000e100

00003c80 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3c80:	4b05      	ldr	r3, [pc, #20]	; (3c98 <arch_irq_is_enabled+0x18>)
    3c82:	0942      	lsrs	r2, r0, #5
    3c84:	f000 001f 	and.w	r0, r0, #31
    3c88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c8c:	2301      	movs	r3, #1
    3c8e:	fa03 f000 	lsl.w	r0, r3, r0
}
    3c92:	4010      	ands	r0, r2
    3c94:	4770      	bx	lr
    3c96:	bf00      	nop
    3c98:	e000e100 	.word	0xe000e100

00003c9c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3c9c:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3c9e:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3ca0:	2d07      	cmp	r5, #7
{
    3ca2:	4604      	mov	r4, r0
    3ca4:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3ca6:	d90f      	bls.n	3cc8 <z_arm_irq_priority_set+0x2c>
    3ca8:	4a11      	ldr	r2, [pc, #68]	; (3cf0 <z_arm_irq_priority_set+0x54>)
    3caa:	4912      	ldr	r1, [pc, #72]	; (3cf4 <z_arm_irq_priority_set+0x58>)
    3cac:	4812      	ldr	r0, [pc, #72]	; (3cf8 <z_arm_irq_priority_set+0x5c>)
    3cae:	2357      	movs	r3, #87	; 0x57
    3cb0:	f006 fa88 	bl	a1c4 <assert_print>
    3cb4:	4811      	ldr	r0, [pc, #68]	; (3cfc <z_arm_irq_priority_set+0x60>)
    3cb6:	4631      	mov	r1, r6
    3cb8:	2307      	movs	r3, #7
    3cba:	4622      	mov	r2, r4
    3cbc:	f006 fa82 	bl	a1c4 <assert_print>
    3cc0:	480b      	ldr	r0, [pc, #44]	; (3cf0 <z_arm_irq_priority_set+0x54>)
    3cc2:	2157      	movs	r1, #87	; 0x57
    3cc4:	f006 fa77 	bl	a1b6 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3cc8:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3cca:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ccc:	bfac      	ite	ge
    3cce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cd2:	4b0b      	ldrlt	r3, [pc, #44]	; (3d00 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cd4:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cd8:	bfb8      	it	lt
    3cda:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3cde:	b2ed      	uxtb	r5, r5
    3ce0:	bfaa      	itet	ge
    3ce2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ce6:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ce8:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	bf00      	nop
    3cf0:	0000bf6d 	.word	0x0000bf6d
    3cf4:	0000bfa3 	.word	0x0000bfa3
    3cf8:	0000b80f 	.word	0x0000b80f
    3cfc:	0000bfbe 	.word	0x0000bfbe
    3d00:	e000ed14 	.word	0xe000ed14

00003d04 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d04:	bf30      	wfi
    b z_SysNmiOnReset
    3d06:	f7ff bffd 	b.w	3d04 <z_SysNmiOnReset>
    3d0a:	bf00      	nop

00003d0c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d0c:	4a0b      	ldr	r2, [pc, #44]	; (3d3c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3d0e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d10:	4b0b      	ldr	r3, [pc, #44]	; (3d40 <z_arm_prep_c+0x34>)
    3d12:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d16:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3d18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d1c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3d20:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3d24:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3d2c:	f003 f9f0 	bl	7110 <z_bss_zero>
	z_data_copy();
    3d30:	f005 f928 	bl	8f84 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3d34:	f000 fbe0 	bl	44f8 <z_arm_interrupt_init>
	z_cstart();
    3d38:	f003 fa2e 	bl	7198 <z_cstart>
    3d3c:	00000000 	.word	0x00000000
    3d40:	e000ed00 	.word	0xe000ed00

00003d44 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3d44:	4a09      	ldr	r2, [pc, #36]	; (3d6c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3d46:	490a      	ldr	r1, [pc, #40]	; (3d70 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3d48:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3d4a:	6809      	ldr	r1, [r1, #0]
    3d4c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d4e:	4909      	ldr	r1, [pc, #36]	; (3d74 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3d50:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d52:	684b      	ldr	r3, [r1, #4]
    3d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d58:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3d5a:	2300      	movs	r3, #0
    3d5c:	f383 8811 	msr	BASEPRI, r3
    3d60:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3d64:	6893      	ldr	r3, [r2, #8]
}
    3d66:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3d68:	4770      	bx	lr
    3d6a:	bf00      	nop
    3d6c:	20000ed0 	.word	0x20000ed0
    3d70:	0000b4cc 	.word	0x0000b4cc
    3d74:	e000ed00 	.word	0xe000ed00

00003d78 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3d78:	4912      	ldr	r1, [pc, #72]	; (3dc4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3d7a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3d7c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3d80:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3d82:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3d86:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3d8a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3d8c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3d90:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3d94:	4f0c      	ldr	r7, [pc, #48]	; (3dc8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3d96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3d9a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3d9c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3d9e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3da0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3da2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3da4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3da6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3daa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3dac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3dae:	f000 fc3f 	bl	4630 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3db2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3db6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3dba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3dbe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3dc2:	4770      	bx	lr
    ldr r1, =_kernel
    3dc4:	20000ed0 	.word	0x20000ed0
    ldr v4, =_SCS_ICSR
    3dc8:	e000ed04 	.word	0xe000ed04

00003dcc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3dcc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3dd0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3dd2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3dd6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3dda:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3ddc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3de0:	2902      	cmp	r1, #2
    beq _oops
    3de2:	d0ff      	beq.n	3de4 <_oops>

00003de4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3de4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3de6:	f006 fa77 	bl	a2d8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3dea:	bd01      	pop	{r0, pc}

00003dec <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3dec:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3df0:	9b00      	ldr	r3, [sp, #0]
    3df2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3df6:	490a      	ldr	r1, [pc, #40]	; (3e20 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3df8:	9b01      	ldr	r3, [sp, #4]
    3dfa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3dfe:	9b02      	ldr	r3, [sp, #8]
    3e00:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3e04:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3e0c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3e10:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3e14:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3e16:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3e18:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3e1a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3e1c:	4770      	bx	lr
    3e1e:	bf00      	nop
    3e20:	00009fef 	.word	0x00009fef

00003e24 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3e24:	4a09      	ldr	r2, [pc, #36]	; (3e4c <z_check_thread_stack_fail+0x28>)
{
    3e26:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3e28:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3e2a:	b170      	cbz	r0, 3e4a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3e2c:	f113 0f16 	cmn.w	r3, #22
    3e30:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3e32:	d005      	beq.n	3e40 <z_check_thread_stack_fail+0x1c>
    3e34:	f1a0 0220 	sub.w	r2, r0, #32
    3e38:	429a      	cmp	r2, r3
    3e3a:	d805      	bhi.n	3e48 <z_check_thread_stack_fail+0x24>
    3e3c:	4283      	cmp	r3, r0
    3e3e:	d203      	bcs.n	3e48 <z_check_thread_stack_fail+0x24>
		return 0;
    3e40:	4281      	cmp	r1, r0
    3e42:	bf28      	it	cs
    3e44:	2000      	movcs	r0, #0
    3e46:	4770      	bx	lr
    3e48:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3e4a:	4770      	bx	lr
    3e4c:	20000ed0 	.word	0x20000ed0

00003e50 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3e50:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3e52:	4b09      	ldr	r3, [pc, #36]	; (3e78 <arch_switch_to_main_thread+0x28>)
    3e54:	6098      	str	r0, [r3, #8]
{
    3e56:	460d      	mov	r5, r1
    3e58:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3e5a:	f000 fbe9 	bl	4630 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3e5e:	4620      	mov	r0, r4
    3e60:	f385 8809 	msr	PSP, r5
    3e64:	2100      	movs	r1, #0
    3e66:	b663      	cpsie	if
    3e68:	f381 8811 	msr	BASEPRI, r1
    3e6c:	f3bf 8f6f 	isb	sy
    3e70:	2200      	movs	r2, #0
    3e72:	2300      	movs	r3, #0
    3e74:	f006 f8bb 	bl	9fee <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3e78:	20000ed0 	.word	0x20000ed0

00003e7c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e7c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e7e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e80:	4a0b      	ldr	r2, [pc, #44]	; (3eb0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e82:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3e84:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e86:	bf1e      	ittt	ne
	movne	r1, #0
    3e88:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e8a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3e8c:	f006 feba 	blne	ac04 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3e90:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3e92:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3e96:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3e9a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3e9e:	4905      	ldr	r1, [pc, #20]	; (3eb4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3ea0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3ea2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3ea4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3ea6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3eaa:	4903      	ldr	r1, [pc, #12]	; (3eb8 <_isr_wrapper+0x3c>)
	bx r1
    3eac:	4708      	bx	r1
    3eae:	0000      	.short	0x0000
	ldr r2, =_kernel
    3eb0:	20000ed0 	.word	0x20000ed0
	ldr r1, =_sw_isr_table
    3eb4:	0000b028 	.word	0x0000b028
	ldr r1, =z_arm_int_exit
    3eb8:	00003ebd 	.word	0x00003ebd

00003ebc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ebc:	4b04      	ldr	r3, [pc, #16]	; (3ed0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ebe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ec0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3ec2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3ec4:	d003      	beq.n	3ece <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3ec6:	4903      	ldr	r1, [pc, #12]	; (3ed4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ecc:	600a      	str	r2, [r1, #0]

00003ece <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ece:	4770      	bx	lr
	ldr r3, =_kernel
    3ed0:	20000ed0 	.word	0x20000ed0
	ldr r1, =_SCS_ICSR
    3ed4:	e000ed04 	.word	0xe000ed04

00003ed8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eda:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3edc:	2400      	movs	r4, #0
    3ede:	4b3b      	ldr	r3, [pc, #236]	; (3fcc <bus_fault.constprop.0+0xf4>)
    3ee0:	9302      	str	r3, [sp, #8]
    3ee2:	e9cd 4400 	strd	r4, r4, [sp]
    3ee6:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ee8:	4607      	mov	r7, r0
    3eea:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3eec:	2201      	movs	r2, #1
    3eee:	4938      	ldr	r1, [pc, #224]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3ef0:	4620      	mov	r0, r4
    3ef2:	f006 fa00 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ef6:	4b37      	ldr	r3, [pc, #220]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3efa:	04db      	lsls	r3, r3, #19
    3efc:	d509      	bpl.n	3f12 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    3efe:	4b36      	ldr	r3, [pc, #216]	; (3fd8 <bus_fault.constprop.0+0x100>)
    3f00:	4933      	ldr	r1, [pc, #204]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3f02:	9400      	str	r4, [sp, #0]
    3f04:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3f08:	2201      	movs	r2, #1
    3f0a:	4623      	mov	r3, r4
    3f0c:	4620      	mov	r0, r4
    3f0e:	f006 f9f2 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f12:	4b30      	ldr	r3, [pc, #192]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f16:	051d      	lsls	r5, r3, #20
    3f18:	d509      	bpl.n	3f2e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    3f1a:	4b30      	ldr	r3, [pc, #192]	; (3fdc <bus_fault.constprop.0+0x104>)
    3f1c:	9302      	str	r3, [sp, #8]
    3f1e:	2300      	movs	r3, #0
    3f20:	e9cd 3300 	strd	r3, r3, [sp]
    3f24:	492a      	ldr	r1, [pc, #168]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3f26:	2201      	movs	r2, #1
    3f28:	4618      	mov	r0, r3
    3f2a:	f006 f9e4 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f2e:	4d29      	ldr	r5, [pc, #164]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3f30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f32:	059c      	lsls	r4, r3, #22
    3f34:	d51e      	bpl.n	3f74 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    3f36:	2400      	movs	r4, #0
    3f38:	4b29      	ldr	r3, [pc, #164]	; (3fe0 <bus_fault.constprop.0+0x108>)
    3f3a:	9302      	str	r3, [sp, #8]
    3f3c:	2201      	movs	r2, #1
    3f3e:	4623      	mov	r3, r4
    3f40:	4620      	mov	r0, r4
    3f42:	e9cd 4400 	strd	r4, r4, [sp]
    3f46:	4922      	ldr	r1, [pc, #136]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3f48:	f006 f9d5 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3f4c:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f4e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3f50:	0410      	lsls	r0, r2, #16
    3f52:	d50f      	bpl.n	3f74 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3f54:	9303      	str	r3, [sp, #12]
    3f56:	4b23      	ldr	r3, [pc, #140]	; (3fe4 <bus_fault.constprop.0+0x10c>)
    3f58:	491d      	ldr	r1, [pc, #116]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3f5a:	9400      	str	r4, [sp, #0]
    3f5c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3f60:	2201      	movs	r2, #1
    3f62:	4623      	mov	r3, r4
    3f64:	4620      	mov	r0, r4
    3f66:	f006 f9c6 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3f6a:	b11f      	cbz	r7, 3f74 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3f72:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f74:	4b17      	ldr	r3, [pc, #92]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f78:	0559      	lsls	r1, r3, #21
    3f7a:	d509      	bpl.n	3f90 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    3f7c:	4b1a      	ldr	r3, [pc, #104]	; (3fe8 <bus_fault.constprop.0+0x110>)
    3f7e:	9302      	str	r3, [sp, #8]
    3f80:	2300      	movs	r3, #0
    3f82:	e9cd 3300 	strd	r3, r3, [sp]
    3f86:	4912      	ldr	r1, [pc, #72]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3f88:	2201      	movs	r2, #1
    3f8a:	4618      	mov	r0, r3
    3f8c:	f006 f9b3 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f90:	4a10      	ldr	r2, [pc, #64]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3f92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f94:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    3f98:	d012      	beq.n	3fc0 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    3f9a:	4b14      	ldr	r3, [pc, #80]	; (3fec <bus_fault.constprop.0+0x114>)
    3f9c:	9302      	str	r3, [sp, #8]
    3f9e:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3fa0:	e9cd 3300 	strd	r3, r3, [sp]
    3fa4:	490a      	ldr	r1, [pc, #40]	; (3fd0 <bus_fault.constprop.0+0xf8>)
    3fa6:	2201      	movs	r2, #1
    3fa8:	4618      	mov	r0, r3
    3faa:	f006 f9a4 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3fae:	4a09      	ldr	r2, [pc, #36]	; (3fd4 <bus_fault.constprop.0+0xfc>)
    3fb0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3fb2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3fb4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3fb8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3fba:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3fbc:	b005      	add	sp, #20
    3fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3fc0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3fc2:	0492      	lsls	r2, r2, #18
    3fc4:	d5f3      	bpl.n	3fae <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3fc6:	4a0a      	ldr	r2, [pc, #40]	; (3ff0 <bus_fault.constprop.0+0x118>)
    3fc8:	9202      	str	r2, [sp, #8]
    3fca:	e7e9      	b.n	3fa0 <bus_fault.constprop.0+0xc8>
    3fcc:	0000bffe 	.word	0x0000bffe
    3fd0:	0000b1d0 	.word	0x0000b1d0
    3fd4:	e000ed00 	.word	0xe000ed00
    3fd8:	0000c014 	.word	0x0000c014
    3fdc:	0000c025 	.word	0x0000c025
    3fe0:	0000c038 	.word	0x0000c038
    3fe4:	0000c051 	.word	0x0000c051
    3fe8:	0000c066 	.word	0x0000c066
    3fec:	0000c081 	.word	0x0000c081
    3ff0:	0000c099 	.word	0x0000c099

00003ff4 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3ff6:	2400      	movs	r4, #0
    3ff8:	4b33      	ldr	r3, [pc, #204]	; (40c8 <usage_fault.constprop.0+0xd4>)
    3ffa:	9302      	str	r3, [sp, #8]
    3ffc:	e9cd 4400 	strd	r4, r4, [sp]
    4000:	4623      	mov	r3, r4
    4002:	4932      	ldr	r1, [pc, #200]	; (40cc <usage_fault.constprop.0+0xd8>)
    4004:	2201      	movs	r2, #1
    4006:	4620      	mov	r0, r4
    4008:	f006 f975 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    400c:	4b30      	ldr	r3, [pc, #192]	; (40d0 <usage_fault.constprop.0+0xdc>)
    400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4010:	019b      	lsls	r3, r3, #6
    4012:	d509      	bpl.n	4028 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    4014:	4b2f      	ldr	r3, [pc, #188]	; (40d4 <usage_fault.constprop.0+0xe0>)
    4016:	492d      	ldr	r1, [pc, #180]	; (40cc <usage_fault.constprop.0+0xd8>)
    4018:	9400      	str	r4, [sp, #0]
    401a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    401e:	2201      	movs	r2, #1
    4020:	4623      	mov	r3, r4
    4022:	4620      	mov	r0, r4
    4024:	f006 f967 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4028:	4b29      	ldr	r3, [pc, #164]	; (40d0 <usage_fault.constprop.0+0xdc>)
    402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    402c:	01dc      	lsls	r4, r3, #7
    402e:	d509      	bpl.n	4044 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    4030:	4b29      	ldr	r3, [pc, #164]	; (40d8 <usage_fault.constprop.0+0xe4>)
    4032:	9302      	str	r3, [sp, #8]
    4034:	2300      	movs	r3, #0
    4036:	e9cd 3300 	strd	r3, r3, [sp]
    403a:	4924      	ldr	r1, [pc, #144]	; (40cc <usage_fault.constprop.0+0xd8>)
    403c:	2201      	movs	r2, #1
    403e:	4618      	mov	r0, r3
    4040:	f006 f959 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4044:	4b22      	ldr	r3, [pc, #136]	; (40d0 <usage_fault.constprop.0+0xdc>)
    4046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4048:	0318      	lsls	r0, r3, #12
    404a:	d509      	bpl.n	4060 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    404c:	4b23      	ldr	r3, [pc, #140]	; (40dc <usage_fault.constprop.0+0xe8>)
    404e:	9302      	str	r3, [sp, #8]
    4050:	2300      	movs	r3, #0
    4052:	e9cd 3300 	strd	r3, r3, [sp]
    4056:	491d      	ldr	r1, [pc, #116]	; (40cc <usage_fault.constprop.0+0xd8>)
    4058:	2201      	movs	r2, #1
    405a:	4618      	mov	r0, r3
    405c:	f006 f94b 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4060:	4b1b      	ldr	r3, [pc, #108]	; (40d0 <usage_fault.constprop.0+0xdc>)
    4062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4064:	0359      	lsls	r1, r3, #13
    4066:	d509      	bpl.n	407c <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4068:	4b1d      	ldr	r3, [pc, #116]	; (40e0 <usage_fault.constprop.0+0xec>)
    406a:	9302      	str	r3, [sp, #8]
    406c:	2300      	movs	r3, #0
    406e:	e9cd 3300 	strd	r3, r3, [sp]
    4072:	4916      	ldr	r1, [pc, #88]	; (40cc <usage_fault.constprop.0+0xd8>)
    4074:	2201      	movs	r2, #1
    4076:	4618      	mov	r0, r3
    4078:	f006 f93d 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    407c:	4b14      	ldr	r3, [pc, #80]	; (40d0 <usage_fault.constprop.0+0xdc>)
    407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4080:	039a      	lsls	r2, r3, #14
    4082:	d509      	bpl.n	4098 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4084:	4b17      	ldr	r3, [pc, #92]	; (40e4 <usage_fault.constprop.0+0xf0>)
    4086:	9302      	str	r3, [sp, #8]
    4088:	2300      	movs	r3, #0
    408a:	e9cd 3300 	strd	r3, r3, [sp]
    408e:	490f      	ldr	r1, [pc, #60]	; (40cc <usage_fault.constprop.0+0xd8>)
    4090:	2201      	movs	r2, #1
    4092:	4618      	mov	r0, r3
    4094:	f006 f92f 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4098:	4b0d      	ldr	r3, [pc, #52]	; (40d0 <usage_fault.constprop.0+0xdc>)
    409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    409c:	03db      	lsls	r3, r3, #15
    409e:	d509      	bpl.n	40b4 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    40a0:	4b11      	ldr	r3, [pc, #68]	; (40e8 <usage_fault.constprop.0+0xf4>)
    40a2:	9302      	str	r3, [sp, #8]
    40a4:	2300      	movs	r3, #0
    40a6:	e9cd 3300 	strd	r3, r3, [sp]
    40aa:	4908      	ldr	r1, [pc, #32]	; (40cc <usage_fault.constprop.0+0xd8>)
    40ac:	2201      	movs	r2, #1
    40ae:	4618      	mov	r0, r3
    40b0:	f006 f921 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    40b4:	4a06      	ldr	r2, [pc, #24]	; (40d0 <usage_fault.constprop.0+0xdc>)
    40b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40b8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    40bc:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    40c0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    40c2:	6293      	str	r3, [r2, #40]	; 0x28
}
    40c4:	b004      	add	sp, #16
    40c6:	bd10      	pop	{r4, pc}
    40c8:	0000c0c8 	.word	0x0000c0c8
    40cc:	0000b1d0 	.word	0x0000b1d0
    40d0:	e000ed00 	.word	0xe000ed00
    40d4:	0000c0e0 	.word	0x0000c0e0
    40d8:	0000c0f3 	.word	0x0000c0f3
    40dc:	0000c10d 	.word	0x0000c10d
    40e0:	0000c12b 	.word	0x0000c12b
    40e4:	0000c150 	.word	0x0000c150
    40e8:	0000c16a 	.word	0x0000c16a

000040ec <mem_manage_fault>:
{
    40ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    40f0:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    40f2:	2400      	movs	r4, #0
    40f4:	4b52      	ldr	r3, [pc, #328]	; (4240 <mem_manage_fault+0x154>)
    40f6:	9302      	str	r3, [sp, #8]
    40f8:	e9cd 4400 	strd	r4, r4, [sp]
    40fc:	4623      	mov	r3, r4
{
    40fe:	4680      	mov	r8, r0
    4100:	4689      	mov	r9, r1
    4102:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4104:	494f      	ldr	r1, [pc, #316]	; (4244 <mem_manage_fault+0x158>)
    4106:	2201      	movs	r2, #1
    4108:	4620      	mov	r0, r4
    410a:	f006 f8f4 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    410e:	4b4e      	ldr	r3, [pc, #312]	; (4248 <mem_manage_fault+0x15c>)
    4110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4112:	06df      	lsls	r7, r3, #27
    4114:	d509      	bpl.n	412a <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4116:	4b4d      	ldr	r3, [pc, #308]	; (424c <mem_manage_fault+0x160>)
    4118:	494a      	ldr	r1, [pc, #296]	; (4244 <mem_manage_fault+0x158>)
    411a:	9400      	str	r4, [sp, #0]
    411c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4120:	2201      	movs	r2, #1
    4122:	4623      	mov	r3, r4
    4124:	4620      	mov	r0, r4
    4126:	f006 f8e6 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    412a:	4b47      	ldr	r3, [pc, #284]	; (4248 <mem_manage_fault+0x15c>)
    412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    412e:	071d      	lsls	r5, r3, #28
    4130:	d509      	bpl.n	4146 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    4132:	4b47      	ldr	r3, [pc, #284]	; (4250 <mem_manage_fault+0x164>)
    4134:	9302      	str	r3, [sp, #8]
    4136:	2300      	movs	r3, #0
    4138:	e9cd 3300 	strd	r3, r3, [sp]
    413c:	4941      	ldr	r1, [pc, #260]	; (4244 <mem_manage_fault+0x158>)
    413e:	2201      	movs	r2, #1
    4140:	4618      	mov	r0, r3
    4142:	f006 f8d8 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4146:	4d40      	ldr	r5, [pc, #256]	; (4248 <mem_manage_fault+0x15c>)
    4148:	6aab      	ldr	r3, [r5, #40]	; 0x28
    414a:	079c      	lsls	r4, r3, #30
    414c:	d441      	bmi.n	41d2 <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    414e:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4152:	4b3d      	ldr	r3, [pc, #244]	; (4248 <mem_manage_fault+0x15c>)
    4154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4156:	07d9      	lsls	r1, r3, #31
    4158:	d509      	bpl.n	416e <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    415a:	4b3e      	ldr	r3, [pc, #248]	; (4254 <mem_manage_fault+0x168>)
    415c:	9302      	str	r3, [sp, #8]
    415e:	2300      	movs	r3, #0
    4160:	e9cd 3300 	strd	r3, r3, [sp]
    4164:	4937      	ldr	r1, [pc, #220]	; (4244 <mem_manage_fault+0x158>)
    4166:	2201      	movs	r2, #1
    4168:	4618      	mov	r0, r3
    416a:	f006 f8c4 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    416e:	4b36      	ldr	r3, [pc, #216]	; (4248 <mem_manage_fault+0x15c>)
    4170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4172:	069a      	lsls	r2, r3, #26
    4174:	d509      	bpl.n	418a <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    4176:	4b38      	ldr	r3, [pc, #224]	; (4258 <mem_manage_fault+0x16c>)
    4178:	9302      	str	r3, [sp, #8]
    417a:	2300      	movs	r3, #0
    417c:	e9cd 3300 	strd	r3, r3, [sp]
    4180:	4930      	ldr	r1, [pc, #192]	; (4244 <mem_manage_fault+0x158>)
    4182:	2201      	movs	r2, #1
    4184:	4618      	mov	r0, r3
    4186:	f006 f8b6 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    418a:	4c2f      	ldr	r4, [pc, #188]	; (4248 <mem_manage_fault+0x15c>)
    418c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    418e:	06db      	lsls	r3, r3, #27
    4190:	d402      	bmi.n	4198 <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4194:	079d      	lsls	r5, r3, #30
    4196:	d550      	bpl.n	423a <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4198:	6863      	ldr	r3, [r4, #4]
    419a:	0518      	lsls	r0, r3, #20
    419c:	d54d      	bpl.n	423a <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    419e:	4641      	mov	r1, r8
    41a0:	4638      	mov	r0, r7
    41a2:	f7ff fe3f 	bl	3e24 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    41a6:	2800      	cmp	r0, #0
    41a8:	d035      	beq.n	4216 <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    41aa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    41ae:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    41b0:	4b25      	ldr	r3, [pc, #148]	; (4248 <mem_manage_fault+0x15c>)
    41b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41b4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    41b6:	bf42      	ittt	mi
    41b8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    41ba:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    41be:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    41c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    41c2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    41c6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    41c8:	2300      	movs	r3, #0
    41ca:	7033      	strb	r3, [r6, #0]
}
    41cc:	b005      	add	sp, #20
    41ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    41d2:	2400      	movs	r4, #0
    41d4:	4b21      	ldr	r3, [pc, #132]	; (425c <mem_manage_fault+0x170>)
    41d6:	9302      	str	r3, [sp, #8]
    41d8:	4620      	mov	r0, r4
    41da:	4623      	mov	r3, r4
    41dc:	e9cd 4400 	strd	r4, r4, [sp]
    41e0:	4918      	ldr	r1, [pc, #96]	; (4244 <mem_manage_fault+0x158>)
    41e2:	2201      	movs	r2, #1
    41e4:	f006 f887 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    41e8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    41ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    41ec:	0618      	lsls	r0, r3, #24
    41ee:	d5ae      	bpl.n	414e <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    41f0:	4b1b      	ldr	r3, [pc, #108]	; (4260 <mem_manage_fault+0x174>)
    41f2:	4914      	ldr	r1, [pc, #80]	; (4244 <mem_manage_fault+0x158>)
    41f4:	9703      	str	r7, [sp, #12]
    41f6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    41fa:	9400      	str	r4, [sp, #0]
    41fc:	4623      	mov	r3, r4
    41fe:	2201      	movs	r2, #1
    4200:	4620      	mov	r0, r4
    4202:	f006 f878 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    4206:	f1b9 0f00 	cmp.w	r9, #0
    420a:	d0a2      	beq.n	4152 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    420c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    420e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4212:	62ab      	str	r3, [r5, #40]	; 0x28
    4214:	e79d      	b.n	4152 <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    4216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4218:	06d9      	lsls	r1, r3, #27
    421a:	d50e      	bpl.n	423a <mem_manage_fault+0x14e>
    421c:	4911      	ldr	r1, [pc, #68]	; (4264 <mem_manage_fault+0x178>)
    421e:	4a12      	ldr	r2, [pc, #72]	; (4268 <mem_manage_fault+0x17c>)
    4220:	4812      	ldr	r0, [pc, #72]	; (426c <mem_manage_fault+0x180>)
    4222:	f240 1349 	movw	r3, #329	; 0x149
    4226:	f005 ffcd 	bl	a1c4 <assert_print>
    422a:	4811      	ldr	r0, [pc, #68]	; (4270 <mem_manage_fault+0x184>)
    422c:	f005 ffca 	bl	a1c4 <assert_print>
    4230:	480d      	ldr	r0, [pc, #52]	; (4268 <mem_manage_fault+0x17c>)
    4232:	f240 1149 	movw	r1, #329	; 0x149
    4236:	f005 ffbe 	bl	a1b6 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    423a:	2000      	movs	r0, #0
    423c:	e7b8      	b.n	41b0 <mem_manage_fault+0xc4>
    423e:	bf00      	nop
    4240:	0000c195 	.word	0x0000c195
    4244:	0000b1d0 	.word	0x0000b1d0
    4248:	e000ed00 	.word	0xe000ed00
    424c:	0000c1ab 	.word	0x0000c1ab
    4250:	0000c025 	.word	0x0000c025
    4254:	0000c20c 	.word	0x0000c20c
    4258:	0000c099 	.word	0x0000c099
    425c:	0000c1de 	.word	0x0000c1de
    4260:	0000c1f6 	.word	0x0000c1f6
    4264:	0000c265 	.word	0x0000c265
    4268:	0000c22b 	.word	0x0000c22b
    426c:	0000b80f 	.word	0x0000b80f
    4270:	0000c2af 	.word	0x0000c2af

00004274 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4278:	4b83      	ldr	r3, [pc, #524]	; (4488 <z_arm_fault+0x214>)
    427a:	685f      	ldr	r7, [r3, #4]
{
    427c:	b090      	sub	sp, #64	; 0x40
    427e:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4280:	f3c7 0608 	ubfx	r6, r7, #0, #9
    4284:	2300      	movs	r3, #0
    4286:	f383 8811 	msr	BASEPRI, r3
    428a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    428e:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    4292:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    4296:	d10c      	bne.n	42b2 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4298:	f002 000c 	and.w	r0, r2, #12
    429c:	2808      	cmp	r0, #8
    429e:	d11a      	bne.n	42d6 <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    42a0:	4a7a      	ldr	r2, [pc, #488]	; (448c <z_arm_fault+0x218>)
    42a2:	497b      	ldr	r1, [pc, #492]	; (4490 <z_arm_fault+0x21c>)
    42a4:	9300      	str	r3, [sp, #0]
    42a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
    42aa:	4618      	mov	r0, r3
    42ac:	2201      	movs	r2, #1
    42ae:	f006 f822 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    42b2:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    42b4:	4a77      	ldr	r2, [pc, #476]	; (4494 <z_arm_fault+0x220>)
    42b6:	4978      	ldr	r1, [pc, #480]	; (4498 <z_arm_fault+0x224>)
    42b8:	4878      	ldr	r0, [pc, #480]	; (449c <z_arm_fault+0x228>)
    42ba:	f240 33fb 	movw	r3, #1019	; 0x3fb
    42be:	f005 ff81 	bl	a1c4 <assert_print>
    42c2:	4877      	ldr	r0, [pc, #476]	; (44a0 <z_arm_fault+0x22c>)
    42c4:	f005 ff7e 	bl	a1c4 <assert_print>
    42c8:	4872      	ldr	r0, [pc, #456]	; (4494 <z_arm_fault+0x220>)
    42ca:	f240 31fb 	movw	r1, #1019	; 0x3fb
    42ce:	f005 ff72 	bl	a1b6 <assert_post_action>
    42d2:	2400      	movs	r4, #0
    42d4:	e006      	b.n	42e4 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    42d6:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    42d8:	bf46      	itte	mi
    42da:	460c      	movmi	r4, r1
	*nested_exc = false;
    42dc:	461d      	movmi	r5, r3
			*nested_exc = true;
    42de:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    42e0:	2c00      	cmp	r4, #0
    42e2:	d0e7      	beq.n	42b4 <z_arm_fault+0x40>
	*recoverable = false;
    42e4:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    42e8:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    42ea:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    42ee:	2b09      	cmp	r3, #9
    42f0:	f200 80b0 	bhi.w	4454 <z_arm_fault+0x1e0>
    42f4:	e8df f003 	tbb	[pc, r3]
    42f8:	83a8a405 	.word	0x83a8a405
    42fc:	aeaeaeae 	.word	0xaeaeaeae
    4300:	acae      	.short	0xacae
	PR_FAULT_INFO("***** HARD FAULT *****");
    4302:	4b68      	ldr	r3, [pc, #416]	; (44a4 <z_arm_fault+0x230>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4304:	4f60      	ldr	r7, [pc, #384]	; (4488 <z_arm_fault+0x214>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    4306:	4962      	ldr	r1, [pc, #392]	; (4490 <z_arm_fault+0x21c>)
    4308:	f8cd 8000 	str.w	r8, [sp]
    430c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4310:	2300      	movs	r3, #0
    4312:	2201      	movs	r2, #1
    4314:	4618      	mov	r0, r3
    4316:	f005 ffee 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    431a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
	*recoverable = false;
    431c:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4320:	f016 0602 	ands.w	r6, r6, #2
    4324:	d00c      	beq.n	4340 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    4326:	4b60      	ldr	r3, [pc, #384]	; (44a8 <z_arm_fault+0x234>)
    4328:	f8cd 8000 	str.w	r8, [sp]
    432c:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4330:	2300      	movs	r3, #0
    4332:	4957      	ldr	r1, [pc, #348]	; (4490 <z_arm_fault+0x21c>)
    4334:	2201      	movs	r2, #1
    4336:	4618      	mov	r0, r3
    4338:	f005 ffdd 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    433c:	2200      	movs	r2, #0
    433e:	e028      	b.n	4392 <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4342:	2b00      	cmp	r3, #0
    4344:	da04      	bge.n	4350 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    4346:	4b59      	ldr	r3, [pc, #356]	; (44ac <z_arm_fault+0x238>)
    4348:	9600      	str	r6, [sp, #0]
    434a:	e9cd 6301 	strd	r6, r3, [sp, #4]
    434e:	e7ef      	b.n	4330 <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4352:	005b      	lsls	r3, r3, #1
    4354:	d567      	bpl.n	4426 <z_arm_fault+0x1b2>
		PR_EXC("  Fault escalation (see below)");
    4356:	4b56      	ldr	r3, [pc, #344]	; (44b0 <z_arm_fault+0x23c>)
    4358:	494d      	ldr	r1, [pc, #308]	; (4490 <z_arm_fault+0x21c>)
    435a:	9600      	str	r6, [sp, #0]
    435c:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4360:	2201      	movs	r2, #1
    4362:	4633      	mov	r3, r6
    4364:	4630      	mov	r0, r6
    4366:	f005 ffc6 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    436a:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    436c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    4370:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4374:	429a      	cmp	r2, r3
    4376:	d12c      	bne.n	43d2 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4378:	6823      	ldr	r3, [r4, #0]
    437a:	9303      	str	r3, [sp, #12]
    437c:	4b4d      	ldr	r3, [pc, #308]	; (44b4 <z_arm_fault+0x240>)
    437e:	4944      	ldr	r1, [pc, #272]	; (4490 <z_arm_fault+0x21c>)
    4380:	9600      	str	r6, [sp, #0]
    4382:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4386:	2201      	movs	r2, #1
    4388:	4633      	mov	r3, r6
    438a:	4630      	mov	r0, r6
    438c:	f005 ffb3 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    4390:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4392:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4396:	b9cb      	cbnz	r3, 43cc <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4398:	ae08      	add	r6, sp, #32
    439a:	f104 0720 	add.w	r7, r4, #32
    439e:	6820      	ldr	r0, [r4, #0]
    43a0:	6861      	ldr	r1, [r4, #4]
    43a2:	4633      	mov	r3, r6
    43a4:	c303      	stmia	r3!, {r0, r1}
    43a6:	3408      	adds	r4, #8
    43a8:	42bc      	cmp	r4, r7
    43aa:	461e      	mov	r6, r3
    43ac:	d1f7      	bne.n	439e <z_arm_fault+0x12a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    43ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    43b0:	2d00      	cmp	r5, #0
    43b2:	d063      	beq.n	447c <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    43b4:	f3c3 0108 	ubfx	r1, r3, #0, #9
    43b8:	b921      	cbnz	r1, 43c4 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    43ba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    43be:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    43c2:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    43c4:	a908      	add	r1, sp, #32
    43c6:	4610      	mov	r0, r2
    43c8:	f7ff fbfc 	bl	3bc4 <z_arm_fatal_error>
}
    43cc:	b010      	add	sp, #64	; 0x40
    43ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    43d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    43d6:	b133      	cbz	r3, 43e6 <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    43d8:	f10d 021f 	add.w	r2, sp, #31
    43dc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    43de:	4620      	mov	r0, r4
    43e0:	f7ff fe84 	bl	40ec <mem_manage_fault>
    43e4:	e00d      	b.n	4402 <z_arm_fault+0x18e>
		} else if (SCB_BFSR != 0) {
    43e6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    43ea:	b12b      	cbz	r3, 43f8 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    43ec:	f10d 011f 	add.w	r1, sp, #31
    43f0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    43f2:	f7ff fd71 	bl	3ed8 <bus_fault.constprop.0>
    43f6:	e004      	b.n	4402 <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
    43f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    43fa:	b29b      	uxth	r3, r3
    43fc:	b11b      	cbz	r3, 4406 <z_arm_fault+0x192>
			reason = usage_fault(esf);
    43fe:	f7ff fdf9 	bl	3ff4 <usage_fault.constprop.0>
    4402:	4602      	mov	r2, r0
    4404:	e7c5      	b.n	4392 <z_arm_fault+0x11e>
			__ASSERT(0,
    4406:	492c      	ldr	r1, [pc, #176]	; (44b8 <z_arm_fault+0x244>)
    4408:	4a22      	ldr	r2, [pc, #136]	; (4494 <z_arm_fault+0x220>)
    440a:	4824      	ldr	r0, [pc, #144]	; (449c <z_arm_fault+0x228>)
    440c:	f240 23cd 	movw	r3, #717	; 0x2cd
    4410:	f005 fed8 	bl	a1c4 <assert_print>
    4414:	4829      	ldr	r0, [pc, #164]	; (44bc <z_arm_fault+0x248>)
    4416:	f005 fed5 	bl	a1c4 <assert_print>
    441a:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    441e:	481d      	ldr	r0, [pc, #116]	; (4494 <z_arm_fault+0x220>)
    4420:	f005 fec9 	bl	a1b6 <assert_post_action>
    4424:	e78a      	b.n	433c <z_arm_fault+0xc8>
    4426:	4924      	ldr	r1, [pc, #144]	; (44b8 <z_arm_fault+0x244>)
    4428:	4a1a      	ldr	r2, [pc, #104]	; (4494 <z_arm_fault+0x220>)
    442a:	481c      	ldr	r0, [pc, #112]	; (449c <z_arm_fault+0x228>)
    442c:	f240 23d1 	movw	r3, #721	; 0x2d1
    4430:	f005 fec8 	bl	a1c4 <assert_print>
    4434:	4822      	ldr	r0, [pc, #136]	; (44c0 <z_arm_fault+0x24c>)
    4436:	f005 fec5 	bl	a1c4 <assert_print>
    443a:	f240 21d1 	movw	r1, #721	; 0x2d1
    443e:	e7ee      	b.n	441e <z_arm_fault+0x1aa>
		reason = mem_manage_fault(esf, 0, recoverable);
    4440:	f10d 021f 	add.w	r2, sp, #31
    4444:	2100      	movs	r1, #0
    4446:	e7ca      	b.n	43de <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    4448:	f10d 011f 	add.w	r1, sp, #31
    444c:	2000      	movs	r0, #0
    444e:	e7d0      	b.n	43f2 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    4450:	4b1c      	ldr	r3, [pc, #112]	; (44c4 <z_arm_fault+0x250>)
    4452:	e769      	b.n	4328 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    4454:	4a1c      	ldr	r2, [pc, #112]	; (44c8 <z_arm_fault+0x254>)
    4456:	4b1d      	ldr	r3, [pc, #116]	; (44cc <z_arm_fault+0x258>)
    4458:	490d      	ldr	r1, [pc, #52]	; (4490 <z_arm_fault+0x21c>)
    445a:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    445e:	bf18      	it	ne
    4460:	4613      	movne	r3, r2
    4462:	3e10      	subs	r6, #16
    4464:	e9cd 3603 	strd	r3, r6, [sp, #12]
    4468:	4b19      	ldr	r3, [pc, #100]	; (44d0 <z_arm_fault+0x25c>)
    446a:	9302      	str	r3, [sp, #8]
    446c:	2300      	movs	r3, #0
    446e:	e9cd 3300 	strd	r3, r3, [sp]
    4472:	2201      	movs	r2, #1
    4474:	4618      	mov	r0, r3
    4476:	f005 ff3e 	bl	a2f6 <z_log_msg2_runtime_create.constprop.0>
}
    447a:	e75f      	b.n	433c <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    447c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4480:	f023 0301 	bic.w	r3, r3, #1
    4484:	e79d      	b.n	43c2 <z_arm_fault+0x14e>
    4486:	bf00      	nop
    4488:	e000ed00 	.word	0xe000ed00
    448c:	0000c300 	.word	0x0000c300
    4490:	0000b1d0 	.word	0x0000b1d0
    4494:	0000c22b 	.word	0x0000c22b
    4498:	0000c32b 	.word	0x0000c32b
    449c:	0000b80f 	.word	0x0000b80f
    44a0:	0000c33e 	.word	0x0000c33e
    44a4:	0000c37c 	.word	0x0000c37c
    44a8:	0000c393 	.word	0x0000c393
    44ac:	0000c3b4 	.word	0x0000c3b4
    44b0:	0000c3c2 	.word	0x0000c3c2
    44b4:	0000c3e1 	.word	0x0000c3e1
    44b8:	0000d0fe 	.word	0x0000d0fe
    44bc:	0000c3fd 	.word	0x0000c3fd
    44c0:	0000c421 	.word	0x0000c421
    44c4:	0000c451 	.word	0x0000c451
    44c8:	0000c2e7 	.word	0x0000c2e7
    44cc:	0000c2d2 	.word	0x0000c2d2
    44d0:	0000c475 	.word	0x0000c475

000044d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    44d4:	4a02      	ldr	r2, [pc, #8]	; (44e0 <z_arm_fault_init+0xc>)
    44d6:	6953      	ldr	r3, [r2, #20]
    44d8:	f043 0310 	orr.w	r3, r3, #16
    44dc:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    44de:	4770      	bx	lr
    44e0:	e000ed00 	.word	0xe000ed00

000044e4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    44e4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    44e8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    44ec:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    44ee:	4672      	mov	r2, lr
	bl z_arm_fault
    44f0:	f7ff fec0 	bl	4274 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    44f4:	bd01      	pop	{r0, pc}
    44f6:	bf00      	nop

000044f8 <z_arm_interrupt_init>:
    44f8:	4804      	ldr	r0, [pc, #16]	; (450c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    44fa:	2300      	movs	r3, #0
    44fc:	2120      	movs	r1, #32
    44fe:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4500:	3301      	adds	r3, #1
    4502:	2b30      	cmp	r3, #48	; 0x30
    4504:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4508:	d1f9      	bne.n	44fe <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    450a:	4770      	bx	lr
    450c:	e000e100 	.word	0xe000e100

00004510 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4510:	2000      	movs	r0, #0
    msr CONTROL, r0
    4512:	f380 8814 	msr	CONTROL, r0
    isb
    4516:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    451a:	f006 fd07 	bl	af2c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    451e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4520:	490d      	ldr	r1, [pc, #52]	; (4558 <__start+0x48>)
    str r0, [r1]
    4522:	6008      	str	r0, [r1, #0]
    dsb
    4524:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4528:	480c      	ldr	r0, [pc, #48]	; (455c <__start+0x4c>)
    msr msp, r0
    452a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    452e:	f000 f82b 	bl	4588 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4532:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4534:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4538:	4809      	ldr	r0, [pc, #36]	; (4560 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    453a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    453e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4540:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4544:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4548:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    454a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    454c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4550:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4554:	f7ff fbda 	bl	3d0c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4558:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    455c:	2000d740 	.word	0x2000d740
    ldr r0, =z_interrupt_stacks
    4560:	2000bdc0 	.word	0x2000bdc0

00004564 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4564:	4907      	ldr	r1, [pc, #28]	; (4584 <z_arm_clear_arm_mpu_config+0x20>)
    4566:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    456a:	2300      	movs	r3, #0
	int num_regions =
    456c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4570:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4572:	4293      	cmp	r3, r2
    4574:	db00      	blt.n	4578 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    4576:	4770      	bx	lr
  MPU->RNR = rnr;
    4578:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    457c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4580:	3301      	adds	r3, #1
    4582:	e7f6      	b.n	4572 <z_arm_clear_arm_mpu_config+0xe>
    4584:	e000ed00 	.word	0xe000ed00

00004588 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4588:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    458a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    458c:	2300      	movs	r3, #0
    458e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4592:	f7ff ffe7 	bl	4564 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4596:	4b14      	ldr	r3, [pc, #80]	; (45e8 <z_arm_init_arch_hw_at_boot+0x60>)
    4598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    459c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    45a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    45a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    45a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    45ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    45b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    45b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    45b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    45bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    45c0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    45c4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    45c8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    45cc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    45d0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    45d4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    45d8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    45dc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    45de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45e2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    45e6:	bd08      	pop	{r3, pc}
    45e8:	e000e100 	.word	0xe000e100

000045ec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    45ec:	4b08      	ldr	r3, [pc, #32]	; (4610 <z_impl_k_thread_abort+0x24>)
    45ee:	689b      	ldr	r3, [r3, #8]
    45f0:	4283      	cmp	r3, r0
    45f2:	d10b      	bne.n	460c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    45f4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    45f8:	b143      	cbz	r3, 460c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    45fa:	4b06      	ldr	r3, [pc, #24]	; (4614 <z_impl_k_thread_abort+0x28>)
    45fc:	685a      	ldr	r2, [r3, #4]
    45fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4602:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4606:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    460a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    460c:	f004 bc06 	b.w	8e1c <z_thread_abort>
    4610:	20000ed0 	.word	0x20000ed0
    4614:	e000ed00 	.word	0xe000ed00

00004618 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4618:	4b02      	ldr	r3, [pc, #8]	; (4624 <z_arm_configure_static_mpu_regions+0xc>)
    461a:	4a03      	ldr	r2, [pc, #12]	; (4628 <z_arm_configure_static_mpu_regions+0x10>)
    461c:	4803      	ldr	r0, [pc, #12]	; (462c <z_arm_configure_static_mpu_regions+0x14>)
    461e:	2101      	movs	r1, #1
    4620:	f000 b886 	b.w	4730 <arm_core_mpu_configure_static_mpu_regions>
    4624:	20040000 	.word	0x20040000
    4628:	20000000 	.word	0x20000000
    462c:	0000b370 	.word	0x0000b370

00004630 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4630:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4632:	4b05      	ldr	r3, [pc, #20]	; (4648 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4634:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    4636:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4638:	4a04      	ldr	r2, [pc, #16]	; (464c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    463a:	2120      	movs	r1, #32
    463c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4640:	4618      	mov	r0, r3
    4642:	2101      	movs	r1, #1
    4644:	f000 b89c 	b.w	4780 <arm_core_mpu_configure_dynamic_mpu_regions>
    4648:	20000d7c 	.word	0x20000d7c
    464c:	150b0000 	.word	0x150b0000

00004650 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4650:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4652:	4e28      	ldr	r6, [pc, #160]	; (46f4 <mpu_configure_regions+0xa4>)
    4654:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4656:	2500      	movs	r5, #0
    4658:	428d      	cmp	r5, r1
    465a:	da15      	bge.n	4688 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    465c:	6844      	ldr	r4, [r0, #4]
    465e:	2c00      	cmp	r4, #0
    4660:	d045      	beq.n	46ee <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4662:	b1d3      	cbz	r3, 469a <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4664:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4668:	ea14 0f0c 	tst.w	r4, ip
    466c:	d00f      	beq.n	468e <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    466e:	4b22      	ldr	r3, [pc, #136]	; (46f8 <mpu_configure_regions+0xa8>)
    4670:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4672:	9302      	str	r3, [sp, #8]
    4674:	2300      	movs	r3, #0
    4676:	2201      	movs	r2, #1
    4678:	e9cd 3300 	strd	r3, r3, [sp]
    467c:	491f      	ldr	r1, [pc, #124]	; (46fc <mpu_configure_regions+0xac>)
    467e:	4618      	mov	r0, r3
    4680:	f005 fe49 	bl	a316 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    4684:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4688:	4610      	mov	r0, r2
    468a:	b005      	add	sp, #20
    468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    468e:	2c1f      	cmp	r4, #31
    4690:	d9ed      	bls.n	466e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4692:	6807      	ldr	r7, [r0, #0]
		&&
    4694:	ea1c 0f07 	tst.w	ip, r7
    4698:	d1e9      	bne.n	466e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    469a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    469c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    469e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    46a2:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    46a6:	d910      	bls.n	46ca <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    46a8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    46ac:	d80f      	bhi.n	46ce <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    46ae:	3c01      	subs	r4, #1
    46b0:	fab4 f484 	clz	r4, r4
    46b4:	f1c4 041f 	rsb	r4, r4, #31
    46b8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    46ba:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    46be:	ea4c 0c04 	orr.w	ip, ip, r4
    46c2:	d906      	bls.n	46d2 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    46c4:	4b0e      	ldr	r3, [pc, #56]	; (4700 <mpu_configure_regions+0xb0>)
    46c6:	9203      	str	r2, [sp, #12]
    46c8:	e7d3      	b.n	4672 <mpu_configure_regions+0x22>
		return REGION_32B;
    46ca:	2408      	movs	r4, #8
    46cc:	e7f5      	b.n	46ba <mpu_configure_regions+0x6a>
		return REGION_4G;
    46ce:	243e      	movs	r4, #62	; 0x3e
    46d0:	e7f3      	b.n	46ba <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    46d2:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    46d6:	4314      	orrs	r4, r2
    46d8:	f044 0410 	orr.w	r4, r4, #16
    46dc:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    46e0:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    46e4:	f04c 0401 	orr.w	r4, ip, #1
    46e8:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    46ec:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    46ee:	3501      	adds	r5, #1
    46f0:	300c      	adds	r0, #12
    46f2:	e7b1      	b.n	4658 <mpu_configure_regions+0x8>
    46f4:	e000ed00 	.word	0xe000ed00
    46f8:	0000c48c 	.word	0x0000c48c
    46fc:	0000b1c8 	.word	0x0000b1c8
    4700:	0000c4af 	.word	0x0000c4af

00004704 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4704:	4b04      	ldr	r3, [pc, #16]	; (4718 <arm_core_mpu_enable+0x14>)
    4706:	2205      	movs	r2, #5
    4708:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    470c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4710:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4714:	4770      	bx	lr
    4716:	bf00      	nop
    4718:	e000ed00 	.word	0xe000ed00

0000471c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    471c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4720:	4b02      	ldr	r3, [pc, #8]	; (472c <arm_core_mpu_disable+0x10>)
    4722:	2200      	movs	r2, #0
    4724:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	e000ed00 	.word	0xe000ed00

00004730 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4730:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4732:	4d0e      	ldr	r5, [pc, #56]	; (476c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4734:	2301      	movs	r3, #1
    4736:	782a      	ldrb	r2, [r5, #0]
    4738:	460c      	mov	r4, r1
    473a:	f7ff ff89 	bl	4650 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    473e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4740:	3016      	adds	r0, #22
    4742:	d111      	bne.n	4768 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4744:	f240 1311 	movw	r3, #273	; 0x111
    4748:	4a09      	ldr	r2, [pc, #36]	; (4770 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    474a:	490a      	ldr	r1, [pc, #40]	; (4774 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    474c:	480a      	ldr	r0, [pc, #40]	; (4778 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    474e:	f005 fd39 	bl	a1c4 <assert_print>
    4752:	4621      	mov	r1, r4
    4754:	4809      	ldr	r0, [pc, #36]	; (477c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    4756:	f005 fd35 	bl	a1c4 <assert_print>
			regions_num);
	}
}
    475a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    475e:	4804      	ldr	r0, [pc, #16]	; (4770 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    4760:	f240 1111 	movw	r1, #273	; 0x111
    4764:	f005 bd27 	b.w	a1b6 <assert_post_action>
}
    4768:	bd38      	pop	{r3, r4, r5, pc}
    476a:	bf00      	nop
    476c:	200090fb 	.word	0x200090fb
    4770:	0000c4d5 	.word	0x0000c4d5
    4774:	0000d0fe 	.word	0x0000d0fe
    4778:	0000b80f 	.word	0x0000b80f
    477c:	0000c50c 	.word	0x0000c50c

00004780 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4780:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4782:	4a13      	ldr	r2, [pc, #76]	; (47d0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    4784:	2300      	movs	r3, #0
    4786:	7812      	ldrb	r2, [r2, #0]
    4788:	460c      	mov	r4, r1
    478a:	f7ff ff61 	bl	4650 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    478e:	f110 0f16 	cmn.w	r0, #22
    4792:	d004      	beq.n	479e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    4794:	4b0f      	ldr	r3, [pc, #60]	; (47d4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    4796:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4798:	2807      	cmp	r0, #7
    479a:	dd12      	ble.n	47c2 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    479c:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    479e:	4a0e      	ldr	r2, [pc, #56]	; (47d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    47a0:	490e      	ldr	r1, [pc, #56]	; (47dc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    47a2:	480f      	ldr	r0, [pc, #60]	; (47e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    47a4:	f44f 7398 	mov.w	r3, #304	; 0x130
    47a8:	f005 fd0c 	bl	a1c4 <assert_print>
    47ac:	4621      	mov	r1, r4
    47ae:	480d      	ldr	r0, [pc, #52]	; (47e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    47b0:	f005 fd08 	bl	a1c4 <assert_print>
}
    47b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    47b8:	4807      	ldr	r0, [pc, #28]	; (47d8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    47ba:	f44f 7198 	mov.w	r1, #304	; 0x130
    47be:	f005 bcfa 	b.w	a1b6 <assert_post_action>
  MPU->RNR = rnr;
    47c2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    47c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    47ca:	3001      	adds	r0, #1
    47cc:	e7e4      	b.n	4798 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    47ce:	bf00      	nop
    47d0:	200090fb 	.word	0x200090fb
    47d4:	e000ed00 	.word	0xe000ed00
    47d8:	0000c4d5 	.word	0x0000c4d5
    47dc:	0000d0fe 	.word	0x0000d0fe
    47e0:	0000b80f 	.word	0x0000b80f
    47e4:	0000c538 	.word	0x0000c538

000047e8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    47e8:	4928      	ldr	r1, [pc, #160]	; (488c <z_arm_mpu_init+0xa4>)
{
    47ea:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    47ec:	680c      	ldr	r4, [r1, #0]
    47ee:	2c08      	cmp	r4, #8
    47f0:	d913      	bls.n	481a <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    47f2:	f44f 73a4 	mov.w	r3, #328	; 0x148
    47f6:	4a26      	ldr	r2, [pc, #152]	; (4890 <z_arm_mpu_init+0xa8>)
    47f8:	4926      	ldr	r1, [pc, #152]	; (4894 <z_arm_mpu_init+0xac>)
    47fa:	4827      	ldr	r0, [pc, #156]	; (4898 <z_arm_mpu_init+0xb0>)
    47fc:	f005 fce2 	bl	a1c4 <assert_print>
    4800:	4826      	ldr	r0, [pc, #152]	; (489c <z_arm_mpu_init+0xb4>)
    4802:	2208      	movs	r2, #8
    4804:	4621      	mov	r1, r4
    4806:	f005 fcdd 	bl	a1c4 <assert_print>
    480a:	4821      	ldr	r0, [pc, #132]	; (4890 <z_arm_mpu_init+0xa8>)
    480c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4810:	f005 fcd1 	bl	a1b6 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    4818:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    481a:	f7ff ff7f 	bl	471c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    481e:	6848      	ldr	r0, [r1, #4]
    4820:	491f      	ldr	r1, [pc, #124]	; (48a0 <z_arm_mpu_init+0xb8>)
    4822:	2200      	movs	r2, #0
    4824:	4294      	cmp	r4, r2
    4826:	f100 000c 	add.w	r0, r0, #12
    482a:	d10b      	bne.n	4844 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    482c:	4b1d      	ldr	r3, [pc, #116]	; (48a4 <z_arm_mpu_init+0xbc>)
    482e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    4830:	f7ff ff68 	bl	4704 <arm_core_mpu_enable>
	__ASSERT(
    4834:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    4838:	f3c3 2307 	ubfx	r3, r3, #8, #8
    483c:	2b08      	cmp	r3, #8
    483e:	d114      	bne.n	486a <z_arm_mpu_init+0x82>
	return 0;
    4840:	2000      	movs	r0, #0
    4842:	e7e9      	b.n	4818 <z_arm_mpu_init+0x30>
    4844:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4848:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    484c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4850:	4313      	orrs	r3, r2
    4852:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4856:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    485a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    485e:	f043 0301 	orr.w	r3, r3, #1
    4862:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4866:	3201      	adds	r2, #1
    4868:	e7dc      	b.n	4824 <z_arm_mpu_init+0x3c>
	__ASSERT(
    486a:	4a09      	ldr	r2, [pc, #36]	; (4890 <z_arm_mpu_init+0xa8>)
    486c:	490e      	ldr	r1, [pc, #56]	; (48a8 <z_arm_mpu_init+0xc0>)
    486e:	480a      	ldr	r0, [pc, #40]	; (4898 <z_arm_mpu_init+0xb0>)
    4870:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4874:	f005 fca6 	bl	a1c4 <assert_print>
    4878:	480c      	ldr	r0, [pc, #48]	; (48ac <z_arm_mpu_init+0xc4>)
    487a:	f005 fca3 	bl	a1c4 <assert_print>
    487e:	4804      	ldr	r0, [pc, #16]	; (4890 <z_arm_mpu_init+0xa8>)
    4880:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4884:	f005 fc97 	bl	a1b6 <assert_post_action>
    4888:	e7da      	b.n	4840 <z_arm_mpu_init+0x58>
    488a:	bf00      	nop
    488c:	0000b37c 	.word	0x0000b37c
    4890:	0000c4d5 	.word	0x0000c4d5
    4894:	0000d0fe 	.word	0x0000d0fe
    4898:	0000b80f 	.word	0x0000b80f
    489c:	0000c565 	.word	0x0000c565
    48a0:	e000ed00 	.word	0xe000ed00
    48a4:	200090fb 	.word	0x200090fb
    48a8:	0000c599 	.word	0x0000c599
    48ac:	0000c5e9 	.word	0x0000c5e9

000048b0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    48b0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    48b2:	4b0b      	ldr	r3, [pc, #44]	; (48e0 <malloc_prepare+0x30>)
    48b4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    48b8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    48bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    48c0:	d20c      	bcs.n	48dc <malloc_prepare+0x2c>
    48c2:	4908      	ldr	r1, [pc, #32]	; (48e4 <malloc_prepare+0x34>)
    48c4:	4a08      	ldr	r2, [pc, #32]	; (48e8 <malloc_prepare+0x38>)
    48c6:	4809      	ldr	r0, [pc, #36]	; (48ec <malloc_prepare+0x3c>)
    48c8:	2381      	movs	r3, #129	; 0x81
    48ca:	f005 fc7b 	bl	a1c4 <assert_print>
    48ce:	4808      	ldr	r0, [pc, #32]	; (48f0 <malloc_prepare+0x40>)
    48d0:	f005 fc78 	bl	a1c4 <assert_print>
    48d4:	4804      	ldr	r0, [pc, #16]	; (48e8 <malloc_prepare+0x38>)
    48d6:	2181      	movs	r1, #129	; 0x81
    48d8:	f005 fc6d 	bl	a1b6 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    48dc:	2000      	movs	r0, #0
    48de:	bd08      	pop	{r3, pc}
    48e0:	2000df60 	.word	0x2000df60
    48e4:	0000c63a 	.word	0x0000c63a
    48e8:	0000c60a 	.word	0x0000c60a
    48ec:	0000b80f 	.word	0x0000b80f
    48f0:	0000c681 	.word	0x0000c681

000048f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    48f4:	4b01      	ldr	r3, [pc, #4]	; (48fc <__stdout_hook_install+0x8>)
    48f6:	6018      	str	r0, [r3, #0]
}
    48f8:	4770      	bx	lr
    48fa:	bf00      	nop
    48fc:	2000002c 	.word	0x2000002c

00004900 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4902:	4f0a      	ldr	r7, [pc, #40]	; (492c <z_impl_zephyr_write_stdout+0x2c>)
    4904:	460d      	mov	r5, r1
    4906:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4908:	f1c0 0401 	rsb	r4, r0, #1
    490c:	19a3      	adds	r3, r4, r6
    490e:	429d      	cmp	r5, r3
    4910:	dc01      	bgt.n	4916 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4912:	4628      	mov	r0, r5
    4914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4916:	7873      	ldrb	r3, [r6, #1]
    4918:	2b0a      	cmp	r3, #10
    491a:	d102      	bne.n	4922 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    491c:	683b      	ldr	r3, [r7, #0]
    491e:	200d      	movs	r0, #13
    4920:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4922:	683b      	ldr	r3, [r7, #0]
    4924:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4928:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    492a:	e7ef      	b.n	490c <z_impl_zephyr_write_stdout+0xc>
    492c:	2000002c 	.word	0x2000002c

00004930 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    4930:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4932:	4802      	ldr	r0, [pc, #8]	; (493c <_exit+0xc>)
    4934:	2105      	movs	r1, #5
    4936:	f7ff ffe3 	bl	4900 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    493a:	e7fe      	b.n	493a <_exit+0xa>
    493c:	0000c708 	.word	0x0000c708

00004940 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4940:	b508      	push	{r3, lr}
    4942:	211d      	movs	r1, #29
    4944:	4804      	ldr	r0, [pc, #16]	; (4958 <__chk_fail+0x18>)
    4946:	f7ff ffdb 	bl	4900 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    494a:	4040      	eors	r0, r0
    494c:	f380 8811 	msr	BASEPRI, r0
    4950:	f04f 0003 	mov.w	r0, #3
    4954:	df02      	svc	2
	CODE_UNREACHABLE;
    4956:	bf00      	nop
    4958:	0000c70e 	.word	0x0000c70e

0000495c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    495c:	b510      	push	{r4, lr}
	__asm__ volatile(
    495e:	f04f 0320 	mov.w	r3, #32
    4962:	f3ef 8011 	mrs	r0, BASEPRI
    4966:	f383 8812 	msr	BASEPRI_MAX, r3
    496a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    496e:	4a11      	ldr	r2, [pc, #68]	; (49b4 <nordicsemi_nrf52_init+0x58>)
    4970:	2301      	movs	r3, #1
    4972:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    497a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    497e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    4982:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4986:	2c08      	cmp	r4, #8
    4988:	d108      	bne.n	499c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    498a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    498e:	2905      	cmp	r1, #5
    4990:	d804      	bhi.n	499c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    4992:	4c09      	ldr	r4, [pc, #36]	; (49b8 <nordicsemi_nrf52_init+0x5c>)
    4994:	5c61      	ldrb	r1, [r4, r1]
    4996:	b109      	cbz	r1, 499c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    4998:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    499c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49a0:	2201      	movs	r2, #1
    49a2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    49a6:	f380 8811 	msr	BASEPRI, r0
    49aa:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    49ae:	2000      	movs	r0, #0
    49b0:	bd10      	pop	{r4, pc}
    49b2:	bf00      	nop
    49b4:	4001e000 	.word	0x4001e000
    49b8:	0000c73b 	.word	0x0000c73b

000049bc <sys_arch_reboot>:
    *p_gpregret = val;
    49bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49c0:	b2c0      	uxtb	r0, r0
    49c2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    49c6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    49ca:	4905      	ldr	r1, [pc, #20]	; (49e0 <sys_arch_reboot+0x24>)
    49cc:	4b05      	ldr	r3, [pc, #20]	; (49e4 <sys_arch_reboot+0x28>)
    49ce:	68ca      	ldr	r2, [r1, #12]
    49d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    49d4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    49d6:	60cb      	str	r3, [r1, #12]
    49d8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    49dc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    49de:	e7fd      	b.n	49dc <sys_arch_reboot+0x20>
    49e0:	e000ed00 	.word	0xe000ed00
    49e4:	05fa0004 	.word	0x05fa0004

000049e8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    49e8:	b120      	cbz	r0, 49f4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    49ea:	4b03      	ldr	r3, [pc, #12]	; (49f8 <arch_busy_wait+0x10>)
    49ec:	0180      	lsls	r0, r0, #6
    49ee:	f043 0301 	orr.w	r3, r3, #1
    49f2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    49f4:	4770      	bx	lr
    49f6:	bf00      	nop
    49f8:	0000b230 	.word	0x0000b230

000049fc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    49fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    49fe:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4a00:	490a      	ldr	r1, [pc, #40]	; (4a2c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a02:	4a0b      	ldr	r2, [pc, #44]	; (4a30 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4a04:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a06:	2340      	movs	r3, #64	; 0x40
    4a08:	9300      	str	r3, [sp, #0]
    4a0a:	1149      	asrs	r1, r1, #5
{
    4a0c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a0e:	4623      	mov	r3, r4
    4a10:	4808      	ldr	r0, [pc, #32]	; (4a34 <onoff_start+0x38>)
    4a12:	f005 fcb8 	bl	a386 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4a16:	1e01      	subs	r1, r0, #0
    4a18:	da05      	bge.n	4a26 <onoff_start+0x2a>
		notify(mgr, err);
    4a1a:	4628      	mov	r0, r5
    4a1c:	4623      	mov	r3, r4
	}
}
    4a1e:	b003      	add	sp, #12
    4a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4a24:	4718      	bx	r3
}
    4a26:	b003      	add	sp, #12
    4a28:	bd30      	pop	{r4, r5, pc}
    4a2a:	bf00      	nop
    4a2c:	20000d9c 	.word	0x20000d9c
    4a30:	0000a3f1 	.word	0x0000a3f1
    4a34:	0000afb0 	.word	0x0000afb0

00004a38 <get_status>:
{
    4a38:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a3a:	b2cc      	uxtb	r4, r1
    4a3c:	2c01      	cmp	r4, #1
{
    4a3e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a40:	d909      	bls.n	4a56 <get_status+0x1e>
    4a42:	4909      	ldr	r1, [pc, #36]	; (4a68 <get_status+0x30>)
    4a44:	4809      	ldr	r0, [pc, #36]	; (4a6c <get_status+0x34>)
    4a46:	4a0a      	ldr	r2, [pc, #40]	; (4a70 <get_status+0x38>)
    4a48:	2379      	movs	r3, #121	; 0x79
    4a4a:	f005 fbbb 	bl	a1c4 <assert_print>
    4a4e:	4808      	ldr	r0, [pc, #32]	; (4a70 <get_status+0x38>)
    4a50:	2179      	movs	r1, #121	; 0x79
    4a52:	f005 fbb0 	bl	a1b6 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4a56:	692b      	ldr	r3, [r5, #16]
    4a58:	220c      	movs	r2, #12
    4a5a:	fb04 3302 	mla	r3, r4, r2, r3
    4a5e:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    4a60:	f000 0007 	and.w	r0, r0, #7
    4a64:	bd38      	pop	{r3, r4, r5, pc}
    4a66:	bf00      	nop
    4a68:	0000c782 	.word	0x0000c782
    4a6c:	0000b80f 	.word	0x0000b80f
    4a70:	0000c745 	.word	0x0000c745

00004a74 <stop>:
{
    4a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a76:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a78:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    4a7a:	6906      	ldr	r6, [r0, #16]
{
    4a7c:	4605      	mov	r5, r0
    4a7e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a80:	d90b      	bls.n	4a9a <stop+0x26>
    4a82:	4919      	ldr	r1, [pc, #100]	; (4ae8 <stop+0x74>)
    4a84:	4819      	ldr	r0, [pc, #100]	; (4aec <stop+0x78>)
    4a86:	4a1a      	ldr	r2, [pc, #104]	; (4af0 <stop+0x7c>)
    4a88:	f240 134d 	movw	r3, #333	; 0x14d
    4a8c:	f005 fb9a 	bl	a1c4 <assert_print>
    4a90:	4817      	ldr	r0, [pc, #92]	; (4af0 <stop+0x7c>)
    4a92:	f240 114d 	movw	r1, #333	; 0x14d
    4a96:	f005 fb8e 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    4a9a:	f04f 0320 	mov.w	r3, #32
    4a9e:	f3ef 8211 	mrs	r2, BASEPRI
    4aa2:	f383 8812 	msr	BASEPRI_MAX, r3
    4aa6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4aaa:	210c      	movs	r1, #12
    4aac:	fb01 6304 	mla	r3, r1, r4, r6
    4ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4ab2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4ab6:	d008      	beq.n	4aca <stop+0x56>
    4ab8:	429f      	cmp	r7, r3
    4aba:	d006      	beq.n	4aca <stop+0x56>
	__asm__ volatile(
    4abc:	f382 8811 	msr	BASEPRI, r2
    4ac0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4aca:	434c      	muls	r4, r1
    4acc:	4426      	add	r6, r4
    4ace:	2301      	movs	r3, #1
    4ad0:	64b3      	str	r3, [r6, #72]	; 0x48
    4ad2:	f382 8811 	msr	BASEPRI, r2
    4ad6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4ada:	686b      	ldr	r3, [r5, #4]
    4adc:	4423      	add	r3, r4
    4ade:	685b      	ldr	r3, [r3, #4]
    4ae0:	4798      	blx	r3
	return 0;
    4ae2:	2000      	movs	r0, #0
    4ae4:	e7f0      	b.n	4ac8 <stop+0x54>
    4ae6:	bf00      	nop
    4ae8:	0000c782 	.word	0x0000c782
    4aec:	0000b80f 	.word	0x0000b80f
    4af0:	0000c745 	.word	0x0000c745

00004af4 <onoff_stop>:
{
    4af4:	b570      	push	{r4, r5, r6, lr}
    4af6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4af8:	4906      	ldr	r1, [pc, #24]	; (4b14 <onoff_stop+0x20>)
    4afa:	1a41      	subs	r1, r0, r1
{
    4afc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4afe:	1149      	asrs	r1, r1, #5
    4b00:	4805      	ldr	r0, [pc, #20]	; (4b18 <onoff_stop+0x24>)
    4b02:	2240      	movs	r2, #64	; 0x40
    4b04:	f7ff ffb6 	bl	4a74 <stop>
	notify(mgr, res);
    4b08:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4b0a:	4601      	mov	r1, r0
	notify(mgr, res);
    4b0c:	4620      	mov	r0, r4
}
    4b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4b12:	4718      	bx	r3
    4b14:	20000d9c 	.word	0x20000d9c
    4b18:	0000afb0 	.word	0x0000afb0

00004b1c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b1c:	2200      	movs	r2, #0
{
    4b1e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b20:	2101      	movs	r1, #1
{
    4b22:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b24:	4610      	mov	r0, r2
    4b26:	f7ff f8b9 	bl	3c9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4b2a:	480f      	ldr	r0, [pc, #60]	; (4b68 <clk_init+0x4c>)
    4b2c:	f001 fc92 	bl	6454 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4b30:	4b0e      	ldr	r3, [pc, #56]	; (4b6c <clk_init+0x50>)
    4b32:	4298      	cmp	r0, r3
    4b34:	d115      	bne.n	4b62 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4b36:	f001 fcb3 	bl	64a0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4b3a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b3c:	490c      	ldr	r1, [pc, #48]	; (4b70 <clk_init+0x54>)
    4b3e:	4630      	mov	r0, r6
    4b40:	f005 fa42 	bl	9fc8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4b44:	2800      	cmp	r0, #0
    4b46:	db0b      	blt.n	4b60 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4b48:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b4a:	4909      	ldr	r1, [pc, #36]	; (4b70 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b4c:	2501      	movs	r5, #1
    4b4e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b50:	f104 0020 	add.w	r0, r4, #32
    4b54:	f005 fa38 	bl	9fc8 <onoff_manager_init>
		if (err < 0) {
    4b58:	2800      	cmp	r0, #0
    4b5a:	db01      	blt.n	4b60 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b5c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    4b5e:	2000      	movs	r0, #0
}
    4b60:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4b62:	f06f 0004 	mvn.w	r0, #4
    4b66:	e7fb      	b.n	4b60 <clk_init+0x44>
    4b68:	00004ba9 	.word	0x00004ba9
    4b6c:	0bad0000 	.word	0x0bad0000
    4b70:	0000b39c 	.word	0x0000b39c

00004b74 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4b74:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4b76:	230c      	movs	r3, #12
    4b78:	4809      	ldr	r0, [pc, #36]	; (4ba0 <clkstarted_handle.constprop.0+0x2c>)
    4b7a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4b7c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4b7e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4b80:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    4b84:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4b86:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    4b88:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    4b8a:	4418      	add	r0, r3
    4b8c:	f005 fbe8 	bl	a360 <set_on_state>
	if (callback) {
    4b90:	b12d      	cbz	r5, 4b9e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b92:	4632      	mov	r2, r6
    4b94:	462b      	mov	r3, r5
    4b96:	4803      	ldr	r0, [pc, #12]	; (4ba4 <clkstarted_handle.constprop.0+0x30>)
}
    4b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b9c:	4718      	bx	r3
}
    4b9e:	bd70      	pop	{r4, r5, r6, pc}
    4ba0:	20000d9c 	.word	0x20000d9c
    4ba4:	0000afb0 	.word	0x0000afb0

00004ba8 <clock_event_handler>:
	switch (event) {
    4ba8:	2801      	cmp	r0, #1
{
    4baa:	b508      	push	{r3, lr}
	switch (event) {
    4bac:	d006      	beq.n	4bbc <clock_event_handler+0x14>
    4bae:	2803      	cmp	r0, #3
    4bb0:	d008      	beq.n	4bc4 <clock_event_handler+0x1c>
    4bb2:	b9a8      	cbnz	r0, 4be0 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4bb4:	4b10      	ldr	r3, [pc, #64]	; (4bf8 <clock_event_handler+0x50>)
    4bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4bb8:	075b      	lsls	r3, r3, #29
    4bba:	d11b      	bne.n	4bf4 <clock_event_handler+0x4c>
}
    4bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4bc0:	f7ff bfd8 	b.w	4b74 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4bc4:	490d      	ldr	r1, [pc, #52]	; (4bfc <clock_event_handler+0x54>)
    4bc6:	4a0e      	ldr	r2, [pc, #56]	; (4c00 <clock_event_handler+0x58>)
    4bc8:	480e      	ldr	r0, [pc, #56]	; (4c04 <clock_event_handler+0x5c>)
    4bca:	f240 235e 	movw	r3, #606	; 0x25e
    4bce:	f005 faf9 	bl	a1c4 <assert_print>
    4bd2:	f240 215e 	movw	r1, #606	; 0x25e
}
    4bd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    4bda:	4809      	ldr	r0, [pc, #36]	; (4c00 <clock_event_handler+0x58>)
    4bdc:	f005 baeb 	b.w	a1b6 <assert_post_action>
    4be0:	4906      	ldr	r1, [pc, #24]	; (4bfc <clock_event_handler+0x54>)
    4be2:	4a07      	ldr	r2, [pc, #28]	; (4c00 <clock_event_handler+0x58>)
    4be4:	4807      	ldr	r0, [pc, #28]	; (4c04 <clock_event_handler+0x5c>)
    4be6:	f240 2362 	movw	r3, #610	; 0x262
    4bea:	f005 faeb 	bl	a1c4 <assert_print>
    4bee:	f240 2162 	movw	r1, #610	; 0x262
    4bf2:	e7f0      	b.n	4bd6 <clock_event_handler+0x2e>
}
    4bf4:	bd08      	pop	{r3, pc}
    4bf6:	bf00      	nop
    4bf8:	20000d9c 	.word	0x20000d9c
    4bfc:	0000d0fe 	.word	0x0000d0fe
    4c00:	0000c745 	.word	0x0000c745
    4c04:	0000b80f 	.word	0x0000b80f

00004c08 <generic_hfclk_start>:
{
    4c08:	b508      	push	{r3, lr}
	__asm__ volatile(
    4c0a:	f04f 0320 	mov.w	r3, #32
    4c0e:	f3ef 8111 	mrs	r1, BASEPRI
    4c12:	f383 8812 	msr	BASEPRI_MAX, r3
    4c16:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4c1a:	4a12      	ldr	r2, [pc, #72]	; (4c64 <generic_hfclk_start+0x5c>)
    4c1c:	6813      	ldr	r3, [r2, #0]
    4c1e:	f043 0002 	orr.w	r0, r3, #2
    4c22:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4c24:	07da      	lsls	r2, r3, #31
    4c26:	d408      	bmi.n	4c3a <generic_hfclk_start+0x32>
	__asm__ volatile(
    4c28:	f381 8811 	msr	BASEPRI, r1
    4c2c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4c30:	2001      	movs	r0, #1
}
    4c32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4c36:	f001 bc57 	b.w	64e8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c3e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4c42:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4c46:	07d3      	lsls	r3, r2, #31
    4c48:	d5ee      	bpl.n	4c28 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4c4a:	4807      	ldr	r0, [pc, #28]	; (4c68 <generic_hfclk_start+0x60>)
    4c4c:	f005 fb88 	bl	a360 <set_on_state>
    4c50:	f381 8811 	msr	BASEPRI, r1
    4c54:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4c58:	2000      	movs	r0, #0
}
    4c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4c5e:	f7ff bf89 	b.w	4b74 <clkstarted_handle.constprop.0>
    4c62:	bf00      	nop
    4c64:	20000df4 	.word	0x20000df4
    4c68:	20000de4 	.word	0x20000de4

00004c6c <api_blocking_start>:
{
    4c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c6e:	2200      	movs	r2, #0
    4c70:	2301      	movs	r3, #1
    4c72:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c76:	4a09      	ldr	r2, [pc, #36]	; (4c9c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c78:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c7c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c7e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4c82:	f005 fbae 	bl	a3e2 <api_start>
	if (err < 0) {
    4c86:	2800      	cmp	r0, #0
    4c88:	db05      	blt.n	4c96 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4c8e:	2300      	movs	r3, #0
    4c90:	4668      	mov	r0, sp
    4c92:	f002 ff89 	bl	7ba8 <z_impl_k_sem_take>
}
    4c96:	b005      	add	sp, #20
    4c98:	f85d fb04 	ldr.w	pc, [sp], #4
    4c9c:	0000a40f 	.word	0x0000a40f

00004ca0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ca0:	4b09      	ldr	r3, [pc, #36]	; (4cc8 <generic_hfclk_stop+0x28>)
    4ca2:	f3bf 8f5b 	dmb	ish
    4ca6:	e853 2f00 	ldrex	r2, [r3]
    4caa:	f022 0102 	bic.w	r1, r2, #2
    4cae:	e843 1000 	strex	r0, r1, [r3]
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d1f7      	bne.n	4ca6 <generic_hfclk_stop+0x6>
    4cb6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4cba:	07d3      	lsls	r3, r2, #31
    4cbc:	d402      	bmi.n	4cc4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4cbe:	2001      	movs	r0, #1
    4cc0:	f001 bc76 	b.w	65b0 <nrfx_clock_stop>
}
    4cc4:	4770      	bx	lr
    4cc6:	bf00      	nop
    4cc8:	20000df4 	.word	0x20000df4

00004ccc <z_nrf_clock_control_lf_on>:
{
    4ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cd0:	4947      	ldr	r1, [pc, #284]	; (4df0 <z_nrf_clock_control_lf_on+0x124>)
    4cd2:	f3bf 8f5b 	dmb	ish
    4cd6:	4606      	mov	r6, r0
    4cd8:	2201      	movs	r2, #1
    4cda:	e851 3f00 	ldrex	r3, [r1]
    4cde:	e841 2000 	strex	r0, r2, [r1]
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d1f9      	bne.n	4cda <z_nrf_clock_control_lf_on+0xe>
    4ce6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4cea:	b9a3      	cbnz	r3, 4d16 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4cec:	4941      	ldr	r1, [pc, #260]	; (4df4 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    4cee:	4842      	ldr	r0, [pc, #264]	; (4df8 <z_nrf_clock_control_lf_on+0x12c>)
    4cf0:	604b      	str	r3, [r1, #4]
    4cf2:	60cb      	str	r3, [r1, #12]
    4cf4:	608a      	str	r2, [r1, #8]
    4cf6:	f7fd fb23 	bl	2340 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4cfa:	2800      	cmp	r0, #0
    4cfc:	da0b      	bge.n	4d16 <z_nrf_clock_control_lf_on+0x4a>
    4cfe:	493f      	ldr	r1, [pc, #252]	; (4dfc <z_nrf_clock_control_lf_on+0x130>)
    4d00:	483f      	ldr	r0, [pc, #252]	; (4e00 <z_nrf_clock_control_lf_on+0x134>)
    4d02:	4a40      	ldr	r2, [pc, #256]	; (4e04 <z_nrf_clock_control_lf_on+0x138>)
    4d04:	f44f 7308 	mov.w	r3, #544	; 0x220
    4d08:	f005 fa5c 	bl	a1c4 <assert_print>
    4d0c:	483d      	ldr	r0, [pc, #244]	; (4e04 <z_nrf_clock_control_lf_on+0x138>)
    4d0e:	f44f 7108 	mov.w	r1, #544	; 0x220
    4d12:	f005 fa50 	bl	a1b6 <assert_post_action>
	switch (start_mode) {
    4d16:	b376      	cbz	r6, 4d76 <z_nrf_clock_control_lf_on+0xaa>
    4d18:	1e73      	subs	r3, r6, #1
    4d1a:	2b01      	cmp	r3, #1
    4d1c:	d859      	bhi.n	4dd2 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4d1e:	2e01      	cmp	r6, #1
    4d20:	d107      	bne.n	4d32 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d26:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d2a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4d2e:	2b01      	cmp	r3, #1
    4d30:	d021      	beq.n	4d76 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d32:	f005 ff5f 	bl	abf4 <k_is_in_isr>
    4d36:	4605      	mov	r5, r0
    4d38:	b9f8      	cbnz	r0, 4d7a <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4d3a:	4b33      	ldr	r3, [pc, #204]	; (4e08 <z_nrf_clock_control_lf_on+0x13c>)
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	b1e3      	cbz	r3, 4d7a <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d44:	2202      	movs	r2, #2
    4d46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4d4a:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d4c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4e0c <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d50:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4d54:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d58:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4d5c:	03d2      	lsls	r2, r2, #15
    4d5e:	d516      	bpl.n	4d8e <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4d60:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d64:	2b01      	cmp	r3, #1
    4d66:	d001      	beq.n	4d6c <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d68:	2e01      	cmp	r6, #1
    4d6a:	d110      	bne.n	4d8e <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4d6c:	b35d      	cbz	r5, 4dc6 <z_nrf_clock_control_lf_on+0xfa>
    4d6e:	f387 8811 	msr	BASEPRI, r7
    4d72:	f3bf 8f6f 	isb	sy
}
    4d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4d7a:	f04f 0320 	mov.w	r3, #32
    4d7e:	f3ef 8711 	mrs	r7, BASEPRI
    4d82:	f383 8812 	msr	BASEPRI_MAX, r3
    4d86:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d8a:	2501      	movs	r5, #1
    4d8c:	e7de      	b.n	4d4c <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4d8e:	b1ad      	cbz	r5, 4dbc <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4d90:	4638      	mov	r0, r7
    4d92:	f7fe ff0d 	bl	3bb0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4d96:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d1da      	bne.n	4d54 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4d9e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4da2:	2a00      	cmp	r2, #0
    4da4:	d0d6      	beq.n	4d54 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4da6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4daa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4dae:	2301      	movs	r3, #1
    4db0:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4db4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4db8:	60a3      	str	r3, [r4, #8]
}
    4dba:	e7cb      	b.n	4d54 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    4dbc:	2100      	movs	r1, #0
    4dbe:	2021      	movs	r0, #33	; 0x21
    4dc0:	f003 ffd4 	bl	8d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4dc4:	e7e7      	b.n	4d96 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    4dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4dca:	2202      	movs	r2, #2
    4dcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4dd0:	e7d1      	b.n	4d76 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    4dd2:	490f      	ldr	r1, [pc, #60]	; (4e10 <z_nrf_clock_control_lf_on+0x144>)
    4dd4:	480a      	ldr	r0, [pc, #40]	; (4e00 <z_nrf_clock_control_lf_on+0x134>)
    4dd6:	4a0b      	ldr	r2, [pc, #44]	; (4e04 <z_nrf_clock_control_lf_on+0x138>)
    4dd8:	f240 2332 	movw	r3, #562	; 0x232
    4ddc:	f005 f9f2 	bl	a1c4 <assert_print>
}
    4de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4de4:	4807      	ldr	r0, [pc, #28]	; (4e04 <z_nrf_clock_control_lf_on+0x138>)
    4de6:	f240 2132 	movw	r1, #562	; 0x232
    4dea:	f005 b9e4 	b.w	a1b6 <assert_post_action>
    4dee:	bf00      	nop
    4df0:	20000d98 	.word	0x20000d98
    4df4:	20000d88 	.word	0x20000d88
    4df8:	20000dbc 	.word	0x20000dbc
    4dfc:	0000bda3 	.word	0x0000bda3
    4e00:	0000b80f 	.word	0x0000b80f
    4e04:	0000c745 	.word	0x0000c745
    4e08:	2000950c 	.word	0x2000950c
    4e0c:	e000e100 	.word	0xe000e100
    4e10:	0000d0fe 	.word	0x0000d0fe

00004e14 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4e14:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4e16:	4b08      	ldr	r3, [pc, #32]	; (4e38 <uart_console_init+0x24>)
    4e18:	4808      	ldr	r0, [pc, #32]	; (4e3c <uart_console_init+0x28>)
    4e1a:	6018      	str	r0, [r3, #0]
    4e1c:	f005 feb0 	bl	ab80 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4e20:	b138      	cbz	r0, 4e32 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4e22:	4807      	ldr	r0, [pc, #28]	; (4e40 <uart_console_init+0x2c>)
    4e24:	f7ff fd66 	bl	48f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4e28:	4805      	ldr	r0, [pc, #20]	; (4e40 <uart_console_init+0x2c>)
    4e2a:	f7fd f835 	bl	1e98 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4e2e:	2000      	movs	r0, #0
}
    4e30:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4e32:	f06f 0012 	mvn.w	r0, #18
    4e36:	e7fb      	b.n	4e30 <uart_console_init+0x1c>
    4e38:	20000df8 	.word	0x20000df8
    4e3c:	0000b010 	.word	0x0000b010
    4e40:	00004e45 	.word	0x00004e45

00004e44 <console_out>:
	if ('\n' == c) {
    4e44:	280a      	cmp	r0, #10
{
    4e46:	b538      	push	{r3, r4, r5, lr}
    4e48:	4d07      	ldr	r5, [pc, #28]	; (4e68 <console_out+0x24>)
    4e4a:	4604      	mov	r4, r0
	if ('\n' == c) {
    4e4c:	d104      	bne.n	4e58 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    4e4e:	6828      	ldr	r0, [r5, #0]
    4e50:	6883      	ldr	r3, [r0, #8]
    4e52:	210d      	movs	r1, #13
    4e54:	69db      	ldr	r3, [r3, #28]
    4e56:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4e58:	6828      	ldr	r0, [r5, #0]
    4e5a:	6883      	ldr	r3, [r0, #8]
    4e5c:	b2e1      	uxtb	r1, r4
    4e5e:	69db      	ldr	r3, [r3, #28]
    4e60:	4798      	blx	r3
}
    4e62:	4620      	mov	r0, r4
    4e64:	bd38      	pop	{r3, r4, r5, pc}
    4e66:	bf00      	nop
    4e68:	20000df8 	.word	0x20000df8

00004e6c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    4e6c:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    4e6e:	6905      	ldr	r5, [r0, #16]
{
    4e70:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4e72:	460c      	mov	r4, r1
    4e74:	b961      	cbnz	r1, 4e90 <gpio_nrfx_manage_callback+0x24>
    4e76:	4922      	ldr	r1, [pc, #136]	; (4f00 <gpio_nrfx_manage_callback+0x94>)
    4e78:	4a22      	ldr	r2, [pc, #136]	; (4f04 <gpio_nrfx_manage_callback+0x98>)
    4e7a:	4823      	ldr	r0, [pc, #140]	; (4f08 <gpio_nrfx_manage_callback+0x9c>)
    4e7c:	2324      	movs	r3, #36	; 0x24
    4e7e:	f005 f9a1 	bl	a1c4 <assert_print>
    4e82:	4822      	ldr	r0, [pc, #136]	; (4f0c <gpio_nrfx_manage_callback+0xa0>)
    4e84:	f005 f99e 	bl	a1c4 <assert_print>
    4e88:	481e      	ldr	r0, [pc, #120]	; (4f04 <gpio_nrfx_manage_callback+0x98>)
    4e8a:	2124      	movs	r1, #36	; 0x24
    4e8c:	f005 f993 	bl	a1b6 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4e90:	6863      	ldr	r3, [r4, #4]
    4e92:	b963      	cbnz	r3, 4eae <gpio_nrfx_manage_callback+0x42>
    4e94:	491e      	ldr	r1, [pc, #120]	; (4f10 <gpio_nrfx_manage_callback+0xa4>)
    4e96:	4a1b      	ldr	r2, [pc, #108]	; (4f04 <gpio_nrfx_manage_callback+0x98>)
    4e98:	481b      	ldr	r0, [pc, #108]	; (4f08 <gpio_nrfx_manage_callback+0x9c>)
    4e9a:	2325      	movs	r3, #37	; 0x25
    4e9c:	f005 f992 	bl	a1c4 <assert_print>
    4ea0:	481c      	ldr	r0, [pc, #112]	; (4f14 <gpio_nrfx_manage_callback+0xa8>)
    4ea2:	f005 f98f 	bl	a1c4 <assert_print>
    4ea6:	4817      	ldr	r0, [pc, #92]	; (4f04 <gpio_nrfx_manage_callback+0x98>)
    4ea8:	2125      	movs	r1, #37	; 0x25
    4eaa:	f005 f984 	bl	a1b6 <assert_post_action>
	return list->head;
    4eae:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4eb0:	b14b      	cbz	r3, 4ec6 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4eb2:	42a3      	cmp	r3, r4
    4eb4:	d113      	bne.n	4ede <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    4eb6:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    4eb8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4eba:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    4ebc:	4294      	cmp	r4, r2
    4ebe:	d100      	bne.n	4ec2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4ec0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    4ec2:	2300      	movs	r3, #0
    4ec4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4ec6:	b97e      	cbnz	r6, 4ee8 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4ec8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    4eca:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ecc:	429c      	cmp	r4, r3
    4ece:	d106      	bne.n	4ede <gpio_nrfx_manage_callback+0x72>
	return node->next;
    4ed0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    4ed2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    4ed4:	68ab      	ldr	r3, [r5, #8]
    4ed6:	429c      	cmp	r4, r3
    4ed8:	d1f3      	bne.n	4ec2 <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4eda:	60aa      	str	r2, [r5, #8]
}
    4edc:	e7f1      	b.n	4ec2 <gpio_nrfx_manage_callback+0x56>
	return node->next;
    4ede:	461a      	mov	r2, r3
    4ee0:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d1f2      	bne.n	4ecc <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    4ee6:	b13e      	cbz	r6, 4ef8 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    4ee8:	686b      	ldr	r3, [r5, #4]
    4eea:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    4eec:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    4eee:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d1e9      	bne.n	4ec8 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    4ef4:	60ac      	str	r4, [r5, #8]
}
    4ef6:	e7e7      	b.n	4ec8 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    4ef8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4efc:	e7e5      	b.n	4eca <gpio_nrfx_manage_callback+0x5e>
    4efe:	bf00      	nop
    4f00:	0000c7f3 	.word	0x0000c7f3
    4f04:	0000c7c6 	.word	0x0000c7c6
    4f08:	0000b80f 	.word	0x0000b80f
    4f0c:	0000c7fc 	.word	0x0000c7fc
    4f10:	0000c80b 	.word	0x0000c80b
    4f14:	0000c81d 	.word	0x0000c81d

00004f18 <gpio_nrfx_pin_interrupt_configure>:
{
    4f18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    4f1a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f1c:	7b05      	ldrb	r5, [r0, #12]
    4f1e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4f22:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f26:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4f2a:	d104      	bne.n	4f36 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    4f2c:	4620      	mov	r0, r4
    4f2e:	f001 fe5b 	bl	6be8 <nrfx_gpiote_trigger_disable>
		return 0;
    4f32:	2000      	movs	r0, #0
    4f34:	e05d      	b.n	4ff2 <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f36:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f38:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f3c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f40:	d114      	bne.n	4f6c <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f46:	bf0c      	ite	eq
    4f48:	2304      	moveq	r3, #4
    4f4a:	2305      	movne	r3, #5
    4f4c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f50:	2300      	movs	r3, #0
    4f52:	4619      	mov	r1, r3
    4f54:	aa02      	add	r2, sp, #8
    4f56:	4620      	mov	r0, r4
    4f58:	f001 fc4c 	bl	67f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4f5c:	4b34      	ldr	r3, [pc, #208]	; (5030 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4f5e:	4298      	cmp	r0, r3
    4f60:	d162      	bne.n	5028 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4f62:	2101      	movs	r1, #1
    4f64:	4620      	mov	r0, r4
    4f66:	f001 fdcf 	bl	6b08 <nrfx_gpiote_trigger_enable>
	return 0;
    4f6a:	e7e2      	b.n	4f32 <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4f6c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4f70:	d041      	beq.n	4ff6 <gpio_nrfx_pin_interrupt_configure+0xde>
    4f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4f76:	bf14      	ite	ne
    4f78:	2301      	movne	r3, #1
    4f7a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f7c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4f80:	6883      	ldr	r3, [r0, #8]
    4f82:	40cb      	lsrs	r3, r1
    4f84:	07d8      	lsls	r0, r3, #31
    4f86:	d4e3      	bmi.n	4f50 <gpio_nrfx_pin_interrupt_configure+0x38>
    4f88:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4f8c:	d1e0      	bne.n	4f50 <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    4f8e:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    4f90:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    4f94:	d031      	beq.n	4ffa <gpio_nrfx_pin_interrupt_configure+0xe2>
    4f96:	2e01      	cmp	r6, #1
    4f98:	d104      	bne.n	4fa4 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    4f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4f9e:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fa0:	07d9      	lsls	r1, r3, #31
    4fa2:	d40e      	bmi.n	4fc2 <gpio_nrfx_pin_interrupt_configure+0xaa>
    4fa4:	4923      	ldr	r1, [pc, #140]	; (5034 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4fa6:	4824      	ldr	r0, [pc, #144]	; (5038 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4fa8:	4a24      	ldr	r2, [pc, #144]	; (503c <gpio_nrfx_pin_interrupt_configure+0x124>)
    4faa:	f240 2329 	movw	r3, #553	; 0x229
    4fae:	f005 f909 	bl	a1c4 <assert_print>
    4fb2:	4822      	ldr	r0, [pc, #136]	; (503c <gpio_nrfx_pin_interrupt_configure+0x124>)
    4fb4:	f240 2129 	movw	r1, #553	; 0x229
    4fb8:	f005 f8fd 	bl	a1b6 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fbc:	b316      	cbz	r6, 5004 <gpio_nrfx_pin_interrupt_configure+0xec>
    4fbe:	2e01      	cmp	r6, #1
    4fc0:	d123      	bne.n	500a <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    4fc2:	4b1f      	ldr	r3, [pc, #124]	; (5040 <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4fc4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4fc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4fcc:	07db      	lsls	r3, r3, #31
    4fce:	d4bf      	bmi.n	4f50 <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4fd0:	f10d 0507 	add.w	r5, sp, #7
    4fd4:	4629      	mov	r1, r5
    4fd6:	4620      	mov	r0, r4
    4fd8:	f001 fd2e 	bl	6a38 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4fdc:	4b19      	ldr	r3, [pc, #100]	; (5044 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    4fde:	4298      	cmp	r0, r3
    4fe0:	d120      	bne.n	5024 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    4fe2:	4628      	mov	r0, r5
    4fe4:	f001 fd8a 	bl	6afc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4fe8:	4b11      	ldr	r3, [pc, #68]	; (5030 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4fea:	4298      	cmp	r0, r3
    4fec:	d01a      	beq.n	5024 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    4fee:	f06f 000b 	mvn.w	r0, #11
}
    4ff2:	b004      	add	sp, #16
    4ff4:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4ff6:	2303      	movs	r3, #3
    4ff8:	e7c0      	b.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    4ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ffe:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5000:	07da      	lsls	r2, r3, #31
    5002:	d5cf      	bpl.n	4fa4 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    5004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5008:	e7dc      	b.n	4fc4 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    500a:	4a0c      	ldr	r2, [pc, #48]	; (503c <gpio_nrfx_pin_interrupt_configure+0x124>)
    500c:	490e      	ldr	r1, [pc, #56]	; (5048 <gpio_nrfx_pin_interrupt_configure+0x130>)
    500e:	480a      	ldr	r0, [pc, #40]	; (5038 <gpio_nrfx_pin_interrupt_configure+0x120>)
    5010:	f240 232e 	movw	r3, #558	; 0x22e
    5014:	f005 f8d6 	bl	a1c4 <assert_print>
    5018:	4808      	ldr	r0, [pc, #32]	; (503c <gpio_nrfx_pin_interrupt_configure+0x124>)
    501a:	f240 212e 	movw	r1, #558	; 0x22e
    501e:	f005 f8ca 	bl	a1b6 <assert_post_action>
    5022:	e7ef      	b.n	5004 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    5024:	9503      	str	r5, [sp, #12]
    5026:	e793      	b.n	4f50 <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    5028:	f06f 0004 	mvn.w	r0, #4
    502c:	e7e1      	b.n	4ff2 <gpio_nrfx_pin_interrupt_configure+0xda>
    502e:	bf00      	nop
    5030:	0bad0000 	.word	0x0bad0000
    5034:	0000c867 	.word	0x0000c867
    5038:	0000b80f 	.word	0x0000b80f
    503c:	0000c834 	.word	0x0000c834
    5040:	50000300 	.word	0x50000300
    5044:	0bad0004 	.word	0x0bad0004
    5048:	0000d0fe 	.word	0x0000d0fe

0000504c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    504c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    504e:	f001 fd45 	bl	6adc <nrfx_gpiote_is_init>
    5052:	4604      	mov	r4, r0
    5054:	b968      	cbnz	r0, 5072 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5056:	f001 fd19 	bl	6a8c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    505a:	4b08      	ldr	r3, [pc, #32]	; (507c <gpio_nrfx_init+0x30>)
    505c:	4298      	cmp	r0, r3
    505e:	d10a      	bne.n	5076 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5060:	4807      	ldr	r0, [pc, #28]	; (5080 <gpio_nrfx_init+0x34>)
    5062:	4621      	mov	r1, r4
    5064:	f001 fce2 	bl	6a2c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5068:	4622      	mov	r2, r4
    506a:	2105      	movs	r1, #5
    506c:	2006      	movs	r0, #6
    506e:	f7fe fe15 	bl	3c9c <z_arm_irq_priority_set>
		return 0;
    5072:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5074:	bd10      	pop	{r4, pc}
		return -EIO;
    5076:	f06f 0004 	mvn.w	r0, #4
    507a:	e7fb      	b.n	5074 <gpio_nrfx_init+0x28>
    507c:	0bad0000 	.word	0x0bad0000
    5080:	00005085 	.word	0x00005085

00005084 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5084:	0943      	lsrs	r3, r0, #5
{
    5086:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    508a:	d003      	beq.n	5094 <nrfx_gpio_handler+0x10>
    508c:	2b01      	cmp	r3, #1
    508e:	d030      	beq.n	50f2 <nrfx_gpio_handler+0x6e>
}
    5090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5094:	4f19      	ldr	r7, [pc, #100]	; (50fc <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    5096:	693b      	ldr	r3, [r7, #16]
    5098:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    509a:	2c00      	cmp	r4, #0
    509c:	d0f8      	beq.n	5090 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    509e:	f000 001f 	and.w	r0, r0, #31
    50a2:	2601      	movs	r6, #1
	return node->next;
    50a4:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    50a6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5100 <nrfx_gpio_handler+0x7c>
    50aa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5104 <nrfx_gpio_handler+0x80>
    50ae:	f8df a058 	ldr.w	sl, [pc, #88]	; 5108 <nrfx_gpio_handler+0x84>
    50b2:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    50b4:	2c00      	cmp	r4, #0
    50b6:	d0eb      	beq.n	5090 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    50b8:	68a3      	ldr	r3, [r4, #8]
    50ba:	421e      	tst	r6, r3
    50bc:	d014      	beq.n	50e8 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    50be:	6863      	ldr	r3, [r4, #4]
    50c0:	b963      	cbnz	r3, 50dc <nrfx_gpio_handler+0x58>
    50c2:	4649      	mov	r1, r9
    50c4:	2345      	movs	r3, #69	; 0x45
    50c6:	4642      	mov	r2, r8
    50c8:	4650      	mov	r0, sl
    50ca:	f005 f87b 	bl	a1c4 <assert_print>
    50ce:	480f      	ldr	r0, [pc, #60]	; (510c <nrfx_gpio_handler+0x88>)
    50d0:	f005 f878 	bl	a1c4 <assert_print>
    50d4:	2145      	movs	r1, #69	; 0x45
    50d6:	4640      	mov	r0, r8
    50d8:	f005 f86d 	bl	a1b6 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    50dc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    50e0:	4621      	mov	r1, r4
    50e2:	4032      	ands	r2, r6
    50e4:	4638      	mov	r0, r7
    50e6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    50e8:	b12d      	cbz	r5, 50f6 <nrfx_gpio_handler+0x72>
    50ea:	682b      	ldr	r3, [r5, #0]
    50ec:	462c      	mov	r4, r5
    50ee:	461d      	mov	r5, r3
    50f0:	e7e0      	b.n	50b4 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50f2:	4f07      	ldr	r7, [pc, #28]	; (5110 <nrfx_gpio_handler+0x8c>)
    50f4:	e7cf      	b.n	5096 <nrfx_gpio_handler+0x12>
    50f6:	462b      	mov	r3, r5
    50f8:	e7f8      	b.n	50ec <nrfx_gpio_handler+0x68>
    50fa:	bf00      	nop
    50fc:	0000afe0 	.word	0x0000afe0
    5100:	0000c7c6 	.word	0x0000c7c6
    5104:	0000c88a 	.word	0x0000c88a
    5108:	0000b80f 	.word	0x0000b80f
    510c:	0000c81d 	.word	0x0000c81d
    5110:	0000afc8 	.word	0x0000afc8

00005114 <gpio_nrfx_pin_configure>:
{
    5114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5118:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    511a:	7b3b      	ldrb	r3, [r7, #12]
    511c:	f001 051f 	and.w	r5, r1, #31
{
    5120:	b085      	sub	sp, #20
    5122:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5124:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5128:	4614      	mov	r4, r2
    512a:	b9d2      	cbnz	r2, 5162 <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    512c:	a902      	add	r1, sp, #8
    512e:	4628      	mov	r0, r5
    5130:	f001 fc82 	bl	6a38 <nrfx_gpiote_channel_get>
    5134:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5136:	4628      	mov	r0, r5
    5138:	f001 fd80 	bl	6c3c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    513c:	4b46      	ldr	r3, [pc, #280]	; (5258 <gpio_nrfx_pin_configure+0x144>)
    513e:	4298      	cmp	r0, r3
    5140:	d004      	beq.n	514c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    5142:	f06f 0004 	mvn.w	r0, #4
}
    5146:	b005      	add	sp, #20
    5148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    514c:	4284      	cmp	r4, r0
    514e:	d001      	beq.n	5154 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5150:	2000      	movs	r0, #0
    5152:	e7f8      	b.n	5146 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    5154:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5158:	f001 fcca 	bl	6af0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    515c:	42a0      	cmp	r0, r4
    515e:	d0f7      	beq.n	5150 <gpio_nrfx_pin_configure+0x3c>
    5160:	e7ef      	b.n	5142 <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5162:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5166:	f10d 0103 	add.w	r1, sp, #3
    516a:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    516c:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    5170:	f001 fc62 	bl	6a38 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5174:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    5176:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5178:	aa02      	add	r2, sp, #8
    517a:	4649      	mov	r1, r9
    517c:	4628      	mov	r0, r5
    517e:	f001 fb39 	bl	67f4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5182:	4b35      	ldr	r3, [pc, #212]	; (5258 <gpio_nrfx_pin_configure+0x144>)
    5184:	4298      	cmp	r0, r3
    5186:	d002      	beq.n	518e <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    5188:	f06f 0015 	mvn.w	r0, #21
    518c:	e7db      	b.n	5146 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    518e:	4580      	cmp	r8, r0
    5190:	d103      	bne.n	519a <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    5192:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5196:	f001 fcab 	bl	6af0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    519a:	03a3      	lsls	r3, r4, #14
    519c:	d54c      	bpl.n	5238 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    519e:	f240 6306 	movw	r3, #1542	; 0x606
    51a2:	4023      	ands	r3, r4
    51a4:	f240 2206 	movw	r2, #518	; 0x206
    51a8:	4293      	cmp	r3, r2
    51aa:	d019      	beq.n	51e0 <gpio_nrfx_pin_configure+0xcc>
    51ac:	d80c      	bhi.n	51c8 <gpio_nrfx_pin_configure+0xb4>
    51ae:	2b06      	cmp	r3, #6
    51b0:	d017      	beq.n	51e2 <gpio_nrfx_pin_configure+0xce>
    51b2:	d804      	bhi.n	51be <gpio_nrfx_pin_configure+0xaa>
    51b4:	b1ab      	cbz	r3, 51e2 <gpio_nrfx_pin_configure+0xce>
    51b6:	2b02      	cmp	r3, #2
    51b8:	d1e6      	bne.n	5188 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    51ba:	2304      	movs	r3, #4
    51bc:	e011      	b.n	51e2 <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    51be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    51c2:	d1e1      	bne.n	5188 <gpio_nrfx_pin_configure+0x74>
    51c4:	2301      	movs	r3, #1
    51c6:	e00c      	b.n	51e2 <gpio_nrfx_pin_configure+0xce>
    51c8:	f240 4202 	movw	r2, #1026	; 0x402
    51cc:	4293      	cmp	r3, r2
    51ce:	d027      	beq.n	5220 <gpio_nrfx_pin_configure+0x10c>
    51d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    51d4:	d026      	beq.n	5224 <gpio_nrfx_pin_configure+0x110>
    51d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    51da:	d1d5      	bne.n	5188 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    51dc:	2302      	movs	r3, #2
    51de:	e000      	b.n	51e2 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    51e0:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    51e2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    51e6:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    51ea:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    51ee:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    51f0:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    51f4:	bf54      	ite	pl
    51f6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    51fa:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    51fc:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    51fe:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5202:	d511      	bpl.n	5228 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5204:	687a      	ldr	r2, [r7, #4]
    5206:	2301      	movs	r3, #1
    5208:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    520a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    520e:	2200      	movs	r2, #0
    5210:	a901      	add	r1, sp, #4
    5212:	4628      	mov	r0, r5
    5214:	f001 fb96 	bl	6944 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5218:	4b0f      	ldr	r3, [pc, #60]	; (5258 <gpio_nrfx_pin_configure+0x144>)
    521a:	4298      	cmp	r0, r3
    521c:	d098      	beq.n	5150 <gpio_nrfx_pin_configure+0x3c>
    521e:	e7b3      	b.n	5188 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    5220:	2305      	movs	r3, #5
    5222:	e7de      	b.n	51e2 <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    5224:	2303      	movs	r3, #3
    5226:	e7dc      	b.n	51e2 <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5228:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    522a:	bf41      	itttt	mi
    522c:	2301      	movmi	r3, #1
    522e:	687a      	ldrmi	r2, [r7, #4]
    5230:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5232:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5236:	e7ea      	b.n	520e <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    5238:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    523a:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    523e:	bf54      	ite	pl
    5240:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5244:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5246:	461a      	mov	r2, r3
    5248:	a901      	add	r1, sp, #4
    524a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    524c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5250:	f001 fad0 	bl	67f4 <nrfx_gpiote_input_configure>
    5254:	e7e0      	b.n	5218 <gpio_nrfx_pin_configure+0x104>
    5256:	bf00      	nop
    5258:	0bad0000 	.word	0x0bad0000

0000525c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    525c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    525e:	ab0b      	add	r3, sp, #44	; 0x2c
    5260:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    5262:	9303      	str	r3, [sp, #12]
    5264:	4b05      	ldr	r3, [pc, #20]	; (527c <z_log_msg2_runtime_create.constprop.0+0x20>)
    5266:	9302      	str	r3, [sp, #8]
    5268:	2300      	movs	r3, #0
    526a:	e9cd 3300 	strd	r3, r3, [sp]
    526e:	2201      	movs	r2, #1
    5270:	4618      	mov	r0, r3
    5272:	f7fe f91b 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    5276:	b007      	add	sp, #28
    5278:	f85d fb04 	ldr.w	pc, [sp], #4
    527c:	0000c8a4 	.word	0x0000c8a4

00005280 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    5280:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5284:	461c      	mov	r4, r3
	return config->uarte_regs;
    5286:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    5288:	6907      	ldr	r7, [r0, #16]
{
    528a:	460e      	mov	r6, r1
    528c:	4605      	mov	r5, r0
	return config->uarte_regs;
    528e:	6819      	ldr	r1, [r3, #0]
    5290:	f04f 0320 	mov.w	r3, #32
    5294:	f3ef 8811 	mrs	r8, BASEPRI
    5298:	f383 8812 	msr	BASEPRI_MAX, r3
    529c:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    52a0:	68f8      	ldr	r0, [r7, #12]
    52a2:	68c3      	ldr	r3, [r0, #12]
    52a4:	b143      	cbz	r3, 52b8 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    52a6:	f388 8811 	msr	BASEPRI, r8
    52aa:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    52ae:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    52b2:	b002      	add	sp, #8
    52b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    52b8:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    52bc:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    52be:	6086      	str	r6, [r0, #8]
    52c0:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    52c4:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    52c8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    52cc:	d110      	bne.n	52f0 <uarte_nrfx_tx+0x70>
		data->async->xfer_len = len;
    52ce:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    52d2:	4639      	mov	r1, r7
    52d4:	4628      	mov	r0, r5
    52d6:	f005 fa2d 	bl	a734 <start_tx_locked>
    52da:	f388 8811 	msr	BASEPRI, r8
    52de:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    52e2:	7afb      	ldrb	r3, [r7, #11]
    52e4:	2b01      	cmp	r3, #1
    52e6:	d101      	bne.n	52ec <uarte_nrfx_tx+0x6c>
	    && timeout != SYS_FOREVER_US) {
    52e8:	1c63      	adds	r3, r4, #1
    52ea:	d105      	bne.n	52f8 <uarte_nrfx_tx+0x78>
	return 0;
    52ec:	2000      	movs	r0, #0
    52ee:	e7e0      	b.n	52b2 <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    52f0:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    52f2:	f005 f9d4 	bl	a69e <setup_tx_cache.isra.0>
    52f6:	e7ec      	b.n	52d2 <uarte_nrfx_tx+0x52>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    52f8:	480b      	ldr	r0, [pc, #44]	; (5328 <uarte_nrfx_tx+0xa8>)
    52fa:	4a0c      	ldr	r2, [pc, #48]	; (532c <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    52fc:	68fd      	ldr	r5, [r7, #12]
    52fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    5302:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5306:	2100      	movs	r1, #0
    5308:	2300      	movs	r3, #0
    530a:	fbc4 0106 	smlal	r0, r1, r4, r6
    530e:	f7fb fc43 	bl	b98 <__aeabi_uldivmod>
    5312:	3528      	adds	r5, #40	; 0x28
    5314:	4602      	mov	r2, r0
    5316:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5318:	2000      	movs	r0, #0
    531a:	2100      	movs	r1, #0
    531c:	e9cd 0100 	strd	r0, r1, [sp]
    5320:	4628      	mov	r0, r5
    5322:	f004 fa07 	bl	9734 <z_impl_k_timer_start>
    5326:	e7e1      	b.n	52ec <uarte_nrfx_tx+0x6c>
    5328:	000f423f 	.word	0x000f423f
    532c:	000f4240 	.word	0x000f4240

00005330 <uarte_nrfx_configure>:
{
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    5332:	794b      	ldrb	r3, [r1, #5]
    5334:	2b01      	cmp	r3, #1
    5336:	d026      	beq.n	5386 <uarte_nrfx_configure+0x56>
    5338:	2b03      	cmp	r3, #3
    533a:	d121      	bne.n	5380 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    533c:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    533e:	798b      	ldrb	r3, [r1, #6]
    5340:	2b03      	cmp	r3, #3
    5342:	d11d      	bne.n	5380 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    5344:	79cc      	ldrb	r4, [r1, #7]
    5346:	b10c      	cbz	r4, 534c <uarte_nrfx_configure+0x1c>
    5348:	2c01      	cmp	r4, #1
    534a:	d119      	bne.n	5380 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    534c:	790a      	ldrb	r2, [r1, #4]
    534e:	b112      	cbz	r2, 5356 <uarte_nrfx_configure+0x26>
    5350:	2a02      	cmp	r2, #2
    5352:	d115      	bne.n	5380 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5354:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5356:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5358:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    535a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    535e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    5360:	d065      	beq.n	542e <uarte_nrfx_configure+0xfe>
    5362:	d82d      	bhi.n	53c0 <uarte_nrfx_configure+0x90>
    5364:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5368:	d064      	beq.n	5434 <uarte_nrfx_configure+0x104>
    536a:	d816      	bhi.n	539a <uarte_nrfx_configure+0x6a>
    536c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    5370:	d062      	beq.n	5438 <uarte_nrfx_configure+0x108>
    5372:	d80a      	bhi.n	538a <uarte_nrfx_configure+0x5a>
    5374:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5378:	d061      	beq.n	543e <uarte_nrfx_configure+0x10e>
    537a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    537e:	d061      	beq.n	5444 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    5380:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5384:	e052      	b.n	542c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    5386:	2600      	movs	r6, #0
    5388:	e7d9      	b.n	533e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    538a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    538e:	d05c      	beq.n	544a <uarte_nrfx_configure+0x11a>
    5390:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5394:	d1f4      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5396:	4b37      	ldr	r3, [pc, #220]	; (5474 <uarte_nrfx_configure+0x144>)
    5398:	e03c      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    539a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    539e:	d057      	beq.n	5450 <uarte_nrfx_configure+0x120>
    53a0:	d807      	bhi.n	53b2 <uarte_nrfx_configure+0x82>
    53a2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    53a6:	d055      	beq.n	5454 <uarte_nrfx_configure+0x124>
    53a8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    53ac:	d1e8      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    53ae:	4b32      	ldr	r3, [pc, #200]	; (5478 <uarte_nrfx_configure+0x148>)
    53b0:	e030      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53b2:	f647 2712 	movw	r7, #31250	; 0x7a12
    53b6:	42bb      	cmp	r3, r7
    53b8:	d1e2      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    53ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    53be:	e029      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53c0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    53c4:	d048      	beq.n	5458 <uarte_nrfx_configure+0x128>
    53c6:	d813      	bhi.n	53f0 <uarte_nrfx_configure+0xc0>
    53c8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    53cc:	d047      	beq.n	545e <uarte_nrfx_configure+0x12e>
    53ce:	d809      	bhi.n	53e4 <uarte_nrfx_configure+0xb4>
    53d0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    53d4:	42bb      	cmp	r3, r7
    53d6:	d044      	beq.n	5462 <uarte_nrfx_configure+0x132>
    53d8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    53dc:	d1d0      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    53de:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    53e2:	e017      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53e4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    53e8:	d1ca      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    53ea:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    53ee:	e011      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53f0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    53f4:	d038      	beq.n	5468 <uarte_nrfx_configure+0x138>
    53f6:	d808      	bhi.n	540a <uarte_nrfx_configure+0xda>
    53f8:	4f20      	ldr	r7, [pc, #128]	; (547c <uarte_nrfx_configure+0x14c>)
    53fa:	42bb      	cmp	r3, r7
    53fc:	d037      	beq.n	546e <uarte_nrfx_configure+0x13e>
    53fe:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    5402:	d1bd      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5404:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5408:	e004      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    540a:	4f1d      	ldr	r7, [pc, #116]	; (5480 <uarte_nrfx_configure+0x150>)
    540c:	42bb      	cmp	r3, r7
    540e:	d1b7      	bne.n	5380 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    5410:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5414:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5416:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    541a:	1d03      	adds	r3, r0, #4
    541c:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    541e:	4334      	orrs	r4, r6
    5420:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5422:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5426:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    542a:	2000      	movs	r0, #0
}
    542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    542e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5432:	e7ef      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5434:	4b13      	ldr	r3, [pc, #76]	; (5484 <uarte_nrfx_configure+0x154>)
    5436:	e7ed      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5438:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    543c:	e7ea      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    543e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5442:	e7e7      	b.n	5414 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5444:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5448:	e7e4      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    544a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    544e:	e7e1      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5450:	4b0d      	ldr	r3, [pc, #52]	; (5488 <uarte_nrfx_configure+0x158>)
    5452:	e7df      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5454:	4b0d      	ldr	r3, [pc, #52]	; (548c <uarte_nrfx_configure+0x15c>)
    5456:	e7dd      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5458:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    545c:	e7da      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    545e:	4b0c      	ldr	r3, [pc, #48]	; (5490 <uarte_nrfx_configure+0x160>)
    5460:	e7d8      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5462:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5466:	e7d5      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5468:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    546c:	e7d2      	b.n	5414 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    546e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5472:	e7cf      	b.n	5414 <uarte_nrfx_configure+0xe4>
    5474:	0013b000 	.word	0x0013b000
    5478:	004ea000 	.word	0x004ea000
    547c:	0003d090 	.word	0x0003d090
    5480:	000f4240 	.word	0x000f4240
    5484:	00275000 	.word	0x00275000
    5488:	0075c000 	.word	0x0075c000
    548c:	003af000 	.word	0x003af000
    5490:	013a9000 	.word	0x013a9000

00005494 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5498:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    549c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    549e:	f8d9 5000 	ldr.w	r5, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    54a2:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    54a6:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    54a8:	2100      	movs	r1, #0
    54aa:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    54ae:	4607      	mov	r7, r0
	data->dev = dev;
    54b0:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    54b2:	aa05      	add	r2, sp, #20
    54b4:	4640      	mov	r0, r8
    54b6:	f005 f9df 	bl	a878 <pinctrl_lookup_state>
	if (ret < 0) {
    54ba:	1e04      	subs	r4, r0, #0
    54bc:	db25      	blt.n	550a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    54be:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    54c0:	f8d8 2000 	ldr.w	r2, [r8]
    54c4:	7919      	ldrb	r1, [r3, #4]
    54c6:	6818      	ldr	r0, [r3, #0]
    54c8:	f005 fa2d 	bl	a926 <pinctrl_configure_pins>
	if (err < 0) {
    54cc:	1e04      	subs	r4, r0, #0
    54ce:	db1c      	blt.n	550a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    54d0:	1d31      	adds	r1, r6, #4
    54d2:	4638      	mov	r0, r7
    54d4:	f7ff ff2c 	bl	5330 <uarte_nrfx_configure>
	if (err) {
    54d8:	4604      	mov	r4, r0
    54da:	b9b0      	cbnz	r0, 550a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    54dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    54e0:	0799      	lsls	r1, r3, #30
    54e2:	d529      	bpl.n	5538 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    54e4:	f106 0016 	add.w	r0, r6, #22
    54e8:	f001 fcac 	bl	6e44 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    54ec:	4b49      	ldr	r3, [pc, #292]	; (5614 <uarte_instance_init.constprop.0+0x180>)
    54ee:	4298      	cmp	r0, r3
    54f0:	d00f      	beq.n	5512 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    54f2:	4b49      	ldr	r3, [pc, #292]	; (5618 <uarte_instance_init.constprop.0+0x184>)
    54f4:	9400      	str	r4, [sp, #0]
    54f6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    54fa:	4620      	mov	r0, r4
    54fc:	4623      	mov	r3, r4
    54fe:	4947      	ldr	r1, [pc, #284]	; (561c <uarte_instance_init.constprop.0+0x188>)
    5500:	2201      	movs	r2, #1
    5502:	f7ff feab 	bl	525c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    5506:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    550a:	4620      	mov	r0, r4
    550c:	b007      	add	sp, #28
    550e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    5512:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5514:	00c3      	lsls	r3, r0, #3
    5516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    551a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    551e:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5522:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5526:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    552a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    552e:	4a3c      	ldr	r2, [pc, #240]	; (5620 <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5530:	2301      	movs	r3, #1
    5532:	4083      	lsls	r3, r0
    5534:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    5538:	68f3      	ldr	r3, [r6, #12]
    553a:	2b00      	cmp	r3, #0
    553c:	d055      	beq.n	55ea <uarte_instance_init.constprop.0+0x156>
	return config->uarte_regs;
    553e:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    5540:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    5544:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    5546:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    554a:	4936      	ldr	r1, [pc, #216]	; (5624 <uarte_instance_init.constprop.0+0x190>)
    554c:	2204      	movs	r2, #4
    554e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    5552:	2201      	movs	r2, #1
    5554:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    5558:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    555c:	2108      	movs	r1, #8
    555e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5562:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    5566:	b1a1      	cbz	r1, 5592 <uarte_instance_init.constprop.0+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5568:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    556a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    556e:	b91a      	cbnz	r2, 5578 <uarte_instance_init.constprop.0+0xe4>
    5570:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    5574:	2a00      	cmp	r2, #0
    5576:	d0f8      	beq.n	556a <uarte_instance_init.constprop.0+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5578:	2200      	movs	r2, #0
    557a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    557e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    5582:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5586:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    558a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    558e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    5592:	4925      	ldr	r1, [pc, #148]	; (5628 <uarte_instance_init.constprop.0+0x194>)
    5594:	2200      	movs	r2, #0
    5596:	3088      	adds	r0, #136	; 0x88
    5598:	f005 fb96 	bl	acc8 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    559c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    55a0:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    55a4:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    55a8:	4920      	ldr	r1, [pc, #128]	; (562c <uarte_instance_init.constprop.0+0x198>)
    55aa:	2200      	movs	r2, #0
    55ac:	3028      	adds	r0, #40	; 0x28
    55ae:	f005 fb8b 	bl	acc8 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    55b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    55b6:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    55ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
    55be:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    55c0:	bf5c      	itt	pl
    55c2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    55c6:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    55ca:	06db      	lsls	r3, r3, #27
    55cc:	bf44      	itt	mi
    55ce:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    55d2:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    55d6:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    55d8:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    55da:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    55de:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55e2:	2301      	movs	r3, #1
    55e4:	60ab      	str	r3, [r5, #8]
    55e6:	60eb      	str	r3, [r5, #12]
	return 0;
    55e8:	e78f      	b.n	550a <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    55ea:	2308      	movs	r3, #8
    55ec:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    55f0:	f899 3008 	ldrb.w	r3, [r9, #8]
    55f4:	2b00      	cmp	r3, #0
    55f6:	d1e0      	bne.n	55ba <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55f8:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    55fc:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    5600:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5604:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5608:	2301      	movs	r3, #1
    560a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    560e:	602b      	str	r3, [r5, #0]
}
    5610:	e7d3      	b.n	55ba <uarte_instance_init.constprop.0+0x126>
    5612:	bf00      	nop
    5614:	0bad0000 	.word	0x0bad0000
    5618:	0000c8a4 	.word	0x0000c8a4
    561c:	0000b1e8 	.word	0x0000b1e8
    5620:	4001f000 	.word	0x4001f000
    5624:	000a0210 	.word	0x000a0210
    5628:	0000a7a3 	.word	0x0000a7a3
    562c:	0000a867 	.word	0x0000a867

00005630 <uarte_nrfx_poll_out>:
{
    5630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    5632:	6906      	ldr	r6, [r0, #16]
{
    5634:	4605      	mov	r5, r0
    5636:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5638:	f005 fadc 	bl	abf4 <k_is_in_isr>
    563c:	b9b0      	cbnz	r0, 566c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    563e:	4b28      	ldr	r3, [pc, #160]	; (56e0 <uarte_nrfx_poll_out+0xb0>)
    5640:	781b      	ldrb	r3, [r3, #0]
    5642:	b19b      	cbz	r3, 566c <uarte_nrfx_poll_out+0x3c>
{
    5644:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5646:	6868      	ldr	r0, [r5, #4]
    5648:	f005 f864 	bl	a714 <is_tx_ready.isra.0>
    564c:	2800      	cmp	r0, #0
    564e:	d134      	bne.n	56ba <uarte_nrfx_poll_out+0x8a>
    5650:	2001      	movs	r0, #1
    5652:	f005 fa13 	bl	aa7c <nrfx_busy_wait>
    5656:	3c01      	subs	r4, #1
    5658:	d1f5      	bne.n	5646 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    565a:	2100      	movs	r1, #0
    565c:	2021      	movs	r0, #33	; 0x21
    565e:	f003 fb85 	bl	8d6c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5662:	e7ef      	b.n	5644 <uarte_nrfx_poll_out+0x14>
    5664:	f384 8811 	msr	BASEPRI, r4
    5668:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    566c:	f04f 0320 	mov.w	r3, #32
    5670:	f3ef 8411 	mrs	r4, BASEPRI
    5674:	f383 8812 	msr	BASEPRI_MAX, r3
    5678:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    567c:	6869      	ldr	r1, [r5, #4]
    567e:	4608      	mov	r0, r1
    5680:	f005 f848 	bl	a714 <is_tx_ready.isra.0>
    5684:	2800      	cmp	r0, #0
    5686:	d0ed      	beq.n	5664 <uarte_nrfx_poll_out+0x34>
				if (data->async && data->async->tx_size &&
    5688:	68f3      	ldr	r3, [r6, #12]
    568a:	b153      	cbz	r3, 56a2 <uarte_nrfx_poll_out+0x72>
    568c:	68da      	ldr	r2, [r3, #12]
    568e:	b142      	cbz	r2, 56a2 <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
    5690:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    5694:	2a00      	cmp	r2, #0
    5696:	da04      	bge.n	56a2 <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
    5698:	680a      	ldr	r2, [r1, #0]
    return p_reg->TXD.AMOUNT;
    569a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    569e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    56a2:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    56a4:	2201      	movs	r2, #1
	data->char_out = c;
    56a6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    56aa:	4628      	mov	r0, r5
    56ac:	f004 fee8 	bl	a480 <tx_start>
	__asm__ volatile(
    56b0:	f384 8811 	msr	BASEPRI, r4
    56b4:	f3bf 8f6f 	isb	sy
}
    56b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    56ba:	f04f 0320 	mov.w	r3, #32
    56be:	f3ef 8411 	mrs	r4, BASEPRI
    56c2:	f383 8812 	msr	BASEPRI_MAX, r3
    56c6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    56ca:	6868      	ldr	r0, [r5, #4]
    56cc:	f005 f822 	bl	a714 <is_tx_ready.isra.0>
    56d0:	2800      	cmp	r0, #0
    56d2:	d1e6      	bne.n	56a2 <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
    56d4:	f384 8811 	msr	BASEPRI, r4
    56d8:	f3bf 8f6f 	isb	sy
}
    56dc:	e7bd      	b.n	565a <uarte_nrfx_poll_out+0x2a>
    56de:	bf00      	nop
    56e0:	2000950c 	.word	0x2000950c

000056e4 <uarte_nrfx_rx_enable>:
{
    56e4:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    56e8:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    56ec:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    56f0:	f8da 8000 	ldr.w	r8, [sl]
{
    56f4:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    56f6:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    56fa:	4605      	mov	r5, r0
    56fc:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    56fe:	b192      	cbz	r2, 5726 <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    5700:	4a43      	ldr	r2, [pc, #268]	; (5810 <uarte_nrfx_rx_enable+0x12c>)
    5702:	4944      	ldr	r1, [pc, #272]	; (5814 <uarte_nrfx_rx_enable+0x130>)
    5704:	4844      	ldr	r0, [pc, #272]	; (5818 <uarte_nrfx_rx_enable+0x134>)
    5706:	f240 337f 	movw	r3, #895	; 0x37f
    570a:	f004 fd5b 	bl	a1c4 <assert_print>
    570e:	4843      	ldr	r0, [pc, #268]	; (581c <uarte_nrfx_rx_enable+0x138>)
    5710:	f004 fd58 	bl	a1c4 <assert_print>
    5714:	483e      	ldr	r0, [pc, #248]	; (5810 <uarte_nrfx_rx_enable+0x12c>)
    5716:	f240 317f 	movw	r1, #895	; 0x37f
    571a:	f004 fd4c 	bl	a1b6 <assert_post_action>
		return -ENOTSUP;
    571e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5722:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    5726:	f8db 100c 	ldr.w	r1, [fp, #12]
    572a:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    572e:	2a00      	cmp	r2, #0
    5730:	d16b      	bne.n	580a <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    5732:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    5736:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    5738:	bfd2      	itee	le
    573a:	235c      	movle	r3, #92	; 0x5c
    573c:	2205      	movgt	r2, #5
    573e:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    5742:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    5746:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    5748:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    574c:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    574e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5752:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    5754:	e9c1 9718 	strd	r9, r7, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5758:	d523      	bpl.n	57a2 <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    575a:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    575e:	b306      	cbz	r6, 57a2 <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    5760:	42be      	cmp	r6, r7
    5762:	bf28      	it	cs
    5764:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5766:	4648      	mov	r0, r9
    5768:	4632      	mov	r2, r6
    576a:	31cc      	adds	r1, #204	; 0xcc
    576c:	f005 fba1 	bl	aeb2 <memcpy>
			if (!len) {
    5770:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    5772:	44b1      	add	r9, r6
			if (!len) {
    5774:	d115      	bne.n	57a2 <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    5776:	f8db 200c 	ldr.w	r2, [fp, #12]
    577a:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    577e:	1b9b      	subs	r3, r3, r6
    5780:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    5784:	4631      	mov	r1, r6
    5786:	4628      	mov	r0, r5
    5788:	f004 fea7 	bl	a4da <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    578c:	f8db 100c 	ldr.w	r1, [fp, #12]
    5790:	4628      	mov	r0, r5
    5792:	3160      	adds	r1, #96	; 0x60
    5794:	f004 feba 	bl	a50c <rx_buf_release>
				notify_rx_disable(dev);
    5798:	4628      	mov	r0, r5
    579a:	f004 fecf 	bl	a53c <notify_rx_disable>
				return 0;
    579e:	2000      	movs	r0, #0
    57a0:	e7bf      	b.n	5722 <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57a2:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    57a4:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    57a8:	f8c8 7538 	str.w	r7, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57ac:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    57b0:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    57b4:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    57b8:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    57bc:	f8db 300c 	ldr.w	r3, [fp, #12]
    57c0:	2201      	movs	r2, #1
    57c2:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    57c6:	f8da 3004 	ldr.w	r3, [sl, #4]
    57ca:	06db      	lsls	r3, r3, #27
    57cc:	d519      	bpl.n	5802 <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    57ce:	f04f 0320 	mov.w	r3, #32
    57d2:	f3ef 8111 	mrs	r1, BASEPRI
    57d6:	f383 8812 	msr	BASEPRI_MAX, r3
    57da:	f3bf 8f6f 	isb	sy
	if (data->async) {
    57de:	692b      	ldr	r3, [r5, #16]
	const struct uarte_nrfx_config *config = dev->config;
    57e0:	6868      	ldr	r0, [r5, #4]
	if (data->async) {
    57e2:	68db      	ldr	r3, [r3, #12]
    57e4:	b12b      	cbz	r3, 57f2 <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    57e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    57ea:	f042 0202 	orr.w	r2, r2, #2
    57ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    57f2:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    57f4:	2208      	movs	r2, #8
    57f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    57fa:	f381 8811 	msr	BASEPRI, r1
    57fe:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5802:	2301      	movs	r3, #1
    5804:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    5808:	e7c9      	b.n	579e <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    580a:	f06f 000f 	mvn.w	r0, #15
    580e:	e788      	b.n	5722 <uarte_nrfx_rx_enable+0x3e>
    5810:	0000c8c3 	.word	0x0000c8c3
    5814:	0000d0fe 	.word	0x0000d0fe
    5818:	0000b80f 	.word	0x0000b80f
    581c:	0000c8f7 	.word	0x0000c8f7

00005820 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    5820:	6843      	ldr	r3, [r0, #4]
{
    5822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    5826:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    5828:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    582a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    582e:	b088      	sub	sp, #32
    5830:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    5832:	b169      	cbz	r1, 5850 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5834:	2200      	movs	r2, #0
    5836:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    583a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    583e:	68da      	ldr	r2, [r3, #12]
    5840:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    5844:	3301      	adds	r3, #1
    5846:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    584a:	b008      	add	sp, #32
    584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5850:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5854:	b313      	cbz	r3, 589c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5856:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    585a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    585e:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5862:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    5866:	2214      	movs	r2, #20
    5868:	a803      	add	r0, sp, #12
    586a:	f005 fb43 	bl	aef4 <memset>
    586e:	2306      	movs	r3, #6
    5870:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5874:	07f3      	lsls	r3, r6, #31
    5876:	f100 8102 	bmi.w	5a7e <uarte_nrfx_isr_async+0x25e>
    587a:	07b7      	lsls	r7, r6, #30
    587c:	f100 8101 	bmi.w	5a82 <uarte_nrfx_isr_async+0x262>
    5880:	0770      	lsls	r0, r6, #29
    5882:	f100 8100 	bmi.w	5a86 <uarte_nrfx_isr_async+0x266>
    5886:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    588a:	4620      	mov	r0, r4
    588c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    588e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    5892:	f004 fe1b 	bl	a4cc <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    5896:	4620      	mov	r0, r4
    5898:	f004 feab 	bl	a5f2 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    589c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    58a0:	b37b      	cbz	r3, 5902 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    58a2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    58a6:	06d9      	lsls	r1, r3, #27
    58a8:	d52b      	bpl.n	5902 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58aa:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    58ae:	6927      	ldr	r7, [r4, #16]
    58b0:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    58b4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    58b8:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    58ba:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    58bc:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    58be:	2301      	movs	r3, #1
    58c0:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    58c4:	3088      	adds	r0, #136	; 0x88
    58c6:	f005 fa0b 	bl	ace0 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    58ca:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    58cc:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    58d0:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    58d4:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    58d6:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    58da:	1a1b      	subs	r3, r3, r0
    58dc:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    58de:	6f90      	ldr	r0, [r2, #120]	; 0x78
	if (rx_len < 0) {
    58e0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    58e4:	4408      	add	r0, r1
	if (rx_len > 0) {
    58e6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    58e8:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    58ea:	dd02      	ble.n	58f2 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    58ec:	4620      	mov	r0, r4
    58ee:	f004 fdf4 	bl	a4da <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    58f2:	68f9      	ldr	r1, [r7, #12]
    58f4:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    58f8:	2b00      	cmp	r3, #0
    58fa:	f040 80c6 	bne.w	5a8a <uarte_nrfx_isr_async+0x26a>
		data->async->is_in_irq = false;
    58fe:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5902:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    5906:	b38b      	cbz	r3, 596c <uarte_nrfx_isr_async+0x14c>
    5908:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    590c:	bb76      	cbnz	r6, 596c <uarte_nrfx_isr_async+0x14c>
	struct uart_event evt = {
    590e:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    5910:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5912:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    5916:	4631      	mov	r1, r6
    5918:	a803      	add	r0, sp, #12
    591a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    591e:	f005 fae9 	bl	aef4 <memset>
    5922:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    5924:	a903      	add	r1, sp, #12
    5926:	4620      	mov	r0, r4
	struct uart_event evt = {
    5928:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    592c:	f004 fdce 	bl	a4cc <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    5930:	68ff      	ldr	r7, [r7, #12]
    5932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5934:	1c5a      	adds	r2, r3, #1
    5936:	d019      	beq.n	596c <uarte_nrfx_isr_async+0x14c>
			      K_USEC(data->async->rx_timeout_slab),
    5938:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    593c:	498b      	ldr	r1, [pc, #556]	; (5b6c <uarte_nrfx_isr_async+0x34c>)
		data->async->rx_timeout_left = data->async->rx_timeout;
    593e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    5942:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    5946:	468e      	mov	lr, r1
    5948:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    594c:	4631      	mov	r1, r6
    594e:	fbcc e100 	smlal	lr, r1, ip, r0
    5952:	4a87      	ldr	r2, [pc, #540]	; (5b70 <uarte_nrfx_isr_async+0x350>)
    5954:	2300      	movs	r3, #0
    5956:	4670      	mov	r0, lr
    5958:	f7fb f91e 	bl	b98 <__aeabi_uldivmod>
    595c:	4602      	mov	r2, r0
    595e:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5960:	e9cd 0100 	strd	r0, r1, [sp]
    5964:	f107 0088 	add.w	r0, r7, #136	; 0x88
    5968:	f003 fee4 	bl	9734 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    596c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    5970:	b333      	cbz	r3, 59c0 <uarte_nrfx_isr_async+0x1a0>
    5972:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5976:	bb1e      	cbnz	r6, 59c0 <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = dev->data;
    5978:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    597a:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    597e:	68f9      	ldr	r1, [r7, #12]
    5980:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    5984:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    5988:	3160      	adds	r1, #96	; 0x60
    598a:	4620      	mov	r0, r4
    598c:	f004 fdbe 	bl	a50c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    5990:	68f9      	ldr	r1, [r7, #12]
    5992:	4620      	mov	r0, r4
    5994:	316c      	adds	r1, #108	; 0x6c
    5996:	f004 fdb9 	bl	a50c <rx_buf_release>
	if (data->async->rx_enabled) {
    599a:	68fb      	ldr	r3, [r7, #12]
    599c:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    59a0:	2a00      	cmp	r2, #0
    59a2:	f000 809f 	beq.w	5ae4 <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_enabled = false;
    59a6:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    59aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    59ae:	06d8      	lsls	r0, r3, #27
    59b0:	d503      	bpl.n	59ba <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    59b2:	2102      	movs	r1, #2
    59b4:	4620      	mov	r0, r4
    59b6:	f004 fe86 	bl	a6c6 <async_uart_release>
	notify_rx_disable(dev);
    59ba:	4620      	mov	r0, r4
    59bc:	f004 fdbe 	bl	a53c <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59c0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    59c4:	b1db      	cbz	r3, 59fe <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
    59c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    59ca:	05d9      	lsls	r1, r3, #23
    59cc:	d517      	bpl.n	59fe <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
    59ce:	6863      	ldr	r3, [r4, #4]
    59d0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    59d2:	f04f 0120 	mov.w	r1, #32
    59d6:	f3ef 8211 	mrs	r2, BASEPRI
    59da:	f381 8812 	msr	BASEPRI_MAX, r1
    59de:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    59e6:	b131      	cbz	r1, 59f6 <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59e8:	2100      	movs	r1, #0
    59ea:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    59ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    59f2:	2101      	movs	r1, #1
    59f4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    59f6:	f382 8811 	msr	BASEPRI, r2
    59fa:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    59fe:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    5a02:	2b00      	cmp	r3, #0
    5a04:	f43f af21 	beq.w	584a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    5a08:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    5a0c:	025a      	lsls	r2, r3, #9
    5a0e:	f57f af1c 	bpl.w	584a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    5a12:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    5a14:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5a16:	e9d3 7300 	ldrd	r7, r3, [r3]
    5a1a:	06db      	lsls	r3, r3, #27
    5a1c:	d467      	bmi.n	5aee <uarte_nrfx_isr_async+0x2ce>
	if (!data->async->tx_buf) {
    5a1e:	68eb      	ldr	r3, [r5, #12]
    5a20:	689b      	ldr	r3, [r3, #8]
    5a22:	2b00      	cmp	r3, #0
    5a24:	f43f af11 	beq.w	584a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    5a28:	f04f 0320 	mov.w	r3, #32
    5a2c:	f3ef 8211 	mrs	r2, BASEPRI
    5a30:	f383 8812 	msr	BASEPRI_MAX, r3
    5a34:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    5a38:	68eb      	ldr	r3, [r5, #12]
    5a3a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    5a3e:	2900      	cmp	r1, #0
    5a40:	bfac      	ite	ge
    5a42:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    5a46:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    5a4a:	f382 8811 	msr	BASEPRI, r2
    5a4e:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    5a52:	68e8      	ldr	r0, [r5, #12]
    5a54:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d055      	beq.n	5b08 <uarte_nrfx_isr_async+0x2e8>
	__asm__ volatile(
    5a5c:	f04f 0320 	mov.w	r3, #32
    5a60:	f3ef 8611 	mrs	r6, BASEPRI
    5a64:	f383 8812 	msr	BASEPRI_MAX, r3
    5a68:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    5a6c:	4629      	mov	r1, r5
    5a6e:	4620      	mov	r0, r4
    5a70:	f004 fe60 	bl	a734 <start_tx_locked>
	__asm__ volatile(
    5a74:	f386 8811 	msr	BASEPRI, r6
    5a78:	f3bf 8f6f 	isb	sy
				return;
    5a7c:	e6e5      	b.n	584a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5a7e:	2601      	movs	r6, #1
    5a80:	e703      	b.n	588a <uarte_nrfx_isr_async+0x6a>
    5a82:	2602      	movs	r6, #2
    5a84:	e701      	b.n	588a <uarte_nrfx_isr_async+0x6a>
    5a86:	2604      	movs	r6, #4
    5a88:	e6ff      	b.n	588a <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    5a8a:	3160      	adds	r1, #96	; 0x60
    5a8c:	4620      	mov	r0, r4
    5a8e:	f004 fd3d 	bl	a50c <rx_buf_release>
	__asm__ volatile(
    5a92:	f04f 0320 	mov.w	r3, #32
    5a96:	f3ef 8111 	mrs	r1, BASEPRI
    5a9a:	f383 8812 	msr	BASEPRI_MAX, r3
    5a9e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    5aa2:	68fb      	ldr	r3, [r7, #12]
    5aa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5aa6:	b1d2      	cbz	r2, 5ade <uarte_nrfx_isr_async+0x2be>
		data->async->rx_buf = data->async->rx_next_buf;
    5aa8:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    5aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    5aac:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    5aae:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    5ab0:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    5ab4:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ab6:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    5aba:	b90b      	cbnz	r3, 5ac0 <uarte_nrfx_isr_async+0x2a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5abc:	2301      	movs	r3, #1
    5abe:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    5ac0:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    5ac4:	f023 0320 	bic.w	r3, r3, #32
    5ac8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    5acc:	f381 8811 	msr	BASEPRI, r1
    5ad0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	2200      	movs	r2, #0
    5ad8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    5adc:	e711      	b.n	5902 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ade:	2301      	movs	r3, #1
    5ae0:	6073      	str	r3, [r6, #4]
}
    5ae2:	e7f3      	b.n	5acc <uarte_nrfx_isr_async+0x2ac>
		(void)rx_flush(dev, NULL, 0);
    5ae4:	6860      	ldr	r0, [r4, #4]
    5ae6:	4611      	mov	r1, r2
    5ae8:	f004 fda4 	bl	a634 <rx_flush.isra.0>
    5aec:	e75d      	b.n	59aa <uarte_nrfx_isr_async+0x18a>
    p_reg->INTENCLR = mask;
    5aee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5af2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    5af6:	2101      	movs	r1, #1
    5af8:	4620      	mov	r0, r4
    5afa:	f004 fde4 	bl	a6c6 <async_uart_release>
		if (!data->async->tx_size) {
    5afe:	68eb      	ldr	r3, [r5, #12]
    5b00:	68db      	ldr	r3, [r3, #12]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d18b      	bne.n	5a1e <uarte_nrfx_isr_async+0x1fe>
    5b06:	e6a0      	b.n	584a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    5b08:	6882      	ldr	r2, [r0, #8]
    5b0a:	6903      	ldr	r3, [r0, #16]
    5b0c:	429a      	cmp	r2, r3
    5b0e:	d00b      	beq.n	5b28 <uarte_nrfx_isr_async+0x308>
		if (amount == data->async->xfer_len) {
    5b10:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    5b12:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    5b14:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    5b16:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    5b18:	d125      	bne.n	5b66 <uarte_nrfx_isr_async+0x346>
			data->async->tx_cache_offset += amount;
    5b1a:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    5b1c:	f004 fdbf 	bl	a69e <setup_tx_cache.isra.0>
    5b20:	2800      	cmp	r0, #0
    5b22:	d19b      	bne.n	5a5c <uarte_nrfx_isr_async+0x23c>
			amount = data->async->tx_cache_offset;
    5b24:	68eb      	ldr	r3, [r5, #12]
    5b26:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    5b28:	68e8      	ldr	r0, [r5, #12]
    5b2a:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    5b2c:	f005 f8d8 	bl	ace0 <z_impl_k_timer_stop>
	struct uart_event evt = {
    5b30:	2214      	movs	r2, #20
    5b32:	2100      	movs	r1, #0
    5b34:	a803      	add	r0, sp, #12
    5b36:	f005 f9dd 	bl	aef4 <memset>
		.data.tx.buf = data->async->tx_buf,
    5b3a:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    5b3c:	689a      	ldr	r2, [r3, #8]
    5b3e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    5b42:	68da      	ldr	r2, [r3, #12]
    5b44:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    5b46:	bf1c      	itt	ne
    5b48:	2201      	movne	r2, #1
    5b4a:	f88d 200c 	strbne.w	r2, [sp, #12]
    5b4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5b52:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    5b56:	2200      	movs	r2, #0
    5b58:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    5b5a:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    5b5c:	a903      	add	r1, sp, #12
    5b5e:	4620      	mov	r0, r4
    5b60:	f004 fcb4 	bl	a4cc <user_callback>
    5b64:	e671      	b.n	584a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    5b66:	461e      	mov	r6, r3
    5b68:	e7de      	b.n	5b28 <uarte_nrfx_isr_async+0x308>
    5b6a:	bf00      	nop
    5b6c:	000f423f 	.word	0x000f423f
    5b70:	000f4240 	.word	0x000f4240

00005b74 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5b74:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5b76:	2301      	movs	r3, #1
    5b78:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5b7a:	4a0e      	ldr	r2, [pc, #56]	; (5bb4 <compare_int_lock+0x40>)
    5b7c:	f3bf 8f5b 	dmb	ish
    5b80:	43dc      	mvns	r4, r3
    5b82:	e852 1f00 	ldrex	r1, [r2]
    5b86:	ea01 0504 	and.w	r5, r1, r4
    5b8a:	e842 5600 	strex	r6, r5, [r2]
    5b8e:	2e00      	cmp	r6, #0
    5b90:	d1f7      	bne.n	5b82 <compare_int_lock+0xe>
    5b92:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5b9a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5b9c:	4806      	ldr	r0, [pc, #24]	; (5bb8 <compare_int_lock+0x44>)
    5b9e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5ba2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ba6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5baa:	420b      	tst	r3, r1
}
    5bac:	bf14      	ite	ne
    5bae:	2001      	movne	r0, #1
    5bb0:	2000      	moveq	r0, #0
    5bb2:	bd70      	pop	{r4, r5, r6, pc}
    5bb4:	20000e18 	.word	0x20000e18
    5bb8:	40011000 	.word	0x40011000

00005bbc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5bbc:	491b      	ldr	r1, [pc, #108]	; (5c2c <sys_clock_timeout_handler+0x70>)
{
    5bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bc0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5bc2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5bc6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5bc8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5bcc:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5bd0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5bd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5bd6:	d30f      	bcc.n	5bf8 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5bd8:	f003 fbec 	bl	93b4 <sys_clock_announce>
    return p_reg->CC[ch];
    5bdc:	00a3      	lsls	r3, r4, #2
    5bde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5be2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5be6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5bea:	4295      	cmp	r5, r2
    5bec:	d11d      	bne.n	5c2a <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    5bee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5bf2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    5bf6:	e012      	b.n	5c1e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5bf8:	4b0d      	ldr	r3, [pc, #52]	; (5c30 <sys_clock_timeout_handler+0x74>)
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	0a1a      	lsrs	r2, r3, #8
    5bfe:	061b      	lsls	r3, r3, #24
    5c00:	195e      	adds	r6, r3, r5
    5c02:	4b0c      	ldr	r3, [pc, #48]	; (5c34 <sys_clock_timeout_handler+0x78>)
    5c04:	f142 0700 	adc.w	r7, r2, #0
    5c08:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5c0c:	f003 fbd2 	bl	93b4 <sys_clock_announce>
    return p_reg->CC[ch];
    5c10:	4a09      	ldr	r2, [pc, #36]	; (5c38 <sys_clock_timeout_handler+0x7c>)
    5c12:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    5c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    5c1a:	429d      	cmp	r5, r3
    5c1c:	d105      	bne.n	5c2a <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5c1e:	4a06      	ldr	r2, [pc, #24]	; (5c38 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5c24:	40a3      	lsls	r3, r4
    5c26:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c2c:	20000668 	.word	0x20000668
    5c30:	20000e1c 	.word	0x20000e1c
    5c34:	20000670 	.word	0x20000670
    5c38:	40011000 	.word	0x40011000

00005c3c <compare_int_unlock>:
	if (key) {
    5c3c:	b311      	cbz	r1, 5c84 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c3e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5c42:	2301      	movs	r3, #1
    5c44:	4a10      	ldr	r2, [pc, #64]	; (5c88 <compare_int_unlock+0x4c>)
    5c46:	4083      	lsls	r3, r0
    5c48:	e852 cf00 	ldrex	ip, [r2]
    5c4c:	ea4c 0c03 	orr.w	ip, ip, r3
    5c50:	e842 c100 	strex	r1, ip, [r2]
    5c54:	2900      	cmp	r1, #0
    5c56:	d1f7      	bne.n	5c48 <compare_int_unlock+0xc>
    5c58:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5c5c:	4a0b      	ldr	r2, [pc, #44]	; (5c8c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5c62:	4083      	lsls	r3, r0
    5c64:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c68:	4b09      	ldr	r3, [pc, #36]	; (5c90 <compare_int_unlock+0x54>)
    5c6a:	f3bf 8f5b 	dmb	ish
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5c74:	40c3      	lsrs	r3, r0
    5c76:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c78:	bf42      	ittt	mi
    5c7a:	4b06      	ldrmi	r3, [pc, #24]	; (5c94 <compare_int_unlock+0x58>)
    5c7c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    5c80:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop
    5c88:	20000e18 	.word	0x20000e18
    5c8c:	40011000 	.word	0x40011000
    5c90:	20000e14 	.word	0x20000e14
    5c94:	e000e100 	.word	0xe000e100

00005c98 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5c98:	4b0d      	ldr	r3, [pc, #52]	; (5cd0 <z_nrf_rtc_timer_read+0x38>)
    5c9a:	6818      	ldr	r0, [r3, #0]
    5c9c:	0a01      	lsrs	r1, r0, #8
    5c9e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5ca0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5ca4:	4b0b      	ldr	r3, [pc, #44]	; (5cd4 <z_nrf_rtc_timer_read+0x3c>)
    5ca6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5caa:	1818      	adds	r0, r3, r0
    5cac:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5cb4:	d20a      	bcs.n	5ccc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5cb6:	4b08      	ldr	r3, [pc, #32]	; (5cd8 <z_nrf_rtc_timer_read+0x40>)
    5cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5cbc:	4290      	cmp	r0, r2
    5cbe:	eb71 0303 	sbcs.w	r3, r1, r3
    5cc2:	d203      	bcs.n	5ccc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5cc4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5cc8:	f141 0100 	adc.w	r1, r1, #0
}
    5ccc:	4770      	bx	lr
    5cce:	bf00      	nop
    5cd0:	20000e1c 	.word	0x20000e1c
    5cd4:	40011000 	.word	0x40011000
    5cd8:	20000670 	.word	0x20000670

00005cdc <compare_set>:
{
    5cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ce0:	4614      	mov	r4, r2
    5ce2:	461d      	mov	r5, r3
    5ce4:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    5ce6:	f7ff ff45 	bl	5b74 <compare_int_lock>
    5cea:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5cec:	f7ff ffd4 	bl	5c98 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5cf0:	42a0      	cmp	r0, r4
    5cf2:	eb71 0305 	sbcs.w	r3, r1, r5
    5cf6:	d27a      	bcs.n	5dee <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    5cf8:	4b46      	ldr	r3, [pc, #280]	; (5e14 <compare_set+0x138>)
    5cfa:	1a20      	subs	r0, r4, r0
    5cfc:	eb65 0101 	sbc.w	r1, r5, r1
    5d00:	4298      	cmp	r0, r3
    5d02:	f171 0100 	sbcs.w	r1, r1, #0
    5d06:	f080 8081 	bcs.w	5e0c <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    5d0a:	4b43      	ldr	r3, [pc, #268]	; (5e18 <compare_set+0x13c>)
    5d0c:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5d14:	429d      	cmp	r5, r3
    5d16:	bf08      	it	eq
    5d18:	4294      	cmpeq	r4, r2
    5d1a:	d053      	beq.n	5dc4 <compare_set+0xe8>
    5d1c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    5d20:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5d24:	f107 0950 	add.w	r9, r7, #80	; 0x50
    5d28:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    5d2c:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d30:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    5d34:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    5d38:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    5d40:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5d44:	4a35      	ldr	r2, [pc, #212]	; (5e1c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d46:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    5d4a:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5d4c:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    5d4e:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5d52:	eba0 000b 	sub.w	r0, r0, fp
    5d56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5d5a:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5d5e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5d60:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    5d64:	d105      	bne.n	5d72 <compare_set+0x96>
    5d66:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    5d68:	2013      	movs	r0, #19
    5d6a:	f004 ff87 	bl	ac7c <z_impl_k_busy_wait>
    5d6e:	4a2b      	ldr	r2, [pc, #172]	; (5e1c <compare_set+0x140>)
    5d70:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5d72:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    5d76:	eba6 000c 	sub.w	r0, r6, ip
    5d7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5d7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5d82:	bf88      	it	hi
    5d84:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5d86:	2000      	movs	r0, #0
    5d88:	f8c9 0000 	str.w	r0, [r9]
    5d8c:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    5d90:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5d94:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5d98:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5d9c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    5da0:	4583      	cmp	fp, r0
    5da2:	d006      	beq.n	5db2 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    5da4:	1a30      	subs	r0, r6, r0
    5da6:	3802      	subs	r0, #2
    5da8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5dac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5db0:	d81b      	bhi.n	5dea <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    5db2:	eba6 0608 	sub.w	r6, r6, r8
    5db6:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5dba:	1936      	adds	r6, r6, r4
    5dbc:	f145 0300 	adc.w	r3, r5, #0
    5dc0:	4634      	mov	r4, r6
    5dc2:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    5dc4:	4914      	ldr	r1, [pc, #80]	; (5e18 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5dc6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5dc8:	013b      	lsls	r3, r7, #4
    5dca:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    5dce:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5dd2:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    5dd4:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    5dd8:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5dda:	4638      	mov	r0, r7
    5ddc:	9900      	ldr	r1, [sp, #0]
    5dde:	f7ff ff2d 	bl	5c3c <compare_int_unlock>
}
    5de2:	4620      	mov	r0, r4
    5de4:	b003      	add	sp, #12
    5de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dea:	4630      	mov	r0, r6
    5dec:	e7af      	b.n	5d4e <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5dee:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5df0:	4a0b      	ldr	r2, [pc, #44]	; (5e20 <compare_set+0x144>)
    5df2:	f3bf 8f5b 	dmb	ish
    5df6:	40bb      	lsls	r3, r7
    5df8:	e852 0f00 	ldrex	r0, [r2]
    5dfc:	4318      	orrs	r0, r3
    5dfe:	e842 0100 	strex	r1, r0, [r2]
    5e02:	2900      	cmp	r1, #0
    5e04:	d1f8      	bne.n	5df8 <compare_set+0x11c>
    5e06:	f3bf 8f5b 	dmb	ish
    5e0a:	e7db      	b.n	5dc4 <compare_set+0xe8>
			return -EINVAL;
    5e0c:	f06f 0415 	mvn.w	r4, #21
    5e10:	e7e3      	b.n	5dda <compare_set+0xfe>
    5e12:	bf00      	nop
    5e14:	01000001 	.word	0x01000001
    5e18:	20000658 	.word	0x20000658
    5e1c:	40011000 	.word	0x40011000
    5e20:	20000e14 	.word	0x20000e14

00005e24 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5e26:	4b19      	ldr	r3, [pc, #100]	; (5e8c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5e28:	4d19      	ldr	r5, [pc, #100]	; (5e90 <sys_clock_driver_init+0x6c>)
    5e2a:	2400      	movs	r4, #0
    5e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5e34:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5e38:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5e3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5e40:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e44:	4b13      	ldr	r3, [pc, #76]	; (5e94 <sys_clock_driver_init+0x70>)
    5e46:	2602      	movs	r6, #2
    5e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5e4c:	2101      	movs	r1, #1
    5e4e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    5e52:	2011      	movs	r0, #17
    5e54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5e58:	4622      	mov	r2, r4
    5e5a:	f7fd ff1f 	bl	3c9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5e5e:	2011      	movs	r0, #17
    5e60:	f7fd ff00 	bl	3c64 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5e64:	4a0c      	ldr	r2, [pc, #48]	; (5e98 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5e66:	2301      	movs	r3, #1
    5e68:	60ab      	str	r3, [r5, #8]
    5e6a:	602b      	str	r3, [r5, #0]
    5e6c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5e6e:	4b0b      	ldr	r3, [pc, #44]	; (5e9c <sys_clock_driver_init+0x78>)
    5e70:	4a0b      	ldr	r2, [pc, #44]	; (5ea0 <sys_clock_driver_init+0x7c>)
    5e72:	9300      	str	r3, [sp, #0]
    5e74:	9401      	str	r4, [sp, #4]
    5e76:	2300      	movs	r3, #0
    5e78:	4620      	mov	r0, r4
    5e7a:	f7ff ff2f 	bl	5cdc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5e7e:	4630      	mov	r0, r6
    5e80:	f7fe ff24 	bl	4ccc <z_nrf_clock_control_lf_on>

	return 0;
}
    5e84:	4620      	mov	r0, r4
    5e86:	b002      	add	sp, #8
    5e88:	bd70      	pop	{r4, r5, r6, pc}
    5e8a:	bf00      	nop
    5e8c:	20000658 	.word	0x20000658
    5e90:	40011000 	.word	0x40011000
    5e94:	e000e100 	.word	0xe000e100
    5e98:	20000e18 	.word	0x20000e18
    5e9c:	00005bbd 	.word	0x00005bbd
    5ea0:	007fffff 	.word	0x007fffff

00005ea4 <rtc_nrf_isr>:
{
    5ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5ea8:	4c33      	ldr	r4, [pc, #204]	; (5f78 <rtc_nrf_isr+0xd4>)
    5eaa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5eae:	079a      	lsls	r2, r3, #30
    5eb0:	d50b      	bpl.n	5eca <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eb2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5eb6:	b143      	cbz	r3, 5eca <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5eb8:	4a30      	ldr	r2, [pc, #192]	; (5f7c <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5eba:	2300      	movs	r3, #0
    5ebc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5ec0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5ec4:	6813      	ldr	r3, [r2, #0]
    5ec6:	3301      	adds	r3, #1
    5ec8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5eca:	f04f 0320 	mov.w	r3, #32
    5ece:	f3ef 8211 	mrs	r2, BASEPRI
    5ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ed6:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5eda:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5ede:	03db      	lsls	r3, r3, #15
    5ee0:	d529      	bpl.n	5f36 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ee2:	f3bf 8f5b 	dmb	ish
    5ee6:	4b26      	ldr	r3, [pc, #152]	; (5f80 <rtc_nrf_isr+0xdc>)
    5ee8:	e853 1f00 	ldrex	r1, [r3]
    5eec:	f021 0001 	bic.w	r0, r1, #1
    5ef0:	e843 0500 	strex	r5, r0, [r3]
    5ef4:	2d00      	cmp	r5, #0
    5ef6:	d1f7      	bne.n	5ee8 <rtc_nrf_isr+0x44>
    5ef8:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5efc:	b911      	cbnz	r1, 5f04 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5efe:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5f02:	b1c3      	cbz	r3, 5f36 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5f04:	2500      	movs	r5, #0
    5f06:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5f0a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    5f0e:	f382 8811 	msr	BASEPRI, r2
    5f12:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    5f16:	f7ff febf 	bl	5c98 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5f1a:	f04f 0320 	mov.w	r3, #32
    5f1e:	f3ef 8211 	mrs	r2, BASEPRI
    5f22:	f383 8812 	msr	BASEPRI_MAX, r3
    5f26:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5f2a:	4b16      	ldr	r3, [pc, #88]	; (5f84 <rtc_nrf_isr+0xe0>)
    5f2c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5f30:	42b0      	cmp	r0, r6
    5f32:	41b9      	sbcs	r1, r7
    5f34:	d206      	bcs.n	5f44 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    5f36:	f382 8811 	msr	BASEPRI, r2
    5f3a:	f3bf 8f6f 	isb	sy
}
    5f3e:	b003      	add	sp, #12
    5f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5f44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5f48:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    5f4c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5f50:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    5f54:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5f5a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    5f5e:	f382 8811 	msr	BASEPRI, r2
    5f62:	f3bf 8f6f 	isb	sy
		if (handler) {
    5f66:	2900      	cmp	r1, #0
    5f68:	d0e9      	beq.n	5f3e <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    5f6a:	9000      	str	r0, [sp, #0]
    5f6c:	4632      	mov	r2, r6
    5f6e:	463b      	mov	r3, r7
    5f70:	4628      	mov	r0, r5
    5f72:	4788      	blx	r1
}
    5f74:	e7e3      	b.n	5f3e <rtc_nrf_isr+0x9a>
    5f76:	bf00      	nop
    5f78:	40011000 	.word	0x40011000
    5f7c:	20000e1c 	.word	0x20000e1c
    5f80:	20000e14 	.word	0x20000e14
    5f84:	20000658 	.word	0x20000658

00005f88 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5f88:	1c43      	adds	r3, r0, #1
{
    5f8a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5f8c:	d021      	beq.n	5fd2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5f8e:	2801      	cmp	r0, #1
    5f90:	dd21      	ble.n	5fd6 <sys_clock_set_timeout+0x4e>
    5f92:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f96:	da20      	bge.n	5fda <sys_clock_set_timeout+0x52>
    5f98:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5f9a:	f7ff fe7d 	bl	5c98 <z_nrf_rtc_timer_read>
    5f9e:	4b10      	ldr	r3, [pc, #64]	; (5fe0 <sys_clock_set_timeout+0x58>)
    5fa0:	e9d3 1300 	ldrd	r1, r3, [r3]
    5fa4:	1a42      	subs	r2, r0, r1
		ticks = 0;
    5fa6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    5faa:	480e      	ldr	r0, [pc, #56]	; (5fe4 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    5fac:	bf28      	it	cs
    5fae:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5fb0:	3201      	adds	r2, #1
    5fb2:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    5fb4:	4282      	cmp	r2, r0
    5fb6:	bf28      	it	cs
    5fb8:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    5fba:	1852      	adds	r2, r2, r1
    5fbc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5fc0:	4909      	ldr	r1, [pc, #36]	; (5fe8 <sys_clock_set_timeout+0x60>)
    5fc2:	9001      	str	r0, [sp, #4]
    5fc4:	9100      	str	r1, [sp, #0]
    5fc6:	f143 0300 	adc.w	r3, r3, #0
    5fca:	f7ff fe87 	bl	5cdc <compare_set>
}
    5fce:	b002      	add	sp, #8
    5fd0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5fd2:	4804      	ldr	r0, [pc, #16]	; (5fe4 <sys_clock_set_timeout+0x5c>)
    5fd4:	e7e0      	b.n	5f98 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5fd6:	2400      	movs	r4, #0
    5fd8:	e7df      	b.n	5f9a <sys_clock_set_timeout+0x12>
    5fda:	4c02      	ldr	r4, [pc, #8]	; (5fe4 <sys_clock_set_timeout+0x5c>)
    5fdc:	e7dd      	b.n	5f9a <sys_clock_set_timeout+0x12>
    5fde:	bf00      	nop
    5fe0:	20000668 	.word	0x20000668
    5fe4:	007fffff 	.word	0x007fffff
    5fe8:	00005bbd 	.word	0x00005bbd

00005fec <sys_clock_elapsed>:
{
    5fec:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5fee:	f7ff fe53 	bl	5c98 <z_nrf_rtc_timer_read>
    5ff2:	4b02      	ldr	r3, [pc, #8]	; (5ffc <sys_clock_elapsed+0x10>)
    5ff4:	681b      	ldr	r3, [r3, #0]
}
    5ff6:	1ac0      	subs	r0, r0, r3
    5ff8:	bd08      	pop	{r3, pc}
    5ffa:	bf00      	nop
    5ffc:	20000668 	.word	0x20000668

00006000 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6000:	6803      	ldr	r3, [r0, #0]
    switch (port)
    6002:	095a      	lsrs	r2, r3, #5
{
    6004:	b510      	push	{r4, lr}
    6006:	4604      	mov	r4, r0
    switch (port)
    6008:	d01d      	beq.n	6046 <nrf_gpio_pin_port_decode+0x46>
    600a:	2a01      	cmp	r2, #1
    600c:	d106      	bne.n	601c <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    600e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    6012:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6016:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6018:	07d3      	lsls	r3, r2, #31
    601a:	d40b      	bmi.n	6034 <nrf_gpio_pin_port_decode+0x34>
    601c:	4914      	ldr	r1, [pc, #80]	; (6070 <nrf_gpio_pin_port_decode+0x70>)
    601e:	4815      	ldr	r0, [pc, #84]	; (6074 <nrf_gpio_pin_port_decode+0x74>)
    6020:	4a15      	ldr	r2, [pc, #84]	; (6078 <nrf_gpio_pin_port_decode+0x78>)
    6022:	f240 2329 	movw	r3, #553	; 0x229
    6026:	f004 f8cd 	bl	a1c4 <assert_print>
    602a:	4813      	ldr	r0, [pc, #76]	; (6078 <nrf_gpio_pin_port_decode+0x78>)
    602c:	f240 2129 	movw	r1, #553	; 0x229
    6030:	f004 f8c1 	bl	a1b6 <assert_post_action>
    uint32_t pin_number = *p_pin;
    6034:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    6036:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    603a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    603c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    603e:	d105      	bne.n	604c <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    6040:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    6044:	bd10      	pop	{r4, pc}
    switch (port)
    6046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    604a:	e7e2      	b.n	6012 <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    604c:	2b01      	cmp	r3, #1
    604e:	d00c      	beq.n	606a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    6050:	4a09      	ldr	r2, [pc, #36]	; (6078 <nrf_gpio_pin_port_decode+0x78>)
    6052:	490a      	ldr	r1, [pc, #40]	; (607c <nrf_gpio_pin_port_decode+0x7c>)
    6054:	4807      	ldr	r0, [pc, #28]	; (6074 <nrf_gpio_pin_port_decode+0x74>)
    6056:	f240 232e 	movw	r3, #558	; 0x22e
    605a:	f004 f8b3 	bl	a1c4 <assert_print>
    605e:	4806      	ldr	r0, [pc, #24]	; (6078 <nrf_gpio_pin_port_decode+0x78>)
    6060:	f240 212e 	movw	r1, #558	; 0x22e
    6064:	f004 f8a7 	bl	a1b6 <assert_post_action>
    6068:	e7ea      	b.n	6040 <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    606a:	4805      	ldr	r0, [pc, #20]	; (6080 <nrf_gpio_pin_port_decode+0x80>)
    606c:	e7ea      	b.n	6044 <nrf_gpio_pin_port_decode+0x44>
    606e:	bf00      	nop
    6070:	0000c867 	.word	0x0000c867
    6074:	0000b80f 	.word	0x0000b80f
    6078:	0000c834 	.word	0x0000c834
    607c:	0000d0fe 	.word	0x0000d0fe
    6080:	50000300 	.word	0x50000300

00006084 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    6084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6086:	ab0b      	add	r3, sp, #44	; 0x2c
    6088:	9305      	str	r3, [sp, #20]
    608a:	9303      	str	r3, [sp, #12]
    608c:	4b05      	ldr	r3, [pc, #20]	; (60a4 <z_log_msg2_runtime_create.constprop.0+0x20>)
    608e:	9302      	str	r3, [sp, #8]
    6090:	2300      	movs	r3, #0
    6092:	e9cd 3300 	strd	r3, r3, [sp]
    6096:	2201      	movs	r2, #1
    6098:	4618      	mov	r0, r3
    609a:	f7fd fa07 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    609e:	b007      	add	sp, #28
    60a0:	f85d fb04 	ldr.w	pc, [sp], #4
    60a4:	0000c927 	.word	0x0000c927

000060a8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    60a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    60aa:	f7fc ff9b 	bl	2fe4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    60ae:	2400      	movs	r4, #0
    60b0:	4b06      	ldr	r3, [pc, #24]	; (60cc <k_sys_fatal_error_handler+0x24>)
    60b2:	9302      	str	r3, [sp, #8]
    60b4:	4620      	mov	r0, r4
    60b6:	e9cd 4400 	strd	r4, r4, [sp]
    60ba:	4905      	ldr	r1, [pc, #20]	; (60d0 <k_sys_fatal_error_handler+0x28>)
    60bc:	4623      	mov	r3, r4
    60be:	2201      	movs	r2, #1
    60c0:	f7ff ffe0 	bl	6084 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    60c4:	4620      	mov	r0, r4
    60c6:	f7fe fc79 	bl	49bc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    60ca:	bf00      	nop
    60cc:	0000c927 	.word	0x0000c927
    60d0:	0000b1b0 	.word	0x0000b1b0

000060d4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    60d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    60d8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    60dc:	2a08      	cmp	r2, #8
    60de:	d106      	bne.n	60ee <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    60e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    60e4:	2b05      	cmp	r3, #5
    60e6:	d802      	bhi.n	60ee <nrf52_errata_103+0x1a>
    60e8:	4a02      	ldr	r2, [pc, #8]	; (60f4 <nrf52_errata_103+0x20>)
    60ea:	5cd0      	ldrb	r0, [r2, r3]
    60ec:	4770      	bx	lr
                        return false;
    60ee:	2000      	movs	r0, #0
}
    60f0:	4770      	bx	lr
    60f2:	bf00      	nop
    60f4:	0000c94a 	.word	0x0000c94a

000060f8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    60f8:	4a02      	ldr	r2, [pc, #8]	; (6104 <nvmc_wait+0xc>)
    60fa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    60fe:	2b00      	cmp	r3, #0
    6100:	d0fb      	beq.n	60fa <nvmc_wait+0x2>
}
    6102:	4770      	bx	lr
    6104:	4001e000 	.word	0x4001e000

00006108 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    610c:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    610e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6112:	2a08      	cmp	r2, #8
    6114:	d14e      	bne.n	61b4 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    6116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    611a:	2100      	movs	r1, #0
    611c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    6120:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6124:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6128:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    612c:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    6130:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6134:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    6138:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    613c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    6140:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6144:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    6148:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    614c:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    6150:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6154:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6158:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    615c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    6160:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6164:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    6168:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    616c:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    6170:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6174:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    6178:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    617c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    6180:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6184:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    6188:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    618c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    6190:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6194:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    6198:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    619c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    61a0:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    61a4:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    61a8:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    61ac:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    61b0:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    61b4:	f7ff ff8e 	bl	60d4 <nrf52_errata_103>
    61b8:	b118      	cbz	r0, 61c2 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    61ba:	4b3b      	ldr	r3, [pc, #236]	; (62a8 <SystemInit+0x1a0>)
    61bc:	4a3b      	ldr	r2, [pc, #236]	; (62ac <SystemInit+0x1a4>)
    61be:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    61c2:	f7ff ff87 	bl	60d4 <nrf52_errata_103>
    61c6:	b118      	cbz	r0, 61d0 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    61c8:	4b39      	ldr	r3, [pc, #228]	; (62b0 <SystemInit+0x1a8>)
    61ca:	22fb      	movs	r2, #251	; 0xfb
    61cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    61d0:	f7ff ff80 	bl	60d4 <nrf52_errata_103>
    61d4:	b170      	cbz	r0, 61f4 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    61d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    61da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    61de:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    61e2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    61e6:	f022 020f 	bic.w	r2, r2, #15
    61ea:	f003 030f 	and.w	r3, r3, #15
    61ee:	4313      	orrs	r3, r2
    61f0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    61f4:	f7ff ff6e 	bl	60d4 <nrf52_errata_103>
    61f8:	b120      	cbz	r0, 6204 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    61fa:	4b2e      	ldr	r3, [pc, #184]	; (62b4 <SystemInit+0x1ac>)
    61fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    6200:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    6208:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    620c:	2b08      	cmp	r3, #8
    620e:	d11a      	bne.n	6246 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6214:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    6218:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    621a:	bf44      	itt	mi
    621c:	f06f 0201 	mvnmi.w	r2, #1
    6220:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6224:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6228:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    622c:	2b05      	cmp	r3, #5
    622e:	d802      	bhi.n	6236 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6230:	4a21      	ldr	r2, [pc, #132]	; (62b8 <SystemInit+0x1b0>)
    6232:	5cd3      	ldrb	r3, [r2, r3]
    6234:	b13b      	cbz	r3, 6246 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6236:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    623a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    623e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6242:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6246:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    624a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    624e:	2a00      	cmp	r2, #0
    6250:	db03      	blt.n	625a <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    6252:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6256:	2b00      	cmp	r3, #0
    6258:	da22      	bge.n	62a0 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    625a:	4918      	ldr	r1, [pc, #96]	; (62bc <SystemInit+0x1b4>)
    625c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    625e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6262:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6266:	2412      	movs	r4, #18
    nvmc_wait();
    6268:	f7ff ff46 	bl	60f8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    626c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6270:	f7ff ff42 	bl	60f8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6274:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    6278:	f7ff ff3e 	bl	60f8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    627c:	2300      	movs	r3, #0
    627e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6282:	f7ff ff39 	bl	60f8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    6286:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    628a:	490d      	ldr	r1, [pc, #52]	; (62c0 <SystemInit+0x1b8>)
    628c:	4b0d      	ldr	r3, [pc, #52]	; (62c4 <SystemInit+0x1bc>)
    628e:	68ca      	ldr	r2, [r1, #12]
    6290:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6294:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6296:	60cb      	str	r3, [r1, #12]
    6298:	f3bf 8f4f 	dsb	sy
    __NOP();
    629c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    629e:	e7fd      	b.n	629c <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    62a0:	4b09      	ldr	r3, [pc, #36]	; (62c8 <SystemInit+0x1c0>)
    62a2:	4a0a      	ldr	r2, [pc, #40]	; (62cc <SystemInit+0x1c4>)
    62a4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    62a6:	bd10      	pop	{r4, pc}
    62a8:	40005000 	.word	0x40005000
    62ac:	00038148 	.word	0x00038148
    62b0:	4000f000 	.word	0x4000f000
    62b4:	40029000 	.word	0x40029000
    62b8:	0000c944 	.word	0x0000c944
    62bc:	4001e000 	.word	0x4001e000
    62c0:	e000ed00 	.word	0xe000ed00
    62c4:	05fa0004 	.word	0x05fa0004
    62c8:	20000060 	.word	0x20000060
    62cc:	03d09000 	.word	0x03d09000

000062d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    62d0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    62d2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    62d4:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    62d6:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    62da:	fab2 f382 	clz	r3, r2
    62de:	f1c3 031f 	rsb	r3, r3, #31
    62e2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    62e4:	fa05 f403 	lsl.w	r4, r5, r3
    62e8:	ea22 0404 	bic.w	r4, r2, r4
    62ec:	e850 6f00 	ldrex	r6, [r0]
    62f0:	4296      	cmp	r6, r2
    62f2:	d104      	bne.n	62fe <nrfx_flag32_alloc+0x2e>
    62f4:	e840 4c00 	strex	ip, r4, [r0]
    62f8:	f1bc 0f00 	cmp.w	ip, #0
    62fc:	d1f6      	bne.n	62ec <nrfx_flag32_alloc+0x1c>
    62fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6302:	d1e7      	bne.n	62d4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    6304:	4801      	ldr	r0, [pc, #4]	; (630c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    6306:	700b      	strb	r3, [r1, #0]
}
    6308:	bd70      	pop	{r4, r5, r6, pc}
    630a:	bf00      	nop
    630c:	0bad0000 	.word	0x0bad0000

00006310 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6310:	6803      	ldr	r3, [r0, #0]
    6312:	40cb      	lsrs	r3, r1
    6314:	07db      	lsls	r3, r3, #31
{
    6316:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6318:	d414      	bmi.n	6344 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    631a:	2301      	movs	r3, #1
    631c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    631e:	6802      	ldr	r2, [r0, #0]
    6320:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6324:	ea43 0102 	orr.w	r1, r3, r2
    6328:	e850 4f00 	ldrex	r4, [r0]
    632c:	4294      	cmp	r4, r2
    632e:	d104      	bne.n	633a <nrfx_flag32_free+0x2a>
    6330:	e840 1c00 	strex	ip, r1, [r0]
    6334:	f1bc 0f00 	cmp.w	ip, #0
    6338:	d1f6      	bne.n	6328 <nrfx_flag32_free+0x18>
    633a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    633e:	d1ee      	bne.n	631e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    6340:	4801      	ldr	r0, [pc, #4]	; (6348 <nrfx_flag32_free+0x38>)
}
    6342:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6344:	4801      	ldr	r0, [pc, #4]	; (634c <nrfx_flag32_free+0x3c>)
    6346:	e7fc      	b.n	6342 <nrfx_flag32_free+0x32>
    6348:	0bad0000 	.word	0x0bad0000
    634c:	0bad0004 	.word	0x0bad0004

00006350 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    6350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6352:	4604      	mov	r4, r0
    6354:	b170      	cbz	r0, 6374 <clock_stop+0x24>
    6356:	2801      	cmp	r0, #1
    6358:	d02d      	beq.n	63b6 <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    635a:	4939      	ldr	r1, [pc, #228]	; (6440 <clock_stop+0xf0>)
    635c:	4839      	ldr	r0, [pc, #228]	; (6444 <clock_stop+0xf4>)
    635e:	4a3a      	ldr	r2, [pc, #232]	; (6448 <clock_stop+0xf8>)
    6360:	23d8      	movs	r3, #216	; 0xd8
    6362:	f003 ff2f 	bl	a1c4 <assert_print>
    6366:	4838      	ldr	r0, [pc, #224]	; (6448 <clock_stop+0xf8>)
    6368:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    636a:	b003      	add	sp, #12
    636c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    6370:	f003 bf21 	b.w	a1b6 <assert_post_action>
    p_reg->INTENCLR = mask;
    6374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6378:	2202      	movs	r2, #2
    637a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    637e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6382:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6386:	2201      	movs	r2, #1
    6388:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    638a:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    638c:	2301      	movs	r3, #1
    638e:	f88d 3007 	strb.w	r3, [sp, #7]
    6392:	f242 7510 	movw	r5, #10000	; 0x2710
    6396:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    639a:	b1cc      	cbz	r4, 63d0 <clock_stop+0x80>
    639c:	2c01      	cmp	r4, #1
    639e:	d037      	beq.n	6410 <clock_stop+0xc0>
            NRFX_ASSERT(0);
    63a0:	4927      	ldr	r1, [pc, #156]	; (6440 <clock_stop+0xf0>)
    63a2:	4828      	ldr	r0, [pc, #160]	; (6444 <clock_stop+0xf4>)
    63a4:	4a29      	ldr	r2, [pc, #164]	; (644c <clock_stop+0xfc>)
    63a6:	f44f 734f 	mov.w	r3, #828	; 0x33c
    63aa:	f003 ff0b 	bl	a1c4 <assert_print>
    63ae:	4827      	ldr	r0, [pc, #156]	; (644c <clock_stop+0xfc>)
    63b0:	f44f 714f 	mov.w	r1, #828	; 0x33c
    63b4:	e7d9      	b.n	636a <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    63b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63ba:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    63bc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    63c4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63c8:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    63ca:	f10d 0707 	add.w	r7, sp, #7
    63ce:	e7dd      	b.n	638c <clock_stop+0x3c>
            if (p_clk_src != NULL)
    63d0:	b19f      	cbz	r7, 63fa <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    63d2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    63d6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    63da:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    63dc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    63e0:	03d8      	lsls	r0, r3, #15
    63e2:	d513      	bpl.n	640c <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    63e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    63e8:	2801      	cmp	r0, #1
    63ea:	d103      	bne.n	63f4 <clock_stop+0xa4>
    63ec:	f004 fb46 	bl	aa7c <nrfx_busy_wait>
    63f0:	3d01      	subs	r5, #1
    63f2:	d1d2      	bne.n	639a <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    63f4:	2c01      	cmp	r4, #1
    63f6:	d015      	beq.n	6424 <clock_stop+0xd4>
    63f8:	e008      	b.n	640c <clock_stop+0xbc>
    63fa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    63fe:	03d9      	lsls	r1, r3, #15
    6400:	d504      	bpl.n	640c <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6402:	2001      	movs	r0, #1
    6404:	f004 fb3a 	bl	aa7c <nrfx_busy_wait>
    6408:	3d01      	subs	r5, #1
    640a:	d1f6      	bne.n	63fa <clock_stop+0xaa>
}
    640c:	b003      	add	sp, #12
    640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    6410:	b167      	cbz	r7, 642c <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6412:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6416:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    641a:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    641c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6420:	03da      	lsls	r2, r3, #15
    6422:	d4df      	bmi.n	63e4 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    6424:	4b0a      	ldr	r3, [pc, #40]	; (6450 <clock_stop+0x100>)
    6426:	2200      	movs	r2, #0
    6428:	715a      	strb	r2, [r3, #5]
    642a:	e7ef      	b.n	640c <clock_stop+0xbc>
    642c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6430:	03db      	lsls	r3, r3, #15
    6432:	d5f7      	bpl.n	6424 <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6434:	2001      	movs	r0, #1
    6436:	f004 fb21 	bl	aa7c <nrfx_busy_wait>
    643a:	3d01      	subs	r5, #1
    643c:	d1f6      	bne.n	642c <clock_stop+0xdc>
    643e:	e7f1      	b.n	6424 <clock_stop+0xd4>
    6440:	0000d0fe 	.word	0x0000d0fe
    6444:	0000b80f 	.word	0x0000b80f
    6448:	0000c950 	.word	0x0000c950
    644c:	0000c98d 	.word	0x0000c98d
    6450:	20000e20 	.word	0x20000e20

00006454 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    6454:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    6456:	4604      	mov	r4, r0
    6458:	b958      	cbnz	r0, 6472 <nrfx_clock_init+0x1e>
    645a:	490b      	ldr	r1, [pc, #44]	; (6488 <nrfx_clock_init+0x34>)
    645c:	480b      	ldr	r0, [pc, #44]	; (648c <nrfx_clock_init+0x38>)
    645e:	4a0c      	ldr	r2, [pc, #48]	; (6490 <nrfx_clock_init+0x3c>)
    6460:	f240 1315 	movw	r3, #277	; 0x115
    6464:	f003 feae 	bl	a1c4 <assert_print>
    6468:	4809      	ldr	r0, [pc, #36]	; (6490 <nrfx_clock_init+0x3c>)
    646a:	f240 1115 	movw	r1, #277	; 0x115
    646e:	f003 fea2 	bl	a1b6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6472:	4b08      	ldr	r3, [pc, #32]	; (6494 <nrfx_clock_init+0x40>)
    6474:	791a      	ldrb	r2, [r3, #4]
    6476:	b922      	cbnz	r2, 6482 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6478:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    647a:	4807      	ldr	r0, [pc, #28]	; (6498 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    647c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    647e:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6480:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6482:	4806      	ldr	r0, [pc, #24]	; (649c <nrfx_clock_init+0x48>)
    return err_code;
    6484:	e7fc      	b.n	6480 <nrfx_clock_init+0x2c>
    6486:	bf00      	nop
    6488:	0000c9c1 	.word	0x0000c9c1
    648c:	0000b80f 	.word	0x0000b80f
    6490:	0000c950 	.word	0x0000c950
    6494:	20000e20 	.word	0x20000e20
    6498:	0bad0000 	.word	0x0bad0000
    649c:	0bad000c 	.word	0x0bad000c

000064a0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    64a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    64a2:	4b0d      	ldr	r3, [pc, #52]	; (64d8 <nrfx_clock_enable+0x38>)
    64a4:	791b      	ldrb	r3, [r3, #4]
    64a6:	b95b      	cbnz	r3, 64c0 <nrfx_clock_enable+0x20>
    64a8:	490c      	ldr	r1, [pc, #48]	; (64dc <nrfx_clock_enable+0x3c>)
    64aa:	480d      	ldr	r0, [pc, #52]	; (64e0 <nrfx_clock_enable+0x40>)
    64ac:	4a0d      	ldr	r2, [pc, #52]	; (64e4 <nrfx_clock_enable+0x44>)
    64ae:	f44f 7397 	mov.w	r3, #302	; 0x12e
    64b2:	f003 fe87 	bl	a1c4 <assert_print>
    64b6:	480b      	ldr	r0, [pc, #44]	; (64e4 <nrfx_clock_enable+0x44>)
    64b8:	f44f 7197 	mov.w	r1, #302	; 0x12e
    64bc:	f003 fe7b 	bl	a1b6 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    64c0:	2000      	movs	r0, #0
    64c2:	f7fd fbdd 	bl	3c80 <arch_irq_is_enabled>
    64c6:	b908      	cbnz	r0, 64cc <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    64c8:	f7fd fbcc 	bl	3c64 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    64cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64d0:	2200      	movs	r2, #0
    64d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    64d6:	bd08      	pop	{r3, pc}
    64d8:	20000e20 	.word	0x20000e20
    64dc:	0000c9cf 	.word	0x0000c9cf
    64e0:	0000b80f 	.word	0x0000b80f
    64e4:	0000c950 	.word	0x0000c950

000064e8 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    64e8:	4b2c      	ldr	r3, [pc, #176]	; (659c <nrfx_clock_start+0xb4>)
    64ea:	791b      	ldrb	r3, [r3, #4]
{
    64ec:	b510      	push	{r4, lr}
    64ee:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    64f0:	b95b      	cbnz	r3, 650a <nrfx_clock_start+0x22>
    64f2:	492b      	ldr	r1, [pc, #172]	; (65a0 <nrfx_clock_start+0xb8>)
    64f4:	482b      	ldr	r0, [pc, #172]	; (65a4 <nrfx_clock_start+0xbc>)
    64f6:	4a2c      	ldr	r2, [pc, #176]	; (65a8 <nrfx_clock_start+0xc0>)
    64f8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    64fc:	f003 fe62 	bl	a1c4 <assert_print>
    6500:	4829      	ldr	r0, [pc, #164]	; (65a8 <nrfx_clock_start+0xc0>)
    6502:	f44f 71b4 	mov.w	r1, #360	; 0x168
    6506:	f003 fe56 	bl	a1b6 <assert_post_action>
    switch (domain)
    650a:	b17c      	cbz	r4, 652c <nrfx_clock_start+0x44>
    650c:	2c01      	cmp	r4, #1
    650e:	d03a      	beq.n	6586 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6510:	4926      	ldr	r1, [pc, #152]	; (65ac <nrfx_clock_start+0xc4>)
    6512:	4824      	ldr	r0, [pc, #144]	; (65a4 <nrfx_clock_start+0xbc>)
    6514:	4a24      	ldr	r2, [pc, #144]	; (65a8 <nrfx_clock_start+0xc0>)
    6516:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    651a:	f003 fe53 	bl	a1c4 <assert_print>
            break;
    }
}
    651e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    6522:	4821      	ldr	r0, [pc, #132]	; (65a8 <nrfx_clock_start+0xc0>)
    6524:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    6528:	f003 be45 	b.w	a1b6 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    652c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6530:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6534:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6538:	03c8      	lsls	r0, r1, #15
    653a:	d512      	bpl.n	6562 <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    653c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6540:	2b01      	cmp	r3, #1
    6542:	d11a      	bne.n	657a <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6548:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    654c:	2300      	movs	r3, #0
    654e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6552:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6556:	2302      	movs	r3, #2
    6558:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    655c:	2301      	movs	r3, #1
    655e:	6093      	str	r3, [r2, #8]
}
    6560:	e00a      	b.n	6578 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6562:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6566:	07d9      	lsls	r1, r3, #31
    6568:	d50b      	bpl.n	6582 <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    656a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    656e:	079b      	lsls	r3, r3, #30
    6570:	d404      	bmi.n	657c <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    6572:	2302      	movs	r3, #2
    6574:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6578:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    657a:	b113      	cbz	r3, 6582 <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    657c:	2000      	movs	r0, #0
    657e:	f7ff fee7 	bl	6350 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6582:	2300      	movs	r3, #0
    6584:	e7de      	b.n	6544 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    658a:	2200      	movs	r2, #0
    658c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6590:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6594:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6598:	601c      	str	r4, [r3, #0]
}
    659a:	e7ed      	b.n	6578 <nrfx_clock_start+0x90>
    659c:	20000e20 	.word	0x20000e20
    65a0:	0000c9cf 	.word	0x0000c9cf
    65a4:	0000b80f 	.word	0x0000b80f
    65a8:	0000c950 	.word	0x0000c950
    65ac:	0000d0fe 	.word	0x0000d0fe

000065b0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    65b0:	4b0a      	ldr	r3, [pc, #40]	; (65dc <nrfx_clock_stop+0x2c>)
    65b2:	791b      	ldrb	r3, [r3, #4]
{
    65b4:	b510      	push	{r4, lr}
    65b6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    65b8:	b95b      	cbnz	r3, 65d2 <nrfx_clock_stop+0x22>
    65ba:	4909      	ldr	r1, [pc, #36]	; (65e0 <nrfx_clock_stop+0x30>)
    65bc:	4809      	ldr	r0, [pc, #36]	; (65e4 <nrfx_clock_stop+0x34>)
    65be:	4a0a      	ldr	r2, [pc, #40]	; (65e8 <nrfx_clock_stop+0x38>)
    65c0:	f240 13ad 	movw	r3, #429	; 0x1ad
    65c4:	f003 fdfe 	bl	a1c4 <assert_print>
    65c8:	4807      	ldr	r0, [pc, #28]	; (65e8 <nrfx_clock_stop+0x38>)
    65ca:	f240 11ad 	movw	r1, #429	; 0x1ad
    65ce:	f003 fdf2 	bl	a1b6 <assert_post_action>
    clock_stop(domain);
    65d2:	4620      	mov	r0, r4
}
    65d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    65d8:	f7ff beba 	b.w	6350 <clock_stop>
    65dc:	20000e20 	.word	0x20000e20
    65e0:	0000c9cf 	.word	0x0000c9cf
    65e4:	0000b80f 	.word	0x0000b80f
    65e8:	0000c950 	.word	0x0000c950

000065ec <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    65ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    65f0:	b510      	push	{r4, lr}
    65f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    65f6:	b16a      	cbz	r2, 6614 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    65f8:	2200      	movs	r2, #0
    65fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    65fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6602:	2201      	movs	r2, #1
    6604:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6608:	4b11      	ldr	r3, [pc, #68]	; (6650 <nrfx_power_clock_irq_handler+0x64>)
    660a:	7958      	ldrb	r0, [r3, #5]
    660c:	b910      	cbnz	r0, 6614 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    660e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6610:	681b      	ldr	r3, [r3, #0]
    6612:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6618:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    661c:	b172      	cbz	r2, 663c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    661e:	2200      	movs	r2, #0
    6620:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6624:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6628:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    662c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6630:	0792      	lsls	r2, r2, #30
    6632:	d104      	bne.n	663e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6634:	2201      	movs	r2, #1
    6636:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    663a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    663c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    663e:	2202      	movs	r2, #2
    6640:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6644:	4b02      	ldr	r3, [pc, #8]	; (6650 <nrfx_power_clock_irq_handler+0x64>)
}
    6646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    664a:	681b      	ldr	r3, [r3, #0]
    664c:	2001      	movs	r0, #1
    664e:	4718      	bx	r3
    6650:	20000e20 	.word	0x20000e20

00006654 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6654:	4b03      	ldr	r3, [pc, #12]	; (6664 <pin_in_use_by_te+0x10>)
    6656:	3008      	adds	r0, #8
    6658:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    665c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6660:	4770      	bx	lr
    6662:	bf00      	nop
    6664:	20000064 	.word	0x20000064

00006668 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6668:	4b04      	ldr	r3, [pc, #16]	; (667c <pin_has_trigger+0x14>)
    666a:	3008      	adds	r0, #8
    666c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6670:	f010 001c 	ands.w	r0, r0, #28
    6674:	bf18      	it	ne
    6676:	2001      	movne	r0, #1
    6678:	4770      	bx	lr
    667a:	bf00      	nop
    667c:	20000064 	.word	0x20000064

00006680 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6680:	4b03      	ldr	r3, [pc, #12]	; (6690 <pin_is_output+0x10>)
    6682:	3008      	adds	r0, #8
    6684:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6688:	f3c0 0040 	ubfx	r0, r0, #1, #1
    668c:	4770      	bx	lr
    668e:	bf00      	nop
    6690:	20000064 	.word	0x20000064

00006694 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6694:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6696:	f100 0308 	add.w	r3, r0, #8
    669a:	4c0c      	ldr	r4, [pc, #48]	; (66cc <call_handler+0x38>)
    669c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    66a0:	05da      	lsls	r2, r3, #23
{
    66a2:	4605      	mov	r5, r0
    66a4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    66a6:	d507      	bpl.n	66b8 <call_handler+0x24>
    66a8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    66ac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    66b0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    66b4:	6852      	ldr	r2, [r2, #4]
    66b6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    66b8:	68a3      	ldr	r3, [r4, #8]
    66ba:	b12b      	cbz	r3, 66c8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    66bc:	68e2      	ldr	r2, [r4, #12]
    66be:	4631      	mov	r1, r6
    66c0:	4628      	mov	r0, r5
    }
}
    66c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    66c6:	4718      	bx	r3
}
    66c8:	bd70      	pop	{r4, r5, r6, pc}
    66ca:	bf00      	nop
    66cc:	20000064 	.word	0x20000064

000066d0 <nrf_gpio_pin_port_decode>:
{
    66d0:	b510      	push	{r4, lr}
    66d2:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66d4:	6800      	ldr	r0, [r0, #0]
    66d6:	f004 f9d3 	bl	aa80 <nrf_gpio_pin_present_check>
    66da:	b958      	cbnz	r0, 66f4 <nrf_gpio_pin_port_decode+0x24>
    66dc:	4912      	ldr	r1, [pc, #72]	; (6728 <nrf_gpio_pin_port_decode+0x58>)
    66de:	4813      	ldr	r0, [pc, #76]	; (672c <nrf_gpio_pin_port_decode+0x5c>)
    66e0:	4a13      	ldr	r2, [pc, #76]	; (6730 <nrf_gpio_pin_port_decode+0x60>)
    66e2:	f240 2329 	movw	r3, #553	; 0x229
    66e6:	f003 fd6d 	bl	a1c4 <assert_print>
    66ea:	4811      	ldr	r0, [pc, #68]	; (6730 <nrf_gpio_pin_port_decode+0x60>)
    66ec:	f240 2129 	movw	r1, #553	; 0x229
    66f0:	f003 fd61 	bl	a1b6 <assert_post_action>
    uint32_t pin_number = *p_pin;
    66f4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    66f6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66fa:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    66fc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66fe:	d102      	bne.n	6706 <nrf_gpio_pin_port_decode+0x36>
{
    6700:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    6704:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6706:	2b01      	cmp	r3, #1
    6708:	d00c      	beq.n	6724 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    670a:	4a09      	ldr	r2, [pc, #36]	; (6730 <nrf_gpio_pin_port_decode+0x60>)
    670c:	4909      	ldr	r1, [pc, #36]	; (6734 <nrf_gpio_pin_port_decode+0x64>)
    670e:	4807      	ldr	r0, [pc, #28]	; (672c <nrf_gpio_pin_port_decode+0x5c>)
    6710:	f240 232e 	movw	r3, #558	; 0x22e
    6714:	f003 fd56 	bl	a1c4 <assert_print>
    6718:	4805      	ldr	r0, [pc, #20]	; (6730 <nrf_gpio_pin_port_decode+0x60>)
    671a:	f240 212e 	movw	r1, #558	; 0x22e
    671e:	f003 fd4a 	bl	a1b6 <assert_post_action>
    6722:	e7ed      	b.n	6700 <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    6724:	4804      	ldr	r0, [pc, #16]	; (6738 <nrf_gpio_pin_port_decode+0x68>)
    6726:	e7ed      	b.n	6704 <nrf_gpio_pin_port_decode+0x34>
    6728:	0000c867 	.word	0x0000c867
    672c:	0000b80f 	.word	0x0000b80f
    6730:	0000c834 	.word	0x0000c834
    6734:	0000d0fe 	.word	0x0000d0fe
    6738:	50000300 	.word	0x50000300

0000673c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    673c:	4a19      	ldr	r2, [pc, #100]	; (67a4 <release_handler+0x68>)
    673e:	3008      	adds	r0, #8
{
    6740:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6742:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6746:	05d9      	lsls	r1, r3, #23
    6748:	d51d      	bpl.n	6786 <release_handler+0x4a>
    674a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    674e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6752:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6756:	f102 040e 	add.w	r4, r2, #14
    675a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    675c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6760:	f413 7f80 	tst.w	r3, #256	; 0x100
    6764:	d003      	beq.n	676e <release_handler+0x32>
    6766:	f3c3 2343 	ubfx	r3, r3, #9, #4
    676a:	4299      	cmp	r1, r3
    676c:	d00b      	beq.n	6786 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    676e:	3001      	adds	r0, #1
    6770:	2830      	cmp	r0, #48	; 0x30
    6772:	d1f3      	bne.n	675c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6774:	2300      	movs	r3, #0
    6776:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    677a:	480b      	ldr	r0, [pc, #44]	; (67a8 <release_handler+0x6c>)
    677c:	f7ff fdc8 	bl	6310 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6780:	4b0a      	ldr	r3, [pc, #40]	; (67ac <release_handler+0x70>)
    6782:	4298      	cmp	r0, r3
    6784:	d100      	bne.n	6788 <release_handler+0x4c>
}
    6786:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6788:	4909      	ldr	r1, [pc, #36]	; (67b0 <release_handler+0x74>)
    678a:	480a      	ldr	r0, [pc, #40]	; (67b4 <release_handler+0x78>)
    678c:	4a0a      	ldr	r2, [pc, #40]	; (67b8 <release_handler+0x7c>)
    678e:	f44f 7399 	mov.w	r3, #306	; 0x132
    6792:	f003 fd17 	bl	a1c4 <assert_print>
}
    6796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    679a:	4807      	ldr	r0, [pc, #28]	; (67b8 <release_handler+0x7c>)
    679c:	f44f 7199 	mov.w	r1, #306	; 0x132
    67a0:	f003 bd09 	b.w	a1b6 <assert_post_action>
    67a4:	20000064 	.word	0x20000064
    67a8:	200000d8 	.word	0x200000d8
    67ac:	0bad0000 	.word	0x0bad0000
    67b0:	0000ca51 	.word	0x0000ca51
    67b4:	0000b80f 	.word	0x0000b80f
    67b8:	0000c9ed 	.word	0x0000c9ed

000067bc <pin_handler_trigger_uninit>:
{
    67bc:	b538      	push	{r3, r4, r5, lr}
    67be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    67c0:	f7ff ff48 	bl	6654 <pin_in_use_by_te>
    67c4:	4c09      	ldr	r4, [pc, #36]	; (67ec <pin_handler_trigger_uninit+0x30>)
    67c6:	f102 0508 	add.w	r5, r2, #8
    67ca:	b140      	cbz	r0, 67de <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    67cc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    67d0:	4907      	ldr	r1, [pc, #28]	; (67f0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    67d2:	0b5b      	lsrs	r3, r3, #13
    67d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    67d8:	2000      	movs	r0, #0
    67da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    67de:	4610      	mov	r0, r2
    67e0:	f7ff ffac 	bl	673c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    67e4:	2300      	movs	r3, #0
    67e6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    67ea:	bd38      	pop	{r3, r4, r5, pc}
    67ec:	20000064 	.word	0x20000064
    67f0:	40006000 	.word	0x40006000

000067f4 <nrfx_gpiote_input_configure>:
{
    67f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67f6:	4604      	mov	r4, r0
    67f8:	b085      	sub	sp, #20
    67fa:	4617      	mov	r7, r2
    67fc:	461d      	mov	r5, r3
    if (p_input_config)
    67fe:	b1d9      	cbz	r1, 6838 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    6800:	f004 f94f 	bl	aaa2 <pin_is_task_output>
    6804:	bb00      	cbnz	r0, 6848 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6806:	460b      	mov	r3, r1
    6808:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    680c:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6810:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6814:	f10d 020f 	add.w	r2, sp, #15
    6818:	f10d 010e 	add.w	r1, sp, #14
    681c:	4620      	mov	r0, r4
    681e:	f004 f94b 	bl	aab8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6822:	4a43      	ldr	r2, [pc, #268]	; (6930 <nrfx_gpiote_input_configure+0x13c>)
    6824:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6828:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    682c:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6830:	f043 0301 	orr.w	r3, r3, #1
    6834:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6838:	b347      	cbz	r7, 688c <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    683a:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    683c:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    683e:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    6840:	f7ff ff1e 	bl	6680 <pin_is_output>
    6844:	b110      	cbz	r0, 684c <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    6846:	b1b2      	cbz	r2, 6876 <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    6848:	483a      	ldr	r0, [pc, #232]	; (6934 <nrfx_gpiote_input_configure+0x140>)
    684a:	e021      	b.n	6890 <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    684c:	4f38      	ldr	r7, [pc, #224]	; (6930 <nrfx_gpiote_input_configure+0x13c>)
    684e:	f104 0c08 	add.w	ip, r4, #8
    6852:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    6856:	f021 0120 	bic.w	r1, r1, #32
    685a:	04c9      	lsls	r1, r1, #19
    685c:	0cc9      	lsrs	r1, r1, #19
    685e:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    6862:	b142      	cbz	r2, 6876 <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    6864:	2e03      	cmp	r6, #3
    6866:	d8ef      	bhi.n	6848 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6868:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    686a:	b99e      	cbnz	r6, 6894 <nrfx_gpiote_input_configure+0xa0>
    686c:	4a32      	ldr	r2, [pc, #200]	; (6938 <nrfx_gpiote_input_configure+0x144>)
    686e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6872:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6876:	4a2e      	ldr	r2, [pc, #184]	; (6930 <nrfx_gpiote_input_configure+0x13c>)
    6878:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    687c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6880:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6884:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    6888:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    688c:	bb3d      	cbnz	r5, 68de <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    688e:	482b      	ldr	r0, [pc, #172]	; (693c <nrfx_gpiote_input_configure+0x148>)
}
    6890:	b005      	add	sp, #20
    6892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6894:	009a      	lsls	r2, r3, #2
    6896:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    689a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    689e:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    68a2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    68a6:	f020 0003 	bic.w	r0, r0, #3
    68aa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    68ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    68b2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    68b6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    68ba:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68be:	0220      	lsls	r0, r4, #8
    68c0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    68c4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    68c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    68cc:	ea40 000e 	orr.w	r0, r0, lr
    68d0:	f041 0120 	orr.w	r1, r1, #32
    68d4:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    68d8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    68dc:	e7cb      	b.n	6876 <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    68de:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    68e2:	4620      	mov	r0, r4
    68e4:	f7ff ff2a 	bl	673c <release_handler>
    if (!handler)
    68e8:	2e00      	cmp	r6, #0
    68ea:	d0d0      	beq.n	688e <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    68ec:	4d10      	ldr	r5, [pc, #64]	; (6930 <nrfx_gpiote_input_configure+0x13c>)
    68ee:	e9d5 2300 	ldrd	r2, r3, [r5]
    68f2:	4296      	cmp	r6, r2
    68f4:	d101      	bne.n	68fa <nrfx_gpiote_input_configure+0x106>
    68f6:	429f      	cmp	r7, r3
    68f8:	d018      	beq.n	692c <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    68fa:	4811      	ldr	r0, [pc, #68]	; (6940 <nrfx_gpiote_input_configure+0x14c>)
    68fc:	f10d 010f 	add.w	r1, sp, #15
    6900:	f7ff fce6 	bl	62d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6904:	4b0d      	ldr	r3, [pc, #52]	; (693c <nrfx_gpiote_input_configure+0x148>)
    6906:	4298      	cmp	r0, r3
    6908:	d1c2      	bne.n	6890 <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    690a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    690e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6912:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6916:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6918:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    691a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    691e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6926:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    692a:	e7b0      	b.n	688e <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    692c:	2200      	movs	r2, #0
    692e:	e7ee      	b.n	690e <nrfx_gpiote_input_configure+0x11a>
    6930:	20000064 	.word	0x20000064
    6934:	0bad0004 	.word	0x0bad0004
    6938:	40006000 	.word	0x40006000
    693c:	0bad0000 	.word	0x0bad0000
    6940:	200000d8 	.word	0x200000d8

00006944 <nrfx_gpiote_output_configure>:
{
    6944:	b5f0      	push	{r4, r5, r6, r7, lr}
    6946:	4604      	mov	r4, r0
    6948:	b085      	sub	sp, #20
    694a:	4615      	mov	r5, r2
    if (p_config)
    694c:	b321      	cbz	r1, 6998 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    694e:	f7ff fe97 	bl	6680 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6952:	b920      	cbnz	r0, 695e <nrfx_gpiote_output_configure+0x1a>
    6954:	4620      	mov	r0, r4
    6956:	f7ff fe7d 	bl	6654 <pin_in_use_by_te>
    695a:	2800      	cmp	r0, #0
    695c:	d15e      	bne.n	6a1c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    695e:	4620      	mov	r0, r4
    6960:	f7ff fe82 	bl	6668 <pin_has_trigger>
    6964:	b110      	cbz	r0, 696c <nrfx_gpiote_output_configure+0x28>
    6966:	784b      	ldrb	r3, [r1, #1]
    6968:	2b01      	cmp	r3, #1
    696a:	d057      	beq.n	6a1c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    696c:	2301      	movs	r3, #1
    696e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6972:	2300      	movs	r3, #0
    6974:	e9cd 1300 	strd	r1, r3, [sp]
    6978:	1c4a      	adds	r2, r1, #1
    697a:	1c8b      	adds	r3, r1, #2
    697c:	4620      	mov	r0, r4
    697e:	f10d 010f 	add.w	r1, sp, #15
    6982:	f004 f899 	bl	aab8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6986:	4a26      	ldr	r2, [pc, #152]	; (6a20 <nrfx_gpiote_output_configure+0xdc>)
    6988:	f104 0108 	add.w	r1, r4, #8
    698c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6990:	f043 0303 	orr.w	r3, r3, #3
    6994:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6998:	b915      	cbnz	r5, 69a0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    699a:	4822      	ldr	r0, [pc, #136]	; (6a24 <nrfx_gpiote_output_configure+0xe0>)
}
    699c:	b005      	add	sp, #20
    699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    69a0:	4620      	mov	r0, r4
    69a2:	f7ff fe6d 	bl	6680 <pin_is_output>
        if (pin_is_input(pin))
    69a6:	b3c8      	cbz	r0, 6a1c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    69a8:	4e1d      	ldr	r6, [pc, #116]	; (6a20 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    69aa:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    69ae:	f104 0708 	add.w	r7, r4, #8
    69b2:	4661      	mov	r1, ip
    69b4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    69b8:	0089      	lsls	r1, r1, #2
    69ba:	f020 0020 	bic.w	r0, r0, #32
    69be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    69c2:	04c0      	lsls	r0, r0, #19
    69c4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    69c8:	0cc0      	lsrs	r0, r0, #19
    69ca:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    69ce:	2300      	movs	r3, #0
    69d0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    69d4:	786a      	ldrb	r2, [r5, #1]
    69d6:	2a00      	cmp	r2, #0
    69d8:	d0df      	beq.n	699a <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    69da:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    69de:	78ad      	ldrb	r5, [r5, #2]
    69e0:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    69e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    69e8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69ec:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    69f0:	0223      	lsls	r3, r4, #8
    69f2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69f6:	0412      	lsls	r2, r2, #16
    69f8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69fc:	ea43 030e 	orr.w	r3, r3, lr
    6a00:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6a02:	052a      	lsls	r2, r5, #20
    6a04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6a08:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6a0c:	4313      	orrs	r3, r2
    6a0e:	f040 0020 	orr.w	r0, r0, #32
    6a12:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6a16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6a1a:	e7be      	b.n	699a <nrfx_gpiote_output_configure+0x56>
{
    6a1c:	4802      	ldr	r0, [pc, #8]	; (6a28 <nrfx_gpiote_output_configure+0xe4>)
    6a1e:	e7bd      	b.n	699c <nrfx_gpiote_output_configure+0x58>
    6a20:	20000064 	.word	0x20000064
    6a24:	0bad0000 	.word	0x0bad0000
    6a28:	0bad0004 	.word	0x0bad0004

00006a2c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6a2c:	4b01      	ldr	r3, [pc, #4]	; (6a34 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6a2e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6a32:	4770      	bx	lr
    6a34:	20000064 	.word	0x20000064

00006a38 <nrfx_gpiote_channel_get>:
{
    6a38:	b538      	push	{r3, r4, r5, lr}
    6a3a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6a3c:	460d      	mov	r5, r1
    6a3e:	b959      	cbnz	r1, 6a58 <nrfx_gpiote_channel_get+0x20>
    6a40:	490c      	ldr	r1, [pc, #48]	; (6a74 <nrfx_gpiote_channel_get+0x3c>)
    6a42:	480d      	ldr	r0, [pc, #52]	; (6a78 <nrfx_gpiote_channel_get+0x40>)
    6a44:	4a0d      	ldr	r2, [pc, #52]	; (6a7c <nrfx_gpiote_channel_get+0x44>)
    6a46:	f240 2335 	movw	r3, #565	; 0x235
    6a4a:	f003 fbbb 	bl	a1c4 <assert_print>
    6a4e:	480b      	ldr	r0, [pc, #44]	; (6a7c <nrfx_gpiote_channel_get+0x44>)
    6a50:	f240 2135 	movw	r1, #565	; 0x235
    6a54:	f003 fbaf 	bl	a1b6 <assert_post_action>
    if (pin_in_use_by_te(pin))
    6a58:	4620      	mov	r0, r4
    6a5a:	f7ff fdfb 	bl	6654 <pin_in_use_by_te>
    6a5e:	b138      	cbz	r0, 6a70 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a60:	4b07      	ldr	r3, [pc, #28]	; (6a80 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    6a62:	4808      	ldr	r0, [pc, #32]	; (6a84 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a64:	3408      	adds	r4, #8
    6a66:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6a6a:	0b5b      	lsrs	r3, r3, #13
    6a6c:	702b      	strb	r3, [r5, #0]
}
    6a6e:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a70:	4805      	ldr	r0, [pc, #20]	; (6a88 <nrfx_gpiote_channel_get+0x50>)
    6a72:	e7fc      	b.n	6a6e <nrfx_gpiote_channel_get+0x36>
    6a74:	0000ca65 	.word	0x0000ca65
    6a78:	0000b80f 	.word	0x0000b80f
    6a7c:	0000c9ed 	.word	0x0000c9ed
    6a80:	20000064 	.word	0x20000064
    6a84:	0bad0000 	.word	0x0bad0000
    6a88:	0bad0004 	.word	0x0bad0004

00006a8c <nrfx_gpiote_init>:
{
    6a8c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6a8e:	4c0f      	ldr	r4, [pc, #60]	; (6acc <nrfx_gpiote_init+0x40>)
    6a90:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    6a94:	b9bd      	cbnz	r5, 6ac6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6a96:	2260      	movs	r2, #96	; 0x60
    6a98:	4629      	mov	r1, r5
    6a9a:	f104 0010 	add.w	r0, r4, #16
    6a9e:	f004 fa29 	bl	aef4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6aa2:	2006      	movs	r0, #6
    6aa4:	f7fd f8de 	bl	3c64 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6aa8:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <nrfx_gpiote_init+0x44>)
    return err_code;
    6aaa:	480a      	ldr	r0, [pc, #40]	; (6ad4 <nrfx_gpiote_init+0x48>)
    6aac:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6ab0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6ab4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ab8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6abc:	2301      	movs	r3, #1
    6abe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6ac2:	6763      	str	r3, [r4, #116]	; 0x74
}
    6ac4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6ac6:	4804      	ldr	r0, [pc, #16]	; (6ad8 <nrfx_gpiote_init+0x4c>)
    6ac8:	e7fc      	b.n	6ac4 <nrfx_gpiote_init+0x38>
    6aca:	bf00      	nop
    6acc:	20000064 	.word	0x20000064
    6ad0:	40006000 	.word	0x40006000
    6ad4:	0bad0000 	.word	0x0bad0000
    6ad8:	0bad0005 	.word	0x0bad0005

00006adc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6adc:	4b03      	ldr	r3, [pc, #12]	; (6aec <nrfx_gpiote_is_init+0x10>)
    6ade:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6ae2:	3800      	subs	r0, #0
    6ae4:	bf18      	it	ne
    6ae6:	2001      	movne	r0, #1
    6ae8:	4770      	bx	lr
    6aea:	bf00      	nop
    6aec:	20000064 	.word	0x20000064

00006af0 <nrfx_gpiote_channel_free>:
{
    6af0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6af2:	4801      	ldr	r0, [pc, #4]	; (6af8 <nrfx_gpiote_channel_free+0x8>)
    6af4:	f7ff bc0c 	b.w	6310 <nrfx_flag32_free>
    6af8:	200000d4 	.word	0x200000d4

00006afc <nrfx_gpiote_channel_alloc>:
{
    6afc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6afe:	4801      	ldr	r0, [pc, #4]	; (6b04 <nrfx_gpiote_channel_alloc+0x8>)
    6b00:	f7ff bbe6 	b.w	62d0 <nrfx_flag32_alloc>
    6b04:	200000d4 	.word	0x200000d4

00006b08 <nrfx_gpiote_trigger_enable>:
{
    6b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b0a:	4604      	mov	r4, r0
    6b0c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6b0e:	f7ff fdab 	bl	6668 <pin_has_trigger>
    6b12:	b958      	cbnz	r0, 6b2c <nrfx_gpiote_trigger_enable+0x24>
    6b14:	492e      	ldr	r1, [pc, #184]	; (6bd0 <nrfx_gpiote_trigger_enable+0xc8>)
    6b16:	482f      	ldr	r0, [pc, #188]	; (6bd4 <nrfx_gpiote_trigger_enable+0xcc>)
    6b18:	4a2f      	ldr	r2, [pc, #188]	; (6bd8 <nrfx_gpiote_trigger_enable+0xd0>)
    6b1a:	f240 33df 	movw	r3, #991	; 0x3df
    6b1e:	f003 fb51 	bl	a1c4 <assert_print>
    6b22:	482d      	ldr	r0, [pc, #180]	; (6bd8 <nrfx_gpiote_trigger_enable+0xd0>)
    6b24:	f240 31df 	movw	r1, #991	; 0x3df
    6b28:	f003 fb45 	bl	a1b6 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6b2c:	4620      	mov	r0, r4
    6b2e:	f7ff fd91 	bl	6654 <pin_in_use_by_te>
    6b32:	4e2a      	ldr	r6, [pc, #168]	; (6bdc <nrfx_gpiote_trigger_enable+0xd4>)
    6b34:	f104 0708 	add.w	r7, r4, #8
    6b38:	b1f8      	cbz	r0, 6b7a <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    6b3a:	4620      	mov	r0, r4
    6b3c:	f7ff fda0 	bl	6680 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6b40:	b9d8      	cbnz	r0, 6b7a <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6b42:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    6b46:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6b48:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    6b4a:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    6b4e:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    6b52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b56:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b5a:	6008      	str	r0, [r1, #0]
    6b5c:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6b5e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    6b62:	f041 0101 	orr.w	r1, r1, #1
    6b66:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    6b6a:	b125      	cbz	r5, 6b76 <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6b6c:	2301      	movs	r3, #1
    6b6e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    6b70:	4a1b      	ldr	r2, [pc, #108]	; (6be0 <nrfx_gpiote_trigger_enable+0xd8>)
    6b72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6b76:	b003      	add	sp, #12
    6b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    6b7a:	b95d      	cbnz	r5, 6b94 <nrfx_gpiote_trigger_enable+0x8c>
    6b7c:	4919      	ldr	r1, [pc, #100]	; (6be4 <nrfx_gpiote_trigger_enable+0xdc>)
    6b7e:	4815      	ldr	r0, [pc, #84]	; (6bd4 <nrfx_gpiote_trigger_enable+0xcc>)
    6b80:	4a15      	ldr	r2, [pc, #84]	; (6bd8 <nrfx_gpiote_trigger_enable+0xd0>)
    6b82:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6b86:	f003 fb1d 	bl	a1c4 <assert_print>
    6b8a:	4813      	ldr	r0, [pc, #76]	; (6bd8 <nrfx_gpiote_trigger_enable+0xd0>)
    6b8c:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6b90:	f003 fb11 	bl	a1b6 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b94:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6b98:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6b9c:	2b04      	cmp	r3, #4
    6b9e:	d012      	beq.n	6bc6 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6ba0:	2b05      	cmp	r3, #5
    6ba2:	d012      	beq.n	6bca <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ba4:	a801      	add	r0, sp, #4
    6ba6:	9401      	str	r4, [sp, #4]
    6ba8:	f7ff fd92 	bl	66d0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6bac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6bae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6bb2:	40d9      	lsrs	r1, r3
    6bb4:	f001 0101 	and.w	r1, r1, #1
    6bb8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6bba:	4620      	mov	r0, r4
}
    6bbc:	b003      	add	sp, #12
    6bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6bc2:	f003 bfc6 	b.w	ab52 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6bc6:	2103      	movs	r1, #3
    6bc8:	e7f7      	b.n	6bba <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6bca:	2102      	movs	r1, #2
    6bcc:	e7f5      	b.n	6bba <nrfx_gpiote_trigger_enable+0xb2>
    6bce:	bf00      	nop
    6bd0:	0000ca6f 	.word	0x0000ca6f
    6bd4:	0000b80f 	.word	0x0000b80f
    6bd8:	0000c9ed 	.word	0x0000c9ed
    6bdc:	20000064 	.word	0x20000064
    6be0:	40006000 	.word	0x40006000
    6be4:	0000ca84 	.word	0x0000ca84

00006be8 <nrfx_gpiote_trigger_disable>:
{
    6be8:	b508      	push	{r3, lr}
    6bea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6bec:	f7ff fd32 	bl	6654 <pin_in_use_by_te>
    6bf0:	b1c8      	cbz	r0, 6c26 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    6bf2:	4610      	mov	r0, r2
    6bf4:	f7ff fd44 	bl	6680 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6bf8:	b9a8      	cbnz	r0, 6c26 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6bfa:	3208      	adds	r2, #8
    6bfc:	4b0d      	ldr	r3, [pc, #52]	; (6c34 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    6bfe:	490e      	ldr	r1, [pc, #56]	; (6c38 <nrfx_gpiote_trigger_disable+0x50>)
    6c00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6c04:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c06:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6c08:	409a      	lsls	r2, r3
    6c0a:	009b      	lsls	r3, r3, #2
    6c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6c10:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6c14:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6c18:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6c1c:	f022 0203 	bic.w	r2, r2, #3
    6c20:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6c24:	bd08      	pop	{r3, pc}
    6c26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6c2a:	2100      	movs	r1, #0
    6c2c:	4610      	mov	r0, r2
    6c2e:	f003 bf90 	b.w	ab52 <nrf_gpio_cfg_sense_set>
    6c32:	bf00      	nop
    6c34:	20000064 	.word	0x20000064
    6c38:	40006000 	.word	0x40006000

00006c3c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6c3c:	4b0e      	ldr	r3, [pc, #56]	; (6c78 <nrfx_gpiote_pin_uninit+0x3c>)
    6c3e:	f100 0208 	add.w	r2, r0, #8
{
    6c42:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6c44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6c48:	07db      	lsls	r3, r3, #31
{
    6c4a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6c4c:	d511      	bpl.n	6c72 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6c4e:	f7ff ffcb 	bl	6be8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6c52:	4620      	mov	r0, r4
    6c54:	f7ff fdb2 	bl	67bc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6c58:	a801      	add	r0, sp, #4
    6c5a:	9401      	str	r4, [sp, #4]
    6c5c:	f7ff fd38 	bl	66d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6c60:	9b01      	ldr	r3, [sp, #4]
    6c62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6c66:	2202      	movs	r2, #2
    6c68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6c6c:	4803      	ldr	r0, [pc, #12]	; (6c7c <nrfx_gpiote_pin_uninit+0x40>)
}
    6c6e:	b002      	add	sp, #8
    6c70:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6c72:	4803      	ldr	r0, [pc, #12]	; (6c80 <nrfx_gpiote_pin_uninit+0x44>)
    6c74:	e7fb      	b.n	6c6e <nrfx_gpiote_pin_uninit+0x32>
    6c76:	bf00      	nop
    6c78:	20000064 	.word	0x20000064
    6c7c:	0bad0000 	.word	0x0bad0000
    6c80:	0bad0004 	.word	0x0bad0004

00006c84 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c88:	4b69      	ldr	r3, [pc, #420]	; (6e30 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    6c8a:	486a      	ldr	r0, [pc, #424]	; (6e34 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6c8c:	496a      	ldr	r1, [pc, #424]	; (6e38 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    6c8e:	2600      	movs	r6, #0
{
    6c90:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6c92:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c94:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c96:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6c98:	b135      	cbz	r5, 6ca8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6c9a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6c9e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ca0:	bf1e      	ittt	ne
    6ca2:	601c      	strne	r4, [r3, #0]
    6ca4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6ca6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ca8:	3304      	adds	r3, #4
    6caa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6cac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6cb0:	d1f1      	bne.n	6c96 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6cb2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 6e34 <nrfx_gpiote_irq_handler+0x1b0>
    6cb6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6cba:	2b00      	cmp	r3, #0
    6cbc:	f000 809b 	beq.w	6df6 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    6cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6cc4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6cc8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6cca:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6cce:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6cd2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6cd4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6cd8:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6cdc:	f10d 0a10 	add.w	sl, sp, #16
    6ce0:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6ce4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6ce6:	f04f 0b01 	mov.w	fp, #1
    6cea:	e04b      	b.n	6d84 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    6cec:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6cee:	4a53      	ldr	r2, [pc, #332]	; (6e3c <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6cf0:	fa94 f4a4 	rbit	r4, r4
    6cf4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6cf8:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6cfa:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6cfc:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6d00:	f004 0107 	and.w	r1, r4, #7
    6d04:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6d08:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6d0c:	9403      	str	r4, [sp, #12]
    6d0e:	fa0b f101 	lsl.w	r1, fp, r1
    6d12:	ea23 0301 	bic.w	r3, r3, r1
    6d16:	08ba      	lsrs	r2, r7, #2
    6d18:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d1c:	a803      	add	r0, sp, #12
    6d1e:	9201      	str	r2, [sp, #4]
    6d20:	f7ff fcd6 	bl	66d0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6d24:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    6d26:	9a01      	ldr	r2, [sp, #4]
    6d28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6d2c:	f3c7 0582 	ubfx	r5, r7, #2, #3
    6d30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    6d34:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6d36:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6d38:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6d3c:	d52c      	bpl.n	6d98 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    6d3e:	4639      	mov	r1, r7
    6d40:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6d42:	b2dd      	uxtb	r5, r3
    6d44:	f7ff fca6 	bl	6694 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d48:	a803      	add	r0, sp, #12
    6d4a:	9403      	str	r4, [sp, #12]
    6d4c:	f7ff fcc0 	bl	66d0 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6d50:	9b03      	ldr	r3, [sp, #12]
    6d52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6d56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6d5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6d5e:	429d      	cmp	r5, r3
    6d60:	d107      	bne.n	6d72 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6d62:	2100      	movs	r1, #0
    6d64:	4620      	mov	r0, r4
    6d66:	f003 fef4 	bl	ab52 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6d6a:	4629      	mov	r1, r5
    6d6c:	4620      	mov	r0, r4
    6d6e:	f003 fef0 	bl	ab52 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6d72:	a803      	add	r0, sp, #12
    6d74:	9403      	str	r4, [sp, #12]
    6d76:	f7ff fcab 	bl	66d0 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6d7a:	9b03      	ldr	r3, [sp, #12]
    6d7c:	fa0b f303 	lsl.w	r3, fp, r3
    6d80:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6d84:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6d88:	2c00      	cmp	r4, #0
    6d8a:	d1af      	bne.n	6cec <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6d8c:	f1b8 0f00 	cmp.w	r8, #0
    6d90:	d11d      	bne.n	6dce <nrfx_gpiote_irq_handler+0x14a>
    6d92:	f04f 0801 	mov.w	r8, #1
    6d96:	e7a3      	b.n	6ce0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6d98:	2b02      	cmp	r3, #2
    6d9a:	d10c      	bne.n	6db6 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6d9c:	2103      	movs	r1, #3
    6d9e:	4620      	mov	r0, r4
    6da0:	f003 fed7 	bl	ab52 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6da4:	f005 0305 	and.w	r3, r5, #5
    6da8:	2b01      	cmp	r3, #1
    6daa:	d1e2      	bne.n	6d72 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    6dac:	4639      	mov	r1, r7
    6dae:	4620      	mov	r0, r4
    6db0:	f7ff fc70 	bl	6694 <call_handler>
    6db4:	e7dd      	b.n	6d72 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6db6:	2102      	movs	r1, #2
    6db8:	4620      	mov	r0, r4
    6dba:	9301      	str	r3, [sp, #4]
    6dbc:	f003 fec9 	bl	ab52 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6dc0:	2d03      	cmp	r5, #3
    6dc2:	d0f3      	beq.n	6dac <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	2b03      	cmp	r3, #3
    6dc8:	d1d3      	bne.n	6d72 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6dca:	2d02      	cmp	r5, #2
    6dcc:	e7ed      	b.n	6daa <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    6dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6dd2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    6dd6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6dda:	4919      	ldr	r1, [pc, #100]	; (6e40 <nrfx_gpiote_irq_handler+0x1bc>)
    6ddc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6de0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6de2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6de6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6dea:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6dec:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6dee:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    6df2:	f47f af71 	bne.w	6cd8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    6df6:	2401      	movs	r4, #1
    while (mask)
    6df8:	b916      	cbnz	r6, 6e00 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6dfa:	b007      	add	sp, #28
    6dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6e00:	fa96 f3a6 	rbit	r3, r6
    6e04:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6e08:	fa04 f203 	lsl.w	r2, r4, r3
    6e0c:	009b      	lsls	r3, r3, #2
    6e0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6e12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6e16:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6e1a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6e1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6e22:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6e26:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6e2a:	f7ff fc33 	bl	6694 <call_handler>
    6e2e:	e7e3      	b.n	6df8 <nrfx_gpiote_irq_handler+0x174>
    6e30:	40006100 	.word	0x40006100
    6e34:	40006000 	.word	0x40006000
    6e38:	40006120 	.word	0x40006120
    6e3c:	20000064 	.word	0x20000064
    6e40:	50000300 	.word	0x50000300

00006e44 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6e44:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6e46:	4801      	ldr	r0, [pc, #4]	; (6e4c <nrfx_ppi_channel_alloc+0x8>)
    6e48:	f7ff ba42 	b.w	62d0 <nrfx_flag32_alloc>
    6e4c:	200000e0 	.word	0x200000e0

00006e50 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6e50:	4b11      	ldr	r3, [pc, #68]	; (6e98 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6e52:	4912      	ldr	r1, [pc, #72]	; (6e9c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6e54:	2203      	movs	r2, #3
    6e56:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6e58:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6e5a:	4a11      	ldr	r2, [pc, #68]	; (6ea0 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    6e5c:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6e5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e64:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    6e66:	2200      	movs	r2, #0
    6e68:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6e6a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6e6e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6e70:	490c      	ldr	r1, [pc, #48]	; (6ea4 <_DoInit+0x54>)
    6e72:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6e74:	2110      	movs	r1, #16
    6e76:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6e78:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6e7a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6e7c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6e7e:	4a0a      	ldr	r2, [pc, #40]	; (6ea8 <_DoInit+0x58>)
    6e80:	6812      	ldr	r2, [r2, #0]
    6e82:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6e86:	4a09      	ldr	r2, [pc, #36]	; (6eac <_DoInit+0x5c>)
    6e88:	6810      	ldr	r0, [r2, #0]
    6e8a:	8892      	ldrh	r2, [r2, #4]
    6e8c:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6e8e:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    6e90:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    6e92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6e94:	4770      	bx	lr
    6e96:	bf00      	nop
    6e98:	20000e28 	.word	0x20000e28
    6e9c:	0000ca8f 	.word	0x0000ca8f
    6ea0:	2000910c 	.word	0x2000910c
    6ea4:	200090fc 	.word	0x200090fc
    6ea8:	0000ca98 	.word	0x0000ca98
    6eac:	0000ca9c 	.word	0x0000ca9c

00006eb0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6eb4:	4f21      	ldr	r7, [pc, #132]	; (6f3c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    6eb6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6eba:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6ebc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6ec0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6ec2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6ec4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6ec6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6ec8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6eca:	d831      	bhi.n	6f30 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6ecc:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6ed0:	ebaa 0905 	sub.w	r9, sl, r5
    6ed4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6ed8:	4294      	cmp	r4, r2
    6eda:	d811      	bhi.n	6f00 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6edc:	2318      	movs	r3, #24
    6ede:	fb06 3303 	mla	r3, r6, r3, r3
    6ee2:	443b      	add	r3, r7
    6ee4:	4622      	mov	r2, r4
    6ee6:	6858      	ldr	r0, [r3, #4]
    6ee8:	4641      	mov	r1, r8
    6eea:	4428      	add	r0, r5
    6eec:	f003 ffe1 	bl	aeb2 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    6ef0:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    6ef2:	2318      	movs	r3, #24
    6ef4:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    6ef8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    6efa:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6f00:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6f02:	429c      	cmp	r4, r3
    6f04:	d818      	bhi.n	6f38 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6f06:	fb00 bb0b 	mla	fp, r0, fp, fp
    6f0a:	44bb      	add	fp, r7
    6f0c:	464a      	mov	r2, r9
    6f0e:	f8db 0004 	ldr.w	r0, [fp, #4]
    6f12:	442c      	add	r4, r5
    6f14:	4428      	add	r0, r5
    6f16:	f003 ffcc 	bl	aeb2 <memcpy>
      if (NumBytes) {
    6f1a:	ebb4 040a 	subs.w	r4, r4, sl
    6f1e:	d0e8      	beq.n	6ef2 <SEGGER_RTT_WriteSkipNoLock+0x42>
    6f20:	f8db 0004 	ldr.w	r0, [fp, #4]
    6f24:	4622      	mov	r2, r4
    6f26:	eb08 0109 	add.w	r1, r8, r9
    6f2a:	f003 ffc2 	bl	aeb2 <memcpy>
      return 1;
    6f2e:	e7e0      	b.n	6ef2 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    6f30:	3b01      	subs	r3, #1
    6f32:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6f34:	42a3      	cmp	r3, r4
    6f36:	d2d1      	bcs.n	6edc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6f38:	2000      	movs	r0, #0
    6f3a:	e7df      	b.n	6efc <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6f3c:	20000e28 	.word	0x20000e28

00006f40 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    6f40:	4b03      	ldr	r3, [pc, #12]	; (6f50 <SEGGER_RTT_HasDataUp+0x10>)
    6f42:	2218      	movs	r2, #24
    6f44:	fb02 3300 	mla	r3, r2, r0, r3
    6f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    6f4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6f4c:	1a80      	subs	r0, r0, r2
    6f4e:	4770      	bx	lr
    6f50:	20000e28 	.word	0x20000e28

00006f54 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6f54:	4b0e      	ldr	r3, [pc, #56]	; (6f90 <z_sys_init_run_level+0x3c>)
{
    6f56:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6f58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6f5c:	3001      	adds	r0, #1
    6f5e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    6f62:	42a6      	cmp	r6, r4
    6f64:	d800      	bhi.n	6f68 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    6f66:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    6f68:	e9d4 3500 	ldrd	r3, r5, [r4]
    6f6c:	4628      	mov	r0, r5
    6f6e:	4798      	blx	r3
		if (dev != NULL) {
    6f70:	b165      	cbz	r5, 6f8c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    6f72:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    6f74:	b130      	cbz	r0, 6f84 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6f76:	2800      	cmp	r0, #0
    6f78:	bfb8      	it	lt
    6f7a:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    6f7c:	28ff      	cmp	r0, #255	; 0xff
    6f7e:	bfa8      	it	ge
    6f80:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    6f82:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6f84:	785a      	ldrb	r2, [r3, #1]
    6f86:	f042 0201 	orr.w	r2, r2, #1
    6f8a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6f8c:	3408      	adds	r4, #8
    6f8e:	e7e8      	b.n	6f62 <z_sys_init_run_level+0xe>
    6f90:	0000b4b8 	.word	0x0000b4b8

00006f94 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    6f94:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    6f96:	4605      	mov	r5, r0
    6f98:	b910      	cbnz	r0, 6fa0 <z_impl_device_get_binding+0xc>
		return NULL;
    6f9a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6f9c:	4620      	mov	r0, r4
    6f9e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    6fa0:	7803      	ldrb	r3, [r0, #0]
    6fa2:	2b00      	cmp	r3, #0
    6fa4:	d0f9      	beq.n	6f9a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    6fa6:	4c0e      	ldr	r4, [pc, #56]	; (6fe0 <z_impl_device_get_binding+0x4c>)
    6fa8:	4e0e      	ldr	r6, [pc, #56]	; (6fe4 <z_impl_device_get_binding+0x50>)
    6faa:	42b4      	cmp	r4, r6
    6fac:	d108      	bne.n	6fc0 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    6fae:	4c0c      	ldr	r4, [pc, #48]	; (6fe0 <z_impl_device_get_binding+0x4c>)
    6fb0:	42b4      	cmp	r4, r6
    6fb2:	d0f2      	beq.n	6f9a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6fb4:	4620      	mov	r0, r4
    6fb6:	f003 fde3 	bl	ab80 <z_device_is_ready>
    6fba:	b950      	cbnz	r0, 6fd2 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    6fbc:	3418      	adds	r4, #24
    6fbe:	e7f7      	b.n	6fb0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    6fc0:	4620      	mov	r0, r4
    6fc2:	f003 fddd 	bl	ab80 <z_device_is_ready>
    6fc6:	b110      	cbz	r0, 6fce <z_impl_device_get_binding+0x3a>
    6fc8:	6823      	ldr	r3, [r4, #0]
    6fca:	42ab      	cmp	r3, r5
    6fcc:	d0e6      	beq.n	6f9c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    6fce:	3418      	adds	r4, #24
    6fd0:	e7eb      	b.n	6faa <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6fd2:	6821      	ldr	r1, [r4, #0]
    6fd4:	4628      	mov	r0, r5
    6fd6:	f7f9 ffd1 	bl	f7c <strcmp>
    6fda:	2800      	cmp	r0, #0
    6fdc:	d1ee      	bne.n	6fbc <z_impl_device_get_binding+0x28>
    6fde:	e7dd      	b.n	6f9c <z_impl_device_get_binding+0x8>
    6fe0:	0000afb0 	.word	0x0000afb0
    6fe4:	0000b028 	.word	0x0000b028

00006fe8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fec:	4605      	mov	r5, r0
    6fee:	b086      	sub	sp, #24
    6ff0:	460f      	mov	r7, r1
	__asm__ volatile(
    6ff2:	f04f 0320 	mov.w	r3, #32
    6ff6:	f3ef 8811 	mrs	r8, BASEPRI
    6ffa:	f383 8812 	msr	BASEPRI_MAX, r3
    6ffe:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7002:	f001 ff05 	bl	8e10 <z_impl_z_current_get>
    7006:	2d04      	cmp	r5, #4
    7008:	bf96      	itet	ls
    700a:	4b29      	ldrls	r3, [pc, #164]	; (70b0 <z_fatal_error+0xc8>)
    700c:	4b29      	ldrhi	r3, [pc, #164]	; (70b4 <z_fatal_error+0xcc>)
    700e:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7012:	4929      	ldr	r1, [pc, #164]	; (70b8 <z_fatal_error+0xd0>)
    7014:	9503      	str	r5, [sp, #12]
    7016:	2400      	movs	r4, #0
    7018:	e9cd 3404 	strd	r3, r4, [sp, #16]
    701c:	4b27      	ldr	r3, [pc, #156]	; (70bc <z_fatal_error+0xd4>)
    701e:	9400      	str	r4, [sp, #0]
    7020:	e9cd 4301 	strd	r4, r3, [sp, #4]
    7024:	4606      	mov	r6, r0
    7026:	4623      	mov	r3, r4
    7028:	2201      	movs	r2, #1
    702a:	4620      	mov	r0, r4
    702c:	f003 fdb2 	bl	ab94 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7030:	b16f      	cbz	r7, 704e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7032:	69fb      	ldr	r3, [r7, #28]
    7034:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7038:	b14b      	cbz	r3, 704e <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    703a:	4b21      	ldr	r3, [pc, #132]	; (70c0 <z_fatal_error+0xd8>)
    703c:	491e      	ldr	r1, [pc, #120]	; (70b8 <z_fatal_error+0xd0>)
    703e:	9400      	str	r4, [sp, #0]
    7040:	e9cd 4301 	strd	r4, r3, [sp, #4]
    7044:	2201      	movs	r2, #1
    7046:	4623      	mov	r3, r4
    7048:	4620      	mov	r0, r4
    704a:	f003 fda3 	bl	ab94 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    704e:	b12e      	cbz	r6, 705c <z_fatal_error+0x74>
    7050:	4630      	mov	r0, r6
    7052:	f003 fdd5 	bl	ac00 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7056:	b108      	cbz	r0, 705c <z_fatal_error+0x74>
    7058:	7803      	ldrb	r3, [r0, #0]
    705a:	b903      	cbnz	r3, 705e <z_fatal_error+0x76>
		thread_name = "unknown";
    705c:	4819      	ldr	r0, [pc, #100]	; (70c4 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    705e:	4b1a      	ldr	r3, [pc, #104]	; (70c8 <z_fatal_error+0xe0>)
    7060:	9302      	str	r3, [sp, #8]
    7062:	2300      	movs	r3, #0
    7064:	e9cd 6003 	strd	r6, r0, [sp, #12]
    7068:	e9cd 3300 	strd	r3, r3, [sp]
    706c:	4618      	mov	r0, r3
    706e:	4912      	ldr	r1, [pc, #72]	; (70b8 <z_fatal_error+0xd0>)
    7070:	2201      	movs	r2, #1
    7072:	f003 fd8f 	bl	ab94 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    7076:	4639      	mov	r1, r7
    7078:	4628      	mov	r0, r5
    707a:	f7ff f815 	bl	60a8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    707e:	2d04      	cmp	r5, #4
    7080:	d10c      	bne.n	709c <z_fatal_error+0xb4>
    7082:	4912      	ldr	r1, [pc, #72]	; (70cc <z_fatal_error+0xe4>)
    7084:	4a12      	ldr	r2, [pc, #72]	; (70d0 <z_fatal_error+0xe8>)
    7086:	4813      	ldr	r0, [pc, #76]	; (70d4 <z_fatal_error+0xec>)
    7088:	238f      	movs	r3, #143	; 0x8f
    708a:	f003 f89b 	bl	a1c4 <assert_print>
    708e:	4812      	ldr	r0, [pc, #72]	; (70d8 <z_fatal_error+0xf0>)
    7090:	f003 f898 	bl	a1c4 <assert_print>
    7094:	480e      	ldr	r0, [pc, #56]	; (70d0 <z_fatal_error+0xe8>)
    7096:	218f      	movs	r1, #143	; 0x8f
    7098:	f003 f88d 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    709c:	f388 8811 	msr	BASEPRI, r8
    70a0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    70a4:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    70a6:	b006      	add	sp, #24
    70a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    70ac:	f7fd ba9e 	b.w	45ec <z_impl_k_thread_abort>
    70b0:	0000b4d0 	.word	0x0000b4d0
    70b4:	0000caa3 	.word	0x0000caa3
    70b8:	0000b1d0 	.word	0x0000b1d0
    70bc:	0000cab9 	.word	0x0000cab9
    70c0:	0000cae1 	.word	0x0000cae1
    70c4:	0000cab1 	.word	0x0000cab1
    70c8:	0000cb02 	.word	0x0000cb02
    70cc:	0000cb3c 	.word	0x0000cb3c
    70d0:	0000cb1a 	.word	0x0000cb1a
    70d4:	0000b80f 	.word	0x0000b80f
    70d8:	0000cb59 	.word	0x0000cb59

000070dc <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    70dc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    70de:	4b0a      	ldr	r3, [pc, #40]	; (7108 <bg_thread_main+0x2c>)
    70e0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    70e2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    70e4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    70e6:	f7ff ff35 	bl	6f54 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    70ea:	f002 fbe5 	bl	98b8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    70ee:	2003      	movs	r0, #3
    70f0:	f7ff ff30 	bl	6f54 <z_sys_init_run_level>

	z_init_static_threads();
    70f4:	f000 fa7c 	bl	75f0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    70f8:	f7fa fb50 	bl	179c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    70fc:	4a03      	ldr	r2, [pc, #12]	; (710c <bg_thread_main+0x30>)
    70fe:	7b13      	ldrb	r3, [r2, #12]
    7100:	f023 0301 	bic.w	r3, r3, #1
    7104:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7106:	bd08      	pop	{r3, pc}
    7108:	2000950c 	.word	0x2000950c
    710c:	200006f8 	.word	0x200006f8

00007110 <z_bss_zero>:
{
    7110:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7112:	4803      	ldr	r0, [pc, #12]	; (7120 <z_bss_zero+0x10>)
    7114:	4a03      	ldr	r2, [pc, #12]	; (7124 <z_bss_zero+0x14>)
    7116:	2100      	movs	r1, #0
    7118:	1a12      	subs	r2, r2, r0
    711a:	f003 fd4b 	bl	abb4 <z_early_memset>
}
    711e:	bd08      	pop	{r3, pc}
    7120:	20000228 	.word	0x20000228
    7124:	20009510 	.word	0x20009510

00007128 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7128:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    712a:	2300      	movs	r3, #0
{
    712c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    712e:	2201      	movs	r2, #1
    7130:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    7134:	4e13      	ldr	r6, [pc, #76]	; (7184 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7136:	4d14      	ldr	r5, [pc, #80]	; (7188 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7138:	9301      	str	r3, [sp, #4]
    713a:	220f      	movs	r2, #15
    713c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7140:	4912      	ldr	r1, [pc, #72]	; (718c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7142:	2318      	movs	r3, #24
    7144:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    7148:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    714c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    714e:	f44f 70b0 	mov.w	r0, #352	; 0x160
    7152:	fb00 1104 	mla	r1, r0, r4, r1
    7156:	4b0e      	ldr	r3, [pc, #56]	; (7190 <z_init_cpu+0x68>)
    7158:	9500      	str	r5, [sp, #0]
    715a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    715e:	4630      	mov	r0, r6
    7160:	f000 f992 	bl	7488 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7164:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7166:	4a0b      	ldr	r2, [pc, #44]	; (7194 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7168:	60ee      	str	r6, [r5, #12]
    716a:	f023 0304 	bic.w	r3, r3, #4
    716e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7170:	f44f 6302 	mov.w	r3, #2080	; 0x820
    7174:	fb04 3303 	mla	r3, r4, r3, r3
    7178:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    717a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    717c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    717e:	b006      	add	sp, #24
    7180:	bd70      	pop	{r4, r5, r6, pc}
    7182:	bf00      	nop
    7184:	20000678 	.word	0x20000678
    7188:	20000ed0 	.word	0x20000ed0
    718c:	2000c5e0 	.word	0x2000c5e0
    7190:	0000774d 	.word	0x0000774d
    7194:	2000bdc0 	.word	0x2000bdc0

00007198 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7198:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    719a:	4b2f      	ldr	r3, [pc, #188]	; (7258 <z_cstart+0xc0>)
    719c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    719e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    71a2:	4d2e      	ldr	r5, [pc, #184]	; (725c <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    71a4:	4e2e      	ldr	r6, [pc, #184]	; (7260 <z_cstart+0xc8>)
    71a6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    71a8:	4f2e      	ldr	r7, [pc, #184]	; (7264 <z_cstart+0xcc>)
    71aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    71ae:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    71b0:	2400      	movs	r4, #0
    71b2:	23e0      	movs	r3, #224	; 0xe0
    71b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    71b8:	77ec      	strb	r4, [r5, #31]
    71ba:	762c      	strb	r4, [r5, #24]
    71bc:	766c      	strb	r4, [r5, #25]
    71be:	76ac      	strb	r4, [r5, #26]
    71c0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    71c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    71c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    71ca:	626b      	str	r3, [r5, #36]	; 0x24
    71cc:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    71d0:	f7fd f980 	bl	44d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    71d4:	f7fc fcd8 	bl	3b88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    71d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71dc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    71de:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    71e0:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    71e2:	f7fd fb01 	bl	47e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    71e6:	f7fd fa17 	bl	4618 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    71ea:	f7fb fea7 	bl	2f3c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    71ee:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    71f2:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    71f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    71f8:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    71fc:	f002 fb56 	bl	98ac <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    7200:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7202:	f003 fcbc 	bl	ab7e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7206:	4620      	mov	r0, r4
    7208:	f7ff fea4 	bl	6f54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    720c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    720e:	4d16      	ldr	r5, [pc, #88]	; (7268 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7210:	f7ff fea0 	bl	6f54 <z_sys_init_run_level>
	z_sched_init();
    7214:	f001 fc58 	bl	8ac8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7218:	4b14      	ldr	r3, [pc, #80]	; (726c <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    721a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    721c:	9305      	str	r3, [sp, #20]
    721e:	2301      	movs	r3, #1
    7220:	4913      	ldr	r1, [pc, #76]	; (7270 <z_cstart+0xd8>)
    7222:	9400      	str	r4, [sp, #0]
    7224:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    722c:	463b      	mov	r3, r7
    722e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7232:	4628      	mov	r0, r5
    7234:	f000 f928 	bl	7488 <z_setup_new_thread>
    7238:	7b6a      	ldrb	r2, [r5, #13]
    723a:	4606      	mov	r6, r0
    723c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7240:	4628      	mov	r0, r5
    7242:	736a      	strb	r2, [r5, #13]
    7244:	f000 fe38 	bl	7eb8 <z_ready_thread>
	z_init_cpu(0);
    7248:	4620      	mov	r0, r4
    724a:	f7ff ff6d 	bl	7128 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    724e:	463a      	mov	r2, r7
    7250:	4631      	mov	r1, r6
    7252:	4628      	mov	r0, r5
    7254:	f7fc fdfc 	bl	3e50 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7258:	2000c5e0 	.word	0x2000c5e0
    725c:	e000ed00 	.word	0xe000ed00
    7260:	20000ed0 	.word	0x20000ed0
    7264:	000070dd 	.word	0x000070dd
    7268:	200006f8 	.word	0x200006f8
    726c:	0000cbd8 	.word	0x0000cbd8
    7270:	2000c740 	.word	0x2000c740

00007274 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    7274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7276:	4c16      	ldr	r4, [pc, #88]	; (72d0 <init_mem_slab_module+0x5c>)
    7278:	4d16      	ldr	r5, [pc, #88]	; (72d4 <init_mem_slab_module+0x60>)
    727a:	4e17      	ldr	r6, [pc, #92]	; (72d8 <init_mem_slab_module+0x64>)
    727c:	42ac      	cmp	r4, r5
    727e:	d90c      	bls.n	729a <init_mem_slab_module+0x26>
    7280:	4916      	ldr	r1, [pc, #88]	; (72dc <init_mem_slab_module+0x68>)
    7282:	4817      	ldr	r0, [pc, #92]	; (72e0 <init_mem_slab_module+0x6c>)
    7284:	233d      	movs	r3, #61	; 0x3d
    7286:	4632      	mov	r2, r6
    7288:	f002 ff9c 	bl	a1c4 <assert_print>
    728c:	4815      	ldr	r0, [pc, #84]	; (72e4 <init_mem_slab_module+0x70>)
    728e:	f002 ff99 	bl	a1c4 <assert_print>
    7292:	213d      	movs	r1, #61	; 0x3d
    7294:	4630      	mov	r0, r6
    7296:	f002 ff8e 	bl	a1b6 <assert_post_action>
    729a:	42ac      	cmp	r4, r5
    729c:	d301      	bcc.n	72a2 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    729e:	2000      	movs	r0, #0
	return rc;
}
    72a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    72a2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    72a6:	ea42 0301 	orr.w	r3, r2, r1
    72aa:	f013 0303 	ands.w	r3, r3, #3
    72ae:	d10b      	bne.n	72c8 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    72b0:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    72b2:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    72b4:	4283      	cmp	r3, r0
    72b6:	d101      	bne.n	72bc <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    72b8:	3420      	adds	r4, #32
    72ba:	e7df      	b.n	727c <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    72bc:	69a7      	ldr	r7, [r4, #24]
    72be:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    72c0:	3301      	adds	r3, #1
		slab->free_list = p;
    72c2:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    72c4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    72c6:	e7f5      	b.n	72b4 <init_mem_slab_module+0x40>
	return rc;
    72c8:	f06f 0015 	mvn.w	r0, #21
    72cc:	e7e8      	b.n	72a0 <init_mem_slab_module+0x2c>
    72ce:	bf00      	nop
    72d0:	200001c0 	.word	0x200001c0
    72d4:	200001c0 	.word	0x200001c0
    72d8:	0000cbe0 	.word	0x0000cbe0
    72dc:	0000cc05 	.word	0x0000cc05
    72e0:	0000b80f 	.word	0x0000b80f
    72e4:	0000cc22 	.word	0x0000cc22

000072e8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    72e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    72ec:	4604      	mov	r4, r0
    72ee:	460e      	mov	r6, r1
    72f0:	4690      	mov	r8, r2
    72f2:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    72f4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    72f8:	f04f 0320 	mov.w	r3, #32
    72fc:	f3ef 8911 	mrs	r9, BASEPRI
    7300:	f383 8812 	msr	BASEPRI_MAX, r3
    7304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7308:	4628      	mov	r0, r5
    730a:	f000 f9f9 	bl	7700 <z_spin_lock_valid>
    730e:	b968      	cbnz	r0, 732c <k_mem_slab_alloc+0x44>
    7310:	4a24      	ldr	r2, [pc, #144]	; (73a4 <k_mem_slab_alloc+0xbc>)
    7312:	4925      	ldr	r1, [pc, #148]	; (73a8 <k_mem_slab_alloc+0xc0>)
    7314:	4825      	ldr	r0, [pc, #148]	; (73ac <k_mem_slab_alloc+0xc4>)
    7316:	238e      	movs	r3, #142	; 0x8e
    7318:	f002 ff54 	bl	a1c4 <assert_print>
    731c:	4824      	ldr	r0, [pc, #144]	; (73b0 <k_mem_slab_alloc+0xc8>)
    731e:	4629      	mov	r1, r5
    7320:	f002 ff50 	bl	a1c4 <assert_print>
    7324:	481f      	ldr	r0, [pc, #124]	; (73a4 <k_mem_slab_alloc+0xbc>)
    7326:	218e      	movs	r1, #142	; 0x8e
    7328:	f002 ff45 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    732c:	4628      	mov	r0, r5
    732e:	f000 fa05 	bl	773c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    7332:	69a3      	ldr	r3, [r4, #24]
    7334:	b1eb      	cbz	r3, 7372 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    7336:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    7338:	681b      	ldr	r3, [r3, #0]
    733a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    733c:	69e3      	ldr	r3, [r4, #28]
    733e:	3301      	adds	r3, #1
    7340:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    7342:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7344:	4628      	mov	r0, r5
    7346:	f000 f9e9 	bl	771c <z_spin_unlock_valid>
    734a:	b968      	cbnz	r0, 7368 <k_mem_slab_alloc+0x80>
    734c:	4a15      	ldr	r2, [pc, #84]	; (73a4 <k_mem_slab_alloc+0xbc>)
    734e:	4919      	ldr	r1, [pc, #100]	; (73b4 <k_mem_slab_alloc+0xcc>)
    7350:	4816      	ldr	r0, [pc, #88]	; (73ac <k_mem_slab_alloc+0xc4>)
    7352:	23b9      	movs	r3, #185	; 0xb9
    7354:	f002 ff36 	bl	a1c4 <assert_print>
    7358:	4817      	ldr	r0, [pc, #92]	; (73b8 <k_mem_slab_alloc+0xd0>)
    735a:	4629      	mov	r1, r5
    735c:	f002 ff32 	bl	a1c4 <assert_print>
    7360:	4810      	ldr	r0, [pc, #64]	; (73a4 <k_mem_slab_alloc+0xbc>)
    7362:	21b9      	movs	r1, #185	; 0xb9
    7364:	f002 ff27 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7368:	f389 8811 	msr	BASEPRI, r9
    736c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    7370:	e013      	b.n	739a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7372:	ea58 0207 	orrs.w	r2, r8, r7
    7376:	d103      	bne.n	7380 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    7378:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    737a:	f06f 040b 	mvn.w	r4, #11
    737e:	e7e1      	b.n	7344 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7380:	4622      	mov	r2, r4
    7382:	e9cd 8700 	strd	r8, r7, [sp]
    7386:	4649      	mov	r1, r9
    7388:	4628      	mov	r0, r5
    738a:	f001 f951 	bl	8630 <z_pend_curr>
		if (result == 0) {
    738e:	4604      	mov	r4, r0
    7390:	b918      	cbnz	r0, 739a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    7392:	4b0a      	ldr	r3, [pc, #40]	; (73bc <k_mem_slab_alloc+0xd4>)
    7394:	689b      	ldr	r3, [r3, #8]
    7396:	695b      	ldr	r3, [r3, #20]
    7398:	6033      	str	r3, [r6, #0]
}
    739a:	4620      	mov	r0, r4
    739c:	b003      	add	sp, #12
    739e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    73a2:	bf00      	nop
    73a4:	0000b959 	.word	0x0000b959
    73a8:	0000b9b2 	.word	0x0000b9b2
    73ac:	0000b80f 	.word	0x0000b80f
    73b0:	0000b9c7 	.word	0x0000b9c7
    73b4:	0000b986 	.word	0x0000b986
    73b8:	0000b99d 	.word	0x0000b99d
    73bc:	20000ed0 	.word	0x20000ed0

000073c0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    73c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73c4:	4604      	mov	r4, r0
    73c6:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    73c8:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    73cc:	f04f 0320 	mov.w	r3, #32
    73d0:	f3ef 8711 	mrs	r7, BASEPRI
    73d4:	f383 8812 	msr	BASEPRI_MAX, r3
    73d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73dc:	4628      	mov	r0, r5
    73de:	f000 f98f 	bl	7700 <z_spin_lock_valid>
    73e2:	b968      	cbnz	r0, 7400 <k_mem_slab_free+0x40>
    73e4:	4a22      	ldr	r2, [pc, #136]	; (7470 <k_mem_slab_free+0xb0>)
    73e6:	4923      	ldr	r1, [pc, #140]	; (7474 <k_mem_slab_free+0xb4>)
    73e8:	4823      	ldr	r0, [pc, #140]	; (7478 <k_mem_slab_free+0xb8>)
    73ea:	238e      	movs	r3, #142	; 0x8e
    73ec:	f002 feea 	bl	a1c4 <assert_print>
    73f0:	4822      	ldr	r0, [pc, #136]	; (747c <k_mem_slab_free+0xbc>)
    73f2:	4629      	mov	r1, r5
    73f4:	f002 fee6 	bl	a1c4 <assert_print>
    73f8:	481d      	ldr	r0, [pc, #116]	; (7470 <k_mem_slab_free+0xb0>)
    73fa:	218e      	movs	r1, #142	; 0x8e
    73fc:	f002 fedb 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7400:	4628      	mov	r0, r5
    7402:	f000 f99b 	bl	773c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7406:	f8d4 8018 	ldr.w	r8, [r4, #24]
    740a:	f1b8 0f00 	cmp.w	r8, #0
    740e:	d10f      	bne.n	7430 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7410:	4620      	mov	r0, r4
    7412:	f001 fb07 	bl	8a24 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7416:	b158      	cbz	r0, 7430 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7418:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    741a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    741c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7420:	f000 fd4a 	bl	7eb8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7424:	4639      	mov	r1, r7
    7426:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    742c:	f000 bdd4 	b.w	7fd8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7430:	6833      	ldr	r3, [r6, #0]
    7432:	69a2      	ldr	r2, [r4, #24]
    7434:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7436:	6833      	ldr	r3, [r6, #0]
    7438:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    743a:	69e3      	ldr	r3, [r4, #28]
    743c:	3b01      	subs	r3, #1
    743e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7440:	4628      	mov	r0, r5
    7442:	f000 f96b 	bl	771c <z_spin_unlock_valid>
    7446:	b968      	cbnz	r0, 7464 <k_mem_slab_free+0xa4>
    7448:	4a09      	ldr	r2, [pc, #36]	; (7470 <k_mem_slab_free+0xb0>)
    744a:	490d      	ldr	r1, [pc, #52]	; (7480 <k_mem_slab_free+0xc0>)
    744c:	480a      	ldr	r0, [pc, #40]	; (7478 <k_mem_slab_free+0xb8>)
    744e:	23b9      	movs	r3, #185	; 0xb9
    7450:	f002 feb8 	bl	a1c4 <assert_print>
    7454:	480b      	ldr	r0, [pc, #44]	; (7484 <k_mem_slab_free+0xc4>)
    7456:	4629      	mov	r1, r5
    7458:	f002 feb4 	bl	a1c4 <assert_print>
    745c:	4804      	ldr	r0, [pc, #16]	; (7470 <k_mem_slab_free+0xb0>)
    745e:	21b9      	movs	r1, #185	; 0xb9
    7460:	f002 fea9 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7464:	f387 8811 	msr	BASEPRI, r7
    7468:	f3bf 8f6f 	isb	sy
}
    746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7470:	0000b959 	.word	0x0000b959
    7474:	0000b9b2 	.word	0x0000b9b2
    7478:	0000b80f 	.word	0x0000b80f
    747c:	0000b9c7 	.word	0x0000b9c7
    7480:	0000b986 	.word	0x0000b986
    7484:	0000b99d 	.word	0x0000b99d

00007488 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    748c:	b085      	sub	sp, #20
    748e:	4604      	mov	r4, r0
    7490:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    7494:	f1b8 0f0f 	cmp.w	r8, #15
{
    7498:	460f      	mov	r7, r1
    749a:	4615      	mov	r5, r2
    749c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    749e:	d132      	bne.n	7506 <z_setup_new_thread+0x7e>
    74a0:	4b25      	ldr	r3, [pc, #148]	; (7538 <z_setup_new_thread+0xb0>)
    74a2:	4599      	cmp	r9, r3
    74a4:	d133      	bne.n	750e <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    74a6:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    74aa:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    74ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    74b0:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    74b2:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    74b4:	2304      	movs	r3, #4
    74b6:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    74b8:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    74bc:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    74c0:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    74c4:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    74c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    74c8:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    74cc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    74d0:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    74d2:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    74d4:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    74d6:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    74da:	9302      	str	r3, [sp, #8]
    74dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    74de:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    74e0:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    74e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    74e4:	9300      	str	r3, [sp, #0]
    74e6:	4642      	mov	r2, r8
    74e8:	464b      	mov	r3, r9
    74ea:	4639      	mov	r1, r7
    74ec:	4620      	mov	r0, r4
    74ee:	f7fc fc7d 	bl	3dec <arch_new_thread>
	if (!_current) {
    74f2:	4b12      	ldr	r3, [pc, #72]	; (753c <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    74f4:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    74f6:	689b      	ldr	r3, [r3, #8]
    74f8:	b103      	cbz	r3, 74fc <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    74fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    74fc:	6723      	str	r3, [r4, #112]	; 0x70
}
    74fe:	4640      	mov	r0, r8
    7500:	b005      	add	sp, #20
    7502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7506:	f108 0310 	add.w	r3, r8, #16
    750a:	2b1e      	cmp	r3, #30
    750c:	d9cb      	bls.n	74a6 <z_setup_new_thread+0x1e>
    750e:	4a0c      	ldr	r2, [pc, #48]	; (7540 <z_setup_new_thread+0xb8>)
    7510:	490c      	ldr	r1, [pc, #48]	; (7544 <z_setup_new_thread+0xbc>)
    7512:	480d      	ldr	r0, [pc, #52]	; (7548 <z_setup_new_thread+0xc0>)
    7514:	f240 13ff 	movw	r3, #511	; 0x1ff
    7518:	f002 fe54 	bl	a1c4 <assert_print>
    751c:	4641      	mov	r1, r8
    751e:	480b      	ldr	r0, [pc, #44]	; (754c <z_setup_new_thread+0xc4>)
    7520:	f06f 030f 	mvn.w	r3, #15
    7524:	220e      	movs	r2, #14
    7526:	f002 fe4d 	bl	a1c4 <assert_print>
    752a:	4805      	ldr	r0, [pc, #20]	; (7540 <z_setup_new_thread+0xb8>)
    752c:	f240 11ff 	movw	r1, #511	; 0x1ff
    7530:	f002 fe41 	bl	a1b6 <assert_post_action>
    7534:	e7b7      	b.n	74a6 <z_setup_new_thread+0x1e>
    7536:	bf00      	nop
    7538:	0000774d 	.word	0x0000774d
    753c:	20000ed0 	.word	0x20000ed0
    7540:	0000cc41 	.word	0x0000cc41
    7544:	0000cc64 	.word	0x0000cc64
    7548:	0000b80f 	.word	0x0000b80f
    754c:	0000cce4 	.word	0x0000cce4

00007550 <z_impl_k_thread_create>:
{
    7550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7554:	b087      	sub	sp, #28
    7556:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    755a:	4604      	mov	r4, r0
    755c:	460f      	mov	r7, r1
    755e:	4690      	mov	r8, r2
    7560:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7562:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7566:	b173      	cbz	r3, 7586 <z_impl_k_thread_create+0x36>
    7568:	491c      	ldr	r1, [pc, #112]	; (75dc <z_impl_k_thread_create+0x8c>)
    756a:	4a1d      	ldr	r2, [pc, #116]	; (75e0 <z_impl_k_thread_create+0x90>)
    756c:	481d      	ldr	r0, [pc, #116]	; (75e4 <z_impl_k_thread_create+0x94>)
    756e:	f240 236e 	movw	r3, #622	; 0x26e
    7572:	f002 fe27 	bl	a1c4 <assert_print>
    7576:	481c      	ldr	r0, [pc, #112]	; (75e8 <z_impl_k_thread_create+0x98>)
    7578:	f002 fe24 	bl	a1c4 <assert_print>
    757c:	4818      	ldr	r0, [pc, #96]	; (75e0 <z_impl_k_thread_create+0x90>)
    757e:	f240 216e 	movw	r1, #622	; 0x26e
    7582:	f002 fe18 	bl	a1b6 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7586:	2300      	movs	r3, #0
    7588:	9305      	str	r3, [sp, #20]
    758a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    758c:	9304      	str	r3, [sp, #16]
    758e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7590:	9303      	str	r3, [sp, #12]
    7592:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7594:	9302      	str	r3, [sp, #8]
    7596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7598:	9301      	str	r3, [sp, #4]
    759a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    759c:	9300      	str	r3, [sp, #0]
    759e:	4642      	mov	r2, r8
    75a0:	464b      	mov	r3, r9
    75a2:	4639      	mov	r1, r7
    75a4:	4620      	mov	r0, r4
    75a6:	f7ff ff6f 	bl	7488 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    75aa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    75ae:	bf08      	it	eq
    75b0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    75b4:	d005      	beq.n	75c2 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    75b6:	ea55 0306 	orrs.w	r3, r5, r6
    75ba:	d106      	bne.n	75ca <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    75bc:	4620      	mov	r0, r4
    75be:	f000 fd4f 	bl	8060 <z_sched_start>
}
    75c2:	4620      	mov	r0, r4
    75c4:	b007      	add	sp, #28
    75c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    75ca:	4908      	ldr	r1, [pc, #32]	; (75ec <z_impl_k_thread_create+0x9c>)
    75cc:	4632      	mov	r2, r6
    75ce:	462b      	mov	r3, r5
    75d0:	f104 0018 	add.w	r0, r4, #24
    75d4:	f001 fd3c 	bl	9050 <z_add_timeout>
    75d8:	e7f3      	b.n	75c2 <z_impl_k_thread_create+0x72>
    75da:	bf00      	nop
    75dc:	0000cd15 	.word	0x0000cd15
    75e0:	0000cc41 	.word	0x0000cc41
    75e4:	0000b80f 	.word	0x0000b80f
    75e8:	0000cd27 	.word	0x0000cd27
    75ec:	000088d5 	.word	0x000088d5

000075f0 <z_init_static_threads>:
{
    75f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75f4:	4c3b      	ldr	r4, [pc, #236]	; (76e4 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    75f6:	4d3c      	ldr	r5, [pc, #240]	; (76e8 <z_init_static_threads+0xf8>)
    75f8:	4f3c      	ldr	r7, [pc, #240]	; (76ec <z_init_static_threads+0xfc>)
{
    75fa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    75fc:	42ac      	cmp	r4, r5
    75fe:	4626      	mov	r6, r4
    7600:	d90e      	bls.n	7620 <z_init_static_threads+0x30>
    7602:	493b      	ldr	r1, [pc, #236]	; (76f0 <z_init_static_threads+0x100>)
    7604:	483b      	ldr	r0, [pc, #236]	; (76f4 <z_init_static_threads+0x104>)
    7606:	f240 23d5 	movw	r3, #725	; 0x2d5
    760a:	463a      	mov	r2, r7
    760c:	f002 fdda 	bl	a1c4 <assert_print>
    7610:	4839      	ldr	r0, [pc, #228]	; (76f8 <z_init_static_threads+0x108>)
    7612:	f002 fdd7 	bl	a1c4 <assert_print>
    7616:	f240 21d5 	movw	r1, #725	; 0x2d5
    761a:	4638      	mov	r0, r7
    761c:	f002 fdcb 	bl	a1b6 <assert_post_action>
    7620:	42ae      	cmp	r6, r5
    7622:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7626:	d31f      	bcc.n	7668 <z_init_static_threads+0x78>
	k_sched_lock();
    7628:	f000 fd6e 	bl	8108 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    762c:	4c2d      	ldr	r4, [pc, #180]	; (76e4 <z_init_static_threads+0xf4>)
    762e:	4e2f      	ldr	r6, [pc, #188]	; (76ec <z_init_static_threads+0xfc>)
    7630:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 76f0 <z_init_static_threads+0x100>
    7634:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 76f4 <z_init_static_threads+0x104>
    7638:	42ac      	cmp	r4, r5
    763a:	d90e      	bls.n	765a <z_init_static_threads+0x6a>
    763c:	4641      	mov	r1, r8
    763e:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    7642:	4632      	mov	r2, r6
    7644:	4648      	mov	r0, r9
    7646:	f002 fdbd 	bl	a1c4 <assert_print>
    764a:	482b      	ldr	r0, [pc, #172]	; (76f8 <z_init_static_threads+0x108>)
    764c:	f002 fdba 	bl	a1c4 <assert_print>
    7650:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7654:	4630      	mov	r0, r6
    7656:	f002 fdae 	bl	a1b6 <assert_post_action>
    765a:	42ac      	cmp	r4, r5
    765c:	d320      	bcc.n	76a0 <z_init_static_threads+0xb0>
}
    765e:	b007      	add	sp, #28
    7660:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7664:	f000 bdc4 	b.w	81f0 <k_sched_unlock>
		z_setup_new_thread(
    7668:	f854 3c04 	ldr.w	r3, [r4, #-4]
    766c:	9305      	str	r3, [sp, #20]
    766e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7672:	9304      	str	r3, [sp, #16]
    7674:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7678:	9303      	str	r3, [sp, #12]
    767a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    767e:	9302      	str	r3, [sp, #8]
    7680:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7684:	9301      	str	r3, [sp, #4]
    7686:	f854 3c20 	ldr.w	r3, [r4, #-32]
    768a:	9300      	str	r3, [sp, #0]
    768c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7690:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7694:	f7ff fef8 	bl	7488 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7698:	f854 3c30 	ldr.w	r3, [r4, #-48]
    769c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    769e:	e7ad      	b.n	75fc <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    76a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    76a2:	1c5a      	adds	r2, r3, #1
    76a4:	d00f      	beq.n	76c6 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    76a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    76aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    76ae:	f240 30e7 	movw	r0, #999	; 0x3e7
    76b2:	2100      	movs	r1, #0
    76b4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    76b8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    76bc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    76be:	d104      	bne.n	76ca <z_init_static_threads+0xda>
	z_sched_start(thread);
    76c0:	4638      	mov	r0, r7
    76c2:	f000 fccd 	bl	8060 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    76c6:	3430      	adds	r4, #48	; 0x30
    76c8:	e7b6      	b.n	7638 <z_init_static_threads+0x48>
    76ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    76ce:	2300      	movs	r3, #0
    76d0:	f7f9 fa62 	bl	b98 <__aeabi_uldivmod>
    76d4:	4602      	mov	r2, r0
    76d6:	460b      	mov	r3, r1
    76d8:	f107 0018 	add.w	r0, r7, #24
    76dc:	4907      	ldr	r1, [pc, #28]	; (76fc <z_init_static_threads+0x10c>)
    76de:	f001 fcb7 	bl	9050 <z_add_timeout>
    76e2:	e7f0      	b.n	76c6 <z_init_static_threads+0xd6>
    76e4:	200001c0 	.word	0x200001c0
    76e8:	200001c0 	.word	0x200001c0
    76ec:	0000cc41 	.word	0x0000cc41
    76f0:	0000cd4c 	.word	0x0000cd4c
    76f4:	0000b80f 	.word	0x0000b80f
    76f8:	0000cc22 	.word	0x0000cc22
    76fc:	000088d5 	.word	0x000088d5

00007700 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7700:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7702:	b138      	cbz	r0, 7714 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7704:	4b04      	ldr	r3, [pc, #16]	; (7718 <z_spin_lock_valid+0x18>)
    7706:	7d1b      	ldrb	r3, [r3, #20]
    7708:	f000 0003 	and.w	r0, r0, #3
    770c:	1ac0      	subs	r0, r0, r3
    770e:	bf18      	it	ne
    7710:	2001      	movne	r0, #1
    7712:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7714:	2001      	movs	r0, #1
}
    7716:	4770      	bx	lr
    7718:	20000ed0 	.word	0x20000ed0

0000771c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    771c:	4a06      	ldr	r2, [pc, #24]	; (7738 <z_spin_unlock_valid+0x1c>)
    771e:	7d11      	ldrb	r1, [r2, #20]
    7720:	6892      	ldr	r2, [r2, #8]
    7722:	430a      	orrs	r2, r1
    7724:	6801      	ldr	r1, [r0, #0]
{
    7726:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7728:	4291      	cmp	r1, r2
    772a:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    772e:	bf04      	itt	eq
    7730:	6018      	streq	r0, [r3, #0]
	return true;
    7732:	2001      	moveq	r0, #1
}
    7734:	4770      	bx	lr
    7736:	bf00      	nop
    7738:	20000ed0 	.word	0x20000ed0

0000773c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    773c:	4b02      	ldr	r3, [pc, #8]	; (7748 <z_spin_lock_set_owner+0xc>)
    773e:	7d1a      	ldrb	r2, [r3, #20]
    7740:	689b      	ldr	r3, [r3, #8]
    7742:	4313      	orrs	r3, r2
    7744:	6003      	str	r3, [r0, #0]
}
    7746:	4770      	bx	lr
    7748:	20000ed0 	.word	0x20000ed0

0000774c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    774c:	4c13      	ldr	r4, [pc, #76]	; (779c <idle+0x50>)
{
    774e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7750:	68a3      	ldr	r3, [r4, #8]
    7752:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7756:	2b00      	cmp	r3, #0
    7758:	da09      	bge.n	776e <idle+0x22>
    775a:	4911      	ldr	r1, [pc, #68]	; (77a0 <idle+0x54>)
    775c:	4811      	ldr	r0, [pc, #68]	; (77a4 <idle+0x58>)
    775e:	4a12      	ldr	r2, [pc, #72]	; (77a8 <idle+0x5c>)
    7760:	2327      	movs	r3, #39	; 0x27
    7762:	f002 fd2f 	bl	a1c4 <assert_print>
    7766:	4810      	ldr	r0, [pc, #64]	; (77a8 <idle+0x5c>)
    7768:	2127      	movs	r1, #39	; 0x27
    776a:	f002 fd24 	bl	a1b6 <assert_post_action>
	return !z_sys_post_kernel;
    776e:	4d0f      	ldr	r5, [pc, #60]	; (77ac <idle+0x60>)
	__asm__ volatile(
    7770:	f04f 0220 	mov.w	r2, #32
    7774:	f3ef 8311 	mrs	r3, BASEPRI
    7778:	f382 8812 	msr	BASEPRI_MAX, r2
    777c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7780:	f001 fd7e 	bl	9280 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7784:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7786:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7788:	b913      	cbnz	r3, 7790 <idle+0x44>
	arch_cpu_idle();
    778a:	f7fc fa03 	bl	3b94 <arch_cpu_idle>
}
    778e:	e7ef      	b.n	7770 <idle+0x24>
    7790:	f7fc f85c 	bl	384c <pm_system_suspend>
    7794:	2800      	cmp	r0, #0
    7796:	d1eb      	bne.n	7770 <idle+0x24>
    7798:	e7f7      	b.n	778a <idle+0x3e>
    779a:	bf00      	nop
    779c:	20000ed0 	.word	0x20000ed0
    77a0:	0000cd9a 	.word	0x0000cd9a
    77a4:	0000b80f 	.word	0x0000b80f
    77a8:	0000cd79 	.word	0x0000cd79
    77ac:	2000950c 	.word	0x2000950c

000077b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    77b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    77b4:	4604      	mov	r4, r0
    77b6:	4617      	mov	r7, r2
    77b8:	461e      	mov	r6, r3
    77ba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    77be:	b163      	cbz	r3, 77da <z_impl_k_mutex_lock+0x2a>
    77c0:	496d      	ldr	r1, [pc, #436]	; (7978 <z_impl_k_mutex_lock+0x1c8>)
    77c2:	4a6e      	ldr	r2, [pc, #440]	; (797c <z_impl_k_mutex_lock+0x1cc>)
    77c4:	486e      	ldr	r0, [pc, #440]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    77c6:	2365      	movs	r3, #101	; 0x65
    77c8:	f002 fcfc 	bl	a1c4 <assert_print>
    77cc:	486d      	ldr	r0, [pc, #436]	; (7984 <z_impl_k_mutex_lock+0x1d4>)
    77ce:	f002 fcf9 	bl	a1c4 <assert_print>
    77d2:	486a      	ldr	r0, [pc, #424]	; (797c <z_impl_k_mutex_lock+0x1cc>)
    77d4:	2165      	movs	r1, #101	; 0x65
    77d6:	f002 fcee 	bl	a1b6 <assert_post_action>
    77da:	f04f 0320 	mov.w	r3, #32
    77de:	f3ef 8811 	mrs	r8, BASEPRI
    77e2:	f383 8812 	msr	BASEPRI_MAX, r3
    77e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77ea:	4867      	ldr	r0, [pc, #412]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    77ec:	f7ff ff88 	bl	7700 <z_spin_lock_valid>
    77f0:	b968      	cbnz	r0, 780e <z_impl_k_mutex_lock+0x5e>
    77f2:	4a66      	ldr	r2, [pc, #408]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    77f4:	4966      	ldr	r1, [pc, #408]	; (7990 <z_impl_k_mutex_lock+0x1e0>)
    77f6:	4862      	ldr	r0, [pc, #392]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    77f8:	238e      	movs	r3, #142	; 0x8e
    77fa:	f002 fce3 	bl	a1c4 <assert_print>
    77fe:	4962      	ldr	r1, [pc, #392]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    7800:	4864      	ldr	r0, [pc, #400]	; (7994 <z_impl_k_mutex_lock+0x1e4>)
    7802:	f002 fcdf 	bl	a1c4 <assert_print>
    7806:	4861      	ldr	r0, [pc, #388]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7808:	218e      	movs	r1, #142	; 0x8e
    780a:	f002 fcd4 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    780e:	485e      	ldr	r0, [pc, #376]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    7810:	f7ff ff94 	bl	773c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7814:	68e3      	ldr	r3, [r4, #12]
    7816:	4a60      	ldr	r2, [pc, #384]	; (7998 <z_impl_k_mutex_lock+0x1e8>)
    7818:	b30b      	cbz	r3, 785e <z_impl_k_mutex_lock+0xae>
    781a:	68a0      	ldr	r0, [r4, #8]
    781c:	6891      	ldr	r1, [r2, #8]
    781e:	4288      	cmp	r0, r1
    7820:	d03d      	beq.n	789e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7822:	ea57 0306 	orrs.w	r3, r7, r6
    7826:	d13c      	bne.n	78a2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7828:	4857      	ldr	r0, [pc, #348]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    782a:	f7ff ff77 	bl	771c <z_spin_unlock_valid>
    782e:	b968      	cbnz	r0, 784c <z_impl_k_mutex_lock+0x9c>
    7830:	4a56      	ldr	r2, [pc, #344]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7832:	495a      	ldr	r1, [pc, #360]	; (799c <z_impl_k_mutex_lock+0x1ec>)
    7834:	4852      	ldr	r0, [pc, #328]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    7836:	23b9      	movs	r3, #185	; 0xb9
    7838:	f002 fcc4 	bl	a1c4 <assert_print>
    783c:	4952      	ldr	r1, [pc, #328]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    783e:	4858      	ldr	r0, [pc, #352]	; (79a0 <z_impl_k_mutex_lock+0x1f0>)
    7840:	f002 fcc0 	bl	a1c4 <assert_print>
    7844:	4851      	ldr	r0, [pc, #324]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7846:	21b9      	movs	r1, #185	; 0xb9
    7848:	f002 fcb5 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    784c:	f388 8811 	msr	BASEPRI, r8
    7850:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7854:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7858:	b002      	add	sp, #8
    785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    785e:	6891      	ldr	r1, [r2, #8]
    7860:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7864:	4848      	ldr	r0, [pc, #288]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7866:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7868:	3301      	adds	r3, #1
    786a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    786c:	6893      	ldr	r3, [r2, #8]
    786e:	60a3      	str	r3, [r4, #8]
    7870:	f7ff ff54 	bl	771c <z_spin_unlock_valid>
    7874:	b968      	cbnz	r0, 7892 <z_impl_k_mutex_lock+0xe2>
    7876:	4a45      	ldr	r2, [pc, #276]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7878:	4948      	ldr	r1, [pc, #288]	; (799c <z_impl_k_mutex_lock+0x1ec>)
    787a:	4841      	ldr	r0, [pc, #260]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    787c:	23b9      	movs	r3, #185	; 0xb9
    787e:	f002 fca1 	bl	a1c4 <assert_print>
    7882:	4941      	ldr	r1, [pc, #260]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    7884:	4846      	ldr	r0, [pc, #280]	; (79a0 <z_impl_k_mutex_lock+0x1f0>)
    7886:	f002 fc9d 	bl	a1c4 <assert_print>
    788a:	4840      	ldr	r0, [pc, #256]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    788c:	21b9      	movs	r1, #185	; 0xb9
    788e:	f002 fc92 	bl	a1b6 <assert_post_action>
    7892:	f388 8811 	msr	BASEPRI, r8
    7896:	f3bf 8f6f 	isb	sy
		return 0;
    789a:	2000      	movs	r0, #0
    789c:	e7dc      	b.n	7858 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    789e:	6921      	ldr	r1, [r4, #16]
    78a0:	e7e0      	b.n	7864 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    78a2:	f991 100e 	ldrsb.w	r1, [r1, #14]
    78a6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    78aa:	4299      	cmp	r1, r3
    78ac:	bfa8      	it	ge
    78ae:	4619      	movge	r1, r3
    78b0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    78b4:	4291      	cmp	r1, r2
    78b6:	bfb8      	it	lt
    78b8:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    78ba:	4299      	cmp	r1, r3
    78bc:	da53      	bge.n	7966 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    78be:	f003 f9a8 	bl	ac12 <adjust_owner_prio.isra.0>
    78c2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    78c4:	e9cd 7600 	strd	r7, r6, [sp]
    78c8:	482f      	ldr	r0, [pc, #188]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    78ca:	4622      	mov	r2, r4
    78cc:	4641      	mov	r1, r8
    78ce:	f000 feaf 	bl	8630 <z_pend_curr>
	if (got_mutex == 0) {
    78d2:	2800      	cmp	r0, #0
    78d4:	d0e1      	beq.n	789a <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    78d6:	f04f 0320 	mov.w	r3, #32
    78da:	f3ef 8611 	mrs	r6, BASEPRI
    78de:	f383 8812 	msr	BASEPRI_MAX, r3
    78e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78e6:	4828      	ldr	r0, [pc, #160]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    78e8:	f7ff ff0a 	bl	7700 <z_spin_lock_valid>
    78ec:	b968      	cbnz	r0, 790a <z_impl_k_mutex_lock+0x15a>
    78ee:	4a27      	ldr	r2, [pc, #156]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    78f0:	4927      	ldr	r1, [pc, #156]	; (7990 <z_impl_k_mutex_lock+0x1e0>)
    78f2:	4823      	ldr	r0, [pc, #140]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    78f4:	238e      	movs	r3, #142	; 0x8e
    78f6:	f002 fc65 	bl	a1c4 <assert_print>
    78fa:	4923      	ldr	r1, [pc, #140]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    78fc:	4825      	ldr	r0, [pc, #148]	; (7994 <z_impl_k_mutex_lock+0x1e4>)
    78fe:	f002 fc61 	bl	a1c4 <assert_print>
    7902:	4822      	ldr	r0, [pc, #136]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7904:	218e      	movs	r1, #142	; 0x8e
    7906:	f002 fc56 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    790a:	481f      	ldr	r0, [pc, #124]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    790c:	f7ff ff16 	bl	773c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7910:	6823      	ldr	r3, [r4, #0]
    7912:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7914:	42a3      	cmp	r3, r4
    7916:	d00a      	beq.n	792e <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7918:	b14b      	cbz	r3, 792e <z_impl_k_mutex_lock+0x17e>
    791a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    791e:	4299      	cmp	r1, r3
    7920:	bfa8      	it	ge
    7922:	4619      	movge	r1, r3
    7924:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7928:	4299      	cmp	r1, r3
    792a:	bfb8      	it	lt
    792c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    792e:	68a0      	ldr	r0, [r4, #8]
    7930:	f003 f96f 	bl	ac12 <adjust_owner_prio.isra.0>
    7934:	b9c8      	cbnz	r0, 796a <z_impl_k_mutex_lock+0x1ba>
    7936:	b9c5      	cbnz	r5, 796a <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7938:	4813      	ldr	r0, [pc, #76]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    793a:	f7ff feef 	bl	771c <z_spin_unlock_valid>
    793e:	b968      	cbnz	r0, 795c <z_impl_k_mutex_lock+0x1ac>
    7940:	4a12      	ldr	r2, [pc, #72]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7942:	4916      	ldr	r1, [pc, #88]	; (799c <z_impl_k_mutex_lock+0x1ec>)
    7944:	480e      	ldr	r0, [pc, #56]	; (7980 <z_impl_k_mutex_lock+0x1d0>)
    7946:	23b9      	movs	r3, #185	; 0xb9
    7948:	f002 fc3c 	bl	a1c4 <assert_print>
    794c:	490e      	ldr	r1, [pc, #56]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    794e:	4814      	ldr	r0, [pc, #80]	; (79a0 <z_impl_k_mutex_lock+0x1f0>)
    7950:	f002 fc38 	bl	a1c4 <assert_print>
    7954:	480d      	ldr	r0, [pc, #52]	; (798c <z_impl_k_mutex_lock+0x1dc>)
    7956:	21b9      	movs	r1, #185	; 0xb9
    7958:	f002 fc2d 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    795c:	f386 8811 	msr	BASEPRI, r6
    7960:	f3bf 8f6f 	isb	sy
    7964:	e005      	b.n	7972 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    7966:	2500      	movs	r5, #0
    7968:	e7ac      	b.n	78c4 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    796a:	4807      	ldr	r0, [pc, #28]	; (7988 <z_impl_k_mutex_lock+0x1d8>)
    796c:	4631      	mov	r1, r6
    796e:	f000 fb33 	bl	7fd8 <z_reschedule>
	return -EAGAIN;
    7972:	f06f 000a 	mvn.w	r0, #10
    7976:	e76f      	b.n	7858 <z_impl_k_mutex_lock+0xa8>
    7978:	0000cd15 	.word	0x0000cd15
    797c:	0000cdc2 	.word	0x0000cdc2
    7980:	0000b80f 	.word	0x0000b80f
    7984:	0000cde4 	.word	0x0000cde4
    7988:	20000ef8 	.word	0x20000ef8
    798c:	0000b959 	.word	0x0000b959
    7990:	0000b9b2 	.word	0x0000b9b2
    7994:	0000b9c7 	.word	0x0000b9c7
    7998:	20000ed0 	.word	0x20000ed0
    799c:	0000b986 	.word	0x0000b986
    79a0:	0000b99d 	.word	0x0000b99d

000079a4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    79a4:	b538      	push	{r3, r4, r5, lr}
    79a6:	4604      	mov	r4, r0
    79a8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    79ac:	b163      	cbz	r3, 79c8 <z_impl_k_mutex_unlock+0x24>
    79ae:	4950      	ldr	r1, [pc, #320]	; (7af0 <z_impl_k_mutex_unlock+0x14c>)
    79b0:	4a50      	ldr	r2, [pc, #320]	; (7af4 <z_impl_k_mutex_unlock+0x150>)
    79b2:	4851      	ldr	r0, [pc, #324]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    79b4:	23c7      	movs	r3, #199	; 0xc7
    79b6:	f002 fc05 	bl	a1c4 <assert_print>
    79ba:	4850      	ldr	r0, [pc, #320]	; (7afc <z_impl_k_mutex_unlock+0x158>)
    79bc:	f002 fc02 	bl	a1c4 <assert_print>
    79c0:	484c      	ldr	r0, [pc, #304]	; (7af4 <z_impl_k_mutex_unlock+0x150>)
    79c2:	21c7      	movs	r1, #199	; 0xc7
    79c4:	f002 fbf7 	bl	a1b6 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    79c8:	68a3      	ldr	r3, [r4, #8]
    79ca:	2b00      	cmp	r3, #0
    79cc:	f000 8089 	beq.w	7ae2 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    79d0:	4d4b      	ldr	r5, [pc, #300]	; (7b00 <z_impl_k_mutex_unlock+0x15c>)
    79d2:	68aa      	ldr	r2, [r5, #8]
    79d4:	4293      	cmp	r3, r2
    79d6:	f040 8087 	bne.w	7ae8 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    79da:	68e3      	ldr	r3, [r4, #12]
    79dc:	b94b      	cbnz	r3, 79f2 <z_impl_k_mutex_unlock+0x4e>
    79de:	4949      	ldr	r1, [pc, #292]	; (7b04 <z_impl_k_mutex_unlock+0x160>)
    79e0:	4845      	ldr	r0, [pc, #276]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    79e2:	4a44      	ldr	r2, [pc, #272]	; (7af4 <z_impl_k_mutex_unlock+0x150>)
    79e4:	23df      	movs	r3, #223	; 0xdf
    79e6:	f002 fbed 	bl	a1c4 <assert_print>
    79ea:	4842      	ldr	r0, [pc, #264]	; (7af4 <z_impl_k_mutex_unlock+0x150>)
    79ec:	21df      	movs	r1, #223	; 0xdf
    79ee:	f002 fbe2 	bl	a1b6 <assert_post_action>
    79f2:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    79f6:	b163      	cbz	r3, 7a12 <z_impl_k_mutex_unlock+0x6e>
    79f8:	493d      	ldr	r1, [pc, #244]	; (7af0 <z_impl_k_mutex_unlock+0x14c>)
    79fa:	4a43      	ldr	r2, [pc, #268]	; (7b08 <z_impl_k_mutex_unlock+0x164>)
    79fc:	483e      	ldr	r0, [pc, #248]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    79fe:	23fd      	movs	r3, #253	; 0xfd
    7a00:	f002 fbe0 	bl	a1c4 <assert_print>
    7a04:	4841      	ldr	r0, [pc, #260]	; (7b0c <z_impl_k_mutex_unlock+0x168>)
    7a06:	f002 fbdd 	bl	a1c4 <assert_print>
    7a0a:	483f      	ldr	r0, [pc, #252]	; (7b08 <z_impl_k_mutex_unlock+0x164>)
    7a0c:	21fd      	movs	r1, #253	; 0xfd
    7a0e:	f002 fbd2 	bl	a1b6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7a12:	68ab      	ldr	r3, [r5, #8]
    7a14:	7bdb      	ldrb	r3, [r3, #15]
    7a16:	2b01      	cmp	r3, #1
    7a18:	d10c      	bne.n	7a34 <z_impl_k_mutex_unlock+0x90>
    7a1a:	493d      	ldr	r1, [pc, #244]	; (7b10 <z_impl_k_mutex_unlock+0x16c>)
    7a1c:	4a3a      	ldr	r2, [pc, #232]	; (7b08 <z_impl_k_mutex_unlock+0x164>)
    7a1e:	4836      	ldr	r0, [pc, #216]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    7a20:	23fe      	movs	r3, #254	; 0xfe
    7a22:	f002 fbcf 	bl	a1c4 <assert_print>
    7a26:	4839      	ldr	r0, [pc, #228]	; (7b0c <z_impl_k_mutex_unlock+0x168>)
    7a28:	f002 fbcc 	bl	a1c4 <assert_print>
    7a2c:	4836      	ldr	r0, [pc, #216]	; (7b08 <z_impl_k_mutex_unlock+0x164>)
    7a2e:	21fe      	movs	r1, #254	; 0xfe
    7a30:	f002 fbc1 	bl	a1b6 <assert_post_action>

	--_current->base.sched_locked;
    7a34:	68aa      	ldr	r2, [r5, #8]
    7a36:	7bd3      	ldrb	r3, [r2, #15]
    7a38:	3b01      	subs	r3, #1
    7a3a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7a3c:	68e3      	ldr	r3, [r4, #12]
    7a3e:	2b01      	cmp	r3, #1
    7a40:	d905      	bls.n	7a4e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    7a42:	3b01      	subs	r3, #1
    7a44:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7a46:	f000 fbd3 	bl	81f0 <k_sched_unlock>

	return 0;
    7a4a:	2000      	movs	r0, #0
}
    7a4c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7a4e:	f04f 0320 	mov.w	r3, #32
    7a52:	f3ef 8511 	mrs	r5, BASEPRI
    7a56:	f383 8812 	msr	BASEPRI_MAX, r3
    7a5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a5e:	482d      	ldr	r0, [pc, #180]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7a60:	f7ff fe4e 	bl	7700 <z_spin_lock_valid>
    7a64:	b968      	cbnz	r0, 7a82 <z_impl_k_mutex_unlock+0xde>
    7a66:	4a2c      	ldr	r2, [pc, #176]	; (7b18 <z_impl_k_mutex_unlock+0x174>)
    7a68:	492c      	ldr	r1, [pc, #176]	; (7b1c <z_impl_k_mutex_unlock+0x178>)
    7a6a:	4823      	ldr	r0, [pc, #140]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    7a6c:	238e      	movs	r3, #142	; 0x8e
    7a6e:	f002 fba9 	bl	a1c4 <assert_print>
    7a72:	4928      	ldr	r1, [pc, #160]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7a74:	482a      	ldr	r0, [pc, #168]	; (7b20 <z_impl_k_mutex_unlock+0x17c>)
    7a76:	f002 fba5 	bl	a1c4 <assert_print>
    7a7a:	4827      	ldr	r0, [pc, #156]	; (7b18 <z_impl_k_mutex_unlock+0x174>)
    7a7c:	218e      	movs	r1, #142	; 0x8e
    7a7e:	f002 fb9a 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a82:	4824      	ldr	r0, [pc, #144]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7a84:	f7ff fe5a 	bl	773c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7a88:	6921      	ldr	r1, [r4, #16]
    7a8a:	68a0      	ldr	r0, [r4, #8]
    7a8c:	f003 f8c1 	bl	ac12 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7a90:	4620      	mov	r0, r4
    7a92:	f000 ffc7 	bl	8a24 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7a96:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7a98:	b158      	cbz	r0, 7ab2 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    7a9a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7a9e:	6122      	str	r2, [r4, #16]
    7aa0:	2200      	movs	r2, #0
    7aa2:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7aa4:	f000 fa08 	bl	7eb8 <z_ready_thread>
		z_reschedule(&lock, key);
    7aa8:	481a      	ldr	r0, [pc, #104]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7aaa:	4629      	mov	r1, r5
    7aac:	f000 fa94 	bl	7fd8 <z_reschedule>
    7ab0:	e7c9      	b.n	7a46 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    7ab2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ab4:	4817      	ldr	r0, [pc, #92]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7ab6:	f7ff fe31 	bl	771c <z_spin_unlock_valid>
    7aba:	b968      	cbnz	r0, 7ad8 <z_impl_k_mutex_unlock+0x134>
    7abc:	4a16      	ldr	r2, [pc, #88]	; (7b18 <z_impl_k_mutex_unlock+0x174>)
    7abe:	4919      	ldr	r1, [pc, #100]	; (7b24 <z_impl_k_mutex_unlock+0x180>)
    7ac0:	480d      	ldr	r0, [pc, #52]	; (7af8 <z_impl_k_mutex_unlock+0x154>)
    7ac2:	23b9      	movs	r3, #185	; 0xb9
    7ac4:	f002 fb7e 	bl	a1c4 <assert_print>
    7ac8:	4912      	ldr	r1, [pc, #72]	; (7b14 <z_impl_k_mutex_unlock+0x170>)
    7aca:	4817      	ldr	r0, [pc, #92]	; (7b28 <z_impl_k_mutex_unlock+0x184>)
    7acc:	f002 fb7a 	bl	a1c4 <assert_print>
    7ad0:	4811      	ldr	r0, [pc, #68]	; (7b18 <z_impl_k_mutex_unlock+0x174>)
    7ad2:	21b9      	movs	r1, #185	; 0xb9
    7ad4:	f002 fb6f 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7ad8:	f385 8811 	msr	BASEPRI, r5
    7adc:	f3bf 8f6f 	isb	sy
    7ae0:	e7b1      	b.n	7a46 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    7ae2:	f06f 0015 	mvn.w	r0, #21
    7ae6:	e7b1      	b.n	7a4c <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    7ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7aec:	e7ae      	b.n	7a4c <z_impl_k_mutex_unlock+0xa8>
    7aee:	bf00      	nop
    7af0:	0000cd15 	.word	0x0000cd15
    7af4:	0000cdc2 	.word	0x0000cdc2
    7af8:	0000b80f 	.word	0x0000b80f
    7afc:	0000cde4 	.word	0x0000cde4
    7b00:	20000ed0 	.word	0x20000ed0
    7b04:	0000ce09 	.word	0x0000ce09
    7b08:	0000ce20 	.word	0x0000ce20
    7b0c:	0000ce4b 	.word	0x0000ce4b
    7b10:	0000ce4e 	.word	0x0000ce4e
    7b14:	20000ef8 	.word	0x20000ef8
    7b18:	0000b959 	.word	0x0000b959
    7b1c:	0000b9b2 	.word	0x0000b9b2
    7b20:	0000b9c7 	.word	0x0000b9c7
    7b24:	0000b986 	.word	0x0000b986
    7b28:	0000b99d 	.word	0x0000b99d

00007b2c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7b2c:	b538      	push	{r3, r4, r5, lr}
    7b2e:	4604      	mov	r4, r0
	__asm__ volatile(
    7b30:	f04f 0320 	mov.w	r3, #32
    7b34:	f3ef 8511 	mrs	r5, BASEPRI
    7b38:	f383 8812 	msr	BASEPRI_MAX, r3
    7b3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b40:	4814      	ldr	r0, [pc, #80]	; (7b94 <z_impl_k_sem_give+0x68>)
    7b42:	f7ff fddd 	bl	7700 <z_spin_lock_valid>
    7b46:	b968      	cbnz	r0, 7b64 <z_impl_k_sem_give+0x38>
    7b48:	4a13      	ldr	r2, [pc, #76]	; (7b98 <z_impl_k_sem_give+0x6c>)
    7b4a:	4914      	ldr	r1, [pc, #80]	; (7b9c <z_impl_k_sem_give+0x70>)
    7b4c:	4814      	ldr	r0, [pc, #80]	; (7ba0 <z_impl_k_sem_give+0x74>)
    7b4e:	238e      	movs	r3, #142	; 0x8e
    7b50:	f002 fb38 	bl	a1c4 <assert_print>
    7b54:	490f      	ldr	r1, [pc, #60]	; (7b94 <z_impl_k_sem_give+0x68>)
    7b56:	4813      	ldr	r0, [pc, #76]	; (7ba4 <z_impl_k_sem_give+0x78>)
    7b58:	f002 fb34 	bl	a1c4 <assert_print>
    7b5c:	480e      	ldr	r0, [pc, #56]	; (7b98 <z_impl_k_sem_give+0x6c>)
    7b5e:	218e      	movs	r1, #142	; 0x8e
    7b60:	f002 fb29 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b64:	480b      	ldr	r0, [pc, #44]	; (7b94 <z_impl_k_sem_give+0x68>)
    7b66:	f7ff fde9 	bl	773c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7b6a:	4620      	mov	r0, r4
    7b6c:	f000 ff5a 	bl	8a24 <z_unpend_first_thread>

	if (thread != NULL) {
    7b70:	b148      	cbz	r0, 7b86 <z_impl_k_sem_give+0x5a>
    7b72:	2200      	movs	r2, #0
    7b74:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7b76:	f000 f99f 	bl	7eb8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7b7a:	4629      	mov	r1, r5
    7b7c:	4805      	ldr	r0, [pc, #20]	; (7b94 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7b82:	f000 ba29 	b.w	7fd8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7b86:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7b8a:	429a      	cmp	r2, r3
    7b8c:	bf18      	it	ne
    7b8e:	3301      	addne	r3, #1
    7b90:	60a3      	str	r3, [r4, #8]
}
    7b92:	e7f2      	b.n	7b7a <z_impl_k_sem_give+0x4e>
    7b94:	20000efc 	.word	0x20000efc
    7b98:	0000b959 	.word	0x0000b959
    7b9c:	0000b9b2 	.word	0x0000b9b2
    7ba0:	0000b80f 	.word	0x0000b80f
    7ba4:	0000b9c7 	.word	0x0000b9c7

00007ba8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7baa:	4604      	mov	r4, r0
    7bac:	4617      	mov	r7, r2
    7bae:	461d      	mov	r5, r3
    7bb0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7bb4:	b17b      	cbz	r3, 7bd6 <z_impl_k_sem_take+0x2e>
    7bb6:	ea52 0305 	orrs.w	r3, r2, r5
    7bba:	d00c      	beq.n	7bd6 <z_impl_k_sem_take+0x2e>
    7bbc:	4935      	ldr	r1, [pc, #212]	; (7c94 <z_impl_k_sem_take+0xec>)
    7bbe:	4a36      	ldr	r2, [pc, #216]	; (7c98 <z_impl_k_sem_take+0xf0>)
    7bc0:	4836      	ldr	r0, [pc, #216]	; (7c9c <z_impl_k_sem_take+0xf4>)
    7bc2:	2379      	movs	r3, #121	; 0x79
    7bc4:	f002 fafe 	bl	a1c4 <assert_print>
    7bc8:	4835      	ldr	r0, [pc, #212]	; (7ca0 <z_impl_k_sem_take+0xf8>)
    7bca:	f002 fafb 	bl	a1c4 <assert_print>
    7bce:	4832      	ldr	r0, [pc, #200]	; (7c98 <z_impl_k_sem_take+0xf0>)
    7bd0:	2179      	movs	r1, #121	; 0x79
    7bd2:	f002 faf0 	bl	a1b6 <assert_post_action>
    7bd6:	f04f 0320 	mov.w	r3, #32
    7bda:	f3ef 8611 	mrs	r6, BASEPRI
    7bde:	f383 8812 	msr	BASEPRI_MAX, r3
    7be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7be6:	482f      	ldr	r0, [pc, #188]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7be8:	f7ff fd8a 	bl	7700 <z_spin_lock_valid>
    7bec:	b968      	cbnz	r0, 7c0a <z_impl_k_sem_take+0x62>
    7bee:	4a2e      	ldr	r2, [pc, #184]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7bf0:	492e      	ldr	r1, [pc, #184]	; (7cac <z_impl_k_sem_take+0x104>)
    7bf2:	482a      	ldr	r0, [pc, #168]	; (7c9c <z_impl_k_sem_take+0xf4>)
    7bf4:	238e      	movs	r3, #142	; 0x8e
    7bf6:	f002 fae5 	bl	a1c4 <assert_print>
    7bfa:	492a      	ldr	r1, [pc, #168]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7bfc:	482c      	ldr	r0, [pc, #176]	; (7cb0 <z_impl_k_sem_take+0x108>)
    7bfe:	f002 fae1 	bl	a1c4 <assert_print>
    7c02:	4829      	ldr	r0, [pc, #164]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7c04:	218e      	movs	r1, #142	; 0x8e
    7c06:	f002 fad6 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c0a:	4826      	ldr	r0, [pc, #152]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c0c:	f7ff fd96 	bl	773c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7c10:	68a3      	ldr	r3, [r4, #8]
    7c12:	b1d3      	cbz	r3, 7c4a <z_impl_k_sem_take+0xa2>
		sem->count--;
    7c14:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c16:	4823      	ldr	r0, [pc, #140]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c18:	60a3      	str	r3, [r4, #8]
    7c1a:	f7ff fd7f 	bl	771c <z_spin_unlock_valid>
    7c1e:	b968      	cbnz	r0, 7c3c <z_impl_k_sem_take+0x94>
    7c20:	4a21      	ldr	r2, [pc, #132]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7c22:	4924      	ldr	r1, [pc, #144]	; (7cb4 <z_impl_k_sem_take+0x10c>)
    7c24:	481d      	ldr	r0, [pc, #116]	; (7c9c <z_impl_k_sem_take+0xf4>)
    7c26:	23b9      	movs	r3, #185	; 0xb9
    7c28:	f002 facc 	bl	a1c4 <assert_print>
    7c2c:	491d      	ldr	r1, [pc, #116]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c2e:	4822      	ldr	r0, [pc, #136]	; (7cb8 <z_impl_k_sem_take+0x110>)
    7c30:	f002 fac8 	bl	a1c4 <assert_print>
    7c34:	481c      	ldr	r0, [pc, #112]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7c36:	21b9      	movs	r1, #185	; 0xb9
    7c38:	f002 fabd 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7c3c:	f386 8811 	msr	BASEPRI, r6
    7c40:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7c44:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7c46:	b003      	add	sp, #12
    7c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7c4a:	ea57 0305 	orrs.w	r3, r7, r5
    7c4e:	d118      	bne.n	7c82 <z_impl_k_sem_take+0xda>
    7c50:	4814      	ldr	r0, [pc, #80]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c52:	f7ff fd63 	bl	771c <z_spin_unlock_valid>
    7c56:	b968      	cbnz	r0, 7c74 <z_impl_k_sem_take+0xcc>
    7c58:	4a13      	ldr	r2, [pc, #76]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7c5a:	4916      	ldr	r1, [pc, #88]	; (7cb4 <z_impl_k_sem_take+0x10c>)
    7c5c:	480f      	ldr	r0, [pc, #60]	; (7c9c <z_impl_k_sem_take+0xf4>)
    7c5e:	23b9      	movs	r3, #185	; 0xb9
    7c60:	f002 fab0 	bl	a1c4 <assert_print>
    7c64:	490f      	ldr	r1, [pc, #60]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c66:	4814      	ldr	r0, [pc, #80]	; (7cb8 <z_impl_k_sem_take+0x110>)
    7c68:	f002 faac 	bl	a1c4 <assert_print>
    7c6c:	480e      	ldr	r0, [pc, #56]	; (7ca8 <z_impl_k_sem_take+0x100>)
    7c6e:	21b9      	movs	r1, #185	; 0xb9
    7c70:	f002 faa1 	bl	a1b6 <assert_post_action>
    7c74:	f386 8811 	msr	BASEPRI, r6
    7c78:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7c7c:	f06f 000f 	mvn.w	r0, #15
    7c80:	e7e1      	b.n	7c46 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7c82:	e9cd 7500 	strd	r7, r5, [sp]
    7c86:	4622      	mov	r2, r4
    7c88:	4631      	mov	r1, r6
    7c8a:	4806      	ldr	r0, [pc, #24]	; (7ca4 <z_impl_k_sem_take+0xfc>)
    7c8c:	f000 fcd0 	bl	8630 <z_pend_curr>
	return ret;
    7c90:	e7d9      	b.n	7c46 <z_impl_k_sem_take+0x9e>
    7c92:	bf00      	nop
    7c94:	0000ce9f 	.word	0x0000ce9f
    7c98:	0000ce7f 	.word	0x0000ce7f
    7c9c:	0000b80f 	.word	0x0000b80f
    7ca0:	0000ce4b 	.word	0x0000ce4b
    7ca4:	20000efc 	.word	0x20000efc
    7ca8:	0000b959 	.word	0x0000b959
    7cac:	0000b9b2 	.word	0x0000b9b2
    7cb0:	0000b9c7 	.word	0x0000b9c7
    7cb4:	0000b986 	.word	0x0000b986
    7cb8:	0000b99d 	.word	0x0000b99d

00007cbc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    7cbc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    7cbe:	4d07      	ldr	r5, [pc, #28]	; (7cdc <z_reset_time_slice+0x20>)
    7cc0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    7cc2:	b154      	cbz	r4, 7cda <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7cc4:	f7fe f992 	bl	5fec <sys_clock_elapsed>
    7cc8:	4b05      	ldr	r3, [pc, #20]	; (7ce0 <z_reset_time_slice+0x24>)
    7cca:	4404      	add	r4, r0
    7ccc:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7cce:	6828      	ldr	r0, [r5, #0]
    7cd0:	2100      	movs	r1, #0
	}
}
    7cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    7cd6:	f001 bb1b 	b.w	9310 <z_set_timeout_expiry>
}
    7cda:	bd38      	pop	{r3, r4, r5, pc}
    7cdc:	20000f08 	.word	0x20000f08
    7ce0:	20000ed0 	.word	0x20000ed0

00007ce4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7ce4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7ce6:	4d16      	ldr	r5, [pc, #88]	; (7d40 <update_cache+0x5c>)
    7ce8:	462b      	mov	r3, r5
    7cea:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cee:	429c      	cmp	r4, r3
    7cf0:	d000      	beq.n	7cf4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7cf2:	b904      	cbnz	r4, 7cf6 <update_cache+0x12>
    7cf4:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    7cf6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7cf8:	b120      	cbz	r0, 7d04 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7cfa:	68ab      	ldr	r3, [r5, #8]
    7cfc:	42a3      	cmp	r3, r4
    7cfe:	d11b      	bne.n	7d38 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7d00:	4623      	mov	r3, r4
    7d02:	e017      	b.n	7d34 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    7d04:	b963      	cbnz	r3, 7d20 <update_cache+0x3c>
    7d06:	490f      	ldr	r1, [pc, #60]	; (7d44 <update_cache+0x60>)
    7d08:	4a0f      	ldr	r2, [pc, #60]	; (7d48 <update_cache+0x64>)
    7d0a:	4810      	ldr	r0, [pc, #64]	; (7d4c <update_cache+0x68>)
    7d0c:	2389      	movs	r3, #137	; 0x89
    7d0e:	f002 fa59 	bl	a1c4 <assert_print>
    7d12:	480f      	ldr	r0, [pc, #60]	; (7d50 <update_cache+0x6c>)
    7d14:	f002 fa56 	bl	a1c4 <assert_print>
    7d18:	480b      	ldr	r0, [pc, #44]	; (7d48 <update_cache+0x64>)
    7d1a:	2189      	movs	r1, #137	; 0x89
    7d1c:	f002 fa4b 	bl	a1b6 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7d20:	68ab      	ldr	r3, [r5, #8]
    7d22:	7b5a      	ldrb	r2, [r3, #13]
    7d24:	06d2      	lsls	r2, r2, #27
    7d26:	d1e8      	bne.n	7cfa <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7d28:	69a2      	ldr	r2, [r4, #24]
    7d2a:	2a00      	cmp	r2, #0
    7d2c:	d1e5      	bne.n	7cfa <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    7d2e:	89da      	ldrh	r2, [r3, #14]
    7d30:	2a7f      	cmp	r2, #127	; 0x7f
    7d32:	d9e2      	bls.n	7cfa <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    7d34:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7d36:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    7d38:	4620      	mov	r0, r4
    7d3a:	f7ff ffbf 	bl	7cbc <z_reset_time_slice>
    7d3e:	e7df      	b.n	7d00 <update_cache+0x1c>
    7d40:	20000ed0 	.word	0x20000ed0
    7d44:	0000cf0f 	.word	0x0000cf0f
    7d48:	0000ceed 	.word	0x0000ceed
    7d4c:	0000b80f 	.word	0x0000b80f
    7d50:	0000ce4b 	.word	0x0000ce4b

00007d54 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    7d54:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7d56:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7d5a:	7b43      	ldrb	r3, [r0, #13]
    7d5c:	2a00      	cmp	r2, #0
{
    7d5e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7d60:	db38      	blt.n	7dd4 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7d62:	06da      	lsls	r2, r3, #27
    7d64:	d136      	bne.n	7dd4 <ready_thread+0x80>
	return node->next != NULL;
    7d66:	6985      	ldr	r5, [r0, #24]
    7d68:	2d00      	cmp	r5, #0
    7d6a:	d133      	bne.n	7dd4 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    7d6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d70:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7d72:	4b19      	ldr	r3, [pc, #100]	; (7dd8 <ready_thread+0x84>)
    7d74:	4298      	cmp	r0, r3
    7d76:	d109      	bne.n	7d8c <ready_thread+0x38>
    7d78:	4918      	ldr	r1, [pc, #96]	; (7ddc <ready_thread+0x88>)
    7d7a:	4819      	ldr	r0, [pc, #100]	; (7de0 <ready_thread+0x8c>)
    7d7c:	4a19      	ldr	r2, [pc, #100]	; (7de4 <ready_thread+0x90>)
    7d7e:	23ba      	movs	r3, #186	; 0xba
    7d80:	f002 fa20 	bl	a1c4 <assert_print>
    7d84:	4817      	ldr	r0, [pc, #92]	; (7de4 <ready_thread+0x90>)
    7d86:	21ba      	movs	r1, #186	; 0xba
    7d88:	f002 fa15 	bl	a1b6 <assert_post_action>
	return list->head == list;
    7d8c:	4a16      	ldr	r2, [pc, #88]	; (7de8 <ready_thread+0x94>)
    7d8e:	4613      	mov	r3, r2
    7d90:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d94:	4299      	cmp	r1, r3
    7d96:	bf18      	it	ne
    7d98:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7d9a:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7d9c:	b925      	cbnz	r5, 7da8 <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7d9e:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    7da2:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7da4:	6254      	str	r4, [r2, #36]	; 0x24
}
    7da6:	e00c      	b.n	7dc2 <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    7da8:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7dac:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    7db0:	42b0      	cmp	r0, r6
    7db2:	d00b      	beq.n	7dcc <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7db4:	4286      	cmp	r6, r0
    7db6:	dd09      	ble.n	7dcc <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    7db8:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    7dba:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    7dbe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7dc0:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    7dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7dc6:	2000      	movs	r0, #0
    7dc8:	f7ff bf8c 	b.w	7ce4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7dcc:	428d      	cmp	r5, r1
    7dce:	d0e6      	beq.n	7d9e <ready_thread+0x4a>
    7dd0:	682d      	ldr	r5, [r5, #0]
    7dd2:	e7e3      	b.n	7d9c <ready_thread+0x48>
}
    7dd4:	bd70      	pop	{r4, r5, r6, pc}
    7dd6:	bf00      	nop
    7dd8:	20000678 	.word	0x20000678
    7ddc:	0000cf36 	.word	0x0000cf36
    7de0:	0000b80f 	.word	0x0000b80f
    7de4:	0000ceed 	.word	0x0000ceed
    7de8:	20000ed0 	.word	0x20000ed0

00007dec <k_sched_time_slice_set>:
{
    7dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dee:	4604      	mov	r4, r0
    7df0:	460d      	mov	r5, r1
	__asm__ volatile(
    7df2:	f04f 0320 	mov.w	r3, #32
    7df6:	f3ef 8711 	mrs	r7, BASEPRI
    7dfa:	f383 8812 	msr	BASEPRI_MAX, r3
    7dfe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e02:	4823      	ldr	r0, [pc, #140]	; (7e90 <k_sched_time_slice_set+0xa4>)
    7e04:	f7ff fc7c 	bl	7700 <z_spin_lock_valid>
    7e08:	b968      	cbnz	r0, 7e26 <k_sched_time_slice_set+0x3a>
    7e0a:	4a22      	ldr	r2, [pc, #136]	; (7e94 <k_sched_time_slice_set+0xa8>)
    7e0c:	4922      	ldr	r1, [pc, #136]	; (7e98 <k_sched_time_slice_set+0xac>)
    7e0e:	4823      	ldr	r0, [pc, #140]	; (7e9c <k_sched_time_slice_set+0xb0>)
    7e10:	238e      	movs	r3, #142	; 0x8e
    7e12:	f002 f9d7 	bl	a1c4 <assert_print>
    7e16:	491e      	ldr	r1, [pc, #120]	; (7e90 <k_sched_time_slice_set+0xa4>)
    7e18:	4821      	ldr	r0, [pc, #132]	; (7ea0 <k_sched_time_slice_set+0xb4>)
    7e1a:	f002 f9d3 	bl	a1c4 <assert_print>
    7e1e:	481d      	ldr	r0, [pc, #116]	; (7e94 <k_sched_time_slice_set+0xa8>)
    7e20:	218e      	movs	r1, #142	; 0x8e
    7e22:	f002 f9c8 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e26:	481a      	ldr	r0, [pc, #104]	; (7e90 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    7e28:	2600      	movs	r6, #0
    7e2a:	f7ff fc87 	bl	773c <z_spin_lock_set_owner>
    7e2e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    7e32:	f240 30e7 	movw	r0, #999	; 0x3e7
    7e36:	4631      	mov	r1, r6
    7e38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7e3c:	2300      	movs	r3, #0
    7e3e:	fbe4 010c 	umlal	r0, r1, r4, ip
    7e42:	f7f8 fea9 	bl	b98 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7e46:	42b4      	cmp	r4, r6
    7e48:	dd02      	ble.n	7e50 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    7e4a:	2802      	cmp	r0, #2
    7e4c:	bfb8      	it	lt
    7e4e:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7e50:	4a14      	ldr	r2, [pc, #80]	; (7ea4 <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    7e52:	4b15      	ldr	r3, [pc, #84]	; (7ea8 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7e54:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    7e56:	4a15      	ldr	r2, [pc, #84]	; (7eac <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    7e58:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    7e5a:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    7e5c:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    7e5e:	f7ff ff2d 	bl	7cbc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e62:	480b      	ldr	r0, [pc, #44]	; (7e90 <k_sched_time_slice_set+0xa4>)
    7e64:	f7ff fc5a 	bl	771c <z_spin_unlock_valid>
    7e68:	b968      	cbnz	r0, 7e86 <k_sched_time_slice_set+0x9a>
    7e6a:	4a0a      	ldr	r2, [pc, #40]	; (7e94 <k_sched_time_slice_set+0xa8>)
    7e6c:	4910      	ldr	r1, [pc, #64]	; (7eb0 <k_sched_time_slice_set+0xc4>)
    7e6e:	480b      	ldr	r0, [pc, #44]	; (7e9c <k_sched_time_slice_set+0xb0>)
    7e70:	23b9      	movs	r3, #185	; 0xb9
    7e72:	f002 f9a7 	bl	a1c4 <assert_print>
    7e76:	4906      	ldr	r1, [pc, #24]	; (7e90 <k_sched_time_slice_set+0xa4>)
    7e78:	480e      	ldr	r0, [pc, #56]	; (7eb4 <k_sched_time_slice_set+0xc8>)
    7e7a:	f002 f9a3 	bl	a1c4 <assert_print>
    7e7e:	4805      	ldr	r0, [pc, #20]	; (7e94 <k_sched_time_slice_set+0xa8>)
    7e80:	21b9      	movs	r1, #185	; 0xb9
    7e82:	f002 f998 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7e86:	f387 8811 	msr	BASEPRI, r7
    7e8a:	f3bf 8f6f 	isb	sy
}
    7e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e90:	20000f0c 	.word	0x20000f0c
    7e94:	0000b959 	.word	0x0000b959
    7e98:	0000b9b2 	.word	0x0000b9b2
    7e9c:	0000b80f 	.word	0x0000b80f
    7ea0:	0000b9c7 	.word	0x0000b9c7
    7ea4:	20000f08 	.word	0x20000f08
    7ea8:	20000ed0 	.word	0x20000ed0
    7eac:	20000f04 	.word	0x20000f04
    7eb0:	0000b986 	.word	0x0000b986
    7eb4:	0000b99d 	.word	0x0000b99d

00007eb8 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    7eb8:	b538      	push	{r3, r4, r5, lr}
    7eba:	4604      	mov	r4, r0
	__asm__ volatile(
    7ebc:	f04f 0320 	mov.w	r3, #32
    7ec0:	f3ef 8511 	mrs	r5, BASEPRI
    7ec4:	f383 8812 	msr	BASEPRI_MAX, r3
    7ec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ecc:	4817      	ldr	r0, [pc, #92]	; (7f2c <z_ready_thread+0x74>)
    7ece:	f7ff fc17 	bl	7700 <z_spin_lock_valid>
    7ed2:	b968      	cbnz	r0, 7ef0 <z_ready_thread+0x38>
    7ed4:	4a16      	ldr	r2, [pc, #88]	; (7f30 <z_ready_thread+0x78>)
    7ed6:	4917      	ldr	r1, [pc, #92]	; (7f34 <z_ready_thread+0x7c>)
    7ed8:	4817      	ldr	r0, [pc, #92]	; (7f38 <z_ready_thread+0x80>)
    7eda:	238e      	movs	r3, #142	; 0x8e
    7edc:	f002 f972 	bl	a1c4 <assert_print>
    7ee0:	4912      	ldr	r1, [pc, #72]	; (7f2c <z_ready_thread+0x74>)
    7ee2:	4816      	ldr	r0, [pc, #88]	; (7f3c <z_ready_thread+0x84>)
    7ee4:	f002 f96e 	bl	a1c4 <assert_print>
    7ee8:	4811      	ldr	r0, [pc, #68]	; (7f30 <z_ready_thread+0x78>)
    7eea:	218e      	movs	r1, #142	; 0x8e
    7eec:	f002 f963 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7ef0:	480e      	ldr	r0, [pc, #56]	; (7f2c <z_ready_thread+0x74>)
    7ef2:	f7ff fc23 	bl	773c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    7ef6:	4620      	mov	r0, r4
    7ef8:	f7ff ff2c 	bl	7d54 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7efc:	480b      	ldr	r0, [pc, #44]	; (7f2c <z_ready_thread+0x74>)
    7efe:	f7ff fc0d 	bl	771c <z_spin_unlock_valid>
    7f02:	b968      	cbnz	r0, 7f20 <z_ready_thread+0x68>
    7f04:	4a0a      	ldr	r2, [pc, #40]	; (7f30 <z_ready_thread+0x78>)
    7f06:	490e      	ldr	r1, [pc, #56]	; (7f40 <z_ready_thread+0x88>)
    7f08:	480b      	ldr	r0, [pc, #44]	; (7f38 <z_ready_thread+0x80>)
    7f0a:	23b9      	movs	r3, #185	; 0xb9
    7f0c:	f002 f95a 	bl	a1c4 <assert_print>
    7f10:	4906      	ldr	r1, [pc, #24]	; (7f2c <z_ready_thread+0x74>)
    7f12:	480c      	ldr	r0, [pc, #48]	; (7f44 <z_ready_thread+0x8c>)
    7f14:	f002 f956 	bl	a1c4 <assert_print>
    7f18:	4805      	ldr	r0, [pc, #20]	; (7f30 <z_ready_thread+0x78>)
    7f1a:	21b9      	movs	r1, #185	; 0xb9
    7f1c:	f002 f94b 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7f20:	f385 8811 	msr	BASEPRI, r5
    7f24:	f3bf 8f6f 	isb	sy
		}
	}
}
    7f28:	bd38      	pop	{r3, r4, r5, pc}
    7f2a:	bf00      	nop
    7f2c:	20000f0c 	.word	0x20000f0c
    7f30:	0000b959 	.word	0x0000b959
    7f34:	0000b9b2 	.word	0x0000b9b2
    7f38:	0000b80f 	.word	0x0000b80f
    7f3c:	0000b9c7 	.word	0x0000b9c7
    7f40:	0000b986 	.word	0x0000b986
    7f44:	0000b99d 	.word	0x0000b99d

00007f48 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    7f48:	b538      	push	{r3, r4, r5, lr}
    7f4a:	4604      	mov	r4, r0
	__asm__ volatile(
    7f4c:	f04f 0320 	mov.w	r3, #32
    7f50:	f3ef 8511 	mrs	r5, BASEPRI
    7f54:	f383 8812 	msr	BASEPRI_MAX, r3
    7f58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f5c:	4817      	ldr	r0, [pc, #92]	; (7fbc <z_unpend_thread_no_timeout+0x74>)
    7f5e:	f7ff fbcf 	bl	7700 <z_spin_lock_valid>
    7f62:	b968      	cbnz	r0, 7f80 <z_unpend_thread_no_timeout+0x38>
    7f64:	4a16      	ldr	r2, [pc, #88]	; (7fc0 <z_unpend_thread_no_timeout+0x78>)
    7f66:	4917      	ldr	r1, [pc, #92]	; (7fc4 <z_unpend_thread_no_timeout+0x7c>)
    7f68:	4817      	ldr	r0, [pc, #92]	; (7fc8 <z_unpend_thread_no_timeout+0x80>)
    7f6a:	238e      	movs	r3, #142	; 0x8e
    7f6c:	f002 f92a 	bl	a1c4 <assert_print>
    7f70:	4912      	ldr	r1, [pc, #72]	; (7fbc <z_unpend_thread_no_timeout+0x74>)
    7f72:	4816      	ldr	r0, [pc, #88]	; (7fcc <z_unpend_thread_no_timeout+0x84>)
    7f74:	f002 f926 	bl	a1c4 <assert_print>
    7f78:	4811      	ldr	r0, [pc, #68]	; (7fc0 <z_unpend_thread_no_timeout+0x78>)
    7f7a:	218e      	movs	r1, #142	; 0x8e
    7f7c:	f002 f91b 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    7f80:	480e      	ldr	r0, [pc, #56]	; (7fbc <z_unpend_thread_no_timeout+0x74>)
    7f82:	f7ff fbdb 	bl	773c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    7f86:	4620      	mov	r0, r4
    7f88:	f000 fc82 	bl	8890 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f8c:	480b      	ldr	r0, [pc, #44]	; (7fbc <z_unpend_thread_no_timeout+0x74>)
    7f8e:	f7ff fbc5 	bl	771c <z_spin_unlock_valid>
    7f92:	b968      	cbnz	r0, 7fb0 <z_unpend_thread_no_timeout+0x68>
    7f94:	4a0a      	ldr	r2, [pc, #40]	; (7fc0 <z_unpend_thread_no_timeout+0x78>)
    7f96:	490e      	ldr	r1, [pc, #56]	; (7fd0 <z_unpend_thread_no_timeout+0x88>)
    7f98:	480b      	ldr	r0, [pc, #44]	; (7fc8 <z_unpend_thread_no_timeout+0x80>)
    7f9a:	23b9      	movs	r3, #185	; 0xb9
    7f9c:	f002 f912 	bl	a1c4 <assert_print>
    7fa0:	4906      	ldr	r1, [pc, #24]	; (7fbc <z_unpend_thread_no_timeout+0x74>)
    7fa2:	480c      	ldr	r0, [pc, #48]	; (7fd4 <z_unpend_thread_no_timeout+0x8c>)
    7fa4:	f002 f90e 	bl	a1c4 <assert_print>
    7fa8:	4805      	ldr	r0, [pc, #20]	; (7fc0 <z_unpend_thread_no_timeout+0x78>)
    7faa:	21b9      	movs	r1, #185	; 0xb9
    7fac:	f002 f903 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    7fb0:	f385 8811 	msr	BASEPRI, r5
    7fb4:	f3bf 8f6f 	isb	sy
	}
}
    7fb8:	bd38      	pop	{r3, r4, r5, pc}
    7fba:	bf00      	nop
    7fbc:	20000f0c 	.word	0x20000f0c
    7fc0:	0000b959 	.word	0x0000b959
    7fc4:	0000b9b2 	.word	0x0000b9b2
    7fc8:	0000b80f 	.word	0x0000b80f
    7fcc:	0000b9c7 	.word	0x0000b9c7
    7fd0:	0000b986 	.word	0x0000b986
    7fd4:	0000b99d 	.word	0x0000b99d

00007fd8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7fd8:	b538      	push	{r3, r4, r5, lr}
    7fda:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7fdc:	460d      	mov	r5, r1
    7fde:	b9e9      	cbnz	r1, 801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7fe0:	f3ef 8305 	mrs	r3, IPSR
    7fe4:	b9d3      	cbnz	r3, 801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
	new_thread = _kernel.ready_q.cache;
    7fe6:	4b19      	ldr	r3, [pc, #100]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
	if (resched(key.key) && need_swap()) {
    7fe8:	69da      	ldr	r2, [r3, #28]
    7fea:	689b      	ldr	r3, [r3, #8]
    7fec:	429a      	cmp	r2, r3
    7fee:	d015      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ff0:	f7ff fb94 	bl	771c <z_spin_unlock_valid>
    7ff4:	b968      	cbnz	r0, 8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    7ff6:	4a16      	ldr	r2, [pc, #88]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7ff8:	4916      	ldr	r1, [pc, #88]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7ffa:	4817      	ldr	r0, [pc, #92]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    7ffc:	23d0      	movs	r3, #208	; 0xd0
    7ffe:	f002 f8e1 	bl	a1c4 <assert_print>
    8002:	4816      	ldr	r0, [pc, #88]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    8004:	4621      	mov	r1, r4
    8006:	f002 f8dd 	bl	a1c4 <assert_print>
    800a:	4811      	ldr	r0, [pc, #68]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    800c:	21d0      	movs	r1, #208	; 0xd0
    800e:	f002 f8d2 	bl	a1b6 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    8012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    8016:	2000      	movs	r0, #0
    8018:	f7fb be94 	b.w	3d44 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    801c:	4620      	mov	r0, r4
    801e:	f7ff fb7d 	bl	771c <z_spin_unlock_valid>
    8022:	b968      	cbnz	r0, 8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    8024:	4a0a      	ldr	r2, [pc, #40]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    8026:	490b      	ldr	r1, [pc, #44]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8028:	480b      	ldr	r0, [pc, #44]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    802a:	23b9      	movs	r3, #185	; 0xb9
    802c:	f002 f8ca 	bl	a1c4 <assert_print>
    8030:	480a      	ldr	r0, [pc, #40]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    8032:	4621      	mov	r1, r4
    8034:	f002 f8c6 	bl	a1c4 <assert_print>
    8038:	4805      	ldr	r0, [pc, #20]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    803a:	21b9      	movs	r1, #185	; 0xb9
    803c:	f002 f8bb 	bl	a1b6 <assert_post_action>
    8040:	f385 8811 	msr	BASEPRI, r5
    8044:	f3bf 8f6f 	isb	sy
    8048:	bd38      	pop	{r3, r4, r5, pc}
    804a:	bf00      	nop
    804c:	20000ed0 	.word	0x20000ed0
    8050:	0000b959 	.word	0x0000b959
    8054:	0000b986 	.word	0x0000b986
    8058:	0000b80f 	.word	0x0000b80f
    805c:	0000b99d 	.word	0x0000b99d

00008060 <z_sched_start>:
{
    8060:	b538      	push	{r3, r4, r5, lr}
    8062:	4604      	mov	r4, r0
	__asm__ volatile(
    8064:	f04f 0320 	mov.w	r3, #32
    8068:	f3ef 8511 	mrs	r5, BASEPRI
    806c:	f383 8812 	msr	BASEPRI_MAX, r3
    8070:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8074:	481d      	ldr	r0, [pc, #116]	; (80ec <z_sched_start+0x8c>)
    8076:	f7ff fb43 	bl	7700 <z_spin_lock_valid>
    807a:	b968      	cbnz	r0, 8098 <z_sched_start+0x38>
    807c:	4a1c      	ldr	r2, [pc, #112]	; (80f0 <z_sched_start+0x90>)
    807e:	491d      	ldr	r1, [pc, #116]	; (80f4 <z_sched_start+0x94>)
    8080:	481d      	ldr	r0, [pc, #116]	; (80f8 <z_sched_start+0x98>)
    8082:	238e      	movs	r3, #142	; 0x8e
    8084:	f002 f89e 	bl	a1c4 <assert_print>
    8088:	4918      	ldr	r1, [pc, #96]	; (80ec <z_sched_start+0x8c>)
    808a:	481c      	ldr	r0, [pc, #112]	; (80fc <z_sched_start+0x9c>)
    808c:	f002 f89a 	bl	a1c4 <assert_print>
    8090:	4817      	ldr	r0, [pc, #92]	; (80f0 <z_sched_start+0x90>)
    8092:	218e      	movs	r1, #142	; 0x8e
    8094:	f002 f88f 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    8098:	4814      	ldr	r0, [pc, #80]	; (80ec <z_sched_start+0x8c>)
    809a:	f7ff fb4f 	bl	773c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    809e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    80a0:	075a      	lsls	r2, r3, #29
    80a2:	d416      	bmi.n	80d2 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80a4:	4811      	ldr	r0, [pc, #68]	; (80ec <z_sched_start+0x8c>)
    80a6:	f7ff fb39 	bl	771c <z_spin_unlock_valid>
    80aa:	b968      	cbnz	r0, 80c8 <z_sched_start+0x68>
    80ac:	4a10      	ldr	r2, [pc, #64]	; (80f0 <z_sched_start+0x90>)
    80ae:	4914      	ldr	r1, [pc, #80]	; (8100 <z_sched_start+0xa0>)
    80b0:	4811      	ldr	r0, [pc, #68]	; (80f8 <z_sched_start+0x98>)
    80b2:	23b9      	movs	r3, #185	; 0xb9
    80b4:	f002 f886 	bl	a1c4 <assert_print>
    80b8:	490c      	ldr	r1, [pc, #48]	; (80ec <z_sched_start+0x8c>)
    80ba:	4812      	ldr	r0, [pc, #72]	; (8104 <z_sched_start+0xa4>)
    80bc:	f002 f882 	bl	a1c4 <assert_print>
    80c0:	480b      	ldr	r0, [pc, #44]	; (80f0 <z_sched_start+0x90>)
    80c2:	21b9      	movs	r1, #185	; 0xb9
    80c4:	f002 f877 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    80c8:	f385 8811 	msr	BASEPRI, r5
    80cc:	f3bf 8f6f 	isb	sy
}
    80d0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    80d2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    80d6:	4620      	mov	r0, r4
    80d8:	7363      	strb	r3, [r4, #13]
    80da:	f7ff fe3b 	bl	7d54 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    80de:	4629      	mov	r1, r5
    80e0:	4802      	ldr	r0, [pc, #8]	; (80ec <z_sched_start+0x8c>)
}
    80e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    80e6:	f7ff bf77 	b.w	7fd8 <z_reschedule>
    80ea:	bf00      	nop
    80ec:	20000f0c 	.word	0x20000f0c
    80f0:	0000b959 	.word	0x0000b959
    80f4:	0000b9b2 	.word	0x0000b9b2
    80f8:	0000b80f 	.word	0x0000b80f
    80fc:	0000b9c7 	.word	0x0000b9c7
    8100:	0000b986 	.word	0x0000b986
    8104:	0000b99d 	.word	0x0000b99d

00008108 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8108:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    810a:	f04f 0320 	mov.w	r3, #32
    810e:	f3ef 8511 	mrs	r5, BASEPRI
    8112:	f383 8812 	msr	BASEPRI_MAX, r3
    8116:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    811a:	4829      	ldr	r0, [pc, #164]	; (81c0 <k_sched_lock+0xb8>)
    811c:	f7ff faf0 	bl	7700 <z_spin_lock_valid>
    8120:	b968      	cbnz	r0, 813e <k_sched_lock+0x36>
    8122:	4a28      	ldr	r2, [pc, #160]	; (81c4 <k_sched_lock+0xbc>)
    8124:	4928      	ldr	r1, [pc, #160]	; (81c8 <k_sched_lock+0xc0>)
    8126:	4829      	ldr	r0, [pc, #164]	; (81cc <k_sched_lock+0xc4>)
    8128:	238e      	movs	r3, #142	; 0x8e
    812a:	f002 f84b 	bl	a1c4 <assert_print>
    812e:	4924      	ldr	r1, [pc, #144]	; (81c0 <k_sched_lock+0xb8>)
    8130:	4827      	ldr	r0, [pc, #156]	; (81d0 <k_sched_lock+0xc8>)
    8132:	f002 f847 	bl	a1c4 <assert_print>
    8136:	4823      	ldr	r0, [pc, #140]	; (81c4 <k_sched_lock+0xbc>)
    8138:	218e      	movs	r1, #142	; 0x8e
    813a:	f002 f83c 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    813e:	4820      	ldr	r0, [pc, #128]	; (81c0 <k_sched_lock+0xb8>)
    8140:	f7ff fafc 	bl	773c <z_spin_lock_set_owner>
    8144:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8148:	b163      	cbz	r3, 8164 <k_sched_lock+0x5c>
    814a:	4922      	ldr	r1, [pc, #136]	; (81d4 <k_sched_lock+0xcc>)
    814c:	4a22      	ldr	r2, [pc, #136]	; (81d8 <k_sched_lock+0xd0>)
    814e:	481f      	ldr	r0, [pc, #124]	; (81cc <k_sched_lock+0xc4>)
    8150:	23fd      	movs	r3, #253	; 0xfd
    8152:	f002 f837 	bl	a1c4 <assert_print>
    8156:	4821      	ldr	r0, [pc, #132]	; (81dc <k_sched_lock+0xd4>)
    8158:	f002 f834 	bl	a1c4 <assert_print>
    815c:	481e      	ldr	r0, [pc, #120]	; (81d8 <k_sched_lock+0xd0>)
    815e:	21fd      	movs	r1, #253	; 0xfd
    8160:	f002 f829 	bl	a1b6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8164:	4c1e      	ldr	r4, [pc, #120]	; (81e0 <k_sched_lock+0xd8>)
    8166:	68a3      	ldr	r3, [r4, #8]
    8168:	7bdb      	ldrb	r3, [r3, #15]
    816a:	2b01      	cmp	r3, #1
    816c:	d10c      	bne.n	8188 <k_sched_lock+0x80>
    816e:	491d      	ldr	r1, [pc, #116]	; (81e4 <k_sched_lock+0xdc>)
    8170:	4a19      	ldr	r2, [pc, #100]	; (81d8 <k_sched_lock+0xd0>)
    8172:	4816      	ldr	r0, [pc, #88]	; (81cc <k_sched_lock+0xc4>)
    8174:	23fe      	movs	r3, #254	; 0xfe
    8176:	f002 f825 	bl	a1c4 <assert_print>
    817a:	4818      	ldr	r0, [pc, #96]	; (81dc <k_sched_lock+0xd4>)
    817c:	f002 f822 	bl	a1c4 <assert_print>
    8180:	4815      	ldr	r0, [pc, #84]	; (81d8 <k_sched_lock+0xd0>)
    8182:	21fe      	movs	r1, #254	; 0xfe
    8184:	f002 f817 	bl	a1b6 <assert_post_action>
	--_current->base.sched_locked;
    8188:	68a2      	ldr	r2, [r4, #8]
    818a:	7bd3      	ldrb	r3, [r2, #15]
    818c:	3b01      	subs	r3, #1
    818e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8190:	480b      	ldr	r0, [pc, #44]	; (81c0 <k_sched_lock+0xb8>)
    8192:	f7ff fac3 	bl	771c <z_spin_unlock_valid>
    8196:	b968      	cbnz	r0, 81b4 <k_sched_lock+0xac>
    8198:	4a0a      	ldr	r2, [pc, #40]	; (81c4 <k_sched_lock+0xbc>)
    819a:	4913      	ldr	r1, [pc, #76]	; (81e8 <k_sched_lock+0xe0>)
    819c:	480b      	ldr	r0, [pc, #44]	; (81cc <k_sched_lock+0xc4>)
    819e:	23b9      	movs	r3, #185	; 0xb9
    81a0:	f002 f810 	bl	a1c4 <assert_print>
    81a4:	4906      	ldr	r1, [pc, #24]	; (81c0 <k_sched_lock+0xb8>)
    81a6:	4811      	ldr	r0, [pc, #68]	; (81ec <k_sched_lock+0xe4>)
    81a8:	f002 f80c 	bl	a1c4 <assert_print>
    81ac:	4805      	ldr	r0, [pc, #20]	; (81c4 <k_sched_lock+0xbc>)
    81ae:	21b9      	movs	r1, #185	; 0xb9
    81b0:	f002 f801 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    81b4:	f385 8811 	msr	BASEPRI, r5
    81b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    81bc:	bd38      	pop	{r3, r4, r5, pc}
    81be:	bf00      	nop
    81c0:	20000f0c 	.word	0x20000f0c
    81c4:	0000b959 	.word	0x0000b959
    81c8:	0000b9b2 	.word	0x0000b9b2
    81cc:	0000b80f 	.word	0x0000b80f
    81d0:	0000b9c7 	.word	0x0000b9c7
    81d4:	0000cd15 	.word	0x0000cd15
    81d8:	0000ce20 	.word	0x0000ce20
    81dc:	0000ce4b 	.word	0x0000ce4b
    81e0:	20000ed0 	.word	0x20000ed0
    81e4:	0000ce4e 	.word	0x0000ce4e
    81e8:	0000b986 	.word	0x0000b986
    81ec:	0000b99d 	.word	0x0000b99d

000081f0 <k_sched_unlock>:

void k_sched_unlock(void)
{
    81f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    81f2:	f04f 0320 	mov.w	r3, #32
    81f6:	f3ef 8511 	mrs	r5, BASEPRI
    81fa:	f383 8812 	msr	BASEPRI_MAX, r3
    81fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8202:	482d      	ldr	r0, [pc, #180]	; (82b8 <k_sched_unlock+0xc8>)
    8204:	f7ff fa7c 	bl	7700 <z_spin_lock_valid>
    8208:	b968      	cbnz	r0, 8226 <k_sched_unlock+0x36>
    820a:	4a2c      	ldr	r2, [pc, #176]	; (82bc <k_sched_unlock+0xcc>)
    820c:	492c      	ldr	r1, [pc, #176]	; (82c0 <k_sched_unlock+0xd0>)
    820e:	482d      	ldr	r0, [pc, #180]	; (82c4 <k_sched_unlock+0xd4>)
    8210:	238e      	movs	r3, #142	; 0x8e
    8212:	f001 ffd7 	bl	a1c4 <assert_print>
    8216:	4928      	ldr	r1, [pc, #160]	; (82b8 <k_sched_unlock+0xc8>)
    8218:	482b      	ldr	r0, [pc, #172]	; (82c8 <k_sched_unlock+0xd8>)
    821a:	f001 ffd3 	bl	a1c4 <assert_print>
    821e:	4827      	ldr	r0, [pc, #156]	; (82bc <k_sched_unlock+0xcc>)
    8220:	218e      	movs	r1, #142	; 0x8e
    8222:	f001 ffc8 	bl	a1b6 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    8226:	4c29      	ldr	r4, [pc, #164]	; (82cc <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    8228:	4823      	ldr	r0, [pc, #140]	; (82b8 <k_sched_unlock+0xc8>)
    822a:	f7ff fa87 	bl	773c <z_spin_lock_set_owner>
    822e:	68a3      	ldr	r3, [r4, #8]
    8230:	7bdb      	ldrb	r3, [r3, #15]
    8232:	b973      	cbnz	r3, 8252 <k_sched_unlock+0x62>
    8234:	4926      	ldr	r1, [pc, #152]	; (82d0 <k_sched_unlock+0xe0>)
    8236:	4a27      	ldr	r2, [pc, #156]	; (82d4 <k_sched_unlock+0xe4>)
    8238:	4822      	ldr	r0, [pc, #136]	; (82c4 <k_sched_unlock+0xd4>)
    823a:	f240 33bb 	movw	r3, #955	; 0x3bb
    823e:	f001 ffc1 	bl	a1c4 <assert_print>
    8242:	4825      	ldr	r0, [pc, #148]	; (82d8 <k_sched_unlock+0xe8>)
    8244:	f001 ffbe 	bl	a1c4 <assert_print>
    8248:	4822      	ldr	r0, [pc, #136]	; (82d4 <k_sched_unlock+0xe4>)
    824a:	f240 31bb 	movw	r1, #955	; 0x3bb
    824e:	f001 ffb2 	bl	a1b6 <assert_post_action>
    8252:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    8256:	b173      	cbz	r3, 8276 <k_sched_unlock+0x86>
    8258:	4920      	ldr	r1, [pc, #128]	; (82dc <k_sched_unlock+0xec>)
    825a:	4a1e      	ldr	r2, [pc, #120]	; (82d4 <k_sched_unlock+0xe4>)
    825c:	4819      	ldr	r0, [pc, #100]	; (82c4 <k_sched_unlock+0xd4>)
    825e:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    8262:	f001 ffaf 	bl	a1c4 <assert_print>
    8266:	481c      	ldr	r0, [pc, #112]	; (82d8 <k_sched_unlock+0xe8>)
    8268:	f001 ffac 	bl	a1c4 <assert_print>
    826c:	4819      	ldr	r0, [pc, #100]	; (82d4 <k_sched_unlock+0xe4>)
    826e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    8272:	f001 ffa0 	bl	a1b6 <assert_post_action>

		++_current->base.sched_locked;
    8276:	68a2      	ldr	r2, [r4, #8]
    8278:	7bd3      	ldrb	r3, [r2, #15]
    827a:	3301      	adds	r3, #1
		update_cache(0);
    827c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    827e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8280:	f7ff fd30 	bl	7ce4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8284:	480c      	ldr	r0, [pc, #48]	; (82b8 <k_sched_unlock+0xc8>)
    8286:	f7ff fa49 	bl	771c <z_spin_unlock_valid>
    828a:	b968      	cbnz	r0, 82a8 <k_sched_unlock+0xb8>
    828c:	4a0b      	ldr	r2, [pc, #44]	; (82bc <k_sched_unlock+0xcc>)
    828e:	4914      	ldr	r1, [pc, #80]	; (82e0 <k_sched_unlock+0xf0>)
    8290:	480c      	ldr	r0, [pc, #48]	; (82c4 <k_sched_unlock+0xd4>)
    8292:	23b9      	movs	r3, #185	; 0xb9
    8294:	f001 ff96 	bl	a1c4 <assert_print>
    8298:	4907      	ldr	r1, [pc, #28]	; (82b8 <k_sched_unlock+0xc8>)
    829a:	4812      	ldr	r0, [pc, #72]	; (82e4 <k_sched_unlock+0xf4>)
    829c:	f001 ff92 	bl	a1c4 <assert_print>
    82a0:	4806      	ldr	r0, [pc, #24]	; (82bc <k_sched_unlock+0xcc>)
    82a2:	21b9      	movs	r1, #185	; 0xb9
    82a4:	f001 ff87 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    82a8:	f385 8811 	msr	BASEPRI, r5
    82ac:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    82b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    82b4:	f002 bcd4 	b.w	ac60 <z_reschedule_unlocked>
    82b8:	20000f0c 	.word	0x20000f0c
    82bc:	0000b959 	.word	0x0000b959
    82c0:	0000b9b2 	.word	0x0000b9b2
    82c4:	0000b80f 	.word	0x0000b80f
    82c8:	0000b9c7 	.word	0x0000b9c7
    82cc:	20000ed0 	.word	0x20000ed0
    82d0:	0000cf57 	.word	0x0000cf57
    82d4:	0000ceed 	.word	0x0000ceed
    82d8:	0000ce4b 	.word	0x0000ce4b
    82dc:	0000cd15 	.word	0x0000cd15
    82e0:	0000b986 	.word	0x0000b986
    82e4:	0000b99d 	.word	0x0000b99d

000082e8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    82e8:	4b0c      	ldr	r3, [pc, #48]	; (831c <z_priq_dumb_remove+0x34>)
    82ea:	4299      	cmp	r1, r3
{
    82ec:	b510      	push	{r4, lr}
    82ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    82f0:	d10b      	bne.n	830a <z_priq_dumb_remove+0x22>
    82f2:	490b      	ldr	r1, [pc, #44]	; (8320 <z_priq_dumb_remove+0x38>)
    82f4:	480b      	ldr	r0, [pc, #44]	; (8324 <z_priq_dumb_remove+0x3c>)
    82f6:	4a0c      	ldr	r2, [pc, #48]	; (8328 <z_priq_dumb_remove+0x40>)
    82f8:	f240 433d 	movw	r3, #1085	; 0x43d
    82fc:	f001 ff62 	bl	a1c4 <assert_print>
    8300:	4809      	ldr	r0, [pc, #36]	; (8328 <z_priq_dumb_remove+0x40>)
    8302:	f240 413d 	movw	r1, #1085	; 0x43d
    8306:	f001 ff56 	bl	a1b6 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    830a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    830e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8310:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8312:	2300      	movs	r3, #0
	node->prev = NULL;
    8314:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8318:	bd10      	pop	{r4, pc}
    831a:	bf00      	nop
    831c:	20000678 	.word	0x20000678
    8320:	0000cf36 	.word	0x0000cf36
    8324:	0000b80f 	.word	0x0000b80f
    8328:	0000ceed 	.word	0x0000ceed

0000832c <move_thread_to_end_of_prio_q>:
{
    832c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    832e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8332:	7b43      	ldrb	r3, [r0, #13]
    8334:	2a00      	cmp	r2, #0
{
    8336:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8338:	da06      	bge.n	8348 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    833a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    833e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8340:	4601      	mov	r1, r0
    8342:	481d      	ldr	r0, [pc, #116]	; (83b8 <move_thread_to_end_of_prio_q+0x8c>)
    8344:	f7ff ffd0 	bl	82e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8348:	7b63      	ldrb	r3, [r4, #13]
    834a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    834e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8350:	4b1a      	ldr	r3, [pc, #104]	; (83bc <move_thread_to_end_of_prio_q+0x90>)
    8352:	429c      	cmp	r4, r3
    8354:	d109      	bne.n	836a <move_thread_to_end_of_prio_q+0x3e>
    8356:	491a      	ldr	r1, [pc, #104]	; (83c0 <move_thread_to_end_of_prio_q+0x94>)
    8358:	481a      	ldr	r0, [pc, #104]	; (83c4 <move_thread_to_end_of_prio_q+0x98>)
    835a:	4a1b      	ldr	r2, [pc, #108]	; (83c8 <move_thread_to_end_of_prio_q+0x9c>)
    835c:	23ba      	movs	r3, #186	; 0xba
    835e:	f001 ff31 	bl	a1c4 <assert_print>
    8362:	4819      	ldr	r0, [pc, #100]	; (83c8 <move_thread_to_end_of_prio_q+0x9c>)
    8364:	21ba      	movs	r1, #186	; 0xba
    8366:	f001 ff26 	bl	a1b6 <assert_post_action>
	return list->head == list;
    836a:	4a18      	ldr	r2, [pc, #96]	; (83cc <move_thread_to_end_of_prio_q+0xa0>)
    836c:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    836e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    8370:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8374:	428b      	cmp	r3, r1
    8376:	bf08      	it	eq
    8378:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    837a:	b923      	cbnz	r3, 8386 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    837c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    8380:	6004      	str	r4, [r0, #0]
	list->tail = node;
    8382:	6254      	str	r4, [r2, #36]	; 0x24
}
    8384:	e00c      	b.n	83a0 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    8386:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    838a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    838e:	42b5      	cmp	r5, r6
    8390:	d00e      	beq.n	83b0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8392:	42ae      	cmp	r6, r5
    8394:	dd0c      	ble.n	83b0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    8396:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    8398:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    839c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    839e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    83a0:	6890      	ldr	r0, [r2, #8]
    83a2:	1b03      	subs	r3, r0, r4
    83a4:	4258      	negs	r0, r3
}
    83a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    83aa:	4158      	adcs	r0, r3
    83ac:	f7ff bc9a 	b.w	7ce4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    83b0:	4298      	cmp	r0, r3
    83b2:	d0e3      	beq.n	837c <move_thread_to_end_of_prio_q+0x50>
    83b4:	681b      	ldr	r3, [r3, #0]
    83b6:	e7e0      	b.n	837a <move_thread_to_end_of_prio_q+0x4e>
    83b8:	20000ef0 	.word	0x20000ef0
    83bc:	20000678 	.word	0x20000678
    83c0:	0000cf36 	.word	0x0000cf36
    83c4:	0000b80f 	.word	0x0000b80f
    83c8:	0000ceed 	.word	0x0000ceed
    83cc:	20000ed0 	.word	0x20000ed0

000083d0 <z_time_slice>:
{
    83d0:	b570      	push	{r4, r5, r6, lr}
    83d2:	4605      	mov	r5, r0
	__asm__ volatile(
    83d4:	f04f 0320 	mov.w	r3, #32
    83d8:	f3ef 8611 	mrs	r6, BASEPRI
    83dc:	f383 8812 	msr	BASEPRI_MAX, r3
    83e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83e4:	482a      	ldr	r0, [pc, #168]	; (8490 <z_time_slice+0xc0>)
    83e6:	f7ff f98b 	bl	7700 <z_spin_lock_valid>
    83ea:	b968      	cbnz	r0, 8408 <z_time_slice+0x38>
    83ec:	4a29      	ldr	r2, [pc, #164]	; (8494 <z_time_slice+0xc4>)
    83ee:	492a      	ldr	r1, [pc, #168]	; (8498 <z_time_slice+0xc8>)
    83f0:	482a      	ldr	r0, [pc, #168]	; (849c <z_time_slice+0xcc>)
    83f2:	238e      	movs	r3, #142	; 0x8e
    83f4:	f001 fee6 	bl	a1c4 <assert_print>
    83f8:	4925      	ldr	r1, [pc, #148]	; (8490 <z_time_slice+0xc0>)
    83fa:	4829      	ldr	r0, [pc, #164]	; (84a0 <z_time_slice+0xd0>)
    83fc:	f001 fee2 	bl	a1c4 <assert_print>
    8400:	4824      	ldr	r0, [pc, #144]	; (8494 <z_time_slice+0xc4>)
    8402:	218e      	movs	r1, #142	; 0x8e
    8404:	f001 fed7 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    8408:	4821      	ldr	r0, [pc, #132]	; (8490 <z_time_slice+0xc0>)
    840a:	f7ff f997 	bl	773c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    840e:	4b25      	ldr	r3, [pc, #148]	; (84a4 <z_time_slice+0xd4>)
    8410:	4a25      	ldr	r2, [pc, #148]	; (84a8 <z_time_slice+0xd8>)
    8412:	689c      	ldr	r4, [r3, #8]
    8414:	6811      	ldr	r1, [r2, #0]
    8416:	428c      	cmp	r4, r1
    8418:	d119      	bne.n	844e <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    841a:	4620      	mov	r0, r4
    841c:	f7ff fc4e 	bl	7cbc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8420:	481b      	ldr	r0, [pc, #108]	; (8490 <z_time_slice+0xc0>)
    8422:	f7ff f97b 	bl	771c <z_spin_unlock_valid>
    8426:	b968      	cbnz	r0, 8444 <z_time_slice+0x74>
    8428:	4a1a      	ldr	r2, [pc, #104]	; (8494 <z_time_slice+0xc4>)
    842a:	4920      	ldr	r1, [pc, #128]	; (84ac <z_time_slice+0xdc>)
    842c:	481b      	ldr	r0, [pc, #108]	; (849c <z_time_slice+0xcc>)
    842e:	23b9      	movs	r3, #185	; 0xb9
    8430:	f001 fec8 	bl	a1c4 <assert_print>
    8434:	4916      	ldr	r1, [pc, #88]	; (8490 <z_time_slice+0xc0>)
    8436:	481e      	ldr	r0, [pc, #120]	; (84b0 <z_time_slice+0xe0>)
    8438:	f001 fec4 	bl	a1c4 <assert_print>
    843c:	4815      	ldr	r0, [pc, #84]	; (8494 <z_time_slice+0xc4>)
    843e:	21b9      	movs	r1, #185	; 0xb9
    8440:	f001 feb9 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8444:	f386 8811 	msr	BASEPRI, r6
    8448:	f3bf 8f6f 	isb	sy
}
    844c:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    844e:	2100      	movs	r1, #0
    8450:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    8452:	4a18      	ldr	r2, [pc, #96]	; (84b4 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    8454:	6812      	ldr	r2, [r2, #0]
    8456:	b1c2      	cbz	r2, 848a <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    8458:	89e2      	ldrh	r2, [r4, #14]
    845a:	2a7f      	cmp	r2, #127	; 0x7f
    845c:	d815      	bhi.n	848a <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    845e:	7b62      	ldrb	r2, [r4, #13]
    8460:	06d2      	lsls	r2, r2, #27
    8462:	d112      	bne.n	848a <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8464:	4a14      	ldr	r2, [pc, #80]	; (84b8 <z_time_slice+0xe8>)
    8466:	f994 100e 	ldrsb.w	r1, [r4, #14]
    846a:	6812      	ldr	r2, [r2, #0]
    846c:	4291      	cmp	r1, r2
    846e:	db0c      	blt.n	848a <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    8470:	4a12      	ldr	r2, [pc, #72]	; (84bc <z_time_slice+0xec>)
    8472:	4294      	cmp	r4, r2
    8474:	d009      	beq.n	848a <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    8476:	691a      	ldr	r2, [r3, #16]
    8478:	42aa      	cmp	r2, r5
    847a:	dc03      	bgt.n	8484 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    847c:	4620      	mov	r0, r4
    847e:	f7ff ff55 	bl	832c <move_thread_to_end_of_prio_q>
    8482:	e7ca      	b.n	841a <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    8484:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    8486:	611a      	str	r2, [r3, #16]
    8488:	e7ca      	b.n	8420 <z_time_slice+0x50>
    848a:	2200      	movs	r2, #0
    848c:	e7fb      	b.n	8486 <z_time_slice+0xb6>
    848e:	bf00      	nop
    8490:	20000f0c 	.word	0x20000f0c
    8494:	0000b959 	.word	0x0000b959
    8498:	0000b9b2 	.word	0x0000b9b2
    849c:	0000b80f 	.word	0x0000b80f
    84a0:	0000b9c7 	.word	0x0000b9c7
    84a4:	20000ed0 	.word	0x20000ed0
    84a8:	20000f00 	.word	0x20000f00
    84ac:	0000b986 	.word	0x0000b986
    84b0:	0000b99d 	.word	0x0000b99d
    84b4:	20000f08 	.word	0x20000f08
    84b8:	20000f04 	.word	0x20000f04
    84bc:	20000678 	.word	0x20000678

000084c0 <unready_thread>:
{
    84c0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    84c2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    84c6:	7b43      	ldrb	r3, [r0, #13]
    84c8:	2a00      	cmp	r2, #0
{
    84ca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    84cc:	da06      	bge.n	84dc <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    84ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    84d2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    84d4:	4601      	mov	r1, r0
    84d6:	4806      	ldr	r0, [pc, #24]	; (84f0 <unready_thread+0x30>)
    84d8:	f7ff ff06 	bl	82e8 <z_priq_dumb_remove>
	update_cache(thread == _current);
    84dc:	4b05      	ldr	r3, [pc, #20]	; (84f4 <unready_thread+0x34>)
    84de:	6898      	ldr	r0, [r3, #8]
    84e0:	1b03      	subs	r3, r0, r4
    84e2:	4258      	negs	r0, r3
}
    84e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    84e8:	4158      	adcs	r0, r3
    84ea:	f7ff bbfb 	b.w	7ce4 <update_cache>
    84ee:	bf00      	nop
    84f0:	20000ef0 	.word	0x20000ef0
    84f4:	20000ed0 	.word	0x20000ed0

000084f8 <add_to_waitq_locked>:
{
    84f8:	b538      	push	{r3, r4, r5, lr}
    84fa:	4604      	mov	r4, r0
    84fc:	460d      	mov	r5, r1
	unready_thread(thread);
    84fe:	f7ff ffdf 	bl	84c0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8502:	7b63      	ldrb	r3, [r4, #13]
    8504:	f043 0302 	orr.w	r3, r3, #2
    8508:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    850a:	b34d      	cbz	r5, 8560 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    850c:	4b15      	ldr	r3, [pc, #84]	; (8564 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    850e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8510:	429c      	cmp	r4, r3
    8512:	d109      	bne.n	8528 <add_to_waitq_locked+0x30>
    8514:	4914      	ldr	r1, [pc, #80]	; (8568 <add_to_waitq_locked+0x70>)
    8516:	4815      	ldr	r0, [pc, #84]	; (856c <add_to_waitq_locked+0x74>)
    8518:	4a15      	ldr	r2, [pc, #84]	; (8570 <add_to_waitq_locked+0x78>)
    851a:	23ba      	movs	r3, #186	; 0xba
    851c:	f001 fe52 	bl	a1c4 <assert_print>
    8520:	4813      	ldr	r0, [pc, #76]	; (8570 <add_to_waitq_locked+0x78>)
    8522:	21ba      	movs	r1, #186	; 0xba
    8524:	f001 fe47 	bl	a1b6 <assert_post_action>
	return list->head == list;
    8528:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    852a:	429d      	cmp	r5, r3
    852c:	d109      	bne.n	8542 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    852e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8530:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8534:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8536:	606c      	str	r4, [r5, #4]
}
    8538:	e012      	b.n	8560 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    853a:	686a      	ldr	r2, [r5, #4]
    853c:	4293      	cmp	r3, r2
    853e:	d0f6      	beq.n	852e <add_to_waitq_locked+0x36>
    8540:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8542:	2b00      	cmp	r3, #0
    8544:	d0f3      	beq.n	852e <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    8546:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    854a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    854e:	428a      	cmp	r2, r1
    8550:	d0f3      	beq.n	853a <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8552:	4291      	cmp	r1, r2
    8554:	ddf1      	ble.n	853a <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    8556:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8558:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    855c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    855e:	605c      	str	r4, [r3, #4]
}
    8560:	bd38      	pop	{r3, r4, r5, pc}
    8562:	bf00      	nop
    8564:	20000678 	.word	0x20000678
    8568:	0000cf36 	.word	0x0000cf36
    856c:	0000b80f 	.word	0x0000b80f
    8570:	0000ceed 	.word	0x0000ceed

00008574 <pend>:
{
    8574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8578:	4604      	mov	r4, r0
    857a:	4688      	mov	r8, r1
    857c:	4616      	mov	r6, r2
    857e:	461d      	mov	r5, r3
	__asm__ volatile(
    8580:	f04f 0320 	mov.w	r3, #32
    8584:	f3ef 8711 	mrs	r7, BASEPRI
    8588:	f383 8812 	msr	BASEPRI_MAX, r3
    858c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8590:	481f      	ldr	r0, [pc, #124]	; (8610 <pend+0x9c>)
    8592:	f7ff f8b5 	bl	7700 <z_spin_lock_valid>
    8596:	b968      	cbnz	r0, 85b4 <pend+0x40>
    8598:	4a1e      	ldr	r2, [pc, #120]	; (8614 <pend+0xa0>)
    859a:	491f      	ldr	r1, [pc, #124]	; (8618 <pend+0xa4>)
    859c:	481f      	ldr	r0, [pc, #124]	; (861c <pend+0xa8>)
    859e:	238e      	movs	r3, #142	; 0x8e
    85a0:	f001 fe10 	bl	a1c4 <assert_print>
    85a4:	491a      	ldr	r1, [pc, #104]	; (8610 <pend+0x9c>)
    85a6:	481e      	ldr	r0, [pc, #120]	; (8620 <pend+0xac>)
    85a8:	f001 fe0c 	bl	a1c4 <assert_print>
    85ac:	4819      	ldr	r0, [pc, #100]	; (8614 <pend+0xa0>)
    85ae:	218e      	movs	r1, #142	; 0x8e
    85b0:	f001 fe01 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    85b4:	4816      	ldr	r0, [pc, #88]	; (8610 <pend+0x9c>)
    85b6:	f7ff f8c1 	bl	773c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    85ba:	4620      	mov	r0, r4
    85bc:	4641      	mov	r1, r8
    85be:	f7ff ff9b 	bl	84f8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85c2:	4813      	ldr	r0, [pc, #76]	; (8610 <pend+0x9c>)
    85c4:	f7ff f8aa 	bl	771c <z_spin_unlock_valid>
    85c8:	b968      	cbnz	r0, 85e6 <pend+0x72>
    85ca:	4a12      	ldr	r2, [pc, #72]	; (8614 <pend+0xa0>)
    85cc:	4915      	ldr	r1, [pc, #84]	; (8624 <pend+0xb0>)
    85ce:	4813      	ldr	r0, [pc, #76]	; (861c <pend+0xa8>)
    85d0:	23b9      	movs	r3, #185	; 0xb9
    85d2:	f001 fdf7 	bl	a1c4 <assert_print>
    85d6:	490e      	ldr	r1, [pc, #56]	; (8610 <pend+0x9c>)
    85d8:	4813      	ldr	r0, [pc, #76]	; (8628 <pend+0xb4>)
    85da:	f001 fdf3 	bl	a1c4 <assert_print>
    85de:	480d      	ldr	r0, [pc, #52]	; (8614 <pend+0xa0>)
    85e0:	21b9      	movs	r1, #185	; 0xb9
    85e2:	f001 fde8 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    85e6:	f387 8811 	msr	BASEPRI, r7
    85ea:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    85ee:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    85f2:	bf08      	it	eq
    85f4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    85f8:	d008      	beq.n	860c <pend+0x98>
    85fa:	4632      	mov	r2, r6
    85fc:	462b      	mov	r3, r5
    85fe:	f104 0018 	add.w	r0, r4, #24
    8602:	490a      	ldr	r1, [pc, #40]	; (862c <pend+0xb8>)
}
    8604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8608:	f000 bd22 	b.w	9050 <z_add_timeout>
    860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8610:	20000f0c 	.word	0x20000f0c
    8614:	0000b959 	.word	0x0000b959
    8618:	0000b9b2 	.word	0x0000b9b2
    861c:	0000b80f 	.word	0x0000b80f
    8620:	0000b9c7 	.word	0x0000b9c7
    8624:	0000b986 	.word	0x0000b986
    8628:	0000b99d 	.word	0x0000b99d
    862c:	000088d5 	.word	0x000088d5

00008630 <z_pend_curr>:
{
    8630:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    8632:	4b11      	ldr	r3, [pc, #68]	; (8678 <z_pend_curr+0x48>)
{
    8634:	4604      	mov	r4, r0
	pending_current = _current;
    8636:	6898      	ldr	r0, [r3, #8]
    8638:	4b10      	ldr	r3, [pc, #64]	; (867c <z_pend_curr+0x4c>)
{
    863a:	460d      	mov	r5, r1
	pending_current = _current;
    863c:	6018      	str	r0, [r3, #0]
{
    863e:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    8640:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8644:	f7ff ff96 	bl	8574 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8648:	4620      	mov	r0, r4
    864a:	f7ff f867 	bl	771c <z_spin_unlock_valid>
    864e:	b968      	cbnz	r0, 866c <z_pend_curr+0x3c>
    8650:	4a0b      	ldr	r2, [pc, #44]	; (8680 <z_pend_curr+0x50>)
    8652:	490c      	ldr	r1, [pc, #48]	; (8684 <z_pend_curr+0x54>)
    8654:	480c      	ldr	r0, [pc, #48]	; (8688 <z_pend_curr+0x58>)
    8656:	23d0      	movs	r3, #208	; 0xd0
    8658:	f001 fdb4 	bl	a1c4 <assert_print>
    865c:	480b      	ldr	r0, [pc, #44]	; (868c <z_pend_curr+0x5c>)
    865e:	4621      	mov	r1, r4
    8660:	f001 fdb0 	bl	a1c4 <assert_print>
    8664:	4806      	ldr	r0, [pc, #24]	; (8680 <z_pend_curr+0x50>)
    8666:	21d0      	movs	r1, #208	; 0xd0
    8668:	f001 fda5 	bl	a1b6 <assert_post_action>
    866c:	4628      	mov	r0, r5
}
    866e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8672:	f7fb bb67 	b.w	3d44 <arch_swap>
    8676:	bf00      	nop
    8678:	20000ed0 	.word	0x20000ed0
    867c:	20000f00 	.word	0x20000f00
    8680:	0000b959 	.word	0x0000b959
    8684:	0000b986 	.word	0x0000b986
    8688:	0000b80f 	.word	0x0000b80f
    868c:	0000b99d 	.word	0x0000b99d

00008690 <z_set_prio>:
{
    8690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8692:	4604      	mov	r4, r0
    8694:	460e      	mov	r6, r1
	__asm__ volatile(
    8696:	f04f 0320 	mov.w	r3, #32
    869a:	f3ef 8711 	mrs	r7, BASEPRI
    869e:	f383 8812 	msr	BASEPRI_MAX, r3
    86a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86a6:	4839      	ldr	r0, [pc, #228]	; (878c <z_set_prio+0xfc>)
    86a8:	f7ff f82a 	bl	7700 <z_spin_lock_valid>
    86ac:	b968      	cbnz	r0, 86ca <z_set_prio+0x3a>
    86ae:	4a38      	ldr	r2, [pc, #224]	; (8790 <z_set_prio+0x100>)
    86b0:	4938      	ldr	r1, [pc, #224]	; (8794 <z_set_prio+0x104>)
    86b2:	4839      	ldr	r0, [pc, #228]	; (8798 <z_set_prio+0x108>)
    86b4:	238e      	movs	r3, #142	; 0x8e
    86b6:	f001 fd85 	bl	a1c4 <assert_print>
    86ba:	4934      	ldr	r1, [pc, #208]	; (878c <z_set_prio+0xfc>)
    86bc:	4837      	ldr	r0, [pc, #220]	; (879c <z_set_prio+0x10c>)
    86be:	f001 fd81 	bl	a1c4 <assert_print>
    86c2:	4833      	ldr	r0, [pc, #204]	; (8790 <z_set_prio+0x100>)
    86c4:	218e      	movs	r1, #142	; 0x8e
    86c6:	f001 fd76 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    86ca:	4830      	ldr	r0, [pc, #192]	; (878c <z_set_prio+0xfc>)
    86cc:	f7ff f836 	bl	773c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    86d0:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    86d2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    86d4:	b276      	sxtb	r6, r6
    86d6:	d128      	bne.n	872a <z_set_prio+0x9a>
	return node->next != NULL;
    86d8:	69a5      	ldr	r5, [r4, #24]
    86da:	bb35      	cbnz	r5, 872a <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    86dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    86e0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    86e2:	482f      	ldr	r0, [pc, #188]	; (87a0 <z_set_prio+0x110>)
    86e4:	4621      	mov	r1, r4
    86e6:	f7ff fdff 	bl	82e8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    86ea:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    86ec:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    86ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    86f2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    86f4:	4b2b      	ldr	r3, [pc, #172]	; (87a4 <z_set_prio+0x114>)
    86f6:	429c      	cmp	r4, r3
    86f8:	d109      	bne.n	870e <z_set_prio+0x7e>
    86fa:	492b      	ldr	r1, [pc, #172]	; (87a8 <z_set_prio+0x118>)
    86fc:	4826      	ldr	r0, [pc, #152]	; (8798 <z_set_prio+0x108>)
    86fe:	4a2b      	ldr	r2, [pc, #172]	; (87ac <z_set_prio+0x11c>)
    8700:	23ba      	movs	r3, #186	; 0xba
    8702:	f001 fd5f 	bl	a1c4 <assert_print>
    8706:	4829      	ldr	r0, [pc, #164]	; (87ac <z_set_prio+0x11c>)
    8708:	21ba      	movs	r1, #186	; 0xba
    870a:	f001 fd54 	bl	a1b6 <assert_post_action>
	return list->head == list;
    870e:	4a28      	ldr	r2, [pc, #160]	; (87b0 <z_set_prio+0x120>)
    8710:	4613      	mov	r3, r2
    8712:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8716:	4299      	cmp	r1, r3
    8718:	bf18      	it	ne
    871a:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    871c:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    871e:	b9f5      	cbnz	r5, 875e <z_set_prio+0xce>
	node->prev = tail;
    8720:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    8724:	600c      	str	r4, [r1, #0]
	list->tail = node;
    8726:	6254      	str	r4, [r2, #36]	; 0x24
}
    8728:	e026      	b.n	8778 <z_set_prio+0xe8>
			thread->base.prio = prio;
    872a:	73a6      	strb	r6, [r4, #14]
    872c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    872e:	4817      	ldr	r0, [pc, #92]	; (878c <z_set_prio+0xfc>)
    8730:	f7fe fff4 	bl	771c <z_spin_unlock_valid>
    8734:	b968      	cbnz	r0, 8752 <z_set_prio+0xc2>
    8736:	4a16      	ldr	r2, [pc, #88]	; (8790 <z_set_prio+0x100>)
    8738:	491e      	ldr	r1, [pc, #120]	; (87b4 <z_set_prio+0x124>)
    873a:	4817      	ldr	r0, [pc, #92]	; (8798 <z_set_prio+0x108>)
    873c:	23b9      	movs	r3, #185	; 0xb9
    873e:	f001 fd41 	bl	a1c4 <assert_print>
    8742:	4912      	ldr	r1, [pc, #72]	; (878c <z_set_prio+0xfc>)
    8744:	481c      	ldr	r0, [pc, #112]	; (87b8 <z_set_prio+0x128>)
    8746:	f001 fd3d 	bl	a1c4 <assert_print>
    874a:	4811      	ldr	r0, [pc, #68]	; (8790 <z_set_prio+0x100>)
    874c:	21b9      	movs	r1, #185	; 0xb9
    874e:	f001 fd32 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8752:	f387 8811 	msr	BASEPRI, r7
    8756:	f3bf 8f6f 	isb	sy
}
    875a:	4620      	mov	r0, r4
    875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    875e:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8762:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    8766:	42b0      	cmp	r0, r6
    8768:	d00b      	beq.n	8782 <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    876a:	4286      	cmp	r6, r0
    876c:	dd09      	ble.n	8782 <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    876e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    8770:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    8774:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8776:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8778:	2001      	movs	r0, #1
    877a:	f7ff fab3 	bl	7ce4 <update_cache>
    877e:	2401      	movs	r4, #1
    8780:	e7d5      	b.n	872e <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    8782:	42a9      	cmp	r1, r5
    8784:	d0cc      	beq.n	8720 <z_set_prio+0x90>
    8786:	682d      	ldr	r5, [r5, #0]
    8788:	e7c9      	b.n	871e <z_set_prio+0x8e>
    878a:	bf00      	nop
    878c:	20000f0c 	.word	0x20000f0c
    8790:	0000b959 	.word	0x0000b959
    8794:	0000b9b2 	.word	0x0000b9b2
    8798:	0000b80f 	.word	0x0000b80f
    879c:	0000b9c7 	.word	0x0000b9c7
    87a0:	20000ef0 	.word	0x20000ef0
    87a4:	20000678 	.word	0x20000678
    87a8:	0000cf36 	.word	0x0000cf36
    87ac:	0000ceed 	.word	0x0000ceed
    87b0:	20000ed0 	.word	0x20000ed0
    87b4:	0000b986 	.word	0x0000b986
    87b8:	0000b99d 	.word	0x0000b99d

000087bc <z_impl_k_thread_suspend>:
{
    87bc:	b570      	push	{r4, r5, r6, lr}
    87be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    87c0:	3018      	adds	r0, #24
    87c2:	f000 fd0f 	bl	91e4 <z_abort_timeout>
	__asm__ volatile(
    87c6:	f04f 0320 	mov.w	r3, #32
    87ca:	f3ef 8611 	mrs	r6, BASEPRI
    87ce:	f383 8812 	msr	BASEPRI_MAX, r3
    87d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87d6:	4825      	ldr	r0, [pc, #148]	; (886c <z_impl_k_thread_suspend+0xb0>)
    87d8:	f7fe ff92 	bl	7700 <z_spin_lock_valid>
    87dc:	b968      	cbnz	r0, 87fa <z_impl_k_thread_suspend+0x3e>
    87de:	4a24      	ldr	r2, [pc, #144]	; (8870 <z_impl_k_thread_suspend+0xb4>)
    87e0:	4924      	ldr	r1, [pc, #144]	; (8874 <z_impl_k_thread_suspend+0xb8>)
    87e2:	4825      	ldr	r0, [pc, #148]	; (8878 <z_impl_k_thread_suspend+0xbc>)
    87e4:	238e      	movs	r3, #142	; 0x8e
    87e6:	f001 fced 	bl	a1c4 <assert_print>
    87ea:	4920      	ldr	r1, [pc, #128]	; (886c <z_impl_k_thread_suspend+0xb0>)
    87ec:	4823      	ldr	r0, [pc, #140]	; (887c <z_impl_k_thread_suspend+0xc0>)
    87ee:	f001 fce9 	bl	a1c4 <assert_print>
    87f2:	481f      	ldr	r0, [pc, #124]	; (8870 <z_impl_k_thread_suspend+0xb4>)
    87f4:	218e      	movs	r1, #142	; 0x8e
    87f6:	f001 fcde 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    87fa:	481c      	ldr	r0, [pc, #112]	; (886c <z_impl_k_thread_suspend+0xb0>)
    87fc:	f7fe ff9e 	bl	773c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    8800:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8804:	7b63      	ldrb	r3, [r4, #13]
    8806:	2a00      	cmp	r2, #0
    8808:	da06      	bge.n	8818 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    880a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    880e:	481c      	ldr	r0, [pc, #112]	; (8880 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8810:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8812:	4621      	mov	r1, r4
    8814:	f7ff fd68 	bl	82e8 <z_priq_dumb_remove>
		update_cache(thread == _current);
    8818:	4d1a      	ldr	r5, [pc, #104]	; (8884 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    881a:	7b63      	ldrb	r3, [r4, #13]
    881c:	68a8      	ldr	r0, [r5, #8]
    881e:	f043 0310 	orr.w	r3, r3, #16
    8822:	7363      	strb	r3, [r4, #13]
    8824:	1b03      	subs	r3, r0, r4
    8826:	4258      	negs	r0, r3
    8828:	4158      	adcs	r0, r3
    882a:	f7ff fa5b 	bl	7ce4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    882e:	480f      	ldr	r0, [pc, #60]	; (886c <z_impl_k_thread_suspend+0xb0>)
    8830:	f7fe ff74 	bl	771c <z_spin_unlock_valid>
    8834:	b968      	cbnz	r0, 8852 <z_impl_k_thread_suspend+0x96>
    8836:	4a0e      	ldr	r2, [pc, #56]	; (8870 <z_impl_k_thread_suspend+0xb4>)
    8838:	4913      	ldr	r1, [pc, #76]	; (8888 <z_impl_k_thread_suspend+0xcc>)
    883a:	480f      	ldr	r0, [pc, #60]	; (8878 <z_impl_k_thread_suspend+0xbc>)
    883c:	23b9      	movs	r3, #185	; 0xb9
    883e:	f001 fcc1 	bl	a1c4 <assert_print>
    8842:	490a      	ldr	r1, [pc, #40]	; (886c <z_impl_k_thread_suspend+0xb0>)
    8844:	4811      	ldr	r0, [pc, #68]	; (888c <z_impl_k_thread_suspend+0xd0>)
    8846:	f001 fcbd 	bl	a1c4 <assert_print>
    884a:	4809      	ldr	r0, [pc, #36]	; (8870 <z_impl_k_thread_suspend+0xb4>)
    884c:	21b9      	movs	r1, #185	; 0xb9
    884e:	f001 fcb2 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8852:	f386 8811 	msr	BASEPRI, r6
    8856:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    885a:	68ab      	ldr	r3, [r5, #8]
    885c:	42a3      	cmp	r3, r4
    885e:	d103      	bne.n	8868 <z_impl_k_thread_suspend+0xac>
}
    8860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8864:	f002 b9fc 	b.w	ac60 <z_reschedule_unlocked>
}
    8868:	bd70      	pop	{r4, r5, r6, pc}
    886a:	bf00      	nop
    886c:	20000f0c 	.word	0x20000f0c
    8870:	0000b959 	.word	0x0000b959
    8874:	0000b9b2 	.word	0x0000b9b2
    8878:	0000b80f 	.word	0x0000b80f
    887c:	0000b9c7 	.word	0x0000b9c7
    8880:	20000ef0 	.word	0x20000ef0
    8884:	20000ed0 	.word	0x20000ed0
    8888:	0000b986 	.word	0x0000b986
    888c:	0000b99d 	.word	0x0000b99d

00008890 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    8890:	6883      	ldr	r3, [r0, #8]
{
    8892:	b510      	push	{r4, lr}
    8894:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8896:	b95b      	cbnz	r3, 88b0 <unpend_thread_no_timeout+0x20>
    8898:	490b      	ldr	r1, [pc, #44]	; (88c8 <unpend_thread_no_timeout+0x38>)
    889a:	480c      	ldr	r0, [pc, #48]	; (88cc <unpend_thread_no_timeout+0x3c>)
    889c:	4a0c      	ldr	r2, [pc, #48]	; (88d0 <unpend_thread_no_timeout+0x40>)
    889e:	f240 23b9 	movw	r3, #697	; 0x2b9
    88a2:	f001 fc8f 	bl	a1c4 <assert_print>
    88a6:	480a      	ldr	r0, [pc, #40]	; (88d0 <unpend_thread_no_timeout+0x40>)
    88a8:	f240 21b9 	movw	r1, #697	; 0x2b9
    88ac:	f001 fc83 	bl	a1b6 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    88b0:	68a0      	ldr	r0, [r4, #8]
    88b2:	4621      	mov	r1, r4
    88b4:	f7ff fd18 	bl	82e8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    88b8:	7b63      	ldrb	r3, [r4, #13]
    88ba:	f023 0302 	bic.w	r3, r3, #2
    88be:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    88c0:	2300      	movs	r3, #0
    88c2:	60a3      	str	r3, [r4, #8]
}
    88c4:	bd10      	pop	{r4, pc}
    88c6:	bf00      	nop
    88c8:	0000cf88 	.word	0x0000cf88
    88cc:	0000b80f 	.word	0x0000b80f
    88d0:	0000ceed 	.word	0x0000ceed

000088d4 <z_thread_timeout>:
{
    88d4:	b570      	push	{r4, r5, r6, lr}
    88d6:	4604      	mov	r4, r0
	__asm__ volatile(
    88d8:	f04f 0320 	mov.w	r3, #32
    88dc:	f3ef 8611 	mrs	r6, BASEPRI
    88e0:	f383 8812 	msr	BASEPRI_MAX, r3
    88e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88e8:	4820      	ldr	r0, [pc, #128]	; (896c <z_thread_timeout+0x98>)
    88ea:	f7fe ff09 	bl	7700 <z_spin_lock_valid>
    88ee:	b968      	cbnz	r0, 890c <z_thread_timeout+0x38>
    88f0:	4a1f      	ldr	r2, [pc, #124]	; (8970 <z_thread_timeout+0x9c>)
    88f2:	4920      	ldr	r1, [pc, #128]	; (8974 <z_thread_timeout+0xa0>)
    88f4:	4820      	ldr	r0, [pc, #128]	; (8978 <z_thread_timeout+0xa4>)
    88f6:	238e      	movs	r3, #142	; 0x8e
    88f8:	f001 fc64 	bl	a1c4 <assert_print>
    88fc:	491b      	ldr	r1, [pc, #108]	; (896c <z_thread_timeout+0x98>)
    88fe:	481f      	ldr	r0, [pc, #124]	; (897c <z_thread_timeout+0xa8>)
    8900:	f001 fc60 	bl	a1c4 <assert_print>
    8904:	481a      	ldr	r0, [pc, #104]	; (8970 <z_thread_timeout+0x9c>)
    8906:	218e      	movs	r1, #142	; 0x8e
    8908:	f001 fc55 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    890c:	4817      	ldr	r0, [pc, #92]	; (896c <z_thread_timeout+0x98>)
    890e:	f7fe ff15 	bl	773c <z_spin_lock_set_owner>
		if (!killed) {
    8912:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8916:	f013 0f28 	tst.w	r3, #40	; 0x28
    891a:	d110      	bne.n	893e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    891c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    8920:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    8924:	b113      	cbz	r3, 892c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    8926:	4628      	mov	r0, r5
    8928:	f7ff ffb2 	bl	8890 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    892c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8930:	f023 0314 	bic.w	r3, r3, #20
    8934:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8938:	4628      	mov	r0, r5
    893a:	f7ff fa0b 	bl	7d54 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    893e:	480b      	ldr	r0, [pc, #44]	; (896c <z_thread_timeout+0x98>)
    8940:	f7fe feec 	bl	771c <z_spin_unlock_valid>
    8944:	b968      	cbnz	r0, 8962 <z_thread_timeout+0x8e>
    8946:	4a0a      	ldr	r2, [pc, #40]	; (8970 <z_thread_timeout+0x9c>)
    8948:	490d      	ldr	r1, [pc, #52]	; (8980 <z_thread_timeout+0xac>)
    894a:	480b      	ldr	r0, [pc, #44]	; (8978 <z_thread_timeout+0xa4>)
    894c:	23b9      	movs	r3, #185	; 0xb9
    894e:	f001 fc39 	bl	a1c4 <assert_print>
    8952:	4906      	ldr	r1, [pc, #24]	; (896c <z_thread_timeout+0x98>)
    8954:	480b      	ldr	r0, [pc, #44]	; (8984 <z_thread_timeout+0xb0>)
    8956:	f001 fc35 	bl	a1c4 <assert_print>
    895a:	4805      	ldr	r0, [pc, #20]	; (8970 <z_thread_timeout+0x9c>)
    895c:	21b9      	movs	r1, #185	; 0xb9
    895e:	f001 fc2a 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8962:	f386 8811 	msr	BASEPRI, r6
    8966:	f3bf 8f6f 	isb	sy
}
    896a:	bd70      	pop	{r4, r5, r6, pc}
    896c:	20000f0c 	.word	0x20000f0c
    8970:	0000b959 	.word	0x0000b959
    8974:	0000b9b2 	.word	0x0000b9b2
    8978:	0000b80f 	.word	0x0000b80f
    897c:	0000b9c7 	.word	0x0000b9c7
    8980:	0000b986 	.word	0x0000b986
    8984:	0000b99d 	.word	0x0000b99d

00008988 <z_unpend1_no_timeout>:
{
    8988:	b570      	push	{r4, r5, r6, lr}
    898a:	4605      	mov	r5, r0
	__asm__ volatile(
    898c:	f04f 0320 	mov.w	r3, #32
    8990:	f3ef 8611 	mrs	r6, BASEPRI
    8994:	f383 8812 	msr	BASEPRI_MAX, r3
    8998:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    899c:	481a      	ldr	r0, [pc, #104]	; (8a08 <z_unpend1_no_timeout+0x80>)
    899e:	f7fe feaf 	bl	7700 <z_spin_lock_valid>
    89a2:	b968      	cbnz	r0, 89c0 <z_unpend1_no_timeout+0x38>
    89a4:	4a19      	ldr	r2, [pc, #100]	; (8a0c <z_unpend1_no_timeout+0x84>)
    89a6:	491a      	ldr	r1, [pc, #104]	; (8a10 <z_unpend1_no_timeout+0x88>)
    89a8:	481a      	ldr	r0, [pc, #104]	; (8a14 <z_unpend1_no_timeout+0x8c>)
    89aa:	238e      	movs	r3, #142	; 0x8e
    89ac:	f001 fc0a 	bl	a1c4 <assert_print>
    89b0:	4915      	ldr	r1, [pc, #84]	; (8a08 <z_unpend1_no_timeout+0x80>)
    89b2:	4819      	ldr	r0, [pc, #100]	; (8a18 <z_unpend1_no_timeout+0x90>)
    89b4:	f001 fc06 	bl	a1c4 <assert_print>
    89b8:	4814      	ldr	r0, [pc, #80]	; (8a0c <z_unpend1_no_timeout+0x84>)
    89ba:	218e      	movs	r1, #142	; 0x8e
    89bc:	f001 fbfb 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    89c0:	4811      	ldr	r0, [pc, #68]	; (8a08 <z_unpend1_no_timeout+0x80>)
    89c2:	f7fe febb 	bl	773c <z_spin_lock_set_owner>
	return list->head == list;
    89c6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89c8:	42a5      	cmp	r5, r4
    89ca:	d01b      	beq.n	8a04 <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
    89cc:	b114      	cbz	r4, 89d4 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    89ce:	4620      	mov	r0, r4
    89d0:	f7ff ff5e 	bl	8890 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89d4:	480c      	ldr	r0, [pc, #48]	; (8a08 <z_unpend1_no_timeout+0x80>)
    89d6:	f7fe fea1 	bl	771c <z_spin_unlock_valid>
    89da:	b968      	cbnz	r0, 89f8 <z_unpend1_no_timeout+0x70>
    89dc:	4a0b      	ldr	r2, [pc, #44]	; (8a0c <z_unpend1_no_timeout+0x84>)
    89de:	490f      	ldr	r1, [pc, #60]	; (8a1c <z_unpend1_no_timeout+0x94>)
    89e0:	480c      	ldr	r0, [pc, #48]	; (8a14 <z_unpend1_no_timeout+0x8c>)
    89e2:	23b9      	movs	r3, #185	; 0xb9
    89e4:	f001 fbee 	bl	a1c4 <assert_print>
    89e8:	4907      	ldr	r1, [pc, #28]	; (8a08 <z_unpend1_no_timeout+0x80>)
    89ea:	480d      	ldr	r0, [pc, #52]	; (8a20 <z_unpend1_no_timeout+0x98>)
    89ec:	f001 fbea 	bl	a1c4 <assert_print>
    89f0:	4806      	ldr	r0, [pc, #24]	; (8a0c <z_unpend1_no_timeout+0x84>)
    89f2:	21b9      	movs	r1, #185	; 0xb9
    89f4:	f001 fbdf 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    89f8:	f386 8811 	msr	BASEPRI, r6
    89fc:	f3bf 8f6f 	isb	sy
}
    8a00:	4620      	mov	r0, r4
    8a02:	bd70      	pop	{r4, r5, r6, pc}
    8a04:	2400      	movs	r4, #0
    8a06:	e7e5      	b.n	89d4 <z_unpend1_no_timeout+0x4c>
    8a08:	20000f0c 	.word	0x20000f0c
    8a0c:	0000b959 	.word	0x0000b959
    8a10:	0000b9b2 	.word	0x0000b9b2
    8a14:	0000b80f 	.word	0x0000b80f
    8a18:	0000b9c7 	.word	0x0000b9c7
    8a1c:	0000b986 	.word	0x0000b986
    8a20:	0000b99d 	.word	0x0000b99d

00008a24 <z_unpend_first_thread>:
{
    8a24:	b570      	push	{r4, r5, r6, lr}
    8a26:	4605      	mov	r5, r0
	__asm__ volatile(
    8a28:	f04f 0320 	mov.w	r3, #32
    8a2c:	f3ef 8611 	mrs	r6, BASEPRI
    8a30:	f383 8812 	msr	BASEPRI_MAX, r3
    8a34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a38:	481c      	ldr	r0, [pc, #112]	; (8aac <z_unpend_first_thread+0x88>)
    8a3a:	f7fe fe61 	bl	7700 <z_spin_lock_valid>
    8a3e:	b968      	cbnz	r0, 8a5c <z_unpend_first_thread+0x38>
    8a40:	4a1b      	ldr	r2, [pc, #108]	; (8ab0 <z_unpend_first_thread+0x8c>)
    8a42:	491c      	ldr	r1, [pc, #112]	; (8ab4 <z_unpend_first_thread+0x90>)
    8a44:	481c      	ldr	r0, [pc, #112]	; (8ab8 <z_unpend_first_thread+0x94>)
    8a46:	238e      	movs	r3, #142	; 0x8e
    8a48:	f001 fbbc 	bl	a1c4 <assert_print>
    8a4c:	4917      	ldr	r1, [pc, #92]	; (8aac <z_unpend_first_thread+0x88>)
    8a4e:	481b      	ldr	r0, [pc, #108]	; (8abc <z_unpend_first_thread+0x98>)
    8a50:	f001 fbb8 	bl	a1c4 <assert_print>
    8a54:	4816      	ldr	r0, [pc, #88]	; (8ab0 <z_unpend_first_thread+0x8c>)
    8a56:	218e      	movs	r1, #142	; 0x8e
    8a58:	f001 fbad 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    8a5c:	4813      	ldr	r0, [pc, #76]	; (8aac <z_unpend_first_thread+0x88>)
    8a5e:	f7fe fe6d 	bl	773c <z_spin_lock_set_owner>
	return list->head == list;
    8a62:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a64:	42a5      	cmp	r5, r4
    8a66:	d01f      	beq.n	8aa8 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    8a68:	b134      	cbz	r4, 8a78 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8a6a:	4620      	mov	r0, r4
    8a6c:	f7ff ff10 	bl	8890 <unpend_thread_no_timeout>
    8a70:	f104 0018 	add.w	r0, r4, #24
    8a74:	f000 fbb6 	bl	91e4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a78:	480c      	ldr	r0, [pc, #48]	; (8aac <z_unpend_first_thread+0x88>)
    8a7a:	f7fe fe4f 	bl	771c <z_spin_unlock_valid>
    8a7e:	b968      	cbnz	r0, 8a9c <z_unpend_first_thread+0x78>
    8a80:	4a0b      	ldr	r2, [pc, #44]	; (8ab0 <z_unpend_first_thread+0x8c>)
    8a82:	490f      	ldr	r1, [pc, #60]	; (8ac0 <z_unpend_first_thread+0x9c>)
    8a84:	480c      	ldr	r0, [pc, #48]	; (8ab8 <z_unpend_first_thread+0x94>)
    8a86:	23b9      	movs	r3, #185	; 0xb9
    8a88:	f001 fb9c 	bl	a1c4 <assert_print>
    8a8c:	4907      	ldr	r1, [pc, #28]	; (8aac <z_unpend_first_thread+0x88>)
    8a8e:	480d      	ldr	r0, [pc, #52]	; (8ac4 <z_unpend_first_thread+0xa0>)
    8a90:	f001 fb98 	bl	a1c4 <assert_print>
    8a94:	4806      	ldr	r0, [pc, #24]	; (8ab0 <z_unpend_first_thread+0x8c>)
    8a96:	21b9      	movs	r1, #185	; 0xb9
    8a98:	f001 fb8d 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8a9c:	f386 8811 	msr	BASEPRI, r6
    8aa0:	f3bf 8f6f 	isb	sy
}
    8aa4:	4620      	mov	r0, r4
    8aa6:	bd70      	pop	{r4, r5, r6, pc}
    8aa8:	2400      	movs	r4, #0
    8aaa:	e7e5      	b.n	8a78 <z_unpend_first_thread+0x54>
    8aac:	20000f0c 	.word	0x20000f0c
    8ab0:	0000b959 	.word	0x0000b959
    8ab4:	0000b9b2 	.word	0x0000b9b2
    8ab8:	0000b80f 	.word	0x0000b80f
    8abc:	0000b9c7 	.word	0x0000b9c7
    8ac0:	0000b986 	.word	0x0000b986
    8ac4:	0000b99d 	.word	0x0000b99d

00008ac8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8ac8:	4b04      	ldr	r3, [pc, #16]	; (8adc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8aca:	2100      	movs	r1, #0
    8acc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    8ad0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    8ad4:	4608      	mov	r0, r1
    8ad6:	f7ff b989 	b.w	7dec <k_sched_time_slice_set>
    8ada:	bf00      	nop
    8adc:	20000ed0 	.word	0x20000ed0

00008ae0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    8ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ae2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8ae6:	b173      	cbz	r3, 8b06 <z_impl_k_yield+0x26>
    8ae8:	493f      	ldr	r1, [pc, #252]	; (8be8 <z_impl_k_yield+0x108>)
    8aea:	4a40      	ldr	r2, [pc, #256]	; (8bec <z_impl_k_yield+0x10c>)
    8aec:	4840      	ldr	r0, [pc, #256]	; (8bf0 <z_impl_k_yield+0x110>)
    8aee:	f240 5332 	movw	r3, #1330	; 0x532
    8af2:	f001 fb67 	bl	a1c4 <assert_print>
    8af6:	483f      	ldr	r0, [pc, #252]	; (8bf4 <z_impl_k_yield+0x114>)
    8af8:	f001 fb64 	bl	a1c4 <assert_print>
    8afc:	483b      	ldr	r0, [pc, #236]	; (8bec <z_impl_k_yield+0x10c>)
    8afe:	f240 5132 	movw	r1, #1330	; 0x532
    8b02:	f001 fb58 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8b06:	f04f 0320 	mov.w	r3, #32
    8b0a:	f3ef 8611 	mrs	r6, BASEPRI
    8b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    8b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b16:	4838      	ldr	r0, [pc, #224]	; (8bf8 <z_impl_k_yield+0x118>)
    8b18:	f7fe fdf2 	bl	7700 <z_spin_lock_valid>
    8b1c:	b968      	cbnz	r0, 8b3a <z_impl_k_yield+0x5a>
    8b1e:	4a37      	ldr	r2, [pc, #220]	; (8bfc <z_impl_k_yield+0x11c>)
    8b20:	4937      	ldr	r1, [pc, #220]	; (8c00 <z_impl_k_yield+0x120>)
    8b22:	4833      	ldr	r0, [pc, #204]	; (8bf0 <z_impl_k_yield+0x110>)
    8b24:	238e      	movs	r3, #142	; 0x8e
    8b26:	f001 fb4d 	bl	a1c4 <assert_print>
    8b2a:	4933      	ldr	r1, [pc, #204]	; (8bf8 <z_impl_k_yield+0x118>)
    8b2c:	4835      	ldr	r0, [pc, #212]	; (8c04 <z_impl_k_yield+0x124>)
    8b2e:	f001 fb49 	bl	a1c4 <assert_print>
    8b32:	4832      	ldr	r0, [pc, #200]	; (8bfc <z_impl_k_yield+0x11c>)
    8b34:	218e      	movs	r1, #142	; 0x8e
    8b36:	f001 fb3e 	bl	a1b6 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8b3a:	4d33      	ldr	r5, [pc, #204]	; (8c08 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    8b3c:	482e      	ldr	r0, [pc, #184]	; (8bf8 <z_impl_k_yield+0x118>)
    8b3e:	f7fe fdfd 	bl	773c <z_spin_lock_set_owner>
    8b42:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b44:	7b4b      	ldrb	r3, [r1, #13]
    8b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b4a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8b4c:	f105 0020 	add.w	r0, r5, #32
    8b50:	f7ff fbca 	bl	82e8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8b54:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8b56:	7b63      	ldrb	r3, [r4, #13]
    8b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b5c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8b5e:	4b2b      	ldr	r3, [pc, #172]	; (8c0c <z_impl_k_yield+0x12c>)
    8b60:	429c      	cmp	r4, r3
    8b62:	d109      	bne.n	8b78 <z_impl_k_yield+0x98>
    8b64:	492a      	ldr	r1, [pc, #168]	; (8c10 <z_impl_k_yield+0x130>)
    8b66:	4822      	ldr	r0, [pc, #136]	; (8bf0 <z_impl_k_yield+0x110>)
    8b68:	4a20      	ldr	r2, [pc, #128]	; (8bec <z_impl_k_yield+0x10c>)
    8b6a:	23ba      	movs	r3, #186	; 0xba
    8b6c:	f001 fb2a 	bl	a1c4 <assert_print>
    8b70:	481e      	ldr	r0, [pc, #120]	; (8bec <z_impl_k_yield+0x10c>)
    8b72:	21ba      	movs	r1, #186	; 0xba
    8b74:	f001 fb1f 	bl	a1b6 <assert_post_action>
	return list->head == list;
    8b78:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b7a:	4926      	ldr	r1, [pc, #152]	; (8c14 <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    8b7c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b7e:	428b      	cmp	r3, r1
    8b80:	bf08      	it	eq
    8b82:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b84:	b923      	cbnz	r3, 8b90 <z_impl_k_yield+0xb0>
	node->prev = tail;
    8b86:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    8b8a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8b8c:	626c      	str	r4, [r5, #36]	; 0x24
}
    8b8e:	e00c      	b.n	8baa <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    8b90:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8b94:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    8b98:	42b8      	cmp	r0, r7
    8b9a:	d020      	beq.n	8bde <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b9c:	4287      	cmp	r7, r0
    8b9e:	dd1e      	ble.n	8bde <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    8ba0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8ba2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8ba6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8ba8:	605c      	str	r4, [r3, #4]
	update_cache(1);
    8baa:	2001      	movs	r0, #1
    8bac:	f7ff f89a 	bl	7ce4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bb0:	4811      	ldr	r0, [pc, #68]	; (8bf8 <z_impl_k_yield+0x118>)
    8bb2:	f7fe fdb3 	bl	771c <z_spin_unlock_valid>
    8bb6:	b968      	cbnz	r0, 8bd4 <z_impl_k_yield+0xf4>
    8bb8:	4a10      	ldr	r2, [pc, #64]	; (8bfc <z_impl_k_yield+0x11c>)
    8bba:	4917      	ldr	r1, [pc, #92]	; (8c18 <z_impl_k_yield+0x138>)
    8bbc:	480c      	ldr	r0, [pc, #48]	; (8bf0 <z_impl_k_yield+0x110>)
    8bbe:	23d0      	movs	r3, #208	; 0xd0
    8bc0:	f001 fb00 	bl	a1c4 <assert_print>
    8bc4:	490c      	ldr	r1, [pc, #48]	; (8bf8 <z_impl_k_yield+0x118>)
    8bc6:	4815      	ldr	r0, [pc, #84]	; (8c1c <z_impl_k_yield+0x13c>)
    8bc8:	f001 fafc 	bl	a1c4 <assert_print>
    8bcc:	480b      	ldr	r0, [pc, #44]	; (8bfc <z_impl_k_yield+0x11c>)
    8bce:	21d0      	movs	r1, #208	; 0xd0
    8bd0:	f001 faf1 	bl	a1b6 <assert_post_action>
    8bd4:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    8bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8bda:	f7fb b8b3 	b.w	3d44 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8bde:	4293      	cmp	r3, r2
    8be0:	d0d1      	beq.n	8b86 <z_impl_k_yield+0xa6>
    8be2:	681b      	ldr	r3, [r3, #0]
    8be4:	e7ce      	b.n	8b84 <z_impl_k_yield+0xa4>
    8be6:	bf00      	nop
    8be8:	0000cd15 	.word	0x0000cd15
    8bec:	0000ceed 	.word	0x0000ceed
    8bf0:	0000b80f 	.word	0x0000b80f
    8bf4:	0000ce4b 	.word	0x0000ce4b
    8bf8:	20000f0c 	.word	0x20000f0c
    8bfc:	0000b959 	.word	0x0000b959
    8c00:	0000b9b2 	.word	0x0000b9b2
    8c04:	0000b9c7 	.word	0x0000b9c7
    8c08:	20000ed0 	.word	0x20000ed0
    8c0c:	20000678 	.word	0x20000678
    8c10:	0000cf36 	.word	0x0000cf36
    8c14:	20000ef0 	.word	0x20000ef0
    8c18:	0000b986 	.word	0x0000b986
    8c1c:	0000b99d 	.word	0x0000b99d

00008c20 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c24:	4605      	mov	r5, r0
    8c26:	460e      	mov	r6, r1
    8c28:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8c2c:	b173      	cbz	r3, 8c4c <z_tick_sleep+0x2c>
    8c2e:	4941      	ldr	r1, [pc, #260]	; (8d34 <z_tick_sleep+0x114>)
    8c30:	4a41      	ldr	r2, [pc, #260]	; (8d38 <z_tick_sleep+0x118>)
    8c32:	4842      	ldr	r0, [pc, #264]	; (8d3c <z_tick_sleep+0x11c>)
    8c34:	f240 534e 	movw	r3, #1358	; 0x54e
    8c38:	f001 fac4 	bl	a1c4 <assert_print>
    8c3c:	4840      	ldr	r0, [pc, #256]	; (8d40 <z_tick_sleep+0x120>)
    8c3e:	f001 fac1 	bl	a1c4 <assert_print>
    8c42:	483d      	ldr	r0, [pc, #244]	; (8d38 <z_tick_sleep+0x118>)
    8c44:	f240 514e 	movw	r1, #1358	; 0x54e
    8c48:	f001 fab5 	bl	a1b6 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8c4c:	ea55 0306 	orrs.w	r3, r5, r6
    8c50:	d103      	bne.n	8c5a <z_tick_sleep+0x3a>
	z_impl_k_yield();
    8c52:	f7ff ff45 	bl	8ae0 <z_impl_k_yield>
		k_yield();
		return 0;
    8c56:	2000      	movs	r0, #0
    8c58:	e066      	b.n	8d28 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8c5a:	1caa      	adds	r2, r5, #2
    8c5c:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    8c60:	db64      	blt.n	8d2c <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8c62:	f002 f807 	bl	ac74 <sys_clock_tick_get_32>
    8c66:	1944      	adds	r4, r0, r5
    8c68:	f04f 0320 	mov.w	r3, #32
    8c6c:	f3ef 8811 	mrs	r8, BASEPRI
    8c70:	f383 8812 	msr	BASEPRI_MAX, r3
    8c74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c78:	4832      	ldr	r0, [pc, #200]	; (8d44 <z_tick_sleep+0x124>)
    8c7a:	f7fe fd41 	bl	7700 <z_spin_lock_valid>
    8c7e:	b968      	cbnz	r0, 8c9c <z_tick_sleep+0x7c>
    8c80:	4a31      	ldr	r2, [pc, #196]	; (8d48 <z_tick_sleep+0x128>)
    8c82:	4932      	ldr	r1, [pc, #200]	; (8d4c <z_tick_sleep+0x12c>)
    8c84:	482d      	ldr	r0, [pc, #180]	; (8d3c <z_tick_sleep+0x11c>)
    8c86:	238e      	movs	r3, #142	; 0x8e
    8c88:	f001 fa9c 	bl	a1c4 <assert_print>
    8c8c:	492d      	ldr	r1, [pc, #180]	; (8d44 <z_tick_sleep+0x124>)
    8c8e:	4830      	ldr	r0, [pc, #192]	; (8d50 <z_tick_sleep+0x130>)
    8c90:	f001 fa98 	bl	a1c4 <assert_print>
    8c94:	482c      	ldr	r0, [pc, #176]	; (8d48 <z_tick_sleep+0x128>)
    8c96:	218e      	movs	r1, #142	; 0x8e
    8c98:	f001 fa8d 	bl	a1b6 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8c9c:	4f2d      	ldr	r7, [pc, #180]	; (8d54 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    8c9e:	4829      	ldr	r0, [pc, #164]	; (8d44 <z_tick_sleep+0x124>)
    8ca0:	f7fe fd4c 	bl	773c <z_spin_lock_set_owner>
    8ca4:	4b2c      	ldr	r3, [pc, #176]	; (8d58 <z_tick_sleep+0x138>)
    8ca6:	68b8      	ldr	r0, [r7, #8]
    8ca8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8caa:	f7ff fc09 	bl	84c0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8cae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8cb0:	492a      	ldr	r1, [pc, #168]	; (8d5c <z_tick_sleep+0x13c>)
    8cb2:	462a      	mov	r2, r5
    8cb4:	4633      	mov	r3, r6
    8cb6:	3018      	adds	r0, #24
    8cb8:	f000 f9ca 	bl	9050 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8cbc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cbe:	4821      	ldr	r0, [pc, #132]	; (8d44 <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8cc0:	7b53      	ldrb	r3, [r2, #13]
    8cc2:	f043 0310 	orr.w	r3, r3, #16
    8cc6:	7353      	strb	r3, [r2, #13]
    8cc8:	f7fe fd28 	bl	771c <z_spin_unlock_valid>
    8ccc:	b968      	cbnz	r0, 8cea <z_tick_sleep+0xca>
    8cce:	4a1e      	ldr	r2, [pc, #120]	; (8d48 <z_tick_sleep+0x128>)
    8cd0:	4923      	ldr	r1, [pc, #140]	; (8d60 <z_tick_sleep+0x140>)
    8cd2:	481a      	ldr	r0, [pc, #104]	; (8d3c <z_tick_sleep+0x11c>)
    8cd4:	23d0      	movs	r3, #208	; 0xd0
    8cd6:	f001 fa75 	bl	a1c4 <assert_print>
    8cda:	491a      	ldr	r1, [pc, #104]	; (8d44 <z_tick_sleep+0x124>)
    8cdc:	4821      	ldr	r0, [pc, #132]	; (8d64 <z_tick_sleep+0x144>)
    8cde:	f001 fa71 	bl	a1c4 <assert_print>
    8ce2:	4819      	ldr	r0, [pc, #100]	; (8d48 <z_tick_sleep+0x128>)
    8ce4:	21d0      	movs	r1, #208	; 0xd0
    8ce6:	f001 fa66 	bl	a1b6 <assert_post_action>
    8cea:	4640      	mov	r0, r8
    8cec:	f7fb f82a 	bl	3d44 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    8cf0:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8cf2:	7b5b      	ldrb	r3, [r3, #13]
    8cf4:	06db      	lsls	r3, r3, #27
    8cf6:	d50e      	bpl.n	8d16 <z_tick_sleep+0xf6>
    8cf8:	491b      	ldr	r1, [pc, #108]	; (8d68 <z_tick_sleep+0x148>)
    8cfa:	4a0f      	ldr	r2, [pc, #60]	; (8d38 <z_tick_sleep+0x118>)
    8cfc:	480f      	ldr	r0, [pc, #60]	; (8d3c <z_tick_sleep+0x11c>)
    8cfe:	f240 536f 	movw	r3, #1391	; 0x56f
    8d02:	f001 fa5f 	bl	a1c4 <assert_print>
    8d06:	480e      	ldr	r0, [pc, #56]	; (8d40 <z_tick_sleep+0x120>)
    8d08:	f001 fa5c 	bl	a1c4 <assert_print>
    8d0c:	480a      	ldr	r0, [pc, #40]	; (8d38 <z_tick_sleep+0x118>)
    8d0e:	f240 516f 	movw	r1, #1391	; 0x56f
    8d12:	f001 fa50 	bl	a1b6 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8d16:	f001 ffad 	bl	ac74 <sys_clock_tick_get_32>
    8d1a:	1a20      	subs	r0, r4, r0
    8d1c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8d20:	2801      	cmp	r0, #1
    8d22:	f173 0300 	sbcs.w	r3, r3, #0
    8d26:	db96      	blt.n	8c56 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    8d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8d2c:	f06f 0401 	mvn.w	r4, #1
    8d30:	1b64      	subs	r4, r4, r5
    8d32:	e799      	b.n	8c68 <z_tick_sleep+0x48>
    8d34:	0000cd15 	.word	0x0000cd15
    8d38:	0000ceed 	.word	0x0000ceed
    8d3c:	0000b80f 	.word	0x0000b80f
    8d40:	0000ce4b 	.word	0x0000ce4b
    8d44:	20000f0c 	.word	0x20000f0c
    8d48:	0000b959 	.word	0x0000b959
    8d4c:	0000b9b2 	.word	0x0000b9b2
    8d50:	0000b9c7 	.word	0x0000b9c7
    8d54:	20000ed0 	.word	0x20000ed0
    8d58:	20000f00 	.word	0x20000f00
    8d5c:	000088d5 	.word	0x000088d5
    8d60:	0000b986 	.word	0x0000b986
    8d64:	0000b99d 	.word	0x0000b99d
    8d68:	0000cf9f 	.word	0x0000cf9f

00008d6c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8d6c:	b538      	push	{r3, r4, r5, lr}
    8d6e:	4605      	mov	r5, r0
    8d70:	460c      	mov	r4, r1
    8d72:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8d76:	b173      	cbz	r3, 8d96 <z_impl_k_sleep+0x2a>
    8d78:	4913      	ldr	r1, [pc, #76]	; (8dc8 <z_impl_k_sleep+0x5c>)
    8d7a:	4a14      	ldr	r2, [pc, #80]	; (8dcc <z_impl_k_sleep+0x60>)
    8d7c:	4814      	ldr	r0, [pc, #80]	; (8dd0 <z_impl_k_sleep+0x64>)
    8d7e:	f240 537e 	movw	r3, #1406	; 0x57e
    8d82:	f001 fa1f 	bl	a1c4 <assert_print>
    8d86:	4813      	ldr	r0, [pc, #76]	; (8dd4 <z_impl_k_sleep+0x68>)
    8d88:	f001 fa1c 	bl	a1c4 <assert_print>
    8d8c:	480f      	ldr	r0, [pc, #60]	; (8dcc <z_impl_k_sleep+0x60>)
    8d8e:	f240 517e 	movw	r1, #1406	; 0x57e
    8d92:	f001 fa10 	bl	a1b6 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d96:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8d9a:	bf08      	it	eq
    8d9c:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8da0:	d106      	bne.n	8db0 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    8da2:	4b0d      	ldr	r3, [pc, #52]	; (8dd8 <z_impl_k_sleep+0x6c>)
    8da4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8da6:	f7ff fd09 	bl	87bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8dae:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8db0:	4628      	mov	r0, r5
    8db2:	4621      	mov	r1, r4
    8db4:	f7ff ff34 	bl	8c20 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    8db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8dbc:	fb80 0303 	smull	r0, r3, r0, r3
    8dc0:	0bc0      	lsrs	r0, r0, #15
    8dc2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8dc6:	e7f2      	b.n	8dae <z_impl_k_sleep+0x42>
    8dc8:	0000cd15 	.word	0x0000cd15
    8dcc:	0000ceed 	.word	0x0000ceed
    8dd0:	0000b80f 	.word	0x0000b80f
    8dd4:	0000ce4b 	.word	0x0000ce4b
    8dd8:	20000ed0 	.word	0x20000ed0

00008ddc <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    8ddc:	b538      	push	{r3, r4, r5, lr}
    8dde:	4c0a      	ldr	r4, [pc, #40]	; (8e08 <z_impl_k_usleep+0x2c>)
    8de0:	4a0a      	ldr	r2, [pc, #40]	; (8e0c <z_impl_k_usleep+0x30>)
    8de2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    8de6:	2100      	movs	r1, #0
    8de8:	fbc0 4105 	smlal	r4, r1, r0, r5
    8dec:	2300      	movs	r3, #0
    8dee:	4620      	mov	r0, r4
    8df0:	f7f7 fed2 	bl	b98 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    8df4:	17c1      	asrs	r1, r0, #31
    8df6:	f7ff ff13 	bl	8c20 <z_tick_sleep>
    8dfa:	4b04      	ldr	r3, [pc, #16]	; (8e0c <z_impl_k_usleep+0x30>)
    8dfc:	fb80 0303 	smull	r0, r3, r0, r3
    8e00:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    8e02:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    8e06:	bd38      	pop	{r3, r4, r5, pc}
    8e08:	000f423f 	.word	0x000f423f
    8e0c:	000f4240 	.word	0x000f4240

00008e10 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8e10:	4b01      	ldr	r3, [pc, #4]	; (8e18 <z_impl_z_current_get+0x8>)
    8e12:	6898      	ldr	r0, [r3, #8]
    8e14:	4770      	bx	lr
    8e16:	bf00      	nop
    8e18:	20000ed0 	.word	0x20000ed0

00008e1c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e20:	4604      	mov	r4, r0
    8e22:	f04f 0320 	mov.w	r3, #32
    8e26:	f3ef 8611 	mrs	r6, BASEPRI
    8e2a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e32:	4848      	ldr	r0, [pc, #288]	; (8f54 <z_thread_abort+0x138>)
    8e34:	f7fe fc64 	bl	7700 <z_spin_lock_valid>
    8e38:	b968      	cbnz	r0, 8e56 <z_thread_abort+0x3a>
    8e3a:	4a47      	ldr	r2, [pc, #284]	; (8f58 <z_thread_abort+0x13c>)
    8e3c:	4947      	ldr	r1, [pc, #284]	; (8f5c <z_thread_abort+0x140>)
    8e3e:	4848      	ldr	r0, [pc, #288]	; (8f60 <z_thread_abort+0x144>)
    8e40:	238e      	movs	r3, #142	; 0x8e
    8e42:	f001 f9bf 	bl	a1c4 <assert_print>
    8e46:	4943      	ldr	r1, [pc, #268]	; (8f54 <z_thread_abort+0x138>)
    8e48:	4846      	ldr	r0, [pc, #280]	; (8f64 <z_thread_abort+0x148>)
    8e4a:	f001 f9bb 	bl	a1c4 <assert_print>
    8e4e:	4842      	ldr	r0, [pc, #264]	; (8f58 <z_thread_abort+0x13c>)
    8e50:	218e      	movs	r1, #142	; 0x8e
    8e52:	f001 f9b0 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    8e56:	483f      	ldr	r0, [pc, #252]	; (8f54 <z_thread_abort+0x138>)
    8e58:	f7fe fc70 	bl	773c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8e5c:	7b63      	ldrb	r3, [r4, #13]
    8e5e:	071a      	lsls	r2, r3, #28
    8e60:	d517      	bpl.n	8e92 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e62:	483c      	ldr	r0, [pc, #240]	; (8f54 <z_thread_abort+0x138>)
    8e64:	f7fe fc5a 	bl	771c <z_spin_unlock_valid>
    8e68:	b968      	cbnz	r0, 8e86 <z_thread_abort+0x6a>
    8e6a:	4a3b      	ldr	r2, [pc, #236]	; (8f58 <z_thread_abort+0x13c>)
    8e6c:	493e      	ldr	r1, [pc, #248]	; (8f68 <z_thread_abort+0x14c>)
    8e6e:	483c      	ldr	r0, [pc, #240]	; (8f60 <z_thread_abort+0x144>)
    8e70:	23b9      	movs	r3, #185	; 0xb9
    8e72:	f001 f9a7 	bl	a1c4 <assert_print>
    8e76:	4937      	ldr	r1, [pc, #220]	; (8f54 <z_thread_abort+0x138>)
    8e78:	483c      	ldr	r0, [pc, #240]	; (8f6c <z_thread_abort+0x150>)
    8e7a:	f001 f9a3 	bl	a1c4 <assert_print>
    8e7e:	4836      	ldr	r0, [pc, #216]	; (8f58 <z_thread_abort+0x13c>)
    8e80:	21b9      	movs	r1, #185	; 0xb9
    8e82:	f001 f998 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    8e86:	f386 8811 	msr	BASEPRI, r6
    8e8a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8e92:	f023 0220 	bic.w	r2, r3, #32
    8e96:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8e9a:	09d2      	lsrs	r2, r2, #7
    8e9c:	d142      	bne.n	8f24 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8e9e:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    8ea0:	68a3      	ldr	r3, [r4, #8]
    8ea2:	b113      	cbz	r3, 8eaa <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    8ea4:	4620      	mov	r0, r4
    8ea6:	f7ff fcf3 	bl	8890 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8eaa:	f104 0018 	add.w	r0, r4, #24
    8eae:	f000 f999 	bl	91e4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8eb2:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8eb6:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8eba:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ebc:	42bd      	cmp	r5, r7
    8ebe:	d001      	beq.n	8ec4 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8ec0:	2d00      	cmp	r5, #0
    8ec2:	d139      	bne.n	8f38 <z_thread_abort+0x11c>
		update_cache(1);
    8ec4:	2001      	movs	r0, #1
    8ec6:	f7fe ff0d 	bl	7ce4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8eca:	4b29      	ldr	r3, [pc, #164]	; (8f70 <z_thread_abort+0x154>)
    8ecc:	689b      	ldr	r3, [r3, #8]
    8ece:	42a3      	cmp	r3, r4
    8ed0:	d1c7      	bne.n	8e62 <z_thread_abort+0x46>
    8ed2:	f3ef 8305 	mrs	r3, IPSR
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	d1c3      	bne.n	8e62 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8eda:	481e      	ldr	r0, [pc, #120]	; (8f54 <z_thread_abort+0x138>)
    8edc:	f7fe fc1e 	bl	771c <z_spin_unlock_valid>
    8ee0:	b968      	cbnz	r0, 8efe <z_thread_abort+0xe2>
    8ee2:	4a1d      	ldr	r2, [pc, #116]	; (8f58 <z_thread_abort+0x13c>)
    8ee4:	4920      	ldr	r1, [pc, #128]	; (8f68 <z_thread_abort+0x14c>)
    8ee6:	481e      	ldr	r0, [pc, #120]	; (8f60 <z_thread_abort+0x144>)
    8ee8:	23d0      	movs	r3, #208	; 0xd0
    8eea:	f001 f96b 	bl	a1c4 <assert_print>
    8eee:	4919      	ldr	r1, [pc, #100]	; (8f54 <z_thread_abort+0x138>)
    8ef0:	481e      	ldr	r0, [pc, #120]	; (8f6c <z_thread_abort+0x150>)
    8ef2:	f001 f967 	bl	a1c4 <assert_print>
    8ef6:	4818      	ldr	r0, [pc, #96]	; (8f58 <z_thread_abort+0x13c>)
    8ef8:	21d0      	movs	r1, #208	; 0xd0
    8efa:	f001 f95c 	bl	a1b6 <assert_post_action>
    8efe:	4630      	mov	r0, r6
    8f00:	f7fa ff20 	bl	3d44 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8f04:	4a1b      	ldr	r2, [pc, #108]	; (8f74 <z_thread_abort+0x158>)
    8f06:	491c      	ldr	r1, [pc, #112]	; (8f78 <z_thread_abort+0x15c>)
    8f08:	4815      	ldr	r0, [pc, #84]	; (8f60 <z_thread_abort+0x144>)
    8f0a:	f240 63ac 	movw	r3, #1708	; 0x6ac
    8f0e:	f001 f959 	bl	a1c4 <assert_print>
    8f12:	481a      	ldr	r0, [pc, #104]	; (8f7c <z_thread_abort+0x160>)
    8f14:	f001 f956 	bl	a1c4 <assert_print>
    8f18:	4816      	ldr	r0, [pc, #88]	; (8f74 <z_thread_abort+0x158>)
    8f1a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    8f1e:	f001 f94a 	bl	a1b6 <assert_post_action>
    8f22:	e79e      	b.n	8e62 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8f24:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8f28:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    8f2c:	4814      	ldr	r0, [pc, #80]	; (8f80 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8f2e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8f30:	4621      	mov	r1, r4
    8f32:	f7ff f9d9 	bl	82e8 <z_priq_dumb_remove>
}
    8f36:	e7b3      	b.n	8ea0 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    8f38:	4628      	mov	r0, r5
    8f3a:	f7ff fca9 	bl	8890 <unpend_thread_no_timeout>
    8f3e:	f105 0018 	add.w	r0, r5, #24
    8f42:	f000 f94f 	bl	91e4 <z_abort_timeout>
    8f46:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8f4a:	4628      	mov	r0, r5
    8f4c:	f7fe ff02 	bl	7d54 <ready_thread>
    8f50:	e7b3      	b.n	8eba <z_thread_abort+0x9e>
    8f52:	bf00      	nop
    8f54:	20000f0c 	.word	0x20000f0c
    8f58:	0000b959 	.word	0x0000b959
    8f5c:	0000b9b2 	.word	0x0000b9b2
    8f60:	0000b80f 	.word	0x0000b80f
    8f64:	0000b9c7 	.word	0x0000b9c7
    8f68:	0000b986 	.word	0x0000b986
    8f6c:	0000b99d 	.word	0x0000b99d
    8f70:	20000ed0 	.word	0x20000ed0
    8f74:	0000ceed 	.word	0x0000ceed
    8f78:	0000d0fe 	.word	0x0000d0fe
    8f7c:	0000cfdf 	.word	0x0000cfdf
    8f80:	20000ef0 	.word	0x20000ef0

00008f84 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8f84:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8f86:	4806      	ldr	r0, [pc, #24]	; (8fa0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8f88:	4a06      	ldr	r2, [pc, #24]	; (8fa4 <z_data_copy+0x20>)
    8f8a:	4907      	ldr	r1, [pc, #28]	; (8fa8 <z_data_copy+0x24>)
    8f8c:	1a12      	subs	r2, r2, r0
    8f8e:	f001 fe13 	bl	abb8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8f92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8f96:	4a05      	ldr	r2, [pc, #20]	; (8fac <z_data_copy+0x28>)
    8f98:	4905      	ldr	r1, [pc, #20]	; (8fb0 <z_data_copy+0x2c>)
    8f9a:	4806      	ldr	r0, [pc, #24]	; (8fb4 <z_data_copy+0x30>)
    8f9c:	f001 be0c 	b.w	abb8 <z_early_memcpy>
    8fa0:	20000000 	.word	0x20000000
    8fa4:	20000228 	.word	0x20000228
    8fa8:	0000d2f8 	.word	0x0000d2f8
    8fac:	00000000 	.word	0x00000000
    8fb0:	0000d2f8 	.word	0x0000d2f8
    8fb4:	20000000 	.word	0x20000000

00008fb8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8fb8:	4b03      	ldr	r3, [pc, #12]	; (8fc8 <elapsed+0x10>)
    8fba:	681b      	ldr	r3, [r3, #0]
    8fbc:	b90b      	cbnz	r3, 8fc2 <elapsed+0xa>
    8fbe:	f7fd b815 	b.w	5fec <sys_clock_elapsed>
}
    8fc2:	2000      	movs	r0, #0
    8fc4:	4770      	bx	lr
    8fc6:	bf00      	nop
    8fc8:	20000f10 	.word	0x20000f10

00008fcc <next_timeout>:
	return list->head == list;
    8fcc:	4b11      	ldr	r3, [pc, #68]	; (9014 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    8fce:	b510      	push	{r4, lr}
    8fd0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fd2:	429c      	cmp	r4, r3
    8fd4:	d10a      	bne.n	8fec <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8fd6:	f7ff ffef 	bl	8fb8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8fda:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8fde:	4b0e      	ldr	r3, [pc, #56]	; (9018 <next_timeout+0x4c>)
    8fe0:	691b      	ldr	r3, [r3, #16]
    8fe2:	b113      	cbz	r3, 8fea <next_timeout+0x1e>
    8fe4:	4298      	cmp	r0, r3
    8fe6:	bfa8      	it	ge
    8fe8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8fea:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8fec:	f7ff ffe4 	bl	8fb8 <elapsed>
	if ((to == NULL) ||
    8ff0:	2c00      	cmp	r4, #0
    8ff2:	d0f2      	beq.n	8fda <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8ff4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8ff8:	1a1b      	subs	r3, r3, r0
    8ffa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    8ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9002:	f172 0100 	sbcs.w	r1, r2, #0
    9006:	dae8      	bge.n	8fda <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    9008:	2a00      	cmp	r2, #0
    900a:	bfac      	ite	ge
    900c:	4618      	movge	r0, r3
    900e:	2000      	movlt	r0, #0
    9010:	e7e5      	b.n	8fde <next_timeout+0x12>
    9012:	bf00      	nop
    9014:	200000e4 	.word	0x200000e4
    9018:	20000ed0 	.word	0x20000ed0

0000901c <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    901c:	4a0b      	ldr	r2, [pc, #44]	; (904c <remove_timeout+0x30>)
    901e:	6803      	ldr	r3, [r0, #0]
    9020:	6852      	ldr	r2, [r2, #4]
    9022:	4290      	cmp	r0, r2
{
    9024:	b530      	push	{r4, r5, lr}
    9026:	d009      	beq.n	903c <remove_timeout+0x20>
	if (next(t) != NULL) {
    9028:	b143      	cbz	r3, 903c <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    902a:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    902e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9032:	1912      	adds	r2, r2, r4
    9034:	eb41 0105 	adc.w	r1, r1, r5
    9038:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    903c:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    903e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9040:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9042:	2300      	movs	r3, #0
	node->prev = NULL;
    9044:	e9c0 3300 	strd	r3, r3, [r0]
}
    9048:	bd30      	pop	{r4, r5, pc}
    904a:	bf00      	nop
    904c:	200000e4 	.word	0x200000e4

00009050 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9054:	bf08      	it	eq
    9056:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    905a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    905e:	4604      	mov	r4, r0
    9060:	460e      	mov	r6, r1
    9062:	4691      	mov	r9, r2
    9064:	461d      	mov	r5, r3
    9066:	4617      	mov	r7, r2
    9068:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    906a:	f000 8095 	beq.w	9198 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    906e:	6803      	ldr	r3, [r0, #0]
    9070:	b163      	cbz	r3, 908c <z_add_timeout+0x3c>
    9072:	494f      	ldr	r1, [pc, #316]	; (91b0 <z_add_timeout+0x160>)
    9074:	4a4f      	ldr	r2, [pc, #316]	; (91b4 <z_add_timeout+0x164>)
    9076:	4850      	ldr	r0, [pc, #320]	; (91b8 <z_add_timeout+0x168>)
    9078:	2363      	movs	r3, #99	; 0x63
    907a:	f001 f8a3 	bl	a1c4 <assert_print>
    907e:	484f      	ldr	r0, [pc, #316]	; (91bc <z_add_timeout+0x16c>)
    9080:	f001 f8a0 	bl	a1c4 <assert_print>
    9084:	484b      	ldr	r0, [pc, #300]	; (91b4 <z_add_timeout+0x164>)
    9086:	2163      	movs	r1, #99	; 0x63
    9088:	f001 f895 	bl	a1b6 <assert_post_action>
	to->fn = fn;
    908c:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    908e:	f04f 0320 	mov.w	r3, #32
    9092:	f3ef 8611 	mrs	r6, BASEPRI
    9096:	f383 8812 	msr	BASEPRI_MAX, r3
    909a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    909e:	4848      	ldr	r0, [pc, #288]	; (91c0 <z_add_timeout+0x170>)
    90a0:	f7fe fb2e 	bl	7700 <z_spin_lock_valid>
    90a4:	b968      	cbnz	r0, 90c2 <z_add_timeout+0x72>
    90a6:	4a47      	ldr	r2, [pc, #284]	; (91c4 <z_add_timeout+0x174>)
    90a8:	4947      	ldr	r1, [pc, #284]	; (91c8 <z_add_timeout+0x178>)
    90aa:	4843      	ldr	r0, [pc, #268]	; (91b8 <z_add_timeout+0x168>)
    90ac:	238e      	movs	r3, #142	; 0x8e
    90ae:	f001 f889 	bl	a1c4 <assert_print>
    90b2:	4943      	ldr	r1, [pc, #268]	; (91c0 <z_add_timeout+0x170>)
    90b4:	4845      	ldr	r0, [pc, #276]	; (91cc <z_add_timeout+0x17c>)
    90b6:	f001 f885 	bl	a1c4 <assert_print>
    90ba:	4842      	ldr	r0, [pc, #264]	; (91c4 <z_add_timeout+0x174>)
    90bc:	218e      	movs	r1, #142	; 0x8e
    90be:	f001 f87a 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    90c2:	483f      	ldr	r0, [pc, #252]	; (91c0 <z_add_timeout+0x170>)
    90c4:	f7fe fb3a 	bl	773c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    90c8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    90cc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    90d0:	da22      	bge.n	9118 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    90d2:	493f      	ldr	r1, [pc, #252]	; (91d0 <z_add_timeout+0x180>)
    90d4:	e9d1 2000 	ldrd	r2, r0, [r1]
    90d8:	f06f 0301 	mvn.w	r3, #1
    90dc:	1a9b      	subs	r3, r3, r2
    90de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    90e2:	eb62 0000 	sbc.w	r0, r2, r0
    90e6:	1bdf      	subs	r7, r3, r7
    90e8:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    90ec:	2f01      	cmp	r7, #1
    90ee:	f170 0300 	sbcs.w	r3, r0, #0
    90f2:	da01      	bge.n	90f8 <z_add_timeout+0xa8>
    90f4:	2701      	movs	r7, #1
    90f6:	2000      	movs	r0, #0
	return list->head == list;
    90f8:	4a36      	ldr	r2, [pc, #216]	; (91d4 <z_add_timeout+0x184>)
    90fa:	e9c4 7004 	strd	r7, r0, [r4, #16]
    90fe:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    9100:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9104:	4293      	cmp	r3, r2
    9106:	bf08      	it	eq
    9108:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    910a:	b973      	cbnz	r3, 912a <z_add_timeout+0xda>
	node->prev = tail;
    910c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    9110:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    9114:	6054      	str	r4, [r2, #4]
}
    9116:	e01a      	b.n	914e <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    9118:	f7ff ff4e 	bl	8fb8 <elapsed>
    911c:	3701      	adds	r7, #1
    911e:	f145 0500 	adc.w	r5, r5, #0
    9122:	183f      	adds	r7, r7, r0
    9124:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    9128:	e7e6      	b.n	90f8 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    912a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    912e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    9132:	4281      	cmp	r1, r0
    9134:	eb75 0e07 	sbcs.w	lr, r5, r7
    9138:	da30      	bge.n	919c <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    913a:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    913c:	6859      	ldr	r1, [r3, #4]
    913e:	eb67 0705 	sbc.w	r7, r7, r5
    9142:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    9146:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    914a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    914c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    914e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9150:	4293      	cmp	r3, r2
    9152:	d00b      	beq.n	916c <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9154:	429c      	cmp	r4, r3
    9156:	d109      	bne.n	916c <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9158:	f7ff ff38 	bl	8fcc <next_timeout>

			if (next_time == 0 ||
    915c:	b118      	cbz	r0, 9166 <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    915e:	4b1e      	ldr	r3, [pc, #120]	; (91d8 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    9160:	691b      	ldr	r3, [r3, #16]
    9162:	4283      	cmp	r3, r0
    9164:	d002      	beq.n	916c <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    9166:	2100      	movs	r1, #0
    9168:	f7fc ff0e 	bl	5f88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    916c:	4814      	ldr	r0, [pc, #80]	; (91c0 <z_add_timeout+0x170>)
    916e:	f7fe fad5 	bl	771c <z_spin_unlock_valid>
    9172:	b968      	cbnz	r0, 9190 <z_add_timeout+0x140>
    9174:	4a13      	ldr	r2, [pc, #76]	; (91c4 <z_add_timeout+0x174>)
    9176:	4919      	ldr	r1, [pc, #100]	; (91dc <z_add_timeout+0x18c>)
    9178:	480f      	ldr	r0, [pc, #60]	; (91b8 <z_add_timeout+0x168>)
    917a:	23b9      	movs	r3, #185	; 0xb9
    917c:	f001 f822 	bl	a1c4 <assert_print>
    9180:	490f      	ldr	r1, [pc, #60]	; (91c0 <z_add_timeout+0x170>)
    9182:	4817      	ldr	r0, [pc, #92]	; (91e0 <z_add_timeout+0x190>)
    9184:	f001 f81e 	bl	a1c4 <assert_print>
    9188:	480e      	ldr	r0, [pc, #56]	; (91c4 <z_add_timeout+0x174>)
    918a:	21b9      	movs	r1, #185	; 0xb9
    918c:	f001 f813 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    9190:	f386 8811 	msr	BASEPRI, r6
    9194:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    919c:	1a09      	subs	r1, r1, r0
    919e:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    91a2:	4563      	cmp	r3, ip
    91a4:	e9c4 1504 	strd	r1, r5, [r4, #16]
    91a8:	d0b0      	beq.n	910c <z_add_timeout+0xbc>
    91aa:	681b      	ldr	r3, [r3, #0]
    91ac:	e7ad      	b.n	910a <z_add_timeout+0xba>
    91ae:	bf00      	nop
    91b0:	0000d025 	.word	0x0000d025
    91b4:	0000d001 	.word	0x0000d001
    91b8:	0000b80f 	.word	0x0000b80f
    91bc:	0000ce4b 	.word	0x0000ce4b
    91c0:	20000f14 	.word	0x20000f14
    91c4:	0000b959 	.word	0x0000b959
    91c8:	0000b9b2 	.word	0x0000b9b2
    91cc:	0000b9c7 	.word	0x0000b9c7
    91d0:	20000778 	.word	0x20000778
    91d4:	200000e4 	.word	0x200000e4
    91d8:	20000ed0 	.word	0x20000ed0
    91dc:	0000b986 	.word	0x0000b986
    91e0:	0000b99d 	.word	0x0000b99d

000091e4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    91e4:	b538      	push	{r3, r4, r5, lr}
    91e6:	4604      	mov	r4, r0
	__asm__ volatile(
    91e8:	f04f 0320 	mov.w	r3, #32
    91ec:	f3ef 8511 	mrs	r5, BASEPRI
    91f0:	f383 8812 	msr	BASEPRI_MAX, r3
    91f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91f8:	481a      	ldr	r0, [pc, #104]	; (9264 <z_abort_timeout+0x80>)
    91fa:	f7fe fa81 	bl	7700 <z_spin_lock_valid>
    91fe:	b968      	cbnz	r0, 921c <z_abort_timeout+0x38>
    9200:	4a19      	ldr	r2, [pc, #100]	; (9268 <z_abort_timeout+0x84>)
    9202:	491a      	ldr	r1, [pc, #104]	; (926c <z_abort_timeout+0x88>)
    9204:	481a      	ldr	r0, [pc, #104]	; (9270 <z_abort_timeout+0x8c>)
    9206:	238e      	movs	r3, #142	; 0x8e
    9208:	f000 ffdc 	bl	a1c4 <assert_print>
    920c:	4915      	ldr	r1, [pc, #84]	; (9264 <z_abort_timeout+0x80>)
    920e:	4819      	ldr	r0, [pc, #100]	; (9274 <z_abort_timeout+0x90>)
    9210:	f000 ffd8 	bl	a1c4 <assert_print>
    9214:	4814      	ldr	r0, [pc, #80]	; (9268 <z_abort_timeout+0x84>)
    9216:	218e      	movs	r1, #142	; 0x8e
    9218:	f000 ffcd 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    921c:	4811      	ldr	r0, [pc, #68]	; (9264 <z_abort_timeout+0x80>)
    921e:	f7fe fa8d 	bl	773c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    9222:	6823      	ldr	r3, [r4, #0]
    9224:	b1db      	cbz	r3, 925e <z_abort_timeout+0x7a>
			remove_timeout(to);
    9226:	4620      	mov	r0, r4
    9228:	f7ff fef8 	bl	901c <remove_timeout>
			ret = 0;
    922c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    922e:	480d      	ldr	r0, [pc, #52]	; (9264 <z_abort_timeout+0x80>)
    9230:	f7fe fa74 	bl	771c <z_spin_unlock_valid>
    9234:	b968      	cbnz	r0, 9252 <z_abort_timeout+0x6e>
    9236:	4a0c      	ldr	r2, [pc, #48]	; (9268 <z_abort_timeout+0x84>)
    9238:	490f      	ldr	r1, [pc, #60]	; (9278 <z_abort_timeout+0x94>)
    923a:	480d      	ldr	r0, [pc, #52]	; (9270 <z_abort_timeout+0x8c>)
    923c:	23b9      	movs	r3, #185	; 0xb9
    923e:	f000 ffc1 	bl	a1c4 <assert_print>
    9242:	4908      	ldr	r1, [pc, #32]	; (9264 <z_abort_timeout+0x80>)
    9244:	480d      	ldr	r0, [pc, #52]	; (927c <z_abort_timeout+0x98>)
    9246:	f000 ffbd 	bl	a1c4 <assert_print>
    924a:	4807      	ldr	r0, [pc, #28]	; (9268 <z_abort_timeout+0x84>)
    924c:	21b9      	movs	r1, #185	; 0xb9
    924e:	f000 ffb2 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    9252:	f385 8811 	msr	BASEPRI, r5
    9256:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    925a:	4620      	mov	r0, r4
    925c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    925e:	f06f 0415 	mvn.w	r4, #21
    9262:	e7e4      	b.n	922e <z_abort_timeout+0x4a>
    9264:	20000f14 	.word	0x20000f14
    9268:	0000b959 	.word	0x0000b959
    926c:	0000b9b2 	.word	0x0000b9b2
    9270:	0000b80f 	.word	0x0000b80f
    9274:	0000b9c7 	.word	0x0000b9c7
    9278:	0000b986 	.word	0x0000b986
    927c:	0000b99d 	.word	0x0000b99d

00009280 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    9280:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9282:	f04f 0320 	mov.w	r3, #32
    9286:	f3ef 8511 	mrs	r5, BASEPRI
    928a:	f383 8812 	msr	BASEPRI_MAX, r3
    928e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9292:	4818      	ldr	r0, [pc, #96]	; (92f4 <z_get_next_timeout_expiry+0x74>)
    9294:	f7fe fa34 	bl	7700 <z_spin_lock_valid>
    9298:	b968      	cbnz	r0, 92b6 <z_get_next_timeout_expiry+0x36>
    929a:	4a17      	ldr	r2, [pc, #92]	; (92f8 <z_get_next_timeout_expiry+0x78>)
    929c:	4917      	ldr	r1, [pc, #92]	; (92fc <z_get_next_timeout_expiry+0x7c>)
    929e:	4818      	ldr	r0, [pc, #96]	; (9300 <z_get_next_timeout_expiry+0x80>)
    92a0:	238e      	movs	r3, #142	; 0x8e
    92a2:	f000 ff8f 	bl	a1c4 <assert_print>
    92a6:	4913      	ldr	r1, [pc, #76]	; (92f4 <z_get_next_timeout_expiry+0x74>)
    92a8:	4816      	ldr	r0, [pc, #88]	; (9304 <z_get_next_timeout_expiry+0x84>)
    92aa:	f000 ff8b 	bl	a1c4 <assert_print>
    92ae:	4812      	ldr	r0, [pc, #72]	; (92f8 <z_get_next_timeout_expiry+0x78>)
    92b0:	218e      	movs	r1, #142	; 0x8e
    92b2:	f000 ff80 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    92b6:	480f      	ldr	r0, [pc, #60]	; (92f4 <z_get_next_timeout_expiry+0x74>)
    92b8:	f7fe fa40 	bl	773c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    92bc:	f7ff fe86 	bl	8fcc <next_timeout>
    92c0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    92c2:	480c      	ldr	r0, [pc, #48]	; (92f4 <z_get_next_timeout_expiry+0x74>)
    92c4:	f7fe fa2a 	bl	771c <z_spin_unlock_valid>
    92c8:	b968      	cbnz	r0, 92e6 <z_get_next_timeout_expiry+0x66>
    92ca:	4a0b      	ldr	r2, [pc, #44]	; (92f8 <z_get_next_timeout_expiry+0x78>)
    92cc:	490e      	ldr	r1, [pc, #56]	; (9308 <z_get_next_timeout_expiry+0x88>)
    92ce:	480c      	ldr	r0, [pc, #48]	; (9300 <z_get_next_timeout_expiry+0x80>)
    92d0:	23b9      	movs	r3, #185	; 0xb9
    92d2:	f000 ff77 	bl	a1c4 <assert_print>
    92d6:	4907      	ldr	r1, [pc, #28]	; (92f4 <z_get_next_timeout_expiry+0x74>)
    92d8:	480c      	ldr	r0, [pc, #48]	; (930c <z_get_next_timeout_expiry+0x8c>)
    92da:	f000 ff73 	bl	a1c4 <assert_print>
    92de:	4806      	ldr	r0, [pc, #24]	; (92f8 <z_get_next_timeout_expiry+0x78>)
    92e0:	21b9      	movs	r1, #185	; 0xb9
    92e2:	f000 ff68 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    92e6:	f385 8811 	msr	BASEPRI, r5
    92ea:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    92ee:	4620      	mov	r0, r4
    92f0:	bd38      	pop	{r3, r4, r5, pc}
    92f2:	bf00      	nop
    92f4:	20000f14 	.word	0x20000f14
    92f8:	0000b959 	.word	0x0000b959
    92fc:	0000b9b2 	.word	0x0000b9b2
    9300:	0000b80f 	.word	0x0000b80f
    9304:	0000b9c7 	.word	0x0000b9c7
    9308:	0000b986 	.word	0x0000b986
    930c:	0000b99d 	.word	0x0000b99d

00009310 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9310:	b570      	push	{r4, r5, r6, lr}
    9312:	4604      	mov	r4, r0
    9314:	460d      	mov	r5, r1
	__asm__ volatile(
    9316:	f04f 0320 	mov.w	r3, #32
    931a:	f3ef 8611 	mrs	r6, BASEPRI
    931e:	f383 8812 	msr	BASEPRI_MAX, r3
    9322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9326:	481c      	ldr	r0, [pc, #112]	; (9398 <z_set_timeout_expiry+0x88>)
    9328:	f7fe f9ea 	bl	7700 <z_spin_lock_valid>
    932c:	b968      	cbnz	r0, 934a <z_set_timeout_expiry+0x3a>
    932e:	4a1b      	ldr	r2, [pc, #108]	; (939c <z_set_timeout_expiry+0x8c>)
    9330:	491b      	ldr	r1, [pc, #108]	; (93a0 <z_set_timeout_expiry+0x90>)
    9332:	481c      	ldr	r0, [pc, #112]	; (93a4 <z_set_timeout_expiry+0x94>)
    9334:	238e      	movs	r3, #142	; 0x8e
    9336:	f000 ff45 	bl	a1c4 <assert_print>
    933a:	4917      	ldr	r1, [pc, #92]	; (9398 <z_set_timeout_expiry+0x88>)
    933c:	481a      	ldr	r0, [pc, #104]	; (93a8 <z_set_timeout_expiry+0x98>)
    933e:	f000 ff41 	bl	a1c4 <assert_print>
    9342:	4816      	ldr	r0, [pc, #88]	; (939c <z_set_timeout_expiry+0x8c>)
    9344:	218e      	movs	r1, #142	; 0x8e
    9346:	f000 ff36 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    934a:	4813      	ldr	r0, [pc, #76]	; (9398 <z_set_timeout_expiry+0x88>)
    934c:	f7fe f9f6 	bl	773c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    9350:	f7ff fe3c 	bl	8fcc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    9354:	2801      	cmp	r0, #1
    9356:	dd07      	ble.n	9368 <z_set_timeout_expiry+0x58>
    9358:	42a0      	cmp	r0, r4
    935a:	db05      	blt.n	9368 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    935c:	42a0      	cmp	r0, r4
    935e:	4629      	mov	r1, r5
    9360:	bfa8      	it	ge
    9362:	4620      	movge	r0, r4
    9364:	f7fc fe10 	bl	5f88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9368:	480b      	ldr	r0, [pc, #44]	; (9398 <z_set_timeout_expiry+0x88>)
    936a:	f7fe f9d7 	bl	771c <z_spin_unlock_valid>
    936e:	b968      	cbnz	r0, 938c <z_set_timeout_expiry+0x7c>
    9370:	4a0a      	ldr	r2, [pc, #40]	; (939c <z_set_timeout_expiry+0x8c>)
    9372:	490e      	ldr	r1, [pc, #56]	; (93ac <z_set_timeout_expiry+0x9c>)
    9374:	480b      	ldr	r0, [pc, #44]	; (93a4 <z_set_timeout_expiry+0x94>)
    9376:	23b9      	movs	r3, #185	; 0xb9
    9378:	f000 ff24 	bl	a1c4 <assert_print>
    937c:	4906      	ldr	r1, [pc, #24]	; (9398 <z_set_timeout_expiry+0x88>)
    937e:	480c      	ldr	r0, [pc, #48]	; (93b0 <z_set_timeout_expiry+0xa0>)
    9380:	f000 ff20 	bl	a1c4 <assert_print>
    9384:	4805      	ldr	r0, [pc, #20]	; (939c <z_set_timeout_expiry+0x8c>)
    9386:	21b9      	movs	r1, #185	; 0xb9
    9388:	f000 ff15 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    938c:	f386 8811 	msr	BASEPRI, r6
    9390:	f3bf 8f6f 	isb	sy
		}
	}
}
    9394:	bd70      	pop	{r4, r5, r6, pc}
    9396:	bf00      	nop
    9398:	20000f14 	.word	0x20000f14
    939c:	0000b959 	.word	0x0000b959
    93a0:	0000b9b2 	.word	0x0000b9b2
    93a4:	0000b80f 	.word	0x0000b80f
    93a8:	0000b9c7 	.word	0x0000b9c7
    93ac:	0000b986 	.word	0x0000b986
    93b0:	0000b99d 	.word	0x0000b99d

000093b4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    93b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    93b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    93ba:	f7ff f809 	bl	83d0 <z_time_slice>
	__asm__ volatile(
    93be:	f04f 0320 	mov.w	r3, #32
    93c2:	f3ef 8511 	mrs	r5, BASEPRI
    93c6:	f383 8812 	msr	BASEPRI_MAX, r3
    93ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ce:	484c      	ldr	r0, [pc, #304]	; (9500 <sys_clock_announce+0x14c>)
    93d0:	f7fe f996 	bl	7700 <z_spin_lock_valid>
    93d4:	b968      	cbnz	r0, 93f2 <sys_clock_announce+0x3e>
    93d6:	4a4b      	ldr	r2, [pc, #300]	; (9504 <sys_clock_announce+0x150>)
    93d8:	494b      	ldr	r1, [pc, #300]	; (9508 <sys_clock_announce+0x154>)
    93da:	484c      	ldr	r0, [pc, #304]	; (950c <sys_clock_announce+0x158>)
    93dc:	238e      	movs	r3, #142	; 0x8e
    93de:	f000 fef1 	bl	a1c4 <assert_print>
    93e2:	4947      	ldr	r1, [pc, #284]	; (9500 <sys_clock_announce+0x14c>)
    93e4:	484a      	ldr	r0, [pc, #296]	; (9510 <sys_clock_announce+0x15c>)
    93e6:	f000 feed 	bl	a1c4 <assert_print>
    93ea:	4846      	ldr	r0, [pc, #280]	; (9504 <sys_clock_announce+0x150>)
    93ec:	218e      	movs	r1, #142	; 0x8e
    93ee:	f000 fee2 	bl	a1b6 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    93f2:	4f48      	ldr	r7, [pc, #288]	; (9514 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    93f4:	4842      	ldr	r0, [pc, #264]	; (9500 <sys_clock_announce+0x14c>)
	return list->head == list;
    93f6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9518 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    93fa:	4e48      	ldr	r6, [pc, #288]	; (951c <sys_clock_announce+0x168>)
    93fc:	f7fe f99e 	bl	773c <z_spin_lock_set_owner>
	announce_remaining = ticks;
    9400:	603c      	str	r4, [r7, #0]
    9402:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9406:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9408:	4544      	cmp	r4, r8
		curr_tick += dt;
    940a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    940e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    9412:	d00b      	beq.n	942c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9414:	b154      	cbz	r4, 942c <sys_clock_announce+0x78>
    9416:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    941a:	429a      	cmp	r2, r3
    941c:	eb70 090c 	sbcs.w	r9, r0, ip
    9420:	da28      	bge.n	9474 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    9422:	1a9b      	subs	r3, r3, r2
    9424:	eb6c 0c00 	sbc.w	ip, ip, r0
    9428:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    942c:	1851      	adds	r1, r2, r1
    942e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    9432:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    9434:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    9438:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    943a:	f7ff fdc7 	bl	8fcc <next_timeout>
    943e:	4621      	mov	r1, r4
    9440:	f7fc fda2 	bl	5f88 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9444:	482e      	ldr	r0, [pc, #184]	; (9500 <sys_clock_announce+0x14c>)
    9446:	f7fe f969 	bl	771c <z_spin_unlock_valid>
    944a:	b968      	cbnz	r0, 9468 <sys_clock_announce+0xb4>
    944c:	4a2d      	ldr	r2, [pc, #180]	; (9504 <sys_clock_announce+0x150>)
    944e:	4934      	ldr	r1, [pc, #208]	; (9520 <sys_clock_announce+0x16c>)
    9450:	482e      	ldr	r0, [pc, #184]	; (950c <sys_clock_announce+0x158>)
    9452:	23b9      	movs	r3, #185	; 0xb9
    9454:	f000 feb6 	bl	a1c4 <assert_print>
    9458:	4929      	ldr	r1, [pc, #164]	; (9500 <sys_clock_announce+0x14c>)
    945a:	4832      	ldr	r0, [pc, #200]	; (9524 <sys_clock_announce+0x170>)
    945c:	f000 feb2 	bl	a1c4 <assert_print>
    9460:	4828      	ldr	r0, [pc, #160]	; (9504 <sys_clock_announce+0x150>)
    9462:	21b9      	movs	r1, #185	; 0xb9
    9464:	f000 fea7 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    9468:	f385 8811 	msr	BASEPRI, r5
    946c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    9474:	1859      	adds	r1, r3, r1
    9476:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    947a:	1ad3      	subs	r3, r2, r3
    947c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    947e:	2200      	movs	r2, #0
    9480:	2300      	movs	r3, #0
		curr_tick += dt;
    9482:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    9486:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    948a:	4620      	mov	r0, r4
    948c:	f7ff fdc6 	bl	901c <remove_timeout>
    9490:	481b      	ldr	r0, [pc, #108]	; (9500 <sys_clock_announce+0x14c>)
    9492:	f7fe f943 	bl	771c <z_spin_unlock_valid>
    9496:	b968      	cbnz	r0, 94b4 <sys_clock_announce+0x100>
    9498:	4a1a      	ldr	r2, [pc, #104]	; (9504 <sys_clock_announce+0x150>)
    949a:	4921      	ldr	r1, [pc, #132]	; (9520 <sys_clock_announce+0x16c>)
    949c:	481b      	ldr	r0, [pc, #108]	; (950c <sys_clock_announce+0x158>)
    949e:	23b9      	movs	r3, #185	; 0xb9
    94a0:	f000 fe90 	bl	a1c4 <assert_print>
    94a4:	4916      	ldr	r1, [pc, #88]	; (9500 <sys_clock_announce+0x14c>)
    94a6:	481f      	ldr	r0, [pc, #124]	; (9524 <sys_clock_announce+0x170>)
    94a8:	f000 fe8c 	bl	a1c4 <assert_print>
    94ac:	4815      	ldr	r0, [pc, #84]	; (9504 <sys_clock_announce+0x150>)
    94ae:	21b9      	movs	r1, #185	; 0xb9
    94b0:	f000 fe81 	bl	a1b6 <assert_post_action>
    94b4:	f385 8811 	msr	BASEPRI, r5
    94b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    94bc:	68a3      	ldr	r3, [r4, #8]
    94be:	4620      	mov	r0, r4
    94c0:	4798      	blx	r3
	__asm__ volatile(
    94c2:	f04f 0320 	mov.w	r3, #32
    94c6:	f3ef 8511 	mrs	r5, BASEPRI
    94ca:	f383 8812 	msr	BASEPRI_MAX, r3
    94ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    94d2:	480b      	ldr	r0, [pc, #44]	; (9500 <sys_clock_announce+0x14c>)
    94d4:	f7fe f914 	bl	7700 <z_spin_lock_valid>
    94d8:	b968      	cbnz	r0, 94f6 <sys_clock_announce+0x142>
    94da:	4a0a      	ldr	r2, [pc, #40]	; (9504 <sys_clock_announce+0x150>)
    94dc:	490a      	ldr	r1, [pc, #40]	; (9508 <sys_clock_announce+0x154>)
    94de:	480b      	ldr	r0, [pc, #44]	; (950c <sys_clock_announce+0x158>)
    94e0:	238e      	movs	r3, #142	; 0x8e
    94e2:	f000 fe6f 	bl	a1c4 <assert_print>
    94e6:	4906      	ldr	r1, [pc, #24]	; (9500 <sys_clock_announce+0x14c>)
    94e8:	4809      	ldr	r0, [pc, #36]	; (9510 <sys_clock_announce+0x15c>)
    94ea:	f000 fe6b 	bl	a1c4 <assert_print>
    94ee:	4805      	ldr	r0, [pc, #20]	; (9504 <sys_clock_announce+0x150>)
    94f0:	218e      	movs	r1, #142	; 0x8e
    94f2:	f000 fe60 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    94f6:	4802      	ldr	r0, [pc, #8]	; (9500 <sys_clock_announce+0x14c>)
    94f8:	f7fe f920 	bl	773c <z_spin_lock_set_owner>
	return k;
    94fc:	e781      	b.n	9402 <sys_clock_announce+0x4e>
    94fe:	bf00      	nop
    9500:	20000f14 	.word	0x20000f14
    9504:	0000b959 	.word	0x0000b959
    9508:	0000b9b2 	.word	0x0000b9b2
    950c:	0000b80f 	.word	0x0000b80f
    9510:	0000b9c7 	.word	0x0000b9c7
    9514:	20000f10 	.word	0x20000f10
    9518:	200000e4 	.word	0x200000e4
    951c:	20000778 	.word	0x20000778
    9520:	0000b986 	.word	0x0000b986
    9524:	0000b99d 	.word	0x0000b99d

00009528 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9528:	b570      	push	{r4, r5, r6, lr}
    952a:	f04f 0320 	mov.w	r3, #32
    952e:	f3ef 8611 	mrs	r6, BASEPRI
    9532:	f383 8812 	msr	BASEPRI_MAX, r3
    9536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    953a:	481b      	ldr	r0, [pc, #108]	; (95a8 <sys_clock_tick_get+0x80>)
    953c:	f7fe f8e0 	bl	7700 <z_spin_lock_valid>
    9540:	b968      	cbnz	r0, 955e <sys_clock_tick_get+0x36>
    9542:	4a1a      	ldr	r2, [pc, #104]	; (95ac <sys_clock_tick_get+0x84>)
    9544:	491a      	ldr	r1, [pc, #104]	; (95b0 <sys_clock_tick_get+0x88>)
    9546:	481b      	ldr	r0, [pc, #108]	; (95b4 <sys_clock_tick_get+0x8c>)
    9548:	238e      	movs	r3, #142	; 0x8e
    954a:	f000 fe3b 	bl	a1c4 <assert_print>
    954e:	4916      	ldr	r1, [pc, #88]	; (95a8 <sys_clock_tick_get+0x80>)
    9550:	4819      	ldr	r0, [pc, #100]	; (95b8 <sys_clock_tick_get+0x90>)
    9552:	f000 fe37 	bl	a1c4 <assert_print>
    9556:	4815      	ldr	r0, [pc, #84]	; (95ac <sys_clock_tick_get+0x84>)
    9558:	218e      	movs	r1, #142	; 0x8e
    955a:	f000 fe2c 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    955e:	4812      	ldr	r0, [pc, #72]	; (95a8 <sys_clock_tick_get+0x80>)
    9560:	f7fe f8ec 	bl	773c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    9564:	f7fc fd42 	bl	5fec <sys_clock_elapsed>
    9568:	4a14      	ldr	r2, [pc, #80]	; (95bc <sys_clock_tick_get+0x94>)
    956a:	e9d2 4500 	ldrd	r4, r5, [r2]
    956e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9570:	480d      	ldr	r0, [pc, #52]	; (95a8 <sys_clock_tick_get+0x80>)
    9572:	f145 0500 	adc.w	r5, r5, #0
    9576:	f7fe f8d1 	bl	771c <z_spin_unlock_valid>
    957a:	b968      	cbnz	r0, 9598 <sys_clock_tick_get+0x70>
    957c:	4a0b      	ldr	r2, [pc, #44]	; (95ac <sys_clock_tick_get+0x84>)
    957e:	4910      	ldr	r1, [pc, #64]	; (95c0 <sys_clock_tick_get+0x98>)
    9580:	480c      	ldr	r0, [pc, #48]	; (95b4 <sys_clock_tick_get+0x8c>)
    9582:	23b9      	movs	r3, #185	; 0xb9
    9584:	f000 fe1e 	bl	a1c4 <assert_print>
    9588:	4907      	ldr	r1, [pc, #28]	; (95a8 <sys_clock_tick_get+0x80>)
    958a:	480e      	ldr	r0, [pc, #56]	; (95c4 <sys_clock_tick_get+0x9c>)
    958c:	f000 fe1a 	bl	a1c4 <assert_print>
    9590:	4806      	ldr	r0, [pc, #24]	; (95ac <sys_clock_tick_get+0x84>)
    9592:	21b9      	movs	r1, #185	; 0xb9
    9594:	f000 fe0f 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    9598:	f386 8811 	msr	BASEPRI, r6
    959c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    95a0:	4620      	mov	r0, r4
    95a2:	4629      	mov	r1, r5
    95a4:	bd70      	pop	{r4, r5, r6, pc}
    95a6:	bf00      	nop
    95a8:	20000f14 	.word	0x20000f14
    95ac:	0000b959 	.word	0x0000b959
    95b0:	0000b9b2 	.word	0x0000b9b2
    95b4:	0000b80f 	.word	0x0000b80f
    95b8:	0000b9c7 	.word	0x0000b9c7
    95bc:	20000778 	.word	0x20000778
    95c0:	0000b986 	.word	0x0000b986
    95c4:	0000b99d 	.word	0x0000b99d

000095c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    95c8:	b570      	push	{r4, r5, r6, lr}
    95ca:	4604      	mov	r4, r0
	__asm__ volatile(
    95cc:	f04f 0320 	mov.w	r3, #32
    95d0:	f3ef 8511 	mrs	r5, BASEPRI
    95d4:	f383 8812 	msr	BASEPRI_MAX, r3
    95d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95dc:	484d      	ldr	r0, [pc, #308]	; (9714 <z_timer_expiration_handler+0x14c>)
    95de:	f7fe f88f 	bl	7700 <z_spin_lock_valid>
    95e2:	b968      	cbnz	r0, 9600 <z_timer_expiration_handler+0x38>
    95e4:	4a4c      	ldr	r2, [pc, #304]	; (9718 <z_timer_expiration_handler+0x150>)
    95e6:	494d      	ldr	r1, [pc, #308]	; (971c <z_timer_expiration_handler+0x154>)
    95e8:	484d      	ldr	r0, [pc, #308]	; (9720 <z_timer_expiration_handler+0x158>)
    95ea:	238e      	movs	r3, #142	; 0x8e
    95ec:	f000 fdea 	bl	a1c4 <assert_print>
    95f0:	4948      	ldr	r1, [pc, #288]	; (9714 <z_timer_expiration_handler+0x14c>)
    95f2:	484c      	ldr	r0, [pc, #304]	; (9724 <z_timer_expiration_handler+0x15c>)
    95f4:	f000 fde6 	bl	a1c4 <assert_print>
    95f8:	4847      	ldr	r0, [pc, #284]	; (9718 <z_timer_expiration_handler+0x150>)
    95fa:	218e      	movs	r1, #142	; 0x8e
    95fc:	f000 fddb 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9600:	4844      	ldr	r0, [pc, #272]	; (9714 <z_timer_expiration_handler+0x14c>)
    9602:	f7fe f89b 	bl	773c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9606:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    960a:	3301      	adds	r3, #1
    960c:	f142 0200 	adc.w	r2, r2, #0
    9610:	2b02      	cmp	r3, #2
    9612:	f172 0200 	sbcs.w	r2, r2, #0
    9616:	d305      	bcc.n	9624 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9618:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    961c:	4942      	ldr	r1, [pc, #264]	; (9728 <z_timer_expiration_handler+0x160>)
    961e:	4620      	mov	r0, r4
    9620:	f7ff fd16 	bl	9050 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9624:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9626:	3301      	adds	r3, #1
    9628:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    962a:	6a23      	ldr	r3, [r4, #32]
    962c:	2b00      	cmp	r3, #0
    962e:	d035      	beq.n	969c <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9630:	4838      	ldr	r0, [pc, #224]	; (9714 <z_timer_expiration_handler+0x14c>)
    9632:	f7fe f873 	bl	771c <z_spin_unlock_valid>
    9636:	b968      	cbnz	r0, 9654 <z_timer_expiration_handler+0x8c>
    9638:	4a37      	ldr	r2, [pc, #220]	; (9718 <z_timer_expiration_handler+0x150>)
    963a:	493c      	ldr	r1, [pc, #240]	; (972c <z_timer_expiration_handler+0x164>)
    963c:	4838      	ldr	r0, [pc, #224]	; (9720 <z_timer_expiration_handler+0x158>)
    963e:	23b9      	movs	r3, #185	; 0xb9
    9640:	f000 fdc0 	bl	a1c4 <assert_print>
    9644:	4933      	ldr	r1, [pc, #204]	; (9714 <z_timer_expiration_handler+0x14c>)
    9646:	483a      	ldr	r0, [pc, #232]	; (9730 <z_timer_expiration_handler+0x168>)
    9648:	f000 fdbc 	bl	a1c4 <assert_print>
    964c:	4832      	ldr	r0, [pc, #200]	; (9718 <z_timer_expiration_handler+0x150>)
    964e:	21b9      	movs	r1, #185	; 0xb9
    9650:	f000 fdb1 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    9654:	f385 8811 	msr	BASEPRI, r5
    9658:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    965c:	6a23      	ldr	r3, [r4, #32]
    965e:	4620      	mov	r0, r4
    9660:	4798      	blx	r3
	__asm__ volatile(
    9662:	f04f 0320 	mov.w	r3, #32
    9666:	f3ef 8511 	mrs	r5, BASEPRI
    966a:	f383 8812 	msr	BASEPRI_MAX, r3
    966e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9672:	4828      	ldr	r0, [pc, #160]	; (9714 <z_timer_expiration_handler+0x14c>)
    9674:	f7fe f844 	bl	7700 <z_spin_lock_valid>
    9678:	b968      	cbnz	r0, 9696 <z_timer_expiration_handler+0xce>
    967a:	4a27      	ldr	r2, [pc, #156]	; (9718 <z_timer_expiration_handler+0x150>)
    967c:	4927      	ldr	r1, [pc, #156]	; (971c <z_timer_expiration_handler+0x154>)
    967e:	4828      	ldr	r0, [pc, #160]	; (9720 <z_timer_expiration_handler+0x158>)
    9680:	238e      	movs	r3, #142	; 0x8e
    9682:	f000 fd9f 	bl	a1c4 <assert_print>
    9686:	4923      	ldr	r1, [pc, #140]	; (9714 <z_timer_expiration_handler+0x14c>)
    9688:	4826      	ldr	r0, [pc, #152]	; (9724 <z_timer_expiration_handler+0x15c>)
    968a:	f000 fd9b 	bl	a1c4 <assert_print>
    968e:	4822      	ldr	r0, [pc, #136]	; (9718 <z_timer_expiration_handler+0x150>)
    9690:	218e      	movs	r1, #142	; 0x8e
    9692:	f000 fd90 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9696:	481f      	ldr	r0, [pc, #124]	; (9714 <z_timer_expiration_handler+0x14c>)
    9698:	f7fe f850 	bl	773c <z_spin_lock_set_owner>
	return list->head == list;
    969c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96a0:	42a6      	cmp	r6, r4
    96a2:	d000      	beq.n	96a6 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    96a4:	b9b6      	cbnz	r6, 96d4 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    96a6:	481b      	ldr	r0, [pc, #108]	; (9714 <z_timer_expiration_handler+0x14c>)
    96a8:	f7fe f838 	bl	771c <z_spin_unlock_valid>
    96ac:	b968      	cbnz	r0, 96ca <z_timer_expiration_handler+0x102>
    96ae:	4a1a      	ldr	r2, [pc, #104]	; (9718 <z_timer_expiration_handler+0x150>)
    96b0:	491e      	ldr	r1, [pc, #120]	; (972c <z_timer_expiration_handler+0x164>)
    96b2:	481b      	ldr	r0, [pc, #108]	; (9720 <z_timer_expiration_handler+0x158>)
    96b4:	23b9      	movs	r3, #185	; 0xb9
    96b6:	f000 fd85 	bl	a1c4 <assert_print>
    96ba:	4916      	ldr	r1, [pc, #88]	; (9714 <z_timer_expiration_handler+0x14c>)
    96bc:	481c      	ldr	r0, [pc, #112]	; (9730 <z_timer_expiration_handler+0x168>)
    96be:	f000 fd81 	bl	a1c4 <assert_print>
    96c2:	4815      	ldr	r0, [pc, #84]	; (9718 <z_timer_expiration_handler+0x150>)
    96c4:	21b9      	movs	r1, #185	; 0xb9
    96c6:	f000 fd76 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    96ca:	f385 8811 	msr	BASEPRI, r5
    96ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    96d2:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    96d4:	4630      	mov	r0, r6
    96d6:	f7fe fc37 	bl	7f48 <z_unpend_thread_no_timeout>
    96da:	2300      	movs	r3, #0
    96dc:	480d      	ldr	r0, [pc, #52]	; (9714 <z_timer_expiration_handler+0x14c>)
    96de:	67b3      	str	r3, [r6, #120]	; 0x78
    96e0:	f7fe f81c 	bl	771c <z_spin_unlock_valid>
    96e4:	b968      	cbnz	r0, 9702 <z_timer_expiration_handler+0x13a>
    96e6:	4a0c      	ldr	r2, [pc, #48]	; (9718 <z_timer_expiration_handler+0x150>)
    96e8:	4910      	ldr	r1, [pc, #64]	; (972c <z_timer_expiration_handler+0x164>)
    96ea:	480d      	ldr	r0, [pc, #52]	; (9720 <z_timer_expiration_handler+0x158>)
    96ec:	23b9      	movs	r3, #185	; 0xb9
    96ee:	f000 fd69 	bl	a1c4 <assert_print>
    96f2:	4908      	ldr	r1, [pc, #32]	; (9714 <z_timer_expiration_handler+0x14c>)
    96f4:	480e      	ldr	r0, [pc, #56]	; (9730 <z_timer_expiration_handler+0x168>)
    96f6:	f000 fd65 	bl	a1c4 <assert_print>
    96fa:	4807      	ldr	r0, [pc, #28]	; (9718 <z_timer_expiration_handler+0x150>)
    96fc:	21b9      	movs	r1, #185	; 0xb9
    96fe:	f000 fd5a 	bl	a1b6 <assert_post_action>
    9702:	f385 8811 	msr	BASEPRI, r5
    9706:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    970a:	4630      	mov	r0, r6
}
    970c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9710:	f7fe bbd2 	b.w	7eb8 <z_ready_thread>
    9714:	20000f18 	.word	0x20000f18
    9718:	0000b959 	.word	0x0000b959
    971c:	0000b9b2 	.word	0x0000b9b2
    9720:	0000b80f 	.word	0x0000b80f
    9724:	0000b9c7 	.word	0x0000b9c7
    9728:	000095c9 	.word	0x000095c9
    972c:	0000b986 	.word	0x0000b986
    9730:	0000b99d 	.word	0x0000b99d

00009734 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    973c:	bf08      	it	eq
    973e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    9742:	4605      	mov	r5, r0
    9744:	4614      	mov	r4, r2
    9746:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    974a:	4619      	mov	r1, r3
    974c:	4691      	mov	r9, r2
    974e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9750:	d037      	beq.n	97c2 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9752:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9756:	bf08      	it	eq
    9758:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    975c:	4637      	mov	r7, r6
    975e:	4682      	mov	sl, r0
    9760:	d011      	beq.n	9786 <z_impl_k_timer_start+0x52>
    9762:	ea50 0306 	orrs.w	r3, r0, r6
    9766:	d00e      	beq.n	9786 <z_impl_k_timer_start+0x52>
    9768:	1c72      	adds	r2, r6, #1
    976a:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    976e:	db0a      	blt.n	9786 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    9770:	2e02      	cmp	r6, #2
    9772:	4684      	mov	ip, r0
    9774:	f170 0000 	sbcs.w	r0, r0, #0
    9778:	bfbc      	itt	lt
    977a:	2702      	movlt	r7, #2
    977c:	f04f 0c00 	movlt.w	ip, #0
    9780:	3f01      	subs	r7, #1
    9782:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9786:	1c63      	adds	r3, r4, #1
    9788:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    978c:	db0a      	blt.n	97a4 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    978e:	2c01      	cmp	r4, #1
    9790:	f171 0300 	sbcs.w	r3, r1, #0
    9794:	4622      	mov	r2, r4
    9796:	bfbc      	itt	lt
    9798:	2201      	movlt	r2, #1
    979a:	2100      	movlt	r1, #0
    979c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    97a0:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    97a4:	4628      	mov	r0, r5
    97a6:	f7ff fd1d 	bl	91e4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    97aa:	2300      	movs	r3, #0
    97ac:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    97ae:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    97b2:	464a      	mov	r2, r9
    97b4:	4643      	mov	r3, r8
    97b6:	4628      	mov	r0, r5
    97b8:	4903      	ldr	r1, [pc, #12]	; (97c8 <z_impl_k_timer_start+0x94>)
		     duration);
}
    97ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    97be:	f7ff bc47 	b.w	9050 <z_add_timeout>
}
    97c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97c6:	bf00      	nop
    97c8:	000095c9 	.word	0x000095c9

000097cc <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    97cc:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    97ce:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    97d2:	4606      	mov	r6, r0
    97d4:	460d      	mov	r5, r1
    97d6:	d20b      	bcs.n	97f0 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    97d8:	f04f 0800 	mov.w	r8, #0
    97dc:	f04f 0900 	mov.w	r9, #0
    97e0:	e9cd 8900 	strd	r8, r9, [sp]
    97e4:	f041 0104 	orr.w	r1, r1, #4
    97e8:	f000 f89c 	bl	9924 <k_heap_aligned_alloc>
	if (mem == NULL) {
    97ec:	4604      	mov	r4, r0
    97ee:	b920      	cbnz	r0, 97fa <z_heap_aligned_alloc+0x2e>
		return NULL;
    97f0:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    97f2:	4620      	mov	r0, r4
    97f4:	b002      	add	sp, #8
    97f6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    97fa:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    97fe:	2d00      	cmp	r5, #0
    9800:	d0f7      	beq.n	97f2 <z_heap_aligned_alloc+0x26>
    9802:	1e6b      	subs	r3, r5, #1
    9804:	421c      	tst	r4, r3
    9806:	d0f4      	beq.n	97f2 <z_heap_aligned_alloc+0x26>
    9808:	2325      	movs	r3, #37	; 0x25
    980a:	4a07      	ldr	r2, [pc, #28]	; (9828 <z_heap_aligned_alloc+0x5c>)
    980c:	4907      	ldr	r1, [pc, #28]	; (982c <z_heap_aligned_alloc+0x60>)
    980e:	4808      	ldr	r0, [pc, #32]	; (9830 <z_heap_aligned_alloc+0x64>)
    9810:	f000 fcd8 	bl	a1c4 <assert_print>
    9814:	4621      	mov	r1, r4
    9816:	4807      	ldr	r0, [pc, #28]	; (9834 <z_heap_aligned_alloc+0x68>)
    9818:	462a      	mov	r2, r5
    981a:	f000 fcd3 	bl	a1c4 <assert_print>
    981e:	4802      	ldr	r0, [pc, #8]	; (9828 <z_heap_aligned_alloc+0x5c>)
    9820:	2125      	movs	r1, #37	; 0x25
    9822:	f000 fcc8 	bl	a1b6 <assert_post_action>
    9826:	e7e4      	b.n	97f2 <z_heap_aligned_alloc+0x26>
    9828:	0000d045 	.word	0x0000d045
    982c:	0000d069 	.word	0x0000d069
    9830:	0000b80f 	.word	0x0000b80f
    9834:	0000d09b 	.word	0x0000d09b

00009838 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    9838:	2803      	cmp	r0, #3
{
    983a:	b538      	push	{r3, r4, r5, lr}
    983c:	4604      	mov	r4, r0
    983e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    9840:	d901      	bls.n	9846 <k_aligned_alloc+0xe>
    9842:	0783      	lsls	r3, r0, #30
    9844:	d00c      	beq.n	9860 <k_aligned_alloc+0x28>
    9846:	4912      	ldr	r1, [pc, #72]	; (9890 <k_aligned_alloc+0x58>)
    9848:	4a12      	ldr	r2, [pc, #72]	; (9894 <k_aligned_alloc+0x5c>)
    984a:	4813      	ldr	r0, [pc, #76]	; (9898 <k_aligned_alloc+0x60>)
    984c:	2342      	movs	r3, #66	; 0x42
    984e:	f000 fcb9 	bl	a1c4 <assert_print>
    9852:	4812      	ldr	r0, [pc, #72]	; (989c <k_aligned_alloc+0x64>)
    9854:	f000 fcb6 	bl	a1c4 <assert_print>
    9858:	480e      	ldr	r0, [pc, #56]	; (9894 <k_aligned_alloc+0x5c>)
    985a:	2142      	movs	r1, #66	; 0x42
    985c:	f000 fcab 	bl	a1b6 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    9860:	1e63      	subs	r3, r4, #1
    9862:	4223      	tst	r3, r4
    9864:	d00c      	beq.n	9880 <k_aligned_alloc+0x48>
    9866:	490e      	ldr	r1, [pc, #56]	; (98a0 <k_aligned_alloc+0x68>)
    9868:	4a0a      	ldr	r2, [pc, #40]	; (9894 <k_aligned_alloc+0x5c>)
    986a:	480b      	ldr	r0, [pc, #44]	; (9898 <k_aligned_alloc+0x60>)
    986c:	2346      	movs	r3, #70	; 0x46
    986e:	f000 fca9 	bl	a1c4 <assert_print>
    9872:	480c      	ldr	r0, [pc, #48]	; (98a4 <k_aligned_alloc+0x6c>)
    9874:	f000 fca6 	bl	a1c4 <assert_print>
    9878:	4806      	ldr	r0, [pc, #24]	; (9894 <k_aligned_alloc+0x5c>)
    987a:	2146      	movs	r1, #70	; 0x46
    987c:	f000 fc9b 	bl	a1b6 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9880:	462a      	mov	r2, r5
    9882:	4621      	mov	r1, r4
    9884:	4808      	ldr	r0, [pc, #32]	; (98a8 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    9886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    988a:	f7ff bf9f 	b.w	97cc <z_heap_aligned_alloc>
    988e:	bf00      	nop
    9890:	0000d0c3 	.word	0x0000d0c3
    9894:	0000d045 	.word	0x0000d045
    9898:	0000b80f 	.word	0x0000b80f
    989c:	0000d100 	.word	0x0000d100
    98a0:	0000baab 	.word	0x0000baab
    98a4:	0000bac6 	.word	0x0000bac6
    98a8:	200001c0 	.word	0x200001c0

000098ac <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    98ac:	4b01      	ldr	r3, [pc, #4]	; (98b4 <k_thread_system_pool_assign+0x8>)
    98ae:	6703      	str	r3, [r0, #112]	; 0x70
}
    98b0:	4770      	bx	lr
    98b2:	bf00      	nop
    98b4:	200001c0 	.word	0x200001c0

000098b8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    98b8:	4a02      	ldr	r2, [pc, #8]	; (98c4 <boot_banner+0xc>)
    98ba:	4903      	ldr	r1, [pc, #12]	; (98c8 <boot_banner+0x10>)
    98bc:	4803      	ldr	r0, [pc, #12]	; (98cc <boot_banner+0x14>)
    98be:	f000 bb34 	b.w	9f2a <printk>
    98c2:	bf00      	nop
    98c4:	0000ce4d 	.word	0x0000ce4d
    98c8:	0000d12d 	.word	0x0000d12d
    98cc:	0000d13a 	.word	0x0000d13a

000098d0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    98d0:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    98d2:	4c0e      	ldr	r4, [pc, #56]	; (990c <statics_init+0x3c>)
    98d4:	4d0e      	ldr	r5, [pc, #56]	; (9910 <statics_init+0x40>)
    98d6:	4e0f      	ldr	r6, [pc, #60]	; (9914 <statics_init+0x44>)
    98d8:	42ac      	cmp	r4, r5
    98da:	d90c      	bls.n	98f6 <statics_init+0x26>
    98dc:	490e      	ldr	r1, [pc, #56]	; (9918 <statics_init+0x48>)
    98de:	480f      	ldr	r0, [pc, #60]	; (991c <statics_init+0x4c>)
    98e0:	2318      	movs	r3, #24
    98e2:	4632      	mov	r2, r6
    98e4:	f000 fc6e 	bl	a1c4 <assert_print>
    98e8:	480d      	ldr	r0, [pc, #52]	; (9920 <statics_init+0x50>)
    98ea:	f000 fc6b 	bl	a1c4 <assert_print>
    98ee:	2118      	movs	r1, #24
    98f0:	4630      	mov	r0, r6
    98f2:	f000 fc60 	bl	a1b6 <assert_post_action>
    98f6:	42ac      	cmp	r4, r5
    98f8:	d301      	bcc.n	98fe <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    98fa:	2000      	movs	r0, #0
    98fc:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    98fe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9902:	4620      	mov	r0, r4
    9904:	f001 fa0d 	bl	ad22 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9908:	3418      	adds	r4, #24
    990a:	e7e5      	b.n	98d8 <statics_init+0x8>
    990c:	200001c0 	.word	0x200001c0
    9910:	200001d8 	.word	0x200001d8
    9914:	0000d161 	.word	0x0000d161
    9918:	0000d183 	.word	0x0000d183
    991c:	0000b80f 	.word	0x0000b80f
    9920:	0000cc22 	.word	0x0000cc22

00009924 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    9924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9928:	b085      	sub	sp, #20
    992a:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    992e:	4606      	mov	r6, r0
    9930:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9932:	4648      	mov	r0, r9
    9934:	4641      	mov	r1, r8
{
    9936:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9938:	f001 f9a4 	bl	ac84 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    993c:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9940:	4682      	mov	sl, r0
    9942:	460f      	mov	r7, r1
	__asm__ volatile(
    9944:	f04f 0320 	mov.w	r3, #32
    9948:	f3ef 8511 	mrs	r5, BASEPRI
    994c:	f383 8812 	msr	BASEPRI_MAX, r3
    9950:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9954:	4620      	mov	r0, r4
    9956:	f7fd fed3 	bl	7700 <z_spin_lock_valid>
    995a:	b968      	cbnz	r0, 9978 <k_heap_aligned_alloc+0x54>
    995c:	4a3c      	ldr	r2, [pc, #240]	; (9a50 <k_heap_aligned_alloc+0x12c>)
    995e:	493d      	ldr	r1, [pc, #244]	; (9a54 <k_heap_aligned_alloc+0x130>)
    9960:	483d      	ldr	r0, [pc, #244]	; (9a58 <k_heap_aligned_alloc+0x134>)
    9962:	238e      	movs	r3, #142	; 0x8e
    9964:	f000 fc2e 	bl	a1c4 <assert_print>
    9968:	483c      	ldr	r0, [pc, #240]	; (9a5c <k_heap_aligned_alloc+0x138>)
    996a:	4621      	mov	r1, r4
    996c:	f000 fc2a 	bl	a1c4 <assert_print>
    9970:	4837      	ldr	r0, [pc, #220]	; (9a50 <k_heap_aligned_alloc+0x12c>)
    9972:	218e      	movs	r1, #142	; 0x8e
    9974:	f000 fc1f 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9978:	4620      	mov	r0, r4
    997a:	f7fd fedf 	bl	773c <z_spin_lock_set_owner>
    997e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    9982:	b17b      	cbz	r3, 99a4 <k_heap_aligned_alloc+0x80>
    9984:	ea59 0808 	orrs.w	r8, r9, r8
    9988:	d00c      	beq.n	99a4 <k_heap_aligned_alloc+0x80>
    998a:	4935      	ldr	r1, [pc, #212]	; (9a60 <k_heap_aligned_alloc+0x13c>)
    998c:	4a35      	ldr	r2, [pc, #212]	; (9a64 <k_heap_aligned_alloc+0x140>)
    998e:	4832      	ldr	r0, [pc, #200]	; (9a58 <k_heap_aligned_alloc+0x134>)
    9990:	2349      	movs	r3, #73	; 0x49
    9992:	f000 fc17 	bl	a1c4 <assert_print>
    9996:	4834      	ldr	r0, [pc, #208]	; (9a68 <k_heap_aligned_alloc+0x144>)
    9998:	f000 fc14 	bl	a1c4 <assert_print>
    999c:	4831      	ldr	r0, [pc, #196]	; (9a64 <k_heap_aligned_alloc+0x140>)
    999e:	2149      	movs	r1, #73	; 0x49
    99a0:	f000 fc09 	bl	a1b6 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99a4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9a50 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    99a8:	9903      	ldr	r1, [sp, #12]
    99aa:	465a      	mov	r2, fp
    99ac:	4630      	mov	r0, r6
    99ae:	f7f8 fd61 	bl	2474 <sys_heap_aligned_alloc>
    99b2:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    99b4:	f7ff fdb8 	bl	9528 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    99b8:	f1b8 0f00 	cmp.w	r8, #0
    99bc:	d019      	beq.n	99f2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99be:	4620      	mov	r0, r4
    99c0:	f7fd feac 	bl	771c <z_spin_unlock_valid>
    99c4:	b968      	cbnz	r0, 99e2 <k_heap_aligned_alloc+0xbe>
    99c6:	4a22      	ldr	r2, [pc, #136]	; (9a50 <k_heap_aligned_alloc+0x12c>)
    99c8:	4928      	ldr	r1, [pc, #160]	; (9a6c <k_heap_aligned_alloc+0x148>)
    99ca:	4823      	ldr	r0, [pc, #140]	; (9a58 <k_heap_aligned_alloc+0x134>)
    99cc:	23b9      	movs	r3, #185	; 0xb9
    99ce:	f000 fbf9 	bl	a1c4 <assert_print>
    99d2:	4827      	ldr	r0, [pc, #156]	; (9a70 <k_heap_aligned_alloc+0x14c>)
    99d4:	4621      	mov	r1, r4
    99d6:	f000 fbf5 	bl	a1c4 <assert_print>
    99da:	481d      	ldr	r0, [pc, #116]	; (9a50 <k_heap_aligned_alloc+0x12c>)
    99dc:	21b9      	movs	r1, #185	; 0xb9
    99de:	f000 fbea 	bl	a1b6 <assert_post_action>
	__asm__ volatile(
    99e2:	f385 8811 	msr	BASEPRI, r5
    99e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    99ea:	4640      	mov	r0, r8
    99ec:	b005      	add	sp, #20
    99ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    99f2:	ebba 0000 	subs.w	r0, sl, r0
    99f6:	eb67 0101 	sbc.w	r1, r7, r1
    99fa:	2801      	cmp	r0, #1
    99fc:	f171 0300 	sbcs.w	r3, r1, #0
    9a00:	dbdd      	blt.n	99be <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    9a02:	e9cd 0100 	strd	r0, r1, [sp]
    9a06:	f106 020c 	add.w	r2, r6, #12
    9a0a:	4629      	mov	r1, r5
    9a0c:	4620      	mov	r0, r4
    9a0e:	f7fe fe0f 	bl	8630 <z_pend_curr>
	__asm__ volatile(
    9a12:	f04f 0320 	mov.w	r3, #32
    9a16:	f3ef 8511 	mrs	r5, BASEPRI
    9a1a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a22:	4620      	mov	r0, r4
    9a24:	f7fd fe6c 	bl	7700 <z_spin_lock_valid>
    9a28:	b968      	cbnz	r0, 9a46 <k_heap_aligned_alloc+0x122>
    9a2a:	490a      	ldr	r1, [pc, #40]	; (9a54 <k_heap_aligned_alloc+0x130>)
    9a2c:	480a      	ldr	r0, [pc, #40]	; (9a58 <k_heap_aligned_alloc+0x134>)
    9a2e:	238e      	movs	r3, #142	; 0x8e
    9a30:	464a      	mov	r2, r9
    9a32:	f000 fbc7 	bl	a1c4 <assert_print>
    9a36:	4809      	ldr	r0, [pc, #36]	; (9a5c <k_heap_aligned_alloc+0x138>)
    9a38:	4621      	mov	r1, r4
    9a3a:	f000 fbc3 	bl	a1c4 <assert_print>
    9a3e:	218e      	movs	r1, #142	; 0x8e
    9a40:	4648      	mov	r0, r9
    9a42:	f000 fbb8 	bl	a1b6 <assert_post_action>
	z_spin_lock_set_owner(l);
    9a46:	4620      	mov	r0, r4
    9a48:	f7fd fe78 	bl	773c <z_spin_lock_set_owner>
	return k;
    9a4c:	e7ac      	b.n	99a8 <k_heap_aligned_alloc+0x84>
    9a4e:	bf00      	nop
    9a50:	0000b959 	.word	0x0000b959
    9a54:	0000b9b2 	.word	0x0000b9b2
    9a58:	0000b80f 	.word	0x0000b80f
    9a5c:	0000b9c7 	.word	0x0000b9c7
    9a60:	0000d199 	.word	0x0000d199
    9a64:	0000d161 	.word	0x0000d161
    9a68:	0000ce4b 	.word	0x0000ce4b
    9a6c:	0000b986 	.word	0x0000b986
    9a70:	0000b99d 	.word	0x0000b99d

00009a74 <reserve>:
    strcpy(buffer->name, name);
    buffer->head = first;
    return buffer;
}

void* reserve(cab* cab_id){
    9a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a76:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    9a78:	f100 0618 	add.w	r6, r0, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    9a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9a84:	4630      	mov	r0, r6
    9a86:	f7fd fe93 	bl	77b0 <z_impl_k_mutex_lock>
    for(int i = 0; i< N_TASKS + 1; i++){
    9a8a:	8920      	ldrh	r0, [r4, #8]
    9a8c:	68e2      	ldr	r2, [r4, #12]
    9a8e:	f104 010f 	add.w	r1, r4, #15
    9a92:	2300      	movs	r3, #0
        buffer = cab_id->buffers + (i * cab_id->size);
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9a94:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    9a98:	b95d      	cbnz	r5, 9ab2 <reserve+0x3e>
    9a9a:	6967      	ldr	r7, [r4, #20]
    9a9c:	4297      	cmp	r7, r2
        buffer = cab_id->buffers + (i * cab_id->size);
    9a9e:	4615      	mov	r5, r2
        if(cab_id->flags[i] == 0 && cab_id->head != buffer){
    9aa0:	d007      	beq.n	9ab2 <reserve+0x3e>
            cab_id->flags[i] = 1;
    9aa2:	441c      	add	r4, r3
    9aa4:	2301      	movs	r3, #1
    9aa6:	7423      	strb	r3, [r4, #16]
            k_mutex_unlock(&cab_id->mutex);
    9aa8:	4630      	mov	r0, r6
    9aaa:	f001 f942 	bl	ad32 <k_mutex_unlock.isra.0>
        }
    }
    k_mutex_unlock(&cab_id->mutex);
    printk("No available buffers\n");
    return 0;
} 
    9aae:	4628      	mov	r0, r5
    9ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for(int i = 0; i< N_TASKS + 1; i++){
    9ab2:	3301      	adds	r3, #1
    9ab4:	2b03      	cmp	r3, #3
    9ab6:	4402      	add	r2, r0
    9ab8:	d1ec      	bne.n	9a94 <reserve+0x20>
    k_mutex_unlock(&cab_id->mutex);
    9aba:	4630      	mov	r0, r6
    9abc:	f001 f939 	bl	ad32 <k_mutex_unlock.isra.0>
    printk("No available buffers\n");
    9ac0:	4802      	ldr	r0, [pc, #8]	; (9acc <reserve+0x58>)
    9ac2:	f000 fa32 	bl	9f2a <printk>
    return 0;
    9ac6:	2500      	movs	r5, #0
    9ac8:	e7f1      	b.n	9aae <reserve+0x3a>
    9aca:	bf00      	nop
    9acc:	0000d1df 	.word	0x0000d1df

00009ad0 <exit>:
    9ad0:	b508      	push	{r3, lr}
    9ad2:	4b07      	ldr	r3, [pc, #28]	; (9af0 <exit+0x20>)
    9ad4:	4604      	mov	r4, r0
    9ad6:	b113      	cbz	r3, 9ade <exit+0xe>
    9ad8:	2100      	movs	r1, #0
    9ada:	f3af 8000 	nop.w
    9ade:	4b05      	ldr	r3, [pc, #20]	; (9af4 <exit+0x24>)
    9ae0:	6818      	ldr	r0, [r3, #0]
    9ae2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9ae4:	b103      	cbz	r3, 9ae8 <exit+0x18>
    9ae6:	4798      	blx	r3
    9ae8:	4620      	mov	r0, r4
    9aea:	f7fa ff21 	bl	4930 <_exit>
    9aee:	bf00      	nop
    9af0:	00000000 	.word	0x00000000
    9af4:	0000b4e4 	.word	0x0000b4e4

00009af8 <nrf_cc3xx_platform_init_no_rng>:
    9af8:	b510      	push	{r4, lr}
    9afa:	4c0a      	ldr	r4, [pc, #40]	; (9b24 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9afc:	6823      	ldr	r3, [r4, #0]
    9afe:	b11b      	cbz	r3, 9b08 <nrf_cc3xx_platform_init_no_rng+0x10>
    9b00:	2301      	movs	r3, #1
    9b02:	6023      	str	r3, [r4, #0]
    9b04:	2000      	movs	r0, #0
    9b06:	bd10      	pop	{r4, pc}
    9b08:	f000 f8ce 	bl	9ca8 <CC_LibInitNoRng>
    9b0c:	2800      	cmp	r0, #0
    9b0e:	d0f7      	beq.n	9b00 <nrf_cc3xx_platform_init_no_rng+0x8>
    9b10:	3801      	subs	r0, #1
    9b12:	2806      	cmp	r0, #6
    9b14:	d803      	bhi.n	9b1e <nrf_cc3xx_platform_init_no_rng+0x26>
    9b16:	4b04      	ldr	r3, [pc, #16]	; (9b28 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9b18:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	4803      	ldr	r0, [pc, #12]	; (9b2c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9b20:	bd10      	pop	{r4, pc}
    9b22:	bf00      	nop
    9b24:	20000f1c 	.word	0x20000f1c
    9b28:	0000b4e8 	.word	0x0000b4e8
    9b2c:	ffff8ffe 	.word	0xffff8ffe

00009b30 <nrf_cc3xx_platform_abort>:
    9b30:	f3bf 8f4f 	dsb	sy
    9b34:	4905      	ldr	r1, [pc, #20]	; (9b4c <nrf_cc3xx_platform_abort+0x1c>)
    9b36:	4b06      	ldr	r3, [pc, #24]	; (9b50 <nrf_cc3xx_platform_abort+0x20>)
    9b38:	68ca      	ldr	r2, [r1, #12]
    9b3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9b3e:	4313      	orrs	r3, r2
    9b40:	60cb      	str	r3, [r1, #12]
    9b42:	f3bf 8f4f 	dsb	sy
    9b46:	bf00      	nop
    9b48:	e7fd      	b.n	9b46 <nrf_cc3xx_platform_abort+0x16>
    9b4a:	bf00      	nop
    9b4c:	e000ed00 	.word	0xe000ed00
    9b50:	05fa0004 	.word	0x05fa0004

00009b54 <CC_PalAbort>:
    9b54:	b410      	push	{r4}
    9b56:	4b09      	ldr	r3, [pc, #36]	; (9b7c <CC_PalAbort+0x28>)
    9b58:	4909      	ldr	r1, [pc, #36]	; (9b80 <CC_PalAbort+0x2c>)
    9b5a:	4c0a      	ldr	r4, [pc, #40]	; (9b84 <CC_PalAbort+0x30>)
    9b5c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9b60:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9b64:	6849      	ldr	r1, [r1, #4]
    9b66:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9b6a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    9b6e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9b72:	2300      	movs	r3, #0
    9b74:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9b78:	bc10      	pop	{r4}
    9b7a:	4708      	bx	r1
    9b7c:	5002b000 	.word	0x5002b000
    9b80:	2000014c 	.word	0x2000014c
    9b84:	5002a000 	.word	0x5002a000

00009b88 <nrf_cc3xx_platform_set_abort>:
    9b88:	e9d0 1200 	ldrd	r1, r2, [r0]
    9b8c:	4b01      	ldr	r3, [pc, #4]	; (9b94 <nrf_cc3xx_platform_set_abort+0xc>)
    9b8e:	e9c3 1200 	strd	r1, r2, [r3]
    9b92:	4770      	bx	lr
    9b94:	2000014c 	.word	0x2000014c

00009b98 <mutex_free>:
    9b98:	b510      	push	{r4, lr}
    9b9a:	4604      	mov	r4, r0
    9b9c:	b130      	cbz	r0, 9bac <mutex_free+0x14>
    9b9e:	6863      	ldr	r3, [r4, #4]
    9ba0:	06db      	lsls	r3, r3, #27
    9ba2:	d502      	bpl.n	9baa <mutex_free+0x12>
    9ba4:	2300      	movs	r3, #0
    9ba6:	6023      	str	r3, [r4, #0]
    9ba8:	6063      	str	r3, [r4, #4]
    9baa:	bd10      	pop	{r4, pc}
    9bac:	4b02      	ldr	r3, [pc, #8]	; (9bb8 <mutex_free+0x20>)
    9bae:	4803      	ldr	r0, [pc, #12]	; (9bbc <mutex_free+0x24>)
    9bb0:	685b      	ldr	r3, [r3, #4]
    9bb2:	4798      	blx	r3
    9bb4:	e7f3      	b.n	9b9e <mutex_free+0x6>
    9bb6:	bf00      	nop
    9bb8:	2000014c 	.word	0x2000014c
    9bbc:	0000b504 	.word	0x0000b504

00009bc0 <mutex_lock>:
    9bc0:	b1b0      	cbz	r0, 9bf0 <mutex_lock+0x30>
    9bc2:	6843      	ldr	r3, [r0, #4]
    9bc4:	b193      	cbz	r3, 9bec <mutex_lock+0x2c>
    9bc6:	06db      	lsls	r3, r3, #27
    9bc8:	d50e      	bpl.n	9be8 <mutex_lock+0x28>
    9bca:	2301      	movs	r3, #1
    9bcc:	e850 2f00 	ldrex	r2, [r0]
    9bd0:	4619      	mov	r1, r3
    9bd2:	e840 1c00 	strex	ip, r1, [r0]
    9bd6:	f09c 0f00 	teq	ip, #0
    9bda:	d1f7      	bne.n	9bcc <mutex_lock+0xc>
    9bdc:	2a01      	cmp	r2, #1
    9bde:	d0f5      	beq.n	9bcc <mutex_lock+0xc>
    9be0:	f3bf 8f5f 	dmb	sy
    9be4:	2000      	movs	r0, #0
    9be6:	4770      	bx	lr
    9be8:	4803      	ldr	r0, [pc, #12]	; (9bf8 <mutex_lock+0x38>)
    9bea:	4770      	bx	lr
    9bec:	4803      	ldr	r0, [pc, #12]	; (9bfc <mutex_lock+0x3c>)
    9bee:	4770      	bx	lr
    9bf0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9bf4:	4770      	bx	lr
    9bf6:	bf00      	nop
    9bf8:	ffff8fe9 	.word	0xffff8fe9
    9bfc:	ffff8fea 	.word	0xffff8fea

00009c00 <mutex_unlock>:
    9c00:	b168      	cbz	r0, 9c1e <mutex_unlock+0x1e>
    9c02:	6843      	ldr	r3, [r0, #4]
    9c04:	b13b      	cbz	r3, 9c16 <mutex_unlock+0x16>
    9c06:	06db      	lsls	r3, r3, #27
    9c08:	d507      	bpl.n	9c1a <mutex_unlock+0x1a>
    9c0a:	f3bf 8f5f 	dmb	sy
    9c0e:	2300      	movs	r3, #0
    9c10:	6003      	str	r3, [r0, #0]
    9c12:	4618      	mov	r0, r3
    9c14:	4770      	bx	lr
    9c16:	4803      	ldr	r0, [pc, #12]	; (9c24 <mutex_unlock+0x24>)
    9c18:	4770      	bx	lr
    9c1a:	4803      	ldr	r0, [pc, #12]	; (9c28 <mutex_unlock+0x28>)
    9c1c:	4770      	bx	lr
    9c1e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9c22:	4770      	bx	lr
    9c24:	ffff8fea 	.word	0xffff8fea
    9c28:	ffff8fe9 	.word	0xffff8fe9

00009c2c <mutex_init>:
    9c2c:	b510      	push	{r4, lr}
    9c2e:	4604      	mov	r4, r0
    9c30:	b120      	cbz	r0, 9c3c <mutex_init+0x10>
    9c32:	2200      	movs	r2, #0
    9c34:	2311      	movs	r3, #17
    9c36:	6022      	str	r2, [r4, #0]
    9c38:	6063      	str	r3, [r4, #4]
    9c3a:	bd10      	pop	{r4, pc}
    9c3c:	4801      	ldr	r0, [pc, #4]	; (9c44 <mutex_init+0x18>)
    9c3e:	f7ff ff89 	bl	9b54 <CC_PalAbort>
    9c42:	e7f6      	b.n	9c32 <mutex_init+0x6>
    9c44:	0000b52c 	.word	0x0000b52c

00009c48 <nrf_cc3xx_platform_set_mutexes>:
    9c48:	b570      	push	{r4, r5, r6, lr}
    9c4a:	e9d0 2300 	ldrd	r2, r3, [r0]
    9c4e:	4c13      	ldr	r4, [pc, #76]	; (9c9c <nrf_cc3xx_platform_set_mutexes+0x54>)
    9c50:	4d13      	ldr	r5, [pc, #76]	; (9ca0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    9c52:	6063      	str	r3, [r4, #4]
    9c54:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    9c58:	e9c4 3002 	strd	r3, r0, [r4, #8]
    9c5c:	6022      	str	r2, [r4, #0]
    9c5e:	4b11      	ldr	r3, [pc, #68]	; (9ca4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9c60:	6808      	ldr	r0, [r1, #0]
    9c62:	6018      	str	r0, [r3, #0]
    9c64:	6848      	ldr	r0, [r1, #4]
    9c66:	6058      	str	r0, [r3, #4]
    9c68:	6888      	ldr	r0, [r1, #8]
    9c6a:	6098      	str	r0, [r3, #8]
    9c6c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    9c70:	60d8      	str	r0, [r3, #12]
    9c72:	6119      	str	r1, [r3, #16]
    9c74:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9c78:	06db      	lsls	r3, r3, #27
    9c7a:	d50d      	bpl.n	9c98 <nrf_cc3xx_platform_set_mutexes+0x50>
    9c7c:	2300      	movs	r3, #0
    9c7e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    9c82:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    9c86:	f505 708a 	add.w	r0, r5, #276	; 0x114
    9c8a:	4790      	blx	r2
    9c8c:	6823      	ldr	r3, [r4, #0]
    9c8e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    9c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c96:	4718      	bx	r3
    9c98:	bd70      	pop	{r4, r5, r6, pc}
    9c9a:	bf00      	nop
    9c9c:	2000015c 	.word	0x2000015c
    9ca0:	20000f34 	.word	0x20000f34
    9ca4:	2000016c 	.word	0x2000016c

00009ca8 <CC_LibInitNoRng>:
    9ca8:	b538      	push	{r3, r4, r5, lr}
    9caa:	f000 f82f 	bl	9d0c <CC_HalInit>
    9cae:	b120      	cbz	r0, 9cba <CC_LibInitNoRng+0x12>
    9cb0:	2403      	movs	r4, #3
    9cb2:	f000 f863 	bl	9d7c <CC_PalTerminate>
    9cb6:	4620      	mov	r0, r4
    9cb8:	bd38      	pop	{r3, r4, r5, pc}
    9cba:	f000 f831 	bl	9d20 <CC_PalInit>
    9cbe:	b998      	cbnz	r0, 9ce8 <CC_LibInitNoRng+0x40>
    9cc0:	f000 f8ac 	bl	9e1c <CC_PalPowerSaveModeSelect>
    9cc4:	b998      	cbnz	r0, 9cee <CC_LibInitNoRng+0x46>
    9cc6:	4d0f      	ldr	r5, [pc, #60]	; (9d04 <CC_LibInitNoRng+0x5c>)
    9cc8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    9ccc:	0e1b      	lsrs	r3, r3, #24
    9cce:	2bf0      	cmp	r3, #240	; 0xf0
    9cd0:	d108      	bne.n	9ce4 <CC_LibInitNoRng+0x3c>
    9cd2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    9cd6:	4b0c      	ldr	r3, [pc, #48]	; (9d08 <CC_LibInitNoRng+0x60>)
    9cd8:	429a      	cmp	r2, r3
    9cda:	d00a      	beq.n	9cf2 <CC_LibInitNoRng+0x4a>
    9cdc:	2407      	movs	r4, #7
    9cde:	f000 f817 	bl	9d10 <CC_HalTerminate>
    9ce2:	e7e6      	b.n	9cb2 <CC_LibInitNoRng+0xa>
    9ce4:	2406      	movs	r4, #6
    9ce6:	e7fa      	b.n	9cde <CC_LibInitNoRng+0x36>
    9ce8:	2404      	movs	r4, #4
    9cea:	4620      	mov	r0, r4
    9cec:	bd38      	pop	{r3, r4, r5, pc}
    9cee:	2400      	movs	r4, #0
    9cf0:	e7f5      	b.n	9cde <CC_LibInitNoRng+0x36>
    9cf2:	2001      	movs	r0, #1
    9cf4:	f000 f892 	bl	9e1c <CC_PalPowerSaveModeSelect>
    9cf8:	4604      	mov	r4, r0
    9cfa:	2800      	cmp	r0, #0
    9cfc:	d1f7      	bne.n	9cee <CC_LibInitNoRng+0x46>
    9cfe:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    9d02:	e7d8      	b.n	9cb6 <CC_LibInitNoRng+0xe>
    9d04:	5002b000 	.word	0x5002b000
    9d08:	20e00000 	.word	0x20e00000

00009d0c <CC_HalInit>:
    9d0c:	2000      	movs	r0, #0
    9d0e:	4770      	bx	lr

00009d10 <CC_HalTerminate>:
    9d10:	2000      	movs	r0, #0
    9d12:	4770      	bx	lr

00009d14 <CC_HalMaskInterrupt>:
    9d14:	4b01      	ldr	r3, [pc, #4]	; (9d1c <CC_HalMaskInterrupt+0x8>)
    9d16:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    9d1a:	4770      	bx	lr
    9d1c:	5002b000 	.word	0x5002b000

00009d20 <CC_PalInit>:
    9d20:	b510      	push	{r4, lr}
    9d22:	4811      	ldr	r0, [pc, #68]	; (9d68 <CC_PalInit+0x48>)
    9d24:	f000 f848 	bl	9db8 <CC_PalMutexCreate>
    9d28:	b100      	cbz	r0, 9d2c <CC_PalInit+0xc>
    9d2a:	bd10      	pop	{r4, pc}
    9d2c:	480f      	ldr	r0, [pc, #60]	; (9d6c <CC_PalInit+0x4c>)
    9d2e:	f000 f843 	bl	9db8 <CC_PalMutexCreate>
    9d32:	2800      	cmp	r0, #0
    9d34:	d1f9      	bne.n	9d2a <CC_PalInit+0xa>
    9d36:	4c0e      	ldr	r4, [pc, #56]	; (9d70 <CC_PalInit+0x50>)
    9d38:	4620      	mov	r0, r4
    9d3a:	f000 f83d 	bl	9db8 <CC_PalMutexCreate>
    9d3e:	2800      	cmp	r0, #0
    9d40:	d1f3      	bne.n	9d2a <CC_PalInit+0xa>
    9d42:	4b0c      	ldr	r3, [pc, #48]	; (9d74 <CC_PalInit+0x54>)
    9d44:	480c      	ldr	r0, [pc, #48]	; (9d78 <CC_PalInit+0x58>)
    9d46:	601c      	str	r4, [r3, #0]
    9d48:	f000 f836 	bl	9db8 <CC_PalMutexCreate>
    9d4c:	4601      	mov	r1, r0
    9d4e:	2800      	cmp	r0, #0
    9d50:	d1eb      	bne.n	9d2a <CC_PalInit+0xa>
    9d52:	f000 f82d 	bl	9db0 <CC_PalDmaInit>
    9d56:	4604      	mov	r4, r0
    9d58:	b108      	cbz	r0, 9d5e <CC_PalInit+0x3e>
    9d5a:	4620      	mov	r0, r4
    9d5c:	bd10      	pop	{r4, pc}
    9d5e:	f000 f83f 	bl	9de0 <CC_PalPowerSaveModeInit>
    9d62:	4620      	mov	r0, r4
    9d64:	e7fa      	b.n	9d5c <CC_PalInit+0x3c>
    9d66:	bf00      	nop
    9d68:	200001a4 	.word	0x200001a4
    9d6c:	20000198 	.word	0x20000198
    9d70:	200001a0 	.word	0x200001a0
    9d74:	200001a8 	.word	0x200001a8
    9d78:	2000019c 	.word	0x2000019c

00009d7c <CC_PalTerminate>:
    9d7c:	b508      	push	{r3, lr}
    9d7e:	4808      	ldr	r0, [pc, #32]	; (9da0 <CC_PalTerminate+0x24>)
    9d80:	f000 f824 	bl	9dcc <CC_PalMutexDestroy>
    9d84:	4807      	ldr	r0, [pc, #28]	; (9da4 <CC_PalTerminate+0x28>)
    9d86:	f000 f821 	bl	9dcc <CC_PalMutexDestroy>
    9d8a:	4807      	ldr	r0, [pc, #28]	; (9da8 <CC_PalTerminate+0x2c>)
    9d8c:	f000 f81e 	bl	9dcc <CC_PalMutexDestroy>
    9d90:	4806      	ldr	r0, [pc, #24]	; (9dac <CC_PalTerminate+0x30>)
    9d92:	f000 f81b 	bl	9dcc <CC_PalMutexDestroy>
    9d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    9d9a:	f000 b80b 	b.w	9db4 <CC_PalDmaTerminate>
    9d9e:	bf00      	nop
    9da0:	200001a4 	.word	0x200001a4
    9da4:	20000198 	.word	0x20000198
    9da8:	200001a0 	.word	0x200001a0
    9dac:	2000019c 	.word	0x2000019c

00009db0 <CC_PalDmaInit>:
    9db0:	2000      	movs	r0, #0
    9db2:	4770      	bx	lr

00009db4 <CC_PalDmaTerminate>:
    9db4:	4770      	bx	lr
    9db6:	bf00      	nop

00009db8 <CC_PalMutexCreate>:
    9db8:	b508      	push	{r3, lr}
    9dba:	4b03      	ldr	r3, [pc, #12]	; (9dc8 <CC_PalMutexCreate+0x10>)
    9dbc:	6802      	ldr	r2, [r0, #0]
    9dbe:	681b      	ldr	r3, [r3, #0]
    9dc0:	6810      	ldr	r0, [r2, #0]
    9dc2:	4798      	blx	r3
    9dc4:	2000      	movs	r0, #0
    9dc6:	bd08      	pop	{r3, pc}
    9dc8:	2000015c 	.word	0x2000015c

00009dcc <CC_PalMutexDestroy>:
    9dcc:	b508      	push	{r3, lr}
    9dce:	4b03      	ldr	r3, [pc, #12]	; (9ddc <CC_PalMutexDestroy+0x10>)
    9dd0:	6802      	ldr	r2, [r0, #0]
    9dd2:	685b      	ldr	r3, [r3, #4]
    9dd4:	6810      	ldr	r0, [r2, #0]
    9dd6:	4798      	blx	r3
    9dd8:	2000      	movs	r0, #0
    9dda:	bd08      	pop	{r3, pc}
    9ddc:	2000015c 	.word	0x2000015c

00009de0 <CC_PalPowerSaveModeInit>:
    9de0:	b570      	push	{r4, r5, r6, lr}
    9de2:	4c09      	ldr	r4, [pc, #36]	; (9e08 <CC_PalPowerSaveModeInit+0x28>)
    9de4:	4d09      	ldr	r5, [pc, #36]	; (9e0c <CC_PalPowerSaveModeInit+0x2c>)
    9de6:	6920      	ldr	r0, [r4, #16]
    9de8:	68ab      	ldr	r3, [r5, #8]
    9dea:	4798      	blx	r3
    9dec:	b118      	cbz	r0, 9df6 <CC_PalPowerSaveModeInit+0x16>
    9dee:	4b08      	ldr	r3, [pc, #32]	; (9e10 <CC_PalPowerSaveModeInit+0x30>)
    9df0:	4808      	ldr	r0, [pc, #32]	; (9e14 <CC_PalPowerSaveModeInit+0x34>)
    9df2:	685b      	ldr	r3, [r3, #4]
    9df4:	4798      	blx	r3
    9df6:	4a08      	ldr	r2, [pc, #32]	; (9e18 <CC_PalPowerSaveModeInit+0x38>)
    9df8:	68eb      	ldr	r3, [r5, #12]
    9dfa:	6920      	ldr	r0, [r4, #16]
    9dfc:	2100      	movs	r1, #0
    9dfe:	6011      	str	r1, [r2, #0]
    9e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9e04:	4718      	bx	r3
    9e06:	bf00      	nop
    9e08:	2000016c 	.word	0x2000016c
    9e0c:	2000015c 	.word	0x2000015c
    9e10:	2000014c 	.word	0x2000014c
    9e14:	0000b550 	.word	0x0000b550
    9e18:	20000f30 	.word	0x20000f30

00009e1c <CC_PalPowerSaveModeSelect>:
    9e1c:	b570      	push	{r4, r5, r6, lr}
    9e1e:	4d1b      	ldr	r5, [pc, #108]	; (9e8c <CC_PalPowerSaveModeSelect+0x70>)
    9e20:	4e1b      	ldr	r6, [pc, #108]	; (9e90 <CC_PalPowerSaveModeSelect+0x74>)
    9e22:	4604      	mov	r4, r0
    9e24:	68b2      	ldr	r2, [r6, #8]
    9e26:	6928      	ldr	r0, [r5, #16]
    9e28:	4790      	blx	r2
    9e2a:	b9f8      	cbnz	r0, 9e6c <CC_PalPowerSaveModeSelect+0x50>
    9e2c:	b15c      	cbz	r4, 9e46 <CC_PalPowerSaveModeSelect+0x2a>
    9e2e:	4c19      	ldr	r4, [pc, #100]	; (9e94 <CC_PalPowerSaveModeSelect+0x78>)
    9e30:	6823      	ldr	r3, [r4, #0]
    9e32:	b1b3      	cbz	r3, 9e62 <CC_PalPowerSaveModeSelect+0x46>
    9e34:	2b01      	cmp	r3, #1
    9e36:	d01b      	beq.n	9e70 <CC_PalPowerSaveModeSelect+0x54>
    9e38:	3b01      	subs	r3, #1
    9e3a:	6023      	str	r3, [r4, #0]
    9e3c:	6928      	ldr	r0, [r5, #16]
    9e3e:	68f3      	ldr	r3, [r6, #12]
    9e40:	4798      	blx	r3
    9e42:	2000      	movs	r0, #0
    9e44:	bd70      	pop	{r4, r5, r6, pc}
    9e46:	4c13      	ldr	r4, [pc, #76]	; (9e94 <CC_PalPowerSaveModeSelect+0x78>)
    9e48:	6821      	ldr	r1, [r4, #0]
    9e4a:	b941      	cbnz	r1, 9e5e <CC_PalPowerSaveModeSelect+0x42>
    9e4c:	4b12      	ldr	r3, [pc, #72]	; (9e98 <CC_PalPowerSaveModeSelect+0x7c>)
    9e4e:	2201      	movs	r2, #1
    9e50:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    9e54:	4a11      	ldr	r2, [pc, #68]	; (9e9c <CC_PalPowerSaveModeSelect+0x80>)
    9e56:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d1fb      	bne.n	9e56 <CC_PalPowerSaveModeSelect+0x3a>
    9e5e:	3101      	adds	r1, #1
    9e60:	6021      	str	r1, [r4, #0]
    9e62:	68f3      	ldr	r3, [r6, #12]
    9e64:	6928      	ldr	r0, [r5, #16]
    9e66:	4798      	blx	r3
    9e68:	2000      	movs	r0, #0
    9e6a:	bd70      	pop	{r4, r5, r6, pc}
    9e6c:	480c      	ldr	r0, [pc, #48]	; (9ea0 <CC_PalPowerSaveModeSelect+0x84>)
    9e6e:	bd70      	pop	{r4, r5, r6, pc}
    9e70:	4a0a      	ldr	r2, [pc, #40]	; (9e9c <CC_PalPowerSaveModeSelect+0x80>)
    9e72:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9e76:	2b00      	cmp	r3, #0
    9e78:	d1fb      	bne.n	9e72 <CC_PalPowerSaveModeSelect+0x56>
    9e7a:	4a07      	ldr	r2, [pc, #28]	; (9e98 <CC_PalPowerSaveModeSelect+0x7c>)
    9e7c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9e80:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9e84:	f7ff ff46 	bl	9d14 <CC_HalMaskInterrupt>
    9e88:	6823      	ldr	r3, [r4, #0]
    9e8a:	e7d5      	b.n	9e38 <CC_PalPowerSaveModeSelect+0x1c>
    9e8c:	2000016c 	.word	0x2000016c
    9e90:	2000015c 	.word	0x2000015c
    9e94:	20000f30 	.word	0x20000f30
    9e98:	5002a000 	.word	0x5002a000
    9e9c:	5002b000 	.word	0x5002b000
    9ea0:	ffff8fe9 	.word	0xffff8fe9

00009ea4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9ea4:	4770      	bx	lr

00009ea6 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    9ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9eaa:	4607      	mov	r7, r0
    9eac:	460e      	mov	r6, r1
    9eae:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    9eb0:	461d      	mov	r5, r3
    9eb2:	b30b      	cbz	r3, 9ef8 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    9eb4:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    9eb6:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    9eb8:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	4414      	add	r4, r2
    9ec0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    9ec4:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    9ec6:	f04f 0900 	mov.w	r9, #0
    9eca:	45d1      	cmp	r9, sl
    9ecc:	d308      	bcc.n	9ee0 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    9ece:	686a      	ldr	r2, [r5, #4]
    9ed0:	f105 0308 	add.w	r3, r5, #8
    9ed4:	4641      	mov	r1, r8
    9ed6:	4638      	mov	r0, r7
    9ed8:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    9eda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    9ede:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    9ee0:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    9ee4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    9ee8:	4620      	mov	r0, r4
    9eea:	f7f7 f851 	bl	f90 <strlen>
    9eee:	3001      	adds	r0, #1
    9ef0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9ef2:	f109 0901 	add.w	r9, r9, #1
    9ef6:	e7e8      	b.n	9eca <cbpprintf_external+0x24>
}
    9ef8:	f06f 0015 	mvn.w	r0, #21
    9efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009f00 <sys_notify_validate>:
	if (notify == NULL) {
    9f00:	4603      	mov	r3, r0
    9f02:	b158      	cbz	r0, 9f1c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9f04:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9f06:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    9f0a:	2a01      	cmp	r2, #1
    9f0c:	d003      	beq.n	9f16 <sys_notify_validate+0x16>
    9f0e:	2a03      	cmp	r2, #3
    9f10:	d104      	bne.n	9f1c <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    9f12:	6802      	ldr	r2, [r0, #0]
    9f14:	b112      	cbz	r2, 9f1c <sys_notify_validate+0x1c>
		notify->result = 0;
    9f16:	2000      	movs	r0, #0
    9f18:	6098      	str	r0, [r3, #8]
    9f1a:	4770      	bx	lr
    9f1c:	f06f 0015 	mvn.w	r0, #21
}
    9f20:	4770      	bx	lr

00009f22 <arch_printk_char_out>:
}
    9f22:	2000      	movs	r0, #0
    9f24:	4770      	bx	lr

00009f26 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    9f26:	f000 b95f 	b.w	a1e8 <z_log_vprintk>

00009f2a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    9f2a:	b40f      	push	{r0, r1, r2, r3}
    9f2c:	b507      	push	{r0, r1, r2, lr}
    9f2e:	a904      	add	r1, sp, #16
    9f30:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9f34:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    9f36:	f000 f957 	bl	a1e8 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    9f3a:	b003      	add	sp, #12
    9f3c:	f85d eb04 	ldr.w	lr, [sp], #4
    9f40:	b004      	add	sp, #16
    9f42:	4770      	bx	lr

00009f44 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f44:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9f46:	f013 0307 	ands.w	r3, r3, #7
    9f4a:	d105      	bne.n	9f58 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9f4c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9f4e:	2b00      	cmp	r3, #0
    9f50:	bf0c      	ite	eq
    9f52:	2000      	moveq	r0, #0
    9f54:	2003      	movne	r0, #3
    9f56:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9f58:	2b02      	cmp	r3, #2
    9f5a:	d105      	bne.n	9f68 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9f5c:	8bc0      	ldrh	r0, [r0, #30]
    9f5e:	fab0 f080 	clz	r0, r0
    9f62:	0940      	lsrs	r0, r0, #5
    9f64:	0080      	lsls	r0, r0, #2
    9f66:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9f68:	2b01      	cmp	r3, #1
    9f6a:	d105      	bne.n	9f78 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9f6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9f6e:	2b00      	cmp	r3, #0
    9f70:	bf0c      	ite	eq
    9f72:	2000      	moveq	r0, #0
    9f74:	2005      	movne	r0, #5
    9f76:	4770      	bx	lr
	int evt = EVT_NOP;
    9f78:	2000      	movs	r0, #0
}
    9f7a:	4770      	bx	lr

00009f7c <validate_args>:
{
    9f7c:	b510      	push	{r4, lr}
    9f7e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9f80:	b100      	cbz	r0, 9f84 <validate_args+0x8>
    9f82:	b911      	cbnz	r1, 9f8a <validate_args+0xe>
		return -EINVAL;
    9f84:	f06f 0015 	mvn.w	r0, #21
}
    9f88:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    9f8a:	1d08      	adds	r0, r1, #4
    9f8c:	f7ff ffb8 	bl	9f00 <sys_notify_validate>
	if ((rv == 0)
    9f90:	2800      	cmp	r0, #0
    9f92:	d1f9      	bne.n	9f88 <validate_args+0xc>
	    && ((cli->notify.flags
    9f94:	68a3      	ldr	r3, [r4, #8]
    9f96:	2b03      	cmp	r3, #3
    9f98:	d9f6      	bls.n	9f88 <validate_args+0xc>
    9f9a:	e7f3      	b.n	9f84 <validate_args+0x8>

00009f9c <notify_one>:
{
    9f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fa0:	460d      	mov	r5, r1
    9fa2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9fa4:	4619      	mov	r1, r3
    9fa6:	1d28      	adds	r0, r5, #4
{
    9fa8:	4690      	mov	r8, r2
    9faa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9fac:	f7f7 ff54 	bl	1e58 <sys_notify_finalize>
	if (cb) {
    9fb0:	4604      	mov	r4, r0
    9fb2:	b138      	cbz	r0, 9fc4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9fb4:	4633      	mov	r3, r6
    9fb6:	4642      	mov	r2, r8
    9fb8:	4629      	mov	r1, r5
    9fba:	4638      	mov	r0, r7
    9fbc:	46a4      	mov	ip, r4
}
    9fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9fc2:	4760      	bx	ip
}
    9fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009fc8 <onoff_manager_init>:
{
    9fc8:	b538      	push	{r3, r4, r5, lr}
    9fca:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9fcc:	4605      	mov	r5, r0
    9fce:	b158      	cbz	r0, 9fe8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9fd0:	b151      	cbz	r1, 9fe8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9fd2:	680b      	ldr	r3, [r1, #0]
    9fd4:	b143      	cbz	r3, 9fe8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9fd6:	684b      	ldr	r3, [r1, #4]
    9fd8:	b133      	cbz	r3, 9fe8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9fda:	2220      	movs	r2, #32
    9fdc:	2100      	movs	r1, #0
    9fde:	f000 ff89 	bl	aef4 <memset>
    9fe2:	612c      	str	r4, [r5, #16]
	return 0;
    9fe4:	2000      	movs	r0, #0
}
    9fe6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9fe8:	f06f 0015 	mvn.w	r0, #21
    9fec:	e7fb      	b.n	9fe6 <onoff_manager_init+0x1e>

00009fee <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9fee:	4604      	mov	r4, r0
    9ff0:	b508      	push	{r3, lr}
    9ff2:	4608      	mov	r0, r1
    9ff4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9ff6:	461a      	mov	r2, r3
    9ff8:	47a0      	blx	r4
	return z_impl_z_current_get();
    9ffa:	f7fe ff09 	bl	8e10 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9ffe:	f7fa faf5 	bl	45ec <z_impl_k_thread_abort>

0000a002 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    a002:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    a006:	8840      	ldrh	r0, [r0, #2]
}
    a008:	0840      	lsrs	r0, r0, #1
    a00a:	4770      	bx	lr

0000a00c <free_list_add>:
{
    a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a00e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    a010:	f7ff fff7 	bl	a002 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    a014:	fab0 f080 	clz	r0, r0
    a018:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    a01c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    a020:	00ca      	lsls	r2, r1, #3
    a022:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    a026:	1d17      	adds	r7, r2, #4
{
    a028:	460c      	mov	r4, r1
    a02a:	3206      	adds	r2, #6
    a02c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    a02e:	b956      	cbnz	r6, a046 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    a030:	2101      	movs	r1, #1
    a032:	fa01 f000 	lsl.w	r0, r1, r0
    a036:	68d9      	ldr	r1, [r3, #12]
    a038:	4301      	orrs	r1, r0
    a03a:	60d9      	str	r1, [r3, #12]
		b->next = c;
    a03c:	f8cc 4010 	str.w	r4, [ip, #16]
    a040:	53dd      	strh	r5, [r3, r7]
    a042:	529d      	strh	r5, [r3, r2]
}
    a044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    a046:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    a048:	3104      	adds	r1, #4
    a04a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    a04c:	53d8      	strh	r0, [r3, r7]
    a04e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a052:	529e      	strh	r6, [r3, r2]
    a054:	80c5      	strh	r5, [r0, #6]
    a056:	525d      	strh	r5, [r3, r1]
    a058:	e7f4      	b.n	a044 <free_list_add+0x38>

0000a05a <free_list_remove_bidx>:
{
    a05a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    a05c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    a060:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    a062:	4299      	cmp	r1, r3
    a064:	f102 0104 	add.w	r1, r2, #4
    a068:	d10a      	bne.n	a080 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    a06a:	2301      	movs	r3, #1
    a06c:	fa03 f202 	lsl.w	r2, r3, r2
    a070:	68c3      	ldr	r3, [r0, #12]
    a072:	ea23 0302 	bic.w	r3, r3, r2
    a076:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    a078:	2300      	movs	r3, #0
    a07a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    a07e:	bd10      	pop	{r4, pc}
    a080:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    a082:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    a086:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a08a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    a08e:	80cb      	strh	r3, [r1, #6]
    a090:	8082      	strh	r2, [r0, #4]
}
    a092:	e7f4      	b.n	a07e <free_list_remove_bidx+0x24>

0000a094 <alloc_chunk>:
{
    a094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    a098:	fab1 f581 	clz	r5, r1
    a09c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    a0a0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    a0a4:	4603      	mov	r3, r0
	if (b->next) {
    a0a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    a0aa:	460e      	mov	r6, r1
	if (b->next) {
    a0ac:	b1c2      	cbz	r2, a0e0 <alloc_chunk+0x4c>
    a0ae:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    a0b0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    a0b4:	4618      	mov	r0, r3
    a0b6:	4621      	mov	r1, r4
    a0b8:	f7ff ffa3 	bl	a002 <chunk_size>
    a0bc:	42b0      	cmp	r0, r6
    a0be:	d306      	bcc.n	a0ce <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    a0c0:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    a0c2:	4618      	mov	r0, r3
    a0c4:	f7ff ffc9 	bl	a05a <free_list_remove_bidx>
}
    a0c8:	4620      	mov	r0, r4
    a0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    a0ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    a0d2:	3f01      	subs	r7, #1
    a0d4:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    a0d6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    a0da:	d001      	beq.n	a0e0 <alloc_chunk+0x4c>
    a0dc:	4282      	cmp	r2, r0
    a0de:	d1e7      	bne.n	a0b0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a0e0:	f1c5 0220 	rsb	r2, r5, #32
    a0e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a0e8:	4094      	lsls	r4, r2
    a0ea:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    a0ec:	4014      	ands	r4, r2
    a0ee:	d0eb      	beq.n	a0c8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    a0f0:	fa94 f2a4 	rbit	r2, r4
    a0f4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a0f8:	1d11      	adds	r1, r2, #4
    a0fa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    a0fe:	4621      	mov	r1, r4
    a100:	e7df      	b.n	a0c2 <alloc_chunk+0x2e>

0000a102 <split_chunks>:
{
    a102:	b538      	push	{r3, r4, r5, lr}
    a104:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a106:	f7ff ff7c 	bl	a002 <chunk_size>
{
    a10a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    a10c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    a10e:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    a110:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    a114:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a116:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    a118:	8060      	strh	r0, [r4, #2]
    a11a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a11e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    a120:	8044      	strh	r4, [r0, #2]
    a122:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    a126:	4618      	mov	r0, r3
    a128:	4611      	mov	r1, r2
    a12a:	f7ff ff6a 	bl	a002 <chunk_size>
	void *cmem = &buf[c];
    a12e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a130:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    a134:	bd38      	pop	{r3, r4, r5, pc}

0000a136 <sys_heap_alloc>:
{
    a136:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a138:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    a13a:	b909      	cbnz	r1, a140 <sys_heap_alloc+0xa>
		return NULL;
    a13c:	2000      	movs	r0, #0
}
    a13e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a140:	68ab      	ldr	r3, [r5, #8]
    a142:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a146:	d9f9      	bls.n	a13c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a148:	310b      	adds	r1, #11
    a14a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a14c:	4621      	mov	r1, r4
    a14e:	4628      	mov	r0, r5
    a150:	f7ff ffa0 	bl	a094 <alloc_chunk>
	if (c == 0U) {
    a154:	4606      	mov	r6, r0
    a156:	2800      	cmp	r0, #0
    a158:	d0f0      	beq.n	a13c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a15a:	4601      	mov	r1, r0
    a15c:	4628      	mov	r0, r5
    a15e:	f7ff ff50 	bl	a002 <chunk_size>
    a162:	42a0      	cmp	r0, r4
    a164:	d907      	bls.n	a176 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    a166:	1932      	adds	r2, r6, r4
    a168:	4628      	mov	r0, r5
    a16a:	f7ff ffca 	bl	a102 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a16e:	4611      	mov	r1, r2
    a170:	4628      	mov	r0, r5
    a172:	f7ff ff4b 	bl	a00c <free_list_add>
	void *cmem = &buf[c];
    a176:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a17a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a17c:	8853      	ldrh	r3, [r2, #2]
    a17e:	f043 0301 	orr.w	r3, r3, #1
    a182:	8053      	strh	r3, [r2, #2]
    a184:	3004      	adds	r0, #4
	return mem;
    a186:	e7da      	b.n	a13e <sys_heap_alloc+0x8>

0000a188 <outs>:
{
    a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a18c:	4607      	mov	r7, r0
    a18e:	4688      	mov	r8, r1
    a190:	4615      	mov	r5, r2
    a192:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a194:	4614      	mov	r4, r2
    a196:	42b4      	cmp	r4, r6
    a198:	d305      	bcc.n	a1a6 <outs+0x1e>
    a19a:	b10e      	cbz	r6, a1a0 <outs+0x18>
	return (int)count;
    a19c:	1b60      	subs	r0, r4, r5
    a19e:	e008      	b.n	a1b2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a1a0:	7823      	ldrb	r3, [r4, #0]
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d0fa      	beq.n	a19c <outs+0x14>
		int rc = out((int)*sp++, ctx);
    a1a6:	f814 0b01 	ldrb.w	r0, [r4], #1
    a1aa:	4641      	mov	r1, r8
    a1ac:	47b8      	blx	r7
		if (rc < 0) {
    a1ae:	2800      	cmp	r0, #0
    a1b0:	daf1      	bge.n	a196 <outs+0xe>
}
    a1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a1b6 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a1b6:	4040      	eors	r0, r0
    a1b8:	f380 8811 	msr	BASEPRI, r0
    a1bc:	f04f 0004 	mov.w	r0, #4
    a1c0:	df02      	svc	2
}
    a1c2:	4770      	bx	lr

0000a1c4 <assert_print>:

void assert_print(const char *fmt, ...)
{
    a1c4:	b40f      	push	{r0, r1, r2, r3}
    a1c6:	b507      	push	{r0, r1, r2, lr}
    a1c8:	a904      	add	r1, sp, #16
    a1ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a1ce:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a1d0:	f7ff fea9 	bl	9f26 <vprintk>

	va_end(ap);
}
    a1d4:	b003      	add	sp, #12
    a1d6:	f85d eb04 	ldr.w	lr, [sp], #4
    a1da:	b004      	add	sp, #16
    a1dc:	4770      	bx	lr

0000a1de <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a1de:	4770      	bx	lr

0000a1e0 <default_get_timestamp>:
    a1e0:	f000 bb46 	b.w	a870 <sys_clock_cycle_get_32>

0000a1e4 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    a1e4:	2000      	movs	r0, #0
    a1e6:	4770      	bx	lr

0000a1e8 <z_log_vprintk>:
{
    a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a1ea:	2300      	movs	r3, #0
    a1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a1f0:	e9cd 3300 	strd	r3, r3, [sp]
    a1f4:	461a      	mov	r2, r3
    a1f6:	4619      	mov	r1, r3
    a1f8:	4618      	mov	r0, r3
    a1fa:	f7f9 f957 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    a1fe:	b005      	add	sp, #20
    a200:	f85d fb04 	ldr.w	pc, [sp], #4

0000a204 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a204:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    a206:	f7f8 fead 	bl	2f64 <log_init>
	}

	return 0;
}
    a20a:	2000      	movs	r0, #0
    a20c:	bd08      	pop	{r3, pc}

0000a20e <z_log_get_tag>:
}
    a20e:	2000      	movs	r0, #0
    a210:	4770      	bx	lr

0000a212 <out_func>:
{
    a212:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a214:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    a218:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a21c:	6852      	ldr	r2, [r2, #4]
    a21e:	2101      	movs	r1, #1
    a220:	f10d 0007 	add.w	r0, sp, #7
    a224:	4798      	blx	r3
}
    a226:	2000      	movs	r0, #0
    a228:	b003      	add	sp, #12
    a22a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a22e <cr_out_func>:
{
    a22e:	b538      	push	{r3, r4, r5, lr}
    a230:	4605      	mov	r5, r0
    a232:	460c      	mov	r4, r1
	out_func(c, ctx);
    a234:	f7ff ffed 	bl	a212 <out_func>
	if (c == '\n') {
    a238:	2d0a      	cmp	r5, #10
    a23a:	d103      	bne.n	a244 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a23c:	4621      	mov	r1, r4
    a23e:	200d      	movs	r0, #13
    a240:	f7ff ffe7 	bl	a212 <out_func>
}
    a244:	2000      	movs	r0, #0
    a246:	bd38      	pop	{r3, r4, r5, pc}

0000a248 <buffer_write>:
{
    a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a24a:	4606      	mov	r6, r0
    a24c:	460d      	mov	r5, r1
    a24e:	4614      	mov	r4, r2
    a250:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a252:	4621      	mov	r1, r4
    a254:	4628      	mov	r0, r5
    a256:	463a      	mov	r2, r7
    a258:	47b0      	blx	r6
	} while (len != 0);
    a25a:	1a24      	subs	r4, r4, r0
		buf += processed;
    a25c:	4405      	add	r5, r0
	} while (len != 0);
    a25e:	d1f8      	bne.n	a252 <buffer_write+0xa>
}
    a260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a262 <log_output_flush>:
		     output->control_block->offset,
    a262:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a264:	6881      	ldr	r1, [r0, #8]
{
    a266:	b510      	push	{r4, lr}
    a268:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a26a:	e9d2 2300 	ldrd	r2, r3, [r2]
    a26e:	6800      	ldr	r0, [r0, #0]
    a270:	f7ff ffea 	bl	a248 <buffer_write>
	output->control_block->offset = 0;
    a274:	6863      	ldr	r3, [r4, #4]
    a276:	2200      	movs	r2, #0
    a278:	601a      	str	r2, [r3, #0]
}
    a27a:	bd10      	pop	{r4, pc}

0000a27c <z_log_msg2_finalize>:
{
    a27c:	b570      	push	{r4, r5, r6, lr}
    a27e:	460e      	mov	r6, r1
    a280:	4615      	mov	r5, r2
    a282:	4619      	mov	r1, r3
    a284:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    a288:	4604      	mov	r4, r0
    a28a:	b918      	cbnz	r0, a294 <z_log_msg2_finalize+0x18>
}
    a28c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a290:	f7f8 bece 	b.w	3030 <z_log_dropped>
	if (data) {
    a294:	b12b      	cbz	r3, a2a2 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    a296:	3010      	adds	r0, #16
    a298:	f3c5 2349 	ubfx	r3, r5, #9, #10
    a29c:	4418      	add	r0, r3
    a29e:	f000 fe08 	bl	aeb2 <memcpy>
	msg->hdr.source = source;
    a2a2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    a2a6:	4620      	mov	r0, r4
}
    a2a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    a2ac:	f7f8 bede 	b.w	306c <z_log_msg2_commit>

0000a2b0 <abort_function>:
{
    a2b0:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    a2b2:	2000      	movs	r0, #0
    a2b4:	f7f8 fdfc 	bl	2eb0 <sys_reboot>

0000a2b8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a2b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a2ba:	ab0b      	add	r3, sp, #44	; 0x2c
    a2bc:	9305      	str	r3, [sp, #20]
    a2be:	9303      	str	r3, [sp, #12]
    a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2c2:	9302      	str	r3, [sp, #8]
    a2c4:	2300      	movs	r3, #0
    a2c6:	e9cd 3300 	strd	r3, r3, [sp]
    a2ca:	2201      	movs	r2, #1
    a2cc:	4618      	mov	r0, r3
    a2ce:	f7f9 f8ed 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    a2d2:	b007      	add	sp, #28
    a2d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2d8 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a2d8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a2da:	6800      	ldr	r0, [r0, #0]
    a2dc:	f7f9 bc72 	b.w	3bc4 <z_arm_fatal_error>

0000a2e0 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a2e0:	2100      	movs	r1, #0
    a2e2:	2001      	movs	r0, #1
    a2e4:	f7f9 bc6e 	b.w	3bc4 <z_arm_fatal_error>

0000a2e8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a2e8:	b508      	push	{r3, lr}
	handler();
    a2ea:	f7f9 fd0b 	bl	3d04 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    a2ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    a2f2:	f7f9 bde3 	b.w	3ebc <z_arm_exc_exit>

0000a2f6 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a2f6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a2f8:	ab0b      	add	r3, sp, #44	; 0x2c
    a2fa:	9305      	str	r3, [sp, #20]
    a2fc:	9303      	str	r3, [sp, #12]
    a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a300:	9302      	str	r3, [sp, #8]
    a302:	2300      	movs	r3, #0
    a304:	e9cd 3300 	strd	r3, r3, [sp]
    a308:	2201      	movs	r2, #1
    a30a:	4618      	mov	r0, r3
    a30c:	f7f9 f8ce 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    a310:	b007      	add	sp, #28
    a312:	f85d fb04 	ldr.w	pc, [sp], #4

0000a316 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    a316:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    a318:	ab0b      	add	r3, sp, #44	; 0x2c
    a31a:	9305      	str	r3, [sp, #20]
    a31c:	9303      	str	r3, [sp, #12]
    a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a320:	9302      	str	r3, [sp, #8]
    a322:	2300      	movs	r3, #0
    a324:	e9cd 3300 	strd	r3, r3, [sp]
    a328:	2201      	movs	r2, #1
    a32a:	4618      	mov	r0, r3
    a32c:	f7f9 f8be 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    a330:	b007      	add	sp, #28
    a332:	f85d fb04 	ldr.w	pc, [sp], #4

0000a336 <_stdout_hook_default>:
}
    a336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a33a:	4770      	bx	lr

0000a33c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a33c:	2806      	cmp	r0, #6
    a33e:	d108      	bne.n	a352 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a344:	2201      	movs	r2, #1
    a346:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a34a:	f3bf 8f4f 	dsb	sy
        __WFE();
    a34e:	bf20      	wfe
    while (true)
    a350:	e7fd      	b.n	a34e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a352:	4770      	bx	lr

0000a354 <pm_state_exit_post_ops>:
	__asm__ volatile(
    a354:	2300      	movs	r3, #0
    a356:	f383 8811 	msr	BASEPRI, r3
    a35a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a35e:	4770      	bx	lr

0000a360 <set_on_state>:
	__asm__ volatile(
    a360:	f04f 0320 	mov.w	r3, #32
    a364:	f3ef 8211 	mrs	r2, BASEPRI
    a368:	f383 8812 	msr	BASEPRI_MAX, r3
    a36c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a370:	6803      	ldr	r3, [r0, #0]
    a372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a376:	f043 0302 	orr.w	r3, r3, #2
    a37a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a37c:	f382 8811 	msr	BASEPRI, r2
    a380:	f3bf 8f6f 	isb	sy
}
    a384:	4770      	bx	lr

0000a386 <async_start>:
{
    a386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a388:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    a38a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    a38c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a38e:	f04f 0520 	mov.w	r5, #32
    a392:	f3ef 8611 	mrs	r6, BASEPRI
    a396:	f385 8812 	msr	BASEPRI_MAX, r5
    a39a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a39e:	250c      	movs	r5, #12
    a3a0:	4369      	muls	r1, r5
    a3a2:	440c      	add	r4, r1
    a3a4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a3a6:	f005 0c07 	and.w	ip, r5, #7
    a3aa:	f1bc 0f01 	cmp.w	ip, #1
    a3ae:	d10b      	bne.n	a3c8 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a3b0:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    a3b2:	f386 8811 	msr	BASEPRI, r6
    a3b6:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    a3ba:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    a3be:	6843      	ldr	r3, [r0, #4]
    a3c0:	585b      	ldr	r3, [r3, r1]
    a3c2:	4798      	blx	r3
	return 0;
    a3c4:	2000      	movs	r0, #0
}
    a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a3c8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    a3cc:	42af      	cmp	r7, r5
    a3ce:	f386 8811 	msr	BASEPRI, r6
    a3d2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    a3d6:	bf0c      	ite	eq
    a3d8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    a3dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    a3e0:	e7f1      	b.n	a3c6 <async_start+0x40>

0000a3e2 <api_start>:
{
    a3e2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a3e4:	2480      	movs	r4, #128	; 0x80
    a3e6:	9400      	str	r4, [sp, #0]
    a3e8:	f7ff ffcd 	bl	a386 <async_start>
}
    a3ec:	b002      	add	sp, #8
    a3ee:	bd10      	pop	{r4, pc}

0000a3f0 <onoff_started_callback>:
	return &data->mgr[type];
    a3f0:	6900      	ldr	r0, [r0, #16]
    a3f2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a3f4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    a3f8:	2100      	movs	r1, #0
    a3fa:	4710      	bx	r2

0000a3fc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a3fc:	2000      	movs	r0, #0
    a3fe:	f7fc b873 	b.w	64e8 <nrfx_clock_start>

0000a402 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a402:	2000      	movs	r0, #0
    a404:	f7fc b8d4 	b.w	65b0 <nrfx_clock_stop>

0000a408 <api_stop>:
	return stop(dev, subsys, CTX_API);
    a408:	2280      	movs	r2, #128	; 0x80
    a40a:	f7fa bb33 	b.w	4a74 <stop>

0000a40e <blocking_start_callback>:
{
    a40e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a410:	f7fd bb8c 	b.w	7b2c <z_impl_k_sem_give>

0000a414 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a414:	6843      	ldr	r3, [r0, #4]
    a416:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a418:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a41c:	600b      	str	r3, [r1, #0]
}
    a41e:	2000      	movs	r0, #0
    a420:	4770      	bx	lr

0000a422 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a422:	6843      	ldr	r3, [r0, #4]
    a424:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a426:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a42a:	4042      	eors	r2, r0
    a42c:	400a      	ands	r2, r1
    a42e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a430:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a434:	2000      	movs	r0, #0
    a436:	4770      	bx	lr

0000a438 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a438:	6843      	ldr	r3, [r0, #4]
    a43a:	685b      	ldr	r3, [r3, #4]
}
    a43c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    a43e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    a442:	4770      	bx	lr

0000a444 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a444:	6843      	ldr	r3, [r0, #4]
    a446:	685b      	ldr	r3, [r3, #4]
}
    a448:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    a44a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    a44e:	4770      	bx	lr

0000a450 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a450:	6843      	ldr	r3, [r0, #4]
    a452:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a454:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a458:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a45a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a45e:	2000      	movs	r0, #0
    a460:	4770      	bx	lr

0000a462 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    a462:	6902      	ldr	r2, [r0, #16]
{
    a464:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    a466:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    a46a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    a46e:	2000      	movs	r0, #0
    a470:	4770      	bx	lr

0000a472 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    a472:	6843      	ldr	r3, [r0, #4]
    a474:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a476:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a47a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a47e:	4770      	bx	lr

0000a480 <tx_start>:
{
    a480:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a482:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    a484:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a486:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a48a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a48e:	2200      	movs	r2, #0
    a490:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    a494:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    a498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    a49c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a4a0:	6862      	ldr	r2, [r4, #4]
    a4a2:	06d2      	lsls	r2, r2, #27
    a4a4:	d50f      	bpl.n	a4c6 <tx_start+0x46>
	if (data->async) {
    a4a6:	6902      	ldr	r2, [r0, #16]
    a4a8:	68d2      	ldr	r2, [r2, #12]
    a4aa:	b12a      	cbz	r2, a4b8 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    a4ac:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    a4b0:	f041 0101 	orr.w	r1, r1, #1
    a4b4:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a4b8:	2208      	movs	r2, #8
    a4ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    a4be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a4c2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a4c6:	2201      	movs	r2, #1
    a4c8:	609a      	str	r2, [r3, #8]
}
    a4ca:	bd10      	pop	{r4, pc}

0000a4cc <user_callback>:
	if (data->async->user_callback) {
    a4cc:	6903      	ldr	r3, [r0, #16]
    a4ce:	68da      	ldr	r2, [r3, #12]
    a4d0:	6813      	ldr	r3, [r2, #0]
    a4d2:	b10b      	cbz	r3, a4d8 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    a4d4:	6852      	ldr	r2, [r2, #4]
    a4d6:	4718      	bx	r3
}
    a4d8:	4770      	bx	lr

0000a4da <notify_uart_rx_rdy>:
{
    a4da:	b570      	push	{r4, r5, r6, lr}
    a4dc:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    a4de:	6906      	ldr	r6, [r0, #16]
{
    a4e0:	4604      	mov	r4, r0
    a4e2:	460d      	mov	r5, r1
	struct uart_event evt = {
    a4e4:	2214      	movs	r2, #20
    a4e6:	2100      	movs	r1, #0
    a4e8:	a801      	add	r0, sp, #4
    a4ea:	f000 fd03 	bl	aef4 <memset>
    a4ee:	2302      	movs	r3, #2
    a4f0:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    a4f4:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    a4f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    a4f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    a4fa:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    a4fc:	a901      	add	r1, sp, #4
    a4fe:	4620      	mov	r0, r4
	struct uart_event evt = {
    a500:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    a504:	f7ff ffe2 	bl	a4cc <user_callback>
}
    a508:	b006      	add	sp, #24
    a50a:	bd70      	pop	{r4, r5, r6, pc}

0000a50c <rx_buf_release>:
{
    a50c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    a50e:	680e      	ldr	r6, [r1, #0]
{
    a510:	b086      	sub	sp, #24
    a512:	4605      	mov	r5, r0
    a514:	460c      	mov	r4, r1
	if (*buf) {
    a516:	b17e      	cbz	r6, a538 <rx_buf_release+0x2c>
		struct uart_event evt = {
    a518:	2214      	movs	r2, #20
    a51a:	2100      	movs	r1, #0
    a51c:	a801      	add	r0, sp, #4
    a51e:	f000 fce9 	bl	aef4 <memset>
    a522:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    a524:	eb0d 0103 	add.w	r1, sp, r3
    a528:	4628      	mov	r0, r5
		struct uart_event evt = {
    a52a:	f88d 3004 	strb.w	r3, [sp, #4]
    a52e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    a530:	f7ff ffcc 	bl	a4cc <user_callback>
		*buf = NULL;
    a534:	2300      	movs	r3, #0
    a536:	6023      	str	r3, [r4, #0]
}
    a538:	b006      	add	sp, #24
    a53a:	bd70      	pop	{r4, r5, r6, pc}

0000a53c <notify_rx_disable>:
{
    a53c:	b510      	push	{r4, lr}
    a53e:	b086      	sub	sp, #24
    a540:	4604      	mov	r4, r0
	struct uart_event evt = {
    a542:	2214      	movs	r2, #20
    a544:	2100      	movs	r1, #0
    a546:	a801      	add	r0, sp, #4
    a548:	f000 fcd4 	bl	aef4 <memset>
    a54c:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    a54e:	a901      	add	r1, sp, #4
    a550:	4620      	mov	r0, r4
	struct uart_event evt = {
    a552:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    a556:	f7ff ffb9 	bl	a4cc <user_callback>
}
    a55a:	b006      	add	sp, #24
    a55c:	bd10      	pop	{r4, pc}

0000a55e <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    a55e:	6843      	ldr	r3, [r0, #4]
{
    a560:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    a562:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    a564:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    a566:	f04f 0020 	mov.w	r0, #32
    a56a:	f3ef 8511 	mrs	r5, BASEPRI
    a56e:	f380 8812 	msr	BASEPRI_MAX, r0
    a572:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    a576:	68e4      	ldr	r4, [r4, #12]
    a578:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a57a:	b190      	cbz	r0, a5a2 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    a57c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    a57e:	b998      	cbnz	r0, a5a8 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    a580:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a584:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a588:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    a58c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    a590:	f042 0220 	orr.w	r2, r2, #32
    a594:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    a598:	f385 8811 	msr	BASEPRI, r5
    a59c:	f3bf 8f6f 	isb	sy
}
    a5a0:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    a5a2:	f06f 000c 	mvn.w	r0, #12
    a5a6:	e7f7      	b.n	a598 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    a5a8:	f06f 000f 	mvn.w	r0, #15
    a5ac:	e7f4      	b.n	a598 <uarte_nrfx_rx_buf_rsp+0x3a>

0000a5ae <uarte_nrfx_callback_set>:
	if (!data->async) {
    a5ae:	6903      	ldr	r3, [r0, #16]
    a5b0:	68db      	ldr	r3, [r3, #12]
    a5b2:	b11b      	cbz	r3, a5bc <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    a5b4:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    a5b8:	2000      	movs	r0, #0
    a5ba:	4770      	bx	lr
		return -ENOTSUP;
    a5bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    a5c0:	4770      	bx	lr

0000a5c2 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    a5c2:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    a5c4:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    a5c6:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    a5c8:	681b      	ldr	r3, [r3, #0]
{
    a5ca:	b510      	push	{r4, lr}
	if (data->async) {
    a5cc:	b958      	cbnz	r0, a5e6 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a5ce:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a5d2:	b15c      	cbz	r4, a5ec <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    a5d4:	7d52      	ldrb	r2, [r2, #21]
    a5d6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5d8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a5dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5e0:	2201      	movs	r2, #1
    a5e2:	601a      	str	r2, [r3, #0]
}
    a5e4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    a5e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a5ea:	e7fb      	b.n	a5e4 <uarte_nrfx_poll_in+0x22>
		return -1;
    a5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a5f0:	e7f8      	b.n	a5e4 <uarte_nrfx_poll_in+0x22>

0000a5f2 <uarte_nrfx_rx_disable>:
{
    a5f2:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    a5f4:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    a5f6:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    a5f8:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    a5fa:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    a5fc:	6e03      	ldr	r3, [r0, #96]	; 0x60
    a5fe:	b1b3      	cbz	r3, a62e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    a600:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a602:	b153      	cbz	r3, a61a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    a604:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    a608:	f023 0320 	bic.w	r3, r3, #32
    a60c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a610:	2300      	movs	r3, #0
    a612:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    a616:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    a61a:	3088      	adds	r0, #136	; 0x88
    a61c:	f000 fb60 	bl	ace0 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    a620:	68eb      	ldr	r3, [r5, #12]
    a622:	2000      	movs	r0, #0
    a624:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a628:	2301      	movs	r3, #1
    a62a:	6063      	str	r3, [r4, #4]
}
    a62c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    a62e:	f06f 000d 	mvn.w	r0, #13
    a632:	e7fb      	b.n	a62c <uarte_nrfx_rx_disable+0x3a>

0000a634 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    a634:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    a636:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    a638:	4614      	mov	r4, r2
    return p_reg->RXD.AMOUNT;
    a63a:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    a63e:	460b      	mov	r3, r1
    a640:	b1f1      	cbz	r1, a680 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
    a642:	2100      	movs	r1, #0
    a644:	4618      	mov	r0, r3
    a646:	f000 fc55 	bl	aef4 <memset>
    a64a:	4603      	mov	r3, r0
    a64c:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a64e:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a652:	2100      	movs	r1, #0
    p_reg->RXD.MAXCNT = length;
    a654:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a658:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a65a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    a65e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a662:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a664:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a668:	2800      	cmp	r0, #0
    a66a:	d0fb      	beq.n	a664 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a66c:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    a670:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    a674:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    a678:	b92b      	cbnz	r3, a686 <rx_flush.isra.0+0x52>
			return rx_amount;
    a67a:	b2c0      	uxtb	r0, r0
}
    a67c:	b002      	add	sp, #8
    a67e:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
    a680:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    a682:	4669      	mov	r1, sp
    a684:	e7e3      	b.n	a64e <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
    a686:	4285      	cmp	r5, r0
    a688:	d1f7      	bne.n	a67a <rx_flush.isra.0+0x46>
    a68a:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    a68c:	4293      	cmp	r3, r2
    a68e:	d101      	bne.n	a694 <rx_flush.isra.0+0x60>
	return 0;
    a690:	2000      	movs	r0, #0
    a692:	e7f3      	b.n	a67c <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
    a694:	f813 1b01 	ldrb.w	r1, [r3], #1
    a698:	2900      	cmp	r1, #0
    a69a:	d0f7      	beq.n	a68c <rx_flush.isra.0+0x58>
    a69c:	e7ed      	b.n	a67a <rx_flush.isra.0+0x46>

0000a69e <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    a69e:	68c2      	ldr	r2, [r0, #12]
    a6a0:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    a6a2:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    a6a4:	b508      	push	{r3, lr}
    a6a6:	4603      	mov	r3, r0
	if (!remaining) {
    a6a8:	d00b      	beq.n	a6c2 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    a6aa:	2a08      	cmp	r2, #8
    a6ac:	bf28      	it	cs
    a6ae:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    a6b0:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    a6b2:	3018      	adds	r0, #24
    a6b4:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    a6b6:	689b      	ldr	r3, [r3, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a6b8:	4419      	add	r1, r3
    a6ba:	f000 fbfa 	bl	aeb2 <memcpy>
	return true;
    a6be:	2001      	movs	r0, #1
}
    a6c0:	bd08      	pop	{r3, pc}
		return false;
    a6c2:	4610      	mov	r0, r2
    a6c4:	e7fc      	b.n	a6c0 <setup_tx_cache.isra.0+0x22>

0000a6c6 <async_uart_release>:
{
    a6c6:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    a6c8:	6903      	ldr	r3, [r0, #16]
{
    a6ca:	4604      	mov	r4, r0
	__asm__ volatile(
    a6cc:	f04f 0220 	mov.w	r2, #32
    a6d0:	f3ef 8611 	mrs	r6, BASEPRI
    a6d4:	f382 8812 	msr	BASEPRI_MAX, r2
    a6d8:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    a6dc:	68dd      	ldr	r5, [r3, #12]
    a6de:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a6e2:	ea23 0301 	bic.w	r3, r3, r1
    a6e6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    a6ea:	b973      	cbnz	r3, a70a <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    a6ec:	2902      	cmp	r1, #2
    a6ee:	d107      	bne.n	a700 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    a6f0:	6840      	ldr	r0, [r0, #4]
    a6f2:	2205      	movs	r2, #5
    a6f4:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    a6f8:	f7ff ff9c 	bl	a634 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    a6fc:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    a700:	6863      	ldr	r3, [r4, #4]
    a702:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a704:	2200      	movs	r2, #0
    a706:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    a70a:	f386 8811 	msr	BASEPRI, r6
    a70e:	f3bf 8f6f 	isb	sy
}
    a712:	bd70      	pop	{r4, r5, r6, pc}

0000a714 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    a714:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    a716:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a718:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a71c:	b940      	cbnz	r0, a730 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a71e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a720:	079b      	lsls	r3, r3, #30
    a722:	d406      	bmi.n	a732 <is_tx_ready.isra.0+0x1e>
    a724:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    a728:	3800      	subs	r0, #0
    a72a:	bf18      	it	ne
    a72c:	2001      	movne	r0, #1
    a72e:	4770      	bx	lr
    a730:	2001      	movs	r0, #1
}
    a732:	4770      	bx	lr

0000a734 <start_tx_locked>:
{
    a734:	b510      	push	{r4, lr}
    a736:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    a738:	6840      	ldr	r0, [r0, #4]
    a73a:	f7ff ffeb 	bl	a714 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    a73e:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    a740:	b918      	cbnz	r0, a74a <start_tx_locked+0x16>
		data->async->pending_tx = true;
    a742:	2201      	movs	r2, #1
    a744:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    a748:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    a74a:	2200      	movs	r2, #0
    a74c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    a750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a754:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    a758:	4620      	mov	r0, r4
    a75a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    a75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    a762:	f7ff be8d 	b.w	a480 <tx_start>

0000a766 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a766:	b510      	push	{r4, lr}
    a768:	2200      	movs	r2, #0
    a76a:	4604      	mov	r4, r0
    a76c:	2101      	movs	r1, #1
    a76e:	2028      	movs	r0, #40	; 0x28
    a770:	f7f9 fa94 	bl	3c9c <z_arm_irq_priority_set>
    a774:	2028      	movs	r0, #40	; 0x28
    a776:	f7f9 fa75 	bl	3c64 <arch_irq_enable>
    a77a:	4620      	mov	r0, r4
    a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a780:	f7fa be88 	b.w	5494 <uarte_instance_init.constprop.0>

0000a784 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    a784:	b510      	push	{r4, lr}
    a786:	2200      	movs	r2, #0
    a788:	4604      	mov	r4, r0
    a78a:	2101      	movs	r1, #1
    a78c:	2002      	movs	r0, #2
    a78e:	f7f9 fa85 	bl	3c9c <z_arm_irq_priority_set>
    a792:	2002      	movs	r0, #2
    a794:	f7f9 fa66 	bl	3c64 <arch_irq_enable>
    a798:	4620      	mov	r0, r4
    a79a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a79e:	f7fa be79 	b.w	5494 <uarte_instance_init.constprop.0>

0000a7a2 <rx_timeout>:
{
    a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    a7a4:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    a7a6:	68fb      	ldr	r3, [r7, #12]
    a7a8:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    a7ac:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    a7b0:	bb1a      	cbnz	r2, a7fa <rx_timeout+0x58>
	const struct device *dev = data->dev;
    a7b2:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
    a7b4:	686a      	ldr	r2, [r5, #4]
    a7b6:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    a7b8:	2110      	movs	r1, #16
    a7ba:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    a7be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    a7c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
    a7c4:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    a7c6:	bf1e      	ittt	ne
    a7c8:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    a7ca:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    a7cc:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    a7d0:	e9d3 2c1d 	ldrd	r2, ip, [r3, #116]	; 0x74
    a7d4:	eba2 020c 	sub.w	r2, r2, ip
	if (!HW_RX_COUNTING_ENABLED(data) &&
    a7d8:	2a00      	cmp	r2, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a7da:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
	int32_t len = data->async->rx_total_byte_cnt
    a7de:	4614      	mov	r4, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    a7e0:	da0c      	bge.n	a7fc <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a7e2:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    a7e4:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a7e8:	d902      	bls.n	a7f0 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    a7ea:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
    a7ec:	2c00      	cmp	r4, #0
    a7ee:	dc20      	bgt.n	a832 <rx_timeout+0x90>
	return config->uarte_regs;
    a7f0:	686b      	ldr	r3, [r5, #4]
    a7f2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a7f4:	2210      	movs	r2, #16
    a7f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    a7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    a7fc:	eb02 0c00 	add.w	ip, r2, r0
    a800:	458c      	cmp	ip, r1
    a802:	d8f2      	bhi.n	a7ea <rx_timeout+0x48>
	if (len > 0) {
    a804:	2a00      	cmp	r2, #0
    a806:	d0f3      	beq.n	a7f0 <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
    a808:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    a80c:	428a      	cmp	r2, r1
    a80e:	da12      	bge.n	a836 <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
    a810:	4628      	mov	r0, r5
    a812:	4621      	mov	r1, r4
    a814:	f7ff fe61 	bl	a4da <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    a818:	68f8      	ldr	r0, [r7, #12]
    a81a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    a81c:	4423      	add	r3, r4
    a81e:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    a820:	6f83      	ldr	r3, [r0, #120]	; 0x78
    a822:	4423      	add	r3, r4
    a824:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    a826:	2e00      	cmp	r6, #0
    a828:	d0e2      	beq.n	a7f0 <rx_timeout+0x4e>
    a82a:	3088      	adds	r0, #136	; 0x88
    a82c:	f000 fa58 	bl	ace0 <z_impl_k_timer_stop>
}
    a830:	e7de      	b.n	a7f0 <rx_timeout+0x4e>
		clipped = true;
    a832:	2601      	movs	r6, #1
    a834:	e7ec      	b.n	a810 <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
    a836:	1a52      	subs	r2, r2, r1
    a838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (clipped) {
    a83c:	e7d8      	b.n	a7f0 <rx_timeout+0x4e>

0000a83e <uarte_nrfx_tx_abort>:
{
    a83e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    a840:	6843      	ldr	r3, [r0, #4]
    a842:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    a844:	6903      	ldr	r3, [r0, #16]
    a846:	68d8      	ldr	r0, [r3, #12]
    a848:	6883      	ldr	r3, [r0, #8]
    a84a:	b14b      	cbz	r3, a860 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    a84c:	2400      	movs	r4, #0
    a84e:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    a852:	3028      	adds	r0, #40	; 0x28
    a854:	f000 fa44 	bl	ace0 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a858:	2301      	movs	r3, #1
    a85a:	60eb      	str	r3, [r5, #12]
	return 0;
    a85c:	4620      	mov	r0, r4
}
    a85e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    a860:	f06f 000d 	mvn.w	r0, #13
    a864:	e7fb      	b.n	a85e <uarte_nrfx_tx_abort+0x20>

0000a866 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    a866:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a868:	6818      	ldr	r0, [r3, #0]
    a86a:	f7ff bfe8 	b.w	a83e <uarte_nrfx_tx_abort>

0000a86e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a86e:	4770      	bx	lr

0000a870 <sys_clock_cycle_get_32>:
{
    a870:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    a872:	f7fb fa11 	bl	5c98 <z_nrf_rtc_timer_read>
}
    a876:	bd08      	pop	{r3, pc}

0000a878 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a878:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    a87a:	6843      	ldr	r3, [r0, #4]
    a87c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    a87e:	7a03      	ldrb	r3, [r0, #8]
    a880:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    a884:	3b01      	subs	r3, #1
    a886:	00db      	lsls	r3, r3, #3
    a888:	6845      	ldr	r5, [r0, #4]
    a88a:	6814      	ldr	r4, [r2, #0]
    a88c:	441d      	add	r5, r3
    a88e:	42ac      	cmp	r4, r5
    a890:	d902      	bls.n	a898 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    a892:	f06f 0001 	mvn.w	r0, #1
}
    a896:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    a898:	7965      	ldrb	r5, [r4, #5]
    a89a:	428d      	cmp	r5, r1
    a89c:	d002      	beq.n	a8a4 <pinctrl_lookup_state+0x2c>
		(*state)++;
    a89e:	3408      	adds	r4, #8
    a8a0:	6014      	str	r4, [r2, #0]
    a8a2:	e7f1      	b.n	a888 <pinctrl_lookup_state+0x10>
			return 0;
    a8a4:	2000      	movs	r0, #0
    a8a6:	e7f6      	b.n	a896 <pinctrl_lookup_state+0x1e>

0000a8a8 <nrf_gpio_pin_clear>:
{
    a8a8:	b507      	push	{r0, r1, r2, lr}
    a8aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a8ac:	a801      	add	r0, sp, #4
    a8ae:	f7fb fba7 	bl	6000 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a8b2:	9a01      	ldr	r2, [sp, #4]
    a8b4:	2301      	movs	r3, #1
    a8b6:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    a8b8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    a8bc:	b003      	add	sp, #12
    a8be:	f85d fb04 	ldr.w	pc, [sp], #4

0000a8c2 <nrf_gpio_pin_set>:
{
    a8c2:	b507      	push	{r0, r1, r2, lr}
    a8c4:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a8c6:	a801      	add	r0, sp, #4
    a8c8:	f7fb fb9a 	bl	6000 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a8cc:	9a01      	ldr	r2, [sp, #4]
    a8ce:	2301      	movs	r3, #1
    a8d0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    a8d2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    a8d6:	b003      	add	sp, #12
    a8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a8dc <nrf_gpio_pin_write>:
    if (value == 0)
    a8dc:	b909      	cbnz	r1, a8e2 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    a8de:	f7ff bfe3 	b.w	a8a8 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    a8e2:	f7ff bfee 	b.w	a8c2 <nrf_gpio_pin_set>

0000a8e6 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    a8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    a8e8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a8ec:	2b00      	cmp	r3, #0
{
    a8ee:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    a8f0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    a8f4:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a8f6:	bf0b      	itete	eq
    a8f8:	4615      	moveq	r5, r2
    a8fa:	2501      	movne	r5, #1
    a8fc:	460e      	moveq	r6, r1
    a8fe:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    a900:	9301      	str	r3, [sp, #4]
    a902:	f7fb fb7d 	bl	6000 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a906:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    a90a:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a90e:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    a912:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a914:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    a916:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a91a:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    a91e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    a922:	b002      	add	sp, #8
    a924:	bd70      	pop	{r4, r5, r6, pc}

0000a926 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    a926:	b570      	push	{r4, r5, r6, lr}
    a928:	4615      	mov	r5, r2
    a92a:	4604      	mov	r4, r0
    a92c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a930:	42a6      	cmp	r6, r4
    a932:	d101      	bne.n	a938 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    a934:	2000      	movs	r0, #0
}
    a936:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    a938:	6823      	ldr	r3, [r4, #0]
    a93a:	0c1a      	lsrs	r2, r3, #16
    a93c:	2a22      	cmp	r2, #34	; 0x22
    a93e:	f200 808e 	bhi.w	aa5e <pinctrl_configure_pins+0x138>
    a942:	e8df f002 	tbb	[pc, r2]
    a946:	1d12      	.short	0x1d12
    a948:	39294324 	.word	0x39294324
    a94c:	8c8c8c43 	.word	0x8c8c8c43
    a950:	8c4d488c 	.word	0x8c4d488c
    a954:	8c8c8c8c 	.word	0x8c8c8c8c
    a958:	8c8c8c8c 	.word	0x8c8c8c8c
    a95c:	68635e52 	.word	0x68635e52
    a960:	6d8c8c8c 	.word	0x6d8c8c8c
    a964:	827d7873 	.word	0x827d7873
    a968:	87          	.byte	0x87
    a969:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    a96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a96e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    a972:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    a974:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a978:	f7ff ffa3 	bl	a8c2 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    a97c:	2201      	movs	r2, #1
    a97e:	e015      	b.n	a9ac <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    a980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a984:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    a988:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    a98a:	2100      	movs	r1, #0
    a98c:	e00f      	b.n	a9ae <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    a98e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a992:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    a996:	e7ec      	b.n	a972 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    a998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a99c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    a9a0:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    a9a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a9a6:	f7ff ff7f 	bl	a8a8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    a9aa:	2200      	movs	r2, #0
    a9ac:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    a9ae:	6820      	ldr	r0, [r4, #0]
    a9b0:	f7ff ff99 	bl	a8e6 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a9b4:	3404      	adds	r4, #4
    a9b6:	e7bb      	b.n	a930 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    a9b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9bc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    a9c0:	6820      	ldr	r0, [r4, #0]
    a9c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a9c6:	f7ff ff6f 	bl	a8a8 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    a9ca:	e7d7      	b.n	a97c <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    a9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9d0:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    a9d4:	e7d8      	b.n	a988 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    a9d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9da:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    a9de:	e7d3      	b.n	a988 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    a9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9e4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    a9e8:	e7ce      	b.n	a988 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    a9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9ee:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    a9f2:	6820      	ldr	r0, [r4, #0]
    a9f4:	f3c0 3140 	ubfx	r1, r0, #13, #1
    a9f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    a9fc:	f7ff ff6e 	bl	a8dc <nrf_gpio_pin_write>
    aa00:	e7bc      	b.n	a97c <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    aa02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa06:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    aa0a:	e7f2      	b.n	a9f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    aa0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa10:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    aa14:	e7ed      	b.n	a9f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    aa16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa1a:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    aa1e:	e7e8      	b.n	a9f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    aa20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa24:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aa28:	2201      	movs	r2, #1
    aa2a:	e7ae      	b.n	a98a <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    aa2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa30:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aa34:	e7f8      	b.n	aa28 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    aa36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa3a:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aa3e:	e7f3      	b.n	aa28 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    aa40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa44:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aa48:	e7ee      	b.n	aa28 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    aa4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa4e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    aa52:	e7e9      	b.n	aa28 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    aa54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa58:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    aa5c:	e7e4      	b.n	aa28 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    aa5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    aa62:	e768      	b.n	a936 <pinctrl_configure_pins+0x10>

0000aa64 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    aa64:	f7ff b848 	b.w	9af8 <nrf_cc3xx_platform_init_no_rng>

0000aa68 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    aa68:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    aa6a:	f7f8 ffc3 	bl	39f4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    aa6e:	f7f9 f875 	bl	3b5c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    aa72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    aa76:	f7ff b83f 	b.w	9af8 <nrf_cc3xx_platform_init_no_rng>

0000aa7a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    aa7a:	4700      	bx	r0

0000aa7c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    aa7c:	f000 b8fe 	b.w	ac7c <z_impl_k_busy_wait>

0000aa80 <nrf_gpio_pin_present_check>:
    switch (port)
    aa80:	0943      	lsrs	r3, r0, #5
    aa82:	d00b      	beq.n	aa9c <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    aa84:	2b01      	cmp	r3, #1
    aa86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aa8a:	bf18      	it	ne
    aa8c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    aa8e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    aa92:	fa23 f000 	lsr.w	r0, r3, r0
}
    aa96:	f000 0001 	and.w	r0, r0, #1
    aa9a:	4770      	bx	lr
    switch (port)
    aa9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aaa0:	e7f5      	b.n	aa8e <nrf_gpio_pin_present_check+0xe>

0000aaa2 <pin_is_task_output>:
{
    aaa2:	b508      	push	{r3, lr}
    aaa4:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aaa6:	f7fb fdeb 	bl	6680 <pin_is_output>
    aaaa:	b110      	cbz	r0, aab2 <pin_is_task_output+0x10>
    aaac:	4610      	mov	r0, r2
    aaae:	f7fb fdd1 	bl	6654 <pin_in_use_by_te>
}
    aab2:	f000 0001 	and.w	r0, r0, #1
    aab6:	bd08      	pop	{r3, pc}

0000aab8 <nrf_gpio_reconfigure>:
{
    aab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aabc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aabe:	a801      	add	r0, sp, #4
{
    aac0:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    aac4:	460c      	mov	r4, r1
    aac6:	4617      	mov	r7, r2
    aac8:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    aaca:	f7fb fe01 	bl	66d0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    aace:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    aad0:	1e39      	subs	r1, r7, #0
    aad2:	bf18      	it	ne
    aad4:	2101      	movne	r1, #1
    aad6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    aada:	1e23      	subs	r3, r4, #0
    aadc:	bf18      	it	ne
    aade:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    aae0:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    aae2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    aae6:	bf14      	ite	ne
    aae8:	210c      	movne	r1, #12
    aaea:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    aaec:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    aaee:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    aaf2:	bf14      	ite	ne
    aaf4:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    aaf8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    aafa:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    aafe:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    ab02:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    ab06:	bf14      	ite	ne
    ab08:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    ab0c:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    ab0e:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    ab10:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ab14:	b104      	cbz	r4, ab18 <nrf_gpio_reconfigure+0x60>
    ab16:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    ab18:	b10f      	cbz	r7, ab1e <nrf_gpio_reconfigure+0x66>
    ab1a:	783f      	ldrb	r7, [r7, #0]
    ab1c:	007f      	lsls	r7, r7, #1
    ab1e:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    ab20:	b10e      	cbz	r6, ab26 <nrf_gpio_reconfigure+0x6e>
    ab22:	7836      	ldrb	r6, [r6, #0]
    ab24:	00b6      	lsls	r6, r6, #2
    ab26:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ab28:	b18d      	cbz	r5, ab4e <nrf_gpio_reconfigure+0x96>
    ab2a:	7829      	ldrb	r1, [r5, #0]
    ab2c:	0209      	lsls	r1, r1, #8
    ab2e:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    ab30:	f1b8 0f00 	cmp.w	r8, #0
    ab34:	d003      	beq.n	ab3e <nrf_gpio_reconfigure+0x86>
    ab36:	f898 8000 	ldrb.w	r8, [r8]
    ab3a:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ab3e:	4321      	orrs	r1, r4
    ab40:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    ab44:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    ab48:	b002      	add	sp, #8
    ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    ab4e:	4629      	mov	r1, r5
    ab50:	e7ed      	b.n	ab2e <nrf_gpio_reconfigure+0x76>

0000ab52 <nrf_gpio_cfg_sense_set>:
{
    ab52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ab54:	f10d 030f 	add.w	r3, sp, #15
    ab58:	9301      	str	r3, [sp, #4]
    ab5a:	2300      	movs	r3, #0
{
    ab5c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    ab60:	9300      	str	r3, [sp, #0]
    ab62:	461a      	mov	r2, r3
    ab64:	4619      	mov	r1, r3
    ab66:	f7ff ffa7 	bl	aab8 <nrf_gpio_reconfigure>
}
    ab6a:	b005      	add	sp, #20
    ab6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ab70 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    ab70:	f7fc b96e 	b.w	6e50 <_DoInit>

0000ab74 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ab74:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ab76:	f7ff fffb 	bl	ab70 <SEGGER_RTT_Init>

	return 0;
}
    ab7a:	2000      	movs	r0, #0
    ab7c:	bd08      	pop	{r3, pc}

0000ab7e <z_device_state_init>:
}
    ab7e:	4770      	bx	lr

0000ab80 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ab80:	b138      	cbz	r0, ab92 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ab82:	68c3      	ldr	r3, [r0, #12]
    ab84:	8818      	ldrh	r0, [r3, #0]
    ab86:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ab8a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    ab8e:	4258      	negs	r0, r3
    ab90:	4158      	adcs	r0, r3
}
    ab92:	4770      	bx	lr

0000ab94 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    ab94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    ab96:	ab0b      	add	r3, sp, #44	; 0x2c
    ab98:	9305      	str	r3, [sp, #20]
    ab9a:	9303      	str	r3, [sp, #12]
    ab9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab9e:	9302      	str	r3, [sp, #8]
    aba0:	2300      	movs	r3, #0
    aba2:	e9cd 3300 	strd	r3, r3, [sp]
    aba6:	2201      	movs	r2, #1
    aba8:	4618      	mov	r0, r3
    abaa:	f7f8 fc7f 	bl	34ac <z_impl_z_log_msg2_runtime_vcreate>
}
    abae:	b007      	add	sp, #28
    abb0:	f85d fb04 	ldr.w	pc, [sp], #4

0000abb4 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    abb4:	f000 b99e 	b.w	aef4 <memset>

0000abb8 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    abb8:	f000 b97b 	b.w	aeb2 <memcpy>

0000abbc <k_mem_slab_init>:
{
    abbc:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    abbe:	2400      	movs	r4, #0
    abc0:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    abc2:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    abc4:	ea41 0402 	orr.w	r4, r1, r2
    abc8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    abcc:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    abd0:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    abd2:	d10c      	bne.n	abee <k_mem_slab_init+0x32>
    abd4:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    abd6:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    abd8:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    abda:	d103      	bne.n	abe4 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    abdc:	e9c0 0000 	strd	r0, r0, [r0]
}
    abe0:	2000      	movs	r0, #0
}
    abe2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    abe4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    abe6:	3401      	adds	r4, #1
    abe8:	460d      	mov	r5, r1
		p += slab->block_size;
    abea:	4411      	add	r1, r2
    abec:	e7f3      	b.n	abd6 <k_mem_slab_init+0x1a>
		return -EINVAL;
    abee:	f06f 0015 	mvn.w	r0, #21
	return rc;
    abf2:	e7f6      	b.n	abe2 <k_mem_slab_init+0x26>

0000abf4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    abf4:	f3ef 8005 	mrs	r0, IPSR
}
    abf8:	3800      	subs	r0, #0
    abfa:	bf18      	it	ne
    abfc:	2001      	movne	r0, #1
    abfe:	4770      	bx	lr

0000ac00 <k_thread_name_get>:
}
    ac00:	2000      	movs	r0, #0
    ac02:	4770      	bx	lr

0000ac04 <z_pm_save_idle_exit>:
{
    ac04:	b508      	push	{r3, lr}
	pm_system_resume();
    ac06:	f7f8 fde5 	bl	37d4 <pm_system_resume>
}
    ac0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    ac0e:	f7ff be2e 	b.w	a86e <sys_clock_idle_exit>

0000ac12 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    ac12:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ac16:	428b      	cmp	r3, r1
    ac18:	d001      	beq.n	ac1e <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    ac1a:	f7fd bd39 	b.w	8690 <z_set_prio>
}
    ac1e:	2000      	movs	r0, #0
    ac20:	4770      	bx	lr

0000ac22 <z_impl_k_mutex_init>:
{
    ac22:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ac24:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    ac26:	e9c3 0002 	strd	r0, r0, [r3, #8]
    ac2a:	e9c3 3300 	strd	r3, r3, [r3]
}
    ac2e:	4770      	bx	lr

0000ac30 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    ac30:	b13a      	cbz	r2, ac42 <z_impl_k_sem_init+0x12>
    ac32:	428a      	cmp	r2, r1
    ac34:	d305      	bcc.n	ac42 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    ac36:	e9c0 1202 	strd	r1, r2, [r0, #8]
    ac3a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    ac3e:	2000      	movs	r0, #0
    ac40:	4770      	bx	lr
		return -EINVAL;
    ac42:	f06f 0015 	mvn.w	r0, #21
}
    ac46:	4770      	bx	lr

0000ac48 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac48:	4603      	mov	r3, r0
    ac4a:	b920      	cbnz	r0, ac56 <z_reschedule_irqlock+0xe>
    ac4c:	f3ef 8205 	mrs	r2, IPSR
    ac50:	b90a      	cbnz	r2, ac56 <z_reschedule_irqlock+0xe>
    ac52:	f7f9 b877 	b.w	3d44 <arch_swap>
    ac56:	f383 8811 	msr	BASEPRI, r3
    ac5a:	f3bf 8f6f 	isb	sy
}
    ac5e:	4770      	bx	lr

0000ac60 <z_reschedule_unlocked>:
	__asm__ volatile(
    ac60:	f04f 0320 	mov.w	r3, #32
    ac64:	f3ef 8011 	mrs	r0, BASEPRI
    ac68:	f383 8812 	msr	BASEPRI_MAX, r3
    ac6c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    ac70:	f7ff bfea 	b.w	ac48 <z_reschedule_irqlock>

0000ac74 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ac74:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ac76:	f7fe fc57 	bl	9528 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ac7a:	bd08      	pop	{r3, pc}

0000ac7c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    ac7c:	b108      	cbz	r0, ac82 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    ac7e:	f7f9 beb3 	b.w	49e8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    ac82:	4770      	bx	lr

0000ac84 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ac84:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ac88:	bf08      	it	eq
    ac8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    ac8e:	b538      	push	{r3, r4, r5, lr}
    ac90:	460c      	mov	r4, r1
    ac92:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ac94:	d014      	beq.n	acc0 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ac96:	4308      	orrs	r0, r1
    ac98:	d103      	bne.n	aca2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    ac9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    ac9e:	f7fe bc43 	b.w	9528 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    aca2:	f06f 0001 	mvn.w	r0, #1
    aca6:	1b40      	subs	r0, r0, r5
    aca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    acac:	eb63 0101 	sbc.w	r1, r3, r1
    acb0:	2900      	cmp	r1, #0
    acb2:	da04      	bge.n	acbe <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    acb4:	f7fe fc38 	bl	9528 <sys_clock_tick_get>
    acb8:	1940      	adds	r0, r0, r5
    acba:	eb41 0104 	adc.w	r1, r1, r4
}
    acbe:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    acc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    acc4:	4601      	mov	r1, r0
    acc6:	e7fa      	b.n	acbe <sys_clock_timeout_end_calc+0x3a>

0000acc8 <k_timer_init>:
	timer->status = 0U;
    acc8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    acca:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    acce:	f100 0218 	add.w	r2, r0, #24
    acd2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    acd6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    acda:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    acdc:	6343      	str	r3, [r0, #52]	; 0x34
}
    acde:	4770      	bx	lr

0000ace0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    ace0:	b510      	push	{r4, lr}
    ace2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    ace4:	f7fe fa7e 	bl	91e4 <z_abort_timeout>

	if (inactive) {
    ace8:	b9b0      	cbnz	r0, ad18 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    acea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    acec:	b10b      	cbz	r3, acf2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    acee:	4620      	mov	r0, r4
    acf0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    acf2:	f104 0018 	add.w	r0, r4, #24
    acf6:	f7fd fe47 	bl	8988 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    acfa:	b168      	cbz	r0, ad18 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    acfc:	f7fd f8dc 	bl	7eb8 <z_ready_thread>
    ad00:	f04f 0320 	mov.w	r3, #32
    ad04:	f3ef 8011 	mrs	r0, BASEPRI
    ad08:	f383 8812 	msr	BASEPRI_MAX, r3
    ad0c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ad10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ad14:	f7ff bf98 	b.w	ac48 <z_reschedule_irqlock>
    ad18:	bd10      	pop	{r4, pc}

0000ad1a <k_malloc>:
{
    ad1a:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    ad1c:	2004      	movs	r0, #4
    ad1e:	f7fe bd8b 	b.w	9838 <k_aligned_alloc>

0000ad22 <k_heap_init>:
{
    ad22:	b410      	push	{r4}
    ad24:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    ad28:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ad2c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ad2e:	f7f7 bc25 	b.w	257c <sys_heap_init>

0000ad32 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    ad32:	f7fc be37 	b.w	79a4 <z_impl_k_mutex_unlock>

0000ad36 <open_cab>:
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad3a:	4606      	mov	r6, r0
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    ad3c:	202c      	movs	r0, #44	; 0x2c
cab* open_cab(char* name, uint16_t num, uint16_t dim, void* first){
    ad3e:	460d      	mov	r5, r1
    ad40:	4617      	mov	r7, r2
    ad42:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    ad44:	f7ff ffe9 	bl	ad1a <k_malloc>
    buffer->num = num;
    ad48:	8085      	strh	r5, [r0, #4]
    buffer->size = num * dim;
    ad4a:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    ad4e:	4604      	mov	r4, r0
    buffer->dim = dim;
    ad50:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    ad52:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    ad54:	3018      	adds	r0, #24
    ad56:	f7ff ff64 	bl	ac22 <z_impl_k_mutex_init>
    buffer->buffers = k_malloc(buffer->size * (N_TASKS + 1)); 
    ad5a:	8920      	ldrh	r0, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
    ad5c:	2300      	movs	r3, #0
    ad5e:	8223      	strh	r3, [r4, #16]
    ad60:	74a3      	strb	r3, [r4, #18]
    ad62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ad66:	f7ff ffd8 	bl	ad1a <k_malloc>
    ad6a:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    ad6c:	4630      	mov	r0, r6
    ad6e:	f7f6 f90f 	bl	f90 <strlen>
    ad72:	f7ff ffd2 	bl	ad1a <k_malloc>
    ad76:	6020      	str	r0, [r4, #0]
    buffer->head = k_malloc(buffer->size);
    ad78:	8920      	ldrh	r0, [r4, #8]
    ad7a:	f7ff ffce 	bl	ad1a <k_malloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    ad7e:	4631      	mov	r1, r6
    ad80:	6160      	str	r0, [r4, #20]
    ad82:	6820      	ldr	r0, [r4, #0]
    ad84:	f000 f8be 	bl	af04 <strcpy>
    buffer->head = first;
    ad88:	f8c4 8014 	str.w	r8, [r4, #20]
}
    ad8c:	4620      	mov	r0, r4
    ad8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad92 <put_mes>:

void put_mes(void* buf_pointer, cab* cab_id){
    ad92:	b570      	push	{r4, r5, r6, lr}
    ad94:	4604      	mov	r4, r0
    ad96:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    ad98:	f101 0618 	add.w	r6, r1, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    ad9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ada0:	4630      	mov	r0, r6
    ada2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ada6:	f7fc fd03 	bl	77b0 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    adaa:	68eb      	ldr	r3, [r5, #12]
    cab_id->head = buf_pointer;
    adac:	616c      	str	r4, [r5, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    adae:	1ae4      	subs	r4, r4, r3
    adb0:	892b      	ldrh	r3, [r5, #8]
    adb2:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(buf_pointer, cab_id);
    cab_id->flags[i] = 0;
    adb6:	fa15 f184 	uxtah	r1, r5, r4
    adba:	2300      	movs	r3, #0
    adbc:	740b      	strb	r3, [r1, #16]
    k_mutex_unlock(&cab_id->mutex);
    adbe:	4630      	mov	r0, r6
}
    adc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    adc4:	f7ff bfb5 	b.w	ad32 <k_mutex_unlock.isra.0>

0000adc8 <get_mes>:

void* get_mes(cab* cab_id){
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	4604      	mov	r4, r0
    void* buffer;
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    adcc:	f100 0618 	add.w	r6, r0, #24
    add0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    add4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    add8:	4630      	mov	r0, r6
    adda:	f7fc fce9 	bl	77b0 <z_impl_k_mutex_lock>
    buffer = cab_id->head;
    adde:	6965      	ldr	r5, [r4, #20]
    i = (buf - cab_id->buffers) / cab_id->size;
    ade0:	68e3      	ldr	r3, [r4, #12]
    ade2:	8922      	ldrh	r2, [r4, #8]
    ade4:	1aeb      	subs	r3, r5, r3
    ade6:	fb93 f3f2 	sdiv	r3, r3, r2
    uint16_t i = calculateIndex(buffer, cab_id);
    cab_id->flags[i]++;
    adea:	fa14 f083 	uxtah	r0, r4, r3
    adee:	7c03      	ldrb	r3, [r0, #16]
    adf0:	3301      	adds	r3, #1
    adf2:	7403      	strb	r3, [r0, #16]
    k_mutex_unlock(&cab_id->mutex);
    adf4:	4630      	mov	r0, r6
    adf6:	f7ff ff9c 	bl	ad32 <k_mutex_unlock.isra.0>
    return buffer;
}
    adfa:	4628      	mov	r0, r5
    adfc:	bd70      	pop	{r4, r5, r6, pc}

0000adfe <unget>:

void unget(void* mes_pointer, cab* cab_id){
    adfe:	b570      	push	{r4, r5, r6, lr}
    ae00:	4604      	mov	r4, r0
    ae02:	460d      	mov	r5, r1
    k_mutex_lock(&cab_id->mutex, K_FOREVER);
    ae04:	f101 0618 	add.w	r6, r1, #24
    ae08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ae0c:	4630      	mov	r0, r6
    ae0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ae12:	f7fc fccd 	bl	77b0 <z_impl_k_mutex_lock>
    i = (buf - cab_id->buffers) / cab_id->size;
    ae16:	68eb      	ldr	r3, [r5, #12]
    ae18:	1ae4      	subs	r4, r4, r3
    ae1a:	892b      	ldrh	r3, [r5, #8]
    ae1c:	fb94 f4f3 	sdiv	r4, r4, r3
    uint16_t i = calculateIndex(mes_pointer, cab_id);
    cab_id->flags[i]--;
    ae20:	fa15 f184 	uxtah	r1, r5, r4
    k_mutex_unlock(&cab_id->mutex);
    ae24:	4630      	mov	r0, r6
    cab_id->flags[i]--;
    ae26:	7c0b      	ldrb	r3, [r1, #16]
    ae28:	3b01      	subs	r3, #1
    ae2a:	740b      	strb	r3, [r1, #16]
}
    ae2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    k_mutex_unlock(&cab_id->mutex);
    ae30:	f7ff bf7f 	b.w	ad32 <k_mutex_unlock.isra.0>

0000ae34 <nearObstSearch>:

/* Function to look for closeby obstacles */
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    uint8_t flag = 0;
    /* Iterating through the CSA, tops to bottom, left column to right column */
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    ae34:	f500 507f 	add.w	r0, r0, #16320	; 0x3fc0
    ae38:	301f      	adds	r0, #31
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    ae3a:	f44f 527e 	mov.w	r2, #16256	; 0x3f80
    {
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    ae3e:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
        {   /* If the pixel is an obstacle returns 1 */    
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    ae42:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    ae46:	2980      	cmp	r1, #128	; 0x80
    ae48:	d009      	beq.n	ae5e <nearObstSearch+0x2a>
        for (uint16_t j = CSA_LEFT; j < CSA_RIGHT; j++)
    ae4a:	4283      	cmp	r3, r0
    ae4c:	d1f9      	bne.n	ae42 <nearObstSearch+0xe>
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    ae4e:	3a80      	subs	r2, #128	; 0x80
    ae50:	f5b2 5ffc 	cmp.w	r2, #8064	; 0x1f80
    ae54:	f1a3 0080 	sub.w	r0, r3, #128	; 0x80
    ae58:	d1f1      	bne.n	ae3e <nearObstSearch+0xa>
                flag = 1;
                return flag;
            }
        }
    }
    return flag;
    ae5a:	2000      	movs	r0, #0
}
    ae5c:	4770      	bx	lr
                return flag;
    ae5e:	2001      	movs	r0, #1
    ae60:	4770      	bx	lr

0000ae62 <obstCount>:

/* Function that counts obstacles. */
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    ae62:	4601      	mov	r1, r0
                continue;
            }
            /* If the pixel count is bigger than 2 it means that it is in fact a near obstacle */
            if(c_pixels >= 2) obs++;
            /* Reset the pixel count when there no pixels in the sequence */
            c_pixels = 0;
    ae64:	2200      	movs	r2, #0
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    ae66:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t obs = 0; 
    ae68:	4610      	mov	r0, r2
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    ae6a:	f101 0680 	add.w	r6, r1, #128	; 0x80
    ae6e:	1854      	adds	r4, r2, r1
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT*IMGWIDTH]) {
    ae70:	2300      	movs	r3, #0
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    ae72:	18b5      	adds	r5, r6, r2
            if(imageBuf[i * IMGWIDTH + j] == OBSTACLE_COLOR){
    ae74:	f814 7b01 	ldrb.w	r7, [r4], #1
    ae78:	2f80      	cmp	r7, #128	; 0x80
    ae7a:	d10e      	bne.n	ae9a <obstCount+0x38>
                c_pixels++;
    ae7c:	3301      	adds	r3, #1
    ae7e:	b29b      	uxth	r3, r3
        for (uint16_t j = 0; j < IMGWIDTH; j++)
    ae80:	42ac      	cmp	r4, r5
    ae82:	d1f7      	bne.n	ae74 <obstCount+0x12>
        }
        /* Same step as done above but to avoid bugs with last pixel from last row */
        if(c_pixels >= 2) obs++;
    ae84:	2b01      	cmp	r3, #1
    ae86:	bf88      	it	hi
    ae88:	1c43      	addhi	r3, r0, #1
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    ae8a:	f102 0280 	add.w	r2, r2, #128	; 0x80
        if(c_pixels >= 2) obs++;
    ae8e:	bf88      	it	hi
    ae90:	b298      	uxthhi	r0, r3
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    ae92:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    ae96:	d1ea      	bne.n	ae6e <obstCount+0xc>
        
        c_pixels = 0;
    }

    return obs;
}
    ae98:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if(c_pixels >= 2) obs++;
    ae9a:	2b01      	cmp	r3, #1
    ae9c:	bf84      	itt	hi
    ae9e:	1c43      	addhi	r3, r0, #1
    aea0:	b298      	uxthhi	r0, r3
            c_pixels = 0;
    aea2:	2300      	movs	r3, #0
    aea4:	e7ec      	b.n	ae80 <obstCount+0x1e>

0000aea6 <atan2>:
    aea6:	f7f6 b8ab 	b.w	1000 <__ieee754_atan2>

0000aeaa <fabs>:
    aeaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    aeae:	4619      	mov	r1, r3
    aeb0:	4770      	bx	lr

0000aeb2 <memcpy>:
    aeb2:	440a      	add	r2, r1
    aeb4:	4291      	cmp	r1, r2
    aeb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    aeba:	d100      	bne.n	aebe <memcpy+0xc>
    aebc:	4770      	bx	lr
    aebe:	b510      	push	{r4, lr}
    aec0:	f811 4b01 	ldrb.w	r4, [r1], #1
    aec4:	f803 4f01 	strb.w	r4, [r3, #1]!
    aec8:	4291      	cmp	r1, r2
    aeca:	d1f9      	bne.n	aec0 <memcpy+0xe>
    aecc:	bd10      	pop	{r4, pc}

0000aece <__memcpy_chk>:
    aece:	429a      	cmp	r2, r3
    aed0:	b508      	push	{r3, lr}
    aed2:	d901      	bls.n	aed8 <__memcpy_chk+0xa>
    aed4:	f7f9 fd34 	bl	4940 <__chk_fail>
    aed8:	4281      	cmp	r1, r0
    aeda:	d804      	bhi.n	aee6 <__memcpy_chk+0x18>
    aedc:	188b      	adds	r3, r1, r2
    aede:	4298      	cmp	r0, r3
    aee0:	d3f8      	bcc.n	aed4 <__memcpy_chk+0x6>
    aee2:	4281      	cmp	r1, r0
    aee4:	d102      	bne.n	aeec <__memcpy_chk+0x1e>
    aee6:	1883      	adds	r3, r0, r2
    aee8:	4299      	cmp	r1, r3
    aeea:	d3f3      	bcc.n	aed4 <__memcpy_chk+0x6>
    aeec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aef0:	f7ff bfdf 	b.w	aeb2 <memcpy>

0000aef4 <memset>:
    aef4:	4402      	add	r2, r0
    aef6:	4603      	mov	r3, r0
    aef8:	4293      	cmp	r3, r2
    aefa:	d100      	bne.n	aefe <memset+0xa>
    aefc:	4770      	bx	lr
    aefe:	f803 1b01 	strb.w	r1, [r3], #1
    af02:	e7f9      	b.n	aef8 <memset+0x4>

0000af04 <strcpy>:
    af04:	4603      	mov	r3, r0
    af06:	f811 2b01 	ldrb.w	r2, [r1], #1
    af0a:	f803 2b01 	strb.w	r2, [r3], #1
    af0e:	2a00      	cmp	r2, #0
    af10:	d1f9      	bne.n	af06 <strcpy+0x2>
    af12:	4770      	bx	lr

0000af14 <strnlen>:
    af14:	b510      	push	{r4, lr}
    af16:	4602      	mov	r2, r0
    af18:	4401      	add	r1, r0
    af1a:	428a      	cmp	r2, r1
    af1c:	4613      	mov	r3, r2
    af1e:	d003      	beq.n	af28 <strnlen+0x14>
    af20:	781c      	ldrb	r4, [r3, #0]
    af22:	3201      	adds	r2, #1
    af24:	2c00      	cmp	r4, #0
    af26:	d1f8      	bne.n	af1a <strnlen+0x6>
    af28:	1a18      	subs	r0, r3, r0
    af2a:	bd10      	pop	{r4, pc}

0000af2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    af2c:	f7fb b8ec 	b.w	6108 <SystemInit>
