
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 70 00 20 99 45 00 00 bb 99 00 00 6d 45 00 00     @p. .E......mE..
  10:	6d 45 00 00 6d 45 00 00 6d 45 00 00 00 00 00 00     mE..mE..mE......
	...
  2c:	55 3e 00 00 6d 45 00 00 00 00 00 00 01 3e 00 00     U>..mE.......>..
  3c:	6d 45 00 00                                         mE..

00000040 <_irq_vector_table>:
  40:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  50:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  60:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  70:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  80:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  90:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  a0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  b0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  c0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  d0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  e0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..
  f0:	05 3f 00 00 05 3f 00 00 05 3f 00 00 05 3f 00 00     .?...?...?...?..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18d>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x179>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc3>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1df>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10d>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x109>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x123>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x171>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x159>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ed>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1b1>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1cf>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     94c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f890 	bl	a80 <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <__gedf2>:
     970:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     974:	e006      	b.n	984 <__cmpdf2+0x4>
     976:	bf00      	nop

00000978 <__ledf2>:
     978:	f04f 0c01 	mov.w	ip, #1
     97c:	e002      	b.n	984 <__cmpdf2+0x4>
     97e:	bf00      	nop

00000980 <__cmpdf2>:
     980:	f04f 0c01 	mov.w	ip, #1
     984:	f84d cd04 	str.w	ip, [sp, #-4]!
     988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     98c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     994:	bf18      	it	ne
     996:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     99a:	d01b      	beq.n	9d4 <__cmpdf2+0x54>
     99c:	b001      	add	sp, #4
     99e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9a2:	bf0c      	ite	eq
     9a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9a8:	ea91 0f03 	teqne	r1, r3
     9ac:	bf02      	ittt	eq
     9ae:	ea90 0f02 	teqeq	r0, r2
     9b2:	2000      	moveq	r0, #0
     9b4:	4770      	bxeq	lr
     9b6:	f110 0f00 	cmn.w	r0, #0
     9ba:	ea91 0f03 	teq	r1, r3
     9be:	bf58      	it	pl
     9c0:	4299      	cmppl	r1, r3
     9c2:	bf08      	it	eq
     9c4:	4290      	cmpeq	r0, r2
     9c6:	bf2c      	ite	cs
     9c8:	17d8      	asrcs	r0, r3, #31
     9ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     9ce:	f040 0001 	orr.w	r0, r0, #1
     9d2:	4770      	bx	lr
     9d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9dc:	d102      	bne.n	9e4 <__cmpdf2+0x64>
     9de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     9e2:	d107      	bne.n	9f4 <__cmpdf2+0x74>
     9e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9ec:	d1d6      	bne.n	99c <__cmpdf2+0x1c>
     9ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     9f2:	d0d3      	beq.n	99c <__cmpdf2+0x1c>
     9f4:	f85d 0b04 	ldr.w	r0, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_cdrcmple>:
     9fc:	4684      	mov	ip, r0
     9fe:	4610      	mov	r0, r2
     a00:	4662      	mov	r2, ip
     a02:	468c      	mov	ip, r1
     a04:	4619      	mov	r1, r3
     a06:	4663      	mov	r3, ip
     a08:	e000      	b.n	a0c <__aeabi_cdcmpeq>
     a0a:	bf00      	nop

00000a0c <__aeabi_cdcmpeq>:
     a0c:	b501      	push	{r0, lr}
     a0e:	f7ff ffb7 	bl	980 <__cmpdf2>
     a12:	2800      	cmp	r0, #0
     a14:	bf48      	it	mi
     a16:	f110 0f00 	cmnmi.w	r0, #0
     a1a:	bd01      	pop	{r0, pc}

00000a1c <__aeabi_dcmpeq>:
     a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a20:	f7ff fff4 	bl	a0c <__aeabi_cdcmpeq>
     a24:	bf0c      	ite	eq
     a26:	2001      	moveq	r0, #1
     a28:	2000      	movne	r0, #0
     a2a:	f85d fb08 	ldr.w	pc, [sp], #8
     a2e:	bf00      	nop

00000a30 <__aeabi_dcmplt>:
     a30:	f84d ed08 	str.w	lr, [sp, #-8]!
     a34:	f7ff ffea 	bl	a0c <__aeabi_cdcmpeq>
     a38:	bf34      	ite	cc
     a3a:	2001      	movcc	r0, #1
     a3c:	2000      	movcs	r0, #0
     a3e:	f85d fb08 	ldr.w	pc, [sp], #8
     a42:	bf00      	nop

00000a44 <__aeabi_dcmple>:
     a44:	f84d ed08 	str.w	lr, [sp, #-8]!
     a48:	f7ff ffe0 	bl	a0c <__aeabi_cdcmpeq>
     a4c:	bf94      	ite	ls
     a4e:	2001      	movls	r0, #1
     a50:	2000      	movhi	r0, #0
     a52:	f85d fb08 	ldr.w	pc, [sp], #8
     a56:	bf00      	nop

00000a58 <__aeabi_dcmpge>:
     a58:	f84d ed08 	str.w	lr, [sp, #-8]!
     a5c:	f7ff ffce 	bl	9fc <__aeabi_cdrcmple>
     a60:	bf94      	ite	ls
     a62:	2001      	movls	r0, #1
     a64:	2000      	movhi	r0, #0
     a66:	f85d fb08 	ldr.w	pc, [sp], #8
     a6a:	bf00      	nop

00000a6c <__aeabi_dcmpgt>:
     a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a70:	f7ff ffc4 	bl	9fc <__aeabi_cdrcmple>
     a74:	bf34      	ite	cc
     a76:	2001      	movcc	r0, #1
     a78:	2000      	movcs	r0, #0
     a7a:	f85d fb08 	ldr.w	pc, [sp], #8
     a7e:	bf00      	nop

00000a80 <__udivmoddi4>:
     a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a84:	4686      	mov	lr, r0
     a86:	468c      	mov	ip, r1
     a88:	4608      	mov	r0, r1
     a8a:	9e08      	ldr	r6, [sp, #32]
     a8c:	4615      	mov	r5, r2
     a8e:	4674      	mov	r4, lr
     a90:	4619      	mov	r1, r3
     a92:	2b00      	cmp	r3, #0
     a94:	f040 80c2 	bne.w	c1c <__udivmoddi4+0x19c>
     a98:	4285      	cmp	r5, r0
     a9a:	fab2 f282 	clz	r2, r2
     a9e:	d945      	bls.n	b2c <__udivmoddi4+0xac>
     aa0:	b14a      	cbz	r2, ab6 <__udivmoddi4+0x36>
     aa2:	f1c2 0320 	rsb	r3, r2, #32
     aa6:	fa00 fc02 	lsl.w	ip, r0, r2
     aaa:	fa2e f303 	lsr.w	r3, lr, r3
     aae:	4095      	lsls	r5, r2
     ab0:	ea43 0c0c 	orr.w	ip, r3, ip
     ab4:	4094      	lsls	r4, r2
     ab6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     aba:	b2a8      	uxth	r0, r5
     abc:	fbbc f8fe 	udiv	r8, ip, lr
     ac0:	0c23      	lsrs	r3, r4, #16
     ac2:	fb0e cc18 	mls	ip, lr, r8, ip
     ac6:	fb08 f900 	mul.w	r9, r8, r0
     aca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     ace:	4599      	cmp	r9, r3
     ad0:	d928      	bls.n	b24 <__udivmoddi4+0xa4>
     ad2:	18eb      	adds	r3, r5, r3
     ad4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     ad8:	d204      	bcs.n	ae4 <__udivmoddi4+0x64>
     ada:	4599      	cmp	r9, r3
     adc:	d902      	bls.n	ae4 <__udivmoddi4+0x64>
     ade:	f1a8 0702 	sub.w	r7, r8, #2
     ae2:	442b      	add	r3, r5
     ae4:	eba3 0309 	sub.w	r3, r3, r9
     ae8:	b2a4      	uxth	r4, r4
     aea:	fbb3 fcfe 	udiv	ip, r3, lr
     aee:	fb0e 331c 	mls	r3, lr, ip, r3
     af2:	fb0c f000 	mul.w	r0, ip, r0
     af6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     afa:	42a0      	cmp	r0, r4
     afc:	d914      	bls.n	b28 <__udivmoddi4+0xa8>
     afe:	192c      	adds	r4, r5, r4
     b00:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     b04:	d204      	bcs.n	b10 <__udivmoddi4+0x90>
     b06:	42a0      	cmp	r0, r4
     b08:	d902      	bls.n	b10 <__udivmoddi4+0x90>
     b0a:	f1ac 0302 	sub.w	r3, ip, #2
     b0e:	442c      	add	r4, r5
     b10:	1a24      	subs	r4, r4, r0
     b12:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     b16:	b11e      	cbz	r6, b20 <__udivmoddi4+0xa0>
     b18:	40d4      	lsrs	r4, r2
     b1a:	2300      	movs	r3, #0
     b1c:	6034      	str	r4, [r6, #0]
     b1e:	6073      	str	r3, [r6, #4]
     b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b24:	4647      	mov	r7, r8
     b26:	e7dd      	b.n	ae4 <__udivmoddi4+0x64>
     b28:	4663      	mov	r3, ip
     b2a:	e7f1      	b.n	b10 <__udivmoddi4+0x90>
     b2c:	bb92      	cbnz	r2, b94 <__udivmoddi4+0x114>
     b2e:	1b43      	subs	r3, r0, r5
     b30:	2101      	movs	r1, #1
     b32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b36:	b2af      	uxth	r7, r5
     b38:	fbb3 fcfe 	udiv	ip, r3, lr
     b3c:	0c20      	lsrs	r0, r4, #16
     b3e:	fb0e 331c 	mls	r3, lr, ip, r3
     b42:	fb0c f807 	mul.w	r8, ip, r7
     b46:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     b4a:	4598      	cmp	r8, r3
     b4c:	d962      	bls.n	c14 <__udivmoddi4+0x194>
     b4e:	18eb      	adds	r3, r5, r3
     b50:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     b54:	d204      	bcs.n	b60 <__udivmoddi4+0xe0>
     b56:	4598      	cmp	r8, r3
     b58:	d902      	bls.n	b60 <__udivmoddi4+0xe0>
     b5a:	f1ac 0002 	sub.w	r0, ip, #2
     b5e:	442b      	add	r3, r5
     b60:	eba3 0308 	sub.w	r3, r3, r8
     b64:	b2a4      	uxth	r4, r4
     b66:	fbb3 fcfe 	udiv	ip, r3, lr
     b6a:	fb0e 331c 	mls	r3, lr, ip, r3
     b6e:	fb0c f707 	mul.w	r7, ip, r7
     b72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b76:	42a7      	cmp	r7, r4
     b78:	d94e      	bls.n	c18 <__udivmoddi4+0x198>
     b7a:	192c      	adds	r4, r5, r4
     b7c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     b80:	d204      	bcs.n	b8c <__udivmoddi4+0x10c>
     b82:	42a7      	cmp	r7, r4
     b84:	d902      	bls.n	b8c <__udivmoddi4+0x10c>
     b86:	f1ac 0302 	sub.w	r3, ip, #2
     b8a:	442c      	add	r4, r5
     b8c:	1be4      	subs	r4, r4, r7
     b8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b92:	e7c0      	b.n	b16 <__udivmoddi4+0x96>
     b94:	f1c2 0320 	rsb	r3, r2, #32
     b98:	fa20 f103 	lsr.w	r1, r0, r3
     b9c:	4095      	lsls	r5, r2
     b9e:	4090      	lsls	r0, r2
     ba0:	fa2e f303 	lsr.w	r3, lr, r3
     ba4:	4303      	orrs	r3, r0
     ba6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     baa:	b2af      	uxth	r7, r5
     bac:	fbb1 fcfe 	udiv	ip, r1, lr
     bb0:	fb0e 101c 	mls	r0, lr, ip, r1
     bb4:	0c19      	lsrs	r1, r3, #16
     bb6:	fb0c f807 	mul.w	r8, ip, r7
     bba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     bbe:	4588      	cmp	r8, r1
     bc0:	fa04 f402 	lsl.w	r4, r4, r2
     bc4:	d922      	bls.n	c0c <__udivmoddi4+0x18c>
     bc6:	1869      	adds	r1, r5, r1
     bc8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     bcc:	d204      	bcs.n	bd8 <__udivmoddi4+0x158>
     bce:	4588      	cmp	r8, r1
     bd0:	d902      	bls.n	bd8 <__udivmoddi4+0x158>
     bd2:	f1ac 0002 	sub.w	r0, ip, #2
     bd6:	4429      	add	r1, r5
     bd8:	eba1 0108 	sub.w	r1, r1, r8
     bdc:	b29b      	uxth	r3, r3
     bde:	fbb1 fcfe 	udiv	ip, r1, lr
     be2:	fb0e 111c 	mls	r1, lr, ip, r1
     be6:	fb0c f707 	mul.w	r7, ip, r7
     bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     bee:	429f      	cmp	r7, r3
     bf0:	d90e      	bls.n	c10 <__udivmoddi4+0x190>
     bf2:	18eb      	adds	r3, r5, r3
     bf4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     bf8:	d204      	bcs.n	c04 <__udivmoddi4+0x184>
     bfa:	429f      	cmp	r7, r3
     bfc:	d902      	bls.n	c04 <__udivmoddi4+0x184>
     bfe:	f1ac 0102 	sub.w	r1, ip, #2
     c02:	442b      	add	r3, r5
     c04:	1bdb      	subs	r3, r3, r7
     c06:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c0a:	e792      	b.n	b32 <__udivmoddi4+0xb2>
     c0c:	4660      	mov	r0, ip
     c0e:	e7e3      	b.n	bd8 <__udivmoddi4+0x158>
     c10:	4661      	mov	r1, ip
     c12:	e7f7      	b.n	c04 <__udivmoddi4+0x184>
     c14:	4660      	mov	r0, ip
     c16:	e7a3      	b.n	b60 <__udivmoddi4+0xe0>
     c18:	4663      	mov	r3, ip
     c1a:	e7b7      	b.n	b8c <__udivmoddi4+0x10c>
     c1c:	4283      	cmp	r3, r0
     c1e:	d906      	bls.n	c2e <__udivmoddi4+0x1ae>
     c20:	b916      	cbnz	r6, c28 <__udivmoddi4+0x1a8>
     c22:	2100      	movs	r1, #0
     c24:	4608      	mov	r0, r1
     c26:	e77b      	b.n	b20 <__udivmoddi4+0xa0>
     c28:	e9c6 e000 	strd	lr, r0, [r6]
     c2c:	e7f9      	b.n	c22 <__udivmoddi4+0x1a2>
     c2e:	fab3 f783 	clz	r7, r3
     c32:	b98f      	cbnz	r7, c58 <__udivmoddi4+0x1d8>
     c34:	4283      	cmp	r3, r0
     c36:	d301      	bcc.n	c3c <__udivmoddi4+0x1bc>
     c38:	4572      	cmp	r2, lr
     c3a:	d808      	bhi.n	c4e <__udivmoddi4+0x1ce>
     c3c:	ebbe 0402 	subs.w	r4, lr, r2
     c40:	eb60 0303 	sbc.w	r3, r0, r3
     c44:	2001      	movs	r0, #1
     c46:	469c      	mov	ip, r3
     c48:	b91e      	cbnz	r6, c52 <__udivmoddi4+0x1d2>
     c4a:	2100      	movs	r1, #0
     c4c:	e768      	b.n	b20 <__udivmoddi4+0xa0>
     c4e:	4638      	mov	r0, r7
     c50:	e7fa      	b.n	c48 <__udivmoddi4+0x1c8>
     c52:	e9c6 4c00 	strd	r4, ip, [r6]
     c56:	e7f8      	b.n	c4a <__udivmoddi4+0x1ca>
     c58:	f1c7 0c20 	rsb	ip, r7, #32
     c5c:	40bb      	lsls	r3, r7
     c5e:	fa22 f40c 	lsr.w	r4, r2, ip
     c62:	431c      	orrs	r4, r3
     c64:	fa2e f10c 	lsr.w	r1, lr, ip
     c68:	fa20 f30c 	lsr.w	r3, r0, ip
     c6c:	40b8      	lsls	r0, r7
     c6e:	4301      	orrs	r1, r0
     c70:	ea4f 4914 	mov.w	r9, r4, lsr #16
     c74:	fa0e f507 	lsl.w	r5, lr, r7
     c78:	fbb3 f8f9 	udiv	r8, r3, r9
     c7c:	fa1f fe84 	uxth.w	lr, r4
     c80:	fb09 3018 	mls	r0, r9, r8, r3
     c84:	0c0b      	lsrs	r3, r1, #16
     c86:	fb08 fa0e 	mul.w	sl, r8, lr
     c8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     c8e:	459a      	cmp	sl, r3
     c90:	fa02 f207 	lsl.w	r2, r2, r7
     c94:	d940      	bls.n	d18 <__udivmoddi4+0x298>
     c96:	18e3      	adds	r3, r4, r3
     c98:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     c9c:	d204      	bcs.n	ca8 <__udivmoddi4+0x228>
     c9e:	459a      	cmp	sl, r3
     ca0:	d902      	bls.n	ca8 <__udivmoddi4+0x228>
     ca2:	f1a8 0002 	sub.w	r0, r8, #2
     ca6:	4423      	add	r3, r4
     ca8:	eba3 030a 	sub.w	r3, r3, sl
     cac:	b289      	uxth	r1, r1
     cae:	fbb3 f8f9 	udiv	r8, r3, r9
     cb2:	fb09 3318 	mls	r3, r9, r8, r3
     cb6:	fb08 fe0e 	mul.w	lr, r8, lr
     cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     cbe:	458e      	cmp	lr, r1
     cc0:	d92c      	bls.n	d1c <__udivmoddi4+0x29c>
     cc2:	1861      	adds	r1, r4, r1
     cc4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     cc8:	d204      	bcs.n	cd4 <__udivmoddi4+0x254>
     cca:	458e      	cmp	lr, r1
     ccc:	d902      	bls.n	cd4 <__udivmoddi4+0x254>
     cce:	f1a8 0302 	sub.w	r3, r8, #2
     cd2:	4421      	add	r1, r4
     cd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     cd8:	fba0 9802 	umull	r9, r8, r0, r2
     cdc:	eba1 010e 	sub.w	r1, r1, lr
     ce0:	4541      	cmp	r1, r8
     ce2:	46ce      	mov	lr, r9
     ce4:	4643      	mov	r3, r8
     ce6:	d302      	bcc.n	cee <__udivmoddi4+0x26e>
     ce8:	d106      	bne.n	cf8 <__udivmoddi4+0x278>
     cea:	454d      	cmp	r5, r9
     cec:	d204      	bcs.n	cf8 <__udivmoddi4+0x278>
     cee:	ebb9 0e02 	subs.w	lr, r9, r2
     cf2:	eb68 0304 	sbc.w	r3, r8, r4
     cf6:	3801      	subs	r0, #1
     cf8:	2e00      	cmp	r6, #0
     cfa:	d0a6      	beq.n	c4a <__udivmoddi4+0x1ca>
     cfc:	ebb5 020e 	subs.w	r2, r5, lr
     d00:	eb61 0103 	sbc.w	r1, r1, r3
     d04:	fa01 fc0c 	lsl.w	ip, r1, ip
     d08:	fa22 f307 	lsr.w	r3, r2, r7
     d0c:	ea4c 0303 	orr.w	r3, ip, r3
     d10:	40f9      	lsrs	r1, r7
     d12:	e9c6 3100 	strd	r3, r1, [r6]
     d16:	e798      	b.n	c4a <__udivmoddi4+0x1ca>
     d18:	4640      	mov	r0, r8
     d1a:	e7c5      	b.n	ca8 <__udivmoddi4+0x228>
     d1c:	4643      	mov	r3, r8
     d1e:	e7d9      	b.n	cd4 <__udivmoddi4+0x254>

00000d20 <strlen>:
     d20:	4603      	mov	r3, r0
     d22:	f813 2b01 	ldrb.w	r2, [r3], #1
     d26:	2a00      	cmp	r2, #0
     d28:	d1fb      	bne.n	d22 <strlen+0x2>
     d2a:	1a18      	subs	r0, r3, r0
     d2c:	3801      	subs	r0, #1
     d2e:	4770      	bx	lr

00000d30 <guideLineSearch>:
#include "img_algo.h"

/* Function that detects he position and agle of the guideline */
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH], uint16_t* pos, float* angle) {
     d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d32:	2400      	movs	r4, #0
     d34:	460d      	mov	r5, r1
     d36:	4617      	mov	r7, r2
     d38:	4626      	mov	r6, r4
     d3a:	4623      	mov	r3, r4
    uint16_t y_gn = 0;
    uint16_t y_gf = GN - 1;
    /* Iterate through GN and GF to discover the position of the guidelines */
    for(uint16_t i = GF; i <= GN; i += GN - 1){
        for(uint16_t j = 0; j < IMGWIDTH; j++){
            if(imageBuf[i][j] == GUIDELINE_COLOR){
     d3c:	5cc2      	ldrb	r2, [r0, r3]
     d3e:	2aff      	cmp	r2, #255	; 0xff
     d40:	d01e      	beq.n	d80 <guideLineSearch+0x50>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     d42:	3301      	adds	r3, #1
     d44:	2b80      	cmp	r3, #128	; 0x80
     d46:	d1f9      	bne.n	d3c <guideLineSearch+0xc>
     d48:	f500 537d 	add.w	r3, r0, #16192	; 0x3f40
     d4c:	333f      	adds	r3, #63	; 0x3f
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH], uint16_t* pos, float* angle) {
     d4e:	2100      	movs	r1, #0
            if(imageBuf[i][j] == GUIDELINE_COLOR){
     d50:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     d54:	2aff      	cmp	r2, #255	; 0xff
     d56:	d015      	beq.n	d84 <guideLineSearch+0x54>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     d58:	3101      	adds	r1, #1
     d5a:	2980      	cmp	r1, #128	; 0x80
     d5c:	d1f8      	bne.n	d50 <guideLineSearch+0x20>
        }
    }
    /* When the guideline is vertical the angle is 0 rad, positive angles are associated with a tilt to the right 
    and negative angles to a tilt to the left 
    Calculation of angle between the two points in radians */
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     d5e:	1ba0      	subs	r0, r4, r6
     d60:	f7ff fb20 	bl	3a4 <__aeabi_i2d>
     d64:	a308      	add	r3, pc, #32	; (adr r3, d88 <guideLineSearch+0x58>)
     d66:	e9d3 2300 	ldrd	r2, r3, [r3]
     d6a:	f009 fa09 	bl	a180 <atan2>
     d6e:	f7ff fd95 	bl	89c <__aeabi_d2f>
    /* Computing of the position */
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     d72:	2364      	movs	r3, #100	; 0x64
     d74:	fb06 3303 	mla	r3, r6, r3, r3
     d78:	11db      	asrs	r3, r3, #7
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     d7a:	6038      	str	r0, [r7, #0]
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     d7c:	802b      	strh	r3, [r5, #0]
}
     d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d80:	b29c      	uxth	r4, r3
     d82:	e7e1      	b.n	d48 <guideLineSearch+0x18>
     d84:	b28e      	uxth	r6, r1
     d86:	e7ea      	b.n	d5e <guideLineSearch+0x2e>
     d88:	00000000 	.word	0x00000000
     d8c:	405fc000 	.word	0x405fc000

00000d90 <__ieee754_atan2>:
     d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d94:	4617      	mov	r7, r2
     d96:	4690      	mov	r8, r2
     d98:	4699      	mov	r9, r3
     d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
     d9e:	427b      	negs	r3, r7
     da0:	f8df a184 	ldr.w	sl, [pc, #388]	; f28 <__ieee754_atan2+0x198>
     da4:	433b      	orrs	r3, r7
     da6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
     daa:	4553      	cmp	r3, sl
     dac:	4604      	mov	r4, r0
     dae:	460d      	mov	r5, r1
     db0:	d809      	bhi.n	dc6 <__ieee754_atan2+0x36>
     db2:	4246      	negs	r6, r0
     db4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     db8:	4306      	orrs	r6, r0
     dba:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
     dbe:	4556      	cmp	r6, sl
     dc0:	468e      	mov	lr, r1
     dc2:	4683      	mov	fp, r0
     dc4:	d908      	bls.n	dd8 <__ieee754_atan2+0x48>
     dc6:	4642      	mov	r2, r8
     dc8:	464b      	mov	r3, r9
     dca:	4620      	mov	r0, r4
     dcc:	4629      	mov	r1, r5
     dce:	f7ff f99d 	bl	10c <__adddf3>
     dd2:	4604      	mov	r4, r0
     dd4:	460d      	mov	r5, r1
     dd6:	e016      	b.n	e06 <__ieee754_atan2+0x76>
     dd8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
     ddc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
     de0:	433e      	orrs	r6, r7
     de2:	d103      	bne.n	dec <__ieee754_atan2+0x5c>
     de4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de8:	f000 b8a6 	b.w	f38 <atan>
     dec:	ea4f 76a9 	mov.w	r6, r9, asr #30
     df0:	f006 0602 	and.w	r6, r6, #2
     df4:	ea53 0b0b 	orrs.w	fp, r3, fp
     df8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
     dfc:	d107      	bne.n	e0e <__ieee754_atan2+0x7e>
     dfe:	2e02      	cmp	r6, #2
     e00:	d064      	beq.n	ecc <__ieee754_atan2+0x13c>
     e02:	2e03      	cmp	r6, #3
     e04:	d066      	beq.n	ed4 <__ieee754_atan2+0x144>
     e06:	4620      	mov	r0, r4
     e08:	4629      	mov	r1, r5
     e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e0e:	4317      	orrs	r7, r2
     e10:	d106      	bne.n	e20 <__ieee754_atan2+0x90>
     e12:	f1be 0f00 	cmp.w	lr, #0
     e16:	da68      	bge.n	eea <__ieee754_atan2+0x15a>
     e18:	a537      	add	r5, pc, #220	; (adr r5, ef8 <__ieee754_atan2+0x168>)
     e1a:	e9d5 4500 	ldrd	r4, r5, [r5]
     e1e:	e7f2      	b.n	e06 <__ieee754_atan2+0x76>
     e20:	4552      	cmp	r2, sl
     e22:	d10f      	bne.n	e44 <__ieee754_atan2+0xb4>
     e24:	4293      	cmp	r3, r2
     e26:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
     e2a:	d107      	bne.n	e3c <__ieee754_atan2+0xac>
     e2c:	2e02      	cmp	r6, #2
     e2e:	d855      	bhi.n	edc <__ieee754_atan2+0x14c>
     e30:	4b3e      	ldr	r3, [pc, #248]	; (f2c <__ieee754_atan2+0x19c>)
     e32:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     e36:	e9d3 4500 	ldrd	r4, r5, [r3]
     e3a:	e7e4      	b.n	e06 <__ieee754_atan2+0x76>
     e3c:	2e02      	cmp	r6, #2
     e3e:	d851      	bhi.n	ee4 <__ieee754_atan2+0x154>
     e40:	4b3b      	ldr	r3, [pc, #236]	; (f30 <__ieee754_atan2+0x1a0>)
     e42:	e7f6      	b.n	e32 <__ieee754_atan2+0xa2>
     e44:	4553      	cmp	r3, sl
     e46:	d0e4      	beq.n	e12 <__ieee754_atan2+0x82>
     e48:	1a9b      	subs	r3, r3, r2
     e4a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
     e4e:	ea4f 5223 	mov.w	r2, r3, asr #20
     e52:	da21      	bge.n	e98 <__ieee754_atan2+0x108>
     e54:	f1b9 0f00 	cmp.w	r9, #0
     e58:	da01      	bge.n	e5e <__ieee754_atan2+0xce>
     e5a:	323c      	adds	r2, #60	; 0x3c
     e5c:	db20      	blt.n	ea0 <__ieee754_atan2+0x110>
     e5e:	4642      	mov	r2, r8
     e60:	464b      	mov	r3, r9
     e62:	4620      	mov	r0, r4
     e64:	4629      	mov	r1, r5
     e66:	f7ff fc31 	bl	6cc <__aeabi_ddiv>
     e6a:	f009 f98b 	bl	a184 <fabs>
     e6e:	f000 f863 	bl	f38 <atan>
     e72:	4604      	mov	r4, r0
     e74:	460d      	mov	r5, r1
     e76:	2e01      	cmp	r6, #1
     e78:	d015      	beq.n	ea6 <__ieee754_atan2+0x116>
     e7a:	2e02      	cmp	r6, #2
     e7c:	d017      	beq.n	eae <__ieee754_atan2+0x11e>
     e7e:	2e00      	cmp	r6, #0
     e80:	d0c1      	beq.n	e06 <__ieee754_atan2+0x76>
     e82:	a31f      	add	r3, pc, #124	; (adr r3, f00 <__ieee754_atan2+0x170>)
     e84:	e9d3 2300 	ldrd	r2, r3, [r3]
     e88:	4620      	mov	r0, r4
     e8a:	4629      	mov	r1, r5
     e8c:	f7ff f93c 	bl	108 <__aeabi_dsub>
     e90:	a31d      	add	r3, pc, #116	; (adr r3, f08 <__ieee754_atan2+0x178>)
     e92:	e9d3 2300 	ldrd	r2, r3, [r3]
     e96:	e016      	b.n	ec6 <__ieee754_atan2+0x136>
     e98:	a51d      	add	r5, pc, #116	; (adr r5, f10 <__ieee754_atan2+0x180>)
     e9a:	e9d5 4500 	ldrd	r4, r5, [r5]
     e9e:	e7ea      	b.n	e76 <__ieee754_atan2+0xe6>
     ea0:	2400      	movs	r4, #0
     ea2:	2500      	movs	r5, #0
     ea4:	e7e7      	b.n	e76 <__ieee754_atan2+0xe6>
     ea6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     eaa:	461d      	mov	r5, r3
     eac:	e7ab      	b.n	e06 <__ieee754_atan2+0x76>
     eae:	a314      	add	r3, pc, #80	; (adr r3, f00 <__ieee754_atan2+0x170>)
     eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
     eb4:	4620      	mov	r0, r4
     eb6:	4629      	mov	r1, r5
     eb8:	f7ff f926 	bl	108 <__aeabi_dsub>
     ebc:	4602      	mov	r2, r0
     ebe:	460b      	mov	r3, r1
     ec0:	a111      	add	r1, pc, #68	; (adr r1, f08 <__ieee754_atan2+0x178>)
     ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
     ec6:	f7ff f91f 	bl	108 <__aeabi_dsub>
     eca:	e782      	b.n	dd2 <__ieee754_atan2+0x42>
     ecc:	a50e      	add	r5, pc, #56	; (adr r5, f08 <__ieee754_atan2+0x178>)
     ece:	e9d5 4500 	ldrd	r4, r5, [r5]
     ed2:	e798      	b.n	e06 <__ieee754_atan2+0x76>
     ed4:	a510      	add	r5, pc, #64	; (adr r5, f18 <__ieee754_atan2+0x188>)
     ed6:	e9d5 4500 	ldrd	r4, r5, [r5]
     eda:	e794      	b.n	e06 <__ieee754_atan2+0x76>
     edc:	a510      	add	r5, pc, #64	; (adr r5, f20 <__ieee754_atan2+0x190>)
     ede:	e9d5 4500 	ldrd	r4, r5, [r5]
     ee2:	e790      	b.n	e06 <__ieee754_atan2+0x76>
     ee4:	2400      	movs	r4, #0
     ee6:	2500      	movs	r5, #0
     ee8:	e78d      	b.n	e06 <__ieee754_atan2+0x76>
     eea:	a509      	add	r5, pc, #36	; (adr r5, f10 <__ieee754_atan2+0x180>)
     eec:	e9d5 4500 	ldrd	r4, r5, [r5]
     ef0:	e789      	b.n	e06 <__ieee754_atan2+0x76>
     ef2:	bf00      	nop
     ef4:	f3af 8000 	nop.w
     ef8:	54442d18 	.word	0x54442d18
     efc:	bff921fb 	.word	0xbff921fb
     f00:	33145c07 	.word	0x33145c07
     f04:	3ca1a626 	.word	0x3ca1a626
     f08:	54442d18 	.word	0x54442d18
     f0c:	400921fb 	.word	0x400921fb
     f10:	54442d18 	.word	0x54442d18
     f14:	3ff921fb 	.word	0x3ff921fb
     f18:	54442d18 	.word	0x54442d18
     f1c:	c00921fb 	.word	0xc00921fb
     f20:	54442d18 	.word	0x54442d18
     f24:	3fe921fb 	.word	0x3fe921fb
     f28:	7ff00000 	.word	0x7ff00000
     f2c:	0000a510 	.word	0x0000a510
     f30:	0000a4f8 	.word	0x0000a4f8
     f34:	00000000 	.word	0x00000000

00000f38 <atan>:
     f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f3c:	4bbc      	ldr	r3, [pc, #752]	; (1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>)
     f3e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
     f42:	429e      	cmp	r6, r3
     f44:	4604      	mov	r4, r0
     f46:	460d      	mov	r5, r1
     f48:	468b      	mov	fp, r1
     f4a:	d918      	bls.n	f7e <atan+0x46>
     f4c:	4bb9      	ldr	r3, [pc, #740]	; (1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>)
     f4e:	429e      	cmp	r6, r3
     f50:	d801      	bhi.n	f56 <atan+0x1e>
     f52:	d109      	bne.n	f68 <atan+0x30>
     f54:	b140      	cbz	r0, f68 <atan+0x30>
     f56:	4622      	mov	r2, r4
     f58:	462b      	mov	r3, r5
     f5a:	4620      	mov	r0, r4
     f5c:	4629      	mov	r1, r5
     f5e:	f7ff f8d5 	bl	10c <__adddf3>
     f62:	4604      	mov	r4, r0
     f64:	460d      	mov	r5, r1
     f66:	e006      	b.n	f76 <atan+0x3e>
     f68:	f1bb 0f00 	cmp.w	fp, #0
     f6c:	f340 8123 	ble.w	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
     f70:	a593      	add	r5, pc, #588	; (adr r5, 11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>)
     f72:	e9d5 4500 	ldrd	r4, r5, [r5]
     f76:	4620      	mov	r0, r4
     f78:	4629      	mov	r1, r5
     f7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f7e:	4bae      	ldr	r3, [pc, #696]	; (1238 <CONFIG_FPROTECT_BLOCK_SIZE+0x238>)
     f80:	429e      	cmp	r6, r3
     f82:	d811      	bhi.n	fa8 <atan+0x70>
     f84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
     f88:	429e      	cmp	r6, r3
     f8a:	d80a      	bhi.n	fa2 <atan+0x6a>
     f8c:	a38e      	add	r3, pc, #568	; (adr r3, 11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>)
     f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
     f92:	f7ff f8bb 	bl	10c <__adddf3>
     f96:	4ba9      	ldr	r3, [pc, #676]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
     f98:	2200      	movs	r2, #0
     f9a:	f7ff fd67 	bl	a6c <__aeabi_dcmpgt>
     f9e:	2800      	cmp	r0, #0
     fa0:	d1e9      	bne.n	f76 <atan+0x3e>
     fa2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     fa6:	e027      	b.n	ff8 <atan+0xc0>
     fa8:	f009 f8ec 	bl	a184 <fabs>
     fac:	4ba4      	ldr	r3, [pc, #656]	; (1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>)
     fae:	429e      	cmp	r6, r3
     fb0:	4604      	mov	r4, r0
     fb2:	460d      	mov	r5, r1
     fb4:	f200 80b8 	bhi.w	1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>
     fb8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
     fbc:	429e      	cmp	r6, r3
     fbe:	f200 809c 	bhi.w	10fa <CONFIG_FPROTECT_BLOCK_SIZE+0xfa>
     fc2:	4602      	mov	r2, r0
     fc4:	460b      	mov	r3, r1
     fc6:	f7ff f8a1 	bl	10c <__adddf3>
     fca:	4b9c      	ldr	r3, [pc, #624]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
     fcc:	2200      	movs	r2, #0
     fce:	f7ff f89b 	bl	108 <__aeabi_dsub>
     fd2:	2200      	movs	r2, #0
     fd4:	4606      	mov	r6, r0
     fd6:	460f      	mov	r7, r1
     fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     fdc:	4620      	mov	r0, r4
     fde:	4629      	mov	r1, r5
     fe0:	f7ff f894 	bl	10c <__adddf3>
     fe4:	4602      	mov	r2, r0
     fe6:	460b      	mov	r3, r1
     fe8:	4630      	mov	r0, r6
     fea:	4639      	mov	r1, r7
     fec:	f7ff fb6e 	bl	6cc <__aeabi_ddiv>
     ff0:	f04f 0a00 	mov.w	sl, #0
     ff4:	4604      	mov	r4, r0
     ff6:	460d      	mov	r5, r1
     ff8:	4622      	mov	r2, r4
     ffa:	462b      	mov	r3, r5
     ffc:	4620      	mov	r0, r4
     ffe:	4629      	mov	r1, r5
    1000:	f7ff fa3a 	bl	478 <__aeabi_dmul>
    1004:	4602      	mov	r2, r0
    1006:	460b      	mov	r3, r1
    1008:	4680      	mov	r8, r0
    100a:	4689      	mov	r9, r1
    100c:	f7ff fa34 	bl	478 <__aeabi_dmul>
    1010:	a36f      	add	r3, pc, #444	; (adr r3, 11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>)
    1012:	e9d3 2300 	ldrd	r2, r3, [r3]
    1016:	4606      	mov	r6, r0
    1018:	460f      	mov	r7, r1
    101a:	f7ff fa2d 	bl	478 <__aeabi_dmul>
    101e:	a36e      	add	r3, pc, #440	; (adr r3, 11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>)
    1020:	e9d3 2300 	ldrd	r2, r3, [r3]
    1024:	f7ff f872 	bl	10c <__adddf3>
    1028:	4632      	mov	r2, r6
    102a:	463b      	mov	r3, r7
    102c:	f7ff fa24 	bl	478 <__aeabi_dmul>
    1030:	a36b      	add	r3, pc, #428	; (adr r3, 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>)
    1032:	e9d3 2300 	ldrd	r2, r3, [r3]
    1036:	f7ff f869 	bl	10c <__adddf3>
    103a:	4632      	mov	r2, r6
    103c:	463b      	mov	r3, r7
    103e:	f7ff fa1b 	bl	478 <__aeabi_dmul>
    1042:	a369      	add	r3, pc, #420	; (adr r3, 11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    1044:	e9d3 2300 	ldrd	r2, r3, [r3]
    1048:	f7ff f860 	bl	10c <__adddf3>
    104c:	4632      	mov	r2, r6
    104e:	463b      	mov	r3, r7
    1050:	f7ff fa12 	bl	478 <__aeabi_dmul>
    1054:	a366      	add	r3, pc, #408	; (adr r3, 11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    1056:	e9d3 2300 	ldrd	r2, r3, [r3]
    105a:	f7ff f857 	bl	10c <__adddf3>
    105e:	4632      	mov	r2, r6
    1060:	463b      	mov	r3, r7
    1062:	f7ff fa09 	bl	478 <__aeabi_dmul>
    1066:	a364      	add	r3, pc, #400	; (adr r3, 11f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f8>)
    1068:	e9d3 2300 	ldrd	r2, r3, [r3]
    106c:	f7ff f84e 	bl	10c <__adddf3>
    1070:	4642      	mov	r2, r8
    1072:	464b      	mov	r3, r9
    1074:	f7ff fa00 	bl	478 <__aeabi_dmul>
    1078:	a361      	add	r3, pc, #388	; (adr r3, 1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>)
    107a:	e9d3 2300 	ldrd	r2, r3, [r3]
    107e:	4680      	mov	r8, r0
    1080:	4689      	mov	r9, r1
    1082:	4630      	mov	r0, r6
    1084:	4639      	mov	r1, r7
    1086:	f7ff f9f7 	bl	478 <__aeabi_dmul>
    108a:	a35f      	add	r3, pc, #380	; (adr r3, 1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>)
    108c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1090:	f7ff f83a 	bl	108 <__aeabi_dsub>
    1094:	4632      	mov	r2, r6
    1096:	463b      	mov	r3, r7
    1098:	f7ff f9ee 	bl	478 <__aeabi_dmul>
    109c:	a35c      	add	r3, pc, #368	; (adr r3, 1210 <CONFIG_FPROTECT_BLOCK_SIZE+0x210>)
    109e:	e9d3 2300 	ldrd	r2, r3, [r3]
    10a2:	f7ff f831 	bl	108 <__aeabi_dsub>
    10a6:	4632      	mov	r2, r6
    10a8:	463b      	mov	r3, r7
    10aa:	f7ff f9e5 	bl	478 <__aeabi_dmul>
    10ae:	a35a      	add	r3, pc, #360	; (adr r3, 1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    10b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    10b4:	f7ff f828 	bl	108 <__aeabi_dsub>
    10b8:	4632      	mov	r2, r6
    10ba:	463b      	mov	r3, r7
    10bc:	f7ff f9dc 	bl	478 <__aeabi_dmul>
    10c0:	a357      	add	r3, pc, #348	; (adr r3, 1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>)
    10c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    10c6:	f7ff f81f 	bl	108 <__aeabi_dsub>
    10ca:	4632      	mov	r2, r6
    10cc:	463b      	mov	r3, r7
    10ce:	f7ff f9d3 	bl	478 <__aeabi_dmul>
    10d2:	4602      	mov	r2, r0
    10d4:	460b      	mov	r3, r1
    10d6:	4640      	mov	r0, r8
    10d8:	4649      	mov	r1, r9
    10da:	f7ff f817 	bl	10c <__adddf3>
    10de:	4622      	mov	r2, r4
    10e0:	462b      	mov	r3, r5
    10e2:	f7ff f9c9 	bl	478 <__aeabi_dmul>
    10e6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    10ea:	4602      	mov	r2, r0
    10ec:	460b      	mov	r3, r1
    10ee:	d144      	bne.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    10f0:	4620      	mov	r0, r4
    10f2:	4629      	mov	r1, r5
    10f4:	f7ff f808 	bl	108 <__aeabi_dsub>
    10f8:	e733      	b.n	f62 <atan+0x2a>
    10fa:	4b50      	ldr	r3, [pc, #320]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
    10fc:	2200      	movs	r2, #0
    10fe:	f7ff f803 	bl	108 <__aeabi_dsub>
    1102:	4b4e      	ldr	r3, [pc, #312]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
    1104:	4606      	mov	r6, r0
    1106:	460f      	mov	r7, r1
    1108:	2200      	movs	r2, #0
    110a:	4620      	mov	r0, r4
    110c:	4629      	mov	r1, r5
    110e:	f7fe fffd 	bl	10c <__adddf3>
    1112:	4602      	mov	r2, r0
    1114:	460b      	mov	r3, r1
    1116:	4630      	mov	r0, r6
    1118:	4639      	mov	r1, r7
    111a:	f7ff fad7 	bl	6cc <__aeabi_ddiv>
    111e:	f04f 0a01 	mov.w	sl, #1
    1122:	4604      	mov	r4, r0
    1124:	460d      	mov	r5, r1
    1126:	e767      	b.n	ff8 <atan+0xc0>
    1128:	4b46      	ldr	r3, [pc, #280]	; (1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>)
    112a:	429e      	cmp	r6, r3
    112c:	d21a      	bcs.n	1164 <CONFIG_FPROTECT_BLOCK_SIZE+0x164>
    112e:	4b46      	ldr	r3, [pc, #280]	; (1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
    1130:	2200      	movs	r2, #0
    1132:	f7fe ffe9 	bl	108 <__aeabi_dsub>
    1136:	4b44      	ldr	r3, [pc, #272]	; (1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>)
    1138:	4606      	mov	r6, r0
    113a:	460f      	mov	r7, r1
    113c:	2200      	movs	r2, #0
    113e:	4620      	mov	r0, r4
    1140:	4629      	mov	r1, r5
    1142:	f7ff f999 	bl	478 <__aeabi_dmul>
    1146:	4b3d      	ldr	r3, [pc, #244]	; (123c <CONFIG_FPROTECT_BLOCK_SIZE+0x23c>)
    1148:	2200      	movs	r2, #0
    114a:	f7fe ffdf 	bl	10c <__adddf3>
    114e:	4602      	mov	r2, r0
    1150:	460b      	mov	r3, r1
    1152:	4630      	mov	r0, r6
    1154:	4639      	mov	r1, r7
    1156:	f7ff fab9 	bl	6cc <__aeabi_ddiv>
    115a:	f04f 0a02 	mov.w	sl, #2
    115e:	4604      	mov	r4, r0
    1160:	460d      	mov	r5, r1
    1162:	e749      	b.n	ff8 <atan+0xc0>
    1164:	4602      	mov	r2, r0
    1166:	460b      	mov	r3, r1
    1168:	2000      	movs	r0, #0
    116a:	4938      	ldr	r1, [pc, #224]	; (124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>)
    116c:	f7ff faae 	bl	6cc <__aeabi_ddiv>
    1170:	f04f 0a03 	mov.w	sl, #3
    1174:	4604      	mov	r4, r0
    1176:	460d      	mov	r5, r1
    1178:	e73e      	b.n	ff8 <atan+0xc0>
    117a:	4b35      	ldr	r3, [pc, #212]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    117c:	4e35      	ldr	r6, [pc, #212]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    117e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    1182:	e9d3 2300 	ldrd	r2, r3, [r3]
    1186:	f7fe ffbf 	bl	108 <__aeabi_dsub>
    118a:	4622      	mov	r2, r4
    118c:	462b      	mov	r3, r5
    118e:	f7fe ffbb 	bl	108 <__aeabi_dsub>
    1192:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    1196:	4602      	mov	r2, r0
    1198:	460b      	mov	r3, r1
    119a:	e9d6 0100 	ldrd	r0, r1, [r6]
    119e:	f7fe ffb3 	bl	108 <__aeabi_dsub>
    11a2:	f1bb 0f00 	cmp.w	fp, #0
    11a6:	4604      	mov	r4, r0
    11a8:	460d      	mov	r5, r1
    11aa:	f6bf aee4 	bge.w	f76 <atan+0x3e>
    11ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    11b2:	461d      	mov	r5, r3
    11b4:	e6df      	b.n	f76 <atan+0x3e>
    11b6:	a51c      	add	r5, pc, #112	; (adr r5, 1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>)
    11b8:	e9d5 4500 	ldrd	r4, r5, [r5]
    11bc:	e6db      	b.n	f76 <atan+0x3e>
    11be:	bf00      	nop
    11c0:	54442d18 	.word	0x54442d18
    11c4:	3ff921fb 	.word	0x3ff921fb
    11c8:	8800759c 	.word	0x8800759c
    11cc:	7e37e43c 	.word	0x7e37e43c
    11d0:	e322da11 	.word	0xe322da11
    11d4:	3f90ad3a 	.word	0x3f90ad3a
    11d8:	24760deb 	.word	0x24760deb
    11dc:	3fa97b4b 	.word	0x3fa97b4b
    11e0:	a0d03d51 	.word	0xa0d03d51
    11e4:	3fb10d66 	.word	0x3fb10d66
    11e8:	c54c206e 	.word	0xc54c206e
    11ec:	3fb745cd 	.word	0x3fb745cd
    11f0:	920083ff 	.word	0x920083ff
    11f4:	3fc24924 	.word	0x3fc24924
    11f8:	5555550d 	.word	0x5555550d
    11fc:	3fd55555 	.word	0x3fd55555
    1200:	2c6a6c2f 	.word	0x2c6a6c2f
    1204:	bfa2b444 	.word	0xbfa2b444
    1208:	52defd9a 	.word	0x52defd9a
    120c:	3fadde2d 	.word	0x3fadde2d
    1210:	af749a6d 	.word	0xaf749a6d
    1214:	3fb3b0f2 	.word	0x3fb3b0f2
    1218:	fe231671 	.word	0xfe231671
    121c:	3fbc71c6 	.word	0x3fbc71c6
    1220:	9998ebc4 	.word	0x9998ebc4
    1224:	3fc99999 	.word	0x3fc99999
    1228:	54442d18 	.word	0x54442d18
    122c:	bff921fb 	.word	0xbff921fb
    1230:	440fffff 	.word	0x440fffff
    1234:	7ff00000 	.word	0x7ff00000
    1238:	3fdbffff 	.word	0x3fdbffff
    123c:	3ff00000 	.word	0x3ff00000
    1240:	3ff2ffff 	.word	0x3ff2ffff
    1244:	40038000 	.word	0x40038000
    1248:	3ff80000 	.word	0x3ff80000
    124c:	bff00000 	.word	0xbff00000
    1250:	0000a528 	.word	0x0000a528
    1254:	0000a548 	.word	0x0000a548

00001258 <thread_OBSC_code>:
		/* Periodicity of task */
		k_msleep(5000);
	}
}
/* Non-real time task */
void thread_OBSC_code(void *argA , void *argB, void *argC){
    1258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    125c:	4e14      	ldr	r6, [pc, #80]	; (12b0 <thread_OBSC_code+0x58>)
	uint16_t wc_exec_time = 10000;
	uint16_t obs;
	
	while(k_sem_take(&sem_OAP,  K_FOREVER)){
		start = k_uptime_get();
		obs = obstCount(buffer);
    125e:	4f15      	ldr	r7, [pc, #84]	; (12b4 <thread_OBSC_code+0x5c>)
		end = k_uptime_get();
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
		printk("Number of obstacles -> %4u\n", obs);
    1260:	f8df 8054 	ldr.w	r8, [pc, #84]	; 12b8 <thread_OBSC_code+0x60>
	uint16_t wc_exec_time = 10000;
    1264:	f242 7410 	movw	r4, #10000	; 0x2710
    1268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1270:	4630      	mov	r0, r6
    1272:	f006 f9a3 	bl	75bc <z_impl_k_sem_take>
	while(k_sem_take(&sem_OAP,  K_FOREVER)){
    1276:	b908      	cbnz	r0, 127c <thread_OBSC_code+0x24>
		printk("Ci -> %4u\n", wc_exec_time);
	}
	
}
    1278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		start = k_uptime_get();
    127c:	f008 f929 	bl	94d2 <k_uptime_get>
    1280:	fa1f f980 	uxth.w	r9, r0
		obs = obstCount(buffer);
    1284:	4638      	mov	r0, r7
    1286:	f008 ff59 	bl	a13c <obstCount>
    128a:	4605      	mov	r5, r0
		end = k_uptime_get();
    128c:	f008 f921 	bl	94d2 <k_uptime_get>
    1290:	b283      	uxth	r3, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
    1292:	eba3 0309 	sub.w	r3, r3, r9
    1296:	429c      	cmp	r4, r3
    1298:	bfc8      	it	gt
    129a:	b29c      	uxthgt	r4, r3
		printk("Number of obstacles -> %4u\n", obs);
    129c:	4629      	mov	r1, r5
    129e:	4640      	mov	r0, r8
    12a0:	f008 f97d 	bl	959e <printk>
		printk("Ci -> %4u\n", wc_exec_time);
    12a4:	4805      	ldr	r0, [pc, #20]	; (12bc <thread_OBSC_code+0x64>)
    12a6:	4621      	mov	r1, r4
    12a8:	f008 f979 	bl	959e <printk>
    12ac:	e7dc      	b.n	1268 <thread_OBSC_code+0x10>
    12ae:	bf00      	nop
    12b0:	200044e8 	.word	0x200044e8
    12b4:	20000144 	.word	0x20000144
    12b8:	0000a7fc 	.word	0x0000a7fc
    12bc:	0000a842 	.word	0x0000a842

000012c0 <thread_NOD_code>:
void thread_NOD_code(void *argA , void *argB, void *argC){
    12c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		printk("Thread NOD released\n");
    12c4:	4f12      	ldr	r7, [pc, #72]	; (1310 <thread_NOD_code+0x50>)
		flag = nearObstSearch(buffer);
    12c6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1314 <thread_NOD_code+0x54>
		printk("Near obstacle -> %4u\nCi -> %4u\n", flag, wc_exec_time);
    12ca:	4e13      	ldr	r6, [pc, #76]	; (1318 <thread_NOD_code+0x58>)
	uint16_t wc_exec_time = 10000;
    12cc:	f242 7510 	movw	r5, #10000	; 0x2710
		start = k_uptime_get();
    12d0:	f008 f8ff 	bl	94d2 <k_uptime_get>
    12d4:	fa1f f980 	uxth.w	r9, r0
		printk("Thread NOD released\n");
    12d8:	4638      	mov	r0, r7
    12da:	f008 f960 	bl	959e <printk>
		flag = nearObstSearch(buffer);
    12de:	4640      	mov	r0, r8
    12e0:	f008 ff16 	bl	a110 <nearObstSearch>
    12e4:	4604      	mov	r4, r0
		end = k_uptime_get();
    12e6:	f008 f8f4 	bl	94d2 <k_uptime_get>
    12ea:	b283      	uxth	r3, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
    12ec:	eba3 0309 	sub.w	r3, r3, r9
    12f0:	429d      	cmp	r5, r3
    12f2:	bfc8      	it	gt
    12f4:	b29d      	uxthgt	r5, r3
		printk("Near obstacle -> %4u\nCi -> %4u\n", flag, wc_exec_time);
    12f6:	462a      	mov	r2, r5
    12f8:	4621      	mov	r1, r4
    12fa:	4630      	mov	r0, r6
    12fc:	f008 f94f 	bl	959e <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1300:	4806      	ldr	r0, [pc, #24]	; (131c <thread_NOD_code+0x5c>)
    1302:	f006 f91d 	bl	7540 <z_impl_k_sem_give>
		k_msleep(5000);
    1306:	f241 3088 	movw	r0, #5000	; 0x1388
    130a:	f008 f8f0 	bl	94ee <k_msleep.isra.0>
		start = k_uptime_get();
    130e:	e7df      	b.n	12d0 <thread_NOD_code+0x10>
    1310:	0000a818 	.word	0x0000a818
    1314:	20000144 	.word	0x20000144
    1318:	0000a82d 	.word	0x0000a82d
    131c:	200044e8 	.word	0x200044e8

00001320 <thread_OAP_code>:
/* Soft real-time task, being executed at a second priority level. */
void thread_OAP_code(void *argA , void *argB, void *argC){
    1320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    1324:	4e1c      	ldr	r6, [pc, #112]	; (1398 <thread_OAP_code+0x78>)
	uint16_t wc_exec_time = 10000;
	
	while(1){
		k_sem_take(&sem_OAP,  K_FOREVER);
		start = k_uptime_get();
		printk("Thread OAP released\n");
    1326:	4f1d      	ldr	r7, [pc, #116]	; (139c <thread_OAP_code+0x7c>)
		guideLineSearch(buffer, &pos, &angle);
    1328:	f8df 8074 	ldr.w	r8, [pc, #116]	; 13a0 <thread_OAP_code+0x80>
	uint16_t wc_exec_time = 10000;
    132c:	f242 7410 	movw	r4, #10000	; 0x2710
    1330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1338:	4630      	mov	r0, r6
    133a:	f006 f93f 	bl	75bc <z_impl_k_sem_take>
		start = k_uptime_get();
    133e:	f008 f8c8 	bl	94d2 <k_uptime_get>
    1342:	b285      	uxth	r5, r0
		printk("Thread OAP released\n");
    1344:	4638      	mov	r0, r7
    1346:	f008 f92a 	bl	959e <printk>
		guideLineSearch(buffer, &pos, &angle);
    134a:	aa01      	add	r2, sp, #4
    134c:	f10d 0102 	add.w	r1, sp, #2
    1350:	4640      	mov	r0, r8
    1352:	f7ff fced 	bl	d30 <guideLineSearch>
		end = k_uptime_get();
    1356:	f008 f8bc 	bl	94d2 <k_uptime_get>
    135a:	b280      	uxth	r0, r0
		if(wc_exec_time > (end-start)) wc_exec_time = (end - start);
    135c:	1b40      	subs	r0, r0, r5
    135e:	4284      	cmp	r4, r0
    1360:	bfc8      	it	gt
    1362:	b284      	uxthgt	r4, r0
		printk("Angle (Radians): %f\n", angle);
    1364:	9801      	ldr	r0, [sp, #4]
    1366:	f7ff f82f 	bl	3c8 <__aeabi_f2d>
    136a:	4602      	mov	r2, r0
    136c:	460b      	mov	r3, r1
    136e:	480d      	ldr	r0, [pc, #52]	; (13a4 <thread_OAP_code+0x84>)
    1370:	f008 f915 	bl	959e <printk>
    	printk("Position (Percentage): %d%%\n", pos);
    1374:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1378:	480b      	ldr	r0, [pc, #44]	; (13a8 <thread_OAP_code+0x88>)
    137a:	f008 f910 	bl	959e <printk>
		printk("Ci -> %4u\n", wc_exec_time);
    137e:	480b      	ldr	r0, [pc, #44]	; (13ac <thread_OAP_code+0x8c>)
    1380:	4621      	mov	r1, r4
    1382:	f008 f90c 	bl	959e <printk>
	z_impl_k_sem_give(sem);
    1386:	4630      	mov	r0, r6
    1388:	f006 f8da 	bl	7540 <z_impl_k_sem_give>
		k_sem_give(&sem_OAP);
		/* Periodicity of task */
		k_msleep(5000);
    138c:	f241 3088 	movw	r0, #5000	; 0x1388
    1390:	f008 f8ad 	bl	94ee <k_msleep.isra.0>
	while(1){
    1394:	e7cc      	b.n	1330 <thread_OAP_code+0x10>
    1396:	bf00      	nop
    1398:	200044e8 	.word	0x200044e8
    139c:	0000a84d 	.word	0x0000a84d
    13a0:	20000144 	.word	0x20000144
    13a4:	0000a862 	.word	0x0000a862
    13a8:	0000a877 	.word	0x0000a877
    13ac:	0000a842 	.word	0x0000a842

000013b0 <main>:
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13b2:	b08f      	sub	sp, #60	; 0x3c
	uint16_t first[3] = {5, 5, 5};
    13b4:	f04f 1305 	mov.w	r3, #327685	; 0x50005
    13b8:	930c      	str	r3, [sp, #48]	; 0x30
    13ba:	2305      	movs	r3, #5
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    13bc:	2400      	movs	r4, #0
	uint16_t first[3] = {5, 5, 5};
    13be:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	cab_id = open_cab("CAB", 3, 2, first);
    13c2:	2202      	movs	r2, #2
    13c4:	ab0c      	add	r3, sp, #48	; 0x30
    13c6:	2103      	movs	r1, #3
    13c8:	482a      	ldr	r0, [pc, #168]	; (1474 <main+0xc4>)
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    13ca:	940b      	str	r4, [sp, #44]	; 0x2c
    13cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	cab_id = open_cab("CAB", 3, 2, first);
    13d0:	f008 fe74 	bl	a0bc <open_cab>
    13d4:	4b28      	ldr	r3, [pc, #160]	; (1478 <main+0xc8>)
    13d6:	6018      	str	r0, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    13d8:	2202      	movs	r2, #2
    13da:	4621      	mov	r1, r4
    13dc:	4827      	ldr	r0, [pc, #156]	; (147c <main+0xcc>)
    13de:	f008 fe13 	bl	a008 <z_impl_k_sem_init>
	thread_NOD_tid = k_thread_create(&thread_NOD_data, thread_NOD_stack,
    13e2:	2600      	movs	r6, #0
    13e4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    13e6:	2302      	movs	r3, #2
    13e8:	9303      	str	r3, [sp, #12]
    13ea:	ab0b      	add	r3, sp, #44	; 0x2c
    13ec:	9302      	str	r3, [sp, #8]
    13ee:	ab0a      	add	r3, sp, #40	; 0x28
    13f0:	9301      	str	r3, [sp, #4]
    13f2:	ab09      	add	r3, sp, #36	; 0x24
    13f4:	9300      	str	r3, [sp, #0]
    13f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    13fa:	4b21      	ldr	r3, [pc, #132]	; (1480 <main+0xd0>)
    13fc:	4921      	ldr	r1, [pc, #132]	; (1484 <main+0xd4>)
    13fe:	9404      	str	r4, [sp, #16]
    1400:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1404:	4820      	ldr	r0, [pc, #128]	; (1488 <main+0xd8>)
    1406:	f005 fdad 	bl	6f64 <z_impl_k_thread_create>
    140a:	4b20      	ldr	r3, [pc, #128]	; (148c <main+0xdc>)
    140c:	6018      	str	r0, [r3, #0]
    140e:	2501      	movs	r5, #1
    1410:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1414:	e9cd 4502 	strd	r4, r5, [sp, #8]
    1418:	e9cd 4400 	strd	r4, r4, [sp]
    141c:	4b1c      	ldr	r3, [pc, #112]	; (1490 <main+0xe0>)
    141e:	491d      	ldr	r1, [pc, #116]	; (1494 <main+0xe4>)
    1420:	9404      	str	r4, [sp, #16]
    1422:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1426:	481c      	ldr	r0, [pc, #112]	; (1498 <main+0xe8>)
    1428:	f005 fd9c 	bl	6f64 <z_impl_k_thread_create>
	thread_OBSC_tid = k_thread_create(&thread_OBSC_data, thread_OBSC_stack,
    142c:	4b1b      	ldr	r3, [pc, #108]	; (149c <main+0xec>)
    142e:	6018      	str	r0, [r3, #0]
    1430:	4b1b      	ldr	r3, [pc, #108]	; (14a0 <main+0xf0>)
    1432:	491c      	ldr	r1, [pc, #112]	; (14a4 <main+0xf4>)
    1434:	9400      	str	r4, [sp, #0]
    1436:	e9cd 6706 	strd	r6, r7, [sp, #24]
    143a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    143e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1442:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1446:	4818      	ldr	r0, [pc, #96]	; (14a8 <main+0xf8>)
    1448:	f005 fd8c 	bl	6f64 <z_impl_k_thread_create>
	thread_OAP_tid = k_thread_create(&thread_OAP_data, thread_OAP_stack,
    144c:	4b17      	ldr	r3, [pc, #92]	; (14ac <main+0xfc>)
    144e:	6018      	str	r0, [r3, #0]
    1450:	4b17      	ldr	r3, [pc, #92]	; (14b0 <main+0x100>)
    1452:	4918      	ldr	r1, [pc, #96]	; (14b4 <main+0x104>)
    1454:	9400      	str	r4, [sp, #0]
    1456:	e9cd 6706 	strd	r6, r7, [sp, #24]
    145a:	e9cd 5403 	strd	r5, r4, [sp, #12]
    145e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1462:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1466:	4814      	ldr	r0, [pc, #80]	; (14b8 <main+0x108>)
    1468:	f005 fd7c 	bl	6f64 <z_impl_k_thread_create>
	thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
    146c:	4b13      	ldr	r3, [pc, #76]	; (14bc <main+0x10c>)
    146e:	6018      	str	r0, [r3, #0]
}
    1470:	b00f      	add	sp, #60	; 0x3c
    1472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1474:	0000a894 	.word	0x0000a894
    1478:	200044f8 	.word	0x200044f8
    147c:	200044e8 	.word	0x200044e8
    1480:	000012c1 	.word	0x000012c1
    1484:	20005ea0 	.word	0x20005ea0
    1488:	20004340 	.word	0x20004340
    148c:	20004508 	.word	0x20004508
    1490:	00001259 	.word	0x00001259
    1494:	20005a80 	.word	0x20005a80
    1498:	200042c0 	.word	0x200042c0
    149c:	20004504 	.word	0x20004504
    14a0:	00001321 	.word	0x00001321
    14a4:	20005660 	.word	0x20005660
    14a8:	20004240 	.word	0x20004240
    14ac:	20004500 	.word	0x20004500
    14b0:	0000950f 	.word	0x0000950f
    14b4:	20005240 	.word	0x20005240
    14b8:	200041c0 	.word	0x200041c0
    14bc:	200044fc 	.word	0x200044fc

000014c0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    14c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14c4:	b08d      	sub	sp, #52	; 0x34
    14c6:	461f      	mov	r7, r3
    14c8:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    14ca:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    14ce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    14d2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    14d4:	1c53      	adds	r3, r2, #1
    14d6:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    14d8:	0783      	lsls	r3, r0, #30
    14da:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    14de:	4605      	mov	r5, r0
    14e0:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    14e2:	f040 8228 	bne.w	1936 <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    14e6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    14e8:	b130      	cbz	r0, 14f8 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    14ea:	2907      	cmp	r1, #7
    14ec:	d809      	bhi.n	1502 <cbvprintf_package+0x42>
		return -ENOSPC;
    14ee:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    14f2:	b00d      	add	sp, #52	; 0x34
    14f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    14f8:	f001 0607 	and.w	r6, r1, #7
    14fc:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    14fe:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1502:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    1506:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    150a:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    150c:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1510:	4652      	mov	r2, sl
	bool parsing = false;
    1512:	4651      	mov	r1, sl
	size = sizeof(char *);
    1514:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    1516:	b105      	cbz	r5, 151a <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    1518:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    151a:	9804      	ldr	r0, [sp, #16]
    151c:	2800      	cmp	r0, #0
    151e:	f300 812a 	bgt.w	1776 <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1522:	48bc      	ldr	r0, [pc, #752]	; (1814 <cbvprintf_package+0x354>)
    1524:	4287      	cmp	r7, r0
    1526:	d303      	bcc.n	1530 <cbvprintf_package+0x70>
    1528:	48bb      	ldr	r0, [pc, #748]	; (1818 <cbvprintf_package+0x358>)
    152a:	4287      	cmp	r7, r0
    152c:	f0c0 8123 	bcc.w	1776 <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1530:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1534:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1538:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    153c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1540:	f000 8137 	beq.w	17b2 <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1544:	f04f 0c00 	mov.w	ip, #0
    1548:	e11e      	b.n	1788 <cbvprintf_package+0x2c8>
		if (!parsing) {
    154a:	b931      	cbnz	r1, 155a <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    154c:	2825      	cmp	r0, #37	; 0x25
    154e:	d116      	bne.n	157e <cbvprintf_package+0xbe>
				parsing = true;
    1550:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    1552:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    1556:	46cb      	mov	fp, r9
    1558:	e011      	b.n	157e <cbvprintf_package+0xbe>
		switch (*fmt) {
    155a:	286c      	cmp	r0, #108	; 0x6c
    155c:	f200 809f 	bhi.w	169e <cbvprintf_package+0x1de>
    1560:	284b      	cmp	r0, #75	; 0x4b
    1562:	d822      	bhi.n	15aa <cbvprintf_package+0xea>
    1564:	2847      	cmp	r0, #71	; 0x47
    1566:	f200 80b1 	bhi.w	16cc <cbvprintf_package+0x20c>
    156a:	2829      	cmp	r0, #41	; 0x29
    156c:	d86a      	bhi.n	1644 <cbvprintf_package+0x184>
    156e:	2820      	cmp	r0, #32
    1570:	d005      	beq.n	157e <cbvprintf_package+0xbe>
    1572:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    1576:	f1dc 0100 	rsbs	r1, ip, #0
    157a:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    157e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1582:	2800      	cmp	r0, #0
    1584:	d1e1      	bne.n	154a <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1586:	1b61      	subs	r1, r4, r5
    1588:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    158c:	f0c0 8173 	bcc.w	1876 <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    1590:	49a2      	ldr	r1, [pc, #648]	; (181c <cbvprintf_package+0x35c>)
    1592:	4aa3      	ldr	r2, [pc, #652]	; (1820 <cbvprintf_package+0x360>)
    1594:	48a3      	ldr	r0, [pc, #652]	; (1824 <cbvprintf_package+0x364>)
    1596:	f240 233d 	movw	r3, #573	; 0x23d
    159a:	f008 f97c 	bl	9896 <assert_print>
    159e:	48a2      	ldr	r0, [pc, #648]	; (1828 <cbvprintf_package+0x368>)
    15a0:	f008 f979 	bl	9896 <assert_print>
    15a4:	f240 213d 	movw	r1, #573	; 0x23d
    15a8:	e0fd      	b.n	17a6 <cbvprintf_package+0x2e6>
		switch (*fmt) {
    15aa:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    15ae:	f1bc 0f20 	cmp.w	ip, #32
    15b2:	f200 808b 	bhi.w	16cc <cbvprintf_package+0x20c>
    15b6:	f20f 0e08 	addw	lr, pc, #8
    15ba:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    15be:	bf00      	nop
    15c0:	0000157f 	.word	0x0000157f
    15c4:	000016cd 	.word	0x000016cd
    15c8:	000016cd 	.word	0x000016cd
    15cc:	000016cd 	.word	0x000016cd
    15d0:	000016cd 	.word	0x000016cd
    15d4:	000016cd 	.word	0x000016cd
    15d8:	000016cd 	.word	0x000016cd
    15dc:	000016cd 	.word	0x000016cd
    15e0:	000016cd 	.word	0x000016cd
    15e4:	000016cd 	.word	0x000016cd
    15e8:	000016cd 	.word	0x000016cd
    15ec:	000016cd 	.word	0x000016cd
    15f0:	000016d1 	.word	0x000016d1
    15f4:	000016cd 	.word	0x000016cd
    15f8:	000016cd 	.word	0x000016cd
    15fc:	000016cd 	.word	0x000016cd
    1600:	000016cd 	.word	0x000016cd
    1604:	000016cd 	.word	0x000016cd
    1608:	000016cd 	.word	0x000016cd
    160c:	000016cd 	.word	0x000016cd
    1610:	000016cd 	.word	0x000016cd
    1614:	000016ed 	.word	0x000016ed
    1618:	000016cd 	.word	0x000016cd
    161c:	000016d1 	.word	0x000016d1
    1620:	000016d1 	.word	0x000016d1
    1624:	000016ed 	.word	0x000016ed
    1628:	000016ed 	.word	0x000016ed
    162c:	000016ed 	.word	0x000016ed
    1630:	0000157f 	.word	0x0000157f
    1634:	000016d1 	.word	0x000016d1
    1638:	00001715 	.word	0x00001715
    163c:	000016cd 	.word	0x000016cd
    1640:	0000157f 	.word	0x0000157f
    1644:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1648:	f04f 0e01 	mov.w	lr, #1
    164c:	fa5f fc8c 	uxtb.w	ip, ip
    1650:	fa0e fc0c 	lsl.w	ip, lr, ip
    1654:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1658:	ea1c 0f0e 	tst.w	ip, lr
    165c:	d18f      	bne.n	157e <cbvprintf_package+0xbe>
    165e:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    1662:	d143      	bne.n	16ec <cbvprintf_package+0x22c>
    1664:	f01c 0101 	ands.w	r1, ip, #1
    1668:	d089      	beq.n	157e <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    166a:	3c01      	subs	r4, #1
    166c:	444c      	add	r4, r9
    166e:	f1c9 0c00 	rsb	ip, r9, #0
    1672:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1676:	2d00      	cmp	r5, #0
    1678:	d065      	beq.n	1746 <cbvprintf_package+0x286>
    167a:	ebab 0c05 	sub.w	ip, fp, r5
    167e:	44a4      	add	ip, r4
    1680:	4566      	cmp	r6, ip
    1682:	f4ff af34 	bcc.w	14ee <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    1686:	2873      	cmp	r0, #115	; 0x73
    1688:	d06f      	beq.n	176a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    168a:	f1bb 0f04 	cmp.w	fp, #4
    168e:	d14a      	bne.n	1726 <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    1690:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    1694:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    1696:	3404      	adds	r4, #4
    1698:	f04f 0b04 	mov.w	fp, #4
    169c:	e76f      	b.n	157e <cbvprintf_package+0xbe>
		switch (*fmt) {
    169e:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    16a2:	fa5f fc8c 	uxtb.w	ip, ip
    16a6:	f1bc 0f0c 	cmp.w	ip, #12
    16aa:	d80f      	bhi.n	16cc <cbvprintf_package+0x20c>
    16ac:	f04f 0e01 	mov.w	lr, #1
    16b0:	fa0e fc0c 	lsl.w	ip, lr, ip
    16b4:	f01c 0f25 	tst.w	ip, #37	; 0x25
    16b8:	d12f      	bne.n	171a <cbvprintf_package+0x25a>
    16ba:	f240 4e82 	movw	lr, #1154	; 0x482
    16be:	ea1c 0f0e 	tst.w	ip, lr
    16c2:	d105      	bne.n	16d0 <cbvprintf_package+0x210>
    16c4:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    16c8:	f47f af43 	bne.w	1552 <cbvprintf_package+0x92>
			parsing = false;
    16cc:	2100      	movs	r1, #0
    16ce:	e756      	b.n	157e <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    16d0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    16d4:	296c      	cmp	r1, #108	; 0x6c
    16d6:	d124      	bne.n	1722 <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    16d8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    16dc:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    16de:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    16e2:	d11b      	bne.n	171c <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    16e4:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    16e8:	46cb      	mov	fp, r9
    16ea:	e7be      	b.n	166a <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    16ec:	f108 0807 	add.w	r8, r8, #7
    16f0:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    16f4:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    16f6:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    16fa:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    16fe:	b13d      	cbz	r5, 1710 <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    1700:	f8dd e014 	ldr.w	lr, [sp, #20]
    1704:	44a6      	add	lr, r4
    1706:	45b6      	cmp	lr, r6
    1708:	f63f aef1 	bhi.w	14ee <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    170c:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1710:	3408      	adds	r4, #8
			parsing = false;
    1712:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1714:	f04f 0908 	mov.w	r9, #8
    1718:	e71d      	b.n	1556 <cbvprintf_package+0x96>
			parsing = false;
    171a:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    171c:	f04f 0904 	mov.w	r9, #4
    1720:	e7e2      	b.n	16e8 <cbvprintf_package+0x228>
			parsing = false;
    1722:	2100      	movs	r1, #0
    1724:	e7a1      	b.n	166a <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    1726:	f1bb 0f08 	cmp.w	fp, #8
    172a:	f040 8096 	bne.w	185a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    172e:	f108 0807 	add.w	r8, r8, #7
    1732:	f028 0807 	bic.w	r8, r8, #7
    1736:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    173a:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    173e:	3408      	adds	r4, #8
    1740:	f04f 0b08 	mov.w	fp, #8
    1744:	e71b      	b.n	157e <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    1746:	2873      	cmp	r0, #115	; 0x73
    1748:	d00f      	beq.n	176a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    174a:	f1bb 0f04 	cmp.w	fp, #4
    174e:	d102      	bne.n	1756 <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    1750:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1754:	e79f      	b.n	1696 <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    1756:	f1bb 0f08 	cmp.w	fp, #8
    175a:	d17e      	bne.n	185a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    175c:	f108 0807 	add.w	r8, r8, #7
    1760:	f028 0807 	bic.w	r8, r8, #7
    1764:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1768:	e7e9      	b.n	173e <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    176a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    176c:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1770:	3801      	subs	r0, #1
    1772:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    1774:	e6cf      	b.n	1516 <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    1776:	9802      	ldr	r0, [sp, #8]
    1778:	0780      	lsls	r0, r0, #30
    177a:	d546      	bpl.n	180a <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    177c:	eba4 0e05 	sub.w	lr, r4, r5
    1780:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1784:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1788:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    178c:	d31f      	bcc.n	17ce <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    178e:	4923      	ldr	r1, [pc, #140]	; (181c <cbvprintf_package+0x35c>)
    1790:	4a23      	ldr	r2, [pc, #140]	; (1820 <cbvprintf_package+0x360>)
    1792:	4824      	ldr	r0, [pc, #144]	; (1824 <cbvprintf_package+0x364>)
    1794:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1798:	f008 f87d 	bl	9896 <assert_print>
    179c:	4823      	ldr	r0, [pc, #140]	; (182c <cbvprintf_package+0x36c>)
    179e:	f008 f87a 	bl	9896 <assert_print>
    17a2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    17a6:	481e      	ldr	r0, [pc, #120]	; (1820 <cbvprintf_package+0x360>)
    17a8:	f008 f86e 	bl	9888 <assert_post_action>
					return -EINVAL;
    17ac:	f06f 0015 	mvn.w	r0, #21
    17b0:	e69f      	b.n	14f2 <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    17b2:	2a0f      	cmp	r2, #15
    17b4:	d80d      	bhi.n	17d2 <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    17b6:	2d00      	cmp	r5, #0
    17b8:	d03f      	beq.n	183a <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    17ba:	b2c0      	uxtb	r0, r0
    17bc:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    17c0:	44ec      	add	ip, sp
    17c2:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    17c6:	9803      	ldr	r0, [sp, #12]
    17c8:	3001      	adds	r0, #1
    17ca:	9003      	str	r0, [sp, #12]
    17cc:	e01c      	b.n	1808 <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    17ce:	2a0f      	cmp	r2, #15
    17d0:	d90c      	bls.n	17ec <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    17d2:	4912      	ldr	r1, [pc, #72]	; (181c <cbvprintf_package+0x35c>)
    17d4:	4a12      	ldr	r2, [pc, #72]	; (1820 <cbvprintf_package+0x360>)
    17d6:	4813      	ldr	r0, [pc, #76]	; (1824 <cbvprintf_package+0x364>)
    17d8:	f240 13f5 	movw	r3, #501	; 0x1f5
    17dc:	f008 f85b 	bl	9896 <assert_print>
    17e0:	4813      	ldr	r0, [pc, #76]	; (1830 <cbvprintf_package+0x370>)
    17e2:	f008 f858 	bl	9896 <assert_print>
    17e6:	f240 11f5 	movw	r1, #501	; 0x1f5
    17ea:	e7dc      	b.n	17a6 <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    17ec:	b315      	cbz	r5, 1834 <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    17ee:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    17f0:	f1bc 0f00 	cmp.w	ip, #0
    17f4:	d0e2      	beq.n	17bc <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    17f6:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    17fa:	44ec      	add	ip, sp
    17fc:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1800:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    1804:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    1808:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    180a:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    180e:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1810:	9005      	str	r0, [sp, #20]
    1812:	e6b4      	b.n	157e <cbvprintf_package+0xbe>
    1814:	0000a1ec 	.word	0x0000a1ec
    1818:	0000c330 	.word	0x0000c330
    181c:	0000c14d 	.word	0x0000c14d
    1820:	0000a898 	.word	0x0000a898
    1824:	0000a8c6 	.word	0x0000a8c6
    1828:	0000a933 	.word	0x0000a933
    182c:	0000a8e3 	.word	0x0000a8e3
    1830:	0000a904 	.word	0x0000a904
				} else if (is_ro || rws_pos_en) {
    1834:	f1bc 0f00 	cmp.w	ip, #0
    1838:	d101      	bne.n	183e <cbvprintf_package+0x37e>
    183a:	9801      	ldr	r0, [sp, #4]
    183c:	b108      	cbz	r0, 1842 <cbvprintf_package+0x382>
					len += 1;
    183e:	3601      	adds	r6, #1
    1840:	e7e2      	b.n	1808 <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1842:	4638      	mov	r0, r7
    1844:	e9cd 2106 	strd	r2, r1, [sp, #24]
    1848:	9305      	str	r3, [sp, #20]
    184a:	f7ff fa69 	bl	d20 <strlen>
    184e:	3602      	adds	r6, #2
    1850:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    1854:	9b05      	ldr	r3, [sp, #20]
    1856:	4406      	add	r6, r0
    1858:	e7d6      	b.n	1808 <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    185a:	4a38      	ldr	r2, [pc, #224]	; (193c <cbvprintf_package+0x47c>)
    185c:	4938      	ldr	r1, [pc, #224]	; (1940 <cbvprintf_package+0x480>)
    185e:	4839      	ldr	r0, [pc, #228]	; (1944 <cbvprintf_package+0x484>)
    1860:	f240 2331 	movw	r3, #561	; 0x231
    1864:	f008 f817 	bl	9896 <assert_print>
    1868:	4659      	mov	r1, fp
    186a:	4837      	ldr	r0, [pc, #220]	; (1948 <cbvprintf_package+0x488>)
    186c:	f008 f813 	bl	9896 <assert_print>
    1870:	f240 2131 	movw	r1, #561	; 0x231
    1874:	e797      	b.n	17a6 <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    1876:	b91d      	cbnz	r5, 1880 <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1878:	f1a6 0408 	sub.w	r4, r6, #8
    187c:	1860      	adds	r0, r4, r1
    187e:	e638      	b.n	14f2 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    1880:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1882:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    1886:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    188a:	b90b      	cbnz	r3, 1890 <cbvprintf_package+0x3d0>
    188c:	4608      	mov	r0, r1
    188e:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    1890:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    1894:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    1896:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    1898:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    189c:	f1ba 0f00 	cmp.w	sl, #0
    18a0:	d006      	beq.n	18b0 <cbvprintf_package+0x3f0>
    18a2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    18a4:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    18a8:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    18ac:	4562      	cmp	r2, ip
    18ae:	d109      	bne.n	18c4 <cbvprintf_package+0x404>
    18b0:	f10d 0820 	add.w	r8, sp, #32
    18b4:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    18b8:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    18bc:	45c1      	cmp	r9, r8
    18be:	d111      	bne.n	18e4 <cbvprintf_package+0x424>
	return BUF_OFFSET;
    18c0:	1b60      	subs	r0, r4, r5
    18c2:	e616      	b.n	14f2 <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    18c4:	f810 1b01 	ldrb.w	r1, [r0], #1
    18c8:	060b      	lsls	r3, r1, #24
    18ca:	d508      	bpl.n	18de <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    18cc:	eb04 080e 	add.w	r8, r4, lr
    18d0:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    18d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    18d6:	f4ff ae0a 	bcc.w	14ee <cbvprintf_package+0x2e>
			*buf++ = pos;
    18da:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    18de:	f10c 0c01 	add.w	ip, ip, #1
    18e2:	e7e3      	b.n	18ac <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    18e4:	f1ba 0f00 	cmp.w	sl, #0
    18e8:	d003      	beq.n	18f2 <cbvprintf_package+0x432>
    18ea:	f998 2000 	ldrsb.w	r2, [r8]
    18ee:	2a00      	cmp	r2, #0
    18f0:	db1c      	blt.n	192c <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    18f2:	9b01      	ldr	r3, [sp, #4]
    18f4:	b9eb      	cbnz	r3, 1932 <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    18f6:	f898 2000 	ldrb.w	r2, [r8]
    18fa:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    18fe:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1902:	4638      	mov	r0, r7
    1904:	f7ff fa0c 	bl	d20 <strlen>
    1908:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    190a:	eb04 010b 	add.w	r1, r4, fp
    190e:	4411      	add	r1, r2
    1910:	428e      	cmp	r6, r1
    1912:	f4ff adec 	bcc.w	14ee <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1916:	f898 1000 	ldrb.w	r1, [r8]
    191a:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    191e:	4639      	mov	r1, r7
    1920:	4620      	mov	r0, r4
    1922:	9202      	str	r2, [sp, #8]
    1924:	f008 fc32 	bl	a18c <memcpy>
		buf += size;
    1928:	9a02      	ldr	r2, [sp, #8]
    192a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    192c:	f108 0801 	add.w	r8, r8, #1
    1930:	e7c4      	b.n	18bc <cbvprintf_package+0x3fc>
			size = 0;
    1932:	2200      	movs	r2, #0
    1934:	e7e9      	b.n	190a <cbvprintf_package+0x44a>
		return -EFAULT;
    1936:	f06f 000d 	mvn.w	r0, #13
    193a:	e5da      	b.n	14f2 <cbvprintf_package+0x32>
    193c:	0000a898 	.word	0x0000a898
    1940:	0000c14d 	.word	0x0000c14d
    1944:	0000a8c6 	.word	0x0000a8c6
    1948:	0000a91e 	.word	0x0000a91e

0000194c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    194c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    194e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1952:	2b03      	cmp	r3, #3
{
    1954:	b510      	push	{r4, lr}
    1956:	4604      	mov	r4, r0
	notify->result = res;
    1958:	6081      	str	r1, [r0, #8]
	switch (method) {
    195a:	d002      	beq.n	1962 <sys_notify_finalize+0x16>
    195c:	b12b      	cbz	r3, 196a <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    195e:	2000      	movs	r0, #0
    1960:	e000      	b.n	1964 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1962:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1964:	2300      	movs	r3, #0
    1966:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1968:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    196a:	4a05      	ldr	r2, [pc, #20]	; (1980 <sys_notify_finalize+0x34>)
    196c:	4905      	ldr	r1, [pc, #20]	; (1984 <sys_notify_finalize+0x38>)
    196e:	4806      	ldr	r0, [pc, #24]	; (1988 <sys_notify_finalize+0x3c>)
    1970:	2345      	movs	r3, #69	; 0x45
    1972:	f007 ff90 	bl	9896 <assert_print>
    1976:	4802      	ldr	r0, [pc, #8]	; (1980 <sys_notify_finalize+0x34>)
    1978:	2145      	movs	r1, #69	; 0x45
    197a:	f007 ff85 	bl	9888 <assert_post_action>
    197e:	e7ee      	b.n	195e <sys_notify_finalize+0x12>
    1980:	0000a94a 	.word	0x0000a94a
    1984:	0000c14d 	.word	0x0000c14d
    1988:	0000a8c6 	.word	0x0000a8c6

0000198c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    198c:	4b01      	ldr	r3, [pc, #4]	; (1994 <__printk_hook_install+0x8>)
    198e:	6018      	str	r0, [r3, #0]
}
    1990:	4770      	bx	lr
    1992:	bf00      	nop
    1994:	20000000 	.word	0x20000000

00001998 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    199c:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    199e:	072b      	lsls	r3, r5, #28
{
    19a0:	4604      	mov	r4, r0
    19a2:	4691      	mov	r9, r2
	if (processing) {
    19a4:	d469      	bmi.n	1a7a <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    19a6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19a8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    19ac:	f000 81ee 	beq.w	1d8c <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    19b0:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    19b2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19b6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    19b8:	f1b8 0f00 	cmp.w	r8, #0
    19bc:	da7d      	bge.n	1aba <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    19be:	2200      	movs	r2, #0
		*clients = mgr->clients;
    19c0:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19c2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    19c6:	e9c4 2200 	strd	r2, r2, [r4]
    19ca:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    19ce:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19d0:	8ba3      	ldrh	r3, [r4, #28]
    19d2:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    19d6:	4555      	cmp	r5, sl
    19d8:	f04f 0700 	mov.w	r7, #0
    19dc:	f040 81a5 	bne.w	1d2a <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    19e0:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    19e4:	2e00      	cmp	r6, #0
    19e6:	f000 80f2 	beq.w	1bce <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    19ea:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    19ee:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    19f2:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19f4:	4658      	mov	r0, fp
    19f6:	f005 fb9b 	bl	7130 <z_spin_unlock_valid>
    19fa:	b968      	cbnz	r0, 1a18 <process_event+0x80>
    19fc:	4a93      	ldr	r2, [pc, #588]	; (1c4c <process_event+0x2b4>)
    19fe:	4994      	ldr	r1, [pc, #592]	; (1c50 <process_event+0x2b8>)
    1a00:	4894      	ldr	r0, [pc, #592]	; (1c54 <process_event+0x2bc>)
    1a02:	23b9      	movs	r3, #185	; 0xb9
    1a04:	f007 ff47 	bl	9896 <assert_print>
    1a08:	4893      	ldr	r0, [pc, #588]	; (1c58 <process_event+0x2c0>)
    1a0a:	4659      	mov	r1, fp
    1a0c:	f007 ff43 	bl	9896 <assert_print>
    1a10:	488e      	ldr	r0, [pc, #568]	; (1c4c <process_event+0x2b4>)
    1a12:	21b9      	movs	r1, #185	; 0xb9
    1a14:	f007 ff38 	bl	9888 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1a18:	f389 8811 	msr	BASEPRI, r9
    1a1c:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    1a20:	f1ba 0f00 	cmp.w	sl, #0
    1a24:	f040 8188 	bne.w	1d38 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    1a28:	2e00      	cmp	r6, #0
    1a2a:	f040 819e 	bne.w	1d6a <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    1a2e:	b117      	cbz	r7, 1a36 <process_event+0x9e>
				transit(mgr, transition_complete);
    1a30:	498a      	ldr	r1, [pc, #552]	; (1c5c <process_event+0x2c4>)
    1a32:	4620      	mov	r0, r4
    1a34:	47b8      	blx	r7
	__asm__ volatile(
    1a36:	f04f 0320 	mov.w	r3, #32
    1a3a:	f3ef 8911 	mrs	r9, BASEPRI
    1a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    1a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1a46:	4658      	mov	r0, fp
    1a48:	f005 fb64 	bl	7114 <z_spin_lock_valid>
    1a4c:	b968      	cbnz	r0, 1a6a <process_event+0xd2>
    1a4e:	4a7f      	ldr	r2, [pc, #508]	; (1c4c <process_event+0x2b4>)
    1a50:	4983      	ldr	r1, [pc, #524]	; (1c60 <process_event+0x2c8>)
    1a52:	4880      	ldr	r0, [pc, #512]	; (1c54 <process_event+0x2bc>)
    1a54:	238e      	movs	r3, #142	; 0x8e
    1a56:	f007 ff1e 	bl	9896 <assert_print>
    1a5a:	4882      	ldr	r0, [pc, #520]	; (1c64 <process_event+0x2cc>)
    1a5c:	4659      	mov	r1, fp
    1a5e:	f007 ff1a 	bl	9896 <assert_print>
    1a62:	487a      	ldr	r0, [pc, #488]	; (1c4c <process_event+0x2b4>)
    1a64:	218e      	movs	r1, #142	; 0x8e
    1a66:	f007 ff0f 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    1a6a:	4658      	mov	r0, fp
    1a6c:	f005 fb70 	bl	7150 <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1a70:	8ba3      	ldrh	r3, [r4, #28]
    1a72:	f023 0308 	bic.w	r3, r3, #8
    1a76:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    1a78:	e05a      	b.n	1b30 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    1a7a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1a7c:	bf0c      	ite	eq
    1a7e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a82:	f045 0520 	orrne.w	r5, r5, #32
    1a86:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1a88:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1a8a:	4620      	mov	r0, r4
    1a8c:	f005 fb50 	bl	7130 <z_spin_unlock_valid>
    1a90:	b968      	cbnz	r0, 1aae <process_event+0x116>
    1a92:	4a6e      	ldr	r2, [pc, #440]	; (1c4c <process_event+0x2b4>)
    1a94:	496e      	ldr	r1, [pc, #440]	; (1c50 <process_event+0x2b8>)
    1a96:	486f      	ldr	r0, [pc, #444]	; (1c54 <process_event+0x2bc>)
    1a98:	23b9      	movs	r3, #185	; 0xb9
    1a9a:	f007 fefc 	bl	9896 <assert_print>
    1a9e:	486e      	ldr	r0, [pc, #440]	; (1c58 <process_event+0x2c0>)
    1aa0:	4621      	mov	r1, r4
    1aa2:	f007 fef8 	bl	9896 <assert_print>
    1aa6:	4869      	ldr	r0, [pc, #420]	; (1c4c <process_event+0x2b4>)
    1aa8:	21b9      	movs	r1, #185	; 0xb9
    1aaa:	f007 feed 	bl	9888 <assert_post_action>
	__asm__ volatile(
    1aae:	f389 8811 	msr	BASEPRI, r9
    1ab2:	f3bf 8f6f 	isb	sy
}
    1ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aba:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1abe:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1ac0:	2901      	cmp	r1, #1
    1ac2:	d820      	bhi.n	1b06 <process_event+0x16e>
	list->head = NULL;
    1ac4:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    1ac6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1ac8:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    1aca:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1ace:	d116      	bne.n	1afe <process_event+0x166>
		*clients = mgr->clients;
    1ad0:	4632      	mov	r2, r6
    1ad2:	e003      	b.n	1adc <process_event+0x144>
				mgr->refs += 1U;
    1ad4:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1ad6:	6812      	ldr	r2, [r2, #0]
    1ad8:	3101      	adds	r1, #1
    1ada:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1adc:	2a00      	cmp	r2, #0
    1ade:	d1f9      	bne.n	1ad4 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ae0:	f023 0307 	bic.w	r3, r3, #7
    1ae4:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ae8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1aea:	4620      	mov	r0, r4
    1aec:	f007 fd64 	bl	95b8 <process_recheck>
    1af0:	2800      	cmp	r0, #0
    1af2:	f43f af6d 	beq.w	19d0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1af6:	f042 0220 	orr.w	r2, r2, #32
    1afa:	83a2      	strh	r2, [r4, #28]
    1afc:	e768      	b.n	19d0 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1afe:	f023 0307 	bic.w	r3, r3, #7
    1b02:	b29a      	uxth	r2, r3
}
    1b04:	e7f0      	b.n	1ae8 <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1b06:	2a04      	cmp	r2, #4
    1b08:	d11e      	bne.n	1b48 <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b0a:	f023 0307 	bic.w	r3, r3, #7
    1b0e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b10:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1b12:	4620      	mov	r0, r4
    1b14:	f007 fd50 	bl	95b8 <process_recheck>
    1b18:	b110      	cbz	r0, 1b20 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b1a:	f042 0220 	orr.w	r2, r2, #32
    1b1e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b20:	8ba3      	ldrh	r3, [r4, #28]
    1b22:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    1b26:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    1b28:	4555      	cmp	r5, sl
    1b2a:	463e      	mov	r6, r7
    1b2c:	f040 80fd 	bne.w	1d2a <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1b30:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    1b34:	f01a 0f10 	tst.w	sl, #16
    1b38:	f000 811f 	beq.w	1d7a <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1b3c:	f02a 0310 	bic.w	r3, sl, #16
    1b40:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1b42:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    1b46:	e734      	b.n	19b2 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    1b48:	4a47      	ldr	r2, [pc, #284]	; (1c68 <process_event+0x2d0>)
    1b4a:	4948      	ldr	r1, [pc, #288]	; (1c6c <process_event+0x2d4>)
    1b4c:	4841      	ldr	r0, [pc, #260]	; (1c54 <process_event+0x2bc>)
    1b4e:	f240 131b 	movw	r3, #283	; 0x11b
    1b52:	f007 fea0 	bl	9896 <assert_print>
    1b56:	4844      	ldr	r0, [pc, #272]	; (1c68 <process_event+0x2d0>)
    1b58:	f240 111b 	movw	r1, #283	; 0x11b
    1b5c:	f007 fe94 	bl	9888 <assert_post_action>
    1b60:	e7de      	b.n	1b20 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1b62:	b15d      	cbz	r5, 1b7c <process_event+0x1e4>
    1b64:	4942      	ldr	r1, [pc, #264]	; (1c70 <process_event+0x2d8>)
    1b66:	483b      	ldr	r0, [pc, #236]	; (1c54 <process_event+0x2bc>)
    1b68:	4a3f      	ldr	r2, [pc, #252]	; (1c68 <process_event+0x2d0>)
    1b6a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1b6e:	f007 fe92 	bl	9896 <assert_print>
    1b72:	483d      	ldr	r0, [pc, #244]	; (1c68 <process_event+0x2d0>)
    1b74:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1b78:	f007 fe86 	bl	9888 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1b7c:	6823      	ldr	r3, [r4, #0]
    1b7e:	b95b      	cbnz	r3, 1b98 <process_event+0x200>
    1b80:	493c      	ldr	r1, [pc, #240]	; (1c74 <process_event+0x2dc>)
    1b82:	4834      	ldr	r0, [pc, #208]	; (1c54 <process_event+0x2bc>)
    1b84:	4a38      	ldr	r2, [pc, #224]	; (1c68 <process_event+0x2d0>)
    1b86:	f240 1357 	movw	r3, #343	; 0x157
    1b8a:	f007 fe84 	bl	9896 <assert_print>
    1b8e:	4836      	ldr	r0, [pc, #216]	; (1c68 <process_event+0x2d0>)
    1b90:	f240 1157 	movw	r1, #343	; 0x157
    1b94:	f007 fe78 	bl	9888 <assert_post_action>
			transit = mgr->transitions->start;
    1b98:	6923      	ldr	r3, [r4, #16]
    1b9a:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1b9c:	b95f      	cbnz	r7, 1bb6 <process_event+0x21e>
    1b9e:	4936      	ldr	r1, [pc, #216]	; (1c78 <process_event+0x2e0>)
    1ba0:	482c      	ldr	r0, [pc, #176]	; (1c54 <process_event+0x2bc>)
    1ba2:	4a31      	ldr	r2, [pc, #196]	; (1c68 <process_event+0x2d0>)
    1ba4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1ba8:	f007 fe75 	bl	9896 <assert_print>
    1bac:	482e      	ldr	r0, [pc, #184]	; (1c68 <process_event+0x2d0>)
    1bae:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1bb2:	f007 fe69 	bl	9888 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bb6:	8ba3      	ldrh	r3, [r4, #28]
    1bb8:	f023 0307 	bic.w	r3, r3, #7
    1bbc:	f043 0306 	orr.w	r3, r3, #6
    1bc0:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1bc2:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1bc4:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1bc6:	f040 80ad 	bne.w	1d24 <process_event+0x38c>
		res = 0;
    1bca:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1bce:	f04f 0a00 	mov.w	sl, #0
    1bd2:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    1bd4:	2f00      	cmp	r7, #0
    1bd6:	f47f af08 	bne.w	19ea <process_event+0x52>
    1bda:	e7a9      	b.n	1b30 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1bdc:	2d02      	cmp	r5, #2
    1bde:	d00b      	beq.n	1bf8 <process_event+0x260>
    1be0:	4926      	ldr	r1, [pc, #152]	; (1c7c <process_event+0x2e4>)
    1be2:	481c      	ldr	r0, [pc, #112]	; (1c54 <process_event+0x2bc>)
    1be4:	4a20      	ldr	r2, [pc, #128]	; (1c68 <process_event+0x2d0>)
    1be6:	f240 135d 	movw	r3, #349	; 0x15d
    1bea:	f007 fe54 	bl	9896 <assert_print>
    1bee:	481e      	ldr	r0, [pc, #120]	; (1c68 <process_event+0x2d0>)
    1bf0:	f240 115d 	movw	r1, #349	; 0x15d
    1bf4:	f007 fe48 	bl	9888 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1bf8:	8be3      	ldrh	r3, [r4, #30]
    1bfa:	b15b      	cbz	r3, 1c14 <process_event+0x27c>
    1bfc:	4920      	ldr	r1, [pc, #128]	; (1c80 <process_event+0x2e8>)
    1bfe:	4815      	ldr	r0, [pc, #84]	; (1c54 <process_event+0x2bc>)
    1c00:	4a19      	ldr	r2, [pc, #100]	; (1c68 <process_event+0x2d0>)
    1c02:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1c06:	f007 fe46 	bl	9896 <assert_print>
    1c0a:	4817      	ldr	r0, [pc, #92]	; (1c68 <process_event+0x2d0>)
    1c0c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1c10:	f007 fe3a 	bl	9888 <assert_post_action>
			transit = mgr->transitions->stop;
    1c14:	6923      	ldr	r3, [r4, #16]
    1c16:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1c18:	b95f      	cbnz	r7, 1c32 <process_event+0x29a>
    1c1a:	4917      	ldr	r1, [pc, #92]	; (1c78 <process_event+0x2e0>)
    1c1c:	480d      	ldr	r0, [pc, #52]	; (1c54 <process_event+0x2bc>)
    1c1e:	4a12      	ldr	r2, [pc, #72]	; (1c68 <process_event+0x2d0>)
    1c20:	f240 1361 	movw	r3, #353	; 0x161
    1c24:	f007 fe37 	bl	9896 <assert_print>
    1c28:	480f      	ldr	r0, [pc, #60]	; (1c68 <process_event+0x2d0>)
    1c2a:	f240 1161 	movw	r1, #353	; 0x161
    1c2e:	f007 fe2b 	bl	9888 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c32:	8ba3      	ldrh	r3, [r4, #28]
    1c34:	f023 0307 	bic.w	r3, r3, #7
    1c38:	f043 0304 	orr.w	r3, r3, #4
    1c3c:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1c3e:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c40:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1c42:	d0c2      	beq.n	1bca <process_event+0x232>
    1c44:	2600      	movs	r6, #0
		res = 0;
    1c46:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c48:	2504      	movs	r5, #4
    1c4a:	e06e      	b.n	1d2a <process_event+0x392>
    1c4c:	0000aa10 	.word	0x0000aa10
    1c50:	0000aa3d 	.word	0x0000aa3d
    1c54:	0000a8c6 	.word	0x0000a8c6
    1c58:	0000aa54 	.word	0x0000aa54
    1c5c:	00001dd1 	.word	0x00001dd1
    1c60:	0000aa69 	.word	0x0000aa69
    1c64:	0000aa7e 	.word	0x0000aa7e
    1c68:	0000a96d 	.word	0x0000a96d
    1c6c:	0000c14d 	.word	0x0000c14d
    1c70:	0000a98f 	.word	0x0000a98f
    1c74:	0000a99b 	.word	0x0000a99b
    1c78:	0000a9be 	.word	0x0000a9be
    1c7c:	0000a9d5 	.word	0x0000a9d5
    1c80:	0000a9eb 	.word	0x0000a9eb
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1c84:	2d01      	cmp	r5, #1
    1c86:	d00b      	beq.n	1ca0 <process_event+0x308>
    1c88:	494b      	ldr	r1, [pc, #300]	; (1db8 <process_event+0x420>)
    1c8a:	484c      	ldr	r0, [pc, #304]	; (1dbc <process_event+0x424>)
    1c8c:	4a4c      	ldr	r2, [pc, #304]	; (1dc0 <process_event+0x428>)
    1c8e:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1c92:	f007 fe00 	bl	9896 <assert_print>
    1c96:	484a      	ldr	r0, [pc, #296]	; (1dc0 <process_event+0x428>)
    1c98:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1c9c:	f007 fdf4 	bl	9888 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1ca0:	6823      	ldr	r3, [r4, #0]
    1ca2:	b95b      	cbnz	r3, 1cbc <process_event+0x324>
    1ca4:	4947      	ldr	r1, [pc, #284]	; (1dc4 <process_event+0x42c>)
    1ca6:	4845      	ldr	r0, [pc, #276]	; (1dbc <process_event+0x424>)
    1ca8:	4a45      	ldr	r2, [pc, #276]	; (1dc0 <process_event+0x428>)
    1caa:	f240 1365 	movw	r3, #357	; 0x165
    1cae:	f007 fdf2 	bl	9896 <assert_print>
    1cb2:	4843      	ldr	r0, [pc, #268]	; (1dc0 <process_event+0x428>)
    1cb4:	f240 1165 	movw	r1, #357	; 0x165
    1cb8:	f007 fde6 	bl	9888 <assert_post_action>
			transit = mgr->transitions->reset;
    1cbc:	6923      	ldr	r3, [r4, #16]
    1cbe:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1cc0:	b95f      	cbnz	r7, 1cda <process_event+0x342>
    1cc2:	4941      	ldr	r1, [pc, #260]	; (1dc8 <process_event+0x430>)
    1cc4:	483d      	ldr	r0, [pc, #244]	; (1dbc <process_event+0x424>)
    1cc6:	4a3e      	ldr	r2, [pc, #248]	; (1dc0 <process_event+0x428>)
    1cc8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1ccc:	f007 fde3 	bl	9896 <assert_print>
    1cd0:	483b      	ldr	r0, [pc, #236]	; (1dc0 <process_event+0x428>)
    1cd2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1cd6:	f007 fdd7 	bl	9888 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cda:	8ba3      	ldrh	r3, [r4, #28]
    1cdc:	f023 0307 	bic.w	r3, r3, #7
    1ce0:	f043 0305 	orr.w	r3, r3, #5
    1ce4:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1ce6:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ce8:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1cea:	f43f af6e 	beq.w	1bca <process_event+0x232>
    1cee:	2600      	movs	r6, #0
		res = 0;
    1cf0:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1cf2:	2505      	movs	r5, #5
    1cf4:	e019      	b.n	1d2a <process_event+0x392>
			__ASSERT_NO_MSG(false);
    1cf6:	4a32      	ldr	r2, [pc, #200]	; (1dc0 <process_event+0x428>)
    1cf8:	4934      	ldr	r1, [pc, #208]	; (1dcc <process_event+0x434>)
    1cfa:	4830      	ldr	r0, [pc, #192]	; (1dbc <process_event+0x424>)
    1cfc:	f240 136b 	movw	r3, #363	; 0x16b
    1d00:	f007 fdc9 	bl	9896 <assert_print>
    1d04:	482e      	ldr	r0, [pc, #184]	; (1dc0 <process_event+0x428>)
    1d06:	f240 116b 	movw	r1, #363	; 0x16b
    1d0a:	f007 fdbd 	bl	9888 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d0e:	8ba3      	ldrh	r3, [r4, #28]
    1d10:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1d14:	42aa      	cmp	r2, r5
    1d16:	f43f af0b 	beq.w	1b30 <process_event+0x198>
    1d1a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d1c:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    1d1e:	4637      	mov	r7, r6
		res = 0;
    1d20:	46b0      	mov	r8, r6
    1d22:	e002      	b.n	1d2a <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    1d24:	2600      	movs	r6, #0
		res = 0;
    1d26:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d28:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1d2a:	68a2      	ldr	r2, [r4, #8]
    1d2c:	2a00      	cmp	r2, #0
    1d2e:	f43f ae57 	beq.w	19e0 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d32:	f04f 0a01 	mov.w	sl, #1
    1d36:	e658      	b.n	19ea <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1d38:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d3a:	2900      	cmp	r1, #0
    1d3c:	f43f ae74 	beq.w	1a28 <process_event+0x90>
	return node->next;
    1d40:	f8d1 9000 	ldr.w	r9, [r1]
    1d44:	2900      	cmp	r1, #0
    1d46:	f43f ae6f 	beq.w	1a28 <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    1d4a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    1d4e:	4643      	mov	r3, r8
    1d50:	462a      	mov	r2, r5
    1d52:	4620      	mov	r0, r4
    1d54:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d56:	f1b9 0f00 	cmp.w	r9, #0
    1d5a:	d004      	beq.n	1d66 <process_event+0x3ce>
    1d5c:	f8d9 3000 	ldr.w	r3, [r9]
    1d60:	4649      	mov	r1, r9
    1d62:	4699      	mov	r9, r3
    1d64:	e7ee      	b.n	1d44 <process_event+0x3ac>
    1d66:	464b      	mov	r3, r9
    1d68:	e7fa      	b.n	1d60 <process_event+0x3c8>
    1d6a:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    1d6c:	4643      	mov	r3, r8
    1d6e:	462a      	mov	r2, r5
    1d70:	4620      	mov	r0, r4
    1d72:	6836      	ldr	r6, [r6, #0]
    1d74:	f007 fc4c 	bl	9610 <notify_one>
    1d78:	e656      	b.n	1a28 <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1d7a:	f01a 0f20 	tst.w	sl, #32
    1d7e:	f43f ae83 	beq.w	1a88 <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1d82:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d86:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1d88:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    1d8c:	4620      	mov	r0, r4
    1d8e:	f007 fc13 	bl	95b8 <process_recheck>
		if (evt == EVT_NOP) {
    1d92:	2800      	cmp	r0, #0
    1d94:	f43f ae78 	beq.w	1a88 <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    1d98:	3801      	subs	r0, #1
    1d9a:	2804      	cmp	r0, #4
    1d9c:	d8ab      	bhi.n	1cf6 <process_event+0x35e>
    1d9e:	a301      	add	r3, pc, #4	; (adr r3, 1da4 <process_event+0x40c>)
    1da0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1da4:	000019b1 	.word	0x000019b1
    1da8:	00001cf7 	.word	0x00001cf7
    1dac:	00001b63 	.word	0x00001b63
    1db0:	00001bdd 	.word	0x00001bdd
    1db4:	00001c85 	.word	0x00001c85
    1db8:	0000a9fa 	.word	0x0000a9fa
    1dbc:	0000a8c6 	.word	0x0000a8c6
    1dc0:	0000a96d 	.word	0x0000a96d
    1dc4:	0000a99b 	.word	0x0000a99b
    1dc8:	0000a9be 	.word	0x0000a9be
    1dcc:	0000c14d 	.word	0x0000c14d

00001dd0 <transition_complete>:
{
    1dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dd2:	4604      	mov	r4, r0
    1dd4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1dd6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    1dda:	f04f 0320 	mov.w	r3, #32
    1dde:	f3ef 8711 	mrs	r7, BASEPRI
    1de2:	f383 8812 	msr	BASEPRI_MAX, r3
    1de6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1dea:	4630      	mov	r0, r6
    1dec:	f005 f992 	bl	7114 <z_spin_lock_valid>
    1df0:	b968      	cbnz	r0, 1e0e <transition_complete+0x3e>
    1df2:	4a0c      	ldr	r2, [pc, #48]	; (1e24 <transition_complete+0x54>)
    1df4:	490c      	ldr	r1, [pc, #48]	; (1e28 <transition_complete+0x58>)
    1df6:	480d      	ldr	r0, [pc, #52]	; (1e2c <transition_complete+0x5c>)
    1df8:	238e      	movs	r3, #142	; 0x8e
    1dfa:	f007 fd4c 	bl	9896 <assert_print>
    1dfe:	480c      	ldr	r0, [pc, #48]	; (1e30 <transition_complete+0x60>)
    1e00:	4631      	mov	r1, r6
    1e02:	f007 fd48 	bl	9896 <assert_print>
    1e06:	4807      	ldr	r0, [pc, #28]	; (1e24 <transition_complete+0x54>)
    1e08:	218e      	movs	r1, #142	; 0x8e
    1e0a:	f007 fd3d 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    1e0e:	4630      	mov	r0, r6
    1e10:	f005 f99e 	bl	7150 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1e14:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1e16:	463a      	mov	r2, r7
    1e18:	4620      	mov	r0, r4
    1e1a:	2101      	movs	r1, #1
}
    1e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1e20:	f7ff bdba 	b.w	1998 <process_event>
    1e24:	0000aa10 	.word	0x0000aa10
    1e28:	0000aa69 	.word	0x0000aa69
    1e2c:	0000a8c6 	.word	0x0000a8c6
    1e30:	0000aa7e 	.word	0x0000aa7e

00001e34 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e38:	4604      	mov	r4, r0
    1e3a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1e3c:	f007 fbd8 	bl	95f0 <validate_args>

	if (rv < 0) {
    1e40:	1e05      	subs	r5, r0, #0
    1e42:	db78      	blt.n	1f36 <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1e44:	f104 0914 	add.w	r9, r4, #20
    1e48:	f04f 0320 	mov.w	r3, #32
    1e4c:	f3ef 8a11 	mrs	sl, BASEPRI
    1e50:	f383 8812 	msr	BASEPRI_MAX, r3
    1e54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1e58:	4648      	mov	r0, r9
    1e5a:	f005 f95b 	bl	7114 <z_spin_lock_valid>
    1e5e:	b968      	cbnz	r0, 1e7c <onoff_request+0x48>
    1e60:	4a39      	ldr	r2, [pc, #228]	; (1f48 <onoff_request+0x114>)
    1e62:	493a      	ldr	r1, [pc, #232]	; (1f4c <onoff_request+0x118>)
    1e64:	483a      	ldr	r0, [pc, #232]	; (1f50 <onoff_request+0x11c>)
    1e66:	238e      	movs	r3, #142	; 0x8e
    1e68:	f007 fd15 	bl	9896 <assert_print>
    1e6c:	4839      	ldr	r0, [pc, #228]	; (1f54 <onoff_request+0x120>)
    1e6e:	4649      	mov	r1, r9
    1e70:	f007 fd11 	bl	9896 <assert_print>
    1e74:	4834      	ldr	r0, [pc, #208]	; (1f48 <onoff_request+0x114>)
    1e76:	218e      	movs	r1, #142	; 0x8e
    1e78:	f007 fd06 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    1e7c:	4648      	mov	r0, r9
    1e7e:	f005 f967 	bl	7150 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1e82:	8be3      	ldrh	r3, [r4, #30]
    1e84:	8ba6      	ldrh	r6, [r4, #28]
    1e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1e8a:	4293      	cmp	r3, r2
    1e8c:	f006 0607 	and.w	r6, r6, #7
    1e90:	d054      	beq.n	1f3c <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1e92:	2e02      	cmp	r6, #2
    1e94:	d124      	bne.n	1ee0 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1e96:	3301      	adds	r3, #1
    1e98:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1e9a:	4635      	mov	r5, r6
		notify = true;
    1e9c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1ea0:	4648      	mov	r0, r9
    1ea2:	f005 f945 	bl	7130 <z_spin_unlock_valid>
    1ea6:	b968      	cbnz	r0, 1ec4 <onoff_request+0x90>
    1ea8:	4a27      	ldr	r2, [pc, #156]	; (1f48 <onoff_request+0x114>)
    1eaa:	492b      	ldr	r1, [pc, #172]	; (1f58 <onoff_request+0x124>)
    1eac:	4828      	ldr	r0, [pc, #160]	; (1f50 <onoff_request+0x11c>)
    1eae:	23b9      	movs	r3, #185	; 0xb9
    1eb0:	f007 fcf1 	bl	9896 <assert_print>
    1eb4:	4829      	ldr	r0, [pc, #164]	; (1f5c <onoff_request+0x128>)
    1eb6:	4649      	mov	r1, r9
    1eb8:	f007 fced 	bl	9896 <assert_print>
    1ebc:	4822      	ldr	r0, [pc, #136]	; (1f48 <onoff_request+0x114>)
    1ebe:	21b9      	movs	r1, #185	; 0xb9
    1ec0:	f007 fce2 	bl	9888 <assert_post_action>
	__asm__ volatile(
    1ec4:	f38a 8811 	msr	BASEPRI, sl
    1ec8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1ecc:	f1b8 0f00 	cmp.w	r8, #0
    1ed0:	d031      	beq.n	1f36 <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    1ed2:	2300      	movs	r3, #0
    1ed4:	4632      	mov	r2, r6
    1ed6:	4639      	mov	r1, r7
    1ed8:	4620      	mov	r0, r4
    1eda:	f007 fb99 	bl	9610 <notify_one>
    1ede:	e02a      	b.n	1f36 <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    1ee0:	2e06      	cmp	r6, #6
    1ee2:	d80e      	bhi.n	1f02 <onoff_request+0xce>
    1ee4:	e8df f006 	tbb	[pc, r6]
    1ee8:	0d0d1904 	.word	0x0d0d1904
    1eec:	2d04      	.short	0x2d04
    1eee:	04          	.byte	0x04
    1eef:	00          	.byte	0x00
	parent->next = child;
    1ef0:	2300      	movs	r3, #0
    1ef2:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1ef4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1ef6:	b9ab      	cbnz	r3, 1f24 <onoff_request+0xf0>
	list->head = node;
    1ef8:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1efc:	b1ae      	cbz	r6, 1f2a <onoff_request+0xf6>
	rv = state;
    1efe:	4635      	mov	r5, r6
    1f00:	e00d      	b.n	1f1e <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1f02:	4917      	ldr	r1, [pc, #92]	; (1f60 <onoff_request+0x12c>)
    1f04:	4812      	ldr	r0, [pc, #72]	; (1f50 <onoff_request+0x11c>)
    1f06:	4a17      	ldr	r2, [pc, #92]	; (1f64 <onoff_request+0x130>)
    1f08:	f240 13c9 	movw	r3, #457	; 0x1c9
    1f0c:	f007 fcc3 	bl	9896 <assert_print>
    1f10:	4814      	ldr	r0, [pc, #80]	; (1f64 <onoff_request+0x130>)
    1f12:	f240 11c9 	movw	r1, #457	; 0x1c9
    1f16:	f007 fcb7 	bl	9888 <assert_post_action>
		rv = -EIO;
    1f1a:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    1f1e:	f04f 0800 	mov.w	r8, #0
    1f22:	e7bd      	b.n	1ea0 <onoff_request+0x6c>
	parent->next = child;
    1f24:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1f26:	6067      	str	r7, [r4, #4]
}
    1f28:	e7e8      	b.n	1efc <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    1f2a:	4652      	mov	r2, sl
    1f2c:	2102      	movs	r1, #2
    1f2e:	4620      	mov	r0, r4
    1f30:	f7ff fd32 	bl	1998 <process_event>
    1f34:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    1f36:	4628      	mov	r0, r5
    1f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    1f3c:	f06f 050a 	mvn.w	r5, #10
    1f40:	e7ed      	b.n	1f1e <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    1f42:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1f46:	e7ea      	b.n	1f1e <onoff_request+0xea>
    1f48:	0000aa10 	.word	0x0000aa10
    1f4c:	0000aa69 	.word	0x0000aa69
    1f50:	0000a8c6 	.word	0x0000a8c6
    1f54:	0000aa7e 	.word	0x0000aa7e
    1f58:	0000aa3d 	.word	0x0000aa3d
    1f5c:	0000aa54 	.word	0x0000aa54
    1f60:	0000a9fa 	.word	0x0000a9fa
    1f64:	0000a96d 	.word	0x0000a96d

00001f68 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    1f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f6c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    1f70:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    1f74:	6806      	ldr	r6, [r0, #0]
{
    1f76:	460f      	mov	r7, r1
    1f78:	4614      	mov	r4, r2
	if (align != rew) {
    1f7a:	d011      	beq.n	1fa0 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1f7c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    1f80:	ea13 0f09 	tst.w	r3, r9
    1f84:	d113      	bne.n	1fae <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
    1f86:	427b      	negs	r3, r7
    1f88:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
    1f8a:	2b04      	cmp	r3, #4
    1f8c:	461a      	mov	r2, r3
    1f8e:	464f      	mov	r7, r9
    1f90:	bf28      	it	cs
    1f92:	2204      	movcs	r2, #4
	rew = align & -align;
    1f94:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    1f96:	b9e4      	cbnz	r4, 1fd2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
    1f98:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    1f9a:	4628      	mov	r0, r5
    1f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    1fa0:	2904      	cmp	r1, #4
    1fa2:	d814      	bhi.n	1fce <sys_heap_aligned_alloc+0x66>
}
    1fa4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    1fa8:	4611      	mov	r1, r2
    1faa:	f007 bbfe 	b.w	97aa <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    1fae:	4a2c      	ldr	r2, [pc, #176]	; (2060 <sys_heap_aligned_alloc+0xf8>)
    1fb0:	492c      	ldr	r1, [pc, #176]	; (2064 <sys_heap_aligned_alloc+0xfc>)
    1fb2:	482d      	ldr	r0, [pc, #180]	; (2068 <sys_heap_aligned_alloc+0x100>)
    1fb4:	f44f 73a0 	mov.w	r3, #320	; 0x140
    1fb8:	f007 fc6d 	bl	9896 <assert_print>
    1fbc:	482b      	ldr	r0, [pc, #172]	; (206c <sys_heap_aligned_alloc+0x104>)
    1fbe:	f007 fc6a 	bl	9896 <assert_print>
    1fc2:	4827      	ldr	r0, [pc, #156]	; (2060 <sys_heap_aligned_alloc+0xf8>)
    1fc4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    1fc8:	f007 fc5e 	bl	9888 <assert_post_action>
    1fcc:	e7db      	b.n	1f86 <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
    1fce:	2204      	movs	r2, #4
    1fd0:	e7e1      	b.n	1f96 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    1fd2:	68b3      	ldr	r3, [r6, #8]
    1fd4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    1fd8:	d9de      	bls.n	1f98 <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1fda:	f104 010b 	add.w	r1, r4, #11
    1fde:	4439      	add	r1, r7
    1fe0:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    1fe2:	08c9      	lsrs	r1, r1, #3
    1fe4:	4630      	mov	r0, r6
    1fe6:	f007 fb8f 	bl	9708 <alloc_chunk>
	if (c0 == 0) {
    1fea:	4680      	mov	r8, r0
    1fec:	2800      	cmp	r0, #0
    1fee:	d0d3      	beq.n	1f98 <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    1ff0:	f109 0504 	add.w	r5, r9, #4
    1ff4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    1ff8:	1e7b      	subs	r3, r7, #1
    1ffa:	4435      	add	r5, r6
    1ffc:	441d      	add	r5, r3
    1ffe:	427f      	negs	r7, r7
    2000:	403d      	ands	r5, r7
    2002:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2006:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2008:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    200a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    200c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    200e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    2012:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    2014:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2018:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    201c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    2020:	d208      	bcs.n	2034 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    2022:	4601      	mov	r1, r0
    2024:	463a      	mov	r2, r7
    2026:	4630      	mov	r0, r6
    2028:	f007 fba5 	bl	9776 <split_chunks>
		free_list_add(h, c0);
    202c:	4641      	mov	r1, r8
    202e:	4630      	mov	r0, r6
    2030:	f007 fb26 	bl	9680 <free_list_add>
	return c + chunk_size(h, c);
    2034:	4639      	mov	r1, r7
    2036:	4630      	mov	r0, r6
    2038:	f007 fb1d 	bl	9676 <chunk_size>
    203c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    203e:	4284      	cmp	r4, r0
    2040:	d207      	bcs.n	2052 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    2042:	4630      	mov	r0, r6
    2044:	4622      	mov	r2, r4
    2046:	f007 fb96 	bl	9776 <split_chunks>
		free_list_add(h, c_end);
    204a:	4621      	mov	r1, r4
    204c:	4630      	mov	r0, r6
    204e:	f007 fb17 	bl	9680 <free_list_add>
	void *cmem = &buf[c];
    2052:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2056:	8873      	ldrh	r3, [r6, #2]
    2058:	f043 0301 	orr.w	r3, r3, #1
    205c:	8073      	strh	r3, [r6, #2]
    205e:	e79c      	b.n	1f9a <sys_heap_aligned_alloc+0x32>
    2060:	0000aa96 	.word	0x0000aa96
    2064:	0000ab62 	.word	0x0000ab62
    2068:	0000a8c6 	.word	0x0000a8c6
    206c:	0000ab7d 	.word	0x0000ab7d

00002070 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2070:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    2074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2078:	4604      	mov	r4, r0
    207a:	460e      	mov	r6, r1
    207c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    207e:	d36c      	bcc.n	215a <sys_heap_init+0xea>
    2080:	493d      	ldr	r1, [pc, #244]	; (2178 <sys_heap_init+0x108>)
    2082:	4a3e      	ldr	r2, [pc, #248]	; (217c <sys_heap_init+0x10c>)
    2084:	483e      	ldr	r0, [pc, #248]	; (2180 <sys_heap_init+0x110>)
    2086:	f240 13e3 	movw	r3, #483	; 0x1e3
    208a:	f007 fc04 	bl	9896 <assert_print>
    208e:	483d      	ldr	r0, [pc, #244]	; (2184 <sys_heap_init+0x114>)
    2090:	f007 fc01 	bl	9896 <assert_print>
    2094:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    2098:	4838      	ldr	r0, [pc, #224]	; (217c <sys_heap_init+0x10c>)
    209a:	f007 fbf5 	bl	9888 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    209e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    20a0:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    20a2:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    20a4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    20a8:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    20ac:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    20ae:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    20b0:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    20b4:	d80e      	bhi.n	20d4 <sys_heap_init+0x64>
    20b6:	4934      	ldr	r1, [pc, #208]	; (2188 <sys_heap_init+0x118>)
    20b8:	4a30      	ldr	r2, [pc, #192]	; (217c <sys_heap_init+0x10c>)
    20ba:	4831      	ldr	r0, [pc, #196]	; (2180 <sys_heap_init+0x110>)
    20bc:	f240 13f3 	movw	r3, #499	; 0x1f3
    20c0:	f007 fbe9 	bl	9896 <assert_print>
    20c4:	4831      	ldr	r0, [pc, #196]	; (218c <sys_heap_init+0x11c>)
    20c6:	f007 fbe6 	bl	9896 <assert_print>
    20ca:	482c      	ldr	r0, [pc, #176]	; (217c <sys_heap_init+0x10c>)
    20cc:	f240 11f3 	movw	r1, #499	; 0x1f3
    20d0:	f007 fbda 	bl	9888 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    20d4:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    20d6:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    20da:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    20de:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    20e2:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    20e4:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    20e6:	2300      	movs	r3, #0
    20e8:	08e4      	lsrs	r4, r4, #3
    20ea:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    20ec:	1c63      	adds	r3, r4, #1
    20ee:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    20f0:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    20f2:	d90e      	bls.n	2112 <sys_heap_init+0xa2>
    20f4:	4926      	ldr	r1, [pc, #152]	; (2190 <sys_heap_init+0x120>)
    20f6:	4a21      	ldr	r2, [pc, #132]	; (217c <sys_heap_init+0x10c>)
    20f8:	4821      	ldr	r0, [pc, #132]	; (2180 <sys_heap_init+0x110>)
    20fa:	f44f 7301 	mov.w	r3, #516	; 0x204
    20fe:	f007 fbca 	bl	9896 <assert_print>
    2102:	4822      	ldr	r0, [pc, #136]	; (218c <sys_heap_init+0x11c>)
    2104:	f007 fbc7 	bl	9896 <assert_print>
    2108:	481c      	ldr	r0, [pc, #112]	; (217c <sys_heap_init+0x10c>)
    210a:	f44f 7101 	mov.w	r1, #516	; 0x204
    210e:	f007 fbbb 	bl	9888 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    2112:	f105 030c 	add.w	r3, r5, #12
    2116:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    211a:	2200      	movs	r2, #0
    211c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    2120:	4543      	cmp	r3, r8
    2122:	d1fb      	bne.n	211c <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2124:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2126:	f043 0301 	orr.w	r3, r3, #1
    212a:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    212c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2130:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2132:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    2134:	802a      	strh	r2, [r5, #0]
    2136:	8048      	strh	r0, [r1, #2]
    2138:	19a9      	adds	r1, r5, r6
    213a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    213e:	804a      	strh	r2, [r1, #2]
    2140:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    2142:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2146:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2148:	885a      	ldrh	r2, [r3, #2]
    214a:	f042 0201 	orr.w	r2, r2, #1
    214e:	4628      	mov	r0, r5
    2150:	805a      	strh	r2, [r3, #2]
}
    2152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    2156:	f007 ba93 	b.w	9680 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    215a:	2a04      	cmp	r2, #4
    215c:	d89f      	bhi.n	209e <sys_heap_init+0x2e>
    215e:	490d      	ldr	r1, [pc, #52]	; (2194 <sys_heap_init+0x124>)
    2160:	4a06      	ldr	r2, [pc, #24]	; (217c <sys_heap_init+0x10c>)
    2162:	4807      	ldr	r0, [pc, #28]	; (2180 <sys_heap_init+0x110>)
    2164:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2168:	f007 fb95 	bl	9896 <assert_print>
    216c:	4807      	ldr	r0, [pc, #28]	; (218c <sys_heap_init+0x11c>)
    216e:	f007 fb92 	bl	9896 <assert_print>
    2172:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2176:	e78f      	b.n	2098 <sys_heap_init+0x28>
    2178:	0000ab9a 	.word	0x0000ab9a
    217c:	0000aa96 	.word	0x0000aa96
    2180:	0000a8c6 	.word	0x0000a8c6
    2184:	0000abb0 	.word	0x0000abb0
    2188:	0000ac01 	.word	0x0000ac01
    218c:	0000abe8 	.word	0x0000abe8
    2190:	0000ac2a 	.word	0x0000ac2a
    2194:	0000abc7 	.word	0x0000abc7

00002198 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    2198:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    219a:	4e09      	ldr	r6, [pc, #36]	; (21c0 <extract_decimal+0x28>)
    219c:	6801      	ldr	r1, [r0, #0]
{
    219e:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    21a0:	270a      	movs	r7, #10
	size_t val = 0;
    21a2:	2000      	movs	r0, #0
    21a4:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    21a6:	3101      	adds	r1, #1
    21a8:	781c      	ldrb	r4, [r3, #0]
    21aa:	5d35      	ldrb	r5, [r6, r4]
    21ac:	076d      	lsls	r5, r5, #29
    21ae:	d401      	bmi.n	21b4 <extract_decimal+0x1c>
	}
	*str = sp;
    21b0:	6013      	str	r3, [r2, #0]
	return val;
}
    21b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    21b4:	fb07 4300 	mla	r3, r7, r0, r4
    21b8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    21bc:	e7f2      	b.n	21a4 <extract_decimal+0xc>
    21be:	bf00      	nop
    21c0:	0000c22f 	.word	0x0000c22f

000021c4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    21c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21c8:	4615      	mov	r5, r2
    21ca:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    21cc:	78d3      	ldrb	r3, [r2, #3]
    21ce:	4a22      	ldr	r2, [pc, #136]	; (2258 <encode_uint+0x94>)
    21d0:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    21d4:	2b6f      	cmp	r3, #111	; 0x6f
{
    21d6:	4680      	mov	r8, r0
    21d8:	460f      	mov	r7, r1
    21da:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    21de:	d029      	beq.n	2234 <encode_uint+0x70>
    21e0:	d824      	bhi.n	222c <encode_uint+0x68>
		return 10;
    21e2:	2b58      	cmp	r3, #88	; 0x58
    21e4:	bf0c      	ite	eq
    21e6:	2610      	moveq	r6, #16
    21e8:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    21ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    21ee:	4632      	mov	r2, r6
    21f0:	2300      	movs	r3, #0
    21f2:	4640      	mov	r0, r8
    21f4:	4639      	mov	r1, r7
    21f6:	f7fe fba1 	bl	93c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    21fa:	2a09      	cmp	r2, #9
    21fc:	b2d4      	uxtb	r4, r2
    21fe:	d81e      	bhi.n	223e <encode_uint+0x7a>
    2200:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    2202:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2204:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    2206:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    220a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    220e:	d301      	bcc.n	2214 <encode_uint+0x50>
    2210:	45d1      	cmp	r9, sl
    2212:	d811      	bhi.n	2238 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2214:	782b      	ldrb	r3, [r5, #0]
    2216:	069b      	lsls	r3, r3, #26
    2218:	d505      	bpl.n	2226 <encode_uint+0x62>
		if (radix == 8) {
    221a:	2e08      	cmp	r6, #8
    221c:	d115      	bne.n	224a <encode_uint+0x86>
			conv->altform_0 = true;
    221e:	78ab      	ldrb	r3, [r5, #2]
    2220:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2224:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    2226:	4648      	mov	r0, r9
    2228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    222c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    2230:	2b70      	cmp	r3, #112	; 0x70
    2232:	e7d7      	b.n	21e4 <encode_uint+0x20>
	switch (specifier) {
    2234:	2608      	movs	r6, #8
    2236:	e7d8      	b.n	21ea <encode_uint+0x26>
		value /= radix;
    2238:	4680      	mov	r8, r0
    223a:	460f      	mov	r7, r1
    223c:	e7d7      	b.n	21ee <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    223e:	f1bb 0f01 	cmp.w	fp, #1
    2242:	bf0c      	ite	eq
    2244:	3437      	addeq	r4, #55	; 0x37
    2246:	3457      	addne	r4, #87	; 0x57
    2248:	e7db      	b.n	2202 <encode_uint+0x3e>
		} else if (radix == 16) {
    224a:	2e10      	cmp	r6, #16
    224c:	d1eb      	bne.n	2226 <encode_uint+0x62>
			conv->altform_0c = true;
    224e:	78ab      	ldrb	r3, [r5, #2]
    2250:	f043 0310 	orr.w	r3, r3, #16
    2254:	e7e6      	b.n	2224 <encode_uint+0x60>
    2256:	bf00      	nop
    2258:	0000c22f 	.word	0x0000c22f

0000225c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2260:	b09f      	sub	sp, #124	; 0x7c
    2262:	4682      	mov	sl, r0
    2264:	9103      	str	r1, [sp, #12]
    2266:	4616      	mov	r6, r2
    2268:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    226a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    226c:	7830      	ldrb	r0, [r6, #0]
    226e:	b910      	cbnz	r0, 2276 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2270:	4628      	mov	r0, r5
    2272:	f000 bd87 	b.w	2d84 <cbvprintf+0xb28>
			OUTC(*fp++);
    2276:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    2278:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    227a:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    227c:	d006      	beq.n	228c <cbvprintf+0x30>
			OUTC(*fp++);
    227e:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    2280:	47d0      	blx	sl
    2282:	2800      	cmp	r0, #0
    2284:	f2c0 857e 	blt.w	2d84 <cbvprintf+0xb28>
    2288:	3501      	adds	r5, #1
		if (bps == NULL) {
    228a:	e228      	b.n	26de <cbvprintf+0x482>
		} state = {
    228c:	2218      	movs	r2, #24
    228e:	2100      	movs	r1, #0
    2290:	a810      	add	r0, sp, #64	; 0x40
    2292:	f007 ff89 	bl	a1a8 <memset>
	if (*sp == '%') {
    2296:	7873      	ldrb	r3, [r6, #1]
    2298:	2b25      	cmp	r3, #37	; 0x25
    229a:	f000 80bc 	beq.w	2416 <cbvprintf+0x1ba>
    229e:	2300      	movs	r3, #0
    22a0:	1c71      	adds	r1, r6, #1
    22a2:	4698      	mov	r8, r3
    22a4:	469e      	mov	lr, r3
    22a6:	469c      	mov	ip, r3
    22a8:	4618      	mov	r0, r3
    22aa:	460f      	mov	r7, r1
		switch (*sp) {
    22ac:	f811 2b01 	ldrb.w	r2, [r1], #1
    22b0:	2a2b      	cmp	r2, #43	; 0x2b
    22b2:	f000 80df 	beq.w	2474 <cbvprintf+0x218>
    22b6:	f200 80d6 	bhi.w	2466 <cbvprintf+0x20a>
    22ba:	2a20      	cmp	r2, #32
    22bc:	f000 80dd 	beq.w	247a <cbvprintf+0x21e>
    22c0:	2a23      	cmp	r2, #35	; 0x23
    22c2:	f000 80dd 	beq.w	2480 <cbvprintf+0x224>
    22c6:	b12b      	cbz	r3, 22d4 <cbvprintf+0x78>
    22c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    22d0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    22d4:	f1b8 0f00 	cmp.w	r8, #0
    22d8:	d005      	beq.n	22e6 <cbvprintf+0x8a>
    22da:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22de:	f043 0320 	orr.w	r3, r3, #32
    22e2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    22e6:	f1be 0f00 	cmp.w	lr, #0
    22ea:	d005      	beq.n	22f8 <cbvprintf+0x9c>
    22ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22f0:	f043 0310 	orr.w	r3, r3, #16
    22f4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    22f8:	f1bc 0f00 	cmp.w	ip, #0
    22fc:	d005      	beq.n	230a <cbvprintf+0xae>
    22fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2302:	f043 0308 	orr.w	r3, r3, #8
    2306:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    230a:	b128      	cbz	r0, 2318 <cbvprintf+0xbc>
    230c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2310:	f043 0304 	orr.w	r3, r3, #4
    2314:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2318:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    231c:	f003 0144 	and.w	r1, r3, #68	; 0x44
    2320:	2944      	cmp	r1, #68	; 0x44
    2322:	d103      	bne.n	232c <cbvprintf+0xd0>
		conv->flag_zero = false;
    2324:	f36f 1386 	bfc	r3, #6, #1
    2328:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    232c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2330:	970e      	str	r7, [sp, #56]	; 0x38
    2332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    2336:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2338:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    233c:	f040 80a5 	bne.w	248a <cbvprintf+0x22e>
		conv->width_star = true;
    2340:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2344:	f043 0301 	orr.w	r3, r3, #1
    2348:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    234c:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    234e:	781a      	ldrb	r2, [r3, #0]
    2350:	2a2e      	cmp	r2, #46	; 0x2e
    2352:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2356:	bf0c      	ite	eq
    2358:	2101      	moveq	r1, #1
    235a:	2100      	movne	r1, #0
    235c:	f361 0241 	bfi	r2, r1, #1, #1
    2360:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    2364:	d10c      	bne.n	2380 <cbvprintf+0x124>
	++sp;
    2366:	1c5a      	adds	r2, r3, #1
    2368:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    236a:	785a      	ldrb	r2, [r3, #1]
    236c:	2a2a      	cmp	r2, #42	; 0x2a
    236e:	f040 809c 	bne.w	24aa <cbvprintf+0x24e>
		conv->prec_star = true;
    2372:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2376:	f042 0204 	orr.w	r2, r2, #4
    237a:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    237e:	3302      	adds	r3, #2
	switch (*sp) {
    2380:	781a      	ldrb	r2, [r3, #0]
    2382:	2a6c      	cmp	r2, #108	; 0x6c
    2384:	f000 80bd 	beq.w	2502 <cbvprintf+0x2a6>
    2388:	f200 809f 	bhi.w	24ca <cbvprintf+0x26e>
    238c:	2a68      	cmp	r2, #104	; 0x68
    238e:	f000 80a5 	beq.w	24dc <cbvprintf+0x280>
    2392:	2a6a      	cmp	r2, #106	; 0x6a
    2394:	f000 80be 	beq.w	2514 <cbvprintf+0x2b8>
    2398:	2a4c      	cmp	r2, #76	; 0x4c
    239a:	f000 80c3 	beq.w	2524 <cbvprintf+0x2c8>
	conv->specifier = *sp++;
    239e:	f813 2b01 	ldrb.w	r2, [r3], #1
    23a2:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    23a4:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    23a6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    23aa:	f200 8105 	bhi.w	25b8 <cbvprintf+0x35c>
    23ae:	2a6d      	cmp	r2, #109	; 0x6d
    23b0:	f200 80c5 	bhi.w	253e <cbvprintf+0x2e2>
    23b4:	2a69      	cmp	r2, #105	; 0x69
    23b6:	f200 80ff 	bhi.w	25b8 <cbvprintf+0x35c>
    23ba:	2a57      	cmp	r2, #87	; 0x57
    23bc:	f200 80de 	bhi.w	257c <cbvprintf+0x320>
    23c0:	2a41      	cmp	r2, #65	; 0x41
    23c2:	d004      	beq.n	23ce <cbvprintf+0x172>
    23c4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    23c8:	2b02      	cmp	r3, #2
    23ca:	f200 80f5 	bhi.w	25b8 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_FP;
    23ce:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    23d2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    23d6:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    23d8:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    23dc:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    23e0:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    23e4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    23e8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    23ec:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    23f0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    23f4:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    23f6:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    23fa:	b2cb      	uxtb	r3, r1
    23fc:	f100 811b 	bmi.w	2636 <cbvprintf+0x3da>
		if (conv->length_mod == LENGTH_L) {
    2400:	f003 0278 	and.w	r2, r3, #120	; 0x78
    2404:	2a18      	cmp	r2, #24
    2406:	f040 8105 	bne.w	2614 <cbvprintf+0x3b8>
			conv->length_mod = LENGTH_NONE;
    240a:	f36f 03c6 	bfc	r3, #3, #4
    240e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    2412:	2300      	movs	r3, #0
    2414:	e0f4      	b.n	2600 <cbvprintf+0x3a4>
		conv->specifier = *sp++;
    2416:	1cb2      	adds	r2, r6, #2
    2418:	9206      	str	r2, [sp, #24]
    241a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    241e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2422:	07df      	lsls	r7, r3, #31
    2424:	f140 8109 	bpl.w	263a <cbvprintf+0x3de>
			width = va_arg(ap, int);
    2428:	f854 2b04 	ldr.w	r2, [r4], #4
    242c:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    242e:	2a00      	cmp	r2, #0
    2430:	da08      	bge.n	2444 <cbvprintf+0x1e8>
				conv->flag_dash = true;
    2432:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2436:	f042 0204 	orr.w	r2, r2, #4
    243a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    243e:	9a04      	ldr	r2, [sp, #16]
    2440:	4252      	negs	r2, r2
		int width = -1;
    2442:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    2444:	0758      	lsls	r0, r3, #29
    2446:	f140 8100 	bpl.w	264a <cbvprintf+0x3ee>
			int arg = va_arg(ap, int);
    244a:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    244e:	2f00      	cmp	r7, #0
    2450:	f280 80ff 	bge.w	2652 <cbvprintf+0x3f6>
				conv->prec_present = false;
    2454:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2458:	f36f 0341 	bfc	r3, #1, #1
    245c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    2460:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    2464:	e0f5      	b.n	2652 <cbvprintf+0x3f6>
		switch (*sp) {
    2466:	2a2d      	cmp	r2, #45	; 0x2d
    2468:	d00d      	beq.n	2486 <cbvprintf+0x22a>
    246a:	2a30      	cmp	r2, #48	; 0x30
    246c:	f47f af2b 	bne.w	22c6 <cbvprintf+0x6a>
    2470:	2301      	movs	r3, #1
	} while (loop);
    2472:	e71a      	b.n	22aa <cbvprintf+0x4e>
		switch (*sp) {
    2474:	f04f 0c01 	mov.w	ip, #1
    2478:	e717      	b.n	22aa <cbvprintf+0x4e>
    247a:	f04f 0e01 	mov.w	lr, #1
    247e:	e714      	b.n	22aa <cbvprintf+0x4e>
    2480:	f04f 0801 	mov.w	r8, #1
    2484:	e711      	b.n	22aa <cbvprintf+0x4e>
    2486:	2001      	movs	r0, #1
    2488:	e70f      	b.n	22aa <cbvprintf+0x4e>
	size_t width = extract_decimal(&sp);
    248a:	a80e      	add	r0, sp, #56	; 0x38
    248c:	f7ff fe84 	bl	2198 <extract_decimal>
	if (sp != wp) {
    2490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2492:	42bb      	cmp	r3, r7
    2494:	f43f af5b 	beq.w	234e <cbvprintf+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    2498:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    249c:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    249e:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    24a0:	f360 0241 	bfi	r2, r0, #1, #1
    24a4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    24a8:	e751      	b.n	234e <cbvprintf+0xf2>
	size_t prec = extract_decimal(&sp);
    24aa:	a80e      	add	r0, sp, #56	; 0x38
    24ac:	f7ff fe74 	bl	2198 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    24b0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    24b4:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    24b6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    24ba:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    24be:	f362 0341 	bfi	r3, r2, #1, #1
    24c2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    24c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    24c8:	e75a      	b.n	2380 <cbvprintf+0x124>
	switch (*sp) {
    24ca:	2a74      	cmp	r2, #116	; 0x74
    24cc:	d026      	beq.n	251c <cbvprintf+0x2c0>
    24ce:	2a7a      	cmp	r2, #122	; 0x7a
    24d0:	f47f af65 	bne.w	239e <cbvprintf+0x142>
		conv->length_mod = LENGTH_Z;
    24d4:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    24d8:	2106      	movs	r1, #6
    24da:	e00c      	b.n	24f6 <cbvprintf+0x29a>
		if (*++sp == 'h') {
    24dc:	785a      	ldrb	r2, [r3, #1]
    24de:	2a68      	cmp	r2, #104	; 0x68
    24e0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    24e4:	d106      	bne.n	24f4 <cbvprintf+0x298>
			conv->length_mod = LENGTH_HH;
    24e6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    24e8:	f361 02c6 	bfi	r2, r1, #3, #4
    24ec:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    24f0:	3302      	adds	r3, #2
    24f2:	e754      	b.n	239e <cbvprintf+0x142>
			conv->length_mod = LENGTH_H;
    24f4:	2102      	movs	r1, #2
    24f6:	f361 02c6 	bfi	r2, r1, #3, #4
    24fa:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    24fe:	3301      	adds	r3, #1
    2500:	e74d      	b.n	239e <cbvprintf+0x142>
		if (*++sp == 'l') {
    2502:	785a      	ldrb	r2, [r3, #1]
    2504:	2a6c      	cmp	r2, #108	; 0x6c
    2506:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    250a:	d101      	bne.n	2510 <cbvprintf+0x2b4>
			conv->length_mod = LENGTH_LL;
    250c:	2104      	movs	r1, #4
    250e:	e7eb      	b.n	24e8 <cbvprintf+0x28c>
			conv->length_mod = LENGTH_L;
    2510:	2103      	movs	r1, #3
    2512:	e7f0      	b.n	24f6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    2514:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2518:	2105      	movs	r1, #5
    251a:	e7ec      	b.n	24f6 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    251c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2520:	2107      	movs	r1, #7
    2522:	e7e8      	b.n	24f6 <cbvprintf+0x29a>
		conv->unsupported = true;
    2524:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2528:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    252c:	f022 0202 	bic.w	r2, r2, #2
    2530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2534:	f042 0202 	orr.w	r2, r2, #2
    2538:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    253c:	e7df      	b.n	24fe <cbvprintf+0x2a2>
	switch (conv->specifier) {
    253e:	3a6e      	subs	r2, #110	; 0x6e
    2540:	b2d3      	uxtb	r3, r2
    2542:	2201      	movs	r2, #1
    2544:	409a      	lsls	r2, r3
    2546:	f240 4382 	movw	r3, #1154	; 0x482
    254a:	421a      	tst	r2, r3
    254c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2550:	d139      	bne.n	25c6 <cbvprintf+0x36a>
    2552:	f012 0f24 	tst.w	r2, #36	; 0x24
    2556:	d161      	bne.n	261c <cbvprintf+0x3c0>
    2558:	07d1      	lsls	r1, r2, #31
    255a:	d52d      	bpl.n	25b8 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_PTR;
    255c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2560:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2564:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2568:	2103      	movs	r1, #3
    256a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    256e:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    2572:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2576:	eb43 030c 	adc.w	r3, r3, ip
    257a:	e041      	b.n	2600 <cbvprintf+0x3a4>
	switch (conv->specifier) {
    257c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2580:	b2c9      	uxtb	r1, r1
    2582:	2001      	movs	r0, #1
    2584:	fa00 f101 	lsl.w	r1, r0, r1
    2588:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    258c:	f47f af1f 	bne.w	23ce <cbvprintf+0x172>
    2590:	f640 0301 	movw	r3, #2049	; 0x801
    2594:	4219      	tst	r1, r3
    2596:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    259a:	d11a      	bne.n	25d2 <cbvprintf+0x376>
    259c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    25a0:	d00a      	beq.n	25b8 <cbvprintf+0x35c>
		conv->specifier_cat = SPECIFIER_SINT;
    25a2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    25a6:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25aa:	f003 0378 	and.w	r3, r3, #120	; 0x78
    25ae:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    25b0:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25b4:	f47f af2d 	bne.w	2412 <cbvprintf+0x1b6>
		conv->invalid = true;
    25b8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    25bc:	f043 0301 	orr.w	r3, r3, #1
    25c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    25c4:	e725      	b.n	2412 <cbvprintf+0x1b6>
		conv->specifier_cat = SPECIFIER_UINT;
    25c6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    25ca:	2102      	movs	r1, #2
    25cc:	f361 0202 	bfi	r2, r1, #0, #3
    25d0:	e7eb      	b.n	25aa <cbvprintf+0x34e>
    25d2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    25d6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    25d8:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    25dc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25e0:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    25e2:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    25e6:	bf02      	ittt	eq
    25e8:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    25ec:	f041 0101 	orreq.w	r1, r1, #1
    25f0:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    25f4:	2a63      	cmp	r2, #99	; 0x63
    25f6:	f47f af0c 	bne.w	2412 <cbvprintf+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    25fa:	3b00      	subs	r3, #0
    25fc:	bf18      	it	ne
    25fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2600:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2604:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2608:	430b      	orrs	r3, r1
    260a:	f363 0241 	bfi	r2, r3, #1, #1
    260e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2612:	e704      	b.n	241e <cbvprintf+0x1c2>
		} else if ((conv->length_mod != LENGTH_NONE)
    2614:	f013 0f38 	tst.w	r3, #56	; 0x38
    2618:	d1ce      	bne.n	25b8 <cbvprintf+0x35c>
    261a:	e6fa      	b.n	2412 <cbvprintf+0x1b6>
		conv->specifier_cat = SPECIFIER_PTR;
    261c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2620:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2622:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2626:	f361 0202 	bfi	r2, r1, #0, #3
    262a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    262e:	bf14      	ite	ne
    2630:	2301      	movne	r3, #1
    2632:	2300      	moveq	r3, #0
    2634:	e7e4      	b.n	2600 <cbvprintf+0x3a4>
			unsupported = true;
    2636:	2301      	movs	r3, #1
    2638:	e7e2      	b.n	2600 <cbvprintf+0x3a4>
		} else if (conv->width_present) {
    263a:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    263e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2640:	bfb4      	ite	lt
    2642:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    2644:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    2648:	e6fb      	b.n	2442 <cbvprintf+0x1e6>
		} else if (conv->prec_present) {
    264a:	0799      	lsls	r1, r3, #30
    264c:	f57f af08 	bpl.w	2460 <cbvprintf+0x204>
			precision = conv->prec_value;
    2650:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    2652:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    2656:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2658:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    265c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2660:	f003 0207 	and.w	r2, r3, #7
    2664:	2a04      	cmp	r2, #4
    2666:	d107      	bne.n	2678 <cbvprintf+0x41c>
		    && !conv->prec_present) {
    2668:	078a      	lsls	r2, r1, #30
    266a:	d405      	bmi.n	2678 <cbvprintf+0x41c>
			if (conv->specifier_a) {
    266c:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    2670:	2a00      	cmp	r2, #0
    2672:	bfac      	ite	ge
    2674:	2706      	movge	r7, #6
    2676:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    2678:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    267c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    267e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2682:	d133      	bne.n	26ec <cbvprintf+0x490>
			switch (length_mod) {
    2684:	1ecb      	subs	r3, r1, #3
    2686:	2b04      	cmp	r3, #4
    2688:	d804      	bhi.n	2694 <cbvprintf+0x438>
    268a:	e8df f003 	tbb	[pc, r3]
    268e:	4610      	.short	0x4610
    2690:	1046      	.short	0x1046
    2692:	10          	.byte	0x10
    2693:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2694:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2696:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2698:	ea4f 72e3 	mov.w	r2, r3, asr #31
    269c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    26a0:	d10b      	bne.n	26ba <cbvprintf+0x45e>
				value->sint = (char)value->sint;
    26a2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    26a6:	9310      	str	r3, [sp, #64]	; 0x40
    26a8:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    26aa:	9311      	str	r3, [sp, #68]	; 0x44
    26ac:	e007      	b.n	26be <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    26ae:	f854 3b04 	ldr.w	r3, [r4], #4
    26b2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    26b4:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    26b8:	e002      	b.n	26c0 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
    26ba:	2902      	cmp	r1, #2
    26bc:	d011      	beq.n	26e2 <cbvprintf+0x486>
				value->sint = va_arg(ap, int);
    26be:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    26c0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    26c4:	9307      	str	r3, [sp, #28]
    26c6:	079b      	lsls	r3, r3, #30
    26c8:	d047      	beq.n	275a <cbvprintf+0x4fe>
			OUTS(sp, fp);
    26ca:	9b06      	ldr	r3, [sp, #24]
    26cc:	9903      	ldr	r1, [sp, #12]
    26ce:	4632      	mov	r2, r6
    26d0:	4650      	mov	r0, sl
    26d2:	f007 f8c2 	bl	985a <outs>
    26d6:	2800      	cmp	r0, #0
    26d8:	f2c0 8354 	blt.w	2d84 <cbvprintf+0xb28>
    26dc:	4405      	add	r5, r0
			continue;
    26de:	9e06      	ldr	r6, [sp, #24]
    26e0:	e5c4      	b.n	226c <cbvprintf+0x10>
				value->sint = (short)value->sint;
    26e2:	b21a      	sxth	r2, r3
    26e4:	9210      	str	r2, [sp, #64]	; 0x40
    26e6:	f343 33c0 	sbfx	r3, r3, #15, #1
    26ea:	e7de      	b.n	26aa <cbvprintf+0x44e>
		} else if (specifier_cat == SPECIFIER_UINT) {
    26ec:	2b02      	cmp	r3, #2
    26ee:	d124      	bne.n	273a <cbvprintf+0x4de>
			switch (length_mod) {
    26f0:	1ecb      	subs	r3, r1, #3
    26f2:	2b04      	cmp	r3, #4
    26f4:	d804      	bhi.n	2700 <cbvprintf+0x4a4>
    26f6:	e8df f003 	tbb	[pc, r3]
    26fa:	1018      	.short	0x1018
    26fc:	1810      	.short	0x1810
    26fe:	18          	.byte	0x18
    26ff:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2700:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2702:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2706:	f04f 0200 	mov.w	r2, #0
    270a:	d014      	beq.n	2736 <cbvprintf+0x4da>
			} else if (length_mod == LENGTH_H) {
    270c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    270e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2712:	d1d5      	bne.n	26c0 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
    2714:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2716:	9310      	str	r3, [sp, #64]	; 0x40
    2718:	e7d2      	b.n	26c0 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
    271a:	3407      	adds	r4, #7
    271c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2720:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2724:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2728:	e7ca      	b.n	26c0 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap, size_t);
    272a:	f854 3b04 	ldr.w	r3, [r4], #4
    272e:	9310      	str	r3, [sp, #64]	; 0x40
    2730:	2300      	movs	r3, #0
    2732:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2734:	e7c4      	b.n	26c0 <cbvprintf+0x464>
				value->uint = (unsigned char)value->uint;
    2736:	b2db      	uxtb	r3, r3
    2738:	e7bc      	b.n	26b4 <cbvprintf+0x458>
		} else if (specifier_cat == SPECIFIER_FP) {
    273a:	2b04      	cmp	r3, #4
    273c:	d108      	bne.n	2750 <cbvprintf+0x4f4>
					(sint_value_type)va_arg(ap, long long);
    273e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2740:	f024 0407 	bic.w	r4, r4, #7
    2744:	e9d4 2300 	ldrd	r2, r3, [r4]
    2748:	3408      	adds	r4, #8
    274a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    274e:	e7b7      	b.n	26c0 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2750:	2b03      	cmp	r3, #3
    2752:	d1b5      	bne.n	26c0 <cbvprintf+0x464>
			value->ptr = va_arg(ap, void *);
    2754:	f854 3b04 	ldr.w	r3, [r4], #4
    2758:	e7dd      	b.n	2716 <cbvprintf+0x4ba>
		switch (conv->specifier) {
    275a:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    275e:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    2762:	d8bc      	bhi.n	26de <cbvprintf+0x482>
    2764:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    2768:	d849      	bhi.n	27fe <cbvprintf+0x5a2>
    276a:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    276e:	f000 8091 	beq.w	2894 <cbvprintf+0x638>
    2772:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    2776:	d9b2      	bls.n	26de <cbvprintf+0x482>
    2778:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    277c:	d003      	beq.n	2786 <cbvprintf+0x52a>
    277e:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    2782:	2a02      	cmp	r2, #2
    2784:	d8ab      	bhi.n	26de <cbvprintf+0x482>
	} u = {
    2786:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    278a:	2a00      	cmp	r2, #0
    278c:	f2c0 8136 	blt.w	29fc <cbvprintf+0x7a0>
	} else if (conv->flag_plus) {
    2790:	9b07      	ldr	r3, [sp, #28]
    2792:	0718      	lsls	r0, r3, #28
    2794:	f100 8135 	bmi.w	2a02 <cbvprintf+0x7a6>
	} else if (conv->flag_space) {
    2798:	f3c3 1900 	ubfx	r9, r3, #4, #1
    279c:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    27a0:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    27a4:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    27a8:	2800      	cmp	r0, #0
    27aa:	f040 812d 	bne.w	2a08 <cbvprintf+0x7ac>
    27ae:	ea51 0602 	orrs.w	r6, r1, r2
    27b2:	bf14      	ite	ne
    27b4:	2601      	movne	r6, #1
    27b6:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    27b8:	02d2      	lsls	r2, r2, #11
    27ba:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    27be:	02c9      	lsls	r1, r1, #11
		c = 'f';
    27c0:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    27c4:	ea40 0e01 	orr.w	lr, r0, r1
    27c8:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    27cc:	bf08      	it	eq
    27ce:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    27d2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    27d6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    27da:	f000 819e 	beq.w	2b1a <cbvprintf+0x8be>
		if (is_subnormal) {
    27de:	2e00      	cmp	r6, #0
    27e0:	f040 8149 	bne.w	2a76 <cbvprintf+0x81a>
		fract |= BIT_63;
    27e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    27e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    27ea:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    27ee:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    27f0:	2000      	movs	r0, #0
    27f2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    27f6:	4606      	mov	r6, r0
		fract *= 5U;
    27f8:	f04f 0c05 	mov.w	ip, #5
    27fc:	e155      	b.n	2aaa <cbvprintf+0x84e>
		switch (conv->specifier) {
    27fe:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    2802:	2a20      	cmp	r2, #32
    2804:	f63f af6b 	bhi.w	26de <cbvprintf+0x482>
    2808:	a001      	add	r0, pc, #4	; (adr r0, 2810 <cbvprintf+0x5b4>)
    280a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    280e:	bf00      	nop
    2810:	0000299b 	.word	0x0000299b
    2814:	000026df 	.word	0x000026df
    2818:	000026df 	.word	0x000026df
    281c:	000026df 	.word	0x000026df
    2820:	000026df 	.word	0x000026df
    2824:	000026df 	.word	0x000026df
    2828:	000026df 	.word	0x000026df
    282c:	000026df 	.word	0x000026df
    2830:	000026df 	.word	0x000026df
    2834:	00002787 	.word	0x00002787
    2838:	000026df 	.word	0x000026df
    283c:	0000291f 	.word	0x0000291f
    2840:	00002933 	.word	0x00002933
    2844:	00002787 	.word	0x00002787
    2848:	00002787 	.word	0x00002787
    284c:	00002787 	.word	0x00002787
    2850:	000026df 	.word	0x000026df
    2854:	00002933 	.word	0x00002933
    2858:	000026df 	.word	0x000026df
    285c:	000026df 	.word	0x000026df
    2860:	000026df 	.word	0x000026df
    2864:	000026df 	.word	0x000026df
    2868:	000029d5 	.word	0x000029d5
    286c:	0000299b 	.word	0x0000299b
    2870:	000029a1 	.word	0x000029a1
    2874:	000026df 	.word	0x000026df
    2878:	000026df 	.word	0x000026df
    287c:	0000289b 	.word	0x0000289b
    2880:	000026df 	.word	0x000026df
    2884:	0000299b 	.word	0x0000299b
    2888:	000026df 	.word	0x000026df
    288c:	000026df 	.word	0x000026df
    2890:	0000299b 	.word	0x0000299b
			OUTC('%');
    2894:	9903      	ldr	r1, [sp, #12]
    2896:	4658      	mov	r0, fp
    2898:	e4f2      	b.n	2280 <cbvprintf+0x24>
			if (precision >= 0) {
    289a:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    289c:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    289e:	db3a      	blt.n	2916 <cbvprintf+0x6ba>
				len = strnlen(bps, precision);
    28a0:	4639      	mov	r1, r7
    28a2:	4630      	mov	r0, r6
    28a4:	f007 fc90 	bl	a1c8 <strnlen>
			bpe = bps + len;
    28a8:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    28aa:	2e00      	cmp	r6, #0
    28ac:	f43f af17 	beq.w	26de <cbvprintf+0x482>
		char sign = 0;
    28b0:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    28b4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    28b8:	f013 0210 	ands.w	r2, r3, #16
    28bc:	9205      	str	r2, [sp, #20]
    28be:	f000 8256 	beq.w	2d6e <cbvprintf+0xb12>
			nj_len += 2U;
    28c2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    28c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    28c8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    28cc:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    28ce:	bf18      	it	ne
    28d0:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    28d2:	f8cd 801c 	str.w	r8, [sp, #28]
    28d6:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    28d8:	bf18      	it	ne
    28da:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    28dc:	9b04      	ldr	r3, [sp, #16]
    28de:	2b00      	cmp	r3, #0
    28e0:	f340 8260 	ble.w	2da4 <cbvprintf+0xb48>
			if (!conv->flag_dash) {
    28e4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    28e8:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
    28ea:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
    28ec:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    28ee:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    28f2:	f100 8257 	bmi.w	2da4 <cbvprintf+0xb48>
				if (conv->flag_zero) {
    28f6:	0651      	lsls	r1, r2, #25
    28f8:	f140 8247 	bpl.w	2d8a <cbvprintf+0xb2e>
					if (sign != 0) {
    28fc:	f1b9 0f00 	cmp.w	r9, #0
    2900:	d007      	beq.n	2912 <cbvprintf+0x6b6>
						OUTC(sign);
    2902:	9903      	ldr	r1, [sp, #12]
    2904:	4648      	mov	r0, r9
    2906:	47d0      	blx	sl
    2908:	2800      	cmp	r0, #0
    290a:	f2c0 823b 	blt.w	2d84 <cbvprintf+0xb28>
    290e:	3501      	adds	r5, #1
						sign = 0;
    2910:	46d9      	mov	r9, fp
					pad = '0';
    2912:	2230      	movs	r2, #48	; 0x30
    2914:	e23a      	b.n	2d8c <cbvprintf+0xb30>
				len = strlen(bps);
    2916:	4630      	mov	r0, r6
    2918:	f7fe fa02 	bl	d20 <strlen>
    291c:	e7c4      	b.n	28a8 <cbvprintf+0x64c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    291e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2920:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    2924:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    2928:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    292c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    292e:	2001      	movs	r0, #1
    2930:	e7c0      	b.n	28b4 <cbvprintf+0x658>
			if (conv->flag_plus) {
    2932:	9b07      	ldr	r3, [sp, #28]
    2934:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    2936:	bf58      	it	pl
    2938:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    293c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    2940:	bf54      	ite	pl
    2942:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    2946:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    294a:	2b00      	cmp	r3, #0
    294c:	da06      	bge.n	295c <cbvprintf+0x700>
				value->uint = (uint_value_type)-sint;
    294e:	4252      	negs	r2, r2
    2950:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2954:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2958:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    295c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2960:	9300      	str	r3, [sp, #0]
    2962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2966:	ab17      	add	r3, sp, #92	; 0x5c
    2968:	aa12      	add	r2, sp, #72	; 0x48
    296a:	f7ff fc2b 	bl	21c4 <encode_uint>
    296e:	4606      	mov	r6, r0
			if (precision >= 0) {
    2970:	2f00      	cmp	r7, #0
    2972:	db0c      	blt.n	298e <cbvprintf+0x732>
				conv->flag_zero = false;
    2974:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2978:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    297c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    297e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2982:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    2984:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2988:	d901      	bls.n	298e <cbvprintf+0x732>
					conv->pad0_value = precision - (int)len;
    298a:	1afb      	subs	r3, r7, r3
    298c:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    298e:	2e00      	cmp	r6, #0
    2990:	f43f aea5 	beq.w	26de <cbvprintf+0x482>
    2994:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    2998:	e05b      	b.n	2a52 <cbvprintf+0x7f6>
		switch (conv->specifier) {
    299a:	f04f 0900 	mov.w	r9, #0
    299e:	e7dd      	b.n	295c <cbvprintf+0x700>
			if (value->ptr != NULL) {
    29a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    29a2:	2800      	cmp	r0, #0
    29a4:	f000 81de 	beq.w	2d64 <cbvprintf+0xb08>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    29a8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    29ac:	9300      	str	r3, [sp, #0]
    29ae:	aa12      	add	r2, sp, #72	; 0x48
    29b0:	ab17      	add	r3, sp, #92	; 0x5c
    29b2:	2100      	movs	r1, #0
    29b4:	f7ff fc06 	bl	21c4 <encode_uint>
				conv->altform_0c = true;
    29b8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    29bc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    29c0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    29c4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    29c8:	4606      	mov	r6, r0
				conv->altform_0c = true;
    29ca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    29ce:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    29d2:	e7cd      	b.n	2970 <cbvprintf+0x714>
				store_count(conv, value->ptr, count);
    29d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    29d6:	2907      	cmp	r1, #7
    29d8:	f63f ae81 	bhi.w	26de <cbvprintf+0x482>
    29dc:	e8df f001 	tbb	[pc, r1]
    29e0:	0c06040c 	.word	0x0c06040c
    29e4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    29e8:	701d      	strb	r5, [r3, #0]
		break;
    29ea:	e678      	b.n	26de <cbvprintf+0x482>
		*(short *)dp = (short)count;
    29ec:	801d      	strh	r5, [r3, #0]
		break;
    29ee:	e676      	b.n	26de <cbvprintf+0x482>
		*(intmax_t *)dp = (intmax_t)count;
    29f0:	17ea      	asrs	r2, r5, #31
    29f2:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    29f6:	e672      	b.n	26de <cbvprintf+0x482>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    29f8:	601d      	str	r5, [r3, #0]
		break;
    29fa:	e670      	b.n	26de <cbvprintf+0x482>
		*sign = '-';
    29fc:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2a00:	e6ce      	b.n	27a0 <cbvprintf+0x544>
		*sign = '+';
    2a02:	f04f 092b 	mov.w	r9, #43	; 0x2b
    2a06:	e6cb      	b.n	27a0 <cbvprintf+0x544>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2a08:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2a0c:	42b0      	cmp	r0, r6
    2a0e:	d12f      	bne.n	2a70 <cbvprintf+0x814>
			if (isupper((int)c)) {
    2a10:	f10b 0301 	add.w	r3, fp, #1
    2a14:	489e      	ldr	r0, [pc, #632]	; (2c90 <cbvprintf+0xa34>)
    2a16:	b2db      	uxtb	r3, r3
		if (fract == 0) {
    2a18:	430a      	orrs	r2, r1
    2a1a:	5cc3      	ldrb	r3, [r0, r3]
    2a1c:	f003 0303 	and.w	r3, r3, #3
    2a20:	d11e      	bne.n	2a60 <cbvprintf+0x804>
			if (isupper((int)c)) {
    2a22:	2b01      	cmp	r3, #1
    2a24:	bf0b      	itete	eq
    2a26:	2349      	moveq	r3, #73	; 0x49
    2a28:	2369      	movne	r3, #105	; 0x69
    2a2a:	214e      	moveq	r1, #78	; 0x4e
    2a2c:	216e      	movne	r1, #110	; 0x6e
    2a2e:	bf0c      	ite	eq
    2a30:	2246      	moveq	r2, #70	; 0x46
    2a32:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    2a34:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    2a38:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    2a3c:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    2a40:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    2a44:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    2a48:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    2a4c:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    2a50:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2a52:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    2a54:	f1b9 0f00 	cmp.w	r9, #0
    2a58:	f43f af2c 	beq.w	28b4 <cbvprintf+0x658>
			nj_len += 1U;
    2a5c:	3001      	adds	r0, #1
    2a5e:	e729      	b.n	28b4 <cbvprintf+0x658>
			if (isupper((int)c)) {
    2a60:	2b01      	cmp	r3, #1
    2a62:	bf15      	itete	ne
    2a64:	236e      	movne	r3, #110	; 0x6e
    2a66:	234e      	moveq	r3, #78	; 0x4e
    2a68:	2161      	movne	r1, #97	; 0x61
    2a6a:	2141      	moveq	r1, #65	; 0x41
    2a6c:	461a      	mov	r2, r3
    2a6e:	e7e1      	b.n	2a34 <cbvprintf+0x7d8>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2a70:	2600      	movs	r6, #0
    2a72:	e6a1      	b.n	27b8 <cbvprintf+0x55c>
				expo--;
    2a74:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2a76:	1849      	adds	r1, r1, r1
    2a78:	4152      	adcs	r2, r2
    2a7a:	2a00      	cmp	r2, #0
    2a7c:	dafa      	bge.n	2a74 <cbvprintf+0x818>
    2a7e:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    2a82:	e6af      	b.n	27e4 <cbvprintf+0x588>
			fract >>= 1;
    2a84:	0849      	lsrs	r1, r1, #1
    2a86:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    2a8a:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2a8c:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    2a90:	4640      	mov	r0, r8
			expo++;
    2a92:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2a96:	d2f5      	bcs.n	2a84 <cbvprintf+0x828>
		fract *= 5U;
    2a98:	fb0c fe02 	mul.w	lr, ip, r2
    2a9c:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    2aa0:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    2aa4:	4472      	add	r2, lr
		decexp--;
    2aa6:	3e01      	subs	r6, #1
    2aa8:	2001      	movs	r0, #1
	while (expo < -2) {
    2aaa:	f118 0f02 	cmn.w	r8, #2
    2aae:	dbe9      	blt.n	2a84 <cbvprintf+0x828>
    2ab0:	b108      	cbz	r0, 2ab6 <cbvprintf+0x85a>
    2ab2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    2ab6:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    2aba:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    2abe:	dc2f      	bgt.n	2b20 <cbvprintf+0x8c4>
	fract >>= (4 - expo);
    2ac0:	f1c8 0004 	rsb	r0, r8, #4
    2ac4:	f108 081c 	add.w	r8, r8, #28
    2ac8:	f1a0 0c20 	sub.w	ip, r0, #32
    2acc:	40c2      	lsrs	r2, r0
    2ace:	fa21 f300 	lsr.w	r3, r1, r0
    2ad2:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    2ad6:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    2ada:	ea42 0208 	orr.w	r2, r2, r8
    2ade:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    2ae2:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    2ae4:	ea42 020c 	orr.w	r2, r2, ip
    2ae8:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    2aea:	d13a      	bne.n	2b62 <cbvprintf+0x906>
		if (decexp < (-4 + 1) || decexp > precision) {
    2aec:	1cf3      	adds	r3, r6, #3
    2aee:	db01      	blt.n	2af4 <cbvprintf+0x898>
    2af0:	42b7      	cmp	r7, r6
    2af2:	da2b      	bge.n	2b4c <cbvprintf+0x8f0>
			c += 'e' - 'g';  /* e or E */
    2af4:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    2af8:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2afa:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    2afe:	dd7f      	ble.n	2c00 <cbvprintf+0x9a4>
		if (!conv->flag_hash && (precision > 0)) {
    2b00:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    2b04:	0680      	lsls	r0, r0, #26
				precision--;
    2b06:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    2b0a:	d479      	bmi.n	2c00 <cbvprintf+0x9a4>
    2b0c:	1e3b      	subs	r3, r7, #0
    2b0e:	bf18      	it	ne
    2b10:	2301      	movne	r3, #1
	bool prune_zero = false;
    2b12:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    2b14:	f107 0801 	add.w	r8, r7, #1
    2b18:	e02d      	b.n	2b76 <cbvprintf+0x91a>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2b1a:	f04f 0800 	mov.w	r8, #0
    2b1e:	e667      	b.n	27f0 <cbvprintf+0x594>
		fract += 2;
    2b20:	3202      	adds	r2, #2
    2b22:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    2b26:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    2b28:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    2b2c:	f006 fe66 	bl	97fc <_ldiv5>
		expo--;
    2b30:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    2b34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    2b38:	3601      	adds	r6, #1
			fract <<= 1;
    2b3a:	1892      	adds	r2, r2, r2
    2b3c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2b3e:	2900      	cmp	r1, #0
			expo--;
    2b40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    2b44:	daf9      	bge.n	2b3a <cbvprintf+0x8de>
    2b46:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    2b4a:	e7b4      	b.n	2ab6 <cbvprintf+0x85a>
		if (!conv->flag_hash && (precision > 0)) {
    2b4c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2b50:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    2b52:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    2b56:	d451      	bmi.n	2bfc <cbvprintf+0x9a0>
    2b58:	1e3b      	subs	r3, r7, #0
    2b5a:	bf18      	it	ne
    2b5c:	2301      	movne	r3, #1
	bool prune_zero = false;
    2b5e:	9305      	str	r3, [sp, #20]
    2b60:	e004      	b.n	2b6c <cbvprintf+0x910>
    2b62:	2300      	movs	r3, #0
	if (c == 'f') {
    2b64:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    2b68:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    2b6a:	d1d3      	bne.n	2b14 <cbvprintf+0x8b8>
		if (decimals < 0) {
    2b6c:	eb17 0806 	adds.w	r8, r7, r6
    2b70:	f04f 0b66 	mov.w	fp, #102	; 0x66
    2b74:	d446      	bmi.n	2c04 <cbvprintf+0x9a8>
	if (decimals > 16) {
    2b76:	f1b8 0f10 	cmp.w	r8, #16
    2b7a:	bfa8      	it	ge
    2b7c:	f04f 0810 	movge.w	r8, #16
    2b80:	2010      	movs	r0, #16
    2b82:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    2b84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    2b88:	2000      	movs	r0, #0
    2b8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    2b8e:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    2b92:	f1b8 0f00 	cmp.w	r8, #0
    2b96:	d138      	bne.n	2c0a <cbvprintf+0x9ae>
	fract += round;
    2b98:	9908      	ldr	r1, [sp, #32]
    2b9a:	1812      	adds	r2, r2, r0
    2b9c:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    2ba0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    2ba4:	d23f      	bcs.n	2c26 <cbvprintf+0x9ca>
	fract += round;
    2ba6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    2baa:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    2bac:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    2bb0:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    2bb4:	f040 80b5 	bne.w	2d22 <cbvprintf+0xac6>
		if (decexp > 0) {
    2bb8:	2e00      	cmp	r6, #0
    2bba:	dc3f      	bgt.n	2c3c <cbvprintf+0x9e0>
			*buf++ = '0';
    2bbc:	2130      	movs	r1, #48	; 0x30
    2bbe:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    2bc2:	2a00      	cmp	r2, #0
    2bc4:	d166      	bne.n	2c94 <cbvprintf+0xa38>
    2bc6:	2f00      	cmp	r7, #0
    2bc8:	f340 81af 	ble.w	2f2a <cbvprintf+0xcce>
			*buf++ = '.';
    2bcc:	222e      	movs	r2, #46	; 0x2e
    2bce:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2bd2:	b186      	cbz	r6, 2bf6 <cbvprintf+0x99a>
			conv->pad0_value = -decexp;
    2bd4:	4272      	negs	r2, r6
    2bd6:	42ba      	cmp	r2, r7
    2bd8:	bfa8      	it	ge
    2bda:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    2bdc:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2be0:	9213      	str	r2, [sp, #76]	; 0x4c
    2be2:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    2be4:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    2be8:	bfd4      	ite	le
    2bea:	2200      	movle	r2, #0
    2bec:	2201      	movgt	r2, #1
    2bee:	f362 1145 	bfi	r1, r2, #5, #1
    2bf2:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    2bf6:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    2bfa:	e037      	b.n	2c6c <cbvprintf+0xa10>
	bool prune_zero = false;
    2bfc:	2300      	movs	r3, #0
    2bfe:	e7ae      	b.n	2b5e <cbvprintf+0x902>
    2c00:	2300      	movs	r3, #0
    2c02:	e786      	b.n	2b12 <cbvprintf+0x8b6>
			decimals = 0;
    2c04:	f04f 0800 	mov.w	r8, #0
    2c08:	e7ba      	b.n	2b80 <cbvprintf+0x924>
	*v >>= 1;
    2c0a:	0840      	lsrs	r0, r0, #1
    2c0c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    2c10:	085b      	lsrs	r3, r3, #1
    2c12:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    2c16:	a80e      	add	r0, sp, #56	; 0x38
    2c18:	9209      	str	r2, [sp, #36]	; 0x24
    2c1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2c1e:	f006 fded 	bl	97fc <_ldiv5>
    2c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    2c24:	e7b3      	b.n	2b8e <cbvprintf+0x932>
	*v >>= 1;
    2c26:	0852      	lsrs	r2, r2, #1
    2c28:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    2c2c:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    2c2e:	0849      	lsrs	r1, r1, #1
    2c30:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    2c34:	3601      	adds	r6, #1
	_ldiv5(v);
    2c36:	f006 fde1 	bl	97fc <_ldiv5>
		decexp++;
    2c3a:	e7b6      	b.n	2baa <cbvprintf+0x94e>
	char *buf = bps;
    2c3c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    2c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2c42:	2900      	cmp	r1, #0
    2c44:	dd09      	ble.n	2c5a <cbvprintf+0x9fe>
				*buf++ = _get_digit(&fract, &digit_count);
    2c46:	a90b      	add	r1, sp, #44	; 0x2c
    2c48:	a80c      	add	r0, sp, #48	; 0x30
    2c4a:	9207      	str	r2, [sp, #28]
    2c4c:	f006 fdee 	bl	982c <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2c50:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2c52:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    2c56:	9a07      	ldr	r2, [sp, #28]
    2c58:	d1f2      	bne.n	2c40 <cbvprintf+0x9e4>
			conv->pad0_value = decexp;
    2c5a:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    2c5c:	b99a      	cbnz	r2, 2c86 <cbvprintf+0xa2a>
    2c5e:	2f00      	cmp	r7, #0
    2c60:	f340 8161 	ble.w	2f26 <cbvprintf+0xcca>
			*buf++ = '.';
    2c64:	212e      	movs	r1, #46	; 0x2e
    2c66:	f808 1b01 	strb.w	r1, [r8], #1
    2c6a:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    2c6c:	2f00      	cmp	r7, #0
    2c6e:	dd1a      	ble.n	2ca6 <cbvprintf+0xa4a>
    2c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2c72:	2a00      	cmp	r2, #0
    2c74:	dd17      	ble.n	2ca6 <cbvprintf+0xa4a>
		*buf++ = _get_digit(&fract, &digit_count);
    2c76:	a90b      	add	r1, sp, #44	; 0x2c
    2c78:	a80c      	add	r0, sp, #48	; 0x30
    2c7a:	f006 fdd7 	bl	982c <_get_digit>
		precision--;
    2c7e:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    2c80:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    2c84:	e7f2      	b.n	2c6c <cbvprintf+0xa10>
			*buf++ = '.';
    2c86:	222e      	movs	r2, #46	; 0x2e
    2c88:	f808 2b01 	strb.w	r2, [r8], #1
    2c8c:	e7ed      	b.n	2c6a <cbvprintf+0xa0e>
    2c8e:	bf00      	nop
    2c90:	0000c22e 	.word	0x0000c22e
    2c94:	222e      	movs	r2, #46	; 0x2e
    2c96:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2c9a:	2e00      	cmp	r6, #0
    2c9c:	d0ab      	beq.n	2bf6 <cbvprintf+0x99a>
    2c9e:	2f00      	cmp	r7, #0
    2ca0:	dc98      	bgt.n	2bd4 <cbvprintf+0x978>
			*buf++ = '.';
    2ca2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    2ca6:	9b05      	ldr	r3, [sp, #20]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d14e      	bne.n	2d4a <cbvprintf+0xaee>
	conv->pad0_pre_exp = precision;
    2cac:	9714      	str	r7, [sp, #80]	; 0x50
    2cae:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    2cb0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    2cb4:	2a45      	cmp	r2, #69	; 0x45
    2cb6:	d123      	bne.n	2d00 <cbvprintf+0xaa4>
		if (decexp < 0) {
    2cb8:	2e00      	cmp	r6, #0
			decexp = -decexp;
    2cba:	bfba      	itte	lt
    2cbc:	4276      	neglt	r6, r6
			*buf++ = '-';
    2cbe:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2cc0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    2cc2:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    2cc4:	bfc8      	it	gt
    2cc6:	2164      	movgt	r1, #100	; 0x64
    2cc8:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    2cca:	bfd1      	iteee	le
    2ccc:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    2cce:	fbb6 f3f1 	udivgt	r3, r6, r1
    2cd2:	1cfa      	addgt	r2, r7, #3
    2cd4:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    2cd8:	bfc8      	it	gt
    2cda:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    2cde:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    2ce2:	bfc8      	it	gt
    2ce4:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    2ce6:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    2cea:	fbb6 f3f1 	udiv	r3, r6, r1
    2cee:	4617      	mov	r7, r2
    2cf0:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2cf4:	fb01 6313 	mls	r3, r1, r3, r6
    2cf8:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2cfa:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    2cfe:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    2d00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2d02:	2b00      	cmp	r3, #0
    2d04:	dc2c      	bgt.n	2d60 <cbvprintf+0xb04>
    2d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2d08:	2b00      	cmp	r3, #0
    2d0a:	bfd4      	ite	le
    2d0c:	2300      	movle	r3, #0
    2d0e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2d10:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2d14:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2d18:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2d1a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    2d1e:	703b      	strb	r3, [r7, #0]
	return bps;
    2d20:	e696      	b.n	2a50 <cbvprintf+0x7f4>
		*buf = _get_digit(&fract, &digit_count);
    2d22:	a90b      	add	r1, sp, #44	; 0x2c
    2d24:	a80c      	add	r0, sp, #48	; 0x30
    2d26:	9207      	str	r2, [sp, #28]
    2d28:	f006 fd80 	bl	982c <_get_digit>
		if (*buf++ != '0') {
    2d2c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    2d2e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    2d32:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2d34:	bf18      	it	ne
    2d36:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    2d3a:	b912      	cbnz	r2, 2d42 <cbvprintf+0xae6>
    2d3c:	2f00      	cmp	r7, #0
    2d3e:	f340 80f4 	ble.w	2f2a <cbvprintf+0xcce>
			*buf++ = '.';
    2d42:	222e      	movs	r2, #46	; 0x2e
    2d44:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    2d48:	e755      	b.n	2bf6 <cbvprintf+0x99a>
		while (*--buf == '0') {
    2d4a:	4647      	mov	r7, r8
    2d4c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2d50:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2d54:	2a30      	cmp	r2, #48	; 0x30
    2d56:	d0f8      	beq.n	2d4a <cbvprintf+0xaee>
    2d58:	2a2e      	cmp	r2, #46	; 0x2e
    2d5a:	bf08      	it	eq
    2d5c:	4647      	moveq	r7, r8
    2d5e:	e7a7      	b.n	2cb0 <cbvprintf+0xa54>
		|| (conv->pad0_pre_exp > 0);
    2d60:	2301      	movs	r3, #1
    2d62:	e7d5      	b.n	2d10 <cbvprintf+0xab4>
			bpe = bps + 5;
    2d64:	4f72      	ldr	r7, [pc, #456]	; (2f30 <cbvprintf+0xcd4>)
		char sign = 0;
    2d66:	4681      	mov	r9, r0
			bps = "(nil)";
    2d68:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    2d6a:	2005      	movs	r0, #5
    2d6c:	e5a2      	b.n	28b4 <cbvprintf+0x658>
		} else if (conv->altform_0) {
    2d6e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2d70:	bf48      	it	mi
    2d72:	3001      	addmi	r0, #1
    2d74:	e5a6      	b.n	28c4 <cbvprintf+0x668>
					OUTC(pad);
    2d76:	4610      	mov	r0, r2
    2d78:	9209      	str	r2, [sp, #36]	; 0x24
    2d7a:	9903      	ldr	r1, [sp, #12]
    2d7c:	47d0      	blx	sl
    2d7e:	2800      	cmp	r0, #0
    2d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d82:	da05      	bge.n	2d90 <cbvprintf+0xb34>
#undef OUTS
#undef OUTC
}
    2d84:	b01f      	add	sp, #124	; 0x7c
    2d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2d8a:	2220      	movs	r2, #32
					pad = '0';
    2d8c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    2d90:	4659      	mov	r1, fp
    2d92:	2900      	cmp	r1, #0
    2d94:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    2d98:	dced      	bgt.n	2d76 <cbvprintf+0xb1a>
    2d9a:	9b04      	ldr	r3, [sp, #16]
    2d9c:	f8cd b010 	str.w	fp, [sp, #16]
    2da0:	442b      	add	r3, r5
    2da2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    2da4:	f1b9 0f00 	cmp.w	r9, #0
    2da8:	d005      	beq.n	2db6 <cbvprintf+0xb5a>
			OUTC(sign);
    2daa:	9903      	ldr	r1, [sp, #12]
    2dac:	4648      	mov	r0, r9
    2dae:	47d0      	blx	sl
    2db0:	2800      	cmp	r0, #0
    2db2:	dbe7      	blt.n	2d84 <cbvprintf+0xb28>
    2db4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2db6:	9b08      	ldr	r3, [sp, #32]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d079      	beq.n	2eb0 <cbvprintf+0xc54>
			if (conv->specifier_a) {
    2dbc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	db29      	blt.n	2e18 <cbvprintf+0xbbc>
				while (isdigit((int)*cp)) {
    2dc4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2f34 <cbvprintf+0xcd8>
			if (conv->specifier_a) {
    2dc8:	4633      	mov	r3, r6
				while (isdigit((int)*cp)) {
    2dca:	7818      	ldrb	r0, [r3, #0]
    2dcc:	f819 2000 	ldrb.w	r2, [r9, r0]
    2dd0:	0752      	lsls	r2, r2, #29
    2dd2:	469b      	mov	fp, r3
    2dd4:	f103 0301 	add.w	r3, r3, #1
    2dd8:	d43f      	bmi.n	2e5a <cbvprintf+0xbfe>
				if (!conv->pad_postdp) {
    2dda:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2dde:	1bae      	subs	r6, r5, r6
    2de0:	0698      	lsls	r0, r3, #26
    2de2:	445e      	add	r6, fp
    2de4:	d407      	bmi.n	2df6 <cbvprintf+0xb9a>
					while (pad_len-- > 0) {
    2de6:	4642      	mov	r2, r8
    2de8:	2a00      	cmp	r2, #0
    2dea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2dee:	dc3b      	bgt.n	2e68 <cbvprintf+0xc0c>
    2df0:	9b07      	ldr	r3, [sp, #28]
    2df2:	4433      	add	r3, r6
    2df4:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    2df6:	f89b 0000 	ldrb.w	r0, [fp]
    2dfa:	282e      	cmp	r0, #46	; 0x2e
    2dfc:	d10a      	bne.n	2e14 <cbvprintf+0xbb8>
					OUTC(*cp++);
    2dfe:	9903      	ldr	r1, [sp, #12]
    2e00:	47d0      	blx	sl
						OUTC('0');
    2e02:	2800      	cmp	r0, #0
    2e04:	dbbe      	blt.n	2d84 <cbvprintf+0xb28>
					while (pad_len-- > 0) {
    2e06:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    2e0a:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    2e0e:	dc31      	bgt.n	2e74 <cbvprintf+0xc18>
					OUTC(*cp++);
    2e10:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    2e14:	465d      	mov	r5, fp
    2e16:	e038      	b.n	2e8a <cbvprintf+0xc2e>
    2e18:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    2e1a:	f899 0000 	ldrb.w	r0, [r9]
    2e1e:	2870      	cmp	r0, #112	; 0x70
    2e20:	46c8      	mov	r8, r9
    2e22:	f109 0901 	add.w	r9, r9, #1
    2e26:	d113      	bne.n	2e50 <cbvprintf+0xbf4>
    2e28:	1bae      	subs	r6, r5, r6
    2e2a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    2e2c:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    2e2e:	4435      	add	r5, r6
    2e30:	1bab      	subs	r3, r5, r6
    2e32:	2b00      	cmp	r3, #0
    2e34:	dc34      	bgt.n	2ea0 <cbvprintf+0xc44>
			OUTS(cp, bpe);
    2e36:	9903      	ldr	r1, [sp, #12]
    2e38:	463b      	mov	r3, r7
    2e3a:	4642      	mov	r2, r8
    2e3c:	4650      	mov	r0, sl
    2e3e:	f006 fd0c 	bl	985a <outs>
    2e42:	2800      	cmp	r0, #0
    2e44:	db9e      	blt.n	2d84 <cbvprintf+0xb28>
    2e46:	4430      	add	r0, r6
    2e48:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    2e4a:	4605      	mov	r5, r0
    2e4c:	4406      	add	r6, r0
    2e4e:	e065      	b.n	2f1c <cbvprintf+0xcc0>
					OUTC(*cp++);
    2e50:	9903      	ldr	r1, [sp, #12]
    2e52:	47d0      	blx	sl
    2e54:	2800      	cmp	r0, #0
    2e56:	dae0      	bge.n	2e1a <cbvprintf+0xbbe>
    2e58:	e794      	b.n	2d84 <cbvprintf+0xb28>
    2e5a:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    2e5c:	9903      	ldr	r1, [sp, #12]
    2e5e:	47d0      	blx	sl
    2e60:	2800      	cmp	r0, #0
    2e62:	9b05      	ldr	r3, [sp, #20]
    2e64:	dab1      	bge.n	2dca <cbvprintf+0xb6e>
    2e66:	e78d      	b.n	2d84 <cbvprintf+0xb28>
						OUTC('0');
    2e68:	9903      	ldr	r1, [sp, #12]
    2e6a:	2030      	movs	r0, #48	; 0x30
    2e6c:	47d0      	blx	sl
    2e6e:	2800      	cmp	r0, #0
    2e70:	dab9      	bge.n	2de6 <cbvprintf+0xb8a>
    2e72:	e787      	b.n	2d84 <cbvprintf+0xb28>
						OUTC('0');
    2e74:	9903      	ldr	r1, [sp, #12]
    2e76:	2030      	movs	r0, #48	; 0x30
    2e78:	47d0      	blx	sl
    2e7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2e7e:	e7c0      	b.n	2e02 <cbvprintf+0xba6>
					OUTC(*cp++);
    2e80:	9903      	ldr	r1, [sp, #12]
    2e82:	47d0      	blx	sl
    2e84:	2800      	cmp	r0, #0
    2e86:	f6ff af7d 	blt.w	2d84 <cbvprintf+0xb28>
				while (isdigit((int)*cp)) {
    2e8a:	7828      	ldrb	r0, [r5, #0]
    2e8c:	f819 3000 	ldrb.w	r3, [r9, r0]
    2e90:	0759      	lsls	r1, r3, #29
    2e92:	46a8      	mov	r8, r5
    2e94:	f105 0501 	add.w	r5, r5, #1
    2e98:	d4f2      	bmi.n	2e80 <cbvprintf+0xc24>
    2e9a:	eba6 060b 	sub.w	r6, r6, fp
    2e9e:	e7c4      	b.n	2e2a <cbvprintf+0xbce>
				OUTC('0');
    2ea0:	9903      	ldr	r1, [sp, #12]
    2ea2:	2030      	movs	r0, #48	; 0x30
    2ea4:	47d0      	blx	sl
    2ea6:	2800      	cmp	r0, #0
    2ea8:	f6ff af6c 	blt.w	2d84 <cbvprintf+0xb28>
    2eac:	3601      	adds	r6, #1
    2eae:	e7bf      	b.n	2e30 <cbvprintf+0xbd4>
			if (conv->altform_0c | conv->altform_0) {
    2eb0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2eb4:	06da      	lsls	r2, r3, #27
    2eb6:	d401      	bmi.n	2ebc <cbvprintf+0xc60>
    2eb8:	071b      	lsls	r3, r3, #28
    2eba:	d506      	bpl.n	2eca <cbvprintf+0xc6e>
				OUTC('0');
    2ebc:	9903      	ldr	r1, [sp, #12]
    2ebe:	2030      	movs	r0, #48	; 0x30
    2ec0:	47d0      	blx	sl
    2ec2:	2800      	cmp	r0, #0
    2ec4:	f6ff af5e 	blt.w	2d84 <cbvprintf+0xb28>
    2ec8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2eca:	9b05      	ldr	r3, [sp, #20]
    2ecc:	b13b      	cbz	r3, 2ede <cbvprintf+0xc82>
				OUTC(conv->specifier);
    2ece:	9903      	ldr	r1, [sp, #12]
    2ed0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2ed4:	47d0      	blx	sl
    2ed6:	2800      	cmp	r0, #0
    2ed8:	f6ff af54 	blt.w	2d84 <cbvprintf+0xb28>
    2edc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2ede:	44a8      	add	r8, r5
    2ee0:	e006      	b.n	2ef0 <cbvprintf+0xc94>
				OUTC('0');
    2ee2:	9903      	ldr	r1, [sp, #12]
    2ee4:	2030      	movs	r0, #48	; 0x30
    2ee6:	47d0      	blx	sl
    2ee8:	2800      	cmp	r0, #0
    2eea:	f6ff af4b 	blt.w	2d84 <cbvprintf+0xb28>
    2eee:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2ef0:	eba8 0305 	sub.w	r3, r8, r5
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	dcf4      	bgt.n	2ee2 <cbvprintf+0xc86>
			OUTS(bps, bpe);
    2ef8:	9903      	ldr	r1, [sp, #12]
    2efa:	463b      	mov	r3, r7
    2efc:	4632      	mov	r2, r6
    2efe:	4650      	mov	r0, sl
    2f00:	f006 fcab 	bl	985a <outs>
    2f04:	2800      	cmp	r0, #0
    2f06:	f6ff af3d 	blt.w	2d84 <cbvprintf+0xb28>
    2f0a:	4428      	add	r0, r5
    2f0c:	e79c      	b.n	2e48 <cbvprintf+0xbec>
			OUTC(' ');
    2f0e:	9903      	ldr	r1, [sp, #12]
    2f10:	2020      	movs	r0, #32
    2f12:	47d0      	blx	sl
    2f14:	2800      	cmp	r0, #0
    2f16:	f6ff af35 	blt.w	2d84 <cbvprintf+0xb28>
    2f1a:	3501      	adds	r5, #1
		while (width > 0) {
    2f1c:	1b73      	subs	r3, r6, r5
    2f1e:	2b00      	cmp	r3, #0
    2f20:	dcf5      	bgt.n	2f0e <cbvprintf+0xcb2>
    2f22:	f7ff bbdc 	b.w	26de <cbvprintf+0x482>
			decexp = 0;
    2f26:	4616      	mov	r6, r2
    2f28:	e6bd      	b.n	2ca6 <cbvprintf+0xa4a>
		if (*buf++ != '0') {
    2f2a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    2f2e:	e6ba      	b.n	2ca6 <cbvprintf+0xa4a>
    2f30:	0000ac5a 	.word	0x0000ac5a
    2f34:	0000c22f 	.word	0x0000c22f

00002f38 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2f38:	b508      	push	{r3, lr}
	__asm__ volatile(
    2f3a:	f04f 0220 	mov.w	r2, #32
    2f3e:	f3ef 8311 	mrs	r3, BASEPRI
    2f42:	f382 8812 	msr	BASEPRI_MAX, r2
    2f46:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2f4a:	f001 fd4d 	bl	49e8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2f4e:	4803      	ldr	r0, [pc, #12]	; (2f5c <sys_reboot+0x24>)
    2f50:	f006 fb25 	bl	959e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2f54:	f000 fe62 	bl	3c1c <arch_cpu_idle>
    2f58:	e7fc      	b.n	2f54 <sys_reboot+0x1c>
    2f5a:	bf00      	nop
    2f5c:	0000ac5b 	.word	0x0000ac5b

00002f60 <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f62:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2f64:	460c      	mov	r4, r1
    2f66:	b929      	cbnz	r1, 2f74 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2f68:	4d0e      	ldr	r5, [pc, #56]	; (2fa4 <msg_process+0x44>)
    2f6a:	4b0f      	ldr	r3, [pc, #60]	; (2fa8 <msg_process+0x48>)
    2f6c:	1b5b      	subs	r3, r3, r5
    2f6e:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2f70:	42bc      	cmp	r4, r7
    2f72:	db00      	blt.n	2f76 <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2f76:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    2f78:	795b      	ldrb	r3, [r3, #5]
    2f7a:	b17b      	cbz	r3, 2f9c <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    2f7c:	b94e      	cbnz	r6, 2f92 <msg_process+0x32>
    2f7e:	490b      	ldr	r1, [pc, #44]	; (2fac <msg_process+0x4c>)
    2f80:	480b      	ldr	r0, [pc, #44]	; (2fb0 <msg_process+0x50>)
    2f82:	4a0c      	ldr	r2, [pc, #48]	; (2fb4 <msg_process+0x54>)
    2f84:	2386      	movs	r3, #134	; 0x86
    2f86:	f006 fc86 	bl	9896 <assert_print>
    2f8a:	480a      	ldr	r0, [pc, #40]	; (2fb4 <msg_process+0x54>)
    2f8c:	2186      	movs	r1, #134	; 0x86
    2f8e:	f006 fc7b 	bl	9888 <assert_post_action>
	backend->api->process(backend, msg);
    2f92:	682b      	ldr	r3, [r5, #0]
    2f94:	4631      	mov	r1, r6
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	4628      	mov	r0, r5
    2f9a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2f9c:	3401      	adds	r4, #1
    2f9e:	3510      	adds	r5, #16
    2fa0:	e7e6      	b.n	2f70 <msg_process+0x10>
    2fa2:	bf00      	nop
    2fa4:	0000a4a4 	.word	0x0000a4a4
    2fa8:	0000a4c4 	.word	0x0000a4c4
    2fac:	0000acbc 	.word	0x0000acbc
    2fb0:	0000a8c6 	.word	0x0000a8c6
    2fb4:	0000ac84 	.word	0x0000ac84

00002fb8 <log_format_func_t_get>:
}
    2fb8:	4b01      	ldr	r3, [pc, #4]	; (2fc0 <log_format_func_t_get+0x8>)
    2fba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2fbe:	4770      	bx	lr
    2fc0:	0000a568 	.word	0x0000a568

00002fc4 <log_core_init>:
	panic_mode = false;
    2fc4:	4a05      	ldr	r2, [pc, #20]	; (2fdc <log_core_init+0x18>)
    2fc6:	2300      	movs	r3, #0
    2fc8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2fca:	4a05      	ldr	r2, [pc, #20]	; (2fe0 <log_core_init+0x1c>)
    2fcc:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    2fce:	4b05      	ldr	r3, [pc, #20]	; (2fe4 <log_core_init+0x20>)
    2fd0:	4a05      	ldr	r2, [pc, #20]	; (2fe8 <log_core_init+0x24>)
    2fd2:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2fd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2fd8:	f000 ba96 	b.w	3508 <log_output_timestamp_freq_set>
    2fdc:	20004e25 	.word	0x20004e25
    2fe0:	2000450c 	.word	0x2000450c
    2fe4:	20000004 	.word	0x20000004
    2fe8:	000098b3 	.word	0x000098b3

00002fec <log_init>:
{
    2fec:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    2fee:	4b19      	ldr	r3, [pc, #100]	; (3054 <log_init+0x68>)
    2ff0:	4c19      	ldr	r4, [pc, #100]	; (3058 <log_init+0x6c>)
    2ff2:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2ff4:	2c90      	cmp	r4, #144	; 0x90
    2ff6:	d90b      	bls.n	3010 <log_init+0x24>
    2ff8:	4918      	ldr	r1, [pc, #96]	; (305c <log_init+0x70>)
    2ffa:	4819      	ldr	r0, [pc, #100]	; (3060 <log_init+0x74>)
    2ffc:	4a19      	ldr	r2, [pc, #100]	; (3064 <log_init+0x78>)
    2ffe:	f240 2373 	movw	r3, #627	; 0x273
    3002:	f006 fc48 	bl	9896 <assert_print>
    3006:	4817      	ldr	r0, [pc, #92]	; (3064 <log_init+0x78>)
    3008:	f240 2173 	movw	r1, #627	; 0x273
    300c:	f006 fc3c 	bl	9888 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3010:	f3bf 8f5b 	dmb	ish
    3014:	4b14      	ldr	r3, [pc, #80]	; (3068 <log_init+0x7c>)
    3016:	e853 6f00 	ldrex	r6, [r3]
    301a:	1c72      	adds	r2, r6, #1
    301c:	e843 2100 	strex	r1, r2, [r3]
    3020:	2900      	cmp	r1, #0
    3022:	d1f8      	bne.n	3016 <log_init+0x2a>
    3024:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3028:	b91e      	cbnz	r6, 3032 <log_init+0x46>
    302a:	1125      	asrs	r5, r4, #4
    302c:	4c09      	ldr	r4, [pc, #36]	; (3054 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    302e:	42ae      	cmp	r6, r5
    3030:	db00      	blt.n	3034 <log_init+0x48>
}
    3032:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3034:	7b23      	ldrb	r3, [r4, #12]
    3036:	b153      	cbz	r3, 304e <log_init+0x62>
			if (backend->api->init != NULL) {
    3038:	6823      	ldr	r3, [r4, #0]
    303a:	699b      	ldr	r3, [r3, #24]
    303c:	b10b      	cbz	r3, 3042 <log_init+0x56>
				backend->api->init(backend);
    303e:	4620      	mov	r0, r4
    3040:	4798      	blx	r3
			log_backend_enable(backend,
    3042:	6863      	ldr	r3, [r4, #4]
    3044:	2204      	movs	r2, #4
    3046:	6819      	ldr	r1, [r3, #0]
    3048:	4620      	mov	r0, r4
    304a:	f000 f86f 	bl	312c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    304e:	3601      	adds	r6, #1
    3050:	3410      	adds	r4, #16
    3052:	e7ec      	b.n	302e <log_init+0x42>
    3054:	0000a4a4 	.word	0x0000a4a4
    3058:	0000a4c4 	.word	0x0000a4c4
    305c:	0000ad14 	.word	0x0000ad14
    3060:	0000a8c6 	.word	0x0000a8c6
    3064:	0000accf 	.word	0x0000accf
    3068:	20004514 	.word	0x20004514

0000306c <z_impl_log_panic>:
{
    306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    306e:	4f0c      	ldr	r7, [pc, #48]	; (30a0 <z_impl_log_panic+0x34>)
    3070:	783d      	ldrb	r5, [r7, #0]
    3072:	b94d      	cbnz	r5, 3088 <z_impl_log_panic+0x1c>
    3074:	4c0b      	ldr	r4, [pc, #44]	; (30a4 <z_impl_log_panic+0x38>)
    3076:	4e0c      	ldr	r6, [pc, #48]	; (30a8 <z_impl_log_panic+0x3c>)
	log_init();
    3078:	f7ff ffb8 	bl	2fec <log_init>
    307c:	1b36      	subs	r6, r6, r4
    307e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3080:	42b5      	cmp	r5, r6
    3082:	db02      	blt.n	308a <z_impl_log_panic+0x1e>
	panic_mode = true;
    3084:	2301      	movs	r3, #1
    3086:	703b      	strb	r3, [r7, #0]
}
    3088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    308a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    308c:	795b      	ldrb	r3, [r3, #5]
    308e:	b11b      	cbz	r3, 3098 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    3090:	6823      	ldr	r3, [r4, #0]
    3092:	4620      	mov	r0, r4
    3094:	695b      	ldr	r3, [r3, #20]
    3096:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3098:	3501      	adds	r5, #1
    309a:	3410      	adds	r4, #16
    309c:	e7f0      	b.n	3080 <z_impl_log_panic+0x14>
    309e:	bf00      	nop
    30a0:	20004e25 	.word	0x20004e25
    30a4:	0000a4a4 	.word	0x0000a4a4
    30a8:	0000a4c4 	.word	0x0000a4c4

000030ac <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    30ac:	4b01      	ldr	r3, [pc, #4]	; (30b4 <z_log_notify_backend_enabled+0x8>)
    30ae:	2201      	movs	r2, #1
    30b0:	701a      	strb	r2, [r3, #0]
}
    30b2:	4770      	bx	lr
    30b4:	20004e24 	.word	0x20004e24

000030b8 <z_log_dropped>:
    30b8:	4b0c      	ldr	r3, [pc, #48]	; (30ec <z_log_dropped+0x34>)
    30ba:	f3bf 8f5b 	dmb	ish
    30be:	e853 1f00 	ldrex	r1, [r3]
    30c2:	3101      	adds	r1, #1
    30c4:	e843 1200 	strex	r2, r1, [r3]
    30c8:	2a00      	cmp	r2, #0
    30ca:	d1f8      	bne.n	30be <z_log_dropped+0x6>
    30cc:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    30d0:	b158      	cbz	r0, 30ea <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    30d2:	f3bf 8f5b 	dmb	ish
    30d6:	4b06      	ldr	r3, [pc, #24]	; (30f0 <z_log_dropped+0x38>)
    30d8:	e853 1f00 	ldrex	r1, [r3]
    30dc:	3901      	subs	r1, #1
    30de:	e843 1200 	strex	r2, r1, [r3]
    30e2:	2a00      	cmp	r2, #0
    30e4:	d1f8      	bne.n	30d8 <z_log_dropped+0x20>
    30e6:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    30ea:	4770      	bx	lr
    30ec:	2000450c 	.word	0x2000450c
    30f0:	20004510 	.word	0x20004510

000030f4 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    30f4:	4b05      	ldr	r3, [pc, #20]	; (310c <z_log_msg2_commit+0x18>)
{
    30f6:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    30f8:	681b      	ldr	r3, [r3, #0]
{
    30fa:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    30fc:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    30fe:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    3100:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    3102:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    3104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    3108:	f7ff bf2a 	b.w	2f60 <msg_process>
    310c:	20000004 	.word	0x20000004

00003110 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3110:	4a04      	ldr	r2, [pc, #16]	; (3124 <log_source_name_get+0x14>)
    3112:	4b05      	ldr	r3, [pc, #20]	; (3128 <log_source_name_get+0x18>)
    3114:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3116:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    311a:	bf34      	ite	cc
    311c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    3120:	2000      	movcs	r0, #0
}
    3122:	4770      	bx	lr
    3124:	0000a45c 	.word	0x0000a45c
    3128:	0000a4a4 	.word	0x0000a4a4

0000312c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    312c:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    312e:	4c10      	ldr	r4, [pc, #64]	; (3170 <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3130:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    3132:	1b04      	subs	r4, r0, r4
    3134:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3136:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    3138:	3401      	adds	r4, #1
{
    313a:	4605      	mov	r5, r0
    313c:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    313e:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    3140:	b963      	cbnz	r3, 315c <log_backend_enable+0x30>
    3142:	490c      	ldr	r1, [pc, #48]	; (3174 <log_backend_enable+0x48>)
    3144:	4a0c      	ldr	r2, [pc, #48]	; (3178 <log_backend_enable+0x4c>)
    3146:	480d      	ldr	r0, [pc, #52]	; (317c <log_backend_enable+0x50>)
    3148:	23bb      	movs	r3, #187	; 0xbb
    314a:	f006 fba4 	bl	9896 <assert_print>
    314e:	480c      	ldr	r0, [pc, #48]	; (3180 <log_backend_enable+0x54>)
    3150:	f006 fba1 	bl	9896 <assert_print>
    3154:	4808      	ldr	r0, [pc, #32]	; (3178 <log_backend_enable+0x4c>)
    3156:	21bb      	movs	r1, #187	; 0xbb
    3158:	f006 fb96 	bl	9888 <assert_post_action>
	backend->cb->id = id;
    315c:	686b      	ldr	r3, [r5, #4]
    315e:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    3160:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    3162:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    3164:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    3166:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    3168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    316c:	f7ff bf9e 	b.w	30ac <z_log_notify_backend_enabled>
    3170:	0000a4a4 	.word	0x0000a4a4
    3174:	0000ad94 	.word	0x0000ad94
    3178:	0000ad3c 	.word	0x0000ad3c
    317c:	0000a8c6 	.word	0x0000a8c6
    3180:	0000adaa 	.word	0x0000adaa

00003184 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3184:	b40e      	push	{r1, r2, r3}
    3186:	b503      	push	{r0, r1, lr}
    3188:	ab03      	add	r3, sp, #12
    318a:	4601      	mov	r1, r0
    318c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3190:	4804      	ldr	r0, [pc, #16]	; (31a4 <print_formatted+0x20>)
	va_start(args, fmt);
    3192:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3194:	f7ff f862 	bl	225c <cbvprintf>
	va_end(args);

	return length;
}
    3198:	b002      	add	sp, #8
    319a:	f85d eb04 	ldr.w	lr, [sp], #4
    319e:	b003      	add	sp, #12
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	000098e5 	.word	0x000098e5

000031a8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    31a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31ac:	b087      	sub	sp, #28
    31ae:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    31b0:	f001 0301 	and.w	r3, r1, #1
{
    31b4:	9205      	str	r2, [sp, #20]
    31b6:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    31ba:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    31be:	9304      	str	r3, [sp, #16]
{
    31c0:	4607      	mov	r7, r0
    31c2:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    31c4:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    31c8:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    31cc:	f006 fb88 	bl	98e0 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    31d0:	4602      	mov	r2, r0
    31d2:	2800      	cmp	r0, #0
    31d4:	d040      	beq.n	3258 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    31d6:	4937      	ldr	r1, [pc, #220]	; (32b4 <prefix_print+0x10c>)
    31d8:	4638      	mov	r0, r7
    31da:	f7ff ffd3 	bl	3184 <print_formatted>
    31de:	4605      	mov	r5, r0
	}

	if (stamp) {
    31e0:	f1bb 0f00 	cmp.w	fp, #0
    31e4:	d008      	beq.n	31f8 <prefix_print+0x50>
	if (!format) {
    31e6:	f018 0f44 	tst.w	r8, #68	; 0x44
    31ea:	d137      	bne.n	325c <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    31ec:	4932      	ldr	r1, [pc, #200]	; (32b8 <prefix_print+0x110>)
    31ee:	4622      	mov	r2, r4
    31f0:	4638      	mov	r0, r7
    31f2:	f7ff ffc7 	bl	3184 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    31f6:	4405      	add	r5, r0
	if (color) {
    31f8:	9b04      	ldr	r3, [sp, #16]
    31fa:	b153      	cbz	r3, 3212 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    31fc:	4b2f      	ldr	r3, [pc, #188]	; (32bc <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    31fe:	4930      	ldr	r1, [pc, #192]	; (32c0 <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    3200:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    3204:	4b2f      	ldr	r3, [pc, #188]	; (32c4 <prefix_print+0x11c>)
    3206:	4638      	mov	r0, r7
    3208:	2a00      	cmp	r2, #0
    320a:	bf08      	it	eq
    320c:	461a      	moveq	r2, r3
    320e:	f7ff ffb9 	bl	3184 <print_formatted>
	if (level_on) {
    3212:	b13e      	cbz	r6, 3224 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3214:	4b2c      	ldr	r3, [pc, #176]	; (32c8 <prefix_print+0x120>)
    3216:	492d      	ldr	r1, [pc, #180]	; (32cc <prefix_print+0x124>)
    3218:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    321c:	4638      	mov	r0, r7
    321e:	f7ff ffb1 	bl	3184 <print_formatted>
    3222:	4606      	mov	r6, r0
	if (source_id >= 0) {
    3224:	f1ba 0f00 	cmp.w	sl, #0
    3228:	db12      	blt.n	3250 <prefix_print+0xa8>
		total += print_formatted(output,
    322a:	9b05      	ldr	r3, [sp, #20]
    322c:	4c28      	ldr	r4, [pc, #160]	; (32d0 <prefix_print+0x128>)
    322e:	b123      	cbz	r3, 323a <prefix_print+0x92>
    3230:	4b28      	ldr	r3, [pc, #160]	; (32d4 <prefix_print+0x12c>)
    3232:	f1b9 0f04 	cmp.w	r9, #4
    3236:	bf08      	it	eq
    3238:	461c      	moveq	r4, r3
    323a:	4651      	mov	r1, sl
    323c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    3240:	f7ff ff66 	bl	3110 <log_source_name_get>
    3244:	4621      	mov	r1, r4
    3246:	4602      	mov	r2, r0
    3248:	4638      	mov	r0, r7
    324a:	f7ff ff9b 	bl	3184 <print_formatted>
    324e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    3250:	1970      	adds	r0, r6, r5
    3252:	b007      	add	sp, #28
    3254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    3258:	4605      	mov	r5, r0
    325a:	e7c1      	b.n	31e0 <prefix_print+0x38>
	} else if (freq != 0U) {
    325c:	4b1e      	ldr	r3, [pc, #120]	; (32d8 <prefix_print+0x130>)
    325e:	6818      	ldr	r0, [r3, #0]
    3260:	2800      	cmp	r0, #0
    3262:	d0c8      	beq.n	31f6 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    3264:	4b1d      	ldr	r3, [pc, #116]	; (32dc <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    3266:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    326a:	681b      	ldr	r3, [r3, #0]
    326c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    3270:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    3274:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    3278:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    327c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    3280:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    3284:	fbb3 f2f1 	udiv	r2, r3, r1
    3288:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    328c:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    3290:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3294:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    3298:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    329c:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    32a0:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    32a2:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    32a6:	490e      	ldr	r1, [pc, #56]	; (32e0 <prefix_print+0x138>)
    32a8:	e9cd e401 	strd	lr, r4, [sp, #4]
    32ac:	4638      	mov	r0, r7
    32ae:	f7ff ff69 	bl	3184 <print_formatted>
    32b2:	e7a0      	b.n	31f6 <prefix_print+0x4e>
    32b4:	0000adda 	.word	0x0000adda
    32b8:	0000adde 	.word	0x0000adde
    32bc:	0000a574 	.word	0x0000a574
    32c0:	0000ae03 	.word	0x0000ae03
    32c4:	0000adcc 	.word	0x0000adcc
    32c8:	0000a588 	.word	0x0000a588
    32cc:	0000ae06 	.word	0x0000ae06
    32d0:	0000add5 	.word	0x0000add5
    32d4:	0000add1 	.word	0x0000add1
    32d8:	2000451c 	.word	0x2000451c
    32dc:	20004518 	.word	0x20004518
    32e0:	0000ade7 	.word	0x0000ade7

000032e4 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    32e4:	06ca      	lsls	r2, r1, #27
    32e6:	d405      	bmi.n	32f4 <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    32e8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    32ea:	bf4c      	ite	mi
    32ec:	4902      	ldrmi	r1, [pc, #8]	; (32f8 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    32ee:	4903      	ldrpl	r1, [pc, #12]	; (32fc <newline_print+0x18>)
    32f0:	f7ff bf48 	b.w	3184 <print_formatted>
}
    32f4:	4770      	bx	lr
    32f6:	bf00      	nop
    32f8:	0000be9b 	.word	0x0000be9b
    32fc:	0000ae0c 	.word	0x0000ae0c

00003300 <hexdump_line_print>:
{
    3300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3304:	460f      	mov	r7, r1
	newline_print(output, flags);
    3306:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    3308:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 33c4 <hexdump_line_print+0xc4>
{
    330c:	4604      	mov	r4, r0
    330e:	4616      	mov	r6, r2
    3310:	461d      	mov	r5, r3
	newline_print(output, flags);
    3312:	f7ff ffe7 	bl	32e4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    3316:	f04f 0800 	mov.w	r8, #0
    331a:	45a8      	cmp	r8, r5
    331c:	db28      	blt.n	3370 <hexdump_line_print+0x70>
		if (i < length) {
    331e:	b376      	cbz	r6, 337e <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    3320:	783a      	ldrb	r2, [r7, #0]
    3322:	4929      	ldr	r1, [pc, #164]	; (33c8 <hexdump_line_print+0xc8>)
    3324:	4620      	mov	r0, r4
    3326:	f7ff ff2d 	bl	3184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    332a:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    332c:	076a      	lsls	r2, r5, #29
    332e:	d103      	bne.n	3338 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    3330:	4924      	ldr	r1, [pc, #144]	; (33c4 <hexdump_line_print+0xc4>)
    3332:	4620      	mov	r0, r4
    3334:	f7ff ff26 	bl	3184 <print_formatted>
		if (i < length) {
    3338:	42b5      	cmp	r5, r6
    333a:	d225      	bcs.n	3388 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    333c:	5d7a      	ldrb	r2, [r7, r5]
    333e:	4922      	ldr	r1, [pc, #136]	; (33c8 <hexdump_line_print+0xc8>)
    3340:	4620      	mov	r0, r4
    3342:	f7ff ff1f 	bl	3184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3346:	3501      	adds	r5, #1
    3348:	2d10      	cmp	r5, #16
    334a:	d1ef      	bne.n	332c <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    334c:	491f      	ldr	r1, [pc, #124]	; (33cc <hexdump_line_print+0xcc>)
    334e:	4620      	mov	r0, r4
    3350:	f7ff ff18 	bl	3184 <print_formatted>
		if (i < length) {
    3354:	b9ee      	cbnz	r6, 3392 <hexdump_line_print+0x92>
			print_formatted(output, " ");
    3356:	491b      	ldr	r1, [pc, #108]	; (33c4 <hexdump_line_print+0xc4>)
    3358:	4620      	mov	r0, r4
    335a:	f7ff ff13 	bl	3184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    335e:	2501      	movs	r5, #1
		if (i < length) {
    3360:	42b5      	cmp	r5, r6
    3362:	462b      	mov	r3, r5
    3364:	d317      	bcc.n	3396 <hexdump_line_print+0x96>
			print_formatted(output, " ");
    3366:	4917      	ldr	r1, [pc, #92]	; (33c4 <hexdump_line_print+0xc4>)
    3368:	4620      	mov	r0, r4
    336a:	f7ff ff0b 	bl	3184 <print_formatted>
    336e:	e01d      	b.n	33ac <hexdump_line_print+0xac>
		print_formatted(output, " ");
    3370:	4649      	mov	r1, r9
    3372:	4620      	mov	r0, r4
    3374:	f7ff ff06 	bl	3184 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3378:	f108 0801 	add.w	r8, r8, #1
    337c:	e7cd      	b.n	331a <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    337e:	4914      	ldr	r1, [pc, #80]	; (33d0 <hexdump_line_print+0xd0>)
    3380:	4620      	mov	r0, r4
    3382:	f7ff feff 	bl	3184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3386:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    3388:	4911      	ldr	r1, [pc, #68]	; (33d0 <hexdump_line_print+0xd0>)
    338a:	4620      	mov	r0, r4
    338c:	f7ff fefa 	bl	3184 <print_formatted>
    3390:	e7d9      	b.n	3346 <hexdump_line_print+0x46>
		if (i < length) {
    3392:	2500      	movs	r5, #0
    3394:	462b      	mov	r3, r5
			char c = (char)data[i];
    3396:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
    3398:	4b0e      	ldr	r3, [pc, #56]	; (33d4 <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
    339a:	490f      	ldr	r1, [pc, #60]	; (33d8 <hexdump_line_print+0xd8>)
    339c:	5c9b      	ldrb	r3, [r3, r2]
    339e:	f013 0f97 	tst.w	r3, #151	; 0x97
    33a2:	bf08      	it	eq
    33a4:	222e      	moveq	r2, #46	; 0x2e
    33a6:	4620      	mov	r0, r4
    33a8:	f7ff feec 	bl	3184 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33ac:	3501      	adds	r5, #1
    33ae:	2d10      	cmp	r5, #16
    33b0:	d006      	beq.n	33c0 <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
    33b2:	076b      	lsls	r3, r5, #29
    33b4:	d1d4      	bne.n	3360 <hexdump_line_print+0x60>
			print_formatted(output, " ");
    33b6:	4903      	ldr	r1, [pc, #12]	; (33c4 <hexdump_line_print+0xc4>)
    33b8:	4620      	mov	r0, r4
    33ba:	f7ff fee3 	bl	3184 <print_formatted>
    33be:	e7cf      	b.n	3360 <hexdump_line_print+0x60>
}
    33c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33c4:	0000ae17 	.word	0x0000ae17
    33c8:	0000ae0f 	.word	0x0000ae0f
    33cc:	0000ae19 	.word	0x0000ae19
    33d0:	0000ae15 	.word	0x0000ae15
    33d4:	0000c22f 	.word	0x0000c22f
    33d8:	0000ae1b 	.word	0x0000ae1b

000033dc <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    33dc:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    33de:	07cb      	lsls	r3, r1, #31
{
    33e0:	4605      	mov	r5, r0
    33e2:	460c      	mov	r4, r1
	if (color) {
    33e4:	d503      	bpl.n	33ee <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    33e6:	4a05      	ldr	r2, [pc, #20]	; (33fc <postfix_print+0x20>)
    33e8:	4905      	ldr	r1, [pc, #20]	; (3400 <postfix_print+0x24>)
    33ea:	f7ff fecb 	bl	3184 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    33ee:	4621      	mov	r1, r4
    33f0:	4628      	mov	r0, r5
}
    33f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    33f6:	f7ff bf75 	b.w	32e4 <newline_print>
    33fa:	bf00      	nop
    33fc:	0000adcc 	.word	0x0000adcc
    3400:	0000ae03 	.word	0x0000ae03

00003404 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    3404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    3408:	460e      	mov	r6, r1
    340a:	4690      	mov	r8, r2
    340c:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    3410:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    3412:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    3416:	4607      	mov	r7, r0
    3418:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    341a:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    341e:	d023      	beq.n	3468 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    3420:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    3422:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    3424:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    3428:	b1d8      	cbz	r0, 3462 <log_output_msg2_process+0x5e>
    342a:	4930      	ldr	r1, [pc, #192]	; (34ec <log_output_msg2_process+0xe8>)
    342c:	1a40      	subs	r0, r0, r1
    342e:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3432:	e9cd 2001 	strd	r2, r0, [sp, #4]
    3436:	f8cd 9000 	str.w	r9, [sp]
    343a:	2200      	movs	r2, #0
    343c:	4641      	mov	r1, r8
    343e:	4638      	mov	r0, r7
    3440:	f7ff feb2 	bl	31a8 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3444:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    3446:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    344a:	4682      	mov	sl, r0
	if (len) {
    344c:	b9b3      	cbnz	r3, 347c <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    344e:	886c      	ldrh	r4, [r5, #2]
    3450:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    3454:	b9f4      	cbnz	r4, 3494 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    3456:	464a      	mov	r2, r9
    3458:	4641      	mov	r1, r8
    345a:	4638      	mov	r0, r7
    345c:	f7ff ffbe 	bl	33dc <postfix_print>
    3460:	e02e      	b.n	34c0 <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    3462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3466:	e7e4      	b.n	3432 <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    3468:	680b      	ldr	r3, [r1, #0]
	if (len) {
    346a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    346e:	bb6b      	cbnz	r3, 34cc <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    3470:	884c      	ldrh	r4, [r1, #2]
    3472:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    3476:	b31c      	cbz	r4, 34c0 <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    3478:	46ca      	mov	sl, r9
    347a:	e00b      	b.n	3494 <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    347c:	481c      	ldr	r0, [pc, #112]	; (34f0 <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    347e:	491d      	ldr	r1, [pc, #116]	; (34f4 <log_output_msg2_process+0xf0>)
    3480:	4633      	mov	r3, r6
    3482:	463a      	mov	r2, r7
    3484:	f006 f849 	bl	951a <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    3488:	2800      	cmp	r0, #0
    348a:	db22      	blt.n	34d2 <log_output_msg2_process+0xce>
    348c:	886c      	ldrh	r4, [r5, #2]
    348e:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    3492:	b194      	cbz	r4, 34ba <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    3494:	682b      	ldr	r3, [r5, #0]
    3496:	f3c3 2349 	ubfx	r3, r3, #9, #10
    349a:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    349c:	2c10      	cmp	r4, #16
    349e:	4625      	mov	r5, r4
    34a0:	bf28      	it	cs
    34a2:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    34a4:	4631      	mov	r1, r6
    34a6:	f8cd 8000 	str.w	r8, [sp]
    34aa:	4653      	mov	r3, sl
    34ac:	462a      	mov	r2, r5
    34ae:	4638      	mov	r0, r7
    34b0:	f7ff ff26 	bl	3300 <hexdump_line_print>
	} while (len);
    34b4:	1b64      	subs	r4, r4, r5
		data += length;
    34b6:	442e      	add	r6, r5
	} while (len);
    34b8:	d1f0      	bne.n	349c <log_output_msg2_process+0x98>
	if (!raw_string) {
    34ba:	f1b9 0f00 	cmp.w	r9, #0
    34be:	d1ca      	bne.n	3456 <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    34c0:	4638      	mov	r0, r7
}
    34c2:	b004      	add	sp, #16
    34c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    34c8:	f006 ba34 	b.w	9934 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    34cc:	480a      	ldr	r0, [pc, #40]	; (34f8 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    34ce:	46ca      	mov	sl, r9
    34d0:	e7d5      	b.n	347e <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    34d2:	4a0a      	ldr	r2, [pc, #40]	; (34fc <log_output_msg2_process+0xf8>)
    34d4:	490a      	ldr	r1, [pc, #40]	; (3500 <log_output_msg2_process+0xfc>)
    34d6:	480b      	ldr	r0, [pc, #44]	; (3504 <log_output_msg2_process+0x100>)
    34d8:	f240 23b7 	movw	r3, #695	; 0x2b7
    34dc:	f006 f9db 	bl	9896 <assert_print>
    34e0:	4806      	ldr	r0, [pc, #24]	; (34fc <log_output_msg2_process+0xf8>)
    34e2:	f240 21b7 	movw	r1, #695	; 0x2b7
    34e6:	f006 f9cf 	bl	9888 <assert_post_action>
    34ea:	e7cf      	b.n	348c <log_output_msg2_process+0x88>
    34ec:	0000a45c 	.word	0x0000a45c
    34f0:	000098e5 	.word	0x000098e5
    34f4:	0000225d 	.word	0x0000225d
    34f8:	00009901 	.word	0x00009901
    34fc:	0000ae1e 	.word	0x0000ae1e
    3500:	0000ae5c 	.word	0x0000ae5c
    3504:	0000a8c6 	.word	0x0000a8c6

00003508 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3508:	4a07      	ldr	r2, [pc, #28]	; (3528 <log_output_timestamp_freq_set+0x20>)
    350a:	2100      	movs	r1, #0
    350c:	2301      	movs	r3, #1
    350e:	4290      	cmp	r0, r2
    3510:	d806      	bhi.n	3520 <log_output_timestamp_freq_set+0x18>
    3512:	4a06      	ldr	r2, [pc, #24]	; (352c <log_output_timestamp_freq_set+0x24>)
    3514:	b901      	cbnz	r1, 3518 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    3516:	2301      	movs	r3, #1
    3518:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    351a:	4b05      	ldr	r3, [pc, #20]	; (3530 <log_output_timestamp_freq_set+0x28>)
    351c:	6018      	str	r0, [r3, #0]
}
    351e:	4770      	bx	lr
		frequency /= 2U;
    3520:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3522:	005b      	lsls	r3, r3, #1
    3524:	2101      	movs	r1, #1
    3526:	e7f2      	b.n	350e <log_output_timestamp_freq_set+0x6>
    3528:	000f4240 	.word	0x000f4240
    352c:	20004518 	.word	0x20004518
    3530:	2000451c 	.word	0x2000451c

00003534 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3538:	b085      	sub	sp, #20
    353a:	af02      	add	r7, sp, #8
    353c:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    3540:	4604      	mov	r4, r0
    3542:	4688      	mov	r8, r1
    3544:	4693      	mov	fp, r2
    3546:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    3548:	2e00      	cmp	r6, #0
    354a:	d04e      	beq.n	35ea <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    354c:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    3550:	f8cd a000 	str.w	sl, [sp]
    3554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3556:	4633      	mov	r3, r6
    3558:	2110      	movs	r1, #16
    355a:	2000      	movs	r0, #0
    355c:	f7fd ffb0 	bl	14c0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    3560:	1e05      	subs	r5, r0, #0
    3562:	da09      	bge.n	3578 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    3564:	4922      	ldr	r1, [pc, #136]	; (35f0 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    3566:	4823      	ldr	r0, [pc, #140]	; (35f4 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    3568:	4a23      	ldr	r2, [pc, #140]	; (35f8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    356a:	2367      	movs	r3, #103	; 0x67
    356c:	f006 f993 	bl	9896 <assert_print>
    3570:	4821      	ldr	r0, [pc, #132]	; (35f8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3572:	2167      	movs	r1, #103	; 0x67
    3574:	f006 f988 	bl	9888 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3578:	4b20      	ldr	r3, [pc, #128]	; (35fc <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    357a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    357c:	f004 0407 	and.w	r4, r4, #7
    3580:	f00b 0b07 	and.w	fp, fp, #7
    3584:	00e4      	lsls	r4, r4, #3
    3586:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    358a:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    358e:	431c      	orrs	r4, r3
    3590:	4b1b      	ldr	r3, [pc, #108]	; (3600 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    3592:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    3596:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3598:	4613      	mov	r3, r2
    359a:	3317      	adds	r3, #23
    359c:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    359e:	f023 0307 	bic.w	r3, r3, #7
    35a2:	ebad 0d03 	sub.w	sp, sp, r3
    35a6:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    35aa:	b1a6      	cbz	r6, 35d6 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    35ac:	f8cd a000 	str.w	sl, [sp]
    35b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35b2:	4633      	mov	r3, r6
    35b4:	4629      	mov	r1, r5
    35b6:	f10b 0010 	add.w	r0, fp, #16
    35ba:	f7fd ff81 	bl	14c0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    35be:	2800      	cmp	r0, #0
    35c0:	da09      	bge.n	35d6 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    35c2:	490b      	ldr	r1, [pc, #44]	; (35f0 <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    35c4:	480b      	ldr	r0, [pc, #44]	; (35f4 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    35c6:	4a0c      	ldr	r2, [pc, #48]	; (35f8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    35c8:	2381      	movs	r3, #129	; 0x81
    35ca:	f006 f964 	bl	9896 <assert_print>
    35ce:	480a      	ldr	r0, [pc, #40]	; (35f8 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    35d0:	2181      	movs	r1, #129	; 0x81
    35d2:	f006 f959 	bl	9888 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    35d6:	464b      	mov	r3, r9
    35d8:	4622      	mov	r2, r4
    35da:	4641      	mov	r1, r8
    35dc:	4658      	mov	r0, fp
    35de:	f006 f9b6 	bl	994e <z_log_msg2_finalize>
	}
}
    35e2:	370c      	adds	r7, #12
    35e4:	46bd      	mov	sp, r7
    35e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    35ea:	4635      	mov	r5, r6
    35ec:	e7c4      	b.n	3578 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    35ee:	bf00      	nop
    35f0:	0000aeb2 	.word	0x0000aeb2
    35f4:	0000a8c6 	.word	0x0000a8c6
    35f8:	0000ae85 	.word	0x0000ae85
    35fc:	0007fe00 	.word	0x0007fe00
    3600:	7ff80000 	.word	0x7ff80000

00003604 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    3606:	4f07      	ldr	r7, [pc, #28]	; (3624 <char_out+0x20>)
{
    3608:	460d      	mov	r5, r1
    360a:	4604      	mov	r4, r0
    360c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    360e:	42b4      	cmp	r4, r6
    3610:	d101      	bne.n	3616 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    3612:	4628      	mov	r0, r5
    3614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    3616:	6838      	ldr	r0, [r7, #0]
    3618:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    361c:	6883      	ldr	r3, [r0, #8]
    361e:	685b      	ldr	r3, [r3, #4]
    3620:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    3622:	e7f4      	b.n	360e <char_out+0xa>
    3624:	20004538 	.word	0x20004538

00003628 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3628:	4b01      	ldr	r3, [pc, #4]	; (3630 <format_set+0x8>)
	return 0;
}
    362a:	2000      	movs	r0, #0
	log_format_current = log_type;
    362c:	6019      	str	r1, [r3, #0]
}
    362e:	4770      	bx	lr
    3630:	20004534 	.word	0x20004534

00003634 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    3634:	4b02      	ldr	r3, [pc, #8]	; (3640 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3636:	4803      	ldr	r0, [pc, #12]	; (3644 <panic+0x10>)
    3638:	2201      	movs	r2, #1
    363a:	701a      	strb	r2, [r3, #0]
    363c:	f006 b97a 	b.w	9934 <log_output_flush>
    3640:	20004e27 	.word	0x20004e27
    3644:	0000a5bc 	.word	0x0000a5bc

00003648 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3648:	4b06      	ldr	r3, [pc, #24]	; (3664 <process+0x1c>)
{
    364a:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    364c:	6818      	ldr	r0, [r3, #0]
{
    364e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3650:	f7ff fcb2 	bl	2fb8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    3654:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3656:	4603      	mov	r3, r0
}
    3658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    365c:	4802      	ldr	r0, [pc, #8]	; (3668 <process+0x20>)
    365e:	220f      	movs	r2, #15
    3660:	4718      	bx	r3
    3662:	bf00      	nop
    3664:	20004534 	.word	0x20004534
    3668:	0000a5bc 	.word	0x0000a5bc

0000366c <log_backend_uart_init>:
{
    366c:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    366e:	4b09      	ldr	r3, [pc, #36]	; (3694 <log_backend_uart_init+0x28>)
    3670:	4809      	ldr	r0, [pc, #36]	; (3698 <log_backend_uart_init+0x2c>)
    3672:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3674:	f006 fc70 	bl	9f58 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3678:	b958      	cbnz	r0, 3692 <log_backend_uart_init+0x26>
    367a:	4908      	ldr	r1, [pc, #32]	; (369c <log_backend_uart_init+0x30>)
    367c:	4808      	ldr	r0, [pc, #32]	; (36a0 <log_backend_uart_init+0x34>)
    367e:	4a09      	ldr	r2, [pc, #36]	; (36a4 <log_backend_uart_init+0x38>)
    3680:	2379      	movs	r3, #121	; 0x79
    3682:	f006 f908 	bl	9896 <assert_print>
}
    3686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    368a:	4806      	ldr	r0, [pc, #24]	; (36a4 <log_backend_uart_init+0x38>)
    368c:	2179      	movs	r1, #121	; 0x79
    368e:	f006 b8fb 	b.w	9888 <assert_post_action>
}
    3692:	bd08      	pop	{r3, pc}
    3694:	20004538 	.word	0x20004538
    3698:	0000a2c4 	.word	0x0000a2c4
    369c:	0000aef1 	.word	0x0000aef1
    36a0:	0000a8c6 	.word	0x0000a8c6
    36a4:	0000aebc 	.word	0x0000aebc

000036a8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    36a8:	4b01      	ldr	r3, [pc, #4]	; (36b0 <log_backend_rtt_init+0x8>)
    36aa:	2201      	movs	r2, #1
    36ac:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    36ae:	4770      	bx	lr
    36b0:	20004e28 	.word	0x20004e28

000036b4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    36b4:	4b01      	ldr	r3, [pc, #4]	; (36bc <format_set+0x8>)
	return 0;
}
    36b6:	2000      	movs	r0, #0
	log_format_current = log_type;
    36b8:	6019      	str	r1, [r3, #0]
}
    36ba:	4770      	bx	lr
    36bc:	20004550 	.word	0x20004550

000036c0 <panic>:
	panic_mode = true;
    36c0:	4b02      	ldr	r3, [pc, #8]	; (36cc <panic+0xc>)
    36c2:	4803      	ldr	r0, [pc, #12]	; (36d0 <panic+0x10>)
    36c4:	2201      	movs	r2, #1
    36c6:	701a      	strb	r2, [r3, #0]
    36c8:	f006 b934 	b.w	9934 <log_output_flush>
    36cc:	20004e29 	.word	0x20004e29
    36d0:	0000a5ec 	.word	0x0000a5ec

000036d4 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <process+0x1c>)
{
    36d6:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36d8:	6818      	ldr	r0, [r3, #0]
{
    36da:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36dc:	f7ff fc6c 	bl	2fb8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    36e0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36e2:	4603      	mov	r3, r0
}
    36e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    36e8:	4802      	ldr	r0, [pc, #8]	; (36f4 <process+0x20>)
    36ea:	220f      	movs	r2, #15
    36ec:	4718      	bx	r3
    36ee:	bf00      	nop
    36f0:	20004550 	.word	0x20004550
    36f4:	0000a5ec 	.word	0x0000a5ec

000036f8 <data_out_block_mode>:
{
    36f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36fa:	4d19      	ldr	r5, [pc, #100]	; (3760 <data_out_block_mode+0x68>)
    36fc:	4607      	mov	r7, r0
    36fe:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3700:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3702:	4632      	mov	r2, r6
    3704:	4639      	mov	r1, r7
    3706:	2000      	movs	r0, #0
    3708:	f003 f906 	bl	6918 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    370c:	b1c8      	cbz	r0, 3742 <data_out_block_mode+0x4a>
	host_present = true;
    370e:	2301      	movs	r3, #1
    3710:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    3712:	4b14      	ldr	r3, [pc, #80]	; (3764 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    3714:	781b      	ldrb	r3, [r3, #0]
    3716:	b92b      	cbnz	r3, 3724 <data_out_block_mode+0x2c>
}
    3718:	4630      	mov	r0, r6
    371a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    371c:	b95c      	cbnz	r4, 3736 <data_out_block_mode+0x3e>
		host_present = false;
    371e:	702c      	strb	r4, [r5, #0]
    3720:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3724:	2000      	movs	r0, #0
    3726:	f003 f93f 	bl	69a8 <SEGGER_RTT_HasDataUp>
    372a:	2800      	cmp	r0, #0
    372c:	d0f4      	beq.n	3718 <data_out_block_mode+0x20>
    372e:	782b      	ldrb	r3, [r5, #0]
    3730:	2b00      	cmp	r3, #0
    3732:	d1f3      	bne.n	371c <data_out_block_mode+0x24>
    3734:	e7f0      	b.n	3718 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    3736:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    3738:	f241 3088 	movw	r0, #5000	; 0x1388
    373c:	f006 fc8c 	bl	a058 <z_impl_k_busy_wait>
}
    3740:	e7f0      	b.n	3724 <data_out_block_mode+0x2c>
		} else if (host_present) {
    3742:	782b      	ldrb	r3, [r5, #0]
    3744:	b113      	cbz	r3, 374c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    3746:	3c01      	subs	r4, #1
    3748:	d104      	bne.n	3754 <data_out_block_mode+0x5c>
		host_present = false;
    374a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    374c:	782b      	ldrb	r3, [r5, #0]
    374e:	2b00      	cmp	r3, #0
    3750:	d1d7      	bne.n	3702 <data_out_block_mode+0xa>
    3752:	e7e1      	b.n	3718 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    3754:	f241 3088 	movw	r0, #5000	; 0x1388
    3758:	f006 fc7e 	bl	a058 <z_impl_k_busy_wait>
    375c:	e7f6      	b.n	374c <data_out_block_mode+0x54>
    375e:	bf00      	nop
    3760:	20004e28 	.word	0x20004e28
    3764:	20004e29 	.word	0x20004e29

00003768 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    376c:	4605      	mov	r5, r0
    376e:	f04f 0320 	mov.w	r3, #32
    3772:	f3ef 8611 	mrs	r6, BASEPRI
    3776:	f383 8812 	msr	BASEPRI_MAX, r3
    377a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    377e:	4821      	ldr	r0, [pc, #132]	; (3804 <pm_state_notify+0x9c>)
    3780:	f003 fcc8 	bl	7114 <z_spin_lock_valid>
    3784:	b968      	cbnz	r0, 37a2 <pm_state_notify+0x3a>
    3786:	4a20      	ldr	r2, [pc, #128]	; (3808 <pm_state_notify+0xa0>)
    3788:	4920      	ldr	r1, [pc, #128]	; (380c <pm_state_notify+0xa4>)
    378a:	4821      	ldr	r0, [pc, #132]	; (3810 <pm_state_notify+0xa8>)
    378c:	238e      	movs	r3, #142	; 0x8e
    378e:	f006 f882 	bl	9896 <assert_print>
    3792:	491c      	ldr	r1, [pc, #112]	; (3804 <pm_state_notify+0x9c>)
    3794:	481f      	ldr	r0, [pc, #124]	; (3814 <pm_state_notify+0xac>)
    3796:	f006 f87e 	bl	9896 <assert_print>
    379a:	481b      	ldr	r0, [pc, #108]	; (3808 <pm_state_notify+0xa0>)
    379c:	218e      	movs	r1, #142	; 0x8e
    379e:	f006 f873 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    37a2:	4818      	ldr	r0, [pc, #96]	; (3804 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    37a4:	4f1c      	ldr	r7, [pc, #112]	; (3818 <pm_state_notify+0xb0>)
    37a6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 381c <pm_state_notify+0xb4>
    37aa:	f003 fcd1 	bl	7150 <z_spin_lock_set_owner>
	return list->head;
    37ae:	4b1c      	ldr	r3, [pc, #112]	; (3820 <pm_state_notify+0xb8>)
    37b0:	681c      	ldr	r4, [r3, #0]
    37b2:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    37b6:	b9bc      	cbnz	r4, 37e8 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    37b8:	4812      	ldr	r0, [pc, #72]	; (3804 <pm_state_notify+0x9c>)
    37ba:	f003 fcb9 	bl	7130 <z_spin_unlock_valid>
    37be:	b968      	cbnz	r0, 37dc <pm_state_notify+0x74>
    37c0:	4a11      	ldr	r2, [pc, #68]	; (3808 <pm_state_notify+0xa0>)
    37c2:	4918      	ldr	r1, [pc, #96]	; (3824 <pm_state_notify+0xbc>)
    37c4:	4812      	ldr	r0, [pc, #72]	; (3810 <pm_state_notify+0xa8>)
    37c6:	23b9      	movs	r3, #185	; 0xb9
    37c8:	f006 f865 	bl	9896 <assert_print>
    37cc:	490d      	ldr	r1, [pc, #52]	; (3804 <pm_state_notify+0x9c>)
    37ce:	4816      	ldr	r0, [pc, #88]	; (3828 <pm_state_notify+0xc0>)
    37d0:	f006 f861 	bl	9896 <assert_print>
    37d4:	480c      	ldr	r0, [pc, #48]	; (3808 <pm_state_notify+0xa0>)
    37d6:	21b9      	movs	r1, #185	; 0xb9
    37d8:	f006 f856 	bl	9888 <assert_post_action>
	__asm__ volatile(
    37dc:	f386 8811 	msr	BASEPRI, r6
    37e0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    37e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    37e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    37ec:	2d00      	cmp	r5, #0
    37ee:	bf18      	it	ne
    37f0:	4613      	movne	r3, r2
		if (callback) {
    37f2:	b12b      	cbz	r3, 3800 <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    37f4:	f898 2014 	ldrb.w	r2, [r8, #20]
    37f8:	fb09 f202 	mul.w	r2, r9, r2
    37fc:	5cb8      	ldrb	r0, [r7, r2]
    37fe:	4798      	blx	r3
	return node->next;
    3800:	6824      	ldr	r4, [r4, #0]
    3802:	e7d8      	b.n	37b6 <pm_state_notify+0x4e>
    3804:	20004554 	.word	0x20004554
    3808:	0000aa10 	.word	0x0000aa10
    380c:	0000aa69 	.word	0x0000aa69
    3810:	0000a8c6 	.word	0x0000a8c6
    3814:	0000aa7e 	.word	0x0000aa7e
    3818:	2000455c 	.word	0x2000455c
    381c:	20004c04 	.word	0x20004c04
    3820:	20004568 	.word	0x20004568
    3824:	0000aa3d 	.word	0x0000aa3d
    3828:	0000aa54 	.word	0x0000aa54

0000382c <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    382c:	4a0a      	ldr	r2, [pc, #40]	; (3858 <atomic_clear_bit.constprop.0+0x2c>)
    382e:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3832:	0943      	lsrs	r3, r0, #5
    3834:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    3838:	f000 001f 	and.w	r0, r0, #31
    383c:	2301      	movs	r3, #1
    383e:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3840:	43db      	mvns	r3, r3
    3842:	e852 0f00 	ldrex	r0, [r2]
    3846:	4018      	ands	r0, r3
    3848:	e842 0100 	strex	r1, r0, [r2]
    384c:	2900      	cmp	r1, #0
    384e:	d1f8      	bne.n	3842 <atomic_clear_bit.constprop.0+0x16>
    3850:	f3bf 8f5b 	dmb	ish
}
    3854:	4770      	bx	lr
    3856:	bf00      	nop
    3858:	20004558 	.word	0x20004558

0000385c <pm_system_resume>:

void pm_system_resume(void)
{
    385c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    385e:	4b19      	ldr	r3, [pc, #100]	; (38c4 <pm_system_resume+0x68>)
    3860:	7d1c      	ldrb	r4, [r3, #20]
    3862:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    3866:	f004 031f 	and.w	r3, r4, #31
    386a:	2201      	movs	r2, #1
    386c:	409a      	lsls	r2, r3
    386e:	4b16      	ldr	r3, [pc, #88]	; (38c8 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3870:	0961      	lsrs	r1, r4, #5
    3872:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3876:	43d0      	mvns	r0, r2
    3878:	e853 1f00 	ldrex	r1, [r3]
    387c:	ea01 0500 	and.w	r5, r1, r0
    3880:	e843 5600 	strex	r6, r5, [r3]
    3884:	2e00      	cmp	r6, #0
    3886:	d1f7      	bne.n	3878 <pm_system_resume+0x1c>
    3888:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    388c:	420a      	tst	r2, r1
    388e:	d013      	beq.n	38b8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    3890:	4b0e      	ldr	r3, [pc, #56]	; (38cc <pm_system_resume+0x70>)
    3892:	4d0f      	ldr	r5, [pc, #60]	; (38d0 <pm_system_resume+0x74>)
    3894:	b18b      	cbz	r3, 38ba <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3896:	230c      	movs	r3, #12
    3898:	4363      	muls	r3, r4
    389a:	18ea      	adds	r2, r5, r3
    389c:	5ce8      	ldrb	r0, [r5, r3]
    389e:	7851      	ldrb	r1, [r2, #1]
    38a0:	f006 f8c1 	bl	9a26 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    38a4:	2000      	movs	r0, #0
    38a6:	f7ff ff5f 	bl	3768 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    38aa:	230c      	movs	r3, #12
    38ac:	435c      	muls	r4, r3
    38ae:	192a      	adds	r2, r5, r4
    38b0:	2300      	movs	r3, #0
    38b2:	512b      	str	r3, [r5, r4]
    38b4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    38b8:	bd70      	pop	{r4, r5, r6, pc}
    38ba:	f383 8811 	msr	BASEPRI, r3
    38be:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    38c2:	e7ef      	b.n	38a4 <pm_system_resume+0x48>
    38c4:	20004c04 	.word	0x20004c04
    38c8:	20004570 	.word	0x20004570
    38cc:	00009a27 	.word	0x00009a27
    38d0:	2000455c 	.word	0x2000455c

000038d4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    38d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    38d8:	4b32      	ldr	r3, [pc, #200]	; (39a4 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    38da:	4a33      	ldr	r2, [pc, #204]	; (39a8 <pm_system_suspend+0xd4>)
    38dc:	7d1c      	ldrb	r4, [r3, #20]
    38de:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    38e2:	0963      	lsrs	r3, r4, #5
    38e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
    38e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    38ec:	4e2f      	ldr	r6, [pc, #188]	; (39ac <pm_system_suspend+0xd8>)
    38ee:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    38f2:	f004 091f 	and.w	r9, r4, #31
    38f6:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    38fa:	f013 0f01 	tst.w	r3, #1
{
    38fe:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3900:	d10a      	bne.n	3918 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    3902:	4601      	mov	r1, r0
    3904:	4620      	mov	r0, r4
    3906:	f000 f869 	bl	39dc <pm_policy_next_state>
		if (info != NULL) {
    390a:	b128      	cbz	r0, 3918 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    390c:	c807      	ldmia	r0, {r0, r1, r2}
    390e:	230c      	movs	r3, #12
    3910:	fb03 6304 	mla	r3, r3, r4, r6
    3914:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3918:	230c      	movs	r3, #12
    391a:	4363      	muls	r3, r4
    391c:	18f2      	adds	r2, r6, r3
    391e:	5cf5      	ldrb	r5, [r6, r3]
    3920:	b92d      	cbnz	r5, 392e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    3922:	4620      	mov	r0, r4
    3924:	f7ff ff82 	bl	382c <atomic_clear_bit.constprop.0>
		ret = false;
    3928:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    392a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    392e:	1c7b      	adds	r3, r7, #1
    3930:	d010      	beq.n	3954 <pm_system_suspend+0x80>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3932:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3936:	4d1e      	ldr	r5, [pc, #120]	; (39b0 <pm_system_suspend+0xdc>)
    3938:	4a1e      	ldr	r2, [pc, #120]	; (39b4 <pm_system_suspend+0xe0>)
    393a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    393e:	2100      	movs	r1, #0
    3940:	fbec 5100 	umlal	r5, r1, ip, r0
    3944:	2300      	movs	r3, #0
    3946:	4628      	mov	r0, r5
    3948:	f7fc fff8 	bl	93c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    394c:	2101      	movs	r1, #1
    394e:	1a38      	subs	r0, r7, r0
    3950:	f005 f938 	bl	8bc4 <z_set_timeout_expiry>
	k_sched_lock();
    3954:	f004 f89a 	bl	7a8c <k_sched_lock>
	pm_state_notify(true);
    3958:	2001      	movs	r0, #1
    395a:	f7ff ff05 	bl	3768 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    395e:	f3bf 8f5b 	dmb	ish
    3962:	4b15      	ldr	r3, [pc, #84]	; (39b8 <pm_system_suspend+0xe4>)
    3964:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3966:	2301      	movs	r3, #1
    3968:	fa03 f309 	lsl.w	r3, r3, r9
    396c:	e858 2f00 	ldrex	r2, [r8]
    3970:	431a      	orrs	r2, r3
    3972:	e848 2100 	strex	r1, r2, [r8]
    3976:	2900      	cmp	r1, #0
    3978:	d1f8      	bne.n	396c <pm_system_suspend+0x98>
    397a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    397e:	4b0f      	ldr	r3, [pc, #60]	; (39bc <pm_system_suspend+0xe8>)
    3980:	b133      	cbz	r3, 3990 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    3982:	230c      	movs	r3, #12
    3984:	4363      	muls	r3, r4
    3986:	18f2      	adds	r2, r6, r3
    3988:	5cf0      	ldrb	r0, [r6, r3]
    398a:	7851      	ldrb	r1, [r2, #1]
    398c:	f006 f83f 	bl	9a0e <pm_state_set>
	pm_system_resume();
    3990:	f7ff ff64 	bl	385c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3994:	4620      	mov	r0, r4
    3996:	f7ff ff49 	bl	382c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    399a:	f004 f8eb 	bl	7b74 <k_sched_unlock>
	bool ret = true;
    399e:	2001      	movs	r0, #1
    39a0:	e7c3      	b.n	392a <pm_system_suspend+0x56>
    39a2:	bf00      	nop
    39a4:	20004c04 	.word	0x20004c04
    39a8:	20004558 	.word	0x20004558
    39ac:	2000455c 	.word	0x2000455c
    39b0:	000f423f 	.word	0x000f423f
    39b4:	000f4240 	.word	0x000f4240
    39b8:	20004570 	.word	0x20004570
    39bc:	00009a0f 	.word	0x00009a0f

000039c0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    39c0:	4b05      	ldr	r3, [pc, #20]	; (39d8 <pm_policy_state_lock_is_active+0x18>)
    39c2:	f3bf 8f5b 	dmb	ish
    39c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    39ca:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    39ce:	3800      	subs	r0, #0
    39d0:	bf18      	it	ne
    39d2:	2001      	movne	r0, #1
    39d4:	4770      	bx	lr
    39d6:	bf00      	nop
    39d8:	20004574 	.word	0x20004574

000039dc <pm_policy_next_state>:
{
    39dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39e0:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    39e2:	a901      	add	r1, sp, #4
    39e4:	f000 f842 	bl	3a6c <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    39e8:	1e44      	subs	r4, r0, #1
    39ea:	b224      	sxth	r4, r4
    39ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    39f0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3a60 <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    39f4:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    39f6:	00a4      	lsls	r4, r4, #2
    39f8:	b925      	cbnz	r5, 3a04 <pm_policy_next_state+0x28>
	return NULL;
    39fa:	462f      	mov	r7, r5
}
    39fc:	4638      	mov	r0, r7
    39fe:	b003      	add	sp, #12
    3a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3a04:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    3a06:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    3a08:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    3a0a:	f7ff ffd9 	bl	39c0 <pm_policy_state_lock_is_active>
    3a0e:	4606      	mov	r6, r0
    3a10:	bb10      	cbnz	r0, 3a58 <pm_policy_next_state+0x7c>
    3a12:	6878      	ldr	r0, [r7, #4]
    3a14:	4a13      	ldr	r2, [pc, #76]	; (3a64 <pm_policy_next_state+0x88>)
    3a16:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    3a1a:	46cc      	mov	ip, r9
    3a1c:	4631      	mov	r1, r6
    3a1e:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3a22:	2300      	movs	r3, #0
    3a24:	4660      	mov	r0, ip
    3a26:	f7fc ff89 	bl	93c <__aeabi_uldivmod>
    3a2a:	4683      	mov	fp, r0
    3a2c:	68b8      	ldr	r0, [r7, #8]
    3a2e:	4a0d      	ldr	r2, [pc, #52]	; (3a64 <pm_policy_next_state+0x88>)
    3a30:	46cc      	mov	ip, r9
    3a32:	4631      	mov	r1, r6
    3a34:	fbe0 c10a 	umlal	ip, r1, r0, sl
    3a38:	2300      	movs	r3, #0
    3a3a:	4660      	mov	r0, ip
    3a3c:	f7fc ff7e 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3a40:	4b09      	ldr	r3, [pc, #36]	; (3a68 <pm_policy_next_state+0x8c>)
    3a42:	681b      	ldr	r3, [r3, #0]
    3a44:	1c5a      	adds	r2, r3, #1
    3a46:	d001      	beq.n	3a4c <pm_policy_next_state+0x70>
    3a48:	4283      	cmp	r3, r0
    3a4a:	d905      	bls.n	3a58 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    3a4c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    3a50:	d0d4      	beq.n	39fc <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    3a52:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    3a54:	4540      	cmp	r0, r8
    3a56:	d9d1      	bls.n	39fc <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3a58:	3d01      	subs	r5, #1
    3a5a:	b2ad      	uxth	r5, r5
    3a5c:	3c0c      	subs	r4, #12
    3a5e:	e7cb      	b.n	39f8 <pm_policy_next_state+0x1c>
    3a60:	000f423f 	.word	0x000f423f
    3a64:	000f4240 	.word	0x000f4240
    3a68:	20000008 	.word	0x20000008

00003a6c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3a6c:	b908      	cbnz	r0, 3a72 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3a6e:	4b02      	ldr	r3, [pc, #8]	; (3a78 <pm_state_cpu_get_all+0xc>)
    3a70:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3a72:	2000      	movs	r0, #0
    3a74:	4770      	bx	lr
    3a76:	bf00      	nop
    3a78:	0000a5fc 	.word	0x0000a5fc

00003a7c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3a7c:	4801      	ldr	r0, [pc, #4]	; (3a84 <nrf_cc3xx_platform_abort_init+0x8>)
    3a7e:	f005 bb99 	b.w	91b4 <nrf_cc3xx_platform_set_abort>
    3a82:	bf00      	nop
    3a84:	0000a5fc 	.word	0x0000a5fc

00003a88 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a88:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3a8a:	4604      	mov	r4, r0
    3a8c:	b918      	cbnz	r0, 3a96 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3a8e:	4b0d      	ldr	r3, [pc, #52]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a90:	480d      	ldr	r0, [pc, #52]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3a92:	685b      	ldr	r3, [r3, #4]
    3a94:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3a96:	6861      	ldr	r1, [r4, #4]
    3a98:	f031 0304 	bics.w	r3, r1, #4
    3a9c:	d00c      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3a9e:	2908      	cmp	r1, #8
    3aa0:	d00a      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3aa2:	f011 0102 	ands.w	r1, r1, #2
    3aa6:	d008      	beq.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3aa8:	4808      	ldr	r0, [pc, #32]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aaa:	4621      	mov	r1, r4
    3aac:	f003 f992 	bl	6dd4 <k_mem_slab_free>
        mutex->mutex = NULL;
    3ab0:	2300      	movs	r3, #0
    3ab2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3ab4:	2300      	movs	r3, #0
    3ab6:	6063      	str	r3, [r4, #4]
}
    3ab8:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3aba:	6820      	ldr	r0, [r4, #0]
    3abc:	2214      	movs	r2, #20
    3abe:	f006 fb73 	bl	a1a8 <memset>
    3ac2:	e7f7      	b.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3ac4:	200000e4 	.word	0x200000e4
    3ac8:	0000af38 	.word	0x0000af38
    3acc:	20004a90 	.word	0x20004a90

00003ad0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3ad0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3ad2:	b308      	cbz	r0, 3b18 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3ad4:	6843      	ldr	r3, [r0, #4]
    3ad6:	2b04      	cmp	r3, #4
    3ad8:	d110      	bne.n	3afc <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3ada:	2201      	movs	r2, #1
    3adc:	6803      	ldr	r3, [r0, #0]
    3ade:	f3bf 8f5b 	dmb	ish
    3ae2:	e853 1f00 	ldrex	r1, [r3]
    3ae6:	2900      	cmp	r1, #0
    3ae8:	d103      	bne.n	3af2 <mutex_lock_platform+0x22>
    3aea:	e843 2000 	strex	r0, r2, [r3]
    3aee:	2800      	cmp	r0, #0
    3af0:	d1f7      	bne.n	3ae2 <mutex_lock_platform+0x12>
    3af2:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3af6:	d10b      	bne.n	3b10 <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3af8:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3afa:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3afc:	b153      	cbz	r3, 3b14 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3afe:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b08:	f003 fb5c 	bl	71c4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3b0c:	2800      	cmp	r0, #0
    3b0e:	d0f3      	beq.n	3af8 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b10:	4803      	ldr	r0, [pc, #12]	; (3b20 <mutex_lock_platform+0x50>)
    3b12:	e7f2      	b.n	3afa <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3b14:	4803      	ldr	r0, [pc, #12]	; (3b24 <mutex_lock_platform+0x54>)
    3b16:	e7f0      	b.n	3afa <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3b18:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3b1c:	e7ed      	b.n	3afa <mutex_lock_platform+0x2a>
    3b1e:	bf00      	nop
    3b20:	ffff8fe9 	.word	0xffff8fe9
    3b24:	ffff8fea 	.word	0xffff8fea

00003b28 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b28:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3b2a:	b1c0      	cbz	r0, 3b5e <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3b2c:	6843      	ldr	r3, [r0, #4]
    3b2e:	2b04      	cmp	r3, #4
    3b30:	d110      	bne.n	3b54 <mutex_unlock_platform+0x2c>
    3b32:	2200      	movs	r2, #0
    3b34:	6803      	ldr	r3, [r0, #0]
    3b36:	f3bf 8f5b 	dmb	ish
    3b3a:	e853 1f00 	ldrex	r1, [r3]
    3b3e:	2901      	cmp	r1, #1
    3b40:	d103      	bne.n	3b4a <mutex_unlock_platform+0x22>
    3b42:	e843 2000 	strex	r0, r2, [r3]
    3b46:	2800      	cmp	r0, #0
    3b48:	d1f7      	bne.n	3b3a <mutex_unlock_platform+0x12>
    3b4a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b4e:	d109      	bne.n	3b64 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3b50:	2000      	movs	r0, #0
    }
}
    3b52:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3b54:	b143      	cbz	r3, 3b68 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3b56:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3b58:	f003 fc2e 	bl	73b8 <z_impl_k_mutex_unlock>
    3b5c:	e7f8      	b.n	3b50 <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3b5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3b62:	e7f6      	b.n	3b52 <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3b64:	4801      	ldr	r0, [pc, #4]	; (3b6c <mutex_unlock_platform+0x44>)
    3b66:	e7f4      	b.n	3b52 <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3b68:	4801      	ldr	r0, [pc, #4]	; (3b70 <mutex_unlock_platform+0x48>)
    3b6a:	e7f2      	b.n	3b52 <mutex_unlock_platform+0x2a>
    3b6c:	ffff8fe9 	.word	0xffff8fe9
    3b70:	ffff8fea 	.word	0xffff8fea

00003b74 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3b74:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3b76:	4604      	mov	r4, r0
    3b78:	b918      	cbnz	r0, 3b82 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3b7a:	4b16      	ldr	r3, [pc, #88]	; (3bd4 <mutex_init_platform+0x60>)
    3b7c:	4816      	ldr	r0, [pc, #88]	; (3bd8 <mutex_init_platform+0x64>)
    3b7e:	685b      	ldr	r3, [r3, #4]
    3b80:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3b82:	6863      	ldr	r3, [r4, #4]
    3b84:	2b04      	cmp	r3, #4
    3b86:	d023      	beq.n	3bd0 <mutex_init_platform+0x5c>
    3b88:	2b08      	cmp	r3, #8
    3b8a:	d021      	beq.n	3bd0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3b8c:	b9cb      	cbnz	r3, 3bc2 <mutex_init_platform+0x4e>
    3b8e:	6823      	ldr	r3, [r4, #0]
    3b90:	b9bb      	cbnz	r3, 3bc2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3b92:	4812      	ldr	r0, [pc, #72]	; (3bdc <mutex_init_platform+0x68>)
    3b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3b9c:	4621      	mov	r1, r4
    3b9e:	f003 f8ad 	bl	6cfc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3ba2:	b908      	cbnz	r0, 3ba8 <mutex_init_platform+0x34>
    3ba4:	6823      	ldr	r3, [r4, #0]
    3ba6:	b91b      	cbnz	r3, 3bb0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3ba8:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <mutex_init_platform+0x60>)
    3baa:	480d      	ldr	r0, [pc, #52]	; (3be0 <mutex_init_platform+0x6c>)
    3bac:	685b      	ldr	r3, [r3, #4]
    3bae:	4798      	blx	r3
    3bb0:	6820      	ldr	r0, [r4, #0]
    3bb2:	2214      	movs	r2, #20
    3bb4:	2100      	movs	r1, #0
    3bb6:	f006 faf7 	bl	a1a8 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3bba:	6863      	ldr	r3, [r4, #4]
    3bbc:	f043 0302 	orr.w	r3, r3, #2
    3bc0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    3bc2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3bc4:	f006 fa19 	bl	9ffa <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3bc8:	6863      	ldr	r3, [r4, #4]
    3bca:	f043 0301 	orr.w	r3, r3, #1
    3bce:	6063      	str	r3, [r4, #4]
}
    3bd0:	bd10      	pop	{r4, pc}
    3bd2:	bf00      	nop
    3bd4:	200000e4 	.word	0x200000e4
    3bd8:	0000af38 	.word	0x0000af38
    3bdc:	20004a90 	.word	0x20004a90
    3be0:	0000af5e 	.word	0x0000af5e

00003be4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3be4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3be6:	4906      	ldr	r1, [pc, #24]	; (3c00 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3be8:	4806      	ldr	r0, [pc, #24]	; (3c04 <nrf_cc3xx_platform_mutex_init+0x20>)
    3bea:	2340      	movs	r3, #64	; 0x40
    3bec:	2214      	movs	r2, #20
    3bee:	f006 f9d1 	bl	9f94 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3bf6:	4904      	ldr	r1, [pc, #16]	; (3c08 <nrf_cc3xx_platform_mutex_init+0x24>)
    3bf8:	4804      	ldr	r0, [pc, #16]	; (3c0c <nrf_cc3xx_platform_mutex_init+0x28>)
    3bfa:	f005 bb3b 	b.w	9274 <nrf_cc3xx_platform_set_mutexes>
    3bfe:	bf00      	nop
    3c00:	20004590 	.word	0x20004590
    3c04:	20004a90 	.word	0x20004a90
    3c08:	0000a604 	.word	0x0000a604
    3c0c:	0000a618 	.word	0x0000a618

00003c10 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3c10:	4901      	ldr	r1, [pc, #4]	; (3c18 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3c12:	2210      	movs	r2, #16
	str	r2, [r1]
    3c14:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3c16:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3c18:	e000ed10 	.word	0xe000ed10

00003c1c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3c1c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3c1e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3c20:	f380 8811 	msr	BASEPRI, r0
	isb
    3c24:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3c28:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3c2c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3c2e:	b662      	cpsie	i
	isb
    3c30:	f3bf 8f6f 	isb	sy

	bx	lr
    3c34:	4770      	bx	lr
    3c36:	bf00      	nop

00003c38 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3c38:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3c3a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3c3c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3c40:	bf20      	wfe

	msr	BASEPRI, r0
    3c42:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3c46:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3c48:	4770      	bx	lr
    3c4a:	bf00      	nop

00003c4c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	4606      	mov	r6, r0
    3c50:	b086      	sub	sp, #24

	if (esf != NULL) {
    3c52:	460d      	mov	r5, r1
    3c54:	2900      	cmp	r1, #0
    3c56:	d038      	beq.n	3cca <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3c58:	688b      	ldr	r3, [r1, #8]
    3c5a:	9305      	str	r3, [sp, #20]
    3c5c:	684b      	ldr	r3, [r1, #4]
    3c5e:	9304      	str	r3, [sp, #16]
    3c60:	680b      	ldr	r3, [r1, #0]
    3c62:	9303      	str	r3, [sp, #12]
    3c64:	2400      	movs	r4, #0
    3c66:	4b1c      	ldr	r3, [pc, #112]	; (3cd8 <z_arm_fatal_error+0x8c>)
    3c68:	491c      	ldr	r1, [pc, #112]	; (3cdc <z_arm_fatal_error+0x90>)
    3c6a:	9302      	str	r3, [sp, #8]
    3c6c:	2201      	movs	r2, #1
    3c6e:	4623      	mov	r3, r4
    3c70:	4620      	mov	r0, r4
    3c72:	e9cd 4400 	strd	r4, r4, [sp]
    3c76:	f005 fe88 	bl	998a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3c7a:	696b      	ldr	r3, [r5, #20]
    3c7c:	9305      	str	r3, [sp, #20]
    3c7e:	692b      	ldr	r3, [r5, #16]
    3c80:	9304      	str	r3, [sp, #16]
    3c82:	68eb      	ldr	r3, [r5, #12]
    3c84:	9303      	str	r3, [sp, #12]
    3c86:	4b16      	ldr	r3, [pc, #88]	; (3ce0 <z_arm_fatal_error+0x94>)
    3c88:	4914      	ldr	r1, [pc, #80]	; (3cdc <z_arm_fatal_error+0x90>)
    3c8a:	9400      	str	r4, [sp, #0]
    3c8c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3c90:	2201      	movs	r2, #1
    3c92:	4623      	mov	r3, r4
    3c94:	4620      	mov	r0, r4
    3c96:	f005 fe78 	bl	998a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3c9a:	69eb      	ldr	r3, [r5, #28]
    3c9c:	9303      	str	r3, [sp, #12]
    3c9e:	4b11      	ldr	r3, [pc, #68]	; (3ce4 <z_arm_fatal_error+0x98>)
    3ca0:	490e      	ldr	r1, [pc, #56]	; (3cdc <z_arm_fatal_error+0x90>)
    3ca2:	9400      	str	r4, [sp, #0]
    3ca4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3ca8:	2201      	movs	r2, #1
    3caa:	4623      	mov	r3, r4
    3cac:	4620      	mov	r0, r4
    3cae:	f005 fe6c 	bl	998a <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3cb2:	69ab      	ldr	r3, [r5, #24]
    3cb4:	9303      	str	r3, [sp, #12]
    3cb6:	4b0c      	ldr	r3, [pc, #48]	; (3ce8 <z_arm_fatal_error+0x9c>)
    3cb8:	4908      	ldr	r1, [pc, #32]	; (3cdc <z_arm_fatal_error+0x90>)
    3cba:	9400      	str	r4, [sp, #0]
    3cbc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3cc0:	2201      	movs	r2, #1
    3cc2:	4623      	mov	r3, r4
    3cc4:	4620      	mov	r0, r4
    3cc6:	f005 fe60 	bl	998a <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3cca:	4629      	mov	r1, r5
    3ccc:	4630      	mov	r0, r6
}
    3cce:	b006      	add	sp, #24
    3cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3cd4:	f002 be92 	b.w	69fc <z_fatal_error>
    3cd8:	0000af8b 	.word	0x0000af8b
    3cdc:	0000a484 	.word	0x0000a484
    3ce0:	0000afba 	.word	0x0000afba
    3ce4:	0000afe9 	.word	0x0000afe9
    3ce8:	0000aff8 	.word	0x0000aff8

00003cec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3cec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3cee:	2800      	cmp	r0, #0
    3cf0:	db07      	blt.n	3d02 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3cf2:	4a04      	ldr	r2, [pc, #16]	; (3d04 <arch_irq_enable+0x18>)
    3cf4:	0941      	lsrs	r1, r0, #5
    3cf6:	2301      	movs	r3, #1
    3cf8:	f000 001f 	and.w	r0, r0, #31
    3cfc:	4083      	lsls	r3, r0
    3cfe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3d02:	4770      	bx	lr
    3d04:	e000e100 	.word	0xe000e100

00003d08 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3d08:	4b05      	ldr	r3, [pc, #20]	; (3d20 <arch_irq_is_enabled+0x18>)
    3d0a:	0942      	lsrs	r2, r0, #5
    3d0c:	f000 001f 	and.w	r0, r0, #31
    3d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3d14:	2301      	movs	r3, #1
    3d16:	fa03 f000 	lsl.w	r0, r3, r0
}
    3d1a:	4010      	ands	r0, r2
    3d1c:	4770      	bx	lr
    3d1e:	bf00      	nop
    3d20:	e000e100 	.word	0xe000e100

00003d24 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3d24:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3d26:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3d28:	2d07      	cmp	r5, #7
{
    3d2a:	4604      	mov	r4, r0
    3d2c:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3d2e:	d90f      	bls.n	3d50 <z_arm_irq_priority_set+0x2c>
    3d30:	4a11      	ldr	r2, [pc, #68]	; (3d78 <z_arm_irq_priority_set+0x54>)
    3d32:	4912      	ldr	r1, [pc, #72]	; (3d7c <z_arm_irq_priority_set+0x58>)
    3d34:	4812      	ldr	r0, [pc, #72]	; (3d80 <z_arm_irq_priority_set+0x5c>)
    3d36:	2357      	movs	r3, #87	; 0x57
    3d38:	f005 fdad 	bl	9896 <assert_print>
    3d3c:	4811      	ldr	r0, [pc, #68]	; (3d84 <z_arm_irq_priority_set+0x60>)
    3d3e:	4631      	mov	r1, r6
    3d40:	2307      	movs	r3, #7
    3d42:	4622      	mov	r2, r4
    3d44:	f005 fda7 	bl	9896 <assert_print>
    3d48:	480b      	ldr	r0, [pc, #44]	; (3d78 <z_arm_irq_priority_set+0x54>)
    3d4a:	2157      	movs	r1, #87	; 0x57
    3d4c:	f005 fd9c 	bl	9888 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3d50:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3d52:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d54:	bfac      	ite	ge
    3d56:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d5a:	4b0b      	ldrlt	r3, [pc, #44]	; (3d88 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d5c:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d60:	bfb8      	it	lt
    3d62:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d66:	b2ed      	uxtb	r5, r5
    3d68:	bfaa      	itet	ge
    3d6a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d6e:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d70:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3d74:	bd70      	pop	{r4, r5, r6, pc}
    3d76:	bf00      	nop
    3d78:	0000b026 	.word	0x0000b026
    3d7c:	0000b05c 	.word	0x0000b05c
    3d80:	0000a8c6 	.word	0x0000a8c6
    3d84:	0000b077 	.word	0x0000b077
    3d88:	e000ed14 	.word	0xe000ed14

00003d8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3d8c:	bf30      	wfi
    b z_SysNmiOnReset
    3d8e:	f7ff bffd 	b.w	3d8c <z_SysNmiOnReset>
    3d92:	bf00      	nop

00003d94 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d94:	4a0b      	ldr	r2, [pc, #44]	; (3dc4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3d96:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3d98:	4b0b      	ldr	r3, [pc, #44]	; (3dc8 <z_arm_prep_c+0x34>)
    3d9a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3d9e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3da0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3da4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3da8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3dac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3db4:	f002 feb6 	bl	6b24 <z_bss_zero>
	z_data_copy();
    3db8:	f004 fd3e 	bl	8838 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3dbc:	f000 fbe0 	bl	4580 <z_arm_interrupt_init>
	z_cstart();
    3dc0:	f002 fef4 	bl	6bac <z_cstart>
    3dc4:	00000000 	.word	0x00000000
    3dc8:	e000ed00 	.word	0xe000ed00

00003dcc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3dcc:	4a09      	ldr	r2, [pc, #36]	; (3df4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3dce:	490a      	ldr	r1, [pc, #40]	; (3df8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3dd0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3dd2:	6809      	ldr	r1, [r1, #0]
    3dd4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3dd6:	4909      	ldr	r1, [pc, #36]	; (3dfc <arch_swap+0x30>)
	_current->arch.basepri = key;
    3dd8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3dda:	684b      	ldr	r3, [r1, #4]
    3ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3de0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3de2:	2300      	movs	r3, #0
    3de4:	f383 8811 	msr	BASEPRI, r3
    3de8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3dec:	6893      	ldr	r3, [r2, #8]
}
    3dee:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	20004c04 	.word	0x20004c04
    3df8:	0000a75c 	.word	0x0000a75c
    3dfc:	e000ed00 	.word	0xe000ed00

00003e00 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3e00:	4912      	ldr	r1, [pc, #72]	; (3e4c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3e02:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3e04:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3e08:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3e0a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3e0e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3e12:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3e14:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3e18:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3e1c:	4f0c      	ldr	r7, [pc, #48]	; (3e50 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3e1e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3e22:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3e24:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3e26:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3e28:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3e2a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3e2c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3e2e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3e32:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3e34:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3e36:	f000 fc3f 	bl	46b8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3e3a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3e3e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3e42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3e46:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3e4a:	4770      	bx	lr
    ldr r1, =_kernel
    3e4c:	20004c04 	.word	0x20004c04
    ldr v4, =_SCS_ICSR
    3e50:	e000ed04 	.word	0xe000ed04

00003e54 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3e54:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3e58:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3e5a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3e5e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3e62:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3e64:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3e68:	2902      	cmp	r1, #2
    beq _oops
    3e6a:	d0ff      	beq.n	3e6c <_oops>

00003e6c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3e6c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3e6e:	f005 fd9c 	bl	99aa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3e72:	bd01      	pop	{r0, pc}

00003e74 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3e74:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3e78:	9b00      	ldr	r3, [sp, #0]
    3e7a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3e7e:	490a      	ldr	r1, [pc, #40]	; (3ea8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3e80:	9b01      	ldr	r3, [sp, #4]
    3e82:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3e86:	9b02      	ldr	r3, [sp, #8]
    3e88:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3e8c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3e94:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3e98:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3e9c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3e9e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3ea0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3ea2:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	00009663 	.word	0x00009663

00003eac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3eac:	4a09      	ldr	r2, [pc, #36]	; (3ed4 <z_check_thread_stack_fail+0x28>)
{
    3eae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3eb0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3eb2:	b170      	cbz	r0, 3ed2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3eb4:	f113 0f16 	cmn.w	r3, #22
    3eb8:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3eba:	d005      	beq.n	3ec8 <z_check_thread_stack_fail+0x1c>
    3ebc:	f1a0 0220 	sub.w	r2, r0, #32
    3ec0:	429a      	cmp	r2, r3
    3ec2:	d805      	bhi.n	3ed0 <z_check_thread_stack_fail+0x24>
    3ec4:	4283      	cmp	r3, r0
    3ec6:	d203      	bcs.n	3ed0 <z_check_thread_stack_fail+0x24>
		return 0;
    3ec8:	4281      	cmp	r1, r0
    3eca:	bf28      	it	cs
    3ecc:	2000      	movcs	r0, #0
    3ece:	4770      	bx	lr
    3ed0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3ed2:	4770      	bx	lr
    3ed4:	20004c04 	.word	0x20004c04

00003ed8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3ed8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3eda:	4b09      	ldr	r3, [pc, #36]	; (3f00 <arch_switch_to_main_thread+0x28>)
    3edc:	6098      	str	r0, [r3, #8]
{
    3ede:	460d      	mov	r5, r1
    3ee0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3ee2:	f000 fbe9 	bl	46b8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3ee6:	4620      	mov	r0, r4
    3ee8:	f385 8809 	msr	PSP, r5
    3eec:	2100      	movs	r1, #0
    3eee:	b663      	cpsie	if
    3ef0:	f381 8811 	msr	BASEPRI, r1
    3ef4:	f3bf 8f6f 	isb	sy
    3ef8:	2200      	movs	r2, #0
    3efa:	2300      	movs	r3, #0
    3efc:	f005 fbb1 	bl	9662 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3f00:	20004c04 	.word	0x20004c04

00003f04 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3f04:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3f06:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3f08:	4a0b      	ldr	r2, [pc, #44]	; (3f38 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3f0a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3f0c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3f0e:	bf1e      	ittt	ne
	movne	r1, #0
    3f10:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3f12:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3f14:	f006 f862 	blne	9fdc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3f18:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3f1a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3f1e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3f22:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3f26:	4905      	ldr	r1, [pc, #20]	; (3f3c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3f28:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3f2a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3f2c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3f2e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3f32:	4903      	ldr	r1, [pc, #12]	; (3f40 <_isr_wrapper+0x3c>)
	bx r1
    3f34:	4708      	bx	r1
    3f36:	0000      	.short	0x0000
	ldr r2, =_kernel
    3f38:	20004c04 	.word	0x20004c04
	ldr r1, =_sw_isr_table
    3f3c:	0000a2dc 	.word	0x0000a2dc
	ldr r1, =z_arm_int_exit
    3f40:	00003f45 	.word	0x00003f45

00003f44 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3f44:	4b04      	ldr	r3, [pc, #16]	; (3f58 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3f46:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3f48:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3f4a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3f4c:	d003      	beq.n	3f56 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3f4e:	4903      	ldr	r1, [pc, #12]	; (3f5c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3f54:	600a      	str	r2, [r1, #0]

00003f56 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3f56:	4770      	bx	lr
	ldr r3, =_kernel
    3f58:	20004c04 	.word	0x20004c04
	ldr r1, =_SCS_ICSR
    3f5c:	e000ed04 	.word	0xe000ed04

00003f60 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f62:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3f64:	2400      	movs	r4, #0
    3f66:	4b3b      	ldr	r3, [pc, #236]	; (4054 <bus_fault.constprop.0+0xf4>)
    3f68:	9302      	str	r3, [sp, #8]
    3f6a:	e9cd 4400 	strd	r4, r4, [sp]
    3f6e:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3f70:	4607      	mov	r7, r0
    3f72:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3f74:	2201      	movs	r2, #1
    3f76:	4938      	ldr	r1, [pc, #224]	; (4058 <bus_fault.constprop.0+0xf8>)
    3f78:	4620      	mov	r0, r4
    3f7a:	f005 fd25 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3f7e:	4b37      	ldr	r3, [pc, #220]	; (405c <bus_fault.constprop.0+0xfc>)
    3f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f82:	04db      	lsls	r3, r3, #19
    3f84:	d509      	bpl.n	3f9a <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    3f86:	4b36      	ldr	r3, [pc, #216]	; (4060 <bus_fault.constprop.0+0x100>)
    3f88:	4933      	ldr	r1, [pc, #204]	; (4058 <bus_fault.constprop.0+0xf8>)
    3f8a:	9400      	str	r4, [sp, #0]
    3f8c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3f90:	2201      	movs	r2, #1
    3f92:	4623      	mov	r3, r4
    3f94:	4620      	mov	r0, r4
    3f96:	f005 fd17 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f9a:	4b30      	ldr	r3, [pc, #192]	; (405c <bus_fault.constprop.0+0xfc>)
    3f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f9e:	051d      	lsls	r5, r3, #20
    3fa0:	d509      	bpl.n	3fb6 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    3fa2:	4b30      	ldr	r3, [pc, #192]	; (4064 <bus_fault.constprop.0+0x104>)
    3fa4:	9302      	str	r3, [sp, #8]
    3fa6:	2300      	movs	r3, #0
    3fa8:	e9cd 3300 	strd	r3, r3, [sp]
    3fac:	492a      	ldr	r1, [pc, #168]	; (4058 <bus_fault.constprop.0+0xf8>)
    3fae:	2201      	movs	r2, #1
    3fb0:	4618      	mov	r0, r3
    3fb2:	f005 fd09 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3fb6:	4d29      	ldr	r5, [pc, #164]	; (405c <bus_fault.constprop.0+0xfc>)
    3fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3fba:	059c      	lsls	r4, r3, #22
    3fbc:	d51e      	bpl.n	3ffc <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    3fbe:	2400      	movs	r4, #0
    3fc0:	4b29      	ldr	r3, [pc, #164]	; (4068 <bus_fault.constprop.0+0x108>)
    3fc2:	9302      	str	r3, [sp, #8]
    3fc4:	2201      	movs	r2, #1
    3fc6:	4623      	mov	r3, r4
    3fc8:	4620      	mov	r0, r4
    3fca:	e9cd 4400 	strd	r4, r4, [sp]
    3fce:	4922      	ldr	r1, [pc, #136]	; (4058 <bus_fault.constprop.0+0xf8>)
    3fd0:	f005 fcfa 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3fd4:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3fd6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3fd8:	0410      	lsls	r0, r2, #16
    3fda:	d50f      	bpl.n	3ffc <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3fdc:	9303      	str	r3, [sp, #12]
    3fde:	4b23      	ldr	r3, [pc, #140]	; (406c <bus_fault.constprop.0+0x10c>)
    3fe0:	491d      	ldr	r1, [pc, #116]	; (4058 <bus_fault.constprop.0+0xf8>)
    3fe2:	9400      	str	r4, [sp, #0]
    3fe4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3fe8:	2201      	movs	r2, #1
    3fea:	4623      	mov	r3, r4
    3fec:	4620      	mov	r0, r4
    3fee:	f005 fceb 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3ff2:	b11f      	cbz	r7, 3ffc <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ff4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ffa:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3ffc:	4b17      	ldr	r3, [pc, #92]	; (405c <bus_fault.constprop.0+0xfc>)
    3ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4000:	0559      	lsls	r1, r3, #21
    4002:	d509      	bpl.n	4018 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    4004:	4b1a      	ldr	r3, [pc, #104]	; (4070 <bus_fault.constprop.0+0x110>)
    4006:	9302      	str	r3, [sp, #8]
    4008:	2300      	movs	r3, #0
    400a:	e9cd 3300 	strd	r3, r3, [sp]
    400e:	4912      	ldr	r1, [pc, #72]	; (4058 <bus_fault.constprop.0+0xf8>)
    4010:	2201      	movs	r2, #1
    4012:	4618      	mov	r0, r3
    4014:	f005 fcd8 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4018:	4a10      	ldr	r2, [pc, #64]	; (405c <bus_fault.constprop.0+0xfc>)
    401a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    401c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    4020:	d012      	beq.n	4048 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    4022:	4b14      	ldr	r3, [pc, #80]	; (4074 <bus_fault.constprop.0+0x114>)
    4024:	9302      	str	r3, [sp, #8]
    4026:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4028:	e9cd 3300 	strd	r3, r3, [sp]
    402c:	490a      	ldr	r1, [pc, #40]	; (4058 <bus_fault.constprop.0+0xf8>)
    402e:	2201      	movs	r2, #1
    4030:	4618      	mov	r0, r3
    4032:	f005 fcc9 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4036:	4a09      	ldr	r2, [pc, #36]	; (405c <bus_fault.constprop.0+0xfc>)
    4038:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    403a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    403c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4040:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4042:	7030      	strb	r0, [r6, #0]

	return reason;
}
    4044:	b005      	add	sp, #20
    4046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4048:	6a92      	ldr	r2, [r2, #40]	; 0x28
    404a:	0492      	lsls	r2, r2, #18
    404c:	d5f3      	bpl.n	4036 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    404e:	4a0a      	ldr	r2, [pc, #40]	; (4078 <bus_fault.constprop.0+0x118>)
    4050:	9202      	str	r2, [sp, #8]
    4052:	e7e9      	b.n	4028 <bus_fault.constprop.0+0xc8>
    4054:	0000b0b7 	.word	0x0000b0b7
    4058:	0000a484 	.word	0x0000a484
    405c:	e000ed00 	.word	0xe000ed00
    4060:	0000b0cd 	.word	0x0000b0cd
    4064:	0000b0de 	.word	0x0000b0de
    4068:	0000b0f1 	.word	0x0000b0f1
    406c:	0000b10a 	.word	0x0000b10a
    4070:	0000b11f 	.word	0x0000b11f
    4074:	0000b13a 	.word	0x0000b13a
    4078:	0000b152 	.word	0x0000b152

0000407c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    407c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    407e:	2400      	movs	r4, #0
    4080:	4b33      	ldr	r3, [pc, #204]	; (4150 <__data_size+0xc>)
    4082:	9302      	str	r3, [sp, #8]
    4084:	e9cd 4400 	strd	r4, r4, [sp]
    4088:	4623      	mov	r3, r4
    408a:	4932      	ldr	r1, [pc, #200]	; (4154 <__data_size+0x10>)
    408c:	2201      	movs	r2, #1
    408e:	4620      	mov	r0, r4
    4090:	f005 fc9a 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4094:	4b30      	ldr	r3, [pc, #192]	; (4158 <__data_size+0x14>)
    4096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4098:	019b      	lsls	r3, r3, #6
    409a:	d509      	bpl.n	40b0 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    409c:	4b2f      	ldr	r3, [pc, #188]	; (415c <__data_size+0x18>)
    409e:	492d      	ldr	r1, [pc, #180]	; (4154 <__data_size+0x10>)
    40a0:	9400      	str	r4, [sp, #0]
    40a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    40a6:	2201      	movs	r2, #1
    40a8:	4623      	mov	r3, r4
    40aa:	4620      	mov	r0, r4
    40ac:	f005 fc8c 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    40b0:	4b29      	ldr	r3, [pc, #164]	; (4158 <__data_size+0x14>)
    40b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40b4:	01dc      	lsls	r4, r3, #7
    40b6:	d509      	bpl.n	40cc <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    40b8:	4b29      	ldr	r3, [pc, #164]	; (4160 <__data_size+0x1c>)
    40ba:	9302      	str	r3, [sp, #8]
    40bc:	2300      	movs	r3, #0
    40be:	e9cd 3300 	strd	r3, r3, [sp]
    40c2:	4924      	ldr	r1, [pc, #144]	; (4154 <__data_size+0x10>)
    40c4:	2201      	movs	r2, #1
    40c6:	4618      	mov	r0, r3
    40c8:	f005 fc7e 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    40cc:	4b22      	ldr	r3, [pc, #136]	; (4158 <__data_size+0x14>)
    40ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40d0:	0318      	lsls	r0, r3, #12
    40d2:	d509      	bpl.n	40e8 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    40d4:	4b23      	ldr	r3, [pc, #140]	; (4164 <__data_size+0x20>)
    40d6:	9302      	str	r3, [sp, #8]
    40d8:	2300      	movs	r3, #0
    40da:	e9cd 3300 	strd	r3, r3, [sp]
    40de:	491d      	ldr	r1, [pc, #116]	; (4154 <__data_size+0x10>)
    40e0:	2201      	movs	r2, #1
    40e2:	4618      	mov	r0, r3
    40e4:	f005 fc70 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    40e8:	4b1b      	ldr	r3, [pc, #108]	; (4158 <__data_size+0x14>)
    40ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40ec:	0359      	lsls	r1, r3, #13
    40ee:	d509      	bpl.n	4104 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    40f0:	4b1d      	ldr	r3, [pc, #116]	; (4168 <__data_size+0x24>)
    40f2:	9302      	str	r3, [sp, #8]
    40f4:	2300      	movs	r3, #0
    40f6:	e9cd 3300 	strd	r3, r3, [sp]
    40fa:	4916      	ldr	r1, [pc, #88]	; (4154 <__data_size+0x10>)
    40fc:	2201      	movs	r2, #1
    40fe:	4618      	mov	r0, r3
    4100:	f005 fc62 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4104:	4b14      	ldr	r3, [pc, #80]	; (4158 <__data_size+0x14>)
    4106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4108:	039a      	lsls	r2, r3, #14
    410a:	d509      	bpl.n	4120 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    410c:	4b17      	ldr	r3, [pc, #92]	; (416c <__data_size+0x28>)
    410e:	9302      	str	r3, [sp, #8]
    4110:	2300      	movs	r3, #0
    4112:	e9cd 3300 	strd	r3, r3, [sp]
    4116:	490f      	ldr	r1, [pc, #60]	; (4154 <__data_size+0x10>)
    4118:	2201      	movs	r2, #1
    411a:	4618      	mov	r0, r3
    411c:	f005 fc54 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4120:	4b0d      	ldr	r3, [pc, #52]	; (4158 <__data_size+0x14>)
    4122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4124:	03db      	lsls	r3, r3, #15
    4126:	d509      	bpl.n	413c <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4128:	4b11      	ldr	r3, [pc, #68]	; (4170 <__data_size+0x2c>)
    412a:	9302      	str	r3, [sp, #8]
    412c:	2300      	movs	r3, #0
    412e:	e9cd 3300 	strd	r3, r3, [sp]
    4132:	4908      	ldr	r1, [pc, #32]	; (4154 <__data_size+0x10>)
    4134:	2201      	movs	r2, #1
    4136:	4618      	mov	r0, r3
    4138:	f005 fc46 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    413c:	4a06      	ldr	r2, [pc, #24]	; (4158 <__data_size+0x14>)
    413e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4140:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4144:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    4148:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    414a:	6293      	str	r3, [r2, #40]	; 0x28
}
    414c:	b004      	add	sp, #16
    414e:	bd10      	pop	{r4, pc}
    4150:	0000b181 	.word	0x0000b181
    4154:	0000a484 	.word	0x0000a484
    4158:	e000ed00 	.word	0xe000ed00
    415c:	0000b199 	.word	0x0000b199
    4160:	0000b1ac 	.word	0x0000b1ac
    4164:	0000b1c6 	.word	0x0000b1c6
    4168:	0000b1e4 	.word	0x0000b1e4
    416c:	0000b209 	.word	0x0000b209
    4170:	0000b223 	.word	0x0000b223

00004174 <mem_manage_fault>:
{
    4174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4178:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    417a:	2400      	movs	r4, #0
    417c:	4b52      	ldr	r3, [pc, #328]	; (42c8 <mem_manage_fault+0x154>)
    417e:	9302      	str	r3, [sp, #8]
    4180:	e9cd 4400 	strd	r4, r4, [sp]
    4184:	4623      	mov	r3, r4
{
    4186:	4680      	mov	r8, r0
    4188:	4689      	mov	r9, r1
    418a:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    418c:	494f      	ldr	r1, [pc, #316]	; (42cc <mem_manage_fault+0x158>)
    418e:	2201      	movs	r2, #1
    4190:	4620      	mov	r0, r4
    4192:	f005 fc19 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4196:	4b4e      	ldr	r3, [pc, #312]	; (42d0 <mem_manage_fault+0x15c>)
    4198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    419a:	06df      	lsls	r7, r3, #27
    419c:	d509      	bpl.n	41b2 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    419e:	4b4d      	ldr	r3, [pc, #308]	; (42d4 <mem_manage_fault+0x160>)
    41a0:	494a      	ldr	r1, [pc, #296]	; (42cc <mem_manage_fault+0x158>)
    41a2:	9400      	str	r4, [sp, #0]
    41a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    41a8:	2201      	movs	r2, #1
    41aa:	4623      	mov	r3, r4
    41ac:	4620      	mov	r0, r4
    41ae:	f005 fc0b 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    41b2:	4b47      	ldr	r3, [pc, #284]	; (42d0 <mem_manage_fault+0x15c>)
    41b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41b6:	071d      	lsls	r5, r3, #28
    41b8:	d509      	bpl.n	41ce <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    41ba:	4b47      	ldr	r3, [pc, #284]	; (42d8 <mem_manage_fault+0x164>)
    41bc:	9302      	str	r3, [sp, #8]
    41be:	2300      	movs	r3, #0
    41c0:	e9cd 3300 	strd	r3, r3, [sp]
    41c4:	4941      	ldr	r1, [pc, #260]	; (42cc <mem_manage_fault+0x158>)
    41c6:	2201      	movs	r2, #1
    41c8:	4618      	mov	r0, r3
    41ca:	f005 fbfd 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    41ce:	4d40      	ldr	r5, [pc, #256]	; (42d0 <mem_manage_fault+0x15c>)
    41d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    41d2:	079c      	lsls	r4, r3, #30
    41d4:	d441      	bmi.n	425a <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    41d6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    41da:	4b3d      	ldr	r3, [pc, #244]	; (42d0 <mem_manage_fault+0x15c>)
    41dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41de:	07d9      	lsls	r1, r3, #31
    41e0:	d509      	bpl.n	41f6 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    41e2:	4b3e      	ldr	r3, [pc, #248]	; (42dc <mem_manage_fault+0x168>)
    41e4:	9302      	str	r3, [sp, #8]
    41e6:	2300      	movs	r3, #0
    41e8:	e9cd 3300 	strd	r3, r3, [sp]
    41ec:	4937      	ldr	r1, [pc, #220]	; (42cc <mem_manage_fault+0x158>)
    41ee:	2201      	movs	r2, #1
    41f0:	4618      	mov	r0, r3
    41f2:	f005 fbe9 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    41f6:	4b36      	ldr	r3, [pc, #216]	; (42d0 <mem_manage_fault+0x15c>)
    41f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41fa:	069a      	lsls	r2, r3, #26
    41fc:	d509      	bpl.n	4212 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    41fe:	4b38      	ldr	r3, [pc, #224]	; (42e0 <mem_manage_fault+0x16c>)
    4200:	9302      	str	r3, [sp, #8]
    4202:	2300      	movs	r3, #0
    4204:	e9cd 3300 	strd	r3, r3, [sp]
    4208:	4930      	ldr	r1, [pc, #192]	; (42cc <mem_manage_fault+0x158>)
    420a:	2201      	movs	r2, #1
    420c:	4618      	mov	r0, r3
    420e:	f005 fbdb 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4212:	4c2f      	ldr	r4, [pc, #188]	; (42d0 <mem_manage_fault+0x15c>)
    4214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4216:	06db      	lsls	r3, r3, #27
    4218:	d402      	bmi.n	4220 <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    421a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    421c:	079d      	lsls	r5, r3, #30
    421e:	d550      	bpl.n	42c2 <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4220:	6863      	ldr	r3, [r4, #4]
    4222:	0518      	lsls	r0, r3, #20
    4224:	d54d      	bpl.n	42c2 <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4226:	4641      	mov	r1, r8
    4228:	4638      	mov	r0, r7
    422a:	f7ff fe3f 	bl	3eac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    422e:	2800      	cmp	r0, #0
    4230:	d035      	beq.n	429e <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4232:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4236:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4238:	4b25      	ldr	r3, [pc, #148]	; (42d0 <mem_manage_fault+0x15c>)
    423a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    423c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    423e:	bf42      	ittt	mi
    4240:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    4242:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    4246:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    424a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    424e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4250:	2300      	movs	r3, #0
    4252:	7033      	strb	r3, [r6, #0]
}
    4254:	b005      	add	sp, #20
    4256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    425a:	2400      	movs	r4, #0
    425c:	4b21      	ldr	r3, [pc, #132]	; (42e4 <mem_manage_fault+0x170>)
    425e:	9302      	str	r3, [sp, #8]
    4260:	4620      	mov	r0, r4
    4262:	4623      	mov	r3, r4
    4264:	e9cd 4400 	strd	r4, r4, [sp]
    4268:	4918      	ldr	r1, [pc, #96]	; (42cc <mem_manage_fault+0x158>)
    426a:	2201      	movs	r2, #1
    426c:	f005 fbac 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4270:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4272:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4274:	0618      	lsls	r0, r3, #24
    4276:	d5ae      	bpl.n	41d6 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4278:	4b1b      	ldr	r3, [pc, #108]	; (42e8 <mem_manage_fault+0x174>)
    427a:	4914      	ldr	r1, [pc, #80]	; (42cc <mem_manage_fault+0x158>)
    427c:	9703      	str	r7, [sp, #12]
    427e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4282:	9400      	str	r4, [sp, #0]
    4284:	4623      	mov	r3, r4
    4286:	2201      	movs	r2, #1
    4288:	4620      	mov	r0, r4
    428a:	f005 fb9d 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    428e:	f1b9 0f00 	cmp.w	r9, #0
    4292:	d0a2      	beq.n	41da <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4294:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    429a:	62ab      	str	r3, [r5, #40]	; 0x28
    429c:	e79d      	b.n	41da <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    429e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42a0:	06d9      	lsls	r1, r3, #27
    42a2:	d50e      	bpl.n	42c2 <mem_manage_fault+0x14e>
    42a4:	4911      	ldr	r1, [pc, #68]	; (42ec <mem_manage_fault+0x178>)
    42a6:	4a12      	ldr	r2, [pc, #72]	; (42f0 <mem_manage_fault+0x17c>)
    42a8:	4812      	ldr	r0, [pc, #72]	; (42f4 <mem_manage_fault+0x180>)
    42aa:	f240 1349 	movw	r3, #329	; 0x149
    42ae:	f005 faf2 	bl	9896 <assert_print>
    42b2:	4811      	ldr	r0, [pc, #68]	; (42f8 <mem_manage_fault+0x184>)
    42b4:	f005 faef 	bl	9896 <assert_print>
    42b8:	480d      	ldr	r0, [pc, #52]	; (42f0 <mem_manage_fault+0x17c>)
    42ba:	f240 1149 	movw	r1, #329	; 0x149
    42be:	f005 fae3 	bl	9888 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    42c2:	2000      	movs	r0, #0
    42c4:	e7b8      	b.n	4238 <mem_manage_fault+0xc4>
    42c6:	bf00      	nop
    42c8:	0000b24e 	.word	0x0000b24e
    42cc:	0000a484 	.word	0x0000a484
    42d0:	e000ed00 	.word	0xe000ed00
    42d4:	0000b264 	.word	0x0000b264
    42d8:	0000b0de 	.word	0x0000b0de
    42dc:	0000b2c5 	.word	0x0000b2c5
    42e0:	0000b152 	.word	0x0000b152
    42e4:	0000b297 	.word	0x0000b297
    42e8:	0000b2af 	.word	0x0000b2af
    42ec:	0000b31e 	.word	0x0000b31e
    42f0:	0000b2e4 	.word	0x0000b2e4
    42f4:	0000a8c6 	.word	0x0000a8c6
    42f8:	0000b368 	.word	0x0000b368

000042fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    42fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4300:	4b83      	ldr	r3, [pc, #524]	; (4510 <z_arm_fault+0x214>)
    4302:	685f      	ldr	r7, [r3, #4]
{
    4304:	b090      	sub	sp, #64	; 0x40
    4306:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4308:	f3c7 0608 	ubfx	r6, r7, #0, #9
    430c:	2300      	movs	r3, #0
    430e:	f383 8811 	msr	BASEPRI, r3
    4312:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4316:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    431a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    431e:	d10c      	bne.n	433a <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4320:	f002 000c 	and.w	r0, r2, #12
    4324:	2808      	cmp	r0, #8
    4326:	d11a      	bne.n	435e <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4328:	4a7a      	ldr	r2, [pc, #488]	; (4514 <z_arm_fault+0x218>)
    432a:	497b      	ldr	r1, [pc, #492]	; (4518 <z_arm_fault+0x21c>)
    432c:	9300      	str	r3, [sp, #0]
    432e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    4332:	4618      	mov	r0, r3
    4334:	2201      	movs	r2, #1
    4336:	f005 fb47 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    433a:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    433c:	4a77      	ldr	r2, [pc, #476]	; (451c <z_arm_fault+0x220>)
    433e:	4978      	ldr	r1, [pc, #480]	; (4520 <z_arm_fault+0x224>)
    4340:	4878      	ldr	r0, [pc, #480]	; (4524 <z_arm_fault+0x228>)
    4342:	f240 33fb 	movw	r3, #1019	; 0x3fb
    4346:	f005 faa6 	bl	9896 <assert_print>
    434a:	4877      	ldr	r0, [pc, #476]	; (4528 <z_arm_fault+0x22c>)
    434c:	f005 faa3 	bl	9896 <assert_print>
    4350:	4872      	ldr	r0, [pc, #456]	; (451c <z_arm_fault+0x220>)
    4352:	f240 31fb 	movw	r1, #1019	; 0x3fb
    4356:	f005 fa97 	bl	9888 <assert_post_action>
    435a:	2400      	movs	r4, #0
    435c:	e006      	b.n	436c <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    435e:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4360:	bf46      	itte	mi
    4362:	460c      	movmi	r4, r1
	*nested_exc = false;
    4364:	461d      	movmi	r5, r3
			*nested_exc = true;
    4366:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    4368:	2c00      	cmp	r4, #0
    436a:	d0e7      	beq.n	433c <z_arm_fault+0x40>
	*recoverable = false;
    436c:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    4370:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    4372:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    4376:	2b09      	cmp	r3, #9
    4378:	f200 80b0 	bhi.w	44dc <z_arm_fault+0x1e0>
    437c:	e8df f003 	tbb	[pc, r3]
    4380:	83a8a405 	.word	0x83a8a405
    4384:	aeaeaeae 	.word	0xaeaeaeae
    4388:	acae      	.short	0xacae
	PR_FAULT_INFO("***** HARD FAULT *****");
    438a:	4b68      	ldr	r3, [pc, #416]	; (452c <z_arm_fault+0x230>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    438c:	4f60      	ldr	r7, [pc, #384]	; (4510 <z_arm_fault+0x214>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    438e:	4962      	ldr	r1, [pc, #392]	; (4518 <z_arm_fault+0x21c>)
    4390:	f8cd 8000 	str.w	r8, [sp]
    4394:	e9cd 8301 	strd	r8, r3, [sp, #4]
    4398:	2300      	movs	r3, #0
    439a:	2201      	movs	r2, #1
    439c:	4618      	mov	r0, r3
    439e:	f005 fb13 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    43a2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
	*recoverable = false;
    43a4:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    43a8:	f016 0602 	ands.w	r6, r6, #2
    43ac:	d00c      	beq.n	43c8 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    43ae:	4b60      	ldr	r3, [pc, #384]	; (4530 <z_arm_fault+0x234>)
    43b0:	f8cd 8000 	str.w	r8, [sp]
    43b4:	e9cd 8301 	strd	r8, r3, [sp, #4]
    43b8:	2300      	movs	r3, #0
    43ba:	4957      	ldr	r1, [pc, #348]	; (4518 <z_arm_fault+0x21c>)
    43bc:	2201      	movs	r2, #1
    43be:	4618      	mov	r0, r3
    43c0:	f005 fb02 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    43c4:	2200      	movs	r2, #0
    43c6:	e028      	b.n	441a <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    43c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43ca:	2b00      	cmp	r3, #0
    43cc:	da04      	bge.n	43d8 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    43ce:	4b59      	ldr	r3, [pc, #356]	; (4534 <z_arm_fault+0x238>)
    43d0:	9600      	str	r6, [sp, #0]
    43d2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    43d6:	e7ef      	b.n	43b8 <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    43d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43da:	005b      	lsls	r3, r3, #1
    43dc:	d567      	bpl.n	44ae <z_arm_fault+0x1b2>
		PR_EXC("  Fault escalation (see below)");
    43de:	4b56      	ldr	r3, [pc, #344]	; (4538 <z_arm_fault+0x23c>)
    43e0:	494d      	ldr	r1, [pc, #308]	; (4518 <z_arm_fault+0x21c>)
    43e2:	9600      	str	r6, [sp, #0]
    43e4:	e9cd 6301 	strd	r6, r3, [sp, #4]
    43e8:	2201      	movs	r2, #1
    43ea:	4633      	mov	r3, r6
    43ec:	4630      	mov	r0, r6
    43ee:	f005 faeb 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    43f2:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    43f4:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    43f8:	f64d 7302 	movw	r3, #57090	; 0xdf02
    43fc:	429a      	cmp	r2, r3
    43fe:	d12c      	bne.n	445a <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4400:	6823      	ldr	r3, [r4, #0]
    4402:	9303      	str	r3, [sp, #12]
    4404:	4b4d      	ldr	r3, [pc, #308]	; (453c <z_arm_fault+0x240>)
    4406:	4944      	ldr	r1, [pc, #272]	; (4518 <z_arm_fault+0x21c>)
    4408:	9600      	str	r6, [sp, #0]
    440a:	e9cd 6301 	strd	r6, r3, [sp, #4]
    440e:	2201      	movs	r2, #1
    4410:	4633      	mov	r3, r6
    4412:	4630      	mov	r0, r6
    4414:	f005 fad8 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    4418:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    441a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    441e:	b9cb      	cbnz	r3, 4454 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4420:	ae08      	add	r6, sp, #32
    4422:	f104 0720 	add.w	r7, r4, #32
    4426:	6820      	ldr	r0, [r4, #0]
    4428:	6861      	ldr	r1, [r4, #4]
    442a:	4633      	mov	r3, r6
    442c:	c303      	stmia	r3!, {r0, r1}
    442e:	3408      	adds	r4, #8
    4430:	42bc      	cmp	r4, r7
    4432:	461e      	mov	r6, r3
    4434:	d1f7      	bne.n	4426 <z_arm_fault+0x12a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4438:	2d00      	cmp	r5, #0
    443a:	d063      	beq.n	4504 <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    443c:	f3c3 0108 	ubfx	r1, r3, #0, #9
    4440:	b921      	cbnz	r1, 444c <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4442:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4446:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    444a:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    444c:	a908      	add	r1, sp, #32
    444e:	4610      	mov	r0, r2
    4450:	f7ff fbfc 	bl	3c4c <z_arm_fatal_error>
}
    4454:	b010      	add	sp, #64	; 0x40
    4456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    445a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    445e:	b133      	cbz	r3, 446e <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    4460:	f10d 021f 	add.w	r2, sp, #31
    4464:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4466:	4620      	mov	r0, r4
    4468:	f7ff fe84 	bl	4174 <mem_manage_fault>
    446c:	e00d      	b.n	448a <z_arm_fault+0x18e>
		} else if (SCB_BFSR != 0) {
    446e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    4472:	b12b      	cbz	r3, 4480 <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    4474:	f10d 011f 	add.w	r1, sp, #31
    4478:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    447a:	f7ff fd71 	bl	3f60 <bus_fault.constprop.0>
    447e:	e004      	b.n	448a <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
    4480:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    4482:	b29b      	uxth	r3, r3
    4484:	b11b      	cbz	r3, 448e <z_arm_fault+0x192>
			reason = usage_fault(esf);
    4486:	f7ff fdf9 	bl	407c <usage_fault.constprop.0>
    448a:	4602      	mov	r2, r0
    448c:	e7c5      	b.n	441a <z_arm_fault+0x11e>
			__ASSERT(0,
    448e:	492c      	ldr	r1, [pc, #176]	; (4540 <z_arm_fault+0x244>)
    4490:	4a22      	ldr	r2, [pc, #136]	; (451c <z_arm_fault+0x220>)
    4492:	4824      	ldr	r0, [pc, #144]	; (4524 <z_arm_fault+0x228>)
    4494:	f240 23cd 	movw	r3, #717	; 0x2cd
    4498:	f005 f9fd 	bl	9896 <assert_print>
    449c:	4829      	ldr	r0, [pc, #164]	; (4544 <z_arm_fault+0x248>)
    449e:	f005 f9fa 	bl	9896 <assert_print>
    44a2:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    44a6:	481d      	ldr	r0, [pc, #116]	; (451c <z_arm_fault+0x220>)
    44a8:	f005 f9ee 	bl	9888 <assert_post_action>
    44ac:	e78a      	b.n	43c4 <z_arm_fault+0xc8>
    44ae:	4924      	ldr	r1, [pc, #144]	; (4540 <z_arm_fault+0x244>)
    44b0:	4a1a      	ldr	r2, [pc, #104]	; (451c <z_arm_fault+0x220>)
    44b2:	481c      	ldr	r0, [pc, #112]	; (4524 <z_arm_fault+0x228>)
    44b4:	f240 23d1 	movw	r3, #721	; 0x2d1
    44b8:	f005 f9ed 	bl	9896 <assert_print>
    44bc:	4822      	ldr	r0, [pc, #136]	; (4548 <z_arm_fault+0x24c>)
    44be:	f005 f9ea 	bl	9896 <assert_print>
    44c2:	f240 21d1 	movw	r1, #721	; 0x2d1
    44c6:	e7ee      	b.n	44a6 <z_arm_fault+0x1aa>
		reason = mem_manage_fault(esf, 0, recoverable);
    44c8:	f10d 021f 	add.w	r2, sp, #31
    44cc:	2100      	movs	r1, #0
    44ce:	e7ca      	b.n	4466 <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    44d0:	f10d 011f 	add.w	r1, sp, #31
    44d4:	2000      	movs	r0, #0
    44d6:	e7d0      	b.n	447a <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    44d8:	4b1c      	ldr	r3, [pc, #112]	; (454c <z_arm_fault+0x250>)
    44da:	e769      	b.n	43b0 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    44dc:	4a1c      	ldr	r2, [pc, #112]	; (4550 <z_arm_fault+0x254>)
    44de:	4b1d      	ldr	r3, [pc, #116]	; (4554 <z_arm_fault+0x258>)
    44e0:	490d      	ldr	r1, [pc, #52]	; (4518 <z_arm_fault+0x21c>)
    44e2:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    44e6:	bf18      	it	ne
    44e8:	4613      	movne	r3, r2
    44ea:	3e10      	subs	r6, #16
    44ec:	e9cd 3603 	strd	r3, r6, [sp, #12]
    44f0:	4b19      	ldr	r3, [pc, #100]	; (4558 <z_arm_fault+0x25c>)
    44f2:	9302      	str	r3, [sp, #8]
    44f4:	2300      	movs	r3, #0
    44f6:	e9cd 3300 	strd	r3, r3, [sp]
    44fa:	2201      	movs	r2, #1
    44fc:	4618      	mov	r0, r3
    44fe:	f005 fa63 	bl	99c8 <z_log_msg2_runtime_create.constprop.0>
}
    4502:	e75f      	b.n	43c4 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4504:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4508:	f023 0301 	bic.w	r3, r3, #1
    450c:	e79d      	b.n	444a <z_arm_fault+0x14e>
    450e:	bf00      	nop
    4510:	e000ed00 	.word	0xe000ed00
    4514:	0000b3b9 	.word	0x0000b3b9
    4518:	0000a484 	.word	0x0000a484
    451c:	0000b2e4 	.word	0x0000b2e4
    4520:	0000b3e4 	.word	0x0000b3e4
    4524:	0000a8c6 	.word	0x0000a8c6
    4528:	0000b3f7 	.word	0x0000b3f7
    452c:	0000b435 	.word	0x0000b435
    4530:	0000b44c 	.word	0x0000b44c
    4534:	0000b46d 	.word	0x0000b46d
    4538:	0000b47b 	.word	0x0000b47b
    453c:	0000b49a 	.word	0x0000b49a
    4540:	0000c14d 	.word	0x0000c14d
    4544:	0000b4b6 	.word	0x0000b4b6
    4548:	0000b4da 	.word	0x0000b4da
    454c:	0000b50a 	.word	0x0000b50a
    4550:	0000b3a0 	.word	0x0000b3a0
    4554:	0000b38b 	.word	0x0000b38b
    4558:	0000b52e 	.word	0x0000b52e

0000455c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    455c:	4a02      	ldr	r2, [pc, #8]	; (4568 <z_arm_fault_init+0xc>)
    455e:	6953      	ldr	r3, [r2, #20]
    4560:	f043 0310 	orr.w	r3, r3, #16
    4564:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4566:	4770      	bx	lr
    4568:	e000ed00 	.word	0xe000ed00

0000456c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    456c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4570:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4574:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4576:	4672      	mov	r2, lr
	bl z_arm_fault
    4578:	f7ff fec0 	bl	42fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    457c:	bd01      	pop	{r0, pc}
    457e:	bf00      	nop

00004580 <z_arm_interrupt_init>:
    4580:	4804      	ldr	r0, [pc, #16]	; (4594 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4582:	2300      	movs	r3, #0
    4584:	2120      	movs	r1, #32
    4586:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4588:	3301      	adds	r3, #1
    458a:	2b30      	cmp	r3, #48	; 0x30
    458c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4590:	d1f9      	bne.n	4586 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4592:	4770      	bx	lr
    4594:	e000e100 	.word	0xe000e100

00004598 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4598:	2000      	movs	r0, #0
    msr CONTROL, r0
    459a:	f380 8814 	msr	CONTROL, r0
    isb
    459e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    45a2:	f005 fe1d 	bl	a1e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    45a6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    45a8:	490d      	ldr	r1, [pc, #52]	; (45e0 <__start+0x48>)
    str r0, [r1]
    45aa:	6008      	str	r0, [r1, #0]
    dsb
    45ac:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    45b0:	480c      	ldr	r0, [pc, #48]	; (45e4 <__start+0x4c>)
    msr msp, r0
    45b2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    45b6:	f000 f82b 	bl	4610 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    45ba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    45bc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    45c0:	4809      	ldr	r0, [pc, #36]	; (45e8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    45c2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    45c6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    45c8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    45cc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    45d0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    45d2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    45d4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    45d8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    45dc:	f7ff fbda 	bl	3d94 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    45e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    45e4:	20007040 	.word	0x20007040
    ldr r0, =z_interrupt_stacks
    45e8:	200062c0 	.word	0x200062c0

000045ec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    45ec:	4907      	ldr	r1, [pc, #28]	; (460c <z_arm_clear_arm_mpu_config+0x20>)
    45ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    45f2:	2300      	movs	r3, #0
	int num_regions =
    45f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    45f8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    45fa:	4293      	cmp	r3, r2
    45fc:	db00      	blt.n	4600 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    45fe:	4770      	bx	lr
  MPU->RNR = rnr;
    4600:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4604:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4608:	3301      	adds	r3, #1
    460a:	e7f6      	b.n	45fa <z_arm_clear_arm_mpu_config+0xe>
    460c:	e000ed00 	.word	0xe000ed00

00004610 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4610:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4612:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4614:	2300      	movs	r3, #0
    4616:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    461a:	f7ff ffe7 	bl	45ec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <z_arm_init_arch_hw_at_boot+0x60>)
    4620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    462c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    463c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4644:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4648:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    464c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4650:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4654:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4658:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    465c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4660:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4664:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4666:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    466a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    466e:	bd08      	pop	{r3, pc}
    4670:	e000e100 	.word	0xe000e100

00004674 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4674:	4b08      	ldr	r3, [pc, #32]	; (4698 <z_impl_k_thread_abort+0x24>)
    4676:	689b      	ldr	r3, [r3, #8]
    4678:	4283      	cmp	r3, r0
    467a:	d10b      	bne.n	4694 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    467c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4680:	b143      	cbz	r3, 4694 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4682:	4b06      	ldr	r3, [pc, #24]	; (469c <z_impl_k_thread_abort+0x28>)
    4684:	685a      	ldr	r2, [r3, #4]
    4686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    468a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    468c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    468e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4692:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4694:	f004 b81c 	b.w	86d0 <z_thread_abort>
    4698:	20004c04 	.word	0x20004c04
    469c:	e000ed00 	.word	0xe000ed00

000046a0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    46a0:	4b02      	ldr	r3, [pc, #8]	; (46ac <z_arm_configure_static_mpu_regions+0xc>)
    46a2:	4a03      	ldr	r2, [pc, #12]	; (46b0 <z_arm_configure_static_mpu_regions+0x10>)
    46a4:	4803      	ldr	r0, [pc, #12]	; (46b4 <z_arm_configure_static_mpu_regions+0x14>)
    46a6:	2101      	movs	r1, #1
    46a8:	f000 b886 	b.w	47b8 <arm_core_mpu_configure_static_mpu_regions>
    46ac:	20040000 	.word	0x20040000
    46b0:	20000000 	.word	0x20000000
    46b4:	0000a628 	.word	0x0000a628

000046b8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    46b8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    46ba:	4b05      	ldr	r3, [pc, #20]	; (46d0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    46bc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    46be:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    46c0:	4a04      	ldr	r2, [pc, #16]	; (46d4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    46c2:	2120      	movs	r1, #32
    46c4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    46c8:	4618      	mov	r0, r3
    46ca:	2101      	movs	r1, #1
    46cc:	f000 b89c 	b.w	4808 <arm_core_mpu_configure_dynamic_mpu_regions>
    46d0:	20004ab0 	.word	0x20004ab0
    46d4:	150b0000 	.word	0x150b0000

000046d8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    46d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    46da:	4e28      	ldr	r6, [pc, #160]	; (477c <mpu_configure_regions+0xa4>)
    46dc:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    46de:	2500      	movs	r5, #0
    46e0:	428d      	cmp	r5, r1
    46e2:	da15      	bge.n	4710 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    46e4:	6844      	ldr	r4, [r0, #4]
    46e6:	2c00      	cmp	r4, #0
    46e8:	d045      	beq.n	4776 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    46ea:	b1d3      	cbz	r3, 4722 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    46ec:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    46f0:	ea14 0f0c 	tst.w	r4, ip
    46f4:	d00f      	beq.n	4716 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    46f6:	4b22      	ldr	r3, [pc, #136]	; (4780 <mpu_configure_regions+0xa8>)
    46f8:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    46fa:	9302      	str	r3, [sp, #8]
    46fc:	2300      	movs	r3, #0
    46fe:	2201      	movs	r2, #1
    4700:	e9cd 3300 	strd	r3, r3, [sp]
    4704:	491f      	ldr	r1, [pc, #124]	; (4784 <mpu_configure_regions+0xac>)
    4706:	4618      	mov	r0, r3
    4708:	f005 f96e 	bl	99e8 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    470c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4710:	4610      	mov	r0, r2
    4712:	b005      	add	sp, #20
    4714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    4716:	2c1f      	cmp	r4, #31
    4718:	d9ed      	bls.n	46f6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    471a:	6807      	ldr	r7, [r0, #0]
		&&
    471c:	ea1c 0f07 	tst.w	ip, r7
    4720:	d1e9      	bne.n	46f6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4722:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4724:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4726:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    472a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    472e:	d910      	bls.n	4752 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    4730:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4734:	d80f      	bhi.n	4756 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4736:	3c01      	subs	r4, #1
    4738:	fab4 f484 	clz	r4, r4
    473c:	f1c4 041f 	rsb	r4, r4, #31
    4740:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4742:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4746:	ea4c 0c04 	orr.w	ip, ip, r4
    474a:	d906      	bls.n	475a <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    474c:	4b0e      	ldr	r3, [pc, #56]	; (4788 <mpu_configure_regions+0xb0>)
    474e:	9203      	str	r2, [sp, #12]
    4750:	e7d3      	b.n	46fa <mpu_configure_regions+0x22>
		return REGION_32B;
    4752:	2408      	movs	r4, #8
    4754:	e7f5      	b.n	4742 <mpu_configure_regions+0x6a>
		return REGION_4G;
    4756:	243e      	movs	r4, #62	; 0x3e
    4758:	e7f3      	b.n	4742 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    475a:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    475e:	4314      	orrs	r4, r2
    4760:	f044 0410 	orr.w	r4, r4, #16
    4764:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4768:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    476c:	f04c 0401 	orr.w	r4, ip, #1
    4770:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    4774:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    4776:	3501      	adds	r5, #1
    4778:	300c      	adds	r0, #12
    477a:	e7b1      	b.n	46e0 <mpu_configure_regions+0x8>
    477c:	e000ed00 	.word	0xe000ed00
    4780:	0000b545 	.word	0x0000b545
    4784:	0000a47c 	.word	0x0000a47c
    4788:	0000b568 	.word	0x0000b568

0000478c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    478c:	4b04      	ldr	r3, [pc, #16]	; (47a0 <arm_core_mpu_enable+0x14>)
    478e:	2205      	movs	r2, #5
    4790:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4798:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    479c:	4770      	bx	lr
    479e:	bf00      	nop
    47a0:	e000ed00 	.word	0xe000ed00

000047a4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    47a4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    47a8:	4b02      	ldr	r3, [pc, #8]	; (47b4 <arm_core_mpu_disable+0x10>)
    47aa:	2200      	movs	r2, #0
    47ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	e000ed00 	.word	0xe000ed00

000047b8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    47b8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    47ba:	4d0e      	ldr	r5, [pc, #56]	; (47f4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    47bc:	2301      	movs	r3, #1
    47be:	782a      	ldrb	r2, [r5, #0]
    47c0:	460c      	mov	r4, r1
    47c2:	f7ff ff89 	bl	46d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    47c6:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    47c8:	3016      	adds	r0, #22
    47ca:	d111      	bne.n	47f0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    47cc:	f240 1311 	movw	r3, #273	; 0x111
    47d0:	4a09      	ldr	r2, [pc, #36]	; (47f8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    47d2:	490a      	ldr	r1, [pc, #40]	; (47fc <arm_core_mpu_configure_static_mpu_regions+0x44>)
    47d4:	480a      	ldr	r0, [pc, #40]	; (4800 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    47d6:	f005 f85e 	bl	9896 <assert_print>
    47da:	4621      	mov	r1, r4
    47dc:	4809      	ldr	r0, [pc, #36]	; (4804 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    47de:	f005 f85a 	bl	9896 <assert_print>
			regions_num);
	}
}
    47e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    47e6:	4804      	ldr	r0, [pc, #16]	; (47f8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    47e8:	f240 1111 	movw	r1, #273	; 0x111
    47ec:	f005 b84c 	b.w	9888 <assert_post_action>
}
    47f0:	bd38      	pop	{r3, r4, r5, pc}
    47f2:	bf00      	nop
    47f4:	20004e2b 	.word	0x20004e2b
    47f8:	0000b58e 	.word	0x0000b58e
    47fc:	0000c14d 	.word	0x0000c14d
    4800:	0000a8c6 	.word	0x0000a8c6
    4804:	0000b5c5 	.word	0x0000b5c5

00004808 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4808:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    480a:	4a13      	ldr	r2, [pc, #76]	; (4858 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    480c:	2300      	movs	r3, #0
    480e:	7812      	ldrb	r2, [r2, #0]
    4810:	460c      	mov	r4, r1
    4812:	f7ff ff61 	bl	46d8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4816:	f110 0f16 	cmn.w	r0, #22
    481a:	d004      	beq.n	4826 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    481c:	4b0f      	ldr	r3, [pc, #60]	; (485c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    481e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4820:	2807      	cmp	r0, #7
    4822:	dd12      	ble.n	484a <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4824:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4826:	4a0e      	ldr	r2, [pc, #56]	; (4860 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    4828:	490e      	ldr	r1, [pc, #56]	; (4864 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    482a:	480f      	ldr	r0, [pc, #60]	; (4868 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    482c:	f44f 7398 	mov.w	r3, #304	; 0x130
    4830:	f005 f831 	bl	9896 <assert_print>
    4834:	4621      	mov	r1, r4
    4836:	480d      	ldr	r0, [pc, #52]	; (486c <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    4838:	f005 f82d 	bl	9896 <assert_print>
}
    483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    4840:	4807      	ldr	r0, [pc, #28]	; (4860 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    4842:	f44f 7198 	mov.w	r1, #304	; 0x130
    4846:	f005 b81f 	b.w	9888 <assert_post_action>
  MPU->RNR = rnr;
    484a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    484e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4852:	3001      	adds	r0, #1
    4854:	e7e4      	b.n	4820 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    4856:	bf00      	nop
    4858:	20004e2b 	.word	0x20004e2b
    485c:	e000ed00 	.word	0xe000ed00
    4860:	0000b58e 	.word	0x0000b58e
    4864:	0000c14d 	.word	0x0000c14d
    4868:	0000a8c6 	.word	0x0000a8c6
    486c:	0000b5f1 	.word	0x0000b5f1

00004870 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4870:	4928      	ldr	r1, [pc, #160]	; (4914 <z_arm_mpu_init+0xa4>)
{
    4872:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4874:	680c      	ldr	r4, [r1, #0]
    4876:	2c08      	cmp	r4, #8
    4878:	d913      	bls.n	48a2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    487a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    487e:	4a26      	ldr	r2, [pc, #152]	; (4918 <z_arm_mpu_init+0xa8>)
    4880:	4926      	ldr	r1, [pc, #152]	; (491c <z_arm_mpu_init+0xac>)
    4882:	4827      	ldr	r0, [pc, #156]	; (4920 <z_arm_mpu_init+0xb0>)
    4884:	f005 f807 	bl	9896 <assert_print>
    4888:	4826      	ldr	r0, [pc, #152]	; (4924 <z_arm_mpu_init+0xb4>)
    488a:	2208      	movs	r2, #8
    488c:	4621      	mov	r1, r4
    488e:	f005 f802 	bl	9896 <assert_print>
    4892:	4821      	ldr	r0, [pc, #132]	; (4918 <z_arm_mpu_init+0xa8>)
    4894:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4898:	f004 fff6 	bl	9888 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    489c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    48a0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    48a2:	f7ff ff7f 	bl	47a4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    48a6:	6848      	ldr	r0, [r1, #4]
    48a8:	491f      	ldr	r1, [pc, #124]	; (4928 <z_arm_mpu_init+0xb8>)
    48aa:	2200      	movs	r2, #0
    48ac:	4294      	cmp	r4, r2
    48ae:	f100 000c 	add.w	r0, r0, #12
    48b2:	d10b      	bne.n	48cc <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    48b4:	4b1d      	ldr	r3, [pc, #116]	; (492c <z_arm_mpu_init+0xbc>)
    48b6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    48b8:	f7ff ff68 	bl	478c <arm_core_mpu_enable>
	__ASSERT(
    48bc:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    48c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
    48c4:	2b08      	cmp	r3, #8
    48c6:	d114      	bne.n	48f2 <z_arm_mpu_init+0x82>
	return 0;
    48c8:	2000      	movs	r0, #0
    48ca:	e7e9      	b.n	48a0 <z_arm_mpu_init+0x30>
    48cc:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    48d0:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    48d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    48d8:	4313      	orrs	r3, r2
    48da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    48de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    48e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    48e6:	f043 0301 	orr.w	r3, r3, #1
    48ea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    48ee:	3201      	adds	r2, #1
    48f0:	e7dc      	b.n	48ac <z_arm_mpu_init+0x3c>
	__ASSERT(
    48f2:	4a09      	ldr	r2, [pc, #36]	; (4918 <z_arm_mpu_init+0xa8>)
    48f4:	490e      	ldr	r1, [pc, #56]	; (4930 <z_arm_mpu_init+0xc0>)
    48f6:	480a      	ldr	r0, [pc, #40]	; (4920 <z_arm_mpu_init+0xb0>)
    48f8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    48fc:	f004 ffcb 	bl	9896 <assert_print>
    4900:	480c      	ldr	r0, [pc, #48]	; (4934 <z_arm_mpu_init+0xc4>)
    4902:	f004 ffc8 	bl	9896 <assert_print>
    4906:	4804      	ldr	r0, [pc, #16]	; (4918 <z_arm_mpu_init+0xa8>)
    4908:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    490c:	f004 ffbc 	bl	9888 <assert_post_action>
    4910:	e7da      	b.n	48c8 <z_arm_mpu_init+0x58>
    4912:	bf00      	nop
    4914:	0000a634 	.word	0x0000a634
    4918:	0000b58e 	.word	0x0000b58e
    491c:	0000c14d 	.word	0x0000c14d
    4920:	0000a8c6 	.word	0x0000a8c6
    4924:	0000b61e 	.word	0x0000b61e
    4928:	e000ed00 	.word	0xe000ed00
    492c:	20004e2b 	.word	0x20004e2b
    4930:	0000b652 	.word	0x0000b652
    4934:	0000b6a2 	.word	0x0000b6a2

00004938 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    4938:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    493a:	4b0b      	ldr	r3, [pc, #44]	; (4968 <malloc_prepare+0x30>)
    493c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    4940:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    4944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4948:	d20c      	bcs.n	4964 <malloc_prepare+0x2c>
    494a:	4908      	ldr	r1, [pc, #32]	; (496c <malloc_prepare+0x34>)
    494c:	4a08      	ldr	r2, [pc, #32]	; (4970 <malloc_prepare+0x38>)
    494e:	4809      	ldr	r0, [pc, #36]	; (4974 <malloc_prepare+0x3c>)
    4950:	2381      	movs	r3, #129	; 0x81
    4952:	f004 ffa0 	bl	9896 <assert_print>
    4956:	4808      	ldr	r0, [pc, #32]	; (4978 <malloc_prepare+0x40>)
    4958:	f004 ff9d 	bl	9896 <assert_print>
    495c:	4804      	ldr	r0, [pc, #16]	; (4970 <malloc_prepare+0x38>)
    495e:	2181      	movs	r1, #129	; 0x81
    4960:	f004 ff92 	bl	9888 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    4964:	2000      	movs	r0, #0
    4966:	bd08      	pop	{r3, pc}
    4968:	20007160 	.word	0x20007160
    496c:	0000b6f3 	.word	0x0000b6f3
    4970:	0000b6c3 	.word	0x0000b6c3
    4974:	0000a8c6 	.word	0x0000a8c6
    4978:	0000b73a 	.word	0x0000b73a

0000497c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    497c:	4b01      	ldr	r3, [pc, #4]	; (4984 <__stdout_hook_install+0x8>)
    497e:	6018      	str	r0, [r3, #0]
}
    4980:	4770      	bx	lr
    4982:	bf00      	nop
    4984:	2000002c 	.word	0x2000002c

00004988 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4988:	b510      	push	{r4, lr}
	__asm__ volatile(
    498a:	f04f 0320 	mov.w	r3, #32
    498e:	f3ef 8011 	mrs	r0, BASEPRI
    4992:	f383 8812 	msr	BASEPRI_MAX, r3
    4996:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    499a:	4a11      	ldr	r2, [pc, #68]	; (49e0 <nordicsemi_nrf52_init+0x58>)
    499c:	2301      	movs	r3, #1
    499e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    49a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    49a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    49aa:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    49ae:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    49b2:	2c08      	cmp	r4, #8
    49b4:	d108      	bne.n	49c8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    49b6:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    49ba:	2905      	cmp	r1, #5
    49bc:	d804      	bhi.n	49c8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    49be:	4c09      	ldr	r4, [pc, #36]	; (49e4 <nordicsemi_nrf52_init+0x5c>)
    49c0:	5c61      	ldrb	r1, [r4, r1]
    49c2:	b109      	cbz	r1, 49c8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    49c4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    49c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49cc:	2201      	movs	r2, #1
    49ce:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    49d2:	f380 8811 	msr	BASEPRI, r0
    49d6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    49da:	2000      	movs	r0, #0
    49dc:	bd10      	pop	{r4, pc}
    49de:	bf00      	nop
    49e0:	4001e000 	.word	0x4001e000
    49e4:	0000b7d0 	.word	0x0000b7d0

000049e8 <sys_arch_reboot>:
    *p_gpregret = val;
    49e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49ec:	b2c0      	uxtb	r0, r0
    49ee:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    49f2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    49f6:	4905      	ldr	r1, [pc, #20]	; (4a0c <sys_arch_reboot+0x24>)
    49f8:	4b05      	ldr	r3, [pc, #20]	; (4a10 <sys_arch_reboot+0x28>)
    49fa:	68ca      	ldr	r2, [r1, #12]
    49fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4a00:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4a02:	60cb      	str	r3, [r1, #12]
    4a04:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4a08:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4a0a:	e7fd      	b.n	4a08 <sys_arch_reboot+0x20>
    4a0c:	e000ed00 	.word	0xe000ed00
    4a10:	05fa0004 	.word	0x05fa0004

00004a14 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4a14:	b120      	cbz	r0, 4a20 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4a16:	4b03      	ldr	r3, [pc, #12]	; (4a24 <arch_busy_wait+0x10>)
    4a18:	0180      	lsls	r0, r0, #6
    4a1a:	f043 0301 	orr.w	r3, r3, #1
    4a1e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	0000a4f0 	.word	0x0000a4f0

00004a28 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4a2a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4a2c:	490a      	ldr	r1, [pc, #40]	; (4a58 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a2e:	4a0b      	ldr	r2, [pc, #44]	; (4a5c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4a30:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a32:	2340      	movs	r3, #64	; 0x40
    4a34:	9300      	str	r3, [sp, #0]
    4a36:	1149      	asrs	r1, r1, #5
{
    4a38:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4a3a:	4623      	mov	r3, r4
    4a3c:	4808      	ldr	r0, [pc, #32]	; (4a60 <onoff_start+0x38>)
    4a3e:	f005 f80b 	bl	9a58 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4a42:	1e01      	subs	r1, r0, #0
    4a44:	da05      	bge.n	4a52 <onoff_start+0x2a>
		notify(mgr, err);
    4a46:	4628      	mov	r0, r5
    4a48:	4623      	mov	r3, r4
	}
}
    4a4a:	b003      	add	sp, #12
    4a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4a50:	4718      	bx	r3
}
    4a52:	b003      	add	sp, #12
    4a54:	bd30      	pop	{r4, r5, pc}
    4a56:	bf00      	nop
    4a58:	20004ad0 	.word	0x20004ad0
    4a5c:	00009ac3 	.word	0x00009ac3
    4a60:	0000a264 	.word	0x0000a264

00004a64 <get_status>:
{
    4a64:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a66:	b2cc      	uxtb	r4, r1
    4a68:	2c01      	cmp	r4, #1
{
    4a6a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4a6c:	d909      	bls.n	4a82 <get_status+0x1e>
    4a6e:	4909      	ldr	r1, [pc, #36]	; (4a94 <get_status+0x30>)
    4a70:	4809      	ldr	r0, [pc, #36]	; (4a98 <get_status+0x34>)
    4a72:	4a0a      	ldr	r2, [pc, #40]	; (4a9c <get_status+0x38>)
    4a74:	2379      	movs	r3, #121	; 0x79
    4a76:	f004 ff0e 	bl	9896 <assert_print>
    4a7a:	4808      	ldr	r0, [pc, #32]	; (4a9c <get_status+0x38>)
    4a7c:	2179      	movs	r1, #121	; 0x79
    4a7e:	f004 ff03 	bl	9888 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4a82:	692b      	ldr	r3, [r5, #16]
    4a84:	220c      	movs	r2, #12
    4a86:	fb04 3302 	mla	r3, r4, r2, r3
    4a8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    4a8c:	f000 0007 	and.w	r0, r0, #7
    4a90:	bd38      	pop	{r3, r4, r5, pc}
    4a92:	bf00      	nop
    4a94:	0000b817 	.word	0x0000b817
    4a98:	0000a8c6 	.word	0x0000a8c6
    4a9c:	0000b7da 	.word	0x0000b7da

00004aa0 <stop>:
{
    4aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aa2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4aa4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    4aa6:	6906      	ldr	r6, [r0, #16]
{
    4aa8:	4605      	mov	r5, r0
    4aaa:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4aac:	d90b      	bls.n	4ac6 <stop+0x26>
    4aae:	4919      	ldr	r1, [pc, #100]	; (4b14 <stop+0x74>)
    4ab0:	4819      	ldr	r0, [pc, #100]	; (4b18 <stop+0x78>)
    4ab2:	4a1a      	ldr	r2, [pc, #104]	; (4b1c <stop+0x7c>)
    4ab4:	f240 134d 	movw	r3, #333	; 0x14d
    4ab8:	f004 feed 	bl	9896 <assert_print>
    4abc:	4817      	ldr	r0, [pc, #92]	; (4b1c <stop+0x7c>)
    4abe:	f240 114d 	movw	r1, #333	; 0x14d
    4ac2:	f004 fee1 	bl	9888 <assert_post_action>
	__asm__ volatile(
    4ac6:	f04f 0320 	mov.w	r3, #32
    4aca:	f3ef 8211 	mrs	r2, BASEPRI
    4ace:	f383 8812 	msr	BASEPRI_MAX, r3
    4ad2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4ad6:	210c      	movs	r1, #12
    4ad8:	fb01 6304 	mla	r3, r1, r4, r6
    4adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4ade:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4ae2:	d008      	beq.n	4af6 <stop+0x56>
    4ae4:	429f      	cmp	r7, r3
    4ae6:	d006      	beq.n	4af6 <stop+0x56>
	__asm__ volatile(
    4ae8:	f382 8811 	msr	BASEPRI, r2
    4aec:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4af6:	434c      	muls	r4, r1
    4af8:	4426      	add	r6, r4
    4afa:	2301      	movs	r3, #1
    4afc:	64b3      	str	r3, [r6, #72]	; 0x48
    4afe:	f382 8811 	msr	BASEPRI, r2
    4b02:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4b06:	686b      	ldr	r3, [r5, #4]
    4b08:	4423      	add	r3, r4
    4b0a:	685b      	ldr	r3, [r3, #4]
    4b0c:	4798      	blx	r3
	return 0;
    4b0e:	2000      	movs	r0, #0
    4b10:	e7f0      	b.n	4af4 <stop+0x54>
    4b12:	bf00      	nop
    4b14:	0000b817 	.word	0x0000b817
    4b18:	0000a8c6 	.word	0x0000a8c6
    4b1c:	0000b7da 	.word	0x0000b7da

00004b20 <onoff_stop>:
{
    4b20:	b570      	push	{r4, r5, r6, lr}
    4b22:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4b24:	4906      	ldr	r1, [pc, #24]	; (4b40 <onoff_stop+0x20>)
    4b26:	1a41      	subs	r1, r0, r1
{
    4b28:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4b2a:	1149      	asrs	r1, r1, #5
    4b2c:	4805      	ldr	r0, [pc, #20]	; (4b44 <onoff_stop+0x24>)
    4b2e:	2240      	movs	r2, #64	; 0x40
    4b30:	f7ff ffb6 	bl	4aa0 <stop>
	notify(mgr, res);
    4b34:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4b36:	4601      	mov	r1, r0
	notify(mgr, res);
    4b38:	4620      	mov	r0, r4
}
    4b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4b3e:	4718      	bx	r3
    4b40:	20004ad0 	.word	0x20004ad0
    4b44:	0000a264 	.word	0x0000a264

00004b48 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b48:	2200      	movs	r2, #0
{
    4b4a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b4c:	2101      	movs	r1, #1
{
    4b4e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4b50:	4610      	mov	r0, r2
    4b52:	f7ff f8e7 	bl	3d24 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4b56:	480f      	ldr	r0, [pc, #60]	; (4b94 <clk_init+0x4c>)
    4b58:	f001 f9b0 	bl	5ebc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4b5c:	4b0e      	ldr	r3, [pc, #56]	; (4b98 <clk_init+0x50>)
    4b5e:	4298      	cmp	r0, r3
    4b60:	d115      	bne.n	4b8e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4b62:	f001 f9d1 	bl	5f08 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4b66:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b68:	490c      	ldr	r1, [pc, #48]	; (4b9c <clk_init+0x54>)
    4b6a:	4630      	mov	r0, r6
    4b6c:	f004 fd66 	bl	963c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4b70:	2800      	cmp	r0, #0
    4b72:	db0b      	blt.n	4b8c <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4b74:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b76:	4909      	ldr	r1, [pc, #36]	; (4b9c <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b78:	2501      	movs	r5, #1
    4b7a:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4b7c:	f104 0020 	add.w	r0, r4, #32
    4b80:	f004 fd5c 	bl	963c <onoff_manager_init>
		if (err < 0) {
    4b84:	2800      	cmp	r0, #0
    4b86:	db01      	blt.n	4b8c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4b88:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    4b8a:	2000      	movs	r0, #0
}
    4b8c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4b8e:	f06f 0004 	mvn.w	r0, #4
    4b92:	e7fb      	b.n	4b8c <clk_init+0x44>
    4b94:	00004bd5 	.word	0x00004bd5
    4b98:	0bad0000 	.word	0x0bad0000
    4b9c:	0000a654 	.word	0x0000a654

00004ba0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4ba0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4ba2:	230c      	movs	r3, #12
    4ba4:	4809      	ldr	r0, [pc, #36]	; (4bcc <clkstarted_handle.constprop.0+0x2c>)
    4ba6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4ba8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4baa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4bac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    4bb0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4bb2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    4bb4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    4bb6:	4418      	add	r0, r3
    4bb8:	f004 ff3b 	bl	9a32 <set_on_state>
	if (callback) {
    4bbc:	b12d      	cbz	r5, 4bca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4bbe:	4632      	mov	r2, r6
    4bc0:	462b      	mov	r3, r5
    4bc2:	4803      	ldr	r0, [pc, #12]	; (4bd0 <clkstarted_handle.constprop.0+0x30>)
}
    4bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4bc8:	4718      	bx	r3
}
    4bca:	bd70      	pop	{r4, r5, r6, pc}
    4bcc:	20004ad0 	.word	0x20004ad0
    4bd0:	0000a264 	.word	0x0000a264

00004bd4 <clock_event_handler>:
	switch (event) {
    4bd4:	2801      	cmp	r0, #1
{
    4bd6:	b508      	push	{r3, lr}
	switch (event) {
    4bd8:	d006      	beq.n	4be8 <clock_event_handler+0x14>
    4bda:	2803      	cmp	r0, #3
    4bdc:	d008      	beq.n	4bf0 <clock_event_handler+0x1c>
    4bde:	b9a8      	cbnz	r0, 4c0c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4be0:	4b10      	ldr	r3, [pc, #64]	; (4c24 <clock_event_handler+0x50>)
    4be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4be4:	075b      	lsls	r3, r3, #29
    4be6:	d11b      	bne.n	4c20 <clock_event_handler+0x4c>
}
    4be8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4bec:	f7ff bfd8 	b.w	4ba0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4bf0:	490d      	ldr	r1, [pc, #52]	; (4c28 <clock_event_handler+0x54>)
    4bf2:	4a0e      	ldr	r2, [pc, #56]	; (4c2c <clock_event_handler+0x58>)
    4bf4:	480e      	ldr	r0, [pc, #56]	; (4c30 <clock_event_handler+0x5c>)
    4bf6:	f240 235e 	movw	r3, #606	; 0x25e
    4bfa:	f004 fe4c 	bl	9896 <assert_print>
    4bfe:	f240 215e 	movw	r1, #606	; 0x25e
}
    4c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    4c06:	4809      	ldr	r0, [pc, #36]	; (4c2c <clock_event_handler+0x58>)
    4c08:	f004 be3e 	b.w	9888 <assert_post_action>
    4c0c:	4906      	ldr	r1, [pc, #24]	; (4c28 <clock_event_handler+0x54>)
    4c0e:	4a07      	ldr	r2, [pc, #28]	; (4c2c <clock_event_handler+0x58>)
    4c10:	4807      	ldr	r0, [pc, #28]	; (4c30 <clock_event_handler+0x5c>)
    4c12:	f240 2362 	movw	r3, #610	; 0x262
    4c16:	f004 fe3e 	bl	9896 <assert_print>
    4c1a:	f240 2162 	movw	r1, #610	; 0x262
    4c1e:	e7f0      	b.n	4c02 <clock_event_handler+0x2e>
}
    4c20:	bd08      	pop	{r3, pc}
    4c22:	bf00      	nop
    4c24:	20004ad0 	.word	0x20004ad0
    4c28:	0000c14d 	.word	0x0000c14d
    4c2c:	0000b7da 	.word	0x0000b7da
    4c30:	0000a8c6 	.word	0x0000a8c6

00004c34 <generic_hfclk_start>:
{
    4c34:	b508      	push	{r3, lr}
	__asm__ volatile(
    4c36:	f04f 0320 	mov.w	r3, #32
    4c3a:	f3ef 8111 	mrs	r1, BASEPRI
    4c3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4c46:	4a12      	ldr	r2, [pc, #72]	; (4c90 <generic_hfclk_start+0x5c>)
    4c48:	6813      	ldr	r3, [r2, #0]
    4c4a:	f043 0002 	orr.w	r0, r3, #2
    4c4e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4c50:	07da      	lsls	r2, r3, #31
    4c52:	d408      	bmi.n	4c66 <generic_hfclk_start+0x32>
	__asm__ volatile(
    4c54:	f381 8811 	msr	BASEPRI, r1
    4c58:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4c5c:	2001      	movs	r0, #1
}
    4c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4c62:	f001 b975 	b.w	5f50 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c6a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4c6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4c72:	07d3      	lsls	r3, r2, #31
    4c74:	d5ee      	bpl.n	4c54 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4c76:	4807      	ldr	r0, [pc, #28]	; (4c94 <generic_hfclk_start+0x60>)
    4c78:	f004 fedb 	bl	9a32 <set_on_state>
    4c7c:	f381 8811 	msr	BASEPRI, r1
    4c80:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4c84:	2000      	movs	r0, #0
}
    4c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4c8a:	f7ff bf89 	b.w	4ba0 <clkstarted_handle.constprop.0>
    4c8e:	bf00      	nop
    4c90:	20004b28 	.word	0x20004b28
    4c94:	20004b18 	.word	0x20004b18

00004c98 <api_blocking_start>:
{
    4c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4c9a:	2200      	movs	r2, #0
    4c9c:	2301      	movs	r3, #1
    4c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4ca2:	4a09      	ldr	r2, [pc, #36]	; (4cc8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4ca4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4ca8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4caa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4cae:	f004 ff01 	bl	9ab4 <api_start>
	if (err < 0) {
    4cb2:	2800      	cmp	r0, #0
    4cb4:	db05      	blt.n	4cc2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4cba:	2300      	movs	r3, #0
    4cbc:	4668      	mov	r0, sp
    4cbe:	f002 fc7d 	bl	75bc <z_impl_k_sem_take>
}
    4cc2:	b005      	add	sp, #20
    4cc4:	f85d fb04 	ldr.w	pc, [sp], #4
    4cc8:	00009ae1 	.word	0x00009ae1

00004ccc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4ccc:	4b09      	ldr	r3, [pc, #36]	; (4cf4 <generic_hfclk_stop+0x28>)
    4cce:	f3bf 8f5b 	dmb	ish
    4cd2:	e853 2f00 	ldrex	r2, [r3]
    4cd6:	f022 0102 	bic.w	r1, r2, #2
    4cda:	e843 1000 	strex	r0, r1, [r3]
    4cde:	2800      	cmp	r0, #0
    4ce0:	d1f7      	bne.n	4cd2 <generic_hfclk_stop+0x6>
    4ce2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4ce6:	07d3      	lsls	r3, r2, #31
    4ce8:	d402      	bmi.n	4cf0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4cea:	2001      	movs	r0, #1
    4cec:	f001 b994 	b.w	6018 <nrfx_clock_stop>
}
    4cf0:	4770      	bx	lr
    4cf2:	bf00      	nop
    4cf4:	20004b28 	.word	0x20004b28

00004cf8 <z_nrf_clock_control_lf_on>:
{
    4cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4cfc:	4947      	ldr	r1, [pc, #284]	; (4e1c <z_nrf_clock_control_lf_on+0x124>)
    4cfe:	f3bf 8f5b 	dmb	ish
    4d02:	4606      	mov	r6, r0
    4d04:	2201      	movs	r2, #1
    4d06:	e851 3f00 	ldrex	r3, [r1]
    4d0a:	e841 2000 	strex	r0, r2, [r1]
    4d0e:	2800      	cmp	r0, #0
    4d10:	d1f9      	bne.n	4d06 <z_nrf_clock_control_lf_on+0xe>
    4d12:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4d16:	b9a3      	cbnz	r3, 4d42 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4d18:	4941      	ldr	r1, [pc, #260]	; (4e20 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    4d1a:	4842      	ldr	r0, [pc, #264]	; (4e24 <z_nrf_clock_control_lf_on+0x12c>)
    4d1c:	604b      	str	r3, [r1, #4]
    4d1e:	60cb      	str	r3, [r1, #12]
    4d20:	608a      	str	r2, [r1, #8]
    4d22:	f7fd f887 	bl	1e34 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4d26:	2800      	cmp	r0, #0
    4d28:	da0b      	bge.n	4d42 <z_nrf_clock_control_lf_on+0x4a>
    4d2a:	493f      	ldr	r1, [pc, #252]	; (4e28 <z_nrf_clock_control_lf_on+0x130>)
    4d2c:	483f      	ldr	r0, [pc, #252]	; (4e2c <z_nrf_clock_control_lf_on+0x134>)
    4d2e:	4a40      	ldr	r2, [pc, #256]	; (4e30 <z_nrf_clock_control_lf_on+0x138>)
    4d30:	f44f 7308 	mov.w	r3, #544	; 0x220
    4d34:	f004 fdaf 	bl	9896 <assert_print>
    4d38:	483d      	ldr	r0, [pc, #244]	; (4e30 <z_nrf_clock_control_lf_on+0x138>)
    4d3a:	f44f 7108 	mov.w	r1, #544	; 0x220
    4d3e:	f004 fda3 	bl	9888 <assert_post_action>
	switch (start_mode) {
    4d42:	b376      	cbz	r6, 4da2 <z_nrf_clock_control_lf_on+0xaa>
    4d44:	1e73      	subs	r3, r6, #1
    4d46:	2b01      	cmp	r3, #1
    4d48:	d859      	bhi.n	4dfe <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4d4a:	2e01      	cmp	r6, #1
    4d4c:	d107      	bne.n	4d5e <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d52:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4d56:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4d5a:	2b01      	cmp	r3, #1
    4d5c:	d021      	beq.n	4da2 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d5e:	f005 f935 	bl	9fcc <k_is_in_isr>
    4d62:	4605      	mov	r5, r0
    4d64:	b9f8      	cbnz	r0, 4da6 <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4d66:	4b33      	ldr	r3, [pc, #204]	; (4e34 <z_nrf_clock_control_lf_on+0x13c>)
    4d68:	781b      	ldrb	r3, [r3, #0]
    4d6a:	b1e3      	cbz	r3, 4da6 <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d70:	2202      	movs	r2, #2
    4d72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4d76:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d78:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4e38 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d7c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4d80:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d84:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4d88:	03d2      	lsls	r2, r2, #15
    4d8a:	d516      	bpl.n	4dba <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4d8c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d90:	2b01      	cmp	r3, #1
    4d92:	d001      	beq.n	4d98 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d94:	2e01      	cmp	r6, #1
    4d96:	d110      	bne.n	4dba <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4d98:	b35d      	cbz	r5, 4df2 <z_nrf_clock_control_lf_on+0xfa>
    4d9a:	f387 8811 	msr	BASEPRI, r7
    4d9e:	f3bf 8f6f 	isb	sy
}
    4da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4da6:	f04f 0320 	mov.w	r3, #32
    4daa:	f3ef 8711 	mrs	r7, BASEPRI
    4dae:	f383 8812 	msr	BASEPRI_MAX, r3
    4db2:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4db6:	2501      	movs	r5, #1
    4db8:	e7de      	b.n	4d78 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4dba:	b1ad      	cbz	r5, 4de8 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4dbc:	4638      	mov	r0, r7
    4dbe:	f7fe ff3b 	bl	3c38 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4dc2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d1da      	bne.n	4d80 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4dca:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4dce:	2a00      	cmp	r2, #0
    4dd0:	d0d6      	beq.n	4d80 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4dd2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4dd6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4dda:	2301      	movs	r3, #1
    4ddc:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4de0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4de4:	60a3      	str	r3, [r4, #8]
}
    4de6:	e7cb      	b.n	4d80 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    4de8:	2100      	movs	r1, #0
    4dea:	2021      	movs	r0, #33	; 0x21
    4dec:	f003 fc32 	bl	8654 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4df0:	e7e7      	b.n	4dc2 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    4df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4df6:	2202      	movs	r2, #2
    4df8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4dfc:	e7d1      	b.n	4da2 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    4dfe:	490f      	ldr	r1, [pc, #60]	; (4e3c <z_nrf_clock_control_lf_on+0x144>)
    4e00:	480a      	ldr	r0, [pc, #40]	; (4e2c <z_nrf_clock_control_lf_on+0x134>)
    4e02:	4a0b      	ldr	r2, [pc, #44]	; (4e30 <z_nrf_clock_control_lf_on+0x138>)
    4e04:	f240 2332 	movw	r3, #562	; 0x232
    4e08:	f004 fd45 	bl	9896 <assert_print>
}
    4e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4e10:	4807      	ldr	r0, [pc, #28]	; (4e30 <z_nrf_clock_control_lf_on+0x138>)
    4e12:	f240 2132 	movw	r1, #562	; 0x232
    4e16:	f004 bd37 	b.w	9888 <assert_post_action>
    4e1a:	bf00      	nop
    4e1c:	20004acc 	.word	0x20004acc
    4e20:	20004abc 	.word	0x20004abc
    4e24:	20004af0 	.word	0x20004af0
    4e28:	0000ae5c 	.word	0x0000ae5c
    4e2c:	0000a8c6 	.word	0x0000a8c6
    4e30:	0000b7da 	.word	0x0000b7da
    4e34:	2000523c 	.word	0x2000523c
    4e38:	e000e100 	.word	0xe000e100
    4e3c:	0000c14d 	.word	0x0000c14d

00004e40 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4e40:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4e42:	4b08      	ldr	r3, [pc, #32]	; (4e64 <uart_console_init+0x24>)
    4e44:	4808      	ldr	r0, [pc, #32]	; (4e68 <uart_console_init+0x28>)
    4e46:	6018      	str	r0, [r3, #0]
    4e48:	f005 f886 	bl	9f58 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4e4c:	b138      	cbz	r0, 4e5e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4e4e:	4807      	ldr	r0, [pc, #28]	; (4e6c <uart_console_init+0x2c>)
    4e50:	f7ff fd94 	bl	497c <__stdout_hook_install>
	__printk_hook_install(console_out);
    4e54:	4805      	ldr	r0, [pc, #20]	; (4e6c <uart_console_init+0x2c>)
    4e56:	f7fc fd99 	bl	198c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4e5a:	2000      	movs	r0, #0
}
    4e5c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4e5e:	f06f 0012 	mvn.w	r0, #18
    4e62:	e7fb      	b.n	4e5c <uart_console_init+0x1c>
    4e64:	20004b2c 	.word	0x20004b2c
    4e68:	0000a2c4 	.word	0x0000a2c4
    4e6c:	00004e71 	.word	0x00004e71

00004e70 <console_out>:
	if ('\n' == c) {
    4e70:	280a      	cmp	r0, #10
{
    4e72:	b538      	push	{r3, r4, r5, lr}
    4e74:	4d07      	ldr	r5, [pc, #28]	; (4e94 <console_out+0x24>)
    4e76:	4604      	mov	r4, r0
	if ('\n' == c) {
    4e78:	d104      	bne.n	4e84 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    4e7a:	6828      	ldr	r0, [r5, #0]
    4e7c:	6883      	ldr	r3, [r0, #8]
    4e7e:	210d      	movs	r1, #13
    4e80:	685b      	ldr	r3, [r3, #4]
    4e82:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4e84:	6828      	ldr	r0, [r5, #0]
    4e86:	6883      	ldr	r3, [r0, #8]
    4e88:	b2e1      	uxtb	r1, r4
    4e8a:	685b      	ldr	r3, [r3, #4]
    4e8c:	4798      	blx	r3
}
    4e8e:	4620      	mov	r0, r4
    4e90:	bd38      	pop	{r3, r4, r5, pc}
    4e92:	bf00      	nop
    4e94:	20004b2c 	.word	0x20004b2c

00004e98 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    4e98:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    4e9a:	6905      	ldr	r5, [r0, #16]
{
    4e9c:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4e9e:	460c      	mov	r4, r1
    4ea0:	b961      	cbnz	r1, 4ebc <gpio_nrfx_manage_callback+0x24>
    4ea2:	4922      	ldr	r1, [pc, #136]	; (4f2c <gpio_nrfx_manage_callback+0x94>)
    4ea4:	4a22      	ldr	r2, [pc, #136]	; (4f30 <gpio_nrfx_manage_callback+0x98>)
    4ea6:	4823      	ldr	r0, [pc, #140]	; (4f34 <gpio_nrfx_manage_callback+0x9c>)
    4ea8:	2324      	movs	r3, #36	; 0x24
    4eaa:	f004 fcf4 	bl	9896 <assert_print>
    4eae:	4822      	ldr	r0, [pc, #136]	; (4f38 <gpio_nrfx_manage_callback+0xa0>)
    4eb0:	f004 fcf1 	bl	9896 <assert_print>
    4eb4:	481e      	ldr	r0, [pc, #120]	; (4f30 <gpio_nrfx_manage_callback+0x98>)
    4eb6:	2124      	movs	r1, #36	; 0x24
    4eb8:	f004 fce6 	bl	9888 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4ebc:	6863      	ldr	r3, [r4, #4]
    4ebe:	b963      	cbnz	r3, 4eda <gpio_nrfx_manage_callback+0x42>
    4ec0:	491e      	ldr	r1, [pc, #120]	; (4f3c <gpio_nrfx_manage_callback+0xa4>)
    4ec2:	4a1b      	ldr	r2, [pc, #108]	; (4f30 <gpio_nrfx_manage_callback+0x98>)
    4ec4:	481b      	ldr	r0, [pc, #108]	; (4f34 <gpio_nrfx_manage_callback+0x9c>)
    4ec6:	2325      	movs	r3, #37	; 0x25
    4ec8:	f004 fce5 	bl	9896 <assert_print>
    4ecc:	481c      	ldr	r0, [pc, #112]	; (4f40 <gpio_nrfx_manage_callback+0xa8>)
    4ece:	f004 fce2 	bl	9896 <assert_print>
    4ed2:	4817      	ldr	r0, [pc, #92]	; (4f30 <gpio_nrfx_manage_callback+0x98>)
    4ed4:	2125      	movs	r1, #37	; 0x25
    4ed6:	f004 fcd7 	bl	9888 <assert_post_action>
	return list->head;
    4eda:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4edc:	b14b      	cbz	r3, 4ef2 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ede:	42a3      	cmp	r3, r4
    4ee0:	d113      	bne.n	4f0a <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    4ee2:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    4ee4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4ee6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    4ee8:	4294      	cmp	r4, r2
    4eea:	d100      	bne.n	4eee <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4eec:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    4eee:	2300      	movs	r3, #0
    4ef0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4ef2:	b97e      	cbnz	r6, 4f14 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4ef4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    4ef6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4ef8:	429c      	cmp	r4, r3
    4efa:	d106      	bne.n	4f0a <gpio_nrfx_manage_callback+0x72>
	return node->next;
    4efc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    4efe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    4f00:	68ab      	ldr	r3, [r5, #8]
    4f02:	429c      	cmp	r4, r3
    4f04:	d1f3      	bne.n	4eee <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4f06:	60aa      	str	r2, [r5, #8]
}
    4f08:	e7f1      	b.n	4eee <gpio_nrfx_manage_callback+0x56>
	return node->next;
    4f0a:	461a      	mov	r2, r3
    4f0c:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d1f2      	bne.n	4ef8 <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    4f12:	b13e      	cbz	r6, 4f24 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    4f14:	686b      	ldr	r3, [r5, #4]
    4f16:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    4f18:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    4f1a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d1e9      	bne.n	4ef4 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    4f20:	60ac      	str	r4, [r5, #8]
}
    4f22:	e7e7      	b.n	4ef4 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    4f24:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4f28:	e7e5      	b.n	4ef6 <gpio_nrfx_manage_callback+0x5e>
    4f2a:	bf00      	nop
    4f2c:	0000b888 	.word	0x0000b888
    4f30:	0000b85b 	.word	0x0000b85b
    4f34:	0000a8c6 	.word	0x0000a8c6
    4f38:	0000b891 	.word	0x0000b891
    4f3c:	0000b8a0 	.word	0x0000b8a0
    4f40:	0000b8b2 	.word	0x0000b8b2

00004f44 <gpio_nrfx_pin_interrupt_configure>:
{
    4f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    4f46:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f48:	7b05      	ldrb	r5, [r0, #12]
    4f4a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4f4e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4f52:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4f56:	d104      	bne.n	4f62 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    4f58:	4620      	mov	r0, r4
    4f5a:	f001 fb79 	bl	6650 <nrfx_gpiote_trigger_disable>
		return 0;
    4f5e:	2000      	movs	r0, #0
    4f60:	e05d      	b.n	501e <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f62:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f64:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f68:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4f6c:	d114      	bne.n	4f98 <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4f72:	bf0c      	ite	eq
    4f74:	2304      	moveq	r3, #4
    4f76:	2305      	movne	r3, #5
    4f78:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4f7c:	2300      	movs	r3, #0
    4f7e:	4619      	mov	r1, r3
    4f80:	aa02      	add	r2, sp, #8
    4f82:	4620      	mov	r0, r4
    4f84:	f001 f96a 	bl	625c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4f88:	4b34      	ldr	r3, [pc, #208]	; (505c <gpio_nrfx_pin_interrupt_configure+0x118>)
    4f8a:	4298      	cmp	r0, r3
    4f8c:	d162      	bne.n	5054 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4f8e:	2101      	movs	r1, #1
    4f90:	4620      	mov	r0, r4
    4f92:	f001 faed 	bl	6570 <nrfx_gpiote_trigger_enable>
	return 0;
    4f96:	e7e2      	b.n	4f5e <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4f98:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4f9c:	d041      	beq.n	5022 <gpio_nrfx_pin_interrupt_configure+0xde>
    4f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4fa2:	bf14      	ite	ne
    4fa4:	2301      	movne	r3, #1
    4fa6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4fa8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4fac:	6883      	ldr	r3, [r0, #8]
    4fae:	40cb      	lsrs	r3, r1
    4fb0:	07d8      	lsls	r0, r3, #31
    4fb2:	d4e3      	bmi.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x38>
    4fb4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4fb8:	d1e0      	bne.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    4fba:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    4fbc:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    4fc0:	d031      	beq.n	5026 <gpio_nrfx_pin_interrupt_configure+0xe2>
    4fc2:	2e01      	cmp	r6, #1
    4fc4:	d104      	bne.n	4fd0 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    4fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4fca:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fcc:	07d9      	lsls	r1, r3, #31
    4fce:	d40e      	bmi.n	4fee <gpio_nrfx_pin_interrupt_configure+0xaa>
    4fd0:	4923      	ldr	r1, [pc, #140]	; (5060 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4fd2:	4824      	ldr	r0, [pc, #144]	; (5064 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4fd4:	4a24      	ldr	r2, [pc, #144]	; (5068 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4fd6:	f240 2329 	movw	r3, #553	; 0x229
    4fda:	f004 fc5c 	bl	9896 <assert_print>
    4fde:	4822      	ldr	r0, [pc, #136]	; (5068 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4fe0:	f240 2129 	movw	r1, #553	; 0x229
    4fe4:	f004 fc50 	bl	9888 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fe8:	b316      	cbz	r6, 5030 <gpio_nrfx_pin_interrupt_configure+0xec>
    4fea:	2e01      	cmp	r6, #1
    4fec:	d123      	bne.n	5036 <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    4fee:	4b1f      	ldr	r3, [pc, #124]	; (506c <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4ff0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4ff4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4ff8:	07db      	lsls	r3, r3, #31
    4ffa:	d4bf      	bmi.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4ffc:	f10d 0507 	add.w	r5, sp, #7
    5000:	4629      	mov	r1, r5
    5002:	4620      	mov	r0, r4
    5004:	f001 fa4c 	bl	64a0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5008:	4b19      	ldr	r3, [pc, #100]	; (5070 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    500a:	4298      	cmp	r0, r3
    500c:	d120      	bne.n	5050 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    500e:	4628      	mov	r0, r5
    5010:	f001 faa8 	bl	6564 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5014:	4b11      	ldr	r3, [pc, #68]	; (505c <gpio_nrfx_pin_interrupt_configure+0x118>)
    5016:	4298      	cmp	r0, r3
    5018:	d01a      	beq.n	5050 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    501a:	f06f 000b 	mvn.w	r0, #11
}
    501e:	b004      	add	sp, #16
    5020:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5022:	2303      	movs	r3, #3
    5024:	e7c0      	b.n	4fa8 <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    5026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    502a:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    502c:	07da      	lsls	r2, r3, #31
    502e:	d5cf      	bpl.n	4fd0 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    5030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5034:	e7dc      	b.n	4ff0 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    5036:	4a0c      	ldr	r2, [pc, #48]	; (5068 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5038:	490e      	ldr	r1, [pc, #56]	; (5074 <gpio_nrfx_pin_interrupt_configure+0x130>)
    503a:	480a      	ldr	r0, [pc, #40]	; (5064 <gpio_nrfx_pin_interrupt_configure+0x120>)
    503c:	f240 232e 	movw	r3, #558	; 0x22e
    5040:	f004 fc29 	bl	9896 <assert_print>
    5044:	4808      	ldr	r0, [pc, #32]	; (5068 <gpio_nrfx_pin_interrupt_configure+0x124>)
    5046:	f240 212e 	movw	r1, #558	; 0x22e
    504a:	f004 fc1d 	bl	9888 <assert_post_action>
    504e:	e7ef      	b.n	5030 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    5050:	9503      	str	r5, [sp, #12]
    5052:	e793      	b.n	4f7c <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    5054:	f06f 0004 	mvn.w	r0, #4
    5058:	e7e1      	b.n	501e <gpio_nrfx_pin_interrupt_configure+0xda>
    505a:	bf00      	nop
    505c:	0bad0000 	.word	0x0bad0000
    5060:	0000b8fc 	.word	0x0000b8fc
    5064:	0000a8c6 	.word	0x0000a8c6
    5068:	0000b8c9 	.word	0x0000b8c9
    506c:	50000300 	.word	0x50000300
    5070:	0bad0004 	.word	0x0bad0004
    5074:	0000c14d 	.word	0x0000c14d

00005078 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5078:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    507a:	f001 fa63 	bl	6544 <nrfx_gpiote_is_init>
    507e:	4604      	mov	r4, r0
    5080:	b968      	cbnz	r0, 509e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5082:	f001 fa37 	bl	64f4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5086:	4b08      	ldr	r3, [pc, #32]	; (50a8 <gpio_nrfx_init+0x30>)
    5088:	4298      	cmp	r0, r3
    508a:	d10a      	bne.n	50a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    508c:	4807      	ldr	r0, [pc, #28]	; (50ac <gpio_nrfx_init+0x34>)
    508e:	4621      	mov	r1, r4
    5090:	f001 fa00 	bl	6494 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5094:	4622      	mov	r2, r4
    5096:	2105      	movs	r1, #5
    5098:	2006      	movs	r0, #6
    509a:	f7fe fe43 	bl	3d24 <z_arm_irq_priority_set>
		return 0;
    509e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    50a0:	bd10      	pop	{r4, pc}
		return -EIO;
    50a2:	f06f 0004 	mvn.w	r0, #4
    50a6:	e7fb      	b.n	50a0 <gpio_nrfx_init+0x28>
    50a8:	0bad0000 	.word	0x0bad0000
    50ac:	000050b1 	.word	0x000050b1

000050b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50b0:	0943      	lsrs	r3, r0, #5
{
    50b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50b6:	d003      	beq.n	50c0 <nrfx_gpio_handler+0x10>
    50b8:	2b01      	cmp	r3, #1
    50ba:	d030      	beq.n	511e <nrfx_gpio_handler+0x6e>
}
    50bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    50c0:	4f19      	ldr	r7, [pc, #100]	; (5128 <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    50c2:	693b      	ldr	r3, [r7, #16]
    50c4:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    50c6:	2c00      	cmp	r4, #0
    50c8:	d0f8      	beq.n	50bc <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    50ca:	f000 001f 	and.w	r0, r0, #31
    50ce:	2601      	movs	r6, #1
	return node->next;
    50d0:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    50d2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 512c <nrfx_gpio_handler+0x7c>
    50d6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5130 <nrfx_gpio_handler+0x80>
    50da:	f8df a058 	ldr.w	sl, [pc, #88]	; 5134 <nrfx_gpio_handler+0x84>
    50de:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    50e0:	2c00      	cmp	r4, #0
    50e2:	d0eb      	beq.n	50bc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    50e4:	68a3      	ldr	r3, [r4, #8]
    50e6:	421e      	tst	r6, r3
    50e8:	d014      	beq.n	5114 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    50ea:	6863      	ldr	r3, [r4, #4]
    50ec:	b963      	cbnz	r3, 5108 <nrfx_gpio_handler+0x58>
    50ee:	4649      	mov	r1, r9
    50f0:	2345      	movs	r3, #69	; 0x45
    50f2:	4642      	mov	r2, r8
    50f4:	4650      	mov	r0, sl
    50f6:	f004 fbce 	bl	9896 <assert_print>
    50fa:	480f      	ldr	r0, [pc, #60]	; (5138 <nrfx_gpio_handler+0x88>)
    50fc:	f004 fbcb 	bl	9896 <assert_print>
    5100:	2145      	movs	r1, #69	; 0x45
    5102:	4640      	mov	r0, r8
    5104:	f004 fbc0 	bl	9888 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    5108:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    510c:	4621      	mov	r1, r4
    510e:	4032      	ands	r2, r6
    5110:	4638      	mov	r0, r7
    5112:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5114:	b12d      	cbz	r5, 5122 <nrfx_gpio_handler+0x72>
    5116:	682b      	ldr	r3, [r5, #0]
    5118:	462c      	mov	r4, r5
    511a:	461d      	mov	r5, r3
    511c:	e7e0      	b.n	50e0 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    511e:	4f07      	ldr	r7, [pc, #28]	; (513c <nrfx_gpio_handler+0x8c>)
    5120:	e7cf      	b.n	50c2 <nrfx_gpio_handler+0x12>
    5122:	462b      	mov	r3, r5
    5124:	e7f8      	b.n	5118 <nrfx_gpio_handler+0x68>
    5126:	bf00      	nop
    5128:	0000a294 	.word	0x0000a294
    512c:	0000b85b 	.word	0x0000b85b
    5130:	0000b91f 	.word	0x0000b91f
    5134:	0000a8c6 	.word	0x0000a8c6
    5138:	0000b8b2 	.word	0x0000b8b2
    513c:	0000a27c 	.word	0x0000a27c

00005140 <gpio_nrfx_pin_configure>:
{
    5140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    5144:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5146:	7b3b      	ldrb	r3, [r7, #12]
    5148:	f001 051f 	and.w	r5, r1, #31
{
    514c:	b085      	sub	sp, #20
    514e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5150:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    5154:	4614      	mov	r4, r2
    5156:	b9d2      	cbnz	r2, 518e <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    5158:	a902      	add	r1, sp, #8
    515a:	4628      	mov	r0, r5
    515c:	f001 f9a0 	bl	64a0 <nrfx_gpiote_channel_get>
    5160:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    5162:	4628      	mov	r0, r5
    5164:	f001 fa9e 	bl	66a4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    5168:	4b46      	ldr	r3, [pc, #280]	; (5284 <gpio_nrfx_pin_configure+0x144>)
    516a:	4298      	cmp	r0, r3
    516c:	d004      	beq.n	5178 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    516e:	f06f 0004 	mvn.w	r0, #4
}
    5172:	b005      	add	sp, #20
    5174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    5178:	4284      	cmp	r4, r0
    517a:	d001      	beq.n	5180 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    517c:	2000      	movs	r0, #0
    517e:	e7f8      	b.n	5172 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    5180:	f89d 0008 	ldrb.w	r0, [sp, #8]
    5184:	f001 f9e8 	bl	6558 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    5188:	42a0      	cmp	r0, r4
    518a:	d0f7      	beq.n	517c <gpio_nrfx_pin_configure+0x3c>
    518c:	e7ef      	b.n	516e <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    518e:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    5192:	f10d 0103 	add.w	r1, sp, #3
    5196:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    5198:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    519c:	f001 f980 	bl	64a0 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    51a0:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    51a2:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    51a4:	aa02      	add	r2, sp, #8
    51a6:	4649      	mov	r1, r9
    51a8:	4628      	mov	r0, r5
    51aa:	f001 f857 	bl	625c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    51ae:	4b35      	ldr	r3, [pc, #212]	; (5284 <gpio_nrfx_pin_configure+0x144>)
    51b0:	4298      	cmp	r0, r3
    51b2:	d002      	beq.n	51ba <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    51b4:	f06f 0015 	mvn.w	r0, #21
    51b8:	e7db      	b.n	5172 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    51ba:	4580      	cmp	r8, r0
    51bc:	d103      	bne.n	51c6 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    51be:	f89d 0003 	ldrb.w	r0, [sp, #3]
    51c2:	f001 f9c9 	bl	6558 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    51c6:	03a3      	lsls	r3, r4, #14
    51c8:	d54c      	bpl.n	5264 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    51ca:	f240 6306 	movw	r3, #1542	; 0x606
    51ce:	4023      	ands	r3, r4
    51d0:	f240 2206 	movw	r2, #518	; 0x206
    51d4:	4293      	cmp	r3, r2
    51d6:	d019      	beq.n	520c <gpio_nrfx_pin_configure+0xcc>
    51d8:	d80c      	bhi.n	51f4 <gpio_nrfx_pin_configure+0xb4>
    51da:	2b06      	cmp	r3, #6
    51dc:	d017      	beq.n	520e <gpio_nrfx_pin_configure+0xce>
    51de:	d804      	bhi.n	51ea <gpio_nrfx_pin_configure+0xaa>
    51e0:	b1ab      	cbz	r3, 520e <gpio_nrfx_pin_configure+0xce>
    51e2:	2b02      	cmp	r3, #2
    51e4:	d1e6      	bne.n	51b4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    51e6:	2304      	movs	r3, #4
    51e8:	e011      	b.n	520e <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    51ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    51ee:	d1e1      	bne.n	51b4 <gpio_nrfx_pin_configure+0x74>
    51f0:	2301      	movs	r3, #1
    51f2:	e00c      	b.n	520e <gpio_nrfx_pin_configure+0xce>
    51f4:	f240 4202 	movw	r2, #1026	; 0x402
    51f8:	4293      	cmp	r3, r2
    51fa:	d027      	beq.n	524c <gpio_nrfx_pin_configure+0x10c>
    51fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    5200:	d026      	beq.n	5250 <gpio_nrfx_pin_configure+0x110>
    5202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5206:	d1d5      	bne.n	51b4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    5208:	2302      	movs	r3, #2
    520a:	e000      	b.n	520e <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    520c:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    520e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5212:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5216:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    521a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    521c:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5220:	bf54      	ite	pl
    5222:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5226:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5228:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    522a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    522e:	d511      	bpl.n	5254 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5230:	687a      	ldr	r2, [r7, #4]
    5232:	2301      	movs	r3, #1
    5234:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5236:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    523a:	2200      	movs	r2, #0
    523c:	a901      	add	r1, sp, #4
    523e:	4628      	mov	r0, r5
    5240:	f001 f8b4 	bl	63ac <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5244:	4b0f      	ldr	r3, [pc, #60]	; (5284 <gpio_nrfx_pin_configure+0x144>)
    5246:	4298      	cmp	r0, r3
    5248:	d098      	beq.n	517c <gpio_nrfx_pin_configure+0x3c>
    524a:	e7b3      	b.n	51b4 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    524c:	2305      	movs	r3, #5
    524e:	e7de      	b.n	520e <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    5250:	2303      	movs	r3, #3
    5252:	e7dc      	b.n	520e <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5254:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5256:	bf41      	itttt	mi
    5258:	2301      	movmi	r3, #1
    525a:	687a      	ldrmi	r2, [r7, #4]
    525c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    525e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5262:	e7ea      	b.n	523a <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    5264:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5266:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    526a:	bf54      	ite	pl
    526c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5270:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5272:	461a      	mov	r2, r3
    5274:	a901      	add	r1, sp, #4
    5276:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5278:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    527c:	f000 ffee 	bl	625c <nrfx_gpiote_input_configure>
    5280:	e7e0      	b.n	5244 <gpio_nrfx_pin_configure+0x104>
    5282:	bf00      	nop
    5284:	0bad0000 	.word	0x0bad0000

00005288 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    528a:	ab0b      	add	r3, sp, #44	; 0x2c
    528c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    528e:	9303      	str	r3, [sp, #12]
    5290:	4b05      	ldr	r3, [pc, #20]	; (52a8 <z_log_msg2_runtime_create.constprop.0+0x20>)
    5292:	9302      	str	r3, [sp, #8]
    5294:	2300      	movs	r3, #0
    5296:	e9cd 3300 	strd	r3, r3, [sp]
    529a:	2201      	movs	r2, #1
    529c:	4618      	mov	r0, r3
    529e:	f7fe f949 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    52a2:	b007      	add	sp, #28
    52a4:	f85d fb04 	ldr.w	pc, [sp], #4
    52a8:	0000b939 	.word	0x0000b939

000052ac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    52ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    52ae:	794b      	ldrb	r3, [r1, #5]
    52b0:	2b01      	cmp	r3, #1
    52b2:	d026      	beq.n	5302 <uarte_nrfx_configure+0x56>
    52b4:	2b03      	cmp	r3, #3
    52b6:	d121      	bne.n	52fc <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    52b8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    52ba:	798b      	ldrb	r3, [r1, #6]
    52bc:	2b03      	cmp	r3, #3
    52be:	d11d      	bne.n	52fc <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    52c0:	79cc      	ldrb	r4, [r1, #7]
    52c2:	b10c      	cbz	r4, 52c8 <uarte_nrfx_configure+0x1c>
    52c4:	2c01      	cmp	r4, #1
    52c6:	d119      	bne.n	52fc <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    52c8:	790a      	ldrb	r2, [r1, #4]
    52ca:	b112      	cbz	r2, 52d2 <uarte_nrfx_configure+0x26>
    52cc:	2a02      	cmp	r2, #2
    52ce:	d115      	bne.n	52fc <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    52d0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    52d2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    52d4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    52d6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    52da:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    52dc:	d065      	beq.n	53aa <uarte_nrfx_configure+0xfe>
    52de:	d82d      	bhi.n	533c <uarte_nrfx_configure+0x90>
    52e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    52e4:	d064      	beq.n	53b0 <uarte_nrfx_configure+0x104>
    52e6:	d816      	bhi.n	5316 <uarte_nrfx_configure+0x6a>
    52e8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    52ec:	d062      	beq.n	53b4 <uarte_nrfx_configure+0x108>
    52ee:	d80a      	bhi.n	5306 <uarte_nrfx_configure+0x5a>
    52f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    52f4:	d061      	beq.n	53ba <uarte_nrfx_configure+0x10e>
    52f6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    52fa:	d061      	beq.n	53c0 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    52fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5300:	e052      	b.n	53a8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    5302:	2600      	movs	r6, #0
    5304:	e7d9      	b.n	52ba <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    5306:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    530a:	d05c      	beq.n	53c6 <uarte_nrfx_configure+0x11a>
    530c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5310:	d1f4      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5312:	4b37      	ldr	r3, [pc, #220]	; (53f0 <uarte_nrfx_configure+0x144>)
    5314:	e03c      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5316:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    531a:	d057      	beq.n	53cc <uarte_nrfx_configure+0x120>
    531c:	d807      	bhi.n	532e <uarte_nrfx_configure+0x82>
    531e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5322:	d055      	beq.n	53d0 <uarte_nrfx_configure+0x124>
    5324:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5328:	d1e8      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    532a:	4b32      	ldr	r3, [pc, #200]	; (53f4 <uarte_nrfx_configure+0x148>)
    532c:	e030      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    532e:	f647 2712 	movw	r7, #31250	; 0x7a12
    5332:	42bb      	cmp	r3, r7
    5334:	d1e2      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    5336:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    533a:	e029      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    533c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    5340:	d048      	beq.n	53d4 <uarte_nrfx_configure+0x128>
    5342:	d813      	bhi.n	536c <uarte_nrfx_configure+0xc0>
    5344:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    5348:	d047      	beq.n	53da <uarte_nrfx_configure+0x12e>
    534a:	d809      	bhi.n	5360 <uarte_nrfx_configure+0xb4>
    534c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    5350:	42bb      	cmp	r3, r7
    5352:	d044      	beq.n	53de <uarte_nrfx_configure+0x132>
    5354:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    5358:	d1d0      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    535a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    535e:	e017      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5360:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    5364:	d1ca      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    5366:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    536a:	e011      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    536c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5370:	d038      	beq.n	53e4 <uarte_nrfx_configure+0x138>
    5372:	d808      	bhi.n	5386 <uarte_nrfx_configure+0xda>
    5374:	4f20      	ldr	r7, [pc, #128]	; (53f8 <uarte_nrfx_configure+0x14c>)
    5376:	42bb      	cmp	r3, r7
    5378:	d037      	beq.n	53ea <uarte_nrfx_configure+0x13e>
    537a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    537e:	d1bd      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5380:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5384:	e004      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5386:	4f1d      	ldr	r7, [pc, #116]	; (53fc <uarte_nrfx_configure+0x150>)
    5388:	42bb      	cmp	r3, r7
    538a:	d1b7      	bne.n	52fc <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    538c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5390:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5392:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    5396:	1d03      	adds	r3, r0, #4
    5398:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    539a:	4334      	orrs	r4, r6
    539c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    539e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    53a2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    53a6:	2000      	movs	r0, #0
}
    53a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    53aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    53ae:	e7ef      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    53b0:	4b13      	ldr	r3, [pc, #76]	; (5400 <uarte_nrfx_configure+0x154>)
    53b2:	e7ed      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    53b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    53b8:	e7ea      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    53ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    53be:	e7e7      	b.n	5390 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    53c0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    53c4:	e7e4      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    53c6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    53ca:	e7e1      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    53cc:	4b0d      	ldr	r3, [pc, #52]	; (5404 <uarte_nrfx_configure+0x158>)
    53ce:	e7df      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    53d0:	4b0d      	ldr	r3, [pc, #52]	; (5408 <uarte_nrfx_configure+0x15c>)
    53d2:	e7dd      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    53d4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    53d8:	e7da      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    53da:	4b0c      	ldr	r3, [pc, #48]	; (540c <uarte_nrfx_configure+0x160>)
    53dc:	e7d8      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    53de:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    53e2:	e7d5      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    53e4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    53e8:	e7d2      	b.n	5390 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    53ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    53ee:	e7cf      	b.n	5390 <uarte_nrfx_configure+0xe4>
    53f0:	0013b000 	.word	0x0013b000
    53f4:	004ea000 	.word	0x004ea000
    53f8:	0003d090 	.word	0x0003d090
    53fc:	000f4240 	.word	0x000f4240
    5400:	00275000 	.word	0x00275000
    5404:	0075c000 	.word	0x0075c000
    5408:	003af000 	.word	0x003af000
    540c:	013a9000 	.word	0x013a9000

00005410 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    5410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5414:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5418:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    541a:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    541e:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    5422:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5424:	2100      	movs	r1, #0
    5426:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    542a:	4607      	mov	r7, r0
	data->dev = dev;
    542c:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    542e:	aa05      	add	r2, sp, #20
    5430:	4648      	mov	r0, r9
    5432:	f004 fc0d 	bl	9c50 <pinctrl_lookup_state>
	if (ret < 0) {
    5436:	1e04      	subs	r4, r0, #0
    5438:	db25      	blt.n	5486 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    543a:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    543c:	f8d9 2000 	ldr.w	r2, [r9]
    5440:	7919      	ldrb	r1, [r3, #4]
    5442:	6818      	ldr	r0, [r3, #0]
    5444:	f004 fc5b 	bl	9cfe <pinctrl_configure_pins>
	if (err < 0) {
    5448:	1e04      	subs	r4, r0, #0
    544a:	db1c      	blt.n	5486 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    544c:	1d31      	adds	r1, r6, #4
    544e:	4638      	mov	r0, r7
    5450:	f7ff ff2c 	bl	52ac <uarte_nrfx_configure>
	if (err) {
    5454:	4604      	mov	r4, r0
    5456:	b9b0      	cbnz	r0, 5486 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5458:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    545c:	0799      	lsls	r1, r3, #30
    545e:	d529      	bpl.n	54b4 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    5460:	f106 0012 	add.w	r0, r6, #18
    5464:	f001 fa22 	bl	68ac <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    5468:	4b27      	ldr	r3, [pc, #156]	; (5508 <uarte_instance_init.constprop.0+0xf8>)
    546a:	4298      	cmp	r0, r3
    546c:	d00f      	beq.n	548e <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    546e:	4b27      	ldr	r3, [pc, #156]	; (550c <uarte_instance_init.constprop.0+0xfc>)
    5470:	9400      	str	r4, [sp, #0]
    5472:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5476:	4620      	mov	r0, r4
    5478:	4623      	mov	r3, r4
    547a:	4925      	ldr	r1, [pc, #148]	; (5510 <uarte_instance_init.constprop.0+0x100>)
    547c:	2201      	movs	r2, #1
    547e:	f7ff ff03 	bl	5288 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    5482:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5486:	4620      	mov	r0, r4
    5488:	b007      	add	sp, #28
    548a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    548e:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5490:	00c3      	lsls	r3, r0, #3
    5492:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5496:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    549a:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    549e:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54a2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    54a6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    54aa:	4a1a      	ldr	r2, [pc, #104]	; (5514 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    54ac:	2301      	movs	r3, #1
    54ae:	4083      	lsls	r3, r0
    54b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    54b4:	2308      	movs	r3, #8
    54b6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    54ba:	f898 3008 	ldrb.w	r3, [r8, #8]
    54be:	b95b      	cbnz	r3, 54d8 <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54c0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    54c4:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    54c8:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    54cc:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    54d0:	2301      	movs	r3, #1
    54d2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54d6:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    54d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    54dc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    54de:	bf5c      	itt	pl
    54e0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    54e4:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    54e8:	06db      	lsls	r3, r3, #27
    54ea:	bf44      	itt	mi
    54ec:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    54f0:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    54f4:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    54f6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    54f8:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    54fc:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5500:	2301      	movs	r3, #1
    5502:	60ab      	str	r3, [r5, #8]
    5504:	60eb      	str	r3, [r5, #12]
	return 0;
    5506:	e7be      	b.n	5486 <uarte_instance_init.constprop.0+0x76>
    5508:	0bad0000 	.word	0x0bad0000
    550c:	0000b939 	.word	0x0000b939
    5510:	0000a49c 	.word	0x0000a49c
    5514:	4001f000 	.word	0x4001f000

00005518 <uarte_nrfx_poll_out>:
{
    5518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    551a:	6906      	ldr	r6, [r0, #16]
{
    551c:	4605      	mov	r5, r0
    551e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5520:	f004 fd54 	bl	9fcc <k_is_in_isr>
    5524:	b9b0      	cbnz	r0, 5554 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    5526:	4b2c      	ldr	r3, [pc, #176]	; (55d8 <uarte_nrfx_poll_out+0xc0>)
    5528:	781b      	ldrb	r3, [r3, #0]
    552a:	b19b      	cbz	r3, 5554 <uarte_nrfx_poll_out+0x3c>
{
    552c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    552e:	6868      	ldr	r0, [r5, #4]
    5530:	f004 fb22 	bl	9b78 <is_tx_ready.isra.0>
    5534:	b9f8      	cbnz	r0, 5576 <uarte_nrfx_poll_out+0x5e>
    5536:	2001      	movs	r0, #1
    5538:	f004 fc8c 	bl	9e54 <nrfx_busy_wait>
    553c:	3c01      	subs	r4, #1
    553e:	d1f6      	bne.n	552e <uarte_nrfx_poll_out+0x16>
    5540:	2100      	movs	r1, #0
    5542:	2021      	movs	r0, #33	; 0x21
    5544:	f003 f886 	bl	8654 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5548:	e7f0      	b.n	552c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    554a:	f384 8811 	msr	BASEPRI, r4
    554e:	f3bf 8f6f 	isb	sy
}
    5552:	e7f5      	b.n	5540 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    5554:	f04f 0320 	mov.w	r3, #32
    5558:	f3ef 8411 	mrs	r4, BASEPRI
    555c:	f383 8812 	msr	BASEPRI_MAX, r3
    5560:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5564:	6868      	ldr	r0, [r5, #4]
    5566:	f004 fb07 	bl	9b78 <is_tx_ready.isra.0>
    556a:	b988      	cbnz	r0, 5590 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    556c:	f384 8811 	msr	BASEPRI, r4
    5570:	f3bf 8f6f 	isb	sy
}
    5574:	e7ee      	b.n	5554 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    5576:	f04f 0320 	mov.w	r3, #32
    557a:	f3ef 8411 	mrs	r4, BASEPRI
    557e:	f383 8812 	msr	BASEPRI_MAX, r3
    5582:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5586:	6868      	ldr	r0, [r5, #4]
    5588:	f004 faf6 	bl	9b78 <is_tx_ready.isra.0>
    558c:	2800      	cmp	r0, #0
    558e:	d0dc      	beq.n	554a <uarte_nrfx_poll_out+0x32>
	data->char_out = c;
    5590:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    5594:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    5596:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    5598:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    559a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    559e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55a2:	2200      	movs	r2, #0
    55a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    55a8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    55ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    55b0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    55b4:	684a      	ldr	r2, [r1, #4]
    55b6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    55b8:	bf41      	itttt	mi
    55ba:	2208      	movmi	r2, #8
    55bc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    55c0:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    55c4:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    55c8:	2201      	movs	r2, #1
    55ca:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    55cc:	f384 8811 	msr	BASEPRI, r4
    55d0:	f3bf 8f6f 	isb	sy
}
    55d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55d6:	bf00      	nop
    55d8:	2000523c 	.word	0x2000523c

000055dc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    55dc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    55de:	2301      	movs	r3, #1
    55e0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    55e2:	4a0e      	ldr	r2, [pc, #56]	; (561c <compare_int_lock+0x40>)
    55e4:	f3bf 8f5b 	dmb	ish
    55e8:	43dc      	mvns	r4, r3
    55ea:	e852 1f00 	ldrex	r1, [r2]
    55ee:	ea01 0504 	and.w	r5, r1, r4
    55f2:	e842 5600 	strex	r6, r5, [r2]
    55f6:	2e00      	cmp	r6, #0
    55f8:	d1f7      	bne.n	55ea <compare_int_lock+0xe>
    55fa:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    55fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5602:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5604:	4806      	ldr	r0, [pc, #24]	; (5620 <compare_int_lock+0x44>)
    5606:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    560a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    560e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5612:	420b      	tst	r3, r1
}
    5614:	bf14      	ite	ne
    5616:	2001      	movne	r0, #1
    5618:	2000      	moveq	r0, #0
    561a:	bd70      	pop	{r4, r5, r6, pc}
    561c:	20004b4c 	.word	0x20004b4c
    5620:	40011000 	.word	0x40011000

00005624 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5624:	491b      	ldr	r1, [pc, #108]	; (5694 <sys_clock_timeout_handler+0x70>)
{
    5626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5628:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    562a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    562e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5630:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5634:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5638:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    563a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    563e:	d30f      	bcc.n	5660 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5640:	f003 fb12 	bl	8c68 <sys_clock_announce>
    return p_reg->CC[ch];
    5644:	00a3      	lsls	r3, r4, #2
    5646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    564a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    564e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    5652:	4295      	cmp	r5, r2
    5654:	d11d      	bne.n	5692 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    5656:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    565a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    565e:	e012      	b.n	5686 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5660:	4b0d      	ldr	r3, [pc, #52]	; (5698 <sys_clock_timeout_handler+0x74>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	0a1a      	lsrs	r2, r3, #8
    5666:	061b      	lsls	r3, r3, #24
    5668:	195e      	adds	r6, r3, r5
    566a:	4b0c      	ldr	r3, [pc, #48]	; (569c <sys_clock_timeout_handler+0x78>)
    566c:	f142 0700 	adc.w	r7, r2, #0
    5670:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5674:	f003 faf8 	bl	8c68 <sys_clock_announce>
    return p_reg->CC[ch];
    5678:	4a09      	ldr	r2, [pc, #36]	; (56a0 <sys_clock_timeout_handler+0x7c>)
    567a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    567e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    5682:	429d      	cmp	r5, r3
    5684:	d105      	bne.n	5692 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5686:	4a06      	ldr	r2, [pc, #24]	; (56a0 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    568c:	40a3      	lsls	r3, r4
    568e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5694:	200043d0 	.word	0x200043d0
    5698:	20004b50 	.word	0x20004b50
    569c:	200043d8 	.word	0x200043d8
    56a0:	40011000 	.word	0x40011000

000056a4 <compare_int_unlock>:
	if (key) {
    56a4:	b311      	cbz	r1, 56ec <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56a6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    56aa:	2301      	movs	r3, #1
    56ac:	4a10      	ldr	r2, [pc, #64]	; (56f0 <compare_int_unlock+0x4c>)
    56ae:	4083      	lsls	r3, r0
    56b0:	e852 cf00 	ldrex	ip, [r2]
    56b4:	ea4c 0c03 	orr.w	ip, ip, r3
    56b8:	e842 c100 	strex	r1, ip, [r2]
    56bc:	2900      	cmp	r1, #0
    56be:	d1f7      	bne.n	56b0 <compare_int_unlock+0xc>
    56c0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    56c4:	4a0b      	ldr	r2, [pc, #44]	; (56f4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    56c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    56ca:	4083      	lsls	r3, r0
    56cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    56d0:	4b09      	ldr	r3, [pc, #36]	; (56f8 <compare_int_unlock+0x54>)
    56d2:	f3bf 8f5b 	dmb	ish
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    56dc:	40c3      	lsrs	r3, r0
    56de:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    56e0:	bf42      	ittt	mi
    56e2:	4b06      	ldrmi	r3, [pc, #24]	; (56fc <compare_int_unlock+0x58>)
    56e4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    56e8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    56ec:	4770      	bx	lr
    56ee:	bf00      	nop
    56f0:	20004b4c 	.word	0x20004b4c
    56f4:	40011000 	.word	0x40011000
    56f8:	20004b48 	.word	0x20004b48
    56fc:	e000e100 	.word	0xe000e100

00005700 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5700:	4b0d      	ldr	r3, [pc, #52]	; (5738 <z_nrf_rtc_timer_read+0x38>)
    5702:	6818      	ldr	r0, [r3, #0]
    5704:	0a01      	lsrs	r1, r0, #8
    5706:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    5708:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    570c:	4b0b      	ldr	r3, [pc, #44]	; (573c <z_nrf_rtc_timer_read+0x3c>)
    570e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5712:	1818      	adds	r0, r3, r0
    5714:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    5718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    571c:	d20a      	bcs.n	5734 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    571e:	4b08      	ldr	r3, [pc, #32]	; (5740 <z_nrf_rtc_timer_read+0x40>)
    5720:	e9d3 2300 	ldrd	r2, r3, [r3]
    5724:	4290      	cmp	r0, r2
    5726:	eb71 0303 	sbcs.w	r3, r1, r3
    572a:	d203      	bcs.n	5734 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    572c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5730:	f141 0100 	adc.w	r1, r1, #0
}
    5734:	4770      	bx	lr
    5736:	bf00      	nop
    5738:	20004b50 	.word	0x20004b50
    573c:	40011000 	.word	0x40011000
    5740:	200043d8 	.word	0x200043d8

00005744 <compare_set>:
{
    5744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5748:	4614      	mov	r4, r2
    574a:	461d      	mov	r5, r3
    574c:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    574e:	f7ff ff45 	bl	55dc <compare_int_lock>
    5752:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5754:	f7ff ffd4 	bl	5700 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5758:	42a0      	cmp	r0, r4
    575a:	eb71 0305 	sbcs.w	r3, r1, r5
    575e:	d27a      	bcs.n	5856 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    5760:	4b46      	ldr	r3, [pc, #280]	; (587c <compare_set+0x138>)
    5762:	1a20      	subs	r0, r4, r0
    5764:	eb65 0101 	sbc.w	r1, r5, r1
    5768:	4298      	cmp	r0, r3
    576a:	f171 0100 	sbcs.w	r1, r1, #0
    576e:	f080 8081 	bcs.w	5874 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    5772:	4b43      	ldr	r3, [pc, #268]	; (5880 <compare_set+0x13c>)
    5774:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5778:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    577c:	429d      	cmp	r5, r3
    577e:	bf08      	it	eq
    5780:	4294      	cmpeq	r4, r2
    5782:	d053      	beq.n	582c <compare_set+0xe8>
    5784:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    5788:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    578c:	f107 0950 	add.w	r9, r7, #80	; 0x50
    5790:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    5794:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5798:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    579c:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    57a0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    57a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    57a8:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    57ac:	4a35      	ldr	r2, [pc, #212]	; (5884 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    57ae:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    57b2:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    57b4:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    57b6:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    57ba:	eba0 000b 	sub.w	r0, r0, fp
    57be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    57c2:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    57c6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    57c8:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    57cc:	d105      	bne.n	57da <compare_set+0x96>
    57ce:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    57d0:	2013      	movs	r0, #19
    57d2:	f004 fc41 	bl	a058 <z_impl_k_busy_wait>
    57d6:	4a2b      	ldr	r2, [pc, #172]	; (5884 <compare_set+0x140>)
    57d8:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    57da:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    57de:	eba6 000c 	sub.w	r0, r6, ip
    57e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    57e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    57ea:	bf88      	it	hi
    57ec:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    57ee:	2000      	movs	r0, #0
    57f0:	f8c9 0000 	str.w	r0, [r9]
    57f4:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    57f8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    57fc:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5800:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5804:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    5808:	4583      	cmp	fp, r0
    580a:	d006      	beq.n	581a <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    580c:	1a30      	subs	r0, r6, r0
    580e:	3802      	subs	r0, #2
    5810:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5814:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5818:	d81b      	bhi.n	5852 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    581a:	eba6 0608 	sub.w	r6, r6, r8
    581e:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5822:	1936      	adds	r6, r6, r4
    5824:	f145 0300 	adc.w	r3, r5, #0
    5828:	4634      	mov	r4, r6
    582a:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    582c:	4914      	ldr	r1, [pc, #80]	; (5880 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    582e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5830:	013b      	lsls	r3, r7, #4
    5832:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    5836:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    583a:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    583c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    5840:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5842:	4638      	mov	r0, r7
    5844:	9900      	ldr	r1, [sp, #0]
    5846:	f7ff ff2d 	bl	56a4 <compare_int_unlock>
}
    584a:	4620      	mov	r0, r4
    584c:	b003      	add	sp, #12
    584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5852:	4630      	mov	r0, r6
    5854:	e7af      	b.n	57b6 <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5856:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5858:	4a0b      	ldr	r2, [pc, #44]	; (5888 <compare_set+0x144>)
    585a:	f3bf 8f5b 	dmb	ish
    585e:	40bb      	lsls	r3, r7
    5860:	e852 0f00 	ldrex	r0, [r2]
    5864:	4318      	orrs	r0, r3
    5866:	e842 0100 	strex	r1, r0, [r2]
    586a:	2900      	cmp	r1, #0
    586c:	d1f8      	bne.n	5860 <compare_set+0x11c>
    586e:	f3bf 8f5b 	dmb	ish
    5872:	e7db      	b.n	582c <compare_set+0xe8>
			return -EINVAL;
    5874:	f06f 0415 	mvn.w	r4, #21
    5878:	e7e3      	b.n	5842 <compare_set+0xfe>
    587a:	bf00      	nop
    587c:	01000001 	.word	0x01000001
    5880:	200043c0 	.word	0x200043c0
    5884:	40011000 	.word	0x40011000
    5888:	20004b48 	.word	0x20004b48

0000588c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    588c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    588e:	4b19      	ldr	r3, [pc, #100]	; (58f4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5890:	4d19      	ldr	r5, [pc, #100]	; (58f8 <sys_clock_driver_init+0x6c>)
    5892:	2400      	movs	r4, #0
    5894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    589c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    58a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    58a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58a8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    58ac:	4b13      	ldr	r3, [pc, #76]	; (58fc <sys_clock_driver_init+0x70>)
    58ae:	2602      	movs	r6, #2
    58b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    58b4:	2101      	movs	r1, #1
    58b6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    58ba:	2011      	movs	r0, #17
    58bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    58c0:	4622      	mov	r2, r4
    58c2:	f7fe fa2f 	bl	3d24 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    58c6:	2011      	movs	r0, #17
    58c8:	f7fe fa10 	bl	3cec <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    58cc:	4a0c      	ldr	r2, [pc, #48]	; (5900 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    58ce:	2301      	movs	r3, #1
    58d0:	60ab      	str	r3, [r5, #8]
    58d2:	602b      	str	r3, [r5, #0]
    58d4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    58d6:	4b0b      	ldr	r3, [pc, #44]	; (5904 <sys_clock_driver_init+0x78>)
    58d8:	4a0b      	ldr	r2, [pc, #44]	; (5908 <sys_clock_driver_init+0x7c>)
    58da:	9300      	str	r3, [sp, #0]
    58dc:	9401      	str	r4, [sp, #4]
    58de:	2300      	movs	r3, #0
    58e0:	4620      	mov	r0, r4
    58e2:	f7ff ff2f 	bl	5744 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    58e6:	4630      	mov	r0, r6
    58e8:	f7ff fa06 	bl	4cf8 <z_nrf_clock_control_lf_on>

	return 0;
}
    58ec:	4620      	mov	r0, r4
    58ee:	b002      	add	sp, #8
    58f0:	bd70      	pop	{r4, r5, r6, pc}
    58f2:	bf00      	nop
    58f4:	200043c0 	.word	0x200043c0
    58f8:	40011000 	.word	0x40011000
    58fc:	e000e100 	.word	0xe000e100
    5900:	20004b4c 	.word	0x20004b4c
    5904:	00005625 	.word	0x00005625
    5908:	007fffff 	.word	0x007fffff

0000590c <rtc_nrf_isr>:
{
    590c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5910:	4c33      	ldr	r4, [pc, #204]	; (59e0 <rtc_nrf_isr+0xd4>)
    5912:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5916:	079a      	lsls	r2, r3, #30
    5918:	d50b      	bpl.n	5932 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    591a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    591e:	b143      	cbz	r3, 5932 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5920:	4a30      	ldr	r2, [pc, #192]	; (59e4 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5922:	2300      	movs	r3, #0
    5924:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5928:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    592c:	6813      	ldr	r3, [r2, #0]
    592e:	3301      	adds	r3, #1
    5930:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5932:	f04f 0320 	mov.w	r3, #32
    5936:	f3ef 8211 	mrs	r2, BASEPRI
    593a:	f383 8812 	msr	BASEPRI_MAX, r3
    593e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5942:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5946:	03db      	lsls	r3, r3, #15
    5948:	d529      	bpl.n	599e <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    594a:	f3bf 8f5b 	dmb	ish
    594e:	4b26      	ldr	r3, [pc, #152]	; (59e8 <rtc_nrf_isr+0xdc>)
    5950:	e853 1f00 	ldrex	r1, [r3]
    5954:	f021 0001 	bic.w	r0, r1, #1
    5958:	e843 0500 	strex	r5, r0, [r3]
    595c:	2d00      	cmp	r5, #0
    595e:	d1f7      	bne.n	5950 <rtc_nrf_isr+0x44>
    5960:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5964:	b911      	cbnz	r1, 596c <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5966:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    596a:	b1c3      	cbz	r3, 599e <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    596c:	2500      	movs	r5, #0
    596e:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5972:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    5976:	f382 8811 	msr	BASEPRI, r2
    597a:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    597e:	f7ff febf 	bl	5700 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5982:	f04f 0320 	mov.w	r3, #32
    5986:	f3ef 8211 	mrs	r2, BASEPRI
    598a:	f383 8812 	msr	BASEPRI_MAX, r3
    598e:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5992:	4b16      	ldr	r3, [pc, #88]	; (59ec <rtc_nrf_isr+0xe0>)
    5994:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5998:	42b0      	cmp	r0, r6
    599a:	41b9      	sbcs	r1, r7
    599c:	d206      	bcs.n	59ac <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    599e:	f382 8811 	msr	BASEPRI, r2
    59a2:	f3bf 8f6f 	isb	sy
}
    59a6:	b003      	add	sp, #12
    59a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    59ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    59b0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    59b4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    59b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    59bc:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    59be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    59c2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    59c6:	f382 8811 	msr	BASEPRI, r2
    59ca:	f3bf 8f6f 	isb	sy
		if (handler) {
    59ce:	2900      	cmp	r1, #0
    59d0:	d0e9      	beq.n	59a6 <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    59d2:	9000      	str	r0, [sp, #0]
    59d4:	4632      	mov	r2, r6
    59d6:	463b      	mov	r3, r7
    59d8:	4628      	mov	r0, r5
    59da:	4788      	blx	r1
}
    59dc:	e7e3      	b.n	59a6 <rtc_nrf_isr+0x9a>
    59de:	bf00      	nop
    59e0:	40011000 	.word	0x40011000
    59e4:	20004b50 	.word	0x20004b50
    59e8:	20004b48 	.word	0x20004b48
    59ec:	200043c0 	.word	0x200043c0

000059f0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    59f0:	1c43      	adds	r3, r0, #1
{
    59f2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    59f4:	d021      	beq.n	5a3a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    59f6:	2801      	cmp	r0, #1
    59f8:	dd21      	ble.n	5a3e <sys_clock_set_timeout+0x4e>
    59fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    59fe:	da20      	bge.n	5a42 <sys_clock_set_timeout+0x52>
    5a00:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5a02:	f7ff fe7d 	bl	5700 <z_nrf_rtc_timer_read>
    5a06:	4b10      	ldr	r3, [pc, #64]	; (5a48 <sys_clock_set_timeout+0x58>)
    5a08:	e9d3 1300 	ldrd	r1, r3, [r3]
    5a0c:	1a42      	subs	r2, r0, r1
		ticks = 0;
    5a0e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    5a12:	480e      	ldr	r0, [pc, #56]	; (5a4c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    5a14:	bf28      	it	cs
    5a16:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5a18:	3201      	adds	r2, #1
    5a1a:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    5a1c:	4282      	cmp	r2, r0
    5a1e:	bf28      	it	cs
    5a20:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    5a22:	1852      	adds	r2, r2, r1
    5a24:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5a28:	4909      	ldr	r1, [pc, #36]	; (5a50 <sys_clock_set_timeout+0x60>)
    5a2a:	9001      	str	r0, [sp, #4]
    5a2c:	9100      	str	r1, [sp, #0]
    5a2e:	f143 0300 	adc.w	r3, r3, #0
    5a32:	f7ff fe87 	bl	5744 <compare_set>
}
    5a36:	b002      	add	sp, #8
    5a38:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5a3a:	4804      	ldr	r0, [pc, #16]	; (5a4c <sys_clock_set_timeout+0x5c>)
    5a3c:	e7e0      	b.n	5a00 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5a3e:	2400      	movs	r4, #0
    5a40:	e7df      	b.n	5a02 <sys_clock_set_timeout+0x12>
    5a42:	4c02      	ldr	r4, [pc, #8]	; (5a4c <sys_clock_set_timeout+0x5c>)
    5a44:	e7dd      	b.n	5a02 <sys_clock_set_timeout+0x12>
    5a46:	bf00      	nop
    5a48:	200043d0 	.word	0x200043d0
    5a4c:	007fffff 	.word	0x007fffff
    5a50:	00005625 	.word	0x00005625

00005a54 <sys_clock_elapsed>:
{
    5a54:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5a56:	f7ff fe53 	bl	5700 <z_nrf_rtc_timer_read>
    5a5a:	4b02      	ldr	r3, [pc, #8]	; (5a64 <sys_clock_elapsed+0x10>)
    5a5c:	681b      	ldr	r3, [r3, #0]
}
    5a5e:	1ac0      	subs	r0, r0, r3
    5a60:	bd08      	pop	{r3, pc}
    5a62:	bf00      	nop
    5a64:	200043d0 	.word	0x200043d0

00005a68 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a68:	6803      	ldr	r3, [r0, #0]
    switch (port)
    5a6a:	095a      	lsrs	r2, r3, #5
{
    5a6c:	b510      	push	{r4, lr}
    5a6e:	4604      	mov	r4, r0
    switch (port)
    5a70:	d01d      	beq.n	5aae <nrf_gpio_pin_port_decode+0x46>
    5a72:	2a01      	cmp	r2, #1
    5a74:	d106      	bne.n	5a84 <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    5a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5a7a:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5a7e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a80:	07d3      	lsls	r3, r2, #31
    5a82:	d40b      	bmi.n	5a9c <nrf_gpio_pin_port_decode+0x34>
    5a84:	4914      	ldr	r1, [pc, #80]	; (5ad8 <nrf_gpio_pin_port_decode+0x70>)
    5a86:	4815      	ldr	r0, [pc, #84]	; (5adc <nrf_gpio_pin_port_decode+0x74>)
    5a88:	4a15      	ldr	r2, [pc, #84]	; (5ae0 <nrf_gpio_pin_port_decode+0x78>)
    5a8a:	f240 2329 	movw	r3, #553	; 0x229
    5a8e:	f003 ff02 	bl	9896 <assert_print>
    5a92:	4813      	ldr	r0, [pc, #76]	; (5ae0 <nrf_gpio_pin_port_decode+0x78>)
    5a94:	f240 2129 	movw	r1, #553	; 0x229
    5a98:	f003 fef6 	bl	9888 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5a9c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5a9e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5aa2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5aa4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5aa6:	d105      	bne.n	5ab4 <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    5aa8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5aac:	bd10      	pop	{r4, pc}
    switch (port)
    5aae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ab2:	e7e2      	b.n	5a7a <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ab4:	2b01      	cmp	r3, #1
    5ab6:	d00c      	beq.n	5ad2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    5ab8:	4a09      	ldr	r2, [pc, #36]	; (5ae0 <nrf_gpio_pin_port_decode+0x78>)
    5aba:	490a      	ldr	r1, [pc, #40]	; (5ae4 <nrf_gpio_pin_port_decode+0x7c>)
    5abc:	4807      	ldr	r0, [pc, #28]	; (5adc <nrf_gpio_pin_port_decode+0x74>)
    5abe:	f240 232e 	movw	r3, #558	; 0x22e
    5ac2:	f003 fee8 	bl	9896 <assert_print>
    5ac6:	4806      	ldr	r0, [pc, #24]	; (5ae0 <nrf_gpio_pin_port_decode+0x78>)
    5ac8:	f240 212e 	movw	r1, #558	; 0x22e
    5acc:	f003 fedc 	bl	9888 <assert_post_action>
    5ad0:	e7ea      	b.n	5aa8 <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    5ad2:	4805      	ldr	r0, [pc, #20]	; (5ae8 <nrf_gpio_pin_port_decode+0x80>)
    5ad4:	e7ea      	b.n	5aac <nrf_gpio_pin_port_decode+0x44>
    5ad6:	bf00      	nop
    5ad8:	0000b8fc 	.word	0x0000b8fc
    5adc:	0000a8c6 	.word	0x0000a8c6
    5ae0:	0000b8c9 	.word	0x0000b8c9
    5ae4:	0000c14d 	.word	0x0000c14d
    5ae8:	50000300 	.word	0x50000300

00005aec <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5aee:	ab0b      	add	r3, sp, #44	; 0x2c
    5af0:	9305      	str	r3, [sp, #20]
    5af2:	9303      	str	r3, [sp, #12]
    5af4:	4b05      	ldr	r3, [pc, #20]	; (5b0c <z_log_msg2_runtime_create.constprop.0+0x20>)
    5af6:	9302      	str	r3, [sp, #8]
    5af8:	2300      	movs	r3, #0
    5afa:	e9cd 3300 	strd	r3, r3, [sp]
    5afe:	2201      	movs	r2, #1
    5b00:	4618      	mov	r0, r3
    5b02:	f7fd fd17 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    5b06:	b007      	add	sp, #28
    5b08:	f85d fb04 	ldr.w	pc, [sp], #4
    5b0c:	0000b976 	.word	0x0000b976

00005b10 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5b12:	f7fd faab 	bl	306c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5b16:	2400      	movs	r4, #0
    5b18:	4b06      	ldr	r3, [pc, #24]	; (5b34 <k_sys_fatal_error_handler+0x24>)
    5b1a:	9302      	str	r3, [sp, #8]
    5b1c:	4620      	mov	r0, r4
    5b1e:	e9cd 4400 	strd	r4, r4, [sp]
    5b22:	4905      	ldr	r1, [pc, #20]	; (5b38 <k_sys_fatal_error_handler+0x28>)
    5b24:	4623      	mov	r3, r4
    5b26:	2201      	movs	r2, #1
    5b28:	f7ff ffe0 	bl	5aec <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    5b2c:	4620      	mov	r0, r4
    5b2e:	f7fe ff5b 	bl	49e8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5b32:	bf00      	nop
    5b34:	0000b976 	.word	0x0000b976
    5b38:	0000a464 	.word	0x0000a464

00005b3c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5b40:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5b44:	2a08      	cmp	r2, #8
    5b46:	d106      	bne.n	5b56 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5b48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5b4c:	2b05      	cmp	r3, #5
    5b4e:	d802      	bhi.n	5b56 <nrf52_errata_103+0x1a>
    5b50:	4a02      	ldr	r2, [pc, #8]	; (5b5c <nrf52_errata_103+0x20>)
    5b52:	5cd0      	ldrb	r0, [r2, r3]
    5b54:	4770      	bx	lr
                        return false;
    5b56:	2000      	movs	r0, #0
}
    5b58:	4770      	bx	lr
    5b5a:	bf00      	nop
    5b5c:	0000b999 	.word	0x0000b999

00005b60 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5b60:	4a02      	ldr	r2, [pc, #8]	; (5b6c <nvmc_wait+0xc>)
    5b62:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5b66:	2b00      	cmp	r3, #0
    5b68:	d0fb      	beq.n	5b62 <nvmc_wait+0x2>
}
    5b6a:	4770      	bx	lr
    5b6c:	4001e000 	.word	0x4001e000

00005b70 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5b70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5b74:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    5b76:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5b7a:	2a08      	cmp	r2, #8
    5b7c:	d14e      	bne.n	5c1c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    5b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b82:	2100      	movs	r1, #0
    5b84:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5b88:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5b8c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5b90:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5b94:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    5b98:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5b9c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    5ba0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5ba4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5ba8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5bac:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    5bb0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5bb4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5bb8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5bbc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5bc0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5bc4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5bc8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5bcc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    5bd0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5bd4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    5bd8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5bdc:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    5be0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5be4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    5be8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5bec:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    5bf0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5bf4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    5bf8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5bfc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    5c00:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5c04:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    5c08:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5c0c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    5c10:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5c14:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    5c18:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5c1c:	f7ff ff8e 	bl	5b3c <nrf52_errata_103>
    5c20:	b118      	cbz	r0, 5c2a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5c22:	4b3b      	ldr	r3, [pc, #236]	; (5d10 <SystemInit+0x1a0>)
    5c24:	4a3b      	ldr	r2, [pc, #236]	; (5d14 <SystemInit+0x1a4>)
    5c26:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5c2a:	f7ff ff87 	bl	5b3c <nrf52_errata_103>
    5c2e:	b118      	cbz	r0, 5c38 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5c30:	4b39      	ldr	r3, [pc, #228]	; (5d18 <SystemInit+0x1a8>)
    5c32:	22fb      	movs	r2, #251	; 0xfb
    5c34:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5c38:	f7ff ff80 	bl	5b3c <nrf52_errata_103>
    5c3c:	b170      	cbz	r0, 5c5c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5c46:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    5c4a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5c4e:	f022 020f 	bic.w	r2, r2, #15
    5c52:	f003 030f 	and.w	r3, r3, #15
    5c56:	4313      	orrs	r3, r2
    5c58:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5c5c:	f7ff ff6e 	bl	5b3c <nrf52_errata_103>
    5c60:	b120      	cbz	r0, 5c6c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5c62:	4b2e      	ldr	r3, [pc, #184]	; (5d1c <SystemInit+0x1ac>)
    5c64:	f44f 7200 	mov.w	r2, #512	; 0x200
    5c68:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5c70:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5c74:	2b08      	cmp	r3, #8
    5c76:	d11a      	bne.n	5cae <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c7c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5c80:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5c82:	bf44      	itt	mi
    5c84:	f06f 0201 	mvnmi.w	r2, #1
    5c88:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5c90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5c94:	2b05      	cmp	r3, #5
    5c96:	d802      	bhi.n	5c9e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5c98:	4a21      	ldr	r2, [pc, #132]	; (5d20 <SystemInit+0x1b0>)
    5c9a:	5cd3      	ldrb	r3, [r2, r3]
    5c9c:	b13b      	cbz	r3, 5cae <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5c9e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5ca2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5caa:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5cae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5cb2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5cb6:	2a00      	cmp	r2, #0
    5cb8:	db03      	blt.n	5cc2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5cba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	da22      	bge.n	5d08 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5cc2:	4918      	ldr	r1, [pc, #96]	; (5d24 <SystemInit+0x1b4>)
    5cc4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5cc6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5cca:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5cce:	2412      	movs	r4, #18
    nvmc_wait();
    5cd0:	f7ff ff46 	bl	5b60 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5cd4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5cd8:	f7ff ff42 	bl	5b60 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5cdc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5ce0:	f7ff ff3e 	bl	5b60 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5ce4:	2300      	movs	r3, #0
    5ce6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5cea:	f7ff ff39 	bl	5b60 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5cee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5cf2:	490d      	ldr	r1, [pc, #52]	; (5d28 <SystemInit+0x1b8>)
    5cf4:	4b0d      	ldr	r3, [pc, #52]	; (5d2c <SystemInit+0x1bc>)
    5cf6:	68ca      	ldr	r2, [r1, #12]
    5cf8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5cfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5cfe:	60cb      	str	r3, [r1, #12]
    5d00:	f3bf 8f4f 	dsb	sy
    __NOP();
    5d04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5d06:	e7fd      	b.n	5d04 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5d08:	4b09      	ldr	r3, [pc, #36]	; (5d30 <SystemInit+0x1c0>)
    5d0a:	4a0a      	ldr	r2, [pc, #40]	; (5d34 <SystemInit+0x1c4>)
    5d0c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5d0e:	bd10      	pop	{r4, pc}
    5d10:	40005000 	.word	0x40005000
    5d14:	00038148 	.word	0x00038148
    5d18:	4000f000 	.word	0x4000f000
    5d1c:	40029000 	.word	0x40029000
    5d20:	0000b993 	.word	0x0000b993
    5d24:	4001e000 	.word	0x4001e000
    5d28:	e000ed00 	.word	0xe000ed00
    5d2c:	05fa0004 	.word	0x05fa0004
    5d30:	20000058 	.word	0x20000058
    5d34:	03d09000 	.word	0x03d09000

00005d38 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5d38:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5d3a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5d3c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5d3e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5d42:	fab2 f382 	clz	r3, r2
    5d46:	f1c3 031f 	rsb	r3, r3, #31
    5d4a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5d4c:	fa05 f403 	lsl.w	r4, r5, r3
    5d50:	ea22 0404 	bic.w	r4, r2, r4
    5d54:	e850 6f00 	ldrex	r6, [r0]
    5d58:	4296      	cmp	r6, r2
    5d5a:	d104      	bne.n	5d66 <nrfx_flag32_alloc+0x2e>
    5d5c:	e840 4c00 	strex	ip, r4, [r0]
    5d60:	f1bc 0f00 	cmp.w	ip, #0
    5d64:	d1f6      	bne.n	5d54 <nrfx_flag32_alloc+0x1c>
    5d66:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5d6a:	d1e7      	bne.n	5d3c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5d6c:	4801      	ldr	r0, [pc, #4]	; (5d74 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5d6e:	700b      	strb	r3, [r1, #0]
}
    5d70:	bd70      	pop	{r4, r5, r6, pc}
    5d72:	bf00      	nop
    5d74:	0bad0000 	.word	0x0bad0000

00005d78 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5d78:	6803      	ldr	r3, [r0, #0]
    5d7a:	40cb      	lsrs	r3, r1
    5d7c:	07db      	lsls	r3, r3, #31
{
    5d7e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    5d80:	d414      	bmi.n	5dac <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5d82:	2301      	movs	r3, #1
    5d84:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    5d86:	6802      	ldr	r2, [r0, #0]
    5d88:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5d8c:	ea43 0102 	orr.w	r1, r3, r2
    5d90:	e850 4f00 	ldrex	r4, [r0]
    5d94:	4294      	cmp	r4, r2
    5d96:	d104      	bne.n	5da2 <nrfx_flag32_free+0x2a>
    5d98:	e840 1c00 	strex	ip, r1, [r0]
    5d9c:	f1bc 0f00 	cmp.w	ip, #0
    5da0:	d1f6      	bne.n	5d90 <nrfx_flag32_free+0x18>
    5da2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5da6:	d1ee      	bne.n	5d86 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    5da8:	4801      	ldr	r0, [pc, #4]	; (5db0 <nrfx_flag32_free+0x38>)
}
    5daa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5dac:	4801      	ldr	r0, [pc, #4]	; (5db4 <nrfx_flag32_free+0x3c>)
    5dae:	e7fc      	b.n	5daa <nrfx_flag32_free+0x32>
    5db0:	0bad0000 	.word	0x0bad0000
    5db4:	0bad0004 	.word	0x0bad0004

00005db8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    5dba:	4604      	mov	r4, r0
    5dbc:	b170      	cbz	r0, 5ddc <clock_stop+0x24>
    5dbe:	2801      	cmp	r0, #1
    5dc0:	d02d      	beq.n	5e1e <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5dc2:	4939      	ldr	r1, [pc, #228]	; (5ea8 <clock_stop+0xf0>)
    5dc4:	4839      	ldr	r0, [pc, #228]	; (5eac <clock_stop+0xf4>)
    5dc6:	4a3a      	ldr	r2, [pc, #232]	; (5eb0 <clock_stop+0xf8>)
    5dc8:	23d8      	movs	r3, #216	; 0xd8
    5dca:	f003 fd64 	bl	9896 <assert_print>
    5dce:	4838      	ldr	r0, [pc, #224]	; (5eb0 <clock_stop+0xf8>)
    5dd0:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5dd2:	b003      	add	sp, #12
    5dd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    5dd8:	f003 bd56 	b.w	9888 <assert_post_action>
    p_reg->INTENCLR = mask;
    5ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5de0:	2202      	movs	r2, #2
    5de2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5de6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    5dea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5dee:	2201      	movs	r2, #1
    5df0:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5df2:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5df4:	2301      	movs	r3, #1
    5df6:	f88d 3007 	strb.w	r3, [sp, #7]
    5dfa:	f242 7510 	movw	r5, #10000	; 0x2710
    5dfe:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5e02:	b1cc      	cbz	r4, 5e38 <clock_stop+0x80>
    5e04:	2c01      	cmp	r4, #1
    5e06:	d037      	beq.n	5e78 <clock_stop+0xc0>
            NRFX_ASSERT(0);
    5e08:	4927      	ldr	r1, [pc, #156]	; (5ea8 <clock_stop+0xf0>)
    5e0a:	4828      	ldr	r0, [pc, #160]	; (5eac <clock_stop+0xf4>)
    5e0c:	4a29      	ldr	r2, [pc, #164]	; (5eb4 <clock_stop+0xfc>)
    5e0e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5e12:	f003 fd40 	bl	9896 <assert_print>
    5e16:	4827      	ldr	r0, [pc, #156]	; (5eb4 <clock_stop+0xfc>)
    5e18:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5e1c:	e7d9      	b.n	5dd2 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    5e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e22:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5e24:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5e2c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e30:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5e32:	f10d 0707 	add.w	r7, sp, #7
    5e36:	e7dd      	b.n	5df4 <clock_stop+0x3c>
            if (p_clk_src != NULL)
    5e38:	b19f      	cbz	r7, 5e62 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e3a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5e3e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5e42:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e44:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5e48:	03d8      	lsls	r0, r3, #15
    5e4a:	d513      	bpl.n	5e74 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5e4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    5e50:	2801      	cmp	r0, #1
    5e52:	d103      	bne.n	5e5c <clock_stop+0xa4>
    5e54:	f003 fffe 	bl	9e54 <nrfx_busy_wait>
    5e58:	3d01      	subs	r5, #1
    5e5a:	d1d2      	bne.n	5e02 <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5e5c:	2c01      	cmp	r4, #1
    5e5e:	d015      	beq.n	5e8c <clock_stop+0xd4>
    5e60:	e008      	b.n	5e74 <clock_stop+0xbc>
    5e62:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5e66:	03d9      	lsls	r1, r3, #15
    5e68:	d504      	bpl.n	5e74 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5e6a:	2001      	movs	r0, #1
    5e6c:	f003 fff2 	bl	9e54 <nrfx_busy_wait>
    5e70:	3d01      	subs	r5, #1
    5e72:	d1f6      	bne.n	5e62 <clock_stop+0xaa>
}
    5e74:	b003      	add	sp, #12
    5e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    5e78:	b167      	cbz	r7, 5e94 <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5e7a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5e7e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5e82:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5e84:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5e88:	03da      	lsls	r2, r3, #15
    5e8a:	d4df      	bmi.n	5e4c <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    5e8c:	4b0a      	ldr	r3, [pc, #40]	; (5eb8 <clock_stop+0x100>)
    5e8e:	2200      	movs	r2, #0
    5e90:	715a      	strb	r2, [r3, #5]
    5e92:	e7ef      	b.n	5e74 <clock_stop+0xbc>
    5e94:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    5e98:	03db      	lsls	r3, r3, #15
    5e9a:	d5f7      	bpl.n	5e8c <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5e9c:	2001      	movs	r0, #1
    5e9e:	f003 ffd9 	bl	9e54 <nrfx_busy_wait>
    5ea2:	3d01      	subs	r5, #1
    5ea4:	d1f6      	bne.n	5e94 <clock_stop+0xdc>
    5ea6:	e7f1      	b.n	5e8c <clock_stop+0xd4>
    5ea8:	0000c14d 	.word	0x0000c14d
    5eac:	0000a8c6 	.word	0x0000a8c6
    5eb0:	0000b99f 	.word	0x0000b99f
    5eb4:	0000b9dc 	.word	0x0000b9dc
    5eb8:	20004b54 	.word	0x20004b54

00005ebc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5ebc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    5ebe:	4604      	mov	r4, r0
    5ec0:	b958      	cbnz	r0, 5eda <nrfx_clock_init+0x1e>
    5ec2:	490b      	ldr	r1, [pc, #44]	; (5ef0 <nrfx_clock_init+0x34>)
    5ec4:	480b      	ldr	r0, [pc, #44]	; (5ef4 <nrfx_clock_init+0x38>)
    5ec6:	4a0c      	ldr	r2, [pc, #48]	; (5ef8 <nrfx_clock_init+0x3c>)
    5ec8:	f240 1315 	movw	r3, #277	; 0x115
    5ecc:	f003 fce3 	bl	9896 <assert_print>
    5ed0:	4809      	ldr	r0, [pc, #36]	; (5ef8 <nrfx_clock_init+0x3c>)
    5ed2:	f240 1115 	movw	r1, #277	; 0x115
    5ed6:	f003 fcd7 	bl	9888 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5eda:	4b08      	ldr	r3, [pc, #32]	; (5efc <nrfx_clock_init+0x40>)
    5edc:	791a      	ldrb	r2, [r3, #4]
    5ede:	b922      	cbnz	r2, 5eea <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    5ee0:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    5ee2:	4807      	ldr	r0, [pc, #28]	; (5f00 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    5ee4:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5ee6:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5ee8:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5eea:	4806      	ldr	r0, [pc, #24]	; (5f04 <nrfx_clock_init+0x48>)
    return err_code;
    5eec:	e7fc      	b.n	5ee8 <nrfx_clock_init+0x2c>
    5eee:	bf00      	nop
    5ef0:	0000ba10 	.word	0x0000ba10
    5ef4:	0000a8c6 	.word	0x0000a8c6
    5ef8:	0000b99f 	.word	0x0000b99f
    5efc:	20004b54 	.word	0x20004b54
    5f00:	0bad0000 	.word	0x0bad0000
    5f04:	0bad000c 	.word	0x0bad000c

00005f08 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5f08:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f0a:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <nrfx_clock_enable+0x38>)
    5f0c:	791b      	ldrb	r3, [r3, #4]
    5f0e:	b95b      	cbnz	r3, 5f28 <nrfx_clock_enable+0x20>
    5f10:	490c      	ldr	r1, [pc, #48]	; (5f44 <nrfx_clock_enable+0x3c>)
    5f12:	480d      	ldr	r0, [pc, #52]	; (5f48 <nrfx_clock_enable+0x40>)
    5f14:	4a0d      	ldr	r2, [pc, #52]	; (5f4c <nrfx_clock_enable+0x44>)
    5f16:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5f1a:	f003 fcbc 	bl	9896 <assert_print>
    5f1e:	480b      	ldr	r0, [pc, #44]	; (5f4c <nrfx_clock_enable+0x44>)
    5f20:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5f24:	f003 fcb0 	bl	9888 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5f28:	2000      	movs	r0, #0
    5f2a:	f7fd feed 	bl	3d08 <arch_irq_is_enabled>
    5f2e:	b908      	cbnz	r0, 5f34 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5f30:	f7fd fedc 	bl	3cec <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f38:	2200      	movs	r2, #0
    5f3a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5f3e:	bd08      	pop	{r3, pc}
    5f40:	20004b54 	.word	0x20004b54
    5f44:	0000ba1e 	.word	0x0000ba1e
    5f48:	0000a8c6 	.word	0x0000a8c6
    5f4c:	0000b99f 	.word	0x0000b99f

00005f50 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f50:	4b2c      	ldr	r3, [pc, #176]	; (6004 <nrfx_clock_start+0xb4>)
    5f52:	791b      	ldrb	r3, [r3, #4]
{
    5f54:	b510      	push	{r4, lr}
    5f56:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5f58:	b95b      	cbnz	r3, 5f72 <nrfx_clock_start+0x22>
    5f5a:	492b      	ldr	r1, [pc, #172]	; (6008 <nrfx_clock_start+0xb8>)
    5f5c:	482b      	ldr	r0, [pc, #172]	; (600c <nrfx_clock_start+0xbc>)
    5f5e:	4a2c      	ldr	r2, [pc, #176]	; (6010 <nrfx_clock_start+0xc0>)
    5f60:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5f64:	f003 fc97 	bl	9896 <assert_print>
    5f68:	4829      	ldr	r0, [pc, #164]	; (6010 <nrfx_clock_start+0xc0>)
    5f6a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5f6e:	f003 fc8b 	bl	9888 <assert_post_action>
    switch (domain)
    5f72:	b17c      	cbz	r4, 5f94 <nrfx_clock_start+0x44>
    5f74:	2c01      	cmp	r4, #1
    5f76:	d03a      	beq.n	5fee <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5f78:	4926      	ldr	r1, [pc, #152]	; (6014 <nrfx_clock_start+0xc4>)
    5f7a:	4824      	ldr	r0, [pc, #144]	; (600c <nrfx_clock_start+0xbc>)
    5f7c:	4a24      	ldr	r2, [pc, #144]	; (6010 <nrfx_clock_start+0xc0>)
    5f7e:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5f82:	f003 fc88 	bl	9896 <assert_print>
            break;
    }
}
    5f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    5f8a:	4821      	ldr	r0, [pc, #132]	; (6010 <nrfx_clock_start+0xc0>)
    5f8c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5f90:	f003 bc7a 	b.w	9888 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5f98:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f9c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5fa0:	03c8      	lsls	r0, r1, #15
    5fa2:	d512      	bpl.n	5fca <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5fa4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5fa8:	2b01      	cmp	r3, #1
    5faa:	d11a      	bne.n	5fe2 <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5fac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5fb0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fb4:	2300      	movs	r3, #0
    5fb6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    5fba:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    5fbe:	2302      	movs	r3, #2
    5fc0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5fc4:	2301      	movs	r3, #1
    5fc6:	6093      	str	r3, [r2, #8]
}
    5fc8:	e00a      	b.n	5fe0 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5fca:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5fce:	07d9      	lsls	r1, r3, #31
    5fd0:	d50b      	bpl.n	5fea <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5fd2:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5fd6:	079b      	lsls	r3, r3, #30
    5fd8:	d404      	bmi.n	5fe4 <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    5fda:	2302      	movs	r3, #2
    5fdc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5fe0:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5fe2:	b113      	cbz	r3, 5fea <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5fe4:	2000      	movs	r0, #0
    5fe6:	f7ff fee7 	bl	5db8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5fea:	2300      	movs	r3, #0
    5fec:	e7de      	b.n	5fac <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ff2:	2200      	movs	r2, #0
    5ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5ff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5ffc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6000:	601c      	str	r4, [r3, #0]
}
    6002:	e7ed      	b.n	5fe0 <nrfx_clock_start+0x90>
    6004:	20004b54 	.word	0x20004b54
    6008:	0000ba1e 	.word	0x0000ba1e
    600c:	0000a8c6 	.word	0x0000a8c6
    6010:	0000b99f 	.word	0x0000b99f
    6014:	0000c14d 	.word	0x0000c14d

00006018 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6018:	4b0a      	ldr	r3, [pc, #40]	; (6044 <nrfx_clock_stop+0x2c>)
    601a:	791b      	ldrb	r3, [r3, #4]
{
    601c:	b510      	push	{r4, lr}
    601e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    6020:	b95b      	cbnz	r3, 603a <nrfx_clock_stop+0x22>
    6022:	4909      	ldr	r1, [pc, #36]	; (6048 <nrfx_clock_stop+0x30>)
    6024:	4809      	ldr	r0, [pc, #36]	; (604c <nrfx_clock_stop+0x34>)
    6026:	4a0a      	ldr	r2, [pc, #40]	; (6050 <nrfx_clock_stop+0x38>)
    6028:	f240 13ad 	movw	r3, #429	; 0x1ad
    602c:	f003 fc33 	bl	9896 <assert_print>
    6030:	4807      	ldr	r0, [pc, #28]	; (6050 <nrfx_clock_stop+0x38>)
    6032:	f240 11ad 	movw	r1, #429	; 0x1ad
    6036:	f003 fc27 	bl	9888 <assert_post_action>
    clock_stop(domain);
    603a:	4620      	mov	r0, r4
}
    603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    6040:	f7ff beba 	b.w	5db8 <clock_stop>
    6044:	20004b54 	.word	0x20004b54
    6048:	0000ba1e 	.word	0x0000ba1e
    604c:	0000a8c6 	.word	0x0000a8c6
    6050:	0000b99f 	.word	0x0000b99f

00006054 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6058:	b510      	push	{r4, lr}
    605a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    605e:	b16a      	cbz	r2, 607c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6060:	2200      	movs	r2, #0
    6062:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6066:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    606a:	2201      	movs	r2, #1
    606c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6070:	4b11      	ldr	r3, [pc, #68]	; (60b8 <nrfx_power_clock_irq_handler+0x64>)
    6072:	7958      	ldrb	r0, [r3, #5]
    6074:	b910      	cbnz	r0, 607c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    6076:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    607c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6080:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6084:	b172      	cbz	r2, 60a4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6086:	2200      	movs	r2, #0
    6088:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    608c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6090:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6094:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6098:	0792      	lsls	r2, r2, #30
    609a:	d104      	bne.n	60a6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    609c:	2201      	movs	r2, #1
    609e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60a2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    60a4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    60a6:	2202      	movs	r2, #2
    60a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    60ac:	4b02      	ldr	r3, [pc, #8]	; (60b8 <nrfx_power_clock_irq_handler+0x64>)
}
    60ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    60b2:	681b      	ldr	r3, [r3, #0]
    60b4:	2001      	movs	r0, #1
    60b6:	4718      	bx	r3
    60b8:	20004b54 	.word	0x20004b54

000060bc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    60bc:	4b03      	ldr	r3, [pc, #12]	; (60cc <pin_in_use_by_te+0x10>)
    60be:	3008      	adds	r0, #8
    60c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    60c4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    60c8:	4770      	bx	lr
    60ca:	bf00      	nop
    60cc:	2000005c 	.word	0x2000005c

000060d0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    60d0:	4b04      	ldr	r3, [pc, #16]	; (60e4 <pin_has_trigger+0x14>)
    60d2:	3008      	adds	r0, #8
    60d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    60d8:	f010 001c 	ands.w	r0, r0, #28
    60dc:	bf18      	it	ne
    60de:	2001      	movne	r0, #1
    60e0:	4770      	bx	lr
    60e2:	bf00      	nop
    60e4:	2000005c 	.word	0x2000005c

000060e8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    60e8:	4b03      	ldr	r3, [pc, #12]	; (60f8 <pin_is_output+0x10>)
    60ea:	3008      	adds	r0, #8
    60ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    60f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    60f4:	4770      	bx	lr
    60f6:	bf00      	nop
    60f8:	2000005c 	.word	0x2000005c

000060fc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    60fc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    60fe:	f100 0308 	add.w	r3, r0, #8
    6102:	4c0c      	ldr	r4, [pc, #48]	; (6134 <call_handler+0x38>)
    6104:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6108:	05da      	lsls	r2, r3, #23
{
    610a:	4605      	mov	r5, r0
    610c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    610e:	d507      	bpl.n	6120 <call_handler+0x24>
    6110:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6114:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6118:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    611c:	6852      	ldr	r2, [r2, #4]
    611e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6120:	68a3      	ldr	r3, [r4, #8]
    6122:	b12b      	cbz	r3, 6130 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6124:	68e2      	ldr	r2, [r4, #12]
    6126:	4631      	mov	r1, r6
    6128:	4628      	mov	r0, r5
    }
}
    612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    612e:	4718      	bx	r3
}
    6130:	bd70      	pop	{r4, r5, r6, pc}
    6132:	bf00      	nop
    6134:	2000005c 	.word	0x2000005c

00006138 <nrf_gpio_pin_port_decode>:
{
    6138:	b510      	push	{r4, lr}
    613a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    613c:	6800      	ldr	r0, [r0, #0]
    613e:	f003 fe8b 	bl	9e58 <nrf_gpio_pin_present_check>
    6142:	b958      	cbnz	r0, 615c <nrf_gpio_pin_port_decode+0x24>
    6144:	4912      	ldr	r1, [pc, #72]	; (6190 <nrf_gpio_pin_port_decode+0x58>)
    6146:	4813      	ldr	r0, [pc, #76]	; (6194 <nrf_gpio_pin_port_decode+0x5c>)
    6148:	4a13      	ldr	r2, [pc, #76]	; (6198 <nrf_gpio_pin_port_decode+0x60>)
    614a:	f240 2329 	movw	r3, #553	; 0x229
    614e:	f003 fba2 	bl	9896 <assert_print>
    6152:	4811      	ldr	r0, [pc, #68]	; (6198 <nrf_gpio_pin_port_decode+0x60>)
    6154:	f240 2129 	movw	r1, #553	; 0x229
    6158:	f003 fb96 	bl	9888 <assert_post_action>
    uint32_t pin_number = *p_pin;
    615c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    615e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6162:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    6164:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6166:	d102      	bne.n	616e <nrf_gpio_pin_port_decode+0x36>
{
    6168:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    616c:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    616e:	2b01      	cmp	r3, #1
    6170:	d00c      	beq.n	618c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    6172:	4a09      	ldr	r2, [pc, #36]	; (6198 <nrf_gpio_pin_port_decode+0x60>)
    6174:	4909      	ldr	r1, [pc, #36]	; (619c <nrf_gpio_pin_port_decode+0x64>)
    6176:	4807      	ldr	r0, [pc, #28]	; (6194 <nrf_gpio_pin_port_decode+0x5c>)
    6178:	f240 232e 	movw	r3, #558	; 0x22e
    617c:	f003 fb8b 	bl	9896 <assert_print>
    6180:	4805      	ldr	r0, [pc, #20]	; (6198 <nrf_gpio_pin_port_decode+0x60>)
    6182:	f240 212e 	movw	r1, #558	; 0x22e
    6186:	f003 fb7f 	bl	9888 <assert_post_action>
    618a:	e7ed      	b.n	6168 <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    618c:	4804      	ldr	r0, [pc, #16]	; (61a0 <nrf_gpio_pin_port_decode+0x68>)
    618e:	e7ed      	b.n	616c <nrf_gpio_pin_port_decode+0x34>
    6190:	0000b8fc 	.word	0x0000b8fc
    6194:	0000a8c6 	.word	0x0000a8c6
    6198:	0000b8c9 	.word	0x0000b8c9
    619c:	0000c14d 	.word	0x0000c14d
    61a0:	50000300 	.word	0x50000300

000061a4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    61a4:	4a19      	ldr	r2, [pc, #100]	; (620c <release_handler+0x68>)
    61a6:	3008      	adds	r0, #8
{
    61a8:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    61aa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    61ae:	05d9      	lsls	r1, r3, #23
    61b0:	d51d      	bpl.n	61ee <release_handler+0x4a>
    61b2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    61b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    61ba:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    61be:	f102 040e 	add.w	r4, r2, #14
    61c2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    61c4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    61c8:	f413 7f80 	tst.w	r3, #256	; 0x100
    61cc:	d003      	beq.n	61d6 <release_handler+0x32>
    61ce:	f3c3 2343 	ubfx	r3, r3, #9, #4
    61d2:	4299      	cmp	r1, r3
    61d4:	d00b      	beq.n	61ee <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    61d6:	3001      	adds	r0, #1
    61d8:	2830      	cmp	r0, #48	; 0x30
    61da:	d1f3      	bne.n	61c4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    61dc:	2300      	movs	r3, #0
    61de:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    61e2:	480b      	ldr	r0, [pc, #44]	; (6210 <release_handler+0x6c>)
    61e4:	f7ff fdc8 	bl	5d78 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    61e8:	4b0a      	ldr	r3, [pc, #40]	; (6214 <release_handler+0x70>)
    61ea:	4298      	cmp	r0, r3
    61ec:	d100      	bne.n	61f0 <release_handler+0x4c>
}
    61ee:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    61f0:	4909      	ldr	r1, [pc, #36]	; (6218 <release_handler+0x74>)
    61f2:	480a      	ldr	r0, [pc, #40]	; (621c <release_handler+0x78>)
    61f4:	4a0a      	ldr	r2, [pc, #40]	; (6220 <release_handler+0x7c>)
    61f6:	f44f 7399 	mov.w	r3, #306	; 0x132
    61fa:	f003 fb4c 	bl	9896 <assert_print>
}
    61fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6202:	4807      	ldr	r0, [pc, #28]	; (6220 <release_handler+0x7c>)
    6204:	f44f 7199 	mov.w	r1, #306	; 0x132
    6208:	f003 bb3e 	b.w	9888 <assert_post_action>
    620c:	2000005c 	.word	0x2000005c
    6210:	200000d0 	.word	0x200000d0
    6214:	0bad0000 	.word	0x0bad0000
    6218:	0000baa0 	.word	0x0000baa0
    621c:	0000a8c6 	.word	0x0000a8c6
    6220:	0000ba3c 	.word	0x0000ba3c

00006224 <pin_handler_trigger_uninit>:
{
    6224:	b538      	push	{r3, r4, r5, lr}
    6226:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6228:	f7ff ff48 	bl	60bc <pin_in_use_by_te>
    622c:	4c09      	ldr	r4, [pc, #36]	; (6254 <pin_handler_trigger_uninit+0x30>)
    622e:	f102 0508 	add.w	r5, r2, #8
    6232:	b140      	cbz	r0, 6246 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6234:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6238:	4907      	ldr	r1, [pc, #28]	; (6258 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    623a:	0b5b      	lsrs	r3, r3, #13
    623c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6240:	2000      	movs	r0, #0
    6242:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6246:	4610      	mov	r0, r2
    6248:	f7ff ffac 	bl	61a4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    624c:	2300      	movs	r3, #0
    624e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6252:	bd38      	pop	{r3, r4, r5, pc}
    6254:	2000005c 	.word	0x2000005c
    6258:	40006000 	.word	0x40006000

0000625c <nrfx_gpiote_input_configure>:
{
    625c:	b5f0      	push	{r4, r5, r6, r7, lr}
    625e:	4604      	mov	r4, r0
    6260:	b085      	sub	sp, #20
    6262:	4617      	mov	r7, r2
    6264:	461d      	mov	r5, r3
    if (p_input_config)
    6266:	b1d9      	cbz	r1, 62a0 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    6268:	f003 fe07 	bl	9e7a <pin_is_task_output>
    626c:	bb00      	cbnz	r0, 62b0 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    626e:	460b      	mov	r3, r1
    6270:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6274:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6278:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    627c:	f10d 020f 	add.w	r2, sp, #15
    6280:	f10d 010e 	add.w	r1, sp, #14
    6284:	4620      	mov	r0, r4
    6286:	f003 fe03 	bl	9e90 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    628a:	4a43      	ldr	r2, [pc, #268]	; (6398 <nrfx_gpiote_input_configure+0x13c>)
    628c:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6290:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6294:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6298:	f043 0301 	orr.w	r3, r3, #1
    629c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    62a0:	b347      	cbz	r7, 62f4 <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    62a2:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    62a4:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    62a6:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    62a8:	f7ff ff1e 	bl	60e8 <pin_is_output>
    62ac:	b110      	cbz	r0, 62b4 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    62ae:	b1b2      	cbz	r2, 62de <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    62b0:	483a      	ldr	r0, [pc, #232]	; (639c <nrfx_gpiote_input_configure+0x140>)
    62b2:	e021      	b.n	62f8 <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    62b4:	4f38      	ldr	r7, [pc, #224]	; (6398 <nrfx_gpiote_input_configure+0x13c>)
    62b6:	f104 0c08 	add.w	ip, r4, #8
    62ba:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    62be:	f021 0120 	bic.w	r1, r1, #32
    62c2:	04c9      	lsls	r1, r1, #19
    62c4:	0cc9      	lsrs	r1, r1, #19
    62c6:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    62ca:	b142      	cbz	r2, 62de <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    62cc:	2e03      	cmp	r6, #3
    62ce:	d8ef      	bhi.n	62b0 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    62d0:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    62d2:	b99e      	cbnz	r6, 62fc <nrfx_gpiote_input_configure+0xa0>
    62d4:	4a32      	ldr	r2, [pc, #200]	; (63a0 <nrfx_gpiote_input_configure+0x144>)
    62d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    62da:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    62de:	4a2e      	ldr	r2, [pc, #184]	; (6398 <nrfx_gpiote_input_configure+0x13c>)
    62e0:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    62e4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    62e8:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    62ec:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    62f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    62f4:	bb3d      	cbnz	r5, 6346 <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    62f6:	482b      	ldr	r0, [pc, #172]	; (63a4 <nrfx_gpiote_input_configure+0x148>)
}
    62f8:	b005      	add	sp, #20
    62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    62fc:	009a      	lsls	r2, r3, #2
    62fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6302:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6306:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    630a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    630e:	f020 0003 	bic.w	r0, r0, #3
    6312:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6316:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    631a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    631e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6322:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6326:	0220      	lsls	r0, r4, #8
    6328:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    632c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6334:	ea40 000e 	orr.w	r0, r0, lr
    6338:	f041 0120 	orr.w	r1, r1, #32
    633c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    6340:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6344:	e7cb      	b.n	62de <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6346:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    634a:	4620      	mov	r0, r4
    634c:	f7ff ff2a 	bl	61a4 <release_handler>
    if (!handler)
    6350:	2e00      	cmp	r6, #0
    6352:	d0d0      	beq.n	62f6 <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6354:	4d10      	ldr	r5, [pc, #64]	; (6398 <nrfx_gpiote_input_configure+0x13c>)
    6356:	e9d5 2300 	ldrd	r2, r3, [r5]
    635a:	4296      	cmp	r6, r2
    635c:	d101      	bne.n	6362 <nrfx_gpiote_input_configure+0x106>
    635e:	429f      	cmp	r7, r3
    6360:	d018      	beq.n	6394 <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6362:	4811      	ldr	r0, [pc, #68]	; (63a8 <nrfx_gpiote_input_configure+0x14c>)
    6364:	f10d 010f 	add.w	r1, sp, #15
    6368:	f7ff fce6 	bl	5d38 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    636c:	4b0d      	ldr	r3, [pc, #52]	; (63a4 <nrfx_gpiote_input_configure+0x148>)
    636e:	4298      	cmp	r0, r3
    6370:	d1c2      	bne.n	62f8 <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    6372:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6376:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    637a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    637e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6380:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6382:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6386:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    638a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    638e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6392:	e7b0      	b.n	62f6 <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6394:	2200      	movs	r2, #0
    6396:	e7ee      	b.n	6376 <nrfx_gpiote_input_configure+0x11a>
    6398:	2000005c 	.word	0x2000005c
    639c:	0bad0004 	.word	0x0bad0004
    63a0:	40006000 	.word	0x40006000
    63a4:	0bad0000 	.word	0x0bad0000
    63a8:	200000d0 	.word	0x200000d0

000063ac <nrfx_gpiote_output_configure>:
{
    63ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    63ae:	4604      	mov	r4, r0
    63b0:	b085      	sub	sp, #20
    63b2:	4615      	mov	r5, r2
    if (p_config)
    63b4:	b321      	cbz	r1, 6400 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    63b6:	f7ff fe97 	bl	60e8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    63ba:	b920      	cbnz	r0, 63c6 <nrfx_gpiote_output_configure+0x1a>
    63bc:	4620      	mov	r0, r4
    63be:	f7ff fe7d 	bl	60bc <pin_in_use_by_te>
    63c2:	2800      	cmp	r0, #0
    63c4:	d15e      	bne.n	6484 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    63c6:	4620      	mov	r0, r4
    63c8:	f7ff fe82 	bl	60d0 <pin_has_trigger>
    63cc:	b110      	cbz	r0, 63d4 <nrfx_gpiote_output_configure+0x28>
    63ce:	784b      	ldrb	r3, [r1, #1]
    63d0:	2b01      	cmp	r3, #1
    63d2:	d057      	beq.n	6484 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    63d4:	2301      	movs	r3, #1
    63d6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    63da:	2300      	movs	r3, #0
    63dc:	e9cd 1300 	strd	r1, r3, [sp]
    63e0:	1c4a      	adds	r2, r1, #1
    63e2:	1c8b      	adds	r3, r1, #2
    63e4:	4620      	mov	r0, r4
    63e6:	f10d 010f 	add.w	r1, sp, #15
    63ea:	f003 fd51 	bl	9e90 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    63ee:	4a26      	ldr	r2, [pc, #152]	; (6488 <nrfx_gpiote_output_configure+0xdc>)
    63f0:	f104 0108 	add.w	r1, r4, #8
    63f4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    63f8:	f043 0303 	orr.w	r3, r3, #3
    63fc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6400:	b915      	cbnz	r5, 6408 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    6402:	4822      	ldr	r0, [pc, #136]	; (648c <nrfx_gpiote_output_configure+0xe0>)
}
    6404:	b005      	add	sp, #20
    6406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    6408:	4620      	mov	r0, r4
    640a:	f7ff fe6d 	bl	60e8 <pin_is_output>
        if (pin_is_input(pin))
    640e:	b3c8      	cbz	r0, 6484 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6410:	4e1d      	ldr	r6, [pc, #116]	; (6488 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    6412:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6416:	f104 0708 	add.w	r7, r4, #8
    641a:	4661      	mov	r1, ip
    641c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    6420:	0089      	lsls	r1, r1, #2
    6422:	f020 0020 	bic.w	r0, r0, #32
    6426:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    642a:	04c0      	lsls	r0, r0, #19
    642c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6430:	0cc0      	lsrs	r0, r0, #19
    6432:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    6436:	2300      	movs	r3, #0
    6438:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    643c:	786a      	ldrb	r2, [r5, #1]
    643e:	2a00      	cmp	r2, #0
    6440:	d0df      	beq.n	6402 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6442:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6446:	78ad      	ldrb	r5, [r5, #2]
    6448:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    644c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6450:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6454:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6458:	0223      	lsls	r3, r4, #8
    645a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    645e:	0412      	lsls	r2, r2, #16
    6460:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6464:	ea43 030e 	orr.w	r3, r3, lr
    6468:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    646a:	052a      	lsls	r2, r5, #20
    646c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6470:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6474:	4313      	orrs	r3, r2
    6476:	f040 0020 	orr.w	r0, r0, #32
    647a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    647e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6482:	e7be      	b.n	6402 <nrfx_gpiote_output_configure+0x56>
{
    6484:	4802      	ldr	r0, [pc, #8]	; (6490 <nrfx_gpiote_output_configure+0xe4>)
    6486:	e7bd      	b.n	6404 <nrfx_gpiote_output_configure+0x58>
    6488:	2000005c 	.word	0x2000005c
    648c:	0bad0000 	.word	0x0bad0000
    6490:	0bad0004 	.word	0x0bad0004

00006494 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6494:	4b01      	ldr	r3, [pc, #4]	; (649c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6496:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    649a:	4770      	bx	lr
    649c:	2000005c 	.word	0x2000005c

000064a0 <nrfx_gpiote_channel_get>:
{
    64a0:	b538      	push	{r3, r4, r5, lr}
    64a2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    64a4:	460d      	mov	r5, r1
    64a6:	b959      	cbnz	r1, 64c0 <nrfx_gpiote_channel_get+0x20>
    64a8:	490c      	ldr	r1, [pc, #48]	; (64dc <nrfx_gpiote_channel_get+0x3c>)
    64aa:	480d      	ldr	r0, [pc, #52]	; (64e0 <nrfx_gpiote_channel_get+0x40>)
    64ac:	4a0d      	ldr	r2, [pc, #52]	; (64e4 <nrfx_gpiote_channel_get+0x44>)
    64ae:	f240 2335 	movw	r3, #565	; 0x235
    64b2:	f003 f9f0 	bl	9896 <assert_print>
    64b6:	480b      	ldr	r0, [pc, #44]	; (64e4 <nrfx_gpiote_channel_get+0x44>)
    64b8:	f240 2135 	movw	r1, #565	; 0x235
    64bc:	f003 f9e4 	bl	9888 <assert_post_action>
    if (pin_in_use_by_te(pin))
    64c0:	4620      	mov	r0, r4
    64c2:	f7ff fdfb 	bl	60bc <pin_in_use_by_te>
    64c6:	b138      	cbz	r0, 64d8 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    64c8:	4b07      	ldr	r3, [pc, #28]	; (64e8 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    64ca:	4808      	ldr	r0, [pc, #32]	; (64ec <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    64cc:	3408      	adds	r4, #8
    64ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    64d2:	0b5b      	lsrs	r3, r3, #13
    64d4:	702b      	strb	r3, [r5, #0]
}
    64d6:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    64d8:	4805      	ldr	r0, [pc, #20]	; (64f0 <nrfx_gpiote_channel_get+0x50>)
    64da:	e7fc      	b.n	64d6 <nrfx_gpiote_channel_get+0x36>
    64dc:	0000bab4 	.word	0x0000bab4
    64e0:	0000a8c6 	.word	0x0000a8c6
    64e4:	0000ba3c 	.word	0x0000ba3c
    64e8:	2000005c 	.word	0x2000005c
    64ec:	0bad0000 	.word	0x0bad0000
    64f0:	0bad0004 	.word	0x0bad0004

000064f4 <nrfx_gpiote_init>:
{
    64f4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    64f6:	4c0f      	ldr	r4, [pc, #60]	; (6534 <nrfx_gpiote_init+0x40>)
    64f8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    64fc:	b9bd      	cbnz	r5, 652e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    64fe:	2260      	movs	r2, #96	; 0x60
    6500:	4629      	mov	r1, r5
    6502:	f104 0010 	add.w	r0, r4, #16
    6506:	f003 fe4f 	bl	a1a8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    650a:	2006      	movs	r0, #6
    650c:	f7fd fbee 	bl	3cec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6510:	4b09      	ldr	r3, [pc, #36]	; (6538 <nrfx_gpiote_init+0x44>)
    return err_code;
    6512:	480a      	ldr	r0, [pc, #40]	; (653c <nrfx_gpiote_init+0x48>)
    6514:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6518:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    651c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6520:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6524:	2301      	movs	r3, #1
    6526:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    652a:	6763      	str	r3, [r4, #116]	; 0x74
}
    652c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    652e:	4804      	ldr	r0, [pc, #16]	; (6540 <nrfx_gpiote_init+0x4c>)
    6530:	e7fc      	b.n	652c <nrfx_gpiote_init+0x38>
    6532:	bf00      	nop
    6534:	2000005c 	.word	0x2000005c
    6538:	40006000 	.word	0x40006000
    653c:	0bad0000 	.word	0x0bad0000
    6540:	0bad0005 	.word	0x0bad0005

00006544 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6544:	4b03      	ldr	r3, [pc, #12]	; (6554 <nrfx_gpiote_is_init+0x10>)
    6546:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    654a:	3800      	subs	r0, #0
    654c:	bf18      	it	ne
    654e:	2001      	movne	r0, #1
    6550:	4770      	bx	lr
    6552:	bf00      	nop
    6554:	2000005c 	.word	0x2000005c

00006558 <nrfx_gpiote_channel_free>:
{
    6558:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    655a:	4801      	ldr	r0, [pc, #4]	; (6560 <nrfx_gpiote_channel_free+0x8>)
    655c:	f7ff bc0c 	b.w	5d78 <nrfx_flag32_free>
    6560:	200000cc 	.word	0x200000cc

00006564 <nrfx_gpiote_channel_alloc>:
{
    6564:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6566:	4801      	ldr	r0, [pc, #4]	; (656c <nrfx_gpiote_channel_alloc+0x8>)
    6568:	f7ff bbe6 	b.w	5d38 <nrfx_flag32_alloc>
    656c:	200000cc 	.word	0x200000cc

00006570 <nrfx_gpiote_trigger_enable>:
{
    6570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6572:	4604      	mov	r4, r0
    6574:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6576:	f7ff fdab 	bl	60d0 <pin_has_trigger>
    657a:	b958      	cbnz	r0, 6594 <nrfx_gpiote_trigger_enable+0x24>
    657c:	492e      	ldr	r1, [pc, #184]	; (6638 <nrfx_gpiote_trigger_enable+0xc8>)
    657e:	482f      	ldr	r0, [pc, #188]	; (663c <nrfx_gpiote_trigger_enable+0xcc>)
    6580:	4a2f      	ldr	r2, [pc, #188]	; (6640 <nrfx_gpiote_trigger_enable+0xd0>)
    6582:	f240 33df 	movw	r3, #991	; 0x3df
    6586:	f003 f986 	bl	9896 <assert_print>
    658a:	482d      	ldr	r0, [pc, #180]	; (6640 <nrfx_gpiote_trigger_enable+0xd0>)
    658c:	f240 31df 	movw	r1, #991	; 0x3df
    6590:	f003 f97a 	bl	9888 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6594:	4620      	mov	r0, r4
    6596:	f7ff fd91 	bl	60bc <pin_in_use_by_te>
    659a:	4e2a      	ldr	r6, [pc, #168]	; (6644 <nrfx_gpiote_trigger_enable+0xd4>)
    659c:	f104 0708 	add.w	r7, r4, #8
    65a0:	b1f8      	cbz	r0, 65e2 <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    65a2:	4620      	mov	r0, r4
    65a4:	f7ff fda0 	bl	60e8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    65a8:	b9d8      	cbnz	r0, 65e2 <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    65aa:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    65ae:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    65b0:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    65b2:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    65b6:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    65ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    65be:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    65c2:	6008      	str	r0, [r1, #0]
    65c4:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    65c6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    65ca:	f041 0101 	orr.w	r1, r1, #1
    65ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    65d2:	b125      	cbz	r5, 65de <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    65d4:	2301      	movs	r3, #1
    65d6:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    65d8:	4a1b      	ldr	r2, [pc, #108]	; (6648 <nrfx_gpiote_trigger_enable+0xd8>)
    65da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    65de:	b003      	add	sp, #12
    65e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    65e2:	b95d      	cbnz	r5, 65fc <nrfx_gpiote_trigger_enable+0x8c>
    65e4:	4919      	ldr	r1, [pc, #100]	; (664c <nrfx_gpiote_trigger_enable+0xdc>)
    65e6:	4815      	ldr	r0, [pc, #84]	; (663c <nrfx_gpiote_trigger_enable+0xcc>)
    65e8:	4a15      	ldr	r2, [pc, #84]	; (6640 <nrfx_gpiote_trigger_enable+0xd0>)
    65ea:	f240 33ee 	movw	r3, #1006	; 0x3ee
    65ee:	f003 f952 	bl	9896 <assert_print>
    65f2:	4813      	ldr	r0, [pc, #76]	; (6640 <nrfx_gpiote_trigger_enable+0xd0>)
    65f4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    65f8:	f003 f946 	bl	9888 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    65fc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6600:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6604:	2b04      	cmp	r3, #4
    6606:	d012      	beq.n	662e <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6608:	2b05      	cmp	r3, #5
    660a:	d012      	beq.n	6632 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    660c:	a801      	add	r0, sp, #4
    660e:	9401      	str	r4, [sp, #4]
    6610:	f7ff fd92 	bl	6138 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6614:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6616:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    661a:	40d9      	lsrs	r1, r3
    661c:	f001 0101 	and.w	r1, r1, #1
    6620:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6622:	4620      	mov	r0, r4
}
    6624:	b003      	add	sp, #12
    6626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    662a:	f003 bc7e 	b.w	9f2a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    662e:	2103      	movs	r1, #3
    6630:	e7f7      	b.n	6622 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6632:	2102      	movs	r1, #2
    6634:	e7f5      	b.n	6622 <nrfx_gpiote_trigger_enable+0xb2>
    6636:	bf00      	nop
    6638:	0000babe 	.word	0x0000babe
    663c:	0000a8c6 	.word	0x0000a8c6
    6640:	0000ba3c 	.word	0x0000ba3c
    6644:	2000005c 	.word	0x2000005c
    6648:	40006000 	.word	0x40006000
    664c:	0000bad3 	.word	0x0000bad3

00006650 <nrfx_gpiote_trigger_disable>:
{
    6650:	b508      	push	{r3, lr}
    6652:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6654:	f7ff fd32 	bl	60bc <pin_in_use_by_te>
    6658:	b1c8      	cbz	r0, 668e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    665a:	4610      	mov	r0, r2
    665c:	f7ff fd44 	bl	60e8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6660:	b9a8      	cbnz	r0, 668e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6662:	3208      	adds	r2, #8
    6664:	4b0d      	ldr	r3, [pc, #52]	; (669c <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    6666:	490e      	ldr	r1, [pc, #56]	; (66a0 <nrfx_gpiote_trigger_disable+0x50>)
    6668:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    666c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    666e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6670:	409a      	lsls	r2, r3
    6672:	009b      	lsls	r3, r3, #2
    6674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6678:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    667c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6680:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6684:	f022 0203 	bic.w	r2, r2, #3
    6688:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    668c:	bd08      	pop	{r3, pc}
    668e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6692:	2100      	movs	r1, #0
    6694:	4610      	mov	r0, r2
    6696:	f003 bc48 	b.w	9f2a <nrf_gpio_cfg_sense_set>
    669a:	bf00      	nop
    669c:	2000005c 	.word	0x2000005c
    66a0:	40006000 	.word	0x40006000

000066a4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    66a4:	4b0e      	ldr	r3, [pc, #56]	; (66e0 <nrfx_gpiote_pin_uninit+0x3c>)
    66a6:	f100 0208 	add.w	r2, r0, #8
{
    66aa:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    66ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    66b0:	07db      	lsls	r3, r3, #31
{
    66b2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    66b4:	d511      	bpl.n	66da <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    66b6:	f7ff ffcb 	bl	6650 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    66ba:	4620      	mov	r0, r4
    66bc:	f7ff fdb2 	bl	6224 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    66c0:	a801      	add	r0, sp, #4
    66c2:	9401      	str	r4, [sp, #4]
    66c4:	f7ff fd38 	bl	6138 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    66c8:	9b01      	ldr	r3, [sp, #4]
    66ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    66ce:	2202      	movs	r2, #2
    66d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    66d4:	4803      	ldr	r0, [pc, #12]	; (66e4 <nrfx_gpiote_pin_uninit+0x40>)
}
    66d6:	b002      	add	sp, #8
    66d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    66da:	4803      	ldr	r0, [pc, #12]	; (66e8 <nrfx_gpiote_pin_uninit+0x44>)
    66dc:	e7fb      	b.n	66d6 <nrfx_gpiote_pin_uninit+0x32>
    66de:	bf00      	nop
    66e0:	2000005c 	.word	0x2000005c
    66e4:	0bad0000 	.word	0x0bad0000
    66e8:	0bad0004 	.word	0x0bad0004

000066ec <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    66ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66f0:	4b69      	ldr	r3, [pc, #420]	; (6898 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    66f2:	486a      	ldr	r0, [pc, #424]	; (689c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    66f4:	496a      	ldr	r1, [pc, #424]	; (68a0 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    66f6:	2600      	movs	r6, #0
{
    66f8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    66fa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    66fc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66fe:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6700:	b135      	cbz	r5, 6710 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6702:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6706:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6708:	bf1e      	ittt	ne
    670a:	601c      	strne	r4, [r3, #0]
    670c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    670e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6710:	3304      	adds	r3, #4
    6712:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6714:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6718:	d1f1      	bne.n	66fe <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    671a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 689c <nrfx_gpiote_irq_handler+0x1b0>
    671e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6722:	2b00      	cmp	r3, #0
    6724:	f000 809b 	beq.w	685e <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    6728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    672c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6730:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6732:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6736:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    673a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    673c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6740:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6744:	f10d 0a10 	add.w	sl, sp, #16
    6748:	ea4f 1348 	mov.w	r3, r8, lsl #5
    674c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    674e:	f04f 0b01 	mov.w	fp, #1
    6752:	e04b      	b.n	67ec <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    6754:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6756:	4a53      	ldr	r2, [pc, #332]	; (68a4 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6758:	fa94 f4a4 	rbit	r4, r4
    675c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6760:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6762:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6764:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6768:	f004 0107 	and.w	r1, r4, #7
    676c:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6770:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6774:	9403      	str	r4, [sp, #12]
    6776:	fa0b f101 	lsl.w	r1, fp, r1
    677a:	ea23 0301 	bic.w	r3, r3, r1
    677e:	08ba      	lsrs	r2, r7, #2
    6780:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6784:	a803      	add	r0, sp, #12
    6786:	9201      	str	r2, [sp, #4]
    6788:	f7ff fcd6 	bl	6138 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    678c:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    678e:	9a01      	ldr	r2, [sp, #4]
    6790:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6794:	f3c7 0582 	ubfx	r5, r7, #2, #3
    6798:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    679c:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    679e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    67a0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    67a4:	d52c      	bpl.n	6800 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    67a6:	4639      	mov	r1, r7
    67a8:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    67aa:	b2dd      	uxtb	r5, r3
    67ac:	f7ff fca6 	bl	60fc <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    67b0:	a803      	add	r0, sp, #12
    67b2:	9403      	str	r4, [sp, #12]
    67b4:	f7ff fcc0 	bl	6138 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    67b8:	9b03      	ldr	r3, [sp, #12]
    67ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    67be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    67c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    67c6:	429d      	cmp	r5, r3
    67c8:	d107      	bne.n	67da <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    67ca:	2100      	movs	r1, #0
    67cc:	4620      	mov	r0, r4
    67ce:	f003 fbac 	bl	9f2a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    67d2:	4629      	mov	r1, r5
    67d4:	4620      	mov	r0, r4
    67d6:	f003 fba8 	bl	9f2a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    67da:	a803      	add	r0, sp, #12
    67dc:	9403      	str	r4, [sp, #12]
    67de:	f7ff fcab 	bl	6138 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    67e2:	9b03      	ldr	r3, [sp, #12]
    67e4:	fa0b f303 	lsl.w	r3, fp, r3
    67e8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    67ec:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    67f0:	2c00      	cmp	r4, #0
    67f2:	d1af      	bne.n	6754 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    67f4:	f1b8 0f00 	cmp.w	r8, #0
    67f8:	d11d      	bne.n	6836 <nrfx_gpiote_irq_handler+0x14a>
    67fa:	f04f 0801 	mov.w	r8, #1
    67fe:	e7a3      	b.n	6748 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6800:	2b02      	cmp	r3, #2
    6802:	d10c      	bne.n	681e <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6804:	2103      	movs	r1, #3
    6806:	4620      	mov	r0, r4
    6808:	f003 fb8f 	bl	9f2a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    680c:	f005 0305 	and.w	r3, r5, #5
    6810:	2b01      	cmp	r3, #1
    6812:	d1e2      	bne.n	67da <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    6814:	4639      	mov	r1, r7
    6816:	4620      	mov	r0, r4
    6818:	f7ff fc70 	bl	60fc <call_handler>
    681c:	e7dd      	b.n	67da <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    681e:	2102      	movs	r1, #2
    6820:	4620      	mov	r0, r4
    6822:	9301      	str	r3, [sp, #4]
    6824:	f003 fb81 	bl	9f2a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6828:	2d03      	cmp	r5, #3
    682a:	d0f3      	beq.n	6814 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	2b03      	cmp	r3, #3
    6830:	d1d3      	bne.n	67da <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6832:	2d02      	cmp	r5, #2
    6834:	e7ed      	b.n	6812 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    6836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    683a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    683e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6842:	4919      	ldr	r1, [pc, #100]	; (68a8 <nrfx_gpiote_irq_handler+0x1bc>)
    6844:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6848:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    684a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    684e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6852:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6854:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6856:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    685a:	f47f af71 	bne.w	6740 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    685e:	2401      	movs	r4, #1
    while (mask)
    6860:	b916      	cbnz	r6, 6868 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6862:	b007      	add	sp, #28
    6864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6868:	fa96 f3a6 	rbit	r3, r6
    686c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6870:	fa04 f203 	lsl.w	r2, r4, r3
    6874:	009b      	lsls	r3, r3, #2
    6876:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    687a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    687e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6882:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6886:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    688a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    688e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6892:	f7ff fc33 	bl	60fc <call_handler>
    6896:	e7e3      	b.n	6860 <nrfx_gpiote_irq_handler+0x174>
    6898:	40006100 	.word	0x40006100
    689c:	40006000 	.word	0x40006000
    68a0:	40006120 	.word	0x40006120
    68a4:	2000005c 	.word	0x2000005c
    68a8:	50000300 	.word	0x50000300

000068ac <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    68ac:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    68ae:	4801      	ldr	r0, [pc, #4]	; (68b4 <nrfx_ppi_channel_alloc+0x8>)
    68b0:	f7ff ba42 	b.w	5d38 <nrfx_flag32_alloc>
    68b4:	200000d8 	.word	0x200000d8

000068b8 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    68b8:	4b11      	ldr	r3, [pc, #68]	; (6900 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    68ba:	4912      	ldr	r1, [pc, #72]	; (6904 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    68bc:	2203      	movs	r2, #3
    68be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    68c0:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    68c2:	4a11      	ldr	r2, [pc, #68]	; (6908 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    68c4:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    68c6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    68c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    68cc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    68ce:	2200      	movs	r2, #0
    68d0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    68d2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    68d4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    68d6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    68d8:	490c      	ldr	r1, [pc, #48]	; (690c <_DoInit+0x54>)
    68da:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    68dc:	2110      	movs	r1, #16
    68de:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    68e0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    68e2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    68e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    68e6:	4a0a      	ldr	r2, [pc, #40]	; (6910 <_DoInit+0x58>)
    68e8:	6812      	ldr	r2, [r2, #0]
    68ea:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    68ee:	4a09      	ldr	r2, [pc, #36]	; (6914 <_DoInit+0x5c>)
    68f0:	6810      	ldr	r0, [r2, #0]
    68f2:	8892      	ldrh	r2, [r2, #4]
    68f4:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    68f6:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    68f8:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    68fa:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    68fc:	4770      	bx	lr
    68fe:	bf00      	nop
    6900:	20004b5c 	.word	0x20004b5c
    6904:	0000bade 	.word	0x0000bade
    6908:	20004e3c 	.word	0x20004e3c
    690c:	20004e2c 	.word	0x20004e2c
    6910:	0000bae7 	.word	0x0000bae7
    6914:	0000baeb 	.word	0x0000baeb

00006918 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    691c:	4f21      	ldr	r7, [pc, #132]	; (69a4 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    691e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6922:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6924:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6928:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    692a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    692c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    692e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6930:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6932:	d831      	bhi.n	6998 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6934:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6938:	ebaa 0905 	sub.w	r9, sl, r5
    693c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6940:	4294      	cmp	r4, r2
    6942:	d811      	bhi.n	6968 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6944:	2318      	movs	r3, #24
    6946:	fb06 3303 	mla	r3, r6, r3, r3
    694a:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    694c:	4622      	mov	r2, r4
    694e:	6858      	ldr	r0, [r3, #4]
    6950:	4641      	mov	r1, r8
    6952:	4428      	add	r0, r5
    6954:	f003 fc1a 	bl	a18c <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    6958:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    695a:	2318      	movs	r3, #24
    695c:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    6960:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    6962:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6968:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    696a:	429c      	cmp	r4, r3
    696c:	d818      	bhi.n	69a0 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    696e:	fb00 bb0b 	mla	fp, r0, fp, fp
    6972:	44bb      	add	fp, r7
    6974:	464a      	mov	r2, r9
    6976:	f8db 0004 	ldr.w	r0, [fp, #4]
    697a:	442c      	add	r4, r5
    697c:	4428      	add	r0, r5
    697e:	f003 fc05 	bl	a18c <memcpy>
      if (NumBytes) {
    6982:	ebb4 040a 	subs.w	r4, r4, sl
    6986:	d0e8      	beq.n	695a <SEGGER_RTT_WriteSkipNoLock+0x42>
    6988:	f8db 0004 	ldr.w	r0, [fp, #4]
    698c:	4622      	mov	r2, r4
    698e:	eb08 0109 	add.w	r1, r8, r9
    6992:	f003 fbfb 	bl	a18c <memcpy>
      return 1;
    6996:	e7e0      	b.n	695a <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    6998:	3b01      	subs	r3, #1
    699a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    699c:	42a3      	cmp	r3, r4
    699e:	d2d1      	bcs.n	6944 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    69a0:	2000      	movs	r0, #0
    69a2:	e7df      	b.n	6964 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    69a4:	20004b5c 	.word	0x20004b5c

000069a8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    69a8:	4b03      	ldr	r3, [pc, #12]	; (69b8 <SEGGER_RTT_HasDataUp+0x10>)
    69aa:	2218      	movs	r2, #24
    69ac:	fb02 3300 	mla	r3, r2, r0, r3
    69b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    69b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    69b4:	1a80      	subs	r0, r0, r2
    69b6:	4770      	bx	lr
    69b8:	20004b5c 	.word	0x20004b5c

000069bc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    69bc:	4b0e      	ldr	r3, [pc, #56]	; (69f8 <z_sys_init_run_level+0x3c>)
{
    69be:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    69c0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    69c4:	3001      	adds	r0, #1
    69c6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    69ca:	42a6      	cmp	r6, r4
    69cc:	d800      	bhi.n	69d0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    69ce:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    69d0:	e9d4 3500 	ldrd	r3, r5, [r4]
    69d4:	4628      	mov	r0, r5
    69d6:	4798      	blx	r3
		if (dev != NULL) {
    69d8:	b165      	cbz	r5, 69f4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    69da:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    69dc:	b130      	cbz	r0, 69ec <z_sys_init_run_level+0x30>
				if (rc < 0) {
    69de:	2800      	cmp	r0, #0
    69e0:	bfb8      	it	lt
    69e2:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    69e4:	28ff      	cmp	r0, #255	; 0xff
    69e6:	bfa8      	it	ge
    69e8:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    69ea:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    69ec:	785a      	ldrb	r2, [r3, #1]
    69ee:	f042 0201 	orr.w	r2, r2, #1
    69f2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    69f4:	3408      	adds	r4, #8
    69f6:	e7e8      	b.n	69ca <z_sys_init_run_level+0xe>
    69f8:	0000a748 	.word	0x0000a748

000069fc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    69fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a00:	4605      	mov	r5, r0
    6a02:	b086      	sub	sp, #24
    6a04:	460f      	mov	r7, r1
	__asm__ volatile(
    6a06:	f04f 0320 	mov.w	r3, #32
    6a0a:	f3ef 8811 	mrs	r8, BASEPRI
    6a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a12:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6a16:	f001 fe55 	bl	86c4 <z_impl_z_current_get>
    6a1a:	2d04      	cmp	r5, #4
    6a1c:	bf96      	itet	ls
    6a1e:	4b29      	ldrls	r3, [pc, #164]	; (6ac4 <z_fatal_error+0xc8>)
    6a20:	4b29      	ldrhi	r3, [pc, #164]	; (6ac8 <z_fatal_error+0xcc>)
    6a22:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6a26:	4929      	ldr	r1, [pc, #164]	; (6acc <z_fatal_error+0xd0>)
    6a28:	9503      	str	r5, [sp, #12]
    6a2a:	2400      	movs	r4, #0
    6a2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6a30:	4b27      	ldr	r3, [pc, #156]	; (6ad0 <z_fatal_error+0xd4>)
    6a32:	9400      	str	r4, [sp, #0]
    6a34:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6a38:	4606      	mov	r6, r0
    6a3a:	4623      	mov	r3, r4
    6a3c:	2201      	movs	r2, #1
    6a3e:	4620      	mov	r0, r4
    6a40:	f003 fa94 	bl	9f6c <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    6a44:	b16f      	cbz	r7, 6a62 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6a46:	69fb      	ldr	r3, [r7, #28]
    6a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6a4c:	b14b      	cbz	r3, 6a62 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    6a4e:	4b21      	ldr	r3, [pc, #132]	; (6ad4 <z_fatal_error+0xd8>)
    6a50:	491e      	ldr	r1, [pc, #120]	; (6acc <z_fatal_error+0xd0>)
    6a52:	9400      	str	r4, [sp, #0]
    6a54:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6a58:	2201      	movs	r2, #1
    6a5a:	4623      	mov	r3, r4
    6a5c:	4620      	mov	r0, r4
    6a5e:	f003 fa85 	bl	9f6c <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6a62:	b12e      	cbz	r6, 6a70 <z_fatal_error+0x74>
    6a64:	4630      	mov	r0, r6
    6a66:	f003 fab7 	bl	9fd8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6a6a:	b108      	cbz	r0, 6a70 <z_fatal_error+0x74>
    6a6c:	7803      	ldrb	r3, [r0, #0]
    6a6e:	b903      	cbnz	r3, 6a72 <z_fatal_error+0x76>
		thread_name = "unknown";
    6a70:	4819      	ldr	r0, [pc, #100]	; (6ad8 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6a72:	4b1a      	ldr	r3, [pc, #104]	; (6adc <z_fatal_error+0xe0>)
    6a74:	9302      	str	r3, [sp, #8]
    6a76:	2300      	movs	r3, #0
    6a78:	e9cd 6003 	strd	r6, r0, [sp, #12]
    6a7c:	e9cd 3300 	strd	r3, r3, [sp]
    6a80:	4618      	mov	r0, r3
    6a82:	4912      	ldr	r1, [pc, #72]	; (6acc <z_fatal_error+0xd0>)
    6a84:	2201      	movs	r2, #1
    6a86:	f003 fa71 	bl	9f6c <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6a8a:	4639      	mov	r1, r7
    6a8c:	4628      	mov	r0, r5
    6a8e:	f7ff f83f 	bl	5b10 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6a92:	2d04      	cmp	r5, #4
    6a94:	d10c      	bne.n	6ab0 <z_fatal_error+0xb4>
    6a96:	4912      	ldr	r1, [pc, #72]	; (6ae0 <z_fatal_error+0xe4>)
    6a98:	4a12      	ldr	r2, [pc, #72]	; (6ae4 <z_fatal_error+0xe8>)
    6a9a:	4813      	ldr	r0, [pc, #76]	; (6ae8 <z_fatal_error+0xec>)
    6a9c:	238f      	movs	r3, #143	; 0x8f
    6a9e:	f002 fefa 	bl	9896 <assert_print>
    6aa2:	4812      	ldr	r0, [pc, #72]	; (6aec <z_fatal_error+0xf0>)
    6aa4:	f002 fef7 	bl	9896 <assert_print>
    6aa8:	480e      	ldr	r0, [pc, #56]	; (6ae4 <z_fatal_error+0xe8>)
    6aaa:	218f      	movs	r1, #143	; 0x8f
    6aac:	f002 feec 	bl	9888 <assert_post_action>
	__asm__ volatile(
    6ab0:	f388 8811 	msr	BASEPRI, r8
    6ab4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6ab8:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6aba:	b006      	add	sp, #24
    6abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ac0:	f7fd bdd8 	b.w	4674 <z_impl_k_thread_abort>
    6ac4:	0000a760 	.word	0x0000a760
    6ac8:	0000baf2 	.word	0x0000baf2
    6acc:	0000a484 	.word	0x0000a484
    6ad0:	0000bb08 	.word	0x0000bb08
    6ad4:	0000bb30 	.word	0x0000bb30
    6ad8:	0000bb00 	.word	0x0000bb00
    6adc:	0000bb51 	.word	0x0000bb51
    6ae0:	0000bb8b 	.word	0x0000bb8b
    6ae4:	0000bb69 	.word	0x0000bb69
    6ae8:	0000a8c6 	.word	0x0000a8c6
    6aec:	0000bba8 	.word	0x0000bba8

00006af0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    6af0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    6af2:	4b0a      	ldr	r3, [pc, #40]	; (6b1c <bg_thread_main+0x2c>)
    6af4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6af6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6af8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6afa:	f7ff ff5f 	bl	69bc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    6afe:	f002 fa33 	bl	8f68 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6b02:	2003      	movs	r0, #3
    6b04:	f7ff ff5a 	bl	69bc <z_sys_init_run_level>

	z_init_static_threads();
    6b08:	f000 fa7c 	bl	7004 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    6b0c:	f7fa fc50 	bl	13b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6b10:	4a03      	ldr	r2, [pc, #12]	; (6b20 <bg_thread_main+0x30>)
    6b12:	7b13      	ldrb	r3, [r2, #12]
    6b14:	f023 0301 	bic.w	r3, r3, #1
    6b18:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6b1a:	bd08      	pop	{r3, pc}
    6b1c:	2000523c 	.word	0x2000523c
    6b20:	20004460 	.word	0x20004460

00006b24 <z_bss_zero>:
{
    6b24:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    6b26:	4803      	ldr	r0, [pc, #12]	; (6b34 <z_bss_zero+0x10>)
    6b28:	4a03      	ldr	r2, [pc, #12]	; (6b38 <z_bss_zero+0x14>)
    6b2a:	2100      	movs	r1, #0
    6b2c:	1a12      	subs	r2, r2, r0
    6b2e:	f003 fa2d 	bl	9f8c <z_early_memset>
}
    6b32:	bd08      	pop	{r3, pc}
    6b34:	200041c0 	.word	0x200041c0
    6b38:	20005240 	.word	0x20005240

00006b3c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    6b3c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    6b3e:	2300      	movs	r3, #0
{
    6b40:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    6b42:	2201      	movs	r2, #1
    6b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    6b48:	4e13      	ldr	r6, [pc, #76]	; (6b98 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6b4a:	4d14      	ldr	r5, [pc, #80]	; (6b9c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    6b4c:	9301      	str	r3, [sp, #4]
    6b4e:	220f      	movs	r2, #15
    6b50:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6b54:	4912      	ldr	r1, [pc, #72]	; (6ba0 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6b56:	2318      	movs	r3, #24
    6b58:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    6b5c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    6b60:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    6b62:	f44f 70b0 	mov.w	r0, #352	; 0x160
    6b66:	fb00 1104 	mla	r1, r0, r4, r1
    6b6a:	4b0e      	ldr	r3, [pc, #56]	; (6ba4 <z_init_cpu+0x68>)
    6b6c:	9500      	str	r5, [sp, #0]
    6b6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6b72:	4630      	mov	r0, r6
    6b74:	f000 f992 	bl	6e9c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6b78:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6b7a:	4a0b      	ldr	r2, [pc, #44]	; (6ba8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    6b7c:	60ee      	str	r6, [r5, #12]
    6b7e:	f023 0304 	bic.w	r3, r3, #4
    6b82:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6b84:	f44f 6302 	mov.w	r3, #2080	; 0x820
    6b88:	fb04 3303 	mla	r3, r4, r3, r3
    6b8c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    6b8e:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    6b90:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    6b92:	b006      	add	sp, #24
    6b94:	bd70      	pop	{r4, r5, r6, pc}
    6b96:	bf00      	nop
    6b98:	200043e0 	.word	0x200043e0
    6b9c:	20004c04 	.word	0x20004c04
    6ba0:	20006ae0 	.word	0x20006ae0
    6ba4:	00007161 	.word	0x00007161
    6ba8:	200062c0 	.word	0x200062c0

00006bac <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6bac:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6bae:	4b2f      	ldr	r3, [pc, #188]	; (6c6c <z_cstart+0xc0>)
    6bb0:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6bb2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6bb6:	4d2e      	ldr	r5, [pc, #184]	; (6c70 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6bb8:	4e2e      	ldr	r6, [pc, #184]	; (6c74 <z_cstart+0xc8>)
    6bba:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6bbc:	4f2e      	ldr	r7, [pc, #184]	; (6c78 <z_cstart+0xcc>)
    6bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6bc2:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6bc4:	2400      	movs	r4, #0
    6bc6:	23e0      	movs	r3, #224	; 0xe0
    6bc8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6bcc:	77ec      	strb	r4, [r5, #31]
    6bce:	762c      	strb	r4, [r5, #24]
    6bd0:	766c      	strb	r4, [r5, #25]
    6bd2:	76ac      	strb	r4, [r5, #26]
    6bd4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6bda:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6bde:	626b      	str	r3, [r5, #36]	; 0x24
    6be0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6be4:	f7fd fcba 	bl	455c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6be8:	f7fd f812 	bl	3c10 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6bf0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6bf2:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    6bf4:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6bf6:	f7fd fe3b 	bl	4870 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6bfa:	f7fd fd51 	bl	46a0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6bfe:	f7fc f9e1 	bl	2fc4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6c02:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    6c06:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    6c08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6c0c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    6c10:	f002 f9a4 	bl	8f5c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    6c14:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6c16:	f003 f99e 	bl	9f56 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6c1a:	4620      	mov	r0, r4
    6c1c:	f7ff fece 	bl	69bc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6c20:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    6c22:	4d16      	ldr	r5, [pc, #88]	; (6c7c <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6c24:	f7ff feca 	bl	69bc <z_sys_init_run_level>
	z_sched_init();
    6c28:	f001 fbc2 	bl	83b0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6c2c:	4b14      	ldr	r3, [pc, #80]	; (6c80 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    6c2e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6c30:	9305      	str	r3, [sp, #20]
    6c32:	2301      	movs	r3, #1
    6c34:	4913      	ldr	r1, [pc, #76]	; (6c84 <z_cstart+0xd8>)
    6c36:	9400      	str	r4, [sp, #0]
    6c38:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6c40:	463b      	mov	r3, r7
    6c42:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6c46:	4628      	mov	r0, r5
    6c48:	f000 f928 	bl	6e9c <z_setup_new_thread>
    6c4c:	7b6a      	ldrb	r2, [r5, #13]
    6c4e:	4606      	mov	r6, r0
    6c50:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    6c54:	4628      	mov	r0, r5
    6c56:	736a      	strb	r2, [r5, #13]
    6c58:	f000 fe38 	bl	78cc <z_ready_thread>
	z_init_cpu(0);
    6c5c:	4620      	mov	r0, r4
    6c5e:	f7ff ff6d 	bl	6b3c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6c62:	463a      	mov	r2, r7
    6c64:	4631      	mov	r1, r6
    6c66:	4628      	mov	r0, r5
    6c68:	f7fd f936 	bl	3ed8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6c6c:	20006ae0 	.word	0x20006ae0
    6c70:	e000ed00 	.word	0xe000ed00
    6c74:	20004c04 	.word	0x20004c04
    6c78:	00006af1 	.word	0x00006af1
    6c7c:	20004460 	.word	0x20004460
    6c80:	0000bc27 	.word	0x0000bc27
    6c84:	20006c40 	.word	0x20006c40

00006c88 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6c8a:	4c16      	ldr	r4, [pc, #88]	; (6ce4 <init_mem_slab_module+0x5c>)
    6c8c:	4d16      	ldr	r5, [pc, #88]	; (6ce8 <init_mem_slab_module+0x60>)
    6c8e:	4e17      	ldr	r6, [pc, #92]	; (6cec <init_mem_slab_module+0x64>)
    6c90:	42ac      	cmp	r4, r5
    6c92:	d90c      	bls.n	6cae <init_mem_slab_module+0x26>
    6c94:	4916      	ldr	r1, [pc, #88]	; (6cf0 <init_mem_slab_module+0x68>)
    6c96:	4817      	ldr	r0, [pc, #92]	; (6cf4 <init_mem_slab_module+0x6c>)
    6c98:	233d      	movs	r3, #61	; 0x3d
    6c9a:	4632      	mov	r2, r6
    6c9c:	f002 fdfb 	bl	9896 <assert_print>
    6ca0:	4815      	ldr	r0, [pc, #84]	; (6cf8 <init_mem_slab_module+0x70>)
    6ca2:	f002 fdf8 	bl	9896 <assert_print>
    6ca6:	213d      	movs	r1, #61	; 0x3d
    6ca8:	4630      	mov	r0, r6
    6caa:	f002 fded 	bl	9888 <assert_post_action>
    6cae:	42ac      	cmp	r4, r5
    6cb0:	d301      	bcc.n	6cb6 <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    6cb2:	2000      	movs	r0, #0
	return rc;
}
    6cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6cb6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    6cba:	ea42 0301 	orr.w	r3, r2, r1
    6cbe:	f013 0303 	ands.w	r3, r3, #3
    6cc2:	d10b      	bne.n	6cdc <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    6cc4:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    6cc6:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6cc8:	4283      	cmp	r3, r0
    6cca:	d101      	bne.n	6cd0 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ccc:	3420      	adds	r4, #32
    6cce:	e7df      	b.n	6c90 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    6cd0:	69a7      	ldr	r7, [r4, #24]
    6cd2:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6cd4:	3301      	adds	r3, #1
		slab->free_list = p;
    6cd6:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    6cd8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6cda:	e7f5      	b.n	6cc8 <init_mem_slab_module+0x40>
	return rc;
    6cdc:	f06f 0015 	mvn.w	r0, #21
    6ce0:	e7e8      	b.n	6cb4 <init_mem_slab_module+0x2c>
    6ce2:	bf00      	nop
    6ce4:	20004158 	.word	0x20004158
    6ce8:	20004158 	.word	0x20004158
    6cec:	0000bc2f 	.word	0x0000bc2f
    6cf0:	0000bc54 	.word	0x0000bc54
    6cf4:	0000a8c6 	.word	0x0000a8c6
    6cf8:	0000bc71 	.word	0x0000bc71

00006cfc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6d00:	4604      	mov	r4, r0
    6d02:	460e      	mov	r6, r1
    6d04:	4690      	mov	r8, r2
    6d06:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6d08:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6d0c:	f04f 0320 	mov.w	r3, #32
    6d10:	f3ef 8911 	mrs	r9, BASEPRI
    6d14:	f383 8812 	msr	BASEPRI_MAX, r3
    6d18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d1c:	4628      	mov	r0, r5
    6d1e:	f000 f9f9 	bl	7114 <z_spin_lock_valid>
    6d22:	b968      	cbnz	r0, 6d40 <k_mem_slab_alloc+0x44>
    6d24:	4a24      	ldr	r2, [pc, #144]	; (6db8 <k_mem_slab_alloc+0xbc>)
    6d26:	4925      	ldr	r1, [pc, #148]	; (6dbc <k_mem_slab_alloc+0xc0>)
    6d28:	4825      	ldr	r0, [pc, #148]	; (6dc0 <k_mem_slab_alloc+0xc4>)
    6d2a:	238e      	movs	r3, #142	; 0x8e
    6d2c:	f002 fdb3 	bl	9896 <assert_print>
    6d30:	4824      	ldr	r0, [pc, #144]	; (6dc4 <k_mem_slab_alloc+0xc8>)
    6d32:	4629      	mov	r1, r5
    6d34:	f002 fdaf 	bl	9896 <assert_print>
    6d38:	481f      	ldr	r0, [pc, #124]	; (6db8 <k_mem_slab_alloc+0xbc>)
    6d3a:	218e      	movs	r1, #142	; 0x8e
    6d3c:	f002 fda4 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d40:	4628      	mov	r0, r5
    6d42:	f000 fa05 	bl	7150 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6d46:	69a3      	ldr	r3, [r4, #24]
    6d48:	b1eb      	cbz	r3, 6d86 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    6d4a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    6d50:	69e3      	ldr	r3, [r4, #28]
    6d52:	3301      	adds	r3, #1
    6d54:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6d56:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d58:	4628      	mov	r0, r5
    6d5a:	f000 f9e9 	bl	7130 <z_spin_unlock_valid>
    6d5e:	b968      	cbnz	r0, 6d7c <k_mem_slab_alloc+0x80>
    6d60:	4a15      	ldr	r2, [pc, #84]	; (6db8 <k_mem_slab_alloc+0xbc>)
    6d62:	4919      	ldr	r1, [pc, #100]	; (6dc8 <k_mem_slab_alloc+0xcc>)
    6d64:	4816      	ldr	r0, [pc, #88]	; (6dc0 <k_mem_slab_alloc+0xc4>)
    6d66:	23b9      	movs	r3, #185	; 0xb9
    6d68:	f002 fd95 	bl	9896 <assert_print>
    6d6c:	4817      	ldr	r0, [pc, #92]	; (6dcc <k_mem_slab_alloc+0xd0>)
    6d6e:	4629      	mov	r1, r5
    6d70:	f002 fd91 	bl	9896 <assert_print>
    6d74:	4810      	ldr	r0, [pc, #64]	; (6db8 <k_mem_slab_alloc+0xbc>)
    6d76:	21b9      	movs	r1, #185	; 0xb9
    6d78:	f002 fd86 	bl	9888 <assert_post_action>
	__asm__ volatile(
    6d7c:	f389 8811 	msr	BASEPRI, r9
    6d80:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    6d84:	e013      	b.n	6dae <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6d86:	ea58 0207 	orrs.w	r2, r8, r7
    6d8a:	d103      	bne.n	6d94 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    6d8c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    6d8e:	f06f 040b 	mvn.w	r4, #11
    6d92:	e7e1      	b.n	6d58 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6d94:	4622      	mov	r2, r4
    6d96:	e9cd 8700 	strd	r8, r7, [sp]
    6d9a:	4649      	mov	r1, r9
    6d9c:	4628      	mov	r0, r5
    6d9e:	f001 f909 	bl	7fb4 <z_pend_curr>
		if (result == 0) {
    6da2:	4604      	mov	r4, r0
    6da4:	b918      	cbnz	r0, 6dae <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    6da6:	4b0a      	ldr	r3, [pc, #40]	; (6dd0 <k_mem_slab_alloc+0xd4>)
    6da8:	689b      	ldr	r3, [r3, #8]
    6daa:	695b      	ldr	r3, [r3, #20]
    6dac:	6033      	str	r3, [r6, #0]
}
    6dae:	4620      	mov	r0, r4
    6db0:	b003      	add	sp, #12
    6db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6db6:	bf00      	nop
    6db8:	0000aa10 	.word	0x0000aa10
    6dbc:	0000aa69 	.word	0x0000aa69
    6dc0:	0000a8c6 	.word	0x0000a8c6
    6dc4:	0000aa7e 	.word	0x0000aa7e
    6dc8:	0000aa3d 	.word	0x0000aa3d
    6dcc:	0000aa54 	.word	0x0000aa54
    6dd0:	20004c04 	.word	0x20004c04

00006dd4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dd8:	4604      	mov	r4, r0
    6dda:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6ddc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6de0:	f04f 0320 	mov.w	r3, #32
    6de4:	f3ef 8711 	mrs	r7, BASEPRI
    6de8:	f383 8812 	msr	BASEPRI_MAX, r3
    6dec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6df0:	4628      	mov	r0, r5
    6df2:	f000 f98f 	bl	7114 <z_spin_lock_valid>
    6df6:	b968      	cbnz	r0, 6e14 <k_mem_slab_free+0x40>
    6df8:	4a22      	ldr	r2, [pc, #136]	; (6e84 <k_mem_slab_free+0xb0>)
    6dfa:	4923      	ldr	r1, [pc, #140]	; (6e88 <k_mem_slab_free+0xb4>)
    6dfc:	4823      	ldr	r0, [pc, #140]	; (6e8c <k_mem_slab_free+0xb8>)
    6dfe:	238e      	movs	r3, #142	; 0x8e
    6e00:	f002 fd49 	bl	9896 <assert_print>
    6e04:	4822      	ldr	r0, [pc, #136]	; (6e90 <k_mem_slab_free+0xbc>)
    6e06:	4629      	mov	r1, r5
    6e08:	f002 fd45 	bl	9896 <assert_print>
    6e0c:	481d      	ldr	r0, [pc, #116]	; (6e84 <k_mem_slab_free+0xb0>)
    6e0e:	218e      	movs	r1, #142	; 0x8e
    6e10:	f002 fd3a 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e14:	4628      	mov	r0, r5
    6e16:	f000 f99b 	bl	7150 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6e1a:	f8d4 8018 	ldr.w	r8, [r4, #24]
    6e1e:	f1b8 0f00 	cmp.w	r8, #0
    6e22:	d10f      	bne.n	6e44 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6e24:	4620      	mov	r0, r4
    6e26:	f001 fa71 	bl	830c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    6e2a:	b158      	cbz	r0, 6e44 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6e2c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6e2e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6e30:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    6e34:	f000 fd4a 	bl	78cc <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6e38:	4639      	mov	r1, r7
    6e3a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    6e40:	f000 bd8c 	b.w	795c <z_reschedule>
	**(char ***) mem = slab->free_list;
    6e44:	6833      	ldr	r3, [r6, #0]
    6e46:	69a2      	ldr	r2, [r4, #24]
    6e48:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6e4a:	6833      	ldr	r3, [r6, #0]
    6e4c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    6e4e:	69e3      	ldr	r3, [r4, #28]
    6e50:	3b01      	subs	r3, #1
    6e52:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e54:	4628      	mov	r0, r5
    6e56:	f000 f96b 	bl	7130 <z_spin_unlock_valid>
    6e5a:	b968      	cbnz	r0, 6e78 <k_mem_slab_free+0xa4>
    6e5c:	4a09      	ldr	r2, [pc, #36]	; (6e84 <k_mem_slab_free+0xb0>)
    6e5e:	490d      	ldr	r1, [pc, #52]	; (6e94 <k_mem_slab_free+0xc0>)
    6e60:	480a      	ldr	r0, [pc, #40]	; (6e8c <k_mem_slab_free+0xb8>)
    6e62:	23b9      	movs	r3, #185	; 0xb9
    6e64:	f002 fd17 	bl	9896 <assert_print>
    6e68:	480b      	ldr	r0, [pc, #44]	; (6e98 <k_mem_slab_free+0xc4>)
    6e6a:	4629      	mov	r1, r5
    6e6c:	f002 fd13 	bl	9896 <assert_print>
    6e70:	4804      	ldr	r0, [pc, #16]	; (6e84 <k_mem_slab_free+0xb0>)
    6e72:	21b9      	movs	r1, #185	; 0xb9
    6e74:	f002 fd08 	bl	9888 <assert_post_action>
	__asm__ volatile(
    6e78:	f387 8811 	msr	BASEPRI, r7
    6e7c:	f3bf 8f6f 	isb	sy
}
    6e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e84:	0000aa10 	.word	0x0000aa10
    6e88:	0000aa69 	.word	0x0000aa69
    6e8c:	0000a8c6 	.word	0x0000a8c6
    6e90:	0000aa7e 	.word	0x0000aa7e
    6e94:	0000aa3d 	.word	0x0000aa3d
    6e98:	0000aa54 	.word	0x0000aa54

00006e9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ea0:	b085      	sub	sp, #20
    6ea2:	4604      	mov	r4, r0
    6ea4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6ea8:	f1b8 0f0f 	cmp.w	r8, #15
{
    6eac:	460f      	mov	r7, r1
    6eae:	4615      	mov	r5, r2
    6eb0:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    6eb2:	d132      	bne.n	6f1a <z_setup_new_thread+0x7e>
    6eb4:	4b25      	ldr	r3, [pc, #148]	; (6f4c <z_setup_new_thread+0xb0>)
    6eb6:	4599      	cmp	r9, r3
    6eb8:	d133      	bne.n	6f22 <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6eba:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6ebe:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    6ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6ec4:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ec6:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6ec8:	2304      	movs	r3, #4
    6eca:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6ecc:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6ed0:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    6ed4:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    6ed8:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6edc:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    6ee0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    6ee4:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6ee6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6ee8:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6eea:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6eee:	9302      	str	r3, [sp, #8]
    6ef0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6ef2:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    6ef4:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ef8:	9300      	str	r3, [sp, #0]
    6efa:	4642      	mov	r2, r8
    6efc:	464b      	mov	r3, r9
    6efe:	4639      	mov	r1, r7
    6f00:	4620      	mov	r0, r4
    6f02:	f7fc ffb7 	bl	3e74 <arch_new_thread>
	if (!_current) {
    6f06:	4b12      	ldr	r3, [pc, #72]	; (6f50 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6f08:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6f0a:	689b      	ldr	r3, [r3, #8]
    6f0c:	b103      	cbz	r3, 6f10 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6f10:	6723      	str	r3, [r4, #112]	; 0x70
}
    6f12:	4640      	mov	r0, r8
    6f14:	b005      	add	sp, #20
    6f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6f1a:	f108 0310 	add.w	r3, r8, #16
    6f1e:	2b1e      	cmp	r3, #30
    6f20:	d9cb      	bls.n	6eba <z_setup_new_thread+0x1e>
    6f22:	4a0c      	ldr	r2, [pc, #48]	; (6f54 <z_setup_new_thread+0xb8>)
    6f24:	490c      	ldr	r1, [pc, #48]	; (6f58 <z_setup_new_thread+0xbc>)
    6f26:	480d      	ldr	r0, [pc, #52]	; (6f5c <z_setup_new_thread+0xc0>)
    6f28:	f240 13ff 	movw	r3, #511	; 0x1ff
    6f2c:	f002 fcb3 	bl	9896 <assert_print>
    6f30:	4641      	mov	r1, r8
    6f32:	480b      	ldr	r0, [pc, #44]	; (6f60 <z_setup_new_thread+0xc4>)
    6f34:	f06f 030f 	mvn.w	r3, #15
    6f38:	220e      	movs	r2, #14
    6f3a:	f002 fcac 	bl	9896 <assert_print>
    6f3e:	4805      	ldr	r0, [pc, #20]	; (6f54 <z_setup_new_thread+0xb8>)
    6f40:	f240 11ff 	movw	r1, #511	; 0x1ff
    6f44:	f002 fca0 	bl	9888 <assert_post_action>
    6f48:	e7b7      	b.n	6eba <z_setup_new_thread+0x1e>
    6f4a:	bf00      	nop
    6f4c:	00007161 	.word	0x00007161
    6f50:	20004c04 	.word	0x20004c04
    6f54:	0000bc90 	.word	0x0000bc90
    6f58:	0000bcb3 	.word	0x0000bcb3
    6f5c:	0000a8c6 	.word	0x0000a8c6
    6f60:	0000bd33 	.word	0x0000bd33

00006f64 <z_impl_k_thread_create>:
{
    6f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f68:	b087      	sub	sp, #28
    6f6a:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    6f6e:	4604      	mov	r4, r0
    6f70:	460f      	mov	r7, r1
    6f72:	4690      	mov	r8, r2
    6f74:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6f76:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    6f7a:	b173      	cbz	r3, 6f9a <z_impl_k_thread_create+0x36>
    6f7c:	491c      	ldr	r1, [pc, #112]	; (6ff0 <z_impl_k_thread_create+0x8c>)
    6f7e:	4a1d      	ldr	r2, [pc, #116]	; (6ff4 <z_impl_k_thread_create+0x90>)
    6f80:	481d      	ldr	r0, [pc, #116]	; (6ff8 <z_impl_k_thread_create+0x94>)
    6f82:	f240 236e 	movw	r3, #622	; 0x26e
    6f86:	f002 fc86 	bl	9896 <assert_print>
    6f8a:	481c      	ldr	r0, [pc, #112]	; (6ffc <z_impl_k_thread_create+0x98>)
    6f8c:	f002 fc83 	bl	9896 <assert_print>
    6f90:	4818      	ldr	r0, [pc, #96]	; (6ff4 <z_impl_k_thread_create+0x90>)
    6f92:	f240 216e 	movw	r1, #622	; 0x26e
    6f96:	f002 fc77 	bl	9888 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6f9a:	2300      	movs	r3, #0
    6f9c:	9305      	str	r3, [sp, #20]
    6f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fa0:	9304      	str	r3, [sp, #16]
    6fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6fa4:	9303      	str	r3, [sp, #12]
    6fa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6fa8:	9302      	str	r3, [sp, #8]
    6faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6fac:	9301      	str	r3, [sp, #4]
    6fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6fb0:	9300      	str	r3, [sp, #0]
    6fb2:	4642      	mov	r2, r8
    6fb4:	464b      	mov	r3, r9
    6fb6:	4639      	mov	r1, r7
    6fb8:	4620      	mov	r0, r4
    6fba:	f7ff ff6f 	bl	6e9c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6fbe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    6fc2:	bf08      	it	eq
    6fc4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    6fc8:	d005      	beq.n	6fd6 <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6fca:	ea55 0306 	orrs.w	r3, r5, r6
    6fce:	d106      	bne.n	6fde <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    6fd0:	4620      	mov	r0, r4
    6fd2:	f000 fd07 	bl	79e4 <z_sched_start>
}
    6fd6:	4620      	mov	r0, r4
    6fd8:	b007      	add	sp, #28
    6fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6fde:	4908      	ldr	r1, [pc, #32]	; (7000 <z_impl_k_thread_create+0x9c>)
    6fe0:	4632      	mov	r2, r6
    6fe2:	462b      	mov	r3, r5
    6fe4:	f104 0018 	add.w	r0, r4, #24
    6fe8:	f001 fc8c 	bl	8904 <z_add_timeout>
    6fec:	e7f3      	b.n	6fd6 <z_impl_k_thread_create+0x72>
    6fee:	bf00      	nop
    6ff0:	0000bd64 	.word	0x0000bd64
    6ff4:	0000bc90 	.word	0x0000bc90
    6ff8:	0000a8c6 	.word	0x0000a8c6
    6ffc:	0000bd76 	.word	0x0000bd76
    7000:	00008259 	.word	0x00008259

00007004 <z_init_static_threads>:
{
    7004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7008:	4c3b      	ldr	r4, [pc, #236]	; (70f8 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    700a:	4d3c      	ldr	r5, [pc, #240]	; (70fc <z_init_static_threads+0xf8>)
    700c:	4f3c      	ldr	r7, [pc, #240]	; (7100 <z_init_static_threads+0xfc>)
{
    700e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7010:	42ac      	cmp	r4, r5
    7012:	4626      	mov	r6, r4
    7014:	d90e      	bls.n	7034 <z_init_static_threads+0x30>
    7016:	493b      	ldr	r1, [pc, #236]	; (7104 <z_init_static_threads+0x100>)
    7018:	483b      	ldr	r0, [pc, #236]	; (7108 <z_init_static_threads+0x104>)
    701a:	f240 23d5 	movw	r3, #725	; 0x2d5
    701e:	463a      	mov	r2, r7
    7020:	f002 fc39 	bl	9896 <assert_print>
    7024:	4839      	ldr	r0, [pc, #228]	; (710c <z_init_static_threads+0x108>)
    7026:	f002 fc36 	bl	9896 <assert_print>
    702a:	f240 21d5 	movw	r1, #725	; 0x2d5
    702e:	4638      	mov	r0, r7
    7030:	f002 fc2a 	bl	9888 <assert_post_action>
    7034:	42ae      	cmp	r6, r5
    7036:	f104 0430 	add.w	r4, r4, #48	; 0x30
    703a:	d31f      	bcc.n	707c <z_init_static_threads+0x78>
	k_sched_lock();
    703c:	f000 fd26 	bl	7a8c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7040:	4c2d      	ldr	r4, [pc, #180]	; (70f8 <z_init_static_threads+0xf4>)
    7042:	4e2f      	ldr	r6, [pc, #188]	; (7100 <z_init_static_threads+0xfc>)
    7044:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 7104 <z_init_static_threads+0x100>
    7048:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7108 <z_init_static_threads+0x104>
    704c:	42ac      	cmp	r4, r5
    704e:	d90e      	bls.n	706e <z_init_static_threads+0x6a>
    7050:	4641      	mov	r1, r8
    7052:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    7056:	4632      	mov	r2, r6
    7058:	4648      	mov	r0, r9
    705a:	f002 fc1c 	bl	9896 <assert_print>
    705e:	482b      	ldr	r0, [pc, #172]	; (710c <z_init_static_threads+0x108>)
    7060:	f002 fc19 	bl	9896 <assert_print>
    7064:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7068:	4630      	mov	r0, r6
    706a:	f002 fc0d 	bl	9888 <assert_post_action>
    706e:	42ac      	cmp	r4, r5
    7070:	d320      	bcc.n	70b4 <z_init_static_threads+0xb0>
}
    7072:	b007      	add	sp, #28
    7074:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7078:	f000 bd7c 	b.w	7b74 <k_sched_unlock>
		z_setup_new_thread(
    707c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7080:	9305      	str	r3, [sp, #20]
    7082:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7086:	9304      	str	r3, [sp, #16]
    7088:	f854 3c14 	ldr.w	r3, [r4, #-20]
    708c:	9303      	str	r3, [sp, #12]
    708e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7092:	9302      	str	r3, [sp, #8]
    7094:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7098:	9301      	str	r3, [sp, #4]
    709a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    709e:	9300      	str	r3, [sp, #0]
    70a0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    70a4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    70a8:	f7ff fef8 	bl	6e9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    70ac:	f854 3c30 	ldr.w	r3, [r4, #-48]
    70b0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    70b2:	e7ad      	b.n	7010 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    70b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    70b6:	1c5a      	adds	r2, r3, #1
    70b8:	d00f      	beq.n	70da <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    70ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    70be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    70c2:	f240 30e7 	movw	r0, #999	; 0x3e7
    70c6:	2100      	movs	r1, #0
    70c8:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70cc:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    70d0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70d2:	d104      	bne.n	70de <z_init_static_threads+0xda>
	z_sched_start(thread);
    70d4:	4638      	mov	r0, r7
    70d6:	f000 fc85 	bl	79e4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    70da:	3430      	adds	r4, #48	; 0x30
    70dc:	e7b6      	b.n	704c <z_init_static_threads+0x48>
    70de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    70e2:	2300      	movs	r3, #0
    70e4:	f7f9 fc2a 	bl	93c <__aeabi_uldivmod>
    70e8:	4602      	mov	r2, r0
    70ea:	460b      	mov	r3, r1
    70ec:	f107 0018 	add.w	r0, r7, #24
    70f0:	4907      	ldr	r1, [pc, #28]	; (7110 <z_init_static_threads+0x10c>)
    70f2:	f001 fc07 	bl	8904 <z_add_timeout>
    70f6:	e7f0      	b.n	70da <z_init_static_threads+0xd6>
    70f8:	20004158 	.word	0x20004158
    70fc:	20004158 	.word	0x20004158
    7100:	0000bc90 	.word	0x0000bc90
    7104:	0000bd9b 	.word	0x0000bd9b
    7108:	0000a8c6 	.word	0x0000a8c6
    710c:	0000bc71 	.word	0x0000bc71
    7110:	00008259 	.word	0x00008259

00007114 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7114:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7116:	b138      	cbz	r0, 7128 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7118:	4b04      	ldr	r3, [pc, #16]	; (712c <z_spin_lock_valid+0x18>)
    711a:	7d1b      	ldrb	r3, [r3, #20]
    711c:	f000 0003 	and.w	r0, r0, #3
    7120:	1ac0      	subs	r0, r0, r3
    7122:	bf18      	it	ne
    7124:	2001      	movne	r0, #1
    7126:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7128:	2001      	movs	r0, #1
}
    712a:	4770      	bx	lr
    712c:	20004c04 	.word	0x20004c04

00007130 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7130:	4a06      	ldr	r2, [pc, #24]	; (714c <z_spin_unlock_valid+0x1c>)
    7132:	7d11      	ldrb	r1, [r2, #20]
    7134:	6892      	ldr	r2, [r2, #8]
    7136:	430a      	orrs	r2, r1
    7138:	6801      	ldr	r1, [r0, #0]
{
    713a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    713c:	4291      	cmp	r1, r2
    713e:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7142:	bf04      	itt	eq
    7144:	6018      	streq	r0, [r3, #0]
	return true;
    7146:	2001      	moveq	r0, #1
}
    7148:	4770      	bx	lr
    714a:	bf00      	nop
    714c:	20004c04 	.word	0x20004c04

00007150 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7150:	4b02      	ldr	r3, [pc, #8]	; (715c <z_spin_lock_set_owner+0xc>)
    7152:	7d1a      	ldrb	r2, [r3, #20]
    7154:	689b      	ldr	r3, [r3, #8]
    7156:	4313      	orrs	r3, r2
    7158:	6003      	str	r3, [r0, #0]
}
    715a:	4770      	bx	lr
    715c:	20004c04 	.word	0x20004c04

00007160 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7160:	4c13      	ldr	r4, [pc, #76]	; (71b0 <idle+0x50>)
{
    7162:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7164:	68a3      	ldr	r3, [r4, #8]
    7166:	f993 300e 	ldrsb.w	r3, [r3, #14]
    716a:	2b00      	cmp	r3, #0
    716c:	da09      	bge.n	7182 <idle+0x22>
    716e:	4911      	ldr	r1, [pc, #68]	; (71b4 <idle+0x54>)
    7170:	4811      	ldr	r0, [pc, #68]	; (71b8 <idle+0x58>)
    7172:	4a12      	ldr	r2, [pc, #72]	; (71bc <idle+0x5c>)
    7174:	2327      	movs	r3, #39	; 0x27
    7176:	f002 fb8e 	bl	9896 <assert_print>
    717a:	4810      	ldr	r0, [pc, #64]	; (71bc <idle+0x5c>)
    717c:	2127      	movs	r1, #39	; 0x27
    717e:	f002 fb83 	bl	9888 <assert_post_action>
	return !z_sys_post_kernel;
    7182:	4d0f      	ldr	r5, [pc, #60]	; (71c0 <idle+0x60>)
	__asm__ volatile(
    7184:	f04f 0220 	mov.w	r2, #32
    7188:	f3ef 8311 	mrs	r3, BASEPRI
    718c:	f382 8812 	msr	BASEPRI_MAX, r2
    7190:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7194:	f001 fcce 	bl	8b34 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7198:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    719a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    719c:	b913      	cbnz	r3, 71a4 <idle+0x44>
	arch_cpu_idle();
    719e:	f7fc fd3d 	bl	3c1c <arch_cpu_idle>
}
    71a2:	e7ef      	b.n	7184 <idle+0x24>
    71a4:	f7fc fb96 	bl	38d4 <pm_system_suspend>
    71a8:	2800      	cmp	r0, #0
    71aa:	d1eb      	bne.n	7184 <idle+0x24>
    71ac:	e7f7      	b.n	719e <idle+0x3e>
    71ae:	bf00      	nop
    71b0:	20004c04 	.word	0x20004c04
    71b4:	0000bde9 	.word	0x0000bde9
    71b8:	0000a8c6 	.word	0x0000a8c6
    71bc:	0000bdc8 	.word	0x0000bdc8
    71c0:	2000523c 	.word	0x2000523c

000071c4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    71c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    71c8:	4604      	mov	r4, r0
    71ca:	4617      	mov	r7, r2
    71cc:	461e      	mov	r6, r3
    71ce:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    71d2:	b163      	cbz	r3, 71ee <z_impl_k_mutex_lock+0x2a>
    71d4:	496d      	ldr	r1, [pc, #436]	; (738c <z_impl_k_mutex_lock+0x1c8>)
    71d6:	4a6e      	ldr	r2, [pc, #440]	; (7390 <z_impl_k_mutex_lock+0x1cc>)
    71d8:	486e      	ldr	r0, [pc, #440]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    71da:	2365      	movs	r3, #101	; 0x65
    71dc:	f002 fb5b 	bl	9896 <assert_print>
    71e0:	486d      	ldr	r0, [pc, #436]	; (7398 <z_impl_k_mutex_lock+0x1d4>)
    71e2:	f002 fb58 	bl	9896 <assert_print>
    71e6:	486a      	ldr	r0, [pc, #424]	; (7390 <z_impl_k_mutex_lock+0x1cc>)
    71e8:	2165      	movs	r1, #101	; 0x65
    71ea:	f002 fb4d 	bl	9888 <assert_post_action>
    71ee:	f04f 0320 	mov.w	r3, #32
    71f2:	f3ef 8811 	mrs	r8, BASEPRI
    71f6:	f383 8812 	msr	BASEPRI_MAX, r3
    71fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71fe:	4867      	ldr	r0, [pc, #412]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7200:	f7ff ff88 	bl	7114 <z_spin_lock_valid>
    7204:	b968      	cbnz	r0, 7222 <z_impl_k_mutex_lock+0x5e>
    7206:	4a66      	ldr	r2, [pc, #408]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    7208:	4966      	ldr	r1, [pc, #408]	; (73a4 <z_impl_k_mutex_lock+0x1e0>)
    720a:	4862      	ldr	r0, [pc, #392]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    720c:	238e      	movs	r3, #142	; 0x8e
    720e:	f002 fb42 	bl	9896 <assert_print>
    7212:	4962      	ldr	r1, [pc, #392]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7214:	4864      	ldr	r0, [pc, #400]	; (73a8 <z_impl_k_mutex_lock+0x1e4>)
    7216:	f002 fb3e 	bl	9896 <assert_print>
    721a:	4861      	ldr	r0, [pc, #388]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    721c:	218e      	movs	r1, #142	; 0x8e
    721e:	f002 fb33 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7222:	485e      	ldr	r0, [pc, #376]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7224:	f7ff ff94 	bl	7150 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7228:	68e3      	ldr	r3, [r4, #12]
    722a:	4a60      	ldr	r2, [pc, #384]	; (73ac <z_impl_k_mutex_lock+0x1e8>)
    722c:	b30b      	cbz	r3, 7272 <z_impl_k_mutex_lock+0xae>
    722e:	68a0      	ldr	r0, [r4, #8]
    7230:	6891      	ldr	r1, [r2, #8]
    7232:	4288      	cmp	r0, r1
    7234:	d03d      	beq.n	72b2 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7236:	ea57 0306 	orrs.w	r3, r7, r6
    723a:	d13c      	bne.n	72b6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    723c:	4857      	ldr	r0, [pc, #348]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    723e:	f7ff ff77 	bl	7130 <z_spin_unlock_valid>
    7242:	b968      	cbnz	r0, 7260 <z_impl_k_mutex_lock+0x9c>
    7244:	4a56      	ldr	r2, [pc, #344]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    7246:	495a      	ldr	r1, [pc, #360]	; (73b0 <z_impl_k_mutex_lock+0x1ec>)
    7248:	4852      	ldr	r0, [pc, #328]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    724a:	23b9      	movs	r3, #185	; 0xb9
    724c:	f002 fb23 	bl	9896 <assert_print>
    7250:	4952      	ldr	r1, [pc, #328]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7252:	4858      	ldr	r0, [pc, #352]	; (73b4 <z_impl_k_mutex_lock+0x1f0>)
    7254:	f002 fb1f 	bl	9896 <assert_print>
    7258:	4851      	ldr	r0, [pc, #324]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    725a:	21b9      	movs	r1, #185	; 0xb9
    725c:	f002 fb14 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7260:	f388 8811 	msr	BASEPRI, r8
    7264:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7268:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    726c:	b002      	add	sp, #8
    726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7272:	6891      	ldr	r1, [r2, #8]
    7274:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7278:	4848      	ldr	r0, [pc, #288]	; (739c <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    727a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    727c:	3301      	adds	r3, #1
    727e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7280:	6893      	ldr	r3, [r2, #8]
    7282:	60a3      	str	r3, [r4, #8]
    7284:	f7ff ff54 	bl	7130 <z_spin_unlock_valid>
    7288:	b968      	cbnz	r0, 72a6 <z_impl_k_mutex_lock+0xe2>
    728a:	4a45      	ldr	r2, [pc, #276]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    728c:	4948      	ldr	r1, [pc, #288]	; (73b0 <z_impl_k_mutex_lock+0x1ec>)
    728e:	4841      	ldr	r0, [pc, #260]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    7290:	23b9      	movs	r3, #185	; 0xb9
    7292:	f002 fb00 	bl	9896 <assert_print>
    7296:	4941      	ldr	r1, [pc, #260]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7298:	4846      	ldr	r0, [pc, #280]	; (73b4 <z_impl_k_mutex_lock+0x1f0>)
    729a:	f002 fafc 	bl	9896 <assert_print>
    729e:	4840      	ldr	r0, [pc, #256]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    72a0:	21b9      	movs	r1, #185	; 0xb9
    72a2:	f002 faf1 	bl	9888 <assert_post_action>
    72a6:	f388 8811 	msr	BASEPRI, r8
    72aa:	f3bf 8f6f 	isb	sy
		return 0;
    72ae:	2000      	movs	r0, #0
    72b0:	e7dc      	b.n	726c <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    72b2:	6921      	ldr	r1, [r4, #16]
    72b4:	e7e0      	b.n	7278 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    72b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
    72ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    72be:	4299      	cmp	r1, r3
    72c0:	bfa8      	it	ge
    72c2:	4619      	movge	r1, r3
    72c4:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    72c8:	4291      	cmp	r1, r2
    72ca:	bfb8      	it	lt
    72cc:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    72ce:	4299      	cmp	r1, r3
    72d0:	da53      	bge.n	737a <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    72d2:	f002 fe8a 	bl	9fea <adjust_owner_prio.isra.0>
    72d6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    72d8:	e9cd 7600 	strd	r7, r6, [sp]
    72dc:	482f      	ldr	r0, [pc, #188]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    72de:	4622      	mov	r2, r4
    72e0:	4641      	mov	r1, r8
    72e2:	f000 fe67 	bl	7fb4 <z_pend_curr>
	if (got_mutex == 0) {
    72e6:	2800      	cmp	r0, #0
    72e8:	d0e1      	beq.n	72ae <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    72ea:	f04f 0320 	mov.w	r3, #32
    72ee:	f3ef 8611 	mrs	r6, BASEPRI
    72f2:	f383 8812 	msr	BASEPRI_MAX, r3
    72f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72fa:	4828      	ldr	r0, [pc, #160]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    72fc:	f7ff ff0a 	bl	7114 <z_spin_lock_valid>
    7300:	b968      	cbnz	r0, 731e <z_impl_k_mutex_lock+0x15a>
    7302:	4a27      	ldr	r2, [pc, #156]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    7304:	4927      	ldr	r1, [pc, #156]	; (73a4 <z_impl_k_mutex_lock+0x1e0>)
    7306:	4823      	ldr	r0, [pc, #140]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    7308:	238e      	movs	r3, #142	; 0x8e
    730a:	f002 fac4 	bl	9896 <assert_print>
    730e:	4923      	ldr	r1, [pc, #140]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7310:	4825      	ldr	r0, [pc, #148]	; (73a8 <z_impl_k_mutex_lock+0x1e4>)
    7312:	f002 fac0 	bl	9896 <assert_print>
    7316:	4822      	ldr	r0, [pc, #136]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    7318:	218e      	movs	r1, #142	; 0x8e
    731a:	f002 fab5 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    731e:	481f      	ldr	r0, [pc, #124]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7320:	f7ff ff16 	bl	7150 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7324:	6823      	ldr	r3, [r4, #0]
    7326:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7328:	42a3      	cmp	r3, r4
    732a:	d00a      	beq.n	7342 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    732c:	b14b      	cbz	r3, 7342 <z_impl_k_mutex_lock+0x17e>
    732e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7332:	4299      	cmp	r1, r3
    7334:	bfa8      	it	ge
    7336:	4619      	movge	r1, r3
    7338:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    733c:	4299      	cmp	r1, r3
    733e:	bfb8      	it	lt
    7340:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7342:	68a0      	ldr	r0, [r4, #8]
    7344:	f002 fe51 	bl	9fea <adjust_owner_prio.isra.0>
    7348:	b9c8      	cbnz	r0, 737e <z_impl_k_mutex_lock+0x1ba>
    734a:	b9c5      	cbnz	r5, 737e <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    734c:	4813      	ldr	r0, [pc, #76]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    734e:	f7ff feef 	bl	7130 <z_spin_unlock_valid>
    7352:	b968      	cbnz	r0, 7370 <z_impl_k_mutex_lock+0x1ac>
    7354:	4a12      	ldr	r2, [pc, #72]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    7356:	4916      	ldr	r1, [pc, #88]	; (73b0 <z_impl_k_mutex_lock+0x1ec>)
    7358:	480e      	ldr	r0, [pc, #56]	; (7394 <z_impl_k_mutex_lock+0x1d0>)
    735a:	23b9      	movs	r3, #185	; 0xb9
    735c:	f002 fa9b 	bl	9896 <assert_print>
    7360:	490e      	ldr	r1, [pc, #56]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7362:	4814      	ldr	r0, [pc, #80]	; (73b4 <z_impl_k_mutex_lock+0x1f0>)
    7364:	f002 fa97 	bl	9896 <assert_print>
    7368:	480d      	ldr	r0, [pc, #52]	; (73a0 <z_impl_k_mutex_lock+0x1dc>)
    736a:	21b9      	movs	r1, #185	; 0xb9
    736c:	f002 fa8c 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7370:	f386 8811 	msr	BASEPRI, r6
    7374:	f3bf 8f6f 	isb	sy
    7378:	e005      	b.n	7386 <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    737a:	2500      	movs	r5, #0
    737c:	e7ac      	b.n	72d8 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    737e:	4807      	ldr	r0, [pc, #28]	; (739c <z_impl_k_mutex_lock+0x1d8>)
    7380:	4631      	mov	r1, r6
    7382:	f000 faeb 	bl	795c <z_reschedule>
	return -EAGAIN;
    7386:	f06f 000a 	mvn.w	r0, #10
    738a:	e76f      	b.n	726c <z_impl_k_mutex_lock+0xa8>
    738c:	0000bd64 	.word	0x0000bd64
    7390:	0000be11 	.word	0x0000be11
    7394:	0000a8c6 	.word	0x0000a8c6
    7398:	0000be33 	.word	0x0000be33
    739c:	20004c2c 	.word	0x20004c2c
    73a0:	0000aa10 	.word	0x0000aa10
    73a4:	0000aa69 	.word	0x0000aa69
    73a8:	0000aa7e 	.word	0x0000aa7e
    73ac:	20004c04 	.word	0x20004c04
    73b0:	0000aa3d 	.word	0x0000aa3d
    73b4:	0000aa54 	.word	0x0000aa54

000073b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    73b8:	b538      	push	{r3, r4, r5, lr}
    73ba:	4604      	mov	r4, r0
    73bc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    73c0:	b163      	cbz	r3, 73dc <z_impl_k_mutex_unlock+0x24>
    73c2:	4950      	ldr	r1, [pc, #320]	; (7504 <z_impl_k_mutex_unlock+0x14c>)
    73c4:	4a50      	ldr	r2, [pc, #320]	; (7508 <z_impl_k_mutex_unlock+0x150>)
    73c6:	4851      	ldr	r0, [pc, #324]	; (750c <z_impl_k_mutex_unlock+0x154>)
    73c8:	23c7      	movs	r3, #199	; 0xc7
    73ca:	f002 fa64 	bl	9896 <assert_print>
    73ce:	4850      	ldr	r0, [pc, #320]	; (7510 <z_impl_k_mutex_unlock+0x158>)
    73d0:	f002 fa61 	bl	9896 <assert_print>
    73d4:	484c      	ldr	r0, [pc, #304]	; (7508 <z_impl_k_mutex_unlock+0x150>)
    73d6:	21c7      	movs	r1, #199	; 0xc7
    73d8:	f002 fa56 	bl	9888 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    73dc:	68a3      	ldr	r3, [r4, #8]
    73de:	2b00      	cmp	r3, #0
    73e0:	f000 8089 	beq.w	74f6 <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    73e4:	4d4b      	ldr	r5, [pc, #300]	; (7514 <z_impl_k_mutex_unlock+0x15c>)
    73e6:	68aa      	ldr	r2, [r5, #8]
    73e8:	4293      	cmp	r3, r2
    73ea:	f040 8087 	bne.w	74fc <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    73ee:	68e3      	ldr	r3, [r4, #12]
    73f0:	b94b      	cbnz	r3, 7406 <z_impl_k_mutex_unlock+0x4e>
    73f2:	4949      	ldr	r1, [pc, #292]	; (7518 <z_impl_k_mutex_unlock+0x160>)
    73f4:	4845      	ldr	r0, [pc, #276]	; (750c <z_impl_k_mutex_unlock+0x154>)
    73f6:	4a44      	ldr	r2, [pc, #272]	; (7508 <z_impl_k_mutex_unlock+0x150>)
    73f8:	23df      	movs	r3, #223	; 0xdf
    73fa:	f002 fa4c 	bl	9896 <assert_print>
    73fe:	4842      	ldr	r0, [pc, #264]	; (7508 <z_impl_k_mutex_unlock+0x150>)
    7400:	21df      	movs	r1, #223	; 0xdf
    7402:	f002 fa41 	bl	9888 <assert_post_action>
    7406:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    740a:	b163      	cbz	r3, 7426 <z_impl_k_mutex_unlock+0x6e>
    740c:	493d      	ldr	r1, [pc, #244]	; (7504 <z_impl_k_mutex_unlock+0x14c>)
    740e:	4a43      	ldr	r2, [pc, #268]	; (751c <z_impl_k_mutex_unlock+0x164>)
    7410:	483e      	ldr	r0, [pc, #248]	; (750c <z_impl_k_mutex_unlock+0x154>)
    7412:	23fd      	movs	r3, #253	; 0xfd
    7414:	f002 fa3f 	bl	9896 <assert_print>
    7418:	4841      	ldr	r0, [pc, #260]	; (7520 <z_impl_k_mutex_unlock+0x168>)
    741a:	f002 fa3c 	bl	9896 <assert_print>
    741e:	483f      	ldr	r0, [pc, #252]	; (751c <z_impl_k_mutex_unlock+0x164>)
    7420:	21fd      	movs	r1, #253	; 0xfd
    7422:	f002 fa31 	bl	9888 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7426:	68ab      	ldr	r3, [r5, #8]
    7428:	7bdb      	ldrb	r3, [r3, #15]
    742a:	2b01      	cmp	r3, #1
    742c:	d10c      	bne.n	7448 <z_impl_k_mutex_unlock+0x90>
    742e:	493d      	ldr	r1, [pc, #244]	; (7524 <z_impl_k_mutex_unlock+0x16c>)
    7430:	4a3a      	ldr	r2, [pc, #232]	; (751c <z_impl_k_mutex_unlock+0x164>)
    7432:	4836      	ldr	r0, [pc, #216]	; (750c <z_impl_k_mutex_unlock+0x154>)
    7434:	23fe      	movs	r3, #254	; 0xfe
    7436:	f002 fa2e 	bl	9896 <assert_print>
    743a:	4839      	ldr	r0, [pc, #228]	; (7520 <z_impl_k_mutex_unlock+0x168>)
    743c:	f002 fa2b 	bl	9896 <assert_print>
    7440:	4836      	ldr	r0, [pc, #216]	; (751c <z_impl_k_mutex_unlock+0x164>)
    7442:	21fe      	movs	r1, #254	; 0xfe
    7444:	f002 fa20 	bl	9888 <assert_post_action>

	--_current->base.sched_locked;
    7448:	68aa      	ldr	r2, [r5, #8]
    744a:	7bd3      	ldrb	r3, [r2, #15]
    744c:	3b01      	subs	r3, #1
    744e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7450:	68e3      	ldr	r3, [r4, #12]
    7452:	2b01      	cmp	r3, #1
    7454:	d905      	bls.n	7462 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    7456:	3b01      	subs	r3, #1
    7458:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    745a:	f000 fb8b 	bl	7b74 <k_sched_unlock>

	return 0;
    745e:	2000      	movs	r0, #0
}
    7460:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7462:	f04f 0320 	mov.w	r3, #32
    7466:	f3ef 8511 	mrs	r5, BASEPRI
    746a:	f383 8812 	msr	BASEPRI_MAX, r3
    746e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7472:	482d      	ldr	r0, [pc, #180]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    7474:	f7ff fe4e 	bl	7114 <z_spin_lock_valid>
    7478:	b968      	cbnz	r0, 7496 <z_impl_k_mutex_unlock+0xde>
    747a:	4a2c      	ldr	r2, [pc, #176]	; (752c <z_impl_k_mutex_unlock+0x174>)
    747c:	492c      	ldr	r1, [pc, #176]	; (7530 <z_impl_k_mutex_unlock+0x178>)
    747e:	4823      	ldr	r0, [pc, #140]	; (750c <z_impl_k_mutex_unlock+0x154>)
    7480:	238e      	movs	r3, #142	; 0x8e
    7482:	f002 fa08 	bl	9896 <assert_print>
    7486:	4928      	ldr	r1, [pc, #160]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    7488:	482a      	ldr	r0, [pc, #168]	; (7534 <z_impl_k_mutex_unlock+0x17c>)
    748a:	f002 fa04 	bl	9896 <assert_print>
    748e:	4827      	ldr	r0, [pc, #156]	; (752c <z_impl_k_mutex_unlock+0x174>)
    7490:	218e      	movs	r1, #142	; 0x8e
    7492:	f002 f9f9 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7496:	4824      	ldr	r0, [pc, #144]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    7498:	f7ff fe5a 	bl	7150 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    749c:	6921      	ldr	r1, [r4, #16]
    749e:	68a0      	ldr	r0, [r4, #8]
    74a0:	f002 fda3 	bl	9fea <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    74a4:	4620      	mov	r0, r4
    74a6:	f000 ff31 	bl	830c <z_unpend_first_thread>
	mutex->owner = new_owner;
    74aa:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    74ac:	b158      	cbz	r0, 74c6 <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    74ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    74b2:	6122      	str	r2, [r4, #16]
    74b4:	2200      	movs	r2, #0
    74b6:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    74b8:	f000 fa08 	bl	78cc <z_ready_thread>
		z_reschedule(&lock, key);
    74bc:	481a      	ldr	r0, [pc, #104]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    74be:	4629      	mov	r1, r5
    74c0:	f000 fa4c 	bl	795c <z_reschedule>
    74c4:	e7c9      	b.n	745a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    74c6:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74c8:	4817      	ldr	r0, [pc, #92]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    74ca:	f7ff fe31 	bl	7130 <z_spin_unlock_valid>
    74ce:	b968      	cbnz	r0, 74ec <z_impl_k_mutex_unlock+0x134>
    74d0:	4a16      	ldr	r2, [pc, #88]	; (752c <z_impl_k_mutex_unlock+0x174>)
    74d2:	4919      	ldr	r1, [pc, #100]	; (7538 <z_impl_k_mutex_unlock+0x180>)
    74d4:	480d      	ldr	r0, [pc, #52]	; (750c <z_impl_k_mutex_unlock+0x154>)
    74d6:	23b9      	movs	r3, #185	; 0xb9
    74d8:	f002 f9dd 	bl	9896 <assert_print>
    74dc:	4912      	ldr	r1, [pc, #72]	; (7528 <z_impl_k_mutex_unlock+0x170>)
    74de:	4817      	ldr	r0, [pc, #92]	; (753c <z_impl_k_mutex_unlock+0x184>)
    74e0:	f002 f9d9 	bl	9896 <assert_print>
    74e4:	4811      	ldr	r0, [pc, #68]	; (752c <z_impl_k_mutex_unlock+0x174>)
    74e6:	21b9      	movs	r1, #185	; 0xb9
    74e8:	f002 f9ce 	bl	9888 <assert_post_action>
	__asm__ volatile(
    74ec:	f385 8811 	msr	BASEPRI, r5
    74f0:	f3bf 8f6f 	isb	sy
    74f4:	e7b1      	b.n	745a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    74f6:	f06f 0015 	mvn.w	r0, #21
    74fa:	e7b1      	b.n	7460 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    74fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7500:	e7ae      	b.n	7460 <z_impl_k_mutex_unlock+0xa8>
    7502:	bf00      	nop
    7504:	0000bd64 	.word	0x0000bd64
    7508:	0000be11 	.word	0x0000be11
    750c:	0000a8c6 	.word	0x0000a8c6
    7510:	0000be33 	.word	0x0000be33
    7514:	20004c04 	.word	0x20004c04
    7518:	0000be58 	.word	0x0000be58
    751c:	0000be6f 	.word	0x0000be6f
    7520:	0000be9a 	.word	0x0000be9a
    7524:	0000be9d 	.word	0x0000be9d
    7528:	20004c2c 	.word	0x20004c2c
    752c:	0000aa10 	.word	0x0000aa10
    7530:	0000aa69 	.word	0x0000aa69
    7534:	0000aa7e 	.word	0x0000aa7e
    7538:	0000aa3d 	.word	0x0000aa3d
    753c:	0000aa54 	.word	0x0000aa54

00007540 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7540:	b538      	push	{r3, r4, r5, lr}
    7542:	4604      	mov	r4, r0
	__asm__ volatile(
    7544:	f04f 0320 	mov.w	r3, #32
    7548:	f3ef 8511 	mrs	r5, BASEPRI
    754c:	f383 8812 	msr	BASEPRI_MAX, r3
    7550:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7554:	4814      	ldr	r0, [pc, #80]	; (75a8 <z_impl_k_sem_give+0x68>)
    7556:	f7ff fddd 	bl	7114 <z_spin_lock_valid>
    755a:	b968      	cbnz	r0, 7578 <z_impl_k_sem_give+0x38>
    755c:	4a13      	ldr	r2, [pc, #76]	; (75ac <z_impl_k_sem_give+0x6c>)
    755e:	4914      	ldr	r1, [pc, #80]	; (75b0 <z_impl_k_sem_give+0x70>)
    7560:	4814      	ldr	r0, [pc, #80]	; (75b4 <z_impl_k_sem_give+0x74>)
    7562:	238e      	movs	r3, #142	; 0x8e
    7564:	f002 f997 	bl	9896 <assert_print>
    7568:	490f      	ldr	r1, [pc, #60]	; (75a8 <z_impl_k_sem_give+0x68>)
    756a:	4813      	ldr	r0, [pc, #76]	; (75b8 <z_impl_k_sem_give+0x78>)
    756c:	f002 f993 	bl	9896 <assert_print>
    7570:	480e      	ldr	r0, [pc, #56]	; (75ac <z_impl_k_sem_give+0x6c>)
    7572:	218e      	movs	r1, #142	; 0x8e
    7574:	f002 f988 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7578:	480b      	ldr	r0, [pc, #44]	; (75a8 <z_impl_k_sem_give+0x68>)
    757a:	f7ff fde9 	bl	7150 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    757e:	4620      	mov	r0, r4
    7580:	f000 fec4 	bl	830c <z_unpend_first_thread>

	if (thread != NULL) {
    7584:	b148      	cbz	r0, 759a <z_impl_k_sem_give+0x5a>
    7586:	2200      	movs	r2, #0
    7588:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    758a:	f000 f99f 	bl	78cc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    758e:	4629      	mov	r1, r5
    7590:	4805      	ldr	r0, [pc, #20]	; (75a8 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7596:	f000 b9e1 	b.w	795c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    759a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    759e:	429a      	cmp	r2, r3
    75a0:	bf18      	it	ne
    75a2:	3301      	addne	r3, #1
    75a4:	60a3      	str	r3, [r4, #8]
}
    75a6:	e7f2      	b.n	758e <z_impl_k_sem_give+0x4e>
    75a8:	20004c30 	.word	0x20004c30
    75ac:	0000aa10 	.word	0x0000aa10
    75b0:	0000aa69 	.word	0x0000aa69
    75b4:	0000a8c6 	.word	0x0000a8c6
    75b8:	0000aa7e 	.word	0x0000aa7e

000075bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    75bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    75be:	4604      	mov	r4, r0
    75c0:	4617      	mov	r7, r2
    75c2:	461d      	mov	r5, r3
    75c4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    75c8:	b17b      	cbz	r3, 75ea <z_impl_k_sem_take+0x2e>
    75ca:	ea52 0305 	orrs.w	r3, r2, r5
    75ce:	d00c      	beq.n	75ea <z_impl_k_sem_take+0x2e>
    75d0:	4935      	ldr	r1, [pc, #212]	; (76a8 <z_impl_k_sem_take+0xec>)
    75d2:	4a36      	ldr	r2, [pc, #216]	; (76ac <z_impl_k_sem_take+0xf0>)
    75d4:	4836      	ldr	r0, [pc, #216]	; (76b0 <z_impl_k_sem_take+0xf4>)
    75d6:	2379      	movs	r3, #121	; 0x79
    75d8:	f002 f95d 	bl	9896 <assert_print>
    75dc:	4835      	ldr	r0, [pc, #212]	; (76b4 <z_impl_k_sem_take+0xf8>)
    75de:	f002 f95a 	bl	9896 <assert_print>
    75e2:	4832      	ldr	r0, [pc, #200]	; (76ac <z_impl_k_sem_take+0xf0>)
    75e4:	2179      	movs	r1, #121	; 0x79
    75e6:	f002 f94f 	bl	9888 <assert_post_action>
    75ea:	f04f 0320 	mov.w	r3, #32
    75ee:	f3ef 8611 	mrs	r6, BASEPRI
    75f2:	f383 8812 	msr	BASEPRI_MAX, r3
    75f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75fa:	482f      	ldr	r0, [pc, #188]	; (76b8 <z_impl_k_sem_take+0xfc>)
    75fc:	f7ff fd8a 	bl	7114 <z_spin_lock_valid>
    7600:	b968      	cbnz	r0, 761e <z_impl_k_sem_take+0x62>
    7602:	4a2e      	ldr	r2, [pc, #184]	; (76bc <z_impl_k_sem_take+0x100>)
    7604:	492e      	ldr	r1, [pc, #184]	; (76c0 <z_impl_k_sem_take+0x104>)
    7606:	482a      	ldr	r0, [pc, #168]	; (76b0 <z_impl_k_sem_take+0xf4>)
    7608:	238e      	movs	r3, #142	; 0x8e
    760a:	f002 f944 	bl	9896 <assert_print>
    760e:	492a      	ldr	r1, [pc, #168]	; (76b8 <z_impl_k_sem_take+0xfc>)
    7610:	482c      	ldr	r0, [pc, #176]	; (76c4 <z_impl_k_sem_take+0x108>)
    7612:	f002 f940 	bl	9896 <assert_print>
    7616:	4829      	ldr	r0, [pc, #164]	; (76bc <z_impl_k_sem_take+0x100>)
    7618:	218e      	movs	r1, #142	; 0x8e
    761a:	f002 f935 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    761e:	4826      	ldr	r0, [pc, #152]	; (76b8 <z_impl_k_sem_take+0xfc>)
    7620:	f7ff fd96 	bl	7150 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7624:	68a3      	ldr	r3, [r4, #8]
    7626:	b1d3      	cbz	r3, 765e <z_impl_k_sem_take+0xa2>
		sem->count--;
    7628:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    762a:	4823      	ldr	r0, [pc, #140]	; (76b8 <z_impl_k_sem_take+0xfc>)
    762c:	60a3      	str	r3, [r4, #8]
    762e:	f7ff fd7f 	bl	7130 <z_spin_unlock_valid>
    7632:	b968      	cbnz	r0, 7650 <z_impl_k_sem_take+0x94>
    7634:	4a21      	ldr	r2, [pc, #132]	; (76bc <z_impl_k_sem_take+0x100>)
    7636:	4924      	ldr	r1, [pc, #144]	; (76c8 <z_impl_k_sem_take+0x10c>)
    7638:	481d      	ldr	r0, [pc, #116]	; (76b0 <z_impl_k_sem_take+0xf4>)
    763a:	23b9      	movs	r3, #185	; 0xb9
    763c:	f002 f92b 	bl	9896 <assert_print>
    7640:	491d      	ldr	r1, [pc, #116]	; (76b8 <z_impl_k_sem_take+0xfc>)
    7642:	4822      	ldr	r0, [pc, #136]	; (76cc <z_impl_k_sem_take+0x110>)
    7644:	f002 f927 	bl	9896 <assert_print>
    7648:	481c      	ldr	r0, [pc, #112]	; (76bc <z_impl_k_sem_take+0x100>)
    764a:	21b9      	movs	r1, #185	; 0xb9
    764c:	f002 f91c 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7650:	f386 8811 	msr	BASEPRI, r6
    7654:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7658:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    765a:	b003      	add	sp, #12
    765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    765e:	ea57 0305 	orrs.w	r3, r7, r5
    7662:	d118      	bne.n	7696 <z_impl_k_sem_take+0xda>
    7664:	4814      	ldr	r0, [pc, #80]	; (76b8 <z_impl_k_sem_take+0xfc>)
    7666:	f7ff fd63 	bl	7130 <z_spin_unlock_valid>
    766a:	b968      	cbnz	r0, 7688 <z_impl_k_sem_take+0xcc>
    766c:	4a13      	ldr	r2, [pc, #76]	; (76bc <z_impl_k_sem_take+0x100>)
    766e:	4916      	ldr	r1, [pc, #88]	; (76c8 <z_impl_k_sem_take+0x10c>)
    7670:	480f      	ldr	r0, [pc, #60]	; (76b0 <z_impl_k_sem_take+0xf4>)
    7672:	23b9      	movs	r3, #185	; 0xb9
    7674:	f002 f90f 	bl	9896 <assert_print>
    7678:	490f      	ldr	r1, [pc, #60]	; (76b8 <z_impl_k_sem_take+0xfc>)
    767a:	4814      	ldr	r0, [pc, #80]	; (76cc <z_impl_k_sem_take+0x110>)
    767c:	f002 f90b 	bl	9896 <assert_print>
    7680:	480e      	ldr	r0, [pc, #56]	; (76bc <z_impl_k_sem_take+0x100>)
    7682:	21b9      	movs	r1, #185	; 0xb9
    7684:	f002 f900 	bl	9888 <assert_post_action>
    7688:	f386 8811 	msr	BASEPRI, r6
    768c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7690:	f06f 000f 	mvn.w	r0, #15
    7694:	e7e1      	b.n	765a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7696:	e9cd 7500 	strd	r7, r5, [sp]
    769a:	4622      	mov	r2, r4
    769c:	4631      	mov	r1, r6
    769e:	4806      	ldr	r0, [pc, #24]	; (76b8 <z_impl_k_sem_take+0xfc>)
    76a0:	f000 fc88 	bl	7fb4 <z_pend_curr>
	return ret;
    76a4:	e7d9      	b.n	765a <z_impl_k_sem_take+0x9e>
    76a6:	bf00      	nop
    76a8:	0000beee 	.word	0x0000beee
    76ac:	0000bece 	.word	0x0000bece
    76b0:	0000a8c6 	.word	0x0000a8c6
    76b4:	0000be9a 	.word	0x0000be9a
    76b8:	20004c30 	.word	0x20004c30
    76bc:	0000aa10 	.word	0x0000aa10
    76c0:	0000aa69 	.word	0x0000aa69
    76c4:	0000aa7e 	.word	0x0000aa7e
    76c8:	0000aa3d 	.word	0x0000aa3d
    76cc:	0000aa54 	.word	0x0000aa54

000076d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    76d0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    76d2:	4d07      	ldr	r5, [pc, #28]	; (76f0 <z_reset_time_slice+0x20>)
    76d4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    76d6:	b154      	cbz	r4, 76ee <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    76d8:	f7fe f9bc 	bl	5a54 <sys_clock_elapsed>
    76dc:	4b05      	ldr	r3, [pc, #20]	; (76f4 <z_reset_time_slice+0x24>)
    76de:	4404      	add	r4, r0
    76e0:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    76e2:	6828      	ldr	r0, [r5, #0]
    76e4:	2100      	movs	r1, #0
	}
}
    76e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    76ea:	f001 ba6b 	b.w	8bc4 <z_set_timeout_expiry>
}
    76ee:	bd38      	pop	{r3, r4, r5, pc}
    76f0:	20004c3c 	.word	0x20004c3c
    76f4:	20004c04 	.word	0x20004c04

000076f8 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    76f8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    76fa:	4d16      	ldr	r5, [pc, #88]	; (7754 <update_cache+0x5c>)
    76fc:	462b      	mov	r3, r5
    76fe:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7702:	429c      	cmp	r4, r3
    7704:	d000      	beq.n	7708 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7706:	b904      	cbnz	r4, 770a <update_cache+0x12>
    7708:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    770a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    770c:	b120      	cbz	r0, 7718 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    770e:	68ab      	ldr	r3, [r5, #8]
    7710:	42a3      	cmp	r3, r4
    7712:	d11b      	bne.n	774c <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7714:	4623      	mov	r3, r4
    7716:	e017      	b.n	7748 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    7718:	b963      	cbnz	r3, 7734 <update_cache+0x3c>
    771a:	490f      	ldr	r1, [pc, #60]	; (7758 <update_cache+0x60>)
    771c:	4a0f      	ldr	r2, [pc, #60]	; (775c <update_cache+0x64>)
    771e:	4810      	ldr	r0, [pc, #64]	; (7760 <update_cache+0x68>)
    7720:	2389      	movs	r3, #137	; 0x89
    7722:	f002 f8b8 	bl	9896 <assert_print>
    7726:	480f      	ldr	r0, [pc, #60]	; (7764 <update_cache+0x6c>)
    7728:	f002 f8b5 	bl	9896 <assert_print>
    772c:	480b      	ldr	r0, [pc, #44]	; (775c <update_cache+0x64>)
    772e:	2189      	movs	r1, #137	; 0x89
    7730:	f002 f8aa 	bl	9888 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7734:	68ab      	ldr	r3, [r5, #8]
    7736:	7b5a      	ldrb	r2, [r3, #13]
    7738:	06d2      	lsls	r2, r2, #27
    773a:	d1e8      	bne.n	770e <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    773c:	69a2      	ldr	r2, [r4, #24]
    773e:	2a00      	cmp	r2, #0
    7740:	d1e5      	bne.n	770e <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    7742:	89da      	ldrh	r2, [r3, #14]
    7744:	2a7f      	cmp	r2, #127	; 0x7f
    7746:	d9e2      	bls.n	770e <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    7748:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    774a:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    774c:	4620      	mov	r0, r4
    774e:	f7ff ffbf 	bl	76d0 <z_reset_time_slice>
    7752:	e7df      	b.n	7714 <update_cache+0x1c>
    7754:	20004c04 	.word	0x20004c04
    7758:	0000bf5e 	.word	0x0000bf5e
    775c:	0000bf3c 	.word	0x0000bf3c
    7760:	0000a8c6 	.word	0x0000a8c6
    7764:	0000be9a 	.word	0x0000be9a

00007768 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    7768:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    776a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    776e:	7b43      	ldrb	r3, [r0, #13]
    7770:	2a00      	cmp	r2, #0
{
    7772:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7774:	db38      	blt.n	77e8 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7776:	06da      	lsls	r2, r3, #27
    7778:	d136      	bne.n	77e8 <ready_thread+0x80>
	return node->next != NULL;
    777a:	6985      	ldr	r5, [r0, #24]
    777c:	2d00      	cmp	r5, #0
    777e:	d133      	bne.n	77e8 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    7780:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7784:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7786:	4b19      	ldr	r3, [pc, #100]	; (77ec <ready_thread+0x84>)
    7788:	4298      	cmp	r0, r3
    778a:	d109      	bne.n	77a0 <ready_thread+0x38>
    778c:	4918      	ldr	r1, [pc, #96]	; (77f0 <ready_thread+0x88>)
    778e:	4819      	ldr	r0, [pc, #100]	; (77f4 <ready_thread+0x8c>)
    7790:	4a19      	ldr	r2, [pc, #100]	; (77f8 <ready_thread+0x90>)
    7792:	23ba      	movs	r3, #186	; 0xba
    7794:	f002 f87f 	bl	9896 <assert_print>
    7798:	4817      	ldr	r0, [pc, #92]	; (77f8 <ready_thread+0x90>)
    779a:	21ba      	movs	r1, #186	; 0xba
    779c:	f002 f874 	bl	9888 <assert_post_action>
	return list->head == list;
    77a0:	4a16      	ldr	r2, [pc, #88]	; (77fc <ready_thread+0x94>)
    77a2:	4613      	mov	r3, r2
    77a4:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77a8:	4299      	cmp	r1, r3
    77aa:	bf18      	it	ne
    77ac:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    77ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    77b0:	b925      	cbnz	r5, 77bc <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    77b2:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    77b6:	600c      	str	r4, [r1, #0]
	list->tail = node;
    77b8:	6254      	str	r4, [r2, #36]	; 0x24
}
    77ba:	e00c      	b.n	77d6 <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    77bc:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    77c0:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    77c4:	42b0      	cmp	r0, r6
    77c6:	d00b      	beq.n	77e0 <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    77c8:	4286      	cmp	r6, r0
    77ca:	dd09      	ble.n	77e0 <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    77cc:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    77ce:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    77d2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    77d4:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    77d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    77da:	2000      	movs	r0, #0
    77dc:	f7ff bf8c 	b.w	76f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    77e0:	428d      	cmp	r5, r1
    77e2:	d0e6      	beq.n	77b2 <ready_thread+0x4a>
    77e4:	682d      	ldr	r5, [r5, #0]
    77e6:	e7e3      	b.n	77b0 <ready_thread+0x48>
}
    77e8:	bd70      	pop	{r4, r5, r6, pc}
    77ea:	bf00      	nop
    77ec:	200043e0 	.word	0x200043e0
    77f0:	0000bf85 	.word	0x0000bf85
    77f4:	0000a8c6 	.word	0x0000a8c6
    77f8:	0000bf3c 	.word	0x0000bf3c
    77fc:	20004c04 	.word	0x20004c04

00007800 <k_sched_time_slice_set>:
{
    7800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7802:	4604      	mov	r4, r0
    7804:	460d      	mov	r5, r1
	__asm__ volatile(
    7806:	f04f 0320 	mov.w	r3, #32
    780a:	f3ef 8711 	mrs	r7, BASEPRI
    780e:	f383 8812 	msr	BASEPRI_MAX, r3
    7812:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7816:	4823      	ldr	r0, [pc, #140]	; (78a4 <k_sched_time_slice_set+0xa4>)
    7818:	f7ff fc7c 	bl	7114 <z_spin_lock_valid>
    781c:	b968      	cbnz	r0, 783a <k_sched_time_slice_set+0x3a>
    781e:	4a22      	ldr	r2, [pc, #136]	; (78a8 <k_sched_time_slice_set+0xa8>)
    7820:	4922      	ldr	r1, [pc, #136]	; (78ac <k_sched_time_slice_set+0xac>)
    7822:	4823      	ldr	r0, [pc, #140]	; (78b0 <k_sched_time_slice_set+0xb0>)
    7824:	238e      	movs	r3, #142	; 0x8e
    7826:	f002 f836 	bl	9896 <assert_print>
    782a:	491e      	ldr	r1, [pc, #120]	; (78a4 <k_sched_time_slice_set+0xa4>)
    782c:	4821      	ldr	r0, [pc, #132]	; (78b4 <k_sched_time_slice_set+0xb4>)
    782e:	f002 f832 	bl	9896 <assert_print>
    7832:	481d      	ldr	r0, [pc, #116]	; (78a8 <k_sched_time_slice_set+0xa8>)
    7834:	218e      	movs	r1, #142	; 0x8e
    7836:	f002 f827 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    783a:	481a      	ldr	r0, [pc, #104]	; (78a4 <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    783c:	2600      	movs	r6, #0
    783e:	f7ff fc87 	bl	7150 <z_spin_lock_set_owner>
    7842:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    7846:	f240 30e7 	movw	r0, #999	; 0x3e7
    784a:	4631      	mov	r1, r6
    784c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7850:	2300      	movs	r3, #0
    7852:	fbe4 010c 	umlal	r0, r1, r4, ip
    7856:	f7f9 f871 	bl	93c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    785a:	42b4      	cmp	r4, r6
    785c:	dd02      	ble.n	7864 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    785e:	2802      	cmp	r0, #2
    7860:	bfb8      	it	lt
    7862:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7864:	4a14      	ldr	r2, [pc, #80]	; (78b8 <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    7866:	4b15      	ldr	r3, [pc, #84]	; (78bc <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7868:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    786a:	4a15      	ldr	r2, [pc, #84]	; (78c0 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    786c:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    786e:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    7870:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    7872:	f7ff ff2d 	bl	76d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7876:	480b      	ldr	r0, [pc, #44]	; (78a4 <k_sched_time_slice_set+0xa4>)
    7878:	f7ff fc5a 	bl	7130 <z_spin_unlock_valid>
    787c:	b968      	cbnz	r0, 789a <k_sched_time_slice_set+0x9a>
    787e:	4a0a      	ldr	r2, [pc, #40]	; (78a8 <k_sched_time_slice_set+0xa8>)
    7880:	4910      	ldr	r1, [pc, #64]	; (78c4 <k_sched_time_slice_set+0xc4>)
    7882:	480b      	ldr	r0, [pc, #44]	; (78b0 <k_sched_time_slice_set+0xb0>)
    7884:	23b9      	movs	r3, #185	; 0xb9
    7886:	f002 f806 	bl	9896 <assert_print>
    788a:	4906      	ldr	r1, [pc, #24]	; (78a4 <k_sched_time_slice_set+0xa4>)
    788c:	480e      	ldr	r0, [pc, #56]	; (78c8 <k_sched_time_slice_set+0xc8>)
    788e:	f002 f802 	bl	9896 <assert_print>
    7892:	4805      	ldr	r0, [pc, #20]	; (78a8 <k_sched_time_slice_set+0xa8>)
    7894:	21b9      	movs	r1, #185	; 0xb9
    7896:	f001 fff7 	bl	9888 <assert_post_action>
	__asm__ volatile(
    789a:	f387 8811 	msr	BASEPRI, r7
    789e:	f3bf 8f6f 	isb	sy
}
    78a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78a4:	20004c40 	.word	0x20004c40
    78a8:	0000aa10 	.word	0x0000aa10
    78ac:	0000aa69 	.word	0x0000aa69
    78b0:	0000a8c6 	.word	0x0000a8c6
    78b4:	0000aa7e 	.word	0x0000aa7e
    78b8:	20004c3c 	.word	0x20004c3c
    78bc:	20004c04 	.word	0x20004c04
    78c0:	20004c38 	.word	0x20004c38
    78c4:	0000aa3d 	.word	0x0000aa3d
    78c8:	0000aa54 	.word	0x0000aa54

000078cc <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    78cc:	b538      	push	{r3, r4, r5, lr}
    78ce:	4604      	mov	r4, r0
	__asm__ volatile(
    78d0:	f04f 0320 	mov.w	r3, #32
    78d4:	f3ef 8511 	mrs	r5, BASEPRI
    78d8:	f383 8812 	msr	BASEPRI_MAX, r3
    78dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78e0:	4817      	ldr	r0, [pc, #92]	; (7940 <z_ready_thread+0x74>)
    78e2:	f7ff fc17 	bl	7114 <z_spin_lock_valid>
    78e6:	b968      	cbnz	r0, 7904 <z_ready_thread+0x38>
    78e8:	4a16      	ldr	r2, [pc, #88]	; (7944 <z_ready_thread+0x78>)
    78ea:	4917      	ldr	r1, [pc, #92]	; (7948 <z_ready_thread+0x7c>)
    78ec:	4817      	ldr	r0, [pc, #92]	; (794c <z_ready_thread+0x80>)
    78ee:	238e      	movs	r3, #142	; 0x8e
    78f0:	f001 ffd1 	bl	9896 <assert_print>
    78f4:	4912      	ldr	r1, [pc, #72]	; (7940 <z_ready_thread+0x74>)
    78f6:	4816      	ldr	r0, [pc, #88]	; (7950 <z_ready_thread+0x84>)
    78f8:	f001 ffcd 	bl	9896 <assert_print>
    78fc:	4811      	ldr	r0, [pc, #68]	; (7944 <z_ready_thread+0x78>)
    78fe:	218e      	movs	r1, #142	; 0x8e
    7900:	f001 ffc2 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7904:	480e      	ldr	r0, [pc, #56]	; (7940 <z_ready_thread+0x74>)
    7906:	f7ff fc23 	bl	7150 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    790a:	4620      	mov	r0, r4
    790c:	f7ff ff2c 	bl	7768 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7910:	480b      	ldr	r0, [pc, #44]	; (7940 <z_ready_thread+0x74>)
    7912:	f7ff fc0d 	bl	7130 <z_spin_unlock_valid>
    7916:	b968      	cbnz	r0, 7934 <z_ready_thread+0x68>
    7918:	4a0a      	ldr	r2, [pc, #40]	; (7944 <z_ready_thread+0x78>)
    791a:	490e      	ldr	r1, [pc, #56]	; (7954 <z_ready_thread+0x88>)
    791c:	480b      	ldr	r0, [pc, #44]	; (794c <z_ready_thread+0x80>)
    791e:	23b9      	movs	r3, #185	; 0xb9
    7920:	f001 ffb9 	bl	9896 <assert_print>
    7924:	4906      	ldr	r1, [pc, #24]	; (7940 <z_ready_thread+0x74>)
    7926:	480c      	ldr	r0, [pc, #48]	; (7958 <z_ready_thread+0x8c>)
    7928:	f001 ffb5 	bl	9896 <assert_print>
    792c:	4805      	ldr	r0, [pc, #20]	; (7944 <z_ready_thread+0x78>)
    792e:	21b9      	movs	r1, #185	; 0xb9
    7930:	f001 ffaa 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7934:	f385 8811 	msr	BASEPRI, r5
    7938:	f3bf 8f6f 	isb	sy
		}
	}
}
    793c:	bd38      	pop	{r3, r4, r5, pc}
    793e:	bf00      	nop
    7940:	20004c40 	.word	0x20004c40
    7944:	0000aa10 	.word	0x0000aa10
    7948:	0000aa69 	.word	0x0000aa69
    794c:	0000a8c6 	.word	0x0000a8c6
    7950:	0000aa7e 	.word	0x0000aa7e
    7954:	0000aa3d 	.word	0x0000aa3d
    7958:	0000aa54 	.word	0x0000aa54

0000795c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    795c:	b538      	push	{r3, r4, r5, lr}
    795e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7960:	460d      	mov	r5, r1
    7962:	b9e9      	cbnz	r1, 79a0 <z_reschedule+0x44>
    7964:	f3ef 8305 	mrs	r3, IPSR
    7968:	b9d3      	cbnz	r3, 79a0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    796a:	4b19      	ldr	r3, [pc, #100]	; (79d0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    796c:	69da      	ldr	r2, [r3, #28]
    796e:	689b      	ldr	r3, [r3, #8]
    7970:	429a      	cmp	r2, r3
    7972:	d015      	beq.n	79a0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7974:	f7ff fbdc 	bl	7130 <z_spin_unlock_valid>
    7978:	b968      	cbnz	r0, 7996 <z_reschedule+0x3a>
    797a:	4a16      	ldr	r2, [pc, #88]	; (79d4 <z_reschedule+0x78>)
    797c:	4916      	ldr	r1, [pc, #88]	; (79d8 <z_reschedule+0x7c>)
    797e:	4817      	ldr	r0, [pc, #92]	; (79dc <z_reschedule+0x80>)
    7980:	23d0      	movs	r3, #208	; 0xd0
    7982:	f001 ff88 	bl	9896 <assert_print>
    7986:	4816      	ldr	r0, [pc, #88]	; (79e0 <z_reschedule+0x84>)
    7988:	4621      	mov	r1, r4
    798a:	f001 ff84 	bl	9896 <assert_print>
    798e:	4811      	ldr	r0, [pc, #68]	; (79d4 <z_reschedule+0x78>)
    7990:	21d0      	movs	r1, #208	; 0xd0
    7992:	f001 ff79 	bl	9888 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    799a:	2000      	movs	r0, #0
    799c:	f7fc ba16 	b.w	3dcc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    79a0:	4620      	mov	r0, r4
    79a2:	f7ff fbc5 	bl	7130 <z_spin_unlock_valid>
    79a6:	b968      	cbnz	r0, 79c4 <z_reschedule+0x68>
    79a8:	4a0a      	ldr	r2, [pc, #40]	; (79d4 <z_reschedule+0x78>)
    79aa:	490b      	ldr	r1, [pc, #44]	; (79d8 <z_reschedule+0x7c>)
    79ac:	480b      	ldr	r0, [pc, #44]	; (79dc <z_reschedule+0x80>)
    79ae:	23b9      	movs	r3, #185	; 0xb9
    79b0:	f001 ff71 	bl	9896 <assert_print>
    79b4:	480a      	ldr	r0, [pc, #40]	; (79e0 <z_reschedule+0x84>)
    79b6:	4621      	mov	r1, r4
    79b8:	f001 ff6d 	bl	9896 <assert_print>
    79bc:	4805      	ldr	r0, [pc, #20]	; (79d4 <z_reschedule+0x78>)
    79be:	21b9      	movs	r1, #185	; 0xb9
    79c0:	f001 ff62 	bl	9888 <assert_post_action>
    79c4:	f385 8811 	msr	BASEPRI, r5
    79c8:	f3bf 8f6f 	isb	sy
    79cc:	bd38      	pop	{r3, r4, r5, pc}
    79ce:	bf00      	nop
    79d0:	20004c04 	.word	0x20004c04
    79d4:	0000aa10 	.word	0x0000aa10
    79d8:	0000aa3d 	.word	0x0000aa3d
    79dc:	0000a8c6 	.word	0x0000a8c6
    79e0:	0000aa54 	.word	0x0000aa54

000079e4 <z_sched_start>:
{
    79e4:	b538      	push	{r3, r4, r5, lr}
    79e6:	4604      	mov	r4, r0
	__asm__ volatile(
    79e8:	f04f 0320 	mov.w	r3, #32
    79ec:	f3ef 8511 	mrs	r5, BASEPRI
    79f0:	f383 8812 	msr	BASEPRI_MAX, r3
    79f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79f8:	481d      	ldr	r0, [pc, #116]	; (7a70 <z_sched_start+0x8c>)
    79fa:	f7ff fb8b 	bl	7114 <z_spin_lock_valid>
    79fe:	b968      	cbnz	r0, 7a1c <z_sched_start+0x38>
    7a00:	4a1c      	ldr	r2, [pc, #112]	; (7a74 <z_sched_start+0x90>)
    7a02:	491d      	ldr	r1, [pc, #116]	; (7a78 <z_sched_start+0x94>)
    7a04:	481d      	ldr	r0, [pc, #116]	; (7a7c <z_sched_start+0x98>)
    7a06:	238e      	movs	r3, #142	; 0x8e
    7a08:	f001 ff45 	bl	9896 <assert_print>
    7a0c:	4918      	ldr	r1, [pc, #96]	; (7a70 <z_sched_start+0x8c>)
    7a0e:	481c      	ldr	r0, [pc, #112]	; (7a80 <z_sched_start+0x9c>)
    7a10:	f001 ff41 	bl	9896 <assert_print>
    7a14:	4817      	ldr	r0, [pc, #92]	; (7a74 <z_sched_start+0x90>)
    7a16:	218e      	movs	r1, #142	; 0x8e
    7a18:	f001 ff36 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a1c:	4814      	ldr	r0, [pc, #80]	; (7a70 <z_sched_start+0x8c>)
    7a1e:	f7ff fb97 	bl	7150 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    7a22:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    7a24:	075a      	lsls	r2, r3, #29
    7a26:	d416      	bmi.n	7a56 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a28:	4811      	ldr	r0, [pc, #68]	; (7a70 <z_sched_start+0x8c>)
    7a2a:	f7ff fb81 	bl	7130 <z_spin_unlock_valid>
    7a2e:	b968      	cbnz	r0, 7a4c <z_sched_start+0x68>
    7a30:	4a10      	ldr	r2, [pc, #64]	; (7a74 <z_sched_start+0x90>)
    7a32:	4914      	ldr	r1, [pc, #80]	; (7a84 <z_sched_start+0xa0>)
    7a34:	4811      	ldr	r0, [pc, #68]	; (7a7c <z_sched_start+0x98>)
    7a36:	23b9      	movs	r3, #185	; 0xb9
    7a38:	f001 ff2d 	bl	9896 <assert_print>
    7a3c:	490c      	ldr	r1, [pc, #48]	; (7a70 <z_sched_start+0x8c>)
    7a3e:	4812      	ldr	r0, [pc, #72]	; (7a88 <z_sched_start+0xa4>)
    7a40:	f001 ff29 	bl	9896 <assert_print>
    7a44:	480b      	ldr	r0, [pc, #44]	; (7a74 <z_sched_start+0x90>)
    7a46:	21b9      	movs	r1, #185	; 0xb9
    7a48:	f001 ff1e 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7a4c:	f385 8811 	msr	BASEPRI, r5
    7a50:	f3bf 8f6f 	isb	sy
}
    7a54:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7a56:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    7a5a:	4620      	mov	r0, r4
    7a5c:	7363      	strb	r3, [r4, #13]
    7a5e:	f7ff fe83 	bl	7768 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7a62:	4629      	mov	r1, r5
    7a64:	4802      	ldr	r0, [pc, #8]	; (7a70 <z_sched_start+0x8c>)
}
    7a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    7a6a:	f7ff bf77 	b.w	795c <z_reschedule>
    7a6e:	bf00      	nop
    7a70:	20004c40 	.word	0x20004c40
    7a74:	0000aa10 	.word	0x0000aa10
    7a78:	0000aa69 	.word	0x0000aa69
    7a7c:	0000a8c6 	.word	0x0000a8c6
    7a80:	0000aa7e 	.word	0x0000aa7e
    7a84:	0000aa3d 	.word	0x0000aa3d
    7a88:	0000aa54 	.word	0x0000aa54

00007a8c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7a8c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7a8e:	f04f 0320 	mov.w	r3, #32
    7a92:	f3ef 8511 	mrs	r5, BASEPRI
    7a96:	f383 8812 	msr	BASEPRI_MAX, r3
    7a9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a9e:	4829      	ldr	r0, [pc, #164]	; (7b44 <k_sched_lock+0xb8>)
    7aa0:	f7ff fb38 	bl	7114 <z_spin_lock_valid>
    7aa4:	b968      	cbnz	r0, 7ac2 <k_sched_lock+0x36>
    7aa6:	4a28      	ldr	r2, [pc, #160]	; (7b48 <k_sched_lock+0xbc>)
    7aa8:	4928      	ldr	r1, [pc, #160]	; (7b4c <k_sched_lock+0xc0>)
    7aaa:	4829      	ldr	r0, [pc, #164]	; (7b50 <k_sched_lock+0xc4>)
    7aac:	238e      	movs	r3, #142	; 0x8e
    7aae:	f001 fef2 	bl	9896 <assert_print>
    7ab2:	4924      	ldr	r1, [pc, #144]	; (7b44 <k_sched_lock+0xb8>)
    7ab4:	4827      	ldr	r0, [pc, #156]	; (7b54 <k_sched_lock+0xc8>)
    7ab6:	f001 feee 	bl	9896 <assert_print>
    7aba:	4823      	ldr	r0, [pc, #140]	; (7b48 <k_sched_lock+0xbc>)
    7abc:	218e      	movs	r1, #142	; 0x8e
    7abe:	f001 fee3 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7ac2:	4820      	ldr	r0, [pc, #128]	; (7b44 <k_sched_lock+0xb8>)
    7ac4:	f7ff fb44 	bl	7150 <z_spin_lock_set_owner>
    7ac8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7acc:	b163      	cbz	r3, 7ae8 <k_sched_lock+0x5c>
    7ace:	4922      	ldr	r1, [pc, #136]	; (7b58 <k_sched_lock+0xcc>)
    7ad0:	4a22      	ldr	r2, [pc, #136]	; (7b5c <k_sched_lock+0xd0>)
    7ad2:	481f      	ldr	r0, [pc, #124]	; (7b50 <k_sched_lock+0xc4>)
    7ad4:	23fd      	movs	r3, #253	; 0xfd
    7ad6:	f001 fede 	bl	9896 <assert_print>
    7ada:	4821      	ldr	r0, [pc, #132]	; (7b60 <k_sched_lock+0xd4>)
    7adc:	f001 fedb 	bl	9896 <assert_print>
    7ae0:	481e      	ldr	r0, [pc, #120]	; (7b5c <k_sched_lock+0xd0>)
    7ae2:	21fd      	movs	r1, #253	; 0xfd
    7ae4:	f001 fed0 	bl	9888 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7ae8:	4c1e      	ldr	r4, [pc, #120]	; (7b64 <k_sched_lock+0xd8>)
    7aea:	68a3      	ldr	r3, [r4, #8]
    7aec:	7bdb      	ldrb	r3, [r3, #15]
    7aee:	2b01      	cmp	r3, #1
    7af0:	d10c      	bne.n	7b0c <k_sched_lock+0x80>
    7af2:	491d      	ldr	r1, [pc, #116]	; (7b68 <k_sched_lock+0xdc>)
    7af4:	4a19      	ldr	r2, [pc, #100]	; (7b5c <k_sched_lock+0xd0>)
    7af6:	4816      	ldr	r0, [pc, #88]	; (7b50 <k_sched_lock+0xc4>)
    7af8:	23fe      	movs	r3, #254	; 0xfe
    7afa:	f001 fecc 	bl	9896 <assert_print>
    7afe:	4818      	ldr	r0, [pc, #96]	; (7b60 <k_sched_lock+0xd4>)
    7b00:	f001 fec9 	bl	9896 <assert_print>
    7b04:	4815      	ldr	r0, [pc, #84]	; (7b5c <k_sched_lock+0xd0>)
    7b06:	21fe      	movs	r1, #254	; 0xfe
    7b08:	f001 febe 	bl	9888 <assert_post_action>
	--_current->base.sched_locked;
    7b0c:	68a2      	ldr	r2, [r4, #8]
    7b0e:	7bd3      	ldrb	r3, [r2, #15]
    7b10:	3b01      	subs	r3, #1
    7b12:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b14:	480b      	ldr	r0, [pc, #44]	; (7b44 <k_sched_lock+0xb8>)
    7b16:	f7ff fb0b 	bl	7130 <z_spin_unlock_valid>
    7b1a:	b968      	cbnz	r0, 7b38 <k_sched_lock+0xac>
    7b1c:	4a0a      	ldr	r2, [pc, #40]	; (7b48 <k_sched_lock+0xbc>)
    7b1e:	4913      	ldr	r1, [pc, #76]	; (7b6c <k_sched_lock+0xe0>)
    7b20:	480b      	ldr	r0, [pc, #44]	; (7b50 <k_sched_lock+0xc4>)
    7b22:	23b9      	movs	r3, #185	; 0xb9
    7b24:	f001 feb7 	bl	9896 <assert_print>
    7b28:	4906      	ldr	r1, [pc, #24]	; (7b44 <k_sched_lock+0xb8>)
    7b2a:	4811      	ldr	r0, [pc, #68]	; (7b70 <k_sched_lock+0xe4>)
    7b2c:	f001 feb3 	bl	9896 <assert_print>
    7b30:	4805      	ldr	r0, [pc, #20]	; (7b48 <k_sched_lock+0xbc>)
    7b32:	21b9      	movs	r1, #185	; 0xb9
    7b34:	f001 fea8 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7b38:	f385 8811 	msr	BASEPRI, r5
    7b3c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7b40:	bd38      	pop	{r3, r4, r5, pc}
    7b42:	bf00      	nop
    7b44:	20004c40 	.word	0x20004c40
    7b48:	0000aa10 	.word	0x0000aa10
    7b4c:	0000aa69 	.word	0x0000aa69
    7b50:	0000a8c6 	.word	0x0000a8c6
    7b54:	0000aa7e 	.word	0x0000aa7e
    7b58:	0000bd64 	.word	0x0000bd64
    7b5c:	0000be6f 	.word	0x0000be6f
    7b60:	0000be9a 	.word	0x0000be9a
    7b64:	20004c04 	.word	0x20004c04
    7b68:	0000be9d 	.word	0x0000be9d
    7b6c:	0000aa3d 	.word	0x0000aa3d
    7b70:	0000aa54 	.word	0x0000aa54

00007b74 <k_sched_unlock>:

void k_sched_unlock(void)
{
    7b74:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7b76:	f04f 0320 	mov.w	r3, #32
    7b7a:	f3ef 8511 	mrs	r5, BASEPRI
    7b7e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b86:	482d      	ldr	r0, [pc, #180]	; (7c3c <k_sched_unlock+0xc8>)
    7b88:	f7ff fac4 	bl	7114 <z_spin_lock_valid>
    7b8c:	b968      	cbnz	r0, 7baa <k_sched_unlock+0x36>
    7b8e:	4a2c      	ldr	r2, [pc, #176]	; (7c40 <k_sched_unlock+0xcc>)
    7b90:	492c      	ldr	r1, [pc, #176]	; (7c44 <k_sched_unlock+0xd0>)
    7b92:	482d      	ldr	r0, [pc, #180]	; (7c48 <k_sched_unlock+0xd4>)
    7b94:	238e      	movs	r3, #142	; 0x8e
    7b96:	f001 fe7e 	bl	9896 <assert_print>
    7b9a:	4928      	ldr	r1, [pc, #160]	; (7c3c <k_sched_unlock+0xc8>)
    7b9c:	482b      	ldr	r0, [pc, #172]	; (7c4c <k_sched_unlock+0xd8>)
    7b9e:	f001 fe7a 	bl	9896 <assert_print>
    7ba2:	4827      	ldr	r0, [pc, #156]	; (7c40 <k_sched_unlock+0xcc>)
    7ba4:	218e      	movs	r1, #142	; 0x8e
    7ba6:	f001 fe6f 	bl	9888 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    7baa:	4c29      	ldr	r4, [pc, #164]	; (7c50 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7bac:	4823      	ldr	r0, [pc, #140]	; (7c3c <k_sched_unlock+0xc8>)
    7bae:	f7ff facf 	bl	7150 <z_spin_lock_set_owner>
    7bb2:	68a3      	ldr	r3, [r4, #8]
    7bb4:	7bdb      	ldrb	r3, [r3, #15]
    7bb6:	b973      	cbnz	r3, 7bd6 <k_sched_unlock+0x62>
    7bb8:	4926      	ldr	r1, [pc, #152]	; (7c54 <k_sched_unlock+0xe0>)
    7bba:	4a27      	ldr	r2, [pc, #156]	; (7c58 <k_sched_unlock+0xe4>)
    7bbc:	4822      	ldr	r0, [pc, #136]	; (7c48 <k_sched_unlock+0xd4>)
    7bbe:	f240 33bb 	movw	r3, #955	; 0x3bb
    7bc2:	f001 fe68 	bl	9896 <assert_print>
    7bc6:	4825      	ldr	r0, [pc, #148]	; (7c5c <k_sched_unlock+0xe8>)
    7bc8:	f001 fe65 	bl	9896 <assert_print>
    7bcc:	4822      	ldr	r0, [pc, #136]	; (7c58 <k_sched_unlock+0xe4>)
    7bce:	f240 31bb 	movw	r1, #955	; 0x3bb
    7bd2:	f001 fe59 	bl	9888 <assert_post_action>
    7bd6:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7bda:	b173      	cbz	r3, 7bfa <k_sched_unlock+0x86>
    7bdc:	4920      	ldr	r1, [pc, #128]	; (7c60 <k_sched_unlock+0xec>)
    7bde:	4a1e      	ldr	r2, [pc, #120]	; (7c58 <k_sched_unlock+0xe4>)
    7be0:	4819      	ldr	r0, [pc, #100]	; (7c48 <k_sched_unlock+0xd4>)
    7be2:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    7be6:	f001 fe56 	bl	9896 <assert_print>
    7bea:	481c      	ldr	r0, [pc, #112]	; (7c5c <k_sched_unlock+0xe8>)
    7bec:	f001 fe53 	bl	9896 <assert_print>
    7bf0:	4819      	ldr	r0, [pc, #100]	; (7c58 <k_sched_unlock+0xe4>)
    7bf2:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7bf6:	f001 fe47 	bl	9888 <assert_post_action>

		++_current->base.sched_locked;
    7bfa:	68a2      	ldr	r2, [r4, #8]
    7bfc:	7bd3      	ldrb	r3, [r2, #15]
    7bfe:	3301      	adds	r3, #1
		update_cache(0);
    7c00:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7c02:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7c04:	f7ff fd78 	bl	76f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c08:	480c      	ldr	r0, [pc, #48]	; (7c3c <k_sched_unlock+0xc8>)
    7c0a:	f7ff fa91 	bl	7130 <z_spin_unlock_valid>
    7c0e:	b968      	cbnz	r0, 7c2c <k_sched_unlock+0xb8>
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <k_sched_unlock+0xcc>)
    7c12:	4914      	ldr	r1, [pc, #80]	; (7c64 <k_sched_unlock+0xf0>)
    7c14:	480c      	ldr	r0, [pc, #48]	; (7c48 <k_sched_unlock+0xd4>)
    7c16:	23b9      	movs	r3, #185	; 0xb9
    7c18:	f001 fe3d 	bl	9896 <assert_print>
    7c1c:	4907      	ldr	r1, [pc, #28]	; (7c3c <k_sched_unlock+0xc8>)
    7c1e:	4812      	ldr	r0, [pc, #72]	; (7c68 <k_sched_unlock+0xf4>)
    7c20:	f001 fe39 	bl	9896 <assert_print>
    7c24:	4806      	ldr	r0, [pc, #24]	; (7c40 <k_sched_unlock+0xcc>)
    7c26:	21b9      	movs	r1, #185	; 0xb9
    7c28:	f001 fe2e 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7c2c:	f385 8811 	msr	BASEPRI, r5
    7c30:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    7c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7c38:	f002 b9fe 	b.w	a038 <z_reschedule_unlocked>
    7c3c:	20004c40 	.word	0x20004c40
    7c40:	0000aa10 	.word	0x0000aa10
    7c44:	0000aa69 	.word	0x0000aa69
    7c48:	0000a8c6 	.word	0x0000a8c6
    7c4c:	0000aa7e 	.word	0x0000aa7e
    7c50:	20004c04 	.word	0x20004c04
    7c54:	0000bfa6 	.word	0x0000bfa6
    7c58:	0000bf3c 	.word	0x0000bf3c
    7c5c:	0000be9a 	.word	0x0000be9a
    7c60:	0000bd64 	.word	0x0000bd64
    7c64:	0000aa3d 	.word	0x0000aa3d
    7c68:	0000aa54 	.word	0x0000aa54

00007c6c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7c6c:	4b0c      	ldr	r3, [pc, #48]	; (7ca0 <z_priq_dumb_remove+0x34>)
    7c6e:	4299      	cmp	r1, r3
{
    7c70:	b510      	push	{r4, lr}
    7c72:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7c74:	d10b      	bne.n	7c8e <z_priq_dumb_remove+0x22>
    7c76:	490b      	ldr	r1, [pc, #44]	; (7ca4 <z_priq_dumb_remove+0x38>)
    7c78:	480b      	ldr	r0, [pc, #44]	; (7ca8 <z_priq_dumb_remove+0x3c>)
    7c7a:	4a0c      	ldr	r2, [pc, #48]	; (7cac <z_priq_dumb_remove+0x40>)
    7c7c:	f240 433d 	movw	r3, #1085	; 0x43d
    7c80:	f001 fe09 	bl	9896 <assert_print>
    7c84:	4809      	ldr	r0, [pc, #36]	; (7cac <z_priq_dumb_remove+0x40>)
    7c86:	f240 413d 	movw	r1, #1085	; 0x43d
    7c8a:	f001 fdfd 	bl	9888 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    7c8e:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    7c92:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7c94:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7c96:	2300      	movs	r3, #0
	node->prev = NULL;
    7c98:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7c9c:	bd10      	pop	{r4, pc}
    7c9e:	bf00      	nop
    7ca0:	200043e0 	.word	0x200043e0
    7ca4:	0000bf85 	.word	0x0000bf85
    7ca8:	0000a8c6 	.word	0x0000a8c6
    7cac:	0000bf3c 	.word	0x0000bf3c

00007cb0 <move_thread_to_end_of_prio_q>:
{
    7cb0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7cb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7cb6:	7b43      	ldrb	r3, [r0, #13]
    7cb8:	2a00      	cmp	r2, #0
{
    7cba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7cbc:	da06      	bge.n	7ccc <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7cc2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7cc4:	4601      	mov	r1, r0
    7cc6:	481d      	ldr	r0, [pc, #116]	; (7d3c <move_thread_to_end_of_prio_q+0x8c>)
    7cc8:	f7ff ffd0 	bl	7c6c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7ccc:	7b63      	ldrb	r3, [r4, #13]
    7cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7cd2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7cd4:	4b1a      	ldr	r3, [pc, #104]	; (7d40 <move_thread_to_end_of_prio_q+0x90>)
    7cd6:	429c      	cmp	r4, r3
    7cd8:	d109      	bne.n	7cee <move_thread_to_end_of_prio_q+0x3e>
    7cda:	491a      	ldr	r1, [pc, #104]	; (7d44 <move_thread_to_end_of_prio_q+0x94>)
    7cdc:	481a      	ldr	r0, [pc, #104]	; (7d48 <move_thread_to_end_of_prio_q+0x98>)
    7cde:	4a1b      	ldr	r2, [pc, #108]	; (7d4c <move_thread_to_end_of_prio_q+0x9c>)
    7ce0:	23ba      	movs	r3, #186	; 0xba
    7ce2:	f001 fdd8 	bl	9896 <assert_print>
    7ce6:	4819      	ldr	r0, [pc, #100]	; (7d4c <move_thread_to_end_of_prio_q+0x9c>)
    7ce8:	21ba      	movs	r1, #186	; 0xba
    7cea:	f001 fdcd 	bl	9888 <assert_post_action>
	return list->head == list;
    7cee:	4a18      	ldr	r2, [pc, #96]	; (7d50 <move_thread_to_end_of_prio_q+0xa0>)
    7cf0:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    7cf2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    7cf4:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7cf8:	428b      	cmp	r3, r1
    7cfa:	bf08      	it	eq
    7cfc:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7cfe:	b923      	cbnz	r3, 7d0a <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    7d00:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    7d04:	6004      	str	r4, [r0, #0]
	list->tail = node;
    7d06:	6254      	str	r4, [r2, #36]	; 0x24
}
    7d08:	e00c      	b.n	7d24 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    7d0a:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7d0e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7d12:	42b5      	cmp	r5, r6
    7d14:	d00e      	beq.n	7d34 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7d16:	42ae      	cmp	r6, r5
    7d18:	dd0c      	ble.n	7d34 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    7d1a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7d1c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    7d20:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    7d22:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    7d24:	6890      	ldr	r0, [r2, #8]
    7d26:	1b03      	subs	r3, r0, r4
    7d28:	4258      	negs	r0, r3
}
    7d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7d2e:	4158      	adcs	r0, r3
    7d30:	f7ff bce2 	b.w	76f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7d34:	4298      	cmp	r0, r3
    7d36:	d0e3      	beq.n	7d00 <move_thread_to_end_of_prio_q+0x50>
    7d38:	681b      	ldr	r3, [r3, #0]
    7d3a:	e7e0      	b.n	7cfe <move_thread_to_end_of_prio_q+0x4e>
    7d3c:	20004c24 	.word	0x20004c24
    7d40:	200043e0 	.word	0x200043e0
    7d44:	0000bf85 	.word	0x0000bf85
    7d48:	0000a8c6 	.word	0x0000a8c6
    7d4c:	0000bf3c 	.word	0x0000bf3c
    7d50:	20004c04 	.word	0x20004c04

00007d54 <z_time_slice>:
{
    7d54:	b570      	push	{r4, r5, r6, lr}
    7d56:	4605      	mov	r5, r0
	__asm__ volatile(
    7d58:	f04f 0320 	mov.w	r3, #32
    7d5c:	f3ef 8611 	mrs	r6, BASEPRI
    7d60:	f383 8812 	msr	BASEPRI_MAX, r3
    7d64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d68:	482a      	ldr	r0, [pc, #168]	; (7e14 <z_time_slice+0xc0>)
    7d6a:	f7ff f9d3 	bl	7114 <z_spin_lock_valid>
    7d6e:	b968      	cbnz	r0, 7d8c <z_time_slice+0x38>
    7d70:	4a29      	ldr	r2, [pc, #164]	; (7e18 <z_time_slice+0xc4>)
    7d72:	492a      	ldr	r1, [pc, #168]	; (7e1c <z_time_slice+0xc8>)
    7d74:	482a      	ldr	r0, [pc, #168]	; (7e20 <z_time_slice+0xcc>)
    7d76:	238e      	movs	r3, #142	; 0x8e
    7d78:	f001 fd8d 	bl	9896 <assert_print>
    7d7c:	4925      	ldr	r1, [pc, #148]	; (7e14 <z_time_slice+0xc0>)
    7d7e:	4829      	ldr	r0, [pc, #164]	; (7e24 <z_time_slice+0xd0>)
    7d80:	f001 fd89 	bl	9896 <assert_print>
    7d84:	4824      	ldr	r0, [pc, #144]	; (7e18 <z_time_slice+0xc4>)
    7d86:	218e      	movs	r1, #142	; 0x8e
    7d88:	f001 fd7e 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d8c:	4821      	ldr	r0, [pc, #132]	; (7e14 <z_time_slice+0xc0>)
    7d8e:	f7ff f9df 	bl	7150 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    7d92:	4b25      	ldr	r3, [pc, #148]	; (7e28 <z_time_slice+0xd4>)
    7d94:	4a25      	ldr	r2, [pc, #148]	; (7e2c <z_time_slice+0xd8>)
    7d96:	689c      	ldr	r4, [r3, #8]
    7d98:	6811      	ldr	r1, [r2, #0]
    7d9a:	428c      	cmp	r4, r1
    7d9c:	d119      	bne.n	7dd2 <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    7d9e:	4620      	mov	r0, r4
    7da0:	f7ff fc96 	bl	76d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7da4:	481b      	ldr	r0, [pc, #108]	; (7e14 <z_time_slice+0xc0>)
    7da6:	f7ff f9c3 	bl	7130 <z_spin_unlock_valid>
    7daa:	b968      	cbnz	r0, 7dc8 <z_time_slice+0x74>
    7dac:	4a1a      	ldr	r2, [pc, #104]	; (7e18 <z_time_slice+0xc4>)
    7dae:	4920      	ldr	r1, [pc, #128]	; (7e30 <z_time_slice+0xdc>)
    7db0:	481b      	ldr	r0, [pc, #108]	; (7e20 <z_time_slice+0xcc>)
    7db2:	23b9      	movs	r3, #185	; 0xb9
    7db4:	f001 fd6f 	bl	9896 <assert_print>
    7db8:	4916      	ldr	r1, [pc, #88]	; (7e14 <z_time_slice+0xc0>)
    7dba:	481e      	ldr	r0, [pc, #120]	; (7e34 <z_time_slice+0xe0>)
    7dbc:	f001 fd6b 	bl	9896 <assert_print>
    7dc0:	4815      	ldr	r0, [pc, #84]	; (7e18 <z_time_slice+0xc4>)
    7dc2:	21b9      	movs	r1, #185	; 0xb9
    7dc4:	f001 fd60 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7dc8:	f386 8811 	msr	BASEPRI, r6
    7dcc:	f3bf 8f6f 	isb	sy
}
    7dd0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    7dd2:	2100      	movs	r1, #0
    7dd4:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    7dd6:	4a18      	ldr	r2, [pc, #96]	; (7e38 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    7dd8:	6812      	ldr	r2, [r2, #0]
    7dda:	b1c2      	cbz	r2, 7e0e <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    7ddc:	89e2      	ldrh	r2, [r4, #14]
    7dde:	2a7f      	cmp	r2, #127	; 0x7f
    7de0:	d815      	bhi.n	7e0e <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    7de2:	7b62      	ldrb	r2, [r4, #13]
    7de4:	06d2      	lsls	r2, r2, #27
    7de6:	d112      	bne.n	7e0e <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7de8:	4a14      	ldr	r2, [pc, #80]	; (7e3c <z_time_slice+0xe8>)
    7dea:	f994 100e 	ldrsb.w	r1, [r4, #14]
    7dee:	6812      	ldr	r2, [r2, #0]
    7df0:	4291      	cmp	r1, r2
    7df2:	db0c      	blt.n	7e0e <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    7df4:	4a12      	ldr	r2, [pc, #72]	; (7e40 <z_time_slice+0xec>)
    7df6:	4294      	cmp	r4, r2
    7df8:	d009      	beq.n	7e0e <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    7dfa:	691a      	ldr	r2, [r3, #16]
    7dfc:	42aa      	cmp	r2, r5
    7dfe:	dc03      	bgt.n	7e08 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    7e00:	4620      	mov	r0, r4
    7e02:	f7ff ff55 	bl	7cb0 <move_thread_to_end_of_prio_q>
    7e06:	e7ca      	b.n	7d9e <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    7e08:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    7e0a:	611a      	str	r2, [r3, #16]
    7e0c:	e7ca      	b.n	7da4 <z_time_slice+0x50>
    7e0e:	2200      	movs	r2, #0
    7e10:	e7fb      	b.n	7e0a <z_time_slice+0xb6>
    7e12:	bf00      	nop
    7e14:	20004c40 	.word	0x20004c40
    7e18:	0000aa10 	.word	0x0000aa10
    7e1c:	0000aa69 	.word	0x0000aa69
    7e20:	0000a8c6 	.word	0x0000a8c6
    7e24:	0000aa7e 	.word	0x0000aa7e
    7e28:	20004c04 	.word	0x20004c04
    7e2c:	20004c34 	.word	0x20004c34
    7e30:	0000aa3d 	.word	0x0000aa3d
    7e34:	0000aa54 	.word	0x0000aa54
    7e38:	20004c3c 	.word	0x20004c3c
    7e3c:	20004c38 	.word	0x20004c38
    7e40:	200043e0 	.word	0x200043e0

00007e44 <unready_thread>:
{
    7e44:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    7e46:	f990 200d 	ldrsb.w	r2, [r0, #13]
    7e4a:	7b43      	ldrb	r3, [r0, #13]
    7e4c:	2a00      	cmp	r2, #0
{
    7e4e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7e50:	da06      	bge.n	7e60 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e56:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7e58:	4601      	mov	r1, r0
    7e5a:	4806      	ldr	r0, [pc, #24]	; (7e74 <unready_thread+0x30>)
    7e5c:	f7ff ff06 	bl	7c6c <z_priq_dumb_remove>
	update_cache(thread == _current);
    7e60:	4b05      	ldr	r3, [pc, #20]	; (7e78 <unready_thread+0x34>)
    7e62:	6898      	ldr	r0, [r3, #8]
    7e64:	1b03      	subs	r3, r0, r4
    7e66:	4258      	negs	r0, r3
}
    7e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7e6c:	4158      	adcs	r0, r3
    7e6e:	f7ff bc43 	b.w	76f8 <update_cache>
    7e72:	bf00      	nop
    7e74:	20004c24 	.word	0x20004c24
    7e78:	20004c04 	.word	0x20004c04

00007e7c <add_to_waitq_locked>:
{
    7e7c:	b538      	push	{r3, r4, r5, lr}
    7e7e:	4604      	mov	r4, r0
    7e80:	460d      	mov	r5, r1
	unready_thread(thread);
    7e82:	f7ff ffdf 	bl	7e44 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7e86:	7b63      	ldrb	r3, [r4, #13]
    7e88:	f043 0302 	orr.w	r3, r3, #2
    7e8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7e8e:	b34d      	cbz	r5, 7ee4 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e90:	4b15      	ldr	r3, [pc, #84]	; (7ee8 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    7e92:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e94:	429c      	cmp	r4, r3
    7e96:	d109      	bne.n	7eac <add_to_waitq_locked+0x30>
    7e98:	4914      	ldr	r1, [pc, #80]	; (7eec <add_to_waitq_locked+0x70>)
    7e9a:	4815      	ldr	r0, [pc, #84]	; (7ef0 <add_to_waitq_locked+0x74>)
    7e9c:	4a15      	ldr	r2, [pc, #84]	; (7ef4 <add_to_waitq_locked+0x78>)
    7e9e:	23ba      	movs	r3, #186	; 0xba
    7ea0:	f001 fcf9 	bl	9896 <assert_print>
    7ea4:	4813      	ldr	r0, [pc, #76]	; (7ef4 <add_to_waitq_locked+0x78>)
    7ea6:	21ba      	movs	r1, #186	; 0xba
    7ea8:	f001 fcee 	bl	9888 <assert_post_action>
	return list->head == list;
    7eac:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7eae:	429d      	cmp	r5, r3
    7eb0:	d109      	bne.n	7ec6 <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    7eb2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7eb4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7eb8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7eba:	606c      	str	r4, [r5, #4]
}
    7ebc:	e012      	b.n	7ee4 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    7ebe:	686a      	ldr	r2, [r5, #4]
    7ec0:	4293      	cmp	r3, r2
    7ec2:	d0f6      	beq.n	7eb2 <add_to_waitq_locked+0x36>
    7ec4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d0f3      	beq.n	7eb2 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    7eca:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7ece:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7ed2:	428a      	cmp	r2, r1
    7ed4:	d0f3      	beq.n	7ebe <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ed6:	4291      	cmp	r1, r2
    7ed8:	ddf1      	ble.n	7ebe <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    7eda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7edc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7ee0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7ee2:	605c      	str	r4, [r3, #4]
}
    7ee4:	bd38      	pop	{r3, r4, r5, pc}
    7ee6:	bf00      	nop
    7ee8:	200043e0 	.word	0x200043e0
    7eec:	0000bf85 	.word	0x0000bf85
    7ef0:	0000a8c6 	.word	0x0000a8c6
    7ef4:	0000bf3c 	.word	0x0000bf3c

00007ef8 <pend>:
{
    7ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7efc:	4604      	mov	r4, r0
    7efe:	4688      	mov	r8, r1
    7f00:	4616      	mov	r6, r2
    7f02:	461d      	mov	r5, r3
	__asm__ volatile(
    7f04:	f04f 0320 	mov.w	r3, #32
    7f08:	f3ef 8711 	mrs	r7, BASEPRI
    7f0c:	f383 8812 	msr	BASEPRI_MAX, r3
    7f10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f14:	481f      	ldr	r0, [pc, #124]	; (7f94 <pend+0x9c>)
    7f16:	f7ff f8fd 	bl	7114 <z_spin_lock_valid>
    7f1a:	b968      	cbnz	r0, 7f38 <pend+0x40>
    7f1c:	4a1e      	ldr	r2, [pc, #120]	; (7f98 <pend+0xa0>)
    7f1e:	491f      	ldr	r1, [pc, #124]	; (7f9c <pend+0xa4>)
    7f20:	481f      	ldr	r0, [pc, #124]	; (7fa0 <pend+0xa8>)
    7f22:	238e      	movs	r3, #142	; 0x8e
    7f24:	f001 fcb7 	bl	9896 <assert_print>
    7f28:	491a      	ldr	r1, [pc, #104]	; (7f94 <pend+0x9c>)
    7f2a:	481e      	ldr	r0, [pc, #120]	; (7fa4 <pend+0xac>)
    7f2c:	f001 fcb3 	bl	9896 <assert_print>
    7f30:	4819      	ldr	r0, [pc, #100]	; (7f98 <pend+0xa0>)
    7f32:	218e      	movs	r1, #142	; 0x8e
    7f34:	f001 fca8 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    7f38:	4816      	ldr	r0, [pc, #88]	; (7f94 <pend+0x9c>)
    7f3a:	f7ff f909 	bl	7150 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    7f3e:	4620      	mov	r0, r4
    7f40:	4641      	mov	r1, r8
    7f42:	f7ff ff9b 	bl	7e7c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f46:	4813      	ldr	r0, [pc, #76]	; (7f94 <pend+0x9c>)
    7f48:	f7ff f8f2 	bl	7130 <z_spin_unlock_valid>
    7f4c:	b968      	cbnz	r0, 7f6a <pend+0x72>
    7f4e:	4a12      	ldr	r2, [pc, #72]	; (7f98 <pend+0xa0>)
    7f50:	4915      	ldr	r1, [pc, #84]	; (7fa8 <pend+0xb0>)
    7f52:	4813      	ldr	r0, [pc, #76]	; (7fa0 <pend+0xa8>)
    7f54:	23b9      	movs	r3, #185	; 0xb9
    7f56:	f001 fc9e 	bl	9896 <assert_print>
    7f5a:	490e      	ldr	r1, [pc, #56]	; (7f94 <pend+0x9c>)
    7f5c:	4813      	ldr	r0, [pc, #76]	; (7fac <pend+0xb4>)
    7f5e:	f001 fc9a 	bl	9896 <assert_print>
    7f62:	480d      	ldr	r0, [pc, #52]	; (7f98 <pend+0xa0>)
    7f64:	21b9      	movs	r1, #185	; 0xb9
    7f66:	f001 fc8f 	bl	9888 <assert_post_action>
	__asm__ volatile(
    7f6a:	f387 8811 	msr	BASEPRI, r7
    7f6e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7f72:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7f76:	bf08      	it	eq
    7f78:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7f7c:	d008      	beq.n	7f90 <pend+0x98>
    7f7e:	4632      	mov	r2, r6
    7f80:	462b      	mov	r3, r5
    7f82:	f104 0018 	add.w	r0, r4, #24
    7f86:	490a      	ldr	r1, [pc, #40]	; (7fb0 <pend+0xb8>)
}
    7f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f8c:	f000 bcba 	b.w	8904 <z_add_timeout>
    7f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f94:	20004c40 	.word	0x20004c40
    7f98:	0000aa10 	.word	0x0000aa10
    7f9c:	0000aa69 	.word	0x0000aa69
    7fa0:	0000a8c6 	.word	0x0000a8c6
    7fa4:	0000aa7e 	.word	0x0000aa7e
    7fa8:	0000aa3d 	.word	0x0000aa3d
    7fac:	0000aa54 	.word	0x0000aa54
    7fb0:	00008259 	.word	0x00008259

00007fb4 <z_pend_curr>:
{
    7fb4:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    7fb6:	4b11      	ldr	r3, [pc, #68]	; (7ffc <z_pend_curr+0x48>)
{
    7fb8:	4604      	mov	r4, r0
	pending_current = _current;
    7fba:	6898      	ldr	r0, [r3, #8]
    7fbc:	4b10      	ldr	r3, [pc, #64]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
{
    7fbe:	460d      	mov	r5, r1
	pending_current = _current;
    7fc0:	6018      	str	r0, [r3, #0]
{
    7fc2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    7fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7fc8:	f7ff ff96 	bl	7ef8 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fcc:	4620      	mov	r0, r4
    7fce:	f7ff f8af 	bl	7130 <z_spin_unlock_valid>
    7fd2:	b968      	cbnz	r0, 7ff0 <z_pend_curr+0x3c>
    7fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fd6:	490c      	ldr	r1, [pc, #48]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fd8:	480c      	ldr	r0, [pc, #48]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fda:	23d0      	movs	r3, #208	; 0xd0
    7fdc:	f001 fc5b 	bl	9896 <assert_print>
    7fe0:	480b      	ldr	r0, [pc, #44]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fe2:	4621      	mov	r1, r4
    7fe4:	f001 fc57 	bl	9896 <assert_print>
    7fe8:	4806      	ldr	r0, [pc, #24]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7fea:	21d0      	movs	r1, #208	; 0xd0
    7fec:	f001 fc4c 	bl	9888 <assert_post_action>
    7ff0:	4628      	mov	r0, r5
}
    7ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7ff6:	f7fb bee9 	b.w	3dcc <arch_swap>
    7ffa:	bf00      	nop
    7ffc:	20004c04 	.word	0x20004c04
    8000:	20004c34 	.word	0x20004c34
    8004:	0000aa10 	.word	0x0000aa10
    8008:	0000aa3d 	.word	0x0000aa3d
    800c:	0000a8c6 	.word	0x0000a8c6
    8010:	0000aa54 	.word	0x0000aa54

00008014 <z_set_prio>:
{
    8014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8016:	4604      	mov	r4, r0
    8018:	460e      	mov	r6, r1
	__asm__ volatile(
    801a:	f04f 0320 	mov.w	r3, #32
    801e:	f3ef 8711 	mrs	r7, BASEPRI
    8022:	f383 8812 	msr	BASEPRI_MAX, r3
    8026:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    802a:	4839      	ldr	r0, [pc, #228]	; (8110 <z_set_prio+0xfc>)
    802c:	f7ff f872 	bl	7114 <z_spin_lock_valid>
    8030:	b968      	cbnz	r0, 804e <z_set_prio+0x3a>
    8032:	4a38      	ldr	r2, [pc, #224]	; (8114 <z_set_prio+0x100>)
    8034:	4938      	ldr	r1, [pc, #224]	; (8118 <z_set_prio+0x104>)
    8036:	4839      	ldr	r0, [pc, #228]	; (811c <z_set_prio+0x108>)
    8038:	238e      	movs	r3, #142	; 0x8e
    803a:	f001 fc2c 	bl	9896 <assert_print>
    803e:	4934      	ldr	r1, [pc, #208]	; (8110 <z_set_prio+0xfc>)
    8040:	4837      	ldr	r0, [pc, #220]	; (8120 <z_set_prio+0x10c>)
    8042:	f001 fc28 	bl	9896 <assert_print>
    8046:	4833      	ldr	r0, [pc, #204]	; (8114 <z_set_prio+0x100>)
    8048:	218e      	movs	r1, #142	; 0x8e
    804a:	f001 fc1d 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    804e:	4830      	ldr	r0, [pc, #192]	; (8110 <z_set_prio+0xfc>)
    8050:	f7ff f87e 	bl	7150 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    8054:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8056:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    8058:	b276      	sxtb	r6, r6
    805a:	d128      	bne.n	80ae <z_set_prio+0x9a>
	return node->next != NULL;
    805c:	69a5      	ldr	r5, [r4, #24]
    805e:	bb35      	cbnz	r5, 80ae <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8064:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8066:	482f      	ldr	r0, [pc, #188]	; (8124 <z_set_prio+0x110>)
    8068:	4621      	mov	r1, r4
    806a:	f7ff fdff 	bl	7c6c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    806e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    8070:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8072:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8076:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8078:	4b2b      	ldr	r3, [pc, #172]	; (8128 <z_set_prio+0x114>)
    807a:	429c      	cmp	r4, r3
    807c:	d109      	bne.n	8092 <z_set_prio+0x7e>
    807e:	492b      	ldr	r1, [pc, #172]	; (812c <z_set_prio+0x118>)
    8080:	4826      	ldr	r0, [pc, #152]	; (811c <z_set_prio+0x108>)
    8082:	4a2b      	ldr	r2, [pc, #172]	; (8130 <z_set_prio+0x11c>)
    8084:	23ba      	movs	r3, #186	; 0xba
    8086:	f001 fc06 	bl	9896 <assert_print>
    808a:	4829      	ldr	r0, [pc, #164]	; (8130 <z_set_prio+0x11c>)
    808c:	21ba      	movs	r1, #186	; 0xba
    808e:	f001 fbfb 	bl	9888 <assert_post_action>
	return list->head == list;
    8092:	4a28      	ldr	r2, [pc, #160]	; (8134 <z_set_prio+0x120>)
    8094:	4613      	mov	r3, r2
    8096:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    809a:	4299      	cmp	r1, r3
    809c:	bf18      	it	ne
    809e:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    80a0:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80a2:	b9f5      	cbnz	r5, 80e2 <z_set_prio+0xce>
	node->prev = tail;
    80a4:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    80a8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    80aa:	6254      	str	r4, [r2, #36]	; 0x24
}
    80ac:	e026      	b.n	80fc <z_set_prio+0xe8>
			thread->base.prio = prio;
    80ae:	73a6      	strb	r6, [r4, #14]
    80b0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    80b2:	4817      	ldr	r0, [pc, #92]	; (8110 <z_set_prio+0xfc>)
    80b4:	f7ff f83c 	bl	7130 <z_spin_unlock_valid>
    80b8:	b968      	cbnz	r0, 80d6 <z_set_prio+0xc2>
    80ba:	4a16      	ldr	r2, [pc, #88]	; (8114 <z_set_prio+0x100>)
    80bc:	491e      	ldr	r1, [pc, #120]	; (8138 <z_set_prio+0x124>)
    80be:	4817      	ldr	r0, [pc, #92]	; (811c <z_set_prio+0x108>)
    80c0:	23b9      	movs	r3, #185	; 0xb9
    80c2:	f001 fbe8 	bl	9896 <assert_print>
    80c6:	4912      	ldr	r1, [pc, #72]	; (8110 <z_set_prio+0xfc>)
    80c8:	481c      	ldr	r0, [pc, #112]	; (813c <z_set_prio+0x128>)
    80ca:	f001 fbe4 	bl	9896 <assert_print>
    80ce:	4811      	ldr	r0, [pc, #68]	; (8114 <z_set_prio+0x100>)
    80d0:	21b9      	movs	r1, #185	; 0xb9
    80d2:	f001 fbd9 	bl	9888 <assert_post_action>
	__asm__ volatile(
    80d6:	f387 8811 	msr	BASEPRI, r7
    80da:	f3bf 8f6f 	isb	sy
}
    80de:	4620      	mov	r0, r4
    80e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    80e2:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    80e6:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    80ea:	42b0      	cmp	r0, r6
    80ec:	d00b      	beq.n	8106 <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    80ee:	4286      	cmp	r6, r0
    80f0:	dd09      	ble.n	8106 <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    80f2:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    80f4:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    80f8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    80fa:	606c      	str	r4, [r5, #4]
			update_cache(1);
    80fc:	2001      	movs	r0, #1
    80fe:	f7ff fafb 	bl	76f8 <update_cache>
    8102:	2401      	movs	r4, #1
    8104:	e7d5      	b.n	80b2 <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    8106:	42a9      	cmp	r1, r5
    8108:	d0cc      	beq.n	80a4 <z_set_prio+0x90>
    810a:	682d      	ldr	r5, [r5, #0]
    810c:	e7c9      	b.n	80a2 <z_set_prio+0x8e>
    810e:	bf00      	nop
    8110:	20004c40 	.word	0x20004c40
    8114:	0000aa10 	.word	0x0000aa10
    8118:	0000aa69 	.word	0x0000aa69
    811c:	0000a8c6 	.word	0x0000a8c6
    8120:	0000aa7e 	.word	0x0000aa7e
    8124:	20004c24 	.word	0x20004c24
    8128:	200043e0 	.word	0x200043e0
    812c:	0000bf85 	.word	0x0000bf85
    8130:	0000bf3c 	.word	0x0000bf3c
    8134:	20004c04 	.word	0x20004c04
    8138:	0000aa3d 	.word	0x0000aa3d
    813c:	0000aa54 	.word	0x0000aa54

00008140 <z_impl_k_thread_suspend>:
{
    8140:	b570      	push	{r4, r5, r6, lr}
    8142:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8144:	3018      	adds	r0, #24
    8146:	f000 fca7 	bl	8a98 <z_abort_timeout>
	__asm__ volatile(
    814a:	f04f 0320 	mov.w	r3, #32
    814e:	f3ef 8611 	mrs	r6, BASEPRI
    8152:	f383 8812 	msr	BASEPRI_MAX, r3
    8156:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    815a:	4825      	ldr	r0, [pc, #148]	; (81f0 <z_impl_k_thread_suspend+0xb0>)
    815c:	f7fe ffda 	bl	7114 <z_spin_lock_valid>
    8160:	b968      	cbnz	r0, 817e <z_impl_k_thread_suspend+0x3e>
    8162:	4a24      	ldr	r2, [pc, #144]	; (81f4 <z_impl_k_thread_suspend+0xb4>)
    8164:	4924      	ldr	r1, [pc, #144]	; (81f8 <z_impl_k_thread_suspend+0xb8>)
    8166:	4825      	ldr	r0, [pc, #148]	; (81fc <z_impl_k_thread_suspend+0xbc>)
    8168:	238e      	movs	r3, #142	; 0x8e
    816a:	f001 fb94 	bl	9896 <assert_print>
    816e:	4920      	ldr	r1, [pc, #128]	; (81f0 <z_impl_k_thread_suspend+0xb0>)
    8170:	4823      	ldr	r0, [pc, #140]	; (8200 <z_impl_k_thread_suspend+0xc0>)
    8172:	f001 fb90 	bl	9896 <assert_print>
    8176:	481f      	ldr	r0, [pc, #124]	; (81f4 <z_impl_k_thread_suspend+0xb4>)
    8178:	218e      	movs	r1, #142	; 0x8e
    817a:	f001 fb85 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    817e:	481c      	ldr	r0, [pc, #112]	; (81f0 <z_impl_k_thread_suspend+0xb0>)
    8180:	f7fe ffe6 	bl	7150 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    8184:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8188:	7b63      	ldrb	r3, [r4, #13]
    818a:	2a00      	cmp	r2, #0
    818c:	da06      	bge.n	819c <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    818e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    8192:	481c      	ldr	r0, [pc, #112]	; (8204 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8194:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8196:	4621      	mov	r1, r4
    8198:	f7ff fd68 	bl	7c6c <z_priq_dumb_remove>
		update_cache(thread == _current);
    819c:	4d1a      	ldr	r5, [pc, #104]	; (8208 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    819e:	7b63      	ldrb	r3, [r4, #13]
    81a0:	68a8      	ldr	r0, [r5, #8]
    81a2:	f043 0310 	orr.w	r3, r3, #16
    81a6:	7363      	strb	r3, [r4, #13]
    81a8:	1b03      	subs	r3, r0, r4
    81aa:	4258      	negs	r0, r3
    81ac:	4158      	adcs	r0, r3
    81ae:	f7ff faa3 	bl	76f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81b2:	480f      	ldr	r0, [pc, #60]	; (81f0 <z_impl_k_thread_suspend+0xb0>)
    81b4:	f7fe ffbc 	bl	7130 <z_spin_unlock_valid>
    81b8:	b968      	cbnz	r0, 81d6 <z_impl_k_thread_suspend+0x96>
    81ba:	4a0e      	ldr	r2, [pc, #56]	; (81f4 <z_impl_k_thread_suspend+0xb4>)
    81bc:	4913      	ldr	r1, [pc, #76]	; (820c <z_impl_k_thread_suspend+0xcc>)
    81be:	480f      	ldr	r0, [pc, #60]	; (81fc <z_impl_k_thread_suspend+0xbc>)
    81c0:	23b9      	movs	r3, #185	; 0xb9
    81c2:	f001 fb68 	bl	9896 <assert_print>
    81c6:	490a      	ldr	r1, [pc, #40]	; (81f0 <z_impl_k_thread_suspend+0xb0>)
    81c8:	4811      	ldr	r0, [pc, #68]	; (8210 <z_impl_k_thread_suspend+0xd0>)
    81ca:	f001 fb64 	bl	9896 <assert_print>
    81ce:	4809      	ldr	r0, [pc, #36]	; (81f4 <z_impl_k_thread_suspend+0xb4>)
    81d0:	21b9      	movs	r1, #185	; 0xb9
    81d2:	f001 fb59 	bl	9888 <assert_post_action>
	__asm__ volatile(
    81d6:	f386 8811 	msr	BASEPRI, r6
    81da:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    81de:	68ab      	ldr	r3, [r5, #8]
    81e0:	42a3      	cmp	r3, r4
    81e2:	d103      	bne.n	81ec <z_impl_k_thread_suspend+0xac>
}
    81e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    81e8:	f001 bf26 	b.w	a038 <z_reschedule_unlocked>
}
    81ec:	bd70      	pop	{r4, r5, r6, pc}
    81ee:	bf00      	nop
    81f0:	20004c40 	.word	0x20004c40
    81f4:	0000aa10 	.word	0x0000aa10
    81f8:	0000aa69 	.word	0x0000aa69
    81fc:	0000a8c6 	.word	0x0000a8c6
    8200:	0000aa7e 	.word	0x0000aa7e
    8204:	20004c24 	.word	0x20004c24
    8208:	20004c04 	.word	0x20004c04
    820c:	0000aa3d 	.word	0x0000aa3d
    8210:	0000aa54 	.word	0x0000aa54

00008214 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    8214:	6883      	ldr	r3, [r0, #8]
{
    8216:	b510      	push	{r4, lr}
    8218:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    821a:	b95b      	cbnz	r3, 8234 <unpend_thread_no_timeout+0x20>
    821c:	490b      	ldr	r1, [pc, #44]	; (824c <unpend_thread_no_timeout+0x38>)
    821e:	480c      	ldr	r0, [pc, #48]	; (8250 <unpend_thread_no_timeout+0x3c>)
    8220:	4a0c      	ldr	r2, [pc, #48]	; (8254 <unpend_thread_no_timeout+0x40>)
    8222:	f240 23b9 	movw	r3, #697	; 0x2b9
    8226:	f001 fb36 	bl	9896 <assert_print>
    822a:	480a      	ldr	r0, [pc, #40]	; (8254 <unpend_thread_no_timeout+0x40>)
    822c:	f240 21b9 	movw	r1, #697	; 0x2b9
    8230:	f001 fb2a 	bl	9888 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8234:	68a0      	ldr	r0, [r4, #8]
    8236:	4621      	mov	r1, r4
    8238:	f7ff fd18 	bl	7c6c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    823c:	7b63      	ldrb	r3, [r4, #13]
    823e:	f023 0302 	bic.w	r3, r3, #2
    8242:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8244:	2300      	movs	r3, #0
    8246:	60a3      	str	r3, [r4, #8]
}
    8248:	bd10      	pop	{r4, pc}
    824a:	bf00      	nop
    824c:	0000bfd7 	.word	0x0000bfd7
    8250:	0000a8c6 	.word	0x0000a8c6
    8254:	0000bf3c 	.word	0x0000bf3c

00008258 <z_thread_timeout>:
{
    8258:	b570      	push	{r4, r5, r6, lr}
    825a:	4604      	mov	r4, r0
	__asm__ volatile(
    825c:	f04f 0320 	mov.w	r3, #32
    8260:	f3ef 8611 	mrs	r6, BASEPRI
    8264:	f383 8812 	msr	BASEPRI_MAX, r3
    8268:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    826c:	4820      	ldr	r0, [pc, #128]	; (82f0 <z_thread_timeout+0x98>)
    826e:	f7fe ff51 	bl	7114 <z_spin_lock_valid>
    8272:	b968      	cbnz	r0, 8290 <z_thread_timeout+0x38>
    8274:	4a1f      	ldr	r2, [pc, #124]	; (82f4 <z_thread_timeout+0x9c>)
    8276:	4920      	ldr	r1, [pc, #128]	; (82f8 <z_thread_timeout+0xa0>)
    8278:	4820      	ldr	r0, [pc, #128]	; (82fc <z_thread_timeout+0xa4>)
    827a:	238e      	movs	r3, #142	; 0x8e
    827c:	f001 fb0b 	bl	9896 <assert_print>
    8280:	491b      	ldr	r1, [pc, #108]	; (82f0 <z_thread_timeout+0x98>)
    8282:	481f      	ldr	r0, [pc, #124]	; (8300 <z_thread_timeout+0xa8>)
    8284:	f001 fb07 	bl	9896 <assert_print>
    8288:	481a      	ldr	r0, [pc, #104]	; (82f4 <z_thread_timeout+0x9c>)
    828a:	218e      	movs	r1, #142	; 0x8e
    828c:	f001 fafc 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8290:	4817      	ldr	r0, [pc, #92]	; (82f0 <z_thread_timeout+0x98>)
    8292:	f7fe ff5d 	bl	7150 <z_spin_lock_set_owner>
		if (!killed) {
    8296:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    829a:	f013 0f28 	tst.w	r3, #40	; 0x28
    829e:	d110      	bne.n	82c2 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    82a0:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    82a4:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    82a8:	b113      	cbz	r3, 82b0 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    82aa:	4628      	mov	r0, r5
    82ac:	f7ff ffb2 	bl	8214 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    82b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    82b4:	f023 0314 	bic.w	r3, r3, #20
    82b8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    82bc:	4628      	mov	r0, r5
    82be:	f7ff fa53 	bl	7768 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82c2:	480b      	ldr	r0, [pc, #44]	; (82f0 <z_thread_timeout+0x98>)
    82c4:	f7fe ff34 	bl	7130 <z_spin_unlock_valid>
    82c8:	b968      	cbnz	r0, 82e6 <z_thread_timeout+0x8e>
    82ca:	4a0a      	ldr	r2, [pc, #40]	; (82f4 <z_thread_timeout+0x9c>)
    82cc:	490d      	ldr	r1, [pc, #52]	; (8304 <z_thread_timeout+0xac>)
    82ce:	480b      	ldr	r0, [pc, #44]	; (82fc <z_thread_timeout+0xa4>)
    82d0:	23b9      	movs	r3, #185	; 0xb9
    82d2:	f001 fae0 	bl	9896 <assert_print>
    82d6:	4906      	ldr	r1, [pc, #24]	; (82f0 <z_thread_timeout+0x98>)
    82d8:	480b      	ldr	r0, [pc, #44]	; (8308 <z_thread_timeout+0xb0>)
    82da:	f001 fadc 	bl	9896 <assert_print>
    82de:	4805      	ldr	r0, [pc, #20]	; (82f4 <z_thread_timeout+0x9c>)
    82e0:	21b9      	movs	r1, #185	; 0xb9
    82e2:	f001 fad1 	bl	9888 <assert_post_action>
	__asm__ volatile(
    82e6:	f386 8811 	msr	BASEPRI, r6
    82ea:	f3bf 8f6f 	isb	sy
}
    82ee:	bd70      	pop	{r4, r5, r6, pc}
    82f0:	20004c40 	.word	0x20004c40
    82f4:	0000aa10 	.word	0x0000aa10
    82f8:	0000aa69 	.word	0x0000aa69
    82fc:	0000a8c6 	.word	0x0000a8c6
    8300:	0000aa7e 	.word	0x0000aa7e
    8304:	0000aa3d 	.word	0x0000aa3d
    8308:	0000aa54 	.word	0x0000aa54

0000830c <z_unpend_first_thread>:
{
    830c:	b570      	push	{r4, r5, r6, lr}
    830e:	4605      	mov	r5, r0
	__asm__ volatile(
    8310:	f04f 0320 	mov.w	r3, #32
    8314:	f3ef 8611 	mrs	r6, BASEPRI
    8318:	f383 8812 	msr	BASEPRI_MAX, r3
    831c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8320:	481c      	ldr	r0, [pc, #112]	; (8394 <z_unpend_first_thread+0x88>)
    8322:	f7fe fef7 	bl	7114 <z_spin_lock_valid>
    8326:	b968      	cbnz	r0, 8344 <z_unpend_first_thread+0x38>
    8328:	4a1b      	ldr	r2, [pc, #108]	; (8398 <z_unpend_first_thread+0x8c>)
    832a:	491c      	ldr	r1, [pc, #112]	; (839c <z_unpend_first_thread+0x90>)
    832c:	481c      	ldr	r0, [pc, #112]	; (83a0 <z_unpend_first_thread+0x94>)
    832e:	238e      	movs	r3, #142	; 0x8e
    8330:	f001 fab1 	bl	9896 <assert_print>
    8334:	4917      	ldr	r1, [pc, #92]	; (8394 <z_unpend_first_thread+0x88>)
    8336:	481b      	ldr	r0, [pc, #108]	; (83a4 <z_unpend_first_thread+0x98>)
    8338:	f001 faad 	bl	9896 <assert_print>
    833c:	4816      	ldr	r0, [pc, #88]	; (8398 <z_unpend_first_thread+0x8c>)
    833e:	218e      	movs	r1, #142	; 0x8e
    8340:	f001 faa2 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8344:	4813      	ldr	r0, [pc, #76]	; (8394 <z_unpend_first_thread+0x88>)
    8346:	f7fe ff03 	bl	7150 <z_spin_lock_set_owner>
	return list->head == list;
    834a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    834c:	42a5      	cmp	r5, r4
    834e:	d01f      	beq.n	8390 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    8350:	b134      	cbz	r4, 8360 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8352:	4620      	mov	r0, r4
    8354:	f7ff ff5e 	bl	8214 <unpend_thread_no_timeout>
    8358:	f104 0018 	add.w	r0, r4, #24
    835c:	f000 fb9c 	bl	8a98 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8360:	480c      	ldr	r0, [pc, #48]	; (8394 <z_unpend_first_thread+0x88>)
    8362:	f7fe fee5 	bl	7130 <z_spin_unlock_valid>
    8366:	b968      	cbnz	r0, 8384 <z_unpend_first_thread+0x78>
    8368:	4a0b      	ldr	r2, [pc, #44]	; (8398 <z_unpend_first_thread+0x8c>)
    836a:	490f      	ldr	r1, [pc, #60]	; (83a8 <z_unpend_first_thread+0x9c>)
    836c:	480c      	ldr	r0, [pc, #48]	; (83a0 <z_unpend_first_thread+0x94>)
    836e:	23b9      	movs	r3, #185	; 0xb9
    8370:	f001 fa91 	bl	9896 <assert_print>
    8374:	4907      	ldr	r1, [pc, #28]	; (8394 <z_unpend_first_thread+0x88>)
    8376:	480d      	ldr	r0, [pc, #52]	; (83ac <z_unpend_first_thread+0xa0>)
    8378:	f001 fa8d 	bl	9896 <assert_print>
    837c:	4806      	ldr	r0, [pc, #24]	; (8398 <z_unpend_first_thread+0x8c>)
    837e:	21b9      	movs	r1, #185	; 0xb9
    8380:	f001 fa82 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8384:	f386 8811 	msr	BASEPRI, r6
    8388:	f3bf 8f6f 	isb	sy
}
    838c:	4620      	mov	r0, r4
    838e:	bd70      	pop	{r4, r5, r6, pc}
    8390:	2400      	movs	r4, #0
    8392:	e7e5      	b.n	8360 <z_unpend_first_thread+0x54>
    8394:	20004c40 	.word	0x20004c40
    8398:	0000aa10 	.word	0x0000aa10
    839c:	0000aa69 	.word	0x0000aa69
    83a0:	0000a8c6 	.word	0x0000a8c6
    83a4:	0000aa7e 	.word	0x0000aa7e
    83a8:	0000aa3d 	.word	0x0000aa3d
    83ac:	0000aa54 	.word	0x0000aa54

000083b0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    83b0:	4b04      	ldr	r3, [pc, #16]	; (83c4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    83b2:	2100      	movs	r1, #0
    83b4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    83b8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    83bc:	4608      	mov	r0, r1
    83be:	f7ff ba1f 	b.w	7800 <k_sched_time_slice_set>
    83c2:	bf00      	nop
    83c4:	20004c04 	.word	0x20004c04

000083c8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    83c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83ca:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    83ce:	b173      	cbz	r3, 83ee <z_impl_k_yield+0x26>
    83d0:	493f      	ldr	r1, [pc, #252]	; (84d0 <z_impl_k_yield+0x108>)
    83d2:	4a40      	ldr	r2, [pc, #256]	; (84d4 <z_impl_k_yield+0x10c>)
    83d4:	4840      	ldr	r0, [pc, #256]	; (84d8 <z_impl_k_yield+0x110>)
    83d6:	f240 5332 	movw	r3, #1330	; 0x532
    83da:	f001 fa5c 	bl	9896 <assert_print>
    83de:	483f      	ldr	r0, [pc, #252]	; (84dc <z_impl_k_yield+0x114>)
    83e0:	f001 fa59 	bl	9896 <assert_print>
    83e4:	483b      	ldr	r0, [pc, #236]	; (84d4 <z_impl_k_yield+0x10c>)
    83e6:	f240 5132 	movw	r1, #1330	; 0x532
    83ea:	f001 fa4d 	bl	9888 <assert_post_action>
	__asm__ volatile(
    83ee:	f04f 0320 	mov.w	r3, #32
    83f2:	f3ef 8611 	mrs	r6, BASEPRI
    83f6:	f383 8812 	msr	BASEPRI_MAX, r3
    83fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83fe:	4838      	ldr	r0, [pc, #224]	; (84e0 <z_impl_k_yield+0x118>)
    8400:	f7fe fe88 	bl	7114 <z_spin_lock_valid>
    8404:	b968      	cbnz	r0, 8422 <z_impl_k_yield+0x5a>
    8406:	4a37      	ldr	r2, [pc, #220]	; (84e4 <z_impl_k_yield+0x11c>)
    8408:	4937      	ldr	r1, [pc, #220]	; (84e8 <z_impl_k_yield+0x120>)
    840a:	4833      	ldr	r0, [pc, #204]	; (84d8 <z_impl_k_yield+0x110>)
    840c:	238e      	movs	r3, #142	; 0x8e
    840e:	f001 fa42 	bl	9896 <assert_print>
    8412:	4933      	ldr	r1, [pc, #204]	; (84e0 <z_impl_k_yield+0x118>)
    8414:	4835      	ldr	r0, [pc, #212]	; (84ec <z_impl_k_yield+0x124>)
    8416:	f001 fa3e 	bl	9896 <assert_print>
    841a:	4832      	ldr	r0, [pc, #200]	; (84e4 <z_impl_k_yield+0x11c>)
    841c:	218e      	movs	r1, #142	; 0x8e
    841e:	f001 fa33 	bl	9888 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8422:	4d33      	ldr	r5, [pc, #204]	; (84f0 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    8424:	482e      	ldr	r0, [pc, #184]	; (84e0 <z_impl_k_yield+0x118>)
    8426:	f7fe fe93 	bl	7150 <z_spin_lock_set_owner>
    842a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    842c:	7b4b      	ldrb	r3, [r1, #13]
    842e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8432:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8434:	f105 0020 	add.w	r0, r5, #32
    8438:	f7ff fc18 	bl	7c6c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    843c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    843e:	7b63      	ldrb	r3, [r4, #13]
    8440:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8444:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8446:	4b2b      	ldr	r3, [pc, #172]	; (84f4 <z_impl_k_yield+0x12c>)
    8448:	429c      	cmp	r4, r3
    844a:	d109      	bne.n	8460 <z_impl_k_yield+0x98>
    844c:	492a      	ldr	r1, [pc, #168]	; (84f8 <z_impl_k_yield+0x130>)
    844e:	4822      	ldr	r0, [pc, #136]	; (84d8 <z_impl_k_yield+0x110>)
    8450:	4a20      	ldr	r2, [pc, #128]	; (84d4 <z_impl_k_yield+0x10c>)
    8452:	23ba      	movs	r3, #186	; 0xba
    8454:	f001 fa1f 	bl	9896 <assert_print>
    8458:	481e      	ldr	r0, [pc, #120]	; (84d4 <z_impl_k_yield+0x10c>)
    845a:	21ba      	movs	r1, #186	; 0xba
    845c:	f001 fa14 	bl	9888 <assert_post_action>
	return list->head == list;
    8460:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8462:	4926      	ldr	r1, [pc, #152]	; (84fc <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    8464:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8466:	428b      	cmp	r3, r1
    8468:	bf08      	it	eq
    846a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    846c:	b923      	cbnz	r3, 8478 <z_impl_k_yield+0xb0>
	node->prev = tail;
    846e:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    8472:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8474:	626c      	str	r4, [r5, #36]	; 0x24
}
    8476:	e00c      	b.n	8492 <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    8478:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    847c:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    8480:	42b8      	cmp	r0, r7
    8482:	d020      	beq.n	84c6 <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8484:	4287      	cmp	r7, r0
    8486:	dd1e      	ble.n	84c6 <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    8488:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    848a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    848e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8490:	605c      	str	r4, [r3, #4]
	update_cache(1);
    8492:	2001      	movs	r0, #1
    8494:	f7ff f930 	bl	76f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8498:	4811      	ldr	r0, [pc, #68]	; (84e0 <z_impl_k_yield+0x118>)
    849a:	f7fe fe49 	bl	7130 <z_spin_unlock_valid>
    849e:	b968      	cbnz	r0, 84bc <z_impl_k_yield+0xf4>
    84a0:	4a10      	ldr	r2, [pc, #64]	; (84e4 <z_impl_k_yield+0x11c>)
    84a2:	4917      	ldr	r1, [pc, #92]	; (8500 <z_impl_k_yield+0x138>)
    84a4:	480c      	ldr	r0, [pc, #48]	; (84d8 <z_impl_k_yield+0x110>)
    84a6:	23d0      	movs	r3, #208	; 0xd0
    84a8:	f001 f9f5 	bl	9896 <assert_print>
    84ac:	490c      	ldr	r1, [pc, #48]	; (84e0 <z_impl_k_yield+0x118>)
    84ae:	4815      	ldr	r0, [pc, #84]	; (8504 <z_impl_k_yield+0x13c>)
    84b0:	f001 f9f1 	bl	9896 <assert_print>
    84b4:	480b      	ldr	r0, [pc, #44]	; (84e4 <z_impl_k_yield+0x11c>)
    84b6:	21d0      	movs	r1, #208	; 0xd0
    84b8:	f001 f9e6 	bl	9888 <assert_post_action>
    84bc:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    84be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    84c2:	f7fb bc83 	b.w	3dcc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    84c6:	4293      	cmp	r3, r2
    84c8:	d0d1      	beq.n	846e <z_impl_k_yield+0xa6>
    84ca:	681b      	ldr	r3, [r3, #0]
    84cc:	e7ce      	b.n	846c <z_impl_k_yield+0xa4>
    84ce:	bf00      	nop
    84d0:	0000bd64 	.word	0x0000bd64
    84d4:	0000bf3c 	.word	0x0000bf3c
    84d8:	0000a8c6 	.word	0x0000a8c6
    84dc:	0000be9a 	.word	0x0000be9a
    84e0:	20004c40 	.word	0x20004c40
    84e4:	0000aa10 	.word	0x0000aa10
    84e8:	0000aa69 	.word	0x0000aa69
    84ec:	0000aa7e 	.word	0x0000aa7e
    84f0:	20004c04 	.word	0x20004c04
    84f4:	200043e0 	.word	0x200043e0
    84f8:	0000bf85 	.word	0x0000bf85
    84fc:	20004c24 	.word	0x20004c24
    8500:	0000aa3d 	.word	0x0000aa3d
    8504:	0000aa54 	.word	0x0000aa54

00008508 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    8508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    850c:	4605      	mov	r5, r0
    850e:	460e      	mov	r6, r1
    8510:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8514:	b173      	cbz	r3, 8534 <z_tick_sleep+0x2c>
    8516:	4941      	ldr	r1, [pc, #260]	; (861c <z_tick_sleep+0x114>)
    8518:	4a41      	ldr	r2, [pc, #260]	; (8620 <z_tick_sleep+0x118>)
    851a:	4842      	ldr	r0, [pc, #264]	; (8624 <z_tick_sleep+0x11c>)
    851c:	f240 534e 	movw	r3, #1358	; 0x54e
    8520:	f001 f9b9 	bl	9896 <assert_print>
    8524:	4840      	ldr	r0, [pc, #256]	; (8628 <z_tick_sleep+0x120>)
    8526:	f001 f9b6 	bl	9896 <assert_print>
    852a:	483d      	ldr	r0, [pc, #244]	; (8620 <z_tick_sleep+0x118>)
    852c:	f240 514e 	movw	r1, #1358	; 0x54e
    8530:	f001 f9aa 	bl	9888 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8534:	ea55 0306 	orrs.w	r3, r5, r6
    8538:	d103      	bne.n	8542 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    853a:	f7ff ff45 	bl	83c8 <z_impl_k_yield>
		k_yield();
		return 0;
    853e:	2000      	movs	r0, #0
    8540:	e066      	b.n	8610 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8542:	1caa      	adds	r2, r5, #2
    8544:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    8548:	db64      	blt.n	8614 <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    854a:	f001 fd7f 	bl	a04c <sys_clock_tick_get_32>
    854e:	1944      	adds	r4, r0, r5
    8550:	f04f 0320 	mov.w	r3, #32
    8554:	f3ef 8811 	mrs	r8, BASEPRI
    8558:	f383 8812 	msr	BASEPRI_MAX, r3
    855c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8560:	4832      	ldr	r0, [pc, #200]	; (862c <z_tick_sleep+0x124>)
    8562:	f7fe fdd7 	bl	7114 <z_spin_lock_valid>
    8566:	b968      	cbnz	r0, 8584 <z_tick_sleep+0x7c>
    8568:	4a31      	ldr	r2, [pc, #196]	; (8630 <z_tick_sleep+0x128>)
    856a:	4932      	ldr	r1, [pc, #200]	; (8634 <z_tick_sleep+0x12c>)
    856c:	482d      	ldr	r0, [pc, #180]	; (8624 <z_tick_sleep+0x11c>)
    856e:	238e      	movs	r3, #142	; 0x8e
    8570:	f001 f991 	bl	9896 <assert_print>
    8574:	492d      	ldr	r1, [pc, #180]	; (862c <z_tick_sleep+0x124>)
    8576:	4830      	ldr	r0, [pc, #192]	; (8638 <z_tick_sleep+0x130>)
    8578:	f001 f98d 	bl	9896 <assert_print>
    857c:	482c      	ldr	r0, [pc, #176]	; (8630 <z_tick_sleep+0x128>)
    857e:	218e      	movs	r1, #142	; 0x8e
    8580:	f001 f982 	bl	9888 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8584:	4f2d      	ldr	r7, [pc, #180]	; (863c <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    8586:	4829      	ldr	r0, [pc, #164]	; (862c <z_tick_sleep+0x124>)
    8588:	f7fe fde2 	bl	7150 <z_spin_lock_set_owner>
    858c:	4b2c      	ldr	r3, [pc, #176]	; (8640 <z_tick_sleep+0x138>)
    858e:	68b8      	ldr	r0, [r7, #8]
    8590:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8592:	f7ff fc57 	bl	7e44 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8596:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8598:	492a      	ldr	r1, [pc, #168]	; (8644 <z_tick_sleep+0x13c>)
    859a:	462a      	mov	r2, r5
    859c:	4633      	mov	r3, r6
    859e:	3018      	adds	r0, #24
    85a0:	f000 f9b0 	bl	8904 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    85a4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85a6:	4821      	ldr	r0, [pc, #132]	; (862c <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    85a8:	7b53      	ldrb	r3, [r2, #13]
    85aa:	f043 0310 	orr.w	r3, r3, #16
    85ae:	7353      	strb	r3, [r2, #13]
    85b0:	f7fe fdbe 	bl	7130 <z_spin_unlock_valid>
    85b4:	b968      	cbnz	r0, 85d2 <z_tick_sleep+0xca>
    85b6:	4a1e      	ldr	r2, [pc, #120]	; (8630 <z_tick_sleep+0x128>)
    85b8:	4923      	ldr	r1, [pc, #140]	; (8648 <z_tick_sleep+0x140>)
    85ba:	481a      	ldr	r0, [pc, #104]	; (8624 <z_tick_sleep+0x11c>)
    85bc:	23d0      	movs	r3, #208	; 0xd0
    85be:	f001 f96a 	bl	9896 <assert_print>
    85c2:	491a      	ldr	r1, [pc, #104]	; (862c <z_tick_sleep+0x124>)
    85c4:	4821      	ldr	r0, [pc, #132]	; (864c <z_tick_sleep+0x144>)
    85c6:	f001 f966 	bl	9896 <assert_print>
    85ca:	4819      	ldr	r0, [pc, #100]	; (8630 <z_tick_sleep+0x128>)
    85cc:	21d0      	movs	r1, #208	; 0xd0
    85ce:	f001 f95b 	bl	9888 <assert_post_action>
    85d2:	4640      	mov	r0, r8
    85d4:	f7fb fbfa 	bl	3dcc <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    85d8:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    85da:	7b5b      	ldrb	r3, [r3, #13]
    85dc:	06db      	lsls	r3, r3, #27
    85de:	d50e      	bpl.n	85fe <z_tick_sleep+0xf6>
    85e0:	491b      	ldr	r1, [pc, #108]	; (8650 <z_tick_sleep+0x148>)
    85e2:	4a0f      	ldr	r2, [pc, #60]	; (8620 <z_tick_sleep+0x118>)
    85e4:	480f      	ldr	r0, [pc, #60]	; (8624 <z_tick_sleep+0x11c>)
    85e6:	f240 536f 	movw	r3, #1391	; 0x56f
    85ea:	f001 f954 	bl	9896 <assert_print>
    85ee:	480e      	ldr	r0, [pc, #56]	; (8628 <z_tick_sleep+0x120>)
    85f0:	f001 f951 	bl	9896 <assert_print>
    85f4:	480a      	ldr	r0, [pc, #40]	; (8620 <z_tick_sleep+0x118>)
    85f6:	f240 516f 	movw	r1, #1391	; 0x56f
    85fa:	f001 f945 	bl	9888 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    85fe:	f001 fd25 	bl	a04c <sys_clock_tick_get_32>
    8602:	1a20      	subs	r0, r4, r0
    8604:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8608:	2801      	cmp	r0, #1
    860a:	f173 0300 	sbcs.w	r3, r3, #0
    860e:	db96      	blt.n	853e <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    8610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8614:	f06f 0401 	mvn.w	r4, #1
    8618:	1b64      	subs	r4, r4, r5
    861a:	e799      	b.n	8550 <z_tick_sleep+0x48>
    861c:	0000bd64 	.word	0x0000bd64
    8620:	0000bf3c 	.word	0x0000bf3c
    8624:	0000a8c6 	.word	0x0000a8c6
    8628:	0000be9a 	.word	0x0000be9a
    862c:	20004c40 	.word	0x20004c40
    8630:	0000aa10 	.word	0x0000aa10
    8634:	0000aa69 	.word	0x0000aa69
    8638:	0000aa7e 	.word	0x0000aa7e
    863c:	20004c04 	.word	0x20004c04
    8640:	20004c34 	.word	0x20004c34
    8644:	00008259 	.word	0x00008259
    8648:	0000aa3d 	.word	0x0000aa3d
    864c:	0000aa54 	.word	0x0000aa54
    8650:	0000bfee 	.word	0x0000bfee

00008654 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8654:	b538      	push	{r3, r4, r5, lr}
    8656:	4605      	mov	r5, r0
    8658:	460c      	mov	r4, r1
    865a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    865e:	b173      	cbz	r3, 867e <z_impl_k_sleep+0x2a>
    8660:	4913      	ldr	r1, [pc, #76]	; (86b0 <z_impl_k_sleep+0x5c>)
    8662:	4a14      	ldr	r2, [pc, #80]	; (86b4 <z_impl_k_sleep+0x60>)
    8664:	4814      	ldr	r0, [pc, #80]	; (86b8 <z_impl_k_sleep+0x64>)
    8666:	f240 537e 	movw	r3, #1406	; 0x57e
    866a:	f001 f914 	bl	9896 <assert_print>
    866e:	4813      	ldr	r0, [pc, #76]	; (86bc <z_impl_k_sleep+0x68>)
    8670:	f001 f911 	bl	9896 <assert_print>
    8674:	480f      	ldr	r0, [pc, #60]	; (86b4 <z_impl_k_sleep+0x60>)
    8676:	f240 517e 	movw	r1, #1406	; 0x57e
    867a:	f001 f905 	bl	9888 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    867e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8682:	bf08      	it	eq
    8684:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8688:	d106      	bne.n	8698 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    868a:	4b0d      	ldr	r3, [pc, #52]	; (86c0 <z_impl_k_sleep+0x6c>)
    868c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    868e:	f7ff fd57 	bl	8140 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8696:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8698:	4628      	mov	r0, r5
    869a:	4621      	mov	r1, r4
    869c:	f7ff ff34 	bl	8508 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    86a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    86a4:	fb80 0303 	smull	r0, r3, r0, r3
    86a8:	0bc0      	lsrs	r0, r0, #15
    86aa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    86ae:	e7f2      	b.n	8696 <z_impl_k_sleep+0x42>
    86b0:	0000bd64 	.word	0x0000bd64
    86b4:	0000bf3c 	.word	0x0000bf3c
    86b8:	0000a8c6 	.word	0x0000a8c6
    86bc:	0000be9a 	.word	0x0000be9a
    86c0:	20004c04 	.word	0x20004c04

000086c4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    86c4:	4b01      	ldr	r3, [pc, #4]	; (86cc <z_impl_z_current_get+0x8>)
    86c6:	6898      	ldr	r0, [r3, #8]
    86c8:	4770      	bx	lr
    86ca:	bf00      	nop
    86cc:	20004c04 	.word	0x20004c04

000086d0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    86d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86d4:	4604      	mov	r4, r0
    86d6:	f04f 0320 	mov.w	r3, #32
    86da:	f3ef 8611 	mrs	r6, BASEPRI
    86de:	f383 8812 	msr	BASEPRI_MAX, r3
    86e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86e6:	4848      	ldr	r0, [pc, #288]	; (8808 <z_thread_abort+0x138>)
    86e8:	f7fe fd14 	bl	7114 <z_spin_lock_valid>
    86ec:	b968      	cbnz	r0, 870a <z_thread_abort+0x3a>
    86ee:	4a47      	ldr	r2, [pc, #284]	; (880c <z_thread_abort+0x13c>)
    86f0:	4947      	ldr	r1, [pc, #284]	; (8810 <z_thread_abort+0x140>)
    86f2:	4848      	ldr	r0, [pc, #288]	; (8814 <z_thread_abort+0x144>)
    86f4:	238e      	movs	r3, #142	; 0x8e
    86f6:	f001 f8ce 	bl	9896 <assert_print>
    86fa:	4943      	ldr	r1, [pc, #268]	; (8808 <z_thread_abort+0x138>)
    86fc:	4846      	ldr	r0, [pc, #280]	; (8818 <z_thread_abort+0x148>)
    86fe:	f001 f8ca 	bl	9896 <assert_print>
    8702:	4842      	ldr	r0, [pc, #264]	; (880c <z_thread_abort+0x13c>)
    8704:	218e      	movs	r1, #142	; 0x8e
    8706:	f001 f8bf 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    870a:	483f      	ldr	r0, [pc, #252]	; (8808 <z_thread_abort+0x138>)
    870c:	f7fe fd20 	bl	7150 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8710:	7b63      	ldrb	r3, [r4, #13]
    8712:	071a      	lsls	r2, r3, #28
    8714:	d517      	bpl.n	8746 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8716:	483c      	ldr	r0, [pc, #240]	; (8808 <z_thread_abort+0x138>)
    8718:	f7fe fd0a 	bl	7130 <z_spin_unlock_valid>
    871c:	b968      	cbnz	r0, 873a <z_thread_abort+0x6a>
    871e:	4a3b      	ldr	r2, [pc, #236]	; (880c <z_thread_abort+0x13c>)
    8720:	493e      	ldr	r1, [pc, #248]	; (881c <z_thread_abort+0x14c>)
    8722:	483c      	ldr	r0, [pc, #240]	; (8814 <z_thread_abort+0x144>)
    8724:	23b9      	movs	r3, #185	; 0xb9
    8726:	f001 f8b6 	bl	9896 <assert_print>
    872a:	4937      	ldr	r1, [pc, #220]	; (8808 <z_thread_abort+0x138>)
    872c:	483c      	ldr	r0, [pc, #240]	; (8820 <z_thread_abort+0x150>)
    872e:	f001 f8b2 	bl	9896 <assert_print>
    8732:	4836      	ldr	r0, [pc, #216]	; (880c <z_thread_abort+0x13c>)
    8734:	21b9      	movs	r1, #185	; 0xb9
    8736:	f001 f8a7 	bl	9888 <assert_post_action>
	__asm__ volatile(
    873a:	f386 8811 	msr	BASEPRI, r6
    873e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8746:	f023 0220 	bic.w	r2, r3, #32
    874a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    874e:	09d2      	lsrs	r2, r2, #7
    8750:	d142      	bne.n	87d8 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8752:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    8754:	68a3      	ldr	r3, [r4, #8]
    8756:	b113      	cbz	r3, 875e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    8758:	4620      	mov	r0, r4
    875a:	f7ff fd5b 	bl	8214 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    875e:	f104 0018 	add.w	r0, r4, #24
    8762:	f000 f999 	bl	8a98 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8766:	f104 0758 	add.w	r7, r4, #88	; 0x58
    876a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    876e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8770:	42bd      	cmp	r5, r7
    8772:	d001      	beq.n	8778 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8774:	2d00      	cmp	r5, #0
    8776:	d139      	bne.n	87ec <z_thread_abort+0x11c>
		update_cache(1);
    8778:	2001      	movs	r0, #1
    877a:	f7fe ffbd 	bl	76f8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    877e:	4b29      	ldr	r3, [pc, #164]	; (8824 <z_thread_abort+0x154>)
    8780:	689b      	ldr	r3, [r3, #8]
    8782:	42a3      	cmp	r3, r4
    8784:	d1c7      	bne.n	8716 <z_thread_abort+0x46>
    8786:	f3ef 8305 	mrs	r3, IPSR
    878a:	2b00      	cmp	r3, #0
    878c:	d1c3      	bne.n	8716 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    878e:	481e      	ldr	r0, [pc, #120]	; (8808 <z_thread_abort+0x138>)
    8790:	f7fe fcce 	bl	7130 <z_spin_unlock_valid>
    8794:	b968      	cbnz	r0, 87b2 <z_thread_abort+0xe2>
    8796:	4a1d      	ldr	r2, [pc, #116]	; (880c <z_thread_abort+0x13c>)
    8798:	4920      	ldr	r1, [pc, #128]	; (881c <z_thread_abort+0x14c>)
    879a:	481e      	ldr	r0, [pc, #120]	; (8814 <z_thread_abort+0x144>)
    879c:	23d0      	movs	r3, #208	; 0xd0
    879e:	f001 f87a 	bl	9896 <assert_print>
    87a2:	4919      	ldr	r1, [pc, #100]	; (8808 <z_thread_abort+0x138>)
    87a4:	481e      	ldr	r0, [pc, #120]	; (8820 <z_thread_abort+0x150>)
    87a6:	f001 f876 	bl	9896 <assert_print>
    87aa:	4818      	ldr	r0, [pc, #96]	; (880c <z_thread_abort+0x13c>)
    87ac:	21d0      	movs	r1, #208	; 0xd0
    87ae:	f001 f86b 	bl	9888 <assert_post_action>
    87b2:	4630      	mov	r0, r6
    87b4:	f7fb fb0a 	bl	3dcc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    87b8:	4a1b      	ldr	r2, [pc, #108]	; (8828 <z_thread_abort+0x158>)
    87ba:	491c      	ldr	r1, [pc, #112]	; (882c <z_thread_abort+0x15c>)
    87bc:	4815      	ldr	r0, [pc, #84]	; (8814 <z_thread_abort+0x144>)
    87be:	f240 63ac 	movw	r3, #1708	; 0x6ac
    87c2:	f001 f868 	bl	9896 <assert_print>
    87c6:	481a      	ldr	r0, [pc, #104]	; (8830 <z_thread_abort+0x160>)
    87c8:	f001 f865 	bl	9896 <assert_print>
    87cc:	4816      	ldr	r0, [pc, #88]	; (8828 <z_thread_abort+0x158>)
    87ce:	f240 61ac 	movw	r1, #1708	; 0x6ac
    87d2:	f001 f859 	bl	9888 <assert_post_action>
    87d6:	e79e      	b.n	8716 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    87d8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    87dc:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    87e0:	4814      	ldr	r0, [pc, #80]	; (8834 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    87e2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    87e4:	4621      	mov	r1, r4
    87e6:	f7ff fa41 	bl	7c6c <z_priq_dumb_remove>
}
    87ea:	e7b3      	b.n	8754 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    87ec:	4628      	mov	r0, r5
    87ee:	f7ff fd11 	bl	8214 <unpend_thread_no_timeout>
    87f2:	f105 0018 	add.w	r0, r5, #24
    87f6:	f000 f94f 	bl	8a98 <z_abort_timeout>
    87fa:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    87fe:	4628      	mov	r0, r5
    8800:	f7fe ffb2 	bl	7768 <ready_thread>
    8804:	e7b3      	b.n	876e <z_thread_abort+0x9e>
    8806:	bf00      	nop
    8808:	20004c40 	.word	0x20004c40
    880c:	0000aa10 	.word	0x0000aa10
    8810:	0000aa69 	.word	0x0000aa69
    8814:	0000a8c6 	.word	0x0000a8c6
    8818:	0000aa7e 	.word	0x0000aa7e
    881c:	0000aa3d 	.word	0x0000aa3d
    8820:	0000aa54 	.word	0x0000aa54
    8824:	20004c04 	.word	0x20004c04
    8828:	0000bf3c 	.word	0x0000bf3c
    882c:	0000c14d 	.word	0x0000c14d
    8830:	0000c02e 	.word	0x0000c02e
    8834:	20004c24 	.word	0x20004c24

00008838 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8838:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    883a:	4806      	ldr	r0, [pc, #24]	; (8854 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    883c:	4a06      	ldr	r2, [pc, #24]	; (8858 <z_data_copy+0x20>)
    883e:	4907      	ldr	r1, [pc, #28]	; (885c <z_data_copy+0x24>)
    8840:	1a12      	subs	r2, r2, r0
    8842:	f001 fba5 	bl	9f90 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    884a:	4a05      	ldr	r2, [pc, #20]	; (8860 <z_data_copy+0x28>)
    884c:	4905      	ldr	r1, [pc, #20]	; (8864 <z_data_copy+0x2c>)
    884e:	4806      	ldr	r0, [pc, #24]	; (8868 <z_data_copy+0x30>)
    8850:	f001 bb9e 	b.w	9f90 <z_early_memcpy>
    8854:	20000000 	.word	0x20000000
    8858:	200041c0 	.word	0x200041c0
    885c:	0000c330 	.word	0x0000c330
    8860:	00000000 	.word	0x00000000
    8864:	0000c330 	.word	0x0000c330
    8868:	20000000 	.word	0x20000000

0000886c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    886c:	4b03      	ldr	r3, [pc, #12]	; (887c <elapsed+0x10>)
    886e:	681b      	ldr	r3, [r3, #0]
    8870:	b90b      	cbnz	r3, 8876 <elapsed+0xa>
    8872:	f7fd b8ef 	b.w	5a54 <sys_clock_elapsed>
}
    8876:	2000      	movs	r0, #0
    8878:	4770      	bx	lr
    887a:	bf00      	nop
    887c:	20004c44 	.word	0x20004c44

00008880 <next_timeout>:
	return list->head == list;
    8880:	4b11      	ldr	r3, [pc, #68]	; (88c8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    8882:	b510      	push	{r4, lr}
    8884:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8886:	429c      	cmp	r4, r3
    8888:	d10a      	bne.n	88a0 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    888a:	f7ff ffef 	bl	886c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    888e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8892:	4b0e      	ldr	r3, [pc, #56]	; (88cc <next_timeout+0x4c>)
    8894:	691b      	ldr	r3, [r3, #16]
    8896:	b113      	cbz	r3, 889e <next_timeout+0x1e>
    8898:	4298      	cmp	r0, r3
    889a:	bfa8      	it	ge
    889c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    889e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    88a0:	f7ff ffe4 	bl	886c <elapsed>
	if ((to == NULL) ||
    88a4:	2c00      	cmp	r4, #0
    88a6:	d0f2      	beq.n	888e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    88a8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    88ac:	1a1b      	subs	r3, r3, r0
    88ae:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    88b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    88b6:	f172 0100 	sbcs.w	r1, r2, #0
    88ba:	dae8      	bge.n	888e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    88bc:	2a00      	cmp	r2, #0
    88be:	bfac      	ite	ge
    88c0:	4618      	movge	r0, r3
    88c2:	2000      	movlt	r0, #0
    88c4:	e7e5      	b.n	8892 <next_timeout+0x12>
    88c6:	bf00      	nop
    88c8:	200000dc 	.word	0x200000dc
    88cc:	20004c04 	.word	0x20004c04

000088d0 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    88d0:	4a0b      	ldr	r2, [pc, #44]	; (8900 <remove_timeout+0x30>)
    88d2:	6803      	ldr	r3, [r0, #0]
    88d4:	6852      	ldr	r2, [r2, #4]
    88d6:	4290      	cmp	r0, r2
{
    88d8:	b530      	push	{r4, r5, lr}
    88da:	d009      	beq.n	88f0 <remove_timeout+0x20>
	if (next(t) != NULL) {
    88dc:	b143      	cbz	r3, 88f0 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    88de:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    88e2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    88e6:	1912      	adds	r2, r2, r4
    88e8:	eb41 0105 	adc.w	r1, r1, r5
    88ec:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    88f0:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    88f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    88f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    88f6:	2300      	movs	r3, #0
	node->prev = NULL;
    88f8:	e9c0 3300 	strd	r3, r3, [r0]
}
    88fc:	bd30      	pop	{r4, r5, pc}
    88fe:	bf00      	nop
    8900:	200000dc 	.word	0x200000dc

00008904 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8908:	bf08      	it	eq
    890a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    890e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8912:	4604      	mov	r4, r0
    8914:	460e      	mov	r6, r1
    8916:	4691      	mov	r9, r2
    8918:	461d      	mov	r5, r3
    891a:	4617      	mov	r7, r2
    891c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    891e:	f000 8095 	beq.w	8a4c <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    8922:	6803      	ldr	r3, [r0, #0]
    8924:	b163      	cbz	r3, 8940 <z_add_timeout+0x3c>
    8926:	494f      	ldr	r1, [pc, #316]	; (8a64 <z_add_timeout+0x160>)
    8928:	4a4f      	ldr	r2, [pc, #316]	; (8a68 <z_add_timeout+0x164>)
    892a:	4850      	ldr	r0, [pc, #320]	; (8a6c <z_add_timeout+0x168>)
    892c:	2363      	movs	r3, #99	; 0x63
    892e:	f000 ffb2 	bl	9896 <assert_print>
    8932:	484f      	ldr	r0, [pc, #316]	; (8a70 <z_add_timeout+0x16c>)
    8934:	f000 ffaf 	bl	9896 <assert_print>
    8938:	484b      	ldr	r0, [pc, #300]	; (8a68 <z_add_timeout+0x164>)
    893a:	2163      	movs	r1, #99	; 0x63
    893c:	f000 ffa4 	bl	9888 <assert_post_action>
	to->fn = fn;
    8940:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    8942:	f04f 0320 	mov.w	r3, #32
    8946:	f3ef 8611 	mrs	r6, BASEPRI
    894a:	f383 8812 	msr	BASEPRI_MAX, r3
    894e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8952:	4848      	ldr	r0, [pc, #288]	; (8a74 <z_add_timeout+0x170>)
    8954:	f7fe fbde 	bl	7114 <z_spin_lock_valid>
    8958:	b968      	cbnz	r0, 8976 <z_add_timeout+0x72>
    895a:	4a47      	ldr	r2, [pc, #284]	; (8a78 <z_add_timeout+0x174>)
    895c:	4947      	ldr	r1, [pc, #284]	; (8a7c <z_add_timeout+0x178>)
    895e:	4843      	ldr	r0, [pc, #268]	; (8a6c <z_add_timeout+0x168>)
    8960:	238e      	movs	r3, #142	; 0x8e
    8962:	f000 ff98 	bl	9896 <assert_print>
    8966:	4943      	ldr	r1, [pc, #268]	; (8a74 <z_add_timeout+0x170>)
    8968:	4845      	ldr	r0, [pc, #276]	; (8a80 <z_add_timeout+0x17c>)
    896a:	f000 ff94 	bl	9896 <assert_print>
    896e:	4842      	ldr	r0, [pc, #264]	; (8a78 <z_add_timeout+0x174>)
    8970:	218e      	movs	r1, #142	; 0x8e
    8972:	f000 ff89 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8976:	483f      	ldr	r0, [pc, #252]	; (8a74 <z_add_timeout+0x170>)
    8978:	f7fe fbea 	bl	7150 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    897c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    8980:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    8984:	da22      	bge.n	89cc <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8986:	493f      	ldr	r1, [pc, #252]	; (8a84 <z_add_timeout+0x180>)
    8988:	e9d1 2000 	ldrd	r2, r0, [r1]
    898c:	f06f 0301 	mvn.w	r3, #1
    8990:	1a9b      	subs	r3, r3, r2
    8992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8996:	eb62 0000 	sbc.w	r0, r2, r0
    899a:	1bdf      	subs	r7, r3, r7
    899c:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    89a0:	2f01      	cmp	r7, #1
    89a2:	f170 0300 	sbcs.w	r3, r0, #0
    89a6:	da01      	bge.n	89ac <z_add_timeout+0xa8>
    89a8:	2701      	movs	r7, #1
    89aa:	2000      	movs	r0, #0
	return list->head == list;
    89ac:	4a36      	ldr	r2, [pc, #216]	; (8a88 <z_add_timeout+0x184>)
    89ae:	e9c4 7004 	strd	r7, r0, [r4, #16]
    89b2:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    89b4:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89b8:	4293      	cmp	r3, r2
    89ba:	bf08      	it	eq
    89bc:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    89be:	b973      	cbnz	r3, 89de <z_add_timeout+0xda>
	node->prev = tail;
    89c0:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    89c4:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    89c8:	6054      	str	r4, [r2, #4]
}
    89ca:	e01a      	b.n	8a02 <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    89cc:	f7ff ff4e 	bl	886c <elapsed>
    89d0:	3701      	adds	r7, #1
    89d2:	f145 0500 	adc.w	r5, r5, #0
    89d6:	183f      	adds	r7, r7, r0
    89d8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    89dc:	e7e6      	b.n	89ac <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    89de:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    89e2:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    89e6:	4281      	cmp	r1, r0
    89e8:	eb75 0e07 	sbcs.w	lr, r5, r7
    89ec:	da30      	bge.n	8a50 <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    89ee:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    89f0:	6859      	ldr	r1, [r3, #4]
    89f2:	eb67 0705 	sbc.w	r7, r7, r5
    89f6:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    89fa:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    89fe:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8a00:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8a02:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a04:	4293      	cmp	r3, r2
    8a06:	d00b      	beq.n	8a20 <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8a08:	429c      	cmp	r4, r3
    8a0a:	d109      	bne.n	8a20 <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8a0c:	f7ff ff38 	bl	8880 <next_timeout>

			if (next_time == 0 ||
    8a10:	b118      	cbz	r0, 8a1a <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    8a12:	4b1e      	ldr	r3, [pc, #120]	; (8a8c <z_add_timeout+0x188>)
			if (next_time == 0 ||
    8a14:	691b      	ldr	r3, [r3, #16]
    8a16:	4283      	cmp	r3, r0
    8a18:	d002      	beq.n	8a20 <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    8a1a:	2100      	movs	r1, #0
    8a1c:	f7fc ffe8 	bl	59f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a20:	4814      	ldr	r0, [pc, #80]	; (8a74 <z_add_timeout+0x170>)
    8a22:	f7fe fb85 	bl	7130 <z_spin_unlock_valid>
    8a26:	b968      	cbnz	r0, 8a44 <z_add_timeout+0x140>
    8a28:	4a13      	ldr	r2, [pc, #76]	; (8a78 <z_add_timeout+0x174>)
    8a2a:	4919      	ldr	r1, [pc, #100]	; (8a90 <z_add_timeout+0x18c>)
    8a2c:	480f      	ldr	r0, [pc, #60]	; (8a6c <z_add_timeout+0x168>)
    8a2e:	23b9      	movs	r3, #185	; 0xb9
    8a30:	f000 ff31 	bl	9896 <assert_print>
    8a34:	490f      	ldr	r1, [pc, #60]	; (8a74 <z_add_timeout+0x170>)
    8a36:	4817      	ldr	r0, [pc, #92]	; (8a94 <z_add_timeout+0x190>)
    8a38:	f000 ff2d 	bl	9896 <assert_print>
    8a3c:	480e      	ldr	r0, [pc, #56]	; (8a78 <z_add_timeout+0x174>)
    8a3e:	21b9      	movs	r1, #185	; 0xb9
    8a40:	f000 ff22 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8a44:	f386 8811 	msr	BASEPRI, r6
    8a48:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    8a50:	1a09      	subs	r1, r1, r0
    8a52:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8a56:	4563      	cmp	r3, ip
    8a58:	e9c4 1504 	strd	r1, r5, [r4, #16]
    8a5c:	d0b0      	beq.n	89c0 <z_add_timeout+0xbc>
    8a5e:	681b      	ldr	r3, [r3, #0]
    8a60:	e7ad      	b.n	89be <z_add_timeout+0xba>
    8a62:	bf00      	nop
    8a64:	0000c074 	.word	0x0000c074
    8a68:	0000c050 	.word	0x0000c050
    8a6c:	0000a8c6 	.word	0x0000a8c6
    8a70:	0000be9a 	.word	0x0000be9a
    8a74:	20004c48 	.word	0x20004c48
    8a78:	0000aa10 	.word	0x0000aa10
    8a7c:	0000aa69 	.word	0x0000aa69
    8a80:	0000aa7e 	.word	0x0000aa7e
    8a84:	200044e0 	.word	0x200044e0
    8a88:	200000dc 	.word	0x200000dc
    8a8c:	20004c04 	.word	0x20004c04
    8a90:	0000aa3d 	.word	0x0000aa3d
    8a94:	0000aa54 	.word	0x0000aa54

00008a98 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8a98:	b538      	push	{r3, r4, r5, lr}
    8a9a:	4604      	mov	r4, r0
	__asm__ volatile(
    8a9c:	f04f 0320 	mov.w	r3, #32
    8aa0:	f3ef 8511 	mrs	r5, BASEPRI
    8aa4:	f383 8812 	msr	BASEPRI_MAX, r3
    8aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8aac:	481a      	ldr	r0, [pc, #104]	; (8b18 <z_abort_timeout+0x80>)
    8aae:	f7fe fb31 	bl	7114 <z_spin_lock_valid>
    8ab2:	b968      	cbnz	r0, 8ad0 <z_abort_timeout+0x38>
    8ab4:	4a19      	ldr	r2, [pc, #100]	; (8b1c <z_abort_timeout+0x84>)
    8ab6:	491a      	ldr	r1, [pc, #104]	; (8b20 <z_abort_timeout+0x88>)
    8ab8:	481a      	ldr	r0, [pc, #104]	; (8b24 <z_abort_timeout+0x8c>)
    8aba:	238e      	movs	r3, #142	; 0x8e
    8abc:	f000 feeb 	bl	9896 <assert_print>
    8ac0:	4915      	ldr	r1, [pc, #84]	; (8b18 <z_abort_timeout+0x80>)
    8ac2:	4819      	ldr	r0, [pc, #100]	; (8b28 <z_abort_timeout+0x90>)
    8ac4:	f000 fee7 	bl	9896 <assert_print>
    8ac8:	4814      	ldr	r0, [pc, #80]	; (8b1c <z_abort_timeout+0x84>)
    8aca:	218e      	movs	r1, #142	; 0x8e
    8acc:	f000 fedc 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8ad0:	4811      	ldr	r0, [pc, #68]	; (8b18 <z_abort_timeout+0x80>)
    8ad2:	f7fe fb3d 	bl	7150 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8ad6:	6823      	ldr	r3, [r4, #0]
    8ad8:	b1db      	cbz	r3, 8b12 <z_abort_timeout+0x7a>
			remove_timeout(to);
    8ada:	4620      	mov	r0, r4
    8adc:	f7ff fef8 	bl	88d0 <remove_timeout>
			ret = 0;
    8ae0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ae2:	480d      	ldr	r0, [pc, #52]	; (8b18 <z_abort_timeout+0x80>)
    8ae4:	f7fe fb24 	bl	7130 <z_spin_unlock_valid>
    8ae8:	b968      	cbnz	r0, 8b06 <z_abort_timeout+0x6e>
    8aea:	4a0c      	ldr	r2, [pc, #48]	; (8b1c <z_abort_timeout+0x84>)
    8aec:	490f      	ldr	r1, [pc, #60]	; (8b2c <z_abort_timeout+0x94>)
    8aee:	480d      	ldr	r0, [pc, #52]	; (8b24 <z_abort_timeout+0x8c>)
    8af0:	23b9      	movs	r3, #185	; 0xb9
    8af2:	f000 fed0 	bl	9896 <assert_print>
    8af6:	4908      	ldr	r1, [pc, #32]	; (8b18 <z_abort_timeout+0x80>)
    8af8:	480d      	ldr	r0, [pc, #52]	; (8b30 <z_abort_timeout+0x98>)
    8afa:	f000 fecc 	bl	9896 <assert_print>
    8afe:	4807      	ldr	r0, [pc, #28]	; (8b1c <z_abort_timeout+0x84>)
    8b00:	21b9      	movs	r1, #185	; 0xb9
    8b02:	f000 fec1 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8b06:	f385 8811 	msr	BASEPRI, r5
    8b0a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8b0e:	4620      	mov	r0, r4
    8b10:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    8b12:	f06f 0415 	mvn.w	r4, #21
    8b16:	e7e4      	b.n	8ae2 <z_abort_timeout+0x4a>
    8b18:	20004c48 	.word	0x20004c48
    8b1c:	0000aa10 	.word	0x0000aa10
    8b20:	0000aa69 	.word	0x0000aa69
    8b24:	0000a8c6 	.word	0x0000a8c6
    8b28:	0000aa7e 	.word	0x0000aa7e
    8b2c:	0000aa3d 	.word	0x0000aa3d
    8b30:	0000aa54 	.word	0x0000aa54

00008b34 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8b34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8b36:	f04f 0320 	mov.w	r3, #32
    8b3a:	f3ef 8511 	mrs	r5, BASEPRI
    8b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    8b42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b46:	4818      	ldr	r0, [pc, #96]	; (8ba8 <z_get_next_timeout_expiry+0x74>)
    8b48:	f7fe fae4 	bl	7114 <z_spin_lock_valid>
    8b4c:	b968      	cbnz	r0, 8b6a <z_get_next_timeout_expiry+0x36>
    8b4e:	4a17      	ldr	r2, [pc, #92]	; (8bac <z_get_next_timeout_expiry+0x78>)
    8b50:	4917      	ldr	r1, [pc, #92]	; (8bb0 <z_get_next_timeout_expiry+0x7c>)
    8b52:	4818      	ldr	r0, [pc, #96]	; (8bb4 <z_get_next_timeout_expiry+0x80>)
    8b54:	238e      	movs	r3, #142	; 0x8e
    8b56:	f000 fe9e 	bl	9896 <assert_print>
    8b5a:	4913      	ldr	r1, [pc, #76]	; (8ba8 <z_get_next_timeout_expiry+0x74>)
    8b5c:	4816      	ldr	r0, [pc, #88]	; (8bb8 <z_get_next_timeout_expiry+0x84>)
    8b5e:	f000 fe9a 	bl	9896 <assert_print>
    8b62:	4812      	ldr	r0, [pc, #72]	; (8bac <z_get_next_timeout_expiry+0x78>)
    8b64:	218e      	movs	r1, #142	; 0x8e
    8b66:	f000 fe8f 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b6a:	480f      	ldr	r0, [pc, #60]	; (8ba8 <z_get_next_timeout_expiry+0x74>)
    8b6c:	f7fe faf0 	bl	7150 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    8b70:	f7ff fe86 	bl	8880 <next_timeout>
    8b74:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b76:	480c      	ldr	r0, [pc, #48]	; (8ba8 <z_get_next_timeout_expiry+0x74>)
    8b78:	f7fe fada 	bl	7130 <z_spin_unlock_valid>
    8b7c:	b968      	cbnz	r0, 8b9a <z_get_next_timeout_expiry+0x66>
    8b7e:	4a0b      	ldr	r2, [pc, #44]	; (8bac <z_get_next_timeout_expiry+0x78>)
    8b80:	490e      	ldr	r1, [pc, #56]	; (8bbc <z_get_next_timeout_expiry+0x88>)
    8b82:	480c      	ldr	r0, [pc, #48]	; (8bb4 <z_get_next_timeout_expiry+0x80>)
    8b84:	23b9      	movs	r3, #185	; 0xb9
    8b86:	f000 fe86 	bl	9896 <assert_print>
    8b8a:	4907      	ldr	r1, [pc, #28]	; (8ba8 <z_get_next_timeout_expiry+0x74>)
    8b8c:	480c      	ldr	r0, [pc, #48]	; (8bc0 <z_get_next_timeout_expiry+0x8c>)
    8b8e:	f000 fe82 	bl	9896 <assert_print>
    8b92:	4806      	ldr	r0, [pc, #24]	; (8bac <z_get_next_timeout_expiry+0x78>)
    8b94:	21b9      	movs	r1, #185	; 0xb9
    8b96:	f000 fe77 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8b9a:	f385 8811 	msr	BASEPRI, r5
    8b9e:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    8ba2:	4620      	mov	r0, r4
    8ba4:	bd38      	pop	{r3, r4, r5, pc}
    8ba6:	bf00      	nop
    8ba8:	20004c48 	.word	0x20004c48
    8bac:	0000aa10 	.word	0x0000aa10
    8bb0:	0000aa69 	.word	0x0000aa69
    8bb4:	0000a8c6 	.word	0x0000a8c6
    8bb8:	0000aa7e 	.word	0x0000aa7e
    8bbc:	0000aa3d 	.word	0x0000aa3d
    8bc0:	0000aa54 	.word	0x0000aa54

00008bc4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8bc4:	b570      	push	{r4, r5, r6, lr}
    8bc6:	4604      	mov	r4, r0
    8bc8:	460d      	mov	r5, r1
	__asm__ volatile(
    8bca:	f04f 0320 	mov.w	r3, #32
    8bce:	f3ef 8611 	mrs	r6, BASEPRI
    8bd2:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bda:	481c      	ldr	r0, [pc, #112]	; (8c4c <z_set_timeout_expiry+0x88>)
    8bdc:	f7fe fa9a 	bl	7114 <z_spin_lock_valid>
    8be0:	b968      	cbnz	r0, 8bfe <z_set_timeout_expiry+0x3a>
    8be2:	4a1b      	ldr	r2, [pc, #108]	; (8c50 <z_set_timeout_expiry+0x8c>)
    8be4:	491b      	ldr	r1, [pc, #108]	; (8c54 <z_set_timeout_expiry+0x90>)
    8be6:	481c      	ldr	r0, [pc, #112]	; (8c58 <z_set_timeout_expiry+0x94>)
    8be8:	238e      	movs	r3, #142	; 0x8e
    8bea:	f000 fe54 	bl	9896 <assert_print>
    8bee:	4917      	ldr	r1, [pc, #92]	; (8c4c <z_set_timeout_expiry+0x88>)
    8bf0:	481a      	ldr	r0, [pc, #104]	; (8c5c <z_set_timeout_expiry+0x98>)
    8bf2:	f000 fe50 	bl	9896 <assert_print>
    8bf6:	4816      	ldr	r0, [pc, #88]	; (8c50 <z_set_timeout_expiry+0x8c>)
    8bf8:	218e      	movs	r1, #142	; 0x8e
    8bfa:	f000 fe45 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8bfe:	4813      	ldr	r0, [pc, #76]	; (8c4c <z_set_timeout_expiry+0x88>)
    8c00:	f7fe faa6 	bl	7150 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8c04:	f7ff fe3c 	bl	8880 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    8c08:	2801      	cmp	r0, #1
    8c0a:	dd07      	ble.n	8c1c <z_set_timeout_expiry+0x58>
    8c0c:	42a0      	cmp	r0, r4
    8c0e:	db05      	blt.n	8c1c <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8c10:	42a0      	cmp	r0, r4
    8c12:	4629      	mov	r1, r5
    8c14:	bfa8      	it	ge
    8c16:	4620      	movge	r0, r4
    8c18:	f7fc feea 	bl	59f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c1c:	480b      	ldr	r0, [pc, #44]	; (8c4c <z_set_timeout_expiry+0x88>)
    8c1e:	f7fe fa87 	bl	7130 <z_spin_unlock_valid>
    8c22:	b968      	cbnz	r0, 8c40 <z_set_timeout_expiry+0x7c>
    8c24:	4a0a      	ldr	r2, [pc, #40]	; (8c50 <z_set_timeout_expiry+0x8c>)
    8c26:	490e      	ldr	r1, [pc, #56]	; (8c60 <z_set_timeout_expiry+0x9c>)
    8c28:	480b      	ldr	r0, [pc, #44]	; (8c58 <z_set_timeout_expiry+0x94>)
    8c2a:	23b9      	movs	r3, #185	; 0xb9
    8c2c:	f000 fe33 	bl	9896 <assert_print>
    8c30:	4906      	ldr	r1, [pc, #24]	; (8c4c <z_set_timeout_expiry+0x88>)
    8c32:	480c      	ldr	r0, [pc, #48]	; (8c64 <z_set_timeout_expiry+0xa0>)
    8c34:	f000 fe2f 	bl	9896 <assert_print>
    8c38:	4805      	ldr	r0, [pc, #20]	; (8c50 <z_set_timeout_expiry+0x8c>)
    8c3a:	21b9      	movs	r1, #185	; 0xb9
    8c3c:	f000 fe24 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8c40:	f386 8811 	msr	BASEPRI, r6
    8c44:	f3bf 8f6f 	isb	sy
		}
	}
}
    8c48:	bd70      	pop	{r4, r5, r6, pc}
    8c4a:	bf00      	nop
    8c4c:	20004c48 	.word	0x20004c48
    8c50:	0000aa10 	.word	0x0000aa10
    8c54:	0000aa69 	.word	0x0000aa69
    8c58:	0000a8c6 	.word	0x0000a8c6
    8c5c:	0000aa7e 	.word	0x0000aa7e
    8c60:	0000aa3d 	.word	0x0000aa3d
    8c64:	0000aa54 	.word	0x0000aa54

00008c68 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c6c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8c6e:	f7ff f871 	bl	7d54 <z_time_slice>
	__asm__ volatile(
    8c72:	f04f 0320 	mov.w	r3, #32
    8c76:	f3ef 8511 	mrs	r5, BASEPRI
    8c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c82:	484c      	ldr	r0, [pc, #304]	; (8db4 <sys_clock_announce+0x14c>)
    8c84:	f7fe fa46 	bl	7114 <z_spin_lock_valid>
    8c88:	b968      	cbnz	r0, 8ca6 <sys_clock_announce+0x3e>
    8c8a:	4a4b      	ldr	r2, [pc, #300]	; (8db8 <sys_clock_announce+0x150>)
    8c8c:	494b      	ldr	r1, [pc, #300]	; (8dbc <sys_clock_announce+0x154>)
    8c8e:	484c      	ldr	r0, [pc, #304]	; (8dc0 <sys_clock_announce+0x158>)
    8c90:	238e      	movs	r3, #142	; 0x8e
    8c92:	f000 fe00 	bl	9896 <assert_print>
    8c96:	4947      	ldr	r1, [pc, #284]	; (8db4 <sys_clock_announce+0x14c>)
    8c98:	484a      	ldr	r0, [pc, #296]	; (8dc4 <sys_clock_announce+0x15c>)
    8c9a:	f000 fdfc 	bl	9896 <assert_print>
    8c9e:	4846      	ldr	r0, [pc, #280]	; (8db8 <sys_clock_announce+0x150>)
    8ca0:	218e      	movs	r1, #142	; 0x8e
    8ca2:	f000 fdf1 	bl	9888 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    8ca6:	4f48      	ldr	r7, [pc, #288]	; (8dc8 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    8ca8:	4842      	ldr	r0, [pc, #264]	; (8db4 <sys_clock_announce+0x14c>)
	return list->head == list;
    8caa:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8dcc <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    8cae:	4e48      	ldr	r6, [pc, #288]	; (8dd0 <sys_clock_announce+0x168>)
    8cb0:	f7fe fa4e 	bl	7150 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    8cb4:	603c      	str	r4, [r7, #0]
    8cb6:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8cba:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8cbc:	4544      	cmp	r4, r8
		curr_tick += dt;
    8cbe:	e9d6 1e00 	ldrd	r1, lr, [r6]
    8cc2:	ea4f 70e2 	mov.w	r0, r2, asr #31
    8cc6:	d00b      	beq.n	8ce0 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8cc8:	b154      	cbz	r4, 8ce0 <sys_clock_announce+0x78>
    8cca:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    8cce:	429a      	cmp	r2, r3
    8cd0:	eb70 090c 	sbcs.w	r9, r0, ip
    8cd4:	da28      	bge.n	8d28 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8cd6:	1a9b      	subs	r3, r3, r2
    8cd8:	eb6c 0c00 	sbc.w	ip, ip, r0
    8cdc:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    8ce0:	1851      	adds	r1, r2, r1
    8ce2:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    8ce6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8ce8:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    8cec:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    8cee:	f7ff fdc7 	bl	8880 <next_timeout>
    8cf2:	4621      	mov	r1, r4
    8cf4:	f7fc fe7c 	bl	59f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cf8:	482e      	ldr	r0, [pc, #184]	; (8db4 <sys_clock_announce+0x14c>)
    8cfa:	f7fe fa19 	bl	7130 <z_spin_unlock_valid>
    8cfe:	b968      	cbnz	r0, 8d1c <sys_clock_announce+0xb4>
    8d00:	4a2d      	ldr	r2, [pc, #180]	; (8db8 <sys_clock_announce+0x150>)
    8d02:	4934      	ldr	r1, [pc, #208]	; (8dd4 <sys_clock_announce+0x16c>)
    8d04:	482e      	ldr	r0, [pc, #184]	; (8dc0 <sys_clock_announce+0x158>)
    8d06:	23b9      	movs	r3, #185	; 0xb9
    8d08:	f000 fdc5 	bl	9896 <assert_print>
    8d0c:	4929      	ldr	r1, [pc, #164]	; (8db4 <sys_clock_announce+0x14c>)
    8d0e:	4832      	ldr	r0, [pc, #200]	; (8dd8 <sys_clock_announce+0x170>)
    8d10:	f000 fdc1 	bl	9896 <assert_print>
    8d14:	4828      	ldr	r0, [pc, #160]	; (8db8 <sys_clock_announce+0x150>)
    8d16:	21b9      	movs	r1, #185	; 0xb9
    8d18:	f000 fdb6 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8d1c:	f385 8811 	msr	BASEPRI, r5
    8d20:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8d28:	1859      	adds	r1, r3, r1
    8d2a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    8d2e:	1ad3      	subs	r3, r2, r3
    8d30:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    8d32:	2200      	movs	r2, #0
    8d34:	2300      	movs	r3, #0
		curr_tick += dt;
    8d36:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    8d3a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    8d3e:	4620      	mov	r0, r4
    8d40:	f7ff fdc6 	bl	88d0 <remove_timeout>
    8d44:	481b      	ldr	r0, [pc, #108]	; (8db4 <sys_clock_announce+0x14c>)
    8d46:	f7fe f9f3 	bl	7130 <z_spin_unlock_valid>
    8d4a:	b968      	cbnz	r0, 8d68 <sys_clock_announce+0x100>
    8d4c:	4a1a      	ldr	r2, [pc, #104]	; (8db8 <sys_clock_announce+0x150>)
    8d4e:	4921      	ldr	r1, [pc, #132]	; (8dd4 <sys_clock_announce+0x16c>)
    8d50:	481b      	ldr	r0, [pc, #108]	; (8dc0 <sys_clock_announce+0x158>)
    8d52:	23b9      	movs	r3, #185	; 0xb9
    8d54:	f000 fd9f 	bl	9896 <assert_print>
    8d58:	4916      	ldr	r1, [pc, #88]	; (8db4 <sys_clock_announce+0x14c>)
    8d5a:	481f      	ldr	r0, [pc, #124]	; (8dd8 <sys_clock_announce+0x170>)
    8d5c:	f000 fd9b 	bl	9896 <assert_print>
    8d60:	4815      	ldr	r0, [pc, #84]	; (8db8 <sys_clock_announce+0x150>)
    8d62:	21b9      	movs	r1, #185	; 0xb9
    8d64:	f000 fd90 	bl	9888 <assert_post_action>
    8d68:	f385 8811 	msr	BASEPRI, r5
    8d6c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8d70:	68a3      	ldr	r3, [r4, #8]
    8d72:	4620      	mov	r0, r4
    8d74:	4798      	blx	r3
	__asm__ volatile(
    8d76:	f04f 0320 	mov.w	r3, #32
    8d7a:	f3ef 8511 	mrs	r5, BASEPRI
    8d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d86:	480b      	ldr	r0, [pc, #44]	; (8db4 <sys_clock_announce+0x14c>)
    8d88:	f7fe f9c4 	bl	7114 <z_spin_lock_valid>
    8d8c:	b968      	cbnz	r0, 8daa <sys_clock_announce+0x142>
    8d8e:	4a0a      	ldr	r2, [pc, #40]	; (8db8 <sys_clock_announce+0x150>)
    8d90:	490a      	ldr	r1, [pc, #40]	; (8dbc <sys_clock_announce+0x154>)
    8d92:	480b      	ldr	r0, [pc, #44]	; (8dc0 <sys_clock_announce+0x158>)
    8d94:	238e      	movs	r3, #142	; 0x8e
    8d96:	f000 fd7e 	bl	9896 <assert_print>
    8d9a:	4906      	ldr	r1, [pc, #24]	; (8db4 <sys_clock_announce+0x14c>)
    8d9c:	4809      	ldr	r0, [pc, #36]	; (8dc4 <sys_clock_announce+0x15c>)
    8d9e:	f000 fd7a 	bl	9896 <assert_print>
    8da2:	4805      	ldr	r0, [pc, #20]	; (8db8 <sys_clock_announce+0x150>)
    8da4:	218e      	movs	r1, #142	; 0x8e
    8da6:	f000 fd6f 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8daa:	4802      	ldr	r0, [pc, #8]	; (8db4 <sys_clock_announce+0x14c>)
    8dac:	f7fe f9d0 	bl	7150 <z_spin_lock_set_owner>
	return k;
    8db0:	e781      	b.n	8cb6 <sys_clock_announce+0x4e>
    8db2:	bf00      	nop
    8db4:	20004c48 	.word	0x20004c48
    8db8:	0000aa10 	.word	0x0000aa10
    8dbc:	0000aa69 	.word	0x0000aa69
    8dc0:	0000a8c6 	.word	0x0000a8c6
    8dc4:	0000aa7e 	.word	0x0000aa7e
    8dc8:	20004c44 	.word	0x20004c44
    8dcc:	200000dc 	.word	0x200000dc
    8dd0:	200044e0 	.word	0x200044e0
    8dd4:	0000aa3d 	.word	0x0000aa3d
    8dd8:	0000aa54 	.word	0x0000aa54

00008ddc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8ddc:	b570      	push	{r4, r5, r6, lr}
    8dde:	f04f 0320 	mov.w	r3, #32
    8de2:	f3ef 8611 	mrs	r6, BASEPRI
    8de6:	f383 8812 	msr	BASEPRI_MAX, r3
    8dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8dee:	481b      	ldr	r0, [pc, #108]	; (8e5c <sys_clock_tick_get+0x80>)
    8df0:	f7fe f990 	bl	7114 <z_spin_lock_valid>
    8df4:	b968      	cbnz	r0, 8e12 <sys_clock_tick_get+0x36>
    8df6:	4a1a      	ldr	r2, [pc, #104]	; (8e60 <sys_clock_tick_get+0x84>)
    8df8:	491a      	ldr	r1, [pc, #104]	; (8e64 <sys_clock_tick_get+0x88>)
    8dfa:	481b      	ldr	r0, [pc, #108]	; (8e68 <sys_clock_tick_get+0x8c>)
    8dfc:	238e      	movs	r3, #142	; 0x8e
    8dfe:	f000 fd4a 	bl	9896 <assert_print>
    8e02:	4916      	ldr	r1, [pc, #88]	; (8e5c <sys_clock_tick_get+0x80>)
    8e04:	4819      	ldr	r0, [pc, #100]	; (8e6c <sys_clock_tick_get+0x90>)
    8e06:	f000 fd46 	bl	9896 <assert_print>
    8e0a:	4815      	ldr	r0, [pc, #84]	; (8e60 <sys_clock_tick_get+0x84>)
    8e0c:	218e      	movs	r1, #142	; 0x8e
    8e0e:	f000 fd3b 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    8e12:	4812      	ldr	r0, [pc, #72]	; (8e5c <sys_clock_tick_get+0x80>)
    8e14:	f7fe f99c 	bl	7150 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8e18:	f7fc fe1c 	bl	5a54 <sys_clock_elapsed>
    8e1c:	4a14      	ldr	r2, [pc, #80]	; (8e70 <sys_clock_tick_get+0x94>)
    8e1e:	e9d2 4500 	ldrd	r4, r5, [r2]
    8e22:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e24:	480d      	ldr	r0, [pc, #52]	; (8e5c <sys_clock_tick_get+0x80>)
    8e26:	f145 0500 	adc.w	r5, r5, #0
    8e2a:	f7fe f981 	bl	7130 <z_spin_unlock_valid>
    8e2e:	b968      	cbnz	r0, 8e4c <sys_clock_tick_get+0x70>
    8e30:	4a0b      	ldr	r2, [pc, #44]	; (8e60 <sys_clock_tick_get+0x84>)
    8e32:	4910      	ldr	r1, [pc, #64]	; (8e74 <sys_clock_tick_get+0x98>)
    8e34:	480c      	ldr	r0, [pc, #48]	; (8e68 <sys_clock_tick_get+0x8c>)
    8e36:	23b9      	movs	r3, #185	; 0xb9
    8e38:	f000 fd2d 	bl	9896 <assert_print>
    8e3c:	4907      	ldr	r1, [pc, #28]	; (8e5c <sys_clock_tick_get+0x80>)
    8e3e:	480e      	ldr	r0, [pc, #56]	; (8e78 <sys_clock_tick_get+0x9c>)
    8e40:	f000 fd29 	bl	9896 <assert_print>
    8e44:	4806      	ldr	r0, [pc, #24]	; (8e60 <sys_clock_tick_get+0x84>)
    8e46:	21b9      	movs	r1, #185	; 0xb9
    8e48:	f000 fd1e 	bl	9888 <assert_post_action>
	__asm__ volatile(
    8e4c:	f386 8811 	msr	BASEPRI, r6
    8e50:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8e54:	4620      	mov	r0, r4
    8e56:	4629      	mov	r1, r5
    8e58:	bd70      	pop	{r4, r5, r6, pc}
    8e5a:	bf00      	nop
    8e5c:	20004c48 	.word	0x20004c48
    8e60:	0000aa10 	.word	0x0000aa10
    8e64:	0000aa69 	.word	0x0000aa69
    8e68:	0000a8c6 	.word	0x0000a8c6
    8e6c:	0000aa7e 	.word	0x0000aa7e
    8e70:	200044e0 	.word	0x200044e0
    8e74:	0000aa3d 	.word	0x0000aa3d
    8e78:	0000aa54 	.word	0x0000aa54

00008e7c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    8e7c:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    8e7e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    8e82:	4606      	mov	r6, r0
    8e84:	460d      	mov	r5, r1
    8e86:	d20b      	bcs.n	8ea0 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    8e88:	f04f 0800 	mov.w	r8, #0
    8e8c:	f04f 0900 	mov.w	r9, #0
    8e90:	e9cd 8900 	strd	r8, r9, [sp]
    8e94:	f041 0104 	orr.w	r1, r1, #4
    8e98:	f000 f89c 	bl	8fd4 <k_heap_aligned_alloc>
	if (mem == NULL) {
    8e9c:	4604      	mov	r4, r0
    8e9e:	b920      	cbnz	r0, 8eaa <z_heap_aligned_alloc+0x2e>
		return NULL;
    8ea0:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    8ea2:	4620      	mov	r0, r4
    8ea4:	b002      	add	sp, #8
    8ea6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    8eaa:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    8eae:	2d00      	cmp	r5, #0
    8eb0:	d0f7      	beq.n	8ea2 <z_heap_aligned_alloc+0x26>
    8eb2:	1e6b      	subs	r3, r5, #1
    8eb4:	421c      	tst	r4, r3
    8eb6:	d0f4      	beq.n	8ea2 <z_heap_aligned_alloc+0x26>
    8eb8:	2325      	movs	r3, #37	; 0x25
    8eba:	4a07      	ldr	r2, [pc, #28]	; (8ed8 <z_heap_aligned_alloc+0x5c>)
    8ebc:	4907      	ldr	r1, [pc, #28]	; (8edc <z_heap_aligned_alloc+0x60>)
    8ebe:	4808      	ldr	r0, [pc, #32]	; (8ee0 <z_heap_aligned_alloc+0x64>)
    8ec0:	f000 fce9 	bl	9896 <assert_print>
    8ec4:	4621      	mov	r1, r4
    8ec6:	4807      	ldr	r0, [pc, #28]	; (8ee4 <z_heap_aligned_alloc+0x68>)
    8ec8:	462a      	mov	r2, r5
    8eca:	f000 fce4 	bl	9896 <assert_print>
    8ece:	4802      	ldr	r0, [pc, #8]	; (8ed8 <z_heap_aligned_alloc+0x5c>)
    8ed0:	2125      	movs	r1, #37	; 0x25
    8ed2:	f000 fcd9 	bl	9888 <assert_post_action>
    8ed6:	e7e4      	b.n	8ea2 <z_heap_aligned_alloc+0x26>
    8ed8:	0000c094 	.word	0x0000c094
    8edc:	0000c0b8 	.word	0x0000c0b8
    8ee0:	0000a8c6 	.word	0x0000a8c6
    8ee4:	0000c0ea 	.word	0x0000c0ea

00008ee8 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    8ee8:	2803      	cmp	r0, #3
{
    8eea:	b538      	push	{r3, r4, r5, lr}
    8eec:	4604      	mov	r4, r0
    8eee:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    8ef0:	d901      	bls.n	8ef6 <k_aligned_alloc+0xe>
    8ef2:	0783      	lsls	r3, r0, #30
    8ef4:	d00c      	beq.n	8f10 <k_aligned_alloc+0x28>
    8ef6:	4912      	ldr	r1, [pc, #72]	; (8f40 <k_aligned_alloc+0x58>)
    8ef8:	4a12      	ldr	r2, [pc, #72]	; (8f44 <k_aligned_alloc+0x5c>)
    8efa:	4813      	ldr	r0, [pc, #76]	; (8f48 <k_aligned_alloc+0x60>)
    8efc:	2342      	movs	r3, #66	; 0x42
    8efe:	f000 fcca 	bl	9896 <assert_print>
    8f02:	4812      	ldr	r0, [pc, #72]	; (8f4c <k_aligned_alloc+0x64>)
    8f04:	f000 fcc7 	bl	9896 <assert_print>
    8f08:	480e      	ldr	r0, [pc, #56]	; (8f44 <k_aligned_alloc+0x5c>)
    8f0a:	2142      	movs	r1, #66	; 0x42
    8f0c:	f000 fcbc 	bl	9888 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    8f10:	1e63      	subs	r3, r4, #1
    8f12:	4223      	tst	r3, r4
    8f14:	d00c      	beq.n	8f30 <k_aligned_alloc+0x48>
    8f16:	490e      	ldr	r1, [pc, #56]	; (8f50 <k_aligned_alloc+0x68>)
    8f18:	4a0a      	ldr	r2, [pc, #40]	; (8f44 <k_aligned_alloc+0x5c>)
    8f1a:	480b      	ldr	r0, [pc, #44]	; (8f48 <k_aligned_alloc+0x60>)
    8f1c:	2346      	movs	r3, #70	; 0x46
    8f1e:	f000 fcba 	bl	9896 <assert_print>
    8f22:	480c      	ldr	r0, [pc, #48]	; (8f54 <k_aligned_alloc+0x6c>)
    8f24:	f000 fcb7 	bl	9896 <assert_print>
    8f28:	4806      	ldr	r0, [pc, #24]	; (8f44 <k_aligned_alloc+0x5c>)
    8f2a:	2146      	movs	r1, #70	; 0x46
    8f2c:	f000 fcac 	bl	9888 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    8f30:	462a      	mov	r2, r5
    8f32:	4621      	mov	r1, r4
    8f34:	4808      	ldr	r0, [pc, #32]	; (8f58 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    8f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    8f3a:	f7ff bf9f 	b.w	8e7c <z_heap_aligned_alloc>
    8f3e:	bf00      	nop
    8f40:	0000c112 	.word	0x0000c112
    8f44:	0000c094 	.word	0x0000c094
    8f48:	0000a8c6 	.word	0x0000a8c6
    8f4c:	0000c14f 	.word	0x0000c14f
    8f50:	0000ab62 	.word	0x0000ab62
    8f54:	0000ab7d 	.word	0x0000ab7d
    8f58:	20004158 	.word	0x20004158

00008f5c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    8f5c:	4b01      	ldr	r3, [pc, #4]	; (8f64 <k_thread_system_pool_assign+0x8>)
    8f5e:	6703      	str	r3, [r0, #112]	; 0x70
}
    8f60:	4770      	bx	lr
    8f62:	bf00      	nop
    8f64:	20004158 	.word	0x20004158

00008f68 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8f68:	4a02      	ldr	r2, [pc, #8]	; (8f74 <boot_banner+0xc>)
    8f6a:	4903      	ldr	r1, [pc, #12]	; (8f78 <boot_banner+0x10>)
    8f6c:	4803      	ldr	r0, [pc, #12]	; (8f7c <boot_banner+0x14>)
    8f6e:	f000 bb16 	b.w	959e <printk>
    8f72:	bf00      	nop
    8f74:	0000be9c 	.word	0x0000be9c
    8f78:	0000c17c 	.word	0x0000c17c
    8f7c:	0000c189 	.word	0x0000c189

00008f80 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8f80:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8f82:	4c0e      	ldr	r4, [pc, #56]	; (8fbc <statics_init+0x3c>)
    8f84:	4d0e      	ldr	r5, [pc, #56]	; (8fc0 <statics_init+0x40>)
    8f86:	4e0f      	ldr	r6, [pc, #60]	; (8fc4 <statics_init+0x44>)
    8f88:	42ac      	cmp	r4, r5
    8f8a:	d90c      	bls.n	8fa6 <statics_init+0x26>
    8f8c:	490e      	ldr	r1, [pc, #56]	; (8fc8 <statics_init+0x48>)
    8f8e:	480f      	ldr	r0, [pc, #60]	; (8fcc <statics_init+0x4c>)
    8f90:	2318      	movs	r3, #24
    8f92:	4632      	mov	r2, r6
    8f94:	f000 fc7f 	bl	9896 <assert_print>
    8f98:	480d      	ldr	r0, [pc, #52]	; (8fd0 <statics_init+0x50>)
    8f9a:	f000 fc7c 	bl	9896 <assert_print>
    8f9e:	2118      	movs	r1, #24
    8fa0:	4630      	mov	r0, r6
    8fa2:	f000 fc71 	bl	9888 <assert_post_action>
    8fa6:	42ac      	cmp	r4, r5
    8fa8:	d301      	bcc.n	8fae <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8faa:	2000      	movs	r0, #0
    8fac:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8fae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8fb2:	4620      	mov	r0, r4
    8fb4:	f001 f87a 	bl	a0ac <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8fb8:	3418      	adds	r4, #24
    8fba:	e7e5      	b.n	8f88 <statics_init+0x8>
    8fbc:	20004158 	.word	0x20004158
    8fc0:	20004170 	.word	0x20004170
    8fc4:	0000c1b0 	.word	0x0000c1b0
    8fc8:	0000c1d2 	.word	0x0000c1d2
    8fcc:	0000a8c6 	.word	0x0000a8c6
    8fd0:	0000bc71 	.word	0x0000bc71

00008fd4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    8fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fd8:	b085      	sub	sp, #20
    8fda:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    8fde:	4606      	mov	r6, r0
    8fe0:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8fe2:	4648      	mov	r0, r9
    8fe4:	4641      	mov	r1, r8
{
    8fe6:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8fe8:	f001 f83a 	bl	a060 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    8fec:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    8ff0:	4682      	mov	sl, r0
    8ff2:	460f      	mov	r7, r1
	__asm__ volatile(
    8ff4:	f04f 0320 	mov.w	r3, #32
    8ff8:	f3ef 8511 	mrs	r5, BASEPRI
    8ffc:	f383 8812 	msr	BASEPRI_MAX, r3
    9000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9004:	4620      	mov	r0, r4
    9006:	f7fe f885 	bl	7114 <z_spin_lock_valid>
    900a:	b968      	cbnz	r0, 9028 <k_heap_aligned_alloc+0x54>
    900c:	4a3c      	ldr	r2, [pc, #240]	; (9100 <k_heap_aligned_alloc+0x12c>)
    900e:	493d      	ldr	r1, [pc, #244]	; (9104 <k_heap_aligned_alloc+0x130>)
    9010:	483d      	ldr	r0, [pc, #244]	; (9108 <k_heap_aligned_alloc+0x134>)
    9012:	238e      	movs	r3, #142	; 0x8e
    9014:	f000 fc3f 	bl	9896 <assert_print>
    9018:	483c      	ldr	r0, [pc, #240]	; (910c <k_heap_aligned_alloc+0x138>)
    901a:	4621      	mov	r1, r4
    901c:	f000 fc3b 	bl	9896 <assert_print>
    9020:	4837      	ldr	r0, [pc, #220]	; (9100 <k_heap_aligned_alloc+0x12c>)
    9022:	218e      	movs	r1, #142	; 0x8e
    9024:	f000 fc30 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    9028:	4620      	mov	r0, r4
    902a:	f7fe f891 	bl	7150 <z_spin_lock_set_owner>
    902e:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    9032:	b17b      	cbz	r3, 9054 <k_heap_aligned_alloc+0x80>
    9034:	ea59 0808 	orrs.w	r8, r9, r8
    9038:	d00c      	beq.n	9054 <k_heap_aligned_alloc+0x80>
    903a:	4935      	ldr	r1, [pc, #212]	; (9110 <k_heap_aligned_alloc+0x13c>)
    903c:	4a35      	ldr	r2, [pc, #212]	; (9114 <k_heap_aligned_alloc+0x140>)
    903e:	4832      	ldr	r0, [pc, #200]	; (9108 <k_heap_aligned_alloc+0x134>)
    9040:	2349      	movs	r3, #73	; 0x49
    9042:	f000 fc28 	bl	9896 <assert_print>
    9046:	4834      	ldr	r0, [pc, #208]	; (9118 <k_heap_aligned_alloc+0x144>)
    9048:	f000 fc25 	bl	9896 <assert_print>
    904c:	4831      	ldr	r0, [pc, #196]	; (9114 <k_heap_aligned_alloc+0x140>)
    904e:	2149      	movs	r1, #73	; 0x49
    9050:	f000 fc1a 	bl	9888 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9054:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9100 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    9058:	9903      	ldr	r1, [sp, #12]
    905a:	465a      	mov	r2, fp
    905c:	4630      	mov	r0, r6
    905e:	f7f8 ff83 	bl	1f68 <sys_heap_aligned_alloc>
    9062:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    9064:	f7ff feba 	bl	8ddc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    9068:	f1b8 0f00 	cmp.w	r8, #0
    906c:	d019      	beq.n	90a2 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    906e:	4620      	mov	r0, r4
    9070:	f7fe f85e 	bl	7130 <z_spin_unlock_valid>
    9074:	b968      	cbnz	r0, 9092 <k_heap_aligned_alloc+0xbe>
    9076:	4a22      	ldr	r2, [pc, #136]	; (9100 <k_heap_aligned_alloc+0x12c>)
    9078:	4928      	ldr	r1, [pc, #160]	; (911c <k_heap_aligned_alloc+0x148>)
    907a:	4823      	ldr	r0, [pc, #140]	; (9108 <k_heap_aligned_alloc+0x134>)
    907c:	23b9      	movs	r3, #185	; 0xb9
    907e:	f000 fc0a 	bl	9896 <assert_print>
    9082:	4827      	ldr	r0, [pc, #156]	; (9120 <k_heap_aligned_alloc+0x14c>)
    9084:	4621      	mov	r1, r4
    9086:	f000 fc06 	bl	9896 <assert_print>
    908a:	481d      	ldr	r0, [pc, #116]	; (9100 <k_heap_aligned_alloc+0x12c>)
    908c:	21b9      	movs	r1, #185	; 0xb9
    908e:	f000 fbfb 	bl	9888 <assert_post_action>
	__asm__ volatile(
    9092:	f385 8811 	msr	BASEPRI, r5
    9096:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    909a:	4640      	mov	r0, r8
    909c:	b005      	add	sp, #20
    909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    90a2:	ebba 0000 	subs.w	r0, sl, r0
    90a6:	eb67 0101 	sbc.w	r1, r7, r1
    90aa:	2801      	cmp	r0, #1
    90ac:	f171 0300 	sbcs.w	r3, r1, #0
    90b0:	dbdd      	blt.n	906e <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    90b2:	e9cd 0100 	strd	r0, r1, [sp]
    90b6:	f106 020c 	add.w	r2, r6, #12
    90ba:	4629      	mov	r1, r5
    90bc:	4620      	mov	r0, r4
    90be:	f7fe ff79 	bl	7fb4 <z_pend_curr>
	__asm__ volatile(
    90c2:	f04f 0320 	mov.w	r3, #32
    90c6:	f3ef 8511 	mrs	r5, BASEPRI
    90ca:	f383 8812 	msr	BASEPRI_MAX, r3
    90ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90d2:	4620      	mov	r0, r4
    90d4:	f7fe f81e 	bl	7114 <z_spin_lock_valid>
    90d8:	b968      	cbnz	r0, 90f6 <k_heap_aligned_alloc+0x122>
    90da:	490a      	ldr	r1, [pc, #40]	; (9104 <k_heap_aligned_alloc+0x130>)
    90dc:	480a      	ldr	r0, [pc, #40]	; (9108 <k_heap_aligned_alloc+0x134>)
    90de:	238e      	movs	r3, #142	; 0x8e
    90e0:	464a      	mov	r2, r9
    90e2:	f000 fbd8 	bl	9896 <assert_print>
    90e6:	4809      	ldr	r0, [pc, #36]	; (910c <k_heap_aligned_alloc+0x138>)
    90e8:	4621      	mov	r1, r4
    90ea:	f000 fbd4 	bl	9896 <assert_print>
    90ee:	218e      	movs	r1, #142	; 0x8e
    90f0:	4648      	mov	r0, r9
    90f2:	f000 fbc9 	bl	9888 <assert_post_action>
	z_spin_lock_set_owner(l);
    90f6:	4620      	mov	r0, r4
    90f8:	f7fe f82a 	bl	7150 <z_spin_lock_set_owner>
	return k;
    90fc:	e7ac      	b.n	9058 <k_heap_aligned_alloc+0x84>
    90fe:	bf00      	nop
    9100:	0000aa10 	.word	0x0000aa10
    9104:	0000aa69 	.word	0x0000aa69
    9108:	0000a8c6 	.word	0x0000a8c6
    910c:	0000aa7e 	.word	0x0000aa7e
    9110:	0000c1e8 	.word	0x0000c1e8
    9114:	0000c1b0 	.word	0x0000c1b0
    9118:	0000be9a 	.word	0x0000be9a
    911c:	0000aa3d 	.word	0x0000aa3d
    9120:	0000aa54 	.word	0x0000aa54

00009124 <nrf_cc3xx_platform_init_no_rng>:
    9124:	b510      	push	{r4, lr}
    9126:	4c0a      	ldr	r4, [pc, #40]	; (9150 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9128:	6823      	ldr	r3, [r4, #0]
    912a:	b11b      	cbz	r3, 9134 <nrf_cc3xx_platform_init_no_rng+0x10>
    912c:	2301      	movs	r3, #1
    912e:	6023      	str	r3, [r4, #0]
    9130:	2000      	movs	r0, #0
    9132:	bd10      	pop	{r4, pc}
    9134:	f000 f8ce 	bl	92d4 <CC_LibInitNoRng>
    9138:	2800      	cmp	r0, #0
    913a:	d0f7      	beq.n	912c <nrf_cc3xx_platform_init_no_rng+0x8>
    913c:	3801      	subs	r0, #1
    913e:	2806      	cmp	r0, #6
    9140:	d803      	bhi.n	914a <nrf_cc3xx_platform_init_no_rng+0x26>
    9142:	4b04      	ldr	r3, [pc, #16]	; (9154 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9144:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9148:	bd10      	pop	{r4, pc}
    914a:	4803      	ldr	r0, [pc, #12]	; (9158 <nrf_cc3xx_platform_init_no_rng+0x34>)
    914c:	bd10      	pop	{r4, pc}
    914e:	bf00      	nop
    9150:	20004c4c 	.word	0x20004c4c
    9154:	0000a774 	.word	0x0000a774
    9158:	ffff8ffe 	.word	0xffff8ffe

0000915c <nrf_cc3xx_platform_abort>:
    915c:	f3bf 8f4f 	dsb	sy
    9160:	4905      	ldr	r1, [pc, #20]	; (9178 <nrf_cc3xx_platform_abort+0x1c>)
    9162:	4b06      	ldr	r3, [pc, #24]	; (917c <nrf_cc3xx_platform_abort+0x20>)
    9164:	68ca      	ldr	r2, [r1, #12]
    9166:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    916a:	4313      	orrs	r3, r2
    916c:	60cb      	str	r3, [r1, #12]
    916e:	f3bf 8f4f 	dsb	sy
    9172:	bf00      	nop
    9174:	e7fd      	b.n	9172 <nrf_cc3xx_platform_abort+0x16>
    9176:	bf00      	nop
    9178:	e000ed00 	.word	0xe000ed00
    917c:	05fa0004 	.word	0x05fa0004

00009180 <CC_PalAbort>:
    9180:	b410      	push	{r4}
    9182:	4b09      	ldr	r3, [pc, #36]	; (91a8 <CC_PalAbort+0x28>)
    9184:	4909      	ldr	r1, [pc, #36]	; (91ac <CC_PalAbort+0x2c>)
    9186:	4c0a      	ldr	r4, [pc, #40]	; (91b0 <CC_PalAbort+0x30>)
    9188:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    918c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9190:	6849      	ldr	r1, [r1, #4]
    9192:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9196:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    919a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    919e:	2300      	movs	r3, #0
    91a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    91a4:	bc10      	pop	{r4}
    91a6:	4708      	bx	r1
    91a8:	5002b000 	.word	0x5002b000
    91ac:	200000e4 	.word	0x200000e4
    91b0:	5002a000 	.word	0x5002a000

000091b4 <nrf_cc3xx_platform_set_abort>:
    91b4:	e9d0 1200 	ldrd	r1, r2, [r0]
    91b8:	4b01      	ldr	r3, [pc, #4]	; (91c0 <nrf_cc3xx_platform_set_abort+0xc>)
    91ba:	e9c3 1200 	strd	r1, r2, [r3]
    91be:	4770      	bx	lr
    91c0:	200000e4 	.word	0x200000e4

000091c4 <mutex_free>:
    91c4:	b510      	push	{r4, lr}
    91c6:	4604      	mov	r4, r0
    91c8:	b130      	cbz	r0, 91d8 <mutex_free+0x14>
    91ca:	6863      	ldr	r3, [r4, #4]
    91cc:	06db      	lsls	r3, r3, #27
    91ce:	d502      	bpl.n	91d6 <mutex_free+0x12>
    91d0:	2300      	movs	r3, #0
    91d2:	6023      	str	r3, [r4, #0]
    91d4:	6063      	str	r3, [r4, #4]
    91d6:	bd10      	pop	{r4, pc}
    91d8:	4b02      	ldr	r3, [pc, #8]	; (91e4 <mutex_free+0x20>)
    91da:	4803      	ldr	r0, [pc, #12]	; (91e8 <mutex_free+0x24>)
    91dc:	685b      	ldr	r3, [r3, #4]
    91de:	4798      	blx	r3
    91e0:	e7f3      	b.n	91ca <mutex_free+0x6>
    91e2:	bf00      	nop
    91e4:	200000e4 	.word	0x200000e4
    91e8:	0000a790 	.word	0x0000a790

000091ec <mutex_lock>:
    91ec:	b1b0      	cbz	r0, 921c <mutex_lock+0x30>
    91ee:	6843      	ldr	r3, [r0, #4]
    91f0:	b193      	cbz	r3, 9218 <mutex_lock+0x2c>
    91f2:	06db      	lsls	r3, r3, #27
    91f4:	d50e      	bpl.n	9214 <mutex_lock+0x28>
    91f6:	2301      	movs	r3, #1
    91f8:	e850 2f00 	ldrex	r2, [r0]
    91fc:	4619      	mov	r1, r3
    91fe:	e840 1c00 	strex	ip, r1, [r0]
    9202:	f09c 0f00 	teq	ip, #0
    9206:	d1f7      	bne.n	91f8 <mutex_lock+0xc>
    9208:	2a01      	cmp	r2, #1
    920a:	d0f5      	beq.n	91f8 <mutex_lock+0xc>
    920c:	f3bf 8f5f 	dmb	sy
    9210:	2000      	movs	r0, #0
    9212:	4770      	bx	lr
    9214:	4803      	ldr	r0, [pc, #12]	; (9224 <mutex_lock+0x38>)
    9216:	4770      	bx	lr
    9218:	4803      	ldr	r0, [pc, #12]	; (9228 <mutex_lock+0x3c>)
    921a:	4770      	bx	lr
    921c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9220:	4770      	bx	lr
    9222:	bf00      	nop
    9224:	ffff8fe9 	.word	0xffff8fe9
    9228:	ffff8fea 	.word	0xffff8fea

0000922c <mutex_unlock>:
    922c:	b168      	cbz	r0, 924a <mutex_unlock+0x1e>
    922e:	6843      	ldr	r3, [r0, #4]
    9230:	b13b      	cbz	r3, 9242 <mutex_unlock+0x16>
    9232:	06db      	lsls	r3, r3, #27
    9234:	d507      	bpl.n	9246 <mutex_unlock+0x1a>
    9236:	f3bf 8f5f 	dmb	sy
    923a:	2300      	movs	r3, #0
    923c:	6003      	str	r3, [r0, #0]
    923e:	4618      	mov	r0, r3
    9240:	4770      	bx	lr
    9242:	4803      	ldr	r0, [pc, #12]	; (9250 <mutex_unlock+0x24>)
    9244:	4770      	bx	lr
    9246:	4803      	ldr	r0, [pc, #12]	; (9254 <mutex_unlock+0x28>)
    9248:	4770      	bx	lr
    924a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    924e:	4770      	bx	lr
    9250:	ffff8fea 	.word	0xffff8fea
    9254:	ffff8fe9 	.word	0xffff8fe9

00009258 <mutex_init>:
    9258:	b510      	push	{r4, lr}
    925a:	4604      	mov	r4, r0
    925c:	b120      	cbz	r0, 9268 <mutex_init+0x10>
    925e:	2200      	movs	r2, #0
    9260:	2311      	movs	r3, #17
    9262:	6022      	str	r2, [r4, #0]
    9264:	6063      	str	r3, [r4, #4]
    9266:	bd10      	pop	{r4, pc}
    9268:	4801      	ldr	r0, [pc, #4]	; (9270 <mutex_init+0x18>)
    926a:	f7ff ff89 	bl	9180 <CC_PalAbort>
    926e:	e7f6      	b.n	925e <mutex_init+0x6>
    9270:	0000a7b8 	.word	0x0000a7b8

00009274 <nrf_cc3xx_platform_set_mutexes>:
    9274:	b570      	push	{r4, r5, r6, lr}
    9276:	e9d0 2300 	ldrd	r2, r3, [r0]
    927a:	4c13      	ldr	r4, [pc, #76]	; (92c8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    927c:	4d13      	ldr	r5, [pc, #76]	; (92cc <nrf_cc3xx_platform_set_mutexes+0x58>)
    927e:	6063      	str	r3, [r4, #4]
    9280:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    9284:	e9c4 3002 	strd	r3, r0, [r4, #8]
    9288:	6022      	str	r2, [r4, #0]
    928a:	4b11      	ldr	r3, [pc, #68]	; (92d0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    928c:	6808      	ldr	r0, [r1, #0]
    928e:	6018      	str	r0, [r3, #0]
    9290:	6848      	ldr	r0, [r1, #4]
    9292:	6058      	str	r0, [r3, #4]
    9294:	6888      	ldr	r0, [r1, #8]
    9296:	6098      	str	r0, [r3, #8]
    9298:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    929c:	60d8      	str	r0, [r3, #12]
    929e:	6119      	str	r1, [r3, #16]
    92a0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    92a4:	06db      	lsls	r3, r3, #27
    92a6:	d50d      	bpl.n	92c4 <nrf_cc3xx_platform_set_mutexes+0x50>
    92a8:	2300      	movs	r3, #0
    92aa:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    92ae:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    92b2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    92b6:	4790      	blx	r2
    92b8:	6823      	ldr	r3, [r4, #0]
    92ba:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    92be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92c2:	4718      	bx	r3
    92c4:	bd70      	pop	{r4, r5, r6, pc}
    92c6:	bf00      	nop
    92c8:	200000f4 	.word	0x200000f4
    92cc:	20004c64 	.word	0x20004c64
    92d0:	20000104 	.word	0x20000104

000092d4 <CC_LibInitNoRng>:
    92d4:	b538      	push	{r3, r4, r5, lr}
    92d6:	f000 f82f 	bl	9338 <CC_HalInit>
    92da:	b120      	cbz	r0, 92e6 <CC_LibInitNoRng+0x12>
    92dc:	2403      	movs	r4, #3
    92de:	f000 f863 	bl	93a8 <CC_PalTerminate>
    92e2:	4620      	mov	r0, r4
    92e4:	bd38      	pop	{r3, r4, r5, pc}
    92e6:	f000 f831 	bl	934c <CC_PalInit>
    92ea:	b998      	cbnz	r0, 9314 <CC_LibInitNoRng+0x40>
    92ec:	f000 f8ac 	bl	9448 <CC_PalPowerSaveModeSelect>
    92f0:	b998      	cbnz	r0, 931a <CC_LibInitNoRng+0x46>
    92f2:	4d0f      	ldr	r5, [pc, #60]	; (9330 <CC_LibInitNoRng+0x5c>)
    92f4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    92f8:	0e1b      	lsrs	r3, r3, #24
    92fa:	2bf0      	cmp	r3, #240	; 0xf0
    92fc:	d108      	bne.n	9310 <CC_LibInitNoRng+0x3c>
    92fe:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    9302:	4b0c      	ldr	r3, [pc, #48]	; (9334 <CC_LibInitNoRng+0x60>)
    9304:	429a      	cmp	r2, r3
    9306:	d00a      	beq.n	931e <CC_LibInitNoRng+0x4a>
    9308:	2407      	movs	r4, #7
    930a:	f000 f817 	bl	933c <CC_HalTerminate>
    930e:	e7e6      	b.n	92de <CC_LibInitNoRng+0xa>
    9310:	2406      	movs	r4, #6
    9312:	e7fa      	b.n	930a <CC_LibInitNoRng+0x36>
    9314:	2404      	movs	r4, #4
    9316:	4620      	mov	r0, r4
    9318:	bd38      	pop	{r3, r4, r5, pc}
    931a:	2400      	movs	r4, #0
    931c:	e7f5      	b.n	930a <CC_LibInitNoRng+0x36>
    931e:	2001      	movs	r0, #1
    9320:	f000 f892 	bl	9448 <CC_PalPowerSaveModeSelect>
    9324:	4604      	mov	r4, r0
    9326:	2800      	cmp	r0, #0
    9328:	d1f7      	bne.n	931a <CC_LibInitNoRng+0x46>
    932a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    932e:	e7d8      	b.n	92e2 <CC_LibInitNoRng+0xe>
    9330:	5002b000 	.word	0x5002b000
    9334:	20e00000 	.word	0x20e00000

00009338 <CC_HalInit>:
    9338:	2000      	movs	r0, #0
    933a:	4770      	bx	lr

0000933c <CC_HalTerminate>:
    933c:	2000      	movs	r0, #0
    933e:	4770      	bx	lr

00009340 <CC_HalMaskInterrupt>:
    9340:	4b01      	ldr	r3, [pc, #4]	; (9348 <CC_HalMaskInterrupt+0x8>)
    9342:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    9346:	4770      	bx	lr
    9348:	5002b000 	.word	0x5002b000

0000934c <CC_PalInit>:
    934c:	b510      	push	{r4, lr}
    934e:	4811      	ldr	r0, [pc, #68]	; (9394 <CC_PalInit+0x48>)
    9350:	f000 f848 	bl	93e4 <CC_PalMutexCreate>
    9354:	b100      	cbz	r0, 9358 <CC_PalInit+0xc>
    9356:	bd10      	pop	{r4, pc}
    9358:	480f      	ldr	r0, [pc, #60]	; (9398 <CC_PalInit+0x4c>)
    935a:	f000 f843 	bl	93e4 <CC_PalMutexCreate>
    935e:	2800      	cmp	r0, #0
    9360:	d1f9      	bne.n	9356 <CC_PalInit+0xa>
    9362:	4c0e      	ldr	r4, [pc, #56]	; (939c <CC_PalInit+0x50>)
    9364:	4620      	mov	r0, r4
    9366:	f000 f83d 	bl	93e4 <CC_PalMutexCreate>
    936a:	2800      	cmp	r0, #0
    936c:	d1f3      	bne.n	9356 <CC_PalInit+0xa>
    936e:	4b0c      	ldr	r3, [pc, #48]	; (93a0 <CC_PalInit+0x54>)
    9370:	480c      	ldr	r0, [pc, #48]	; (93a4 <CC_PalInit+0x58>)
    9372:	601c      	str	r4, [r3, #0]
    9374:	f000 f836 	bl	93e4 <CC_PalMutexCreate>
    9378:	4601      	mov	r1, r0
    937a:	2800      	cmp	r0, #0
    937c:	d1eb      	bne.n	9356 <CC_PalInit+0xa>
    937e:	f000 f82d 	bl	93dc <CC_PalDmaInit>
    9382:	4604      	mov	r4, r0
    9384:	b108      	cbz	r0, 938a <CC_PalInit+0x3e>
    9386:	4620      	mov	r0, r4
    9388:	bd10      	pop	{r4, pc}
    938a:	f000 f83f 	bl	940c <CC_PalPowerSaveModeInit>
    938e:	4620      	mov	r0, r4
    9390:	e7fa      	b.n	9388 <CC_PalInit+0x3c>
    9392:	bf00      	nop
    9394:	2000013c 	.word	0x2000013c
    9398:	20000130 	.word	0x20000130
    939c:	20000138 	.word	0x20000138
    93a0:	20000140 	.word	0x20000140
    93a4:	20000134 	.word	0x20000134

000093a8 <CC_PalTerminate>:
    93a8:	b508      	push	{r3, lr}
    93aa:	4808      	ldr	r0, [pc, #32]	; (93cc <CC_PalTerminate+0x24>)
    93ac:	f000 f824 	bl	93f8 <CC_PalMutexDestroy>
    93b0:	4807      	ldr	r0, [pc, #28]	; (93d0 <CC_PalTerminate+0x28>)
    93b2:	f000 f821 	bl	93f8 <CC_PalMutexDestroy>
    93b6:	4807      	ldr	r0, [pc, #28]	; (93d4 <CC_PalTerminate+0x2c>)
    93b8:	f000 f81e 	bl	93f8 <CC_PalMutexDestroy>
    93bc:	4806      	ldr	r0, [pc, #24]	; (93d8 <CC_PalTerminate+0x30>)
    93be:	f000 f81b 	bl	93f8 <CC_PalMutexDestroy>
    93c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    93c6:	f000 b80b 	b.w	93e0 <CC_PalDmaTerminate>
    93ca:	bf00      	nop
    93cc:	2000013c 	.word	0x2000013c
    93d0:	20000130 	.word	0x20000130
    93d4:	20000138 	.word	0x20000138
    93d8:	20000134 	.word	0x20000134

000093dc <CC_PalDmaInit>:
    93dc:	2000      	movs	r0, #0
    93de:	4770      	bx	lr

000093e0 <CC_PalDmaTerminate>:
    93e0:	4770      	bx	lr
    93e2:	bf00      	nop

000093e4 <CC_PalMutexCreate>:
    93e4:	b508      	push	{r3, lr}
    93e6:	4b03      	ldr	r3, [pc, #12]	; (93f4 <CC_PalMutexCreate+0x10>)
    93e8:	6802      	ldr	r2, [r0, #0]
    93ea:	681b      	ldr	r3, [r3, #0]
    93ec:	6810      	ldr	r0, [r2, #0]
    93ee:	4798      	blx	r3
    93f0:	2000      	movs	r0, #0
    93f2:	bd08      	pop	{r3, pc}
    93f4:	200000f4 	.word	0x200000f4

000093f8 <CC_PalMutexDestroy>:
    93f8:	b508      	push	{r3, lr}
    93fa:	4b03      	ldr	r3, [pc, #12]	; (9408 <CC_PalMutexDestroy+0x10>)
    93fc:	6802      	ldr	r2, [r0, #0]
    93fe:	685b      	ldr	r3, [r3, #4]
    9400:	6810      	ldr	r0, [r2, #0]
    9402:	4798      	blx	r3
    9404:	2000      	movs	r0, #0
    9406:	bd08      	pop	{r3, pc}
    9408:	200000f4 	.word	0x200000f4

0000940c <CC_PalPowerSaveModeInit>:
    940c:	b570      	push	{r4, r5, r6, lr}
    940e:	4c09      	ldr	r4, [pc, #36]	; (9434 <CC_PalPowerSaveModeInit+0x28>)
    9410:	4d09      	ldr	r5, [pc, #36]	; (9438 <CC_PalPowerSaveModeInit+0x2c>)
    9412:	6920      	ldr	r0, [r4, #16]
    9414:	68ab      	ldr	r3, [r5, #8]
    9416:	4798      	blx	r3
    9418:	b118      	cbz	r0, 9422 <CC_PalPowerSaveModeInit+0x16>
    941a:	4b08      	ldr	r3, [pc, #32]	; (943c <CC_PalPowerSaveModeInit+0x30>)
    941c:	4808      	ldr	r0, [pc, #32]	; (9440 <CC_PalPowerSaveModeInit+0x34>)
    941e:	685b      	ldr	r3, [r3, #4]
    9420:	4798      	blx	r3
    9422:	4a08      	ldr	r2, [pc, #32]	; (9444 <CC_PalPowerSaveModeInit+0x38>)
    9424:	68eb      	ldr	r3, [r5, #12]
    9426:	6920      	ldr	r0, [r4, #16]
    9428:	2100      	movs	r1, #0
    942a:	6011      	str	r1, [r2, #0]
    942c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9430:	4718      	bx	r3
    9432:	bf00      	nop
    9434:	20000104 	.word	0x20000104
    9438:	200000f4 	.word	0x200000f4
    943c:	200000e4 	.word	0x200000e4
    9440:	0000a7dc 	.word	0x0000a7dc
    9444:	20004c60 	.word	0x20004c60

00009448 <CC_PalPowerSaveModeSelect>:
    9448:	b570      	push	{r4, r5, r6, lr}
    944a:	4d1b      	ldr	r5, [pc, #108]	; (94b8 <CC_PalPowerSaveModeSelect+0x70>)
    944c:	4e1b      	ldr	r6, [pc, #108]	; (94bc <CC_PalPowerSaveModeSelect+0x74>)
    944e:	4604      	mov	r4, r0
    9450:	68b2      	ldr	r2, [r6, #8]
    9452:	6928      	ldr	r0, [r5, #16]
    9454:	4790      	blx	r2
    9456:	b9f8      	cbnz	r0, 9498 <CC_PalPowerSaveModeSelect+0x50>
    9458:	b15c      	cbz	r4, 9472 <CC_PalPowerSaveModeSelect+0x2a>
    945a:	4c19      	ldr	r4, [pc, #100]	; (94c0 <CC_PalPowerSaveModeSelect+0x78>)
    945c:	6823      	ldr	r3, [r4, #0]
    945e:	b1b3      	cbz	r3, 948e <CC_PalPowerSaveModeSelect+0x46>
    9460:	2b01      	cmp	r3, #1
    9462:	d01b      	beq.n	949c <CC_PalPowerSaveModeSelect+0x54>
    9464:	3b01      	subs	r3, #1
    9466:	6023      	str	r3, [r4, #0]
    9468:	6928      	ldr	r0, [r5, #16]
    946a:	68f3      	ldr	r3, [r6, #12]
    946c:	4798      	blx	r3
    946e:	2000      	movs	r0, #0
    9470:	bd70      	pop	{r4, r5, r6, pc}
    9472:	4c13      	ldr	r4, [pc, #76]	; (94c0 <CC_PalPowerSaveModeSelect+0x78>)
    9474:	6821      	ldr	r1, [r4, #0]
    9476:	b941      	cbnz	r1, 948a <CC_PalPowerSaveModeSelect+0x42>
    9478:	4b12      	ldr	r3, [pc, #72]	; (94c4 <CC_PalPowerSaveModeSelect+0x7c>)
    947a:	2201      	movs	r2, #1
    947c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    9480:	4a11      	ldr	r2, [pc, #68]	; (94c8 <CC_PalPowerSaveModeSelect+0x80>)
    9482:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9486:	2b00      	cmp	r3, #0
    9488:	d1fb      	bne.n	9482 <CC_PalPowerSaveModeSelect+0x3a>
    948a:	3101      	adds	r1, #1
    948c:	6021      	str	r1, [r4, #0]
    948e:	68f3      	ldr	r3, [r6, #12]
    9490:	6928      	ldr	r0, [r5, #16]
    9492:	4798      	blx	r3
    9494:	2000      	movs	r0, #0
    9496:	bd70      	pop	{r4, r5, r6, pc}
    9498:	480c      	ldr	r0, [pc, #48]	; (94cc <CC_PalPowerSaveModeSelect+0x84>)
    949a:	bd70      	pop	{r4, r5, r6, pc}
    949c:	4a0a      	ldr	r2, [pc, #40]	; (94c8 <CC_PalPowerSaveModeSelect+0x80>)
    949e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    94a2:	2b00      	cmp	r3, #0
    94a4:	d1fb      	bne.n	949e <CC_PalPowerSaveModeSelect+0x56>
    94a6:	4a07      	ldr	r2, [pc, #28]	; (94c4 <CC_PalPowerSaveModeSelect+0x7c>)
    94a8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    94ac:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    94b0:	f7ff ff46 	bl	9340 <CC_HalMaskInterrupt>
    94b4:	6823      	ldr	r3, [r4, #0]
    94b6:	e7d5      	b.n	9464 <CC_PalPowerSaveModeSelect+0x1c>
    94b8:	20000104 	.word	0x20000104
    94bc:	200000f4 	.word	0x200000f4
    94c0:	20004c60 	.word	0x20004c60
    94c4:	5002a000 	.word	0x5002a000
    94c8:	5002b000 	.word	0x5002b000
    94cc:	ffff8fe9 	.word	0xffff8fe9

000094d0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    94d0:	4770      	bx	lr

000094d2 <k_uptime_get>:
{
    94d2:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    94d4:	f000 fdbe 	bl	a054 <z_impl_k_uptime_ticks>
    94d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    94dc:	fba0 0302 	umull	r0, r3, r0, r2
    94e0:	fb02 3101 	mla	r1, r2, r1, r3
    94e4:	0bc0      	lsrs	r0, r0, #15
}
    94e6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    94ea:	0bc9      	lsrs	r1, r1, #15
    94ec:	bd08      	pop	{r3, pc}

000094ee <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    94ee:	4601      	mov	r1, r0
    94f0:	f240 30e7 	movw	r0, #999	; 0x3e7
    94f4:	b508      	push	{r3, lr}
    94f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    94fa:	2300      	movs	r3, #0
    94fc:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    9500:	1449      	asrs	r1, r1, #17
    9502:	f7f7 fa1b 	bl	93c <__aeabi_uldivmod>
}
    9506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    950a:	f7ff b8a3 	b.w	8654 <z_impl_k_sleep>

0000950e <thread_OUTPUT_code>:
	}
}
/* Critical to the safety of the robot and should be executed at the highest possible rate. */
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    950e:	b508      	push	{r3, lr}
	while(1){
		k_msleep(1000);
    9510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9514:	f7ff ffeb 	bl	94ee <k_msleep.isra.0>
	while(1){
    9518:	e7fa      	b.n	9510 <thread_OUTPUT_code+0x2>

0000951a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    951a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    951e:	4607      	mov	r7, r0
    9520:	460e      	mov	r6, r1
    9522:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    9524:	461d      	mov	r5, r3
    9526:	b30b      	cbz	r3, 956c <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    9528:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    952a:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    952c:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	4414      	add	r4, r2
    9534:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    9538:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    953a:	f04f 0900 	mov.w	r9, #0
    953e:	45d1      	cmp	r9, sl
    9540:	d308      	bcc.n	9554 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    9542:	686a      	ldr	r2, [r5, #4]
    9544:	f105 0308 	add.w	r3, r5, #8
    9548:	4641      	mov	r1, r8
    954a:	4638      	mov	r0, r7
    954c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    954e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    9552:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    9554:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    9558:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    955c:	4620      	mov	r0, r4
    955e:	f7f7 fbdf 	bl	d20 <strlen>
    9562:	3001      	adds	r0, #1
    9564:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9566:	f109 0901 	add.w	r9, r9, #1
    956a:	e7e8      	b.n	953e <cbpprintf_external+0x24>
}
    956c:	f06f 0015 	mvn.w	r0, #21
    9570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009574 <sys_notify_validate>:
	if (notify == NULL) {
    9574:	4603      	mov	r3, r0
    9576:	b158      	cbz	r0, 9590 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9578:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    957a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    957e:	2a01      	cmp	r2, #1
    9580:	d003      	beq.n	958a <sys_notify_validate+0x16>
    9582:	2a03      	cmp	r2, #3
    9584:	d104      	bne.n	9590 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    9586:	6802      	ldr	r2, [r0, #0]
    9588:	b112      	cbz	r2, 9590 <sys_notify_validate+0x1c>
		notify->result = 0;
    958a:	2000      	movs	r0, #0
    958c:	6098      	str	r0, [r3, #8]
    958e:	4770      	bx	lr
    9590:	f06f 0015 	mvn.w	r0, #21
}
    9594:	4770      	bx	lr

00009596 <arch_printk_char_out>:
}
    9596:	2000      	movs	r0, #0
    9598:	4770      	bx	lr

0000959a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    959a:	f000 b98e 	b.w	98ba <z_log_vprintk>

0000959e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    959e:	b40f      	push	{r0, r1, r2, r3}
    95a0:	b507      	push	{r0, r1, r2, lr}
    95a2:	a904      	add	r1, sp, #16
    95a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    95a8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    95aa:	f000 f986 	bl	98ba <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    95ae:	b003      	add	sp, #12
    95b0:	f85d eb04 	ldr.w	lr, [sp], #4
    95b4:	b004      	add	sp, #16
    95b6:	4770      	bx	lr

000095b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    95b8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    95ba:	f013 0307 	ands.w	r3, r3, #7
    95be:	d105      	bne.n	95cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    95c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    95c2:	2b00      	cmp	r3, #0
    95c4:	bf0c      	ite	eq
    95c6:	2000      	moveq	r0, #0
    95c8:	2003      	movne	r0, #3
    95ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    95cc:	2b02      	cmp	r3, #2
    95ce:	d105      	bne.n	95dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    95d0:	8bc0      	ldrh	r0, [r0, #30]
    95d2:	fab0 f080 	clz	r0, r0
    95d6:	0940      	lsrs	r0, r0, #5
    95d8:	0080      	lsls	r0, r0, #2
    95da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    95dc:	2b01      	cmp	r3, #1
    95de:	d105      	bne.n	95ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    95e0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    95e2:	2b00      	cmp	r3, #0
    95e4:	bf0c      	ite	eq
    95e6:	2000      	moveq	r0, #0
    95e8:	2005      	movne	r0, #5
    95ea:	4770      	bx	lr
	int evt = EVT_NOP;
    95ec:	2000      	movs	r0, #0
}
    95ee:	4770      	bx	lr

000095f0 <validate_args>:
{
    95f0:	b510      	push	{r4, lr}
    95f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    95f4:	b100      	cbz	r0, 95f8 <validate_args+0x8>
    95f6:	b911      	cbnz	r1, 95fe <validate_args+0xe>
		return -EINVAL;
    95f8:	f06f 0015 	mvn.w	r0, #21
}
    95fc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    95fe:	1d08      	adds	r0, r1, #4
    9600:	f7ff ffb8 	bl	9574 <sys_notify_validate>
	if ((rv == 0)
    9604:	2800      	cmp	r0, #0
    9606:	d1f9      	bne.n	95fc <validate_args+0xc>
	    && ((cli->notify.flags
    9608:	68a3      	ldr	r3, [r4, #8]
    960a:	2b03      	cmp	r3, #3
    960c:	d9f6      	bls.n	95fc <validate_args+0xc>
    960e:	e7f3      	b.n	95f8 <validate_args+0x8>

00009610 <notify_one>:
{
    9610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9614:	460d      	mov	r5, r1
    9616:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9618:	4619      	mov	r1, r3
    961a:	1d28      	adds	r0, r5, #4
{
    961c:	4690      	mov	r8, r2
    961e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9620:	f7f8 f994 	bl	194c <sys_notify_finalize>
	if (cb) {
    9624:	4604      	mov	r4, r0
    9626:	b138      	cbz	r0, 9638 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9628:	4633      	mov	r3, r6
    962a:	4642      	mov	r2, r8
    962c:	4629      	mov	r1, r5
    962e:	4638      	mov	r0, r7
    9630:	46a4      	mov	ip, r4
}
    9632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9636:	4760      	bx	ip
}
    9638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000963c <onoff_manager_init>:
{
    963c:	b538      	push	{r3, r4, r5, lr}
    963e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9640:	4605      	mov	r5, r0
    9642:	b158      	cbz	r0, 965c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9644:	b151      	cbz	r1, 965c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9646:	680b      	ldr	r3, [r1, #0]
    9648:	b143      	cbz	r3, 965c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    964a:	684b      	ldr	r3, [r1, #4]
    964c:	b133      	cbz	r3, 965c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    964e:	2220      	movs	r2, #32
    9650:	2100      	movs	r1, #0
    9652:	f000 fda9 	bl	a1a8 <memset>
    9656:	612c      	str	r4, [r5, #16]
	return 0;
    9658:	2000      	movs	r0, #0
}
    965a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    965c:	f06f 0015 	mvn.w	r0, #21
    9660:	e7fb      	b.n	965a <onoff_manager_init+0x1e>

00009662 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9662:	4604      	mov	r4, r0
    9664:	b508      	push	{r3, lr}
    9666:	4608      	mov	r0, r1
    9668:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    966a:	461a      	mov	r2, r3
    966c:	47a0      	blx	r4
	return z_impl_z_current_get();
    966e:	f7ff f829 	bl	86c4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9672:	f7fa ffff 	bl	4674 <z_impl_k_thread_abort>

00009676 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    9676:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    967a:	8840      	ldrh	r0, [r0, #2]
}
    967c:	0840      	lsrs	r0, r0, #1
    967e:	4770      	bx	lr

00009680 <free_list_add>:
{
    9680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9682:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9684:	f7ff fff7 	bl	9676 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9688:	fab0 f080 	clz	r0, r0
    968c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    9690:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9694:	00ca      	lsls	r2, r1, #3
    9696:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    969a:	1d17      	adds	r7, r2, #4
{
    969c:	460c      	mov	r4, r1
    969e:	3206      	adds	r2, #6
    96a0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    96a2:	b956      	cbnz	r6, 96ba <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    96a4:	2101      	movs	r1, #1
    96a6:	fa01 f000 	lsl.w	r0, r1, r0
    96aa:	68d9      	ldr	r1, [r3, #12]
    96ac:	4301      	orrs	r1, r0
    96ae:	60d9      	str	r1, [r3, #12]
		b->next = c;
    96b0:	f8cc 4010 	str.w	r4, [ip, #16]
    96b4:	53dd      	strh	r5, [r3, r7]
    96b6:	529d      	strh	r5, [r3, r2]
}
    96b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    96ba:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    96bc:	3104      	adds	r1, #4
    96be:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    96c0:	53d8      	strh	r0, [r3, r7]
    96c2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    96c6:	529e      	strh	r6, [r3, r2]
    96c8:	80c5      	strh	r5, [r0, #6]
    96ca:	525d      	strh	r5, [r3, r1]
    96cc:	e7f4      	b.n	96b8 <free_list_add+0x38>

000096ce <free_list_remove_bidx>:
{
    96ce:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    96d0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    96d4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    96d6:	4299      	cmp	r1, r3
    96d8:	f102 0104 	add.w	r1, r2, #4
    96dc:	d10a      	bne.n	96f4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    96de:	2301      	movs	r3, #1
    96e0:	fa03 f202 	lsl.w	r2, r3, r2
    96e4:	68c3      	ldr	r3, [r0, #12]
    96e6:	ea23 0302 	bic.w	r3, r3, r2
    96ea:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    96ec:	2300      	movs	r3, #0
    96ee:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    96f2:	bd10      	pop	{r4, pc}
    96f4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    96f6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    96fa:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    96fe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    9702:	80cb      	strh	r3, [r1, #6]
    9704:	8082      	strh	r2, [r0, #4]
}
    9706:	e7f4      	b.n	96f2 <free_list_remove_bidx+0x24>

00009708 <alloc_chunk>:
{
    9708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    970c:	fab1 f581 	clz	r5, r1
    9710:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    9714:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    9718:	4603      	mov	r3, r0
	if (b->next) {
    971a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    971e:	460e      	mov	r6, r1
	if (b->next) {
    9720:	b1c2      	cbz	r2, 9754 <alloc_chunk+0x4c>
    9722:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    9724:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    9728:	4618      	mov	r0, r3
    972a:	4621      	mov	r1, r4
    972c:	f7ff ffa3 	bl	9676 <chunk_size>
    9730:	42b0      	cmp	r0, r6
    9732:	d306      	bcc.n	9742 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    9734:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    9736:	4618      	mov	r0, r3
    9738:	f7ff ffc9 	bl	96ce <free_list_remove_bidx>
}
    973c:	4620      	mov	r0, r4
    973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    9742:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    9746:	3f01      	subs	r7, #1
    9748:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    974a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    974e:	d001      	beq.n	9754 <alloc_chunk+0x4c>
    9750:	4282      	cmp	r2, r0
    9752:	d1e7      	bne.n	9724 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    9754:	f1c5 0220 	rsb	r2, r5, #32
    9758:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    975c:	4094      	lsls	r4, r2
    975e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    9760:	4014      	ands	r4, r2
    9762:	d0eb      	beq.n	973c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    9764:	fa94 f2a4 	rbit	r2, r4
    9768:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    976c:	1d11      	adds	r1, r2, #4
    976e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    9772:	4621      	mov	r1, r4
    9774:	e7df      	b.n	9736 <alloc_chunk+0x2e>

00009776 <split_chunks>:
{
    9776:	b538      	push	{r3, r4, r5, lr}
    9778:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    977a:	f7ff ff7c 	bl	9676 <chunk_size>
{
    977e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    9780:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    9782:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    9784:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    9788:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    978a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    978c:	8060      	strh	r0, [r4, #2]
    978e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9792:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    9794:	8044      	strh	r4, [r0, #2]
    9796:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    979a:	4618      	mov	r0, r3
    979c:	4611      	mov	r1, r2
    979e:	f7ff ff6a 	bl	9676 <chunk_size>
	void *cmem = &buf[c];
    97a2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    97a4:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    97a8:	bd38      	pop	{r3, r4, r5, pc}

000097aa <sys_heap_alloc>:
{
    97aa:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    97ac:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    97ae:	b909      	cbnz	r1, 97b4 <sys_heap_alloc+0xa>
		return NULL;
    97b0:	2000      	movs	r0, #0
}
    97b2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    97b4:	68ab      	ldr	r3, [r5, #8]
    97b6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    97ba:	d9f9      	bls.n	97b0 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    97bc:	310b      	adds	r1, #11
    97be:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    97c0:	4621      	mov	r1, r4
    97c2:	4628      	mov	r0, r5
    97c4:	f7ff ffa0 	bl	9708 <alloc_chunk>
	if (c == 0U) {
    97c8:	4606      	mov	r6, r0
    97ca:	2800      	cmp	r0, #0
    97cc:	d0f0      	beq.n	97b0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    97ce:	4601      	mov	r1, r0
    97d0:	4628      	mov	r0, r5
    97d2:	f7ff ff50 	bl	9676 <chunk_size>
    97d6:	42a0      	cmp	r0, r4
    97d8:	d907      	bls.n	97ea <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    97da:	1932      	adds	r2, r6, r4
    97dc:	4628      	mov	r0, r5
    97de:	f7ff ffca 	bl	9776 <split_chunks>
		free_list_add(h, c + chunk_sz);
    97e2:	4611      	mov	r1, r2
    97e4:	4628      	mov	r0, r5
    97e6:	f7ff ff4b 	bl	9680 <free_list_add>
	void *cmem = &buf[c];
    97ea:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    97ee:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    97f0:	8853      	ldrh	r3, [r2, #2]
    97f2:	f043 0301 	orr.w	r3, r3, #1
    97f6:	8053      	strh	r3, [r2, #2]
    97f8:	3004      	adds	r0, #4
	return mem;
    97fa:	e7da      	b.n	97b2 <sys_heap_alloc+0x8>

000097fc <_ldiv5>:
	uint32_t v_lo = *v;
    97fc:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    9800:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    9802:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    9806:	fba2 2403 	umull	r2, r4, r2, r3
    980a:	18d5      	adds	r5, r2, r3
    980c:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    9810:	fba1 1303 	umull	r1, r3, r1, r3
    9814:	1852      	adds	r2, r2, r1
    9816:	eb44 0403 	adc.w	r4, r4, r3
    981a:	1952      	adds	r2, r2, r5
    981c:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    9820:	1889      	adds	r1, r1, r2
    9822:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    9826:	e9c0 1300 	strd	r1, r3, [r0]
}
    982a:	bd30      	pop	{r4, r5, pc}

0000982c <_get_digit>:
	if (*digit_count > 0) {
    982c:	680a      	ldr	r2, [r1, #0]
    982e:	2a00      	cmp	r2, #0
{
    9830:	b510      	push	{r4, lr}
    9832:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    9834:	dd0f      	ble.n	9856 <_get_digit+0x2a>
		--*digit_count;
    9836:	3a01      	subs	r2, #1
    9838:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    983a:	681a      	ldr	r2, [r3, #0]
    983c:	6844      	ldr	r4, [r0, #4]
    983e:	200a      	movs	r0, #10
    9840:	fba2 1200 	umull	r1, r2, r2, r0
    9844:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    9848:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    984a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    984e:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    9852:	3030      	adds	r0, #48	; 0x30
}
    9854:	bd10      	pop	{r4, pc}
		rval = '0';
    9856:	2030      	movs	r0, #48	; 0x30
    9858:	e7fc      	b.n	9854 <_get_digit+0x28>

0000985a <outs>:
{
    985a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    985e:	4607      	mov	r7, r0
    9860:	4688      	mov	r8, r1
    9862:	4615      	mov	r5, r2
    9864:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9866:	4614      	mov	r4, r2
    9868:	42b4      	cmp	r4, r6
    986a:	d305      	bcc.n	9878 <outs+0x1e>
    986c:	b10e      	cbz	r6, 9872 <outs+0x18>
	return (int)count;
    986e:	1b60      	subs	r0, r4, r5
    9870:	e008      	b.n	9884 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9872:	7823      	ldrb	r3, [r4, #0]
    9874:	2b00      	cmp	r3, #0
    9876:	d0fa      	beq.n	986e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    9878:	f814 0b01 	ldrb.w	r0, [r4], #1
    987c:	4641      	mov	r1, r8
    987e:	47b8      	blx	r7
		if (rc < 0) {
    9880:	2800      	cmp	r0, #0
    9882:	daf1      	bge.n	9868 <outs+0xe>
}
    9884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009888 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9888:	4040      	eors	r0, r0
    988a:	f380 8811 	msr	BASEPRI, r0
    988e:	f04f 0004 	mov.w	r0, #4
    9892:	df02      	svc	2
}
    9894:	4770      	bx	lr

00009896 <assert_print>:

void assert_print(const char *fmt, ...)
{
    9896:	b40f      	push	{r0, r1, r2, r3}
    9898:	b507      	push	{r0, r1, r2, lr}
    989a:	a904      	add	r1, sp, #16
    989c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    98a0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    98a2:	f7ff fe7a 	bl	959a <vprintk>

	va_end(ap);
}
    98a6:	b003      	add	sp, #12
    98a8:	f85d eb04 	ldr.w	lr, [sp], #4
    98ac:	b004      	add	sp, #16
    98ae:	4770      	bx	lr

000098b0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    98b0:	4770      	bx	lr

000098b2 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    98b2:	f000 b9c9 	b.w	9c48 <sys_clock_cycle_get_32>

000098b6 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    98b6:	2000      	movs	r0, #0
    98b8:	4770      	bx	lr

000098ba <z_log_vprintk>:
{
    98ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    98bc:	2300      	movs	r3, #0
    98be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    98c2:	e9cd 3300 	strd	r3, r3, [sp]
    98c6:	461a      	mov	r2, r3
    98c8:	4619      	mov	r1, r3
    98ca:	4618      	mov	r0, r3
    98cc:	f7f9 fe32 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    98d0:	b005      	add	sp, #20
    98d2:	f85d fb04 	ldr.w	pc, [sp], #4

000098d6 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    98d6:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    98d8:	f7f9 fb88 	bl	2fec <log_init>
	}

	return 0;
}
    98dc:	2000      	movs	r0, #0
    98de:	bd08      	pop	{r3, pc}

000098e0 <z_log_get_tag>:
}
    98e0:	2000      	movs	r0, #0
    98e2:	4770      	bx	lr

000098e4 <out_func>:
{
    98e4:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    98e6:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    98ea:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    98ee:	6852      	ldr	r2, [r2, #4]
    98f0:	2101      	movs	r1, #1
    98f2:	f10d 0007 	add.w	r0, sp, #7
    98f6:	4798      	blx	r3
}
    98f8:	2000      	movs	r0, #0
    98fa:	b003      	add	sp, #12
    98fc:	f85d fb04 	ldr.w	pc, [sp], #4

00009900 <cr_out_func>:
{
    9900:	b538      	push	{r3, r4, r5, lr}
    9902:	4605      	mov	r5, r0
    9904:	460c      	mov	r4, r1
	out_func(c, ctx);
    9906:	f7ff ffed 	bl	98e4 <out_func>
	if (c == '\n') {
    990a:	2d0a      	cmp	r5, #10
    990c:	d103      	bne.n	9916 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    990e:	4621      	mov	r1, r4
    9910:	200d      	movs	r0, #13
    9912:	f7ff ffe7 	bl	98e4 <out_func>
}
    9916:	2000      	movs	r0, #0
    9918:	bd38      	pop	{r3, r4, r5, pc}

0000991a <buffer_write>:
{
    991a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    991c:	4606      	mov	r6, r0
    991e:	460d      	mov	r5, r1
    9920:	4614      	mov	r4, r2
    9922:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    9924:	4621      	mov	r1, r4
    9926:	4628      	mov	r0, r5
    9928:	463a      	mov	r2, r7
    992a:	47b0      	blx	r6
	} while (len != 0);
    992c:	1a24      	subs	r4, r4, r0
		buf += processed;
    992e:	4405      	add	r5, r0
	} while (len != 0);
    9930:	d1f8      	bne.n	9924 <buffer_write+0xa>
}
    9932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009934 <log_output_flush>:
		     output->control_block->offset,
    9934:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9936:	6881      	ldr	r1, [r0, #8]
{
    9938:	b510      	push	{r4, lr}
    993a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    993c:	e9d2 2300 	ldrd	r2, r3, [r2]
    9940:	6800      	ldr	r0, [r0, #0]
    9942:	f7ff ffea 	bl	991a <buffer_write>
	output->control_block->offset = 0;
    9946:	6863      	ldr	r3, [r4, #4]
    9948:	2200      	movs	r2, #0
    994a:	601a      	str	r2, [r3, #0]
}
    994c:	bd10      	pop	{r4, pc}

0000994e <z_log_msg2_finalize>:
{
    994e:	b570      	push	{r4, r5, r6, lr}
    9950:	460e      	mov	r6, r1
    9952:	4615      	mov	r5, r2
    9954:	4619      	mov	r1, r3
    9956:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    995a:	4604      	mov	r4, r0
    995c:	b918      	cbnz	r0, 9966 <z_log_msg2_finalize+0x18>
}
    995e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    9962:	f7f9 bba9 	b.w	30b8 <z_log_dropped>
	if (data) {
    9966:	b12b      	cbz	r3, 9974 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    9968:	3010      	adds	r0, #16
    996a:	f3c5 2349 	ubfx	r3, r5, #9, #10
    996e:	4418      	add	r0, r3
    9970:	f000 fc0c 	bl	a18c <memcpy>
	msg->hdr.source = source;
    9974:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    9978:	4620      	mov	r0, r4
}
    997a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    997e:	f7f9 bbb9 	b.w	30f4 <z_log_msg2_commit>

00009982 <abort_function>:
{
    9982:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9984:	2000      	movs	r0, #0
    9986:	f7f9 fad7 	bl	2f38 <sys_reboot>

0000998a <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    998a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    998c:	ab0b      	add	r3, sp, #44	; 0x2c
    998e:	9305      	str	r3, [sp, #20]
    9990:	9303      	str	r3, [sp, #12]
    9992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9994:	9302      	str	r3, [sp, #8]
    9996:	2300      	movs	r3, #0
    9998:	e9cd 3300 	strd	r3, r3, [sp]
    999c:	2201      	movs	r2, #1
    999e:	4618      	mov	r0, r3
    99a0:	f7f9 fdc8 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    99a4:	b007      	add	sp, #28
    99a6:	f85d fb04 	ldr.w	pc, [sp], #4

000099aa <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    99aa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    99ac:	6800      	ldr	r0, [r0, #0]
    99ae:	f7fa b94d 	b.w	3c4c <z_arm_fatal_error>

000099b2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    99b2:	2100      	movs	r1, #0
    99b4:	2001      	movs	r0, #1
    99b6:	f7fa b949 	b.w	3c4c <z_arm_fatal_error>

000099ba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    99ba:	b508      	push	{r3, lr}
	handler();
    99bc:	f7fa f9e6 	bl	3d8c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    99c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    99c4:	f7fa babe 	b.w	3f44 <z_arm_exc_exit>

000099c8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    99c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    99ca:	ab0b      	add	r3, sp, #44	; 0x2c
    99cc:	9305      	str	r3, [sp, #20]
    99ce:	9303      	str	r3, [sp, #12]
    99d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99d2:	9302      	str	r3, [sp, #8]
    99d4:	2300      	movs	r3, #0
    99d6:	e9cd 3300 	strd	r3, r3, [sp]
    99da:	2201      	movs	r2, #1
    99dc:	4618      	mov	r0, r3
    99de:	f7f9 fda9 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    99e2:	b007      	add	sp, #28
    99e4:	f85d fb04 	ldr.w	pc, [sp], #4

000099e8 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    99e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    99ea:	ab0b      	add	r3, sp, #44	; 0x2c
    99ec:	9305      	str	r3, [sp, #20]
    99ee:	9303      	str	r3, [sp, #12]
    99f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99f2:	9302      	str	r3, [sp, #8]
    99f4:	2300      	movs	r3, #0
    99f6:	e9cd 3300 	strd	r3, r3, [sp]
    99fa:	2201      	movs	r2, #1
    99fc:	4618      	mov	r0, r3
    99fe:	f7f9 fd99 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    9a02:	b007      	add	sp, #28
    9a04:	f85d fb04 	ldr.w	pc, [sp], #4

00009a08 <_stdout_hook_default>:
}
    9a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9a0c:	4770      	bx	lr

00009a0e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9a0e:	2806      	cmp	r0, #6
    9a10:	d108      	bne.n	9a24 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a16:	2201      	movs	r2, #1
    9a18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9a1c:	f3bf 8f4f 	dsb	sy
        __WFE();
    9a20:	bf20      	wfe
    while (true)
    9a22:	e7fd      	b.n	9a20 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9a24:	4770      	bx	lr

00009a26 <pm_state_exit_post_ops>:
	__asm__ volatile(
    9a26:	2300      	movs	r3, #0
    9a28:	f383 8811 	msr	BASEPRI, r3
    9a2c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9a30:	4770      	bx	lr

00009a32 <set_on_state>:
	__asm__ volatile(
    9a32:	f04f 0320 	mov.w	r3, #32
    9a36:	f3ef 8211 	mrs	r2, BASEPRI
    9a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a3e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9a42:	6803      	ldr	r3, [r0, #0]
    9a44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9a48:	f043 0302 	orr.w	r3, r3, #2
    9a4c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9a4e:	f382 8811 	msr	BASEPRI, r2
    9a52:	f3bf 8f6f 	isb	sy
}
    9a56:	4770      	bx	lr

00009a58 <async_start>:
{
    9a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a5a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9a5c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    9a5e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    9a60:	f04f 0520 	mov.w	r5, #32
    9a64:	f3ef 8611 	mrs	r6, BASEPRI
    9a68:	f385 8812 	msr	BASEPRI_MAX, r5
    9a6c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9a70:	250c      	movs	r5, #12
    9a72:	4369      	muls	r1, r5
    9a74:	440c      	add	r4, r1
    9a76:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9a78:	f005 0c07 	and.w	ip, r5, #7
    9a7c:	f1bc 0f01 	cmp.w	ip, #1
    9a80:	d10b      	bne.n	9a9a <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9a82:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    9a84:	f386 8811 	msr	BASEPRI, r6
    9a88:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    9a8c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9a90:	6843      	ldr	r3, [r0, #4]
    9a92:	585b      	ldr	r3, [r3, r1]
    9a94:	4798      	blx	r3
	return 0;
    9a96:	2000      	movs	r0, #0
}
    9a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9a9a:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    9a9e:	42af      	cmp	r7, r5
    9aa0:	f386 8811 	msr	BASEPRI, r6
    9aa4:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    9aa8:	bf0c      	ite	eq
    9aaa:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9aae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9ab2:	e7f1      	b.n	9a98 <async_start+0x40>

00009ab4 <api_start>:
{
    9ab4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9ab6:	2480      	movs	r4, #128	; 0x80
    9ab8:	9400      	str	r4, [sp, #0]
    9aba:	f7ff ffcd 	bl	9a58 <async_start>
}
    9abe:	b002      	add	sp, #8
    9ac0:	bd10      	pop	{r4, pc}

00009ac2 <onoff_started_callback>:
	return &data->mgr[type];
    9ac2:	6900      	ldr	r0, [r0, #16]
    9ac4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9ac6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9aca:	2100      	movs	r1, #0
    9acc:	4710      	bx	r2

00009ace <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9ace:	2000      	movs	r0, #0
    9ad0:	f7fc ba3e 	b.w	5f50 <nrfx_clock_start>

00009ad4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9ad4:	2000      	movs	r0, #0
    9ad6:	f7fc ba9f 	b.w	6018 <nrfx_clock_stop>

00009ada <api_stop>:
	return stop(dev, subsys, CTX_API);
    9ada:	2280      	movs	r2, #128	; 0x80
    9adc:	f7fa bfe0 	b.w	4aa0 <stop>

00009ae0 <blocking_start_callback>:
{
    9ae0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9ae2:	f7fd bd2d 	b.w	7540 <z_impl_k_sem_give>

00009ae6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9ae6:	6843      	ldr	r3, [r0, #4]
    9ae8:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9aea:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9aee:	600b      	str	r3, [r1, #0]
}
    9af0:	2000      	movs	r0, #0
    9af2:	4770      	bx	lr

00009af4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9af4:	6843      	ldr	r3, [r0, #4]
    9af6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9af8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9afc:	4042      	eors	r2, r0
    9afe:	400a      	ands	r2, r1
    9b00:	4042      	eors	r2, r0
    p_reg->OUT = value;
    9b02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9b06:	2000      	movs	r0, #0
    9b08:	4770      	bx	lr

00009b0a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9b0a:	6843      	ldr	r3, [r0, #4]
    9b0c:	685b      	ldr	r3, [r3, #4]
}
    9b0e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9b10:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    9b14:	4770      	bx	lr

00009b16 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9b16:	6843      	ldr	r3, [r0, #4]
    9b18:	685b      	ldr	r3, [r3, #4]
}
    9b1a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9b1c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9b20:	4770      	bx	lr

00009b22 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9b22:	6843      	ldr	r3, [r0, #4]
    9b24:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9b26:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    9b2a:	404b      	eors	r3, r1
    p_reg->OUT = value;
    9b2c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    9b30:	2000      	movs	r0, #0
    9b32:	4770      	bx	lr

00009b34 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    9b34:	6902      	ldr	r2, [r0, #16]
{
    9b36:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    9b38:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9b3c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9b40:	2000      	movs	r0, #0
    9b42:	4770      	bx	lr

00009b44 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    9b44:	6843      	ldr	r3, [r0, #4]
    9b46:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9b48:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9b4c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9b50:	4770      	bx	lr

00009b52 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9b52:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    9b54:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9b56:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b58:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9b5c:	b148      	cbz	r0, 9b72 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    9b5e:	7c52      	ldrb	r2, [r2, #17]
    9b60:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b62:	2000      	movs	r0, #0
    9b64:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9b68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b6c:	2201      	movs	r2, #1
    9b6e:	601a      	str	r2, [r3, #0]
	return 0;
    9b70:	4770      	bx	lr
		return -1;
    9b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9b76:	4770      	bx	lr

00009b78 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9b78:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9b7a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9b7c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9b80:	b940      	cbnz	r0, 9b94 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9b82:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9b84:	079b      	lsls	r3, r3, #30
    9b86:	d406      	bmi.n	9b96 <is_tx_ready.isra.0+0x1e>
    9b88:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9b8c:	3800      	subs	r0, #0
    9b8e:	bf18      	it	ne
    9b90:	2001      	movne	r0, #1
    9b92:	4770      	bx	lr
    9b94:	2001      	movs	r0, #1
}
    9b96:	4770      	bx	lr

00009b98 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9b98:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9b9a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9b9c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9ba0:	05c9      	lsls	r1, r1, #23
    9ba2:	d518      	bpl.n	9bd6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ba4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9ba8:	b1a9      	cbz	r1, 9bd6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9baa:	f04f 0020 	mov.w	r0, #32
    9bae:	f3ef 8111 	mrs	r1, BASEPRI
    9bb2:	f380 8812 	msr	BASEPRI_MAX, r0
    9bb6:	f3bf 8f6f 	isb	sy
    9bba:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9bbe:	b130      	cbz	r0, 9bce <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bc0:	2000      	movs	r0, #0
    9bc2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    9bc6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9bca:	2001      	movs	r0, #1
    9bcc:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    9bce:	f381 8811 	msr	BASEPRI, r1
    9bd2:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9bd6:	6852      	ldr	r2, [r2, #4]
    9bd8:	06d2      	lsls	r2, r2, #27
    9bda:	d515      	bpl.n	9c08 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    9bdc:	f04f 0120 	mov.w	r1, #32
    9be0:	f3ef 8211 	mrs	r2, BASEPRI
    9be4:	f381 8812 	msr	BASEPRI_MAX, r1
    9be8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9bec:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    9bf0:	b111      	cbz	r1, 9bf8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9bf2:	2100      	movs	r1, #0
    9bf4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    9bf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    9bfc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    9c00:	f382 8811 	msr	BASEPRI, r2
    9c04:	f3bf 8f6f 	isb	sy
}
    9c08:	4770      	bx	lr

00009c0a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9c0a:	b510      	push	{r4, lr}
    9c0c:	2200      	movs	r2, #0
    9c0e:	4604      	mov	r4, r0
    9c10:	2101      	movs	r1, #1
    9c12:	2028      	movs	r0, #40	; 0x28
    9c14:	f7fa f886 	bl	3d24 <z_arm_irq_priority_set>
    9c18:	2028      	movs	r0, #40	; 0x28
    9c1a:	f7fa f867 	bl	3cec <arch_irq_enable>
    9c1e:	4620      	mov	r0, r4
    9c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c24:	f7fb bbf4 	b.w	5410 <uarte_instance_init.constprop.0>

00009c28 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    9c28:	b510      	push	{r4, lr}
    9c2a:	2200      	movs	r2, #0
    9c2c:	4604      	mov	r4, r0
    9c2e:	2101      	movs	r1, #1
    9c30:	2002      	movs	r0, #2
    9c32:	f7fa f877 	bl	3d24 <z_arm_irq_priority_set>
    9c36:	2002      	movs	r0, #2
    9c38:	f7fa f858 	bl	3cec <arch_irq_enable>
    9c3c:	4620      	mov	r0, r4
    9c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9c42:	f7fb bbe5 	b.w	5410 <uarte_instance_init.constprop.0>

00009c46 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9c46:	4770      	bx	lr

00009c48 <sys_clock_cycle_get_32>:
{
    9c48:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    9c4a:	f7fb fd59 	bl	5700 <z_nrf_rtc_timer_read>
}
    9c4e:	bd08      	pop	{r3, pc}

00009c50 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9c50:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    9c52:	6843      	ldr	r3, [r0, #4]
    9c54:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9c56:	7a03      	ldrb	r3, [r0, #8]
    9c58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    9c5c:	3b01      	subs	r3, #1
    9c5e:	00db      	lsls	r3, r3, #3
    9c60:	6845      	ldr	r5, [r0, #4]
    9c62:	6814      	ldr	r4, [r2, #0]
    9c64:	441d      	add	r5, r3
    9c66:	42ac      	cmp	r4, r5
    9c68:	d902      	bls.n	9c70 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    9c6a:	f06f 0001 	mvn.w	r0, #1
}
    9c6e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    9c70:	7965      	ldrb	r5, [r4, #5]
    9c72:	428d      	cmp	r5, r1
    9c74:	d002      	beq.n	9c7c <pinctrl_lookup_state+0x2c>
		(*state)++;
    9c76:	3408      	adds	r4, #8
    9c78:	6014      	str	r4, [r2, #0]
    9c7a:	e7f1      	b.n	9c60 <pinctrl_lookup_state+0x10>
			return 0;
    9c7c:	2000      	movs	r0, #0
    9c7e:	e7f6      	b.n	9c6e <pinctrl_lookup_state+0x1e>

00009c80 <nrf_gpio_pin_clear>:
{
    9c80:	b507      	push	{r0, r1, r2, lr}
    9c82:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9c84:	a801      	add	r0, sp, #4
    9c86:	f7fb feef 	bl	5a68 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9c8a:	9a01      	ldr	r2, [sp, #4]
    9c8c:	2301      	movs	r3, #1
    9c8e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    9c90:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    9c94:	b003      	add	sp, #12
    9c96:	f85d fb04 	ldr.w	pc, [sp], #4

00009c9a <nrf_gpio_pin_set>:
{
    9c9a:	b507      	push	{r0, r1, r2, lr}
    9c9c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9c9e:	a801      	add	r0, sp, #4
    9ca0:	f7fb fee2 	bl	5a68 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9ca4:	9a01      	ldr	r2, [sp, #4]
    9ca6:	2301      	movs	r3, #1
    9ca8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9caa:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9cae:	b003      	add	sp, #12
    9cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00009cb4 <nrf_gpio_pin_write>:
    if (value == 0)
    9cb4:	b909      	cbnz	r1, 9cba <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    9cb6:	f7ff bfe3 	b.w	9c80 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    9cba:	f7ff bfee 	b.w	9c9a <nrf_gpio_pin_set>

00009cbe <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    9cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    9cc0:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9cc4:	2b00      	cmp	r3, #0
{
    9cc6:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9cc8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9ccc:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9cce:	bf0b      	itete	eq
    9cd0:	4615      	moveq	r5, r2
    9cd2:	2501      	movne	r5, #1
    9cd4:	460e      	moveq	r6, r1
    9cd6:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9cd8:	9301      	str	r3, [sp, #4]
    9cda:	f7fb fec5 	bl	5a68 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9cde:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    9ce2:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9ce6:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    9cea:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9cec:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    9cee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9cf2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    9cf6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    9cfa:	b002      	add	sp, #8
    9cfc:	bd70      	pop	{r4, r5, r6, pc}

00009cfe <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    9cfe:	b570      	push	{r4, r5, r6, lr}
    9d00:	4615      	mov	r5, r2
    9d02:	4604      	mov	r4, r0
    9d04:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    9d08:	42a6      	cmp	r6, r4
    9d0a:	d101      	bne.n	9d10 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    9d0c:	2000      	movs	r0, #0
}
    9d0e:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    9d10:	6823      	ldr	r3, [r4, #0]
    9d12:	0c1a      	lsrs	r2, r3, #16
    9d14:	2a22      	cmp	r2, #34	; 0x22
    9d16:	f200 808e 	bhi.w	9e36 <pinctrl_configure_pins+0x138>
    9d1a:	e8df f002 	tbb	[pc, r2]
    9d1e:	1d12      	.short	0x1d12
    9d20:	39294324 	.word	0x39294324
    9d24:	8c8c8c43 	.word	0x8c8c8c43
    9d28:	8c4d488c 	.word	0x8c4d488c
    9d2c:	8c8c8c8c 	.word	0x8c8c8c8c
    9d30:	8c8c8c8c 	.word	0x8c8c8c8c
    9d34:	68635e52 	.word	0x68635e52
    9d38:	6d8c8c8c 	.word	0x6d8c8c8c
    9d3c:	827d7873 	.word	0x827d7873
    9d40:	87          	.byte	0x87
    9d41:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    9d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d46:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    9d4a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    9d4c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9d50:	f7ff ffa3 	bl	9c9a <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    9d54:	2201      	movs	r2, #1
    9d56:	e015      	b.n	9d84 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    9d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d5c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9d60:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9d62:	2100      	movs	r1, #0
    9d64:	e00f      	b.n	9d86 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    9d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d6a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    9d6e:	e7ec      	b.n	9d4a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    9d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d74:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9d78:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    9d7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9d7e:	f7ff ff7f 	bl	9c80 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    9d82:	2200      	movs	r2, #0
    9d84:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9d86:	6820      	ldr	r0, [r4, #0]
    9d88:	f7ff ff99 	bl	9cbe <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    9d8c:	3404      	adds	r4, #4
    9d8e:	e7bb      	b.n	9d08 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    9d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d94:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9d98:	6820      	ldr	r0, [r4, #0]
    9d9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9d9e:	f7ff ff6f 	bl	9c80 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    9da2:	e7d7      	b.n	9d54 <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    9da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9da8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9dac:	e7d8      	b.n	9d60 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    9dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9db2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9db6:	e7d3      	b.n	9d60 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    9db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9dbc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    9dc0:	e7ce      	b.n	9d60 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    9dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9dc6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9dca:	6820      	ldr	r0, [r4, #0]
    9dcc:	f3c0 3140 	ubfx	r1, r0, #13, #1
    9dd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9dd4:	f7ff ff6e 	bl	9cb4 <nrf_gpio_pin_write>
    9dd8:	e7bc      	b.n	9d54 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    9dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9dde:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9de2:	e7f2      	b.n	9dca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    9de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9de8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9dec:	e7ed      	b.n	9dca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    9dee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9df2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    9df6:	e7e8      	b.n	9dca <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    9df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9dfc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9e00:	2201      	movs	r2, #1
    9e02:	e7ae      	b.n	9d62 <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    9e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e08:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9e0c:	e7f8      	b.n	9e00 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    9e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e12:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9e16:	e7f3      	b.n	9e00 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    9e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e1c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9e20:	e7ee      	b.n	9e00 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    9e22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e26:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9e2a:	e7e9      	b.n	9e00 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    9e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e30:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    9e34:	e7e4      	b.n	9e00 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    9e36:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9e3a:	e768      	b.n	9d0e <pinctrl_configure_pins+0x10>

00009e3c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9e3c:	f7ff b972 	b.w	9124 <nrf_cc3xx_platform_init_no_rng>

00009e40 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    9e40:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    9e42:	f7f9 fe1b 	bl	3a7c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9e46:	f7f9 fecd 	bl	3be4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    9e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9e4e:	f7ff b969 	b.w	9124 <nrf_cc3xx_platform_init_no_rng>

00009e52 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    9e52:	4700      	bx	r0

00009e54 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9e54:	f000 b900 	b.w	a058 <z_impl_k_busy_wait>

00009e58 <nrf_gpio_pin_present_check>:
    switch (port)
    9e58:	0943      	lsrs	r3, r0, #5
    9e5a:	d00b      	beq.n	9e74 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    9e5c:	2b01      	cmp	r3, #1
    9e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9e62:	bf18      	it	ne
    9e64:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9e66:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9e6a:	fa23 f000 	lsr.w	r0, r3, r0
}
    9e6e:	f000 0001 	and.w	r0, r0, #1
    9e72:	4770      	bx	lr
    switch (port)
    9e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e78:	e7f5      	b.n	9e66 <nrf_gpio_pin_present_check+0xe>

00009e7a <pin_is_task_output>:
{
    9e7a:	b508      	push	{r3, lr}
    9e7c:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9e7e:	f7fc f933 	bl	60e8 <pin_is_output>
    9e82:	b110      	cbz	r0, 9e8a <pin_is_task_output+0x10>
    9e84:	4610      	mov	r0, r2
    9e86:	f7fc f919 	bl	60bc <pin_in_use_by_te>
}
    9e8a:	f000 0001 	and.w	r0, r0, #1
    9e8e:	bd08      	pop	{r3, pc}

00009e90 <nrf_gpio_reconfigure>:
{
    9e90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9e94:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9e96:	a801      	add	r0, sp, #4
{
    9e98:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    9e9c:	460c      	mov	r4, r1
    9e9e:	4617      	mov	r7, r2
    9ea0:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9ea2:	f7fc f949 	bl	6138 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9ea6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9ea8:	1e39      	subs	r1, r7, #0
    9eaa:	bf18      	it	ne
    9eac:	2101      	movne	r1, #1
    9eae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9eb2:	1e23      	subs	r3, r4, #0
    9eb4:	bf18      	it	ne
    9eb6:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9eb8:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9eba:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9ebe:	bf14      	ite	ne
    9ec0:	210c      	movne	r1, #12
    9ec2:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9ec4:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9ec6:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9eca:	bf14      	ite	ne
    9ecc:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    9ed0:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9ed2:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9ed6:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9eda:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9ede:	bf14      	ite	ne
    9ee0:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9ee4:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9ee6:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    9ee8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9eec:	b104      	cbz	r4, 9ef0 <nrf_gpio_reconfigure+0x60>
    9eee:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9ef0:	b10f      	cbz	r7, 9ef6 <nrf_gpio_reconfigure+0x66>
    9ef2:	783f      	ldrb	r7, [r7, #0]
    9ef4:	007f      	lsls	r7, r7, #1
    9ef6:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9ef8:	b10e      	cbz	r6, 9efe <nrf_gpio_reconfigure+0x6e>
    9efa:	7836      	ldrb	r6, [r6, #0]
    9efc:	00b6      	lsls	r6, r6, #2
    9efe:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9f00:	b18d      	cbz	r5, 9f26 <nrf_gpio_reconfigure+0x96>
    9f02:	7829      	ldrb	r1, [r5, #0]
    9f04:	0209      	lsls	r1, r1, #8
    9f06:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9f08:	f1b8 0f00 	cmp.w	r8, #0
    9f0c:	d003      	beq.n	9f16 <nrf_gpio_reconfigure+0x86>
    9f0e:	f898 8000 	ldrb.w	r8, [r8]
    9f12:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9f16:	4321      	orrs	r1, r4
    9f18:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    9f1c:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    9f20:	b002      	add	sp, #8
    9f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9f26:	4629      	mov	r1, r5
    9f28:	e7ed      	b.n	9f06 <nrf_gpio_reconfigure+0x76>

00009f2a <nrf_gpio_cfg_sense_set>:
{
    9f2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9f2c:	f10d 030f 	add.w	r3, sp, #15
    9f30:	9301      	str	r3, [sp, #4]
    9f32:	2300      	movs	r3, #0
{
    9f34:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9f38:	9300      	str	r3, [sp, #0]
    9f3a:	461a      	mov	r2, r3
    9f3c:	4619      	mov	r1, r3
    9f3e:	f7ff ffa7 	bl	9e90 <nrf_gpio_reconfigure>
}
    9f42:	b005      	add	sp, #20
    9f44:	f85d fb04 	ldr.w	pc, [sp], #4

00009f48 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9f48:	f7fc bcb6 	b.w	68b8 <_DoInit>

00009f4c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9f4c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9f4e:	f7ff fffb 	bl	9f48 <SEGGER_RTT_Init>

	return 0;
}
    9f52:	2000      	movs	r0, #0
    9f54:	bd08      	pop	{r3, pc}

00009f56 <z_device_state_init>:
}
    9f56:	4770      	bx	lr

00009f58 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9f58:	b138      	cbz	r0, 9f6a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9f5a:	68c3      	ldr	r3, [r0, #12]
    9f5c:	8818      	ldrh	r0, [r3, #0]
    9f5e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9f62:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    9f66:	4258      	negs	r0, r3
    9f68:	4158      	adcs	r0, r3
}
    9f6a:	4770      	bx	lr

00009f6c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    9f6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9f6e:	ab0b      	add	r3, sp, #44	; 0x2c
    9f70:	9305      	str	r3, [sp, #20]
    9f72:	9303      	str	r3, [sp, #12]
    9f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9f76:	9302      	str	r3, [sp, #8]
    9f78:	2300      	movs	r3, #0
    9f7a:	e9cd 3300 	strd	r3, r3, [sp]
    9f7e:	2201      	movs	r2, #1
    9f80:	4618      	mov	r0, r3
    9f82:	f7f9 fad7 	bl	3534 <z_impl_z_log_msg2_runtime_vcreate>
}
    9f86:	b007      	add	sp, #28
    9f88:	f85d fb04 	ldr.w	pc, [sp], #4

00009f8c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    9f8c:	f000 b90c 	b.w	a1a8 <memset>

00009f90 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9f90:	f000 b8fc 	b.w	a18c <memcpy>

00009f94 <k_mem_slab_init>:
{
    9f94:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9f96:	2400      	movs	r4, #0
    9f98:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    9f9a:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9f9c:	ea41 0402 	orr.w	r4, r1, r2
    9fa0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    9fa4:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    9fa8:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9faa:	d10c      	bne.n	9fc6 <k_mem_slab_init+0x32>
    9fac:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    9fae:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    9fb0:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9fb2:	d103      	bne.n	9fbc <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    9fb4:	e9c0 0000 	strd	r0, r0, [r0]
}
    9fb8:	2000      	movs	r0, #0
}
    9fba:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9fbc:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9fbe:	3401      	adds	r4, #1
    9fc0:	460d      	mov	r5, r1
		p += slab->block_size;
    9fc2:	4411      	add	r1, r2
    9fc4:	e7f3      	b.n	9fae <k_mem_slab_init+0x1a>
		return -EINVAL;
    9fc6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9fca:	e7f6      	b.n	9fba <k_mem_slab_init+0x26>

00009fcc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9fcc:	f3ef 8005 	mrs	r0, IPSR
}
    9fd0:	3800      	subs	r0, #0
    9fd2:	bf18      	it	ne
    9fd4:	2001      	movne	r0, #1
    9fd6:	4770      	bx	lr

00009fd8 <k_thread_name_get>:
}
    9fd8:	2000      	movs	r0, #0
    9fda:	4770      	bx	lr

00009fdc <z_pm_save_idle_exit>:
{
    9fdc:	b508      	push	{r3, lr}
	pm_system_resume();
    9fde:	f7f9 fc3d 	bl	385c <pm_system_resume>
}
    9fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    9fe6:	f7ff be2e 	b.w	9c46 <sys_clock_idle_exit>

00009fea <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9fea:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9fee:	428b      	cmp	r3, r1
    9ff0:	d001      	beq.n	9ff6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    9ff2:	f7fe b80f 	b.w	8014 <z_set_prio>
}
    9ff6:	2000      	movs	r0, #0
    9ff8:	4770      	bx	lr

00009ffa <z_impl_k_mutex_init>:
{
    9ffa:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9ffc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9ffe:	e9c3 0002 	strd	r0, r0, [r3, #8]
    a002:	e9c3 3300 	strd	r3, r3, [r3]
}
    a006:	4770      	bx	lr

0000a008 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a008:	b13a      	cbz	r2, a01a <z_impl_k_sem_init+0x12>
    a00a:	428a      	cmp	r2, r1
    a00c:	d305      	bcc.n	a01a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    a00e:	e9c0 1202 	strd	r1, r2, [r0, #8]
    a012:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    a016:	2000      	movs	r0, #0
    a018:	4770      	bx	lr
		return -EINVAL;
    a01a:	f06f 0015 	mvn.w	r0, #21
}
    a01e:	4770      	bx	lr

0000a020 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a020:	4603      	mov	r3, r0
    a022:	b920      	cbnz	r0, a02e <z_reschedule_irqlock+0xe>
    a024:	f3ef 8205 	mrs	r2, IPSR
    a028:	b90a      	cbnz	r2, a02e <z_reschedule_irqlock+0xe>
    a02a:	f7f9 becf 	b.w	3dcc <arch_swap>
    a02e:	f383 8811 	msr	BASEPRI, r3
    a032:	f3bf 8f6f 	isb	sy
}
    a036:	4770      	bx	lr

0000a038 <z_reschedule_unlocked>:
	__asm__ volatile(
    a038:	f04f 0320 	mov.w	r3, #32
    a03c:	f3ef 8011 	mrs	r0, BASEPRI
    a040:	f383 8812 	msr	BASEPRI_MAX, r3
    a044:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a048:	f7ff bfea 	b.w	a020 <z_reschedule_irqlock>

0000a04c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a04c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a04e:	f7fe fec5 	bl	8ddc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a052:	bd08      	pop	{r3, pc}

0000a054 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    a054:	f7fe bec2 	b.w	8ddc <sys_clock_tick_get>

0000a058 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a058:	b108      	cbz	r0, a05e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a05a:	f7fa bcdb 	b.w	4a14 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a05e:	4770      	bx	lr

0000a060 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a060:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    a064:	bf08      	it	eq
    a066:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    a06a:	b538      	push	{r3, r4, r5, lr}
    a06c:	460c      	mov	r4, r1
    a06e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a070:	d014      	beq.n	a09c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a072:	4308      	orrs	r0, r1
    a074:	d103      	bne.n	a07e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    a076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    a07a:	f7fe beaf 	b.w	8ddc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    a07e:	f06f 0001 	mvn.w	r0, #1
    a082:	1b40      	subs	r0, r0, r5
    a084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a088:	eb63 0101 	sbc.w	r1, r3, r1
    a08c:	2900      	cmp	r1, #0
    a08e:	da04      	bge.n	a09a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    a090:	f7fe fea4 	bl	8ddc <sys_clock_tick_get>
    a094:	1940      	adds	r0, r0, r5
    a096:	eb41 0104 	adc.w	r1, r1, r4
}
    a09a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    a09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a0a0:	4601      	mov	r1, r0
    a0a2:	e7fa      	b.n	a09a <sys_clock_timeout_end_calc+0x3a>

0000a0a4 <k_malloc>:
{
    a0a4:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    a0a6:	2004      	movs	r0, #4
    a0a8:	f7fe bf1e 	b.w	8ee8 <k_aligned_alloc>

0000a0ac <k_heap_init>:
{
    a0ac:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    a0ae:	f100 040c 	add.w	r4, r0, #12
    a0b2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    a0b6:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    a0b8:	f7f7 bfda 	b.w	2070 <sys_heap_init>

0000a0bc <open_cab>:
    uint16_t i;
    i = (buf - cab_id->buffers) / cab_id->num;
    return i;
}

cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c0:	4606      	mov	r6, r0

    cab* buffer = (cab *) k_malloc(sizeof(cab));
    a0c2:	2030      	movs	r0, #48	; 0x30
cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    a0c4:	460d      	mov	r5, r1
    a0c6:	4617      	mov	r7, r2
    a0c8:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    a0ca:	f7ff ffeb 	bl	a0a4 <k_malloc>
    buffer->num = num;
    a0ce:	8085      	strh	r5, [r0, #4]
    buffer->dim = dim;
    buffer->size = num * dim;
    a0d0:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    a0d4:	4604      	mov	r4, r0
    buffer->dim = dim;
    a0d6:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    a0d8:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    a0da:	301c      	adds	r0, #28
    a0dc:	f7ff ff8d 	bl	9ffa <z_impl_k_mutex_init>
    k_mutex_init(&buffer->mutex);
    /* The minimum number of buffers needed for a CAB to avoid conflicts 
    must be equal to the number of tasks which share the CAB plus one */
    buffer->buffers = (uint16_t *) k_malloc(buffer->size * N_TASKS); 
    a0e0:	8920      	ldrh	r0, [r4, #8]
    a0e2:	0040      	lsls	r0, r0, #1
    a0e4:	f7ff ffde 	bl	a0a4 <k_malloc>
    a0e8:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    a0ea:	4630      	mov	r0, r6
    a0ec:	f7f6 fe18 	bl	d20 <strlen>
    a0f0:	f7ff ffd8 	bl	a0a4 <k_malloc>
    a0f4:	6020      	str	r0, [r4, #0]
    buffer->head = (uint16_t *) k_malloc(buffer->size);
    a0f6:	8920      	ldrh	r0, [r4, #8]
    a0f8:	f7ff ffd4 	bl	a0a4 <k_malloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    a0fc:	4631      	mov	r1, r6
    a0fe:	61a0      	str	r0, [r4, #24]
    a100:	6820      	ldr	r0, [r4, #0]
    a102:	f000 f859 	bl	a1b8 <strcpy>
    strcpy(buffer->name, name);
    buffer->head = first;
    a106:	f8c4 8018 	str.w	r8, [r4, #24]
    return buffer;
}
    a10a:	4620      	mov	r0, r4
    a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a110 <nearObstSearch>:

/* Function to look for closeby obstacles */
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    uint8_t flag = 0;
    /* Iterating through the CSA, tops to bottom, left column to right column */
	for (uint16_t i = CSA_FRONT; i < IMGHEIGHT; i++)
    a110:	f500 53fe 	add.w	r3, r0, #8128	; 0x1fc0
    a114:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a118:	331f      	adds	r3, #31
    a11a:	305f      	adds	r0, #95	; 0x5f
    {
        for (int j = CSA_LEFT; j < CSA_RIGHT; j++)
    a11c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
        {   /* If the pixel is an obstacle returns 1 */    
            if(imageBuf[i][j] == OBSTACLE_COLOR){
    a120:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    a124:	2980      	cmp	r1, #128	; 0x80
    a126:	d007      	beq.n	a138 <nearObstSearch+0x28>
        for (int j = CSA_LEFT; j < CSA_RIGHT; j++)
    a128:	429a      	cmp	r2, r3
    a12a:	d1f9      	bne.n	a120 <nearObstSearch+0x10>
	for (uint16_t i = CSA_FRONT; i < IMGHEIGHT; i++)
    a12c:	f102 0380 	add.w	r3, r2, #128	; 0x80
    a130:	4283      	cmp	r3, r0
    a132:	d1f3      	bne.n	a11c <nearObstSearch+0xc>
                flag = 1;
                return flag;
            }
        }
    }
    return flag;
    a134:	2000      	movs	r0, #0
}
    a136:	4770      	bx	lr
                return flag;
    a138:	2001      	movs	r0, #1
    a13a:	4770      	bx	lr

0000a13c <obstCount>:

/* Function that counts obstacles. */
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    a13c:	b530      	push	{r4, r5, lr}
    a13e:	f500 4280 	add.w	r2, r0, #16384	; 0x4000
    a142:	f100 017f 	add.w	r1, r0, #127	; 0x7f
    a146:	327f      	adds	r2, #127	; 0x7f
    /* Number of obstacles */
    uint16_t obs = 0; 
    a148:	2000      	movs	r0, #0
    uint16_t c_pixels = 0; 
    /* Iterating through the image, tops to bottom, left column to right column */
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    {

        for (int j = 0; j < IMGWIDTH; j++)
    a14a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    a14e:	2300      	movs	r3, #0
        {   /* If the pixel is an obstacle the pixel count increments and goes to its next iteration */    
            if(imageBuf[i][j] == OBSTACLE_COLOR){
    a150:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    a154:	2d80      	cmp	r5, #128	; 0x80
    a156:	d10d      	bne.n	a174 <obstCount+0x38>
                c_pixels++;
    a158:	3301      	adds	r3, #1
    a15a:	b29b      	uxth	r3, r3
        for (int j = 0; j < IMGWIDTH; j++)
    a15c:	428c      	cmp	r4, r1
    a15e:	d1f7      	bne.n	a150 <obstCount+0x14>
            if(c_pixels >= 2) obs++;
            /* Reset the pixel count when there no pixels in the sequence */
            c_pixels = 0;
        }
        /* Same step as done above but to avoid bugs with last pixel from last row */
        if(c_pixels >= 2) obs++;
    a160:	2b01      	cmp	r3, #1
    a162:	bf88      	it	hi
    a164:	3001      	addhi	r0, #1
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    a166:	f101 0180 	add.w	r1, r1, #128	; 0x80
        if(c_pixels >= 2) obs++;
    a16a:	bf88      	it	hi
    a16c:	b280      	uxthhi	r0, r0
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    a16e:	4291      	cmp	r1, r2
    a170:	d1eb      	bne.n	a14a <obstCount+0xe>
        
        c_pixels = 0;
    }

    return obs;
    a172:	bd30      	pop	{r4, r5, pc}
            if(c_pixels >= 2) obs++;
    a174:	2b01      	cmp	r3, #1
    a176:	bf84      	itt	hi
    a178:	3001      	addhi	r0, #1
    a17a:	b280      	uxthhi	r0, r0
            c_pixels = 0;
    a17c:	2300      	movs	r3, #0
    a17e:	e7ed      	b.n	a15c <obstCount+0x20>

0000a180 <atan2>:
    a180:	f7f6 be06 	b.w	d90 <__ieee754_atan2>

0000a184 <fabs>:
    a184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    a188:	4619      	mov	r1, r3
    a18a:	4770      	bx	lr

0000a18c <memcpy>:
    a18c:	440a      	add	r2, r1
    a18e:	4291      	cmp	r1, r2
    a190:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a194:	d100      	bne.n	a198 <memcpy+0xc>
    a196:	4770      	bx	lr
    a198:	b510      	push	{r4, lr}
    a19a:	f811 4b01 	ldrb.w	r4, [r1], #1
    a19e:	f803 4f01 	strb.w	r4, [r3, #1]!
    a1a2:	4291      	cmp	r1, r2
    a1a4:	d1f9      	bne.n	a19a <memcpy+0xe>
    a1a6:	bd10      	pop	{r4, pc}

0000a1a8 <memset>:
    a1a8:	4402      	add	r2, r0
    a1aa:	4603      	mov	r3, r0
    a1ac:	4293      	cmp	r3, r2
    a1ae:	d100      	bne.n	a1b2 <memset+0xa>
    a1b0:	4770      	bx	lr
    a1b2:	f803 1b01 	strb.w	r1, [r3], #1
    a1b6:	e7f9      	b.n	a1ac <memset+0x4>

0000a1b8 <strcpy>:
    a1b8:	4603      	mov	r3, r0
    a1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    a1be:	f803 2b01 	strb.w	r2, [r3], #1
    a1c2:	2a00      	cmp	r2, #0
    a1c4:	d1f9      	bne.n	a1ba <strcpy+0x2>
    a1c6:	4770      	bx	lr

0000a1c8 <strnlen>:
    a1c8:	b510      	push	{r4, lr}
    a1ca:	4602      	mov	r2, r0
    a1cc:	4401      	add	r1, r0
    a1ce:	428a      	cmp	r2, r1
    a1d0:	4613      	mov	r3, r2
    a1d2:	d003      	beq.n	a1dc <strnlen+0x14>
    a1d4:	781c      	ldrb	r4, [r3, #0]
    a1d6:	3201      	adds	r2, #1
    a1d8:	2c00      	cmp	r4, #0
    a1da:	d1f8      	bne.n	a1ce <strnlen+0x6>
    a1dc:	1a18      	subs	r0, r3, r0
    a1de:	bd10      	pop	{r4, pc}

0000a1e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    a1e0:	f7fb bcc6 	b.w	5b70 <SystemInit>
