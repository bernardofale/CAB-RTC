
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 8b 00 20 25 41 00 00 77 aa 00 00 f9 40 00 00     ... %A..w....@..
  10:	f9 40 00 00 f9 40 00 00 f9 40 00 00 00 00 00 00     .@...@...@......
	...
  2c:	e1 39 00 00 f9 40 00 00 00 00 00 00 8d 39 00 00     .9...@.......9..
  3c:	f9 40 00 00                                         .@..

00000040 <_irq_vector_table>:
  40:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  50:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  60:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  70:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  80:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  90:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  a0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  b0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  c0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  d0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  e0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..
  f0:	91 3a 00 00 91 3a 00 00 91 3a 00 00 91 3a 00 00     .:...:...:...:..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9f0:	f000 b80c 	b.w	a0c <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f890 	bl	b20 <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__aeabi_idiv0>:
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <__gedf2>:
     a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a14:	e006      	b.n	a24 <__cmpdf2+0x4>
     a16:	bf00      	nop

00000a18 <__ledf2>:
     a18:	f04f 0c01 	mov.w	ip, #1
     a1c:	e002      	b.n	a24 <__cmpdf2+0x4>
     a1e:	bf00      	nop

00000a20 <__cmpdf2>:
     a20:	f04f 0c01 	mov.w	ip, #1
     a24:	f84d cd04 	str.w	ip, [sp, #-4]!
     a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a34:	bf18      	it	ne
     a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a3a:	d01b      	beq.n	a74 <__cmpdf2+0x54>
     a3c:	b001      	add	sp, #4
     a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a42:	bf0c      	ite	eq
     a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a48:	ea91 0f03 	teqne	r1, r3
     a4c:	bf02      	ittt	eq
     a4e:	ea90 0f02 	teqeq	r0, r2
     a52:	2000      	moveq	r0, #0
     a54:	4770      	bxeq	lr
     a56:	f110 0f00 	cmn.w	r0, #0
     a5a:	ea91 0f03 	teq	r1, r3
     a5e:	bf58      	it	pl
     a60:	4299      	cmppl	r1, r3
     a62:	bf08      	it	eq
     a64:	4290      	cmpeq	r0, r2
     a66:	bf2c      	ite	cs
     a68:	17d8      	asrcs	r0, r3, #31
     a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a6e:	f040 0001 	orr.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a7c:	d102      	bne.n	a84 <__cmpdf2+0x64>
     a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a82:	d107      	bne.n	a94 <__cmpdf2+0x74>
     a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a8c:	d1d6      	bne.n	a3c <__cmpdf2+0x1c>
     a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a92:	d0d3      	beq.n	a3c <__cmpdf2+0x1c>
     a94:	f85d 0b04 	ldr.w	r0, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_cdrcmple>:
     a9c:	4684      	mov	ip, r0
     a9e:	4610      	mov	r0, r2
     aa0:	4662      	mov	r2, ip
     aa2:	468c      	mov	ip, r1
     aa4:	4619      	mov	r1, r3
     aa6:	4663      	mov	r3, ip
     aa8:	e000      	b.n	aac <__aeabi_cdcmpeq>
     aaa:	bf00      	nop

00000aac <__aeabi_cdcmpeq>:
     aac:	b501      	push	{r0, lr}
     aae:	f7ff ffb7 	bl	a20 <__cmpdf2>
     ab2:	2800      	cmp	r0, #0
     ab4:	bf48      	it	mi
     ab6:	f110 0f00 	cmnmi.w	r0, #0
     aba:	bd01      	pop	{r0, pc}

00000abc <__aeabi_dcmpeq>:
     abc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac0:	f7ff fff4 	bl	aac <__aeabi_cdcmpeq>
     ac4:	bf0c      	ite	eq
     ac6:	2001      	moveq	r0, #1
     ac8:	2000      	movne	r0, #0
     aca:	f85d fb08 	ldr.w	pc, [sp], #8
     ace:	bf00      	nop

00000ad0 <__aeabi_dcmplt>:
     ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad4:	f7ff ffea 	bl	aac <__aeabi_cdcmpeq>
     ad8:	bf34      	ite	cc
     ada:	2001      	movcc	r0, #1
     adc:	2000      	movcs	r0, #0
     ade:	f85d fb08 	ldr.w	pc, [sp], #8
     ae2:	bf00      	nop

00000ae4 <__aeabi_dcmple>:
     ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ae8:	f7ff ffe0 	bl	aac <__aeabi_cdcmpeq>
     aec:	bf94      	ite	ls
     aee:	2001      	movls	r0, #1
     af0:	2000      	movhi	r0, #0
     af2:	f85d fb08 	ldr.w	pc, [sp], #8
     af6:	bf00      	nop

00000af8 <__aeabi_dcmpge>:
     af8:	f84d ed08 	str.w	lr, [sp, #-8]!
     afc:	f7ff ffce 	bl	a9c <__aeabi_cdrcmple>
     b00:	bf94      	ite	ls
     b02:	2001      	movls	r0, #1
     b04:	2000      	movhi	r0, #0
     b06:	f85d fb08 	ldr.w	pc, [sp], #8
     b0a:	bf00      	nop

00000b0c <__aeabi_dcmpgt>:
     b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b10:	f7ff ffc4 	bl	a9c <__aeabi_cdrcmple>
     b14:	bf34      	ite	cc
     b16:	2001      	movcc	r0, #1
     b18:	2000      	movcs	r0, #0
     b1a:	f85d fb08 	ldr.w	pc, [sp], #8
     b1e:	bf00      	nop

00000b20 <__udivmoddi4>:
     b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b24:	4686      	mov	lr, r0
     b26:	468c      	mov	ip, r1
     b28:	4608      	mov	r0, r1
     b2a:	9e08      	ldr	r6, [sp, #32]
     b2c:	4615      	mov	r5, r2
     b2e:	4674      	mov	r4, lr
     b30:	4619      	mov	r1, r3
     b32:	2b00      	cmp	r3, #0
     b34:	f040 80c2 	bne.w	cbc <__udivmoddi4+0x19c>
     b38:	4285      	cmp	r5, r0
     b3a:	fab2 f282 	clz	r2, r2
     b3e:	d945      	bls.n	bcc <__udivmoddi4+0xac>
     b40:	b14a      	cbz	r2, b56 <__udivmoddi4+0x36>
     b42:	f1c2 0320 	rsb	r3, r2, #32
     b46:	fa00 fc02 	lsl.w	ip, r0, r2
     b4a:	fa2e f303 	lsr.w	r3, lr, r3
     b4e:	4095      	lsls	r5, r2
     b50:	ea43 0c0c 	orr.w	ip, r3, ip
     b54:	4094      	lsls	r4, r2
     b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b5a:	b2a8      	uxth	r0, r5
     b5c:	fbbc f8fe 	udiv	r8, ip, lr
     b60:	0c23      	lsrs	r3, r4, #16
     b62:	fb0e cc18 	mls	ip, lr, r8, ip
     b66:	fb08 f900 	mul.w	r9, r8, r0
     b6a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     b6e:	4599      	cmp	r9, r3
     b70:	d928      	bls.n	bc4 <__udivmoddi4+0xa4>
     b72:	18eb      	adds	r3, r5, r3
     b74:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     b78:	d204      	bcs.n	b84 <__udivmoddi4+0x64>
     b7a:	4599      	cmp	r9, r3
     b7c:	d902      	bls.n	b84 <__udivmoddi4+0x64>
     b7e:	f1a8 0702 	sub.w	r7, r8, #2
     b82:	442b      	add	r3, r5
     b84:	eba3 0309 	sub.w	r3, r3, r9
     b88:	b2a4      	uxth	r4, r4
     b8a:	fbb3 fcfe 	udiv	ip, r3, lr
     b8e:	fb0e 331c 	mls	r3, lr, ip, r3
     b92:	fb0c f000 	mul.w	r0, ip, r0
     b96:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     b9a:	42a0      	cmp	r0, r4
     b9c:	d914      	bls.n	bc8 <__udivmoddi4+0xa8>
     b9e:	192c      	adds	r4, r5, r4
     ba0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ba4:	d204      	bcs.n	bb0 <__udivmoddi4+0x90>
     ba6:	42a0      	cmp	r0, r4
     ba8:	d902      	bls.n	bb0 <__udivmoddi4+0x90>
     baa:	f1ac 0302 	sub.w	r3, ip, #2
     bae:	442c      	add	r4, r5
     bb0:	1a24      	subs	r4, r4, r0
     bb2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     bb6:	b11e      	cbz	r6, bc0 <__udivmoddi4+0xa0>
     bb8:	40d4      	lsrs	r4, r2
     bba:	2300      	movs	r3, #0
     bbc:	6034      	str	r4, [r6, #0]
     bbe:	6073      	str	r3, [r6, #4]
     bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bc4:	4647      	mov	r7, r8
     bc6:	e7dd      	b.n	b84 <__udivmoddi4+0x64>
     bc8:	4663      	mov	r3, ip
     bca:	e7f1      	b.n	bb0 <__udivmoddi4+0x90>
     bcc:	bb92      	cbnz	r2, c34 <__udivmoddi4+0x114>
     bce:	1b43      	subs	r3, r0, r5
     bd0:	2101      	movs	r1, #1
     bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     bd6:	b2af      	uxth	r7, r5
     bd8:	fbb3 fcfe 	udiv	ip, r3, lr
     bdc:	0c20      	lsrs	r0, r4, #16
     bde:	fb0e 331c 	mls	r3, lr, ip, r3
     be2:	fb0c f807 	mul.w	r8, ip, r7
     be6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     bea:	4598      	cmp	r8, r3
     bec:	d962      	bls.n	cb4 <__udivmoddi4+0x194>
     bee:	18eb      	adds	r3, r5, r3
     bf0:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     bf4:	d204      	bcs.n	c00 <__udivmoddi4+0xe0>
     bf6:	4598      	cmp	r8, r3
     bf8:	d902      	bls.n	c00 <__udivmoddi4+0xe0>
     bfa:	f1ac 0002 	sub.w	r0, ip, #2
     bfe:	442b      	add	r3, r5
     c00:	eba3 0308 	sub.w	r3, r3, r8
     c04:	b2a4      	uxth	r4, r4
     c06:	fbb3 fcfe 	udiv	ip, r3, lr
     c0a:	fb0e 331c 	mls	r3, lr, ip, r3
     c0e:	fb0c f707 	mul.w	r7, ip, r7
     c12:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c16:	42a7      	cmp	r7, r4
     c18:	d94e      	bls.n	cb8 <__udivmoddi4+0x198>
     c1a:	192c      	adds	r4, r5, r4
     c1c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     c20:	d204      	bcs.n	c2c <__udivmoddi4+0x10c>
     c22:	42a7      	cmp	r7, r4
     c24:	d902      	bls.n	c2c <__udivmoddi4+0x10c>
     c26:	f1ac 0302 	sub.w	r3, ip, #2
     c2a:	442c      	add	r4, r5
     c2c:	1be4      	subs	r4, r4, r7
     c2e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c32:	e7c0      	b.n	bb6 <__udivmoddi4+0x96>
     c34:	f1c2 0320 	rsb	r3, r2, #32
     c38:	fa20 f103 	lsr.w	r1, r0, r3
     c3c:	4095      	lsls	r5, r2
     c3e:	4090      	lsls	r0, r2
     c40:	fa2e f303 	lsr.w	r3, lr, r3
     c44:	4303      	orrs	r3, r0
     c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c4a:	b2af      	uxth	r7, r5
     c4c:	fbb1 fcfe 	udiv	ip, r1, lr
     c50:	fb0e 101c 	mls	r0, lr, ip, r1
     c54:	0c19      	lsrs	r1, r3, #16
     c56:	fb0c f807 	mul.w	r8, ip, r7
     c5a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c5e:	4588      	cmp	r8, r1
     c60:	fa04 f402 	lsl.w	r4, r4, r2
     c64:	d922      	bls.n	cac <__udivmoddi4+0x18c>
     c66:	1869      	adds	r1, r5, r1
     c68:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c6c:	d204      	bcs.n	c78 <__udivmoddi4+0x158>
     c6e:	4588      	cmp	r8, r1
     c70:	d902      	bls.n	c78 <__udivmoddi4+0x158>
     c72:	f1ac 0002 	sub.w	r0, ip, #2
     c76:	4429      	add	r1, r5
     c78:	eba1 0108 	sub.w	r1, r1, r8
     c7c:	b29b      	uxth	r3, r3
     c7e:	fbb1 fcfe 	udiv	ip, r1, lr
     c82:	fb0e 111c 	mls	r1, lr, ip, r1
     c86:	fb0c f707 	mul.w	r7, ip, r7
     c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     c8e:	429f      	cmp	r7, r3
     c90:	d90e      	bls.n	cb0 <__udivmoddi4+0x190>
     c92:	18eb      	adds	r3, r5, r3
     c94:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     c98:	d204      	bcs.n	ca4 <__udivmoddi4+0x184>
     c9a:	429f      	cmp	r7, r3
     c9c:	d902      	bls.n	ca4 <__udivmoddi4+0x184>
     c9e:	f1ac 0102 	sub.w	r1, ip, #2
     ca2:	442b      	add	r3, r5
     ca4:	1bdb      	subs	r3, r3, r7
     ca6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     caa:	e792      	b.n	bd2 <__udivmoddi4+0xb2>
     cac:	4660      	mov	r0, ip
     cae:	e7e3      	b.n	c78 <__udivmoddi4+0x158>
     cb0:	4661      	mov	r1, ip
     cb2:	e7f7      	b.n	ca4 <__udivmoddi4+0x184>
     cb4:	4660      	mov	r0, ip
     cb6:	e7a3      	b.n	c00 <__udivmoddi4+0xe0>
     cb8:	4663      	mov	r3, ip
     cba:	e7b7      	b.n	c2c <__udivmoddi4+0x10c>
     cbc:	4283      	cmp	r3, r0
     cbe:	d906      	bls.n	cce <__udivmoddi4+0x1ae>
     cc0:	b916      	cbnz	r6, cc8 <__udivmoddi4+0x1a8>
     cc2:	2100      	movs	r1, #0
     cc4:	4608      	mov	r0, r1
     cc6:	e77b      	b.n	bc0 <__udivmoddi4+0xa0>
     cc8:	e9c6 e000 	strd	lr, r0, [r6]
     ccc:	e7f9      	b.n	cc2 <__udivmoddi4+0x1a2>
     cce:	fab3 f783 	clz	r7, r3
     cd2:	b98f      	cbnz	r7, cf8 <__udivmoddi4+0x1d8>
     cd4:	4283      	cmp	r3, r0
     cd6:	d301      	bcc.n	cdc <__udivmoddi4+0x1bc>
     cd8:	4572      	cmp	r2, lr
     cda:	d808      	bhi.n	cee <__udivmoddi4+0x1ce>
     cdc:	ebbe 0402 	subs.w	r4, lr, r2
     ce0:	eb60 0303 	sbc.w	r3, r0, r3
     ce4:	2001      	movs	r0, #1
     ce6:	469c      	mov	ip, r3
     ce8:	b91e      	cbnz	r6, cf2 <__udivmoddi4+0x1d2>
     cea:	2100      	movs	r1, #0
     cec:	e768      	b.n	bc0 <__udivmoddi4+0xa0>
     cee:	4638      	mov	r0, r7
     cf0:	e7fa      	b.n	ce8 <__udivmoddi4+0x1c8>
     cf2:	e9c6 4c00 	strd	r4, ip, [r6]
     cf6:	e7f8      	b.n	cea <__udivmoddi4+0x1ca>
     cf8:	f1c7 0c20 	rsb	ip, r7, #32
     cfc:	40bb      	lsls	r3, r7
     cfe:	fa22 f40c 	lsr.w	r4, r2, ip
     d02:	431c      	orrs	r4, r3
     d04:	fa2e f10c 	lsr.w	r1, lr, ip
     d08:	fa20 f30c 	lsr.w	r3, r0, ip
     d0c:	40b8      	lsls	r0, r7
     d0e:	4301      	orrs	r1, r0
     d10:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d14:	fa0e f507 	lsl.w	r5, lr, r7
     d18:	fbb3 f8f9 	udiv	r8, r3, r9
     d1c:	fa1f fe84 	uxth.w	lr, r4
     d20:	fb09 3018 	mls	r0, r9, r8, r3
     d24:	0c0b      	lsrs	r3, r1, #16
     d26:	fb08 fa0e 	mul.w	sl, r8, lr
     d2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     d2e:	459a      	cmp	sl, r3
     d30:	fa02 f207 	lsl.w	r2, r2, r7
     d34:	d940      	bls.n	db8 <__udivmoddi4+0x298>
     d36:	18e3      	adds	r3, r4, r3
     d38:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     d3c:	d204      	bcs.n	d48 <__udivmoddi4+0x228>
     d3e:	459a      	cmp	sl, r3
     d40:	d902      	bls.n	d48 <__udivmoddi4+0x228>
     d42:	f1a8 0002 	sub.w	r0, r8, #2
     d46:	4423      	add	r3, r4
     d48:	eba3 030a 	sub.w	r3, r3, sl
     d4c:	b289      	uxth	r1, r1
     d4e:	fbb3 f8f9 	udiv	r8, r3, r9
     d52:	fb09 3318 	mls	r3, r9, r8, r3
     d56:	fb08 fe0e 	mul.w	lr, r8, lr
     d5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d5e:	458e      	cmp	lr, r1
     d60:	d92c      	bls.n	dbc <__udivmoddi4+0x29c>
     d62:	1861      	adds	r1, r4, r1
     d64:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     d68:	d204      	bcs.n	d74 <__udivmoddi4+0x254>
     d6a:	458e      	cmp	lr, r1
     d6c:	d902      	bls.n	d74 <__udivmoddi4+0x254>
     d6e:	f1a8 0302 	sub.w	r3, r8, #2
     d72:	4421      	add	r1, r4
     d74:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d78:	fba0 9802 	umull	r9, r8, r0, r2
     d7c:	eba1 010e 	sub.w	r1, r1, lr
     d80:	4541      	cmp	r1, r8
     d82:	46ce      	mov	lr, r9
     d84:	4643      	mov	r3, r8
     d86:	d302      	bcc.n	d8e <__udivmoddi4+0x26e>
     d88:	d106      	bne.n	d98 <__udivmoddi4+0x278>
     d8a:	454d      	cmp	r5, r9
     d8c:	d204      	bcs.n	d98 <__udivmoddi4+0x278>
     d8e:	ebb9 0e02 	subs.w	lr, r9, r2
     d92:	eb68 0304 	sbc.w	r3, r8, r4
     d96:	3801      	subs	r0, #1
     d98:	2e00      	cmp	r6, #0
     d9a:	d0a6      	beq.n	cea <__udivmoddi4+0x1ca>
     d9c:	ebb5 020e 	subs.w	r2, r5, lr
     da0:	eb61 0103 	sbc.w	r1, r1, r3
     da4:	fa01 fc0c 	lsl.w	ip, r1, ip
     da8:	fa22 f307 	lsr.w	r3, r2, r7
     dac:	ea4c 0303 	orr.w	r3, ip, r3
     db0:	40f9      	lsrs	r1, r7
     db2:	e9c6 3100 	strd	r3, r1, [r6]
     db6:	e798      	b.n	cea <__udivmoddi4+0x1ca>
     db8:	4640      	mov	r0, r8
     dba:	e7c5      	b.n	d48 <__udivmoddi4+0x228>
     dbc:	4643      	mov	r3, r8
     dbe:	e7d9      	b.n	d74 <__udivmoddi4+0x254>

00000dc0 <strcmp>:
     dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
     dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
     dc8:	2a01      	cmp	r2, #1
     dca:	bf28      	it	cs
     dcc:	429a      	cmpcs	r2, r3
     dce:	d0f7      	beq.n	dc0 <strcmp>
     dd0:	1ad0      	subs	r0, r2, r3
     dd2:	4770      	bx	lr

00000dd4 <strlen>:
     dd4:	4603      	mov	r3, r0
     dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
     dda:	2a00      	cmp	r2, #0
     ddc:	d1fb      	bne.n	dd6 <strlen+0x2>
     dde:	1a18      	subs	r0, r3, r0
     de0:	3801      	subs	r0, #1
     de2:	4770      	bx	lr
     de4:	0000      	movs	r0, r0
	...

00000de8 <guideLineSearch>:
#include "img_algo.h"

/* Function that detects he position and agle of the guideline */
/* Worst case scenario: The guidelines in GN/GF are on the last index of each row*/
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH], uint16_t* pos, float* angle) {
     de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dea:	2400      	movs	r4, #0
     dec:	460d      	mov	r5, r1
     dee:	4617      	mov	r7, r2
     df0:	4626      	mov	r6, r4
     df2:	4623      	mov	r3, r4
    uint16_t y_gn = 0;
    uint16_t y_gf = GN - 1;
    /* Iterate through GN and GF to discover the position of the guidelines */
    for(uint16_t i = GF; i <= GN; i += GN - 1){
        for(uint16_t j = 0; j < IMGWIDTH; j++){
            if(imageBuf[i][j] == GUIDELINE_COLOR){
     df4:	5cc2      	ldrb	r2, [r0, r3]
     df6:	2aff      	cmp	r2, #255	; 0xff
     df8:	d01e      	beq.n	e38 <guideLineSearch+0x50>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     dfa:	3301      	adds	r3, #1
     dfc:	2b80      	cmp	r3, #128	; 0x80
     dfe:	d1f9      	bne.n	df4 <guideLineSearch+0xc>
     e00:	f500 537d 	add.w	r3, r0, #16192	; 0x3f40
     e04:	333f      	adds	r3, #63	; 0x3f
void guideLineSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH], uint16_t* pos, float* angle) {
     e06:	2100      	movs	r1, #0
            if(imageBuf[i][j] == GUIDELINE_COLOR){
     e08:	f813 2f01 	ldrb.w	r2, [r3, #1]!
     e0c:	2aff      	cmp	r2, #255	; 0xff
     e0e:	d015      	beq.n	e3c <guideLineSearch+0x54>
        for(uint16_t j = 0; j < IMGWIDTH; j++){
     e10:	3101      	adds	r1, #1
     e12:	2980      	cmp	r1, #128	; 0x80
     e14:	d1f8      	bne.n	e08 <guideLineSearch+0x20>
        }
    }
    /* When the guideline is vertical the angle is 0 rad, positive angles are associated with a tilt to the right 
    and negative angles to a tilt to the left 
    Calculation of angle between the two points in radians */
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     e16:	1ba0      	subs	r0, r4, r6
     e18:	f7ff fb14 	bl	444 <__aeabi_i2d>
     e1c:	a308      	add	r3, pc, #32	; (adr r3, e40 <guideLineSearch+0x58>)
     e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
     e22:	f00a fbc8 	bl	b5b6 <atan2>
     e26:	f7ff fd89 	bl	93c <__aeabi_d2f>
    /* Computing of the position */
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     e2a:	2364      	movs	r3, #100	; 0x64
     e2c:	fb06 3303 	mla	r3, r6, r3, r3
     e30:	11db      	asrs	r3, r3, #7
    *angle = atan2(x_gf - x_gn, y_gf - y_gn);
     e32:	6038      	str	r0, [r7, #0]
    *pos = ((x_gn + 1) * 100) / IMGWIDTH;
     e34:	802b      	strh	r3, [r5, #0]
}
     e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e38:	b29c      	uxth	r4, r3
     e3a:	e7e1      	b.n	e00 <guideLineSearch+0x18>
     e3c:	b28e      	uxth	r6, r1
     e3e:	e7ea      	b.n	e16 <guideLineSearch+0x2e>
     e40:	00000000 	.word	0x00000000
     e44:	405fc000 	.word	0x405fc000

00000e48 <__ieee754_atan2>:
     e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e4c:	4617      	mov	r7, r2
     e4e:	4690      	mov	r8, r2
     e50:	4699      	mov	r9, r3
     e52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
     e56:	427b      	negs	r3, r7
     e58:	f8df a184 	ldr.w	sl, [pc, #388]	; fe0 <__ieee754_atan2+0x198>
     e5c:	433b      	orrs	r3, r7
     e5e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
     e62:	4553      	cmp	r3, sl
     e64:	4604      	mov	r4, r0
     e66:	460d      	mov	r5, r1
     e68:	d809      	bhi.n	e7e <__ieee754_atan2+0x36>
     e6a:	4246      	negs	r6, r0
     e6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     e70:	4306      	orrs	r6, r0
     e72:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
     e76:	4556      	cmp	r6, sl
     e78:	468e      	mov	lr, r1
     e7a:	4683      	mov	fp, r0
     e7c:	d908      	bls.n	e90 <__ieee754_atan2+0x48>
     e7e:	4642      	mov	r2, r8
     e80:	464b      	mov	r3, r9
     e82:	4620      	mov	r0, r4
     e84:	4629      	mov	r1, r5
     e86:	f7ff f991 	bl	1ac <__adddf3>
     e8a:	4604      	mov	r4, r0
     e8c:	460d      	mov	r5, r1
     e8e:	e016      	b.n	ebe <__ieee754_atan2+0x76>
     e90:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
     e94:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
     e98:	433e      	orrs	r6, r7
     e9a:	d103      	bne.n	ea4 <__ieee754_atan2+0x5c>
     e9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea0:	f000 b8a6 	b.w	ff0 <atan>
     ea4:	ea4f 76a9 	mov.w	r6, r9, asr #30
     ea8:	f006 0602 	and.w	r6, r6, #2
     eac:	ea53 0b0b 	orrs.w	fp, r3, fp
     eb0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
     eb4:	d107      	bne.n	ec6 <__ieee754_atan2+0x7e>
     eb6:	2e02      	cmp	r6, #2
     eb8:	d064      	beq.n	f84 <__ieee754_atan2+0x13c>
     eba:	2e03      	cmp	r6, #3
     ebc:	d066      	beq.n	f8c <__ieee754_atan2+0x144>
     ebe:	4620      	mov	r0, r4
     ec0:	4629      	mov	r1, r5
     ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ec6:	4317      	orrs	r7, r2
     ec8:	d106      	bne.n	ed8 <__ieee754_atan2+0x90>
     eca:	f1be 0f00 	cmp.w	lr, #0
     ece:	da68      	bge.n	fa2 <__ieee754_atan2+0x15a>
     ed0:	a537      	add	r5, pc, #220	; (adr r5, fb0 <__ieee754_atan2+0x168>)
     ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
     ed6:	e7f2      	b.n	ebe <__ieee754_atan2+0x76>
     ed8:	4552      	cmp	r2, sl
     eda:	d10f      	bne.n	efc <__ieee754_atan2+0xb4>
     edc:	4293      	cmp	r3, r2
     ede:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
     ee2:	d107      	bne.n	ef4 <__ieee754_atan2+0xac>
     ee4:	2e02      	cmp	r6, #2
     ee6:	d855      	bhi.n	f94 <__ieee754_atan2+0x14c>
     ee8:	4b3e      	ldr	r3, [pc, #248]	; (fe4 <__ieee754_atan2+0x19c>)
     eea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     eee:	e9d3 4500 	ldrd	r4, r5, [r3]
     ef2:	e7e4      	b.n	ebe <__ieee754_atan2+0x76>
     ef4:	2e02      	cmp	r6, #2
     ef6:	d851      	bhi.n	f9c <__ieee754_atan2+0x154>
     ef8:	4b3b      	ldr	r3, [pc, #236]	; (fe8 <__ieee754_atan2+0x1a0>)
     efa:	e7f6      	b.n	eea <__ieee754_atan2+0xa2>
     efc:	4553      	cmp	r3, sl
     efe:	d0e4      	beq.n	eca <__ieee754_atan2+0x82>
     f00:	1a9b      	subs	r3, r3, r2
     f02:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
     f06:	ea4f 5223 	mov.w	r2, r3, asr #20
     f0a:	da21      	bge.n	f50 <__ieee754_atan2+0x108>
     f0c:	f1b9 0f00 	cmp.w	r9, #0
     f10:	da01      	bge.n	f16 <__ieee754_atan2+0xce>
     f12:	323c      	adds	r2, #60	; 0x3c
     f14:	db20      	blt.n	f58 <__ieee754_atan2+0x110>
     f16:	4642      	mov	r2, r8
     f18:	464b      	mov	r3, r9
     f1a:	4620      	mov	r0, r4
     f1c:	4629      	mov	r1, r5
     f1e:	f7ff fc25 	bl	76c <__aeabi_ddiv>
     f22:	f00a fb4a 	bl	b5ba <fabs>
     f26:	f000 f863 	bl	ff0 <atan>
     f2a:	4604      	mov	r4, r0
     f2c:	460d      	mov	r5, r1
     f2e:	2e01      	cmp	r6, #1
     f30:	d015      	beq.n	f5e <__ieee754_atan2+0x116>
     f32:	2e02      	cmp	r6, #2
     f34:	d017      	beq.n	f66 <__ieee754_atan2+0x11e>
     f36:	2e00      	cmp	r6, #0
     f38:	d0c1      	beq.n	ebe <__ieee754_atan2+0x76>
     f3a:	a31f      	add	r3, pc, #124	; (adr r3, fb8 <__ieee754_atan2+0x170>)
     f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f40:	4620      	mov	r0, r4
     f42:	4629      	mov	r1, r5
     f44:	f7ff f930 	bl	1a8 <__aeabi_dsub>
     f48:	a31d      	add	r3, pc, #116	; (adr r3, fc0 <__ieee754_atan2+0x178>)
     f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f4e:	e016      	b.n	f7e <__ieee754_atan2+0x136>
     f50:	a51d      	add	r5, pc, #116	; (adr r5, fc8 <__ieee754_atan2+0x180>)
     f52:	e9d5 4500 	ldrd	r4, r5, [r5]
     f56:	e7ea      	b.n	f2e <__ieee754_atan2+0xe6>
     f58:	2400      	movs	r4, #0
     f5a:	2500      	movs	r5, #0
     f5c:	e7e7      	b.n	f2e <__ieee754_atan2+0xe6>
     f5e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     f62:	461d      	mov	r5, r3
     f64:	e7ab      	b.n	ebe <__ieee754_atan2+0x76>
     f66:	a314      	add	r3, pc, #80	; (adr r3, fb8 <__ieee754_atan2+0x170>)
     f68:	e9d3 2300 	ldrd	r2, r3, [r3]
     f6c:	4620      	mov	r0, r4
     f6e:	4629      	mov	r1, r5
     f70:	f7ff f91a 	bl	1a8 <__aeabi_dsub>
     f74:	4602      	mov	r2, r0
     f76:	460b      	mov	r3, r1
     f78:	a111      	add	r1, pc, #68	; (adr r1, fc0 <__ieee754_atan2+0x178>)
     f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
     f7e:	f7ff f913 	bl	1a8 <__aeabi_dsub>
     f82:	e782      	b.n	e8a <__ieee754_atan2+0x42>
     f84:	a50e      	add	r5, pc, #56	; (adr r5, fc0 <__ieee754_atan2+0x178>)
     f86:	e9d5 4500 	ldrd	r4, r5, [r5]
     f8a:	e798      	b.n	ebe <__ieee754_atan2+0x76>
     f8c:	a510      	add	r5, pc, #64	; (adr r5, fd0 <__ieee754_atan2+0x188>)
     f8e:	e9d5 4500 	ldrd	r4, r5, [r5]
     f92:	e794      	b.n	ebe <__ieee754_atan2+0x76>
     f94:	a510      	add	r5, pc, #64	; (adr r5, fd8 <__ieee754_atan2+0x190>)
     f96:	e9d5 4500 	ldrd	r4, r5, [r5]
     f9a:	e790      	b.n	ebe <__ieee754_atan2+0x76>
     f9c:	2400      	movs	r4, #0
     f9e:	2500      	movs	r5, #0
     fa0:	e78d      	b.n	ebe <__ieee754_atan2+0x76>
     fa2:	a509      	add	r5, pc, #36	; (adr r5, fc8 <__ieee754_atan2+0x180>)
     fa4:	e9d5 4500 	ldrd	r4, r5, [r5]
     fa8:	e789      	b.n	ebe <__ieee754_atan2+0x76>
     faa:	bf00      	nop
     fac:	f3af 8000 	nop.w
     fb0:	54442d18 	.word	0x54442d18
     fb4:	bff921fb 	.word	0xbff921fb
     fb8:	33145c07 	.word	0x33145c07
     fbc:	3ca1a626 	.word	0x3ca1a626
     fc0:	54442d18 	.word	0x54442d18
     fc4:	400921fb 	.word	0x400921fb
     fc8:	54442d18 	.word	0x54442d18
     fcc:	3ff921fb 	.word	0x3ff921fb
     fd0:	54442d18 	.word	0x54442d18
     fd4:	c00921fb 	.word	0xc00921fb
     fd8:	54442d18 	.word	0x54442d18
     fdc:	3fe921fb 	.word	0x3fe921fb
     fe0:	7ff00000 	.word	0x7ff00000
     fe4:	0000bca0 	.word	0x0000bca0
     fe8:	0000bc88 	.word	0x0000bc88
     fec:	00000000 	.word	0x00000000

00000ff0 <atan>:
     ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ff4:	4bbc      	ldr	r3, [pc, #752]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
     ff6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
     ffa:	429e      	cmp	r6, r3
     ffc:	4604      	mov	r4, r0
     ffe:	460d      	mov	r5, r1
    1000:	468b      	mov	fp, r1
    1002:	d918      	bls.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1004:	4bb9      	ldr	r3, [pc, #740]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    1006:	429e      	cmp	r6, r3
    1008:	d801      	bhi.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
    100a:	d109      	bne.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    100c:	b140      	cbz	r0, 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    100e:	4622      	mov	r2, r4
    1010:	462b      	mov	r3, r5
    1012:	4620      	mov	r0, r4
    1014:	4629      	mov	r1, r5
    1016:	f7ff f8c9 	bl	1ac <__adddf3>
    101a:	4604      	mov	r4, r0
    101c:	460d      	mov	r5, r1
    101e:	e006      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    1020:	f1bb 0f00 	cmp.w	fp, #0
    1024:	f340 8123 	ble.w	126e <CONFIG_FPROTECT_BLOCK_SIZE+0x26e>
    1028:	a593      	add	r5, pc, #588	; (adr r5, 1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    102a:	e9d5 4500 	ldrd	r4, r5, [r5]
    102e:	4620      	mov	r0, r4
    1030:	4629      	mov	r1, r5
    1032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1036:	4bae      	ldr	r3, [pc, #696]	; (12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    1038:	429e      	cmp	r6, r3
    103a:	d811      	bhi.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    103c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
    1040:	429e      	cmp	r6, r3
    1042:	d80a      	bhi.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
    1044:	a38e      	add	r3, pc, #568	; (adr r3, 1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>)
    1046:	e9d3 2300 	ldrd	r2, r3, [r3]
    104a:	f7ff f8af 	bl	1ac <__adddf3>
    104e:	4ba9      	ldr	r3, [pc, #676]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    1050:	2200      	movs	r2, #0
    1052:	f7ff fd5b 	bl	b0c <__aeabi_dcmpgt>
    1056:	2800      	cmp	r0, #0
    1058:	d1e9      	bne.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    105a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    105e:	e027      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1060:	f00a faab 	bl	b5ba <fabs>
    1064:	4ba4      	ldr	r3, [pc, #656]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1066:	429e      	cmp	r6, r3
    1068:	4604      	mov	r4, r0
    106a:	460d      	mov	r5, r1
    106c:	f200 80b8 	bhi.w	11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    1070:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
    1074:	429e      	cmp	r6, r3
    1076:	f200 809c 	bhi.w	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
    107a:	4602      	mov	r2, r0
    107c:	460b      	mov	r3, r1
    107e:	f7ff f895 	bl	1ac <__adddf3>
    1082:	4b9c      	ldr	r3, [pc, #624]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    1084:	2200      	movs	r2, #0
    1086:	f7ff f88f 	bl	1a8 <__aeabi_dsub>
    108a:	2200      	movs	r2, #0
    108c:	4606      	mov	r6, r0
    108e:	460f      	mov	r7, r1
    1090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1094:	4620      	mov	r0, r4
    1096:	4629      	mov	r1, r5
    1098:	f7ff f888 	bl	1ac <__adddf3>
    109c:	4602      	mov	r2, r0
    109e:	460b      	mov	r3, r1
    10a0:	4630      	mov	r0, r6
    10a2:	4639      	mov	r1, r7
    10a4:	f7ff fb62 	bl	76c <__aeabi_ddiv>
    10a8:	f04f 0a00 	mov.w	sl, #0
    10ac:	4604      	mov	r4, r0
    10ae:	460d      	mov	r5, r1
    10b0:	4622      	mov	r2, r4
    10b2:	462b      	mov	r3, r5
    10b4:	4620      	mov	r0, r4
    10b6:	4629      	mov	r1, r5
    10b8:	f7ff fa2e 	bl	518 <__aeabi_dmul>
    10bc:	4602      	mov	r2, r0
    10be:	460b      	mov	r3, r1
    10c0:	4680      	mov	r8, r0
    10c2:	4689      	mov	r9, r1
    10c4:	f7ff fa28 	bl	518 <__aeabi_dmul>
    10c8:	a36f      	add	r3, pc, #444	; (adr r3, 1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>)
    10ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    10ce:	4606      	mov	r6, r0
    10d0:	460f      	mov	r7, r1
    10d2:	f7ff fa21 	bl	518 <__aeabi_dmul>
    10d6:	a36e      	add	r3, pc, #440	; (adr r3, 1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    10d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    10dc:	f7ff f866 	bl	1ac <__adddf3>
    10e0:	4632      	mov	r2, r6
    10e2:	463b      	mov	r3, r7
    10e4:	f7ff fa18 	bl	518 <__aeabi_dmul>
    10e8:	a36b      	add	r3, pc, #428	; (adr r3, 1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    10ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    10ee:	f7ff f85d 	bl	1ac <__adddf3>
    10f2:	4632      	mov	r2, r6
    10f4:	463b      	mov	r3, r7
    10f6:	f7ff fa0f 	bl	518 <__aeabi_dmul>
    10fa:	a369      	add	r3, pc, #420	; (adr r3, 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    10fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1100:	f7ff f854 	bl	1ac <__adddf3>
    1104:	4632      	mov	r2, r6
    1106:	463b      	mov	r3, r7
    1108:	f7ff fa06 	bl	518 <__aeabi_dmul>
    110c:	a366      	add	r3, pc, #408	; (adr r3, 12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    110e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1112:	f7ff f84b 	bl	1ac <__adddf3>
    1116:	4632      	mov	r2, r6
    1118:	463b      	mov	r3, r7
    111a:	f7ff f9fd 	bl	518 <__aeabi_dmul>
    111e:	a364      	add	r3, pc, #400	; (adr r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    1120:	e9d3 2300 	ldrd	r2, r3, [r3]
    1124:	f7ff f842 	bl	1ac <__adddf3>
    1128:	4642      	mov	r2, r8
    112a:	464b      	mov	r3, r9
    112c:	f7ff f9f4 	bl	518 <__aeabi_dmul>
    1130:	a361      	add	r3, pc, #388	; (adr r3, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    1132:	e9d3 2300 	ldrd	r2, r3, [r3]
    1136:	4680      	mov	r8, r0
    1138:	4689      	mov	r9, r1
    113a:	4630      	mov	r0, r6
    113c:	4639      	mov	r1, r7
    113e:	f7ff f9eb 	bl	518 <__aeabi_dmul>
    1142:	a35f      	add	r3, pc, #380	; (adr r3, 12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    1144:	e9d3 2300 	ldrd	r2, r3, [r3]
    1148:	f7ff f82e 	bl	1a8 <__aeabi_dsub>
    114c:	4632      	mov	r2, r6
    114e:	463b      	mov	r3, r7
    1150:	f7ff f9e2 	bl	518 <__aeabi_dmul>
    1154:	a35c      	add	r3, pc, #368	; (adr r3, 12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    1156:	e9d3 2300 	ldrd	r2, r3, [r3]
    115a:	f7ff f825 	bl	1a8 <__aeabi_dsub>
    115e:	4632      	mov	r2, r6
    1160:	463b      	mov	r3, r7
    1162:	f7ff f9d9 	bl	518 <__aeabi_dmul>
    1166:	a35a      	add	r3, pc, #360	; (adr r3, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    1168:	e9d3 2300 	ldrd	r2, r3, [r3]
    116c:	f7ff f81c 	bl	1a8 <__aeabi_dsub>
    1170:	4632      	mov	r2, r6
    1172:	463b      	mov	r3, r7
    1174:	f7ff f9d0 	bl	518 <__aeabi_dmul>
    1178:	a357      	add	r3, pc, #348	; (adr r3, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    117a:	e9d3 2300 	ldrd	r2, r3, [r3]
    117e:	f7ff f813 	bl	1a8 <__aeabi_dsub>
    1182:	4632      	mov	r2, r6
    1184:	463b      	mov	r3, r7
    1186:	f7ff f9c7 	bl	518 <__aeabi_dmul>
    118a:	4602      	mov	r2, r0
    118c:	460b      	mov	r3, r1
    118e:	4640      	mov	r0, r8
    1190:	4649      	mov	r1, r9
    1192:	f7ff f80b 	bl	1ac <__adddf3>
    1196:	4622      	mov	r2, r4
    1198:	462b      	mov	r3, r5
    119a:	f7ff f9bd 	bl	518 <__aeabi_dmul>
    119e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    11a2:	4602      	mov	r2, r0
    11a4:	460b      	mov	r3, r1
    11a6:	d144      	bne.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
    11a8:	4620      	mov	r0, r4
    11aa:	4629      	mov	r1, r5
    11ac:	f7fe fffc 	bl	1a8 <__aeabi_dsub>
    11b0:	e733      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    11b2:	4b50      	ldr	r3, [pc, #320]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    11b4:	2200      	movs	r2, #0
    11b6:	f7fe fff7 	bl	1a8 <__aeabi_dsub>
    11ba:	4b4e      	ldr	r3, [pc, #312]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    11bc:	4606      	mov	r6, r0
    11be:	460f      	mov	r7, r1
    11c0:	2200      	movs	r2, #0
    11c2:	4620      	mov	r0, r4
    11c4:	4629      	mov	r1, r5
    11c6:	f7fe fff1 	bl	1ac <__adddf3>
    11ca:	4602      	mov	r2, r0
    11cc:	460b      	mov	r3, r1
    11ce:	4630      	mov	r0, r6
    11d0:	4639      	mov	r1, r7
    11d2:	f7ff facb 	bl	76c <__aeabi_ddiv>
    11d6:	f04f 0a01 	mov.w	sl, #1
    11da:	4604      	mov	r4, r0
    11dc:	460d      	mov	r5, r1
    11de:	e767      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    11e0:	4b46      	ldr	r3, [pc, #280]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    11e2:	429e      	cmp	r6, r3
    11e4:	d21a      	bcs.n	121c <CONFIG_FPROTECT_BLOCK_SIZE+0x21c>
    11e6:	4b46      	ldr	r3, [pc, #280]	; (1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>)
    11e8:	2200      	movs	r2, #0
    11ea:	f7fe ffdd 	bl	1a8 <__aeabi_dsub>
    11ee:	4b44      	ldr	r3, [pc, #272]	; (1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>)
    11f0:	4606      	mov	r6, r0
    11f2:	460f      	mov	r7, r1
    11f4:	2200      	movs	r2, #0
    11f6:	4620      	mov	r0, r4
    11f8:	4629      	mov	r1, r5
    11fa:	f7ff f98d 	bl	518 <__aeabi_dmul>
    11fe:	4b3d      	ldr	r3, [pc, #244]	; (12f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f4>)
    1200:	2200      	movs	r2, #0
    1202:	f7fe ffd3 	bl	1ac <__adddf3>
    1206:	4602      	mov	r2, r0
    1208:	460b      	mov	r3, r1
    120a:	4630      	mov	r0, r6
    120c:	4639      	mov	r1, r7
    120e:	f7ff faad 	bl	76c <__aeabi_ddiv>
    1212:	f04f 0a02 	mov.w	sl, #2
    1216:	4604      	mov	r4, r0
    1218:	460d      	mov	r5, r1
    121a:	e749      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    121c:	4602      	mov	r2, r0
    121e:	460b      	mov	r3, r1
    1220:	2000      	movs	r0, #0
    1222:	4938      	ldr	r1, [pc, #224]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    1224:	f7ff faa2 	bl	76c <__aeabi_ddiv>
    1228:	f04f 0a03 	mov.w	sl, #3
    122c:	4604      	mov	r4, r0
    122e:	460d      	mov	r5, r1
    1230:	e73e      	b.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    1232:	4b35      	ldr	r3, [pc, #212]	; (1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>)
    1234:	4e35      	ldr	r6, [pc, #212]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    1236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    123a:	e9d3 2300 	ldrd	r2, r3, [r3]
    123e:	f7fe ffb3 	bl	1a8 <__aeabi_dsub>
    1242:	4622      	mov	r2, r4
    1244:	462b      	mov	r3, r5
    1246:	f7fe ffaf 	bl	1a8 <__aeabi_dsub>
    124a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
    124e:	4602      	mov	r2, r0
    1250:	460b      	mov	r3, r1
    1252:	e9d6 0100 	ldrd	r0, r1, [r6]
    1256:	f7fe ffa7 	bl	1a8 <__aeabi_dsub>
    125a:	f1bb 0f00 	cmp.w	fp, #0
    125e:	4604      	mov	r4, r0
    1260:	460d      	mov	r5, r1
    1262:	f6bf aee4 	bge.w	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    1266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    126a:	461d      	mov	r5, r3
    126c:	e6df      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    126e:	a51c      	add	r5, pc, #112	; (adr r5, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1270:	e9d5 4500 	ldrd	r4, r5, [r5]
    1274:	e6db      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    1276:	bf00      	nop
    1278:	54442d18 	.word	0x54442d18
    127c:	3ff921fb 	.word	0x3ff921fb
    1280:	8800759c 	.word	0x8800759c
    1284:	7e37e43c 	.word	0x7e37e43c
    1288:	e322da11 	.word	0xe322da11
    128c:	3f90ad3a 	.word	0x3f90ad3a
    1290:	24760deb 	.word	0x24760deb
    1294:	3fa97b4b 	.word	0x3fa97b4b
    1298:	a0d03d51 	.word	0xa0d03d51
    129c:	3fb10d66 	.word	0x3fb10d66
    12a0:	c54c206e 	.word	0xc54c206e
    12a4:	3fb745cd 	.word	0x3fb745cd
    12a8:	920083ff 	.word	0x920083ff
    12ac:	3fc24924 	.word	0x3fc24924
    12b0:	5555550d 	.word	0x5555550d
    12b4:	3fd55555 	.word	0x3fd55555
    12b8:	2c6a6c2f 	.word	0x2c6a6c2f
    12bc:	bfa2b444 	.word	0xbfa2b444
    12c0:	52defd9a 	.word	0x52defd9a
    12c4:	3fadde2d 	.word	0x3fadde2d
    12c8:	af749a6d 	.word	0xaf749a6d
    12cc:	3fb3b0f2 	.word	0x3fb3b0f2
    12d0:	fe231671 	.word	0xfe231671
    12d4:	3fbc71c6 	.word	0x3fbc71c6
    12d8:	9998ebc4 	.word	0x9998ebc4
    12dc:	3fc99999 	.word	0x3fc99999
    12e0:	54442d18 	.word	0x54442d18
    12e4:	bff921fb 	.word	0xbff921fb
    12e8:	440fffff 	.word	0x440fffff
    12ec:	7ff00000 	.word	0x7ff00000
    12f0:	3fdbffff 	.word	0x3fdbffff
    12f4:	3ff00000 	.word	0x3ff00000
    12f8:	3ff2ffff 	.word	0x3ff2ffff
    12fc:	40038000 	.word	0x40038000
    1300:	3ff80000 	.word	0x3ff80000
    1304:	bff00000 	.word	0xbff00000
    1308:	0000bcb8 	.word	0x0000bcb8
    130c:	0000bcd8 	.word	0x0000bcd8

00001310 <thread_NOD_code>:
	
}
/* Critical to the safety of the robot and should be executed at the highest possible rate.
 Worst case scenario: There is an obstacle in the last position of the CSA upper bound  
 After testing: WCET = 519us */
void thread_NOD_code(void *argA , void *argB, void *argC){
    1310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1314:	4e11      	ldr	r6, [pc, #68]	; (135c <thread_NOD_code+0x4c>)
	uint8_t flag;
	while(1){
		k_sem_take(&sem_NOD, K_FOREVER);
		start = k_cycle_get_32(); 
		//printk("----------------------\nThread NOD released\n", start);
		flag = nearObstSearch(buffer);
    1316:	4f12      	ldr	r7, [pc, #72]	; (1360 <thread_NOD_code+0x50>)
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1318:	4d12      	ldr	r5, [pc, #72]	; (1364 <thread_NOD_code+0x54>)
	uint32_t wc_exec_time = 1;
    131a:	2401      	movs	r4, #1
    131c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1324:	4630      	mov	r0, r6
    1326:	f006 fac5 	bl	78b4 <z_impl_k_sem_take>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    132a:	f009 fe81 	bl	b030 <sys_clock_cycle_get_32>
    132e:	4680      	mov	r8, r0
		flag = nearObstSearch(buffer);
    1330:	4638      	mov	r0, r7
    1332:	f00a f908 	bl	b546 <nearObstSearch>
    1336:	f009 fe7b 	bl	b030 <sys_clock_cycle_get_32>
		end = k_cycle_get_32();
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    133a:	eba0 0008 	sub.w	r0, r0, r8
    133e:	42a0      	cmp	r0, r4
    1340:	d907      	bls.n	1352 <thread_NOD_code+0x42>
    1342:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1346:	2300      	movs	r3, #0
    1348:	fbe0 4305 	umlal	r4, r3, r0, r5
    134c:	0be4      	lsrs	r4, r4, #15
    134e:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		//printk("Near obstacle -> %4u\n", flag);
		printk("----------------------\nThread NOD\nWCET -> %4u\n", wc_exec_time);
    1352:	4805      	ldr	r0, [pc, #20]	; (1368 <thread_NOD_code+0x58>)
    1354:	4621      	mov	r1, r4
    1356:	f009 f9af 	bl	a6b8 <printk>
	while(1){
    135a:	e7df      	b.n	131c <thread_NOD_code+0xc>
    135c:	200047d8 	.word	0x200047d8
    1360:	200001b4 	.word	0x200001b4
    1364:	000f4240 	.word	0x000f4240
    1368:	0000c020 	.word	0x0000c020

0000136c <thread_OBSC_code>:
	}
}
/* Non-real time task 
   After testing: WCET = 3907us */
void thread_OBSC_code(void *argA , void *argB, void *argC){
    136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t start, end;
	uint32_t wc_exec_time = 1;
	uint16_t obs;
	while(1){
		start = k_cycle_get_32();
		obs = obstCount(buffer);
    1370:	4f10      	ldr	r7, [pc, #64]	; (13b4 <thread_OBSC_code+0x48>)
    1372:	4d11      	ldr	r5, [pc, #68]	; (13b8 <thread_OBSC_code+0x4c>)
		end = k_cycle_get_32();
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
		//printk("Number of obstacles -> %4u\n", obs);
		printk("--------------------\nThread OBSC released\nWCET -> %4u\n", wc_exec_time);
    1374:	4e11      	ldr	r6, [pc, #68]	; (13bc <thread_OBSC_code+0x50>)
	uint32_t wc_exec_time = 1;
    1376:	2401      	movs	r4, #1
    1378:	f009 fe5a 	bl	b030 <sys_clock_cycle_get_32>
    137c:	4680      	mov	r8, r0
		obs = obstCount(buffer);
    137e:	4638      	mov	r0, r7
    1380:	f00a f8f7 	bl	b572 <obstCount>
    1384:	f009 fe54 	bl	b030 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    1388:	eba0 0008 	sub.w	r0, r0, r8
    138c:	42a0      	cmp	r0, r4
    138e:	d907      	bls.n	13a0 <thread_OBSC_code+0x34>
    1390:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1394:	2300      	movs	r3, #0
    1396:	fbe0 4305 	umlal	r4, r3, r0, r5
    139a:	0be4      	lsrs	r4, r4, #15
    139c:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("--------------------\nThread OBSC released\nWCET -> %4u\n", wc_exec_time);
    13a0:	4621      	mov	r1, r4
    13a2:	4630      	mov	r0, r6
    13a4:	f009 f988 	bl	a6b8 <printk>
	return z_impl_k_sleep(timeout);
    13a8:	2100      	movs	r1, #0
    13aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13ae:	f007 fb63 	bl	8a78 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    13b2:	e7e1      	b.n	1378 <thread_OBSC_code+0xc>
    13b4:	200001b4 	.word	0x200001b4
    13b8:	000f4240 	.word	0x000f4240
    13bc:	0000c04f 	.word	0x0000c04f

000013c0 <thread_OUTPUT_code>:
		printk("-----------------\nThread OAP released\nWCET -> %4u\n", wc_exec_time);
		k_msleep(1000);
	}
}
/* Critical to the safety of the robot and should be executed at the highest possible rate. */
void thread_OUTPUT_code(void *argA , void *argB, void *argC){
    13c0:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
    13c2:	4d06      	ldr	r5, [pc, #24]	; (13dc <thread_OUTPUT_code+0x1c>)
	while(1){
		k_sem_take(&sem_OUTPUT, K_FOREVER);
		printk("---------------------------------\nThread OUTPUT released\n");
    13c4:	4c06      	ldr	r4, [pc, #24]	; (13e0 <thread_OUTPUT_code+0x20>)
    13c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13ce:	4628      	mov	r0, r5
    13d0:	f006 fa70 	bl	78b4 <z_impl_k_sem_take>
    13d4:	4620      	mov	r0, r4
    13d6:	f009 f96f 	bl	a6b8 <printk>
	while(1){
    13da:	e7f4      	b.n	13c6 <thread_OUTPUT_code+0x6>
    13dc:	200047c8 	.word	0x200047c8
    13e0:	0000c086 	.word	0x0000c086

000013e4 <thread_OAP_code>:
void thread_OAP_code(void *argA , void *argB, void *argC){
    13e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		guideLineSearch(buffer, &pos, &angle);
    13e8:	4f12      	ldr	r7, [pc, #72]	; (1434 <thread_OAP_code+0x50>)
    13ea:	4d13      	ldr	r5, [pc, #76]	; (1438 <thread_OAP_code+0x54>)
		printk("-----------------\nThread OAP released\nWCET -> %4u\n", wc_exec_time);
    13ec:	4e13      	ldr	r6, [pc, #76]	; (143c <thread_OAP_code+0x58>)
	uint32_t wc_exec_time = 1;
    13ee:	2401      	movs	r4, #1
    13f0:	f009 fe1e 	bl	b030 <sys_clock_cycle_get_32>
		guideLineSearch(buffer, &pos, &angle);
    13f4:	aa01      	add	r2, sp, #4
    13f6:	4680      	mov	r8, r0
    13f8:	f10d 0102 	add.w	r1, sp, #2
    13fc:	4638      	mov	r0, r7
    13fe:	f7ff fcf3 	bl	de8 <guideLineSearch>
    1402:	f009 fe15 	bl	b030 <sys_clock_cycle_get_32>
		if(wc_exec_time < (end-start)) wc_exec_time = k_cyc_to_us_ceil32(end - start);
    1406:	eba0 0008 	sub.w	r0, r0, r8
    140a:	42a0      	cmp	r0, r4
    140c:	d907      	bls.n	141e <thread_OAP_code+0x3a>
    140e:	f647 74ff 	movw	r4, #32767	; 0x7fff
    1412:	2300      	movs	r3, #0
    1414:	fbe0 4305 	umlal	r4, r3, r0, r5
    1418:	0be4      	lsrs	r4, r4, #15
    141a:	ea44 4443 	orr.w	r4, r4, r3, lsl #17
		printk("-----------------\nThread OAP released\nWCET -> %4u\n", wc_exec_time);
    141e:	4621      	mov	r1, r4
    1420:	4630      	mov	r0, r6
    1422:	f009 f949 	bl	a6b8 <printk>
	return z_impl_k_sleep(timeout);
    1426:	2100      	movs	r1, #0
    1428:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    142c:	f007 fb24 	bl	8a78 <z_impl_k_sleep>
    1430:	e7de      	b.n	13f0 <thread_OAP_code+0xc>
    1432:	bf00      	nop
    1434:	200001b4 	.word	0x200001b4
    1438:	000f4240 	.word	0x000f4240
    143c:	0000c0c0 	.word	0x0000c0c0

00001440 <main>:
{
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	b08d      	sub	sp, #52	; 0x34
	int arg1 = 0, arg2 = 0, arg3 = 0; // Input args of tasks (actually not used in this case)
    1444:	2300      	movs	r3, #0
    1446:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    144a:	930b      	str	r3, [sp, #44]	; 0x2c
	uint16_t first = 5;
    144c:	2305      	movs	r3, #5
    144e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	cab_id = open_cab("CAB", 1, 2, &first);
    1452:	2202      	movs	r2, #2
    1454:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    1458:	2101      	movs	r1, #1
    145a:	4843      	ldr	r0, [pc, #268]	; (1568 <main+0x128>)
    145c:	f00a f849 	bl	b4f2 <open_cab>
    1460:	4b42      	ldr	r3, [pc, #264]	; (156c <main+0x12c>)
    1462:	6018      	str	r0, [r3, #0]
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1464:	4842      	ldr	r0, [pc, #264]	; (1570 <main+0x130>)
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    1466:	4c43      	ldr	r4, [pc, #268]	; (1574 <main+0x134>)
    1468:	f005 fc1a 	bl	6ca0 <z_impl_device_get_binding>
    146c:	6020      	str	r0, [r4, #0]
    if (uart_dev == NULL) {
    146e:	b928      	cbnz	r0, 147c <main+0x3c>
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    1470:	493f      	ldr	r1, [pc, #252]	; (1570 <main+0x130>)
    1472:	4841      	ldr	r0, [pc, #260]	; (1578 <main+0x138>)
    1474:	f009 f920 	bl	a6b8 <printk>
}
    1478:	b00d      	add	sp, #52	; 0x34
    147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("UART binding successful\n\r");
    147c:	483f      	ldr	r0, [pc, #252]	; (157c <main+0x13c>)
    147e:	f009 f91b 	bl	a6b8 <printk>
	int ret = uart_configure(uart_dev, &uart_cfg);
    1482:	6820      	ldr	r0, [r4, #0]
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    1484:	6883      	ldr	r3, [r0, #8]
    1486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1488:	b91b      	cbnz	r3, 1492 <main+0x52>
		printf("Error configuring UART\n");
    148a:	483d      	ldr	r0, [pc, #244]	; (1580 <main+0x140>)
    148c:	f008 fa0a 	bl	98a4 <iprintf>
		return;
    1490:	e7f2      	b.n	1478 <main+0x38>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    1492:	493c      	ldr	r1, [pc, #240]	; (1584 <main+0x144>)
    1494:	4798      	blx	r3
	if (ret) {
    1496:	4604      	mov	r4, r0
    1498:	2800      	cmp	r0, #0
    149a:	d1f6      	bne.n	148a <main+0x4a>
	return z_impl_k_sem_init(sem, initial_count, limit);
    149c:	2201      	movs	r2, #1
    149e:	4601      	mov	r1, r0
    14a0:	4839      	ldr	r0, [pc, #228]	; (1588 <main+0x148>)
    14a2:	f009 ffa5 	bl	b3f0 <z_impl_k_sem_init>
    14a6:	2201      	movs	r2, #1
    14a8:	4621      	mov	r1, r4
    14aa:	4838      	ldr	r0, [pc, #224]	; (158c <main+0x14c>)
    14ac:	f009 ffa0 	bl	b3f0 <z_impl_k_sem_init>
	thread_NOD_tid = k_thread_create(&thread_NOD_data, thread_NOD_stack,
    14b0:	2600      	movs	r6, #0
    14b2:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    14b4:	ab0b      	add	r3, sp, #44	; 0x2c
    14b6:	9302      	str	r3, [sp, #8]
    14b8:	ab0a      	add	r3, sp, #40	; 0x28
    14ba:	9301      	str	r3, [sp, #4]
    14bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    14c0:	ab09      	add	r3, sp, #36	; 0x24
    14c2:	9300      	str	r3, [sp, #0]
    14c4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    14c8:	4b31      	ldr	r3, [pc, #196]	; (1590 <main+0x150>)
    14ca:	4932      	ldr	r1, [pc, #200]	; (1594 <main+0x154>)
    14cc:	9404      	str	r4, [sp, #16]
    14ce:	9503      	str	r5, [sp, #12]
    14d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    14d4:	4830      	ldr	r0, [pc, #192]	; (1598 <main+0x158>)
    14d6:	f005 fec1 	bl	725c <z_impl_k_thread_create>
    14da:	4b30      	ldr	r3, [pc, #192]	; (159c <main+0x15c>)
    14dc:	6018      	str	r0, [r3, #0]
    14de:	4b30      	ldr	r3, [pc, #192]	; (15a0 <main+0x160>)
    14e0:	4930      	ldr	r1, [pc, #192]	; (15a4 <main+0x164>)
    14e2:	9400      	str	r4, [sp, #0]
    14e4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    14e8:	e9cd 5403 	strd	r5, r4, [sp, #12]
    14ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    14f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    14f4:	482c      	ldr	r0, [pc, #176]	; (15a8 <main+0x168>)
    14f6:	f005 feb1 	bl	725c <z_impl_k_thread_create>
	thread_OUTPUT_tid = k_thread_create(&thread_OUTPUT_data, thread_OUTPUT_stack,
    14fa:	4b2c      	ldr	r3, [pc, #176]	; (15ac <main+0x16c>)
    14fc:	6018      	str	r0, [r3, #0]
    14fe:	2303      	movs	r3, #3
    1500:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1504:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1508:	e9cd 4400 	strd	r4, r4, [sp]
    150c:	4b28      	ldr	r3, [pc, #160]	; (15b0 <main+0x170>)
    150e:	4929      	ldr	r1, [pc, #164]	; (15b4 <main+0x174>)
    1510:	9404      	str	r4, [sp, #16]
    1512:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1516:	4828      	ldr	r0, [pc, #160]	; (15b8 <main+0x178>)
    1518:	f005 fea0 	bl	725c <z_impl_k_thread_create>
	thread_OBSC_tid = k_thread_create(&thread_OBSC_data, thread_OBSC_stack,
    151c:	4b27      	ldr	r3, [pc, #156]	; (15bc <main+0x17c>)
    151e:	6018      	str	r0, [r3, #0]
    1520:	2302      	movs	r3, #2
    1522:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1526:	e9cd 6706 	strd	r6, r7, [sp, #24]
    152a:	e9cd 4400 	strd	r4, r4, [sp]
    152e:	4b24      	ldr	r3, [pc, #144]	; (15c0 <main+0x180>)
    1530:	4924      	ldr	r1, [pc, #144]	; (15c4 <main+0x184>)
    1532:	9404      	str	r4, [sp, #16]
    1534:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1538:	4823      	ldr	r0, [pc, #140]	; (15c8 <main+0x188>)
    153a:	f005 fe8f 	bl	725c <z_impl_k_thread_create>
	thread_OAP_tid = k_thread_create(&thread_OAP_data, thread_OAP_stack,
    153e:	4b23      	ldr	r3, [pc, #140]	; (15cc <main+0x18c>)
    1540:	6018      	str	r0, [r3, #0]
    1542:	2301      	movs	r3, #1
    1544:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1548:	e9cd 6706 	strd	r6, r7, [sp, #24]
    154c:	4b20      	ldr	r3, [pc, #128]	; (15d0 <main+0x190>)
    154e:	4921      	ldr	r1, [pc, #132]	; (15d4 <main+0x194>)
    1550:	4821      	ldr	r0, [pc, #132]	; (15d8 <main+0x198>)
    1552:	9404      	str	r4, [sp, #16]
    1554:	e9cd 4400 	strd	r4, r4, [sp]
    1558:	f44f 6200 	mov.w	r2, #2048	; 0x800
    155c:	f005 fe7e 	bl	725c <z_impl_k_thread_create>
	thread_RXDATA_tid = k_thread_create(&thread_RXDATA_data, thread_RXDATA_stack, 
    1560:	4b1e      	ldr	r3, [pc, #120]	; (15dc <main+0x19c>)
    1562:	6018      	str	r0, [r3, #0]
	return;
    1564:	e788      	b.n	1478 <main+0x38>
    1566:	bf00      	nop
    1568:	0000c0f3 	.word	0x0000c0f3
    156c:	200047e8 	.word	0x200047e8
    1570:	0000c0f7 	.word	0x0000c0f7
    1574:	20004800 	.word	0x20004800
    1578:	0000c0fe 	.word	0x0000c0fe
    157c:	0000c12a 	.word	0x0000c12a
    1580:	0000c144 	.word	0x0000c144
    1584:	0000bcf8 	.word	0x0000bcf8
    1588:	200047d8 	.word	0x200047d8
    158c:	200047c8 	.word	0x200047c8
    1590:	00001311 	.word	0x00001311
    1594:	200075e0 	.word	0x200075e0
    1598:	20004470 	.word	0x20004470
    159c:	200047fc 	.word	0x200047fc
    15a0:	000013c1 	.word	0x000013c1
    15a4:	20005d80 	.word	0x20005d80
    15a8:	200042f0 	.word	0x200042f0
    15ac:	200047f0 	.word	0x200047f0
    15b0:	0000136d 	.word	0x0000136d
    15b4:	20006dc0 	.word	0x20006dc0
    15b8:	200043f0 	.word	0x200043f0
    15bc:	200047f8 	.word	0x200047f8
    15c0:	000013e5 	.word	0x000013e5
    15c4:	200065a0 	.word	0x200065a0
    15c8:	20004370 	.word	0x20004370
    15cc:	200047f4 	.word	0x200047f4
    15d0:	0000a633 	.word	0x0000a633
    15d4:	20005560 	.word	0x20005560
    15d8:	20004270 	.word	0x20004270
    15dc:	200047ec 	.word	0x200047ec

000015e0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    15e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15e4:	b08d      	sub	sp, #52	; 0x34
    15e6:	461f      	mov	r7, r3
    15e8:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    15ea:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    15ee:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    15f2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    15f4:	1c53      	adds	r3, r2, #1
    15f6:	9304      	str	r3, [sp, #16]

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    15f8:	0783      	lsls	r3, r0, #30
    15fa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
{
    15fe:	4605      	mov	r5, r0
    1600:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    1602:	f040 8228 	bne.w	1a56 <cbvprintf_package+0x476>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    1606:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1608:	b130      	cbz	r0, 1618 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    160a:	2907      	cmp	r1, #7
    160c:	d809      	bhi.n	1622 <cbvprintf_package+0x42>
		return -ENOSPC;
    160e:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1612:	b00d      	add	sp, #52	; 0x34
    1614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1618:	f001 0607 	and.w	r6, r1, #7
    161c:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    161e:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1622:	f04f 0a00 	mov.w	sl, #0
	align = VA_STACK_ALIGN(char *);
    1626:	f04f 0904 	mov.w	r9, #4
	s = fmt--;
    162a:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    162c:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1630:	4652      	mov	r2, sl
	bool parsing = false;
    1632:	4651      	mov	r1, sl
	size = sizeof(char *);
    1634:	46cb      	mov	fp, r9
			if (buf0 != NULL) {
    1636:	b105      	cbz	r5, 163a <cbvprintf_package+0x5a>
				*(const char **)buf = s;
    1638:	6027      	str	r7, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    163a:	9804      	ldr	r0, [sp, #16]
    163c:	2800      	cmp	r0, #0
    163e:	f300 812a 	bgt.w	1896 <cbvprintf_package+0x2b6>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1642:	48bc      	ldr	r0, [pc, #752]	; (1934 <cbvprintf_package+0x354>)
    1644:	4287      	cmp	r7, r0
    1646:	d303      	bcc.n	1650 <cbvprintf_package+0x70>
    1648:	48bb      	ldr	r0, [pc, #748]	; (1938 <cbvprintf_package+0x358>)
    164a:	4287      	cmp	r7, r0
    164c:	f0c0 8123 	bcc.w	1896 <cbvprintf_package+0x2b6>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1650:	f8dd c008 	ldr.w	ip, [sp, #8]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1654:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1658:	f01c 0f02 	tst.w	ip, #2
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    165c:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1660:	f000 8137 	beq.w	18d2 <cbvprintf_package+0x2f2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1664:	f04f 0c00 	mov.w	ip, #0
    1668:	e11e      	b.n	18a8 <cbvprintf_package+0x2c8>
		if (!parsing) {
    166a:	b931      	cbnz	r1, 167a <cbvprintf_package+0x9a>
			if (*fmt == '%') {
    166c:	2825      	cmp	r0, #37	; 0x25
    166e:	d116      	bne.n	169e <cbvprintf_package+0xbe>
				parsing = true;
    1670:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    1672:	f04f 0904 	mov.w	r9, #4
			size = sizeof(intmax_t);
    1676:	46cb      	mov	fp, r9
    1678:	e011      	b.n	169e <cbvprintf_package+0xbe>
		switch (*fmt) {
    167a:	286c      	cmp	r0, #108	; 0x6c
    167c:	f200 809f 	bhi.w	17be <cbvprintf_package+0x1de>
    1680:	284b      	cmp	r0, #75	; 0x4b
    1682:	d822      	bhi.n	16ca <cbvprintf_package+0xea>
    1684:	2847      	cmp	r0, #71	; 0x47
    1686:	f200 80b1 	bhi.w	17ec <cbvprintf_package+0x20c>
    168a:	2829      	cmp	r0, #41	; 0x29
    168c:	d86a      	bhi.n	1764 <cbvprintf_package+0x184>
    168e:	2820      	cmp	r0, #32
    1690:	d005      	beq.n	169e <cbvprintf_package+0xbe>
    1692:	f1a0 0c23 	sub.w	ip, r0, #35	; 0x23
    1696:	f1dc 0100 	rsbs	r1, ip, #0
    169a:	eb41 010c 	adc.w	r1, r1, ip
	while (*++fmt != '\0') {
    169e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    16a2:	2800      	cmp	r0, #0
    16a4:	d1e1      	bne.n	166a <cbvprintf_package+0x8a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    16a6:	1b61      	subs	r1, r4, r5
    16a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    16ac:	f0c0 8173 	bcc.w	1996 <cbvprintf_package+0x3b6>
		__ASSERT(false, "too many format args");
    16b0:	49a2      	ldr	r1, [pc, #648]	; (193c <cbvprintf_package+0x35c>)
    16b2:	4aa3      	ldr	r2, [pc, #652]	; (1940 <cbvprintf_package+0x360>)
    16b4:	48a3      	ldr	r0, [pc, #652]	; (1944 <cbvprintf_package+0x364>)
    16b6:	f240 233d 	movw	r3, #573	; 0x23d
    16ba:	f009 f94a 	bl	a952 <assert_print>
    16be:	48a2      	ldr	r0, [pc, #648]	; (1948 <cbvprintf_package+0x368>)
    16c0:	f009 f947 	bl	a952 <assert_print>
    16c4:	f240 213d 	movw	r1, #573	; 0x23d
    16c8:	e0fd      	b.n	18c6 <cbvprintf_package+0x2e6>
		switch (*fmt) {
    16ca:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    16ce:	f1bc 0f20 	cmp.w	ip, #32
    16d2:	f200 808b 	bhi.w	17ec <cbvprintf_package+0x20c>
    16d6:	f20f 0e08 	addw	lr, pc, #8
    16da:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    16de:	bf00      	nop
    16e0:	0000169f 	.word	0x0000169f
    16e4:	000017ed 	.word	0x000017ed
    16e8:	000017ed 	.word	0x000017ed
    16ec:	000017ed 	.word	0x000017ed
    16f0:	000017ed 	.word	0x000017ed
    16f4:	000017ed 	.word	0x000017ed
    16f8:	000017ed 	.word	0x000017ed
    16fc:	000017ed 	.word	0x000017ed
    1700:	000017ed 	.word	0x000017ed
    1704:	000017ed 	.word	0x000017ed
    1708:	000017ed 	.word	0x000017ed
    170c:	000017ed 	.word	0x000017ed
    1710:	000017f1 	.word	0x000017f1
    1714:	000017ed 	.word	0x000017ed
    1718:	000017ed 	.word	0x000017ed
    171c:	000017ed 	.word	0x000017ed
    1720:	000017ed 	.word	0x000017ed
    1724:	000017ed 	.word	0x000017ed
    1728:	000017ed 	.word	0x000017ed
    172c:	000017ed 	.word	0x000017ed
    1730:	000017ed 	.word	0x000017ed
    1734:	0000180d 	.word	0x0000180d
    1738:	000017ed 	.word	0x000017ed
    173c:	000017f1 	.word	0x000017f1
    1740:	000017f1 	.word	0x000017f1
    1744:	0000180d 	.word	0x0000180d
    1748:	0000180d 	.word	0x0000180d
    174c:	0000180d 	.word	0x0000180d
    1750:	0000169f 	.word	0x0000169f
    1754:	000017f1 	.word	0x000017f1
    1758:	00001835 	.word	0x00001835
    175c:	000017ed 	.word	0x000017ed
    1760:	0000169f 	.word	0x0000169f
    1764:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1768:	f04f 0e01 	mov.w	lr, #1
    176c:	fa5f fc8c 	uxtb.w	ip, ip
    1770:	fa0e fc0c 	lsl.w	ip, lr, ip
    1774:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1778:	ea1c 0f0e 	tst.w	ip, lr
    177c:	d18f      	bne.n	169e <cbvprintf_package+0xbe>
    177e:	f01c 5f62 	tst.w	ip, #947912704	; 0x38800000
    1782:	d143      	bne.n	180c <cbvprintf_package+0x22c>
    1784:	f01c 0101 	ands.w	r1, ip, #1
    1788:	d089      	beq.n	169e <cbvprintf_package+0xbe>
		buf = (void *) ROUND_UP(buf, align);
    178a:	3c01      	subs	r4, #1
    178c:	444c      	add	r4, r9
    178e:	f1c9 0c00 	rsb	ip, r9, #0
    1792:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1796:	2d00      	cmp	r5, #0
    1798:	d065      	beq.n	1866 <cbvprintf_package+0x286>
    179a:	ebab 0c05 	sub.w	ip, fp, r5
    179e:	44a4      	add	ip, r4
    17a0:	4566      	cmp	r6, ip
    17a2:	f4ff af34 	bcc.w	160e <cbvprintf_package+0x2e>
		if (*fmt == 's') {
    17a6:	2873      	cmp	r0, #115	; 0x73
    17a8:	d06f      	beq.n	188a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    17aa:	f1bb 0f04 	cmp.w	fp, #4
    17ae:	d14a      	bne.n	1846 <cbvprintf_package+0x266>
			int v = va_arg(ap, int);
    17b0:	f858 0b04 	ldr.w	r0, [r8], #4
				*(int *)buf = v;
    17b4:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    17b6:	3404      	adds	r4, #4
    17b8:	f04f 0b04 	mov.w	fp, #4
    17bc:	e76f      	b.n	169e <cbvprintf_package+0xbe>
		switch (*fmt) {
    17be:	f1a0 0c6e 	sub.w	ip, r0, #110	; 0x6e
    17c2:	fa5f fc8c 	uxtb.w	ip, ip
    17c6:	f1bc 0f0c 	cmp.w	ip, #12
    17ca:	d80f      	bhi.n	17ec <cbvprintf_package+0x20c>
    17cc:	f04f 0e01 	mov.w	lr, #1
    17d0:	fa0e fc0c 	lsl.w	ip, lr, ip
    17d4:	f01c 0f25 	tst.w	ip, #37	; 0x25
    17d8:	d12f      	bne.n	183a <cbvprintf_package+0x25a>
    17da:	f240 4e82 	movw	lr, #1154	; 0x482
    17de:	ea1c 0f0e 	tst.w	ip, lr
    17e2:	d105      	bne.n	17f0 <cbvprintf_package+0x210>
    17e4:	f41c 5c82 	ands.w	ip, ip, #4160	; 0x1040
    17e8:	f47f af43 	bne.w	1672 <cbvprintf_package+0x92>
			parsing = false;
    17ec:	2100      	movs	r1, #0
    17ee:	e756      	b.n	169e <cbvprintf_package+0xbe>
			if (fmt[-1] == 'l') {
    17f0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    17f4:	296c      	cmp	r1, #108	; 0x6c
    17f6:	d124      	bne.n	1842 <cbvprintf_package+0x262>
				if (fmt[-2] == 'l') {
    17f8:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    17fc:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    17fe:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    1802:	d11b      	bne.n	183c <cbvprintf_package+0x25c>
					align = VA_STACK_ALIGN(long long);
    1804:	f04f 0908 	mov.w	r9, #8
			size = sizeof(void *);
    1808:	46cb      	mov	fp, r9
    180a:	e7be      	b.n	178a <cbvprintf_package+0x1aa>
				v.ld = va_arg(ap, long double);
    180c:	f108 0807 	add.w	r8, r8, #7
    1810:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    1814:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    1816:	e8f8 0102 	ldrd	r0, r1, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    181a:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    181e:	b13d      	cbz	r5, 1830 <cbvprintf_package+0x250>
				if (BUF_OFFSET + size > len) {
    1820:	f8dd e014 	ldr.w	lr, [sp, #20]
    1824:	44a6      	add	lr, r4
    1826:	45b6      	cmp	lr, r6
    1828:	f63f aef1 	bhi.w	160e <cbvprintf_package+0x2e>
					*(long double *)buf = v.ld;
    182c:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1830:	3408      	adds	r4, #8
			parsing = false;
    1832:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1834:	f04f 0908 	mov.w	r9, #8
    1838:	e71d      	b.n	1676 <cbvprintf_package+0x96>
			parsing = false;
    183a:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(void *);
    183c:	f04f 0904 	mov.w	r9, #4
    1840:	e7e2      	b.n	1808 <cbvprintf_package+0x228>
			parsing = false;
    1842:	2100      	movs	r1, #0
    1844:	e7a1      	b.n	178a <cbvprintf_package+0x1aa>
		} else if (size == sizeof(long long)) {
    1846:	f1bb 0f08 	cmp.w	fp, #8
    184a:	f040 8096 	bne.w	197a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    184e:	f108 0807 	add.w	r8, r8, #7
    1852:	f028 0807 	bic.w	r8, r8, #7
    1856:	e8f8 bc02 	ldrd	fp, ip, [r8], #8
					*(long long *)buf = v;
    185a:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    185e:	3408      	adds	r4, #8
    1860:	f04f 0b08 	mov.w	fp, #8
    1864:	e71b      	b.n	169e <cbvprintf_package+0xbe>
		if (*fmt == 's') {
    1866:	2873      	cmp	r0, #115	; 0x73
    1868:	d00f      	beq.n	188a <cbvprintf_package+0x2aa>
		} else if (size == sizeof(int)) {
    186a:	f1bb 0f04 	cmp.w	fp, #4
    186e:	d102      	bne.n	1876 <cbvprintf_package+0x296>
			int v = va_arg(ap, int);
    1870:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1874:	e79f      	b.n	17b6 <cbvprintf_package+0x1d6>
		} else if (size == sizeof(long long)) {
    1876:	f1bb 0f08 	cmp.w	fp, #8
    187a:	d17e      	bne.n	197a <cbvprintf_package+0x39a>
			long long v = va_arg(ap, long long);
    187c:	f108 0807 	add.w	r8, r8, #7
    1880:	f028 0807 	bic.w	r8, r8, #7
    1884:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1888:	e7e9      	b.n	185e <cbvprintf_package+0x27e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    188a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    188c:	f858 7b04 	ldr.w	r7, [r8], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1890:	3801      	subs	r0, #1
    1892:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    1894:	e6cf      	b.n	1636 <cbvprintf_package+0x56>
			if (is_ro && !do_ro) {
    1896:	9802      	ldr	r0, [sp, #8]
    1898:	0780      	lsls	r0, r0, #30
    189a:	d546      	bpl.n	192a <cbvprintf_package+0x34a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    189c:	eba4 0e05 	sub.w	lr, r4, r5
    18a0:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    18a4:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    18a8:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    18ac:	d31f      	bcc.n	18ee <cbvprintf_package+0x30e>
					__ASSERT(false, "String with too many arguments");
    18ae:	4923      	ldr	r1, [pc, #140]	; (193c <cbvprintf_package+0x35c>)
    18b0:	4a23      	ldr	r2, [pc, #140]	; (1940 <cbvprintf_package+0x360>)
    18b2:	4824      	ldr	r0, [pc, #144]	; (1944 <cbvprintf_package+0x364>)
    18b4:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    18b8:	f009 f84b 	bl	a952 <assert_print>
    18bc:	4823      	ldr	r0, [pc, #140]	; (194c <cbvprintf_package+0x36c>)
    18be:	f009 f848 	bl	a952 <assert_print>
    18c2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					__ASSERT(false, "str_ptr_pos[] too small");
    18c6:	481e      	ldr	r0, [pc, #120]	; (1940 <cbvprintf_package+0x360>)
    18c8:	f009 f83c 	bl	a944 <assert_post_action>
					return -EINVAL;
    18cc:	f06f 0015 	mvn.w	r0, #21
    18d0:	e69f      	b.n	1612 <cbvprintf_package+0x32>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    18d2:	2a0f      	cmp	r2, #15
    18d4:	d80d      	bhi.n	18f2 <cbvprintf_package+0x312>
				if (buf0 != NULL) {
    18d6:	2d00      	cmp	r5, #0
    18d8:	d03f      	beq.n	195a <cbvprintf_package+0x37a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    18da:	b2c0      	uxtb	r0, r0
    18dc:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    18e0:	44ec      	add	ip, sp
    18e2:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_rw_cnt++;
    18e6:	9803      	ldr	r0, [sp, #12]
    18e8:	3001      	adds	r0, #1
    18ea:	9003      	str	r0, [sp, #12]
    18ec:	e01c      	b.n	1928 <cbvprintf_package+0x348>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    18ee:	2a0f      	cmp	r2, #15
    18f0:	d90c      	bls.n	190c <cbvprintf_package+0x32c>
					__ASSERT(false, "str_ptr_pos[] too small");
    18f2:	4912      	ldr	r1, [pc, #72]	; (193c <cbvprintf_package+0x35c>)
    18f4:	4a12      	ldr	r2, [pc, #72]	; (1940 <cbvprintf_package+0x360>)
    18f6:	4813      	ldr	r0, [pc, #76]	; (1944 <cbvprintf_package+0x364>)
    18f8:	f240 13f5 	movw	r3, #501	; 0x1f5
    18fc:	f009 f829 	bl	a952 <assert_print>
    1900:	4813      	ldr	r0, [pc, #76]	; (1950 <cbvprintf_package+0x370>)
    1902:	f009 f826 	bl	a952 <assert_print>
    1906:	f240 11f5 	movw	r1, #501	; 0x1f5
    190a:	e7dc      	b.n	18c6 <cbvprintf_package+0x2e6>
				if (buf0 != NULL) {
    190c:	b315      	cbz	r5, 1954 <cbvprintf_package+0x374>
					str_ptr_pos[s_idx] = s_ptr_idx;
    190e:	b2c0      	uxtb	r0, r0
					if (is_ro) {
    1910:	f1bc 0f00 	cmp.w	ip, #0
    1914:	d0e2      	beq.n	18dc <cbvprintf_package+0x2fc>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1916:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    191a:	44ec      	add	ip, sp
    191c:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1920:	f80c 0c10 	strb.w	r0, [ip, #-16]
						s_ro_cnt++;
    1924:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    1928:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    192a:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    192e:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1930:	9005      	str	r0, [sp, #20]
    1932:	e6b4      	b.n	169e <cbvprintf_package+0xbe>
    1934:	0000b988 	.word	0x0000b988
    1938:	0000dccc 	.word	0x0000dccc
    193c:	0000dab4 	.word	0x0000dab4
    1940:	0000c15c 	.word	0x0000c15c
    1944:	0000c18a 	.word	0x0000c18a
    1948:	0000c1f7 	.word	0x0000c1f7
    194c:	0000c1a7 	.word	0x0000c1a7
    1950:	0000c1c8 	.word	0x0000c1c8
				} else if (is_ro || rws_pos_en) {
    1954:	f1bc 0f00 	cmp.w	ip, #0
    1958:	d101      	bne.n	195e <cbvprintf_package+0x37e>
    195a:	9801      	ldr	r0, [sp, #4]
    195c:	b108      	cbz	r0, 1962 <cbvprintf_package+0x382>
					len += 1;
    195e:	3601      	adds	r6, #1
    1960:	e7e2      	b.n	1928 <cbvprintf_package+0x348>
					len += strlen(s) + 1 + 1;
    1962:	4638      	mov	r0, r7
    1964:	e9cd 2106 	strd	r2, r1, [sp, #24]
    1968:	9305      	str	r3, [sp, #20]
    196a:	f7ff fa33 	bl	dd4 <strlen>
    196e:	3602      	adds	r6, #2
    1970:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    1974:	9b05      	ldr	r3, [sp, #20]
    1976:	4406      	add	r6, r0
    1978:	e7d6      	b.n	1928 <cbvprintf_package+0x348>
			__ASSERT(false, "unexpected size %u", size);
    197a:	4a38      	ldr	r2, [pc, #224]	; (1a5c <cbvprintf_package+0x47c>)
    197c:	4938      	ldr	r1, [pc, #224]	; (1a60 <cbvprintf_package+0x480>)
    197e:	4839      	ldr	r0, [pc, #228]	; (1a64 <cbvprintf_package+0x484>)
    1980:	f240 2331 	movw	r3, #561	; 0x231
    1984:	f008 ffe5 	bl	a952 <assert_print>
    1988:	4659      	mov	r1, fp
    198a:	4837      	ldr	r0, [pc, #220]	; (1a68 <cbvprintf_package+0x488>)
    198c:	f008 ffe1 	bl	a952 <assert_print>
    1990:	f240 2131 	movw	r1, #561	; 0x231
    1994:	e797      	b.n	18c6 <cbvprintf_package+0x2e6>
	if (buf0 == NULL) {
    1996:	b91d      	cbnz	r5, 19a0 <cbvprintf_package+0x3c0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1998:	f1a6 0408 	sub.w	r4, r6, #8
    199c:	1860      	adds	r0, r4, r1
    199e:	e638      	b.n	1612 <cbvprintf_package+0x32>
	if (rws_pos_en) {
    19a0:	9b01      	ldr	r3, [sp, #4]
	buf0[0] = BUF_OFFSET / sizeof(int);
    19a2:	f3c1 0c87 	ubfx	ip, r1, #2, #8
		buf0[3] = s_rw_cnt;
    19a6:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    19aa:	b90b      	cbnz	r3, 19b0 <cbvprintf_package+0x3d0>
    19ac:	4608      	mov	r0, r1
    19ae:	4619      	mov	r1, r3
	buf0[0] = BUF_OFFSET / sizeof(int);
    19b0:	f885 c000 	strb.w	ip, [r5]
		buf0[1] = 0;
    19b4:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    19b6:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    19b8:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    19bc:	f1ba 0f00 	cmp.w	sl, #0
    19c0:	d006      	beq.n	19d0 <cbvprintf_package+0x3f0>
    19c2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    19c4:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    19c8:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    19cc:	4562      	cmp	r2, ip
    19ce:	d109      	bne.n	19e4 <cbvprintf_package+0x404>
    19d0:	f10d 0820 	add.w	r8, sp, #32
    19d4:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    19d8:	f1c5 0b01 	rsb	fp, r5, #1
	for (i = 0; i < s_idx; i++) {
    19dc:	45c1      	cmp	r9, r8
    19de:	d111      	bne.n	1a04 <cbvprintf_package+0x424>
	return BUF_OFFSET;
    19e0:	1b60      	subs	r0, r4, r5
    19e2:	e616      	b.n	1612 <cbvprintf_package+0x32>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    19e4:	f810 1b01 	ldrb.w	r1, [r0], #1
    19e8:	060b      	lsls	r3, r1, #24
    19ea:	d508      	bpl.n	19fe <cbvprintf_package+0x41e>
			if (BUF_OFFSET + 1 > len) {
    19ec:	eb04 080e 	add.w	r8, r4, lr
    19f0:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    19f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    19f6:	f4ff ae0a 	bcc.w	160e <cbvprintf_package+0x2e>
			*buf++ = pos;
    19fa:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    19fe:	f10c 0c01 	add.w	ip, ip, #1
    1a02:	e7e3      	b.n	19cc <cbvprintf_package+0x3ec>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1a04:	f1ba 0f00 	cmp.w	sl, #0
    1a08:	d003      	beq.n	1a12 <cbvprintf_package+0x432>
    1a0a:	f998 2000 	ldrsb.w	r2, [r8]
    1a0e:	2a00      	cmp	r2, #0
    1a10:	db1c      	blt.n	1a4c <cbvprintf_package+0x46c>
		if (rws_pos_en) {
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	b9eb      	cbnz	r3, 1a52 <cbvprintf_package+0x472>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1a16:	f898 2000 	ldrb.w	r2, [r8]
    1a1a:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1a1e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1a22:	4638      	mov	r0, r7
    1a24:	f7ff f9d6 	bl	dd4 <strlen>
    1a28:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1a2a:	eb04 010b 	add.w	r1, r4, fp
    1a2e:	4411      	add	r1, r2
    1a30:	428e      	cmp	r6, r1
    1a32:	f4ff adec 	bcc.w	160e <cbvprintf_package+0x2e>
		*buf++ = str_ptr_pos[i];
    1a36:	f898 1000 	ldrb.w	r1, [r8]
    1a3a:	f804 1b01 	strb.w	r1, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    1a3e:	4639      	mov	r1, r7
    1a40:	4620      	mov	r0, r4
    1a42:	9202      	str	r2, [sp, #8]
    1a44:	f009 fdbd 	bl	b5c2 <memcpy>
		buf += size;
    1a48:	9a02      	ldr	r2, [sp, #8]
    1a4a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1a4c:	f108 0801 	add.w	r8, r8, #1
    1a50:	e7c4      	b.n	19dc <cbvprintf_package+0x3fc>
			size = 0;
    1a52:	2200      	movs	r2, #0
    1a54:	e7e9      	b.n	1a2a <cbvprintf_package+0x44a>
		return -EFAULT;
    1a56:	f06f 000d 	mvn.w	r0, #13
    1a5a:	e5da      	b.n	1612 <cbvprintf_package+0x32>
    1a5c:	0000c15c 	.word	0x0000c15c
    1a60:	0000dab4 	.word	0x0000dab4
    1a64:	0000c18a 	.word	0x0000c18a
    1a68:	0000c1e2 	.word	0x0000c1e2

00001a6c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1a6c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1a6e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1a72:	2b03      	cmp	r3, #3
{
    1a74:	b510      	push	{r4, lr}
    1a76:	4604      	mov	r4, r0
	notify->result = res;
    1a78:	6081      	str	r1, [r0, #8]
	switch (method) {
    1a7a:	d002      	beq.n	1a82 <sys_notify_finalize+0x16>
    1a7c:	b12b      	cbz	r3, 1a8a <sys_notify_finalize+0x1e>
	sys_notify_generic_callback rv = NULL;
    1a7e:	2000      	movs	r0, #0
    1a80:	e000      	b.n	1a84 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1a82:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1a84:	2300      	movs	r3, #0
    1a86:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1a88:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
    1a8a:	4a05      	ldr	r2, [pc, #20]	; (1aa0 <sys_notify_finalize+0x34>)
    1a8c:	4905      	ldr	r1, [pc, #20]	; (1aa4 <sys_notify_finalize+0x38>)
    1a8e:	4806      	ldr	r0, [pc, #24]	; (1aa8 <sys_notify_finalize+0x3c>)
    1a90:	2345      	movs	r3, #69	; 0x45
    1a92:	f008 ff5e 	bl	a952 <assert_print>
    1a96:	4802      	ldr	r0, [pc, #8]	; (1aa0 <sys_notify_finalize+0x34>)
    1a98:	2145      	movs	r1, #69	; 0x45
    1a9a:	f008 ff53 	bl	a944 <assert_post_action>
    1a9e:	e7ee      	b.n	1a7e <sys_notify_finalize+0x12>
    1aa0:	0000c20e 	.word	0x0000c20e
    1aa4:	0000dab4 	.word	0x0000dab4
    1aa8:	0000c18a 	.word	0x0000c18a

00001aac <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1aac:	4b01      	ldr	r3, [pc, #4]	; (1ab4 <__printk_hook_install+0x8>)
    1aae:	6018      	str	r0, [r3, #0]
}
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop
    1ab4:	20000000 	.word	0x20000000

00001ab8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1abc:	8b85      	ldrh	r5, [r0, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1abe:	072b      	lsls	r3, r5, #28
{
    1ac0:	4604      	mov	r4, r0
    1ac2:	4691      	mov	r9, r2
	if (processing) {
    1ac4:	d469      	bmi.n	1b9a <process_event+0xe2>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1ac6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ac8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1acc:	f000 81ee 	beq.w	1eac <process_event+0x3f4>
			evt = process_recheck(mgr);
		}

		if (evt == EVT_NOP) {
    1ad0:	46aa      	mov	sl, r5
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
			res = mgr->last_res;
    1ad2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ad6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1ad8:	f1b8 0f00 	cmp.w	r8, #0
    1adc:	da7d      	bge.n	1bda <process_event+0x122>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1ade:	2200      	movs	r2, #0
		*clients = mgr->clients;
    1ae0:	6826      	ldr	r6, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ae2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1ae6:	e9c4 2200 	strd	r2, r2, [r4]
    1aea:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1aee:	83a3      	strh	r3, [r4, #28]
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1af0:	8ba3      	ldrh	r3, [r4, #28]
    1af2:	f003 0507 	and.w	r5, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1af6:	4555      	cmp	r5, sl
    1af8:	f04f 0700 	mov.w	r7, #0
    1afc:	f040 81a5 	bne.w	1e4a <process_event+0x392>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b00:	f04f 0a00 	mov.w	sl, #0

		evt = EVT_NOP;
		if (do_monitors
		    || !sys_slist_is_empty(&clients)
    1b04:	2e00      	cmp	r6, #0
    1b06:	f000 80f2 	beq.w	1cee <process_event+0x236>
		    || (transit != NULL)) {
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1b0a:	f043 0308 	orr.w	r3, r3, #8

			mgr->flags = flags;
			state = flags & ONOFF_STATE_MASK;

			k_spin_unlock(&mgr->lock, key);
    1b0e:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
    1b12:	83a3      	strh	r3, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1b14:	4658      	mov	r0, fp
    1b16:	f005 fc87 	bl	7428 <z_spin_unlock_valid>
    1b1a:	b968      	cbnz	r0, 1b38 <process_event+0x80>
    1b1c:	4a93      	ldr	r2, [pc, #588]	; (1d6c <process_event+0x2b4>)
    1b1e:	4994      	ldr	r1, [pc, #592]	; (1d70 <process_event+0x2b8>)
    1b20:	4894      	ldr	r0, [pc, #592]	; (1d74 <process_event+0x2bc>)
    1b22:	23b9      	movs	r3, #185	; 0xb9
    1b24:	f008 ff15 	bl	a952 <assert_print>
    1b28:	4893      	ldr	r0, [pc, #588]	; (1d78 <process_event+0x2c0>)
    1b2a:	4659      	mov	r1, fp
    1b2c:	f008 ff11 	bl	a952 <assert_print>
    1b30:	488e      	ldr	r0, [pc, #568]	; (1d6c <process_event+0x2b4>)
    1b32:	21b9      	movs	r1, #185	; 0xb9
    1b34:	f008 ff06 	bl	a944 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1b38:	f389 8811 	msr	BASEPRI, r9
    1b3c:	f3bf 8f6f 	isb	sy

			if (do_monitors) {
    1b40:	f1ba 0f00 	cmp.w	sl, #0
    1b44:	f040 8188 	bne.w	1e58 <process_event+0x3a0>
	while (!sys_slist_is_empty(list)) {
    1b48:	2e00      	cmp	r6, #0
    1b4a:	f040 819e 	bne.w	1e8a <process_event+0x3d2>

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
			}

			if (transit != NULL) {
    1b4e:	b117      	cbz	r7, 1b56 <process_event+0x9e>
				transit(mgr, transition_complete);
    1b50:	498a      	ldr	r1, [pc, #552]	; (1d7c <process_event+0x2c4>)
    1b52:	4620      	mov	r0, r4
    1b54:	47b8      	blx	r7
	__asm__ volatile(
    1b56:	f04f 0320 	mov.w	r3, #32
    1b5a:	f3ef 8911 	mrs	r9, BASEPRI
    1b5e:	f383 8812 	msr	BASEPRI_MAX, r3
    1b62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1b66:	4658      	mov	r0, fp
    1b68:	f005 fc50 	bl	740c <z_spin_lock_valid>
    1b6c:	b968      	cbnz	r0, 1b8a <process_event+0xd2>
    1b6e:	4a7f      	ldr	r2, [pc, #508]	; (1d6c <process_event+0x2b4>)
    1b70:	4983      	ldr	r1, [pc, #524]	; (1d80 <process_event+0x2c8>)
    1b72:	4880      	ldr	r0, [pc, #512]	; (1d74 <process_event+0x2bc>)
    1b74:	238e      	movs	r3, #142	; 0x8e
    1b76:	f008 feec 	bl	a952 <assert_print>
    1b7a:	4882      	ldr	r0, [pc, #520]	; (1d84 <process_event+0x2cc>)
    1b7c:	4659      	mov	r1, fp
    1b7e:	f008 fee8 	bl	a952 <assert_print>
    1b82:	487a      	ldr	r0, [pc, #488]	; (1d6c <process_event+0x2b4>)
    1b84:	218e      	movs	r1, #142	; 0x8e
    1b86:	f008 fedd 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    1b8a:	4658      	mov	r0, fp
    1b8c:	f005 fc5c 	bl	7448 <z_spin_lock_set_owner>
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1b90:	8ba3      	ldrh	r3, [r4, #28]
    1b92:	f023 0308 	bic.w	r3, r3, #8
    1b96:	83a3      	strh	r3, [r4, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
    1b98:	e05a      	b.n	1c50 <process_event+0x198>
		if (evt == EVT_COMPLETE) {
    1b9a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1b9c:	bf0c      	ite	eq
    1b9e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ba2:	f045 0520 	orrne.w	r5, r5, #32
    1ba6:	8385      	strh	r5, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1ba8:	3414      	adds	r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1baa:	4620      	mov	r0, r4
    1bac:	f005 fc3c 	bl	7428 <z_spin_unlock_valid>
    1bb0:	b968      	cbnz	r0, 1bce <process_event+0x116>
    1bb2:	4a6e      	ldr	r2, [pc, #440]	; (1d6c <process_event+0x2b4>)
    1bb4:	496e      	ldr	r1, [pc, #440]	; (1d70 <process_event+0x2b8>)
    1bb6:	486f      	ldr	r0, [pc, #444]	; (1d74 <process_event+0x2bc>)
    1bb8:	23b9      	movs	r3, #185	; 0xb9
    1bba:	f008 feca 	bl	a952 <assert_print>
    1bbe:	486e      	ldr	r0, [pc, #440]	; (1d78 <process_event+0x2c0>)
    1bc0:	4621      	mov	r1, r4
    1bc2:	f008 fec6 	bl	a952 <assert_print>
    1bc6:	4869      	ldr	r0, [pc, #420]	; (1d6c <process_event+0x2b4>)
    1bc8:	21b9      	movs	r1, #185	; 0xb9
    1bca:	f008 febb 	bl	a944 <assert_post_action>
	__asm__ volatile(
    1bce:	f389 8811 	msr	BASEPRI, r9
    1bd2:	f3bf 8f6f 	isb	sy
}
    1bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1bda:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1bde:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1be0:	2901      	cmp	r1, #1
    1be2:	d820      	bhi.n	1c26 <process_event+0x16e>
	list->head = NULL;
    1be4:	2100      	movs	r1, #0
		if (state == ONOFF_STATE_TO_ON) {
    1be6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1be8:	6826      	ldr	r6, [r4, #0]
	list->tail = NULL;
    1bea:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1bee:	d116      	bne.n	1c1e <process_event+0x166>
		*clients = mgr->clients;
    1bf0:	4632      	mov	r2, r6
    1bf2:	e003      	b.n	1bfc <process_event+0x144>
				mgr->refs += 1U;
    1bf4:	8be1      	ldrh	r1, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1bf6:	6812      	ldr	r2, [r2, #0]
    1bf8:	3101      	adds	r1, #1
    1bfa:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1bfc:	2a00      	cmp	r2, #0
    1bfe:	d1f9      	bne.n	1bf4 <process_event+0x13c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c00:	f023 0307 	bic.w	r3, r3, #7
    1c04:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c08:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1c0a:	4620      	mov	r0, r4
    1c0c:	f008 fd61 	bl	a6d2 <process_recheck>
    1c10:	2800      	cmp	r0, #0
    1c12:	f43f af6d 	beq.w	1af0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c16:	f042 0220 	orr.w	r2, r2, #32
    1c1a:	83a2      	strh	r2, [r4, #28]
    1c1c:	e768      	b.n	1af0 <process_event+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c1e:	f023 0307 	bic.w	r3, r3, #7
    1c22:	b29a      	uxth	r2, r3
}
    1c24:	e7f0      	b.n	1c08 <process_event+0x150>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1c26:	2a04      	cmp	r2, #4
    1c28:	d11e      	bne.n	1c68 <process_event+0x1b0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c2a:	f023 0307 	bic.w	r3, r3, #7
    1c2e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c30:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1c32:	4620      	mov	r0, r4
    1c34:	f008 fd4d 	bl	a6d2 <process_recheck>
    1c38:	b110      	cbz	r0, 1c40 <process_event+0x188>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c3a:	f042 0220 	orr.w	r2, r2, #32
    1c3e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c40:	8ba3      	ldrh	r3, [r4, #28]
    1c42:	f003 0507 	and.w	r5, r3, #7
		onoff_transition_fn transit = NULL;
    1c46:	2700      	movs	r7, #0
				   && !sys_slist_is_empty(&mgr->monitors);
    1c48:	4555      	cmp	r5, sl
    1c4a:	463e      	mov	r6, r7
    1c4c:	f040 80fd 	bne.w	1e4a <process_event+0x392>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1c50:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    1c54:	f01a 0f10 	tst.w	sl, #16
    1c58:	f000 811f 	beq.w	1e9a <process_event+0x3e2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1c5c:	f02a 0310 	bic.w	r3, sl, #16
    1c60:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1c62:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    1c66:	e734      	b.n	1ad2 <process_event+0x1a>
		__ASSERT_NO_MSG(false);
    1c68:	4a47      	ldr	r2, [pc, #284]	; (1d88 <process_event+0x2d0>)
    1c6a:	4948      	ldr	r1, [pc, #288]	; (1d8c <process_event+0x2d4>)
    1c6c:	4841      	ldr	r0, [pc, #260]	; (1d74 <process_event+0x2bc>)
    1c6e:	f240 131b 	movw	r3, #283	; 0x11b
    1c72:	f008 fe6e 	bl	a952 <assert_print>
    1c76:	4844      	ldr	r0, [pc, #272]	; (1d88 <process_event+0x2d0>)
    1c78:	f240 111b 	movw	r1, #283	; 0x11b
    1c7c:	f008 fe62 	bl	a944 <assert_post_action>
    1c80:	e7de      	b.n	1c40 <process_event+0x188>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1c82:	b15d      	cbz	r5, 1c9c <process_event+0x1e4>
    1c84:	4942      	ldr	r1, [pc, #264]	; (1d90 <process_event+0x2d8>)
    1c86:	483b      	ldr	r0, [pc, #236]	; (1d74 <process_event+0x2bc>)
    1c88:	4a3f      	ldr	r2, [pc, #252]	; (1d88 <process_event+0x2d0>)
    1c8a:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1c8e:	f008 fe60 	bl	a952 <assert_print>
    1c92:	483d      	ldr	r0, [pc, #244]	; (1d88 <process_event+0x2d0>)
    1c94:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1c98:	f008 fe54 	bl	a944 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1c9c:	6823      	ldr	r3, [r4, #0]
    1c9e:	b95b      	cbnz	r3, 1cb8 <process_event+0x200>
    1ca0:	493c      	ldr	r1, [pc, #240]	; (1d94 <process_event+0x2dc>)
    1ca2:	4834      	ldr	r0, [pc, #208]	; (1d74 <process_event+0x2bc>)
    1ca4:	4a38      	ldr	r2, [pc, #224]	; (1d88 <process_event+0x2d0>)
    1ca6:	f240 1357 	movw	r3, #343	; 0x157
    1caa:	f008 fe52 	bl	a952 <assert_print>
    1cae:	4836      	ldr	r0, [pc, #216]	; (1d88 <process_event+0x2d0>)
    1cb0:	f240 1157 	movw	r1, #343	; 0x157
    1cb4:	f008 fe46 	bl	a944 <assert_post_action>
			transit = mgr->transitions->start;
    1cb8:	6923      	ldr	r3, [r4, #16]
    1cba:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    1cbc:	b95f      	cbnz	r7, 1cd6 <process_event+0x21e>
    1cbe:	4936      	ldr	r1, [pc, #216]	; (1d98 <process_event+0x2e0>)
    1cc0:	482c      	ldr	r0, [pc, #176]	; (1d74 <process_event+0x2bc>)
    1cc2:	4a31      	ldr	r2, [pc, #196]	; (1d88 <process_event+0x2d0>)
    1cc4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1cc8:	f008 fe43 	bl	a952 <assert_print>
    1ccc:	482e      	ldr	r0, [pc, #184]	; (1d88 <process_event+0x2d0>)
    1cce:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1cd2:	f008 fe37 	bl	a944 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cd6:	8ba3      	ldrh	r3, [r4, #28]
    1cd8:	f023 0307 	bic.w	r3, r3, #7
    1cdc:	f043 0306 	orr.w	r3, r3, #6
    1ce0:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1ce2:	2d06      	cmp	r5, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ce4:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1ce6:	f040 80ad 	bne.w	1e44 <process_event+0x38c>
		res = 0;
    1cea:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1cee:	f04f 0a00 	mov.w	sl, #0
    1cf2:	4656      	mov	r6, sl
		    || (transit != NULL)) {
    1cf4:	2f00      	cmp	r7, #0
    1cf6:	f47f af08 	bne.w	1b0a <process_event+0x52>
    1cfa:	e7a9      	b.n	1c50 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    1cfc:	2d02      	cmp	r5, #2
    1cfe:	d00b      	beq.n	1d18 <process_event+0x260>
    1d00:	4926      	ldr	r1, [pc, #152]	; (1d9c <process_event+0x2e4>)
    1d02:	481c      	ldr	r0, [pc, #112]	; (1d74 <process_event+0x2bc>)
    1d04:	4a20      	ldr	r2, [pc, #128]	; (1d88 <process_event+0x2d0>)
    1d06:	f240 135d 	movw	r3, #349	; 0x15d
    1d0a:	f008 fe22 	bl	a952 <assert_print>
    1d0e:	481e      	ldr	r0, [pc, #120]	; (1d88 <process_event+0x2d0>)
    1d10:	f240 115d 	movw	r1, #349	; 0x15d
    1d14:	f008 fe16 	bl	a944 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    1d18:	8be3      	ldrh	r3, [r4, #30]
    1d1a:	b15b      	cbz	r3, 1d34 <process_event+0x27c>
    1d1c:	4920      	ldr	r1, [pc, #128]	; (1da0 <process_event+0x2e8>)
    1d1e:	4815      	ldr	r0, [pc, #84]	; (1d74 <process_event+0x2bc>)
    1d20:	4a19      	ldr	r2, [pc, #100]	; (1d88 <process_event+0x2d0>)
    1d22:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1d26:	f008 fe14 	bl	a952 <assert_print>
    1d2a:	4817      	ldr	r0, [pc, #92]	; (1d88 <process_event+0x2d0>)
    1d2c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1d30:	f008 fe08 	bl	a944 <assert_post_action>
			transit = mgr->transitions->stop;
    1d34:	6923      	ldr	r3, [r4, #16]
    1d36:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1d38:	b95f      	cbnz	r7, 1d52 <process_event+0x29a>
    1d3a:	4917      	ldr	r1, [pc, #92]	; (1d98 <process_event+0x2e0>)
    1d3c:	480d      	ldr	r0, [pc, #52]	; (1d74 <process_event+0x2bc>)
    1d3e:	4a12      	ldr	r2, [pc, #72]	; (1d88 <process_event+0x2d0>)
    1d40:	f240 1361 	movw	r3, #353	; 0x161
    1d44:	f008 fe05 	bl	a952 <assert_print>
    1d48:	480f      	ldr	r0, [pc, #60]	; (1d88 <process_event+0x2d0>)
    1d4a:	f240 1161 	movw	r1, #353	; 0x161
    1d4e:	f008 fdf9 	bl	a944 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1d52:	8ba3      	ldrh	r3, [r4, #28]
    1d54:	f023 0307 	bic.w	r3, r3, #7
    1d58:	f043 0304 	orr.w	r3, r3, #4
    1d5c:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1d5e:	2d04      	cmp	r5, #4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1d60:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1d62:	d0c2      	beq.n	1cea <process_event+0x232>
    1d64:	2600      	movs	r6, #0
		res = 0;
    1d66:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1d68:	2504      	movs	r5, #4
    1d6a:	e06e      	b.n	1e4a <process_event+0x392>
    1d6c:	0000c2d4 	.word	0x0000c2d4
    1d70:	0000c301 	.word	0x0000c301
    1d74:	0000c18a 	.word	0x0000c18a
    1d78:	0000c318 	.word	0x0000c318
    1d7c:	00001ef1 	.word	0x00001ef1
    1d80:	0000c32d 	.word	0x0000c32d
    1d84:	0000c342 	.word	0x0000c342
    1d88:	0000c231 	.word	0x0000c231
    1d8c:	0000dab4 	.word	0x0000dab4
    1d90:	0000c253 	.word	0x0000c253
    1d94:	0000c25f 	.word	0x0000c25f
    1d98:	0000c282 	.word	0x0000c282
    1d9c:	0000c299 	.word	0x0000c299
    1da0:	0000c2af 	.word	0x0000c2af
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1da4:	2d01      	cmp	r5, #1
    1da6:	d00b      	beq.n	1dc0 <process_event+0x308>
    1da8:	494b      	ldr	r1, [pc, #300]	; (1ed8 <process_event+0x420>)
    1daa:	484c      	ldr	r0, [pc, #304]	; (1edc <process_event+0x424>)
    1dac:	4a4c      	ldr	r2, [pc, #304]	; (1ee0 <process_event+0x428>)
    1dae:	f44f 73b2 	mov.w	r3, #356	; 0x164
    1db2:	f008 fdce 	bl	a952 <assert_print>
    1db6:	484a      	ldr	r0, [pc, #296]	; (1ee0 <process_event+0x428>)
    1db8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1dbc:	f008 fdc2 	bl	a944 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1dc0:	6823      	ldr	r3, [r4, #0]
    1dc2:	b95b      	cbnz	r3, 1ddc <process_event+0x324>
    1dc4:	4947      	ldr	r1, [pc, #284]	; (1ee4 <process_event+0x42c>)
    1dc6:	4845      	ldr	r0, [pc, #276]	; (1edc <process_event+0x424>)
    1dc8:	4a45      	ldr	r2, [pc, #276]	; (1ee0 <process_event+0x428>)
    1dca:	f240 1365 	movw	r3, #357	; 0x165
    1dce:	f008 fdc0 	bl	a952 <assert_print>
    1dd2:	4843      	ldr	r0, [pc, #268]	; (1ee0 <process_event+0x428>)
    1dd4:	f240 1165 	movw	r1, #357	; 0x165
    1dd8:	f008 fdb4 	bl	a944 <assert_post_action>
			transit = mgr->transitions->reset;
    1ddc:	6923      	ldr	r3, [r4, #16]
    1dde:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    1de0:	b95f      	cbnz	r7, 1dfa <process_event+0x342>
    1de2:	4941      	ldr	r1, [pc, #260]	; (1ee8 <process_event+0x430>)
    1de4:	483d      	ldr	r0, [pc, #244]	; (1edc <process_event+0x424>)
    1de6:	4a3e      	ldr	r2, [pc, #248]	; (1ee0 <process_event+0x428>)
    1de8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1dec:	f008 fdb1 	bl	a952 <assert_print>
    1df0:	483b      	ldr	r0, [pc, #236]	; (1ee0 <process_event+0x428>)
    1df2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    1df6:	f008 fda5 	bl	a944 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1dfa:	8ba3      	ldrh	r3, [r4, #28]
    1dfc:	f023 0307 	bic.w	r3, r3, #7
    1e00:	f043 0305 	orr.w	r3, r3, #5
    1e04:	b29b      	uxth	r3, r3
				   && !sys_slist_is_empty(&mgr->monitors);
    1e06:	2d05      	cmp	r5, #5
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e08:	83a3      	strh	r3, [r4, #28]
				   && !sys_slist_is_empty(&mgr->monitors);
    1e0a:	f43f af6e 	beq.w	1cea <process_event+0x232>
    1e0e:	2600      	movs	r6, #0
		res = 0;
    1e10:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e12:	2505      	movs	r5, #5
    1e14:	e019      	b.n	1e4a <process_event+0x392>
			__ASSERT_NO_MSG(false);
    1e16:	4a32      	ldr	r2, [pc, #200]	; (1ee0 <process_event+0x428>)
    1e18:	4934      	ldr	r1, [pc, #208]	; (1eec <process_event+0x434>)
    1e1a:	4830      	ldr	r0, [pc, #192]	; (1edc <process_event+0x424>)
    1e1c:	f240 136b 	movw	r3, #363	; 0x16b
    1e20:	f008 fd97 	bl	a952 <assert_print>
    1e24:	482e      	ldr	r0, [pc, #184]	; (1ee0 <process_event+0x428>)
    1e26:	f240 116b 	movw	r1, #363	; 0x16b
    1e2a:	f008 fd8b 	bl	a944 <assert_post_action>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e2e:	8ba3      	ldrh	r3, [r4, #28]
    1e30:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e34:	42aa      	cmp	r2, r5
    1e36:	f43f af0b 	beq.w	1c50 <process_event+0x198>
    1e3a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e3c:	4615      	mov	r5, r2
		onoff_transition_fn transit = NULL;
    1e3e:	4637      	mov	r7, r6
		res = 0;
    1e40:	46b0      	mov	r8, r6
    1e42:	e002      	b.n	1e4a <process_event+0x392>
				   && !sys_slist_is_empty(&mgr->monitors);
    1e44:	2600      	movs	r6, #0
		res = 0;
    1e46:	46b0      	mov	r8, r6
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e48:	2506      	movs	r5, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1e4a:	68a2      	ldr	r2, [r4, #8]
    1e4c:	2a00      	cmp	r2, #0
    1e4e:	f43f ae57 	beq.w	1b00 <process_event+0x48>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e52:	f04f 0a01 	mov.w	sl, #1
    1e56:	e658      	b.n	1b0a <process_event+0x52>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1e58:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1e5a:	2900      	cmp	r1, #0
    1e5c:	f43f ae74 	beq.w	1b48 <process_event+0x90>
	return node->next;
    1e60:	f8d1 9000 	ldr.w	r9, [r1]
    1e64:	2900      	cmp	r1, #0
    1e66:	f43f ae6f 	beq.w	1b48 <process_event+0x90>
		mon->callback(mgr, mon, state, res);
    1e6a:	f8d1 a004 	ldr.w	sl, [r1, #4]
    1e6e:	4643      	mov	r3, r8
    1e70:	462a      	mov	r2, r5
    1e72:	4620      	mov	r0, r4
    1e74:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1e76:	f1b9 0f00 	cmp.w	r9, #0
    1e7a:	d004      	beq.n	1e86 <process_event+0x3ce>
    1e7c:	f8d9 3000 	ldr.w	r3, [r9]
    1e80:	4649      	mov	r1, r9
    1e82:	4699      	mov	r9, r3
    1e84:	e7ee      	b.n	1e64 <process_event+0x3ac>
    1e86:	464b      	mov	r3, r9
    1e88:	e7fa      	b.n	1e80 <process_event+0x3c8>
    1e8a:	4631      	mov	r1, r6
		notify_one(mgr, cli, state, res);
    1e8c:	4643      	mov	r3, r8
    1e8e:	462a      	mov	r2, r5
    1e90:	4620      	mov	r0, r4
    1e92:	6836      	ldr	r6, [r6, #0]
    1e94:	f008 fc49 	bl	a72a <notify_one>
    1e98:	e656      	b.n	1b48 <process_event+0x90>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1e9a:	f01a 0f20 	tst.w	sl, #32
    1e9e:	f43f ae83 	beq.w	1ba8 <process_event+0xf0>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1ea2:	f02a 0320 	bic.w	r3, sl, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1ea6:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    1ea8:	f00a 0507 	and.w	r5, sl, #7
			evt = process_recheck(mgr);
    1eac:	4620      	mov	r0, r4
    1eae:	f008 fc10 	bl	a6d2 <process_recheck>
		if (evt == EVT_NOP) {
    1eb2:	2800      	cmp	r0, #0
    1eb4:	f43f ae78 	beq.w	1ba8 <process_event+0xf0>
		if (evt == EVT_COMPLETE) {
    1eb8:	3801      	subs	r0, #1
    1eba:	2804      	cmp	r0, #4
    1ebc:	d8ab      	bhi.n	1e16 <process_event+0x35e>
    1ebe:	a301      	add	r3, pc, #4	; (adr r3, 1ec4 <process_event+0x40c>)
    1ec0:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
    1ec4:	00001ad1 	.word	0x00001ad1
    1ec8:	00001e17 	.word	0x00001e17
    1ecc:	00001c83 	.word	0x00001c83
    1ed0:	00001cfd 	.word	0x00001cfd
    1ed4:	00001da5 	.word	0x00001da5
    1ed8:	0000c2be 	.word	0x0000c2be
    1edc:	0000c18a 	.word	0x0000c18a
    1ee0:	0000c231 	.word	0x0000c231
    1ee4:	0000c25f 	.word	0x0000c25f
    1ee8:	0000c282 	.word	0x0000c282
    1eec:	0000dab4 	.word	0x0000dab4

00001ef0 <transition_complete>:
{
    1ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ef2:	4604      	mov	r4, r0
    1ef4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1ef6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    1efa:	f04f 0320 	mov.w	r3, #32
    1efe:	f3ef 8711 	mrs	r7, BASEPRI
    1f02:	f383 8812 	msr	BASEPRI_MAX, r3
    1f06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f0a:	4630      	mov	r0, r6
    1f0c:	f005 fa7e 	bl	740c <z_spin_lock_valid>
    1f10:	b968      	cbnz	r0, 1f2e <transition_complete+0x3e>
    1f12:	4a0c      	ldr	r2, [pc, #48]	; (1f44 <transition_complete+0x54>)
    1f14:	490c      	ldr	r1, [pc, #48]	; (1f48 <transition_complete+0x58>)
    1f16:	480d      	ldr	r0, [pc, #52]	; (1f4c <transition_complete+0x5c>)
    1f18:	238e      	movs	r3, #142	; 0x8e
    1f1a:	f008 fd1a 	bl	a952 <assert_print>
    1f1e:	480c      	ldr	r0, [pc, #48]	; (1f50 <transition_complete+0x60>)
    1f20:	4631      	mov	r1, r6
    1f22:	f008 fd16 	bl	a952 <assert_print>
    1f26:	4807      	ldr	r0, [pc, #28]	; (1f44 <transition_complete+0x54>)
    1f28:	218e      	movs	r1, #142	; 0x8e
    1f2a:	f008 fd0b 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    1f2e:	4630      	mov	r0, r6
    1f30:	f005 fa8a 	bl	7448 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1f34:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1f36:	463a      	mov	r2, r7
    1f38:	4620      	mov	r0, r4
    1f3a:	2101      	movs	r1, #1
}
    1f3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1f40:	f7ff bdba 	b.w	1ab8 <process_event>
    1f44:	0000c2d4 	.word	0x0000c2d4
    1f48:	0000c32d 	.word	0x0000c32d
    1f4c:	0000c18a 	.word	0x0000c18a
    1f50:	0000c342 	.word	0x0000c342

00001f54 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f58:	4604      	mov	r4, r0
    1f5a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1f5c:	f008 fbd5 	bl	a70a <validate_args>

	if (rv < 0) {
    1f60:	1e05      	subs	r5, r0, #0
    1f62:	db78      	blt.n	2056 <onoff_request+0x102>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1f64:	f104 0914 	add.w	r9, r4, #20
    1f68:	f04f 0320 	mov.w	r3, #32
    1f6c:	f3ef 8a11 	mrs	sl, BASEPRI
    1f70:	f383 8812 	msr	BASEPRI_MAX, r3
    1f74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1f78:	4648      	mov	r0, r9
    1f7a:	f005 fa47 	bl	740c <z_spin_lock_valid>
    1f7e:	b968      	cbnz	r0, 1f9c <onoff_request+0x48>
    1f80:	4a39      	ldr	r2, [pc, #228]	; (2068 <onoff_request+0x114>)
    1f82:	493a      	ldr	r1, [pc, #232]	; (206c <onoff_request+0x118>)
    1f84:	483a      	ldr	r0, [pc, #232]	; (2070 <onoff_request+0x11c>)
    1f86:	238e      	movs	r3, #142	; 0x8e
    1f88:	f008 fce3 	bl	a952 <assert_print>
    1f8c:	4839      	ldr	r0, [pc, #228]	; (2074 <onoff_request+0x120>)
    1f8e:	4649      	mov	r1, r9
    1f90:	f008 fcdf 	bl	a952 <assert_print>
    1f94:	4834      	ldr	r0, [pc, #208]	; (2068 <onoff_request+0x114>)
    1f96:	218e      	movs	r1, #142	; 0x8e
    1f98:	f008 fcd4 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    1f9c:	4648      	mov	r0, r9
    1f9e:	f005 fa53 	bl	7448 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1fa2:	8be3      	ldrh	r3, [r4, #30]
    1fa4:	8ba6      	ldrh	r6, [r4, #28]
    1fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1faa:	4293      	cmp	r3, r2
    1fac:	f006 0607 	and.w	r6, r6, #7
    1fb0:	d054      	beq.n	205c <onoff_request+0x108>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1fb2:	2e02      	cmp	r6, #2
    1fb4:	d124      	bne.n	2000 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    1fb6:	3301      	adds	r3, #1
    1fb8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    1fba:	4635      	mov	r5, r6
		notify = true;
    1fbc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1fc0:	4648      	mov	r0, r9
    1fc2:	f005 fa31 	bl	7428 <z_spin_unlock_valid>
    1fc6:	b968      	cbnz	r0, 1fe4 <onoff_request+0x90>
    1fc8:	4a27      	ldr	r2, [pc, #156]	; (2068 <onoff_request+0x114>)
    1fca:	492b      	ldr	r1, [pc, #172]	; (2078 <onoff_request+0x124>)
    1fcc:	4828      	ldr	r0, [pc, #160]	; (2070 <onoff_request+0x11c>)
    1fce:	23b9      	movs	r3, #185	; 0xb9
    1fd0:	f008 fcbf 	bl	a952 <assert_print>
    1fd4:	4829      	ldr	r0, [pc, #164]	; (207c <onoff_request+0x128>)
    1fd6:	4649      	mov	r1, r9
    1fd8:	f008 fcbb 	bl	a952 <assert_print>
    1fdc:	4822      	ldr	r0, [pc, #136]	; (2068 <onoff_request+0x114>)
    1fde:	21b9      	movs	r1, #185	; 0xb9
    1fe0:	f008 fcb0 	bl	a944 <assert_post_action>
	__asm__ volatile(
    1fe4:	f38a 8811 	msr	BASEPRI, sl
    1fe8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1fec:	f1b8 0f00 	cmp.w	r8, #0
    1ff0:	d031      	beq.n	2056 <onoff_request+0x102>
			notify_one(mgr, cli, state, 0);
    1ff2:	2300      	movs	r3, #0
    1ff4:	4632      	mov	r2, r6
    1ff6:	4639      	mov	r1, r7
    1ff8:	4620      	mov	r0, r4
    1ffa:	f008 fb96 	bl	a72a <notify_one>
    1ffe:	e02a      	b.n	2056 <onoff_request+0x102>
	} else if ((state == ONOFF_STATE_OFF)
    2000:	2e06      	cmp	r6, #6
    2002:	d80e      	bhi.n	2022 <onoff_request+0xce>
    2004:	e8df f006 	tbb	[pc, r6]
    2008:	0d0d1904 	.word	0x0d0d1904
    200c:	2d04      	.short	0x2d04
    200e:	04          	.byte	0x04
    200f:	00          	.byte	0x00
	parent->next = child;
    2010:	2300      	movs	r3, #0
    2012:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    2014:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    2016:	b9ab      	cbnz	r3, 2044 <onoff_request+0xf0>
	list->head = node;
    2018:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    201c:	b1ae      	cbz	r6, 204a <onoff_request+0xf6>
	rv = state;
    201e:	4635      	mov	r5, r6
    2020:	e00d      	b.n	203e <onoff_request+0xea>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2022:	4917      	ldr	r1, [pc, #92]	; (2080 <onoff_request+0x12c>)
    2024:	4812      	ldr	r0, [pc, #72]	; (2070 <onoff_request+0x11c>)
    2026:	4a17      	ldr	r2, [pc, #92]	; (2084 <onoff_request+0x130>)
    2028:	f240 13c9 	movw	r3, #457	; 0x1c9
    202c:	f008 fc91 	bl	a952 <assert_print>
    2030:	4814      	ldr	r0, [pc, #80]	; (2084 <onoff_request+0x130>)
    2032:	f240 11c9 	movw	r1, #457	; 0x1c9
    2036:	f008 fc85 	bl	a944 <assert_post_action>
		rv = -EIO;
    203a:	f06f 0504 	mvn.w	r5, #4
	if (state == ONOFF_STATE_ON) {
    203e:	f04f 0800 	mov.w	r8, #0
    2042:	e7bd      	b.n	1fc0 <onoff_request+0x6c>
	parent->next = child;
    2044:	601f      	str	r7, [r3, #0]
	list->tail = node;
    2046:	6067      	str	r7, [r4, #4]
}
    2048:	e7e8      	b.n	201c <onoff_request+0xc8>
		process_event(mgr, EVT_RECHECK, key);
    204a:	4652      	mov	r2, sl
    204c:	2102      	movs	r1, #2
    204e:	4620      	mov	r0, r4
    2050:	f7ff fd32 	bl	1ab8 <process_event>
    2054:	4635      	mov	r5, r6
		}
	}

	return rv;
}
    2056:	4628      	mov	r0, r5
    2058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
    205c:	f06f 050a 	mvn.w	r5, #10
    2060:	e7ed      	b.n	203e <onoff_request+0xea>
	if (state == ONOFF_STATE_ON) {
    2062:	f06f 0585 	mvn.w	r5, #133	; 0x85
    2066:	e7ea      	b.n	203e <onoff_request+0xea>
    2068:	0000c2d4 	.word	0x0000c2d4
    206c:	0000c32d 	.word	0x0000c32d
    2070:	0000c18a 	.word	0x0000c18a
    2074:	0000c342 	.word	0x0000c342
    2078:	0000c301 	.word	0x0000c301
    207c:	0000c318 	.word	0x0000c318
    2080:	0000c2be 	.word	0x0000c2be
    2084:	0000c231 	.word	0x0000c231

00002088 <sys_heap_aligned_alloc>:

	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    2088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    208c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    2090:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    2094:	6806      	ldr	r6, [r0, #0]
{
    2096:	460f      	mov	r7, r1
    2098:	4614      	mov	r4, r2
	if (align != rew) {
    209a:	d011      	beq.n	20c0 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    209c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    20a0:	ea13 0f09 	tst.w	r3, r9
    20a4:	d113      	bne.n	20ce <sys_heap_aligned_alloc+0x46>
	rew = align & -align;
    20a6:	427b      	negs	r3, r7
    20a8:	403b      	ands	r3, r7
		gap = MIN(rew, chunk_header_bytes(h));
    20aa:	2b04      	cmp	r3, #4
    20ac:	461a      	mov	r2, r3
    20ae:	464f      	mov	r7, r9
    20b0:	bf28      	it	cs
    20b2:	2204      	movcs	r2, #4
	rew = align & -align;
    20b4:	4699      	mov	r9, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
    20b6:	b9e4      	cbnz	r4, 20f2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
    20b8:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    20ba:	4628      	mov	r0, r5
    20bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    20c0:	2904      	cmp	r1, #4
    20c2:	d814      	bhi.n	20ee <sys_heap_aligned_alloc+0x66>
}
    20c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    20c8:	4611      	mov	r1, r2
    20ca:	f008 bbfb 	b.w	a8c4 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    20ce:	4a2c      	ldr	r2, [pc, #176]	; (2180 <sys_heap_aligned_alloc+0xf8>)
    20d0:	492c      	ldr	r1, [pc, #176]	; (2184 <sys_heap_aligned_alloc+0xfc>)
    20d2:	482d      	ldr	r0, [pc, #180]	; (2188 <sys_heap_aligned_alloc+0x100>)
    20d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
    20d8:	f008 fc3b 	bl	a952 <assert_print>
    20dc:	482b      	ldr	r0, [pc, #172]	; (218c <sys_heap_aligned_alloc+0x104>)
    20de:	f008 fc38 	bl	a952 <assert_print>
    20e2:	4827      	ldr	r0, [pc, #156]	; (2180 <sys_heap_aligned_alloc+0xf8>)
    20e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    20e8:	f008 fc2c 	bl	a944 <assert_post_action>
    20ec:	e7db      	b.n	20a6 <sys_heap_aligned_alloc+0x1e>
		gap = chunk_header_bytes(h);
    20ee:	2204      	movs	r2, #4
    20f0:	e7e1      	b.n	20b6 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
    20f2:	68b3      	ldr	r3, [r6, #8]
    20f4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    20f8:	d9de      	bls.n	20b8 <sys_heap_aligned_alloc+0x30>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    20fa:	f104 010b 	add.w	r1, r4, #11
    20fe:	4439      	add	r1, r7
    2100:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    2102:	08c9      	lsrs	r1, r1, #3
    2104:	4630      	mov	r0, r6
    2106:	f008 fb8c 	bl	a822 <alloc_chunk>
	if (c0 == 0) {
    210a:	4680      	mov	r8, r0
    210c:	2800      	cmp	r0, #0
    210e:	d0d3      	beq.n	20b8 <sys_heap_aligned_alloc+0x30>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    2110:	f109 0504 	add.w	r5, r9, #4
    2114:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    2118:	1e7b      	subs	r3, r7, #1
    211a:	4435      	add	r5, r6
    211c:	441d      	add	r5, r3
    211e:	427f      	negs	r7, r7
    2120:	403d      	ands	r5, r7
    2122:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    2126:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2128:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    212a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    212c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    212e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    2132:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    2134:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    2138:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    213c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    2140:	d208      	bcs.n	2154 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
    2142:	4601      	mov	r1, r0
    2144:	463a      	mov	r2, r7
    2146:	4630      	mov	r0, r6
    2148:	f008 fba2 	bl	a890 <split_chunks>
		free_list_add(h, c0);
    214c:	4641      	mov	r1, r8
    214e:	4630      	mov	r0, r6
    2150:	f008 fb23 	bl	a79a <free_list_add>
	return c + chunk_size(h, c);
    2154:	4639      	mov	r1, r7
    2156:	4630      	mov	r0, r6
    2158:	f008 fb1a 	bl	a790 <chunk_size>
    215c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    215e:	4284      	cmp	r4, r0
    2160:	d207      	bcs.n	2172 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
    2162:	4630      	mov	r0, r6
    2164:	4622      	mov	r2, r4
    2166:	f008 fb93 	bl	a890 <split_chunks>
		free_list_add(h, c_end);
    216a:	4621      	mov	r1, r4
    216c:	4630      	mov	r0, r6
    216e:	f008 fb14 	bl	a79a <free_list_add>
	void *cmem = &buf[c];
    2172:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2176:	8873      	ldrh	r3, [r6, #2]
    2178:	f043 0301 	orr.w	r3, r3, #1
    217c:	8073      	strh	r3, [r6, #2]
    217e:	e79c      	b.n	20ba <sys_heap_aligned_alloc+0x32>
    2180:	0000c35a 	.word	0x0000c35a
    2184:	0000c426 	.word	0x0000c426
    2188:	0000c18a 	.word	0x0000c18a
    218c:	0000c441 	.word	0x0000c441

00002190 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    2190:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    2194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2198:	4604      	mov	r4, r0
    219a:	460e      	mov	r6, r1
    219c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    219e:	d36c      	bcc.n	227a <sys_heap_init+0xea>
    21a0:	493d      	ldr	r1, [pc, #244]	; (2298 <sys_heap_init+0x108>)
    21a2:	4a3e      	ldr	r2, [pc, #248]	; (229c <sys_heap_init+0x10c>)
    21a4:	483e      	ldr	r0, [pc, #248]	; (22a0 <sys_heap_init+0x110>)
    21a6:	f240 13e3 	movw	r3, #483	; 0x1e3
    21aa:	f008 fbd2 	bl	a952 <assert_print>
    21ae:	483d      	ldr	r0, [pc, #244]	; (22a4 <sys_heap_init+0x114>)
    21b0:	f008 fbcf 	bl	a952 <assert_print>
    21b4:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    21b8:	4838      	ldr	r0, [pc, #224]	; (229c <sys_heap_init+0x10c>)
    21ba:	f008 fbc3 	bl	a944 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    21be:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    21c0:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    21c2:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    21c4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    21c8:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    21cc:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    21ce:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    21d0:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    21d4:	d80e      	bhi.n	21f4 <sys_heap_init+0x64>
    21d6:	4934      	ldr	r1, [pc, #208]	; (22a8 <sys_heap_init+0x118>)
    21d8:	4a30      	ldr	r2, [pc, #192]	; (229c <sys_heap_init+0x10c>)
    21da:	4831      	ldr	r0, [pc, #196]	; (22a0 <sys_heap_init+0x110>)
    21dc:	f240 13f3 	movw	r3, #499	; 0x1f3
    21e0:	f008 fbb7 	bl	a952 <assert_print>
    21e4:	4831      	ldr	r0, [pc, #196]	; (22ac <sys_heap_init+0x11c>)
    21e6:	f008 fbb4 	bl	a952 <assert_print>
    21ea:	482c      	ldr	r0, [pc, #176]	; (229c <sys_heap_init+0x10c>)
    21ec:	f240 11f3 	movw	r1, #499	; 0x1f3
    21f0:	f008 fba8 	bl	a944 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    21f4:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    21f6:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    21fa:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    21fe:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    2202:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2204:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    2206:	2300      	movs	r3, #0
    2208:	08e4      	lsrs	r4, r4, #3
    220a:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    220c:	1c63      	adds	r3, r4, #1
    220e:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    2210:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    2212:	d90e      	bls.n	2232 <sys_heap_init+0xa2>
    2214:	4926      	ldr	r1, [pc, #152]	; (22b0 <sys_heap_init+0x120>)
    2216:	4a21      	ldr	r2, [pc, #132]	; (229c <sys_heap_init+0x10c>)
    2218:	4821      	ldr	r0, [pc, #132]	; (22a0 <sys_heap_init+0x110>)
    221a:	f44f 7301 	mov.w	r3, #516	; 0x204
    221e:	f008 fb98 	bl	a952 <assert_print>
    2222:	4822      	ldr	r0, [pc, #136]	; (22ac <sys_heap_init+0x11c>)
    2224:	f008 fb95 	bl	a952 <assert_print>
    2228:	481c      	ldr	r0, [pc, #112]	; (229c <sys_heap_init+0x10c>)
    222a:	f44f 7101 	mov.w	r1, #516	; 0x204
    222e:	f008 fb89 	bl	a944 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
    2232:	f105 030c 	add.w	r3, r5, #12
    2236:	eb03 0888 	add.w	r8, r3, r8, lsl #2
		h->buckets[i].next = 0;
    223a:	2200      	movs	r2, #0
    223c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    2240:	4543      	cmp	r3, r8
    2242:	d1fb      	bne.n	223c <sys_heap_init+0xac>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2244:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2246:	f043 0301 	orr.w	r3, r3, #1
    224a:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    224c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2250:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2252:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    2254:	802a      	strh	r2, [r5, #0]
    2256:	8048      	strh	r0, [r1, #2]
    2258:	19a9      	adds	r1, r5, r6
    225a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    225e:	804a      	strh	r2, [r1, #2]
    2260:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    2262:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    2266:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    2268:	885a      	ldrh	r2, [r3, #2]
    226a:	f042 0201 	orr.w	r2, r2, #1
    226e:	4628      	mov	r0, r5
    2270:	805a      	strh	r2, [r3, #2]
}
    2272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    2276:	f008 ba90 	b.w	a79a <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    227a:	2a04      	cmp	r2, #4
    227c:	d89f      	bhi.n	21be <sys_heap_init+0x2e>
    227e:	490d      	ldr	r1, [pc, #52]	; (22b4 <sys_heap_init+0x124>)
    2280:	4a06      	ldr	r2, [pc, #24]	; (229c <sys_heap_init+0x10c>)
    2282:	4807      	ldr	r0, [pc, #28]	; (22a0 <sys_heap_init+0x110>)
    2284:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    2288:	f008 fb63 	bl	a952 <assert_print>
    228c:	4807      	ldr	r0, [pc, #28]	; (22ac <sys_heap_init+0x11c>)
    228e:	f008 fb60 	bl	a952 <assert_print>
    2292:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    2296:	e78f      	b.n	21b8 <sys_heap_init+0x28>
    2298:	0000c45e 	.word	0x0000c45e
    229c:	0000c35a 	.word	0x0000c35a
    22a0:	0000c18a 	.word	0x0000c18a
    22a4:	0000c474 	.word	0x0000c474
    22a8:	0000c4c5 	.word	0x0000c4c5
    22ac:	0000c4ac 	.word	0x0000c4ac
    22b0:	0000c4ee 	.word	0x0000c4ee
    22b4:	0000c48b 	.word	0x0000c48b

000022b8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    22b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    22ba:	4e09      	ldr	r6, [pc, #36]	; (22e0 <extract_decimal+0x28>)
    22bc:	6801      	ldr	r1, [r0, #0]
{
    22be:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    22c0:	270a      	movs	r7, #10
	size_t val = 0;
    22c2:	2000      	movs	r0, #0
    22c4:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    22c6:	3101      	adds	r1, #1
    22c8:	781c      	ldrb	r4, [r3, #0]
    22ca:	5d35      	ldrb	r5, [r6, r4]
    22cc:	076d      	lsls	r5, r5, #29
    22ce:	d401      	bmi.n	22d4 <extract_decimal+0x1c>
	}
	*str = sp;
    22d0:	6013      	str	r3, [r2, #0]
	return val;
}
    22d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    22d4:	fb07 4300 	mla	r3, r7, r0, r4
    22d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    22dc:	e7f2      	b.n	22c4 <extract_decimal+0xc>
    22de:	bf00      	nop
    22e0:	0000db96 	.word	0x0000db96

000022e4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    22e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22e8:	4615      	mov	r5, r2
    22ea:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    22ec:	78d3      	ldrb	r3, [r2, #3]
    22ee:	4a22      	ldr	r2, [pc, #136]	; (2378 <encode_uint+0x94>)
    22f0:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    22f4:	2b6f      	cmp	r3, #111	; 0x6f
{
    22f6:	4680      	mov	r8, r0
    22f8:	460f      	mov	r7, r1
    22fa:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    22fe:	d029      	beq.n	2354 <encode_uint+0x70>
    2300:	d824      	bhi.n	234c <encode_uint+0x68>
		return 10;
    2302:	2b58      	cmp	r3, #88	; 0x58
    2304:	bf0c      	ite	eq
    2306:	2610      	moveq	r6, #16
    2308:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    230a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    230e:	4632      	mov	r2, r6
    2310:	2300      	movs	r3, #0
    2312:	4640      	mov	r0, r8
    2314:	4639      	mov	r1, r7
    2316:	f7fe fb61 	bl	9dc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    231a:	2a09      	cmp	r2, #9
    231c:	b2d4      	uxtb	r4, r2
    231e:	d81e      	bhi.n	235e <encode_uint+0x7a>
    2320:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    2322:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2324:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    2326:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    232a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    232e:	d301      	bcc.n	2334 <encode_uint+0x50>
    2330:	45d1      	cmp	r9, sl
    2332:	d811      	bhi.n	2358 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2334:	782b      	ldrb	r3, [r5, #0]
    2336:	069b      	lsls	r3, r3, #26
    2338:	d505      	bpl.n	2346 <encode_uint+0x62>
		if (radix == 8) {
    233a:	2e08      	cmp	r6, #8
    233c:	d115      	bne.n	236a <encode_uint+0x86>
			conv->altform_0 = true;
    233e:	78ab      	ldrb	r3, [r5, #2]
    2340:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2344:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    2346:	4648      	mov	r0, r9
    2348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    234c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    2350:	2b70      	cmp	r3, #112	; 0x70
    2352:	e7d7      	b.n	2304 <encode_uint+0x20>
	switch (specifier) {
    2354:	2608      	movs	r6, #8
    2356:	e7d8      	b.n	230a <encode_uint+0x26>
		value /= radix;
    2358:	4680      	mov	r8, r0
    235a:	460f      	mov	r7, r1
    235c:	e7d7      	b.n	230e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    235e:	f1bb 0f01 	cmp.w	fp, #1
    2362:	bf0c      	ite	eq
    2364:	3437      	addeq	r4, #55	; 0x37
    2366:	3457      	addne	r4, #87	; 0x57
    2368:	e7db      	b.n	2322 <encode_uint+0x3e>
		} else if (radix == 16) {
    236a:	2e10      	cmp	r6, #16
    236c:	d1eb      	bne.n	2346 <encode_uint+0x62>
			conv->altform_0c = true;
    236e:	78ab      	ldrb	r3, [r5, #2]
    2370:	f043 0310 	orr.w	r3, r3, #16
    2374:	e7e6      	b.n	2344 <encode_uint+0x60>
    2376:	bf00      	nop
    2378:	0000db96 	.word	0x0000db96

0000237c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2380:	b097      	sub	sp, #92	; 0x5c
    2382:	4682      	mov	sl, r0
    2384:	9103      	str	r1, [sp, #12]
    2386:	4617      	mov	r7, r2
    2388:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    238a:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    238c:	7838      	ldrb	r0, [r7, #0]
    238e:	b908      	cbnz	r0, 2394 <cbvprintf+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2390:	4628      	mov	r0, r5
    2392:	e34a      	b.n	2a2a <cbvprintf+0x6ae>
			OUTC(*fp++);
    2394:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2396:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2398:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    239a:	d006      	beq.n	23aa <cbvprintf+0x2e>
			OUTC('%');
    239c:	9903      	ldr	r1, [sp, #12]
    239e:	47d0      	blx	sl
    23a0:	2800      	cmp	r0, #0
    23a2:	f2c0 8342 	blt.w	2a2a <cbvprintf+0x6ae>
    23a6:	3501      	adds	r5, #1
		if (bps == NULL) {
    23a8:	e1f9      	b.n	279e <cbvprintf+0x422>
		} state = {
    23aa:	2218      	movs	r2, #24
    23ac:	2100      	movs	r1, #0
    23ae:	a810      	add	r0, sp, #64	; 0x40
    23b0:	f009 f915 	bl	b5de <memset>
	if (*sp == '%') {
    23b4:	787b      	ldrb	r3, [r7, #1]
    23b6:	2b25      	cmp	r3, #37	; 0x25
    23b8:	f000 80a3 	beq.w	2502 <cbvprintf+0x186>
    23bc:	2300      	movs	r3, #0
    23be:	1c79      	adds	r1, r7, #1
    23c0:	4698      	mov	r8, r3
    23c2:	469e      	mov	lr, r3
    23c4:	469c      	mov	ip, r3
    23c6:	4618      	mov	r0, r3
    23c8:	460e      	mov	r6, r1
		switch (*sp) {
    23ca:	f811 2b01 	ldrb.w	r2, [r1], #1
    23ce:	2a2b      	cmp	r2, #43	; 0x2b
    23d0:	f000 80c6 	beq.w	2560 <cbvprintf+0x1e4>
    23d4:	f200 80bd 	bhi.w	2552 <cbvprintf+0x1d6>
    23d8:	2a20      	cmp	r2, #32
    23da:	f000 80c4 	beq.w	2566 <cbvprintf+0x1ea>
    23de:	2a23      	cmp	r2, #35	; 0x23
    23e0:	f000 80c4 	beq.w	256c <cbvprintf+0x1f0>
    23e4:	b12b      	cbz	r3, 23f2 <cbvprintf+0x76>
    23e6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    23ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23ee:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    23f2:	f1b8 0f00 	cmp.w	r8, #0
    23f6:	d005      	beq.n	2404 <cbvprintf+0x88>
    23f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    23fc:	f043 0320 	orr.w	r3, r3, #32
    2400:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2404:	f1be 0f00 	cmp.w	lr, #0
    2408:	d005      	beq.n	2416 <cbvprintf+0x9a>
    240a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    240e:	f043 0310 	orr.w	r3, r3, #16
    2412:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2416:	f1bc 0f00 	cmp.w	ip, #0
    241a:	d005      	beq.n	2428 <cbvprintf+0xac>
    241c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2420:	f043 0308 	orr.w	r3, r3, #8
    2424:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2428:	b128      	cbz	r0, 2436 <cbvprintf+0xba>
    242a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    242e:	f043 0304 	orr.w	r3, r3, #4
    2432:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2436:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    243a:	f003 0144 	and.w	r1, r3, #68	; 0x44
    243e:	2944      	cmp	r1, #68	; 0x44
    2440:	d103      	bne.n	244a <cbvprintf+0xce>
		conv->flag_zero = false;
    2442:	f36f 1386 	bfc	r3, #6, #1
    2446:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    244a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    244e:	9609      	str	r6, [sp, #36]	; 0x24
    2450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    2454:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2456:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    245a:	f040 808c 	bne.w	2576 <cbvprintf+0x1fa>
		conv->width_star = true;
    245e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2462:	f043 0301 	orr.w	r3, r3, #1
    2466:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    246a:	1c73      	adds	r3, r6, #1
	conv->prec_present = (*sp == '.');
    246c:	781a      	ldrb	r2, [r3, #0]
    246e:	2a2e      	cmp	r2, #46	; 0x2e
    2470:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2474:	bf0c      	ite	eq
    2476:	2101      	moveq	r1, #1
    2478:	2100      	movne	r1, #0
    247a:	f361 0241 	bfi	r2, r1, #1, #1
    247e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    2482:	d10c      	bne.n	249e <cbvprintf+0x122>
	++sp;
    2484:	1c5a      	adds	r2, r3, #1
    2486:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    2488:	785a      	ldrb	r2, [r3, #1]
    248a:	2a2a      	cmp	r2, #42	; 0x2a
    248c:	f040 8083 	bne.w	2596 <cbvprintf+0x21a>
		conv->prec_star = true;
    2490:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2494:	f042 0204 	orr.w	r2, r2, #4
    2498:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    249c:	3302      	adds	r3, #2
	switch (*sp) {
    249e:	781a      	ldrb	r2, [r3, #0]
    24a0:	2a6c      	cmp	r2, #108	; 0x6c
    24a2:	f000 80a4 	beq.w	25ee <cbvprintf+0x272>
    24a6:	f200 8086 	bhi.w	25b6 <cbvprintf+0x23a>
    24aa:	2a68      	cmp	r2, #104	; 0x68
    24ac:	f000 808c 	beq.w	25c8 <cbvprintf+0x24c>
    24b0:	2a6a      	cmp	r2, #106	; 0x6a
    24b2:	f000 80a5 	beq.w	2600 <cbvprintf+0x284>
    24b6:	2a4c      	cmp	r2, #76	; 0x4c
    24b8:	f000 80aa 	beq.w	2610 <cbvprintf+0x294>
	conv->specifier = *sp++;
    24bc:	461a      	mov	r2, r3
    24be:	f812 3b01 	ldrb.w	r3, [r2], #1
    24c2:	9204      	str	r2, [sp, #16]
	switch (conv->specifier) {
    24c4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    24c6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	conv->specifier = *sp++;
    24ca:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    24ce:	f200 8117 	bhi.w	2700 <cbvprintf+0x384>
    24d2:	2b6d      	cmp	r3, #109	; 0x6d
    24d4:	f200 80a9 	bhi.w	262a <cbvprintf+0x2ae>
    24d8:	2b69      	cmp	r3, #105	; 0x69
    24da:	f200 8111 	bhi.w	2700 <cbvprintf+0x384>
    24de:	2b57      	cmp	r3, #87	; 0x57
    24e0:	f200 80be 	bhi.w	2660 <cbvprintf+0x2e4>
    24e4:	2b41      	cmp	r3, #65	; 0x41
    24e6:	d003      	beq.n	24f0 <cbvprintf+0x174>
    24e8:	3b45      	subs	r3, #69	; 0x45
    24ea:	2b02      	cmp	r3, #2
    24ec:	f200 8108 	bhi.w	2700 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_FP;
    24f0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    24f4:	2204      	movs	r2, #4
    24f6:	f362 0302 	bfi	r3, r2, #0, #3
    24fa:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    24fe:	2301      	movs	r3, #1
			break;
    2500:	e0ca      	b.n	2698 <cbvprintf+0x31c>
		conv->specifier = *sp++;
    2502:	1cba      	adds	r2, r7, #2
    2504:	9204      	str	r2, [sp, #16]
    2506:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    250a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    250e:	07da      	lsls	r2, r3, #31
    2510:	f140 80fd 	bpl.w	270e <cbvprintf+0x392>
			width = va_arg(ap, int);
    2514:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    2518:	f1b9 0f00 	cmp.w	r9, #0
    251c:	da07      	bge.n	252e <cbvprintf+0x1b2>
				conv->flag_dash = true;
    251e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2522:	f042 0204 	orr.w	r2, r2, #4
    2526:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    252a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    252e:	075e      	lsls	r6, r3, #29
    2530:	f140 80f6 	bpl.w	2720 <cbvprintf+0x3a4>
			int arg = va_arg(ap, int);
    2534:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    2538:	f1bb 0f00 	cmp.w	fp, #0
    253c:	f280 80f5 	bge.w	272a <cbvprintf+0x3ae>
				conv->prec_present = false;
    2540:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    2544:	f36f 0341 	bfc	r3, #1, #1
    2548:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    254c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    2550:	e0eb      	b.n	272a <cbvprintf+0x3ae>
		switch (*sp) {
    2552:	2a2d      	cmp	r2, #45	; 0x2d
    2554:	d00d      	beq.n	2572 <cbvprintf+0x1f6>
    2556:	2a30      	cmp	r2, #48	; 0x30
    2558:	f47f af44 	bne.w	23e4 <cbvprintf+0x68>
    255c:	2301      	movs	r3, #1
	} while (loop);
    255e:	e733      	b.n	23c8 <cbvprintf+0x4c>
		switch (*sp) {
    2560:	f04f 0c01 	mov.w	ip, #1
    2564:	e730      	b.n	23c8 <cbvprintf+0x4c>
    2566:	f04f 0e01 	mov.w	lr, #1
    256a:	e72d      	b.n	23c8 <cbvprintf+0x4c>
    256c:	f04f 0801 	mov.w	r8, #1
    2570:	e72a      	b.n	23c8 <cbvprintf+0x4c>
    2572:	2001      	movs	r0, #1
    2574:	e728      	b.n	23c8 <cbvprintf+0x4c>
	size_t width = extract_decimal(&sp);
    2576:	a809      	add	r0, sp, #36	; 0x24
    2578:	f7ff fe9e 	bl	22b8 <extract_decimal>
	if (sp != wp) {
    257c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    257e:	42b3      	cmp	r3, r6
    2580:	f43f af74 	beq.w	246c <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    2584:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    2588:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    258a:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    258c:	f360 0241 	bfi	r2, r0, #1, #1
    2590:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2594:	e76a      	b.n	246c <cbvprintf+0xf0>
	size_t prec = extract_decimal(&sp);
    2596:	a809      	add	r0, sp, #36	; 0x24
    2598:	f7ff fe8e 	bl	22b8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    259c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    25a0:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    25a2:	f3c3 0240 	ubfx	r2, r3, #1, #1
    25a6:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    25aa:	f362 0341 	bfi	r3, r2, #1, #1
    25ae:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    25b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25b4:	e773      	b.n	249e <cbvprintf+0x122>
	switch (*sp) {
    25b6:	2a74      	cmp	r2, #116	; 0x74
    25b8:	d026      	beq.n	2608 <cbvprintf+0x28c>
    25ba:	2a7a      	cmp	r2, #122	; 0x7a
    25bc:	f47f af7e 	bne.w	24bc <cbvprintf+0x140>
		conv->length_mod = LENGTH_Z;
    25c0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    25c4:	2106      	movs	r1, #6
    25c6:	e00c      	b.n	25e2 <cbvprintf+0x266>
		if (*++sp == 'h') {
    25c8:	785a      	ldrb	r2, [r3, #1]
    25ca:	2a68      	cmp	r2, #104	; 0x68
    25cc:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    25d0:	d106      	bne.n	25e0 <cbvprintf+0x264>
			conv->length_mod = LENGTH_HH;
    25d2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    25d4:	f361 02c6 	bfi	r2, r1, #3, #4
    25d8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    25dc:	3302      	adds	r3, #2
    25de:	e76d      	b.n	24bc <cbvprintf+0x140>
			conv->length_mod = LENGTH_H;
    25e0:	2102      	movs	r1, #2
    25e2:	f361 02c6 	bfi	r2, r1, #3, #4
    25e6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    25ea:	3301      	adds	r3, #1
    25ec:	e766      	b.n	24bc <cbvprintf+0x140>
		if (*++sp == 'l') {
    25ee:	785a      	ldrb	r2, [r3, #1]
    25f0:	2a6c      	cmp	r2, #108	; 0x6c
    25f2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    25f6:	d101      	bne.n	25fc <cbvprintf+0x280>
			conv->length_mod = LENGTH_LL;
    25f8:	2104      	movs	r1, #4
    25fa:	e7eb      	b.n	25d4 <cbvprintf+0x258>
			conv->length_mod = LENGTH_L;
    25fc:	2103      	movs	r1, #3
    25fe:	e7f0      	b.n	25e2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
    2600:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2604:	2105      	movs	r1, #5
    2606:	e7ec      	b.n	25e2 <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
    2608:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    260c:	2107      	movs	r1, #7
    260e:	e7e8      	b.n	25e2 <cbvprintf+0x266>
		conv->unsupported = true;
    2610:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2614:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2618:	f022 0202 	bic.w	r2, r2, #2
    261c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    2620:	f042 0202 	orr.w	r2, r2, #2
    2624:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2628:	e7df      	b.n	25ea <cbvprintf+0x26e>
	switch (conv->specifier) {
    262a:	3b6e      	subs	r3, #110	; 0x6e
    262c:	b2d9      	uxtb	r1, r3
    262e:	2301      	movs	r3, #1
    2630:	408b      	lsls	r3, r1
    2632:	f240 4182 	movw	r1, #1154	; 0x482
    2636:	420b      	tst	r3, r1
    2638:	d138      	bne.n	26ac <cbvprintf+0x330>
    263a:	f013 0f24 	tst.w	r3, #36	; 0x24
    263e:	d152      	bne.n	26e6 <cbvprintf+0x36a>
    2640:	07d8      	lsls	r0, r3, #31
    2642:	d55d      	bpl.n	2700 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_PTR;
    2644:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2648:	2103      	movs	r1, #3
    264a:	f361 0302 	bfi	r3, r1, #0, #3
    264e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2652:	f002 0378 	and.w	r3, r2, #120	; 0x78
    2656:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    265a:	424b      	negs	r3, r1
    265c:	414b      	adcs	r3, r1
    265e:	e01b      	b.n	2698 <cbvprintf+0x31c>
	switch (conv->specifier) {
    2660:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    2664:	b2c9      	uxtb	r1, r1
    2666:	2001      	movs	r0, #1
    2668:	fa00 f101 	lsl.w	r1, r0, r1
    266c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    2670:	f47f af3e 	bne.w	24f0 <cbvprintf+0x174>
    2674:	f640 0601 	movw	r6, #2049	; 0x801
    2678:	4231      	tst	r1, r6
    267a:	d11d      	bne.n	26b8 <cbvprintf+0x33c>
    267c:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2680:	d03e      	beq.n	2700 <cbvprintf+0x384>
		conv->specifier_cat = SPECIFIER_SINT;
    2682:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2686:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    268a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    268e:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    2690:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2694:	d034      	beq.n	2700 <cbvprintf+0x384>
	bool unsupported = false;
    2696:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    2698:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    269c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    26a0:	430b      	orrs	r3, r1
    26a2:	f363 0241 	bfi	r2, r3, #1, #1
    26a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    26aa:	e72e      	b.n	250a <cbvprintf+0x18e>
		conv->specifier_cat = SPECIFIER_UINT;
    26ac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    26b0:	2102      	movs	r1, #2
    26b2:	f361 0302 	bfi	r3, r1, #0, #3
    26b6:	e7e8      	b.n	268a <cbvprintf+0x30e>
    26b8:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    26bc:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    26be:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    26c2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    26c6:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    26c8:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    26cc:	bf02      	ittt	eq
    26ce:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    26d2:	f041 0101 	orreq.w	r1, r1, #1
    26d6:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    26da:	2b63      	cmp	r3, #99	; 0x63
    26dc:	d1db      	bne.n	2696 <cbvprintf+0x31a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    26de:	1e13      	subs	r3, r2, #0
    26e0:	bf18      	it	ne
    26e2:	2301      	movne	r3, #1
    26e4:	e7d8      	b.n	2698 <cbvprintf+0x31c>
		conv->specifier_cat = SPECIFIER_PTR;
    26e6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    26ea:	2103      	movs	r1, #3
    26ec:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    26f0:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    26f4:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    26f8:	bf14      	ite	ne
    26fa:	2301      	movne	r3, #1
    26fc:	2300      	moveq	r3, #0
    26fe:	e7cb      	b.n	2698 <cbvprintf+0x31c>
		conv->invalid = true;
    2700:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2704:	f043 0301 	orr.w	r3, r3, #1
    2708:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    270c:	e7c3      	b.n	2696 <cbvprintf+0x31a>
		} else if (conv->width_present) {
    270e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2712:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2714:	bfb4      	ite	lt
    2716:	f8dd 904c 	ldrlt.w	r9, [sp, #76]	; 0x4c
		int width = -1;
    271a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    271e:	e706      	b.n	252e <cbvprintf+0x1b2>
		} else if (conv->prec_present) {
    2720:	0798      	lsls	r0, r3, #30
    2722:	f57f af13 	bpl.w	254c <cbvprintf+0x1d0>
			precision = conv->prec_value;
    2726:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
			= (enum length_mod_enum)conv->length_mod;
    272a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->pad0_value = 0;
    272e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2730:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    2734:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		enum specifier_cat_enum specifier_cat
    2738:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    273c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    273e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2742:	d133      	bne.n	27ac <cbvprintf+0x430>
			switch (length_mod) {
    2744:	1ecb      	subs	r3, r1, #3
    2746:	2b04      	cmp	r3, #4
    2748:	d804      	bhi.n	2754 <cbvprintf+0x3d8>
    274a:	e8df f003 	tbb	[pc, r3]
    274e:	4610      	.short	0x4610
    2750:	1046      	.short	0x1046
    2752:	10          	.byte	0x10
    2753:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2754:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    2756:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    2758:	ea4f 72e3 	mov.w	r2, r3, asr #31
    275c:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2760:	d10b      	bne.n	277a <cbvprintf+0x3fe>
				value->sint = (char)value->sint;
    2762:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    2766:	9310      	str	r3, [sp, #64]	; 0x40
    2768:	2300      	movs	r3, #0
				value->sint = (short)value->sint;
    276a:	9311      	str	r3, [sp, #68]	; 0x44
    276c:	e007      	b.n	277e <cbvprintf+0x402>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    276e:	f854 3b04 	ldr.w	r3, [r4], #4
    2772:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    2774:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    2778:	e002      	b.n	2780 <cbvprintf+0x404>
			} else if (length_mod == LENGTH_H) {
    277a:	2902      	cmp	r1, #2
    277c:	d011      	beq.n	27a2 <cbvprintf+0x426>
				value->sint = va_arg(ap, int);
    277e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2780:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2784:	f013 0603 	ands.w	r6, r3, #3
    2788:	d047      	beq.n	281a <cbvprintf+0x49e>
			OUTS(sp, fp);
    278a:	9b04      	ldr	r3, [sp, #16]
    278c:	9903      	ldr	r1, [sp, #12]
    278e:	463a      	mov	r2, r7
    2790:	4650      	mov	r0, sl
    2792:	f008 f8c0 	bl	a916 <outs>
    2796:	2800      	cmp	r0, #0
    2798:	f2c0 8147 	blt.w	2a2a <cbvprintf+0x6ae>
    279c:	4405      	add	r5, r0
			continue;
    279e:	9f04      	ldr	r7, [sp, #16]
    27a0:	e5f4      	b.n	238c <cbvprintf+0x10>
				value->sint = (short)value->sint;
    27a2:	b21a      	sxth	r2, r3
    27a4:	9210      	str	r2, [sp, #64]	; 0x40
    27a6:	f343 33c0 	sbfx	r3, r3, #15, #1
    27aa:	e7de      	b.n	276a <cbvprintf+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
    27ac:	2b02      	cmp	r3, #2
    27ae:	d124      	bne.n	27fa <cbvprintf+0x47e>
			switch (length_mod) {
    27b0:	1ecb      	subs	r3, r1, #3
    27b2:	2b04      	cmp	r3, #4
    27b4:	d804      	bhi.n	27c0 <cbvprintf+0x444>
    27b6:	e8df f003 	tbb	[pc, r3]
    27ba:	1018      	.short	0x1018
    27bc:	1810      	.short	0x1810
    27be:	18          	.byte	0x18
    27bf:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    27c0:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    27c2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    27c6:	f04f 0200 	mov.w	r2, #0
    27ca:	d014      	beq.n	27f6 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
    27cc:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    27ce:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    27d2:	d1d5      	bne.n	2780 <cbvprintf+0x404>
				value->uint = (unsigned short)value->uint;
    27d4:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    27d6:	9310      	str	r3, [sp, #64]	; 0x40
    27d8:	e7d2      	b.n	2780 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap,
    27da:	3407      	adds	r4, #7
    27dc:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    27e0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    27e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    27e8:	e7ca      	b.n	2780 <cbvprintf+0x404>
					(uint_value_type)va_arg(ap, size_t);
    27ea:	f854 3b04 	ldr.w	r3, [r4], #4
    27ee:	9310      	str	r3, [sp, #64]	; 0x40
    27f0:	2300      	movs	r3, #0
    27f2:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    27f4:	e7c4      	b.n	2780 <cbvprintf+0x404>
				value->uint = (unsigned char)value->uint;
    27f6:	b2db      	uxtb	r3, r3
    27f8:	e7bc      	b.n	2774 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_FP) {
    27fa:	2b04      	cmp	r3, #4
    27fc:	d108      	bne.n	2810 <cbvprintf+0x494>
					(sint_value_type)va_arg(ap, long long);
    27fe:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2800:	f024 0407 	bic.w	r4, r4, #7
    2804:	e9d4 2300 	ldrd	r2, r3, [r4]
    2808:	3408      	adds	r4, #8
    280a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    280e:	e7b7      	b.n	2780 <cbvprintf+0x404>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2810:	2b03      	cmp	r3, #3
    2812:	d1b5      	bne.n	2780 <cbvprintf+0x404>
			value->ptr = va_arg(ap, void *);
    2814:	f854 3b04 	ldr.w	r3, [r4], #4
    2818:	e7dd      	b.n	27d6 <cbvprintf+0x45a>
		switch (conv->specifier) {
    281a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    281e:	2878      	cmp	r0, #120	; 0x78
    2820:	d8bd      	bhi.n	279e <cbvprintf+0x422>
    2822:	2862      	cmp	r0, #98	; 0x62
    2824:	d81c      	bhi.n	2860 <cbvprintf+0x4e4>
    2826:	2825      	cmp	r0, #37	; 0x25
    2828:	f43f adb8 	beq.w	239c <cbvprintf+0x20>
    282c:	2858      	cmp	r0, #88	; 0x58
    282e:	d1b6      	bne.n	279e <cbvprintf+0x422>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2830:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2834:	9300      	str	r3, [sp, #0]
    2836:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    283a:	ab0a      	add	r3, sp, #40	; 0x28
    283c:	aa12      	add	r2, sp, #72	; 0x48
    283e:	f7ff fd51 	bl	22e4 <encode_uint>
			if (precision >= 0) {
    2842:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    2846:	4607      	mov	r7, r0
			if (precision >= 0) {
    2848:	f280 8098 	bge.w	297c <cbvprintf+0x600>
		if (bps == NULL) {
    284c:	2f00      	cmp	r7, #0
    284e:	d0a6      	beq.n	279e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    2850:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    2854:	eba8 0007 	sub.w	r0, r8, r7
		if (sign != 0) {
    2858:	2e00      	cmp	r6, #0
    285a:	d04e      	beq.n	28fa <cbvprintf+0x57e>
			nj_len += 1U;
    285c:	3001      	adds	r0, #1
    285e:	e04c      	b.n	28fa <cbvprintf+0x57e>
		switch (conv->specifier) {
    2860:	3863      	subs	r0, #99	; 0x63
    2862:	2815      	cmp	r0, #21
    2864:	d89b      	bhi.n	279e <cbvprintf+0x422>
    2866:	a201      	add	r2, pc, #4	; (adr r2, 286c <cbvprintf+0x4f0>)
    2868:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    286c:	000028eb 	.word	0x000028eb
    2870:	00002951 	.word	0x00002951
    2874:	0000279f 	.word	0x0000279f
    2878:	0000279f 	.word	0x0000279f
    287c:	0000279f 	.word	0x0000279f
    2880:	0000279f 	.word	0x0000279f
    2884:	00002951 	.word	0x00002951
    2888:	0000279f 	.word	0x0000279f
    288c:	0000279f 	.word	0x0000279f
    2890:	0000279f 	.word	0x0000279f
    2894:	0000279f 	.word	0x0000279f
    2898:	000029db 	.word	0x000029db
    289c:	00002977 	.word	0x00002977
    28a0:	0000299d 	.word	0x0000299d
    28a4:	0000279f 	.word	0x0000279f
    28a8:	0000279f 	.word	0x0000279f
    28ac:	000028c5 	.word	0x000028c5
    28b0:	0000279f 	.word	0x0000279f
    28b4:	00002977 	.word	0x00002977
    28b8:	0000279f 	.word	0x0000279f
    28bc:	0000279f 	.word	0x0000279f
    28c0:	00002977 	.word	0x00002977
			if (precision >= 0) {
    28c4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    28c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			if (precision >= 0) {
    28ca:	db0a      	blt.n	28e2 <cbvprintf+0x566>
				len = strnlen(bps, precision);
    28cc:	4659      	mov	r1, fp
    28ce:	4638      	mov	r0, r7
    28d0:	f008 fe95 	bl	b5fe <strnlen>
			bpe = bps + len;
    28d4:	eb07 0800 	add.w	r8, r7, r0
		if (bps == NULL) {
    28d8:	2f00      	cmp	r7, #0
    28da:	f43f af60 	beq.w	279e <cbvprintf+0x422>
		char sign = 0;
    28de:	2600      	movs	r6, #0
    28e0:	e00b      	b.n	28fa <cbvprintf+0x57e>
				len = strlen(bps);
    28e2:	4638      	mov	r0, r7
    28e4:	f7fe fa76 	bl	dd4 <strlen>
    28e8:	e7f4      	b.n	28d4 <cbvprintf+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    28ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    28ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    28f0:	2600      	movs	r6, #0
			bpe = buf + 1;
    28f2:	f10d 0829 	add.w	r8, sp, #41	; 0x29
			bps = buf;
    28f6:	af0a      	add	r7, sp, #40	; 0x28
		size_t nj_len = (bpe - bps);
    28f8:	2001      	movs	r0, #1
		if (conv->altform_0c) {
    28fa:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    28fe:	f013 0210 	ands.w	r2, r3, #16
    2902:	9205      	str	r2, [sp, #20]
    2904:	f000 8084 	beq.w	2a10 <cbvprintf+0x694>
			nj_len += 2U;
    2908:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    290a:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    290c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
			nj_len += conv->pad0_pre_exp;
    2910:	bf48      	it	mi
    2912:	9b14      	ldrmi	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2914:	4458      	add	r0, fp
			nj_len += conv->pad0_pre_exp;
    2916:	bf48      	it	mi
    2918:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    291a:	f1b9 0f00 	cmp.w	r9, #0
    291e:	f340 8091 	ble.w	2a44 <cbvprintf+0x6c8>
			if (!conv->flag_dash) {
    2922:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2926:	eba9 0900 	sub.w	r9, r9, r0
			if (!conv->flag_dash) {
    292a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    292e:	0750      	lsls	r0, r2, #29
    2930:	9306      	str	r3, [sp, #24]
    2932:	f100 8087 	bmi.w	2a44 <cbvprintf+0x6c8>
				if (conv->flag_zero) {
    2936:	0651      	lsls	r1, r2, #25
    2938:	d57a      	bpl.n	2a30 <cbvprintf+0x6b4>
					if (sign != 0) {
    293a:	b13e      	cbz	r6, 294c <cbvprintf+0x5d0>
						OUTC(sign);
    293c:	9903      	ldr	r1, [sp, #12]
    293e:	4630      	mov	r0, r6
    2940:	47d0      	blx	sl
    2942:	2800      	cmp	r0, #0
    2944:	db71      	blt.n	2a2a <cbvprintf+0x6ae>
    2946:	9b06      	ldr	r3, [sp, #24]
    2948:	3501      	adds	r5, #1
    294a:	461e      	mov	r6, r3
					pad = '0';
    294c:	2230      	movs	r2, #48	; 0x30
    294e:	e070      	b.n	2a32 <cbvprintf+0x6b6>
			if (conv->flag_plus) {
    2950:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    2952:	bf5c      	itt	pl
    2954:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    2958:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    295a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
				sign = '+';
    295e:	bf48      	it	mi
    2960:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    2962:	2b00      	cmp	r3, #0
    2964:	f6bf af64 	bge.w	2830 <cbvprintf+0x4b4>
				value->uint = (uint_value_type)-sint;
    2968:	4252      	negs	r2, r2
    296a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    296e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2972:	262d      	movs	r6, #45	; 0x2d
    2974:	e75c      	b.n	2830 <cbvprintf+0x4b4>
		switch (conv->specifier) {
    2976:	2600      	movs	r6, #0
    2978:	e75a      	b.n	2830 <cbvprintf+0x4b4>
		char sign = 0;
    297a:	2600      	movs	r6, #0
				conv->flag_zero = false;
    297c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2980:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    2984:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2986:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    298a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    298c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    2990:	f67f af5c 	bls.w	284c <cbvprintf+0x4d0>
					conv->pad0_value = precision - (int)len;
    2994:	ebab 0303 	sub.w	r3, fp, r3
    2998:	9313      	str	r3, [sp, #76]	; 0x4c
    299a:	e757      	b.n	284c <cbvprintf+0x4d0>
			if (value->ptr != NULL) {
    299c:	9810      	ldr	r0, [sp, #64]	; 0x40
    299e:	b380      	cbz	r0, 2a02 <cbvprintf+0x686>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    29a0:	f10d 083e 	add.w	r8, sp, #62	; 0x3e
    29a4:	ab0a      	add	r3, sp, #40	; 0x28
    29a6:	f8cd 8000 	str.w	r8, [sp]
    29aa:	aa12      	add	r2, sp, #72	; 0x48
    29ac:	2100      	movs	r1, #0
    29ae:	f7ff fc99 	bl	22e4 <encode_uint>
				conv->altform_0c = true;
    29b2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    29b6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    29ba:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    29be:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    29c2:	f1bb 0f00 	cmp.w	fp, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    29c6:	4607      	mov	r7, r0
				conv->altform_0c = true;
    29c8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    29cc:	dad5      	bge.n	297a <cbvprintf+0x5fe>
		if (bps == NULL) {
    29ce:	2800      	cmp	r0, #0
    29d0:	f43f aee5 	beq.w	279e <cbvprintf+0x422>
		size_t nj_len = (bpe - bps);
    29d4:	eba8 0000 	sub.w	r0, r8, r0
    29d8:	e781      	b.n	28de <cbvprintf+0x562>
				store_count(conv, value->ptr, count);
    29da:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    29dc:	2907      	cmp	r1, #7
    29de:	f63f aede 	bhi.w	279e <cbvprintf+0x422>
    29e2:	e8df f001 	tbb	[pc, r1]
    29e6:	040c      	.short	0x040c
    29e8:	08080c06 	.word	0x08080c06
    29ec:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    29ee:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    29f0:	e6d5      	b.n	279e <cbvprintf+0x422>
		*(short *)dp = (short)count;
    29f2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    29f4:	e6d3      	b.n	279e <cbvprintf+0x422>
		*(intmax_t *)dp = (intmax_t)count;
    29f6:	17ea      	asrs	r2, r5, #31
    29f8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    29fc:	e6cf      	b.n	279e <cbvprintf+0x422>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    29fe:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    2a00:	e6cd      	b.n	279e <cbvprintf+0x422>
			bpe = bps + 5;
    2a02:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 2ac0 <cbvprintf+0x744>
		char sign = 0;
    2a06:	4606      	mov	r6, r0
    2a08:	f1a8 0705 	sub.w	r7, r8, #5
		size_t nj_len = (bpe - bps);
    2a0c:	2005      	movs	r0, #5
    2a0e:	e774      	b.n	28fa <cbvprintf+0x57e>
		} else if (conv->altform_0) {
    2a10:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2a12:	bf48      	it	mi
    2a14:	3001      	addmi	r0, #1
    2a16:	e778      	b.n	290a <cbvprintf+0x58e>
    2a18:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2a1a:	4610      	mov	r0, r2
    2a1c:	9206      	str	r2, [sp, #24]
    2a1e:	9903      	ldr	r1, [sp, #12]
    2a20:	47d0      	blx	sl
    2a22:	2800      	cmp	r0, #0
    2a24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2a28:	da04      	bge.n	2a34 <cbvprintf+0x6b8>
#undef OUTS
#undef OUTC
}
    2a2a:	b017      	add	sp, #92	; 0x5c
    2a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2a30:	2220      	movs	r2, #32
					pad = '0';
    2a32:	464b      	mov	r3, r9
				while (width-- > 0) {
    2a34:	4619      	mov	r1, r3
    2a36:	2900      	cmp	r1, #0
    2a38:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2a3c:	dcec      	bgt.n	2a18 <cbvprintf+0x69c>
    2a3e:	444d      	add	r5, r9
    2a40:	1a6d      	subs	r5, r5, r1
    2a42:	4699      	mov	r9, r3
		if (sign != 0) {
    2a44:	b12e      	cbz	r6, 2a52 <cbvprintf+0x6d6>
			OUTC(sign);
    2a46:	9903      	ldr	r1, [sp, #12]
    2a48:	4630      	mov	r0, r6
    2a4a:	47d0      	blx	sl
    2a4c:	2800      	cmp	r0, #0
    2a4e:	dbec      	blt.n	2a2a <cbvprintf+0x6ae>
    2a50:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2a52:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2a56:	06da      	lsls	r2, r3, #27
    2a58:	d401      	bmi.n	2a5e <cbvprintf+0x6e2>
    2a5a:	071b      	lsls	r3, r3, #28
    2a5c:	d505      	bpl.n	2a6a <cbvprintf+0x6ee>
				OUTC('0');
    2a5e:	9903      	ldr	r1, [sp, #12]
    2a60:	2030      	movs	r0, #48	; 0x30
    2a62:	47d0      	blx	sl
    2a64:	2800      	cmp	r0, #0
    2a66:	dbe0      	blt.n	2a2a <cbvprintf+0x6ae>
    2a68:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2a6a:	9b05      	ldr	r3, [sp, #20]
    2a6c:	b133      	cbz	r3, 2a7c <cbvprintf+0x700>
				OUTC(conv->specifier);
    2a6e:	9903      	ldr	r1, [sp, #12]
    2a70:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2a74:	47d0      	blx	sl
    2a76:	2800      	cmp	r0, #0
    2a78:	dbd7      	blt.n	2a2a <cbvprintf+0x6ae>
    2a7a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2a7c:	44ab      	add	fp, r5
    2a7e:	e005      	b.n	2a8c <cbvprintf+0x710>
				OUTC('0');
    2a80:	9903      	ldr	r1, [sp, #12]
    2a82:	2030      	movs	r0, #48	; 0x30
    2a84:	47d0      	blx	sl
    2a86:	2800      	cmp	r0, #0
    2a88:	dbcf      	blt.n	2a2a <cbvprintf+0x6ae>
    2a8a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2a8c:	ebab 0305 	sub.w	r3, fp, r5
    2a90:	2b00      	cmp	r3, #0
    2a92:	dcf5      	bgt.n	2a80 <cbvprintf+0x704>
			OUTS(bps, bpe);
    2a94:	9903      	ldr	r1, [sp, #12]
    2a96:	4643      	mov	r3, r8
    2a98:	463a      	mov	r2, r7
    2a9a:	4650      	mov	r0, sl
    2a9c:	f007 ff3b 	bl	a916 <outs>
    2aa0:	2800      	cmp	r0, #0
    2aa2:	dbc2      	blt.n	2a2a <cbvprintf+0x6ae>
    2aa4:	4405      	add	r5, r0
		while (width > 0) {
    2aa6:	44a9      	add	r9, r5
    2aa8:	eba9 0305 	sub.w	r3, r9, r5
    2aac:	2b00      	cmp	r3, #0
    2aae:	f77f ae76 	ble.w	279e <cbvprintf+0x422>
			OUTC(' ');
    2ab2:	9903      	ldr	r1, [sp, #12]
    2ab4:	2020      	movs	r0, #32
    2ab6:	47d0      	blx	sl
    2ab8:	2800      	cmp	r0, #0
    2aba:	dbb6      	blt.n	2a2a <cbvprintf+0x6ae>
    2abc:	3501      	adds	r5, #1
			--width;
    2abe:	e7f3      	b.n	2aa8 <cbvprintf+0x72c>
    2ac0:	0000c51e 	.word	0x0000c51e

00002ac4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2ac4:	b508      	push	{r3, lr}
	__asm__ volatile(
    2ac6:	f04f 0220 	mov.w	r2, #32
    2aca:	f3ef 8311 	mrs	r3, BASEPRI
    2ace:	f382 8812 	msr	BASEPRI_MAX, r2
    2ad2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2ad6:	f001 fdf7 	bl	46c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    2ada:	4803      	ldr	r0, [pc, #12]	; (2ae8 <sys_reboot+0x24>)
    2adc:	f007 fdec 	bl	a6b8 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2ae0:	f000 fe62 	bl	37a8 <arch_cpu_idle>
    2ae4:	e7fc      	b.n	2ae0 <sys_reboot+0x1c>
    2ae6:	bf00      	nop
    2ae8:	0000c51f 	.word	0x0000c51f

00002aec <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aee:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2af0:	460c      	mov	r4, r1
    2af2:	b929      	cbnz	r1, 2b00 <msg_process+0x14>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2af4:	4d0e      	ldr	r5, [pc, #56]	; (2b30 <msg_process+0x44>)
    2af6:	4b0f      	ldr	r3, [pc, #60]	; (2b34 <msg_process+0x48>)
    2af8:	1b5b      	subs	r3, r3, r5
    2afa:	111f      	asrs	r7, r3, #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2afc:	42bc      	cmp	r4, r7
    2afe:	db00      	blt.n	2b02 <msg_process+0x16>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    2b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2b02:	686b      	ldr	r3, [r5, #4]
			if (log_backend_is_active(backend) &&
    2b04:	795b      	ldrb	r3, [r3, #5]
    2b06:	b17b      	cbz	r3, 2b28 <msg_process+0x3c>
	__ASSERT_NO_MSG(msg != NULL);
    2b08:	b94e      	cbnz	r6, 2b1e <msg_process+0x32>
    2b0a:	490b      	ldr	r1, [pc, #44]	; (2b38 <msg_process+0x4c>)
    2b0c:	480b      	ldr	r0, [pc, #44]	; (2b3c <msg_process+0x50>)
    2b0e:	4a0c      	ldr	r2, [pc, #48]	; (2b40 <msg_process+0x54>)
    2b10:	2386      	movs	r3, #134	; 0x86
    2b12:	f007 ff1e 	bl	a952 <assert_print>
    2b16:	480a      	ldr	r0, [pc, #40]	; (2b40 <msg_process+0x54>)
    2b18:	2186      	movs	r1, #134	; 0x86
    2b1a:	f007 ff13 	bl	a944 <assert_post_action>
	backend->api->process(backend, msg);
    2b1e:	682b      	ldr	r3, [r5, #0]
    2b20:	4631      	mov	r1, r6
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	4628      	mov	r0, r5
    2b26:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2b28:	3401      	adds	r4, #1
    2b2a:	3510      	adds	r5, #16
    2b2c:	e7e6      	b.n	2afc <msg_process+0x10>
    2b2e:	bf00      	nop
    2b30:	0000bc40 	.word	0x0000bc40
    2b34:	0000bc60 	.word	0x0000bc60
    2b38:	0000c580 	.word	0x0000c580
    2b3c:	0000c18a 	.word	0x0000c18a
    2b40:	0000c548 	.word	0x0000c548

00002b44 <log_format_func_t_get>:
}
    2b44:	4b01      	ldr	r3, [pc, #4]	; (2b4c <log_format_func_t_get+0x8>)
    2b46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2b4a:	4770      	bx	lr
    2b4c:	0000bd00 	.word	0x0000bd00

00002b50 <log_core_init>:
	panic_mode = false;
    2b50:	4a05      	ldr	r2, [pc, #20]	; (2b68 <log_core_init+0x18>)
    2b52:	2300      	movs	r3, #0
    2b54:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2b56:	4a05      	ldr	r2, [pc, #20]	; (2b6c <log_core_init+0x1c>)
    2b58:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    2b5a:	4b05      	ldr	r3, [pc, #20]	; (2b70 <log_core_init+0x20>)
    2b5c:	4a05      	ldr	r2, [pc, #20]	; (2b74 <log_core_init+0x24>)
    2b5e:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2b60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2b64:	f000 ba96 	b.w	3094 <log_output_timestamp_freq_set>
    2b68:	20005131 	.word	0x20005131
    2b6c:	20004804 	.word	0x20004804
    2b70:	20000004 	.word	0x20000004
    2b74:	0000a96f 	.word	0x0000a96f

00002b78 <log_init>:
{
    2b78:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    2b7a:	4b19      	ldr	r3, [pc, #100]	; (2be0 <log_init+0x68>)
    2b7c:	4c19      	ldr	r4, [pc, #100]	; (2be4 <log_init+0x6c>)
    2b7e:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2b80:	2c90      	cmp	r4, #144	; 0x90
    2b82:	d90b      	bls.n	2b9c <log_init+0x24>
    2b84:	4918      	ldr	r1, [pc, #96]	; (2be8 <log_init+0x70>)
    2b86:	4819      	ldr	r0, [pc, #100]	; (2bec <log_init+0x74>)
    2b88:	4a19      	ldr	r2, [pc, #100]	; (2bf0 <log_init+0x78>)
    2b8a:	f240 2373 	movw	r3, #627	; 0x273
    2b8e:	f007 fee0 	bl	a952 <assert_print>
    2b92:	4817      	ldr	r0, [pc, #92]	; (2bf0 <log_init+0x78>)
    2b94:	f240 2173 	movw	r1, #627	; 0x273
    2b98:	f007 fed4 	bl	a944 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2b9c:	f3bf 8f5b 	dmb	ish
    2ba0:	4b14      	ldr	r3, [pc, #80]	; (2bf4 <log_init+0x7c>)
    2ba2:	e853 6f00 	ldrex	r6, [r3]
    2ba6:	1c72      	adds	r2, r6, #1
    2ba8:	e843 2100 	strex	r1, r2, [r3]
    2bac:	2900      	cmp	r1, #0
    2bae:	d1f8      	bne.n	2ba2 <log_init+0x2a>
    2bb0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2bb4:	b91e      	cbnz	r6, 2bbe <log_init+0x46>
    2bb6:	1125      	asrs	r5, r4, #4
    2bb8:	4c09      	ldr	r4, [pc, #36]	; (2be0 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    2bba:	42ae      	cmp	r6, r5
    2bbc:	db00      	blt.n	2bc0 <log_init+0x48>
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2bc0:	7b23      	ldrb	r3, [r4, #12]
    2bc2:	b153      	cbz	r3, 2bda <log_init+0x62>
			if (backend->api->init != NULL) {
    2bc4:	6823      	ldr	r3, [r4, #0]
    2bc6:	699b      	ldr	r3, [r3, #24]
    2bc8:	b10b      	cbz	r3, 2bce <log_init+0x56>
				backend->api->init(backend);
    2bca:	4620      	mov	r0, r4
    2bcc:	4798      	blx	r3
			log_backend_enable(backend,
    2bce:	6863      	ldr	r3, [r4, #4]
    2bd0:	2204      	movs	r2, #4
    2bd2:	6819      	ldr	r1, [r3, #0]
    2bd4:	4620      	mov	r0, r4
    2bd6:	f000 f86f 	bl	2cb8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2bda:	3601      	adds	r6, #1
    2bdc:	3410      	adds	r4, #16
    2bde:	e7ec      	b.n	2bba <log_init+0x42>
    2be0:	0000bc40 	.word	0x0000bc40
    2be4:	0000bc60 	.word	0x0000bc60
    2be8:	0000c5d8 	.word	0x0000c5d8
    2bec:	0000c18a 	.word	0x0000c18a
    2bf0:	0000c593 	.word	0x0000c593
    2bf4:	2000480c 	.word	0x2000480c

00002bf8 <z_impl_log_panic>:
{
    2bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2bfa:	4f0c      	ldr	r7, [pc, #48]	; (2c2c <z_impl_log_panic+0x34>)
    2bfc:	783d      	ldrb	r5, [r7, #0]
    2bfe:	b94d      	cbnz	r5, 2c14 <z_impl_log_panic+0x1c>
    2c00:	4c0b      	ldr	r4, [pc, #44]	; (2c30 <z_impl_log_panic+0x38>)
    2c02:	4e0c      	ldr	r6, [pc, #48]	; (2c34 <z_impl_log_panic+0x3c>)
	log_init();
    2c04:	f7ff ffb8 	bl	2b78 <log_init>
    2c08:	1b36      	subs	r6, r6, r4
    2c0a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2c0c:	42b5      	cmp	r5, r6
    2c0e:	db02      	blt.n	2c16 <z_impl_log_panic+0x1e>
	panic_mode = true;
    2c10:	2301      	movs	r3, #1
    2c12:	703b      	strb	r3, [r7, #0]
}
    2c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2c16:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2c18:	795b      	ldrb	r3, [r3, #5]
    2c1a:	b11b      	cbz	r3, 2c24 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
    2c1c:	6823      	ldr	r3, [r4, #0]
    2c1e:	4620      	mov	r0, r4
    2c20:	695b      	ldr	r3, [r3, #20]
    2c22:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2c24:	3501      	adds	r5, #1
    2c26:	3410      	adds	r4, #16
    2c28:	e7f0      	b.n	2c0c <z_impl_log_panic+0x14>
    2c2a:	bf00      	nop
    2c2c:	20005131 	.word	0x20005131
    2c30:	0000bc40 	.word	0x0000bc40
    2c34:	0000bc60 	.word	0x0000bc60

00002c38 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    2c38:	4b01      	ldr	r3, [pc, #4]	; (2c40 <z_log_notify_backend_enabled+0x8>)
    2c3a:	2201      	movs	r2, #1
    2c3c:	701a      	strb	r2, [r3, #0]
}
    2c3e:	4770      	bx	lr
    2c40:	20005130 	.word	0x20005130

00002c44 <z_log_dropped>:
    2c44:	4b0c      	ldr	r3, [pc, #48]	; (2c78 <z_log_dropped+0x34>)
    2c46:	f3bf 8f5b 	dmb	ish
    2c4a:	e853 1f00 	ldrex	r1, [r3]
    2c4e:	3101      	adds	r1, #1
    2c50:	e843 1200 	strex	r2, r1, [r3]
    2c54:	2a00      	cmp	r2, #0
    2c56:	d1f8      	bne.n	2c4a <z_log_dropped+0x6>
    2c58:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    2c5c:	b158      	cbz	r0, 2c76 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2c5e:	f3bf 8f5b 	dmb	ish
    2c62:	4b06      	ldr	r3, [pc, #24]	; (2c7c <z_log_dropped+0x38>)
    2c64:	e853 1f00 	ldrex	r1, [r3]
    2c68:	3901      	subs	r1, #1
    2c6a:	e843 1200 	strex	r2, r1, [r3]
    2c6e:	2a00      	cmp	r2, #0
    2c70:	d1f8      	bne.n	2c64 <z_log_dropped+0x20>
    2c72:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    2c76:	4770      	bx	lr
    2c78:	20004804 	.word	0x20004804
    2c7c:	20004808 	.word	0x20004808

00002c80 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    2c80:	4b05      	ldr	r3, [pc, #20]	; (2c98 <z_log_msg2_commit+0x18>)
{
    2c82:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2c84:	681b      	ldr	r3, [r3, #0]
{
    2c86:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2c88:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2c8a:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    2c8c:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    2c8e:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    2c94:	f7ff bf2a 	b.w	2aec <msg_process>
    2c98:	20000004 	.word	0x20000004

00002c9c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2c9c:	4a04      	ldr	r2, [pc, #16]	; (2cb0 <log_source_name_get+0x14>)
    2c9e:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <log_source_name_get+0x18>)
    2ca0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2ca2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2ca6:	bf34      	ite	cc
    2ca8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2cac:	2000      	movcs	r0, #0
}
    2cae:	4770      	bx	lr
    2cb0:	0000bbf8 	.word	0x0000bbf8
    2cb4:	0000bc40 	.word	0x0000bc40

00002cb8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2cb8:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2cba:	4c10      	ldr	r4, [pc, #64]	; (2cfc <log_backend_enable+0x44>)

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2cbc:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    2cbe:	1b04      	subs	r4, r0, r4
    2cc0:	1124      	asrs	r4, r4, #4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2cc2:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    2cc4:	3401      	adds	r4, #1
{
    2cc6:	4605      	mov	r5, r0
    2cc8:	460e      	mov	r6, r1
	}

	log_backend_id_set(backend, id);
    2cca:	b2e4      	uxtb	r4, r4
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2ccc:	b963      	cbnz	r3, 2ce8 <log_backend_enable+0x30>
    2cce:	490c      	ldr	r1, [pc, #48]	; (2d00 <log_backend_enable+0x48>)
    2cd0:	4a0c      	ldr	r2, [pc, #48]	; (2d04 <log_backend_enable+0x4c>)
    2cd2:	480d      	ldr	r0, [pc, #52]	; (2d08 <log_backend_enable+0x50>)
    2cd4:	23bb      	movs	r3, #187	; 0xbb
    2cd6:	f007 fe3c 	bl	a952 <assert_print>
    2cda:	480c      	ldr	r0, [pc, #48]	; (2d0c <log_backend_enable+0x54>)
    2cdc:	f007 fe39 	bl	a952 <assert_print>
    2ce0:	4808      	ldr	r0, [pc, #32]	; (2d04 <log_backend_enable+0x4c>)
    2ce2:	21bb      	movs	r1, #187	; 0xbb
    2ce4:	f007 fe2e 	bl	a944 <assert_post_action>
	backend->cb->id = id;
    2ce8:	686b      	ldr	r3, [r5, #4]
    2cea:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    2cec:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
    2cee:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    2cf0:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    2cf2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    2cf8:	f7ff bf9e 	b.w	2c38 <z_log_notify_backend_enabled>
    2cfc:	0000bc40 	.word	0x0000bc40
    2d00:	0000c658 	.word	0x0000c658
    2d04:	0000c600 	.word	0x0000c600
    2d08:	0000c18a 	.word	0x0000c18a
    2d0c:	0000c66e 	.word	0x0000c66e

00002d10 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2d10:	b40e      	push	{r1, r2, r3}
    2d12:	b503      	push	{r0, r1, lr}
    2d14:	ab03      	add	r3, sp, #12
    2d16:	4601      	mov	r1, r0
    2d18:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2d1c:	4804      	ldr	r0, [pc, #16]	; (2d30 <print_formatted+0x20>)
	va_start(args, fmt);
    2d1e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2d20:	f7ff fb2c 	bl	237c <cbvprintf>
	va_end(args);

	return length;
}
    2d24:	b002      	add	sp, #8
    2d26:	f85d eb04 	ldr.w	lr, [sp], #4
    2d2a:	b003      	add	sp, #12
    2d2c:	4770      	bx	lr
    2d2e:	bf00      	nop
    2d30:	0000a9a1 	.word	0x0000a9a1

00002d34 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d38:	b087      	sub	sp, #28
    2d3a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2d3c:	f001 0301 	and.w	r3, r1, #1
{
    2d40:	9205      	str	r2, [sp, #20]
    2d42:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    2d46:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2d4a:	9304      	str	r3, [sp, #16]
{
    2d4c:	4607      	mov	r7, r0
    2d4e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2d50:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2d54:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    2d58:	f007 fe20 	bl	a99c <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2d5c:	4602      	mov	r2, r0
    2d5e:	2800      	cmp	r0, #0
    2d60:	d040      	beq.n	2de4 <prefix_print+0xb0>
		length += print_formatted(output, "%s ", tag);
    2d62:	4937      	ldr	r1, [pc, #220]	; (2e40 <prefix_print+0x10c>)
    2d64:	4638      	mov	r0, r7
    2d66:	f7ff ffd3 	bl	2d10 <print_formatted>
    2d6a:	4605      	mov	r5, r0
	}

	if (stamp) {
    2d6c:	f1bb 0f00 	cmp.w	fp, #0
    2d70:	d008      	beq.n	2d84 <prefix_print+0x50>
	if (!format) {
    2d72:	f018 0f44 	tst.w	r8, #68	; 0x44
    2d76:	d137      	bne.n	2de8 <prefix_print+0xb4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2d78:	4932      	ldr	r1, [pc, #200]	; (2e44 <prefix_print+0x110>)
    2d7a:	4622      	mov	r2, r4
    2d7c:	4638      	mov	r0, r7
    2d7e:	f7ff ffc7 	bl	2d10 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2d82:	4405      	add	r5, r0
	if (color) {
    2d84:	9b04      	ldr	r3, [sp, #16]
    2d86:	b153      	cbz	r3, 2d9e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    2d88:	4b2f      	ldr	r3, [pc, #188]	; (2e48 <prefix_print+0x114>)
		print_formatted(output, "%s", log_color);
    2d8a:	4930      	ldr	r1, [pc, #192]	; (2e4c <prefix_print+0x118>)
		const char *log_color = start && (colors[level] != NULL) ?
    2d8c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    2d90:	4b2f      	ldr	r3, [pc, #188]	; (2e50 <prefix_print+0x11c>)
    2d92:	4638      	mov	r0, r7
    2d94:	2a00      	cmp	r2, #0
    2d96:	bf08      	it	eq
    2d98:	461a      	moveq	r2, r3
    2d9a:	f7ff ffb9 	bl	2d10 <print_formatted>
	if (level_on) {
    2d9e:	b13e      	cbz	r6, 2db0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    2da0:	4b2c      	ldr	r3, [pc, #176]	; (2e54 <prefix_print+0x120>)
    2da2:	492d      	ldr	r1, [pc, #180]	; (2e58 <prefix_print+0x124>)
    2da4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    2da8:	4638      	mov	r0, r7
    2daa:	f7ff ffb1 	bl	2d10 <print_formatted>
    2dae:	4606      	mov	r6, r0
	if (source_id >= 0) {
    2db0:	f1ba 0f00 	cmp.w	sl, #0
    2db4:	db12      	blt.n	2ddc <prefix_print+0xa8>
		total += print_formatted(output,
    2db6:	9b05      	ldr	r3, [sp, #20]
    2db8:	4c28      	ldr	r4, [pc, #160]	; (2e5c <prefix_print+0x128>)
    2dba:	b123      	cbz	r3, 2dc6 <prefix_print+0x92>
    2dbc:	4b28      	ldr	r3, [pc, #160]	; (2e60 <prefix_print+0x12c>)
    2dbe:	f1b9 0f04 	cmp.w	r9, #4
    2dc2:	bf08      	it	eq
    2dc4:	461c      	moveq	r4, r3
    2dc6:	4651      	mov	r1, sl
    2dc8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2dcc:	f7ff ff66 	bl	2c9c <log_source_name_get>
    2dd0:	4621      	mov	r1, r4
    2dd2:	4602      	mov	r2, r0
    2dd4:	4638      	mov	r0, r7
    2dd6:	f7ff ff9b 	bl	2d10 <print_formatted>
    2dda:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2ddc:	1970      	adds	r0, r6, r5
    2dde:	b007      	add	sp, #28
    2de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2de4:	4605      	mov	r5, r0
    2de6:	e7c1      	b.n	2d6c <prefix_print+0x38>
	} else if (freq != 0U) {
    2de8:	4b1e      	ldr	r3, [pc, #120]	; (2e64 <prefix_print+0x130>)
    2dea:	6818      	ldr	r0, [r3, #0]
    2dec:	2800      	cmp	r0, #0
    2dee:	d0c8      	beq.n	2d82 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    2df0:	4b1d      	ldr	r3, [pc, #116]	; (2e68 <prefix_print+0x134>)
		ms = (remainder * 1000U) / freq;
    2df2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    2dfc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2e00:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    2e04:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    2e08:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    2e0c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    2e10:	fbb3 f2f1 	udiv	r2, r3, r1
    2e14:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2e18:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    2e1c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2e20:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    2e24:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2e28:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    2e2c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2e2e:	fbb4 f4f0 	udiv	r4, r4, r0
				length = print_formatted(output,
    2e32:	490e      	ldr	r1, [pc, #56]	; (2e6c <prefix_print+0x138>)
    2e34:	e9cd e401 	strd	lr, r4, [sp, #4]
    2e38:	4638      	mov	r0, r7
    2e3a:	f7ff ff69 	bl	2d10 <print_formatted>
    2e3e:	e7a0      	b.n	2d82 <prefix_print+0x4e>
    2e40:	0000c69e 	.word	0x0000c69e
    2e44:	0000c6a2 	.word	0x0000c6a2
    2e48:	0000bd0c 	.word	0x0000bd0c
    2e4c:	0000c6c7 	.word	0x0000c6c7
    2e50:	0000c690 	.word	0x0000c690
    2e54:	0000bd20 	.word	0x0000bd20
    2e58:	0000c6ca 	.word	0x0000c6ca
    2e5c:	0000c699 	.word	0x0000c699
    2e60:	0000c695 	.word	0x0000c695
    2e64:	20004814 	.word	0x20004814
    2e68:	20004810 	.word	0x20004810
    2e6c:	0000c6ab 	.word	0x0000c6ab

00002e70 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2e70:	06ca      	lsls	r2, r1, #27
    2e72:	d405      	bmi.n	2e80 <newline_print+0x10>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2e74:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2e76:	bf4c      	ite	mi
    2e78:	4902      	ldrmi	r1, [pc, #8]	; (2e84 <newline_print+0x14>)
		print_formatted(ctx, "\r\n");
    2e7a:	4903      	ldrpl	r1, [pc, #12]	; (2e88 <newline_print+0x18>)
    2e7c:	f7ff bf48 	b.w	2d10 <print_formatted>
}
    2e80:	4770      	bx	lr
    2e82:	bf00      	nop
    2e84:	0000d802 	.word	0x0000d802
    2e88:	0000c6d0 	.word	0x0000c6d0

00002e8c <hexdump_line_print>:
{
    2e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e90:	460f      	mov	r7, r1
	newline_print(output, flags);
    2e92:	9908      	ldr	r1, [sp, #32]
		print_formatted(output, " ");
    2e94:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 2f50 <hexdump_line_print+0xc4>
{
    2e98:	4604      	mov	r4, r0
    2e9a:	4616      	mov	r6, r2
    2e9c:	461d      	mov	r5, r3
	newline_print(output, flags);
    2e9e:	f7ff ffe7 	bl	2e70 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2ea2:	f04f 0800 	mov.w	r8, #0
    2ea6:	45a8      	cmp	r8, r5
    2ea8:	db28      	blt.n	2efc <hexdump_line_print+0x70>
		if (i < length) {
    2eaa:	b376      	cbz	r6, 2f0a <hexdump_line_print+0x7e>
			print_formatted(output, "%02x ", data[i]);
    2eac:	783a      	ldrb	r2, [r7, #0]
    2eae:	4929      	ldr	r1, [pc, #164]	; (2f54 <hexdump_line_print+0xc8>)
    2eb0:	4620      	mov	r0, r4
    2eb2:	f7ff ff2d 	bl	2d10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2eb6:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
    2eb8:	076a      	lsls	r2, r5, #29
    2eba:	d103      	bne.n	2ec4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    2ebc:	4924      	ldr	r1, [pc, #144]	; (2f50 <hexdump_line_print+0xc4>)
    2ebe:	4620      	mov	r0, r4
    2ec0:	f7ff ff26 	bl	2d10 <print_formatted>
		if (i < length) {
    2ec4:	42b5      	cmp	r5, r6
    2ec6:	d225      	bcs.n	2f14 <hexdump_line_print+0x88>
			print_formatted(output, "%02x ", data[i]);
    2ec8:	5d7a      	ldrb	r2, [r7, r5]
    2eca:	4922      	ldr	r1, [pc, #136]	; (2f54 <hexdump_line_print+0xc8>)
    2ecc:	4620      	mov	r0, r4
    2ece:	f7ff ff1f 	bl	2d10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2ed2:	3501      	adds	r5, #1
    2ed4:	2d10      	cmp	r5, #16
    2ed6:	d1ef      	bne.n	2eb8 <hexdump_line_print+0x2c>
	print_formatted(output, "|");
    2ed8:	491f      	ldr	r1, [pc, #124]	; (2f58 <hexdump_line_print+0xcc>)
    2eda:	4620      	mov	r0, r4
    2edc:	f7ff ff18 	bl	2d10 <print_formatted>
		if (i < length) {
    2ee0:	b9ee      	cbnz	r6, 2f1e <hexdump_line_print+0x92>
			print_formatted(output, " ");
    2ee2:	491b      	ldr	r1, [pc, #108]	; (2f50 <hexdump_line_print+0xc4>)
    2ee4:	4620      	mov	r0, r4
    2ee6:	f7ff ff13 	bl	2d10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2eea:	2501      	movs	r5, #1
		if (i < length) {
    2eec:	42b5      	cmp	r5, r6
    2eee:	462b      	mov	r3, r5
    2ef0:	d317      	bcc.n	2f22 <hexdump_line_print+0x96>
			print_formatted(output, " ");
    2ef2:	4917      	ldr	r1, [pc, #92]	; (2f50 <hexdump_line_print+0xc4>)
    2ef4:	4620      	mov	r0, r4
    2ef6:	f7ff ff0b 	bl	2d10 <print_formatted>
    2efa:	e01d      	b.n	2f38 <hexdump_line_print+0xac>
		print_formatted(output, " ");
    2efc:	4649      	mov	r1, r9
    2efe:	4620      	mov	r0, r4
    2f00:	f7ff ff06 	bl	2d10 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2f04:	f108 0801 	add.w	r8, r8, #1
    2f08:	e7cd      	b.n	2ea6 <hexdump_line_print+0x1a>
			print_formatted(output, "   ");
    2f0a:	4914      	ldr	r1, [pc, #80]	; (2f5c <hexdump_line_print+0xd0>)
    2f0c:	4620      	mov	r0, r4
    2f0e:	f7ff feff 	bl	2d10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2f12:	2501      	movs	r5, #1
			print_formatted(output, "   ");
    2f14:	4911      	ldr	r1, [pc, #68]	; (2f5c <hexdump_line_print+0xd0>)
    2f16:	4620      	mov	r0, r4
    2f18:	f7ff fefa 	bl	2d10 <print_formatted>
    2f1c:	e7d9      	b.n	2ed2 <hexdump_line_print+0x46>
		if (i < length) {
    2f1e:	2500      	movs	r5, #0
    2f20:	462b      	mov	r3, r5
			char c = (char)data[i];
    2f22:	5cfa      	ldrb	r2, [r7, r3]
			      isprint((int)c) ? c : '.');
    2f24:	4b0e      	ldr	r3, [pc, #56]	; (2f60 <hexdump_line_print+0xd4>)
			print_formatted(output, "%c",
    2f26:	490f      	ldr	r1, [pc, #60]	; (2f64 <hexdump_line_print+0xd8>)
    2f28:	5c9b      	ldrb	r3, [r3, r2]
    2f2a:	f013 0f97 	tst.w	r3, #151	; 0x97
    2f2e:	bf08      	it	eq
    2f30:	222e      	moveq	r2, #46	; 0x2e
    2f32:	4620      	mov	r0, r4
    2f34:	f7ff feec 	bl	2d10 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2f38:	3501      	adds	r5, #1
    2f3a:	2d10      	cmp	r5, #16
    2f3c:	d006      	beq.n	2f4c <hexdump_line_print+0xc0>
		if (i > 0 && !(i % 8)) {
    2f3e:	076b      	lsls	r3, r5, #29
    2f40:	d1d4      	bne.n	2eec <hexdump_line_print+0x60>
			print_formatted(output, " ");
    2f42:	4903      	ldr	r1, [pc, #12]	; (2f50 <hexdump_line_print+0xc4>)
    2f44:	4620      	mov	r0, r4
    2f46:	f7ff fee3 	bl	2d10 <print_formatted>
    2f4a:	e7cf      	b.n	2eec <hexdump_line_print+0x60>
}
    2f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2f50:	0000c6db 	.word	0x0000c6db
    2f54:	0000c6d3 	.word	0x0000c6d3
    2f58:	0000c6dd 	.word	0x0000c6dd
    2f5c:	0000c6d9 	.word	0x0000c6d9
    2f60:	0000db96 	.word	0x0000db96
    2f64:	0000c6df 	.word	0x0000c6df

00002f68 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    2f68:	b538      	push	{r3, r4, r5, lr}
	if (color) {
    2f6a:	07cb      	lsls	r3, r1, #31
{
    2f6c:	4605      	mov	r5, r0
    2f6e:	460c      	mov	r4, r1
	if (color) {
    2f70:	d503      	bpl.n	2f7a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2f72:	4a05      	ldr	r2, [pc, #20]	; (2f88 <postfix_print+0x20>)
    2f74:	4905      	ldr	r1, [pc, #20]	; (2f8c <postfix_print+0x24>)
    2f76:	f7ff fecb 	bl	2d10 <print_formatted>
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
    2f7a:	4621      	mov	r1, r4
    2f7c:	4628      	mov	r0, r5
}
    2f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	newline_print(output, flags);
    2f82:	f7ff bf75 	b.w	2e70 <newline_print>
    2f86:	bf00      	nop
    2f88:	0000c690 	.word	0x0000c690
    2f8c:	0000c6c7 	.word	0x0000c6c7

00002f90 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    2f94:	460e      	mov	r6, r1
    2f96:	4690      	mov	r8, r2
    2f98:	f836 2b10 	ldrh.w	r2, [r6], #16
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    2f9c:	688b      	ldr	r3, [r1, #8]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2f9e:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
{
    2fa2:	4607      	mov	r7, r0
    2fa4:	460d      	mov	r5, r1
	return msg->hdr.desc.level;
    2fa6:	f3c2 1982 	ubfx	r9, r2, #6, #3
	if (!raw_string) {
    2faa:	d023      	beq.n	2ff4 <log_output_msg2_process+0x64>
	return msg->hdr.desc.domain;
    2fac:	780a      	ldrb	r2, [r1, #0]
	return msg->hdr.source;
    2fae:	6848      	ldr	r0, [r1, #4]
	return msg->hdr.desc.domain;
    2fb0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    2fb4:	b1d8      	cbz	r0, 2fee <log_output_msg2_process+0x5e>
    2fb6:	4930      	ldr	r1, [pc, #192]	; (3078 <log_output_msg2_process+0xe8>)
    2fb8:	1a40      	subs	r0, r0, r1
    2fba:	f340 00cf 	sbfx	r0, r0, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2fbe:	e9cd 2001 	strd	r2, r0, [sp, #4]
    2fc2:	f8cd 9000 	str.w	r9, [sp]
    2fc6:	2200      	movs	r2, #0
    2fc8:	4641      	mov	r1, r8
    2fca:	4638      	mov	r0, r7
    2fcc:	f7ff feb2 	bl	2d34 <prefix_print>
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2fd0:	682b      	ldr	r3, [r5, #0]
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2fd2:	f3c3 2349 	ubfx	r3, r3, #9, #10
		prefix_offset = prefix_print(output, flags, 0, timestamp,
    2fd6:	4682      	mov	sl, r0
	if (len) {
    2fd8:	b9b3      	cbnz	r3, 3008 <log_output_msg2_process+0x78>
	*len = msg->hdr.desc.data_len;
    2fda:	886c      	ldrh	r4, [r5, #2]
    2fdc:	f3c4 04cb 	ubfx	r4, r4, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2fe0:	b9f4      	cbnz	r4, 3020 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
		postfix_print(output, flags, level);
    2fe2:	464a      	mov	r2, r9
    2fe4:	4641      	mov	r1, r8
    2fe6:	4638      	mov	r0, r7
    2fe8:	f7ff ffbe 	bl	2f68 <postfix_print>
    2fec:	e02e      	b.n	304c <log_output_msg2_process+0xbc>
		int16_t source_id = source ?
    2fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ff2:	e7e4      	b.n	2fbe <log_output_msg2_process+0x2e>
	*len = msg->hdr.desc.package_len;
    2ff4:	680b      	ldr	r3, [r1, #0]
	if (len) {
    2ff6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    2ffa:	bb6b      	cbnz	r3, 3058 <log_output_msg2_process+0xc8>
	*len = msg->hdr.desc.data_len;
    2ffc:	884c      	ldrh	r4, [r1, #2]
    2ffe:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    3002:	b31c      	cbz	r4, 304c <log_output_msg2_process+0xbc>
		prefix_offset = 0;
    3004:	46ca      	mov	sl, r9
    3006:	e00b      	b.n	3020 <log_output_msg2_process+0x90>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3008:	481c      	ldr	r0, [pc, #112]	; (307c <log_output_msg2_process+0xec>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    300a:	491d      	ldr	r1, [pc, #116]	; (3080 <log_output_msg2_process+0xf0>)
    300c:	4633      	mov	r3, r6
    300e:	463a      	mov	r2, r7
    3010:	f007 fb10 	bl	a634 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
    3014:	2800      	cmp	r0, #0
    3016:	db22      	blt.n	305e <log_output_msg2_process+0xce>
    3018:	886c      	ldrh	r4, [r5, #2]
    301a:	f3c4 04cb 	ubfx	r4, r4, #3, #12
	if (len) {
    301e:	b194      	cbz	r4, 3046 <log_output_msg2_process+0xb6>
	return msg->data + msg->hdr.desc.package_len;
    3020:	682b      	ldr	r3, [r5, #0]
    3022:	f3c3 2349 	ubfx	r3, r3, #9, #10
    3026:	441e      	add	r6, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    3028:	2c10      	cmp	r4, #16
    302a:	4625      	mov	r5, r4
    302c:	bf28      	it	cs
    302e:	2510      	movcs	r5, #16
		hexdump_line_print(output, data, length,
    3030:	4631      	mov	r1, r6
    3032:	f8cd 8000 	str.w	r8, [sp]
    3036:	4653      	mov	r3, sl
    3038:	462a      	mov	r2, r5
    303a:	4638      	mov	r0, r7
    303c:	f7ff ff26 	bl	2e8c <hexdump_line_print>
	} while (len);
    3040:	1b64      	subs	r4, r4, r5
		data += length;
    3042:	442e      	add	r6, r5
	} while (len);
    3044:	d1f0      	bne.n	3028 <log_output_msg2_process+0x98>
	if (!raw_string) {
    3046:	f1b9 0f00 	cmp.w	r9, #0
    304a:	d1ca      	bne.n	2fe2 <log_output_msg2_process+0x52>
	}

	log_output_flush(output);
    304c:	4638      	mov	r0, r7
}
    304e:	b004      	add	sp, #16
    3050:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    3054:	f007 bccc 	b.w	a9f0 <log_output_flush>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3058:	480a      	ldr	r0, [pc, #40]	; (3084 <log_output_msg2_process+0xf4>)
		prefix_offset = 0;
    305a:	46ca      	mov	sl, r9
    305c:	e7d5      	b.n	300a <log_output_msg2_process+0x7a>
		__ASSERT_NO_MSG(err >= 0);
    305e:	4a0a      	ldr	r2, [pc, #40]	; (3088 <log_output_msg2_process+0xf8>)
    3060:	490a      	ldr	r1, [pc, #40]	; (308c <log_output_msg2_process+0xfc>)
    3062:	480b      	ldr	r0, [pc, #44]	; (3090 <log_output_msg2_process+0x100>)
    3064:	f240 23b7 	movw	r3, #695	; 0x2b7
    3068:	f007 fc73 	bl	a952 <assert_print>
    306c:	4806      	ldr	r0, [pc, #24]	; (3088 <log_output_msg2_process+0xf8>)
    306e:	f240 21b7 	movw	r1, #695	; 0x2b7
    3072:	f007 fc67 	bl	a944 <assert_post_action>
    3076:	e7cf      	b.n	3018 <log_output_msg2_process+0x88>
    3078:	0000bbf8 	.word	0x0000bbf8
    307c:	0000a9a1 	.word	0x0000a9a1
    3080:	0000237d 	.word	0x0000237d
    3084:	0000a9bd 	.word	0x0000a9bd
    3088:	0000c6e2 	.word	0x0000c6e2
    308c:	0000c71e 	.word	0x0000c71e
    3090:	0000c18a 	.word	0x0000c18a

00003094 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3094:	4a07      	ldr	r2, [pc, #28]	; (30b4 <log_output_timestamp_freq_set+0x20>)
    3096:	2100      	movs	r1, #0
    3098:	2301      	movs	r3, #1
    309a:	4290      	cmp	r0, r2
    309c:	d806      	bhi.n	30ac <log_output_timestamp_freq_set+0x18>
    309e:	4a06      	ldr	r2, [pc, #24]	; (30b8 <log_output_timestamp_freq_set+0x24>)
    30a0:	b901      	cbnz	r1, 30a4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    30a2:	2301      	movs	r3, #1
    30a4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    30a6:	4b05      	ldr	r3, [pc, #20]	; (30bc <log_output_timestamp_freq_set+0x28>)
    30a8:	6018      	str	r0, [r3, #0]
}
    30aa:	4770      	bx	lr
		frequency /= 2U;
    30ac:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    30ae:	005b      	lsls	r3, r3, #1
    30b0:	2101      	movs	r1, #1
    30b2:	e7f2      	b.n	309a <log_output_timestamp_freq_set+0x6>
    30b4:	000f4240 	.word	0x000f4240
    30b8:	20004810 	.word	0x20004810
    30bc:	20004814 	.word	0x20004814

000030c0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    30c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30c4:	b085      	sub	sp, #20
    30c6:	af02      	add	r7, sp, #8
    30c8:	e9d7 6a0e 	ldrd	r6, sl, [r7, #56]	; 0x38
    30cc:	4604      	mov	r4, r0
    30ce:	4688      	mov	r8, r1
    30d0:	4693      	mov	fp, r2
    30d2:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    30d4:	2e00      	cmp	r6, #0
    30d6:	d04e      	beq.n	3176 <z_impl_z_log_msg2_runtime_vcreate+0xb6>
		va_list ap2;

		va_copy(ap2, ap);
    30d8:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    30dc:	f8cd a000 	str.w	sl, [sp]
    30e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    30e2:	4633      	mov	r3, r6
    30e4:	2110      	movs	r1, #16
    30e6:	2000      	movs	r0, #0
    30e8:	f7fe fa7a 	bl	15e0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    30ec:	1e05      	subs	r5, r0, #0
    30ee:	da09      	bge.n	3104 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    30f0:	4922      	ldr	r1, [pc, #136]	; (317c <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    30f2:	4823      	ldr	r0, [pc, #140]	; (3180 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    30f4:	4a23      	ldr	r2, [pc, #140]	; (3184 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    30f6:	2367      	movs	r3, #103	; 0x67
    30f8:	f007 fc2b 	bl	a952 <assert_print>
    30fc:	4821      	ldr	r0, [pc, #132]	; (3184 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    30fe:	2167      	movs	r1, #103	; 0x67
    3100:	f007 fc20 	bl	a944 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    3104:	4b20      	ldr	r3, [pc, #128]	; (3188 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    3106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3108:	f004 0407 	and.w	r4, r4, #7
    310c:	f00b 0b07 	and.w	fp, fp, #7
    3110:	00e4      	lsls	r4, r4, #3
    3112:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    3116:	ea03 2345 	and.w	r3, r3, r5, lsl #9
    311a:	431c      	orrs	r4, r3
    311c:	4b1b      	ldr	r3, [pc, #108]	; (318c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    311e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    3122:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    3124:	4613      	mov	r3, r2
    3126:	3317      	adds	r3, #23
    3128:	442b      	add	r3, r5
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    312a:	f023 0307 	bic.w	r3, r3, #7
    312e:	ebad 0d03 	sub.w	sp, sp, r3
    3132:	f10d 0b08 	add.w	fp, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3136:	b1a6      	cbz	r6, 3162 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3138:	f8cd a000 	str.w	sl, [sp]
    313c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    313e:	4633      	mov	r3, r6
    3140:	4629      	mov	r1, r5
    3142:	f10b 0010 	add.w	r0, fp, #16
    3146:	f7fe fa4b 	bl	15e0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    314a:	2800      	cmp	r0, #0
    314c:	da09      	bge.n	3162 <z_impl_z_log_msg2_runtime_vcreate+0xa2>
    314e:	490b      	ldr	r1, [pc, #44]	; (317c <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    3150:	480b      	ldr	r0, [pc, #44]	; (3180 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    3152:	4a0c      	ldr	r2, [pc, #48]	; (3184 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    3154:	2381      	movs	r3, #129	; 0x81
    3156:	f007 fbfc 	bl	a952 <assert_print>
    315a:	480a      	ldr	r0, [pc, #40]	; (3184 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    315c:	2181      	movs	r1, #129	; 0x81
    315e:	f007 fbf1 	bl	a944 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    3162:	464b      	mov	r3, r9
    3164:	4622      	mov	r2, r4
    3166:	4641      	mov	r1, r8
    3168:	4658      	mov	r0, fp
    316a:	f007 fc4e 	bl	aa0a <z_log_msg2_finalize>
	}
}
    316e:	370c      	adds	r7, #12
    3170:	46bd      	mov	sp, r7
    3172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    3176:	4635      	mov	r5, r6
    3178:	e7c4      	b.n	3104 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    317a:	bf00      	nop
    317c:	0000c774 	.word	0x0000c774
    3180:	0000c18a 	.word	0x0000c18a
    3184:	0000c747 	.word	0x0000c747
    3188:	0007fe00 	.word	0x0007fe00
    318c:	7ff80000 	.word	0x7ff80000

00003190 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    3192:	4f07      	ldr	r7, [pc, #28]	; (31b0 <char_out+0x20>)
{
    3194:	460d      	mov	r5, r1
    3196:	4604      	mov	r4, r0
    3198:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    319a:	42b4      	cmp	r4, r6
    319c:	d101      	bne.n	31a2 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    319e:	4628      	mov	r0, r5
    31a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    31a2:	6838      	ldr	r0, [r7, #0]
    31a4:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    31a8:	6883      	ldr	r3, [r0, #8]
    31aa:	69db      	ldr	r3, [r3, #28]
    31ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    31ae:	e7f4      	b.n	319a <char_out+0xa>
    31b0:	20004830 	.word	0x20004830

000031b4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    31b4:	4b01      	ldr	r3, [pc, #4]	; (31bc <format_set+0x8>)
	return 0;
}
    31b6:	2000      	movs	r0, #0
	log_format_current = log_type;
    31b8:	6019      	str	r1, [r3, #0]
}
    31ba:	4770      	bx	lr
    31bc:	2000482c 	.word	0x2000482c

000031c0 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    31c0:	4b02      	ldr	r3, [pc, #8]	; (31cc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    31c2:	4803      	ldr	r0, [pc, #12]	; (31d0 <panic+0x10>)
    31c4:	2201      	movs	r2, #1
    31c6:	701a      	strb	r2, [r3, #0]
    31c8:	f007 bc12 	b.w	a9f0 <log_output_flush>
    31cc:	20005133 	.word	0x20005133
    31d0:	0000bd54 	.word	0x0000bd54

000031d4 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    31d4:	4b06      	ldr	r3, [pc, #24]	; (31f0 <process+0x1c>)
{
    31d6:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    31d8:	6818      	ldr	r0, [r3, #0]
{
    31da:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    31dc:	f7ff fcb2 	bl	2b44 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    31e0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    31e2:	4603      	mov	r3, r0
}
    31e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    31e8:	4802      	ldr	r0, [pc, #8]	; (31f4 <process+0x20>)
    31ea:	220f      	movs	r2, #15
    31ec:	4718      	bx	r3
    31ee:	bf00      	nop
    31f0:	2000482c 	.word	0x2000482c
    31f4:	0000bd54 	.word	0x0000bd54

000031f8 <log_backend_uart_init>:
{
    31f8:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    31fa:	4b09      	ldr	r3, [pc, #36]	; (3220 <log_backend_uart_init+0x28>)
    31fc:	4809      	ldr	r0, [pc, #36]	; (3224 <log_backend_uart_init+0x2c>)
    31fe:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3200:	f008 f89e 	bl	b340 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3204:	b958      	cbnz	r0, 321e <log_backend_uart_init+0x26>
    3206:	4908      	ldr	r1, [pc, #32]	; (3228 <log_backend_uart_init+0x30>)
    3208:	4808      	ldr	r0, [pc, #32]	; (322c <log_backend_uart_init+0x34>)
    320a:	4a09      	ldr	r2, [pc, #36]	; (3230 <log_backend_uart_init+0x38>)
    320c:	2379      	movs	r3, #121	; 0x79
    320e:	f007 fba0 	bl	a952 <assert_print>
}
    3212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    3216:	4806      	ldr	r0, [pc, #24]	; (3230 <log_backend_uart_init+0x38>)
    3218:	2179      	movs	r1, #121	; 0x79
    321a:	f007 bb93 	b.w	a944 <assert_post_action>
}
    321e:	bd08      	pop	{r3, pc}
    3220:	20004830 	.word	0x20004830
    3224:	0000ba60 	.word	0x0000ba60
    3228:	0000c7b3 	.word	0x0000c7b3
    322c:	0000c18a 	.word	0x0000c18a
    3230:	0000c77e 	.word	0x0000c77e

00003234 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3234:	4b01      	ldr	r3, [pc, #4]	; (323c <log_backend_rtt_init+0x8>)
    3236:	2201      	movs	r2, #1
    3238:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    323a:	4770      	bx	lr
    323c:	20005134 	.word	0x20005134

00003240 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3240:	4b01      	ldr	r3, [pc, #4]	; (3248 <format_set+0x8>)
	return 0;
}
    3242:	2000      	movs	r0, #0
	log_format_current = log_type;
    3244:	6019      	str	r1, [r3, #0]
}
    3246:	4770      	bx	lr
    3248:	20004848 	.word	0x20004848

0000324c <panic>:
	panic_mode = true;
    324c:	4b02      	ldr	r3, [pc, #8]	; (3258 <panic+0xc>)
    324e:	4803      	ldr	r0, [pc, #12]	; (325c <panic+0x10>)
    3250:	2201      	movs	r2, #1
    3252:	701a      	strb	r2, [r3, #0]
    3254:	f007 bbcc 	b.w	a9f0 <log_output_flush>
    3258:	20005135 	.word	0x20005135
    325c:	0000bd84 	.word	0x0000bd84

00003260 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3260:	4b06      	ldr	r3, [pc, #24]	; (327c <process+0x1c>)
{
    3262:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3264:	6818      	ldr	r0, [r3, #0]
{
    3266:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3268:	f7ff fc6c 	bl	2b44 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    326c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    326e:	4603      	mov	r3, r0
}
    3270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    3274:	4802      	ldr	r0, [pc, #8]	; (3280 <process+0x20>)
    3276:	220f      	movs	r2, #15
    3278:	4718      	bx	r3
    327a:	bf00      	nop
    327c:	20004848 	.word	0x20004848
    3280:	0000bd84 	.word	0x0000bd84

00003284 <data_out_block_mode>:
{
    3284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3286:	4d19      	ldr	r5, [pc, #100]	; (32ec <data_out_block_mode+0x68>)
    3288:	4607      	mov	r7, r0
    328a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    328c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    328e:	4632      	mov	r2, r6
    3290:	4639      	mov	r1, r7
    3292:	2000      	movs	r0, #0
    3294:	f003 fc92 	bl	6bbc <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    3298:	b1c8      	cbz	r0, 32ce <data_out_block_mode+0x4a>
	host_present = true;
    329a:	2301      	movs	r3, #1
    329c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    329e:	4b14      	ldr	r3, [pc, #80]	; (32f0 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    32a0:	781b      	ldrb	r3, [r3, #0]
    32a2:	b92b      	cbnz	r3, 32b0 <data_out_block_mode+0x2c>
}
    32a4:	4630      	mov	r0, r6
    32a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    32a8:	b95c      	cbnz	r4, 32c2 <data_out_block_mode+0x3e>
		host_present = false;
    32aa:	702c      	strb	r4, [r5, #0]
    32ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    32b0:	2000      	movs	r0, #0
    32b2:	f003 fccb 	bl	6c4c <SEGGER_RTT_HasDataUp>
    32b6:	2800      	cmp	r0, #0
    32b8:	d0f4      	beq.n	32a4 <data_out_block_mode+0x20>
    32ba:	782b      	ldrb	r3, [r5, #0]
    32bc:	2b00      	cmp	r3, #0
    32be:	d1f3      	bne.n	32a8 <data_out_block_mode+0x24>
    32c0:	e7f0      	b.n	32a4 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    32c2:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    32c4:	f241 3088 	movw	r0, #5000	; 0x1388
    32c8:	f008 f8b8 	bl	b43c <z_impl_k_busy_wait>
}
    32cc:	e7f0      	b.n	32b0 <data_out_block_mode+0x2c>
		} else if (host_present) {
    32ce:	782b      	ldrb	r3, [r5, #0]
    32d0:	b113      	cbz	r3, 32d8 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    32d2:	3c01      	subs	r4, #1
    32d4:	d104      	bne.n	32e0 <data_out_block_mode+0x5c>
		host_present = false;
    32d6:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    32d8:	782b      	ldrb	r3, [r5, #0]
    32da:	2b00      	cmp	r3, #0
    32dc:	d1d7      	bne.n	328e <data_out_block_mode+0xa>
    32de:	e7e1      	b.n	32a4 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    32e0:	f241 3088 	movw	r0, #5000	; 0x1388
    32e4:	f008 f8aa 	bl	b43c <z_impl_k_busy_wait>
    32e8:	e7f6      	b.n	32d8 <data_out_block_mode+0x54>
    32ea:	bf00      	nop
    32ec:	20005134 	.word	0x20005134
    32f0:	20005135 	.word	0x20005135

000032f4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    32f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    32f8:	4605      	mov	r5, r0
    32fa:	f04f 0320 	mov.w	r3, #32
    32fe:	f3ef 8611 	mrs	r6, BASEPRI
    3302:	f383 8812 	msr	BASEPRI_MAX, r3
    3306:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    330a:	4821      	ldr	r0, [pc, #132]	; (3390 <pm_state_notify+0x9c>)
    330c:	f004 f87e 	bl	740c <z_spin_lock_valid>
    3310:	b968      	cbnz	r0, 332e <pm_state_notify+0x3a>
    3312:	4a20      	ldr	r2, [pc, #128]	; (3394 <pm_state_notify+0xa0>)
    3314:	4920      	ldr	r1, [pc, #128]	; (3398 <pm_state_notify+0xa4>)
    3316:	4821      	ldr	r0, [pc, #132]	; (339c <pm_state_notify+0xa8>)
    3318:	238e      	movs	r3, #142	; 0x8e
    331a:	f007 fb1a 	bl	a952 <assert_print>
    331e:	491c      	ldr	r1, [pc, #112]	; (3390 <pm_state_notify+0x9c>)
    3320:	481f      	ldr	r0, [pc, #124]	; (33a0 <pm_state_notify+0xac>)
    3322:	f007 fb16 	bl	a952 <assert_print>
    3326:	481b      	ldr	r0, [pc, #108]	; (3394 <pm_state_notify+0xa0>)
    3328:	218e      	movs	r1, #142	; 0x8e
    332a:	f007 fb0b 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    332e:	4818      	ldr	r0, [pc, #96]	; (3390 <pm_state_notify+0x9c>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3330:	4f1c      	ldr	r7, [pc, #112]	; (33a4 <pm_state_notify+0xb0>)
    3332:	f8df 8074 	ldr.w	r8, [pc, #116]	; 33a8 <pm_state_notify+0xb4>
    3336:	f004 f887 	bl	7448 <z_spin_lock_set_owner>
	return list->head;
    333a:	4b1c      	ldr	r3, [pc, #112]	; (33ac <pm_state_notify+0xb8>)
    333c:	681c      	ldr	r4, [r3, #0]
    333e:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3342:	b9bc      	cbnz	r4, 3374 <pm_state_notify+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3344:	4812      	ldr	r0, [pc, #72]	; (3390 <pm_state_notify+0x9c>)
    3346:	f004 f86f 	bl	7428 <z_spin_unlock_valid>
    334a:	b968      	cbnz	r0, 3368 <pm_state_notify+0x74>
    334c:	4a11      	ldr	r2, [pc, #68]	; (3394 <pm_state_notify+0xa0>)
    334e:	4918      	ldr	r1, [pc, #96]	; (33b0 <pm_state_notify+0xbc>)
    3350:	4812      	ldr	r0, [pc, #72]	; (339c <pm_state_notify+0xa8>)
    3352:	23b9      	movs	r3, #185	; 0xb9
    3354:	f007 fafd 	bl	a952 <assert_print>
    3358:	490d      	ldr	r1, [pc, #52]	; (3390 <pm_state_notify+0x9c>)
    335a:	4816      	ldr	r0, [pc, #88]	; (33b4 <pm_state_notify+0xc0>)
    335c:	f007 faf9 	bl	a952 <assert_print>
    3360:	480c      	ldr	r0, [pc, #48]	; (3394 <pm_state_notify+0xa0>)
    3362:	21b9      	movs	r1, #185	; 0xb9
    3364:	f007 faee 	bl	a944 <assert_post_action>
	__asm__ volatile(
    3368:	f386 8811 	msr	BASEPRI, r6
    336c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3374:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3378:	2d00      	cmp	r5, #0
    337a:	bf18      	it	ne
    337c:	4613      	movne	r3, r2
		if (callback) {
    337e:	b12b      	cbz	r3, 338c <pm_state_notify+0x98>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3380:	f898 2014 	ldrb.w	r2, [r8, #20]
    3384:	fb09 f202 	mul.w	r2, r9, r2
    3388:	5cb8      	ldrb	r0, [r7, r2]
    338a:	4798      	blx	r3
	return node->next;
    338c:	6824      	ldr	r4, [r4, #0]
    338e:	e7d8      	b.n	3342 <pm_state_notify+0x4e>
    3390:	2000484c 	.word	0x2000484c
    3394:	0000c2d4 	.word	0x0000c2d4
    3398:	0000c32d 	.word	0x0000c32d
    339c:	0000c18a 	.word	0x0000c18a
    33a0:	0000c342 	.word	0x0000c342
    33a4:	20004854 	.word	0x20004854
    33a8:	20004f00 	.word	0x20004f00
    33ac:	20004860 	.word	0x20004860
    33b0:	0000c301 	.word	0x0000c301
    33b4:	0000c318 	.word	0x0000c318

000033b8 <atomic_clear_bit.constprop.0>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    33b8:	4a0a      	ldr	r2, [pc, #40]	; (33e4 <atomic_clear_bit.constprop.0+0x2c>)
    33ba:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33be:	0943      	lsrs	r3, r0, #5
    33c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    33c4:	f000 001f 	and.w	r0, r0, #31
    33c8:	2301      	movs	r3, #1
    33ca:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33cc:	43db      	mvns	r3, r3
    33ce:	e852 0f00 	ldrex	r0, [r2]
    33d2:	4018      	ands	r0, r3
    33d4:	e842 0100 	strex	r1, r0, [r2]
    33d8:	2900      	cmp	r1, #0
    33da:	d1f8      	bne.n	33ce <atomic_clear_bit.constprop.0+0x16>
    33dc:	f3bf 8f5b 	dmb	ish
}
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop
    33e4:	20004850 	.word	0x20004850

000033e8 <pm_system_resume>:

void pm_system_resume(void)
{
    33e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    33ea:	4b19      	ldr	r3, [pc, #100]	; (3450 <pm_system_resume+0x68>)
    33ec:	7d1c      	ldrb	r4, [r3, #20]
    33ee:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    33f2:	f004 031f 	and.w	r3, r4, #31
    33f6:	2201      	movs	r2, #1
    33f8:	409a      	lsls	r2, r3
    33fa:	4b16      	ldr	r3, [pc, #88]	; (3454 <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    33fc:	0961      	lsrs	r1, r4, #5
    33fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3402:	43d0      	mvns	r0, r2
    3404:	e853 1f00 	ldrex	r1, [r3]
    3408:	ea01 0500 	and.w	r5, r1, r0
    340c:	e843 5600 	strex	r6, r5, [r3]
    3410:	2e00      	cmp	r6, #0
    3412:	d1f7      	bne.n	3404 <pm_system_resume+0x1c>
    3414:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    3418:	420a      	tst	r2, r1
    341a:	d013      	beq.n	3444 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    341c:	4b0e      	ldr	r3, [pc, #56]	; (3458 <pm_system_resume+0x70>)
    341e:	4d0f      	ldr	r5, [pc, #60]	; (345c <pm_system_resume+0x74>)
    3420:	b18b      	cbz	r3, 3446 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3422:	230c      	movs	r3, #12
    3424:	4363      	muls	r3, r4
    3426:	18ea      	adds	r2, r5, r3
    3428:	5ce8      	ldrb	r0, [r5, r3]
    342a:	7851      	ldrb	r1, [r2, #1]
    342c:	f007 fb72 	bl	ab14 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3430:	2000      	movs	r0, #0
    3432:	f7ff ff5f 	bl	32f4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    3436:	230c      	movs	r3, #12
    3438:	435c      	muls	r4, r3
    343a:	192a      	adds	r2, r5, r4
    343c:	2300      	movs	r3, #0
    343e:	512b      	str	r3, [r5, r4]
    3440:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3444:	bd70      	pop	{r4, r5, r6, pc}
    3446:	f383 8811 	msr	BASEPRI, r3
    344a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    344e:	e7ef      	b.n	3430 <pm_system_resume+0x48>
    3450:	20004f00 	.word	0x20004f00
    3454:	20004868 	.word	0x20004868
    3458:	0000ab15 	.word	0x0000ab15
    345c:	20004854 	.word	0x20004854

00003460 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    3464:	4b32      	ldr	r3, [pc, #200]	; (3530 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3466:	4a33      	ldr	r2, [pc, #204]	; (3534 <pm_system_suspend+0xd4>)
    3468:	7d1c      	ldrb	r4, [r3, #20]
    346a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    346e:	0963      	lsrs	r3, r4, #5
    3470:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3478:	4e2f      	ldr	r6, [pc, #188]	; (3538 <pm_system_suspend+0xd8>)
    347a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    347e:	f004 091f 	and.w	r9, r4, #31
    3482:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    3486:	f013 0f01 	tst.w	r3, #1
{
    348a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    348c:	d10a      	bne.n	34a4 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    348e:	4601      	mov	r1, r0
    3490:	4620      	mov	r0, r4
    3492:	f000 f869 	bl	3568 <pm_policy_next_state>
		if (info != NULL) {
    3496:	b128      	cbz	r0, 34a4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    3498:	c807      	ldmia	r0, {r0, r1, r2}
    349a:	230c      	movs	r3, #12
    349c:	fb03 6304 	mla	r3, r3, r4, r6
    34a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    34a4:	230c      	movs	r3, #12
    34a6:	4363      	muls	r3, r4
    34a8:	18f2      	adds	r2, r6, r3
    34aa:	5cf5      	ldrb	r5, [r6, r3]
    34ac:	b92d      	cbnz	r5, 34ba <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    34ae:	4620      	mov	r0, r4
    34b0:	f7ff ff82 	bl	33b8 <atomic_clear_bit.constprop.0>
		ret = false;
    34b4:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    34b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    34ba:	1c7b      	adds	r3, r7, #1
    34bc:	d010      	beq.n	34e0 <pm_system_suspend+0x80>
    34be:	f8d2 c008 	ldr.w	ip, [r2, #8]
    34c2:	4d1e      	ldr	r5, [pc, #120]	; (353c <pm_system_suspend+0xdc>)
    34c4:	4a1e      	ldr	r2, [pc, #120]	; (3540 <pm_system_suspend+0xe0>)
    34c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    34ca:	2100      	movs	r1, #0
    34cc:	fbec 5100 	umlal	r5, r1, ip, r0
    34d0:	2300      	movs	r3, #0
    34d2:	4628      	mov	r0, r5
    34d4:	f7fd fa82 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    34d8:	2101      	movs	r1, #1
    34da:	1a38      	subs	r0, r7, r0
    34dc:	f005 fd84 	bl	8fe8 <z_set_timeout_expiry>
	k_sched_lock();
    34e0:	f004 fc98 	bl	7e14 <k_sched_lock>
	pm_state_notify(true);
    34e4:	2001      	movs	r0, #1
    34e6:	f7ff ff05 	bl	32f4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    34ea:	f3bf 8f5b 	dmb	ish
    34ee:	4b15      	ldr	r3, [pc, #84]	; (3544 <pm_system_suspend+0xe4>)
    34f0:	4498      	add	r8, r3
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    34f2:	2301      	movs	r3, #1
    34f4:	fa03 f309 	lsl.w	r3, r3, r9
    34f8:	e858 2f00 	ldrex	r2, [r8]
    34fc:	431a      	orrs	r2, r3
    34fe:	e848 2100 	strex	r1, r2, [r8]
    3502:	2900      	cmp	r1, #0
    3504:	d1f8      	bne.n	34f8 <pm_system_suspend+0x98>
    3506:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    350a:	4b0f      	ldr	r3, [pc, #60]	; (3548 <pm_system_suspend+0xe8>)
    350c:	b133      	cbz	r3, 351c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    350e:	230c      	movs	r3, #12
    3510:	4363      	muls	r3, r4
    3512:	18f2      	adds	r2, r6, r3
    3514:	5cf0      	ldrb	r0, [r6, r3]
    3516:	7851      	ldrb	r1, [r2, #1]
    3518:	f007 faf0 	bl	aafc <pm_state_set>
	pm_system_resume();
    351c:	f7ff ff64 	bl	33e8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    3520:	4620      	mov	r0, r4
    3522:	f7ff ff49 	bl	33b8 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    3526:	f004 fce9 	bl	7efc <k_sched_unlock>
	bool ret = true;
    352a:	2001      	movs	r0, #1
    352c:	e7c3      	b.n	34b6 <pm_system_suspend+0x56>
    352e:	bf00      	nop
    3530:	20004f00 	.word	0x20004f00
    3534:	20004850 	.word	0x20004850
    3538:	20004854 	.word	0x20004854
    353c:	000f423f 	.word	0x000f423f
    3540:	000f4240 	.word	0x000f4240
    3544:	20004868 	.word	0x20004868
    3548:	0000aafd 	.word	0x0000aafd

0000354c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    354c:	4b05      	ldr	r3, [pc, #20]	; (3564 <pm_policy_state_lock_is_active+0x18>)
    354e:	f3bf 8f5b 	dmb	ish
    3552:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3556:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    355a:	3800      	subs	r0, #0
    355c:	bf18      	it	ne
    355e:	2001      	movne	r0, #1
    3560:	4770      	bx	lr
    3562:	bf00      	nop
    3564:	2000486c 	.word	0x2000486c

00003568 <pm_policy_next_state>:
{
    3568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    356c:	4688      	mov	r8, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    356e:	a901      	add	r1, sp, #4
    3570:	f000 f842 	bl	35f8 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3574:	1e44      	subs	r4, r0, #1
    3576:	b224      	sxth	r4, r4
    3578:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    357c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 35ec <pm_policy_next_state+0x84>
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3580:	4605      	mov	r5, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3582:	00a4      	lsls	r4, r4, #2
    3584:	b925      	cbnz	r5, 3590 <pm_policy_next_state+0x28>
	return NULL;
    3586:	462f      	mov	r7, r5
}
    3588:	4638      	mov	r0, r7
    358a:	b003      	add	sp, #12
    358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    3590:	9b01      	ldr	r3, [sp, #4]
		if (pm_policy_state_lock_is_active(state->state)) {
    3592:	5d18      	ldrb	r0, [r3, r4]
		const struct pm_state_info *state = &cpu_states[i];
    3594:	191f      	adds	r7, r3, r4
		if (pm_policy_state_lock_is_active(state->state)) {
    3596:	f7ff ffd9 	bl	354c <pm_policy_state_lock_is_active>
    359a:	4606      	mov	r6, r0
    359c:	bb10      	cbnz	r0, 35e4 <pm_policy_next_state+0x7c>
    359e:	6878      	ldr	r0, [r7, #4]
    35a0:	4a13      	ldr	r2, [pc, #76]	; (35f0 <pm_policy_next_state+0x88>)
    35a2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
    35a6:	46cc      	mov	ip, r9
    35a8:	4631      	mov	r1, r6
    35aa:	fbe0 c10a 	umlal	ip, r1, r0, sl
    35ae:	2300      	movs	r3, #0
    35b0:	4660      	mov	r0, ip
    35b2:	f7fd fa13 	bl	9dc <__aeabi_uldivmod>
    35b6:	4683      	mov	fp, r0
    35b8:	68b8      	ldr	r0, [r7, #8]
    35ba:	4a0d      	ldr	r2, [pc, #52]	; (35f0 <pm_policy_next_state+0x88>)
    35bc:	46cc      	mov	ip, r9
    35be:	4631      	mov	r1, r6
    35c0:	fbe0 c10a 	umlal	ip, r1, r0, sl
    35c4:	2300      	movs	r3, #0
    35c6:	4660      	mov	r0, ip
    35c8:	f7fd fa08 	bl	9dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    35cc:	4b09      	ldr	r3, [pc, #36]	; (35f4 <pm_policy_next_state+0x8c>)
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	1c5a      	adds	r2, r3, #1
    35d2:	d001      	beq.n	35d8 <pm_policy_next_state+0x70>
    35d4:	4283      	cmp	r3, r0
    35d6:	d905      	bls.n	35e4 <pm_policy_next_state+0x7c>
		if ((ticks == K_TICKS_FOREVER) ||
    35d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    35dc:	d0d4      	beq.n	3588 <pm_policy_next_state+0x20>
		    (ticks >= (min_residency + exit_latency))) {
    35de:	4458      	add	r0, fp
		if ((ticks == K_TICKS_FOREVER) ||
    35e0:	4540      	cmp	r0, r8
    35e2:	d9d1      	bls.n	3588 <pm_policy_next_state+0x20>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    35e4:	3d01      	subs	r5, #1
    35e6:	b2ad      	uxth	r5, r5
    35e8:	3c0c      	subs	r4, #12
    35ea:	e7cb      	b.n	3584 <pm_policy_next_state+0x1c>
    35ec:	000f423f 	.word	0x000f423f
    35f0:	000f4240 	.word	0x000f4240
    35f4:	20000008 	.word	0x20000008

000035f8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    35f8:	b908      	cbnz	r0, 35fe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    35fa:	4b02      	ldr	r3, [pc, #8]	; (3604 <pm_state_cpu_get_all+0xc>)
    35fc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    35fe:	2000      	movs	r0, #0
    3600:	4770      	bx	lr
    3602:	bf00      	nop
    3604:	0000bd94 	.word	0x0000bd94

00003608 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    3608:	4801      	ldr	r0, [pc, #4]	; (3610 <nrf_cc3xx_platform_abort_init+0x8>)
    360a:	f006 be83 	b.w	a314 <nrf_cc3xx_platform_set_abort>
    360e:	bf00      	nop
    3610:	0000bd94 	.word	0x0000bd94

00003614 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3614:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    3616:	4604      	mov	r4, r0
    3618:	b918      	cbnz	r0, 3622 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    361a:	4b0d      	ldr	r3, [pc, #52]	; (3650 <mutex_free_platform+0x3c>)
    361c:	480d      	ldr	r0, [pc, #52]	; (3654 <mutex_free_platform+0x40>)
    361e:	685b      	ldr	r3, [r3, #4]
    3620:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3622:	6861      	ldr	r1, [r4, #4]
    3624:	f031 0304 	bics.w	r3, r1, #4
    3628:	d00c      	beq.n	3644 <mutex_free_platform+0x30>
    362a:	2908      	cmp	r1, #8
    362c:	d00a      	beq.n	3644 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    362e:	f011 0102 	ands.w	r1, r1, #2
    3632:	d008      	beq.n	3646 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3634:	4808      	ldr	r0, [pc, #32]	; (3658 <mutex_free_platform+0x44>)
    3636:	4621      	mov	r1, r4
    3638:	f003 fd48 	bl	70cc <k_mem_slab_free>
        mutex->mutex = NULL;
    363c:	2300      	movs	r3, #0
    363e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3640:	2300      	movs	r3, #0
    3642:	6063      	str	r3, [r4, #4]
}
    3644:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    3646:	6820      	ldr	r0, [r4, #0]
    3648:	2214      	movs	r2, #20
    364a:	f007 ffc8 	bl	b5de <memset>
    364e:	e7f7      	b.n	3640 <mutex_free_platform+0x2c>
    3650:	20000154 	.word	0x20000154
    3654:	0000c7fa 	.word	0x0000c7fa
    3658:	20004d88 	.word	0x20004d88

0000365c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    365c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    365e:	b308      	cbz	r0, 36a4 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3660:	6843      	ldr	r3, [r0, #4]
    3662:	2b04      	cmp	r3, #4
    3664:	d110      	bne.n	3688 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3666:	2201      	movs	r2, #1
    3668:	6803      	ldr	r3, [r0, #0]
    366a:	f3bf 8f5b 	dmb	ish
    366e:	e853 1f00 	ldrex	r1, [r3]
    3672:	2900      	cmp	r1, #0
    3674:	d103      	bne.n	367e <mutex_lock_platform+0x22>
    3676:	e843 2000 	strex	r0, r2, [r3]
    367a:	2800      	cmp	r0, #0
    367c:	d1f7      	bne.n	366e <mutex_lock_platform+0x12>
    367e:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3682:	d10b      	bne.n	369c <mutex_lock_platform+0x40>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    3684:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    3686:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3688:	b153      	cbz	r3, 36a0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    368a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    368c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3694:	f003 ff12 	bl	74bc <z_impl_k_mutex_lock>
        if (ret == 0) {
    3698:	2800      	cmp	r0, #0
    369a:	d0f3      	beq.n	3684 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    369c:	4803      	ldr	r0, [pc, #12]	; (36ac <mutex_lock_platform+0x50>)
    369e:	e7f2      	b.n	3686 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    36a0:	4803      	ldr	r0, [pc, #12]	; (36b0 <mutex_lock_platform+0x54>)
    36a2:	e7f0      	b.n	3686 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    36a4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    36a8:	e7ed      	b.n	3686 <mutex_lock_platform+0x2a>
    36aa:	bf00      	nop
    36ac:	ffff8fe9 	.word	0xffff8fe9
    36b0:	ffff8fea 	.word	0xffff8fea

000036b4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    36b4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    36b6:	b1c0      	cbz	r0, 36ea <mutex_unlock_platform+0x36>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    36b8:	6843      	ldr	r3, [r0, #4]
    36ba:	2b04      	cmp	r3, #4
    36bc:	d110      	bne.n	36e0 <mutex_unlock_platform+0x2c>
    36be:	2200      	movs	r2, #0
    36c0:	6803      	ldr	r3, [r0, #0]
    36c2:	f3bf 8f5b 	dmb	ish
    36c6:	e853 1f00 	ldrex	r1, [r3]
    36ca:	2901      	cmp	r1, #1
    36cc:	d103      	bne.n	36d6 <mutex_unlock_platform+0x22>
    36ce:	e843 2000 	strex	r0, r2, [r3]
    36d2:	2800      	cmp	r0, #0
    36d4:	d1f7      	bne.n	36c6 <mutex_unlock_platform+0x12>
    36d6:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36da:	d109      	bne.n	36f0 <mutex_unlock_platform+0x3c>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    36dc:	2000      	movs	r0, #0
    }
}
    36de:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    36e0:	b143      	cbz	r3, 36f4 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    36e2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    36e4:	f003 ffe4 	bl	76b0 <z_impl_k_mutex_unlock>
    36e8:	e7f8      	b.n	36dc <mutex_unlock_platform+0x28>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    36ea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    36ee:	e7f6      	b.n	36de <mutex_unlock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    36f0:	4801      	ldr	r0, [pc, #4]	; (36f8 <mutex_unlock_platform+0x44>)
    36f2:	e7f4      	b.n	36de <mutex_unlock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    36f4:	4801      	ldr	r0, [pc, #4]	; (36fc <mutex_unlock_platform+0x48>)
    36f6:	e7f2      	b.n	36de <mutex_unlock_platform+0x2a>
    36f8:	ffff8fe9 	.word	0xffff8fe9
    36fc:	ffff8fea 	.word	0xffff8fea

00003700 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3700:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3702:	4604      	mov	r4, r0
    3704:	b918      	cbnz	r0, 370e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    3706:	4b16      	ldr	r3, [pc, #88]	; (3760 <mutex_init_platform+0x60>)
    3708:	4816      	ldr	r0, [pc, #88]	; (3764 <mutex_init_platform+0x64>)
    370a:	685b      	ldr	r3, [r3, #4]
    370c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    370e:	6863      	ldr	r3, [r4, #4]
    3710:	2b04      	cmp	r3, #4
    3712:	d023      	beq.n	375c <mutex_init_platform+0x5c>
    3714:	2b08      	cmp	r3, #8
    3716:	d021      	beq.n	375c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3718:	b9cb      	cbnz	r3, 374e <mutex_init_platform+0x4e>
    371a:	6823      	ldr	r3, [r4, #0]
    371c:	b9bb      	cbnz	r3, 374e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    371e:	4812      	ldr	r0, [pc, #72]	; (3768 <mutex_init_platform+0x68>)
    3720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3728:	4621      	mov	r1, r4
    372a:	f003 fc63 	bl	6ff4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    372e:	b908      	cbnz	r0, 3734 <mutex_init_platform+0x34>
    3730:	6823      	ldr	r3, [r4, #0]
    3732:	b91b      	cbnz	r3, 373c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    3734:	4b0a      	ldr	r3, [pc, #40]	; (3760 <mutex_init_platform+0x60>)
    3736:	480d      	ldr	r0, [pc, #52]	; (376c <mutex_init_platform+0x6c>)
    3738:	685b      	ldr	r3, [r3, #4]
    373a:	4798      	blx	r3
    373c:	6820      	ldr	r0, [r4, #0]
    373e:	2214      	movs	r2, #20
    3740:	2100      	movs	r1, #0
    3742:	f007 ff4c 	bl	b5de <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3746:	6863      	ldr	r3, [r4, #4]
    3748:	f043 0302 	orr.w	r3, r3, #2
    374c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    374e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3750:	f007 fe47 	bl	b3e2 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3754:	6863      	ldr	r3, [r4, #4]
    3756:	f043 0301 	orr.w	r3, r3, #1
    375a:	6063      	str	r3, [r4, #4]
}
    375c:	bd10      	pop	{r4, pc}
    375e:	bf00      	nop
    3760:	20000154 	.word	0x20000154
    3764:	0000c7fa 	.word	0x0000c7fa
    3768:	20004d88 	.word	0x20004d88
    376c:	0000c820 	.word	0x0000c820

00003770 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3770:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3772:	4906      	ldr	r1, [pc, #24]	; (378c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3774:	4806      	ldr	r0, [pc, #24]	; (3790 <nrf_cc3xx_platform_mutex_init+0x20>)
    3776:	2340      	movs	r3, #64	; 0x40
    3778:	2214      	movs	r2, #20
    377a:	f007 fdff 	bl	b37c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    377e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3782:	4904      	ldr	r1, [pc, #16]	; (3794 <nrf_cc3xx_platform_mutex_init+0x24>)
    3784:	4804      	ldr	r0, [pc, #16]	; (3798 <nrf_cc3xx_platform_mutex_init+0x28>)
    3786:	f006 be25 	b.w	a3d4 <nrf_cc3xx_platform_set_mutexes>
    378a:	bf00      	nop
    378c:	20004888 	.word	0x20004888
    3790:	20004d88 	.word	0x20004d88
    3794:	0000bd9c 	.word	0x0000bd9c
    3798:	0000bdb0 	.word	0x0000bdb0

0000379c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    379c:	4901      	ldr	r1, [pc, #4]	; (37a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    379e:	2210      	movs	r2, #16
	str	r2, [r1]
    37a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    37a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    37a4:	e000ed10 	.word	0xe000ed10

000037a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    37a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    37aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    37ac:	f380 8811 	msr	BASEPRI, r0
	isb
    37b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    37b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    37b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    37ba:	b662      	cpsie	i
	isb
    37bc:	f3bf 8f6f 	isb	sy

	bx	lr
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop

000037c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    37c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    37c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    37c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    37cc:	bf20      	wfe

	msr	BASEPRI, r0
    37ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    37d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    37d4:	4770      	bx	lr
    37d6:	bf00      	nop

000037d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    37d8:	b570      	push	{r4, r5, r6, lr}
    37da:	4606      	mov	r6, r0
    37dc:	b086      	sub	sp, #24

	if (esf != NULL) {
    37de:	460d      	mov	r5, r1
    37e0:	2900      	cmp	r1, #0
    37e2:	d038      	beq.n	3856 <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    37e4:	688b      	ldr	r3, [r1, #8]
    37e6:	9305      	str	r3, [sp, #20]
    37e8:	684b      	ldr	r3, [r1, #4]
    37ea:	9304      	str	r3, [sp, #16]
    37ec:	680b      	ldr	r3, [r1, #0]
    37ee:	9303      	str	r3, [sp, #12]
    37f0:	2400      	movs	r4, #0
    37f2:	4b1c      	ldr	r3, [pc, #112]	; (3864 <z_arm_fatal_error+0x8c>)
    37f4:	491c      	ldr	r1, [pc, #112]	; (3868 <z_arm_fatal_error+0x90>)
    37f6:	9302      	str	r3, [sp, #8]
    37f8:	2201      	movs	r2, #1
    37fa:	4623      	mov	r3, r4
    37fc:	4620      	mov	r0, r4
    37fe:	e9cd 4400 	strd	r4, r4, [sp]
    3802:	f007 f920 	bl	aa46 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3806:	696b      	ldr	r3, [r5, #20]
    3808:	9305      	str	r3, [sp, #20]
    380a:	692b      	ldr	r3, [r5, #16]
    380c:	9304      	str	r3, [sp, #16]
    380e:	68eb      	ldr	r3, [r5, #12]
    3810:	9303      	str	r3, [sp, #12]
    3812:	4b16      	ldr	r3, [pc, #88]	; (386c <z_arm_fatal_error+0x94>)
    3814:	4914      	ldr	r1, [pc, #80]	; (3868 <z_arm_fatal_error+0x90>)
    3816:	9400      	str	r4, [sp, #0]
    3818:	e9cd 4301 	strd	r4, r3, [sp, #4]
    381c:	2201      	movs	r2, #1
    381e:	4623      	mov	r3, r4
    3820:	4620      	mov	r0, r4
    3822:	f007 f910 	bl	aa46 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3826:	69eb      	ldr	r3, [r5, #28]
    3828:	9303      	str	r3, [sp, #12]
    382a:	4b11      	ldr	r3, [pc, #68]	; (3870 <z_arm_fatal_error+0x98>)
    382c:	490e      	ldr	r1, [pc, #56]	; (3868 <z_arm_fatal_error+0x90>)
    382e:	9400      	str	r4, [sp, #0]
    3830:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3834:	2201      	movs	r2, #1
    3836:	4623      	mov	r3, r4
    3838:	4620      	mov	r0, r4
    383a:	f007 f904 	bl	aa46 <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    383e:	69ab      	ldr	r3, [r5, #24]
    3840:	9303      	str	r3, [sp, #12]
    3842:	4b0c      	ldr	r3, [pc, #48]	; (3874 <z_arm_fatal_error+0x9c>)
    3844:	4908      	ldr	r1, [pc, #32]	; (3868 <z_arm_fatal_error+0x90>)
    3846:	9400      	str	r4, [sp, #0]
    3848:	e9cd 4301 	strd	r4, r3, [sp, #4]
    384c:	2201      	movs	r2, #1
    384e:	4623      	mov	r3, r4
    3850:	4620      	mov	r0, r4
    3852:	f007 f8f8 	bl	aa46 <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3856:	4629      	mov	r1, r5
    3858:	4630      	mov	r0, r6
}
    385a:	b006      	add	sp, #24
    385c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3860:	f003 ba48 	b.w	6cf4 <z_fatal_error>
    3864:	0000c84d 	.word	0x0000c84d
    3868:	0000bc20 	.word	0x0000bc20
    386c:	0000c87c 	.word	0x0000c87c
    3870:	0000c8ab 	.word	0x0000c8ab
    3874:	0000c8ba 	.word	0x0000c8ba

00003878 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3878:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    387a:	2800      	cmp	r0, #0
    387c:	db07      	blt.n	388e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    387e:	4a04      	ldr	r2, [pc, #16]	; (3890 <arch_irq_enable+0x18>)
    3880:	0941      	lsrs	r1, r0, #5
    3882:	2301      	movs	r3, #1
    3884:	f000 001f 	and.w	r0, r0, #31
    3888:	4083      	lsls	r3, r0
    388a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    388e:	4770      	bx	lr
    3890:	e000e100 	.word	0xe000e100

00003894 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3894:	4b05      	ldr	r3, [pc, #20]	; (38ac <arch_irq_is_enabled+0x18>)
    3896:	0942      	lsrs	r2, r0, #5
    3898:	f000 001f 	and.w	r0, r0, #31
    389c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    38a0:	2301      	movs	r3, #1
    38a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    38a6:	4010      	ands	r0, r2
    38a8:	4770      	bx	lr
    38aa:	bf00      	nop
    38ac:	e000e100 	.word	0xe000e100

000038b0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    38b0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    38b2:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    38b4:	2d07      	cmp	r5, #7
{
    38b6:	4604      	mov	r4, r0
    38b8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    38ba:	d90f      	bls.n	38dc <z_arm_irq_priority_set+0x2c>
    38bc:	4a11      	ldr	r2, [pc, #68]	; (3904 <z_arm_irq_priority_set+0x54>)
    38be:	4912      	ldr	r1, [pc, #72]	; (3908 <z_arm_irq_priority_set+0x58>)
    38c0:	4812      	ldr	r0, [pc, #72]	; (390c <z_arm_irq_priority_set+0x5c>)
    38c2:	2357      	movs	r3, #87	; 0x57
    38c4:	f007 f845 	bl	a952 <assert_print>
    38c8:	4811      	ldr	r0, [pc, #68]	; (3910 <z_arm_irq_priority_set+0x60>)
    38ca:	4631      	mov	r1, r6
    38cc:	2307      	movs	r3, #7
    38ce:	4622      	mov	r2, r4
    38d0:	f007 f83f 	bl	a952 <assert_print>
    38d4:	480b      	ldr	r0, [pc, #44]	; (3904 <z_arm_irq_priority_set+0x54>)
    38d6:	2157      	movs	r1, #87	; 0x57
    38d8:	f007 f834 	bl	a944 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    38dc:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    38de:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38e0:	bfac      	ite	ge
    38e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38e6:	4b0b      	ldrlt	r3, [pc, #44]	; (3914 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38e8:	ea4f 1545 	mov.w	r5, r5, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38ec:	bfb8      	it	lt
    38ee:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38f2:	b2ed      	uxtb	r5, r5
    38f4:	bfaa      	itet	ge
    38f6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38fa:	541d      	strblt	r5, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38fc:	f880 5300 	strbge.w	r5, [r0, #768]	; 0x300
}
    3900:	bd70      	pop	{r4, r5, r6, pc}
    3902:	bf00      	nop
    3904:	0000c8e8 	.word	0x0000c8e8
    3908:	0000c91e 	.word	0x0000c91e
    390c:	0000c18a 	.word	0x0000c18a
    3910:	0000c939 	.word	0x0000c939
    3914:	e000ed14 	.word	0xe000ed14

00003918 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3918:	bf30      	wfi
    b z_SysNmiOnReset
    391a:	f7ff bffd 	b.w	3918 <z_SysNmiOnReset>
    391e:	bf00      	nop

00003920 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3920:	4a0b      	ldr	r2, [pc, #44]	; (3950 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3922:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3924:	4b0b      	ldr	r3, [pc, #44]	; (3954 <z_arm_prep_c+0x34>)
    3926:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    392a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    392c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3930:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3934:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3938:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    393c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3940:	f003 fa6c 	bl	6e1c <z_bss_zero>
	z_data_copy();
    3944:	f005 f98a 	bl	8c5c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3948:	f000 fbe0 	bl	410c <z_arm_interrupt_init>
	z_cstart();
    394c:	f003 faaa 	bl	6ea4 <z_cstart>
    3950:	00000000 	.word	0x00000000
    3954:	e000ed00 	.word	0xe000ed00

00003958 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3958:	4a09      	ldr	r2, [pc, #36]	; (3980 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    395a:	490a      	ldr	r1, [pc, #40]	; (3984 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    395c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    395e:	6809      	ldr	r1, [r1, #0]
    3960:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3962:	4909      	ldr	r1, [pc, #36]	; (3988 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3964:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3966:	684b      	ldr	r3, [r1, #4]
    3968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    396c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    396e:	2300      	movs	r3, #0
    3970:	f383 8811 	msr	BASEPRI, r3
    3974:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3978:	6893      	ldr	r3, [r2, #8]
}
    397a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    397c:	4770      	bx	lr
    397e:	bf00      	nop
    3980:	20004f00 	.word	0x20004f00
    3984:	0000bf1c 	.word	0x0000bf1c
    3988:	e000ed00 	.word	0xe000ed00

0000398c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    398c:	4912      	ldr	r1, [pc, #72]	; (39d8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    398e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3990:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3994:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3996:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    399a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    399e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    39a0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    39a4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    39a8:	4f0c      	ldr	r7, [pc, #48]	; (39dc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    39aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    39ae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    39b0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    39b2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    39b4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    39b6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    39b8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    39ba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    39be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    39c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    39c2:	f000 fc3f 	bl	4244 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    39c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    39ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    39ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    39d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    39d6:	4770      	bx	lr
    ldr r1, =_kernel
    39d8:	20004f00 	.word	0x20004f00
    ldr v4, =_SCS_ICSR
    39dc:	e000ed04 	.word	0xe000ed04

000039e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    39e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    39e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    39e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    39ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    39ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    39f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    39f4:	2902      	cmp	r1, #2
    beq _oops
    39f6:	d0ff      	beq.n	39f8 <_oops>

000039f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    39f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    39fa:	f007 f834 	bl	aa66 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    39fe:	bd01      	pop	{r0, pc}

00003a00 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3a00:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3a04:	9b00      	ldr	r3, [sp, #0]
    3a06:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3a0a:	490a      	ldr	r1, [pc, #40]	; (3a34 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3a12:	9b02      	ldr	r3, [sp, #8]
    3a14:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3a18:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3a20:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3a24:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3a28:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3a2a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3a2c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3a2e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop
    3a34:	0000a77d 	.word	0x0000a77d

00003a38 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3a38:	4a09      	ldr	r2, [pc, #36]	; (3a60 <z_check_thread_stack_fail+0x28>)
{
    3a3a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3a3c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3a3e:	b170      	cbz	r0, 3a5e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3a40:	f113 0f16 	cmn.w	r3, #22
    3a44:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3a46:	d005      	beq.n	3a54 <z_check_thread_stack_fail+0x1c>
    3a48:	f1a0 0220 	sub.w	r2, r0, #32
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d805      	bhi.n	3a5c <z_check_thread_stack_fail+0x24>
    3a50:	4283      	cmp	r3, r0
    3a52:	d203      	bcs.n	3a5c <z_check_thread_stack_fail+0x24>
		return 0;
    3a54:	4281      	cmp	r1, r0
    3a56:	bf28      	it	cs
    3a58:	2000      	movcs	r0, #0
    3a5a:	4770      	bx	lr
    3a5c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3a5e:	4770      	bx	lr
    3a60:	20004f00 	.word	0x20004f00

00003a64 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3a64:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3a66:	4b09      	ldr	r3, [pc, #36]	; (3a8c <arch_switch_to_main_thread+0x28>)
    3a68:	6098      	str	r0, [r3, #8]
{
    3a6a:	460d      	mov	r5, r1
    3a6c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3a6e:	f000 fbe9 	bl	4244 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3a72:	4620      	mov	r0, r4
    3a74:	f385 8809 	msr	PSP, r5
    3a78:	2100      	movs	r1, #0
    3a7a:	b663      	cpsie	if
    3a7c:	f381 8811 	msr	BASEPRI, r1
    3a80:	f3bf 8f6f 	isb	sy
    3a84:	2200      	movs	r2, #0
    3a86:	2300      	movs	r3, #0
    3a88:	f006 fe78 	bl	a77c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3a8c:	20004f00 	.word	0x20004f00

00003a90 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3a90:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3a92:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3a94:	4a0b      	ldr	r2, [pc, #44]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3a96:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3a98:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3a9a:	bf1e      	ittt	ne
	movne	r1, #0
    3a9c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3a9e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3aa0:	f007 fc90 	blne	b3c4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3aa4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3aa6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3aaa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3aae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3ab2:	4905      	ldr	r1, [pc, #20]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3ab4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3ab6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3ab8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3aba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3abe:	4903      	ldr	r1, [pc, #12]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
	bx r1
    3ac0:	4708      	bx	r1
    3ac2:	0000      	.short	0x0000
	ldr r2, =_kernel
    3ac4:	20004f00 	.word	0x20004f00
	ldr r1, =_sw_isr_table
    3ac8:	0000ba78 	.word	0x0000ba78
	ldr r1, =z_arm_int_exit
    3acc:	00003ad1 	.word	0x00003ad1

00003ad0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3ad0:	4b04      	ldr	r3, [pc, #16]	; (3ae4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3ad2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3ad4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3ad6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3ad8:	d003      	beq.n	3ae2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3ada:	4903      	ldr	r1, [pc, #12]	; (3ae8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ae0:	600a      	str	r2, [r1, #0]

00003ae2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ae2:	4770      	bx	lr
	ldr r3, =_kernel
    3ae4:	20004f00 	.word	0x20004f00
	ldr r1, =_SCS_ICSR
    3ae8:	e000ed04 	.word	0xe000ed04

00003aec <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3af0:	2400      	movs	r4, #0
    3af2:	4b3b      	ldr	r3, [pc, #236]	; (3be0 <bus_fault.constprop.0+0xf4>)
    3af4:	9302      	str	r3, [sp, #8]
    3af6:	e9cd 4400 	strd	r4, r4, [sp]
    3afa:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3afc:	4607      	mov	r7, r0
    3afe:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3b00:	2201      	movs	r2, #1
    3b02:	4938      	ldr	r1, [pc, #224]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b04:	4620      	mov	r0, r4
    3b06:	f006 ffbd 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3b0a:	4b37      	ldr	r3, [pc, #220]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b0e:	04db      	lsls	r3, r3, #19
    3b10:	d509      	bpl.n	3b26 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    3b12:	4b36      	ldr	r3, [pc, #216]	; (3bec <bus_fault.constprop.0+0x100>)
    3b14:	4933      	ldr	r1, [pc, #204]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b16:	9400      	str	r4, [sp, #0]
    3b18:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3b1c:	2201      	movs	r2, #1
    3b1e:	4623      	mov	r3, r4
    3b20:	4620      	mov	r0, r4
    3b22:	f006 ffaf 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3b26:	4b30      	ldr	r3, [pc, #192]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b2a:	051d      	lsls	r5, r3, #20
    3b2c:	d509      	bpl.n	3b42 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    3b2e:	4b30      	ldr	r3, [pc, #192]	; (3bf0 <bus_fault.constprop.0+0x104>)
    3b30:	9302      	str	r3, [sp, #8]
    3b32:	2300      	movs	r3, #0
    3b34:	e9cd 3300 	strd	r3, r3, [sp]
    3b38:	492a      	ldr	r1, [pc, #168]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b3a:	2201      	movs	r2, #1
    3b3c:	4618      	mov	r0, r3
    3b3e:	f006 ffa1 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3b42:	4d29      	ldr	r5, [pc, #164]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3b44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b46:	059c      	lsls	r4, r3, #22
    3b48:	d51e      	bpl.n	3b88 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    3b4a:	2400      	movs	r4, #0
    3b4c:	4b29      	ldr	r3, [pc, #164]	; (3bf4 <bus_fault.constprop.0+0x108>)
    3b4e:	9302      	str	r3, [sp, #8]
    3b50:	2201      	movs	r2, #1
    3b52:	4623      	mov	r3, r4
    3b54:	4620      	mov	r0, r4
    3b56:	e9cd 4400 	strd	r4, r4, [sp]
    3b5a:	4922      	ldr	r1, [pc, #136]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b5c:	f006 ff92 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3b60:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3b62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    3b64:	0410      	lsls	r0, r2, #16
    3b66:	d50f      	bpl.n	3b88 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3b68:	9303      	str	r3, [sp, #12]
    3b6a:	4b23      	ldr	r3, [pc, #140]	; (3bf8 <bus_fault.constprop.0+0x10c>)
    3b6c:	491d      	ldr	r1, [pc, #116]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b6e:	9400      	str	r4, [sp, #0]
    3b70:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3b74:	2201      	movs	r2, #1
    3b76:	4623      	mov	r3, r4
    3b78:	4620      	mov	r0, r4
    3b7a:	f006 ff83 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3b7e:	b11f      	cbz	r7, 3b88 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3b80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3b86:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3b88:	4b17      	ldr	r3, [pc, #92]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b8c:	0559      	lsls	r1, r3, #21
    3b8e:	d509      	bpl.n	3ba4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    3b90:	4b1a      	ldr	r3, [pc, #104]	; (3bfc <bus_fault.constprop.0+0x110>)
    3b92:	9302      	str	r3, [sp, #8]
    3b94:	2300      	movs	r3, #0
    3b96:	e9cd 3300 	strd	r3, r3, [sp]
    3b9a:	4912      	ldr	r1, [pc, #72]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3b9c:	2201      	movs	r2, #1
    3b9e:	4618      	mov	r0, r3
    3ba0:	f006 ff70 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3ba4:	4a10      	ldr	r2, [pc, #64]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3ba6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ba8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    3bac:	d012      	beq.n	3bd4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    3bae:	4b14      	ldr	r3, [pc, #80]	; (3c00 <bus_fault.constprop.0+0x114>)
    3bb0:	9302      	str	r3, [sp, #8]
    3bb2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3bb4:	e9cd 3300 	strd	r3, r3, [sp]
    3bb8:	490a      	ldr	r1, [pc, #40]	; (3be4 <bus_fault.constprop.0+0xf8>)
    3bba:	2201      	movs	r2, #1
    3bbc:	4618      	mov	r0, r3
    3bbe:	f006 ff61 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3bc2:	4a09      	ldr	r2, [pc, #36]	; (3be8 <bus_fault.constprop.0+0xfc>)
    3bc4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3bc6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3bc8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3bcc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3bce:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3bd0:	b005      	add	sp, #20
    3bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3bd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3bd6:	0492      	lsls	r2, r2, #18
    3bd8:	d5f3      	bpl.n	3bc2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3bda:	4a0a      	ldr	r2, [pc, #40]	; (3c04 <bus_fault.constprop.0+0x118>)
    3bdc:	9202      	str	r2, [sp, #8]
    3bde:	e7e9      	b.n	3bb4 <bus_fault.constprop.0+0xc8>
    3be0:	0000c979 	.word	0x0000c979
    3be4:	0000bc20 	.word	0x0000bc20
    3be8:	e000ed00 	.word	0xe000ed00
    3bec:	0000c98f 	.word	0x0000c98f
    3bf0:	0000c9a0 	.word	0x0000c9a0
    3bf4:	0000c9b3 	.word	0x0000c9b3
    3bf8:	0000c9cc 	.word	0x0000c9cc
    3bfc:	0000c9e1 	.word	0x0000c9e1
    3c00:	0000c9fc 	.word	0x0000c9fc
    3c04:	0000ca14 	.word	0x0000ca14

00003c08 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3c0a:	2400      	movs	r4, #0
    3c0c:	4b33      	ldr	r3, [pc, #204]	; (3cdc <usage_fault.constprop.0+0xd4>)
    3c0e:	9302      	str	r3, [sp, #8]
    3c10:	e9cd 4400 	strd	r4, r4, [sp]
    3c14:	4623      	mov	r3, r4
    3c16:	4932      	ldr	r1, [pc, #200]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3c18:	2201      	movs	r2, #1
    3c1a:	4620      	mov	r0, r4
    3c1c:	f006 ff32 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3c20:	4b30      	ldr	r3, [pc, #192]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c24:	019b      	lsls	r3, r3, #6
    3c26:	d509      	bpl.n	3c3c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    3c28:	4b2f      	ldr	r3, [pc, #188]	; (3ce8 <usage_fault.constprop.0+0xe0>)
    3c2a:	492d      	ldr	r1, [pc, #180]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3c2c:	9400      	str	r4, [sp, #0]
    3c2e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3c32:	2201      	movs	r2, #1
    3c34:	4623      	mov	r3, r4
    3c36:	4620      	mov	r0, r4
    3c38:	f006 ff24 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3c3c:	4b29      	ldr	r3, [pc, #164]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c40:	01dc      	lsls	r4, r3, #7
    3c42:	d509      	bpl.n	3c58 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    3c44:	4b29      	ldr	r3, [pc, #164]	; (3cec <usage_fault.constprop.0+0xe4>)
    3c46:	9302      	str	r3, [sp, #8]
    3c48:	2300      	movs	r3, #0
    3c4a:	e9cd 3300 	strd	r3, r3, [sp]
    3c4e:	4924      	ldr	r1, [pc, #144]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3c50:	2201      	movs	r2, #1
    3c52:	4618      	mov	r0, r3
    3c54:	f006 ff16 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3c58:	4b22      	ldr	r3, [pc, #136]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c5c:	0318      	lsls	r0, r3, #12
    3c5e:	d509      	bpl.n	3c74 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3c60:	4b23      	ldr	r3, [pc, #140]	; (3cf0 <usage_fault.constprop.0+0xe8>)
    3c62:	9302      	str	r3, [sp, #8]
    3c64:	2300      	movs	r3, #0
    3c66:	e9cd 3300 	strd	r3, r3, [sp]
    3c6a:	491d      	ldr	r1, [pc, #116]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3c6c:	2201      	movs	r2, #1
    3c6e:	4618      	mov	r0, r3
    3c70:	f006 ff08 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3c74:	4b1b      	ldr	r3, [pc, #108]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c78:	0359      	lsls	r1, r3, #13
    3c7a:	d509      	bpl.n	3c90 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3c7c:	4b1d      	ldr	r3, [pc, #116]	; (3cf4 <usage_fault.constprop.0+0xec>)
    3c7e:	9302      	str	r3, [sp, #8]
    3c80:	2300      	movs	r3, #0
    3c82:	e9cd 3300 	strd	r3, r3, [sp]
    3c86:	4916      	ldr	r1, [pc, #88]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3c88:	2201      	movs	r2, #1
    3c8a:	4618      	mov	r0, r3
    3c8c:	f006 fefa 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3c90:	4b14      	ldr	r3, [pc, #80]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c94:	039a      	lsls	r2, r3, #14
    3c96:	d509      	bpl.n	3cac <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3c98:	4b17      	ldr	r3, [pc, #92]	; (3cf8 <usage_fault.constprop.0+0xf0>)
    3c9a:	9302      	str	r3, [sp, #8]
    3c9c:	2300      	movs	r3, #0
    3c9e:	e9cd 3300 	strd	r3, r3, [sp]
    3ca2:	490f      	ldr	r1, [pc, #60]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3ca4:	2201      	movs	r2, #1
    3ca6:	4618      	mov	r0, r3
    3ca8:	f006 feec 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3cac:	4b0d      	ldr	r3, [pc, #52]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cb0:	03db      	lsls	r3, r3, #15
    3cb2:	d509      	bpl.n	3cc8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3cb4:	4b11      	ldr	r3, [pc, #68]	; (3cfc <usage_fault.constprop.0+0xf4>)
    3cb6:	9302      	str	r3, [sp, #8]
    3cb8:	2300      	movs	r3, #0
    3cba:	e9cd 3300 	strd	r3, r3, [sp]
    3cbe:	4908      	ldr	r1, [pc, #32]	; (3ce0 <usage_fault.constprop.0+0xd8>)
    3cc0:	2201      	movs	r2, #1
    3cc2:	4618      	mov	r0, r3
    3cc4:	f006 fede 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3cc8:	4a06      	ldr	r2, [pc, #24]	; (3ce4 <usage_fault.constprop.0+0xdc>)
    3cca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3ccc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3cd0:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    3cd4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3cd6:	6293      	str	r3, [r2, #40]	; 0x28
}
    3cd8:	b004      	add	sp, #16
    3cda:	bd10      	pop	{r4, pc}
    3cdc:	0000ca43 	.word	0x0000ca43
    3ce0:	0000bc20 	.word	0x0000bc20
    3ce4:	e000ed00 	.word	0xe000ed00
    3ce8:	0000ca5b 	.word	0x0000ca5b
    3cec:	0000ca6e 	.word	0x0000ca6e
    3cf0:	0000ca88 	.word	0x0000ca88
    3cf4:	0000caa6 	.word	0x0000caa6
    3cf8:	0000cacb 	.word	0x0000cacb
    3cfc:	0000cae5 	.word	0x0000cae5

00003d00 <mem_manage_fault>:
{
    3d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d04:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    3d06:	2400      	movs	r4, #0
    3d08:	4b52      	ldr	r3, [pc, #328]	; (3e54 <mem_manage_fault+0x154>)
    3d0a:	9302      	str	r3, [sp, #8]
    3d0c:	e9cd 4400 	strd	r4, r4, [sp]
    3d10:	4623      	mov	r3, r4
{
    3d12:	4680      	mov	r8, r0
    3d14:	4689      	mov	r9, r1
    3d16:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3d18:	494f      	ldr	r1, [pc, #316]	; (3e58 <mem_manage_fault+0x158>)
    3d1a:	2201      	movs	r2, #1
    3d1c:	4620      	mov	r0, r4
    3d1e:	f006 feb1 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3d22:	4b4e      	ldr	r3, [pc, #312]	; (3e5c <mem_manage_fault+0x15c>)
    3d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d26:	06df      	lsls	r7, r3, #27
    3d28:	d509      	bpl.n	3d3e <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3d2a:	4b4d      	ldr	r3, [pc, #308]	; (3e60 <mem_manage_fault+0x160>)
    3d2c:	494a      	ldr	r1, [pc, #296]	; (3e58 <mem_manage_fault+0x158>)
    3d2e:	9400      	str	r4, [sp, #0]
    3d30:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d34:	2201      	movs	r2, #1
    3d36:	4623      	mov	r3, r4
    3d38:	4620      	mov	r0, r4
    3d3a:	f006 fea3 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3d3e:	4b47      	ldr	r3, [pc, #284]	; (3e5c <mem_manage_fault+0x15c>)
    3d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d42:	071d      	lsls	r5, r3, #28
    3d44:	d509      	bpl.n	3d5a <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    3d46:	4b47      	ldr	r3, [pc, #284]	; (3e64 <mem_manage_fault+0x164>)
    3d48:	9302      	str	r3, [sp, #8]
    3d4a:	2300      	movs	r3, #0
    3d4c:	e9cd 3300 	strd	r3, r3, [sp]
    3d50:	4941      	ldr	r1, [pc, #260]	; (3e58 <mem_manage_fault+0x158>)
    3d52:	2201      	movs	r2, #1
    3d54:	4618      	mov	r0, r3
    3d56:	f006 fe95 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3d5a:	4d40      	ldr	r5, [pc, #256]	; (3e5c <mem_manage_fault+0x15c>)
    3d5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d5e:	079c      	lsls	r4, r3, #30
    3d60:	d441      	bmi.n	3de6 <mem_manage_fault+0xe6>
	uint32_t mmfar = -EINVAL;
    3d62:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3d66:	4b3d      	ldr	r3, [pc, #244]	; (3e5c <mem_manage_fault+0x15c>)
    3d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d6a:	07d9      	lsls	r1, r3, #31
    3d6c:	d509      	bpl.n	3d82 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    3d6e:	4b3e      	ldr	r3, [pc, #248]	; (3e68 <mem_manage_fault+0x168>)
    3d70:	9302      	str	r3, [sp, #8]
    3d72:	2300      	movs	r3, #0
    3d74:	e9cd 3300 	strd	r3, r3, [sp]
    3d78:	4937      	ldr	r1, [pc, #220]	; (3e58 <mem_manage_fault+0x158>)
    3d7a:	2201      	movs	r2, #1
    3d7c:	4618      	mov	r0, r3
    3d7e:	f006 fe81 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d82:	4b36      	ldr	r3, [pc, #216]	; (3e5c <mem_manage_fault+0x15c>)
    3d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d86:	069a      	lsls	r2, r3, #26
    3d88:	d509      	bpl.n	3d9e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    3d8a:	4b38      	ldr	r3, [pc, #224]	; (3e6c <mem_manage_fault+0x16c>)
    3d8c:	9302      	str	r3, [sp, #8]
    3d8e:	2300      	movs	r3, #0
    3d90:	e9cd 3300 	strd	r3, r3, [sp]
    3d94:	4930      	ldr	r1, [pc, #192]	; (3e58 <mem_manage_fault+0x158>)
    3d96:	2201      	movs	r2, #1
    3d98:	4618      	mov	r0, r3
    3d9a:	f006 fe73 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3d9e:	4c2f      	ldr	r4, [pc, #188]	; (3e5c <mem_manage_fault+0x15c>)
    3da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3da2:	06db      	lsls	r3, r3, #27
    3da4:	d402      	bmi.n	3dac <mem_manage_fault+0xac>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3da8:	079d      	lsls	r5, r3, #30
    3daa:	d550      	bpl.n	3e4e <mem_manage_fault+0x14e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3dac:	6863      	ldr	r3, [r4, #4]
    3dae:	0518      	lsls	r0, r3, #20
    3db0:	d54d      	bpl.n	3e4e <mem_manage_fault+0x14e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3db2:	4641      	mov	r1, r8
    3db4:	4638      	mov	r0, r7
    3db6:	f7ff fe3f 	bl	3a38 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3dba:	2800      	cmp	r0, #0
    3dbc:	d035      	beq.n	3e2a <mem_manage_fault+0x12a>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3dbe:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3dc2:	2002      	movs	r0, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3dc4:	4b25      	ldr	r3, [pc, #148]	; (3e5c <mem_manage_fault+0x15c>)
    3dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dc8:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3dca:	bf42      	ittt	mi
    3dcc:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3dce:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3dd2:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3dd6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    3dda:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3ddc:	2300      	movs	r3, #0
    3dde:	7033      	strb	r3, [r6, #0]
}
    3de0:	b005      	add	sp, #20
    3de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3de6:	2400      	movs	r4, #0
    3de8:	4b21      	ldr	r3, [pc, #132]	; (3e70 <mem_manage_fault+0x170>)
    3dea:	9302      	str	r3, [sp, #8]
    3dec:	4620      	mov	r0, r4
    3dee:	4623      	mov	r3, r4
    3df0:	e9cd 4400 	strd	r4, r4, [sp]
    3df4:	4918      	ldr	r1, [pc, #96]	; (3e58 <mem_manage_fault+0x158>)
    3df6:	2201      	movs	r2, #1
    3df8:	f006 fe44 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3dfc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3dfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e00:	0618      	lsls	r0, r3, #24
    3e02:	d5ae      	bpl.n	3d62 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3e04:	4b1b      	ldr	r3, [pc, #108]	; (3e74 <mem_manage_fault+0x174>)
    3e06:	4914      	ldr	r1, [pc, #80]	; (3e58 <mem_manage_fault+0x158>)
    3e08:	9703      	str	r7, [sp, #12]
    3e0a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3e0e:	9400      	str	r4, [sp, #0]
    3e10:	4623      	mov	r3, r4
    3e12:	2201      	movs	r2, #1
    3e14:	4620      	mov	r0, r4
    3e16:	f006 fe35 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3e1a:	f1b9 0f00 	cmp.w	r9, #0
    3e1e:	d0a2      	beq.n	3d66 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3e20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3e26:	62ab      	str	r3, [r5, #40]	; 0x28
    3e28:	e79d      	b.n	3d66 <mem_manage_fault+0x66>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3e2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e2c:	06d9      	lsls	r1, r3, #27
    3e2e:	d50e      	bpl.n	3e4e <mem_manage_fault+0x14e>
    3e30:	4911      	ldr	r1, [pc, #68]	; (3e78 <mem_manage_fault+0x178>)
    3e32:	4a12      	ldr	r2, [pc, #72]	; (3e7c <mem_manage_fault+0x17c>)
    3e34:	4812      	ldr	r0, [pc, #72]	; (3e80 <mem_manage_fault+0x180>)
    3e36:	f240 1349 	movw	r3, #329	; 0x149
    3e3a:	f006 fd8a 	bl	a952 <assert_print>
    3e3e:	4811      	ldr	r0, [pc, #68]	; (3e84 <mem_manage_fault+0x184>)
    3e40:	f006 fd87 	bl	a952 <assert_print>
    3e44:	480d      	ldr	r0, [pc, #52]	; (3e7c <mem_manage_fault+0x17c>)
    3e46:	f240 1149 	movw	r1, #329	; 0x149
    3e4a:	f006 fd7b 	bl	a944 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3e4e:	2000      	movs	r0, #0
    3e50:	e7b8      	b.n	3dc4 <mem_manage_fault+0xc4>
    3e52:	bf00      	nop
    3e54:	0000cb10 	.word	0x0000cb10
    3e58:	0000bc20 	.word	0x0000bc20
    3e5c:	e000ed00 	.word	0xe000ed00
    3e60:	0000cb26 	.word	0x0000cb26
    3e64:	0000c9a0 	.word	0x0000c9a0
    3e68:	0000cb87 	.word	0x0000cb87
    3e6c:	0000ca14 	.word	0x0000ca14
    3e70:	0000cb59 	.word	0x0000cb59
    3e74:	0000cb71 	.word	0x0000cb71
    3e78:	0000cbe0 	.word	0x0000cbe0
    3e7c:	0000cba6 	.word	0x0000cba6
    3e80:	0000c18a 	.word	0x0000c18a
    3e84:	0000cc2a 	.word	0x0000cc2a

00003e88 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3e8c:	4b83      	ldr	r3, [pc, #524]	; (409c <z_arm_fault+0x214>)
    3e8e:	685f      	ldr	r7, [r3, #4]
{
    3e90:	b090      	sub	sp, #64	; 0x40
    3e92:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3e94:	f3c7 0608 	ubfx	r6, r7, #0, #9
    3e98:	2300      	movs	r3, #0
    3e9a:	f383 8811 	msr	BASEPRI, r3
    3e9e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3ea2:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    3ea6:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    3eaa:	d10c      	bne.n	3ec6 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3eac:	f002 000c 	and.w	r0, r2, #12
    3eb0:	2808      	cmp	r0, #8
    3eb2:	d11a      	bne.n	3eea <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3eb4:	4a7a      	ldr	r2, [pc, #488]	; (40a0 <z_arm_fault+0x218>)
    3eb6:	497b      	ldr	r1, [pc, #492]	; (40a4 <z_arm_fault+0x21c>)
    3eb8:	9300      	str	r3, [sp, #0]
    3eba:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3ebe:	4618      	mov	r0, r3
    3ec0:	2201      	movs	r2, #1
    3ec2:	f006 fddf 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	*nested_exc = false;
    3ec6:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3ec8:	4a77      	ldr	r2, [pc, #476]	; (40a8 <z_arm_fault+0x220>)
    3eca:	4978      	ldr	r1, [pc, #480]	; (40ac <z_arm_fault+0x224>)
    3ecc:	4878      	ldr	r0, [pc, #480]	; (40b0 <z_arm_fault+0x228>)
    3ece:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3ed2:	f006 fd3e 	bl	a952 <assert_print>
    3ed6:	4877      	ldr	r0, [pc, #476]	; (40b4 <z_arm_fault+0x22c>)
    3ed8:	f006 fd3b 	bl	a952 <assert_print>
    3edc:	4872      	ldr	r0, [pc, #456]	; (40a8 <z_arm_fault+0x220>)
    3ede:	f240 31fb 	movw	r1, #1019	; 0x3fb
    3ee2:	f006 fd2f 	bl	a944 <assert_post_action>
    3ee6:	2400      	movs	r4, #0
    3ee8:	e006      	b.n	3ef8 <z_arm_fault+0x70>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3eea:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3eec:	bf46      	itte	mi
    3eee:	460c      	movmi	r4, r1
	*nested_exc = false;
    3ef0:	461d      	movmi	r5, r3
			*nested_exc = true;
    3ef2:	2501      	movpl	r5, #1
	__ASSERT(esf != NULL,
    3ef4:	2c00      	cmp	r4, #0
    3ef6:	d0e7      	beq.n	3ec8 <z_arm_fault+0x40>
	*recoverable = false;
    3ef8:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    3efc:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    3efe:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    3f02:	2b09      	cmp	r3, #9
    3f04:	f200 80b0 	bhi.w	4068 <z_arm_fault+0x1e0>
    3f08:	e8df f003 	tbb	[pc, r3]
    3f0c:	83a8a405 	.word	0x83a8a405
    3f10:	aeaeaeae 	.word	0xaeaeaeae
    3f14:	acae      	.short	0xacae
	PR_FAULT_INFO("***** HARD FAULT *****");
    3f16:	4b68      	ldr	r3, [pc, #416]	; (40b8 <z_arm_fault+0x230>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f18:	4f60      	ldr	r7, [pc, #384]	; (409c <z_arm_fault+0x214>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    3f1a:	4962      	ldr	r1, [pc, #392]	; (40a4 <z_arm_fault+0x21c>)
    3f1c:	f8cd 8000 	str.w	r8, [sp]
    3f20:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3f24:	2300      	movs	r3, #0
    3f26:	2201      	movs	r2, #1
    3f28:	4618      	mov	r0, r3
    3f2a:	f006 fdab 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f2e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
	*recoverable = false;
    3f30:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3f34:	f016 0602 	ands.w	r6, r6, #2
    3f38:	d00c      	beq.n	3f54 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
    3f3a:	4b60      	ldr	r3, [pc, #384]	; (40bc <z_arm_fault+0x234>)
    3f3c:	f8cd 8000 	str.w	r8, [sp]
    3f40:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3f44:	2300      	movs	r3, #0
    3f46:	4957      	ldr	r1, [pc, #348]	; (40a4 <z_arm_fault+0x21c>)
    3f48:	2201      	movs	r2, #1
    3f4a:	4618      	mov	r0, r3
    3f4c:	f006 fd9a 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3f50:	2200      	movs	r2, #0
    3f52:	e028      	b.n	3fa6 <z_arm_fault+0x11e>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f56:	2b00      	cmp	r3, #0
    3f58:	da04      	bge.n	3f64 <z_arm_fault+0xdc>
		PR_EXC("  Debug event");
    3f5a:	4b59      	ldr	r3, [pc, #356]	; (40c0 <z_arm_fault+0x238>)
    3f5c:	9600      	str	r6, [sp, #0]
    3f5e:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3f62:	e7ef      	b.n	3f44 <z_arm_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f66:	005b      	lsls	r3, r3, #1
    3f68:	d567      	bpl.n	403a <z_arm_fault+0x1b2>
		PR_EXC("  Fault escalation (see below)");
    3f6a:	4b56      	ldr	r3, [pc, #344]	; (40c4 <z_arm_fault+0x23c>)
    3f6c:	494d      	ldr	r1, [pc, #308]	; (40a4 <z_arm_fault+0x21c>)
    3f6e:	9600      	str	r6, [sp, #0]
    3f70:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3f74:	2201      	movs	r2, #1
    3f76:	4633      	mov	r3, r6
    3f78:	4630      	mov	r0, r6
    3f7a:	f006 fd83 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    3f7e:	69a3      	ldr	r3, [r4, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3f80:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3f84:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3f88:	429a      	cmp	r2, r3
    3f8a:	d12c      	bne.n	3fe6 <z_arm_fault+0x15e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3f8c:	6823      	ldr	r3, [r4, #0]
    3f8e:	9303      	str	r3, [sp, #12]
    3f90:	4b4d      	ldr	r3, [pc, #308]	; (40c8 <z_arm_fault+0x240>)
    3f92:	4944      	ldr	r1, [pc, #272]	; (40a4 <z_arm_fault+0x21c>)
    3f94:	9600      	str	r6, [sp, #0]
    3f96:	e9cd 6301 	strd	r6, r3, [sp, #4]
    3f9a:	2201      	movs	r2, #1
    3f9c:	4633      	mov	r3, r6
    3f9e:	4630      	mov	r0, r6
    3fa0:	f006 fd70 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    3fa4:	6822      	ldr	r2, [r4, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3fa6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3faa:	b9cb      	cbnz	r3, 3fe0 <z_arm_fault+0x158>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3fac:	ae08      	add	r6, sp, #32
    3fae:	f104 0720 	add.w	r7, r4, #32
    3fb2:	6820      	ldr	r0, [r4, #0]
    3fb4:	6861      	ldr	r1, [r4, #4]
    3fb6:	4633      	mov	r3, r6
    3fb8:	c303      	stmia	r3!, {r0, r1}
    3fba:	3408      	adds	r4, #8
    3fbc:	42bc      	cmp	r4, r7
    3fbe:	461e      	mov	r6, r3
    3fc0:	d1f7      	bne.n	3fb2 <z_arm_fault+0x12a>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3fc4:	2d00      	cmp	r5, #0
    3fc6:	d063      	beq.n	4090 <z_arm_fault+0x208>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3fc8:	f3c3 0108 	ubfx	r1, r3, #0, #9
    3fcc:	b921      	cbnz	r1, 3fd8 <z_arm_fault+0x150>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3fce:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3fd2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3fd6:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    3fd8:	a908      	add	r1, sp, #32
    3fda:	4610      	mov	r0, r2
    3fdc:	f7ff fbfc 	bl	37d8 <z_arm_fatal_error>
}
    3fe0:	b010      	add	sp, #64	; 0x40
    3fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (SCB_MMFSR != 0) {
    3fe6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    3fea:	b133      	cbz	r3, 3ffa <z_arm_fault+0x172>
			reason = mem_manage_fault(esf, 1, recoverable);
    3fec:	f10d 021f 	add.w	r2, sp, #31
    3ff0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3ff2:	4620      	mov	r0, r4
    3ff4:	f7ff fe84 	bl	3d00 <mem_manage_fault>
    3ff8:	e00d      	b.n	4016 <z_arm_fault+0x18e>
		} else if (SCB_BFSR != 0) {
    3ffa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    3ffe:	b12b      	cbz	r3, 400c <z_arm_fault+0x184>
			reason = bus_fault(esf, 1, recoverable);
    4000:	f10d 011f 	add.w	r1, sp, #31
    4004:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4006:	f7ff fd71 	bl	3aec <bus_fault.constprop.0>
    400a:	e004      	b.n	4016 <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
    400c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    400e:	b29b      	uxth	r3, r3
    4010:	b11b      	cbz	r3, 401a <z_arm_fault+0x192>
			reason = usage_fault(esf);
    4012:	f7ff fdf9 	bl	3c08 <usage_fault.constprop.0>
    4016:	4602      	mov	r2, r0
    4018:	e7c5      	b.n	3fa6 <z_arm_fault+0x11e>
			__ASSERT(0,
    401a:	492c      	ldr	r1, [pc, #176]	; (40cc <z_arm_fault+0x244>)
    401c:	4a22      	ldr	r2, [pc, #136]	; (40a8 <z_arm_fault+0x220>)
    401e:	4824      	ldr	r0, [pc, #144]	; (40b0 <z_arm_fault+0x228>)
    4020:	f240 23cd 	movw	r3, #717	; 0x2cd
    4024:	f006 fc95 	bl	a952 <assert_print>
    4028:	4829      	ldr	r0, [pc, #164]	; (40d0 <z_arm_fault+0x248>)
    402a:	f006 fc92 	bl	a952 <assert_print>
    402e:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    4032:	481d      	ldr	r0, [pc, #116]	; (40a8 <z_arm_fault+0x220>)
    4034:	f006 fc86 	bl	a944 <assert_post_action>
    4038:	e78a      	b.n	3f50 <z_arm_fault+0xc8>
    403a:	4924      	ldr	r1, [pc, #144]	; (40cc <z_arm_fault+0x244>)
    403c:	4a1a      	ldr	r2, [pc, #104]	; (40a8 <z_arm_fault+0x220>)
    403e:	481c      	ldr	r0, [pc, #112]	; (40b0 <z_arm_fault+0x228>)
    4040:	f240 23d1 	movw	r3, #721	; 0x2d1
    4044:	f006 fc85 	bl	a952 <assert_print>
    4048:	4822      	ldr	r0, [pc, #136]	; (40d4 <z_arm_fault+0x24c>)
    404a:	f006 fc82 	bl	a952 <assert_print>
    404e:	f240 21d1 	movw	r1, #721	; 0x2d1
    4052:	e7ee      	b.n	4032 <z_arm_fault+0x1aa>
		reason = mem_manage_fault(esf, 0, recoverable);
    4054:	f10d 021f 	add.w	r2, sp, #31
    4058:	2100      	movs	r1, #0
    405a:	e7ca      	b.n	3ff2 <z_arm_fault+0x16a>
		reason = bus_fault(esf, 0, recoverable);
    405c:	f10d 011f 	add.w	r1, sp, #31
    4060:	2000      	movs	r0, #0
    4062:	e7d0      	b.n	4006 <z_arm_fault+0x17e>
	PR_FAULT_INFO(
    4064:	4b1c      	ldr	r3, [pc, #112]	; (40d8 <z_arm_fault+0x250>)
    4066:	e769      	b.n	3f3c <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    4068:	4a1c      	ldr	r2, [pc, #112]	; (40dc <z_arm_fault+0x254>)
    406a:	4b1d      	ldr	r3, [pc, #116]	; (40e0 <z_arm_fault+0x258>)
    406c:	490d      	ldr	r1, [pc, #52]	; (40a4 <z_arm_fault+0x21c>)
    406e:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    4072:	bf18      	it	ne
    4074:	4613      	movne	r3, r2
    4076:	3e10      	subs	r6, #16
    4078:	e9cd 3603 	strd	r3, r6, [sp, #12]
    407c:	4b19      	ldr	r3, [pc, #100]	; (40e4 <z_arm_fault+0x25c>)
    407e:	9302      	str	r3, [sp, #8]
    4080:	2300      	movs	r3, #0
    4082:	e9cd 3300 	strd	r3, r3, [sp]
    4086:	2201      	movs	r2, #1
    4088:	4618      	mov	r0, r3
    408a:	f006 fcfb 	bl	aa84 <z_log_msg2_runtime_create.constprop.0>
}
    408e:	e75f      	b.n	3f50 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4090:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4094:	f023 0301 	bic.w	r3, r3, #1
    4098:	e79d      	b.n	3fd6 <z_arm_fault+0x14e>
    409a:	bf00      	nop
    409c:	e000ed00 	.word	0xe000ed00
    40a0:	0000cc7b 	.word	0x0000cc7b
    40a4:	0000bc20 	.word	0x0000bc20
    40a8:	0000cba6 	.word	0x0000cba6
    40ac:	0000cca6 	.word	0x0000cca6
    40b0:	0000c18a 	.word	0x0000c18a
    40b4:	0000ccb9 	.word	0x0000ccb9
    40b8:	0000ccf7 	.word	0x0000ccf7
    40bc:	0000cd0e 	.word	0x0000cd0e
    40c0:	0000cd2f 	.word	0x0000cd2f
    40c4:	0000cd3d 	.word	0x0000cd3d
    40c8:	0000cd5c 	.word	0x0000cd5c
    40cc:	0000dab4 	.word	0x0000dab4
    40d0:	0000cd78 	.word	0x0000cd78
    40d4:	0000cd9c 	.word	0x0000cd9c
    40d8:	0000cdcc 	.word	0x0000cdcc
    40dc:	0000cc62 	.word	0x0000cc62
    40e0:	0000cc4d 	.word	0x0000cc4d
    40e4:	0000cdf0 	.word	0x0000cdf0

000040e8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    40e8:	4a02      	ldr	r2, [pc, #8]	; (40f4 <z_arm_fault_init+0xc>)
    40ea:	6953      	ldr	r3, [r2, #20]
    40ec:	f043 0310 	orr.w	r3, r3, #16
    40f0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    40f2:	4770      	bx	lr
    40f4:	e000ed00 	.word	0xe000ed00

000040f8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    40f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    40fc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4100:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4102:	4672      	mov	r2, lr
	bl z_arm_fault
    4104:	f7ff fec0 	bl	3e88 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4108:	bd01      	pop	{r0, pc}
    410a:	bf00      	nop

0000410c <z_arm_interrupt_init>:
    410c:	4804      	ldr	r0, [pc, #16]	; (4120 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    410e:	2300      	movs	r3, #0
    4110:	2120      	movs	r1, #32
    4112:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4114:	3301      	adds	r3, #1
    4116:	2b30      	cmp	r3, #48	; 0x30
    4118:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    411c:	d1f9      	bne.n	4112 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    411e:	4770      	bx	lr
    4120:	e000e100 	.word	0xe000e100

00004124 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4124:	2000      	movs	r0, #0
    msr CONTROL, r0
    4126:	f380 8814 	msr	CONTROL, r0
    isb
    412a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    412e:	f007 fc25 	bl	b97c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4132:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4134:	490d      	ldr	r1, [pc, #52]	; (416c <__start+0x48>)
    str r0, [r1]
    4136:	6008      	str	r0, [r1, #0]
    dsb
    4138:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    413c:	480c      	ldr	r0, [pc, #48]	; (4170 <__start+0x4c>)
    msr msp, r0
    413e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4142:	f000 f82b 	bl	419c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4146:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4148:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    414c:	4809      	ldr	r0, [pc, #36]	; (4174 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    414e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4152:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4154:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4158:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    415c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    415e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4160:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4164:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4168:	f7ff fbda 	bl	3920 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    416c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4170:	20008b80 	.word	0x20008b80
    ldr r0, =z_interrupt_stacks
    4174:	20007e00 	.word	0x20007e00

00004178 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4178:	4907      	ldr	r1, [pc, #28]	; (4198 <z_arm_clear_arm_mpu_config+0x20>)
    417a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    417e:	2300      	movs	r3, #0
	int num_regions =
    4180:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4184:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    4186:	4293      	cmp	r3, r2
    4188:	db00      	blt.n	418c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    418a:	4770      	bx	lr
  MPU->RNR = rnr;
    418c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4190:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4194:	3301      	adds	r3, #1
    4196:	e7f6      	b.n	4186 <z_arm_clear_arm_mpu_config+0xe>
    4198:	e000ed00 	.word	0xe000ed00

0000419c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    419c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    419e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    41a0:	2300      	movs	r3, #0
    41a2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    41a6:	f7ff ffe7 	bl	4178 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    41aa:	4b14      	ldr	r3, [pc, #80]	; (41fc <__data_size+0x48>)
    41ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    41b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    41b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    41b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    41bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    41c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    41c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    41c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    41cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    41d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    41d4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    41d8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    41dc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    41e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    41e4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    41e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    41ec:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    41f0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    41f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41f6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    41fa:	bd08      	pop	{r3, pc}
    41fc:	e000e100 	.word	0xe000e100

00004200 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4200:	4b08      	ldr	r3, [pc, #32]	; (4224 <z_impl_k_thread_abort+0x24>)
    4202:	689b      	ldr	r3, [r3, #8]
    4204:	4283      	cmp	r3, r0
    4206:	d10b      	bne.n	4220 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4208:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    420c:	b143      	cbz	r3, 4220 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    420e:	4b06      	ldr	r3, [pc, #24]	; (4228 <z_impl_k_thread_abort+0x28>)
    4210:	685a      	ldr	r2, [r3, #4]
    4212:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4216:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    421a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    421e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4220:	f004 bc68 	b.w	8af4 <z_thread_abort>
    4224:	20004f00 	.word	0x20004f00
    4228:	e000ed00 	.word	0xe000ed00

0000422c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    422c:	4b02      	ldr	r3, [pc, #8]	; (4238 <z_arm_configure_static_mpu_regions+0xc>)
    422e:	4a03      	ldr	r2, [pc, #12]	; (423c <z_arm_configure_static_mpu_regions+0x10>)
    4230:	4803      	ldr	r0, [pc, #12]	; (4240 <z_arm_configure_static_mpu_regions+0x14>)
    4232:	2101      	movs	r1, #1
    4234:	f000 b886 	b.w	4344 <arm_core_mpu_configure_static_mpu_regions>
    4238:	20040000 	.word	0x20040000
    423c:	20000000 	.word	0x20000000
    4240:	0000bdc0 	.word	0x0000bdc0

00004244 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4244:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4246:	4b05      	ldr	r3, [pc, #20]	; (425c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4248:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    424a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    424c:	4a04      	ldr	r2, [pc, #16]	; (4260 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    424e:	2120      	movs	r1, #32
    4250:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4254:	4618      	mov	r0, r3
    4256:	2101      	movs	r1, #1
    4258:	f000 b89c 	b.w	4394 <arm_core_mpu_configure_dynamic_mpu_regions>
    425c:	20004da8 	.word	0x20004da8
    4260:	150b0000 	.word	0x150b0000

00004264 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4264:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4266:	4e28      	ldr	r6, [pc, #160]	; (4308 <mpu_configure_regions+0xa4>)
    4268:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    426a:	2500      	movs	r5, #0
    426c:	428d      	cmp	r5, r1
    426e:	da15      	bge.n	429c <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    4270:	6844      	ldr	r4, [r0, #4]
    4272:	2c00      	cmp	r4, #0
    4274:	d045      	beq.n	4302 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4276:	b1d3      	cbz	r3, 42ae <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4278:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    427c:	ea14 0f0c 	tst.w	r4, ip
    4280:	d00f      	beq.n	42a2 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4282:	4b22      	ldr	r3, [pc, #136]	; (430c <mpu_configure_regions+0xa8>)
    4284:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4286:	9302      	str	r3, [sp, #8]
    4288:	2300      	movs	r3, #0
    428a:	2201      	movs	r2, #1
    428c:	e9cd 3300 	strd	r3, r3, [sp]
    4290:	491f      	ldr	r1, [pc, #124]	; (4310 <mpu_configure_regions+0xac>)
    4292:	4618      	mov	r0, r3
    4294:	f006 fc06 	bl	aaa4 <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
    4298:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    429c:	4610      	mov	r0, r2
    429e:	b005      	add	sp, #20
    42a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    42a2:	2c1f      	cmp	r4, #31
    42a4:	d9ed      	bls.n	4282 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    42a6:	6807      	ldr	r7, [r0, #0]
		&&
    42a8:	ea1c 0f07 	tst.w	ip, r7
    42ac:	d1e9      	bne.n	4282 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    42ae:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    42b0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    42b2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    42b6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    42ba:	d910      	bls.n	42de <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    42bc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    42c0:	d80f      	bhi.n	42e2 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    42c2:	3c01      	subs	r4, #1
    42c4:	fab4 f484 	clz	r4, r4
    42c8:	f1c4 041f 	rsb	r4, r4, #31
    42cc:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    42ce:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    42d2:	ea4c 0c04 	orr.w	ip, ip, r4
    42d6:	d906      	bls.n	42e6 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    42d8:	4b0e      	ldr	r3, [pc, #56]	; (4314 <mpu_configure_regions+0xb0>)
    42da:	9203      	str	r2, [sp, #12]
    42dc:	e7d3      	b.n	4286 <mpu_configure_regions+0x22>
		return REGION_32B;
    42de:	2408      	movs	r4, #8
    42e0:	e7f5      	b.n	42ce <mpu_configure_regions+0x6a>
		return REGION_4G;
    42e2:	243e      	movs	r4, #62	; 0x3e
    42e4:	e7f3      	b.n	42ce <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42e6:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    42ea:	4314      	orrs	r4, r2
    42ec:	f044 0410 	orr.w	r4, r4, #16
    42f0:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42f4:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42f8:	f04c 0401 	orr.w	r4, ip, #1
    42fc:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    4300:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    4302:	3501      	adds	r5, #1
    4304:	300c      	adds	r0, #12
    4306:	e7b1      	b.n	426c <mpu_configure_regions+0x8>
    4308:	e000ed00 	.word	0xe000ed00
    430c:	0000ce07 	.word	0x0000ce07
    4310:	0000bc18 	.word	0x0000bc18
    4314:	0000ce2a 	.word	0x0000ce2a

00004318 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4318:	4b04      	ldr	r3, [pc, #16]	; (432c <arm_core_mpu_enable+0x14>)
    431a:	2205      	movs	r2, #5
    431c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4320:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4324:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4328:	4770      	bx	lr
    432a:	bf00      	nop
    432c:	e000ed00 	.word	0xe000ed00

00004330 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4330:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4334:	4b02      	ldr	r3, [pc, #8]	; (4340 <arm_core_mpu_disable+0x10>)
    4336:	2200      	movs	r2, #0
    4338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    433c:	4770      	bx	lr
    433e:	bf00      	nop
    4340:	e000ed00 	.word	0xe000ed00

00004344 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4344:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4346:	4d0e      	ldr	r5, [pc, #56]	; (4380 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4348:	2301      	movs	r3, #1
    434a:	782a      	ldrb	r2, [r5, #0]
    434c:	460c      	mov	r4, r1
    434e:	f7ff ff89 	bl	4264 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4352:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    4354:	3016      	adds	r0, #22
    4356:	d111      	bne.n	437c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4358:	f240 1311 	movw	r3, #273	; 0x111
    435c:	4a09      	ldr	r2, [pc, #36]	; (4384 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    435e:	490a      	ldr	r1, [pc, #40]	; (4388 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    4360:	480a      	ldr	r0, [pc, #40]	; (438c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    4362:	f006 faf6 	bl	a952 <assert_print>
    4366:	4621      	mov	r1, r4
    4368:	4809      	ldr	r0, [pc, #36]	; (4390 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    436a:	f006 faf2 	bl	a952 <assert_print>
			regions_num);
	}
}
    436e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    4372:	4804      	ldr	r0, [pc, #16]	; (4384 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    4374:	f240 1111 	movw	r1, #273	; 0x111
    4378:	f006 bae4 	b.w	a944 <assert_post_action>
}
    437c:	bd38      	pop	{r3, r4, r5, pc}
    437e:	bf00      	nop
    4380:	20005137 	.word	0x20005137
    4384:	0000ce50 	.word	0x0000ce50
    4388:	0000dab4 	.word	0x0000dab4
    438c:	0000c18a 	.word	0x0000c18a
    4390:	0000ce87 	.word	0x0000ce87

00004394 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4394:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4396:	4a13      	ldr	r2, [pc, #76]	; (43e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    4398:	2300      	movs	r3, #0
    439a:	7812      	ldrb	r2, [r2, #0]
    439c:	460c      	mov	r4, r1
    439e:	f7ff ff61 	bl	4264 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    43a2:	f110 0f16 	cmn.w	r0, #22
    43a6:	d004      	beq.n	43b2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
    43a8:	4b0f      	ldr	r3, [pc, #60]	; (43e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    43aa:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    43ac:	2807      	cmp	r0, #7
    43ae:	dd12      	ble.n	43d6 <arm_core_mpu_configure_dynamic_mpu_regions+0x42>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    43b0:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    43b2:	4a0e      	ldr	r2, [pc, #56]	; (43ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    43b4:	490e      	ldr	r1, [pc, #56]	; (43f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    43b6:	480f      	ldr	r0, [pc, #60]	; (43f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    43b8:	f44f 7398 	mov.w	r3, #304	; 0x130
    43bc:	f006 fac9 	bl	a952 <assert_print>
    43c0:	4621      	mov	r1, r4
    43c2:	480d      	ldr	r0, [pc, #52]	; (43f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    43c4:	f006 fac5 	bl	a952 <assert_print>
}
    43c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    43cc:	4807      	ldr	r0, [pc, #28]	; (43ec <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    43ce:	f44f 7198 	mov.w	r1, #304	; 0x130
    43d2:	f006 bab7 	b.w	a944 <assert_post_action>
  MPU->RNR = rnr;
    43d6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    43da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    43de:	3001      	adds	r0, #1
    43e0:	e7e4      	b.n	43ac <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
    43e2:	bf00      	nop
    43e4:	20005137 	.word	0x20005137
    43e8:	e000ed00 	.word	0xe000ed00
    43ec:	0000ce50 	.word	0x0000ce50
    43f0:	0000dab4 	.word	0x0000dab4
    43f4:	0000c18a 	.word	0x0000c18a
    43f8:	0000ceb3 	.word	0x0000ceb3

000043fc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    43fc:	4928      	ldr	r1, [pc, #160]	; (44a0 <z_arm_mpu_init+0xa4>)
{
    43fe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4400:	680c      	ldr	r4, [r1, #0]
    4402:	2c08      	cmp	r4, #8
    4404:	d913      	bls.n	442e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    4406:	f44f 73a4 	mov.w	r3, #328	; 0x148
    440a:	4a26      	ldr	r2, [pc, #152]	; (44a4 <z_arm_mpu_init+0xa8>)
    440c:	4926      	ldr	r1, [pc, #152]	; (44a8 <z_arm_mpu_init+0xac>)
    440e:	4827      	ldr	r0, [pc, #156]	; (44ac <z_arm_mpu_init+0xb0>)
    4410:	f006 fa9f 	bl	a952 <assert_print>
    4414:	4826      	ldr	r0, [pc, #152]	; (44b0 <z_arm_mpu_init+0xb4>)
    4416:	2208      	movs	r2, #8
    4418:	4621      	mov	r1, r4
    441a:	f006 fa9a 	bl	a952 <assert_print>
    441e:	4821      	ldr	r0, [pc, #132]	; (44a4 <z_arm_mpu_init+0xa8>)
    4420:	f44f 71a4 	mov.w	r1, #328	; 0x148
    4424:	f006 fa8e 	bl	a944 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    4428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    442c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    442e:	f7ff ff7f 	bl	4330 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4432:	6848      	ldr	r0, [r1, #4]
    4434:	491f      	ldr	r1, [pc, #124]	; (44b4 <z_arm_mpu_init+0xb8>)
    4436:	2200      	movs	r2, #0
    4438:	4294      	cmp	r4, r2
    443a:	f100 000c 	add.w	r0, r0, #12
    443e:	d10b      	bne.n	4458 <z_arm_mpu_init+0x5c>
	static_regions_num = mpu_config.num_regions;
    4440:	4b1d      	ldr	r3, [pc, #116]	; (44b8 <z_arm_mpu_init+0xbc>)
    4442:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    4444:	f7ff ff68 	bl	4318 <arm_core_mpu_enable>
	__ASSERT(
    4448:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    444c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4450:	2b08      	cmp	r3, #8
    4452:	d114      	bne.n	447e <z_arm_mpu_init+0x82>
	return 0;
    4454:	2000      	movs	r0, #0
    4456:	e7e9      	b.n	442c <z_arm_mpu_init+0x30>
    4458:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    445c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    4460:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4464:	4313      	orrs	r3, r2
    4466:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    446a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    446e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4472:	f043 0301 	orr.w	r3, r3, #1
    4476:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    447a:	3201      	adds	r2, #1
    447c:	e7dc      	b.n	4438 <z_arm_mpu_init+0x3c>
	__ASSERT(
    447e:	4a09      	ldr	r2, [pc, #36]	; (44a4 <z_arm_mpu_init+0xa8>)
    4480:	490e      	ldr	r1, [pc, #56]	; (44bc <z_arm_mpu_init+0xc0>)
    4482:	480a      	ldr	r0, [pc, #40]	; (44ac <z_arm_mpu_init+0xb0>)
    4484:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    4488:	f006 fa63 	bl	a952 <assert_print>
    448c:	480c      	ldr	r0, [pc, #48]	; (44c0 <z_arm_mpu_init+0xc4>)
    448e:	f006 fa60 	bl	a952 <assert_print>
    4492:	4804      	ldr	r0, [pc, #16]	; (44a4 <z_arm_mpu_init+0xa8>)
    4494:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    4498:	f006 fa54 	bl	a944 <assert_post_action>
    449c:	e7da      	b.n	4454 <z_arm_mpu_init+0x58>
    449e:	bf00      	nop
    44a0:	0000bdcc 	.word	0x0000bdcc
    44a4:	0000ce50 	.word	0x0000ce50
    44a8:	0000dab4 	.word	0x0000dab4
    44ac:	0000c18a 	.word	0x0000c18a
    44b0:	0000cee0 	.word	0x0000cee0
    44b4:	e000ed00 	.word	0xe000ed00
    44b8:	20005137 	.word	0x20005137
    44bc:	0000cf14 	.word	0x0000cf14
    44c0:	0000cf64 	.word	0x0000cf64

000044c4 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
    44c4:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    44c6:	4b0b      	ldr	r3, [pc, #44]	; (44f4 <malloc_prepare+0x30>)
    44c8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    44cc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    44d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    44d4:	d20c      	bcs.n	44f0 <malloc_prepare+0x2c>
    44d6:	4908      	ldr	r1, [pc, #32]	; (44f8 <malloc_prepare+0x34>)
    44d8:	4a08      	ldr	r2, [pc, #32]	; (44fc <malloc_prepare+0x38>)
    44da:	4809      	ldr	r0, [pc, #36]	; (4500 <malloc_prepare+0x3c>)
    44dc:	2381      	movs	r3, #129	; 0x81
    44de:	f006 fa38 	bl	a952 <assert_print>
    44e2:	4808      	ldr	r0, [pc, #32]	; (4504 <malloc_prepare+0x40>)
    44e4:	f006 fa35 	bl	a952 <assert_print>
    44e8:	4804      	ldr	r0, [pc, #16]	; (44fc <malloc_prepare+0x38>)
    44ea:	2181      	movs	r1, #129	; 0x81
    44ec:	f006 fa2a 	bl	a944 <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    44f0:	2000      	movs	r0, #0
    44f2:	bd08      	pop	{r3, pc}
    44f4:	20008ca0 	.word	0x20008ca0
    44f8:	0000cfb5 	.word	0x0000cfb5
    44fc:	0000cf85 	.word	0x0000cf85
    4500:	0000c18a 	.word	0x0000c18a
    4504:	0000cffc 	.word	0x0000cffc

00004508 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4508:	4b01      	ldr	r3, [pc, #4]	; (4510 <__stdout_hook_install+0x8>)
    450a:	6018      	str	r0, [r3, #0]
}
    450c:	4770      	bx	lr
    450e:	bf00      	nop
    4510:	20000030 	.word	0x20000030

00004514 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    4514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    4516:	4f08      	ldr	r7, [pc, #32]	; (4538 <z_impl_zephyr_read_stdin+0x24>)
{
    4518:	4606      	mov	r6, r0
    451a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    451c:	2400      	movs	r4, #0
    451e:	42ac      	cmp	r4, r5
    4520:	da08      	bge.n	4534 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    4522:	683b      	ldr	r3, [r7, #0]
    4524:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    4526:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    4528:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    452a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    452e:	d001      	beq.n	4534 <z_impl_zephyr_read_stdin+0x20>
    4530:	280d      	cmp	r0, #13
    4532:	d1f4      	bne.n	451e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    4534:	4620      	mov	r0, r4
    4536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4538:	2000002c 	.word	0x2000002c

0000453c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    453e:	4f0a      	ldr	r7, [pc, #40]	; (4568 <z_impl_zephyr_write_stdout+0x2c>)
    4540:	460d      	mov	r5, r1
    4542:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4544:	f1c0 0401 	rsb	r4, r0, #1
    4548:	19a3      	adds	r3, r4, r6
    454a:	429d      	cmp	r5, r3
    454c:	dc01      	bgt.n	4552 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    454e:	4628      	mov	r0, r5
    4550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4552:	7873      	ldrb	r3, [r6, #1]
    4554:	2b0a      	cmp	r3, #10
    4556:	d102      	bne.n	455e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4558:	683b      	ldr	r3, [r7, #0]
    455a:	200d      	movs	r0, #13
    455c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    455e:	683b      	ldr	r3, [r7, #0]
    4560:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4564:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4566:	e7ef      	b.n	4548 <z_impl_zephyr_write_stdout+0xc>
    4568:	20000030 	.word	0x20000030

0000456c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    456c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    456e:	4c07      	ldr	r4, [pc, #28]	; (458c <_sbrk+0x20>)
    4570:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4572:	18c2      	adds	r2, r0, r3
    4574:	4806      	ldr	r0, [pc, #24]	; (4590 <_sbrk+0x24>)
    4576:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    457a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    457e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4580:	bf3a      	itte	cc
    4582:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    4584:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    4586:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    458a:	bd10      	pop	{r4, pc}
    458c:	20004db4 	.word	0x20004db4
    4590:	20008ca0 	.word	0x20008ca0

00004594 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    4594:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    4596:	4604      	mov	r4, r0
    4598:	b958      	cbnz	r0, 45b2 <__retarget_lock_init_recursive+0x1e>
    459a:	4912      	ldr	r1, [pc, #72]	; (45e4 <__retarget_lock_init_recursive+0x50>)
    459c:	4812      	ldr	r0, [pc, #72]	; (45e8 <__retarget_lock_init_recursive+0x54>)
    459e:	4a13      	ldr	r2, [pc, #76]	; (45ec <__retarget_lock_init_recursive+0x58>)
    45a0:	f240 1377 	movw	r3, #375	; 0x177
    45a4:	f006 f9d5 	bl	a952 <assert_print>
    45a8:	4810      	ldr	r0, [pc, #64]	; (45ec <__retarget_lock_init_recursive+0x58>)
    45aa:	f240 1177 	movw	r1, #375	; 0x177
    45ae:	f006 f9c9 	bl	a944 <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    45b2:	2014      	movs	r0, #20
    45b4:	f005 f8ca 	bl	974c <malloc>
    45b8:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    45ba:	b970      	cbnz	r0, 45da <__retarget_lock_init_recursive+0x46>
    45bc:	490c      	ldr	r1, [pc, #48]	; (45f0 <__retarget_lock_init_recursive+0x5c>)
    45be:	4a0b      	ldr	r2, [pc, #44]	; (45ec <__retarget_lock_init_recursive+0x58>)
    45c0:	4809      	ldr	r0, [pc, #36]	; (45e8 <__retarget_lock_init_recursive+0x54>)
    45c2:	f240 137f 	movw	r3, #383	; 0x17f
    45c6:	f006 f9c4 	bl	a952 <assert_print>
    45ca:	480a      	ldr	r0, [pc, #40]	; (45f4 <__retarget_lock_init_recursive+0x60>)
    45cc:	f006 f9c1 	bl	a952 <assert_print>
    45d0:	4806      	ldr	r0, [pc, #24]	; (45ec <__retarget_lock_init_recursive+0x58>)
    45d2:	f240 117f 	movw	r1, #383	; 0x17f
    45d6:	f006 f9b5 	bl	a944 <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
    45da:	6820      	ldr	r0, [r4, #0]
}
    45dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45e0:	f006 beff 	b.w	b3e2 <z_impl_k_mutex_init>
    45e4:	0000d084 	.word	0x0000d084
    45e8:	0000c18a 	.word	0x0000c18a
    45ec:	0000cf85 	.word	0x0000cf85
    45f0:	0000d083 	.word	0x0000d083
    45f4:	0000d0bf 	.word	0x0000d0bf

000045f8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    45f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    45fa:	4604      	mov	r4, r0
    45fc:	b958      	cbnz	r0, 4616 <__retarget_lock_acquire_recursive+0x1e>
    45fe:	490a      	ldr	r1, [pc, #40]	; (4628 <__retarget_lock_acquire_recursive+0x30>)
    4600:	480a      	ldr	r0, [pc, #40]	; (462c <__retarget_lock_acquire_recursive+0x34>)
    4602:	4a0b      	ldr	r2, [pc, #44]	; (4630 <__retarget_lock_acquire_recursive+0x38>)
    4604:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    4608:	f006 f9a3 	bl	a952 <assert_print>
    460c:	4808      	ldr	r0, [pc, #32]	; (4630 <__retarget_lock_acquire_recursive+0x38>)
    460e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    4612:	f006 f997 	bl	a944 <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
    4616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    461a:	4620      	mov	r0, r4
    461c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    4620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4624:	f002 bf4a 	b.w	74bc <z_impl_k_mutex_lock>
    4628:	0000d084 	.word	0x0000d084
    462c:	0000c18a 	.word	0x0000c18a
    4630:	0000cf85 	.word	0x0000cf85

00004634 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    4634:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
    4636:	4604      	mov	r4, r0
    4638:	b958      	cbnz	r0, 4652 <__retarget_lock_release_recursive+0x1e>
    463a:	4908      	ldr	r1, [pc, #32]	; (465c <__retarget_lock_release_recursive+0x28>)
    463c:	4808      	ldr	r0, [pc, #32]	; (4660 <__retarget_lock_release_recursive+0x2c>)
    463e:	4a09      	ldr	r2, [pc, #36]	; (4664 <__retarget_lock_release_recursive+0x30>)
    4640:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    4644:	f006 f985 	bl	a952 <assert_print>
    4648:	4806      	ldr	r0, [pc, #24]	; (4664 <__retarget_lock_release_recursive+0x30>)
    464a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    464e:	f006 f979 	bl	a944 <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
    4652:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
    4654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4658:	f003 b82a 	b.w	76b0 <z_impl_k_mutex_unlock>
    465c:	0000d084 	.word	0x0000d084
    4660:	0000c18a 	.word	0x0000c18a
    4664:	0000cf85 	.word	0x0000cf85

00004668 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    4668:	b510      	push	{r4, lr}
	__asm__ volatile(
    466a:	f04f 0320 	mov.w	r3, #32
    466e:	f3ef 8011 	mrs	r0, BASEPRI
    4672:	f383 8812 	msr	BASEPRI_MAX, r3
    4676:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    467a:	4a11      	ldr	r2, [pc, #68]	; (46c0 <nordicsemi_nrf52_init+0x58>)
    467c:	2301      	movs	r3, #1
    467e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4686:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    468a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    468e:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    4692:	2c08      	cmp	r4, #8
    4694:	d108      	bne.n	46a8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4696:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    469a:	2905      	cmp	r1, #5
    469c:	d804      	bhi.n	46a8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    469e:	4c09      	ldr	r4, [pc, #36]	; (46c4 <nordicsemi_nrf52_init+0x5c>)
    46a0:	5c61      	ldrb	r1, [r4, r1]
    46a2:	b109      	cbz	r1, 46a8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    46a4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    46a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46ac:	2201      	movs	r2, #1
    46ae:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    46b2:	f380 8811 	msr	BASEPRI, r0
    46b6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    46ba:	2000      	movs	r0, #0
    46bc:	bd10      	pop	{r4, pc}
    46be:	bf00      	nop
    46c0:	4001e000 	.word	0x4001e000
    46c4:	0000d0f1 	.word	0x0000d0f1

000046c8 <sys_arch_reboot>:
    *p_gpregret = val;
    46c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46cc:	b2c0      	uxtb	r0, r0
    46ce:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    46d2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    46d6:	4905      	ldr	r1, [pc, #20]	; (46ec <sys_arch_reboot+0x24>)
    46d8:	4b05      	ldr	r3, [pc, #20]	; (46f0 <sys_arch_reboot+0x28>)
    46da:	68ca      	ldr	r2, [r1, #12]
    46dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    46e0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    46e2:	60cb      	str	r3, [r1, #12]
    46e4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    46e8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    46ea:	e7fd      	b.n	46e8 <sys_arch_reboot+0x20>
    46ec:	e000ed00 	.word	0xe000ed00
    46f0:	05fa0004 	.word	0x05fa0004

000046f4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    46f4:	b120      	cbz	r0, 4700 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    46f6:	4b03      	ldr	r3, [pc, #12]	; (4704 <arch_busy_wait+0x10>)
    46f8:	0180      	lsls	r0, r0, #6
    46fa:	f043 0301 	orr.w	r3, r3, #1
    46fe:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4700:	4770      	bx	lr
    4702:	bf00      	nop
    4704:	0000bc80 	.word	0x0000bc80

00004708 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4708:	b537      	push	{r0, r1, r2, r4, r5, lr}
    470a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    470c:	490a      	ldr	r1, [pc, #40]	; (4738 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    470e:	4a0b      	ldr	r2, [pc, #44]	; (473c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4710:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4712:	2340      	movs	r3, #64	; 0x40
    4714:	9300      	str	r3, [sp, #0]
    4716:	1149      	asrs	r1, r1, #5
{
    4718:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    471a:	4623      	mov	r3, r4
    471c:	4808      	ldr	r0, [pc, #32]	; (4740 <onoff_start+0x38>)
    471e:	f006 fa12 	bl	ab46 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4722:	1e01      	subs	r1, r0, #0
    4724:	da05      	bge.n	4732 <onoff_start+0x2a>
		notify(mgr, err);
    4726:	4628      	mov	r0, r5
    4728:	4623      	mov	r3, r4
	}
}
    472a:	b003      	add	sp, #12
    472c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4730:	4718      	bx	r3
}
    4732:	b003      	add	sp, #12
    4734:	bd30      	pop	{r4, r5, pc}
    4736:	bf00      	nop
    4738:	20004dcc 	.word	0x20004dcc
    473c:	0000abb1 	.word	0x0000abb1
    4740:	0000ba00 	.word	0x0000ba00

00004744 <get_status>:
{
    4744:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4746:	b2cc      	uxtb	r4, r1
    4748:	2c01      	cmp	r4, #1
{
    474a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    474c:	d909      	bls.n	4762 <get_status+0x1e>
    474e:	4909      	ldr	r1, [pc, #36]	; (4774 <get_status+0x30>)
    4750:	4809      	ldr	r0, [pc, #36]	; (4778 <get_status+0x34>)
    4752:	4a0a      	ldr	r2, [pc, #40]	; (477c <get_status+0x38>)
    4754:	2379      	movs	r3, #121	; 0x79
    4756:	f006 f8fc 	bl	a952 <assert_print>
    475a:	4808      	ldr	r0, [pc, #32]	; (477c <get_status+0x38>)
    475c:	2179      	movs	r1, #121	; 0x79
    475e:	f006 f8f1 	bl	a944 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4762:	692b      	ldr	r3, [r5, #16]
    4764:	220c      	movs	r2, #12
    4766:	fb04 3302 	mla	r3, r4, r2, r3
    476a:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    476c:	f000 0007 	and.w	r0, r0, #7
    4770:	bd38      	pop	{r3, r4, r5, pc}
    4772:	bf00      	nop
    4774:	0000d138 	.word	0x0000d138
    4778:	0000c18a 	.word	0x0000c18a
    477c:	0000d0fb 	.word	0x0000d0fb

00004780 <stop>:
{
    4780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4782:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4784:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    4786:	6906      	ldr	r6, [r0, #16]
{
    4788:	4605      	mov	r5, r0
    478a:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    478c:	d90b      	bls.n	47a6 <stop+0x26>
    478e:	4919      	ldr	r1, [pc, #100]	; (47f4 <stop+0x74>)
    4790:	4819      	ldr	r0, [pc, #100]	; (47f8 <stop+0x78>)
    4792:	4a1a      	ldr	r2, [pc, #104]	; (47fc <stop+0x7c>)
    4794:	f240 134d 	movw	r3, #333	; 0x14d
    4798:	f006 f8db 	bl	a952 <assert_print>
    479c:	4817      	ldr	r0, [pc, #92]	; (47fc <stop+0x7c>)
    479e:	f240 114d 	movw	r1, #333	; 0x14d
    47a2:	f006 f8cf 	bl	a944 <assert_post_action>
	__asm__ volatile(
    47a6:	f04f 0320 	mov.w	r3, #32
    47aa:	f3ef 8211 	mrs	r2, BASEPRI
    47ae:	f383 8812 	msr	BASEPRI_MAX, r3
    47b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    47b6:	210c      	movs	r1, #12
    47b8:	fb01 6304 	mla	r3, r1, r4, r6
    47bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    47be:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    47c2:	d008      	beq.n	47d6 <stop+0x56>
    47c4:	429f      	cmp	r7, r3
    47c6:	d006      	beq.n	47d6 <stop+0x56>
	__asm__ volatile(
    47c8:	f382 8811 	msr	BASEPRI, r2
    47cc:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    47d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    47d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    47d6:	434c      	muls	r4, r1
    47d8:	4426      	add	r6, r4
    47da:	2301      	movs	r3, #1
    47dc:	64b3      	str	r3, [r6, #72]	; 0x48
    47de:	f382 8811 	msr	BASEPRI, r2
    47e2:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    47e6:	686b      	ldr	r3, [r5, #4]
    47e8:	4423      	add	r3, r4
    47ea:	685b      	ldr	r3, [r3, #4]
    47ec:	4798      	blx	r3
	return 0;
    47ee:	2000      	movs	r0, #0
    47f0:	e7f0      	b.n	47d4 <stop+0x54>
    47f2:	bf00      	nop
    47f4:	0000d138 	.word	0x0000d138
    47f8:	0000c18a 	.word	0x0000c18a
    47fc:	0000d0fb 	.word	0x0000d0fb

00004800 <onoff_stop>:
{
    4800:	b570      	push	{r4, r5, r6, lr}
    4802:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4804:	4906      	ldr	r1, [pc, #24]	; (4820 <onoff_stop+0x20>)
    4806:	1a41      	subs	r1, r0, r1
{
    4808:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    480a:	1149      	asrs	r1, r1, #5
    480c:	4805      	ldr	r0, [pc, #20]	; (4824 <onoff_stop+0x24>)
    480e:	2240      	movs	r2, #64	; 0x40
    4810:	f7ff ffb6 	bl	4780 <stop>
	notify(mgr, res);
    4814:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4816:	4601      	mov	r1, r0
	notify(mgr, res);
    4818:	4620      	mov	r0, r4
}
    481a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    481e:	4718      	bx	r3
    4820:	20004dcc 	.word	0x20004dcc
    4824:	0000ba00 	.word	0x0000ba00

00004828 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4828:	2200      	movs	r2, #0
{
    482a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    482c:	2101      	movs	r1, #1
{
    482e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4830:	4610      	mov	r0, r2
    4832:	f7ff f83d 	bl	38b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4836:	480f      	ldr	r0, [pc, #60]	; (4874 <clk_init+0x4c>)
    4838:	f001 fc92 	bl	6160 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    483c:	4b0e      	ldr	r3, [pc, #56]	; (4878 <clk_init+0x50>)
    483e:	4298      	cmp	r0, r3
    4840:	d115      	bne.n	486e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4842:	f001 fcb3 	bl	61ac <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4846:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4848:	490c      	ldr	r1, [pc, #48]	; (487c <clk_init+0x54>)
    484a:	4630      	mov	r0, r6
    484c:	f005 ff83 	bl	a756 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4850:	2800      	cmp	r0, #0
    4852:	db0b      	blt.n	486c <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4854:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4856:	4909      	ldr	r1, [pc, #36]	; (487c <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4858:	2501      	movs	r5, #1
    485a:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    485c:	f104 0020 	add.w	r0, r4, #32
    4860:	f005 ff79 	bl	a756 <onoff_manager_init>
		if (err < 0) {
    4864:	2800      	cmp	r0, #0
    4866:	db01      	blt.n	486c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4868:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    486a:	2000      	movs	r0, #0
}
    486c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    486e:	f06f 0004 	mvn.w	r0, #4
    4872:	e7fb      	b.n	486c <clk_init+0x44>
    4874:	000048b5 	.word	0x000048b5
    4878:	0bad0000 	.word	0x0bad0000
    487c:	0000bdec 	.word	0x0000bdec

00004880 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4880:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4882:	230c      	movs	r3, #12
    4884:	4809      	ldr	r0, [pc, #36]	; (48ac <clkstarted_handle.constprop.0+0x2c>)
    4886:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4888:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    488a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    488c:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    4890:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4892:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    4894:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    4896:	4418      	add	r0, r3
    4898:	f006 f942 	bl	ab20 <set_on_state>
	if (callback) {
    489c:	b12d      	cbz	r5, 48aa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    489e:	4632      	mov	r2, r6
    48a0:	462b      	mov	r3, r5
    48a2:	4803      	ldr	r0, [pc, #12]	; (48b0 <clkstarted_handle.constprop.0+0x30>)
}
    48a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    48a8:	4718      	bx	r3
}
    48aa:	bd70      	pop	{r4, r5, r6, pc}
    48ac:	20004dcc 	.word	0x20004dcc
    48b0:	0000ba00 	.word	0x0000ba00

000048b4 <clock_event_handler>:
	switch (event) {
    48b4:	2801      	cmp	r0, #1
{
    48b6:	b508      	push	{r3, lr}
	switch (event) {
    48b8:	d006      	beq.n	48c8 <clock_event_handler+0x14>
    48ba:	2803      	cmp	r0, #3
    48bc:	d008      	beq.n	48d0 <clock_event_handler+0x1c>
    48be:	b9a8      	cbnz	r0, 48ec <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    48c0:	4b10      	ldr	r3, [pc, #64]	; (4904 <clock_event_handler+0x50>)
    48c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48c4:	075b      	lsls	r3, r3, #29
    48c6:	d11b      	bne.n	4900 <clock_event_handler+0x4c>
}
    48c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    48cc:	f7ff bfd8 	b.w	4880 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    48d0:	490d      	ldr	r1, [pc, #52]	; (4908 <clock_event_handler+0x54>)
    48d2:	4a0e      	ldr	r2, [pc, #56]	; (490c <clock_event_handler+0x58>)
    48d4:	480e      	ldr	r0, [pc, #56]	; (4910 <clock_event_handler+0x5c>)
    48d6:	f240 235e 	movw	r3, #606	; 0x25e
    48da:	f006 f83a 	bl	a952 <assert_print>
    48de:	f240 215e 	movw	r1, #606	; 0x25e
}
    48e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    48e6:	4809      	ldr	r0, [pc, #36]	; (490c <clock_event_handler+0x58>)
    48e8:	f006 b82c 	b.w	a944 <assert_post_action>
    48ec:	4906      	ldr	r1, [pc, #24]	; (4908 <clock_event_handler+0x54>)
    48ee:	4a07      	ldr	r2, [pc, #28]	; (490c <clock_event_handler+0x58>)
    48f0:	4807      	ldr	r0, [pc, #28]	; (4910 <clock_event_handler+0x5c>)
    48f2:	f240 2362 	movw	r3, #610	; 0x262
    48f6:	f006 f82c 	bl	a952 <assert_print>
    48fa:	f240 2162 	movw	r1, #610	; 0x262
    48fe:	e7f0      	b.n	48e2 <clock_event_handler+0x2e>
}
    4900:	bd08      	pop	{r3, pc}
    4902:	bf00      	nop
    4904:	20004dcc 	.word	0x20004dcc
    4908:	0000dab4 	.word	0x0000dab4
    490c:	0000d0fb 	.word	0x0000d0fb
    4910:	0000c18a 	.word	0x0000c18a

00004914 <generic_hfclk_start>:
{
    4914:	b508      	push	{r3, lr}
	__asm__ volatile(
    4916:	f04f 0320 	mov.w	r3, #32
    491a:	f3ef 8111 	mrs	r1, BASEPRI
    491e:	f383 8812 	msr	BASEPRI_MAX, r3
    4922:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4926:	4a12      	ldr	r2, [pc, #72]	; (4970 <generic_hfclk_start+0x5c>)
    4928:	6813      	ldr	r3, [r2, #0]
    492a:	f043 0002 	orr.w	r0, r3, #2
    492e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4930:	07da      	lsls	r2, r3, #31
    4932:	d408      	bmi.n	4946 <generic_hfclk_start+0x32>
	__asm__ volatile(
    4934:	f381 8811 	msr	BASEPRI, r1
    4938:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    493c:	2001      	movs	r0, #1
}
    493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4942:	f001 bc57 	b.w	61f4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    494a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    494e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4952:	07d3      	lsls	r3, r2, #31
    4954:	d5ee      	bpl.n	4934 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    4956:	4807      	ldr	r0, [pc, #28]	; (4974 <generic_hfclk_start+0x60>)
    4958:	f006 f8e2 	bl	ab20 <set_on_state>
    495c:	f381 8811 	msr	BASEPRI, r1
    4960:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    4964:	2000      	movs	r0, #0
}
    4966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    496a:	f7ff bf89 	b.w	4880 <clkstarted_handle.constprop.0>
    496e:	bf00      	nop
    4970:	20004e24 	.word	0x20004e24
    4974:	20004e14 	.word	0x20004e14

00004978 <api_blocking_start>:
{
    4978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    497a:	2200      	movs	r2, #0
    497c:	2301      	movs	r3, #1
    497e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4982:	4a09      	ldr	r2, [pc, #36]	; (49a8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4984:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4988:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    498a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    498e:	f006 f908 	bl	aba2 <api_start>
	if (err < 0) {
    4992:	2800      	cmp	r0, #0
    4994:	db05      	blt.n	49a2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    4996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    499a:	2300      	movs	r3, #0
    499c:	4668      	mov	r0, sp
    499e:	f002 ff89 	bl	78b4 <z_impl_k_sem_take>
}
    49a2:	b005      	add	sp, #20
    49a4:	f85d fb04 	ldr.w	pc, [sp], #4
    49a8:	0000abcf 	.word	0x0000abcf

000049ac <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    49ac:	4b09      	ldr	r3, [pc, #36]	; (49d4 <generic_hfclk_stop+0x28>)
    49ae:	f3bf 8f5b 	dmb	ish
    49b2:	e853 2f00 	ldrex	r2, [r3]
    49b6:	f022 0102 	bic.w	r1, r2, #2
    49ba:	e843 1000 	strex	r0, r1, [r3]
    49be:	2800      	cmp	r0, #0
    49c0:	d1f7      	bne.n	49b2 <generic_hfclk_stop+0x6>
    49c2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    49c6:	07d3      	lsls	r3, r2, #31
    49c8:	d402      	bmi.n	49d0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    49ca:	2001      	movs	r0, #1
    49cc:	f001 bc76 	b.w	62bc <nrfx_clock_stop>
}
    49d0:	4770      	bx	lr
    49d2:	bf00      	nop
    49d4:	20004e24 	.word	0x20004e24

000049d8 <z_nrf_clock_control_lf_on>:
{
    49d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    49dc:	4947      	ldr	r1, [pc, #284]	; (4afc <z_nrf_clock_control_lf_on+0x124>)
    49de:	f3bf 8f5b 	dmb	ish
    49e2:	4606      	mov	r6, r0
    49e4:	2201      	movs	r2, #1
    49e6:	e851 3f00 	ldrex	r3, [r1]
    49ea:	e841 2000 	strex	r0, r2, [r1]
    49ee:	2800      	cmp	r0, #0
    49f0:	d1f9      	bne.n	49e6 <z_nrf_clock_control_lf_on+0xe>
    49f2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    49f6:	b9a3      	cbnz	r3, 4a22 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    49f8:	4941      	ldr	r1, [pc, #260]	; (4b00 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    49fa:	4842      	ldr	r0, [pc, #264]	; (4b04 <z_nrf_clock_control_lf_on+0x12c>)
    49fc:	604b      	str	r3, [r1, #4]
    49fe:	60cb      	str	r3, [r1, #12]
    4a00:	608a      	str	r2, [r1, #8]
    4a02:	f7fd faa7 	bl	1f54 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4a06:	2800      	cmp	r0, #0
    4a08:	da0b      	bge.n	4a22 <z_nrf_clock_control_lf_on+0x4a>
    4a0a:	493f      	ldr	r1, [pc, #252]	; (4b08 <z_nrf_clock_control_lf_on+0x130>)
    4a0c:	483f      	ldr	r0, [pc, #252]	; (4b0c <z_nrf_clock_control_lf_on+0x134>)
    4a0e:	4a40      	ldr	r2, [pc, #256]	; (4b10 <z_nrf_clock_control_lf_on+0x138>)
    4a10:	f44f 7308 	mov.w	r3, #544	; 0x220
    4a14:	f005 ff9d 	bl	a952 <assert_print>
    4a18:	483d      	ldr	r0, [pc, #244]	; (4b10 <z_nrf_clock_control_lf_on+0x138>)
    4a1a:	f44f 7108 	mov.w	r1, #544	; 0x220
    4a1e:	f005 ff91 	bl	a944 <assert_post_action>
	switch (start_mode) {
    4a22:	b376      	cbz	r6, 4a82 <z_nrf_clock_control_lf_on+0xaa>
    4a24:	1e73      	subs	r3, r6, #1
    4a26:	2b01      	cmp	r3, #1
    4a28:	d859      	bhi.n	4ade <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4a2a:	2e01      	cmp	r6, #1
    4a2c:	d107      	bne.n	4a3e <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a32:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4a36:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4a3a:	2b01      	cmp	r3, #1
    4a3c:	d021      	beq.n	4a82 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a3e:	f006 fcb9 	bl	b3b4 <k_is_in_isr>
    4a42:	4605      	mov	r5, r0
    4a44:	b9f8      	cbnz	r0, 4a86 <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    4a46:	4b33      	ldr	r3, [pc, #204]	; (4b14 <z_nrf_clock_control_lf_on+0x13c>)
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	b1e3      	cbz	r3, 4a86 <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    4a4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a50:	2202      	movs	r2, #2
    4a52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4a56:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4a58:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4b18 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a5c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4a60:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a64:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    4a68:	03d2      	lsls	r2, r2, #15
    4a6a:	d516      	bpl.n	4a9a <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4a6c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4a70:	2b01      	cmp	r3, #1
    4a72:	d001      	beq.n	4a78 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4a74:	2e01      	cmp	r6, #1
    4a76:	d110      	bne.n	4a9a <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    4a78:	b35d      	cbz	r5, 4ad2 <z_nrf_clock_control_lf_on+0xfa>
    4a7a:	f387 8811 	msr	BASEPRI, r7
    4a7e:	f3bf 8f6f 	isb	sy
}
    4a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    4a86:	f04f 0320 	mov.w	r3, #32
    4a8a:	f3ef 8711 	mrs	r7, BASEPRI
    4a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4a92:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4a96:	2501      	movs	r5, #1
    4a98:	e7de      	b.n	4a58 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4a9a:	b1ad      	cbz	r5, 4ac8 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4a9c:	4638      	mov	r0, r7
    4a9e:	f7fe fe91 	bl	37c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4aa2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d1da      	bne.n	4a60 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4aaa:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    4aae:	2a00      	cmp	r2, #0
    4ab0:	d0d6      	beq.n	4a60 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ab2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4ab6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4aba:	2301      	movs	r3, #1
    4abc:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4ac0:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ac4:	60a3      	str	r3, [r4, #8]
}
    4ac6:	e7cb      	b.n	4a60 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    4ac8:	2100      	movs	r1, #0
    4aca:	2021      	movs	r0, #33	; 0x21
    4acc:	f003 ffd4 	bl	8a78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4ad0:	e7e7      	b.n	4aa2 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    4ad2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ad6:	2202      	movs	r2, #2
    4ad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4adc:	e7d1      	b.n	4a82 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    4ade:	490f      	ldr	r1, [pc, #60]	; (4b1c <z_nrf_clock_control_lf_on+0x144>)
    4ae0:	480a      	ldr	r0, [pc, #40]	; (4b0c <z_nrf_clock_control_lf_on+0x134>)
    4ae2:	4a0b      	ldr	r2, [pc, #44]	; (4b10 <z_nrf_clock_control_lf_on+0x138>)
    4ae4:	f240 2332 	movw	r3, #562	; 0x232
    4ae8:	f005 ff33 	bl	a952 <assert_print>
}
    4aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4af0:	4807      	ldr	r0, [pc, #28]	; (4b10 <z_nrf_clock_control_lf_on+0x138>)
    4af2:	f240 2132 	movw	r1, #562	; 0x232
    4af6:	f005 bf25 	b.w	a944 <assert_post_action>
    4afa:	bf00      	nop
    4afc:	20004dc8 	.word	0x20004dc8
    4b00:	20004db8 	.word	0x20004db8
    4b04:	20004dec 	.word	0x20004dec
    4b08:	0000c71e 	.word	0x0000c71e
    4b0c:	0000c18a 	.word	0x0000c18a
    4b10:	0000d0fb 	.word	0x0000d0fb
    4b14:	20005548 	.word	0x20005548
    4b18:	e000e100 	.word	0xe000e100
    4b1c:	0000dab4 	.word	0x0000dab4

00004b20 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4b20:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4b22:	4b08      	ldr	r3, [pc, #32]	; (4b44 <uart_console_init+0x24>)
    4b24:	4808      	ldr	r0, [pc, #32]	; (4b48 <uart_console_init+0x28>)
    4b26:	6018      	str	r0, [r3, #0]
    4b28:	f006 fc0a 	bl	b340 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4b2c:	b138      	cbz	r0, 4b3e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    4b2e:	4807      	ldr	r0, [pc, #28]	; (4b4c <uart_console_init+0x2c>)
    4b30:	f7ff fcea 	bl	4508 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4b34:	4805      	ldr	r0, [pc, #20]	; (4b4c <uart_console_init+0x2c>)
    4b36:	f7fc ffb9 	bl	1aac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4b3a:	2000      	movs	r0, #0
}
    4b3c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4b3e:	f06f 0012 	mvn.w	r0, #18
    4b42:	e7fb      	b.n	4b3c <uart_console_init+0x1c>
    4b44:	20004e28 	.word	0x20004e28
    4b48:	0000ba60 	.word	0x0000ba60
    4b4c:	00004b51 	.word	0x00004b51

00004b50 <console_out>:
	if ('\n' == c) {
    4b50:	280a      	cmp	r0, #10
{
    4b52:	b538      	push	{r3, r4, r5, lr}
    4b54:	4d07      	ldr	r5, [pc, #28]	; (4b74 <console_out+0x24>)
    4b56:	4604      	mov	r4, r0
	if ('\n' == c) {
    4b58:	d104      	bne.n	4b64 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    4b5a:	6828      	ldr	r0, [r5, #0]
    4b5c:	6883      	ldr	r3, [r0, #8]
    4b5e:	210d      	movs	r1, #13
    4b60:	69db      	ldr	r3, [r3, #28]
    4b62:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4b64:	6828      	ldr	r0, [r5, #0]
    4b66:	6883      	ldr	r3, [r0, #8]
    4b68:	b2e1      	uxtb	r1, r4
    4b6a:	69db      	ldr	r3, [r3, #28]
    4b6c:	4798      	blx	r3
}
    4b6e:	4620      	mov	r0, r4
    4b70:	bd38      	pop	{r3, r4, r5, pc}
    4b72:	bf00      	nop
    4b74:	20004e28 	.word	0x20004e28

00004b78 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    4b78:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    4b7a:	6905      	ldr	r5, [r0, #16]
{
    4b7c:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    4b7e:	460c      	mov	r4, r1
    4b80:	b961      	cbnz	r1, 4b9c <gpio_nrfx_manage_callback+0x24>
    4b82:	4922      	ldr	r1, [pc, #136]	; (4c0c <gpio_nrfx_manage_callback+0x94>)
    4b84:	4a22      	ldr	r2, [pc, #136]	; (4c10 <gpio_nrfx_manage_callback+0x98>)
    4b86:	4823      	ldr	r0, [pc, #140]	; (4c14 <gpio_nrfx_manage_callback+0x9c>)
    4b88:	2324      	movs	r3, #36	; 0x24
    4b8a:	f005 fee2 	bl	a952 <assert_print>
    4b8e:	4822      	ldr	r0, [pc, #136]	; (4c18 <gpio_nrfx_manage_callback+0xa0>)
    4b90:	f005 fedf 	bl	a952 <assert_print>
    4b94:	481e      	ldr	r0, [pc, #120]	; (4c10 <gpio_nrfx_manage_callback+0x98>)
    4b96:	2124      	movs	r1, #36	; 0x24
    4b98:	f005 fed4 	bl	a944 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    4b9c:	6863      	ldr	r3, [r4, #4]
    4b9e:	b963      	cbnz	r3, 4bba <gpio_nrfx_manage_callback+0x42>
    4ba0:	491e      	ldr	r1, [pc, #120]	; (4c1c <gpio_nrfx_manage_callback+0xa4>)
    4ba2:	4a1b      	ldr	r2, [pc, #108]	; (4c10 <gpio_nrfx_manage_callback+0x98>)
    4ba4:	481b      	ldr	r0, [pc, #108]	; (4c14 <gpio_nrfx_manage_callback+0x9c>)
    4ba6:	2325      	movs	r3, #37	; 0x25
    4ba8:	f005 fed3 	bl	a952 <assert_print>
    4bac:	481c      	ldr	r0, [pc, #112]	; (4c20 <gpio_nrfx_manage_callback+0xa8>)
    4bae:	f005 fed0 	bl	a952 <assert_print>
    4bb2:	4817      	ldr	r0, [pc, #92]	; (4c10 <gpio_nrfx_manage_callback+0x98>)
    4bb4:	2125      	movs	r1, #37	; 0x25
    4bb6:	f005 fec5 	bl	a944 <assert_post_action>
	return list->head;
    4bba:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4bbc:	b14b      	cbz	r3, 4bd2 <gpio_nrfx_manage_callback+0x5a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bbe:	42a3      	cmp	r3, r4
    4bc0:	d113      	bne.n	4bea <gpio_nrfx_manage_callback+0x72>
Z_GENLIST_REMOVE(slist, snode)
    4bc2:	68aa      	ldr	r2, [r5, #8]
	return node->next;
    4bc4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    4bc6:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    4bc8:	4294      	cmp	r4, r2
    4bca:	d100      	bne.n	4bce <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4bcc:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    4bce:	2300      	movs	r3, #0
    4bd0:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4bd2:	b97e      	cbnz	r6, 4bf4 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4bd4:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    4bd6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bd8:	429c      	cmp	r4, r3
    4bda:	d106      	bne.n	4bea <gpio_nrfx_manage_callback+0x72>
	return node->next;
    4bdc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    4bde:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    4be0:	68ab      	ldr	r3, [r5, #8]
    4be2:	429c      	cmp	r4, r3
    4be4:	d1f3      	bne.n	4bce <gpio_nrfx_manage_callback+0x56>
	list->tail = node;
    4be6:	60aa      	str	r2, [r5, #8]
}
    4be8:	e7f1      	b.n	4bce <gpio_nrfx_manage_callback+0x56>
	return node->next;
    4bea:	461a      	mov	r2, r3
    4bec:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d1f2      	bne.n	4bd8 <gpio_nrfx_manage_callback+0x60>
			if (!set) {
    4bf2:	b13e      	cbz	r6, 4c04 <gpio_nrfx_manage_callback+0x8c>
	parent->next = child;
    4bf4:	686b      	ldr	r3, [r5, #4]
    4bf6:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    4bf8:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
    4bfa:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    4bfc:	2b00      	cmp	r3, #0
    4bfe:	d1e9      	bne.n	4bd4 <gpio_nrfx_manage_callback+0x5c>
	list->tail = node;
    4c00:	60ac      	str	r4, [r5, #8]
}
    4c02:	e7e7      	b.n	4bd4 <gpio_nrfx_manage_callback+0x5c>
				return -EINVAL;
    4c04:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4c08:	e7e5      	b.n	4bd6 <gpio_nrfx_manage_callback+0x5e>
    4c0a:	bf00      	nop
    4c0c:	0000d1a9 	.word	0x0000d1a9
    4c10:	0000d17c 	.word	0x0000d17c
    4c14:	0000c18a 	.word	0x0000c18a
    4c18:	0000d1b2 	.word	0x0000d1b2
    4c1c:	0000d1c1 	.word	0x0000d1c1
    4c20:	0000d1d3 	.word	0x0000d1d3

00004c24 <gpio_nrfx_pin_interrupt_configure>:
{
    4c24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    4c26:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c28:	7b05      	ldrb	r5, [r0, #12]
    4c2a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c2e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c32:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c36:	d104      	bne.n	4c42 <gpio_nrfx_pin_interrupt_configure+0x1e>
		nrfx_gpiote_trigger_disable(abs_pin);
    4c38:	4620      	mov	r0, r4
    4c3a:	f001 fe5b 	bl	68f4 <nrfx_gpiote_trigger_disable>
		return 0;
    4c3e:	2000      	movs	r0, #0
    4c40:	e05d      	b.n	4cfe <gpio_nrfx_pin_interrupt_configure+0xda>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c42:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c44:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c48:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c4c:	d114      	bne.n	4c78 <gpio_nrfx_pin_interrupt_configure+0x54>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c52:	bf0c      	ite	eq
    4c54:	2304      	moveq	r3, #4
    4c56:	2305      	movne	r3, #5
    4c58:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c5c:	2300      	movs	r3, #0
    4c5e:	4619      	mov	r1, r3
    4c60:	aa02      	add	r2, sp, #8
    4c62:	4620      	mov	r0, r4
    4c64:	f001 fc4c 	bl	6500 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4c68:	4b34      	ldr	r3, [pc, #208]	; (4d3c <gpio_nrfx_pin_interrupt_configure+0x118>)
    4c6a:	4298      	cmp	r0, r3
    4c6c:	d162      	bne.n	4d34 <gpio_nrfx_pin_interrupt_configure+0x110>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4c6e:	2101      	movs	r1, #1
    4c70:	4620      	mov	r0, r4
    4c72:	f001 fdcf 	bl	6814 <nrfx_gpiote_trigger_enable>
	return 0;
    4c76:	e7e2      	b.n	4c3e <gpio_nrfx_pin_interrupt_configure+0x1a>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4c78:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4c7c:	d041      	beq.n	4d02 <gpio_nrfx_pin_interrupt_configure+0xde>
    4c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4c82:	bf14      	ite	ne
    4c84:	2301      	movne	r3, #1
    4c86:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c88:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4c8c:	6883      	ldr	r3, [r0, #8]
    4c8e:	40cb      	lsrs	r3, r1
    4c90:	07d8      	lsls	r0, r3, #31
    4c92:	d4e3      	bmi.n	4c5c <gpio_nrfx_pin_interrupt_configure+0x38>
    4c94:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4c98:	d1e0      	bne.n	4c5c <gpio_nrfx_pin_interrupt_configure+0x38>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    4c9a:	0966      	lsrs	r6, r4, #5
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    4c9c:	f004 051f 	and.w	r5, r4, #31
    switch (port)
    4ca0:	d031      	beq.n	4d06 <gpio_nrfx_pin_interrupt_configure+0xe2>
    4ca2:	2e01      	cmp	r6, #1
    4ca4:	d104      	bne.n	4cb0 <gpio_nrfx_pin_interrupt_configure+0x8c>

    return (mask & (1UL << pin_number)) ? true : false;
    4ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4caa:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cac:	07d9      	lsls	r1, r3, #31
    4cae:	d40e      	bmi.n	4cce <gpio_nrfx_pin_interrupt_configure+0xaa>
    4cb0:	4923      	ldr	r1, [pc, #140]	; (4d40 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4cb2:	4824      	ldr	r0, [pc, #144]	; (4d44 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4cb4:	4a24      	ldr	r2, [pc, #144]	; (4d48 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4cb6:	f240 2329 	movw	r3, #553	; 0x229
    4cba:	f005 fe4a 	bl	a952 <assert_print>
    4cbe:	4822      	ldr	r0, [pc, #136]	; (4d48 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4cc0:	f240 2129 	movw	r1, #553	; 0x229
    4cc4:	f005 fe3e 	bl	a944 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cc8:	b316      	cbz	r6, 4d10 <gpio_nrfx_pin_interrupt_configure+0xec>
    4cca:	2e01      	cmp	r6, #1
    4ccc:	d123      	bne.n	4d16 <gpio_nrfx_pin_interrupt_configure+0xf2>
        case 1: return NRF_P1;
    4cce:	4b1f      	ldr	r3, [pc, #124]	; (4d4c <gpio_nrfx_pin_interrupt_configure+0x128>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4cd0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    4cd4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4cd8:	07db      	lsls	r3, r3, #31
    4cda:	d4bf      	bmi.n	4c5c <gpio_nrfx_pin_interrupt_configure+0x38>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4cdc:	f10d 0507 	add.w	r5, sp, #7
    4ce0:	4629      	mov	r1, r5
    4ce2:	4620      	mov	r0, r4
    4ce4:	f001 fd2e 	bl	6744 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4ce8:	4b19      	ldr	r3, [pc, #100]	; (4d50 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    4cea:	4298      	cmp	r0, r3
    4cec:	d120      	bne.n	4d30 <gpio_nrfx_pin_interrupt_configure+0x10c>
			err = nrfx_gpiote_channel_alloc(&ch);
    4cee:	4628      	mov	r0, r5
    4cf0:	f001 fd8a 	bl	6808 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4cf4:	4b11      	ldr	r3, [pc, #68]	; (4d3c <gpio_nrfx_pin_interrupt_configure+0x118>)
    4cf6:	4298      	cmp	r0, r3
    4cf8:	d01a      	beq.n	4d30 <gpio_nrfx_pin_interrupt_configure+0x10c>
				return -ENOMEM;
    4cfa:	f06f 000b 	mvn.w	r0, #11
}
    4cfe:	b004      	add	sp, #16
    4d00:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4d02:	2303      	movs	r3, #3
    4d04:	e7c0      	b.n	4c88 <gpio_nrfx_pin_interrupt_configure+0x64>
    return (mask & (1UL << pin_number)) ? true : false;
    4d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d0a:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d0c:	07da      	lsls	r2, r3, #31
    4d0e:	d5cf      	bpl.n	4cb0 <gpio_nrfx_pin_interrupt_configure+0x8c>
        case 0: return NRF_P0;
    4d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d14:	e7dc      	b.n	4cd0 <gpio_nrfx_pin_interrupt_configure+0xac>
            NRFX_ASSERT(0);
    4d16:	4a0c      	ldr	r2, [pc, #48]	; (4d48 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4d18:	490e      	ldr	r1, [pc, #56]	; (4d54 <gpio_nrfx_pin_interrupt_configure+0x130>)
    4d1a:	480a      	ldr	r0, [pc, #40]	; (4d44 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4d1c:	f240 232e 	movw	r3, #558	; 0x22e
    4d20:	f005 fe17 	bl	a952 <assert_print>
    4d24:	4808      	ldr	r0, [pc, #32]	; (4d48 <gpio_nrfx_pin_interrupt_configure+0x124>)
    4d26:	f240 212e 	movw	r1, #558	; 0x22e
    4d2a:	f005 fe0b 	bl	a944 <assert_post_action>
    4d2e:	e7ef      	b.n	4d10 <gpio_nrfx_pin_interrupt_configure+0xec>
		trigger_config.p_in_channel = &ch;
    4d30:	9503      	str	r5, [sp, #12]
    4d32:	e793      	b.n	4c5c <gpio_nrfx_pin_interrupt_configure+0x38>
		return -EIO;
    4d34:	f06f 0004 	mvn.w	r0, #4
    4d38:	e7e1      	b.n	4cfe <gpio_nrfx_pin_interrupt_configure+0xda>
    4d3a:	bf00      	nop
    4d3c:	0bad0000 	.word	0x0bad0000
    4d40:	0000d21d 	.word	0x0000d21d
    4d44:	0000c18a 	.word	0x0000c18a
    4d48:	0000d1ea 	.word	0x0000d1ea
    4d4c:	50000300 	.word	0x50000300
    4d50:	0bad0004 	.word	0x0bad0004
    4d54:	0000dab4 	.word	0x0000dab4

00004d58 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4d58:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4d5a:	f001 fd45 	bl	67e8 <nrfx_gpiote_is_init>
    4d5e:	4604      	mov	r4, r0
    4d60:	b968      	cbnz	r0, 4d7e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4d62:	f001 fd19 	bl	6798 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4d66:	4b08      	ldr	r3, [pc, #32]	; (4d88 <gpio_nrfx_init+0x30>)
    4d68:	4298      	cmp	r0, r3
    4d6a:	d10a      	bne.n	4d82 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4d6c:	4807      	ldr	r0, [pc, #28]	; (4d8c <gpio_nrfx_init+0x34>)
    4d6e:	4621      	mov	r1, r4
    4d70:	f001 fce2 	bl	6738 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4d74:	4622      	mov	r2, r4
    4d76:	2105      	movs	r1, #5
    4d78:	2006      	movs	r0, #6
    4d7a:	f7fe fd99 	bl	38b0 <z_arm_irq_priority_set>
		return 0;
    4d7e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4d80:	bd10      	pop	{r4, pc}
		return -EIO;
    4d82:	f06f 0004 	mvn.w	r0, #4
    4d86:	e7fb      	b.n	4d80 <gpio_nrfx_init+0x28>
    4d88:	0bad0000 	.word	0x0bad0000
    4d8c:	00004d91 	.word	0x00004d91

00004d90 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d90:	0943      	lsrs	r3, r0, #5
{
    4d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d96:	d003      	beq.n	4da0 <nrfx_gpio_handler+0x10>
    4d98:	2b01      	cmp	r3, #1
    4d9a:	d030      	beq.n	4dfe <nrfx_gpio_handler+0x6e>
}
    4d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4da0:	4f19      	ldr	r7, [pc, #100]	; (4e08 <nrfx_gpio_handler+0x78>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4da2:	693b      	ldr	r3, [r7, #16]
    4da4:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4da6:	2c00      	cmp	r4, #0
    4da8:	d0f8      	beq.n	4d9c <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4daa:	f000 001f 	and.w	r0, r0, #31
    4dae:	2601      	movs	r6, #1
	return node->next;
    4db0:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    4db2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4e0c <nrfx_gpio_handler+0x7c>
    4db6:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4e10 <nrfx_gpio_handler+0x80>
    4dba:	f8df a058 	ldr.w	sl, [pc, #88]	; 4e14 <nrfx_gpio_handler+0x84>
    4dbe:	4086      	lsls	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4dc0:	2c00      	cmp	r4, #0
    4dc2:	d0eb      	beq.n	4d9c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4dc4:	68a3      	ldr	r3, [r4, #8]
    4dc6:	421e      	tst	r6, r3
    4dc8:	d014      	beq.n	4df4 <nrfx_gpio_handler+0x64>
			__ASSERT(cb->handler, "No callback handler!");
    4dca:	6863      	ldr	r3, [r4, #4]
    4dcc:	b963      	cbnz	r3, 4de8 <nrfx_gpio_handler+0x58>
    4dce:	4649      	mov	r1, r9
    4dd0:	2345      	movs	r3, #69	; 0x45
    4dd2:	4642      	mov	r2, r8
    4dd4:	4650      	mov	r0, sl
    4dd6:	f005 fdbc 	bl	a952 <assert_print>
    4dda:	480f      	ldr	r0, [pc, #60]	; (4e18 <nrfx_gpio_handler+0x88>)
    4ddc:	f005 fdb9 	bl	a952 <assert_print>
    4de0:	2145      	movs	r1, #69	; 0x45
    4de2:	4640      	mov	r0, r8
    4de4:	f005 fdae 	bl	a944 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    4de8:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4dec:	4621      	mov	r1, r4
    4dee:	4032      	ands	r2, r6
    4df0:	4638      	mov	r0, r7
    4df2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4df4:	b12d      	cbz	r5, 4e02 <nrfx_gpio_handler+0x72>
    4df6:	682b      	ldr	r3, [r5, #0]
    4df8:	462c      	mov	r4, r5
    4dfa:	461d      	mov	r5, r3
    4dfc:	e7e0      	b.n	4dc0 <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4dfe:	4f07      	ldr	r7, [pc, #28]	; (4e1c <nrfx_gpio_handler+0x8c>)
    4e00:	e7cf      	b.n	4da2 <nrfx_gpio_handler+0x12>
    4e02:	462b      	mov	r3, r5
    4e04:	e7f8      	b.n	4df8 <nrfx_gpio_handler+0x68>
    4e06:	bf00      	nop
    4e08:	0000ba30 	.word	0x0000ba30
    4e0c:	0000d17c 	.word	0x0000d17c
    4e10:	0000d240 	.word	0x0000d240
    4e14:	0000c18a 	.word	0x0000c18a
    4e18:	0000d1d3 	.word	0x0000d1d3
    4e1c:	0000ba18 	.word	0x0000ba18

00004e20 <gpio_nrfx_pin_configure>:
{
    4e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4e24:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e26:	7b3b      	ldrb	r3, [r7, #12]
    4e28:	f001 051f 	and.w	r5, r1, #31
{
    4e2c:	b085      	sub	sp, #20
    4e2e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4e30:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4e34:	4614      	mov	r4, r2
    4e36:	b9d2      	cbnz	r2, 4e6e <gpio_nrfx_pin_configure+0x4e>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4e38:	a902      	add	r1, sp, #8
    4e3a:	4628      	mov	r0, r5
    4e3c:	f001 fc82 	bl	6744 <nrfx_gpiote_channel_get>
    4e40:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4e42:	4628      	mov	r0, r5
    4e44:	f001 fd80 	bl	6948 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4e48:	4b46      	ldr	r3, [pc, #280]	; (4f64 <gpio_nrfx_pin_configure+0x144>)
    4e4a:	4298      	cmp	r0, r3
    4e4c:	d004      	beq.n	4e58 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4e4e:	f06f 0004 	mvn.w	r0, #4
}
    4e52:	b005      	add	sp, #20
    4e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4e58:	4284      	cmp	r4, r0
    4e5a:	d001      	beq.n	4e60 <gpio_nrfx_pin_configure+0x40>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4e5c:	2000      	movs	r0, #0
    4e5e:	e7f8      	b.n	4e52 <gpio_nrfx_pin_configure+0x32>
		err = nrfx_gpiote_channel_free(ch);
    4e60:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4e64:	f001 fcca 	bl	67fc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4e68:	42a0      	cmp	r0, r4
    4e6a:	d0f7      	beq.n	4e5c <gpio_nrfx_pin_configure+0x3c>
    4e6c:	e7ef      	b.n	4e4e <gpio_nrfx_pin_configure+0x2e>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e6e:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4e72:	f10d 0103 	add.w	r1, sp, #3
    4e76:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4e78:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4e7c:	f001 fc62 	bl	6744 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e80:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4e82:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4e84:	aa02      	add	r2, sp, #8
    4e86:	4649      	mov	r1, r9
    4e88:	4628      	mov	r0, r5
    4e8a:	f001 fb39 	bl	6500 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4e8e:	4b35      	ldr	r3, [pc, #212]	; (4f64 <gpio_nrfx_pin_configure+0x144>)
    4e90:	4298      	cmp	r0, r3
    4e92:	d002      	beq.n	4e9a <gpio_nrfx_pin_configure+0x7a>
		return NRF_GPIO_PIN_PULLUP;
    4e94:	f06f 0015 	mvn.w	r0, #21
    4e98:	e7db      	b.n	4e52 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4e9a:	4580      	cmp	r8, r0
    4e9c:	d103      	bne.n	4ea6 <gpio_nrfx_pin_configure+0x86>
		err = nrfx_gpiote_channel_free(ch);
    4e9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4ea2:	f001 fcab 	bl	67fc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4ea6:	03a3      	lsls	r3, r4, #14
    4ea8:	d54c      	bpl.n	4f44 <gpio_nrfx_pin_configure+0x124>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4eaa:	f240 6306 	movw	r3, #1542	; 0x606
    4eae:	4023      	ands	r3, r4
    4eb0:	f240 2206 	movw	r2, #518	; 0x206
    4eb4:	4293      	cmp	r3, r2
    4eb6:	d019      	beq.n	4eec <gpio_nrfx_pin_configure+0xcc>
    4eb8:	d80c      	bhi.n	4ed4 <gpio_nrfx_pin_configure+0xb4>
    4eba:	2b06      	cmp	r3, #6
    4ebc:	d017      	beq.n	4eee <gpio_nrfx_pin_configure+0xce>
    4ebe:	d804      	bhi.n	4eca <gpio_nrfx_pin_configure+0xaa>
    4ec0:	b1ab      	cbz	r3, 4eee <gpio_nrfx_pin_configure+0xce>
    4ec2:	2b02      	cmp	r3, #2
    4ec4:	d1e6      	bne.n	4e94 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0S1;
    4ec6:	2304      	movs	r3, #4
    4ec8:	e011      	b.n	4eee <gpio_nrfx_pin_configure+0xce>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4ece:	d1e1      	bne.n	4e94 <gpio_nrfx_pin_configure+0x74>
    4ed0:	2301      	movs	r3, #1
    4ed2:	e00c      	b.n	4eee <gpio_nrfx_pin_configure+0xce>
    4ed4:	f240 4202 	movw	r2, #1026	; 0x402
    4ed8:	4293      	cmp	r3, r2
    4eda:	d027      	beq.n	4f2c <gpio_nrfx_pin_configure+0x10c>
    4edc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    4ee0:	d026      	beq.n	4f30 <gpio_nrfx_pin_configure+0x110>
    4ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4ee6:	d1d5      	bne.n	4e94 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_S0H1;
    4ee8:	2302      	movs	r3, #2
    4eea:	e000      	b.n	4eee <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0D1;
    4eec:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4eee:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4ef2:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4ef6:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4efa:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4efc:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4f00:	bf54      	ite	pl
    4f02:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4f06:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f08:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4f0a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4f0e:	d511      	bpl.n	4f34 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4f10:	687a      	ldr	r2, [r7, #4]
    4f12:	2301      	movs	r3, #1
    4f14:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4f16:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4f1a:	2200      	movs	r2, #0
    4f1c:	a901      	add	r1, sp, #4
    4f1e:	4628      	mov	r0, r5
    4f20:	f001 fb96 	bl	6650 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4f24:	4b0f      	ldr	r3, [pc, #60]	; (4f64 <gpio_nrfx_pin_configure+0x144>)
    4f26:	4298      	cmp	r0, r3
    4f28:	d098      	beq.n	4e5c <gpio_nrfx_pin_configure+0x3c>
    4f2a:	e7b3      	b.n	4e94 <gpio_nrfx_pin_configure+0x74>
		*drive = NRF_GPIO_PIN_D0H1;
    4f2c:	2305      	movs	r3, #5
    4f2e:	e7de      	b.n	4eee <gpio_nrfx_pin_configure+0xce>
		*drive = NRF_GPIO_PIN_H0H1;
    4f30:	2303      	movs	r3, #3
    4f32:	e7dc      	b.n	4eee <gpio_nrfx_pin_configure+0xce>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4f34:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4f36:	bf41      	itttt	mi
    4f38:	2301      	movmi	r3, #1
    4f3a:	687a      	ldrmi	r2, [r7, #4]
    4f3c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4f3e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4f42:	e7ea      	b.n	4f1a <gpio_nrfx_pin_configure+0xfa>
	if (flags & GPIO_PULL_UP) {
    4f44:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f46:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4f4a:	bf54      	ite	pl
    4f4c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4f50:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f52:	461a      	mov	r2, r3
    4f54:	a901      	add	r1, sp, #4
    4f56:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4f58:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4f5c:	f001 fad0 	bl	6500 <nrfx_gpiote_input_configure>
    4f60:	e7e0      	b.n	4f24 <gpio_nrfx_pin_configure+0x104>
    4f62:	bf00      	nop
    4f64:	0bad0000 	.word	0x0bad0000

00004f68 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4f68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4f6a:	ab0b      	add	r3, sp, #44	; 0x2c
    4f6c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    4f6e:	9303      	str	r3, [sp, #12]
    4f70:	4b05      	ldr	r3, [pc, #20]	; (4f88 <z_log_msg2_runtime_create.constprop.0+0x20>)
    4f72:	9302      	str	r3, [sp, #8]
    4f74:	2300      	movs	r3, #0
    4f76:	e9cd 3300 	strd	r3, r3, [sp]
    4f7a:	2201      	movs	r2, #1
    4f7c:	4618      	mov	r0, r3
    4f7e:	f7fe f89f 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    4f82:	b007      	add	sp, #28
    4f84:	f85d fb04 	ldr.w	pc, [sp], #4
    4f88:	0000d25a 	.word	0x0000d25a

00004f8c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    4f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f90:	461c      	mov	r4, r3
	return config->uarte_regs;
    4f92:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    4f94:	6907      	ldr	r7, [r0, #16]
{
    4f96:	460e      	mov	r6, r1
    4f98:	4605      	mov	r5, r0
	return config->uarte_regs;
    4f9a:	6819      	ldr	r1, [r3, #0]
    4f9c:	f04f 0320 	mov.w	r3, #32
    4fa0:	f3ef 8811 	mrs	r8, BASEPRI
    4fa4:	f383 8812 	msr	BASEPRI_MAX, r3
    4fa8:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    4fac:	68f8      	ldr	r0, [r7, #12]
    4fae:	68c3      	ldr	r3, [r0, #12]
    4fb0:	b143      	cbz	r3, 4fc4 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    4fb2:	f388 8811 	msr	BASEPRI, r8
    4fb6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    4fba:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    4fbe:	b002      	add	sp, #8
    4fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    4fc4:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    4fc8:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    4fca:	6086      	str	r6, [r0, #8]
    4fcc:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4fd0:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    4fd4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    4fd8:	d110      	bne.n	4ffc <uarte_nrfx_tx+0x70>
		data->async->xfer_len = len;
    4fda:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    4fde:	4639      	mov	r1, r7
    4fe0:	4628      	mov	r0, r5
    4fe2:	f005 ff87 	bl	aef4 <start_tx_locked>
    4fe6:	f388 8811 	msr	BASEPRI, r8
    4fea:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    4fee:	7afb      	ldrb	r3, [r7, #11]
    4ff0:	2b01      	cmp	r3, #1
    4ff2:	d101      	bne.n	4ff8 <uarte_nrfx_tx+0x6c>
	    && timeout != SYS_FOREVER_US) {
    4ff4:	1c63      	adds	r3, r4, #1
    4ff6:	d105      	bne.n	5004 <uarte_nrfx_tx+0x78>
	return 0;
    4ff8:	2000      	movs	r0, #0
    4ffa:	e7e0      	b.n	4fbe <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    4ffc:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    4ffe:	f005 ff2e 	bl	ae5e <setup_tx_cache.isra.0>
    5002:	e7ec      	b.n	4fde <uarte_nrfx_tx+0x52>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5004:	480b      	ldr	r0, [pc, #44]	; (5034 <uarte_nrfx_tx+0xa8>)
    5006:	4a0c      	ldr	r2, [pc, #48]	; (5038 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    5008:	68fd      	ldr	r5, [r7, #12]
    500a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    500e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5012:	2100      	movs	r1, #0
    5014:	2300      	movs	r3, #0
    5016:	fbc4 0106 	smlal	r0, r1, r4, r6
    501a:	f7fb fcdf 	bl	9dc <__aeabi_uldivmod>
    501e:	3528      	adds	r5, #40	; 0x28
    5020:	4602      	mov	r2, r0
    5022:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    5024:	2000      	movs	r0, #0
    5026:	2100      	movs	r1, #0
    5028:	e9cd 0100 	strd	r0, r1, [sp]
    502c:	4628      	mov	r0, r5
    502e:	f004 f9ed 	bl	940c <z_impl_k_timer_start>
    5032:	e7e1      	b.n	4ff8 <uarte_nrfx_tx+0x6c>
    5034:	000f423f 	.word	0x000f423f
    5038:	000f4240 	.word	0x000f4240

0000503c <uarte_nrfx_configure>:
{
    503c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    503e:	794b      	ldrb	r3, [r1, #5]
    5040:	2b01      	cmp	r3, #1
    5042:	d026      	beq.n	5092 <uarte_nrfx_configure+0x56>
    5044:	2b03      	cmp	r3, #3
    5046:	d121      	bne.n	508c <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5048:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    504a:	798b      	ldrb	r3, [r1, #6]
    504c:	2b03      	cmp	r3, #3
    504e:	d11d      	bne.n	508c <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    5050:	79cc      	ldrb	r4, [r1, #7]
    5052:	b10c      	cbz	r4, 5058 <uarte_nrfx_configure+0x1c>
    5054:	2c01      	cmp	r4, #1
    5056:	d119      	bne.n	508c <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    5058:	790a      	ldrb	r2, [r1, #4]
    505a:	b112      	cbz	r2, 5062 <uarte_nrfx_configure+0x26>
    505c:	2a02      	cmp	r2, #2
    505e:	d115      	bne.n	508c <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5060:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5062:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5064:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    5066:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    506a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    506c:	d065      	beq.n	513a <uarte_nrfx_configure+0xfe>
    506e:	d82d      	bhi.n	50cc <uarte_nrfx_configure+0x90>
    5070:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5074:	d064      	beq.n	5140 <uarte_nrfx_configure+0x104>
    5076:	d816      	bhi.n	50a6 <uarte_nrfx_configure+0x6a>
    5078:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    507c:	d062      	beq.n	5144 <uarte_nrfx_configure+0x108>
    507e:	d80a      	bhi.n	5096 <uarte_nrfx_configure+0x5a>
    5080:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5084:	d061      	beq.n	514a <uarte_nrfx_configure+0x10e>
    5086:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    508a:	d061      	beq.n	5150 <uarte_nrfx_configure+0x114>
		return -ENOTSUP;
    508c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5090:	e052      	b.n	5138 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    5092:	2600      	movs	r6, #0
    5094:	e7d9      	b.n	504a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    5096:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    509a:	d05c      	beq.n	5156 <uarte_nrfx_configure+0x11a>
    509c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    50a0:	d1f4      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    50a2:	4b37      	ldr	r3, [pc, #220]	; (5180 <uarte_nrfx_configure+0x144>)
    50a4:	e03c      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50a6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    50aa:	d057      	beq.n	515c <uarte_nrfx_configure+0x120>
    50ac:	d807      	bhi.n	50be <uarte_nrfx_configure+0x82>
    50ae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    50b2:	d055      	beq.n	5160 <uarte_nrfx_configure+0x124>
    50b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    50b8:	d1e8      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    50ba:	4b32      	ldr	r3, [pc, #200]	; (5184 <uarte_nrfx_configure+0x148>)
    50bc:	e030      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50be:	f647 2712 	movw	r7, #31250	; 0x7a12
    50c2:	42bb      	cmp	r3, r7
    50c4:	d1e2      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    50c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    50ca:	e029      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50cc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    50d0:	d048      	beq.n	5164 <uarte_nrfx_configure+0x128>
    50d2:	d813      	bhi.n	50fc <uarte_nrfx_configure+0xc0>
    50d4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    50d8:	d047      	beq.n	516a <uarte_nrfx_configure+0x12e>
    50da:	d809      	bhi.n	50f0 <uarte_nrfx_configure+0xb4>
    50dc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    50e0:	42bb      	cmp	r3, r7
    50e2:	d044      	beq.n	516e <uarte_nrfx_configure+0x132>
    50e4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    50e8:	d1d0      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    50ea:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    50ee:	e017      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50f0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    50f4:	d1ca      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    50f6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    50fa:	e011      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    50fc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    5100:	d038      	beq.n	5174 <uarte_nrfx_configure+0x138>
    5102:	d808      	bhi.n	5116 <uarte_nrfx_configure+0xda>
    5104:	4f20      	ldr	r7, [pc, #128]	; (5188 <uarte_nrfx_configure+0x14c>)
    5106:	42bb      	cmp	r3, r7
    5108:	d037      	beq.n	517a <uarte_nrfx_configure+0x13e>
    510a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    510e:	d1bd      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    5110:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    5114:	e004      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5116:	4f1d      	ldr	r7, [pc, #116]	; (518c <uarte_nrfx_configure+0x150>)
    5118:	42bb      	cmp	r3, r7
    511a:	d1b7      	bne.n	508c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    511c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5120:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5122:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    5126:	1d03      	adds	r3, r0, #4
    5128:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    512a:	4334      	orrs	r4, r6
    512c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    512e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    5132:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    5136:	2000      	movs	r0, #0
}
    5138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    513a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    513e:	e7ef      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5140:	4b13      	ldr	r3, [pc, #76]	; (5190 <uarte_nrfx_configure+0x154>)
    5142:	e7ed      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5144:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    5148:	e7ea      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    514a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    514e:	e7e7      	b.n	5120 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5150:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5154:	e7e4      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    5156:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    515a:	e7e1      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    515c:	4b0d      	ldr	r3, [pc, #52]	; (5194 <uarte_nrfx_configure+0x158>)
    515e:	e7df      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5160:	4b0d      	ldr	r3, [pc, #52]	; (5198 <uarte_nrfx_configure+0x15c>)
    5162:	e7dd      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5164:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    5168:	e7da      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    516a:	4b0c      	ldr	r3, [pc, #48]	; (519c <uarte_nrfx_configure+0x160>)
    516c:	e7d8      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    516e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5172:	e7d5      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5174:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    5178:	e7d2      	b.n	5120 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    517a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    517e:	e7cf      	b.n	5120 <uarte_nrfx_configure+0xe4>
    5180:	0013b000 	.word	0x0013b000
    5184:	004ea000 	.word	0x004ea000
    5188:	0003d090 	.word	0x0003d090
    518c:	000f4240 	.word	0x000f4240
    5190:	00275000 	.word	0x00275000
    5194:	0075c000 	.word	0x0075c000
    5198:	003af000 	.word	0x003af000
    519c:	013a9000 	.word	0x013a9000

000051a0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    51a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    51a4:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    51a8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    51aa:	f8d9 5000 	ldr.w	r5, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    51ae:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    51b2:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    51b4:	2100      	movs	r1, #0
    51b6:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    51ba:	4607      	mov	r7, r0
	data->dev = dev;
    51bc:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    51be:	aa05      	add	r2, sp, #20
    51c0:	4640      	mov	r0, r8
    51c2:	f005 ff39 	bl	b038 <pinctrl_lookup_state>
	if (ret < 0) {
    51c6:	1e04      	subs	r4, r0, #0
    51c8:	db25      	blt.n	5216 <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    51ca:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    51cc:	f8d8 2000 	ldr.w	r2, [r8]
    51d0:	7919      	ldrb	r1, [r3, #4]
    51d2:	6818      	ldr	r0, [r3, #0]
    51d4:	f005 ff87 	bl	b0e6 <pinctrl_configure_pins>
	if (err < 0) {
    51d8:	1e04      	subs	r4, r0, #0
    51da:	db1c      	blt.n	5216 <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    51dc:	1d31      	adds	r1, r6, #4
    51de:	4638      	mov	r0, r7
    51e0:	f7ff ff2c 	bl	503c <uarte_nrfx_configure>
	if (err) {
    51e4:	4604      	mov	r4, r0
    51e6:	b9b0      	cbnz	r0, 5216 <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    51e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    51ec:	0799      	lsls	r1, r3, #30
    51ee:	d529      	bpl.n	5244 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    51f0:	f106 0016 	add.w	r0, r6, #22
    51f4:	f001 fcac 	bl	6b50 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    51f8:	4b49      	ldr	r3, [pc, #292]	; (5320 <uarte_instance_init.constprop.0+0x180>)
    51fa:	4298      	cmp	r0, r3
    51fc:	d00f      	beq.n	521e <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    51fe:	4b49      	ldr	r3, [pc, #292]	; (5324 <uarte_instance_init.constprop.0+0x184>)
    5200:	9400      	str	r4, [sp, #0]
    5202:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5206:	4620      	mov	r0, r4
    5208:	4623      	mov	r3, r4
    520a:	4947      	ldr	r1, [pc, #284]	; (5328 <uarte_instance_init.constprop.0+0x188>)
    520c:	2201      	movs	r2, #1
    520e:	f7ff feab 	bl	4f68 <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    5212:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5216:	4620      	mov	r0, r4
    5218:	b007      	add	sp, #28
    521a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    521e:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5220:	00c3      	lsls	r3, r0, #3
    5222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5226:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    522a:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    522e:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5232:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5236:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    523a:	4a3c      	ldr	r2, [pc, #240]	; (532c <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    523c:	2301      	movs	r3, #1
    523e:	4083      	lsls	r3, r0
    5240:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    5244:	68f3      	ldr	r3, [r6, #12]
    5246:	2b00      	cmp	r3, #0
    5248:	d055      	beq.n	52f6 <uarte_instance_init.constprop.0+0x156>
	return config->uarte_regs;
    524a:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    524c:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    5250:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    5252:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    5256:	4936      	ldr	r1, [pc, #216]	; (5330 <uarte_instance_init.constprop.0+0x190>)
    5258:	2204      	movs	r2, #4
    525a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    525e:	2201      	movs	r2, #1
    5260:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    5264:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5268:	2108      	movs	r1, #8
    526a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    526e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    5272:	b1a1      	cbz	r1, 529e <uarte_instance_init.constprop.0+0xfe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5274:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5276:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    527a:	b91a      	cbnz	r2, 5284 <uarte_instance_init.constprop.0+0xe4>
    527c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    5280:	2a00      	cmp	r2, #0
    5282:	d0f8      	beq.n	5276 <uarte_instance_init.constprop.0+0xd6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5284:	2200      	movs	r2, #0
    5286:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    528a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    528e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    5292:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    5296:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    529a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    529e:	4925      	ldr	r1, [pc, #148]	; (5334 <uarte_instance_init.constprop.0+0x194>)
    52a0:	2200      	movs	r2, #0
    52a2:	3088      	adds	r0, #136	; 0x88
    52a4:	f006 f8f0 	bl	b488 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    52a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    52ac:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    52b0:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    52b4:	4920      	ldr	r1, [pc, #128]	; (5338 <uarte_instance_init.constprop.0+0x198>)
    52b6:	2200      	movs	r2, #0
    52b8:	3028      	adds	r0, #40	; 0x28
    52ba:	f006 f8e5 	bl	b488 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    52be:	f8d8 300c 	ldr.w	r3, [r8, #12]
    52c2:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    52c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    52ca:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    52cc:	bf5c      	itt	pl
    52ce:	f44f 7280 	movpl.w	r2, #256	; 0x100
    52d2:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    52d6:	06db      	lsls	r3, r3, #27
    52d8:	bf44      	itt	mi
    52da:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    52de:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    52e2:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    52e4:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    52e6:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    52ea:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52ee:	2301      	movs	r3, #1
    52f0:	60ab      	str	r3, [r5, #8]
    52f2:	60eb      	str	r3, [r5, #12]
	return 0;
    52f4:	e78f      	b.n	5216 <uarte_instance_init.constprop.0+0x76>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    52f6:	2308      	movs	r3, #8
    52f8:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    52fc:	f899 3008 	ldrb.w	r3, [r9, #8]
    5300:	2b00      	cmp	r3, #0
    5302:	d1e0      	bne.n	52c6 <uarte_instance_init.constprop.0+0x126>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5304:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    5308:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    530c:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5310:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5314:	2301      	movs	r3, #1
    5316:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    531a:	602b      	str	r3, [r5, #0]
}
    531c:	e7d3      	b.n	52c6 <uarte_instance_init.constprop.0+0x126>
    531e:	bf00      	nop
    5320:	0bad0000 	.word	0x0bad0000
    5324:	0000d25a 	.word	0x0000d25a
    5328:	0000bc38 	.word	0x0000bc38
    532c:	4001f000 	.word	0x4001f000
    5330:	000a0210 	.word	0x000a0210
    5334:	0000af63 	.word	0x0000af63
    5338:	0000b027 	.word	0x0000b027

0000533c <uarte_nrfx_poll_out>:
{
    533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    533e:	6906      	ldr	r6, [r0, #16]
{
    5340:	4605      	mov	r5, r0
    5342:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5344:	f006 f836 	bl	b3b4 <k_is_in_isr>
    5348:	b9b0      	cbnz	r0, 5378 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    534a:	4b28      	ldr	r3, [pc, #160]	; (53ec <uarte_nrfx_poll_out+0xb0>)
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	b19b      	cbz	r3, 5378 <uarte_nrfx_poll_out+0x3c>
{
    5350:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5352:	6868      	ldr	r0, [r5, #4]
    5354:	f005 fdbe 	bl	aed4 <is_tx_ready.isra.0>
    5358:	2800      	cmp	r0, #0
    535a:	d134      	bne.n	53c6 <uarte_nrfx_poll_out+0x8a>
    535c:	2001      	movs	r0, #1
    535e:	f005 ff6d 	bl	b23c <nrfx_busy_wait>
    5362:	3c01      	subs	r4, #1
    5364:	d1f5      	bne.n	5352 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    5366:	2100      	movs	r1, #0
    5368:	2021      	movs	r0, #33	; 0x21
    536a:	f003 fb85 	bl	8a78 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    536e:	e7ef      	b.n	5350 <uarte_nrfx_poll_out+0x14>
    5370:	f384 8811 	msr	BASEPRI, r4
    5374:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    5378:	f04f 0320 	mov.w	r3, #32
    537c:	f3ef 8411 	mrs	r4, BASEPRI
    5380:	f383 8812 	msr	BASEPRI_MAX, r3
    5384:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5388:	6869      	ldr	r1, [r5, #4]
    538a:	4608      	mov	r0, r1
    538c:	f005 fda2 	bl	aed4 <is_tx_ready.isra.0>
    5390:	2800      	cmp	r0, #0
    5392:	d0ed      	beq.n	5370 <uarte_nrfx_poll_out+0x34>
				if (data->async && data->async->tx_size &&
    5394:	68f3      	ldr	r3, [r6, #12]
    5396:	b153      	cbz	r3, 53ae <uarte_nrfx_poll_out+0x72>
    5398:	68da      	ldr	r2, [r3, #12]
    539a:	b142      	cbz	r2, 53ae <uarte_nrfx_poll_out+0x72>
					data->async->tx_amount < 0) {
    539c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    53a0:	2a00      	cmp	r2, #0
    53a2:	da04      	bge.n	53ae <uarte_nrfx_poll_out+0x72>
	return config->uarte_regs;
    53a4:	680a      	ldr	r2, [r1, #0]
    return p_reg->TXD.AMOUNT;
    53a6:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    53aa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    53ae:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    53b0:	2201      	movs	r2, #1
	data->char_out = c;
    53b2:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    53b6:	4628      	mov	r0, r5
    53b8:	f005 fc42 	bl	ac40 <tx_start>
	__asm__ volatile(
    53bc:	f384 8811 	msr	BASEPRI, r4
    53c0:	f3bf 8f6f 	isb	sy
}
    53c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    53c6:	f04f 0320 	mov.w	r3, #32
    53ca:	f3ef 8411 	mrs	r4, BASEPRI
    53ce:	f383 8812 	msr	BASEPRI_MAX, r3
    53d2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    53d6:	6868      	ldr	r0, [r5, #4]
    53d8:	f005 fd7c 	bl	aed4 <is_tx_ready.isra.0>
    53dc:	2800      	cmp	r0, #0
    53de:	d1e6      	bne.n	53ae <uarte_nrfx_poll_out+0x72>
	__asm__ volatile(
    53e0:	f384 8811 	msr	BASEPRI, r4
    53e4:	f3bf 8f6f 	isb	sy
}
    53e8:	e7bd      	b.n	5366 <uarte_nrfx_poll_out+0x2a>
    53ea:	bf00      	nop
    53ec:	20005548 	.word	0x20005548

000053f0 <uarte_nrfx_rx_enable>:
{
    53f0:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    53f4:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    53f8:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    53fc:	f8da 8000 	ldr.w	r8, [sl]
{
    5400:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    5402:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    5406:	4605      	mov	r5, r0
    5408:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    540a:	b192      	cbz	r2, 5432 <uarte_nrfx_rx_enable+0x42>
		__ASSERT(false, "TX only UARTE instance");
    540c:	4a43      	ldr	r2, [pc, #268]	; (551c <uarte_nrfx_rx_enable+0x12c>)
    540e:	4944      	ldr	r1, [pc, #272]	; (5520 <uarte_nrfx_rx_enable+0x130>)
    5410:	4844      	ldr	r0, [pc, #272]	; (5524 <uarte_nrfx_rx_enable+0x134>)
    5412:	f240 337f 	movw	r3, #895	; 0x37f
    5416:	f005 fa9c 	bl	a952 <assert_print>
    541a:	4843      	ldr	r0, [pc, #268]	; (5528 <uarte_nrfx_rx_enable+0x138>)
    541c:	f005 fa99 	bl	a952 <assert_print>
    5420:	483e      	ldr	r0, [pc, #248]	; (551c <uarte_nrfx_rx_enable+0x12c>)
    5422:	f240 317f 	movw	r1, #895	; 0x37f
    5426:	f005 fa8d 	bl	a944 <assert_post_action>
		return -ENOTSUP;
    542a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    542e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	if (data->async->rx_enabled) {
    5432:	f8db 100c 	ldr.w	r1, [fp, #12]
    5436:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    543a:	2a00      	cmp	r2, #0
    543c:	d16b      	bne.n	5516 <uarte_nrfx_rx_enable+0x126>
		MAX(timeout / RX_TIMEOUT_DIV,
    543e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    5442:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    5444:	bfd2      	itee	le
    5446:	235c      	movle	r3, #92	; 0x5c
    5448:	2205      	movgt	r2, #5
    544a:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    544e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    5452:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    5454:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    5458:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    545a:	f8da 3004 	ldr.w	r3, [sl, #4]
    545e:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    5460:	e9c1 9718 	strd	r9, r7, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5464:	d523      	bpl.n	54ae <uarte_nrfx_rx_enable+0xbe>
		if (data->async->rx_flush_cnt) {
    5466:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
    546a:	b306      	cbz	r6, 54ae <uarte_nrfx_rx_enable+0xbe>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    546c:	42be      	cmp	r6, r7
    546e:	bf28      	it	cs
    5470:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5472:	4648      	mov	r0, r9
    5474:	4632      	mov	r2, r6
    5476:	31cc      	adds	r1, #204	; 0xcc
    5478:	f006 f8a3 	bl	b5c2 <memcpy>
			if (!len) {
    547c:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    547e:	44b1      	add	r9, r6
			if (!len) {
    5480:	d115      	bne.n	54ae <uarte_nrfx_rx_enable+0xbe>
				data->async->rx_flush_cnt -= cpy_len;
    5482:	f8db 200c 	ldr.w	r2, [fp, #12]
    5486:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    548a:	1b9b      	subs	r3, r3, r6
    548c:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    5490:	4631      	mov	r1, r6
    5492:	4628      	mov	r0, r5
    5494:	f005 fc01 	bl	ac9a <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    5498:	f8db 100c 	ldr.w	r1, [fp, #12]
    549c:	4628      	mov	r0, r5
    549e:	3160      	adds	r1, #96	; 0x60
    54a0:	f005 fc14 	bl	accc <rx_buf_release>
				notify_rx_disable(dev);
    54a4:	4628      	mov	r0, r5
    54a6:	f005 fc29 	bl	acfc <notify_rx_disable>
				return 0;
    54aa:	2000      	movs	r0, #0
    54ac:	e7bf      	b.n	542e <uarte_nrfx_rx_enable+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54ae:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    54b0:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    54b4:	f8c8 7538 	str.w	r7, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54b8:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    54bc:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    54c0:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    54c4:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    54c8:	f8db 300c 	ldr.w	r3, [fp, #12]
    54cc:	2201      	movs	r2, #1
    54ce:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    54d2:	f8da 3004 	ldr.w	r3, [sl, #4]
    54d6:	06db      	lsls	r3, r3, #27
    54d8:	d519      	bpl.n	550e <uarte_nrfx_rx_enable+0x11e>
	__asm__ volatile(
    54da:	f04f 0320 	mov.w	r3, #32
    54de:	f3ef 8111 	mrs	r1, BASEPRI
    54e2:	f383 8812 	msr	BASEPRI_MAX, r3
    54e6:	f3bf 8f6f 	isb	sy
	if (data->async) {
    54ea:	692b      	ldr	r3, [r5, #16]
	const struct uarte_nrfx_config *config = dev->config;
    54ec:	6868      	ldr	r0, [r5, #4]
	if (data->async) {
    54ee:	68db      	ldr	r3, [r3, #12]
    54f0:	b12b      	cbz	r3, 54fe <uarte_nrfx_rx_enable+0x10e>
		data->async->low_power_mask |= mask;
    54f2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    54f6:	f042 0202 	orr.w	r2, r2, #2
    54fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    54fe:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5500:	2208      	movs	r2, #8
    5502:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    5506:	f381 8811 	msr	BASEPRI, r1
    550a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    550e:	2301      	movs	r3, #1
    5510:	f8c8 3000 	str.w	r3, [r8]
	return 0;
    5514:	e7c9      	b.n	54aa <uarte_nrfx_rx_enable+0xba>
		return -EBUSY;
    5516:	f06f 000f 	mvn.w	r0, #15
    551a:	e788      	b.n	542e <uarte_nrfx_rx_enable+0x3e>
    551c:	0000d279 	.word	0x0000d279
    5520:	0000dab4 	.word	0x0000dab4
    5524:	0000c18a 	.word	0x0000c18a
    5528:	0000d2ad 	.word	0x0000d2ad

0000552c <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    552c:	6843      	ldr	r3, [r0, #4]
{
    552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    5532:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    5534:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5536:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    553a:	b088      	sub	sp, #32
    553c:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    553e:	b169      	cbz	r1, 555c <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5540:	2200      	movs	r2, #0
    5542:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    5546:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    554a:	68da      	ldr	r2, [r3, #12]
    554c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    5550:	3301      	adds	r3, #1
    5552:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    5556:	b008      	add	sp, #32
    5558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    555c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    5560:	b313      	cbz	r3, 55a8 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5562:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    5566:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    556a:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    556e:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    5572:	2214      	movs	r2, #20
    5574:	a803      	add	r0, sp, #12
    5576:	f006 f832 	bl	b5de <memset>
    557a:	2306      	movs	r3, #6
    557c:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    5580:	07f3      	lsls	r3, r6, #31
    5582:	f100 8102 	bmi.w	578a <uarte_nrfx_isr_async+0x25e>
    5586:	07b7      	lsls	r7, r6, #30
    5588:	f100 8101 	bmi.w	578e <uarte_nrfx_isr_async+0x262>
    558c:	0770      	lsls	r0, r6, #29
    558e:	f100 8100 	bmi.w	5792 <uarte_nrfx_isr_async+0x266>
    5592:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    5596:	4620      	mov	r0, r4
    5598:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    559a:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    559e:	f005 fb75 	bl	ac8c <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    55a2:	4620      	mov	r0, r4
    55a4:	f005 fc05 	bl	adb2 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    55a8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    55ac:	b37b      	cbz	r3, 560e <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    55ae:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    55b2:	06d9      	lsls	r1, r3, #27
    55b4:	d52b      	bpl.n	560e <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    55b6:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    55ba:	6927      	ldr	r7, [r4, #16]
    55bc:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    55c0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    55c4:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    55c6:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    55c8:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    55ca:	2301      	movs	r3, #1
    55cc:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    55d0:	3088      	adds	r0, #136	; 0x88
    55d2:	f005 ff65 	bl	b4a0 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    55d6:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    55d8:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    55dc:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    55e0:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    55e2:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    55e6:	1a1b      	subs	r3, r3, r0
    55e8:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    55ea:	6f90      	ldr	r0, [r2, #120]	; 0x78
	if (rx_len < 0) {
    55ec:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    55f0:	4408      	add	r0, r1
	if (rx_len > 0) {
    55f2:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    55f4:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    55f6:	dd02      	ble.n	55fe <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    55f8:	4620      	mov	r0, r4
    55fa:	f005 fb4e 	bl	ac9a <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    55fe:	68f9      	ldr	r1, [r7, #12]
    5600:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    5604:	2b00      	cmp	r3, #0
    5606:	f040 80c6 	bne.w	5796 <uarte_nrfx_isr_async+0x26a>
		data->async->is_in_irq = false;
    560a:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    560e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    5612:	b38b      	cbz	r3, 5678 <uarte_nrfx_isr_async+0x14c>
    5614:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5618:	bb76      	cbnz	r6, 5678 <uarte_nrfx_isr_async+0x14c>
	struct uart_event evt = {
    561a:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    561c:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    561e:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    5622:	4631      	mov	r1, r6
    5624:	a803      	add	r0, sp, #12
    5626:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    562a:	f005 ffd8 	bl	b5de <memset>
    562e:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    5630:	a903      	add	r1, sp, #12
    5632:	4620      	mov	r0, r4
	struct uart_event evt = {
    5634:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    5638:	f005 fb28 	bl	ac8c <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    563c:	68ff      	ldr	r7, [r7, #12]
    563e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    5640:	1c5a      	adds	r2, r3, #1
    5642:	d019      	beq.n	5678 <uarte_nrfx_isr_async+0x14c>
			      K_USEC(data->async->rx_timeout_slab),
    5644:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    5648:	498b      	ldr	r1, [pc, #556]	; (5878 <uarte_nrfx_isr_async+0x34c>)
		data->async->rx_timeout_left = data->async->rx_timeout;
    564a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    564e:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    5652:	468e      	mov	lr, r1
    5654:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5658:	4631      	mov	r1, r6
    565a:	fbcc e100 	smlal	lr, r1, ip, r0
    565e:	4a87      	ldr	r2, [pc, #540]	; (587c <uarte_nrfx_isr_async+0x350>)
    5660:	2300      	movs	r3, #0
    5662:	4670      	mov	r0, lr
    5664:	f7fb f9ba 	bl	9dc <__aeabi_uldivmod>
    5668:	4602      	mov	r2, r0
    566a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    566c:	e9cd 0100 	strd	r0, r1, [sp]
    5670:	f107 0088 	add.w	r0, r7, #136	; 0x88
    5674:	f003 feca 	bl	940c <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5678:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    567c:	b333      	cbz	r3, 56cc <uarte_nrfx_isr_async+0x1a0>
    567e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    5682:	bb1e      	cbnz	r6, 56cc <uarte_nrfx_isr_async+0x1a0>
	struct uarte_nrfx_data *data = dev->data;
    5684:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5686:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    568a:	68f9      	ldr	r1, [r7, #12]
    568c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    5690:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    5694:	3160      	adds	r1, #96	; 0x60
    5696:	4620      	mov	r0, r4
    5698:	f005 fb18 	bl	accc <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    569c:	68f9      	ldr	r1, [r7, #12]
    569e:	4620      	mov	r0, r4
    56a0:	316c      	adds	r1, #108	; 0x6c
    56a2:	f005 fb13 	bl	accc <rx_buf_release>
	if (data->async->rx_enabled) {
    56a6:	68fb      	ldr	r3, [r7, #12]
    56a8:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    56ac:	2a00      	cmp	r2, #0
    56ae:	f000 809f 	beq.w	57f0 <uarte_nrfx_isr_async+0x2c4>
		data->async->rx_enabled = false;
    56b2:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    56b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    56ba:	06d8      	lsls	r0, r3, #27
    56bc:	d503      	bpl.n	56c6 <uarte_nrfx_isr_async+0x19a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    56be:	2102      	movs	r1, #2
    56c0:	4620      	mov	r0, r4
    56c2:	f005 fbe0 	bl	ae86 <async_uart_release>
	notify_rx_disable(dev);
    56c6:	4620      	mov	r0, r4
    56c8:	f005 fb18 	bl	acfc <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56cc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    56d0:	b1db      	cbz	r3, 570a <uarte_nrfx_isr_async+0x1de>
    return p_reg->INTENSET & mask;
    56d2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    56d6:	05d9      	lsls	r1, r3, #23
    56d8:	d517      	bpl.n	570a <uarte_nrfx_isr_async+0x1de>
	return config->uarte_regs;
    56da:	6863      	ldr	r3, [r4, #4]
    56dc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    56de:	f04f 0120 	mov.w	r1, #32
    56e2:	f3ef 8211 	mrs	r2, BASEPRI
    56e6:	f381 8812 	msr	BASEPRI_MAX, r1
    56ea:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56ee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    56f2:	b131      	cbz	r1, 5702 <uarte_nrfx_isr_async+0x1d6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56f4:	2100      	movs	r1, #0
    56f6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    56fa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    56fe:	2101      	movs	r1, #1
    5700:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5702:	f382 8811 	msr	BASEPRI, r2
    5706:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    570a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    570e:	2b00      	cmp	r3, #0
    5710:	f43f af21 	beq.w	5556 <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    5714:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    5718:	025a      	lsls	r2, r3, #9
    571a:	f57f af1c 	bpl.w	5556 <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    571e:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    5720:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5722:	e9d3 7300 	ldrd	r7, r3, [r3]
    5726:	06db      	lsls	r3, r3, #27
    5728:	d467      	bmi.n	57fa <uarte_nrfx_isr_async+0x2ce>
	if (!data->async->tx_buf) {
    572a:	68eb      	ldr	r3, [r5, #12]
    572c:	689b      	ldr	r3, [r3, #8]
    572e:	2b00      	cmp	r3, #0
    5730:	f43f af11 	beq.w	5556 <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    5734:	f04f 0320 	mov.w	r3, #32
    5738:	f3ef 8211 	mrs	r2, BASEPRI
    573c:	f383 8812 	msr	BASEPRI_MAX, r3
    5740:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    5744:	68eb      	ldr	r3, [r5, #12]
    5746:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    574a:	2900      	cmp	r1, #0
    574c:	bfac      	ite	ge
    574e:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    5752:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    5756:	f382 8811 	msr	BASEPRI, r2
    575a:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    575e:	68e8      	ldr	r0, [r5, #12]
    5760:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    5764:	2b00      	cmp	r3, #0
    5766:	d055      	beq.n	5814 <uarte_nrfx_isr_async+0x2e8>
	__asm__ volatile(
    5768:	f04f 0320 	mov.w	r3, #32
    576c:	f3ef 8611 	mrs	r6, BASEPRI
    5770:	f383 8812 	msr	BASEPRI_MAX, r3
    5774:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    5778:	4629      	mov	r1, r5
    577a:	4620      	mov	r0, r4
    577c:	f005 fbba 	bl	aef4 <start_tx_locked>
	__asm__ volatile(
    5780:	f386 8811 	msr	BASEPRI, r6
    5784:	f3bf 8f6f 	isb	sy
				return;
    5788:	e6e5      	b.n	5556 <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    578a:	2601      	movs	r6, #1
    578c:	e703      	b.n	5596 <uarte_nrfx_isr_async+0x6a>
    578e:	2602      	movs	r6, #2
    5790:	e701      	b.n	5596 <uarte_nrfx_isr_async+0x6a>
    5792:	2604      	movs	r6, #4
    5794:	e6ff      	b.n	5596 <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    5796:	3160      	adds	r1, #96	; 0x60
    5798:	4620      	mov	r0, r4
    579a:	f005 fa97 	bl	accc <rx_buf_release>
	__asm__ volatile(
    579e:	f04f 0320 	mov.w	r3, #32
    57a2:	f3ef 8111 	mrs	r1, BASEPRI
    57a6:	f383 8812 	msr	BASEPRI_MAX, r3
    57aa:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    57ae:	68fb      	ldr	r3, [r7, #12]
    57b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    57b2:	b1d2      	cbz	r2, 57ea <uarte_nrfx_isr_async+0x2be>
		data->async->rx_buf = data->async->rx_next_buf;
    57b4:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    57b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    57b8:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    57ba:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    57bc:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    57c0:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57c2:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    57c6:	b90b      	cbnz	r3, 57cc <uarte_nrfx_isr_async+0x2a0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57c8:	2301      	movs	r3, #1
    57ca:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    57cc:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    57d0:	f023 0320 	bic.w	r3, r3, #32
    57d4:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    57d8:	f381 8811 	msr	BASEPRI, r1
    57dc:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    57e0:	68fb      	ldr	r3, [r7, #12]
    57e2:	2200      	movs	r2, #0
    57e4:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    57e8:	e711      	b.n	560e <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    57ea:	2301      	movs	r3, #1
    57ec:	6073      	str	r3, [r6, #4]
}
    57ee:	e7f3      	b.n	57d8 <uarte_nrfx_isr_async+0x2ac>
		(void)rx_flush(dev, NULL, 0);
    57f0:	6860      	ldr	r0, [r4, #4]
    57f2:	4611      	mov	r1, r2
    57f4:	f005 fafe 	bl	adf4 <rx_flush.isra.0>
    57f8:	e75d      	b.n	56b6 <uarte_nrfx_isr_async+0x18a>
    p_reg->INTENCLR = mask;
    57fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    57fe:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    5802:	2101      	movs	r1, #1
    5804:	4620      	mov	r0, r4
    5806:	f005 fb3e 	bl	ae86 <async_uart_release>
		if (!data->async->tx_size) {
    580a:	68eb      	ldr	r3, [r5, #12]
    580c:	68db      	ldr	r3, [r3, #12]
    580e:	2b00      	cmp	r3, #0
    5810:	d18b      	bne.n	572a <uarte_nrfx_isr_async+0x1fe>
    5812:	e6a0      	b.n	5556 <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    5814:	6882      	ldr	r2, [r0, #8]
    5816:	6903      	ldr	r3, [r0, #16]
    5818:	429a      	cmp	r2, r3
    581a:	d00b      	beq.n	5834 <uarte_nrfx_isr_async+0x308>
		if (amount == data->async->xfer_len) {
    581c:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    581e:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    5820:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    5822:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    5824:	d125      	bne.n	5872 <uarte_nrfx_isr_async+0x346>
			data->async->tx_cache_offset += amount;
    5826:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    5828:	f005 fb19 	bl	ae5e <setup_tx_cache.isra.0>
    582c:	2800      	cmp	r0, #0
    582e:	d19b      	bne.n	5768 <uarte_nrfx_isr_async+0x23c>
			amount = data->async->tx_cache_offset;
    5830:	68eb      	ldr	r3, [r5, #12]
    5832:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    5834:	68e8      	ldr	r0, [r5, #12]
    5836:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    5838:	f005 fe32 	bl	b4a0 <z_impl_k_timer_stop>
	struct uart_event evt = {
    583c:	2214      	movs	r2, #20
    583e:	2100      	movs	r1, #0
    5840:	a803      	add	r0, sp, #12
    5842:	f005 fecc 	bl	b5de <memset>
		.data.tx.buf = data->async->tx_buf,
    5846:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    5848:	689a      	ldr	r2, [r3, #8]
    584a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    584e:	68da      	ldr	r2, [r3, #12]
    5850:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    5852:	bf1c      	itt	ne
    5854:	2201      	movne	r2, #1
    5856:	f88d 200c 	strbne.w	r2, [sp, #12]
    585a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    585e:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    5862:	2200      	movs	r2, #0
    5864:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    5866:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    5868:	a903      	add	r1, sp, #12
    586a:	4620      	mov	r0, r4
    586c:	f005 fa0e 	bl	ac8c <user_callback>
    5870:	e671      	b.n	5556 <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    5872:	461e      	mov	r6, r3
    5874:	e7de      	b.n	5834 <uarte_nrfx_isr_async+0x308>
    5876:	bf00      	nop
    5878:	000f423f 	.word	0x000f423f
    587c:	000f4240 	.word	0x000f4240

00005880 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5880:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5882:	2301      	movs	r3, #1
    5884:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5886:	4a0e      	ldr	r2, [pc, #56]	; (58c0 <compare_int_lock+0x40>)
    5888:	f3bf 8f5b 	dmb	ish
    588c:	43dc      	mvns	r4, r3
    588e:	e852 1f00 	ldrex	r1, [r2]
    5892:	ea01 0504 	and.w	r5, r1, r4
    5896:	e842 5600 	strex	r6, r5, [r2]
    589a:	2e00      	cmp	r6, #0
    589c:	d1f7      	bne.n	588e <compare_int_lock+0xe>
    589e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    58a6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    58a8:	4806      	ldr	r0, [pc, #24]	; (58c4 <compare_int_lock+0x44>)
    58aa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    58ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    58b2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    58b6:	420b      	tst	r3, r1
}
    58b8:	bf14      	ite	ne
    58ba:	2001      	movne	r0, #1
    58bc:	2000      	moveq	r0, #0
    58be:	bd70      	pop	{r4, r5, r6, pc}
    58c0:	20004e48 	.word	0x20004e48
    58c4:	40011000 	.word	0x40011000

000058c8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    58c8:	491b      	ldr	r1, [pc, #108]	; (5938 <sys_clock_timeout_handler+0x70>)
{
    58ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58cc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    58ce:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    58d2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    58d4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    58d8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    58dc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    58de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    58e2:	d30f      	bcc.n	5904 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    58e4:	f003 fbd2 	bl	908c <sys_clock_announce>
    return p_reg->CC[ch];
    58e8:	00a3      	lsls	r3, r4, #2
    58ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    58ee:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    58f2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    58f6:	4295      	cmp	r5, r2
    58f8:	d11d      	bne.n	5936 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    58fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    58fe:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    5902:	e012      	b.n	592a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5904:	4b0d      	ldr	r3, [pc, #52]	; (593c <sys_clock_timeout_handler+0x74>)
    5906:	681b      	ldr	r3, [r3, #0]
    5908:	0a1a      	lsrs	r2, r3, #8
    590a:	061b      	lsls	r3, r3, #24
    590c:	195e      	adds	r6, r3, r5
    590e:	4b0c      	ldr	r3, [pc, #48]	; (5940 <sys_clock_timeout_handler+0x78>)
    5910:	f142 0700 	adc.w	r7, r2, #0
    5914:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5918:	f003 fbb8 	bl	908c <sys_clock_announce>
    return p_reg->CC[ch];
    591c:	4a09      	ldr	r2, [pc, #36]	; (5944 <sys_clock_timeout_handler+0x7c>)
    591e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    5922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    5926:	429d      	cmp	r5, r3
    5928:	d105      	bne.n	5936 <sys_clock_timeout_handler+0x6e>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    592a:	4a06      	ldr	r2, [pc, #24]	; (5944 <sys_clock_timeout_handler+0x7c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    592c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5930:	40a3      	lsls	r3, r4
    5932:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5938:	200046b0 	.word	0x200046b0
    593c:	20004e4c 	.word	0x20004e4c
    5940:	200046b8 	.word	0x200046b8
    5944:	40011000 	.word	0x40011000

00005948 <compare_int_unlock>:
	if (key) {
    5948:	b311      	cbz	r1, 5990 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    594a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    594e:	2301      	movs	r3, #1
    5950:	4a10      	ldr	r2, [pc, #64]	; (5994 <compare_int_unlock+0x4c>)
    5952:	4083      	lsls	r3, r0
    5954:	e852 cf00 	ldrex	ip, [r2]
    5958:	ea4c 0c03 	orr.w	ip, ip, r3
    595c:	e842 c100 	strex	r1, ip, [r2]
    5960:	2900      	cmp	r1, #0
    5962:	d1f7      	bne.n	5954 <compare_int_unlock+0xc>
    5964:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5968:	4a0b      	ldr	r2, [pc, #44]	; (5998 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    596a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    596e:	4083      	lsls	r3, r0
    5970:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5974:	4b09      	ldr	r3, [pc, #36]	; (599c <compare_int_unlock+0x54>)
    5976:	f3bf 8f5b 	dmb	ish
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5980:	40c3      	lsrs	r3, r0
    5982:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5984:	bf42      	ittt	mi
    5986:	4b06      	ldrmi	r3, [pc, #24]	; (59a0 <compare_int_unlock+0x58>)
    5988:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    598c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5990:	4770      	bx	lr
    5992:	bf00      	nop
    5994:	20004e48 	.word	0x20004e48
    5998:	40011000 	.word	0x40011000
    599c:	20004e44 	.word	0x20004e44
    59a0:	e000e100 	.word	0xe000e100

000059a4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    59a4:	4b0d      	ldr	r3, [pc, #52]	; (59dc <z_nrf_rtc_timer_read+0x38>)
    59a6:	6818      	ldr	r0, [r3, #0]
    59a8:	0a01      	lsrs	r1, r0, #8
    59aa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    59ac:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    59b0:	4b0b      	ldr	r3, [pc, #44]	; (59e0 <z_nrf_rtc_timer_read+0x3c>)
    59b2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    59b6:	1818      	adds	r0, r3, r0
    59b8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    59bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    59c0:	d20a      	bcs.n	59d8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    59c2:	4b08      	ldr	r3, [pc, #32]	; (59e4 <z_nrf_rtc_timer_read+0x40>)
    59c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    59c8:	4290      	cmp	r0, r2
    59ca:	eb71 0303 	sbcs.w	r3, r1, r3
    59ce:	d203      	bcs.n	59d8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    59d0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    59d4:	f141 0100 	adc.w	r1, r1, #0
}
    59d8:	4770      	bx	lr
    59da:	bf00      	nop
    59dc:	20004e4c 	.word	0x20004e4c
    59e0:	40011000 	.word	0x40011000
    59e4:	200046b8 	.word	0x200046b8

000059e8 <compare_set>:
{
    59e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59ec:	4614      	mov	r4, r2
    59ee:	461d      	mov	r5, r3
    59f0:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    59f2:	f7ff ff45 	bl	5880 <compare_int_lock>
    59f6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    59f8:	f7ff ffd4 	bl	59a4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    59fc:	42a0      	cmp	r0, r4
    59fe:	eb71 0305 	sbcs.w	r3, r1, r5
    5a02:	d27a      	bcs.n	5afa <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    5a04:	4b46      	ldr	r3, [pc, #280]	; (5b20 <compare_set+0x138>)
    5a06:	1a20      	subs	r0, r4, r0
    5a08:	eb65 0101 	sbc.w	r1, r5, r1
    5a0c:	4298      	cmp	r0, r3
    5a0e:	f171 0100 	sbcs.w	r1, r1, #0
    5a12:	f080 8081 	bcs.w	5b18 <compare_set+0x130>
		if (target_time != cc_data[chan].target_time) {
    5a16:	4b43      	ldr	r3, [pc, #268]	; (5b24 <compare_set+0x13c>)
    5a18:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5a1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    5a20:	429d      	cmp	r5, r3
    5a22:	bf08      	it	eq
    5a24:	4294      	cmpeq	r4, r2
    5a26:	d053      	beq.n	5ad0 <compare_set+0xe8>
    5a28:	ea4f 0a87 	mov.w	sl, r7, lsl #2
    5a2c:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5a30:	f107 0950 	add.w	r9, r7, #80	; 0x50
    5a34:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
    5a38:	ea4f 0989 	mov.w	r9, r9, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5a3c:	fa1f f989 	uxth.w	r9, r9
	return absolute_time & COUNTER_MAX;
    5a40:	f024 487f 	bic.w	r8, r4, #4278190080	; 0xff000000
    5a44:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    return p_reg->CC[ch];
    5a4c:	f8da 0540 	ldr.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5a50:	4a35      	ldr	r2, [pc, #212]	; (5b28 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5a52:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    5a56:	40bb      	lsls	r3, r7
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5a58:	4646      	mov	r6, r8
     return p_reg->COUNTER;
    5a5a:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5a5e:	eba0 000b 	sub.w	r0, r0, fp
    5a62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5a66:	f02b 417f 	bic.w	r1, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    5a6a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    5a6c:	f8ca 1540 	str.w	r1, [sl, #1344]	; 0x540
    5a70:	d105      	bne.n	5a7e <compare_set+0x96>
    5a72:	9301      	str	r3, [sp, #4]
	z_impl_k_busy_wait(usec_to_wait);
    5a74:	2013      	movs	r0, #19
    5a76:	f005 fce1 	bl	b43c <z_impl_k_busy_wait>
    5a7a:	4a2b      	ldr	r2, [pc, #172]	; (5b28 <compare_set+0x140>)
    5a7c:	9b01      	ldr	r3, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5a7e:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
    5a82:	eba6 000c 	sub.w	r0, r6, ip
    5a86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    5a8a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5a8e:	bf88      	it	hi
    5a90:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5a92:	2000      	movs	r0, #0
    5a94:	f8c9 0000 	str.w	r0, [r9]
    5a98:	f8d9 0000 	ldr.w	r0, [r9]
    p_reg->EVTENSET = mask;
    5a9c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5aa0:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5aa4:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
    5aa8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	} while ((now2 != now) &&
    5aac:	4583      	cmp	fp, r0
    5aae:	d006      	beq.n	5abe <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    5ab0:	1a30      	subs	r0, r6, r0
    5ab2:	3802      	subs	r0, #2
    5ab4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    5ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5abc:	d81b      	bhi.n	5af6 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    5abe:	eba6 0608 	sub.w	r6, r6, r8
    5ac2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5ac6:	1936      	adds	r6, r6, r4
    5ac8:	f145 0300 	adc.w	r3, r5, #0
    5acc:	4634      	mov	r4, r6
    5ace:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    5ad0:	4914      	ldr	r1, [pc, #80]	; (5b24 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5ad2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5ad4:	013b      	lsls	r3, r7, #4
    5ad6:	eb01 1207 	add.w	r2, r1, r7, lsl #4
	cc_data[chan].callback = handler;
    5ada:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5ade:	6053      	str	r3, [r2, #4]
	cc_data[chan].target_time = target_time;
    5ae0:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    5ae4:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5ae6:	4638      	mov	r0, r7
    5ae8:	9900      	ldr	r1, [sp, #0]
    5aea:	f7ff ff2d 	bl	5948 <compare_int_unlock>
}
    5aee:	4620      	mov	r0, r4
    5af0:	b003      	add	sp, #12
    5af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5af6:	4630      	mov	r0, r6
    5af8:	e7af      	b.n	5a5a <compare_set+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
    5afa:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5afc:	4a0b      	ldr	r2, [pc, #44]	; (5b2c <compare_set+0x144>)
    5afe:	f3bf 8f5b 	dmb	ish
    5b02:	40bb      	lsls	r3, r7
    5b04:	e852 0f00 	ldrex	r0, [r2]
    5b08:	4318      	orrs	r0, r3
    5b0a:	e842 0100 	strex	r1, r0, [r2]
    5b0e:	2900      	cmp	r1, #0
    5b10:	d1f8      	bne.n	5b04 <compare_set+0x11c>
    5b12:	f3bf 8f5b 	dmb	ish
    5b16:	e7db      	b.n	5ad0 <compare_set+0xe8>
			return -EINVAL;
    5b18:	f06f 0415 	mvn.w	r4, #21
    5b1c:	e7e3      	b.n	5ae6 <compare_set+0xfe>
    5b1e:	bf00      	nop
    5b20:	01000001 	.word	0x01000001
    5b24:	200046a0 	.word	0x200046a0
    5b28:	40011000 	.word	0x40011000
    5b2c:	20004e44 	.word	0x20004e44

00005b30 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    5b32:	4b19      	ldr	r3, [pc, #100]	; (5b98 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    5b34:	4d19      	ldr	r5, [pc, #100]	; (5b9c <sys_clock_driver_init+0x6c>)
    5b36:	2400      	movs	r4, #0
    5b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5b40:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    5b44:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5b4c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5b50:	4b13      	ldr	r3, [pc, #76]	; (5ba0 <sys_clock_driver_init+0x70>)
    5b52:	2602      	movs	r6, #2
    5b54:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5b58:	2101      	movs	r1, #1
    5b5a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    5b5e:	2011      	movs	r0, #17
    5b60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5b64:	4622      	mov	r2, r4
    5b66:	f7fd fea3 	bl	38b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5b6a:	2011      	movs	r0, #17
    5b6c:	f7fd fe84 	bl	3878 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5b70:	4a0c      	ldr	r2, [pc, #48]	; (5ba4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5b72:	2301      	movs	r3, #1
    5b74:	60ab      	str	r3, [r5, #8]
    5b76:	602b      	str	r3, [r5, #0]
    5b78:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5b7a:	4b0b      	ldr	r3, [pc, #44]	; (5ba8 <sys_clock_driver_init+0x78>)
    5b7c:	4a0b      	ldr	r2, [pc, #44]	; (5bac <sys_clock_driver_init+0x7c>)
    5b7e:	9300      	str	r3, [sp, #0]
    5b80:	9401      	str	r4, [sp, #4]
    5b82:	2300      	movs	r3, #0
    5b84:	4620      	mov	r0, r4
    5b86:	f7ff ff2f 	bl	59e8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5b8a:	4630      	mov	r0, r6
    5b8c:	f7fe ff24 	bl	49d8 <z_nrf_clock_control_lf_on>

	return 0;
}
    5b90:	4620      	mov	r0, r4
    5b92:	b002      	add	sp, #8
    5b94:	bd70      	pop	{r4, r5, r6, pc}
    5b96:	bf00      	nop
    5b98:	200046a0 	.word	0x200046a0
    5b9c:	40011000 	.word	0x40011000
    5ba0:	e000e100 	.word	0xe000e100
    5ba4:	20004e48 	.word	0x20004e48
    5ba8:	000058c9 	.word	0x000058c9
    5bac:	007fffff 	.word	0x007fffff

00005bb0 <rtc_nrf_isr>:
{
    5bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5bb4:	4c33      	ldr	r4, [pc, #204]	; (5c84 <rtc_nrf_isr+0xd4>)
    5bb6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5bba:	079a      	lsls	r2, r3, #30
    5bbc:	d50b      	bpl.n	5bd6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bbe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5bc2:	b143      	cbz	r3, 5bd6 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5bc4:	4a30      	ldr	r2, [pc, #192]	; (5c88 <rtc_nrf_isr+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5bc6:	2300      	movs	r3, #0
    5bc8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5bcc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5bd0:	6813      	ldr	r3, [r2, #0]
    5bd2:	3301      	adds	r3, #1
    5bd4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5bd6:	f04f 0320 	mov.w	r3, #32
    5bda:	f3ef 8211 	mrs	r2, BASEPRI
    5bde:	f383 8812 	msr	BASEPRI_MAX, r3
    5be2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5be6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5bea:	03db      	lsls	r3, r3, #15
    5bec:	d529      	bpl.n	5c42 <rtc_nrf_isr+0x92>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bee:	f3bf 8f5b 	dmb	ish
    5bf2:	4b26      	ldr	r3, [pc, #152]	; (5c8c <rtc_nrf_isr+0xdc>)
    5bf4:	e853 1f00 	ldrex	r1, [r3]
    5bf8:	f021 0001 	bic.w	r0, r1, #1
    5bfc:	e843 0500 	strex	r5, r0, [r3]
    5c00:	2d00      	cmp	r5, #0
    5c02:	d1f7      	bne.n	5bf4 <rtc_nrf_isr+0x44>
    5c04:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5c08:	b911      	cbnz	r1, 5c10 <rtc_nrf_isr+0x60>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c0a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5c0e:	b1c3      	cbz	r3, 5c42 <rtc_nrf_isr+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5c10:	2500      	movs	r5, #0
    5c12:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5c16:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    5c1a:	f382 8811 	msr	BASEPRI, r2
    5c1e:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    5c22:	f7ff febf 	bl	59a4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5c26:	f04f 0320 	mov.w	r3, #32
    5c2a:	f3ef 8211 	mrs	r2, BASEPRI
    5c2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c32:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5c36:	4b16      	ldr	r3, [pc, #88]	; (5c90 <rtc_nrf_isr+0xe0>)
    5c38:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5c3c:	42b0      	cmp	r0, r6
    5c3e:	41b9      	sbcs	r1, r7
    5c40:	d206      	bcs.n	5c50 <rtc_nrf_isr+0xa0>
	__asm__ volatile(
    5c42:	f382 8811 	msr	BASEPRI, r2
    5c46:	f3bf 8f6f 	isb	sy
}
    5c4a:	b003      	add	sp, #12
    5c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5c50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5c54:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    5c58:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5c5c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    5c60:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5c66:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    5c6a:	f382 8811 	msr	BASEPRI, r2
    5c6e:	f3bf 8f6f 	isb	sy
		if (handler) {
    5c72:	2900      	cmp	r1, #0
    5c74:	d0e9      	beq.n	5c4a <rtc_nrf_isr+0x9a>
			handler(chan, expire_time, user_context);
    5c76:	9000      	str	r0, [sp, #0]
    5c78:	4632      	mov	r2, r6
    5c7a:	463b      	mov	r3, r7
    5c7c:	4628      	mov	r0, r5
    5c7e:	4788      	blx	r1
}
    5c80:	e7e3      	b.n	5c4a <rtc_nrf_isr+0x9a>
    5c82:	bf00      	nop
    5c84:	40011000 	.word	0x40011000
    5c88:	20004e4c 	.word	0x20004e4c
    5c8c:	20004e44 	.word	0x20004e44
    5c90:	200046a0 	.word	0x200046a0

00005c94 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5c94:	1c43      	adds	r3, r0, #1
{
    5c96:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5c98:	d021      	beq.n	5cde <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5c9a:	2801      	cmp	r0, #1
    5c9c:	dd21      	ble.n	5ce2 <sys_clock_set_timeout+0x4e>
    5c9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ca2:	da20      	bge.n	5ce6 <sys_clock_set_timeout+0x52>
    5ca4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5ca6:	f7ff fe7d 	bl	59a4 <z_nrf_rtc_timer_read>
    5caa:	4b10      	ldr	r3, [pc, #64]	; (5cec <sys_clock_set_timeout+0x58>)
    5cac:	e9d3 1300 	ldrd	r1, r3, [r3]
    5cb0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    5cb2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    5cb6:	480e      	ldr	r0, [pc, #56]	; (5cf0 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
    5cb8:	bf28      	it	cs
    5cba:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5cbc:	3201      	adds	r2, #1
    5cbe:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    5cc0:	4282      	cmp	r2, r0
    5cc2:	bf28      	it	cs
    5cc4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    5cc6:	1852      	adds	r2, r2, r1
    5cc8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5ccc:	4909      	ldr	r1, [pc, #36]	; (5cf4 <sys_clock_set_timeout+0x60>)
    5cce:	9001      	str	r0, [sp, #4]
    5cd0:	9100      	str	r1, [sp, #0]
    5cd2:	f143 0300 	adc.w	r3, r3, #0
    5cd6:	f7ff fe87 	bl	59e8 <compare_set>
}
    5cda:	b002      	add	sp, #8
    5cdc:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5cde:	4804      	ldr	r0, [pc, #16]	; (5cf0 <sys_clock_set_timeout+0x5c>)
    5ce0:	e7e0      	b.n	5ca4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5ce2:	2400      	movs	r4, #0
    5ce4:	e7df      	b.n	5ca6 <sys_clock_set_timeout+0x12>
    5ce6:	4c02      	ldr	r4, [pc, #8]	; (5cf0 <sys_clock_set_timeout+0x5c>)
    5ce8:	e7dd      	b.n	5ca6 <sys_clock_set_timeout+0x12>
    5cea:	bf00      	nop
    5cec:	200046b0 	.word	0x200046b0
    5cf0:	007fffff 	.word	0x007fffff
    5cf4:	000058c9 	.word	0x000058c9

00005cf8 <sys_clock_elapsed>:
{
    5cf8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5cfa:	f7ff fe53 	bl	59a4 <z_nrf_rtc_timer_read>
    5cfe:	4b02      	ldr	r3, [pc, #8]	; (5d08 <sys_clock_elapsed+0x10>)
    5d00:	681b      	ldr	r3, [r3, #0]
}
    5d02:	1ac0      	subs	r0, r0, r3
    5d04:	bd08      	pop	{r3, pc}
    5d06:	bf00      	nop
    5d08:	200046b0 	.word	0x200046b0

00005d0c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d0c:	6803      	ldr	r3, [r0, #0]
    switch (port)
    5d0e:	095a      	lsrs	r2, r3, #5
{
    5d10:	b510      	push	{r4, lr}
    5d12:	4604      	mov	r4, r0
    switch (port)
    5d14:	d01d      	beq.n	5d52 <nrf_gpio_pin_port_decode+0x46>
    5d16:	2a01      	cmp	r2, #1
    5d18:	d106      	bne.n	5d28 <nrf_gpio_pin_port_decode+0x1c>
            mask = P1_FEATURE_PINS_PRESENT;
    5d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5d1e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d22:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d24:	07d3      	lsls	r3, r2, #31
    5d26:	d40b      	bmi.n	5d40 <nrf_gpio_pin_port_decode+0x34>
    5d28:	4914      	ldr	r1, [pc, #80]	; (5d7c <nrf_gpio_pin_port_decode+0x70>)
    5d2a:	4815      	ldr	r0, [pc, #84]	; (5d80 <nrf_gpio_pin_port_decode+0x74>)
    5d2c:	4a15      	ldr	r2, [pc, #84]	; (5d84 <nrf_gpio_pin_port_decode+0x78>)
    5d2e:	f240 2329 	movw	r3, #553	; 0x229
    5d32:	f004 fe0e 	bl	a952 <assert_print>
    5d36:	4813      	ldr	r0, [pc, #76]	; (5d84 <nrf_gpio_pin_port_decode+0x78>)
    5d38:	f240 2129 	movw	r1, #553	; 0x229
    5d3c:	f004 fe02 	bl	a944 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5d40:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5d42:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d46:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5d48:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d4a:	d105      	bne.n	5d58 <nrf_gpio_pin_port_decode+0x4c>
    switch (port)
    5d4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5d50:	bd10      	pop	{r4, pc}
    switch (port)
    5d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d56:	e7e2      	b.n	5d1e <nrf_gpio_pin_port_decode+0x12>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d58:	2b01      	cmp	r3, #1
    5d5a:	d00c      	beq.n	5d76 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    5d5c:	4a09      	ldr	r2, [pc, #36]	; (5d84 <nrf_gpio_pin_port_decode+0x78>)
    5d5e:	490a      	ldr	r1, [pc, #40]	; (5d88 <nrf_gpio_pin_port_decode+0x7c>)
    5d60:	4807      	ldr	r0, [pc, #28]	; (5d80 <nrf_gpio_pin_port_decode+0x74>)
    5d62:	f240 232e 	movw	r3, #558	; 0x22e
    5d66:	f004 fdf4 	bl	a952 <assert_print>
    5d6a:	4806      	ldr	r0, [pc, #24]	; (5d84 <nrf_gpio_pin_port_decode+0x78>)
    5d6c:	f240 212e 	movw	r1, #558	; 0x22e
    5d70:	f004 fde8 	bl	a944 <assert_post_action>
    5d74:	e7ea      	b.n	5d4c <nrf_gpio_pin_port_decode+0x40>
        case 1: return NRF_P1;
    5d76:	4805      	ldr	r0, [pc, #20]	; (5d8c <nrf_gpio_pin_port_decode+0x80>)
    5d78:	e7ea      	b.n	5d50 <nrf_gpio_pin_port_decode+0x44>
    5d7a:	bf00      	nop
    5d7c:	0000d21d 	.word	0x0000d21d
    5d80:	0000c18a 	.word	0x0000c18a
    5d84:	0000d1ea 	.word	0x0000d1ea
    5d88:	0000dab4 	.word	0x0000dab4
    5d8c:	50000300 	.word	0x50000300

00005d90 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5d90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    5d92:	ab0b      	add	r3, sp, #44	; 0x2c
    5d94:	9305      	str	r3, [sp, #20]
    5d96:	9303      	str	r3, [sp, #12]
    5d98:	4b05      	ldr	r3, [pc, #20]	; (5db0 <z_log_msg2_runtime_create.constprop.0+0x20>)
    5d9a:	9302      	str	r3, [sp, #8]
    5d9c:	2300      	movs	r3, #0
    5d9e:	e9cd 3300 	strd	r3, r3, [sp]
    5da2:	2201      	movs	r2, #1
    5da4:	4618      	mov	r0, r3
    5da6:	f7fd f98b 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    5daa:	b007      	add	sp, #28
    5dac:	f85d fb04 	ldr.w	pc, [sp], #4
    5db0:	0000d2dd 	.word	0x0000d2dd

00005db4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5db6:	f7fc ff1f 	bl	2bf8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5dba:	2400      	movs	r4, #0
    5dbc:	4b06      	ldr	r3, [pc, #24]	; (5dd8 <k_sys_fatal_error_handler+0x24>)
    5dbe:	9302      	str	r3, [sp, #8]
    5dc0:	4620      	mov	r0, r4
    5dc2:	e9cd 4400 	strd	r4, r4, [sp]
    5dc6:	4905      	ldr	r1, [pc, #20]	; (5ddc <k_sys_fatal_error_handler+0x28>)
    5dc8:	4623      	mov	r3, r4
    5dca:	2201      	movs	r2, #1
    5dcc:	f7ff ffe0 	bl	5d90 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    5dd0:	4620      	mov	r0, r4
    5dd2:	f7fe fc79 	bl	46c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5dd6:	bf00      	nop
    5dd8:	0000d2dd 	.word	0x0000d2dd
    5ddc:	0000bc00 	.word	0x0000bc00

00005de0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5de4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5de8:	2a08      	cmp	r2, #8
    5dea:	d106      	bne.n	5dfa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5dec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5df0:	2b05      	cmp	r3, #5
    5df2:	d802      	bhi.n	5dfa <nrf52_errata_103+0x1a>
    5df4:	4a02      	ldr	r2, [pc, #8]	; (5e00 <nrf52_errata_103+0x20>)
    5df6:	5cd0      	ldrb	r0, [r2, r3]
    5df8:	4770      	bx	lr
                        return false;
    5dfa:	2000      	movs	r0, #0
}
    5dfc:	4770      	bx	lr
    5dfe:	bf00      	nop
    5e00:	0000d300 	.word	0x0000d300

00005e04 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5e04:	4a02      	ldr	r2, [pc, #8]	; (5e10 <nvmc_wait+0xc>)
    5e06:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5e0a:	2b00      	cmp	r3, #0
    5e0c:	d0fb      	beq.n	5e06 <nvmc_wait+0x2>
}
    5e0e:	4770      	bx	lr
    5e10:	4001e000 	.word	0x4001e000

00005e14 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5e14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    5e18:	b510      	push	{r4, lr}
            if (var1 == 0x08)
    5e1a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5e1e:	2a08      	cmp	r2, #8
    5e20:	d14e      	bne.n	5ec0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    5e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e26:	2100      	movs	r1, #0
    5e28:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5e2c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5e30:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5e34:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    5e38:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    5e3c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5e40:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    5e44:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5e48:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5e4c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5e50:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    5e54:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5e58:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    5e5c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5e60:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    5e64:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5e68:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    5e6c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5e70:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    5e74:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5e78:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    5e7c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5e80:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    5e84:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5e88:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    5e8c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5e90:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    5e94:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5e98:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    5e9c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5ea0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    5ea4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5ea8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    5eac:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5eb0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    5eb4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5eb8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    5ebc:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5ec0:	f7ff ff8e 	bl	5de0 <nrf52_errata_103>
    5ec4:	b118      	cbz	r0, 5ece <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5ec6:	4b3b      	ldr	r3, [pc, #236]	; (5fb4 <SystemInit+0x1a0>)
    5ec8:	4a3b      	ldr	r2, [pc, #236]	; (5fb8 <SystemInit+0x1a4>)
    5eca:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5ece:	f7ff ff87 	bl	5de0 <nrf52_errata_103>
    5ed2:	b118      	cbz	r0, 5edc <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5ed4:	4b39      	ldr	r3, [pc, #228]	; (5fbc <SystemInit+0x1a8>)
    5ed6:	22fb      	movs	r2, #251	; 0xfb
    5ed8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5edc:	f7ff ff80 	bl	5de0 <nrf52_errata_103>
    5ee0:	b170      	cbz	r0, 5f00 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5ee6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5eea:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    5eee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    5ef2:	f022 020f 	bic.w	r2, r2, #15
    5ef6:	f003 030f 	and.w	r3, r3, #15
    5efa:	4313      	orrs	r3, r2
    5efc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5f00:	f7ff ff6e 	bl	5de0 <nrf52_errata_103>
    5f04:	b120      	cbz	r0, 5f10 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5f06:	4b2e      	ldr	r3, [pc, #184]	; (5fc0 <SystemInit+0x1ac>)
    5f08:	f44f 7200 	mov.w	r2, #512	; 0x200
    5f0c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    5f14:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5f18:	2b08      	cmp	r3, #8
    5f1a:	d11a      	bne.n	5f52 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f20:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    5f24:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5f26:	bf44      	itt	mi
    5f28:	f06f 0201 	mvnmi.w	r2, #1
    5f2c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    5f38:	2b05      	cmp	r3, #5
    5f3a:	d802      	bhi.n	5f42 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5f3c:	4a21      	ldr	r2, [pc, #132]	; (5fc4 <SystemInit+0x1b0>)
    5f3e:	5cd3      	ldrb	r3, [r2, r3]
    5f40:	b13b      	cbz	r3, 5f52 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5f42:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5f46:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f4e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5f52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5f56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5f5a:	2a00      	cmp	r2, #0
    5f5c:	db03      	blt.n	5f66 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5f5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5f62:	2b00      	cmp	r3, #0
    5f64:	da22      	bge.n	5fac <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5f66:	4918      	ldr	r1, [pc, #96]	; (5fc8 <SystemInit+0x1b4>)
    5f68:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5f6a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5f6e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5f72:	2412      	movs	r4, #18
    nvmc_wait();
    5f74:	f7ff ff46 	bl	5e04 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5f78:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5f7c:	f7ff ff42 	bl	5e04 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5f80:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5f84:	f7ff ff3e 	bl	5e04 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5f88:	2300      	movs	r3, #0
    5f8a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5f8e:	f7ff ff39 	bl	5e04 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5f92:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5f96:	490d      	ldr	r1, [pc, #52]	; (5fcc <SystemInit+0x1b8>)
    5f98:	4b0d      	ldr	r3, [pc, #52]	; (5fd0 <SystemInit+0x1bc>)
    5f9a:	68ca      	ldr	r2, [r1, #12]
    5f9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5fa0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5fa2:	60cb      	str	r3, [r1, #12]
    5fa4:	f3bf 8f4f 	dsb	sy
    __NOP();
    5fa8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5faa:	e7fd      	b.n	5fa8 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5fac:	4b09      	ldr	r3, [pc, #36]	; (5fd4 <SystemInit+0x1c0>)
    5fae:	4a0a      	ldr	r2, [pc, #40]	; (5fd8 <SystemInit+0x1c4>)
    5fb0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	40005000 	.word	0x40005000
    5fb8:	00038148 	.word	0x00038148
    5fbc:	4000f000 	.word	0x4000f000
    5fc0:	40029000 	.word	0x40029000
    5fc4:	0000d2fa 	.word	0x0000d2fa
    5fc8:	4001e000 	.word	0x4001e000
    5fcc:	e000ed00 	.word	0xe000ed00
    5fd0:	05fa0004 	.word	0x05fa0004
    5fd4:	20000064 	.word	0x20000064
    5fd8:	03d09000 	.word	0x03d09000

00005fdc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5fdc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5fde:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5fe0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5fe2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5fe6:	fab2 f382 	clz	r3, r2
    5fea:	f1c3 031f 	rsb	r3, r3, #31
    5fee:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5ff0:	fa05 f403 	lsl.w	r4, r5, r3
    5ff4:	ea22 0404 	bic.w	r4, r2, r4
    5ff8:	e850 6f00 	ldrex	r6, [r0]
    5ffc:	4296      	cmp	r6, r2
    5ffe:	d104      	bne.n	600a <nrfx_flag32_alloc+0x2e>
    6000:	e840 4c00 	strex	ip, r4, [r0]
    6004:	f1bc 0f00 	cmp.w	ip, #0
    6008:	d1f6      	bne.n	5ff8 <nrfx_flag32_alloc+0x1c>
    600a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    600e:	d1e7      	bne.n	5fe0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    6010:	4801      	ldr	r0, [pc, #4]	; (6018 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    6012:	700b      	strb	r3, [r1, #0]
}
    6014:	bd70      	pop	{r4, r5, r6, pc}
    6016:	bf00      	nop
    6018:	0bad0000 	.word	0x0bad0000

0000601c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    601c:	6803      	ldr	r3, [r0, #0]
    601e:	40cb      	lsrs	r3, r1
    6020:	07db      	lsls	r3, r3, #31
{
    6022:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6024:	d414      	bmi.n	6050 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6026:	2301      	movs	r3, #1
    6028:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    602a:	6802      	ldr	r2, [r0, #0]
    602c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6030:	ea43 0102 	orr.w	r1, r3, r2
    6034:	e850 4f00 	ldrex	r4, [r0]
    6038:	4294      	cmp	r4, r2
    603a:	d104      	bne.n	6046 <nrfx_flag32_free+0x2a>
    603c:	e840 1c00 	strex	ip, r1, [r0]
    6040:	f1bc 0f00 	cmp.w	ip, #0
    6044:	d1f6      	bne.n	6034 <nrfx_flag32_free+0x18>
    6046:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    604a:	d1ee      	bne.n	602a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    604c:	4801      	ldr	r0, [pc, #4]	; (6054 <nrfx_flag32_free+0x38>)
}
    604e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6050:	4801      	ldr	r0, [pc, #4]	; (6058 <nrfx_flag32_free+0x3c>)
    6052:	e7fc      	b.n	604e <nrfx_flag32_free+0x32>
    6054:	0bad0000 	.word	0x0bad0000
    6058:	0bad0004 	.word	0x0bad0004

0000605c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    605e:	4604      	mov	r4, r0
    6060:	b170      	cbz	r0, 6080 <clock_stop+0x24>
    6062:	2801      	cmp	r0, #1
    6064:	d02d      	beq.n	60c2 <clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    6066:	4939      	ldr	r1, [pc, #228]	; (614c <clock_stop+0xf0>)
    6068:	4839      	ldr	r0, [pc, #228]	; (6150 <clock_stop+0xf4>)
    606a:	4a3a      	ldr	r2, [pc, #232]	; (6154 <clock_stop+0xf8>)
    606c:	23d8      	movs	r3, #216	; 0xd8
    606e:	f004 fc70 	bl	a952 <assert_print>
    6072:	4838      	ldr	r0, [pc, #224]	; (6154 <clock_stop+0xf8>)
    6074:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    6076:	b003      	add	sp, #12
    6078:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    607c:	f004 bc62 	b.w	a944 <assert_post_action>
    p_reg->INTENCLR = mask;
    6080:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6084:	2202      	movs	r2, #2
    6086:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    608a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    608e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6092:	2201      	movs	r2, #1
    6094:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6096:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6098:	2301      	movs	r3, #1
    609a:	f88d 3007 	strb.w	r3, [sp, #7]
    609e:	f242 7510 	movw	r5, #10000	; 0x2710
    60a2:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    60a6:	b1cc      	cbz	r4, 60dc <clock_stop+0x80>
    60a8:	2c01      	cmp	r4, #1
    60aa:	d037      	beq.n	611c <clock_stop+0xc0>
            NRFX_ASSERT(0);
    60ac:	4927      	ldr	r1, [pc, #156]	; (614c <clock_stop+0xf0>)
    60ae:	4828      	ldr	r0, [pc, #160]	; (6150 <clock_stop+0xf4>)
    60b0:	4a29      	ldr	r2, [pc, #164]	; (6158 <clock_stop+0xfc>)
    60b2:	f44f 734f 	mov.w	r3, #828	; 0x33c
    60b6:	f004 fc4c 	bl	a952 <assert_print>
    60ba:	4827      	ldr	r0, [pc, #156]	; (6158 <clock_stop+0xfc>)
    60bc:	f44f 714f 	mov.w	r1, #828	; 0x33c
    60c0:	e7d9      	b.n	6076 <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    60c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60c6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    60c8:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    60d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    60d4:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    60d6:	f10d 0707 	add.w	r7, sp, #7
    60da:	e7dd      	b.n	6098 <clock_stop+0x3c>
            if (p_clk_src != NULL)
    60dc:	b19f      	cbz	r7, 6106 <clock_stop+0xaa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60de:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    60e2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    60e6:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60e8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    60ec:	03d8      	lsls	r0, r3, #15
    60ee:	d513      	bpl.n	6118 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    60f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    60f4:	2801      	cmp	r0, #1
    60f6:	d103      	bne.n	6100 <clock_stop+0xa4>
    60f8:	f005 f8a0 	bl	b23c <nrfx_busy_wait>
    60fc:	3d01      	subs	r5, #1
    60fe:	d1d2      	bne.n	60a6 <clock_stop+0x4a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6100:	2c01      	cmp	r4, #1
    6102:	d015      	beq.n	6130 <clock_stop+0xd4>
    6104:	e008      	b.n	6118 <clock_stop+0xbc>
    6106:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    610a:	03d9      	lsls	r1, r3, #15
    610c:	d504      	bpl.n	6118 <clock_stop+0xbc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    610e:	2001      	movs	r0, #1
    6110:	f005 f894 	bl	b23c <nrfx_busy_wait>
    6114:	3d01      	subs	r5, #1
    6116:	d1f6      	bne.n	6106 <clock_stop+0xaa>
}
    6118:	b003      	add	sp, #12
    611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    611c:	b167      	cbz	r7, 6138 <clock_stop+0xdc>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    611e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6122:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6126:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6128:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    612c:	03da      	lsls	r2, r3, #15
    612e:	d4df      	bmi.n	60f0 <clock_stop+0x94>
            m_clock_cb.hfclk_started = false;
    6130:	4b0a      	ldr	r3, [pc, #40]	; (615c <clock_stop+0x100>)
    6132:	2200      	movs	r2, #0
    6134:	715a      	strb	r2, [r3, #5]
    6136:	e7ef      	b.n	6118 <clock_stop+0xbc>
    6138:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    613c:	03db      	lsls	r3, r3, #15
    613e:	d5f7      	bpl.n	6130 <clock_stop+0xd4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6140:	2001      	movs	r0, #1
    6142:	f005 f87b 	bl	b23c <nrfx_busy_wait>
    6146:	3d01      	subs	r5, #1
    6148:	d1f6      	bne.n	6138 <clock_stop+0xdc>
    614a:	e7f1      	b.n	6130 <clock_stop+0xd4>
    614c:	0000dab4 	.word	0x0000dab4
    6150:	0000c18a 	.word	0x0000c18a
    6154:	0000d306 	.word	0x0000d306
    6158:	0000d343 	.word	0x0000d343
    615c:	20004e50 	.word	0x20004e50

00006160 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    6160:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    6162:	4604      	mov	r4, r0
    6164:	b958      	cbnz	r0, 617e <nrfx_clock_init+0x1e>
    6166:	490b      	ldr	r1, [pc, #44]	; (6194 <nrfx_clock_init+0x34>)
    6168:	480b      	ldr	r0, [pc, #44]	; (6198 <nrfx_clock_init+0x38>)
    616a:	4a0c      	ldr	r2, [pc, #48]	; (619c <nrfx_clock_init+0x3c>)
    616c:	f240 1315 	movw	r3, #277	; 0x115
    6170:	f004 fbef 	bl	a952 <assert_print>
    6174:	4809      	ldr	r0, [pc, #36]	; (619c <nrfx_clock_init+0x3c>)
    6176:	f240 1115 	movw	r1, #277	; 0x115
    617a:	f004 fbe3 	bl	a944 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    617e:	4b08      	ldr	r3, [pc, #32]	; (61a0 <nrfx_clock_init+0x40>)
    6180:	791a      	ldrb	r2, [r3, #4]
    6182:	b922      	cbnz	r2, 618e <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6184:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    6186:	4807      	ldr	r0, [pc, #28]	; (61a4 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    6188:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    618a:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    618c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    618e:	4806      	ldr	r0, [pc, #24]	; (61a8 <nrfx_clock_init+0x48>)
    return err_code;
    6190:	e7fc      	b.n	618c <nrfx_clock_init+0x2c>
    6192:	bf00      	nop
    6194:	0000d377 	.word	0x0000d377
    6198:	0000c18a 	.word	0x0000c18a
    619c:	0000d306 	.word	0x0000d306
    61a0:	20004e50 	.word	0x20004e50
    61a4:	0bad0000 	.word	0x0bad0000
    61a8:	0bad000c 	.word	0x0bad000c

000061ac <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    61ac:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    61ae:	4b0d      	ldr	r3, [pc, #52]	; (61e4 <nrfx_clock_enable+0x38>)
    61b0:	791b      	ldrb	r3, [r3, #4]
    61b2:	b95b      	cbnz	r3, 61cc <nrfx_clock_enable+0x20>
    61b4:	490c      	ldr	r1, [pc, #48]	; (61e8 <nrfx_clock_enable+0x3c>)
    61b6:	480d      	ldr	r0, [pc, #52]	; (61ec <nrfx_clock_enable+0x40>)
    61b8:	4a0d      	ldr	r2, [pc, #52]	; (61f0 <nrfx_clock_enable+0x44>)
    61ba:	f44f 7397 	mov.w	r3, #302	; 0x12e
    61be:	f004 fbc8 	bl	a952 <assert_print>
    61c2:	480b      	ldr	r0, [pc, #44]	; (61f0 <nrfx_clock_enable+0x44>)
    61c4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    61c8:	f004 fbbc 	bl	a944 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    61cc:	2000      	movs	r0, #0
    61ce:	f7fd fb61 	bl	3894 <arch_irq_is_enabled>
    61d2:	b908      	cbnz	r0, 61d8 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    61d4:	f7fd fb50 	bl	3878 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    61d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    61dc:	2200      	movs	r2, #0
    61de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    61e2:	bd08      	pop	{r3, pc}
    61e4:	20004e50 	.word	0x20004e50
    61e8:	0000d385 	.word	0x0000d385
    61ec:	0000c18a 	.word	0x0000c18a
    61f0:	0000d306 	.word	0x0000d306

000061f4 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    61f4:	4b2c      	ldr	r3, [pc, #176]	; (62a8 <nrfx_clock_start+0xb4>)
    61f6:	791b      	ldrb	r3, [r3, #4]
{
    61f8:	b510      	push	{r4, lr}
    61fa:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    61fc:	b95b      	cbnz	r3, 6216 <nrfx_clock_start+0x22>
    61fe:	492b      	ldr	r1, [pc, #172]	; (62ac <nrfx_clock_start+0xb8>)
    6200:	482b      	ldr	r0, [pc, #172]	; (62b0 <nrfx_clock_start+0xbc>)
    6202:	4a2c      	ldr	r2, [pc, #176]	; (62b4 <nrfx_clock_start+0xc0>)
    6204:	f44f 73b4 	mov.w	r3, #360	; 0x168
    6208:	f004 fba3 	bl	a952 <assert_print>
    620c:	4829      	ldr	r0, [pc, #164]	; (62b4 <nrfx_clock_start+0xc0>)
    620e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    6212:	f004 fb97 	bl	a944 <assert_post_action>
    switch (domain)
    6216:	b17c      	cbz	r4, 6238 <nrfx_clock_start+0x44>
    6218:	2c01      	cmp	r4, #1
    621a:	d03a      	beq.n	6292 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    621c:	4926      	ldr	r1, [pc, #152]	; (62b8 <nrfx_clock_start+0xc4>)
    621e:	4824      	ldr	r0, [pc, #144]	; (62b0 <nrfx_clock_start+0xbc>)
    6220:	4a24      	ldr	r2, [pc, #144]	; (62b4 <nrfx_clock_start+0xc0>)
    6222:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    6226:	f004 fb94 	bl	a952 <assert_print>
            break;
    }
}
    622a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    622e:	4821      	ldr	r0, [pc, #132]	; (62b4 <nrfx_clock_start+0xc0>)
    6230:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    6234:	f004 bb86 	b.w	a944 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6238:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    623c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6240:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6244:	03c8      	lsls	r0, r1, #15
    6246:	d512      	bpl.n	626e <nrfx_clock_start+0x7a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6248:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    624c:	2b01      	cmp	r3, #1
    624e:	d11a      	bne.n	6286 <nrfx_clock_start+0x92>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6254:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6258:	2300      	movs	r3, #0
    625a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    625e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6262:	2302      	movs	r3, #2
    6264:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6268:	2301      	movs	r3, #1
    626a:	6093      	str	r3, [r2, #8]
}
    626c:	e00a      	b.n	6284 <nrfx_clock_start+0x90>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    626e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6272:	07d9      	lsls	r1, r3, #31
    6274:	d50b      	bpl.n	628e <nrfx_clock_start+0x9a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6276:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    627a:	079b      	lsls	r3, r3, #30
    627c:	d404      	bmi.n	6288 <nrfx_clock_start+0x94>
    p_reg->INTENSET = mask;
    627e:	2302      	movs	r3, #2
    6280:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6284:	bd10      	pop	{r4, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6286:	b113      	cbz	r3, 628e <nrfx_clock_start+0x9a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6288:	2000      	movs	r0, #0
    628a:	f7ff fee7 	bl	605c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    628e:	2300      	movs	r3, #0
    6290:	e7de      	b.n	6250 <nrfx_clock_start+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6296:	2200      	movs	r2, #0
    6298:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    629c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    62a0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62a4:	601c      	str	r4, [r3, #0]
}
    62a6:	e7ed      	b.n	6284 <nrfx_clock_start+0x90>
    62a8:	20004e50 	.word	0x20004e50
    62ac:	0000d385 	.word	0x0000d385
    62b0:	0000c18a 	.word	0x0000c18a
    62b4:	0000d306 	.word	0x0000d306
    62b8:	0000dab4 	.word	0x0000dab4

000062bc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    62bc:	4b0a      	ldr	r3, [pc, #40]	; (62e8 <nrfx_clock_stop+0x2c>)
    62be:	791b      	ldrb	r3, [r3, #4]
{
    62c0:	b510      	push	{r4, lr}
    62c2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    62c4:	b95b      	cbnz	r3, 62de <nrfx_clock_stop+0x22>
    62c6:	4909      	ldr	r1, [pc, #36]	; (62ec <nrfx_clock_stop+0x30>)
    62c8:	4809      	ldr	r0, [pc, #36]	; (62f0 <nrfx_clock_stop+0x34>)
    62ca:	4a0a      	ldr	r2, [pc, #40]	; (62f4 <nrfx_clock_stop+0x38>)
    62cc:	f240 13ad 	movw	r3, #429	; 0x1ad
    62d0:	f004 fb3f 	bl	a952 <assert_print>
    62d4:	4807      	ldr	r0, [pc, #28]	; (62f4 <nrfx_clock_stop+0x38>)
    62d6:	f240 11ad 	movw	r1, #429	; 0x1ad
    62da:	f004 fb33 	bl	a944 <assert_post_action>
    clock_stop(domain);
    62de:	4620      	mov	r0, r4
}
    62e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    62e4:	f7ff beba 	b.w	605c <clock_stop>
    62e8:	20004e50 	.word	0x20004e50
    62ec:	0000d385 	.word	0x0000d385
    62f0:	0000c18a 	.word	0x0000c18a
    62f4:	0000d306 	.word	0x0000d306

000062f8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    62f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    62fc:	b510      	push	{r4, lr}
    62fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6302:	b16a      	cbz	r2, 6320 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6304:	2200      	movs	r2, #0
    6306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    630a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    630e:	2201      	movs	r2, #1
    6310:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    6314:	4b11      	ldr	r3, [pc, #68]	; (635c <nrfx_power_clock_irq_handler+0x64>)
    6316:	7958      	ldrb	r0, [r3, #5]
    6318:	b910      	cbnz	r0, 6320 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    631a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    631c:	681b      	ldr	r3, [r3, #0]
    631e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6324:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6328:	b172      	cbz	r2, 6348 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    632a:	2200      	movs	r2, #0
    632c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6330:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6334:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6338:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    633c:	0792      	lsls	r2, r2, #30
    633e:	d104      	bne.n	634a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6340:	2201      	movs	r2, #1
    6342:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6346:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6348:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    634a:	2202      	movs	r2, #2
    634c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6350:	4b02      	ldr	r3, [pc, #8]	; (635c <nrfx_power_clock_irq_handler+0x64>)
}
    6352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6356:	681b      	ldr	r3, [r3, #0]
    6358:	2001      	movs	r0, #1
    635a:	4718      	bx	r3
    635c:	20004e50 	.word	0x20004e50

00006360 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6360:	4b03      	ldr	r3, [pc, #12]	; (6370 <pin_in_use_by_te+0x10>)
    6362:	3008      	adds	r0, #8
    6364:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6368:	f3c0 1040 	ubfx	r0, r0, #5, #1
    636c:	4770      	bx	lr
    636e:	bf00      	nop
    6370:	20000068 	.word	0x20000068

00006374 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    6374:	4b04      	ldr	r3, [pc, #16]	; (6388 <pin_has_trigger+0x14>)
    6376:	3008      	adds	r0, #8
    6378:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    637c:	f010 001c 	ands.w	r0, r0, #28
    6380:	bf18      	it	ne
    6382:	2001      	movne	r0, #1
    6384:	4770      	bx	lr
    6386:	bf00      	nop
    6388:	20000068 	.word	0x20000068

0000638c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    638c:	4b03      	ldr	r3, [pc, #12]	; (639c <pin_is_output+0x10>)
    638e:	3008      	adds	r0, #8
    6390:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6394:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6398:	4770      	bx	lr
    639a:	bf00      	nop
    639c:	20000068 	.word	0x20000068

000063a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    63a0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    63a2:	f100 0308 	add.w	r3, r0, #8
    63a6:	4c0c      	ldr	r4, [pc, #48]	; (63d8 <call_handler+0x38>)
    63a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    63ac:	05da      	lsls	r2, r3, #23
{
    63ae:	4605      	mov	r5, r0
    63b0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    63b2:	d507      	bpl.n	63c4 <call_handler+0x24>
    63b4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    63b8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    63bc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    63c0:	6852      	ldr	r2, [r2, #4]
    63c2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    63c4:	68a3      	ldr	r3, [r4, #8]
    63c6:	b12b      	cbz	r3, 63d4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    63c8:	68e2      	ldr	r2, [r4, #12]
    63ca:	4631      	mov	r1, r6
    63cc:	4628      	mov	r0, r5
    }
}
    63ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    63d2:	4718      	bx	r3
}
    63d4:	bd70      	pop	{r4, r5, r6, pc}
    63d6:	bf00      	nop
    63d8:	20000068 	.word	0x20000068

000063dc <nrf_gpio_pin_port_decode>:
{
    63dc:	b510      	push	{r4, lr}
    63de:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63e0:	6800      	ldr	r0, [r0, #0]
    63e2:	f004 ff2d 	bl	b240 <nrf_gpio_pin_present_check>
    63e6:	b958      	cbnz	r0, 6400 <nrf_gpio_pin_port_decode+0x24>
    63e8:	4912      	ldr	r1, [pc, #72]	; (6434 <nrf_gpio_pin_port_decode+0x58>)
    63ea:	4813      	ldr	r0, [pc, #76]	; (6438 <nrf_gpio_pin_port_decode+0x5c>)
    63ec:	4a13      	ldr	r2, [pc, #76]	; (643c <nrf_gpio_pin_port_decode+0x60>)
    63ee:	f240 2329 	movw	r3, #553	; 0x229
    63f2:	f004 faae 	bl	a952 <assert_print>
    63f6:	4811      	ldr	r0, [pc, #68]	; (643c <nrf_gpio_pin_port_decode+0x60>)
    63f8:	f240 2129 	movw	r1, #553	; 0x229
    63fc:	f004 faa2 	bl	a944 <assert_post_action>
    uint32_t pin_number = *p_pin;
    6400:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    6402:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6406:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    6408:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    640a:	d102      	bne.n	6412 <nrf_gpio_pin_port_decode+0x36>
{
    640c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    6410:	bd10      	pop	{r4, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6412:	2b01      	cmp	r3, #1
    6414:	d00c      	beq.n	6430 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    6416:	4a09      	ldr	r2, [pc, #36]	; (643c <nrf_gpio_pin_port_decode+0x60>)
    6418:	4909      	ldr	r1, [pc, #36]	; (6440 <nrf_gpio_pin_port_decode+0x64>)
    641a:	4807      	ldr	r0, [pc, #28]	; (6438 <nrf_gpio_pin_port_decode+0x5c>)
    641c:	f240 232e 	movw	r3, #558	; 0x22e
    6420:	f004 fa97 	bl	a952 <assert_print>
    6424:	4805      	ldr	r0, [pc, #20]	; (643c <nrf_gpio_pin_port_decode+0x60>)
    6426:	f240 212e 	movw	r1, #558	; 0x22e
    642a:	f004 fa8b 	bl	a944 <assert_post_action>
    642e:	e7ed      	b.n	640c <nrf_gpio_pin_port_decode+0x30>
        case 1: return NRF_P1;
    6430:	4804      	ldr	r0, [pc, #16]	; (6444 <nrf_gpio_pin_port_decode+0x68>)
    6432:	e7ed      	b.n	6410 <nrf_gpio_pin_port_decode+0x34>
    6434:	0000d21d 	.word	0x0000d21d
    6438:	0000c18a 	.word	0x0000c18a
    643c:	0000d1ea 	.word	0x0000d1ea
    6440:	0000dab4 	.word	0x0000dab4
    6444:	50000300 	.word	0x50000300

00006448 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6448:	4a19      	ldr	r2, [pc, #100]	; (64b0 <release_handler+0x68>)
    644a:	3008      	adds	r0, #8
{
    644c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    644e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6452:	05d9      	lsls	r1, r3, #23
    6454:	d51d      	bpl.n	6492 <release_handler+0x4a>
    6456:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    645a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    645e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6462:	f102 040e 	add.w	r4, r2, #14
    6466:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6468:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    646c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6470:	d003      	beq.n	647a <release_handler+0x32>
    6472:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6476:	4299      	cmp	r1, r3
    6478:	d00b      	beq.n	6492 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    647a:	3001      	adds	r0, #1
    647c:	2830      	cmp	r0, #48	; 0x30
    647e:	d1f3      	bne.n	6468 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6480:	2300      	movs	r3, #0
    6482:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6486:	480b      	ldr	r0, [pc, #44]	; (64b4 <release_handler+0x6c>)
    6488:	f7ff fdc8 	bl	601c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    648c:	4b0a      	ldr	r3, [pc, #40]	; (64b8 <release_handler+0x70>)
    648e:	4298      	cmp	r0, r3
    6490:	d100      	bne.n	6494 <release_handler+0x4c>
}
    6492:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6494:	4909      	ldr	r1, [pc, #36]	; (64bc <release_handler+0x74>)
    6496:	480a      	ldr	r0, [pc, #40]	; (64c0 <release_handler+0x78>)
    6498:	4a0a      	ldr	r2, [pc, #40]	; (64c4 <release_handler+0x7c>)
    649a:	f44f 7399 	mov.w	r3, #306	; 0x132
    649e:	f004 fa58 	bl	a952 <assert_print>
}
    64a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    64a6:	4807      	ldr	r0, [pc, #28]	; (64c4 <release_handler+0x7c>)
    64a8:	f44f 7199 	mov.w	r1, #306	; 0x132
    64ac:	f004 ba4a 	b.w	a944 <assert_post_action>
    64b0:	20000068 	.word	0x20000068
    64b4:	200000dc 	.word	0x200000dc
    64b8:	0bad0000 	.word	0x0bad0000
    64bc:	0000d407 	.word	0x0000d407
    64c0:	0000c18a 	.word	0x0000c18a
    64c4:	0000d3a3 	.word	0x0000d3a3

000064c8 <pin_handler_trigger_uninit>:
{
    64c8:	b538      	push	{r3, r4, r5, lr}
    64ca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    64cc:	f7ff ff48 	bl	6360 <pin_in_use_by_te>
    64d0:	4c09      	ldr	r4, [pc, #36]	; (64f8 <pin_handler_trigger_uninit+0x30>)
    64d2:	f102 0508 	add.w	r5, r2, #8
    64d6:	b140      	cbz	r0, 64ea <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    64d8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    64dc:	4907      	ldr	r1, [pc, #28]	; (64fc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    64de:	0b5b      	lsrs	r3, r3, #13
    64e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    64e4:	2000      	movs	r0, #0
    64e6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    64ea:	4610      	mov	r0, r2
    64ec:	f7ff ffac 	bl	6448 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    64f0:	2300      	movs	r3, #0
    64f2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    64f6:	bd38      	pop	{r3, r4, r5, pc}
    64f8:	20000068 	.word	0x20000068
    64fc:	40006000 	.word	0x40006000

00006500 <nrfx_gpiote_input_configure>:
{
    6500:	b5f0      	push	{r4, r5, r6, r7, lr}
    6502:	4604      	mov	r4, r0
    6504:	b085      	sub	sp, #20
    6506:	4617      	mov	r7, r2
    6508:	461d      	mov	r5, r3
    if (p_input_config)
    650a:	b1d9      	cbz	r1, 6544 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    650c:	f004 fea9 	bl	b262 <pin_is_task_output>
    6510:	bb00      	cbnz	r0, 6554 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6512:	460b      	mov	r3, r1
    6514:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6518:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    651c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6520:	f10d 020f 	add.w	r2, sp, #15
    6524:	f10d 010e 	add.w	r1, sp, #14
    6528:	4620      	mov	r0, r4
    652a:	f004 fea5 	bl	b278 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    652e:	4a43      	ldr	r2, [pc, #268]	; (663c <nrfx_gpiote_input_configure+0x13c>)
    6530:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6534:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6538:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    653c:	f043 0301 	orr.w	r3, r3, #1
    6540:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6544:	b347      	cbz	r7, 6598 <nrfx_gpiote_input_configure+0x98>
        if (pin_is_output(pin))
    6546:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6548:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    654a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    654c:	f7ff ff1e 	bl	638c <pin_is_output>
    6550:	b110      	cbz	r0, 6558 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    6552:	b1b2      	cbz	r2, 6582 <nrfx_gpiote_input_configure+0x82>
            return NRFX_ERROR_INVALID_PARAM;
    6554:	483a      	ldr	r0, [pc, #232]	; (6640 <nrfx_gpiote_input_configure+0x140>)
    6556:	e021      	b.n	659c <nrfx_gpiote_input_configure+0x9c>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6558:	4f38      	ldr	r7, [pc, #224]	; (663c <nrfx_gpiote_input_configure+0x13c>)
    655a:	f104 0c08 	add.w	ip, r4, #8
    655e:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    6562:	f021 0120 	bic.w	r1, r1, #32
    6566:	04c9      	lsls	r1, r1, #19
    6568:	0cc9      	lsrs	r1, r1, #19
    656a:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    656e:	b142      	cbz	r2, 6582 <nrfx_gpiote_input_configure+0x82>
                if (!edge)
    6570:	2e03      	cmp	r6, #3
    6572:	d8ef      	bhi.n	6554 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6574:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6576:	b99e      	cbnz	r6, 65a0 <nrfx_gpiote_input_configure+0xa0>
    6578:	4a32      	ldr	r2, [pc, #200]	; (6644 <nrfx_gpiote_input_configure+0x144>)
    657a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    657e:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6582:	4a2e      	ldr	r2, [pc, #184]	; (663c <nrfx_gpiote_input_configure+0x13c>)
    6584:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6588:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    658c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6590:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    6594:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6598:	bb3d      	cbnz	r5, 65ea <nrfx_gpiote_input_configure+0xea>
        err = NRFX_SUCCESS;
    659a:	482b      	ldr	r0, [pc, #172]	; (6648 <nrfx_gpiote_input_configure+0x148>)
}
    659c:	b005      	add	sp, #20
    659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    65a0:	009a      	lsls	r2, r3, #2
    65a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    65a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    65aa:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    65ae:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    65b2:	f020 0003 	bic.w	r0, r0, #3
    65b6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    65ba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    65be:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    65c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    65c6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    65ca:	0220      	lsls	r0, r4, #8
    65cc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    65d0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    65d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    65d8:	ea40 000e 	orr.w	r0, r0, lr
    65dc:	f041 0120 	orr.w	r1, r1, #32
    65e0:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    65e4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    65e8:	e7cb      	b.n	6582 <nrfx_gpiote_input_configure+0x82>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    65ea:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    65ee:	4620      	mov	r0, r4
    65f0:	f7ff ff2a 	bl	6448 <release_handler>
    if (!handler)
    65f4:	2e00      	cmp	r6, #0
    65f6:	d0d0      	beq.n	659a <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    65f8:	4d10      	ldr	r5, [pc, #64]	; (663c <nrfx_gpiote_input_configure+0x13c>)
    65fa:	e9d5 2300 	ldrd	r2, r3, [r5]
    65fe:	4296      	cmp	r6, r2
    6600:	d101      	bne.n	6606 <nrfx_gpiote_input_configure+0x106>
    6602:	429f      	cmp	r7, r3
    6604:	d018      	beq.n	6638 <nrfx_gpiote_input_configure+0x138>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6606:	4811      	ldr	r0, [pc, #68]	; (664c <nrfx_gpiote_input_configure+0x14c>)
    6608:	f10d 010f 	add.w	r1, sp, #15
    660c:	f7ff fce6 	bl	5fdc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6610:	4b0d      	ldr	r3, [pc, #52]	; (6648 <nrfx_gpiote_input_configure+0x148>)
    6612:	4298      	cmp	r0, r3
    6614:	d1c2      	bne.n	659c <nrfx_gpiote_input_configure+0x9c>
        handler_id = (int32_t)id;
    6616:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    661a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    661e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6622:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6624:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6626:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    662a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    662e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6632:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6636:	e7b0      	b.n	659a <nrfx_gpiote_input_configure+0x9a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6638:	2200      	movs	r2, #0
    663a:	e7ee      	b.n	661a <nrfx_gpiote_input_configure+0x11a>
    663c:	20000068 	.word	0x20000068
    6640:	0bad0004 	.word	0x0bad0004
    6644:	40006000 	.word	0x40006000
    6648:	0bad0000 	.word	0x0bad0000
    664c:	200000dc 	.word	0x200000dc

00006650 <nrfx_gpiote_output_configure>:
{
    6650:	b5f0      	push	{r4, r5, r6, r7, lr}
    6652:	4604      	mov	r4, r0
    6654:	b085      	sub	sp, #20
    6656:	4615      	mov	r5, r2
    if (p_config)
    6658:	b321      	cbz	r1, 66a4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    665a:	f7ff fe97 	bl	638c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    665e:	b920      	cbnz	r0, 666a <nrfx_gpiote_output_configure+0x1a>
    6660:	4620      	mov	r0, r4
    6662:	f7ff fe7d 	bl	6360 <pin_in_use_by_te>
    6666:	2800      	cmp	r0, #0
    6668:	d15e      	bne.n	6728 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    666a:	4620      	mov	r0, r4
    666c:	f7ff fe82 	bl	6374 <pin_has_trigger>
    6670:	b110      	cbz	r0, 6678 <nrfx_gpiote_output_configure+0x28>
    6672:	784b      	ldrb	r3, [r1, #1]
    6674:	2b01      	cmp	r3, #1
    6676:	d057      	beq.n	6728 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6678:	2301      	movs	r3, #1
    667a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    667e:	2300      	movs	r3, #0
    6680:	e9cd 1300 	strd	r1, r3, [sp]
    6684:	1c4a      	adds	r2, r1, #1
    6686:	1c8b      	adds	r3, r1, #2
    6688:	4620      	mov	r0, r4
    668a:	f10d 010f 	add.w	r1, sp, #15
    668e:	f004 fdf3 	bl	b278 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6692:	4a26      	ldr	r2, [pc, #152]	; (672c <nrfx_gpiote_output_configure+0xdc>)
    6694:	f104 0108 	add.w	r1, r4, #8
    6698:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    669c:	f043 0303 	orr.w	r3, r3, #3
    66a0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    66a4:	b915      	cbnz	r5, 66ac <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    66a6:	4822      	ldr	r0, [pc, #136]	; (6730 <nrfx_gpiote_output_configure+0xe0>)
}
    66a8:	b005      	add	sp, #20
    66aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    66ac:	4620      	mov	r0, r4
    66ae:	f7ff fe6d 	bl	638c <pin_is_output>
        if (pin_is_input(pin))
    66b2:	b3c8      	cbz	r0, 6728 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    66b4:	4e1d      	ldr	r6, [pc, #116]	; (672c <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    66b6:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    66ba:	f104 0708 	add.w	r7, r4, #8
    66be:	4661      	mov	r1, ip
    66c0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    66c4:	0089      	lsls	r1, r1, #2
    66c6:	f020 0020 	bic.w	r0, r0, #32
    66ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    66ce:	04c0      	lsls	r0, r0, #19
    66d0:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    66d4:	0cc0      	lsrs	r0, r0, #19
    66d6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    66da:	2300      	movs	r3, #0
    66dc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    66e0:	786a      	ldrb	r2, [r5, #1]
    66e2:	2a00      	cmp	r2, #0
    66e4:	d0df      	beq.n	66a6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    66e6:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    66ea:	78ad      	ldrb	r5, [r5, #2]
    66ec:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    66f0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    66f4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    66f8:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    66fc:	0223      	lsls	r3, r4, #8
    66fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6702:	0412      	lsls	r2, r2, #16
    6704:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6708:	ea43 030e 	orr.w	r3, r3, lr
    670c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    670e:	052a      	lsls	r2, r5, #20
    6710:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6714:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6718:	4313      	orrs	r3, r2
    671a:	f040 0020 	orr.w	r0, r0, #32
    671e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6722:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6726:	e7be      	b.n	66a6 <nrfx_gpiote_output_configure+0x56>
{
    6728:	4802      	ldr	r0, [pc, #8]	; (6734 <nrfx_gpiote_output_configure+0xe4>)
    672a:	e7bd      	b.n	66a8 <nrfx_gpiote_output_configure+0x58>
    672c:	20000068 	.word	0x20000068
    6730:	0bad0000 	.word	0x0bad0000
    6734:	0bad0004 	.word	0x0bad0004

00006738 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6738:	4b01      	ldr	r3, [pc, #4]	; (6740 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    673a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    673e:	4770      	bx	lr
    6740:	20000068 	.word	0x20000068

00006744 <nrfx_gpiote_channel_get>:
{
    6744:	b538      	push	{r3, r4, r5, lr}
    6746:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6748:	460d      	mov	r5, r1
    674a:	b959      	cbnz	r1, 6764 <nrfx_gpiote_channel_get+0x20>
    674c:	490c      	ldr	r1, [pc, #48]	; (6780 <nrfx_gpiote_channel_get+0x3c>)
    674e:	480d      	ldr	r0, [pc, #52]	; (6784 <nrfx_gpiote_channel_get+0x40>)
    6750:	4a0d      	ldr	r2, [pc, #52]	; (6788 <nrfx_gpiote_channel_get+0x44>)
    6752:	f240 2335 	movw	r3, #565	; 0x235
    6756:	f004 f8fc 	bl	a952 <assert_print>
    675a:	480b      	ldr	r0, [pc, #44]	; (6788 <nrfx_gpiote_channel_get+0x44>)
    675c:	f240 2135 	movw	r1, #565	; 0x235
    6760:	f004 f8f0 	bl	a944 <assert_post_action>
    if (pin_in_use_by_te(pin))
    6764:	4620      	mov	r0, r4
    6766:	f7ff fdfb 	bl	6360 <pin_in_use_by_te>
    676a:	b138      	cbz	r0, 677c <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    676c:	4b07      	ldr	r3, [pc, #28]	; (678c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    676e:	4808      	ldr	r0, [pc, #32]	; (6790 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6770:	3408      	adds	r4, #8
    6772:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6776:	0b5b      	lsrs	r3, r3, #13
    6778:	702b      	strb	r3, [r5, #0]
}
    677a:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    677c:	4805      	ldr	r0, [pc, #20]	; (6794 <nrfx_gpiote_channel_get+0x50>)
    677e:	e7fc      	b.n	677a <nrfx_gpiote_channel_get+0x36>
    6780:	0000d41b 	.word	0x0000d41b
    6784:	0000c18a 	.word	0x0000c18a
    6788:	0000d3a3 	.word	0x0000d3a3
    678c:	20000068 	.word	0x20000068
    6790:	0bad0000 	.word	0x0bad0000
    6794:	0bad0004 	.word	0x0bad0004

00006798 <nrfx_gpiote_init>:
{
    6798:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    679a:	4c0f      	ldr	r4, [pc, #60]	; (67d8 <nrfx_gpiote_init+0x40>)
    679c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    67a0:	b9bd      	cbnz	r5, 67d2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    67a2:	2260      	movs	r2, #96	; 0x60
    67a4:	4629      	mov	r1, r5
    67a6:	f104 0010 	add.w	r0, r4, #16
    67aa:	f004 ff18 	bl	b5de <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    67ae:	2006      	movs	r0, #6
    67b0:	f7fd f862 	bl	3878 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    67b4:	4b09      	ldr	r3, [pc, #36]	; (67dc <nrfx_gpiote_init+0x44>)
    return err_code;
    67b6:	480a      	ldr	r0, [pc, #40]	; (67e0 <nrfx_gpiote_init+0x48>)
    67b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    67bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    67c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    67c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    67c8:	2301      	movs	r3, #1
    67ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    67ce:	6763      	str	r3, [r4, #116]	; 0x74
}
    67d0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    67d2:	4804      	ldr	r0, [pc, #16]	; (67e4 <nrfx_gpiote_init+0x4c>)
    67d4:	e7fc      	b.n	67d0 <nrfx_gpiote_init+0x38>
    67d6:	bf00      	nop
    67d8:	20000068 	.word	0x20000068
    67dc:	40006000 	.word	0x40006000
    67e0:	0bad0000 	.word	0x0bad0000
    67e4:	0bad0005 	.word	0x0bad0005

000067e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    67e8:	4b03      	ldr	r3, [pc, #12]	; (67f8 <nrfx_gpiote_is_init+0x10>)
    67ea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    67ee:	3800      	subs	r0, #0
    67f0:	bf18      	it	ne
    67f2:	2001      	movne	r0, #1
    67f4:	4770      	bx	lr
    67f6:	bf00      	nop
    67f8:	20000068 	.word	0x20000068

000067fc <nrfx_gpiote_channel_free>:
{
    67fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    67fe:	4801      	ldr	r0, [pc, #4]	; (6804 <nrfx_gpiote_channel_free+0x8>)
    6800:	f7ff bc0c 	b.w	601c <nrfx_flag32_free>
    6804:	200000d8 	.word	0x200000d8

00006808 <nrfx_gpiote_channel_alloc>:
{
    6808:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    680a:	4801      	ldr	r0, [pc, #4]	; (6810 <nrfx_gpiote_channel_alloc+0x8>)
    680c:	f7ff bbe6 	b.w	5fdc <nrfx_flag32_alloc>
    6810:	200000d8 	.word	0x200000d8

00006814 <nrfx_gpiote_trigger_enable>:
{
    6814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6816:	4604      	mov	r4, r0
    6818:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    681a:	f7ff fdab 	bl	6374 <pin_has_trigger>
    681e:	b958      	cbnz	r0, 6838 <nrfx_gpiote_trigger_enable+0x24>
    6820:	492e      	ldr	r1, [pc, #184]	; (68dc <nrfx_gpiote_trigger_enable+0xc8>)
    6822:	482f      	ldr	r0, [pc, #188]	; (68e0 <nrfx_gpiote_trigger_enable+0xcc>)
    6824:	4a2f      	ldr	r2, [pc, #188]	; (68e4 <nrfx_gpiote_trigger_enable+0xd0>)
    6826:	f240 33df 	movw	r3, #991	; 0x3df
    682a:	f004 f892 	bl	a952 <assert_print>
    682e:	482d      	ldr	r0, [pc, #180]	; (68e4 <nrfx_gpiote_trigger_enable+0xd0>)
    6830:	f240 31df 	movw	r1, #991	; 0x3df
    6834:	f004 f886 	bl	a944 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6838:	4620      	mov	r0, r4
    683a:	f7ff fd91 	bl	6360 <pin_in_use_by_te>
    683e:	4e2a      	ldr	r6, [pc, #168]	; (68e8 <nrfx_gpiote_trigger_enable+0xd4>)
    6840:	f104 0708 	add.w	r7, r4, #8
    6844:	b1f8      	cbz	r0, 6886 <nrfx_gpiote_trigger_enable+0x72>
    return !pin_is_output(pin);
    6846:	4620      	mov	r0, r4
    6848:	f7ff fda0 	bl	638c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    684c:	b9d8      	cbnz	r0, 6886 <nrfx_gpiote_trigger_enable+0x72>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    684e:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    6852:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6854:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    6856:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    685a:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
    685e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6862:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6866:	6008      	str	r0, [r1, #0]
    6868:	6809      	ldr	r1, [r1, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    686a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    686e:	f041 0101 	orr.w	r1, r1, #1
    6872:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
        if (int_enable)
    6876:	b125      	cbz	r5, 6882 <nrfx_gpiote_trigger_enable+0x6e>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6878:	2301      	movs	r3, #1
    687a:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    687c:	4a1b      	ldr	r2, [pc, #108]	; (68ec <nrfx_gpiote_trigger_enable+0xd8>)
    687e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6882:	b003      	add	sp, #12
    6884:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    6886:	b95d      	cbnz	r5, 68a0 <nrfx_gpiote_trigger_enable+0x8c>
    6888:	4919      	ldr	r1, [pc, #100]	; (68f0 <nrfx_gpiote_trigger_enable+0xdc>)
    688a:	4815      	ldr	r0, [pc, #84]	; (68e0 <nrfx_gpiote_trigger_enable+0xcc>)
    688c:	4a15      	ldr	r2, [pc, #84]	; (68e4 <nrfx_gpiote_trigger_enable+0xd0>)
    688e:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6892:	f004 f85e 	bl	a952 <assert_print>
    6896:	4813      	ldr	r0, [pc, #76]	; (68e4 <nrfx_gpiote_trigger_enable+0xd0>)
    6898:	f240 31ee 	movw	r1, #1006	; 0x3ee
    689c:	f004 f852 	bl	a944 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    68a0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    68a4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    68a8:	2b04      	cmp	r3, #4
    68aa:	d012      	beq.n	68d2 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    68ac:	2b05      	cmp	r3, #5
    68ae:	d012      	beq.n	68d6 <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    68b0:	a801      	add	r0, sp, #4
    68b2:	9401      	str	r4, [sp, #4]
    68b4:	f7ff fd92 	bl	63dc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    68b8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    68ba:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    68be:	40d9      	lsrs	r1, r3
    68c0:	f001 0101 	and.w	r1, r1, #1
    68c4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    68c6:	4620      	mov	r0, r4
}
    68c8:	b003      	add	sp, #12
    68ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    68ce:	f004 bd20 	b.w	b312 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    68d2:	2103      	movs	r1, #3
    68d4:	e7f7      	b.n	68c6 <nrfx_gpiote_trigger_enable+0xb2>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    68d6:	2102      	movs	r1, #2
    68d8:	e7f5      	b.n	68c6 <nrfx_gpiote_trigger_enable+0xb2>
    68da:	bf00      	nop
    68dc:	0000d425 	.word	0x0000d425
    68e0:	0000c18a 	.word	0x0000c18a
    68e4:	0000d3a3 	.word	0x0000d3a3
    68e8:	20000068 	.word	0x20000068
    68ec:	40006000 	.word	0x40006000
    68f0:	0000d43a 	.word	0x0000d43a

000068f4 <nrfx_gpiote_trigger_disable>:
{
    68f4:	b508      	push	{r3, lr}
    68f6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    68f8:	f7ff fd32 	bl	6360 <pin_in_use_by_te>
    68fc:	b1c8      	cbz	r0, 6932 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    68fe:	4610      	mov	r0, r2
    6900:	f7ff fd44 	bl	638c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6904:	b9a8      	cbnz	r0, 6932 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6906:	3208      	adds	r2, #8
    6908:	4b0d      	ldr	r3, [pc, #52]	; (6940 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    690a:	490e      	ldr	r1, [pc, #56]	; (6944 <nrfx_gpiote_trigger_disable+0x50>)
    690c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6910:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6912:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6914:	409a      	lsls	r2, r3
    6916:	009b      	lsls	r3, r3, #2
    6918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    691c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6920:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6924:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6928:	f022 0203 	bic.w	r2, r2, #3
    692c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6930:	bd08      	pop	{r3, pc}
    6932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6936:	2100      	movs	r1, #0
    6938:	4610      	mov	r0, r2
    693a:	f004 bcea 	b.w	b312 <nrf_gpio_cfg_sense_set>
    693e:	bf00      	nop
    6940:	20000068 	.word	0x20000068
    6944:	40006000 	.word	0x40006000

00006948 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6948:	4b0e      	ldr	r3, [pc, #56]	; (6984 <nrfx_gpiote_pin_uninit+0x3c>)
    694a:	f100 0208 	add.w	r2, r0, #8
{
    694e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6950:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6954:	07db      	lsls	r3, r3, #31
{
    6956:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6958:	d511      	bpl.n	697e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    695a:	f7ff ffcb 	bl	68f4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    695e:	4620      	mov	r0, r4
    6960:	f7ff fdb2 	bl	64c8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6964:	a801      	add	r0, sp, #4
    6966:	9401      	str	r4, [sp, #4]
    6968:	f7ff fd38 	bl	63dc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6972:	2202      	movs	r2, #2
    6974:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6978:	4803      	ldr	r0, [pc, #12]	; (6988 <nrfx_gpiote_pin_uninit+0x40>)
}
    697a:	b002      	add	sp, #8
    697c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    697e:	4803      	ldr	r0, [pc, #12]	; (698c <nrfx_gpiote_pin_uninit+0x44>)
    6980:	e7fb      	b.n	697a <nrfx_gpiote_pin_uninit+0x32>
    6982:	bf00      	nop
    6984:	20000068 	.word	0x20000068
    6988:	0bad0000 	.word	0x0bad0000
    698c:	0bad0004 	.word	0x0bad0004

00006990 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6994:	4b69      	ldr	r3, [pc, #420]	; (6b3c <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
    6996:	486a      	ldr	r0, [pc, #424]	; (6b40 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6998:	496a      	ldr	r1, [pc, #424]	; (6b44 <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
    699a:	2600      	movs	r6, #0
{
    699c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    699e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69a0:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69a2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    69a4:	b135      	cbz	r5, 69b4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    69a6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    69aa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69ac:	bf1e      	ittt	ne
    69ae:	601c      	strne	r4, [r3, #0]
    69b0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    69b2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    69b4:	3304      	adds	r3, #4
    69b6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    69b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    69bc:	d1f1      	bne.n	69a2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69be:	f8df 9180 	ldr.w	r9, [pc, #384]	; 6b40 <nrfx_gpiote_irq_handler+0x1b0>
    69c2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    69c6:	2b00      	cmp	r3, #0
    69c8:	f000 809b 	beq.w	6b02 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    69cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    69d0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    69d4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    69d6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    69da:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    69de:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    69e0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    69e4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    69e8:	f10d 0a10 	add.w	sl, sp, #16
    69ec:	ea4f 1348 	mov.w	r3, r8, lsl #5
    69f0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    69f2:	f04f 0b01 	mov.w	fp, #1
    69f6:	e04b      	b.n	6a90 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    69f8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    69fa:	4a53      	ldr	r2, [pc, #332]	; (6b48 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    69fc:	fa94 f4a4 	rbit	r4, r4
    6a00:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6a04:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6a06:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6a08:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    6a0c:	f004 0107 	and.w	r1, r4, #7
    6a10:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6a14:	f81a 3000 	ldrb.w	r3, [sl, r0]
    6a18:	9403      	str	r4, [sp, #12]
    6a1a:	fa0b f101 	lsl.w	r1, fp, r1
    6a1e:	ea23 0301 	bic.w	r3, r3, r1
    6a22:	08ba      	lsrs	r2, r7, #2
    6a24:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a28:	a803      	add	r0, sp, #12
    6a2a:	9201      	str	r2, [sp, #4]
    6a2c:	f7ff fcd6 	bl	63dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a30:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    6a32:	9a01      	ldr	r2, [sp, #4]
    6a34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6a38:	f3c7 0582 	ubfx	r5, r7, #2, #3
    6a3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    6a40:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6a42:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6a44:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6a48:	d52c      	bpl.n	6aa4 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    6a4a:	4639      	mov	r1, r7
    6a4c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a4e:	b2dd      	uxtb	r5, r3
    6a50:	f7ff fca6 	bl	63a0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a54:	a803      	add	r0, sp, #12
    6a56:	9403      	str	r4, [sp, #12]
    6a58:	f7ff fcc0 	bl	63dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6a5c:	9b03      	ldr	r3, [sp, #12]
    6a5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6a62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6a66:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6a6a:	429d      	cmp	r5, r3
    6a6c:	d107      	bne.n	6a7e <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6a6e:	2100      	movs	r1, #0
    6a70:	4620      	mov	r0, r4
    6a72:	f004 fc4e 	bl	b312 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6a76:	4629      	mov	r1, r5
    6a78:	4620      	mov	r0, r4
    6a7a:	f004 fc4a 	bl	b312 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a7e:	a803      	add	r0, sp, #12
    6a80:	9403      	str	r4, [sp, #12]
    6a82:	f7ff fcab 	bl	63dc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6a86:	9b03      	ldr	r3, [sp, #12]
    6a88:	fa0b f303 	lsl.w	r3, fp, r3
    6a8c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6a90:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6a94:	2c00      	cmp	r4, #0
    6a96:	d1af      	bne.n	69f8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6a98:	f1b8 0f00 	cmp.w	r8, #0
    6a9c:	d11d      	bne.n	6ada <nrfx_gpiote_irq_handler+0x14a>
    6a9e:	f04f 0801 	mov.w	r8, #1
    6aa2:	e7a3      	b.n	69ec <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6aa4:	2b02      	cmp	r3, #2
    6aa6:	d10c      	bne.n	6ac2 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6aa8:	2103      	movs	r1, #3
    6aaa:	4620      	mov	r0, r4
    6aac:	f004 fc31 	bl	b312 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6ab0:	f005 0305 	and.w	r3, r5, #5
    6ab4:	2b01      	cmp	r3, #1
    6ab6:	d1e2      	bne.n	6a7e <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    6ab8:	4639      	mov	r1, r7
    6aba:	4620      	mov	r0, r4
    6abc:	f7ff fc70 	bl	63a0 <call_handler>
    6ac0:	e7dd      	b.n	6a7e <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6ac2:	2102      	movs	r1, #2
    6ac4:	4620      	mov	r0, r4
    6ac6:	9301      	str	r3, [sp, #4]
    6ac8:	f004 fc23 	bl	b312 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6acc:	2d03      	cmp	r5, #3
    6ace:	d0f3      	beq.n	6ab8 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6ad0:	9b01      	ldr	r3, [sp, #4]
    6ad2:	2b03      	cmp	r3, #3
    6ad4:	d1d3      	bne.n	6a7e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6ad6:	2d02      	cmp	r5, #2
    6ad8:	e7ed      	b.n	6ab6 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    6ada:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ade:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    6ae2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6ae6:	4919      	ldr	r1, [pc, #100]	; (6b4c <nrfx_gpiote_irq_handler+0x1bc>)
    6ae8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6aec:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6aee:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6af2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6af6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6af8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6afa:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    6afe:	f47f af71 	bne.w	69e4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    6b02:	2401      	movs	r4, #1
    while (mask)
    6b04:	b916      	cbnz	r6, 6b0c <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6b06:	b007      	add	sp, #28
    6b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6b0c:	fa96 f3a6 	rbit	r3, r6
    6b10:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6b14:	fa04 f203 	lsl.w	r2, r4, r3
    6b18:	009b      	lsls	r3, r3, #2
    6b1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6b22:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6b26:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6b2a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6b2e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6b32:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6b36:	f7ff fc33 	bl	63a0 <call_handler>
    6b3a:	e7e3      	b.n	6b04 <nrfx_gpiote_irq_handler+0x174>
    6b3c:	40006100 	.word	0x40006100
    6b40:	40006000 	.word	0x40006000
    6b44:	40006120 	.word	0x40006120
    6b48:	20000068 	.word	0x20000068
    6b4c:	50000300 	.word	0x50000300

00006b50 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6b50:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6b52:	4801      	ldr	r0, [pc, #4]	; (6b58 <nrfx_ppi_channel_alloc+0x8>)
    6b54:	f7ff ba42 	b.w	5fdc <nrfx_flag32_alloc>
    6b58:	200000e4 	.word	0x200000e4

00006b5c <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6b5c:	4b11      	ldr	r3, [pc, #68]	; (6ba4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6b5e:	4912      	ldr	r1, [pc, #72]	; (6ba8 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6b60:	2203      	movs	r2, #3
    6b62:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6b64:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6b66:	4a11      	ldr	r2, [pc, #68]	; (6bac <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    6b68:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6b6a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6b70:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    6b72:	2200      	movs	r2, #0
    6b74:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6b76:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6b78:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6b7a:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6b7c:	490c      	ldr	r1, [pc, #48]	; (6bb0 <_DoInit+0x54>)
    6b7e:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6b80:	2110      	movs	r1, #16
    6b82:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6b84:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6b86:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6b88:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6b8a:	4a0a      	ldr	r2, [pc, #40]	; (6bb4 <_DoInit+0x58>)
    6b8c:	6812      	ldr	r2, [r2, #0]
    6b8e:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6b92:	4a09      	ldr	r2, [pc, #36]	; (6bb8 <_DoInit+0x5c>)
    6b94:	6810      	ldr	r0, [r2, #0]
    6b96:	8892      	ldrh	r2, [r2, #4]
    6b98:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6b9a:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    6b9c:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    6b9e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6ba0:	4770      	bx	lr
    6ba2:	bf00      	nop
    6ba4:	20004e58 	.word	0x20004e58
    6ba8:	0000d445 	.word	0x0000d445
    6bac:	20005148 	.word	0x20005148
    6bb0:	20005138 	.word	0x20005138
    6bb4:	0000d44e 	.word	0x0000d44e
    6bb8:	0000d452 	.word	0x0000d452

00006bbc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6bc0:	4f21      	ldr	r7, [pc, #132]	; (6c48 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    6bc2:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6bc6:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6bc8:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6bcc:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6bce:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6bd0:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6bd2:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6bd4:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6bd6:	d831      	bhi.n	6c3c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6bd8:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6bdc:	ebaa 0905 	sub.w	r9, sl, r5
    6be0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6be4:	4294      	cmp	r4, r2
    6be6:	d811      	bhi.n	6c0c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6be8:	2318      	movs	r3, #24
    6bea:	fb06 3303 	mla	r3, r6, r3, r3
    6bee:	443b      	add	r3, r7
    6bf0:	4622      	mov	r2, r4
    6bf2:	6858      	ldr	r0, [r3, #4]
    6bf4:	4641      	mov	r1, r8
    6bf6:	4428      	add	r0, r5
    6bf8:	f004 fce3 	bl	b5c2 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    6bfc:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    6bfe:	2318      	movs	r3, #24
    6c00:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    6c04:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    6c06:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6c0c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6c0e:	429c      	cmp	r4, r3
    6c10:	d818      	bhi.n	6c44 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6c12:	fb00 bb0b 	mla	fp, r0, fp, fp
    6c16:	44bb      	add	fp, r7
    6c18:	464a      	mov	r2, r9
    6c1a:	f8db 0004 	ldr.w	r0, [fp, #4]
    6c1e:	442c      	add	r4, r5
    6c20:	4428      	add	r0, r5
    6c22:	f004 fcce 	bl	b5c2 <memcpy>
      if (NumBytes) {
    6c26:	ebb4 040a 	subs.w	r4, r4, sl
    6c2a:	d0e8      	beq.n	6bfe <SEGGER_RTT_WriteSkipNoLock+0x42>
    6c2c:	f8db 0004 	ldr.w	r0, [fp, #4]
    6c30:	4622      	mov	r2, r4
    6c32:	eb08 0109 	add.w	r1, r8, r9
    6c36:	f004 fcc4 	bl	b5c2 <memcpy>
      return 1;
    6c3a:	e7e0      	b.n	6bfe <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    6c3c:	3b01      	subs	r3, #1
    6c3e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6c40:	42a3      	cmp	r3, r4
    6c42:	d2d1      	bcs.n	6be8 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6c44:	2000      	movs	r0, #0
    6c46:	e7df      	b.n	6c08 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    6c48:	20004e58 	.word	0x20004e58

00006c4c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    6c4c:	4b03      	ldr	r3, [pc, #12]	; (6c5c <SEGGER_RTT_HasDataUp+0x10>)
    6c4e:	2218      	movs	r2, #24
    6c50:	fb02 3300 	mla	r3, r2, r0, r3
    6c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    6c56:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6c58:	1a80      	subs	r0, r0, r2
    6c5a:	4770      	bx	lr
    6c5c:	20004e58 	.word	0x20004e58

00006c60 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6c60:	4b0e      	ldr	r3, [pc, #56]	; (6c9c <z_sys_init_run_level+0x3c>)
{
    6c62:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6c64:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6c68:	3001      	adds	r0, #1
    6c6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    6c6e:	42a6      	cmp	r6, r4
    6c70:	d800      	bhi.n	6c74 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    6c72:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    6c74:	e9d4 3500 	ldrd	r3, r5, [r4]
    6c78:	4628      	mov	r0, r5
    6c7a:	4798      	blx	r3
		if (dev != NULL) {
    6c7c:	b165      	cbz	r5, 6c98 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    6c7e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    6c80:	b130      	cbz	r0, 6c90 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6c82:	2800      	cmp	r0, #0
    6c84:	bfb8      	it	lt
    6c86:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    6c88:	28ff      	cmp	r0, #255	; 0xff
    6c8a:	bfa8      	it	ge
    6c8c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    6c8e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6c90:	785a      	ldrb	r2, [r3, #1]
    6c92:	f042 0201 	orr.w	r2, r2, #1
    6c96:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6c98:	3408      	adds	r4, #8
    6c9a:	e7e8      	b.n	6c6e <z_sys_init_run_level+0xe>
    6c9c:	0000bf08 	.word	0x0000bf08

00006ca0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    6ca0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    6ca2:	4605      	mov	r5, r0
    6ca4:	b910      	cbnz	r0, 6cac <z_impl_device_get_binding+0xc>
		return NULL;
    6ca6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6ca8:	4620      	mov	r0, r4
    6caa:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    6cac:	7803      	ldrb	r3, [r0, #0]
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d0f9      	beq.n	6ca6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    6cb2:	4c0e      	ldr	r4, [pc, #56]	; (6cec <z_impl_device_get_binding+0x4c>)
    6cb4:	4e0e      	ldr	r6, [pc, #56]	; (6cf0 <z_impl_device_get_binding+0x50>)
    6cb6:	42b4      	cmp	r4, r6
    6cb8:	d108      	bne.n	6ccc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    6cba:	4c0c      	ldr	r4, [pc, #48]	; (6cec <z_impl_device_get_binding+0x4c>)
    6cbc:	42b4      	cmp	r4, r6
    6cbe:	d0f2      	beq.n	6ca6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6cc0:	4620      	mov	r0, r4
    6cc2:	f004 fb3d 	bl	b340 <z_device_is_ready>
    6cc6:	b950      	cbnz	r0, 6cde <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    6cc8:	3418      	adds	r4, #24
    6cca:	e7f7      	b.n	6cbc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    6ccc:	4620      	mov	r0, r4
    6cce:	f004 fb37 	bl	b340 <z_device_is_ready>
    6cd2:	b110      	cbz	r0, 6cda <z_impl_device_get_binding+0x3a>
    6cd4:	6823      	ldr	r3, [r4, #0]
    6cd6:	42ab      	cmp	r3, r5
    6cd8:	d0e6      	beq.n	6ca8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    6cda:	3418      	adds	r4, #24
    6cdc:	e7eb      	b.n	6cb6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6cde:	6821      	ldr	r1, [r4, #0]
    6ce0:	4628      	mov	r0, r5
    6ce2:	f7fa f86d 	bl	dc0 <strcmp>
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d1ee      	bne.n	6cc8 <z_impl_device_get_binding+0x28>
    6cea:	e7dd      	b.n	6ca8 <z_impl_device_get_binding+0x8>
    6cec:	0000ba00 	.word	0x0000ba00
    6cf0:	0000ba78 	.word	0x0000ba78

00006cf4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cf8:	4605      	mov	r5, r0
    6cfa:	b086      	sub	sp, #24
    6cfc:	460f      	mov	r7, r1
	__asm__ volatile(
    6cfe:	f04f 0320 	mov.w	r3, #32
    6d02:	f3ef 8811 	mrs	r8, BASEPRI
    6d06:	f383 8812 	msr	BASEPRI_MAX, r3
    6d0a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6d0e:	f001 feeb 	bl	8ae8 <z_impl_z_current_get>
    6d12:	2d04      	cmp	r5, #4
    6d14:	bf96      	itet	ls
    6d16:	4b29      	ldrls	r3, [pc, #164]	; (6dbc <z_fatal_error+0xc8>)
    6d18:	4b29      	ldrhi	r3, [pc, #164]	; (6dc0 <z_fatal_error+0xcc>)
    6d1a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6d1e:	4929      	ldr	r1, [pc, #164]	; (6dc4 <z_fatal_error+0xd0>)
    6d20:	9503      	str	r5, [sp, #12]
    6d22:	2400      	movs	r4, #0
    6d24:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6d28:	4b27      	ldr	r3, [pc, #156]	; (6dc8 <z_fatal_error+0xd4>)
    6d2a:	9400      	str	r4, [sp, #0]
    6d2c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6d30:	4606      	mov	r6, r0
    6d32:	4623      	mov	r3, r4
    6d34:	2201      	movs	r2, #1
    6d36:	4620      	mov	r0, r4
    6d38:	f004 fb0c 	bl	b354 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    6d3c:	b16f      	cbz	r7, 6d5a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6d3e:	69fb      	ldr	r3, [r7, #28]
    6d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6d44:	b14b      	cbz	r3, 6d5a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    6d46:	4b21      	ldr	r3, [pc, #132]	; (6dcc <z_fatal_error+0xd8>)
    6d48:	491e      	ldr	r1, [pc, #120]	; (6dc4 <z_fatal_error+0xd0>)
    6d4a:	9400      	str	r4, [sp, #0]
    6d4c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6d50:	2201      	movs	r2, #1
    6d52:	4623      	mov	r3, r4
    6d54:	4620      	mov	r0, r4
    6d56:	f004 fafd 	bl	b354 <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6d5a:	b12e      	cbz	r6, 6d68 <z_fatal_error+0x74>
    6d5c:	4630      	mov	r0, r6
    6d5e:	f004 fb2f 	bl	b3c0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6d62:	b108      	cbz	r0, 6d68 <z_fatal_error+0x74>
    6d64:	7803      	ldrb	r3, [r0, #0]
    6d66:	b903      	cbnz	r3, 6d6a <z_fatal_error+0x76>
		thread_name = "unknown";
    6d68:	4819      	ldr	r0, [pc, #100]	; (6dd0 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6d6a:	4b1a      	ldr	r3, [pc, #104]	; (6dd4 <z_fatal_error+0xe0>)
    6d6c:	9302      	str	r3, [sp, #8]
    6d6e:	2300      	movs	r3, #0
    6d70:	e9cd 6003 	strd	r6, r0, [sp, #12]
    6d74:	e9cd 3300 	strd	r3, r3, [sp]
    6d78:	4618      	mov	r0, r3
    6d7a:	4912      	ldr	r1, [pc, #72]	; (6dc4 <z_fatal_error+0xd0>)
    6d7c:	2201      	movs	r2, #1
    6d7e:	f004 fae9 	bl	b354 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6d82:	4639      	mov	r1, r7
    6d84:	4628      	mov	r0, r5
    6d86:	f7ff f815 	bl	5db4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6d8a:	2d04      	cmp	r5, #4
    6d8c:	d10c      	bne.n	6da8 <z_fatal_error+0xb4>
    6d8e:	4912      	ldr	r1, [pc, #72]	; (6dd8 <z_fatal_error+0xe4>)
    6d90:	4a12      	ldr	r2, [pc, #72]	; (6ddc <z_fatal_error+0xe8>)
    6d92:	4813      	ldr	r0, [pc, #76]	; (6de0 <z_fatal_error+0xec>)
    6d94:	238f      	movs	r3, #143	; 0x8f
    6d96:	f003 fddc 	bl	a952 <assert_print>
    6d9a:	4812      	ldr	r0, [pc, #72]	; (6de4 <z_fatal_error+0xf0>)
    6d9c:	f003 fdd9 	bl	a952 <assert_print>
    6da0:	480e      	ldr	r0, [pc, #56]	; (6ddc <z_fatal_error+0xe8>)
    6da2:	218f      	movs	r1, #143	; 0x8f
    6da4:	f003 fdce 	bl	a944 <assert_post_action>
	__asm__ volatile(
    6da8:	f388 8811 	msr	BASEPRI, r8
    6dac:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6db0:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6db2:	b006      	add	sp, #24
    6db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6db8:	f7fd ba22 	b.w	4200 <z_impl_k_thread_abort>
    6dbc:	0000bf20 	.word	0x0000bf20
    6dc0:	0000d459 	.word	0x0000d459
    6dc4:	0000bc20 	.word	0x0000bc20
    6dc8:	0000d46f 	.word	0x0000d46f
    6dcc:	0000d497 	.word	0x0000d497
    6dd0:	0000d467 	.word	0x0000d467
    6dd4:	0000d4b8 	.word	0x0000d4b8
    6dd8:	0000d4f2 	.word	0x0000d4f2
    6ddc:	0000d4d0 	.word	0x0000d4d0
    6de0:	0000c18a 	.word	0x0000c18a
    6de4:	0000d50f 	.word	0x0000d50f

00006de8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    6de8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    6dea:	4b0a      	ldr	r3, [pc, #40]	; (6e14 <bg_thread_main+0x2c>)
    6dec:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6dee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6df0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6df2:	f7ff ff35 	bl	6c60 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    6df6:	f002 fbcb 	bl	9590 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6dfa:	2003      	movs	r0, #3
    6dfc:	f7ff ff30 	bl	6c60 <z_sys_init_run_level>

	z_init_static_threads();
    6e00:	f000 fa7c 	bl	72fc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    6e04:	f7fa fb1c 	bl	1440 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6e08:	4a03      	ldr	r2, [pc, #12]	; (6e18 <bg_thread_main+0x30>)
    6e0a:	7b13      	ldrb	r3, [r2, #12]
    6e0c:	f023 0301 	bic.w	r3, r3, #1
    6e10:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6e12:	bd08      	pop	{r3, pc}
    6e14:	20005548 	.word	0x20005548
    6e18:	20004740 	.word	0x20004740

00006e1c <z_bss_zero>:
{
    6e1c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    6e1e:	4803      	ldr	r0, [pc, #12]	; (6e2c <z_bss_zero+0x10>)
    6e20:	4a03      	ldr	r2, [pc, #12]	; (6e30 <z_bss_zero+0x14>)
    6e22:	2100      	movs	r1, #0
    6e24:	1a12      	subs	r2, r2, r0
    6e26:	f004 faa5 	bl	b374 <z_early_memset>
}
    6e2a:	bd08      	pop	{r3, pc}
    6e2c:	20004270 	.word	0x20004270
    6e30:	2000554c 	.word	0x2000554c

00006e34 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    6e34:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    6e36:	2300      	movs	r3, #0
{
    6e38:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    6e3a:	2201      	movs	r2, #1
    6e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    6e40:	4e13      	ldr	r6, [pc, #76]	; (6e90 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6e42:	4d14      	ldr	r5, [pc, #80]	; (6e94 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    6e44:	9301      	str	r3, [sp, #4]
    6e46:	220f      	movs	r2, #15
    6e48:	e9cd 3202 	strd	r3, r2, [sp, #8]
    6e4c:	4912      	ldr	r1, [pc, #72]	; (6e98 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6e4e:	2318      	movs	r3, #24
    6e50:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    6e54:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    6e58:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    6e5a:	f44f 70b0 	mov.w	r0, #352	; 0x160
    6e5e:	fb00 1104 	mla	r1, r0, r4, r1
    6e62:	4b0e      	ldr	r3, [pc, #56]	; (6e9c <z_init_cpu+0x68>)
    6e64:	9500      	str	r5, [sp, #0]
    6e66:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6e6a:	4630      	mov	r0, r6
    6e6c:	f000 f992 	bl	7194 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6e70:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6e72:	4a0b      	ldr	r2, [pc, #44]	; (6ea0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    6e74:	60ee      	str	r6, [r5, #12]
    6e76:	f023 0304 	bic.w	r3, r3, #4
    6e7a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6e7c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    6e80:	fb04 3303 	mla	r3, r4, r3, r3
    6e84:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    6e86:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    6e88:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    6e8a:	b006      	add	sp, #24
    6e8c:	bd70      	pop	{r4, r5, r6, pc}
    6e8e:	bf00      	nop
    6e90:	200046c0 	.word	0x200046c0
    6e94:	20004f00 	.word	0x20004f00
    6e98:	20008620 	.word	0x20008620
    6e9c:	00007459 	.word	0x00007459
    6ea0:	20007e00 	.word	0x20007e00

00006ea4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6ea4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6ea6:	4b2f      	ldr	r3, [pc, #188]	; (6f64 <z_cstart+0xc0>)
    6ea8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6eaa:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6eae:	4d2e      	ldr	r5, [pc, #184]	; (6f68 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6eb0:	4e2e      	ldr	r6, [pc, #184]	; (6f6c <z_cstart+0xc8>)
    6eb2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6eb4:	4f2e      	ldr	r7, [pc, #184]	; (6f70 <z_cstart+0xcc>)
    6eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6eba:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6ebc:	2400      	movs	r4, #0
    6ebe:	23e0      	movs	r3, #224	; 0xe0
    6ec0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6ec4:	77ec      	strb	r4, [r5, #31]
    6ec6:	762c      	strb	r4, [r5, #24]
    6ec8:	766c      	strb	r4, [r5, #25]
    6eca:	76ac      	strb	r4, [r5, #26]
    6ecc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6ed0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6ed2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6ed6:	626b      	str	r3, [r5, #36]	; 0x24
    6ed8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6edc:	f7fd f904 	bl	40e8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6ee0:	f7fc fc5c 	bl	379c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ee8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6eea:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    6eec:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6eee:	f7fd fa85 	bl	43fc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6ef2:	f7fd f99b 	bl	422c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6ef6:	f7fb fe2b 	bl	2b50 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6efa:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    6efe:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    6f00:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6f04:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    6f08:	f002 fb3c 	bl	9584 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    6f0c:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6f0e:	f004 fa16 	bl	b33e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6f12:	4620      	mov	r0, r4
    6f14:	f7ff fea4 	bl	6c60 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6f18:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    6f1a:	4d16      	ldr	r5, [pc, #88]	; (6f74 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6f1c:	f7ff fea0 	bl	6c60 <z_sys_init_run_level>
	z_sched_init();
    6f20:	f001 fc58 	bl	87d4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6f24:	4b14      	ldr	r3, [pc, #80]	; (6f78 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    6f26:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6f28:	9305      	str	r3, [sp, #20]
    6f2a:	2301      	movs	r3, #1
    6f2c:	4913      	ldr	r1, [pc, #76]	; (6f7c <z_cstart+0xd8>)
    6f2e:	9400      	str	r4, [sp, #0]
    6f30:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6f38:	463b      	mov	r3, r7
    6f3a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6f3e:	4628      	mov	r0, r5
    6f40:	f000 f928 	bl	7194 <z_setup_new_thread>
    6f44:	7b6a      	ldrb	r2, [r5, #13]
    6f46:	4606      	mov	r6, r0
    6f48:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    6f4c:	4628      	mov	r0, r5
    6f4e:	736a      	strb	r2, [r5, #13]
    6f50:	f000 fe38 	bl	7bc4 <z_ready_thread>
	z_init_cpu(0);
    6f54:	4620      	mov	r0, r4
    6f56:	f7ff ff6d 	bl	6e34 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6f5a:	463a      	mov	r2, r7
    6f5c:	4631      	mov	r1, r6
    6f5e:	4628      	mov	r0, r5
    6f60:	f7fc fd80 	bl	3a64 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6f64:	20008620 	.word	0x20008620
    6f68:	e000ed00 	.word	0xe000ed00
    6f6c:	20004f00 	.word	0x20004f00
    6f70:	00006de9 	.word	0x00006de9
    6f74:	20004740 	.word	0x20004740
    6f78:	0000d58e 	.word	0x0000d58e
    6f7c:	20008780 	.word	0x20008780

00006f80 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6f82:	4c16      	ldr	r4, [pc, #88]	; (6fdc <init_mem_slab_module+0x5c>)
    6f84:	4d16      	ldr	r5, [pc, #88]	; (6fe0 <init_mem_slab_module+0x60>)
    6f86:	4e17      	ldr	r6, [pc, #92]	; (6fe4 <init_mem_slab_module+0x64>)
    6f88:	42ac      	cmp	r4, r5
    6f8a:	d90c      	bls.n	6fa6 <init_mem_slab_module+0x26>
    6f8c:	4916      	ldr	r1, [pc, #88]	; (6fe8 <init_mem_slab_module+0x68>)
    6f8e:	4817      	ldr	r0, [pc, #92]	; (6fec <init_mem_slab_module+0x6c>)
    6f90:	233d      	movs	r3, #61	; 0x3d
    6f92:	4632      	mov	r2, r6
    6f94:	f003 fcdd 	bl	a952 <assert_print>
    6f98:	4815      	ldr	r0, [pc, #84]	; (6ff0 <init_mem_slab_module+0x70>)
    6f9a:	f003 fcda 	bl	a952 <assert_print>
    6f9e:	213d      	movs	r1, #61	; 0x3d
    6fa0:	4630      	mov	r0, r6
    6fa2:	f003 fccf 	bl	a944 <assert_post_action>
    6fa6:	42ac      	cmp	r4, r5
    6fa8:	d301      	bcc.n	6fae <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    6faa:	2000      	movs	r0, #0
	return rc;
}
    6fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    6fae:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    6fb2:	ea42 0301 	orr.w	r3, r2, r1
    6fb6:	f013 0303 	ands.w	r3, r3, #3
    6fba:	d10b      	bne.n	6fd4 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    6fbc:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    6fbe:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6fc0:	4283      	cmp	r3, r0
    6fc2:	d101      	bne.n	6fc8 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6fc4:	3420      	adds	r4, #32
    6fc6:	e7df      	b.n	6f88 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    6fc8:	69a7      	ldr	r7, [r4, #24]
    6fca:	6017      	str	r7, [r2, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    6fcc:	3301      	adds	r3, #1
		slab->free_list = p;
    6fce:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    6fd0:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    6fd2:	e7f5      	b.n	6fc0 <init_mem_slab_module+0x40>
	return rc;
    6fd4:	f06f 0015 	mvn.w	r0, #21
    6fd8:	e7e8      	b.n	6fac <init_mem_slab_module+0x2c>
    6fda:	bf00      	nop
    6fdc:	200041c8 	.word	0x200041c8
    6fe0:	200041c8 	.word	0x200041c8
    6fe4:	0000d596 	.word	0x0000d596
    6fe8:	0000d5bb 	.word	0x0000d5bb
    6fec:	0000c18a 	.word	0x0000c18a
    6ff0:	0000d5d8 	.word	0x0000d5d8

00006ff4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6ff8:	4604      	mov	r4, r0
    6ffa:	460e      	mov	r6, r1
    6ffc:	4690      	mov	r8, r2
    6ffe:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7000:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    7004:	f04f 0320 	mov.w	r3, #32
    7008:	f3ef 8911 	mrs	r9, BASEPRI
    700c:	f383 8812 	msr	BASEPRI_MAX, r3
    7010:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7014:	4628      	mov	r0, r5
    7016:	f000 f9f9 	bl	740c <z_spin_lock_valid>
    701a:	b968      	cbnz	r0, 7038 <k_mem_slab_alloc+0x44>
    701c:	4a24      	ldr	r2, [pc, #144]	; (70b0 <k_mem_slab_alloc+0xbc>)
    701e:	4925      	ldr	r1, [pc, #148]	; (70b4 <k_mem_slab_alloc+0xc0>)
    7020:	4825      	ldr	r0, [pc, #148]	; (70b8 <k_mem_slab_alloc+0xc4>)
    7022:	238e      	movs	r3, #142	; 0x8e
    7024:	f003 fc95 	bl	a952 <assert_print>
    7028:	4824      	ldr	r0, [pc, #144]	; (70bc <k_mem_slab_alloc+0xc8>)
    702a:	4629      	mov	r1, r5
    702c:	f003 fc91 	bl	a952 <assert_print>
    7030:	481f      	ldr	r0, [pc, #124]	; (70b0 <k_mem_slab_alloc+0xbc>)
    7032:	218e      	movs	r1, #142	; 0x8e
    7034:	f003 fc86 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7038:	4628      	mov	r0, r5
    703a:	f000 fa05 	bl	7448 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    703e:	69a3      	ldr	r3, [r4, #24]
    7040:	b1eb      	cbz	r3, 707e <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    7042:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    7044:	681b      	ldr	r3, [r3, #0]
    7046:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7048:	69e3      	ldr	r3, [r4, #28]
    704a:	3301      	adds	r3, #1
    704c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    704e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7050:	4628      	mov	r0, r5
    7052:	f000 f9e9 	bl	7428 <z_spin_unlock_valid>
    7056:	b968      	cbnz	r0, 7074 <k_mem_slab_alloc+0x80>
    7058:	4a15      	ldr	r2, [pc, #84]	; (70b0 <k_mem_slab_alloc+0xbc>)
    705a:	4919      	ldr	r1, [pc, #100]	; (70c0 <k_mem_slab_alloc+0xcc>)
    705c:	4816      	ldr	r0, [pc, #88]	; (70b8 <k_mem_slab_alloc+0xc4>)
    705e:	23b9      	movs	r3, #185	; 0xb9
    7060:	f003 fc77 	bl	a952 <assert_print>
    7064:	4817      	ldr	r0, [pc, #92]	; (70c4 <k_mem_slab_alloc+0xd0>)
    7066:	4629      	mov	r1, r5
    7068:	f003 fc73 	bl	a952 <assert_print>
    706c:	4810      	ldr	r0, [pc, #64]	; (70b0 <k_mem_slab_alloc+0xbc>)
    706e:	21b9      	movs	r1, #185	; 0xb9
    7070:	f003 fc68 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7074:	f389 8811 	msr	BASEPRI, r9
    7078:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    707c:	e013      	b.n	70a6 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    707e:	ea58 0207 	orrs.w	r2, r8, r7
    7082:	d103      	bne.n	708c <k_mem_slab_alloc+0x98>
		*mem = NULL;
    7084:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    7086:	f06f 040b 	mvn.w	r4, #11
    708a:	e7e1      	b.n	7050 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    708c:	4622      	mov	r2, r4
    708e:	e9cd 8700 	strd	r8, r7, [sp]
    7092:	4649      	mov	r1, r9
    7094:	4628      	mov	r0, r5
    7096:	f001 f951 	bl	833c <z_pend_curr>
		if (result == 0) {
    709a:	4604      	mov	r4, r0
    709c:	b918      	cbnz	r0, 70a6 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    709e:	4b0a      	ldr	r3, [pc, #40]	; (70c8 <k_mem_slab_alloc+0xd4>)
    70a0:	689b      	ldr	r3, [r3, #8]
    70a2:	695b      	ldr	r3, [r3, #20]
    70a4:	6033      	str	r3, [r6, #0]
}
    70a6:	4620      	mov	r0, r4
    70a8:	b003      	add	sp, #12
    70aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    70ae:	bf00      	nop
    70b0:	0000c2d4 	.word	0x0000c2d4
    70b4:	0000c32d 	.word	0x0000c32d
    70b8:	0000c18a 	.word	0x0000c18a
    70bc:	0000c342 	.word	0x0000c342
    70c0:	0000c301 	.word	0x0000c301
    70c4:	0000c318 	.word	0x0000c318
    70c8:	20004f00 	.word	0x20004f00

000070cc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    70cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70d0:	4604      	mov	r4, r0
    70d2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    70d4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    70d8:	f04f 0320 	mov.w	r3, #32
    70dc:	f3ef 8711 	mrs	r7, BASEPRI
    70e0:	f383 8812 	msr	BASEPRI_MAX, r3
    70e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    70e8:	4628      	mov	r0, r5
    70ea:	f000 f98f 	bl	740c <z_spin_lock_valid>
    70ee:	b968      	cbnz	r0, 710c <k_mem_slab_free+0x40>
    70f0:	4a22      	ldr	r2, [pc, #136]	; (717c <k_mem_slab_free+0xb0>)
    70f2:	4923      	ldr	r1, [pc, #140]	; (7180 <k_mem_slab_free+0xb4>)
    70f4:	4823      	ldr	r0, [pc, #140]	; (7184 <k_mem_slab_free+0xb8>)
    70f6:	238e      	movs	r3, #142	; 0x8e
    70f8:	f003 fc2b 	bl	a952 <assert_print>
    70fc:	4822      	ldr	r0, [pc, #136]	; (7188 <k_mem_slab_free+0xbc>)
    70fe:	4629      	mov	r1, r5
    7100:	f003 fc27 	bl	a952 <assert_print>
    7104:	481d      	ldr	r0, [pc, #116]	; (717c <k_mem_slab_free+0xb0>)
    7106:	218e      	movs	r1, #142	; 0x8e
    7108:	f003 fc1c 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    710c:	4628      	mov	r0, r5
    710e:	f000 f99b 	bl	7448 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7112:	f8d4 8018 	ldr.w	r8, [r4, #24]
    7116:	f1b8 0f00 	cmp.w	r8, #0
    711a:	d10f      	bne.n	713c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    711c:	4620      	mov	r0, r4
    711e:	f001 fb07 	bl	8730 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7122:	b158      	cbz	r0, 713c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7124:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7126:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7128:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    712c:	f000 fd4a 	bl	7bc4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7130:	4639      	mov	r1, r7
    7132:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    7138:	f000 bdd4 	b.w	7ce4 <z_reschedule>
	**(char ***) mem = slab->free_list;
    713c:	6833      	ldr	r3, [r6, #0]
    713e:	69a2      	ldr	r2, [r4, #24]
    7140:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7142:	6833      	ldr	r3, [r6, #0]
    7144:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7146:	69e3      	ldr	r3, [r4, #28]
    7148:	3b01      	subs	r3, #1
    714a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    714c:	4628      	mov	r0, r5
    714e:	f000 f96b 	bl	7428 <z_spin_unlock_valid>
    7152:	b968      	cbnz	r0, 7170 <k_mem_slab_free+0xa4>
    7154:	4a09      	ldr	r2, [pc, #36]	; (717c <k_mem_slab_free+0xb0>)
    7156:	490d      	ldr	r1, [pc, #52]	; (718c <k_mem_slab_free+0xc0>)
    7158:	480a      	ldr	r0, [pc, #40]	; (7184 <k_mem_slab_free+0xb8>)
    715a:	23b9      	movs	r3, #185	; 0xb9
    715c:	f003 fbf9 	bl	a952 <assert_print>
    7160:	480b      	ldr	r0, [pc, #44]	; (7190 <k_mem_slab_free+0xc4>)
    7162:	4629      	mov	r1, r5
    7164:	f003 fbf5 	bl	a952 <assert_print>
    7168:	4804      	ldr	r0, [pc, #16]	; (717c <k_mem_slab_free+0xb0>)
    716a:	21b9      	movs	r1, #185	; 0xb9
    716c:	f003 fbea 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7170:	f387 8811 	msr	BASEPRI, r7
    7174:	f3bf 8f6f 	isb	sy
}
    7178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    717c:	0000c2d4 	.word	0x0000c2d4
    7180:	0000c32d 	.word	0x0000c32d
    7184:	0000c18a 	.word	0x0000c18a
    7188:	0000c342 	.word	0x0000c342
    718c:	0000c301 	.word	0x0000c301
    7190:	0000c318 	.word	0x0000c318

00007194 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7198:	b085      	sub	sp, #20
    719a:	4604      	mov	r4, r0
    719c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    71a0:	f1b8 0f0f 	cmp.w	r8, #15
{
    71a4:	460f      	mov	r7, r1
    71a6:	4615      	mov	r5, r2
    71a8:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    71aa:	d132      	bne.n	7212 <z_setup_new_thread+0x7e>
    71ac:	4b25      	ldr	r3, [pc, #148]	; (7244 <z_setup_new_thread+0xb0>)
    71ae:	4599      	cmp	r9, r3
    71b0:	d133      	bne.n	721a <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    71b2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    71b6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    71ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    71bc:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    71be:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    71c0:	2304      	movs	r3, #4
    71c2:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    71c4:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    71c8:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    71cc:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    71d0:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    71d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    71d4:	f884 800e 	strb.w	r8, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    71d8:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    71dc:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    71de:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    71e0:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    71e2:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    71e6:	9302      	str	r3, [sp, #8]
    71e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    71ea:	9301      	str	r3, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    71ec:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    71ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71f0:	9300      	str	r3, [sp, #0]
    71f2:	4642      	mov	r2, r8
    71f4:	464b      	mov	r3, r9
    71f6:	4639      	mov	r1, r7
    71f8:	4620      	mov	r0, r4
    71fa:	f7fc fc01 	bl	3a00 <arch_new_thread>
	if (!_current) {
    71fe:	4b12      	ldr	r3, [pc, #72]	; (7248 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    7200:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    7202:	689b      	ldr	r3, [r3, #8]
    7204:	b103      	cbz	r3, 7208 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    7206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7208:	6723      	str	r3, [r4, #112]	; 0x70
}
    720a:	4640      	mov	r0, r8
    720c:	b005      	add	sp, #20
    720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7212:	f108 0310 	add.w	r3, r8, #16
    7216:	2b1e      	cmp	r3, #30
    7218:	d9cb      	bls.n	71b2 <z_setup_new_thread+0x1e>
    721a:	4a0c      	ldr	r2, [pc, #48]	; (724c <z_setup_new_thread+0xb8>)
    721c:	490c      	ldr	r1, [pc, #48]	; (7250 <z_setup_new_thread+0xbc>)
    721e:	480d      	ldr	r0, [pc, #52]	; (7254 <z_setup_new_thread+0xc0>)
    7220:	f240 13ff 	movw	r3, #511	; 0x1ff
    7224:	f003 fb95 	bl	a952 <assert_print>
    7228:	4641      	mov	r1, r8
    722a:	480b      	ldr	r0, [pc, #44]	; (7258 <z_setup_new_thread+0xc4>)
    722c:	f06f 030f 	mvn.w	r3, #15
    7230:	220e      	movs	r2, #14
    7232:	f003 fb8e 	bl	a952 <assert_print>
    7236:	4805      	ldr	r0, [pc, #20]	; (724c <z_setup_new_thread+0xb8>)
    7238:	f240 11ff 	movw	r1, #511	; 0x1ff
    723c:	f003 fb82 	bl	a944 <assert_post_action>
    7240:	e7b7      	b.n	71b2 <z_setup_new_thread+0x1e>
    7242:	bf00      	nop
    7244:	00007459 	.word	0x00007459
    7248:	20004f00 	.word	0x20004f00
    724c:	0000d5f7 	.word	0x0000d5f7
    7250:	0000d61a 	.word	0x0000d61a
    7254:	0000c18a 	.word	0x0000c18a
    7258:	0000d69a 	.word	0x0000d69a

0000725c <z_impl_k_thread_create>:
{
    725c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7260:	b087      	sub	sp, #28
    7262:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    7266:	4604      	mov	r4, r0
    7268:	460f      	mov	r7, r1
    726a:	4690      	mov	r8, r2
    726c:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    726e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7272:	b173      	cbz	r3, 7292 <z_impl_k_thread_create+0x36>
    7274:	491c      	ldr	r1, [pc, #112]	; (72e8 <z_impl_k_thread_create+0x8c>)
    7276:	4a1d      	ldr	r2, [pc, #116]	; (72ec <z_impl_k_thread_create+0x90>)
    7278:	481d      	ldr	r0, [pc, #116]	; (72f0 <z_impl_k_thread_create+0x94>)
    727a:	f240 236e 	movw	r3, #622	; 0x26e
    727e:	f003 fb68 	bl	a952 <assert_print>
    7282:	481c      	ldr	r0, [pc, #112]	; (72f4 <z_impl_k_thread_create+0x98>)
    7284:	f003 fb65 	bl	a952 <assert_print>
    7288:	4818      	ldr	r0, [pc, #96]	; (72ec <z_impl_k_thread_create+0x90>)
    728a:	f240 216e 	movw	r1, #622	; 0x26e
    728e:	f003 fb59 	bl	a944 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7292:	2300      	movs	r3, #0
    7294:	9305      	str	r3, [sp, #20]
    7296:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7298:	9304      	str	r3, [sp, #16]
    729a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    729c:	9303      	str	r3, [sp, #12]
    729e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    72a0:	9302      	str	r3, [sp, #8]
    72a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72a4:	9301      	str	r3, [sp, #4]
    72a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    72a8:	9300      	str	r3, [sp, #0]
    72aa:	4642      	mov	r2, r8
    72ac:	464b      	mov	r3, r9
    72ae:	4639      	mov	r1, r7
    72b0:	4620      	mov	r0, r4
    72b2:	f7ff ff6f 	bl	7194 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    72b6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    72ba:	bf08      	it	eq
    72bc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    72c0:	d005      	beq.n	72ce <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    72c2:	ea55 0306 	orrs.w	r3, r5, r6
    72c6:	d106      	bne.n	72d6 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    72c8:	4620      	mov	r0, r4
    72ca:	f000 fd4f 	bl	7d6c <z_sched_start>
}
    72ce:	4620      	mov	r0, r4
    72d0:	b007      	add	sp, #28
    72d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    72d6:	4908      	ldr	r1, [pc, #32]	; (72f8 <z_impl_k_thread_create+0x9c>)
    72d8:	4632      	mov	r2, r6
    72da:	462b      	mov	r3, r5
    72dc:	f104 0018 	add.w	r0, r4, #24
    72e0:	f001 fd22 	bl	8d28 <z_add_timeout>
    72e4:	e7f3      	b.n	72ce <z_impl_k_thread_create+0x72>
    72e6:	bf00      	nop
    72e8:	0000d6cb 	.word	0x0000d6cb
    72ec:	0000d5f7 	.word	0x0000d5f7
    72f0:	0000c18a 	.word	0x0000c18a
    72f4:	0000d6dd 	.word	0x0000d6dd
    72f8:	000085e1 	.word	0x000085e1

000072fc <z_init_static_threads>:
{
    72fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7300:	4c3b      	ldr	r4, [pc, #236]	; (73f0 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7302:	4d3c      	ldr	r5, [pc, #240]	; (73f4 <z_init_static_threads+0xf8>)
    7304:	4f3c      	ldr	r7, [pc, #240]	; (73f8 <z_init_static_threads+0xfc>)
{
    7306:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7308:	42ac      	cmp	r4, r5
    730a:	4626      	mov	r6, r4
    730c:	d90e      	bls.n	732c <z_init_static_threads+0x30>
    730e:	493b      	ldr	r1, [pc, #236]	; (73fc <z_init_static_threads+0x100>)
    7310:	483b      	ldr	r0, [pc, #236]	; (7400 <z_init_static_threads+0x104>)
    7312:	f240 23d5 	movw	r3, #725	; 0x2d5
    7316:	463a      	mov	r2, r7
    7318:	f003 fb1b 	bl	a952 <assert_print>
    731c:	4839      	ldr	r0, [pc, #228]	; (7404 <z_init_static_threads+0x108>)
    731e:	f003 fb18 	bl	a952 <assert_print>
    7322:	f240 21d5 	movw	r1, #725	; 0x2d5
    7326:	4638      	mov	r0, r7
    7328:	f003 fb0c 	bl	a944 <assert_post_action>
    732c:	42ae      	cmp	r6, r5
    732e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7332:	d31f      	bcc.n	7374 <z_init_static_threads+0x78>
	k_sched_lock();
    7334:	f000 fd6e 	bl	7e14 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7338:	4c2d      	ldr	r4, [pc, #180]	; (73f0 <z_init_static_threads+0xf4>)
    733a:	4e2f      	ldr	r6, [pc, #188]	; (73f8 <z_init_static_threads+0xfc>)
    733c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 73fc <z_init_static_threads+0x100>
    7340:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7400 <z_init_static_threads+0x104>
    7344:	42ac      	cmp	r4, r5
    7346:	d90e      	bls.n	7366 <z_init_static_threads+0x6a>
    7348:	4641      	mov	r1, r8
    734a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    734e:	4632      	mov	r2, r6
    7350:	4648      	mov	r0, r9
    7352:	f003 fafe 	bl	a952 <assert_print>
    7356:	482b      	ldr	r0, [pc, #172]	; (7404 <z_init_static_threads+0x108>)
    7358:	f003 fafb 	bl	a952 <assert_print>
    735c:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7360:	4630      	mov	r0, r6
    7362:	f003 faef 	bl	a944 <assert_post_action>
    7366:	42ac      	cmp	r4, r5
    7368:	d320      	bcc.n	73ac <z_init_static_threads+0xb0>
}
    736a:	b007      	add	sp, #28
    736c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7370:	f000 bdc4 	b.w	7efc <k_sched_unlock>
		z_setup_new_thread(
    7374:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7378:	9305      	str	r3, [sp, #20]
    737a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    737e:	9304      	str	r3, [sp, #16]
    7380:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7384:	9303      	str	r3, [sp, #12]
    7386:	f854 3c18 	ldr.w	r3, [r4, #-24]
    738a:	9302      	str	r3, [sp, #8]
    738c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7390:	9301      	str	r3, [sp, #4]
    7392:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7396:	9300      	str	r3, [sp, #0]
    7398:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    739c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    73a0:	f7ff fef8 	bl	7194 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    73a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    73a8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    73aa:	e7ad      	b.n	7308 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    73ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73ae:	1c5a      	adds	r2, r3, #1
    73b0:	d00f      	beq.n	73d2 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    73b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    73b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    73ba:	f240 30e7 	movw	r0, #999	; 0x3e7
    73be:	2100      	movs	r1, #0
    73c0:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    73c4:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    73c8:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    73ca:	d104      	bne.n	73d6 <z_init_static_threads+0xda>
	z_sched_start(thread);
    73cc:	4638      	mov	r0, r7
    73ce:	f000 fccd 	bl	7d6c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    73d2:	3430      	adds	r4, #48	; 0x30
    73d4:	e7b6      	b.n	7344 <z_init_static_threads+0x48>
    73d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    73da:	2300      	movs	r3, #0
    73dc:	f7f9 fafe 	bl	9dc <__aeabi_uldivmod>
    73e0:	4602      	mov	r2, r0
    73e2:	460b      	mov	r3, r1
    73e4:	f107 0018 	add.w	r0, r7, #24
    73e8:	4907      	ldr	r1, [pc, #28]	; (7408 <z_init_static_threads+0x10c>)
    73ea:	f001 fc9d 	bl	8d28 <z_add_timeout>
    73ee:	e7f0      	b.n	73d2 <z_init_static_threads+0xd6>
    73f0:	200041c8 	.word	0x200041c8
    73f4:	200041c8 	.word	0x200041c8
    73f8:	0000d5f7 	.word	0x0000d5f7
    73fc:	0000d702 	.word	0x0000d702
    7400:	0000c18a 	.word	0x0000c18a
    7404:	0000d5d8 	.word	0x0000d5d8
    7408:	000085e1 	.word	0x000085e1

0000740c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    740c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    740e:	b138      	cbz	r0, 7420 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7410:	4b04      	ldr	r3, [pc, #16]	; (7424 <z_spin_lock_valid+0x18>)
    7412:	7d1b      	ldrb	r3, [r3, #20]
    7414:	f000 0003 	and.w	r0, r0, #3
    7418:	1ac0      	subs	r0, r0, r3
    741a:	bf18      	it	ne
    741c:	2001      	movne	r0, #1
    741e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7420:	2001      	movs	r0, #1
}
    7422:	4770      	bx	lr
    7424:	20004f00 	.word	0x20004f00

00007428 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7428:	4a06      	ldr	r2, [pc, #24]	; (7444 <z_spin_unlock_valid+0x1c>)
    742a:	7d11      	ldrb	r1, [r2, #20]
    742c:	6892      	ldr	r2, [r2, #8]
    742e:	430a      	orrs	r2, r1
    7430:	6801      	ldr	r1, [r0, #0]
{
    7432:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7434:	4291      	cmp	r1, r2
    7436:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    743a:	bf04      	itt	eq
    743c:	6018      	streq	r0, [r3, #0]
	return true;
    743e:	2001      	moveq	r0, #1
}
    7440:	4770      	bx	lr
    7442:	bf00      	nop
    7444:	20004f00 	.word	0x20004f00

00007448 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7448:	4b02      	ldr	r3, [pc, #8]	; (7454 <z_spin_lock_set_owner+0xc>)
    744a:	7d1a      	ldrb	r2, [r3, #20]
    744c:	689b      	ldr	r3, [r3, #8]
    744e:	4313      	orrs	r3, r2
    7450:	6003      	str	r3, [r0, #0]
}
    7452:	4770      	bx	lr
    7454:	20004f00 	.word	0x20004f00

00007458 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7458:	4c13      	ldr	r4, [pc, #76]	; (74a8 <idle+0x50>)
{
    745a:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    745c:	68a3      	ldr	r3, [r4, #8]
    745e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7462:	2b00      	cmp	r3, #0
    7464:	da09      	bge.n	747a <idle+0x22>
    7466:	4911      	ldr	r1, [pc, #68]	; (74ac <idle+0x54>)
    7468:	4811      	ldr	r0, [pc, #68]	; (74b0 <idle+0x58>)
    746a:	4a12      	ldr	r2, [pc, #72]	; (74b4 <idle+0x5c>)
    746c:	2327      	movs	r3, #39	; 0x27
    746e:	f003 fa70 	bl	a952 <assert_print>
    7472:	4810      	ldr	r0, [pc, #64]	; (74b4 <idle+0x5c>)
    7474:	2127      	movs	r1, #39	; 0x27
    7476:	f003 fa65 	bl	a944 <assert_post_action>
	return !z_sys_post_kernel;
    747a:	4d0f      	ldr	r5, [pc, #60]	; (74b8 <idle+0x60>)
	__asm__ volatile(
    747c:	f04f 0220 	mov.w	r2, #32
    7480:	f3ef 8311 	mrs	r3, BASEPRI
    7484:	f382 8812 	msr	BASEPRI_MAX, r2
    7488:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    748c:	f001 fd64 	bl	8f58 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7490:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7492:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7494:	b913      	cbnz	r3, 749c <idle+0x44>
	arch_cpu_idle();
    7496:	f7fc f987 	bl	37a8 <arch_cpu_idle>
}
    749a:	e7ef      	b.n	747c <idle+0x24>
    749c:	f7fb ffe0 	bl	3460 <pm_system_suspend>
    74a0:	2800      	cmp	r0, #0
    74a2:	d1eb      	bne.n	747c <idle+0x24>
    74a4:	e7f7      	b.n	7496 <idle+0x3e>
    74a6:	bf00      	nop
    74a8:	20004f00 	.word	0x20004f00
    74ac:	0000d750 	.word	0x0000d750
    74b0:	0000c18a 	.word	0x0000c18a
    74b4:	0000d72f 	.word	0x0000d72f
    74b8:	20005548 	.word	0x20005548

000074bc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    74bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    74c0:	4604      	mov	r4, r0
    74c2:	4617      	mov	r7, r2
    74c4:	461e      	mov	r6, r3
    74c6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    74ca:	b163      	cbz	r3, 74e6 <z_impl_k_mutex_lock+0x2a>
    74cc:	496d      	ldr	r1, [pc, #436]	; (7684 <z_impl_k_mutex_lock+0x1c8>)
    74ce:	4a6e      	ldr	r2, [pc, #440]	; (7688 <z_impl_k_mutex_lock+0x1cc>)
    74d0:	486e      	ldr	r0, [pc, #440]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    74d2:	2365      	movs	r3, #101	; 0x65
    74d4:	f003 fa3d 	bl	a952 <assert_print>
    74d8:	486d      	ldr	r0, [pc, #436]	; (7690 <z_impl_k_mutex_lock+0x1d4>)
    74da:	f003 fa3a 	bl	a952 <assert_print>
    74de:	486a      	ldr	r0, [pc, #424]	; (7688 <z_impl_k_mutex_lock+0x1cc>)
    74e0:	2165      	movs	r1, #101	; 0x65
    74e2:	f003 fa2f 	bl	a944 <assert_post_action>
    74e6:	f04f 0320 	mov.w	r3, #32
    74ea:	f3ef 8811 	mrs	r8, BASEPRI
    74ee:	f383 8812 	msr	BASEPRI_MAX, r3
    74f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74f6:	4867      	ldr	r0, [pc, #412]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    74f8:	f7ff ff88 	bl	740c <z_spin_lock_valid>
    74fc:	b968      	cbnz	r0, 751a <z_impl_k_mutex_lock+0x5e>
    74fe:	4a66      	ldr	r2, [pc, #408]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7500:	4966      	ldr	r1, [pc, #408]	; (769c <z_impl_k_mutex_lock+0x1e0>)
    7502:	4862      	ldr	r0, [pc, #392]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    7504:	238e      	movs	r3, #142	; 0x8e
    7506:	f003 fa24 	bl	a952 <assert_print>
    750a:	4962      	ldr	r1, [pc, #392]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    750c:	4864      	ldr	r0, [pc, #400]	; (76a0 <z_impl_k_mutex_lock+0x1e4>)
    750e:	f003 fa20 	bl	a952 <assert_print>
    7512:	4861      	ldr	r0, [pc, #388]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7514:	218e      	movs	r1, #142	; 0x8e
    7516:	f003 fa15 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    751a:	485e      	ldr	r0, [pc, #376]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    751c:	f7ff ff94 	bl	7448 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7520:	68e3      	ldr	r3, [r4, #12]
    7522:	4a60      	ldr	r2, [pc, #384]	; (76a4 <z_impl_k_mutex_lock+0x1e8>)
    7524:	b30b      	cbz	r3, 756a <z_impl_k_mutex_lock+0xae>
    7526:	68a0      	ldr	r0, [r4, #8]
    7528:	6891      	ldr	r1, [r2, #8]
    752a:	4288      	cmp	r0, r1
    752c:	d03d      	beq.n	75aa <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    752e:	ea57 0306 	orrs.w	r3, r7, r6
    7532:	d13c      	bne.n	75ae <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7534:	4857      	ldr	r0, [pc, #348]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7536:	f7ff ff77 	bl	7428 <z_spin_unlock_valid>
    753a:	b968      	cbnz	r0, 7558 <z_impl_k_mutex_lock+0x9c>
    753c:	4a56      	ldr	r2, [pc, #344]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    753e:	495a      	ldr	r1, [pc, #360]	; (76a8 <z_impl_k_mutex_lock+0x1ec>)
    7540:	4852      	ldr	r0, [pc, #328]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    7542:	23b9      	movs	r3, #185	; 0xb9
    7544:	f003 fa05 	bl	a952 <assert_print>
    7548:	4952      	ldr	r1, [pc, #328]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    754a:	4858      	ldr	r0, [pc, #352]	; (76ac <z_impl_k_mutex_lock+0x1f0>)
    754c:	f003 fa01 	bl	a952 <assert_print>
    7550:	4851      	ldr	r0, [pc, #324]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7552:	21b9      	movs	r1, #185	; 0xb9
    7554:	f003 f9f6 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7558:	f388 8811 	msr	BASEPRI, r8
    755c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7560:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7564:	b002      	add	sp, #8
    7566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    756a:	6891      	ldr	r1, [r2, #8]
    756c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7570:	4848      	ldr	r0, [pc, #288]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7572:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7574:	3301      	adds	r3, #1
    7576:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7578:	6893      	ldr	r3, [r2, #8]
    757a:	60a3      	str	r3, [r4, #8]
    757c:	f7ff ff54 	bl	7428 <z_spin_unlock_valid>
    7580:	b968      	cbnz	r0, 759e <z_impl_k_mutex_lock+0xe2>
    7582:	4a45      	ldr	r2, [pc, #276]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7584:	4948      	ldr	r1, [pc, #288]	; (76a8 <z_impl_k_mutex_lock+0x1ec>)
    7586:	4841      	ldr	r0, [pc, #260]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    7588:	23b9      	movs	r3, #185	; 0xb9
    758a:	f003 f9e2 	bl	a952 <assert_print>
    758e:	4941      	ldr	r1, [pc, #260]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7590:	4846      	ldr	r0, [pc, #280]	; (76ac <z_impl_k_mutex_lock+0x1f0>)
    7592:	f003 f9de 	bl	a952 <assert_print>
    7596:	4840      	ldr	r0, [pc, #256]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7598:	21b9      	movs	r1, #185	; 0xb9
    759a:	f003 f9d3 	bl	a944 <assert_post_action>
    759e:	f388 8811 	msr	BASEPRI, r8
    75a2:	f3bf 8f6f 	isb	sy
		return 0;
    75a6:	2000      	movs	r0, #0
    75a8:	e7dc      	b.n	7564 <z_impl_k_mutex_lock+0xa8>
					_current->base.prio :
    75aa:	6921      	ldr	r1, [r4, #16]
    75ac:	e7e0      	b.n	7570 <z_impl_k_mutex_lock+0xb4>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    75ae:	f991 100e 	ldrsb.w	r1, [r1, #14]
    75b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    75b6:	4299      	cmp	r1, r3
    75b8:	bfa8      	it	ge
    75ba:	4619      	movge	r1, r3
    75bc:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    75c0:	4291      	cmp	r1, r2
    75c2:	bfb8      	it	lt
    75c4:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    75c6:	4299      	cmp	r1, r3
    75c8:	da53      	bge.n	7672 <z_impl_k_mutex_lock+0x1b6>
		resched = adjust_owner_prio(mutex, new_prio);
    75ca:	f003 ff02 	bl	b3d2 <adjust_owner_prio.isra.0>
    75ce:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    75d0:	e9cd 7600 	strd	r7, r6, [sp]
    75d4:	482f      	ldr	r0, [pc, #188]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    75d6:	4622      	mov	r2, r4
    75d8:	4641      	mov	r1, r8
    75da:	f000 feaf 	bl	833c <z_pend_curr>
	if (got_mutex == 0) {
    75de:	2800      	cmp	r0, #0
    75e0:	d0e1      	beq.n	75a6 <z_impl_k_mutex_lock+0xea>
	__asm__ volatile(
    75e2:	f04f 0320 	mov.w	r3, #32
    75e6:	f3ef 8611 	mrs	r6, BASEPRI
    75ea:	f383 8812 	msr	BASEPRI_MAX, r3
    75ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75f2:	4828      	ldr	r0, [pc, #160]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    75f4:	f7ff ff0a 	bl	740c <z_spin_lock_valid>
    75f8:	b968      	cbnz	r0, 7616 <z_impl_k_mutex_lock+0x15a>
    75fa:	4a27      	ldr	r2, [pc, #156]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    75fc:	4927      	ldr	r1, [pc, #156]	; (769c <z_impl_k_mutex_lock+0x1e0>)
    75fe:	4823      	ldr	r0, [pc, #140]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    7600:	238e      	movs	r3, #142	; 0x8e
    7602:	f003 f9a6 	bl	a952 <assert_print>
    7606:	4923      	ldr	r1, [pc, #140]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7608:	4825      	ldr	r0, [pc, #148]	; (76a0 <z_impl_k_mutex_lock+0x1e4>)
    760a:	f003 f9a2 	bl	a952 <assert_print>
    760e:	4822      	ldr	r0, [pc, #136]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7610:	218e      	movs	r1, #142	; 0x8e
    7612:	f003 f997 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7616:	481f      	ldr	r0, [pc, #124]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7618:	f7ff ff16 	bl	7448 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    761c:	6823      	ldr	r3, [r4, #0]
    761e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7620:	42a3      	cmp	r3, r4
    7622:	d00a      	beq.n	763a <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7624:	b14b      	cbz	r3, 763a <z_impl_k_mutex_lock+0x17e>
    7626:	f993 300e 	ldrsb.w	r3, [r3, #14]
    762a:	4299      	cmp	r1, r3
    762c:	bfa8      	it	ge
    762e:	4619      	movge	r1, r3
    7630:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7634:	4299      	cmp	r1, r3
    7636:	bfb8      	it	lt
    7638:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    763a:	68a0      	ldr	r0, [r4, #8]
    763c:	f003 fec9 	bl	b3d2 <adjust_owner_prio.isra.0>
    7640:	b9c8      	cbnz	r0, 7676 <z_impl_k_mutex_lock+0x1ba>
    7642:	b9c5      	cbnz	r5, 7676 <z_impl_k_mutex_lock+0x1ba>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7644:	4813      	ldr	r0, [pc, #76]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7646:	f7ff feef 	bl	7428 <z_spin_unlock_valid>
    764a:	b968      	cbnz	r0, 7668 <z_impl_k_mutex_lock+0x1ac>
    764c:	4a12      	ldr	r2, [pc, #72]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    764e:	4916      	ldr	r1, [pc, #88]	; (76a8 <z_impl_k_mutex_lock+0x1ec>)
    7650:	480e      	ldr	r0, [pc, #56]	; (768c <z_impl_k_mutex_lock+0x1d0>)
    7652:	23b9      	movs	r3, #185	; 0xb9
    7654:	f003 f97d 	bl	a952 <assert_print>
    7658:	490e      	ldr	r1, [pc, #56]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    765a:	4814      	ldr	r0, [pc, #80]	; (76ac <z_impl_k_mutex_lock+0x1f0>)
    765c:	f003 f979 	bl	a952 <assert_print>
    7660:	480d      	ldr	r0, [pc, #52]	; (7698 <z_impl_k_mutex_lock+0x1dc>)
    7662:	21b9      	movs	r1, #185	; 0xb9
    7664:	f003 f96e 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7668:	f386 8811 	msr	BASEPRI, r6
    766c:	f3bf 8f6f 	isb	sy
    7670:	e005      	b.n	767e <z_impl_k_mutex_lock+0x1c2>
	bool resched = false;
    7672:	2500      	movs	r5, #0
    7674:	e7ac      	b.n	75d0 <z_impl_k_mutex_lock+0x114>
		z_reschedule(&lock, key);
    7676:	4807      	ldr	r0, [pc, #28]	; (7694 <z_impl_k_mutex_lock+0x1d8>)
    7678:	4631      	mov	r1, r6
    767a:	f000 fb33 	bl	7ce4 <z_reschedule>
	return -EAGAIN;
    767e:	f06f 000a 	mvn.w	r0, #10
    7682:	e76f      	b.n	7564 <z_impl_k_mutex_lock+0xa8>
    7684:	0000d6cb 	.word	0x0000d6cb
    7688:	0000d778 	.word	0x0000d778
    768c:	0000c18a 	.word	0x0000c18a
    7690:	0000d79a 	.word	0x0000d79a
    7694:	20004f28 	.word	0x20004f28
    7698:	0000c2d4 	.word	0x0000c2d4
    769c:	0000c32d 	.word	0x0000c32d
    76a0:	0000c342 	.word	0x0000c342
    76a4:	20004f00 	.word	0x20004f00
    76a8:	0000c301 	.word	0x0000c301
    76ac:	0000c318 	.word	0x0000c318

000076b0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    76b0:	b538      	push	{r3, r4, r5, lr}
    76b2:	4604      	mov	r4, r0
    76b4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    76b8:	b163      	cbz	r3, 76d4 <z_impl_k_mutex_unlock+0x24>
    76ba:	4950      	ldr	r1, [pc, #320]	; (77fc <z_impl_k_mutex_unlock+0x14c>)
    76bc:	4a50      	ldr	r2, [pc, #320]	; (7800 <z_impl_k_mutex_unlock+0x150>)
    76be:	4851      	ldr	r0, [pc, #324]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    76c0:	23c7      	movs	r3, #199	; 0xc7
    76c2:	f003 f946 	bl	a952 <assert_print>
    76c6:	4850      	ldr	r0, [pc, #320]	; (7808 <z_impl_k_mutex_unlock+0x158>)
    76c8:	f003 f943 	bl	a952 <assert_print>
    76cc:	484c      	ldr	r0, [pc, #304]	; (7800 <z_impl_k_mutex_unlock+0x150>)
    76ce:	21c7      	movs	r1, #199	; 0xc7
    76d0:	f003 f938 	bl	a944 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    76d4:	68a3      	ldr	r3, [r4, #8]
    76d6:	2b00      	cmp	r3, #0
    76d8:	f000 8089 	beq.w	77ee <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    76dc:	4d4b      	ldr	r5, [pc, #300]	; (780c <z_impl_k_mutex_unlock+0x15c>)
    76de:	68aa      	ldr	r2, [r5, #8]
    76e0:	4293      	cmp	r3, r2
    76e2:	f040 8087 	bne.w	77f4 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    76e6:	68e3      	ldr	r3, [r4, #12]
    76e8:	b94b      	cbnz	r3, 76fe <z_impl_k_mutex_unlock+0x4e>
    76ea:	4949      	ldr	r1, [pc, #292]	; (7810 <z_impl_k_mutex_unlock+0x160>)
    76ec:	4845      	ldr	r0, [pc, #276]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    76ee:	4a44      	ldr	r2, [pc, #272]	; (7800 <z_impl_k_mutex_unlock+0x150>)
    76f0:	23df      	movs	r3, #223	; 0xdf
    76f2:	f003 f92e 	bl	a952 <assert_print>
    76f6:	4842      	ldr	r0, [pc, #264]	; (7800 <z_impl_k_mutex_unlock+0x150>)
    76f8:	21df      	movs	r1, #223	; 0xdf
    76fa:	f003 f923 	bl	a944 <assert_post_action>
    76fe:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7702:	b163      	cbz	r3, 771e <z_impl_k_mutex_unlock+0x6e>
    7704:	493d      	ldr	r1, [pc, #244]	; (77fc <z_impl_k_mutex_unlock+0x14c>)
    7706:	4a43      	ldr	r2, [pc, #268]	; (7814 <z_impl_k_mutex_unlock+0x164>)
    7708:	483e      	ldr	r0, [pc, #248]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    770a:	23fd      	movs	r3, #253	; 0xfd
    770c:	f003 f921 	bl	a952 <assert_print>
    7710:	4841      	ldr	r0, [pc, #260]	; (7818 <z_impl_k_mutex_unlock+0x168>)
    7712:	f003 f91e 	bl	a952 <assert_print>
    7716:	483f      	ldr	r0, [pc, #252]	; (7814 <z_impl_k_mutex_unlock+0x164>)
    7718:	21fd      	movs	r1, #253	; 0xfd
    771a:	f003 f913 	bl	a944 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    771e:	68ab      	ldr	r3, [r5, #8]
    7720:	7bdb      	ldrb	r3, [r3, #15]
    7722:	2b01      	cmp	r3, #1
    7724:	d10c      	bne.n	7740 <z_impl_k_mutex_unlock+0x90>
    7726:	493d      	ldr	r1, [pc, #244]	; (781c <z_impl_k_mutex_unlock+0x16c>)
    7728:	4a3a      	ldr	r2, [pc, #232]	; (7814 <z_impl_k_mutex_unlock+0x164>)
    772a:	4836      	ldr	r0, [pc, #216]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    772c:	23fe      	movs	r3, #254	; 0xfe
    772e:	f003 f910 	bl	a952 <assert_print>
    7732:	4839      	ldr	r0, [pc, #228]	; (7818 <z_impl_k_mutex_unlock+0x168>)
    7734:	f003 f90d 	bl	a952 <assert_print>
    7738:	4836      	ldr	r0, [pc, #216]	; (7814 <z_impl_k_mutex_unlock+0x164>)
    773a:	21fe      	movs	r1, #254	; 0xfe
    773c:	f003 f902 	bl	a944 <assert_post_action>

	--_current->base.sched_locked;
    7740:	68aa      	ldr	r2, [r5, #8]
    7742:	7bd3      	ldrb	r3, [r2, #15]
    7744:	3b01      	subs	r3, #1
    7746:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7748:	68e3      	ldr	r3, [r4, #12]
    774a:	2b01      	cmp	r3, #1
    774c:	d905      	bls.n	775a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    774e:	3b01      	subs	r3, #1
    7750:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7752:	f000 fbd3 	bl	7efc <k_sched_unlock>

	return 0;
    7756:	2000      	movs	r0, #0
}
    7758:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    775a:	f04f 0320 	mov.w	r3, #32
    775e:	f3ef 8511 	mrs	r5, BASEPRI
    7762:	f383 8812 	msr	BASEPRI_MAX, r3
    7766:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    776a:	482d      	ldr	r0, [pc, #180]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    776c:	f7ff fe4e 	bl	740c <z_spin_lock_valid>
    7770:	b968      	cbnz	r0, 778e <z_impl_k_mutex_unlock+0xde>
    7772:	4a2c      	ldr	r2, [pc, #176]	; (7824 <z_impl_k_mutex_unlock+0x174>)
    7774:	492c      	ldr	r1, [pc, #176]	; (7828 <z_impl_k_mutex_unlock+0x178>)
    7776:	4823      	ldr	r0, [pc, #140]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    7778:	238e      	movs	r3, #142	; 0x8e
    777a:	f003 f8ea 	bl	a952 <assert_print>
    777e:	4928      	ldr	r1, [pc, #160]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    7780:	482a      	ldr	r0, [pc, #168]	; (782c <z_impl_k_mutex_unlock+0x17c>)
    7782:	f003 f8e6 	bl	a952 <assert_print>
    7786:	4827      	ldr	r0, [pc, #156]	; (7824 <z_impl_k_mutex_unlock+0x174>)
    7788:	218e      	movs	r1, #142	; 0x8e
    778a:	f003 f8db 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    778e:	4824      	ldr	r0, [pc, #144]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    7790:	f7ff fe5a 	bl	7448 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7794:	6921      	ldr	r1, [r4, #16]
    7796:	68a0      	ldr	r0, [r4, #8]
    7798:	f003 fe1b 	bl	b3d2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    779c:	4620      	mov	r0, r4
    779e:	f000 ffc7 	bl	8730 <z_unpend_first_thread>
	mutex->owner = new_owner;
    77a2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    77a4:	b158      	cbz	r0, 77be <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    77a6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    77aa:	6122      	str	r2, [r4, #16]
    77ac:	2200      	movs	r2, #0
    77ae:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    77b0:	f000 fa08 	bl	7bc4 <z_ready_thread>
		z_reschedule(&lock, key);
    77b4:	481a      	ldr	r0, [pc, #104]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    77b6:	4629      	mov	r1, r5
    77b8:	f000 fa94 	bl	7ce4 <z_reschedule>
    77bc:	e7c9      	b.n	7752 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    77be:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77c0:	4817      	ldr	r0, [pc, #92]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    77c2:	f7ff fe31 	bl	7428 <z_spin_unlock_valid>
    77c6:	b968      	cbnz	r0, 77e4 <z_impl_k_mutex_unlock+0x134>
    77c8:	4a16      	ldr	r2, [pc, #88]	; (7824 <z_impl_k_mutex_unlock+0x174>)
    77ca:	4919      	ldr	r1, [pc, #100]	; (7830 <z_impl_k_mutex_unlock+0x180>)
    77cc:	480d      	ldr	r0, [pc, #52]	; (7804 <z_impl_k_mutex_unlock+0x154>)
    77ce:	23b9      	movs	r3, #185	; 0xb9
    77d0:	f003 f8bf 	bl	a952 <assert_print>
    77d4:	4912      	ldr	r1, [pc, #72]	; (7820 <z_impl_k_mutex_unlock+0x170>)
    77d6:	4817      	ldr	r0, [pc, #92]	; (7834 <z_impl_k_mutex_unlock+0x184>)
    77d8:	f003 f8bb 	bl	a952 <assert_print>
    77dc:	4811      	ldr	r0, [pc, #68]	; (7824 <z_impl_k_mutex_unlock+0x174>)
    77de:	21b9      	movs	r1, #185	; 0xb9
    77e0:	f003 f8b0 	bl	a944 <assert_post_action>
	__asm__ volatile(
    77e4:	f385 8811 	msr	BASEPRI, r5
    77e8:	f3bf 8f6f 	isb	sy
    77ec:	e7b1      	b.n	7752 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    77ee:	f06f 0015 	mvn.w	r0, #21
    77f2:	e7b1      	b.n	7758 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    77f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    77f8:	e7ae      	b.n	7758 <z_impl_k_mutex_unlock+0xa8>
    77fa:	bf00      	nop
    77fc:	0000d6cb 	.word	0x0000d6cb
    7800:	0000d778 	.word	0x0000d778
    7804:	0000c18a 	.word	0x0000c18a
    7808:	0000d79a 	.word	0x0000d79a
    780c:	20004f00 	.word	0x20004f00
    7810:	0000d7bf 	.word	0x0000d7bf
    7814:	0000d7d6 	.word	0x0000d7d6
    7818:	0000d801 	.word	0x0000d801
    781c:	0000d804 	.word	0x0000d804
    7820:	20004f28 	.word	0x20004f28
    7824:	0000c2d4 	.word	0x0000c2d4
    7828:	0000c32d 	.word	0x0000c32d
    782c:	0000c342 	.word	0x0000c342
    7830:	0000c301 	.word	0x0000c301
    7834:	0000c318 	.word	0x0000c318

00007838 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7838:	b538      	push	{r3, r4, r5, lr}
    783a:	4604      	mov	r4, r0
	__asm__ volatile(
    783c:	f04f 0320 	mov.w	r3, #32
    7840:	f3ef 8511 	mrs	r5, BASEPRI
    7844:	f383 8812 	msr	BASEPRI_MAX, r3
    7848:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    784c:	4814      	ldr	r0, [pc, #80]	; (78a0 <z_impl_k_sem_give+0x68>)
    784e:	f7ff fddd 	bl	740c <z_spin_lock_valid>
    7852:	b968      	cbnz	r0, 7870 <z_impl_k_sem_give+0x38>
    7854:	4a13      	ldr	r2, [pc, #76]	; (78a4 <z_impl_k_sem_give+0x6c>)
    7856:	4914      	ldr	r1, [pc, #80]	; (78a8 <z_impl_k_sem_give+0x70>)
    7858:	4814      	ldr	r0, [pc, #80]	; (78ac <z_impl_k_sem_give+0x74>)
    785a:	238e      	movs	r3, #142	; 0x8e
    785c:	f003 f879 	bl	a952 <assert_print>
    7860:	490f      	ldr	r1, [pc, #60]	; (78a0 <z_impl_k_sem_give+0x68>)
    7862:	4813      	ldr	r0, [pc, #76]	; (78b0 <z_impl_k_sem_give+0x78>)
    7864:	f003 f875 	bl	a952 <assert_print>
    7868:	480e      	ldr	r0, [pc, #56]	; (78a4 <z_impl_k_sem_give+0x6c>)
    786a:	218e      	movs	r1, #142	; 0x8e
    786c:	f003 f86a 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7870:	480b      	ldr	r0, [pc, #44]	; (78a0 <z_impl_k_sem_give+0x68>)
    7872:	f7ff fde9 	bl	7448 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7876:	4620      	mov	r0, r4
    7878:	f000 ff5a 	bl	8730 <z_unpend_first_thread>

	if (thread != NULL) {
    787c:	b148      	cbz	r0, 7892 <z_impl_k_sem_give+0x5a>
    787e:	2200      	movs	r2, #0
    7880:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7882:	f000 f99f 	bl	7bc4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7886:	4629      	mov	r1, r5
    7888:	4805      	ldr	r0, [pc, #20]	; (78a0 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    788a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    788e:	f000 ba29 	b.w	7ce4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7892:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7896:	429a      	cmp	r2, r3
    7898:	bf18      	it	ne
    789a:	3301      	addne	r3, #1
    789c:	60a3      	str	r3, [r4, #8]
}
    789e:	e7f2      	b.n	7886 <z_impl_k_sem_give+0x4e>
    78a0:	20004f2c 	.word	0x20004f2c
    78a4:	0000c2d4 	.word	0x0000c2d4
    78a8:	0000c32d 	.word	0x0000c32d
    78ac:	0000c18a 	.word	0x0000c18a
    78b0:	0000c342 	.word	0x0000c342

000078b4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    78b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78b6:	4604      	mov	r4, r0
    78b8:	4617      	mov	r7, r2
    78ba:	461d      	mov	r5, r3
    78bc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    78c0:	b17b      	cbz	r3, 78e2 <z_impl_k_sem_take+0x2e>
    78c2:	ea52 0305 	orrs.w	r3, r2, r5
    78c6:	d00c      	beq.n	78e2 <z_impl_k_sem_take+0x2e>
    78c8:	4935      	ldr	r1, [pc, #212]	; (79a0 <z_impl_k_sem_take+0xec>)
    78ca:	4a36      	ldr	r2, [pc, #216]	; (79a4 <z_impl_k_sem_take+0xf0>)
    78cc:	4836      	ldr	r0, [pc, #216]	; (79a8 <z_impl_k_sem_take+0xf4>)
    78ce:	2379      	movs	r3, #121	; 0x79
    78d0:	f003 f83f 	bl	a952 <assert_print>
    78d4:	4835      	ldr	r0, [pc, #212]	; (79ac <z_impl_k_sem_take+0xf8>)
    78d6:	f003 f83c 	bl	a952 <assert_print>
    78da:	4832      	ldr	r0, [pc, #200]	; (79a4 <z_impl_k_sem_take+0xf0>)
    78dc:	2179      	movs	r1, #121	; 0x79
    78de:	f003 f831 	bl	a944 <assert_post_action>
    78e2:	f04f 0320 	mov.w	r3, #32
    78e6:	f3ef 8611 	mrs	r6, BASEPRI
    78ea:	f383 8812 	msr	BASEPRI_MAX, r3
    78ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78f2:	482f      	ldr	r0, [pc, #188]	; (79b0 <z_impl_k_sem_take+0xfc>)
    78f4:	f7ff fd8a 	bl	740c <z_spin_lock_valid>
    78f8:	b968      	cbnz	r0, 7916 <z_impl_k_sem_take+0x62>
    78fa:	4a2e      	ldr	r2, [pc, #184]	; (79b4 <z_impl_k_sem_take+0x100>)
    78fc:	492e      	ldr	r1, [pc, #184]	; (79b8 <z_impl_k_sem_take+0x104>)
    78fe:	482a      	ldr	r0, [pc, #168]	; (79a8 <z_impl_k_sem_take+0xf4>)
    7900:	238e      	movs	r3, #142	; 0x8e
    7902:	f003 f826 	bl	a952 <assert_print>
    7906:	492a      	ldr	r1, [pc, #168]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7908:	482c      	ldr	r0, [pc, #176]	; (79bc <z_impl_k_sem_take+0x108>)
    790a:	f003 f822 	bl	a952 <assert_print>
    790e:	4829      	ldr	r0, [pc, #164]	; (79b4 <z_impl_k_sem_take+0x100>)
    7910:	218e      	movs	r1, #142	; 0x8e
    7912:	f003 f817 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7916:	4826      	ldr	r0, [pc, #152]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7918:	f7ff fd96 	bl	7448 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    791c:	68a3      	ldr	r3, [r4, #8]
    791e:	b1d3      	cbz	r3, 7956 <z_impl_k_sem_take+0xa2>
		sem->count--;
    7920:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7922:	4823      	ldr	r0, [pc, #140]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7924:	60a3      	str	r3, [r4, #8]
    7926:	f7ff fd7f 	bl	7428 <z_spin_unlock_valid>
    792a:	b968      	cbnz	r0, 7948 <z_impl_k_sem_take+0x94>
    792c:	4a21      	ldr	r2, [pc, #132]	; (79b4 <z_impl_k_sem_take+0x100>)
    792e:	4924      	ldr	r1, [pc, #144]	; (79c0 <z_impl_k_sem_take+0x10c>)
    7930:	481d      	ldr	r0, [pc, #116]	; (79a8 <z_impl_k_sem_take+0xf4>)
    7932:	23b9      	movs	r3, #185	; 0xb9
    7934:	f003 f80d 	bl	a952 <assert_print>
    7938:	491d      	ldr	r1, [pc, #116]	; (79b0 <z_impl_k_sem_take+0xfc>)
    793a:	4822      	ldr	r0, [pc, #136]	; (79c4 <z_impl_k_sem_take+0x110>)
    793c:	f003 f809 	bl	a952 <assert_print>
    7940:	481c      	ldr	r0, [pc, #112]	; (79b4 <z_impl_k_sem_take+0x100>)
    7942:	21b9      	movs	r1, #185	; 0xb9
    7944:	f002 fffe 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7948:	f386 8811 	msr	BASEPRI, r6
    794c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7950:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7952:	b003      	add	sp, #12
    7954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7956:	ea57 0305 	orrs.w	r3, r7, r5
    795a:	d118      	bne.n	798e <z_impl_k_sem_take+0xda>
    795c:	4814      	ldr	r0, [pc, #80]	; (79b0 <z_impl_k_sem_take+0xfc>)
    795e:	f7ff fd63 	bl	7428 <z_spin_unlock_valid>
    7962:	b968      	cbnz	r0, 7980 <z_impl_k_sem_take+0xcc>
    7964:	4a13      	ldr	r2, [pc, #76]	; (79b4 <z_impl_k_sem_take+0x100>)
    7966:	4916      	ldr	r1, [pc, #88]	; (79c0 <z_impl_k_sem_take+0x10c>)
    7968:	480f      	ldr	r0, [pc, #60]	; (79a8 <z_impl_k_sem_take+0xf4>)
    796a:	23b9      	movs	r3, #185	; 0xb9
    796c:	f002 fff1 	bl	a952 <assert_print>
    7970:	490f      	ldr	r1, [pc, #60]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7972:	4814      	ldr	r0, [pc, #80]	; (79c4 <z_impl_k_sem_take+0x110>)
    7974:	f002 ffed 	bl	a952 <assert_print>
    7978:	480e      	ldr	r0, [pc, #56]	; (79b4 <z_impl_k_sem_take+0x100>)
    797a:	21b9      	movs	r1, #185	; 0xb9
    797c:	f002 ffe2 	bl	a944 <assert_post_action>
    7980:	f386 8811 	msr	BASEPRI, r6
    7984:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7988:	f06f 000f 	mvn.w	r0, #15
    798c:	e7e1      	b.n	7952 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    798e:	e9cd 7500 	strd	r7, r5, [sp]
    7992:	4622      	mov	r2, r4
    7994:	4631      	mov	r1, r6
    7996:	4806      	ldr	r0, [pc, #24]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7998:	f000 fcd0 	bl	833c <z_pend_curr>
	return ret;
    799c:	e7d9      	b.n	7952 <z_impl_k_sem_take+0x9e>
    799e:	bf00      	nop
    79a0:	0000d855 	.word	0x0000d855
    79a4:	0000d835 	.word	0x0000d835
    79a8:	0000c18a 	.word	0x0000c18a
    79ac:	0000d801 	.word	0x0000d801
    79b0:	20004f2c 	.word	0x20004f2c
    79b4:	0000c2d4 	.word	0x0000c2d4
    79b8:	0000c32d 	.word	0x0000c32d
    79bc:	0000c342 	.word	0x0000c342
    79c0:	0000c301 	.word	0x0000c301
    79c4:	0000c318 	.word	0x0000c318

000079c8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    79c8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    79ca:	4d07      	ldr	r5, [pc, #28]	; (79e8 <z_reset_time_slice+0x20>)
    79cc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    79ce:	b154      	cbz	r4, 79e6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    79d0:	f7fe f992 	bl	5cf8 <sys_clock_elapsed>
    79d4:	4b05      	ldr	r3, [pc, #20]	; (79ec <z_reset_time_slice+0x24>)
    79d6:	4404      	add	r4, r0
    79d8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    79da:	6828      	ldr	r0, [r5, #0]
    79dc:	2100      	movs	r1, #0
	}
}
    79de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    79e2:	f001 bb01 	b.w	8fe8 <z_set_timeout_expiry>
}
    79e6:	bd38      	pop	{r3, r4, r5, pc}
    79e8:	20004f38 	.word	0x20004f38
    79ec:	20004f00 	.word	0x20004f00

000079f0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    79f0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    79f2:	4d16      	ldr	r5, [pc, #88]	; (7a4c <update_cache+0x5c>)
    79f4:	462b      	mov	r3, r5
    79f6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79fa:	429c      	cmp	r4, r3
    79fc:	d000      	beq.n	7a00 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    79fe:	b904      	cbnz	r4, 7a02 <update_cache+0x12>
    7a00:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    7a02:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7a04:	b120      	cbz	r0, 7a10 <update_cache+0x20>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7a06:	68ab      	ldr	r3, [r5, #8]
    7a08:	42a3      	cmp	r3, r4
    7a0a:	d11b      	bne.n	7a44 <update_cache+0x54>
			z_reset_time_slice(thread);
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7a0c:	4623      	mov	r3, r4
    7a0e:	e017      	b.n	7a40 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
    7a10:	b963      	cbnz	r3, 7a2c <update_cache+0x3c>
    7a12:	490f      	ldr	r1, [pc, #60]	; (7a50 <update_cache+0x60>)
    7a14:	4a0f      	ldr	r2, [pc, #60]	; (7a54 <update_cache+0x64>)
    7a16:	4810      	ldr	r0, [pc, #64]	; (7a58 <update_cache+0x68>)
    7a18:	2389      	movs	r3, #137	; 0x89
    7a1a:	f002 ff9a 	bl	a952 <assert_print>
    7a1e:	480f      	ldr	r0, [pc, #60]	; (7a5c <update_cache+0x6c>)
    7a20:	f002 ff97 	bl	a952 <assert_print>
    7a24:	480b      	ldr	r0, [pc, #44]	; (7a54 <update_cache+0x64>)
    7a26:	2189      	movs	r1, #137	; 0x89
    7a28:	f002 ff8c 	bl	a944 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    7a2c:	68ab      	ldr	r3, [r5, #8]
    7a2e:	7b5a      	ldrb	r2, [r3, #13]
    7a30:	06d2      	lsls	r2, r2, #27
    7a32:	d1e8      	bne.n	7a06 <update_cache+0x16>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7a34:	69a2      	ldr	r2, [r4, #24]
    7a36:	2a00      	cmp	r2, #0
    7a38:	d1e5      	bne.n	7a06 <update_cache+0x16>
	if (is_preempt(_current) || is_metairq(thread)) {
    7a3a:	89da      	ldrh	r2, [r3, #14]
    7a3c:	2a7f      	cmp	r2, #127	; 0x7f
    7a3e:	d9e2      	bls.n	7a06 <update_cache+0x16>
		_kernel.ready_q.cache = thread;
    7a40:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7a42:	bd38      	pop	{r3, r4, r5, pc}
			z_reset_time_slice(thread);
    7a44:	4620      	mov	r0, r4
    7a46:	f7ff ffbf 	bl	79c8 <z_reset_time_slice>
    7a4a:	e7df      	b.n	7a0c <update_cache+0x1c>
    7a4c:	20004f00 	.word	0x20004f00
    7a50:	0000d8c5 	.word	0x0000d8c5
    7a54:	0000d8a3 	.word	0x0000d8a3
    7a58:	0000c18a 	.word	0x0000c18a
    7a5c:	0000d801 	.word	0x0000d801

00007a60 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
    7a60:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7a62:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7a66:	7b43      	ldrb	r3, [r0, #13]
    7a68:	2a00      	cmp	r2, #0
{
    7a6a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7a6c:	db38      	blt.n	7ae0 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7a6e:	06da      	lsls	r2, r3, #27
    7a70:	d136      	bne.n	7ae0 <ready_thread+0x80>
	return node->next != NULL;
    7a72:	6985      	ldr	r5, [r0, #24]
    7a74:	2d00      	cmp	r5, #0
    7a76:	d133      	bne.n	7ae0 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
    7a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a7c:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7a7e:	4b19      	ldr	r3, [pc, #100]	; (7ae4 <ready_thread+0x84>)
    7a80:	4298      	cmp	r0, r3
    7a82:	d109      	bne.n	7a98 <ready_thread+0x38>
    7a84:	4918      	ldr	r1, [pc, #96]	; (7ae8 <ready_thread+0x88>)
    7a86:	4819      	ldr	r0, [pc, #100]	; (7aec <ready_thread+0x8c>)
    7a88:	4a19      	ldr	r2, [pc, #100]	; (7af0 <ready_thread+0x90>)
    7a8a:	23ba      	movs	r3, #186	; 0xba
    7a8c:	f002 ff61 	bl	a952 <assert_print>
    7a90:	4817      	ldr	r0, [pc, #92]	; (7af0 <ready_thread+0x90>)
    7a92:	21ba      	movs	r1, #186	; 0xba
    7a94:	f002 ff56 	bl	a944 <assert_post_action>
	return list->head == list;
    7a98:	4a16      	ldr	r2, [pc, #88]	; (7af4 <ready_thread+0x94>)
    7a9a:	4613      	mov	r3, r2
    7a9c:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7aa0:	4299      	cmp	r1, r3
    7aa2:	bf18      	it	ne
    7aa4:	460d      	movne	r5, r1
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7aa6:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7aa8:	b925      	cbnz	r5, 7ab4 <ready_thread+0x54>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7aaa:	e9c4 3100 	strd	r3, r1, [r4]

	tail->next = node;
    7aae:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7ab0:	6254      	str	r4, [r2, #36]	; 0x24
}
    7ab2:	e00c      	b.n	7ace <ready_thread+0x6e>
	int32_t b1 = thread_1->base.prio;
    7ab4:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7ab8:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    7abc:	42b0      	cmp	r0, r6
    7abe:	d00b      	beq.n	7ad8 <ready_thread+0x78>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7ac0:	4286      	cmp	r6, r0
    7ac2:	dd09      	ble.n	7ad8 <ready_thread+0x78>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    7ac4:	686b      	ldr	r3, [r5, #4]

	node->prev = prev;
	node->next = successor;
    7ac6:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    7aca:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7acc:	606c      	str	r4, [r5, #4]
		update_cache(0);
#if defined(CONFIG_SMP) &&  defined(CONFIG_SCHED_IPI_SUPPORTED)
		arch_sched_ipi();
#endif
	}
}
    7ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7ad2:	2000      	movs	r0, #0
    7ad4:	f7ff bf8c 	b.w	79f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7ad8:	428d      	cmp	r5, r1
    7ada:	d0e6      	beq.n	7aaa <ready_thread+0x4a>
    7adc:	682d      	ldr	r5, [r5, #0]
    7ade:	e7e3      	b.n	7aa8 <ready_thread+0x48>
}
    7ae0:	bd70      	pop	{r4, r5, r6, pc}
    7ae2:	bf00      	nop
    7ae4:	200046c0 	.word	0x200046c0
    7ae8:	0000d8ec 	.word	0x0000d8ec
    7aec:	0000c18a 	.word	0x0000c18a
    7af0:	0000d8a3 	.word	0x0000d8a3
    7af4:	20004f00 	.word	0x20004f00

00007af8 <k_sched_time_slice_set>:
{
    7af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7afa:	4604      	mov	r4, r0
    7afc:	460d      	mov	r5, r1
	__asm__ volatile(
    7afe:	f04f 0320 	mov.w	r3, #32
    7b02:	f3ef 8711 	mrs	r7, BASEPRI
    7b06:	f383 8812 	msr	BASEPRI_MAX, r3
    7b0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b0e:	4823      	ldr	r0, [pc, #140]	; (7b9c <k_sched_time_slice_set+0xa4>)
    7b10:	f7ff fc7c 	bl	740c <z_spin_lock_valid>
    7b14:	b968      	cbnz	r0, 7b32 <k_sched_time_slice_set+0x3a>
    7b16:	4a22      	ldr	r2, [pc, #136]	; (7ba0 <k_sched_time_slice_set+0xa8>)
    7b18:	4922      	ldr	r1, [pc, #136]	; (7ba4 <k_sched_time_slice_set+0xac>)
    7b1a:	4823      	ldr	r0, [pc, #140]	; (7ba8 <k_sched_time_slice_set+0xb0>)
    7b1c:	238e      	movs	r3, #142	; 0x8e
    7b1e:	f002 ff18 	bl	a952 <assert_print>
    7b22:	491e      	ldr	r1, [pc, #120]	; (7b9c <k_sched_time_slice_set+0xa4>)
    7b24:	4821      	ldr	r0, [pc, #132]	; (7bac <k_sched_time_slice_set+0xb4>)
    7b26:	f002 ff14 	bl	a952 <assert_print>
    7b2a:	481d      	ldr	r0, [pc, #116]	; (7ba0 <k_sched_time_slice_set+0xa8>)
    7b2c:	218e      	movs	r1, #142	; 0x8e
    7b2e:	f002 ff09 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b32:	481a      	ldr	r0, [pc, #104]	; (7b9c <k_sched_time_slice_set+0xa4>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    7b34:	2600      	movs	r6, #0
    7b36:	f7ff fc87 	bl	7448 <z_spin_lock_set_owner>
    7b3a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    7b3e:	f240 30e7 	movw	r0, #999	; 0x3e7
    7b42:	4631      	mov	r1, r6
    7b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7b48:	2300      	movs	r3, #0
    7b4a:	fbe4 010c 	umlal	r0, r1, r4, ip
    7b4e:	f7f8 ff45 	bl	9dc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7b52:	42b4      	cmp	r4, r6
    7b54:	dd02      	ble.n	7b5c <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    7b56:	2802      	cmp	r0, #2
    7b58:	bfb8      	it	lt
    7b5a:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7b5c:	4a14      	ldr	r2, [pc, #80]	; (7bb0 <k_sched_time_slice_set+0xb8>)
		_current_cpu->slice_ticks = 0;
    7b5e:	4b15      	ldr	r3, [pc, #84]	; (7bb4 <k_sched_time_slice_set+0xbc>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7b60:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    7b62:	4a15      	ldr	r2, [pc, #84]	; (7bb8 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    7b64:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    7b66:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    7b68:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    7b6a:	f7ff ff2d 	bl	79c8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b6e:	480b      	ldr	r0, [pc, #44]	; (7b9c <k_sched_time_slice_set+0xa4>)
    7b70:	f7ff fc5a 	bl	7428 <z_spin_unlock_valid>
    7b74:	b968      	cbnz	r0, 7b92 <k_sched_time_slice_set+0x9a>
    7b76:	4a0a      	ldr	r2, [pc, #40]	; (7ba0 <k_sched_time_slice_set+0xa8>)
    7b78:	4910      	ldr	r1, [pc, #64]	; (7bbc <k_sched_time_slice_set+0xc4>)
    7b7a:	480b      	ldr	r0, [pc, #44]	; (7ba8 <k_sched_time_slice_set+0xb0>)
    7b7c:	23b9      	movs	r3, #185	; 0xb9
    7b7e:	f002 fee8 	bl	a952 <assert_print>
    7b82:	4906      	ldr	r1, [pc, #24]	; (7b9c <k_sched_time_slice_set+0xa4>)
    7b84:	480e      	ldr	r0, [pc, #56]	; (7bc0 <k_sched_time_slice_set+0xc8>)
    7b86:	f002 fee4 	bl	a952 <assert_print>
    7b8a:	4805      	ldr	r0, [pc, #20]	; (7ba0 <k_sched_time_slice_set+0xa8>)
    7b8c:	21b9      	movs	r1, #185	; 0xb9
    7b8e:	f002 fed9 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7b92:	f387 8811 	msr	BASEPRI, r7
    7b96:	f3bf 8f6f 	isb	sy
}
    7b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b9c:	20004f3c 	.word	0x20004f3c
    7ba0:	0000c2d4 	.word	0x0000c2d4
    7ba4:	0000c32d 	.word	0x0000c32d
    7ba8:	0000c18a 	.word	0x0000c18a
    7bac:	0000c342 	.word	0x0000c342
    7bb0:	20004f38 	.word	0x20004f38
    7bb4:	20004f00 	.word	0x20004f00
    7bb8:	20004f34 	.word	0x20004f34
    7bbc:	0000c301 	.word	0x0000c301
    7bc0:	0000c318 	.word	0x0000c318

00007bc4 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    7bc4:	b538      	push	{r3, r4, r5, lr}
    7bc6:	4604      	mov	r4, r0
	__asm__ volatile(
    7bc8:	f04f 0320 	mov.w	r3, #32
    7bcc:	f3ef 8511 	mrs	r5, BASEPRI
    7bd0:	f383 8812 	msr	BASEPRI_MAX, r3
    7bd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bd8:	4817      	ldr	r0, [pc, #92]	; (7c38 <z_ready_thread+0x74>)
    7bda:	f7ff fc17 	bl	740c <z_spin_lock_valid>
    7bde:	b968      	cbnz	r0, 7bfc <z_ready_thread+0x38>
    7be0:	4a16      	ldr	r2, [pc, #88]	; (7c3c <z_ready_thread+0x78>)
    7be2:	4917      	ldr	r1, [pc, #92]	; (7c40 <z_ready_thread+0x7c>)
    7be4:	4817      	ldr	r0, [pc, #92]	; (7c44 <z_ready_thread+0x80>)
    7be6:	238e      	movs	r3, #142	; 0x8e
    7be8:	f002 feb3 	bl	a952 <assert_print>
    7bec:	4912      	ldr	r1, [pc, #72]	; (7c38 <z_ready_thread+0x74>)
    7bee:	4816      	ldr	r0, [pc, #88]	; (7c48 <z_ready_thread+0x84>)
    7bf0:	f002 feaf 	bl	a952 <assert_print>
    7bf4:	4811      	ldr	r0, [pc, #68]	; (7c3c <z_ready_thread+0x78>)
    7bf6:	218e      	movs	r1, #142	; 0x8e
    7bf8:	f002 fea4 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7bfc:	480e      	ldr	r0, [pc, #56]	; (7c38 <z_ready_thread+0x74>)
    7bfe:	f7ff fc23 	bl	7448 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    7c02:	4620      	mov	r0, r4
    7c04:	f7ff ff2c 	bl	7a60 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c08:	480b      	ldr	r0, [pc, #44]	; (7c38 <z_ready_thread+0x74>)
    7c0a:	f7ff fc0d 	bl	7428 <z_spin_unlock_valid>
    7c0e:	b968      	cbnz	r0, 7c2c <z_ready_thread+0x68>
    7c10:	4a0a      	ldr	r2, [pc, #40]	; (7c3c <z_ready_thread+0x78>)
    7c12:	490e      	ldr	r1, [pc, #56]	; (7c4c <z_ready_thread+0x88>)
    7c14:	480b      	ldr	r0, [pc, #44]	; (7c44 <z_ready_thread+0x80>)
    7c16:	23b9      	movs	r3, #185	; 0xb9
    7c18:	f002 fe9b 	bl	a952 <assert_print>
    7c1c:	4906      	ldr	r1, [pc, #24]	; (7c38 <z_ready_thread+0x74>)
    7c1e:	480c      	ldr	r0, [pc, #48]	; (7c50 <z_ready_thread+0x8c>)
    7c20:	f002 fe97 	bl	a952 <assert_print>
    7c24:	4805      	ldr	r0, [pc, #20]	; (7c3c <z_ready_thread+0x78>)
    7c26:	21b9      	movs	r1, #185	; 0xb9
    7c28:	f002 fe8c 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7c2c:	f385 8811 	msr	BASEPRI, r5
    7c30:	f3bf 8f6f 	isb	sy
		}
	}
}
    7c34:	bd38      	pop	{r3, r4, r5, pc}
    7c36:	bf00      	nop
    7c38:	20004f3c 	.word	0x20004f3c
    7c3c:	0000c2d4 	.word	0x0000c2d4
    7c40:	0000c32d 	.word	0x0000c32d
    7c44:	0000c18a 	.word	0x0000c18a
    7c48:	0000c342 	.word	0x0000c342
    7c4c:	0000c301 	.word	0x0000c301
    7c50:	0000c318 	.word	0x0000c318

00007c54 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    7c54:	b538      	push	{r3, r4, r5, lr}
    7c56:	4604      	mov	r4, r0
	__asm__ volatile(
    7c58:	f04f 0320 	mov.w	r3, #32
    7c5c:	f3ef 8511 	mrs	r5, BASEPRI
    7c60:	f383 8812 	msr	BASEPRI_MAX, r3
    7c64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c68:	4817      	ldr	r0, [pc, #92]	; (7cc8 <z_unpend_thread_no_timeout+0x74>)
    7c6a:	f7ff fbcf 	bl	740c <z_spin_lock_valid>
    7c6e:	b968      	cbnz	r0, 7c8c <z_unpend_thread_no_timeout+0x38>
    7c70:	4a16      	ldr	r2, [pc, #88]	; (7ccc <z_unpend_thread_no_timeout+0x78>)
    7c72:	4917      	ldr	r1, [pc, #92]	; (7cd0 <z_unpend_thread_no_timeout+0x7c>)
    7c74:	4817      	ldr	r0, [pc, #92]	; (7cd4 <z_unpend_thread_no_timeout+0x80>)
    7c76:	238e      	movs	r3, #142	; 0x8e
    7c78:	f002 fe6b 	bl	a952 <assert_print>
    7c7c:	4912      	ldr	r1, [pc, #72]	; (7cc8 <z_unpend_thread_no_timeout+0x74>)
    7c7e:	4816      	ldr	r0, [pc, #88]	; (7cd8 <z_unpend_thread_no_timeout+0x84>)
    7c80:	f002 fe67 	bl	a952 <assert_print>
    7c84:	4811      	ldr	r0, [pc, #68]	; (7ccc <z_unpend_thread_no_timeout+0x78>)
    7c86:	218e      	movs	r1, #142	; 0x8e
    7c88:	f002 fe5c 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c8c:	480e      	ldr	r0, [pc, #56]	; (7cc8 <z_unpend_thread_no_timeout+0x74>)
    7c8e:	f7ff fbdb 	bl	7448 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    7c92:	4620      	mov	r0, r4
    7c94:	f000 fc82 	bl	859c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c98:	480b      	ldr	r0, [pc, #44]	; (7cc8 <z_unpend_thread_no_timeout+0x74>)
    7c9a:	f7ff fbc5 	bl	7428 <z_spin_unlock_valid>
    7c9e:	b968      	cbnz	r0, 7cbc <z_unpend_thread_no_timeout+0x68>
    7ca0:	4a0a      	ldr	r2, [pc, #40]	; (7ccc <z_unpend_thread_no_timeout+0x78>)
    7ca2:	490e      	ldr	r1, [pc, #56]	; (7cdc <z_unpend_thread_no_timeout+0x88>)
    7ca4:	480b      	ldr	r0, [pc, #44]	; (7cd4 <z_unpend_thread_no_timeout+0x80>)
    7ca6:	23b9      	movs	r3, #185	; 0xb9
    7ca8:	f002 fe53 	bl	a952 <assert_print>
    7cac:	4906      	ldr	r1, [pc, #24]	; (7cc8 <z_unpend_thread_no_timeout+0x74>)
    7cae:	480c      	ldr	r0, [pc, #48]	; (7ce0 <z_unpend_thread_no_timeout+0x8c>)
    7cb0:	f002 fe4f 	bl	a952 <assert_print>
    7cb4:	4805      	ldr	r0, [pc, #20]	; (7ccc <z_unpend_thread_no_timeout+0x78>)
    7cb6:	21b9      	movs	r1, #185	; 0xb9
    7cb8:	f002 fe44 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7cbc:	f385 8811 	msr	BASEPRI, r5
    7cc0:	f3bf 8f6f 	isb	sy
	}
}
    7cc4:	bd38      	pop	{r3, r4, r5, pc}
    7cc6:	bf00      	nop
    7cc8:	20004f3c 	.word	0x20004f3c
    7ccc:	0000c2d4 	.word	0x0000c2d4
    7cd0:	0000c32d 	.word	0x0000c32d
    7cd4:	0000c18a 	.word	0x0000c18a
    7cd8:	0000c342 	.word	0x0000c342
    7cdc:	0000c301 	.word	0x0000c301
    7ce0:	0000c318 	.word	0x0000c318

00007ce4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7ce4:	b538      	push	{r3, r4, r5, lr}
    7ce6:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7ce8:	460d      	mov	r5, r1
    7cea:	b9e9      	cbnz	r1, 7d28 <z_reschedule+0x44>
    7cec:	f3ef 8305 	mrs	r3, IPSR
    7cf0:	b9d3      	cbnz	r3, 7d28 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    7cf2:	4b19      	ldr	r3, [pc, #100]	; (7d58 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    7cf4:	69da      	ldr	r2, [r3, #28]
    7cf6:	689b      	ldr	r3, [r3, #8]
    7cf8:	429a      	cmp	r2, r3
    7cfa:	d015      	beq.n	7d28 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cfc:	f7ff fb94 	bl	7428 <z_spin_unlock_valid>
    7d00:	b968      	cbnz	r0, 7d1e <z_reschedule+0x3a>
    7d02:	4a16      	ldr	r2, [pc, #88]	; (7d5c <z_reschedule+0x78>)
    7d04:	4916      	ldr	r1, [pc, #88]	; (7d60 <z_reschedule+0x7c>)
    7d06:	4817      	ldr	r0, [pc, #92]	; (7d64 <z_reschedule+0x80>)
    7d08:	23d0      	movs	r3, #208	; 0xd0
    7d0a:	f002 fe22 	bl	a952 <assert_print>
    7d0e:	4816      	ldr	r0, [pc, #88]	; (7d68 <z_reschedule+0x84>)
    7d10:	4621      	mov	r1, r4
    7d12:	f002 fe1e 	bl	a952 <assert_print>
    7d16:	4811      	ldr	r0, [pc, #68]	; (7d5c <z_reschedule+0x78>)
    7d18:	21d0      	movs	r1, #208	; 0xd0
    7d1a:	f002 fe13 	bl	a944 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    7d22:	2000      	movs	r0, #0
    7d24:	f7fb be18 	b.w	3958 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d28:	4620      	mov	r0, r4
    7d2a:	f7ff fb7d 	bl	7428 <z_spin_unlock_valid>
    7d2e:	b968      	cbnz	r0, 7d4c <z_reschedule+0x68>
    7d30:	4a0a      	ldr	r2, [pc, #40]	; (7d5c <z_reschedule+0x78>)
    7d32:	490b      	ldr	r1, [pc, #44]	; (7d60 <z_reschedule+0x7c>)
    7d34:	480b      	ldr	r0, [pc, #44]	; (7d64 <z_reschedule+0x80>)
    7d36:	23b9      	movs	r3, #185	; 0xb9
    7d38:	f002 fe0b 	bl	a952 <assert_print>
    7d3c:	480a      	ldr	r0, [pc, #40]	; (7d68 <z_reschedule+0x84>)
    7d3e:	4621      	mov	r1, r4
    7d40:	f002 fe07 	bl	a952 <assert_print>
    7d44:	4805      	ldr	r0, [pc, #20]	; (7d5c <z_reschedule+0x78>)
    7d46:	21b9      	movs	r1, #185	; 0xb9
    7d48:	f002 fdfc 	bl	a944 <assert_post_action>
    7d4c:	f385 8811 	msr	BASEPRI, r5
    7d50:	f3bf 8f6f 	isb	sy
    7d54:	bd38      	pop	{r3, r4, r5, pc}
    7d56:	bf00      	nop
    7d58:	20004f00 	.word	0x20004f00
    7d5c:	0000c2d4 	.word	0x0000c2d4
    7d60:	0000c301 	.word	0x0000c301
    7d64:	0000c18a 	.word	0x0000c18a
    7d68:	0000c318 	.word	0x0000c318

00007d6c <z_sched_start>:
{
    7d6c:	b538      	push	{r3, r4, r5, lr}
    7d6e:	4604      	mov	r4, r0
	__asm__ volatile(
    7d70:	f04f 0320 	mov.w	r3, #32
    7d74:	f3ef 8511 	mrs	r5, BASEPRI
    7d78:	f383 8812 	msr	BASEPRI_MAX, r3
    7d7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d80:	481d      	ldr	r0, [pc, #116]	; (7df8 <z_sched_start+0x8c>)
    7d82:	f7ff fb43 	bl	740c <z_spin_lock_valid>
    7d86:	b968      	cbnz	r0, 7da4 <z_sched_start+0x38>
    7d88:	4a1c      	ldr	r2, [pc, #112]	; (7dfc <z_sched_start+0x90>)
    7d8a:	491d      	ldr	r1, [pc, #116]	; (7e00 <z_sched_start+0x94>)
    7d8c:	481d      	ldr	r0, [pc, #116]	; (7e04 <z_sched_start+0x98>)
    7d8e:	238e      	movs	r3, #142	; 0x8e
    7d90:	f002 fddf 	bl	a952 <assert_print>
    7d94:	4918      	ldr	r1, [pc, #96]	; (7df8 <z_sched_start+0x8c>)
    7d96:	481c      	ldr	r0, [pc, #112]	; (7e08 <z_sched_start+0x9c>)
    7d98:	f002 fddb 	bl	a952 <assert_print>
    7d9c:	4817      	ldr	r0, [pc, #92]	; (7dfc <z_sched_start+0x90>)
    7d9e:	218e      	movs	r1, #142	; 0x8e
    7da0:	f002 fdd0 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7da4:	4814      	ldr	r0, [pc, #80]	; (7df8 <z_sched_start+0x8c>)
    7da6:	f7ff fb4f 	bl	7448 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    7daa:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    7dac:	075a      	lsls	r2, r3, #29
    7dae:	d416      	bmi.n	7dde <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7db0:	4811      	ldr	r0, [pc, #68]	; (7df8 <z_sched_start+0x8c>)
    7db2:	f7ff fb39 	bl	7428 <z_spin_unlock_valid>
    7db6:	b968      	cbnz	r0, 7dd4 <z_sched_start+0x68>
    7db8:	4a10      	ldr	r2, [pc, #64]	; (7dfc <z_sched_start+0x90>)
    7dba:	4914      	ldr	r1, [pc, #80]	; (7e0c <z_sched_start+0xa0>)
    7dbc:	4811      	ldr	r0, [pc, #68]	; (7e04 <z_sched_start+0x98>)
    7dbe:	23b9      	movs	r3, #185	; 0xb9
    7dc0:	f002 fdc7 	bl	a952 <assert_print>
    7dc4:	490c      	ldr	r1, [pc, #48]	; (7df8 <z_sched_start+0x8c>)
    7dc6:	4812      	ldr	r0, [pc, #72]	; (7e10 <z_sched_start+0xa4>)
    7dc8:	f002 fdc3 	bl	a952 <assert_print>
    7dcc:	480b      	ldr	r0, [pc, #44]	; (7dfc <z_sched_start+0x90>)
    7dce:	21b9      	movs	r1, #185	; 0xb9
    7dd0:	f002 fdb8 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7dd4:	f385 8811 	msr	BASEPRI, r5
    7dd8:	f3bf 8f6f 	isb	sy
}
    7ddc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7dde:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    7de2:	4620      	mov	r0, r4
    7de4:	7363      	strb	r3, [r4, #13]
    7de6:	f7ff fe3b 	bl	7a60 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7dea:	4629      	mov	r1, r5
    7dec:	4802      	ldr	r0, [pc, #8]	; (7df8 <z_sched_start+0x8c>)
}
    7dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    7df2:	f7ff bf77 	b.w	7ce4 <z_reschedule>
    7df6:	bf00      	nop
    7df8:	20004f3c 	.word	0x20004f3c
    7dfc:	0000c2d4 	.word	0x0000c2d4
    7e00:	0000c32d 	.word	0x0000c32d
    7e04:	0000c18a 	.word	0x0000c18a
    7e08:	0000c342 	.word	0x0000c342
    7e0c:	0000c301 	.word	0x0000c301
    7e10:	0000c318 	.word	0x0000c318

00007e14 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7e14:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7e16:	f04f 0320 	mov.w	r3, #32
    7e1a:	f3ef 8511 	mrs	r5, BASEPRI
    7e1e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e26:	4829      	ldr	r0, [pc, #164]	; (7ecc <k_sched_lock+0xb8>)
    7e28:	f7ff faf0 	bl	740c <z_spin_lock_valid>
    7e2c:	b968      	cbnz	r0, 7e4a <k_sched_lock+0x36>
    7e2e:	4a28      	ldr	r2, [pc, #160]	; (7ed0 <k_sched_lock+0xbc>)
    7e30:	4928      	ldr	r1, [pc, #160]	; (7ed4 <k_sched_lock+0xc0>)
    7e32:	4829      	ldr	r0, [pc, #164]	; (7ed8 <k_sched_lock+0xc4>)
    7e34:	238e      	movs	r3, #142	; 0x8e
    7e36:	f002 fd8c 	bl	a952 <assert_print>
    7e3a:	4924      	ldr	r1, [pc, #144]	; (7ecc <k_sched_lock+0xb8>)
    7e3c:	4827      	ldr	r0, [pc, #156]	; (7edc <k_sched_lock+0xc8>)
    7e3e:	f002 fd88 	bl	a952 <assert_print>
    7e42:	4823      	ldr	r0, [pc, #140]	; (7ed0 <k_sched_lock+0xbc>)
    7e44:	218e      	movs	r1, #142	; 0x8e
    7e46:	f002 fd7d 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    7e4a:	4820      	ldr	r0, [pc, #128]	; (7ecc <k_sched_lock+0xb8>)
    7e4c:	f7ff fafc 	bl	7448 <z_spin_lock_set_owner>
    7e50:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7e54:	b163      	cbz	r3, 7e70 <k_sched_lock+0x5c>
    7e56:	4922      	ldr	r1, [pc, #136]	; (7ee0 <k_sched_lock+0xcc>)
    7e58:	4a22      	ldr	r2, [pc, #136]	; (7ee4 <k_sched_lock+0xd0>)
    7e5a:	481f      	ldr	r0, [pc, #124]	; (7ed8 <k_sched_lock+0xc4>)
    7e5c:	23fd      	movs	r3, #253	; 0xfd
    7e5e:	f002 fd78 	bl	a952 <assert_print>
    7e62:	4821      	ldr	r0, [pc, #132]	; (7ee8 <k_sched_lock+0xd4>)
    7e64:	f002 fd75 	bl	a952 <assert_print>
    7e68:	481e      	ldr	r0, [pc, #120]	; (7ee4 <k_sched_lock+0xd0>)
    7e6a:	21fd      	movs	r1, #253	; 0xfd
    7e6c:	f002 fd6a 	bl	a944 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7e70:	4c1e      	ldr	r4, [pc, #120]	; (7eec <k_sched_lock+0xd8>)
    7e72:	68a3      	ldr	r3, [r4, #8]
    7e74:	7bdb      	ldrb	r3, [r3, #15]
    7e76:	2b01      	cmp	r3, #1
    7e78:	d10c      	bne.n	7e94 <k_sched_lock+0x80>
    7e7a:	491d      	ldr	r1, [pc, #116]	; (7ef0 <k_sched_lock+0xdc>)
    7e7c:	4a19      	ldr	r2, [pc, #100]	; (7ee4 <k_sched_lock+0xd0>)
    7e7e:	4816      	ldr	r0, [pc, #88]	; (7ed8 <k_sched_lock+0xc4>)
    7e80:	23fe      	movs	r3, #254	; 0xfe
    7e82:	f002 fd66 	bl	a952 <assert_print>
    7e86:	4818      	ldr	r0, [pc, #96]	; (7ee8 <k_sched_lock+0xd4>)
    7e88:	f002 fd63 	bl	a952 <assert_print>
    7e8c:	4815      	ldr	r0, [pc, #84]	; (7ee4 <k_sched_lock+0xd0>)
    7e8e:	21fe      	movs	r1, #254	; 0xfe
    7e90:	f002 fd58 	bl	a944 <assert_post_action>
	--_current->base.sched_locked;
    7e94:	68a2      	ldr	r2, [r4, #8]
    7e96:	7bd3      	ldrb	r3, [r2, #15]
    7e98:	3b01      	subs	r3, #1
    7e9a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e9c:	480b      	ldr	r0, [pc, #44]	; (7ecc <k_sched_lock+0xb8>)
    7e9e:	f7ff fac3 	bl	7428 <z_spin_unlock_valid>
    7ea2:	b968      	cbnz	r0, 7ec0 <k_sched_lock+0xac>
    7ea4:	4a0a      	ldr	r2, [pc, #40]	; (7ed0 <k_sched_lock+0xbc>)
    7ea6:	4913      	ldr	r1, [pc, #76]	; (7ef4 <k_sched_lock+0xe0>)
    7ea8:	480b      	ldr	r0, [pc, #44]	; (7ed8 <k_sched_lock+0xc4>)
    7eaa:	23b9      	movs	r3, #185	; 0xb9
    7eac:	f002 fd51 	bl	a952 <assert_print>
    7eb0:	4906      	ldr	r1, [pc, #24]	; (7ecc <k_sched_lock+0xb8>)
    7eb2:	4811      	ldr	r0, [pc, #68]	; (7ef8 <k_sched_lock+0xe4>)
    7eb4:	f002 fd4d 	bl	a952 <assert_print>
    7eb8:	4805      	ldr	r0, [pc, #20]	; (7ed0 <k_sched_lock+0xbc>)
    7eba:	21b9      	movs	r1, #185	; 0xb9
    7ebc:	f002 fd42 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7ec0:	f385 8811 	msr	BASEPRI, r5
    7ec4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7ec8:	bd38      	pop	{r3, r4, r5, pc}
    7eca:	bf00      	nop
    7ecc:	20004f3c 	.word	0x20004f3c
    7ed0:	0000c2d4 	.word	0x0000c2d4
    7ed4:	0000c32d 	.word	0x0000c32d
    7ed8:	0000c18a 	.word	0x0000c18a
    7edc:	0000c342 	.word	0x0000c342
    7ee0:	0000d6cb 	.word	0x0000d6cb
    7ee4:	0000d7d6 	.word	0x0000d7d6
    7ee8:	0000d801 	.word	0x0000d801
    7eec:	20004f00 	.word	0x20004f00
    7ef0:	0000d804 	.word	0x0000d804
    7ef4:	0000c301 	.word	0x0000c301
    7ef8:	0000c318 	.word	0x0000c318

00007efc <k_sched_unlock>:

void k_sched_unlock(void)
{
    7efc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7efe:	f04f 0320 	mov.w	r3, #32
    7f02:	f3ef 8511 	mrs	r5, BASEPRI
    7f06:	f383 8812 	msr	BASEPRI_MAX, r3
    7f0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f0e:	482d      	ldr	r0, [pc, #180]	; (7fc4 <k_sched_unlock+0xc8>)
    7f10:	f7ff fa7c 	bl	740c <z_spin_lock_valid>
    7f14:	b968      	cbnz	r0, 7f32 <k_sched_unlock+0x36>
    7f16:	4a2c      	ldr	r2, [pc, #176]	; (7fc8 <k_sched_unlock+0xcc>)
    7f18:	492c      	ldr	r1, [pc, #176]	; (7fcc <k_sched_unlock+0xd0>)
    7f1a:	482d      	ldr	r0, [pc, #180]	; (7fd0 <k_sched_unlock+0xd4>)
    7f1c:	238e      	movs	r3, #142	; 0x8e
    7f1e:	f002 fd18 	bl	a952 <assert_print>
    7f22:	4928      	ldr	r1, [pc, #160]	; (7fc4 <k_sched_unlock+0xc8>)
    7f24:	482b      	ldr	r0, [pc, #172]	; (7fd4 <k_sched_unlock+0xd8>)
    7f26:	f002 fd14 	bl	a952 <assert_print>
    7f2a:	4827      	ldr	r0, [pc, #156]	; (7fc8 <k_sched_unlock+0xcc>)
    7f2c:	218e      	movs	r1, #142	; 0x8e
    7f2e:	f002 fd09 	bl	a944 <assert_post_action>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    7f32:	4c29      	ldr	r4, [pc, #164]	; (7fd8 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7f34:	4823      	ldr	r0, [pc, #140]	; (7fc4 <k_sched_unlock+0xc8>)
    7f36:	f7ff fa87 	bl	7448 <z_spin_lock_set_owner>
    7f3a:	68a3      	ldr	r3, [r4, #8]
    7f3c:	7bdb      	ldrb	r3, [r3, #15]
    7f3e:	b973      	cbnz	r3, 7f5e <k_sched_unlock+0x62>
    7f40:	4926      	ldr	r1, [pc, #152]	; (7fdc <k_sched_unlock+0xe0>)
    7f42:	4a27      	ldr	r2, [pc, #156]	; (7fe0 <k_sched_unlock+0xe4>)
    7f44:	4822      	ldr	r0, [pc, #136]	; (7fd0 <k_sched_unlock+0xd4>)
    7f46:	f240 33bb 	movw	r3, #955	; 0x3bb
    7f4a:	f002 fd02 	bl	a952 <assert_print>
    7f4e:	4825      	ldr	r0, [pc, #148]	; (7fe4 <k_sched_unlock+0xe8>)
    7f50:	f002 fcff 	bl	a952 <assert_print>
    7f54:	4822      	ldr	r0, [pc, #136]	; (7fe0 <k_sched_unlock+0xe4>)
    7f56:	f240 31bb 	movw	r1, #955	; 0x3bb
    7f5a:	f002 fcf3 	bl	a944 <assert_post_action>
    7f5e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7f62:	b173      	cbz	r3, 7f82 <k_sched_unlock+0x86>
    7f64:	4920      	ldr	r1, [pc, #128]	; (7fe8 <k_sched_unlock+0xec>)
    7f66:	4a1e      	ldr	r2, [pc, #120]	; (7fe0 <k_sched_unlock+0xe4>)
    7f68:	4819      	ldr	r0, [pc, #100]	; (7fd0 <k_sched_unlock+0xd4>)
    7f6a:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    7f6e:	f002 fcf0 	bl	a952 <assert_print>
    7f72:	481c      	ldr	r0, [pc, #112]	; (7fe4 <k_sched_unlock+0xe8>)
    7f74:	f002 fced 	bl	a952 <assert_print>
    7f78:	4819      	ldr	r0, [pc, #100]	; (7fe0 <k_sched_unlock+0xe4>)
    7f7a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7f7e:	f002 fce1 	bl	a944 <assert_post_action>

		++_current->base.sched_locked;
    7f82:	68a2      	ldr	r2, [r4, #8]
    7f84:	7bd3      	ldrb	r3, [r2, #15]
    7f86:	3301      	adds	r3, #1
		update_cache(0);
    7f88:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7f8a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7f8c:	f7ff fd30 	bl	79f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f90:	480c      	ldr	r0, [pc, #48]	; (7fc4 <k_sched_unlock+0xc8>)
    7f92:	f7ff fa49 	bl	7428 <z_spin_unlock_valid>
    7f96:	b968      	cbnz	r0, 7fb4 <k_sched_unlock+0xb8>
    7f98:	4a0b      	ldr	r2, [pc, #44]	; (7fc8 <k_sched_unlock+0xcc>)
    7f9a:	4914      	ldr	r1, [pc, #80]	; (7fec <k_sched_unlock+0xf0>)
    7f9c:	480c      	ldr	r0, [pc, #48]	; (7fd0 <k_sched_unlock+0xd4>)
    7f9e:	23b9      	movs	r3, #185	; 0xb9
    7fa0:	f002 fcd7 	bl	a952 <assert_print>
    7fa4:	4907      	ldr	r1, [pc, #28]	; (7fc4 <k_sched_unlock+0xc8>)
    7fa6:	4812      	ldr	r0, [pc, #72]	; (7ff0 <k_sched_unlock+0xf4>)
    7fa8:	f002 fcd3 	bl	a952 <assert_print>
    7fac:	4806      	ldr	r0, [pc, #24]	; (7fc8 <k_sched_unlock+0xcc>)
    7fae:	21b9      	movs	r1, #185	; 0xb9
    7fb0:	f002 fcc8 	bl	a944 <assert_post_action>
	__asm__ volatile(
    7fb4:	f385 8811 	msr	BASEPRI, r5
    7fb8:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    7fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7fc0:	f003 ba2e 	b.w	b420 <z_reschedule_unlocked>
    7fc4:	20004f3c 	.word	0x20004f3c
    7fc8:	0000c2d4 	.word	0x0000c2d4
    7fcc:	0000c32d 	.word	0x0000c32d
    7fd0:	0000c18a 	.word	0x0000c18a
    7fd4:	0000c342 	.word	0x0000c342
    7fd8:	20004f00 	.word	0x20004f00
    7fdc:	0000d90d 	.word	0x0000d90d
    7fe0:	0000d8a3 	.word	0x0000d8a3
    7fe4:	0000d801 	.word	0x0000d801
    7fe8:	0000d6cb 	.word	0x0000d6cb
    7fec:	0000c301 	.word	0x0000c301
    7ff0:	0000c318 	.word	0x0000c318

00007ff4 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7ff4:	4b0c      	ldr	r3, [pc, #48]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7ff6:	4299      	cmp	r1, r3
{
    7ff8:	b510      	push	{r4, lr}
    7ffa:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7ffc:	d10b      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7ffe:	490b      	ldr	r1, [pc, #44]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    8000:	480b      	ldr	r0, [pc, #44]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8002:	4a0c      	ldr	r2, [pc, #48]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8004:	f240 433d 	movw	r3, #1085	; 0x43d
    8008:	f002 fca3 	bl	a952 <assert_print>
    800c:	4809      	ldr	r0, [pc, #36]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    800e:	f240 413d 	movw	r1, #1085	; 0x43d
    8012:	f002 fc97 	bl	a944 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8016:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    801a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    801c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    801e:	2300      	movs	r3, #0
	node->prev = NULL;
    8020:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8024:	bd10      	pop	{r4, pc}
    8026:	bf00      	nop
    8028:	200046c0 	.word	0x200046c0
    802c:	0000d8ec 	.word	0x0000d8ec
    8030:	0000c18a 	.word	0x0000c18a
    8034:	0000d8a3 	.word	0x0000d8a3

00008038 <move_thread_to_end_of_prio_q>:
{
    8038:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    803a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    803e:	7b43      	ldrb	r3, [r0, #13]
    8040:	2a00      	cmp	r2, #0
{
    8042:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    8044:	da06      	bge.n	8054 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    804a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    804c:	4601      	mov	r1, r0
    804e:	481d      	ldr	r0, [pc, #116]	; (80c4 <move_thread_to_end_of_prio_q+0x8c>)
    8050:	f7ff ffd0 	bl	7ff4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8054:	7b63      	ldrb	r3, [r4, #13]
    8056:	f063 037f 	orn	r3, r3, #127	; 0x7f
    805a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    805c:	4b1a      	ldr	r3, [pc, #104]	; (80c8 <move_thread_to_end_of_prio_q+0x90>)
    805e:	429c      	cmp	r4, r3
    8060:	d109      	bne.n	8076 <move_thread_to_end_of_prio_q+0x3e>
    8062:	491a      	ldr	r1, [pc, #104]	; (80cc <move_thread_to_end_of_prio_q+0x94>)
    8064:	481a      	ldr	r0, [pc, #104]	; (80d0 <move_thread_to_end_of_prio_q+0x98>)
    8066:	4a1b      	ldr	r2, [pc, #108]	; (80d4 <move_thread_to_end_of_prio_q+0x9c>)
    8068:	23ba      	movs	r3, #186	; 0xba
    806a:	f002 fc72 	bl	a952 <assert_print>
    806e:	4819      	ldr	r0, [pc, #100]	; (80d4 <move_thread_to_end_of_prio_q+0x9c>)
    8070:	21ba      	movs	r1, #186	; 0xba
    8072:	f002 fc67 	bl	a944 <assert_post_action>
	return list->head == list;
    8076:	4a18      	ldr	r2, [pc, #96]	; (80d8 <move_thread_to_end_of_prio_q+0xa0>)
    8078:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    807a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    807c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8080:	428b      	cmp	r3, r1
    8082:	bf08      	it	eq
    8084:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8086:	b923      	cbnz	r3, 8092 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    8088:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    808c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    808e:	6254      	str	r4, [r2, #36]	; 0x24
}
    8090:	e00c      	b.n	80ac <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    8092:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8096:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    809a:	42b5      	cmp	r5, r6
    809c:	d00e      	beq.n	80bc <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    809e:	42ae      	cmp	r6, r5
    80a0:	dd0c      	ble.n	80bc <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    80a2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    80a4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    80a8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    80aa:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    80ac:	6890      	ldr	r0, [r2, #8]
    80ae:	1b03      	subs	r3, r0, r4
    80b0:	4258      	negs	r0, r3
}
    80b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    80b6:	4158      	adcs	r0, r3
    80b8:	f7ff bc9a 	b.w	79f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    80bc:	4298      	cmp	r0, r3
    80be:	d0e3      	beq.n	8088 <move_thread_to_end_of_prio_q+0x50>
    80c0:	681b      	ldr	r3, [r3, #0]
    80c2:	e7e0      	b.n	8086 <move_thread_to_end_of_prio_q+0x4e>
    80c4:	20004f20 	.word	0x20004f20
    80c8:	200046c0 	.word	0x200046c0
    80cc:	0000d8ec 	.word	0x0000d8ec
    80d0:	0000c18a 	.word	0x0000c18a
    80d4:	0000d8a3 	.word	0x0000d8a3
    80d8:	20004f00 	.word	0x20004f00

000080dc <z_time_slice>:
{
    80dc:	b570      	push	{r4, r5, r6, lr}
    80de:	4605      	mov	r5, r0
	__asm__ volatile(
    80e0:	f04f 0320 	mov.w	r3, #32
    80e4:	f3ef 8611 	mrs	r6, BASEPRI
    80e8:	f383 8812 	msr	BASEPRI_MAX, r3
    80ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80f0:	482a      	ldr	r0, [pc, #168]	; (819c <z_time_slice+0xc0>)
    80f2:	f7ff f98b 	bl	740c <z_spin_lock_valid>
    80f6:	b968      	cbnz	r0, 8114 <z_time_slice+0x38>
    80f8:	4a29      	ldr	r2, [pc, #164]	; (81a0 <z_time_slice+0xc4>)
    80fa:	492a      	ldr	r1, [pc, #168]	; (81a4 <z_time_slice+0xc8>)
    80fc:	482a      	ldr	r0, [pc, #168]	; (81a8 <z_time_slice+0xcc>)
    80fe:	238e      	movs	r3, #142	; 0x8e
    8100:	f002 fc27 	bl	a952 <assert_print>
    8104:	4925      	ldr	r1, [pc, #148]	; (819c <z_time_slice+0xc0>)
    8106:	4829      	ldr	r0, [pc, #164]	; (81ac <z_time_slice+0xd0>)
    8108:	f002 fc23 	bl	a952 <assert_print>
    810c:	4824      	ldr	r0, [pc, #144]	; (81a0 <z_time_slice+0xc4>)
    810e:	218e      	movs	r1, #142	; 0x8e
    8110:	f002 fc18 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8114:	4821      	ldr	r0, [pc, #132]	; (819c <z_time_slice+0xc0>)
    8116:	f7ff f997 	bl	7448 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    811a:	4b25      	ldr	r3, [pc, #148]	; (81b0 <z_time_slice+0xd4>)
    811c:	4a25      	ldr	r2, [pc, #148]	; (81b4 <z_time_slice+0xd8>)
    811e:	689c      	ldr	r4, [r3, #8]
    8120:	6811      	ldr	r1, [r2, #0]
    8122:	428c      	cmp	r4, r1
    8124:	d119      	bne.n	815a <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    8126:	4620      	mov	r0, r4
    8128:	f7ff fc4e 	bl	79c8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    812c:	481b      	ldr	r0, [pc, #108]	; (819c <z_time_slice+0xc0>)
    812e:	f7ff f97b 	bl	7428 <z_spin_unlock_valid>
    8132:	b968      	cbnz	r0, 8150 <z_time_slice+0x74>
    8134:	4a1a      	ldr	r2, [pc, #104]	; (81a0 <z_time_slice+0xc4>)
    8136:	4920      	ldr	r1, [pc, #128]	; (81b8 <z_time_slice+0xdc>)
    8138:	481b      	ldr	r0, [pc, #108]	; (81a8 <z_time_slice+0xcc>)
    813a:	23b9      	movs	r3, #185	; 0xb9
    813c:	f002 fc09 	bl	a952 <assert_print>
    8140:	4916      	ldr	r1, [pc, #88]	; (819c <z_time_slice+0xc0>)
    8142:	481e      	ldr	r0, [pc, #120]	; (81bc <z_time_slice+0xe0>)
    8144:	f002 fc05 	bl	a952 <assert_print>
    8148:	4815      	ldr	r0, [pc, #84]	; (81a0 <z_time_slice+0xc4>)
    814a:	21b9      	movs	r1, #185	; 0xb9
    814c:	f002 fbfa 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8150:	f386 8811 	msr	BASEPRI, r6
    8154:	f3bf 8f6f 	isb	sy
}
    8158:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    815a:	2100      	movs	r1, #0
    815c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    815e:	4a18      	ldr	r2, [pc, #96]	; (81c0 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    8160:	6812      	ldr	r2, [r2, #0]
    8162:	b1c2      	cbz	r2, 8196 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    8164:	89e2      	ldrh	r2, [r4, #14]
    8166:	2a7f      	cmp	r2, #127	; 0x7f
    8168:	d815      	bhi.n	8196 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    816a:	7b62      	ldrb	r2, [r4, #13]
    816c:	06d2      	lsls	r2, r2, #27
    816e:	d112      	bne.n	8196 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8170:	4a14      	ldr	r2, [pc, #80]	; (81c4 <z_time_slice+0xe8>)
    8172:	f994 100e 	ldrsb.w	r1, [r4, #14]
    8176:	6812      	ldr	r2, [r2, #0]
    8178:	4291      	cmp	r1, r2
    817a:	db0c      	blt.n	8196 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    817c:	4a12      	ldr	r2, [pc, #72]	; (81c8 <z_time_slice+0xec>)
    817e:	4294      	cmp	r4, r2
    8180:	d009      	beq.n	8196 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    8182:	691a      	ldr	r2, [r3, #16]
    8184:	42aa      	cmp	r2, r5
    8186:	dc03      	bgt.n	8190 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    8188:	4620      	mov	r0, r4
    818a:	f7ff ff55 	bl	8038 <move_thread_to_end_of_prio_q>
    818e:	e7ca      	b.n	8126 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    8190:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    8192:	611a      	str	r2, [r3, #16]
    8194:	e7ca      	b.n	812c <z_time_slice+0x50>
    8196:	2200      	movs	r2, #0
    8198:	e7fb      	b.n	8192 <z_time_slice+0xb6>
    819a:	bf00      	nop
    819c:	20004f3c 	.word	0x20004f3c
    81a0:	0000c2d4 	.word	0x0000c2d4
    81a4:	0000c32d 	.word	0x0000c32d
    81a8:	0000c18a 	.word	0x0000c18a
    81ac:	0000c342 	.word	0x0000c342
    81b0:	20004f00 	.word	0x20004f00
    81b4:	20004f30 	.word	0x20004f30
    81b8:	0000c301 	.word	0x0000c301
    81bc:	0000c318 	.word	0x0000c318
    81c0:	20004f38 	.word	0x20004f38
    81c4:	20004f34 	.word	0x20004f34
    81c8:	200046c0 	.word	0x200046c0

000081cc <unready_thread>:
{
    81cc:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    81ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
    81d2:	7b43      	ldrb	r3, [r0, #13]
    81d4:	2a00      	cmp	r2, #0
{
    81d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    81d8:	da06      	bge.n	81e8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81de:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    81e0:	4601      	mov	r1, r0
    81e2:	4806      	ldr	r0, [pc, #24]	; (81fc <unready_thread+0x30>)
    81e4:	f7ff ff06 	bl	7ff4 <z_priq_dumb_remove>
	update_cache(thread == _current);
    81e8:	4b05      	ldr	r3, [pc, #20]	; (8200 <unready_thread+0x34>)
    81ea:	6898      	ldr	r0, [r3, #8]
    81ec:	1b03      	subs	r3, r0, r4
    81ee:	4258      	negs	r0, r3
}
    81f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    81f4:	4158      	adcs	r0, r3
    81f6:	f7ff bbfb 	b.w	79f0 <update_cache>
    81fa:	bf00      	nop
    81fc:	20004f20 	.word	0x20004f20
    8200:	20004f00 	.word	0x20004f00

00008204 <add_to_waitq_locked>:
{
    8204:	b538      	push	{r3, r4, r5, lr}
    8206:	4604      	mov	r4, r0
    8208:	460d      	mov	r5, r1
	unready_thread(thread);
    820a:	f7ff ffdf 	bl	81cc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    820e:	7b63      	ldrb	r3, [r4, #13]
    8210:	f043 0302 	orr.w	r3, r3, #2
    8214:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8216:	b34d      	cbz	r5, 826c <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8218:	4b15      	ldr	r3, [pc, #84]	; (8270 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    821a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    821c:	429c      	cmp	r4, r3
    821e:	d109      	bne.n	8234 <add_to_waitq_locked+0x30>
    8220:	4914      	ldr	r1, [pc, #80]	; (8274 <add_to_waitq_locked+0x70>)
    8222:	4815      	ldr	r0, [pc, #84]	; (8278 <add_to_waitq_locked+0x74>)
    8224:	4a15      	ldr	r2, [pc, #84]	; (827c <add_to_waitq_locked+0x78>)
    8226:	23ba      	movs	r3, #186	; 0xba
    8228:	f002 fb93 	bl	a952 <assert_print>
    822c:	4813      	ldr	r0, [pc, #76]	; (827c <add_to_waitq_locked+0x78>)
    822e:	21ba      	movs	r1, #186	; 0xba
    8230:	f002 fb88 	bl	a944 <assert_post_action>
	return list->head == list;
    8234:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8236:	429d      	cmp	r5, r3
    8238:	d109      	bne.n	824e <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    823a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    823c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8240:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8242:	606c      	str	r4, [r5, #4]
}
    8244:	e012      	b.n	826c <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    8246:	686a      	ldr	r2, [r5, #4]
    8248:	4293      	cmp	r3, r2
    824a:	d0f6      	beq.n	823a <add_to_waitq_locked+0x36>
    824c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    824e:	2b00      	cmp	r3, #0
    8250:	d0f3      	beq.n	823a <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    8252:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8256:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    825a:	428a      	cmp	r2, r1
    825c:	d0f3      	beq.n	8246 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    825e:	4291      	cmp	r1, r2
    8260:	ddf1      	ble.n	8246 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    8262:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8264:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8268:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    826a:	605c      	str	r4, [r3, #4]
}
    826c:	bd38      	pop	{r3, r4, r5, pc}
    826e:	bf00      	nop
    8270:	200046c0 	.word	0x200046c0
    8274:	0000d8ec 	.word	0x0000d8ec
    8278:	0000c18a 	.word	0x0000c18a
    827c:	0000d8a3 	.word	0x0000d8a3

00008280 <pend>:
{
    8280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8284:	4604      	mov	r4, r0
    8286:	4688      	mov	r8, r1
    8288:	4616      	mov	r6, r2
    828a:	461d      	mov	r5, r3
	__asm__ volatile(
    828c:	f04f 0320 	mov.w	r3, #32
    8290:	f3ef 8711 	mrs	r7, BASEPRI
    8294:	f383 8812 	msr	BASEPRI_MAX, r3
    8298:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    829c:	481f      	ldr	r0, [pc, #124]	; (831c <pend+0x9c>)
    829e:	f7ff f8b5 	bl	740c <z_spin_lock_valid>
    82a2:	b968      	cbnz	r0, 82c0 <pend+0x40>
    82a4:	4a1e      	ldr	r2, [pc, #120]	; (8320 <pend+0xa0>)
    82a6:	491f      	ldr	r1, [pc, #124]	; (8324 <pend+0xa4>)
    82a8:	481f      	ldr	r0, [pc, #124]	; (8328 <pend+0xa8>)
    82aa:	238e      	movs	r3, #142	; 0x8e
    82ac:	f002 fb51 	bl	a952 <assert_print>
    82b0:	491a      	ldr	r1, [pc, #104]	; (831c <pend+0x9c>)
    82b2:	481e      	ldr	r0, [pc, #120]	; (832c <pend+0xac>)
    82b4:	f002 fb4d 	bl	a952 <assert_print>
    82b8:	4819      	ldr	r0, [pc, #100]	; (8320 <pend+0xa0>)
    82ba:	218e      	movs	r1, #142	; 0x8e
    82bc:	f002 fb42 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    82c0:	4816      	ldr	r0, [pc, #88]	; (831c <pend+0x9c>)
    82c2:	f7ff f8c1 	bl	7448 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    82c6:	4620      	mov	r0, r4
    82c8:	4641      	mov	r1, r8
    82ca:	f7ff ff9b 	bl	8204 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82ce:	4813      	ldr	r0, [pc, #76]	; (831c <pend+0x9c>)
    82d0:	f7ff f8aa 	bl	7428 <z_spin_unlock_valid>
    82d4:	b968      	cbnz	r0, 82f2 <pend+0x72>
    82d6:	4a12      	ldr	r2, [pc, #72]	; (8320 <pend+0xa0>)
    82d8:	4915      	ldr	r1, [pc, #84]	; (8330 <pend+0xb0>)
    82da:	4813      	ldr	r0, [pc, #76]	; (8328 <pend+0xa8>)
    82dc:	23b9      	movs	r3, #185	; 0xb9
    82de:	f002 fb38 	bl	a952 <assert_print>
    82e2:	490e      	ldr	r1, [pc, #56]	; (831c <pend+0x9c>)
    82e4:	4813      	ldr	r0, [pc, #76]	; (8334 <pend+0xb4>)
    82e6:	f002 fb34 	bl	a952 <assert_print>
    82ea:	480d      	ldr	r0, [pc, #52]	; (8320 <pend+0xa0>)
    82ec:	21b9      	movs	r1, #185	; 0xb9
    82ee:	f002 fb29 	bl	a944 <assert_post_action>
	__asm__ volatile(
    82f2:	f387 8811 	msr	BASEPRI, r7
    82f6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    82fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    82fe:	bf08      	it	eq
    8300:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    8304:	d008      	beq.n	8318 <pend+0x98>
    8306:	4632      	mov	r2, r6
    8308:	462b      	mov	r3, r5
    830a:	f104 0018 	add.w	r0, r4, #24
    830e:	490a      	ldr	r1, [pc, #40]	; (8338 <pend+0xb8>)
}
    8310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8314:	f000 bd08 	b.w	8d28 <z_add_timeout>
    8318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    831c:	20004f3c 	.word	0x20004f3c
    8320:	0000c2d4 	.word	0x0000c2d4
    8324:	0000c32d 	.word	0x0000c32d
    8328:	0000c18a 	.word	0x0000c18a
    832c:	0000c342 	.word	0x0000c342
    8330:	0000c301 	.word	0x0000c301
    8334:	0000c318 	.word	0x0000c318
    8338:	000085e1 	.word	0x000085e1

0000833c <z_pend_curr>:
{
    833c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    833e:	4b11      	ldr	r3, [pc, #68]	; (8384 <z_pend_curr+0x48>)
{
    8340:	4604      	mov	r4, r0
	pending_current = _current;
    8342:	6898      	ldr	r0, [r3, #8]
    8344:	4b10      	ldr	r3, [pc, #64]	; (8388 <z_pend_curr+0x4c>)
{
    8346:	460d      	mov	r5, r1
	pending_current = _current;
    8348:	6018      	str	r0, [r3, #0]
{
    834a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    834c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8350:	f7ff ff96 	bl	8280 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8354:	4620      	mov	r0, r4
    8356:	f7ff f867 	bl	7428 <z_spin_unlock_valid>
    835a:	b968      	cbnz	r0, 8378 <z_pend_curr+0x3c>
    835c:	4a0b      	ldr	r2, [pc, #44]	; (838c <z_pend_curr+0x50>)
    835e:	490c      	ldr	r1, [pc, #48]	; (8390 <z_pend_curr+0x54>)
    8360:	480c      	ldr	r0, [pc, #48]	; (8394 <z_pend_curr+0x58>)
    8362:	23d0      	movs	r3, #208	; 0xd0
    8364:	f002 faf5 	bl	a952 <assert_print>
    8368:	480b      	ldr	r0, [pc, #44]	; (8398 <z_pend_curr+0x5c>)
    836a:	4621      	mov	r1, r4
    836c:	f002 faf1 	bl	a952 <assert_print>
    8370:	4806      	ldr	r0, [pc, #24]	; (838c <z_pend_curr+0x50>)
    8372:	21d0      	movs	r1, #208	; 0xd0
    8374:	f002 fae6 	bl	a944 <assert_post_action>
    8378:	4628      	mov	r0, r5
}
    837a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    837e:	f7fb baeb 	b.w	3958 <arch_swap>
    8382:	bf00      	nop
    8384:	20004f00 	.word	0x20004f00
    8388:	20004f30 	.word	0x20004f30
    838c:	0000c2d4 	.word	0x0000c2d4
    8390:	0000c301 	.word	0x0000c301
    8394:	0000c18a 	.word	0x0000c18a
    8398:	0000c318 	.word	0x0000c318

0000839c <z_set_prio>:
{
    839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    839e:	4604      	mov	r4, r0
    83a0:	460e      	mov	r6, r1
	__asm__ volatile(
    83a2:	f04f 0320 	mov.w	r3, #32
    83a6:	f3ef 8711 	mrs	r7, BASEPRI
    83aa:	f383 8812 	msr	BASEPRI_MAX, r3
    83ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83b2:	4839      	ldr	r0, [pc, #228]	; (8498 <z_set_prio+0xfc>)
    83b4:	f7ff f82a 	bl	740c <z_spin_lock_valid>
    83b8:	b968      	cbnz	r0, 83d6 <z_set_prio+0x3a>
    83ba:	4a38      	ldr	r2, [pc, #224]	; (849c <z_set_prio+0x100>)
    83bc:	4938      	ldr	r1, [pc, #224]	; (84a0 <z_set_prio+0x104>)
    83be:	4839      	ldr	r0, [pc, #228]	; (84a4 <z_set_prio+0x108>)
    83c0:	238e      	movs	r3, #142	; 0x8e
    83c2:	f002 fac6 	bl	a952 <assert_print>
    83c6:	4934      	ldr	r1, [pc, #208]	; (8498 <z_set_prio+0xfc>)
    83c8:	4837      	ldr	r0, [pc, #220]	; (84a8 <z_set_prio+0x10c>)
    83ca:	f002 fac2 	bl	a952 <assert_print>
    83ce:	4833      	ldr	r0, [pc, #204]	; (849c <z_set_prio+0x100>)
    83d0:	218e      	movs	r1, #142	; 0x8e
    83d2:	f002 fab7 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    83d6:	4830      	ldr	r0, [pc, #192]	; (8498 <z_set_prio+0xfc>)
    83d8:	f7ff f836 	bl	7448 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    83dc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    83de:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    83e0:	b276      	sxtb	r6, r6
    83e2:	d128      	bne.n	8436 <z_set_prio+0x9a>
	return node->next != NULL;
    83e4:	69a5      	ldr	r5, [r4, #24]
    83e6:	bb35      	cbnz	r5, 8436 <z_set_prio+0x9a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83ec:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    83ee:	482f      	ldr	r0, [pc, #188]	; (84ac <z_set_prio+0x110>)
    83f0:	4621      	mov	r1, r4
    83f2:	f7ff fdff 	bl	7ff4 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    83f6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    83f8:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    83fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    83fe:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8400:	4b2b      	ldr	r3, [pc, #172]	; (84b0 <z_set_prio+0x114>)
    8402:	429c      	cmp	r4, r3
    8404:	d109      	bne.n	841a <z_set_prio+0x7e>
    8406:	492b      	ldr	r1, [pc, #172]	; (84b4 <z_set_prio+0x118>)
    8408:	4826      	ldr	r0, [pc, #152]	; (84a4 <z_set_prio+0x108>)
    840a:	4a2b      	ldr	r2, [pc, #172]	; (84b8 <z_set_prio+0x11c>)
    840c:	23ba      	movs	r3, #186	; 0xba
    840e:	f002 faa0 	bl	a952 <assert_print>
    8412:	4829      	ldr	r0, [pc, #164]	; (84b8 <z_set_prio+0x11c>)
    8414:	21ba      	movs	r1, #186	; 0xba
    8416:	f002 fa95 	bl	a944 <assert_post_action>
	return list->head == list;
    841a:	4a28      	ldr	r2, [pc, #160]	; (84bc <z_set_prio+0x120>)
    841c:	4613      	mov	r3, r2
    841e:	f853 1f20 	ldr.w	r1, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8422:	4299      	cmp	r1, r3
    8424:	bf18      	it	ne
    8426:	460d      	movne	r5, r1
	return (node == list->tail) ? NULL : node->next;
    8428:	6a51      	ldr	r1, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    842a:	b9f5      	cbnz	r5, 846a <z_set_prio+0xce>
	node->prev = tail;
    842c:	e9c4 3100 	strd	r3, r1, [r4]
	tail->next = node;
    8430:	600c      	str	r4, [r1, #0]
	list->tail = node;
    8432:	6254      	str	r4, [r2, #36]	; 0x24
}
    8434:	e026      	b.n	8484 <z_set_prio+0xe8>
			thread->base.prio = prio;
    8436:	73a6      	strb	r6, [r4, #14]
    8438:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    843a:	4817      	ldr	r0, [pc, #92]	; (8498 <z_set_prio+0xfc>)
    843c:	f7fe fff4 	bl	7428 <z_spin_unlock_valid>
    8440:	b968      	cbnz	r0, 845e <z_set_prio+0xc2>
    8442:	4a16      	ldr	r2, [pc, #88]	; (849c <z_set_prio+0x100>)
    8444:	491e      	ldr	r1, [pc, #120]	; (84c0 <z_set_prio+0x124>)
    8446:	4817      	ldr	r0, [pc, #92]	; (84a4 <z_set_prio+0x108>)
    8448:	23b9      	movs	r3, #185	; 0xb9
    844a:	f002 fa82 	bl	a952 <assert_print>
    844e:	4912      	ldr	r1, [pc, #72]	; (8498 <z_set_prio+0xfc>)
    8450:	481c      	ldr	r0, [pc, #112]	; (84c4 <z_set_prio+0x128>)
    8452:	f002 fa7e 	bl	a952 <assert_print>
    8456:	4811      	ldr	r0, [pc, #68]	; (849c <z_set_prio+0x100>)
    8458:	21b9      	movs	r1, #185	; 0xb9
    845a:	f002 fa73 	bl	a944 <assert_post_action>
	__asm__ volatile(
    845e:	f387 8811 	msr	BASEPRI, r7
    8462:	f3bf 8f6f 	isb	sy
}
    8466:	4620      	mov	r0, r4
    8468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b1 = thread_1->base.prio;
    846a:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    846e:	f995 600e 	ldrsb.w	r6, [r5, #14]
	if (b1 != b2) {
    8472:	42b0      	cmp	r0, r6
    8474:	d00b      	beq.n	848e <z_set_prio+0xf2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8476:	4286      	cmp	r6, r0
    8478:	dd09      	ble.n	848e <z_set_prio+0xf2>
	sys_dnode_t *const prev = successor->prev;
    847a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    847c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    8480:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8482:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8484:	2001      	movs	r0, #1
    8486:	f7ff fab3 	bl	79f0 <update_cache>
    848a:	2401      	movs	r4, #1
    848c:	e7d5      	b.n	843a <z_set_prio+0x9e>
	return (node == list->tail) ? NULL : node->next;
    848e:	42a9      	cmp	r1, r5
    8490:	d0cc      	beq.n	842c <z_set_prio+0x90>
    8492:	682d      	ldr	r5, [r5, #0]
    8494:	e7c9      	b.n	842a <z_set_prio+0x8e>
    8496:	bf00      	nop
    8498:	20004f3c 	.word	0x20004f3c
    849c:	0000c2d4 	.word	0x0000c2d4
    84a0:	0000c32d 	.word	0x0000c32d
    84a4:	0000c18a 	.word	0x0000c18a
    84a8:	0000c342 	.word	0x0000c342
    84ac:	20004f20 	.word	0x20004f20
    84b0:	200046c0 	.word	0x200046c0
    84b4:	0000d8ec 	.word	0x0000d8ec
    84b8:	0000d8a3 	.word	0x0000d8a3
    84bc:	20004f00 	.word	0x20004f00
    84c0:	0000c301 	.word	0x0000c301
    84c4:	0000c318 	.word	0x0000c318

000084c8 <z_impl_k_thread_suspend>:
{
    84c8:	b570      	push	{r4, r5, r6, lr}
    84ca:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    84cc:	3018      	adds	r0, #24
    84ce:	f000 fcf5 	bl	8ebc <z_abort_timeout>
	__asm__ volatile(
    84d2:	f04f 0320 	mov.w	r3, #32
    84d6:	f3ef 8611 	mrs	r6, BASEPRI
    84da:	f383 8812 	msr	BASEPRI_MAX, r3
    84de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84e2:	4825      	ldr	r0, [pc, #148]	; (8578 <z_impl_k_thread_suspend+0xb0>)
    84e4:	f7fe ff92 	bl	740c <z_spin_lock_valid>
    84e8:	b968      	cbnz	r0, 8506 <z_impl_k_thread_suspend+0x3e>
    84ea:	4a24      	ldr	r2, [pc, #144]	; (857c <z_impl_k_thread_suspend+0xb4>)
    84ec:	4924      	ldr	r1, [pc, #144]	; (8580 <z_impl_k_thread_suspend+0xb8>)
    84ee:	4825      	ldr	r0, [pc, #148]	; (8584 <z_impl_k_thread_suspend+0xbc>)
    84f0:	238e      	movs	r3, #142	; 0x8e
    84f2:	f002 fa2e 	bl	a952 <assert_print>
    84f6:	4920      	ldr	r1, [pc, #128]	; (8578 <z_impl_k_thread_suspend+0xb0>)
    84f8:	4823      	ldr	r0, [pc, #140]	; (8588 <z_impl_k_thread_suspend+0xc0>)
    84fa:	f002 fa2a 	bl	a952 <assert_print>
    84fe:	481f      	ldr	r0, [pc, #124]	; (857c <z_impl_k_thread_suspend+0xb4>)
    8500:	218e      	movs	r1, #142	; 0x8e
    8502:	f002 fa1f 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8506:	481c      	ldr	r0, [pc, #112]	; (8578 <z_impl_k_thread_suspend+0xb0>)
    8508:	f7fe ff9e 	bl	7448 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    850c:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    8510:	7b63      	ldrb	r3, [r4, #13]
    8512:	2a00      	cmp	r2, #0
    8514:	da06      	bge.n	8524 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    851a:	481c      	ldr	r0, [pc, #112]	; (858c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    851c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    851e:	4621      	mov	r1, r4
    8520:	f7ff fd68 	bl	7ff4 <z_priq_dumb_remove>
		update_cache(thread == _current);
    8524:	4d1a      	ldr	r5, [pc, #104]	; (8590 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8526:	7b63      	ldrb	r3, [r4, #13]
    8528:	68a8      	ldr	r0, [r5, #8]
    852a:	f043 0310 	orr.w	r3, r3, #16
    852e:	7363      	strb	r3, [r4, #13]
    8530:	1b03      	subs	r3, r0, r4
    8532:	4258      	negs	r0, r3
    8534:	4158      	adcs	r0, r3
    8536:	f7ff fa5b 	bl	79f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    853a:	480f      	ldr	r0, [pc, #60]	; (8578 <z_impl_k_thread_suspend+0xb0>)
    853c:	f7fe ff74 	bl	7428 <z_spin_unlock_valid>
    8540:	b968      	cbnz	r0, 855e <z_impl_k_thread_suspend+0x96>
    8542:	4a0e      	ldr	r2, [pc, #56]	; (857c <z_impl_k_thread_suspend+0xb4>)
    8544:	4913      	ldr	r1, [pc, #76]	; (8594 <z_impl_k_thread_suspend+0xcc>)
    8546:	480f      	ldr	r0, [pc, #60]	; (8584 <z_impl_k_thread_suspend+0xbc>)
    8548:	23b9      	movs	r3, #185	; 0xb9
    854a:	f002 fa02 	bl	a952 <assert_print>
    854e:	490a      	ldr	r1, [pc, #40]	; (8578 <z_impl_k_thread_suspend+0xb0>)
    8550:	4811      	ldr	r0, [pc, #68]	; (8598 <z_impl_k_thread_suspend+0xd0>)
    8552:	f002 f9fe 	bl	a952 <assert_print>
    8556:	4809      	ldr	r0, [pc, #36]	; (857c <z_impl_k_thread_suspend+0xb4>)
    8558:	21b9      	movs	r1, #185	; 0xb9
    855a:	f002 f9f3 	bl	a944 <assert_post_action>
	__asm__ volatile(
    855e:	f386 8811 	msr	BASEPRI, r6
    8562:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    8566:	68ab      	ldr	r3, [r5, #8]
    8568:	42a3      	cmp	r3, r4
    856a:	d103      	bne.n	8574 <z_impl_k_thread_suspend+0xac>
}
    856c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8570:	f002 bf56 	b.w	b420 <z_reschedule_unlocked>
}
    8574:	bd70      	pop	{r4, r5, r6, pc}
    8576:	bf00      	nop
    8578:	20004f3c 	.word	0x20004f3c
    857c:	0000c2d4 	.word	0x0000c2d4
    8580:	0000c32d 	.word	0x0000c32d
    8584:	0000c18a 	.word	0x0000c18a
    8588:	0000c342 	.word	0x0000c342
    858c:	20004f20 	.word	0x20004f20
    8590:	20004f00 	.word	0x20004f00
    8594:	0000c301 	.word	0x0000c301
    8598:	0000c318 	.word	0x0000c318

0000859c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    859c:	6883      	ldr	r3, [r0, #8]
{
    859e:	b510      	push	{r4, lr}
    85a0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    85a2:	b95b      	cbnz	r3, 85bc <unpend_thread_no_timeout+0x20>
    85a4:	490b      	ldr	r1, [pc, #44]	; (85d4 <unpend_thread_no_timeout+0x38>)
    85a6:	480c      	ldr	r0, [pc, #48]	; (85d8 <unpend_thread_no_timeout+0x3c>)
    85a8:	4a0c      	ldr	r2, [pc, #48]	; (85dc <unpend_thread_no_timeout+0x40>)
    85aa:	f240 23b9 	movw	r3, #697	; 0x2b9
    85ae:	f002 f9d0 	bl	a952 <assert_print>
    85b2:	480a      	ldr	r0, [pc, #40]	; (85dc <unpend_thread_no_timeout+0x40>)
    85b4:	f240 21b9 	movw	r1, #697	; 0x2b9
    85b8:	f002 f9c4 	bl	a944 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    85bc:	68a0      	ldr	r0, [r4, #8]
    85be:	4621      	mov	r1, r4
    85c0:	f7ff fd18 	bl	7ff4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    85c4:	7b63      	ldrb	r3, [r4, #13]
    85c6:	f023 0302 	bic.w	r3, r3, #2
    85ca:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    85cc:	2300      	movs	r3, #0
    85ce:	60a3      	str	r3, [r4, #8]
}
    85d0:	bd10      	pop	{r4, pc}
    85d2:	bf00      	nop
    85d4:	0000d93e 	.word	0x0000d93e
    85d8:	0000c18a 	.word	0x0000c18a
    85dc:	0000d8a3 	.word	0x0000d8a3

000085e0 <z_thread_timeout>:
{
    85e0:	b570      	push	{r4, r5, r6, lr}
    85e2:	4604      	mov	r4, r0
	__asm__ volatile(
    85e4:	f04f 0320 	mov.w	r3, #32
    85e8:	f3ef 8611 	mrs	r6, BASEPRI
    85ec:	f383 8812 	msr	BASEPRI_MAX, r3
    85f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85f4:	4820      	ldr	r0, [pc, #128]	; (8678 <z_thread_timeout+0x98>)
    85f6:	f7fe ff09 	bl	740c <z_spin_lock_valid>
    85fa:	b968      	cbnz	r0, 8618 <z_thread_timeout+0x38>
    85fc:	4a1f      	ldr	r2, [pc, #124]	; (867c <z_thread_timeout+0x9c>)
    85fe:	4920      	ldr	r1, [pc, #128]	; (8680 <z_thread_timeout+0xa0>)
    8600:	4820      	ldr	r0, [pc, #128]	; (8684 <z_thread_timeout+0xa4>)
    8602:	238e      	movs	r3, #142	; 0x8e
    8604:	f002 f9a5 	bl	a952 <assert_print>
    8608:	491b      	ldr	r1, [pc, #108]	; (8678 <z_thread_timeout+0x98>)
    860a:	481f      	ldr	r0, [pc, #124]	; (8688 <z_thread_timeout+0xa8>)
    860c:	f002 f9a1 	bl	a952 <assert_print>
    8610:	481a      	ldr	r0, [pc, #104]	; (867c <z_thread_timeout+0x9c>)
    8612:	218e      	movs	r1, #142	; 0x8e
    8614:	f002 f996 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8618:	4817      	ldr	r0, [pc, #92]	; (8678 <z_thread_timeout+0x98>)
    861a:	f7fe ff15 	bl	7448 <z_spin_lock_set_owner>
		if (!killed) {
    861e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8622:	f013 0f28 	tst.w	r3, #40	; 0x28
    8626:	d110      	bne.n	864a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    8628:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    862c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    8630:	b113      	cbz	r3, 8638 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    8632:	4628      	mov	r0, r5
    8634:	f7ff ffb2 	bl	859c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8638:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    863c:	f023 0314 	bic.w	r3, r3, #20
    8640:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8644:	4628      	mov	r0, r5
    8646:	f7ff fa0b 	bl	7a60 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    864a:	480b      	ldr	r0, [pc, #44]	; (8678 <z_thread_timeout+0x98>)
    864c:	f7fe feec 	bl	7428 <z_spin_unlock_valid>
    8650:	b968      	cbnz	r0, 866e <z_thread_timeout+0x8e>
    8652:	4a0a      	ldr	r2, [pc, #40]	; (867c <z_thread_timeout+0x9c>)
    8654:	490d      	ldr	r1, [pc, #52]	; (868c <z_thread_timeout+0xac>)
    8656:	480b      	ldr	r0, [pc, #44]	; (8684 <z_thread_timeout+0xa4>)
    8658:	23b9      	movs	r3, #185	; 0xb9
    865a:	f002 f97a 	bl	a952 <assert_print>
    865e:	4906      	ldr	r1, [pc, #24]	; (8678 <z_thread_timeout+0x98>)
    8660:	480b      	ldr	r0, [pc, #44]	; (8690 <z_thread_timeout+0xb0>)
    8662:	f002 f976 	bl	a952 <assert_print>
    8666:	4805      	ldr	r0, [pc, #20]	; (867c <z_thread_timeout+0x9c>)
    8668:	21b9      	movs	r1, #185	; 0xb9
    866a:	f002 f96b 	bl	a944 <assert_post_action>
	__asm__ volatile(
    866e:	f386 8811 	msr	BASEPRI, r6
    8672:	f3bf 8f6f 	isb	sy
}
    8676:	bd70      	pop	{r4, r5, r6, pc}
    8678:	20004f3c 	.word	0x20004f3c
    867c:	0000c2d4 	.word	0x0000c2d4
    8680:	0000c32d 	.word	0x0000c32d
    8684:	0000c18a 	.word	0x0000c18a
    8688:	0000c342 	.word	0x0000c342
    868c:	0000c301 	.word	0x0000c301
    8690:	0000c318 	.word	0x0000c318

00008694 <z_unpend1_no_timeout>:
{
    8694:	b570      	push	{r4, r5, r6, lr}
    8696:	4605      	mov	r5, r0
	__asm__ volatile(
    8698:	f04f 0320 	mov.w	r3, #32
    869c:	f3ef 8611 	mrs	r6, BASEPRI
    86a0:	f383 8812 	msr	BASEPRI_MAX, r3
    86a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86a8:	481a      	ldr	r0, [pc, #104]	; (8714 <z_unpend1_no_timeout+0x80>)
    86aa:	f7fe feaf 	bl	740c <z_spin_lock_valid>
    86ae:	b968      	cbnz	r0, 86cc <z_unpend1_no_timeout+0x38>
    86b0:	4a19      	ldr	r2, [pc, #100]	; (8718 <z_unpend1_no_timeout+0x84>)
    86b2:	491a      	ldr	r1, [pc, #104]	; (871c <z_unpend1_no_timeout+0x88>)
    86b4:	481a      	ldr	r0, [pc, #104]	; (8720 <z_unpend1_no_timeout+0x8c>)
    86b6:	238e      	movs	r3, #142	; 0x8e
    86b8:	f002 f94b 	bl	a952 <assert_print>
    86bc:	4915      	ldr	r1, [pc, #84]	; (8714 <z_unpend1_no_timeout+0x80>)
    86be:	4819      	ldr	r0, [pc, #100]	; (8724 <z_unpend1_no_timeout+0x90>)
    86c0:	f002 f947 	bl	a952 <assert_print>
    86c4:	4814      	ldr	r0, [pc, #80]	; (8718 <z_unpend1_no_timeout+0x84>)
    86c6:	218e      	movs	r1, #142	; 0x8e
    86c8:	f002 f93c 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    86cc:	4811      	ldr	r0, [pc, #68]	; (8714 <z_unpend1_no_timeout+0x80>)
    86ce:	f7fe febb 	bl	7448 <z_spin_lock_set_owner>
	return list->head == list;
    86d2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86d4:	42a5      	cmp	r5, r4
    86d6:	d01b      	beq.n	8710 <z_unpend1_no_timeout+0x7c>
		if (thread != NULL) {
    86d8:	b114      	cbz	r4, 86e0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    86da:	4620      	mov	r0, r4
    86dc:	f7ff ff5e 	bl	859c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    86e0:	480c      	ldr	r0, [pc, #48]	; (8714 <z_unpend1_no_timeout+0x80>)
    86e2:	f7fe fea1 	bl	7428 <z_spin_unlock_valid>
    86e6:	b968      	cbnz	r0, 8704 <z_unpend1_no_timeout+0x70>
    86e8:	4a0b      	ldr	r2, [pc, #44]	; (8718 <z_unpend1_no_timeout+0x84>)
    86ea:	490f      	ldr	r1, [pc, #60]	; (8728 <z_unpend1_no_timeout+0x94>)
    86ec:	480c      	ldr	r0, [pc, #48]	; (8720 <z_unpend1_no_timeout+0x8c>)
    86ee:	23b9      	movs	r3, #185	; 0xb9
    86f0:	f002 f92f 	bl	a952 <assert_print>
    86f4:	4907      	ldr	r1, [pc, #28]	; (8714 <z_unpend1_no_timeout+0x80>)
    86f6:	480d      	ldr	r0, [pc, #52]	; (872c <z_unpend1_no_timeout+0x98>)
    86f8:	f002 f92b 	bl	a952 <assert_print>
    86fc:	4806      	ldr	r0, [pc, #24]	; (8718 <z_unpend1_no_timeout+0x84>)
    86fe:	21b9      	movs	r1, #185	; 0xb9
    8700:	f002 f920 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8704:	f386 8811 	msr	BASEPRI, r6
    8708:	f3bf 8f6f 	isb	sy
}
    870c:	4620      	mov	r0, r4
    870e:	bd70      	pop	{r4, r5, r6, pc}
    8710:	2400      	movs	r4, #0
    8712:	e7e5      	b.n	86e0 <z_unpend1_no_timeout+0x4c>
    8714:	20004f3c 	.word	0x20004f3c
    8718:	0000c2d4 	.word	0x0000c2d4
    871c:	0000c32d 	.word	0x0000c32d
    8720:	0000c18a 	.word	0x0000c18a
    8724:	0000c342 	.word	0x0000c342
    8728:	0000c301 	.word	0x0000c301
    872c:	0000c318 	.word	0x0000c318

00008730 <z_unpend_first_thread>:
{
    8730:	b570      	push	{r4, r5, r6, lr}
    8732:	4605      	mov	r5, r0
	__asm__ volatile(
    8734:	f04f 0320 	mov.w	r3, #32
    8738:	f3ef 8611 	mrs	r6, BASEPRI
    873c:	f383 8812 	msr	BASEPRI_MAX, r3
    8740:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8744:	481c      	ldr	r0, [pc, #112]	; (87b8 <z_unpend_first_thread+0x88>)
    8746:	f7fe fe61 	bl	740c <z_spin_lock_valid>
    874a:	b968      	cbnz	r0, 8768 <z_unpend_first_thread+0x38>
    874c:	4a1b      	ldr	r2, [pc, #108]	; (87bc <z_unpend_first_thread+0x8c>)
    874e:	491c      	ldr	r1, [pc, #112]	; (87c0 <z_unpend_first_thread+0x90>)
    8750:	481c      	ldr	r0, [pc, #112]	; (87c4 <z_unpend_first_thread+0x94>)
    8752:	238e      	movs	r3, #142	; 0x8e
    8754:	f002 f8fd 	bl	a952 <assert_print>
    8758:	4917      	ldr	r1, [pc, #92]	; (87b8 <z_unpend_first_thread+0x88>)
    875a:	481b      	ldr	r0, [pc, #108]	; (87c8 <z_unpend_first_thread+0x98>)
    875c:	f002 f8f9 	bl	a952 <assert_print>
    8760:	4816      	ldr	r0, [pc, #88]	; (87bc <z_unpend_first_thread+0x8c>)
    8762:	218e      	movs	r1, #142	; 0x8e
    8764:	f002 f8ee 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8768:	4813      	ldr	r0, [pc, #76]	; (87b8 <z_unpend_first_thread+0x88>)
    876a:	f7fe fe6d 	bl	7448 <z_spin_lock_set_owner>
	return list->head == list;
    876e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8770:	42a5      	cmp	r5, r4
    8772:	d01f      	beq.n	87b4 <z_unpend_first_thread+0x84>
		if (thread != NULL) {
    8774:	b134      	cbz	r4, 8784 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    8776:	4620      	mov	r0, r4
    8778:	f7ff ff10 	bl	859c <unpend_thread_no_timeout>
    877c:	f104 0018 	add.w	r0, r4, #24
    8780:	f000 fb9c 	bl	8ebc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8784:	480c      	ldr	r0, [pc, #48]	; (87b8 <z_unpend_first_thread+0x88>)
    8786:	f7fe fe4f 	bl	7428 <z_spin_unlock_valid>
    878a:	b968      	cbnz	r0, 87a8 <z_unpend_first_thread+0x78>
    878c:	4a0b      	ldr	r2, [pc, #44]	; (87bc <z_unpend_first_thread+0x8c>)
    878e:	490f      	ldr	r1, [pc, #60]	; (87cc <z_unpend_first_thread+0x9c>)
    8790:	480c      	ldr	r0, [pc, #48]	; (87c4 <z_unpend_first_thread+0x94>)
    8792:	23b9      	movs	r3, #185	; 0xb9
    8794:	f002 f8dd 	bl	a952 <assert_print>
    8798:	4907      	ldr	r1, [pc, #28]	; (87b8 <z_unpend_first_thread+0x88>)
    879a:	480d      	ldr	r0, [pc, #52]	; (87d0 <z_unpend_first_thread+0xa0>)
    879c:	f002 f8d9 	bl	a952 <assert_print>
    87a0:	4806      	ldr	r0, [pc, #24]	; (87bc <z_unpend_first_thread+0x8c>)
    87a2:	21b9      	movs	r1, #185	; 0xb9
    87a4:	f002 f8ce 	bl	a944 <assert_post_action>
	__asm__ volatile(
    87a8:	f386 8811 	msr	BASEPRI, r6
    87ac:	f3bf 8f6f 	isb	sy
}
    87b0:	4620      	mov	r0, r4
    87b2:	bd70      	pop	{r4, r5, r6, pc}
    87b4:	2400      	movs	r4, #0
    87b6:	e7e5      	b.n	8784 <z_unpend_first_thread+0x54>
    87b8:	20004f3c 	.word	0x20004f3c
    87bc:	0000c2d4 	.word	0x0000c2d4
    87c0:	0000c32d 	.word	0x0000c32d
    87c4:	0000c18a 	.word	0x0000c18a
    87c8:	0000c342 	.word	0x0000c342
    87cc:	0000c301 	.word	0x0000c301
    87d0:	0000c318 	.word	0x0000c318

000087d4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    87d4:	4b04      	ldr	r3, [pc, #16]	; (87e8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    87d6:	2100      	movs	r1, #0
    87d8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    87dc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    87e0:	4608      	mov	r0, r1
    87e2:	f7ff b989 	b.w	7af8 <k_sched_time_slice_set>
    87e6:	bf00      	nop
    87e8:	20004f00 	.word	0x20004f00

000087ec <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    87ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    87f2:	b173      	cbz	r3, 8812 <z_impl_k_yield+0x26>
    87f4:	493f      	ldr	r1, [pc, #252]	; (88f4 <z_impl_k_yield+0x108>)
    87f6:	4a40      	ldr	r2, [pc, #256]	; (88f8 <z_impl_k_yield+0x10c>)
    87f8:	4840      	ldr	r0, [pc, #256]	; (88fc <z_impl_k_yield+0x110>)
    87fa:	f240 5332 	movw	r3, #1330	; 0x532
    87fe:	f002 f8a8 	bl	a952 <assert_print>
    8802:	483f      	ldr	r0, [pc, #252]	; (8900 <z_impl_k_yield+0x114>)
    8804:	f002 f8a5 	bl	a952 <assert_print>
    8808:	483b      	ldr	r0, [pc, #236]	; (88f8 <z_impl_k_yield+0x10c>)
    880a:	f240 5132 	movw	r1, #1330	; 0x532
    880e:	f002 f899 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8812:	f04f 0320 	mov.w	r3, #32
    8816:	f3ef 8611 	mrs	r6, BASEPRI
    881a:	f383 8812 	msr	BASEPRI_MAX, r3
    881e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8822:	4838      	ldr	r0, [pc, #224]	; (8904 <z_impl_k_yield+0x118>)
    8824:	f7fe fdf2 	bl	740c <z_spin_lock_valid>
    8828:	b968      	cbnz	r0, 8846 <z_impl_k_yield+0x5a>
    882a:	4a37      	ldr	r2, [pc, #220]	; (8908 <z_impl_k_yield+0x11c>)
    882c:	4937      	ldr	r1, [pc, #220]	; (890c <z_impl_k_yield+0x120>)
    882e:	4833      	ldr	r0, [pc, #204]	; (88fc <z_impl_k_yield+0x110>)
    8830:	238e      	movs	r3, #142	; 0x8e
    8832:	f002 f88e 	bl	a952 <assert_print>
    8836:	4933      	ldr	r1, [pc, #204]	; (8904 <z_impl_k_yield+0x118>)
    8838:	4835      	ldr	r0, [pc, #212]	; (8910 <z_impl_k_yield+0x124>)
    883a:	f002 f88a 	bl	a952 <assert_print>
    883e:	4832      	ldr	r0, [pc, #200]	; (8908 <z_impl_k_yield+0x11c>)
    8840:	218e      	movs	r1, #142	; 0x8e
    8842:	f002 f87f 	bl	a944 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    8846:	4d33      	ldr	r5, [pc, #204]	; (8914 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    8848:	482e      	ldr	r0, [pc, #184]	; (8904 <z_impl_k_yield+0x118>)
    884a:	f7fe fdfd 	bl	7448 <z_spin_lock_set_owner>
    884e:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8850:	7b4b      	ldrb	r3, [r1, #13]
    8852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8856:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8858:	f105 0020 	add.w	r0, r5, #32
    885c:	f7ff fbca 	bl	7ff4 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    8860:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8862:	7b63      	ldrb	r3, [r4, #13]
    8864:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8868:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    886a:	4b2b      	ldr	r3, [pc, #172]	; (8918 <z_impl_k_yield+0x12c>)
    886c:	429c      	cmp	r4, r3
    886e:	d109      	bne.n	8884 <z_impl_k_yield+0x98>
    8870:	492a      	ldr	r1, [pc, #168]	; (891c <z_impl_k_yield+0x130>)
    8872:	4822      	ldr	r0, [pc, #136]	; (88fc <z_impl_k_yield+0x110>)
    8874:	4a20      	ldr	r2, [pc, #128]	; (88f8 <z_impl_k_yield+0x10c>)
    8876:	23ba      	movs	r3, #186	; 0xba
    8878:	f002 f86b 	bl	a952 <assert_print>
    887c:	481e      	ldr	r0, [pc, #120]	; (88f8 <z_impl_k_yield+0x10c>)
    887e:	21ba      	movs	r1, #186	; 0xba
    8880:	f002 f860 	bl	a944 <assert_post_action>
	return list->head == list;
    8884:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8886:	4926      	ldr	r1, [pc, #152]	; (8920 <z_impl_k_yield+0x134>)
	return (node == list->tail) ? NULL : node->next;
    8888:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    888a:	428b      	cmp	r3, r1
    888c:	bf08      	it	eq
    888e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8890:	b923      	cbnz	r3, 889c <z_impl_k_yield+0xb0>
	node->prev = tail;
    8892:	e9c4 1200 	strd	r1, r2, [r4]
	tail->next = node;
    8896:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8898:	626c      	str	r4, [r5, #36]	; 0x24
}
    889a:	e00c      	b.n	88b6 <z_impl_k_yield+0xca>
	int32_t b1 = thread_1->base.prio;
    889c:	f994 000e 	ldrsb.w	r0, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    88a0:	f993 700e 	ldrsb.w	r7, [r3, #14]
	if (b1 != b2) {
    88a4:	42b8      	cmp	r0, r7
    88a6:	d020      	beq.n	88ea <z_impl_k_yield+0xfe>
		if (z_sched_prio_cmp(thread, t) > 0) {
    88a8:	4287      	cmp	r7, r0
    88aa:	dd1e      	ble.n	88ea <z_impl_k_yield+0xfe>
	sys_dnode_t *const prev = successor->prev;
    88ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    88ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    88b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    88b4:	605c      	str	r4, [r3, #4]
	update_cache(1);
    88b6:	2001      	movs	r0, #1
    88b8:	f7ff f89a 	bl	79f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88bc:	4811      	ldr	r0, [pc, #68]	; (8904 <z_impl_k_yield+0x118>)
    88be:	f7fe fdb3 	bl	7428 <z_spin_unlock_valid>
    88c2:	b968      	cbnz	r0, 88e0 <z_impl_k_yield+0xf4>
    88c4:	4a10      	ldr	r2, [pc, #64]	; (8908 <z_impl_k_yield+0x11c>)
    88c6:	4917      	ldr	r1, [pc, #92]	; (8924 <z_impl_k_yield+0x138>)
    88c8:	480c      	ldr	r0, [pc, #48]	; (88fc <z_impl_k_yield+0x110>)
    88ca:	23d0      	movs	r3, #208	; 0xd0
    88cc:	f002 f841 	bl	a952 <assert_print>
    88d0:	490c      	ldr	r1, [pc, #48]	; (8904 <z_impl_k_yield+0x118>)
    88d2:	4815      	ldr	r0, [pc, #84]	; (8928 <z_impl_k_yield+0x13c>)
    88d4:	f002 f83d 	bl	a952 <assert_print>
    88d8:	480b      	ldr	r0, [pc, #44]	; (8908 <z_impl_k_yield+0x11c>)
    88da:	21d0      	movs	r1, #208	; 0xd0
    88dc:	f002 f832 	bl	a944 <assert_post_action>
    88e0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    88e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88e6:	f7fb b837 	b.w	3958 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    88ea:	4293      	cmp	r3, r2
    88ec:	d0d1      	beq.n	8892 <z_impl_k_yield+0xa6>
    88ee:	681b      	ldr	r3, [r3, #0]
    88f0:	e7ce      	b.n	8890 <z_impl_k_yield+0xa4>
    88f2:	bf00      	nop
    88f4:	0000d6cb 	.word	0x0000d6cb
    88f8:	0000d8a3 	.word	0x0000d8a3
    88fc:	0000c18a 	.word	0x0000c18a
    8900:	0000d801 	.word	0x0000d801
    8904:	20004f3c 	.word	0x20004f3c
    8908:	0000c2d4 	.word	0x0000c2d4
    890c:	0000c32d 	.word	0x0000c32d
    8910:	0000c342 	.word	0x0000c342
    8914:	20004f00 	.word	0x20004f00
    8918:	200046c0 	.word	0x200046c0
    891c:	0000d8ec 	.word	0x0000d8ec
    8920:	20004f20 	.word	0x20004f20
    8924:	0000c301 	.word	0x0000c301
    8928:	0000c318 	.word	0x0000c318

0000892c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8930:	4605      	mov	r5, r0
    8932:	460e      	mov	r6, r1
    8934:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8938:	b173      	cbz	r3, 8958 <z_tick_sleep+0x2c>
    893a:	4941      	ldr	r1, [pc, #260]	; (8a40 <z_tick_sleep+0x114>)
    893c:	4a41      	ldr	r2, [pc, #260]	; (8a44 <z_tick_sleep+0x118>)
    893e:	4842      	ldr	r0, [pc, #264]	; (8a48 <z_tick_sleep+0x11c>)
    8940:	f240 534e 	movw	r3, #1358	; 0x54e
    8944:	f002 f805 	bl	a952 <assert_print>
    8948:	4840      	ldr	r0, [pc, #256]	; (8a4c <z_tick_sleep+0x120>)
    894a:	f002 f802 	bl	a952 <assert_print>
    894e:	483d      	ldr	r0, [pc, #244]	; (8a44 <z_tick_sleep+0x118>)
    8950:	f240 514e 	movw	r1, #1358	; 0x54e
    8954:	f001 fff6 	bl	a944 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8958:	ea55 0306 	orrs.w	r3, r5, r6
    895c:	d103      	bne.n	8966 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    895e:	f7ff ff45 	bl	87ec <z_impl_k_yield>
		k_yield();
		return 0;
    8962:	2000      	movs	r0, #0
    8964:	e066      	b.n	8a34 <z_tick_sleep+0x108>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    8966:	1caa      	adds	r2, r5, #2
    8968:	f176 33ff 	sbcs.w	r3, r6, #4294967295	; 0xffffffff
    896c:	db64      	blt.n	8a38 <z_tick_sleep+0x10c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    896e:	f002 fd61 	bl	b434 <sys_clock_tick_get_32>
    8972:	1944      	adds	r4, r0, r5
    8974:	f04f 0320 	mov.w	r3, #32
    8978:	f3ef 8811 	mrs	r8, BASEPRI
    897c:	f383 8812 	msr	BASEPRI_MAX, r3
    8980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8984:	4832      	ldr	r0, [pc, #200]	; (8a50 <z_tick_sleep+0x124>)
    8986:	f7fe fd41 	bl	740c <z_spin_lock_valid>
    898a:	b968      	cbnz	r0, 89a8 <z_tick_sleep+0x7c>
    898c:	4a31      	ldr	r2, [pc, #196]	; (8a54 <z_tick_sleep+0x128>)
    898e:	4932      	ldr	r1, [pc, #200]	; (8a58 <z_tick_sleep+0x12c>)
    8990:	482d      	ldr	r0, [pc, #180]	; (8a48 <z_tick_sleep+0x11c>)
    8992:	238e      	movs	r3, #142	; 0x8e
    8994:	f001 ffdd 	bl	a952 <assert_print>
    8998:	492d      	ldr	r1, [pc, #180]	; (8a50 <z_tick_sleep+0x124>)
    899a:	4830      	ldr	r0, [pc, #192]	; (8a5c <z_tick_sleep+0x130>)
    899c:	f001 ffd9 	bl	a952 <assert_print>
    89a0:	482c      	ldr	r0, [pc, #176]	; (8a54 <z_tick_sleep+0x128>)
    89a2:	218e      	movs	r1, #142	; 0x8e
    89a4:	f001 ffce 	bl	a944 <assert_post_action>
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    89a8:	4f2d      	ldr	r7, [pc, #180]	; (8a60 <z_tick_sleep+0x134>)
	z_spin_lock_set_owner(l);
    89aa:	4829      	ldr	r0, [pc, #164]	; (8a50 <z_tick_sleep+0x124>)
    89ac:	f7fe fd4c 	bl	7448 <z_spin_lock_set_owner>
    89b0:	4b2c      	ldr	r3, [pc, #176]	; (8a64 <z_tick_sleep+0x138>)
    89b2:	68b8      	ldr	r0, [r7, #8]
    89b4:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    89b6:	f7ff fc09 	bl	81cc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    89ba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    89bc:	492a      	ldr	r1, [pc, #168]	; (8a68 <z_tick_sleep+0x13c>)
    89be:	462a      	mov	r2, r5
    89c0:	4633      	mov	r3, r6
    89c2:	3018      	adds	r0, #24
    89c4:	f000 f9b0 	bl	8d28 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    89c8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89ca:	4821      	ldr	r0, [pc, #132]	; (8a50 <z_tick_sleep+0x124>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    89cc:	7b53      	ldrb	r3, [r2, #13]
    89ce:	f043 0310 	orr.w	r3, r3, #16
    89d2:	7353      	strb	r3, [r2, #13]
    89d4:	f7fe fd28 	bl	7428 <z_spin_unlock_valid>
    89d8:	b968      	cbnz	r0, 89f6 <z_tick_sleep+0xca>
    89da:	4a1e      	ldr	r2, [pc, #120]	; (8a54 <z_tick_sleep+0x128>)
    89dc:	4923      	ldr	r1, [pc, #140]	; (8a6c <z_tick_sleep+0x140>)
    89de:	481a      	ldr	r0, [pc, #104]	; (8a48 <z_tick_sleep+0x11c>)
    89e0:	23d0      	movs	r3, #208	; 0xd0
    89e2:	f001 ffb6 	bl	a952 <assert_print>
    89e6:	491a      	ldr	r1, [pc, #104]	; (8a50 <z_tick_sleep+0x124>)
    89e8:	4821      	ldr	r0, [pc, #132]	; (8a70 <z_tick_sleep+0x144>)
    89ea:	f001 ffb2 	bl	a952 <assert_print>
    89ee:	4819      	ldr	r0, [pc, #100]	; (8a54 <z_tick_sleep+0x128>)
    89f0:	21d0      	movs	r1, #208	; 0xd0
    89f2:	f001 ffa7 	bl	a944 <assert_post_action>
    89f6:	4640      	mov	r0, r8
    89f8:	f7fa ffae 	bl	3958 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    89fc:	68bb      	ldr	r3, [r7, #8]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    89fe:	7b5b      	ldrb	r3, [r3, #13]
    8a00:	06db      	lsls	r3, r3, #27
    8a02:	d50e      	bpl.n	8a22 <z_tick_sleep+0xf6>
    8a04:	491b      	ldr	r1, [pc, #108]	; (8a74 <z_tick_sleep+0x148>)
    8a06:	4a0f      	ldr	r2, [pc, #60]	; (8a44 <z_tick_sleep+0x118>)
    8a08:	480f      	ldr	r0, [pc, #60]	; (8a48 <z_tick_sleep+0x11c>)
    8a0a:	f240 536f 	movw	r3, #1391	; 0x56f
    8a0e:	f001 ffa0 	bl	a952 <assert_print>
    8a12:	480e      	ldr	r0, [pc, #56]	; (8a4c <z_tick_sleep+0x120>)
    8a14:	f001 ff9d 	bl	a952 <assert_print>
    8a18:	480a      	ldr	r0, [pc, #40]	; (8a44 <z_tick_sleep+0x118>)
    8a1a:	f240 516f 	movw	r1, #1391	; 0x56f
    8a1e:	f001 ff91 	bl	a944 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8a22:	f002 fd07 	bl	b434 <sys_clock_tick_get_32>
    8a26:	1a20      	subs	r0, r4, r0
    8a28:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8a2c:	2801      	cmp	r0, #1
    8a2e:	f173 0300 	sbcs.w	r3, r3, #0
    8a32:	db96      	blt.n	8962 <z_tick_sleep+0x36>
		return ticks;
	}
#endif

	return 0;
}
    8a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8a38:	f06f 0401 	mvn.w	r4, #1
    8a3c:	1b64      	subs	r4, r4, r5
    8a3e:	e799      	b.n	8974 <z_tick_sleep+0x48>
    8a40:	0000d6cb 	.word	0x0000d6cb
    8a44:	0000d8a3 	.word	0x0000d8a3
    8a48:	0000c18a 	.word	0x0000c18a
    8a4c:	0000d801 	.word	0x0000d801
    8a50:	20004f3c 	.word	0x20004f3c
    8a54:	0000c2d4 	.word	0x0000c2d4
    8a58:	0000c32d 	.word	0x0000c32d
    8a5c:	0000c342 	.word	0x0000c342
    8a60:	20004f00 	.word	0x20004f00
    8a64:	20004f30 	.word	0x20004f30
    8a68:	000085e1 	.word	0x000085e1
    8a6c:	0000c301 	.word	0x0000c301
    8a70:	0000c318 	.word	0x0000c318
    8a74:	0000d955 	.word	0x0000d955

00008a78 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8a78:	b538      	push	{r3, r4, r5, lr}
    8a7a:	4605      	mov	r5, r0
    8a7c:	460c      	mov	r4, r1
    8a7e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    8a82:	b173      	cbz	r3, 8aa2 <z_impl_k_sleep+0x2a>
    8a84:	4913      	ldr	r1, [pc, #76]	; (8ad4 <z_impl_k_sleep+0x5c>)
    8a86:	4a14      	ldr	r2, [pc, #80]	; (8ad8 <z_impl_k_sleep+0x60>)
    8a88:	4814      	ldr	r0, [pc, #80]	; (8adc <z_impl_k_sleep+0x64>)
    8a8a:	f240 537e 	movw	r3, #1406	; 0x57e
    8a8e:	f001 ff60 	bl	a952 <assert_print>
    8a92:	4813      	ldr	r0, [pc, #76]	; (8ae0 <z_impl_k_sleep+0x68>)
    8a94:	f001 ff5d 	bl	a952 <assert_print>
    8a98:	480f      	ldr	r0, [pc, #60]	; (8ad8 <z_impl_k_sleep+0x60>)
    8a9a:	f240 517e 	movw	r1, #1406	; 0x57e
    8a9e:	f001 ff51 	bl	a944 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8aa2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8aa6:	bf08      	it	eq
    8aa8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8aac:	d106      	bne.n	8abc <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    8aae:	4b0d      	ldr	r3, [pc, #52]	; (8ae4 <z_impl_k_sleep+0x6c>)
    8ab0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8ab2:	f7ff fd09 	bl	84c8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    8ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    8aba:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    8abc:	4628      	mov	r0, r5
    8abe:	4621      	mov	r1, r4
    8ac0:	f7ff ff34 	bl	892c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    8ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8ac8:	fb80 0303 	smull	r0, r3, r0, r3
    8acc:	0bc0      	lsrs	r0, r0, #15
    8ace:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8ad2:	e7f2      	b.n	8aba <z_impl_k_sleep+0x42>
    8ad4:	0000d6cb 	.word	0x0000d6cb
    8ad8:	0000d8a3 	.word	0x0000d8a3
    8adc:	0000c18a 	.word	0x0000c18a
    8ae0:	0000d801 	.word	0x0000d801
    8ae4:	20004f00 	.word	0x20004f00

00008ae8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8ae8:	4b01      	ldr	r3, [pc, #4]	; (8af0 <z_impl_z_current_get+0x8>)
    8aea:	6898      	ldr	r0, [r3, #8]
    8aec:	4770      	bx	lr
    8aee:	bf00      	nop
    8af0:	20004f00 	.word	0x20004f00

00008af4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8af8:	4604      	mov	r4, r0
    8afa:	f04f 0320 	mov.w	r3, #32
    8afe:	f3ef 8611 	mrs	r6, BASEPRI
    8b02:	f383 8812 	msr	BASEPRI_MAX, r3
    8b06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b0a:	4848      	ldr	r0, [pc, #288]	; (8c2c <z_thread_abort+0x138>)
    8b0c:	f7fe fc7e 	bl	740c <z_spin_lock_valid>
    8b10:	b968      	cbnz	r0, 8b2e <z_thread_abort+0x3a>
    8b12:	4a47      	ldr	r2, [pc, #284]	; (8c30 <z_thread_abort+0x13c>)
    8b14:	4947      	ldr	r1, [pc, #284]	; (8c34 <z_thread_abort+0x140>)
    8b16:	4848      	ldr	r0, [pc, #288]	; (8c38 <z_thread_abort+0x144>)
    8b18:	238e      	movs	r3, #142	; 0x8e
    8b1a:	f001 ff1a 	bl	a952 <assert_print>
    8b1e:	4943      	ldr	r1, [pc, #268]	; (8c2c <z_thread_abort+0x138>)
    8b20:	4846      	ldr	r0, [pc, #280]	; (8c3c <z_thread_abort+0x148>)
    8b22:	f001 ff16 	bl	a952 <assert_print>
    8b26:	4842      	ldr	r0, [pc, #264]	; (8c30 <z_thread_abort+0x13c>)
    8b28:	218e      	movs	r1, #142	; 0x8e
    8b2a:	f001 ff0b 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8b2e:	483f      	ldr	r0, [pc, #252]	; (8c2c <z_thread_abort+0x138>)
    8b30:	f7fe fc8a 	bl	7448 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8b34:	7b63      	ldrb	r3, [r4, #13]
    8b36:	071a      	lsls	r2, r3, #28
    8b38:	d517      	bpl.n	8b6a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b3a:	483c      	ldr	r0, [pc, #240]	; (8c2c <z_thread_abort+0x138>)
    8b3c:	f7fe fc74 	bl	7428 <z_spin_unlock_valid>
    8b40:	b968      	cbnz	r0, 8b5e <z_thread_abort+0x6a>
    8b42:	4a3b      	ldr	r2, [pc, #236]	; (8c30 <z_thread_abort+0x13c>)
    8b44:	493e      	ldr	r1, [pc, #248]	; (8c40 <z_thread_abort+0x14c>)
    8b46:	483c      	ldr	r0, [pc, #240]	; (8c38 <z_thread_abort+0x144>)
    8b48:	23b9      	movs	r3, #185	; 0xb9
    8b4a:	f001 ff02 	bl	a952 <assert_print>
    8b4e:	4937      	ldr	r1, [pc, #220]	; (8c2c <z_thread_abort+0x138>)
    8b50:	483c      	ldr	r0, [pc, #240]	; (8c44 <z_thread_abort+0x150>)
    8b52:	f001 fefe 	bl	a952 <assert_print>
    8b56:	4836      	ldr	r0, [pc, #216]	; (8c30 <z_thread_abort+0x13c>)
    8b58:	21b9      	movs	r1, #185	; 0xb9
    8b5a:	f001 fef3 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8b5e:	f386 8811 	msr	BASEPRI, r6
    8b62:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8b6a:	f023 0220 	bic.w	r2, r3, #32
    8b6e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8b72:	09d2      	lsrs	r2, r2, #7
    8b74:	d142      	bne.n	8bfc <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8b76:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    8b78:	68a3      	ldr	r3, [r4, #8]
    8b7a:	b113      	cbz	r3, 8b82 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    8b7c:	4620      	mov	r0, r4
    8b7e:	f7ff fd0d 	bl	859c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8b82:	f104 0018 	add.w	r0, r4, #24
    8b86:	f000 f999 	bl	8ebc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8b8a:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8b8e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8b92:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b94:	42bd      	cmp	r5, r7
    8b96:	d001      	beq.n	8b9c <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8b98:	2d00      	cmp	r5, #0
    8b9a:	d139      	bne.n	8c10 <z_thread_abort+0x11c>
		update_cache(1);
    8b9c:	2001      	movs	r0, #1
    8b9e:	f7fe ff27 	bl	79f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8ba2:	4b29      	ldr	r3, [pc, #164]	; (8c48 <z_thread_abort+0x154>)
    8ba4:	689b      	ldr	r3, [r3, #8]
    8ba6:	42a3      	cmp	r3, r4
    8ba8:	d1c7      	bne.n	8b3a <z_thread_abort+0x46>
    8baa:	f3ef 8305 	mrs	r3, IPSR
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d1c3      	bne.n	8b3a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bb2:	481e      	ldr	r0, [pc, #120]	; (8c2c <z_thread_abort+0x138>)
    8bb4:	f7fe fc38 	bl	7428 <z_spin_unlock_valid>
    8bb8:	b968      	cbnz	r0, 8bd6 <z_thread_abort+0xe2>
    8bba:	4a1d      	ldr	r2, [pc, #116]	; (8c30 <z_thread_abort+0x13c>)
    8bbc:	4920      	ldr	r1, [pc, #128]	; (8c40 <z_thread_abort+0x14c>)
    8bbe:	481e      	ldr	r0, [pc, #120]	; (8c38 <z_thread_abort+0x144>)
    8bc0:	23d0      	movs	r3, #208	; 0xd0
    8bc2:	f001 fec6 	bl	a952 <assert_print>
    8bc6:	4919      	ldr	r1, [pc, #100]	; (8c2c <z_thread_abort+0x138>)
    8bc8:	481e      	ldr	r0, [pc, #120]	; (8c44 <z_thread_abort+0x150>)
    8bca:	f001 fec2 	bl	a952 <assert_print>
    8bce:	4818      	ldr	r0, [pc, #96]	; (8c30 <z_thread_abort+0x13c>)
    8bd0:	21d0      	movs	r1, #208	; 0xd0
    8bd2:	f001 feb7 	bl	a944 <assert_post_action>
    8bd6:	4630      	mov	r0, r6
    8bd8:	f7fa febe 	bl	3958 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8bdc:	4a1b      	ldr	r2, [pc, #108]	; (8c4c <z_thread_abort+0x158>)
    8bde:	491c      	ldr	r1, [pc, #112]	; (8c50 <z_thread_abort+0x15c>)
    8be0:	4815      	ldr	r0, [pc, #84]	; (8c38 <z_thread_abort+0x144>)
    8be2:	f240 63ac 	movw	r3, #1708	; 0x6ac
    8be6:	f001 feb4 	bl	a952 <assert_print>
    8bea:	481a      	ldr	r0, [pc, #104]	; (8c54 <z_thread_abort+0x160>)
    8bec:	f001 feb1 	bl	a952 <assert_print>
    8bf0:	4816      	ldr	r0, [pc, #88]	; (8c4c <z_thread_abort+0x158>)
    8bf2:	f240 61ac 	movw	r1, #1708	; 0x6ac
    8bf6:	f001 fea5 	bl	a944 <assert_post_action>
    8bfa:	e79e      	b.n	8b3a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8bfc:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8c00:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    8c04:	4814      	ldr	r0, [pc, #80]	; (8c58 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c06:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8c08:	4621      	mov	r1, r4
    8c0a:	f7ff f9f3 	bl	7ff4 <z_priq_dumb_remove>
}
    8c0e:	e7b3      	b.n	8b78 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    8c10:	4628      	mov	r0, r5
    8c12:	f7ff fcc3 	bl	859c <unpend_thread_no_timeout>
    8c16:	f105 0018 	add.w	r0, r5, #24
    8c1a:	f000 f94f 	bl	8ebc <z_abort_timeout>
    8c1e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8c22:	4628      	mov	r0, r5
    8c24:	f7fe ff1c 	bl	7a60 <ready_thread>
    8c28:	e7b3      	b.n	8b92 <z_thread_abort+0x9e>
    8c2a:	bf00      	nop
    8c2c:	20004f3c 	.word	0x20004f3c
    8c30:	0000c2d4 	.word	0x0000c2d4
    8c34:	0000c32d 	.word	0x0000c32d
    8c38:	0000c18a 	.word	0x0000c18a
    8c3c:	0000c342 	.word	0x0000c342
    8c40:	0000c301 	.word	0x0000c301
    8c44:	0000c318 	.word	0x0000c318
    8c48:	20004f00 	.word	0x20004f00
    8c4c:	0000d8a3 	.word	0x0000d8a3
    8c50:	0000dab4 	.word	0x0000dab4
    8c54:	0000d995 	.word	0x0000d995
    8c58:	20004f20 	.word	0x20004f20

00008c5c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8c5c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8c5e:	4806      	ldr	r0, [pc, #24]	; (8c78 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8c60:	4a06      	ldr	r2, [pc, #24]	; (8c7c <z_data_copy+0x20>)
    8c62:	4907      	ldr	r1, [pc, #28]	; (8c80 <z_data_copy+0x24>)
    8c64:	1a12      	subs	r2, r2, r0
    8c66:	f002 fb87 	bl	b378 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8c6e:	4a05      	ldr	r2, [pc, #20]	; (8c84 <z_data_copy+0x28>)
    8c70:	4905      	ldr	r1, [pc, #20]	; (8c88 <z_data_copy+0x2c>)
    8c72:	4806      	ldr	r0, [pc, #24]	; (8c8c <z_data_copy+0x30>)
    8c74:	f002 bb80 	b.w	b378 <z_early_memcpy>
    8c78:	20000000 	.word	0x20000000
    8c7c:	2000426c 	.word	0x2000426c
    8c80:	0000dccc 	.word	0x0000dccc
    8c84:	00000000 	.word	0x00000000
    8c88:	0000dccc 	.word	0x0000dccc
    8c8c:	20000000 	.word	0x20000000

00008c90 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8c90:	4b03      	ldr	r3, [pc, #12]	; (8ca0 <elapsed+0x10>)
    8c92:	681b      	ldr	r3, [r3, #0]
    8c94:	b90b      	cbnz	r3, 8c9a <elapsed+0xa>
    8c96:	f7fd b82f 	b.w	5cf8 <sys_clock_elapsed>
}
    8c9a:	2000      	movs	r0, #0
    8c9c:	4770      	bx	lr
    8c9e:	bf00      	nop
    8ca0:	20004f40 	.word	0x20004f40

00008ca4 <next_timeout>:
	return list->head == list;
    8ca4:	4b11      	ldr	r3, [pc, #68]	; (8cec <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    8ca6:	b510      	push	{r4, lr}
    8ca8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8caa:	429c      	cmp	r4, r3
    8cac:	d10a      	bne.n	8cc4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8cae:	f7ff ffef 	bl	8c90 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8cb2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8cb6:	4b0e      	ldr	r3, [pc, #56]	; (8cf0 <next_timeout+0x4c>)
    8cb8:	691b      	ldr	r3, [r3, #16]
    8cba:	b113      	cbz	r3, 8cc2 <next_timeout+0x1e>
    8cbc:	4298      	cmp	r0, r3
    8cbe:	bfa8      	it	ge
    8cc0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8cc2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8cc4:	f7ff ffe4 	bl	8c90 <elapsed>
	if ((to == NULL) ||
    8cc8:	2c00      	cmp	r4, #0
    8cca:	d0f2      	beq.n	8cb2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8ccc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8cd0:	1a1b      	subs	r3, r3, r0
    8cd2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    8cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8cda:	f172 0100 	sbcs.w	r1, r2, #0
    8cde:	dae8      	bge.n	8cb2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8ce0:	2a00      	cmp	r2, #0
    8ce2:	bfac      	ite	ge
    8ce4:	4618      	movge	r0, r3
    8ce6:	2000      	movlt	r0, #0
    8ce8:	e7e5      	b.n	8cb6 <next_timeout+0x12>
    8cea:	bf00      	nop
    8cec:	200000e8 	.word	0x200000e8
    8cf0:	20004f00 	.word	0x20004f00

00008cf4 <remove_timeout>:
	return (node == list->tail) ? NULL : node->next;
    8cf4:	4a0b      	ldr	r2, [pc, #44]	; (8d24 <remove_timeout+0x30>)
    8cf6:	6803      	ldr	r3, [r0, #0]
    8cf8:	6852      	ldr	r2, [r2, #4]
    8cfa:	4290      	cmp	r0, r2
{
    8cfc:	b530      	push	{r4, r5, lr}
    8cfe:	d009      	beq.n	8d14 <remove_timeout+0x20>
	if (next(t) != NULL) {
    8d00:	b143      	cbz	r3, 8d14 <remove_timeout+0x20>
		next(t)->dticks += t->dticks;
    8d02:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8d06:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    8d0a:	1912      	adds	r2, r2, r4
    8d0c:	eb41 0105 	adc.w	r1, r1, r5
    8d10:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8d14:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    8d16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8d18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d1a:	2300      	movs	r3, #0
	node->prev = NULL;
    8d1c:	e9c0 3300 	strd	r3, r3, [r0]
}
    8d20:	bd30      	pop	{r4, r5, pc}
    8d22:	bf00      	nop
    8d24:	200000e8 	.word	0x200000e8

00008d28 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8d2c:	bf08      	it	eq
    8d2e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8d32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d36:	4604      	mov	r4, r0
    8d38:	460e      	mov	r6, r1
    8d3a:	4691      	mov	r9, r2
    8d3c:	461d      	mov	r5, r3
    8d3e:	4617      	mov	r7, r2
    8d40:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8d42:	f000 8095 	beq.w	8e70 <z_add_timeout+0x148>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    8d46:	6803      	ldr	r3, [r0, #0]
    8d48:	b163      	cbz	r3, 8d64 <z_add_timeout+0x3c>
    8d4a:	494f      	ldr	r1, [pc, #316]	; (8e88 <z_add_timeout+0x160>)
    8d4c:	4a4f      	ldr	r2, [pc, #316]	; (8e8c <z_add_timeout+0x164>)
    8d4e:	4850      	ldr	r0, [pc, #320]	; (8e90 <z_add_timeout+0x168>)
    8d50:	2363      	movs	r3, #99	; 0x63
    8d52:	f001 fdfe 	bl	a952 <assert_print>
    8d56:	484f      	ldr	r0, [pc, #316]	; (8e94 <z_add_timeout+0x16c>)
    8d58:	f001 fdfb 	bl	a952 <assert_print>
    8d5c:	484b      	ldr	r0, [pc, #300]	; (8e8c <z_add_timeout+0x164>)
    8d5e:	2163      	movs	r1, #99	; 0x63
    8d60:	f001 fdf0 	bl	a944 <assert_post_action>
	to->fn = fn;
    8d64:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    8d66:	f04f 0320 	mov.w	r3, #32
    8d6a:	f3ef 8611 	mrs	r6, BASEPRI
    8d6e:	f383 8812 	msr	BASEPRI_MAX, r3
    8d72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d76:	4848      	ldr	r0, [pc, #288]	; (8e98 <z_add_timeout+0x170>)
    8d78:	f7fe fb48 	bl	740c <z_spin_lock_valid>
    8d7c:	b968      	cbnz	r0, 8d9a <z_add_timeout+0x72>
    8d7e:	4a47      	ldr	r2, [pc, #284]	; (8e9c <z_add_timeout+0x174>)
    8d80:	4947      	ldr	r1, [pc, #284]	; (8ea0 <z_add_timeout+0x178>)
    8d82:	4843      	ldr	r0, [pc, #268]	; (8e90 <z_add_timeout+0x168>)
    8d84:	238e      	movs	r3, #142	; 0x8e
    8d86:	f001 fde4 	bl	a952 <assert_print>
    8d8a:	4943      	ldr	r1, [pc, #268]	; (8e98 <z_add_timeout+0x170>)
    8d8c:	4845      	ldr	r0, [pc, #276]	; (8ea4 <z_add_timeout+0x17c>)
    8d8e:	f001 fde0 	bl	a952 <assert_print>
    8d92:	4842      	ldr	r0, [pc, #264]	; (8e9c <z_add_timeout+0x174>)
    8d94:	218e      	movs	r1, #142	; 0x8e
    8d96:	f001 fdd5 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8d9a:	483f      	ldr	r0, [pc, #252]	; (8e98 <z_add_timeout+0x170>)
    8d9c:	f7fe fb54 	bl	7448 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8da0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    8da4:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    8da8:	da22      	bge.n	8df0 <z_add_timeout+0xc8>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    8daa:	493f      	ldr	r1, [pc, #252]	; (8ea8 <z_add_timeout+0x180>)
    8dac:	e9d1 2000 	ldrd	r2, r0, [r1]
    8db0:	f06f 0301 	mvn.w	r3, #1
    8db4:	1a9b      	subs	r3, r3, r2
    8db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8dba:	eb62 0000 	sbc.w	r0, r2, r0
    8dbe:	1bdf      	subs	r7, r3, r7
    8dc0:	eb60 0008 	sbc.w	r0, r0, r8

			to->dticks = MAX(1, ticks);
    8dc4:	2f01      	cmp	r7, #1
    8dc6:	f170 0300 	sbcs.w	r3, r0, #0
    8dca:	da01      	bge.n	8dd0 <z_add_timeout+0xa8>
    8dcc:	2701      	movs	r7, #1
    8dce:	2000      	movs	r0, #0
	return list->head == list;
    8dd0:	4a36      	ldr	r2, [pc, #216]	; (8eac <z_add_timeout+0x184>)
    8dd2:	e9c4 7004 	strd	r7, r0, [r4, #16]
    8dd6:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
    8dd8:	f8d2 c004 	ldr.w	ip, [r2, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ddc:	4293      	cmp	r3, r2
    8dde:	bf08      	it	eq
    8de0:	2300      	moveq	r3, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8de2:	b973      	cbnz	r3, 8e02 <z_add_timeout+0xda>
	node->prev = tail;
    8de4:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    8de8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8dec:	6054      	str	r4, [r2, #4]
}
    8dee:	e01a      	b.n	8e26 <z_add_timeout+0xfe>
			to->dticks = timeout.ticks + 1 + elapsed();
    8df0:	f7ff ff4e 	bl	8c90 <elapsed>
    8df4:	3701      	adds	r7, #1
    8df6:	f145 0500 	adc.w	r5, r5, #0
    8dfa:	183f      	adds	r7, r7, r0
    8dfc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8e00:	e7e6      	b.n	8dd0 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    8e02:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    8e06:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    8e0a:	4281      	cmp	r1, r0
    8e0c:	eb75 0e07 	sbcs.w	lr, r5, r7
    8e10:	da30      	bge.n	8e74 <z_add_timeout+0x14c>
				t->dticks -= to->dticks;
    8e12:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    8e14:	6859      	ldr	r1, [r3, #4]
    8e16:	eb67 0705 	sbc.w	r7, r7, r5
    8e1a:	e9c3 0704 	strd	r0, r7, [r3, #16]
	node->next = successor;
    8e1e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8e22:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8e24:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8e26:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e28:	4293      	cmp	r3, r2
    8e2a:	d00b      	beq.n	8e44 <z_add_timeout+0x11c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8e2c:	429c      	cmp	r4, r3
    8e2e:	d109      	bne.n	8e44 <z_add_timeout+0x11c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8e30:	f7ff ff38 	bl	8ca4 <next_timeout>

			if (next_time == 0 ||
    8e34:	b118      	cbz	r0, 8e3e <z_add_timeout+0x116>
			    _current_cpu->slice_ticks != next_time) {
    8e36:	4b1e      	ldr	r3, [pc, #120]	; (8eb0 <z_add_timeout+0x188>)
			if (next_time == 0 ||
    8e38:	691b      	ldr	r3, [r3, #16]
    8e3a:	4283      	cmp	r3, r0
    8e3c:	d002      	beq.n	8e44 <z_add_timeout+0x11c>
				sys_clock_set_timeout(next_time, false);
    8e3e:	2100      	movs	r1, #0
    8e40:	f7fc ff28 	bl	5c94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e44:	4814      	ldr	r0, [pc, #80]	; (8e98 <z_add_timeout+0x170>)
    8e46:	f7fe faef 	bl	7428 <z_spin_unlock_valid>
    8e4a:	b968      	cbnz	r0, 8e68 <z_add_timeout+0x140>
    8e4c:	4a13      	ldr	r2, [pc, #76]	; (8e9c <z_add_timeout+0x174>)
    8e4e:	4919      	ldr	r1, [pc, #100]	; (8eb4 <z_add_timeout+0x18c>)
    8e50:	480f      	ldr	r0, [pc, #60]	; (8e90 <z_add_timeout+0x168>)
    8e52:	23b9      	movs	r3, #185	; 0xb9
    8e54:	f001 fd7d 	bl	a952 <assert_print>
    8e58:	490f      	ldr	r1, [pc, #60]	; (8e98 <z_add_timeout+0x170>)
    8e5a:	4817      	ldr	r0, [pc, #92]	; (8eb8 <z_add_timeout+0x190>)
    8e5c:	f001 fd79 	bl	a952 <assert_print>
    8e60:	480e      	ldr	r0, [pc, #56]	; (8e9c <z_add_timeout+0x174>)
    8e62:	21b9      	movs	r1, #185	; 0xb9
    8e64:	f001 fd6e 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8e68:	f386 8811 	msr	BASEPRI, r6
    8e6c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    8e74:	1a09      	subs	r1, r1, r0
    8e76:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8e7a:	4563      	cmp	r3, ip
    8e7c:	e9c4 1504 	strd	r1, r5, [r4, #16]
    8e80:	d0b0      	beq.n	8de4 <z_add_timeout+0xbc>
    8e82:	681b      	ldr	r3, [r3, #0]
    8e84:	e7ad      	b.n	8de2 <z_add_timeout+0xba>
    8e86:	bf00      	nop
    8e88:	0000d9db 	.word	0x0000d9db
    8e8c:	0000d9b7 	.word	0x0000d9b7
    8e90:	0000c18a 	.word	0x0000c18a
    8e94:	0000d801 	.word	0x0000d801
    8e98:	20004f44 	.word	0x20004f44
    8e9c:	0000c2d4 	.word	0x0000c2d4
    8ea0:	0000c32d 	.word	0x0000c32d
    8ea4:	0000c342 	.word	0x0000c342
    8ea8:	200047c0 	.word	0x200047c0
    8eac:	200000e8 	.word	0x200000e8
    8eb0:	20004f00 	.word	0x20004f00
    8eb4:	0000c301 	.word	0x0000c301
    8eb8:	0000c318 	.word	0x0000c318

00008ebc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8ebc:	b538      	push	{r3, r4, r5, lr}
    8ebe:	4604      	mov	r4, r0
	__asm__ volatile(
    8ec0:	f04f 0320 	mov.w	r3, #32
    8ec4:	f3ef 8511 	mrs	r5, BASEPRI
    8ec8:	f383 8812 	msr	BASEPRI_MAX, r3
    8ecc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ed0:	481a      	ldr	r0, [pc, #104]	; (8f3c <z_abort_timeout+0x80>)
    8ed2:	f7fe fa9b 	bl	740c <z_spin_lock_valid>
    8ed6:	b968      	cbnz	r0, 8ef4 <z_abort_timeout+0x38>
    8ed8:	4a19      	ldr	r2, [pc, #100]	; (8f40 <z_abort_timeout+0x84>)
    8eda:	491a      	ldr	r1, [pc, #104]	; (8f44 <z_abort_timeout+0x88>)
    8edc:	481a      	ldr	r0, [pc, #104]	; (8f48 <z_abort_timeout+0x8c>)
    8ede:	238e      	movs	r3, #142	; 0x8e
    8ee0:	f001 fd37 	bl	a952 <assert_print>
    8ee4:	4915      	ldr	r1, [pc, #84]	; (8f3c <z_abort_timeout+0x80>)
    8ee6:	4819      	ldr	r0, [pc, #100]	; (8f4c <z_abort_timeout+0x90>)
    8ee8:	f001 fd33 	bl	a952 <assert_print>
    8eec:	4814      	ldr	r0, [pc, #80]	; (8f40 <z_abort_timeout+0x84>)
    8eee:	218e      	movs	r1, #142	; 0x8e
    8ef0:	f001 fd28 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8ef4:	4811      	ldr	r0, [pc, #68]	; (8f3c <z_abort_timeout+0x80>)
    8ef6:	f7fe faa7 	bl	7448 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8efa:	6823      	ldr	r3, [r4, #0]
    8efc:	b1db      	cbz	r3, 8f36 <z_abort_timeout+0x7a>
			remove_timeout(to);
    8efe:	4620      	mov	r0, r4
    8f00:	f7ff fef8 	bl	8cf4 <remove_timeout>
			ret = 0;
    8f04:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f06:	480d      	ldr	r0, [pc, #52]	; (8f3c <z_abort_timeout+0x80>)
    8f08:	f7fe fa8e 	bl	7428 <z_spin_unlock_valid>
    8f0c:	b968      	cbnz	r0, 8f2a <z_abort_timeout+0x6e>
    8f0e:	4a0c      	ldr	r2, [pc, #48]	; (8f40 <z_abort_timeout+0x84>)
    8f10:	490f      	ldr	r1, [pc, #60]	; (8f50 <z_abort_timeout+0x94>)
    8f12:	480d      	ldr	r0, [pc, #52]	; (8f48 <z_abort_timeout+0x8c>)
    8f14:	23b9      	movs	r3, #185	; 0xb9
    8f16:	f001 fd1c 	bl	a952 <assert_print>
    8f1a:	4908      	ldr	r1, [pc, #32]	; (8f3c <z_abort_timeout+0x80>)
    8f1c:	480d      	ldr	r0, [pc, #52]	; (8f54 <z_abort_timeout+0x98>)
    8f1e:	f001 fd18 	bl	a952 <assert_print>
    8f22:	4807      	ldr	r0, [pc, #28]	; (8f40 <z_abort_timeout+0x84>)
    8f24:	21b9      	movs	r1, #185	; 0xb9
    8f26:	f001 fd0d 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8f2a:	f385 8811 	msr	BASEPRI, r5
    8f2e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    8f32:	4620      	mov	r0, r4
    8f34:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    8f36:	f06f 0415 	mvn.w	r4, #21
    8f3a:	e7e4      	b.n	8f06 <z_abort_timeout+0x4a>
    8f3c:	20004f44 	.word	0x20004f44
    8f40:	0000c2d4 	.word	0x0000c2d4
    8f44:	0000c32d 	.word	0x0000c32d
    8f48:	0000c18a 	.word	0x0000c18a
    8f4c:	0000c342 	.word	0x0000c342
    8f50:	0000c301 	.word	0x0000c301
    8f54:	0000c318 	.word	0x0000c318

00008f58 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8f58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8f5a:	f04f 0320 	mov.w	r3, #32
    8f5e:	f3ef 8511 	mrs	r5, BASEPRI
    8f62:	f383 8812 	msr	BASEPRI_MAX, r3
    8f66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8f6a:	4818      	ldr	r0, [pc, #96]	; (8fcc <z_get_next_timeout_expiry+0x74>)
    8f6c:	f7fe fa4e 	bl	740c <z_spin_lock_valid>
    8f70:	b968      	cbnz	r0, 8f8e <z_get_next_timeout_expiry+0x36>
    8f72:	4a17      	ldr	r2, [pc, #92]	; (8fd0 <z_get_next_timeout_expiry+0x78>)
    8f74:	4917      	ldr	r1, [pc, #92]	; (8fd4 <z_get_next_timeout_expiry+0x7c>)
    8f76:	4818      	ldr	r0, [pc, #96]	; (8fd8 <z_get_next_timeout_expiry+0x80>)
    8f78:	238e      	movs	r3, #142	; 0x8e
    8f7a:	f001 fcea 	bl	a952 <assert_print>
    8f7e:	4913      	ldr	r1, [pc, #76]	; (8fcc <z_get_next_timeout_expiry+0x74>)
    8f80:	4816      	ldr	r0, [pc, #88]	; (8fdc <z_get_next_timeout_expiry+0x84>)
    8f82:	f001 fce6 	bl	a952 <assert_print>
    8f86:	4812      	ldr	r0, [pc, #72]	; (8fd0 <z_get_next_timeout_expiry+0x78>)
    8f88:	218e      	movs	r1, #142	; 0x8e
    8f8a:	f001 fcdb 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    8f8e:	480f      	ldr	r0, [pc, #60]	; (8fcc <z_get_next_timeout_expiry+0x74>)
    8f90:	f7fe fa5a 	bl	7448 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    8f94:	f7ff fe86 	bl	8ca4 <next_timeout>
    8f98:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f9a:	480c      	ldr	r0, [pc, #48]	; (8fcc <z_get_next_timeout_expiry+0x74>)
    8f9c:	f7fe fa44 	bl	7428 <z_spin_unlock_valid>
    8fa0:	b968      	cbnz	r0, 8fbe <z_get_next_timeout_expiry+0x66>
    8fa2:	4a0b      	ldr	r2, [pc, #44]	; (8fd0 <z_get_next_timeout_expiry+0x78>)
    8fa4:	490e      	ldr	r1, [pc, #56]	; (8fe0 <z_get_next_timeout_expiry+0x88>)
    8fa6:	480c      	ldr	r0, [pc, #48]	; (8fd8 <z_get_next_timeout_expiry+0x80>)
    8fa8:	23b9      	movs	r3, #185	; 0xb9
    8faa:	f001 fcd2 	bl	a952 <assert_print>
    8fae:	4907      	ldr	r1, [pc, #28]	; (8fcc <z_get_next_timeout_expiry+0x74>)
    8fb0:	480c      	ldr	r0, [pc, #48]	; (8fe4 <z_get_next_timeout_expiry+0x8c>)
    8fb2:	f001 fcce 	bl	a952 <assert_print>
    8fb6:	4806      	ldr	r0, [pc, #24]	; (8fd0 <z_get_next_timeout_expiry+0x78>)
    8fb8:	21b9      	movs	r1, #185	; 0xb9
    8fba:	f001 fcc3 	bl	a944 <assert_post_action>
	__asm__ volatile(
    8fbe:	f385 8811 	msr	BASEPRI, r5
    8fc2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    8fc6:	4620      	mov	r0, r4
    8fc8:	bd38      	pop	{r3, r4, r5, pc}
    8fca:	bf00      	nop
    8fcc:	20004f44 	.word	0x20004f44
    8fd0:	0000c2d4 	.word	0x0000c2d4
    8fd4:	0000c32d 	.word	0x0000c32d
    8fd8:	0000c18a 	.word	0x0000c18a
    8fdc:	0000c342 	.word	0x0000c342
    8fe0:	0000c301 	.word	0x0000c301
    8fe4:	0000c318 	.word	0x0000c318

00008fe8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8fe8:	b570      	push	{r4, r5, r6, lr}
    8fea:	4604      	mov	r4, r0
    8fec:	460d      	mov	r5, r1
	__asm__ volatile(
    8fee:	f04f 0320 	mov.w	r3, #32
    8ff2:	f3ef 8611 	mrs	r6, BASEPRI
    8ff6:	f383 8812 	msr	BASEPRI_MAX, r3
    8ffa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ffe:	481c      	ldr	r0, [pc, #112]	; (9070 <z_set_timeout_expiry+0x88>)
    9000:	f7fe fa04 	bl	740c <z_spin_lock_valid>
    9004:	b968      	cbnz	r0, 9022 <z_set_timeout_expiry+0x3a>
    9006:	4a1b      	ldr	r2, [pc, #108]	; (9074 <z_set_timeout_expiry+0x8c>)
    9008:	491b      	ldr	r1, [pc, #108]	; (9078 <z_set_timeout_expiry+0x90>)
    900a:	481c      	ldr	r0, [pc, #112]	; (907c <z_set_timeout_expiry+0x94>)
    900c:	238e      	movs	r3, #142	; 0x8e
    900e:	f001 fca0 	bl	a952 <assert_print>
    9012:	4917      	ldr	r1, [pc, #92]	; (9070 <z_set_timeout_expiry+0x88>)
    9014:	481a      	ldr	r0, [pc, #104]	; (9080 <z_set_timeout_expiry+0x98>)
    9016:	f001 fc9c 	bl	a952 <assert_print>
    901a:	4816      	ldr	r0, [pc, #88]	; (9074 <z_set_timeout_expiry+0x8c>)
    901c:	218e      	movs	r1, #142	; 0x8e
    901e:	f001 fc91 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    9022:	4813      	ldr	r0, [pc, #76]	; (9070 <z_set_timeout_expiry+0x88>)
    9024:	f7fe fa10 	bl	7448 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    9028:	f7ff fe3c 	bl	8ca4 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    902c:	2801      	cmp	r0, #1
    902e:	dd07      	ble.n	9040 <z_set_timeout_expiry+0x58>
    9030:	42a0      	cmp	r0, r4
    9032:	db05      	blt.n	9040 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9034:	42a0      	cmp	r0, r4
    9036:	4629      	mov	r1, r5
    9038:	bfa8      	it	ge
    903a:	4620      	movge	r0, r4
    903c:	f7fc fe2a 	bl	5c94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9040:	480b      	ldr	r0, [pc, #44]	; (9070 <z_set_timeout_expiry+0x88>)
    9042:	f7fe f9f1 	bl	7428 <z_spin_unlock_valid>
    9046:	b968      	cbnz	r0, 9064 <z_set_timeout_expiry+0x7c>
    9048:	4a0a      	ldr	r2, [pc, #40]	; (9074 <z_set_timeout_expiry+0x8c>)
    904a:	490e      	ldr	r1, [pc, #56]	; (9084 <z_set_timeout_expiry+0x9c>)
    904c:	480b      	ldr	r0, [pc, #44]	; (907c <z_set_timeout_expiry+0x94>)
    904e:	23b9      	movs	r3, #185	; 0xb9
    9050:	f001 fc7f 	bl	a952 <assert_print>
    9054:	4906      	ldr	r1, [pc, #24]	; (9070 <z_set_timeout_expiry+0x88>)
    9056:	480c      	ldr	r0, [pc, #48]	; (9088 <z_set_timeout_expiry+0xa0>)
    9058:	f001 fc7b 	bl	a952 <assert_print>
    905c:	4805      	ldr	r0, [pc, #20]	; (9074 <z_set_timeout_expiry+0x8c>)
    905e:	21b9      	movs	r1, #185	; 0xb9
    9060:	f001 fc70 	bl	a944 <assert_post_action>
	__asm__ volatile(
    9064:	f386 8811 	msr	BASEPRI, r6
    9068:	f3bf 8f6f 	isb	sy
		}
	}
}
    906c:	bd70      	pop	{r4, r5, r6, pc}
    906e:	bf00      	nop
    9070:	20004f44 	.word	0x20004f44
    9074:	0000c2d4 	.word	0x0000c2d4
    9078:	0000c32d 	.word	0x0000c32d
    907c:	0000c18a 	.word	0x0000c18a
    9080:	0000c342 	.word	0x0000c342
    9084:	0000c301 	.word	0x0000c301
    9088:	0000c318 	.word	0x0000c318

0000908c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9090:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9092:	f7ff f823 	bl	80dc <z_time_slice>
	__asm__ volatile(
    9096:	f04f 0320 	mov.w	r3, #32
    909a:	f3ef 8511 	mrs	r5, BASEPRI
    909e:	f383 8812 	msr	BASEPRI_MAX, r3
    90a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90a6:	484c      	ldr	r0, [pc, #304]	; (91d8 <sys_clock_announce+0x14c>)
    90a8:	f7fe f9b0 	bl	740c <z_spin_lock_valid>
    90ac:	b968      	cbnz	r0, 90ca <sys_clock_announce+0x3e>
    90ae:	4a4b      	ldr	r2, [pc, #300]	; (91dc <sys_clock_announce+0x150>)
    90b0:	494b      	ldr	r1, [pc, #300]	; (91e0 <sys_clock_announce+0x154>)
    90b2:	484c      	ldr	r0, [pc, #304]	; (91e4 <sys_clock_announce+0x158>)
    90b4:	238e      	movs	r3, #142	; 0x8e
    90b6:	f001 fc4c 	bl	a952 <assert_print>
    90ba:	4947      	ldr	r1, [pc, #284]	; (91d8 <sys_clock_announce+0x14c>)
    90bc:	484a      	ldr	r0, [pc, #296]	; (91e8 <sys_clock_announce+0x15c>)
    90be:	f001 fc48 	bl	a952 <assert_print>
    90c2:	4846      	ldr	r0, [pc, #280]	; (91dc <sys_clock_announce+0x150>)
    90c4:	218e      	movs	r1, #142	; 0x8e
    90c6:	f001 fc3d 	bl	a944 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    90ca:	4f48      	ldr	r7, [pc, #288]	; (91ec <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    90cc:	4842      	ldr	r0, [pc, #264]	; (91d8 <sys_clock_announce+0x14c>)
	return list->head == list;
    90ce:	f8df 8120 	ldr.w	r8, [pc, #288]	; 91f0 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    90d2:	4e48      	ldr	r6, [pc, #288]	; (91f4 <sys_clock_announce+0x168>)
    90d4:	f7fe f9b8 	bl	7448 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    90d8:	603c      	str	r4, [r7, #0]
    90da:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    90de:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    90e0:	4544      	cmp	r4, r8
		curr_tick += dt;
    90e2:	e9d6 1e00 	ldrd	r1, lr, [r6]
    90e6:	ea4f 70e2 	mov.w	r0, r2, asr #31
    90ea:	d00b      	beq.n	9104 <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    90ec:	b154      	cbz	r4, 9104 <sys_clock_announce+0x78>
    90ee:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    90f2:	429a      	cmp	r2, r3
    90f4:	eb70 090c 	sbcs.w	r9, r0, ip
    90f8:	da28      	bge.n	914c <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    90fa:	1a9b      	subs	r3, r3, r2
    90fc:	eb6c 0c00 	sbc.w	ip, ip, r0
    9100:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    9104:	1851      	adds	r1, r2, r1
    9106:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    910a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    910c:	e9c6 1000 	strd	r1, r0, [r6]
	announce_remaining = 0;
    9110:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9112:	f7ff fdc7 	bl	8ca4 <next_timeout>
    9116:	4621      	mov	r1, r4
    9118:	f7fc fdbc 	bl	5c94 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    911c:	482e      	ldr	r0, [pc, #184]	; (91d8 <sys_clock_announce+0x14c>)
    911e:	f7fe f983 	bl	7428 <z_spin_unlock_valid>
    9122:	b968      	cbnz	r0, 9140 <sys_clock_announce+0xb4>
    9124:	4a2d      	ldr	r2, [pc, #180]	; (91dc <sys_clock_announce+0x150>)
    9126:	4934      	ldr	r1, [pc, #208]	; (91f8 <sys_clock_announce+0x16c>)
    9128:	482e      	ldr	r0, [pc, #184]	; (91e4 <sys_clock_announce+0x158>)
    912a:	23b9      	movs	r3, #185	; 0xb9
    912c:	f001 fc11 	bl	a952 <assert_print>
    9130:	4929      	ldr	r1, [pc, #164]	; (91d8 <sys_clock_announce+0x14c>)
    9132:	4832      	ldr	r0, [pc, #200]	; (91fc <sys_clock_announce+0x170>)
    9134:	f001 fc0d 	bl	a952 <assert_print>
    9138:	4828      	ldr	r0, [pc, #160]	; (91dc <sys_clock_announce+0x150>)
    913a:	21b9      	movs	r1, #185	; 0xb9
    913c:	f001 fc02 	bl	a944 <assert_post_action>
	__asm__ volatile(
    9140:	f385 8811 	msr	BASEPRI, r5
    9144:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    914c:	1859      	adds	r1, r3, r1
    914e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    9152:	1ad3      	subs	r3, r2, r3
    9154:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    9156:	2200      	movs	r2, #0
    9158:	2300      	movs	r3, #0
		curr_tick += dt;
    915a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    915e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    9162:	4620      	mov	r0, r4
    9164:	f7ff fdc6 	bl	8cf4 <remove_timeout>
    9168:	481b      	ldr	r0, [pc, #108]	; (91d8 <sys_clock_announce+0x14c>)
    916a:	f7fe f95d 	bl	7428 <z_spin_unlock_valid>
    916e:	b968      	cbnz	r0, 918c <sys_clock_announce+0x100>
    9170:	4a1a      	ldr	r2, [pc, #104]	; (91dc <sys_clock_announce+0x150>)
    9172:	4921      	ldr	r1, [pc, #132]	; (91f8 <sys_clock_announce+0x16c>)
    9174:	481b      	ldr	r0, [pc, #108]	; (91e4 <sys_clock_announce+0x158>)
    9176:	23b9      	movs	r3, #185	; 0xb9
    9178:	f001 fbeb 	bl	a952 <assert_print>
    917c:	4916      	ldr	r1, [pc, #88]	; (91d8 <sys_clock_announce+0x14c>)
    917e:	481f      	ldr	r0, [pc, #124]	; (91fc <sys_clock_announce+0x170>)
    9180:	f001 fbe7 	bl	a952 <assert_print>
    9184:	4815      	ldr	r0, [pc, #84]	; (91dc <sys_clock_announce+0x150>)
    9186:	21b9      	movs	r1, #185	; 0xb9
    9188:	f001 fbdc 	bl	a944 <assert_post_action>
    918c:	f385 8811 	msr	BASEPRI, r5
    9190:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9194:	68a3      	ldr	r3, [r4, #8]
    9196:	4620      	mov	r0, r4
    9198:	4798      	blx	r3
	__asm__ volatile(
    919a:	f04f 0320 	mov.w	r3, #32
    919e:	f3ef 8511 	mrs	r5, BASEPRI
    91a2:	f383 8812 	msr	BASEPRI_MAX, r3
    91a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91aa:	480b      	ldr	r0, [pc, #44]	; (91d8 <sys_clock_announce+0x14c>)
    91ac:	f7fe f92e 	bl	740c <z_spin_lock_valid>
    91b0:	b968      	cbnz	r0, 91ce <sys_clock_announce+0x142>
    91b2:	4a0a      	ldr	r2, [pc, #40]	; (91dc <sys_clock_announce+0x150>)
    91b4:	490a      	ldr	r1, [pc, #40]	; (91e0 <sys_clock_announce+0x154>)
    91b6:	480b      	ldr	r0, [pc, #44]	; (91e4 <sys_clock_announce+0x158>)
    91b8:	238e      	movs	r3, #142	; 0x8e
    91ba:	f001 fbca 	bl	a952 <assert_print>
    91be:	4906      	ldr	r1, [pc, #24]	; (91d8 <sys_clock_announce+0x14c>)
    91c0:	4809      	ldr	r0, [pc, #36]	; (91e8 <sys_clock_announce+0x15c>)
    91c2:	f001 fbc6 	bl	a952 <assert_print>
    91c6:	4805      	ldr	r0, [pc, #20]	; (91dc <sys_clock_announce+0x150>)
    91c8:	218e      	movs	r1, #142	; 0x8e
    91ca:	f001 fbbb 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    91ce:	4802      	ldr	r0, [pc, #8]	; (91d8 <sys_clock_announce+0x14c>)
    91d0:	f7fe f93a 	bl	7448 <z_spin_lock_set_owner>
	return k;
    91d4:	e781      	b.n	90da <sys_clock_announce+0x4e>
    91d6:	bf00      	nop
    91d8:	20004f44 	.word	0x20004f44
    91dc:	0000c2d4 	.word	0x0000c2d4
    91e0:	0000c32d 	.word	0x0000c32d
    91e4:	0000c18a 	.word	0x0000c18a
    91e8:	0000c342 	.word	0x0000c342
    91ec:	20004f40 	.word	0x20004f40
    91f0:	200000e8 	.word	0x200000e8
    91f4:	200047c0 	.word	0x200047c0
    91f8:	0000c301 	.word	0x0000c301
    91fc:	0000c318 	.word	0x0000c318

00009200 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9200:	b570      	push	{r4, r5, r6, lr}
    9202:	f04f 0320 	mov.w	r3, #32
    9206:	f3ef 8611 	mrs	r6, BASEPRI
    920a:	f383 8812 	msr	BASEPRI_MAX, r3
    920e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9212:	481b      	ldr	r0, [pc, #108]	; (9280 <sys_clock_tick_get+0x80>)
    9214:	f7fe f8fa 	bl	740c <z_spin_lock_valid>
    9218:	b968      	cbnz	r0, 9236 <sys_clock_tick_get+0x36>
    921a:	4a1a      	ldr	r2, [pc, #104]	; (9284 <sys_clock_tick_get+0x84>)
    921c:	491a      	ldr	r1, [pc, #104]	; (9288 <sys_clock_tick_get+0x88>)
    921e:	481b      	ldr	r0, [pc, #108]	; (928c <sys_clock_tick_get+0x8c>)
    9220:	238e      	movs	r3, #142	; 0x8e
    9222:	f001 fb96 	bl	a952 <assert_print>
    9226:	4916      	ldr	r1, [pc, #88]	; (9280 <sys_clock_tick_get+0x80>)
    9228:	4819      	ldr	r0, [pc, #100]	; (9290 <sys_clock_tick_get+0x90>)
    922a:	f001 fb92 	bl	a952 <assert_print>
    922e:	4815      	ldr	r0, [pc, #84]	; (9284 <sys_clock_tick_get+0x84>)
    9230:	218e      	movs	r1, #142	; 0x8e
    9232:	f001 fb87 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    9236:	4812      	ldr	r0, [pc, #72]	; (9280 <sys_clock_tick_get+0x80>)
    9238:	f7fe f906 	bl	7448 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    923c:	f7fc fd5c 	bl	5cf8 <sys_clock_elapsed>
    9240:	4a14      	ldr	r2, [pc, #80]	; (9294 <sys_clock_tick_get+0x94>)
    9242:	e9d2 4500 	ldrd	r4, r5, [r2]
    9246:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9248:	480d      	ldr	r0, [pc, #52]	; (9280 <sys_clock_tick_get+0x80>)
    924a:	f145 0500 	adc.w	r5, r5, #0
    924e:	f7fe f8eb 	bl	7428 <z_spin_unlock_valid>
    9252:	b968      	cbnz	r0, 9270 <sys_clock_tick_get+0x70>
    9254:	4a0b      	ldr	r2, [pc, #44]	; (9284 <sys_clock_tick_get+0x84>)
    9256:	4910      	ldr	r1, [pc, #64]	; (9298 <sys_clock_tick_get+0x98>)
    9258:	480c      	ldr	r0, [pc, #48]	; (928c <sys_clock_tick_get+0x8c>)
    925a:	23b9      	movs	r3, #185	; 0xb9
    925c:	f001 fb79 	bl	a952 <assert_print>
    9260:	4907      	ldr	r1, [pc, #28]	; (9280 <sys_clock_tick_get+0x80>)
    9262:	480e      	ldr	r0, [pc, #56]	; (929c <sys_clock_tick_get+0x9c>)
    9264:	f001 fb75 	bl	a952 <assert_print>
    9268:	4806      	ldr	r0, [pc, #24]	; (9284 <sys_clock_tick_get+0x84>)
    926a:	21b9      	movs	r1, #185	; 0xb9
    926c:	f001 fb6a 	bl	a944 <assert_post_action>
	__asm__ volatile(
    9270:	f386 8811 	msr	BASEPRI, r6
    9274:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9278:	4620      	mov	r0, r4
    927a:	4629      	mov	r1, r5
    927c:	bd70      	pop	{r4, r5, r6, pc}
    927e:	bf00      	nop
    9280:	20004f44 	.word	0x20004f44
    9284:	0000c2d4 	.word	0x0000c2d4
    9288:	0000c32d 	.word	0x0000c32d
    928c:	0000c18a 	.word	0x0000c18a
    9290:	0000c342 	.word	0x0000c342
    9294:	200047c0 	.word	0x200047c0
    9298:	0000c301 	.word	0x0000c301
    929c:	0000c318 	.word	0x0000c318

000092a0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    92a0:	b570      	push	{r4, r5, r6, lr}
    92a2:	4604      	mov	r4, r0
	__asm__ volatile(
    92a4:	f04f 0320 	mov.w	r3, #32
    92a8:	f3ef 8511 	mrs	r5, BASEPRI
    92ac:	f383 8812 	msr	BASEPRI_MAX, r3
    92b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92b4:	484d      	ldr	r0, [pc, #308]	; (93ec <z_timer_expiration_handler+0x14c>)
    92b6:	f7fe f8a9 	bl	740c <z_spin_lock_valid>
    92ba:	b968      	cbnz	r0, 92d8 <z_timer_expiration_handler+0x38>
    92bc:	4a4c      	ldr	r2, [pc, #304]	; (93f0 <z_timer_expiration_handler+0x150>)
    92be:	494d      	ldr	r1, [pc, #308]	; (93f4 <z_timer_expiration_handler+0x154>)
    92c0:	484d      	ldr	r0, [pc, #308]	; (93f8 <z_timer_expiration_handler+0x158>)
    92c2:	238e      	movs	r3, #142	; 0x8e
    92c4:	f001 fb45 	bl	a952 <assert_print>
    92c8:	4948      	ldr	r1, [pc, #288]	; (93ec <z_timer_expiration_handler+0x14c>)
    92ca:	484c      	ldr	r0, [pc, #304]	; (93fc <z_timer_expiration_handler+0x15c>)
    92cc:	f001 fb41 	bl	a952 <assert_print>
    92d0:	4847      	ldr	r0, [pc, #284]	; (93f0 <z_timer_expiration_handler+0x150>)
    92d2:	218e      	movs	r1, #142	; 0x8e
    92d4:	f001 fb36 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    92d8:	4844      	ldr	r0, [pc, #272]	; (93ec <z_timer_expiration_handler+0x14c>)
    92da:	f7fe f8b5 	bl	7448 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    92de:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    92e2:	3301      	adds	r3, #1
    92e4:	f142 0200 	adc.w	r2, r2, #0
    92e8:	2b02      	cmp	r3, #2
    92ea:	f172 0200 	sbcs.w	r2, r2, #0
    92ee:	d305      	bcc.n	92fc <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    92f0:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    92f4:	4942      	ldr	r1, [pc, #264]	; (9400 <z_timer_expiration_handler+0x160>)
    92f6:	4620      	mov	r0, r4
    92f8:	f7ff fd16 	bl	8d28 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    92fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    92fe:	3301      	adds	r3, #1
    9300:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9302:	6a23      	ldr	r3, [r4, #32]
    9304:	2b00      	cmp	r3, #0
    9306:	d035      	beq.n	9374 <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9308:	4838      	ldr	r0, [pc, #224]	; (93ec <z_timer_expiration_handler+0x14c>)
    930a:	f7fe f88d 	bl	7428 <z_spin_unlock_valid>
    930e:	b968      	cbnz	r0, 932c <z_timer_expiration_handler+0x8c>
    9310:	4a37      	ldr	r2, [pc, #220]	; (93f0 <z_timer_expiration_handler+0x150>)
    9312:	493c      	ldr	r1, [pc, #240]	; (9404 <z_timer_expiration_handler+0x164>)
    9314:	4838      	ldr	r0, [pc, #224]	; (93f8 <z_timer_expiration_handler+0x158>)
    9316:	23b9      	movs	r3, #185	; 0xb9
    9318:	f001 fb1b 	bl	a952 <assert_print>
    931c:	4933      	ldr	r1, [pc, #204]	; (93ec <z_timer_expiration_handler+0x14c>)
    931e:	483a      	ldr	r0, [pc, #232]	; (9408 <z_timer_expiration_handler+0x168>)
    9320:	f001 fb17 	bl	a952 <assert_print>
    9324:	4832      	ldr	r0, [pc, #200]	; (93f0 <z_timer_expiration_handler+0x150>)
    9326:	21b9      	movs	r1, #185	; 0xb9
    9328:	f001 fb0c 	bl	a944 <assert_post_action>
	__asm__ volatile(
    932c:	f385 8811 	msr	BASEPRI, r5
    9330:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9334:	6a23      	ldr	r3, [r4, #32]
    9336:	4620      	mov	r0, r4
    9338:	4798      	blx	r3
	__asm__ volatile(
    933a:	f04f 0320 	mov.w	r3, #32
    933e:	f3ef 8511 	mrs	r5, BASEPRI
    9342:	f383 8812 	msr	BASEPRI_MAX, r3
    9346:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    934a:	4828      	ldr	r0, [pc, #160]	; (93ec <z_timer_expiration_handler+0x14c>)
    934c:	f7fe f85e 	bl	740c <z_spin_lock_valid>
    9350:	b968      	cbnz	r0, 936e <z_timer_expiration_handler+0xce>
    9352:	4a27      	ldr	r2, [pc, #156]	; (93f0 <z_timer_expiration_handler+0x150>)
    9354:	4927      	ldr	r1, [pc, #156]	; (93f4 <z_timer_expiration_handler+0x154>)
    9356:	4828      	ldr	r0, [pc, #160]	; (93f8 <z_timer_expiration_handler+0x158>)
    9358:	238e      	movs	r3, #142	; 0x8e
    935a:	f001 fafa 	bl	a952 <assert_print>
    935e:	4923      	ldr	r1, [pc, #140]	; (93ec <z_timer_expiration_handler+0x14c>)
    9360:	4826      	ldr	r0, [pc, #152]	; (93fc <z_timer_expiration_handler+0x15c>)
    9362:	f001 faf6 	bl	a952 <assert_print>
    9366:	4822      	ldr	r0, [pc, #136]	; (93f0 <z_timer_expiration_handler+0x150>)
    9368:	218e      	movs	r1, #142	; 0x8e
    936a:	f001 faeb 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    936e:	481f      	ldr	r0, [pc, #124]	; (93ec <z_timer_expiration_handler+0x14c>)
    9370:	f7fe f86a 	bl	7448 <z_spin_lock_set_owner>
	return list->head == list;
    9374:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9378:	42a6      	cmp	r6, r4
    937a:	d000      	beq.n	937e <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    937c:	b9b6      	cbnz	r6, 93ac <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    937e:	481b      	ldr	r0, [pc, #108]	; (93ec <z_timer_expiration_handler+0x14c>)
    9380:	f7fe f852 	bl	7428 <z_spin_unlock_valid>
    9384:	b968      	cbnz	r0, 93a2 <z_timer_expiration_handler+0x102>
    9386:	4a1a      	ldr	r2, [pc, #104]	; (93f0 <z_timer_expiration_handler+0x150>)
    9388:	491e      	ldr	r1, [pc, #120]	; (9404 <z_timer_expiration_handler+0x164>)
    938a:	481b      	ldr	r0, [pc, #108]	; (93f8 <z_timer_expiration_handler+0x158>)
    938c:	23b9      	movs	r3, #185	; 0xb9
    938e:	f001 fae0 	bl	a952 <assert_print>
    9392:	4916      	ldr	r1, [pc, #88]	; (93ec <z_timer_expiration_handler+0x14c>)
    9394:	481c      	ldr	r0, [pc, #112]	; (9408 <z_timer_expiration_handler+0x168>)
    9396:	f001 fadc 	bl	a952 <assert_print>
    939a:	4815      	ldr	r0, [pc, #84]	; (93f0 <z_timer_expiration_handler+0x150>)
    939c:	21b9      	movs	r1, #185	; 0xb9
    939e:	f001 fad1 	bl	a944 <assert_post_action>
	__asm__ volatile(
    93a2:	f385 8811 	msr	BASEPRI, r5
    93a6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    93aa:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    93ac:	4630      	mov	r0, r6
    93ae:	f7fe fc51 	bl	7c54 <z_unpend_thread_no_timeout>
    93b2:	2300      	movs	r3, #0
    93b4:	480d      	ldr	r0, [pc, #52]	; (93ec <z_timer_expiration_handler+0x14c>)
    93b6:	67b3      	str	r3, [r6, #120]	; 0x78
    93b8:	f7fe f836 	bl	7428 <z_spin_unlock_valid>
    93bc:	b968      	cbnz	r0, 93da <z_timer_expiration_handler+0x13a>
    93be:	4a0c      	ldr	r2, [pc, #48]	; (93f0 <z_timer_expiration_handler+0x150>)
    93c0:	4910      	ldr	r1, [pc, #64]	; (9404 <z_timer_expiration_handler+0x164>)
    93c2:	480d      	ldr	r0, [pc, #52]	; (93f8 <z_timer_expiration_handler+0x158>)
    93c4:	23b9      	movs	r3, #185	; 0xb9
    93c6:	f001 fac4 	bl	a952 <assert_print>
    93ca:	4908      	ldr	r1, [pc, #32]	; (93ec <z_timer_expiration_handler+0x14c>)
    93cc:	480e      	ldr	r0, [pc, #56]	; (9408 <z_timer_expiration_handler+0x168>)
    93ce:	f001 fac0 	bl	a952 <assert_print>
    93d2:	4807      	ldr	r0, [pc, #28]	; (93f0 <z_timer_expiration_handler+0x150>)
    93d4:	21b9      	movs	r1, #185	; 0xb9
    93d6:	f001 fab5 	bl	a944 <assert_post_action>
    93da:	f385 8811 	msr	BASEPRI, r5
    93de:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    93e2:	4630      	mov	r0, r6
}
    93e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    93e8:	f7fe bbec 	b.w	7bc4 <z_ready_thread>
    93ec:	20004f48 	.word	0x20004f48
    93f0:	0000c2d4 	.word	0x0000c2d4
    93f4:	0000c32d 	.word	0x0000c32d
    93f8:	0000c18a 	.word	0x0000c18a
    93fc:	0000c342 	.word	0x0000c342
    9400:	000092a1 	.word	0x000092a1
    9404:	0000c301 	.word	0x0000c301
    9408:	0000c318 	.word	0x0000c318

0000940c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    940c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9414:	bf08      	it	eq
    9416:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    941a:	4605      	mov	r5, r0
    941c:	4614      	mov	r4, r2
    941e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    9422:	4619      	mov	r1, r3
    9424:	4691      	mov	r9, r2
    9426:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9428:	d037      	beq.n	949a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    942a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    942e:	bf08      	it	eq
    9430:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    9434:	4637      	mov	r7, r6
    9436:	4682      	mov	sl, r0
    9438:	d011      	beq.n	945e <z_impl_k_timer_start+0x52>
    943a:	ea50 0306 	orrs.w	r3, r0, r6
    943e:	d00e      	beq.n	945e <z_impl_k_timer_start+0x52>
    9440:	1c72      	adds	r2, r6, #1
    9442:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
    9446:	db0a      	blt.n	945e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    9448:	2e02      	cmp	r6, #2
    944a:	4684      	mov	ip, r0
    944c:	f170 0000 	sbcs.w	r0, r0, #0
    9450:	bfbc      	itt	lt
    9452:	2702      	movlt	r7, #2
    9454:	f04f 0c00 	movlt.w	ip, #0
    9458:	3f01      	subs	r7, #1
    945a:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    945e:	1c63      	adds	r3, r4, #1
    9460:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    9464:	db0a      	blt.n	947c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9466:	2c01      	cmp	r4, #1
    9468:	f171 0300 	sbcs.w	r3, r1, #0
    946c:	4622      	mov	r2, r4
    946e:	bfbc      	itt	lt
    9470:	2201      	movlt	r2, #1
    9472:	2100      	movlt	r1, #0
    9474:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    9478:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    947c:	4628      	mov	r0, r5
    947e:	f7ff fd1d 	bl	8ebc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9482:	2300      	movs	r3, #0
    9484:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
    9486:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    948a:	464a      	mov	r2, r9
    948c:	4643      	mov	r3, r8
    948e:	4628      	mov	r0, r5
    9490:	4903      	ldr	r1, [pc, #12]	; (94a0 <z_impl_k_timer_start+0x94>)
		     duration);
}
    9492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9496:	f7ff bc47 	b.w	8d28 <z_add_timeout>
}
    949a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    949e:	bf00      	nop
    94a0:	000092a1 	.word	0x000092a1

000094a4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    94a4:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
    94a6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    94aa:	4606      	mov	r6, r0
    94ac:	460d      	mov	r5, r1
    94ae:	d20b      	bcs.n	94c8 <z_heap_aligned_alloc+0x24>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    94b0:	f04f 0800 	mov.w	r8, #0
    94b4:	f04f 0900 	mov.w	r9, #0
    94b8:	e9cd 8900 	strd	r8, r9, [sp]
    94bc:	f041 0104 	orr.w	r1, r1, #4
    94c0:	f000 f89c 	bl	95fc <k_heap_aligned_alloc>
	if (mem == NULL) {
    94c4:	4604      	mov	r4, r0
    94c6:	b920      	cbnz	r0, 94d2 <z_heap_aligned_alloc+0x2e>
		return NULL;
    94c8:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
    94ca:	4620      	mov	r0, r4
    94cc:	b002      	add	sp, #8
    94ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
    94d2:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
    94d6:	2d00      	cmp	r5, #0
    94d8:	d0f7      	beq.n	94ca <z_heap_aligned_alloc+0x26>
    94da:	1e6b      	subs	r3, r5, #1
    94dc:	421c      	tst	r4, r3
    94de:	d0f4      	beq.n	94ca <z_heap_aligned_alloc+0x26>
    94e0:	2325      	movs	r3, #37	; 0x25
    94e2:	4a07      	ldr	r2, [pc, #28]	; (9500 <z_heap_aligned_alloc+0x5c>)
    94e4:	4907      	ldr	r1, [pc, #28]	; (9504 <z_heap_aligned_alloc+0x60>)
    94e6:	4808      	ldr	r0, [pc, #32]	; (9508 <z_heap_aligned_alloc+0x64>)
    94e8:	f001 fa33 	bl	a952 <assert_print>
    94ec:	4621      	mov	r1, r4
    94ee:	4807      	ldr	r0, [pc, #28]	; (950c <z_heap_aligned_alloc+0x68>)
    94f0:	462a      	mov	r2, r5
    94f2:	f001 fa2e 	bl	a952 <assert_print>
    94f6:	4802      	ldr	r0, [pc, #8]	; (9500 <z_heap_aligned_alloc+0x5c>)
    94f8:	2125      	movs	r1, #37	; 0x25
    94fa:	f001 fa23 	bl	a944 <assert_post_action>
    94fe:	e7e4      	b.n	94ca <z_heap_aligned_alloc+0x26>
    9500:	0000d9fb 	.word	0x0000d9fb
    9504:	0000da1f 	.word	0x0000da1f
    9508:	0000c18a 	.word	0x0000c18a
    950c:	0000da51 	.word	0x0000da51

00009510 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
    9510:	2803      	cmp	r0, #3
{
    9512:	b538      	push	{r3, r4, r5, lr}
    9514:	4604      	mov	r4, r0
    9516:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
    9518:	d901      	bls.n	951e <k_aligned_alloc+0xe>
    951a:	0783      	lsls	r3, r0, #30
    951c:	d00c      	beq.n	9538 <k_aligned_alloc+0x28>
    951e:	4912      	ldr	r1, [pc, #72]	; (9568 <k_aligned_alloc+0x58>)
    9520:	4a12      	ldr	r2, [pc, #72]	; (956c <k_aligned_alloc+0x5c>)
    9522:	4813      	ldr	r0, [pc, #76]	; (9570 <k_aligned_alloc+0x60>)
    9524:	2342      	movs	r3, #66	; 0x42
    9526:	f001 fa14 	bl	a952 <assert_print>
    952a:	4812      	ldr	r0, [pc, #72]	; (9574 <k_aligned_alloc+0x64>)
    952c:	f001 fa11 	bl	a952 <assert_print>
    9530:	480e      	ldr	r0, [pc, #56]	; (956c <k_aligned_alloc+0x5c>)
    9532:	2142      	movs	r1, #66	; 0x42
    9534:	f001 fa06 	bl	a944 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
    9538:	1e63      	subs	r3, r4, #1
    953a:	4223      	tst	r3, r4
    953c:	d00c      	beq.n	9558 <k_aligned_alloc+0x48>
    953e:	490e      	ldr	r1, [pc, #56]	; (9578 <k_aligned_alloc+0x68>)
    9540:	4a0a      	ldr	r2, [pc, #40]	; (956c <k_aligned_alloc+0x5c>)
    9542:	480b      	ldr	r0, [pc, #44]	; (9570 <k_aligned_alloc+0x60>)
    9544:	2346      	movs	r3, #70	; 0x46
    9546:	f001 fa04 	bl	a952 <assert_print>
    954a:	480c      	ldr	r0, [pc, #48]	; (957c <k_aligned_alloc+0x6c>)
    954c:	f001 fa01 	bl	a952 <assert_print>
    9550:	4806      	ldr	r0, [pc, #24]	; (956c <k_aligned_alloc+0x5c>)
    9552:	2146      	movs	r1, #70	; 0x46
    9554:	f001 f9f6 	bl	a944 <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9558:	462a      	mov	r2, r5
    955a:	4621      	mov	r1, r4
    955c:	4808      	ldr	r0, [pc, #32]	; (9580 <k_aligned_alloc+0x70>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
    955e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
    9562:	f7ff bf9f 	b.w	94a4 <z_heap_aligned_alloc>
    9566:	bf00      	nop
    9568:	0000da79 	.word	0x0000da79
    956c:	0000d9fb 	.word	0x0000d9fb
    9570:	0000c18a 	.word	0x0000c18a
    9574:	0000dab6 	.word	0x0000dab6
    9578:	0000c426 	.word	0x0000c426
    957c:	0000c441 	.word	0x0000c441
    9580:	200041c8 	.word	0x200041c8

00009584 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9584:	4b01      	ldr	r3, [pc, #4]	; (958c <k_thread_system_pool_assign+0x8>)
    9586:	6703      	str	r3, [r0, #112]	; 0x70
}
    9588:	4770      	bx	lr
    958a:	bf00      	nop
    958c:	200041c8 	.word	0x200041c8

00009590 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9590:	4a02      	ldr	r2, [pc, #8]	; (959c <boot_banner+0xc>)
    9592:	4903      	ldr	r1, [pc, #12]	; (95a0 <boot_banner+0x10>)
    9594:	4803      	ldr	r0, [pc, #12]	; (95a4 <boot_banner+0x14>)
    9596:	f001 b88f 	b.w	a6b8 <printk>
    959a:	bf00      	nop
    959c:	0000d803 	.word	0x0000d803
    95a0:	0000dae3 	.word	0x0000dae3
    95a4:	0000daf0 	.word	0x0000daf0

000095a8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    95a8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    95aa:	4c0e      	ldr	r4, [pc, #56]	; (95e4 <statics_init+0x3c>)
    95ac:	4d0e      	ldr	r5, [pc, #56]	; (95e8 <statics_init+0x40>)
    95ae:	4e0f      	ldr	r6, [pc, #60]	; (95ec <statics_init+0x44>)
    95b0:	42ac      	cmp	r4, r5
    95b2:	d90c      	bls.n	95ce <statics_init+0x26>
    95b4:	490e      	ldr	r1, [pc, #56]	; (95f0 <statics_init+0x48>)
    95b6:	480f      	ldr	r0, [pc, #60]	; (95f4 <statics_init+0x4c>)
    95b8:	2318      	movs	r3, #24
    95ba:	4632      	mov	r2, r6
    95bc:	f001 f9c9 	bl	a952 <assert_print>
    95c0:	480d      	ldr	r0, [pc, #52]	; (95f8 <statics_init+0x50>)
    95c2:	f001 f9c6 	bl	a952 <assert_print>
    95c6:	2118      	movs	r1, #24
    95c8:	4630      	mov	r0, r6
    95ca:	f001 f9bb 	bl	a944 <assert_post_action>
    95ce:	42ac      	cmp	r4, r5
    95d0:	d301      	bcc.n	95d6 <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    95d2:	2000      	movs	r0, #0
    95d4:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    95d6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    95da:	4620      	mov	r0, r4
    95dc:	f001 ff81 	bl	b4e2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    95e0:	3418      	adds	r4, #24
    95e2:	e7e5      	b.n	95b0 <statics_init+0x8>
    95e4:	200041c8 	.word	0x200041c8
    95e8:	200041e0 	.word	0x200041e0
    95ec:	0000db17 	.word	0x0000db17
    95f0:	0000db39 	.word	0x0000db39
    95f4:	0000c18a 	.word	0x0000c18a
    95f8:	0000d5d8 	.word	0x0000d5d8

000095fc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    95fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9600:	b085      	sub	sp, #20
    9602:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
    9606:	4606      	mov	r6, r0
    9608:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    960a:	4648      	mov	r0, r9
    960c:	4641      	mov	r1, r8
{
    960e:	4693      	mov	fp, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9610:	f001 ff18 	bl	b444 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    9614:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    9618:	4682      	mov	sl, r0
    961a:	460f      	mov	r7, r1
	__asm__ volatile(
    961c:	f04f 0320 	mov.w	r3, #32
    9620:	f3ef 8511 	mrs	r5, BASEPRI
    9624:	f383 8812 	msr	BASEPRI_MAX, r3
    9628:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    962c:	4620      	mov	r0, r4
    962e:	f7fd feed 	bl	740c <z_spin_lock_valid>
    9632:	b968      	cbnz	r0, 9650 <k_heap_aligned_alloc+0x54>
    9634:	4a3c      	ldr	r2, [pc, #240]	; (9728 <k_heap_aligned_alloc+0x12c>)
    9636:	493d      	ldr	r1, [pc, #244]	; (972c <k_heap_aligned_alloc+0x130>)
    9638:	483d      	ldr	r0, [pc, #244]	; (9730 <k_heap_aligned_alloc+0x134>)
    963a:	238e      	movs	r3, #142	; 0x8e
    963c:	f001 f989 	bl	a952 <assert_print>
    9640:	483c      	ldr	r0, [pc, #240]	; (9734 <k_heap_aligned_alloc+0x138>)
    9642:	4621      	mov	r1, r4
    9644:	f001 f985 	bl	a952 <assert_print>
    9648:	4837      	ldr	r0, [pc, #220]	; (9728 <k_heap_aligned_alloc+0x12c>)
    964a:	218e      	movs	r1, #142	; 0x8e
    964c:	f001 f97a 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    9650:	4620      	mov	r0, r4
    9652:	f7fd fef9 	bl	7448 <z_spin_lock_set_owner>
    9656:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
    965a:	b17b      	cbz	r3, 967c <k_heap_aligned_alloc+0x80>
    965c:	ea59 0808 	orrs.w	r8, r9, r8
    9660:	d00c      	beq.n	967c <k_heap_aligned_alloc+0x80>
    9662:	4935      	ldr	r1, [pc, #212]	; (9738 <k_heap_aligned_alloc+0x13c>)
    9664:	4a35      	ldr	r2, [pc, #212]	; (973c <k_heap_aligned_alloc+0x140>)
    9666:	4832      	ldr	r0, [pc, #200]	; (9730 <k_heap_aligned_alloc+0x134>)
    9668:	2349      	movs	r3, #73	; 0x49
    966a:	f001 f972 	bl	a952 <assert_print>
    966e:	4834      	ldr	r0, [pc, #208]	; (9740 <k_heap_aligned_alloc+0x144>)
    9670:	f001 f96f 	bl	a952 <assert_print>
    9674:	4831      	ldr	r0, [pc, #196]	; (973c <k_heap_aligned_alloc+0x140>)
    9676:	2149      	movs	r1, #73	; 0x49
    9678:	f001 f964 	bl	a944 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    967c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 9728 <k_heap_aligned_alloc+0x12c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    9680:	9903      	ldr	r1, [sp, #12]
    9682:	465a      	mov	r2, fp
    9684:	4630      	mov	r0, r6
    9686:	f7f8 fcff 	bl	2088 <sys_heap_aligned_alloc>
    968a:	4680      	mov	r8, r0

		now = sys_clock_tick_get();
    968c:	f7ff fdb8 	bl	9200 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    9690:	f1b8 0f00 	cmp.w	r8, #0
    9694:	d019      	beq.n	96ca <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9696:	4620      	mov	r0, r4
    9698:	f7fd fec6 	bl	7428 <z_spin_unlock_valid>
    969c:	b968      	cbnz	r0, 96ba <k_heap_aligned_alloc+0xbe>
    969e:	4a22      	ldr	r2, [pc, #136]	; (9728 <k_heap_aligned_alloc+0x12c>)
    96a0:	4928      	ldr	r1, [pc, #160]	; (9744 <k_heap_aligned_alloc+0x148>)
    96a2:	4823      	ldr	r0, [pc, #140]	; (9730 <k_heap_aligned_alloc+0x134>)
    96a4:	23b9      	movs	r3, #185	; 0xb9
    96a6:	f001 f954 	bl	a952 <assert_print>
    96aa:	4827      	ldr	r0, [pc, #156]	; (9748 <k_heap_aligned_alloc+0x14c>)
    96ac:	4621      	mov	r1, r4
    96ae:	f001 f950 	bl	a952 <assert_print>
    96b2:	481d      	ldr	r0, [pc, #116]	; (9728 <k_heap_aligned_alloc+0x12c>)
    96b4:	21b9      	movs	r1, #185	; 0xb9
    96b6:	f001 f945 	bl	a944 <assert_post_action>
	__asm__ volatile(
    96ba:	f385 8811 	msr	BASEPRI, r5
    96be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    96c2:	4640      	mov	r0, r8
    96c4:	b005      	add	sp, #20
    96c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    96ca:	ebba 0000 	subs.w	r0, sl, r0
    96ce:	eb67 0101 	sbc.w	r1, r7, r1
    96d2:	2801      	cmp	r0, #1
    96d4:	f171 0300 	sbcs.w	r3, r1, #0
    96d8:	dbdd      	blt.n	9696 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    96da:	e9cd 0100 	strd	r0, r1, [sp]
    96de:	f106 020c 	add.w	r2, r6, #12
    96e2:	4629      	mov	r1, r5
    96e4:	4620      	mov	r0, r4
    96e6:	f7fe fe29 	bl	833c <z_pend_curr>
	__asm__ volatile(
    96ea:	f04f 0320 	mov.w	r3, #32
    96ee:	f3ef 8511 	mrs	r5, BASEPRI
    96f2:	f383 8812 	msr	BASEPRI_MAX, r3
    96f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    96fa:	4620      	mov	r0, r4
    96fc:	f7fd fe86 	bl	740c <z_spin_lock_valid>
    9700:	b968      	cbnz	r0, 971e <k_heap_aligned_alloc+0x122>
    9702:	490a      	ldr	r1, [pc, #40]	; (972c <k_heap_aligned_alloc+0x130>)
    9704:	480a      	ldr	r0, [pc, #40]	; (9730 <k_heap_aligned_alloc+0x134>)
    9706:	238e      	movs	r3, #142	; 0x8e
    9708:	464a      	mov	r2, r9
    970a:	f001 f922 	bl	a952 <assert_print>
    970e:	4809      	ldr	r0, [pc, #36]	; (9734 <k_heap_aligned_alloc+0x138>)
    9710:	4621      	mov	r1, r4
    9712:	f001 f91e 	bl	a952 <assert_print>
    9716:	218e      	movs	r1, #142	; 0x8e
    9718:	4648      	mov	r0, r9
    971a:	f001 f913 	bl	a944 <assert_post_action>
	z_spin_lock_set_owner(l);
    971e:	4620      	mov	r0, r4
    9720:	f7fd fe92 	bl	7448 <z_spin_lock_set_owner>
	return k;
    9724:	e7ac      	b.n	9680 <k_heap_aligned_alloc+0x84>
    9726:	bf00      	nop
    9728:	0000c2d4 	.word	0x0000c2d4
    972c:	0000c32d 	.word	0x0000c32d
    9730:	0000c18a 	.word	0x0000c18a
    9734:	0000c342 	.word	0x0000c342
    9738:	0000db4f 	.word	0x0000db4f
    973c:	0000db17 	.word	0x0000db17
    9740:	0000d801 	.word	0x0000d801
    9744:	0000c301 	.word	0x0000c301
    9748:	0000c318 	.word	0x0000c318

0000974c <malloc>:
    974c:	4b02      	ldr	r3, [pc, #8]	; (9758 <malloc+0xc>)
    974e:	4601      	mov	r1, r0
    9750:	6818      	ldr	r0, [r3, #0]
    9752:	f000 b84d 	b.w	97f0 <_malloc_r>
    9756:	bf00      	nop
    9758:	200000f0 	.word	0x200000f0

0000975c <_free_r>:
    975c:	b538      	push	{r3, r4, r5, lr}
    975e:	4605      	mov	r5, r0
    9760:	2900      	cmp	r1, #0
    9762:	d041      	beq.n	97e8 <_free_r+0x8c>
    9764:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9768:	1f0c      	subs	r4, r1, #4
    976a:	2b00      	cmp	r3, #0
    976c:	bfb8      	it	lt
    976e:	18e4      	addlt	r4, r4, r3
    9770:	f000 f980 	bl	9a74 <__malloc_lock>
    9774:	4a1d      	ldr	r2, [pc, #116]	; (97ec <_free_r+0x90>)
    9776:	6813      	ldr	r3, [r2, #0]
    9778:	b933      	cbnz	r3, 9788 <_free_r+0x2c>
    977a:	6063      	str	r3, [r4, #4]
    977c:	6014      	str	r4, [r2, #0]
    977e:	4628      	mov	r0, r5
    9780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9784:	f000 b97c 	b.w	9a80 <__malloc_unlock>
    9788:	42a3      	cmp	r3, r4
    978a:	d908      	bls.n	979e <_free_r+0x42>
    978c:	6820      	ldr	r0, [r4, #0]
    978e:	1821      	adds	r1, r4, r0
    9790:	428b      	cmp	r3, r1
    9792:	bf01      	itttt	eq
    9794:	6819      	ldreq	r1, [r3, #0]
    9796:	685b      	ldreq	r3, [r3, #4]
    9798:	1809      	addeq	r1, r1, r0
    979a:	6021      	streq	r1, [r4, #0]
    979c:	e7ed      	b.n	977a <_free_r+0x1e>
    979e:	461a      	mov	r2, r3
    97a0:	685b      	ldr	r3, [r3, #4]
    97a2:	b10b      	cbz	r3, 97a8 <_free_r+0x4c>
    97a4:	42a3      	cmp	r3, r4
    97a6:	d9fa      	bls.n	979e <_free_r+0x42>
    97a8:	6811      	ldr	r1, [r2, #0]
    97aa:	1850      	adds	r0, r2, r1
    97ac:	42a0      	cmp	r0, r4
    97ae:	d10b      	bne.n	97c8 <_free_r+0x6c>
    97b0:	6820      	ldr	r0, [r4, #0]
    97b2:	4401      	add	r1, r0
    97b4:	1850      	adds	r0, r2, r1
    97b6:	4283      	cmp	r3, r0
    97b8:	6011      	str	r1, [r2, #0]
    97ba:	d1e0      	bne.n	977e <_free_r+0x22>
    97bc:	6818      	ldr	r0, [r3, #0]
    97be:	685b      	ldr	r3, [r3, #4]
    97c0:	6053      	str	r3, [r2, #4]
    97c2:	4408      	add	r0, r1
    97c4:	6010      	str	r0, [r2, #0]
    97c6:	e7da      	b.n	977e <_free_r+0x22>
    97c8:	d902      	bls.n	97d0 <_free_r+0x74>
    97ca:	230c      	movs	r3, #12
    97cc:	602b      	str	r3, [r5, #0]
    97ce:	e7d6      	b.n	977e <_free_r+0x22>
    97d0:	6820      	ldr	r0, [r4, #0]
    97d2:	1821      	adds	r1, r4, r0
    97d4:	428b      	cmp	r3, r1
    97d6:	bf04      	itt	eq
    97d8:	6819      	ldreq	r1, [r3, #0]
    97da:	685b      	ldreq	r3, [r3, #4]
    97dc:	6063      	str	r3, [r4, #4]
    97de:	bf04      	itt	eq
    97e0:	1809      	addeq	r1, r1, r0
    97e2:	6021      	streq	r1, [r4, #0]
    97e4:	6054      	str	r4, [r2, #4]
    97e6:	e7ca      	b.n	977e <_free_r+0x22>
    97e8:	bd38      	pop	{r3, r4, r5, pc}
    97ea:	bf00      	nop
    97ec:	20004f50 	.word	0x20004f50

000097f0 <_malloc_r>:
    97f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97f2:	1ccd      	adds	r5, r1, #3
    97f4:	f025 0503 	bic.w	r5, r5, #3
    97f8:	3508      	adds	r5, #8
    97fa:	2d0c      	cmp	r5, #12
    97fc:	bf38      	it	cc
    97fe:	250c      	movcc	r5, #12
    9800:	2d00      	cmp	r5, #0
    9802:	4606      	mov	r6, r0
    9804:	db01      	blt.n	980a <_malloc_r+0x1a>
    9806:	42a9      	cmp	r1, r5
    9808:	d903      	bls.n	9812 <_malloc_r+0x22>
    980a:	230c      	movs	r3, #12
    980c:	6033      	str	r3, [r6, #0]
    980e:	2000      	movs	r0, #0
    9810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9812:	f000 f92f 	bl	9a74 <__malloc_lock>
    9816:	4921      	ldr	r1, [pc, #132]	; (989c <_malloc_r+0xac>)
    9818:	680a      	ldr	r2, [r1, #0]
    981a:	4614      	mov	r4, r2
    981c:	b99c      	cbnz	r4, 9846 <_malloc_r+0x56>
    981e:	4f20      	ldr	r7, [pc, #128]	; (98a0 <_malloc_r+0xb0>)
    9820:	683b      	ldr	r3, [r7, #0]
    9822:	b923      	cbnz	r3, 982e <_malloc_r+0x3e>
    9824:	4621      	mov	r1, r4
    9826:	4630      	mov	r0, r6
    9828:	f000 f854 	bl	98d4 <_sbrk_r>
    982c:	6038      	str	r0, [r7, #0]
    982e:	4629      	mov	r1, r5
    9830:	4630      	mov	r0, r6
    9832:	f000 f84f 	bl	98d4 <_sbrk_r>
    9836:	1c43      	adds	r3, r0, #1
    9838:	d123      	bne.n	9882 <_malloc_r+0x92>
    983a:	230c      	movs	r3, #12
    983c:	6033      	str	r3, [r6, #0]
    983e:	4630      	mov	r0, r6
    9840:	f000 f91e 	bl	9a80 <__malloc_unlock>
    9844:	e7e3      	b.n	980e <_malloc_r+0x1e>
    9846:	6823      	ldr	r3, [r4, #0]
    9848:	1b5b      	subs	r3, r3, r5
    984a:	d417      	bmi.n	987c <_malloc_r+0x8c>
    984c:	2b0b      	cmp	r3, #11
    984e:	d903      	bls.n	9858 <_malloc_r+0x68>
    9850:	6023      	str	r3, [r4, #0]
    9852:	441c      	add	r4, r3
    9854:	6025      	str	r5, [r4, #0]
    9856:	e004      	b.n	9862 <_malloc_r+0x72>
    9858:	6863      	ldr	r3, [r4, #4]
    985a:	42a2      	cmp	r2, r4
    985c:	bf0c      	ite	eq
    985e:	600b      	streq	r3, [r1, #0]
    9860:	6053      	strne	r3, [r2, #4]
    9862:	4630      	mov	r0, r6
    9864:	f000 f90c 	bl	9a80 <__malloc_unlock>
    9868:	f104 000b 	add.w	r0, r4, #11
    986c:	1d23      	adds	r3, r4, #4
    986e:	f020 0007 	bic.w	r0, r0, #7
    9872:	1ac2      	subs	r2, r0, r3
    9874:	bf1c      	itt	ne
    9876:	1a1b      	subne	r3, r3, r0
    9878:	50a3      	strne	r3, [r4, r2]
    987a:	e7c9      	b.n	9810 <_malloc_r+0x20>
    987c:	4622      	mov	r2, r4
    987e:	6864      	ldr	r4, [r4, #4]
    9880:	e7cc      	b.n	981c <_malloc_r+0x2c>
    9882:	1cc4      	adds	r4, r0, #3
    9884:	f024 0403 	bic.w	r4, r4, #3
    9888:	42a0      	cmp	r0, r4
    988a:	d0e3      	beq.n	9854 <_malloc_r+0x64>
    988c:	1a21      	subs	r1, r4, r0
    988e:	4630      	mov	r0, r6
    9890:	f000 f820 	bl	98d4 <_sbrk_r>
    9894:	3001      	adds	r0, #1
    9896:	d1dd      	bne.n	9854 <_malloc_r+0x64>
    9898:	e7cf      	b.n	983a <_malloc_r+0x4a>
    989a:	bf00      	nop
    989c:	20004f50 	.word	0x20004f50
    98a0:	20004f4c 	.word	0x20004f4c

000098a4 <iprintf>:
    98a4:	b40f      	push	{r0, r1, r2, r3}
    98a6:	4b0a      	ldr	r3, [pc, #40]	; (98d0 <iprintf+0x2c>)
    98a8:	b513      	push	{r0, r1, r4, lr}
    98aa:	681c      	ldr	r4, [r3, #0]
    98ac:	b124      	cbz	r4, 98b8 <iprintf+0x14>
    98ae:	69a3      	ldr	r3, [r4, #24]
    98b0:	b913      	cbnz	r3, 98b8 <iprintf+0x14>
    98b2:	4620      	mov	r0, r4
    98b4:	f000 f860 	bl	9978 <__sinit>
    98b8:	ab05      	add	r3, sp, #20
    98ba:	9a04      	ldr	r2, [sp, #16]
    98bc:	68a1      	ldr	r1, [r4, #8]
    98be:	9301      	str	r3, [sp, #4]
    98c0:	4620      	mov	r0, r4
    98c2:	f000 f8e3 	bl	9a8c <_vfiprintf_r>
    98c6:	b002      	add	sp, #8
    98c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98cc:	b004      	add	sp, #16
    98ce:	4770      	bx	lr
    98d0:	200000f0 	.word	0x200000f0

000098d4 <_sbrk_r>:
    98d4:	b538      	push	{r3, r4, r5, lr}
    98d6:	4d06      	ldr	r5, [pc, #24]	; (98f0 <_sbrk_r+0x1c>)
    98d8:	2300      	movs	r3, #0
    98da:	4604      	mov	r4, r0
    98dc:	4608      	mov	r0, r1
    98de:	602b      	str	r3, [r5, #0]
    98e0:	f7fa fe44 	bl	456c <_sbrk>
    98e4:	1c43      	adds	r3, r0, #1
    98e6:	d102      	bne.n	98ee <_sbrk_r+0x1a>
    98e8:	682b      	ldr	r3, [r5, #0]
    98ea:	b103      	cbz	r3, 98ee <_sbrk_r+0x1a>
    98ec:	6023      	str	r3, [r4, #0]
    98ee:	bd38      	pop	{r3, r4, r5, pc}
    98f0:	20004f54 	.word	0x20004f54

000098f4 <std>:
    98f4:	2300      	movs	r3, #0
    98f6:	b510      	push	{r4, lr}
    98f8:	4604      	mov	r4, r0
    98fa:	e9c0 3300 	strd	r3, r3, [r0]
    98fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
    9902:	6083      	str	r3, [r0, #8]
    9904:	8181      	strh	r1, [r0, #12]
    9906:	6643      	str	r3, [r0, #100]	; 0x64
    9908:	81c2      	strh	r2, [r0, #14]
    990a:	6183      	str	r3, [r0, #24]
    990c:	4619      	mov	r1, r3
    990e:	2208      	movs	r2, #8
    9910:	305c      	adds	r0, #92	; 0x5c
    9912:	f001 fe64 	bl	b5de <memset>
    9916:	4b05      	ldr	r3, [pc, #20]	; (992c <std+0x38>)
    9918:	6263      	str	r3, [r4, #36]	; 0x24
    991a:	4b05      	ldr	r3, [pc, #20]	; (9930 <std+0x3c>)
    991c:	62a3      	str	r3, [r4, #40]	; 0x28
    991e:	4b05      	ldr	r3, [pc, #20]	; (9934 <std+0x40>)
    9920:	62e3      	str	r3, [r4, #44]	; 0x2c
    9922:	4b05      	ldr	r3, [pc, #20]	; (9938 <std+0x44>)
    9924:	6224      	str	r4, [r4, #32]
    9926:	6323      	str	r3, [r4, #48]	; 0x30
    9928:	bd10      	pop	{r4, pc}
    992a:	bf00      	nop
    992c:	0000b7a9 	.word	0x0000b7a9
    9930:	0000b7cb 	.word	0x0000b7cb
    9934:	0000b803 	.word	0x0000b803
    9938:	0000b827 	.word	0x0000b827

0000993c <_cleanup_r>:
    993c:	4901      	ldr	r1, [pc, #4]	; (9944 <_cleanup_r+0x8>)
    993e:	f001 be80 	b.w	b642 <_fwalk_reent>
    9942:	bf00      	nop
    9944:	0000a101 	.word	0x0000a101

00009948 <__sfp_lock_acquire>:
    9948:	4801      	ldr	r0, [pc, #4]	; (9950 <__sfp_lock_acquire+0x8>)
    994a:	f7fa be55 	b.w	45f8 <__retarget_lock_acquire_recursive>
    994e:	bf00      	nop
    9950:	200041f4 	.word	0x200041f4

00009954 <__sfp_lock_release>:
    9954:	4801      	ldr	r0, [pc, #4]	; (995c <__sfp_lock_release+0x8>)
    9956:	f7fa be6d 	b.w	4634 <__retarget_lock_release_recursive>
    995a:	bf00      	nop
    995c:	200041f4 	.word	0x200041f4

00009960 <__sinit_lock_acquire>:
    9960:	4801      	ldr	r0, [pc, #4]	; (9968 <__sinit_lock_acquire+0x8>)
    9962:	f7fa be49 	b.w	45f8 <__retarget_lock_acquire_recursive>
    9966:	bf00      	nop
    9968:	20004208 	.word	0x20004208

0000996c <__sinit_lock_release>:
    996c:	4801      	ldr	r0, [pc, #4]	; (9974 <__sinit_lock_release+0x8>)
    996e:	f7fa be61 	b.w	4634 <__retarget_lock_release_recursive>
    9972:	bf00      	nop
    9974:	20004208 	.word	0x20004208

00009978 <__sinit>:
    9978:	b510      	push	{r4, lr}
    997a:	4604      	mov	r4, r0
    997c:	f7ff fff0 	bl	9960 <__sinit_lock_acquire>
    9980:	69a3      	ldr	r3, [r4, #24]
    9982:	b11b      	cbz	r3, 998c <__sinit+0x14>
    9984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9988:	f7ff bff0 	b.w	996c <__sinit_lock_release>
    998c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    9990:	6523      	str	r3, [r4, #80]	; 0x50
    9992:	4b13      	ldr	r3, [pc, #76]	; (99e0 <__sinit+0x68>)
    9994:	4a13      	ldr	r2, [pc, #76]	; (99e4 <__sinit+0x6c>)
    9996:	681b      	ldr	r3, [r3, #0]
    9998:	62a2      	str	r2, [r4, #40]	; 0x28
    999a:	42a3      	cmp	r3, r4
    999c:	bf04      	itt	eq
    999e:	2301      	moveq	r3, #1
    99a0:	61a3      	streq	r3, [r4, #24]
    99a2:	4620      	mov	r0, r4
    99a4:	f000 f820 	bl	99e8 <__sfp>
    99a8:	6060      	str	r0, [r4, #4]
    99aa:	4620      	mov	r0, r4
    99ac:	f000 f81c 	bl	99e8 <__sfp>
    99b0:	60a0      	str	r0, [r4, #8]
    99b2:	4620      	mov	r0, r4
    99b4:	f000 f818 	bl	99e8 <__sfp>
    99b8:	2200      	movs	r2, #0
    99ba:	60e0      	str	r0, [r4, #12]
    99bc:	2104      	movs	r1, #4
    99be:	6860      	ldr	r0, [r4, #4]
    99c0:	f7ff ff98 	bl	98f4 <std>
    99c4:	68a0      	ldr	r0, [r4, #8]
    99c6:	2201      	movs	r2, #1
    99c8:	2109      	movs	r1, #9
    99ca:	f7ff ff93 	bl	98f4 <std>
    99ce:	68e0      	ldr	r0, [r4, #12]
    99d0:	2202      	movs	r2, #2
    99d2:	2112      	movs	r1, #18
    99d4:	f7ff ff8e 	bl	98f4 <std>
    99d8:	2301      	movs	r3, #1
    99da:	61a3      	str	r3, [r4, #24]
    99dc:	e7d2      	b.n	9984 <__sinit+0xc>
    99de:	bf00      	nop
    99e0:	0000bf94 	.word	0x0000bf94
    99e4:	0000993d 	.word	0x0000993d

000099e8 <__sfp>:
    99e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99ea:	4607      	mov	r7, r0
    99ec:	f7ff ffac 	bl	9948 <__sfp_lock_acquire>
    99f0:	4b1e      	ldr	r3, [pc, #120]	; (9a6c <__sfp+0x84>)
    99f2:	681e      	ldr	r6, [r3, #0]
    99f4:	69b3      	ldr	r3, [r6, #24]
    99f6:	b913      	cbnz	r3, 99fe <__sfp+0x16>
    99f8:	4630      	mov	r0, r6
    99fa:	f7ff ffbd 	bl	9978 <__sinit>
    99fe:	3648      	adds	r6, #72	; 0x48
    9a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    9a04:	3b01      	subs	r3, #1
    9a06:	d503      	bpl.n	9a10 <__sfp+0x28>
    9a08:	6833      	ldr	r3, [r6, #0]
    9a0a:	b30b      	cbz	r3, 9a50 <__sfp+0x68>
    9a0c:	6836      	ldr	r6, [r6, #0]
    9a0e:	e7f7      	b.n	9a00 <__sfp+0x18>
    9a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    9a14:	b9d5      	cbnz	r5, 9a4c <__sfp+0x64>
    9a16:	4b16      	ldr	r3, [pc, #88]	; (9a70 <__sfp+0x88>)
    9a18:	60e3      	str	r3, [r4, #12]
    9a1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    9a1e:	6665      	str	r5, [r4, #100]	; 0x64
    9a20:	f7fa fdb8 	bl	4594 <__retarget_lock_init_recursive>
    9a24:	f7ff ff96 	bl	9954 <__sfp_lock_release>
    9a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
    9a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
    9a30:	6025      	str	r5, [r4, #0]
    9a32:	61a5      	str	r5, [r4, #24]
    9a34:	2208      	movs	r2, #8
    9a36:	4629      	mov	r1, r5
    9a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    9a3c:	f001 fdcf 	bl	b5de <memset>
    9a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    9a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    9a48:	4620      	mov	r0, r4
    9a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a4c:	3468      	adds	r4, #104	; 0x68
    9a4e:	e7d9      	b.n	9a04 <__sfp+0x1c>
    9a50:	2104      	movs	r1, #4
    9a52:	4638      	mov	r0, r7
    9a54:	f001 fddf 	bl	b616 <__sfmoreglue>
    9a58:	4604      	mov	r4, r0
    9a5a:	6030      	str	r0, [r6, #0]
    9a5c:	2800      	cmp	r0, #0
    9a5e:	d1d5      	bne.n	9a0c <__sfp+0x24>
    9a60:	f7ff ff78 	bl	9954 <__sfp_lock_release>
    9a64:	230c      	movs	r3, #12
    9a66:	603b      	str	r3, [r7, #0]
    9a68:	e7ee      	b.n	9a48 <__sfp+0x60>
    9a6a:	bf00      	nop
    9a6c:	0000bf94 	.word	0x0000bf94
    9a70:	ffff0001 	.word	0xffff0001

00009a74 <__malloc_lock>:
    9a74:	4801      	ldr	r0, [pc, #4]	; (9a7c <__malloc_lock+0x8>)
    9a76:	f7fa bdbf 	b.w	45f8 <__retarget_lock_acquire_recursive>
    9a7a:	bf00      	nop
    9a7c:	200041e0 	.word	0x200041e0

00009a80 <__malloc_unlock>:
    9a80:	4801      	ldr	r0, [pc, #4]	; (9a88 <__malloc_unlock+0x8>)
    9a82:	f7fa bdd7 	b.w	4634 <__retarget_lock_release_recursive>
    9a86:	bf00      	nop
    9a88:	200041e0 	.word	0x200041e0

00009a8c <_vfiprintf_r>:
    9a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a90:	460d      	mov	r5, r1
    9a92:	b09d      	sub	sp, #116	; 0x74
    9a94:	4614      	mov	r4, r2
    9a96:	4698      	mov	r8, r3
    9a98:	4606      	mov	r6, r0
    9a9a:	b118      	cbz	r0, 9aa4 <_vfiprintf_r+0x18>
    9a9c:	6983      	ldr	r3, [r0, #24]
    9a9e:	b90b      	cbnz	r3, 9aa4 <_vfiprintf_r+0x18>
    9aa0:	f7ff ff6a 	bl	9978 <__sinit>
    9aa4:	4b87      	ldr	r3, [pc, #540]	; (9cc4 <_vfiprintf_r+0x238>)
    9aa6:	429d      	cmp	r5, r3
    9aa8:	d11b      	bne.n	9ae2 <_vfiprintf_r+0x56>
    9aaa:	6875      	ldr	r5, [r6, #4]
    9aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    9aae:	07d9      	lsls	r1, r3, #31
    9ab0:	d405      	bmi.n	9abe <_vfiprintf_r+0x32>
    9ab2:	89ab      	ldrh	r3, [r5, #12]
    9ab4:	059a      	lsls	r2, r3, #22
    9ab6:	d402      	bmi.n	9abe <_vfiprintf_r+0x32>
    9ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    9aba:	f7fa fd9d 	bl	45f8 <__retarget_lock_acquire_recursive>
    9abe:	89ab      	ldrh	r3, [r5, #12]
    9ac0:	071b      	lsls	r3, r3, #28
    9ac2:	d501      	bpl.n	9ac8 <_vfiprintf_r+0x3c>
    9ac4:	692b      	ldr	r3, [r5, #16]
    9ac6:	b9eb      	cbnz	r3, 9b04 <_vfiprintf_r+0x78>
    9ac8:	4629      	mov	r1, r5
    9aca:	4630      	mov	r0, r6
    9acc:	f000 fa9c 	bl	a008 <__swsetup_r>
    9ad0:	b1c0      	cbz	r0, 9b04 <_vfiprintf_r+0x78>
    9ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    9ad4:	07dc      	lsls	r4, r3, #31
    9ad6:	d50e      	bpl.n	9af6 <_vfiprintf_r+0x6a>
    9ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9adc:	b01d      	add	sp, #116	; 0x74
    9ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ae2:	4b79      	ldr	r3, [pc, #484]	; (9cc8 <_vfiprintf_r+0x23c>)
    9ae4:	429d      	cmp	r5, r3
    9ae6:	d101      	bne.n	9aec <_vfiprintf_r+0x60>
    9ae8:	68b5      	ldr	r5, [r6, #8]
    9aea:	e7df      	b.n	9aac <_vfiprintf_r+0x20>
    9aec:	4b77      	ldr	r3, [pc, #476]	; (9ccc <_vfiprintf_r+0x240>)
    9aee:	429d      	cmp	r5, r3
    9af0:	bf08      	it	eq
    9af2:	68f5      	ldreq	r5, [r6, #12]
    9af4:	e7da      	b.n	9aac <_vfiprintf_r+0x20>
    9af6:	89ab      	ldrh	r3, [r5, #12]
    9af8:	0598      	lsls	r0, r3, #22
    9afa:	d4ed      	bmi.n	9ad8 <_vfiprintf_r+0x4c>
    9afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    9afe:	f7fa fd99 	bl	4634 <__retarget_lock_release_recursive>
    9b02:	e7e9      	b.n	9ad8 <_vfiprintf_r+0x4c>
    9b04:	2300      	movs	r3, #0
    9b06:	9309      	str	r3, [sp, #36]	; 0x24
    9b08:	2320      	movs	r3, #32
    9b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    9b0e:	f8cd 800c 	str.w	r8, [sp, #12]
    9b12:	2330      	movs	r3, #48	; 0x30
    9b14:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 9cd0 <_vfiprintf_r+0x244>
    9b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    9b1c:	f04f 0901 	mov.w	r9, #1
    9b20:	4623      	mov	r3, r4
    9b22:	469a      	mov	sl, r3
    9b24:	f813 2b01 	ldrb.w	r2, [r3], #1
    9b28:	b10a      	cbz	r2, 9b2e <_vfiprintf_r+0xa2>
    9b2a:	2a25      	cmp	r2, #37	; 0x25
    9b2c:	d1f9      	bne.n	9b22 <_vfiprintf_r+0x96>
    9b2e:	ebba 0b04 	subs.w	fp, sl, r4
    9b32:	d00b      	beq.n	9b4c <_vfiprintf_r+0xc0>
    9b34:	465b      	mov	r3, fp
    9b36:	4622      	mov	r2, r4
    9b38:	4629      	mov	r1, r5
    9b3a:	4630      	mov	r0, r6
    9b3c:	f001 fdb5 	bl	b6aa <__sfputs_r>
    9b40:	3001      	adds	r0, #1
    9b42:	f000 80a6 	beq.w	9c92 <_vfiprintf_r+0x206>
    9b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9b48:	445a      	add	r2, fp
    9b4a:	9209      	str	r2, [sp, #36]	; 0x24
    9b4c:	f89a 3000 	ldrb.w	r3, [sl]
    9b50:	2b00      	cmp	r3, #0
    9b52:	f000 809e 	beq.w	9c92 <_vfiprintf_r+0x206>
    9b56:	2300      	movs	r3, #0
    9b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    9b60:	f10a 0a01 	add.w	sl, sl, #1
    9b64:	9304      	str	r3, [sp, #16]
    9b66:	9307      	str	r3, [sp, #28]
    9b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    9b6c:	931a      	str	r3, [sp, #104]	; 0x68
    9b6e:	4654      	mov	r4, sl
    9b70:	4857      	ldr	r0, [pc, #348]	; (9cd0 <_vfiprintf_r+0x244>)
    9b72:	f814 1b01 	ldrb.w	r1, [r4], #1
    9b76:	2205      	movs	r2, #5
    9b78:	f7f6 fac2 	bl	100 <memchr>
    9b7c:	9b04      	ldr	r3, [sp, #16]
    9b7e:	b9d0      	cbnz	r0, 9bb6 <_vfiprintf_r+0x12a>
    9b80:	06d9      	lsls	r1, r3, #27
    9b82:	bf44      	itt	mi
    9b84:	2220      	movmi	r2, #32
    9b86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9b8a:	071a      	lsls	r2, r3, #28
    9b8c:	bf44      	itt	mi
    9b8e:	222b      	movmi	r2, #43	; 0x2b
    9b90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    9b94:	f89a 2000 	ldrb.w	r2, [sl]
    9b98:	2a2a      	cmp	r2, #42	; 0x2a
    9b9a:	d014      	beq.n	9bc6 <_vfiprintf_r+0x13a>
    9b9c:	9a07      	ldr	r2, [sp, #28]
    9b9e:	4654      	mov	r4, sl
    9ba0:	2000      	movs	r0, #0
    9ba2:	f04f 0c0a 	mov.w	ip, #10
    9ba6:	4621      	mov	r1, r4
    9ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
    9bac:	3b30      	subs	r3, #48	; 0x30
    9bae:	2b09      	cmp	r3, #9
    9bb0:	d94a      	bls.n	9c48 <_vfiprintf_r+0x1bc>
    9bb2:	b970      	cbnz	r0, 9bd2 <_vfiprintf_r+0x146>
    9bb4:	e014      	b.n	9be0 <_vfiprintf_r+0x154>
    9bb6:	eba0 0008 	sub.w	r0, r0, r8
    9bba:	fa09 f000 	lsl.w	r0, r9, r0
    9bbe:	4318      	orrs	r0, r3
    9bc0:	9004      	str	r0, [sp, #16]
    9bc2:	46a2      	mov	sl, r4
    9bc4:	e7d3      	b.n	9b6e <_vfiprintf_r+0xe2>
    9bc6:	9a03      	ldr	r2, [sp, #12]
    9bc8:	1d11      	adds	r1, r2, #4
    9bca:	6812      	ldr	r2, [r2, #0]
    9bcc:	9103      	str	r1, [sp, #12]
    9bce:	2a00      	cmp	r2, #0
    9bd0:	db01      	blt.n	9bd6 <_vfiprintf_r+0x14a>
    9bd2:	9207      	str	r2, [sp, #28]
    9bd4:	e004      	b.n	9be0 <_vfiprintf_r+0x154>
    9bd6:	4252      	negs	r2, r2
    9bd8:	f043 0302 	orr.w	r3, r3, #2
    9bdc:	9207      	str	r2, [sp, #28]
    9bde:	9304      	str	r3, [sp, #16]
    9be0:	7823      	ldrb	r3, [r4, #0]
    9be2:	2b2e      	cmp	r3, #46	; 0x2e
    9be4:	d10a      	bne.n	9bfc <_vfiprintf_r+0x170>
    9be6:	7863      	ldrb	r3, [r4, #1]
    9be8:	2b2a      	cmp	r3, #42	; 0x2a
    9bea:	d132      	bne.n	9c52 <_vfiprintf_r+0x1c6>
    9bec:	9b03      	ldr	r3, [sp, #12]
    9bee:	1d1a      	adds	r2, r3, #4
    9bf0:	681b      	ldr	r3, [r3, #0]
    9bf2:	9203      	str	r2, [sp, #12]
    9bf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    9bf8:	3402      	adds	r4, #2
    9bfa:	9305      	str	r3, [sp, #20]
    9bfc:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 9cd4 <_vfiprintf_r+0x248>
    9c00:	7821      	ldrb	r1, [r4, #0]
    9c02:	2203      	movs	r2, #3
    9c04:	4650      	mov	r0, sl
    9c06:	f7f6 fa7b 	bl	100 <memchr>
    9c0a:	b138      	cbz	r0, 9c1c <_vfiprintf_r+0x190>
    9c0c:	9b04      	ldr	r3, [sp, #16]
    9c0e:	eba0 000a 	sub.w	r0, r0, sl
    9c12:	2240      	movs	r2, #64	; 0x40
    9c14:	4082      	lsls	r2, r0
    9c16:	4313      	orrs	r3, r2
    9c18:	3401      	adds	r4, #1
    9c1a:	9304      	str	r3, [sp, #16]
    9c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
    9c20:	482d      	ldr	r0, [pc, #180]	; (9cd8 <_vfiprintf_r+0x24c>)
    9c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    9c26:	2206      	movs	r2, #6
    9c28:	f7f6 fa6a 	bl	100 <memchr>
    9c2c:	2800      	cmp	r0, #0
    9c2e:	d03f      	beq.n	9cb0 <_vfiprintf_r+0x224>
    9c30:	4b2a      	ldr	r3, [pc, #168]	; (9cdc <_vfiprintf_r+0x250>)
    9c32:	bb1b      	cbnz	r3, 9c7c <_vfiprintf_r+0x1f0>
    9c34:	9b03      	ldr	r3, [sp, #12]
    9c36:	3307      	adds	r3, #7
    9c38:	f023 0307 	bic.w	r3, r3, #7
    9c3c:	3308      	adds	r3, #8
    9c3e:	9303      	str	r3, [sp, #12]
    9c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c42:	443b      	add	r3, r7
    9c44:	9309      	str	r3, [sp, #36]	; 0x24
    9c46:	e76b      	b.n	9b20 <_vfiprintf_r+0x94>
    9c48:	fb0c 3202 	mla	r2, ip, r2, r3
    9c4c:	460c      	mov	r4, r1
    9c4e:	2001      	movs	r0, #1
    9c50:	e7a9      	b.n	9ba6 <_vfiprintf_r+0x11a>
    9c52:	2300      	movs	r3, #0
    9c54:	3401      	adds	r4, #1
    9c56:	9305      	str	r3, [sp, #20]
    9c58:	4619      	mov	r1, r3
    9c5a:	f04f 0c0a 	mov.w	ip, #10
    9c5e:	4620      	mov	r0, r4
    9c60:	f810 2b01 	ldrb.w	r2, [r0], #1
    9c64:	3a30      	subs	r2, #48	; 0x30
    9c66:	2a09      	cmp	r2, #9
    9c68:	d903      	bls.n	9c72 <_vfiprintf_r+0x1e6>
    9c6a:	2b00      	cmp	r3, #0
    9c6c:	d0c6      	beq.n	9bfc <_vfiprintf_r+0x170>
    9c6e:	9105      	str	r1, [sp, #20]
    9c70:	e7c4      	b.n	9bfc <_vfiprintf_r+0x170>
    9c72:	fb0c 2101 	mla	r1, ip, r1, r2
    9c76:	4604      	mov	r4, r0
    9c78:	2301      	movs	r3, #1
    9c7a:	e7f0      	b.n	9c5e <_vfiprintf_r+0x1d2>
    9c7c:	ab03      	add	r3, sp, #12
    9c7e:	9300      	str	r3, [sp, #0]
    9c80:	462a      	mov	r2, r5
    9c82:	4b17      	ldr	r3, [pc, #92]	; (9ce0 <_vfiprintf_r+0x254>)
    9c84:	a904      	add	r1, sp, #16
    9c86:	4630      	mov	r0, r6
    9c88:	f3af 8000 	nop.w
    9c8c:	4607      	mov	r7, r0
    9c8e:	1c78      	adds	r0, r7, #1
    9c90:	d1d6      	bne.n	9c40 <_vfiprintf_r+0x1b4>
    9c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    9c94:	07d9      	lsls	r1, r3, #31
    9c96:	d405      	bmi.n	9ca4 <_vfiprintf_r+0x218>
    9c98:	89ab      	ldrh	r3, [r5, #12]
    9c9a:	059a      	lsls	r2, r3, #22
    9c9c:	d402      	bmi.n	9ca4 <_vfiprintf_r+0x218>
    9c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    9ca0:	f7fa fcc8 	bl	4634 <__retarget_lock_release_recursive>
    9ca4:	89ab      	ldrh	r3, [r5, #12]
    9ca6:	065b      	lsls	r3, r3, #25
    9ca8:	f53f af16 	bmi.w	9ad8 <_vfiprintf_r+0x4c>
    9cac:	9809      	ldr	r0, [sp, #36]	; 0x24
    9cae:	e715      	b.n	9adc <_vfiprintf_r+0x50>
    9cb0:	ab03      	add	r3, sp, #12
    9cb2:	9300      	str	r3, [sp, #0]
    9cb4:	462a      	mov	r2, r5
    9cb6:	4b0a      	ldr	r3, [pc, #40]	; (9ce0 <_vfiprintf_r+0x254>)
    9cb8:	a904      	add	r1, sp, #16
    9cba:	4630      	mov	r0, r6
    9cbc:	f000 f812 	bl	9ce4 <_printf_i>
    9cc0:	e7e4      	b.n	9c8c <_vfiprintf_r+0x200>
    9cc2:	bf00      	nop
    9cc4:	0000bf74 	.word	0x0000bf74
    9cc8:	0000bf54 	.word	0x0000bf54
    9ccc:	0000bf34 	.word	0x0000bf34
    9cd0:	0000dc96 	.word	0x0000dc96
    9cd4:	0000dc9c 	.word	0x0000dc9c
    9cd8:	0000dca0 	.word	0x0000dca0
    9cdc:	00000000 	.word	0x00000000
    9ce0:	0000b6ab 	.word	0x0000b6ab

00009ce4 <_printf_i>:
    9ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    9ce8:	7e0f      	ldrb	r7, [r1, #24]
    9cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9cec:	2f78      	cmp	r7, #120	; 0x78
    9cee:	4691      	mov	r9, r2
    9cf0:	4680      	mov	r8, r0
    9cf2:	460c      	mov	r4, r1
    9cf4:	469a      	mov	sl, r3
    9cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
    9cfa:	d807      	bhi.n	9d0c <_printf_i+0x28>
    9cfc:	2f62      	cmp	r7, #98	; 0x62
    9cfe:	d80a      	bhi.n	9d16 <_printf_i+0x32>
    9d00:	2f00      	cmp	r7, #0
    9d02:	f000 80e0 	beq.w	9ec6 <_printf_i+0x1e2>
    9d06:	2f58      	cmp	r7, #88	; 0x58
    9d08:	f000 80bb 	beq.w	9e82 <_printf_i+0x19e>
    9d0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
    9d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    9d14:	e03a      	b.n	9d8c <_printf_i+0xa8>
    9d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    9d1a:	2b15      	cmp	r3, #21
    9d1c:	d8f6      	bhi.n	9d0c <_printf_i+0x28>
    9d1e:	a101      	add	r1, pc, #4	; (adr r1, 9d24 <_printf_i+0x40>)
    9d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    9d24:	00009d7d 	.word	0x00009d7d
    9d28:	00009d91 	.word	0x00009d91
    9d2c:	00009d0d 	.word	0x00009d0d
    9d30:	00009d0d 	.word	0x00009d0d
    9d34:	00009d0d 	.word	0x00009d0d
    9d38:	00009d0d 	.word	0x00009d0d
    9d3c:	00009d91 	.word	0x00009d91
    9d40:	00009d0d 	.word	0x00009d0d
    9d44:	00009d0d 	.word	0x00009d0d
    9d48:	00009d0d 	.word	0x00009d0d
    9d4c:	00009d0d 	.word	0x00009d0d
    9d50:	00009ead 	.word	0x00009ead
    9d54:	00009e21 	.word	0x00009e21
    9d58:	00009e63 	.word	0x00009e63
    9d5c:	00009d0d 	.word	0x00009d0d
    9d60:	00009d0d 	.word	0x00009d0d
    9d64:	00009ecf 	.word	0x00009ecf
    9d68:	00009d0d 	.word	0x00009d0d
    9d6c:	00009e21 	.word	0x00009e21
    9d70:	00009d0d 	.word	0x00009d0d
    9d74:	00009d0d 	.word	0x00009d0d
    9d78:	00009e6b 	.word	0x00009e6b
    9d7c:	682b      	ldr	r3, [r5, #0]
    9d7e:	1d1a      	adds	r2, r3, #4
    9d80:	681b      	ldr	r3, [r3, #0]
    9d82:	602a      	str	r2, [r5, #0]
    9d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
    9d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    9d8c:	2301      	movs	r3, #1
    9d8e:	e0ab      	b.n	9ee8 <_printf_i+0x204>
    9d90:	6823      	ldr	r3, [r4, #0]
    9d92:	6829      	ldr	r1, [r5, #0]
    9d94:	061f      	lsls	r7, r3, #24
    9d96:	f101 0004 	add.w	r0, r1, #4
    9d9a:	6028      	str	r0, [r5, #0]
    9d9c:	d501      	bpl.n	9da2 <_printf_i+0xbe>
    9d9e:	680d      	ldr	r5, [r1, #0]
    9da0:	e003      	b.n	9daa <_printf_i+0xc6>
    9da2:	065e      	lsls	r6, r3, #25
    9da4:	d5fb      	bpl.n	9d9e <_printf_i+0xba>
    9da6:	f9b1 5000 	ldrsh.w	r5, [r1]
    9daa:	6861      	ldr	r1, [r4, #4]
    9dac:	2d00      	cmp	r5, #0
    9dae:	da7a      	bge.n	9ea6 <_printf_i+0x1c2>
    9db0:	202d      	movs	r0, #45	; 0x2d
    9db2:	2900      	cmp	r1, #0
    9db4:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    9db8:	60a1      	str	r1, [r4, #8]
    9dba:	da2d      	bge.n	9e18 <_printf_i+0x134>
    9dbc:	485e      	ldr	r0, [pc, #376]	; (9f38 <_printf_i+0x254>)
    9dbe:	426d      	negs	r5, r5
    9dc0:	230a      	movs	r3, #10
    9dc2:	4616      	mov	r6, r2
    9dc4:	fbb5 f1f3 	udiv	r1, r5, r3
    9dc8:	fb03 5711 	mls	r7, r3, r1, r5
    9dcc:	5dc7      	ldrb	r7, [r0, r7]
    9dce:	f806 7d01 	strb.w	r7, [r6, #-1]!
    9dd2:	462f      	mov	r7, r5
    9dd4:	42bb      	cmp	r3, r7
    9dd6:	460d      	mov	r5, r1
    9dd8:	d9f4      	bls.n	9dc4 <_printf_i+0xe0>
    9dda:	2b08      	cmp	r3, #8
    9ddc:	d10b      	bne.n	9df6 <_printf_i+0x112>
    9dde:	6823      	ldr	r3, [r4, #0]
    9de0:	07df      	lsls	r7, r3, #31
    9de2:	d508      	bpl.n	9df6 <_printf_i+0x112>
    9de4:	6923      	ldr	r3, [r4, #16]
    9de6:	6861      	ldr	r1, [r4, #4]
    9de8:	4299      	cmp	r1, r3
    9dea:	bfde      	ittt	le
    9dec:	2330      	movle	r3, #48	; 0x30
    9dee:	f806 3c01 	strble.w	r3, [r6, #-1]
    9df2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    9df6:	1b92      	subs	r2, r2, r6
    9df8:	6122      	str	r2, [r4, #16]
    9dfa:	f8cd a000 	str.w	sl, [sp]
    9dfe:	464b      	mov	r3, r9
    9e00:	aa03      	add	r2, sp, #12
    9e02:	4621      	mov	r1, r4
    9e04:	4640      	mov	r0, r8
    9e06:	f001 fc62 	bl	b6ce <_printf_common>
    9e0a:	3001      	adds	r0, #1
    9e0c:	d171      	bne.n	9ef2 <_printf_i+0x20e>
    9e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9e12:	b004      	add	sp, #16
    9e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e18:	f023 0304 	bic.w	r3, r3, #4
    9e1c:	6023      	str	r3, [r4, #0]
    9e1e:	e7cd      	b.n	9dbc <_printf_i+0xd8>
    9e20:	682b      	ldr	r3, [r5, #0]
    9e22:	6820      	ldr	r0, [r4, #0]
    9e24:	1d19      	adds	r1, r3, #4
    9e26:	6029      	str	r1, [r5, #0]
    9e28:	0605      	lsls	r5, r0, #24
    9e2a:	d501      	bpl.n	9e30 <_printf_i+0x14c>
    9e2c:	681d      	ldr	r5, [r3, #0]
    9e2e:	e002      	b.n	9e36 <_printf_i+0x152>
    9e30:	0641      	lsls	r1, r0, #25
    9e32:	d5fb      	bpl.n	9e2c <_printf_i+0x148>
    9e34:	881d      	ldrh	r5, [r3, #0]
    9e36:	4840      	ldr	r0, [pc, #256]	; (9f38 <_printf_i+0x254>)
    9e38:	2f6f      	cmp	r7, #111	; 0x6f
    9e3a:	bf14      	ite	ne
    9e3c:	230a      	movne	r3, #10
    9e3e:	2308      	moveq	r3, #8
    9e40:	2100      	movs	r1, #0
    9e42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    9e46:	6866      	ldr	r6, [r4, #4]
    9e48:	60a6      	str	r6, [r4, #8]
    9e4a:	2e00      	cmp	r6, #0
    9e4c:	dbb9      	blt.n	9dc2 <_printf_i+0xde>
    9e4e:	6821      	ldr	r1, [r4, #0]
    9e50:	f021 0104 	bic.w	r1, r1, #4
    9e54:	6021      	str	r1, [r4, #0]
    9e56:	2d00      	cmp	r5, #0
    9e58:	d1b3      	bne.n	9dc2 <_printf_i+0xde>
    9e5a:	2e00      	cmp	r6, #0
    9e5c:	d1b1      	bne.n	9dc2 <_printf_i+0xde>
    9e5e:	4616      	mov	r6, r2
    9e60:	e7bb      	b.n	9dda <_printf_i+0xf6>
    9e62:	6823      	ldr	r3, [r4, #0]
    9e64:	f043 0320 	orr.w	r3, r3, #32
    9e68:	6023      	str	r3, [r4, #0]
    9e6a:	4834      	ldr	r0, [pc, #208]	; (9f3c <_printf_i+0x258>)
    9e6c:	2778      	movs	r7, #120	; 0x78
    9e6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    9e72:	6829      	ldr	r1, [r5, #0]
    9e74:	6823      	ldr	r3, [r4, #0]
    9e76:	1d0e      	adds	r6, r1, #4
    9e78:	602e      	str	r6, [r5, #0]
    9e7a:	061e      	lsls	r6, r3, #24
    9e7c:	d503      	bpl.n	9e86 <_printf_i+0x1a2>
    9e7e:	680d      	ldr	r5, [r1, #0]
    9e80:	e004      	b.n	9e8c <_printf_i+0x1a8>
    9e82:	482d      	ldr	r0, [pc, #180]	; (9f38 <_printf_i+0x254>)
    9e84:	e7f3      	b.n	9e6e <_printf_i+0x18a>
    9e86:	065d      	lsls	r5, r3, #25
    9e88:	d5f9      	bpl.n	9e7e <_printf_i+0x19a>
    9e8a:	880d      	ldrh	r5, [r1, #0]
    9e8c:	07d9      	lsls	r1, r3, #31
    9e8e:	bf44      	itt	mi
    9e90:	f043 0320 	orrmi.w	r3, r3, #32
    9e94:	6023      	strmi	r3, [r4, #0]
    9e96:	b10d      	cbz	r5, 9e9c <_printf_i+0x1b8>
    9e98:	2310      	movs	r3, #16
    9e9a:	e7d1      	b.n	9e40 <_printf_i+0x15c>
    9e9c:	6823      	ldr	r3, [r4, #0]
    9e9e:	f023 0320 	bic.w	r3, r3, #32
    9ea2:	6023      	str	r3, [r4, #0]
    9ea4:	e7f8      	b.n	9e98 <_printf_i+0x1b4>
    9ea6:	4824      	ldr	r0, [pc, #144]	; (9f38 <_printf_i+0x254>)
    9ea8:	230a      	movs	r3, #10
    9eaa:	e7cc      	b.n	9e46 <_printf_i+0x162>
    9eac:	682b      	ldr	r3, [r5, #0]
    9eae:	6826      	ldr	r6, [r4, #0]
    9eb0:	6961      	ldr	r1, [r4, #20]
    9eb2:	1d18      	adds	r0, r3, #4
    9eb4:	6028      	str	r0, [r5, #0]
    9eb6:	0635      	lsls	r5, r6, #24
    9eb8:	681b      	ldr	r3, [r3, #0]
    9eba:	d501      	bpl.n	9ec0 <_printf_i+0x1dc>
    9ebc:	6019      	str	r1, [r3, #0]
    9ebe:	e002      	b.n	9ec6 <_printf_i+0x1e2>
    9ec0:	0670      	lsls	r0, r6, #25
    9ec2:	d5fb      	bpl.n	9ebc <_printf_i+0x1d8>
    9ec4:	8019      	strh	r1, [r3, #0]
    9ec6:	2300      	movs	r3, #0
    9ec8:	6123      	str	r3, [r4, #16]
    9eca:	4616      	mov	r6, r2
    9ecc:	e795      	b.n	9dfa <_printf_i+0x116>
    9ece:	682b      	ldr	r3, [r5, #0]
    9ed0:	1d1a      	adds	r2, r3, #4
    9ed2:	602a      	str	r2, [r5, #0]
    9ed4:	681e      	ldr	r6, [r3, #0]
    9ed6:	6862      	ldr	r2, [r4, #4]
    9ed8:	2100      	movs	r1, #0
    9eda:	4630      	mov	r0, r6
    9edc:	f7f6 f910 	bl	100 <memchr>
    9ee0:	b108      	cbz	r0, 9ee6 <_printf_i+0x202>
    9ee2:	1b80      	subs	r0, r0, r6
    9ee4:	6060      	str	r0, [r4, #4]
    9ee6:	6863      	ldr	r3, [r4, #4]
    9ee8:	6123      	str	r3, [r4, #16]
    9eea:	2300      	movs	r3, #0
    9eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    9ef0:	e783      	b.n	9dfa <_printf_i+0x116>
    9ef2:	6923      	ldr	r3, [r4, #16]
    9ef4:	4632      	mov	r2, r6
    9ef6:	4649      	mov	r1, r9
    9ef8:	4640      	mov	r0, r8
    9efa:	47d0      	blx	sl
    9efc:	3001      	adds	r0, #1
    9efe:	d086      	beq.n	9e0e <_printf_i+0x12a>
    9f00:	6823      	ldr	r3, [r4, #0]
    9f02:	079b      	lsls	r3, r3, #30
    9f04:	d414      	bmi.n	9f30 <_printf_i+0x24c>
    9f06:	68e0      	ldr	r0, [r4, #12]
    9f08:	9b03      	ldr	r3, [sp, #12]
    9f0a:	4298      	cmp	r0, r3
    9f0c:	bfb8      	it	lt
    9f0e:	4618      	movlt	r0, r3
    9f10:	e77f      	b.n	9e12 <_printf_i+0x12e>
    9f12:	2301      	movs	r3, #1
    9f14:	4632      	mov	r2, r6
    9f16:	4649      	mov	r1, r9
    9f18:	4640      	mov	r0, r8
    9f1a:	47d0      	blx	sl
    9f1c:	3001      	adds	r0, #1
    9f1e:	f43f af76 	beq.w	9e0e <_printf_i+0x12a>
    9f22:	3501      	adds	r5, #1
    9f24:	68e3      	ldr	r3, [r4, #12]
    9f26:	9903      	ldr	r1, [sp, #12]
    9f28:	1a5b      	subs	r3, r3, r1
    9f2a:	42ab      	cmp	r3, r5
    9f2c:	dcf1      	bgt.n	9f12 <_printf_i+0x22e>
    9f2e:	e7ea      	b.n	9f06 <_printf_i+0x222>
    9f30:	2500      	movs	r5, #0
    9f32:	f104 0619 	add.w	r6, r4, #25
    9f36:	e7f5      	b.n	9f24 <_printf_i+0x240>
    9f38:	0000dca7 	.word	0x0000dca7
    9f3c:	0000dcb8 	.word	0x0000dcb8

00009f40 <__swbuf_r>:
    9f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f42:	460e      	mov	r6, r1
    9f44:	4614      	mov	r4, r2
    9f46:	4605      	mov	r5, r0
    9f48:	b118      	cbz	r0, 9f52 <__swbuf_r+0x12>
    9f4a:	6983      	ldr	r3, [r0, #24]
    9f4c:	b90b      	cbnz	r3, 9f52 <__swbuf_r+0x12>
    9f4e:	f7ff fd13 	bl	9978 <__sinit>
    9f52:	4b21      	ldr	r3, [pc, #132]	; (9fd8 <__swbuf_r+0x98>)
    9f54:	429c      	cmp	r4, r3
    9f56:	d110      	bne.n	9f7a <__swbuf_r+0x3a>
    9f58:	686c      	ldr	r4, [r5, #4]
    9f5a:	69a3      	ldr	r3, [r4, #24]
    9f5c:	60a3      	str	r3, [r4, #8]
    9f5e:	89a3      	ldrh	r3, [r4, #12]
    9f60:	071a      	lsls	r2, r3, #28
    9f62:	d501      	bpl.n	9f68 <__swbuf_r+0x28>
    9f64:	6923      	ldr	r3, [r4, #16]
    9f66:	b993      	cbnz	r3, 9f8e <__swbuf_r+0x4e>
    9f68:	4621      	mov	r1, r4
    9f6a:	4628      	mov	r0, r5
    9f6c:	f000 f84c 	bl	a008 <__swsetup_r>
    9f70:	b168      	cbz	r0, 9f8e <__swbuf_r+0x4e>
    9f72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    9f76:	4638      	mov	r0, r7
    9f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f7a:	4b18      	ldr	r3, [pc, #96]	; (9fdc <__swbuf_r+0x9c>)
    9f7c:	429c      	cmp	r4, r3
    9f7e:	d101      	bne.n	9f84 <__swbuf_r+0x44>
    9f80:	68ac      	ldr	r4, [r5, #8]
    9f82:	e7ea      	b.n	9f5a <__swbuf_r+0x1a>
    9f84:	4b16      	ldr	r3, [pc, #88]	; (9fe0 <__swbuf_r+0xa0>)
    9f86:	429c      	cmp	r4, r3
    9f88:	bf08      	it	eq
    9f8a:	68ec      	ldreq	r4, [r5, #12]
    9f8c:	e7e5      	b.n	9f5a <__swbuf_r+0x1a>
    9f8e:	6923      	ldr	r3, [r4, #16]
    9f90:	6820      	ldr	r0, [r4, #0]
    9f92:	1ac0      	subs	r0, r0, r3
    9f94:	6963      	ldr	r3, [r4, #20]
    9f96:	b2f6      	uxtb	r6, r6
    9f98:	4283      	cmp	r3, r0
    9f9a:	4637      	mov	r7, r6
    9f9c:	dc05      	bgt.n	9faa <__swbuf_r+0x6a>
    9f9e:	4621      	mov	r1, r4
    9fa0:	4628      	mov	r0, r5
    9fa2:	f000 f8ad 	bl	a100 <_fflush_r>
    9fa6:	2800      	cmp	r0, #0
    9fa8:	d1e3      	bne.n	9f72 <__swbuf_r+0x32>
    9faa:	68a3      	ldr	r3, [r4, #8]
    9fac:	3b01      	subs	r3, #1
    9fae:	60a3      	str	r3, [r4, #8]
    9fb0:	6823      	ldr	r3, [r4, #0]
    9fb2:	1c5a      	adds	r2, r3, #1
    9fb4:	6022      	str	r2, [r4, #0]
    9fb6:	701e      	strb	r6, [r3, #0]
    9fb8:	6963      	ldr	r3, [r4, #20]
    9fba:	3001      	adds	r0, #1
    9fbc:	4283      	cmp	r3, r0
    9fbe:	d004      	beq.n	9fca <__swbuf_r+0x8a>
    9fc0:	89a3      	ldrh	r3, [r4, #12]
    9fc2:	07db      	lsls	r3, r3, #31
    9fc4:	d5d7      	bpl.n	9f76 <__swbuf_r+0x36>
    9fc6:	2e0a      	cmp	r6, #10
    9fc8:	d1d5      	bne.n	9f76 <__swbuf_r+0x36>
    9fca:	4621      	mov	r1, r4
    9fcc:	4628      	mov	r0, r5
    9fce:	f000 f897 	bl	a100 <_fflush_r>
    9fd2:	2800      	cmp	r0, #0
    9fd4:	d0cf      	beq.n	9f76 <__swbuf_r+0x36>
    9fd6:	e7cc      	b.n	9f72 <__swbuf_r+0x32>
    9fd8:	0000bf74 	.word	0x0000bf74
    9fdc:	0000bf54 	.word	0x0000bf54
    9fe0:	0000bf34 	.word	0x0000bf34

00009fe4 <_write_r>:
    9fe4:	b538      	push	{r3, r4, r5, lr}
    9fe6:	4d07      	ldr	r5, [pc, #28]	; (a004 <_write_r+0x20>)
    9fe8:	4604      	mov	r4, r0
    9fea:	4608      	mov	r0, r1
    9fec:	4611      	mov	r1, r2
    9fee:	2200      	movs	r2, #0
    9ff0:	602a      	str	r2, [r5, #0]
    9ff2:	461a      	mov	r2, r3
    9ff4:	f000 fd6f 	bl	aad6 <_write>
    9ff8:	1c43      	adds	r3, r0, #1
    9ffa:	d102      	bne.n	a002 <_write_r+0x1e>
    9ffc:	682b      	ldr	r3, [r5, #0]
    9ffe:	b103      	cbz	r3, a002 <_write_r+0x1e>
    a000:	6023      	str	r3, [r4, #0]
    a002:	bd38      	pop	{r3, r4, r5, pc}
    a004:	20004f54 	.word	0x20004f54

0000a008 <__swsetup_r>:
    a008:	4b31      	ldr	r3, [pc, #196]	; (a0d0 <__swsetup_r+0xc8>)
    a00a:	b570      	push	{r4, r5, r6, lr}
    a00c:	681d      	ldr	r5, [r3, #0]
    a00e:	4606      	mov	r6, r0
    a010:	460c      	mov	r4, r1
    a012:	b125      	cbz	r5, a01e <__swsetup_r+0x16>
    a014:	69ab      	ldr	r3, [r5, #24]
    a016:	b913      	cbnz	r3, a01e <__swsetup_r+0x16>
    a018:	4628      	mov	r0, r5
    a01a:	f7ff fcad 	bl	9978 <__sinit>
    a01e:	4b2d      	ldr	r3, [pc, #180]	; (a0d4 <__swsetup_r+0xcc>)
    a020:	429c      	cmp	r4, r3
    a022:	d10e      	bne.n	a042 <__swsetup_r+0x3a>
    a024:	686c      	ldr	r4, [r5, #4]
    a026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a02a:	071a      	lsls	r2, r3, #28
    a02c:	d42c      	bmi.n	a088 <__swsetup_r+0x80>
    a02e:	06dd      	lsls	r5, r3, #27
    a030:	d411      	bmi.n	a056 <__swsetup_r+0x4e>
    a032:	2209      	movs	r2, #9
    a034:	6032      	str	r2, [r6, #0]
    a036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a03a:	81a3      	strh	r3, [r4, #12]
    a03c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a040:	e03d      	b.n	a0be <__swsetup_r+0xb6>
    a042:	4b25      	ldr	r3, [pc, #148]	; (a0d8 <__swsetup_r+0xd0>)
    a044:	429c      	cmp	r4, r3
    a046:	d101      	bne.n	a04c <__swsetup_r+0x44>
    a048:	68ac      	ldr	r4, [r5, #8]
    a04a:	e7ec      	b.n	a026 <__swsetup_r+0x1e>
    a04c:	4b23      	ldr	r3, [pc, #140]	; (a0dc <__swsetup_r+0xd4>)
    a04e:	429c      	cmp	r4, r3
    a050:	bf08      	it	eq
    a052:	68ec      	ldreq	r4, [r5, #12]
    a054:	e7e7      	b.n	a026 <__swsetup_r+0x1e>
    a056:	0758      	lsls	r0, r3, #29
    a058:	d512      	bpl.n	a080 <__swsetup_r+0x78>
    a05a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a05c:	b141      	cbz	r1, a070 <__swsetup_r+0x68>
    a05e:	f104 0344 	add.w	r3, r4, #68	; 0x44
    a062:	4299      	cmp	r1, r3
    a064:	d002      	beq.n	a06c <__swsetup_r+0x64>
    a066:	4630      	mov	r0, r6
    a068:	f7ff fb78 	bl	975c <_free_r>
    a06c:	2300      	movs	r3, #0
    a06e:	6363      	str	r3, [r4, #52]	; 0x34
    a070:	89a3      	ldrh	r3, [r4, #12]
    a072:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    a076:	81a3      	strh	r3, [r4, #12]
    a078:	2300      	movs	r3, #0
    a07a:	6063      	str	r3, [r4, #4]
    a07c:	6923      	ldr	r3, [r4, #16]
    a07e:	6023      	str	r3, [r4, #0]
    a080:	89a3      	ldrh	r3, [r4, #12]
    a082:	f043 0308 	orr.w	r3, r3, #8
    a086:	81a3      	strh	r3, [r4, #12]
    a088:	6923      	ldr	r3, [r4, #16]
    a08a:	b94b      	cbnz	r3, a0a0 <__swsetup_r+0x98>
    a08c:	89a3      	ldrh	r3, [r4, #12]
    a08e:	f403 7320 	and.w	r3, r3, #640	; 0x280
    a092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a096:	d003      	beq.n	a0a0 <__swsetup_r+0x98>
    a098:	4621      	mov	r1, r4
    a09a:	4630      	mov	r0, r6
    a09c:	f000 f87e 	bl	a19c <__smakebuf_r>
    a0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a0a4:	f013 0201 	ands.w	r2, r3, #1
    a0a8:	d00a      	beq.n	a0c0 <__swsetup_r+0xb8>
    a0aa:	2200      	movs	r2, #0
    a0ac:	60a2      	str	r2, [r4, #8]
    a0ae:	6962      	ldr	r2, [r4, #20]
    a0b0:	4252      	negs	r2, r2
    a0b2:	61a2      	str	r2, [r4, #24]
    a0b4:	6922      	ldr	r2, [r4, #16]
    a0b6:	b942      	cbnz	r2, a0ca <__swsetup_r+0xc2>
    a0b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    a0bc:	d1bb      	bne.n	a036 <__swsetup_r+0x2e>
    a0be:	bd70      	pop	{r4, r5, r6, pc}
    a0c0:	0799      	lsls	r1, r3, #30
    a0c2:	bf58      	it	pl
    a0c4:	6962      	ldrpl	r2, [r4, #20]
    a0c6:	60a2      	str	r2, [r4, #8]
    a0c8:	e7f4      	b.n	a0b4 <__swsetup_r+0xac>
    a0ca:	2000      	movs	r0, #0
    a0cc:	e7f7      	b.n	a0be <__swsetup_r+0xb6>
    a0ce:	bf00      	nop
    a0d0:	200000f0 	.word	0x200000f0
    a0d4:	0000bf74 	.word	0x0000bf74
    a0d8:	0000bf54 	.word	0x0000bf54
    a0dc:	0000bf34 	.word	0x0000bf34

0000a0e0 <_close_r>:
    a0e0:	b538      	push	{r3, r4, r5, lr}
    a0e2:	4d06      	ldr	r5, [pc, #24]	; (a0fc <_close_r+0x1c>)
    a0e4:	2300      	movs	r3, #0
    a0e6:	4604      	mov	r4, r0
    a0e8:	4608      	mov	r0, r1
    a0ea:	602b      	str	r3, [r5, #0]
    a0ec:	f000 fcf7 	bl	aade <_close>
    a0f0:	1c43      	adds	r3, r0, #1
    a0f2:	d102      	bne.n	a0fa <_close_r+0x1a>
    a0f4:	682b      	ldr	r3, [r5, #0]
    a0f6:	b103      	cbz	r3, a0fa <_close_r+0x1a>
    a0f8:	6023      	str	r3, [r4, #0]
    a0fa:	bd38      	pop	{r3, r4, r5, pc}
    a0fc:	20004f54 	.word	0x20004f54

0000a100 <_fflush_r>:
    a100:	b538      	push	{r3, r4, r5, lr}
    a102:	690b      	ldr	r3, [r1, #16]
    a104:	4605      	mov	r5, r0
    a106:	460c      	mov	r4, r1
    a108:	b913      	cbnz	r3, a110 <_fflush_r+0x10>
    a10a:	2500      	movs	r5, #0
    a10c:	4628      	mov	r0, r5
    a10e:	bd38      	pop	{r3, r4, r5, pc}
    a110:	b118      	cbz	r0, a11a <_fflush_r+0x1a>
    a112:	6983      	ldr	r3, [r0, #24]
    a114:	b90b      	cbnz	r3, a11a <_fflush_r+0x1a>
    a116:	f7ff fc2f 	bl	9978 <__sinit>
    a11a:	4b14      	ldr	r3, [pc, #80]	; (a16c <_fflush_r+0x6c>)
    a11c:	429c      	cmp	r4, r3
    a11e:	d11b      	bne.n	a158 <_fflush_r+0x58>
    a120:	686c      	ldr	r4, [r5, #4]
    a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a126:	2b00      	cmp	r3, #0
    a128:	d0ef      	beq.n	a10a <_fflush_r+0xa>
    a12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a12c:	07d0      	lsls	r0, r2, #31
    a12e:	d404      	bmi.n	a13a <_fflush_r+0x3a>
    a130:	0599      	lsls	r1, r3, #22
    a132:	d402      	bmi.n	a13a <_fflush_r+0x3a>
    a134:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a136:	f7fa fa5f 	bl	45f8 <__retarget_lock_acquire_recursive>
    a13a:	4628      	mov	r0, r5
    a13c:	4621      	mov	r1, r4
    a13e:	f001 fb76 	bl	b82e <__sflush_r>
    a142:	6e63      	ldr	r3, [r4, #100]	; 0x64
    a144:	07da      	lsls	r2, r3, #31
    a146:	4605      	mov	r5, r0
    a148:	d4e0      	bmi.n	a10c <_fflush_r+0xc>
    a14a:	89a3      	ldrh	r3, [r4, #12]
    a14c:	059b      	lsls	r3, r3, #22
    a14e:	d4dd      	bmi.n	a10c <_fflush_r+0xc>
    a150:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a152:	f7fa fa6f 	bl	4634 <__retarget_lock_release_recursive>
    a156:	e7d9      	b.n	a10c <_fflush_r+0xc>
    a158:	4b05      	ldr	r3, [pc, #20]	; (a170 <_fflush_r+0x70>)
    a15a:	429c      	cmp	r4, r3
    a15c:	d101      	bne.n	a162 <_fflush_r+0x62>
    a15e:	68ac      	ldr	r4, [r5, #8]
    a160:	e7df      	b.n	a122 <_fflush_r+0x22>
    a162:	4b04      	ldr	r3, [pc, #16]	; (a174 <_fflush_r+0x74>)
    a164:	429c      	cmp	r4, r3
    a166:	bf08      	it	eq
    a168:	68ec      	ldreq	r4, [r5, #12]
    a16a:	e7da      	b.n	a122 <_fflush_r+0x22>
    a16c:	0000bf74 	.word	0x0000bf74
    a170:	0000bf54 	.word	0x0000bf54
    a174:	0000bf34 	.word	0x0000bf34

0000a178 <_lseek_r>:
    a178:	b538      	push	{r3, r4, r5, lr}
    a17a:	4d07      	ldr	r5, [pc, #28]	; (a198 <_lseek_r+0x20>)
    a17c:	4604      	mov	r4, r0
    a17e:	4608      	mov	r0, r1
    a180:	4611      	mov	r1, r2
    a182:	2200      	movs	r2, #0
    a184:	602a      	str	r2, [r5, #0]
    a186:	461a      	mov	r2, r3
    a188:	f000 fcac 	bl	aae4 <_lseek>
    a18c:	1c43      	adds	r3, r0, #1
    a18e:	d102      	bne.n	a196 <_lseek_r+0x1e>
    a190:	682b      	ldr	r3, [r5, #0]
    a192:	b103      	cbz	r3, a196 <_lseek_r+0x1e>
    a194:	6023      	str	r3, [r4, #0]
    a196:	bd38      	pop	{r3, r4, r5, pc}
    a198:	20004f54 	.word	0x20004f54

0000a19c <__smakebuf_r>:
    a19c:	898b      	ldrh	r3, [r1, #12]
    a19e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1a0:	079d      	lsls	r5, r3, #30
    a1a2:	4606      	mov	r6, r0
    a1a4:	460c      	mov	r4, r1
    a1a6:	d507      	bpl.n	a1b8 <__smakebuf_r+0x1c>
    a1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    a1ac:	6023      	str	r3, [r4, #0]
    a1ae:	6123      	str	r3, [r4, #16]
    a1b0:	2301      	movs	r3, #1
    a1b2:	6163      	str	r3, [r4, #20]
    a1b4:	b003      	add	sp, #12
    a1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1b8:	ab01      	add	r3, sp, #4
    a1ba:	466a      	mov	r2, sp
    a1bc:	f001 fbb7 	bl	b92e <__swhatbuf_r>
    a1c0:	9f00      	ldr	r7, [sp, #0]
    a1c2:	4605      	mov	r5, r0
    a1c4:	4639      	mov	r1, r7
    a1c6:	4630      	mov	r0, r6
    a1c8:	f7ff fb12 	bl	97f0 <_malloc_r>
    a1cc:	b948      	cbnz	r0, a1e2 <__smakebuf_r+0x46>
    a1ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a1d2:	059a      	lsls	r2, r3, #22
    a1d4:	d4ee      	bmi.n	a1b4 <__smakebuf_r+0x18>
    a1d6:	f023 0303 	bic.w	r3, r3, #3
    a1da:	f043 0302 	orr.w	r3, r3, #2
    a1de:	81a3      	strh	r3, [r4, #12]
    a1e0:	e7e2      	b.n	a1a8 <__smakebuf_r+0xc>
    a1e2:	4b0d      	ldr	r3, [pc, #52]	; (a218 <__smakebuf_r+0x7c>)
    a1e4:	62b3      	str	r3, [r6, #40]	; 0x28
    a1e6:	89a3      	ldrh	r3, [r4, #12]
    a1e8:	6020      	str	r0, [r4, #0]
    a1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a1ee:	81a3      	strh	r3, [r4, #12]
    a1f0:	9b01      	ldr	r3, [sp, #4]
    a1f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
    a1f6:	b15b      	cbz	r3, a210 <__smakebuf_r+0x74>
    a1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a1fc:	4630      	mov	r0, r6
    a1fe:	f000 f831 	bl	a264 <_isatty_r>
    a202:	b128      	cbz	r0, a210 <__smakebuf_r+0x74>
    a204:	89a3      	ldrh	r3, [r4, #12]
    a206:	f023 0303 	bic.w	r3, r3, #3
    a20a:	f043 0301 	orr.w	r3, r3, #1
    a20e:	81a3      	strh	r3, [r4, #12]
    a210:	89a3      	ldrh	r3, [r4, #12]
    a212:	431d      	orrs	r5, r3
    a214:	81a5      	strh	r5, [r4, #12]
    a216:	e7cd      	b.n	a1b4 <__smakebuf_r+0x18>
    a218:	0000993d 	.word	0x0000993d

0000a21c <_read_r>:
    a21c:	b538      	push	{r3, r4, r5, lr}
    a21e:	4d07      	ldr	r5, [pc, #28]	; (a23c <_read_r+0x20>)
    a220:	4604      	mov	r4, r0
    a222:	4608      	mov	r0, r1
    a224:	4611      	mov	r1, r2
    a226:	2200      	movs	r2, #0
    a228:	602a      	str	r2, [r5, #0]
    a22a:	461a      	mov	r2, r3
    a22c:	f000 fc4f 	bl	aace <_read>
    a230:	1c43      	adds	r3, r0, #1
    a232:	d102      	bne.n	a23a <_read_r+0x1e>
    a234:	682b      	ldr	r3, [r5, #0]
    a236:	b103      	cbz	r3, a23a <_read_r+0x1e>
    a238:	6023      	str	r3, [r4, #0]
    a23a:	bd38      	pop	{r3, r4, r5, pc}
    a23c:	20004f54 	.word	0x20004f54

0000a240 <_fstat_r>:
    a240:	b538      	push	{r3, r4, r5, lr}
    a242:	4d07      	ldr	r5, [pc, #28]	; (a260 <_fstat_r+0x20>)
    a244:	2300      	movs	r3, #0
    a246:	4604      	mov	r4, r0
    a248:	4608      	mov	r0, r1
    a24a:	4611      	mov	r1, r2
    a24c:	602b      	str	r3, [r5, #0]
    a24e:	f000 fc50 	bl	aaf2 <_fstat>
    a252:	1c43      	adds	r3, r0, #1
    a254:	d102      	bne.n	a25c <_fstat_r+0x1c>
    a256:	682b      	ldr	r3, [r5, #0]
    a258:	b103      	cbz	r3, a25c <_fstat_r+0x1c>
    a25a:	6023      	str	r3, [r4, #0]
    a25c:	bd38      	pop	{r3, r4, r5, pc}
    a25e:	bf00      	nop
    a260:	20004f54 	.word	0x20004f54

0000a264 <_isatty_r>:
    a264:	b538      	push	{r3, r4, r5, lr}
    a266:	4d06      	ldr	r5, [pc, #24]	; (a280 <_isatty_r+0x1c>)
    a268:	2300      	movs	r3, #0
    a26a:	4604      	mov	r4, r0
    a26c:	4608      	mov	r0, r1
    a26e:	602b      	str	r3, [r5, #0]
    a270:	f000 fc3a 	bl	aae8 <_isatty>
    a274:	1c43      	adds	r3, r0, #1
    a276:	d102      	bne.n	a27e <_isatty_r+0x1a>
    a278:	682b      	ldr	r3, [r5, #0]
    a27a:	b103      	cbz	r3, a27e <_isatty_r+0x1a>
    a27c:	6023      	str	r3, [r4, #0]
    a27e:	bd38      	pop	{r3, r4, r5, pc}
    a280:	20004f54 	.word	0x20004f54

0000a284 <nrf_cc3xx_platform_init_no_rng>:
    a284:	b510      	push	{r4, lr}
    a286:	4c0a      	ldr	r4, [pc, #40]	; (a2b0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a288:	6823      	ldr	r3, [r4, #0]
    a28a:	b11b      	cbz	r3, a294 <nrf_cc3xx_platform_init_no_rng+0x10>
    a28c:	2301      	movs	r3, #1
    a28e:	6023      	str	r3, [r4, #0]
    a290:	2000      	movs	r0, #0
    a292:	bd10      	pop	{r4, pc}
    a294:	f000 f8ce 	bl	a434 <CC_LibInitNoRng>
    a298:	2800      	cmp	r0, #0
    a29a:	d0f7      	beq.n	a28c <nrf_cc3xx_platform_init_no_rng+0x8>
    a29c:	3801      	subs	r0, #1
    a29e:	2806      	cmp	r0, #6
    a2a0:	d803      	bhi.n	a2aa <nrf_cc3xx_platform_init_no_rng+0x26>
    a2a2:	4b04      	ldr	r3, [pc, #16]	; (a2b4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a2a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a2a8:	bd10      	pop	{r4, pc}
    a2aa:	4803      	ldr	r0, [pc, #12]	; (a2b8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a2ac:	bd10      	pop	{r4, pc}
    a2ae:	bf00      	nop
    a2b0:	20004f58 	.word	0x20004f58
    a2b4:	0000bf98 	.word	0x0000bf98
    a2b8:	ffff8ffe 	.word	0xffff8ffe

0000a2bc <nrf_cc3xx_platform_abort>:
    a2bc:	f3bf 8f4f 	dsb	sy
    a2c0:	4905      	ldr	r1, [pc, #20]	; (a2d8 <nrf_cc3xx_platform_abort+0x1c>)
    a2c2:	4b06      	ldr	r3, [pc, #24]	; (a2dc <nrf_cc3xx_platform_abort+0x20>)
    a2c4:	68ca      	ldr	r2, [r1, #12]
    a2c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a2ca:	4313      	orrs	r3, r2
    a2cc:	60cb      	str	r3, [r1, #12]
    a2ce:	f3bf 8f4f 	dsb	sy
    a2d2:	bf00      	nop
    a2d4:	e7fd      	b.n	a2d2 <nrf_cc3xx_platform_abort+0x16>
    a2d6:	bf00      	nop
    a2d8:	e000ed00 	.word	0xe000ed00
    a2dc:	05fa0004 	.word	0x05fa0004

0000a2e0 <CC_PalAbort>:
    a2e0:	b410      	push	{r4}
    a2e2:	4b09      	ldr	r3, [pc, #36]	; (a308 <CC_PalAbort+0x28>)
    a2e4:	4909      	ldr	r1, [pc, #36]	; (a30c <CC_PalAbort+0x2c>)
    a2e6:	4c0a      	ldr	r4, [pc, #40]	; (a310 <CC_PalAbort+0x30>)
    a2e8:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a2ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a2f0:	6849      	ldr	r1, [r1, #4]
    a2f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a2f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a2fa:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a2fe:	2300      	movs	r3, #0
    a300:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a304:	bc10      	pop	{r4}
    a306:	4708      	bx	r1
    a308:	5002b000 	.word	0x5002b000
    a30c:	20000154 	.word	0x20000154
    a310:	5002a000 	.word	0x5002a000

0000a314 <nrf_cc3xx_platform_set_abort>:
    a314:	e9d0 1200 	ldrd	r1, r2, [r0]
    a318:	4b01      	ldr	r3, [pc, #4]	; (a320 <nrf_cc3xx_platform_set_abort+0xc>)
    a31a:	e9c3 1200 	strd	r1, r2, [r3]
    a31e:	4770      	bx	lr
    a320:	20000154 	.word	0x20000154

0000a324 <mutex_free>:
    a324:	b510      	push	{r4, lr}
    a326:	4604      	mov	r4, r0
    a328:	b130      	cbz	r0, a338 <mutex_free+0x14>
    a32a:	6863      	ldr	r3, [r4, #4]
    a32c:	06db      	lsls	r3, r3, #27
    a32e:	d502      	bpl.n	a336 <mutex_free+0x12>
    a330:	2300      	movs	r3, #0
    a332:	6023      	str	r3, [r4, #0]
    a334:	6063      	str	r3, [r4, #4]
    a336:	bd10      	pop	{r4, pc}
    a338:	4b02      	ldr	r3, [pc, #8]	; (a344 <mutex_free+0x20>)
    a33a:	4803      	ldr	r0, [pc, #12]	; (a348 <mutex_free+0x24>)
    a33c:	685b      	ldr	r3, [r3, #4]
    a33e:	4798      	blx	r3
    a340:	e7f3      	b.n	a32a <mutex_free+0x6>
    a342:	bf00      	nop
    a344:	20000154 	.word	0x20000154
    a348:	0000bfb4 	.word	0x0000bfb4

0000a34c <mutex_lock>:
    a34c:	b1b0      	cbz	r0, a37c <mutex_lock+0x30>
    a34e:	6843      	ldr	r3, [r0, #4]
    a350:	b193      	cbz	r3, a378 <mutex_lock+0x2c>
    a352:	06db      	lsls	r3, r3, #27
    a354:	d50e      	bpl.n	a374 <mutex_lock+0x28>
    a356:	2301      	movs	r3, #1
    a358:	e850 2f00 	ldrex	r2, [r0]
    a35c:	4619      	mov	r1, r3
    a35e:	e840 1c00 	strex	ip, r1, [r0]
    a362:	f09c 0f00 	teq	ip, #0
    a366:	d1f7      	bne.n	a358 <mutex_lock+0xc>
    a368:	2a01      	cmp	r2, #1
    a36a:	d0f5      	beq.n	a358 <mutex_lock+0xc>
    a36c:	f3bf 8f5f 	dmb	sy
    a370:	2000      	movs	r0, #0
    a372:	4770      	bx	lr
    a374:	4803      	ldr	r0, [pc, #12]	; (a384 <mutex_lock+0x38>)
    a376:	4770      	bx	lr
    a378:	4803      	ldr	r0, [pc, #12]	; (a388 <mutex_lock+0x3c>)
    a37a:	4770      	bx	lr
    a37c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a380:	4770      	bx	lr
    a382:	bf00      	nop
    a384:	ffff8fe9 	.word	0xffff8fe9
    a388:	ffff8fea 	.word	0xffff8fea

0000a38c <mutex_unlock>:
    a38c:	b168      	cbz	r0, a3aa <mutex_unlock+0x1e>
    a38e:	6843      	ldr	r3, [r0, #4]
    a390:	b13b      	cbz	r3, a3a2 <mutex_unlock+0x16>
    a392:	06db      	lsls	r3, r3, #27
    a394:	d507      	bpl.n	a3a6 <mutex_unlock+0x1a>
    a396:	f3bf 8f5f 	dmb	sy
    a39a:	2300      	movs	r3, #0
    a39c:	6003      	str	r3, [r0, #0]
    a39e:	4618      	mov	r0, r3
    a3a0:	4770      	bx	lr
    a3a2:	4803      	ldr	r0, [pc, #12]	; (a3b0 <mutex_unlock+0x24>)
    a3a4:	4770      	bx	lr
    a3a6:	4803      	ldr	r0, [pc, #12]	; (a3b4 <mutex_unlock+0x28>)
    a3a8:	4770      	bx	lr
    a3aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a3ae:	4770      	bx	lr
    a3b0:	ffff8fea 	.word	0xffff8fea
    a3b4:	ffff8fe9 	.word	0xffff8fe9

0000a3b8 <mutex_init>:
    a3b8:	b510      	push	{r4, lr}
    a3ba:	4604      	mov	r4, r0
    a3bc:	b120      	cbz	r0, a3c8 <mutex_init+0x10>
    a3be:	2200      	movs	r2, #0
    a3c0:	2311      	movs	r3, #17
    a3c2:	6022      	str	r2, [r4, #0]
    a3c4:	6063      	str	r3, [r4, #4]
    a3c6:	bd10      	pop	{r4, pc}
    a3c8:	4801      	ldr	r0, [pc, #4]	; (a3d0 <mutex_init+0x18>)
    a3ca:	f7ff ff89 	bl	a2e0 <CC_PalAbort>
    a3ce:	e7f6      	b.n	a3be <mutex_init+0x6>
    a3d0:	0000bfdc 	.word	0x0000bfdc

0000a3d4 <nrf_cc3xx_platform_set_mutexes>:
    a3d4:	b570      	push	{r4, r5, r6, lr}
    a3d6:	e9d0 2300 	ldrd	r2, r3, [r0]
    a3da:	4c13      	ldr	r4, [pc, #76]	; (a428 <nrf_cc3xx_platform_set_mutexes+0x54>)
    a3dc:	4d13      	ldr	r5, [pc, #76]	; (a42c <nrf_cc3xx_platform_set_mutexes+0x58>)
    a3de:	6063      	str	r3, [r4, #4]
    a3e0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a3e4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a3e8:	6022      	str	r2, [r4, #0]
    a3ea:	4b11      	ldr	r3, [pc, #68]	; (a430 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a3ec:	6808      	ldr	r0, [r1, #0]
    a3ee:	6018      	str	r0, [r3, #0]
    a3f0:	6848      	ldr	r0, [r1, #4]
    a3f2:	6058      	str	r0, [r3, #4]
    a3f4:	6888      	ldr	r0, [r1, #8]
    a3f6:	6098      	str	r0, [r3, #8]
    a3f8:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a3fc:	60d8      	str	r0, [r3, #12]
    a3fe:	6119      	str	r1, [r3, #16]
    a400:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a404:	06db      	lsls	r3, r3, #27
    a406:	d50d      	bpl.n	a424 <nrf_cc3xx_platform_set_mutexes+0x50>
    a408:	2300      	movs	r3, #0
    a40a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a40e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a412:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a416:	4790      	blx	r2
    a418:	6823      	ldr	r3, [r4, #0]
    a41a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a422:	4718      	bx	r3
    a424:	bd70      	pop	{r4, r5, r6, pc}
    a426:	bf00      	nop
    a428:	20000164 	.word	0x20000164
    a42c:	20004f70 	.word	0x20004f70
    a430:	20000174 	.word	0x20000174

0000a434 <CC_LibInitNoRng>:
    a434:	b538      	push	{r3, r4, r5, lr}
    a436:	f000 f82f 	bl	a498 <CC_HalInit>
    a43a:	b120      	cbz	r0, a446 <CC_LibInitNoRng+0x12>
    a43c:	2403      	movs	r4, #3
    a43e:	f000 f863 	bl	a508 <CC_PalTerminate>
    a442:	4620      	mov	r0, r4
    a444:	bd38      	pop	{r3, r4, r5, pc}
    a446:	f000 f831 	bl	a4ac <CC_PalInit>
    a44a:	b998      	cbnz	r0, a474 <CC_LibInitNoRng+0x40>
    a44c:	f000 f8ac 	bl	a5a8 <CC_PalPowerSaveModeSelect>
    a450:	b998      	cbnz	r0, a47a <CC_LibInitNoRng+0x46>
    a452:	4d0f      	ldr	r5, [pc, #60]	; (a490 <CC_LibInitNoRng+0x5c>)
    a454:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a458:	0e1b      	lsrs	r3, r3, #24
    a45a:	2bf0      	cmp	r3, #240	; 0xf0
    a45c:	d108      	bne.n	a470 <CC_LibInitNoRng+0x3c>
    a45e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a462:	4b0c      	ldr	r3, [pc, #48]	; (a494 <CC_LibInitNoRng+0x60>)
    a464:	429a      	cmp	r2, r3
    a466:	d00a      	beq.n	a47e <CC_LibInitNoRng+0x4a>
    a468:	2407      	movs	r4, #7
    a46a:	f000 f817 	bl	a49c <CC_HalTerminate>
    a46e:	e7e6      	b.n	a43e <CC_LibInitNoRng+0xa>
    a470:	2406      	movs	r4, #6
    a472:	e7fa      	b.n	a46a <CC_LibInitNoRng+0x36>
    a474:	2404      	movs	r4, #4
    a476:	4620      	mov	r0, r4
    a478:	bd38      	pop	{r3, r4, r5, pc}
    a47a:	2400      	movs	r4, #0
    a47c:	e7f5      	b.n	a46a <CC_LibInitNoRng+0x36>
    a47e:	2001      	movs	r0, #1
    a480:	f000 f892 	bl	a5a8 <CC_PalPowerSaveModeSelect>
    a484:	4604      	mov	r4, r0
    a486:	2800      	cmp	r0, #0
    a488:	d1f7      	bne.n	a47a <CC_LibInitNoRng+0x46>
    a48a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a48e:	e7d8      	b.n	a442 <CC_LibInitNoRng+0xe>
    a490:	5002b000 	.word	0x5002b000
    a494:	20e00000 	.word	0x20e00000

0000a498 <CC_HalInit>:
    a498:	2000      	movs	r0, #0
    a49a:	4770      	bx	lr

0000a49c <CC_HalTerminate>:
    a49c:	2000      	movs	r0, #0
    a49e:	4770      	bx	lr

0000a4a0 <CC_HalMaskInterrupt>:
    a4a0:	4b01      	ldr	r3, [pc, #4]	; (a4a8 <CC_HalMaskInterrupt+0x8>)
    a4a2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a4a6:	4770      	bx	lr
    a4a8:	5002b000 	.word	0x5002b000

0000a4ac <CC_PalInit>:
    a4ac:	b510      	push	{r4, lr}
    a4ae:	4811      	ldr	r0, [pc, #68]	; (a4f4 <CC_PalInit+0x48>)
    a4b0:	f000 f848 	bl	a544 <CC_PalMutexCreate>
    a4b4:	b100      	cbz	r0, a4b8 <CC_PalInit+0xc>
    a4b6:	bd10      	pop	{r4, pc}
    a4b8:	480f      	ldr	r0, [pc, #60]	; (a4f8 <CC_PalInit+0x4c>)
    a4ba:	f000 f843 	bl	a544 <CC_PalMutexCreate>
    a4be:	2800      	cmp	r0, #0
    a4c0:	d1f9      	bne.n	a4b6 <CC_PalInit+0xa>
    a4c2:	4c0e      	ldr	r4, [pc, #56]	; (a4fc <CC_PalInit+0x50>)
    a4c4:	4620      	mov	r0, r4
    a4c6:	f000 f83d 	bl	a544 <CC_PalMutexCreate>
    a4ca:	2800      	cmp	r0, #0
    a4cc:	d1f3      	bne.n	a4b6 <CC_PalInit+0xa>
    a4ce:	4b0c      	ldr	r3, [pc, #48]	; (a500 <CC_PalInit+0x54>)
    a4d0:	480c      	ldr	r0, [pc, #48]	; (a504 <CC_PalInit+0x58>)
    a4d2:	601c      	str	r4, [r3, #0]
    a4d4:	f000 f836 	bl	a544 <CC_PalMutexCreate>
    a4d8:	4601      	mov	r1, r0
    a4da:	2800      	cmp	r0, #0
    a4dc:	d1eb      	bne.n	a4b6 <CC_PalInit+0xa>
    a4de:	f000 f82d 	bl	a53c <CC_PalDmaInit>
    a4e2:	4604      	mov	r4, r0
    a4e4:	b108      	cbz	r0, a4ea <CC_PalInit+0x3e>
    a4e6:	4620      	mov	r0, r4
    a4e8:	bd10      	pop	{r4, pc}
    a4ea:	f000 f83f 	bl	a56c <CC_PalPowerSaveModeInit>
    a4ee:	4620      	mov	r0, r4
    a4f0:	e7fa      	b.n	a4e8 <CC_PalInit+0x3c>
    a4f2:	bf00      	nop
    a4f4:	200001ac 	.word	0x200001ac
    a4f8:	200001a0 	.word	0x200001a0
    a4fc:	200001a8 	.word	0x200001a8
    a500:	200001b0 	.word	0x200001b0
    a504:	200001a4 	.word	0x200001a4

0000a508 <CC_PalTerminate>:
    a508:	b508      	push	{r3, lr}
    a50a:	4808      	ldr	r0, [pc, #32]	; (a52c <CC_PalTerminate+0x24>)
    a50c:	f000 f824 	bl	a558 <CC_PalMutexDestroy>
    a510:	4807      	ldr	r0, [pc, #28]	; (a530 <CC_PalTerminate+0x28>)
    a512:	f000 f821 	bl	a558 <CC_PalMutexDestroy>
    a516:	4807      	ldr	r0, [pc, #28]	; (a534 <CC_PalTerminate+0x2c>)
    a518:	f000 f81e 	bl	a558 <CC_PalMutexDestroy>
    a51c:	4806      	ldr	r0, [pc, #24]	; (a538 <CC_PalTerminate+0x30>)
    a51e:	f000 f81b 	bl	a558 <CC_PalMutexDestroy>
    a522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a526:	f000 b80b 	b.w	a540 <CC_PalDmaTerminate>
    a52a:	bf00      	nop
    a52c:	200001ac 	.word	0x200001ac
    a530:	200001a0 	.word	0x200001a0
    a534:	200001a8 	.word	0x200001a8
    a538:	200001a4 	.word	0x200001a4

0000a53c <CC_PalDmaInit>:
    a53c:	2000      	movs	r0, #0
    a53e:	4770      	bx	lr

0000a540 <CC_PalDmaTerminate>:
    a540:	4770      	bx	lr
    a542:	bf00      	nop

0000a544 <CC_PalMutexCreate>:
    a544:	b508      	push	{r3, lr}
    a546:	4b03      	ldr	r3, [pc, #12]	; (a554 <CC_PalMutexCreate+0x10>)
    a548:	6802      	ldr	r2, [r0, #0]
    a54a:	681b      	ldr	r3, [r3, #0]
    a54c:	6810      	ldr	r0, [r2, #0]
    a54e:	4798      	blx	r3
    a550:	2000      	movs	r0, #0
    a552:	bd08      	pop	{r3, pc}
    a554:	20000164 	.word	0x20000164

0000a558 <CC_PalMutexDestroy>:
    a558:	b508      	push	{r3, lr}
    a55a:	4b03      	ldr	r3, [pc, #12]	; (a568 <CC_PalMutexDestroy+0x10>)
    a55c:	6802      	ldr	r2, [r0, #0]
    a55e:	685b      	ldr	r3, [r3, #4]
    a560:	6810      	ldr	r0, [r2, #0]
    a562:	4798      	blx	r3
    a564:	2000      	movs	r0, #0
    a566:	bd08      	pop	{r3, pc}
    a568:	20000164 	.word	0x20000164

0000a56c <CC_PalPowerSaveModeInit>:
    a56c:	b570      	push	{r4, r5, r6, lr}
    a56e:	4c09      	ldr	r4, [pc, #36]	; (a594 <CC_PalPowerSaveModeInit+0x28>)
    a570:	4d09      	ldr	r5, [pc, #36]	; (a598 <CC_PalPowerSaveModeInit+0x2c>)
    a572:	6920      	ldr	r0, [r4, #16]
    a574:	68ab      	ldr	r3, [r5, #8]
    a576:	4798      	blx	r3
    a578:	b118      	cbz	r0, a582 <CC_PalPowerSaveModeInit+0x16>
    a57a:	4b08      	ldr	r3, [pc, #32]	; (a59c <CC_PalPowerSaveModeInit+0x30>)
    a57c:	4808      	ldr	r0, [pc, #32]	; (a5a0 <CC_PalPowerSaveModeInit+0x34>)
    a57e:	685b      	ldr	r3, [r3, #4]
    a580:	4798      	blx	r3
    a582:	4a08      	ldr	r2, [pc, #32]	; (a5a4 <CC_PalPowerSaveModeInit+0x38>)
    a584:	68eb      	ldr	r3, [r5, #12]
    a586:	6920      	ldr	r0, [r4, #16]
    a588:	2100      	movs	r1, #0
    a58a:	6011      	str	r1, [r2, #0]
    a58c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a590:	4718      	bx	r3
    a592:	bf00      	nop
    a594:	20000174 	.word	0x20000174
    a598:	20000164 	.word	0x20000164
    a59c:	20000154 	.word	0x20000154
    a5a0:	0000c000 	.word	0x0000c000
    a5a4:	20004f6c 	.word	0x20004f6c

0000a5a8 <CC_PalPowerSaveModeSelect>:
    a5a8:	b570      	push	{r4, r5, r6, lr}
    a5aa:	4d1b      	ldr	r5, [pc, #108]	; (a618 <CC_PalPowerSaveModeSelect+0x70>)
    a5ac:	4e1b      	ldr	r6, [pc, #108]	; (a61c <CC_PalPowerSaveModeSelect+0x74>)
    a5ae:	4604      	mov	r4, r0
    a5b0:	68b2      	ldr	r2, [r6, #8]
    a5b2:	6928      	ldr	r0, [r5, #16]
    a5b4:	4790      	blx	r2
    a5b6:	b9f8      	cbnz	r0, a5f8 <CC_PalPowerSaveModeSelect+0x50>
    a5b8:	b15c      	cbz	r4, a5d2 <CC_PalPowerSaveModeSelect+0x2a>
    a5ba:	4c19      	ldr	r4, [pc, #100]	; (a620 <CC_PalPowerSaveModeSelect+0x78>)
    a5bc:	6823      	ldr	r3, [r4, #0]
    a5be:	b1b3      	cbz	r3, a5ee <CC_PalPowerSaveModeSelect+0x46>
    a5c0:	2b01      	cmp	r3, #1
    a5c2:	d01b      	beq.n	a5fc <CC_PalPowerSaveModeSelect+0x54>
    a5c4:	3b01      	subs	r3, #1
    a5c6:	6023      	str	r3, [r4, #0]
    a5c8:	6928      	ldr	r0, [r5, #16]
    a5ca:	68f3      	ldr	r3, [r6, #12]
    a5cc:	4798      	blx	r3
    a5ce:	2000      	movs	r0, #0
    a5d0:	bd70      	pop	{r4, r5, r6, pc}
    a5d2:	4c13      	ldr	r4, [pc, #76]	; (a620 <CC_PalPowerSaveModeSelect+0x78>)
    a5d4:	6821      	ldr	r1, [r4, #0]
    a5d6:	b941      	cbnz	r1, a5ea <CC_PalPowerSaveModeSelect+0x42>
    a5d8:	4b12      	ldr	r3, [pc, #72]	; (a624 <CC_PalPowerSaveModeSelect+0x7c>)
    a5da:	2201      	movs	r2, #1
    a5dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    a5e0:	4a11      	ldr	r2, [pc, #68]	; (a628 <CC_PalPowerSaveModeSelect+0x80>)
    a5e2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d1fb      	bne.n	a5e2 <CC_PalPowerSaveModeSelect+0x3a>
    a5ea:	3101      	adds	r1, #1
    a5ec:	6021      	str	r1, [r4, #0]
    a5ee:	68f3      	ldr	r3, [r6, #12]
    a5f0:	6928      	ldr	r0, [r5, #16]
    a5f2:	4798      	blx	r3
    a5f4:	2000      	movs	r0, #0
    a5f6:	bd70      	pop	{r4, r5, r6, pc}
    a5f8:	480c      	ldr	r0, [pc, #48]	; (a62c <CC_PalPowerSaveModeSelect+0x84>)
    a5fa:	bd70      	pop	{r4, r5, r6, pc}
    a5fc:	4a0a      	ldr	r2, [pc, #40]	; (a628 <CC_PalPowerSaveModeSelect+0x80>)
    a5fe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a602:	2b00      	cmp	r3, #0
    a604:	d1fb      	bne.n	a5fe <CC_PalPowerSaveModeSelect+0x56>
    a606:	4a07      	ldr	r2, [pc, #28]	; (a624 <CC_PalPowerSaveModeSelect+0x7c>)
    a608:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a60c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a610:	f7ff ff46 	bl	a4a0 <CC_HalMaskInterrupt>
    a614:	6823      	ldr	r3, [r4, #0]
    a616:	e7d5      	b.n	a5c4 <CC_PalPowerSaveModeSelect+0x1c>
    a618:	20000174 	.word	0x20000174
    a61c:	20000164 	.word	0x20000164
    a620:	20004f6c 	.word	0x20004f6c
    a624:	5002a000 	.word	0x5002a000
    a628:	5002b000 	.word	0x5002b000
    a62c:	ffff8fe9 	.word	0xffff8fe9

0000a630 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a630:	4770      	bx	lr

0000a632 <thread_RXDATA_code>:
}
    a632:	4770      	bx	lr

0000a634 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a638:	4607      	mov	r7, r0
    a63a:	460e      	mov	r6, r1
    a63c:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a63e:	461d      	mov	r5, r3
    a640:	b30b      	cbz	r3, a686 <cbpprintf_external+0x52>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
    a642:	78ac      	ldrb	r4, [r5, #2]
	rws_nbr   = buf[3];
    a644:	78ea      	ldrb	r2, [r5, #3]
	s_nbr     = buf[1];
    a646:	f893 a001 	ldrb.w	sl, [r3, #1]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a64a:	781b      	ldrb	r3, [r3, #0]
    a64c:	4414      	add	r4, r2
    a64e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    a652:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a654:	f04f 0900 	mov.w	r9, #0
    a658:	45d1      	cmp	r9, sl
    a65a:	d308      	bcc.n	a66e <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    a65c:	686a      	ldr	r2, [r5, #4]
    a65e:	f105 0308 	add.w	r3, r5, #8
    a662:	4641      	mov	r1, r8
    a664:	4638      	mov	r0, r7
    a666:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    a668:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    a66c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    a66e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    a672:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    a676:	4620      	mov	r0, r4
    a678:	f7f6 fbac 	bl	dd4 <strlen>
    a67c:	3001      	adds	r0, #1
    a67e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a680:	f109 0901 	add.w	r9, r9, #1
    a684:	e7e8      	b.n	a658 <cbpprintf_external+0x24>
}
    a686:	f06f 0015 	mvn.w	r0, #21
    a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a68e <sys_notify_validate>:
	if (notify == NULL) {
    a68e:	4603      	mov	r3, r0
    a690:	b158      	cbz	r0, a6aa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a692:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a694:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    a698:	2a01      	cmp	r2, #1
    a69a:	d003      	beq.n	a6a4 <sys_notify_validate+0x16>
    a69c:	2a03      	cmp	r2, #3
    a69e:	d104      	bne.n	a6aa <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    a6a0:	6802      	ldr	r2, [r0, #0]
    a6a2:	b112      	cbz	r2, a6aa <sys_notify_validate+0x1c>
		notify->result = 0;
    a6a4:	2000      	movs	r0, #0
    a6a6:	6098      	str	r0, [r3, #8]
    a6a8:	4770      	bx	lr
    a6aa:	f06f 0015 	mvn.w	r0, #21
}
    a6ae:	4770      	bx	lr

0000a6b0 <arch_printk_char_out>:
}
    a6b0:	2000      	movs	r0, #0
    a6b2:	4770      	bx	lr

0000a6b4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a6b4:	f000 b95f 	b.w	a976 <z_log_vprintk>

0000a6b8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a6b8:	b40f      	push	{r0, r1, r2, r3}
    a6ba:	b507      	push	{r0, r1, r2, lr}
    a6bc:	a904      	add	r1, sp, #16
    a6be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a6c2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    a6c4:	f000 f957 	bl	a976 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    a6c8:	b003      	add	sp, #12
    a6ca:	f85d eb04 	ldr.w	lr, [sp], #4
    a6ce:	b004      	add	sp, #16
    a6d0:	4770      	bx	lr

0000a6d2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a6d2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a6d4:	f013 0307 	ands.w	r3, r3, #7
    a6d8:	d105      	bne.n	a6e6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    a6da:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    a6dc:	2b00      	cmp	r3, #0
    a6de:	bf0c      	ite	eq
    a6e0:	2000      	moveq	r0, #0
    a6e2:	2003      	movne	r0, #3
    a6e4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a6e6:	2b02      	cmp	r3, #2
    a6e8:	d105      	bne.n	a6f6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    a6ea:	8bc0      	ldrh	r0, [r0, #30]
    a6ec:	fab0 f080 	clz	r0, r0
    a6f0:	0940      	lsrs	r0, r0, #5
    a6f2:	0080      	lsls	r0, r0, #2
    a6f4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    a6f6:	2b01      	cmp	r3, #1
    a6f8:	d105      	bne.n	a706 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    a6fa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	bf0c      	ite	eq
    a700:	2000      	moveq	r0, #0
    a702:	2005      	movne	r0, #5
    a704:	4770      	bx	lr
	int evt = EVT_NOP;
    a706:	2000      	movs	r0, #0
}
    a708:	4770      	bx	lr

0000a70a <validate_args>:
{
    a70a:	b510      	push	{r4, lr}
    a70c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a70e:	b100      	cbz	r0, a712 <validate_args+0x8>
    a710:	b911      	cbnz	r1, a718 <validate_args+0xe>
		return -EINVAL;
    a712:	f06f 0015 	mvn.w	r0, #21
}
    a716:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    a718:	1d08      	adds	r0, r1, #4
    a71a:	f7ff ffb8 	bl	a68e <sys_notify_validate>
	if ((rv == 0)
    a71e:	2800      	cmp	r0, #0
    a720:	d1f9      	bne.n	a716 <validate_args+0xc>
	    && ((cli->notify.flags
    a722:	68a3      	ldr	r3, [r4, #8]
    a724:	2b03      	cmp	r3, #3
    a726:	d9f6      	bls.n	a716 <validate_args+0xc>
    a728:	e7f3      	b.n	a712 <validate_args+0x8>

0000a72a <notify_one>:
{
    a72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a72e:	460d      	mov	r5, r1
    a730:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a732:	4619      	mov	r1, r3
    a734:	1d28      	adds	r0, r5, #4
{
    a736:	4690      	mov	r8, r2
    a738:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a73a:	f7f7 f997 	bl	1a6c <sys_notify_finalize>
	if (cb) {
    a73e:	4604      	mov	r4, r0
    a740:	b138      	cbz	r0, a752 <notify_one+0x28>
		cb(mgr, cli, state, res);
    a742:	4633      	mov	r3, r6
    a744:	4642      	mov	r2, r8
    a746:	4629      	mov	r1, r5
    a748:	4638      	mov	r0, r7
    a74a:	46a4      	mov	ip, r4
}
    a74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    a750:	4760      	bx	ip
}
    a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a756 <onoff_manager_init>:
{
    a756:	b538      	push	{r3, r4, r5, lr}
    a758:	460c      	mov	r4, r1
	if ((mgr == NULL)
    a75a:	4605      	mov	r5, r0
    a75c:	b158      	cbz	r0, a776 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    a75e:	b151      	cbz	r1, a776 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    a760:	680b      	ldr	r3, [r1, #0]
    a762:	b143      	cbz	r3, a776 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    a764:	684b      	ldr	r3, [r1, #4]
    a766:	b133      	cbz	r3, a776 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a768:	2220      	movs	r2, #32
    a76a:	2100      	movs	r1, #0
    a76c:	f000 ff37 	bl	b5de <memset>
    a770:	612c      	str	r4, [r5, #16]
	return 0;
    a772:	2000      	movs	r0, #0
}
    a774:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a776:	f06f 0015 	mvn.w	r0, #21
    a77a:	e7fb      	b.n	a774 <onoff_manager_init+0x1e>

0000a77c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a77c:	4604      	mov	r4, r0
    a77e:	b508      	push	{r3, lr}
    a780:	4608      	mov	r0, r1
    a782:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a784:	461a      	mov	r2, r3
    a786:	47a0      	blx	r4
	return z_impl_z_current_get();
    a788:	f7fe f9ae 	bl	8ae8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a78c:	f7f9 fd38 	bl	4200 <z_impl_k_thread_abort>

0000a790 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    a790:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    a794:	8840      	ldrh	r0, [r0, #2]
}
    a796:	0840      	lsrs	r0, r0, #1
    a798:	4770      	bx	lr

0000a79a <free_list_add>:
{
    a79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a79c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    a79e:	f7ff fff7 	bl	a790 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    a7a2:	fab0 f080 	clz	r0, r0
    a7a6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    a7aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    a7ae:	00ca      	lsls	r2, r1, #3
    a7b0:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    a7b4:	1d17      	adds	r7, r2, #4
{
    a7b6:	460c      	mov	r4, r1
    a7b8:	3206      	adds	r2, #6
    a7ba:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    a7bc:	b956      	cbnz	r6, a7d4 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    a7be:	2101      	movs	r1, #1
    a7c0:	fa01 f000 	lsl.w	r0, r1, r0
    a7c4:	68d9      	ldr	r1, [r3, #12]
    a7c6:	4301      	orrs	r1, r0
    a7c8:	60d9      	str	r1, [r3, #12]
		b->next = c;
    a7ca:	f8cc 4010 	str.w	r4, [ip, #16]
    a7ce:	53dd      	strh	r5, [r3, r7]
    a7d0:	529d      	strh	r5, [r3, r2]
}
    a7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    a7d4:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    a7d6:	3104      	adds	r1, #4
    a7d8:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    a7da:	53d8      	strh	r0, [r3, r7]
    a7dc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a7e0:	529e      	strh	r6, [r3, r2]
    a7e2:	80c5      	strh	r5, [r0, #6]
    a7e4:	525d      	strh	r5, [r3, r1]
    a7e6:	e7f4      	b.n	a7d2 <free_list_add+0x38>

0000a7e8 <free_list_remove_bidx>:
{
    a7e8:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    a7ea:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    a7ee:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    a7f0:	4299      	cmp	r1, r3
    a7f2:	f102 0104 	add.w	r1, r2, #4
    a7f6:	d10a      	bne.n	a80e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    a7f8:	2301      	movs	r3, #1
    a7fa:	fa03 f202 	lsl.w	r2, r3, r2
    a7fe:	68c3      	ldr	r3, [r0, #12]
    a800:	ea23 0302 	bic.w	r3, r3, r2
    a804:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    a806:	2300      	movs	r3, #0
    a808:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    a80c:	bd10      	pop	{r4, pc}
    a80e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    a810:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    a814:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a818:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    a81c:	80cb      	strh	r3, [r1, #6]
    a81e:	8082      	strh	r2, [r0, #4]
}
    a820:	e7f4      	b.n	a80c <free_list_remove_bidx+0x24>

0000a822 <alloc_chunk>:
{
    a822:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return 31 - __builtin_clz(usable_sz);
    a826:	fab1 f581 	clz	r5, r1
    a82a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
    a82e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    a832:	4603      	mov	r3, r0
	if (b->next) {
    a834:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    a838:	460e      	mov	r6, r1
	if (b->next) {
    a83a:	b1c2      	cbz	r2, a86e <alloc_chunk+0x4c>
    a83c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
    a83e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    a842:	4618      	mov	r0, r3
    a844:	4621      	mov	r1, r4
    a846:	f7ff ffa3 	bl	a790 <chunk_size>
    a84a:	42b0      	cmp	r0, r6
    a84c:	d306      	bcc.n	a85c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    a84e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
    a850:	4618      	mov	r0, r3
    a852:	f7ff ffc9 	bl	a7e8 <free_list_remove_bidx>
}
    a856:	4620      	mov	r0, r4
    a858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    a85c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    a860:	3f01      	subs	r7, #1
    a862:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    a864:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    a868:	d001      	beq.n	a86e <alloc_chunk+0x4c>
    a86a:	4282      	cmp	r2, r0
    a86c:	d1e7      	bne.n	a83e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a86e:	f1c5 0220 	rsb	r2, r5, #32
    a872:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    a876:	4094      	lsls	r4, r2
    a878:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    a87a:	4014      	ands	r4, r2
    a87c:	d0eb      	beq.n	a856 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    a87e:	fa94 f2a4 	rbit	r2, r4
    a882:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a886:	1d11      	adds	r1, r2, #4
    a888:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    a88c:	4621      	mov	r1, r4
    a88e:	e7df      	b.n	a850 <alloc_chunk+0x2e>

0000a890 <split_chunks>:
{
    a890:	b538      	push	{r3, r4, r5, lr}
    a892:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a894:	f7ff ff7c 	bl	a790 <chunk_size>
{
    a898:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    a89a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    a89c:	1a51      	subs	r1, r2, r1
		((uint16_t *)cmem)[f] = val;
    a89e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    a8a2:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a8a4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    a8a6:	8060      	strh	r0, [r4, #2]
    a8a8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a8ac:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    a8ae:	8044      	strh	r4, [r0, #2]
    a8b0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    a8b4:	4618      	mov	r0, r3
    a8b6:	4611      	mov	r1, r2
    a8b8:	f7ff ff6a 	bl	a790 <chunk_size>
	void *cmem = &buf[c];
    a8bc:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a8be:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    a8c2:	bd38      	pop	{r3, r4, r5, pc}

0000a8c4 <sys_heap_alloc>:
{
    a8c4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a8c6:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
    a8c8:	b909      	cbnz	r1, a8ce <sys_heap_alloc+0xa>
		return NULL;
    a8ca:	2000      	movs	r0, #0
}
    a8cc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a8ce:	68ab      	ldr	r3, [r5, #8]
    a8d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a8d4:	d9f9      	bls.n	a8ca <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a8d6:	310b      	adds	r1, #11
    a8d8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a8da:	4621      	mov	r1, r4
    a8dc:	4628      	mov	r0, r5
    a8de:	f7ff ffa0 	bl	a822 <alloc_chunk>
	if (c == 0U) {
    a8e2:	4606      	mov	r6, r0
    a8e4:	2800      	cmp	r0, #0
    a8e6:	d0f0      	beq.n	a8ca <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a8e8:	4601      	mov	r1, r0
    a8ea:	4628      	mov	r0, r5
    a8ec:	f7ff ff50 	bl	a790 <chunk_size>
    a8f0:	42a0      	cmp	r0, r4
    a8f2:	d907      	bls.n	a904 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    a8f4:	1932      	adds	r2, r6, r4
    a8f6:	4628      	mov	r0, r5
    a8f8:	f7ff ffca 	bl	a890 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a8fc:	4611      	mov	r1, r2
    a8fe:	4628      	mov	r0, r5
    a900:	f7ff ff4b 	bl	a79a <free_list_add>
	void *cmem = &buf[c];
    a904:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a908:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a90a:	8853      	ldrh	r3, [r2, #2]
    a90c:	f043 0301 	orr.w	r3, r3, #1
    a910:	8053      	strh	r3, [r2, #2]
    a912:	3004      	adds	r0, #4
	return mem;
    a914:	e7da      	b.n	a8cc <sys_heap_alloc+0x8>

0000a916 <outs>:
{
    a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a91a:	4607      	mov	r7, r0
    a91c:	4688      	mov	r8, r1
    a91e:	4615      	mov	r5, r2
    a920:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a922:	4614      	mov	r4, r2
    a924:	42b4      	cmp	r4, r6
    a926:	d305      	bcc.n	a934 <outs+0x1e>
    a928:	b10e      	cbz	r6, a92e <outs+0x18>
	return (int)count;
    a92a:	1b60      	subs	r0, r4, r5
    a92c:	e008      	b.n	a940 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a92e:	7823      	ldrb	r3, [r4, #0]
    a930:	2b00      	cmp	r3, #0
    a932:	d0fa      	beq.n	a92a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    a934:	f814 0b01 	ldrb.w	r0, [r4], #1
    a938:	4641      	mov	r1, r8
    a93a:	47b8      	blx	r7
		if (rc < 0) {
    a93c:	2800      	cmp	r0, #0
    a93e:	daf1      	bge.n	a924 <outs+0xe>
}
    a940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a944 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a944:	4040      	eors	r0, r0
    a946:	f380 8811 	msr	BASEPRI, r0
    a94a:	f04f 0004 	mov.w	r0, #4
    a94e:	df02      	svc	2
}
    a950:	4770      	bx	lr

0000a952 <assert_print>:

void assert_print(const char *fmt, ...)
{
    a952:	b40f      	push	{r0, r1, r2, r3}
    a954:	b507      	push	{r0, r1, r2, lr}
    a956:	a904      	add	r1, sp, #16
    a958:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a95c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a95e:	f7ff fea9 	bl	a6b4 <vprintk>

	va_end(ap);
}
    a962:	b003      	add	sp, #12
    a964:	f85d eb04 	ldr.w	lr, [sp], #4
    a968:	b004      	add	sp, #16
    a96a:	4770      	bx	lr

0000a96c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MAKEFILE_EXPORTS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a96c:	4770      	bx	lr

0000a96e <default_get_timestamp>:
    a96e:	f000 bb5f 	b.w	b030 <sys_clock_cycle_get_32>

0000a972 <dummy_timestamp>:
static log_timestamp_t dummy_timestamp(void)
    a972:	2000      	movs	r0, #0
    a974:	4770      	bx	lr

0000a976 <z_log_vprintk>:
{
    a976:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a978:	2300      	movs	r3, #0
    a97a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a97e:	e9cd 3300 	strd	r3, r3, [sp]
    a982:	461a      	mov	r2, r3
    a984:	4619      	mov	r1, r3
    a986:	4618      	mov	r0, r3
    a988:	f7f8 fb9a 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a98c:	b005      	add	sp, #20
    a98e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a992 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a992:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    a994:	f7f8 f8f0 	bl	2b78 <log_init>
	}

	return 0;
}
    a998:	2000      	movs	r0, #0
    a99a:	bd08      	pop	{r3, pc}

0000a99c <z_log_get_tag>:
}
    a99c:	2000      	movs	r0, #0
    a99e:	4770      	bx	lr

0000a9a0 <out_func>:
{
    a9a0:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a9a2:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    a9a6:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a9aa:	6852      	ldr	r2, [r2, #4]
    a9ac:	2101      	movs	r1, #1
    a9ae:	f10d 0007 	add.w	r0, sp, #7
    a9b2:	4798      	blx	r3
}
    a9b4:	2000      	movs	r0, #0
    a9b6:	b003      	add	sp, #12
    a9b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9bc <cr_out_func>:
{
    a9bc:	b538      	push	{r3, r4, r5, lr}
    a9be:	4605      	mov	r5, r0
    a9c0:	460c      	mov	r4, r1
	out_func(c, ctx);
    a9c2:	f7ff ffed 	bl	a9a0 <out_func>
	if (c == '\n') {
    a9c6:	2d0a      	cmp	r5, #10
    a9c8:	d103      	bne.n	a9d2 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a9ca:	4621      	mov	r1, r4
    a9cc:	200d      	movs	r0, #13
    a9ce:	f7ff ffe7 	bl	a9a0 <out_func>
}
    a9d2:	2000      	movs	r0, #0
    a9d4:	bd38      	pop	{r3, r4, r5, pc}

0000a9d6 <buffer_write>:
{
    a9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9d8:	4606      	mov	r6, r0
    a9da:	460d      	mov	r5, r1
    a9dc:	4614      	mov	r4, r2
    a9de:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a9e0:	4621      	mov	r1, r4
    a9e2:	4628      	mov	r0, r5
    a9e4:	463a      	mov	r2, r7
    a9e6:	47b0      	blx	r6
	} while (len != 0);
    a9e8:	1a24      	subs	r4, r4, r0
		buf += processed;
    a9ea:	4405      	add	r5, r0
	} while (len != 0);
    a9ec:	d1f8      	bne.n	a9e0 <buffer_write+0xa>
}
    a9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a9f0 <log_output_flush>:
		     output->control_block->offset,
    a9f0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a9f2:	6881      	ldr	r1, [r0, #8]
{
    a9f4:	b510      	push	{r4, lr}
    a9f6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a9f8:	e9d2 2300 	ldrd	r2, r3, [r2]
    a9fc:	6800      	ldr	r0, [r0, #0]
    a9fe:	f7ff ffea 	bl	a9d6 <buffer_write>
	output->control_block->offset = 0;
    aa02:	6863      	ldr	r3, [r4, #4]
    aa04:	2200      	movs	r2, #0
    aa06:	601a      	str	r2, [r3, #0]
}
    aa08:	bd10      	pop	{r4, pc}

0000aa0a <z_log_msg2_finalize>:
{
    aa0a:	b570      	push	{r4, r5, r6, lr}
    aa0c:	460e      	mov	r6, r1
    aa0e:	4615      	mov	r5, r2
    aa10:	4619      	mov	r1, r3
    aa12:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    aa16:	4604      	mov	r4, r0
    aa18:	b918      	cbnz	r0, aa22 <z_log_msg2_finalize+0x18>
}
    aa1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    aa1e:	f7f8 b911 	b.w	2c44 <z_log_dropped>
	if (data) {
    aa22:	b12b      	cbz	r3, aa30 <z_log_msg2_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    aa24:	3010      	adds	r0, #16
    aa26:	f3c5 2349 	ubfx	r3, r5, #9, #10
    aa2a:	4418      	add	r0, r3
    aa2c:	f000 fdc9 	bl	b5c2 <memcpy>
	msg->hdr.source = source;
    aa30:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    aa34:	4620      	mov	r0, r4
}
    aa36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    aa3a:	f7f8 b921 	b.w	2c80 <z_log_msg2_commit>

0000aa3e <abort_function>:
{
    aa3e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    aa40:	2000      	movs	r0, #0
    aa42:	f7f8 f83f 	bl	2ac4 <sys_reboot>

0000aa46 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    aa46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    aa48:	ab0b      	add	r3, sp, #44	; 0x2c
    aa4a:	9305      	str	r3, [sp, #20]
    aa4c:	9303      	str	r3, [sp, #12]
    aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa50:	9302      	str	r3, [sp, #8]
    aa52:	2300      	movs	r3, #0
    aa54:	e9cd 3300 	strd	r3, r3, [sp]
    aa58:	2201      	movs	r2, #1
    aa5a:	4618      	mov	r0, r3
    aa5c:	f7f8 fb30 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    aa60:	b007      	add	sp, #28
    aa62:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa66 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    aa66:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    aa68:	6800      	ldr	r0, [r0, #0]
    aa6a:	f7f8 beb5 	b.w	37d8 <z_arm_fatal_error>

0000aa6e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    aa6e:	2100      	movs	r1, #0
    aa70:	2001      	movs	r0, #1
    aa72:	f7f8 beb1 	b.w	37d8 <z_arm_fatal_error>

0000aa76 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    aa76:	b508      	push	{r3, lr}
	handler();
    aa78:	f7f8 ff4e 	bl	3918 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    aa7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    aa80:	f7f9 b826 	b.w	3ad0 <z_arm_exc_exit>

0000aa84 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    aa84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    aa86:	ab0b      	add	r3, sp, #44	; 0x2c
    aa88:	9305      	str	r3, [sp, #20]
    aa8a:	9303      	str	r3, [sp, #12]
    aa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aa8e:	9302      	str	r3, [sp, #8]
    aa90:	2300      	movs	r3, #0
    aa92:	e9cd 3300 	strd	r3, r3, [sp]
    aa96:	2201      	movs	r2, #1
    aa98:	4618      	mov	r0, r3
    aa9a:	f7f8 fb11 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    aa9e:	b007      	add	sp, #28
    aaa0:	f85d fb04 	ldr.w	pc, [sp], #4

0000aaa4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    aaa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    aaa6:	ab0b      	add	r3, sp, #44	; 0x2c
    aaa8:	9305      	str	r3, [sp, #20]
    aaaa:	9303      	str	r3, [sp, #12]
    aaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    aaae:	9302      	str	r3, [sp, #8]
    aab0:	2300      	movs	r3, #0
    aab2:	e9cd 3300 	strd	r3, r3, [sp]
    aab6:	2201      	movs	r2, #1
    aab8:	4618      	mov	r0, r3
    aaba:	f7f8 fb01 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    aabe:	b007      	add	sp, #28
    aac0:	f85d fb04 	ldr.w	pc, [sp], #4

0000aac4 <_stdout_hook_default>:
}
    aac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aac8:	4770      	bx	lr

0000aaca <_stdin_hook_default>:
}
    aaca:	2000      	movs	r0, #0
    aacc:	4770      	bx	lr

0000aace <_read>:
{
    aace:	4608      	mov	r0, r1
    aad0:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    aad2:	f7f9 bd1f 	b.w	4514 <z_impl_zephyr_read_stdin>

0000aad6 <_write>:
{
    aad6:	4608      	mov	r0, r1
    aad8:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    aada:	f7f9 bd2f 	b.w	453c <z_impl_zephyr_write_stdout>

0000aade <_close>:
int _close(int file)
    aade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    aae2:	4770      	bx	lr

0000aae4 <_lseek>:
}
    aae4:	2000      	movs	r0, #0
    aae6:	4770      	bx	lr

0000aae8 <_isatty>:
}
    aae8:	2802      	cmp	r0, #2
    aaea:	bfcc      	ite	gt
    aaec:	2000      	movgt	r0, #0
    aaee:	2001      	movle	r0, #1
    aaf0:	4770      	bx	lr

0000aaf2 <_fstat>:
	st->st_mode = S_IFCHR;
    aaf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    aaf6:	604b      	str	r3, [r1, #4]
}
    aaf8:	2000      	movs	r0, #0
    aafa:	4770      	bx	lr

0000aafc <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    aafc:	2806      	cmp	r0, #6
    aafe:	d108      	bne.n	ab12 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    ab00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ab04:	2201      	movs	r2, #1
    ab06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    ab0a:	f3bf 8f4f 	dsb	sy
        __WFE();
    ab0e:	bf20      	wfe
    while (true)
    ab10:	e7fd      	b.n	ab0e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    ab12:	4770      	bx	lr

0000ab14 <pm_state_exit_post_ops>:
	__asm__ volatile(
    ab14:	2300      	movs	r3, #0
    ab16:	f383 8811 	msr	BASEPRI, r3
    ab1a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ab1e:	4770      	bx	lr

0000ab20 <set_on_state>:
	__asm__ volatile(
    ab20:	f04f 0320 	mov.w	r3, #32
    ab24:	f3ef 8211 	mrs	r2, BASEPRI
    ab28:	f383 8812 	msr	BASEPRI_MAX, r3
    ab2c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ab30:	6803      	ldr	r3, [r0, #0]
    ab32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ab36:	f043 0302 	orr.w	r3, r3, #2
    ab3a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ab3c:	f382 8811 	msr	BASEPRI, r2
    ab40:	f3bf 8f6f 	isb	sy
}
    ab44:	4770      	bx	lr

0000ab46 <async_start>:
{
    ab46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab48:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    ab4a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    ab4c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ab4e:	f04f 0520 	mov.w	r5, #32
    ab52:	f3ef 8611 	mrs	r6, BASEPRI
    ab56:	f385 8812 	msr	BASEPRI_MAX, r5
    ab5a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ab5e:	250c      	movs	r5, #12
    ab60:	4369      	muls	r1, r5
    ab62:	440c      	add	r4, r1
    ab64:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ab66:	f005 0c07 	and.w	ip, r5, #7
    ab6a:	f1bc 0f01 	cmp.w	ip, #1
    ab6e:	d10b      	bne.n	ab88 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ab70:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    ab72:	f386 8811 	msr	BASEPRI, r6
    ab76:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    ab7a:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    ab7e:	6843      	ldr	r3, [r0, #4]
    ab80:	585b      	ldr	r3, [r3, r1]
    ab82:	4798      	blx	r3
	return 0;
    ab84:	2000      	movs	r0, #0
}
    ab86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ab88:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ab8c:	42af      	cmp	r7, r5
    ab8e:	f386 8811 	msr	BASEPRI, r6
    ab92:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    ab96:	bf0c      	ite	eq
    ab98:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    ab9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    aba0:	e7f1      	b.n	ab86 <async_start+0x40>

0000aba2 <api_start>:
{
    aba2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    aba4:	2480      	movs	r4, #128	; 0x80
    aba6:	9400      	str	r4, [sp, #0]
    aba8:	f7ff ffcd 	bl	ab46 <async_start>
}
    abac:	b002      	add	sp, #8
    abae:	bd10      	pop	{r4, pc}

0000abb0 <onoff_started_callback>:
	return &data->mgr[type];
    abb0:	6900      	ldr	r0, [r0, #16]
    abb2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    abb4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    abb8:	2100      	movs	r1, #0
    abba:	4710      	bx	r2

0000abbc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    abbc:	2000      	movs	r0, #0
    abbe:	f7fb bb19 	b.w	61f4 <nrfx_clock_start>

0000abc2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    abc2:	2000      	movs	r0, #0
    abc4:	f7fb bb7a 	b.w	62bc <nrfx_clock_stop>

0000abc8 <api_stop>:
	return stop(dev, subsys, CTX_API);
    abc8:	2280      	movs	r2, #128	; 0x80
    abca:	f7f9 bdd9 	b.w	4780 <stop>

0000abce <blocking_start_callback>:
{
    abce:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    abd0:	f7fc be32 	b.w	7838 <z_impl_k_sem_give>

0000abd4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    abd4:	6843      	ldr	r3, [r0, #4]
    abd6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    abd8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    abdc:	600b      	str	r3, [r1, #0]
}
    abde:	2000      	movs	r0, #0
    abe0:	4770      	bx	lr

0000abe2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    abe2:	6843      	ldr	r3, [r0, #4]
    abe4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    abe6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    abea:	4042      	eors	r2, r0
    abec:	400a      	ands	r2, r1
    abee:	4042      	eors	r2, r0
    p_reg->OUT = value;
    abf0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    abf4:	2000      	movs	r0, #0
    abf6:	4770      	bx	lr

0000abf8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    abf8:	6843      	ldr	r3, [r0, #4]
    abfa:	685b      	ldr	r3, [r3, #4]
}
    abfc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    abfe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    ac02:	4770      	bx	lr

0000ac04 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ac04:	6843      	ldr	r3, [r0, #4]
    ac06:	685b      	ldr	r3, [r3, #4]
}
    ac08:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    ac0a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    ac0e:	4770      	bx	lr

0000ac10 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ac10:	6843      	ldr	r3, [r0, #4]
    ac12:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ac14:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    ac18:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ac1a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    ac1e:	2000      	movs	r0, #0
    ac20:	4770      	bx	lr

0000ac22 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    ac22:	6902      	ldr	r2, [r0, #16]
{
    ac24:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    ac26:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    ac2a:	e883 0003 	stmia.w	r3, {r0, r1}
}
    ac2e:	2000      	movs	r0, #0
    ac30:	4770      	bx	lr

0000ac32 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    ac32:	6843      	ldr	r3, [r0, #4]
    ac34:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ac36:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ac3a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    ac3e:	4770      	bx	lr

0000ac40 <tx_start>:
{
    ac40:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    ac42:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    ac44:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ac46:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ac4a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ac4e:	2200      	movs	r2, #0
    ac50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ac54:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    ac58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    ac5c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ac60:	6862      	ldr	r2, [r4, #4]
    ac62:	06d2      	lsls	r2, r2, #27
    ac64:	d50f      	bpl.n	ac86 <tx_start+0x46>
	if (data->async) {
    ac66:	6902      	ldr	r2, [r0, #16]
    ac68:	68d2      	ldr	r2, [r2, #12]
    ac6a:	b12a      	cbz	r2, ac78 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    ac6c:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    ac70:	f041 0101 	orr.w	r1, r1, #1
    ac74:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ac78:	2208      	movs	r2, #8
    ac7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    ac7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    ac82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ac86:	2201      	movs	r2, #1
    ac88:	609a      	str	r2, [r3, #8]
}
    ac8a:	bd10      	pop	{r4, pc}

0000ac8c <user_callback>:
	if (data->async->user_callback) {
    ac8c:	6903      	ldr	r3, [r0, #16]
    ac8e:	68da      	ldr	r2, [r3, #12]
    ac90:	6813      	ldr	r3, [r2, #0]
    ac92:	b10b      	cbz	r3, ac98 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    ac94:	6852      	ldr	r2, [r2, #4]
    ac96:	4718      	bx	r3
}
    ac98:	4770      	bx	lr

0000ac9a <notify_uart_rx_rdy>:
{
    ac9a:	b570      	push	{r4, r5, r6, lr}
    ac9c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    ac9e:	6906      	ldr	r6, [r0, #16]
{
    aca0:	4604      	mov	r4, r0
    aca2:	460d      	mov	r5, r1
	struct uart_event evt = {
    aca4:	2214      	movs	r2, #20
    aca6:	2100      	movs	r1, #0
    aca8:	a801      	add	r0, sp, #4
    acaa:	f000 fc98 	bl	b5de <memset>
    acae:	2302      	movs	r3, #2
    acb0:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    acb4:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    acb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    acb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    acba:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    acbc:	a901      	add	r1, sp, #4
    acbe:	4620      	mov	r0, r4
	struct uart_event evt = {
    acc0:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    acc4:	f7ff ffe2 	bl	ac8c <user_callback>
}
    acc8:	b006      	add	sp, #24
    acca:	bd70      	pop	{r4, r5, r6, pc}

0000accc <rx_buf_release>:
{
    accc:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    acce:	680e      	ldr	r6, [r1, #0]
{
    acd0:	b086      	sub	sp, #24
    acd2:	4605      	mov	r5, r0
    acd4:	460c      	mov	r4, r1
	if (*buf) {
    acd6:	b17e      	cbz	r6, acf8 <rx_buf_release+0x2c>
		struct uart_event evt = {
    acd8:	2214      	movs	r2, #20
    acda:	2100      	movs	r1, #0
    acdc:	a801      	add	r0, sp, #4
    acde:	f000 fc7e 	bl	b5de <memset>
    ace2:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    ace4:	eb0d 0103 	add.w	r1, sp, r3
    ace8:	4628      	mov	r0, r5
		struct uart_event evt = {
    acea:	f88d 3004 	strb.w	r3, [sp, #4]
    acee:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    acf0:	f7ff ffcc 	bl	ac8c <user_callback>
		*buf = NULL;
    acf4:	2300      	movs	r3, #0
    acf6:	6023      	str	r3, [r4, #0]
}
    acf8:	b006      	add	sp, #24
    acfa:	bd70      	pop	{r4, r5, r6, pc}

0000acfc <notify_rx_disable>:
{
    acfc:	b510      	push	{r4, lr}
    acfe:	b086      	sub	sp, #24
    ad00:	4604      	mov	r4, r0
	struct uart_event evt = {
    ad02:	2214      	movs	r2, #20
    ad04:	2100      	movs	r1, #0
    ad06:	a801      	add	r0, sp, #4
    ad08:	f000 fc69 	bl	b5de <memset>
    ad0c:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    ad0e:	a901      	add	r1, sp, #4
    ad10:	4620      	mov	r0, r4
	struct uart_event evt = {
    ad12:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    ad16:	f7ff ffb9 	bl	ac8c <user_callback>
}
    ad1a:	b006      	add	sp, #24
    ad1c:	bd10      	pop	{r4, pc}

0000ad1e <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    ad1e:	6843      	ldr	r3, [r0, #4]
{
    ad20:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    ad22:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    ad24:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    ad26:	f04f 0020 	mov.w	r0, #32
    ad2a:	f3ef 8511 	mrs	r5, BASEPRI
    ad2e:	f380 8812 	msr	BASEPRI_MAX, r0
    ad32:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    ad36:	68e4      	ldr	r4, [r4, #12]
    ad38:	6e20      	ldr	r0, [r4, #96]	; 0x60
    ad3a:	b190      	cbz	r0, ad62 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    ad3c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    ad3e:	b998      	cbnz	r0, ad68 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    ad40:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ad44:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ad48:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    ad4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ad50:	f042 0220 	orr.w	r2, r2, #32
    ad54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    ad58:	f385 8811 	msr	BASEPRI, r5
    ad5c:	f3bf 8f6f 	isb	sy
}
    ad60:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    ad62:	f06f 000c 	mvn.w	r0, #12
    ad66:	e7f7      	b.n	ad58 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    ad68:	f06f 000f 	mvn.w	r0, #15
    ad6c:	e7f4      	b.n	ad58 <uarte_nrfx_rx_buf_rsp+0x3a>

0000ad6e <uarte_nrfx_callback_set>:
	if (!data->async) {
    ad6e:	6903      	ldr	r3, [r0, #16]
    ad70:	68db      	ldr	r3, [r3, #12]
    ad72:	b11b      	cbz	r3, ad7c <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    ad74:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    ad78:	2000      	movs	r0, #0
    ad7a:	4770      	bx	lr
		return -ENOTSUP;
    ad7c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ad80:	4770      	bx	lr

0000ad82 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    ad82:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    ad84:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    ad86:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    ad88:	681b      	ldr	r3, [r3, #0]
{
    ad8a:	b510      	push	{r4, lr}
	if (data->async) {
    ad8c:	b958      	cbnz	r0, ada6 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ad8e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ad92:	b15c      	cbz	r4, adac <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    ad94:	7d52      	ldrb	r2, [r2, #21]
    ad96:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad98:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    ad9c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ada0:	2201      	movs	r2, #1
    ada2:	601a      	str	r2, [r3, #0]
}
    ada4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    ada6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    adaa:	e7fb      	b.n	ada4 <uarte_nrfx_poll_in+0x22>
		return -1;
    adac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    adb0:	e7f8      	b.n	ada4 <uarte_nrfx_poll_in+0x22>

0000adb2 <uarte_nrfx_rx_disable>:
{
    adb2:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    adb4:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    adb6:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    adb8:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    adba:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    adbc:	6e03      	ldr	r3, [r0, #96]	; 0x60
    adbe:	b1b3      	cbz	r3, adee <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    adc0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    adc2:	b153      	cbz	r3, adda <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    adc4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    adc8:	f023 0320 	bic.w	r3, r3, #32
    adcc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    add0:	2300      	movs	r3, #0
    add2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    add6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    adda:	3088      	adds	r0, #136	; 0x88
    addc:	f000 fb60 	bl	b4a0 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    ade0:	68eb      	ldr	r3, [r5, #12]
    ade2:	2000      	movs	r0, #0
    ade4:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ade8:	2301      	movs	r3, #1
    adea:	6063      	str	r3, [r4, #4]
}
    adec:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    adee:	f06f 000d 	mvn.w	r0, #13
    adf2:	e7fb      	b.n	adec <uarte_nrfx_rx_disable+0x3a>

0000adf4 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    adf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    adf6:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    adf8:	4614      	mov	r4, r2
    return p_reg->RXD.AMOUNT;
    adfa:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    adfe:	460b      	mov	r3, r1
    ae00:	b1f1      	cbz	r1, ae40 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memset, void *, int)
    ae02:	2100      	movs	r1, #0
    ae04:	4618      	mov	r0, r3
    ae06:	f000 fbea 	bl	b5de <memset>
    ae0a:	4603      	mov	r3, r0
    ae0c:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ae0e:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae12:	2100      	movs	r1, #0
    p_reg->RXD.MAXCNT = length;
    ae14:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae18:	2001      	movs	r0, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae1a:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    ae1e:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ae22:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ae24:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ae28:	2800      	cmp	r0, #0
    ae2a:	d0fb      	beq.n	ae24 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae2c:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    ae30:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    ae34:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    ae38:	b92b      	cbnz	r3, ae46 <rx_flush.isra.0+0x52>
			return rx_amount;
    ae3a:	b2c0      	uxtb	r0, r0
}
    ae3c:	b002      	add	sp, #8
    ae3e:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
    ae40:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    ae42:	4669      	mov	r1, sp
    ae44:	e7e3      	b.n	ae0e <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
    ae46:	4285      	cmp	r5, r0
    ae48:	d1f7      	bne.n	ae3a <rx_flush.isra.0+0x46>
    ae4a:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    ae4c:	4293      	cmp	r3, r2
    ae4e:	d101      	bne.n	ae54 <rx_flush.isra.0+0x60>
	return 0;
    ae50:	2000      	movs	r0, #0
    ae52:	e7f3      	b.n	ae3c <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
    ae54:	f813 1b01 	ldrb.w	r1, [r3], #1
    ae58:	2900      	cmp	r1, #0
    ae5a:	d0f7      	beq.n	ae4c <rx_flush.isra.0+0x58>
    ae5c:	e7ed      	b.n	ae3a <rx_flush.isra.0+0x46>

0000ae5e <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    ae5e:	68c2      	ldr	r2, [r0, #12]
    ae60:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    ae62:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    ae64:	b508      	push	{r3, lr}
    ae66:	4603      	mov	r3, r0
	if (!remaining) {
    ae68:	d00b      	beq.n	ae82 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    ae6a:	2a08      	cmp	r2, #8
    ae6c:	bf28      	it	cs
    ae6e:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    ae70:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    ae72:	3018      	adds	r0, #24
    ae74:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    ae76:	689b      	ldr	r3, [r3, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ae78:	4419      	add	r1, r3
    ae7a:	f000 fba2 	bl	b5c2 <memcpy>
	return true;
    ae7e:	2001      	movs	r0, #1
}
    ae80:	bd08      	pop	{r3, pc}
		return false;
    ae82:	4610      	mov	r0, r2
    ae84:	e7fc      	b.n	ae80 <setup_tx_cache.isra.0+0x22>

0000ae86 <async_uart_release>:
{
    ae86:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    ae88:	6903      	ldr	r3, [r0, #16]
{
    ae8a:	4604      	mov	r4, r0
	__asm__ volatile(
    ae8c:	f04f 0220 	mov.w	r2, #32
    ae90:	f3ef 8611 	mrs	r6, BASEPRI
    ae94:	f382 8812 	msr	BASEPRI_MAX, r2
    ae98:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    ae9c:	68dd      	ldr	r5, [r3, #12]
    ae9e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    aea2:	ea23 0301 	bic.w	r3, r3, r1
    aea6:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    aeaa:	b973      	cbnz	r3, aeca <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    aeac:	2902      	cmp	r1, #2
    aeae:	d107      	bne.n	aec0 <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    aeb0:	6840      	ldr	r0, [r0, #4]
    aeb2:	2205      	movs	r2, #5
    aeb4:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    aeb8:	f7ff ff9c 	bl	adf4 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    aebc:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    aec0:	6863      	ldr	r3, [r4, #4]
    aec2:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    aec4:	2200      	movs	r2, #0
    aec6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    aeca:	f386 8811 	msr	BASEPRI, r6
    aece:	f3bf 8f6f 	isb	sy
}
    aed2:	bd70      	pop	{r4, r5, r6, pc}

0000aed4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    aed4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    aed6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aed8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    aedc:	b940      	cbnz	r0, aef0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    aede:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    aee0:	079b      	lsls	r3, r3, #30
    aee2:	d406      	bmi.n	aef2 <is_tx_ready.isra.0+0x1e>
    aee4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    aee8:	3800      	subs	r0, #0
    aeea:	bf18      	it	ne
    aeec:	2001      	movne	r0, #1
    aeee:	4770      	bx	lr
    aef0:	2001      	movs	r0, #1
}
    aef2:	4770      	bx	lr

0000aef4 <start_tx_locked>:
{
    aef4:	b510      	push	{r4, lr}
    aef6:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    aef8:	6840      	ldr	r0, [r0, #4]
    aefa:	f7ff ffeb 	bl	aed4 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    aefe:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    af00:	b918      	cbnz	r0, af0a <start_tx_locked+0x16>
		data->async->pending_tx = true;
    af02:	2201      	movs	r2, #1
    af04:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    af08:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    af0a:	2200      	movs	r2, #0
    af0c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    af10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    af14:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    af18:	4620      	mov	r0, r4
    af1a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    af1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    af22:	f7ff be8d 	b.w	ac40 <tx_start>

0000af26 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    af26:	b510      	push	{r4, lr}
    af28:	2200      	movs	r2, #0
    af2a:	4604      	mov	r4, r0
    af2c:	2101      	movs	r1, #1
    af2e:	2028      	movs	r0, #40	; 0x28
    af30:	f7f8 fcbe 	bl	38b0 <z_arm_irq_priority_set>
    af34:	2028      	movs	r0, #40	; 0x28
    af36:	f7f8 fc9f 	bl	3878 <arch_irq_enable>
    af3a:	4620      	mov	r0, r4
    af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af40:	f7fa b92e 	b.w	51a0 <uarte_instance_init.constprop.0>

0000af44 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    af44:	b510      	push	{r4, lr}
    af46:	2200      	movs	r2, #0
    af48:	4604      	mov	r4, r0
    af4a:	2101      	movs	r1, #1
    af4c:	2002      	movs	r0, #2
    af4e:	f7f8 fcaf 	bl	38b0 <z_arm_irq_priority_set>
    af52:	2002      	movs	r0, #2
    af54:	f7f8 fc90 	bl	3878 <arch_irq_enable>
    af58:	4620      	mov	r0, r4
    af5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af5e:	f7fa b91f 	b.w	51a0 <uarte_instance_init.constprop.0>

0000af62 <rx_timeout>:
{
    af62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    af64:	6b47      	ldr	r7, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    af66:	68fb      	ldr	r3, [r7, #12]
    af68:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    af6c:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    af70:	bb1a      	cbnz	r2, afba <rx_timeout+0x58>
	const struct device *dev = data->dev;
    af72:	683d      	ldr	r5, [r7, #0]
	return config->uarte_regs;
    af74:	686a      	ldr	r2, [r5, #4]
    af76:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    af78:	2110      	movs	r1, #16
    af7a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    af7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    af82:	6f59      	ldr	r1, [r3, #116]	; 0x74
    af84:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    af86:	bf1e      	ittt	ne
    af88:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    af8a:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    af8c:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    af90:	e9d3 2c1d 	ldrd	r2, ip, [r3, #116]	; 0x74
    af94:	eba2 020c 	sub.w	r2, r2, ip
	if (!HW_RX_COUNTING_ENABLED(data) &&
    af98:	2a00      	cmp	r2, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    af9a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
	int32_t len = data->async->rx_total_byte_cnt
    af9e:	4614      	mov	r4, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    afa0:	da0c      	bge.n	afbc <rx_timeout+0x5a>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    afa2:	4288      	cmp	r0, r1
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    afa4:	f8c3 c0c0 	str.w	ip, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    afa8:	d902      	bls.n	afb0 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    afaa:	1a0c      	subs	r4, r1, r0
	if (len > 0) {
    afac:	2c00      	cmp	r4, #0
    afae:	dc20      	bgt.n	aff2 <rx_timeout+0x90>
	return config->uarte_regs;
    afb0:	686b      	ldr	r3, [r5, #4]
    afb2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    afb4:	2210      	movs	r2, #16
    afb6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    afbc:	eb02 0c00 	add.w	ip, r2, r0
    afc0:	458c      	cmp	ip, r1
    afc2:	d8f2      	bhi.n	afaa <rx_timeout+0x48>
	if (len > 0) {
    afc4:	2a00      	cmp	r2, #0
    afc6:	d0f3      	beq.n	afb0 <rx_timeout+0x4e>
				< data->async->rx_timeout_slab)) {
    afc8:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    afcc:	428a      	cmp	r2, r1
    afce:	da12      	bge.n	aff6 <rx_timeout+0x94>
			notify_uart_rx_rdy(dev, len);
    afd0:	4628      	mov	r0, r5
    afd2:	4621      	mov	r1, r4
    afd4:	f7ff fe61 	bl	ac9a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    afd8:	68f8      	ldr	r0, [r7, #12]
    afda:	6e83      	ldr	r3, [r0, #104]	; 0x68
    afdc:	4423      	add	r3, r4
    afde:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    afe0:	6f83      	ldr	r3, [r0, #120]	; 0x78
    afe2:	4423      	add	r3, r4
    afe4:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    afe6:	2e00      	cmp	r6, #0
    afe8:	d0e2      	beq.n	afb0 <rx_timeout+0x4e>
    afea:	3088      	adds	r0, #136	; 0x88
    afec:	f000 fa58 	bl	b4a0 <z_impl_k_timer_stop>
}
    aff0:	e7de      	b.n	afb0 <rx_timeout+0x4e>
		clipped = true;
    aff2:	2601      	movs	r6, #1
    aff4:	e7ec      	b.n	afd0 <rx_timeout+0x6e>
			data->async->rx_timeout_left -=
    aff6:	1a52      	subs	r2, r2, r1
    aff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		if (clipped) {
    affc:	e7d8      	b.n	afb0 <rx_timeout+0x4e>

0000affe <uarte_nrfx_tx_abort>:
{
    affe:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    b000:	6843      	ldr	r3, [r0, #4]
    b002:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    b004:	6903      	ldr	r3, [r0, #16]
    b006:	68d8      	ldr	r0, [r3, #12]
    b008:	6883      	ldr	r3, [r0, #8]
    b00a:	b14b      	cbz	r3, b020 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    b00c:	2400      	movs	r4, #0
    b00e:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    b012:	3028      	adds	r0, #40	; 0x28
    b014:	f000 fa44 	bl	b4a0 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b018:	2301      	movs	r3, #1
    b01a:	60eb      	str	r3, [r5, #12]
	return 0;
    b01c:	4620      	mov	r0, r4
}
    b01e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b020:	f06f 000d 	mvn.w	r0, #13
    b024:	e7fb      	b.n	b01e <uarte_nrfx_tx_abort+0x20>

0000b026 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    b026:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b028:	6818      	ldr	r0, [r3, #0]
    b02a:	f7ff bfe8 	b.w	affe <uarte_nrfx_tx_abort>

0000b02e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b02e:	4770      	bx	lr

0000b030 <sys_clock_cycle_get_32>:
{
    b030:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b032:	f7fa fcb7 	bl	59a4 <z_nrf_rtc_timer_read>
}
    b036:	bd08      	pop	{r3, pc}

0000b038 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b038:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    b03a:	6843      	ldr	r3, [r0, #4]
    b03c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b03e:	7a03      	ldrb	r3, [r0, #8]
    b040:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    b044:	3b01      	subs	r3, #1
    b046:	00db      	lsls	r3, r3, #3
    b048:	6845      	ldr	r5, [r0, #4]
    b04a:	6814      	ldr	r4, [r2, #0]
    b04c:	441d      	add	r5, r3
    b04e:	42ac      	cmp	r4, r5
    b050:	d902      	bls.n	b058 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    b052:	f06f 0001 	mvn.w	r0, #1
}
    b056:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    b058:	7965      	ldrb	r5, [r4, #5]
    b05a:	428d      	cmp	r5, r1
    b05c:	d002      	beq.n	b064 <pinctrl_lookup_state+0x2c>
		(*state)++;
    b05e:	3408      	adds	r4, #8
    b060:	6014      	str	r4, [r2, #0]
    b062:	e7f1      	b.n	b048 <pinctrl_lookup_state+0x10>
			return 0;
    b064:	2000      	movs	r0, #0
    b066:	e7f6      	b.n	b056 <pinctrl_lookup_state+0x1e>

0000b068 <nrf_gpio_pin_clear>:
{
    b068:	b507      	push	{r0, r1, r2, lr}
    b06a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b06c:	a801      	add	r0, sp, #4
    b06e:	f7fa fe4d 	bl	5d0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b072:	9a01      	ldr	r2, [sp, #4]
    b074:	2301      	movs	r3, #1
    b076:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    b078:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    b07c:	b003      	add	sp, #12
    b07e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b082 <nrf_gpio_pin_set>:
{
    b082:	b507      	push	{r0, r1, r2, lr}
    b084:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b086:	a801      	add	r0, sp, #4
    b088:	f7fa fe40 	bl	5d0c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    b08c:	9a01      	ldr	r2, [sp, #4]
    b08e:	2301      	movs	r3, #1
    b090:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    b092:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    b096:	b003      	add	sp, #12
    b098:	f85d fb04 	ldr.w	pc, [sp], #4

0000b09c <nrf_gpio_pin_write>:
    if (value == 0)
    b09c:	b909      	cbnz	r1, b0a2 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    b09e:	f7ff bfe3 	b.w	b068 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    b0a2:	f7ff bfee 	b.w	b082 <nrf_gpio_pin_set>

0000b0a6 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    b0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    b0a8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b0ac:	2b00      	cmp	r3, #0
{
    b0ae:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    b0b0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b0b4:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    b0b6:	bf0b      	itete	eq
    b0b8:	4615      	moveq	r5, r2
    b0ba:	2501      	movne	r5, #1
    b0bc:	460e      	moveq	r6, r1
    b0be:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    b0c0:	9301      	str	r3, [sp, #4]
    b0c2:	f7fa fe23 	bl	5d0c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b0c6:	f3c4 1381 	ubfx	r3, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    b0ca:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b0ce:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    b0d2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b0d4:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    b0d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    b0da:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    b0de:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    b0e2:	b002      	add	sp, #8
    b0e4:	bd70      	pop	{r4, r5, r6, pc}

0000b0e6 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    b0e6:	b570      	push	{r4, r5, r6, lr}
    b0e8:	4615      	mov	r5, r2
    b0ea:	4604      	mov	r4, r0
    b0ec:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b0f0:	42a6      	cmp	r6, r4
    b0f2:	d101      	bne.n	b0f8 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    b0f4:	2000      	movs	r0, #0
}
    b0f6:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    b0f8:	6823      	ldr	r3, [r4, #0]
    b0fa:	0c1a      	lsrs	r2, r3, #16
    b0fc:	2a22      	cmp	r2, #34	; 0x22
    b0fe:	f200 808e 	bhi.w	b21e <pinctrl_configure_pins+0x138>
    b102:	e8df f002 	tbb	[pc, r2]
    b106:	1d12      	.short	0x1d12
    b108:	39294324 	.word	0x39294324
    b10c:	8c8c8c43 	.word	0x8c8c8c43
    b110:	8c4d488c 	.word	0x8c4d488c
    b114:	8c8c8c8c 	.word	0x8c8c8c8c
    b118:	8c8c8c8c 	.word	0x8c8c8c8c
    b11c:	68635e52 	.word	0x68635e52
    b120:	6d8c8c8c 	.word	0x6d8c8c8c
    b124:	827d7873 	.word	0x827d7873
    b128:	87          	.byte	0x87
    b129:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    b12a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b12e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    b132:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    b134:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b138:	f7ff ffa3 	bl	b082 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b13c:	2201      	movs	r2, #1
    b13e:	e015      	b.n	b16c <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    b140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b144:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b148:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b14a:	2100      	movs	r1, #0
    b14c:	e00f      	b.n	b16e <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    b14e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b152:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    b156:	e7ec      	b.n	b132 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    b158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b15c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    b160:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    b162:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b166:	f7ff ff7f 	bl	b068 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b16a:	2200      	movs	r2, #0
    b16c:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b16e:	6820      	ldr	r0, [r4, #0]
    b170:	f7ff ff99 	bl	b0a6 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b174:	3404      	adds	r4, #4
    b176:	e7bb      	b.n	b0f0 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    b178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b17c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    b180:	6820      	ldr	r0, [r4, #0]
    b182:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b186:	f7ff ff6f 	bl	b068 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b18a:	e7d7      	b.n	b13c <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    b18c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b190:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b194:	e7d8      	b.n	b148 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    b196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b19a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b19e:	e7d3      	b.n	b148 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    b1a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1a4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    b1a8:	e7ce      	b.n	b148 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    b1aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1ae:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b1b2:	6820      	ldr	r0, [r4, #0]
    b1b4:	f3c0 3140 	ubfx	r1, r0, #13, #1
    b1b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    b1bc:	f7ff ff6e 	bl	b09c <nrf_gpio_pin_write>
    b1c0:	e7bc      	b.n	b13c <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    b1c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1c6:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b1ca:	e7f2      	b.n	b1b2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    b1cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1d0:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    b1d4:	e7ed      	b.n	b1b2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    b1d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1da:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    b1de:	e7e8      	b.n	b1b2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    b1e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1e4:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b1e8:	2201      	movs	r2, #1
    b1ea:	e7ae      	b.n	b14a <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    b1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1f0:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b1f4:	e7f8      	b.n	b1e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    b1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b1fa:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b1fe:	e7f3      	b.n	b1e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    b200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b204:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b208:	e7ee      	b.n	b1e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    b20a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b20e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b212:	e7e9      	b.n	b1e8 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    b214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b218:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    b21c:	e7e4      	b.n	b1e8 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    b21e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b222:	e768      	b.n	b0f6 <pinctrl_configure_pins+0x10>

0000b224 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b224:	f7ff b82e 	b.w	a284 <nrf_cc3xx_platform_init_no_rng>

0000b228 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    b228:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b22a:	f7f8 f9ed 	bl	3608 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b22e:	f7f8 fa9f 	bl	3770 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    b232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    b236:	f7ff b825 	b.w	a284 <nrf_cc3xx_platform_init_no_rng>

0000b23a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b23a:	4700      	bx	r0

0000b23c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b23c:	f000 b8fe 	b.w	b43c <z_impl_k_busy_wait>

0000b240 <nrf_gpio_pin_present_check>:
    switch (port)
    b240:	0943      	lsrs	r3, r0, #5
    b242:	d00b      	beq.n	b25c <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    b244:	2b01      	cmp	r3, #1
    b246:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b24a:	bf18      	it	ne
    b24c:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    b24e:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    b252:	fa23 f000 	lsr.w	r0, r3, r0
}
    b256:	f000 0001 	and.w	r0, r0, #1
    b25a:	4770      	bx	lr
    switch (port)
    b25c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b260:	e7f5      	b.n	b24e <nrf_gpio_pin_present_check+0xe>

0000b262 <pin_is_task_output>:
{
    b262:	b508      	push	{r3, lr}
    b264:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b266:	f7fb f891 	bl	638c <pin_is_output>
    b26a:	b110      	cbz	r0, b272 <pin_is_task_output+0x10>
    b26c:	4610      	mov	r0, r2
    b26e:	f7fb f877 	bl	6360 <pin_in_use_by_te>
}
    b272:	f000 0001 	and.w	r0, r0, #1
    b276:	bd08      	pop	{r3, pc}

0000b278 <nrf_gpio_reconfigure>:
{
    b278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b27c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b27e:	a801      	add	r0, sp, #4
{
    b280:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    b284:	460c      	mov	r4, r1
    b286:	4617      	mov	r7, r2
    b288:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    b28a:	f7fb f8a7 	bl	63dc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b28e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b290:	1e39      	subs	r1, r7, #0
    b292:	bf18      	it	ne
    b294:	2101      	movne	r1, #1
    b296:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b29a:	1e23      	subs	r3, r4, #0
    b29c:	bf18      	it	ne
    b29e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b2a0:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b2a2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b2a6:	bf14      	ite	ne
    b2a8:	210c      	movne	r1, #12
    b2aa:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b2ac:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    b2ae:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    b2b2:	bf14      	ite	ne
    b2b4:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    b2b8:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b2ba:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    b2be:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b2c2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    b2c6:	bf14      	ite	ne
    b2c8:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    b2cc:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    b2ce:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    b2d0:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b2d4:	b104      	cbz	r4, b2d8 <nrf_gpio_reconfigure+0x60>
    b2d6:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b2d8:	b10f      	cbz	r7, b2de <nrf_gpio_reconfigure+0x66>
    b2da:	783f      	ldrb	r7, [r7, #0]
    b2dc:	007f      	lsls	r7, r7, #1
    b2de:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b2e0:	b10e      	cbz	r6, b2e6 <nrf_gpio_reconfigure+0x6e>
    b2e2:	7836      	ldrb	r6, [r6, #0]
    b2e4:	00b6      	lsls	r6, r6, #2
    b2e6:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b2e8:	b18d      	cbz	r5, b30e <nrf_gpio_reconfigure+0x96>
    b2ea:	7829      	ldrb	r1, [r5, #0]
    b2ec:	0209      	lsls	r1, r1, #8
    b2ee:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    b2f0:	f1b8 0f00 	cmp.w	r8, #0
    b2f4:	d003      	beq.n	b2fe <nrf_gpio_reconfigure+0x86>
    b2f6:	f898 8000 	ldrb.w	r8, [r8]
    b2fa:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b2fe:	4321      	orrs	r1, r4
    b300:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    b304:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    b308:	b002      	add	sp, #8
    b30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b30e:	4629      	mov	r1, r5
    b310:	e7ed      	b.n	b2ee <nrf_gpio_reconfigure+0x76>

0000b312 <nrf_gpio_cfg_sense_set>:
{
    b312:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b314:	f10d 030f 	add.w	r3, sp, #15
    b318:	9301      	str	r3, [sp, #4]
    b31a:	2300      	movs	r3, #0
{
    b31c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    b320:	9300      	str	r3, [sp, #0]
    b322:	461a      	mov	r2, r3
    b324:	4619      	mov	r1, r3
    b326:	f7ff ffa7 	bl	b278 <nrf_gpio_reconfigure>
}
    b32a:	b005      	add	sp, #20
    b32c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b330 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b330:	f7fb bc14 	b.w	6b5c <_DoInit>

0000b334 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b334:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b336:	f7ff fffb 	bl	b330 <SEGGER_RTT_Init>

	return 0;
}
    b33a:	2000      	movs	r0, #0
    b33c:	bd08      	pop	{r3, pc}

0000b33e <z_device_state_init>:
}
    b33e:	4770      	bx	lr

0000b340 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b340:	b138      	cbz	r0, b352 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b342:	68c3      	ldr	r3, [r0, #12]
    b344:	8818      	ldrh	r0, [r3, #0]
    b346:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b34a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b34e:	4258      	negs	r0, r3
    b350:	4158      	adcs	r0, r3
}
    b352:	4770      	bx	lr

0000b354 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    b354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    b356:	ab0b      	add	r3, sp, #44	; 0x2c
    b358:	9305      	str	r3, [sp, #20]
    b35a:	9303      	str	r3, [sp, #12]
    b35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b35e:	9302      	str	r3, [sp, #8]
    b360:	2300      	movs	r3, #0
    b362:	e9cd 3300 	strd	r3, r3, [sp]
    b366:	2201      	movs	r2, #1
    b368:	4618      	mov	r0, r3
    b36a:	f7f7 fea9 	bl	30c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b36e:	b007      	add	sp, #28
    b370:	f85d fb04 	ldr.w	pc, [sp], #4

0000b374 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    b374:	f000 b933 	b.w	b5de <memset>

0000b378 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b378:	f000 b923 	b.w	b5c2 <memcpy>

0000b37c <k_mem_slab_init>:
{
    b37c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    b37e:	2400      	movs	r4, #0
    b380:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    b382:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b384:	ea41 0402 	orr.w	r4, r1, r2
    b388:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    b38c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    b390:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    b392:	d10c      	bne.n	b3ae <k_mem_slab_init+0x32>
    b394:	4625      	mov	r5, r4
	for (j = 0U; j < slab->num_blocks; j++) {
    b396:	42a3      	cmp	r3, r4
	slab->free_list = NULL;
    b398:	6185      	str	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    b39a:	d103      	bne.n	b3a4 <k_mem_slab_init+0x28>
	list->tail = (sys_dnode_t *)list;
    b39c:	e9c0 0000 	strd	r0, r0, [r0]
}
    b3a0:	2000      	movs	r0, #0
}
    b3a2:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    b3a4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    b3a6:	3401      	adds	r4, #1
    b3a8:	460d      	mov	r5, r1
		p += slab->block_size;
    b3aa:	4411      	add	r1, r2
    b3ac:	e7f3      	b.n	b396 <k_mem_slab_init+0x1a>
		return -EINVAL;
    b3ae:	f06f 0015 	mvn.w	r0, #21
	return rc;
    b3b2:	e7f6      	b.n	b3a2 <k_mem_slab_init+0x26>

0000b3b4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b3b4:	f3ef 8005 	mrs	r0, IPSR
}
    b3b8:	3800      	subs	r0, #0
    b3ba:	bf18      	it	ne
    b3bc:	2001      	movne	r0, #1
    b3be:	4770      	bx	lr

0000b3c0 <k_thread_name_get>:
}
    b3c0:	2000      	movs	r0, #0
    b3c2:	4770      	bx	lr

0000b3c4 <z_pm_save_idle_exit>:
{
    b3c4:	b508      	push	{r3, lr}
	pm_system_resume();
    b3c6:	f7f8 f80f 	bl	33e8 <pm_system_resume>
}
    b3ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b3ce:	f7ff be2e 	b.w	b02e <sys_clock_idle_exit>

0000b3d2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b3d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b3d6:	428b      	cmp	r3, r1
    b3d8:	d001      	beq.n	b3de <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b3da:	f7fc bfdf 	b.w	839c <z_set_prio>
}
    b3de:	2000      	movs	r0, #0
    b3e0:	4770      	bx	lr

0000b3e2 <z_impl_k_mutex_init>:
{
    b3e2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b3e4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b3e6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    b3ea:	e9c3 3300 	strd	r3, r3, [r3]
}
    b3ee:	4770      	bx	lr

0000b3f0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b3f0:	b13a      	cbz	r2, b402 <z_impl_k_sem_init+0x12>
    b3f2:	428a      	cmp	r2, r1
    b3f4:	d305      	bcc.n	b402 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b3f6:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b3fa:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b3fe:	2000      	movs	r0, #0
    b400:	4770      	bx	lr
		return -EINVAL;
    b402:	f06f 0015 	mvn.w	r0, #21
}
    b406:	4770      	bx	lr

0000b408 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b408:	4603      	mov	r3, r0
    b40a:	b920      	cbnz	r0, b416 <z_reschedule_irqlock+0xe>
    b40c:	f3ef 8205 	mrs	r2, IPSR
    b410:	b90a      	cbnz	r2, b416 <z_reschedule_irqlock+0xe>
    b412:	f7f8 baa1 	b.w	3958 <arch_swap>
    b416:	f383 8811 	msr	BASEPRI, r3
    b41a:	f3bf 8f6f 	isb	sy
}
    b41e:	4770      	bx	lr

0000b420 <z_reschedule_unlocked>:
	__asm__ volatile(
    b420:	f04f 0320 	mov.w	r3, #32
    b424:	f3ef 8011 	mrs	r0, BASEPRI
    b428:	f383 8812 	msr	BASEPRI_MAX, r3
    b42c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b430:	f7ff bfea 	b.w	b408 <z_reschedule_irqlock>

0000b434 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    b434:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    b436:	f7fd fee3 	bl	9200 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    b43a:	bd08      	pop	{r3, pc}

0000b43c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    b43c:	b108      	cbz	r0, b442 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    b43e:	f7f9 b959 	b.w	46f4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    b442:	4770      	bx	lr

0000b444 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b444:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    b448:	bf08      	it	eq
    b44a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    b44e:	b538      	push	{r3, r4, r5, lr}
    b450:	460c      	mov	r4, r1
    b452:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b454:	d014      	beq.n	b480 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b456:	4308      	orrs	r0, r1
    b458:	d103      	bne.n	b462 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    b45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    b45e:	f7fd becf 	b.w	9200 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    b462:	f06f 0001 	mvn.w	r0, #1
    b466:	1b40      	subs	r0, r0, r5
    b468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b46c:	eb63 0101 	sbc.w	r1, r3, r1
    b470:	2900      	cmp	r1, #0
    b472:	da04      	bge.n	b47e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    b474:	f7fd fec4 	bl	9200 <sys_clock_tick_get>
    b478:	1940      	adds	r0, r0, r5
    b47a:	eb41 0104 	adc.w	r1, r1, r4
}
    b47e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    b480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b484:	4601      	mov	r1, r0
    b486:	e7fa      	b.n	b47e <sys_clock_timeout_end_calc+0x3a>

0000b488 <k_timer_init>:
	timer->status = 0U;
    b488:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    b48a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    b48e:	f100 0218 	add.w	r2, r0, #24
    b492:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    b496:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    b49a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    b49c:	6343      	str	r3, [r0, #52]	; 0x34
}
    b49e:	4770      	bx	lr

0000b4a0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    b4a0:	b510      	push	{r4, lr}
    b4a2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    b4a4:	f7fd fd0a 	bl	8ebc <z_abort_timeout>

	if (inactive) {
    b4a8:	b9b0      	cbnz	r0, b4d8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    b4aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b4ac:	b10b      	cbz	r3, b4b2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    b4ae:	4620      	mov	r0, r4
    b4b0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    b4b2:	f104 0018 	add.w	r0, r4, #24
    b4b6:	f7fd f8ed 	bl	8694 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    b4ba:	b168      	cbz	r0, b4d8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    b4bc:	f7fc fb82 	bl	7bc4 <z_ready_thread>
    b4c0:	f04f 0320 	mov.w	r3, #32
    b4c4:	f3ef 8011 	mrs	r0, BASEPRI
    b4c8:	f383 8812 	msr	BASEPRI_MAX, r3
    b4cc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4d4:	f7ff bf98 	b.w	b408 <z_reschedule_irqlock>
    b4d8:	bd10      	pop	{r4, pc}

0000b4da <k_malloc>:
{
    b4da:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
    b4dc:	2004      	movs	r0, #4
    b4de:	f7fe b817 	b.w	9510 <k_aligned_alloc>

0000b4e2 <k_heap_init>:
{
    b4e2:	b410      	push	{r4}
    b4e4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    b4e8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    b4ec:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    b4ee:	f7f6 be4f 	b.w	2190 <sys_heap_init>

0000b4f2 <open_cab>:
    uint16_t i;
    i = (buf - cab_id->buffers) / cab_id->num;
    return i;
}

cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4f6:	4606      	mov	r6, r0

    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b4f8:	2030      	movs	r0, #48	; 0x30
cab* open_cab(char* name, uint16_t num, uint16_t dim, uint16_t* first){
    b4fa:	460d      	mov	r5, r1
    b4fc:	4617      	mov	r7, r2
    b4fe:	4698      	mov	r8, r3
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b500:	f7ff ffeb 	bl	b4da <k_malloc>
    buffer->num = num;
    b504:	8085      	strh	r5, [r0, #4]
    buffer->dim = dim;
    buffer->size = num * dim;
    b506:	fb15 f507 	smulbb	r5, r5, r7
    cab* buffer = (cab *) k_malloc(sizeof(cab));
    b50a:	4604      	mov	r4, r0
    buffer->dim = dim;
    b50c:	80c7      	strh	r7, [r0, #6]
    buffer->size = num * dim;
    b50e:	8105      	strh	r5, [r0, #8]
	return z_impl_k_mutex_init(mutex);
    b510:	301c      	adds	r0, #28
    b512:	f7ff ff66 	bl	b3e2 <z_impl_k_mutex_init>
    k_mutex_init(&buffer->mutex);
    /* The minimum number of buffers needed for a CAB to avoid conflicts 
    must be equal to the number of tasks which share the CAB plus one */
    buffer->buffers = (uint16_t *) k_malloc(buffer->size * N_TASKS); 
    b516:	8920      	ldrh	r0, [r4, #8]
    b518:	0040      	lsls	r0, r0, #1
    b51a:	f7ff ffde 	bl	b4da <k_malloc>
    b51e:	60e0      	str	r0, [r4, #12]
    buffer->name = (char *) k_malloc(strlen(name));
    b520:	4630      	mov	r0, r6
    b522:	f7f5 fc57 	bl	dd4 <strlen>
    b526:	f7ff ffd8 	bl	b4da <k_malloc>
    b52a:	6020      	str	r0, [r4, #0]
    buffer->head = (uint16_t *) k_malloc(buffer->size);
    b52c:	8920      	ldrh	r0, [r4, #8]
    b52e:	f7ff ffd4 	bl	b4da <k_malloc>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
    b532:	4631      	mov	r1, r6
    b534:	61a0      	str	r0, [r4, #24]
    b536:	6820      	ldr	r0, [r4, #0]
    b538:	f000 f859 	bl	b5ee <strcpy>
    strcpy(buffer->name, name);
    buffer->head = first;
    b53c:	f8c4 8018 	str.w	r8, [r4, #24]
    return buffer;
}
    b540:	4620      	mov	r0, r4
    b542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b546 <nearObstSearch>:

/* Function to look for closeby obstacles */
uint8_t nearObstSearch(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    uint8_t flag = 0;
    /* Iterating through the CSA, tops to bottom, left column to right column */
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    b546:	f500 537f 	add.w	r3, r0, #16320	; 0x3fc0
    b54a:	f500 50fe 	add.w	r0, r0, #8128	; 0x1fc0
    b54e:	331f      	adds	r3, #31
    b550:	301f      	adds	r0, #31
    {
        for (int j = CSA_LEFT; j < CSA_RIGHT; j++)
    b552:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
        {   /* If the pixel is an obstacle returns 1 */    
            if(imageBuf[i][j] == OBSTACLE_COLOR){
    b556:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    b55a:	2980      	cmp	r1, #128	; 0x80
    b55c:	d007      	beq.n	b56e <nearObstSearch+0x28>
        for (int j = CSA_LEFT; j < CSA_RIGHT; j++)
    b55e:	429a      	cmp	r2, r3
    b560:	d1f9      	bne.n	b556 <nearObstSearch+0x10>
	for (uint16_t i = GN - 1; i >= CSA_FRONT; i--)
    b562:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
    b566:	4283      	cmp	r3, r0
    b568:	d1f3      	bne.n	b552 <nearObstSearch+0xc>
                flag = 1;
                return flag;
            }
        }
    }
    return flag;
    b56a:	2000      	movs	r0, #0
}
    b56c:	4770      	bx	lr
                return flag;
    b56e:	2001      	movs	r0, #1
    b570:	4770      	bx	lr

0000b572 <obstCount>:

/* Function that counts obstacles. */
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    b572:	b530      	push	{r4, r5, lr}
    b574:	f500 4280 	add.w	r2, r0, #16384	; 0x4000
    b578:	f100 017f 	add.w	r1, r0, #127	; 0x7f
    b57c:	327f      	adds	r2, #127	; 0x7f
    /* Number of obstacles */
    uint16_t obs = 0; 
    b57e:	2000      	movs	r0, #0
    uint16_t c_pixels = 0; 
    /* Iterating through the image, tops to bottom, left column to right column */
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    {

        for (int j = 0; j < IMGWIDTH; j++)
    b580:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
uint16_t obstCount(uint8_t imageBuf[IMGHEIGHT][IMGWIDTH]) {
    b584:	2300      	movs	r3, #0
        {   /* If the pixel is an obstacle the pixel count increments and goes to its next iteration */    
            if(imageBuf[i][j] == OBSTACLE_COLOR){
    b586:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    b58a:	2d80      	cmp	r5, #128	; 0x80
    b58c:	d10d      	bne.n	b5aa <obstCount+0x38>
                c_pixels++;
    b58e:	3301      	adds	r3, #1
    b590:	b29b      	uxth	r3, r3
        for (int j = 0; j < IMGWIDTH; j++)
    b592:	428c      	cmp	r4, r1
    b594:	d1f7      	bne.n	b586 <obstCount+0x14>
            if(c_pixels >= 2) obs++;
            /* Reset the pixel count when there no pixels in the sequence */
            c_pixels = 0;
        }
        /* Same step as done above but to avoid bugs with last pixel from last row */
        if(c_pixels >= 2) obs++;
    b596:	2b01      	cmp	r3, #1
    b598:	bf88      	it	hi
    b59a:	3001      	addhi	r0, #1
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    b59c:	f101 0180 	add.w	r1, r1, #128	; 0x80
        if(c_pixels >= 2) obs++;
    b5a0:	bf88      	it	hi
    b5a2:	b280      	uxthhi	r0, r0
	for (uint16_t i = 0; i < IMGHEIGHT; i++)
    b5a4:	4291      	cmp	r1, r2
    b5a6:	d1eb      	bne.n	b580 <obstCount+0xe>
        
        c_pixels = 0;
    }

    return obs;
}
    b5a8:	bd30      	pop	{r4, r5, pc}
            if(c_pixels >= 2) obs++;
    b5aa:	2b01      	cmp	r3, #1
    b5ac:	bf84      	itt	hi
    b5ae:	3001      	addhi	r0, #1
    b5b0:	b280      	uxthhi	r0, r0
            c_pixels = 0;
    b5b2:	2300      	movs	r3, #0
    b5b4:	e7ed      	b.n	b592 <obstCount+0x20>

0000b5b6 <atan2>:
    b5b6:	f7f5 bc47 	b.w	e48 <__ieee754_atan2>

0000b5ba <fabs>:
    b5ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    b5be:	4619      	mov	r1, r3
    b5c0:	4770      	bx	lr

0000b5c2 <memcpy>:
    b5c2:	440a      	add	r2, r1
    b5c4:	4291      	cmp	r1, r2
    b5c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    b5ca:	d100      	bne.n	b5ce <memcpy+0xc>
    b5cc:	4770      	bx	lr
    b5ce:	b510      	push	{r4, lr}
    b5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
    b5d4:	f803 4f01 	strb.w	r4, [r3, #1]!
    b5d8:	4291      	cmp	r1, r2
    b5da:	d1f9      	bne.n	b5d0 <memcpy+0xe>
    b5dc:	bd10      	pop	{r4, pc}

0000b5de <memset>:
    b5de:	4402      	add	r2, r0
    b5e0:	4603      	mov	r3, r0
    b5e2:	4293      	cmp	r3, r2
    b5e4:	d100      	bne.n	b5e8 <memset+0xa>
    b5e6:	4770      	bx	lr
    b5e8:	f803 1b01 	strb.w	r1, [r3], #1
    b5ec:	e7f9      	b.n	b5e2 <memset+0x4>

0000b5ee <strcpy>:
    b5ee:	4603      	mov	r3, r0
    b5f0:	f811 2b01 	ldrb.w	r2, [r1], #1
    b5f4:	f803 2b01 	strb.w	r2, [r3], #1
    b5f8:	2a00      	cmp	r2, #0
    b5fa:	d1f9      	bne.n	b5f0 <strcpy+0x2>
    b5fc:	4770      	bx	lr

0000b5fe <strnlen>:
    b5fe:	b510      	push	{r4, lr}
    b600:	4602      	mov	r2, r0
    b602:	4401      	add	r1, r0
    b604:	428a      	cmp	r2, r1
    b606:	4613      	mov	r3, r2
    b608:	d003      	beq.n	b612 <strnlen+0x14>
    b60a:	781c      	ldrb	r4, [r3, #0]
    b60c:	3201      	adds	r2, #1
    b60e:	2c00      	cmp	r4, #0
    b610:	d1f8      	bne.n	b604 <strnlen+0x6>
    b612:	1a18      	subs	r0, r3, r0
    b614:	bd10      	pop	{r4, pc}

0000b616 <__sfmoreglue>:
    b616:	b570      	push	{r4, r5, r6, lr}
    b618:	2368      	movs	r3, #104	; 0x68
    b61a:	1e4d      	subs	r5, r1, #1
    b61c:	435d      	muls	r5, r3
    b61e:	460e      	mov	r6, r1
    b620:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b624:	f7fe f8e4 	bl	97f0 <_malloc_r>
    b628:	4604      	mov	r4, r0
    b62a:	b140      	cbz	r0, b63e <__sfmoreglue+0x28>
    b62c:	2100      	movs	r1, #0
    b62e:	e9c0 1600 	strd	r1, r6, [r0]
    b632:	300c      	adds	r0, #12
    b634:	60a0      	str	r0, [r4, #8]
    b636:	f105 0268 	add.w	r2, r5, #104	; 0x68
    b63a:	f7ff ffd0 	bl	b5de <memset>
    b63e:	4620      	mov	r0, r4
    b640:	bd70      	pop	{r4, r5, r6, pc}

0000b642 <_fwalk_reent>:
    b642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b646:	4606      	mov	r6, r0
    b648:	4688      	mov	r8, r1
    b64a:	f100 0448 	add.w	r4, r0, #72	; 0x48
    b64e:	2700      	movs	r7, #0
    b650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    b654:	f1b9 0901 	subs.w	r9, r9, #1
    b658:	d505      	bpl.n	b666 <_fwalk_reent+0x24>
    b65a:	6824      	ldr	r4, [r4, #0]
    b65c:	2c00      	cmp	r4, #0
    b65e:	d1f7      	bne.n	b650 <_fwalk_reent+0xe>
    b660:	4638      	mov	r0, r7
    b662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b666:	89ab      	ldrh	r3, [r5, #12]
    b668:	2b01      	cmp	r3, #1
    b66a:	d907      	bls.n	b67c <_fwalk_reent+0x3a>
    b66c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    b670:	3301      	adds	r3, #1
    b672:	d003      	beq.n	b67c <_fwalk_reent+0x3a>
    b674:	4629      	mov	r1, r5
    b676:	4630      	mov	r0, r6
    b678:	47c0      	blx	r8
    b67a:	4307      	orrs	r7, r0
    b67c:	3568      	adds	r5, #104	; 0x68
    b67e:	e7e9      	b.n	b654 <_fwalk_reent+0x12>

0000b680 <__sfputc_r>:
    b680:	6893      	ldr	r3, [r2, #8]
    b682:	3b01      	subs	r3, #1
    b684:	2b00      	cmp	r3, #0
    b686:	b410      	push	{r4}
    b688:	6093      	str	r3, [r2, #8]
    b68a:	da07      	bge.n	b69c <__sfputc_r+0x1c>
    b68c:	6994      	ldr	r4, [r2, #24]
    b68e:	42a3      	cmp	r3, r4
    b690:	db01      	blt.n	b696 <__sfputc_r+0x16>
    b692:	290a      	cmp	r1, #10
    b694:	d102      	bne.n	b69c <__sfputc_r+0x1c>
    b696:	bc10      	pop	{r4}
    b698:	f7fe bc52 	b.w	9f40 <__swbuf_r>
    b69c:	6813      	ldr	r3, [r2, #0]
    b69e:	1c58      	adds	r0, r3, #1
    b6a0:	6010      	str	r0, [r2, #0]
    b6a2:	7019      	strb	r1, [r3, #0]
    b6a4:	4608      	mov	r0, r1
    b6a6:	bc10      	pop	{r4}
    b6a8:	4770      	bx	lr

0000b6aa <__sfputs_r>:
    b6aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6ac:	4606      	mov	r6, r0
    b6ae:	460f      	mov	r7, r1
    b6b0:	4614      	mov	r4, r2
    b6b2:	18d5      	adds	r5, r2, r3
    b6b4:	42ac      	cmp	r4, r5
    b6b6:	d101      	bne.n	b6bc <__sfputs_r+0x12>
    b6b8:	2000      	movs	r0, #0
    b6ba:	e007      	b.n	b6cc <__sfputs_r+0x22>
    b6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
    b6c0:	463a      	mov	r2, r7
    b6c2:	4630      	mov	r0, r6
    b6c4:	f7ff ffdc 	bl	b680 <__sfputc_r>
    b6c8:	1c43      	adds	r3, r0, #1
    b6ca:	d1f3      	bne.n	b6b4 <__sfputs_r+0xa>
    b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b6ce <_printf_common>:
    b6ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6d2:	4616      	mov	r6, r2
    b6d4:	4698      	mov	r8, r3
    b6d6:	688a      	ldr	r2, [r1, #8]
    b6d8:	690b      	ldr	r3, [r1, #16]
    b6da:	f8dd 9020 	ldr.w	r9, [sp, #32]
    b6de:	4293      	cmp	r3, r2
    b6e0:	bfb8      	it	lt
    b6e2:	4613      	movlt	r3, r2
    b6e4:	6033      	str	r3, [r6, #0]
    b6e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    b6ea:	4607      	mov	r7, r0
    b6ec:	460c      	mov	r4, r1
    b6ee:	b10a      	cbz	r2, b6f4 <_printf_common+0x26>
    b6f0:	3301      	adds	r3, #1
    b6f2:	6033      	str	r3, [r6, #0]
    b6f4:	6823      	ldr	r3, [r4, #0]
    b6f6:	0699      	lsls	r1, r3, #26
    b6f8:	bf42      	ittt	mi
    b6fa:	6833      	ldrmi	r3, [r6, #0]
    b6fc:	3302      	addmi	r3, #2
    b6fe:	6033      	strmi	r3, [r6, #0]
    b700:	6825      	ldr	r5, [r4, #0]
    b702:	f015 0506 	ands.w	r5, r5, #6
    b706:	d106      	bne.n	b716 <_printf_common+0x48>
    b708:	f104 0a19 	add.w	sl, r4, #25
    b70c:	68e3      	ldr	r3, [r4, #12]
    b70e:	6832      	ldr	r2, [r6, #0]
    b710:	1a9b      	subs	r3, r3, r2
    b712:	42ab      	cmp	r3, r5
    b714:	dc26      	bgt.n	b764 <_printf_common+0x96>
    b716:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    b71a:	6822      	ldr	r2, [r4, #0]
    b71c:	3b00      	subs	r3, #0
    b71e:	bf18      	it	ne
    b720:	2301      	movne	r3, #1
    b722:	0692      	lsls	r2, r2, #26
    b724:	d42b      	bmi.n	b77e <_printf_common+0xb0>
    b726:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b72a:	4641      	mov	r1, r8
    b72c:	4638      	mov	r0, r7
    b72e:	47c8      	blx	r9
    b730:	3001      	adds	r0, #1
    b732:	d01e      	beq.n	b772 <_printf_common+0xa4>
    b734:	6823      	ldr	r3, [r4, #0]
    b736:	6922      	ldr	r2, [r4, #16]
    b738:	f003 0306 	and.w	r3, r3, #6
    b73c:	2b04      	cmp	r3, #4
    b73e:	bf02      	ittt	eq
    b740:	68e5      	ldreq	r5, [r4, #12]
    b742:	6833      	ldreq	r3, [r6, #0]
    b744:	1aed      	subeq	r5, r5, r3
    b746:	68a3      	ldr	r3, [r4, #8]
    b748:	bf0c      	ite	eq
    b74a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    b74e:	2500      	movne	r5, #0
    b750:	4293      	cmp	r3, r2
    b752:	bfc4      	itt	gt
    b754:	1a9b      	subgt	r3, r3, r2
    b756:	18ed      	addgt	r5, r5, r3
    b758:	2600      	movs	r6, #0
    b75a:	341a      	adds	r4, #26
    b75c:	42b5      	cmp	r5, r6
    b75e:	d11a      	bne.n	b796 <_printf_common+0xc8>
    b760:	2000      	movs	r0, #0
    b762:	e008      	b.n	b776 <_printf_common+0xa8>
    b764:	2301      	movs	r3, #1
    b766:	4652      	mov	r2, sl
    b768:	4641      	mov	r1, r8
    b76a:	4638      	mov	r0, r7
    b76c:	47c8      	blx	r9
    b76e:	3001      	adds	r0, #1
    b770:	d103      	bne.n	b77a <_printf_common+0xac>
    b772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b77a:	3501      	adds	r5, #1
    b77c:	e7c6      	b.n	b70c <_printf_common+0x3e>
    b77e:	18e1      	adds	r1, r4, r3
    b780:	1c5a      	adds	r2, r3, #1
    b782:	2030      	movs	r0, #48	; 0x30
    b784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    b788:	4422      	add	r2, r4
    b78a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    b78e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    b792:	3302      	adds	r3, #2
    b794:	e7c7      	b.n	b726 <_printf_common+0x58>
    b796:	2301      	movs	r3, #1
    b798:	4622      	mov	r2, r4
    b79a:	4641      	mov	r1, r8
    b79c:	4638      	mov	r0, r7
    b79e:	47c8      	blx	r9
    b7a0:	3001      	adds	r0, #1
    b7a2:	d0e6      	beq.n	b772 <_printf_common+0xa4>
    b7a4:	3601      	adds	r6, #1
    b7a6:	e7d9      	b.n	b75c <_printf_common+0x8e>

0000b7a8 <__sread>:
    b7a8:	b510      	push	{r4, lr}
    b7aa:	460c      	mov	r4, r1
    b7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7b0:	f7fe fd34 	bl	a21c <_read_r>
    b7b4:	2800      	cmp	r0, #0
    b7b6:	bfab      	itete	ge
    b7b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    b7ba:	89a3      	ldrhlt	r3, [r4, #12]
    b7bc:	181b      	addge	r3, r3, r0
    b7be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    b7c2:	bfac      	ite	ge
    b7c4:	6563      	strge	r3, [r4, #84]	; 0x54
    b7c6:	81a3      	strhlt	r3, [r4, #12]
    b7c8:	bd10      	pop	{r4, pc}

0000b7ca <__swrite>:
    b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7ce:	461f      	mov	r7, r3
    b7d0:	898b      	ldrh	r3, [r1, #12]
    b7d2:	05db      	lsls	r3, r3, #23
    b7d4:	4605      	mov	r5, r0
    b7d6:	460c      	mov	r4, r1
    b7d8:	4616      	mov	r6, r2
    b7da:	d505      	bpl.n	b7e8 <__swrite+0x1e>
    b7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b7e0:	2302      	movs	r3, #2
    b7e2:	2200      	movs	r2, #0
    b7e4:	f7fe fcc8 	bl	a178 <_lseek_r>
    b7e8:	89a3      	ldrh	r3, [r4, #12]
    b7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b7f2:	81a3      	strh	r3, [r4, #12]
    b7f4:	4632      	mov	r2, r6
    b7f6:	463b      	mov	r3, r7
    b7f8:	4628      	mov	r0, r5
    b7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b7fe:	f7fe bbf1 	b.w	9fe4 <_write_r>

0000b802 <__sseek>:
    b802:	b510      	push	{r4, lr}
    b804:	460c      	mov	r4, r1
    b806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b80a:	f7fe fcb5 	bl	a178 <_lseek_r>
    b80e:	1c43      	adds	r3, r0, #1
    b810:	89a3      	ldrh	r3, [r4, #12]
    b812:	bf15      	itete	ne
    b814:	6560      	strne	r0, [r4, #84]	; 0x54
    b816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b81a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b81e:	81a3      	strheq	r3, [r4, #12]
    b820:	bf18      	it	ne
    b822:	81a3      	strhne	r3, [r4, #12]
    b824:	bd10      	pop	{r4, pc}

0000b826 <__sclose>:
    b826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b82a:	f7fe bc59 	b.w	a0e0 <_close_r>

0000b82e <__sflush_r>:
    b82e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    b832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b834:	0717      	lsls	r7, r2, #28
    b836:	4605      	mov	r5, r0
    b838:	460c      	mov	r4, r1
    b83a:	d456      	bmi.n	b8ea <__sflush_r+0xbc>
    b83c:	684b      	ldr	r3, [r1, #4]
    b83e:	2b00      	cmp	r3, #0
    b840:	dc02      	bgt.n	b848 <__sflush_r+0x1a>
    b842:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    b844:	2b00      	cmp	r3, #0
    b846:	dd3d      	ble.n	b8c4 <__sflush_r+0x96>
    b848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    b84a:	2e00      	cmp	r6, #0
    b84c:	d03a      	beq.n	b8c4 <__sflush_r+0x96>
    b84e:	2300      	movs	r3, #0
    b850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    b854:	682f      	ldr	r7, [r5, #0]
    b856:	6a21      	ldr	r1, [r4, #32]
    b858:	602b      	str	r3, [r5, #0]
    b85a:	d025      	beq.n	b8a8 <__sflush_r+0x7a>
    b85c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    b85e:	89a3      	ldrh	r3, [r4, #12]
    b860:	0758      	lsls	r0, r3, #29
    b862:	d505      	bpl.n	b870 <__sflush_r+0x42>
    b864:	6863      	ldr	r3, [r4, #4]
    b866:	1ad2      	subs	r2, r2, r3
    b868:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b86a:	b10b      	cbz	r3, b870 <__sflush_r+0x42>
    b86c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b86e:	1ad2      	subs	r2, r2, r3
    b870:	6a21      	ldr	r1, [r4, #32]
    b872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    b874:	2300      	movs	r3, #0
    b876:	4628      	mov	r0, r5
    b878:	47b0      	blx	r6
    b87a:	1c41      	adds	r1, r0, #1
    b87c:	d024      	beq.n	b8c8 <__sflush_r+0x9a>
    b87e:	2300      	movs	r3, #0
    b880:	6063      	str	r3, [r4, #4]
    b882:	6923      	ldr	r3, [r4, #16]
    b884:	6023      	str	r3, [r4, #0]
    b886:	89a3      	ldrh	r3, [r4, #12]
    b888:	04da      	lsls	r2, r3, #19
    b88a:	d500      	bpl.n	b88e <__sflush_r+0x60>
    b88c:	6560      	str	r0, [r4, #84]	; 0x54
    b88e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b890:	602f      	str	r7, [r5, #0]
    b892:	b1b9      	cbz	r1, b8c4 <__sflush_r+0x96>
    b894:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b898:	4299      	cmp	r1, r3
    b89a:	d002      	beq.n	b8a2 <__sflush_r+0x74>
    b89c:	4628      	mov	r0, r5
    b89e:	f7fd ff5d 	bl	975c <_free_r>
    b8a2:	2300      	movs	r3, #0
    b8a4:	6363      	str	r3, [r4, #52]	; 0x34
    b8a6:	e00d      	b.n	b8c4 <__sflush_r+0x96>
    b8a8:	2301      	movs	r3, #1
    b8aa:	4628      	mov	r0, r5
    b8ac:	47b0      	blx	r6
    b8ae:	1c46      	adds	r6, r0, #1
    b8b0:	4602      	mov	r2, r0
    b8b2:	d1d4      	bne.n	b85e <__sflush_r+0x30>
    b8b4:	682b      	ldr	r3, [r5, #0]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d0d1      	beq.n	b85e <__sflush_r+0x30>
    b8ba:	2b1d      	cmp	r3, #29
    b8bc:	d001      	beq.n	b8c2 <__sflush_r+0x94>
    b8be:	2b16      	cmp	r3, #22
    b8c0:	d12a      	bne.n	b918 <__sflush_r+0xea>
    b8c2:	602f      	str	r7, [r5, #0]
    b8c4:	2000      	movs	r0, #0
    b8c6:	e02e      	b.n	b926 <__sflush_r+0xf8>
    b8c8:	682a      	ldr	r2, [r5, #0]
    b8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b8ce:	b142      	cbz	r2, b8e2 <__sflush_r+0xb4>
    b8d0:	2a1d      	cmp	r2, #29
    b8d2:	d001      	beq.n	b8d8 <__sflush_r+0xaa>
    b8d4:	2a16      	cmp	r2, #22
    b8d6:	d121      	bne.n	b91c <__sflush_r+0xee>
    b8d8:	2300      	movs	r3, #0
    b8da:	6063      	str	r3, [r4, #4]
    b8dc:	6923      	ldr	r3, [r4, #16]
    b8de:	6023      	str	r3, [r4, #0]
    b8e0:	e7d5      	b.n	b88e <__sflush_r+0x60>
    b8e2:	6062      	str	r2, [r4, #4]
    b8e4:	6922      	ldr	r2, [r4, #16]
    b8e6:	6022      	str	r2, [r4, #0]
    b8e8:	e7ce      	b.n	b888 <__sflush_r+0x5a>
    b8ea:	690f      	ldr	r7, [r1, #16]
    b8ec:	2f00      	cmp	r7, #0
    b8ee:	d0e9      	beq.n	b8c4 <__sflush_r+0x96>
    b8f0:	0793      	lsls	r3, r2, #30
    b8f2:	680e      	ldr	r6, [r1, #0]
    b8f4:	bf08      	it	eq
    b8f6:	694b      	ldreq	r3, [r1, #20]
    b8f8:	600f      	str	r7, [r1, #0]
    b8fa:	bf18      	it	ne
    b8fc:	2300      	movne	r3, #0
    b8fe:	1bf6      	subs	r6, r6, r7
    b900:	608b      	str	r3, [r1, #8]
    b902:	2e00      	cmp	r6, #0
    b904:	ddde      	ble.n	b8c4 <__sflush_r+0x96>
    b906:	6a21      	ldr	r1, [r4, #32]
    b908:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    b90c:	4633      	mov	r3, r6
    b90e:	463a      	mov	r2, r7
    b910:	4628      	mov	r0, r5
    b912:	47e0      	blx	ip
    b914:	2800      	cmp	r0, #0
    b916:	dc07      	bgt.n	b928 <__sflush_r+0xfa>
    b918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b920:	81a3      	strh	r3, [r4, #12]
    b922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b928:	4407      	add	r7, r0
    b92a:	1a36      	subs	r6, r6, r0
    b92c:	e7e9      	b.n	b902 <__sflush_r+0xd4>

0000b92e <__swhatbuf_r>:
    b92e:	b570      	push	{r4, r5, r6, lr}
    b930:	460c      	mov	r4, r1
    b932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b936:	2900      	cmp	r1, #0
    b938:	b096      	sub	sp, #88	; 0x58
    b93a:	4615      	mov	r5, r2
    b93c:	461e      	mov	r6, r3
    b93e:	da0d      	bge.n	b95c <__swhatbuf_r+0x2e>
    b940:	89a3      	ldrh	r3, [r4, #12]
    b942:	f013 0f80 	tst.w	r3, #128	; 0x80
    b946:	f04f 0100 	mov.w	r1, #0
    b94a:	bf14      	ite	ne
    b94c:	2340      	movne	r3, #64	; 0x40
    b94e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
    b952:	2000      	movs	r0, #0
    b954:	6031      	str	r1, [r6, #0]
    b956:	602b      	str	r3, [r5, #0]
    b958:	b016      	add	sp, #88	; 0x58
    b95a:	bd70      	pop	{r4, r5, r6, pc}
    b95c:	466a      	mov	r2, sp
    b95e:	f7fe fc6f 	bl	a240 <_fstat_r>
    b962:	2800      	cmp	r0, #0
    b964:	dbec      	blt.n	b940 <__swhatbuf_r+0x12>
    b966:	9901      	ldr	r1, [sp, #4]
    b968:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
    b96c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
    b970:	4259      	negs	r1, r3
    b972:	4159      	adcs	r1, r3
    b974:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b978:	e7eb      	b.n	b952 <__swhatbuf_r+0x24>
	...

0000b97c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b97c:	f7fa ba4a 	b.w	5e14 <SystemInit>
